uint64_t llvm::HotColdSplitting::run(llvm::ProfileSummaryInfo **this, llvm::Module *a2)
{
  uint64_t ProfileSummary;
  char *v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 isFunctionEntryCold;
  unsigned __int8 v12;

  ProfileSummary = llvm::Module::getProfileSummary(a2, 0);
  v5 = (char *)a2 + 24;
  v6 = (char *)*((_QWORD *)a2 + 4);
  if (v6 != (char *)a2 + 24)
  {
    v7 = ProfileSummary;
    v8 = 0;
    while (1)
    {
      if (v6)
        v9 = (uint64_t)(v6 - 56);
      else
        v9 = 0;
      if (v6 && *(_BYTE *)(v9 + 16) == 3)
      {
        if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_17;
      }
      else if (!*(_BYTE *)(v9 + 16) && *(_QWORD *)(v9 + 72) == v9 + 72 && (*(_BYTE *)(v9 + 34) & 0x80) == 0)
      {
        goto LABEL_17;
      }
      v10 = *(_QWORD *)(v9 + 112);
      if (v10)
      {
        if ((*(_BYTE *)(v10 + 17) & 8) != 0)
          goto LABEL_17;
        if ((*(_BYTE *)(v10 + 12) & 0x20) != 0)
          goto LABEL_26;
      }
      if ((*(_WORD *)(v9 + 18) & 0x3FF0) == 0x90
        || (isFunctionEntryCold = llvm::ProfileSummaryInfo::isFunctionEntryCold(*this, (const llvm::Function *)v9)))
      {
LABEL_26:
        v12 = sub_1C56ED398(v9, 0);
        goto LABEL_20;
      }
      if (llvm::HotColdSplitting::shouldOutlineFrom((llvm::HotColdSplitting *)isFunctionEntryCold, (const llvm::Function *)v9))
      {
        v12 = llvm::HotColdSplitting::outlineColdRegions((llvm::HotColdSplitting *)this, (llvm::Function *)v9, v7 != 0);
LABEL_20:
        v8 |= v12;
      }
LABEL_17:
      v6 = (char *)*((_QWORD *)v6 + 1);
      if (v6 == v5)
        return v8 & 1;
    }
  }
  v8 = 0;
  return v8 & 1;
}

void llvm::initializeHotColdSplittingLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831EA0);
  if (v2 != -1)
  {
    v5[0] = sub_1C56EE918;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831EA0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56EE918(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, a2);
  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Hot Cold Splitting";
  *(_QWORD *)(v4 + 8) = 18;
  *(_QWORD *)(v4 + 16) = "hotcoldsplit";
  *(_QWORD *)(v4 + 24) = 12;
  *(_QWORD *)(v4 + 32) = &unk_1EF8F32D0;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C56EEFB0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C56EE9B4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32D0;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817A3D8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831EA0);
  if (v3 != -1)
  {
    v7[0] = sub_1C56EE918;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831EA0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C56EEA7C(char **a1)
{
  unint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 < v2)
  {
    *((_QWORD *)v3 + 2) = 0;
    v4 = v3 + 32;
    *((_QWORD *)v3 + 3) = 0;
    *(_QWORD *)v3 = v3 + 16;
    *((_QWORD *)v3 + 1) = 0;
    v3[24] = 0;
    goto LABEL_22;
  }
  v5 = *a1;
  v6 = (v3 - *a1) >> 5;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59)
    abort();
  v8 = v2 - (_QWORD)v5;
  if (v8 >> 4 > v7)
    v7 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v7;
  if (v9 >> 59)
    sub_1C4764EE4();
  v10 = (char *)operator new(32 * v9);
  v11 = &v10[32 * v6];
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 2) = 0;
  v12 = &v10[32 * v9];
  v4 = v11 + 32;
  *(_QWORD *)v11 = v11 + 16;
  *((_QWORD *)v11 + 1) = 0;
  v11[24] = 0;
  if (v3 == v5)
  {
    *a1 = v11;
    a1[1] = v4;
    a1[2] = v12;
    if (!v3)
      goto LABEL_22;
    goto LABEL_21;
  }
  v13 = 0;
  do
  {
    v14 = &v11[v13];
    v15 = &v11[v13 - 16];
    *((_QWORD *)v14 - 4) = v15;
    *((_QWORD *)v14 - 3) = 0;
    v16 = &v3[v13];
    if (*(_DWORD *)&v3[v13 - 24])
      sub_1C56EEC88((uint64_t)&v11[v13 - 32], (uint64_t *)v16 - 4);
    v17 = *((_QWORD *)v16 - 2);
    v11[v13 - 8] = *(v16 - 8);
    *(_QWORD *)v15 = v17;
    v13 -= 32;
  }
  while (&v3[v13] != v5);
  v3 = *a1;
  v18 = a1[1];
  *a1 = &v11[v13];
  a1[1] = v4;
  a1[2] = v12;
  if (v18 != v3)
  {
    v19 = v18 - 16;
    do
    {
      v20 = (char *)*((_QWORD *)v19 - 2);
      if (v19 != v20)
        free(v20);
      v21 = v19 - 16;
      v19 -= 32;
    }
    while (v21 != v3);
  }
  if (v3)
LABEL_21:
    operator delete(v3);
LABEL_22:
  a1[1] = v4;
}

BOOL sub_1C56EEBF8(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  if ((*(_WORD *)(a1 + 18) & 0x7FFF) != 0)
    return 0;
  for (i = *(_QWORD *)(a1 + 48); ; i = *(_QWORD *)(i + 8))
  {
    v3 = i - 24;
    if (!i)
      v3 = 0;
    if (*(_BYTE *)(v3 + 16) != 83)
      break;
  }
  v4 = *(unsigned __int8 *)(i - 8) - 38;
  if (v4 < 0x39 && ((0x100060000000001uLL >> v4) & 1) != 0)
    return 0;
  v5 = *(_QWORD *)(a1 + 40);
  if (v5)
    v6 = v5 - 24;
  else
    v6 = 0;
  if (*(unsigned __int8 *)(v6 + 16) - 29 >= 0xB)
    v6 = 0;
  return *(unsigned __int8 *)(v6 + 16) - 35 < 0xFFFFFFFE;
}

uint64_t sub_1C56EEC88(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v14;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 == a2 + 2)
    {
      v7 = a2 + 1;
      v8 = *((unsigned int *)a2 + 2);
      v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if ((_DWORD)v8)
        {
          v11 = v4 + 16 * v8;
          v12 = *(_DWORD **)a1;
          do
          {
            *(_QWORD *)v12 = *(_QWORD *)v4;
            v12[2] = *(_DWORD *)(v4 + 8);
            v4 += 16;
            v12 += 4;
          }
          while (v4 != v11);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v8)
        {
          if ((_DWORD)v9)
          {
            v13 = v4 + 16 * v9;
            v14 = *(_DWORD **)a1;
            do
            {
              *(_QWORD *)v14 = *(_QWORD *)v4;
              v14[2] = *(_DWORD *)(v4 + 8);
              v4 += 16;
              v14 += 4;
            }
            while (v4 != v13);
          }
          else
          {
            v9 = 0;
          }
          v10 = v8;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 16);
          v9 = 0;
          v10 = *v7;
        }
        if (v9 != v10)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*a2 + 16 * v9), *a2 + 16 * v10 - (*a2 + 16 * v9));
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      v6 = *(_DWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
    }
    *v7 = 0;
  }
  return a1;
}

void sub_1C56EEDD8(llvm::SmallPtrSetImplBase *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;

  v2 = *((_QWORD *)this + 13);
  while (2)
  {
    if (!*(_BYTE *)(v2 - 8))
    {
      v3 = *(_QWORD *)(v2 - 24);
      do
      {
        v3 = *(_QWORD *)(v3 + 8);
        if (!v3)
          break;
        v4 = *(_QWORD *)(v3 + 24);
        v5 = *(unsigned __int8 *)(v4 + 16);
        v6 = v4 && v5 >= 0x1C;
      }
      while (!v6 || v5 - 29 >= 0xB);
      *(_QWORD *)(v2 - 16) = v3;
      *(_BYTE *)(v2 - 8) = 1;
    }
    while (1)
    {
      v8 = *(_QWORD *)(v2 - 16);
      if (!v8)
        break;
      v9 = *(_QWORD *)(v2 - 16);
      do
      {
        v9 = *(_QWORD *)(v9 + 8);
        if (!v9)
          break;
        v10 = *(_QWORD *)(v9 + 24);
        v11 = *(unsigned __int8 *)(v10 + 16);
        v12 = v10 && v11 >= 0x1C;
      }
      while (!v12 || v11 - 29 > 0xA);
      *(_QWORD *)(v2 - 16) = v9;
      v14 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 40);
      sub_1C4774094(this, v14);
      if (v15)
      {
        v18 = (_BYTE *)*((_QWORD *)this + 13);
        v17 = *((_QWORD *)this + 14);
        if ((unint64_t)v18 >= v17)
        {
          v20 = (_BYTE *)*((_QWORD *)this + 12);
          v21 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v20) >> 3) + 1;
          if (v21 > 0xAAAAAAAAAAAAAAALL)
            abort();
          v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (_QWORD)v20) >> 3);
          if (2 * v22 > v21)
            v21 = 2 * v22;
          if (v22 >= 0x555555555555555)
            v23 = 0xAAAAAAAAAAAAAAALL;
          else
            v23 = v21;
          if (v23)
          {
            if (v23 > 0xAAAAAAAAAAAAAAALL)
              sub_1C4764EE4();
            v24 = (char *)operator new(24 * v23);
          }
          else
          {
            v24 = 0;
          }
          v25 = &v24[8 * ((v18 - v20) >> 3)];
          *(_QWORD *)v25 = v14;
          v25[8] = 0;
          v25[16] = 0;
          v19 = v25 + 24;
          if (v18 != v20)
          {
            do
            {
              v26 = *(_OWORD *)(v18 - 24);
              *((_QWORD *)v25 - 1) = *((_QWORD *)v18 - 1);
              *(_OWORD *)(v25 - 24) = v26;
              v25 -= 24;
              v18 -= 24;
            }
            while (v18 != v20);
            v18 = (_BYTE *)*((_QWORD *)this + 12);
          }
          *((_QWORD *)this + 12) = v25;
          *((_QWORD *)this + 13) = v19;
          *((_QWORD *)this + 14) = &v24[24 * v23];
          if (v18)
            operator delete(v18);
        }
        else
        {
          *(_QWORD *)v18 = v14;
          v18[8] = 0;
          v19 = v18 + 24;
          v18[16] = 0;
        }
        *((_QWORD *)this + 13) = v19;
        return;
      }
    }
    v16 = *((_QWORD *)this + 12);
    v2 = *((_QWORD *)this + 13) - 24;
    *((_QWORD *)this + 13) = v2;
    if (v16 != v2)
      continue;
    break;
  }
}

uint64_t sub_1C56EEFB0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56EE9B4(v0);
}

void sub_1C56EEFDC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C56EF000(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::ProfileSummaryInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 144, (uint64_t)llvm::AssumptionCacheTracker::ID);
}

uint64_t sub_1C56EF064(llvm::ModulePass *a1, uint64_t **a2)
{
  uint64_t v4;
  char **v5;
  char *v6;
  llvm::ProfileSummaryInfo *v7;
  _QWORD *v8;
  void (**v9)(_QWORD *);
  uint64_t v10;
  llvm::ProfileSummaryInfo *v12[8];
  llvm::ModulePass *v13;
  uint64_t v14;
  llvm::ModulePass *v15;
  llvm::ModulePass *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if ((llvm::ModulePass::skipModule(a1, a2) & 1) != 0)
    return 0;
  v5 = (char **)**((_QWORD **)a1 + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::ProfileSummaryInfoWrapperPass::ID);
  v7 = *(llvm::ProfileSummaryInfo **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
  v14 = 0;
  v15 = a1;
  v16 = a1;
  v17[0] = &off_1E817A478;
  v17[1] = &v14;
  v18 = v17;
  v12[0] = v7;
  v12[1] = (llvm::ProfileSummaryInfo *)sub_1C56EF288;
  v12[2] = (llvm::ProfileSummaryInfo *)&v15;
  v12[3] = (llvm::ProfileSummaryInfo *)sub_1C56EF2DC;
  v12[4] = (llvm::ProfileSummaryInfo *)&v16;
  v12[5] = (llvm::ProfileSummaryInfo *)v17;
  v12[6] = (llvm::ProfileSummaryInfo *)sub_1C56EF3FC;
  v12[7] = (llvm::ProfileSummaryInfo *)&v13;
  v13 = a1;
  v4 = llvm::HotColdSplitting::run(v12, (llvm::Module *)a2);
  v8 = v18;
  if (v18 == v17)
  {
    v9 = (void (**)(_QWORD *))(v17[0] + 32);
    v8 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_10;
    v9 = (void (**)(_QWORD *))(*v18 + 40);
  }
  (*v9)(v8);
LABEL_10:
  v10 = v14;
  v14 = 0;
  if (v10)
    sub_1C4EF268C((uint64_t)&v14, v10);
  return v4;
}

void sub_1C56EF1BC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56EF1D0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817A478;
  result[1] = v3;
  return result;
}

uint64_t sub_1C56EF204(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817A478;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C56EF220(uint64_t a1, const llvm::Function *a2)
{
  uint64_t *v4;
  llvm::OptimizationRemarkEmitter *v5;
  llvm::OptimizationRemarkEmitter *v6;
  uint64_t v7;

  v4 = *(uint64_t **)(a1 + 8);
  v5 = (llvm::OptimizationRemarkEmitter *)operator new();
  v6 = llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v5, a2);
  v7 = *v4;
  *v4 = (uint64_t)v6;
  if (v7)
    sub_1C4EF268C((uint64_t)v4, v7);
  return **(_QWORD **)(a1 + 8);
}

uint64_t sub_1C56EF288(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 96))(v2, &llvm::BlockFrequencyInfoWrapperPass::ID)+ 32;
}

uint64_t *sub_1C56EF2DC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13[2];
  int v14;
  _QWORD v15[2];
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v4 = **(char ****)(*(_QWORD *)a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::TargetTransformInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v7 = *(_QWORD *)(v6 + 56);
  if (!v7)
  {
    sub_1C485C2F0();
    goto LABEL_10;
  }
  v2 = v15;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(&v12, v7, a2);
  a2 = (uint64_t *)(v6 + 64);
  v8 = v12;
  if (!*(_BYTE *)(v6 + 72))
  {
    *(_QWORD *)(v6 + 64) = v12;
    *(_BYTE *)(v6 + 72) = 1;
    goto LABEL_7;
  }
  v12 = 0;
  v9 = *a2;
  *a2 = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v12;
    v12 = 0;
    if (v10)
LABEL_10:
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
LABEL_7:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(v13);
  return a2;
}

uint64_t sub_1C56EF3FC(uint64_t a1, llvm::Function *a2)
{
  uint64_t AnalysisPass;
  llvm::AssumptionCacheTracker *v4;

  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24), llvm::AssumptionCacheTracker::ID, 1);
  if (AnalysisPass
    && (v4 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::AssumptionCacheTracker::ID)) != 0)
  {
    return llvm::AssumptionCacheTracker::lookupAssumptionCache(v4, a2);
  }
  else
  {
    return 0;
  }
}

__n128 sub_1C56EF464(int **a1, _WORD *a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80B8C0, "hotcoldsplit-threshold", 0x16uLL);
  v6 = *a1;
  dword_1ED80B940 = **a1;
  byte_1ED80B954 = 1;
  dword_1ED80B950 = *v6;
  word_1ED80B8CA = (32 * (*a2 & 3)) | word_1ED80B8CA & 0xFF9F;
  result = *a3;
  xmmword_1ED80B8E0 = (__int128)*a3;
  return result;
}

__n128 sub_1C56EF4E8(int **a1, _WORD *a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80BA40, "hotcoldsplit-max-params", 0x17uLL);
  v6 = *a1;
  dword_1ED80BAC0 = **a1;
  byte_1ED80BAD4 = 1;
  dword_1ED80BAD0 = *v6;
  word_1ED80BA4A = (32 * (*a2 & 3)) | word_1ED80BA4A & 0xFF9F;
  result = *a3;
  xmmword_1ED80BA60 = (__int128)*a3;
  return result;
}

void sub_1C56EF570()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56EF584(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817A4C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C56EF5B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817A4C0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C56EF5D4(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::TargetIRAnalysis::Key, a2) + 8;
}

void sub_1C56EF600()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56EF614(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817A508;
  result[1] = v3;
  return result;
}

uint64_t sub_1C56EF648(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817A508;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C56EF664(uint64_t a1, const llvm::Function *a2)
{
  uint64_t *v4;
  llvm::OptimizationRemarkEmitter *v5;
  llvm::OptimizationRemarkEmitter *v6;
  uint64_t v7;

  v4 = *(uint64_t **)(a1 + 8);
  v5 = (llvm::OptimizationRemarkEmitter *)operator new();
  v6 = llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v5, a2);
  v7 = *v4;
  *v4 = (uint64_t)v6;
  if (v7)
    sub_1C4EF268C((uint64_t)v4, v7);
  return **(_QWORD **)(a1 + 8);
}

uint64_t sub_1C56EF6CC(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::BlockFrequencyAnalysis::Key, a2) + 8;
}

uint64_t sub_1C56EF6F4(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  sub_1C485C2F0();
  return sub_1C56EF718();
}

uint64_t sub_1C56EF718(uint64_t *a1, uint64_t a2)
{
  uint64_t CachedResultImpl;

  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(*a1, (uint64_t)&llvm::AssumptionAnalysis::Key, a2);
  if (CachedResultImpl)
    return CachedResultImpl + 8;
  else
    return 0;
}

uint64_t sub_1C56EF748()
{
  __n128 v1;
  int v2;
  int v3;
  int *v4;

  LOBYTE(v3) = 1;
  v1.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED80B800, "hot-cold-static-analysis", &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80B800, &dword_1C475E000);
  v2 = 1;
  v3 = 2;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Base penalty for splitting cold code (as a multiple of TCC_Basic)";
  v1.n128_u64[1] = 65;
  sub_1C62953DC(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED80B8C0, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v4 = &v2;
  v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable placement of extracted cold functions into a separate section after hot-cold splitting.";
  v1.n128_u64[1] = 94;
  sub_1C498EDF8((llvm::cl::Option *)algn_1ED80B980, "enable-cold-section", (_BYTE **)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, algn_1ED80B980, &dword_1C475E000);
  v4 = (int *)"__llvm_cold";
  v3 = 1;
  v1.n128_u64[0] = (unint64_t)"Name for the section containing cold functions extracted by hot-cold splitting.";
  v1.n128_u64[1] = 79;
  sub_1C47AD050((uint64_t)&qword_1ED80BB00, 0, 0);
  qword_1ED80BB88 = 0;
  qword_1ED80BB80 = 0;
  unk_1ED80BB90 = 0;
  qword_1ED80BBA0 = 0;
  qword_1ED80BBB0 = 0;
  qword_1ED80BBA8 = 0;
  qword_1ED80BB98 = (uint64_t)&unk_1E819E950;
  byte_1ED80BBB8 = 0;
  qword_1ED80BB00 = (uint64_t)&unk_1E819E480;
  qword_1ED80BBC0 = (uint64_t)&unk_1E819E970;
  qword_1ED80BBC8 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED80BBE0 = (uint64_t)&qword_1ED80BBC8;
  sub_1C6295478((const char **)&v4, &v3, &v1);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80BB00);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED80BB00, &dword_1C475E000);
  v2 = 1;
  v3 = 4;
  v4 = &v3;
  v1.n128_u64[0] = (unint64_t)"Maximum number of parameters for a split function";
  v1.n128_u64[1] = 49;
  sub_1C62954EC(&v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED80BA40, &dword_1C475E000);
}

void llvm::initializeIPO(llvm *this, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;
  llvm::PassRegistry *v7;
  llvm::PassRegistry *v8;
  llvm::PassRegistry *v9;
  llvm::PassRegistry *v10;
  llvm::PassRegistry *v11;
  llvm::PassRegistry *v12;
  llvm::PassRegistry *v13;
  llvm::PassRegistry *v14;
  llvm::PassRegistry *v15;
  llvm::PassRegistry *v16;
  llvm::PassRegistry *v17;
  llvm::PassRegistry *v18;
  llvm::PassRegistry *v19;
  llvm::PassRegistry *v20;
  llvm::PassRegistry *v21;
  llvm::PassRegistry *v22;
  llvm::PassRegistry *v23;
  llvm::PassRegistry *v24;
  llvm::PassRegistry *v25;
  llvm::PassRegistry *v26;
  llvm::PassRegistry *v27;
  llvm::PassRegistry *v28;
  llvm::PassRegistry *v29;
  llvm::PassRegistry *v30;
  llvm::PassRegistry *v31;
  llvm::PassRegistry *v32;
  llvm::PassRegistry *v33;
  llvm::PassRegistry *v34;
  llvm::PassRegistry *v35;
  llvm::PassRegistry *v36;
  llvm::PassRegistry *v37;
  llvm::PassRegistry *v38;
  llvm::PassRegistry *v39;
  llvm::PassRegistry *v40;
  llvm::PassRegistry *v41;
  llvm::PassRegistry *v42;

  llvm::initializeOpenMPOptCGSCCLegacyPassPass(this, a2);
  llvm::initializeArgPromotionPass(this, v3);
  llvm::initializeAnnotation2MetadataLegacyPass(this, v4);
  llvm::initializeCalledValuePropagationLegacyPassPass(this, v5);
  llvm::initializeConstantMergeLegacyPassPass(this, v6);
  llvm::initializeCrossDSOCFIPass(this, v7);
  llvm::initializeDAEPass(this, v8);
  llvm::initializeDAHPass(this, v9);
  llvm::initializeForceFunctionAttrsLegacyPassPass(this, v10);
  llvm::initializeFunctionSpecializationLegacyPassPass(this, v11);
  llvm::initializeGlobalDCELegacyPassPass(this, v12);
  llvm::initializeGlobalOptLegacyPassPass(this, v13);
  llvm::initializeGlobalSplitPass(this, v14);
  llvm::initializeHotColdSplittingLegacyPassPass(this, v15);
  llvm::initializeIROutlinerLegacyPassPass(this, v16);
  llvm::initializeAlwaysInlinerLegacyPassPass(this, v17);
  llvm::initializeSimpleInlinerPass(this, v18);
  llvm::initializeInferFunctionAttrsLegacyPassPass(this, v19);
  llvm::initializeInternalizeLegacyPassPass(this, v20);
  llvm::initializeLoopExtractorLegacyPassPass(this, v21);
  llvm::initializeBlockExtractorLegacyPassPass(this, v22);
  llvm::initializeSingleLoopExtractorPass(this, v23);
  llvm::initializeLowerTypeTestsPass(this, v24);
  llvm::initializeMergeFunctionsLegacyPassPass(this, v25);
  llvm::initializePartialInlinerLegacyPassPass(this, v26);
  llvm::initializeAttributorLegacyPassPass(this, v27);
  llvm::initializeAttributorCGSCCLegacyPassPass(this, v28);
  llvm::initializePostOrderFunctionAttrsLegacyPassPass(this, v29);
  llvm::initializeReversePostOrderFunctionAttrsLegacyPassPass(this, v30);
  llvm::initializePruneEHPass(this, v31);
  llvm::initializeIPSCCPLegacyPassPass(this, v32);
  llvm::initializeStripDeadPrototypesLegacyPassPass(this, v33);
  llvm::initializeStripSymbolsPass(this, v34);
  llvm::initializeStripDebugDeclarePass(this, v35);
  llvm::initializeStripDeadDebugInfoPass(this, v36);
  llvm::initializeStripNonDebugSymbolsPass(this, v37);
  llvm::initializeBarrierNoopPass(this, v38);
  llvm::initializeEliminateAvailableExternallyLegacyPassPass(this, v39);
  llvm::initializeSampleProfileLoaderLegacyPassPass(this, v40);
  llvm::initializeFunctionImportLegacyPassPass(this, v41);
  llvm::initializeWholeProgramDevirtPass(this, v42);
}

uint64_t LLVMAddArgumentPromotionPass(uint64_t a1)
{
  uint64_t ArgumentPromotionPass;

  ArgumentPromotionPass = llvm::createArgumentPromotionPass((llvm *)3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, ArgumentPromotionPass);
}

uint64_t LLVMAddCalledValuePropagationPass(llvm *a1)
{
  uint64_t CalledValuePropagationPass;

  CalledValuePropagationPass = llvm::createCalledValuePropagationPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, CalledValuePropagationPass);
}

uint64_t LLVMAddConstantMergePass(llvm *a1)
{
  uint64_t ConstantMergePass;

  ConstantMergePass = llvm::createConstantMergePass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, ConstantMergePass);
}

uint64_t LLVMAddDeadArgEliminationPass(llvm *a1)
{
  uint64_t DeadArgEliminationPass;

  DeadArgEliminationPass = llvm::createDeadArgEliminationPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, DeadArgEliminationPass);
}

uint64_t LLVMAddFunctionAttrsPass(llvm *a1)
{
  uint64_t PostOrderFunctionAttrsLegacyPass;

  PostOrderFunctionAttrsLegacyPass = llvm::createPostOrderFunctionAttrsLegacyPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, PostOrderFunctionAttrsLegacyPass);
}

uint64_t LLVMAddFunctionInliningPass(llvm *a1)
{
  uint64_t FunctionInliningPass;

  FunctionInliningPass = llvm::createFunctionInliningPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, FunctionInliningPass);
}

uint64_t LLVMAddAlwaysInlinerPass(uint64_t a1)
{
  uint64_t AlwaysInlinerLegacyPass;

  AlwaysInlinerLegacyPass = llvm::createAlwaysInlinerLegacyPass((llvm *)1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, AlwaysInlinerLegacyPass);
}

uint64_t LLVMAddGlobalDCEPass(llvm *a1)
{
  uint64_t GlobalDCEPass;

  GlobalDCEPass = llvm::createGlobalDCEPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, GlobalDCEPass);
}

uint64_t LLVMAddGlobalOptimizerPass(llvm *a1)
{
  uint64_t GlobalOptimizerPass;

  GlobalOptimizerPass = llvm::createGlobalOptimizerPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, GlobalOptimizerPass);
}

uint64_t LLVMAddPruneEHPass(llvm *a1)
{
  uint64_t PruneEHPass;

  PruneEHPass = llvm::createPruneEHPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, PruneEHPass);
}

uint64_t LLVMAddIPSCCPPass(llvm *a1)
{
  uint64_t IPSCCPPass;

  IPSCCPPass = llvm::createIPSCCPPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, IPSCCPPass);
}

uint64_t LLVMAddMergeFunctionsPass(llvm *a1)
{
  uint64_t MergeFunctionsPass;

  MergeFunctionsPass = llvm::createMergeFunctionsPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, MergeFunctionsPass);
}

uint64_t LLVMAddInternalizePass(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t (**v5)(void);
  uint64_t (**v6)();
  int v7;
  uint64_t (***v8)();
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v6 = &off_1E817A550;
  v7 = a2;
  v8 = &v6;
  v3 = llvm::createInternalizePass(&v6);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v3);
  result = (uint64_t)v8;
  if (v8 == &v6)
  {
    v5 = v6 + 4;
  }
  else
  {
    if (!v8)
      return result;
    v5 = *v8 + 5;
  }
  return (*v5)();
}

uint64_t LLVMAddInternalizePassWithMustPreservePredicate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t InternalizePass;
  uint64_t result;
  uint64_t (**v6)(void);
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v7[0] = &off_1E817A598;
  v7[1] = a3;
  v7[2] = a2;
  v8 = v7;
  InternalizePass = llvm::createInternalizePass(v7);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, InternalizePass);
  result = (uint64_t)v8;
  if (v8 == v7)
  {
    v6 = (uint64_t (**)(void))(v7[0] + 32);
  }
  else
  {
    if (!v8)
      return result;
    v6 = (uint64_t (**)(void))(*v8 + 40);
  }
  return (*v6)();
}

uint64_t LLVMAddStripDeadPrototypesPass(llvm *a1)
{
  uint64_t StripDeadPrototypesPass;

  StripDeadPrototypesPass = llvm::createStripDeadPrototypesPass(a1);
  return (*(uint64_t (**)(llvm *, uint64_t))(*(_QWORD *)a1 + 16))(a1, StripDeadPrototypesPass);
}

uint64_t LLVMAddStripSymbolsPass(uint64_t a1)
{
  uint64_t StripSymbolsPass;

  StripSymbolsPass = llvm::createStripSymbolsPass(0, 1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, StripSymbolsPass);
}

void sub_1C56EFED8()
{
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C56EFEEC(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E817A550;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C56EFF24(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E817A550;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL sub_1C56EFF44(uint64_t a1, uint64_t ***a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ****v6;
  uint64_t ***v7;
  int v8;
  int v9;
  uint64_t ***v10;

  if (!*(_DWORD *)(a1 + 8) || (*((_BYTE *)a2 + 23) & 0x10) == 0)
    return 0;
  v2 = ***a2;
  v3 = *(_QWORD *)(v2 + 152);
  v4 = *(unsigned int *)(v2 + 168);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t ****)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_10;
    v8 = 1;
    while (v7 != (uint64_t ***)-4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(uint64_t ****)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t ****)(v3 + 16 * v5);
        goto LABEL_10;
      }
    }
  }
  v6 = (uint64_t ****)(v3 + 16 * v4);
LABEL_10:
  v10 = v6[1];
  if (*v10 == (uint64_t **)4)
    return *((_DWORD *)v10 + 4) == 1852399981;
  return 0;
}

void sub_1C56EFFF4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C56F0008(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E817A598;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C56F0040(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817A598;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1C56F0060(uint64_t a1, uint64_t a2)
{
  return (*(unsigned int (**)(uint64_t, _QWORD))(a1 + 8))(a2, *(_QWORD *)(a1 + 16)) != 0;
}

uint64_t llvm::OutlinableRegion::findCorrespondingValueIn(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  int v17;
  int v18;
  int *v19;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;

  v5 = sub_1C6192E10(*a1, a3);
  v6 = *(_QWORD *)(*a1 + 72);
  v7 = *(unsigned int *)(*a1 + 88);
  if ((_DWORD)v7)
  {
    LODWORD(v8) = (v7 - 1) & (37 * v5);
    v9 = (int *)(v6 + 8 * v8);
    v10 = *v9;
    if (*v9 == v5)
      goto LABEL_3;
    v21 = 1;
    while (v10 != -1)
    {
      v22 = v8 + v21++;
      v8 = v22 & (v7 - 1);
      v10 = *(_DWORD *)(v6 + 8 * v8);
      if (v10 == v5)
      {
        v9 = (int *)(v6 + 8 * v8);
        goto LABEL_3;
      }
    }
  }
  v9 = (int *)(v6 + 8 * v7);
LABEL_3:
  if ((int *)(v6 + 8 * v7) == v9)
    v11 = 0;
  else
    v11 = v9[1];
  v12 = *a2;
  v13 = *(_QWORD *)(v12 + 96);
  v14 = *(unsigned int *)(v12 + 112);
  if ((_DWORD)v14)
  {
    LODWORD(v15) = (v14 - 1) & (37 * v11);
    v16 = (int *)(v13 + 8 * v15);
    v17 = *v16;
    if (v11 == *v16)
      goto LABEL_8;
    v23 = 1;
    while (v17 != -1)
    {
      v24 = v15 + v23++;
      v15 = v24 & (v14 - 1);
      v17 = *(_DWORD *)(v13 + 8 * v15);
      if (v11 == v17)
      {
        v16 = (int *)(v13 + 8 * v15);
        goto LABEL_8;
      }
    }
  }
  v16 = (int *)(v13 + 8 * v14);
LABEL_8:
  if ((int *)(v13 + 8 * v14) == v16)
    v18 = 0;
  else
    v18 = v16[1];
  v25 = v18;
  v19 = sub_1C4A1156C((uint64_t *)(v12 + 48), &v25);
  if ((int *)(*(_QWORD *)(v12 + 48) + 16 * *(unsigned int *)(v12 + 64)) == v19)
    return 0;
  else
    return *((_QWORD *)v19 + 1);
}

uint64_t llvm::OutlinableRegion::findCorrespondingBlockIn(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v3 = a3 + 40;
  for (i = *(_QWORD *)(a3 + 48); i != v3; i = *(_QWORD *)(i + 8))
  {
    v5 = i - 24;
    if (i)
      v6 = i - 24;
    else
      v6 = 0;
    if (*(_BYTE *)(v6 + 16) != 83)
      goto LABEL_9;
  }
  v5 = 0;
LABEL_9:
  result = llvm::OutlinableRegion::findCorrespondingValueIn(a1, a2, v5);
  if (result)
    return *(_QWORD *)(result + 40);
  return result;
}

uint64_t llvm::OutlinableRegion::splitCandidate(llvm::OutlinableRegion *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v32;
  unsigned int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *i;
  uint64_t *v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t ***v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ****v50;
  uint64_t ***v51;
  int v52;
  int v53;
  unint64_t *v54;
  size_t v55;
  const void *v56;
  unint64_t v57;
  void **p_dst;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  size_t v63;
  void **v64;
  void **v65;
  llvm::BasicBlock *v66;
  uint64_t v67;
  uint64_t *v68;
  void **v69;
  void **v70;
  llvm::BasicBlock *v71;
  uint64_t v72;
  void *__p[2];
  char v74;
  _QWORD v75[4];
  __int16 v76;
  void **__dst;
  size_t v78;
  int64_t v79;
  _QWORD v80[2];
  int v81;

  v2 = *(_QWORD *)this;
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v3 + 16);
  if (*(unsigned __int8 *)(v4 + 16) - 29 > 0xA)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16);
    result = llvm::Instruction::getNextNonDebugInstruction((llvm::Instruction *)v4, 0);
    if (v8 != result)
      return result;
    v2 = *(_QWORD *)this;
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 40);
    v6 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 72);
    if (v6)
      v7 = v6 - 24;
    else
      v7 = 0;
    if (v5 == v7)
      v8 = 0;
    else
      v8 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 16);
  }
  v10 = *(_QWORD *)(*(_QWORD *)(v2 + 8) + 16);
  v11 = *(_QWORD *)(v10 + 40);
  *((_QWORD *)this + 28) = v11;
  *((_QWORD *)this + 29) = v11;
  v80[0] = 0;
  v80[1] = 0;
  v81 = 0;
  sub_1C4E327B0(v2, (uint64_t)v80);
  v12 = (uint64_t *)(v10 + 24);
  v13 = *(_QWORD *)(v4 + 40);
  *((_QWORD *)this + 30) = v13;
  v14 = (uint64_t *)(v13 + 40);
  v15 = *(_QWORD *)(v13 + 40);
  if (v15 == v13 + 40)
  {
    v16 = 0;
  }
  else
  {
    if (v15)
      v16 = v15 - 24;
    else
      v16 = 0;
    if (*(unsigned __int8 *)(v16 + 16) - 29 >= 0xB)
      v16 = 0;
  }
  if (*(_BYTE *)(v10 + 16) != 83)
    goto LABEL_53;
  v17 = v81 - 1;
  v18 = v10;
  v19 = v10 + 24;
  do
  {
    v20 = *(_DWORD *)(v18 + 20);
    v21 = v20 & 0x7FFFFFF;
    if ((v20 & 0x7FFFFFF) == 0)
      goto LABEL_43;
    v22 = 0;
    v23 = 0;
    v24 = *(unsigned int *)(v18 + 60);
    do
    {
      v25 = v18 - 32 * v21;
      if ((v20 & 0x40000000) != 0)
        v25 = *(_QWORD *)(v18 - 8);
      if (!v81)
        goto LABEL_27;
      v26 = *(_QWORD *)(v25 + 32 * v24 + 8 * v22);
      v27 = ((v26 >> 4) ^ (v26 >> 9)) & v17;
      v28 = *(_QWORD *)(v80[0] + 8 * v27);
      if (v26 != v28)
      {
        v32 = 1;
        while (v28 != -4096)
        {
          v33 = v27 + v32++;
          v27 = v33 & v17;
          v28 = *(_QWORD *)(v80[0] + 8 * v27);
          if (v26 == v28)
            goto LABEL_26;
        }
LABEL_27:
        v29 = 1;
        goto LABEL_36;
      }
LABEL_26:
      if (v27 == v81)
        goto LABEL_27;
      v30 = v18 - 32 * v21;
      if ((v20 & 0x40000000) != 0)
        v30 = *(_QWORD *)(v18 - 8);
      v29 = *(_QWORD *)(v30 + 32 * v24 + 8 * v22) == v13 && v16 != v4;
LABEL_36:
      v23 += v29;
      ++v22;
    }
    while (v22 != v21);
    if (v23 > 1)
      return MEMORY[0x1CAA32FB4](v80[0], 8);
LABEL_43:
    v19 = *(_QWORD *)(v19 + 8);
    v18 = v19 - 24;
    if (!v19)
      v18 = 0;
    v34 = *(unsigned __int8 *)(v18 + 16);
    if (v34 != 83)
      v18 = 0;
  }
  while (v19 && v34 == 83);
  v35 = *(_QWORD *)(*((_QWORD *)this + 29) + 48);
  if (v35)
    v36 = v35 - 24;
  else
    v36 = 0;
  if (v10 != v36)
    return MEMORY[0x1CAA32FB4](v80[0], 8);
LABEL_53:
  if (*(_BYTE *)(v4 + 16) != 83)
    goto LABEL_69;
  for (i = *(uint64_t **)(v13 + 48); i != v14; i = (uint64_t *)i[1])
  {
    v38 = i - 3;
    if (!i)
      v38 = 0;
    if (*((_BYTE *)v38 + 16) != 83)
    {
      v39 = *((unsigned __int8 *)i - 8) - 38;
      v40 = v39 > 0x38;
      v41 = (1 << v39) & 0x100060000000001;
      if (v40 || v41 == 0)
        v14 = i;
      else
        v14 = (uint64_t *)i[1];
      break;
    }
  }
  v43 = *v14;
  v44 = v43 ? v43 - 24 : 0;
  if (v4 == v44)
  {
LABEL_69:
    v45 = (uint64_t ***)*((_QWORD *)this + 28);
    if ((*((_BYTE *)v45 + 23) & 0x10) == 0)
    {
      v55 = 0;
      HIBYTE(v79) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_85;
    }
    v46 = ***v45;
    v47 = *(_QWORD *)(v46 + 152);
    v48 = *(unsigned int *)(v46 + 168);
    if (!(_DWORD)v48)
      goto LABEL_76;
    LODWORD(v49) = (v48 - 1) & ((v45 >> 4) ^ (v45 >> 9));
    v50 = (uint64_t ****)(v47 + 16 * v49);
    v51 = *v50;
    if (*v50 != v45)
    {
      v52 = 1;
      while (v51 != (uint64_t ***)-4096)
      {
        v53 = v49 + v52++;
        v49 = v53 & (v48 - 1);
        v51 = *(uint64_t ****)(v47 + 16 * v49);
        if (v51 == v45)
        {
          v50 = (uint64_t ****)(v47 + 16 * v49);
          goto LABEL_77;
        }
      }
LABEL_76:
      v50 = (uint64_t ****)(v47 + 16 * v48);
    }
LABEL_77:
    v54 = (unint64_t *)v50[1];
    v57 = *v54;
    v56 = v54 + 2;
    v55 = v57;
    if (v57 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v55 >= 0x17)
    {
      v59 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v55 | 7) != 0x17)
        v59 = v55 | 7;
      v60 = v59 + 1;
      p_dst = (void **)operator new(v59 + 1);
      v78 = v55;
      v79 = v60 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v79) = v55;
      p_dst = (void **)&__dst;
      if (!v55)
      {
LABEL_85:
        *((_BYTE *)p_dst + v55) = 0;
        v61 = SHIBYTE(v79);
        v62 = (uint64_t *)*((_QWORD *)this + 28);
        if (v79 >= 0)
          v63 = HIBYTE(v79) & 0x7F;
        else
          v63 = v78;
        sub_1C484371C((uint64_t)__p, v63 + 11);
        if (v74 >= 0)
          v64 = __p;
        else
          v64 = (void **)__p[0];
        if (v63)
        {
          if (v61 >= 0)
            v65 = (void **)&__dst;
          else
            v65 = __dst;
          memmove(v64, v65, v63);
        }
        strcpy((char *)v64 + v63, "_to_outline");
        v76 = 260;
        v75[0] = __p;
        v66 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v62, v12, (uint64_t)v75, 0);
        *((_QWORD *)this + 29) = v66;
        if (v74 < 0)
        {
          operator delete(__p[0]);
          v66 = (llvm::BasicBlock *)*((_QWORD *)this + 29);
        }
        llvm::BasicBlock::replaceSuccessorsPhiUsesWith(*((llvm::BasicBlock **)this + 28), *((llvm::BasicBlock **)this + 28), v66);
        *((_BYTE *)this + 216) = 1;
        if (*(unsigned __int8 *)(v4 + 16) - 29 >= 0xB)
        {
          v68 = *(uint64_t **)(v8 + 40);
          *((_QWORD *)this + 30) = v68;
          sub_1C484371C((uint64_t)__p, v63 + 14);
          if (v74 >= 0)
            v69 = __p;
          else
            v69 = (void **)__p[0];
          if (v63)
          {
            if (v61 >= 0)
              v70 = (void **)&__dst;
            else
              v70 = __dst;
            memmove(v69, v70, v63);
          }
          strcpy((char *)v69 + v63, "_after_outline");
          v76 = 260;
          v75[0] = __p;
          v71 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v68, (uint64_t *)(v8 + 24), (uint64_t)v75, 0);
          *((_QWORD *)this + 31) = v71;
          if (v74 < 0)
          {
            operator delete(__p[0]);
            v71 = (llvm::BasicBlock *)*((_QWORD *)this + 31);
          }
          llvm::BasicBlock::replaceSuccessorsPhiUsesWith(*((llvm::BasicBlock **)this + 30), *((llvm::BasicBlock **)this + 30), v71);
          llvm::BasicBlock::replaceSuccessorsPhiUsesWith(*((llvm::BasicBlock **)this + 31), *((llvm::BasicBlock **)this + 28), *((llvm::BasicBlock **)this + 31));
        }
        else
        {
          v67 = *(_QWORD *)(v4 + 40);
          *((_BYTE *)this + 105) = 1;
          *((_QWORD *)this + 30) = v67;
          *((_QWORD *)this + 31) = 0;
        }
        sub_1C4DFC0E4(v80);
        sub_1C4E327B0(*(_QWORD *)this, (uint64_t)v80);
        sub_1C56F0800(*((_QWORD *)this + 29), *((_QWORD *)this + 28), *((_QWORD *)this + 29), (uint64_t)v80);
        v72 = *((_QWORD *)this + 31);
        if (v72)
          sub_1C56F0800(v72, *((_QWORD *)this + 30), *((_QWORD *)this + 31), (uint64_t)v80);
        if (v61 < 0)
          operator delete(__dst);
        return MEMORY[0x1CAA32FB4](v80[0], 8);
      }
    }
    memmove(p_dst, v56, v55);
    goto LABEL_85;
  }
  return MEMORY[0x1CAA32FB4](v80[0], 8);
}

uint64_t sub_1C56F0800(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (*(_QWORD *)(result + 40) != result + 40)
  {
    v4 = *(_QWORD *)(result + 48);
    v5 = v4 - 24;
    v6 = v4 ? v4 - 24 : 0;
    if (v4 && *(_BYTE *)(v6 + 16) == 83)
    {
      do
      {
        v10 = *(_DWORD *)(v5 + 20);
        v11 = v10 & 0x7FFFFFF;
        if ((v10 & 0x7FFFFFF) != 0)
        {
          v12 = 0;
          do
          {
            v13 = *(_DWORD *)(v5 + 20);
            if ((v13 & 0x40000000) != 0)
              v14 = *(_QWORD *)(v5 - 8);
            else
              v14 = v5 - 32 * (v13 & 0x7FFFFFF);
            v15 = *(_QWORD *)(v14 + 32 * *(unsigned int *)(v5 + 60) + 8 * v12);
            v24 = 0;
            v25 = v15;
            result = sub_1C4E36498((uint64_t *)a4, &v25, &v24);
            if ((_DWORD)result && v24 != *(_QWORD *)a4 + 8 * *(unsigned int *)(a4 + 16))
            {
              v16 = *(_QWORD *)(v15 + 40);
              if (v16 == v15 + 40)
              {
                v17 = 0;
              }
              else
              {
                if (v16)
                  v17 = v16 - 24;
                else
                  v17 = 0;
                if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB)
                  v17 = 0;
              }
              v18 = 0;
              if (*(_BYTE *)(v17 + 16) == 30)
                v19 = v17;
              else
                v19 = 0;
              if ((*(_DWORD *)(v19 + 20) & 0x7FFFFFF) == 3)
                v20 = 2;
              else
                v20 = 1;
              v21 = -32;
              do
              {
                if (*(_QWORD *)(v19 + v21) == a2)
                  result = sub_1C53E1B14(v19, v18, a3);
                ++v18;
                v21 -= 32;
              }
              while (v20 != v18);
            }
            ++v12;
          }
          while (v12 != v11);
        }
        v22 = *(_QWORD *)(v5 + 32);
        v5 = v22 - 24;
        if (v22)
          v23 = v22 - 24;
        else
          v23 = 0;
      }
      while (v22 && *(_BYTE *)(v23 + 16) == 83);
    }
  }
  return result;
}

unint64_t llvm::OutlinableRegion::getBenefit(llvm::OutlinableRegion *this, llvm::TargetTransformInfo *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)this + 8);
  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 16) + 8);
  if (v2 != v3)
  {
    v5 = 0;
    while (1)
    {
      v6 = *(_QWORD *)(v2 + 16);
      if (*(unsigned __int8 *)(v6 + 16) - 47 >= 6)
        break;
      v7 = 1;
LABEL_16:
      if (__OFADD__(v5, v7))
        v5 = ((uint64_t)(v5 + v7) >> 63) ^ 0x8000000000000000;
      else
        v5 += v7;
      v2 = *(_QWORD *)(v2 + 8);
      if (v2 == v3)
        return v5;
    }
    v8 = *(_DWORD *)(v6 + 20);
    if ((v8 & 0x40000000) != 0)
    {
      v10 = *(uint64_t **)(v6 - 8);
      v9 = v8 & 0x7FFFFFF;
    }
    else
    {
      v9 = v8 & 0x7FFFFFF;
      v10 = (uint64_t *)(v6 - 32 * v9);
    }
    v19 = v21;
    v20 = 0x400000000;
    if (v9 >= 5)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, v9, 8);
      v11 = v20;
      v13 = v19;
      v12 = v20;
    }
    else
    {
      v11 = 0;
      if (!v9)
      {
        v17 = v21;
        goto LABEL_14;
      }
      v12 = 0;
      v13 = v21;
    }
    v14 = 32 * v9;
    v15 = &v13[v12];
    do
    {
      v16 = *v10;
      v10 += 4;
      *v15++ = v16;
      v14 -= 32;
    }
    while (v14);
    v17 = v19;
LABEL_14:
    LODWORD(v20) = v11 + v9;
    v7 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *))(**(_QWORD **)a2 + 72))(*(_QWORD *)a2, v6, v17);
    if (v19 != v21)
      free(v19);
    goto LABEL_16;
  }
  return 0;
}

uint64_t OutlinableGroup::findSameConstants(uint64_t ***a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unsigned int v15;
  unsigned int v16;
  _DWORD *v17;
  int v18;
  _DWORD *v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t **v27;
  uint64_t v28[2];
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;

  v28[0] = 0;
  v28[1] = 0;
  v29 = 0;
  v2 = *a1;
  v27 = a1[1];
  if (*a1 == v27)
  {
    v25 = 0;
    return MEMORY[0x1CAA32FB4](v25, 8);
  }
  do
  {
    v4 = **v2;
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
    while (v5 != v6)
    {
      v7 = *(unsigned int *)(v5 + 32);
      if ((_DWORD)v7)
      {
        v8 = *(uint64_t **)(v5 + 24);
        v9 = &v8[v7];
        do
        {
          v10 = *v8;
          v30 = sub_1C6192E10(v4, *v8);
          v11 = sub_1C61940B0((uint64_t *)a2, &v30);
          v12 = *(_QWORD *)a2;
          v13 = *(unsigned int *)(a2 + 16);
          if ((int *)(*(_QWORD *)a2 + 4 * v13) == v11)
          {
            if (v10)
              v14 = *(unsigned __int8 *)(v10 + 16) > 0x14u;
            else
              v14 = 1;
            if (!v14)
            {
              v31 = v30;
              v32 = v10;
              sub_1C56F8B20(&v33, (uint64_t)v28, &v31, &v32);
              if (v34 || *(_QWORD *)(v33 + 8) == v10)
                goto LABEL_31;
              v12 = *(_QWORD *)a2;
              LODWORD(v13) = *(_DWORD *)(a2 + 16);
            }
            v15 = v30;
            sub_1C4D7501C(v28[0], v29, v30);
            if (!(_DWORD)v13)
            {
              v23 = 0;
LABEL_30:
              v24 = sub_1C4A0C948(a2, (uint64_t)&v30, &v30, v23);
              *v24 = v30;
              goto LABEL_31;
            }
            v16 = (v13 - 1) & (37 * v15);
            v17 = (_DWORD *)(v12 + 4 * v16);
            v18 = *v17;
            if (v15 != *v17)
            {
              v19 = 0;
              v20 = 1;
              while (v18 != -1)
              {
                if (v19)
                  v21 = 0;
                else
                  v21 = v18 == -2;
                if (v21)
                  v19 = v17;
                v22 = v16 + v20++;
                v16 = v22 & (v13 - 1);
                v17 = (_DWORD *)(v12 + 4 * v16);
                v18 = *v17;
                if (v15 == *v17)
                  goto LABEL_31;
              }
              if (v19)
                v23 = v19;
              else
                v23 = v17;
              goto LABEL_30;
            }
          }
LABEL_31:
          ++v8;
        }
        while (v8 != v9);
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    ++v2;
  }
  while (v2 != v27);
  v25 = v28[0];
  return MEMORY[0x1CAA32FB4](v25, 8);
}

uint64_t llvm::IROutliner::createFunction(llvm::IROutliner *this, llvm::Module *a2, OutlinableGroup *a3, unsigned int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::PointerType *v11;
  std::string *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ***v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  BOOL v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  const llvm::GlobalValue *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const llvm::GlobalValue **v41;
  const llvm::GlobalValue *v42;
  int v43;
  int v44;
  const llvm::GlobalValue *v45;
  unsigned __int8 *v46;
  size_t v47;
  size_t v48;
  char v49;
  unsigned __int8 *v50;
  size_t v51;
  uint64_t TypeArray;
  char *Impl;
  llvm::DISubprogram *Function;
  void *__p[2];
  std::string::size_type v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  int v62;
  void **v63;
  void *v64[2];
  uint64_t v65;
  std::string v66;
  uint64_t v67[4];
  __int16 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v7 = **(_QWORD **)a2 + 1576;
  v8 = *(_QWORD *)a3;
  v9 = *((_QWORD *)a3 + 1);
  if (*(_QWORD *)a3 != v9)
  {
    do
    {
      v10 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 208) + 24) + 16);
      if (*(_DWORD *)(v7 + 8) == 7)
      {
        if (*(_BYTE *)(v10 + 8) == 7)
          goto LABEL_8;
      }
      else if (*(_DWORD *)(v7 + 8) != 269 || *(_DWORD *)(v10 + 8) != 4109)
      {
        goto LABEL_8;
      }
      v7 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v8 + 208) + 24) + 16);
LABEL_8:
      v8 += 8;
    }
    while (v8 != v9);
  }
  v11 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)v7, *((uint64_t **)a3 + 3), (uint64_t)(*((_QWORD *)a3 + 4) - *((_QWORD *)a3 + 3)) >> 3, 0);
  *((_QWORD *)a3 + 6) = v11;
  std::to_string(&v66, a4);
  v12 = std::string::insert(&v66, 0, "outlined_ir_func_");
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v57 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v68 = 260;
  v67[0] = (uint64_t)__p;
  *((_QWORD *)a3 + 7) = llvm::Function::Create(v11, 7, (uint64_t)v67, (uint64_t)a2);
  if (SHIBYTE(v57) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  v14 = *((_QWORD *)a3 + 7);
  if (*((_BYTE *)a3 + 268))
  {
    *(_QWORD *)(v14 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v14 + 112), **(uint64_t ***)v14, *((_DWORD *)a3 + 66) + 1, 63);
    v14 = *((_QWORD *)a3 + 7);
  }
  *(_QWORD *)(v14 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v14 + 112), **(uint64_t ***)v14, -1, 42);
  v15 = *((_QWORD *)a3 + 7);
  *(_QWORD *)(v15 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v15 + 112), **(uint64_t ***)v15, -1, 15);
  v16 = *(_QWORD *)a3;
  v17 = *((_QWORD *)a3 + 1);
  if (*(_QWORD *)a3 == v17)
    return *((_QWORD *)a3 + 7);
  while (1)
  {
    v18 = *(uint64_t ****)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 200) + 40) + 56);
    if (v18)
    {
      if ((*((_BYTE *)v18 + 23) & 0x20) != 0)
        break;
    }
LABEL_34:
    v16 += 8;
    if (v16 == v17)
      return *((_QWORD *)a3 + 7);
  }
  v19 = ***v18;
  v67[0] = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v16 + 200) + 40) + 56);
  v20 = *(_DWORD *)(v19 + 2496);
  if (!v20)
  {
    v34 = 0;
LABEL_39:
    v24 = sub_1C541AB24(v19 + 2480, (uint64_t)v67, v67, v34);
    v35 = v67[0];
    v24[4] = 0;
    v24[3] = 0;
    *v24 = v35;
    v24[1] = v24 + 3;
    v24[2] = 0x100000000;
    goto LABEL_28;
  }
  v21 = *(_QWORD *)(v19 + 2480);
  v22 = v20 - 1;
  v23 = v22 & ((v18 >> 4) ^ (v18 >> 9));
  v24 = (_QWORD *)(v21 + 40 * v23);
  v25 = *v24;
  if ((uint64_t ***)*v24 != v18)
  {
    v26 = 0;
    v27 = 1;
    while (v25 != -4096)
    {
      if (v26)
        v28 = 0;
      else
        v28 = v25 == -8192;
      if (v28)
        v26 = v24;
      v29 = v23 + v27++;
      v23 = v29 & v22;
      v24 = (_QWORD *)(v21 + 40 * v23);
      v25 = *v24;
      if ((uint64_t ***)*v24 == v18)
        goto LABEL_28;
    }
    if (v26)
      v34 = v26;
    else
      v34 = v24;
    goto LABEL_39;
  }
LABEL_28:
  v30 = *((unsigned int *)v24 + 4);
  if (!(_DWORD)v30)
    goto LABEL_34;
  v31 = (_QWORD *)(v24[1] + 8);
  v32 = 16 * v30;
  while (*((_DWORD *)v31 - 2))
  {
    v31 += 2;
    v32 -= 16;
    if (!v32)
      goto LABEL_34;
  }
  v33 = *v31;
  if (!*v31)
    goto LABEL_34;
  v36 = (const llvm::GlobalValue *)*((_QWORD *)a3 + 7);
  llvm::DIBuilder::DIBuilder((uint64_t)v67, a2, 1, *(_QWORD *)(v33 - 8 * *(unsigned int *)(v33 + 8) + 40));
  if (*(_BYTE *)v33 != 15)
    v33 = *(_QWORD *)(v33 - 8 * *(unsigned int *)(v33 + 8));
  memset(&v66, 0, 20);
  v64[0] = 0;
  v64[1] = 0;
  v65 = 0;
  LODWORD(__p[1]) = 0;
  v60 = 0;
  v61 = 0;
  __p[0] = &unk_1E81A7208;
  v63 = v64;
  v62 = 0;
  v58 = 0;
  v59 = 0;
  v57 = 0;
  llvm::Mangler::getNameWithPrefix((llvm::Mangler *)&v66, (llvm::raw_ostream *)__p, v36, 0);
  if ((*((_BYTE *)v36 + 23) & 0x10) != 0)
  {
    v37 = ***(_QWORD ***)v36;
    v38 = *(_QWORD *)(v37 + 152);
    v39 = *(unsigned int *)(v37 + 168);
    if (!(_DWORD)v39)
      goto LABEL_50;
    LODWORD(v40) = (v39 - 1) & ((v36 >> 4) ^ (v36 >> 9));
    v41 = (const llvm::GlobalValue **)(v38 + 16 * v40);
    v42 = *v41;
    if (*v41 != v36)
    {
      v43 = 1;
      while (v42 != (const llvm::GlobalValue *)-4096)
      {
        v44 = v40 + v43++;
        v40 = v44 & (v39 - 1);
        v42 = *(const llvm::GlobalValue **)(v38 + 16 * v40);
        if (v42 == v36)
        {
          v41 = (const llvm::GlobalValue **)(v38 + 16 * v40);
          goto LABEL_51;
        }
      }
LABEL_50:
      v41 = (const llvm::GlobalValue **)(v38 + 16 * v39);
    }
LABEL_51:
    v45 = v41[1];
    v48 = *(_QWORD *)v45;
    v46 = (unsigned __int8 *)v45 + 16;
    v47 = v48;
  }
  else
  {
    v47 = 0;
    v46 = (unsigned __int8 *)&byte_1C871356D;
  }
  v49 = *((_BYTE *)v63 + 23);
  if (v49 >= 0)
    v50 = (unsigned __int8 *)v63;
  else
    v50 = (unsigned __int8 *)*v63;
  if (v49 >= 0)
    v51 = v49 & 0x7F;
  else
    v51 = (size_t)v63[1];
  TypeArray = llvm::DIBuilder::getOrCreateTypeArray((uint64_t)v67, 0, 0);
  Impl = llvm::DISubroutineType::getImpl((_QWORD *)v67[1], 0, 0, TypeArray, 0, 1);
  Function = (llvm::DISubprogram *)llvm::DIBuilder::createFunction((uint64_t)v67, (_BYTE *)v33, v46, v47, v50, v51, (void *)v33, 0, Impl, 0, 0x40u, 0x18u, 0, 0, 0, 0, "", 0);
  llvm::DIBuilder::finalizeSubprogram((llvm::DIBuilder *)v67, Function);
  llvm::Value::setMetadata(v36, 0, Function);
  llvm::DIBuilder::finalize((llvm::DIBuilder *)v67);
  __p[0] = off_1E81A6E70;
  if (v62 == 1 && v57)
    MEMORY[0x1CAA32F9C](v57, 0x1000C8077774924);
  if (SHIBYTE(v65) < 0)
    operator delete(v64[0]);
  MEMORY[0x1CAA32FB4](v66.__r_.__value_.__r.__words[0], 8);
  sub_1C50F023C((uint64_t)v67);
  return *((_QWORD *)a3 + 7);
}

void llvm::IROutliner::findAddInputsOutputs(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  llvm::CodeExtractor *v7;
  uint64_t v8;
  unsigned int *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unsigned int *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  unsigned int v28;
  _DWORD *v29;
  int v30;
  _DWORD *v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t *v37;
  uint64_t *v38;
  unsigned int *v39;
  unsigned int *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int v52;
  unsigned int v53;
  int *v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  _DWORD *v85;
  int v86;
  _DWORD *v87;
  int v88;
  BOOL v89;
  unsigned int v90;
  _DWORD *v91;
  _DWORD *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  _DWORD *v98;
  int v99;
  unsigned int *v100;
  _DWORD *v101;
  int v102;
  BOOL v103;
  unsigned int v104;
  _DWORD *v105;
  int v106;
  unsigned int v107;
  _DWORD *v108;
  int v109;
  _DWORD *v110;
  int v111;
  BOOL v112;
  unsigned int v113;
  int v114;
  unsigned int v115;
  _DWORD *v116;
  int v117;
  _DWORD *v118;
  int v119;
  BOOL v120;
  unsigned int v121;
  _DWORD *v122;
  _DWORD *v123;
  int v124;
  uint64_t v125;
  int v126;
  unsigned int v127;
  _DWORD *v128;
  int v129;
  _DWORD *v130;
  int v131;
  BOOL v132;
  unsigned int v133;
  _DWORD *v134;
  _DWORD *v135;
  _DWORD *v136;
  _DWORD *v137;
  int v138;
  uint64_t v139;
  int v140;
  unsigned int v141;
  _DWORD *v142;
  int v143;
  _DWORD *v144;
  int v145;
  BOOL v146;
  unsigned int v147;
  _DWORD *v148;
  int v149;
  int v150;
  int v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t *v155;
  unsigned int v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  unsigned int v162;
  uint64_t Successor;
  unsigned int v164;
  uint64_t v165;
  int v166;
  unsigned int v167;
  unint64_t *v168;
  unsigned int v169;
  uint64_t v170;
  unint64_t *v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t v174;
  uint64_t j;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  unsigned int v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  int v187;
  unsigned int v188;
  int v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  int *v197;
  uint64_t v198;
  unsigned int v199;
  int *v200;
  uint64_t v201;
  uint64_t v202;
  unsigned int v203;
  uint64_t v204;
  int v205;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  unsigned int v209;
  BOOL v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  char *v214;
  uint64_t *v215;
  int v216;
  unsigned int v217;
  uint64_t v218;
  void **v219;
  int *v220;
  unsigned int v221;
  int *v222;
  int v223;
  unsigned int v224;
  int v225;
  int v226;
  uint64_t v227;
  void **v228;
  int *v229;
  int v230;
  int v231;
  unint64_t *v232;
  unint64_t v233;
  unsigned int v234;
  unsigned int v235;
  uint64_t *v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  uint64_t v242;
  int *v243;
  uint64_t v244;
  unsigned int v245;
  _DWORD *v246;
  int v247;
  _DWORD *v248;
  int v249;
  BOOL v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t *v255;
  _QWORD *v256;
  _QWORD *v257;
  uint64_t v258;
  unint64_t v259;
  uint64_t v260;
  unint64_t v261;
  char *v262;
  uint64_t *v263;
  uint64_t v264;
  unint64_t v265;
  unsigned int v266;
  _DWORD *v267;
  int v268;
  _DWORD *v269;
  int v270;
  BOOL v271;
  unsigned int v272;
  _DWORD *v273;
  _DWORD *v274;
  uint64_t v275;
  int v276;
  uint64_t v277;
  int v278;
  unsigned int v279;
  _DWORD *v280;
  int v281;
  _DWORD *v282;
  int v283;
  BOOL v284;
  unsigned int v285;
  _DWORD *v286;
  _DWORD *v287;
  int v288;
  uint64_t v289;
  int v290;
  unsigned int v291;
  _DWORD *v292;
  int v293;
  _DWORD *v294;
  int v295;
  BOOL v296;
  unsigned int v297;
  _DWORD *v298;
  _DWORD *v299;
  uint64_t v300;
  int v301;
  uint64_t v302;
  int v303;
  unsigned int v304;
  _DWORD *v305;
  int v306;
  _DWORD *v307;
  int v308;
  BOOL v309;
  unsigned int v310;
  _DWORD *v311;
  _DWORD *v312;
  int v313;
  uint64_t v314;
  int v315;
  unsigned int v316;
  int v317;
  int v318;
  BOOL v319;
  unsigned int v320;
  _DWORD *v321;
  _DWORD *v322;
  BOOL v323;
  uint64_t v324;
  unsigned int v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  unint64_t v329;
  uint64_t v330;
  BOOL v331;
  int v332;
  uint64_t v333;
  llvm::BasicBlock *v334;
  uint64_t v335;
  unsigned int v336;
  unsigned int v337;
  llvm::BasicBlock *v338;
  unsigned int v339;
  llvm::BasicBlock *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int *v344;
  int v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t SinglePredecessor;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  int *v354;
  int v355;
  int v356;
  uint64_t v357;
  int v358;
  unsigned int v359;
  int v360;
  unsigned int v361;
  int v362;
  int v363;
  int v364;
  int v365;
  int v366;
  unsigned int v367;
  unint64_t v368;
  int v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  int *v373;
  int v374;
  _QWORD *v375;
  uint64_t v376;
  int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  int *v381;
  int v382;
  int v383;
  void **v384;
  uint64_t v385;
  unsigned __int8 v386;
  unint64_t v387;
  uint64_t v388;
  unint64_t v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t *v393;
  int v394;
  _QWORD *v395;
  uint64_t v396;
  uint64_t v397;
  int v398;
  unsigned int v399;
  int v400;
  unsigned int v401;
  int v402;
  int v403;
  int v404;
  int v405;
  unint64_t v406;
  unint64_t v407;
  unsigned int *v408;
  unint64_t v409;
  const std::nothrow_t *v410;
  unint64_t v411;
  unsigned int *v412;
  BOOL v413;
  uint64_t v414;
  int v415;
  uint64_t v416;
  unsigned int v417;
  unsigned int v418;
  unsigned int *v419;
  uint64_t v420;
  unint64_t v421;
  char *v422;
  unsigned int *v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  char *v427;
  unsigned int *i;
  unsigned int v429;
  _QWORD *v430;
  uint64_t v431;
  int v432;
  uint64_t v433;
  unsigned int *v434;
  unint64_t v435;
  const std::nothrow_t *v436;
  unint64_t v437;
  unsigned int *v438;
  unsigned int *v439;
  unsigned int *v440;
  unsigned int *v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  unsigned int v447;
  _QWORD *__dst;
  unsigned int *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  char *__p;
  unsigned int *__pa;
  uint64_t *v457;
  uint64_t v458;
  char *v459;
  unint64_t v460;
  uint64_t *v461;
  unsigned int v462;
  uint64_t *v463;
  unsigned int *v465;
  unsigned int v466;
  _QWORD v467[2];
  int v468;
  void *v469;
  uint64_t *v470;
  uint64_t v471;
  _QWORD v472[2];
  int v473;
  void *v474;
  void *v475;
  uint64_t v476;
  unint64_t v477;
  uint64_t v478;
  int v479;
  void *v480;
  void *v481;
  uint64_t v482;
  char *v483;
  char *v484;
  uint64_t v485;
  void *v486;
  _QWORD v487[2];
  llvm::BasicBlock *v488[2];
  unsigned int v489;
  _QWORD v490[2];
  int v491;
  uint64_t v492;
  int32x2_t v493;
  int v494;
  uint64_t v495;
  uint64_t v496;
  unsigned int v497;
  unint64_t v498;
  void *v499;
  uint64_t v500;
  _BYTE v501[176];
  int *v502;
  uint64_t v503;
  int v504;
  void *v505;
  void *v506;
  uint64_t v507;
  uint64_t *v508;
  uint64_t v509;
  uint64_t v510;
  void *v511;
  void *v512;
  uint64_t v513;
  unint64_t v514;
  void *v515;
  _QWORD *v516;
  uint64_t v517;
  _QWORD v518[4];

  v4 = a3;
  v518[2] = *MEMORY[0x1E0C80C00];
  v472[0] = 0;
  v472[1] = 0;
  v473 = 0;
  v475 = 0;
  v476 = 0;
  v474 = 0;
  v467[0] = 0;
  v467[1] = 0;
  v468 = 0;
  v470 = 0;
  v471 = 0;
  v469 = 0;
  v6 = *a3;
  v514 = 0;
  v515 = 0;
  LODWORD(v516) = 0;
  v518[0] = 0;
  v518[1] = 0;
  v517 = 0;
  v483 = 0;
  v484 = 0;
  LODWORD(v485) = 0;
  v487[0] = 0;
  v487[1] = 0;
  v486 = 0;
  v508 = 0;
  v509 = 0;
  LODWORD(v510) = 0;
  v512 = 0;
  v513 = 0;
  v511 = 0;
  v502 = 0;
  v503 = 0;
  v504 = 0;
  v506 = 0;
  v507 = 0;
  v505 = 0;
  v477 = 0;
  v478 = 0;
  v479 = 0;
  v481 = 0;
  v482 = 0;
  v480 = 0;
  v7 = (llvm::CodeExtractor *)a3[24];
  llvm::CodeExtractor::findInputsOutputs((uint64_t)v7, &v514, &v477, (uint64_t *)&v508);
  llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache((llvm::CodeExtractorAnalysisCache *)&v499, *(llvm::Function **)(v4[29] + 56));
  v488[0] = 0;
  v463 = v4;
  if ((llvm::CodeExtractor::isEligible(v7) & 1) == 0
    || (llvm::CodeExtractor::findAllocas((uint64_t)v7, (unsigned int *)&v499, &v508, &v502, v488),
        llvm::CodeExtractor::findInputsOutputs((uint64_t)v7, &v483, v467, (uint64_t *)&v508),
        v518[0] - v517 != v487[0] - (_QWORD)v486))
  {
    v39 = 0;
    v40 = 0;
    *((_BYTE *)v4 + 217) = 1;
    goto LABEL_53;
  }
  v8 = 0;
  __p = 0;
  v9 = 0;
  v10 = 0;
  v497 = 0;
  v495 = 0;
  v496 = 0;
  v11 = *(_QWORD *)(v6 + 8);
  v12 = *(_QWORD *)(*(_QWORD *)(v6 + 16) + 8);
  if (v11 == v12)
    goto LABEL_50;
  __p = 0;
  v9 = 0;
  v459 = 0;
  v13 = a4;
  do
  {
    v14 = *(unsigned int *)(v11 + 32);
    if ((_DWORD)v14)
    {
      v15 = *(uint64_t **)(v11 + 24);
      v16 = &v15[v14];
      v17 = v9;
      do
      {
        v18 = *v15;
        LODWORD(v492) = 0;
        LODWORD(v492) = sub_1C6192E10(v6, v18);
        if (*(unsigned __int8 *)(v18 + 16) > 0x14u
          || (int *)(*(_QWORD *)v13 + 4 * *(unsigned int *)(v13 + 16)) == sub_1C61940B0((uint64_t *)v13, &v492)
          || (v19 = sub_1C61940B0(&v495, &v492), v20 = v495, (int *)(v495 + 4 * v497) != v19))
        {
          v9 = v17;
        }
        else
        {
          if (v17 >= (unsigned int *)v459)
          {
            v21 = ((char *)v17 - __p) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
LABEL_665:
              abort();
            if ((v459 - __p) >> 1 > v22)
              v22 = (v459 - __p) >> 1;
            v23 = 0x3FFFFFFFFFFFFFFFLL;
            if ((unint64_t)(v459 - __p) < 0x7FFFFFFFFFFFFFFCLL)
              v23 = v22;
            v460 = v23;
            if (v23)
            {
              if (v23 >> 62)
LABEL_666:
                sub_1C4764EE4();
              v24 = (char *)operator new(4 * v23);
            }
            else
            {
              v24 = 0;
            }
            v25 = &v24[4 * v21];
            *(_DWORD *)v25 = v492;
            v9 = (unsigned int *)(v25 + 4);
            if (v17 == (unsigned int *)__p)
            {
              v26 = __p;
            }
            else
            {
              v26 = __p;
              do
              {
                v27 = *--v17;
                *((_DWORD *)v25 - 1) = v27;
                v25 -= 4;
              }
              while (v17 != (unsigned int *)__p);
            }
            v459 = &v24[4 * v460];
            if (v26)
            {
              operator delete(v26);
              v20 = v495;
            }
            __p = v25;
            v13 = a4;
          }
          else
          {
            *v17 = v492;
            v9 = v17 + 1;
          }
          if (!v497)
          {
            v35 = 0;
LABEL_47:
            v36 = sub_1C4A0C948((uint64_t)&v495, (uint64_t)&v492, &v492, v35);
            *v36 = v492;
            goto LABEL_9;
          }
          v28 = (37 * v492) & (v497 - 1);
          v29 = (_DWORD *)(v20 + 4 * v28);
          v30 = *v29;
          if ((_DWORD)v492 != *v29)
          {
            v31 = 0;
            v32 = 1;
            while (v30 != -1)
            {
              if (v31)
                v33 = 0;
              else
                v33 = v30 == -2;
              if (v33)
                v31 = v29;
              v34 = v28 + v32++;
              v28 = v34 & (v497 - 1);
              v29 = (_DWORD *)(v20 + 4 * v28);
              v30 = *v29;
              if ((_DWORD)v492 == *v29)
                goto LABEL_9;
            }
            if (v31)
              v35 = v31;
            else
              v35 = v29;
            goto LABEL_47;
          }
        }
LABEL_9:
        ++v15;
        v17 = v9;
      }
      while (v15 != v16);
    }
    v11 = *(_QWORD *)(v11 + 8);
  }
  while (v11 != v12);
  v8 = v495;
  v10 = v459;
LABEL_50:
  MEMORY[0x1CAA32FB4](v8, 4);
  v37 = (uint64_t *)v517;
  v38 = (uint64_t *)v518[0];
  if (v517 == v518[0])
  {
    v39 = v9;
    v40 = (unsigned int *)__p;
  }
  else
  {
    v40 = (unsigned int *)__p;
    do
    {
      v414 = *v37;
      v495 = *v37;
      v492 = 0;
      if (sub_1C4926528(a1 + 48, &v495, &v492)
        && v492 != *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64))
      {
        v495 = v414;
        v492 = 0;
        v415 = sub_1C4926528(a1 + 48, &v495, &v492);
        v416 = v492;
        if (!v415)
          v416 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
        v414 = *(_QWORD *)(v416 + 8);
      }
      v417 = sub_1C6192E10(v6, v414);
      v418 = v417;
      if (v9 >= (unsigned int *)v10)
      {
        v419 = v40;
        v420 = v9 - v40;
        v421 = v420 + 1;
        if ((unint64_t)(v420 + 1) >> 62)
          goto LABEL_665;
        v422 = v10;
        v423 = v419;
        v424 = v422 - (char *)v419;
        v425 = (v422 - (char *)v419) >> 1;
        if (v425 > v421)
          v421 = v425;
        if (v424 >= 0x7FFFFFFFFFFFFFFCLL)
          v426 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v426 = v421;
        if (v426)
        {
          if (v426 >> 62)
            goto LABEL_666;
          v427 = (char *)operator new(4 * v426);
        }
        else
        {
          v427 = 0;
        }
        v40 = (unsigned int *)&v427[4 * v420];
        *v40 = v418;
        v39 = v40 + 1;
        for (i = v423; v9 != v423; --v40)
        {
          v429 = *--v9;
          *(v40 - 1) = v429;
        }
        v10 = &v427[4 * v426];
        if (i)
          operator delete(i);
      }
      else
      {
        *v9 = v417;
        v39 = v9 + 1;
      }
      ++v37;
      v9 = v39;
    }
    while (v37 != v38);
  }
  v430 = v486;
  v4 = v463;
  if ((void *)v487[0] != v486)
  {
    v431 = 8 * ((uint64_t)(v487[0] - (_QWORD)v486) >> 3);
    do
    {
      v490[0] = 0;
      v490[0] = *v430;
      v495 = v490[0];
      v492 = 0;
      if (sub_1C4926528(a1 + 48, &v495, &v492)
        && v492 != *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64))
      {
        v495 = v490[0];
        v492 = 0;
        v432 = sub_1C4926528(a1 + 48, &v495, &v492);
        v433 = v492;
        if (!v432)
          v433 = *(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64);
        v490[0] = *(_QWORD *)(v433 + 8);
      }
      sub_1C4D954B8(v472, v490);
      ++v430;
      v431 -= 8;
    }
    while (v431);
  }
  v434 = v39;
  v435 = v39 - v40;
  if ((char *)v39 - (char *)v40 < 513)
  {
LABEL_650:
    sub_1C56F8D5C(v40, v39, v39 - v40, 0, 0);
  }
  else
  {
    v436 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v437 = v39 - v40;
    while (1)
    {
      v438 = (unsigned int *)operator new(4 * v437, v436);
      if (v438)
        break;
      v413 = v437 > 1;
      v437 >>= 1;
      if (!v413)
        goto LABEL_650;
    }
    v440 = v438;
    sub_1C56F8D5C(v40, v434, v435, v438, v437);
    v441 = v440;
    v39 = v434;
    operator delete(v441);
  }
LABEL_53:
  sub_1C626D3D0((uint64_t)&v499);
  if (v480)
  {
    v481 = v480;
    operator delete(v480);
  }
  MEMORY[0x1CAA32FB4](v477, 8);
  if (v505)
  {
    v506 = v505;
    operator delete(v505);
  }
  MEMORY[0x1CAA32FB4](v502, 8);
  if (v511)
  {
    v512 = v511;
    operator delete(v511);
  }
  MEMORY[0x1CAA32FB4](v508, 8);
  if (v486)
  {
    v487[0] = v486;
    operator delete(v486);
  }
  MEMORY[0x1CAA32FB4](v483, 8);
  if (v517)
  {
    v518[0] = v517;
    operator delete((void *)v517);
  }
  MEMORY[0x1CAA32FB4](v514, 8);
  if (!*((_BYTE *)v4 + 217))
  {
    v41 = v4[32];
    __pa = v40;
    if (v40 != v39)
    {
      v42 = 0;
      v43 = (uint64_t)(v4 + 7);
      v44 = (_QWORD *)*v4;
      v458 = (uint64_t)(v4 + 17);
      v461 = (uint64_t *)(*v4 + 48);
      v451 = v41 + 152;
      v453 = (uint64_t)(v4 + 4);
      v45 = v40;
      v46 = 0;
      __dst = (_QWORD *)*v4;
      v449 = v39;
      v444 = (uint64_t)(v4 + 7);
      v445 = v4[32];
      while (1)
      {
        v47 = *v45;
        v48 = v44[9];
        v49 = *((unsigned int *)v44 + 22);
        if ((_DWORD)v49)
        {
          LODWORD(v50) = (v49 - 1) & (37 * v47);
          v51 = (int *)(v48 + 8 * v50);
          v52 = *v51;
          if (v47 == *v51)
            goto LABEL_68;
          v149 = 1;
          while (v52 != -1)
          {
            v150 = v50 + v149++;
            v50 = v150 & (v49 - 1);
            v52 = *(_DWORD *)(v48 + 8 * v50);
            if (v47 == v52)
            {
              v51 = (int *)(v48 + 8 * v50);
              goto LABEL_68;
            }
          }
        }
        v51 = (int *)(v48 + 8 * v49);
LABEL_68:
        if ((int *)(v48 + 8 * v49) == v51)
          v53 = 0;
        else
          v53 = v51[1];
        LODWORD(v499) = *v45;
        v54 = sub_1C4A1156C(v461, &v499);
        if ((int *)(v44[6] + 16 * *((unsigned int *)v44 + 16)) == v54)
          v55 = 0;
        else
          v55 = (unsigned __int8 *)*((_QWORD *)v54 + 1);
        v465 = v45;
        v56 = *(_QWORD *)(v41 + 152);
        v57 = *(unsigned int *)(v41 + 168);
        if ((_DWORD)v57)
        {
          LODWORD(v58) = (v57 - 1) & (37 * v53);
          v59 = (int *)(v56 + 8 * v58);
          v60 = *v59;
          if (v53 == *v59)
            goto LABEL_76;
          v151 = 1;
          while (v60 != -1)
          {
            v152 = v58 + v151++;
            v58 = v152 & (v57 - 1);
            v60 = *(_DWORD *)(v56 + 8 * v58);
            if (v53 == v60)
            {
              v59 = (int *)(v56 + 8 * v58);
              goto LABEL_76;
            }
          }
        }
        v59 = (int *)(v56 + 8 * v57);
LABEL_76:
        if (!*(_BYTE *)(v41 + 144))
        {
          v61 = *(_QWORD *)v55;
          v63 = *(_QWORD **)(v41 + 32);
          v62 = *(_QWORD *)(v41 + 40);
          if ((unint64_t)v63 >= v62)
          {
            v65 = v46;
            v447 = v42;
            v66 = *(_QWORD **)(v41 + 24);
            v67 = v63 - v66;
            v68 = v67 + 1;
            if ((unint64_t)(v67 + 1) >> 61)
              goto LABEL_665;
            v69 = v62 - (_QWORD)v66;
            if (v69 >> 2 > v68)
              v68 = v69 >> 2;
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
              v70 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v70 = v68;
            if (v70)
            {
              if (v70 >> 61)
                goto LABEL_666;
              v71 = (char *)operator new(8 * v70);
            }
            else
            {
              v71 = 0;
            }
            v72 = &v71[8 * v67];
            *(_QWORD *)v72 = v61;
            v64 = v72 + 8;
            if (v63 == v66)
            {
              v39 = v449;
              v41 = v445;
              v46 = v65;
            }
            else
            {
              v39 = v449;
              v46 = v65;
              do
              {
                v73 = *--v63;
                *((_QWORD *)v72 - 1) = v73;
                v72 -= 8;
              }
              while (v63 != v66);
              v41 = v445;
              v63 = *(_QWORD **)(v445 + 24);
            }
            v43 = v444;
            *(_QWORD *)(v41 + 24) = v72;
            *(_QWORD *)(v41 + 32) = v64;
            *(_QWORD *)(v41 + 40) = &v71[8 * v70];
            if (v63)
              operator delete(v63);
            v42 = v447;
          }
          else
          {
            *v63 = v61;
            v64 = v63 + 1;
            v39 = v449;
          }
          v44 = __dst;
          *(_QWORD *)(v41 + 32) = v64;
          v4 = v463;
          if (llvm::Value::isSwiftError((llvm::Value *)v55))
          {
            v74 = *(unsigned __int8 *)(v41 + 268);
            *(_DWORD *)(v41 + 264) = v46;
            if (!v74)
              *(_BYTE *)(v41 + 268) = 1;
          }
        }
        v75 = *(_QWORD *)(v41 + 152);
        v76 = *(unsigned int *)(v41 + 168);
        v77 = (int *)(v75 + 8 * v76);
        if (v55[16] > 0x14u || v55 == 0)
        {
          if (v77 != v59)
          {
            v79 = v59[1];
            v80 = v42;
            if ((_DWORD)v42 != (_DWORD)v79)
            {
              *((_BYTE *)v4 + 104) = 1;
              v80 = v79;
            }
            v499 = (void *)(v42 | (unint64_t)(v80 << 32));
            v81 = *((_DWORD *)v4 + 12);
            if (!v81)
            {
              v91 = 0;
              goto LABEL_124;
            }
            v82 = v4[4];
            v83 = v81 - 1;
            v84 = v83 & (37 * v42);
            v85 = (_DWORD *)(v82 + 8 * v84);
            v86 = *v85;
            if ((_DWORD)v42 != *v85)
            {
              v87 = 0;
              v88 = 1;
              while (v86 != -1)
              {
                if (v87)
                  v89 = 0;
                else
                  v89 = v86 == -2;
                if (v89)
                  v87 = v85;
                v90 = v84 + v88++;
                v84 = v90 & v83;
                v85 = (_DWORD *)(v82 + 8 * v84);
                v86 = *v85;
                if ((_DWORD)v42 == *v85)
                  goto LABEL_125;
              }
              if (v87)
                v91 = v87;
              else
                v91 = v85;
LABEL_124:
              v92 = sub_1C476C0AC(v453, (uint64_t)&v499, &v499, v91);
              *(_QWORD *)v92 = v499;
            }
LABEL_125:
            v93 = v59[1];
            v499 = (void *)(v93 | ((unint64_t)v42 << 32));
            v94 = *((_DWORD *)v4 + 18);
            if (v94)
            {
              v95 = v4[7];
              v96 = v94 - 1;
              v97 = v96 & (37 * v93);
              v98 = (_DWORD *)(v95 + 8 * v97);
              v99 = *v98;
              v100 = v465;
              if ((_DWORD)v93 != *v98)
              {
                v101 = 0;
                v102 = 1;
                while (v99 != -1)
                {
                  if (v101)
                    v103 = 0;
                  else
                    v103 = v99 == -2;
                  if (v103)
                    v101 = v98;
                  v104 = v97 + v102++;
                  v97 = v104 & v96;
                  v98 = (_DWORD *)(v95 + 8 * v97);
                  v99 = *v98;
                  if ((_DWORD)v93 == *v98)
                    goto LABEL_201;
                }
                if (v101)
                  v105 = v101;
                else
                  v105 = v98;
                goto LABEL_200;
              }
              goto LABEL_201;
            }
            goto LABEL_204;
          }
          v499 = (void *)(v53 | ((unint64_t)v46 << 32));
          if (!(_DWORD)v76)
          {
            v122 = 0;
            goto LABEL_164;
          }
          v106 = v76 - 1;
          v107 = v106 & (37 * v53);
          v108 = (_DWORD *)(v75 + 8 * v107);
          v109 = *v108;
          if (v53 != *v108)
          {
            v110 = 0;
            v111 = 1;
            while (v109 != -1)
            {
              if (v110)
                v112 = 0;
              else
                v112 = v109 == -2;
              if (v112)
                v110 = v108;
              v113 = v107 + v111++;
              v107 = v113 & v106;
              v108 = (_DWORD *)(v75 + 8 * v107);
              v109 = *v108;
              if (v53 == *v108)
                goto LABEL_165;
            }
            if (v110)
              v122 = v110;
            else
              v122 = v108;
LABEL_164:
            v123 = sub_1C476C0AC(v451, (uint64_t)&v499, &v499, v122);
            *(_QWORD *)v123 = v499;
          }
LABEL_165:
          v499 = (void *)((v46 << 32) | v42);
          v124 = *((_DWORD *)v4 + 12);
          if (v124)
          {
            v125 = v4[4];
            v126 = v124 - 1;
            v127 = v126 & (37 * v42);
            v128 = (_DWORD *)(v125 + 8 * v127);
            v129 = *v128;
            if ((_DWORD)v42 != *v128)
            {
              v130 = 0;
              v131 = 1;
              while (v129 != -1)
              {
                if (v130)
                  v132 = 0;
                else
                  v132 = v129 == -2;
                if (v132)
                  v130 = v128;
                v133 = v127 + v131++;
                v127 = v133 & v126;
                v128 = (_DWORD *)(v125 + 8 * v127);
                v129 = *v128;
                if ((_DWORD)v42 == *v128)
                  goto LABEL_186;
              }
              if (v130)
                v136 = v130;
              else
                v136 = v128;
LABEL_185:
              v137 = sub_1C476C0AC(v453, (uint64_t)&v499, &v499, v136);
              *(_QWORD *)v137 = v499;
            }
LABEL_186:
            v499 = (void *)(v46 | ((unint64_t)v42 << 32));
            v138 = *((_DWORD *)v4 + 18);
            if (v138)
            {
              v139 = v4[7];
              v140 = v138 - 1;
              v141 = v140 & (37 * v46);
              v142 = (_DWORD *)(v139 + 8 * v141);
              v143 = *v142;
              v100 = v465;
              if ((_DWORD)v46 != *v142)
              {
                v144 = 0;
                v145 = 1;
                while (v143 != -1)
                {
                  if (v144)
                    v146 = 0;
                  else
                    v146 = v143 == -2;
                  if (v146)
                    v144 = v142;
                  v147 = v141 + v145++;
                  v141 = v147 & v140;
                  v142 = (_DWORD *)(v139 + 8 * v141);
                  v143 = *v142;
                  if ((_DWORD)v46 == *v142)
                    goto LABEL_201;
                }
                if (v144)
                  v105 = v144;
                else
                  v105 = v142;
LABEL_200:
                v148 = sub_1C476C0AC(v43, (uint64_t)&v499, &v499, v105);
                *(_QWORD *)v148 = v499;
              }
LABEL_201:
              v42 = (v42 + 1);
              goto LABEL_202;
            }
LABEL_204:
            v105 = 0;
            v100 = v465;
            goto LABEL_200;
          }
          v136 = 0;
          goto LABEL_185;
        }
        if (v77 == v59)
        {
          v499 = (void *)(v53 | ((unint64_t)v46 << 32));
          if ((_DWORD)v76)
          {
            v114 = v76 - 1;
            v115 = v114 & (37 * v53);
            v116 = (_DWORD *)(v75 + 8 * v115);
            v117 = *v116;
            if (v53 != *v116)
            {
              v118 = 0;
              v119 = 1;
              while (v117 != -1)
              {
                if (v118)
                  v120 = 0;
                else
                  v120 = v117 == -2;
                if (v120)
                  v118 = v116;
                v121 = v115 + v119++;
                v115 = v121 & v114;
                v116 = (_DWORD *)(v75 + 8 * v115);
                v117 = *v116;
                if (v53 == *v116)
                  goto LABEL_180;
              }
              if (v118)
                v134 = v118;
              else
                v134 = v116;
LABEL_179:
              v135 = sub_1C476C0AC(v451, (uint64_t)&v499, &v499, v134);
              *(_QWORD *)v135 = v499;
            }
LABEL_180:
            v514 = v46;
            goto LABEL_181;
          }
          v134 = 0;
          goto LABEL_179;
        }
        v514 = v59[1];
LABEL_181:
        v515 = v55;
        sub_1C56F8B20(&v499, v458, &v514, &v515);
        v100 = v465;
LABEL_202:
        v46 = (v46 + 1);
        v45 = v100 + 1;
        if (v45 == v39)
          goto LABEL_220;
      }
    }
    LODWORD(v42) = 0;
    LODWORD(v46) = 0;
LABEL_220:
    if (!*(_BYTE *)(v41 + 144))
    {
      *(_DWORD *)(v41 + 148) = v46;
      *(_BYTE *)(v41 + 144) = 1;
    }
    *((_DWORD *)v4 + 6) = v42;
    v153 = v4[32];
    v154 = *v4;
    v499 = v501;
    v500 = 0x600000000;
    v495 = 0;
    v496 = 0;
    v497 = 0;
    v446 = v154;
    sub_1C56F86A8(*(_QWORD *)(v154 + 8), *(_QWORD *)(*(_QWORD *)(v154 + 16) + 8), (uint64_t)&v495, (uint64_t)&v499);
    v155 = v487;
    v483 = (char *)v487;
    v484 = (char *)v487;
    v485 = 1;
    LODWORD(v486) = 0;
    v156 = 1;
    if ((_DWORD)v500)
    {
      v157 = (char *)v499;
      v158 = (char *)v499 + 8 * v500;
      while (1)
      {
        v159 = *(_QWORD *)(*(_QWORD *)v157 + 40);
        if (v159 != *(_QWORD *)v157 + 40)
          break;
LABEL_244:
        v157 += 8;
        if (v157 == v158)
        {
          v155 = (unint64_t *)v483;
          v168 = (unint64_t *)v484;
          v169 = HIDWORD(v485);
          v156 = v485;
          v4 = v463;
          goto LABEL_254;
        }
      }
      if (v159)
        v160 = v159 - 24;
      else
        v160 = 0;
      if (*(_BYTE *)(v160 + 16) != 30)
      {
        v161 = 2;
        switch(*(_BYTE *)(v160 + 16))
        {
          case 0x1E:
            __break(1u);
            return;
          case 0x1F:
            v161 = (*(_DWORD *)(v160 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_247;
          case 0x20:
          case 0x26:
            v161 = (*(_DWORD *)(v160 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_247;
          case 0x21:
            goto LABEL_232;
          case 0x24:
            v161 = *(_WORD *)(v160 + 18) & 1;
            goto LABEL_247;
          case 0x25:
            v161 = 1;
            goto LABEL_232;
          case 0x27:
            v161 = *(_DWORD *)(v160 + 80) + 1;
LABEL_247:
            if (!v161)
              goto LABEL_244;
            goto LABEL_232;
          default:
            goto LABEL_244;
        }
      }
      if ((*(_DWORD *)(v160 + 20) & 0x7FFFFFF) == 3)
        v161 = 2;
      else
        v161 = 1;
LABEL_232:
      v162 = 0;
      while (1)
      {
        Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v160, v162);
        if (!v497)
          goto LABEL_236;
        v164 = ((Successor >> 4) ^ (Successor >> 9)) & (v497 - 1);
        v165 = *(_QWORD *)(v495 + 8 * v164);
        if (Successor != v165)
          break;
LABEL_235:
        if (v164 == v497)
          goto LABEL_236;
LABEL_237:
        if (v161 == ++v162)
          goto LABEL_244;
      }
      v166 = 1;
      while (v165 != -4096)
      {
        v167 = v164 + v166++;
        v164 = v167 & (v497 - 1);
        v165 = *(_QWORD *)(v495 + 8 * v164);
        if (Successor == v165)
          goto LABEL_235;
      }
LABEL_236:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v483, Successor);
      goto LABEL_237;
    }
    v169 = 0;
    v168 = v487;
LABEL_254:
    v492 = 0;
    v493 = 0;
    v494 = 0;
    if (v168 == v155)
      v170 = v169;
    else
      v170 = v156;
    v490[0] = 0;
    v490[1] = 0;
    v171 = v168;
    v491 = 0;
    if ((_DWORD)v170)
    {
      v172 = 8 * v170;
      v171 = v168;
      while (*v171 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v171;
        v172 -= 8;
        if (!v172)
          goto LABEL_365;
      }
    }
    v173 = &v168[v170];
    if (v171 != v173)
    {
      v174 = *v171;
LABEL_264:
      if (*(_QWORD *)(v174 + 40) != v174 + 40)
      {
        for (j = *(_QWORD *)(v174 + 48); ; j = *(_QWORD *)(v176 + 32))
        {
          v176 = j - 24;
          if (j)
            v177 = j - 24;
          else
            v177 = 0;
          if (!j || *(_BYTE *)(v177 + 16) != 83)
            break;
          v508 = &v510;
          v509 = 0x200000000;
          v178 = *(_DWORD *)(j - 4);
          v179 = v178 & 0x7FFFFFF;
          if ((v178 & 0x7FFFFFF) == 0)
            goto LABEL_354;
          v180 = 0;
          v181 = 0;
          do
          {
            v182 = *(_DWORD *)(v176 + 20);
            if ((v182 & 0x40000000) != 0)
              v183 = *(_QWORD *)(v176 - 8);
            else
              v183 = v176 - 32 * (v182 & 0x7FFFFFF);
            if (v497)
            {
              v184 = *(_QWORD *)(v183 + 32 * *(unsigned int *)(v176 + 60) + 8 * v181);
              v185 = ((v184 >> 4) ^ (v184 >> 9)) & (v497 - 1);
              v186 = *(_QWORD *)(v495 + 8 * v185);
              if (v184 == v186)
              {
LABEL_278:
                if (v185 != v497)
                {
                  if (v180 >= HIDWORD(v509))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v508, (uint64_t)&v510, v180 + 1, 4);
                    v180 = v509;
                  }
                  *((_DWORD *)v508 + v180) = v181;
                  v180 = v509 + 1;
                  LODWORD(v509) = v509 + 1;
                }
              }
              else
              {
                v187 = 1;
                while (v186 != -4096)
                {
                  v188 = v185 + v187++;
                  v185 = v188 & (v497 - 1);
                  v186 = *(_QWORD *)(v495 + 8 * v185);
                  if (v184 == v186)
                    goto LABEL_278;
                }
              }
            }
            ++v181;
          }
          while (v181 != v179);
          if (!v180)
            goto LABEL_354;
          if (v180 == 1)
          {
            v502 = 0;
            v189 = *(_DWORD *)(v176 + 20);
            if ((v189 & 0x40000000) != 0)
              v190 = *(_QWORD *)(v176 - 8);
            else
              v190 = v176 - 32 * (v189 & 0x7FFFFFF);
            v502 = *(int **)(v190 + 32 * *(unsigned int *)v508);
            sub_1C4D95920((uint64_t)v490, &v502, (uint64_t)&v514);
            if (v494)
            {
              LODWORD(v227) = ((v502 >> 4) ^ (v502 >> 9)) & (v494 - 1);
              v228 = (void **)(v492 + 8 * v227);
              v229 = (int *)*v228;
              if (v502 == *v228)
              {
LABEL_353:
                *v228 = (void *)-8192;
                v493 = vadd_s32(v493, (int32x2_t)0x1FFFFFFFFLL);
              }
              else
              {
                v230 = 1;
                while (v229 != (int *)-4096)
                {
                  v231 = v227 + v230++;
                  v227 = v231 & (v494 - 1);
                  v229 = *(int **)(v492 + 8 * v227);
                  if (v502 == v229)
                  {
                    v228 = (void **)(v492 + 8 * v227);
                    goto LABEL_353;
                  }
                }
              }
            }
            goto LABEL_354;
          }
          v514 = v176;
          sub_1C4D954B8(v467, &v514);
          if (!(_DWORD)v509)
            goto LABEL_354;
          v191 = v508;
          v192 = (uint64_t *)((char *)v508 + 4 * v509);
          do
          {
            v193 = *(unsigned int *)v191;
            v502 = 0;
            v194 = *(_DWORD *)(v176 + 20);
            if ((v194 & 0x40000000) != 0)
            {
              v196 = *(_QWORD *)(v176 - 8);
              v195 = v194 & 0x7FFFFFF;
            }
            else
            {
              v195 = v194 & 0x7FFFFFF;
              v196 = v176 - 32 * v195;
            }
            v197 = *(int **)(v196 + 32 * v193);
            v502 = v197;
            if ((_DWORD)v195)
            {
              v198 = 0;
              v199 = v497 - 1;
              do
              {
                if (v198 != v193)
                {
                  if ((v194 & 0x40000000) != 0)
                  {
                    v201 = *(_QWORD *)(v176 - 8);
                    v200 = *(int **)(v201 + 32 * v198);
                  }
                  else
                  {
                    v200 = *(int **)(v176 - 32 * v195 + 32 * v198);
                    v201 = v176 - 32 * v195;
                  }
                  if (v200 == v197)
                  {
                    if (!v497)
                      goto LABEL_333;
                    v202 = *(_QWORD *)(v201 + 32 * *(unsigned int *)(v176 + 60) + 8 * v198);
                    v203 = ((v202 >> 4) ^ (v202 >> 9)) & v199;
                    v204 = *(_QWORD *)(v495 + 8 * v203);
                    if (v202 != v204)
                    {
                      v205 = 1;
                      while (v204 != -4096)
                      {
                        v206 = v203 + v205++;
                        v203 = v206 & v199;
                        v204 = *(_QWORD *)(v495 + 8 * v203);
                        if (v202 == v204)
                          goto LABEL_306;
                      }
LABEL_333:
                      sub_1C4D95920((uint64_t)v490, &v502, (uint64_t)&v514);
                      if (v494)
                      {
                        LODWORD(v218) = ((v502 >> 4) ^ (v502 >> 9)) & (v494 - 1);
                        v219 = (void **)(v492 + 8 * v218);
                        v220 = (int *)*v219;
                        if (v502 == *v219)
                        {
LABEL_335:
                          *v219 = (void *)-8192;
                          v493 = vadd_s32(v493, (int32x2_t)0x1FFFFFFFFLL);
                        }
                        else
                        {
                          v225 = 1;
                          while (v220 != (int *)-4096)
                          {
                            v226 = v218 + v225++;
                            v218 = v226 & (v494 - 1);
                            v220 = *(int **)(v492 + 8 * v218);
                            if (v502 == v220)
                            {
                              v219 = (void **)(v492 + 8 * v218);
                              goto LABEL_335;
                            }
                          }
                        }
                      }
                      goto LABEL_340;
                    }
LABEL_306:
                    if (v203 == v497)
                      goto LABEL_333;
                  }
                }
                ++v198;
              }
              while (v198 != v195);
            }
            v207 = *((_QWORD *)v197 + 1);
            if (!v207)
              goto LABEL_336;
            do
            {
              v208 = *(_QWORD *)(v207 + 24);
              v209 = *(unsigned __int8 *)(v208 + 16);
              if (v208)
                v210 = v209 >= 0x1C;
              else
                v210 = 0;
              if (v210)
              {
                v211 = *(_QWORD *)(v208 + 40);
                if (v497)
                {
                  v212 = ((v211 >> 4) ^ (v211 >> 9)) & (v497 - 1);
                  v213 = *(_QWORD *)(v495 + 8 * v212);
                  if (v211 == v213)
                  {
LABEL_321:
                    if (v212 != v497)
                      goto LABEL_327;
                  }
                  else
                  {
                    v216 = 1;
                    while (v213 != -4096)
                    {
                      v217 = v212 + v216++;
                      v212 = v217 & (v497 - 1);
                      v213 = *(_QWORD *)(v495 + 8 * v212);
                      if (v211 == v213)
                        goto LABEL_321;
                    }
                  }
                }
                if (v209 != 83)
                  goto LABEL_333;
                v214 = (char *)sub_1C477672C((uint64_t)&v483, v211);
                v215 = v484 == v483 ? (uint64_t *)((char *)&v485 + 4) : &v485;
                if (v214 == &v484[8 * *(unsigned int *)v215])
                  goto LABEL_333;
              }
LABEL_327:
              v207 = *(_QWORD *)(v207 + 8);
            }
            while (v207);
            v197 = v502;
LABEL_336:
            if (!v491)
              goto LABEL_339;
            v221 = ((v197 >> 4) ^ (v197 >> 9)) & (v491 - 1);
            v222 = *(int **)(v490[0] + 8 * v221);
            if (v197 != v222)
            {
              v223 = 1;
              while (v222 != (int *)-4096)
              {
                v224 = v221 + v223++;
                v221 = v224 & (v491 - 1);
                v222 = *(int **)(v490[0] + 8 * v221);
                if (v197 == v222)
                  goto LABEL_338;
              }
LABEL_339:
              sub_1C4D95920((uint64_t)&v492, &v502, (uint64_t)&v514);
              goto LABEL_340;
            }
LABEL_338:
            if (v221 == v491)
              goto LABEL_339;
LABEL_340:
            v191 = (uint64_t *)((char *)v191 + 4);
          }
          while (v191 != v192);
LABEL_354:
          if (v508 != &v510)
            free(v508);
        }
      }
      v232 = v171 + 1;
      v4 = v463;
      while (v232 != v173)
      {
        v233 = *v232++;
        v174 = v233;
        if (v233 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v171 = v232 - 1;
          goto LABEL_264;
        }
      }
    }
LABEL_365:
    v234 = *((_DWORD *)v4 + 6);
    v235 = *(_DWORD *)(v153 + 148);
    v488[0] = 0;
    v488[1] = 0;
    v489 = 0;
    v236 = (uint64_t *)v469;
    v457 = v470;
    if (v469 != v470)
    {
      v452 = (uint64_t)(v4 + 7);
      v454 = (uint64_t)(v4 + 4);
      v443 = (uint64_t)(v4 + 20);
      v442 = (uint64_t)(v4 + 22);
      while (1)
      {
        v237 = *v236;
        if (!v494)
          goto LABEL_370;
        v238 = (v494 - 1) & ((v237 >> 4) ^ (v237 >> 9));
        v239 = *(_QWORD *)(v492 + 8 * v238);
        if (v237 != v239)
          break;
LABEL_369:
        if (v238 == v494)
          goto LABEL_370;
LABEL_546:
        if (++v236 == v457)
          goto LABEL_610;
      }
      v398 = 1;
      while (v239 != -4096)
      {
        v399 = v238 + v398++;
        v238 = v399 & (v494 - 1);
        v239 = *(_QWORD *)(v492 + 8 * v238);
        if (v237 == v239)
          goto LABEL_369;
      }
LABEL_370:
      v240 = (*(_QWORD *)(v153 + 32) - *(_QWORD *)(v153 + 24)) >> 3;
      LODWORD(v508) = v235;
      v241 = v235;
      v466 = v235;
      if (v235 < v240)
      {
        while (1)
        {
          v242 = *(_QWORD *)(*(_QWORD *)(v153 + 24) + 8 * v241);
          if (v242 == llvm::PointerType::get(*(llvm::PointerType **)v237, 0))
          {
            v243 = sub_1C61940B0((uint64_t *)v488, &v508);
            if ((int *)v488[0] + v489 == v243)
              break;
          }
          v241 = (_DWORD)v508 + 1;
          LODWORD(v508) = v241;
          if (v241 >= v240)
            goto LABEL_386;
        }
        if (v489)
        {
          v244 = v508;
          v245 = (37 * (_DWORD)v508) & (v489 - 1);
          v246 = (_DWORD *)((char *)v488[0] + 4 * v245);
          v247 = *v246;
          if ((_DWORD)v508 == *v246)
            goto LABEL_453;
          v248 = 0;
          v249 = 1;
          while (v247 != -1)
          {
            if (v248)
              v250 = 0;
            else
              v250 = v247 == -2;
            if (v250)
              v248 = v246;
            v251 = v245 + v249++;
            v245 = v251 & (v489 - 1);
            v246 = (_DWORD *)((char *)v488[0] + 4 * v245);
            v247 = *v246;
            if ((_DWORD)v508 == *v246)
              goto LABEL_453;
          }
          if (v248)
            v298 = v248;
          else
            v298 = v246;
        }
        else
        {
          v298 = 0;
        }
        v299 = sub_1C4A0C948((uint64_t)v488, (uint64_t)&v508, &v508, v298);
        *v299 = (_DWORD)v508;
        v244 = v508;
LABEL_453:
        v300 = v244;
        v514 = v234 | ((unint64_t)v244 << 32);
        v301 = *((_DWORD *)v4 + 12);
        if (v301)
        {
          v302 = v4[4];
          v303 = v301 - 1;
          v304 = v303 & (37 * v234);
          v305 = (_DWORD *)(v302 + 8 * v304);
          v306 = *v305;
          if (v234 == *v305)
            goto LABEL_468;
          v307 = 0;
          v308 = 1;
          while (v306 != -1)
          {
            if (v307)
              v309 = 0;
            else
              v309 = v306 == -2;
            if (v309)
              v307 = v305;
            v310 = v304 + v308++;
            v304 = v310 & v303;
            v305 = (_DWORD *)(v302 + 8 * v304);
            v306 = *v305;
            if (v234 == *v305)
              goto LABEL_468;
          }
          if (v307)
            v311 = v307;
          else
            v311 = v305;
        }
        else
        {
          v311 = 0;
        }
        v312 = sub_1C476C0AC(v454, (uint64_t)&v514, &v514, v311);
        *(_QWORD *)v312 = v514;
        v300 = v508;
        v244 = v508;
LABEL_468:
        v514 = v300 | ((unint64_t)v234 << 32);
        v313 = *((_DWORD *)v4 + 18);
        if (v313)
        {
          v314 = v4[7];
          v315 = v313 - 1;
          v316 = v315 & (37 * v300);
          v292 = (_DWORD *)(v314 + 8 * v316);
          v317 = *v292;
          if (*v292 == (_DWORD)v300)
            goto LABEL_483;
          v294 = 0;
          v318 = 1;
          while (v317 != -1)
          {
            if (v294)
              v319 = 0;
            else
              v319 = v317 == -2;
            if (v319)
              v294 = v292;
            v320 = v316 + v318++;
            v316 = v320 & v315;
            v292 = (_DWORD *)(v314 + 8 * v316);
            v317 = *v292;
            if (*v292 == (_DWORD)v300)
              goto LABEL_483;
          }
          goto LABEL_479;
        }
        goto LABEL_569;
      }
LABEL_386:
      v252 = llvm::PointerType::get(*(llvm::PointerType **)v237, 0);
      v253 = v252;
      v255 = *(uint64_t **)(v153 + 32);
      v254 = *(_QWORD *)(v153 + 40);
      if ((unint64_t)v255 >= v254)
      {
        v257 = *(_QWORD **)(v153 + 24);
        v258 = v255 - v257;
        v259 = v258 + 1;
        if ((unint64_t)(v258 + 1) >> 61)
          goto LABEL_665;
        v260 = v254 - (_QWORD)v257;
        if (v260 >> 2 > v259)
          v259 = v260 >> 2;
        if ((unint64_t)v260 >= 0x7FFFFFFFFFFFFFF8)
          v261 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v261 = v259;
        if (v261)
        {
          if (v261 >> 61)
            goto LABEL_666;
          v262 = (char *)operator new(8 * v261);
        }
        else
        {
          v262 = 0;
        }
        v263 = (uint64_t *)&v262[8 * v258];
        *v263 = v253;
        v256 = v263 + 1;
        if (v255 == v257)
        {
          v4 = v463;
        }
        else
        {
          v4 = v463;
          do
          {
            v264 = *--v255;
            *--v263 = v264;
          }
          while (v255 != v257);
          v255 = *(uint64_t **)(v153 + 24);
        }
        *(_QWORD *)(v153 + 24) = v263;
        *(_QWORD *)(v153 + 32) = v256;
        *(_QWORD *)(v153 + 40) = &v262[8 * v261];
        if (v255)
          operator delete(v255);
      }
      else
      {
        *v255 = v252;
        v256 = v255 + 1;
        v4 = v463;
      }
      *(_QWORD *)(v153 + 32) = v256;
      v265 = ((unint64_t)v256 - *(_QWORD *)(v153 + 24)) >> 3;
      v244 = (v265 - 1);
      LODWORD(v508) = v265 - 1;
      if (v489)
      {
        v266 = (37 * v244) & (v489 - 1);
        v267 = (_DWORD *)((char *)v488[0] + 4 * v266);
        v268 = *v267;
        if ((_DWORD)v244 == *v267)
          goto LABEL_421;
        v269 = 0;
        v270 = 1;
        while (v268 != -1)
        {
          if (v269)
            v271 = 0;
          else
            v271 = v268 == -2;
          if (v271)
            v269 = v267;
          v272 = v266 + v270++;
          v266 = v272 & (v489 - 1);
          v267 = (_DWORD *)((char *)v488[0] + 4 * v266);
          v268 = *v267;
          if ((_DWORD)v244 == *v267)
            goto LABEL_421;
        }
        if (v269)
          v273 = v269;
        else
          v273 = v267;
      }
      else
      {
        v273 = 0;
      }
      v274 = sub_1C4A0C948((uint64_t)v488, (uint64_t)&v508, &v508, v273);
      *v274 = (_DWORD)v508;
      v244 = v508;
LABEL_421:
      v275 = v244;
      v514 = v234 | ((unint64_t)v244 << 32);
      v276 = *((_DWORD *)v4 + 12);
      if (v276)
      {
        v277 = v4[4];
        v278 = v276 - 1;
        v279 = v278 & (37 * v234);
        v280 = (_DWORD *)(v277 + 8 * v279);
        v281 = *v280;
        if (v234 == *v280)
          goto LABEL_436;
        v282 = 0;
        v283 = 1;
        while (v281 != -1)
        {
          if (v282)
            v284 = 0;
          else
            v284 = v281 == -2;
          if (v284)
            v282 = v280;
          v285 = v279 + v283++;
          v279 = v285 & v278;
          v280 = (_DWORD *)(v277 + 8 * v279);
          v281 = *v280;
          if (v234 == *v280)
            goto LABEL_436;
        }
        if (v282)
          v286 = v282;
        else
          v286 = v280;
      }
      else
      {
        v286 = 0;
      }
      v287 = sub_1C476C0AC(v454, (uint64_t)&v514, &v514, v286);
      *(_QWORD *)v287 = v514;
      v275 = v508;
      v244 = v508;
LABEL_436:
      v514 = v275 | ((unint64_t)v234 << 32);
      v288 = *((_DWORD *)v4 + 18);
      if (v288)
      {
        v289 = v4[7];
        v290 = v288 - 1;
        v291 = v290 & (37 * v275);
        v292 = (_DWORD *)(v289 + 8 * v291);
        v293 = *v292;
        if (*v292 == (_DWORD)v275)
          goto LABEL_483;
        v294 = 0;
        v295 = 1;
        while (v293 != -1)
        {
          if (v294)
            v296 = 0;
          else
            v296 = v293 == -2;
          if (v296)
            v294 = v292;
          v297 = v291 + v295++;
          v291 = v297 & v290;
          v292 = (_DWORD *)(v289 + 8 * v291);
          v293 = *v292;
          if (*v292 == (_DWORD)v275)
            goto LABEL_483;
        }
LABEL_479:
        if (v294)
          v321 = v294;
        else
          v321 = v292;
        goto LABEL_482;
      }
LABEL_569:
      v321 = 0;
LABEL_482:
      v322 = sub_1C476C0AC(v452, (uint64_t)&v514, &v514, v321);
      *(_QWORD *)v322 = v514;
      v244 = v508;
LABEL_483:
      v323 = *(_BYTE *)(v237 + 16) != 83 || v237 == 0;
      v462 = v234;
      if (!v323)
      {
        v324 = *(_QWORD *)(v237 + 40);
        if (!v497)
          goto LABEL_490;
        v325 = ((v324 >> 4) ^ (v324 >> 9)) & (v497 - 1);
        v326 = *(_QWORD *)(v495 + 8 * v325);
        if (v324 != v326)
        {
          v400 = 1;
          while (v326 != -4096)
          {
            v401 = v325 + v400++;
            v325 = v401 & (v497 - 1);
            v326 = *(_QWORD *)(v495 + 8 * v325);
            if (v324 == v326)
              goto LABEL_489;
          }
LABEL_490:
          v450 = v4[32];
          v327 = *v4;
          v502 = &v504;
          v503 = 0x200000000;
          v328 = *(_DWORD *)(v237 + 20);
          v329 = v328 & 0x7FFFFFF;
          if ((v328 & 0x7FFFFFF) != 0)
          {
            v330 = 0;
            v331 = 1;
            do
            {
              v332 = *(_DWORD *)(v237 + 20);
              if ((v332 & 0x40000000) != 0)
                v333 = *(_QWORD *)(v237 - 8);
              else
                v333 = v237 - 32 * (v332 & 0x7FFFFFF);
              v334 = *(llvm::BasicBlock **)(v333 + 32 * *(unsigned int *)(v237 + 60) + 8 * v330);
              v335 = sub_1C6192E10(v327, *(_QWORD *)(v333 + 32 * v330));
              v336 = v334 >> 4;
              if ((v335 & 0xFF00000000) == 0)
              {
                if (!v497)
                  goto LABEL_519;
                v337 = (v336 ^ (v334 >> 9)) & (v497 - 1);
                v338 = *(llvm::BasicBlock **)(v495 + 8 * v337);
                if (v334 == v338)
                {
LABEL_498:
                  if (v337 != v497)
                  {
                    LOBYTE(v366) = 0;
                    v367 = 0;
                    v4 = v463;
                    *((_BYTE *)v463 + 217) = 1;
                    goto LABEL_540;
                  }
                }
                else
                {
                  v358 = 1;
                  while (v338 != (llvm::BasicBlock *)-4096)
                  {
                    v359 = v337 + v358++;
                    v337 = v359 & (v497 - 1);
                    v338 = *(llvm::BasicBlock **)(v495 + 8 * v337);
                    if (v334 == v338)
                      goto LABEL_498;
                  }
                }
              }
              if (v497)
              {
                v339 = (v336 ^ (v334 >> 9)) & (v497 - 1);
                v340 = *(llvm::BasicBlock **)(v495 + 8 * v339);
                if (v334 != v340)
                {
                  v360 = 1;
                  while (v340 != (llvm::BasicBlock *)-4096)
                  {
                    v361 = v339 + v360++;
                    v339 = v361 & (v497 - 1);
                    v340 = *(llvm::BasicBlock **)(v495 + 8 * v339);
                    if (v334 == v340)
                      goto LABEL_501;
                  }
                  goto LABEL_519;
                }
LABEL_501:
                if (v339 != v497)
                {
                  v341 = *(_QWORD *)(v327 + 72);
                  v342 = *(unsigned int *)(v327 + 88);
                  if ((_DWORD)v342)
                  {
                    LODWORD(v343) = (v342 - 1) & (37 * v335);
                    v344 = (int *)(v341 + 8 * v343);
                    v345 = *v344;
                    if (*v344 == (_DWORD)v335)
                      goto LABEL_504;
                    v362 = 1;
                    while (v345 != -1)
                    {
                      v363 = v343 + v362++;
                      v343 = v363 & (v342 - 1);
                      v345 = *(_DWORD *)(v341 + 8 * v343);
                      if (v345 == (_DWORD)v335)
                      {
                        v344 = (int *)(v341 + 8 * v343);
                        goto LABEL_504;
                      }
                    }
                  }
                  v344 = (int *)(v341 + 8 * v342);
LABEL_504:
                  v346 = v324;
                  if ((int *)(v341 + 8 * v342) == v344)
                    v347 = 0;
                  else
                    v347 = v344[1];
                  v348 = v503;
                  if (v503 >= (unint64_t)HIDWORD(v503))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v502, (uint64_t)&v504, v503 + 1, 4);
                    v348 = v503;
                  }
                  v502[v348] = v347;
                  LODWORD(v503) = v503 + 1;
                  v349 = sub_1C6192E10(v327, (uint64_t)v334);
                  if ((v349 & 0xFF00000000) == 0)
                  {
                    SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v334);
                    LODWORD(v349) = sub_1C6192E10(v327, SinglePredecessor);
                  }
                  v351 = *(_QWORD *)(v327 + 72);
                  v352 = *(unsigned int *)(v327 + 88);
                  if ((_DWORD)v352)
                  {
                    LODWORD(v353) = (v352 - 1) & (37 * v349);
                    v354 = (int *)(v351 + 8 * v353);
                    v355 = *v354;
                    if (*v354 == (_DWORD)v349)
                    {
LABEL_513:
                      if ((int *)(v351 + 8 * v352) == v354)
                        v356 = 0;
                      else
                        v356 = v354[1];
                      v357 = v503;
                      if (v503 >= (unint64_t)HIDWORD(v503))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v502, (uint64_t)&v504, v503 + 1, 4);
                        v357 = v503;
                      }
                      v502[v357] = v356;
                      LODWORD(v503) = v503 + 1;
                      v324 = v346;
                      goto LABEL_519;
                    }
                    v364 = 1;
                    while (v355 != -1)
                    {
                      v365 = v353 + v364++;
                      v353 = v365 & (v352 - 1);
                      v355 = *(_DWORD *)(v351 + 8 * v353);
                      if (v355 == (_DWORD)v349)
                      {
                        v354 = (int *)(v351 + 8 * v353);
                        goto LABEL_513;
                      }
                    }
                  }
                  v354 = (int *)(v351 + 8 * v352);
                  goto LABEL_513;
                }
              }
LABEL_519:
              v331 = ++v330 < v329;
            }
            while (v330 != v329);
          }
          v369 = sub_1C6192E10(v327, v324);
          v370 = *(_QWORD *)(v327 + 72);
          v371 = *(unsigned int *)(v327 + 88);
          if ((_DWORD)v371)
          {
            LODWORD(v372) = (v371 - 1) & (37 * v369);
            v373 = (int *)(v370 + 8 * v372);
            v374 = *v373;
            v375 = &unk_1ED7EA000;
            if (*v373 == v369)
              goto LABEL_550;
            v402 = 1;
            while (v374 != -1)
            {
              v403 = v372 + v402++;
              v372 = v403 & (v371 - 1);
              v374 = *(_DWORD *)(v370 + 8 * v372);
              if (v374 == v369)
              {
                v373 = (int *)(v370 + 8 * v372);
                goto LABEL_596;
              }
            }
          }
          v373 = (int *)(v370 + 8 * v371);
LABEL_596:
          v375 = (_QWORD *)&unk_1ED7EA000;
LABEL_550:
          if ((int *)(v370 + 8 * v371) == v373)
            v376 = 0;
          else
            v376 = v373[1];
          v508 = (uint64_t *)(v376 | (v244 << 32));
          v509 = (uint64_t)&v511;
          v510 = 0x200000000;
          v383 = v503;
          if (!(_DWORD)v503)
          {
LABEL_562:
            v386 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v386 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
            {
              v406 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v406 = 0xFF51AFD7ED558CCDLL;
              v375[400] = v406;
              __cxa_guard_release(&qword_1ED7EAC88);
            }
            v387 = 0x9DDFEA08EB382D69 * (v375[400] + 8 * v376);
            v514 = 0x9DDFEA08EB382D69
                 * ((0x9DDFEA08EB382D69 * (v387 ^ (v387 >> 47))) ^ ((0x9DDFEA08EB382D69 * (v387 ^ (v387 >> 47))) >> 47));
            v388 = HIDWORD(v508);
            LOBYTE(v387) = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v387 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
            {
              v407 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v407 = 0xFF51AFD7ED558CCDLL;
              v375[400] = v407;
              __cxa_guard_release(&qword_1ED7EAC88);
            }
            v389 = 0x9DDFEA08EB382D69 * (v375[400] + 8 * v388);
            v477 = 0x9DDFEA08EB382D69
                 * ((0x9DDFEA08EB382D69 * (v389 ^ (v389 >> 47))) ^ ((0x9DDFEA08EB382D69 * (v389 ^ (v389 >> 47))) >> 47));
            v498 = sub_1C6193EA0((_QWORD *)v509, v509 + 4 * v510);
            v390 = sub_1C6193D54((uint64_t *)&v514, (uint64_t *)&v477, (uint64_t *)&v498);
            v391 = *(_QWORD *)(v450 + 208);
            v392 = *(unsigned int *)(v450 + 224);
            v393 = sub_1C6295FA4(v391, *(_DWORD *)(v450 + 224), v390);
            if ((uint64_t *)(v391 + 16 * v392) != v393)
              goto LABEL_565;
            LODWORD(v514) = *(_DWORD *)(v450 + 180);
            v515 = v508;
            v516 = v518;
            v517 = 0x200000000;
            v394 = v510;
            if (!(_DWORD)v510)
            {
LABEL_575:
              sub_1C6296000((uint64_t)&v477, v450 + 184, (int *)&v514, (uint64_t)&v515);
              if (v516 != v518)
                free(v516);
              v397 = *(unsigned int *)(v450 + 180);
              *(_DWORD *)(v450 + 180) = v397 - 1;
              v477 = v390;
              v478 = v397;
              sub_1C62962A8((uint64_t)&v514, v450 + 208, (uint64_t *)&v477, &v478);
              v393 = (uint64_t *)v514;
LABEL_565:
              v366 = *((_DWORD *)v393 + 2);
              v4 = v463;
              if ((void **)v509 != &v511)
                free((void *)v509);
              v331 = 0;
              v367 = v366 & 0xFFFFFF00;
LABEL_540:
              v40 = __pa;
              if (v502 != &v504)
                free(v502);
              if (v331)
                goto LABEL_653;
              goto LABEL_543;
            }
            if (v510 >= 3)
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v516, (uint64_t)v518, v510, 4);
              v396 = v510;
              if (!(_DWORD)v510)
                goto LABEL_574;
              v395 = v516;
            }
            else
            {
              v395 = v518;
              v396 = v510;
            }
            memcpy(v395, (const void *)v509, 4 * v396);
LABEL_574:
            LODWORD(v517) = v394;
            goto LABEL_575;
          }
          if (v503 >= 3)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v509, (uint64_t)&v511, v503, 4);
            v385 = v503;
            if (!(_DWORD)v503)
              goto LABEL_561;
            v384 = (void **)v509;
          }
          else
          {
            v384 = &v511;
            v385 = v503;
          }
          memcpy(v384, v502, 4 * v385);
LABEL_561:
          LODWORD(v510) = v383;
          v376 = v508;
          goto LABEL_562;
        }
LABEL_489:
        if (v325 == v497)
          goto LABEL_490;
      }
      v377 = sub_1C6192E10(v446, v237);
      v378 = *(_QWORD *)(v446 + 72);
      v379 = *(unsigned int *)(v446 + 88);
      if ((_DWORD)v379)
      {
        LODWORD(v380) = (v379 - 1) & (37 * v377);
        v381 = (int *)(v378 + 8 * v380);
        v382 = *v381;
        if (*v381 == v377)
          goto LABEL_554;
        v404 = 1;
        while (1)
        {
          v4 = v463;
          if (v382 == -1)
            break;
          v405 = v380 + v404++;
          v380 = v405 & (v379 - 1);
          v382 = *(_DWORD *)(v378 + 8 * v380);
          if (v382 == v377)
          {
            v381 = (int *)(v378 + 8 * v380);
            v4 = v463;
            goto LABEL_554;
          }
        }
      }
      v381 = (int *)(v378 + 8 * v379);
LABEL_554:
      if ((int *)(v378 + 8 * v379) == v381)
      {
        v367 = 0;
        LOBYTE(v366) = 0;
      }
      else
      {
        v367 = v381[1];
        LOBYTE(v366) = v367;
      }
LABEL_543:
      v368 = *((unsigned int *)v4 + 42);
      if (v368 >= *((unsigned int *)v4 + 43))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v443, v442, v368 + 1, 4);
        v368 = *((unsigned int *)v4 + 42);
      }
      *(_DWORD *)(v4[20] + 4 * v368) = v367 & 0xFFFFFF00 | v366;
      ++*((_DWORD *)v4 + 42);
      v234 = v462 + 1;
      v235 = v466 + 1;
      goto LABEL_546;
    }
LABEL_610:
    v408 = (unsigned int *)v4[20];
    v409 = *((unsigned int *)v4 + 42);
    if (v409 < 0x81)
    {
LABEL_614:
      sub_1C56F97D8(v408, &v408[v409], v409, 0, 0);
    }
    else
    {
      v410 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v411 = *((unsigned int *)v4 + 42);
      while (1)
      {
        v412 = (unsigned int *)operator new(4 * v411, v410);
        if (v412)
          break;
        v413 = v411 > 1;
        v411 >>= 1;
        if (!v413)
          goto LABEL_614;
      }
      v439 = v412;
      sub_1C56F97D8(v408, &v408[v409], v409, v412, v411);
      operator delete(v439);
    }
    v40 = __pa;
LABEL_653:
    MEMORY[0x1CAA32FB4](v488[0], 4);
    MEMORY[0x1CAA32FB4](v490[0], 8);
    MEMORY[0x1CAA32FB4](v492, 8);
    if (v484 != v483)
      free(v484);
    MEMORY[0x1CAA32FB4](v495, 8);
    if (v499 != v501)
      free(v499);
  }
  if (v469)
  {
    v470 = (uint64_t *)v469;
    operator delete(v469);
  }
  MEMORY[0x1CAA32FB4](v467[0], 8);
  if (v474)
  {
    v475 = v474;
    operator delete(v474);
  }
  MEMORY[0x1CAA32FB4](v472[0], 8);
  if (v40)
    operator delete(v40);
}

uint64_t replaceCalledFunction(uint64_t **a1, llvm::OutlinableRegion *a2, const llvm::APInt *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::ConstantInt *v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  llvm::PointerType *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unsigned int v56;
  unsigned int v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  llvm::ValueAsMetadata *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  llvm::ValueSymbolTable *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned __int8 *v81;
  unint64_t v82;
  unsigned int v83;
  __int16 v84;
  char v85;

  v4 = *((_QWORD *)a2 + 32);
  v5 = *((_QWORD *)a2 + 25);
  v6 = *(_QWORD *)(v4 + 56);
  v7 = *(_QWORD *)(v6 + 96);
  if (!*((_BYTE *)a2 + 104))
  {
    v8 = *(unsigned __int8 *)(v5 + 16);
    if (v8 == 84)
      v9 = 0;
    else
      v9 = v8 == 39 ? (*(_DWORD *)(v5 + 80) + 1) : 2;
    v10 = *(_DWORD *)(v5 + 20);
    if (v10 < 0 && (v78 = v5 - 32 * (v10 & 0x7FFFFFF), v79 = *(_QWORD *)(v78 - 8), (v79 & 0xFFFFFFFF0) != 0))
    {
      v12 = -(uint64_t)(v10 & 0x7FFFFFF);
      v11 = *(_DWORD *)(v78 - 12) - *(_DWORD *)(v78 - v79);
    }
    else
    {
      v11 = 0;
      v12 = -(uint64_t)(v10 & 0x7FFFFFF);
    }
    if (v7 == ((-32 * v9 + 32 * (unint64_t)-v11 - 32 * v12 - 32) >> 5))
    {
      sub_1C500A72C(*((_QWORD *)a2 + 25), *(_QWORD *)(v4 + 56));
      return v5;
    }
  }
  if (v7)
  {
    LODWORD(v13) = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    while (1)
    {
      if (v7 - 1 == v14 && *(_DWORD *)(v4 + 128) >= 2u)
      {
        v18 = **a1;
        v19 = *((unsigned int *)a2 + 7);
        v20 = *(llvm::ConstantInt **)(v18 + 1960);
        v21 = *(unsigned int *)(v18 + 1968);
        v83 = v21 >> 8;
        if (v21 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v82, v19, 0);
        }
        else
        {
          if (v21 <= 0xFF)
            v22 = 0;
          else
            v22 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v21);
          v82 = v22 & v19;
        }
        v23 = llvm::ConstantInt::get(v20, (llvm::LLVMContext *)&v82, a3);
        if (v83 >= 0x41 && v82)
          MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
        if (v16 >= v15)
        {
          v24 = (v16 - (char *)v17) >> 3;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 61)
            goto LABEL_125;
          if ((v15 - (char *)v17) >> 2 > v25)
            v25 = (v15 - (char *)v17) >> 2;
          if ((unint64_t)(v15 - (char *)v17) >= 0x7FFFFFFFFFFFFFF8)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v25;
          if (v26)
          {
            if (v26 >> 61)
              goto LABEL_126;
            v27 = (char *)operator new(8 * v26);
          }
          else
          {
            v27 = 0;
          }
          v42 = (uint64_t *)&v27[8 * v24];
          *v42 = (uint64_t)v23;
          v41 = (char *)(v42 + 1);
          if (v16 != (char *)v17)
          {
            do
            {
              v46 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *--v42 = v46;
            }
            while (v16 != (char *)v17);
            goto LABEL_80;
          }
          goto LABEL_81;
        }
        goto LABEL_55;
      }
      v28 = *((_QWORD *)a2 + 7);
      v29 = *((unsigned int *)a2 + 18);
      if ((_DWORD)v29)
      {
        LODWORD(v30) = (v29 - 1) & (37 * v13);
        v31 = (int *)(v28 + 8 * v30);
        v32 = *v31;
        if ((_DWORD)v13 == *v31)
          goto LABEL_30;
        v49 = 1;
        while (v32 != -1)
        {
          v50 = v30 + v49++;
          v30 = v50 & (v29 - 1);
          v32 = *(_DWORD *)(v28 + 8 * v30);
          if ((_DWORD)v13 == v32)
          {
            v31 = (int *)(v28 + 8 * v30);
            goto LABEL_30;
          }
        }
      }
      v31 = (int *)(v28 + 8 * v29);
LABEL_30:
      if ((int *)(v28 + 8 * v29) == v31)
      {
        v35 = *((_QWORD *)a2 + 17);
        v36 = *((unsigned int *)a2 + 38);
        v37 = sub_1C4D7501C(v35, *((_DWORD *)a2 + 38), v13);
        if ((int *)(v35 + 16 * v36) == v37)
        {
          if ((*(_WORD *)(v6 + 18) & 1) != 0)
            llvm::Function::BuildLazyArguments((llvm::Function *)v6);
          v23 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(*(_QWORD *)(v6 + 88) + 40 * v13), v38);
          if (v16 >= v15)
          {
            v44 = (v16 - (char *)v17) >> 3;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 61)
LABEL_125:
              abort();
            if ((v15 - (char *)v17) >> 2 > v45)
              v45 = (v15 - (char *)v17) >> 2;
            if ((unint64_t)(v15 - (char *)v17) >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v45;
            if (v26)
            {
              if (v26 >> 61)
LABEL_126:
                sub_1C4764EE4();
              v27 = (char *)operator new(8 * v26);
            }
            else
            {
              v27 = 0;
            }
            v42 = (uint64_t *)&v27[8 * v44];
            *v42 = (uint64_t)v23;
            v41 = (char *)(v42 + 1);
            if (v16 != (char *)v17)
            {
              do
              {
                v48 = *((_QWORD *)v16 - 1);
                v16 -= 8;
                *--v42 = v48;
              }
              while (v16 != (char *)v17);
LABEL_80:
              v16 = (char *)v17;
            }
LABEL_81:
            v17 = v42;
            v15 = &v27[8 * v26];
            if (v16)
              operator delete(v16);
            goto LABEL_83;
          }
        }
        else
        {
          v23 = (void *)*((_QWORD *)v37 + 1);
          if (v16 >= v15)
          {
            v39 = (v16 - (char *)v17) >> 3;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61)
              goto LABEL_125;
            if ((v15 - (char *)v17) >> 2 > v40)
              v40 = (v15 - (char *)v17) >> 2;
            if ((unint64_t)(v15 - (char *)v17) >= 0x7FFFFFFFFFFFFFF8)
              v26 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v26 = v40;
            if (v26)
            {
              if (v26 >> 61)
                goto LABEL_126;
              v27 = (char *)operator new(8 * v26);
            }
            else
            {
              v27 = 0;
            }
            v42 = (uint64_t *)&v27[8 * v39];
            *v42 = (uint64_t)v23;
            v41 = (char *)(v42 + 1);
            if (v16 != (char *)v17)
            {
              do
              {
                v47 = *((_QWORD *)v16 - 1);
                v16 -= 8;
                *--v42 = v47;
              }
              while (v16 != (char *)v17);
              goto LABEL_80;
            }
            goto LABEL_81;
          }
        }
      }
      else
      {
        v23 = *(void **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 32 * v31[1]);
        if (v16 >= v15)
        {
          v33 = (v16 - (char *)v17) >> 3;
          v34 = v33 + 1;
          if ((unint64_t)(v33 + 1) >> 61)
            goto LABEL_125;
          if ((v15 - (char *)v17) >> 2 > v34)
            v34 = (v15 - (char *)v17) >> 2;
          if ((unint64_t)(v15 - (char *)v17) >= 0x7FFFFFFFFFFFFFF8)
            v26 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v26 = v34;
          if (v26)
          {
            if (v26 >> 61)
              goto LABEL_126;
            v27 = (char *)operator new(8 * v26);
          }
          else
          {
            v27 = 0;
          }
          v42 = (uint64_t *)&v27[8 * v33];
          *v42 = (uint64_t)v23;
          v41 = (char *)(v42 + 1);
          if (v16 != (char *)v17)
          {
            do
            {
              v43 = *((_QWORD *)v16 - 1);
              v16 -= 8;
              *--v42 = v43;
            }
            while (v16 != (char *)v17);
            goto LABEL_80;
          }
          goto LABEL_81;
        }
      }
LABEL_55:
      *(_QWORD *)v16 = v23;
      v41 = v16 + 8;
LABEL_83:
      v13 = (v13 + 1);
      v7 = *(_QWORD *)(v6 + 96);
      v14 = v13;
      v16 = v41;
      if (v7 <= v13)
        goto LABEL_94;
    }
  }
  v17 = 0;
  v41 = 0;
LABEL_94:
  v51 = *(_QWORD *)(v6 + 24);
  v52 = (v41 - (char *)v17) >> 3;
  v53 = (v52 + 1);
  v84 = 257;
  v54 = operator new(32 * v53 + 80);
  v55 = (uint64_t)&v54[4 * v53];
  v56 = v53 & 0x7FFFFFF;
  *(_DWORD *)(v55 + 20) = *(_DWORD *)(v55 + 20) & 0x38000000 | v53 & 0x7FFFFFF;
  if ((_DWORD)v52 == -1)
  {
    v57 = 0;
  }
  else
  {
    do
    {
      *v54 = 0;
      v54[1] = 0;
      v54[2] = 0;
      v54[3] = v55;
      v54 += 4;
    }
    while (v54 != (_QWORD *)v55);
    v57 = *(_DWORD *)(v55 + 20) & 0xC0000000;
  }
  *(_QWORD *)v55 = **(_QWORD **)(v51 + 16);
  *(_QWORD *)(v55 + 8) = 0;
  *(_BYTE *)(v55 + 16) = 84;
  *(_BYTE *)(v55 + 17) = 0;
  *(_WORD *)(v55 + 18) = 0;
  *(_DWORD *)(v55 + 20) = v57 | v56;
  *(_OWORD *)(v55 + 24) = 0u;
  v58 = v55 + 24;
  *(_OWORD *)(v55 + 40) = 0u;
  *(_DWORD *)(v55 + 56) = 0;
  if (v5)
  {
    v72 = *(_QWORD *)(v5 + 40);
    v73 = (uint64_t *)(v5 + 24);
    *(_QWORD *)(v55 + 40) = v72;
    *(_WORD *)(v72 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(v55 + 23) & 0x10) != 0)
    {
      v75 = *(_QWORD *)(v72 + 56);
      if (v75)
      {
        v76 = *(llvm::ValueSymbolTable **)(v75 + 104);
        if (v76)
          llvm::ValueSymbolTable::reinsertValue(v76, (llvm::Value *)v55);
      }
    }
    v74 = *v73;
    *(_QWORD *)(v55 + 24) = *v73;
    *(_QWORD *)(v55 + 32) = v73;
    *(_QWORD *)(v74 + 8) = v58;
    *v73 = v58;
    v56 = *(_DWORD *)(v55 + 20) & 0x7FFFFFF;
  }
  *(_QWORD *)(v55 + 64) = 0;
  *(_QWORD *)(v55 + 72) = v51;
  sub_1C5382FD4((uint64_t)&v85, v17, &v17[v52], v55 - 32 * v56);
  v59 = (_QWORD *)(v55 - 32);
  if (*(_QWORD *)(v55 - 32))
  {
    **(_QWORD **)(v55 - 16) = *(_QWORD *)(v55 - 24);
    v77 = *(_QWORD *)(v55 - 24);
    if (v77)
      *(_QWORD *)(v77 + 16) = *(_QWORD *)(v55 - 16);
  }
  *v59 = v6;
  if (v6)
  {
    v62 = *(_QWORD *)(v6 + 8);
    v61 = (_QWORD *)(v6 + 8);
    v60 = v62;
    *(_QWORD *)(v55 - 24) = v62;
    if (v62)
      *(_QWORD *)(v60 + 16) = v55 - 24;
    *(_QWORD *)(v55 - 16) = v61;
    *v61 = v59;
  }
  llvm::CallBase::populateBundleOperandInfos(v55, 0, 0, v52);
  llvm::Value::setName((uint64_t ***)v55, (uint64_t)&v82);
  v63 = (llvm::ValueAsMetadata *)*((_QWORD *)a2 + 25);
  v64 = *((_QWORD *)a2 + 1);
  if (*(llvm::ValueAsMetadata **)(v64 + 16) == v63)
    *(_QWORD *)(v64 + 16) = v55;
  v65 = *((_QWORD *)a2 + 2);
  if (*(llvm::ValueAsMetadata **)(v65 + 16) == v63)
    *(_QWORD *)(v65 + 16) = v55;
  v66 = (unsigned __int8 *)*((_QWORD *)v63 + 6);
  v81 = v66;
  if (v66)
    llvm::MetadataTracking::track((uint64_t)&v81, v66, 2);
  v67 = *(unsigned __int8 **)(v55 + 48);
  if (v67)
    llvm::MetadataTracking::untrack(v55 + 48, v67);
  v68 = v81;
  *(_QWORD *)(v55 + 48) = v81;
  if (v68)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v81, v68, v55 + 48);
    v81 = 0;
  }
  llvm::Value::doRAUW(v63, (llvm::Value *)v55, (llvm::Value *)1);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v63 + 5) + 40, (uint64_t ***)v63);
  v69 = *((_QWORD *)v63 + 3);
  v70 = (_QWORD *)*((_QWORD *)v63 + 4);
  *v70 = v69;
  *(_QWORD *)(v69 + 8) = v70;
  *((_QWORD *)v63 + 3) = 0;
  *((_QWORD *)v63 + 4) = 0;
  llvm::Value::deleteValue(v63);
  *((_QWORD *)a2 + 25) = v55;
  if (*(_BYTE *)(v4 + 268))
    *(_QWORD *)(v55 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v55 + 64), **(uint64_t ***)v55, *(_DWORD *)(v4 + 264) + 1, 63);
  if (v17)
    operator delete(v17);
  return v55;
}

void replaceConstants(llvm::OutlinableRegion *a1)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  llvm::Value *v10;
  llvm::Value *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;

  v1 = *((_QWORD *)a1 + 17);
  v2 = *((unsigned int *)a1 + 38);
  v3 = (unsigned int *)(v1 + 16 * v2);
  if (*((_DWORD *)a1 + 36))
  {
    if ((_DWORD)v2)
    {
      v4 = 16 * v2;
      v5 = (unsigned int *)*((_QWORD *)a1 + 17);
      while (*v5 >= 0xFFFFFFFE)
      {
        v5 += 4;
        v4 -= 16;
        if (!v4)
          goto LABEL_6;
      }
    }
    else
    {
      v5 = (unsigned int *)*((_QWORD *)a1 + 17);
    }
  }
  else
  {
LABEL_6:
    v5 = (unsigned int *)(v1 + 16 * v2);
  }
  v6 = (unsigned int *)(v1 + 16 * v2);
  if (v5 != v6)
  {
    v7 = *((_QWORD *)a1 + 32);
    do
    {
      v8 = *v5;
      v9 = *(_QWORD *)(v7 + 56);
      v10 = (llvm::Value *)*((_QWORD *)v5 + 1);
      if ((*(_WORD *)(v9 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments(*(llvm::Function **)(v7 + 56));
      v11 = (llvm::Value *)(*(_QWORD *)(v9 + 88) + 40 * v8);
      v14 = v9;
      llvm::Value::replaceUsesWithIf(v10, v11, (unsigned int (*)(uint64_t, uint64_t))sub_1C56FC1CC, (uint64_t)&v14);
      v12 = v5 + 4;
      while (v12 != v3)
      {
        v13 = *v12;
        v12 += 4;
        if (v13 <= 0xFFFFFFFD)
        {
          v5 = v12 - 4;
          goto LABEL_17;
        }
      }
      v5 = v3;
LABEL_17:
      ;
    }
    while (v5 != v6);
  }
}

uint64_t findDuplicateOutputBlock(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Instruction *v23;
  unsigned __int8 *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  unsigned int v31;
  uint64_t v32;

  v2 = *a2;
  v29 = a2[1];
  if (*a2 == v29)
  {
LABEL_44:
    v26 = 0;
    v27 = 0;
    return v27 | v26;
  }
  v4 = 0;
LABEL_3:
  v5 = *(unsigned int *)(v2 + 16);
  v6 = *(_QWORD *)v2 + 16 * v5;
  v31 = v4;
  if (*(_DWORD *)(v2 + 8))
  {
    if (*(_DWORD *)(v2 + 16))
    {
      v7 = 16 * v5;
      v8 = *(uint64_t **)v2;
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 2;
        v7 -= 16;
        if (!v7)
          goto LABEL_8;
      }
    }
    else
    {
      v8 = *(uint64_t **)v2;
    }
  }
  else
  {
LABEL_8:
    v8 = (uint64_t *)(*(_QWORD *)v2 + 16 * v5);
  }
  v9 = *(_QWORD *)v2 + 16 * v5;
  if (v8 == (uint64_t *)v9)
    goto LABEL_45;
  v10 = 0;
  do
  {
    v11 = *v8;
    v32 = 0;
    if (sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v11, &v32))
      v12 = v32 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
    else
      v12 = 1;
    if (v12)
      goto LABEL_43;
    v13 = 0;
    v14 = v8[1];
    v15 = *(_QWORD *)(v32 + 8);
    v16 = v14 + 40;
    v17 = -2;
    v18 = v14 + 40;
    do
    {
      v19 = v13;
      v18 = *(_QWORD *)(v18 + 8);
      ++v17;
      ++v13;
    }
    while (v18 != v16);
    v20 = v15 + 40;
    do
    {
      v20 = *(_QWORD *)(v20 + 8);
      --v19;
    }
    while (v20 != v15 + 40);
    if (v19)
    {
LABEL_43:
      v4 = v31 + 1;
      v2 += 24;
      if (v2 == v29)
        goto LABEL_44;
      goto LABEL_3;
    }
    v21 = *(_QWORD *)(v14 + 48);
    if (v21 == v16)
      goto LABEL_36;
    v30 = v10;
    v22 = *(_QWORD *)(v15 + 48);
    while (1)
    {
      if (v21)
        v23 = (llvm::Instruction *)(v21 - 24);
      else
        v23 = 0;
      if (*((_BYTE *)v23 + 16) == 30)
        goto LABEL_33;
      v24 = v22 ? (unsigned __int8 *)(v22 - 24) : 0;
      if (!llvm::Instruction::isIdenticalToWhenDefined(v23, (const llvm::Instruction *)v24)
        || (v24[17] ^ *((unsigned __int8 *)v23 + 17)) > 1)
      {
        break;
      }
      v22 = *(_QWORD *)(v22 + 8);
LABEL_33:
      v21 = *(_QWORD *)(v21 + 8);
      if (v21 == v16)
      {
        v10 = v30;
        goto LABEL_36;
      }
    }
    v10 = 1;
LABEL_36:
    v25 = v8 + 2;
    v8 = (uint64_t *)v6;
    if (v25 != (uint64_t *)v6)
    {
      v8 = v25;
      while ((*v8 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v8 += 2;
        if (v8 == (uint64_t *)v6)
        {
          v8 = (uint64_t *)v6;
          break;
        }
      }
    }
  }
  while (v8 != (uint64_t *)v9);
  if ((v10 & 1) != 0)
    goto LABEL_43;
LABEL_45:
  v27 = v31;
  v26 = 0x100000000;
  return v27 | v26;
}

uint64_t createSwitchStatement(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  llvm::BasicBlock *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  llvm::Value *v27;
  int v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  const llvm::APInt *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::BasicBlock *v39;
  uint64_t v40;
  llvm::ConstantInt *v41;
  unint64_t v42;
  int v43;
  llvm::ConstantInt *v44;
  _QWORD *v45;
  unsigned __int8 *v46;
  llvm::Instruction *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  llvm::BasicBlock *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t ***v56;
  uint64_t ***v57;
  uint64_t v58;
  uint64_t **v59;
  uint64_t **v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t **v72;
  uint64_t *v73;
  uint64_t *i;
  const char *v75;
  __int16 v76;
  uint64_t *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;

  v72 = (uint64_t **)result;
  if (*(_DWORD *)(a2 + 128) < 2u)
  {
    v10 = *a4;
    if (a4[1] - *a4 == 24)
    {
      MEMORY[0x1CAA32FB4](0, 8);
      v12 = *(unsigned int *)(v10 + 16);
      if ((_DWORD)v12)
      {
        v13 = (char *)operator new(16 * v12, (std::align_val_t)8uLL);
        v14 = *(_DWORD *)(v10 + 8);
        memcpy(v13, *(const void **)v10, 16 * v12);
        v15 = (uint64_t *)&v13[16 * v12];
        if (v14)
        {
          v16 = 0;
          while ((*(_QWORD *)&v13[v16] | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v16 += 16;
            if (16 * v12 == v16)
              goto LABEL_14;
          }
          v17 = (uint64_t *)&v13[v16];
        }
        else
        {
LABEL_14:
          v17 = (uint64_t *)&v13[16 * v12];
        }
      }
      else
      {
        v12 = 0;
        v15 = 0;
        v13 = 0;
        v17 = 0;
      }
      v49 = (uint64_t *)&v13[16 * v12];
      for (i = v49; ; v49 = i)
      {
        if (v17 == v49)
          JUMPOUT(0x1CAA32FB4);
        v50 = *v17;
        v77 = 0;
        v51 = sub_1C6144BDC(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v50, &v77);
        v52 = (uint64_t)v77;
        if (!v51)
          v52 = *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16);
        v53 = (llvm::BasicBlock *)v17[1];
        v55 = (_QWORD *)((char *)v53 + 40);
        v54 = (_QWORD *)*((_QWORD *)v53 + 5);
        if (v54 == (_QWORD *)((char *)v53 + 40))
        {
          v57 = 0;
        }
        else
        {
          if (v54)
            v56 = (uint64_t ***)(v54 - 3);
          else
            v56 = 0;
          if (*((unsigned __int8 *)v56 + 16) - 29 >= 0xB)
            v57 = 0;
          else
            v57 = v56;
        }
        v58 = *(_QWORD *)(v52 + 8);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v57[5] + 5), v57);
        v59 = v57[3];
        v60 = v57[4];
        *v60 = (uint64_t *)v59;
        v59[1] = (uint64_t *)v60;
        v57[3] = 0;
        v57[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v57);
        v61 = *(_QWORD *)(v58 + 40);
        if (v61 == v58 + 40)
        {
          v63 = 0;
        }
        else
        {
          if (v61)
            v62 = v61 - 24;
          else
            v62 = 0;
          if (*(unsigned __int8 *)(v62 + 16) - 29 >= 0xB)
            v63 = 0;
          else
            v63 = (_QWORD *)v62;
        }
        v64 = (_QWORD *)*((_QWORD *)v53 + 6);
        if (v64 != v55)
        {
          do
          {
            v65 = (_QWORD *)v64[1];
            if (v64)
              v66 = v64 - 3;
            else
              v66 = 0;
            llvm::Instruction::moveBefore(v66, v58, (uint64_t *)(v58 + 40));
            v64 = v65;
          }
          while (v65 != v55);
        }
        llvm::Instruction::moveBefore(v63, v58, (uint64_t *)(v58 + 40));
        llvm::BasicBlock::eraseFromParent(v53);
        v67 = v17 + 2;
        v17 = v15;
        if (v67 != v15)
        {
          v17 = v67;
          do
          {
            if ((*v17 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_96;
            v17 += 2;
          }
          while (v17 != v15);
          v17 = v15;
        }
LABEL_96:
        ;
      }
    }
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 56);
    v77 = 0;
    v78 = 0;
    v79 = 0;
    v75 = "final_block";
    v76 = 259;
    sub_1C56F466C(a2 + 72, (uint64_t)&v77, (_QWORD **)v6, (uint64_t)&v75);
    v70 = a4;
    v71 = v77;
    v7 = &v77[2 * v79];
    if ((_DWORD)v78)
    {
      if (v79)
      {
        v8 = 16 * v79;
        v9 = v77;
        while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v9 += 2;
          v8 -= 16;
          if (!v8)
            goto LABEL_7;
        }
      }
      else
      {
        v9 = v77;
      }
    }
    else
    {
LABEL_7:
      v9 = &v77[2 * v79];
    }
    v69 = &v77[2 * v79];
    if (v9 != v69)
    {
      v68 = v6;
      do
      {
        v18 = *v9;
        v80 = 0;
        v19 = sub_1C6144BDC(*(_QWORD *)(a2 + 72), *(_DWORD *)(a2 + 88), v18, &v80);
        v20 = 0;
        if (v19)
          v21 = v80;
        else
          v21 = *(_QWORD *)(a2 + 72) + 16 * *(unsigned int *)(a2 + 88);
        v73 = (uint64_t *)v21;
        v22 = *(llvm::BasicBlock **)(v21 + 8);
        v23 = (_QWORD *)*((_QWORD *)v22 + 5);
        if (v23 != (_QWORD *)((char *)v22 + 40))
        {
          if (v23)
            v24 = v23 - 3;
          else
            v24 = 0;
          if (*((unsigned __int8 *)v24 + 16) - 29 >= 0xB)
            v20 = 0;
          else
            v20 = v24;
        }
        v25 = (uint64_t *)v9[1];
        llvm::Instruction::moveBefore(v20, (uint64_t)v25, v25 + 5);
        v26 = *(_QWORD *)(v6 + 96);
        if ((*(_WORD *)(v6 + 18) & 1) != 0)
          llvm::Function::BuildLazyArguments((llvm::Function *)v6);
        v27 = (llvm::Value *)(*(_QWORD *)(v6 + 88) + 40 * (v26 - 1));
        v28 = -1431655765 * ((unint64_t)(v70[1] - *v70) >> 3);
        v29 = operator new(0x48uLL);
        v30 = v29 + 2;
        v29[7] = v29[7] & 0x38000000 | 0x40000000;
        *(_QWORD *)v29 = 0;
        llvm::SwitchInst::SwitchInst((llvm::SwitchInst *)(v29 + 2), v27, (llvm::BasicBlock *)v25, v28, v22);
        v32 = *v70;
        v31 = v70[1];
        if (*v70 != v31)
        {
          v33 = 0;
          do
          {
            v34 = *v73;
            v80 = 0;
            if (sub_1C6144BDC(*(_QWORD *)v32, *(_DWORD *)(v32 + 16), v34, &v80))
            {
              v36 = v80;
              v37 = *(unsigned int *)(v32 + 16);
              v38 = *(_QWORD *)v32;
            }
            else
            {
              v38 = *(_QWORD *)v32;
              v37 = *(unsigned int *)(v32 + 16);
              v36 = *(_QWORD *)v32 + 16 * v37;
            }
            if (v36 != v38 + 16 * v37)
            {
              v39 = *(llvm::BasicBlock **)(v36 + 8);
              v40 = **v72;
              v41 = *(llvm::ConstantInt **)(v40 + 1960);
              v42 = *(unsigned int *)(v40 + 1968);
              v81 = v42 >> 8;
              if (v42 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v80, v33, 0);
              }
              else
              {
                if (v42 <= 0xFF)
                  v43 = 0;
                else
                  v43 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v42);
                v80 = v43 & v33;
              }
              v44 = llvm::ConstantInt::get(v41, (llvm::LLVMContext *)&v80, v35);
              if (v81 >= 0x41 && v80)
                MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
              llvm::SwitchInst::addCase(v30, v44, v39);
              v45 = (_QWORD *)*((_QWORD *)v39 + 5);
              if (v45 == (_QWORD *)((char *)v39 + 40))
              {
                v47 = 0;
              }
              else
              {
                if (v45)
                  v46 = (unsigned __int8 *)(v45 - 3);
                else
                  v46 = 0;
                if (v46[16] - 29 >= 0xB)
                  v47 = 0;
                else
                  v47 = (llvm::Instruction *)v46;
              }
              llvm::Instruction::setSuccessor(v47, 0, (llvm::BasicBlock *)v25);
              ++v33;
            }
            v32 += 24;
          }
          while (v32 != v31);
        }
        v48 = v9 + 2;
        v9 = v7;
        v6 = v68;
        if (v48 != v7)
        {
          v9 = v48;
          while ((*v9 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v9 += 2;
            if (v9 == v7)
            {
              v9 = v7;
              break;
            }
          }
        }
      }
      while (v9 != v69);
    }
    return MEMORY[0x1CAA32FB4](v71, 8);
  }
  return result;
}

void sub_1C56F466C(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  const std::nothrow_t *v20;
  unint64_t v21;
  uint64_t *v22;
  BOOL v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t *v26;
  const char **v27;
  const char *v28;
  _QWORD *v29;
  __int128 v30;
  char v31;
  char v32;
  char v33;
  unint64_t v34;
  const char **v35;
  const char *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _OWORD v43[2];
  __int16 v44;
  const char *v45;
  _QWORD v46[3];
  __int16 v47;
  _QWORD v48[4];
  char v49;
  char v50;

  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(_QWORD *)a1 + 16 * v4;
  if (*(_DWORD *)(a1 + 8))
  {
    if ((_DWORD)v4)
    {
      v6 = 16 * v4;
      v7 = *(_QWORD **)a1;
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6)
          goto LABEL_6;
      }
    }
    else
    {
      v7 = *(_QWORD **)a1;
    }
  }
  else
  {
LABEL_6:
    v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v4);
  }
  v8 = *(_QWORD *)a1 + 16 * v4;
  if (v7 == (_QWORD *)v8)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    do
    {
      if (v10 >= v11)
      {
        v12 = (v10 - v9) >> 3;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          abort();
        if ((v11 - v9) >> 2 > v13)
          v13 = (v11 - v9) >> 2;
        if ((unint64_t)(v11 - v9) >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (v14)
        {
          if (v14 >> 61)
            sub_1C4764EE4();
          v15 = (char *)operator new(8 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v12];
        *(_QWORD *)v16 = *v7;
        v17 = v16 + 8;
        while (v10 != v9)
        {
          v18 = *((_QWORD *)v10 - 1);
          v10 -= 8;
          *((_QWORD *)v16 - 1) = v18;
          v16 -= 8;
        }
        v11 = &v15[8 * v14];
        if (v9)
          operator delete(v9);
        v9 = v16;
        v10 = v17;
      }
      else
      {
        *(_QWORD *)v10 = *v7;
        v10 += 8;
      }
      v19 = v7 + 2;
      v7 = (_QWORD *)v5;
      if (v19 != (_QWORD *)v5)
      {
        v7 = v19;
        while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v7 += 2;
          if (v7 == (_QWORD *)v5)
          {
            v7 = (_QWORD *)v5;
            break;
          }
        }
      }
    }
    while (v7 != (_QWORD *)v8);
  }
  if (v10 - v9 < 1025)
  {
LABEL_40:
    sub_1C56FA034((uint64_t *)v9, v10, (v10 - v9) >> 3, 0, 0);
  }
  else
  {
    v20 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v21 = (v10 - v9) >> 3;
    while (1)
    {
      v22 = (uint64_t *)operator new(8 * v21, v20);
      if (v22)
        break;
      v23 = v21 > 1;
      v21 >>= 1;
      if (!v23)
        goto LABEL_40;
    }
    v24 = v22;
    sub_1C56FA034((uint64_t *)v9, v10, (v10 - v9) >> 3, v22, v21);
    operator delete(v24);
  }
  if (v9 != v10)
  {
    v25 = 0;
    v26 = (uint64_t *)(a3 + 9);
    v27 = (const char **)v9;
    while (1)
    {
      v28 = *v27;
      v29 = (_QWORD *)**a3;
      v44 = *(_WORD *)(a4 + 32);
      v30 = *(_OWORD *)(a4 + 16);
      v43[0] = *(_OWORD *)a4;
      v43[1] = v30;
      v31 = v44;
      if (v44 == 1)
        break;
      if ((_BYTE)v44)
      {
        v36 = *(const char **)&v43[0];
        v32 = 2;
        if (HIBYTE(v44) != 1)
        {
          v31 = 2;
          v36 = (const char *)v43;
        }
        v45 = v36;
        v46[0] = *((_QWORD *)&v43[0] + 1);
        v46[1] = "_";
        LOBYTE(v47) = v31;
        HIBYTE(v47) = 3;
        v34 = v8 & 0xFFFFFFFF00000000;
        v8 = v8 & 0xFFFFFFFF00000000 | v25;
        v35 = &v45;
        goto LABEL_51;
      }
      v32 = 0;
      v47 = 256;
      v8 &= 0xFFFFFFFF00000000;
      v33 = 1;
LABEL_52:
      ++v25;
      v49 = v32;
      v50 = v33;
      v37 = operator new();
      *(_QWORD *)v37 = *v29 + 1600;
      *(_QWORD *)(v37 + 8) = 0;
      v38 = *(_DWORD *)(v37 + 20) & 0xC0000000;
      *(_DWORD *)(v37 + 16) = 22;
      *(_DWORD *)(v37 + 20) = v38;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0;
      *(_QWORD *)(v37 + 40) = v37 + 40;
      *(_QWORD *)(v37 + 48) = v37 + 40;
      *(_QWORD *)(v37 + 56) = 0;
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v26, (_QWORD *)v37);
      v39 = *v26;
      *(_QWORD *)(v37 + 32) = v26;
      *(_QWORD *)(v37 + 24) = v39;
      *(_QWORD *)(v39 + 8) = v37 + 24;
      *v26 = v37 + 24;
      llvm::Value::setName((uint64_t ***)v37, (uint64_t)v48);
      v45 = v28;
      v46[0] = v37;
      sub_1C6187718((uint64_t)v48, a2, (uint64_t *)&v45, v46);
      if (++v27 == (const char **)v10)
        goto LABEL_53;
    }
    v45 = "_";
    v47 = 259;
    v8 = v8 & 0xFFFFFFFF00000000 | v25;
    v32 = 3;
    v34 = v46[0];
    v35 = (const char **)"_";
LABEL_51:
    v48[0] = v35;
    v48[1] = v34;
    v33 = 8;
    v48[2] = v8;
    goto LABEL_52;
  }
LABEL_53:
  if (v9)
    operator delete(v9);
}

void llvm::IROutliner::deduplicateExtractedSections(llvm::IROutliner *a1, llvm::Module *a2, OutlinableGroup *a3, char **a4, unsigned int *a5)
{
  unint64_t v5;
  uint64_t v6;
  llvm::IROutliner *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ***v11;
  llvm::BasicBlock *v12;
  llvm::BasicBlock *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  _QWORD *v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned __int8 **v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  _QWORD ***v31;
  _QWORD *v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned __int8 *Impl;
  unsigned __int8 **v47;
  unsigned __int8 *v48;
  unsigned __int8 *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  llvm::LLVMContext ***v65;
  _QWORD **v66;
  const llvm::APInt *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *i;
  uint64_t v75;
  uint64_t *v76;
  int v77;
  uint64_t v78;
  llvm::BasicBlock *v79;
  llvm::BasicBlock *v80;
  _DWORD *v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char **v93;
  const llvm::Function *v94;
  uint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD **v98;
  const llvm::APInt *v99;
  char **v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t DuplicateOutputBlock;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *j;
  uint64_t v125;
  llvm::BasicBlock *v126;
  int v127;
  uint64_t v128;
  llvm::BasicBlock *v129;
  _DWORD *v130;
  uint64_t *v131;
  char *v132;
  char *v133;
  void *v134;
  uint64_t v135;
  llvm::IROutliner *v136;
  uint64_t v138;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v146;
  _QWORD v147[4];
  __int16 v148;
  void *__p;
  char *v150;
  unint64_t v151;
  unsigned __int8 *v152;
  llvm::BasicBlock *v153;
  int v154;
  uint64_t v155[2];
  int v156;
  __int16 v157;
  uint64_t *v158;
  llvm::BasicBlock *v159;
  unsigned int v160;
  unsigned __int8 *v161[2];

  v6 = (uint64_t)a3;
  v7 = a1;
  llvm::IROutliner::createFunction(a1, a2, a3, *a5);
  __p = 0;
  v150 = 0;
  v151 = 0;
  v8 = **(_QWORD **)v6;
  v9 = *(_QWORD *)(v8 + 208);
  v140 = v6 + 72;
  v141 = v6;
  v10 = *(_QWORD *)(v9 + 80);
  v143 = v9 + 72;
  v138 = v8;
  if (v10 != v9 + 72)
  {
    v11 = *(uint64_t ****)(v6 + 56);
    v136 = v7;
    v142 = (uint64_t *)(v11 + 9);
    v146 = (v11 >> 4) ^ (v11 >> 9);
    while (1)
    {
      v12 = (llvm::BasicBlock *)(v10 - 24);
      v34 = v10 == 0;
      v10 = *(_QWORD *)(v10 + 8);
      if (v34)
        v13 = 0;
      else
        v13 = v12;
      llvm::BasicBlock::removeFromParent(v13);
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v142, v13);
      v14 = *v142;
      *((_QWORD *)v13 + 4) = v142;
      *((_QWORD *)v13 + 3) = v14;
      *(_QWORD *)(v14 + 8) = (char *)v13 + 24;
      *v142 = (uint64_t)v13 + 24;
      v16 = (_QWORD *)((char *)v13 + 40);
      v15 = (_QWORD *)*((_QWORD *)v13 + 5);
      if (v15 != (_QWORD *)((char *)v13 + 40))
      {
        v17 = v15 - 3;
        if (!v15)
          v17 = 0;
        v18 = *((unsigned __int8 *)v17 + 16) - 40;
        if (v18 < 0xFFFFFFF5)
          v17 = 0;
        if (v15)
        {
          if (*((_BYTE *)v17 + 16) == 29 && v18 >= 0xFFFFFFF5)
          {
            v56 = *((_DWORD *)v17 + 5) & 0x7FFFFFF;
            if ((_DWORD)v56)
              v57 = v17[-4 * v56];
            else
              v57 = 0;
            v158 = (uint64_t *)v57;
            v159 = v13;
            sub_1C6187718((uint64_t)v155, v140, (uint64_t *)&v158, &v159);
          }
        }
      }
      v20 = (_QWORD *)*((_QWORD *)v13 + 6);
      if (v20 != v16)
        break;
LABEL_85:
      if (v10 == v143)
      {
        v8 = v138;
        v9 = *(_QWORD *)(v138 + 208);
        v7 = v136;
        goto LABEL_91;
      }
    }
    v144 = v10;
    v21 = 0;
    v22 = 0;
    v5 = 0;
    while (1)
    {
      if (v20)
        v23 = (uint64_t)(v20 - 3);
      else
        v23 = 0;
      if (*(_BYTE *)(v23 + 16) == 84)
      {
        if (sub_1C4D99D08(v23))
        {
          if (v5 >= (unint64_t)v21)
          {
            v39 = (uint64_t)(v5 - (_QWORD)v22) >> 3;
            v40 = v39 + 1;
            if ((unint64_t)(v39 + 1) >> 61)
              goto LABEL_199;
            if ((v21 - (char *)v22) >> 2 > v40)
              v40 = (v21 - (char *)v22) >> 2;
            if ((unint64_t)(v21 - (char *)v22) >= 0x7FFFFFFFFFFFFFF8)
              v41 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v41 = v40;
            if (v41)
            {
              if (v41 >> 61)
                goto LABEL_200;
              v42 = (char *)operator new(8 * v41);
            }
            else
            {
              v42 = 0;
            }
            v43 = (uint64_t *)&v42[8 * v39];
            *v43 = v23;
            v44 = v43 + 1;
            while ((uint64_t *)v5 != v22)
            {
              v45 = *(_QWORD *)(v5 - 8);
              v5 -= 8;
              *--v43 = v45;
            }
            v21 = &v42[8 * v41];
            if (v22)
              operator delete(v22);
            v5 = (unint64_t)v44;
            v22 = v43;
          }
          else
          {
            *(_QWORD *)v5 = v23;
            v5 += 8;
          }
          goto LABEL_29;
        }
        if ((*((_BYTE *)v11 + 23) & 0x20) != 0)
        {
          v25 = ***v11;
          v155[0] = (uint64_t)v11;
          v26 = *(_DWORD *)(v25 + 2496);
          if (v26)
          {
            v27 = *(_QWORD *)(v25 + 2480);
            v28 = v26 - 1;
            v29 = v28 & v146;
            v30 = (_QWORD *)(v27 + 40 * (v28 & v146));
            v31 = (_QWORD ***)*v30;
            if ((uint64_t ***)*v30 != v11)
            {
              v32 = 0;
              v33 = 1;
              while (v31 != (_QWORD ***)-4096)
              {
                if (v32)
                  v34 = 0;
                else
                  v34 = v31 == (_QWORD ***)-8192;
                if (v34)
                  v32 = v30;
                v35 = v29 + v33++;
                v29 = v35 & v28;
                v30 = (_QWORD *)(v27 + 40 * v29);
                v31 = (_QWORD ***)*v30;
                if ((uint64_t ***)*v30 == v11)
                  goto LABEL_42;
              }
              if (v32)
                v50 = v32;
              else
                v50 = v30;
LABEL_77:
              v30 = sub_1C541AB24(v25 + 2480, (uint64_t)v155, v155, v50);
              v51 = v155[0];
              v30[4] = 0;
              v30[3] = 0;
              *v30 = v51;
              v30[1] = v30 + 3;
              v30[2] = 0x100000000;
            }
LABEL_42:
            v36 = *((unsigned int *)v30 + 4);
            if ((_DWORD)v36)
            {
              v37 = (uint64_t *)(v30[1] + 8);
              v38 = 16 * v36;
              while (*((_DWORD *)v37 - 2))
              {
                v37 += 2;
                v38 -= 16;
                if (!v38)
                  goto LABEL_29;
              }
              if (*v37)
              {
                Impl = (unsigned __int8 *)llvm::DILocation::getImpl(**v11, 0, 0, *v37, 0, 0, 0, 1);
                v161[0] = Impl;
                if (Impl)
                  llvm::MetadataTracking::track((uint64_t)v161, Impl, 2);
                v47 = (unsigned __int8 **)(v23 + 48);
                if (v161 == v47)
                {
                  if (v161[0])
                    llvm::MetadataTracking::untrack((uint64_t)v161, v161[0]);
                }
                else
                {
                  if (*v47)
                    llvm::MetadataTracking::untrack((uint64_t)v47, *v47);
                  v48 = v161[0];
                  *v47 = v161[0];
                  if (v48)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)v161, v48, (uint64_t)v47);
                    v161[0] = 0;
                  }
                }
              }
            }
            goto LABEL_29;
          }
          v50 = 0;
          goto LABEL_77;
        }
      }
      else
      {
        v152 = 0;
        v24 = (unsigned __int8 **)(v23 + 48);
        if (&v152 != (unsigned __int8 **)(v23 + 48))
        {
          if (*v24)
          {
            llvm::MetadataTracking::untrack(v23 + 48, *v24);
            v49 = v152;
            *v24 = v152;
            if (v49)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v152, v49, v23 + 48);
              v152 = 0;
            }
          }
          else
          {
            *v24 = 0;
          }
        }
        v155[0] = (uint64_t)v11;
        llvm::updateLoopMetadataDebugLocations(v23, (uint64_t (*)(uint64_t))sub_1C56FB2AC, (uint64_t)v155);
      }
LABEL_29:
      v20 = (_QWORD *)v20[1];
      if (v20 == v16)
      {
        v52 = v22;
        while (v52 != (uint64_t *)v5)
        {
          v53 = *v52++;
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v53 + 40) + 40, (uint64_t ***)v53);
          v54 = *(_QWORD *)(v53 + 24);
          v55 = *(_QWORD **)(v53 + 32);
          *v55 = v54;
          *(_QWORD *)(v54 + 8) = v55;
          *(_QWORD *)(v53 + 24) = 0;
          *(_QWORD *)(v53 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v53);
        }
        v6 = v141;
        v10 = v144;
        if (v22)
          operator delete(v22);
        goto LABEL_85;
      }
    }
  }
LABEL_91:
  v58 = (uint64_t)v7 + 48;
  v59 = *(_QWORD *)(v9 + 112);
  if (v59)
  {
    if (*(_DWORD *)(v59 + 8))
    {
      v60 = *(_QWORD *)(v59 + 40);
      if (v60)
      {
        v61 = *(unsigned int *)(v60 + 8);
        if ((_DWORD)v61)
        {
          v62 = (uint64_t *)(v60 + 48);
          v63 = 8 * v61;
          do
          {
            v64 = *v62++;
            v65 = *(llvm::LLVMContext ****)(v6 + 56);
            v65[14] = (llvm::LLVMContext **)llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v65 + 14), **v65, -1, v64);
            v63 -= 8;
          }
          while (v63);
        }
      }
    }
  }
  v158 = 0;
  v159 = 0;
  v160 = 0;
  v66 = *(_QWORD ***)(v6 + 56);
  v155[0] = (uint64_t)"output_block_0";
  v157 = 259;
  sub_1C56F466C(v140, (uint64_t)&v158, v66, (uint64_t)v155);
  *(_DWORD *)(v8 + 28) = 0;
  sub_1C56F561C(v8, (uint64_t)&v158, v58, 1);
  replaceConstants((llvm::OutlinableRegion *)v8);
  if ((sub_1C56FB094((uint64_t)&v158, v8) & 1) == 0)
  {
    v152 = 0;
    v153 = 0;
    v154 = 0;
    v68 = v150;
    if ((unint64_t)v150 >= v151)
    {
      v70 = sub_1C56FB418((uint64_t *)&__p, (uint64_t)&v152);
      v69 = (uint64_t)v152;
    }
    else
    {
      v69 = 0;
      *(_QWORD *)v150 = 0;
      *((_QWORD *)v68 + 1) = 0;
      v70 = (uint64_t)(v68 + 24);
      *((_DWORD *)v68 + 4) = 0;
    }
    v150 = (char *)v70;
    MEMORY[0x1CAA32FB4](v69, 8);
    v71 = &v158[2 * v160];
    if ((_DWORD)v159)
    {
      if (v160)
      {
        v72 = 16 * v160;
        v73 = v158;
        while ((*v73 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v73 += 2;
          v72 -= 16;
          if (!v72)
            goto LABEL_106;
        }
      }
      else
      {
        v73 = v158;
      }
    }
    else
    {
LABEL_106:
      v73 = &v158[2 * v160];
    }
    for (i = &v158[2 * v160]; v73 != i; v8 = v138)
    {
      v76 = v73 + 2;
      v75 = *v73;
      v152 = 0;
      v77 = sub_1C6144BDC(*(_QWORD *)(v6 + 72), *(_DWORD *)(v6 + 88), v75, &v152);
      v78 = (uint64_t)v152;
      if (!v77)
        v78 = *(_QWORD *)(v6 + 72) + 16 * *(unsigned int *)(v6 + 88);
      v79 = *(llvm::BasicBlock **)(v78 + 8);
      v80 = (llvm::BasicBlock *)v73[1];
      v81 = operator new(0x60uLL);
      v81[13] = v81[13] & 0x38000000 | 1;
      *(_QWORD *)v81 = 0;
      *((_QWORD *)v81 + 1) = 0;
      *((_QWORD *)v81 + 2) = 0;
      *((_QWORD *)v81 + 3) = v81 + 8;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v81 + 8), v79, v80);
      sub_1C6187718((uint64_t)&v152, (uint64_t)(v150 - 24), v73, v73 + 1);
      v73 = v71;
      if (v76 != v71)
      {
        v73 = v76;
        while ((*v73 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v73 += 2;
          if (v73 == v71)
          {
            v73 = v71;
            break;
          }
        }
      }
      v6 = v141;
    }
  }
  *(_QWORD *)(v8 + 200) = replaceCalledFunction((uint64_t **)a2, (llvm::OutlinableRegion *)v8, v67);
  v83 = a4[1];
  v82 = (unint64_t)a4[2];
  if ((unint64_t)v83 >= v82)
  {
    v85 = *a4;
    v86 = (v83 - *a4) >> 3;
    v87 = v86 + 1;
    if ((unint64_t)(v86 + 1) >> 61)
LABEL_199:
      abort();
    v88 = v82 - (_QWORD)v85;
    if (v88 >> 2 > v87)
      v87 = v88 >> 2;
    if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFF8)
      v89 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v89 = v87;
    if (v89)
    {
      if (v89 >> 61)
LABEL_200:
        sub_1C4764EE4();
      v90 = (char *)operator new(8 * v89);
    }
    else
    {
      v90 = 0;
    }
    v91 = &v90[8 * v86];
    *(_QWORD *)v91 = *(_QWORD *)(v138 + 208);
    v84 = v91 + 8;
    if (v83 == v85)
    {
      v93 = a4;
    }
    else
    {
      do
      {
        v92 = *((_QWORD *)v83 - 1);
        v83 -= 8;
        *((_QWORD *)v91 - 1) = v92;
        v91 -= 8;
      }
      while (v83 != v85);
      v93 = a4;
      v83 = *a4;
    }
    *v93 = v91;
    v93[1] = v84;
    v93[2] = &v90[8 * v89];
    if (v83)
      operator delete(v83);
  }
  else
  {
    *(_QWORD *)v83 = *(_QWORD *)(v8 + 208);
    v84 = v83 + 8;
  }
  a4[1] = v84;
  MEMORY[0x1CAA32FB4](v158, 8);
  v95 = *(uint64_t **)v6;
  if (*(_QWORD *)(v6 + 8) - *(_QWORD *)v6 >= 9uLL)
  {
    v96 = 1;
    do
    {
      v97 = v95[v96];
      llvm::AttributeFuncs::mergeAttributesForOutlining(*(llvm::AttributeFuncs **)(v6 + 56), *(llvm::Function **)(v97 + 208), v94);
      v158 = 0;
      v159 = 0;
      v160 = 0;
      v98 = *(_QWORD ***)(v6 + 56);
      v5 = v5 & 0xFFFFFFFF00000000 | v96;
      v147[0] = "output_block_";
      v147[2] = v5;
      v148 = 2051;
      sub_1C56F466C(v140, (uint64_t)&v158, v98, (uint64_t)v147);
      sub_1C56F561C(v97, (uint64_t)&v158, v58, 0);
      if ((sub_1C56FB094((uint64_t)&v158, v97) & 1) == 0)
      {
        DuplicateOutputBlock = findDuplicateOutputBlock((uint64_t)&v158, (uint64_t *)&__p);
        if ((DuplicateOutputBlock & 0xFF00000000) != 0)
        {
          *(_DWORD *)(v97 + 28) = DuplicateOutputBlock;
          v105 = (uint64_t)&v158[2 * v160];
          if ((_DWORD)v159)
          {
            if (v160)
            {
              v106 = 16 * v160;
              v107 = (uint64_t)v158;
              while ((*(_QWORD *)v107 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v107 += 16;
                v106 -= 16;
                if (!v106)
                  goto LABEL_146;
              }
            }
            else
            {
              v107 = (uint64_t)v158;
            }
          }
          else
          {
LABEL_146:
            v107 = (uint64_t)&v158[2 * v160];
          }
          v122 = &v158[2 * v160];
LABEL_176:
          while ((uint64_t *)v107 != v122)
          {
            llvm::BasicBlock::eraseFromParent(*(llvm::BasicBlock **)(v107 + 8));
            v123 = v107 + 16;
            v107 = v105;
            if (v123 != v105)
            {
              v107 = v123;
              while ((*(_QWORD *)v107 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v107 += 16;
                if (v107 == v105)
                {
                  v107 = v105;
                  goto LABEL_176;
                }
              }
            }
          }
        }
        else
        {
          v114 = v150;
          *(_DWORD *)(v97 + 28) = -1431655765 * ((unint64_t)(v150 - (_BYTE *)__p) >> 3);
          v155[0] = 0;
          v155[1] = 0;
          v156 = 0;
          if ((unint64_t)v114 >= v151)
          {
            v116 = sub_1C56FB418((uint64_t *)&__p, (uint64_t)v155);
            v115 = v155[0];
          }
          else
          {
            v115 = 0;
            *(_QWORD *)v114 = 0;
            *((_QWORD *)v114 + 1) = 0;
            v116 = (uint64_t)(v114 + 24);
            *((_DWORD *)v114 + 4) = 0;
          }
          v150 = (char *)v116;
          MEMORY[0x1CAA32FB4](v115, 8);
          v119 = &v158[2 * v160];
          if ((_DWORD)v159)
          {
            if (v160)
            {
              v120 = 16 * v160;
              v121 = v158;
              while ((*v121 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v121 += 2;
                v120 -= 16;
                if (!v120)
                  goto LABEL_173;
              }
            }
            else
            {
              v121 = v158;
            }
          }
          else
          {
LABEL_173:
            v121 = &v158[2 * v160];
          }
          for (j = &v158[2 * v160]; v121 != j; v6 = v141)
          {
            v125 = *v121;
            v126 = (llvm::BasicBlock *)v121[1];
            v155[0] = 0;
            v127 = sub_1C6144BDC(*(_QWORD *)(v6 + 72), *(_DWORD *)(v6 + 88), v125, v155);
            v128 = v155[0];
            if (!v127)
              v128 = *(_QWORD *)(v6 + 72) + 16 * *(unsigned int *)(v6 + 88);
            v129 = *(llvm::BasicBlock **)(v128 + 8);
            v130 = operator new(0x60uLL);
            v130[13] = v130[13] & 0x38000000 | 1;
            *(_QWORD *)v130 = 0;
            *((_QWORD *)v130 + 1) = 0;
            *((_QWORD *)v130 + 2) = 0;
            *((_QWORD *)v130 + 3) = v130 + 8;
            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v130 + 8), v129, v126);
            v152 = (unsigned __int8 *)v125;
            v153 = v126;
            sub_1C6187718((uint64_t)v155, (uint64_t)(v150 - 24), (uint64_t *)&v152, &v153);
            v131 = v121 + 2;
            v121 = v119;
            if (v131 != v119)
            {
              v121 = v131;
              while ((*v121 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v121 += 2;
                if (v121 == v119)
                {
                  v121 = v119;
                  break;
                }
              }
            }
          }
        }
      }
      *(_QWORD *)(v97 + 200) = replaceCalledFunction((uint64_t **)a2, (llvm::OutlinableRegion *)v97, v99);
      v100 = a4;
      v102 = a4[1];
      v101 = (unint64_t)a4[2];
      if ((unint64_t)v102 >= v101)
      {
        v108 = *a4;
        v109 = (v102 - *a4) >> 3;
        v110 = v109 + 1;
        if ((unint64_t)(v109 + 1) >> 61)
          goto LABEL_199;
        v111 = v101 - (_QWORD)v108;
        if (v111 >> 2 > v110)
          v110 = v111 >> 2;
        if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v112 = v110;
        if (v112)
        {
          if (v112 >> 61)
            goto LABEL_200;
          v113 = (char *)operator new(8 * v112);
        }
        else
        {
          v113 = 0;
        }
        v117 = &v113[8 * v109];
        *(_QWORD *)v117 = *(_QWORD *)(v97 + 208);
        v103 = v117 + 8;
        if (v102 == v108)
        {
          v100 = a4;
        }
        else
        {
          do
          {
            v118 = *((_QWORD *)v102 - 1);
            v102 -= 8;
            *((_QWORD *)v117 - 1) = v118;
            v117 -= 8;
          }
          while (v102 != v108);
          v100 = a4;
          v102 = *a4;
        }
        *v100 = v117;
        v100[1] = v103;
        v100[2] = &v113[8 * v112];
        if (v102)
          operator delete(v102);
      }
      else
      {
        *(_QWORD *)v102 = *(_QWORD *)(v97 + 208);
        v103 = v102 + 8;
      }
      v100[1] = v103;
      MEMORY[0x1CAA32FB4](v158, 8);
      v96 = (v96 + 1);
      v95 = *(uint64_t **)v6;
    }
    while (v96 < (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
  }
  createSwitchStatement((uint64_t)a2, v6, v140, (uint64_t *)&__p);
  ++*a5;
  v132 = (char *)__p;
  if (__p)
  {
    v133 = v150;
    v134 = __p;
    if (v150 != __p)
    {
      do
      {
        v135 = *((_QWORD *)v133 - 3);
        v133 -= 24;
        MEMORY[0x1CAA32FB4](v135, 8);
      }
      while (v133 != v132);
      v134 = __p;
    }
    v150 = v132;
    operator delete(v134);
  }
}

void sub_1C56F561C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  llvm::Function **v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  unsigned int v19;
  llvm::Function *v20;
  uint64_t v21;
  llvm::Value *v22;
  llvm::ValueAsMetadata *v23;
  llvm::Instruction *v24;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t CorrespondingValueIn;
  uint64_t *v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  llvm::ValueSymbolTable *v51;
  int v52;
  char *v53;
  llvm::BasicBlock *v54;
  uint64_t **v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  uint64_t v75;
  llvm::Value *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  int v83;
  llvm::Instruction *v84;
  uint64_t *v85;
  llvm::Instruction *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t j;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t *v99;
  unsigned int v100;
  uint64_t v101;
  llvm::Instruction *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t **v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  llvm::BasicBlock *v120;
  uint64_t v121;
  uint64_t v122;
  unsigned int v123;
  BOOL v124;
  uint64_t v126;
  llvm::ValueSymbolTable *v127;
  unsigned int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  char v141;
  char v142;
  llvm::BasicBlock *v143;
  _DWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  int v153;
  int v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t **v158;
  uint64_t *v159;
  llvm::Instruction *v160;
  llvm::Instruction *v161;
  llvm::BasicBlock *v162;
  llvm::BasicBlock *v163;
  llvm::BasicBlock *v164;
  llvm::BasicBlock *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  llvm::Function **v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v175;
  int v176;
  llvm::ValueAsMetadata *v177;
  llvm::Value *v178;
  unsigned __int8 *v179;
  _QWORD v180[2];
  int v181;
  _QWORD v182[2];
  int v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  _BYTE v188[32];
  void *v189[2];
  uint64_t v190;
  uint64_t v191[2];
  int v192;
  uint64_t v193;
  uint64_t v194;
  char v195;
  int v196;
  char *v197;
  uint64_t v198;
  _BYTE v199[48];
  char *v200;
  uint64_t v201;
  _WORD v202[24];
  uint64_t v203;

  v203 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 256);
  v7 = a1 + 208;
  v8 = (llvm::Function **)(v6 + 56);
  if (a4)
    v9 = (uint64_t *)(v6 + 56);
  else
    v9 = (uint64_t *)(a1 + 208);
  v10 = *v9;
  v189[0] = &v190;
  v189[1] = (void *)0x100000000;
  v196 = 0;
  v191[0] = 0;
  v191[1] = 0;
  v192 = 0;
  v195 = 0;
  v193 = 0;
  v194 = v10;
  v171 = v10;
  sub_1C53BA620((uint64_t)v189, 0);
  v180[0] = 0;
  v180[1] = 0;
  v181 = 0;
  v11 = *(_QWORD *)(a1 + 208);
  if (*(_QWORD *)(v11 + 96))
  {
    v168 = a3;
    v12 = 0;
    v13 = 0;
    v167 = v6 + 96;
    v172 = v6;
    v169 = (llvm::Function **)(v6 + 56);
    v170 = v7;
    while (1)
    {
      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(unsigned int *)(a1 + 48);
      if ((_DWORD)v15)
      {
        LODWORD(v16) = (v15 - 1) & (37 * v13);
        v17 = (int *)(v14 + 8 * v16);
        v18 = *v17;
        if (v13 == *v17)
          goto LABEL_8;
        v153 = 1;
        while (v18 != -1)
        {
          v154 = v16 + v153++;
          v16 = v154 & (v15 - 1);
          v18 = *(_DWORD *)(v14 + 8 * v16);
          if (v13 == v18)
          {
            v17 = (int *)(v14 + 8 * v16);
            goto LABEL_8;
          }
        }
      }
      v17 = (int *)(v14 + 8 * v15);
LABEL_8:
      v19 = v17[1];
      v20 = *v8;
      if ((*((_WORD *)*v8 + 9) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(*v8);
        v11 = *(_QWORD *)v7;
      }
      v21 = *((_QWORD *)v20 + 11);
      if ((*(_WORD *)(v11 + 18) & 1) != 0)
        llvm::Function::BuildLazyArguments((llvm::Function *)v11);
      v22 = (llvm::Value *)(v21 + 40 * v19);
      v23 = (llvm::ValueAsMetadata *)(*(_QWORD *)(v11 + 88) + 40 * v12);
      if (v13 >= *(_DWORD *)(a1 + 24))
      {
        v24 = *(llvm::Instruction **)(*((_QWORD *)v23 + 1) + 24);
        v25 = *((_QWORD *)v24 + 5);
        v186 = v188;
        v187 = 0x400000000;
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::getDescendants((uint64_t)v189, v25, (uint64_t)&v186);
        v26 = v187;
        v175 = v25;
        if ((_DWORD)v187)
        {
          v177 = v23;
          v178 = v22;
          v27 = (char *)v186;
          v176 = v187;
          v28 = (char *)v186 + 8 * v187;
          do
          {
LABEL_187:
            v145 = *(_QWORD *)(*(_QWORD *)v27 + 40);
            if (v145 != *(_QWORD *)v27 + 40)
            {
              v146 = v145 - 24;
              if (!v145)
                v146 = 0;
              v147 = *(unsigned __int8 *)(v146 + 16) - 40;
              if (v147 < 0xFFFFFFF5)
                v146 = 0;
              if (v145)
              {
                if (*(_BYTE *)(v146 + 16) == 29 && v147 >= 0xFFFFFFF5)
                {
                  v31 = *(_DWORD *)(v146 + 20) & 0x7FFFFFF;
                  if ((_DWORD)v31)
                    v32 = *(char **)(v146 - 32 * v31);
                  else
                    v32 = 0;
                  v200 = 0;
                  if (sub_1C6144BDC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), (uint64_t)v32, &v200))
                    v33 = v200;
                  else
                    v33 = (char *)(*(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16));
                  v34 = *((_QWORD *)v24 - 8);
                  llvm::Instruction::clone(v24);
                  v36 = v35;
                  v179 = 0;
                  v37 = (unsigned __int8 **)(v35 + 48);
                  if (&v179 != (unsigned __int8 **)(v35 + 48))
                  {
                    if (*v37)
                    {
                      llvm::MetadataTracking::untrack(v35 + 48, *v37);
                      v46 = v179;
                      *v37 = v179;
                      if (v46)
                      {
                        llvm::MetadataTracking::retrack((uint64_t)&v179, v46, (uint64_t)v37);
                        v179 = 0;
                      }
                    }
                    else
                    {
                      *v37 = 0;
                    }
                  }
                  v38 = *((_QWORD *)v33 + 1);
                  *(_QWORD *)(v36 + 40) = v38;
                  *(_WORD *)(v38 + 18) &= ~0x8000u;
                  if ((*(_BYTE *)(v36 + 23) & 0x10) != 0)
                  {
                    v50 = *(_QWORD *)(v38 + 56);
                    if (v50)
                    {
                      v51 = *(llvm::ValueSymbolTable **)(v50 + 104);
                      if (v51)
                        llvm::ValueSymbolTable::reinsertValue(v51, (llvm::Value *)v36);
                    }
                  }
                  v39 = *(_QWORD *)(v38 + 40);
                  *(_QWORD *)(v36 + 24) = v39;
                  *(_QWORD *)(v36 + 32) = v38 + 40;
                  *(_QWORD *)(v39 + 8) = v36 + 24;
                  *(_QWORD *)(v38 + 40) = v36 + 24;
                  if (*(_BYTE *)(v34 + 16) != 83 || (sub_1C6192E10(*(_QWORD *)a1, v34) & 0xFF00000000) != 0)
                  {
                    if ((a4 & 1) == 0)
                    {
                      CorrespondingValueIn = llvm::OutlinableRegion::findCorrespondingValueIn((uint64_t *)a1, **(uint64_t ***)v172, v34);
                      v41 = (uint64_t *)(v36 - 64);
                      if (*(_QWORD *)(v36 - 64))
                      {
                        **(_QWORD **)(v36 - 48) = *(_QWORD *)(v36 - 56);
                        v42 = *(_QWORD *)(v36 - 56);
                        if (v42)
                          *(_QWORD *)(v42 + 16) = *(_QWORD *)(v36 - 48);
                      }
                      *v41 = CorrespondingValueIn;
                      if (CorrespondingValueIn)
                      {
                        v45 = *(_QWORD *)(CorrespondingValueIn + 8);
                        v43 = (uint64_t **)(CorrespondingValueIn + 8);
                        v44 = v45;
                        *(_QWORD *)(v36 - 56) = v45;
                        if (v45)
                          *(_QWORD *)(v44 + 16) = v36 - 56;
                        *(_QWORD *)(v36 - 48) = v43;
                        *v43 = v41;
                      }
                    }
                  }
                  else
                  {
                    v47 = *((_QWORD *)v24 - 8);
                    if ((sub_1C6192E10(*(_QWORD *)a1, v47) & 0xFF00000000) == 0)
                    {
                      v48 = *(_QWORD *)(v47 + 40);
                      v197 = v32;
                      v198 = v48;
                      sub_1C6187718((uint64_t)&v200, a1 + 112, (uint64_t *)&v197, &v198);
                      if (a4)
                      {
                        v49 = *(_QWORD *)(v47 + 40);
                        v197 = v32;
                        v198 = v49;
                        sub_1C6187718((uint64_t)&v200, v167, (uint64_t *)&v197, &v198);
                      }
                      else
                      {
                        sub_1C6144BDC(*(_QWORD *)(v172 + 96), *(_DWORD *)(v172 + 112), (uint64_t)v32, &v200);
                        v200 = 0;
                        v52 = sub_1C6144BDC(*(_QWORD *)(v172 + 72), *(_DWORD *)(v172 + 88), (uint64_t)v32, &v200);
                        v53 = v200;
                        if (!v52)
                          v53 = (char *)(*(_QWORD *)(v172 + 72) + 16 * *(unsigned int *)(v172 + 88));
                        v165 = (llvm::BasicBlock *)*((_QWORD *)v53 + 1);
                        v200 = 0;
                        v160 = (llvm::Instruction *)v47;
                        if (!sub_1C6144BDC(*(_QWORD *)(v172 + 96), *(_DWORD *)(v172 + 112), (uint64_t)v32, &v200)|| v200 == (char *)(*(_QWORD *)(v172 + 96) + 16 * *(unsigned int *)(v172 + 112)))
                        {
                          v113 = **(_QWORD ***)v165;
                          v200 = "phi_block";
                          v202[8] = 259;
                          v114 = *((_QWORD *)v165 + 7);
                          v115 = operator new();
                          *(_QWORD *)v115 = *v113 + 1600;
                          *(_QWORD *)(v115 + 8) = 0;
                          v116 = *(_DWORD *)(v115 + 20) & 0xC0000000;
                          *(_QWORD *)(v115 + 24) = 0;
                          v117 = v115 + 24;
                          *(_DWORD *)(v115 + 16) = 22;
                          *(_DWORD *)(v115 + 20) = v116;
                          *(_QWORD *)(v115 + 32) = 0;
                          *(_QWORD *)(v115 + 40) = v115 + 40;
                          *(_QWORD *)(v115 + 48) = v115 + 40;
                          *(_QWORD *)(v115 + 56) = 0;
                          v164 = (llvm::BasicBlock *)v115;
                          if (v114)
                          {
                            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v114 + 72, (_QWORD *)v115);
                            v115 = (uint64_t)v164;
                            v118 = *(_QWORD *)(v114 + 72);
                            *((_QWORD *)v164 + 3) = v118;
                            *((_QWORD *)v164 + 4) = v114 + 72;
                            *(_QWORD *)(v118 + 8) = v117;
                            *(_QWORD *)(v114 + 72) = v117;
                          }
                          v119 = v115;
                          llvm::Value::setName((uint64_t ***)v115, (uint64_t)&v200);
                          v197 = v32;
                          v198 = v119;
                          sub_1C6187718((uint64_t)&v200, v167, (uint64_t *)&v197, &v198);
                          v156 = v200;
                          v200 = (char *)v202;
                          v201 = 0x200000000;
                          v120 = v165;
                          v121 = *((_QWORD *)v165 + 1);
                          if (v121)
                          {
                            while (1)
                            {
                              v122 = *(_QWORD *)(v121 + 24);
                              v123 = *(unsigned __int8 *)(v122 + 16);
                              v124 = v122 && v123 >= 0x1C;
                              if (v124 && v123 - 29 <= 0xA)
                                break;
                              v121 = *(_QWORD *)(v121 + 8);
                              if (!v121)
                                goto LABEL_184;
                            }
                            v128 = 0;
LABEL_157:
                            v129 = *(_QWORD *)(v122 + 40);
                            v130 = *(_QWORD *)(v129 + 40);
                            if (v130 == v129 + 40)
                            {
                              v132 = 0;
                            }
                            else
                            {
                              if (v130)
                                v131 = v130 - 24;
                              else
                                v131 = 0;
                              if (*(unsigned __int8 *)(v131 + 16) - 29 >= 0xB)
                                v132 = 0;
                              else
                                v132 = v131;
                            }
                            if (v128 >= HIDWORD(v201))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v200, (uint64_t)v202, v128 + 1, 8);
                              v128 = v201;
                            }
                            *(_QWORD *)&v200[8 * v128] = v132;
                            v128 = v201 + 1;
                            LODWORD(v201) = v201 + 1;
                            while (1)
                            {
                              v121 = *(_QWORD *)(v121 + 8);
                              if (!v121)
                                break;
                              v122 = *(_QWORD *)(v121 + 24);
                              v133 = *(unsigned __int8 *)(v122 + 16);
                              if (v122)
                                v134 = v133 >= 0x1C;
                              else
                                v134 = 0;
                              if (v134 && v133 - 29 < 0xB)
                                goto LABEL_157;
                            }
                            v120 = v165;
                            if (v128)
                            {
                              v136 = (uint64_t *)v200;
                              v157 = &v200[8 * v128];
                              do
                              {
                                v137 = 0;
                                v159 = v136;
                                v138 = *v136;
                                v139 = *(_DWORD *)(*v136 + 20) & 0x7FFFFFF;
                                v140 = *v136 - 32;
                                v141 = 1;
                                do
                                {
                                  if (*(llvm::BasicBlock **)(v140 - 32 * v137) == v120)
                                  {
                                    sub_1C53E1B14(v138, v137, (uint64_t)v164);
                                    v120 = v165;
                                  }
                                  v142 = (v139 == 3) & v141;
                                  v137 = 1;
                                  v141 = 0;
                                }
                                while ((v142 & 1) != 0);
                                v136 = v159 + 1;
                              }
                              while (v159 + 1 != (uint64_t *)v157);
                            }
                          }
LABEL_184:
                          v143 = v120;
                          v144 = operator new(0x60uLL);
                          v144[13] = v144[13] & 0x38000000 | 1;
                          *(_QWORD *)v144 = 0;
                          *((_QWORD *)v144 + 1) = 0;
                          *((_QWORD *)v144 + 2) = 0;
                          *((_QWORD *)v144 + 3) = v144 + 8;
                          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v144 + 8), v143, v164);
                          v54 = (llvm::BasicBlock *)*((_QWORD *)v156 + 1);
                          if (v200 != (char *)v202)
                            free(v200);
                          v47 = (uint64_t)v160;
                        }
                        else
                        {
                          v54 = (llvm::BasicBlock *)*((_QWORD *)v200 + 1);
                        }
                        v55 = *(uint64_t ***)(a1 + 256);
                        v200 = (char *)v202;
                        v201 = 0x300000000;
                        sub_1C56FB538(v47, a1, v168, (uint64_t)&v200, 0);
                        v158 = v55;
                        v162 = v54;
                        v166 = **v55;
                        v197 = v199;
                        v198 = 0x300000000;
                        if (*((llvm::BasicBlock **)v54 + 5) != (llvm::BasicBlock *)((char *)v54 + 40))
                        {
                          v56 = *((_QWORD *)v54 + 6);
                          while (2)
                          {
                            v57 = v56 - 24;
                            if (!v56 || *(_BYTE *)(v56 - 8) != 83)
                              break;
                            if (!v181)
                              goto LABEL_61;
                            v58 = ((v57 >> 4) ^ (v57 >> 9)) & (v181 - 1);
                            v59 = *(_QWORD *)(v180[0] + 8 * v58);
                            if (v57 != v59)
                            {
                              v73 = 1;
                              while (v59 != -4096)
                              {
                                v74 = v58 + v73++;
                                v58 = v74 & (v181 - 1);
                                v59 = *(_QWORD *)(v180[0] + 8 * v58);
                                if (v57 == v59)
                                  goto LABEL_60;
                              }
                              goto LABEL_61;
                            }
LABEL_60:
                            if (v58 == v181)
                            {
LABEL_61:
                              LODWORD(v198) = 0;
                              sub_1C56FB538(v57, v166, v168, (uint64_t)&v197, 1);
                              v60 = (uint64_t *)v166;
                              v61 = v201;
                              if ((_DWORD)v201 == (_DWORD)v198)
                              {
                                if (!(_DWORD)v201)
                                {
LABEL_129:
                                  v185 = v57;
                                  sub_1C629664C((uint64_t)v182, (uint64_t)v180, &v185);
                                  goto LABEL_130;
                                }
                                v62 = 0;
                                while (1)
                                {
                                  v63 = &v197[16 * v62];
                                  v64 = &v200[16 * v62];
                                  if (*(_DWORD *)v63 != *(_DWORD *)v64)
                                    break;
                                  v65 = *((_QWORD *)v64 + 1);
                                  v66 = v65 + 40;
                                  for (i = *(_QWORD *)(v65 + 48); i != v66; i = *(_QWORD *)(i + 8))
                                  {
                                    v68 = i - 24;
                                    if (i)
                                      v69 = i - 24;
                                    else
                                      v69 = 0;
                                    if (*(_BYTE *)(v69 + 16) != 83)
                                      goto LABEL_73;
                                  }
                                  v68 = 0;
LABEL_73:
                                  v70 = *((_QWORD *)v63 + 1);
                                  v71 = llvm::OutlinableRegion::findCorrespondingValueIn((uint64_t *)a1, v60, v68);
                                  v72 = v71 ? *(_QWORD *)(v71 + 40) : 0;
                                  v60 = (uint64_t *)v166;
                                  if (v72 != v70)
                                    break;
                                  if (++v62 == v61)
                                    goto LABEL_129;
                                }
                              }
                            }
                            v56 = *(_QWORD *)(v57 + 32);
                            continue;
                          }
                        }
                        llvm::Instruction::clone(v160);
                        v76 = (llvm::Value *)v75;
                        v77 = *((_QWORD *)v162 + 6);
                        if (v77)
                          v78 = v77 - 24;
                        else
                          v78 = 0;
                        v79 = *(_QWORD *)(v78 + 40);
                        *(_QWORD *)(v75 + 40) = v79;
                        *(_WORD *)(v79 + 18) &= ~0x8000u;
                        if ((*(_BYTE *)(v75 + 23) & 0x10) != 0)
                        {
                          v126 = *(_QWORD *)(v79 + 56);
                          if (v126)
                          {
                            v127 = *(llvm::ValueSymbolTable **)(v126 + 104);
                            if (v127)
                              llvm::ValueSymbolTable::reinsertValue(v127, v76);
                          }
                        }
                        v81 = *(_QWORD *)(v78 + 24);
                        v80 = (_QWORD *)(v78 + 24);
                        v163 = v76;
                        *((_QWORD *)v76 + 3) = v81;
                        *((_QWORD *)v76 + 4) = v80;
                        v82 = (_QWORD *)((char *)v76 + 24);
                        *(_QWORD *)(v81 + 8) = v82;
                        *v80 = v82;
                        v83 = *((_DWORD *)v82 - 1);
                        v84 = (llvm::Instruction *)(v83 & 0x7FFFFFF);
                        v85 = (uint64_t *)v166;
                        if ((v83 & 0x7FFFFFF) != 0)
                        {
                          v86 = 0;
                          v57 = (uint64_t)v163;
                          v161 = (llvm::Instruction *)(v83 & 0x7FFFFFF);
                          do
                          {
                            v87 = *(_DWORD *)(v57 + 20);
                            if ((v87 & 0x40000000) != 0)
                              v88 = *(_QWORD *)(v57 - 8);
                            else
                              v88 = v57 - 32 * (v87 & 0x7FFFFFF);
                            v89 = *(_QWORD *)(v88 + 32 * *(unsigned int *)(v57 + 60) + 8 * (_QWORD)v86);
                            v90 = v89 + 40;
                            for (j = *(_QWORD *)(v89 + 48); j != v90; j = *(_QWORD *)(j + 8))
                            {
                              v92 = j - 24;
                              if (j)
                                v93 = j - 24;
                              else
                                v93 = 0;
                              if (*(_BYTE *)(v93 + 16) != 83)
                                goto LABEL_101;
                            }
                            v92 = 0;
LABEL_101:
                            v94 = *(_QWORD *)(v88 + 32 * (_QWORD)v86);
                            v95 = llvm::OutlinableRegion::findCorrespondingValueIn((uint64_t *)a1, v85, v92);
                            if (v95)
                              v96 = *(_QWORD *)(v95 + 40);
                            else
                              v96 = 0;
                            v97 = *(_DWORD *)(v57 + 20);
                            if ((v97 & 0x40000000) != 0)
                              v98 = *(_QWORD *)(v57 - 8);
                            else
                              v98 = v57 - 32 * (v97 & 0x7FFFFFF);
                            *(_QWORD *)(v98 + 32 * *(unsigned int *)(v57 + 60) + 8 * (_QWORD)v86) = v96;
                            if (*(_BYTE *)(v94 + 16) == 21 && v94)
                            {
                              v99 = v158[7];
                              v100 = *(_DWORD *)(v94 + 32);
                              if ((*((_WORD *)v99 + 9) & 1) != 0)
                                llvm::Function::BuildLazyArguments((llvm::Function *)v158[7]);
                              v101 = v99[11] + 40 * v100;
                              v57 = (uint64_t)v163;
                              sub_1C6125834((uint64_t)v163, v86, v101);
                            }
                            else
                            {
                              v182[0] = 0;
                              v182[1] = 0;
                              v183 = 0;
                              sub_1C4DFEB14((uint64_t)v182, v168);
                              if (v183)
                              {
                                v103 = (v183 - 1) & ((v94 >> 4) ^ (v94 >> 9));
                                v104 = *(_QWORD *)(v182[0] + 16 * v103);
                                if (v94 == v104)
                                {
LABEL_115:
                                  v102 = v86;
                                  if ((_DWORD)v103 != v183)
                                    v94 = *(_QWORD *)(v182[0] + 16 * v103 + 8);
                                }
                                else
                                {
                                  v106 = 1;
                                  while (1)
                                  {
                                    v102 = v86;
                                    if (v104 == -4096)
                                      break;
                                    v107 = v103 + v106++;
                                    v103 = v107 & (v183 - 1);
                                    v104 = *(_QWORD *)(v182[0] + 16 * v103);
                                    v57 = (uint64_t)v163;
                                    if (v94 == v104)
                                      goto LABEL_115;
                                  }
                                  v57 = (uint64_t)v163;
                                }
                              }
                              else
                              {
                                v102 = v86;
                              }
                              MEMORY[0x1CAA32FB4](v182[0], 8);
                              v105 = llvm::OutlinableRegion::findCorrespondingValueIn((uint64_t *)a1, (uint64_t *)v166, v94);
                              v184 = v105;
                              v185 = 0;
                              if (sub_1C4926528(v166 + 80, &v184, &v185)
                                && v185 != *(_QWORD *)(v166 + 80) + 16 * *(unsigned int *)(v166 + 96))
                              {
                                v105 = *(_QWORD *)(v185 + 8);
                              }
                              v86 = v102;
                              sub_1C6125834(v57, v102, v105);
                              v84 = v161;
                            }
                            v86 = (llvm::Instruction *)((char *)v86 + 1);
                            v85 = (uint64_t *)v166;
                          }
                          while (v86 != v84);
                        }
                        else
                        {
                          v57 = (uint64_t)v163;
                        }
LABEL_130:
                        if (v197 != v199)
                          free(v197);
                        if (v200 != (char *)v202)
                          free(v200);
                        v108 = (uint64_t *)(v36 - 64);
                        if (*(_QWORD *)(v36 - 64))
                        {
                          **(_QWORD **)(v36 - 48) = *(_QWORD *)(v36 - 56);
                          v109 = *(_QWORD *)(v36 - 56);
                          if (v109)
                            *(_QWORD *)(v109 + 16) = *(_QWORD *)(v36 - 48);
                        }
                        *v108 = v57;
                        if (v57)
                        {
                          v112 = *(_QWORD *)(v57 + 8);
                          v111 = (uint64_t **)(v57 + 8);
                          v110 = v112;
                          *(_QWORD *)(v36 - 56) = v112;
                          if (v112)
                            *(_QWORD *)(v110 + 16) = v36 - 56;
                          *(_QWORD *)(v36 - 48) = v111;
                          *v111 = v108;
                        }
                      }
                    }
                  }
                }
              }
            }
            v27 += 8;
          }
          while (v27 != v28);
          v8 = v169;
          v7 = v170;
          v23 = v177;
          v22 = v178;
          if (!v176)
          {
LABEL_199:
            v149 = *(_QWORD *)(v171 + 80);
            if (v149)
              v150 = v149 - 24;
            else
              v150 = 0;
            sub_1C53BB778((uint64_t)v189, 0, v150, v175);
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v24 + 5) + 40, (uint64_t ***)v24);
          v151 = *((_QWORD *)v24 + 3);
          v152 = (_QWORD *)*((_QWORD *)v24 + 4);
          *v152 = v151;
          *(_QWORD *)(v151 + 8) = v152;
          *((_QWORD *)v24 + 3) = 0;
          *((_QWORD *)v24 + 4) = 0;
          llvm::Value::deleteValue(v24);
          llvm::Value::doRAUW(v23, v22, (llvm::Value *)1);
          if (v186 != v188)
            free(v186);
          goto LABEL_205;
        }
        v29 = *(_QWORD *)(v171 + 80);
        if (v29)
          v30 = v29 - 24;
        else
          v30 = 0;
        sub_1C53BAD9C((uint64_t)v189, 0, v30, v25);
        llvm::DominatorTreeBase<llvm::BasicBlock,false>::getDescendants((uint64_t)v189, v25, (uint64_t)&v186);
        if ((_DWORD)v187)
        {
          v176 = v26;
          v177 = v23;
          v178 = v22;
          v27 = (char *)v186;
          v28 = (char *)v186 + 8 * v187;
          goto LABEL_187;
        }
        goto LABEL_199;
      }
      llvm::Value::doRAUW(v23, v22, (llvm::Value *)1);
      v197 = *(char **)(*(_QWORD *)(a1 + 200) - 32 * (*(_DWORD *)(*(_QWORD *)(a1 + 200) + 20) & 0x7FFFFFF) + 32 * v12);
      v198 = (uint64_t)v22;
      sub_1C509BD8C(a1 + 80, &v197, &v198, (uint64_t)&v200);
LABEL_205:
      v11 = *(_QWORD *)v7;
      v12 = ++v13;
      if (*(_QWORD *)(*(_QWORD *)v7 + 96) <= (unint64_t)v13)
      {
        v155 = v180[0];
        goto LABEL_213;
      }
    }
  }
  v155 = 0;
LABEL_213:
  MEMORY[0x1CAA32FB4](v155, 8);
  sub_1C4DC4E38(v191);
  if (v189[0] != &v190)
    free(v189[0]);
}

void llvm::IROutliner::pruneIncompatibleRegions(uint64_t a1, __n128 **a2, unint64_t **a3)
{
  __n128 *v5;
  __n128 *v6;
  uint64_t v7;
  unint64_t v8;
  const std::nothrow_t *v9;
  unint64_t v10;
  __n128 *v11;
  BOOL v12;
  __n128 *v13;
  uint64_t v14;
  __n128 *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t **v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned int v39;

  v5 = *a2;
  v6 = a2[1];
  v7 = (char *)v6 - (char *)*a2;
  v8 = 0xEEEEEEEEEEEEEEEFLL * (v7 >> 3);
  if (v7 < 1)
  {
LABEL_5:
    sub_1C56FC484(v5, v6, v8, 0, 0);
  }
  else
  {
    v9 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v10 = 0xEEEEEEEEEEEEEEEFLL * (v7 >> 3);
    while (1)
    {
      v11 = (__n128 *)operator new(120 * v10, v9);
      if (v11)
        break;
      v12 = v10 > 1;
      v10 >>= 1;
      if (!v12)
        goto LABEL_5;
    }
    v13 = v11;
    sub_1C56FC484(v5, v6, v8, v11, v10);
    operator delete(v13);
  }
  v14 = (uint64_t)*a2;
  if ((*a2)->n128_u32[1] != 2
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 8) + 16) + 16) != 84
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 16) + 16) + 16) != 30)
  {
    v15 = a2[1];
    if ((__n128 *)v14 != v15)
    {
      v16 = 0;
      do
      {
        v18 = *(_DWORD *)v14 + *(_DWORD *)(v14 + 4) - 1;
        v39 = *(_DWORD *)v14;
        v17 = v39;
        if (v39 > v18)
        {
LABEL_15:
          v19 = *(_QWORD *)(v14 + 8);
          v20 = *(_QWORD *)(*(_QWORD *)(v14 + 16) + 8);
          if (v19 == v20)
          {
LABEL_19:
            v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 16) + 40) + 56);
            v23 = *(_QWORD *)(v22 + 112);
            if ((!v23 || (*(_BYTE *)(v23 + 17) & 8) == 0)
              && ((*(_DWORD *)(v22 + 32) & 0xF) != 3 || *(_BYTE *)a1)
              && (!v16 || v17 > v16))
            {
              while (v19 != v20)
              {
                if (!sub_1C56FC2D4(*(_QWORD *)(*(_QWORD *)(v19 + 8) + 16), *(llvm::Instruction **)(v19 + 16))
                  || !sub_1C62959A0(a1 + 392, *(_QWORD *)(v19 + 16)))
                {
                  goto LABEL_25;
                }
                v19 = *(_QWORD *)(v19 + 8);
              }
              v24 = sub_1C484358C(a1 + 200, 264, 3);
              sub_1C629677C(v24, v14, (uint64_t)a3);
              v25 = a3;
              v27 = a3[1];
              v26 = (unint64_t)a3[2];
              if ((unint64_t)v27 >= v26)
              {
                v29 = *a3;
                v30 = v27 - *a3;
                v31 = v30 + 1;
                if ((unint64_t)(v30 + 1) >> 61)
                  abort();
                v32 = v26 - (_QWORD)v29;
                if (v32 >> 2 > v31)
                  v31 = v32 >> 2;
                if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
                  v31 = 0x1FFFFFFFFFFFFFFFLL;
                v37 = v31;
                if (v31)
                {
                  if (v31 >> 61)
                    sub_1C4764EE4();
                  v33 = (char *)operator new(8 * v31);
                  v25 = a3;
                }
                else
                {
                  v33 = 0;
                }
                v34 = (unint64_t *)&v33[8 * v30];
                *v34 = v24;
                v28 = v34 + 1;
                if (v27 == v29)
                {
                  v35 = v37;
                }
                else
                {
                  v35 = v37;
                  do
                  {
                    v36 = *--v27;
                    *--v34 = v36;
                  }
                  while (v27 != v29);
                  v27 = *v25;
                }
                *v25 = v34;
                v25[1] = v28;
                v25[2] = (unint64_t *)&v33[8 * v35];
                if (v27)
                {
                  operator delete(v27);
                  v25 = a3;
                }
              }
              else
              {
                *v27 = v24;
                v28 = v27 + 1;
              }
              v25[1] = v28;
              v16 = v18;
            }
          }
          else
          {
            v21 = *(_QWORD *)(v14 + 8);
            while ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v21 + 16) + 40) + 18) & 0x7FFF) == 0)
            {
              v21 = *(_QWORD *)(v21 + 8);
              if (v21 == v20)
                goto LABEL_19;
            }
          }
        }
        else
        {
          while ((int *)(*(_QWORD *)(a1 + 8) + 4 * *(unsigned int *)(a1 + 24)) == sub_1C61940B0((uint64_t *)(a1 + 8), &v39))
          {
            if (++v39 > v18)
              goto LABEL_15;
          }
        }
LABEL_25:
        v14 += 120;
      }
      while ((__n128 *)v14 != v15);
    }
  }
}

uint64_t sub_1C56F6708(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  int *v16;
  int v18;
  int v19;
  int v20;

  if (*(_DWORD *)(a2 + 180) < a3)
  {
    v4 = *(_QWORD *)(a2 + 184);
    v5 = *(_DWORD *)(a2 + 200);
    if (v5)
    {
      v6 = (v5 - 1) & (37 * a3);
      v7 = *(_DWORD *)(v4 + 40 * v6);
      if (v7 == a3)
      {
LABEL_9:
        a3 = **(_DWORD **)(v4 + 40 * v6 + 16);
        goto LABEL_10;
      }
      v8 = 1;
      while (v7 != -1)
      {
        v9 = v6 + v8++;
        v6 = v9 & (v5 - 1);
        v7 = *(_DWORD *)(v4 + 40 * v6);
        if (v7 == a3)
          goto LABEL_9;
      }
    }
    v6 = *(_DWORD *)(a2 + 200);
    goto LABEL_9;
  }
LABEL_10:
  v10 = *(_QWORD *)(a1 + 96);
  v11 = *(unsigned int *)(a1 + 112);
  if ((_DWORD)v11)
  {
    LODWORD(v12) = (v11 - 1) & (37 * a3);
    v13 = (int *)(v10 + 8 * v12);
    v14 = *v13;
    if (a3 == *v13)
      goto LABEL_12;
    v18 = 1;
    while (v14 != -1)
    {
      v19 = v12 + v18++;
      v12 = v19 & (v11 - 1);
      v14 = *(_DWORD *)(v10 + 8 * v12);
      if (a3 == v14)
      {
        v13 = (int *)(v10 + 8 * v12);
        goto LABEL_12;
      }
    }
  }
  v13 = (int *)(v10 + 8 * v11);
LABEL_12:
  if ((int *)(v10 + 8 * v11) == v13)
    v15 = 0;
  else
    v15 = v13[1];
  v20 = v15;
  v16 = sub_1C4A1156C((uint64_t *)(a1 + 48), &v20);
  if ((int *)(*(_QWORD *)(a1 + 48) + 16 * *(unsigned int *)(a1 + 64)) == v16)
    return 0;
  else
    return *((_QWORD *)v16 + 1);
}

uint64_t llvm::IROutliner::findCostBenefit(llvm::IROutliner *this, llvm::Module *a2, llvm::OutlinableRegion ***a3)
{
  unint64_t BenefitFromAllRegions;
  int64_t v6;
  unsigned int v7;
  uint64_t v8;
  llvm::OutlinableRegion **v9;
  BOOL v10;
  int64_t v11;
  unint64_t CostOutputReloads;
  int v13;
  llvm::OutlinableRegion **v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  llvm::OutlinableRegion **v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  llvm::OutlinableRegion **v45;
  uint64_t v46;
  llvm::OutlinableRegion **v47;
  uint64_t v48;
  llvm::OutlinableRegion **v49;
  llvm::OutlinableRegion **v50;
  int v51;
  unint64_t v52;
  llvm::OutlinableRegion *v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  llvm::OutlinableRegion ***v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t result;
  llvm::OutlinableRegion **v71;
  int64_t v72;
  llvm::OutlinableRegion ***v74;
  unsigned int v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[2];
  int v81;
  _QWORD v82[2];
  int v83;
  uint64_t v84;
  uint64_t v85;

  BenefitFromAllRegions = llvm::IROutliner::findBenefitFromAllRegions(this, a3);
  v6 = BenefitFromAllRegions;
  v8 = v7;
  if (v7 == 1)
    *((_DWORD *)a3 + 60) = 1;
  v9 = a3[29];
  v10 = __OFADD__(v9, BenefitFromAllRegions);
  v11 = (int64_t)v9 + BenefitFromAllRegions;
  if (v10)
    v11 = (v11 >> 63) ^ 0x8000000000000000;
  a3[29] = (llvm::OutlinableRegion **)v11;
  CostOutputReloads = llvm::IROutliner::findCostOutputReloads((uint64_t)this, (uint64_t **)a3);
  if (v13 == 1)
    *((_DWORD *)a3 + 64) = 1;
  v14 = a3[31];
  v10 = __OFADD__(v14, CostOutputReloads);
  v15 = (int64_t)v14 + CostOutputReloads;
  if (v10)
    v15 = (v15 >> 63) ^ 0x8000000000000000;
  a3[31] = (llvm::OutlinableRegion **)v15;
  v16 = a3[1] - *a3;
  v17 = v6 / v16;
  v18 = (char *)a3[4] - (char *)a3[3];
  v19 = (_QWORD *)(*((uint64_t (**)(_QWORD, _QWORD))this + 4))(*((_QWORD *)this + 5), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)**a3 + 8) + 16) + 40) + 56));
  if (v8 == 1)
    *((_DWORD *)a3 + 64) = 1;
  v20 = v18 >> 3;
  v21 = a3[31];
  v10 = __OFADD__(v21, v17);
  v22 = (int64_t)v21 + v17;
  if (v10)
    v22 = (v22 >> 63) ^ 0x8000000000000000;
  v10 = __OFADD__(v22, v20);
  v23 = v22 + v20;
  if (v10)
    v23 = 0x7FFFFFFFFFFFFFFFLL;
  v24 = ((v18 >> 2) * (_DWORD)v16) & 0xFFFFFFFE;
  v10 = __OFADD__(v23, v24);
  v25 = v23 + v24;
  if (v10)
    v25 = 0x7FFFFFFFFFFFFFFFLL;
  a3[31] = (llvm::OutlinableRegion **)v25;
  v26 = (uint64_t *)**a3;
  v27 = *v26;
  v82[0] = 0;
  v82[1] = 0;
  v83 = 0;
  sub_1C4E327B0(v27, (uint64_t)v82);
  v81 = 0;
  v80[0] = 0;
  v80[1] = 0;
  v28 = *(_QWORD *)(v27 + 8);
  v29 = *(_QWORD *)(*(_QWORD *)(v27 + 16) + 8);
  if (v28 != v29)
  {
    v30 = 0;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v28 + 16) + 16) == 30)
      {
        v31 = *(unsigned int *)(v28 + 32);
        if ((_DWORD)v31)
          break;
      }
LABEL_39:
      v28 = *(_QWORD *)(v28 + 8);
      if (v28 == v29)
        goto LABEL_42;
    }
    v32 = *(uint64_t **)(v28 + 24);
    v33 = &v32[v31];
    while (1)
    {
      v34 = *v32;
      v78 = v34;
      v35 = v34 >> 4;
      if (v83)
      {
        v36 = (v83 - 1) & (v35 ^ (v34 >> 9));
        v37 = *(_QWORD *)(v82[0] + 8 * v36);
        if (v34 == v37)
        {
LABEL_24:
          if (v36 != v83)
            goto LABEL_28;
        }
        else
        {
          v42 = 1;
          while (v37 != -4096)
          {
            v43 = v36 + v42++;
            v36 = v43 & (v83 - 1);
            v37 = *(_QWORD *)(v82[0] + 8 * v36);
            if (v34 == v37)
              goto LABEL_24;
          }
        }
      }
      if (!v81)
        goto LABEL_34;
      v38 = (v81 - 1) & (v35 ^ (v34 >> 9));
      v39 = *(_QWORD *)(v80[0] + 8 * v38);
      if (v34 != v39)
      {
        v40 = 1;
        while (v39 != -4096)
        {
          v41 = v38 + v40++;
          v38 = v41 & (v81 - 1);
          v39 = *(_QWORD *)(v80[0] + 8 * v38);
          if (v34 == v39)
            goto LABEL_27;
        }
LABEL_34:
        sub_1C6187FB8(v80, &v78, (uint64_t)&v84);
        ++v30;
        goto LABEL_28;
      }
LABEL_27:
      if (v38 == v81)
        goto LABEL_34;
LABEL_28:
      if (++v32 == v33)
        goto LABEL_39;
    }
  }
  v30 = 0;
LABEL_42:
  *((_DWORD *)a3 + 44) = v30;
  v44 = *((_DWORD *)a3 + 32);
  v45 = a3[15];
  v46 = *((unsigned int *)a3 + 34);
  v47 = &v45[2 * v46];
  v74 = a3;
  v75 = v30;
  if (v44)
  {
    if ((_DWORD)v46)
    {
      v48 = 16 * v46;
      v49 = a3[15];
      while ((unint64_t)*v49 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v49 += 2;
        v48 -= 16;
        if (!v48)
          goto LABEL_47;
      }
    }
    else
    {
      v49 = a3[15];
    }
  }
  else
  {
LABEL_47:
    v49 = &v45[2 * v46];
  }
  v50 = &v45[2 * v46];
  if (v49 == v50)
  {
    v52 = 0;
    v51 = 0;
    v64 = v74;
  }
  else
  {
    v51 = 0;
    v52 = 0;
    do
    {
      v53 = v49[1];
      if (v53)
      {
        v54 = (unsigned int *)*v49;
        v55 = 4 * (_QWORD)v53;
        do
        {
          v56 = *v54++;
          v57 = (_QWORD *)sub_1C56F6708(*v26, v26[32], v56);
          v58 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*v19 + 888))(*v19, 32, *v57, 0, 0, 2, 0);
          v78 = v75;
          LODWORD(v79) = 0;
          v84 = v58;
          v85 = v59;
          sub_1C4848B64((uint64_t)&v84, (uint64_t)&v78);
          if ((_DWORD)v85 == 1)
            v51 = 1;
          if (__OFADD__(v52, v84))
            v52 = ((uint64_t)(v52 + v84) >> 63) ^ 0x8000000000000000;
          else
            v52 += v84;
          v55 -= 4;
        }
        while (v55);
      }
      v60 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v19 + 856))(*v19, 2, 2, 0);
      v78 = v75;
      LODWORD(v79) = 0;
      v84 = v60;
      v85 = v61;
      sub_1C4848B64((uint64_t)&v84, (uint64_t)&v78);
      if ((_DWORD)v85 == 1)
        v51 = 1;
      if (__OFADD__(v52, v84))
        v52 = ((uint64_t)(v52 + v84) >> 63) ^ 0x8000000000000000;
      else
        v52 += v84;
      v62 = (unint64_t *)(v49 + 2);
      while (v62 != (unint64_t *)v47)
      {
        v63 = *v62;
        v62 += 2;
        if (v63 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v49 = (llvm::OutlinableRegion **)(v62 - 2);
          goto LABEL_69;
        }
      }
      v49 = v47;
LABEL_69:
      ;
    }
    while (v49 != v50);
    v64 = v74;
    v44 = *((_DWORD *)v74 + 32);
  }
  if (v44 > 1)
  {
    v65 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v19
                                                                                                 + 864))(*v19, 53, **(_QWORD **)a2 + 1960, **(_QWORD **)a2 + 1960, 42, 2, 0);
    v67 = v66;
    v78 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*v19 + 856))(*v19, 2, 2, 0);
    v79 = v68;
    v69 = *((unsigned int *)v64 + 32);
    v84 = v65;
    v85 = v67;
    sub_1C4848B64((uint64_t)&v84, (uint64_t)&v78);
    v76 = v69;
    v77 = 0;
    sub_1C4848B64((uint64_t)&v84, (uint64_t)&v76);
    v76 = v75;
    v77 = 0;
    sub_1C4848B64((uint64_t)&v84, (uint64_t)&v76);
    if (__OFADD__(v52, v84))
      v52 = ((uint64_t)(v52 + v84) >> 63) ^ 0x8000000000000000;
    else
      v52 += v84;
    if ((_DWORD)v85 == 1)
      v51 = 1;
  }
  MEMORY[0x1CAA32FB4](v80[0], 8);
  result = MEMORY[0x1CAA32FB4](v82[0], 8);
  if (v51 == 1)
    *((_DWORD *)v64 + 64) = 1;
  v71 = v64[31];
  v10 = __OFADD__(v71, v52);
  v72 = (int64_t)v71 + v52;
  if (v10)
    v72 = (v72 >> 63) ^ 0x8000000000000000;
  v64[31] = (llvm::OutlinableRegion **)v72;
  return result;
}

BOOL llvm::IROutliner::extractSection(llvm::IROutliner *this, llvm::OutlinableRegion *a2)
{
  uint64_t v4;
  uint64_t CodeRegion;
  uint64_t v6;
  llvm::BasicBlock *v7;
  uint64_t SinglePredecessor;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *i;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[2];
  int v42;
  void *__p;
  _BYTE *v44;
  uint64_t v45;
  _QWORD v46[2];
  int v47;
  void *v48;
  void *v49;
  uint64_t v50;
  unsigned int v51[48];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v46[0] = 0;
  v46[1] = 0;
  v47 = 0;
  v49 = 0;
  v50 = 0;
  v48 = 0;
  v41[0] = 0;
  v41[1] = 0;
  v42 = 0;
  v44 = 0;
  v45 = 0;
  __p = 0;
  v4 = *((_QWORD *)a2 + 29);
  llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache((llvm::CodeExtractorAnalysisCache *)v51, *(llvm::Function **)(v4 + 56));
  CodeRegion = llvm::CodeExtractor::extractCodeRegion(*((_QWORD *)a2 + 24), v51, v46, v41);
  v6 = CodeRegion;
  *((_QWORD *)a2 + 26) = CodeRegion;
  if (CodeRegion)
  {
    v7 = *(llvm::BasicBlock **)(*(_QWORD *)(*(_QWORD *)(CodeRegion + 8) + 24) + 40);
    SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v7);
    *((_QWORD *)a2 + 28) = SinglePredecessor;
    if (SinglePredecessor == v4)
    {
      v9 = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v4);
      v10 = *(_QWORD *)(v9 + 40);
      if (v10 == v9 + 40)
      {
        v11 = 0;
      }
      else
      {
        if (v10)
          v12 = v10 - 24;
        else
          v12 = 0;
        if (*(unsigned __int8 *)(v12 + 16) - 29 >= 0xB)
          v11 = 0;
        else
          v11 = v12;
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v11 + 40) + 40, (uint64_t ***)v11);
      v13 = *(_QWORD *)(v11 + 24);
      v14 = *(_QWORD **)(v11 + 32);
      *v14 = v13;
      *(_QWORD *)(v13 + 8) = v14;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v11);
      v15 = *(_QWORD *)(v4 + 48);
      if (v15 != v4 + 40)
      {
        do
        {
          v16 = *(_QWORD *)(v15 + 8);
          if (v15)
            v17 = (_QWORD *)(v15 - 24);
          else
            v17 = 0;
          llvm::Instruction::moveBefore(v17, v9, (uint64_t *)(v9 + 40));
          v15 = v16;
        }
        while (v16 != v4 + 40);
      }
      *((_QWORD *)a2 + 28) = v9;
      llvm::BasicBlock::eraseFromParent((llvm::BasicBlock *)v4);
    }
    *((_QWORD *)a2 + 29) = v7;
    *((_QWORD *)a2 + 30) = v7;
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 8) + 152);
    v19 = (_QWORD *)((char *)v7 + 40);
    v20 = *((_QWORD *)v7 + 6);
    if (v20)
      v21 = v20 - 24;
    else
      v21 = 0;
    v22 = sub_1C484358C((uint64_t)this + 296, 160, 3);
    v23 = sub_1C62959A0((uint64_t)this + 392, v21);
    llvm::IRSimilarity::IRInstructionData::IRInstructionData(v22, v21, v23, v18);
    *((_QWORD *)a2 + 1) = v22;
    v24 = sub_1C484358C((uint64_t)this + 296, 160, 3);
    v25 = sub_1C62959A0((uint64_t)this + 392, v21);
    llvm::IRSimilarity::IRInstructionData::IRInstructionData(v24, v21, v25, v18);
    *((_QWORD *)a2 + 2) = v24;
    v26 = *(_QWORD *)a2;
    v27 = (unint64_t *)*((_QWORD *)a2 + 1);
    v28 = *(unint64_t **)(*(_QWORD *)a2 + 8);
    v29 = *v28 & 0xFFFFFFFFFFFFFFF8;
    *v27 = v29 | *v27 & 7;
    v27[1] = (unint64_t)v28;
    *(_QWORD *)(v29 + 8) = v27;
    *v28 = *v28 & 7 | (unint64_t)v27;
    v30 = *(unint64_t **)(*(_QWORD *)(v26 + 16) + 8);
    v31 = *v30 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v24 = v31 | *(_QWORD *)v24 & 7;
    *(_QWORD *)(v24 + 8) = v30;
    *(_QWORD *)(v31 + 8) = v24;
    *v30 = *v30 & 7 | v24;
    v32 = (_QWORD *)(**(_QWORD **)(*(_QWORD *)(v26 + 16) + 8) & 0xFFFFFFFFFFFFFFF8);
    v33 = *v28 & 0xFFFFFFFFFFFFFFF8;
    v34 = *v32 & 0xFFFFFFFFFFFFFFF8;
    *v32 = v33 | *v32 & 7;
    *(_QWORD *)(v33 + 8) = v32;
    *v28 &= 7uLL;
    *(_QWORD *)(v34 + 8) = 0;
    for (i = (_QWORD *)*((_QWORD *)v7 + 6); i != v19; i = (_QWORD *)i[1])
    {
      if (i)
        v36 = (uint64_t)(i - 3);
      else
        v36 = 0;
      v37 = *(unsigned __int8 *)(v36 + 16);
      if (v37 == 84)
        v38 = v36;
      else
        v38 = 0;
      if (i && v37 == 84)
      {
        v39 = *(_QWORD *)(v38 - 32);
        if (!v39 || *(_BYTE *)(v39 + 16) || *(_QWORD *)(v39 + 24) != *(_QWORD *)(v38 + 72))
          v39 = 0;
        if (*((_QWORD *)a2 + 26) == v39)
          *((_QWORD *)a2 + 25) = v38;
      }
      else if (i && v37 == 60)
      {
        llvm::IROutliner::updateOutputMapping((uint64_t)this, (uint64_t)a2, (uint64_t)__p, (v44 - (_BYTE *)__p) >> 3, v36);
      }
    }
  }
  llvm::OutlinableRegion::reattachCandidate(a2);
  sub_1C626D3D0((uint64_t)v51);
  MEMORY[0x1CAA32FB4](0, 8);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v41[0], 8);
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  MEMORY[0x1CAA32FB4](v46[0], 8);
  return v6 != 0;
}

uint64_t llvm::IROutliner::doOutline(llvm::IROutliner *this, llvm::Module *a2)
{
  uint64_t v3;
  __n128 v4;
  char *v5;
  char *v6;
  unint64_t v7;
  const std::nothrow_t *v8;
  unint64_t v9;
  __n128 *v10;
  __n128 *v11;
  __n128 **v12;
  __n128 **v13;
  unsigned int v14;
  uint64_t *v15;
  _BYTE *v16;
  unint64_t **v17;
  unint64_t *v18;
  unint64_t *v19;
  llvm::OutlinableRegion **v20;
  llvm::OutlinableRegion **v21;
  llvm::OutlinableRegion *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  llvm::OutlinableRegion **v29;
  llvm::OutlinableRegion **v30;
  llvm::OutlinableRegion *v31;
  char *v32;
  _DWORD *v33;
  int v34;
  uint64_t *v35;
  uint64_t *v36;
  int v37;
  unint64_t *v38;
  BOOL v39;
  llvm::OptimizationRemarkEmitter *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  unint64_t ***v47;
  uint64_t *v48;
  unint64_t **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::string *v53;
  size_t size;
  void **v55;
  uint64_t v56;
  std::string *v57;
  void **v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  BOOL v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t *v67;
  char *v68;
  unint64_t v69;
  void **v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  const std::nothrow_t *v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  unsigned int *****v80;
  unsigned int ***v81;
  unsigned int ***v82;
  unsigned int *****v83;
  unsigned int ***v84;
  unsigned int ***v85;
  unsigned int ***i;
  unsigned int **v87;
  unsigned int ***v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  unsigned int ***v93;
  unsigned int **v94;
  llvm::OutlinableRegion **v95;
  int v96;
  int v97;
  BOOL v98;
  llvm::OutlinableRegion **v99;
  llvm::OutlinableRegion **v100;
  llvm::OutlinableRegion **v101;
  llvm::OutlinableRegion **v102;
  unsigned int ***v103;
  llvm::OutlinableRegion *v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  char *v108;
  llvm::OutlinableRegion **v109;
  llvm::OutlinableRegion **v110;
  llvm::OutlinableRegion *v111;
  llvm::OutlinableRegion *v112;
  llvm::OutlinableRegion **v113;
  llvm::OutlinableRegion **v114;
  unsigned int ***v115;
  llvm::OutlinableRegion *v116;
  unint64_t v117;
  unsigned int v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  int v122;
  unsigned int v123;
  _DWORD *v124;
  int v125;
  _DWORD *v126;
  int v127;
  BOOL v128;
  unsigned int v129;
  _DWORD *v130;
  _DWORD *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  char *v135;
  llvm::OutlinableRegion **v136;
  llvm::OutlinableRegion **v137;
  llvm::OutlinableRegion *v138;
  OutlinableGroup *v139;
  llvm::OptimizationRemarkEmitter *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  std::string *v145;
  size_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unsigned int ***v151;
  unint64_t v152;
  unsigned int ***v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  llvm::OutlinableRegion **v157;
  llvm::OutlinableRegion **v158;
  char *v159;
  unint64_t v160;
  void **v161;
  void *v162;
  llvm::Function **v163;
  char *v164;
  llvm::Function **v165;
  llvm::Function *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  void *v176;
  char *v177;
  void *v178;
  char *v180;
  __n128 **v181;
  unsigned int v182;
  unint64_t ***__p;
  char *v185;
  unsigned int *****v186;
  unsigned int *****v187;
  unsigned int v188;
  unsigned int ****v189;
  llvm::OutlinableRegion **v190;
  unint64_t v191;
  uint64_t v192;
  __int128 v193;
  char v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  char v199;
  _QWORD v200[2];
  int v201;
  void *v202;
  char *v203;
  unsigned int v204;
  void *v205;
  uint64_t v206;
  char v207;
  void *v208;
  char v209;
  void *v210[2];
  char v211;
  void *v212;
  size_t v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  std::string v217;
  void *v218;
  char v219;
  const void *v220[2];
  void *v221;
  uint64_t v222;
  uint64_t v223;
  __int128 v224;
  const char *v225;
  const char *v226;
  uint64_t v227;
  char v228;
  char v229;
  void *v230;
  uint64_t v231;
  _BYTE v232[256];
  char v233;
  int v234;
  uint64_t v235;
  uint64_t v236;

  v236 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 392) = byte_1ED82D208 ^ 1;
  *((_BYTE *)this + 393) = byte_1ED82D2C8 ^ 1;
  *((_BYTE *)this + 394) = byte_1ED82D448 ^ 1;
  v3 = (*((uint64_t (**)(_QWORD))this + 9))(*((_QWORD *)this + 10));
  v204 = 0;
  v6 = *(char **)(v3 + 296);
  v5 = *(char **)(v3 + 304);
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3);
  if (v7 >= 2)
  {
    if (v5 - v6 < 1)
    {
LABEL_6:
      sub_1C56FCEF8(v6, v5, 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3), 0, 0, v4);
    }
    else
    {
      v8 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3);
      while (1)
      {
        v10 = (__n128 *)operator new(24 * v9, v8);
        if (v10)
          break;
        v39 = v9 > 1;
        v9 >>= 1;
        if (!v39)
          goto LABEL_6;
      }
      v11 = v10;
      sub_1C56FCEF8(v6, v5, 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3), v10, v9, v4);
      operator delete(v11);
    }
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v3 + 304) - *(_QWORD *)(v3 + 296)) >> 3);
  }
  sub_1C6296B80(&v202, v7);
  v200[0] = 0;
  v200[1] = 0;
  v201 = 0;
  v13 = *(__n128 ***)(v3 + 296);
  v12 = *(__n128 ***)(v3 + 304);
  if (v13 != v12)
  {
    v14 = 0;
    __p = 0;
    v15 = 0;
    v180 = 0;
    v181 = *(__n128 ***)(v3 + 304);
    while (1)
    {
      v16 = v202;
      v17 = (unint64_t **)((char *)v202 + 272 * v14);
      llvm::IROutliner::pruneIncompatibleRegions((uint64_t)this, v13, v17);
      if ((unint64_t)((char *)v17[1] - (char *)*v17) >= 0x10)
      {
        sub_1C4A0CC74(v200);
        OutlinableGroup::findSameConstants((uint64_t ***)v17, (uint64_t)v200);
        if (!v16[272 * v14 + 64])
        {
          v182 = v14;
          v188 = v14;
          v185 = (char *)v15;
          v18 = *v17;
          v19 = v17[1];
          if (*v17 == v19)
          {
            v190 = 0;
            v21 = 0;
            v20 = 0;
          }
          else
          {
            v20 = 0;
            v21 = 0;
            v190 = 0;
            do
            {
              v22 = (llvm::OutlinableRegion *)*v18;
              llvm::OutlinableRegion::splitCandidate((llvm::OutlinableRegion *)*v18);
              if (*((_BYTE *)v22 + 216))
              {
                v221 = &v223;
                v222 = 0x600000000;
                memset(&v217, 0, 20);
                sub_1C56F86A8(*(_QWORD *)(*(_QWORD *)v22 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v22 + 16) + 8), (uint64_t)&v217, (uint64_t)&v221);
                v23 = sub_1C484358C((uint64_t)this + 104, 240, 3);
                v199 = 8;
                strcpy((char *)&v198, "outlined");
                *((_QWORD *)v22 + 24) = llvm::CodeExtractor::CodeExtractor(v23, (uint64_t *)v221, v222, 0, 0, 0, 0, 0, 0, 0, 0, &v198);
                llvm::IROutliner::findAddInputsOutputs((uint64_t)this, v24, (uint64_t *)v22, (uint64_t)v200);
                if (!*((_BYTE *)v22 + 217))
                {
                  if (v21 >= v190)
                  {
                    v25 = v21 - v20;
                    v26 = v25 + 1;
                    if ((unint64_t)(v25 + 1) >> 61)
                      goto LABEL_328;
                    if (((char *)v190 - (char *)v20) >> 2 > v26)
                      v26 = ((char *)v190 - (char *)v20) >> 2;
                    v27 = 0x1FFFFFFFFFFFFFFFLL;
                    if ((unint64_t)((char *)v190 - (char *)v20) < 0x7FFFFFFFFFFFFFF8)
                      v27 = v26;
                    if (v27)
                    {
                      if (v27 >> 61)
                        goto LABEL_329;
                      v191 = v27;
                      v28 = (char *)operator new(8 * v27);
                      v27 = v191;
                    }
                    else
                    {
                      v28 = 0;
                    }
                    v29 = (llvm::OutlinableRegion **)&v28[8 * v25];
                    *v29 = v22;
                    v30 = v29 + 1;
                    while (v21 != v20)
                    {
                      v31 = *--v21;
                      *--v29 = v31;
                    }
                    v190 = (llvm::OutlinableRegion **)&v28[8 * v27];
                    v21 = v30;
                    if (v20)
                      operator delete(v20);
                    v20 = v29;
                    v12 = v181;
                  }
                  else
                  {
                    *v21++ = v22;
                  }
                }
                llvm::OutlinableRegion::reattachCandidate(v22);
                MEMORY[0x1CAA32FB4](v217.__r_.__value_.__r.__words[0], 8);
                if (v221 != &v223)
                  free(v221);
              }
              ++v18;
            }
            while (v18 != v19);
            v18 = *v17;
          }
          v15 = (uint64_t *)v185;
          if (v18)
          {
            v17[1] = v18;
            operator delete(v18);
          }
          *v17 = (unint64_t *)v20;
          v17[1] = (unint64_t *)v21;
          v17[2] = (unint64_t *)v190;
          if (v20 == v21)
          {
            v14 = v188;
          }
          else
          {
            OutlinableGroup::collectGVNStoreSets((uint64_t **)v17, a2);
            if (*((_BYTE *)this + 1))
              llvm::IROutliner::findCostBenefit(this, a2, (llvm::OutlinableRegion ***)v17);
            v32 = &v16[272 * v182];
            v34 = *((_DWORD *)v32 + 60);
            v33 = v32 + 240;
            v35 = (uint64_t *)(v33 + 2);
            v36 = (uint64_t *)(v33 - 2);
            v38 = (unint64_t *)(v33 + 4);
            v37 = v33[4];
            v39 = v37 < v34;
            if (v37 == v34)
              v39 = *v35 < *v36;
            if (v39 || !*((_BYTE *)this + 1))
            {
              v42 = v185;
              v14 = v188;
              if (v185 >= v180)
              {
                v43 = (v185 - (char *)__p) >> 3;
                v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 61)
                  goto LABEL_328;
                if ((v180 - (char *)__p) >> 2 > v44)
                  v44 = (v180 - (char *)__p) >> 2;
                if ((unint64_t)(v180 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
                  v45 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v45 = v44;
                if (v45)
                {
                  if (v45 >> 61)
                    goto LABEL_329;
                  v46 = (char *)operator new(8 * v45);
                }
                else
                {
                  v46 = 0;
                }
                v47 = (unint64_t ***)&v46[8 * v43];
                *v47 = v17;
                v48 = (uint64_t *)(v47 + 1);
                while (v42 != (char *)__p)
                {
                  v49 = (unint64_t **)*((_QWORD *)v42 - 1);
                  v42 -= 8;
                  *--v47 = v49;
                }
                v180 = &v46[8 * v45];
                if (__p)
                  operator delete(__p);
                v15 = v48;
                __p = v47;
                v12 = v181;
              }
              else
              {
                *(_QWORD *)v185 = v17;
                v15 = (uint64_t *)(v185 + 8);
              }
            }
            else
            {
              v40 = (llvm::OptimizationRemarkEmitter *)(*((uint64_t (**)(_QWORD, _QWORD))this + 11))(*((_QWORD *)this + 12), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)**v17 + 8)+ 16)+ 40)+ 56));
              v41 = ****(_QWORD ****)v40;
              if (*(_QWORD *)(v41 + 128)
                || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v41 + 72) + 48))(*(_QWORD *)(v41 + 72)))
              {
                v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)**v17 + 8) + 16);
                v51 = *(_QWORD *)(*(_QWORD *)(v50 + 40) + 56);
                llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v217, (const llvm::DebugLoc *)(v50 + 48));
                v52 = *(_QWORD *)(v50 + 40);
                LODWORD(v222) = 10;
                BYTE4(v222) = 2;
                v224 = *(_OWORD *)&v217.__r_.__value_.__l.__data_;
                v223 = v51;
                v225 = "iroutliner";
                v226 = "WouldNotDecreaseSize";
                v227 = 20;
                v228 = 0;
                v229 = 0;
                v230 = v232;
                v231 = 0x400000000;
                v233 = 0;
                v234 = -1;
                v235 = v52;
                v221 = &off_1E814E538;
                v217.__r_.__value_.__r.__words[0] = (std::string::size_type)"did not outline ";
                v217.__r_.__value_.__l.__size_ = 16;
                sub_1C53B17B4((uint64_t)&v230, (const void **)&v217.__r_.__value_.__l.__data_);
                std::to_string(&v217, v17[1] - *v17);
                if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v53 = &v217;
                else
                  v53 = (std::string *)v217.__r_.__value_.__r.__words[0];
                if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = *((_BYTE *)&v217.__r_.__value_.__s + 23) & 0x7F;
                else
                  size = v217.__r_.__value_.__l.__size_;
                v211 = 6;
                strcpy((char *)v210, "String");
                if (size > 0x7FFFFFFFFFFFFFF7)
LABEL_328:
                  abort();
                if (size >= 0x17)
                {
                  v56 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((size | 7) != 0x17)
                    v56 = size | 7;
                  v192 = v56 + 1;
                  v57 = v53;
                  v58 = (void **)operator new(v56 + 1);
                  v53 = v57;
                  v55 = v58;
                  v213 = size;
                  v214 = v192 | 0x8000000000000000;
                  v212 = v58;
                }
                else
                {
                  HIBYTE(v214) = size;
                  v55 = &v212;
                  if (!size)
                    goto LABEL_86;
                }
                memmove(v55, v53, size);
LABEL_86:
                *((_BYTE *)v55 + size) = 0;
                v215 = 0;
                v216 = 0;
                v59 = sub_1C47E3888((uint64_t)&v221, (uint64_t)v210);
                v205 = " regions due to estimated increase of ";
                v206 = 38;
                sub_1C53B17B4(v59 + 80, (const void **)&v205);
                v60 = *v35;
                if (*v33 == 1)
                  v61 = *v38 & 0xFFFFFFFF00000000 | 1;
                else
                  v61 = *v38;
                v62 = __OFSUB__(v60, *v36);
                v63 = v60 - *v36;
                if (v62)
                  v64 = (v63 >> 63) ^ 0x8000000000000000;
                else
                  v64 = v63;
                llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v205, "InstructionIncrease", 0x13uLL, v64, v61);
                v65 = sub_1C47E3888(v59, (uint64_t)&v205);
                v195 = " instructions at locations ";
                v196 = 27;
                sub_1C53B17B4(v65 + 80, (const void **)&v195);
                if (v209 < 0)
                  operator delete(v208);
                v14 = v188;
                if (v207 < 0)
                  operator delete(v205);
                if (SHIBYTE(v214) < 0)
                  operator delete(v212);
                if (v211 < 0)
                  operator delete(v210[0]);
                if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v217.__r_.__value_.__l.__data_);
                v67 = *v17;
                v66 = v17[1];
                if (*v17 != v66)
                {
                  while (1)
                  {
                    v71 = *(char **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)*v67 + 8) + 16) + 48);
                    v195 = v71;
                    if (v71)
                      llvm::MetadataTracking::track((uint64_t)&v195, (unsigned __int8 *)v71, 2);
                    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v217, "DebugLoc", 8uLL, (const llvm::DebugLoc *)&v195);
                    sub_1C47E3888((uint64_t)&v221, (uint64_t)&v217);
                    if (v219 < 0)
                      operator delete(v218);
                    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v217.__r_.__value_.__l.__data_);
                    if (v195)
                      llvm::MetadataTracking::untrack((uint64_t)&v195, (unsigned __int8 *)v195);
                    if (++v67 == v66)
                      break;
                    v217.__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
                    v217.__r_.__value_.__l.__size_ = 1;
                    sub_1C53B17B4((uint64_t)&v230, (const void **)&v217.__r_.__value_.__l.__data_);
                  }
                }
                llvm::OptimizationRemarkEmitter::emit(v40, (llvm::DiagnosticInfoOptimizationBase *)&v221);
                v221 = &off_1E814E790;
                v68 = (char *)v230;
                if ((_DWORD)v231)
                {
                  v69 = (unint64_t)v231 << 6;
                  v15 = (uint64_t *)v185;
                  do
                  {
                    v70 = (void **)&v68[v69];
                    if (v68[v69 - 17] < 0)
                      operator delete(*(v70 - 5));
                    if (*((char *)v70 - 41) < 0)
                      operator delete(*(v70 - 8));
                    v69 -= 64;
                  }
                  while (v69);
                  v68 = (char *)v230;
                }
                else
                {
                  v15 = (uint64_t *)v185;
                }
                v12 = v181;
                if (v68 != v232)
                  free(v68);
                goto LABEL_43;
              }
              v15 = (uint64_t *)v185;
              v12 = v181;
              v14 = v188;
            }
          }
        }
      }
LABEL_43:
      ++v14;
      v13 += 3;
      if (v13 == v12)
        goto LABEL_125;
    }
  }
  v15 = 0;
  __p = 0;
LABEL_125:
  sub_1C56F8798((uint64_t)this + 104);
  v72 = (uint64_t *)__p;
  v73 = (char *)v15 - (char *)__p;
  if ((unint64_t)((char *)v15 - (char *)__p) > 8)
  {
    v74 = v15;
    v75 = v73 >> 3;
    if (v73 < 1025)
    {
LABEL_130:
      v72 = (uint64_t *)__p;
      v15 = v74;
      sub_1C56FDDA0((unint64_t)__p, v74, v75, 0, 0);
    }
    else
    {
      v76 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v77 = v73 >> 3;
      while (1)
      {
        v78 = (uint64_t *)operator new(8 * v77, v76);
        if (v78)
          break;
        v39 = v77 > 1;
        v77 >>= 1;
        if (!v39)
          goto LABEL_130;
      }
      v79 = v78;
      v72 = (uint64_t *)__p;
      v15 = v74;
      sub_1C56FDDA0((unint64_t)__p, v74, v75, v78, v77);
      operator delete(v79);
    }
  }
  v195 = 0;
  v196 = 0;
  v197 = 0;
  v80 = (unsigned int *****)v72;
  if (v72 == v15)
  {
    v167 = v204;
    if (v72)
      goto LABEL_308;
    goto LABEL_309;
  }
  v81 = 0;
  v82 = 0;
  v83 = v80;
  do
  {
    v84 = **v83;
    v85 = (*v83)[1];
    v189 = *v83;
    for (i = v81; v84 != v85; i = v88)
    {
      v87 = *v84;
      if (llvm::IROutliner::isCompatibleWithAlreadyOutlinedCode(this, *v84))
      {
        if (i >= v82)
        {
          v186 = v83;
          v89 = i - v81;
          v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 61)
            goto LABEL_328;
          if (((char *)v82 - (char *)v81) >> 2 > v90)
            v90 = ((char *)v82 - (char *)v81) >> 2;
          if ((unint64_t)((char *)v82 - (char *)v81) >= 0x7FFFFFFFFFFFFFF8)
            v91 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v91 = v90;
          if (v91)
          {
            if (v91 >> 61)
              goto LABEL_329;
            v92 = (char *)operator new(8 * v91);
          }
          else
          {
            v92 = 0;
          }
          v93 = (unsigned int ***)&v92[8 * v89];
          *v93 = v87;
          v88 = v93 + 1;
          while (i != v81)
          {
            v94 = *--i;
            *--v93 = v94;
          }
          v82 = (unsigned int ***)&v92[8 * v91];
          if (v81)
            operator delete(v81);
          v81 = v93;
          v83 = v186;
          goto LABEL_155;
        }
        *i++ = v87;
      }
      v88 = i;
LABEL_155:
      ++v84;
    }
    if ((unint64_t)((char *)i - (char *)v81) < 0x10)
      goto LABEL_246;
    v95 = (llvm::OutlinableRegion **)*v189;
    if (*v189)
    {
      v189[1] = (unsigned int ***)v95;
      operator delete(v95);
    }
    *v189 = v81;
    v189[1] = i;
    v189[2] = v82;
    if (*((_BYTE *)this + 1))
    {
      v189[29] = 0;
      *((_DWORD *)v189 + 60) = 0;
      v189[31] = 0;
      *((_DWORD *)v189 + 64) = 0;
      llvm::IROutliner::findCostBenefit(this, a2, (llvm::OutlinableRegion ***)v189);
      v96 = *((_DWORD *)v189 + 64);
      v97 = *((_DWORD *)v189 + 60);
      v98 = v96 < v97;
      if (v96 == v97)
        v98 = (uint64_t)v189[31] < (uint64_t)v189[29];
      if (!v98)
        goto LABEL_245;
    }
    v187 = v83;
    v99 = (llvm::OutlinableRegion **)*v189;
    v100 = (llvm::OutlinableRegion **)v189[1];
    if (*v189 == (unsigned int ***)v100)
    {
      v103 = 0;
      v102 = 0;
      v101 = 0;
    }
    else
    {
      v101 = 0;
      v102 = 0;
      v103 = 0;
      do
      {
        v104 = *v99;
        llvm::OutlinableRegion::splitCandidate(*v99);
        if (*((_BYTE *)v104 + 216))
        {
          if (v102 >= (llvm::OutlinableRegion **)v103)
          {
            v105 = v102 - v101;
            v106 = v105 + 1;
            if ((unint64_t)(v105 + 1) >> 61)
              goto LABEL_328;
            if (((char *)v103 - (char *)v101) >> 2 > v106)
              v106 = ((char *)v103 - (char *)v101) >> 2;
            if ((unint64_t)((char *)v103 - (char *)v101) >= 0x7FFFFFFFFFFFFFF8)
              v107 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v107 = v106;
            if (v107)
            {
              if (v107 >> 61)
                goto LABEL_329;
              v108 = (char *)operator new(8 * v107);
            }
            else
            {
              v108 = 0;
            }
            v109 = (llvm::OutlinableRegion **)&v108[8 * v105];
            *v109 = v104;
            v110 = v109 + 1;
            while (v102 != v101)
            {
              v111 = *--v102;
              *--v109 = v111;
            }
            v103 = (unsigned int ***)&v108[8 * v107];
            if (v101)
              operator delete(v101);
            v102 = v110;
            v101 = v109;
          }
          else
          {
            *v102++ = v104;
          }
        }
        ++v99;
      }
      while (v99 != v100);
      v99 = (llvm::OutlinableRegion **)*v189;
    }
    if (v99)
    {
      v189[1] = (unsigned int ***)v99;
      operator delete(v99);
    }
    *v189 = (unsigned int ***)v101;
    v189[1] = (unsigned int ***)v102;
    v189[2] = v103;
    if ((unint64_t)((char *)v102 - (char *)v101) >= 0x10)
    {
      if (v101 != v102)
      {
        v113 = 0;
        v114 = 0;
        v115 = 0;
        while (1)
        {
          v116 = *v101;
          v221 = &v223;
          v222 = 0x600000000;
          memset(&v217, 0, 20);
          sub_1C56F86A8(*(_QWORD *)(*(_QWORD *)v116 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v116 + 16) + 8), (uint64_t)&v217, (uint64_t)&v221);
          v117 = sub_1C484358C((uint64_t)this + 104, 240, 3);
          v194 = 8;
          strcpy((char *)&v193, "outlined");
          *((_QWORD *)v116 + 24) = llvm::CodeExtractor::CodeExtractor(v117, (uint64_t *)v221, v222, 0, 0, 0, 0, 0, 0, 0, 0, &v193);
          if (!llvm::IROutliner::extractSection(this, v116))
            goto LABEL_234;
          v118 = **(_DWORD **)v116;
          v119 = v118 + *(_DWORD *)(*(_QWORD *)v116 + 4) - 1;
          while (1)
          {
            LODWORD(v210[0]) = v118;
            if (v118 > v119)
              break;
            v120 = *((_DWORD *)this + 6);
            if (v120)
            {
              v121 = *((_QWORD *)this + 1);
              v122 = v120 - 1;
              v123 = v122 & (37 * v118);
              v124 = (_DWORD *)(v121 + 4 * v123);
              v125 = *v124;
              if (v118 == *v124)
                goto LABEL_215;
              v126 = 0;
              v127 = 1;
              while (v125 != -1)
              {
                if (v126)
                  v128 = 0;
                else
                  v128 = v125 == -2;
                if (v128)
                  v126 = v124;
                v129 = v123 + v127++;
                v123 = v129 & v122;
                v124 = (_DWORD *)(v121 + 4 * v123);
                v125 = *v124;
                if (v118 == *v124)
                  goto LABEL_215;
              }
              if (v126)
                v130 = v126;
              else
                v130 = v124;
            }
            else
            {
              v130 = 0;
            }
            v131 = sub_1C4A0C948((uint64_t)this + 8, (uint64_t)v210, v210, v130);
            *v131 = v210[0];
            v118 = v210[0];
LABEL_215:
            ++v118;
          }
          if (v114 < (llvm::OutlinableRegion **)v115)
          {
            *v114++ = v116;
            goto LABEL_234;
          }
          v132 = v114 - v113;
          v133 = v132 + 1;
          if ((unint64_t)(v132 + 1) >> 61)
            goto LABEL_328;
          if (((char *)v115 - (char *)v113) >> 2 > v133)
            v133 = ((char *)v115 - (char *)v113) >> 2;
          if ((unint64_t)((char *)v115 - (char *)v113) >= 0x7FFFFFFFFFFFFFF8)
            v134 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v134 = v133;
          if (v134)
          {
            if (!(v134 >> 61))
            {
              v135 = (char *)operator new(8 * v134);
              goto LABEL_228;
            }
LABEL_329:
            sub_1C4764EE4();
          }
          v135 = 0;
LABEL_228:
          v136 = (llvm::OutlinableRegion **)&v135[8 * v132];
          *v136 = v116;
          v137 = v136 + 1;
          while (v114 != v113)
          {
            v138 = *--v114;
            *--v136 = v138;
          }
          v115 = (unsigned int ***)&v135[8 * v134];
          if (v113)
            operator delete(v113);
          v114 = v137;
          v113 = v136;
LABEL_234:
          MEMORY[0x1CAA32FB4](v217.__r_.__value_.__r.__words[0], 8);
          if (v221 != &v223)
            free(v221);
          if (++v101 == v102)
          {
            v102 = (llvm::OutlinableRegion **)*v189;
            goto LABEL_239;
          }
        }
      }
      v115 = 0;
      v114 = 0;
      v113 = 0;
LABEL_239:
      v83 = v187;
      if (v102)
      {
        v189[1] = (unsigned int ***)v102;
        operator delete(v102);
      }
      *v189 = (unsigned int ***)v113;
      v189[1] = (unsigned int ***)v114;
      v189[2] = v115;
      if (v113 == v114)
      {
LABEL_245:
        v82 = 0;
        v81 = 0;
        goto LABEL_246;
      }
      v139 = (OutlinableGroup *)v189;
      v140 = (llvm::OptimizationRemarkEmitter *)(*((uint64_t (**)(_QWORD, _QWORD))this + 11))(*((_QWORD *)this + 12), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)*v113 + 25) + 40) + 56));
      v141 = ****(_QWORD ****)v140;
      if (!*(_QWORD *)(v141 + 128)
        && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v141 + 72) + 48))(*(_QWORD *)(v141 + 72)))
      {
LABEL_244:
        llvm::IROutliner::deduplicateExtractedSections(this, a2, v139, &v195, &v204);
        goto LABEL_245;
      }
      v142 = *(_QWORD *)(*((_QWORD *)***v189 + 1) + 16);
      v143 = *(_QWORD *)(*(_QWORD *)(v142 + 40) + 56);
      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v217, (const llvm::DebugLoc *)(v142 + 48));
      v144 = *(_QWORD *)(v142 + 40);
      LODWORD(v222) = 9;
      BYTE4(v222) = 2;
      v224 = *(_OWORD *)&v217.__r_.__value_.__l.__data_;
      v223 = v143;
      v225 = "iroutliner";
      v226 = "Outlined";
      v227 = 8;
      v228 = 0;
      v229 = 0;
      v230 = v232;
      v231 = 0x400000000;
      v233 = 0;
      v234 = -1;
      v235 = v144;
      v221 = &off_1E814E500;
      v217.__r_.__value_.__r.__words[0] = (std::string::size_type)"outlined ";
      v217.__r_.__value_.__l.__size_ = 9;
      sub_1C53B17B4((uint64_t)&v230, (const void **)&v217.__r_.__value_.__l.__data_);
      std::to_string(&v217, v189[1] - *v189);
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v145 = &v217;
      else
        v145 = (std::string *)v217.__r_.__value_.__r.__words[0];
      if ((v217.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v146 = *((_BYTE *)&v217.__r_.__value_.__s + 23) & 0x7F;
      else
        v146 = v217.__r_.__value_.__l.__size_;
      v211 = 6;
      strcpy((char *)v210, "String");
      if (v146 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_328;
      if (v146 >= 0x17)
      {
        v148 = (v146 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v146 | 7) != 0x17)
          v148 = v146 | 7;
        v149 = v148 + 1;
        v147 = operator new(v148 + 1);
        v213 = v146;
        v214 = v149 | 0x8000000000000000;
        v212 = v147;
      }
      else
      {
        HIBYTE(v214) = v146;
        v147 = &v212;
        if (!v146)
          goto LABEL_262;
      }
      memmove(v147, v145, v146);
LABEL_262:
      *((_BYTE *)v147 + v146) = 0;
      v215 = 0;
      v216 = 0;
      v150 = sub_1C47E3888((uint64_t)&v221, (uint64_t)v210);
      v205 = " regions with decrease of ";
      v206 = 26;
      sub_1C53B17B4(v150 + 80, (const void **)&v205);
      v151 = v189[29];
      if (*((_DWORD *)v189 + 64) == 1)
        v152 = (unint64_t)v189[30] & 0xFFFFFFFF00000000 | 1;
      else
        v152 = (unint64_t)v189[30];
      v153 = v189[31];
      v62 = __OFSUB__(v151, v153);
      v154 = (char *)v151 - (char *)v153;
      if (v62)
        v155 = (v154 >> 63) ^ 0x8000000000000000;
      else
        v155 = v154;
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v205, "Benefit", 7uLL, v155, v152);
      v156 = sub_1C47E3888(v150, (uint64_t)&v205);
      v220[0] = " instructions at locations ";
      v220[1] = (const void *)27;
      sub_1C53B17B4(v156 + 80, v220);
      if (v209 < 0)
        operator delete(v208);
      if (v207 < 0)
        operator delete(v205);
      if (SHIBYTE(v214) < 0)
        operator delete(v212);
      if (v211 < 0)
        operator delete(v210[0]);
      if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v217.__r_.__value_.__l.__data_);
      v158 = (llvm::OutlinableRegion **)*v189;
      v157 = (llvm::OutlinableRegion **)v189[1];
      if (*v189 != (unsigned int ***)v157)
      {
        while (1)
        {
          v162 = *(void **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)*v158 + 8) + 16) + 48);
          v220[0] = v162;
          if (v162)
            llvm::MetadataTracking::track((uint64_t)v220, (unsigned __int8 *)v162, 2);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v217, "DebugLoc", 8uLL, (const llvm::DebugLoc *)v220);
          sub_1C47E3888((uint64_t)&v221, (uint64_t)&v217);
          if (v219 < 0)
            operator delete(v218);
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v217.__r_.__value_.__l.__data_);
          if (v220[0])
            llvm::MetadataTracking::untrack((uint64_t)v220, (unsigned __int8 *)v220[0]);
          if (++v158 == v157)
            break;
          v217.__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
          v217.__r_.__value_.__l.__size_ = 1;
          sub_1C53B17B4((uint64_t)&v230, (const void **)&v217.__r_.__value_.__l.__data_);
        }
      }
      llvm::OptimizationRemarkEmitter::emit(v140, (llvm::DiagnosticInfoOptimizationBase *)&v221);
      v221 = &off_1E814E790;
      v159 = (char *)v230;
      if ((_DWORD)v231)
      {
        v160 = (unint64_t)v231 << 6;
        v83 = v187;
        v139 = (OutlinableGroup *)v189;
        do
        {
          v161 = (void **)&v159[v160];
          if (v159[v160 - 17] < 0)
            operator delete(*(v161 - 5));
          if (*((char *)v161 - 41) < 0)
            operator delete(*(v161 - 8));
          v160 -= 64;
        }
        while (v160);
        v159 = (char *)v230;
      }
      else
      {
        v83 = v187;
        v139 = (OutlinableGroup *)v189;
      }
      if (v159 != v232)
        free(v159);
      goto LABEL_244;
    }
    v83 = v187;
    if (v101 == v102)
      goto LABEL_245;
    do
    {
      v112 = *v101++;
      llvm::OutlinableRegion::reattachCandidate(v112);
      v82 = 0;
      v81 = 0;
    }
    while (v101 != v102);
LABEL_246:
    ++v83;
  }
  while (v83 != (unsigned int *****)v15);
  v164 = v195;
  v163 = (llvm::Function **)v196;
  if (v195 != (char *)v196)
  {
    v165 = (llvm::Function **)v195;
    do
    {
      v166 = *v165++;
      llvm::Function::eraseFromParent(v166);
    }
    while (v165 != v163);
  }
  v167 = v204;
  if (v164)
    operator delete(v164);
  if (v81)
    operator delete(v81);
  v80 = (unsigned int *****)__p;
  if (__p)
LABEL_308:
    operator delete(v80);
LABEL_309:
  MEMORY[0x1CAA32FB4](v200[0], 4);
  v168 = (char *)v202;
  if (v202)
  {
    v169 = v203;
    v170 = v202;
    if (v203 != v202)
    {
      do
      {
        MEMORY[0x1CAA32FB4](*((_QWORD *)v169 - 8), 8);
        v171 = *((unsigned int *)v169 - 18);
        v172 = *((_QWORD *)v169 - 11);
        if ((_DWORD)v171)
        {
          v173 = 40 * v171;
          v174 = (_QWORD *)(v172 + 32);
          do
          {
            if (*((_DWORD *)v174 - 8) <= 0xFFFFFFFD)
            {
              v175 = (_QWORD *)*(v174 - 2);
              if (v174 != v175)
                free(v175);
            }
            v174 += 5;
            v173 -= 40;
          }
          while (v173);
          v172 = *((_QWORD *)v169 - 11);
        }
        MEMORY[0x1CAA32FB4](v172, 8);
        MEMORY[0x1CAA32FB4](*((_QWORD *)v169 - 15), 4);
        MEMORY[0x1CAA32FB4](*((_QWORD *)v169 - 19), 8);
        MEMORY[0x1CAA32FB4](*((_QWORD *)v169 - 22), 8);
        MEMORY[0x1CAA32FB4](*((_QWORD *)v169 - 25), 8);
        v176 = (void *)*((_QWORD *)v169 - 31);
        if (v176)
        {
          *((_QWORD *)v169 - 30) = v176;
          operator delete(v176);
        }
        v177 = v169 - 272;
        v178 = (void *)*((_QWORD *)v169 - 34);
        if (v178)
        {
          *((_QWORD *)v169 - 33) = v178;
          operator delete(v178);
        }
        v169 -= 272;
      }
      while (v177 != v168);
      v170 = v202;
    }
    v203 = v168;
    operator delete(v170);
  }
  return v167;
}

uint64_t sub_1C56F86A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[11];

  if (result != a2)
  {
    v15[9] = v4;
    v15[10] = v5;
    v9 = result;
    v10 = a4 + 16;
    do
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v9 + 16) + 40);
      v14 = 0;
      v15[0] = v13;
      result = sub_1C4E36498((uint64_t *)a3, v15, &v14);
      if (!(_DWORD)result || v14 == *(_QWORD *)a3 + 8 * *(unsigned int *)(a3 + 16))
      {
        result = sub_1C6187FB8((_DWORD *)a3, &v13, (uint64_t)v15);
        v11 = v13;
        v12 = *(unsigned int *)(a4 + 8);
        if (v12 >= *(unsigned int *)(a4 + 12))
        {
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v10, v12 + 1, 8);
          v12 = *(unsigned int *)(a4 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a4 + 8 * v12) = v11;
        ++*(_DWORD *)(a4 + 8);
      }
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9 != a2);
  }
  return result;
}

uint64_t sub_1C56F8798(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t i;
  void *v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t j;
  void *v17;
  void *v18;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      for (i = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 240; i <= v8; i += 240)
      {
        v10 = *(void **)(i - 24);
        if (v10)
        {
          *(_QWORD *)(i - 16) = v10;
          operator delete(v10);
        }
        MEMORY[0x1CAA32FB4](*(_QWORD *)(i - 48), 8);
        if (*(char *)(i - 49) < 0)
          operator delete(*(void **)(i - 72));
        v11 = *(void **)(i - 120);
        if ((void *)(i - 104) != v11)
          free(v11);
        sub_1C5408A20((_QWORD *)(i - 184));
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v12 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD **)(a1 + 64);
    v14 = &v13[2 * v12];
    do
    {
      v15 = *v13 + v13[1];
      for (j = ((*v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 240; j <= v15; j += 240)
      {
        v17 = *(void **)(j - 24);
        if (v17)
        {
          *(_QWORD *)(j - 16) = v17;
          operator delete(v17);
        }
        MEMORY[0x1CAA32FB4](*(_QWORD *)(j - 48), 8);
        if (*(char *)(j - 49) < 0)
          operator delete(*(void **)(j - 72));
        v18 = *(void **)(j - 120);
        if ((void *)(j - 104) != v18)
          free(v18);
        sub_1C5408A20((_QWORD *)(j - 184));
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return sub_1C4926A50(a1);
}

BOOL llvm::IROutliner::run(llvm::IROutliner *this, llvm::Module *a2)
{
  *((_BYTE *)this + 1) = byte_1ED80BD28 ^ 1;
  *(_BYTE *)this = byte_1ED80BC68;
  return llvm::IROutliner::doOutline(this, a2) != 0;
}

void llvm::initializeIROutlinerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831EA8);
  if (v2 != -1)
  {
    v5[0] = sub_1C56F89B4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831EA8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56F89B4(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeIRSimilarityIdentifierWrapperPassPass(a1, a2);
  llvm::initializeOptimizationRemarkEmitterWrapperPassPass(a1, v3);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  v4 = operator new();
  *(_QWORD *)v4 = "IR Outliner";
  *(_QWORD *)(v4 + 8) = 11;
  *(_QWORD *)(v4 + 16) = "iroutliner";
  *(_QWORD *)(v4 + 24) = 10;
  *(_QWORD *)(v4 + 32) = &unk_1EF8F32D8;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C56FBB80;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C56F8A58(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32D8;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817A5E0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831EA8);
  if (v3 != -1)
  {
    v7[0] = sub_1C56F89B4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831EA8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_DWORD *sub_1C56F8B20(_DWORD *result, uint64_t a2, _DWORD *a3, _QWORD *a4)
{
  _DWORD *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  char v14;
  int v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  int v28;
  int v29;
  unsigned int v30;
  int v31;
  int v32;
  BOOL v33;
  unsigned int v34;

  v7 = result;
  v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)a2;
    v10 = v8 - 1;
    v11 = (37 * *a3) & (v8 - 1);
    v12 = *(_QWORD *)a2 + 16 * v11;
    v13 = *(_DWORD *)v12;
    if (*a3 == *(_DWORD *)v12)
    {
LABEL_3:
      v14 = 0;
      goto LABEL_10;
    }
    v16 = 0;
    v17 = 1;
    while (v13 != -1)
    {
      if (v16)
        v18 = 0;
      else
        v18 = v13 == -2;
      if (v18)
        v16 = v12;
      v19 = v11 + v17++;
      v11 = v19 & v10;
      v12 = v9 + 16 * (v19 & v10);
      v13 = *(_DWORD *)v12;
      if (*a3 == *(_DWORD *)v12)
        goto LABEL_3;
    }
    if (v16)
      v12 = v16;
  }
  else
  {
    v12 = 0;
  }
  v15 = *(_DWORD *)(a2 + 8);
  if (4 * v15 + 4 >= 3 * v8)
  {
    result = sub_1C49F41C0((uint64_t *)a2, 2 * v8);
    v20 = *(_DWORD *)(a2 + 16);
    if (v20)
    {
      v21 = v20 - 1;
      v22 = (37 * *a3) & (v20 - 1);
      v12 = *(_QWORD *)a2 + 16 * v22;
      v23 = *(_DWORD *)v12;
      if (*a3 == *(_DWORD *)v12)
        goto LABEL_7;
      v24 = 0;
      v25 = 1;
      while (v23 != -1)
      {
        if (v24)
          v26 = 0;
        else
          v26 = v23 == -2;
        if (v26)
          v24 = v12;
        v27 = v22 + v25++;
        v22 = v27 & v21;
        v12 = *(_QWORD *)a2 + 16 * (v27 & v21);
        v23 = *(_DWORD *)v12;
        if (*a3 == *(_DWORD *)v12)
          goto LABEL_7;
      }
LABEL_46:
      if (v24)
        v12 = v24;
      goto LABEL_7;
    }
LABEL_45:
    v12 = 0;
    goto LABEL_7;
  }
  if (v8 + ~v15 - *(_DWORD *)(a2 + 12) <= v8 >> 3)
  {
    result = sub_1C49F41C0((uint64_t *)a2, v8);
    v28 = *(_DWORD *)(a2 + 16);
    if (v28)
    {
      v29 = v28 - 1;
      v30 = (37 * *a3) & (v28 - 1);
      v12 = *(_QWORD *)a2 + 16 * v30;
      v31 = *(_DWORD *)v12;
      if (*a3 == *(_DWORD *)v12)
        goto LABEL_7;
      v24 = 0;
      v32 = 1;
      while (v31 != -1)
      {
        if (v24)
          v33 = 0;
        else
          v33 = v31 == -2;
        if (v33)
          v24 = v12;
        v34 = v30 + v32++;
        v30 = v34 & v29;
        v12 = *(_QWORD *)a2 + 16 * (v34 & v29);
        v31 = *(_DWORD *)v12;
        if (*a3 == *(_DWORD *)v12)
          goto LABEL_7;
      }
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_7:
  ++*(_DWORD *)(a2 + 8);
  if (*(_DWORD *)v12 != -1)
    --*(_DWORD *)(a2 + 12);
  *(_DWORD *)v12 = *a3;
  *(_QWORD *)(v12 + 8) = *a4;
  v9 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 16);
  v14 = 1;
LABEL_10:
  *(_QWORD *)v7 = v12;
  *((_QWORD *)v7 + 1) = v9 + 16 * v8;
  *((_BYTE *)v7 + 16) = v14;
  return result;
}

unsigned int *sub_1C56F8D5C(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t a5)
{
  char *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v18;
  unint64_t v19;
  unsigned int *v20;
  unint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  _BOOL4 v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  unsigned int *v32;
  uint64_t v33;

  if (a3 >= 2)
  {
    v6 = (char *)result;
    if (a3 == 2)
    {
      v7 = *(a2 - 1);
      v8 = *result;
      if (v7 < *result)
      {
        *result = v7;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v18 = a4;
      v19 = a3 >> 1;
      v20 = &result[a3 >> 1];
      v21 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C56F8F78(result, v20, v21, a4);
        v22 = &v18[v19];
        result = sub_1C56F8F78((unsigned int *)&v6[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v22);
        v23 = &v18[a3];
        v24 = v22;
        while (v24 != v23)
        {
          v25 = v24;
          v26 = *v24;
          v27 = *v18;
          v28 = *v24 < *v18;
          if (v26 >= *v18)
            v29 = *v18;
          else
            v29 = v26;
          v18 += v26 >= *v18;
          v24 = &v25[v28];
          *(_DWORD *)v6 = v29;
          v6 += 4;
          if (v18 == v22)
          {
            if (v24 != v23)
            {
              v30 = 0;
              if (v26 < v27)
                v31 = 1;
              else
                v31 = 2;
              v32 = &v25[v31 & 1];
              do
              {
                *(_DWORD *)&v6[v30 * 4] = v32[v30];
                ++v30;
              }
              while (&v32[v30] != v23);
            }
            return result;
          }
        }
        if (v18 != v22)
        {
          v33 = 0;
          do
          {
            *(_DWORD *)&v6[v33 * 4] = v18[v33];
            ++v33;
          }
          while (&v18[v33] != v22);
        }
      }
      else
      {
        sub_1C56F8D5C(result, v20, v21, a4, a5);
        sub_1C56F8D5C(&v6[4 * (a3 >> 1)], a2, a3 - (a3 >> 1), v18, a5);
        return (unsigned int *)sub_1C56F9150(v6, &v6[4 * (a3 >> 1)], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v18, a5);
      }
    }
    else if (result != a2)
    {
      v10 = result + 1;
      if (result + 1 != a2)
      {
        v11 = 0;
        v12 = result;
        do
        {
          v13 = *v12;
          v12 = v10;
          v14 = *v10;
          if (v14 < v13)
          {
            v15 = v11;
            while (1)
            {
              *(unsigned int *)((char *)result + v15 + 4) = v13;
              if (!v15)
                break;
              v13 = *(unsigned int *)((char *)result + v15 - 4);
              v15 -= 4;
              if (v14 >= v13)
              {
                v16 = (unsigned int *)((char *)result + v15 + 4);
                goto LABEL_15;
              }
            }
            v16 = result;
LABEL_15:
            *v16 = v14;
          }
          v10 = v12 + 1;
          v11 += 4;
        }
        while (v12 + 1 != a2);
      }
    }
  }
  return result;
}

unsigned int *sub_1C56F8F78(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int *a4)
{
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _BOOL4 v25;
  _BOOL4 v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_9:
      *v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      v9 = *(a2 - 1);
      v8 = v9;
      v10 = v9 >= *result;
      if (v9 >= *result)
        v8 = *result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v10)
        v6 = a2 - 1;
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = &result[a3 >> 1];
      sub_1C56F8D5C(result, v20, a3 >> 1, a4, a3 >> 1);
      result = (unsigned int *)sub_1C56F8D5C(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v21 = &v6[a3 >> 1];
      while (v21 != a2)
      {
        v22 = v21;
        v23 = *v21;
        v24 = *v6;
        v25 = *v21 >= *v6;
        v26 = *v21 < *v6;
        if (v23 >= *v6)
          v27 = *v6;
        else
          v27 = v23;
        v21 = &v22[v26];
        v6 += v25;
        *v4++ = v27;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            v28 = 0;
            v29 = &v22[v23 < v24];
            do
            {
              v4[v28] = v29[v28];
              ++v28;
            }
            while (&v29[v28] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        v30 = 0;
        do
        {
          v4[v30] = v6[v30];
          ++v30;
        }
        while (&v6[v30] != v20);
      }
    }
    else if (result != a2)
    {
      v11 = result + 1;
      *a4 = *result;
      if (result + 1 != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*v11 >= v16)
          {
            *v14 = *v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (unsigned int *)((char *)a4 + v18);
                v19 = *(unsigned int *)((char *)a4 + v18 - 4);
                if (*v11 >= v19)
                  break;
                *v17 = v19;
                v18 -= 4;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *v11;
          }
          ++v11;
          v12 += 4;
          v13 = v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

char *sub_1C56F9150(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v7;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  unsigned int v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int v36;
  BOOL v37;
  int64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int v48;
  int v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  BOOL v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _DWORD *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _DWORD *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  _DWORD *v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  BOOL v75;
  unint64_t v76;
  int *v77;
  unsigned int v78;
  _BOOL4 v79;
  uint64_t v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  _DWORD *v86;
  uint64_t v87;
  uint64_t v88;

  if (a5)
  {
    v7 = a5;
    v10 = result;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = *(_DWORD *)a2;
      v13 = -a4;
      while (1)
      {
        v14 = *(_DWORD *)&v10[v11];
        if (v12 < v14)
          break;
        v11 += 4;
        v75 = __CFADD__(v13++, 1);
        if (v75)
          return result;
      }
      v15 = &v10[v11];
      if (-v13 >= v7)
      {
        if (v13 == -1)
        {
          *(_DWORD *)&v10[v11] = v12;
          *(_DWORD *)a2 = v14;
          return result;
        }
        if (v13 <= 0)
          v25 = -v13;
        else
          v25 = 1 - v13;
        v26 = v25 >> 1;
        v20 = &v10[4 * (v25 >> 1) + v11];
        v18 = a3;
        if (a3 != a2)
        {
          v27 = (a3 - a2) >> 2;
          v18 = a2;
          do
          {
            v28 = v27 >> 1;
            v29 = &v18[4 * (v27 >> 1)];
            v31 = *(_DWORD *)v29;
            v30 = v29 + 4;
            v27 += ~(v27 >> 1);
            if (v31 < *(_DWORD *)v20)
              v18 = v30;
            else
              v27 = v28;
          }
          while (v27);
        }
        v17 = (v18 - a2) >> 2;
      }
      else
      {
        if (v7 >= 0)
          v16 = v7;
        else
          v16 = v7 + 1;
        v17 = v16 >> 1;
        v18 = &a2[4 * (v16 >> 1)];
        if (v15 == a2)
        {
          v20 = a2;
        }
        else
        {
          v19 = (a2 - v10 - v11) >> 2;
          v20 = &v10[v11];
          do
          {
            v21 = v19 >> 1;
            v22 = &v20[4 * (v19 >> 1)];
            v24 = *(_DWORD *)v22;
            v23 = v22 + 4;
            v19 += ~(v19 >> 1);
            if (*(_DWORD *)v18 < v24)
              v19 = v21;
            else
              v20 = v23;
          }
          while (v19);
        }
        v26 = (v20 - v10 - v11) >> 2;
      }
      v32 = v18;
      if (v20 != a2)
      {
        v32 = v20;
        if (a2 != v18)
        {
          if (v20 + 4 == a2)
          {
            v81 = *(_DWORD *)v20;
            v38 = v18 - a2;
            v85 = a6;
            v87 = a7;
            v39 = a3;
            v83 = v17;
            v40 = v26;
            memmove(v20, a2, v18 - a2);
            v26 = v40;
            v17 = v83;
            a6 = v85;
            v15 = &v10[v11];
            a7 = v87;
            a3 = v39;
            v32 = &v20[v38];
            *(_DWORD *)v32 = v81;
          }
          else if (a2 + 4 == v18)
          {
            v41 = *((_DWORD *)v18 - 1);
            v32 = v20 + 4;
            if (v18 - 4 != v20)
            {
              v86 = a6;
              v88 = a7;
              v42 = a3;
              v84 = v17;
              v43 = v26;
              v82 = *((_DWORD *)v18 - 1);
              memmove(v20 + 4, v20, v18 - 4 - v20);
              v41 = v82;
              v26 = v43;
              v17 = v84;
              a6 = v86;
              v15 = &v10[v11];
              a7 = v88;
              a3 = v42;
            }
            *(_DWORD *)v20 = v41;
          }
          else
          {
            v33 = (a2 - v20) >> 2;
            if (v33 == (v18 - a2) >> 2)
            {
              if (a2 != v18 && v20 != a2)
              {
                v34 = v20 + 4;
                v35 = a2 + 4;
                do
                {
                  v36 = *((_DWORD *)v34 - 1);
                  *((_DWORD *)v34 - 1) = *((_DWORD *)v35 - 1);
                  *((_DWORD *)v35 - 1) = v36;
                  if (v34 == a2)
                    break;
                  v34 += 4;
                  v37 = v35 == v18;
                  v35 += 4;
                }
                while (!v37);
              }
              v32 = a2;
            }
            else
            {
              v44 = (v18 - a2) >> 2;
              v45 = (a2 - v20) >> 2;
              do
              {
                v46 = v45;
                v45 = v44;
                v44 = v46 % v44;
              }
              while (v44);
              if (v45)
              {
                v47 = &v20[4 * v45];
                do
                {
                  v49 = *((_DWORD *)v47 - 1);
                  v47 -= 4;
                  v48 = v49;
                  v50 = &v47[4 * v33];
                  v51 = v47;
                  do
                  {
                    v52 = v50;
                    *(_DWORD *)v51 = *(_DWORD *)v50;
                    v53 = &v50[4 * v33];
                    v54 = __OFSUB__(v33, (v18 - v50) >> 2);
                    v56 = v33 - ((v18 - v50) >> 2);
                    v55 = (v56 < 0) ^ v54;
                    v50 = &v20[4 * v56];
                    if (v55)
                      v50 = v53;
                    v51 = v52;
                  }
                  while (v50 != v47);
                  *(_DWORD *)v52 = v48;
                }
                while (v47 != v20);
              }
              v32 = &v20[4 * ((v18 - a2) >> 2)];
            }
          }
        }
      }
      a4 = -(v26 + v13);
      v57 = v7 - v17;
      if (v26 + v17 >= v7 - (v26 + v17) - v13)
      {
        v63 = v26;
        v64 = -(v26 + v13);
        v65 = v17;
        v66 = v7 - v17;
        v67 = a6;
        v68 = a7;
        v69 = v15;
        result = (char *)sub_1C56F9150(v32, v18, a3, v64, v66);
        v62 = v69;
        a7 = v68;
        a6 = v67;
        v18 = v20;
        v57 = v65;
        a4 = v63;
        a3 = v32;
      }
      else
      {
        v58 = &v10[v11];
        v59 = a6;
        v60 = a7;
        v61 = a3;
        result = (char *)sub_1C56F9150(v58, v20, v32, v26, v17);
        a7 = v60;
        a3 = v61;
        a6 = v59;
        v62 = v32;
      }
      v7 = v57;
      v10 = v62;
      a2 = v18;
      if (!v57)
        return result;
    }
    if (a4 <= v7)
    {
      if (v10 != a2)
      {
        v76 = 0;
        do
        {
          a6[v76 / 4] = *(_DWORD *)&v10[v76];
          v76 += 4;
        }
        while (&v10[v76] != a2);
        if (v76)
        {
          v77 = a6;
          while (a2 != a3)
          {
            v78 = *(_DWORD *)a2;
            v79 = *(_DWORD *)a2 >= *v77;
            if (*(_DWORD *)a2 >= *v77)
              v78 = *v77;
            a2 += 4 * (*(_DWORD *)a2 < *v77);
            v77 += v79;
            *(_DWORD *)v10 = v78;
            v10 += 4;
            if (&a6[v76 / 4] == v77)
              return result;
          }
          return (char *)memmove(v10, v77, (char *)a6 - (char *)v77 + v76);
        }
      }
    }
    else if (a2 != a3)
    {
      v70 = 0;
      do
      {
        a6[v70] = *(_DWORD *)&a2[v70 * 4];
        ++v70;
      }
      while (&a2[v70 * 4] != a3);
      if (v70 * 4)
      {
        v71 = &a6[v70];
        v72 = a3 - 4;
        while (a2 != v10)
        {
          v73 = *(v71 - 1);
          v74 = *((_DWORD *)a2 - 1);
          v75 = v73 >= v74;
          if (v73 <= v74)
            v73 = *((_DWORD *)a2 - 1);
          if (v75)
            --v71;
          else
            a2 -= 4;
          *(_DWORD *)v72 = v73;
          v72 -= 4;
          if (v71 == a6)
            return result;
        }
        if (v71 != a6)
        {
          v80 = 0;
          do
          {
            *(_DWORD *)&v72[v80 * 4] = v71[v80 - 1];
            --v80;
          }
          while (&v71[v80] != a6);
        }
      }
    }
  }
  return result;
}

_DWORD *sub_1C56F965C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62961B0(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -1;
      result += 10;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C56F9720(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62964F0(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

unsigned int *sub_1C56F97D8(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int *a4, uint64_t a5)
{
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v19;
  unint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL4 v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  unsigned int *v33;
  uint64_t v34;

  if (a3 >= 2)
  {
    v6 = result;
    if (a3 == 2)
    {
      v7 = *(a2 - 1);
      v8 = *result;
      if (v7 < *result)
      {
        *result = v7;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v19 = a4;
      v20 = a3 >> 1;
      v21 = &result[a3 >> 1];
      v22 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C56F99F0(result, v21, v22, a4);
        v23 = &v19[v20];
        result = sub_1C56F99F0(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v23);
        v24 = &v19[a3];
        v25 = v23;
        while (v25 != v24)
        {
          v26 = v25;
          v27 = *v25;
          v28 = *v19;
          v29 = *v25 < *v19;
          if (v27 >= *v19)
            v30 = *v19;
          else
            v30 = v27;
          v19 += v27 >= *v19;
          v25 = &v26[v29];
          *v6++ = v30;
          if (v19 == v23)
          {
            if (v25 != v24)
            {
              v31 = 0;
              if (v27 < v28)
                v32 = 1;
              else
                v32 = 2;
              v33 = &v26[v32 & 1];
              do
              {
                v6[v31] = v33[v31];
                ++v31;
              }
              while (&v33[v31] != v24);
            }
            return result;
          }
        }
        if (v19 != v23)
        {
          v34 = 0;
          do
          {
            v6[v34] = v19[v34];
            ++v34;
          }
          while (&v19[v34] != v23);
        }
      }
      else
      {
        sub_1C56F97D8(result, v21, v22, a4, a5);
        sub_1C56F97D8(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v19, a5);
        return sub_1C56F9BC8(v6, &v6[a3 >> 1], a2, a3 >> 1, a3 - (a3 >> 1), v19, a5);
      }
    }
    else if (result != a2)
    {
      v10 = result + 1;
      if (result + 1 != a2)
      {
        v11 = 4;
        v12 = result;
        do
        {
          v14 = *v12;
          v13 = v12[1];
          v12 = v10;
          if (v13 < v14)
          {
            v15 = v11;
            while (1)
            {
              *(unsigned int *)((char *)result + v15) = v14;
              v16 = v15 - 4;
              if (v15 == 4)
                break;
              v14 = *(unsigned int *)((char *)result + v15 - 8);
              v15 -= 4;
              if (v13 >= v14)
              {
                v17 = (unsigned int *)((char *)result + v16);
                goto LABEL_15;
              }
            }
            v17 = result;
LABEL_15:
            *v17 = v13;
          }
          v10 = v12 + 1;
          v11 += 4;
        }
        while (v12 + 1 != a2);
      }
    }
  }
  return result;
}

unsigned int *sub_1C56F99F0(unsigned int *result, unsigned int *a2, unint64_t a3, unsigned int *a4)
{
  unsigned int *v4;
  unsigned int *v6;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;
  _BOOL4 v25;
  _BOOL4 v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t v30;

  if (a3)
  {
    v4 = a4;
    v6 = result;
    if (a3 == 1)
    {
LABEL_9:
      *v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      v9 = *(a2 - 1);
      v8 = v9;
      v10 = v9 >= *result;
      if (v9 >= *result)
        v8 = *result;
      *a4 = v8;
      v4 = a4 + 1;
      if (v10)
        v6 = a2 - 1;
      goto LABEL_9;
    }
    if ((uint64_t)a3 > 8)
    {
      v20 = &result[a3 >> 1];
      sub_1C56F97D8(result, v20, a3 >> 1, a4, a3 >> 1);
      result = (unsigned int *)sub_1C56F97D8(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v21 = &v6[a3 >> 1];
      while (v21 != a2)
      {
        v22 = v21;
        v23 = *v21;
        v24 = *v6;
        v25 = *v21 >= *v6;
        v26 = *v21 < *v6;
        if (v23 >= *v6)
          v27 = *v6;
        else
          v27 = v23;
        v21 = &v22[v26];
        v6 += v25;
        *v4++ = v27;
        if (v6 == v20)
        {
          if (v21 != a2)
          {
            v28 = 0;
            v29 = &v22[v23 < v24];
            do
            {
              v4[v28] = v29[v28];
              ++v28;
            }
            while (&v29[v28] != a2);
          }
          return result;
        }
      }
      if (v6 != v20)
      {
        v30 = 0;
        do
        {
          v4[v30] = v6[v30];
          ++v30;
        }
        while (&v6[v30] != v20);
      }
    }
    else if (result != a2)
    {
      v11 = result + 1;
      *a4 = *result;
      if (result + 1 != a2)
      {
        v12 = 0;
        v13 = a4;
        v14 = a4;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (*v11 >= v16)
          {
            *v14 = *v11;
          }
          else
          {
            v13[1] = v15;
            v17 = a4;
            if (v13 != a4)
            {
              v18 = v12;
              while (1)
              {
                v17 = (unsigned int *)((char *)a4 + v18);
                v19 = *(unsigned int *)((char *)a4 + v18 - 4);
                if (*v11 >= v19)
                  break;
                *v17 = v19;
                v18 -= 4;
                if (!v18)
                {
                  v17 = a4;
                  break;
                }
              }
            }
            *v17 = *v11;
          }
          ++v11;
          v12 += 4;
          v13 = v14;
        }
        while (v11 != a2);
      }
    }
  }
  return result;
}

unsigned int *sub_1C56F9BC8(unsigned int *result, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5, _DWORD *a6, uint64_t a7)
{
  uint64_t v8;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  BOOL v48;
  char v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  _DWORD *v53;
  unsigned int *v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  _DWORD *v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  int *v64;
  unsigned int v65;
  _BOOL4 v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int *v70;
  unsigned int *v71;
  _DWORD *v72;
  _DWORD *v73;

  if (a5)
  {
    v8 = a5;
    v11 = result;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return result;
      v12 = *a2;
      while (1)
      {
        v13 = *v11;
        if (v12 < *v11)
          break;
        ++v11;
        if (!--a4)
          return result;
      }
      if (a4 >= v8)
      {
        if (a4 == 1)
        {
          *v11 = v12;
          *a2 = v13;
          return result;
        }
        if (a4 >= 0)
          v24 = a4;
        else
          v24 = a4 + 1;
        v23 = v24 >> 1;
        v17 = &v11[v24 >> 1];
        v16 = a3;
        if (a3 != a2)
        {
          v25 = a3 - a2;
          v16 = a2;
          do
          {
            v26 = v25 >> 1;
            v27 = &v16[v25 >> 1];
            v29 = *v27;
            v28 = v27 + 1;
            v25 += ~(v25 >> 1);
            if (v29 < *v17)
              v16 = v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        v15 = v16 - a2;
      }
      else
      {
        if (v8 >= 0)
          v14 = v8;
        else
          v14 = v8 + 1;
        v15 = v14 >> 1;
        v16 = &a2[v14 >> 1];
        v17 = a2;
        if (v11 != a2)
        {
          v18 = a2 - v11;
          v17 = v11;
          do
          {
            v19 = v18 >> 1;
            v20 = &v17[v18 >> 1];
            v22 = *v20;
            v21 = v20 + 1;
            v18 += ~(v18 >> 1);
            if (*v16 < v22)
              v18 = v19;
            else
              v17 = v21;
          }
          while (v18);
        }
        v23 = v17 - v11;
      }
      v30 = v16;
      if (v17 != a2)
      {
        v30 = v17;
        if (a2 != v16)
        {
          if (v17 + 1 == a2)
          {
            v68 = *v17;
            v37 = (char *)v16 - (char *)a2;
            v70 = a3;
            v72 = a6;
            memmove(v17, a2, (char *)v16 - (char *)a2);
            a3 = v70;
            a6 = v72;
            v30 = (unsigned int *)((char *)v17 + v37);
            *v30 = v68;
          }
          else if (a2 + 1 == v16)
          {
            v38 = *(v16 - 1);
            v30 = v17 + 1;
            if (v16 - 1 != v17)
            {
              v71 = a3;
              v73 = a6;
              v69 = *(v16 - 1);
              memmove(v17 + 1, v17, (char *)(v16 - 1) - (char *)v17);
              v38 = v69;
              a3 = v71;
              a6 = v73;
            }
            *v17 = v38;
          }
          else
          {
            v31 = a2 - v17;
            if (v31 == v16 - a2)
            {
              v32 = 0;
              do
              {
                v33 = v17[v32];
                v17[v32] = a2[v32];
                v34 = (uint64_t)&v17[v32 + 1];
                a2[v32] = v33;
                v35 = (uint64_t)&a2[++v32];
              }
              while ((unsigned int *)v34 != a2 && v35 != (_QWORD)v16);
              v30 = a2;
            }
            else
            {
              v39 = v16 - a2;
              v40 = a2 - v17;
              do
              {
                v41 = v40;
                v40 = v39;
                v39 = v41 % v39;
              }
              while (v39);
              if (v40)
              {
                v42 = &v17[v40];
                do
                {
                  v44 = *--v42;
                  v43 = v44;
                  v45 = &v42[v31];
                  v46 = v42;
                  do
                  {
                    v47 = v46;
                    v46 = v45;
                    *v47 = *v45;
                    v48 = __OFSUB__(v31, v16 - v45);
                    v50 = v31 - (v16 - v45);
                    v49 = (v50 < 0) ^ v48;
                    v45 = &v17[v50];
                    if (v49)
                      v45 = &v46[v31];
                  }
                  while (v45 != v42);
                  *v46 = v43;
                }
                while (v42 != v17);
              }
              v30 = &v17[v16 - a2];
            }
          }
        }
      }
      a4 -= v23;
      v8 -= v15;
      if (v23 + v15 >= a4 + v8)
      {
        v55 = v8;
        v56 = a6;
        result = (unsigned int *)sub_1C56F9BC8(v30, v16, a3, a4, v55, a6, a7);
        a6 = v56;
        v16 = v17;
        v8 = v15;
        a4 = v23;
        a3 = v30;
      }
      else
      {
        v51 = v11;
        v52 = v17;
        v53 = a6;
        v54 = a3;
        result = (unsigned int *)sub_1C56F9BC8(v51, v52, v30, v23, v15, a6, a7);
        a3 = v54;
        a6 = v53;
        v11 = v30;
      }
      a2 = v16;
      if (!v8)
        return result;
    }
    if (a4 <= v8)
    {
      if (v11 != a2)
      {
        v63 = 0;
        do
        {
          a6[v63] = v11[v63];
          ++v63;
        }
        while (&v11[v63] != a2);
        if (v63 * 4)
        {
          v64 = a6;
          while (a2 != a3)
          {
            v65 = *a2;
            v66 = *a2 < *v64;
            if (*a2 >= *v64)
              v65 = *v64;
            v64 += *a2 >= *v64;
            a2 += v66;
            *v11++ = v65;
            if (&a6[v63] == v64)
              return result;
          }
          return (unsigned int *)memmove(v11, v64, (char *)a6 - (char *)v64 + v63 * 4);
        }
      }
    }
    else if (a2 != a3)
    {
      v57 = 0;
      do
      {
        a6[v57] = a2[v57];
        ++v57;
      }
      while (&a2[v57] != a3);
      if (v57 * 4)
      {
        v58 = &a6[v57];
        v59 = a3 - 1;
        while (a2 != v11)
        {
          v60 = *(v58 - 1);
          v61 = *(a2 - 1);
          v62 = v60 >= v61;
          if (v60 <= v61)
            v60 = *(a2 - 1);
          if (v62)
            --v58;
          else
            --a2;
          *v59-- = v60;
          if (v58 == a6)
            return result;
        }
        if (v58 != a6)
        {
          v67 = 0;
          do
          {
            v59[v67] = v58[v67 - 1];
            --v67;
          }
          while (&v58[v67] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C56FA034(uint64_t *result, char *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::APInt *v20;
  unsigned int v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  llvm::APInt *v31;
  unsigned int v32;
  unint64_t v33;
  char *v34;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  unint64_t v39;
  llvm::APInt *v40;
  unsigned int v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unsigned int v52;
  unint64_t v53;
  llvm::APInt *v54;
  unsigned int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;

  if (a3 < 2)
    return result;
  v5 = (char *)result;
  if (a3 == 2)
  {
    v6 = *((_QWORD *)a2 - 1);
    v7 = *result;
    if (*(_BYTE *)(v6 + 16) == 16)
      v8 = *((_QWORD *)a2 - 1);
    else
      v8 = 0;
    if (*(_BYTE *)(v7 + 16) == 16)
      v9 = *result;
    else
      v9 = 0;
    v10 = (unint64_t *)(v8 + 24);
    v11 = *(_DWORD *)(v8 + 32);
    if (v11 >= 0x41)
    {
      result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v8 + 24));
      if (v11 - result > 0x40)
      {
        v12 = -1;
        goto LABEL_58;
      }
      v10 = (unint64_t *)*v10;
    }
    v12 = *v10;
LABEL_58:
    v40 = (llvm::APInt *)(v9 + 24);
    v41 = *(_DWORD *)(v9 + 32);
    if (v41 >= 0x41)
    {
      result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase(v40);
      if (v41 - result > 0x40)
      {
        v42 = -1;
        goto LABEL_92;
      }
      v40 = *(llvm::APInt **)v40;
    }
    v42 = *(_QWORD *)v40;
LABEL_92:
    if (v12 < v42)
    {
      *(_QWORD *)v5 = v6;
      *((_QWORD *)a2 - 1) = v7;
    }
    return result;
  }
  if ((uint64_t)a3 > 128)
  {
    v36 = a4;
    v37 = a3 >> 1;
    v38 = &result[a3 >> 1];
    v39 = a3 >> 1;
    if ((uint64_t)a3 > a5)
    {
      sub_1C56FA034(result, v38, v39, a4, a5);
      sub_1C56FA034(&v5[8 * (a3 >> 1)], a2, a3 - (a3 >> 1), v36, a5);
      return (uint64_t *)sub_1C56FA87C(v5, &v5[8 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v36, a5);
    }
    sub_1C56FA47C(result, v38, v39, a4);
    v43 = &v36[v37];
    result = sub_1C56FA47C((uint64_t *)&v5[8 * (a3 >> 1)], (uint64_t *)a2, a3 - (a3 >> 1), v43);
    v44 = &v36[a3];
    v45 = v43;
    while (1)
    {
      if (v45 == v44)
      {
        if (v36 != v43)
        {
          v61 = 0;
          do
          {
            *(_QWORD *)&v5[v61 * 8] = v36[v61];
            ++v61;
          }
          while (&v36[v61] != v43);
        }
        return result;
      }
      v46 = v45;
      v47 = *v45;
      v48 = *v36;
      if (*(_BYTE *)(*v45 + 16) == 16)
        v49 = *v45;
      else
        v49 = 0;
      if (*(_BYTE *)(v48 + 16) == 16)
        v50 = *v36;
      else
        v50 = 0;
      v51 = (unint64_t *)(v49 + 24);
      v52 = *(_DWORD *)(v49 + 32);
      if (v52 >= 0x41)
      {
        result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v49 + 24));
        if (v52 - result > 0x40)
        {
          v53 = -1;
          goto LABEL_74;
        }
        v51 = (unint64_t *)*v51;
      }
      v53 = *v51;
LABEL_74:
      v54 = (llvm::APInt *)(v50 + 24);
      v55 = *(_DWORD *)(v50 + 32);
      if (v55 < 0x41)
        goto LABEL_78;
      result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase(v54);
      if (v55 - result <= 0x40)
      {
        v54 = *(llvm::APInt **)v54;
LABEL_78:
        v56 = *(_QWORD *)v54;
        goto LABEL_79;
      }
      v56 = -1;
LABEL_79:
      if (v53 < v56)
        v57 = v47;
      else
        v57 = v48;
      v36 += v53 >= v56;
      v45 = &v46[v53 < v56];
      *(_QWORD *)v5 = v57;
      v5 += 8;
      if (v36 == v43)
      {
        if (v45 != v44)
        {
          v58 = 0;
          if (v53 < v56)
            v59 = 1;
          else
            v59 = 2;
          v60 = &v46[v59 & 1];
          do
          {
            *(_QWORD *)&v5[v58 * 8] = v60[v58];
            ++v58;
          }
          while (&v60[v58] != v44);
        }
        return result;
      }
    }
  }
  if (result == (uint64_t *)a2)
    return result;
  v14 = result + 1;
  if (result + 1 == (uint64_t *)a2)
    return result;
  v15 = 0;
  v16 = result;
  do
  {
    v17 = *v16;
    v16 = v14;
    v62 = *v14;
    if (*(_BYTE *)(*v14 + 16) == 16)
      v18 = *v14;
    else
      v18 = 0;
    if (*(_BYTE *)(v17 + 16) == 16)
      v19 = v17;
    else
      v19 = 0;
    v20 = (llvm::APInt *)(v18 + 24);
    v21 = *(_DWORD *)(v18 + 32);
    v22 = (unint64_t *)(v18 + 24);
    if (v21 >= 0x41)
    {
      result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase(v20);
      if (v21 - result > 0x40)
      {
        v23 = -1;
        goto LABEL_27;
      }
      v22 = *(unint64_t **)v20;
    }
    v23 = *v22;
LABEL_27:
    v24 = (unint64_t *)(v19 + 24);
    v25 = *(_DWORD *)(v19 + 32);
    if (v25 < 0x41)
      goto LABEL_31;
    result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v19 + 24));
    if (v25 - result <= 0x40)
    {
      v24 = (unint64_t *)*v24;
LABEL_31:
      v26 = *v24;
      goto LABEL_32;
    }
    v26 = -1;
LABEL_32:
    if (v23 >= v26)
      goto LABEL_52;
    v27 = v15;
    while (1)
    {
      *(_QWORD *)&v5[v27 + 8] = v17;
      if (!v27)
        break;
      v17 = *(_QWORD *)&v5[v27 - 8];
      if (*(_BYTE *)(v17 + 16) == 16)
        v28 = *(_QWORD *)&v5[v27 - 8];
      else
        v28 = 0;
      v29 = (unint64_t *)v20;
      if (v21 >= 0x41)
      {
        result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase(v20);
        if (v21 - result > 0x40)
        {
          v30 = -1;
          goto LABEL_43;
        }
        v29 = *(unint64_t **)v20;
      }
      v30 = *v29;
LABEL_43:
      v31 = (llvm::APInt *)(v28 + 24);
      v32 = *(_DWORD *)(v28 + 32);
      if (v32 < 0x41)
        goto LABEL_47;
      result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase(v31);
      if (v32 - result <= 0x40)
      {
        v31 = *(llvm::APInt **)v31;
LABEL_47:
        v33 = *(_QWORD *)v31;
        goto LABEL_48;
      }
      v33 = -1;
LABEL_48:
      v27 -= 8;
      if (v30 >= v33)
      {
        v34 = &v5[v27 + 8];
        goto LABEL_51;
      }
    }
    v34 = v5;
LABEL_51:
    *(_QWORD *)v34 = v62;
LABEL_52:
    v14 = v16 + 1;
    v15 += 8;
  }
  while (v16 + 1 != (uint64_t *)a2);
  return result;
}

uint64_t *sub_1C56FA47C(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unsigned int v26;
  unint64_t v27;
  llvm::APInt *v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unsigned int v37;
  unint64_t v38;
  llvm::APInt *v39;
  unsigned int v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  unsigned int v50;
  unint64_t v51;
  llvm::APInt *v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  unint64_t *v58;
  unsigned int v59;
  unint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;

  if (!a3)
    return result;
  v4 = a4;
  v6 = result;
  if (a3 == 1)
  {
LABEL_102:
    *v4 = *v6;
    return result;
  }
  if (a3 == 2)
  {
    v9 = a2 - 1;
    v8 = *(a2 - 1);
    v10 = *result;
    if (*(_BYTE *)(v8 + 16) == 16)
      v11 = *(a2 - 1);
    else
      v11 = 0;
    if (*(_BYTE *)(v10 + 16) == 16)
      v12 = *result;
    else
      v12 = 0;
    v13 = (unint64_t *)(v11 + 24);
    v14 = *(_DWORD *)(v11 + 32);
    if (v14 >= 0x41)
    {
      result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v11 + 24));
      if (v14 - result > 0x40)
      {
        v15 = -1;
        goto LABEL_87;
      }
      v13 = (unint64_t *)*v13;
    }
    v15 = *v13;
LABEL_87:
    v58 = (unint64_t *)(v12 + 24);
    v59 = *(_DWORD *)(v12 + 32);
    if (v59 >= 0x41)
    {
      result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v12 + 24));
      if (v59 - result > 0x40)
      {
        v60 = -1;
LABEL_96:
        v62 = v15 >= v60;
        if (v15 >= v60)
          v63 = v10;
        else
          v63 = v8;
        *v4++ = v63;
        if (v62)
          v6 = v9;
        goto LABEL_102;
      }
      v58 = (unint64_t *)*v58;
    }
    v60 = *v58;
    goto LABEL_96;
  }
  if ((uint64_t)a3 > 8)
  {
    v42 = &result[a3 >> 1];
    sub_1C56FA034(result, v42, a3 >> 1, a4, a3 >> 1);
    result = (uint64_t *)sub_1C56FA034(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
    v43 = &v6[a3 >> 1];
    while (1)
    {
      if (v43 == a2)
      {
        if (v6 != v42)
        {
          v61 = 0;
          do
          {
            v4[v61] = v6[v61];
            ++v61;
          }
          while (&v6[v61] != v42);
        }
        return result;
      }
      v44 = v43;
      v45 = *v43;
      v46 = *v6;
      if (*(_BYTE *)(*v43 + 16) == 16)
        v47 = *v43;
      else
        v47 = 0;
      if (*(_BYTE *)(v46 + 16) == 16)
        v48 = *v6;
      else
        v48 = 0;
      v49 = (unint64_t *)(v47 + 24);
      v50 = *(_DWORD *)(v47 + 32);
      if (v50 >= 0x41)
      {
        result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v47 + 24));
        if (v50 - result > 0x40)
        {
          v51 = -1;
          goto LABEL_72;
        }
        v49 = (unint64_t *)*v49;
      }
      v51 = *v49;
LABEL_72:
      v52 = (llvm::APInt *)(v48 + 24);
      v53 = *(_DWORD *)(v48 + 32);
      if (v53 < 0x41)
        goto LABEL_76;
      result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase(v52);
      if (v53 - result <= 0x40)
      {
        v52 = *(llvm::APInt **)v52;
LABEL_76:
        v54 = *(_QWORD *)v52;
        goto LABEL_77;
      }
      v54 = -1;
LABEL_77:
      if (v51 >= v54)
        v55 = v46;
      else
        v55 = v45;
      v43 = &v44[v51 < v54];
      v6 += v51 >= v54;
      *v4++ = v55;
      if (v6 == v42)
      {
        if (v43 != a2)
        {
          v56 = 0;
          v57 = &v44[v51 < v54];
          do
          {
            v4[v56] = v57[v56];
            ++v56;
          }
          while (&v57[v56] != a2);
        }
        return result;
      }
    }
  }
  if (result == a2)
    return result;
  v16 = result + 1;
  *a4 = *result;
  if (result + 1 == a2)
    return result;
  v17 = 0;
  v18 = a4;
  v19 = a4;
  do
  {
    v21 = *v19++;
    v20 = v21;
    v22 = *v16;
    if (*(_BYTE *)(*v16 + 16) == 16)
      v23 = *v16;
    else
      v23 = 0;
    if (*(_BYTE *)(v20 + 16) == 16)
      v24 = v20;
    else
      v24 = 0;
    v25 = (unint64_t *)(v23 + 24);
    v26 = *(_DWORD *)(v23 + 32);
    if (v26 >= 0x41)
    {
      result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v23 + 24));
      if (v26 - result > 0x40)
      {
        v27 = -1;
        goto LABEL_28;
      }
      v25 = (unint64_t *)*v25;
    }
    v27 = *v25;
LABEL_28:
    v28 = (llvm::APInt *)(v24 + 24);
    v29 = *(_DWORD *)(v24 + 32);
    if (v29 < 0x41)
      goto LABEL_32;
    result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase(v28);
    if (v29 - result <= 0x40)
    {
      v28 = *(llvm::APInt **)v28;
LABEL_32:
      v30 = *(_QWORD *)v28;
      goto LABEL_33;
    }
    v30 = -1;
LABEL_33:
    if (v27 >= v30)
    {
      *v19 = v22;
      goto LABEL_57;
    }
    v18[1] = v20;
    v31 = v4;
    if (v18 == v4)
      goto LABEL_56;
    v32 = v17;
    while (1)
    {
      v33 = *v16;
      v34 = *(uint64_t *)((char *)v4 + v32 - 8);
      if (*(_BYTE *)(*v16 + 16) != 16)
        v33 = 0;
      if (*(_BYTE *)(v34 + 16) == 16)
        v35 = *(uint64_t *)((char *)v4 + v32 - 8);
      else
        v35 = 0;
      v36 = (unint64_t *)(v33 + 24);
      v37 = *(_DWORD *)(v33 + 32);
      if (v37 >= 0x41)
      {
        result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v33 + 24));
        if (v37 - result > 0x40)
        {
          v38 = -1;
          goto LABEL_46;
        }
        v36 = (unint64_t *)*v36;
      }
      v38 = *v36;
LABEL_46:
      v39 = (llvm::APInt *)(v35 + 24);
      v40 = *(_DWORD *)(v35 + 32);
      if (v40 >= 0x41)
      {
        result = (uint64_t *)llvm::APInt::countLeadingZerosSlowCase(v39);
        if (v40 - result > 0x40)
        {
          v41 = -1;
          goto LABEL_51;
        }
        v39 = *(llvm::APInt **)v39;
      }
      v41 = *(_QWORD *)v39;
LABEL_51:
      if (v38 >= v41)
        break;
      *(uint64_t *)((char *)v4 + v32) = v34;
      v32 -= 8;
      if (!v32)
      {
        v31 = v4;
        goto LABEL_56;
      }
    }
    v31 = (uint64_t *)((char *)v4 + v32);
LABEL_56:
    *v31 = *v16;
LABEL_57:
    ++v16;
    v17 += 8;
    v18 = v19;
  }
  while (v16 != a2);
  return result;
}

char *sub_1C56FA87C(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::APInt *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  llvm::APInt *v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  llvm::APInt *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  unint64_t *v34;
  llvm::APInt *v35;
  unint64_t v36;
  llvm::APInt *v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  llvm::APInt *v42;
  char *v43;
  uint64_t v44;
  unint64_t *v45;
  unsigned int v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  BOOL v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unsigned int v88;
  unint64_t v89;
  llvm::APInt *v90;
  unsigned int v91;
  unint64_t v92;
  BOOL v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unsigned int v103;
  unint64_t v104;
  llvm::APInt *v105;
  unsigned int v106;
  unint64_t v107;
  BOOL v108;
  _BOOL4 v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  llvm::APInt *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v123;
  unsigned int v124;
  char *v125;

  v121 = a5;
  if (!a5)
    return result;
  v8 = result;
  while (a4 > a7 && v121 > a7)
  {
    if (!a4)
      return result;
    v9 = 0;
    v10 = *(_QWORD *)a2;
    if (*(_BYTE *)(*(_QWORD *)a2 + 16) == 16)
      v11 = *(_QWORD *)a2;
    else
      v11 = 0;
    v12 = (llvm::APInt *)(v11 + 24);
    v13 = *(_DWORD *)(v11 + 32);
    v14 = -a4;
    v125 = v8;
    while (1)
    {
      v15 = *(_QWORD *)&v8[v9];
      if (*(_BYTE *)(v15 + 16) == 16)
        v16 = *(_QWORD *)&v8[v9];
      else
        v16 = 0;
      v17 = (unint64_t *)v12;
      if (v13 >= 0x41)
      {
        result = (char *)llvm::APInt::countLeadingZerosSlowCase(v12);
        if (v13 - result > 0x40)
        {
          v18 = -1;
          goto LABEL_18;
        }
        v17 = *(unint64_t **)v12;
      }
      v18 = *v17;
LABEL_18:
      v19 = (llvm::APInt *)(v16 + 24);
      v20 = *(_DWORD *)(v16 + 32);
      if (v20 >= 0x41)
      {
        result = (char *)llvm::APInt::countLeadingZerosSlowCase(v19);
        if (v20 - result > 0x40)
        {
          v21 = -1;
          v8 = v125;
          goto LABEL_23;
        }
        v19 = *(llvm::APInt **)v19;
      }
      v8 = v125;
      v21 = *(_QWORD *)v19;
LABEL_23:
      if (v18 < v21)
        break;
      v9 += 8;
      v93 = __CFADD__(v14++, 1);
      if (v93)
        return result;
    }
    v22 = -v14;
    v23 = &v8[v9];
    if (-v14 >= v121)
    {
      if (v14 == -1)
      {
        *(_QWORD *)&v8[v9] = v10;
        *(_QWORD *)a2 = v15;
        return result;
      }
      v115 = &v8[v9];
      if (v14 > 0)
        v22 = 1 - v14;
      v120 = v22 >> 1;
      v31 = &v8[8 * (v22 >> 1) + v9];
      v27 = a3;
      if (a3 == a2)
      {
LABEL_78:
        v26 = a2;
        v25 = (v27 - a2) >> 3;
        v8 = v125;
        v23 = v115;
        v50 = v120;
        goto LABEL_81;
      }
      v40 = (a3 - a2) >> 3;
      v41 = *(_QWORD *)v31;
      if (*(_BYTE *)(*(_QWORD *)v31 + 16) != 16)
        v41 = 0;
      v42 = (llvm::APInt *)(v41 + 24);
      v124 = *(_DWORD *)(v41 + 32);
      v27 = a2;
      while (2)
      {
        v43 = &v27[8 * (v40 >> 1)];
        v44 = *(_QWORD *)v43;
        if (*(_BYTE *)(*(_QWORD *)v43 + 16) != 16)
          v44 = 0;
        v45 = (unint64_t *)(v44 + 24);
        v46 = *(_DWORD *)(v44 + 32);
        if (v46 >= 0x41)
        {
          if (v46 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v44 + 24)) > 0x40)
          {
            v47 = -1;
            goto LABEL_67;
          }
          v45 = (unint64_t *)*v45;
        }
        v47 = *v45;
LABEL_67:
        v48 = (unint64_t *)v42;
        if (v124 >= 0x41)
        {
          if (v124 - llvm::APInt::countLeadingZerosSlowCase(v42) > 0x40)
          {
            v49 = -1;
            goto LABEL_72;
          }
          v48 = *(unint64_t **)v42;
        }
        v49 = *v48;
LABEL_72:
        if (v47 >= v49)
          v40 >>= 1;
        else
          v40 += ~(v40 >> 1);
        if (v47 < v49)
          v27 = v43 + 8;
        if (!v40)
          goto LABEL_78;
        continue;
      }
    }
    if (v121 >= 0)
      v24 = v121;
    else
      v24 = v121 + 1;
    v25 = v24 >> 1;
    v26 = a2;
    v27 = &a2[8 * (v24 >> 1)];
    if (v23 != a2)
    {
      v113 = v24 >> 1;
      v114 = &v8[v9];
      v28 = (a2 - v8 - v9) >> 3;
      v29 = *(_QWORD *)v27;
      if (*(_BYTE *)(*(_QWORD *)v27 + 16) != 16)
        v29 = 0;
      v30 = (llvm::APInt *)(v29 + 24);
      v123 = *(_DWORD *)(v29 + 32);
      v31 = &v8[v9];
      v119 = (llvm::APInt *)(v29 + 24);
      while (1)
      {
        v32 = &v31[8 * (v28 >> 1)];
        if (*(_BYTE *)(*(_QWORD *)v32 + 16) == 16)
          v33 = *(_QWORD *)v32;
        else
          v33 = 0;
        v34 = (unint64_t *)v30;
        if (v123 >= 0x41)
        {
          v35 = v30;
          if (v123 - llvm::APInt::countLeadingZerosSlowCase(v30) > 0x40)
          {
            v36 = -1;
            v30 = v35;
            goto LABEL_43;
          }
          v34 = *(unint64_t **)v35;
          v30 = v35;
        }
        v36 = *v34;
LABEL_43:
        v37 = (llvm::APInt *)(v33 + 24);
        v38 = *(_DWORD *)(v33 + 32);
        if (v38 < 0x41)
          goto LABEL_47;
        if (v38 - llvm::APInt::countLeadingZerosSlowCase(v37) <= 0x40)
        {
          v37 = *(llvm::APInt **)v37;
          v30 = v119;
LABEL_47:
          v39 = *(_QWORD *)v37;
          goto LABEL_48;
        }
        v39 = -1;
        v30 = v119;
LABEL_48:
        if (v36 < v39)
        {
          v28 >>= 1;
        }
        else
        {
          v31 = v32 + 8;
          v28 += ~(v28 >> 1);
        }
        if (!v28)
        {
          v8 = v125;
          v26 = a2;
          v25 = v113;
          v23 = v114;
          goto LABEL_80;
        }
      }
    }
    v31 = a2;
LABEL_80:
    v50 = (v31 - v8 - v9) >> 3;
LABEL_81:
    v51 = v27;
    if (v31 != v26)
    {
      v51 = v31;
      if (v26 != v27)
      {
        if (v31 + 8 == v26)
        {
          v58 = *(_QWORD *)v31;
          v59 = v27 - v26;
          v60 = v50;
          memmove(v31, v26, v27 - v26);
          v50 = v60;
          v51 = &v31[v59];
          *(_QWORD *)v51 = v58;
        }
        else if (v26 + 8 == v27)
        {
          v61 = *((_QWORD *)v27 - 1);
          v51 = v31 + 8;
          if (v27 - 8 != v31)
          {
            v62 = v50;
            memmove(v31 + 8, v31, v27 - 8 - v31);
            v50 = v62;
          }
          *(_QWORD *)v31 = v61;
        }
        else
        {
          v52 = (v26 - v31) >> 3;
          if (v52 == (v27 - v26) >> 3)
          {
            if (v26 == v27 || v31 == v26)
            {
              v51 = v26;
            }
            else
            {
              v53 = v50;
              v54 = v31 + 8;
              v55 = v26 + 8;
              do
              {
                v56 = *((_QWORD *)v54 - 1);
                *((_QWORD *)v54 - 1) = *((_QWORD *)v55 - 1);
                *((_QWORD *)v55 - 1) = v56;
                if (v54 == v26)
                  break;
                v54 += 8;
                v57 = v55 == v27;
                v55 += 8;
              }
              while (!v57);
              v51 = v26;
              v50 = v53;
            }
          }
          else
          {
            v63 = v50;
            v64 = (v27 - v26) >> 3;
            v65 = (v26 - v31) >> 3;
            do
            {
              v66 = v65;
              v65 = v64;
              v64 = v66 % v64;
            }
            while (v64);
            if (v65)
            {
              v67 = &v31[8 * v65];
              do
              {
                v69 = *((_QWORD *)v67 - 1);
                v67 -= 8;
                v68 = v69;
                v70 = &v67[8 * v52];
                v71 = v67;
                do
                {
                  v72 = v70;
                  *(_QWORD *)v71 = *(_QWORD *)v70;
                  v73 = &v70[8 * v52];
                  v74 = __OFSUB__(v52, (v27 - v70) >> 3);
                  v76 = v52 - ((v27 - v70) >> 3);
                  v75 = (v76 < 0) ^ v74;
                  v70 = &v31[8 * v76];
                  if (v75)
                    v70 = v73;
                  v71 = v72;
                }
                while (v70 != v67);
                *(_QWORD *)v72 = v68;
              }
              while (v67 != v31);
            }
            v51 = &v31[8 * ((v27 - v26) >> 3)];
            v50 = v63;
          }
        }
      }
    }
    a4 = -(v50 + v14);
    v77 = v25;
    v78 = v121 - v25;
    if (v50 + v77 >= v121 - (v50 + v77) - v14)
    {
      a4 = v50;
      result = (char *)sub_1C56FA87C(v51, v27, a3, -(v50 + v14), v78, a6, a7);
      v27 = v31;
      v78 = v77;
      a3 = v51;
    }
    else
    {
      result = (char *)sub_1C56FA87C(&v8[v9], v31, v51, v50, v77, a6, a7);
      v23 = v51;
    }
    v121 = v78;
    a2 = v27;
    v8 = v23;
    if (!v78)
      return result;
  }
  if (a4 <= v121)
  {
    if (v8 == a2)
      return result;
    v96 = 0;
    do
    {
      a6[v96 / 8] = *(_QWORD *)&v8[v96];
      v96 += 8;
    }
    while (&v8[v96] != a2);
    if (!v96)
      return result;
    v97 = a6;
    while (1)
    {
      if (a2 == a3)
        return (char *)memmove(v8, v97, (char *)a6 - (char *)v97 + v96);
      v98 = *(_QWORD *)a2;
      v99 = *v97;
      if (*(_BYTE *)(*(_QWORD *)a2 + 16) == 16)
        v100 = *(_QWORD *)a2;
      else
        v100 = 0;
      if (*(_BYTE *)(v99 + 16) == 16)
        v101 = *v97;
      else
        v101 = 0;
      v102 = (unint64_t *)(v100 + 24);
      v103 = *(_DWORD *)(v100 + 32);
      if (v103 >= 0x41)
      {
        result = (char *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v100 + 24));
        if (v103 - result > 0x40)
        {
          v104 = -1;
          goto LABEL_163;
        }
        v102 = (unint64_t *)*v102;
      }
      v104 = *v102;
LABEL_163:
      v105 = (llvm::APInt *)(v101 + 24);
      v106 = *(_DWORD *)(v101 + 32);
      if (v106 < 0x41)
        goto LABEL_167;
      result = (char *)llvm::APInt::countLeadingZerosSlowCase(v105);
      if (v106 - result <= 0x40)
      {
        v105 = *(llvm::APInt **)v105;
LABEL_167:
        v107 = *(_QWORD *)v105;
        goto LABEL_168;
      }
      v107 = -1;
LABEL_168:
      v108 = v104 >= v107;
      v109 = v104 >= v107;
      v110 = !v108;
      if (v108)
        v111 = v99;
      else
        v111 = v98;
      a2 += 8 * v110;
      v97 += v109;
      *(_QWORD *)v8 = v111;
      v8 += 8;
      if (&a6[v96 / 8] == v97)
        return result;
    }
  }
  if (a2 == a3)
    return result;
  v79 = 0;
  do
  {
    a6[v79] = *(_QWORD *)&a2[v79 * 8];
    ++v79;
  }
  while (&a2[v79 * 8] != a3);
  if (!(v79 * 8))
    return result;
  v80 = &a6[v79];
  v81 = a3 - 8;
  while (2)
  {
    if (a2 != v8)
    {
      v82 = v8;
      v83 = *((_QWORD *)a2 - 1);
      v84 = *(v80 - 1);
      if (*(_BYTE *)(v84 + 16) == 16)
        v85 = *(v80 - 1);
      else
        v85 = 0;
      if (*(_BYTE *)(v83 + 16) == 16)
        v86 = *((_QWORD *)a2 - 1);
      else
        v86 = 0;
      v87 = (unint64_t *)(v85 + 24);
      v88 = *(_DWORD *)(v85 + 32);
      if (v88 >= 0x41)
      {
        result = (char *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v85 + 24));
        if (v88 - result > 0x40)
        {
          v89 = -1;
          goto LABEL_131;
        }
        v87 = (unint64_t *)*v87;
      }
      v89 = *v87;
LABEL_131:
      v90 = (llvm::APInt *)(v86 + 24);
      v91 = *(_DWORD *)(v86 + 32);
      if (v91 >= 0x41)
      {
        result = (char *)llvm::APInt::countLeadingZerosSlowCase(v90);
        if (v91 - result > 0x40)
        {
          v92 = -1;
          v8 = v82;
          goto LABEL_136;
        }
        v90 = *(llvm::APInt **)v90;
      }
      v8 = v82;
      v92 = *(_QWORD *)v90;
LABEL_136:
      v93 = v89 >= v92;
      if (v89 >= v92)
        v94 = v84;
      else
        v94 = v83;
      v95 = a2;
      if (!v93)
        v95 = a2 - 8;
      a2 = v95;
      if (v93)
        --v80;
      *(_QWORD *)v81 = v94;
      v81 -= 8;
      if (v80 == a6)
        return result;
      continue;
    }
    break;
  }
  if (v80 != a6)
  {
    v112 = 0;
    do
    {
      *(_QWORD *)&v81[v112 * 8] = v80[v112 - 1];
      --v112;
    }
    while (&v80[v112] != a6);
  }
  return result;
}

uint64_t sub_1C56FB094(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  char v10;
  llvm::BasicBlock *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = 0x400000000;
  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(_QWORD *)a1 + 16 * v4;
  if (*(_DWORD *)(a1 + 8))
  {
    if ((_DWORD)v4)
    {
      v6 = 16 * v4;
      v7 = *(uint64_t **)a1;
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6)
          goto LABEL_6;
      }
    }
    else
    {
      v7 = *(uint64_t **)a1;
    }
  }
  else
  {
LABEL_6:
    v7 = (uint64_t *)(*(_QWORD *)a1 + 16 * v4);
  }
  v8 = *(_QWORD *)a1 + 16 * v4;
  if (v7 == (uint64_t *)v8)
    goto LABEL_29;
  v9 = 0;
  v10 = 1;
  do
  {
    v12 = *v7;
    v11 = (llvm::BasicBlock *)v7[1];
    v13 = 1;
    v14 = (_QWORD *)((char *)v11 + 40);
    do
    {
      v14 = (_QWORD *)v14[1];
      --v13;
    }
    while (v14 != (_QWORD *)((char *)v11 + 40));
    if (v13)
    {
      v10 = 0;
    }
    else
    {
      llvm::BasicBlock::eraseFromParent(v11);
      v15 = v24;
      if (v24 >= (unint64_t)HIDWORD(v24))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v24 + 1, 8);
        v15 = v24;
      }
      *((_QWORD *)v23 + v15) = v12;
      v9 = v24 + 1;
      LODWORD(v24) = v24 + 1;
    }
    v16 = v7 + 2;
    v7 = (uint64_t *)v5;
    if (v16 != (uint64_t *)v5)
    {
      v7 = v16;
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        if (v7 == (uint64_t *)v5)
        {
          v7 = (uint64_t *)v5;
          break;
        }
      }
    }
  }
  while (v7 != (uint64_t *)v8);
  if (v9)
  {
    v17 = (uint64_t *)v23;
    v18 = 8 * v9;
    do
    {
      v19 = *v17;
      v22 = 0;
      if (sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v19, &v22))
      {
        *v22 = -8192;
        *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
      }
      ++v17;
      v18 -= 8;
    }
    while (v18);
  }
  if ((v10 & 1) != 0)
  {
LABEL_29:
    *(_DWORD *)(a2 + 28) = -1;
    v20 = 1;
  }
  else
  {
    v20 = 0;
  }
  if (v23 != v25)
    free(v23);
  return v20;
}

uint64_t sub_1C56FB2AC(uint64_t ****a1, uint64_t a2)
{
  uint64_t ***v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD ***v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  uint64_t ***v22;

  v3 = *a1;
  if ((*((_BYTE *)*a1 + 23) & 0x20) == 0)
    return a2;
  v5 = ***v3;
  v22 = *a1;
  v6 = *(_DWORD *)(v5 + 2496);
  if (!v6)
  {
    v20 = 0;
LABEL_24:
    v10 = sub_1C541AB24(v5 + 2480, (uint64_t)&v22, (uint64_t *)&v22, v20);
    v21 = (uint64_t)v22;
    v10[3] = 0;
    v10[4] = 0;
    *v10 = v21;
    v10[1] = v10 + 3;
    v10[2] = 0x100000000;
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(v5 + 2480);
  v8 = v6 - 1;
  v9 = v8 & ((v3 >> 4) ^ (v3 >> 9));
  v10 = (_QWORD *)(v7 + 40 * v9);
  v11 = (_QWORD ***)*v10;
  if ((uint64_t ***)*v10 != v3)
  {
    v12 = 0;
    v13 = 1;
    while (v11 != (_QWORD ***)-4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == (_QWORD ***)-8192;
      if (v14)
        v12 = v10;
      v15 = v9 + v13++;
      v9 = v15 & v8;
      v10 = (_QWORD *)(v7 + 40 * v9);
      v11 = (_QWORD ***)*v10;
      if ((uint64_t ***)*v10 == v3)
        goto LABEL_12;
    }
    if (v12)
      v20 = v12;
    else
      v20 = v10;
    goto LABEL_24;
  }
LABEL_12:
  v16 = *((unsigned int *)v10 + 4);
  if (!(_DWORD)v16)
    return a2;
  v17 = (uint64_t *)(v10[1] + 8);
  v18 = 16 * v16;
  while (*((_DWORD *)v17 - 2))
  {
    v17 += 2;
    v18 -= 16;
    if (!v18)
      return a2;
  }
  if (!*v17 || !a2 || *(_BYTE *)a2 != 5)
    return a2;
  return llvm::DILocation::getImpl(***a1, *(_DWORD *)(a2 + 4), *(unsigned __int16 *)(a2 + 2), *v17, 0, 0, 0, 1);
}

uint64_t sub_1C56FB418(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  char *i;
  uint64_t v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v3;
  v19 = a1 + 2;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_1C4764EE4();
  v7 = 3 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v2];
  __p = v8;
  v16 = v9;
  *(_QWORD *)v9 = *(_QWORD *)a2;
  *((_QWORD *)v9 + 1) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *((_DWORD *)v9 + 4) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  v17 = v9 + 24;
  v18 = &v8[8 * v7];
  sub_1C62965BC(a1, &__p);
  v10 = a1[1];
  v11 = v16;
  for (i = v17; i != v11; i -= 24)
  {
    v13 = *((_QWORD *)i - 3);
    MEMORY[0x1CAA32FB4](v13, 8);
  }
  if (__p)
    operator delete(__p);
  return v10;
}

uint64_t sub_1C56FB538(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  _DWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  _QWORD v54[2];
  int v55;

  v5 = *(_DWORD *)(result + 20);
  v6 = v5 & 0x7FFFFFF;
  if ((v5 & 0x7FFFFFF) != 0)
  {
    v11 = result;
    v12 = 0;
    v53 = a4 + 16;
    while (1)
    {
      v13 = *(_DWORD *)(v11 + 20);
      v14 = (v13 & 0x40000000) != 0 ? *(_QWORD *)(v11 - 8) : v11 - 32 * (v13 & 0x7FFFFFF);
      v15 = *(_QWORD *)(v14 + 32 * v12);
      v16 = *(_QWORD *)(v14 + 32 * *(unsigned int *)(v11 + 60) + 8 * v12);
      if (v15 && *(_BYTE *)(v15 + 16) == 21)
        break;
LABEL_20:
      v54[0] = 0;
      v54[1] = 0;
      v55 = 0;
      sub_1C4DFEB14((uint64_t)v54, a3);
      if (v55)
      {
        v31 = (v55 - 1) & ((v15 >> 4) ^ (v15 >> 9));
        v32 = *(_QWORD *)(v54[0] + 16 * v31);
        if (v15 == v32)
        {
LABEL_22:
          if ((_DWORD)v31 != v55)
            v15 = *(_QWORD *)(v54[0] + 16 * v31 + 8);
        }
        else
        {
          v41 = 1;
          while (v32 != -4096)
          {
            v42 = v31 + v41++;
            v31 = v42 & (v55 - 1);
            v32 = *(_QWORD *)(v54[0] + 16 * v31);
            if (v15 == v32)
              goto LABEL_22;
          }
        }
      }
      MEMORY[0x1CAA32FB4](v54[0], 8);
      result = sub_1C6192E10(*(_QWORD *)a2, v15);
      v33 = *(_QWORD *)(*(_QWORD *)a2 + 72);
      v34 = *(unsigned int *)(*(_QWORD *)a2 + 88);
      if (!(_DWORD)v34)
        goto LABEL_41;
      LODWORD(v35) = (v34 - 1) & (37 * result);
      v36 = (int *)(v33 + 8 * v35);
      v37 = *v36;
      if (*v36 != (_DWORD)result)
      {
        v43 = 1;
        while (v37 != -1)
        {
          v44 = v35 + v43++;
          v35 = v44 & (v34 - 1);
          v37 = *(_DWORD *)(v33 + 8 * v35);
          if (v37 == (_DWORD)result)
          {
            v36 = (int *)(v33 + 8 * v35);
            goto LABEL_26;
          }
        }
LABEL_41:
        v36 = (int *)(v33 + 8 * v34);
      }
LABEL_26:
      if ((int *)(v33 + 8 * v34) == v36)
        v38 = 0;
      else
        v38 = v36[1];
      v39 = *(unsigned int *)(a4 + 8);
      if (v39 >= *(unsigned int *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v53, v39 + 1, 16);
        v39 = *(unsigned int *)(a4 + 8);
      }
      v40 = (_QWORD *)(*(_QWORD *)a4 + 16 * v39);
      *v40 = v38;
      v40[1] = v16;
      ++*(_DWORD *)(a4 + 8);
      if (++v12 == v6)
        return result;
    }
    if (a5)
    {
      v18 = (uint64_t *)(*(_QWORD *)(a2 + 200)
                      - 32 * (*(_DWORD *)(*(_QWORD *)(a2 + 200) + 20) & 0x7FFFFFF)
                      + 32 * *(unsigned int *)(v15 + 32));
LABEL_19:
      v15 = *v18;
      goto LABEL_20;
    }
    v19 = *(_DWORD *)(v15 + 32);
    v20 = *(unsigned int *)(a2 + 152);
    if ((_DWORD)v20)
    {
      v26 = *(_QWORD *)(a2 + 136);
      v27 = v20 - 1;
      LODWORD(v28) = (v20 - 1) & (37 * v19);
      v29 = (_DWORD *)(v26 + 16 * v28);
      v30 = *v29;
      if (v19 == *v29)
      {
LABEL_18:
        v18 = (uint64_t *)(v29 + 2);
        goto LABEL_19;
      }
      v45 = 1;
      v46 = *v29;
      v47 = v27 & (37 * v19);
      while (v46 != -1)
      {
        v48 = v47 + v45++;
        v47 = v48 & v27;
        v46 = *(_DWORD *)(v26 + 16 * v47);
        if (v19 == v46)
        {
          if (v19 != v30)
          {
            v49 = 1;
            while (v30 != -1)
            {
              v50 = v28 + v49++;
              v28 = v50 & v27;
              v30 = *(_DWORD *)(v26 + 16 * v28);
              if (v30 == v19)
              {
                v29 = (_DWORD *)(v26 + 16 * v28);
                goto LABEL_18;
              }
            }
            v29 = (_DWORD *)(v26 + 16 * v20);
          }
          goto LABEL_18;
        }
      }
    }
    v21 = *(_QWORD *)(a2 + 56);
    v22 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v22)
    {
      LODWORD(v23) = (v22 - 1) & (37 * v19);
      v24 = (int *)(v21 + 8 * v23);
      v25 = *v24;
      if (v19 == *v24)
      {
LABEL_16:
        v18 = (uint64_t *)(*(_QWORD *)(a2 + 200)
                        - 32 * (*(_DWORD *)(*(_QWORD *)(a2 + 200) + 20) & 0x7FFFFFF)
                        + 32 * v24[1]);
        goto LABEL_19;
      }
      v51 = 1;
      while (v25 != -1)
      {
        v52 = v23 + v51++;
        v23 = v52 & (v22 - 1);
        v25 = *(_DWORD *)(v21 + 8 * v23);
        if (v19 == v25)
        {
          v24 = (int *)(v21 + 8 * v23);
          goto LABEL_16;
        }
      }
    }
    v24 = (int *)(v21 + 8 * v22);
    goto LABEL_16;
  }
  return result;
}

uint64_t sub_1C56FB880(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_7;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C56FB91C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1C56FB9CC(a1, v7);
    v9 = 0;
    sub_1C56FB880((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C56FB9CC(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62966D8(a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result++ = -4096;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C56FBA84(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2)
  {
    v3 = *(uint64_t **)(a1 + 16);
    v4 = &v3[v2];
    do
    {
      v5 = *(_QWORD *)(a1 + 16);
      v6 = *v3;
      if (*v3 == *(_QWORD *)(v5 + 8 * *(unsigned int *)(a1 + 24) - 8))
      {
        v8 = *(_QWORD *)a1;
      }
      else
      {
        v7 = (((unint64_t)v3 - v5) >> 10) & 0x1FFFFFF;
        if (v7 >= 0x1E)
          LOBYTE(v7) = 30;
        v8 = v6 + (4096 << v7);
      }
      v9 = (_QWORD *)((v6 + 7) & 0xFFFFFFFFFFFFFFF8);
      v10 = v9 + 33;
      while ((unint64_t)v10 <= v8)
      {
        v11 = sub_1C6296870(v9);
        v10 = v11 + 66;
        v9 = v11 + 33;
      }
      ++v3;
    }
    while (v3 != v4);
  }
  v12 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v12)
  {
    v13 = *(_QWORD **)(a1 + 64);
    v14 = &v13[2 * v12];
    do
    {
      v15 = (_QWORD *)((*v13 + 7) & 0xFFFFFFFFFFFFFFF8);
      v16 = *v13 + v13[1];
      v17 = v15 + 33;
      while ((unint64_t)v17 <= v16)
      {
        v18 = sub_1C6296870(v15);
        v17 = v18 + 66;
        v15 = v18 + 33;
      }
      v13 += 2;
    }
    while (v13 != v14);
  }
  return sub_1C4926A50(a1);
}

uint64_t sub_1C56FBB80()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56F8A58(v0);
}

void sub_1C56FBBAC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C56FBBD0(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::OptimizationRemarkEmitterWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::IRSimilarityIdentifierWrapperPass::ID);
}

BOOL sub_1C56FBC20(llvm::ModulePass *a1, uint64_t **a2)
{
  _BOOL8 v4;
  uint64_t v6;
  llvm::ModulePass *v7;
  llvm::ModulePass *v8;
  uint64_t *v9;
  uint64_t v10;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *(*v15)(uint64_t, uint64_t *);
  llvm::ModulePass **v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t (*v20)(uint64_t);
  llvm::ModulePass **v21;
  uint64_t (*v22)(uint64_t **, const llvm::Function *);
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD v28[12];
  _QWORD v29[12];
  _QWORD v30[6];
  _QWORD v31[2];
  char v32;
  __int16 v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if ((llvm::ModulePass::skipModule(a1, a2) & 1) != 0)
    return 0;
  v9 = &v10;
  v10 = 0;
  v7 = a1;
  v8 = a1;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = sub_1C56FBDA8;
  v16 = &v8;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = sub_1C56FBEC8;
  v21 = &v7;
  v22 = sub_1C56FBF14;
  v23 = &v9;
  v24 = 0;
  v25 = 0;
  v26 = v28;
  v27 = 0x400000000;
  v28[4] = &v28[6];
  memset(&v28[5], 0, 40);
  v28[10] = v29;
  v28[11] = 0x400000000;
  v29[4] = &v29[6];
  memset(&v29[5], 0, 40);
  v29[10] = v30;
  v29[11] = 0x400000000;
  v30[4] = v31;
  v30[5] = 0;
  v31[0] = 0;
  v31[1] = 0;
  v32 = 0;
  v33 = 1;
  v34 = 0;
  v11[1] = byte_1ED80BD28 ^ 1;
  v11[0] = byte_1ED80BC68;
  v4 = llvm::IROutliner::doOutline((llvm::IROutliner *)v11, (llvm::Module *)a2) != 0;
  sub_1C62967FC((uint64_t)v11);
  v6 = v10;
  v10 = 0;
  if (v6)
    sub_1C4EF268C((uint64_t)&v10, v6);
  return v4;
}

uint64_t *sub_1C56FBDA8(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13[2];
  int v14;
  _QWORD v15[2];
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v4 = **(char ****)(*(_QWORD *)a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::TargetTransformInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v7 = *(_QWORD *)(v6 + 56);
  if (!v7)
  {
    sub_1C485C2F0();
    goto LABEL_10;
  }
  v2 = v15;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(&v12, v7, a2);
  a2 = (uint64_t *)(v6 + 64);
  v8 = v12;
  if (!*(_BYTE *)(v6 + 72))
  {
    *(_QWORD *)(v6 + 64) = v12;
    *(_BYTE *)(v6 + 72) = 1;
    goto LABEL_7;
  }
  v12 = 0;
  v9 = *a2;
  *a2 = v8;
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    v10 = v12;
    v12 = 0;
    if (v10)
LABEL_10:
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
LABEL_7:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(v13);
  return a2;
}

uint64_t sub_1C56FBEC8(uint64_t a1)
{
  void **v1;
  void *v2;

  v1 = **(void ****)(*(_QWORD *)a1 + 8);
  do
  {
    v2 = *v1;
    v1 += 2;
  }
  while (v2 != &llvm::IRSimilarityIdentifierWrapperPass::ID);
  return *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v1 - 1) + 96))(*(v1 - 1), &llvm::IRSimilarityIdentifierWrapperPass::ID)+ 32);
}

uint64_t sub_1C56FBF14(uint64_t **a1, const llvm::Function *a2)
{
  uint64_t *v4;
  llvm::OptimizationRemarkEmitter *v5;
  llvm::OptimizationRemarkEmitter *v6;
  uint64_t v7;

  v4 = *a1;
  v5 = (llvm::OptimizationRemarkEmitter *)operator new();
  v6 = llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v5, a2);
  v7 = *v4;
  *v4 = (uint64_t)v6;
  if (v7)
    sub_1C4EF268C((uint64_t)v4, v7);
  return **a1;
}

uint64_t sub_1C56FBF7C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  int v8;
  unsigned int v9;
  const void *v10;
  uint64_t v11;
  int i;
  uint64_t v13;
  const void *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t result;
  int v19;

  if (a2)
  {
    v7 = 0;
    v8 = a2 - 1;
    v9 = (a2 - 1) & sub_1C4F5AB38(*(_QWORD **)a3, *(_QWORD *)a3 + 4 * *(_QWORD *)(a3 + 8));
    v10 = *(const void **)a3;
    v11 = *(_QWORD *)(a3 + 8);
    for (i = 1; ; ++i)
    {
      v13 = a1 + 16 * v9;
      v14 = *(const void **)v13;
      if (*(_QWORD *)v13 == -2)
      {
        if (v10 == (const void *)-2)
          goto LABEL_18;
      }
      else if (v14 == (const void *)-1)
      {
        if (v10 == (const void *)-1)
          goto LABEL_18;
      }
      else if (v11 == *(_QWORD *)(v13 + 8))
      {
        v19 = i;
        v15 = memcmp(v10, *(const void **)v13, 4 * v11);
        i = v19;
        if (!v15)
        {
LABEL_18:
          result = 1;
          goto LABEL_22;
        }
      }
      if (v14 == (const void *)-1)
        break;
      if (v7)
        v16 = 0;
      else
        v16 = v14 == (const void *)-2;
      if (v16)
        v7 = a1 + 16 * v9;
      v17 = v9 + i;
      v9 = v17 & v8;
    }
    result = 0;
    if (v7)
      v13 = v7;
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_22:
  *a4 = v13;
  return result;
}

_OWORD *sub_1C56FC09C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result++ = xmmword_1C85F6FF0;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (_OWORD *)v4;
      do
      {
        if (*(_QWORD *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v16 = 0;
          sub_1C56FBF7C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)v13, &v16);
          *v16 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v14 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v14)
  {
    v15 = 16 * v14;
    do
    {
      *result++ = xmmword_1C85F6FF0;
      v15 -= 16;
    }
    while (v15);
  }
  return result;
}

BOOL sub_1C56FC1CC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;

  v2 = *(_QWORD *)(a2 + 24);
  if (v2)
    v3 = *(unsigned __int8 *)(v2 + 16) >= 0x1Cu;
  else
    v3 = 0;
  return v3 && *(_QWORD *)(*(_QWORD *)(v2 + 40) + 56) == *a1;
}

uint64_t sub_1C56FC200(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v9;
  int v10;
  _BOOL4 v11;
  int v12;

  v4 = *(_QWORD *)(a2 - 32);
  if (!v4)
  {
    v5 = MEMORY[0x10];
LABEL_6:
    v6 = v5 < 0x15 || v5 == 24;
    if (!v6 && *(_BYTE *)(a1 + 1))
      goto LABEL_11;
    return 0;
  }
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (*(_BYTE *)(v4 + 16))
    goto LABEL_6;
  if (*(_QWORD *)(v4 + 24) != *(_QWORD *)(a2 + 72))
    return 0;
LABEL_11:
  v7 = *(_QWORD *)(a2 + 64);
  if (v7 && *(char *)(v7 + 17) < 0 || (llvm::CallBase::hasFnAttrOnCalledFunction(a2, 47) & 1) != 0)
    return 0;
  v9 = *(unsigned __int16 *)(a2 + 18);
  v10 = (v9 >> 2) & 0x3FF;
  v11 = v10 == 20;
  if (v10 == 18)
    v11 = 1;
  if ((v10 == 20 || v10 == 18) && !*(_BYTE *)(a1 + 3))
    return 0;
  v12 = v9 & 3;
  if (v12 == 2 && !*(_BYTE *)(a1 + 3))
    return 0;
  return v12 != 2 || v11;
}

BOOL sub_1C56FC2D4(uint64_t a1, llvm::Instruction *this)
{
  _QWORD *v3;
  uint64_t NextNonDebugInstruction;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v11;
  _BYTE v12[24];
  _BYTE *v13;
  _BYTE v14[24];
  _BYTE *v15;
  __int128 v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (*((unsigned __int8 *)this + 16) - 29 >= 0xB)
  {
    NextNonDebugInstruction = llvm::Instruction::getNextNonDebugInstruction(this, 0);
    return !a1 || NextNonDebugInstruction == a1;
  }
  if (!a1)
  {
    NextNonDebugInstruction = 0;
    return !a1 || NextNonDebugInstruction == a1;
  }
  llvm::BasicBlock::instructionsWithoutDebug(*(llvm::BasicBlock **)(a1 + 40), 1, (uint64_t)&v11);
  v16 = v11;
  if (v13)
  {
    if (v13 == v12)
    {
      v18 = v17;
      (*(void (**)(void))(*(_QWORD *)v13 + 24))();
      v3 = v18;
    }
    else
    {
      v3 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 16))();
      v18 = v3;
    }
    if ((_QWORD)v16)
      NextNonDebugInstruction = v16 - 24;
    else
      NextNonDebugInstruction = 0;
    if (v3 == v17)
    {
      (*(void (**)(_QWORD *))(v17[0] + 32))(v17);
    }
    else if (v3)
    {
      (*(void (**)(_QWORD *))(*v3 + 40))(v3);
    }
  }
  else
  {
    v18 = 0;
    if ((_QWORD)v11)
      NextNonDebugInstruction = v11 - 24;
    else
      NextNonDebugInstruction = 0;
  }
  v5 = v15;
  if (v15 == v14)
  {
    v6 = 4;
    v5 = v14;
LABEL_21:
    (*(void (**)(void))(*v5 + 8 * v6))();
    goto LABEL_22;
  }
  if (v15)
  {
    v6 = 5;
    goto LABEL_21;
  }
LABEL_22:
  v7 = v13;
  if (v13 == v12)
  {
    v8 = 4;
    v7 = v12;
LABEL_24:
    (*(void (**)(void))(*v7 + 8 * v8))();
    return !a1 || NextNonDebugInstruction == a1;
  }
  if (v13)
  {
    v8 = 5;
    goto LABEL_24;
  }
  return !a1 || NextNonDebugInstruction == a1;
}

void sub_1C56FC484(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5)
{
  uint64_t v6;
  __int128 *v7;
  __n128 *v10;
  unint64_t v11;
  __n128 *v12;
  unint64_t v13;
  __n128 *v14;
  uint64_t v15;
  __n128 *v16;
  unsigned __int32 v17;
  uint64_t v18;
  unsigned __int32 v19;
  uint64_t v20;
  __n128 *v21;
  __int128 *v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __n128 v28[7];

  if (a3 >= 2)
  {
    v6 = (uint64_t)a1;
    if (a3 == 2)
    {
      v7 = (__int128 *)&a2[-8].n128_i8[8];
      if (a2[-8].n128_u32[2] < a1->n128_u32[0])
      {
        sub_1C6193400(v28, a1);
        sub_1C6296A54(v6, v7);
        sub_1C6296A54((uint64_t)v7, (__int128 *)v28);
        sub_1C6193514(v28);
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        v14 = (__n128 *)((char *)a1 + 120);
        if (&a1[7].n128_i8[8] != (__int8 *)a2)
        {
          v15 = 0;
          v16 = a1;
          do
          {
            v17 = v16->n128_u32[0];
            v16 = v14;
            if (v14->n128_u32[0] < v17)
            {
              sub_1C6193400(v28, v14);
              v18 = v15;
              while (1)
              {
                sub_1C6296A54(v6 + v18 + 120, (__int128 *)(v6 + v18));
                if (!v18)
                  break;
                v19 = *(_DWORD *)(v6 + v18 - 120);
                v18 -= 120;
                if (v28[0].n128_u32[0] >= v19)
                {
                  v20 = v6 + v18 + 120;
                  goto LABEL_20;
                }
              }
              v20 = v6;
LABEL_20:
              sub_1C6296A54(v20, (__int128 *)v28);
              sub_1C6193514(v28);
            }
            v14 = (__n128 *)((char *)v16 + 120);
            v15 += 120;
          }
          while (&v16[7].n128_i8[8] != (__int8 *)a2);
        }
      }
    }
    else
    {
      v10 = a4;
      v11 = a3 >> 1;
      v12 = (__n128 *)((char *)a1 + 120 * (a3 >> 1));
      v13 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C56FC734(a1, v12, v13, a4);
        v21 = (__n128 *)((char *)v10 + 120 * v11);
        sub_1C56FC734((__n128 *)(v6 + 120 * (a3 >> 1)), a2, a3 - (a3 >> 1), v21);
        v22 = (__int128 *)((char *)v10 + 120 * a3);
        v23 = (__int128 *)v21;
        v24 = (__int128 *)v10;
        while (v23 != v22)
        {
          if (*(_DWORD *)v23 >= *(_DWORD *)v24)
          {
            sub_1C6296A54(v6, v24);
            v24 = (__int128 *)((char *)v24 + 120);
          }
          else
          {
            sub_1C6296A54(v6, v23);
            v23 = (__int128 *)((char *)v23 + 120);
          }
          v6 += 120;
          if (v24 == (__int128 *)v21)
          {
            if (v23 != v22)
            {
              v25 = 0;
              do
              {
                sub_1C6296A54(v6 + v25, (__int128 *)((char *)v23 + v25));
                v25 += 120;
              }
              while ((__int128 *)((char *)v23 + v25) != v22);
            }
            goto LABEL_34;
          }
        }
        if (v24 != (__int128 *)v21)
        {
          v26 = 0;
          do
          {
            sub_1C6296A54(v6 + v26, (__int128 *)((char *)v24 + v26));
            v26 += 120;
          }
          while ((__n128 *)((char *)v24 + v26) != v21);
        }
LABEL_34:
        if (v10)
        {
          v27 = a3;
          do
          {
            sub_1C6193514(v10);
            v10 = (__n128 *)((char *)v10 + 120);
            --v27;
          }
          while (v27);
        }
      }
      else
      {
        sub_1C56FC484(a1, v12, v13, a4, a5);
        sub_1C56FC484(v6 + 120 * (a3 >> 1), a2, a3 - (a3 >> 1), v10, a5);
        sub_1C56FC964(v6, (__int128 *)(v6 + 120 * (a3 >> 1)), (__int128 *)a2, a3 >> 1, a3 - (a3 >> 1), v10, a5);
      }
    }
  }
}

double sub_1C56FC734(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4)
{
  __n128 *v4;
  __n128 *v7;
  double result;
  __n128 *v9;
  uint64_t v10;
  __n128 *v11;
  __n128 *v12;
  unsigned __int32 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 *v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;

  if (!a3)
    return result;
  v4 = a4;
  v7 = a1;
  if (a3 == 2)
  {
    v21 = (__n128 *)((char *)a2 - 120);
    if (a2[-8].n128_u32[2] >= a1->n128_u32[0])
    {
      sub_1C6193400(a4, a1);
      v22 = (__n128 *)((char *)v4 + 120);
      v23 = v21;
      goto LABEL_37;
    }
    sub_1C6193400(a4, v21);
    v22 = (__n128 *)((char *)v4 + 120);
LABEL_35:
    v23 = v7;
LABEL_37:
    *(_QWORD *)&result = sub_1C6193400(v22, v23).n128_u64[0];
    return result;
  }
  if (a3 == 1)
  {
    v22 = a4;
    goto LABEL_35;
  }
  if ((uint64_t)a3 > 8)
  {
    v16 = 120 * (a3 >> 1);
    v17 = (__n128 *)((char *)a1 + v16);
    sub_1C56FC484(a1, (char *)a1 + v16, a3 >> 1, a4, a3 >> 1);
    sub_1C56FC484((char *)v7 + v16, a2, a3 - (a3 >> 1), (char *)v4 + v16, a3 - (a3 >> 1));
    v18 = (__n128 *)((char *)v7 + v16);
    while (v18 != a2)
    {
      if (v18->n128_u32[0] >= v7->n128_u32[0])
      {
        *(_QWORD *)&result = sub_1C6193400(v4, v7).n128_u64[0];
        v7 = (__n128 *)((char *)v7 + 120);
      }
      else
      {
        *(_QWORD *)&result = sub_1C6193400(v4, v18).n128_u64[0];
        v18 = (__n128 *)((char *)v18 + 120);
      }
      v4 = (__n128 *)((char *)v4 + 120);
      if (v7 == v17)
      {
        if (v18 != a2)
        {
          v19 = 0;
          do
          {
            *(_QWORD *)&result = sub_1C6193400((__n128 *)((char *)v4 + v19), (__n128 *)((char *)v18 + v19)).n128_u64[0];
            v19 += 120;
          }
          while ((__n128 *)((char *)v18 + v19) != a2);
        }
        return result;
      }
    }
    if (v7 != v17)
    {
      v20 = 0;
      do
      {
        *(_QWORD *)&result = sub_1C6193400((__n128 *)((char *)v4 + v20), (__n128 *)((char *)v7 + v20)).n128_u64[0];
        v20 += 120;
      }
      while ((__n128 *)((char *)v7 + v20) != v17);
    }
  }
  else if (a1 != a2)
  {
    *(_QWORD *)&result = sub_1C6193400(a4, a1).n128_u64[0];
    v9 = (__n128 *)((char *)v7 + 120);
    if (v9 != a2)
    {
      v10 = 0;
      v11 = v4;
      v12 = v4;
      do
      {
        v13 = v12->n128_u32[0];
        v12 = (__n128 *)((char *)v12 + 120);
        if (v9->n128_u32[0] >= v13)
        {
          *(_QWORD *)&result = sub_1C6193400(v12, v9).n128_u64[0];
        }
        else
        {
          sub_1C6193400(v12, v11);
          v14 = (uint64_t)v4;
          if (v11 != v4)
          {
            v15 = v10;
            while (1)
            {
              v14 = (uint64_t)v4 + v15;
              if (v9->n128_u32[0] >= *(_DWORD *)((char *)&v4[-7] + v15 - 8))
                break;
              sub_1C6296A54(v14, (__int128 *)((char *)&v4[-7] + v15 - 8));
              v15 -= 120;
              if (!v15)
              {
                v14 = (uint64_t)v4;
                break;
              }
            }
          }
          sub_1C6296A54(v14, (__int128 *)v9);
        }
        v9 = (__n128 *)((char *)v9 + 120);
        v10 += 120;
        v11 = v12;
      }
      while (v9 != a2);
    }
  }
  return result;
}

void sub_1C56FC964(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  unint64_t v19;
  __int128 *v20;
  unint64_t v21;
  _DWORD *v22;
  __int128 *v23;
  unsigned int v24;
  __n128 *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  __int128 *v30;
  unsigned int v31;
  __n128 *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 *v39;
  __n128 *v40;
  __int128 *v41;
  __int128 *v42;
  __n128 *v43;
  __int128 *v44;
  __n128 *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 *v48;
  __int128 *v49;
  _QWORD *v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  __int128 *v54;
  __int128 *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 *v58;
  __int128 *v59;
  uint64_t v60;
  __int128 *v61;
  __int128 *v62;
  __int128 *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  __n128 *v69;
  __int128 *v70;
  __n128 *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  __int128 *v75;
  __int128 *v76;
  __int128 *v77;
  _QWORD *v78;
  __n128 v79[8];

  if (a5)
  {
    v7 = a5;
    v78 = a6;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return;
      v11 = 0;
      v12 = -a4;
      while (*(_DWORD *)a2 >= *(_DWORD *)(a1 + v11))
      {
        v11 += 120;
        if (__CFADD__(v12++, 1))
          return;
      }
      v14 = -v12;
      v15 = (__int128 *)(a1 + v11);
      if (-v12 >= v7)
      {
        if (v12 == -1)
        {
          v68 = a1 + v11;
          v69 = (__n128 *)(a1 + v11);
          v70 = a2;
          sub_1C6193400(v79, v69);
          sub_1C6296A54(v68, v70);
          sub_1C6296A54((uint64_t)v70, (__int128 *)v79);
          sub_1C6193514(v79);
          return;
        }
        if (v12 > 0)
          v14 = 1 - v12;
        v26 = v14 >> 1;
        v20 = (__int128 *)(a1 + 120 * (v14 >> 1) + v11);
        v18 = a3;
        if (a3 != a2)
        {
          v27 = 0xEEEEEEEEEEEEEEEFLL * (((char *)a3 - (char *)a2) >> 3);
          v18 = a2;
          do
          {
            v28 = v27 >> 1;
            v29 = (_DWORD *)v18 + 30 * (v27 >> 1);
            v31 = *v29;
            v30 = (__int128 *)(v29 + 30);
            v27 += ~(v27 >> 1);
            if (v31 < *(_DWORD *)v20)
              v18 = v30;
            else
              v27 = v28;
          }
          while (v27);
        }
        v17 = 0xEEEEEEEEEEEEEEEFLL * (((char *)v18 - (char *)a2) >> 3);
        v25 = (__n128 *)(a1 + 120 * v26 + v11);
      }
      else
      {
        if (v7 >= 0)
          v16 = v7;
        else
          v16 = v7 + 1;
        v17 = v16 >> 1;
        v18 = (__int128 *)((char *)a2 + 120 * (v16 >> 1));
        if (v15 == a2)
        {
          v25 = (__n128 *)a2;
          v20 = a2;
        }
        else
        {
          v19 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)a2 - a1 - v11) >> 3);
          v20 = (__int128 *)(a1 + v11);
          do
          {
            v21 = v19 >> 1;
            v22 = (_DWORD *)v20 + 30 * (v19 >> 1);
            v24 = *v22;
            v23 = (__int128 *)(v22 + 30);
            v19 += ~(v19 >> 1);
            if (*(_DWORD *)v18 < v24)
              v19 = v21;
            else
              v20 = v23;
          }
          while (v19);
          v25 = (__n128 *)v20;
        }
        v26 = 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v25 - a1 - v11) >> 3);
      }
      v32 = (__n128 *)v18;
      if (v20 != a2)
      {
        v32 = v25;
        if (a2 != v18)
        {
          v72 = v26;
          v73 = v17;
          v74 = a7;
          v75 = a3;
          v40 = v25;
          v41 = a2;
          sub_1C6193400(v79, v25);
          sub_1C6296A54((uint64_t)v40, v41);
          sub_1C6296A54((uint64_t)v41, (__int128 *)v79);
          sub_1C6193514(v79);
          v42 = v41;
          v71 = v40;
          while (1)
          {
            v32 = (__n128 *)((char *)v40 + 120);
            v41 = (__int128 *)((char *)v41 + 120);
            if (v41 == v18)
              break;
            if (v32 == (__n128 *)v42)
              v42 = v41;
            v76 = v42;
            v40 = (__n128 *)((char *)v40 + 120);
            sub_1C6193400(v79, v40);
            sub_1C6296A54((uint64_t)v40, v41);
            sub_1C6296A54((uint64_t)v41, (__int128 *)v79);
            sub_1C6193514(v79);
            v42 = v76;
          }
          if (v32 != (__n128 *)v42)
          {
            v43 = (__n128 *)((char *)v40 + 120);
            v44 = v42;
            while (1)
            {
              v77 = v42;
              while (1)
              {
                v45 = v32;
                sub_1C6193400(v79, v43);
                sub_1C6296A54((uint64_t)v43, v44);
                sub_1C6296A54((uint64_t)v44, (__int128 *)v79);
                sub_1C6193514(v79);
                v43 = (__n128 *)((char *)v43 + 120);
                v44 = (__int128 *)((char *)v44 + 120);
                if (v44 != v18)
                  break;
                v44 = v77;
                v32 = v45;
                if (v43 == (__n128 *)v77)
                  goto LABEL_55;
              }
              v42 = v77;
              if (v43 == (__n128 *)v77)
                v42 = v44;
              v32 = v45;
            }
          }
LABEL_55:
          a7 = v74;
          a3 = v75;
          v17 = v73;
          v15 = (__int128 *)(a1 + v11);
          v25 = v71;
          v26 = v72;
        }
      }
      a4 = -(v26 + v12);
      v33 = v7 - v17;
      if (v26 + v17 >= v7 - (v26 + v17) - v12)
      {
        v37 = v26;
        v38 = v17;
        v36 = a7;
        a1 = (uint64_t)v15;
        v39 = v32;
        sub_1C56FC964(v32, v18);
        v18 = v20;
        v33 = v38;
        a4 = v37;
        a3 = (__int128 *)v39;
      }
      else
      {
        v34 = a1 + v11;
        v35 = a3;
        v36 = a7;
        a1 = (uint64_t)v32;
        sub_1C56FC964(v34, v25);
        a3 = v35;
      }
      v7 = v33;
      a2 = v18;
      a6 = v78;
      a7 = v36;
      if (!v33)
        return;
    }
    if (a4 <= v7)
    {
      if ((__int128 *)a1 == a2)
        return;
      v56 = a3;
      v57 = 0;
      v47 = 0;
      do
      {
        v58 = a2;
        sub_1C6193400((__n128 *)&a6[v57], (__n128 *)(a1 + v57 * 8));
        a2 = v58;
        a6 = v78;
        ++v47;
        v57 += 15;
      }
      while ((__int128 *)(a1 + v57 * 8) != v58);
      if (v57 * 8)
      {
        v59 = (__int128 *)&v78[v57];
        v60 = (uint64_t)&v78[v57 - 15];
        v61 = (__int128 *)v78;
        v62 = v56;
        while (a2 != v62)
        {
          v63 = a2;
          if (*(_DWORD *)a2 >= *(_DWORD *)v61)
          {
            sub_1C6296A54(a1, v61);
            a2 = v63;
            v61 = (__int128 *)((char *)v61 + 120);
          }
          else
          {
            sub_1C6296A54(a1, a2);
            a2 = (__int128 *)((char *)v63 + 120);
          }
          a1 += 120;
          a6 = v78;
          v62 = v56;
          if (v59 == v61)
            goto LABEL_92;
        }
        if (v59 != v61)
        {
          v66 = 0;
          do
          {
            sub_1C6296A54(a1 + v66, (__int128 *)((char *)v61 + v66));
            v66 += 120;
          }
          while ((__int128 *)v60 != (__int128 *)((char *)v61 + v66 - 120));
          a6 = v78;
        }
      }
    }
    else
    {
      if (a2 == a3)
        return;
      v46 = 0;
      v47 = 0;
      do
      {
        v48 = a3;
        v49 = a2;
        sub_1C6193400((__n128 *)&a6[v46], (__n128 *)((char *)a2 + v46 * 8));
        a2 = v49;
        a3 = v48;
        a6 = v78;
        ++v47;
        v46 += 15;
      }
      while ((__int128 *)((char *)v49 + v46 * 8) != v48);
      if (v46 * 8)
      {
        v50 = &v78[v46];
        v51 = (uint64_t)a3 - 120;
        while (a2 != (__int128 *)a1)
        {
          v52 = *((_DWORD *)v50 - 30);
          v53 = *((_DWORD *)a2 - 30);
          if (v52 >= v53)
            v54 = (__int128 *)(v50 - 15);
          else
            v54 = (__int128 *)((char *)a2 - 120);
          if (v52 >= v53)
            v55 = a2;
          else
            v55 = (__int128 *)((char *)a2 - 120);
          if (v52 >= v53)
            v50 -= 15;
          sub_1C6296A54(v51, v54);
          a2 = v55;
          a6 = v78;
          v51 -= 120;
          if (v50 == v78)
            goto LABEL_92;
        }
        if (v50 != a6)
        {
          v64 = 0;
          do
          {
            v65 = v51 + v64 * 8;
            v64 -= 15;
            sub_1C6296A54(v65, (__int128 *)&v50[v64]);
            a6 = v78;
          }
          while (&v50[v64] != v78);
        }
      }
    }
LABEL_92:
    if (a6 && v47)
    {
      do
      {
        v67 = a6;
        sub_1C6193514(a6);
        a6 = v67 + 15;
        --v47;
      }
      while (v47);
    }
  }
}

void sub_1C56FCEF8(char *a1, char *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void **v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  __n128 *v27;
  void **v28;
  __n128 *v29;
  void **v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *n128_u64;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  unint64_t *v38;
  __n128 *v39;
  uint64_t v40;
  void **v41;
  void **v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  void **v46;

  if (a3 >= 2)
  {
    v7 = (void **)a1;
    if (a3 == 2)
    {
      v8 = *((_QWORD *)a2 - 3);
      v9 = *(_QWORD *)a1;
      if (0xEEEEEEEEEEEEEEEFLL * ((*((_QWORD *)a2 - 2) - v8) >> 3) * *(unsigned int *)(v8 + 4) > 0xEEEEEEEEEEEEEEEFLL
                                                                                                * ((uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 3)
                                                                                                * *(unsigned int *)(*(_QWORD *)a1 + 4))
      {
        *(_QWORD *)a1 = v8;
        *((_QWORD *)a2 - 3) = v9;
        v10 = *((_QWORD *)a1 + 1);
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 - 2);
        *((_QWORD *)a2 - 2) = v10;
        v11 = *((_QWORD *)a1 + 2);
        *((_QWORD *)a1 + 2) = *((_QWORD *)a2 - 1);
        *((_QWORD *)a2 - 1) = v11;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        v18 = a1 + 24;
        if (a1 + 24 != a2)
        {
          v19 = 0;
          v20 = a1;
          do
          {
            v21 = v18;
            v22 = *((_QWORD *)v20 + 4);
            if (0xEEEEEEEEEEEEEEEFLL * ((v22 - *v18) >> 3) * *(unsigned int *)(*v18 + 4) > 0xEEEEEEEEEEEEEEEFLL
                                                                                            * ((uint64_t)(*((_QWORD *)v20 + 1) - *(_QWORD *)v20) >> 3)
                                                                                            * *(unsigned int *)(*(_QWORD *)v20 + 4))
            {
              *(_QWORD *)&v44 = *v18;
              *((_QWORD *)&v44 + 1) = v22;
              v45 = *((_QWORD *)v20 + 5);
              *((_QWORD *)v20 + 4) = 0;
              *((_QWORD *)v20 + 5) = 0;
              *v18 = 0;
              v23 = v19;
              while (1)
              {
                v24 = (char *)v7 + v23;
                sub_1C6296B24((void **)((char *)v7 + v23 + 24));
                *(_OWORD *)(v24 + 24) = *(_OWORD *)v24;
                *((_QWORD *)v24 + 5) = *((_QWORD *)v24 + 2);
                *((_QWORD *)v24 + 1) = 0;
                *((_QWORD *)v24 + 2) = 0;
                *(_QWORD *)v24 = 0;
                if (!v23)
                  break;
                v23 -= 24;
                if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)&v44 + 1) - v44) >> 3) * *(unsigned int *)(v44 + 4) <= 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)v24 - 2) - *((_QWORD *)v24 - 3)) >> 3) * *(unsigned int *)(*((_QWORD *)v24 - 3) + 4))
                {
                  v25 = (uint64_t)v7 + v23 + 24;
                  goto LABEL_19;
                }
              }
              v25 = (uint64_t)v7;
LABEL_19:
              sub_1C6296B24((void **)v25);
              *(_OWORD *)v25 = v44;
              *(_QWORD *)(v25 + 16) = v45;
              v44 = 0uLL;
              v45 = 0;
              v46 = (void **)&v44;
              sub_1C4E38968(&v46);
            }
            v18 = v21 + 3;
            v19 += 24;
            v20 = (char *)v21;
          }
          while (v21 + 3 != (_QWORD *)a2);
        }
      }
    }
    else
    {
      v14 = (void **)a4;
      v15 = a3 >> 1;
      v16 = &a1[24 * (a3 >> 1)];
      v17 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v26 = sub_1C56FD2E8(a1, v16, v17, a4, a6);
        v27 = (__n128 *)&v14[3 * v15];
        sub_1C56FD2E8(&v7[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), v27, v26);
        v28 = &v14[3 * a3];
        v29 = v27;
        v30 = v14;
        while (v29 != (__n128 *)v28)
        {
          v31 = 0xEEEEEEEEEEEEEEEFLL
              * ((uint64_t)(v29->n128_u64[1] - v29->n128_u64[0]) >> 3)
              * *(unsigned int *)(v29->n128_u64[0] + 4);
          v32 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)v30[1] - (_BYTE *)*v30) >> 3) * *((unsigned int *)*v30 + 1);
          sub_1C6296B24(v7);
          if (v31 <= v32)
          {
            n128_u64 = v30;
            v36 = *(__n128 *)v30;
            v30 += 3;
            v35 = v36;
          }
          else
          {
            n128_u64 = v29->n128_u64;
            v34 = *v29;
            v29 = (__n128 *)((char *)v29 + 24);
            v35 = v34;
          }
          *(__n128 *)v7 = v35;
          v7[2] = (void *)n128_u64[2];
          *n128_u64 = 0;
          n128_u64[1] = 0;
          n128_u64[2] = 0;
          v7 += 3;
          if (v30 == (void **)v27)
          {
            if (v29 != (__n128 *)v28)
            {
              v37 = 0;
              do
              {
                v38 = &v29->n128_u64[v37];
                v39 = (__n128 *)&v7[v37];
                sub_1C6296B24(&v7[v37]);
                *v39 = *(__n128 *)((char *)v29 + v37 * 8);
                v39[1].n128_u64[0] = v29[1].n128_u64[v37];
                *v38 = 0;
                v38[1] = 0;
                v38[2] = 0;
                v37 += 3;
              }
              while (v38 + 3 != (unint64_t *)v28);
            }
            goto LABEL_33;
          }
        }
        if (v30 != (void **)v27)
        {
          v40 = 0;
          do
          {
            v41 = &v30[v40];
            v42 = &v7[v40];
            sub_1C6296B24(&v7[v40]);
            *(_OWORD *)v42 = *(_OWORD *)&v30[v40];
            v42[2] = v30[v40 + 2];
            *v41 = 0;
            v41[1] = 0;
            v41[2] = 0;
            v40 += 3;
          }
          while (v41 + 3 != (void **)v27);
        }
LABEL_33:
        if (v14)
        {
          v43 = a3;
          do
          {
            *(_QWORD *)&v44 = v14;
            sub_1C4E38968((void ***)&v44);
            v14 += 3;
            --v43;
          }
          while (v43);
        }
      }
      else
      {
        sub_1C56FCEF8(a1, v16, v17, a4, a5);
        sub_1C56FCEF8(&v7[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), v14, a5);
        sub_1C56FD6F4((char *)v7, (char *)&v7[3 * (a3 >> 1)], a2, a3 >> 1, a3 - (a3 >> 1), v14, a5);
      }
    }
  }
}

__n128 sub_1C56FD2E8(_QWORD *a1, _QWORD *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  _QWORD *v8;
  __n128 *v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  __n128 *v17;
  _QWORD *v18;
  __n128 *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  __n128 *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  __n128 v31;
  __n128 v32;
  uint64_t v33;
  _QWORD *v34;
  __n128 *v35;
  uint64_t v36;
  __n128 *v37;
  _QWORD *v38;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v11 = a2 - 3;
      v12 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(a2 - 2) - *(a2 - 3)) >> 3) * *(unsigned int *)(*(a2 - 3) + 4);
      v13 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a1[1] - *a1) >> 3) * *(unsigned int *)(*a1 + 4);
      a4->n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      v14 = &a4[1].n128_u64[1];
      v9 = (__n128 *)((char *)a4 + 40);
      if (v12 <= v13)
      {
        *a4 = *(__n128 *)a1;
        a4[1].n128_u64[0] = a1[2];
        *a1 = 0;
        a1[1] = 0;
        a1[2] = 0;
        *v14 = 0;
        a4[2].n128_u64[0] = 0;
        a4[2].n128_u64[1] = 0;
        result = *(__n128 *)(a2 - 3);
        *(__n128 *)((char *)a4 + 24) = result;
        v10 = a2 - 1;
        goto LABEL_23;
      }
      *a4 = *(__n128 *)(a2 - 3);
      a4[1].n128_u64[0] = *(a2 - 1);
      *v11 = 0;
      *(a2 - 2) = 0;
      *(a2 - 1) = 0;
      *v14 = 0;
      a4[2].n128_u64[0] = 0;
      a4[2].n128_u64[1] = 0;
      v10 = a1 + 2;
      result = *(__n128 *)a1;
      *(__n128 *)((char *)a4 + 24) = *(__n128 *)a1;
LABEL_7:
      v11 = a1;
LABEL_23:
      v9->n128_u64[0] = *v10;
      *v11 = 0;
      v11[1] = 0;
      v11[2] = 0;
      return result;
    }
    if (a3 == 1)
    {
      a4[1].n128_u64[0] = 0;
      v9 = a4 + 1;
      a4->n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      v10 = a1 + 2;
      result = *(__n128 *)a1;
      *a4 = *(__n128 *)a1;
      goto LABEL_7;
    }
    if ((uint64_t)a3 > 8)
    {
      v26 = &a1[3 * (a3 >> 1)];
      sub_1C56FCEF8(a1, v26, a3 >> 1, a4, a3 >> 1);
      sub_1C56FCEF8(&v8[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), (char *)v5 + 24 * (a3 >> 1), a3 - (a3 >> 1));
      v27 = &v8[3 * (a3 >> 1)];
      while (v27 != a2)
      {
        v28 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v27[1] - *v27) >> 3) * *(unsigned int *)(*v27 + 4);
        v29 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v8[1] - *v8) >> 3) * *(unsigned int *)(*v8 + 4);
        v5->n128_u64[0] = 0;
        v5->n128_u64[1] = 0;
        v5[1].n128_u64[0] = 0;
        if (v28 <= v29)
        {
          v30 = v8;
          v32 = *(__n128 *)v8;
          v8 += 3;
          result = v32;
        }
        else
        {
          v30 = v27;
          v31 = *(__n128 *)v27;
          v27 += 3;
          result = v31;
        }
        *v5 = result;
        v5[1].n128_u64[0] = v30[2];
        *v30 = 0;
        v30[1] = 0;
        v30[2] = 0;
        v5 = (__n128 *)((char *)v5 + 24);
        if (v8 == v26)
        {
          if (v27 != a2)
          {
            v33 = 0;
            do
            {
              v34 = &v27[v33];
              v35 = (__n128 *)((char *)v5 + v33 * 8);
              v35->n128_u64[0] = 0;
              v35->n128_u64[1] = 0;
              v35[1].n128_u64[0] = 0;
              result = *(__n128 *)&v27[v33];
              *v35 = result;
              v35[1].n128_u64[0] = v27[v33 + 2];
              *v34 = 0;
              v34[1] = 0;
              v34[2] = 0;
              v33 += 3;
            }
            while (v34 + 3 != a2);
          }
          return result;
        }
      }
      if (v8 != v26)
      {
        v36 = 0;
        do
        {
          v37 = (__n128 *)((char *)v5 + v36 * 8);
          v38 = &v8[v36];
          v37->n128_u64[0] = 0;
          v37->n128_u64[1] = 0;
          v37[1].n128_u64[0] = 0;
          result = *(__n128 *)&v8[v36];
          *v37 = result;
          v37[1].n128_u64[0] = v8[v36 + 2];
          *v38 = 0;
          v38[1] = 0;
          v38[2] = 0;
          v36 += 3;
        }
        while (v38 + 3 != v26);
      }
    }
    else if (a1 != a2)
    {
      a4->n128_u64[0] = 0;
      a4->n128_u64[1] = 0;
      a4[1].n128_u64[0] = 0;
      result = *(__n128 *)a1;
      *a4 = *(__n128 *)a1;
      a4[1].n128_u64[0] = a1[2];
      v15 = a1 + 3;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      if (a1 + 3 != a2)
      {
        v16 = 0;
        v17 = a4;
        do
        {
          v18 = v15;
          v19 = (__n128 *)((char *)v17 + 24);
          v20 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v8[4] - *v15) >> 3) * *(unsigned int *)(*v15 + 4);
          v21 = v17->n128_u64[0];
          v22 = v17->n128_u64[1];
          if (v20 > 0xEEEEEEEEEEEEEEEFLL
                   * ((uint64_t)(v22 - v17->n128_u64[0]) >> 3)
                   * *(unsigned int *)(v17->n128_u64[0] + 4))
          {
            v23 = v17[1].n128_u64[0];
            v17[2].n128_u64[0] = v22;
            v17[2].n128_u64[1] = v23;
            v17->n128_u64[0] = 0;
            v17->n128_u64[1] = 0;
            v17[1].n128_u64[0] = 0;
            v17[1].n128_u64[1] = v21;
            v24 = v5;
            if (v17 != v5)
            {
              v25 = v16;
              while (1)
              {
                v24 = (__n128 *)((char *)v5 + v25);
                if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v8[4] - *v18) >> 3) * *(unsigned int *)(*v18 + 4) <= 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(unint64_t *)((char *)v5[-1].n128_u64 + v25) - *(_QWORD *)((char *)&v5[-1] + v25 - 8)) >> 3) * *(unsigned int *)(*(_QWORD *)((char *)&v5[-1] + v25 - 8) + 4))
                  break;
                sub_1C6296B24((void **)((char *)v5 + v25));
                *v24 = *(__n128 *)((char *)v24 - 24);
                v24[1].n128_u64[0] = v24[-1].n128_u64[1];
                *(unint64_t *)((char *)v5[-1].n128_u64 + v25) = 0;
                *(unint64_t *)((char *)&v5->n128_u64[-1] + v25) = 0;
                *(_QWORD *)((char *)&v5[-1] + v25 - 8) = 0;
                v25 -= 24;
                if (!v25)
                {
                  v24 = v5;
                  break;
                }
              }
            }
            sub_1C6296B24((void **)v24);
            result = *(__n128 *)v18;
            *v24 = *(__n128 *)v18;
            v24[1].n128_u64[0] = v8[5];
          }
          else
          {
            v19->n128_u64[0] = 0;
            v17[2].n128_u64[0] = 0;
            v17[2].n128_u64[1] = 0;
            result = *(__n128 *)v18;
            *(__n128 *)((char *)v17 + 24) = *(__n128 *)v18;
            v17[2].n128_u64[1] = v8[5];
          }
          v8[4] = 0;
          v8[5] = 0;
          *v18 = 0;
          v15 = v18 + 3;
          v16 += 24;
          v17 = v19;
          v8 = v18;
        }
        while (v18 + 3 != a2);
      }
    }
  }
  return result;
}

void sub_1C56FD6F4(char *a1, char *a2, char *a3, uint64_t a4, uint64_t a5, void **a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *i;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void **v53;
  unint64_t v54;
  uint64_t v55;
  void **v56;
  char *v57;
  void **v58;
  void **v59;
  void **v60;
  unint64_t v61;
  unint64_t v62;
  void **v63;
  void **v64;
  void *v65;
  unint64_t v66;
  void **v67;
  char *v68;
  void **v69;
  void **v70;
  void **v71;
  char *v72;
  unint64_t v73;
  unint64_t v74;
  void **v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void **v83;
  void **v84;
  void **v85;
  uint64_t v86;
  char *v87;
  void **v88;
  void **v89;
  void **v90;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return;
      v11 = 0;
      v12 = *(_QWORD *)a2;
      v13 = -a4;
      while (1)
      {
        v14 = &a1[v11];
        v15 = *(_QWORD *)&a1[v11];
        if (0xEEEEEEEEEEEEEEEFLL
           * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3)
           * *(unsigned int *)(*(_QWORD *)a2 + 4) > 0xEEEEEEEEEEEEEEEFLL
                                                    * ((*(_QWORD *)&a1[v11 + 8] - v15) >> 3)
                                                    * *(unsigned int *)(v15 + 4))
          break;
        v11 += 24;
        if (__CFADD__(v13++, 1))
          return;
      }
      v17 = -v13;
      if (-v13 >= a5)
      {
        if (v13 == -1)
        {
          v79 = &a1[v11];
          *(_QWORD *)v79 = v12;
          *(_QWORD *)a2 = v15;
          v80 = *((_QWORD *)v79 + 1);
          *((_QWORD *)v79 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v80;
          v81 = *((_QWORD *)v79 + 2);
          *((_QWORD *)v79 + 2) = *((_QWORD *)a2 + 2);
          *((_QWORD *)a2 + 2) = v81;
          return;
        }
        v18 = a6;
        if (v13 > 0)
          v17 = 1 - v13;
        v30 = v17 >> 1;
        v23 = &a1[24 * (v17 >> 1) + v11];
        v21 = a3;
        if (a3 != a2)
        {
          v31 = 0xAAAAAAAAAAAAAAABLL * ((a3 - a2) >> 3);
          v21 = a2;
          do
          {
            v32 = v31 >> 1;
            v33 = (uint64_t *)&v21[24 * (v31 >> 1)];
            v35 = *v33;
            v36 = v33[1];
            v34 = (char *)(v33 + 3);
            v31 += ~(v31 >> 1);
            if (0xEEEEEEEEEEEEEEEFLL * ((v36 - v35) >> 3) * *(unsigned int *)(v35 + 4) > 0xEEEEEEEEEEEEEEEFLL
                                                                                        * ((uint64_t)(*(_QWORD *)&a1[24 * v30 + 8 + v11] - *(_QWORD *)v23) >> 3)
                                                                                        * *(unsigned int *)(*(_QWORD *)v23 + 4))
              v21 = v34;
            else
              v31 = v32;
          }
          while (v31);
        }
        v20 = 0xAAAAAAAAAAAAAAABLL * ((v21 - a2) >> 3);
        v29 = &a1[24 * v30 + v11];
      }
      else
      {
        v18 = a6;
        if (a5 >= 0)
          v19 = a5;
        else
          v19 = a5 + 1;
        v20 = v19 >> 1;
        v21 = &a2[24 * (v19 >> 1)];
        if (v14 == a2)
        {
          v29 = a2;
          v23 = a2;
        }
        else
        {
          v22 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1 - v11) >> 3);
          v23 = &a1[v11];
          do
          {
            v24 = v22 >> 1;
            v25 = (uint64_t *)&v23[24 * (v22 >> 1)];
            v27 = *v25;
            v28 = v25[1];
            v26 = (char *)(v25 + 3);
            v22 += ~(v22 >> 1);
            if (0xEEEEEEEEEEEEEEEFLL
               * ((uint64_t)(*(_QWORD *)&a2[24 * v20 + 8] - *(_QWORD *)v21) >> 3)
               * *(unsigned int *)(*(_QWORD *)v21 + 4) > 0xEEEEEEEEEEEEEEEFLL
                                                         * ((v28 - v27) >> 3)
                                                         * *(unsigned int *)(v27 + 4))
              v22 = v24;
            else
              v23 = v26;
          }
          while (v22);
          v29 = v23;
        }
        v30 = 0xAAAAAAAAAAAAAAABLL * ((v29 - a1 - v11) >> 3);
      }
      v37 = v21;
      if (v23 != a2)
      {
        v37 = v29;
        if (a2 != v21)
        {
          v38 = *(_QWORD *)v29;
          *(_QWORD *)v29 = v12;
          *(_QWORD *)a2 = v38;
          v39 = *((_QWORD *)v29 + 1);
          *((_QWORD *)v29 + 1) = *((_QWORD *)a2 + 1);
          *((_QWORD *)a2 + 1) = v39;
          v40 = *((_QWORD *)v29 + 2);
          *((_QWORD *)v29 + 2) = *((_QWORD *)a2 + 2);
          *((_QWORD *)a2 + 2) = v40;
          v37 = v29 + 24;
          for (i = a2 + 24; i != v21; i += 24)
          {
            if (v37 == a2)
              a2 = i;
            v42 = *(_QWORD *)v37;
            *(_QWORD *)v37 = *(_QWORD *)i;
            *(_QWORD *)i = v42;
            v43 = *((_QWORD *)v37 + 1);
            *((_QWORD *)v37 + 1) = *((_QWORD *)i + 1);
            *((_QWORD *)i + 1) = v43;
            v44 = *((_QWORD *)v37 + 2);
            *((_QWORD *)v37 + 2) = *((_QWORD *)i + 2);
            *((_QWORD *)i + 2) = v44;
            v37 += 24;
          }
          if (v37 != a2)
          {
            v45 = v37;
            v46 = a2;
            do
            {
              while (1)
              {
                v47 = *(_QWORD *)v45;
                *(_QWORD *)v45 = *(_QWORD *)v46;
                *(_QWORD *)v46 = v47;
                v48 = *((_QWORD *)v45 + 1);
                *((_QWORD *)v45 + 1) = *((_QWORD *)v46 + 1);
                *((_QWORD *)v46 + 1) = v48;
                v49 = *((_QWORD *)v45 + 2);
                *((_QWORD *)v45 + 2) = *((_QWORD *)v46 + 2);
                *((_QWORD *)v46 + 2) = v49;
                v45 += 24;
                v46 += 24;
                if (v46 == v21)
                  break;
                if (v45 == a2)
                  a2 = v46;
              }
              v46 = a2;
            }
            while (v45 != a2);
          }
        }
      }
      a4 = -(v30 + v13);
      v50 = a5 - v20;
      if (v30 + v20 >= a5 - (v30 + v20) - v13)
      {
        v53 = v18;
        a4 = v30;
        v52 = a7;
        v50 = v20;
        sub_1C56FD6F4(v37, v21);
        v21 = v23;
        a6 = v53;
        a3 = v37;
      }
      else
      {
        v51 = a3;
        a6 = v18;
        v52 = a7;
        sub_1C56FD6F4(&a1[v11], v29);
        a3 = v51;
        v14 = v37;
      }
      a5 = v50;
      a1 = v14;
      a2 = v21;
      a7 = v52;
      if (!v50)
        return;
    }
    if (a4 <= a5)
    {
      if (a1 == a2)
        return;
      v66 = 0;
      v55 = 0;
      do
      {
        v67 = &a6[v66 / 8];
        v68 = &a1[v66];
        *v67 = 0;
        v67[1] = 0;
        v67[2] = 0;
        *(_OWORD *)v67 = *(_OWORD *)&a1[v66];
        v67[2] = *(void **)&a1[v66 + 16];
        ++v55;
        *(_QWORD *)v68 = 0;
        *((_QWORD *)v68 + 1) = 0;
        *((_QWORD *)v68 + 2) = 0;
        v66 += 24;
      }
      while (v68 + 24 != a2);
      if (v66)
      {
        v69 = a6;
        v70 = &a6[v66 / 8];
        v71 = v70 - 3;
        v89 = v69;
        while (a2 != a3)
        {
          v72 = a3;
          v73 = 0xEEEEEEEEEEEEEEEFLL
              * ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3)
              * *(unsigned int *)(*(_QWORD *)a2 + 4);
          v74 = 0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)v69[1] - (_BYTE *)*v69) >> 3) * *((unsigned int *)*v69 + 1);
          sub_1C6296B24((void **)a1);
          if (v73 <= v74)
          {
            v75 = v69;
            v78 = *(_OWORD *)v69;
            v69 += 3;
            v77 = v78;
          }
          else
          {
            v75 = (void **)a2;
            v76 = *(_OWORD *)a2;
            a2 += 24;
            v77 = v76;
          }
          *(_OWORD *)a1 = v77;
          *((_QWORD *)a1 + 2) = v75[2];
          *v75 = 0;
          v75[1] = 0;
          v75[2] = 0;
          a1 += 24;
          a3 = v72;
          if (v70 == v69)
            goto LABEL_90;
        }
        if (v70 != v69)
        {
          v86 = 0;
          do
          {
            v87 = &a1[v86 * 8];
            v88 = &v69[v86];
            sub_1C6296B24((void **)&a1[v86 * 8]);
            *(_OWORD *)v87 = *(_OWORD *)&v69[v86];
            *((_QWORD *)v87 + 2) = v69[v86 + 2];
            *v88 = 0;
            v88[1] = 0;
            v88[2] = 0;
            v86 += 3;
          }
          while (v71 != v88);
        }
LABEL_90:
        a6 = v89;
      }
    }
    else
    {
      if (a2 == a3)
        return;
      v54 = 0;
      v55 = 0;
      do
      {
        v56 = &a6[v54 / 8];
        v57 = &a2[v54];
        *v56 = 0;
        v56[1] = 0;
        v56[2] = 0;
        *(_OWORD *)v56 = *(_OWORD *)&a2[v54];
        v56[2] = *(void **)&a2[v54 + 16];
        ++v55;
        *(_QWORD *)v57 = 0;
        *((_QWORD *)v57 + 1) = 0;
        *((_QWORD *)v57 + 2) = 0;
        v54 += 24;
      }
      while (v57 + 24 != a3);
      if (v54)
      {
        v58 = a6;
        v59 = &a6[v54 / 8];
        v60 = (void **)(a3 - 24);
        while (a2 != a1)
        {
          v61 = 0xEEEEEEEEEEEEEEEFLL
              * (((_BYTE *)*(v59 - 2) - (_BYTE *)*(v59 - 3)) >> 3)
              * *((unsigned int *)*(v59 - 3) + 1);
          v62 = 0xEEEEEEEEEEEEEEEFLL
              * ((uint64_t)(*((_QWORD *)a2 - 2) - *((_QWORD *)a2 - 3)) >> 3)
              * *(unsigned int *)(*((_QWORD *)a2 - 3) + 4);
          sub_1C6296B24(v60);
          if (v61 <= v62)
            v63 = v59;
          else
            v63 = (void **)a2;
          if (v61 <= v62)
            v64 = v59 - 3;
          else
            v64 = (void **)(a2 - 24);
          if (v61 <= v62)
            v59 -= 3;
          else
            a2 -= 24;
          v65 = *(v63 - 2);
          *v60 = *(v63 - 3);
          v60[1] = v65;
          v60[2] = *(v63 - 1);
          *v64 = 0;
          v64[1] = 0;
          v64[2] = 0;
          v60 -= 3;
          if (v59 == v58)
            goto LABEL_91;
        }
        if (v59 == v58)
        {
LABEL_91:
          a6 = v58;
          goto LABEL_92;
        }
        v82 = 0;
        v83 = v58;
        do
        {
          v84 = &v59[v82];
          v85 = &v60[v82];
          sub_1C6296B24(&v60[v82]);
          *(_OWORD *)v85 = *(_OWORD *)&v59[v82 - 3];
          v85[2] = v59[v82 - 1];
          *(v84 - 3) = 0;
          *(v84 - 2) = 0;
          *(v84 - 1) = 0;
          v82 -= 3;
        }
        while (&v59[v82] != v83);
        a6 = v83;
      }
    }
LABEL_92:
    if (a6)
    {
      do
      {
        v90 = a6;
        sub_1C4E38968(&v90);
        a6 += 3;
        --v55;
      }
      while (v55);
    }
  }
}

unint64_t sub_1C56FDDA0(unint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  int64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int64_t v17;
  _BOOL4 v18;
  BOOL v19;
  _BOOL4 v20;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int64_t v43;
  BOOL v44;
  BOOL v45;
  uint64_t *v46;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int64_t v64;
  _BOOL4 v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;

  if (a3 >= 2)
  {
    v6 = (uint64_t *)result;
    if (a3 == 2)
    {
      v7 = *(a2 - 1);
      v8 = *(_QWORD *)result;
      v9 = *(_QWORD *)(v7 + 232);
      v10 = *(_DWORD *)(v7 + 240);
      v11 = *(_QWORD *)(v7 + 248);
      v12 = __OFSUB__(v9, v11);
      v13 = v9 - v11;
      if (v12)
        v13 = (v13 >> 63) ^ 0x8000000000000000;
      v14 = *(_QWORD *)(v8 + 232);
      v15 = *(_DWORD *)(v8 + 240);
      v16 = *(_QWORD *)(v8 + 248);
      v12 = __OFSUB__(v14, v16);
      v17 = v14 - v16;
      if (v12)
        v17 = (v17 >> 63) ^ 0x8000000000000000;
      if (*(_DWORD *)(v8 + 256) == 1)
        v15 = 1;
      if (*(_DWORD *)(v7 + 256) == 1)
        v10 = 1;
      v18 = v17 < v13;
      v19 = v15 == v10;
      v20 = v15 < v10;
      if (!v19)
        v18 = v20;
      if (v18)
      {
        *(_QWORD *)result = v7;
        *(a2 - 1) = v8;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v48 = a4;
      v49 = a3 >> 1;
      v50 = (uint64_t *)(result + 8 * (a3 >> 1));
      v51 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C56FE110(result, v50, v51, a4);
        v52 = &v48[v49];
        result = sub_1C56FE110((uint64_t)&v6[a3 >> 1], a2, a3 - (a3 >> 1), v52);
        v53 = &v48[a3];
        v54 = v52;
        while (v54 != v53)
        {
          v55 = *v54;
          v56 = *v48;
          v57 = *(_QWORD *)(*v54 + 232);
          v58 = *(_DWORD *)(*v54 + 240);
          v59 = *(_QWORD *)(*v54 + 248);
          v12 = __OFSUB__(v57, v59);
          v60 = v57 - v59;
          if (v12)
            v60 = (v60 >> 63) ^ 0x8000000000000000;
          v61 = *(_QWORD *)(v56 + 232);
          v62 = *(_DWORD *)(v56 + 240);
          v63 = *(_QWORD *)(v56 + 248);
          v12 = __OFSUB__(v61, v63);
          v64 = v61 - v63;
          result = (v64 >> 63) ^ 0x8000000000000000;
          if (v12)
            v64 = (v64 >> 63) ^ 0x8000000000000000;
          if (*(_DWORD *)(v56 + 256) == 1)
            v62 = 1;
          if (*(_DWORD *)(*v54 + 256) == 1)
            v58 = 1;
          v65 = v64 < v60;
          v19 = v62 == v58;
          v66 = v62 < v58;
          if (!v19)
            v65 = v66;
          if (!v65)
            v55 = *v48;
          v48 += !v65;
          v54 += v65;
          *v6++ = v55;
          if (v48 == v52)
          {
            if (v54 != v53)
            {
              v67 = 0;
              do
              {
                v6[v67] = v54[v67];
                ++v67;
              }
              while (&v54[v67] != v53);
            }
            return result;
          }
        }
        if (v48 != v52)
        {
          v68 = 0;
          do
          {
            v6[v68] = v48[v68];
            ++v68;
          }
          while (&v48[v68] != v52);
        }
      }
      else
      {
        sub_1C56FDDA0(result, v50, v51, a4, a5);
        sub_1C56FDDA0(&v6[a3 >> 1], a2, a3 - (a3 >> 1), v48, a5);
        return sub_1C56FE464((uint64_t)v6, (char *)&v6[a3 >> 1], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v48, a5);
      }
    }
    else if ((uint64_t *)result != a2)
    {
      v22 = (uint64_t *)(result + 8);
      if ((uint64_t *)(result + 8) != a2)
      {
        v23 = 0;
        v24 = (uint64_t *)result;
        do
        {
          v25 = *v24;
          v24 = v22;
          v26 = *v22;
          v27 = *(_QWORD *)(v26 + 232);
          v28 = *(_DWORD *)(v26 + 240);
          v29 = *(_DWORD *)(v26 + 256);
          v30 = *(_QWORD *)(v26 + 248);
          v12 = __OFSUB__(v27, v30);
          v31 = v27 - v30;
          if (v12)
            v31 = (v31 >> 63) ^ 0x8000000000000000;
          v32 = *(_QWORD *)(v25 + 232);
          v33 = *(_DWORD *)(v25 + 240);
          v34 = *(_QWORD *)(v25 + 248);
          v12 = __OFSUB__(v32, v34);
          v35 = v32 - v34;
          result = (v35 >> 63) ^ 0x8000000000000000;
          if (v12)
            v35 = (v35 >> 63) ^ 0x8000000000000000;
          if (*(_DWORD *)(v25 + 256) == 1)
            v33 = 1;
          if (v29 == 1)
            v28 = 1;
          v36 = v35 < v31;
          v19 = v33 == v28;
          v37 = v33 < v28;
          if (v19)
            v37 = v36;
          if (v37)
          {
            v38 = v23;
            while (1)
            {
              *(uint64_t *)((char *)v6 + v38 + 8) = v25;
              if (!v38)
                break;
              v25 = *(uint64_t *)((char *)v6 + v38 - 8);
              v39 = *(_DWORD *)(v26 + 240);
              v40 = *(_QWORD *)(v25 + 232);
              v41 = *(_DWORD *)(v25 + 240);
              result = *(unsigned int *)(v25 + 256);
              v42 = *(_QWORD *)(v25 + 248);
              v12 = __OFSUB__(v40, v42);
              v43 = v40 - v42;
              if (v12)
                v43 = (v43 >> 63) ^ 0x8000000000000000;
              if ((_DWORD)result == 1)
                v41 = 1;
              if (v29 == 1)
                v39 = 1;
              v44 = v43 < v31;
              v19 = v41 == v39;
              v45 = v41 < v39;
              if (v19)
                v45 = v44;
              v38 -= 8;
              if (!v45)
              {
                v46 = (uint64_t *)((char *)v6 + v38 + 8);
                goto LABEL_43;
              }
            }
            v46 = v6;
LABEL_43:
            *v46 = v26;
          }
          v22 = v24 + 1;
          v23 += 8;
        }
        while (v24 + 1 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C56FE110(uint64_t result, uint64_t *a2, unint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  BOOL v13;
  int64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int64_t v18;
  _BOOL4 v19;
  BOOL v20;
  _BOOL4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int64_t v35;
  _BOOL4 v36;
  _BOOL4 v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int64_t v48;
  _BOOL4 v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int64_t v61;
  _BOOL4 v62;
  _BOOL4 v63;
  uint64_t v64;
  uint64_t v65;

  if (a3)
  {
    v4 = a4;
    v6 = (uint64_t *)result;
    if (a3 == 1)
    {
LABEL_18:
      *v4 = *v6;
      return result;
    }
    if (a3 == 2)
    {
      v8 = *(a2 - 1);
      v9 = *(_QWORD *)result;
      v10 = *(_QWORD *)(v8 + 232);
      v11 = *(_DWORD *)(v8 + 240);
      v12 = *(_QWORD *)(v8 + 248);
      v13 = __OFSUB__(v10, v12);
      v14 = v10 - v12;
      if (v13)
        v14 = (v14 >> 63) ^ 0x8000000000000000;
      v15 = *(_QWORD *)(v9 + 232);
      v16 = *(_DWORD *)(v9 + 240);
      v17 = *(_QWORD *)(v9 + 248);
      v13 = __OFSUB__(v15, v17);
      v18 = v15 - v17;
      if (v13)
        v18 = (v18 >> 63) ^ 0x8000000000000000;
      if (*(_DWORD *)(v9 + 256) == 1)
        v16 = 1;
      if (*(_DWORD *)(v8 + 256) == 1)
        v11 = 1;
      v19 = v18 < v14;
      v20 = v16 == v11;
      v21 = v16 < v11;
      if (!v20)
        v19 = v21;
      if (!v19)
        v8 = *(_QWORD *)result;
      *a4 = v8;
      v4 = a4 + 1;
      if (!v19)
        v6 = a2 - 1;
      goto LABEL_18;
    }
    if ((uint64_t)a3 > 8)
    {
      v50 = (uint64_t *)(result + 8 * (a3 >> 1));
      sub_1C56FDDA0(result, v50, a3 >> 1, a4, a3 >> 1);
      result = sub_1C56FDDA0(&v6[a3 >> 1], a2, a3 - (a3 >> 1), &v4[a3 >> 1], a3 - (a3 >> 1));
      v51 = &v6[a3 >> 1];
      while (v51 != a2)
      {
        v52 = *v51;
        v53 = *v6;
        v54 = *(_QWORD *)(*v51 + 232);
        v55 = *(_DWORD *)(*v51 + 240);
        v56 = *(_QWORD *)(*v51 + 248);
        v13 = __OFSUB__(v54, v56);
        v57 = v54 - v56;
        if (v13)
          v57 = (v57 >> 63) ^ 0x8000000000000000;
        v58 = *(_QWORD *)(v53 + 232);
        v59 = *(_DWORD *)(v53 + 240);
        v60 = *(_QWORD *)(v53 + 248);
        v13 = __OFSUB__(v58, v60);
        v61 = v58 - v60;
        if (v13)
          v61 = (v61 >> 63) ^ 0x8000000000000000;
        if (*(_DWORD *)(v53 + 256) == 1)
          v59 = 1;
        if (*(_DWORD *)(*v51 + 256) == 1)
          v55 = 1;
        v62 = v61 < v57;
        v20 = v59 == v55;
        v63 = v59 < v55;
        if (!v20)
          v62 = v63;
        if (!v62)
          v52 = *v6;
        v51 += v62;
        v6 += !v62;
        *v4++ = v52;
        if (v6 == v50)
        {
          if (v51 != a2)
          {
            v64 = 0;
            do
            {
              v4[v64] = v51[v64];
              ++v64;
            }
            while (&v51[v64] != a2);
          }
          return result;
        }
      }
      if (v6 != v50)
      {
        v65 = 0;
        do
        {
          v4[v65] = v6[v65];
          ++v65;
        }
        while (&v6[v65] != v50);
      }
    }
    else if ((_QWORD *)result != a2)
    {
      v22 = result + 8;
      *a4 = *(_QWORD *)result;
      if ((_QWORD *)(result + 8) != a2)
      {
        v23 = 0;
        v24 = a4;
        v25 = a4;
        do
        {
          v27 = *v25++;
          v26 = v27;
          v28 = *(_QWORD *)(*(_QWORD *)v22 + 232);
          v29 = *(_DWORD *)(*(_QWORD *)v22 + 240);
          v30 = *(_QWORD *)(*(_QWORD *)v22 + 248);
          v13 = __OFSUB__(v28, v30);
          v31 = v28 - v30;
          if (v13)
            v31 = (v31 >> 63) ^ 0x8000000000000000;
          v32 = *(_QWORD *)(v26 + 232);
          v33 = *(_DWORD *)(v26 + 240);
          result = *(unsigned int *)(v26 + 256);
          v34 = *(_QWORD *)(v26 + 248);
          v13 = __OFSUB__(v32, v34);
          v35 = v32 - v34;
          if (v13)
            v35 = (v35 >> 63) ^ 0x8000000000000000;
          if ((_DWORD)result == 1)
            v33 = 1;
          if (*(_DWORD *)(*(_QWORD *)v22 + 256) == 1)
            v29 = 1;
          v36 = v35 < v31;
          v20 = v33 == v29;
          v37 = v33 < v29;
          if (!v20)
            v36 = v37;
          if (v36)
          {
            v24[1] = v26;
            v38 = a4;
            if (v24 != a4)
            {
              v39 = v23;
              while (1)
              {
                v38 = (uint64_t *)((char *)a4 + v39);
                v40 = *(uint64_t *)((char *)a4 + v39 - 8);
                v41 = *(_QWORD *)(*(_QWORD *)v22 + 232);
                v42 = *(_DWORD *)(*(_QWORD *)v22 + 240);
                v43 = *(_QWORD *)(*(_QWORD *)v22 + 248);
                v13 = __OFSUB__(v41, v43);
                v44 = v41 - v43;
                if (v13)
                  v44 = (v44 >> 63) ^ 0x8000000000000000;
                v45 = *(_QWORD *)(v40 + 232);
                v46 = *(_DWORD *)(v40 + 240);
                result = *(unsigned int *)(v40 + 256);
                v47 = *(_QWORD *)(v40 + 248);
                v13 = __OFSUB__(v45, v47);
                v48 = v45 - v47;
                if (v13)
                  v48 = (v48 >> 63) ^ 0x8000000000000000;
                if ((_DWORD)result == 1)
                  v46 = 1;
                if (*(_DWORD *)(*(_QWORD *)v22 + 256) == 1)
                  v42 = 1;
                v49 = v48 < v44;
                if (v46 != v42)
                  v49 = v46 < v42;
                if (!v49)
                  break;
                *v38 = v40;
                v39 -= 8;
                if (!v39)
                {
                  v38 = a4;
                  break;
                }
              }
            }
            *v38 = *(_QWORD *)v22;
          }
          else
          {
            *v25 = *(_QWORD *)v22;
          }
          v22 += 8;
          v23 += 8;
          v24 = v25;
        }
        while ((_QWORD *)v22 != a2);
      }
    }
  }
  return result;
}

uint64_t sub_1C56FE464(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v7;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int64_t v22;
  BOOL v23;
  BOOL v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  int v34;
  char *v35;
  unint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int64_t v44;
  int v45;
  _BOOL4 v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  int v54;
  unint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int64_t v63;
  int v64;
  _BOOL4 v65;
  _BOOL4 v66;
  char *v67;
  uint64_t v68;
  BOOL v69;
  char *v70;
  char *v71;
  uint64_t v72;
  int64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  char *v92;
  _QWORD *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int64_t v109;
  uint64_t v110;
  uint64_t v111;
  int64_t v112;
  _BOOL4 v113;
  _BOOL4 v114;
  unint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  int64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int64_t v126;
  _BOOL4 v127;
  _BOOL4 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;

  if (a5)
  {
    v7 = a5;
    v10 = (char *)result;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return result;
      v11 = 0;
      v12 = *(_QWORD *)(*(_QWORD *)a2 + 232);
      v13 = *(_DWORD *)(*(_QWORD *)a2 + 240);
      v14 = *(_QWORD *)(*(_QWORD *)a2 + 248);
      v15 = __OFSUB__(v12, v14);
      v16 = v12 - v14;
      if (v15)
        v16 = (v16 >> 63) ^ 0x8000000000000000;
      if (*(_DWORD *)(*(_QWORD *)a2 + 256) == 1)
        v13 = 1;
      v17 = -a4;
      while (1)
      {
        v18 = *(_QWORD *)&v10[v11];
        v19 = *(_QWORD *)(v18 + 232);
        v20 = *(_DWORD *)(v18 + 240);
        v21 = *(_QWORD *)(v18 + 248);
        v15 = __OFSUB__(v19, v21);
        v22 = v19 - v21;
        if (v15)
          v22 = (v22 >> 63) ^ 0x8000000000000000;
        if (*(_DWORD *)(v18 + 256) == 1)
          v20 = 1;
        v23 = v22 < v16;
        v69 = v20 == v13;
        v24 = v20 < v13;
        if (!v69)
          v23 = v24;
        if (v23)
          break;
        v11 += 8;
        if (__CFADD__(v17++, 1))
          return result;
      }
      v26 = &v10[v11];
      if (-v17 >= v7)
      {
        if (v17 == -1)
        {
          *(_QWORD *)&v10[v11] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v18;
          return result;
        }
        if (v17 <= 0)
          v48 = -v17;
        else
          v48 = 1 - v17;
        v49 = v48 >> 1;
        v35 = &v10[8 * (v48 >> 1) + v11];
        v29 = a3;
        if (a3 != a2)
        {
          v50 = (a3 - a2) >> 3;
          v51 = *(_QWORD *)(*(_QWORD *)v35 + 232);
          v52 = *(_QWORD *)(*(_QWORD *)v35 + 248);
          v15 = __OFSUB__(v51, v52);
          v53 = v51 - v52;
          if (v15)
            v53 = (v53 >> 63) ^ 0x8000000000000000;
          if (*(_DWORD *)(*(_QWORD *)v35 + 256) == 1)
            v54 = 1;
          else
            v54 = *(_DWORD *)(*(_QWORD *)v35 + 240);
          v29 = a2;
          do
          {
            v55 = v50 >> 1;
            v56 = &v29[8 * (v50 >> 1)];
            v58 = *(_QWORD *)v56;
            v57 = v56 + 8;
            v59 = *(_QWORD *)(v58 + 232);
            v60 = *(_DWORD *)(v58 + 240);
            v61 = *(_DWORD *)(v58 + 256);
            v62 = *(_QWORD *)(v58 + 248);
            v15 = __OFSUB__(v59, v62);
            v63 = v59 - v62;
            if (v15)
              v63 = (v63 >> 63) ^ 0x8000000000000000;
            if (v61 == 1)
              v64 = 1;
            else
              v64 = v60;
            v65 = v53 < v63;
            v69 = v54 == v64;
            v66 = v54 < v64;
            if (!v69)
              v65 = v66;
            v50 += ~(v50 >> 1);
            if (v65)
              v29 = v57;
            else
              v50 = v55;
          }
          while (v50);
        }
        v28 = (v29 - a2) >> 3;
      }
      else
      {
        if (v7 >= 0)
          v27 = v7;
        else
          v27 = v7 + 1;
        v28 = v27 >> 1;
        v29 = &a2[8 * (v27 >> 1)];
        if (v26 == a2)
        {
          v35 = a2;
        }
        else
        {
          v30 = (a2 - v10 - v11) >> 3;
          v31 = *(_QWORD *)(*(_QWORD *)v29 + 232);
          v32 = *(_QWORD *)(*(_QWORD *)v29 + 248);
          v15 = __OFSUB__(v31, v32);
          v33 = v31 - v32;
          if (v15)
            v33 = (v33 >> 63) ^ 0x8000000000000000;
          if (*(_DWORD *)(*(_QWORD *)v29 + 256) == 1)
            v34 = 1;
          else
            v34 = *(_DWORD *)(*(_QWORD *)v29 + 240);
          v35 = &v10[v11];
          do
          {
            v36 = v30 >> 1;
            v37 = &v35[8 * (v30 >> 1)];
            v39 = *(_QWORD *)v37;
            v38 = v37 + 8;
            v40 = *(_QWORD *)(v39 + 232);
            v41 = *(_DWORD *)(v39 + 240);
            v42 = *(_DWORD *)(v39 + 256);
            v43 = *(_QWORD *)(v39 + 248);
            v15 = __OFSUB__(v40, v43);
            v44 = v40 - v43;
            if (v15)
              v44 = (v44 >> 63) ^ 0x8000000000000000;
            if (v42 == 1)
              v45 = 1;
            else
              v45 = v41;
            v46 = v44 < v33;
            v69 = v45 == v34;
            v47 = v45 < v34;
            if (!v69)
              v46 = v47;
            v30 += ~(v30 >> 1);
            if (v46)
              v30 = v36;
            else
              v35 = v38;
          }
          while (v30);
        }
        v49 = (v35 - v10 - v11) >> 3;
      }
      v67 = v29;
      if (v35 != a2)
      {
        v67 = v35;
        if (a2 != v29)
        {
          if (v35 + 8 == a2)
          {
            v130 = *(_QWORD *)v35;
            v132 = v49;
            v73 = v29 - a2;
            v136 = a6;
            v138 = a7;
            v74 = a3;
            v134 = v28;
            memmove(v35, a2, v29 - a2);
            v49 = v132;
            v28 = v134;
            v26 = &v10[v11];
            a6 = v136;
            a7 = v138;
            a3 = v74;
            v67 = &v35[v73];
            *(_QWORD *)v67 = v130;
          }
          else if (a2 + 8 == v29)
          {
            v75 = *((_QWORD *)v29 - 1);
            v67 = v35 + 8;
            if (v29 - 8 != v35)
            {
              v137 = a6;
              v139 = a7;
              v76 = a3;
              v133 = v49;
              v135 = v28;
              v131 = *((_QWORD *)v29 - 1);
              memmove(v35 + 8, v35, v29 - 8 - v35);
              v75 = v131;
              v49 = v133;
              v28 = v135;
              a6 = v137;
              v26 = &v10[v11];
              a7 = v139;
              a3 = v76;
            }
            *(_QWORD *)v35 = v75;
          }
          else
          {
            v68 = (a2 - v35) >> 3;
            if (v68 == (v29 - a2) >> 3)
            {
              v69 = a2 == v29 || v35 == a2;
              if (!v69)
              {
                v70 = v35 + 8;
                v71 = a2 + 8;
                do
                {
                  v72 = *((_QWORD *)v70 - 1);
                  *((_QWORD *)v70 - 1) = *((_QWORD *)v71 - 1);
                  *((_QWORD *)v71 - 1) = v72;
                  if (v70 == a2)
                    break;
                  v70 += 8;
                  v69 = v71 == v29;
                  v71 += 8;
                }
                while (!v69);
              }
              v67 = a2;
            }
            else
            {
              v77 = (v29 - a2) >> 3;
              v78 = (a2 - v35) >> 3;
              do
              {
                v79 = v78;
                v78 = v77;
                v77 = v79 % v77;
              }
              while (v77);
              if (v78)
              {
                v80 = &v35[8 * v78];
                do
                {
                  v82 = *((_QWORD *)v80 - 1);
                  v80 -= 8;
                  v81 = v82;
                  v83 = &v80[8 * v68];
                  v84 = v80;
                  do
                  {
                    v85 = v83;
                    *(_QWORD *)v84 = *(_QWORD *)v83;
                    v86 = &v83[8 * v68];
                    v15 = __OFSUB__(v68, (v29 - v83) >> 3);
                    v88 = v68 - ((v29 - v83) >> 3);
                    v87 = (v88 < 0) ^ v15;
                    v83 = &v35[8 * v88];
                    if (v87)
                      v83 = v86;
                    v84 = v85;
                  }
                  while (v83 != v80);
                  *(_QWORD *)v85 = v81;
                }
                while (v80 != v35);
              }
              v67 = &v35[8 * ((v29 - a2) >> 3)];
            }
          }
        }
      }
      a4 = -(v49 + v17);
      v89 = v7 - v28;
      if (v49 + v28 >= v7 - (v49 + v28) - v17)
      {
        v96 = v28;
        v97 = v7 - v28;
        v98 = a6;
        v99 = a7;
        v100 = v26;
        a4 = v49;
        result = sub_1C56FE464(v67, v29, a3, -(v49 + v17), v97);
        v95 = v100;
        a7 = v99;
        a6 = v98;
        v29 = v35;
        v89 = v96;
        a3 = v67;
      }
      else
      {
        v90 = &v10[v11];
        v91 = v35;
        v92 = a3;
        v93 = a6;
        v94 = a7;
        result = sub_1C56FE464(v90, v91, v67, v49, v28);
        a7 = v94;
        a3 = v92;
        a6 = v93;
        v95 = v67;
      }
      v7 = v89;
      v10 = v95;
      a2 = v29;
      if (!v89)
        return result;
    }
    if (a4 <= v7)
    {
      if (v10 != a2)
      {
        v115 = 0;
        do
        {
          a6[v115 / 8] = *(_QWORD *)&v10[v115];
          v115 += 8;
        }
        while (&v10[v115] != a2);
        if (v115)
        {
          v116 = a6;
          while (a2 != a3)
          {
            v117 = *(_QWORD *)a2;
            v118 = *v116;
            v119 = *(_QWORD *)(*(_QWORD *)a2 + 232);
            v120 = *(_DWORD *)(*(_QWORD *)a2 + 240);
            v121 = *(_QWORD *)(*(_QWORD *)a2 + 248);
            v15 = __OFSUB__(v119, v121);
            v122 = v119 - v121;
            if (v15)
              v122 = (v122 >> 63) ^ 0x8000000000000000;
            v123 = *(_QWORD *)(v118 + 232);
            v124 = *(_DWORD *)(v118 + 240);
            result = *(unsigned int *)(v118 + 256);
            v125 = *(_QWORD *)(v118 + 248);
            v15 = __OFSUB__(v123, v125);
            v126 = v123 - v125;
            if (v15)
              v126 = (v126 >> 63) ^ 0x8000000000000000;
            if ((_DWORD)result == 1)
              v124 = 1;
            if (*(_DWORD *)(*(_QWORD *)a2 + 256) == 1)
              v120 = 1;
            v127 = v126 < v122;
            v69 = v124 == v120;
            v128 = v124 < v120;
            if (!v69)
              v127 = v128;
            if (!v127)
              v117 = *v116;
            a2 += 8 * v127;
            v116 += !v127;
            *(_QWORD *)v10 = v117;
            v10 += 8;
            if (&a6[v115 / 8] == v116)
              return result;
          }
          return (uint64_t)memmove(v10, v116, (char *)a6 - (char *)v116 + v115);
        }
      }
    }
    else if (a2 != a3)
    {
      v101 = 0;
      do
      {
        a6[v101] = *(_QWORD *)&a2[v101 * 8];
        ++v101;
      }
      while (&a2[v101 * 8] != a3);
      if (v101 * 8)
      {
        v102 = &a6[v101];
        v103 = a3 - 8;
        while (a2 != v10)
        {
          v104 = *(v102 - 1);
          v105 = *((_QWORD *)a2 - 1);
          v106 = *(_QWORD *)(v104 + 232);
          v107 = *(_DWORD *)(v104 + 240);
          v108 = *(_QWORD *)(v104 + 248);
          v15 = __OFSUB__(v106, v108);
          v109 = v106 - v108;
          if (v15)
            v109 = (v109 >> 63) ^ 0x8000000000000000;
          v110 = *(_QWORD *)(v105 + 232);
          LODWORD(result) = *(_DWORD *)(v105 + 240);
          v111 = *(_QWORD *)(v105 + 248);
          v15 = __OFSUB__(v110, v111);
          v112 = v110 - v111;
          if (v15)
            v112 = (v112 >> 63) ^ 0x8000000000000000;
          if (*(_DWORD *)(v105 + 256) == 1)
            result = 1;
          else
            result = result;
          if (*(_DWORD *)(v104 + 256) == 1)
            v107 = 1;
          v113 = v112 < v109;
          v69 = (_DWORD)result == v107;
          v114 = (int)result < v107;
          if (!v69)
            v113 = v114;
          if (v113)
          {
            v104 = *((_QWORD *)a2 - 1);
            a2 -= 8;
          }
          else
          {
            --v102;
          }
          *(_QWORD *)v103 = v104;
          v103 -= 8;
          if (v102 == a6)
            return result;
        }
        if (v102 != a6)
        {
          v129 = 0;
          do
          {
            *(_QWORD *)&v103[v129 * 8] = v102[v129 - 1];
            --v129;
          }
          while (&v102[v129] != a6);
        }
      }
    }
  }
  return result;
}

void sub_1C56FEB40()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56FEB54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817A680;
  result[1] = v3;
  return result;
}

uint64_t sub_1C56FEB88(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817A680;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C56FEBA4(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::TargetIRAnalysis::Key, a2) + 8;
}

void sub_1C56FEBD0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56FEBE4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817A6C8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C56FEC18(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817A6C8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C56FEC34(uint64_t a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Module>::getResultImpl(*(_QWORD *)(a1 + 8), &llvm::IRSimilarityAnalysis::Key, a2)
       + 8;
}

void sub_1C56FEC60()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56FEC74(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817A710;
  result[1] = v3;
  return result;
}

uint64_t sub_1C56FECA8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817A710;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C56FECC4(uint64_t a1, const llvm::Function *a2)
{
  uint64_t *v4;
  llvm::OptimizationRemarkEmitter *v5;
  llvm::OptimizationRemarkEmitter *v6;
  uint64_t v7;

  v4 = *(uint64_t **)(a1 + 8);
  v5 = (llvm::OptimizationRemarkEmitter *)operator new();
  v6 = llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v5, a2);
  v7 = *v4;
  *v4 = (uint64_t)v6;
  if (v7)
    sub_1C4EF268C((uint64_t)v4, v7);
  return **(_QWORD **)(a1 + 8);
}

uint64_t sub_1C56FED2C()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Enable the IR outliner on linkonceodr functions";
  v1.n128_u64[1] = 47;
  v3 = 0;
  v4 = &v3;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED80BBE8, "enable-linkonceodr-ir-outlining", &v2, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80BBE8, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v2 = 2;
  v1.n128_u64[0] = (unint64_t)"Debug option to outline greedily, without restriction that calculated benefit outweighs cost";
  v1.n128_u64[1] = 92;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80BCA8, "ir-outlining-no-cost", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80BCA8, &dword_1C475E000);
}

uint64_t sub_1C56FEE0C(uint64_t a1, llvm::Function *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v3 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4 != a1 + 24)
  {
    v7 = 0;
    while (1)
    {
      if (v4)
        v8 = v4 - 56;
      else
        v8 = 0;
      if (v4 && *(_BYTE *)(v8 + 16) == 3)
      {
        if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 0)
          goto LABEL_17;
      }
      else if (*(_BYTE *)(v8 + 16) || *(_QWORD *)(v8 + 72) != v8 + 72 || (*(_BYTE *)(v8 + 34) & 0x80) != 0)
      {
        goto LABEL_17;
      }
      v9 = *(_QWORD *)(v8 + 112);
      if (!v9)
        goto LABEL_12;
      if ((*(_BYTE *)(v9 + 17) & 8) == 0)
      {
        if ((*(_BYTE *)(v9 + 14) & 0x10) == 0)
        {
LABEL_12:
          v10 = (uint64_t *)((uint64_t (*)(uint64_t, uint64_t))a2)(a3, v8);
          v7 |= llvm::inferLibFuncAttributes((uint64_t ***)v8, v10);
        }
        v7 |= llvm::inferAttributesFromOthers((llvm *)v8, a2);
      }
LABEL_17:
      v4 = *(_QWORD *)(v4 + 8);
      if (v4 == v3)
        return v7 & 1;
    }
  }
  LOBYTE(v7) = 0;
  return v7 & 1;
}

void llvm::initializeInferFunctionAttrsLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831EB0);
  if (v2 != -1)
  {
    v5[0] = sub_1C56FEF50;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831EB0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56FEF50(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeTargetLibraryInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Infer set function attributes";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "inferattrs";
  *(_QWORD *)(v2 + 24) = 10;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F32E0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C56FF0AC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C56FEFE4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32E0;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817A758;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831EB0);
  if (v3 != -1)
  {
    v7[0] = sub_1C56FEF50;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831EB0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C56FF0AC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56FEFE4(v0);
}

void sub_1C56FF0D8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C56FF0FC(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1C56FF10C(llvm::ModulePass *a1, uint64_t **a2)
{
  llvm::ModulePass *v5;

  if ((llvm::ModulePass::skipModule(a1, a2) & 1) != 0)
    return 0;
  v5 = a1;
  return sub_1C56FEE0C((uint64_t)a2, (llvm::Function *)sub_1C56FF15C, (uint64_t)&v5);
}

uint64_t sub_1C56FF15C(uint64_t a1, uint64_t a2)
{
  char **v3;
  char *v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;
  void **v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14[2];
  int v15;
  uint64_t v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *__src;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = **(char ****)(*(_QWORD *)a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != llvm::TargetLibraryInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  llvm::TargetLibraryAnalysis::run(v5 + 32, a2, (uint64_t)&v21);
  *(_QWORD *)(v5 + 240) = v21;
  if (*(_BYTE *)(v5 + 320))
  {
    if ((uint64_t *)(v5 + 240) == &v21)
    {
LABEL_16:
      *(_DWORD *)(v5 + 312) = v25;
      goto LABEL_17;
    }
    v6 = (void **)(v5 + 248);
    v7 = v23;
    v8 = *(unsigned int *)(v5 + 256);
    if (v8 >= v23)
    {
      if (v23)
        memmove(*v6, __src, 8 * v23);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v5 + 260) < v23)
    {
      *(_DWORD *)(v5 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v7, 8);
    }
    else if ((_DWORD)v8)
    {
      memmove(*v6, __src, 8 * v8);
      goto LABEL_13;
    }
    v8 = 0;
LABEL_13:
    if (v8 != v23)
      memcpy((char *)*v6 + 8 * v8, (char *)__src + 8 * v8, 8 * v23 - 8 * v8);
LABEL_15:
    *(_DWORD *)(v5 + 256) = v7;
    goto LABEL_16;
  }
  v10 = (void *)(v5 + 264);
  *(_QWORD *)(v5 + 248) = v5 + 264;
  v11 = (void **)(v5 + 248);
  *(_QWORD *)(v5 + 256) = 0x600000000;
  v12 = v23;
  if (v23 && v11 != &__src)
  {
    if (v23 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v23, 8);
      v13 = v23;
      if (!v23)
      {
LABEL_27:
        *(_DWORD *)(v5 + 256) = v12;
        goto LABEL_28;
      }
      v10 = *v11;
    }
    else
    {
      v13 = v23;
    }
    memcpy(v10, __src, 8 * v13);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 312) = v25;
  *(_BYTE *)(v5 + 320) = 1;
LABEL_17:
  if (__src != &v24)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v16);
  sub_1C4D8B52C(v14);
  return v5 + 240;
}

uint64_t sub_1C56FF3AC(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::TargetLibraryAnalysis::Key, a2) + 8;
}

void llvm::initializeSimpleInlinerPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831EB8);
  if (v2 != -1)
  {
    v5[0] = sub_1C56FF434;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831EB8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C56FF434(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeCallGraphWrapperPassPass(a1, v2);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  v4 = operator new();
  *(_QWORD *)v4 = "Function Integration/Inlining";
  *(_QWORD *)(v4 + 8) = 29;
  *(_QWORD *)(v4 + 16) = "inline";
  *(_QWORD *)(v4 + 24) = 6;
  *(_QWORD *)(v4 + 32) = &unk_1EF8F7148;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C56FF8E4;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C56FF4E8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F7148;
  *(_DWORD *)(a1 + 24) = 3;
  *(_BYTE *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0x1000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)a1 = &off_1E817A7F8;
  llvm::getInlineParams(dword_1ED82D9C0, a1 + 160);
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831EB8);
  if (v3 != -1)
  {
    v7[0] = sub_1C56FF434;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831EB8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t llvm::createFunctionInliningPass(llvm *this)
{
  int v1;
  uint64_t v2;
  int v3;
  _DWORD v5[2];
  char v6;
  int v7;
  char v8;
  int v9;
  char v10;
  int v11;
  char v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  char v18;
  int v19;
  __int16 v20;

  v1 = (int)this;
  v2 = operator new();
  LOBYTE(v7) = 0;
  v8 = 0;
  LOBYTE(v9) = 0;
  v10 = 0;
  LOBYTE(v11) = 0;
  v12 = 0;
  LOBYTE(v15) = 0;
  v16 = 0;
  v19 = 0;
  v20 = 256;
  v3 = dword_1ED82DA80;
  if (!word_1ED82DA08)
    v3 = v1;
  v5[0] = v3;
  v5[1] = dword_1ED82DB40;
  v6 = 1;
  v13 = dword_1ED82DD80;
  v14 = 1;
  if (word_1ED82DDC8)
  {
    v15 = dword_1ED82DE40;
    v16 = 1;
  }
  v17 = dword_1ED82DC00;
  v18 = 1;
  if (word_1ED82DA08)
  {
    if (!word_1ED82DC48)
      return sub_1C56FF6FC(v2, (uint64_t)v5);
  }
  else
  {
    v11 = 5;
    v12 = 1;
    v9 = 50;
    v10 = 1;
  }
  v7 = dword_1ED82DCC0;
  v8 = 1;
  return sub_1C56FF6FC(v2, (uint64_t)v5);
}

{
  uint64_t v1;

  v1 = operator new();
  return sub_1C56FF4E8(v1);
}

uint64_t sub_1C56FF6FC(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F7148;
  *(_DWORD *)(a1 + 24) = 3;
  *(_BYTE *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0x1000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)a1 = &off_1E817A7F8;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 192) = v4;
  *(_OWORD *)(a1 + 208) = v5;
  *(_OWORD *)(a1 + 176) = v3;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v9 = qword_1ED830BC0[0];
  v7 = atomic_load(&qword_1ED831EB8);
  if (v7 != -1)
  {
    v11[0] = sub_1C56FF434;
    v11[1] = &v9;
    v10 = v11;
    std::__call_once(&qword_1ED831EB8, &v10, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t llvm::createFunctionInliningPass(llvm *this, int a2, int a3)
{
  uint64_t v4;
  _OWORD v6[4];
  int v7;
  _OWORD v8[2];
  __int128 v9;
  __int128 v10;
  int v11;

  llvm::getInlineParams(this, a2, (uint64_t)v8);
  if (a3)
  {
    DWORD1(v9) = 0;
    if (!BYTE8(v9))
      BYTE8(v9) = 1;
  }
  v4 = operator new();
  v6[2] = v9;
  v6[3] = v10;
  v7 = v11;
  v6[0] = v8[0];
  v6[1] = v8[1];
  return sub_1C56FF6FC(v4, (uint64_t)v6);
}

uint64_t llvm::createFunctionInliningPass(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[4];
  int v7;

  v2 = operator new();
  v3 = *(_OWORD *)(a1 + 48);
  v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v3;
  v7 = *(_DWORD *)(a1 + 64);
  v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  return sub_1C56FF6FC(v2, (uint64_t)v6);
}

uint64_t sub_1C56FF8E4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56FF4E8(v0);
}

void sub_1C56FF910(_QWORD *a1)
{
  sub_1C627A6A0(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C56FF934(llvm::LegacyInlinerBase *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  return llvm::LegacyInlinerBase::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C56FF96C(uint64_t a1, uint64_t ****a2)
{
  char **v4;
  char *v5;

  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::TargetTransformInfoWrapperPass::ID);
  *(_QWORD *)(a1 + 232) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  return llvm::LegacyInlinerBase::runOnSCC(a1, a2);
}

uint64_t sub_1C56FF9CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::BasicBlock *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const llvm::Function *v13;
  _QWORD *v14;
  uint64_t result;
  uint64_t (**v16)(void);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  void **v24;
  uint64_t v25;
  _QWORD v26[2];
  uint64_t *v27;
  llvm::LLVMContext ***v28;
  uint64_t v29;
  uint64_t v30;
  llvm::LLVMContext ****v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  uint64_t v35;
  int v36;
  char v37;
  void *v38;
  uint64_t v39;
  _BYTE v40[260];
  int v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 232);
  v28 = 0;
  v29 = 0;
  LODWORD(v30) = 0;
  v31 = 0;
  v32 = 0;
  LODWORD(v33) = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v9 = *(_QWORD *)(v8 + 56);
  if (!v9)
  {
    sub_1C485C2F0();
LABEL_36:
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    goto LABEL_5;
  }
  v4 = (uint64_t *)&v31;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v9 + 48))(v26);
  v3 = (llvm::BasicBlock *)(v8 + 64);
  v10 = v26[0];
  if (!*(_BYTE *)(v8 + 72))
  {
    *(_QWORD *)(v8 + 64) = v26[0];
    *(_BYTE *)(v8 + 72) = 1;
    goto LABEL_5;
  }
  v26[0] = 0;
  v11 = *(_QWORD *)v3;
  *(_QWORD *)v3 = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v12 = v26[0];
    v26[0] = 0;
    if (v12)
      goto LABEL_36;
  }
LABEL_5:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v4);
  sub_1C4D8B52C((uint64_t *)&v28);
  v13 = *(const llvm::Function **)(*(_QWORD *)(a2 + 40) + 56);
  if (*((const llvm::Function **)v13 + 9) == (const llvm::Function *)((char *)v13 + 72))
  {
    v14 = 0;
  }
  else
  {
    v19 = *((_QWORD *)v13 + 10);
    if (v19)
      v20 = v19 - 24;
    else
      v20 = 0;
    v21 = *(_QWORD *)(v20 + 56);
    LODWORD(v29) = 9;
    BYTE4(v29) = 2;
    v30 = v21;
    v31 = 0;
    v32 = 0;
    v33 = "inline";
    v34 = "";
    v35 = 0;
    LOBYTE(v36) = 0;
    v37 = 0;
    v38 = v40;
    v39 = 0x400000000;
    v40[256] = 0;
    v41 = -1;
    v42 = v20;
    v28 = (llvm::LLVMContext ***)&off_1E814E500;
    if (llvm::OptimizationRemark::isEnabled(&v28))
      v14 = v26;
    else
      v14 = 0;
    v28 = (llvm::LLVMContext ***)&off_1E814E790;
    v22 = (char *)v38;
    if ((_DWORD)v39)
    {
      v23 = (unint64_t)v39 << 6;
      do
      {
        v24 = (void **)&v22[v23];
        if (v22[v23 - 17] < 0)
          operator delete(*(v24 - 5));
        if (*((char *)v24 - 41) < 0)
          operator delete(*(v24 - 8));
        v23 -= 64;
      }
      while (v23);
      v22 = (char *)v38;
    }
    if (v22 != v40)
      free(v22);
    v13 = *(const llvm::Function **)(*(_QWORD *)(a2 + 40) + 56);
  }
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v26, v13);
  v28 = (llvm::LLVMContext ***)&off_1E817A8B0;
  v29 = a1;
  v31 = &v28;
  llvm::getInlineCost(a2, (int *)(a1 + 160), v3, (uint64_t)sub_1C4E5E070, (uint64_t)&v28, (uint64_t (*)(uint64_t, llvm *))sub_1C5598CFC, a1 + 48, a3, 0, v25, *(_QWORD *)(a1 + 40), (uint64_t)v14);
  result = (uint64_t)v31;
  if (v31 == &v28)
  {
    v16 = (uint64_t (**)(void))(v28 + 4);
  }
  else
  {
    if (!v31)
      goto LABEL_12;
    v16 = (uint64_t (**)(void))(*v31 + 5);
  }
  result = (*v16)();
LABEL_12:
  v17 = v27;
  v27 = 0;
  if (v17)
  {
    v18 = *v17;
    *v17 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    return MEMORY[0x1CAA32FC0](v17, 0x20C4093837F09);
  }
  return result;
}

void sub_1C56FFCD8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56FFCEC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817A8B0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C56FFD20(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817A8B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C56FFD3C(uint64_t a1, llvm::Function *a2)
{
  return llvm::AssumptionCacheTracker::getAssumptionCache(*(llvm::AssumptionCacheTracker **)(*(_QWORD *)(a1 + 8) + 32), a2);
}

uint64_t llvm::LegacyInlinerBase::doInitialization(llvm::LegacyInlinerBase *this, const llvm::Module **a2)
{
  if (dword_1ED82D528)
    llvm::ImportedFunctionsInliningStatistics::setModuleInfo((uint64_t)this + 80, *a2);
  return 0;
}

uint64_t llvm::LegacyInlinerBase::inlineCalls(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  char **v5;
  char *v6;
  char **v7;
  char *v8;
  uint64_t (**v9)();
  uint64_t (***v10)();
  uint64_t (***v11)();
  void (**v12)(uint64_t (***)());
  uint64_t (***v13)();
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *j;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t (***v36)();
  uint64_t v37;
  uint64_t v38;
  char **v39;
  unint64_t v40;
  void **v41;
  char *v42;
  unint64_t v43;
  void **v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char *v61;
  llvm::Value *v62;
  unint64_t v63;
  unint64_t v64;
  const llvm::Function *v65;
  uint64_t *v66;
  int wouldInstructionBeTriviallyDead;
  int k;
  llvm::Function *v69;
  _QWORD *v70;
  _QWORD *v71;
  unint64_t v72;
  BOOL v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  const llvm::Function *v80;
  uint64_t v81;
  const char *v82;
  const char *v83;
  size_t v84;
  std::string::size_type v85;
  std::string *p_dst;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  std::string *v92;
  std::string::size_type v93;
  const std::string::value_type *v94;
  std::string::size_type v95;
  std::string *v96;
  uint64_t v97;
  unsigned __int8 *v98;
  size_t v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  BOOL v107;
  _QWORD *v108;
  _QWORD *v109;
  unint64_t v110;
  BOOL v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t n;
  uint64_t v115;
  _BOOL4 ArchAllowsMergeAttributes;
  const llvm::Function *v117;
  _BOOL4 v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  BOOL v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  unsigned int v137;
  int v138;
  uint64_t *v139;
  int v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  __int16 v144;
  __int16 v145;
  char v146;
  unint64_t v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  char *v154;
  unsigned __int8 *IfExists;
  uint64_t v156;
  uint64_t m;
  llvm::Instruction *v158;
  _BOOL4 v159;
  BOOL v160;
  uint64_t v161;
  BOOL v162;
  llvm::Instruction *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t *v168;
  int v169;
  int v170;
  uint64_t v171;
  llvm::Function *v172;
  llvm::Function *v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  _QWORD **v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  int v181;
  char *v182;
  char *v183;
  BOOL v184;
  uint64_t *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  size_t v192;
  uint64_t v193;
  char *v194;
  unint64_t v195;
  void **v196;
  char *v197;
  unint64_t v198;
  void **v199;
  char *v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  void (**v206)(void);
  void (**v207)(void);
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  uint64_t v214;
  llvm::ImportedFunctionsInliningStatistics *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  int v220;
  unint64_t v221;
  char v222;
  int v223;
  char *__s;
  uint64_t v226;
  unsigned __int8 *v227;
  unsigned __int8 *v228;
  _DWORD v229[4];
  _BYTE v230[40];
  char v231;
  _QWORD v232[2];
  uint64_t *v233;
  uint64_t v234;
  uint64_t v235;
  unsigned int v236;
  char *v237;
  char *v238;
  uint64_t v239;
  int v240;
  _BYTE v241[64];
  void *v242;
  uint64_t v243;
  char v244;
  void *v245;
  char v246;
  void *v247;
  uint64_t v248;
  uint64_t *v249;
  void *v250;
  char v251;
  std::string __dst;
  void *__p;
  char v254;
  uint64_t (**v255)();
  uint64_t v256;
  uint64_t (***v257)();
  void *v258;
  void *v259;
  void *v260;
  void *v261;
  char v262;
  char v263[56];
  char v264;
  _QWORD v265[3];
  _QWORD *v266;
  uint64_t (**v267)();
  uint64_t v268;
  uint64_t (***v269)();
  uint64_t (**v270)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (*v271)(uint64_t);
  uint64_t (***v272)();
  uint64_t v273;
  unint64_t v274;
  const char *v275;
  void *v276;
  uint64_t v277;
  _BYTE v278[16];
  void *v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  void *v284;
  uint64_t v285;
  _BYTE v286[36];
  int v287;
  uint64_t v288;
  char v289;
  void *v290;
  uint64_t v291;
  _BYTE v292[128];
  void *v293;
  uint64_t v294;
  _BYTE v295[256];
  std::string v296;
  void *v297;
  char v298;
  void *v299;
  unsigned int v300;
  uint64_t v301;
  void *v302[2];
  uint64_t v303;
  uint64_t v304;
  _DWORD v305[2];
  const char *v306;
  const char *v307;
  uint64_t v308;
  char v309;
  char v310;
  void *v311;
  uint64_t v312;
  _BYTE v313[260];
  int v314;
  uint64_t v315;
  uint64_t v316;

  v316 = *MEMORY[0x1E0C80C00];
  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::CallGraphWrapperPass::ID);
  v216 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::CallGraphWrapperPass::ID)+ 32);
  v5 = **(char ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::AssumptionCacheTracker::ID);
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::AssumptionCacheTracker::ID);
  v7 = **(char ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::ProfileSummaryInfoWrapperPass::ID);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
  v9 = &off_1E817AD70;
  v10 = (uint64_t (***)())(a1 + 48);
  v255 = &off_1E817AD70;
  v256 = a1;
  v257 = &v255;
  if ((uint64_t (***)())(a1 + 48) == &v255)
    goto LABEL_15;
  v11 = *(uint64_t (****)())(a1 + 72);
  if (v11 == v10)
  {
    v270 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))&off_1E817AD70;
    v271 = (uint64_t (*)(uint64_t))a1;
    v257 = 0;
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)(a1 + 48) + 24))(a1 + 48, &v255);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 32))(*(_QWORD *)(a1 + 72));
    *(_QWORD *)(a1 + 72) = 0;
    v257 = &v255;
    ((void (*)(uint64_t, _QWORD *))v270[3])((uint64_t)&v270, (_QWORD *)(a1 + 48));
    v270[4]((llvm::DiagnosticInfoWithLocationBase *)&v270);
    v11 = v257;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = &off_1E817AD70;
    *(_QWORD *)(a1 + 56) = a1;
    v257 = v11;
  }
  *(_QWORD *)(a1 + 72) = v10;
  if (v11 == &v255)
  {
    v9 = v255;
LABEL_15:
    v12 = (void (**)(uint64_t (***)()))(v9 + 4);
    v11 = &v255;
    goto LABEL_16;
  }
  if (!v11)
  {
    v267 = &off_1E817ADB8;
    v268 = a1;
    v269 = &v267;
    v14 = *(_QWORD *)(a1 + 40);
    goto LABEL_21;
  }
  v12 = (void (**)(uint64_t (***)()))(*v11 + 5);
LABEL_16:
  (*v12)(v11);
  v13 = *(uint64_t (****)())(a1 + 72);
  v267 = &off_1E817ADB8;
  v268 = a1;
  v269 = &v267;
  v14 = *(_QWORD *)(a1 + 40);
  if (!v13)
  {
    v266 = 0;
    goto LABEL_22;
  }
  if (v13 == v10)
  {
LABEL_21:
    v266 = v265;
    ((void (*)(uint64_t, _QWORD *))(*v10)[3])(a1 + 48, v265);
    goto LABEL_22;
  }
  v266 = (_QWORD *)((uint64_t (*)(uint64_t (***)()))(*v13)[2])(v13);
LABEL_22:
  v220 = *(unsigned __int8 *)(a1 + 28);
  v226 = a1;
  v255 = (uint64_t (**)())a1;
  LOBYTE(v256) = 0;
  v262 = 0;
  v263[0] = 0;
  v264 = 0;
  v237 = v241;
  v238 = v241;
  v239 = 8;
  v240 = 0;
  v16 = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  if (v16 == v15)
  {
    v18 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)v16 + 8);
      if (v17)
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v237, v17);
      v16 += 8;
    }
    while (v16 != v15);
    v18 = *(_QWORD *)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
  }
  v293 = v295;
  v294 = 0x1000000000;
  v290 = v292;
  v291 = 0x800000000;
  if (v18 == v16)
  {
    LOBYTE(v47) = 0;
    goto LABEL_400;
  }
  v219 = v14;
  v215 = (llvm::ImportedFunctionsInliningStatistics *)(a1 + 80);
  do
  {
    v19 = *(_QWORD *)(*(_QWORD *)v18 + 8);
    if (!v19)
      goto LABEL_102;
    if (*(_BYTE *)(v19 + 16))
    {
      if (*(_BYTE *)(v19 + 16) == 3 && (*(_DWORD *)(v19 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_102;
    }
    else if (*(_QWORD *)(v19 + 72) == v19 + 72 && (*(_BYTE *)(v19 + 34) & 0x80) == 0)
    {
      goto LABEL_102;
    }
    llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)&v247, *(const llvm::Function **)(*(_QWORD *)v18 + 8));
    v20 = v19 + 72;
    for (i = *(_QWORD *)(v19 + 80); i != v20; i = *(_QWORD *)(i + 8))
    {
      v22 = i - 24;
      if (!i)
        v22 = 0;
      v23 = (_QWORD *)(v22 + 40);
      for (j = *(_QWORD **)(v22 + 48); j != v23; j = (_QWORD *)j[1])
      {
        if (j)
          v25 = j - 3;
        else
          v25 = 0;
        v26 = *((unsigned __int8 *)v25 + 16);
        if (v26 != 33 && v26 != 39)
        {
          if (v26 != 84)
            continue;
          v27 = *(v25 - 4);
          if (v27)
          {
            if (!*(_BYTE *)(v27 + 16) && *(_QWORD *)(v27 + 24) == v25[9] && (*(_BYTE *)(v27 + 33) & 0x20) != 0)
              continue;
          }
        }
        v28 = *(j - 7);
        if (v28
          && !*(_BYTE *)(v28 + 16)
          && *(_QWORD *)(v28 + 24) == j[6]
          && *(_QWORD *)(v28 + 72) == v28 + 72
          && (*(_BYTE *)(v28 + 34) & 0x80) == 0)
        {
          llvm::setInlineRemark((llvm::Value *)(j - 3), "unavailable definition", 0x16uLL);
          v29 = ***(_QWORD ***)v247;
          if (*(_QWORD *)(v29 + 128)
            || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v29 + 72) + 48))(*(_QWORD *)(v29 + 72)))
          {
            v30 = v25[6];
            if (v30)
            {
              v31 = *(_QWORD *)(v30 - 8 * *(unsigned int *)(v30 + 8));
              if (*(_BYTE *)v31 != 15)
                v31 = *(_QWORD *)(v31 - 8 * *(unsigned int *)(v31 + 8));
              v32 = *(_DWORD *)(v30 + 4);
              LODWORD(v30) = *(unsigned __int16 *)(v30 + 2);
            }
            else
            {
              v31 = 0;
              v32 = 0;
            }
            v35 = v25[5];
            v36 = *(uint64_t (****)())(v35 + 56);
            LODWORD(v271) = 10;
            BYTE4(v271) = 2;
            v272 = v36;
            v273 = v31;
            v274 = __PAIR64__(v30, v32);
            v275 = "inline";
            v276 = "NoDefinition";
            v277 = 12;
            v278[0] = 0;
            v278[8] = 0;
            v279 = &v281;
            v280 = 0x400000000;
            v286[32] = 0;
            v287 = -1;
            v288 = v35;
            v270 = &off_1E814E538;
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v296, "Callee", 6uLL, (_BYTE *)v28);
            v37 = sub_1C47E3888((uint64_t)&v270, (uint64_t)&v296);
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)" will not be inlined into ";
            __dst.__r_.__value_.__l.__size_ = 26;
            sub_1C53B17B4(v37 + 80, (const void **)&__dst.__r_.__value_.__l.__data_);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__dst, "Caller", 6uLL, *(_BYTE **)(j[2] + 56));
            v38 = sub_1C47E3888(v37, (uint64_t)&__dst);
            v242 = " because its definition is unavailable";
            v243 = 38;
            sub_1C53B17B4(v38 + 80, (const void **)&v242);
            *(_BYTE *)(v38 + 352) = 1;
            sub_1C61998EC((uint64_t)v302, v38);
            v302[0] = &off_1E814E538;
            if (v254 < 0)
              operator delete(__p);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (v298 < 0)
              operator delete(v297);
            if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v296.__r_.__value_.__l.__data_);
            v270 = &off_1E814E790;
            v39 = (char **)v279;
            if ((_DWORD)v280)
            {
              v40 = (unint64_t)v280 << 6;
              do
              {
                v41 = (void **)((char *)v39 + v40);
                if (*((char *)v39 + v40 - 17) < 0)
                  operator delete(*(v41 - 5));
                if (*((char *)v41 - 41) < 0)
                  operator delete(*(v41 - 8));
                v40 -= 64;
              }
              while (v40);
              v39 = (char **)v279;
            }
            if (v39 != &v281)
              free(v39);
            llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)&v247, (llvm::DiagnosticInfoOptimizationBase *)v302);
            v302[0] = &off_1E814E790;
            v42 = (char *)v311;
            if ((_DWORD)v312)
            {
              v43 = (unint64_t)v312 << 6;
              do
              {
                v44 = (void **)&v42[v43];
                if (v42[v43 - 17] < 0)
                  operator delete(*(v44 - 5));
                if (*((char *)v44 - 41) < 0)
                  operator delete(*(v44 - 8));
                v43 -= 64;
              }
              while (v43);
              v42 = (char *)v311;
            }
            if (v42 != v313)
              free(v42);
          }
        }
        else
        {
          v33 = v294;
          if (v294 >= (unint64_t)HIDWORD(v294))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v293, (uint64_t)v295, v294 + 1, 16);
            v33 = v294;
          }
          v34 = (char *)v293 + 16 * v33;
          *v34 = j - 3;
          v34[1] = 0xFFFFFFFFLL;
          LODWORD(v294) = v294 + 1;
        }
      }
    }
    v45 = v249;
    v249 = 0;
    if (v45)
    {
      v46 = *v45;
      *v45 = 0;
      if (v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
      MEMORY[0x1CAA32FC0](v45, 0x20C4093837F09);
    }
LABEL_102:
    v18 += 8;
  }
  while (v18 != v16);
  LODWORD(v47) = v294;
  if (!(_DWORD)v294)
    goto LABEL_400;
  v48 = 0;
  do
  {
    v49 = *((_QWORD *)v293 + 2 * v48);
    v50 = *(_QWORD *)(v49 - 32);
    if (v50 && !*(_BYTE *)(v50 + 16) && *(_QWORD *)(v50 + 24) == *(_QWORD *)(v49 + 72))
    {
      v51 = (char *)sub_1C477672C((uint64_t)&v237, v50);
      v52 = v238 == v237 ? (uint64_t *)((char *)&v239 + 4) : &v239;
      if (v51 != &v238[8 * *(unsigned int *)v52])
      {
        v53 = v48--;
        v54 = (char *)v293 + 16 * v53;
        LODWORD(v47) = v47 - 1;
        v55 = (char *)v293 + 16 * v47;
        v56 = *(_QWORD *)v54;
        *(_QWORD *)v54 = *(_QWORD *)v55;
        *(_QWORD *)v55 = v56;
        LODWORD(v56) = *((_DWORD *)v54 + 2);
        *((_DWORD *)v54 + 2) = *((_DWORD *)v55 + 2);
        *((_DWORD *)v55 + 2) = v56;
      }
    }
    ++v48;
  }
  while (v48 < v47);
  v222 = 0;
  v234 = 0;
  v235 = 0;
  v236 = 0;
  v270 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v216;
  v271 = sub_1C4E5E070;
  v272 = &v267;
  v273 = v219;
  v57 = (_QWORD *)(v216 + 16);
  v275 = 0;
  v274 = 0;
  v276 = v278;
  v277 = 0x400000000;
  v281 = (char *)&v283;
  v282 = 0x800000000;
  v284 = v286;
  v285 = 0x800000000;
  v289 = 1;
  LODWORD(v58) = v294;
  while ((_DWORD)v58)
  {
    v59 = 0;
    v60 = 0;
    LODWORD(v58) = 0;
    while (2)
    {
      v61 = (char *)v293 + 16 * v59;
      v62 = *(llvm::Value **)v61;
      v63 = *(_QWORD *)(*(_QWORD *)v61 - 32);
      if (!v63)
        goto LABEL_120;
      if (*(_BYTE *)(v63 + 16))
        goto LABEL_120;
      if (*(_QWORD *)(v63 + 24) != *((_QWORD *)v62 + 9))
        goto LABEL_120;
      v64 = *((unsigned int *)v61 + 2);
      v65 = *(const llvm::Function **)(*((_QWORD *)v62 + 5) + 56);
      if (*(_QWORD *)(v63 + 72) == v63 + 72 && (*(_BYTE *)(v63 + 34) & 0x80) == 0)
        goto LABEL_120;
      if (!v266)
      {
        sub_1C485C2F0();
LABEL_432:
        abort();
      }
      v66 = (uint64_t *)(*(uint64_t (**)(_QWORD *, _QWORD))(*v266 + 48))(v266, *(_QWORD *)(*((_QWORD *)v62 + 5) + 56));
      if (*((_QWORD *)v62 + 1))
      {
        wouldInstructionBeTriviallyDead = 0;
LABEL_127:
        if ((_DWORD)v64 != -1)
        {
          for (k = v64; k != -1; k = *((_DWORD *)v290 + 4 * k + 2))
          {
            if (*((_QWORD *)v290 + 2 * k) == v63)
            {
              llvm::setInlineRemark(v62, "recursive", 9uLL);
              goto LABEL_120;
            }
          }
        }
      }
      else
      {
        wouldInstructionBeTriviallyDead = llvm::wouldInstructionBeTriviallyDead((uint64_t)v62, v66);
        if ((wouldInstructionBeTriviallyDead & 1) == 0)
          goto LABEL_127;
      }
      llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v232, v65);
      llvm::shouldInline(v62, (void (*)(__int128 *__return_ptr, uint64_t, llvm::Value *))sub_1C57046EC, (uint64_t)&v226, (llvm::OptimizationRemarkEmitter *)v232, 1, (uint64_t)v229);
      if (!v231)
        goto LABEL_341;
      if (wouldInstructionBeTriviallyDead)
      {
        llvm::setInlineRemark(v62, "trivially dead", 0xEuLL);
        v70 = (_QWORD *)*v57;
        if (!*v57)
          goto LABEL_144;
        v71 = v57;
        do
        {
          v72 = v70[4];
          v73 = v72 >= (unint64_t)v65;
          if (v72 >= (unint64_t)v65)
            v74 = v70;
          else
            v74 = v70 + 1;
          if (v73)
            v71 = v70;
          v70 = (_QWORD *)*v74;
        }
        while (*v74);
        if (v71 == v57 || v71[4] > (unint64_t)v65)
LABEL_144:
          v71 = v57;
        llvm::CallGraphNode::removeCallEdgeFor((llvm::CallGraphNode *)v71[5], v62);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v62 + 5) + 40, (uint64_t ***)v62);
        v75 = *((_QWORD *)v62 + 3);
        v76 = (_QWORD *)*((_QWORD *)v62 + 4);
        *v76 = v75;
        *(_QWORD *)(v75 + 8) = v76;
        *((_QWORD *)v62 + 3) = 0;
        *((_QWORD *)v62 + 4) = 0;
        llvm::Value::deleteValue(v62);
        goto LABEL_193;
      }
      v223 = v60;
      v77 = (unsigned __int8 *)*((_QWORD *)v62 + 6);
      v228 = v77;
      if (v77)
        llvm::MetadataTracking::track((uint64_t)&v228, v77, 2);
      v221 = v64;
      v78 = *((_QWORD *)v62 + 5);
      v79 = *((_QWORD *)v62 - 4);
      if (!v79 || *(_BYTE *)(v79 + 16) || *(_QWORD *)(v79 + 24) != *((_QWORD *)v62 + 9))
        v79 = 0;
      v80 = *(const llvm::Function **)(v78 + 56);
      v81 = sub_1C567475C((uint64_t)&v255, (llvm::Pass *)v79, v69);
      v82 = llvm::InlineFunction((uint64_t ***)v62, (uint64_t)&v270, v81, v220 != 0, 0);
      __s = (char *)v82;
      if (v82)
      {
        v83 = v82;
        v84 = strlen(v82);
        if (v84 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_432;
        v85 = v84;
        if (v84 >= 0x17)
        {
          v88 = (v84 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v84 | 7) != 0x17)
            v88 = v84 | 7;
          v89 = v78;
          v90 = v88 + 1;
          p_dst = (std::string *)operator new(v88 + 1);
          v91 = v90 | 0x8000000000000000;
          v78 = v89;
          __dst.__r_.__value_.__r.__words[2] = v91;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          __dst.__r_.__value_.__l.__size_ = v85;
        }
        else
        {
          *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v84;
          p_dst = &__dst;
          if (!v84)
            goto LABEL_168;
        }
        memmove(p_dst, v83, v85);
LABEL_168:
        p_dst->__r_.__value_.__s.__data_[v85] = 0;
        v92 = std::string::append(&__dst, "; ");
        v93 = v92->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v296.__r_.__value_.__l.__data_ = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
        v296.__r_.__value_.__r.__words[2] = v93;
        v92->__r_.__value_.__l.__size_ = 0;
        v92->__r_.__value_.__r.__words[2] = 0;
        v92->__r_.__value_.__r.__words[0] = 0;
        llvm::inlineCostStr((uint64_t)v229, (uint64_t)&v247);
        if (SHIBYTE(v249) >= 0)
          v94 = (const std::string::value_type *)&v247;
        else
          v94 = (const std::string::value_type *)v247;
        if (SHIBYTE(v249) >= 0)
          v95 = HIBYTE(v249) & 0x7F;
        else
          v95 = v248;
        v96 = std::string::append(&v296, v94, v95);
        v97 = v96->__r_.__value_.__r.__words[2];
        *(_OWORD *)v302 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
        v303 = v97;
        v96->__r_.__value_.__l.__size_ = 0;
        v96->__r_.__value_.__r.__words[2] = 0;
        v96->__r_.__value_.__r.__words[0] = 0;
        if (v303 >= 0)
          v98 = (unsigned __int8 *)v302;
        else
          v98 = (unsigned __int8 *)v302[0];
        if (v303 >= 0)
          v99 = HIBYTE(v303) & 0x7F;
        else
          v99 = (size_t)v302[1];
        llvm::setInlineRemark(v62, v98, v99);
        if (SHIBYTE(v303) < 0)
          operator delete(v302[0]);
        if (SHIBYTE(v249) < 0)
          operator delete(v247);
        if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v296.__r_.__value_.__l.__data_);
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        v100 = ***(_QWORD ***)v232[0];
        if (*(_QWORD *)(v100 + 128)
          || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v100 + 72) + 48))(*(_QWORD *)(v100 + 72)))
        {
          v169 = (int)v228;
          if (v228)
          {
            v171 = *(_QWORD *)&v228[-8 * *((unsigned int *)v228 + 2)];
            if (*(_BYTE *)v171 != 15)
              v171 = *(_QWORD *)(v171 - 8 * *(unsigned int *)(v171 + 8));
            v170 = *((_DWORD *)v228 + 1);
            v169 = *((unsigned __int16 *)v228 + 1);
          }
          else
          {
            v170 = 0;
            v171 = 0;
          }
          v189 = *(_QWORD *)(v78 + 56);
          LODWORD(v302[1]) = 10;
          BYTE4(v302[1]) = 2;
          v303 = v189;
          v304 = v171;
          v305[0] = v170;
          v305[1] = v169;
          v306 = "inline";
          v307 = "NotInlined";
          v308 = 10;
          v309 = 0;
          v310 = 0;
          v311 = v313;
          v312 = 0x400000000;
          v313[256] = 0;
          v314 = -1;
          v315 = v78;
          v302[0] = &off_1E814E538;
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__dst, "Callee", 6uLL, (_BYTE *)v63);
          v190 = sub_1C47E3888((uint64_t)v302, (uint64_t)&__dst);
          v247 = " will not be inlined into ";
          v248 = 26;
          sub_1C53B17B4(v190 + 80, (const void **)&v247);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v247, "Caller", 6uLL, v65);
          v191 = sub_1C47E3888(v190, (uint64_t)&v247);
          v242 = ": ";
          v243 = 2;
          sub_1C53B17B4(v191 + 80, (const void **)&v242);
          v192 = strlen(__s);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v242, "Reason", 6uLL, __s, v192);
          v193 = sub_1C47E3888(v191, (uint64_t)&v242);
          sub_1C61998EC((uint64_t)&v296, v193);
          v296.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E538;
          if (v246 < 0)
            operator delete(v245);
          if (v244 < 0)
            operator delete(v242);
          if (v251 < 0)
            operator delete(v250);
          if (SHIBYTE(v249) < 0)
            operator delete(v247);
          if (v254 < 0)
            operator delete(__p);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          v302[0] = &off_1E814E790;
          v194 = (char *)v311;
          if ((_DWORD)v312)
          {
            v195 = (unint64_t)v312 << 6;
            do
            {
              v196 = (void **)&v194[v195];
              if (v194[v195 - 17] < 0)
                operator delete(*(v196 - 5));
              if (*((char *)v196 - 41) < 0)
                operator delete(*(v196 - 8));
              v195 -= 64;
            }
            while (v195);
            v194 = (char *)v311;
          }
          if (v194 != v313)
            free(v194);
          llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v232, (llvm::DiagnosticInfoOptimizationBase *)&v296);
          v296.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E790;
          v197 = (char *)v299;
          if (v300)
          {
            v198 = (unint64_t)v300 << 6;
            do
            {
              v199 = (void **)&v197[v198];
              if (v197[v198 - 17] < 0)
                operator delete(*(v199 - 5));
              if (*((char *)v199 - 41) < 0)
                operator delete(*(v199 - 8));
              v198 -= 64;
            }
            while (v198);
            v197 = (char *)v299;
          }
          if (v197 != (char *)&v301)
            free(v197);
        }
        goto LABEL_190;
      }
      if (dword_1ED82D528)
        llvm::ImportedFunctionsInliningStatistics::recordInline(v215, v80, (const llvm::Function *)v79);
      v87 = *((_QWORD *)v80 + 5);
      if (*(char *)(v87 + 239) < 0)
        sub_1C47EBC30(&v296, *(void **)(v87 + 216), *(_QWORD *)(v87 + 224));
      else
        v296 = *(std::string *)(v87 + 216);
      ArchAllowsMergeAttributes = llvm::GPUBaseInfo::getArchAllowsMergeAttributes((uint64_t)&v296);
      v118 = ArchAllowsMergeAttributes;
      if (SHIBYTE(v296.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v296.__r_.__value_.__l.__data_);
        if (v118)
LABEL_230:
          llvm::AttributeFuncs::mergeAttributesForOutlining(v80, (llvm::Function *)v79, v117);
      }
      else if (ArchAllowsMergeAttributes)
      {
        goto LABEL_230;
      }
      if (byte_1ED80BDE8)
        goto LABEL_236;
      v302[0] = v305;
      v302[1] = v305;
      v303 = 16;
      LODWORD(v304) = 0;
      if ((_DWORD)v221 != -1)
        goto LABEL_236;
      v132 = v277;
      if (!(_DWORD)v277)
        goto LABEL_236;
      v133 = 0;
      v213 = v277;
      v214 = v78;
      while (2)
      {
        v134 = *((_QWORD *)v276 + v133);
        v135 = *(_QWORD *)(v134 + 64);
        if (v135)
          v136 = *(_BYTE *)(v135 + 8) == 17;
        else
          v136 = 0;
        if (!v136 || (llvm::AllocaInst::isArrayAllocation(*((llvm::AllocaInst **)v276 + v133)) & 1) != 0)
          goto LABEL_317;
        __dst.__r_.__value_.__r.__words[0] = 0;
        v137 = v236;
        v138 = sub_1C5703B90(v234, v236, v135, &__dst);
        v139 = (uint64_t *)__dst.__r_.__value_.__r.__words[0];
        if (v138)
        {
          v141 = *(uint64_t **)(__dst.__r_.__value_.__r.__words[0] + 8);
        }
        else
        {
          if (4 * (int)v235 + 4 >= 3 * v137)
          {
            v140 = 2 * v137;
            goto LABEL_267;
          }
          v139 = (uint64_t *)__dst.__r_.__value_.__r.__words[0];
          if (v137 + ~(_DWORD)v235 - HIDWORD(v235) <= v137 >> 3)
          {
            v140 = v137;
LABEL_267:
            sub_1C5703C24((uint64_t)&v234, v140);
            __dst.__r_.__value_.__r.__words[0] = 0;
            sub_1C5703B90(v234, v236, v135, &__dst);
            v139 = (uint64_t *)__dst.__r_.__value_.__r.__words[0];
          }
          LODWORD(v235) = v235 + 1;
          if (*v139 != -4096)
            --HIDWORD(v235);
          v141 = 0;
          *v139 = v135;
          v139[1] = 0;
          v139[2] = 0;
          v139[3] = 0;
        }
        v142 = (uint64_t *)v139[2];
        v217 = v133;
        v218 = v139;
        if (v141 == v142)
          goto LABEL_278;
        do
        {
          v143 = *v141;
          if (*(_QWORD *)(*v141 + 40) == *(_QWORD *)(v134 + 40))
          {
            v144 = *(_WORD *)(v143 + 18);
            v145 = *(_WORD *)(v134 + 18);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)v302, *v141);
            if (v146)
            {
              IfExists = (unsigned __int8 *)llvm::ValueAsMetadata::getIfExists((uint64_t ***)v134);
              if (IfExists)
              {
                v156 = llvm::MetadataAsValue::getIfExists(**(uint64_t ***)v134, IfExists);
                if (v156)
                {
                  for (m = *(_QWORD *)(v156 + 8); m; m = *(_QWORD *)(m + 8))
                  {
                    v158 = *(llvm::Instruction **)(m + 24);
                    v159 = sub_1C5021D50((uint64_t)v158);
                    if (v158)
                      v160 = !v159;
                    else
                      v160 = 1;
                    if (!v160)
                    {
                      v161 = *(_QWORD *)(v143 + 32);
                      if (v161)
                        v162 = v161 == *(_QWORD *)(v143 + 40) + 40;
                      else
                        v162 = 1;
                      if (v162)
                        v163 = 0;
                      else
                        v163 = (llvm::Instruction *)(v161 - 24);
                      llvm::Instruction::moveBefore(v158, v163);
                    }
                  }
                }
              }
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v134, (llvm::Value *)v143, (llvm::Value *)1);
              if ((__clz(1 << v145) ^ 0x3F) > (__clz(1 << v144) ^ 0x3F))
                *(_WORD *)(v143 + 18) = *(_WORD *)(v143 + 18) & 0xFFC0 | __clz(1 << *(_WORD *)(v134 + 18)) ^ 0x3F;
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v134 + 40) + 40, (uint64_t ***)v134);
              v164 = *(_QWORD *)(v134 + 24);
              v165 = *(_QWORD **)(v134 + 32);
              *v165 = v164;
              *(_QWORD *)(v164 + 8) = v165;
              *(_QWORD *)(v134 + 24) = 0;
              *(_QWORD *)(v134 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v134);
              v133 = v217;
              *((_QWORD *)v276 + v217) = 0;
              v132 = v213;
              v78 = v214;
              goto LABEL_317;
            }
          }
          ++v141;
        }
        while (v141 != v142);
        v139 = v218;
        v141 = (uint64_t *)v218[2];
        v78 = v214;
LABEL_278:
        v147 = v139[3];
        if ((unint64_t)v141 < v147)
        {
          *v141 = v134;
          v148 = v141 + 1;
          v132 = v213;
          goto LABEL_316;
        }
        v149 = (uint64_t *)v139[1];
        v150 = v141 - v149;
        v151 = v150 + 1;
        if ((unint64_t)(v150 + 1) >> 61)
          goto LABEL_432;
        v152 = v147 - (_QWORD)v149;
        if (v152 >> 2 > v151)
          v151 = v152 >> 2;
        if ((unint64_t)v152 >= 0x7FFFFFFFFFFFFFF8)
          v153 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v153 = v151;
        if (v153)
        {
          if (v153 >> 61)
            sub_1C4764EE4();
          v154 = (char *)operator new(8 * v153);
        }
        else
        {
          v154 = 0;
        }
        v166 = (uint64_t *)&v154[8 * v150];
        *v166 = v134;
        v148 = v166 + 1;
        if (v141 == v149)
        {
          v132 = v213;
          v168 = v218;
        }
        else
        {
          v132 = v213;
          do
          {
            v167 = *--v141;
            *--v166 = v167;
          }
          while (v141 != v149);
          v168 = v218;
          v141 = (uint64_t *)v218[1];
        }
        v168[1] = (uint64_t)v166;
        v168[2] = (uint64_t)v148;
        v168[3] = (uint64_t)&v154[8 * v153];
        v78 = v214;
        if (v141)
        {
          operator delete(v141);
          v139 = v218;
        }
        else
        {
          v139 = v168;
        }
LABEL_316:
        v139[2] = (uint64_t)v148;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)v302, v134);
        v133 = v217;
LABEL_317:
        if (++v133 != v132)
          continue;
        break;
      }
      if (v302[1] != v302[0])
        free(v302[1]);
LABEL_236:
      v227 = v228;
      if (v228)
        llvm::MetadataTracking::track((uint64_t)&v227, v228, 2);
      llvm::emitInlinedIntoBasedOnCost((llvm::OptimizationRemarkEmitter *)v232, &v227, v78, (_BYTE *)v63, v65, v229, 0, 0);
      if (v227)
        llvm::MetadataTracking::untrack((uint64_t)&v227, v227);
      if ((_DWORD)v282)
      {
        v119 = v291;
        v120 = v291;
        if (v291 >= HIDWORD(v291))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v290, (uint64_t)v292, v291 + 1, 16);
          v120 = v291;
        }
        v121 = (unint64_t *)((char *)v290 + 16 * v120);
        *v121 = v63;
        v121[1] = v221;
        LODWORD(v291) = v291 + 1;
        if ((_DWORD)v282)
        {
          v122 = 24 * v282;
          v123 = v281 + 16;
          do
          {
            v124 = *(_QWORD *)v123;
            v125 = *(unsigned __int8 *)(*(_QWORD *)v123 + 16);
            if (v125 < 0x1C
              || ((v126 = v125 - 33, v127 = v126 > 0x33, v128 = (1 << v126) & 0x8000000000041, !v127)
                ? (v129 = v128 == 0)
                : (v129 = 1),
                  v129))
            {
              v124 = 0;
            }
            v130 = v294;
            if (v294 >= (unint64_t)HIDWORD(v294))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v293, (uint64_t)v295, v294 + 1, 16);
              v130 = v294;
            }
            v131 = (char *)v293 + 16 * v130;
            *v131 = v124;
            v131[1] = v119;
            LODWORD(v294) = v294 + 1;
            v123 += 24;
            v122 -= 24;
          }
          while (v122);
        }
      }
LABEL_190:
      if (v228)
        llvm::MetadataTracking::untrack((uint64_t)&v228, v228);
      v57 = (_QWORD *)(v216 + 16);
      v60 = v223;
      if (!__s)
      {
LABEL_193:
        if (!*(_QWORD *)(v63 + 8) && (*(_DWORD *)(v63 + 32) & 0xFu) - 7 <= 1)
        {
          v101 = (char *)sub_1C477672C((uint64_t)&v237, v63);
          v102 = v238 == v237 ? (uint64_t *)((char *)&v239 + 4) : &v239;
          if (v101 == &v238[8 * *(unsigned int *)v102])
          {
            v103 = (_QWORD *)*v57;
            if (!*v57)
              goto LABEL_210;
            v104 = (_QWORD *)*v57;
            v105 = v57;
            do
            {
              v106 = v104[4];
              v107 = v106 >= v63;
              if (v106 >= v63)
                v108 = v104;
              else
                v108 = v104 + 1;
              if (v107)
                v105 = v104;
              v104 = (_QWORD *)*v108;
            }
            while (*v108);
            if (v105 == v57 || v105[4] > v63)
LABEL_210:
              v105 = v57;
            if (!*(_DWORD *)(v105[5] + 40))
            {
              if (!v103)
                goto LABEL_223;
              v109 = v57;
              do
              {
                v110 = v103[4];
                v111 = v110 >= v63;
                if (v110 >= v63)
                  v112 = v103;
                else
                  v112 = v103 + 1;
                if (v111)
                  v109 = v103;
                v103 = (_QWORD *)*v112;
              }
              while (*v112);
              if (v109 == v57 || v109[4] > v63)
LABEL_223:
                v109 = v57;
              v113 = v109[5];
              for (n = *(_QWORD *)(v113 + 16); ; n = *(_QWORD *)(v113 + 16))
              {
                v115 = *(_QWORD *)(v113 + 24);
                if (n == v115)
                  break;
                --*(_DWORD *)(*(_QWORD *)(v115 - 8) + 40);
                sub_1C4DDDF70(v113 + 16, v115 - 40);
              }
              v172 = (llvm::Function *)llvm::CallGraph::removeFunctionFromModule(v216, v113);
              if (v172)
              {
                v173 = v172;
                llvm::Function::~Function(v172);
                v175 = *(_DWORD *)(v174 + 20);
                if ((v175 & 0x40000000) != 0)
                {
                  v201 = (char *)*((_QWORD *)v173 - 1);
                  v180 = (char *)v173 - 8;
                  v200 = v201;
                  v202 = v175 & 0x7FFFFFF;
                  if ((_DWORD)v202)
                  {
                    v203 = 32 * v202;
                    do
                    {
                      v204 = &v200[v203];
                      if (*(_QWORD *)&v200[v203 - 32])
                      {
                        **((_QWORD **)v204 - 2) = *((_QWORD *)v204 - 3);
                        v205 = *((_QWORD *)v204 - 3);
                        if (v205)
                          *(_QWORD *)(v205 + 16) = *((_QWORD *)v204 - 2);
                      }
                      v203 -= 32;
                    }
                    while (v203);
                  }
                  operator delete(v200);
                }
                else
                {
                  v176 = v175 & 0x7FFFFFF;
                  if ((_DWORD)v176)
                  {
                    v177 = (_QWORD **)((char *)v173 - 16);
                    v178 = -32 * v176;
                    do
                    {
                      if (*(v177 - 2))
                      {
                        **v177 = *(v177 - 1);
                        v179 = (uint64_t)*(v177 - 1);
                        if (v179)
                          *(_QWORD *)(v179 + 16) = *v177;
                      }
                      v177 -= 4;
                      v178 += 32;
                    }
                    while (v178);
                  }
                  v180 = (char *)v173 - 32 * v176;
                  if (v175 < 0)
                    v180 = &v180[-*((_QWORD *)v180 - 1) - 8];
                }
                operator delete(v180);
              }
            }
          }
        }
        if (*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16) == 8)
        {
          v181 = v294;
          v182 = (char *)v293 + 16 * v294;
          v183 = (char *)v293 + 16 * v59;
          *(_QWORD *)v183 = *((_QWORD *)v182 - 2);
          *((_DWORD *)v183 + 2) = *((_DWORD *)v182 - 2);
        }
        else
        {
          v187 = (char *)v293 + 16 * v59;
          v181 = v294;
          v188 = (char *)v293 + 16 * v294;
          while (1)
          {
            v187 += 16;
            if (v187 == v188)
              break;
            *((_QWORD *)v187 - 2) = *(_QWORD *)v187;
            *((_DWORD *)v187 - 2) = *((_DWORD *)v187 + 2);
          }
        }
        LODWORD(v294) = v181 - 1;
        LODWORD(v58) = v58 - 1;
        v60 = 1;
        v222 = 1;
      }
      if (v231)
        v184 = v230[32] == 0;
      else
        v184 = 1;
      if (!v184)
        sub_1C61996A0((uint64_t)v230);
LABEL_341:
      v185 = v233;
      v233 = 0;
      if (v185)
      {
        v186 = *v185;
        *v185 = 0;
        if (v186)
          (*(void (**)(uint64_t))(*(_QWORD *)v186 + 8))(v186);
        MEMORY[0x1CAA32FC0](v185, 0x20C4093837F09);
      }
LABEL_120:
      v58 = (v58 + 1);
      v59 = v58;
      if ((_DWORD)v294 != (_DWORD)v58)
        continue;
      break;
    }
    if ((v60 & 1) != 0)
      continue;
    break;
  }
  if (v284 != v286)
    free(v284);
  sub_1C52768FC(&v281);
  if (v276 != v278)
    free(v276);
  v47 = v234;
  if (v236)
  {
    v209 = (_QWORD *)(v234 + 16);
    v210 = 32 * v236;
    do
    {
      v211 = *(v209 - 2);
      if (v211 != -4096 && v211 != -8192)
      {
        v212 = (void *)*(v209 - 1);
        if (v212)
        {
          *v209 = v212;
          operator delete(v212);
        }
      }
      v209 += 4;
      v210 -= 32;
    }
    while (v210);
  }
  MEMORY[0x1CAA32FB4](v47, 8);
  LOBYTE(v47) = v222;
LABEL_400:
  if (v290 != v292)
    free(v290);
  if (v293 != v295)
    free(v293);
  if (v238 != v237)
    free(v238);
  if (v264)
  {
    llvm::AAResults::~AAResults((llvm::AAResults *)v263);
    v264 = 0;
  }
  if (v262)
  {
    if (v261 != v260)
      free(v261);
    if (v259 != v258)
      free(v259);
  }
  if (v266 == v265)
  {
    v206 = (void (**)(void))(v265[0] + 32);
LABEL_413:
    (*v206)();
  }
  else if (v266)
  {
    v206 = (void (**)(void))(*v266 + 40);
    goto LABEL_413;
  }
  if (v269 == &v267)
  {
    v207 = (void (**)(void))(v267 + 4);
LABEL_418:
    (*v207)();
  }
  else if (v269)
  {
    v207 = (void (**)(void))(*v269 + 5);
    goto LABEL_418;
  }
  return v47 & 1;
}

BOOL llvm::LegacyInlinerBase::doFinalization(size_t *this, llvm::CallGraph *a2)
{
  llvm::CallGraph *v3;

  if (dword_1ED82D528)
  {
    v3 = a2;
    llvm::ImportedFunctionsInliningStatistics::dump(this + 10, dword_1ED82D528 == 2);
    a2 = v3;
  }
  return llvm::LegacyInlinerBase::removeDeadFunctions((llvm::LegacyInlinerBase *)this, a2, 0);
}

BOOL llvm::LegacyInlinerBase::removeDeadFunctions(llvm::LegacyInlinerBase *this, llvm::CallGraph *a2, int a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void **p_base;
  uint64_t i;
  uint64_t v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  BOOL v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t j;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  llvm::Function *v45;
  llvm::Function *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  _QWORD **v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _BYTE v64[128];
  void *__base;
  uint64_t v66;
  _QWORD v67[18];

  v67[16] = *MEMORY[0x1E0C80C00];
  v4 = v67;
  __base = v67;
  v66 = 0x1000000000;
  v62 = v64;
  v63 = 0x1000000000;
  v5 = (_QWORD *)*((_QWORD *)a2 + 1);
  v6 = (_QWORD *)((char *)a2 + 16);
  if (v5 == (_QWORD *)((char *)a2 + 16))
    goto LABEL_63;
  do
  {
    v8 = (uint64_t *)v5[5];
    v9 = (uint64_t *)v8[1];
    if (v9)
    {
      if (*((_BYTE *)v9 + 16))
      {
        if (*((_BYTE *)v9 + 16) == 3 && (*((_DWORD *)v9 + 5) & 0x7FFFFFF) == 0)
          goto LABEL_18;
      }
      else if ((uint64_t *)v9[9] == v9 + 9 && (*((_BYTE *)v9 + 34) & 0x80) == 0)
      {
        goto LABEL_18;
      }
      if (!a3 || (v10 = v9[14]) != 0 && (*(_BYTE *)(v10 + 12) & 4) != 0)
      {
        llvm::Constant::removeDeadConstantUsers(v8[1]);
        v11 = *((_DWORD *)v9 + 8);
        if ((v11 & 0xE) == 2 || ((v11 & 0xFu) <= 8 ? (v12 = ((1 << (v11 & 0xF)) & 0x182) == 0) : (v12 = 1), !v12))
        {
          v15 = v9[1];
          if (v15)
          {
            while (*(_BYTE *)(*(_QWORD *)(v15 + 24) + 16) == 4)
            {
              v15 = *(_QWORD *)(v15 + 8);
              if (!v15)
                goto LABEL_26;
            }
          }
          else
          {
LABEL_26:
            v61 = (uint64_t)v4;
            if ((v11 & 0xFu) - 7 >= 2 && v9[6])
            {
              v16 = v63;
              p_base = &v62;
              if (v63 >= (unint64_t)HIDWORD(v63))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 8);
                v16 = v63;
              }
            }
            else
            {
              v19 = v8[2];
              for (i = v8[3]; v19 != i; i = v8[3])
              {
                --*(_DWORD *)(*(_QWORD *)(i - 8) + 40);
                sub_1C4DDDF70((uint64_t)(v8 + 2), i - 40);
                v19 = v8[2];
              }
              llvm::CallGraphNode::removeAnyCallEdgeTo(*((_QWORD *)a2 + 10), (uint64_t)v8);
              v16 = v66;
              p_base = &__base;
              if (v66 >= (unint64_t)HIDWORD(v66))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, v61, v66 + 1, 8);
                v16 = v66;
              }
              v9 = v8;
            }
            *((_QWORD *)*p_base + v16) = v9;
            ++*((_DWORD *)p_base + 2);
            v4 = (_QWORD *)v61;
          }
        }
      }
    }
LABEL_18:
    v13 = (_QWORD *)v5[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v5[2];
        v12 = *v14 == (_QWORD)v5;
        v5 = v14;
      }
      while (!v12);
    }
    v5 = v14;
  }
  while (v14 != v6);
  if (!(_DWORD)v63 || (llvm::filterDeadComdatFunctions((uint64_t)&v62), !(_DWORD)v63))
  {
LABEL_63:
    v32 = v66;
    goto LABEL_64;
  }
  v20 = (char *)v62;
  v21 = (char *)v62 + 8 * v63;
  do
  {
    v22 = (_QWORD *)*v6;
    if (!*v6)
      goto LABEL_55;
    v23 = *(_QWORD *)v20;
    v24 = v6;
    do
    {
      v25 = v22[4];
      v26 = v25 >= v23;
      if (v25 >= v23)
        v27 = v22;
      else
        v27 = v22 + 1;
      if (v26)
        v24 = v22;
      v22 = (_QWORD *)*v27;
    }
    while (*v27);
    if (v24 == v6 || v24[4] > v23)
LABEL_55:
      v24 = v6;
    v28 = v24[5];
    for (j = *(_QWORD *)(v28 + 16); ; j = *(_QWORD *)(v28 + 16))
    {
      v30 = *(_QWORD *)(v28 + 24);
      if (j == v30)
        break;
      --*(_DWORD *)(*(_QWORD *)(v30 - 8) + 40);
      sub_1C4DDDF70(v28 + 16, v30 - 40);
    }
    llvm::CallGraphNode::removeAnyCallEdgeTo(*((_QWORD *)a2 + 10), v28);
    v31 = v66;
    if (v66 >= (unint64_t)HIDWORD(v66))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v4, v66 + 1, 8);
      v31 = v66;
    }
    *((_QWORD *)__base + v31) = v28;
    v32 = v66 + 1;
    LODWORD(v66) = v66 + 1;
    v20 += 8;
  }
  while (v20 != v21);
LABEL_64:
  if (v32)
  {
    v33 = (uint64_t *)__base;
    if (v32 == 1)
    {
      v34 = (char *)__base + 8;
LABEL_68:
      v36 = (char *)(v33 + 1);
      while (v36 != v34)
      {
        v37 = *((_QWORD *)v36 - 1);
        v38 = *(_QWORD *)v36;
        v36 += 8;
        if (v37 == v38)
        {
          v35 = v36 - 16;
          goto LABEL_72;
        }
      }
    }
    else
    {
      qsort(__base, v32, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1C629827C);
      v33 = (uint64_t *)__base;
      v34 = (char *)__base + 8 * v66;
      v35 = (char *)__base;
      if ((_DWORD)v66)
        goto LABEL_68;
LABEL_72:
      if (v35 != v34)
      {
        v39 = v35 + 16;
        if (v35 + 16 != v34)
        {
          v40 = *(_QWORD *)v35;
          do
          {
            v41 = v40;
            v40 = *(_QWORD *)v39;
            if (v41 != *(_QWORD *)v39)
            {
              *((_QWORD *)v35 + 1) = v40;
              v35 += 8;
            }
            v39 += 8;
          }
          while (v39 != v34);
        }
        v34 = v35 + 8;
      }
    }
    v42 = v34 - (char *)v33;
    v43 = (unint64_t)(v34 - (char *)v33) >> 3;
    LODWORD(v66) = v43;
    if ((v42 >> 3))
    {
      v44 = &v33[v43];
      do
      {
        v45 = (llvm::Function *)llvm::CallGraph::removeFunctionFromModule((uint64_t)a2, *v33);
        if (v45)
        {
          v46 = v45;
          llvm::Function::~Function(v45);
          v48 = *(_DWORD *)(v47 + 20);
          if ((v48 & 0x40000000) != 0)
          {
            v55 = (char *)*((_QWORD *)v46 - 1);
            v53 = (char *)v46 - 8;
            v54 = v55;
            v56 = v48 & 0x7FFFFFF;
            if ((_DWORD)v56)
            {
              v57 = 32 * v56;
              do
              {
                v58 = &v54[v57];
                if (*(_QWORD *)&v54[v57 - 32])
                {
                  **((_QWORD **)v58 - 2) = *((_QWORD *)v58 - 3);
                  v59 = *((_QWORD *)v58 - 3);
                  if (v59)
                    *(_QWORD *)(v59 + 16) = *((_QWORD *)v58 - 2);
                }
                v57 -= 32;
              }
              while (v57);
            }
            operator delete(v54);
          }
          else
          {
            v49 = v48 & 0x7FFFFFF;
            if ((_DWORD)v49)
            {
              v50 = (_QWORD **)((char *)v46 - 16);
              v51 = -32 * v49;
              do
              {
                if (*(v50 - 2))
                {
                  **v50 = *(v50 - 1);
                  v52 = (uint64_t)*(v50 - 1);
                  if (v52)
                    *(_QWORD *)(v52 + 16) = *v50;
                }
                v50 -= 4;
                v51 += 32;
              }
              while (v51);
            }
            v53 = (char *)v46 - 32 * v49;
            if (v48 < 0)
              v53 = &v53[-*((_QWORD *)v53 - 1) - 8];
          }
          operator delete(v53);
        }
        ++v33;
      }
      while (v33 != v44);
    }
  }
  if (v62 != v64)
    free(v62);
  if (__base != v4)
    free(__base);
  return v32 != 0;
}

_QWORD *llvm::InlinerPass::getAdvisor(_QWORD **a1, uint64_t *a2, uint64_t a3, const llvm::Module *a4)
{
  _QWORD **v4;
  _QWORD *result;
  uint64_t CachedResultImpl;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 v24;
  _BYTE v25[32];
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  int v34;
  uint64_t v35;

  v4 = a1;
  v35 = *MEMORY[0x1E0C80C00];
  result = *a1;
  if (!result)
  {
    CachedResultImpl = llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(*a2, (uint64_t)&llvm::InlineAdvisorAnalysis::Key, (uint64_t)a4);
    if (CachedResultImpl)
    {
      v9 = CachedResultImpl;
      v29 = 0;
      v28 = 0u;
      memset(&v25[8], 0, 24);
      *(_QWORD *)&v24 = &v25[16];
      *((_QWORD *)&v24 + 1) = &v25[16];
      *(_QWORD *)v25 = 2;
      *(_QWORD *)&v26 = (char *)&v28 + 8;
      *((_QWORD *)&v26 + 1) = (char *)&v28 + 8;
      v27 = 2;
      v10 = 8;
      *(_QWORD *)&v30 = 1;
      do
      {
        *(_QWORD *)((char *)&v30 + v10) = -4096;
        v10 += 16;
      }
      while (v10 != 136);
      if ((v30 & 1) == 0)
      {
        MEMORY[0x1CAA32FB4](*((_QWORD *)&v30 + 1), 8);
        if (*((_QWORD *)&v26 + 1) != (_QWORD)v26)
          free(*((void **)&v26 + 1));
      }
      if (*((_QWORD *)&v24 + 1) != (_QWORD)v24)
        free(*((void **)&v24 + 1));
      v4 = (_QWORD **)(v9 + 24);
      return *v4;
    }
    llvm::getInlineParams((uint64_t)&v24);
    v11 = (_QWORD *)operator new();
    v32 = *(_OWORD *)&v25[16];
    v33 = v26;
    v34 = v27;
    v30 = v24;
    v31 = *(_OWORD *)v25;
    result = llvm::InlineAdvisor::InlineAdvisor(v11, a4, a3);
    *result = &off_1E81383D0;
    v12 = v33;
    *((_OWORD *)result + 4) = v32;
    *((_OWORD *)result + 5) = v12;
    *((_DWORD *)result + 24) = v34;
    v13 = v31;
    *((_OWORD *)result + 2) = v30;
    *((_OWORD *)result + 3) = v13;
    v14 = (uint64_t)*v4;
    *v4 = result;
    if (v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      result = *v4;
    }
    v15 = qword_1ED80C0F0;
    if (byte_1ED80C0FF >= 0)
      v15 = byte_1ED80C0FF & 0x7F;
    if (v15)
    {
      v16 = *(_QWORD *)a4;
      *v4 = 0;
      v23 = result;
      v17 = (uint64_t *)qword_1ED80C0E8;
      if (byte_1ED80C0FF >= 0)
        v17 = &qword_1ED80C0E8;
      v18 = byte_1ED80C0FF & 0x7F;
      if (byte_1ED80C0FF < 0)
        v18 = qword_1ED80C0F0;
      *(_QWORD *)&v30 = v17;
      *((_QWORD *)&v30 + 1) = v18;
      *(_QWORD *)&v31 = __PAIR64__(dword_1ED80C428, dword_1ED80C1D0);
      DWORD2(v31) = dword_1ED80C680;
      llvm::getReplayInlineAdvisor(a4, a3, v16, (uint64_t *)&v23, &v30, 1, (uint64_t *)&v24);
      v19 = (_QWORD *)v24;
      *(_QWORD *)&v24 = 0;
      v20 = (uint64_t)*v4;
      *v4 = v19;
      if (v20)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        v21 = v24;
        *(_QWORD *)&v24 = 0;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      v22 = (uint64_t)v23;
      v23 = 0;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      return *v4;
    }
  }
  return result;
}

uint64_t llvm::InlinerPass::run@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, llvm::SmallPtrSetImplBase *a6@<X8>)
{
  uint64_t *v9;
  const llvm::Module *v10;
  uint64_t CachedResultImpl;
  uint64_t v12;
  uint64_t (**v13)(uint64_t);
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t ResultImpl;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  _QWORD *v22;
  llvm::OptimizationRemarkEmitter *v23;
  _QWORD *v24;
  int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  llvm::OptimizationRemarkEmitter *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char **v41;
  unint64_t v42;
  void **v43;
  char *v44;
  unint64_t v45;
  void **v46;
  uint64_t *v47;
  llvm::LazyCallGraph::RefSCC **v48;
  _QWORD *v49;
  int v50;
  void *v51;
  int v52;
  llvm::LazyCallGraph::RefSCC **v53;
  uint64_t v54;
  unsigned int v55;
  llvm::Value *v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  int v60;
  void *v61;
  uint64_t v62;
  llvm::Value *v63;
  char *v64;
  size_t v65;
  uint64_t v66;
  llvm::InlineAdvice *v67;
  uint64_t StringFnAttrAsInt;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  llvm::InlineAdvice *v73;
  llvm::CallBase *v74;
  uint64_t v75;
  uint64_t *v76;
  char *v77;
  char *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  int v84;
  uint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  char *v88;
  BOOL v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  unsigned __int8 *v93;
  size_t v94;
  unsigned int *v95;
  uint64_t v96;
  _BOOL4 ArchAllowsMergeAttributes;
  const llvm::Function *v98;
  _BOOL4 v99;
  uint64_t v100;
  llvm::InlineAdvice *v101;
  uint64_t v102;
  llvm::LazyCallGraph::RefSCC **updated;
  void **v104;
  uint64_t v105;
  int v106;
  void *v107;
  int v108;
  llvm::LazyCallGraph::RefSCC **v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  unsigned int v114;
  llvm::LazyCallGraph::RefSCC **v115;
  int v116;
  unsigned int v117;
  uint64_t v118;
  void **v119;
  char *v120;
  llvm::Function *v121;
  int v122;
  void *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void **v129;
  llvm::Function *v130;
  int v131;
  int v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  int v142;
  uint64_t v143;
  _QWORD **v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  llvm::Function *v158;
  llvm::SmallPtrSetImplBase *v159;
  llvm::SmallPtrSetImplBase *v160;
  uint64_t **v161;
  char v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  int v168;
  void *v169;
  llvm::InlineAdvisor *Advisor;
  llvm::OptimizationRemarkEmitter *v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t *v178;
  void *__dst[2];
  uint64_t v180;
  void *v181;
  llvm::LazyCallGraph::RefSCC **v182;
  char v183;
  const char *v184;
  llvm::InlineAdvice *v185;
  uint64_t v186;
  void *v187;
  uint64_t (*v188)(uint64_t *, uint64_t);
  uint64_t v189;
  __int128 v190;
  const char *v191;
  void *v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  char *v196[2];
  uint64_t v197;
  void *v198;
  uint64_t v199;
  _BYTE v200[36];
  int v201;
  uint64_t v202;
  char v203;
  void *__src;
  uint64_t v205;
  _BYTE v206[32];
  void *v207;
  int64x2_t v208;
  int64x2_t __p;
  void **v210;
  uint64_t v211;
  _BYTE v212[32];
  void *v213;
  uint64_t v214;
  _BYTE v215[64];
  void *v216;
  unsigned int v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  _BYTE v221[8];
  void *v222;
  char v223;
  _QWORD v224[2];
  char v225;
  char v226[3];
  uint64_t v227;

  v227 = *MEMORY[0x1E0C80C00];
  v9 = (uint64_t *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a3, &llvm::OuterAnalysisManagerProxy<llvm::AnalysisManager<llvm::Module>,llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Key, a2, (uint64_t)a4)+ 8);
  v163 = a2;
  v10 = *(const llvm::Module **)(*(_QWORD *)(**(_QWORD **)(a2 + 8) + 8) + 40);
  CachedResultImpl = llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(*v9, (uint64_t)&llvm::ProfileSummaryAnalysis::Key, (uint64_t)v10);
  if (CachedResultImpl)
  {
    v165 = CachedResultImpl + 8;
    sub_1C4E61040();
  }
  else
  {
    v165 = 0;
  }
  v176 = *(_QWORD *)(llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::getResultImpl(a3, &llvm::FunctionAnalysisManagerCGSCCProxy::Key, v163, (uint64_t)a4)+ 8);
  v161 = (uint64_t **)v10;
  Advisor = (llvm::InlineAdvisor *)llvm::InlinerPass::getAdvisor((_QWORD **)a1, v9, v176, v10);
  (*(void (**)(void))(*(_QWORD *)Advisor + 16))();
  if (byte_1ED80C028)
  {
    v12 = operator new();
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_OWORD *)(v12 + 128) = 0u;
    *(_OWORD *)(v12 + 144) = 0u;
    *(_OWORD *)(v12 + 160) = 0u;
    *(_OWORD *)(v12 + 176) = 0u;
    *(_OWORD *)(v12 + 192) = 0u;
    *(_OWORD *)(v12 + 208) = 0u;
    *(_OWORD *)(v12 + 224) = 0u;
    *(_OWORD *)(v12 + 240) = 0u;
    *(_OWORD *)(v12 + 256) = 0u;
    *(_OWORD *)(v12 + 272) = 0u;
    *(_OWORD *)(v12 + 288) = 0u;
    v13 = (uint64_t (**)(uint64_t))&unk_1E817AE00;
    *(_QWORD *)v12 = &unk_1E817AE00;
    *(_QWORD *)(v12 + 8) = v12 + 24;
    *(_DWORD *)(v12 + 20) = 16;
    *(_QWORD *)(v12 + 280) = 0;
    *(_QWORD *)(v12 + 288) = 0;
    *(_DWORD *)(v12 + 296) = 0;
  }
  else
  {
    v12 = operator new();
    *(_OWORD *)(v12 + 16) = 0u;
    *(_OWORD *)(v12 + 32) = 0u;
    *(_OWORD *)(v12 + 48) = 0u;
    *(_OWORD *)(v12 + 64) = 0u;
    *(_OWORD *)(v12 + 80) = 0u;
    *(_OWORD *)(v12 + 96) = 0u;
    *(_OWORD *)(v12 + 112) = 0u;
    *(_OWORD *)(v12 + 128) = 0u;
    *(_OWORD *)(v12 + 144) = 0u;
    *(_OWORD *)(v12 + 160) = 0u;
    *(_OWORD *)(v12 + 176) = 0u;
    *(_OWORD *)(v12 + 192) = 0u;
    *(_OWORD *)(v12 + 208) = 0u;
    *(_OWORD *)(v12 + 224) = 0u;
    *(_OWORD *)(v12 + 240) = 0u;
    *(_OWORD *)(v12 + 256) = 0u;
    *(_OWORD *)(v12 + 272) = 0u;
    v13 = (uint64_t (**)(uint64_t))&unk_1E817AE48;
    *(_QWORD *)v12 = &unk_1E817AE48;
    *(_QWORD *)(v12 + 8) = v12 + 24;
    *(_DWORD *)(v12 + 20) = 16;
  }
  v14 = *(unsigned int *)(v163 + 16);
  v166 = a1;
  if ((_DWORD)v14)
  {
    v15 = *(uint64_t **)(v163 + 8);
    v177 = &v15[v14];
    do
    {
      v16 = *v15;
      ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(v176, &llvm::OptimizationRemarkEmitterAnalysis::Key, *(_QWORD *)(*v15 + 8));
      v18 = *(_QWORD *)(v16 + 8);
      v19 = v18 + 72;
      for (i = *(_QWORD *)(v18 + 80); i != v19; i = *(_QWORD *)(i + 8))
      {
        v21 = i - 24;
        if (!i)
          v21 = 0;
        v22 = *(_QWORD **)(v21 + 48);
        if (v22 != (_QWORD *)(v21 + 40))
        {
          v23 = (llvm::OptimizationRemarkEmitter *)(ResultImpl + 8);
          while (1)
          {
            if (v22)
              v24 = v22 - 3;
            else
              v24 = 0;
            v25 = *((unsigned __int8 *)v24 + 16);
            if ((v25 - 33) <= 0x33 && ((1 << (v25 - 33)) & 0x8000000000041) != 0)
            {
              v27 = *(v22 - 7);
              if (v27)
              {
                if (!*(_BYTE *)(v27 + 16) && *(_QWORD *)(v27 + 24) == v22[6])
                {
                  if (*(_QWORD *)(v27 + 72) != v27 + 72 || (*(_BYTE *)(v27 + 34) & 0x80) != 0)
                  {
                    v187 = v22 - 3;
                    LODWORD(v188) = -1;
                    v34 = v23;
                    (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 24))(v12, &v187);
                    v23 = v34;
                  }
                  else if (v25 != 84
                         || (v28 = *(v24 - 4)) == 0
                         || *(_BYTE *)(v28 + 16)
                         || *(_QWORD *)(v28 + 24) != v24[9]
                         || (*(_BYTE *)(v28 + 33) & 0x20) == 0)
                  {
                    v174 = v23;
                    llvm::setInlineRemark((llvm::Value *)(v22 - 3), "unavailable definition", 0x16uLL);
                    v29 = ****(_QWORD ****)v174;
                    if (*(_QWORD *)(v29 + 128)
                      || (v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v29 + 72) + 48))(*(_QWORD *)(v29 + 72)),
                          v23 = v174,
                          v30))
                    {
                      v31 = v24[6];
                      if (v31)
                      {
                        v32 = *(_QWORD *)(v31 - 8 * *(unsigned int *)(v31 + 8));
                        if (*(_BYTE *)v32 != 15)
                          v32 = *(_QWORD *)(v32 - 8 * *(unsigned int *)(v32 + 8));
                        v33 = *(_DWORD *)(v31 + 4);
                        LODWORD(v31) = *(unsigned __int16 *)(v31 + 2);
                      }
                      else
                      {
                        v32 = 0;
                        v33 = 0;
                      }
                      v37 = v24[5];
                      v38 = *(_QWORD *)(v37 + 56);
                      LODWORD(v188) = 10;
                      BYTE4(v188) = 2;
                      v189 = v38;
                      *(_QWORD *)&v190 = v32;
                      *((_QWORD *)&v190 + 1) = __PAIR64__(v31, v33);
                      v191 = "inline";
                      v192 = "NoDefinition";
                      *(_QWORD *)&v193 = 12;
                      BYTE8(v193) = 0;
                      LOBYTE(v194) = 0;
                      *((_QWORD *)&v194 + 1) = v196;
                      v195 = 0x400000000;
                      v200[32] = 0;
                      v201 = -1;
                      v202 = v37;
                      v187 = &off_1E814E538;
                      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v207, "Callee", 6uLL, (_BYTE *)v27);
                      v39 = sub_1C47E3888((uint64_t)&v187, (uint64_t)&v207);
                      v219 = " will not be inlined into ";
                      v220 = 26;
                      sub_1C53B17B4(v39 + 80, (const void **)&v219);
                      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v219, "Caller", 6uLL, *(_BYTE **)(v22[2] + 56));
                      v40 = sub_1C47E3888(v39, (uint64_t)&v219);
                      __src = " because its definition is unavailable";
                      v205 = 38;
                      sub_1C53B17B4(v40 + 80, (const void **)&__src);
                      *(_BYTE *)(v40 + 352) = 1;
                      sub_1C61998EC((uint64_t)&v213, v40);
                      v213 = &off_1E814E538;
                      if (v223 < 0)
                        operator delete(v222);
                      if ((v221[7] & 0x80000000) != 0)
                        operator delete(v219);
                      if (SHIBYTE(v210) < 0)
                        operator delete((void *)__p.i64[0]);
                      if (v208.i8[15] < 0)
                        operator delete(v207);
                      v187 = &off_1E814E790;
                      v41 = (char **)*((_QWORD *)&v194 + 1);
                      v159 = a6;
                      if ((_DWORD)v195)
                      {
                        v42 = (unint64_t)v195 << 6;
                        do
                        {
                          v43 = (void **)((char *)v41 + v42);
                          if (*((char *)v41 + v42 - 17) < 0)
                            operator delete(*(v43 - 5));
                          if (*((char *)v43 - 41) < 0)
                            operator delete(*(v43 - 8));
                          v42 -= 64;
                        }
                        while (v42);
                        v41 = (char **)*((_QWORD *)&v194 + 1);
                        a6 = v159;
                      }
                      if (v41 != v196)
                        free(v41);
                      llvm::OptimizationRemarkEmitter::emit(v174, (llvm::DiagnosticInfoOptimizationBase *)&v213);
                      v213 = &off_1E814E790;
                      v44 = (char *)v216;
                      if (v217)
                      {
                        v45 = (unint64_t)v217 << 6;
                        v23 = v174;
                        do
                        {
                          v46 = (void **)&v44[v45];
                          if (v44[v45 - 17] < 0)
                          {
                            operator delete(*(v46 - 5));
                            v23 = v174;
                          }
                          if (*((char *)v46 - 41) < 0)
                          {
                            operator delete(*(v46 - 8));
                            v23 = v174;
                          }
                          v45 -= 64;
                        }
                        while (v45);
                        v44 = (char *)v216;
                        a6 = v159;
                      }
                      else
                      {
                        v23 = v174;
                      }
                      if (v44 != (char *)&v218)
                      {
                        free(v44);
                        v23 = v174;
                      }
                    }
                  }
                }
              }
            }
            v22 = (_QWORD *)v22[1];
            v35 = i - 24;
            if (!i)
              v35 = 0;
            if (v22 == (_QWORD *)(v35 + 40))
              break;
LABEL_44:
            if (i == v19)
              goto LABEL_78;
          }
          while (1)
          {
            i = *(_QWORD *)(i + 8);
            if (i == v19)
              goto LABEL_78;
            v36 = i - 24;
            if (!i)
              v36 = 0;
            v22 = *(_QWORD **)(v36 + 48);
            if (v22 != (_QWORD *)(v36 + 40))
              goto LABEL_44;
          }
        }
      }
LABEL_78:
      ++v15;
    }
    while (v15 != v177);
    v13 = *(uint64_t (***)(uint64_t))v12;
    a1 = v166;
  }
  if (v13[2](v12))
  {
    v214 = 0x1000000000;
    v207 = (void *)1;
    v213 = v215;
    v208 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    __p = v208;
    v210 = (void **)v212;
    v211 = 0x400000000;
    v219 = v221;
    v220 = 0x400000000;
    __src = v206;
    v205 = 0x400000000;
    v160 = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
    {
      v162 = 0;
      v47 = a4 + 12;
      v178 = a4 + 36;
      v48 = (llvm::LazyCallGraph::RefSCC **)v163;
      v175 = a4 + 12;
      while (1)
      {
        v49 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12)
                                     + 40)
                         + 56);
        v187 = v49;
        v181 = 0;
        v50 = sub_1C4850EC8(v47, &v187, &v181);
        v51 = 0;
        if (v50)
          v51 = (void *)*((_QWORD *)v181 + 1);
        v169 = v51;
        v187 = v51;
        v181 = 0;
        v52 = sub_1C4DD8A9C(v178, &v187, &v181);
        v53 = 0;
        if (v52)
          v53 = (llvm::LazyCallGraph::RefSCC **)*((_QWORD *)v181 + 1);
        if (v53 != v48)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
          goto LABEL_89;
        }
        v186 = v176;
        if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
          break;
LABEL_89:
        if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
          goto LABEL_216;
      }
      v167 = 0;
      while (1)
      {
        if (*(_QWORD **)(*(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) + 40)
                        + 56) != v49)
        {
LABEL_189:
          if ((v167 & 1) != 0)
          {
            updated = llvm::updateCGAndAnalysisManagerForCGSCCPass((uint64_t)a4, v48, (uint64_t)v169, a3, a5, v176);
            if (updated == v48)
            {
              v110 = *(_QWORD *)(a5 + 8);
              v111 = v110 + 8;
              if ((*(_BYTE *)v110 & 1) != 0)
              {
                v112 = 4;
              }
              else
              {
                v112 = *(_DWORD *)(v110 + 16);
                if (!v112)
                  goto LABEL_199;
                v111 = *(_QWORD *)(v110 + 8);
              }
              v113 = v112 - 1;
              v114 = v113 & ((v48 >> 4) ^ (v48 >> 9));
              v115 = *(llvm::LazyCallGraph::RefSCC ***)(v111 + 16 * v114);
              if (v115 == v48)
                goto LABEL_191;
              v116 = 1;
              while (v115 != (llvm::LazyCallGraph::RefSCC **)-4096)
              {
                v117 = v114 + v116++;
                v114 = v117 & v113;
                v115 = *(llvm::LazyCallGraph::RefSCC ***)(v111 + 16 * v114);
                if (v115 == v48)
                  goto LABEL_191;
              }
            }
            else
            {
LABEL_191:
              if ((_DWORD)v211)
              {
                v104 = v210;
                v105 = 8 * v211;
                while (1)
                {
                  v187 = *v104;
                  v181 = 0;
                  v106 = sub_1C4850EC8(v175, &v187, &v181);
                  v107 = 0;
                  if (v106)
                    v107 = (void *)*((_QWORD *)v181 + 1);
                  v187 = v107;
                  v181 = 0;
                  v108 = sub_1C4DD8A9C(v178, &v187, &v181);
                  v109 = 0;
                  if (v108)
                    v109 = (llvm::LazyCallGraph::RefSCC **)*((_QWORD *)v181 + 1);
                  if (v109 == v48)
                    break;
                  ++v104;
                  v105 -= 8;
                  if (!v105)
                    goto LABEL_199;
                }
                v118 = *(_QWORD *)(a5 + 136);
                v181 = v169;
                v182 = v48;
                sub_1C629858C((uint64_t)&v187, v118, (uint64_t *)&v181);
              }
            }
LABEL_199:
            sub_1C4E4D164(&v207);
            LODWORD(v211) = 0;
            v195 = 0;
            v193 = 0u;
            v194 = 0u;
            v190 = 0u;
            v191 = 0;
            v187 = (char *)&v190 + 8;
            v188 = (uint64_t (*)(uint64_t *, uint64_t))((char *)&v190 + 8);
            v189 = 2;
            v192 = (char *)&v194 + 8;
            *(_QWORD *)&v193 = (char *)&v194 + 8;
            DWORD2(v193) = 2;
            llvm::AnalysisManager<llvm::Function>::invalidate(v176, (uint64_t)v49, (uint64_t)&v187);
            if ((void *)v193 != v192)
              free((void *)v193);
            v47 = a4 + 12;
            if (v188 != v187)
              free(v188);
            v162 = 1;
            v48 = updated;
          }
          goto LABEL_89;
        }
        v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
        v56 = (llvm::Value *)v54;
        v57 = v55;
        v58 = *(_QWORD *)(v54 - 32);
        if (!v58 || *(_BYTE *)(v58 + 16) || *(_QWORD *)(v58 + 24) != *(_QWORD *)(v54 + 72))
          v58 = 0;
        if (v55 != -1)
          break;
LABEL_102:
        v187 = (void *)v58;
        v181 = 0;
        v60 = sub_1C4850EC8(v47, &v187, &v181);
        v61 = 0;
        if (v60)
          v61 = (void *)*((_QWORD *)v181 + 1);
        v187 = v61;
        v181 = 0;
        v62 = 0;
        if (sub_1C4DD8A9C(v178, &v187, &v181))
          v62 = *((_QWORD *)v181 + 1);
        if ((llvm::LazyCallGraph::RefSCC **)v62 == v48)
        {
          v66 = *(_QWORD *)(a5 + 136);
          v187 = 0;
          if (sub_1C629848C(v66, (uint64_t)v169, (uint64_t)v48, &v187))
          {
            v63 = v56;
            v64 = "recursive SCC split";
            v65 = 19;
            goto LABEL_109;
          }
        }
        else if (*(int *)(v62 + 16) >= 2)
        {
          goto LABEL_108;
        }
        llvm::InlineAdvisor::getAdvice(Advisor, v56, *(_BYTE *)(a1 + 8), &v185);
        v67 = v185;
        if (v185)
        {
          if (*((_BYTE *)v185 + 56))
          {
            StringFnAttrAsInt = llvm::getStringFnAttrAsInt((uint64_t)v56, "function-inline-cost-multiplier", 0x1FuLL);
            if ((StringFnAttrAsInt & 0xFF00000000) != 0)
              v69 = StringFnAttrAsInt;
            else
              v69 = 1;
            v164 = v69;
            v70 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v176, &llvm::BlockFrequencyAnalysis::Key, *(_QWORD *)(*((_QWORD *)v56 + 5) + 56))+ 8;
            v71 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v176, &llvm::BlockFrequencyAnalysis::Key, v58);
            v187 = 0;
            v188 = sub_1C5705040;
            v189 = (uint64_t)&v186;
            *(_QWORD *)&v190 = v165;
            *((_QWORD *)&v190 + 1) = v70;
            v191 = (const char *)(v71 + 8);
            v192 = (char *)&v193 + 8;
            *(_QWORD *)&v193 = 0x400000000;
            v196[0] = (char *)&v197;
            v196[1] = (char *)0x800000000;
            v198 = v200;
            v199 = 0x800000000;
            v203 = 1;
            v72 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v176, &llvm::AAManager::Key, *(_QWORD *)(*((_QWORD *)v56 + 5) + 56));
            v184 = llvm::InlineFunction((uint64_t ***)v56, (uint64_t)&v187, v72 + 8, 1, 0);
            if (v184)
            {
              v73 = v185;
              *((_BYTE *)v185 + 57) = 1;
              (*(void (**)(llvm::InlineAdvice *, const char **))(*(_QWORD *)v73 + 32))(v73, &v184);
              a1 = v166;
              v47 = a4 + 12;
              goto LABEL_178;
            }
            v181 = (void *)v58;
            sub_1C4E486A0((uint64_t)&v207, (uint64_t *)&v181);
            if ((_DWORD)v199)
            {
              v75 = v214;
              v168 = v214;
              if (v214 >= (unint64_t)HIDWORD(v214))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v213, (uint64_t)v215, v214 + 1, 16);
                v75 = v214;
              }
              v76 = (uint64_t *)((char *)v213 + 16 * v75);
              *v76 = v58;
              v76[1] = v57;
              LODWORD(v214) = v214 + 1;
              if ((_DWORD)v199)
              {
                v77 = (char *)v198;
                v78 = (char *)v198 + 8 * v199;
                do
                {
                  v80 = (_QWORD *)*((_QWORD *)v78 - 1);
                  v78 -= 8;
                  v79 = v80;
                  v81 = *(v80 - 4);
                  if (!v81 || *(_BYTE *)(v81 + 16) || *(_QWORD *)(v81 + 24) != v79[9])
                  {
                    if (!llvm::tryPromoteCall((llvm *)v79, v74))
                      continue;
                    v81 = *(v79 - 4);
                    if (!v81 || *(_BYTE *)(v81 + 16) || *(_QWORD *)(v81 + 24) != v79[9])
                      continue;
                  }
                  if (*(_QWORD *)(v81 + 72) != v81 + 72 || (*(_BYTE *)(v81 + 34) & 0x80) != 0)
                  {
                    v181 = v79;
                    LODWORD(v182) = v168;
                    (*(void (**)(uint64_t, void **))(*(_QWORD *)v12 + 24))(v12, &v181);
                    if ((llvm::LazyCallGraph::RefSCC **)v62 != v48)
                    {
                      v181 = (void *)v81;
                      v82 = sub_1C4E851E8(v175, &v181);
                      v83 = (_QWORD *)v82[1];
                      if (!v83)
                      {
                        v83 = (_QWORD *)sub_1C484358C((uint64_t)a4, 104, 3);
                        v82[1] = v83;
                        *v83 = a4;
                        v83[1] = v81;
                        *((_BYTE *)v83 + 96) = 0;
                        v83[2] = 0;
                        *((_BYTE *)v83 + 24) = 0;
                      }
                      v181 = v83;
                      v224[0] = 0;
                      v84 = sub_1C4DD8A9C(v178, &v181, v224);
                      v85 = 0;
                      if (v84)
                        v85 = *(_QWORD *)(v224[0] + 8);
                      if (v62 == v85)
                      {
                        v86 = *v161;
                        v87 = dword_1ED80BEA8 * (uint64_t)v164;
                        if ((v87 & 0x80000000) != 0)
                        {
                          v90 = 0;
                          v91 = -(uint64_t)v87;
                          do
                          {
                            v226[--v90] = (v91 % 0xA) | 0x30;
                            v89 = v91 > 9;
                            v91 /= 0xAuLL;
                          }
                          while (v89);
                          v88 = &v226[v90 - 1];
                          v226[v90 - 1] = 45;
                          v92 = (char *)(1 - v90);
                        }
                        else
                        {
                          v88 = v226;
                          if ((_DWORD)v87)
                          {
                            do
                            {
                              *--v88 = (v87 % 0xA) | 0x30;
                              v89 = v87 > 9;
                              v87 /= 0xAuLL;
                            }
                            while (v89);
                          }
                          else
                          {
                            v225 = 48;
                            v88 = &v225;
                          }
                          v92 = (char *)(v226 - v88);
                        }
                        sub_1C4E61270(&v181, v88, v226, (unint64_t)v92);
                        if (v183 >= 0)
                          v93 = (unsigned __int8 *)&v181;
                        else
                          v93 = (unsigned __int8 *)v181;
                        if (v183 >= 0)
                          v94 = v183 & 0x7F;
                        else
                          v94 = (size_t)v182;
                        v95 = llvm::Attribute::get(v86, "function-inline-cost-multiplier", 0x1FuLL, v93, v94);
                        if (v183 < 0)
                          operator delete(v181);
                        v79[8] = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v79 + 8), *(llvm::LLVMContext **)*v79, -1, (uint64_t)v95);
                      }
                    }
                  }
                }
                while (v78 != v77);
              }
            }
            v96 = v49[5];
            if (*(char *)(v96 + 239) < 0)
            {
              sub_1C47EBC30(__dst, *(void **)(v96 + 216), *(_QWORD *)(v96 + 224));
            }
            else
            {
              *(_OWORD *)__dst = *(_OWORD *)(v96 + 216);
              v180 = *(_QWORD *)(v96 + 232);
            }
            a1 = v166;
            v47 = a4 + 12;
            ArchAllowsMergeAttributes = llvm::GPUBaseInfo::getArchAllowsMergeAttributes((uint64_t)__dst);
            v99 = ArchAllowsMergeAttributes;
            if (SHIBYTE(v180) < 0)
            {
              operator delete(__dst[0]);
              if (v99)
LABEL_166:
                llvm::AttributeFuncs::mergeAttributesForOutlining((llvm::AttributeFuncs *)v49, (llvm::Function *)v58, v98);
            }
            else if (ArchAllowsMergeAttributes)
            {
              goto LABEL_166;
            }
            if ((*(_DWORD *)(v58 + 32) & 0xFu) <= 8
              && ((1 << (*(_DWORD *)(v58 + 32) & 0xF)) & 0x18E) != 0
              && llvm::Constant::hasNLiveUses((llvm::Constant *)v58, 0)
              && (v181 = (void *)v58, v224[0] = 0, (sub_1C4E48B78((uint64_t)(a4 + 72), &v181, v224) & 1) == 0))
            {
              if ((*(_DWORD *)(v58 + 32) & 0xFu) - 7 >= 2 && *(_QWORD *)(v58 + 48))
              {
                v100 = v205;
                if (v205 >= (unint64_t)HIDWORD(v205))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v206, v205 + 1, 8);
                  v100 = v205;
                }
                *((_QWORD *)__src + v100) = v58;
                LODWORD(v205) = v205 + 1;
                goto LABEL_176;
              }
              v181 = (void *)v58;
              (*(void (**)(uint64_t, BOOL (*)(_QWORD *, uint64_t), void **))(*(_QWORD *)v12 + 48))(v12, sub_1C5705068, &v181);
              llvm::Function::dropAllReferences((llvm::Function *)v58);
              v102 = v220;
              if (v220 >= (unint64_t)HIDWORD(v220))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v219, (uint64_t)v221, v220 + 1, 8);
                v102 = v220;
              }
              *(_QWORD *)&v219[8 * v102] = v58;
              LODWORD(v220) = v220 + 1;
              llvm::InlineAdvice::recordInliningWithCalleeDeleted(v185);
            }
            else
            {
LABEL_176:
              llvm::InlineAdvice::recordInlining(v185);
            }
            v167 = 1;
LABEL_178:
            if (v198 != v200)
              free(v198);
            sub_1C52768FC(v196);
            if (v192 != (char *)&v193 + 8)
              free(v192);
          }
          else
          {
            *((_BYTE *)v185 + 57) = 1;
            (*(void (**)(llvm::InlineAdvice *))(*(_QWORD *)v67 + 40))(v67);
          }
          v101 = v185;
          v185 = 0;
          if (v101)
            (*(void (**)(llvm::InlineAdvice *))(*(_QWORD *)v101 + 8))(v101);
        }
LABEL_110:
        if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
          goto LABEL_189;
      }
      v59 = v55;
      while (*((_QWORD *)v213 + 2 * (int)v59) != v58)
      {
        v59 = *((_DWORD *)v213 + 4 * (int)v59 + 2);
        if (v59 == -1)
          goto LABEL_102;
      }
LABEL_108:
      v63 = v56;
      v64 = "recursive";
      v65 = 9;
LABEL_109:
      llvm::setInlineRemark(v63, (unsigned __int8 *)v64, v65);
      goto LABEL_110;
    }
    v162 = 0;
LABEL_216:
    if ((_DWORD)v205)
    {
      llvm::filterDeadComdatFunctions((uint64_t)&__src);
      v155 = __src;
      if ((_DWORD)v205)
      {
        v157 = 8 * v205;
        do
        {
          v158 = *(llvm::Function **)v155;
          v155 += 8;
          llvm::Function::dropAllReferences(v158);
          v157 -= 8;
        }
        while (v157);
        v155 = __src;
        v156 = v205;
      }
      else
      {
        v156 = 0;
      }
      sub_1C618A450((unsigned int *)&v219, v155, &v155[8 * v156]);
    }
    if ((_DWORD)v220)
    {
      v119 = (void **)v219;
      v120 = &v219[8 * v220];
      while (1)
      {
        v121 = (llvm::Function *)*v119;
        v187 = *v119;
        v181 = 0;
        v122 = sub_1C4850EC8(a4 + 12, &v187, &v181);
        v123 = 0;
        if (v122)
          v123 = (void *)*((_QWORD *)v181 + 1);
        v187 = v123;
        v181 = 0;
        v124 = 0;
        if (sub_1C4DD8A9C(a4 + 36, &v187, &v181))
          v124 = (uint64_t *)*((_QWORD *)v181 + 1);
        if ((*((_BYTE *)v121 + 23) & 0x10) == 0)
        {
          v135 = 0;
          v134 = &byte_1C871356D;
          goto LABEL_232;
        }
        v125 = ***(_QWORD ***)v121;
        v126 = *(_QWORD *)(v125 + 152);
        v127 = *(unsigned int *)(v125 + 168);
        if (!(_DWORD)v127)
          goto LABEL_230;
        LODWORD(v128) = (v127 - 1) & ((v121 >> 4) ^ (v121 >> 9));
        v129 = (void **)(v126 + 16 * v128);
        v130 = (llvm::Function *)*v129;
        if (*v129 != v121)
          break;
LABEL_231:
        v133 = v129[1];
        v136 = *v133;
        v134 = (char *)(v133 + 2);
        v135 = v136;
LABEL_232:
        llvm::AnalysisManager<llvm::Function>::clear(v176, (uint64_t)v121, (uint64_t)v134, v135);
        sub_1C57034B8((uint64_t)v124, &v187);
        if (v189 >= 0)
          v137 = &v187;
        else
          v137 = v187;
        if (v189 >= 0)
          v138 = HIBYTE(v189) & 0x7F;
        else
          v138 = (uint64_t)v188;
        llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::clear(a3, (uint64_t)v124, (uint64_t)v137, v138);
        if (SHIBYTE(v189) < 0)
          operator delete(v187);
        v139 = *v124;
        llvm::LazyCallGraph::removeDeadFunction((llvm::LazyCallGraph *)a4, v121);
        sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(a5 + 24), (uint64_t)v124);
        sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(a5 + 16), v139);
        if (v124 == *(uint64_t **)(a5 + 32))
          *(_QWORD *)(a5 + 32) = 0;
        llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList((uint64_t)(v161 + 3), (uint64_t ***)v121);
        v140 = *((_QWORD *)v121 + 7);
        v141 = (_QWORD *)*((_QWORD *)v121 + 8);
        *v141 = v140;
        *(_QWORD *)(v140 + 8) = v141;
        *((_QWORD *)v121 + 7) = 0;
        *((_QWORD *)v121 + 8) = 0;
        llvm::Function::~Function(v121);
        v142 = *((_DWORD *)v121 + 5);
        if ((v142 & 0x40000000) != 0)
        {
          v149 = (char *)*((_QWORD *)v121 - 1);
          v147 = (char *)v121 - 8;
          v148 = v149;
          v150 = v142 & 0x7FFFFFF;
          if ((_DWORD)v150)
          {
            v151 = 32 * v150;
            do
            {
              v152 = &v148[v151];
              if (*(_QWORD *)&v148[v151 - 32])
              {
                **((_QWORD **)v152 - 2) = *((_QWORD *)v152 - 3);
                v153 = *((_QWORD *)v152 - 3);
                if (v153)
                  *(_QWORD *)(v153 + 16) = *((_QWORD *)v152 - 2);
              }
              v151 -= 32;
            }
            while (v151);
          }
          operator delete(v148);
        }
        else
        {
          v143 = v142 & 0x7FFFFFF;
          if ((_DWORD)v143)
          {
            v144 = (_QWORD **)((char *)v121 - 16);
            v145 = -32 * v143;
            do
            {
              if (*(v144 - 2))
              {
                **v144 = *(v144 - 1);
                v146 = (uint64_t)*(v144 - 1);
                if (v146)
                  *(_QWORD *)(v146 + 16) = *v144;
              }
              v144 -= 4;
              v145 += 32;
            }
            while (v145);
          }
          v147 = (char *)v121 - 32 * v143;
          if (v142 < 0)
            v147 = &v147[-*((_QWORD *)v147 - 1) - 8];
        }
        operator delete(v147);
        if (++v119 == (void **)v120)
          goto LABEL_261;
      }
      v131 = 1;
      while (v130 != (llvm::Function *)-4096)
      {
        v132 = v128 + v131++;
        v128 = v132 & (v127 - 1);
        v130 = *(llvm::Function **)(v126 + 16 * v128);
        if (v130 == v121)
        {
          v129 = (void **)(v126 + 16 * v128);
          goto LABEL_231;
        }
      }
LABEL_230:
      v129 = (void **)(v126 + 16 * v127);
      goto LABEL_231;
    }
LABEL_261:
    *(_QWORD *)v160 = (char *)v160 + 32;
    *((_QWORD *)v160 + 1) = (char *)v160 + 32;
    *((_QWORD *)v160 + 2) = 2;
    *((_DWORD *)v160 + 6) = 0;
    *((_QWORD *)v160 + 6) = (char *)v160 + 80;
    *((_QWORD *)v160 + 7) = (char *)v160 + 80;
    *((_QWORD *)v160 + 8) = 2;
    *((_DWORD *)v160 + 18) = 0;
    if ((v162 & 1) != 0)
    {
      sub_1C4DDB144((uint64_t)v160, (uint64_t)&llvm::FunctionAnalysisManagerCGSCCProxy::Key);
      sub_1C4D8B5A8(v160, (uint64_t)&llvm::AllAnalysesOn<llvm::Function>::SetKey);
    }
    else
    {
      sub_1C4774094(v160, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    }
    if (__src != v206)
      free(__src);
    if (v219 != v221)
      free(v219);
    if (v210 != (void **)v212)
      free(v210);
    if ((v207 & 1) == 0)
      MEMORY[0x1CAA32FB4](v208.i64[0], 8);
    if (v213 != v215)
      free(v213);
  }
  else
  {
    *(_QWORD *)a6 = (char *)a6 + 32;
    *((_QWORD *)a6 + 1) = (char *)a6 + 32;
    *((_QWORD *)a6 + 2) = 2;
    *((_DWORD *)a6 + 6) = 0;
    *((_QWORD *)a6 + 6) = (char *)a6 + 80;
    *((_QWORD *)a6 + 7) = (char *)a6 + 80;
    *((_QWORD *)a6 + 8) = 2;
    *((_DWORD *)a6 + 18) = 0;
    sub_1C4774094(a6, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  return (*(uint64_t (**)(llvm::InlineAdvisor *, uint64_t))(*(_QWORD *)Advisor + 24))(Advisor, v163);
}

uint64_t sub_1C57034B8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v3;
  void (**v4)(llvm::raw_ostream *__hidden);
  int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v4 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v12 = a2;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  result = (uint64_t)sub_1C4E7F5E0((llvm::raw_ostream *)&v4, a1);
  v3 = v8 - v6;
  if (v8 != v6)
  {
    v8 = v6;
    result = llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v4, v6, v3);
  }
  v4 = off_1E81A6E70;
  if (v11 == 1)
  {
    result = (uint64_t)v6;
    if (v6)
      return MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924, v3);
  }
  return result;
}

_QWORD *llvm::ModuleInlinerWrapperPass::run@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v8;
  __int128 v9;
  int v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  int v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t (**v19)(llvm::DiagnosticInfo *__hidden);
  int v20;
  uint64_t v21;
  uint64_t (**v22)(llvm::DiagnosticInfo *__hidden);
  uint64_t *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31[4];
  __int16 v32;
  __int128 v33[4];
  int v34;
  uint64_t (**v35)(llvm::DiagnosticInfo *__hidden);
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;

  v8 = (uint64_t *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InlineAdvisorAnalysis::Key, (uint64_t)a2)+ 8);
  v9 = *(_OWORD *)(a1 + 48);
  v33[2] = *(_OWORD *)(a1 + 32);
  v33[3] = v9;
  v10 = *(_DWORD *)(a1 + 68);
  v34 = *(_DWORD *)(a1 + 64);
  v11 = *(_OWORD *)(a1 + 16);
  v33[0] = *(_OWORD *)a1;
  v33[1] = v11;
  v12 = (uint64_t *)qword_1ED80C0E8;
  if (byte_1ED80C0FF >= 0)
    v12 = &qword_1ED80C0E8;
  v13 = byte_1ED80C0FF & 0x7F;
  if (byte_1ED80C0FF < 0)
    v13 = qword_1ED80C0F0;
  v35 = (uint64_t (**)(llvm::DiagnosticInfo *__hidden))v12;
  v36 = v13;
  v37 = __PAIR64__(dword_1ED80C428, dword_1ED80C1D0);
  LODWORD(v38) = dword_1ED80C680;
  if (llvm::InlineAdvisorAnalysis::Result::tryCreate(v8, v33, v10, (uint64_t)&v35))
  {
    v16 = *(_DWORD *)(a1 + 72);
    v17 = (__int128 *)(a1 + 80);
    if (v16)
    {
      sub_1C57038A8(v17, v16, (uint64_t)&v35);
      v18 = operator new();
      v19 = v35;
      v35 = 0;
      v20 = v36;
      *(_QWORD *)v18 = &unk_1E817AF50;
      *(_QWORD *)(v18 + 8) = v19;
      *(_DWORD *)(v18 + 16) = v20;
      v31[0] = v18;
      sub_1C6297060(a1 + 104, v31);
      v21 = v31[0];
      v31[0] = 0;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    else
    {
      sub_1C5703824(v17, (uint64_t *)&v35);
      sub_1C6297060(a1 + 104, (uint64_t *)&v35);
    }
    v22 = v35;
    v35 = 0;
    if (v22)
      (*((void (**)(uint64_t (**)(llvm::DiagnosticInfo *__hidden)))*v22 + 1))(v22);
    v23 = *(uint64_t **)(a1 + 128);
    v24 = *(uint64_t **)(a1 + 136);
    if (v23 != v24)
    {
      v25 = *(char **)(a1 + 112);
      do
      {
        if ((unint64_t)v25 >= *(_QWORD *)(a1 + 120))
        {
          v25 = sub_1C4D62F9C((char **)(a1 + 104), v23);
        }
        else
        {
          v26 = *v23;
          *v23 = 0;
          *(_QWORD *)v25 = v26;
          v25 += 8;
        }
        *(_QWORD *)(a1 + 112) = v25;
        ++v23;
      }
      while (v23 != v24);
    }
    llvm::PassManager<llvm::Module,llvm::AnalysisManager<llvm::Module>>::run((_QWORD *)(a1 + 104), (uint64_t)a2, a3, (uint64_t)&v27);
    if (v30 != v29)
      free(v30);
    if (v28 != v27)
      free(v28);
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    if (!byte_1ED80BF68)
      return sub_1C4DD7214(a4, (uint64_t)&llvm::InlineAdvisorAnalysis::Key);
  }
  else
  {
    v14 = *a2;
    v31[0] = (uint64_t)"Could not setup Inlining Advisor for the requested mode and/or options";
    v32 = 259;
    LODWORD(v36) = 0;
    BYTE4(v36) = 0;
    v35 = &off_1E814E960;
    v37 = 0;
    v38 = v31;
    v39 = 0;
    llvm::LLVMContext::diagnose(v14, (const llvm::DiagnosticInfo *)&v35);
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  return result;
}

__n128 sub_1C5703824@<Q0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __n128 result;
  _QWORD v8[3];
  void **v9;

  v4 = operator new();
  v5 = *((_QWORD *)a1 + 2);
  v6 = *a1;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)v4 = &unk_1E817AED0;
  *(_OWORD *)(v4 + 8) = v6;
  *(_QWORD *)(v4 + 24) = v5;
  memset(v8, 0, sizeof(v8));
  *a2 = v4;
  v9 = (void **)v8;
  sub_1C4764BBC(&v9);
  return result;
}

__n128 sub_1C57038A8@<Q0>(__int128 *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __n128 result;
  _QWORD v10[3];
  void **v11;

  v6 = operator new();
  v7 = *((_QWORD *)a1 + 2);
  v8 = *a1;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *(_QWORD *)v6 = &unk_1E817AED0;
  *(_OWORD *)(v6 + 8) = v8;
  *(_QWORD *)(v6 + 24) = v7;
  memset(v10, 0, sizeof(v10));
  *(_QWORD *)a3 = v6;
  *(_DWORD *)(a3 + 8) = a2;
  v11 = (void **)v10;
  sub_1C4764BBC(&v11);
  return result;
}

double llvm::InlinerPass::printPipeline(uint64_t a1, llvm::raw_ostream *a2, uint64_t (*a3)(uint64_t, char *, uint64_t), uint64_t a4)
{
  double result;
  _OWORD *v7;

  sub_1C62970E4(a2, a3, a4);
  if (*(_BYTE *)(a1 + 8))
  {
    v7 = (_OWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v7 > 0xFuLL)
    {
      result = *(double *)"<only-mandatory>";
      *v7 = *(_OWORD *)"<only-mandatory>";
      *((_QWORD *)a2 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(a2, "<only-mandatory>", 0x10uLL);
    }
  }
  return result;
}

_QWORD *sub_1C57039BC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = &unk_1E817A9B0;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &unk_1E817AA18;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C5703A44(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C5703A58(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = &unk_1E817AAA8;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &unk_1E817AB10;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C5703AE0(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C5703AF4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = &unk_1E817ABA0;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &unk_1E817AC08;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C5703B7C(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C5703B90(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
      v9 = 1;
    }
    else
    {
      v7 = 0;
      v8 = 1;
      while (v6 != -4096)
      {
        if (v7)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v7 = v5;
        v12 = v4 + v8++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        v9 = 1;
        if (*v5 == a3)
          goto LABEL_7;
      }
      v9 = 0;
      if (v7)
        v5 = v7;
    }
  }
  else
  {
    v5 = 0;
    v9 = 0;
  }
LABEL_7:
  *a4 = v5;
  return v9;
}

_QWORD *sub_1C5703C24(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6297944(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

__n128 sub_1C5703CDC(int **a1, _WORD *a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80BE28, "intra-scc-cost-multiplier", 0x19uLL);
  v6 = *a1;
  dword_1ED80BEA8 = **a1;
  byte_1ED80BEBC = 1;
  dword_1ED80BEB8 = *v6;
  word_1ED80BE32 = (32 * (*a2 & 3)) | word_1ED80BE32 & 0xFF9F;
  result = *a3;
  xmmword_1ED80BE48 = (__int128)*a3;
  return result;
}

llvm::cl::Option *sub_1C5703D60(llvm::cl::Option *a1, char *a2, const char **a3, _OWORD *a4, __n128 *a5, _WORD *a6)
{
  uint64_t v12;

  v12 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_QWORD *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 168) = 0;
  *(_QWORD *)(v12 + 176) = 0;
  *(_QWORD *)(v12 + 160) = 0;
  *(_BYTE *)(v12 + 184) = 0;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)(v12 + 152) = &unk_1E819E950;
  *(_QWORD *)v12 = &unk_1E819E480;
  *(_QWORD *)(v12 + 192) = &unk_1E819E970;
  *(_QWORD *)(v12 + 200) = &off_1E7FA8CB8;
  *(_QWORD *)(v12 + 224) = v12 + 200;
  sub_1C6297B74(v12, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 sub_1C5703E24(int **a1, uint64_t *a2, __n128 *a3, _WORD *a4)
{
  int *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80C150, "cgscc-inline-replay-scope", 0x19uLL);
  v8 = *a1;
  dword_1ED80C1D0 = **a1;
  byte_1ED80C1E4 = 1;
  dword_1ED80C1E0 = *v8;
  sub_1C5703EC0(a2, (uint64_t)&qword_1ED80C150);
  result = *a3;
  xmmword_1ED80C170 = (__int128)*a3;
  word_1ED80C15A = (32 * (*a4 & 3)) | word_1ED80C15A & 0xFF9F;
  return result;
}

void sub_1C5703EC0(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 40 * v2;
    v5 = a2 + 152;
    do
    {
      sub_1C6297D28(v5, *(unsigned __int8 **)v3, *(_QWORD *)(v3 + 8), (int *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
      v3 += 40;
    }
    while (v3 != v4);
  }
}

unint64_t sub_1C5703F18(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 48 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C6297DEC(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C6297DEC(a1, v5);
    }
  }
  return a2;
}

__n128 sub_1C5703F80(int **a1, uint64_t *a2, __n128 *a3, _WORD *a4)
{
  int *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80C3A8, "cgscc-inline-replay-fallback", 0x1CuLL);
  v8 = *a1;
  dword_1ED80C428 = **a1;
  byte_1ED80C43C = 1;
  dword_1ED80C438 = *v8;
  sub_1C570401C(a2, (uint64_t)&qword_1ED80C3A8);
  result = *a3;
  xmmword_1ED80C3C8 = (__int128)*a3;
  word_1ED80C3B2 = (32 * (*a4 & 3)) | word_1ED80C3B2 & 0xFF9F;
  return result;
}

void sub_1C570401C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 40 * v2;
    v5 = a2 + 152;
    do
    {
      sub_1C5704074(v5, *(unsigned __int8 **)v3, *(_QWORD *)(v3 + 8), (int *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
      v3 += 40;
    }
    while (v3 != v4);
  }
}

void sub_1C5704074(uint64_t a1, unsigned __int8 *a2, size_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  _QWORD v14[5];
  int v15;
  char v16;

  v9 = *a4;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = &unk_1E817AB60;
  v16 = 1;
  v15 = v9;
  v10 = sub_1C5704138(a1 + 16, (unint64_t)v14, 1);
  v11 = *(_QWORD *)(a1 + 16) + 48 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 32) = &unk_1E817AB80;
  v13 = *(_BYTE *)(v10 + 44);
  *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);
  *(_BYTE *)(v11 + 44) = v13;
  *(_QWORD *)(v11 + 32) = &unk_1E817AB60;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 8), a2, a3);
}

unint64_t sub_1C5704138(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 48 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C6297FD4(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C6297FD4(a1, v5);
    }
  }
  return a2;
}

__n128 sub_1C57041A0(int **a1, uint64_t *a2, __n128 *a3, _WORD *a4)
{
  int *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80C600, "cgscc-inline-replay-format", 0x1AuLL);
  v8 = *a1;
  dword_1ED80C680 = **a1;
  byte_1ED80C694 = 1;
  dword_1ED80C690 = *v8;
  sub_1C570423C(a2, (uint64_t)&qword_1ED80C600);
  result = *a3;
  xmmword_1ED80C620 = (__int128)*a3;
  word_1ED80C60A = (32 * (*a4 & 3)) | word_1ED80C60A & 0xFF9F;
  return result;
}

void sub_1C570423C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 40 * v2;
    v5 = a2 + 152;
    do
    {
      sub_1C5704294(v5, *(unsigned __int8 **)v3, *(_QWORD *)(v3 + 8), (int *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
      v3 += 40;
    }
    while (v3 != v4);
  }
}

void sub_1C5704294(uint64_t a1, unsigned __int8 *a2, size_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  _QWORD v14[5];
  int v15;
  char v16;

  v9 = *a4;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = &unk_1E817AC58;
  v16 = 1;
  v15 = v9;
  v10 = sub_1C5704358(a1 + 16, (unint64_t)v14, 1);
  v11 = *(_QWORD *)(a1 + 16) + 48 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 32) = &unk_1E817AC78;
  v13 = *(_BYTE *)(v10 + 44);
  *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);
  *(_BYTE *)(v11 + 44) = v13;
  *(_QWORD *)(v11 + 32) = &unk_1E817AC58;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 8), a2, a3);
}

unint64_t sub_1C5704358(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 48 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C62981BC(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C62981BC(a1, v5);
    }
  }
  return a2;
}

void sub_1C57043C4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C57043D8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817AD70;
  result[1] = v3;
  return result;
}

uint64_t sub_1C570440C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817AD70;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C5704428(uint64_t a1, uint64_t a2)
{
  char **v3;
  char *v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;
  void **v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14[2];
  int v15;
  uint64_t v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *__src;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = **(char ****)(*(_QWORD *)(a1 + 8) + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != llvm::TargetLibraryInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  llvm::TargetLibraryAnalysis::run(v5 + 32, a2, (uint64_t)&v21);
  *(_QWORD *)(v5 + 240) = v21;
  if (*(_BYTE *)(v5 + 320))
  {
    if ((uint64_t *)(v5 + 240) == &v21)
    {
LABEL_16:
      *(_DWORD *)(v5 + 312) = v25;
      goto LABEL_17;
    }
    v6 = (void **)(v5 + 248);
    v7 = v23;
    v8 = *(unsigned int *)(v5 + 256);
    if (v8 >= v23)
    {
      if (v23)
        memmove(*v6, __src, 8 * v23);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v5 + 260) < v23)
    {
      *(_DWORD *)(v5 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v7, 8);
    }
    else if ((_DWORD)v8)
    {
      memmove(*v6, __src, 8 * v8);
      goto LABEL_13;
    }
    v8 = 0;
LABEL_13:
    if (v8 != v23)
      memcpy((char *)*v6 + 8 * v8, (char *)__src + 8 * v8, 8 * v23 - 8 * v8);
LABEL_15:
    *(_DWORD *)(v5 + 256) = v7;
    goto LABEL_16;
  }
  v10 = (void *)(v5 + 264);
  *(_QWORD *)(v5 + 248) = v5 + 264;
  v11 = (void **)(v5 + 248);
  *(_QWORD *)(v5 + 256) = 0x600000000;
  v12 = v23;
  if (v23 && v11 != &__src)
  {
    if (v23 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v23, 8);
      v13 = v23;
      if (!v23)
      {
LABEL_27:
        *(_DWORD *)(v5 + 256) = v12;
        goto LABEL_28;
      }
      v10 = *v11;
    }
    else
    {
      v13 = v23;
    }
    memcpy(v10, __src, 8 * v13);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 312) = v25;
  *(_BYTE *)(v5 + 320) = 1;
LABEL_17:
  if (__src != &v24)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v16);
  sub_1C4D8B52C(v14);
  return v5 + 240;
}

void sub_1C570467C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5704690(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817ADB8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C57046C4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817ADB8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C57046E0(uint64_t a1, llvm::Function *a2)
{
  return llvm::AssumptionCacheTracker::getAssumptionCache(*(llvm::AssumptionCacheTracker **)(*(_QWORD *)(a1 + 8) + 32), a2);
}

uint64_t sub_1C57046EC(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1);
}

_QWORD *sub_1C57046FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int InstructionCount;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  BOOL (*v13)(uint64_t, uint64_t);

  v3 = *a2;
  v12 = v3;
  v4 = *(_QWORD *)(v3 - 32);
  if (!v4 || *(_BYTE *)(v4 + 16) || *(_QWORD *)(v4 + 24) != *(_QWORD *)(v3 + 72))
    v4 = 0;
  v5 = *((_DWORD *)a2 + 2);
  InstructionCount = llvm::Function::getInstructionCount((llvm::Function *)v4);
  v7 = *(unsigned int *)(a1 + 16);
  if (v7 >= *(_DWORD *)(a1 + 20))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 8, a1 + 24, v7 + 1, 16);
    LODWORD(v7) = *(_DWORD *)(a1 + 16);
  }
  v8 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v7);
  *v8 = v3;
  v8[1] = InstructionCount;
  v9 = (*(_DWORD *)(a1 + 16) + 1);
  *(_DWORD *)(a1 + 16) = v9;
  v10 = *(_QWORD *)(a1 + 8);
  v13 = sub_1C6298434;
  sub_1C5704864(v10, v10 + 16 * v9, (uint64_t (**)(uint64_t, uint64_t))&v13, v9);
  result = sub_1C6128C08((uint64_t *)(a1 + 280), &v12);
  *((_DWORD *)result + 2) = v5;
  return result;
}

uint64_t sub_1C57047D0(uint64_t a1, unsigned int (*a2)(uint64_t, uint64_t, _QWORD), uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int128 *v8;
  BOOL (*v10)(uint64_t, uint64_t);

  result = (uint64_t)sub_1C5704C60(a1 + 8, a2, a3);
  v5 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = (unint64_t)(result - v5) >> 4;
  v10 = sub_1C6298434;
  if (((result - v5) & 0xFFFFFFFF0uLL) >= 0x11)
  {
    v6 = ((unint64_t)(result - v5) >> 4);
    v7 = ~((unint64_t)(v6 - 2) >> 1);
    v8 = (__int128 *)(v5 + 16 * ((unint64_t)(v6 - 2) >> 1));
    do
      result = sub_1C5704D18(v5, (unsigned int (**)(uint64_t, uint64_t))&v10, v6, v8--);
    while (!__CFADD__(v7++, 1));
  }
  return result;
}

uint64_t sub_1C5704864(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v14 = v4;
    v15 = v5;
    v8 = result;
    v9 = v6 >> 1;
    v10 = result + 16 * (v6 >> 1);
    v11 = (__int128 *)(a2 - 16);
    result = (*a3)(v10, a2 - 16);
    if ((_DWORD)result)
    {
      v13 = *v11;
      do
      {
        v12 = v10;
        *(_QWORD *)v11 = *(_QWORD *)v10;
        *((_DWORD *)v11 + 2) = *(_DWORD *)(v10 + 8);
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = v8 + 16 * v9;
        result = (*a3)(v10, (uint64_t)&v13);
        v11 = (__int128 *)v12;
      }
      while ((result & 1) != 0);
      *(_QWORD *)v12 = v13;
      *(_DWORD *)(v12 + 8) = DWORD2(v13);
    }
  }
  return result;
}

uint64_t sub_1C5704918(uint64_t a1)
{
  uint64_t **v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t result;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  BOOL (*v25)(uint64_t, uint64_t);

  v2 = (uint64_t **)(a1 + 8);
  v20 = a1 + 24;
  v21 = (uint64_t **)(a1 + 8);
  while (1)
  {
    v3 = **v2;
    v4 = *((_DWORD *)*v2 + 2);
    v5 = *(_QWORD *)(v3 - 32);
    if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *(_QWORD *)(v3 + 72))
      v5 = 0;
    result = llvm::Function::getInstructionCount((llvm::Function *)v5);
    if (v4 >= (int)result)
      break;
    v7 = result;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = *(unsigned int *)(a1 + 16);
    v25 = sub_1C6298434;
    if (v9 >= 2)
    {
      v10 = 0;
      v24 = v8 + 16 * v9;
      v23 = *(_QWORD *)v8;
      v22 = *(_DWORD *)(v8 + 8);
      v11 = v8;
      do
      {
        v12 = v11 + 16 * v10 + 16;
        v13 = (2 * v10) | 1;
        v14 = 2 * v10 + 2;
        if (v14 < v9 && v25(v11 + 16 * v10 + 16, v11 + 16 * v10 + 32))
        {
          v12 += 16;
          v13 = v14;
        }
        *(_QWORD *)v11 = *(_QWORD *)v12;
        *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
        v11 = v12;
        v10 = v13;
      }
      while (v13 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
      if (v12 == v24 - 16)
      {
        *(_QWORD *)v12 = v23;
        *(_DWORD *)(v12 + 8) = v22;
      }
      else
      {
        *(_QWORD *)v12 = *(_QWORD *)(v24 - 16);
        *(_DWORD *)(v12 + 8) = *(_DWORD *)(v24 - 8);
        *(_QWORD *)(v24 - 16) = v23;
        *(_DWORD *)(v24 - 8) = v22;
        sub_1C5704864(v8, v12 + 16, (uint64_t (**)(uint64_t, uint64_t))&v25, (v12 + 16 - v8) >> 4);
      }
      v2 = v21;
    }
    v15 = *(_DWORD *)(a1 + 20);
    v16 = (*(_DWORD *)(a1 + 16) - 1);
    *(_DWORD *)(a1 + 16) = v16;
    if (v16 >= v15)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v2, v20, v16 + 1, 16);
      LODWORD(v16) = *(_DWORD *)(a1 + 16);
    }
    v17 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v16);
    *v17 = v3;
    v17[1] = v7;
    v18 = (*(_DWORD *)(a1 + 16) + 1);
    *(_DWORD *)(a1 + 16) = v18;
    v19 = *(_QWORD *)(a1 + 8);
    v25 = sub_1C6298434;
    sub_1C5704864(v19, v19 + 16 * v18, (uint64_t (**)(uint64_t, uint64_t))&v25, v18);
  }
  return result;
}

uint64_t sub_1C5704B1C(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  if (a4 >= 2)
  {
    v7 = result;
    v8 = 0;
    v15 = *(_QWORD *)result;
    v14 = *(_DWORD *)(result + 8);
    v9 = (unint64_t)(a4 - 2) >> 1;
    v10 = result;
    do
    {
      v11 = v10 + 16 * v8 + 16;
      v12 = (2 * v8) | 1;
      v13 = 2 * v8 + 2;
      if (v13 < a4)
      {
        result = (*a3)(v10 + 16 * v8 + 16, v10 + 16 * v8 + 32);
        if ((_DWORD)result)
        {
          v11 += 16;
          v12 = v13;
        }
      }
      *(_QWORD *)v10 = *(_QWORD *)v11;
      *(_DWORD *)(v10 + 8) = *(_DWORD *)(v11 + 8);
      v10 = v11;
      v8 = v12;
    }
    while (v12 <= v9);
    if (v11 == a2 - 16)
    {
      *(_QWORD *)v11 = v15;
      *(_DWORD *)(v11 + 8) = v14;
    }
    else
    {
      *(_QWORD *)v11 = *(_QWORD *)(a2 - 16);
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(a2 - 8);
      *(_QWORD *)(a2 - 16) = v15;
      *(_DWORD *)(a2 - 8) = v14;
      return sub_1C5704864(v7, v11 + 16, a3, (v11 + 16 - v7) >> 4);
    }
  }
  return result;
}

_QWORD *sub_1C5704C60(uint64_t a1, unsigned int (*a2)(uint64_t, uint64_t, _QWORD), uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = *(_QWORD **)a1;
  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v7 = &v3[2 * v4];
    v8 = 16 * v4 - 16;
    v9 = *(_QWORD **)a1;
    while (1)
    {
      v10 = *v9;
      v9 += 2;
      if (a2(a3, v10, 0))
        break;
      v8 -= 16;
      v3 = v9;
      if (v8 == -16)
        return v7;
    }
    if (v8)
    {
      v11 = v3 + 2;
      do
      {
        if ((((uint64_t (*)(uint64_t, _QWORD, _QWORD))a2)(a3, *v11, 0) & 1) == 0)
        {
          *v3 = *v11;
          *((_DWORD *)v3 + 2) = *((_DWORD *)v11 + 2);
          v3 += 2;
        }
        v11 += 2;
        v8 -= 16;
      }
      while (v8);
    }
  }
  return v3;
}

uint64_t sub_1C5704D18(uint64_t result, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v20 = v4;
    v21 = v5;
    v7 = a4;
    v8 = result;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - result) >> 4)
    {
      v12 = ((uint64_t)a4 - result) >> 3;
      v13 = v12 + 1;
      v14 = result + 16 * (v12 + 1);
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 16))
      {
        v14 += 16;
        v13 = v15;
      }
      result = ((uint64_t (*)(uint64_t, __int128 *))*a2)(v14, v7);
      if ((result & 1) == 0)
      {
        v19 = *v7;
        do
        {
          v16 = v14;
          *(_QWORD *)v7 = *(_QWORD *)v14;
          *((_DWORD *)v7 + 2) = *(_DWORD *)(v14 + 8);
          if (v9 < v13)
            break;
          v17 = (2 * v13) | 1;
          v14 = v8 + 16 * v17;
          v18 = 2 * v13 + 2;
          if (v18 < a3)
          {
            if ((*a2)(v8 + 16 * v17, v14 + 16))
            {
              v14 += 16;
              v17 = v18;
            }
          }
          result = ((uint64_t (*)(uint64_t, __int128 *))*a2)(v14, &v19);
          v7 = (__int128 *)v16;
          v13 = v17;
        }
        while (!(_DWORD)result);
        *(_QWORD *)v16 = v19;
        *(_DWORD *)(v16 + 8) = DWORD2(v19);
      }
    }
  }
  return result;
}

void sub_1C5704E58(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E817AE48;
  v2 = (_QWORD *)a1[1];
  if (v2 != a1 + 3)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5704EB0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16) - *(_QWORD *)(a1 + 280);
}

_DWORD *sub_1C5704EC0(_DWORD *result, __int128 *a2)
{
  _DWORD *v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;

  v2 = result;
  v3 = *a2;
  v4 = result[4];
  if (v4 >= result[5])
  {
    v5 = *a2;
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(result + 2), (uint64_t)(result + 6), v4 + 1, 16);
    v3 = v5;
    LODWORD(v4) = v2[4];
  }
  *(_OWORD *)(*((_QWORD *)v2 + 1) + 16 * v4) = v3;
  ++v2[4];
  return result;
}

uint64_t sub_1C5704F2C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v1 + 1;
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * v1);
}

uint64_t sub_1C5704F48(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16 * *(_QWORD *)(a1 + 280);
}

_QWORD *sub_1C5704F58(uint64_t a1, unsigned int (*a2)(uint64_t, _QWORD, _QWORD), uint64_t a3)
{
  _QWORD *result;

  result = sub_1C5704FA4((_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * *(_QWORD *)(a1 + 280)), (_QWORD *)(*(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 16)), a2, a3);
  *(_DWORD *)(a1 + 16) = ((unint64_t)result - *(_QWORD *)(a1 + 8)) >> 4;
  return result;
}

_QWORD *sub_1C5704FA4(_QWORD *a1, _QWORD *a2, unsigned int (*a3)(uint64_t, _QWORD, _QWORD), uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v8;

  v4 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v8 = v4 + 2;
      if (a3(a4, *v4, v4[1]))
        break;
      v4 += 2;
      if (v8 == a2)
        return a2;
    }
    while (v8 != a2)
    {
      if ((((uint64_t (*)(uint64_t, _QWORD, _QWORD))a3)(a4, *v8, v8[1]) & 1) == 0)
      {
        *v4 = *v8;
        *((_DWORD *)v4 + 2) = *((_DWORD *)v8 + 2);
        v4 += 2;
      }
      v8 += 2;
    }
  }
  return v4;
}

uint64_t sub_1C5705040(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::AssumptionAnalysis::Key, a2) + 8;
}

BOOL sub_1C5705068(_QWORD *a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) == *a1;
}

void sub_1C5705080(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5705204(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v11 = *(_QWORD *)(a1 + v8 + 8);
    v10 = *(_QWORD *)(a1 + v8 + 16);
    if ((v11 != -4096 || v10 != -4096) && (v11 != -8192 || v10 != -8192))
    {
      *(_OWORD *)v9 = *(_OWORD *)(a1 + v8 + 8);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v12 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v12;
  }
  sub_1C5705204(a1, v14, v9);
}

void sub_1C5705204(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (void *)(a1 + 8);
    v9 = 64;
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v7)
      goto LABEL_6;
    v8 = *(void **)(a1 + 8);
    v9 = 16 * v7;
  }
  memset_pattern16(v8, &unk_1C85F2160, v9);
LABEL_6:
  while (a2 != a3)
  {
    v10 = *a2;
    v11 = a2[1];
    if ((*a2 != -4096 || v11 != -4096) && (v10 != -8192 || v11 != -8192))
    {
      v13 = 0;
      sub_1C629848C(a1, v10, v11, &v13);
      v12 = v13;
      *v13 = *a2;
      v12[1] = a2[1];
      *(_DWORD *)a1 += 2;
    }
    a2 += 2;
  }
}

uint64_t sub_1C57052D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, llvm::SmallPtrSetImplBase *a6@<X8>)
{
  return llvm::InlinerPass::run(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t sub_1C57052E4()
{
  return 0;
}

char *sub_1C57052EC()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::InlinerPass]";
  v10[1] = 67;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x43)
    v1 = 67;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_9[v1];
  v3 = 67 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

_QWORD *sub_1C57053A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X8>)
{
  return llvm::PassManager<llvm::LazyCallGraph::SCC,llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::LazyCallGraph&,llvm::CGSCCUpdateResult &>::run((uint64_t **)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t sub_1C57053AC()
{
  return 1;
}

char *sub_1C57053B4()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::PassManager<LazyCallGraph::SCC, CGSCCAnalysis"
                    "Manager, LazyCallGraph &, CGSCCUpdateResult &>]";
  v10[1] = 147;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x93)
    v1 = 147;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_10[v1];
  v3 = 147 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

char *sub_1C570546C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::ModuleToPostOrderCGSCCPassAdaptor]";
  v10[1] = 89;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x59)
    v1 = 89;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_11[v1];
  v3 = 89 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

void sub_1C5705524(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  llvm::DevirtSCCRepeatedPass::run((uint64_t *)(a1 + 8), a2, a3, a4, a5, a6);
}

uint64_t sub_1C5705530()
{
  return 0;
}

char *sub_1C5705538()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::DevirtSCCRepeatedPass]";
  v10[1] = 77;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x4D)
    v1 = 77;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_12[v1];
  v3 = 77 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t sub_1C57055F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t sub_1C5705608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t result;

  result = a10;
  *(_QWORD *)(v10 + 8) = a1;
  return result;
}

uint64_t sub_1C570561C()
{
  int v1;
  __n128 v2;
  int v3;
  int *v4;
  __n128 v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  LOBYTE(v4) = 0;
  v5.n128_u64[0] = (unint64_t)&v4;
  v2.n128_u32[0] = 1;
  sub_1C6297A04((char **)&v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED80BD68, &dword_1C475E000);
  v3 = 1;
  LODWORD(v4) = 2;
  v2.n128_u64[0] = (unint64_t)&v4;
  v5.n128_u64[0] = (unint64_t)"Cost multiplier to multiply onto inlined call sites where the new call was previous"
                                     "ly an intra-SCC call (not relevant when the original call was already intra-SCC). T"
                                     "his can accumulate over multiple inlinings (e.g. if a call site already had a cost "
                                     "multiplier and one of its inlined calls was also subject to this, the inlined call "
                                     "would have the original multiplier multiplied by intra-scc-cost-multiplier). This i"
                                     "s to prevent tons of inlining through a child SCC which can cause terrible compile times";
  v5.n128_u64[1] = 503;
  sub_1C6297AD8((int **)&v2, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED80BE28, &dword_1C475E000);
  LOBYTE(v4) = 0;
  v5.n128_u64[0] = (unint64_t)&v4;
  v2.n128_u32[0] = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED80BEE8, "keep-inline-advisor-for-printing", &v5, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80BEE8, &dword_1C475E000);
  v4 = (int *)"";
  v5.n128_u64[0] = (unint64_t)"filename";
  v5.n128_u64[1] = 8;
  v2.n128_u64[0] = (unint64_t)"Optimization remarks file containing inline remarks to be replayed by cgscc inlining.";
  v2.n128_u64[1] = 85;
  v3 = 1;
  sub_1C5703D60((llvm::cl::Option *)&unk_1ED80C068, "cgscc-inline-replay", (const char **)&v4, &v5, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &unk_1ED80C068, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v5.n128_u64[0] = (unint64_t)&v6;
  v6 = "Function";
  v7 = 8;
  v8 = 0;
  v9 = "Replay on functions that have remarks associated with them (default)";
  v10 = 68;
  v11 = "Module";
  v12 = 6;
  v13 = 1;
  v14 = "Replay on the entire module";
  v15 = 27;
  v5.n128_u64[1] = 0x400000002;
  v2.n128_u64[0] = (unint64_t)"Whether inline replay should be applied to the entire Module or just the Functions "
                                     "(default) that are present as callers in remarks during cgscc inlining.";
  v2.n128_u64[1] = 154;
  v1 = 1;
  sub_1C6297C00(&v4, (uint64_t *)&v5, &v2, &v1);
  if ((const char **)v5.n128_u64[0] != &v6)
    free((void *)v5.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C6296DD0, &qword_1ED80C150, &dword_1C475E000);
  v3 = 0;
  v4 = &v3;
  v5.n128_u64[0] = (unint64_t)&v6;
  v6 = "Original";
  v7 = 8;
  v8 = 0;
  v9 = "All decisions not in replay send to original advisor (default)";
  v10 = 62;
  v11 = "AlwaysInline";
  v12 = 12;
  v13 = 1;
  v14 = "All decisions not in replay are inlined";
  v15 = 39;
  v16 = "NeverInline";
  v17 = 11;
  v18 = 2;
  v19 = "All decisions not in replay are not inlined";
  v20 = 43;
  v5.n128_u64[1] = 0x400000003;
  v2.n128_u64[0] = (unint64_t)"How cgscc inline replay treats sites that don't come from the replay. Original: def"
                                     "ers to original advisor, AlwaysInline: inline all sites not in replay, NeverInline:"
                                     " inline no sites not in replay";
  v2.n128_u64[1] = 196;
  v1 = 1;
  sub_1C6297EAC(&v4, (uint64_t *)&v5, &v2, &v1);
  if ((const char **)v5.n128_u64[0] != &v6)
    free((void *)v5.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C6296DD4, &qword_1ED80C3A8, &dword_1C475E000);
  v3 = 3;
  v4 = &v3;
  v5.n128_u64[0] = (unint64_t)&v6;
  v6 = "Line";
  v7 = 4;
  v8 = 0;
  v9 = "<Line Number>";
  v10 = 13;
  v11 = "LineColumn";
  v12 = 10;
  v13 = 1;
  v14 = "<Line Number>:<Column Number>";
  v15 = 29;
  v16 = "LineDiscriminator";
  v17 = 17;
  v19 = "<Line Number>.<Discriminator>";
  v20 = 29;
  v21 = "LineColumnDiscriminator";
  v22 = 23;
  v18 = 2;
  v23 = 3;
  v24 = "<Line Number>:<Column Number>.<Discriminator> (default)";
  v25 = 55;
  v5.n128_u64[1] = 0x400000004;
  v2.n128_u64[0] = (unint64_t)"How cgscc inline replay file is formatted";
  v2.n128_u64[1] = 41;
  v1 = 1;
  sub_1C6298094(&v4, (uint64_t *)&v5, &v2, &v1);
  if ((const char **)v5.n128_u64[0] != &v6)
    free((void *)v5.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C6296DD8, &qword_1ED80C600, &dword_1C475E000);
  LODWORD(v4) = 1;
  LOBYTE(v3) = 0;
  v2.n128_u64[0] = (unint64_t)&v3;
  v5.n128_u64[0] = (unint64_t)"Enable the priority inline order for the inliner";
  v5.n128_u64[1] = 48;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED80BFA8, "inline-enable-priority-order", &v4, &v2, &v5);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80BFA8, &dword_1C475E000);
}

uint64_t llvm::InternalizePass::shouldPreserveGV(llvm::InternalizePass *this, const llvm::GlobalValue *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const llvm::GlobalValue *v15;
  int v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  size_t v20;
  char *v21;
  size_t v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  llvm::InternalizePass *v33;
  llvm::GlobalValue *v34;
  uint64_t v35;
  char v36;
  uint64_t v37[4];
  __int16 v38;
  void *__p;
  char v40;
  int v41;

  v4 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a2 + 16))
  {
    if (v4 == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      return 1;
  }
  else if (*((const llvm::GlobalValue **)a2 + 9) == (const llvm::GlobalValue *)((char *)a2 + 72)
         && (*((_BYTE *)a2 + 34) & 0x80) == 0)
  {
    return 1;
  }
  v5 = *((_DWORD *)a2 + 8);
  v6 = v5 & 0xF;
  result = 1;
  if (v6 != 1 && (v5 & 0x300) != 0x200)
  {
    if (v4 == 3 && (*((_BYTE *)a2 + 80) & 2) != 0)
    {
      v8 = *((_QWORD *)a2 + 5) + 216;
      v38 = 260;
      v37[0] = v8;
      llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v37);
      v9 = v41 & 0xFFFFFFFE;
      if (v40 < 0)
        operator delete(__p);
      if (v9 != 48)
        return 1;
      v6 = *((_DWORD *)a2 + 8) & 0xF;
    }
    if ((v6 - 7) < 2)
      return 0;
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v18 = *((_DWORD *)this + 12);
      if (v18)
      {
        v20 = 0;
        v24 = 0;
        v36 = 1;
        v21 = &byte_1C871356D;
LABEL_30:
        v25 = v18 - 1;
        v26 = *((_QWORD *)this + 5);
        v35 = v18;
        v27 = v26 + 8 * v18 + 8;
        v28 = 1;
        v29 = v24;
        while (1)
        {
          v30 = v29 & v25;
          v31 = *(_QWORD **)(v26 + 8 * v30);
          if (v31 != (_QWORD *)-8)
          {
            if (!v31)
              goto LABEL_43;
            if (*(_DWORD *)(v27 + 4 * v30) == v24
              && v20 == *v31
              && ((v36 & 1) != 0 || !memcmp(v21, (char *)v31 + *((unsigned int *)this + 15), v20)))
            {
              break;
            }
          }
          v29 = v28 + v30;
          ++v28;
        }
        if ((_DWORD)v30 != -1 && (int)v30 != v35)
          return 1;
      }
LABEL_43:
      v32 = *((_QWORD *)this + 4);
      if (v32)
        return (*(uint64_t (**)(uint64_t, const llvm::GlobalValue *))(*(_QWORD *)v32 + 48))(v32, a2);
      sub_1C485C2F0();
      return llvm::InternalizePass::maybeInternalize(v33, v34);
    }
    v10 = ***(_QWORD ***)a2;
    v11 = *(_QWORD *)(v10 + 152);
    v12 = *(unsigned int *)(v10 + 168);
    if ((_DWORD)v12)
    {
      LODWORD(v13) = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v14 = v11 + 16 * v13;
      v15 = *(const llvm::GlobalValue **)v14;
      if (*(const llvm::GlobalValue **)v14 == a2)
        goto LABEL_25;
      v16 = 1;
      while (v15 != (const llvm::GlobalValue *)-4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(const llvm::GlobalValue **)(v11 + 16 * v13);
        if (v15 == a2)
        {
          v14 = v11 + 16 * v13;
          goto LABEL_25;
        }
      }
    }
    v14 = v11 + 16 * v12;
LABEL_25:
    v18 = *((_DWORD *)this + 12);
    if (v18)
    {
      v19 = *(_QWORD **)(v14 + 8);
      v22 = *v19;
      v21 = (char *)(v19 + 2);
      v20 = v22;
      if (v22)
      {
        v23 = 0;
        v24 = 0;
        do
          v24 = 33 * v24 + v21[v23++];
        while (v20 != v23);
        v36 = 0;
      }
      else
      {
        v24 = 0;
        v36 = 1;
      }
      goto LABEL_30;
    }
    goto LABEL_43;
  }
  return result;
}

uint64_t llvm::InternalizePass::maybeInternalize(llvm::InternalizePass *this, llvm::GlobalValue *a2, uint64_t a3)
{
  int v5;
  llvm::GlobalValue *AliaseeObject;
  uint64_t v8;
  int v10;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 != 2)
  {
    AliaseeObject = a2;
    if (v5 != 1 || (AliaseeObject = (llvm::GlobalValue *)llvm::GlobalAlias::getAliaseeObject(a2)) != 0)
    {
      v8 = *((_QWORD *)AliaseeObject + 6);
      if (v8)
      {
        v16 = 0;
        if ((sub_1C617A1AC(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v8, &v16) & 1) != 0 && (*(_QWORD *)(v16 + 16) & 1) != 0)
          return 0;
        v12 = *((unsigned __int8 *)a2 + 16);
        if (v12 <= 3 && v12 != 1)
        {
          v16 = 0;
          v13 = sub_1C617A1AC(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v8, &v16);
          v14 = v16;
          if (!v13)
            v14 = *(_QWORD *)a3 + 24 * *(unsigned int *)(a3 + 16);
          if (*(_QWORD *)(v14 + 8) == 1)
          {
            v15 = *((_QWORD *)a2 + 6);
            if (v15)
              llvm::Comdat::removeUser(v15, (uint64_t)a2);
            *((_QWORD *)a2 + 6) = 0;
          }
          else if (!*(_BYTE *)this)
          {
            *(_DWORD *)(v8 + 8) = 3;
          }
        }
        v10 = *((_DWORD *)a2 + 8);
        if ((v10 & 0xFu) - 7 < 2)
          return 0;
LABEL_8:
        *((_DWORD *)a2 + 8) = v10 & 0xFFFFBFC0 | 0x4007;
        return 1;
      }
    }
  }
  if ((*((_DWORD *)a2 + 8) & 0xFu) - 7 >= 2 && (llvm::InternalizePass::shouldPreserveGV(this, a2) & 1) == 0)
  {
    v10 = *((_DWORD *)a2 + 8);
    goto LABEL_8;
  }
  return 0;
}

uint64_t llvm::InternalizePass::internalizeModule(llvm::InternalizePass *this, llvm::Module *a2, llvm::CallGraph *a3)
{
  uint64_t v6;
  _QWORD *i;
  llvm::GlobalAlias *v8;
  _QWORD *j;
  llvm::GlobalAlias *v10;
  _QWORD *k;
  llvm::GlobalAlias *v12;
  char *v13;
  char *v14;
  uint64_t ***v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ****v20;
  uint64_t ***v21;
  int v22;
  int v23;
  uint64_t ***v24;
  unsigned __int8 *v25;
  size_t v26;
  size_t v27;
  int v28;
  char *v29;
  _QWORD *v30;
  int v31;
  _QWORD *v32;
  llvm::GlobalValue *v33;
  int v34;
  BOOL v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  _QWORD *m;
  llvm::GlobalValue *v42;
  char *v43;
  uint64_t n;
  llvm::GlobalValue *v45;
  _QWORD v47[4];
  __int16 v48;
  void *__p[2];
  char v50;
  int v51;
  int v52;
  _QWORD v53[2];
  int v54;
  void *v55;
  uint64_t v56;
  _QWORD v57[5];

  v57[4] = *MEMORY[0x1E0C80C00];
  if (a3)
    v6 = *((_QWORD *)a3 + 10);
  else
    v6 = 0;
  v55 = v57;
  v56 = 0x400000000;
  llvm::collectUsedGlobalVariables((uint64_t)a2, (uint64_t)&v55, 0);
  v53[0] = 0;
  v53[1] = 0;
  v54 = 0;
  if (*((_DWORD *)a2 + 33))
  {
    for (i = (_QWORD *)*((_QWORD *)a2 + 4); i != (_QWORD *)((char *)a2 + 24); i = (_QWORD *)i[1])
    {
      if (i)
        v8 = (llvm::GlobalAlias *)(i - 7);
      else
        v8 = 0;
      llvm::InternalizePass::checkComdat(this, v8, (uint64_t)v53);
    }
    for (j = (_QWORD *)*((_QWORD *)a2 + 2); j != (_QWORD *)((char *)a2 + 8); j = (_QWORD *)j[1])
    {
      if (j)
        v10 = (llvm::GlobalAlias *)(j - 7);
      else
        v10 = 0;
      llvm::InternalizePass::checkComdat(this, v10, (uint64_t)v53);
    }
    for (k = (_QWORD *)*((_QWORD *)a2 + 6); k != (_QWORD *)((char *)a2 + 40); k = (_QWORD *)k[1])
    {
      if (k)
        v12 = (llvm::GlobalAlias *)(k - 6);
      else
        v12 = 0;
      llvm::InternalizePass::checkComdat(this, v12, (uint64_t)v53);
    }
  }
  if ((_DWORD)v56)
  {
    v13 = (char *)v55;
    v14 = (char *)v55 + 8 * v56;
    while (1)
    {
      v15 = *(uint64_t ****)v13;
      if ((*(_BYTE *)(*(_QWORD *)v13 + 23) & 0x10) == 0)
      {
        v26 = 0;
        v25 = (unsigned __int8 *)&byte_1C871356D;
        goto LABEL_34;
      }
      v16 = ***v15;
      v17 = *(_QWORD *)(v16 + 152);
      v18 = *(unsigned int *)(v16 + 168);
      if (!(_DWORD)v18)
        goto LABEL_32;
      LODWORD(v19) = (v18 - 1) & ((v15 >> 4) ^ (v15 >> 9));
      v20 = (uint64_t ****)(v17 + 16 * v19);
      v21 = *v20;
      if (*v20 != v15)
        break;
LABEL_33:
      v24 = v20[1];
      v27 = (size_t)*v24;
      v25 = (unsigned __int8 *)(v24 + 2);
      v26 = v27;
LABEL_34:
      sub_1C4F024D8((llvm::InternalizePass *)((char *)this + 40), v25, v26);
      v13 += 8;
      if (v13 == v14)
        goto LABEL_37;
    }
    v22 = 1;
    while (v21 != (uint64_t ***)-4096)
    {
      v23 = v19 + v22++;
      v19 = v23 & (v18 - 1);
      v21 = *(uint64_t ****)(v17 + 16 * v19);
      if (v21 == v15)
      {
        v20 = (uint64_t ****)(v17 + 16 * v19);
        goto LABEL_33;
      }
    }
LABEL_32:
    v20 = (uint64_t ****)(v17 + 16 * v18);
    goto LABEL_33;
  }
LABEL_37:
  sub_1C4F024D8((llvm::InternalizePass *)((char *)this + 40), "llvm.used", 9uLL);
  sub_1C4F024D8((llvm::InternalizePass *)((char *)this + 40), "llvm.compiler.used", 0x12uLL);
  sub_1C4F024D8((llvm::InternalizePass *)((char *)this + 40), "llvm.global_ctors", 0x11uLL);
  sub_1C4F024D8((llvm::InternalizePass *)((char *)this + 40), "llvm.global_dtors", 0x11uLL);
  sub_1C4F024D8((llvm::InternalizePass *)((char *)this + 40), "llvm.global.annotations", 0x17uLL);
  sub_1C4F024D8((llvm::InternalizePass *)((char *)this + 40), "__stack_chk_fail", 0x10uLL);
  v48 = 260;
  v47[0] = (char *)a2 + 216;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v47);
  v28 = v51;
  if (v50 < 0)
    operator delete(__p[0]);
  if (v28 == 21)
    v29 = "__ssp_canary_word";
  else
    v29 = "__stack_chk_guard";
  sub_1C4F024D8((llvm::InternalizePass *)((char *)this + 40), (unsigned __int8 *)v29, 0x11uLL);
  v48 = 260;
  v47[0] = (char *)a2 + 216;
  llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v47);
  *(_BYTE *)this = v52 == 7;
  if (v50 < 0)
    operator delete(__p[0]);
  v30 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (v30 == (_QWORD *)((char *)a2 + 24))
  {
    v31 = 0;
  }
  else
  {
    v31 = 0;
    v32 = (_QWORD *)((char *)a3 + 16);
    do
    {
      if (v30)
        v33 = (llvm::GlobalValue *)(v30 - 7);
      else
        v33 = 0;
      v34 = llvm::InternalizePass::maybeInternalize(this, v33, (uint64_t)v53);
      if (v34)
        v35 = v6 == 0;
      else
        v35 = 1;
      if (v35)
      {
        v31 |= v34;
      }
      else
      {
        v36 = (_QWORD *)*v32;
        if (!*v32)
          goto LABEL_66;
        v37 = v32;
        do
        {
          v38 = v36[4];
          v39 = v38 >= (unint64_t)v33;
          if (v38 >= (unint64_t)v33)
            v40 = v36;
          else
            v40 = v36 + 1;
          if (v39)
            v37 = v36;
          v36 = (_QWORD *)*v40;
        }
        while (*v40);
        if (v37 == v32 || v37[4] > (unint64_t)v33)
LABEL_66:
          v37 = v32;
        llvm::CallGraphNode::removeOneAbstractEdgeTo(v6, v37[5]);
        v31 = 1;
      }
      v30 = (_QWORD *)v30[1];
    }
    while (v30 != (_QWORD *)((char *)a2 + 24));
  }
  for (m = (_QWORD *)*((_QWORD *)a2 + 2); m != (_QWORD *)((char *)a2 + 8); m = (_QWORD *)m[1])
  {
    if (m)
      v42 = (llvm::GlobalValue *)(m - 7);
    else
      v42 = 0;
    v31 |= llvm::InternalizePass::maybeInternalize(this, v42, (uint64_t)v53);
  }
  v43 = (char *)a2 + 40;
  for (n = *((_QWORD *)a2 + 6); (char *)n != v43; n = *(_QWORD *)(n + 8))
  {
    if (n)
      v45 = (llvm::GlobalValue *)(n - 48);
    else
      v45 = 0;
    v31 |= llvm::InternalizePass::maybeInternalize(this, v45, (uint64_t)v53);
  }
  MEMORY[0x1CAA32FB4](v53[0], 8);
  if (v55 != v57)
    free(v55);
  return v31 & 1;
}

llvm::StringMapImpl *sub_1C570631C(llvm::StringMapImpl *a1)
{
  size_t v2;
  uint64_t *v3;
  llvm *v4;
  char v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  unsigned __int8 *v15;
  size_t v16;
  size_t v17;
  unsigned __int8 *v19;
  BOOL v20;
  _QWORD v21[4];
  __int16 v22;
  int v23[2];
  size_t __n;
  llvm::MemoryBuffer *v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0x800000000;
  if (byte_1ED80C9C7 >= 0)
    v2 = byte_1ED80C9C7 & 0x7F;
  else
    v2 = qword_1ED80C9B8;
  if (v2)
  {
    v22 = 261;
    if (byte_1ED80C9C7 >= 0)
      v3 = &qword_1ED80C9B0;
    else
      v3 = (uint64_t *)qword_1ED80C9B0;
    v21[0] = v3;
    v21[1] = v2;
    v4 = (llvm *)sub_1C5E1F6CC((unsigned __int8 *)v21, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v25);
    v5 = v26;
    if ((v26 & 1) != 0)
    {
      v6 = (llvm::raw_ostream *)llvm::errs(v4);
      v7 = v6;
      v8 = (void *)*((_QWORD *)v6 + 4);
      if (*((_QWORD *)v6 + 3) - (_QWORD)v8 > 0x28uLL)
      {
        qmemcpy(v8, "WARNING: Internalize couldn't load file '", 41);
        v9 = (void *)(*((_QWORD *)v6 + 4) + 41);
        *((_QWORD *)v7 + 4) = v9;
      }
      else
      {
        v7 = llvm::raw_ostream::write(v6, "WARNING: Internalize couldn't load file '", 0x29uLL);
        v9 = (void *)*((_QWORD *)v7 + 4);
      }
      if (v2 <= *((_QWORD *)v7 + 3) - (_QWORD)v9)
      {
        memcpy(v9, v3, v2);
        v10 = (void *)(*((_QWORD *)v7 + 4) + v2);
        *((_QWORD *)v7 + 4) = v10;
      }
      else
      {
        v7 = llvm::raw_ostream::write(v7, (const char *)v3, v2);
        v10 = (void *)*((_QWORD *)v7 + 4);
      }
      if (*((_QWORD *)v7 + 3) - (_QWORD)v10 > 0x1FuLL)
      {
        qmemcpy(v10, "'! Continuing as if it's empty.\n", 32);
        *((_QWORD *)v7 + 4) += 32;
      }
      else
      {
        llvm::raw_ostream::write(v7, "'! Continuing as if it's empty.\n", 0x20uLL);
        v5 = v26;
      }
    }
    else
    {
      llvm::line_iterator::line_iterator((llvm::line_iterator *)v21, v25, 1, 0);
      v19 = *(unsigned __int8 **)v23;
      if ((_BYTE)v22 || *(_QWORD *)v23)
      {
        do
        {
          sub_1C4F024D8(a1, v19, __n);
          llvm::line_iterator::advance((uint64_t)v21);
          v19 = *(unsigned __int8 **)v23;
          if ((_BYTE)v22)
            v20 = 0;
          else
            v20 = *(_QWORD *)v23 == 0;
        }
        while (!v20);
      }
    }
    if ((v5 & 1) == 0 && v25)
      (*(void (**)(llvm::MemoryBuffer *))(*(_QWORD *)v25 + 8))(v25);
  }
  v11 = qword_1ED80C8D8;
  v12 = unk_1ED80C8E0;
  while (v11 != v12)
  {
    v13 = *(_BYTE *)(v11 + 23);
    v14 = v13 < 0;
    if (v13 >= 0)
      v15 = (unsigned __int8 *)v11;
    else
      v15 = *(unsigned __int8 **)v11;
    v16 = v13 & 0x7F;
    if (v14)
      v17 = *(_QWORD *)(v11 + 8);
    else
      v17 = v16;
    sub_1C4F024D8(a1, v15, v17);
    v11 += 24;
  }
  return a1;
}

_QWORD *llvm::InternalizePass::run@<X0>(llvm::InternalizePass *a1@<X0>, llvm::Module *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t CachedResultImpl;
  llvm::CallGraph *v8;
  char v9;

  CachedResultImpl = llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(a3, (uint64_t)&llvm::CallGraphAnalysis::Key, (uint64_t)a2);
  if (CachedResultImpl)
    v8 = (llvm::CallGraph *)(CachedResultImpl + 8);
  else
    v8 = 0;
  v9 = llvm::InternalizePass::internalizeModule(a1, a2, v8);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v9 & 1) != 0)
    return sub_1C4DDB144(a4, (uint64_t)&llvm::CallGraphAnalysis::Key);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

void llvm::initializeInternalizeLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831EC0);
  if (v2 != -1)
  {
    v5[0] = sub_1C5706694;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831EC0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5706694(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Internalize Global Symbols";
  *(_QWORD *)(v2 + 8) = 26;
  *(_QWORD *)(v2 + 16) = "internalize";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F32E8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C57067A8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5706724(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32E8;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817AF90;
  sub_1C570631C((llvm::StringMapImpl *)&v5);
  v2 = operator new(0x28uLL);
  v3 = v5;
  *v2 = &off_1E817B030;
  v2[1] = v3;
  *((_OWORD *)v2 + 1) = v6;
  v5 = 0;
  *(_QWORD *)&v6 = 0;
  DWORD2(v6) = 0;
  *(_QWORD *)(a1 + 56) = v2;
  sub_1C4F02264((uint64_t)&v5);
  return a1;
}

uint64_t sub_1C57067A8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5706724(v0);
}

void sub_1C57067D0(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E817AF90;
  v2 = (char *)this + 32;
  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::Pass::~Pass(this);
}

void sub_1C570682C(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E817AF90;
  v2 = (char *)this + 32;
  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      llvm::Pass::~Pass(this);
      JUMPOUT(0x1CAA32FC0);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

void *sub_1C570689C(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::CallGraphWrapperPass::ID);
}

uint64_t sub_1C57068D0(llvm::ModulePass *a1, llvm::Module *a2)
{
  uint64_t v4;
  uint64_t AnalysisPass;
  uint64_t v6;
  llvm::CallGraph *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  void (**v13)(_QWORD *);
  void (**v14)(void);
  _QWORD v16[3];
  _QWORD *v17;
  _QWORD v18[3];
  _QWORD *v19;
  _BYTE v20[8];
  _BYTE v21[24];
  _BYTE *v22;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x1E0C80C00];
  if ((llvm::ModulePass::skipModule(a1, (uint64_t **)a2) & 1) == 0)
  {
    AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*((_QWORD *)a1 + 1) + 24), &llvm::CallGraphWrapperPass::ID, 1);
    if (AnalysisPass
      && (v6 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::CallGraphWrapperPass::ID)) != 0)
    {
      v7 = *(llvm::CallGraph **)(v6 + 32);
    }
    else
    {
      v7 = 0;
    }
    v8 = (_QWORD *)*((_QWORD *)a1 + 7);
    if (v8)
    {
      if (v8 != (_QWORD *)((char *)a1 + 32))
      {
        v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
        v17 = v9;
        if (!v9)
          goto LABEL_12;
LABEL_15:
        if (v9 == v16)
        {
          v19 = v18;
          (*(void (**)(_QWORD *, _QWORD *))(v16[0] + 24))(v16, v18);
          v9 = v19;
          v20[0] = 0;
          v10 = v21;
          if (!v19)
            goto LABEL_13;
        }
        else
        {
          v19 = v9;
          v17 = 0;
          v20[0] = 0;
          v10 = v21;
        }
        if (v9 == v18)
        {
          v22 = v21;
          (*(void (**)(_QWORD *, _BYTE *))(v18[0] + 24))(v18, v21);
        }
        else
        {
          v22 = v9;
          v19 = 0;
        }
LABEL_19:
        v23[0] = 0;
        v23[1] = 0;
        v23[2] = 0x800000000;
        v4 = llvm::InternalizePass::internalizeModule((llvm::InternalizePass *)v20, a2, v7);
        sub_1C4F02264((uint64_t)v23);
        if (v22 == v21)
        {
          v11 = 4;
        }
        else
        {
          if (!v22)
          {
LABEL_22:
            v12 = v19;
            if (v19 == v18)
            {
              v13 = (void (**)(_QWORD *))(v18[0] + 32);
              v12 = v18;
            }
            else
            {
              if (!v19)
              {
LABEL_25:
                if (v17 == v16)
                {
                  v14 = (void (**)(void))(v16[0] + 32);
                }
                else
                {
                  if (!v17)
                    return v4;
                  v14 = (void (**)(void))(*v17 + 40);
                }
                (*v14)();
                return v4;
              }
              v13 = (void (**)(_QWORD *))(*v19 + 40);
            }
            (*v13)(v12);
            goto LABEL_25;
          }
          v11 = 5;
          v10 = v22;
        }
        (*(void (**)(_QWORD *))(*v10 + 8 * v11))(v10);
        goto LABEL_22;
      }
      v17 = v16;
      (*(void (**)(_QWORD *, _QWORD *))(*v8 + 24))(v8, v16);
      v9 = v17;
      if (v17)
        goto LABEL_15;
    }
    else
    {
      v17 = 0;
    }
LABEL_12:
    v19 = 0;
    v20[0] = 0;
    v10 = v21;
LABEL_13:
    v22 = 0;
    goto LABEL_19;
  }
  return 0;
}

_QWORD *sub_1C5706B34(_QWORD *a1)
{
  *a1 = &off_1E817B030;
  sub_1C4F02264((uint64_t)(a1 + 1));
  return a1;
}

void sub_1C5706B64(_QWORD *a1)
{
  *a1 = &off_1E817B030;
  sub_1C4F02264((uint64_t)(a1 + 1));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5706BA4(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v2;

  v1 = (uint64_t *)(a1 + 8);
  v2 = operator new(0x28uLL);
  *v2 = &off_1E817B030;
  sub_1C6298F84((llvm::StringMapImpl *)(v2 + 1), v1);
  return v2;
}

llvm::StringMapImpl *sub_1C5706BE4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817B030;
  return sub_1C6298F84((llvm::StringMapImpl *)(a2 + 1), (uint64_t *)(a1 + 8));
}

uint64_t sub_1C5706C00(uint64_t a1)
{
  return sub_1C4F02264(a1 + 8);
}

void sub_1C5706C08(void *a1)
{
  sub_1C4F02264((uint64_t)a1 + 8);
  operator delete(a1);
}

BOOL sub_1C5706C30(uint64_t a1, uint64_t ***a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t ****v6;
  uint64_t ***v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t ***v11;
  char *v12;
  size_t v13;
  size_t v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;

  if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
  {
    v16 = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v13 = 0;
      v12 = &byte_1C871356D;
      goto LABEL_33;
    }
LABEL_35:
    LODWORD(v21) = -1;
    return (_DWORD)v21 != -1 && (int)v21 != (unint64_t)v16;
  }
  v2 = ***a2;
  v3 = *(_QWORD *)(v2 + 152);
  v4 = *(unsigned int *)(v2 + 168);
  if ((_DWORD)v4)
  {
    LODWORD(v5) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v6 = (uint64_t ****)(v3 + 16 * v5);
    v7 = *v6;
    if (*v6 == a2)
      goto LABEL_9;
    v8 = 1;
    while (v7 != (uint64_t ***)-4096)
    {
      v9 = v5 + v8++;
      v5 = v9 & (v4 - 1);
      v7 = *(uint64_t ****)(v3 + 16 * v5);
      if (v7 == a2)
      {
        v6 = (uint64_t ****)(v3 + 16 * v5);
        goto LABEL_9;
      }
    }
  }
  v6 = (uint64_t ****)(v3 + 16 * v4);
LABEL_9:
  v10 = *(_DWORD *)(a1 + 16);
  if (!v10)
  {
    v16 = 0;
    goto LABEL_35;
  }
  v11 = v6[1];
  v14 = (size_t)*v11;
  v12 = (char *)(v11 + 2);
  v13 = v14;
  if (v14)
  {
    v15 = 0;
    v16 = 0;
    do
      v16 = 33 * v16 + v12[v15++];
    while (v13 != v15);
    v17 = 0;
    goto LABEL_14;
  }
  v16 = 0;
LABEL_33:
  v17 = 1;
LABEL_14:
  v18 = *(_QWORD *)(a1 + 8);
  v19 = 1;
  v20 = v16;
  while (1)
  {
    v21 = v20 & (v10 - 1);
    v22 = *(_QWORD **)(v18 + 8 * v21);
    if (v22 == (_QWORD *)-8)
      goto LABEL_21;
    if (!v22)
      break;
    if (*(_DWORD *)(v18 + 8 * v10 + 8 + 4 * v21) == v16
      && v13 == *v22
      && ((v17 & 1) != 0 || !memcmp(v12, (char *)v22 + *(unsigned int *)(a1 + 28), v13)))
    {
      goto LABEL_23;
    }
LABEL_21:
    v20 = v19 + v21;
    ++v19;
  }
  LODWORD(v21) = -1;
LABEL_23:
  v16 = v10;
  return (_DWORD)v21 != -1 && (int)v21 != (unint64_t)v16;
}

uint64_t sub_1C5706DEC()
{
  uint64_t v0;
  int v2;
  __int128 v3;
  __int128 v4;

  v0 = sub_1C47AD050((uint64_t)qword_1ED80C930, 0, 0);
  qword_1ED80C9B0 = 0;
  qword_1ED80C9B8 = 0;
  qword_1ED80C9D8 = 0;
  unk_1ED80C9E0 = 0;
  qword_1ED80C9D0 = 0;
  byte_1ED80C9E8 = 0;
  unk_1ED80C9C0 = 0;
  unk_1ED80C9C8 = &unk_1E819E950;
  qword_1ED80C930[0] = (uint64_t)&unk_1E819E480;
  qword_1ED80C9F0 = (uint64_t)&unk_1E819E970;
  qword_1ED80C9F8[0] = &off_1E7FA8CB8;
  qword_1ED80CA10 = (uint64_t)qword_1ED80C9F8;
  llvm::cl::Option::setArgStr(v0, "internalize-public-api-file", 0x1BuLL);
  qword_1ED80C960 = (uint64_t)"filename";
  unk_1ED80C968 = 8;
  qword_1ED80C950 = (uint64_t)"A file containing list of symbol names to preserve";
  unk_1ED80C958 = 50;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED80C930);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, qword_1ED80C930, &dword_1C475E000);
  *(_QWORD *)&v4 = "list";
  *((_QWORD *)&v4 + 1) = 4;
  *(_QWORD *)&v3 = "A list of symbol names to preserve";
  *((_QWORD *)&v3 + 1) = 34;
  v2 = 1;
  sub_1C6298EC4(&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C50A4924, &qword_1ED80C858, &dword_1C475E000);
}

void llvm::initializeLoopExtractorLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831EC8);
  if (v2 != -1)
  {
    v5[0] = sub_1C5706F7C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831EC8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5706F7C(llvm *a1, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeBreakCriticalEdgesPass(a1, a2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopSimplifyPass(a1, v3);
  v4 = operator new();
  *(_QWORD *)v4 = "Extract loops into new functions";
  *(_QWORD *)(v4 + 8) = 32;
  *(_QWORD *)(v4 + 16) = "loop-extract";
  *(_QWORD *)(v4 + 24) = 12;
  *(_QWORD *)(v4 + 32) = &unk_1EF8F32F0;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C57074A0;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

void llvm::initializeSingleLoopExtractorPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831ED0);
  if (v2 != -1)
  {
    v5[0] = sub_1C5707088;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831ED0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5707088(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Extract at most one loop into a new function";
  *(_QWORD *)(v2 + 8) = 44;
  *(_QWORD *)(v2 + 16) = "loop-extract-single";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F32F1;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C57074CC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createLoopExtractorPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C5707508(v1, -1);
}

_QWORD *llvm::LoopExtractorPass::run@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7;
  int v9;
  uint64_t (*v10)(uint64_t *, uint64_t);
  uint64_t *v11;
  uint64_t (*v12)(uint64_t *, uint64_t);
  uint64_t *v13;
  uint64_t (*v14)(uint64_t *, uint64_t);
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v17 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a2)+ 8);
  v18 = v17;
  v9 = *a1;
  v10 = sub_1C5707ABC;
  v11 = &v18;
  v12 = sub_1C5707AE4;
  v13 = &v17;
  v14 = sub_1C5707B0C;
  v15 = &v16;
  v16 = v17;
  v7 = sub_1C570722C((uint64_t)&v9, a2);
  *(_QWORD *)a4 = a4 + 32;
  *(_QWORD *)(a4 + 8) = a4 + 32;
  *(_QWORD *)(a4 + 16) = 2;
  *(_DWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 48) = a4 + 80;
  *(_QWORD *)(a4 + 56) = a4 + 80;
  *(_QWORD *)(a4 + 64) = 2;
  *(_DWORD *)(a4 + 72) = 0;
  if ((v7 & 1) != 0)
    return sub_1C4DDB144(a4, (uint64_t)&llvm::LoopAnalysis::Key);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C570722C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  int32x2_t *v12;
  uint64_t v13;
  llvm::Loop **v14;
  char *v15;
  llvm::Loop *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  BOOL v28;
  void *v31;
  uint64_t v32;
  _QWORD v33[9];

  v33[8] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 24);
  if (v2 != a2 + 24 && *(_DWORD *)a1)
  {
    v4 = 0;
    v5 = (uint64_t *)(a2 + 32);
    while (1)
    {
      v6 = *v5;
      v7 = *v5 - 56;
      if (v6)
        v8 = (_QWORD *)v7;
      else
        v8 = 0;
      v9 = v8[14];
      if (v9)
        LODWORD(v9) = (*(unsigned __int8 *)(v9 + 17) >> 3) & 1;
      v10 = 0;
      if ((v9 & 1) != 0 || (_QWORD *)v8[9] == v8 + 9)
        goto LABEL_47;
      v11 = (*(uint64_t (**)(_QWORD, _QWORD *))(a1 + 24))(*(_QWORD *)(a1 + 32), v8);
      if (*(_QWORD *)(v11 + 24) == *(_QWORD *)(v11 + 32))
      {
        v10 = 0;
      }
      else
      {
        v12 = (int32x2_t *)v11;
        v13 = (*(uint64_t (**)(_QWORD, _QWORD *))(a1 + 8))(*(_QWORD *)(a1 + 16), v8);
        v14 = (llvm::Loop **)v12[3];
        v15 = (char *)v12[4];
        if (v14 + 1 == (llvm::Loop **)v15)
        {
          v16 = *v14;
          if (llvm::Loop::isLoopSimplifyForm(*v14))
          {
            v17 = v8[10];
            v18 = v17 - 24;
            if (!v17)
              v18 = 0;
            v19 = *(_QWORD *)(v18 + 40);
            if (v19 == v18 + 40)
            {
              v20 = 0;
            }
            else
            {
              if (v19)
                v20 = v19 - 24;
              else
                v20 = 0;
              if (*(unsigned __int8 *)(v20 + 16) - 29 >= 0xB)
                v20 = 0;
            }
            if (*(_BYTE *)(v20 + 16) != 30
              || (*(_DWORD *)(v20 + 20) & 0x7FFFFFF) != 1
              || *(_QWORD *)(v20 - 32) != **((_QWORD **)v16 + 4))
            {
              goto LABEL_53;
            }
            v31 = v33;
            v32 = 0x800000000;
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(v16, (uint64_t)&v31);
            if ((_DWORD)v32)
            {
              v21 = 8 * v32 - 8;
              v22 = (uint64_t *)v31;
              do
              {
                v23 = *v22++;
                v24 = *(_QWORD *)(v23 + 40);
                if (v24)
                  v25 = v24 - 24;
                else
                  v25 = 0;
                if (*(unsigned __int8 *)(v25 + 16) - 29 >= 0xB)
                  v25 = 0;
                v26 = *(unsigned __int8 *)(v25 + 16);
                v27 = v26 == 29;
                v28 = v26 != 29 || v21 == 0;
                v21 -= 8;
              }
              while (!v28);
            }
            else
            {
              v27 = 1;
            }
            if (v31 != v33)
              free(v31);
            if (!v27)
            {
LABEL_53:
              v10 = sub_1C5707968(a1, v16, v12, v13);
              goto LABEL_47;
            }
          }
          v14 = (llvm::Loop **)*((_QWORD *)v16 + 1);
          v15 = (char *)*((_QWORD *)v16 + 2);
        }
        v10 = sub_1C5707868((_DWORD *)a1, (char *)v14, v15, v12, v13);
      }
LABEL_47:
      v4 |= v10;
      v5 = (uint64_t *)(v6 + 8);
      if (v6 == v2 || *(_DWORD *)a1 == 0)
        return v4 & 1;
    }
  }
  v4 = 0;
  return v4 & 1;
}

uint64_t sub_1C57074A0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5707508(v0, -1);
}

_QWORD *sub_1C57074CC()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C5707508(v0, 1);
  *result = &off_1E817B118;
  return result;
}

uint64_t sub_1C5707508(uint64_t a1, int a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32F0;
  *(_QWORD *)a1 = &off_1E817B078;
  *(_DWORD *)(a1 + 24) = 4;
  *(_DWORD *)(a1 + 28) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED831EC8);
  if (v4 != -1)
  {
    v8[0] = sub_1C5706F7C;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED831EC8, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C57075D4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C57075F8(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&unk_1EF8F7638);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&unk_1EF8F7650);
  return sub_1C4771E64(a2, a2 + 144, (uint64_t)llvm::AssumptionCacheTracker::ID);
}

uint64_t sub_1C5707684(llvm::ModulePass *a1, uint64_t **a2)
{
  uint64_t result;
  int v5;
  uint64_t (*v6)(uint64_t);
  llvm::ModulePass **v7;
  uint64_t (*v8)(_QWORD *);
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, llvm::Function *);
  llvm::ModulePass **v11;
  llvm::ModulePass *v12;
  _QWORD v13[2];
  llvm::ModulePass *v14;
  char v15;

  if ((llvm::ModulePass::skipModule(a1, a2) & 1) != 0)
    return 0;
  v15 = 0;
  v13[0] = a1;
  v13[1] = &v15;
  v14 = a1;
  v5 = *((_DWORD *)a1 + 7);
  v6 = sub_1C5707720;
  v7 = &v14;
  v8 = sub_1C5707774;
  v9 = v13;
  v10 = sub_1C57077D8;
  v11 = &v12;
  v12 = a1;
  LODWORD(result) = sub_1C570722C((uint64_t)&v5, (uint64_t)a2);
  if (v15)
    return 1;
  else
    return result;
}

uint64_t sub_1C5707720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v2 + 96))(v2, &llvm::DominatorTreeWrapperPass::ID)
       + 32;
}

uint64_t sub_1C5707774(_QWORD *a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v1 = (_BYTE *)a1[1];
  v2 = *(_QWORD *)(*(_QWORD *)(*a1 + 8) + 24);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  if (v1)
    *v1 |= v4;
  return (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v3 + 96))(v3, &llvm::LoopInfoWrapperPass::ID) + 32;
}

uint64_t sub_1C57077D8(uint64_t a1, llvm::Function *a2)
{
  uint64_t AnalysisPass;
  llvm::AssumptionCacheTracker *v4;

  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(*(_QWORD *)a1 + 8) + 24), llvm::AssumptionCacheTracker::ID, 1);
  if (AnalysisPass
    && (v4 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, llvm::AssumptionCacheTracker::ID)) != 0)
  {
    return llvm::AssumptionCacheTracker::lookupAssumptionCache(v4, a2);
  }
  else
  {
    return 0;
  }
}

void sub_1C5707844(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5707868(_DWORD *a1, char *a2, char *a3, int32x2_t *a4, uint64_t a5)
{
  llvm::Loop **v8;
  int v9;
  uint64_t v10;
  llvm::Loop *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[9];

  v15[8] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x800000000;
  sub_1C499C3FC((unsigned int *)&v13, a2, a3);
  v8 = (llvm::Loop **)v13;
  if ((_DWORD)v14)
  {
    v9 = 0;
    v10 = 8 * v14;
    do
    {
      v11 = *v8;
      if (llvm::Loop::isLoopSimplifyForm(*v8))
      {
        v9 |= sub_1C5707968((uint64_t)a1, v11, a4, a5);
        if (!*a1)
          break;
      }
      ++v8;
      v10 -= 8;
    }
    while (v10);
    v8 = (llvm::Loop **)v13;
  }
  else
  {
    LOBYTE(v9) = 0;
  }
  if (v8 != v15)
    free(v8);
  return v9 & 1;
}

BOOL sub_1C5707968(uint64_t a1, llvm::Loop *a2, int32x2_t *a3, uint64_t a4)
{
  llvm::Function *v8;
  uint64_t v9;
  uint64_t CodeRegion;
  __int128 v12;
  char v13;
  _BYTE v14[56];
  _QWORD v15[8];
  void *v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t v20;
  void *__p;
  void *v22;
  _BYTE v23[192];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v8 = *(llvm::Function **)(**((_QWORD **)a2 + 4) + 56);
  v9 = (*(uint64_t (**)(_QWORD, llvm::Function *))(a1 + 40))(*(_QWORD *)(a1 + 48), v8);
  llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache((llvm::CodeExtractorAnalysisCache *)v23, v8);
  v13 = 0;
  LOBYTE(v12) = 0;
  llvm::CodeExtractor::CodeExtractor((uint64_t)v14, a4, (uint64_t)a2, 0, 0, 0, v9, &v12);
  CodeRegion = llvm::CodeExtractor::extractCodeRegion((llvm::CodeExtractor *)v14, (const llvm::CodeExtractorAnalysisCache *)v23);
  if (CodeRegion)
  {
    llvm::LoopInfo::erase(a3, a2);
    --*(_DWORD *)a1;
  }
  if (__p)
  {
    v22 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v20, 8);
  if (v19 < 0)
    operator delete(v18);
  if (v16 != &v17)
    free(v16);
  sub_1C5408A20(v15);
  sub_1C626D3D0((uint64_t)v23);
  return CodeRegion != 0;
}

uint64_t sub_1C5707ABC(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::DominatorTreeAnalysis::Key, a2) + 8;
}

uint64_t sub_1C5707AE4(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::LoopAnalysis::Key, a2) + 8;
}

uint64_t sub_1C5707B0C(uint64_t *a1, uint64_t a2)
{
  uint64_t CachedResultImpl;

  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(*a1, (uint64_t)&llvm::AssumptionAnalysis::Key, a2);
  if (CachedResultImpl)
    return CachedResultImpl + 8;
  else
    return 0;
}

char *sub_1C5707B3C()
{
  unint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  uint64_t v4;
  char *result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10[2];

  v10[0] = (uint64_t)"StringRef llvm::getTypeName() [DesiredTypeName = llvm::LoopExtractorPass]";
  v10[1] = 73;
  v0 = llvm::StringRef::find(v10, "DesiredTypeName = ", 0x12uLL, 0);
  if (v0 >= 0x49)
    v1 = 73;
  else
    v1 = v0;
  v2 = &aStringrefLlvmG_13[v1];
  v3 = 73 - v1;
  if (v3 >= 0x12)
    v4 = 18;
  else
    v4 = v3;
  result = &v2[v4];
  v6 = v3 - v4;
  if (v6 >= v6 - 1)
    v7 = v6 - 1;
  else
    v7 = v6;
  if (v7 >= 6 && *(_DWORD *)result == 1836477548 && *((_WORD *)result + 2) == 14906)
    result += 6;
  return result;
}

uint64_t llvm::lowertypetests::BitSetInfo::containsGlobalOffset(llvm::lowertypetests::BitSetInfo *this, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;

  v2 = *((_QWORD *)this + 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (!v3)
    return 0;
  v5 = *((_DWORD *)this + 10);
  if ((v4 & ~(-1 << v5)) != 0)
    return 0;
  v6 = v4 >> v5;
  if (v6 >= *((_QWORD *)this + 4))
    return 0;
  v7 = (_QWORD *)*((_QWORD *)this + 1);
  if (!v7)
    return 0;
  while (1)
  {
    v8 = v7[4];
    if (v6 >= v8)
      break;
LABEL_9:
    v7 = (_QWORD *)*v7;
    if (!v7)
      return 0;
  }
  if (v8 < v6)
  {
    ++v7;
    goto LABEL_9;
  }
  return 1;
}

llvm::raw_ostream *llvm::lowertypetests::BitSetInfo::print(llvm::lowertypetests::BitSetInfo *this, llvm::raw_ostream *a2)
{
  _DWORD *v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  unint64_t v9;
  llvm::raw_ostream *v10;
  int v11;
  llvm::raw_ostream *result;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  llvm::raw_ostream *v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  char *v22;
  char *v23;
  BOOL v24;
  _WORD *v25;
  uint64_t v26;

  v4 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 6uLL)
  {
    *(_DWORD *)((char *)v4 + 3) = 544499059;
    *v4 = 1936090735;
    *((_QWORD *)a2 + 4) += 7;
    v5 = a2;
  }
  else
  {
    v5 = llvm::raw_ostream::write(a2, "offset ", 7uLL);
  }
  sub_1C5E21910(v5, *((_QWORD *)this + 3), 0, 0, 0);
  v6 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) > 5)
  {
    *(_WORD *)(v6 + 4) = 8293;
    *(_DWORD *)v6 = 2053731104;
    *((_QWORD *)v5 + 4) += 6;
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, " size ", 6uLL);
  }
  sub_1C5E21910(v5, *((_QWORD *)this + 4), 0, 0, 0);
  v7 = (_DWORD *)*((_QWORD *)v5 + 4);
  if (*((_QWORD *)v5 + 3) - (_QWORD)v7 > 6uLL)
  {
    *(_DWORD *)((char *)v7 + 3) = 544106345;
    *v7 = 1768710432;
    *((_QWORD *)v5 + 4) += 7;
  }
  else
  {
    v5 = llvm::raw_ostream::write(v5, " align ", 7uLL);
  }
  v8 = *((_DWORD *)this + 10);
  v9 = 1 << v8;
  if (v8 == 31)
  {
    v9 = -(uint64_t)v9;
    v10 = v5;
    v11 = 1;
  }
  else
  {
    v10 = v5;
    v11 = 0;
  }
  result = sub_1C5E21910(v10, v9, 0, 0, v11);
  v13 = *((_QWORD *)a2 + 4);
  v14 = *((_QWORD *)a2 + 3) - v13;
  if (*((_QWORD *)this + 2) == *((_QWORD *)this + 4))
  {
    if (v14 <= 9)
    {
      v15 = " all-ones\n";
      v16 = a2;
      v17 = 10;
      return llvm::raw_ostream::write(v16, v15, v17);
    }
    *(_WORD *)(v13 + 8) = 2675;
    *(_QWORD *)v13 = *(_QWORD *)" all-ones\n";
    v26 = *((_QWORD *)a2 + 4) + 10;
  }
  else
  {
    if (v14 > 2)
    {
      *(_BYTE *)(v13 + 2) = 32;
      *(_WORD *)v13 = 31520;
      *((_QWORD *)a2 + 4) += 3;
    }
    else
    {
      result = llvm::raw_ostream::write(a2, " { ", 3uLL);
    }
    v20 = *(char **)this;
    v18 = (char *)this + 8;
    v19 = v20;
    if (v20 != v18)
    {
      do
      {
        result = sub_1C5E21910(a2, *((_QWORD *)v19 + 4), 0, 0, 0);
        v21 = (_BYTE *)*((_QWORD *)a2 + 4);
        if ((unint64_t)v21 >= *((_QWORD *)a2 + 3))
        {
          result = llvm::raw_ostream::write(a2, 32);
        }
        else
        {
          *((_QWORD *)a2 + 4) = v21 + 1;
          *v21 = 32;
        }
        v22 = (char *)*((_QWORD *)v19 + 1);
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = *(char **)v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (char *)*((_QWORD *)v19 + 2);
            v24 = *(_QWORD *)v23 == (_QWORD)v19;
            v19 = v23;
          }
          while (!v24);
        }
        v19 = v23;
      }
      while (v23 != v18);
    }
    v25 = (_WORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v25 <= 1uLL)
    {
      v15 = "}\n";
      v16 = a2;
      v17 = 2;
      return llvm::raw_ostream::write(v16, v15, v17);
    }
    *v25 = 2685;
    v26 = *((_QWORD *)a2 + 4) + 2;
  }
  *((_QWORD *)a2 + 4) = v26;
  return result;
}

void llvm::lowertypetests::GlobalLayoutBuilder::addFragment(int64x2_t *a1, _QWORD *a2)
{
  int64x2_t *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  int64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  BOOL v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  int64x2_t v70;
  char *v71;
  __int128 v72;
  _QWORD *v73;
  uint64_t v74;
  int64x2_t *v75;
  _QWORD *v76;
  unint64_t v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  int64x2_t v81;
  unint64_t v82;
  int64x2_t *v83;

  v3 = a1;
  v4 = a1[1].u64[0];
  v5 = (_QWORD *)a1->i64[1];
  if ((unint64_t)v5 >= v4)
  {
    v64 = (_QWORD *)a1->i64[0];
    v65 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - a1->i64[0]) >> 3);
    v66 = v65 + 1;
    if (v65 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_83:
      abort();
    if (0x5555555555555556 * ((uint64_t)(v4 - (_QWORD)v64) >> 3) > v66)
      v66 = 0x5555555555555556 * ((uint64_t)(v4 - (_QWORD)v64) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - (_QWORD)v64) >> 3) >= 0x555555555555555)
      v67 = 0xAAAAAAAAAAAAAAALL;
    else
      v67 = v66;
    v83 = a1 + 1;
    if (v67 > 0xAAAAAAAAAAAAAAALL)
LABEL_84:
      sub_1C4764EE4();
    v68 = (char *)operator new(24 * v67);
    v69 = &v68[24 * v65];
    *((_QWORD *)v69 + 1) = 0;
    *((_QWORD *)v69 + 2) = 0;
    *(_QWORD *)v69 = 0;
    if (v5 == v64)
    {
      v70 = vdupq_n_s64((unint64_t)v5);
      v71 = &v68[24 * v65];
    }
    else
    {
      v71 = &v68[24 * v65];
      do
      {
        v72 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v71 - 24) = v72;
        v71 -= 24;
        *((_QWORD *)v71 + 2) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v64);
      v70 = *v3;
      v4 = v3[1].u64[0];
    }
    v73 = v69 + 24;
    v3->i64[0] = (uint64_t)v71;
    v3->i64[1] = (uint64_t)(v69 + 24);
    v81 = v70;
    v3[1].i64[0] = (uint64_t)&v68[24 * v67];
    v82 = v4;
    v80 = v70.i64[0];
    sub_1C61B83C8((uint64_t)&v80);
    v6 = v73;
  }
  else
  {
    v6 = v5 + 3;
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  v3->i64[1] = (uint64_t)v6;
  v74 = v3->i64[0];
  v9 = (_QWORD *)*a2;
  v7 = a2 + 1;
  v8 = v9;
  if (v9 != v7)
  {
    v75 = v3;
    v76 = v7;
    v79 = v6;
    do
    {
      v10 = v8[4];
      v11 = *(_QWORD *)(v3[1].i64[1] + 8 * v10);
      if (!v11)
      {
        v29 = (char *)*(v6 - 2);
        v28 = *(v6 - 1);
        if ((unint64_t)v29 >= v28)
        {
          v36 = (char *)*(v6 - 3);
          v37 = (v29 - v36) >> 3;
          v38 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 61)
            goto LABEL_83;
          v39 = v28 - (_QWORD)v36;
          if (v39 >> 2 > v38)
            v38 = v39 >> 2;
          if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
            v40 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v40 = v38;
          if (v40)
          {
            if (v40 >> 61)
              goto LABEL_84;
            v41 = (char *)operator new(8 * v40);
            v6 = v79;
          }
          else
          {
            v41 = 0;
          }
          v55 = &v41[8 * v37];
          *(_QWORD *)v55 = v10;
          v30 = v55 + 8;
          while (v29 != v36)
          {
            v56 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *((_QWORD *)v55 - 1) = v56;
            v55 -= 8;
          }
          *(v6 - 3) = v55;
          *(v6 - 2) = v30;
          *(v6 - 1) = &v41[8 * v40];
          if (v36)
          {
            operator delete(v36);
            v6 = v79;
          }
        }
        else
        {
          *(_QWORD *)v29 = v10;
          v30 = v29 + 8;
        }
        *(v6 - 2) = v30;
        goto LABEL_60;
      }
      v12 = v3->i64[0] + 24 * v11;
      v13 = *(char **)v12;
      v14 = *(char **)(v12 + 8);
      v15 = (uint64_t)&v14[-*(_QWORD *)v12];
      if (v15 >= 1)
      {
        v16 = v15 >> 3;
        v18 = (char *)*(v6 - 3);
        v17 = (char *)*(v6 - 2);
        v19 = v17 - v18;
        v20 = &v18[(v17 - v18) & 0xFFFFFFFFFFFFFFF8];
        v21 = *(v6 - 1);
        if (v16 > (v21 - (uint64_t)v17) >> 3)
        {
          v22 = v19 >> 3;
          v23 = (v19 >> 3) + v16;
          if (v23 >> 61)
            goto LABEL_83;
          v24 = v21 - (_QWORD)v18;
          if (v24 >> 2 > v23)
            v23 = v24 >> 2;
          v25 = (unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8;
          v26 = 0x1FFFFFFFFFFFFFFFLL;
          if (!v25)
            v26 = v23;
          v77 = v26;
          if (v26)
          {
            if (v26 >> 61)
              goto LABEL_84;
            v27 = (char *)operator new(8 * v26);
            v6 = v79;
            v20 = &v18[(v17 - v18) & 0xFFFFFFFFFFFFFFF8];
          }
          else
          {
            v27 = 0;
          }
          v47 = &v27[8 * v22];
          v48 = &v47[8 * v16];
          v49 = 8 * v16;
          v50 = v47;
          do
          {
            v51 = *(_QWORD *)v13;
            v13 += 8;
            *(_QWORD *)v50 = v51;
            v50 += 8;
            v49 -= 8;
          }
          while (v49);
          if (v18 != v17)
          {
            v52 = 8 * v22;
            do
            {
              *(_QWORD *)&v27[v52 - 8] = *(_QWORD *)&v18[v52 - 8];
              v52 -= 8;
            }
            while (v52);
            v47 = v27;
          }
          v53 = v17 - v20;
          if (v17 != v20)
          {
            v54 = v48;
            memmove(v48, v20, v17 - v20);
            v48 = v54;
            v6 = v79;
          }
          *(v6 - 3) = v47;
          *(v6 - 2) = &v48[v53];
          *(v6 - 1) = &v27[8 * v77];
          v3 = v75;
          v7 = v76;
          if (!v18)
            goto LABEL_52;
          operator delete(v18);
          goto LABEL_51;
        }
        v31 = v17 - v20;
        v32 = (v17 - v20) >> 3;
        if (v32 >= v16)
        {
          v33 = &v13[8 * v16];
          v35 = (char *)*(v6 - 2);
        }
        else
        {
          v33 = &v13[8 * v32];
          v34 = v14 - v33;
          if (v14 != v33)
          {
            v78 = v20;
            memmove((void *)*(v6 - 2), &v13[8 * v32], v14 - v33);
            v20 = v78;
            v6 = v79;
          }
          v35 = &v17[v34];
          *(v6 - 2) = &v17[v34];
          v7 = v76;
          if (v31 < 1)
            goto LABEL_52;
        }
        v42 = &v35[-8 * v16];
        v43 = v35;
        while (v42 < v17)
        {
          v44 = *(_QWORD *)v42;
          v42 += 8;
          *(_QWORD *)v43 = v44;
          v43 += 8;
        }
        v45 = &v20[8 * v16];
        *(v6 - 2) = v43;
        if (v35 != v45)
        {
          v46 = v20;
          memmove(&v35[-8 * ((v35 - v45) >> 3)], v20, v35 - v45);
          v20 = v46;
          v6 = v79;
        }
        if (v33 != v13)
        {
          memmove(v20, v13, v33 - v13);
LABEL_51:
          v6 = v79;
        }
      }
LABEL_52:
      *(_QWORD *)(v12 + 8) = *(_QWORD *)v12;
LABEL_60:
      v57 = (_QWORD *)v8[1];
      if (v57)
      {
        do
        {
          v58 = v57;
          v57 = (_QWORD *)*v57;
        }
        while (v57);
      }
      else
      {
        do
        {
          v58 = (_QWORD *)v8[2];
          v59 = *v58 == (_QWORD)v8;
          v8 = v58;
        }
        while (!v59);
      }
      v8 = v58;
    }
    while (v58 != v7);
  }
  v60 = (uint64_t *)*(v6 - 3);
  v61 = (uint64_t *)*(v6 - 2);
  if (v60 != v61)
  {
    v62 = v3[1].i64[1];
    do
    {
      v63 = *v60++;
      *(_QWORD *)(v62 + 8 * v63) = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v74) >> 3) - 1;
    }
    while (v60 != v61);
  }
}

void llvm::lowertypetests::ByteArrayBuilder::allocate(unint64_t *a1, _QWORD *a2, int a3, unint64_t *a4, _BYTE *a5)
{
  unsigned int v9;
  uint64_t i;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;

  v9 = 0;
  for (i = 4; i != 11; ++i)
  {
    if (a1[i] < a1[v9 + 3])
      v9 = i - 3;
  }
  v11 = &a1[v9];
  v12 = v11[3];
  *a4 = v12;
  v13 = (v12 + a3);
  v11[3] = v13;
  v14 = a1[1] - *a1;
  if (v13 > v14)
    sub_1C50429D8(a1, v13 - v14);
  *a5 = 1 << v9;
  v17 = (_QWORD *)*a2;
  v16 = a2 + 1;
  v15 = v17;
  if (v17 != v16)
  {
    do
    {
      *(_BYTE *)(*a1 + *a4 + v15[4]) |= *a5;
      v18 = (_QWORD *)v15[1];
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = (_QWORD *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (_QWORD *)v15[2];
          v20 = *v19 == (_QWORD)v15;
          v15 = v19;
        }
        while (!v20);
      }
      v15 = v19;
    }
    while (v19 != v16);
  }
}

uint64_t llvm::lowertypetests::isJumpTableCanonical(llvm::lowertypetests *this, llvm::Function *a2)
{
  int v2;
  uint64_t ModuleFlag;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int v17;
  int v18;
  int i;
  unsigned int v20;
  uint64_t v21;
  _QWORD *v22;
  BOOL v23;
  int v25;
  unint64_t v26;
  int v27;

  v2 = *((_DWORD *)this + 8);
  if ((v2 & 0xF) == 1)
    return 0;
  if (*((_BYTE *)this + 16))
  {
    if (*((_BYTE *)this + 16) == 3 && (*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      return 0;
  }
  else if ((v2 & 0x800000) == 0 && *((llvm::lowertypetests **)this + 9) == (llvm::lowertypetests *)((char *)this + 72))
  {
    return 0;
  }
  ModuleFlag = llvm::Module::getModuleFlag(*((_QWORD *)this + 5), "CFI Canonical Jump Tables", 0x19uLL);
  if (ModuleFlag)
  {
    v6 = *(_QWORD *)(ModuleFlag + 128);
    if (v6)
    {
      v7 = (_QWORD *)(v6 + 24);
      if (*(_DWORD *)(v6 + 32) >= 0x41u)
        v7 = (_QWORD *)*v7;
      if (!*v7)
      {
        v8 = *((_QWORD *)this + 14);
        if (v8)
        {
          if (*(_DWORD *)(v8 + 8))
          {
            v9 = *(_QWORD *)(v8 + 40);
            if (v9)
            {
              v10 = *(_DWORD *)(v9 + 40);
              if (v10)
              {
                v11 = *(_QWORD *)(v9 + 24);
                v12 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
                v13 = &unk_1ED7EA000;
                if ((v12 & 1) == 0)
                {
                  v27 = v10;
                  v25 = __cxa_guard_acquire(&qword_1ED7EAC88);
                  v13 = &unk_1ED7EA000;
                  v10 = v27;
                  if (v25)
                  {
                    v26 = llvm::hashing::detail::fixed_seed_override;
                    if (!llvm::hashing::detail::fixed_seed_override)
                      v26 = 0xFF51AFD7ED558CCDLL;
                    qword_1ED7EAC80 = v26;
                    __cxa_guard_release(&qword_1ED7EAC88);
                    v13 = (_QWORD *)&unk_1ED7EA000;
                    v10 = v27;
                  }
                }
                v14 = v13[400];
                v15 = __ROR8__(v14 ^ 0x990375707670F1A3, 30);
                v16 = 0x9DDFEA08EB382D69
                    * ((v14 - 0x530F61B3E8DBA9F3) ^ ((0x9DDFEA08EB382D69
                                                      * ((v15 - 0x1E03146744F2E975) ^ (v14 - 0x530F61B3E8DBA9F3))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v15 - 0x1E03146744F2E975) ^ (v14 - 0x530F61B3E8DBA9F3))));
                v17 = -348639895 * ((v16 >> 47) ^ v16);
                v18 = v10 - 1;
                for (i = 1; ; ++i)
                {
                  v20 = v17 & v18;
                  v21 = v11 + 24 * v20;
                  v22 = *(_QWORD **)v21;
                  if (*(_QWORD *)v21 == -1)
                  {
                    if ("cfi-canonical-jump-table" == (char *)-1)
                      return 1;
                  }
                  else if (v22 == (_QWORD *)-2)
                  {
                    if ("cfi-canonical-jump-table" == (char *)-2)
                      return 1;
                  }
                  else if (*(_QWORD *)(v21 + 8) == 24)
                  {
                    v23 = *v22 == 0x6F6E61632D696663 && v22[1] == 0x756A2D6C6163696ELL;
                    if (v23 && v22[2] == 0x656C6261742D706DLL)
                      return 1;
                  }
                  if (v22 == (_QWORD *)-1)
                    return 0;
                  v17 = i + v20;
                }
              }
            }
          }
        }
        return 0;
      }
    }
  }
  return 1;
}

void llvm::initializeLowerTypeTestsPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831ED8);
  if (v2 != -1)
  {
    v5[0] = sub_1C57087C0;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831ED8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C57087C0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Lower type metadata";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "lowertypetests";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1ED80CA18;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C570E358;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5708850(llvm::LLVMContext **a1)
{
  uint64_t v2;
  std::string *v3;
  void *v4;
  char v5;
  uint64_t v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t (***v12)();
  uint64_t v13;
  llvm::LLVMContext **v14;
  llvm::LLVMContext **v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  std::string *v26;
  void *v27;
  char v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  const std::error_category *v32;
  _QWORD *v33;
  uint64_t (***v34)();
  uint64_t v35;
  uint64_t v37;
  void *__p;
  _BYTE v39[15];
  char v40;
  uint64_t (**v41)();
  int v42;
  uint64_t (***v43)();
  _QWORD v44[2];
  void *v45;
  _BYTE v46[15];
  char v47;
  uint64_t (**v48)();
  int v49;
  uint64_t (***v50)();
  std::string v51;
  int v52;
  void *v53;
  uint64_t v54;
  _OWORD v55[3];
  __int128 v56;
  __int128 v57;
  unsigned int v58;
  void *v59;
  void *v60;
  uint64_t *v61;
  const std::error_category *v62;
  _QWORD v63[2];
  _QWORD *v64;
  _QWORD v65[7];
  _QWORD v66[3];
  _QWORD v67[3];
  _QWORD v68[3];
  char v69;
  _QWORD *v70;
  _QWORD v71[3];
  _QWORD v72[3];
  _QWORD v73[4];
  _QWORD v74[6];
  uint64_t v75;
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  memset(v65, 0, 32);
  v64 = v65;
  v65[4] = 0x2800000000;
  v66[0] = 0;
  v65[6] = v66;
  v67[1] = 0;
  v67[0] = 0;
  v66[1] = 0;
  v66[2] = v67;
  memset(v68, 0, sizeof(v68));
  v67[2] = v68;
  v69 = 0;
  v71[0] = 0;
  v70 = v71;
  v72[0] = 0;
  v72[1] = 0;
  v71[1] = 0;
  v71[2] = v72;
  v72[2] = v73;
  v73[0] = 0;
  v73[1] = 0;
  v73[2] = v74;
  v73[3] = 0x400000000;
  v74[4] = &v75;
  v74[5] = 0;
  v75 = 0;
  v2 = qword_1ED80CC28;
  if (byte_1ED80CC37 >= 0)
    v2 = byte_1ED80CC37 & 0x7F;
  v76 = xmmword_1C64169E0;
  if (v2)
  {
    std::operator+<char>();
    v3 = std::string::append(&v51, ": ");
    v4 = (void *)v3->__r_.__value_.__r.__words[0];
    v63[0] = v3->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v63 + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
    v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    __p = v4;
    *(_QWORD *)v39 = v63[0];
    *(_QWORD *)&v39[7] = *(_QWORD *)((char *)v63 + 7);
    v40 = v5;
    v63[0] = 0;
    *(_QWORD *)((char *)v63 + 7) = 0;
    v41 = &off_1E817B350;
    v42 = 1;
    v43 = &v41;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    LOWORD(v53) = 260;
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&qword_1ED80CC20;
    sub_1C5E1F6CC((unsigned __int8 *)&v51, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)&v45);
    sub_1C570E564((uint64_t)&v45, (uint64_t)&v61);
    v6 = 0;
    if ((v62 & 1) != 0)
    {
      v6 = (uint64_t)v61;
      v61 = 0;
    }
    v37 = v6;
    sub_1C570E600((uint64_t)&__p, &v37);
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
    v7 = v61;
    v61 = 0;
    if ((v46[8] & 1) == 0)
    {
      v8 = v45;
      v45 = 0;
      if (v8)
        (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
    }
    llvm::yaml::Input::Input((uint64_t)&v51, v7[1], v7[2] - v7[1], 0, 0, 0);
    llvm::yaml::Input::setCurrentDocument((llvm::yaml::Stream **)&v51);
    (*(void (**)(std::string *))(v51.__r_.__value_.__r.__words[0] + 104))(&v51);
    sub_1C6299794((uint64_t *)&v51, (uint64_t)&v64);
    (*(void (**)(std::string *))(v51.__r_.__value_.__r.__words[0] + 112))(&v51);
    v9 = *((_QWORD *)&v56 + 1);
    if (DWORD2(v56))
    {
      v10 = v57;
      v11 = (_QWORD *)operator new();
      *v11 = &off_1E81A0D28;
      v11[1] = v9;
      v11[2] = v10;
    }
    else
    {
      v11 = 0;
    }
    v45 = v11;
    sub_1C570E600((uint64_t)&__p, (uint64_t *)&v45);
    if (v45)
      (*(void (**)(void *))(*(_QWORD *)v45 + 8))(v45);
    llvm::yaml::Input::~Input((llvm::yaml::Input *)&v51);
    (*(void (**)(uint64_t *))(*v7 + 8))(v7);
    v12 = v43;
    if (v43 == &v41)
    {
      v13 = 4;
      v12 = &v41;
    }
    else
    {
      if (!v43)
        goto LABEL_22;
      v13 = 5;
    }
    (*v12)[v13]();
LABEL_22:
    if (v40 < 0)
      operator delete(__p);
  }
  if (dword_1ED80CDF0 == 2)
    v14 = (llvm::LLVMContext **)&v64;
  else
    v14 = 0;
  if (dword_1ED80CDF0 == 1)
    v15 = (llvm::LLVMContext **)&v64;
  else
    v15 = 0;
  sub_1C5708E90((llvm::LLVMContext ***)&v51, a1, v14, v15, 0);
  v16 = sub_1C5708FAC((uint64_t *)&v51);
  v17 = v59;
  if (v59)
  {
    v18 = v59;
    if (v60 != v59)
    {
      v19 = (uint64_t)v60 - 56;
      do
      {
        sub_1C47655E8(v19, *(_QWORD **)(v19 + 8));
        v20 = v19 == (_QWORD)v17;
        v19 -= 56;
      }
      while (!v20);
      v18 = v59;
    }
    v60 = v17;
    operator delete(v18);
  }
  v21 = v57;
  if (v58)
  {
    v22 = 40 * v58;
    v23 = (_QWORD *)(v57 + 16);
    do
    {
      if ((*(v23 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v24 = (void *)*(v23 - 1);
        if (v24)
        {
          *v23 = v24;
          operator delete(v24);
        }
      }
      v23 += 5;
      v22 -= 40;
    }
    while (v22);
    v21 = v57;
  }
  MEMORY[0x1CAA32FB4](v21, 8);
  v25 = qword_1ED80CD10;
  if (byte_1ED80CD1F >= 0)
    v25 = byte_1ED80CD1F & 0x7F;
  if (v25)
  {
    std::operator+<char>();
    v26 = std::string::append(&v51, ": ");
    v27 = (void *)v26->__r_.__value_.__r.__words[0];
    v44[0] = v26->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v44 + 7) = *(std::string::size_type *)((char *)&v26->__r_.__value_.__r.__words[1] + 7);
    v28 = HIBYTE(v26->__r_.__value_.__r.__words[2]);
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    v45 = v27;
    *(_QWORD *)v46 = v44[0];
    *(_QWORD *)&v46[7] = *(_QWORD *)((char *)v44 + 7);
    v47 = v28;
    v48 = &off_1E817B350;
    v49 = 1;
    v50 = &v48;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    LODWORD(v61) = 0;
    v62 = std::system_category();
    if (byte_1ED80CD1F >= 0)
      v29 = byte_1ED80CD1F & 0x7F;
    else
      v29 = qword_1ED80CD10;
    if (byte_1ED80CD1F >= 0)
      v30 = &qword_1ED80CD08;
    else
      v30 = (uint64_t *)qword_1ED80CD08;
    llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)&__p, v30, v29, (uint64_t)&v61, 3);
    v31 = v61;
    if ((_DWORD)v61)
    {
      v32 = v62;
      v33 = (_QWORD *)operator new();
      *v33 = &off_1E81A0D28;
      v33[1] = v31;
      v33[2] = v32;
    }
    else
    {
      v33 = 0;
    }
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
    sub_1C570E600((uint64_t)&v45, (uint64_t *)&v51);
    if (v51.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v51.__r_.__value_.__l.__data_ + 8))(v51.__r_.__value_.__r.__words[0]);
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E81A6C18;
    v51.__r_.__value_.__l.__size_ = 0;
    v51.__r_.__value_.__r.__words[2] = (std::string::size_type)&__p;
    v52 = 70;
    v53 = v55;
    v54 = 0x800000000;
    v55[2] = 0u;
    v56 = 0u;
    v57 = 0u;
    sub_1C62996A4((llvm::yaml::Output *)&v51, (uint64_t)&v64);
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E81A6C18;
    if (v53 != v55)
      free(v53);
    llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)&__p);
    v34 = v50;
    if (v50 == &v48)
    {
      v35 = 4;
      v34 = &v48;
    }
    else
    {
      if (!v50)
        goto LABEL_66;
      v35 = 5;
    }
    (*v34)[v35]();
LABEL_66:
    if (v47 < 0)
      operator delete(v45);
  }
  sub_1C61A8910((uint64_t)&v64);
  return v16;
}

llvm::LLVMContext ***sub_1C5708E90(llvm::LLVMContext ***a1, llvm::LLVMContext **a2, llvm::LLVMContext **a3, llvm::LLVMContext **a4, char a5)
{
  uint64_t v8;
  llvm::LLVMContext **v9;
  llvm::PointerType *v10;
  llvm::LLVMContext **v11;
  llvm::LLVMContext *v12;
  int v13;
  _QWORD **v15;
  __int16 v16;
  void *__p;
  char v18;
  int v19;
  int v20;
  int v21;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  if (byte_1ED80CB60)
    a5 = 1;
  *((_BYTE *)a1 + 24) = a5;
  v8 = *(_QWORD *)*a2;
  a1[5] = (llvm::LLVMContext **)(v8 + 1888);
  a1[6] = (llvm::LLVMContext **)(v8 + 1912);
  a1[7] = (llvm::LLVMContext **)llvm::PointerType::get((llvm::PointerType *)(v8 + 1912), 0);
  llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)**a1 + 1912), 0);
  a1[8] = v9;
  v10 = (llvm::PointerType *)(*(_QWORD *)**a1 + 1960);
  a1[9] = (llvm::LLVMContext **)v10;
  a1[10] = (llvm::LLVMContext **)llvm::PointerType::get(v10, 0);
  v11 = *a1;
  v12 = **a1;
  a1[11] = (llvm::LLVMContext **)(*(_QWORD *)v12 + 1984);
  a1[12] = (llvm::LLVMContext **)llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(v11 + 34), v12, 0);
  a1[13] = (llvm::LLVMContext **)1;
  a1[14] = 0;
  a1[15] = 0;
  *((_DWORD *)a1 + 32) = 0;
  *(_OWORD *)(a1 + 17) = 0u;
  *(_OWORD *)(a1 + 19) = 0u;
  v16 = 260;
  v15 = (_QWORD **)(a2 + 27);
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v15);
  v13 = v20;
  *((_DWORD *)a1 + 7) = v19;
  *((_DWORD *)a1 + 8) = v13;
  *((_DWORD *)a1 + 9) = v21;
  if (v18 < 0)
    operator delete(__p);
  return a1;
}

uint64_t sub_1C5708FAC(uint64_t *a1)
{
  unsigned int *v1;
  uint64_t *v2;
  uint64_t v3;
  _BOOL4 v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v23;
  int v24;
  uint64_t v25;
  llvm::PHINode *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t ***v32;
  _QWORD *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ****v39;
  uint64_t ***v40;
  int v41;
  int v42;
  unint64_t *v43;
  size_t v44;
  const void *v45;
  unint64_t v46;
  __int128 *p_dst;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t ****v59;
  uint64_t ***v60;
  int v61;
  int v62;
  unint64_t *v63;
  size_t v64;
  const void *v65;
  unint64_t v66;
  __int128 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t NamedMetadata;
  uint64_t v87;
  uint64_t v88;
  uint64_t i;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  size_t v93;
  llvm::UndefValue *AggregateElement;
  BOOL v95;
  int *v96;
  int *v97;
  int *v98;
  int v99;
  int v100;
  size_t v101;
  int *v102;
  void *v103;
  llvm::ModuleSummaryIndex *v104;
  unsigned int v105;
  void *v106;
  char v107;
  _QWORD *v108;
  _OWORD *v109;
  int v110;
  unsigned int v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  unint64_t v116;
  BOOL v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char v124;
  uint64_t v125;
  __int16 v126;
  BOOL v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  llvm::GlobalAlias **v135;
  llvm::GlobalAlias **v136;
  llvm::GlobalAlias *v137;
  uint64_t v138;
  llvm::ValueAsMetadata *v139;
  uint64_t v140;
  uint64_t v141;
  _BOOL4 v142;
  const llvm::APInt *v143;
  BOOL v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t *v147;
  uint64_t v148;
  llvm::Value *v149;
  uint64_t v150;
  _QWORD *v151;
  llvm::ConstantInt *v152;
  unsigned int v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _QWORD *v159;
  int v160;
  int32x2_t **v161;
  int32x2_t *v162;
  __int32 v163;
  int32x2_t v164;
  __int32 v165;
  unsigned int v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  unsigned int v170;
  char *v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  unsigned __int8 *v175;
  uint64_t v176;
  unsigned int v177;
  unint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  unsigned __int8 *v181;
  unint64_t v182;
  int v183;
  uint64_t ***v184;
  llvm::PointerType *v185;
  uint64_t v186;
  llvm::Type *v187;
  char *v188;
  uint64_t ***v189;
  llvm::Type *v190;
  int v191;
  int v192;
  int v193;
  unint64_t v194;
  unint64_t j;
  unint64_t *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t ****v202;
  uint64_t ***v203;
  int v204;
  int v205;
  uint64_t v206;
  int v207;
  int32x2_t **v208;
  int32x2_t *v209;
  __int32 v210;
  int32x2_t v211;
  __int32 v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t ***v215;
  int v216;
  unsigned int v217;
  char *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  unsigned __int8 *v222;
  uint64_t ***v223;
  uint64_t **v224;
  char *v225;
  uint64_t **v226;
  uint64_t v227;
  _QWORD *v228;
  int v229;
  int32x2_t **v230;
  int32x2_t *v231;
  __int32 v232;
  int32x2_t v233;
  __int32 v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t ***v237;
  int v238;
  unsigned int v239;
  char *v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  unsigned __int8 *v244;
  uint64_t *v245;
  int v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  BOOL v252;
  uint64_t v253;
  uint64_t v254;
  BOOL v255;
  uint64_t ***v256;
  llvm::Function *v257;
  char v258;
  int isJumpTableCanonical;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t ****v264;
  uint64_t ***v265;
  int v266;
  int v267;
  uint64_t ***v268;
  uint64_t **v269;
  char *v270;
  uint64_t **v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t ****v278;
  uint64_t ***v279;
  int v280;
  int v281;
  uint64_t ***v282;
  uint64_t **v283;
  char *v284;
  uint64_t **v285;
  int v286;
  _QWORD *v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  unint64_t v292;
  _QWORD *v293;
  uint64_t v294;
  unsigned int v295;
  _QWORD *v296;
  _QWORD ***v297;
  _QWORD *v298;
  int v299;
  BOOL v300;
  unsigned int v301;
  _QWORD *v302;
  char *v303;
  char *v304;
  uint64_t v305;
  int v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  BOOL v310;
  uint64_t v311;
  unsigned int v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t *v315;
  int v316;
  BOOL v317;
  unsigned int v318;
  uint64_t *v319;
  unint64_t v320;
  unsigned int *v321;
  _QWORD *v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  unint64_t v326;
  char *v327;
  unint64_t *v328;
  unint64_t v329;
  uint64_t v330;
  uint64_t k;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  unsigned int **v336;
  unsigned int **v337;
  unint64_t v338;
  unsigned int *v339;
  unsigned int *v340;
  uint64_t v341;
  unint64_t v342;
  uint64_t v343;
  unint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  int v350;
  int v351;
  int v352;
  int v353;
  uint64_t v354;
  char *v355;
  char *v356;
  char *v357;
  unsigned int v358;
  uint64_t v359;
  int v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t *v365;
  llvm::DataLayout *v366;
  uint64_t v367;
  uint64_t v368;
  int v369;
  unsigned int v371;
  _QWORD *v372;
  uint64_t v373;
  _QWORD *v374;
  int v375;
  BOOL v376;
  unsigned int v377;
  _QWORD *v378;
  uint64_t v379;
  uint64_t v380;
  unint64_t v381;
  unint64_t v382;
  char *v383;
  char *v384;
  char *v385;
  uint64_t v386;
  uint64_t **v387;
  uint64_t v388;
  unint64_t v389;
  uint64_t v390;
  unint64_t v391;
  uint64_t v392;
  _QWORD *v393;
  uint64_t v394;
  char *v395;
  uint64_t v396;
  uint64_t **v397;
  uint64_t v398;
  unint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  _QWORD *v403;
  uint64_t *v404;
  char *v405;
  unint64_t v406;
  uint64_t *v407;
  unint64_t v408;
  uint64_t *v409;
  unsigned int v410;
  unint64_t v411;
  uint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unsigned int v415;
  uint64_t v417;
  unint64_t v418;
  unint64_t v419;
  char *v420;
  char *v421;
  uint64_t *n;
  uint64_t *v423;
  uint64_t *v424;
  unint64_t v425;
  uint64_t v426;
  __n128 v427;
  uint64_t *v428;
  uint64_t *v429;
  unint64_t *v430;
  unint64_t *v431;
  uint64_t *v432;
  uint64_t *v433;
  uint64_t *v434;
  uint64_t *v435;
  unint64_t v436;
  uint64_t v437;
  unint64_t v438;
  unint64_t v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t v442;
  uint64_t *v443;
  unint64_t v444;
  unint64_t *v445;
  char *v446;
  uint64_t v447;
  unint64_t v448;
  unint64_t v449;
  uint64_t *v450;
  uint64_t *v451;
  unint64_t *v452;
  char *v453;
  uint64_t v454;
  unint64_t v455;
  unint64_t v456;
  uint64_t *v457;
  unint64_t *v458;
  char *v459;
  uint64_t *v460;
  uint64_t v461;
  unint64_t *v462;
  unint64_t *v463;
  unint64_t *v464;
  unint64_t v465;
  uint64_t *v466;
  uint64_t *v467;
  uint64_t v468;
  unint64_t *v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  unint64_t v473;
  uint64_t v474;
  uint64_t v475;
  unsigned int v476;
  unsigned int v477;
  unint64_t *v478;
  uint64_t v479;
  int v480;
  unsigned int v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t v484;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t **v490;
  int v491;
  int v492;
  uint64_t *v493;
  uint64_t *v494;
  uint64_t *v495;
  unint64_t v496;
  uint64_t *v497;
  const std::nothrow_t *v498;
  uint64_t *v499;
  uint64_t *v500;
  unint64_t v501;
  uint64_t *v502;
  BOOL v503;
  uint64_t v504;
  _QWORD *v505;
  _QWORD *v506;
  _QWORD *v507;
  unint64_t v508;
  unint64_t v509;
  unint64_t v510;
  char *v511;
  char *v512;
  char *v513;
  uint64_t v514;
  char *v515;
  uint64_t *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  _QWORD *v520;
  _QWORD *v521;
  uint64_t v522;
  uint64_t *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t *v526;
  uint64_t *v527;
  llvm::PointerType *v528;
  _QWORD *v529;
  _QWORD *v530;
  unint64_t *v531;
  _BOOL4 v532;
  char *v533;
  char *v534;
  uint64_t v535;
  uint64_t v536;
  unint64_t *v537;
  _QWORD *v538;
  _QWORD *v539;
  unint64_t v540;
  uint64_t v541;
  unsigned int v542;
  uint64_t v543;
  void **v544;
  uint64_t v545;
  llvm::Function *v546;
  const llvm::APInt *v547;
  uint64_t *v548;
  uint64_t v549;
  uint64_t v550;
  llvm::ConstantInt *v551;
  unint64_t v552;
  unint64_t v553;
  llvm::Value *v554;
  llvm::ValueHandleBase *v555;
  llvm::MDNode *Impl;
  uint64_t v557;
  uint64_t v558;
  uint64_t *v559;
  uint64_t v560;
  _QWORD *v561;
  _QWORD *v562;
  void *v563;
  _QWORD *v564;
  int v565;
  int v566;
  unsigned int v567;
  uint64_t v568;
  unsigned int v569;
  llvm::PointerType *v570;
  uint64_t v571;
  llvm::Type *v572;
  _DWORD *v573;
  llvm::ConstantExpr *v574;
  llvm::ArrayType *v575;
  unsigned int v576;
  llvm::ArrayType *v577;
  llvm::PointerType *v578;
  llvm::Constant *v579;
  char *v580;
  uint64_t *v581;
  llvm::Type *v582;
  const llvm::APInt *v583;
  int v584;
  char *v585;
  unsigned int v586;
  unsigned int v587;
  uint64_t *v588;
  uint64_t *v589;
  llvm::AttributeList *v590;
  char *v591;
  size_t v592;
  char *v593;
  size_t v594;
  uint64_t v595;
  int v596;
  uint64_t v597;
  llvm::PoisonValue **v598;
  int v599;
  uint64_t v600;
  llvm::ConstantInt *v601;
  const llvm::APInt *v602;
  llvm::ValueHandleBase *v603;
  uint64_t v604;
  llvm::ConstantInt *v605;
  unint64_t v606;
  unint64_t v607;
  llvm::ValueHandleBase *v608;
  llvm::PoisonValue **v609;
  int v610;
  char v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  llvm::PoisonValue ***v616;
  llvm::PoisonValue **v617;
  int v618;
  int v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  llvm::PoisonValue ***v625;
  llvm::PoisonValue **v626;
  int v627;
  int v628;
  llvm::PoisonValue **v629;
  llvm::PoisonValue *v630;
  char *v631;
  llvm::PoisonValue *v632;
  llvm::PointerType *v633;
  llvm::PoisonValue **v634;
  llvm::GlobalValue *v635;
  llvm::GlobalValue *v636;
  uint64_t **v637;
  int v638;
  unsigned int v639;
  uint64_t v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  llvm::PoisonValue ***v645;
  llvm::PoisonValue **v646;
  int v647;
  int v648;
  unint64_t *v649;
  const void *v650;
  size_t v651;
  unint64_t v652;
  llvm::PoisonValue **v653;
  __int128 *v654;
  uint64_t v655;
  uint64_t v656;
  unint64_t v657;
  llvm::PointerType *v658;
  char v659;
  uint64_t ***v660;
  uint64_t ***v661;
  int v662;
  int v663;
  unsigned int v664;
  uint64_t v665;
  uint64_t v666;
  uint64_t v667;
  uint64_t v668;
  uint64_t ****v669;
  uint64_t ***v670;
  int v671;
  int v672;
  uint64_t *v673;
  uint64_t v674;
  unint64_t *v675;
  const void *v676;
  size_t v677;
  unint64_t v678;
  __int128 *v679;
  uint64_t v680;
  uint64_t v681;
  unint64_t v682;
  uint64_t v683;
  unsigned int v684;
  unsigned int v685;
  uint64_t v686;
  unint64_t v687;
  _DWORD *v688;
  llvm::raw_ostream *v689;
  _QWORD *v690;
  uint64_t v691;
  void **v692;
  const char *v693;
  size_t v694;
  uint64_t v695;
  uint64_t v696;
  _QWORD *v697;
  _DWORD *v698;
  _WORD *v699;
  const char *v700;
  size_t v701;
  _DWORD *v702;
  llvm::raw_ostream *v703;
  _BYTE *v704;
  const char *v705;
  size_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t **v709;
  char *v710;
  char *v711;
  int v712;
  BOOL v713;
  char *v714;
  uint64_t v715;
  uint64_t v716;
  int v717;
  uint64_t v718;
  unsigned __int8 v719;
  unint64_t v720;
  unsigned int v721;
  int ii;
  unsigned int v723;
  uint64_t v724;
  _QWORD *v725;
  uint64_t v727;
  uint64_t v728;
  int v729;
  uint64_t **v730;
  uint64_t *v731;
  uint64_t v733;
  uint64_t v734;
  unsigned int v736;
  unint64_t v737;
  _QWORD *v738;
  uint64_t **v739;
  unsigned int v740;
  uint64_t *v741;
  uint64_t v742;
  uint64_t v743;
  unsigned int v744;
  llvm::PointerType *v745;
  char v746;
  uint64_t v747;
  uint64_t v748;
  char v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t **v753;
  uint64_t **v754;
  uint64_t v755;
  uint64_t v756;
  unint64_t v757;
  unint64_t v758;
  char *v759;
  char *v760;
  uint64_t v761;
  unsigned __int8 v762;
  int v763;
  uint64_t v764;
  llvm::ConstantAggregateZero *v765;
  llvm::Type *v766;
  _QWORD *v767;
  _QWORD *v768;
  char *v769;
  uint64_t v770;
  unint64_t v771;
  unint64_t v772;
  char *v773;
  char *v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  unint64_t v778;
  unint64_t v779;
  char *v780;
  char *v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  int v786;
  BOOL v787;
  const char *v788;
  char v789;
  char v790;
  unint64_t v791;
  unint64_t v792;
  unint64_t v793;
  unint64_t v794;
  unint64_t v795;
  uint64_t v796;
  llvm::ConstantAggregateZero *TypeForElements;
  llvm::UndefValue *v798;
  char *v799;
  uint64_t v800;
  llvm::PointerType *v801;
  uint64_t *v802;
  const llvm::APInt *v803;
  unsigned int v804;
  uint64_t v805;
  unsigned int v806;
  llvm::Value *v807;
  uint64_t v808;
  llvm::ConstantInt *v809;
  const llvm::APInt *v810;
  llvm::ValueHandleBase *v811;
  uint64_t v812;
  llvm::ConstantInt *v813;
  unint64_t v814;
  int v815;
  llvm::ValueHandleBase *v816;
  uint64_t ElementPtr;
  llvm::PointerType *v818;
  char v819;
  llvm::Value *v820;
  llvm::Value *v821;
  int v822;
  int v823;
  unsigned int v824;
  uint64_t v825;
  _QWORD *v826;
  const std::nothrow_t *v827;
  unint64_t v828;
  void *v829;
  void *v830;
  _QWORD *v831;
  uint64_t v832;
  unint64_t v833;
  size_t v834;
  void *v835;
  uint64_t v836;
  unsigned int v837;
  uint64_t *v838;
  _QWORD *v839;
  const llvm::APInt *v840;
  llvm::GlobalVariable **v841;
  llvm::ValueAsMetadata *v842;
  llvm::ValueAsMetadata *v843;
  uint64_t v844;
  char v845;
  llvm::ConstantInt *v846;
  unint64_t v847;
  char v848;
  llvm::ValueHandleBase *v849;
  llvm::UndefValue *v850;
  _BYTE *v851;
  _BYTE *v852;
  _QWORD *v853;
  llvm::Type *v854;
  llvm::ConstantAggregateZero *v855;
  llvm::Value **v856;
  char *v857;
  uint64_t *v858;
  uint64_t v859;
  llvm::PointerType *v860;
  const llvm::APInt *v861;
  _QWORD *v862;
  uint64_t *v863;
  uint64_t v864;
  unsigned int v865;
  uint64_t v866;
  llvm::ConstantInt *v867;
  const llvm::APInt *v868;
  llvm::ValueHandleBase *v869;
  llvm::ConstantInt **v870;
  uint64_t v871;
  llvm::ConstantInt *v872;
  unint64_t v873;
  unint64_t v874;
  llvm::ValueHandleBase *v875;
  uint64_t v876;
  llvm::PointerType *v877;
  llvm::Value *v878;
  _QWORD *v879;
  _QWORD *v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  uint64_t v885;
  uint64_t v886;
  _QWORD *v887;
  _QWORD *v888;
  unint64_t v889;
  unsigned __int8 *v890;
  unint64_t v891;
  _QWORD *v892;
  unsigned __int8 *v893;
  unint64_t v894;
  unint64_t v895;
  uint64_t v896;
  int v897;
  _QWORD *v898;
  uint64_t v899;
  uint64_t v900;
  llvm::UndefValue *v901;
  BOOL v902;
  uint64_t v903;
  int *v904;
  int *v905;
  int *v906;
  int v907;
  llvm::UndefValue *v908;
  BOOL v909;
  char *v910;
  uint64_t *v911;
  uint64_t *v912;
  uint64_t v913;
  uint64_t v914;
  llvm::GlobalValue *v915;
  const llvm::Twine *v916;
  llvm::GlobalValue *v917;
  llvm::GlobalValue *v918;
  int v919;
  unsigned int v920;
  int v921;
  llvm::Value *v922;
  llvm::ValueAsMetadata *v923;
  _QWORD *v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  uint64_t v928;
  uint64_t v929;
  uint64_t v930;
  int v931;
  uint64_t v932;
  _QWORD *v933;
  _QWORD *v934;
  void (**v935)(llvm::raw_ostream *__hidden);
  uint64_t v936;
  uint64_t v937;
  uint64_t *v938;
  uint64_t v939;
  _QWORD *v940;
  _QWORD *v941;
  const std::string::value_type *v942;
  std::string::size_type v943;
  uint64_t *v944;
  uint64_t v945;
  _QWORD *v946;
  void *v947;
  uint64_t *v948;
  uint64_t *v949;
  uint64_t v950;
  uint64_t *v951;
  uint64_t v952;
  uint64_t v953;
  size_t v954;
  _QWORD *v955;
  uint64_t *v956;
  _QWORD *v957;
  _QWORD *v958;
  _QWORD *v959;
  uint64_t *v960;
  uint64_t *m;
  uint64_t v962;
  int v963;
  BOOL v964;
  uint64_t v965;
  _QWORD *v966;
  _QWORD *v967;
  unint64_t v968;
  uint64_t *v969;
  uint64_t v970;
  unint64_t v971;
  uint64_t v972;
  _QWORD *v973;
  _QWORD *v974;
  char *v975;
  _DWORD *v976;
  char *v977;
  char *v978;
  uint64_t *v979;
  unint64_t v980;
  _BOOL4 v981;
  uint64_t v982;
  uint64_t *v983;
  uint64_t *v984;
  _QWORD *v985;
  unint64_t *v986;
  uint64_t v987;
  uint64_t v988;
  char *v989;
  uint64_t ModuleFlag;
  uint64_t *PointerCast;
  uint64_t v992;
  _BOOL4 __sz;
  size_t __sza;
  size_t __szb;
  llvm::GetElementPtrInst *__szc;
  int __szd;
  uint64_t v998;
  uint64_t *v999;
  unint64_t v1000;
  char *v1001;
  llvm::PointerType *v1002;
  uint64_t v1003;
  uint64_t v1004;
  uint64_t v1005;
  unint64_t *v1006;
  unint64_t v1007;
  unint64_t v1008;
  uint64_t v1009;
  llvm::GetElementPtrInst **v1010;
  uint64_t *v1011;
  uint64_t *v1012;
  uint64_t *v1013;
  uint64_t v1014[3];
  _QWORD v1015[2];
  int v1016;
  uint64_t v1017;
  uint64_t v1018;
  unsigned int v1019;
  uint64_t *v1020;
  uint64_t v1021;
  unsigned int v1022;
  uint64_t *v1023;
  _QWORD *v1024;
  uint64_t v1025;
  int64x2_t v1026;
  void *v1027;
  void *v1028;
  _QWORD v1029[2];
  int v1030;
  void *v1031;
  _QWORD *v1032;
  unint64_t v1033;
  _QWORD v1034[2];
  int v1035;
  _QWORD v1036[2];
  int v1037;
  char v1038[32];
  __int16 v1039;
  void (**v1040)(llvm::raw_ostream *__hidden);
  uint64_t v1041;
  uint64_t v1042;
  uint64_t v1043;
  void *v1044;
  char v1045;
  uint64_t v1046;
  int v1047;
  void **v1048;
  void *v1049;
  uint64_t v1050;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  char v1054;
  uint64_t v1055;
  int v1056;
  void **v1057;
  void *v1058[2];
  uint64_t v1059;
  void *v1060[2];
  uint64_t v1061;
  void *v1062;
  uint64_t v1063;
  _BYTE v1064[16];
  void *__p;
  llvm::GlobalAlias **v1066;
  _QWORD *v1067;
  uint64_t v1068;
  _QWORD v1069[6];
  _QWORD v1070[2];
  __int128 __dst;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  __int128 v1075;
  uint64_t v1076;
  __int128 v1077;
  _QWORD v1078[2];
  __int16 v1079;
  void *v1080;
  uint64_t v1081;
  _QWORD v1082[2];
  __int16 v1083;
  uint64_t **v1084;
  _QWORD **v1085;
  uint64_t v1086;
  void **v1087;
  _QWORD *v1088;
  uint64_t v1089;
  int v1090;
  __int16 v1091;
  char v1092;
  uint64_t v1093;
  uint64_t v1094;
  void *v1095;
  _QWORD v1096[4];

  v2 = a1;
  v1096[1] = *MEMORY[0x1E0C80C00];
  v3 = sub_1C4FB7E80(*(uint64_t **)(*a1 + 112), "llvm.type.test", 0xEuLL);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16))
      v5 = 0;
    else
      v5 = (_QWORD *)v3;
    if (*((_BYTE *)v2 + 24))
      v127 = *(_BYTE *)(v3 + 16) == 0;
    else
      v127 = 0;
    if (v127)
    {
      v138 = v5[1];
      while (v138)
      {
        v139 = *(llvm::ValueAsMetadata **)(v138 + 24);
        v138 = *(_QWORD *)(v138 + 8);
        v140 = *((_QWORD *)v139 + 1);
        if (v140)
        {
          do
          {
            v141 = *(_QWORD *)(v140 + 24);
            v140 = *(_QWORD *)(v140 + 8);
            v142 = sub_1C4D9F8B4(v141);
            if (v141)
              v144 = !v142;
            else
              v144 = 1;
            if (!v144)
            {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v141 + 40) + 40, (uint64_t ***)v141);
              v145 = *(_QWORD *)(v141 + 24);
              v146 = *(_QWORD **)(v141 + 32);
              *v146 = v145;
              *(_QWORD *)(v145 + 8) = v146;
              *(_QWORD *)(v141 + 24) = 0;
              *(_QWORD *)(v141 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v141);
            }
          }
          while (v140);
          if (*((_QWORD *)v139 + 1))
          {
            v147 = *(uint64_t **)*v2;
            v148 = *v147;
            v149 = *(llvm::Value **)(*v147 + 1560);
            if (!v149)
            {
              v152 = *(llvm::ConstantInt **)(v148 + 1888);
              v153 = *(_DWORD *)(v148 + 1896);
              DWORD2(__dst) = v153 >> 8;
              if (v153 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 1, 0);
              }
              else
              {
                if (v153 <= 0xFF)
                  v154 = 0;
                else
                  v154 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v153);
                *(_QWORD *)&__dst = v154 & 1;
              }
              v149 = llvm::ConstantInt::get(v152, (llvm::LLVMContext *)&__dst, v143);
              if (DWORD2(__dst) >= 0x41 && (_QWORD)__dst)
                MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
              *(_QWORD *)(v148 + 1560) = v149;
            }
            llvm::Value::doRAUW(v139, v149, (llvm::Value *)1);
          }
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v139 + 5) + 40, (uint64_t ***)v139);
        v150 = *((_QWORD *)v139 + 3);
        v151 = (_QWORD *)*((_QWORD *)v139 + 4);
        *v151 = v150;
        *(_QWORD *)(v150 + 8) = v151;
        *((_QWORD *)v139 + 3) = 0;
        *((_QWORD *)v139 + 4) = 0;
        llvm::Value::deleteValue(v139);
      }
      v155 = *v2 + 8;
      v156 = *(_QWORD *)(*v2 + 16);
      if (v156 == v155)
        return 1;
      do
      {
        if (v156)
          v157 = v156 - 56;
        else
          v157 = 0;
        if ((*(_BYTE *)(v157 + 23) & 0x20) != 0)
        {
          v158 = ***(_QWORD ***)v157 + 2480;
          *(_QWORD *)&__dst = v157;
          v159 = sub_1C541AA4C(v158, (uint64_t *)&__dst);
          llvm::MDAttachments::erase((llvm::MDAttachments *)(v159 + 1), 28);
          if (!*((_DWORD *)v159 + 4))
          {
            v160 = *(_DWORD *)(v157 + 20);
            if ((v160 & 0x20000000) != 0)
            {
              v161 = **(int32x2_t ****)v157;
              v162 = *v161;
              v163 = (*v161)[312].i32[0];
              if (v163)
              {
                v164 = v162[310];
                v165 = v163 - 1;
                v166 = v165 & ((v157 >> 4) ^ (v157 >> 9));
                v167 = *(_QWORD *)&v164 + 40 * v166;
                v168 = *(_QWORD *)v167;
                if (*(_QWORD *)v167 == v157)
                {
LABEL_230:
                  v171 = *(char **)(v167 + 8);
                  v172 = *(unsigned int *)(v167 + 16);
                  if ((_DWORD)v172)
                  {
                    v173 = v171 - 8;
                    v174 = 16 * v172;
                    do
                    {
                      v175 = *(unsigned __int8 **)&v173[v174];
                      if (v175)
                        llvm::MetadataTracking::untrack((uint64_t)&v173[v174], v175);
                      v174 -= 16;
                    }
                    while (v174);
                    v171 = *(char **)(v167 + 8);
                  }
                  if (v171 != (char *)(v167 + 24))
                    free(v171);
                  *(_QWORD *)v167 = -8192;
                  v162[311] = vadd_s32(v162[311], (int32x2_t)0x1FFFFFFFFLL);
                  v160 = *(_DWORD *)(v157 + 20);
                }
                else
                {
                  v169 = 1;
                  while (v168 != -4096)
                  {
                    v170 = v166 + v169++;
                    v166 = v170 & v165;
                    v167 = *(_QWORD *)&v164 + 40 * v166;
                    v168 = *(_QWORD *)v167;
                    if (*(_QWORD *)v167 == v157)
                      goto LABEL_230;
                  }
                }
              }
              *(_DWORD *)(v157 + 20) = v160 & 0xDFFFFFFF;
            }
          }
        }
        v156 = *(_QWORD *)(v156 + 8);
        result = 1;
      }
      while (v156 != v155);
      return result;
    }
    v4 = *(_BYTE *)(v3 + 16) == 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v6 = v2[1];
  if (v6 && *(_BYTE *)(v6 + 135))
    return 0;
  v7 = v2[2];
  if (v7)
  {
    if (*(_BYTE *)(v7 + 135))
      return 0;
  }
  __sz = v4;
  v9 = sub_1C4FB7E80(*(uint64_t **)(*v2 + 112), "llvm.icall.branch.funnel", 0x18uLL);
  if (v9)
  {
    if (*(_BYTE *)(v9 + 16))
      v10 = 0;
    else
      v10 = v9;
  }
  else
  {
    v10 = 0;
  }
  v1013 = v2;
  if ((!__sz || !v5[1]) && (!v10 || !*(_QWORD *)(v10 + 8)) && !v2[1])
  {
    if (!v2[2])
      return 0;
    goto LABEL_16;
  }
  if (v2[2])
  {
LABEL_16:
    if (__sz)
    {
      v11 = v5[1];
      if (v11)
      {
        while (1)
        {
          v12 = *(_QWORD *)(v11 + 24);
          v13 = *(_QWORD *)(v12 - 32 * (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) + 32);
          v14 = v13 && *(_BYTE *)(v13 + 16) == 23;
          if (!v14)
            break;
          v11 = *(_QWORD *)(v11 + 8);
          v15 = *(_QWORD *)(v13 + 24);
          if (!*(_BYTE *)v15)
          {
            v16 = *(_QWORD *)(v15 + 8);
            v17 = *(_QWORD *)v16;
            *(_QWORD *)&v1077 = v16 + 24;
            *((_QWORD *)&v1077 + 1) = v17;
            v18 = sub_1C5712F58(v1013[2], (int *)(v16 + 24), v17);
            if (v18)
            {
              v20 = v18;
              v21 = *(_DWORD *)v18;
              LODWORD(__dst) = v21;
              v1080 = v1013;
              v1081 = (uint64_t)&v1077;
              if (v21)
              {
                *((_QWORD *)&__dst + 1) = sub_1C5713084((uint64_t)v1013, v1077, *((uint64_t *)&v1077 + 1), (uint64_t)"global_addr", 11);
                if (v21 <= 4 && ((1 << v21) & 0x16) != 0)
                {
                  *(_QWORD *)&v1072 = sub_1C57131B8((uint64_t)v1013, (uint64_t)&v1080, (uint64_t)"align", 5, (llvm::Type *)v20[1], 8, (llvm::Constant *)v1013[6]);
                  *((_QWORD *)&v1072 + 1) = sub_1C57131B8((uint64_t)v1013, (uint64_t)&v1080, (uint64_t)"size_m1", 7, (llvm::Type *)v20[2], *((_DWORD *)v20 + 1), (llvm::Constant *)v1013[12]);
                  if (v21 == 2)
                  {
                    v23 = *((_DWORD *)v20 + 1);
                    v24 = 1 << v23;
                    v117 = v23 >= 6;
                    v25 = 11;
                    if (!v117)
                      v25 = 9;
                    *(_QWORD *)&v1074 = sub_1C57131B8((uint64_t)v1013, (uint64_t)&v1080, (uint64_t)"inline_bits", 11, (llvm::Type *)v20[4], v24, (llvm::Constant *)v1013[v25]);
                  }
                  else if (v21 == 1)
                  {
                    *(_QWORD *)&v1073 = sub_1C5713084((uint64_t)v1013, v1077, *((uint64_t *)&v1077 + 1), (uint64_t)"byte_array", 10);
                    *((_QWORD *)&v1073 + 1) = sub_1C57131B8((uint64_t)v1013, (uint64_t)&v1080, (uint64_t)"bit_mask", 8, (llvm::Type *)*((unsigned __int8 *)v20 + 24), 8, (llvm::Constant *)v1013[7]);
                  }
                }
              }
            }
            else
            {
              *(_QWORD *)&v1074 = 0;
              v1072 = 0u;
              v1073 = 0u;
              __dst = 0u;
            }
            v26 = sub_1C57126C8((uint64_t ***)v1013, v15, v12, (uint64_t)&__dst, v19);
            if (v26)
            {
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v12, v26, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v12 + 40) + 40, (uint64_t ***)v12);
              v27 = *(_QWORD *)(v12 + 24);
              v28 = *(_QWORD **)(v12 + 32);
              *v28 = v27;
              *(_QWORD *)(v27 + 8) = v28;
              *(_QWORD *)(v12 + 24) = 0;
              *(_QWORD *)(v12 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v12);
            }
          }
          if (!v11)
            goto LABEL_40;
        }
LABEL_1321:
        v975 = "Second argument of llvm.type.test must be metadata";
        goto LABEL_1320;
      }
    }
LABEL_40:
    if (!v10 || !*(_QWORD *)(v10 + 8))
    {
      *(_QWORD *)&v1077 = v1078;
      *((_QWORD *)&v1077 + 1) = 0x800000000;
      v1080 = v1082;
      v1081 = 0x800000000;
      v29 = *v1013;
      v30 = *v1013 + 24;
      v31 = *(_QWORD *)(*v1013 + 32);
      if (v31 != v30)
      {
        while (1)
        {
          if (v31)
            v32 = (uint64_t ***)(v31 - 56);
          else
            v32 = 0;
          if (((_DWORD)v32[4] & 0xFu) - 7 < 2)
            goto LABEL_90;
          v33 = (_QWORD *)v1013[2];
          v34 = v32 >> 4;
          if ((*((_BYTE *)v32 + 23) & 0x10) == 0)
          {
            v44 = 0;
            BYTE7(v1072) = 0;
            p_dst = &__dst;
            goto LABEL_63;
          }
          v35 = ***v32;
          v36 = *(_QWORD *)(v35 + 152);
          v37 = *(unsigned int *)(v35 + 168);
          if (!(_DWORD)v37)
            goto LABEL_54;
          LODWORD(v38) = (v37 - 1) & (v34 ^ (v32 >> 9));
          v39 = (uint64_t ****)(v36 + 16 * v38);
          v40 = *v39;
          if (*v39 != v32)
            break;
LABEL_55:
          v43 = (unint64_t *)v39[1];
          v46 = *v43;
          v45 = v43 + 2;
          v44 = v46;
          if (v46 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_1313;
          if (v44 >= 0x17)
          {
            v48 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v44 | 7) != 0x17)
              v48 = v44 | 7;
            v49 = v48 + 1;
            p_dst = (__int128 *)operator new(v48 + 1);
            *(_QWORD *)&v1072 = v49 | 0x8000000000000000;
            *(_QWORD *)&__dst = p_dst;
            *((_QWORD *)&__dst + 1) = v44;
LABEL_62:
            memmove(p_dst, v45, v44);
            goto LABEL_63;
          }
          BYTE7(v1072) = v44;
          p_dst = &__dst;
          if (v44)
            goto LABEL_62;
LABEL_63:
          *((_BYTE *)p_dst + v44) = 0;
          v50 = sub_1C4FCEB18((uint64_t **)v33[19], (const void **)&__dst);
          v51 = v50;
          if (SBYTE7(v1072) < 0)
          {
            operator delete((void *)__dst);
            if (!v51)
            {
LABEL_68:
              v54 = (_QWORD *)v1013[2];
              if ((*((_BYTE *)v32 + 23) & 0x10) != 0)
              {
                v55 = ***v32;
                v56 = *(_QWORD *)(v55 + 152);
                v57 = *(unsigned int *)(v55 + 168);
                if (!(_DWORD)v57)
                  goto LABEL_75;
                LODWORD(v58) = (v57 - 1) & (v34 ^ (v32 >> 9));
                v59 = (uint64_t ****)(v56 + 16 * v58);
                v60 = *v59;
                if (*v59 != v32)
                {
                  v61 = 1;
                  while (v60 != (uint64_t ***)-4096)
                  {
                    v62 = v58 + v61++;
                    v58 = v62 & (v57 - 1);
                    v60 = *(uint64_t ****)(v56 + 16 * v58);
                    if (v60 == v32)
                    {
                      v59 = (uint64_t ****)(v56 + 16 * v58);
                      goto LABEL_76;
                    }
                  }
LABEL_75:
                  v59 = (uint64_t ****)(v56 + 16 * v57);
                }
LABEL_76:
                v63 = (unint64_t *)v59[1];
                v66 = *v63;
                v65 = v63 + 2;
                v64 = v66;
                if (v66 > 0x7FFFFFFFFFFFFFF7)
                  goto LABEL_1313;
                if (v64 >= 0x17)
                {
                  v68 = (v64 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v64 | 7) != 0x17)
                    v68 = v64 | 7;
                  v69 = v68 + 1;
                  v67 = (__int128 *)operator new(v68 + 1);
                  *(_QWORD *)&v1072 = v69 | 0x8000000000000000;
                  *(_QWORD *)&__dst = v67;
                  *((_QWORD *)&__dst + 1) = v64;
                }
                else
                {
                  BYTE7(v1072) = v64;
                  v67 = &__dst;
                  if (!v64)
                    goto LABEL_84;
                }
                memmove(v67, v65, v64);
              }
              else
              {
                v64 = 0;
                BYTE7(v1072) = 0;
                v67 = &__dst;
              }
LABEL_84:
              *((_BYTE *)v67 + v64) = 0;
              v70 = sub_1C4FCEB18((uint64_t **)v54[22], (const void **)&__dst);
              if (SBYTE7(v1072) < 0)
                operator delete((void *)__dst);
              if (!v70)
                goto LABEL_90;
              v52 = v1081;
              v53 = &v1080;
              if (v1081 >= (unint64_t)HIDWORD(v1081))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1080, (uint64_t)v1082, v1081 + 1, 8);
                v52 = v1081;
              }
              goto LABEL_89;
            }
          }
          else if (!v50)
          {
            goto LABEL_68;
          }
          v52 = DWORD2(v1077);
          v53 = (void **)&v1077;
          if (DWORD2(v1077) >= (unint64_t)HIDWORD(v1077))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1077, (uint64_t)v1078, DWORD2(v1077) + 1, 8);
            v52 = DWORD2(v1077);
          }
LABEL_89:
          *((_QWORD *)*v53 + v52) = v32;
          ++*((_DWORD *)v53 + 2);
LABEL_90:
          v31 = *(_QWORD *)(v31 + 8);
          if (v31 == v30)
          {
            v71 = v1013;
            v29 = *v1013;
            goto LABEL_175;
          }
        }
        v41 = 1;
        while (v40 != (uint64_t ***)-4096)
        {
          v42 = v38 + v41++;
          v38 = v42 & (v37 - 1);
          v40 = *(uint64_t ****)(v36 + 16 * v38);
          if (v40 == v32)
          {
            v39 = (uint64_t ****)(v36 + 16 * v38);
            goto LABEL_55;
          }
        }
LABEL_54:
        v39 = (uint64_t ****)(v36 + 16 * v37);
        goto LABEL_55;
      }
      v71 = v1013;
LABEL_175:
      v1066 = 0;
      __p = 0;
      v1067 = 0;
      sub_1C57117C4((uint64_t)&__dst, v29);
      if (DWORD2(v1077))
      {
        v128 = (uint64_t *)v1077;
        v129 = 8 * DWORD2(v1077);
        do
        {
          v130 = *v128++;
          sub_1C5711A90(v71, v130, 1, (llvm::Value ***)&__p);
          v129 -= 8;
        }
        while (v129);
      }
      if ((_DWORD)v1081)
      {
        v131 = (uint64_t *)v1080;
        v132 = 8 * v1081;
        do
        {
          v133 = *v131++;
          sub_1C5711A90(v71, v133, 0, (llvm::Value ***)&__p);
          v132 -= 8;
        }
        while (v132);
      }
      sub_1C57121F0((uint64_t)&__dst);
      v134 = __p;
      v135 = v1066;
      if (__p != v1066)
      {
        v136 = (llvm::GlobalAlias **)__p;
        do
        {
          v137 = *v136++;
          llvm::GlobalAlias::eraseFromParent(v137);
        }
        while (v136 != v135);
      }
      if (v134)
        operator delete(v134);
      if (v1080 != v1082)
        free(v1080);
      if ((_QWORD *)v1077 != v1078)
        free((void *)v1077);
      return 1;
    }
    v975 = "unexpected call to llvm.icall.branch.funnel during import phase";
LABEL_1320:
    llvm::report_fatal_error((llvm *)v975, (const char *)1);
  }
  v985 = v5;
  v987 = v10;
  v1024 = 0;
  v1025 = 0;
  v1023 = (uint64_t *)&v1024;
  v1066 = 0;
  __p = 0;
  v1067 = v1069;
  v1068 = 0x400000000;
  v1069[4] = v1070;
  v1069[5] = 0;
  v1070[0] = 0;
  v1070[1] = 1;
  v1020 = 0;
  v1021 = 0;
  v1022 = 0;
  v1062 = v1064;
  v1063 = 0x200000000;
  ModuleFlag = llvm::Module::getModuleFlag(*v2, "Cross-DSO CFI", 0xDuLL);
  v1017 = 0;
  v1018 = 0;
  v1019 = 0;
  v72 = (_QWORD *)v2[1];
  if (!v72)
    goto LABEL_334;
  v1077 = 0uLL;
  LODWORD(v1078[0]) = 0;
  v75 = (_QWORD *)*v72;
  v73 = v72 + 1;
  v74 = v75;
  if (v75 != v73)
  {
    do
    {
      v76 = (uint64_t *)v74[7];
      v77 = (uint64_t *)v74[8];
      while (v76 != v77)
      {
        v78 = *v76;
        if ((*(_WORD *)(*v76 + 12) & 0x80) != 0)
        {
          v79 = *(uint64_t **)(v78 + 40);
          v80 = *(_QWORD *)(v78 + 48) - (_QWORD)v79;
          if (v80)
          {
            v81 = 8 * (v80 >> 3);
            do
            {
              v82 = *v79++;
              v1080 = *(void **)(v82 & 0xFFFFFFFFFFFFFFF8);
              sub_1C61A7854((uint64_t)&v1077, (uint64_t *)&v1080, (uint64_t)&__dst);
              v81 -= 8;
            }
            while (v81);
          }
        }
        ++v76;
      }
      v83 = (_QWORD *)v74[1];
      if (v83)
      {
        do
        {
          v84 = v83;
          v83 = (_QWORD *)*v83;
        }
        while (v83);
      }
      else
      {
        do
        {
          v84 = (_QWORD *)v74[2];
          v14 = *v84 == (_QWORD)v74;
          v74 = v84;
        }
        while (!v14);
      }
      v74 = v84;
    }
    while (v84 != v73);
  }
  v85 = *v2;
  *(_QWORD *)&__dst = "cfi.functions";
  LOWORD(v1073) = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v85, (uint64_t)&__dst);
  if (!NamedMetadata)
    goto LABEL_333;
  v87 = NamedMetadata;
  v88 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
  if (!(_DWORD)v88)
  {
    v177 = 0;
    v176 = 0;
LABEL_251:
    v180 = v176 + 32 * v177;
    v178 = (unint64_t *)v180;
    goto LABEL_252;
  }
  for (i = 0; i != v88; ++i)
  {
    v90 = *(_QWORD *)(**(_QWORD **)(v87 + 48) + 8 * i);
    v91 = (_QWORD *)(v90 - 8 * *(unsigned int *)(v90 + 8));
    v92 = *(_QWORD **)(*v91 + 8);
    v1 = (unsigned int *)(v92 + 3);
    v93 = *v92;
    AggregateElement = *(llvm::UndefValue **)(v91[1] + 128);
    if (AggregateElement)
      v95 = *((_BYTE *)AggregateElement + 16) == 16;
    else
      v95 = 0;
    if (!v95)
      AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
    v98 = (int *)*((_QWORD *)AggregateElement + 3);
    v96 = (int *)((char *)AggregateElement + 24);
    v97 = v98;
    if (v96[2] < 0x41)
      v97 = v96;
    v99 = *v97;
    if (v93)
    {
      v100 = *(unsigned __int8 *)v1;
      if (v100 == 1)
        v101 = v93 - 1;
      else
        v101 = v93;
      if (v100 == 1)
        v102 = (int *)((char *)v92 + 25);
      else
        v102 = (int *)(v92 + 3);
    }
    else
    {
      v101 = 0;
      v102 = (int *)(v92 + 3);
    }
    __dst = xmmword_1C85F4BB0;
    *(_QWORD *)&v1072 = 0;
    llvm::MD5::update((int *)&__dst, v102, v101);
    llvm::MD5::final((int *)&__dst, (int *)&v1080);
    v103 = v1080;
    v104 = (llvm::ModuleSummaryIndex *)v1013[1];
    if (llvm::ModuleSummaryIndex::isGUIDLive(v104, (unint64_t)v1080))
    {
      if (LODWORD(v1078[0]))
      {
        v105 = (LODWORD(v1078[0]) - 1) & (37 * (_DWORD)v103);
        v106 = *(void **)(v1077 + 8 * v105);
        if (v103 == v106)
          goto LABEL_131;
        v110 = 1;
        while (v106 != (void *)-1)
        {
          v111 = v105 + v110++;
          v105 = v111 & (LODWORD(v1078[0]) - 1);
          v106 = *(void **)(v1077 + 8 * v105);
          if (v103 == v106)
            goto LABEL_131;
        }
      }
      if (ModuleFlag && !v99)
      {
        v114 = (_QWORD *)*((_QWORD *)v104 + 1);
        v113 = (_QWORD *)((char *)v104 + 8);
        v112 = v114;
        if (!v114)
          goto LABEL_152;
        v115 = v113;
        do
        {
          v116 = v112[4];
          v117 = v116 >= (unint64_t)v103;
          if (v116 >= (unint64_t)v103)
            v118 = v112;
          else
            v118 = v112 + 1;
          if (v117)
            v115 = v112;
          v112 = (_QWORD *)*v118;
        }
        while (*v118);
        if (v115 == v113 || v115[4] > (unint64_t)v103)
LABEL_152:
          v115 = v113;
        v119 = v115 == v113 ? 0 : (uint64_t)(v115 + 4);
        v120 = v119 & 0xFFFFFFFFFFFFFFF8;
        if ((v119 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v121 = *(_QWORD *)(v120 + 24);
          v122 = *(_QWORD *)(v120 + 32);
          v123 = v122 - v121;
          if (v122 != v121)
          {
            v124 = 0;
            v125 = 8 * (v123 >> 3);
            do
            {
              v126 = *(_WORD *)(*(_QWORD *)v121 + 12);
              if ((v126 & 0x80) != 0 && (v126 & 0xFu) - 7 >= 2)
                v124 = 1;
              v121 += 8;
              v125 -= 8;
            }
            while (v125);
            if ((v124 & 1) != 0)
            {
LABEL_131:
              *(_QWORD *)&__dst = v1;
              *((_QWORD *)&__dst + 1) = v93;
              LODWORD(v1072) = v99;
              *((_QWORD *)&v1072 + 1) = v90;
              v1080 = 0;
              v107 = sub_1C57146F8(v1017, v1019, (uint64_t)&__dst, &v1080);
              v108 = v1080;
              if ((v107 & 1) != 0)
              {
                if (*((_DWORD *)v1080 + 4))
                {
                  *((_DWORD *)v1080 + 4) = v99;
                  v108[3] = v90;
                }
              }
              else
              {
                v109 = sub_1C5714804((uint64_t)&v1017, (uint64_t)&__dst, v1080);
                *v109 = __dst;
                v109[1] = v1072;
              }
              continue;
            }
          }
        }
      }
    }
  }
  v176 = v1017;
  v177 = v1019;
  if (!(_DWORD)v1018)
  {
    v2 = v1013;
    goto LABEL_251;
  }
  v178 = (unint64_t *)(v1017 + 32 * v1019);
  v2 = v1013;
  if (v1019)
  {
    v179 = 0;
    while (*(_QWORD *)(v1017 + v179) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v179 += 32;
      if (32 * v1019 == v179)
      {
        v180 = v1017 + 32 * v1019;
        goto LABEL_252;
      }
    }
    v180 = v1017 + v179;
  }
  else
  {
    v180 = v1017;
  }
LABEL_252:
  v1003 = v176 + 32 * v177;
  if (v180 != v1003)
  {
    while (2)
    {
      v181 = *(unsigned __int8 **)v180;
      v182 = *(_QWORD *)(v180 + 8);
      v183 = *(_DWORD *)(v180 + 16);
      v1 = *(unsigned int **)(v180 + 24);
      v184 = (uint64_t ***)sub_1C4FB7E80(*(uint64_t **)(*v2 + 112), *(unsigned __int8 **)v180, v182);
      if (!v184)
        goto LABEL_254;
      v189 = v184;
      if (*((_BYTE *)v184 + 16))
        goto LABEL_254;
      v191 = *((_DWORD *)v184 + 8);
      if ((v191 & 0xFu) - 7 <= 1)
      {
        if ((*((_BYTE *)v184 + 23) & 0x10) != 0)
        {
          v198 = ***v184;
          v199 = *(_QWORD *)(v198 + 152);
          v200 = *(unsigned int *)(v198 + 168);
          if (!(_DWORD)v200)
            goto LABEL_312;
          LODWORD(v201) = (v200 - 1) & ((v184 >> 4) ^ (v184 >> 9));
          v202 = (uint64_t ****)(v199 + 16 * v201);
          v203 = *v202;
          if (*v202 != v184)
          {
            v204 = 1;
            while (v203 != (uint64_t ***)-4096)
            {
              v205 = v201 + v204++;
              v201 = v205 & (v200 - 1);
              v203 = *(uint64_t ****)(v199 + 16 * v201);
              if (v203 == v184)
              {
                v202 = (uint64_t ****)(v199 + 16 * v201);
                goto LABEL_313;
              }
            }
LABEL_312:
            v202 = (uint64_t ****)(v199 + 16 * v200);
          }
LABEL_313:
          v223 = v202[1];
          v226 = *v223;
          v225 = (char *)(v223 + 2);
          v224 = v226;
        }
        else
        {
          v224 = 0;
          v225 = &byte_1C871356D;
        }
        LOWORD(v1073) = 773;
        *(_QWORD *)&__dst = v225;
        *((_QWORD *)&__dst + 1) = v224;
        *(_QWORD *)&v1072 = ".1";
        llvm::Value::setName(v184, (uint64_t)&__dst);
LABEL_254:
        v185 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(_QWORD **)*v2 + 1576), 0, 0, 0);
        v186 = *v2;
        v187 = (llvm::Type *)*(unsigned int *)(*v2 + 284);
        LOWORD(v1073) = 261;
        *(_QWORD *)&__dst = v181;
        *((_QWORD *)&__dst + 1) = v182;
        v188 = (char *)operator new(0x80uLL);
        v189 = (uint64_t ***)(v188 + 8);
        *((_DWORD *)v188 + 7) = *((_DWORD *)v188 + 7) & 0x38000000 | 0x40000000;
        *(_QWORD *)v188 = 0;
        v190 = v187;
        v2 = v1013;
        llvm::Function::Function((uint64_t *)v188 + 1, v185, 0, v190, (uint64_t)&__dst, v186);
        v191 = *((_DWORD *)v188 + 10);
      }
      if ((v191 & 0xF) == 1)
      {
        *((_DWORD *)v189 + 8) = v191 & 0xFFFFFFF0;
        if ((v191 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v189) & 1) == 0)
          *((_DWORD *)v189 + 8) |= 0x4000u;
        sub_1C6291B14((llvm::Function *)v189);
        v206 = (uint64_t)v189[6];
        if (v206)
          llvm::Comdat::removeUser(v206, (uint64_t)v189);
        v189[6] = 0;
        v207 = *((_DWORD *)v189 + 5);
        if ((v207 & 0x20000000) != 0)
        {
          v208 = (int32x2_t **)**v189;
          v209 = *v208;
          v210 = (*v208)[312].i32[0];
          if (v210)
          {
            v211 = v209[310];
            v212 = v210 - 1;
            v213 = v212 & ((v189 >> 4) ^ (v189 >> 9));
            v214 = *(_QWORD *)&v211 + 40 * v213;
            v215 = *(uint64_t ****)v214;
            if (*(uint64_t ****)v214 == v189)
            {
LABEL_302:
              v218 = *(char **)(v214 + 8);
              v219 = *(unsigned int *)(v214 + 16);
              if ((_DWORD)v219)
              {
                v220 = v218 - 8;
                v221 = 16 * v219;
                do
                {
                  v222 = *(unsigned __int8 **)&v220[v221];
                  if (v222)
                    llvm::MetadataTracking::untrack((uint64_t)&v220[v221], v222);
                  v221 -= 16;
                }
                while (v221);
                v218 = *(char **)(v214 + 8);
              }
              if (v218 != (char *)(v214 + 24))
                free(v218);
              *(_QWORD *)v214 = -8192;
              v209[311] = vadd_s32(v209[311], (int32x2_t)0x1FFFFFFFFLL);
              v207 = *((_DWORD *)v189 + 5);
            }
            else
            {
              v216 = 1;
              while (v215 != (uint64_t ***)-4096)
              {
                v217 = v213 + v216++;
                v213 = v217 & v212;
                v214 = *(_QWORD *)&v211 + 40 * v213;
                v215 = *(uint64_t ****)v214;
                if (*(uint64_t ****)v214 == v189)
                  goto LABEL_302;
              }
            }
          }
          *((_DWORD *)v189 + 5) = v207 & 0xDFFFFFFF;
        }
      }
      if (!v183)
      {
        if (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v189))
        {
          v192 = *((_DWORD *)v189 + 8);
          *((_DWORD *)v189 + 8) = v192 & 0xFFFFFFF0;
          if ((v192 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v189) & 1) == 0)
            *((_DWORD *)v189 + 8) |= 0x4000u;
        }
      }
      if (*((_BYTE *)v189 + 16))
      {
        if (*((_BYTE *)v189 + 16) == 3 && (*((_DWORD *)v189 + 5) & 0x7FFFFFF) == 0)
          goto LABEL_267;
      }
      else if (v189[9] == (uint64_t **)(v189 + 9) && (*((_BYTE *)v189 + 34) & 0x80) == 0)
      {
LABEL_267:
        if (v183 == 2)
        {
          v193 = *((_DWORD *)v189 + 8);
          *((_DWORD *)v189 + 8) = v193 & 0xFFFFFFF0 | 9;
          if ((v193 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v189) & 1) == 0)
            *((_DWORD *)v189 + 8) |= 0x4000u;
        }
        if ((*((_BYTE *)v189 + 23) & 0x20) != 0)
        {
          v227 = ***v189 + 2480;
          *(_QWORD *)&__dst = v189;
          v228 = sub_1C541AA4C(v227, (uint64_t *)&__dst);
          llvm::MDAttachments::erase((llvm::MDAttachments *)(v228 + 1), 19);
          if (!*((_DWORD *)v228 + 4))
          {
            v229 = *((_DWORD *)v189 + 5);
            if ((v229 & 0x20000000) != 0)
            {
              v230 = (int32x2_t **)**v189;
              v231 = *v230;
              v232 = (*v230)[312].i32[0];
              if (v232)
              {
                v233 = v231[310];
                v234 = v232 - 1;
                v235 = v234 & ((v189 >> 4) ^ (v189 >> 9));
                v236 = *(_QWORD *)&v233 + 40 * v235;
                v237 = *(uint64_t ****)v236;
                if (*(uint64_t ****)v236 == v189)
                {
LABEL_323:
                  v240 = *(char **)(v236 + 8);
                  v241 = *(unsigned int *)(v236 + 16);
                  if ((_DWORD)v241)
                  {
                    v242 = v240 - 8;
                    v243 = 16 * v241;
                    do
                    {
                      v244 = *(unsigned __int8 **)&v242[v243];
                      if (v244)
                        llvm::MetadataTracking::untrack((uint64_t)&v242[v243], v244);
                      v243 -= 16;
                    }
                    while (v243);
                    v240 = *(char **)(v236 + 8);
                  }
                  if (v240 != (char *)(v236 + 24))
                    free(v240);
                  *(_QWORD *)v236 = -8192;
                  v231[311] = vadd_s32(v231[311], (int32x2_t)0x1FFFFFFFFLL);
                  v229 = *((_DWORD *)v189 + 5);
                }
                else
                {
                  v238 = 1;
                  while (v237 != (uint64_t ***)-4096)
                  {
                    v239 = v235 + v238++;
                    v235 = v239 & v234;
                    v236 = *(_QWORD *)&v233 + 40 * v235;
                    v237 = *(uint64_t ****)v236;
                    if (*(uint64_t ****)v236 == v189)
                      goto LABEL_323;
                  }
                }
              }
              *((_DWORD *)v189 + 5) = v229 & 0xDFFFFFFF;
              v2 = v1013;
            }
          }
        }
        v194 = v1[2];
        if (v194 >= 3)
        {
          for (j = 2; j < v194; ++j)
          {
            llvm::Value::addMetadata((llvm::Value *)v189, 19, *(llvm::MDNode **)&v1[2 * j + -2 * v194]);
            v194 = v1[2];
          }
        }
      }
      v196 = (unint64_t *)(v180 + 32);
      while (v196 != v178)
      {
        v197 = *v196;
        v196 += 4;
        if (v197 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v180 = (uint64_t)(v196 - 4);
          goto LABEL_280;
        }
      }
      v180 = (uint64_t)v178;
LABEL_280:
      if (v180 == v1003)
        break;
      continue;
    }
  }
LABEL_333:
  MEMORY[0x1CAA32FB4](v1077, 8);
LABEL_334:
  v245 = v2;
  v246 = 0;
  v1015[0] = 0;
  v1015[1] = 0;
  v1016 = 0;
  v247 = *v245;
  v248 = *v245 + 24;
  v249 = *(_QWORD *)(*v245 + 32);
  v250 = v247 + 8;
  v251 = *(_QWORD *)(v247 + 16);
  *(_QWORD *)&__dst = v249;
  *((_QWORD *)&__dst + 1) = v251;
  v998 = v250;
  v1004 = v248;
  *(_QWORD *)&v1072 = v248;
  *((_QWORD *)&v1072 + 1) = v250;
  while (2)
  {
    if (v249 != v1004
      || v251 != v998
      || ((_QWORD)v1072 == v1004 ? (v252 = *((_QWORD *)&v1072 + 1) == v998) : (v252 = 0), !v252))
    {
      v253 = 0;
      do
      {
        v254 = (*(uint64_t (**)(__int128 *))((char *)&off_1E817B388 + v253))(&__dst);
        if (v254)
          v255 = 1;
        else
          v255 = v253 == 16;
        v253 += 16;
      }
      while (!v255);
      v256 = (uint64_t ***)v254;
      if (*(_BYTE *)(v254 + 16) != 3
        || (*(_DWORD *)(v254 + 32) & 0xF) != 1 && (*(_DWORD *)(v254 + 20) & 0x7FFFFFF) != 0)
      {
        LODWORD(v1063) = 0;
        llvm::Value::getMetadata((unsigned int *)v254, 19, (uint64_t)&v1062);
        v258 = 0;
        LOBYTE(isJumpTableCanonical) = 0;
        if (*((_BYTE *)v256 + 16))
          goto LABEL_382;
        isJumpTableCanonical = llvm::lowertypetests::isJumpTableCanonical((llvm::lowertypetests *)v256, v257);
        if ((*((_BYTE *)v256 + 23) & 0x10) != 0)
        {
          v260 = ***v256;
          v261 = *(_QWORD *)(v260 + 152);
          v262 = *(unsigned int *)(v260 + 168);
          if (!(_DWORD)v262)
            goto LABEL_358;
          LODWORD(v263) = (v262 - 1) & ((v256 >> 4) ^ (v256 >> 9));
          v264 = (uint64_t ****)(v261 + 16 * v263);
          v265 = *v264;
          if (*v264 != v256)
          {
            v266 = 1;
            while (v265 != (uint64_t ***)-4096)
            {
              v267 = v263 + v266++;
              v263 = v267 & (v262 - 1);
              v265 = *(uint64_t ****)(v261 + 16 * v263);
              if (v265 == v256)
              {
                v264 = (uint64_t ****)(v261 + 16 * v263);
                goto LABEL_359;
              }
            }
LABEL_358:
            v264 = (uint64_t ****)(v261 + 16 * v262);
          }
LABEL_359:
          v268 = v264[1];
          v271 = *v268;
          v270 = (char *)(v268 + 2);
          v269 = v271;
        }
        else
        {
          v269 = 0;
          v270 = &byte_1C871356D;
        }
        *(_QWORD *)&v1077 = v270;
        *((_QWORD *)&v1077 + 1) = v269;
        v272 = v1017;
        v273 = v1019;
        if (sub_1C57146F8(v1017, v1019, (uint64_t)&v1077, &v1080))
        {
          if ((*((_BYTE *)v256 + 23) & 0x10) != 0)
          {
            v274 = ***v256;
            v275 = *(_QWORD *)(v274 + 152);
            v276 = *(unsigned int *)(v274 + 168);
            if (!(_DWORD)v276)
              goto LABEL_374;
            LODWORD(v277) = (v276 - 1) & ((v256 >> 4) ^ (v256 >> 9));
            v278 = (uint64_t ****)(v275 + 16 * v277);
            v279 = *v278;
            if (*v278 != v256)
            {
              v280 = 1;
              while (v279 != (uint64_t ***)-4096)
              {
                v281 = v277 + v280++;
                v277 = v281 & (v276 - 1);
                v279 = *(uint64_t ****)(v275 + 16 * v277);
                if (v279 == v256)
                {
                  v278 = (uint64_t ****)(v275 + 16 * v277);
                  goto LABEL_375;
                }
              }
LABEL_374:
              v278 = (uint64_t ****)(v275 + 16 * v276);
            }
LABEL_375:
            v282 = v278[1];
            v285 = *v282;
            v284 = (char *)(v282 + 2);
            v283 = v285;
          }
          else
          {
            v283 = 0;
            v284 = &byte_1C871356D;
          }
          *(_QWORD *)&v1077 = v284;
          *((_QWORD *)&v1077 + 1) = v283;
          v1080 = 0;
          if (sub_1C57146F8(v272, v273, (uint64_t)&v1077, &v1080))
          {
            v286 = *((_DWORD *)v1080 + 4);
          }
          else
          {
            v287 = sub_1C5714804((uint64_t)&v1017, (uint64_t)&v1077, v1080);
            v286 = 0;
            *(_OWORD *)v287 = v1077;
            v287[2] = 0;
            v287[3] = 0;
          }
          if (!v286)
            LOBYTE(isJumpTableCanonical) = 1;
          v258 = 1;
LABEL_382:
          v288 = (uint64_t *)v1062;
          v289 = v1063;
          v290 = 8 * v1063;
          v291 = sub_1C484358C((uint64_t)&__p, v290 + 24, 3);
          v292 = v291;
          *(_QWORD *)v291 = v256;
          *(_QWORD *)(v291 + 8) = v289;
          *(_BYTE *)(v291 + 16) = isJumpTableCanonical;
          *(_BYTE *)(v291 + 17) = v258;
          if ((_DWORD)v289)
          {
            v293 = (_QWORD *)(v291 + 24);
            do
            {
              v294 = *v288++;
              *v293++ = v294;
              v290 -= 8;
            }
            while (v290);
          }
          *(_QWORD *)&v1077 = v256;
          if (!v1016)
          {
            v302 = 0;
            goto LABEL_397;
          }
          v295 = (v1016 - 1) & ((v256 >> 4) ^ (v256 >> 9));
          v296 = (_QWORD *)(v1015[0] + 16 * v295);
          v297 = (_QWORD ***)*v296;
          if (v256 != (uint64_t ***)*v296)
          {
            v298 = 0;
            v299 = 1;
            while (v297 != (_QWORD ***)-4096)
            {
              if (v298)
                v300 = 0;
              else
                v300 = v297 == (_QWORD ***)-8192;
              if (v300)
                v298 = v296;
              v301 = v295 + v299++;
              v295 = v301 & (v1016 - 1);
              v296 = (_QWORD *)(v1015[0] + 16 * v295);
              v297 = (_QWORD ***)*v296;
              if (v256 == (uint64_t ***)*v296)
                goto LABEL_398;
            }
            if (v298)
              v302 = v298;
            else
              v302 = v296;
LABEL_397:
            v296 = sub_1C5714A68((uint64_t)v1015, (uint64_t *)&v1077, v302);
            *v296 = v256;
            v296[1] = 0;
          }
LABEL_398:
          v296[1] = v292;
          if ((_DWORD)v1063)
          {
            v303 = (char *)v1062;
            v304 = (char *)v1062 + 8 * v1063;
            while (1)
            {
              v305 = *(_QWORD *)v303;
              if (*(_DWORD *)(*(_QWORD *)v303 + 8) != 2)
              {
                v975 = "All operands of type metadata must have 2 elements";
                goto LABEL_1320;
              }
              v306 = *((_DWORD *)v256 + 8);
              if ((v306 & 0x1C00) != 0)
              {
                v975 = "Bit set element may not be thread-local";
                goto LABEL_1320;
              }
              if ((v306 & 0x400000) != 0)
              {
                v307 = 2;
                if (*((_BYTE *)v256 + 16) == 3)
                {
                  if (!llvm::Value::getMetadata((uint64_t)v256, "typed_global_not_for_cfi", 0x18uLL))
                  {
                    v975 = "A member of a type identifier may not have an explicit section";
                    goto LABEL_1320;
                  }
                  v307 = *(unsigned int *)(v305 + 8);
                }
              }
              else
              {
                v307 = 2;
              }
              v308 = (_QWORD *)(v305 - 8 * v307);
              if (*(_BYTE *)*v308 != 1)
              {
                v975 = "Type offset must be a constant";
                goto LABEL_1320;
              }
              v309 = *(_QWORD *)(*v308 + 128);
              if (v309)
                v310 = *(_BYTE *)(v309 + 16) == 16;
              else
                v310 = 0;
              if (!v310)
              {
                v975 = "Type offset must be an integer constant";
                goto LABEL_1320;
              }
              v311 = v308[1];
              *(_QWORD *)&v1077 = v311;
              if (!v1022)
                break;
              v312 = ((v311 >> 4) ^ (v311 >> 9)) & (v1022 - 1);
              v313 = &v1020[5 * v312];
              v314 = *v313;
              if (v311 != *v313)
              {
                v315 = 0;
                v316 = 1;
                while (v314 != -4096)
                {
                  if (v315)
                    v317 = 0;
                  else
                    v317 = v314 == -8192;
                  if (v317)
                    v315 = v313;
                  v318 = v312 + v316++;
                  v312 = v318 & (v1022 - 1);
                  v313 = &v1020[5 * v312];
                  v314 = *v313;
                  if (v311 == *v313)
                    goto LABEL_426;
                }
                if (v315)
                  v319 = v315;
                else
                  v319 = v313;
                goto LABEL_425;
              }
LABEL_426:
              *((_DWORD *)v313 + 2) = ++v246;
              v321 = (unsigned int *)v313[3];
              v320 = v313[4];
              if ((unint64_t)v321 >= v320)
              {
                v1 = (unsigned int *)v313[2];
                v323 = ((char *)v321 - (char *)v1) >> 3;
                v324 = v323 + 1;
                if ((unint64_t)(v323 + 1) >> 61)
                  goto LABEL_1313;
                v325 = v320 - (_QWORD)v1;
                if (v325 >> 2 > v324)
                  v324 = v325 >> 2;
                if ((unint64_t)v325 >= 0x7FFFFFFFFFFFFFF8)
                  v326 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v326 = v324;
                if (v326)
                {
                  if (v326 >> 61)
                    goto LABEL_1317;
                  v327 = (char *)operator new(8 * v326);
                }
                else
                {
                  v327 = 0;
                }
                v328 = (unint64_t *)&v327[8 * v323];
                *v328 = v292;
                v322 = v328 + 1;
                if (v321 != v1)
                {
                  do
                  {
                    v329 = *((_QWORD *)v321 - 1);
                    v321 -= 2;
                    *--v328 = v329;
                  }
                  while (v321 != v1);
                  v321 = (unsigned int *)v313[2];
                }
                v313[2] = (uint64_t)v328;
                v313[3] = (uint64_t)v322;
                v313[4] = (uint64_t)&v327[8 * v326];
                if (v321)
                  operator delete(v321);
              }
              else
              {
                *(_QWORD *)v321 = v292;
                v322 = v321 + 2;
              }
              v313[3] = (uint64_t)v322;
              v303 += 8;
              if (v303 == v304)
                goto LABEL_448;
            }
            v319 = 0;
LABEL_425:
            v313 = sub_1C5714C28((uint64_t)&v1020, (uint64_t *)&v1077, v319);
            *v313 = v311;
            *(_OWORD *)(v313 + 1) = 0u;
            *(_OWORD *)(v313 + 3) = 0u;
            goto LABEL_426;
          }
        }
        else if ((llvm::Function::hasAddressTaken((llvm::Function *)v256, 0, 0, 1, 0, 0) & 1) != 0
               || ModuleFlag && ((isJumpTableCanonical ^ 1) & 1) == 0 && ((_DWORD)v256[4] & 0xFu) - 7 >= 2)
        {
          v258 = 0;
          goto LABEL_382;
        }
      }
LABEL_448:
      v330 = 0;
      do
      {
        if (((*(uint64_t (**)(__int128 *))((char *)&off_1E817B3A8 + v330))(&__dst) & 1) != 0)
          break;
        v14 = v330 == 16;
        v330 += 16;
      }
      while (!v14);
      v251 = *((_QWORD *)&__dst + 1);
      v249 = __dst;
      continue;
    }
    break;
  }
  v1014[0] = (uint64_t)v1013;
  v1014[1] = (uint64_t)&v1023;
  v1014[2] = (uint64_t)&v1020;
  if (__sz)
  {
    for (k = v985[1]; k; k = *(_QWORD *)(k + 8))
    {
      v332 = *(_QWORD *)(k + 24);
      v333 = *(_QWORD *)(v332 + 8);
      if (v333)
      {
        while (sub_1C4D9F8B4(*(_QWORD *)(v333 + 24)))
        {
          v333 = *(_QWORD *)(v333 + 8);
          if (!v333)
            goto LABEL_487;
        }
      }
      v334 = *(_QWORD *)(v332 - 32 * (*(_DWORD *)(v332 + 20) & 0x7FFFFFF) + 32);
      if (!v334 || *(_BYTE *)(v334 + 16) != 23)
        goto LABEL_1321;
      v336 = (unsigned int **)sub_1C571233C(v1014, *(_QWORD *)(v334 + 24));
      v337 = v336;
      v339 = v336[1];
      v338 = (unint64_t)v336[2];
      if ((unint64_t)v339 >= v338)
      {
        v340 = *v336;
        v341 = ((char *)v339 - (char *)*v336) >> 3;
        v342 = v341 + 1;
        if ((unint64_t)(v341 + 1) >> 61)
          goto LABEL_1313;
        v343 = v338 - (_QWORD)v340;
        if (v343 >> 2 > v342)
          v342 = v343 >> 2;
        if ((unint64_t)v343 >= 0x7FFFFFFFFFFFFFF8)
          v344 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v344 = v342;
        if (v344)
        {
          if (v344 >> 61)
LABEL_1317:
            sub_1C4764EE4();
          v345 = (char *)operator new(8 * v344);
        }
        else
        {
          v345 = 0;
        }
        v346 = &v345[8 * v341];
        *(_QWORD *)v346 = v332;
        v1 = (unsigned int *)(v346 + 8);
        if (v339 != v340)
        {
          do
          {
            v347 = *((_QWORD *)v339 - 1);
            v339 -= 2;
            *((_QWORD *)v346 - 1) = v347;
            v346 -= 8;
          }
          while (v339 != v340);
          v339 = *v337;
        }
        *v337 = (unsigned int *)v346;
        v337[1] = v1;
        v337[2] = (unsigned int *)&v345[8 * v344];
        if (v339)
          operator delete(v339);
      }
      else
      {
        *(_QWORD *)v339 = v332;
        v1 = v339 + 2;
      }
      v337[1] = v1;
LABEL_487:
      ;
    }
  }
  if (!v987)
    goto LABEL_576;
  v348 = *(_QWORD *)(v987 + 8);
  if (!v348)
    goto LABEL_576;
  while (2)
  {
    if (*((_DWORD *)v1013 + 7) != 42)
    {
      v975 = "llvm.icall.branch.funnel not supported on this target";
      goto LABEL_1320;
    }
    v1005 = v348;
    v349 = *(_QWORD *)(v348 + 24);
    v350 = *(unsigned __int8 *)(v349 + 16);
    if (v350 == 84)
    {
      v351 = 0;
    }
    else if (v350 == 39)
    {
      v351 = *(_DWORD *)(v349 + 80) + 1;
    }
    else
    {
      v351 = 2;
    }
    v352 = *(_DWORD *)(v349 + 20);
    if (v352 < 0
      && (v400 = v349 - 32 * (v352 & 0x7FFFFFF), v401 = *(_QWORD *)(v400 - 8), (v401 & 0xFFFFFFFF0) != 0))
    {
      v354 = -(uint64_t)(v352 & 0x7FFFFFF);
      v353 = *(_DWORD *)(v400 - 12) - *(_DWORD *)(v400 - v401);
    }
    else
    {
      v353 = 0;
      v354 = -(uint64_t)(v352 & 0x7FFFFFF);
    }
    if (((-32 * v351 + 32 * v353 - 32 * (_DWORD)v354 - 32) & 0x20) == 0)
    {
      v975 = "number of arguments should be odd";
      goto LABEL_1320;
    }
    v355 = 0;
    v356 = 0;
    v357 = 0;
    v358 = 1;
    while (2)
    {
      if (v350 == 84)
      {
        v359 = 0;
      }
      else if (v350 == 39)
      {
        v359 = (*(_DWORD *)(v349 + 80) + 1);
      }
      else
      {
        v359 = 2;
      }
      v360 = *(_DWORD *)(v349 + 20);
      if (v360 < 0 && (v390 = v360 & 0x7FFFFFF, (*(_QWORD *)(v349 - 8 - 32 * v390) & 0xFFFFFFFF0) != 0))
      {
        v362 = -v390;
        v361 = *(_DWORD *)(v349 - 32 * v390 - 12) - *(_DWORD *)(v349 - 32 * v390 - *(_QWORD *)(v349 - 32 * v390 - 8));
      }
      else
      {
        v361 = 0;
        v362 = -(uint64_t)(v360 & 0x7FFFFFF);
      }
      v363 = v349 - 32 - 32 * v359 + 32 * -v361;
      v364 = v349 + 32 * v362;
      if (v358 != ((unint64_t)(v363 - v364) >> 5))
      {
        v365 = *(uint64_t **)(v364 + 32 * v358);
        v366 = (llvm::DataLayout *)(*v1013 + 272);
        DWORD2(__dst) = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v366, *v365);
        if (DWORD2(__dst) > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 0, 0);
        else
          *(_QWORD *)&__dst = 0;
        v368 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v365, v366, (const void **)&__dst, 1, 0, 0, v367);
        if (DWORD2(__dst) >= 0x41)
          MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
        v369 = *(unsigned __int8 *)(v368 + 16);
        if ((v369 - 2) >= 2 && v369 != 0)
        {
          v975 = "Expected branch funnel operand to be global value";
          goto LABEL_1320;
        }
        *(_QWORD *)&__dst = v368;
        if (v1016)
        {
          v371 = (v1016 - 1) & ((v368 >> 4) ^ (v368 >> 9));
          v372 = (_QWORD *)(v1015[0] + 16 * v371);
          v373 = *v372;
          if (v368 != *v372)
          {
            v374 = 0;
            v375 = 1;
            while (v373 != -4096)
            {
              if (v374)
                v376 = 0;
              else
                v376 = v373 == -8192;
              if (v376)
                v374 = v372;
              v377 = v371 + v375++;
              v371 = v377 & (v1016 - 1);
              v372 = (_QWORD *)(v1015[0] + 16 * v371);
              v373 = *v372;
              if (v368 == *v372)
                goto LABEL_524;
            }
            if (v374)
              v378 = v374;
            else
              v378 = v372;
LABEL_523:
            v372 = sub_1C5714A68((uint64_t)v1015, (uint64_t *)&__dst, v378);
            *v372 = v368;
            v372[1] = 0;
          }
LABEL_524:
          v379 = v372[1];
          if (v356 >= v355)
          {
            v380 = (v356 - v357) >> 3;
            v381 = v380 + 1;
            if ((unint64_t)(v380 + 1) >> 61)
              goto LABEL_1313;
            if ((v355 - v357) >> 2 > v381)
              v381 = (v355 - v357) >> 2;
            if ((unint64_t)(v355 - v357) >= 0x7FFFFFFFFFFFFFF8)
              v382 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v382 = v381;
            if (v382)
            {
              if (v382 >> 61)
                goto LABEL_1317;
              v383 = (char *)operator new(8 * v382);
            }
            else
            {
              v383 = 0;
            }
            v384 = &v383[8 * v380];
            *(_QWORD *)v384 = v379;
            v385 = v384 + 8;
            if (v356 != v357)
            {
              do
              {
                v386 = *((_QWORD *)v356 - 1);
                v356 -= 8;
                *((_QWORD *)v384 - 1) = v386;
                v384 -= 8;
              }
              while (v356 != v357);
              v356 = v357;
            }
            v357 = v384;
            v355 = &v383[8 * v382];
            if (v356)
              operator delete(v356);
            v356 = v385;
          }
          else
          {
            *(_QWORD *)v356 = v379;
            v356 += 8;
          }
          v387 = sub_1C571247C(&v1023, (uint64_t *)(v379 & 0xFFFFFFFFFFFFFFFCLL));
          if (&v1024 == v387)
            v388 = 0;
          else
            v388 = sub_1C5715004((uint64_t)(v387 + 4));
          if (v358 != 1)
          {
            if (v1 != (unsigned int *)v388)
            {
              *(_QWORD *)(*(_QWORD *)v1 + 8) = *(_QWORD *)(*(_QWORD *)v1 + 8) & 1 | v388;
              *(_QWORD *)v1 = *(_QWORD *)v388;
              v389 = *(_QWORD *)(v388 + 8) & 0xFFFFFFFFFFFFFFFELL;
              *(_QWORD *)v388 = v1;
              *(_QWORD *)(v388 + 8) = v389;
            }
            v388 = (uint64_t)v1;
          }
          v358 += 2;
          LOBYTE(v350) = *(_BYTE *)(v349 + 16);
          v1 = (unsigned int *)v388;
          continue;
        }
        v378 = 0;
        goto LABEL_523;
      }
      break;
    }
    v391 = sub_1C484358C((uint64_t)&__p, v356 - v357 + 24, 3);
    ++v246;
    *(_QWORD *)v391 = v349;
    *(_DWORD *)(v391 + 8) = v246;
    v392 = (v356 - v357) >> 3;
    *(_QWORD *)(v391 + 16) = v392;
    if (v356 != v357)
    {
      v393 = (_QWORD *)(v391 + 24);
      v394 = 8 * v392;
      v395 = v357;
      do
      {
        v396 = *(_QWORD *)v395;
        v395 += 8;
        *v393++ = v396;
        v394 -= 8;
      }
      while (v394);
    }
    v397 = sub_1C571247C(&v1023, (uint64_t *)(v391 & 0xFFFFFFFFFFFFFFFCLL | 2));
    if (&v1024 == v397)
      v398 = 0;
    else
      v398 = sub_1C5715004((uint64_t)(v397 + 4));
    if (v1 != (unsigned int *)v398)
    {
      *(_QWORD *)(*(_QWORD *)v1 + 8) = *(_QWORD *)(*(_QWORD *)v1 + 8) & 1 | v398;
      *(_QWORD *)v1 = *(_QWORD *)v398;
      v399 = *(_QWORD *)(v398 + 8) & 0xFFFFFFFFFFFFFFFELL;
      *(_QWORD *)v398 = v1;
      *(_QWORD *)(v398 + 8) = v399;
    }
    if (v357)
      operator delete(v357);
    v348 = *(_QWORD *)(v1005 + 8);
    if (v348)
      continue;
    break;
  }
LABEL_576:
  v402 = (uint64_t)v1013;
  v403 = (_QWORD *)v1013[1];
  if (v403)
  {
    v1077 = 0uLL;
    LODWORD(v1078[0]) = 0;
    v948 = &v1020[5 * v1022];
    if ((_DWORD)v1021)
    {
      if (v1022)
      {
        v950 = 40 * v1022;
        v949 = v1020;
        while ((*v949 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v949 += 5;
          v950 -= 40;
          if (!v950)
            goto LABEL_1275;
        }
      }
      else
      {
        v949 = v1020;
      }
    }
    else
    {
LABEL_1275:
      v949 = &v1020[5 * v1022];
    }
    v951 = &v1020[5 * v1022];
    if (v949 != v951)
    {
      do
      {
        v952 = *v949;
        if (!*(_BYTE *)*v949)
        {
          v953 = *(_QWORD *)(v952 + 8);
          v954 = *(_QWORD *)v953;
          __dst = xmmword_1C85F4BB0;
          *(_QWORD *)&v1072 = 0;
          llvm::MD5::update((int *)&__dst, (int *)(v953 + 24), v954);
          llvm::MD5::final((int *)&__dst, (int *)&v1080);
          *(_QWORD *)&__dst = v1080;
          v955 = sub_1C5715044((uint64_t)&v1077, (uint64_t *)&__dst);
          sub_1C5712550((uint64_t)(v955 + 1), v952);
        }
        v956 = v949 + 5;
        v949 = v948;
        if (v956 != v948)
        {
          v949 = v956;
          while ((*v949 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v949 += 5;
            if (v949 == v948)
            {
              v949 = v948;
              break;
            }
          }
        }
      }
      while (v949 != v951);
      v403 = (_QWORD *)v1013[1];
    }
    v959 = (_QWORD *)*v403;
    v957 = v403 + 1;
    v958 = v959;
    if (v959 != v957)
    {
      do
      {
        v960 = (uint64_t *)v958[7];
        for (m = (uint64_t *)v958[8]; v960 != m; v402 = (uint64_t)v1013)
        {
          v962 = *v960;
          if (!*(_BYTE *)(*(_QWORD *)(v402 + 8) + 128) || (*(_WORD *)(v962 + 12) & 0x80) != 0)
          {
            v963 = *(_DWORD *)(v962 + 8);
            if (v962)
              v964 = v963 == 0;
            else
              v964 = 0;
            if (v964)
            {
              v962 = *(_QWORD *)(v962 + 72);
              v963 = *(_DWORD *)(v962 + 8);
            }
            if (v963 == 1)
            {
              v965 = *(_QWORD *)(v962 + 104);
              if (v965)
              {
                v966 = *(_QWORD **)v965;
                v967 = *(_QWORD **)(v965 + 8);
                if (v967 != *(_QWORD **)v965)
                {
                  do
                  {
                    *(_QWORD *)&__dst = 0;
                    *(_QWORD *)&__dst = *v966;
                    v969 = sub_1C5715044((uint64_t)&v1077, (uint64_t *)&__dst) + 1;
                    v968 = *v969;
                    if ((*v969 & 2) != 0)
                    {
                      v971 = v968 & 0xFFFFFFFFFFFFFFFCLL;
                      v969 = *(uint64_t **)v971;
                      v970 = *(_QWORD *)v971 + 8 * *(unsigned int *)(v971 + 8);
                    }
                    else
                    {
                      v970 = (uint64_t)&v969[v968 > 3];
                    }
                    while (v969 != (uint64_t *)v970)
                    {
                      v972 = *v969++;
                      *((_BYTE *)sub_1C571233C(v1014, v972) + 24) = 1;
                    }
                    ++v966;
                  }
                  while (v966 != v967);
                }
              }
            }
          }
          ++v960;
        }
        v973 = (_QWORD *)v958[1];
        if (v973)
        {
          do
          {
            v974 = v973;
            v973 = (_QWORD *)*v973;
          }
          while (v973);
        }
        else
        {
          do
          {
            v974 = (_QWORD *)v958[2];
            v14 = *v974 == (_QWORD)v958;
            v958 = v974;
          }
          while (!v14);
        }
        v958 = v974;
      }
      while (v974 != v957);
    }
    sub_1C629B364((uint64_t *)&v1077);
  }
  v981 = v1025 != 0;
  if (!v1025)
    goto LABEL_1257;
  v404 = v1023;
  if (v1023 == (uint64_t *)&v1024)
  {
    v407 = 0;
    v406 = 0;
    goto LABEL_616;
  }
  v405 = 0;
  v406 = 0;
  v407 = 0;
  while (2)
  {
    if ((v404[5] & 1) == 0)
      goto LABEL_608;
    v408 = v406;
    v409 = v407;
    v410 = 0;
    v411 = (unint64_t)(v404 + 4);
    while (2)
    {
      v412 = *(_QWORD *)(v411 + 16) & 3;
      v413 = *(_QWORD *)(v411 + 16) & 0xFFFFFFFFFFFFFFFCLL;
      if (v412 == 1)
        v414 = *(_QWORD *)(v411 + 16) & 0xFFFFFFFFFFFFFFFCLL;
      else
        v414 = 0;
      *(_QWORD *)&__dst = v414;
      if (v414)
      {
        v415 = *(_DWORD *)sub_1C5712658((uint64_t)&v1020, (uint64_t *)&__dst);
LABEL_592:
        if (v410 <= v415)
          v410 = v415;
      }
      else if (v412 == 2 && v413 != 0)
      {
        v415 = *(_DWORD *)(v413 + 8);
        goto LABEL_592;
      }
      v411 = *(_QWORD *)(v411 + 8) & 0xFFFFFFFFFFFFFFFELL;
      if (v411)
        continue;
      break;
    }
    if (v408 < (unint64_t)v405)
    {
      *(_QWORD *)v408 = v404;
      *(_DWORD *)(v408 + 8) = v410;
      v406 = v408 + 16;
      v407 = v409;
      goto LABEL_608;
    }
    v417 = (uint64_t)(v408 - (_QWORD)v409) >> 4;
    v418 = v417 + 1;
    if ((unint64_t)(v417 + 1) >> 60)
      goto LABEL_1313;
    if ((v405 - (char *)v409) >> 3 > v418)
      v418 = (v405 - (char *)v409) >> 3;
    if ((unint64_t)(v405 - (char *)v409) >= 0x7FFFFFFFFFFFFFF0)
      v419 = 0xFFFFFFFFFFFFFFFLL;
    else
      v419 = v418;
    if (v419 >> 60)
      goto LABEL_1317;
    v420 = (char *)operator new(16 * v419);
    v421 = &v420[16 * v417];
    *(_QWORD *)v421 = v404;
    *((_DWORD *)v421 + 2) = v410;
    v407 = (uint64_t *)v421;
    for (n = (uint64_t *)v408; n != v409; n -= 2)
    {
      *((_OWORD *)v407 - 1) = *((_OWORD *)n - 1);
      v407 -= 2;
    }
    v405 = &v420[16 * v419];
    v406 = (unint64_t)(v421 + 16);
    if (v409)
      operator delete(v409);
LABEL_608:
    v423 = (uint64_t *)v404[1];
    if (v423)
    {
      do
      {
        v424 = v423;
        v423 = (uint64_t *)*v423;
      }
      while (v423);
    }
    else
    {
      do
      {
        v424 = (uint64_t *)v404[2];
        v14 = *v424 == (_QWORD)v404;
        v404 = v424;
      }
      while (!v14);
    }
    v404 = v424;
    if (v424 != (uint64_t *)&v1024)
      continue;
    break;
  }
LABEL_616:
  v425 = 126 - 2 * __clz((uint64_t)(v406 - (_QWORD)v407) >> 4);
  if ((uint64_t *)v406 == v407)
    v426 = 0;
  else
    v426 = v425;
  sub_1C5715498(v407, v406, v426, 1);
  v979 = v407;
  if ((uint64_t *)v406 != v407)
  {
    v980 = v406;
    while (1)
    {
      v983 = v407;
      if ((*(_BYTE *)(*v407 + 40) & 1) != 0)
        break;
      v428 = 0;
      v429 = 0;
      v430 = 0;
      v431 = 0;
      v432 = 0;
      v433 = 0;
LABEL_682:
      v986 = v431;
      v1000 = v432 - v433;
      v470 = 126 - 2 * __clz(v1000);
      if (v432 == v433)
        v471 = 0;
      else
        v471 = v470;
      v472 = v428 - v429;
      v473 = 126 - 2 * __clz(v472);
      *(_QWORD *)&__dst = &v1020;
      if (v428 == v429)
        v474 = 0;
      else
        v474 = v473;
      sub_1C5715F9C((uint64_t)v429, v428, (uint64_t *)&__dst, v474, 1);
      v984 = v433;
      sub_1C5716FAC(v433, v432, v471, 1);
      v1034[0] = 0;
      v1034[1] = 0;
      v1035 = 0;
      if (v428 != v429)
      {
        v475 = 0;
        v476 = 1;
        do
        {
          sub_1C617C470((uint64_t)v1034, &v429[v475])[1] = v475;
          v475 = v476;
          v14 = v472 == v476++;
        }
        while (!v14);
      }
      v1012 = v429;
      __szb = (char *)v430 - (char *)v986;
      v1008 = v430 - v986;
      v982 = v428 - v429;
      sub_1C629B3C0(&v1031, v982);
      v1029[0] = 0;
      v1029[1] = 0;
      v1030 = 0;
      if (v430 != v986)
      {
        v477 = 0;
        v478 = v986;
        v479 = v1034[0];
        v480 = v1035;
        v481 = v1035 - 1;
        do
        {
          *(_QWORD *)&__dst = 0;
          v482 = *v478;
          *(_QWORD *)&__dst = v482;
          v483 = *(_QWORD *)(v482 + 8);
          v484 = v477;
          if (v483)
          {
            v485 = v482 + 24;
            v486 = v482 + 24 + 8 * v483;
            do
            {
              if (v480)
              {
                v487 = *(_QWORD *)(*(_QWORD *)v485 - 8 * *(unsigned int *)(*(_QWORD *)v485 + 8) + 8);
                v488 = ((v487 >> 4) ^ (v487 >> 9)) & v481;
                v489 = *(_QWORD *)(v479 + 16 * v488);
                if (v487 == v489)
                {
LABEL_698:
                  if ((_DWORD)v488 != v480)
                  {
                    v490 = (uint64_t **)((char *)v1031 + 24 * *(_QWORD *)(v479 + 16 * v488 + 8));
                    *(_QWORD *)&v1077 = v484;
                    sub_1C47BC21C(v490, (unint64_t *)&v1077, (uint64_t **)&v1077);
                  }
                }
                else
                {
                  v491 = 1;
                  while (v489 != -4096)
                  {
                    v492 = v488 + v491++;
                    v488 = v492 & v481;
                    v489 = *(_QWORD *)(v479 + 16 * v488);
                    if (v487 == v489)
                      goto LABEL_698;
                  }
                }
              }
              v485 += 8;
            }
            while (v485 != v486);
          }
          *sub_1C5717998((uint64_t)v1029, (uint64_t *)&__dst) = v484;
          v477 = v484 + 1;
          ++v478;
        }
        while (v478 != &v986[v1008]);
      }
      v493 = v984;
      if (v432 != v984)
      {
        do
        {
          v504 = *v493;
          v505 = v1032;
          if ((unint64_t)v1032 >= v1033)
          {
            v507 = v1031;
            v508 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1032 - (_BYTE *)v1031) >> 3);
            v509 = v508 + 1;
            if (v508 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_1313;
            if (0x5555555555555556 * ((uint64_t)(v1033 - (_QWORD)v1031) >> 3) > v509)
              v509 = 0x5555555555555556 * ((uint64_t)(v1033 - (_QWORD)v1031) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v1033 - (_QWORD)v1031) >> 3) >= 0x555555555555555)
              v510 = 0xAAAAAAAAAAAAAAALL;
            else
              v510 = v509;
            if (v510)
            {
              if (v510 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_1317;
              v511 = (char *)operator new(24 * v510);
            }
            else
            {
              v511 = 0;
            }
            v512 = &v511[24 * v508];
            v513 = &v511[24 * v510];
            *((_QWORD *)v512 + 2) = 0;
            *((_QWORD *)v512 + 1) = 0;
            *(_QWORD *)v512 = v512 + 8;
            v506 = v512 + 24;
            if (v505 == v507)
            {
              v1031 = &v511[24 * v508];
              v1032 = v512 + 24;
              v1033 = (unint64_t)v513;
              if (!v505)
                goto LABEL_735;
            }
            else
            {
              v514 = 0;
              do
              {
                v515 = &v512[v514 * 8];
                *((_QWORD *)v515 - 3) = v505[v514 - 3];
                v516 = &v505[v514 - 2];
                v517 = *v516;
                *(_QWORD *)&v512[v514 * 8 - 16] = *v516;
                v518 = (uint64_t)&v512[v514 * 8 - 16];
                v519 = v505[v514 - 1];
                *((_QWORD *)v515 - 1) = v519;
                if (v519)
                {
                  *(_QWORD *)(v517 + 16) = v518;
                  v505[v514 - 3] = v516;
                  *v516 = 0;
                  v505[v514 - 1] = 0;
                }
                else
                {
                  *((_QWORD *)v515 - 3) = v518;
                }
                v514 -= 3;
              }
              while (&v505[v514] != v507);
              v505 = v1031;
              v520 = v1032;
              v1031 = &v512[v514 * 8];
              v1032 = v512 + 24;
              v1033 = (unint64_t)v513;
              if (v520 != v505)
              {
                do
                {
                  v521 = v520 - 3;
                  sub_1C47655E8((uint64_t)(v520 - 3), (_QWORD *)*(v520 - 2));
                  v520 = v521;
                }
                while (v521 != v505);
              }
              if (!v505)
                goto LABEL_735;
            }
            operator delete(v505);
          }
          else
          {
            v1032[2] = 0;
            v505[1] = 0;
            *v505 = v505 + 1;
            v506 = v505 + 3;
          }
LABEL_735:
          v1032 = v506;
          v522 = *(_QWORD *)(v504 + 16);
          if (v522)
          {
            v523 = (uint64_t *)(v504 + 24);
            v524 = 8 * v522;
            do
            {
              v525 = *v523++;
              *(_QWORD *)&__dst = v525;
              v526 = sub_1C5717998((uint64_t)v1029, (uint64_t *)&__dst);
              sub_1C47BC21C((uint64_t **)v506 - 3, (unint64_t *)v526, (uint64_t **)v526);
              v524 -= 8;
            }
            while (v524);
          }
          ++v493;
        }
        while (v493 != &v984[v1000]);
      }
      v494 = (uint64_t *)v1031;
      v495 = v1032;
      v496 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1032 - (_BYTE *)v1031) >> 3);
      v497 = (uint64_t *)v980;
      v498 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v499 = v1012;
      v500 = v984;
      if ((char *)v1032 - (_BYTE *)v1031 < 1)
      {
LABEL_712:
        sub_1C5717B80(v494, v495, v496, 0, 0);
      }
      else
      {
        v501 = 0xAAAAAAAAAAAAAAABLL * (((char *)v1032 - (_BYTE *)v1031) >> 3);
        while (1)
        {
          v502 = (uint64_t *)operator new(24 * v501, v498);
          if (v502)
            break;
          v503 = v501 > 1;
          v501 >>= 1;
          if (!v503)
            goto LABEL_712;
        }
        v527 = v502;
        sub_1C5717B80(v494, v495, v496, v502, v501);
        operator delete(v527);
      }
      sub_1C629B504(&v1026, v1008);
      v530 = v1031;
      v529 = v1032;
      while (v530 != v529)
      {
        llvm::lowertypetests::GlobalLayoutBuilder::addFragment(&v1026, v530);
        v530 += 3;
      }
      v531 = v986;
      if (v430 == v986)
      {
        v533 = 0;
        v534 = 0;
        v532 = 1;
        v402 = (uint64_t)v1013;
      }
      else
      {
        v402 = (uint64_t)v1013;
        if ((__szb & 0x8000000000000000) != 0)
          goto LABEL_1313;
        v532 = *(unsigned __int8 *)(*(_QWORD *)*v986 + 16) == 3;
        v533 = (char *)operator new(__szb);
        bzero(v533, __szb & 0xFFFFFFFFFFFFFFF8);
        v531 = v986;
        v534 = &v533[__szb & 0xFFFFFFFFFFFFFFF8];
      }
      v536 = v1026.i64[1];
      v535 = v1026.i64[0];
      v537 = (unint64_t *)v533;
      while (v535 != v536)
      {
        v538 = *(_QWORD **)v535;
        v539 = *(_QWORD **)(v535 + 8);
        while (v538 != v539)
        {
          v540 = v531[*v538];
          if (v532 != (*(_BYTE *)(*(_QWORD *)v540 + 16) == 3))
          {
            v975 = "Type identifier may not contain both global variables and functions";
            goto LABEL_1320;
          }
          *v537++ = v540;
          ++v538;
        }
        v535 += 24;
      }
      v541 = (v534 - v533) >> 3;
      v1001 = v533;
      v1009 = v541;
      if (v532)
      {
        v709 = *(uint64_t ***)v402;
        v1077 = 0uLL;
        LODWORD(v1078[0]) = 0;
        v978 = v534;
        if (v534 == v533)
        {
          v710 = 0;
          v711 = 0;
          v712 = 0;
          goto LABEL_1117;
        }
        v757 = 0;
        v758 = 0;
        LOBYTE(__szd) = 0;
        v759 = 0;
        v711 = 0;
        v710 = 0;
        v760 = v533;
        v989 = &v533[8 * v541];
        v992 = (uint64_t)(v709 + 34);
        while (1)
        {
          *(_QWORD *)&__dst = *(_QWORD *)v760;
          v761 = *(_QWORD *)__dst;
          if ((*(_WORD *)(*(_QWORD *)__dst + 34) & 0x3F) != 0)
            v762 = (*(_WORD *)(*(_QWORD *)__dst + 34) & 0x3F) - 1;
          else
            llvm::DataLayout::getAlignment(v992, *(_QWORD *)(v761 + 24));
          v763 = v762;
          if (__szd > v762)
            v763 = __szd;
          __szd = v763;
          v764 = (v757 + v758 + (1 << v762) - 1) & -(1 << v762);
          *sub_1C5717998((uint64_t)&v1077, (uint64_t *)&__dst) = v764;
          if (v764)
          {
            llvm::ArrayType::get((llvm::ArrayType *)v1013[6], (llvm::Type *)(v764 - v757));
            v767 = llvm::ConstantAggregateZero::get(v765, v766);
            v768 = v767;
            if (v711 >= v759)
            {
              v770 = (v711 - v710) >> 3;
              v771 = v770 + 1;
              if ((unint64_t)(v770 + 1) >> 61)
                goto LABEL_1313;
              if ((v759 - v710) >> 2 > v771)
                v771 = (v759 - v710) >> 2;
              if ((unint64_t)(v759 - v710) >= 0x7FFFFFFFFFFFFFF8)
                v772 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v772 = v771;
              if (v772)
              {
                if (v772 >> 61)
                  goto LABEL_1317;
                v773 = (char *)operator new(8 * v772);
              }
              else
              {
                v773 = 0;
              }
              v774 = &v773[8 * v770];
              *(_QWORD *)v774 = v768;
              v769 = v774 + 8;
              if (v711 != v710)
              {
                do
                {
                  v775 = *((_QWORD *)v711 - 1);
                  v711 -= 8;
                  *((_QWORD *)v774 - 1) = v775;
                  v774 -= 8;
                }
                while (v711 != v710);
                v711 = v710;
              }
              v710 = v774;
              v759 = &v773[8 * v772];
              if (v711)
                operator delete(v711);
              goto LABEL_1092;
            }
            *(_QWORD *)v711 = v767;
            v711 += 8;
          }
          v769 = v711;
LABEL_1092:
          v776 = *(_QWORD *)(v761 - 32);
          if (v769 >= v759)
          {
            v777 = (v769 - v710) >> 3;
            v778 = v777 + 1;
            if ((unint64_t)(v777 + 1) >> 61)
              goto LABEL_1313;
            if ((v759 - v710) >> 2 > v778)
              v778 = (v759 - v710) >> 2;
            if ((unint64_t)(v759 - v710) >= 0x7FFFFFFFFFFFFFF8)
              v779 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v779 = v778;
            if (v779)
            {
              if (v779 >> 61)
                goto LABEL_1317;
              v780 = (char *)operator new(8 * v779);
            }
            else
            {
              v780 = 0;
            }
            v781 = &v780[8 * v777];
            *(_QWORD *)v781 = v776;
            v711 = v781 + 8;
            while (v769 != v710)
            {
              v782 = *((_QWORD *)v769 - 1);
              v769 -= 8;
              *((_QWORD *)v781 - 1) = v782;
              v781 -= 8;
            }
            v759 = &v780[8 * v779];
            if (v710)
              operator delete(v710);
            v710 = v781;
            v499 = v1012;
          }
          else
          {
            *(_QWORD *)v769 = v776;
            v711 = v769 + 8;
          }
          v783 = *(_QWORD *)(v761 + 24);
          sub_1C4768AD0(v992, v783);
          v785 = v784;
          v787 = v786 == 1;
          llvm::DataLayout::getAlignment(v992, v783);
          v790 = v789;
          if (v787)
          v791 = ((1 << v790) + ((unint64_t)(v785 + 7) >> 3) - 1) & -(1 << v790);
          v757 = v791 + v764;
          v792 = (v791 - 1) | ((v791 - 1) >> 1) | (((v791 - 1) | ((v791 - 1) >> 1)) >> 2);
          v793 = v792 | (v792 >> 4) | ((v792 | (v792 >> 4)) >> 8);
          v794 = (v793 | (v793 >> 16) | ((v793 | (v793 >> 16)) >> 32)) - v791;
          v795 = ((v791 + 31) & 0xFFFFFFFFFFFFFFE0) - v791;
          if (v794 + 1 <= 0x20)
            v758 = v794 + 1;
          else
            v758 = v795;
          v760 += 8;
          v533 = v1001;
          v541 = v1009;
          if (v760 == v989)
          {
            v402 = (uint64_t)v1013;
            v709 = (uint64_t **)*v1013;
            v712 = __szd;
LABEL_1117:
            v796 = (v711 - v710) >> 3;
            TypeForElements = (llvm::ConstantAggregateZero *)llvm::ConstantStruct::getTypeForElements(*v709, (uint64_t)v710, v796, 0);
            v798 = llvm::ConstantStruct::get(TypeForElements, (llvm::Type *)v710, v796);
            v799 = (char *)operator new(0x78uLL);
            *((_DWORD *)v799 + 13) = *((_DWORD *)v799 + 13) & 0x38000000 | 1;
            *(_QWORD *)v799 = 0;
            *((_QWORD *)v799 + 1) = 0;
            *((_QWORD *)v799 + 2) = 0;
            *((_QWORD *)v799 + 3) = v799 + 32;
            v800 = *(_QWORD *)v402;
            v801 = *(llvm::PointerType **)v798;
            LOWORD(v1073) = 257;
            llvm::GlobalVariable::GlobalVariable((uint64_t)(v799 + 32), v800, v801, 1, 8, (uint64_t)v798, (uint64_t)&__dst, 0, 0, 0, 0);
            *((_DWORD *)v799 + 16) = *((_DWORD *)v799 + 16) & 0xFFC0FFFF | ((v712 << 16) + 0x10000);
            v1002 = *(llvm::PointerType **)v798;
            v1010 = (llvm::GetElementPtrInst **)v798;
            v802 = (uint64_t *)(v799 + 32);
            sub_1C57188A8(v402, v499, v982, (uint64_t *)v799 + 4, (uint64_t)&v1077);
            if (v978 == v533)
            {
LABEL_1142:
              MEMORY[0x1CAA32FB4](v1077, 8);
              v497 = (uint64_t *)v980;
              v500 = v984;
              if (v710)
                operator delete(v710);
              goto LABEL_777;
            }
            v804 = 0;
            v805 = 0;
            v806 = 1;
            while (2)
            {
              v807 = **(llvm::Value ***)&v533[8 * v805];
              v1081 = 0;
              v1080 = 0;
              v808 = *(_QWORD *)(v402 + 72);
              v809 = *(llvm::ConstantInt **)v808;
              DWORD2(__dst) = *(_DWORD *)(v808 + 8) >> 8;
              if (DWORD2(__dst) > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&__dst, 0, 0);
              else
                *(_QWORD *)&__dst = 0;
              v811 = llvm::ConstantInt::get(v809, (llvm::LLVMContext *)&__dst, v803);
              if (DWORD2(__dst) >= 0x41 && (_QWORD)__dst)
                MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
              v1080 = v811;
              v812 = *(_QWORD *)(v402 + 72);
              v813 = *(llvm::ConstantInt **)v812;
              v814 = *(unsigned int *)(v812 + 8);
              DWORD2(__dst) = v814 >> 8;
              if (v814 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&__dst, v804, 0);
              }
              else
              {
                if (v814 <= 0xFF)
                  v815 = 0;
                else
                  v815 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v814);
                *(_QWORD *)&__dst = v815 & v804;
              }
              v816 = llvm::ConstantInt::get(v813, (llvm::LLVMContext *)&__dst, v810);
              if (DWORD2(__dst) >= 0x41 && (_QWORD)__dst)
                MEMORY[0x1CAA32F9C](__dst, 0x1000C8000313F17);
              v1081 = (uint64_t)v816;
              ElementPtr = llvm::ConstantExpr::getGetElementPtr(*v1010, v802, (llvm::Value *)&v1080, 2, 0, 0, 0);
              v818 = *(llvm::PointerType **)(*((_QWORD *)v1002 + 2) + 8 * v804);
              v819 = *((_DWORD *)v807 + 8) & 0xF;
              LOWORD(v1073) = 257;
              v402 = (uint64_t)v1013;
              v820 = (llvm::Value *)llvm::GlobalAlias::create(v818, 0, v819, (uint64_t)&__dst, ElementPtr, *v1013);
              v821 = v820;
              v822 = *((_DWORD *)v807 + 8) & 0x30;
              v823 = *((_DWORD *)v820 + 8);
              v824 = v823 & 0xFFFFFFCF | v822;
              *((_DWORD *)v820 + 8) = v824;
              if ((v823 & 0xFu) - 7 < 2)
              {
LABEL_1135:
                *((_DWORD *)v821 + 8) = v824 | 0x4000;
              }
              else if (v822 && (llvm::GlobalValue::hasExternalWeakLinkage(v820) & 1) == 0)
              {
                v824 = *((_DWORD *)v821 + 8);
                goto LABEL_1135;
              }
              llvm::Value::takeName(v821, v807);
              llvm::Value::doRAUW(v807, v821, (llvm::Value *)1);
              llvm::GlobalVariable::eraseFromParent(v807);
              v805 = v806;
              v14 = v541 == v806++;
              v804 += 2;
              if (v14)
                goto LABEL_1142;
              continue;
            }
          }
        }
      }
      v542 = *(_DWORD *)(v402 + 28);
      if (v542 - 63 >= 2)
      {
        v977 = v534;
        if (v542 > 0x2A || ((1 << v542) & 0x6800000000ALL) == 0)
        {
LABEL_1324:
          v975 = "Unsupported architecture for jump tables";
          goto LABEL_1320;
        }
        v988 = v534 - v533;
        v1036[1] = 0;
        v1036[0] = 0;
        v1037 = 0;
        v565 = sub_1C571993C(v402);
        if (v977 != v533)
        {
          v566 = v565;
          v567 = 0;
          v568 = 0;
          v569 = 1;
          do
          {
            *sub_1C5717998((uint64_t)v1036, (uint64_t *)&v533[8 * v568]) = v567;
            v568 = v569;
            v14 = v541 == v569++;
            v567 += v566;
          }
          while (!v14);
        }
        v570 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(***(_QWORD ***)v402 + 1576), 0, 0, 0);
        v571 = *(_QWORD *)v402;
        v572 = (llvm::Type *)*(unsigned int *)(*(_QWORD *)v402 + 284);
        *(_QWORD *)&__dst = ".cfi.jumptable";
        LOWORD(v1073) = 259;
        v573 = operator new(0x80uLL);
        v574 = (llvm::ConstantExpr *)(v573 + 2);
        v573[7] = v573[7] & 0x38000000 | 0x40000000;
        v976 = v573;
        *(_QWORD *)v573 = 0;
        llvm::Function::Function((uint64_t *)v573 + 1, v570, 8, v572, (uint64_t)&__dst, v571);
        v575 = (llvm::ArrayType *)v1013[6];
        v576 = sub_1C571993C((uint64_t)v1013);
        llvm::ArrayType::get(v575, (llvm::Type *)v576);
        llvm::ArrayType::get(v577, (llvm::Type *)v541);
        __szc = v578;
        v579 = (llvm::Constant *)llvm::PointerType::get(v578, 0);
        v580 = v533;
        v581 = v1013;
        PointerCast = (uint64_t *)llvm::ConstantExpr::getPointerCast(v574, v579, v582);
        sub_1C57188A8((uint64_t)v1013, v1012, v982, PointerCast, (uint64_t)v1036);
        sub_1C57117C4((uint64_t)&__dst, *v1013);
        if (v977 == v580)
        {
LABEL_801:
          sub_1C57121F0((uint64_t)&__dst);
          v1060[1] = 0;
          v1060[0] = 0;
          v1061 = 0;
          v1058[1] = 0;
          v1058[0] = 0;
          v1059 = 0;
          LODWORD(v1050) = 0;
          v1054 = 0;
          v1055 = 0;
          v1049 = &unk_1E81A7208;
          v1057 = v1060;
          v1056 = 0;
          v1052 = 0;
          v1053 = 0;
          v1051 = 0;
          LODWORD(v1041) = 0;
          v1045 = 0;
          v1046 = 0;
          v1040 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
          v1048 = v1058;
          v1047 = 0;
          v1043 = 0;
          v1044 = 0;
          v1042 = 0;
          *(_QWORD *)&__dst = &v1072;
          *((_QWORD *)&__dst + 1) = 0x1000000000;
          if ((unint64_t)v988 >= 0x41)
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)&v1072, v988 >> 2, 8);
          v584 = *((_DWORD *)v581 + 7);
          v533 = v1001;
          v585 = v977;
          if (v584 == 39 || v584 == 1)
          {
            if (v977 == v1001)
            {
              v586 = 0;
              v587 = 0;
              goto LABEL_807;
            }
            v587 = 0;
            v586 = 0;
            v713 = v584 == 39;
            v714 = v1001;
            while (1)
            {
              if (!*(_BYTE *)(*(_QWORD *)v714 + 16))
              {
                ++v587;
                goto LABEL_1021;
              }
              v715 = *(_QWORD *)(**(_QWORD **)v714 + 112);
              if (!v715)
                goto LABEL_1013;
              if (!*(_DWORD *)(v715 + 8))
                goto LABEL_1013;
              v716 = *(_QWORD *)(v715 + 40);
              if (!v716)
                goto LABEL_1013;
              v717 = *(_DWORD *)(v716 + 40);
              if (!v717)
                goto LABEL_1013;
              v718 = *(_QWORD *)(v716 + 24);
              v719 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
              if ((v719 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
              {
                v737 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v737 = 0xFF51AFD7ED558CCDLL;
                qword_1ED7EAC80 = v737;
                __cxa_guard_release(&qword_1ED7EAC88);
              }
              v720 = 0x9DDFEA08EB382D69
                   * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                                          * (qword_1ED7EAC80 ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
              v721 = (-348639895 * ((v720 >> 47) ^ v720)) ^ 0x74616566;
              for (ii = 1; ; ++ii)
              {
                v723 = v721 & (v717 - 1);
                v724 = v718 + 24 * v723;
                v725 = *(_QWORD **)v724;
                if (*(_QWORD *)v724 == -1)
                {
                  if ("target-features" == (char *)-1)
                    goto LABEL_991;
                  goto LABEL_980;
                }
                if (v725 != (_QWORD *)-2)
                  break;
                if ("target-features" == (char *)-2)
                  goto LABEL_991;
LABEL_980:
                if (v725 == (_QWORD *)-1)
                  goto LABEL_1013;
                v721 = ii + v723;
              }
              if (*(_QWORD *)(v724 + 8) != 15)
                goto LABEL_980;
              if (*v725 != 0x662D746567726174 || *(_QWORD *)((char *)v725 + 7) != 0x7365727574616566)
                goto LABEL_980;
LABEL_991:
              v727 = *(_QWORD *)(v724 + 16);
              if (!v727)
                goto LABEL_1013;
              *(_QWORD *)&v1077 = v1078;
              *((_QWORD *)&v1077 + 1) = 0x600000000;
              v728 = *(unsigned int *)(v727 + 16);
              v1080 = (void *)(v727 + *(unsigned int *)(v727 + 12) + 25);
              v1081 = v728;
              v729 = 1;
              llvm::StringRef::split((char *)&v1080, (uint64_t)&v1077, 44, -1, 1);
              if (DWORD2(v1077))
              {
                v730 = (uint64_t **)v1077;
                while (1)
                {
                  if (v730[1] == (uint64_t *)11)
                  {
                    v731 = *v730;
                    if (**v730 == 0x6D2D626D7568742DLL && *(uint64_t *)((char *)*v730 + 3) == 0x65646F6D2D626D75)
                    {
                      v729 = 0;
                      LOBYTE(v717) = 0;
                      goto LABEL_1010;
                    }
                    v733 = *v731;
                    v734 = *(uint64_t *)((char *)v731 + 3);
                    if (v733 == 0x6D2D626D7568742BLL && v734 == 0x65646F6D2D626D75)
                      break;
                  }
                  v730 += 2;
                  if (v730 == (uint64_t **)(v1077 + 16 * DWORD2(v1077)))
                  {
                    v729 = 1;
                    goto LABEL_1009;
                  }
                }
                v729 = 0;
LABEL_1009:
                LOBYTE(v717) = 1;
              }
LABEL_1010:
              if ((_QWORD *)v1077 != v1078)
                free((void *)v1077);
              if (v729)
LABEL_1013:
                LOBYTE(v717) = v713;
              if ((v717 & 1) != 0)
                v736 = v586;
              else
                v736 = v587;
              if ((v717 & 1) != 0)
                v586 = v736 + 1;
              else
                v587 = v736 + 1;
              v533 = v1001;
LABEL_1021:
              v714 += 8;
              if (v714 == &v1001[8 * v541])
              {
LABEL_807:
                if (v587 > v586)
                  v584 = 1;
                else
                  v584 = 39;
                v497 = (uint64_t *)v980;
                v585 = v977;
                break;
              }
            }
          }
          v499 = v1012;
          if (v585 == v533)
          {
LABEL_812:
            v402 = (uint64_t)v1013;
            v976[10] = (((__clz(sub_1C571993C((uint64_t)v1013)) << 16) ^ 0x1F0000) + 0x10000) | v976[10] & 0xFFC0FFFF;
            if (*((_DWORD *)v1013 + 8) != 15)
              *((_QWORD *)v976 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v976 + 15, **((uint64_t ***)v976 + 1), -1, 17);
            switch(v584)
            {
              case 39:
                v588 = (uint64_t *)(v976 + 30);
                *((_QWORD *)v976 + 15) = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v976 + 30), **((uint64_t ***)v976 + 1), -1, "target-features", 0xFuLL, "+thumb-mode", 0xBuLL);
                v589 = (uint64_t *)**((_QWORD **)v976 + 1);
                v590 = (llvm::AttributeList *)(v976 + 30);
                v591 = "target-cpu";
                v592 = 10;
                v593 = "cortex-a8";
                v594 = 9;
                break;
              case 3:
                v588 = (uint64_t *)(v976 + 30);
                *((_QWORD *)v976 + 15) = llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v976 + 30), **((uint64_t ***)v976 + 1), -1, "branch-target-enforcement", 0x19uLL, "false", 5uLL);
                v589 = (uint64_t *)**((_QWORD **)v976 + 1);
                v590 = (llvm::AttributeList *)(v976 + 30);
                v591 = "sign-return-address";
                v592 = 19;
                v593 = "none";
                v594 = 4;
                break;
              case 1:
                v588 = (uint64_t *)(v976 + 30);
                v589 = (uint64_t *)**((_QWORD **)v976 + 1);
                v590 = (llvm::AttributeList *)(v976 + 30);
                v591 = "target-features";
                v592 = 15;
                v593 = "-thumb-mode";
                v594 = 11;
                break;
              default:
LABEL_1030:
                *((_QWORD *)v976 + 15) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v976 + 15, **((uint64_t ***)v976 + 1), -1, 37);
                v738 = *(_QWORD **)*v1013;
                *(_QWORD *)&v1077 = "entry";
                v1079 = 259;
                v739 = (uint64_t **)operator new();
                *v739 = (uint64_t *)(*v738 + 1600);
                v739[1] = 0;
                v740 = *((_DWORD *)v739 + 5) & 0xC0000000;
                *((_DWORD *)v739 + 4) = 22;
                *((_DWORD *)v739 + 5) = v740;
                v739[3] = 0;
                v739[4] = 0;
                v739[5] = (uint64_t *)(v739 + 5);
                v739[6] = (uint64_t *)(v739 + 5);
                v739[7] = 0;
                llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v976 + 20), v739);
                v741 = (uint64_t *)*((_QWORD *)v976 + 10);
                v739[4] = (uint64_t *)(v976 + 20);
                v739[3] = v741;
                v741[1] = (uint64_t)(v739 + 3);
                *((_QWORD *)v976 + 10) = v739 + 3;
                llvm::Value::setName((uint64_t ***)v739, (uint64_t)&v1077);
                v742 = **v739;
                v1080 = v1082;
                v1081 = 0x200000000;
                v1086 = v742;
                v1087 = &v1095;
                v1088 = v1096;
                v1089 = 0;
                v1090 = 0;
                v1091 = 512;
                v1092 = 7;
                v1093 = 0;
                v1094 = 0;
                v1095 = &unk_1E8167888;
                v1096[0] = &unk_1E8167A08;
                v1084 = v739;
                v1085 = v739 + 5;
                *(_QWORD *)&v1077 = v1078;
                *((_QWORD *)&v1077 + 1) = 0x1000000000;
                v743 = DWORD2(__dst);
                if (DWORD2(__dst) < 0x11)
                {
                  v744 = 0;
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1077, (uint64_t)v1078, DWORD2(__dst), 8);
                  v743 = DWORD2(__dst);
                  v744 = DWORD2(v1077);
                }
                v500 = v984;
                if (v743)
                {
                  v754 = (uint64_t **)__dst;
                  v755 = 8 * v743;
                  do
                  {
                    v756 = **v754;
                    if (v744 >= HIDWORD(v1077))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1077, (uint64_t)v1078, v744 + 1, 8);
                      v744 = DWORD2(v1077);
                    }
                    *(_QWORD *)(v1077 + 8 * v744) = v756;
                    v744 = ++DWORD2(v1077);
                    ++v754;
                    v755 -= 8;
                  }
                  while (v755);
                }
                v745 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(*(_QWORD *)v1086 + 1576), (uint64_t *)v1077, v744, 0);
                v746 = *((_BYTE *)v1057 + 23);
                if (v746 >= 0)
                  v747 = (uint64_t)v1057;
                else
                  v747 = (uint64_t)*v1057;
                if (v746 >= 0)
                  v748 = v746 & 0x7F;
                else
                  v748 = (uint64_t)v1057[1];
                v749 = *((_BYTE *)v1048 + 23);
                if (v749 >= 0)
                  v750 = (uint64_t)v1048;
                else
                  v750 = (uint64_t)*v1048;
                if (v749 >= 0)
                  v751 = v749 & 0x7F;
                else
                  v751 = (uint64_t)v1048[1];
                v752 = llvm::InlineAsm::get(v745, v747, v748, v750, v751, 1, 0, 0, 0);
                if (v752)
                  v753 = *(uint64_t ***)(v752 + 72);
                else
                  v753 = 0;
                v1039 = 257;
                sub_1C4774778((uint64_t *)&v1080, v753, v752, (uint64_t *)__dst, DWORD2(__dst), (uint64_t)v1038, 0);
                LLVMBuildUnreachable_0((uint64_t)&v1080);
                if ((_QWORD *)v1077 != v1078)
                  free((void *)v1077);
                if (v1080 != v1082)
                  free(v1080);
                if ((__int128 *)__dst != &v1072)
                  free((void *)__dst);
                v1040 = off_1E81A6E70;
                if (v1047 == 1 && v1042)
                  MEMORY[0x1CAA32F9C](v1042, 0x1000C8077774924);
                v1049 = off_1E81A6E70;
                if (v1056 == 1 && v1051)
                  MEMORY[0x1CAA32F9C](v1051, 0x1000C8077774924);
                if (SHIBYTE(v1059) < 0)
                  operator delete(v1058[0]);
                if (SHIBYTE(v1061) < 0)
                  operator delete(v1060[0]);
                v560 = v1036[0];
                goto LABEL_776;
            }
            *v588 = llvm::AttributeList::addAttributeAtIndex(v590, v589, -1, (unsigned __int8 *)v591, v592, (unsigned __int8 *)v593, v594);
            goto LABEL_1030;
          }
          v683 = 0;
          v684 = 1;
          v685 = DWORD2(__dst);
          while (1)
          {
            v686 = **(_QWORD **)&v533[8 * v683];
            v687 = v685;
            if ((v584 - 41) > 1)
              break;
            v688 = (_DWORD *)v1053;
            if ((unint64_t)(v1052 - v1053) > 5)
            {
              *(_WORD *)(v1053 + 4) = 31524;
              *v688 = 544238954;
              v1053 += 6;
              v689 = (llvm::raw_ostream *)&v1049;
            }
            else
            {
              v689 = llvm::raw_ostream::write((llvm::raw_ostream *)&v1049, "jmp ${", 6uLL);
            }
            sub_1C5E21910(v689, v687, 0, 0, 0);
            v690 = (_QWORD *)*((_QWORD *)v689 + 4);
            if (*((_QWORD *)v689 + 3) - (_QWORD)v690 > 7uLL)
            {
              *v690 = 0xA746C70407D633ALL;
              *((_QWORD *)v689 + 4) += 8;
            }
            else
            {
              llvm::raw_ostream::write(v689, ":c}@plt\n", 8uLL);
            }
            v691 = v1053;
            if ((unint64_t)(v1052 - v1053) > 0xE)
            {
              *(_QWORD *)v1053 = *(_QWORD *)"int3\nint3\nint3\n";
              *(_QWORD *)(v691 + 7) = *(_QWORD *)"t3\nint3\n";
              v1053 += 15;
              goto LABEL_946;
            }
            v692 = &v1049;
            v693 = "int3\nint3\nint3\n";
            v694 = 15;
LABEL_945:
            llvm::raw_ostream::write((llvm::raw_ostream *)v692, v693, v694);
LABEL_946:
            if ((_DWORD)v687)
              v705 = ",s";
            else
              v705 = "s";
            if ((_DWORD)v687)
              v706 = 2;
            else
              v706 = 1;
            if (v706 <= v1043 - (uint64_t)v1044)
            {
              memcpy(v1044, v705, v706);
              v1044 = (char *)v1044 + v706;
            }
            else
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v1040, v705, v706);
            }
            v707 = DWORD2(__dst);
            if (DWORD2(__dst) >= (unint64_t)HIDWORD(__dst))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)&v1072, DWORD2(__dst) + 1, 8);
              v707 = DWORD2(__dst);
            }
            *(_QWORD *)(__dst + 8 * v707) = v686;
            v685 = ++DWORD2(__dst);
            v683 = v684;
            v14 = v1009 == v684++;
            if (v14)
              goto LABEL_812;
          }
          if (v584 == 39)
          {
            v702 = (_DWORD *)v1053;
            if ((unint64_t)(v1052 - v1053) <= 4)
            {
              v700 = "b.w $";
              v701 = 5;
              goto LABEL_942;
            }
            *(_BYTE *)(v1053 + 4) = 36;
            *v702 = 544681570;
            v708 = v1053 + 5;
          }
          else
          {
            if (v584 == 3)
            {
              v695 = llvm::Module::getModuleFlag(*(_QWORD *)(v686 + 40), "branch-target-enforcement", 0x19uLL);
              if (v695)
              {
                v696 = *(_QWORD *)(v695 + 128);
                if (v696)
                {
                  v697 = (_QWORD *)(v696 + 24);
                  if (*(_DWORD *)(v696 + 32) >= 0x41u)
                    v697 = (_QWORD *)*v697;
                  if (*v697)
                  {
                    v698 = (_DWORD *)v1053;
                    if ((unint64_t)(v1052 - v1053) > 5)
                    {
                      *(_WORD *)(v1053 + 4) = 2659;
                      *v698 = 543781986;
                      v1053 += 6;
                    }
                    else
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)&v1049, "bti c\n", 6uLL);
                    }
                  }
                }
              }
            }
            else if (v584 != 1)
            {
              goto LABEL_1324;
            }
            v699 = (_WORD *)v1053;
            if ((unint64_t)(v1052 - v1053) <= 2)
            {
              v700 = "b $";
              v701 = 3;
LABEL_942:
              v703 = llvm::raw_ostream::write((llvm::raw_ostream *)&v1049, v700, v701);
LABEL_943:
              sub_1C5E21910(v703, v687, 0, 0, 0);
              v704 = (_BYTE *)*((_QWORD *)v703 + 4);
              if (*((_BYTE **)v703 + 3) != v704)
              {
                *v704 = 10;
                ++*((_QWORD *)v703 + 4);
                goto LABEL_946;
              }
              v692 = (void **)v703;
              v693 = "\n";
              v694 = 1;
              goto LABEL_945;
            }
            *(_BYTE *)(v1053 + 2) = 36;
            *v699 = 8290;
            v708 = v1053 + 3;
          }
          v1053 = v708;
          v703 = (llvm::raw_ostream *)&v1049;
          goto LABEL_943;
        }
        v595 = 0;
        v596 = 0;
        while (1)
        {
          v597 = *(_QWORD *)&v1001[8 * v595];
          v598 = *(llvm::PoisonValue ***)v597;
          v599 = *(unsigned __int8 *)(v597 + 16);
          v600 = v581[12];
          v601 = *(llvm::ConstantInt **)v600;
          DWORD2(v1077) = *(_DWORD *)(v600 + 8) >> 8;
          if (DWORD2(v1077) > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v1077, 0, 0);
          else
            *(_QWORD *)&v1077 = 0;
          v603 = llvm::ConstantInt::get(v601, (llvm::LLVMContext *)&v1077, v583);
          if (DWORD2(v1077) >= 0x41 && (_QWORD)v1077)
            MEMORY[0x1CAA32F9C](v1077, 0x1000C8000313F17);
          v1080 = v603;
          v604 = v581[12];
          v605 = *(llvm::ConstantInt **)v604;
          v606 = *(unsigned int *)(v604 + 8);
          DWORD2(v1077) = v606 >> 8;
          if (v606 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v1077, v595, 0);
          }
          else
          {
            if (v606 <= 0xFF)
              v607 = 0;
            else
              v607 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v606);
            *(_QWORD *)&v1077 = v607 & v595;
          }
          v608 = llvm::ConstantInt::get(v605, (llvm::LLVMContext *)&v1077, v602);
          if (DWORD2(v1077) >= 0x41 && (_QWORD)v1077)
            MEMORY[0x1CAA32F9C](v1077, 0x1000C8000313F17);
          v1081 = (uint64_t)v608;
          v609 = (llvm::PoisonValue **)llvm::ConstantExpr::getGetElementPtr(__szc, PointerCast, (llvm::Value *)&v1080, 2, 1, 0, 0);
          if (*v609 != *v598)
            v609 = (llvm::PoisonValue **)sub_1C537D3B8((llvm *)0x31, (uint64_t)v609, *v598, 0);
          v610 = *(unsigned __int8 *)(*(_QWORD *)&v1001[8 * v595] + 17);
          if (v599)
          {
            if (!*(_BYTE *)(*(_QWORD *)&v1001[8 * v595] + 17))
              goto LABEL_876;
            v620 = v581[1];
            if ((*((_BYTE *)v598 + 23) & 0x10) == 0)
            {
              v653 = v609;
              v651 = 0;
              HIBYTE(v1078[0]) = 0;
              v654 = &v1077;
              goto LABEL_873;
            }
            v621 = **(_QWORD **)*v598;
            v622 = *(_QWORD *)(v621 + 152);
            v623 = *(unsigned int *)(v621 + 168);
            if (!(_DWORD)v623)
              goto LABEL_864;
            LODWORD(v624) = (v623 - 1) & ((v598 >> 4) ^ (v598 >> 9));
            v625 = (llvm::PoisonValue ***)(v622 + 16 * v624);
            v626 = *v625;
            if (*v625 != v598)
            {
              v627 = 1;
              while (v626 != (llvm::PoisonValue **)-4096)
              {
                v628 = v624 + v627++;
                v624 = v628 & (v623 - 1);
                v626 = *(llvm::PoisonValue ***)(v622 + 16 * v624);
                if (v626 == v598)
                {
                  v625 = (llvm::PoisonValue ***)(v622 + 16 * v624);
                  goto LABEL_865;
                }
              }
LABEL_864:
              v625 = (llvm::PoisonValue ***)(v622 + 16 * v623);
            }
LABEL_865:
            v649 = (unint64_t *)v625[1];
            v652 = *v649;
            v650 = v649 + 2;
            v651 = v652;
            if (v652 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_1313;
            v653 = v609;
            if (v651 >= 0x17)
            {
              v655 = (v651 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v651 | 7) != 0x17)
                v655 = v651 | 7;
              v656 = v655 + 1;
              v654 = (__int128 *)operator new(v655 + 1);
              v657 = v656 | 0x8000000000000000;
              v541 = v1009;
              v1078[0] = v657;
              *(_QWORD *)&v1077 = v654;
              *((_QWORD *)&v1077 + 1) = v651;
            }
            else
            {
              HIBYTE(v1078[0]) = v651;
              v654 = &v1077;
              if (!v651)
              {
LABEL_873:
                *((_BYTE *)v654 + v651) = 0;
                sub_1C5017940(v620 + 144, (const void **)&v1077, (uint64_t)&v1077);
                if (SHIBYTE(v1078[0]) < 0)
                  operator delete((void *)v1077);
                v581 = v1013;
                v609 = v653;
LABEL_876:
                v658 = v598[3];
                v659 = (_DWORD)v598[4] & 0xF;
                v1079 = 257;
                v660 = (uint64_t ***)llvm::GlobalAlias::create(v658, 0, v659, (uint64_t)&v1077, (uint64_t)v609, *v581);
                v661 = v660;
                v662 = (_DWORD)v598[4] & 0x30;
                v663 = *((_DWORD *)v660 + 8);
                v664 = v663 & 0xFFFFFFCF | v662;
                *((_DWORD *)v660 + 8) = v664;
                if ((v663 & 0xFu) - 7 < 2)
                {
LABEL_909:
                  *((_DWORD *)v661 + 8) = v664 | 0x4000;
                }
                else if (v662 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v660) & 1) == 0)
                {
                  v664 = *((_DWORD *)v661 + 8);
                  goto LABEL_909;
                }
                llvm::Value::takeName((llvm::Value *)v661, (llvm::Value *)v598);
                if ((*((_BYTE *)v661 + 23) & 0x10) != 0)
                {
                  v665 = ***v661;
                  v666 = *(_QWORD *)(v665 + 152);
                  v667 = *(unsigned int *)(v665 + 168);
                  if (!(_DWORD)v667)
                    goto LABEL_885;
                  LODWORD(v668) = (v667 - 1) & ((v661 >> 4) ^ (v661 >> 9));
                  v669 = (uint64_t ****)(v666 + 16 * v668);
                  v670 = *v669;
                  if (*v669 != v661)
                  {
                    v671 = 1;
                    while (v670 != (uint64_t ***)-4096)
                    {
                      v672 = v668 + v671++;
                      v668 = v672 & (v667 - 1);
                      v670 = *(uint64_t ****)(v666 + 16 * v668);
                      if (v670 == v661)
                      {
                        v669 = (uint64_t ****)(v666 + 16 * v668);
                        goto LABEL_886;
                      }
                    }
LABEL_885:
                    v669 = (uint64_t ****)(v666 + 16 * v667);
                  }
LABEL_886:
                  v673 = (uint64_t *)v669[1];
                  v674 = *v673;
                  v1079 = 773;
                  *(_QWORD *)&v1077 = v673 + 2;
                  *((_QWORD *)&v1077 + 1) = v674;
                  v1078[0] = ".cfi";
                  llvm::Value::setName((uint64_t ***)v598, (uint64_t)&v1077);
                }
                sub_1C57144B0((uint64_t)v598, (llvm::Value *)v661, 1);
                if (((_DWORD)v598[4] & 0xFu) - 7 >= 2)
                {
                  *((_DWORD *)v598 + 8) = (_DWORD)v598[4] & 0xFFFFFFCF | 0x10;
                  if ((llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v598) & 1) == 0)
                    *((_DWORD *)v598 + 8) |= 0x4000u;
                }
                goto LABEL_905;
              }
            }
            memmove(v654, v650, v651);
            goto LABEL_873;
          }
          v611 = *(_BYTE *)(*(_QWORD *)&v1001[8 * v595] + 17) ? 0 : 7;
          if ((*((_BYTE *)v598 + 23) & 0x10) != 0)
            break;
          v630 = 0;
          v631 = &byte_1C871356D;
LABEL_851:
          v633 = v598[3];
          v1079 = 773;
          *(_QWORD *)&v1077 = v631;
          *((_QWORD *)&v1077 + 1) = v630;
          v1078[0] = ".cfi_jt";
          v634 = v609;
          v635 = (llvm::GlobalValue *)llvm::GlobalAlias::create(v633, 0, v611, (uint64_t)&v1077, (uint64_t)v609, *v581);
          v636 = v635;
          if (v610)
          {
            v638 = *((_DWORD *)v635 + 8);
            v639 = v638 & 0xFFFFFFCF | 0x10;
            *((_DWORD *)v635 + 8) = v639;
            if ((v638 & 0xFu) - 7 < 2)
              goto LABEL_856;
            if ((llvm::GlobalValue::hasExternalWeakLinkage(v635) & 1) == 0)
            {
              v639 = *((_DWORD *)v636 + 8);
LABEL_856:
              *((_DWORD *)v636 + 8) = v639 | 0x4000;
            }
            v640 = v581[1];
            if ((*((_BYTE *)v598 + 23) & 0x10) != 0)
            {
              v641 = **(_QWORD **)*v598;
              v642 = *(_QWORD *)(v641 + 152);
              v643 = *(unsigned int *)(v641 + 168);
              if (!(_DWORD)v643)
                goto LABEL_890;
              LODWORD(v644) = (v643 - 1) & ((v598 >> 4) ^ (v598 >> 9));
              v645 = (llvm::PoisonValue ***)(v642 + 16 * v644);
              v646 = *v645;
              if (*v645 != v598)
              {
                v647 = 1;
                while (v646 != (llvm::PoisonValue **)-4096)
                {
                  v648 = v644 + v647++;
                  v644 = v648 & (v643 - 1);
                  v646 = *(llvm::PoisonValue ***)(v642 + 16 * v644);
                  if (v646 == v598)
                  {
                    v645 = (llvm::PoisonValue ***)(v642 + 16 * v644);
                    goto LABEL_891;
                  }
                }
LABEL_890:
                v645 = (llvm::PoisonValue ***)(v642 + 16 * v643);
              }
LABEL_891:
              v675 = (unint64_t *)v645[1];
              v678 = *v675;
              v676 = v675 + 2;
              v677 = v678;
              if (v678 > 0x7FFFFFFFFFFFFFF7)
                goto LABEL_1313;
              if (v677 >= 0x17)
              {
                v680 = (v677 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v677 | 7) != 0x17)
                  v680 = v677 | 7;
                v681 = v680 + 1;
                v679 = (__int128 *)operator new(v680 + 1);
                v682 = v681 | 0x8000000000000000;
                v541 = v1009;
                v1078[0] = v682;
                *(_QWORD *)&v1077 = v679;
                *((_QWORD *)&v1077 + 1) = v677;
              }
              else
              {
                HIBYTE(v1078[0]) = v677;
                v679 = &v1077;
                if (!v677)
                  goto LABEL_899;
              }
              memmove(v679, v676, v677);
            }
            else
            {
              v677 = 0;
              HIBYTE(v1078[0]) = 0;
              v679 = &v1077;
            }
LABEL_899:
            *((_BYTE *)v679 + v677) = 0;
            sub_1C5017940(v640 + 168, (const void **)&v1077, (uint64_t)&v1077);
            if (SHIBYTE(v1078[0]) < 0)
              operator delete((void *)v1077);
            v581 = v1013;
            goto LABEL_902;
          }
          v637 = (uint64_t **)*v581;
          *(_QWORD *)&v1077 = v636;
          sub_1C5F50CB4(v637, "llvm.used", 9uLL, (llvm::UndefValue **)&v1077, 1);
LABEL_902:
          if (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)v598))
            sub_1C5713D98(v581, (unsigned __int8 *)v598, v634, 0);
          else
            sub_1C57144B0((uint64_t)v598, (llvm::Value *)v634, 0);
LABEL_905:
          v595 = ++v596;
          if (v541 == v596)
            goto LABEL_801;
        }
        v612 = **(_QWORD **)*v598;
        v613 = *(_QWORD *)(v612 + 152);
        v614 = *(unsigned int *)(v612 + 168);
        if ((_DWORD)v614)
        {
          LODWORD(v615) = (v614 - 1) & ((v598 >> 4) ^ (v598 >> 9));
          v616 = (llvm::PoisonValue ***)(v613 + 16 * v615);
          v617 = *v616;
          if (*v616 == v598)
          {
LABEL_850:
            v629 = v616[1];
            v632 = *v629;
            v631 = (char *)(v629 + 2);
            v630 = v632;
            goto LABEL_851;
          }
          v618 = 1;
          while (v617 != (llvm::PoisonValue **)-4096)
          {
            v619 = v615 + v618++;
            v615 = v619 & (v614 - 1);
            v617 = *(llvm::PoisonValue ***)(v613 + 16 * v615);
            if (v617 == v598)
            {
              v616 = (llvm::PoisonValue ***)(v613 + 16 * v615);
              goto LABEL_850;
            }
          }
        }
        v616 = (llvm::PoisonValue ***)(v613 + 16 * v614);
        goto LABEL_850;
      }
      __dst = 0uLL;
      LODWORD(v1072) = 0;
      if (v534 == v533)
      {
        v558 = 0;
        v545 = v982;
      }
      else
      {
        v543 = 8 * v541;
        v544 = (void **)v533;
        v545 = v982;
        do
        {
          v1080 = *v544;
          v546 = *(llvm::Function **)v1080;
          if (llvm::Function::hasAddressTaken(*(llvm::Function **)v1080, 0, 0, 1, 0, 0))
          {
            v548 = **(uint64_t ***)v546;
            v549 = *(_QWORD *)(v402 + 88);
            v550 = *(_QWORD *)(v402 + 104);
            v551 = *(llvm::ConstantInt **)v549;
            v552 = *(unsigned int *)(v549 + 8);
            DWORD2(v1077) = v552 >> 8;
            if (v552 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v1077, v550, 0);
            }
            else
            {
              if (v552 <= 0xFF)
                v553 = 0;
              else
                v553 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v552);
              *(_QWORD *)&v1077 = v553 & v550;
            }
            v555 = llvm::ConstantInt::get(v551, (llvm::LLVMContext *)&v1077, v547);
            if (DWORD2(v1077) >= 0x41 && (_QWORD)v1077)
              MEMORY[0x1CAA32F9C](v1077, 0x1000C8000313F17);
            v1049 = llvm::ValueAsMetadata::get(v555, v554);
            Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v548, &v1049, 1, 0, 1);
            llvm::Value::setMetadata((uint64_t)v546, "wasm.index", 0xAuLL, Impl);
            v557 = *(_QWORD *)(v402 + 104);
            *(_QWORD *)(v402 + 104) = v557 + 1;
            *sub_1C5717998((uint64_t)&__dst, (uint64_t *)&v1080) = v557;
          }
          ++v544;
          v543 -= 8;
        }
        while (v543);
        v558 = __dst;
        v500 = v984;
      }
      v559 = llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)(v402 + 80), v528);
      sub_1C57188A8(v402, v1012, v545, v559, (uint64_t)&__dst);
      v560 = v558;
LABEL_776:
      MEMORY[0x1CAA32FB4](v560, 8);
LABEL_777:
      if (v533)
        operator delete(v533);
      if (v1027)
      {
        v1028 = v1027;
        operator delete(v1027);
      }
      *(_QWORD *)&__dst = &v1026;
      sub_1C4DB60AC((void ***)&__dst);
      MEMORY[0x1CAA32FB4](v1029[0], 8);
      v561 = v1031;
      if (v1031)
      {
        v562 = v1032;
        v563 = v1031;
        if (v1032 != v1031)
        {
          do
          {
            v564 = v562 - 3;
            sub_1C47655E8((uint64_t)(v562 - 3), (_QWORD *)*(v562 - 2));
            v562 = v564;
          }
          while (v564 != v561);
          v563 = v1031;
        }
        v1032 = v561;
        operator delete(v563);
      }
      MEMORY[0x1CAA32FB4](v1034[0], 8);
      if (v500)
        operator delete(v500);
      if (v986)
        operator delete(v986);
      if (v499)
        operator delete(v499);
      v407 = v983 + 2;
      if (v983 + 2 == v497)
        goto LABEL_1148;
    }
    v433 = 0;
    v432 = 0;
    v434 = 0;
    v431 = 0;
    v430 = 0;
    v999 = 0;
    v1006 = 0;
    v429 = 0;
    v435 = 0;
    v436 = *v407 + 32;
    while (2)
    {
      v437 = *(_QWORD *)(v436 + 16);
      if ((v437 & 3) != 0)
      {
        if ((*(_QWORD *)(v436 + 16) & 3) == 1)
        {
          v438 = v437 & 0xFFFFFFFFFFFFFFFCLL;
          if (v435 < v999)
          {
            *v435++ = v438;
            goto LABEL_632;
          }
          __sza = (size_t)v434;
          v441 = v435 - v429;
          v442 = v441 + 1;
          if ((unint64_t)(v441 + 1) >> 61)
            goto LABEL_1313;
          v443 = v433;
          if (((char *)v999 - (char *)v429) >> 2 > v442)
            v442 = ((char *)v999 - (char *)v429) >> 2;
          if ((unint64_t)((char *)v999 - (char *)v429) >= 0x7FFFFFFFFFFFFFF8)
            v444 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v444 = v442;
          if (v444)
          {
            if (v444 >> 61)
              goto LABEL_1317;
            v445 = v431;
            v446 = (char *)operator new(8 * v444);
            v431 = v445;
          }
          else
          {
            v446 = 0;
          }
          v460 = (uint64_t *)&v446[8 * v441];
          *v460 = v438;
          v428 = v460 + 1;
          while (v435 != v429)
          {
            v461 = *--v435;
            *--v460 = v461;
          }
          v999 = (uint64_t *)&v446[8 * v444];
          if (v429)
          {
            v462 = v431;
            operator delete(v429);
            v431 = v462;
          }
          v429 = v460;
          v433 = v443;
          v434 = (uint64_t *)__sza;
LABEL_681:
          v435 = v428;
          v436 = *(_QWORD *)(v436 + 8) & 0xFFFFFFFFFFFFFFFELL;
          if (!v436)
            goto LABEL_682;
          continue;
        }
        v440 = v437 & 0xFFFFFFFFFFFFFFFCLL;
        if (v432 < v434)
        {
          *v432++ = v440;
          goto LABEL_632;
        }
        v454 = v432 - v433;
        v455 = v454 + 1;
        if ((unint64_t)(v454 + 1) >> 61)
          goto LABEL_1313;
        if (((char *)v434 - (char *)v433) >> 2 > v455)
          v455 = ((char *)v434 - (char *)v433) >> 2;
        if ((unint64_t)((char *)v434 - (char *)v433) >= 0x7FFFFFFFFFFFFFF8)
          v456 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v456 = v455;
        v1011 = v429;
        if (v456)
        {
          if (v456 >> 61)
            goto LABEL_1317;
          v457 = v433;
          v458 = v431;
          v459 = (char *)operator new(8 * v456);
          v431 = v458;
          v433 = v457;
        }
        else
        {
          v459 = 0;
        }
        v466 = (uint64_t *)&v459[8 * v454];
        *v466 = v440;
        v467 = v466 + 1;
        while (v432 != v433)
        {
          v468 = *--v432;
          *--v466 = v468;
        }
        v434 = (uint64_t *)&v459[8 * v456];
        if (v433)
        {
          v469 = v431;
          operator delete(v433);
          v431 = v469;
        }
        v428 = v435;
        v432 = v467;
        v433 = v466;
      }
      else
      {
        v439 = v437 & 0xFFFFFFFFFFFFFFFCLL;
        if (v430 < v1006)
        {
          *v430++ = v439;
LABEL_632:
          v428 = v435;
          goto LABEL_681;
        }
        v447 = v430 - v431;
        v448 = v447 + 1;
        if ((unint64_t)(v447 + 1) >> 61)
          goto LABEL_1313;
        if (((char *)v1006 - (char *)v431) >> 2 > v448)
          v448 = ((char *)v1006 - (char *)v431) >> 2;
        v449 = 0x1FFFFFFFFFFFFFFFLL;
        if ((unint64_t)((char *)v1006 - (char *)v431) < 0x7FFFFFFFFFFFFFF8)
          v449 = v448;
        v1011 = v429;
        v1007 = v449;
        if (v449)
        {
          if (v449 >> 61)
            goto LABEL_1317;
          v450 = v434;
          v451 = v433;
          v452 = v431;
          v453 = (char *)operator new(8 * v449);
          v431 = v452;
          v433 = v451;
          v434 = v450;
        }
        else
        {
          v453 = 0;
        }
        v463 = (unint64_t *)&v453[8 * v447];
        *v463 = v439;
        v464 = v463 + 1;
        while (v430 != v431)
        {
          v465 = *--v430;
          *--v463 = v465;
        }
        v1006 = (unint64_t *)&v453[8 * v1007];
        if (v431)
          operator delete(v431);
        v428 = v435;
        v430 = v464;
        v431 = v463;
      }
      break;
    }
    v429 = v1011;
    goto LABEL_681;
  }
LABEL_1148:
  v825 = *(_QWORD *)(v402 + 136);
  v826 = *(_QWORD **)(v402 + 144);
  if ((uint64_t)v826 - v825 < 1)
  {
LABEL_1152:
    sub_1C57199D8(v825, v826, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v826 - v825) >> 3), 0, 0, v427);
  }
  else
  {
    v827 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v828 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v826 - v825) >> 3);
    while (1)
    {
      v829 = operator new(56 * v828, v827);
      if (v829)
        break;
      v503 = v828 > 1;
      v828 >>= 1;
      if (!v503)
        goto LABEL_1152;
    }
    v830 = v829;
    sub_1C57199D8(v825, v826, 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v826 - v825) >> 3), (uint64_t)v829, v828, v427);
    operator delete(v830);
  }
  v831 = *(_QWORD **)(v402 + 136);
  v832 = *(_QWORD *)(v402 + 144) - (_QWORD)v831;
  if (v832)
  {
    v833 = v832 / 56;
    if (v833 >> 61)
LABEL_1313:
      abort();
    v834 = 8 * v833;
    v835 = operator new(8 * v833);
    bzero(v835, v834);
    v836 = 0;
    v1076 = 0;
    v1074 = 0u;
    v1075 = 0u;
    v1072 = 0u;
    v1073 = 0u;
    __dst = 0u;
    v837 = 1;
    v838 = v1013;
    do
    {
      v839 = &v831[7 * v836];
      LOBYTE(v1080) = 0;
      llvm::lowertypetests::ByteArrayBuilder::allocate((unint64_t *)&__dst, v839, v839[3], (unint64_t *)v835 + v836, &v1080);
      v843 = (llvm::ValueAsMetadata *)v839[5];
      v841 = (llvm::GlobalVariable **)(v839 + 5);
      v842 = v843;
      v844 = v838[6];
      v845 = (char)v1080;
      v846 = *(llvm::ConstantInt **)v844;
      v847 = *(unsigned int *)(v844 + 8);
      DWORD2(v1077) = v847 >> 8;
      if (v847 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v1077, v1080, 0);
      }
      else
      {
        if (v847 <= 0xFF)
          v848 = 0;
        else
          v848 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v847);
        *(_QWORD *)&v1077 = (v848 & v1080);
      }
      v849 = llvm::ConstantInt::get(v846, (llvm::LLVMContext *)&v1077, v840);
      if (DWORD2(v1077) >= 0x41 && (_QWORD)v1077)
        MEMORY[0x1CAA32F9C](v1077, 0x1000C8000313F17);
      v850 = sub_1C537D3B8((llvm *)0x30, (uint64_t)v849, (llvm::Constant *)v1013[7], 0);
      llvm::Value::doRAUW(v842, v850, (llvm::Value *)1);
      llvm::GlobalVariable::eraseFromParent(*v841);
      v851 = (_BYTE *)v831[7 * v836 + 6];
      if (v851)
        *v851 = v845;
      v836 = v837;
      v838 = v1013;
      v831 = (_QWORD *)v1013[17];
      v14 = 0x6DB6DB6DB6DB6DB7 * ((v1013[18] - (uint64_t)v831) >> 3) == v837++;
    }
    while (!v14);
    v832 = *((_QWORD *)&__dst + 1);
    v852 = (_BYTE *)__dst;
    v402 = (uint64_t)v1013;
    v853 = v835;
  }
  else
  {
    v853 = 0;
    v852 = 0;
    v1076 = 0;
    v1074 = 0u;
    v1075 = 0u;
    v1072 = 0u;
    v1073 = 0u;
    __dst = 0u;
  }
  v854 = (llvm::Type *)(v832 - (_QWORD)v852);
  llvm::ArrayType::get((llvm::ArrayType *)(***(_QWORD ***)v402 + 1912), (llvm::Type *)(v832 - (_QWORD)v852));
  v856 = llvm::ConstantDataSequential::getImpl(v852, v854, v855);
  v857 = (char *)operator new(0x78uLL);
  v858 = (uint64_t *)(v857 + 32);
  *((_DWORD *)v857 + 13) = *((_DWORD *)v857 + 13) & 0x38000000 | 1;
  *(_QWORD *)v857 = 0;
  *((_QWORD *)v857 + 1) = 0;
  *((_QWORD *)v857 + 2) = 0;
  *((_QWORD *)v857 + 3) = v857 + 32;
  v859 = *(_QWORD *)v402;
  v860 = *v856;
  v1079 = 257;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v857 + 32), v859, v860, 1, 8, (uint64_t)v856, (uint64_t)&v1077, 0, 0, 0, 0);
  v862 = *(_QWORD **)(v402 + 136);
  if (*(_QWORD **)(v402 + 144) != v862)
  {
    v863 = (uint64_t *)v402;
    v864 = 0;
    v865 = 1;
    do
    {
      v1081 = 0;
      v1080 = 0;
      v866 = v863[12];
      v867 = *(llvm::ConstantInt **)v866;
      DWORD2(v1077) = *(_DWORD *)(v866 + 8) >> 8;
      if (DWORD2(v1077) > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v1077, 0, 0);
      else
        *(_QWORD *)&v1077 = 0;
      v869 = llvm::ConstantInt::get(v867, (llvm::LLVMContext *)&v1077, v861);
      if (DWORD2(v1077) >= 0x41 && (_QWORD)v1077)
        MEMORY[0x1CAA32F9C](v1077, 0x1000C8000313F17);
      v1080 = v869;
      v870 = (llvm::ConstantInt **)v1013[12];
      v871 = v853[v864];
      v872 = *v870;
      v873 = *((unsigned int *)v870 + 2);
      DWORD2(v1077) = v873 >> 8;
      if (v873 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v1077, v871, 0);
      }
      else
      {
        if (v873 <= 0xFF)
          v874 = 0;
        else
          v874 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v873);
        *(_QWORD *)&v1077 = v874 & v871;
      }
      v875 = llvm::ConstantInt::get(v872, (llvm::LLVMContext *)&v1077, v868);
      if (DWORD2(v1077) >= 0x41 && (_QWORD)v1077)
        MEMORY[0x1CAA32F9C](v1077, 0x1000C8000313F17);
      v1081 = (uint64_t)v875;
      v876 = llvm::ConstantExpr::getGetElementPtr(*v856, v858, (llvm::Value *)&v1080, 2, 1, 0, 0);
      v863 = v1013;
      v877 = (llvm::PointerType *)v1013[6];
      *(_QWORD *)&v1077 = "bits";
      v1079 = 259;
      v878 = (llvm::Value *)llvm::GlobalAlias::create(v877, 0, 8, (uint64_t)&v1077, v876, *v1013);
      v879 = &v862[7 * v864];
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v879[4], v878, (llvm::Value *)1);
      llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v879[4]);
      v864 = v865;
      v862 = (_QWORD *)v1013[17];
      v14 = 0x6DB6DB6DB6DB6DB7 * ((v1013[18] - (uint64_t)v862) >> 3) == v865++;
    }
    while (!v14);
  }
  if ((_QWORD)__dst)
  {
    *((_QWORD *)&__dst + 1) = __dst;
    operator delete((void *)__dst);
  }
  if (v853)
    operator delete(v853);
  if (v1013[1])
  {
    v880 = (_QWORD *)*v1013;
    *(_QWORD *)&__dst = "aliases";
    LOWORD(v1073) = 259;
    v881 = llvm::Module::getNamedMetadata((uint64_t)v880, (uint64_t)&__dst);
    if (v881)
    {
      v882 = v881;
      v883 = *(unsigned int *)(*(_QWORD *)(v881 + 48) + 8);
      if ((_DWORD)v883)
      {
        v884 = 0;
        v885 = 8 * v883;
        do
        {
          v886 = *(_QWORD *)(**(_QWORD **)(v882 + 48) + v884);
          v887 = (_QWORD *)(v886 - 8 * *(unsigned int *)(v886 + 8));
          v888 = *(_QWORD **)(*v887 + 8);
          v891 = *v888;
          v890 = (unsigned __int8 *)(v888 + 3);
          v889 = v891;
          v892 = *(_QWORD **)(v887[1] + 8);
          v895 = *v892;
          v893 = (unsigned __int8 *)(v892 + 3);
          v894 = v895;
          *(_QWORD *)&v1077 = v893;
          *((_QWORD *)&v1077 + 1) = v895;
          v896 = v1017;
          v897 = v1019;
          if (sub_1C57146F8(v1017, v1019, (uint64_t)&v1077, &__dst))
          {
            *(_QWORD *)&__dst = 0;
            if ((sub_1C57146F8(v896, v897, (uint64_t)&v1077, &__dst) & 1) != 0)
            {
              if (*(_DWORD *)(__dst + 16))
                goto LABEL_1207;
            }
            else
            {
              v898 = sub_1C5714804((uint64_t)&v1017, (uint64_t)&v1077, (_QWORD *)__dst);
              *(_OWORD *)v898 = v1077;
              v898[2] = 0;
              v898[3] = 0;
            }
            v899 = sub_1C4FB7E80(*(uint64_t **)(*v1013 + 112), v893, v894);
            if (v899 && *(_BYTE *)(v899 + 16) == 1)
            {
              v900 = *(unsigned int *)(v886 + 8);
              v901 = *(llvm::UndefValue **)(*(_QWORD *)(v886 - 8 * v900 + 16) + 128);
              if (v901)
                v902 = *((_BYTE *)v901 + 16) == 16;
              else
                v902 = 0;
              if (!v902)
              {
                v901 = llvm::Constant::getAggregateElement(v901, 0);
                v900 = *(unsigned int *)(v886 + 8);
              }
              v903 = -v900;
              v906 = (int *)*((_QWORD *)v901 + 3);
              v904 = (int *)((char *)v901 + 24);
              v905 = v906;
              if (v904[2] < 0x41)
                v905 = v904;
              v907 = *v905;
              v908 = *(llvm::UndefValue **)(*(_QWORD *)(v886 + 8 * v903 + 24) + 128);
              if (v908)
                v909 = *((_BYTE *)v908 + 16) == 16;
              else
                v909 = 0;
              if (!v909)
                v908 = llvm::Constant::getAggregateElement(v908, 0);
              v912 = (uint64_t *)*((_QWORD *)v908 + 3);
              v910 = (char *)v908 + 24;
              v911 = v912;
              if (*((_DWORD *)v910 + 2) < 0x41u)
                v911 = (uint64_t *)v910;
              v913 = *v911;
              LOWORD(v1073) = 257;
              v914 = sub_1C4FB7E80(*(uint64_t **)(*v1013 + 112), v893, v894);
              if (v914)
              {
                if (*(_BYTE *)(v914 + 16) == 1)
                  v916 = (const llvm::Twine *)v914;
                else
                  v916 = 0;
              }
              else
              {
                v916 = 0;
              }
              v917 = (llvm::GlobalValue *)llvm::GlobalAlias::create((llvm::GlobalAlias *)&__dst, v916, v915);
              v918 = v917;
              v919 = *((_DWORD *)v917 + 8) & 0xF;
              v920 = *((_DWORD *)v917 + 8) & 0xFFFFFFCF | (16 * (v907 & 3));
              *((_DWORD *)v917 + 8) = v920;
              if ((v919 - 7) < 2)
              {
LABEL_1240:
                *((_DWORD *)v918 + 8) = v920 | 0x4000;
              }
              else if (16 * (v907 & 3) && (llvm::GlobalValue::hasExternalWeakLinkage(v917) & 1) == 0)
              {
                v920 = *((_DWORD *)v918 + 8);
                goto LABEL_1240;
              }
              if (v913)
              {
                v921 = *((_DWORD *)v918 + 8);
                *((_DWORD *)v918 + 8) = v921 & 0xFFFFFFF0 | 4;
                if ((v921 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v918) & 1) == 0)
                  *((_DWORD *)v918 + 8) |= 0x4000u;
              }
              v922 = (llvm::Value *)sub_1C4FB7E80(*(uint64_t **)(*v1013 + 112), v890, v889);
              if (!v922 || (v923 = v922, *((_BYTE *)v922 + 16)))
              {
                LOWORD(v1073) = 261;
                *(_QWORD *)&__dst = v890;
                *((_QWORD *)&__dst + 1) = v889;
                llvm::Value::setName((uint64_t ***)v918, (uint64_t)&__dst);
              }
              else
              {
                llvm::Value::takeName(v918, v922);
                llvm::Value::doRAUW(v923, v918, (llvm::Value *)1);
                llvm::Function::eraseFromParent(v923);
              }
            }
          }
LABEL_1207:
          v884 += 8;
        }
        while (v885 != v884);
      }
    }
    if (v1013[1])
    {
      v924 = (_QWORD *)*v1013;
      *(_QWORD *)&__dst = "symvers";
      LOWORD(v1073) = 259;
      v925 = llvm::Module::getNamedMetadata((uint64_t)v924, (uint64_t)&__dst);
      if (v925)
      {
        v926 = v925;
        v927 = *(unsigned int *)(*(_QWORD *)(v925 + 48) + 8);
        if ((_DWORD)v927)
        {
          v928 = 0;
          v929 = v1017;
          v930 = 8 * v927;
          v931 = v1019;
          do
          {
            v932 = *(_QWORD *)(**(_QWORD **)(v926 + 48) + v928);
            v933 = (_QWORD *)(v932 - 8 * *(unsigned int *)(v932 + 8));
            v934 = *(_QWORD **)(*v933 + 8);
            v937 = *v934;
            v935 = (void (**)(llvm::raw_ostream *__hidden))(v934 + 3);
            v936 = v937;
            v1040 = v935;
            v1041 = v937;
            v938 = *(uint64_t **)(v933[1] + 8);
            v939 = *v938;
            if (sub_1C57146F8(v929, v931, (uint64_t)&v1040, &__dst))
            {
              v940 = v938 + 3;
              v941 = (_QWORD *)*v1013;
              v1080 = ".symver ";
              v1082[0] = v935;
              v1082[1] = v936;
              v1083 = 1283;
              *(_QWORD *)&v1077 = &v1080;
              v1078[0] = ", ";
              v1079 = 770;
              *(_QWORD *)&__dst = &v1077;
              *(_QWORD *)&v1072 = v940;
              *((_QWORD *)&v1072 + 1) = v939;
              LOWORD(v1073) = 1282;
              llvm::Twine::str((llvm::Twine *)&__dst, &v1049);
              v942 = v1051 >= 0 ? (const std::string::value_type *)&v1049 : (const std::string::value_type *)v1049;
              v943 = v1051 >= 0 ? HIBYTE(v1051) & 0x7F : v1050;
              LLVMAppendModuleInlineAsm_0((uint64_t)v941, v942, v943);
              if (SHIBYTE(v1051) < 0)
                operator delete(v1049);
            }
            v928 += 8;
          }
          while (v930 != v928);
        }
      }
    }
  }
  if (v979)
    operator delete(v979);
LABEL_1257:
  MEMORY[0x1CAA32FB4](v1015[0], 8);
  MEMORY[0x1CAA32FB4](v1017, 8);
  if (v1062 != v1064)
    free(v1062);
  v944 = v1020;
  if (v1022)
  {
    v945 = 40 * v1022;
    v946 = v1020 + 3;
    do
    {
      if ((*(v946 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v947 = (void *)*(v946 - 1);
        if (v947)
        {
          *v946 = v947;
          operator delete(v947);
        }
      }
      v946 += 5;
      v945 -= 40;
    }
    while (v945);
    v944 = v1020;
  }
  MEMORY[0x1CAA32FB4](v944, 8);
  sub_1C4926AE8((uint64_t)&__p);
  sub_1C49F3440(v1024);
  return v981;
}

uint64_t sub_1C570E200(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;

  v2 = *(_QWORD *)(a1 + 136);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 144);
    v4 = *(void **)(a1 + 136);
    if (v3 != v2)
    {
      v5 = v3 - 56;
      do
      {
        sub_1C47655E8(v5, *(_QWORD **)(v5 + 8));
        v6 = v5 == v2;
        v5 -= 56;
      }
      while (!v6);
      v4 = *(void **)(a1 + 136);
    }
    *(_QWORD *)(a1 + 144) = v2;
    operator delete(v4);
  }
  v7 = *(unsigned int *)(a1 + 128);
  v8 = *(_QWORD *)(a1 + 112);
  if ((_DWORD)v7)
  {
    v9 = 40 * v7;
    v10 = (_QWORD *)(v8 + 16);
    do
    {
      if ((*(v10 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v11 = (void *)*(v10 - 1);
        if (v11)
        {
          *v10 = v11;
          operator delete(v11);
        }
      }
      v10 += 5;
      v9 -= 40;
    }
    while (v9);
    v8 = *(_QWORD *)(a1 + 112);
  }
  MEMORY[0x1CAA32FB4](v8, 8);
  return a1;
}

_QWORD *sub_1C570E2BC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = &unk_1E817B1B8;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &unk_1E817B220;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C570E344(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C570E358()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1ED80CA18;
  *(_DWORD *)(v0 + 24) = 4;
  *(_QWORD *)v0 = &off_1E817B2B0;
  *(_BYTE *)(v0 + 28) = 1;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED831ED8);
  if (v2 != -1)
  {
    v6[0] = sub_1C57087C0;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED831ED8, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C570E444(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C570E468(uint64_t a1, llvm::LLVMContext **a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  llvm::LLVMContext **v12[14];
  uint64_t v13;
  unsigned int v14;
  void *__p;
  void *v16;

  if (*(_BYTE *)(a1 + 28))
    return sub_1C5708850(a2);
  sub_1C5708E90(v12, a2, *(llvm::LLVMContext ***)(a1 + 32), *(llvm::LLVMContext ***)(a1 + 40), *(_BYTE *)(a1 + 48));
  v3 = sub_1C5708FAC((uint64_t *)v12);
  v4 = __p;
  if (__p)
  {
    v5 = __p;
    if (v16 != __p)
    {
      v6 = (uint64_t)v16 - 56;
      do
      {
        sub_1C47655E8(v6, *(_QWORD **)(v6 + 8));
        v7 = v6 == (_QWORD)v4;
        v6 -= 56;
      }
      while (!v7);
      v5 = __p;
    }
    v16 = v4;
    operator delete(v5);
  }
  v8 = v13;
  if (v14)
  {
    v9 = 40 * v14;
    v10 = (_QWORD *)(v13 + 16);
    do
    {
      if ((*(v10 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v11 = (void *)*(v10 - 1);
        if (v11)
        {
          *v10 = v11;
          operator delete(v11);
        }
      }
      v10 += 5;
      v9 -= 40;
    }
    while (v9);
    v8 = v13;
  }
  MEMORY[0x1CAA32FB4](v8, 8);
  return v3;
}

uint64_t sub_1C570E564@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result;
  if ((*(_BYTE *)(result + 16) & 1) == 0)
  {
    result = (uint64_t)std::system_category();
    v4 = *v2;
LABEL_5:
    *(_BYTE *)(a2 + 8) &= ~1u;
    *v2 = 0;
    goto LABEL_6;
  }
  v4 = *(_QWORD *)result;
  if (!*(_QWORD *)result)
    goto LABEL_5;
  v5 = *(_QWORD *)(result + 8);
  result = operator new();
  *(_QWORD *)result = &off_1E81A0D28;
  *(_QWORD *)(result + 8) = v4;
  *(_QWORD *)(result + 16) = v5;
  *(_BYTE *)(a2 + 8) |= 1u;
  v4 = result;
LABEL_6:
  *(_QWORD *)a2 = v4;
  return result;
}

uint64_t sub_1C570E600(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  llvm *v5;
  int v6;
  llvm::raw_ostream *v7;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;

  if (*a2)
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 48);
    if (!v3)
      sub_1C485C2F0();
    v4 = a2;
    v5 = (llvm *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    v6 = (int)v5;
    v10 = *v4;
    *v4 = 0;
    v7 = (llvm::raw_ostream *)llvm::errs(v5);
    v9 = 260;
    v8[0] = v2;
    llvm::logAllUnhandledErrors(&v10, v7, (uint64_t)v8);
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    exit(v6);
  }
  return result;
}

void sub_1C570E69C(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  const void *v24;
  unint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  uint64_t v30;
  const void *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  char *v45;
  BOOL v46;
  void **v47;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t *v51;
  void *__p;
  BOOL v53;
  BOOL v54;
  char v55;
  BOOL v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  _QWORD v63[3];
  _QWORD v64[3];
  _QWORD v65[3];
  _QWORD v66[3];
  uint64_t *v67;
  uint64_t *v68;
  unint64_t v69;
  char v70;
  char v71[16];

  *(_QWORD *)v71 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a2;
  v49 = a2 + 1;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v67 = 0;
      v68 = 0;
      v69 = 0;
      v4 = (uint64_t *)v2[7];
      v3 = (uint64_t *)v2[8];
      v50 = v2;
      v51 = v3;
      if (v4 != v3)
      {
        do
        {
          v5 = *v4;
          if (*v4)
            v6 = *(_DWORD *)(*v4 + 8) == 1;
          else
            v6 = 0;
          if (v6)
          {
            v7 = *(_QWORD **)(v5 + 40);
            v8 = *(_QWORD **)(v5 + 48);
            if (v8 == v7)
            {
              v9 = 0;
              v10 = 0;
            }
            else
            {
              v11 = 0;
              v10 = 0;
              v12 = 0;
              do
              {
                v13 = *(_QWORD *)(*v7 & 0xFFFFFFFFFFFFFFF8);
                if (v12 >= v11)
                {
                  v14 = (v12 - v10) >> 3;
                  v15 = v14 + 1;
                  if ((unint64_t)(v14 + 1) >> 61)
                    goto LABEL_72;
                  if ((v11 - v10) >> 2 > v15)
                    v15 = (v11 - v10) >> 2;
                  if ((unint64_t)(v11 - v10) >= 0x7FFFFFFFFFFFFFF8)
                    v16 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v16 = v15;
                  if (v16)
                  {
                    if (v16 >> 61)
                      sub_1C4764EE4();
                    v17 = (char *)operator new(8 * v16);
                  }
                  else
                  {
                    v17 = 0;
                  }
                  v18 = &v17[8 * v14];
                  *(_QWORD *)v18 = v13;
                  v9 = v18 + 8;
                  while (v12 != v10)
                  {
                    v19 = *((_QWORD *)v12 - 1);
                    v12 -= 8;
                    *((_QWORD *)v18 - 1) = v19;
                    v18 -= 8;
                  }
                  v11 = &v17[8 * v16];
                  if (v10)
                    operator delete(v10);
                  v10 = v18;
                }
                else
                {
                  *(_QWORD *)v12 = v13;
                  v9 = v12 + 8;
                }
                ++v7;
                v12 = v9;
              }
              while (v7 != v8);
            }
            v20 = *(_DWORD *)(v5 + 12);
            LODWORD(__p) = v20 & 0xF;
            HIDWORD(__p) = (v20 >> 4) & 3;
            v53 = (v20 & 0x40) != 0;
            v54 = (v20 & 0x80) != 0;
            v55 = BYTE1(v20) & 1;
            v56 = (v20 & 0x200) != 0;
            v58 = 0;
            v59 = 0;
            v57 = 0;
            v21 = v9 - v10;
            if (v9 != v10)
            {
              if (v21 < 0)
                goto LABEL_72;
              v57 = (char *)operator new(v9 - v10);
              v58 = v57;
              v22 = &v57[8 * (v21 >> 3)];
              v59 = v22;
              memmove(v57, v10, v9 - v10);
              v58 = v22;
            }
            v23 = *(_QWORD *)(v5 + 104);
            if (v23)
            {
              v27 = *(_BYTE **)v23;
              v26 = *(_BYTE **)(v23 + 8);
              v60 = 0;
              v61 = 0;
              v62 = 0;
              v28 = v26 - v27;
              if (v26 == v27)
                goto LABEL_40;
              if (v28 < 0)
LABEL_72:
                abort();
              v60 = (char *)operator new(v26 - v27);
              v61 = v60;
              v29 = &v60[8 * (v28 >> 3)];
              v62 = v29;
              memmove(v60, v27, v28);
              v61 = v29;
              v23 = *(_QWORD *)(v5 + 104);
              if (v23)
              {
LABEL_40:
                v24 = *(const void **)(v23 + 24);
                v25 = (uint64_t)(*(_QWORD *)(v23 + 32) - (_QWORD)v24) >> 4;
              }
              else
              {
                v24 = 0;
                v25 = 0;
              }
            }
            else
            {
              v24 = 0;
              v25 = 0;
              v60 = 0;
              v61 = 0;
              v62 = 0;
            }
            memset(v63, 0, sizeof(v63));
            sub_1C4EEC644(v63, v24, (uint64_t)v24 + 16 * v25, v25);
            v30 = *(_QWORD *)(v5 + 104);
            if (v30)
            {
              v31 = *(const void **)(v30 + 48);
              v32 = (uint64_t)(*(_QWORD *)(v30 + 56) - (_QWORD)v31) >> 4;
            }
            else
            {
              v31 = 0;
              v32 = 0;
            }
            memset(v64, 0, sizeof(v64));
            sub_1C4EEC644(v64, v31, (uint64_t)v31 + 16 * v32, v32);
            v33 = *(_QWORD *)(v5 + 104);
            if (v33)
            {
              v34 = *(_QWORD *)(v33 + 72);
              v35 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v33 + 80) - v34) >> 3);
            }
            else
            {
              v34 = 0;
              v35 = 0;
            }
            memset(v65, 0, sizeof(v65));
            sub_1C4EECBBC(v65, v34, v34 + 40 * v35, v35);
            v36 = *(_QWORD *)(v5 + 104);
            if (v36)
            {
              v37 = *(_QWORD *)(v36 + 96);
              v38 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v36 + 104) - v37) >> 3);
            }
            else
            {
              v37 = 0;
              v38 = 0;
            }
            memset(v66, 0, sizeof(v66));
            sub_1C4EECBBC(v66, v37, v37 + 40 * v38, v38);
            if ((unint64_t)v68 >= v69)
            {
              v40 = sub_1C570F074(&v67, (uint64_t *)&__p);
            }
            else
            {
              sub_1C6299BE4((uint64_t)v68, (uint64_t *)&__p);
              v40 = (uint64_t *)(v39 + 160);
            }
            v3 = v51;
            v68 = v40;
            sub_1C6299CB8((uint64_t)&__p);
            if (v10)
              operator delete(v10);
          }
          ++v4;
        }
        while (v4 != v3);
        if (v67 != v68)
        {
          v44 = v50[4];
          v45 = v71;
          if (v44)
          {
            do
            {
              *--v45 = (v44 % 0xA) | 0x30;
              v46 = v44 > 9;
              v44 /= 0xAuLL;
            }
            while (v46);
          }
          else
          {
            v70 = 48;
            v45 = &v70;
          }
          sub_1C4E61270(&__p, v45, v71, v71 - v45);
          v47 = SHIBYTE(v57) >= 0 ? &__p : (void **)__p;
          sub_1C6299D40(a1, (uint64_t)v47, (uint64_t *)&v67, 1);
          if (SHIBYTE(v57) < 0)
            operator delete(__p);
        }
      }
      __p = &v67;
      sub_1C570FC9C((void ***)&__p);
      v41 = v50;
      v42 = (_QWORD *)v50[1];
      if (v42)
      {
        do
        {
          v43 = v42;
          v42 = (_QWORD *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (_QWORD *)v41[2];
          v6 = *v43 == (_QWORD)v41;
          v41 = v43;
        }
        while (!v6);
      }
      v2 = v43;
    }
    while (v43 != v49);
  }
}

void sub_1C570EB6C(uint64_t *a1, void *__src, size_t __len, uint64_t a4)
{
  void ***p_dst;
  void **v9;
  size_t v10;
  size_t v11;
  unsigned int v12;
  uint8x8_t v13;
  void **v14;
  unint64_t v15;
  void **v16;
  int v17;
  int v18;
  unsigned int v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  BOOL v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  BOOL v39;
  _QWORD *v40;
  unint64_t v41;
  void **v42;
  void **v43;
  void **v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  void **v50;
  void *v51;
  int8x8_t v52;
  uint64_t v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char **v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61[2];
  _QWORD v62[2];
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  void **__dst;
  void **v70;
  unint64_t v71;
  __int16 v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v74 = 0;
  v75 = 0;
  v76 = 0;
  if (!__src)
  {
    __dst = 0;
    v70 = 0;
    p_dst = &__dst;
    v71 = 0;
    goto LABEL_14;
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
LABEL_100:
    abort();
  if (__len >= 0x17)
  {
    v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v10 = __len | 7;
    v11 = v10 + 1;
    v9 = (void **)operator new(v10 + 1);
    v70 = (void **)__len;
    v71 = v11 | 0x8000000000000000;
    __dst = v9;
    goto LABEL_10;
  }
  HIBYTE(v71) = __len;
  v9 = (void **)&__dst;
  if (__len)
LABEL_10:
    memmove(v9, __src, __len);
  *((_BYTE *)v9 + __len) = 0;
  if ((v71 & 0x8000000000000000) == 0)
    p_dst = &__dst;
  else
    p_dst = (void ***)__dst;
LABEL_14:
  sub_1C6299D40(a1, (uint64_t)p_dst, &v74, 1);
  if (SHIBYTE(v71) < 0)
    operator delete(__dst);
  __dst = (void **)__src;
  v70 = (void **)__len;
  v12 = sub_1C5E3D4C0((uint64_t)&__dst);
  v14 = v70;
  if (v70)
  {
    v15 = 0;
    v16 = __dst;
    while (1)
    {
      v17 = *(unsigned __int8 *)v16;
      if ((v17 - 48) >= 0xA)
      {
        if ((v17 - 97) >= 0x1A)
        {
          if ((v17 - 65) > 0x19)
            break;
          v18 = -55;
        }
        else
        {
          v18 = -87;
        }
      }
      else
      {
        v18 = -48;
      }
      v19 = v18 + v17;
      if (v19 >= v12)
        break;
      v20 = v15 * v12 + v19;
      if (v20 / v12 < v15)
        break;
      v16 = (void **)((char *)v16 + 1);
      v15 = v20;
      v14 = (void **)((char *)v14 - 1);
      if (!v14)
      {
        v73 = v20;
        v22 = (_QWORD *)(a4 + 8);
        v21 = *(_QWORD **)(a4 + 8);
        if (v21)
        {
          v23 = *(_QWORD **)(a4 + 8);
          do
          {
            v24 = v23[4];
            if (v20 >= v24)
            {
              if (v24 >= v20)
                goto LABEL_35;
              ++v23;
            }
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        LOBYTE(__dst) = 0;
        sub_1C570FF58((uint64_t **)a4, &v73, (uint64_t *)&v73, &__dst);
        v21 = *(_QWORD **)(a4 + 8);
LABEL_35:
        if (!v21)
          goto LABEL_46;
        v25 = (_QWORD *)(a4 + 8);
        do
        {
          v26 = v21[4];
          v27 = v26 >= v73;
          if (v26 >= v73)
            v28 = v21;
          else
            v28 = v21 + 1;
          if (v27)
            v25 = v21;
          v21 = (_QWORD *)*v28;
        }
        while (*v28);
        if (v25 == v22 || v73 < v25[4])
LABEL_46:
          v25 = (_QWORD *)(a4 + 8);
        v29 = v74;
        v60 = v75;
        if (v74 != v75)
        {
          v58 = (char **)(v25 + 7);
          v59 = v25;
          do
          {
            v70 = 0;
            v71 = 0;
            __dst = 0;
            v31 = *(unint64_t **)(v29 + 16);
            v30 = *(unint64_t **)(v29 + 24);
            while (v31 != v30)
            {
              v32 = (_QWORD *)*v22;
              if (*v22)
              {
                v33 = *v31;
                v34 = (_QWORD *)*v22;
                do
                {
                  v35 = v34[4];
                  if (v33 >= v35)
                  {
                    if (v35 >= v33)
                      goto LABEL_58;
                    ++v34;
                  }
                  v34 = (_QWORD *)*v34;
                }
                while (v34);
              }
              LOBYTE(v62[0]) = 0;
              sub_1C570FF58((uint64_t **)a4, v31, (uint64_t *)v31, v62);
              v32 = *(_QWORD **)(a4 + 8);
LABEL_58:
              if (!v32)
                goto LABEL_69;
              v36 = *v31;
              v37 = (_QWORD *)(a4 + 8);
              do
              {
                v38 = v32[4];
                v39 = v38 >= v36;
                if (v38 >= v36)
                  v40 = v32;
                else
                  v40 = v32 + 1;
                if (v39)
                  v37 = v32;
                v32 = (_QWORD *)*v40;
              }
              while (*v40);
              if (v37 == v22 || v36 < v37[4])
LABEL_69:
                v37 = (_QWORD *)(a4 + 8);
              v41 = (unint64_t)(v37 + 4) & 0xFFFFFFFFFFFFFFF8;
              v42 = v70;
              if ((unint64_t)v70 >= v71)
              {
                v44 = __dst;
                v45 = v70 - __dst;
                v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 61)
                  goto LABEL_100;
                v47 = v71 - (_QWORD)__dst;
                if ((uint64_t)(v71 - (_QWORD)__dst) >> 2 > v46)
                  v46 = v47 >> 2;
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8)
                  v48 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v48 = v46;
                if (v48)
                {
                  if (v48 >> 61)
                    sub_1C4764EE4();
                  v49 = (char *)operator new(8 * v48);
                }
                else
                {
                  v49 = 0;
                }
                v50 = (void **)&v49[8 * v45];
                *v50 = (void *)v41;
                v43 = v50 + 1;
                while (v42 != v44)
                {
                  v51 = *--v42;
                  *--v50 = v51;
                }
                __dst = v50;
                v70 = v43;
                v71 = (unint64_t)&v49[8 * v48];
                if (v44)
                  operator delete(v44);
              }
              else
              {
                *v70 = (void *)v41;
                v43 = v42 + 1;
              }
              v70 = v43;
              ++v31;
            }
            v13.i32[0] = *(_DWORD *)(v29 + 8);
            v52 = vbic_s8((int8x8_t)0x200010000800040, (int8x8_t)vceqz_s16((int16x4_t)*(_OWORD *)&vmovl_u8(v13)));
            LOWORD(v66) = v52.i16[0] | v52.i16[2] | ((v52.i32[0] | v52.i32[1]) >> 16) | *(_WORD *)v29 & 0xF | (16 * (*(_WORD *)(v29 + 4) & 3));
            v65 = 0;
            LOWORD(v64) = 0;
            v63 = 0;
            v62[0] = 0;
            v62[1] = 0;
            v61[0] = 0;
            v61[1] = 0;
            sub_1C570FD0C(&v66, &v65, &v64, &v63, (uint64_t)&__dst, (uint64_t)v62, (__int128 *)(v29 + 40), v29 + 64, &v67, v29 + 88, v29 + 112, v29 + 136, v61);
            v53 = v67;
            v67 = 0;
            v68 = v53;
            v54 = (uint64_t *)v59[8];
            if ((unint64_t)v54 >= v59[9])
            {
              v55 = sub_1C4D62F9C(v58, &v68);
            }
            else
            {
              v68 = 0;
              *v54 = v53;
              v55 = (char *)(v54 + 1);
            }
            v59[8] = v55;
            v56 = v68;
            v68 = 0;
            if (v56)
              (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
            v57 = v67;
            v67 = 0;
            if (v57)
              (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
            if (__dst)
            {
              v70 = __dst;
              operator delete(__dst);
            }
            v29 += 160;
          }
          while (v29 != v60);
        }
        goto LABEL_98;
      }
    }
  }
  __dst = (void **)"key not an integer";
  v72 = 259;
  (*(void (**)(uint64_t *, void ***))(*a1 + 248))(a1, &__dst);
LABEL_98:
  __dst = (void **)&v74;
  sub_1C570FC9C(&__dst);
}

uint64_t *sub_1C570F074(uint64_t **a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;

  v2 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a1[1] - (char *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x199999999999999)
    abort();
  if (0x999999999999999ALL * (((char *)a1[2] - (char *)*a1) >> 5) > v3)
    v3 = 0x999999999999999ALL * (((char *)a1[2] - (char *)*a1) >> 5);
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)a1[2] - (char *)*a1) >> 5) >= 0xCCCCCCCCCCCCCCLL)
    v6 = 0x199999999999999;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x199999999999999)
      sub_1C4764EE4();
    v7 = (char *)operator new(160 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (uint64_t *)&v7[160 * v6];
  sub_1C6299BE4((uint64_t)&v7[160 * v2], a2);
  v10 = v9 + 20;
  v12 = *a1;
  v11 = a1[1];
  if (v11 == *a1)
  {
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
  }
  else
  {
    do
    {
      v11 -= 20;
      sub_1C6299BE4((uint64_t)(v9 - 20), v11);
    }
    while (v11 != v12);
    v11 = *a1;
    v13 = (uint64_t)a1[1];
    *a1 = v9;
    a1[1] = v10;
    a1[2] = v8;
    while ((uint64_t *)v13 != v11)
    {
      v13 -= 160;
      sub_1C6299CB8(v13);
    }
  }
  if (v11)
    operator delete(v11);
  return v10;
}

uint64_t sub_1C570F1A0(uint64_t *a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
    v4 = -858993459 * ((unint64_t)(a2[1] - *a2) >> 5);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = v4;
    do
    {
      v11 = 0;
      if ((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t *))(*a1 + 32))(a1, v6, &v11))
      {
        v8 = *a2;
        if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 5) <= v6)
        {
          sub_1C629A378(a2, v6 + 1);
          v8 = *a2;
        }
        v9 = v8 + v5;
        (*(void (**)(uint64_t *))(*a1 + 104))(a1);
        sub_1C6299DC8(a1, v9);
        (*(void (**)(uint64_t *))(*a1 + 112))(a1);
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, v11);
      }
      ++v6;
      v5 += 160;
    }
    while (v7 != v6);
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1);
}

uint64_t sub_1C570F2E8(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t i;
  unint64_t *v7;
  uint64_t v9;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    v5 = ((a2[1] - *a2) >> 3);
  else
    v5 = v4;
  if ((_DWORD)v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v9 = 0;
      if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 72))(a1, i, &v9))
      {
        v7 = (unint64_t *)sub_1C570F3D4(a1, (uint64_t)a2, i);
        sub_1C51EF528(a1, v7);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 80))(a1, v9);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
}

char *sub_1C570F3D4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char *v4;
  unint64_t v5;

  v4 = *(char **)a2;
  v5 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  if (v5 <= a3)
  {
    if (a3 + 1 <= v5)
    {
      if (a3 + 1 < v5)
        *(_QWORD *)(a2 + 8) = &v4[8 * a3 + 8];
    }
    else
    {
      sub_1C570F434((char **)a2, a3 + 1 - v5);
      v4 = *(char **)a2;
    }
  }
  return &v4[8 * a3];
}

void sub_1C570F434(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(a1[1], 8 * a2);
      v5 += 8 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 3);
    if (v8 >> 61)
      abort();
    v9 = v4 - v6;
    if (v9 >> 2 > v8)
      v8 = v9 >> 2;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 61)
        sub_1C4764EE4();
      v11 = (char *)operator new(8 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[8 * (v7 >> 3)];
    v13 = &v11[8 * v10];
    bzero(v12, 8 * a2);
    while (v5 != v6)
    {
      v14 = *((_QWORD *)v5 - 1);
      v5 -= 8;
      *((_QWORD *)v12 - 1) = v14;
      v12 -= 8;
    }
    *a1 = v12;
    a1[1] = &v11[8 * a2 + v7];
    a1[2] = v13;
    if (v6)
      operator delete(v6);
  }
}

uint64_t sub_1C570F550(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t i;
  unint64_t *v7;
  uint64_t v9;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    v5 = ((a2[1] - *a2) >> 4);
  else
    v5 = v4;
  if ((_DWORD)v5)
  {
    for (i = 0; i != v5; ++i)
    {
      v9 = 0;
      if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, i, &v9))
      {
        v7 = (unint64_t *)sub_1C570F698(a1, (uint64_t)a2, i);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
        sub_1C6206E70(a1, (uint64_t)"GUID", v7, 0);
        sub_1C6206E70(a1, (uint64_t)"Offset", v7 + 1, 0);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v9);
      }
    }
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

char *sub_1C570F698(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char *v4;
  unint64_t v5;

  v4 = *(char **)a2;
  v5 = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
  if (v5 <= a3)
  {
    if (a3 + 1 <= v5)
    {
      if (a3 + 1 < v5)
        *(_QWORD *)(a2 + 8) = &v4[16 * a3 + 16];
    }
    else
    {
      sub_1C570F6F8((char **)a2, a3 + 1 - v5);
      v4 = *(char **)a2;
    }
  }
  return &v4[16 * a3];
}

void sub_1C570F6F8(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      bzero(a1[1], 16 * a2);
      v5 += 16 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = v5 - *a1;
    v8 = a2 + (v7 >> 4);
    if (v8 >> 60)
      abort();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_1C4764EE4();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[16 * (v7 >> 4)];
    v13 = &v11[16 * v10];
    bzero(v12, 16 * a2);
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v5 - 1);
        v12 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = &v11[16 * a2 + v7];
    a1[2] = v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_1C570F828(uint64_t a1, uint64_t *a2)
{
  unsigned int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v11;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    v4 = -858993459 * ((unint64_t)(a2[1] - *a2) >> 3);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = v4;
    do
    {
      v11 = 0;
      if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(a1, v6, &v11))
      {
        v8 = *a2;
        if (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) <= v6)
        {
          sub_1C629A2EC(a2, v6 + 1);
          v8 = *a2;
        }
        v9 = (unint64_t *)(v8 + v5);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
        sub_1C629A1AC(a1, v9);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v11);
      }
      ++v6;
      v5 += 40;
    }
    while (v7 != v6);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

char *sub_1C570F970(uint64_t *a1, unint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  char *result;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v4 = a1 + 2;
  v5 = a1[2];
  result = (char *)a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v5 - (uint64_t)result) >> 3) < a2)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&result[-*a1] >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      abort();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v18 = v4;
    if (v11)
    {
      if (v11 > 0x666666666666666)
        sub_1C4764EE4();
      v12 = (char *)operator new(40 * v11);
    }
    else
    {
      v12 = 0;
    }
    v14 = v12;
    v15 = &v12[40 * v8];
    v17 = &v12[40 * v11];
    v13 = 5 * a2;
    bzero(v15, 40 * ((8 * v13 - 40) / 0x28uLL) + 40);
    v16 = &v15[8 * v13];
    sub_1C61A7D7C(a1, &v14);
    return (char *)sub_1C61A7E10((uint64_t)&v14);
  }
  else
  {
    if (a2)
    {
      v7 = &result[40 * a2];
      bzero(result, 40 * ((40 * a2 - 40) / 0x28) + 40);
      result = v7;
    }
    a1[1] = (uint64_t)result;
  }
  return result;
}

void sub_1C570FAE4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v5 = *(uint64_t **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - (uint64_t)v5) >> 5) >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), 160 * ((160 * a2 - 160) / 0xA0) + 160);
      v5 += 20 * a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(uint64_t **)a1;
    v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 5);
    v8 = v7 + a2;
    if (v7 + a2 > 0x199999999999999)
      abort();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - (uint64_t)v6) >> 5);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xCCCCCCCCCCCCCCLL)
      v10 = 0x199999999999999;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0x199999999999999)
        sub_1C4764EE4();
      v11 = (char *)operator new(160 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[160 * v7];
    v13 = &v11[160 * v10];
    v14 = 5 * a2;
    bzero(v12, 160 * ((32 * v14 - 160) / 0xA0uLL) + 160);
    v15 = &v12[32 * v14];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      do
      {
        v12 -= 160;
        v5 -= 20;
        sub_1C6299BE4((uint64_t)v12, v5);
      }
      while (v5 != v6);
      v5 = *(uint64_t **)a1;
      v16 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = v15;
      *(_QWORD *)(a1 + 16) = v13;
      while ((uint64_t *)v16 != v5)
        v16 = sub_1C6299CB8(v16 - 160);
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_1C570FC9C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_1C6299CB8(v4 - 160);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1C570FD0C(int *a1@<X0>, int *a2@<X1>, int *a3@<X2>, int *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  uint64_t v21;
  int v22;
  uint64_t v23;
  const void *v24;
  int64_t v25;
  char *v26;
  char *v27;
  _BYTE *v28;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  _QWORD v37[3];
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  void *__p[2];
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  void *v48;
  void *v49;
  uint64_t v50;
  __int128 v51;
  char *v52;
  void **v53[2];

  v21 = operator new();
  v35 = *a1;
  v34 = *a2;
  v22 = *a3;
  v23 = *a4;
  v52 = 0;
  v51 = 0uLL;
  v24 = *(const void **)a5;
  v25 = *(_QWORD *)(a5 + 8) - *(_QWORD *)a5;
  if (v25)
  {
    if (v25 < 0)
      abort();
    v26 = (char *)operator new(v25);
    v27 = &v26[8 * (v25 >> 3)];
    *(_QWORD *)&v51 = v26;
    v52 = v27;
    memmove(v26, v24, v25);
    *((_QWORD *)&v51 + 1) = v27;
  }
  v28 = *(_BYTE **)a6;
  v29 = *(_QWORD *)(a6 + 8);
  v30 = (_BYTE *)(*(_QWORD *)a6 + 16 * v29);
  v49 = 0;
  v50 = 0;
  v48 = 0;
  sub_1C4EECB34(&v48, v28, v30, v29);
  v46 = *a7;
  v47 = *((_QWORD *)a7 + 2);
  *((_QWORD *)a7 + 1) = 0;
  *((_QWORD *)a7 + 2) = 0;
  *(_QWORD *)a7 = 0;
  *(_OWORD *)v44 = *(_OWORD *)a8;
  v45 = *(_QWORD *)(a8 + 16);
  *(_QWORD *)(a8 + 8) = 0;
  *(_QWORD *)(a8 + 16) = 0;
  *(_QWORD *)a8 = 0;
  *(_OWORD *)__p = *(_OWORD *)a10;
  v43 = *(_QWORD *)(a10 + 16);
  *(_QWORD *)(a10 + 8) = 0;
  *(_QWORD *)(a10 + 16) = 0;
  *(_QWORD *)a10 = 0;
  v40 = *(_OWORD *)a11;
  v41 = *(_QWORD *)(a11 + 16);
  *(_QWORD *)(a11 + 8) = 0;
  *(_QWORD *)(a11 + 16) = 0;
  *(_QWORD *)a11 = 0;
  v38 = *(_OWORD *)a12;
  v39 = *(_QWORD *)(a12 + 16);
  *(_QWORD *)(a12 + 8) = 0;
  *(_QWORD *)(a12 + 16) = 0;
  *(_QWORD *)a12 = 0;
  v31 = *a13;
  v32 = a13[1];
  v33 = *a13 + (v32 << 6);
  memset(v37, 0, sizeof(v37));
  sub_1C4EECCBC((uint64_t)v37, v31, v33, v32);
  sub_1C61A8204(v21, v35, v34, v22, v23, &v51, (uint64_t)&v48, (uint64_t *)&v46, (__int128 *)v44, (__int128 *)__p, &v40, &v38, (uint64_t)v37);
  *a9 = v21;
  v53[0] = (void **)v37;
  sub_1C4EEB7D8(v53);
  v53[0] = (void **)&v38;
  sub_1C4EEBCC8(v53);
  v53[0] = (void **)&v40;
  sub_1C4EEBCC8(v53);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v44[0])
  {
    v44[1] = v44[0];
    operator delete(v44[0]);
  }
  if ((_QWORD)v46)
  {
    *((_QWORD *)&v46 + 1) = v46;
    operator delete((void *)v46);
  }
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if ((_QWORD)v51)
  {
    *((_QWORD *)&v51 + 1) = v51;
    operator delete((void *)v51);
  }
}

uint64_t *sub_1C570FF58(uint64_t **a1, unint64_t *a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  const char *v14;
  uint64_t *v15;
  uint64_t *v16;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = v7[4];
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        return (uint64_t *)v10;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (uint64_t *)operator new(0x50uLL);
    v13 = v12;
    v12[4] = *a3;
    if (*a4)
    {
      v14 = 0;
    }
    else
    {
      v12[6] = 0;
      v14 = "";
    }
    v12[5] = (uint64_t)v14;
    *v12 = 0;
    v12[1] = 0;
    v12[8] = 0;
    v12[9] = 0;
    v12[7] = 0;
    v12[2] = (uint64_t)v10;
    *v8 = v12;
    v15 = (uint64_t *)**a1;
    v16 = v12;
    if (v15)
    {
      *a1 = v15;
      v16 = *v8;
    }
    sub_1C4768E74(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v13;
}

uint64_t sub_1C5710060(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v4 = (uint64_t *)result;
    do
    {
      v5 = v3 + 5;
      if (*((char *)v3 + 63) < 0)
        v5 = (_QWORD *)*v5;
      result = sub_1C629A558(v4, (uint64_t)v5, (uint64_t)(v3 + 8), 1);
      v6 = (_QWORD *)v3[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v3[2];
          v8 = *v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v2);
  }
  return result;
}

void sub_1C57100F8(uint64_t *a1, void *__src, size_t __len, uint64_t a4)
{
  __int128 *p_dst;
  __int128 *v9;
  size_t v10;
  size_t v11;
  void *v12;
  __int128 *v13;
  size_t v14;
  size_t v15;
  __int128 v16;
  unint64_t v17;
  _BYTE v18[32];
  uint64_t v19;
  char **v20;
  char *v21[2];
  void *v22[2];
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char *v27[4];
  __int128 __dst;
  int64_t v29;
  char v30;
  char *v31[11];

  v31[10] = *(char **)MEMORY[0x1E0C80C00];
  *(_DWORD *)v18 = 5;
  memset(&v18[4], 0, 21);
  v21[0] = 0;
  v21[1] = 0;
  v19 = 0;
  v20 = v21;
  if (!__src)
  {
    __dst = 0uLL;
    p_dst = &__dst;
    v29 = 0;
    goto LABEL_14;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_29;
  if (__len >= 0x17)
  {
    v10 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v10 = __len | 7;
    v11 = v10 + 1;
    v9 = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v29 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = v9;
    goto LABEL_10;
  }
  HIBYTE(v29) = __len;
  v9 = &__dst;
  if (__len)
LABEL_10:
    memmove(v9, __src, __len);
  *((_BYTE *)v9 + __len) = 0;
  if (v29 >= 0)
    p_dst = &__dst;
  else
    p_dst = (__int128 *)__dst;
LABEL_14:
  sub_1C629A558(a1, (uint64_t)p_dst, (uint64_t)v18, 1);
  if (SHIBYTE(v29) < 0)
    operator delete((void *)__dst);
  __dst = xmmword_1C85F4BB0;
  v29 = 0;
  llvm::MD5::update((int *)&__dst, (int *)__src, __len);
  llvm::MD5::final((int *)&__dst, (int *)v22);
  if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_29:
    abort();
  v12 = v22[0];
  if (__len >= 0x17)
  {
    v14 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v14 = __len | 7;
    v15 = v14 + 1;
    v13 = (__int128 *)operator new(v14 + 1);
    *((_QWORD *)&v16 + 1) = __len;
    v17 = v15 | 0x8000000000000000;
    *(_QWORD *)&v16 = v13;
    goto LABEL_23;
  }
  HIBYTE(v17) = __len;
  v13 = &v16;
  if (__len)
LABEL_23:
    memmove(v13, __src, __len);
  *((_BYTE *)v13 + __len) = 0;
  *(_OWORD *)v22 = v16;
  v23 = v17;
  v24 = *(_OWORD *)v18;
  v25 = *(_OWORD *)&v18[16];
  v26 = v19;
  sub_1C4FCDB6C((uint64_t)v27, &v20);
  *(_QWORD *)&__dst = v12;
  sub_1C4FCDAFC((char *)&__dst + 8, (__int128 *)v22);
  sub_1C4FCD9B0(a4, (uint64_t)&__dst);
  sub_1C4EEC720((uint64_t)v31, v31[1]);
  if (v30 < 0)
    operator delete(*((void **)&__dst + 1));
  sub_1C4EEC720((uint64_t)v27, v27[1]);
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
  sub_1C4EEC720((uint64_t)&v20, v21[0]);
}

void sub_1C571038C(uint64_t *a1, _BYTE *a2)
{
  void *v4;
  char v5;
  BOOL v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  _QWORD v10[2];
  void (**v11)(llvm::raw_ostream *__hidden);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  void **v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    LODWORD(v12) = 0;
    v16 = 0;
    v17 = 0;
    v11 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v19 = &v20;
    v18 = 0;
    v14 = 0;
    v15 = 0;
    v13 = 0;
    sub_1C5E21910((llvm::raw_ostream *)&v11, *a2, 0, 0, 0);
    v4 = v19;
    v5 = *((_BYTE *)v19 + 23);
    v6 = v5 < 0;
    if (v5 < 0)
      v4 = *v19;
    v7 = (void *)(v5 & 0x7F);
    if (v6)
      v7 = v19[1];
    v10[0] = v4;
    v10[1] = v7;
    (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*a1 + 216))(a1, v10, 0);
    v11 = off_1E81A6E70;
    if (v18 == 1 && v13)
      MEMORY[0x1CAA32F9C](v13, 0x1000C8077774924);
    if (SHIBYTE(v22) < 0)
      operator delete(v20);
  }
  else
  {
    v20 = 0;
    v21 = 0;
    (*(void (**)(uint64_t *, void **, _QWORD))(*a1 + 216))(a1, &v20, 0);
    v8 = llvm::yaml::ScalarTraits<unsigned char,void>::input((unsigned __int8 *)v20, v21, a1[1], a2);
    if (v9)
    {
      LOWORD(v15) = 261;
      v11 = (void (**)(llvm::raw_ostream *__hidden))v8;
      v12 = v9;
      (*(void (**)(uint64_t *, void (***)(llvm::raw_ostream *__hidden)))(*a1 + 248))(a1, &v11);
    }
  }
}

void sub_1C57104F0(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v5;
  char *v6;
  BOOL v7;
  void **v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  void *__p[2];
  char v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = a2 + 1;
  v3 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      v5 = v3[4];
      v6 = (char *)&v15;
      if (v5)
      {
        do
        {
          *--v6 = (v5 % 0xA) | 0x30;
          v7 = v5 > 9;
          v5 /= 0xAuLL;
        }
        while (v7);
      }
      else
      {
        v14 = 48;
        v6 = &v14;
      }
      sub_1C4E61270(__p, v6, (char *)&v15, (char *)&v15 - v6);
      if (v13 >= 0)
        v8 = __p;
      else
        v8 = (void **)__p[0];
      sub_1C629AB94(a1, (uint64_t)v8, (uint64_t)(v3 + 5), 1);
      if (v13 < 0)
        operator delete(__p[0]);
      v9 = (_QWORD *)v3[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v3[2];
          v11 = *v10 == (_QWORD)v3;
          v3 = v10;
        }
        while (!v11);
      }
      v3 = v10;
    }
    while (v10 != v2);
  }
}

void sub_1C5710644(uint64_t *a1, void *a2, size_t a3, uint64_t **a4)
{
  unsigned int v8;
  size_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  void *p_p;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void *__p;
  size_t v22;
  int64_t v23;
  __int16 v24;
  unint64_t v25;
  unint64_t *v26;

  __p = a2;
  v22 = a3;
  v8 = sub_1C5E3D4C0((uint64_t)&__p);
  v9 = v22;
  if (v22)
  {
    v10 = 0;
    v11 = (unsigned __int8 *)__p;
    do
    {
      v12 = *v11;
      if ((v12 - 48) >= 0xA)
      {
        if ((v12 - 97) >= 0x1A)
        {
          if ((v12 - 65) > 0x19)
            goto LABEL_28;
          v13 = -55;
        }
        else
        {
          v13 = -87;
        }
      }
      else
      {
        v13 = -48;
      }
      v14 = v13 + v12;
      if (v14 >= v8)
        goto LABEL_28;
      v15 = v10 * v8 + v14;
      if (v15 / v8 < v10)
        goto LABEL_28;
      ++v11;
      v10 = v15;
      --v9;
    }
    while (v9);
    v25 = v15;
    if (!a2)
    {
      __p = 0;
      v22 = 0;
      p_p = &__p;
      v23 = 0;
LABEL_26:
      v26 = &v25;
      v20 = sub_1C4FD092C(a4, &v25, (uint64_t)&std::piecewise_construct, &v26);
      sub_1C629AB94(a1, (uint64_t)p_p, (uint64_t)(v20 + 40), 1);
      if (SHIBYTE(v23) < 0)
        operator delete(__p);
      return;
    }
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a3 >= 0x17)
    {
      v18 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v18 = a3 | 7;
      v19 = v18 + 1;
      v17 = operator new(v18 + 1);
      v22 = a3;
      v23 = v19 | 0x8000000000000000;
      __p = v17;
    }
    else
    {
      HIBYTE(v23) = a3;
      v17 = &__p;
      if (!a3)
      {
LABEL_23:
        *((_BYTE *)v17 + a3) = 0;
        if (v23 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        goto LABEL_26;
      }
    }
    memmove(v17, a2, a3);
    goto LABEL_23;
  }
LABEL_28:
  __p = "key not an integer";
  v24 = 259;
  (*(void (**)(uint64_t *, void **))(*a1 + 248))(a1, &__p);
}

void sub_1C5710824(uint64_t *a1, uint64_t a2)
{
  char v4;
  BOOL v5;
  const char *v6;
  size_t v7;
  size_t v8;
  char v9;
  char *v10;
  uint64_t v11;
  uint64_t mustQuote;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  void (**v16)(llvm::raw_ostream *__hidden);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  void **v24;
  void *v25;
  size_t v26;
  uint64_t v27;

  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
  {
    v25 = 0;
    v26 = 0;
    v27 = 0;
    LODWORD(v17) = 0;
    v21 = 0;
    v22 = 0;
    v16 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v24 = &v25;
    v23 = 0;
    v19 = 0;
    v20 = 0;
    v4 = *(_BYTE *)(a2 + 23);
    v5 = v4 < 0;
    if (v4 >= 0)
      v6 = (const char *)a2;
    else
      v6 = *(const char **)a2;
    v7 = v4 & 0x7F;
    if (v5)
      v8 = *(_QWORD *)(a2 + 8);
    else
      v8 = v7;
    v18 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v16, v6, v8);
    v9 = *((_BYTE *)v24 + 23);
    if (v9 >= 0)
      v10 = (char *)v24;
    else
      v10 = (char *)*v24;
    if (v9 >= 0)
      v11 = v9 & 0x7F;
    else
      v11 = (uint64_t)v24[1];
    v15[0] = v10;
    v15[1] = v11;
    mustQuote = llvm::yaml::ScalarTraits<FlowStringRef,void>::mustQuote(v10, v11);
    (*(void (**)(uint64_t *, _QWORD *, uint64_t))(*a1 + 216))(a1, v15, mustQuote);
    v16 = off_1E81A6E70;
    if (v23 == 1 && v18)
      MEMORY[0x1CAA32F9C](v18, 0x1000C8077774924);
    if (SHIBYTE(v27) < 0)
      operator delete(v25);
  }
  else
  {
    v25 = 0;
    v26 = 0;
    (*(void (**)(uint64_t *, void **, uint64_t))(*a1 + 216))(a1, &v25, 1);
    v13 = llvm::yaml::ScalarTraits<std::string,void>::input(v25, v26, a1[1], a2);
    if (v14)
    {
      LOWORD(v20) = 261;
      v16 = (void (**)(llvm::raw_ostream *__hidden))v13;
      v17 = v14;
      (*(void (**)(uint64_t *, void (***)(llvm::raw_ostream *__hidden)))(*a1 + 248))(a1, &v16);
    }
  }
}

void sub_1C5710998(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v2;
  unint64_t *v3;
  unint64_t *v4;
  std::string *v5;
  unint64_t v6;
  std::string::size_type size;
  char *v8;
  BOOL v9;
  void **v10;
  std::string::size_type v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v16;
  void *__p[2];
  char v18;
  std::string v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)*a2;
  v16 = a2 + 1;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      memset(&v19, 0, sizeof(v19));
      v4 = (unint64_t *)v2[4];
      v3 = (unint64_t *)v2[5];
      if (v4 == v3)
      {
        v5 = &v19;
      }
      else
      {
        do
        {
          v6 = *v4;
          size = *((_BYTE *)&v19.__r_.__value_.__s + 23) & 0x7F;
          if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v19.__r_.__value_.__l.__size_;
          if (size)
            std::string::push_back(&v19, 44);
          v8 = (char *)&v21;
          if (v6)
          {
            do
            {
              *--v8 = (v6 % 0xA) | 0x30;
              v9 = v6 > 9;
              v6 /= 0xAuLL;
            }
            while (v9);
          }
          else
          {
            v20 = 48;
            v8 = &v20;
          }
          sub_1C4E61270(__p, v8, (char *)&v21, (char *)&v21 - v8);
          if (v18 >= 0)
            v10 = __p;
          else
            v10 = (void **)__p[0];
          if (v18 >= 0)
            v11 = v18 & 0x7F;
          else
            v11 = (std::string::size_type)__p[1];
          std::string::append(&v19, (const std::string::value_type *)v10, v11);
          if (v18 < 0)
            operator delete(__p[0]);
          ++v4;
        }
        while (v4 != v3);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v5 = &v19;
        else
          v5 = (std::string *)v19.__r_.__value_.__r.__words[0];
      }
      sub_1C629AFFC(a1, (uint64_t)v5, (uint64_t)(v2 + 7), 1);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      v12 = (_QWORD *)v2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v2[2];
          v14 = *v13 == (_QWORD)v2;
          v2 = v13;
        }
        while (!v14);
      }
      v2 = v13;
    }
    while (v13 != v16);
  }
}

void sub_1C5710B7C(uint64_t *a1, char *a2, size_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v6;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  size_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  int v21;
  int v22;
  unsigned int v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t *v30;
  unint64_t v31;
  char **p_dst;
  char **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char *__dst;
  unint64_t v41;
  int64_t v42;
  __int16 v43;
  const char *v44;
  unint64_t v45;
  char *v46;
  size_t v47;
  void *__p;
  void *v49;
  char *v50;
  void **p_p;

  v4 = a4;
  v6 = a1;
  __p = 0;
  v49 = 0;
  v50 = 0;
  v44 = "";
  v45 = 0;
  v46 = a2;
  v47 = a3;
  if (a3)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = a3;
    do
    {
      LOBYTE(__dst) = 44;
      v11 = llvm::StringRef::find((uint64_t *)&v46, (char *)&__dst, 1uLL, 0);
      if (v11 == -1)
      {
        v16 = 0;
        v15 = 0;
        v13 = v46;
      }
      else
      {
        if (v10 >= v11)
          v12 = v11;
        else
          v12 = v10;
        v13 = v46;
        if (v10 >= v11 + 1)
          v14 = v11 + 1;
        else
          v14 = v10;
        v15 = (uint64_t)&v46[v14];
        v16 = v10 - v14;
        v10 = v12;
      }
      v44 = v13;
      v45 = v10;
      v46 = (char *)v15;
      v47 = v16;
      __dst = v13;
      v41 = v10;
      v17 = sub_1C5E3D4C0((uint64_t)&__dst);
      v18 = v41;
      if (!v41)
      {
LABEL_47:
        __dst = "key not an integer";
        v43 = 259;
        (*(void (**)(uint64_t *, char **))(*a1 + 248))(a1, &__dst);
        goto LABEL_48;
      }
      v19 = 0;
      v20 = __dst;
      do
      {
        v21 = *v20;
        if ((v21 - 48) >= 0xA)
        {
          if ((v21 - 97) >= 0x1A)
          {
            if ((v21 - 65) > 0x19)
              goto LABEL_47;
            v22 = -55;
          }
          else
          {
            v22 = -87;
          }
        }
        else
        {
          v22 = -48;
        }
        v23 = v22 + v21;
        if (v23 >= v17)
          goto LABEL_47;
        v24 = v19 * v17 + v23;
        if (v24 / v17 < v19)
          goto LABEL_47;
        ++v20;
        v19 = v19 * v17 + v23;
        --v18;
      }
      while (v18);
      if (v9 >= v8)
      {
        v26 = (v9 - v7) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          goto LABEL_63;
        if ((v8 - v7) >> 2 > v27)
          v27 = (v8 - v7) >> 2;
        if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFF8)
          v28 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v28 = v27;
        if (v28)
        {
          if (v28 >> 61)
            sub_1C4764EE4();
          v29 = (char *)operator new(8 * v28);
        }
        else
        {
          v29 = 0;
        }
        v30 = (unint64_t *)&v29[8 * v26];
        *v30 = v24;
        v25 = v30 + 1;
        while (v9 != v7)
        {
          v31 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *--v30 = v31;
        }
        v8 = &v29[8 * v28];
        __p = v30;
        v49 = v25;
        v50 = v8;
        if (v7)
          operator delete(v7);
        v7 = (char *)v30;
      }
      else
      {
        *(_QWORD *)v9 = v24;
        v25 = v9 + 8;
      }
      v49 = v25;
      v10 = v47;
      v9 = (char *)v25;
    }
    while (v47);
    v4 = a4;
    v6 = a1;
    if (!a2)
      goto LABEL_52;
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_63:
      abort();
    if (a3 >= 0x17)
    {
      v34 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v34 = a3 | 7;
      v35 = v34 + 1;
      p_dst = (char **)operator new(v34 + 1);
      v41 = a3;
      v42 = v35 | 0x8000000000000000;
      __dst = (char *)p_dst;
    }
    else
    {
      HIBYTE(v42) = a3;
      p_dst = &__dst;
    }
    memmove(p_dst, a2, a3);
  }
  else
  {
    if (!a2)
    {
LABEL_52:
      __dst = 0;
      v41 = 0;
      v33 = &__dst;
      v42 = 0;
      goto LABEL_61;
    }
    HIBYTE(v42) = 0;
    p_dst = &__dst;
  }
  *((_BYTE *)p_dst + a3) = 0;
  if (v42 >= 0)
    v33 = &__dst;
  else
    v33 = (char **)__dst;
LABEL_61:
  p_p = &__p;
  v36 = sub_1C61CEBFC(v4, (unint64_t **)&__p, (uint64_t)&std::piecewise_construct, (uint64_t *)&p_p);
  sub_1C629AFFC(v6, (uint64_t)v33, (uint64_t)(v36 + 7), 1);
  if (SHIBYTE(v42) < 0)
    operator delete(__dst);
LABEL_48:
  if (__p)
  {
    v49 = __p;
    operator delete(__p);
  }
}

uint64_t sub_1C5710ED8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (a2 == a3)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    v5 = a2;
    do
    {
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      ++v4;
      v5 = v7;
    }
    while (v7 != a3);
  }
  sub_1C5710F5C((char *)a1, a2, a3, v4);
  return a1;
}

char *sub_1C5710F5C(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  char *v8;

  if (a4)
  {
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v6 = result;
    v7 = 3 * a4;
    v8 = (char *)operator new(24 * a4);
    *v6 = v8;
    v6[1] = v8;
    v6[2] = &v8[8 * v7];
    result = sub_1C5710FD4((int)v6 + 16, a2, a3, v8);
    v6[1] = result;
  }
  return result;
}

char *sub_1C5710FD4(int a1, _QWORD *a2, _QWORD *a3, char *__dst)
{
  _QWORD *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 55) < 0)
      {
        sub_1C47EBC30(__dst, (void *)v6[4], v6[5]);
      }
      else
      {
        v7 = *((_OWORD *)v6 + 2);
        *((_QWORD *)__dst + 2) = v6[6];
        *(_OWORD *)__dst = v7;
      }
      v8 = (_QWORD *)v6[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v6[2];
          v10 = *v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      __dst += 24;
      v6 = v9;
    }
    while (v9 != a3);
  }
  return __dst;
}

uint64_t sub_1C5711074(uint64_t *a1, int64x2_t *a2)
{
  int v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v9;

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 24))(a1);
  if ((*(unsigned int (**)(uint64_t *))(*a1 + 16))(a1))
    v4 = -1431655765 * ((unint64_t)(a2->i64[1] - a2->i64[0]) >> 3);
  if (v4)
  {
    v5 = 0;
    for (i = 0; i != v4; ++i)
    {
      v9 = 0;
      if ((*(unsigned int (**)(uint64_t *, unint64_t, uint64_t *))(*a1 + 32))(a1, i, &v9))
      {
        v7 = a2->i64[0];
        if (0xAAAAAAAAAAAAAAABLL * ((a2->i64[1] - a2->i64[0]) >> 3) <= i)
        {
          sub_1C571119C(a2, i + 1);
          v7 = a2->i64[0];
        }
        sub_1C5710824(a1, v7 + v5);
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 40))(a1, v9);
      }
      v5 += 24;
    }
  }
  return (*(uint64_t (**)(uint64_t *))(*a1 + 48))(a1);
}

void sub_1C571119C(int64x2_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1->i64[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - a1->i64[0]) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1C5711228(a1, v6);
  }
  else if (!v5)
  {
    v7 = a1->i64[0] + 24 * a2;
    while (v3 != v7)
    {
      if (*(char *)(v3 - 1) < 0)
        operator delete(*(void **)(v3 - 24));
      v3 -= 24;
    }
    a1->i64[1] = v7;
  }
}

void sub_1C5711228(int64x2_t *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  __int128 v15;
  int64x2_t v16;
  uint64_t v17;
  int64x2_t v18;
  uint64_t v19;
  int64x2_t *v20;

  v4 = a1[1].i64[0];
  v5 = a1->u64[1];
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      v11 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero((void *)a1->i64[1], v11);
      v5 += v11;
    }
    a1->i64[1] = v5;
  }
  else
  {
    v6 = a1->i64[0];
    v7 = v5 - a1->i64[0];
    v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3) + a2;
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      abort();
    if (0x5555555555555556 * ((v4 - v6) >> 3) > v8)
      v8 = 0x5555555555555556 * ((v4 - v6) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3) >= 0x555555555555555)
      v9 = 0xAAAAAAAAAAAAAAALL;
    else
      v9 = v8;
    v20 = a1 + 1;
    if (v9)
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v10 = (char *)operator new(24 * v9);
    }
    else
    {
      v10 = 0;
    }
    v12 = &v10[8 * (v7 >> 3)];
    v13 = &v10[24 * v9];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v12, v14);
    if (v5 == v6)
    {
      v16 = vdupq_n_s64(v5);
    }
    else
    {
      do
      {
        v15 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v12 - 1) = *(_QWORD *)(v5 - 8);
        *(_OWORD *)(v12 - 24) = v15;
        v12 -= 24;
        *(_QWORD *)(v5 - 16) = 0;
        *(_QWORD *)(v5 - 8) = 0;
        *(_QWORD *)(v5 - 24) = 0;
        v5 -= 24;
      }
      while (v5 != v6);
      v16 = *a1;
      v4 = a1[1].i64[0];
    }
    a1->i64[0] = (uint64_t)v12;
    a1->i64[1] = (uint64_t)&v10[v7 + v14];
    v18 = v16;
    a1[1].i64[0] = (uint64_t)v13;
    v19 = v4;
    v17 = v16.i64[0];
    sub_1C4D868F0((uint64_t)&v17);
  }
}

uint64_t *sub_1C57113EC(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = sub_1C5711498(a1, a2, &v13, &v12, a3);
  result = (uint64_t *)*v6;
  if (!*v6)
  {
    sub_1C571175C((uint64_t)a1, a4, (uint64_t)&v11);
    v8 = v13;
    v9 = v11;
    *v11 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v8;
    *v6 = (uint64_t)v9;
    v10 = (uint64_t *)**a1;
    if (v10)
    {
      *a1 = v10;
      v9 = (uint64_t *)*v6;
    }
    sub_1C4768E74(a1[1], v9);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  return result;
}

uint64_t *sub_1C5711498(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v6;
  size_t v9;
  const void *v10;
  size_t v11;
  size_t v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  BOOL v19;
  _BOOL4 v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t *v30;
  BOOL v31;
  char v32;
  BOOL v33;
  const void *v34;
  size_t v35;
  size_t v36;
  const void *v37;
  size_t v38;
  size_t v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t *v44;
  char v45;
  uint64_t *v46;
  size_t v47;
  size_t v48;
  int v49;
  _BOOL4 v50;
  uint64_t **v51;

  v6 = a3;
  v51 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_23;
  v9 = *((unsigned __int8 *)a2 + 55);
  if ((v9 & 0x80u) == 0)
    v10 = a2 + 4;
  else
    v10 = (const void *)a2[4];
  v11 = a2[5];
  if ((v9 & 0x80u) == 0)
    v13 = v9 & 0x7F;
  else
    v13 = a2[5];
  v14 = *((char *)a5 + 23);
  if (v14 >= 0)
    v15 = *((unsigned __int8 *)a5 + 23);
  else
    v15 = (size_t)a5[1];
  if (v14 >= 0)
    v16 = a5;
  else
    v16 = *a5;
  if (v13 >= v15)
    v17 = v15;
  else
    v17 = v13;
  v18 = memcmp(v16, v10, v17);
  v19 = v15 >= v13;
  v6 = a3;
  v20 = !v19;
  if (v18)
    v20 = v18 < 0;
  if (v20)
  {
LABEL_23:
    v21 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v23 = a2;
LABEL_59:
      if (v21)
      {
        *v6 = v23;
        return v23 + 1;
      }
      else
      {
        *v6 = a2;
        return a2;
      }
    }
    if (v21)
    {
      v22 = (uint64_t *)*a2;
      do
      {
        v23 = v22;
        v22 = (uint64_t *)v22[1];
      }
      while (v22);
    }
    else
    {
      v30 = a2;
      do
      {
        v23 = (uint64_t *)v30[2];
        v31 = *v23 == (_QWORD)v30;
        v30 = v23;
      }
      while (v31);
    }
    v32 = *((_BYTE *)a5 + 23);
    v33 = v32 < 0;
    if (v32 >= 0)
      v34 = a5;
    else
      v34 = *a5;
    v35 = v32 & 0x7F;
    if (v33)
      v36 = (size_t)a5[1];
    else
      v36 = v35;
    if (*((char *)v23 + 55) < 0)
    {
      v37 = (const void *)v23[4];
      v38 = v23[5];
    }
    else
    {
      v37 = v23 + 4;
      v38 = *((unsigned __int8 *)v23 + 55);
    }
    if (v36 >= v38)
      v39 = v38;
    else
      v39 = v36;
    v40 = memcmp(v37, v34, v39);
    v41 = v38 < v36;
    if (v40)
      v41 = v40 < 0;
    if (v41)
      goto LABEL_59;
    v42 = (uint64_t)a1;
    return sub_1C4768D58(v42, v6, a5);
  }
  if ((v9 & 0x80u) == 0)
    v11 = v9;
  if (v15 >= v11)
    v24 = v11;
  else
    v24 = v15;
  v25 = memcmp(v10, v16, v24);
  v26 = v11 < v15;
  if (v25)
    v26 = v25 < 0;
  if (v26)
  {
    v27 = a2[1];
    if (v27)
    {
      v28 = (uint64_t *)a2[1];
      v29 = v51;
      do
      {
        a4 = (uint64_t **)v28;
        v28 = (uint64_t *)*v28;
      }
      while (v28);
    }
    else
    {
      v44 = a2;
      v29 = v51;
      do
      {
        a4 = (uint64_t **)v44[2];
        v31 = *a4 == v44;
        v44 = (uint64_t *)a4;
      }
      while (!v31);
    }
    if (a4 == v29)
      goto LABEL_80;
    v45 = *((_BYTE *)a4 + 55);
    if (v45 >= 0)
      v46 = (uint64_t *)(a4 + 4);
    else
      v46 = a4[4];
    if (v45 >= 0)
      v47 = v45 & 0x7F;
    else
      v47 = (size_t)a4[5];
    if (v47 >= v15)
      v48 = v15;
    else
      v48 = v47;
    v49 = memcmp(v16, v46, v48);
    v50 = v15 < v47;
    if (v49)
      v50 = v49 < 0;
    if (v50)
    {
LABEL_80:
      if (v27)
      {
        *a3 = (uint64_t *)a4;
      }
      else
      {
        *a3 = a2;
        return a2 + 1;
      }
      return (uint64_t *)a4;
    }
    v42 = (uint64_t)a1;
    return sub_1C4768D58(v42, v6, a5);
  }
  *a3 = a2;
  *a4 = a2;
  return (uint64_t *)a4;
}

_QWORD *sub_1C571175C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_1C47EBC30(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    result[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_1C57117C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  llvm::GlobalVariable *v6;
  llvm::GlobalVariable *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  llvm::Value *v11;
  BOOL v12;
  llvm::Value *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t j;
  uint64_t v26;
  llvm::Value *v27;
  BOOL v28;
  llvm::Value *v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v42;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 0x400000000;
  *(_QWORD *)(a1 + 56) = a1 + 72;
  v4 = a1 + 56;
  *(_QWORD *)(a1 + 64) = 0x400000000;
  *(_OWORD *)(a1 + 104) = 0u;
  v5 = (_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  v6 = (llvm::GlobalVariable *)llvm::collectUsedGlobalVariables(a2, a1 + 8, 0);
  if (v6)
    llvm::GlobalVariable::eraseFromParent(v6);
  v7 = (llvm::GlobalVariable *)llvm::collectUsedGlobalVariables(a2, v4, 1);
  if (v7)
    llvm::GlobalVariable::eraseFromParent(v7);
  v8 = a2 + 40;
  v42 = a2;
  for (i = *(_QWORD *)(a2 + 48); i != v8; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v10 = i - 48;
    else
      v10 = 0;
    v11 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v10 - 32));
    if (v11)
      v12 = *((_BYTE *)v11 + 16) == 0;
    else
      v12 = 0;
    if (v12)
    {
      v13 = v11;
      v15 = *(_QWORD **)(a1 + 112);
      v14 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v15 >= v14)
      {
        v17 = (_QWORD *)*v5;
        v18 = ((uint64_t)v15 - *v5) >> 4;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 60)
LABEL_63:
          abort();
        v20 = v14 - (_QWORD)v17;
        if (v20 >> 3 > v19)
          v19 = v20 >> 3;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0)
          v21 = 0xFFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 >> 60)
LABEL_64:
            sub_1C4764EE4();
          v22 = (char *)operator new(16 * v21);
        }
        else
        {
          v22 = 0;
        }
        v23 = &v22[16 * v18];
        *(_QWORD *)v23 = v10;
        *((_QWORD *)v23 + 1) = v13;
        v24 = v23;
        if (v15 != v17)
        {
          do
          {
            *((_OWORD *)v24 - 1) = *((_OWORD *)v15 - 1);
            v24 -= 16;
            v15 -= 2;
          }
          while (v15 != v17);
          v15 = (_QWORD *)*v5;
        }
        v16 = v23 + 16;
        *(_QWORD *)(a1 + 104) = v24;
        *(_QWORD *)(a1 + 112) = v23 + 16;
        *(_QWORD *)(a1 + 120) = &v22[16 * v21];
        if (v15)
          operator delete(v15);
      }
      else
      {
        *v15 = v10;
        v15[1] = v11;
        v16 = v15 + 2;
      }
      *(_QWORD *)(a1 + 112) = v16;
    }
  }
  for (j = *(_QWORD *)(v42 + 64); j != v42 + 56; j = *(_QWORD *)(j + 8))
  {
    if (j)
      v26 = j - 56;
    else
      v26 = 0;
    v27 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v26 - 32));
    if (v27)
      v28 = *((_BYTE *)v27 + 16) == 0;
    else
      v28 = 0;
    if (v28)
    {
      v29 = v27;
      v31 = *(char **)(a1 + 136);
      v30 = *(_QWORD *)(a1 + 144);
      if ((unint64_t)v31 >= v30)
      {
        v33 = *(char **)(a1 + 128);
        v34 = (v31 - v33) >> 4;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 60)
          goto LABEL_63;
        v36 = v30 - (_QWORD)v33;
        if (v36 >> 3 > v35)
          v35 = v36 >> 3;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
          v37 = 0xFFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          if (v37 >> 60)
            goto LABEL_64;
          v38 = (char *)operator new(16 * v37);
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[16 * v34];
        *(_QWORD *)v39 = v26;
        *((_QWORD *)v39 + 1) = v29;
        v40 = v39;
        if (v31 != v33)
        {
          do
          {
            *((_OWORD *)v40 - 1) = *((_OWORD *)v31 - 1);
            v40 -= 16;
            v31 -= 16;
          }
          while (v31 != v33);
          v31 = *(char **)(a1 + 128);
        }
        v32 = v39 + 16;
        *(_QWORD *)(a1 + 128) = v40;
        *(_QWORD *)(a1 + 136) = v39 + 16;
        *(_QWORD *)(a1 + 144) = &v38[16 * v37];
        if (v31)
          operator delete(v31);
      }
      else
      {
        *(_QWORD *)v31 = v26;
        *((_QWORD *)v31 + 1) = v27;
        v32 = v31 + 16;
      }
      *(_QWORD *)(a1 + 136) = v32;
    }
  }
  return a1;
}

void sub_1C5711A90(uint64_t *a1, uint64_t a2, int a3, llvm::Value ***a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t *v17;
  size_t v18;
  const void *v19;
  unint64_t v20;
  void **p_dst;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  BOOL v26;
  llvm::PointerType *v27;
  llvm::Type *v28;
  size_t v29;
  void **v30;
  void **v31;
  uint64_t v32;
  uint64_t *v33;
  llvm::Value *v34;
  int v35;
  unsigned int v36;
  int v37;
  size_t v38;
  void **v39;
  void **v40;
  int v41;
  llvm::PointerType *v42;
  llvm::Type *v43;
  uint64_t v44;
  uint64_t *v45;
  llvm::GlobalValue *v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  llvm::Value *v50;
  BOOL v51;
  llvm::PointerType *v52;
  llvm::Type *v53;
  uint64_t v54;
  uint64_t *v55;
  llvm::Value *v56;
  uint64_t *v57;
  unint64_t v58;
  llvm::Value **v59;
  llvm::Value **v60;
  llvm::Value **v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  llvm::Value **v67;
  llvm::Value *v68;
  llvm::PointerType *v69;
  llvm::Type *v70;
  size_t v71;
  void **v72;
  void **v73;
  uint64_t v74;
  uint64_t *v75;
  int v76;
  unsigned int v77;
  int v78;
  unsigned int v79;
  int v80;
  void *__p[2];
  char v82;
  _QWORD v83[4];
  __int16 v84;
  void **__dst;
  size_t v86;
  int64_t v87;

  v8 = *(_DWORD *)(a2 + 32);
  if ((*(_BYTE *)(a2 + 23) & 0x10) == 0)
  {
    v18 = 0;
    HIBYTE(v87) = 0;
    p_dst = (void **)&__dst;
    goto LABEL_17;
  }
  v9 = ***(_QWORD ***)a2;
  v10 = *(_QWORD *)(v9 + 152);
  v11 = *(unsigned int *)(v9 + 168);
  if ((_DWORD)v11)
  {
    LODWORD(v12) = (v11 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v13 = (uint64_t *)(v10 + 16 * v12);
    v14 = *v13;
    if (*v13 == a2)
      goto LABEL_9;
    v15 = 1;
    while (v14 != -4096)
    {
      v16 = v12 + v15++;
      v12 = v16 & (v11 - 1);
      v14 = *(_QWORD *)(v10 + 16 * v12);
      if (v14 == a2)
      {
        v13 = (uint64_t *)(v10 + 16 * v12);
        goto LABEL_9;
      }
    }
  }
  v13 = (uint64_t *)(v10 + 16 * v11);
LABEL_9:
  v17 = (unint64_t *)v13[1];
  v20 = *v17;
  v19 = v17 + 2;
  v18 = v20;
  if (v20 >= 0x7FFFFFFFFFFFFFF8)
LABEL_125:
    abort();
  if (v18 >= 0x17)
  {
    v22 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v22 = v18 | 7;
    v23 = v22 + 1;
    p_dst = (void **)operator new(v22 + 1);
    v86 = v18;
    v87 = v23 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_16;
  }
  HIBYTE(v87) = v18;
  p_dst = (void **)&__dst;
  if (v18)
LABEL_16:
    memmove(p_dst, v19, v18);
LABEL_17:
  *((_BYTE *)p_dst + v18) = 0;
  v24 = *(_DWORD *)(a2 + 32);
  v25 = v24 & 0xF;
  if (v25 != 1)
  {
    if (*(_BYTE *)(a2 + 16))
    {
      if (*(_BYTE *)(a2 + 16) != 3)
        goto LABEL_47;
      v26 = (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) == 0;
    }
    else
    {
      if (*(_QWORD *)(a2 + 72) != a2 + 72)
        goto LABEL_47;
      v26 = (v24 & 0x800000) == 0;
    }
    v25 = v26;
  }
  if (v25 && a3)
  {
    if ((v24 & 0x4000) == 0)
      goto LABEL_115;
    v27 = *(llvm::PointerType **)(a2 + 24);
    v28 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8);
    if (v87 >= 0)
      v29 = HIBYTE(v87) & 0x7F;
    else
      v29 = v86;
    sub_1C484371C((uint64_t)__p, v29 + 4);
    if (v82 >= 0)
      v30 = __p;
    else
      v30 = (void **)__p[0];
    if (v29)
    {
      if (v87 >= 0)
        v31 = (void **)&__dst;
      else
        v31 = __dst;
      memmove(v30, v31, v29);
    }
    strcpy((char *)v30 + v29, ".cfi");
    v84 = 260;
    v83[0] = __p;
    v32 = *a1;
    v33 = (uint64_t *)operator new(0x80uLL);
    v34 = (llvm::Value *)(v33 + 1);
    *((_DWORD *)v33 + 7) = *((_DWORD *)v33 + 7) & 0x38000000 | 0x40000000;
    *v33 = 0;
    llvm::Function::Function(v33 + 1, v27, 0, v28, (uint64_t)v83, v32);
    if (v82 < 0)
      operator delete(__p[0]);
    v35 = *((_DWORD *)v33 + 10);
    v36 = v35 & 0xFFFFFFCF | 0x10;
    *((_DWORD *)v33 + 10) = v36;
    if ((v35 & 0xFu) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage(v34) & 1) != 0)
      {
LABEL_46:
        llvm::Value::replaceUsesWithIf((llvm::Value *)a2, v34, (unsigned int (*)(uint64_t, uint64_t))sub_1C629B358, (uint64_t)sub_1C571465C);
        goto LABEL_115;
      }
      v36 = *((_DWORD *)v33 + 10);
    }
    *((_DWORD *)v33 + 10) = v36 | 0x4000;
    goto LABEL_46;
  }
LABEL_47:
  v37 = (v8 >> 4) & 3;
  v80 = a3;
  if ((a3 & 1) != 0)
  {
    if (v87 >= 0)
      v38 = HIBYTE(v87) & 0x7F;
    else
      v38 = v86;
    sub_1C484371C((uint64_t)__p, v38 + 4);
    if (v82 >= 0)
      v39 = __p;
    else
      v39 = (void **)__p[0];
    if (v38)
    {
      if (v87 >= 0)
        v40 = (void **)&__dst;
      else
        v40 = __dst;
      memmove(v39, v40, v38);
    }
    strcpy((char *)v39 + v38, ".cfi");
    v84 = 260;
    v83[0] = __p;
    llvm::Value::setName((uint64_t ***)a2, (uint64_t)v83);
    if (v82 < 0)
      operator delete(__p[0]);
    v41 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a2 + 32) = v41 & 0xFFFFFFF0;
    if ((v41 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2) & 1) == 0)
      *(_DWORD *)(a2 + 32) |= 0x4000u;
    v42 = *(llvm::PointerType **)(a2 + 24);
    v43 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8);
    v84 = 260;
    v83[0] = &__dst;
    v44 = *a1;
    v45 = (uint64_t *)operator new(0x80uLL);
    v46 = (llvm::GlobalValue *)(v45 + 1);
    *((_DWORD *)v45 + 7) = *((_DWORD *)v45 + 7) & 0x38000000 | 0x40000000;
    *v45 = 0;
    llvm::Function::Function(v45 + 1, v42, 0, v43, (uint64_t)v83, v44);
    v47 = v45[5] & 0xF;
    v48 = v45[5] & 0xFFFFFFCF | (16 * (v37 & 3));
    *((_DWORD *)v45 + 10) = v48;
    if ((v47 - 7) >= 2)
    {
      if (!v37 || (llvm::GlobalValue::hasExternalWeakLinkage(v46) & 1) != 0)
      {
LABEL_66:
        v49 = *(_QWORD *)(a2 + 8);
        if (v49)
        {
          do
          {
            v50 = *(llvm::Value **)(v49 + 24);
            if (v50)
              v51 = *((_BYTE *)v50 + 16) == 1;
            else
              v51 = 0;
            if (v51)
            {
              v52 = *(llvm::PointerType **)(a2 + 24);
              v53 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8);
              v84 = 257;
              v54 = *a1;
              v55 = (uint64_t *)operator new(0x80uLL);
              v56 = (llvm::Value *)(v55 + 1);
              *((_DWORD *)v55 + 7) = *((_DWORD *)v55 + 7) & 0x38000000 | 0x40000000;
              *v55 = 0;
              v57 = llvm::Function::Function(v55 + 1, v52, 0, v53, (uint64_t)v83, v54);
              llvm::Value::takeName((llvm::Value *)v57, v50);
              llvm::Value::doRAUW(v50, v56, (llvm::Value *)1);
              v59 = a4[1];
              v58 = (unint64_t)a4[2];
              if ((unint64_t)v59 >= v58)
              {
                v61 = *a4;
                v62 = v59 - *a4;
                v63 = v62 + 1;
                if ((unint64_t)(v62 + 1) >> 61)
                  goto LABEL_125;
                v64 = v58 - (_QWORD)v61;
                if (v64 >> 2 > v63)
                  v63 = v64 >> 2;
                if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF8)
                  v65 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v65 = v63;
                if (v65)
                {
                  if (v65 >> 61)
                    sub_1C4764EE4();
                  v66 = (char *)operator new(8 * v65);
                }
                else
                {
                  v66 = 0;
                }
                v67 = (llvm::Value **)&v66[8 * v62];
                *v67 = v50;
                v60 = v67 + 1;
                if (v59 != v61)
                {
                  do
                  {
                    v68 = *--v59;
                    *--v67 = v68;
                  }
                  while (v59 != v61);
                  v59 = *a4;
                }
                *a4 = v67;
                a4[1] = v60;
                a4[2] = (llvm::Value **)&v66[8 * v65];
                if (v59)
                  operator delete(v59);
              }
              else
              {
                *v59 = v50;
                v60 = v59 + 1;
              }
              a4[1] = v60;
            }
            v49 = *(_QWORD *)(v49 + 8);
          }
          while (v49);
          v37 = 1;
          a3 = v80;
        }
        else
        {
          v37 = 1;
          a3 = v80;
        }
        goto LABEL_110;
      }
      v48 = *((_DWORD *)v45 + 10);
    }
    *((_DWORD *)v45 + 10) = v48 | 0x4000;
    goto LABEL_66;
  }
  v69 = *(llvm::PointerType **)(a2 + 24);
  v70 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8);
  if (v87 >= 0)
    v71 = HIBYTE(v87) & 0x7F;
  else
    v71 = v86;
  sub_1C484371C((uint64_t)__p, v71 + 7);
  if (v82 >= 0)
    v72 = __p;
  else
    v72 = (void **)__p[0];
  if (v71)
  {
    if (v87 >= 0)
      v73 = (void **)&__dst;
    else
      v73 = __dst;
    memmove(v72, v73, v71);
  }
  strcpy((char *)v72 + v71, ".cfi_jt");
  v84 = 260;
  v83[0] = __p;
  v74 = *a1;
  v75 = (uint64_t *)operator new(0x80uLL);
  v46 = (llvm::GlobalValue *)(v75 + 1);
  *((_DWORD *)v75 + 7) = *((_DWORD *)v75 + 7) & 0x38000000 | 0x40000000;
  *v75 = 0;
  llvm::Function::Function(v75 + 1, v69, 0, v70, (uint64_t)v83, v74);
  if (v82 < 0)
    operator delete(__p[0]);
  v76 = *((_DWORD *)v75 + 10);
  v77 = v76 & 0xFFFFFFCF | 0x10;
  *((_DWORD *)v75 + 10) = v77;
  if ((v76 & 0xFu) - 7 < 2)
    goto LABEL_108;
  if ((llvm::GlobalValue::hasExternalWeakLinkage(v46) & 1) == 0)
  {
    v77 = *((_DWORD *)v75 + 10);
LABEL_108:
    *((_DWORD *)v75 + 10) = v77 | 0x4000;
  }
LABEL_110:
  if (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2))
    sub_1C5713D98(a1, (unsigned __int8 *)a2, (llvm::PoisonValue **)v46, a3);
  else
    sub_1C57144B0(a2, v46, a3);
  v78 = *(_DWORD *)(a2 + 32) & 0xF;
  v79 = *(_DWORD *)(a2 + 32) & 0xFFFFFFCF | (16 * (v37 & 3));
  *(_DWORD *)(a2 + 32) = v79;
  if ((v78 - 7) >= 2)
  {
    if (!v37 || (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a2) & 1) != 0)
      goto LABEL_115;
    v79 = *(_DWORD *)(a2 + 32);
  }
  *(_DWORD *)(a2 + 32) = v79 | 0x4000;
LABEL_115:
  if (SHIBYTE(v87) < 0)
    operator delete(__dst);
}

uint64_t sub_1C57121F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  llvm::UndefValue *v4;
  llvm::Constant **v5;
  llvm::Constant *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;

  sub_1C5F50CB4(*(uint64_t ***)a1, "llvm.used", 9uLL, *(llvm::UndefValue ***)(a1 + 8), *(unsigned int *)(a1 + 16));
  sub_1C5F50CB4(*(uint64_t ***)a1, "llvm.compiler.used", 0x12uLL, *(llvm::UndefValue ***)(a1 + 56), *(unsigned int *)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 104);
  v3 = *(_QWORD *)(a1 + 112);
  while (v2 != v3)
  {
    v5 = *(llvm::Constant ***)v2;
    v4 = *(llvm::UndefValue **)(v2 + 8);
    v6 = **(llvm::Constant ***)v2;
    if (*(llvm::Constant **)v4 != v6)
      v4 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v4, v6, 0);
    llvm::GlobalAlias::setAliasee((uint64_t)v5, v4);
    v2 += 16;
  }
  v7 = *(uint64_t **)(a1 + 128);
  v8 = *(uint64_t **)(a1 + 136);
  if (v7 != v8)
  {
    do
    {
      v9 = *v7;
      v10 = v7[1];
      v11 = (_QWORD *)(*v7 - 32);
      if (*v11)
      {
        **(_QWORD **)(v9 - 16) = *(_QWORD *)(v9 - 24);
        v12 = *(_QWORD *)(v9 - 24);
        if (v12)
          *(_QWORD *)(v12 + 16) = *(_QWORD *)(v9 - 16);
      }
      *v11 = v10;
      if (v10)
      {
        v15 = *(_QWORD *)(v10 + 8);
        v13 = (_QWORD *)(v10 + 8);
        v14 = v15;
        *(_QWORD *)(v9 - 24) = v15;
        if (v15)
          *(_QWORD *)(v14 + 16) = v9 - 24;
        *(_QWORD *)(v9 - 16) = v13;
        *v13 = v11;
      }
      v7 += 2;
    }
    while (v7 != v8);
    v7 = *(uint64_t **)(a1 + 128);
  }
  if (v7)
  {
    *(_QWORD *)(a1 + 136) = v7;
    operator delete(v7);
  }
  v16 = *(void **)(a1 + 104);
  if (v16)
  {
    *(_QWORD *)(a1 + 112) = v16;
    operator delete(v16);
  }
  v17 = *(void **)(a1 + 56);
  if (v17 != (void *)(a1 + 72))
    free(v17);
  v18 = *(void **)(a1 + 8);
  if (v18 != (void *)(a1 + 24))
    free(v18);
  return a1;
}

_QWORD *sub_1C571233C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  uint64_t **v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19[4];
  char v20;
  uint64_t v21;
  _QWORD *v22;

  v21 = a2;
  v22 = 0;
  v4 = *a1;
  v19[0] = a2;
  memset(&v19[1], 0, 24);
  v20 = 0;
  v6 = *(_QWORD *)(v4 + 112);
  v5 = v4 + 112;
  v7 = sub_1C498D438(v6, *(_DWORD *)(v5 + 16), a2, &v22);
  v8 = v22;
  if (!v7)
  {
    v8 = sub_1C5714E18(v5, v19, v22);
    *v8 = a2;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    *((_BYTE *)v8 + 32) = 0;
    v10 = sub_1C571247C((uint64_t **)a1[1], (uint64_t *)(a2 & 0xFFFFFFFFFFFFFFFCLL | 1));
    if ((uint64_t **)(a1[1] + 8) == v10)
      v11 = 0;
    else
      v11 = sub_1C5715004((uint64_t)(v10 + 4));
    v12 = sub_1C5712658(a1[2], &v21);
    v13 = (_QWORD *)v12[1];
    v14 = (_QWORD *)v12[2];
    while (v13 != v14)
    {
      v15 = (uint64_t **)a1[1];
      v16 = sub_1C571247C(v15, (uint64_t *)(*v13 & 0xFFFFFFFFFFFFFFFCLL));
      if (v15 + 1 == v16)
        v17 = 0;
      else
        v17 = sub_1C5715004((uint64_t)(v16 + 4));
      if (v11 != v17)
      {
        *(_QWORD *)(*(_QWORD *)v11 + 8) = *(_QWORD *)(*(_QWORD *)v11 + 8) & 1 | v17;
        *(_QWORD *)v11 = *(_QWORD *)v17;
        v18 = *(_QWORD *)(v17 + 8) & 0xFFFFFFFFFFFFFFFELL;
        *(_QWORD *)v17 = v11;
        *(_QWORD *)(v17 + 8) = v18;
      }
      ++v13;
    }
  }
  return v8 + 1;
}

uint64_t **sub_1C571247C(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v4;
        v7 = v4[6];
        if ((unint64_t)a2 >= v7)
          break;
        v4 = *v6;
        v5 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= (unint64_t)a2)
        break;
      v4 = v6[1];
      if (!v4)
      {
        v5 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x38uLL);
    v6[4] = (uint64_t *)(v6 + 4);
    v6[5] = (uint64_t *)1;
    v6[6] = a2;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v5 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    sub_1C4768E74(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6;
}

uint64_t sub_1C5712550(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *(_QWORD *)result;
  if (*(_QWORD *)result > 3uLL)
  {
    v8 = (uint64_t *)result;
    if ((v2 & 2) == 0)
    {
      v3 = v2 & 0xFFFFFFFFFFFFFFFCLL;
      result = operator new();
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x400000000;
      *v8 = result | 2;
      v4 = result & 0xFFFFFFFFFFFFFFFCLL;
      v5 = *(unsigned int *)((result & 0xFFFFFFFFFFFFFFFCLL) + 8);
      if (v5 >= *(_DWORD *)((result & 0xFFFFFFFFFFFFFFFCLL) + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result & 0xFFFFFFFFFFFFFFFCLL, v4 + 16, v5 + 1, 8);
        LODWORD(v5) = *(_DWORD *)(v4 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v4 + 8 * v5) = v3;
      ++*(_DWORD *)(v4 + 8);
      v2 = *v8;
    }
    v6 = v2 & 0xFFFFFFFFFFFFFFFCLL;
    v7 = *(unsigned int *)((v2 & 0xFFFFFFFFFFFFFFFCLL) + 8);
    if (v7 >= *(_DWORD *)(v6 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v6 + 16, v7 + 1, 8);
      LODWORD(v7) = *(_DWORD *)(v6 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = a2;
    ++*(_DWORD *)(v6 + 8);
  }
  else
  {
    *(_QWORD *)result = a2 & 0xFFFFFFFFFFFFFFFDLL;
  }
  return result;
}

_QWORD *sub_1C5712658(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C498D438(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5714C28(a1, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
  }
  return v5 + 1;
}

llvm::PHINode *sub_1C57126C8(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v7;
  llvm::PHINode *v8;
  llvm::ConstantInt *v9;
  unsigned __int8 *v12;
  uint64_t **v13;
  const llvm::APInt *v14;
  uint64_t *v15;
  uint64_t v16;
  llvm::ConstantInt *v17;
  unsigned int v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  llvm::UndefValue *v23;
  uint64_t v24;
  llvm::UndefValue *v25;
  const llvm::APInt *v26;
  _QWORD *v27;
  llvm::ConstantInt **v28;
  uint64_t v29;
  llvm::ConstantInt *v30;
  unint64_t v31;
  unint64_t v32;
  llvm::ConstantExpr *v33;
  llvm::ValueHandleBase *Sub;
  llvm::UndefValue *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t v38;
  llvm::Value *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  const llvm::APInt *v46;
  llvm::ConstantInt **v47;
  llvm::ConstantInt *v48;
  llvm::ValueHandleBase *v49;
  uint64_t *v50;
  _BYTE *v52;
  uint64_t v53;
  BOOL v54;
  _BYTE *v55;
  llvm::BasicBlock *v56;
  _DWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  llvm::Value *v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  _QWORD *v67;
  _BYTE *v68;
  _QWORD *v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  uint64_t v73;
  llvm::MDNode **v74;
  uint64_t v75;
  llvm::MDNode *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  void *v80;
  uint64_t i;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  void *v90;
  llvm::BasicBlock *v91;
  unsigned __int8 *v92;
  unsigned int v93;
  __int16 v94;
  void *v95;
  unsigned int v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  void *v100;
  unsigned int v101;
  _QWORD v102[17];

  v102[15] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)a4 == 5)
    return 0;
  if (!*(_DWORD *)a4)
  {
    v6 = **a1;
    v7 = *v6;
    v8 = *(llvm::PHINode **)(*v6 + 1568);
    if (!v8)
    {
      v9 = *(llvm::ConstantInt **)(v7 + 1888);
      v101 = *(_DWORD *)(v7 + 1896) >> 8;
      if (v101 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v100, 0, 0);
      else
        v100 = 0;
      v8 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v100, (const llvm::APInt *)a3);
      if (v101 >= 0x41 && v100)
        MEMORY[0x1CAA32F9C](v100, 0x1000C8000313F17);
      *(_QWORD *)(v7 + 1568) = v8;
    }
    return v8;
  }
  v12 = *(unsigned __int8 **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF));
  v13 = *a1;
  if (sub_1C571361C(a2, (llvm::DataLayout *)(*a1 + 34), (uint64_t)v12, 0, a5))
  {
    v15 = **a1;
    v16 = *v15;
    v8 = *(llvm::PHINode **)(*v15 + 1560);
    if (!v8)
    {
      v17 = *(llvm::ConstantInt **)(v16 + 1888);
      v18 = *(_DWORD *)(v16 + 1896);
      v101 = v18 >> 8;
      if (v18 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v100, 1, 0);
      }
      else
      {
        if (v18 <= 0xFF)
          v19 = 0;
        else
          v19 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v18);
        v100 = (void *)(v19 & 1);
      }
      v8 = llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v100, v14);
      if (v101 >= 0x41 && v100)
        MEMORY[0x1CAA32F9C](v100, 0x1000C8000313F17);
      *(_QWORD *)(v16 + 1560) = v8;
    }
    return v8;
  }
  v20 = *(uint64_t **)(a3 + 40);
  sub_1C4773D54((uint64_t)&v100, a3, 0, 0, 0);
  v21 = (uint64_t)a1[12];
  v98 = 257;
  v22 = sub_1C4773E38((uint64_t *)&v100, 47, v12, v21, (uint64_t)&v95);
  v23 = sub_1C537D3B8((llvm *)0x2F, *(_QWORD *)(a4 + 8), (llvm::Constant *)a1[12], 0);
  if (*(_DWORD *)a4 != 3)
  {
    v98 = 257;
    v24 = sub_1C47733F8((uint64_t)&v100, (uint64_t)v22, (uint64_t)v23, (uint64_t)&v95, 0, 0);
    v25 = sub_1C537D3B8((llvm *)0x27, *(_QWORD *)(a4 + 16), (llvm::Constant *)a1[12], 0);
    v98 = 257;
    v27 = (_QWORD *)sub_1C506ED1C((uint64_t)&v100, v24, (uint64_t)v25, (uint64_t)&v95, 0);
    v28 = (llvm::ConstantInt **)a1[6];
    v29 = *((unsigned int *)v13[63] + 1);
    v30 = *v28;
    v31 = *((unsigned int *)v28 + 2);
    v96 = v31 >> 8;
    if (v31 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v95, v29, 0);
    }
    else
    {
      if (v31 <= 0xFF)
        v32 = 0;
      else
        v32 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v31);
      v95 = (void *)(v32 & v29);
    }
    v33 = llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&v95, v26);
    if (v96 >= 0x41 && v95)
      MEMORY[0x1CAA32F9C](v95, 0x1000C8000313F17);
    Sub = llvm::ConstantExpr::getSub(v33, *(llvm::Constant **)(a4 + 16), 0, 0);
    v35 = sub_1C537D3B8((llvm *)0x27, (uint64_t)Sub, (llvm::Constant *)a1[12], 0);
    v98 = 257;
    v36 = sub_1C506E874((uint64_t)&v100, v24, (uint64_t)v35, (uint64_t)&v95, 0, 0);
    v98 = 257;
    v37 = (unsigned __int8 *)sub_1C4773594((uint64_t)&v100, v27, v36, (uint64_t)&v95);
    v38 = *(_QWORD *)(a4 + 24);
    v98 = 257;
    v39 = (llvm::Value *)sub_1C4774B48((uint64_t)&v100, 37, (uint64_t)v37, v38, (uint64_t)&v95);
    v8 = v39;
    if (*(_DWORD *)a4 == 4)
      goto LABEL_39;
    v40 = *(_QWORD *)(a3 + 8);
    if (!v40
      || *(_QWORD *)(v40 + 8)
      || (v52 = *(_BYTE **)(v40 + 24)) == 0
      || v52[16] != 30
      || ((v53 = *(_QWORD *)(a3 + 32)) != 0 ? (v54 = v53 == *(_QWORD *)(a3 + 40) + 40) : (v54 = 1),
          !v54 ? (v55 = (_BYTE *)(v53 - 24)) : (v55 = 0),
          v55 != v52))
    {
      v41 = sub_1C5EBFBC0(v39, (uint64_t *)a3, 0, 0, 0, 0, 0, 0);
      sub_1C4773D54((uint64_t)&v95, (uint64_t)v41, 0, 0, 0);
      v42 = sub_1C57138C4((uint64_t)a1, (uint64_t)&v95, a4, v37);
      v43 = 0;
      v44 = *(unsigned __int8 **)(a3 + 48);
      v102[4] = *(_QWORD *)(a3 + 40);
      v102[5] = a3 + 24;
      v92 = v44;
      if (v44)
      {
        llvm::MetadataTracking::track((uint64_t)&v92, v44, 2);
        v43 = v92;
      }
      sub_1C4774EF4((uint64_t)&v100, 0, (uint64_t)v43);
      if (v92)
        llvm::MetadataTracking::untrack((uint64_t)&v92, v92);
      v45 = (uint64_t)a1[5];
      v94 = 257;
      v8 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v100, v45, 2, (uint64_t)&v92);
      v47 = (llvm::ConstantInt **)a1[5];
      v48 = *v47;
      v93 = *((_DWORD *)v47 + 2) >> 8;
      if (v93 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v92, 0, 0);
      else
        v92 = 0;
      v49 = llvm::ConstantInt::get(v48, (llvm::LLVMContext *)&v92, v46);
      if (v93 >= 0x41 && v92)
        MEMORY[0x1CAA32F9C](v92, 0x1000C8000313F17);
      sub_1C477667C(v8, (uint64_t)v49, (uint64_t)v20);
      sub_1C477667C(v8, v42, v99);
      v50 = (uint64_t *)v95;
LABEL_37:
      if (v50 != &v97)
        free(v50);
      goto LABEL_39;
    }
    v98 = 257;
    v56 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v20, (uint64_t *)(a3 + 24), (uint64_t)&v95, 0);
    v91 = (llvm::BasicBlock *)*((_QWORD *)v52 - 8);
    v57 = operator new(0xA0uLL);
    v58 = v57;
    v59 = 0;
    v60 = (llvm::Value *)(v57 + 24);
    v57[29] = v57[29] & 0x38000000 | 3;
    do
    {
      v61 = &v57[v59];
      *v61 = 0;
      v61[1] = 0;
      v61[2] = 0;
      v61[3] = v60;
      v59 += 8;
    }
    while (v59 != 24);
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v57 + 24), v56, v91, v8, 0);
    if ((v52[23] & 0x20) == 0)
    {
LABEL_68:
      if (!*((_QWORD *)v58 + 18) && (*((_BYTE *)v58 + 119) & 0x20) == 0)
        goto LABEL_73;
      v76 = 0;
LABEL_72:
      llvm::Value::setMetadata(v60, 2, v76);
LABEL_73:
      v77 = v20[5];
      v78 = v77 - 24;
      if (!v77)
        v78 = 0;
      if (*(unsigned __int8 *)(v78 + 16) - 40 >= 0xFFFFFFF5)
      {
        v79 = v77 == 0;
      }
      else
      {
        v78 = 0;
        v79 = 1;
      }
      v80 = (void *)(v78 + 24);
      if (v79)
        v80 = 0;
      v95 = v80;
      llvm::ReplaceInstWithInst(*(_QWORD *)(v78 + 40) + 40, (uint64_t **)&v95, v60);
      if (*((llvm::BasicBlock **)v91 + 5) != (llvm::BasicBlock *)((char *)v91 + 40))
      {
        for (i = *((_QWORD *)v91 + 6); ; i = *(_QWORD *)(v82 + 32))
        {
          v82 = i - 24;
          v83 = i ? i - 24 : 0;
          if (!i || *(_BYTE *)(v83 + 16) != 83)
            break;
          v84 = *(_DWORD *)(i - 4);
          v85 = v84 & 0x7FFFFFF;
          if ((v84 & 0x7FFFFFF) != 0)
          {
            v86 = 0;
            while (1)
            {
              v87 = v82 - 32 * v85;
              if ((v84 & 0x40000000) != 0)
                v87 = *(_QWORD *)(v82 - 8);
              if (*(llvm::BasicBlock **)(v87 + 32 * *(unsigned int *)(v82 + 60) + 8 * v86) == v56)
                break;
              if (v85 == ++v86)
                goto LABEL_93;
            }
          }
          else
          {
LABEL_93:
            LODWORD(v86) = -1;
          }
          if ((v84 & 0x40000000) != 0)
            v88 = *(_QWORD *)(v82 - 8);
          else
            v88 = v82 - 32 * v85;
          sub_1C477667C((llvm::PHINode *)v82, *(_QWORD *)(v88 + 32 * v86), (uint64_t)v20);
        }
      }
      sub_1C4773D54((uint64_t)&v95, a3, 0, 0, 0);
      v8 = (llvm::PHINode *)sub_1C57138C4((uint64_t)a1, (uint64_t)&v95, a4, v37);
      v50 = (uint64_t *)v95;
      goto LABEL_37;
    }
    v62 = ***(_QWORD ***)v52;
    v95 = v52;
    v63 = *(_DWORD *)(v62 + 2496);
    if (v63)
    {
      v64 = *(_QWORD *)(v62 + 2480);
      v65 = v63 - 1;
      v66 = v65 & ((v52 >> 4) ^ (v52 >> 9));
      v67 = (_QWORD *)(v64 + 40 * v66);
      v68 = (_BYTE *)*v67;
      if ((_BYTE *)*v67 == v52)
      {
LABEL_64:
        v73 = *((unsigned int *)v67 + 4);
        if ((_DWORD)v73)
        {
          v74 = (llvm::MDNode **)(v67[1] + 8);
          v75 = 16 * v73;
          while (*((_DWORD *)v74 - 2) != 2)
          {
            v74 += 2;
            v75 -= 16;
            if (!v75)
              goto LABEL_68;
          }
          v76 = *v74;
          if (*v74)
            goto LABEL_72;
        }
        goto LABEL_68;
      }
      v69 = 0;
      v70 = 1;
      while (v68 != (_BYTE *)-4096)
      {
        if (v69)
          v71 = 0;
        else
          v71 = v68 == (_BYTE *)-8192;
        if (v71)
          v69 = v67;
        v72 = v66 + v70++;
        v66 = v72 & v65;
        v67 = (_QWORD *)(v64 + 40 * v66);
        v68 = (_BYTE *)*v67;
        if ((_BYTE *)*v67 == v52)
          goto LABEL_64;
      }
      if (v69)
        v89 = v69;
      else
        v89 = v67;
    }
    else
    {
      v89 = 0;
    }
    v67 = sub_1C541AB24(v62 + 2480, (uint64_t)&v95, (uint64_t *)&v95, v89);
    v90 = v95;
    v67[3] = 0;
    v67[4] = 0;
    *v67 = v90;
    v67[1] = v67 + 3;
    v67[2] = 0x100000000;
    goto LABEL_64;
  }
  v98 = 257;
  v8 = (llvm::PHINode *)sub_1C4774B48((uint64_t)&v100, 32, (uint64_t)v22, (uint64_t)v23, (uint64_t)&v95);
LABEL_39:
  if (v100 != v102)
    free(v100);
  return v8;
}

_QWORD *sub_1C5712F58(uint64_t a1, int *a2, size_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v10;
  const void *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v18 = xmmword_1C85F4BB0;
  v5 = a1 + 56;
  v19 = 0;
  llvm::MD5::update((int *)&v18, a2, a3);
  llvm::MD5::final((int *)&v18, (int *)&v17);
  *(_QWORD *)&v18 = v17;
  v6 = sub_1C4FCD918(v5, (unint64_t *)&v18);
  if (v6 == v7)
    return 0;
  v8 = v6;
  v9 = v7;
  while (1)
  {
    v10 = *((_BYTE *)v8 + 63);
    if (v10 >= 0)
      v11 = v8 + 5;
    else
      v11 = (const void *)v8[5];
    v12 = v8[6];
    if (v10 >= 0)
      v12 = v10 & 0x7F;
    if (v12 == a3 && (!a3 || !memcmp(v11, a2, a3)))
      break;
    v13 = (_QWORD *)v8[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (_QWORD *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (_QWORD *)v8[2];
        v15 = *v14 == (_QWORD)v8;
        v8 = v14;
      }
      while (!v15);
    }
    v8 = v14;
    if (v14 == v9)
      return 0;
  }
  return v8 + 8;
}

llvm::UndefValue *sub_1C5713084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  llvm::UndefValue *inserted;
  int v11;
  unsigned int v12;
  llvm::Constant *v13;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  void *v21[2];
  char v22;

  v6 = *(_QWORD *)a1;
  v16 = 1283;
  v15[0] = "__typeid_";
  v15[2] = a2;
  v15[3] = a3;
  v17[0] = v15;
  v17[2] = "_";
  v18 = 770;
  v19[0] = v17;
  v19[2] = a4;
  v19[3] = a5;
  v20 = 1282;
  llvm::Twine::str((llvm::Twine *)v19, v21);
  if (v22 >= 0)
    v7 = (unsigned __int8 *)v21;
  else
    v7 = (unsigned __int8 *)v21[0];
  if (v22 >= 0)
    v8 = v22 & 0x7F;
  else
    v8 = (unint64_t)v21[1];
  inserted = llvm::Module::getOrInsertGlobal(v6, v7, v8, *(llvm::PointerType **)(a1 + 64));
  if (v22 < 0)
    operator delete(v21[0]);
  if (*((_BYTE *)inserted + 16) == 3 && inserted != 0)
  {
    v11 = *((_DWORD *)inserted + 8);
    v12 = v11 & 0xFFFFFFCF | 0x10;
    *((_DWORD *)inserted + 8) = v12;
    if ((v11 & 0xFu) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage(inserted) & 1) != 0)
        goto LABEL_17;
      v12 = *((_DWORD *)inserted + 8);
    }
    *((_DWORD *)inserted + 8) = v12 | 0x4000;
  }
LABEL_17:
  v13 = *(llvm::Constant **)(a1 + 56);
  if (*(llvm::Constant **)inserted != v13)
    return sub_1C537D3B8((llvm *)0x31, (uint64_t)inserted, v13, 0);
  return inserted;
}

llvm::UndefValue *sub_1C57131B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5, int a6, llvm::Constant *a7)
{
  llvm::Value *v10;
  const llvm::APInt *v11;
  llvm::Value *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  llvm::Value **v18;
  llvm::Value *v19;
  llvm::Value **v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  llvm::ConstantInt *v30;
  unint64_t v31;
  llvm::Value *v32;
  llvm::ValueHandleBase *v33;
  const llvm::APInt *v34;
  _QWORD *v35;
  uint64_t v36;
  llvm::ConstantInt *v37;
  unsigned int v38;
  unint64_t v39;
  llvm::ConstantInt *v40;
  llvm::ConstantInt *v42;
  llvm::Value *v43;
  llvm::ValueHandleBase *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  llvm::Value *v49;
  llvm::ValueHandleBase *v50;
  _QWORD *v51;
  uint64_t *v52;
  llvm::MDNode *Impl;
  llvm::Value **v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a1 + 28) - 41) <= 1 && *(_DWORD *)(a1 + 36) == 3)
  {
    v10 = sub_1C5713084(*(_QWORD *)a2, **(_QWORD **)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8), a3, a4);
    v12 = llvm::Value::stripPointerCasts(v10);
    if (*((_BYTE *)a7 + 8) == 13)
      v10 = sub_1C537D3B8((llvm *)0x2F, (uint64_t)v10, a7, 0);
    if ((*((_BYTE *)v12 + 23) & 0x20) == 0)
      goto LABEL_20;
    v13 = ***(_QWORD ***)v12;
    v57 = v12;
    v14 = *(_DWORD *)(v13 + 2496);
    if (v14)
    {
      v15 = *(_QWORD *)(v13 + 2480);
      v16 = v14 - 1;
      v17 = v16 & ((v12 >> 4) ^ (v12 >> 9));
      v18 = (llvm::Value **)(v15 + 40 * v17);
      v19 = *v18;
      if (*v18 == v12)
      {
LABEL_16:
        v24 = *((unsigned int *)v18 + 4);
        if ((_DWORD)v24)
        {
          v25 = (_QWORD *)((char *)v18[1] + 8);
          v26 = 16 * v24;
          while (*((_DWORD *)v25 - 2) != 21)
          {
            v25 += 2;
            v26 -= 16;
            if (!v26)
              goto LABEL_20;
          }
          if (*v25)
            return v10;
        }
LABEL_20:
        v27 = *(_QWORD *)(a1 + 96);
        v28 = *(_DWORD *)(v27 + 8);
        v29 = v28 >> 8;
        if (v28 >> 8 == a6)
        {
          v30 = *(llvm::ConstantInt **)v27;
          LODWORD(v58) = a6;
          if (v29 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v57, -1, 0);
          }
          else
          {
            if (v28 <= 0xFF)
              v31 = 0;
            else
              v31 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a6;
            v57 = (_QWORD *)v31;
          }
          v33 = llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&v57, v11);
          if (v58 >= 0x41 && v57)
            MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
          v35 = llvm::ValueAsMetadata::get(v33, v32);
          v36 = *(_QWORD *)(a1 + 96);
          v37 = *(llvm::ConstantInt **)v36;
          v38 = *(_DWORD *)(v36 + 8);
          LODWORD(v58) = v38 >> 8;
          if (v38 >> 8 <= 0x40)
          {
            if (v38 <= 0xFF)
              v39 = 0;
            else
              v39 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v38);
LABEL_42:
            v57 = (_QWORD *)v39;
LABEL_43:
            v50 = llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v57, v34);
            if (v58 >= 0x41)
            {
              if (v57)
                MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
            }
            v51 = llvm::ValueAsMetadata::get(v50, v49);
            v52 = **(uint64_t ***)a1;
            v57 = v35;
            v58 = v51;
            Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v52, &v57, 2, 0, 1);
            llvm::Value::setMetadata(v12, 21, Impl);
            return v10;
          }
          v56 = -1;
        }
        else
        {
          v42 = *(llvm::ConstantInt **)v27;
          LODWORD(v58) = v28 >> 8;
          if (v29 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v57, 0, 0);
          else
            v57 = 0;
          v44 = llvm::ConstantInt::get(v42, (llvm::LLVMContext *)&v57, v11);
          if (v58 >= 0x41 && v57)
            MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
          v45 = 1 << a6;
          v35 = llvm::ValueAsMetadata::get(v44, v43);
          v46 = *(_QWORD *)(a1 + 96);
          v37 = *(llvm::ConstantInt **)v46;
          v47 = *(unsigned int *)(v46 + 8);
          LODWORD(v58) = v47 >> 8;
          if (v47 >> 8 <= 0x40)
          {
            if (v47 <= 0xFF)
              v48 = 0;
            else
              v48 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v47);
            v39 = v48 & v45;
            goto LABEL_42;
          }
          v56 = v45;
        }
        llvm::APInt::initSlowCase((llvm::APInt *)&v57, v56, 0);
        goto LABEL_43;
      }
      v20 = 0;
      v21 = 1;
      while (v19 != (llvm::Value *)-4096)
      {
        if (v20)
          v22 = 0;
        else
          v22 = v19 == (llvm::Value *)-8192;
        if (v22)
          v20 = v18;
        v23 = v17 + v21++;
        v17 = v23 & v16;
        v18 = (llvm::Value **)(v15 + 40 * v17);
        v19 = *v18;
        if (*v18 == v12)
          goto LABEL_16;
      }
      if (v20)
        v54 = v20;
      else
        v54 = v18;
    }
    else
    {
      v54 = 0;
    }
    v18 = (llvm::Value **)sub_1C541AB24(v13 + 2480, (uint64_t)&v57, (uint64_t *)&v57, v54);
    v55 = (uint64_t)v57;
    v18[3] = 0;
    v18[4] = 0;
    *v18 = (llvm::Value *)v55;
    v18[1] = (llvm::Value *)(v18 + 3);
    v18[2] = (llvm::Value *)0x100000000;
    goto LABEL_16;
  }
  v40 = a7;
  if (*((_BYTE *)a7 + 8) != 13)
    v40 = *(llvm::ConstantInt **)(a1 + 88);
  v10 = (llvm::Value *)llvm::ConstantInt::get(v40, (uint64_t)a5, 0);
  if (*((_BYTE *)a7 + 8) != 13)
    return sub_1C537D3B8((llvm *)0x30, (uint64_t)v10, a7, 0);
  return v10;
}

uint64_t sub_1C571361C(uint64_t a1, llvm::DataLayout *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9;
  unsigned int v10;
  BOOL v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  void *v30;
  uint64_t v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  while (1)
  {
    v9 = *(unsigned __int8 *)(a3 + 16);
    if (v9 <= 4)
      break;
    if (v9 == 5)
    {
      v10 = *(unsigned __int16 *)(a3 + 18);
      if (v10 == 49)
        goto LABEL_17;
      if (v10 == 34)
        goto LABEL_41;
      goto LABEL_19;
    }
    if (v9 == 62)
    {
LABEL_41:
      LODWORD(v31) = *(_DWORD *)(*((_QWORD *)a2 + 29) + 4);
      if (v31 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v30, 0, 0);
      else
        v30 = 0;
      if (llvm::GEPOperator::accumulateConstantOffset(a3, a2, (uint64_t)&v30, 0, a5))
      {
        if (v31 >= 0x41)
          v25 = v30;
        else
          v25 = &v30;
        v26 = *v25 + a4;
        v27 = *(_DWORD *)(a3 + 20);
        if ((v27 & 0x40000000) != 0)
          v28 = *(_QWORD **)(a3 - 8);
        else
          v28 = (_QWORD *)(a3 - 32 * (v27 & 0x7FFFFFF));
        v24 = sub_1C571361C(a1, a2, *v28, v26);
      }
      else
      {
        v24 = 0;
      }
      if (v31 >= 0x41 && v30)
        MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
      return v24;
    }
LABEL_14:
    v12 = v9 >= 0x1C;
    v10 = v9 - 28;
    if (!v12)
      return 0;
    if (v10 == 49)
    {
LABEL_17:
      v13 = *(_DWORD *)(a3 + 20);
      if ((v13 & 0x40000000) != 0)
        v14 = *(uint64_t **)(a3 - 8);
      else
        v14 = (uint64_t *)(a3 - 32 * (v13 & 0x7FFFFFF));
      goto LABEL_29;
    }
LABEL_19:
    if (v10 != 57)
      return 0;
    v15 = *(_DWORD *)(a3 + 20);
    v16 = (v15 & 0x40000000) != 0 ? *(_QWORD *)(a3 - 8) : a3 - 32 * (v15 & 0x7FFFFFF);
    if (!sub_1C571361C(a1, a2, *(_QWORD *)(v16 + 32), a4))
      return 0;
    v17 = *(_DWORD *)(a3 + 20);
    if ((v17 & 0x40000000) != 0)
      v18 = *(_QWORD *)(a3 - 8);
    else
      v18 = a3 - 32 * (v17 & 0x7FFFFFF);
    v14 = (uint64_t *)(v18 + 64);
LABEL_29:
    a3 = *v14;
  }
  if (v9 - 2 >= 2 && v9 != 0)
    goto LABEL_14;
  v30 = v32;
  v31 = 0x200000000;
  llvm::Value::getMetadata((unsigned int *)a3, 19, (uint64_t)&v30);
  if ((_DWORD)v31)
  {
    v19 = 8 * v31;
    v20 = (char *)v30;
    while (1)
    {
      v21 = (_QWORD *)(*(_QWORD *)v20 - 8 * *(unsigned int *)(*(_QWORD *)v20 + 8));
      if (v21[1] == a1)
      {
        v22 = *(_QWORD *)(*v21 + 128);
        v23 = (_QWORD *)(v22 + 24);
        if (*(_DWORD *)(v22 + 32) >= 0x41u)
          v23 = (_QWORD *)*v23;
        if (*v23 == a4)
          break;
      }
      v20 += 8;
      v19 -= 8;
      if (!v19)
        goto LABEL_37;
    }
    v24 = 1;
  }
  else
  {
LABEL_37:
    v24 = 0;
  }
  if (v30 != v32)
    free(v30);
  return v24;
}

uint64_t sub_1C57138C4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t *v7;
  uint64_t v8;
  int v9;
  const llvm::APInt *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  llvm::ConstantInt *v13;
  unsigned int v14;
  unint64_t v15;
  llvm::ValueHandleBase *v16;
  const llvm::APInt *v17;
  uint64_t v18;
  llvm::ConstantInt *v19;
  unsigned int v20;
  unint64_t v21;
  llvm::ValueHandleBase *v22;
  uint64_t v23;
  const llvm::APInt *v24;
  uint64_t v25;
  llvm::ConstantInt *v26;
  llvm::ConstantInt *v27;
  uint64_t *v29;
  llvm::GetElementPtrInst *v30;
  uint64_t ***v31;
  uint64_t v32;
  char v33;
  char v34;
  char *v35;
  char *v36;
  llvm::Value *v37;
  uint64_t **v38;
  _QWORD *v39;
  uint64_t **v40;
  uint64_t v41;
  llvm::UndefValue *v42;
  uint64_t v43;
  llvm::ConstantInt *v44;
  llvm::ValueHandleBase *v45;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 **v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  llvm::PointerType *v54;
  char v55[32];
  __int16 v56;
  const char *v57;
  unsigned int v58;
  __int16 v59;
  unsigned __int8 *v60;

  if (*(_DWORD *)a3 != 2)
  {
    v29 = *(uint64_t **)(a3 + 32);
    if (byte_1ED80CAA0 && !*(_QWORD *)(a1 + 16))
    {
      v54 = *(llvm::PointerType **)(a1 + 48);
      v57 = "bits_use";
      v59 = 259;
      v29 = (uint64_t *)llvm::GlobalAlias::create(v54, 0, 8, (uint64_t)&v57, (uint64_t)v29, *(_QWORD *)a1);
    }
    v30 = *(llvm::GetElementPtrInst **)(a1 + 48);
    v59 = 257;
    v31 = sub_1C4867B70((uint64_t *)a2, v30, v29, (uint64_t)a4, (uint64_t)&v57);
    v32 = *(_QWORD *)(a1 + 48);
    v56 = 257;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 56) + 40) + 272, v32);
    v34 = v33;
    v35 = (char *)operator new(0x60uLL);
    v36 = v35;
    v37 = (llvm::Value *)(v35 + 32);
    *((_QWORD *)v35 + 2) = 0;
    *((_QWORD *)v35 + 3) = v35 + 32;
    v59 = 257;
    *((_QWORD *)v35 + 4) = v32;
    *((_QWORD *)v35 + 5) = 0;
    *((_WORD *)v35 + 24) = 60;
    *((_DWORD *)v35 + 13) = 1;
    *(_OWORD *)(v35 + 56) = 0u;
    *(_OWORD *)(v35 + 72) = 0u;
    *((_DWORD *)v35 + 22) = 0;
    *(_QWORD *)v35 = v31;
    *((_QWORD *)v35 + 1) = 0;
    if (v31)
    {
      v40 = v31[1];
      v39 = v31 + 1;
      v38 = v40;
      *((_QWORD *)v35 + 1) = v40;
      if (v40)
        v38[2] = (uint64_t *)(v35 + 8);
      *((_QWORD *)v35 + 2) = v39;
      *v39 = v35;
    }
    *((_WORD *)v35 + 25) = 2 * (v34 & 0x3F);
    v35[92] = 1;
    llvm::Value::setName((uint64_t ***)v35 + 4, (uint64_t)&v57);
    (*(void (**)(_QWORD, llvm::Value *, char *, _QWORD, _QWORD))(**(_QWORD **)(a2 + 80) + 16))(*(_QWORD *)(a2 + 80), v37, v55, *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56));
    v41 = *(unsigned int *)(a2 + 8);
    if (!(_DWORD)v41)
    {
LABEL_24:
      v42 = sub_1C537D3B8((llvm *)0x2F, *(_QWORD *)(a3 + 40), *(llvm::Constant **)(a1 + 48), 0);
      v59 = 257;
      v25 = sub_1C4D89BCC(a2, v37, (uint64_t)v42, (uint64_t)&v57);
      v43 = *(_QWORD *)(a1 + 48);
      v44 = *(llvm::ConstantInt **)v43;
      v58 = *(_DWORD *)(v43 + 8) >> 8;
      if (v58 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v57, 0, 0);
      else
        v57 = 0;
      v27 = v44;
      goto LABEL_27;
    }
    v47 = *(_QWORD *)a2;
    v48 = *(_QWORD *)a2 + 16 * v41;
    v49 = (unsigned __int8 **)(v36 + 80);
    while (1)
    {
      v50 = *(_DWORD *)v47;
      v51 = *(unsigned __int8 **)(v47 + 8);
      if (v51)
      {
        if (!v50)
        {
          v60 = *(unsigned __int8 **)(v47 + 8);
          llvm::MetadataTracking::track((uint64_t)&v60, v51, 2);
          v52 = *v49;
          goto LABEL_40;
        }
      }
      else
      {
        v52 = *v49;
        if (!*v49 && (v36[55] & 0x20) == 0)
          goto LABEL_37;
        if (!v50)
        {
          v60 = 0;
LABEL_40:
          if (v52)
            llvm::MetadataTracking::untrack((uint64_t)(v36 + 80), v52);
          v53 = v60;
          *v49 = v60;
          if (v53)
            llvm::MetadataTracking::retrack((uint64_t)&v60, v53, (uint64_t)(v36 + 80));
          goto LABEL_37;
        }
      }
      llvm::Value::setMetadata(v37, *(_DWORD *)v47, (llvm::MDNode *)v51);
LABEL_37:
      v47 += 16;
      if (v47 == v48)
        goto LABEL_24;
    }
  }
  v7 = *(uint64_t **)(a3 + 48);
  v8 = *v7;
  v9 = *(_DWORD *)(*v7 + 8) >> 8;
  v59 = 257;
  v11 = sub_1C4773690((uint64_t *)a2, a4, v8, (uint64_t)&v57);
  v12 = (v9 - 1);
  v13 = *(llvm::ConstantInt **)v8;
  v14 = *(_DWORD *)(v8 + 8);
  v58 = v14 >> 8;
  if (v14 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v57, v12, 0);
  }
  else
  {
    if (v14 <= 0xFF)
      v15 = 0;
    else
      v15 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v14);
    v57 = (const char *)(v15 & v12);
  }
  v16 = llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v57, v10);
  if (v58 >= 0x41 && v57)
    MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
  v59 = 257;
  v18 = sub_1C4D89BCC(a2, v11, (uint64_t)v16, (uint64_t)&v57);
  v19 = *(llvm::ConstantInt **)v8;
  v20 = *(_DWORD *)(v8 + 8);
  v58 = v20 >> 8;
  if (v20 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v57, 1, 0);
  }
  else
  {
    if (v20 <= 0xFF)
      LOBYTE(v21) = 0;
    else
      v21 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v20);
    v57 = (const char *)(v21 & 1);
  }
  v22 = llvm::ConstantInt::get(v19, (llvm::LLVMContext *)&v57, v17);
  if (v58 >= 0x41 && v57)
    MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
  v59 = 257;
  v23 = sub_1C506E874(a2, (uint64_t)v22, v18, (uint64_t)&v57, 0, 0);
  v59 = 257;
  v25 = sub_1C4D89BCC(a2, v7, v23, (uint64_t)&v57);
  v26 = *(llvm::ConstantInt **)v8;
  v58 = *(_DWORD *)(v8 + 8) >> 8;
  if (v58 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v57, 0, 0);
  else
    v57 = 0;
  v27 = v26;
LABEL_27:
  v45 = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v57, v24);
  if (v58 >= 0x41 && v57)
    MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
  v59 = 257;
  return sub_1C4774B48(a2, 33, v25, (uint64_t)v45, (uint64_t)&v57);
}

void sub_1C5713D98(uint64_t *a1, unsigned __int8 *a2, llvm::PoisonValue **a3, int a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  llvm::PointerType *v9;
  uint64_t v10;
  llvm::Type *v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  llvm::Instruction *v18;
  char *v19;
  size_t v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char v38;
  char v39;
  char *v40;
  char *v41;
  llvm::Value *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  llvm::Value **NullValue;
  _QWORD *v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  _QWORD *v54;
  char *v55;
  char *v56;
  char *v57;
  unsigned __int8 **v58;
  int v59;
  unsigned __int8 *v60;
  unsigned __int8 **v61;
  uint64_t v62;
  llvm::PointerType *v63;
  llvm::Type *v64;
  uint64_t v65;
  uint64_t *v66;
  llvm::Value *v67;
  llvm::Type *v68;
  llvm::Value **v69;
  llvm::UndefValue *ICmp;
  llvm::Type *v71;
  llvm::Value **v72;
  llvm::Type *v73;
  llvm::Constant *Select;
  char *v75;
  unsigned __int8 **v76;
  unsigned __int8 **v77;
  unsigned __int8 **v78;
  char v82[32];
  __int16 v83;
  unsigned __int8 *v84;
  uint64_t v85;
  int64x2_t v86;
  int64x2_t v87;
  int64x2_t v88;
  int64x2_t v89;
  void *v90;
  uint64_t v91;
  _BYTE v92[64];
  char *v93;
  int v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v100 = *MEMORY[0x1E0C80C00];
  v85 = 1;
  v86 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v87 = v86;
  v88 = v86;
  v89 = v86;
  v90 = v92;
  v91 = 0x800000000;
  sub_1C5714688(a2, (uint64_t)&v85);
  if ((_DWORD)v91)
  {
    v5 = (uint64_t *)v90;
    v6 = (uint64_t *)((char *)v90 + 8 * v91);
    while (1)
    {
      v7 = *v5;
      v8 = a1[20];
      if (v8)
        goto LABEL_13;
      v9 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(**(_QWORD **)*a1 + 1576), 0, 0, 0);
      v10 = *a1;
      v11 = (llvm::Type *)*(unsigned int *)(*a1 + 284);
      v93 = "__cfi_global_var_init";
      v96 = 259;
      v12 = (char *)operator new(0x80uLL);
      *((_DWORD *)v12 + 7) = *((_DWORD *)v12 + 7) & 0x38000000 | 0x40000000;
      *(_QWORD *)v12 = 0;
      a1[20] = (uint64_t)llvm::Function::Function((uint64_t *)v12 + 1, v9, 7, v11, (uint64_t)&v93, v10);
      v13 = *(_QWORD **)*a1;
      v93 = "entry";
      v96 = 259;
      v14 = operator new();
      *(_QWORD *)v14 = *v13 + 1600;
      *(_QWORD *)(v14 + 8) = 0;
      v15 = *(_DWORD *)(v14 + 20) & 0xC0000000;
      *(_DWORD *)(v14 + 16) = 22;
      *(_DWORD *)(v14 + 20) = v15;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0;
      *(_QWORD *)(v14 + 40) = v14 + 40;
      *(_QWORD *)(v14 + 48) = v14 + 40;
      *(_QWORD *)(v14 + 56) = 0;
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v12 + 80), (_QWORD *)v14);
      v16 = *((_QWORD *)v12 + 10);
      *(_QWORD *)(v14 + 32) = v12 + 80;
      *(_QWORD *)(v14 + 24) = v16;
      *(_QWORD *)(v16 + 8) = v14 + 24;
      *((_QWORD *)v12 + 10) = v14 + 24;
      llvm::Value::setName((uint64_t ***)v14, (uint64_t)&v93);
      v17 = *(_QWORD *)*a1;
      v18 = (llvm::Instruction *)operator new(0x40uLL);
      *((_DWORD *)v18 + 5) &= 0x38000000u;
      llvm::Instruction::Instruction(v18, (llvm::Type *)(*(_QWORD *)v17 + 1576), 1, v18, 0, (llvm::BasicBlock *)v14);
      v19 = (char *)a1[20];
      v20 = *((_DWORD *)a1 + 9) == 5 ? 45 : 13;
      v21 = *((_DWORD *)a1 + 9) == 5 ? "__TEXT,__StaticInit,regular,pure_instructions" : ".text.startup";
      v22 = llvm::UniqueStringSaver::save(***(_QWORD ***)v19 + 2136, v21, v20);
      v24 = v23;
      v25 = ***(_QWORD ***)v19;
      v93 = v19;
      v26 = *(_DWORD *)(v25 + 2520);
      if (!v26)
        break;
      v27 = *(_QWORD *)(v25 + 2504);
      v28 = v26 - 1;
      v29 = v28 & ((v19 >> 4) ^ (v19 >> 9));
      v30 = (_QWORD *)(v27 + 24 * v29);
      v31 = (_DWORD *)*v30;
      if ((char *)*v30 != v19)
      {
        v50 = 0;
        v51 = 1;
        while (v31 != (_DWORD *)-4096)
        {
          if (v50)
            v52 = 0;
          else
            v52 = v31 == (_DWORD *)-8192;
          if (v52)
            v50 = v30;
          v53 = v29 + v51++;
          v29 = v53 & v28;
          v30 = (_QWORD *)(v27 + 24 * v29);
          v31 = (_DWORD *)*v30;
          if ((char *)*v30 == v19)
            goto LABEL_12;
        }
        if (v50)
          v54 = v50;
        else
          v54 = v30;
        goto LABEL_48;
      }
LABEL_12:
      v30[1] = v22;
      v30[2] = v24;
      *((_DWORD *)v19 + 8) = *((_DWORD *)v19 + 8) & 0xFFBFFFFF | ((v24 != 0) << 22);
      sub_1C5F50894("llvm.global_ctors", *a1, a1[20], 0, 0);
      v8 = a1[20];
LABEL_13:
      v32 = *(_QWORD *)(v8 + 80);
      v33 = v32 - 24;
      if (!v32)
        v33 = 0;
      v34 = *(_QWORD *)(v33 + 40);
      if (v34 == v33 + 40)
      {
        v36 = 0;
      }
      else
      {
        if (v34)
          v35 = v34 - 24;
        else
          v35 = 0;
        if (*(unsigned __int8 *)(v35 + 16) - 29 >= 0xB)
          v36 = 0;
        else
          v36 = v35;
      }
      sub_1C4773D54((uint64_t)&v93, v36, 0, 0, 0);
      *(_BYTE *)(v7 + 80) &= ~1u;
      v37 = *(uint64_t **)(v7 - 32);
      if ((*(_WORD *)(v7 + 34) & 0x3F) != 0)
      {
        v38 = (*(_WORD *)(v7 + 34) & 0x3F) - 1;
      }
      else
      {
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v97 + 56) + 40) + 272, *v37);
        v38 = v39;
      }
      v40 = (char *)operator new(0x80uLL);
      v41 = v40;
      *((_DWORD *)v40 + 21) = *((_DWORD *)v40 + 21) & 0x38000000 | 2;
      *(_QWORD *)v40 = 0;
      *((_QWORD *)v40 + 2) = 0;
      *((_QWORD *)v40 + 1) = 0;
      *((_QWORD *)v40 + 5) = 0;
      *((_QWORD *)v40 + 6) = 0;
      *((_QWORD *)v40 + 4) = 0;
      *((_QWORD *)v40 + 8) = **(_QWORD **)*v37 + 1576;
      v42 = (llvm::Value *)(v40 + 64);
      *((_QWORD *)v40 + 3) = v40 + 64;
      *((_QWORD *)v40 + 7) = v40 + 64;
      *((_QWORD *)v40 + 9) = 0;
      v40[80] = 61;
      v40[81] = 0;
      *((_WORD *)v40 + 41) = 0;
      *((_DWORD *)v40 + 21) = 2;
      *(_OWORD *)(v40 + 88) = 0u;
      *(_OWORD *)(v40 + 104) = 0u;
      *((_DWORD *)v40 + 30) = 0;
      *(_QWORD *)v40 = v37;
      v45 = v37[1];
      v44 = v37 + 1;
      v43 = v45;
      *((_QWORD *)v40 + 1) = v45;
      if (v45)
        *(_QWORD *)(v43 + 16) = v40 + 8;
      *((_QWORD *)v40 + 2) = v44;
      *v44 = v40;
      if (*((_QWORD *)v40 + 4))
      {
        **((_QWORD **)v40 + 6) = *((_QWORD *)v40 + 5);
        v62 = *((_QWORD *)v40 + 5);
        if (v62)
          *(_QWORD *)(v62 + 16) = *((_QWORD *)v40 + 6);
      }
      *((_QWORD *)v40 + 4) = v7;
      v46 = (_QWORD *)(v7 + 8);
      v47 = *(_QWORD *)(v7 + 8);
      *((_QWORD *)v40 + 5) = v47;
      if (v47)
        *(_QWORD *)(v47 + 16) = v40 + 40;
      *((_QWORD *)v40 + 6) = v46;
      *v46 = v40 + 32;
      *((_WORD *)v40 + 41) = 2 * (v38 & 0x3F);
      v40[124] = 1;
      v83 = 257;
      (*(void (**)(uint64_t, llvm::Value *, char *, uint64_t, uint64_t))(*(_QWORD *)v99 + 16))(v99, v42, v82, v97, v98);
      if (v94)
      {
        v56 = v93;
        v57 = &v93[16 * v94];
        v58 = (unsigned __int8 **)(v41 + 112);
        do
        {
          v59 = *(_DWORD *)v56;
          v60 = (unsigned __int8 *)*((_QWORD *)v56 + 1);
          if (v60)
          {
            if (!v59)
            {
              v84 = (unsigned __int8 *)*((_QWORD *)v56 + 1);
              v76 = v58;
              llvm::MetadataTracking::track((uint64_t)&v84, v60, 2);
              v58 = v76;
              v48 = *v76;
              goto LABEL_60;
            }
          }
          else
          {
            v48 = *v58;
            if (!*v58 && (v41[87] & 0x20) == 0)
              goto LABEL_57;
            if (!v59)
            {
              v84 = 0;
LABEL_60:
              if (v48)
              {
                v78 = v58;
                llvm::MetadataTracking::untrack((uint64_t)v58, v48);
                v58 = v78;
              }
              v48 = v84;
              *v58 = v84;
              if (v48)
              {
                v77 = v58;
                llvm::MetadataTracking::retrack((uint64_t)&v84, v48, (uint64_t)v58);
                v58 = v77;
              }
              goto LABEL_57;
            }
          }
          v75 = v57;
          v61 = v58;
          llvm::Value::setMetadata(v42, *(_DWORD *)v56, (llvm::MDNode *)v60);
          v58 = v61;
          v57 = v75;
LABEL_57:
          v56 += 16;
        }
        while (v56 != v57);
      }
      NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(v7 + 24), (llvm::Type *)v48);
      llvm::GlobalVariable::setInitializer(v7, (llvm::Constant *)NullValue);
      if (v93 != (char *)&v95)
        free(v93);
      if (++v5 == v6)
        goto LABEL_67;
    }
    v54 = 0;
LABEL_48:
    v30 = sub_1C53D65B8(v25 + 2504, (uint64_t)&v93, (uint64_t *)&v93, v54);
    v55 = v93;
    v30[1] = 0;
    v30[2] = 0;
    *v30 = v55;
    goto LABEL_12;
  }
LABEL_67:
  v63 = (llvm::PointerType *)*((_QWORD *)a2 + 3);
  v64 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a2 + 8) >> 8);
  v96 = 257;
  v65 = *a1;
  v66 = (uint64_t *)operator new(0x80uLL);
  v67 = (llvm::Value *)(v66 + 1);
  *((_DWORD *)v66 + 7) = *((_DWORD *)v66 + 7) & 0x38000000 | 0x40000000;
  *v66 = 0;
  llvm::Function::Function(v66 + 1, v63, 9, v64, (uint64_t)&v93, v65);
  sub_1C57144B0((uint64_t)a2, v67, a4);
  v69 = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v68);
  ICmp = llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)0x21, a2, (llvm::Constant *)v69, 0);
  v72 = llvm::Constant::getNullValue(*(llvm::Constant **)a2, v71);
  Select = llvm::ConstantExpr::getSelect(ICmp, a3, v72, 0, v73);
  llvm::Value::doRAUW(v67, Select, (llvm::Value *)1);
  llvm::Function::eraseFromParent(v67);
  if (v90 != v92)
    free(v90);
  if ((v85 & 1) == 0)
    MEMORY[0x1CAA32FB4](v86.i64[0], 8);
}

void sub_1C57144B0(uint64_t a1, llvm::Value *a2, int a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Constant **v16;
  uint64_t v17;
  llvm::Constant *v18;
  uint64_t v19;
  uint64_t v20;
  int64x2_t v21;
  int64x2_t v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[5];

  v25[4] = *MEMORY[0x1E0C80C00];
  v20 = 1;
  v21 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v22 = v21;
  v23 = v25;
  v24 = 0x400000000;
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v7 = (uint64_t *)((char *)a2 + 8);
    do
    {
      v8 = v3;
      v9 = (uint64_t *)(v3 + 8);
      v3 = *(_QWORD *)(v3 + 8);
      v10 = v9[2];
      v11 = *(unsigned __int8 *)(v10 + 16);
      if (v11 != 4 && v11 != 7)
      {
        v13 = v11 == 84 && v10 - 32 == v8;
        if (!v13 || (*(_BYTE *)(a1 + 33) & 0x40) == 0 && a3)
        {
          if (v11 >= 0x15)
            v10 = 0;
          v19 = v10;
          if (v10 && *(unsigned __int8 *)(v10 + 16) >= 4u)
          {
            sub_1C61ABE04((uint64_t)&v20, &v19);
          }
          else
          {
            if (*(_QWORD *)v8)
            {
              **(_QWORD **)(v8 + 16) = v3;
              v14 = *(_QWORD *)(v8 + 8);
              if (v14)
                *(_QWORD *)(v14 + 16) = *(_QWORD *)(v8 + 16);
            }
            *(_QWORD *)v8 = a2;
            if (a2)
            {
              v15 = *v7;
              *v9 = *v7;
              if (v15)
                *(_QWORD *)(v15 + 16) = v9;
              *(_QWORD *)(v8 + 16) = v7;
              *v7 = v8;
            }
          }
        }
      }
    }
    while (v3);
    v16 = (llvm::Constant **)v23;
    if ((_DWORD)v24)
    {
      v17 = 8 * v24;
      do
      {
        v18 = *v16++;
        llvm::Constant::handleOperandChange(v18, (llvm::Value *)a1, a2);
        v17 -= 8;
      }
      while (v17);
      v16 = (llvm::Constant **)v23;
    }
    if (v16 != v25)
      free(v16);
  }
  if ((v20 & 1) == 0)
    MEMORY[0x1CAA32FB4](v21.i64[0], 8);
}

BOOL sub_1C571465C(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;

  result = 0;
  v3 = *(_QWORD *)(a1 + 24);
  if (v3)
  {
    if (*(_BYTE *)(v3 + 16) == 84)
      return v3 - 32 == a1;
  }
  return result;
}

_QWORD *sub_1C5714688(_QWORD *result, uint64_t a2)
{
  uint64_t i;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;

  for (i = result[1]; i; i = *(_QWORD *)(i + 8))
  {
    result = *(_QWORD **)(i + 24);
    v4 = *((unsigned __int8 *)result + 16);
    if (v4 == 3)
      v5 = *(_QWORD *)(i + 24);
    else
      v5 = 0;
    v6 = v5;
    if (v5)
    {
      result = sub_1C61F66B4(a2, &v6);
    }
    else if (v4 <= 0x14)
    {
      result = (_QWORD *)sub_1C5714688();
    }
  }
  return result;
}

uint64_t sub_1C57146F8(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v8;
  uint64_t v9;
  unsigned int v10;
  const void *v11;
  size_t v12;
  int i;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  BOOL v17;
  uint64_t result;

  if (a2)
  {
    v8 = sub_1C5E3DF4C(*(_QWORD **)a3, *(_QWORD *)a3 + *(_QWORD *)(a3 + 8));
    v9 = 0;
    v10 = a2 - 1;
    v11 = *(const void **)a3;
    v12 = *(_QWORD *)(a3 + 8);
    for (i = 1; ; ++i)
    {
      v14 = v8 & v10;
      v15 = a1 + 32 * v14;
      v16 = *(const void **)v15;
      if (*(_QWORD *)v15 == -2)
      {
        if (v11 == (const void *)-2)
          goto LABEL_19;
      }
      else if (v16 == (const void *)-1)
      {
        if (v11 == (const void *)-1)
          goto LABEL_19;
      }
      else if (v12 == *(_QWORD *)(v15 + 8) && (!v12 || !memcmp(v11, *(const void **)v15, v12)))
      {
LABEL_19:
        result = 1;
        goto LABEL_23;
      }
      if (v16 == (const void *)-1)
        break;
      if (v9)
        v17 = 0;
      else
        v17 = v16 == (const void *)-2;
      if (v17)
        v9 = a1 + 32 * v14;
      v8 = i + v14;
    }
    result = 0;
    if (v9)
      v15 = v9;
  }
  else
  {
    v15 = 0;
    result = 0;
  }
LABEL_23:
  *a4 = v15;
  return result;
}

_QWORD *sub_1C5714804(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C57148B4(a1, v6);
  v8 = 0;
  sub_1C57146F8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_OWORD *sub_1C57148B4(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = xmmword_1C85F6FF0;
        result += 2;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = (_OWORD *)v4;
      do
      {
        if (*(_QWORD *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v17 = 0;
          sub_1C57146F8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)v13, &v17);
          v14 = v17;
          *v17 = *v13;
          v14[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 32 * v15;
    do
    {
      *result = xmmword_1C85F6FF0;
      result += 2;
      v16 -= 32;
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1C57149EC(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 16 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 16 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_13;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_13:
  *a4 = v6;
  return result;
}

_QWORD *sub_1C5714A68(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;

  v24 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new(16 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = 16 * v15;
      do
      {
        *v14 = -4096;
        v14 += 2;
        v16 -= 16;
      }
      while (v16);
    }
    if ((_DWORD)v6)
    {
      v17 = 0;
      v18 = (uint64_t *)(v9 + 8);
      v19 = 16 * v6;
      do
      {
        v20 = *(v18 - 1);
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          sub_1C57149EC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v25);
          v21 = v25;
          *v25 = v20;
          v21[1] = *v18;
          *(_DWORD *)(a1 + 8) = ++v17;
        }
        v18 += 2;
        v19 -= 16;
      }
      while (v19);
    }
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_QWORD **)a1;
    LODWORD(v22) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v22 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v22)
    {
      v23 = 0;
      do
      {
        v14[v23] = -4096;
        v23 += 2;
      }
      while (2 * v22 != v23);
    }
  }
  sub_1C57149EC((uint64_t)v14, v22, *a2, &v24);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v24;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5714C28(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;

  v24 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new(40 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = 40 * v15;
      do
      {
        *v14 = -4096;
        v14 += 5;
        v16 -= 40;
      }
      while (v16);
    }
    if ((_DWORD)v6)
    {
      v17 = 0;
      v18 = v9 + 16;
      v19 = 40 * v6;
      do
      {
        v20 = *(_QWORD *)(v18 - 16);
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          sub_1C498D438(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v25);
          v21 = v25;
          *v25 = v20;
          *((_DWORD *)v21 + 2) = *(_DWORD *)(v18 - 8);
          v21[3] = 0;
          v21[4] = 0;
          v21[2] = 0;
          *((_OWORD *)v21 + 1) = *(_OWORD *)v18;
          v21[4] = *(_QWORD *)(v18 + 16);
          ++v17;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)(v18 + 8) = 0;
          *(_QWORD *)(v18 + 16) = 0;
          *(_DWORD *)(a1 + 8) = v17;
        }
        v18 += 40;
        v19 -= 40;
      }
      while (v19);
    }
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_QWORD **)a1;
    LODWORD(v22) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v22 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v22)
    {
      v23 = 0;
      do
      {
        v14[v23] = -4096;
        v23 += 5;
      }
      while (5 * v22 != v23);
    }
  }
  sub_1C498D438((uint64_t)v14, v22, *a2, &v24);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v24;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5714E18(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;

  v24 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new(40 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = 40 * v15;
      do
      {
        *v14 = -4096;
        v14 += 5;
        v16 -= 40;
      }
      while (v16);
    }
    if ((_DWORD)v6)
    {
      v17 = 0;
      v18 = v9 + 24;
      v19 = 40 * v6;
      do
      {
        v20 = *(_QWORD *)(v18 - 24);
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          sub_1C498D438(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v25);
          v21 = v25;
          *v25 = v20;
          v21[1] = 0;
          v21[2] = 0;
          v21[3] = 0;
          *(_OWORD *)(v21 + 1) = *(_OWORD *)(v18 - 16);
          v21[3] = *(_QWORD *)v18;
          *(_QWORD *)(v18 - 8) = 0;
          *(_QWORD *)v18 = 0;
          *(_QWORD *)(v18 - 16) = 0;
          *((_BYTE *)v21 + 32) = *(_BYTE *)(v18 + 8);
          *(_DWORD *)(a1 + 8) = ++v17;
        }
        v18 += 40;
        v19 -= 40;
      }
      while (v19);
    }
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_QWORD **)a1;
    LODWORD(v22) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v22 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v22)
    {
      v23 = 0;
      do
      {
        v14[v23] = -4096;
        v23 += 5;
      }
      while (5 * v22 != v23);
    }
  }
  sub_1C498D438((uint64_t)v14, v22, *a2, &v24);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v24;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C5715004(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    v2 = *(_QWORD *)a1;
    if ((*(_BYTE *)(*(_QWORD *)v1 + 8) & 1) == 0)
    {
      v2 = sub_1C5715004();
      *(_QWORD *)v1 = v2;
    }
    return v2;
  }
  return v1;
}

_QWORD *sub_1C5715044(uint64_t a1, uint64_t *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_1C57150FC(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -1)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -2;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

_QWORD *sub_1C57150FC(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C5715270(a1, 2 * v7);
    v8 = *a3;
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = (37 * *a3) & v10;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
    v12 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v14 = 1;
      while (v12 != -1)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == -2;
        if (v15)
          v13 = a4;
        v16 = v11 + v14++;
        v11 = v16 & v10;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
        v12 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
    {
LABEL_3:
      v8 = *a4;
      goto LABEL_4;
    }
    sub_1C5715270(a1, v7);
    v8 = *a3;
    v17 = *(_DWORD *)(a1 + 16) - 1;
    v18 = (37 * *a3) & v17;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
    v19 = *a4;
    if (*a3 != *a4)
    {
      v13 = 0;
      v20 = 1;
      while (v19 != -1)
      {
        if (v13)
          v21 = 0;
        else
          v21 = v19 == -2;
        if (v21)
          v13 = a4;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v18);
        v19 = *a4;
        if (v8 == *a4)
          goto LABEL_4;
      }
LABEL_27:
      if (v13)
        a4 = v13;
      goto LABEL_3;
    }
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C5715270(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5715328((_QWORD *)a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C5715328(_QWORD *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v4 = a2;
  v5 = result;
  result[1] = 0;
  v6 = *((unsigned int *)result + 4);
  if ((_DWORD)v6)
  {
    v7 = (_QWORD *)*result;
    v8 = 16 * v6;
    do
    {
      *v7 = -1;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *v4;
      if ((unint64_t)*v4 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v10 = *((_DWORD *)v5 + 4) - 1;
        v11 = v10 & (37 * v9);
        v12 = (_QWORD *)(*v5 + 16 * v11);
        v13 = *v12;
        if (v9 != *v12)
        {
          v14 = 0;
          v15 = 1;
          while (v13 != -1)
          {
            if (v14)
              v16 = 0;
            else
              v16 = v13 == -2;
            if (v16)
              v14 = v12;
            v17 = v11 + v15++;
            v11 = v17 & v10;
            v12 = (_QWORD *)(*v5 + 16 * (v17 & v10));
            v13 = *v12;
            if (v9 == *v12)
              goto LABEL_7;
          }
          if (v14)
            v12 = v14;
        }
LABEL_7:
        *v12 = v9;
        v12[1] = v4[1];
        v4[1] = 0;
        ++*((_DWORD *)v5 + 2);
        result = sub_1C571543C(v4 + 1);
      }
      v4 += 2;
    }
    while (v4 != a3);
  }
  return result;
}

_QWORD *sub_1C571543C(_QWORD *result)
{
  void **v1;
  _QWORD *v2;
  unint64_t v3;

  if ((*result & 2) != 0)
  {
    v1 = (void **)(*result & 0xFFFFFFFFFFFFFFFCLL);
    if (v1)
    {
      v2 = result;
      v3 = *result & 0xFFFFFFFFFFFFFFFCLL;
      if (*v1 != v1 + 2)
        free(*v1);
      MEMORY[0x1CAA32FC0](v3, 0x1080C40ED926357);
      return v2;
    }
  }
  return result;
}

uint64_t *sub_1C5715498(uint64_t *result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  unint64_t v33;
  unint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  _QWORD *v54;
  BOOL v56;
  uint64_t v57;
  _QWORD *v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  unint64_t v90;
  unsigned int v91;
  unsigned int v92;
  uint64_t v93;
  unint64_t v94;
  unsigned int *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int *v100;
  unsigned int *v101;
  unsigned int v102;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v40 = *(_DWORD *)(a2 - 8);
        v41 = *(_DWORD *)(v8 + 8);
        if (v40 < v41)
        {
          v42 = *(_QWORD *)v8;
          *(_QWORD *)v8 = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v42;
          *(_DWORD *)(v8 + 8) = v40;
          *(_DWORD *)(a2 - 8) = v41;
        }
        return result;
      case 3:
        return sub_1C5715C28((uint64_t *)v8, (uint64_t *)(v8 + 16), (uint64_t *)(a2 - 16));
      case 4:
        return sub_1C5715EF0(v8, v8 + 16, v8 + 32, a2 - 16);
      case 5:
        result = sub_1C5715EF0(v8, v8 + 16, v8 + 32, v8 + 48);
        v43 = *(_DWORD *)(a2 - 8);
        v44 = *(_DWORD *)(v8 + 56);
        if (v43 < v44)
        {
          v45 = *(_QWORD *)(v8 + 48);
          *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 - 16);
          *(_QWORD *)(a2 - 16) = v45;
          *(_DWORD *)(v8 + 56) = v43;
          *(_DWORD *)(a2 - 8) = v44;
          v46 = *(_DWORD *)(v8 + 56);
          v47 = *(_DWORD *)(v8 + 40);
          if (v46 < v47)
          {
            v48 = *(_QWORD *)(v8 + 32);
            v49 = *(_QWORD *)(v8 + 48);
            *(_QWORD *)(v8 + 32) = v49;
            *(_QWORD *)(v8 + 48) = v48;
            *(_DWORD *)(v8 + 40) = v46;
            *(_DWORD *)(v8 + 56) = v47;
            v50 = *(_DWORD *)(v8 + 24);
            if (v46 < v50)
            {
              v51 = *(_QWORD *)(v8 + 16);
              *(_QWORD *)(v8 + 16) = v49;
              *(_QWORD *)(v8 + 32) = v51;
              *(_DWORD *)(v8 + 24) = v46;
              *(_DWORD *)(v8 + 40) = v50;
              v52 = *(_DWORD *)(v8 + 8);
              if (v46 < v52)
              {
                v53 = *(_QWORD *)v8;
                *(_QWORD *)v8 = v49;
                *(_QWORD *)(v8 + 16) = v53;
                *(_DWORD *)(v8 + 8) = v46;
                *(_DWORD *)(v8 + 24) = v52;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v54 = (_QWORD *)(v8 + 16);
          v56 = v8 == a2 || v54 == (_QWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v56)
            {
              v57 = 0;
              v58 = (_QWORD *)v8;
              do
              {
                v59 = *((_DWORD *)v58 + 6);
                v60 = *((_DWORD *)v58 + 2);
                v58 = v54;
                if (v59 < v60)
                {
                  v61 = *v54;
                  v62 = v57;
                  while (1)
                  {
                    v63 = v8 + v62;
                    *(_QWORD *)(v63 + 16) = *(_QWORD *)(v8 + v62);
                    *(_DWORD *)(v63 + 24) = *(_DWORD *)(v8 + v62 + 8);
                    if (!v62)
                      break;
                    v62 -= 16;
                    if (v59 >= *(_DWORD *)(v63 - 8))
                    {
                      v64 = v8 + v62 + 16;
                      goto LABEL_80;
                    }
                  }
                  v64 = v8;
LABEL_80:
                  *(_QWORD *)v64 = v61;
                  *(_DWORD *)(v64 + 8) = v59;
                }
                v54 = v58 + 2;
                v57 += 16;
              }
              while (v58 + 2 != (_QWORD *)a2);
            }
          }
          else if (!v56)
          {
            v96 = (unsigned int *)(v8 + 24);
            do
            {
              v97 = *(_DWORD *)(v7 + 24);
              v98 = *(_DWORD *)(v7 + 8);
              v7 = (uint64_t)v54;
              if (v97 < v98)
              {
                v99 = *v54;
                v100 = v96;
                do
                {
                  v101 = v100;
                  *((_QWORD *)v100 - 1) = *((_QWORD *)v100 - 3);
                  v102 = *(v100 - 4);
                  v100 -= 4;
                  *v101 = v102;
                }
                while (v97 < *(v101 - 8));
                *((_QWORD *)v100 - 1) = v99;
                *v100 = v97;
              }
              v54 = (_QWORD *)(v7 + 16);
              v96 += 4;
            }
            while (v7 + 16 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v65 = (unint64_t)(v10 - 2) >> 1;
            v66 = v65;
            do
            {
              v67 = v66;
              if (v65 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = v8 + 16 * v68;
                if (2 * v67 + 2 < v10)
                {
                  v70 = *(_DWORD *)(v69 + 8);
                  v71 = *(_DWORD *)(v69 + 24);
                  v69 += 16 * (v70 < v71);
                  if (v70 < v71)
                    v68 = 2 * v67 + 2;
                }
                v72 = *(_DWORD *)(v69 + 8);
                v73 = *(_DWORD *)(v8 + 16 * v67 + 8);
                if (v72 >= v73)
                {
                  v74 = v8 + 16 * v67;
                  v75 = *(_QWORD *)v74;
                  do
                  {
                    v76 = v74;
                    v74 = v69;
                    *(_QWORD *)v76 = *(_QWORD *)v69;
                    *(_DWORD *)(v76 + 8) = v72;
                    if (v65 < v68)
                      break;
                    v77 = (2 * v68) | 1;
                    v69 = v8 + 16 * v77;
                    v78 = 2 * v68 + 2;
                    if (v78 < v10)
                    {
                      v79 = *(_DWORD *)(v69 + 8);
                      result = (uint64_t *)*(unsigned int *)(v69 + 24);
                      v69 += 16 * (v79 < result);
                      if (v79 < result)
                        v77 = v78;
                    }
                    v72 = *(_DWORD *)(v69 + 8);
                    v68 = v77;
                  }
                  while (v72 >= v73);
                  *(_QWORD *)v74 = v75;
                  *(_DWORD *)(v74 + 8) = v73;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            do
            {
              v80 = 0;
              v81 = *(_QWORD *)v8;
              v82 = *(_DWORD *)(v8 + 8);
              v83 = v8;
              do
              {
                v84 = v83 + 16 * (v80 + 1);
                v85 = (2 * v80) | 1;
                v86 = 2 * v80 + 2;
                if (v86 < v10)
                {
                  v87 = *(_DWORD *)(v84 + 8);
                  v88 = *(_DWORD *)(v84 + 24);
                  v84 += 16 * (v87 < v88);
                  if (v87 < v88)
                    v85 = v86;
                }
                *(_QWORD *)v83 = *(_QWORD *)v84;
                *(_DWORD *)(v83 + 8) = *(_DWORD *)(v84 + 8);
                v83 = v84;
                v80 = v85;
              }
              while (v85 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v84 == a2 - 16)
              {
                *(_QWORD *)v84 = v81;
                *(_DWORD *)(v84 + 8) = v82;
              }
              else
              {
                *(_QWORD *)v84 = *(_QWORD *)(a2 - 16);
                *(_DWORD *)(v84 + 8) = *(_DWORD *)(a2 - 8);
                *(_QWORD *)(a2 - 16) = v81;
                *(_DWORD *)(a2 - 8) = v82;
                v89 = v84 - v8 + 16;
                if (v89 >= 17)
                {
                  v90 = (((unint64_t)v89 >> 4) - 2) >> 1;
                  v91 = *(_DWORD *)(v8 + 16 * v90 + 8);
                  v92 = *(_DWORD *)(v84 + 8);
                  if (v91 < v92)
                  {
                    v93 = *(_QWORD *)v84;
                    do
                    {
                      v94 = v84;
                      v84 = v8 + 16 * v90;
                      *(_QWORD *)v94 = *(_QWORD *)v84;
                      *(_DWORD *)(v94 + 8) = v91;
                      if (!v90)
                        break;
                      v90 = (v90 - 1) >> 1;
                      v91 = *(_DWORD *)(v8 + 16 * v90 + 8);
                    }
                    while (v91 < v92);
                    *(_QWORD *)v84 = v93;
                    *(_DWORD *)(v84 + 8) = v92;
                  }
                }
              }
              a2 -= 16;
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 16 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x801)
        {
          result = sub_1C5715C28((uint64_t *)(v7 + 16 * ((unint64_t)v10 >> 1)), (uint64_t *)v7, (uint64_t *)(a2 - 16));
        }
        else
        {
          sub_1C5715C28((uint64_t *)v7, (uint64_t *)(v7 + 16 * ((unint64_t)v10 >> 1)), (uint64_t *)(a2 - 16));
          sub_1C5715C28((uint64_t *)(v7 + 16), (uint64_t *)(v12 - 16), (uint64_t *)(a2 - 32));
          sub_1C5715C28((uint64_t *)(v7 + 32), (uint64_t *)(v7 + 16 + 16 * v11), (uint64_t *)(a2 - 48));
          result = sub_1C5715C28((uint64_t *)(v12 - 16), (uint64_t *)v12, (uint64_t *)(v7 + 16 + 16 * v11));
          v13 = *(_QWORD *)v7;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_QWORD *)v12 = v13;
          LODWORD(v13) = *(_DWORD *)(v7 + 8);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v12 + 8);
          *(_DWORD *)(v12 + 8) = v13;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = *(_DWORD *)(v7 + 8);
          if (*(_DWORD *)(v7 - 8) < v14)
            goto LABEL_12;
          if (v14 >= *(_DWORD *)(a2 - 8))
          {
            v31 = v7 + 16;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              v32 = *(_DWORD *)(v31 + 8);
              v31 += 16;
            }
            while (v14 >= v32);
          }
          else
          {
            v29 = v7;
            do
            {
              v8 = v29 + 16;
              v30 = *(_DWORD *)(v29 + 24);
              v29 += 16;
            }
            while (v14 >= v30);
          }
          v33 = a2;
          if (v8 < a2)
          {
            v34 = a2;
            do
            {
              v33 = v34 - 16;
              v35 = *(_DWORD *)(v34 - 8);
              v34 -= 16;
            }
            while (v14 < v35);
          }
          v36 = *(_QWORD *)v7;
          while (v8 < v33)
          {
            v37 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v33;
            *(_QWORD *)v33 = v37;
            LODWORD(v37) = *(_DWORD *)(v8 + 8);
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v33 + 8);
            *(_DWORD *)(v33 + 8) = v37;
            do
            {
              v38 = *(_DWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v14 >= v38);
            do
            {
              v39 = *(_DWORD *)(v33 - 8);
              v33 -= 16;
            }
            while (v14 < v39);
          }
          if (v8 - 16 != v7)
          {
            *(_QWORD *)v7 = *(_QWORD *)(v8 - 16);
            *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 8);
          }
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v36;
          *(_DWORD *)(v8 - 8) = v14;
          continue;
        }
        v14 = *(_DWORD *)(v7 + 8);
LABEL_12:
        v15 = 0;
        v16 = *(_QWORD *)v7;
        do
        {
          v17 = *(_DWORD *)(v7 + v15 + 24);
          v15 += 16;
        }
        while (v17 < v14);
        v18 = v7 + v15;
        v19 = a2;
        if (v15 == 16)
        {
          v22 = a2;
          while (v18 < v22)
          {
            v20 = v22 - 16;
            v23 = *(_DWORD *)(v22 - 8);
            v22 -= 16;
            if (v23 < v14)
              goto LABEL_22;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 16;
            v21 = *(_DWORD *)(v19 - 8);
            v19 -= 16;
          }
          while (v21 >= v14);
        }
LABEL_22:
        v8 = v18;
        if (v18 < v20)
        {
          v24 = v20;
          do
          {
            v25 = *(_QWORD *)v8;
            *(_QWORD *)v8 = *(_QWORD *)v24;
            *(_QWORD *)v24 = v25;
            LODWORD(v25) = *(_DWORD *)(v8 + 8);
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v24 + 8);
            *(_DWORD *)(v24 + 8) = v25;
            do
            {
              v26 = *(_DWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v26 < v14);
            do
            {
              v27 = *(_DWORD *)(v24 - 8);
              v24 -= 16;
            }
            while (v27 >= v14);
          }
          while (v8 < v24);
        }
        if (v8 - 16 != v7)
        {
          *(_QWORD *)v7 = *(_QWORD *)(v8 - 16);
          *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 - 8);
        }
        *(_QWORD *)(v8 - 16) = v16;
        *(_DWORD *)(v8 - 8) = v14;
        if (v18 < v20)
        {
LABEL_33:
          result = (uint64_t *)sub_1C5715498(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = sub_1C5715CE0(v7, v8 - 16);
        result = (uint64_t *)sub_1C5715CE0(v8, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 16;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C5715C28(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;

  v3 = *((_DWORD *)a2 + 2);
  v4 = *((_DWORD *)result + 2);
  v5 = *((_DWORD *)a3 + 2);
  if (v3 >= v4)
  {
    if (v5 < v3)
    {
      v7 = *a2;
      *a2 = *a3;
      *a3 = v7;
      *((_DWORD *)a2 + 2) = v5;
      *((_DWORD *)a3 + 2) = v3;
      v8 = *((_DWORD *)a2 + 2);
      v9 = *((_DWORD *)result + 2);
      if (v8 < v9)
      {
        v10 = *result;
        *result = *a2;
        *a2 = v10;
        *((_DWORD *)result + 2) = v8;
        *((_DWORD *)a2 + 2) = v9;
      }
    }
  }
  else
  {
    v6 = *result;
    if (v5 >= v3)
    {
      *result = *a2;
      *a2 = v6;
      *((_DWORD *)result + 2) = v3;
      *((_DWORD *)a2 + 2) = v4;
      v11 = *((_DWORD *)a3 + 2);
      if (v11 >= v4)
        return result;
      *a2 = *a3;
      *a3 = v6;
      *((_DWORD *)a2 + 2) = v11;
    }
    else
    {
      *result = *a3;
      *a3 = v6;
      *((_DWORD *)result + 2) = v5;
    }
    *((_DWORD *)a3 + 2) = v4;
  }
  return result;
}

BOOL sub_1C5715CE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 8);
      v7 = *(_DWORD *)(a1 + 8);
      if (v6 < v7)
      {
        v8 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v8;
        *(_DWORD *)(a1 + 8) = v6;
        *(_DWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      sub_1C5715C28((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a2 - 16));
      return 1;
    case 4:
      sub_1C5715EF0(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1C5715EF0(a1, a1 + 16, a1 + 32, a1 + 48);
      v18 = *(_DWORD *)(a2 - 8);
      v19 = *(_DWORD *)(a1 + 56);
      if (v18 < v19)
      {
        v20 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v20;
        *(_DWORD *)(a1 + 56) = v18;
        *(_DWORD *)(a2 - 8) = v19;
        v21 = *(_DWORD *)(a1 + 56);
        v22 = *(_DWORD *)(a1 + 40);
        if (v21 < v22)
        {
          v23 = *(_QWORD *)(a1 + 32);
          v24 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)(a1 + 32) = v24;
          *(_QWORD *)(a1 + 48) = v23;
          *(_DWORD *)(a1 + 40) = v21;
          *(_DWORD *)(a1 + 56) = v22;
          v25 = *(_DWORD *)(a1 + 24);
          if (v21 < v25)
          {
            v26 = *(_QWORD *)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v24;
            *(_QWORD *)(a1 + 32) = v26;
            *(_DWORD *)(a1 + 24) = v21;
            *(_DWORD *)(a1 + 40) = v25;
            v27 = *(_DWORD *)(a1 + 8);
            if (v21 < v27)
            {
              v28 = *(_QWORD *)a1;
              *(_QWORD *)a1 = v24;
              *(_QWORD *)(a1 + 16) = v28;
              *(_DWORD *)(a1 + 8) = v21;
              *(_DWORD *)(a1 + 24) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 32;
      sub_1C5715C28((uint64_t *)a1, (uint64_t *)(a1 + 16), (uint64_t *)(a1 + 32));
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)(v10 + 8);
    if (v13 < *(_DWORD *)(v9 + 8))
    {
      v14 = *(_QWORD *)v10;
      v15 = v11;
      while (1)
      {
        v16 = a1 + v15;
        *(_QWORD *)(v16 + 48) = *(_QWORD *)(a1 + v15 + 32);
        *(_DWORD *)(v16 + 56) = *(_DWORD *)(a1 + v15 + 40);
        if (v15 == -32)
          break;
        v15 -= 16;
        if (v13 >= *(_DWORD *)(v16 + 24))
        {
          v17 = a1 + v15 + 48;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *(_QWORD *)v17 = v14;
      *(_DWORD *)(v17 + 8) = v13;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

uint64_t *sub_1C5715EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;

  result = sub_1C5715C28((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  v9 = *(_DWORD *)(a4 + 8);
  v10 = *(_DWORD *)(a3 + 8);
  if (v9 < v10)
  {
    v11 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v11;
    *(_DWORD *)(a3 + 8) = v9;
    *(_DWORD *)(a4 + 8) = v10;
    v12 = *(_DWORD *)(a3 + 8);
    v13 = *(_DWORD *)(a2 + 8);
    if (v12 < v13)
    {
      v14 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v14;
      *(_DWORD *)(a2 + 8) = v12;
      *(_DWORD *)(a3 + 8) = v13;
      v15 = *(_DWORD *)(a2 + 8);
      v16 = *(_DWORD *)(a1 + 8);
      if (v15 < v16)
      {
        v17 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v17;
        *(_DWORD *)(a1 + 8) = v15;
        *(_DWORD *)(a2 + 8) = v16;
      }
    }
  }
  return result;
}

uint64_t sub_1C5715F9C(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  BOOL v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t *v54;
  BOOL v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t *v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t *v109;
  uint64_t *v110;
  int64_t v111;
  uint64_t *v112;
  int64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;

  v9 = (uint64_t *)result;
LABEL_2:
  v110 = a2 - 2;
  v112 = a2 - 1;
  v109 = a2 - 3;
  v10 = v9;
  v115 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v51 = *(a2 - 1);
        v117 = *v10;
        v118 = v51;
        v52 = *(_DWORD *)sub_1C5712658(*a3, &v118);
        result = (uint64_t)sub_1C5712658(*a3, &v117);
        if (v52 < *(_DWORD *)result)
        {
          v53 = *v10;
          *v10 = *(a2 - 1);
          *(a2 - 1) = v53;
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_1C5716AFC(v10, v10 + 1, v112, a3);
      case 4uLL:
        return (uint64_t)sub_1C5716E94(v10, v10 + 1, v10 + 2, v112, a3);
      case 5uLL:
        return (uint64_t)sub_1C5716994(v10, v10 + 1, v10 + 2, v10 + 3, v112, a3);
      default:
        if (v11 <= 191)
        {
          v54 = v10 + 1;
          v56 = v10 == a2 || v54 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v56)
            {
              v57 = 0;
              v58 = v10;
              do
              {
                v60 = *v58;
                v59 = v58[1];
                v58 = v54;
                v117 = v60;
                v118 = v59;
                v61 = *(_DWORD *)sub_1C5712658(*a3, &v118);
                result = (uint64_t)sub_1C5712658(*a3, &v117);
                if (v61 < *(_DWORD *)result)
                {
                  v62 = *v58;
                  v63 = v57;
                  while (1)
                  {
                    *(uint64_t *)((char *)v10 + v63 + 8) = *(uint64_t *)((char *)v10 + v63);
                    if (!v63)
                      break;
                    v117 = *(uint64_t *)((char *)v10 + v63 - 8);
                    v118 = v62;
                    v64 = *(_DWORD *)sub_1C5712658(*a3, &v118);
                    result = (uint64_t)sub_1C5712658(*a3, &v117);
                    v63 -= 8;
                    if (v64 >= *(_DWORD *)result)
                    {
                      v65 = (uint64_t *)((char *)v10 + v63 + 8);
                      goto LABEL_72;
                    }
                  }
                  v65 = v10;
LABEL_72:
                  *v65 = v62;
                }
                v54 = v58 + 1;
                v57 += 8;
              }
              while (v58 + 1 != a2);
            }
          }
          else if (!v56)
          {
            do
            {
              v102 = *v9;
              v101 = v9[1];
              v9 = v54;
              v117 = v102;
              v118 = v101;
              v103 = *(_DWORD *)sub_1C5712658(*a3, &v118);
              result = (uint64_t)sub_1C5712658(*a3, &v117);
              if (v103 < *(_DWORD *)result)
              {
                v104 = *v9;
                v105 = v9;
                do
                {
                  v106 = v105;
                  v107 = *--v105;
                  *v106 = v107;
                  v117 = *(v106 - 2);
                  v118 = v104;
                  v108 = *(_DWORD *)sub_1C5712658(*a3, &v118);
                  result = (uint64_t)sub_1C5712658(*a3, &v117);
                }
                while (v108 < *(_DWORD *)result);
                *v105 = v104;
              }
              v54 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v66 = (v12 - 2) >> 1;
            v113 = v66;
            do
            {
              v67 = v66;
              if (v113 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = &v9[v68];
                if (2 * v66 + 2 < (uint64_t)v12)
                {
                  v70 = *v69;
                  v117 = v69[1];
                  v118 = v70;
                  v71 = *(_DWORD *)sub_1C5712658(*a3, &v118);
                  if (v71 < *(_DWORD *)sub_1C5712658(*a3, &v117))
                  {
                    ++v69;
                    v68 = 2 * v67 + 2;
                  }
                }
                v72 = &v9[v67];
                v73 = *v69;
                v117 = *v72;
                v118 = v73;
                v74 = *(_DWORD *)sub_1C5712658(*a3, &v118);
                result = (uint64_t)sub_1C5712658(*a3, &v117);
                if (v74 >= *(_DWORD *)result)
                {
                  v111 = v67;
                  v75 = *v72;
                  do
                  {
                    v76 = v69;
                    *v72 = *v69;
                    if (v113 < v68)
                      break;
                    v77 = (2 * v68) | 1;
                    v69 = &v9[v77];
                    v78 = 2 * v68 + 2;
                    if (v78 < (uint64_t)v12)
                    {
                      v79 = *v69;
                      v117 = v69[1];
                      v118 = v79;
                      v80 = *(_DWORD *)sub_1C5712658(*a3, &v118);
                      if (v80 < *(_DWORD *)sub_1C5712658(*a3, &v117))
                      {
                        ++v69;
                        v77 = v78;
                      }
                    }
                    v81 = *v69;
                    v117 = v75;
                    v118 = v81;
                    v82 = *(_DWORD *)sub_1C5712658(*a3, &v118);
                    result = (uint64_t)sub_1C5712658(*a3, &v117);
                    v72 = v76;
                    v68 = v77;
                  }
                  while (v82 >= *(_DWORD *)result);
                  *v76 = v75;
                  v67 = v111;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            v83 = v115;
            do
            {
              v84 = 0;
              v114 = *v9;
              v116 = v83;
              v85 = v9;
              do
              {
                v86 = &v85[v84 + 1];
                v87 = (2 * v84) | 1;
                v88 = 2 * v84 + 2;
                if (v88 < (uint64_t)v12)
                {
                  v89 = *v86;
                  v117 = v86[1];
                  v118 = v89;
                  v90 = *(_DWORD *)sub_1C5712658(*a3, &v118);
                  result = (uint64_t)sub_1C5712658(*a3, &v117);
                  if (v90 < *(_DWORD *)result)
                  {
                    ++v86;
                    v87 = v88;
                  }
                }
                *v85 = *v86;
                v85 = v86;
                v84 = v87;
              }
              while (v87 <= (uint64_t)((v12 - 2) >> 1));
              v83 = v116 - 1;
              if (v86 == v116 - 1)
              {
                *v86 = v114;
              }
              else
              {
                *v86 = *v83;
                *v83 = v114;
                v91 = (char *)v86 - (char *)v9 + 8;
                if (v91 >= 9)
                {
                  v92 = (((unint64_t)v91 >> 3) - 2) >> 1;
                  v93 = &v9[v92];
                  v94 = *v93;
                  v117 = *v86;
                  v118 = v94;
                  v95 = *(_DWORD *)sub_1C5712658(*a3, &v118);
                  result = (uint64_t)sub_1C5712658(*a3, &v117);
                  if (v95 < *(_DWORD *)result)
                  {
                    v96 = *v86;
                    do
                    {
                      v97 = v93;
                      *v86 = *v93;
                      if (!v92)
                        break;
                      v92 = (v92 - 1) >> 1;
                      v93 = &v9[v92];
                      v98 = *v93;
                      v117 = v96;
                      v118 = v98;
                      v99 = *(_DWORD *)sub_1C5712658(*a3, &v118);
                      result = (uint64_t)sub_1C5712658(*a3, &v117);
                      v86 = v97;
                    }
                    while (v99 < *(_DWORD *)result);
                    *v97 = v96;
                    v83 = v116 - 1;
                  }
                }
              }
            }
            while ((uint64_t)v12-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1C5716AFC(&v9[v12 >> 1], v9, v112, a3);
        }
        else
        {
          sub_1C5716AFC(v9, &v9[v12 >> 1], v112, a3);
          sub_1C5716AFC(v9 + 1, v14 - 1, v110, a3);
          sub_1C5716AFC(v9 + 2, &v9[v13 + 1], v109, a3);
          sub_1C5716AFC(v14 - 1, &v9[v12 >> 1], &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v16 = *(v9 - 1);
          v117 = *v9;
          v118 = v16;
          v17 = *(_DWORD *)sub_1C5712658(*a3, &v118);
          if (v17 >= *(_DWORD *)sub_1C5712658(*a3, &v117))
          {
            v36 = *v9;
            v117 = *v112;
            v118 = v36;
            v37 = *(_DWORD *)sub_1C5712658(*a3, &v118);
            result = (uint64_t)sub_1C5712658(*a3, &v117);
            if (v37 >= *(_DWORD *)result)
            {
              v40 = v9 + 1;
              do
              {
                v10 = v40;
                if (v40 >= a2)
                  break;
                ++v40;
                v117 = *v10;
                v118 = v36;
                v41 = *(_DWORD *)sub_1C5712658(*a3, &v118);
                result = (uint64_t)sub_1C5712658(*a3, &v117);
              }
              while (v41 >= *(_DWORD *)result);
            }
            else
            {
              v10 = v9;
              do
              {
                v38 = v10[1];
                ++v10;
                v117 = v38;
                v118 = v36;
                v39 = *(_DWORD *)sub_1C5712658(*a3, &v118);
                result = (uint64_t)sub_1C5712658(*a3, &v117);
              }
              while (v39 >= *(_DWORD *)result);
            }
            v42 = a2;
            if (v10 < a2)
            {
              v42 = a2;
              do
              {
                v43 = *--v42;
                v117 = v43;
                v118 = v36;
                v44 = *(_DWORD *)sub_1C5712658(*a3, &v118);
                result = (uint64_t)sub_1C5712658(*a3, &v117);
              }
              while (v44 < *(_DWORD *)result);
            }
            while (v10 < v42)
            {
              v45 = *v10;
              *v10 = *v42;
              *v42 = v45;
              do
              {
                v46 = v10[1];
                ++v10;
                v117 = v46;
                v118 = v36;
                v47 = *(_DWORD *)sub_1C5712658(*a3, &v118);
              }
              while (v47 >= *(_DWORD *)sub_1C5712658(*a3, &v117));
              do
              {
                v48 = *--v42;
                v117 = v48;
                v118 = v36;
                v49 = *(_DWORD *)sub_1C5712658(*a3, &v118);
                result = (uint64_t)sub_1C5712658(*a3, &v117);
              }
              while (v49 < *(_DWORD *)result);
            }
            v50 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v50;
            a5 = 0;
            *v50 = v36;
            continue;
          }
        }
        v18 = 0;
        v19 = *v9;
        do
        {
          v20 = v9[v18 + 1];
          v117 = v19;
          v118 = v20;
          v21 = *(_DWORD *)sub_1C5712658(*a3, &v118);
          ++v18;
        }
        while (v21 < *(_DWORD *)sub_1C5712658(*a3, &v117));
        v22 = &v9[v18];
        v23 = v115;
        if (v18 == 1)
        {
          v23 = v115;
          do
          {
            if (v22 >= v23)
              break;
            v26 = *--v23;
            v117 = v19;
            v118 = v26;
            v27 = *(_DWORD *)sub_1C5712658(*a3, &v118);
          }
          while (v27 >= *(_DWORD *)sub_1C5712658(*a3, &v117));
        }
        else
        {
          do
          {
            v24 = *--v23;
            v117 = v19;
            v118 = v24;
            v25 = *(_DWORD *)sub_1C5712658(*a3, &v118);
          }
          while (v25 >= *(_DWORD *)sub_1C5712658(*a3, &v117));
        }
        v10 = v22;
        if (v22 < v23)
        {
          v28 = v23;
          do
          {
            v29 = *v10;
            *v10 = *v28;
            *v28 = v29;
            do
            {
              v30 = v10[1];
              ++v10;
              v117 = v19;
              v118 = v30;
              v31 = *(_DWORD *)sub_1C5712658(*a3, &v118);
            }
            while (v31 < *(_DWORD *)sub_1C5712658(*a3, &v117));
            do
            {
              v32 = *--v28;
              v117 = v19;
              v118 = v32;
              v33 = *(_DWORD *)sub_1C5712658(*a3, &v118);
            }
            while (v33 >= *(_DWORD *)sub_1C5712658(*a3, &v117));
          }
          while (v10 < v28);
        }
        v34 = v10 - 1;
        if (v10 - 1 != v9)
          *v9 = *v34;
        *v34 = v19;
        a2 = v115;
        if (v22 < v23)
        {
LABEL_30:
          result = sub_1C5715F9C(v9, v10 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v35 = sub_1C5716C84(v9, v10 - 1, a3);
        result = sub_1C5716C84(v10, v115, a3);
        if (!(_DWORD)result)
        {
          if (v35)
            continue;
          goto LABEL_30;
        }
        a2 = v10 - 1;
        if (!v35)
          goto LABEL_2;
        return result;
    }
  }
}

_QWORD *sub_1C5716994(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  unsigned int v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_1C5716E94(a1, a2, a3, a4, a6);
  v12 = *a5;
  v25 = *a4;
  v26 = v12;
  v13 = *(_DWORD *)sub_1C5712658(*a6, &v26);
  result = sub_1C5712658(*a6, &v25);
  if (v13 < *(_DWORD *)result)
  {
    v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    v16 = *a4;
    v25 = *a3;
    v26 = v16;
    v17 = *(_DWORD *)sub_1C5712658(*a6, &v26);
    result = sub_1C5712658(*a6, &v25);
    if (v17 < *(_DWORD *)result)
    {
      v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      v19 = *a3;
      v25 = *a2;
      v26 = v19;
      v20 = *(_DWORD *)sub_1C5712658(*a6, &v26);
      result = sub_1C5712658(*a6, &v25);
      if (v20 < *(_DWORD *)result)
      {
        v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
        v22 = *a2;
        v25 = *a1;
        v26 = v22;
        v23 = *(_DWORD *)sub_1C5712658(*a6, &v26);
        result = sub_1C5712658(*a6, &v25);
        if (v23 < *(_DWORD *)result)
        {
          v24 = *a1;
          *a1 = *a2;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C5716AFC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *result;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v8 = *a2;
  v22 = *a1;
  v23 = v8;
  v9 = *(_DWORD *)sub_1C5712658(*a4, &v23);
  v10 = sub_1C5712658(*a4, &v22);
  v11 = *a3;
  if (v9 >= *(_DWORD *)v10)
  {
    v22 = *a2;
    v23 = v11;
    v15 = *(_DWORD *)sub_1C5712658(*a4, &v23);
    result = sub_1C5712658(*a4, &v22);
    if (v15 < *(_DWORD *)result)
    {
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      v17 = *a2;
      v22 = *a1;
      v23 = v17;
      v18 = *(_DWORD *)sub_1C5712658(*a4, &v23);
      result = sub_1C5712658(*a4, &v22);
      if (v18 < *(_DWORD *)result)
      {
        v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  else
  {
    v22 = *a2;
    v23 = v11;
    v12 = *(_DWORD *)sub_1C5712658(*a4, &v23);
    result = sub_1C5712658(*a4, &v22);
    v14 = *a1;
    if (v12 >= *(_DWORD *)result)
    {
      *a1 = *a2;
      *a2 = v14;
      v20 = *a3;
      v22 = v14;
      v23 = v20;
      v21 = *(_DWORD *)sub_1C5712658(*a4, &v23);
      result = sub_1C5712658(*a4, &v22);
      if (v21 >= *(_DWORD *)result)
        return result;
      v14 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v14;
  }
  return result;
}

BOOL sub_1C5716C84(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v21 = *a1;
      v22 = v8;
      v9 = *(_DWORD *)sub_1C5712658(*a3, &v22);
      if (v9 < *(_DWORD *)sub_1C5712658(*a3, &v21))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_1C5716AFC(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C5716E94(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C5716994(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      sub_1C5716AFC(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *v12;
    v21 = *v11;
    v22 = v15;
    v16 = *(_DWORD *)sub_1C5712658(*a3, &v22);
    if (v16 < *(_DWORD *)sub_1C5712658(*a3, &v21))
    {
      v17 = *v12;
      v18 = v13;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18 + 24) = *(uint64_t *)((char *)a1 + v18 + 16);
        if (v18 == -16)
          break;
        v21 = *(uint64_t *)((char *)a1 + v18 + 8);
        v22 = v17;
        v19 = *(_DWORD *)sub_1C5712658(*a3, &v22);
        v18 -= 8;
        if (v19 >= *(_DWORD *)sub_1C5712658(*a3, &v21))
        {
          v20 = (uint64_t *)((char *)a1 + v18 + 24);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v17;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

_QWORD *sub_1C5716E94(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  unsigned int v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1C5716AFC(a1, a2, a3, a5);
  v10 = *a4;
  v20 = *a3;
  v21 = v10;
  v11 = *(_DWORD *)sub_1C5712658(*a5, &v21);
  result = sub_1C5712658(*a5, &v20);
  if (v11 < *(_DWORD *)result)
  {
    v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    v14 = *a3;
    v20 = *a2;
    v21 = v14;
    v15 = *(_DWORD *)sub_1C5712658(*a5, &v21);
    result = sub_1C5712658(*a5, &v20);
    if (v15 < *(_DWORD *)result)
    {
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      v17 = *a2;
      v20 = *a1;
      v21 = v17;
      v18 = *(_DWORD *)sub_1C5712658(*a5, &v21);
      result = sub_1C5712658(*a5, &v20);
      if (v18 < *(_DWORD *)result)
      {
        v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

uint64_t *sub_1C5716FAC(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (*(_DWORD *)(v37 + 8) < *(_DWORD *)(*v8 + 8))
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C5717694(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C5717904(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v39 = v8 + 1;
        v40 = v8 + 2;
        v41 = v8 + 3;
        result = sub_1C5717904(v8, v8 + 1, v8 + 2, v8 + 3);
        v42 = *(a2 - 1);
        v43 = v8[3];
        if (*(_DWORD *)(v42 + 8) < *(_DWORD *)(v43 + 8))
        {
          *v41 = v42;
          *(a2 - 1) = v43;
          v44 = *v41;
          v45 = *v40;
          v46 = *(_DWORD *)(*v41 + 8);
          if (v46 < *(_DWORD *)(*v40 + 8))
          {
            *v40 = v44;
            *v41 = v45;
            v47 = *v39;
            if (v46 < *(_DWORD *)(*v39 + 8))
            {
              v8[1] = v44;
              v8[2] = v47;
              v48 = *v8;
              if (v46 < *(_DWORD *)(*v8 + 8))
              {
                *v8 = v44;
                v8[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = v8 + 1;
          v51 = v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v8;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *(_DWORD *)(v54 + 8);
                if (v56 < *(_DWORD *)(v55 + 8))
                {
                  v57 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(uint64_t *)((char *)v8 + v57 - 16);
                    v57 -= 8;
                    if (v56 >= *(_DWORD *)(v55 + 8))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v49;
              v90 = *(_DWORD *)(v88 + 8);
              if (v90 < *(_DWORD *)(v89 + 8))
              {
                do
                {
                  *v49 = v89;
                  v89 = *(v49 - 2);
                  --v49;
                }
                while (v90 < *(_DWORD *)(v89 + 8));
                *v49 = v88;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < v10 && *(_DWORD *)(v65 + 8) < *(_DWORD *)(v64[1] + 8))
                {
                  v65 = v64[1];
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                result = &v8[v62];
                v66 = *result;
                v67 = *(_DWORD *)(*result + 8);
                if (*(_DWORD *)(v65 + 8) >= v67)
                {
                  do
                  {
                    v68 = v64;
                    *result = v65;
                    if (v60 < v63)
                      break;
                    v69 = (2 * v63) | 1;
                    v64 = &v8[v69];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < v10 && *(_DWORD *)(v65 + 8) < *(_DWORD *)(v64[1] + 8))
                    {
                      v65 = v64[1];
                      ++v64;
                      v69 = v70;
                    }
                    result = v68;
                    v63 = v69;
                  }
                  while (*(_DWORD *)(v65 + 8) >= v67);
                  *v68 = v66;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            do
            {
              v71 = 0;
              v72 = *v8;
              v73 = v8;
              do
              {
                v74 = &v73[v71];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v71) | 1;
                v79 = 2 * v71 + 2;
                if (v79 < v10)
                {
                  result = (uint64_t *)*(unsigned int *)(v76 + 8);
                  if (result < *(_DWORD *)(v75[1] + 8))
                  {
                    v76 = v75[1];
                    ++v75;
                    v78 = v79;
                  }
                }
                *v73 = v76;
                v73 = v75;
                v71 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v72;
              }
              else
              {
                *v75 = *a2;
                *a2 = v72;
                v80 = (char *)v75 - (char *)v8 + 8;
                if (v80 >= 9)
                {
                  v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                  v82 = &v8[v81];
                  v83 = *v82;
                  v84 = *v75;
                  v85 = *(_DWORD *)(*v75 + 8);
                  if (*(_DWORD *)(*v82 + 8) < v85)
                  {
                    do
                    {
                      v86 = v82;
                      *v75 = v83;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = &v8[v81];
                      v83 = *v82;
                      v75 = v86;
                    }
                    while (*(_DWORD *)(*v82 + 8) < v85);
                    *v86 = v84;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C5717694(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C5717694(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C5717694(v7 + 1, v12 - 1, a2 - 2);
          sub_1C5717694(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C5717694(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 8);
          if (*(_DWORD *)(*(v7 - 1) + 8) < v15)
            goto LABEL_12;
          if (v15 >= *(_DWORD *)(*(a2 - 1) + 8))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v15 >= *(_DWORD *)(*v8 + 8));
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v15 >= *(_DWORD *)(v28 + 8));
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v15 < *(_DWORD *)(v31 + 8));
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v15 >= *(_DWORD *)(v34 + 8));
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v15 < *(_DWORD *)(v35 + 8));
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 8);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 8) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 8) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 8) >= v15);
        }
        if (v18 >= v19)
        {
          v8 = &v7[v16];
        }
        else
        {
          v22 = *v19;
          v8 = &v7[v16];
          v23 = v19;
          do
          {
            *v8 = v22;
            *v23 = v17;
            do
            {
              v24 = v8[1];
              ++v8;
              v17 = v24;
            }
            while (*(_DWORD *)(v24 + 8) < v15);
            do
            {
              v25 = *--v23;
              v22 = v25;
            }
            while (*(_DWORD *)(v25 + 8) >= v15);
          }
          while (v8 < v23);
        }
        v26 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1C5716FAC(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1C571771C(v7, v8 - 1);
        result = (uint64_t *)sub_1C571771C(v8, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 1;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C5717694(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 8);
  v6 = *(_DWORD *)(*result + 8);
  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 8);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_DWORD *)(*a2 + 8) < *(_DWORD *)(*result + 8))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 8) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C571771C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 8) < *(_DWORD *)(*a1 + 8))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C5717694(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C5717904(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1C5717904(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_DWORD *)(v21 + 8) < *(_DWORD *)(v22 + 8))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_DWORD *)(*v20 + 8);
        if (v25 < *(_DWORD *)(*v19 + 8))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 8))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 8))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C5717694(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 8);
    if (v14 < *(_DWORD *)(*v8 + 8))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 8))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1C5717904(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1C5717694(a1, a2, a3);
  v9 = *a3;
  if (*(_DWORD *)(*a4 + 8) < *(_DWORD *)(*a3 + 8))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_DWORD *)(*a3 + 8) < *(_DWORD *)(*a2 + 8))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_DWORD *)(*a2 + 8) < *(_DWORD *)(*a1 + 8))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t *sub_1C5717998(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v25 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v25);
  v5 = v25;
  if ((v4 & 1) != 0)
    return v5 + 1;
  v26 = v25;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(unsigned int *)(a1 + 16);
  if (4 * v6 + 4 >= (3 * v7))
  {
    v8 = 2 * v7;
    goto LABEL_9;
  }
  v8 = *(_DWORD *)(a1 + 16);
  if ((int)v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    v10 = *(_QWORD *)a1;
    v11 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1);
    v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
    v13 = ((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8);
    if ((v13 + 1) > 0x40)
      v14 = v13 + 1;
    else
      v14 = 64;
    *(_DWORD *)(a1 + 16) = v14;
    v15 = operator new(16 * v14, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v15;
    if (v10)
    {
      *(_QWORD *)(a1 + 8) = 0;
      v16 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v16)
      {
        v17 = 16 * v16;
        do
        {
          *v15 = -4096;
          v15 += 2;
          v17 -= 16;
        }
        while (v17);
      }
      if ((_DWORD)v7)
      {
        v18 = 0;
        v19 = (uint64_t *)(v10 + 8);
        v20 = 16 * v7;
        do
        {
          v21 = *(v19 - 1);
          if ((v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v27 = 0;
            sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v21, &v27);
            v22 = v27;
            *v27 = v21;
            v22[1] = *v19;
            *(_DWORD *)(a1 + 8) = ++v18;
          }
          v19 += 2;
          v20 -= 16;
        }
        while (v20);
      }
      MEMORY[0x1CAA32FB4](v10, 8);
      v15 = *(_QWORD **)a1;
      LODWORD(v23) = *(_DWORD *)(a1 + 16);
    }
    else
    {
      *(_QWORD *)(a1 + 8) = 0;
      v23 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v23)
      {
        v24 = 0;
        do
        {
          v15[v24] = -4096;
          v24 += 2;
        }
        while (2 * v23 != v24);
      }
    }
    sub_1C49F21C0((uint64_t)v15, v23, *a2, &v26);
    v6 = *(_DWORD *)(a1 + 8);
    v5 = v26;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
  if (*v5 != -4096)
    --*(_DWORD *)(a1 + 12);
  *v5 = *a2;
  v5[1] = 0;
  return v5 + 1;
}

void sub_1C5717B80(uint64_t *a1, uint64_t *a2, unint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t v37;

  if (a3 >= 2)
  {
    v6 = (uint64_t)a1;
    if (a3 == 2)
    {
      if (*(a2 - 1) < (unint64_t)a1[2])
        sub_1C629B444(a1, (uint64_t)(a2 - 3));
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        v13 = a1 + 3;
        if (a1 + 3 != a2)
        {
          v14 = 0;
          v15 = a1;
          do
          {
            v16 = v13;
            v17 = v15[5];
            if (v17 < v15[2])
            {
              v20 = (_QWORD *)v15[4];
              v18 = v15 + 4;
              v19 = v20;
              v35 = (_QWORD *)*v16;
              v36 = v20;
              v37 = v17;
              if (v17)
              {
                v19[2] = &v36;
                *v16 = (uint64_t)v18;
                *v18 = 0;
                v18[1] = 0;
              }
              else
              {
                v35 = &v36;
              }
              v21 = v14;
              while (1)
              {
                sub_1C629B49C(v6 + v21 + 24, (_QWORD *)(v6 + v21));
                if (!v21)
                  break;
                v22 = *(_QWORD *)(v6 + v21 - 8);
                v21 -= 24;
                if (v37 >= v22)
                {
                  v23 = v6 + v21 + 24;
                  goto LABEL_22;
                }
              }
              v23 = v6;
LABEL_22:
              v24 = v23 + 8;
              sub_1C47655E8(v23, *(_QWORD **)(v23 + 8));
              *(_QWORD *)v23 = v35;
              v25 = v36;
              *(_QWORD *)(v23 + 8) = v36;
              v26 = v37;
              *(_QWORD *)(v23 + 16) = v37;
              if (v26)
              {
                v27 = 0;
                v25[2] = v24;
                v35 = &v36;
                v36 = 0;
                v37 = 0;
              }
              else
              {
                *(_QWORD *)v23 = v24;
                v27 = v36;
              }
              sub_1C47655E8((uint64_t)&v35, v27);
            }
            v13 = v16 + 3;
            v14 += 24;
            v15 = v16;
          }
          while (v16 + 3 != a2);
        }
      }
    }
    else
    {
      v9 = (uint64_t)a4;
      v10 = a3 >> 1;
      v11 = &a1[3 * (a3 >> 1)];
      v12 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        sub_1C5717E94(a1, v11, v12, a4);
        v28 = (uint64_t *)(v9 + 24 * v10);
        sub_1C5717E94((_QWORD *)(v6 + 24 * (a3 >> 1)), a2, a3 - (a3 >> 1), v28);
        v29 = (uint64_t *)(v9 + 24 * a3);
        v30 = v28;
        v31 = (uint64_t *)v9;
        while (v30 != v29)
        {
          if (v30[2] >= (unint64_t)v31[2])
          {
            sub_1C629B49C(v6, v31);
            v31 += 3;
          }
          else
          {
            sub_1C629B49C(v6, v30);
            v30 += 3;
          }
          v6 += 24;
          if (v31 == v28)
          {
            if (v30 != v29)
            {
              v32 = 0;
              do
              {
                sub_1C629B49C(v6 + v32 * 8, &v30[v32]);
                v32 += 3;
              }
              while (&v30[v32] != v29);
            }
            goto LABEL_39;
          }
        }
        if (v31 != v28)
        {
          v33 = 0;
          do
          {
            sub_1C629B49C(v6 + v33 * 8, &v31[v33]);
            v33 += 3;
          }
          while (&v31[v33] != v28);
        }
LABEL_39:
        if (v9)
        {
          v34 = a3;
          do
          {
            sub_1C47655E8(v9, *(_QWORD **)(v9 + 8));
            v9 += 24;
            --v34;
          }
          while (v34);
        }
      }
      else
      {
        sub_1C5717B80(a1, v11, v12, a4, a5);
        sub_1C5717B80(v6 + 24 * (a3 >> 1), a2, a3 - (a3 >> 1), v9, a5);
        sub_1C57182BC(v6, (uint64_t *)(v6 + 24 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), v9, a5);
      }
    }
  }
}

void sub_1C5717E94(_QWORD *a1, _QWORD *a2, unint64_t a3, uint64_t *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  uint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  if (a3)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v12 = a4 + 1;
      if (*(a2 - 1) >= a1[2])
      {
        *a4 = *a1;
        v20 = a1 + 1;
        v21 = a1[1];
        a4[1] = v21;
        v22 = a1[2];
        a4[2] = v22;
        if (v22)
        {
          *(_QWORD *)(v21 + 16) = v12;
          *a1 = v20;
          *v20 = 0;
          a1[2] = 0;
        }
        else
        {
          *a4 = (uint64_t)v12;
        }
        a4[3] = *(a2 - 3);
        v8 = a2 - 2;
        v46 = *(a2 - 2);
        a4[4] = v46;
        v10 = a4 + 4;
        v47 = *(a2 - 1);
        a4[5] = v47;
        if (v47)
        {
          *(_QWORD *)(v46 + 16) = v10;
          *(a2 - 3) = v8;
          goto LABEL_47;
        }
      }
      else
      {
        *a4 = *(a2 - 3);
        v13 = a2 - 2;
        v14 = *(a2 - 2);
        a4[1] = v14;
        v15 = *(a2 - 1);
        a4[2] = v15;
        if (v15)
        {
          *(_QWORD *)(v14 + 16) = v12;
          *(a2 - 3) = v13;
          *v13 = 0;
          *(a2 - 1) = 0;
        }
        else
        {
          *a4 = (uint64_t)v12;
        }
        a4[3] = *a1;
        v8 = a1 + 1;
        v9 = a1[1];
        a4[4] = v9;
        v10 = a4 + 4;
        v45 = a1[2];
        a4[5] = v45;
        if (v45)
        {
LABEL_43:
          *(_QWORD *)(v9 + 16) = v10;
          *a1 = v8;
LABEL_47:
          *v8 = 0;
          v8[1] = 0;
          return;
        }
      }
      a4[3] = (uint64_t)v10;
    }
    else
    {
      if (a3 == 1)
      {
        *a4 = *a1;
        v8 = a1 + 1;
        v9 = a1[1];
        a4[1] = v9;
        v10 = a4 + 1;
        v11 = a1[2];
        a4[2] = v11;
        if (!v11)
        {
          *a4 = (uint64_t)v10;
          return;
        }
        goto LABEL_43;
      }
      if ((uint64_t)a3 > 8)
      {
        v23 = &a1[3 * (a3 >> 1)];
        sub_1C5717B80(a1, v23, a3 >> 1, a4, a3 >> 1);
        sub_1C5717B80(&v7[3 * (a3 >> 1)], a2, a3 - (a3 >> 1), &a4[3 * (a3 >> 1)], a3 - (a3 >> 1));
        v24 = a4 + 2;
        v25 = &v7[3 * (a3 >> 1)];
        while (v25 != a2)
        {
          v26 = v24 - 1;
          if (v25[2] >= v7[2])
          {
            *(v24 - 2) = *v7;
            v30 = v7 + 1;
            v31 = v7[1];
            *(v24 - 1) = v31;
            v32 = v7[2];
            *v24 = v32;
            if (v32)
            {
              *(_QWORD *)(v31 + 16) = v26;
              *v7 = v30;
              *v30 = 0;
              v7[2] = 0;
            }
            else
            {
              *(v24 - 2) = v26;
            }
            v7 += 3;
          }
          else
          {
            *(v24 - 2) = *v25;
            v27 = v25 + 1;
            v28 = v25[1];
            *(v24 - 1) = v28;
            v29 = v25[2];
            *v24 = v29;
            if (v29)
            {
              *(_QWORD *)(v28 + 16) = v26;
              *v25 = v27;
              *v27 = 0;
              v25[2] = 0;
            }
            else
            {
              *(v24 - 2) = v26;
            }
            v25 += 3;
          }
          v24 += 3;
          if (v7 == v23)
          {
            if (v25 != a2)
            {
              v33 = 0;
              do
              {
                v34 = &v24[v33];
                *(v34 - 2) = v25[v33];
                v35 = &v25[v33 + 1];
                v36 = *v35;
                v24[v33 - 1] = *v35;
                v37 = (uint64_t)&v24[v33 - 1];
                v38 = v25[v33 + 2];
                *v34 = v38;
                if (v38)
                {
                  *(_QWORD *)(v36 + 16) = v37;
                  v25[v33] = v35;
                  *v35 = 0;
                  v25[v33 + 2] = 0;
                }
                else
                {
                  *(v34 - 2) = v37;
                }
                v33 += 3;
              }
              while (&v25[v33] != a2);
            }
            return;
          }
        }
        if (v7 != v23)
        {
          v39 = 0;
          do
          {
            v40 = &v24[v39];
            *(v40 - 2) = v7[v39];
            v41 = &v7[v39 + 1];
            v42 = *v41;
            v24[v39 - 1] = *v41;
            v43 = (uint64_t)&v24[v39 - 1];
            v44 = v7[v39 + 2];
            *v40 = v44;
            if (v44)
            {
              *(_QWORD *)(v42 + 16) = v43;
              v7[v39] = v41;
              *v41 = 0;
              v7[v39 + 2] = 0;
            }
            else
            {
              *(v40 - 2) = v43;
            }
            v39 += 3;
          }
          while (&v7[v39] != v23);
        }
      }
      else if (a1 != a2)
      {
        *a4 = *a1;
        v16 = a1 + 1;
        v17 = a1[1];
        a4[1] = v17;
        v18 = a4 + 1;
        v19 = a1[2];
        a4[2] = v19;
        if (v19)
        {
          *(_QWORD *)(v17 + 16) = v18;
          *a1 = v16;
          *v16 = 0;
          a1[2] = 0;
        }
        else
        {
          *a4 = (uint64_t)v18;
        }
        v48 = a1 + 3;
        if (a1 + 3 != a2)
        {
          v49 = 0;
          v50 = a4;
          do
          {
            v51 = v7;
            v52 = v50;
            v7 = v48;
            v50 += 3;
            v53 = v52[2];
            v54 = v52 + 4;
            if (v51[5] < v53)
            {
              v59 = *v52;
              v60 = v52[1];
              v52[4] = v60;
              v52[5] = v53;
              *(_QWORD *)(v60 + 16) = v54;
              *v52 = (uint64_t)(v52 + 1);
              v52[2] = 0;
              v52[3] = v59;
              v52[1] = 0;
              v61 = (uint64_t)a4;
              if (v52 != a4)
              {
                v62 = v49;
                while (1)
                {
                  v61 = (uint64_t)a4 + v62;
                  if (v51[5] >= *(unint64_t *)((char *)a4 + v62 - 8))
                    break;
                  v62 -= 24;
                  sub_1C629B49C(v61, (uint64_t *)((char *)a4 + v62));
                  if (!v62)
                  {
                    v61 = (uint64_t)a4;
                    break;
                  }
                }
              }
              sub_1C629B49C(v61, v7);
            }
            else
            {
              v52[3] = *v7;
              v57 = v51[4];
              v56 = v51 + 4;
              v55 = v57;
              v52[4] = v57;
              v58 = v56[1];
              v52[5] = v58;
              if (v58)
              {
                *(_QWORD *)(v55 + 16) = v54;
                *v7 = v56;
                *v56 = 0;
                v56[1] = 0;
              }
              else
              {
                *v50 = (uint64_t)v54;
              }
            }
            v48 = v7 + 3;
            v49 += 24;
          }
          while (v7 + 3 != a2);
        }
      }
    }
  }
}

void sub_1C57182BC(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;

  if (a5)
  {
    v7 = a5;
    while (a4 > a7 && v7 > a7)
    {
      if (!a4)
        return;
      v11 = 0;
      v12 = -a4;
      while (1)
      {
        v13 = (uint64_t *)(a1 + v11);
        if ((unint64_t)a2[2] < *(_QWORD *)(a1 + v11 + 16))
          break;
        v11 += 24;
        if (__CFADD__(v12++, 1))
          return;
      }
      v15 = -v12;
      if (-v12 >= v7)
      {
        if (v12 == -1)
        {
          sub_1C629B444((uint64_t *)(a1 + v11), (uint64_t)a2);
          return;
        }
        if (v12 > 0)
          v15 = 1 - v12;
        v26 = v15 >> 1;
        v18 = a3;
        if (a3 != a2)
        {
          v27 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
          v18 = a2;
          do
          {
            v28 = v27 >> 1;
            v29 = &v18[3 * (v27 >> 1)];
            v30 = v29[2];
            v31 = v29 + 3;
            v27 += ~(v27 >> 1);
            if (v30 < *(_QWORD *)(a1 + 24 * v26 + v11 + 16))
              v18 = v31;
            else
              v27 = v28;
          }
          while (v27);
        }
        v20 = (uint64_t *)(a1 + 24 * v26 + v11);
        v17 = 0xAAAAAAAAAAAAAAABLL * (v18 - a2);
        v25 = v20;
      }
      else
      {
        if (v7 >= 0)
          v16 = v7;
        else
          v16 = v7 + 1;
        v17 = v16 >> 1;
        v18 = &a2[3 * (v16 >> 1)];
        if (v13 == a2)
        {
          v25 = a2;
          v20 = a2;
        }
        else
        {
          v19 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1 - v11) >> 3);
          v20 = (uint64_t *)(a1 + v11);
          do
          {
            v21 = v19 >> 1;
            v22 = &v20[3 * (v19 >> 1)];
            v23 = v22[2];
            v24 = v22 + 3;
            v19 += ~(v19 >> 1);
            if (v18[2] < v23)
              v19 = v21;
            else
              v20 = v24;
          }
          while (v19);
          v25 = v20;
        }
        v26 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v25 - a1 - v11) >> 3);
      }
      v32 = v18;
      if (v20 != a2)
      {
        v32 = v25;
        if (a2 != v18)
        {
          v86 = v26;
          v78 = v17;
          v79 = a7;
          v80 = a3;
          v81 = a6;
          v40 = v25;
          v41 = (uint64_t)a2;
          sub_1C629B444(v25, (uint64_t)a2);
          v42 = v41;
          v77 = v40;
          while (1)
          {
            v32 = v40 + 3;
            v41 += 24;
            if ((uint64_t *)v41 == v18)
              break;
            if (v32 == (uint64_t *)v42)
              v42 = v41;
            v83 = v42;
            v40 += 3;
            sub_1C629B444(v40, v41);
            v42 = v83;
          }
          if (v32 != (uint64_t *)v42)
          {
            v43 = v40 + 3;
            v44 = v42;
            v82 = v32;
            while (1)
            {
              v84 = (uint64_t *)v42;
              while (1)
              {
                sub_1C629B444(v43, v44);
                v43 += 3;
                v44 += 24;
                if ((uint64_t *)v44 != v18)
                  break;
                v32 = v82;
                v44 = (uint64_t)v84;
                if (v43 == v84)
                  goto LABEL_55;
              }
              v42 = (uint64_t)v84;
              if (v43 == v84)
                v42 = v44;
            }
          }
LABEL_55:
          a3 = v80;
          a6 = v81;
          v17 = v78;
          a7 = v79;
          v26 = v86;
          v25 = v77;
        }
      }
      a4 = -(v26 + v12);
      v33 = v7 - v17;
      if (v26 + v17 >= v7 - (v26 + v17) - v12)
      {
        v85 = v26;
        v38 = v17;
        v36 = a6;
        v37 = a7;
        v39 = v32;
        sub_1C57182BC(v32, v18);
        v18 = v20;
        v33 = v38;
        a4 = v85;
        a3 = v39;
      }
      else
      {
        v34 = a1 + v11;
        v35 = a3;
        v36 = a6;
        v37 = a7;
        v13 = v32;
        sub_1C57182BC(v34, v25);
        a3 = v35;
      }
      v7 = v33;
      a1 = (uint64_t)v13;
      a2 = v18;
      a6 = v36;
      a7 = v37;
      if (!v33)
        return;
    }
    if (a4 <= v7)
    {
      if ((uint64_t *)a1 == a2)
        return;
      v59 = 0;
      v46 = 0;
      do
      {
        v60 = (uint64_t *)(a6 + v59);
        *v60 = *(_QWORD *)(a1 + v59);
        v61 = (uint64_t *)(a1 + v59 + 8);
        v62 = *v61;
        *(_QWORD *)(a6 + v59 + 8) = *v61;
        v63 = a6 + v59 + 8;
        v64 = *(_QWORD *)(a1 + v59 + 16);
        v60[2] = v64;
        if (v64)
        {
          *(_QWORD *)(v62 + 16) = v63;
          *(_QWORD *)(a1 + v59) = v61;
          *v61 = 0;
          *(_QWORD *)(a1 + v59 + 16) = 0;
        }
        else
        {
          *v60 = v63;
        }
        ++v46;
        v59 += 24;
      }
      while ((uint64_t *)(a1 + v59) != a2);
      if (v59)
      {
        v65 = (_QWORD *)(a6 + v59);
        v66 = a6 + v59 - 24;
        v67 = (_QWORD *)a6;
        while (a2 != a3)
        {
          v68 = a3;
          v69 = a6;
          v70 = a2;
          if ((unint64_t)a2[2] >= v67[2])
          {
            sub_1C629B49C(a1, v67);
            a2 = v70;
            v67 += 3;
          }
          else
          {
            sub_1C629B49C(a1, a2);
            a2 = v70 + 3;
          }
          a1 += 24;
          a6 = v69;
          a3 = v68;
          if (v65 == v67)
            goto LABEL_98;
        }
        if (v65 != v67)
        {
          v74 = a6;
          v75 = 0;
          do
          {
            sub_1C629B49C(a1 + v75 * 8, &v67[v75]);
            v75 += 3;
          }
          while ((_QWORD *)v66 != &v67[v75 - 3]);
          a6 = v74;
        }
      }
    }
    else
    {
      if (a2 == a3)
        return;
      v45 = 0;
      v46 = 0;
      do
      {
        v47 = (uint64_t *)(a6 + v45 * 8);
        *v47 = a2[v45];
        v48 = &a2[v45 + 1];
        v49 = *v48;
        *(_QWORD *)(a6 + v45 * 8 + 8) = *v48;
        v50 = a6 + v45 * 8 + 8;
        v51 = a2[v45 + 2];
        v47[2] = v51;
        if (v51)
        {
          *(_QWORD *)(v49 + 16) = v50;
          a2[v45] = (uint64_t)v48;
          *v48 = 0;
          a2[v45 + 2] = 0;
        }
        else
        {
          *v47 = v50;
        }
        ++v46;
        v45 += 3;
      }
      while (&a2[v45] != a3);
      if (v45 * 8)
      {
        v52 = a6 + v45 * 8;
        v53 = (uint64_t)(a3 - 3);
        while (a2 != (uint64_t *)a1)
        {
          v54 = *(_QWORD *)(v52 - 8);
          v55 = *(a2 - 1);
          if (v54 >= v55)
            v56 = (uint64_t *)(v52 - 24);
          else
            v56 = a2 - 3;
          if (v54 >= v55)
            v57 = a2;
          else
            v57 = a2 - 3;
          if (v54 >= v55)
            v52 -= 24;
          v58 = a6;
          sub_1C629B49C(v53, v56);
          a2 = v57;
          a6 = v58;
          v53 -= 24;
          if (v52 == v58)
            goto LABEL_98;
        }
        if (v52 != a6)
        {
          v71 = 0;
          do
          {
            v72 = v53 + v71;
            v71 -= 24;
            v73 = a6;
            sub_1C629B49C(v72, (_QWORD *)(v52 + v71));
            a6 = v73;
          }
          while (v52 + v71 != v73);
        }
      }
    }
LABEL_98:
    if (a6)
    {
      do
      {
        v76 = a6;
        sub_1C47655E8(a6, *(_QWORD **)(a6 + 8));
        a6 = v76 + 24;
        --v46;
      }
      while (v46);
    }
  }
}

_QWORD *sub_1C5718840(_QWORD *a1, unint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 61)
      abort();
    v4 = 8 * a2;
    v5 = (char *)operator new(8 * a2);
    *a1 = v5;
    v6 = &v5[8 * a2];
    a1[2] = v6;
    bzero(v5, v4);
    a1[1] = v6;
  }
  return a1;
}

void sub_1C57188A8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  llvm::Constant *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  const llvm::APInt *v25;
  llvm::GetElementPtrInst *v26;
  uint64_t v27;
  llvm::ConstantInt *v28;
  unint64_t v29;
  unint64_t v30;
  llvm::ValueHandleBase *v31;
  const llvm::APInt *v32;
  uint64_t v33;
  llvm::ConstantInt *v34;
  unsigned int v35;
  unint64_t v36;
  const llvm::APInt *v37;
  llvm::ValueHandleBase *v38;
  uint64_t v39;
  uint64_t v40;
  llvm::ConstantInt *v41;
  unsigned int v42;
  unint64_t v43;
  const llvm::APInt *v44;
  llvm::ValueHandleBase *v45;
  char *v46;
  int v47;
  unint64_t *v48;
  _DWORD *v49;
  uint64_t v50;
  uint64_t v51;
  llvm::PointerType *v52;
  _DWORD *v53;
  llvm::UndefValue *v54;
  uint64_t v55;
  llvm::PointerType *v56;
  unint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  unint64_t *v63;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  llvm::ConstantInt *v67;
  unint64_t v68;
  unint64_t v69;
  llvm::ValueHandleBase *v70;
  char *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  llvm::UndefValue *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  __int128 v87;
  char *v88;
  uint64_t v89;
  unint64_t *v90;
  unint64_t *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t **v100;
  uint64_t **v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t *v104;
  unint64_t *v105;
  unint64_t *v106;
  char v107;
  uint64_t v108;
  _QWORD *v109;
  size_t *v110;
  size_t v111;
  int *v112;
  size_t v113;
  uint64_t *v114;
  unsigned int v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t *v118;
  llvm::ValueAsMetadata *v119;
  llvm::PHINode *v120;
  uint64_t v121;
  _QWORD *v122;
  llvm::PointerType *v123;
  llvm::GlobalValue *v124;
  llvm::GlobalValue *v125;
  int v126;
  unsigned int v127;
  llvm::UndefValue *v128;
  llvm::PointerType *v129;
  llvm::GlobalValue *v130;
  llvm::GlobalValue *v131;
  int v132;
  unsigned int v133;
  char hasExternalWeakLinkage;
  uint64_t *v135;
  _QWORD *v136;
  uint64_t v137;
  size_t v138;
  llvm::UndefValue *v139;
  llvm::PointerType *v140;
  llvm::GlobalValue *v141;
  llvm::GlobalValue *v142;
  int v143;
  unsigned int v144;
  char v145;
  _QWORD *v146;
  _QWORD *v147;
  unint64_t v148;
  int v149;
  llvm::UndefValue *v150;
  llvm::PointerType *v151;
  uint64_t v152;
  int v153;
  llvm::PointerType *v154;
  llvm::GlobalValue *v155;
  llvm::GlobalValue *v156;
  int v157;
  unsigned int v158;
  llvm::GlobalValue *v159;
  llvm::GlobalValue *v160;
  int v161;
  unsigned int v162;
  _QWORD *v163;
  llvm::UndefValue *v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  uint64_t *v171;
  unint64_t *v172;
  _QWORD *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  _QWORD v179[2];
  int *v180;
  size_t v181;
  __int16 v182;
  _QWORD v183[2];
  const char *v184;
  __int16 v185;
  _QWORD *v186;
  unsigned int v187;
  const char *v188;
  uint64_t v189;
  __int16 v190;
  void *v191;
  uint64_t ElementPtr;
  llvm::ValueHandleBase *v193;
  llvm::ValueHandleBase *v194;
  uint64_t v195;
  llvm::UndefValue *v196;
  llvm::ValueHandleBase *v197;
  __int128 v198;
  uint64_t v199;

  v199 = *MEMORY[0x1E0C80C00];
  v9 = *(llvm::Constant **)(a1 + 56);
  if ((llvm::Constant *)*a4 == v9)
  {
    v170 = a4;
    if (a3)
      goto LABEL_3;
  }
  else
  {
    v170 = (uint64_t *)sub_1C537D3B8((llvm *)0x31, (uint64_t)a4, v9, 0);
    if (a3)
    {
LABEL_3:
      v169 = &a2[a3];
      do
      {
        v10 = *a2;
        v178 = *a2;
        v191 = &v193;
        ElementPtr = 0x1000000000;
        v198 = xmmword_1C85F6FF0;
        v11 = *(unsigned int *)(a5 + 16);
        v12 = *(_QWORD *)a5 + 16 * v11;
        v171 = a2;
        if (*(_DWORD *)(a5 + 8))
        {
          if (*(_DWORD *)(a5 + 16))
          {
            v14 = 16 * v11;
            v13 = *(_QWORD **)a5;
            while ((*v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v13 += 2;
              v14 -= 16;
              if (!v14)
                goto LABEL_10;
            }
          }
          else
          {
            v13 = *(_QWORD **)a5;
          }
        }
        else
        {
LABEL_10:
          v13 = (_QWORD *)(*(_QWORD *)a5 + 16 * v11);
        }
        v15 = *(_QWORD *)a5 + 16 * v11;
        if (v13 != (_QWORD *)v15)
        {
          v16 = 0;
          do
          {
            v17 = *(_QWORD *)(*v13 + 8);
            if (v17)
            {
              v18 = *v13 + 24;
              v19 = 8 * v17;
              do
              {
                v20 = (_QWORD *)(*(_QWORD *)v18 - 8 * *(unsigned int *)(*(_QWORD *)v18 + 8));
                if (v20[1] == v10)
                {
                  v21 = *(_QWORD *)(*v20 + 128);
                  v22 = (_QWORD *)(v21 + 24);
                  if (*(_DWORD *)(v21 + 32) >= 0x41u)
                    v22 = (_QWORD *)*v22;
                  v23 = v13[1] + *v22;
                  if ((unint64_t)v198 > v23)
                    *(_QWORD *)&v198 = v13[1] + *v22;
                  if (*((_QWORD *)&v198 + 1) < v23)
                    *((_QWORD *)&v198 + 1) = v23;
                  if (v16 >= HIDWORD(ElementPtr))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v191, (uint64_t)&v193, v16 + 1, 8);
                    v16 = ElementPtr;
                  }
                  *((_QWORD *)v191 + v16) = v23;
                  v16 = ElementPtr + 1;
                  LODWORD(ElementPtr) = ElementPtr + 1;
                }
                v18 += 8;
                v19 -= 8;
              }
              while (v19);
            }
            v24 = v13 + 2;
            v13 = (_QWORD *)v12;
            if (v24 != (_QWORD *)v12)
            {
              v13 = v24;
              while ((*v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v13 += 2;
                if (v13 == (_QWORD *)v12)
                {
                  v13 = (_QWORD *)v12;
                  break;
                }
              }
            }
          }
          while (v13 != (_QWORD *)v15);
        }
        llvm::lowertypetests::BitSetBuilder::build((uint64_t **)&v191, (uint64_t)&v172);
        if (v191 != &v193)
          free(v191);
        v26 = *(llvm::GetElementPtrInst **)(a1 + 48);
        v27 = *(_QWORD *)(a1 + 96);
        v28 = *(llvm::ConstantInt **)v27;
        v29 = *(unsigned int *)(v27 + 8);
        LODWORD(ElementPtr) = v29 >> 8;
        if (v29 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v191, v175, 0);
        }
        else
        {
          if (v29 <= 0xFF)
            v30 = 0;
          else
            v30 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v29);
          v191 = (void *)(v30 & v175);
        }
        v31 = llvm::ConstantInt::get(v28, (llvm::LLVMContext *)&v191, v25);
        if (ElementPtr >= 0x41 && v191)
          MEMORY[0x1CAA32F9C](v191, 0x1000C8000313F17);
        v191 = v31;
        ElementPtr = llvm::ConstantExpr::getGetElementPtr(v26, v170, (llvm::Value *)&v191, 1, 0, 0, 0);
        v33 = *(_QWORD *)(a1 + 48);
        v34 = *(llvm::ConstantInt **)v33;
        v35 = *(_DWORD *)(v33 + 8);
        v187 = v35 >> 8;
        if (v35 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v186, v177, 0);
        }
        else
        {
          if (v35 <= 0xFF)
            LODWORD(v36) = 0;
          else
            v36 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v35);
          v186 = (_QWORD *)(v36 & v177);
        }
        v38 = llvm::ConstantInt::get(v34, (llvm::LLVMContext *)&v186, v32);
        if (v187 >= 0x41 && v186)
          MEMORY[0x1CAA32F9C](v186, 0x1000C8000313F17);
        v193 = v38;
        v39 = *(_QWORD *)(a1 + 96);
        v40 = v176 - 1;
        v41 = *(llvm::ConstantInt **)v39;
        v42 = *(_DWORD *)(v39 + 8);
        v187 = v42 >> 8;
        if (v42 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v186, v40, 0);
        }
        else
        {
          if (v42 <= 0xFF)
            v43 = 0;
          else
            v43 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v42);
          v186 = (_QWORD *)(v43 & v40);
        }
        v45 = llvm::ConstantInt::get(v41, (llvm::LLVMContext *)&v186, v37);
        if (v187 >= 0x41 && v186)
          MEMORY[0x1CAA32F9C](v186, 0x1000C8000313F17);
        v194 = v45;
        if (v174 == v176)
        {
          v46 = 0;
          if (v174 == 1)
            v47 = 3;
          else
            v47 = 4;
          LODWORD(v191) = v47;
        }
        else
        {
          if (v176 > 0x40)
          {
            LODWORD(v191) = 1;
            v49 = operator new(0x78uLL);
            v50 = (uint64_t)(v49 + 8);
            v49[13] = v49[13] & 0x38000000 | 1;
            *(_QWORD *)v49 = 0;
            *((_QWORD *)v49 + 1) = 0;
            *((_QWORD *)v49 + 2) = 0;
            *((_QWORD *)v49 + 3) = v49 + 8;
            v51 = *(_QWORD *)a1;
            v52 = *(llvm::PointerType **)(a1 + 48);
            v190 = 257;
            llvm::GlobalVariable::GlobalVariable((uint64_t)(v49 + 8), v51, v52, 1, 8, 0, (uint64_t)&v186, 0, 0, 0, 0);
            v53 = operator new(0x78uLL);
            v54 = (llvm::UndefValue *)(v53 + 8);
            v53[13] = v53[13] & 0x38000000 | 1;
            *(_QWORD *)v53 = 0;
            *((_QWORD *)v53 + 1) = 0;
            *((_QWORD *)v53 + 2) = 0;
            *((_QWORD *)v53 + 3) = v53 + 8;
            v55 = *(_QWORD *)a1;
            v56 = *(llvm::PointerType **)(a1 + 48);
            v190 = 257;
            llvm::GlobalVariable::GlobalVariable((uint64_t)(v53 + 8), v55, v56, 1, 8, 0, (uint64_t)&v186, 0, 0, 0, 0);
            v58 = *(char **)(a1 + 144);
            v57 = *(_QWORD *)(a1 + 152);
            if ((unint64_t)v58 < v57)
            {
              *((_QWORD *)v58 + 5) = 0;
              *((_QWORD *)v58 + 6) = 0;
              *(_OWORD *)(v58 + 24) = 0u;
              *(_OWORD *)(v58 + 8) = 0u;
              *(_QWORD *)v58 = v58 + 8;
              v59 = v58 + 56;
              goto LABEL_97;
            }
            v71 = *(char **)(a1 + 136);
            v72 = 0x6DB6DB6DB6DB6DB7 * ((v58 - v71) >> 3) + 1;
            if (v72 > 0x492492492492492)
              abort();
            v73 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v57 - (_QWORD)v71) >> 3);
            if (2 * v73 > v72)
              v72 = 2 * v73;
            if (v73 >= 0x249249249249249)
              v74 = 0x492492492492492;
            else
              v74 = v72;
            if (v74 > 0x492492492492492)
              sub_1C4764EE4();
            v75 = v54;
            v76 = 56 * v74;
            v77 = (char *)operator new(56 * v74);
            v78 = &v77[8 * ((v58 - v71) >> 3)];
            v79 = &v77[v76];
            *(_OWORD *)(v78 + 40) = 0u;
            *(_OWORD *)(v78 + 24) = 0u;
            *(_OWORD *)(v78 + 8) = 0u;
            *(_QWORD *)v78 = v78 + 8;
            *((_QWORD *)v78 + 6) = 0;
            v59 = v78 + 56;
            if (v58 == v71)
            {
              *(_QWORD *)(a1 + 136) = v78;
              *(_QWORD *)(a1 + 144) = v59;
              *(_QWORD *)(a1 + 152) = v79;
              goto LABEL_94;
            }
            v80 = 0;
            v54 = v75;
            do
            {
              v81 = &v78[v80];
              *((_QWORD *)v81 - 7) = *(_QWORD *)&v58[v80 - 56];
              v82 = &v58[v80 - 48];
              v83 = *(_QWORD *)v82;
              *(_QWORD *)&v78[v80 - 48] = *(_QWORD *)v82;
              v84 = (uint64_t)&v78[v80 - 48];
              v85 = *(_QWORD *)&v58[v80 - 40];
              *((_QWORD *)v81 - 5) = v85;
              if (v85)
              {
                *(_QWORD *)(v83 + 16) = v84;
                *(_QWORD *)&v58[v80 - 56] = v82;
                *(_QWORD *)v82 = 0;
                *(_QWORD *)&v58[v80 - 40] = 0;
              }
              else
              {
                *((_QWORD *)v81 - 7) = v84;
              }
              v86 = &v78[v80];
              v87 = *(_OWORD *)&v58[v80 - 16];
              *((_OWORD *)v86 - 2) = *(_OWORD *)&v58[v80 - 32];
              *((_OWORD *)v86 - 1) = v87;
              v80 -= 56;
            }
            while (&v58[v80] != v71);
            v58 = *(char **)(a1 + 136);
            v88 = *(char **)(a1 + 144);
            *(_QWORD *)(a1 + 136) = &v78[v80];
            *(_QWORD *)(a1 + 144) = v59;
            *(_QWORD *)(a1 + 152) = v79;
            if (v88 != v58)
            {
              v89 = (uint64_t)(v88 - 56);
              do
              {
                sub_1C47655E8(v89, *(_QWORD **)(v89 + 8));
                v64 = v89 == (_QWORD)v58;
                v89 -= 56;
              }
              while (!v64);
LABEL_94:
              v54 = v75;
            }
            if (v58)
              operator delete(v58);
LABEL_97:
            *(_QWORD *)(a1 + 144) = v59;
            v46 = v59 - 56;
            if (v59 - 56 != (char *)&v172)
            {
              v90 = v172;
              if (*((_QWORD *)v59 - 5))
              {
                v164 = v54;
                v165 = v50;
                v93 = v59 - 48;
                v92 = *((_QWORD *)v59 - 6);
                v94 = *((_QWORD *)v59 - 7);
                *((_QWORD *)v59 - 7) = v59 - 48;
                *(_QWORD *)(v92 + 16) = 0;
                *(_QWORD *)v93 = 0;
                *((_QWORD *)v93 + 1) = 0;
                if (*(_QWORD *)(v94 + 8))
                  v95 = *(uint64_t **)(v94 + 8);
                else
                  v95 = (uint64_t *)v94;
                if (v95)
                {
                  v167 = a5;
                  v96 = sub_1C4FCE18C((uint64_t)v95);
                  if (v90 == (unint64_t *)&v173)
                  {
                    v97 = v95;
                    v91 = (unint64_t *)&v173;
                  }
                  else
                  {
                    do
                    {
                      v97 = v96;
                      v98 = v90[4];
                      v95[4] = v98;
                      v99 = *(uint64_t **)v93;
                      v100 = (uint64_t **)(v59 - 48);
                      v101 = (uint64_t **)(v59 - 48);
                      if (*(_QWORD *)v93)
                      {
                        do
                        {
                          while (1)
                          {
                            v100 = (uint64_t **)v99;
                            if (v98 >= v99[4])
                              break;
                            v99 = (uint64_t *)*v99;
                            v101 = v100;
                            if (!*v100)
                              goto LABEL_113;
                          }
                          v99 = (uint64_t *)v99[1];
                        }
                        while (v99);
                        v101 = v100 + 1;
                      }
LABEL_113:
                      *v95 = 0;
                      v95[1] = 0;
                      v95[2] = (uint64_t)v100;
                      *v101 = v95;
                      v102 = **(_QWORD **)v46;
                      if (v102)
                      {
                        *(_QWORD *)v46 = v102;
                        v95 = *v101;
                      }
                      sub_1C4768E74(*((uint64_t **)v59 - 6), v95);
                      ++*((_QWORD *)v59 - 5);
                      if (v96)
                        v96 = sub_1C4FCE18C((uint64_t)v96);
                      else
                        v96 = 0;
                      v103 = (unint64_t *)v90[1];
                      if (v103)
                      {
                        do
                        {
                          v91 = v103;
                          v103 = (unint64_t *)*v103;
                        }
                        while (v103);
                      }
                      else
                      {
                        do
                        {
                          v91 = (unint64_t *)v90[2];
                          v64 = *v91 == (_QWORD)v90;
                          v90 = v91;
                        }
                        while (!v64);
                      }
                      if (!v97)
                        break;
                      v90 = v91;
                      v95 = v97;
                    }
                    while (v91 != (unint64_t *)&v173);
                  }
                  sub_1C47655E8((uint64_t)(v59 - 56), v97);
                  if (v96)
                  {
                    v54 = v164;
                    v50 = v165;
                    do
                    {
                      v104 = v96;
                      v96 = (uint64_t *)v96[2];
                    }
                    while (v96);
                    sub_1C47655E8((uint64_t)(v59 - 56), v104);
                    a5 = v167;
                    goto LABEL_131;
                  }
                  a5 = v167;
                }
                else
                {
                  v91 = v90;
                }
                v54 = v164;
                v50 = v165;
              }
              else
              {
                v91 = v172;
              }
LABEL_131:
              if (v91 != (unint64_t *)&v173)
              {
                do
                {
                  sub_1C5493A70((uint64_t **)v59 - 7, v91 + 4);
                  v105 = (unint64_t *)v91[1];
                  if (v105)
                  {
                    do
                    {
                      v106 = v105;
                      v105 = (unint64_t *)*v105;
                    }
                    while (v105);
                  }
                  else
                  {
                    do
                    {
                      v106 = (unint64_t *)v91[2];
                      v64 = *v106 == (_QWORD)v91;
                      v91 = v106;
                    }
                    while (!v64);
                  }
                  v91 = v106;
                }
                while (v106 != (unint64_t *)&v173);
              }
            }
            *((_QWORD *)v59 - 4) = v176;
            *((_QWORD *)v59 - 3) = v50;
            *((_QWORD *)v59 - 2) = v54;
            v195 = v50;
            v196 = v54;
            v10 = v178;
            goto LABEL_139;
          }
          LODWORD(v191) = 2;
          v48 = v172;
          if (v172 == (unint64_t *)&v173)
          {
            v46 = 0;
            LODWORD(v191) = 0;
          }
          else
          {
            v60 = 0;
            do
            {
              v61 = (unint64_t *)v48[1];
              v62 = v48;
              if (v61)
              {
                do
                {
                  v63 = v61;
                  v61 = (unint64_t *)*v61;
                }
                while (v61);
              }
              else
              {
                do
                {
                  v63 = (unint64_t *)v62[2];
                  v64 = *v63 == (_QWORD)v62;
                  v62 = v63;
                }
                while (!v64);
              }
              v60 |= 1 << v48[4];
              v48 = v63;
            }
            while (v63 != (unint64_t *)&v173);
            v65 = 88;
            if (v176 < 0x21)
              v65 = 72;
            v66 = *(_QWORD *)(a1 + v65);
            v67 = *(llvm::ConstantInt **)v66;
            v68 = *(unsigned int *)(v66 + 8);
            v187 = v68 >> 8;
            if (v68 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v186, v60, 0);
            }
            else
            {
              if (v68 <= 0xFF)
                v69 = 0;
              else
                v69 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v68);
              v186 = (_QWORD *)(v69 & v60);
            }
            v70 = llvm::ConstantInt::get(v67, (llvm::LLVMContext *)&v186, v44);
            if (v187 >= 0x41 && v186)
              MEMORY[0x1CAA32F9C](v186, 0x1000C8000313F17);
            v46 = 0;
            v197 = v70;
          }
        }
LABEL_139:
        v186 = 0;
        v107 = sub_1C498D438(*(_QWORD *)(a1 + 112), *(_DWORD *)(a1 + 128), v10, &v186);
        v109 = v186;
        if ((v107 & 1) != 0)
        {
          if (*((_BYTE *)v186 + 32))
          {
            v168 = a5;
            v110 = *(size_t **)(v10 + 8);
            v113 = *v110;
            v112 = (int *)(v110 + 3);
            v111 = v113;
            v114 = sub_1C4FC90EC(*(_QWORD *)(a1 + 8), v112, v113);
            v115 = v191;
            *(_DWORD *)v114 = (_DWORD)v191;
            if (!v115)
              goto LABEL_142;
            v166 = v114;
            v123 = *(llvm::PointerType **)(a1 + 48);
            v182 = 1283;
            v179[0] = "__typeid_";
            v180 = v112;
            v181 = v111;
            v183[0] = v179;
            v184 = "_";
            v185 = 770;
            v186 = v183;
            v188 = "global_addr";
            v189 = 11;
            v190 = 1282;
            v124 = (llvm::GlobalValue *)llvm::GlobalAlias::create(v123, 0, 0, (uint64_t)&v186, ElementPtr, *(_QWORD *)a1);
            v125 = v124;
            v126 = *((_DWORD *)v124 + 8);
            v127 = v126 & 0xFFFFFFCF | 0x10;
            *((_DWORD *)v124 + 8) = v127;
            if ((v126 & 0xFu) - 7 < 2)
            {
LABEL_157:
              *((_DWORD *)v125 + 8) = v127 | 0x4000;
            }
            else if ((llvm::GlobalValue::hasExternalWeakLinkage(v124) & 1) == 0)
            {
              v127 = *((_DWORD *)v125 + 8);
              goto LABEL_157;
            }
            v116 = 0;
            if (v115 > 4 || ((1 << v115) & 0x16) == 0)
              goto LABEL_143;
            if ((*(_DWORD *)(a1 + 28) - 41) <= 1 && *(_DWORD *)(a1 + 36) == 3)
            {
              v128 = sub_1C537D3B8((llvm *)0x30, (uint64_t)v193, *(llvm::Constant **)(a1 + 56), 0);
              v129 = *(llvm::PointerType **)(a1 + 48);
              v182 = 1283;
              v179[0] = "__typeid_";
              v180 = v112;
              v181 = v111;
              v183[0] = v179;
              v184 = "_";
              v185 = 770;
              v186 = v183;
              v188 = "align";
              v189 = 5;
              v190 = 1282;
              v130 = (llvm::GlobalValue *)llvm::GlobalAlias::create(v129, 0, 0, (uint64_t)&v186, (uint64_t)v128, *(_QWORD *)a1);
              v131 = v130;
              v132 = *((_DWORD *)v130 + 8);
              v133 = v132 & 0xFFFFFFCF | 0x10;
              *((_DWORD *)v130 + 8) = v133;
              if ((v132 & 0xFu) - 7 < 2)
                goto LABEL_165;
              hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v130);
              v135 = v166;
              if ((hasExternalWeakLinkage & 1) == 0)
              {
                v133 = *((_DWORD *)v131 + 8);
LABEL_165:
                *((_DWORD *)v131 + 8) = v133 | 0x4000;
                v135 = v166;
              }
            }
            else
            {
              v136 = (_QWORD *)((char *)v193 + 24);
              if (*((_DWORD *)v193 + 8) >= 0x41u)
                v136 = (_QWORD *)*v136;
              v135 = v166;
              v166[1] = *v136;
            }
            v137 = (uint64_t)v194;
            v138 = v111;
            if ((*(_DWORD *)(a1 + 28) - 41) <= 1 && *(_DWORD *)(a1 + 36) == 3)
            {
              v139 = sub_1C537D3B8((llvm *)0x30, (uint64_t)v194, *(llvm::Constant **)(a1 + 56), 0);
              v140 = *(llvm::PointerType **)(a1 + 48);
              v182 = 1283;
              v179[0] = "__typeid_";
              v180 = v112;
              v181 = v111;
              v183[0] = v179;
              v184 = "_";
              v185 = 770;
              v186 = v183;
              v188 = "size_m1";
              v189 = 7;
              v190 = 1282;
              v141 = (llvm::GlobalValue *)llvm::GlobalAlias::create(v140, 0, 0, (uint64_t)&v186, (uint64_t)v139, *(_QWORD *)a1);
              v142 = v141;
              v143 = *((_DWORD *)v141 + 8);
              v144 = v143 & 0xFFFFFFCF | 0x10;
              *((_DWORD *)v141 + 8) = v144;
              if ((v143 & 0xFu) - 7 < 2)
                goto LABEL_174;
              v145 = llvm::GlobalValue::hasExternalWeakLinkage(v141);
              v135 = v166;
              if ((v145 & 1) == 0)
              {
                v144 = *((_DWORD *)v142 + 8);
LABEL_174:
                *((_DWORD *)v142 + 8) = v144 | 0x4000;
                v135 = v166;
              }
            }
            else
            {
              v146 = (_QWORD *)((char *)v194 + 24);
              if (*((_DWORD *)v194 + 8) >= 0x41u)
                v146 = (_QWORD *)*v146;
              v135[2] = *v146;
            }
            v147 = (_QWORD *)(v137 + 24);
            if (*(_DWORD *)(v137 + 32) >= 0x41u)
              v147 = (_QWORD *)*v147;
            v148 = *v147 + 1;
            if (v115 == 2)
            {
              if (v148 < 0x21)
                v149 = 5;
              else
                v149 = 6;
              *((_DWORD *)v135 + 1) = v149;
              if ((*(_DWORD *)(a1 + 28) - 41) <= 1 && *(_DWORD *)(a1 + 36) == 3)
              {
                v150 = sub_1C537D3B8((llvm *)0x30, (uint64_t)v197, *(llvm::Constant **)(a1 + 56), 0);
                v151 = *(llvm::PointerType **)(a1 + 48);
                v182 = 1283;
                v179[0] = "__typeid_";
                v180 = v112;
                v181 = v138;
                v183[0] = v179;
                v184 = "_";
                v185 = 770;
                v186 = v183;
                v188 = "inline_bits";
                v152 = 11;
                goto LABEL_198;
              }
              v163 = (_QWORD *)((char *)v197 + 24);
              if (*((_DWORD *)v197 + 8) >= 0x41u)
                v163 = (_QWORD *)*v163;
              v116 = 0;
              v135[4] = *v163;
LABEL_143:
              if (v46)
                *((_QWORD *)v46 + 6) = v116;
              a5 = v168;
              goto LABEL_147;
            }
            if (v148 >= 0x81)
              v153 = 32;
            else
              v153 = 7;
            *((_DWORD *)v135 + 1) = v153;
            if (v115 == 1)
            {
              v154 = *(llvm::PointerType **)(a1 + 48);
              v182 = 1283;
              v179[0] = "__typeid_";
              v180 = v112;
              v181 = v138;
              v183[0] = v179;
              v184 = "_";
              v185 = 770;
              v186 = v183;
              v188 = "byte_array";
              v189 = 10;
              v190 = 1282;
              v155 = (llvm::GlobalValue *)llvm::GlobalAlias::create(v154, 0, 0, (uint64_t)&v186, v195, *(_QWORD *)a1);
              v156 = v155;
              v157 = *((_DWORD *)v155 + 8);
              v158 = v157 & 0xFFFFFFCF | 0x10;
              *((_DWORD *)v155 + 8) = v158;
              if ((v157 & 0xFu) - 7 < 2)
                goto LABEL_194;
              if ((llvm::GlobalValue::hasExternalWeakLinkage(v155) & 1) == 0)
              {
                v158 = *((_DWORD *)v156 + 8);
LABEL_194:
                *((_DWORD *)v156 + 8) = v158 | 0x4000;
              }
              if ((*(_DWORD *)(a1 + 28) - 41) > 1 || *(_DWORD *)(a1 + 36) != 3)
              {
                v116 = v166 + 3;
                goto LABEL_143;
              }
              v150 = v196;
              v151 = *(llvm::PointerType **)(a1 + 48);
              v182 = 1283;
              v179[0] = "__typeid_";
              v180 = v112;
              v181 = v138;
              v183[0] = v179;
              v184 = "_";
              v185 = 770;
              v186 = v183;
              v188 = "bit_mask";
              v152 = 8;
LABEL_198:
              v189 = v152;
              v190 = 1282;
              v159 = (llvm::GlobalValue *)llvm::GlobalAlias::create(v151, 0, 0, (uint64_t)&v186, (uint64_t)v150, *(_QWORD *)a1);
              v160 = v159;
              v161 = *((_DWORD *)v159 + 8);
              v162 = v161 & 0xFFFFFFCF | 0x10;
              *((_DWORD *)v159 + 8) = v162;
              if ((v161 & 0xFu) - 7 < 2)
              {
LABEL_201:
                v116 = 0;
                *((_DWORD *)v160 + 8) = v162 | 0x4000;
                goto LABEL_143;
              }
              if ((llvm::GlobalValue::hasExternalWeakLinkage(v159) & 1) == 0)
              {
                v162 = *((_DWORD *)v160 + 8);
                goto LABEL_201;
              }
            }
LABEL_142:
            v116 = 0;
            goto LABEL_143;
          }
        }
        else
        {
          v109 = sub_1C5714E18(a1 + 112, &v178, v186);
          *v109 = v10;
          *(_OWORD *)(v109 + 1) = 0u;
          *(_OWORD *)(v109 + 3) = 0u;
        }
LABEL_147:
        v117 = (uint64_t *)v109[1];
        v118 = (uint64_t *)v109[2];
        while (v117 != v118)
        {
          v119 = (llvm::ValueAsMetadata *)*v117;
          v120 = sub_1C57126C8((uint64_t ***)a1, v10, *v117, (uint64_t)&v191, v108);
          if (v120)
          {
            llvm::Value::doRAUW(v119, v120, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v119 + 5) + 40, (uint64_t ***)v119);
            v121 = *((_QWORD *)v119 + 3);
            v122 = (_QWORD *)*((_QWORD *)v119 + 4);
            *v122 = v121;
            *(_QWORD *)(v121 + 8) = v122;
            *((_QWORD *)v119 + 3) = 0;
            *((_QWORD *)v119 + 4) = 0;
            llvm::Value::deleteValue(v119);
          }
          ++v117;
        }
        sub_1C47655E8((uint64_t)&v172, v173);
        a2 = v171 + 1;
      }
      while (v171 + 1 != v169);
    }
  }
}

uint64_t sub_1C571993C(uint64_t a1)
{
  int v1;
  uint64_t ModuleFlag;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_DWORD *)(a1 + 28);
  if (v1 > 40)
  {
    if ((v1 - 41) >= 2)
      goto LABEL_15;
    return 8;
  }
  if (v1 != 1)
  {
    if (v1 != 3)
    {
      if (v1 != 39)
LABEL_15:
        llvm::report_fatal_error((llvm *)"Unsupported architecture for jump tables", (const char *)1);
      return 4;
    }
    ModuleFlag = llvm::Module::getModuleFlag(*(_QWORD *)a1, "branch-target-enforcement", 0x19uLL);
    if (ModuleFlag)
    {
      v4 = *(_QWORD *)(ModuleFlag + 128);
      if (v4)
      {
        v5 = (_QWORD *)(v4 + 24);
        if (*(_DWORD *)(v4 + 32) >= 0x41u)
          v5 = (_QWORD *)*v5;
        if (*v5)
          return 8;
      }
    }
  }
  return 4;
}

void sub_1C57199D8(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  uint64_t v7;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  __int128 *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  __int128 v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      if (*(a2 - 4) > *(_QWORD *)(a1 + 24))
        sub_1C5719D60(a1, (uint64_t)(a2 - 7));
    }
    else if ((uint64_t)a3 <= 0)
    {
      if ((_QWORD *)a1 != a2)
      {
        v14 = (_QWORD *)(a1 + 56);
        if ((_QWORD *)(a1 + 56) != a2)
        {
          v15 = 0;
          v16 = (_QWORD *)a1;
          do
          {
            v17 = v14;
            v18 = (__int128 *)(v16 + 10);
            if (v16[10] > v16[3])
            {
              v21 = (_QWORD *)v16[8];
              v19 = v16 + 8;
              v20 = v21;
              v49 = (_QWORD *)*v17;
              v50 = v21;
              v51 = v19[1];
              if (v51)
              {
                v20[2] = &v50;
                *v17 = v19;
                *v19 = 0;
                v19[1] = 0;
              }
              else
              {
                v49 = &v50;
              }
              v22 = v18[1];
              v52 = *v18;
              v53 = v22;
              v23 = v15;
              while (1)
              {
                v24 = (_OWORD *)(v7 + v23);
                sub_1C629B49C(v7 + v23 + 56, (_QWORD *)(v7 + v23));
                v25 = *(_OWORD *)(v7 + v23 + 40);
                v24[5] = *(_OWORD *)((char *)v24 + 24);
                v24[6] = v25;
                if (!v23)
                  break;
                v23 -= 56;
                if ((unint64_t)v52 <= *((_QWORD *)v24 - 4))
                {
                  v26 = v7 + v23 + 56;
                  goto LABEL_22;
                }
              }
              v26 = v7;
LABEL_22:
              v27 = v26 + 8;
              sub_1C47655E8(v26, *(_QWORD **)(v26 + 8));
              *(_QWORD *)v26 = v49;
              v28 = v50;
              *(_QWORD *)(v26 + 8) = v50;
              v29 = v51;
              *(_QWORD *)(v26 + 16) = v51;
              if (v29)
              {
                v30 = 0;
                v28[2] = v27;
                v49 = &v50;
                v50 = 0;
                v51 = 0;
              }
              else
              {
                *(_QWORD *)v26 = v27;
                v30 = v50;
              }
              v31 = v53;
              *(_OWORD *)((char *)v24 + 24) = v52;
              *(_OWORD *)((char *)v24 + 40) = v31;
              sub_1C47655E8((uint64_t)&v49, v30);
            }
            v14 = v17 + 7;
            v15 += 56;
            v16 = v17;
          }
          while (v17 + 7 != a2);
        }
      }
    }
    else
    {
      v10 = a4;
      v11 = a3 >> 1;
      v12 = (_QWORD *)(a1 + 56 * (a3 >> 1));
      v13 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v32 = sub_1C5719E54(a1, v12, v13, a4, a6);
        v33 = v10 + 56 * v11;
        sub_1C5719E54(v7 + 56 * (a3 >> 1), a2, a3 - (a3 >> 1), v33, v32);
        v34 = v10 + 56 * a3;
        v35 = v33;
        v36 = v10;
        while (v35 != v34)
        {
          v37 = (_OWORD *)(v7 + 24);
          if (*(_QWORD *)(v35 + 24) <= *(_QWORD *)(v36 + 24))
          {
            sub_1C629B49C(v7, (_QWORD *)v36);
            v39 = *(_OWORD *)(v36 + 40);
            *v37 = *(_OWORD *)(v36 + 24);
            *(_OWORD *)(v7 + 40) = v39;
            v36 += 56;
          }
          else
          {
            sub_1C629B49C(v7, (_QWORD *)v35);
            v38 = *(_OWORD *)(v35 + 40);
            *v37 = *(_OWORD *)(v35 + 24);
            *(_OWORD *)(v7 + 40) = v38;
            v35 += 56;
          }
          v7 += 56;
          if (v36 == v33)
          {
            if (v35 != v34)
            {
              v40 = 0;
              do
              {
                v41 = v35 + v40;
                v42 = v7 + v40;
                sub_1C629B49C(v7 + v40, (_QWORD *)(v35 + v40));
                v43 = *(_OWORD *)(v35 + v40 + 24);
                *(_OWORD *)(v42 + 40) = *(_OWORD *)(v35 + v40 + 40);
                *(_OWORD *)(v42 + 24) = v43;
                v40 += 56;
              }
              while (v41 + 56 != v34);
            }
            goto LABEL_39;
          }
        }
        if (v36 != v33)
        {
          v44 = 0;
          do
          {
            v45 = v36 + v44;
            v46 = v7 + v44;
            sub_1C629B49C(v7 + v44, (_QWORD *)(v36 + v44));
            v47 = *(_OWORD *)(v36 + v44 + 24);
            *(_OWORD *)(v46 + 40) = *(_OWORD *)(v36 + v44 + 40);
            *(_OWORD *)(v46 + 24) = v47;
            v44 += 56;
          }
          while (v45 + 56 != v33);
        }
LABEL_39:
        if (v10)
        {
          v48 = a3;
          do
          {
            sub_1C47655E8(v10, *(_QWORD **)(v10 + 8));
            v10 += 56;
            --v48;
          }
          while (v48);
        }
      }
      else
      {
        sub_1C57199D8(a1, v12, v13, a4, a5);
        sub_1C57199D8(v7 + 56 * (a3 >> 1), a2, a3 - (a3 >> 1), v10, a5);
        sub_1C571A380(v7, v7 + 56 * (a3 >> 1), (uint64_t)a2, a3 >> 1, a3 - (a3 >> 1), v10, a5);
      }
    }
  }
}

void sub_1C5719D60(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;

  v4 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)(a1 + 8);
  v12 = *(_QWORD **)a1;
  v13 = v5;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v5[2] = &v13;
    *(_QWORD *)a1 = v4;
    *v4 = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    v12 = &v13;
  }
  v6 = *(_OWORD *)(a1 + 40);
  v15 = *(_OWORD *)(a1 + 24);
  v16 = v6;
  sub_1C629B49C(a1, (_QWORD *)a2);
  v7 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  v8 = a2 + 8;
  sub_1C47655E8(a2, *(_QWORD **)(a2 + 8));
  v9 = v13;
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v9;
  v10 = v14;
  *(_QWORD *)(a2 + 16) = v14;
  if (v10)
  {
    v9[2] = v8;
    v12 = &v13;
    v13 = 0;
    v14 = 0;
    v9 = 0;
  }
  else
  {
    *(_QWORD *)a2 = v8;
  }
  v11 = v16;
  *(_OWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 40) = v11;
  sub_1C47655E8((uint64_t)&v12, v9);
}

__n128 sub_1C5719E54(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 *v13;
  __n128 *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;

  if (a3)
  {
    v8 = (_QWORD *)a1;
    if (a3 == 2)
    {
      v13 = (__n128 *)(a2 - 4);
      v14 = (__n128 *)(a1 + 24);
      v15 = a4 + 8;
      if (*(a2 - 4) <= *(_QWORD *)(a1 + 24))
      {
        *(_QWORD *)a4 = *(_QWORD *)a1;
        v23 = (_QWORD *)(a1 + 8);
        v24 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a4 + 8) = v24;
        v25 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a4 + 16) = v25;
        if (v25)
        {
          *(_QWORD *)(v24 + 16) = v15;
          *(_QWORD *)a1 = v23;
          *v23 = 0;
          *(_QWORD *)(a1 + 16) = 0;
        }
        else
        {
          *(_QWORD *)a4 = v15;
        }
        v56 = *v14;
        *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
        *(__n128 *)(a4 + 24) = v56;
        *(_QWORD *)(a4 + 56) = *(a2 - 7);
        v57 = a2 - 6;
        v58 = *(a2 - 6);
        *(_QWORD *)(a4 + 64) = v58;
        v59 = a4 + 64;
        v60 = *(a2 - 5);
        *(_QWORD *)(a4 + 72) = v60;
        if (v60)
        {
          *(_QWORD *)(v58 + 16) = v59;
          *(a2 - 7) = v57;
          *v57 = 0;
          *(a2 - 5) = 0;
        }
        else
        {
          *(_QWORD *)(a4 + 56) = v59;
        }
        result = *v13;
        v61 = *((_OWORD *)a2 - 1);
      }
      else
      {
        *(_QWORD *)a4 = *(a2 - 7);
        v16 = a2 - 6;
        v17 = *(a2 - 6);
        *(_QWORD *)(a4 + 8) = v17;
        v18 = *(a2 - 5);
        *(_QWORD *)(a4 + 16) = v18;
        if (v18)
        {
          *(_QWORD *)(v17 + 16) = v15;
          *(a2 - 7) = v16;
          *v16 = 0;
          *(a2 - 5) = 0;
        }
        else
        {
          *(_QWORD *)a4 = v15;
        }
        v51 = *v13;
        *(_OWORD *)(a4 + 40) = *((_OWORD *)a2 - 1);
        *(__n128 *)(a4 + 24) = v51;
        *(_QWORD *)(a4 + 56) = *(_QWORD *)a1;
        v52 = (_QWORD *)(a1 + 8);
        v53 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a4 + 64) = v53;
        v54 = a4 + 64;
        v55 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a4 + 72) = v55;
        if (v55)
        {
          *(_QWORD *)(v53 + 16) = v54;
          *(_QWORD *)a1 = v52;
          *v52 = 0;
          *(_QWORD *)(a1 + 16) = 0;
        }
        else
        {
          *(_QWORD *)(a4 + 56) = v54;
        }
        result = *v14;
        v61 = *(_OWORD *)(a1 + 40);
      }
      *(__n128 *)(a4 + 80) = result;
      *(_OWORD *)(a4 + 96) = v61;
    }
    else if (a3 == 1)
    {
      *(_QWORD *)a4 = *(_QWORD *)a1;
      v9 = (_QWORD *)(a1 + 8);
      v10 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a4 + 8) = v10;
      v11 = a4 + 8;
      v12 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a4 + 16) = v12;
      if (v12)
      {
        *(_QWORD *)(v10 + 16) = v11;
        *(_QWORD *)a1 = v9;
        *v9 = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      else
      {
        *(_QWORD *)a4 = v11;
      }
      result = *(__n128 *)(a1 + 24);
      *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
      *(__n128 *)(a4 + 24) = result;
    }
    else if ((uint64_t)a3 > 8)
    {
      v26 = 56 * (a3 >> 1);
      v27 = (_QWORD *)(a1 + v26);
      sub_1C57199D8(a1, a1 + v26, a3 >> 1, a4, a3 >> 1);
      sub_1C57199D8(&v8[(unint64_t)v26 / 8], a2, a3 - (a3 >> 1), a4 + v26, a3 - (a3 >> 1));
      v28 = a4 + 16;
      v29 = &v8[(unint64_t)v26 / 8];
      while (v29 != a2)
      {
        v30 = v28 - 8;
        if (v29[3] <= v8[3])
        {
          *(_QWORD *)(v28 - 16) = *v8;
          v34 = v8 + 1;
          v35 = v8[1];
          *(_QWORD *)(v28 - 8) = v35;
          v36 = v8[2];
          *(_QWORD *)v28 = v36;
          if (v36)
          {
            *(_QWORD *)(v35 + 16) = v30;
            *v8 = v34;
            *v34 = 0;
            v8[2] = 0;
          }
          else
          {
            *(_QWORD *)(v28 - 16) = v30;
          }
          result = *(__n128 *)(v8 + 3);
          *(_OWORD *)(v28 + 24) = *(_OWORD *)(v8 + 5);
          *(__n128 *)(v28 + 8) = result;
          v8 += 7;
        }
        else
        {
          *(_QWORD *)(v28 - 16) = *v29;
          v31 = v29 + 1;
          v32 = v29[1];
          *(_QWORD *)(v28 - 8) = v32;
          v33 = v29[2];
          *(_QWORD *)v28 = v33;
          if (v33)
          {
            *(_QWORD *)(v32 + 16) = v30;
            *v29 = v31;
            *v31 = 0;
            v29[2] = 0;
          }
          else
          {
            *(_QWORD *)(v28 - 16) = v30;
          }
          result = *(__n128 *)(v29 + 3);
          *(_OWORD *)(v28 + 24) = *(_OWORD *)(v29 + 5);
          *(__n128 *)(v28 + 8) = result;
          v29 += 7;
        }
        v28 += 56;
        if (v8 == v27)
        {
          if (v29 != a2)
          {
            v37 = 0;
            do
            {
              v38 = (_QWORD *)(v28 + v37 * 8);
              *(v38 - 2) = v29[v37];
              v39 = &v29[v37 + 1];
              v40 = *v39;
              *(_QWORD *)(v28 + v37 * 8 - 8) = *v39;
              v41 = v28 + v37 * 8 - 8;
              v42 = v29[v37 + 2];
              *v38 = v42;
              if (v42)
              {
                *(_QWORD *)(v40 + 16) = v41;
                v29[v37] = v39;
                *v39 = 0;
                v29[v37 + 2] = 0;
              }
              else
              {
                *(v38 - 2) = v41;
              }
              v43 = v28 + v37 * 8;
              result = *(__n128 *)&v29[v37 + 3];
              *(_OWORD *)(v43 + 24) = *(_OWORD *)&v29[v37 + 5];
              *(__n128 *)(v43 + 8) = result;
              v37 += 7;
            }
            while (&v29[v37] != a2);
          }
          return result;
        }
      }
      if (v8 != v27)
      {
        v44 = 0;
        do
        {
          v45 = (_QWORD *)(v28 + v44 * 8);
          *(v45 - 2) = v8[v44];
          v46 = &v8[v44 + 1];
          v47 = *v46;
          *(_QWORD *)(v28 + v44 * 8 - 8) = *v46;
          v48 = v28 + v44 * 8 - 8;
          v49 = v8[v44 + 2];
          *v45 = v49;
          if (v49)
          {
            *(_QWORD *)(v47 + 16) = v48;
            v8[v44] = v46;
            *v46 = 0;
            v8[v44 + 2] = 0;
          }
          else
          {
            *(v45 - 2) = v48;
          }
          v50 = v28 + v44 * 8;
          result = *(__n128 *)&v8[v44 + 3];
          *(_OWORD *)(v50 + 24) = *(_OWORD *)&v8[v44 + 5];
          *(__n128 *)(v50 + 8) = result;
          v44 += 7;
        }
        while (&v8[v44] != v27);
      }
    }
    else if ((_QWORD *)a1 != a2)
    {
      *(_QWORD *)a4 = *(_QWORD *)a1;
      v19 = (_QWORD *)(a1 + 8);
      v20 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a4 + 8) = v20;
      v21 = a4 + 8;
      v22 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a4 + 16) = v22;
      if (v22)
      {
        *(_QWORD *)(v20 + 16) = v21;
        *(_QWORD *)a1 = v19;
        *v19 = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      else
      {
        *(_QWORD *)a4 = v21;
      }
      result = *(__n128 *)(a1 + 24);
      *(_OWORD *)(a4 + 40) = *(_OWORD *)(a1 + 40);
      *(__n128 *)(a4 + 24) = result;
      v62 = (_QWORD *)(a1 + 56);
      if ((_QWORD *)(a1 + 56) != a2)
      {
        v63 = 0;
        v64 = (_QWORD *)a4;
        do
        {
          v65 = v62;
          v66 = v64 + 7;
          v67 = v8 + 10;
          v68 = v64 + 8;
          if (v8[10] > v64[3])
          {
            v75 = v64 + 1;
            v76 = v64[1];
            v64[7] = *v64;
            v64[8] = v76;
            v77 = v64[2];
            v64[9] = v77;
            if (v77)
            {
              *(_QWORD *)(v76 + 16) = v68;
              *v64 = v75;
              *v75 = 0;
              v64[2] = 0;
            }
            else
            {
              *v66 = v68;
            }
            v78 = *(_OWORD *)(v64 + 5);
            *((_OWORD *)v64 + 5) = *(_OWORD *)(v64 + 3);
            *((_OWORD *)v64 + 6) = v78;
            v79 = a4;
            if (v64 != (_QWORD *)a4)
            {
              v80 = v63;
              while (1)
              {
                v79 = a4 + v80;
                if (*v67 <= *(_QWORD *)(a4 + v80 - 32))
                  break;
                sub_1C629B49C(a4 + v80, (_QWORD *)(v79 - 56));
                v81 = *(_OWORD *)(a4 + v80 - 16);
                *(_OWORD *)(v79 + 24) = *(_OWORD *)(a4 + v80 - 32);
                *(_OWORD *)(v79 + 40) = v81;
                v80 -= 56;
                if (!v80)
                {
                  v79 = a4;
                  break;
                }
              }
            }
            sub_1C629B49C(v79, v65);
            v73 = (_OWORD *)(v79 + 24);
          }
          else
          {
            v64[7] = *v62;
            v71 = v8[8];
            v70 = v8 + 8;
            v69 = v71;
            v64[8] = v71;
            v72 = v70[1];
            v64[9] = v72;
            if (v72)
            {
              *(_QWORD *)(v69 + 16) = v68;
              *v65 = v70;
              *v70 = 0;
              v70[1] = 0;
            }
            else
            {
              *v66 = v68;
            }
            v73 = v64 + 10;
          }
          result = *(__n128 *)v67;
          v74 = *((_OWORD *)v67 + 1);
          v62 = v65 + 7;
          *v73 = *(_OWORD *)v67;
          v73[1] = v74;
          v63 += 56;
          v64 = v66;
          v8 = v65;
        }
        while (v65 + 7 != a2);
      }
    }
  }
  return result;
}

void sub_1C571A380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _OWORD *v60;
  __int128 v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  if (a5)
  {
    v8 = a5;
    while (a4 > a7 && v8 > a7)
    {
      if (!a4)
        return;
      v12 = 0;
      v13 = -a4;
      while (1)
      {
        v14 = a1 + v12;
        if (*(_QWORD *)(a2 + 24) > *(_QWORD *)(a1 + v12 + 24))
          break;
        v12 += 56;
        if (__CFADD__(v13++, 1))
          return;
      }
      v16 = -v13;
      v90 = a6;
      if (-v13 >= v8)
      {
        if (v13 == -1)
        {
          sub_1C5719D60(a1 + v12, a2);
          return;
        }
        if (v13 > 0)
          v16 = 1 - v13;
        v28 = v16 >> 1;
        v27 = a2;
        v29 = a3;
        if (a3 != a2)
        {
          v30 = 0x6DB6DB6DB6DB6DB7 * ((a3 - a2) >> 3);
          v29 = a2;
          do
          {
            v31 = v30 >> 1;
            v32 = v29 + 56 * (v30 >> 1);
            v33 = *(_QWORD *)(v32 + 24);
            v34 = v32 + 56;
            v30 += ~(v30 >> 1);
            if (v33 > *(_QWORD *)(a1 + 56 * v28 + v12 + 24))
              v29 = v34;
            else
              v30 = v31;
          }
          while (v30);
          v27 = v29;
        }
        v20 = a1 + 56 * v28 + v12;
        v18 = 0x6DB6DB6DB6DB6DB7 * ((v27 - a2) >> 3);
        v19 = v20;
      }
      else
      {
        if (v8 >= 0)
          v17 = v8;
        else
          v17 = v8 + 1;
        v18 = v17 >> 1;
        v19 = a2;
        v20 = a1 + v12;
        v21 = a2 - a1 - v12;
        if (v21)
        {
          v22 = 0x6DB6DB6DB6DB6DB7 * (v21 >> 3);
          v20 = a1 + v12;
          do
          {
            v23 = v22 >> 1;
            v24 = v20 + 56 * (v22 >> 1);
            v25 = *(_QWORD *)(v24 + 24);
            v26 = v24 + 56;
            v22 += ~(v22 >> 1);
            if (*(_QWORD *)(a2 + 56 * v18 + 24) > v25)
              v22 = v23;
            else
              v20 = v26;
          }
          while (v22);
          v19 = v20;
        }
        v27 = a2 + 56 * v18;
        v28 = 0x6DB6DB6DB6DB6DB7 * ((v19 - a1 - v12) >> 3);
        v29 = v27;
      }
      v35 = v27;
      if (v20 != a2)
      {
        v35 = v19;
        if (v29 != a2)
        {
          v84 = v19;
          v85 = v27;
          v86 = v18;
          v87 = a7;
          v88 = a3;
          sub_1C5719D60(v20, a2);
          v35 = v20 + 56;
          for (i = a2 + 56; i != v29; i += 56)
          {
            if (v35 == a2)
              a2 = i;
            sub_1C5719D60(v35, i);
            v35 += 56;
          }
          if (v35 != a2)
          {
            v37 = v35;
            v38 = a2;
            do
            {
              while (1)
              {
                sub_1C5719D60(v37, a2);
                v37 += 56;
                a2 += 56;
                if (a2 == v29)
                  break;
                if (v37 == v38)
                  v38 = a2;
              }
              a2 = v38;
            }
            while (v37 != v38);
          }
          a7 = v87;
          a3 = v88;
          v27 = v85;
          v18 = v86;
          v19 = v84;
        }
      }
      a4 = -(v28 + v13);
      v39 = v8 - v18;
      if (v28 + v18 >= v8 - (v28 + v18) - v13)
      {
        v44 = -(v28 + v13);
        v45 = v18;
        a4 = v28;
        v42 = v90;
        v43 = a7;
        a2 = v19;
        sub_1C571A380(v35, v27, a3, v44, v8 - v18);
        v39 = v45;
        a3 = v35;
      }
      else
      {
        a2 = v27;
        v40 = a3;
        v41 = v28;
        v42 = v90;
        v43 = a7;
        sub_1C571A380(v14, v19, v35, v41, v18);
        a3 = v40;
        v14 = v35;
      }
      a1 = v14;
      v8 = v39;
      a7 = v43;
      a6 = v42;
      if (!v39)
        return;
    }
    if (a4 <= v8)
    {
      if (a1 == a2)
        return;
      v62 = 0;
      v47 = 0;
      do
      {
        v63 = (uint64_t *)(a6 + v62);
        *v63 = *(_QWORD *)(a1 + v62);
        v64 = (uint64_t *)(a1 + v62 + 8);
        v65 = *v64;
        *(_QWORD *)(a6 + v62 + 8) = *v64;
        v66 = a6 + v62 + 8;
        v67 = *(_QWORD *)(a1 + v62 + 16);
        v63[2] = v67;
        if (v67)
        {
          *(_QWORD *)(v65 + 16) = v66;
          *(_QWORD *)(a1 + v62) = v64;
          *v64 = 0;
          *(_QWORD *)(a1 + v62 + 16) = 0;
        }
        else
        {
          *v63 = v66;
        }
        v68 = a6 + v62;
        v69 = *(_OWORD *)(a1 + v62 + 24);
        *(_OWORD *)(v68 + 40) = *(_OWORD *)(a1 + v62 + 40);
        *(_OWORD *)(v68 + 24) = v69;
        ++v47;
        v62 += 56;
      }
      while (a1 + v62 != a2);
      if (v62)
      {
        v70 = a6 + v62;
        v71 = a6 + v62 - 56;
        v72 = a6;
        v89 = v71;
        while (a2 != a3)
        {
          v73 = a3;
          v74 = (_OWORD *)(a1 + 24);
          if (*(_QWORD *)(a2 + 24) <= *(_QWORD *)(v72 + 24))
          {
            sub_1C629B49C(a1, (_QWORD *)v72);
            v76 = *(_OWORD *)(v72 + 40);
            *v74 = *(_OWORD *)(v72 + 24);
            *(_OWORD *)(a1 + 40) = v76;
            v72 += 56;
          }
          else
          {
            sub_1C629B49C(a1, (_QWORD *)a2);
            v75 = *(_OWORD *)(a2 + 40);
            *v74 = *(_OWORD *)(a2 + 24);
            *(_OWORD *)(a1 + 40) = v75;
            a2 += 56;
          }
          a1 += 56;
          a3 = v73;
          v71 = v89;
          if (v70 == v72)
            goto LABEL_98;
        }
        if (v70 != v72)
        {
          v80 = 0;
          do
          {
            v81 = a1 + v80;
            v82 = v72 + v80;
            sub_1C629B49C(a1 + v80, (_QWORD *)(v72 + v80));
            v83 = *(_OWORD *)(v72 + v80 + 24);
            *(_OWORD *)(v81 + 40) = *(_OWORD *)(v72 + v80 + 40);
            *(_OWORD *)(v81 + 24) = v83;
            v80 += 56;
          }
          while (v71 != v82);
        }
      }
    }
    else
    {
      if (a3 == a2)
        return;
      v46 = 0;
      v47 = 0;
      do
      {
        v48 = (uint64_t *)(a6 + v46);
        *v48 = *(_QWORD *)(a2 + v46);
        v49 = (uint64_t *)(a2 + v46 + 8);
        v50 = *v49;
        *(_QWORD *)(a6 + v46 + 8) = *v49;
        v51 = a6 + v46 + 8;
        v52 = *(_QWORD *)(a2 + v46 + 16);
        v48[2] = v52;
        if (v52)
        {
          *(_QWORD *)(v50 + 16) = v51;
          *(_QWORD *)(a2 + v46) = v49;
          *v49 = 0;
          *(_QWORD *)(a2 + v46 + 16) = 0;
        }
        else
        {
          *v48 = v51;
        }
        v53 = a6 + v46;
        v54 = *(_OWORD *)(a2 + v46 + 24);
        *(_OWORD *)(v53 + 40) = *(_OWORD *)(a2 + v46 + 40);
        *(_OWORD *)(v53 + 24) = v54;
        ++v47;
        v46 += 56;
      }
      while (a2 + v46 != a3);
      if (v46)
      {
        v55 = a6 + v46;
        v56 = a3 - 56;
        while (a2 != a1)
        {
          v57 = *(_QWORD *)(v55 - 32);
          v58 = *(_QWORD *)(a2 - 32);
          if (v57 > v58)
            v59 = (_QWORD *)(a2 - 56);
          else
            v59 = (_QWORD *)(v55 - 56);
          if (v57 > v58)
            v60 = (_OWORD *)(a2 - 32);
          else
            v60 = (_OWORD *)(v55 - 32);
          if (v57 <= v58)
            v55 -= 56;
          else
            a2 -= 56;
          sub_1C629B49C(v56, v59);
          v61 = v60[1];
          *(_OWORD *)(v56 + 24) = *v60;
          *(_OWORD *)(v56 + 40) = v61;
          v56 -= 56;
          if (v55 == a6)
            goto LABEL_98;
        }
        if (v55 != a6)
        {
          v77 = 0;
          do
          {
            v78 = v56 + v77;
            sub_1C629B49C(v56 + v77, (_QWORD *)(v55 + v77 - 56));
            v79 = *(_OWORD *)(v55 + v77 - 32);
            *(_OWORD *)(v78 + 40) = *(_OWORD *)(v55 + v77 - 16);
            *(_OWORD *)(v78 + 24) = v79;
            v77 -= 56;
          }
          while (v55 + v77 != a6);
        }
      }
    }
LABEL_98:
    if (a6)
    {
      do
      {
        sub_1C47655E8(a6, *(_QWORD **)(a6 + 8));
        a6 += 56;
        --v47;
      }
      while (v47);
    }
  }
}

void sub_1C571A94C(__int128 *a1, uint64_t *a2, _WORD *a3)
{
  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80CD70, "lowertypetests-summary-action", 0x1DuLL);
  xmmword_1ED80CD90 = *a1;
  sub_1C571A9C0(a2, (uint64_t)&qword_1ED80CD70);
  word_1ED80CD7A = (32 * (*a3 & 3)) | word_1ED80CD7A & 0xFF9F;
}

void sub_1C571A9C0(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 40 * v2;
    v5 = a2 + 152;
    do
    {
      sub_1C571AA18(v5, *(unsigned __int8 **)v3, *(_QWORD *)(v3 + 8), (int *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
      v3 += 40;
    }
    while (v3 != v4);
  }
}

void sub_1C571AA18(uint64_t a1, unsigned __int8 *a2, size_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  _QWORD v14[5];
  int v15;
  char v16;

  v9 = *a4;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = &unk_1E817B270;
  v16 = 1;
  v15 = v9;
  v10 = sub_1C571AADC(a1 + 16, (unint64_t)v14, 1);
  v11 = *(_QWORD *)(a1 + 16) + 48 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 32) = &unk_1E817B290;
  v13 = *(_BYTE *)(v10 + 44);
  *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);
  *(_BYTE *)(v11 + 44) = v13;
  *(_QWORD *)(v11 + 32) = &unk_1E817B270;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 8), a2, a3);
}

unint64_t sub_1C571AADC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 48 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C629B668(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C629B668(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C571AB44()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3;
  char v4;
  int v5;
  __n128 v6;
  _QWORD v7[2];
  int v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6.n128_u64[0] = (unint64_t)"Try to avoid reuse of byte array addresses using aliases";
  v6.n128_u64[1] = 56;
  v5 = 1;
  v4 = 1;
  *(_QWORD *)&v3 = &v4;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED80CA20, "lowertypetests-avoid-reuse", &v6, &v5, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80CA20, &dword_1C475E000);
  *(_QWORD *)&v3 = "What to do with the summary when running this pass";
  *((_QWORD *)&v3 + 1) = 50;
  v6.n128_u64[0] = (unint64_t)v7;
  v7[0] = "none";
  v7[1] = 4;
  v8 = 0;
  v9 = "Do nothing";
  v10 = 10;
  v11 = "import";
  v12 = 6;
  v13 = 1;
  v14 = "Import typeid resolutions from summary and globals";
  v15 = 50;
  v16 = "export";
  v17 = 6;
  v18 = 2;
  v19 = "Export typeid resolutions to summary and globals";
  v20 = 48;
  v6.n128_u64[1] = 0x400000003;
  v5 = 1;
  sub_1C629B550(&v3, (uint64_t *)&v6, &v5);
  if ((_QWORD *)v6.n128_u64[0] != v7)
    free((void *)v6.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C62991C4, &qword_1ED80CD70, &dword_1C475E000);
  v0 = sub_1C47AD050((uint64_t)&qword_1ED80CBA0, 0, 0);
  qword_1ED80CC20 = 0;
  qword_1ED80CC28 = 0;
  qword_1ED80CC48 = 0;
  unk_1ED80CC50 = 0;
  qword_1ED80CC40 = 0;
  byte_1ED80CC58 = 0;
  unk_1ED80CC30 = 0;
  unk_1ED80CC38 = &unk_1E819E950;
  qword_1ED80CBA0 = (uint64_t)&unk_1E819E480;
  qword_1ED80CC60 = (uint64_t)&unk_1E819E970;
  qword_1ED80CC68[0] = &off_1E7FA8CB8;
  qword_1ED80CC80 = (uint64_t)qword_1ED80CC68;
  llvm::cl::Option::setArgStr(v0, "lowertypetests-read-summary", 0x1BuLL);
  qword_1ED80CBC0 = (uint64_t)"Read summary from given YAML file before running pass";
  unk_1ED80CBC8 = 53;
  word_1ED80CBAA = word_1ED80CBAA & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80CBA0);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED80CBA0, &dword_1C475E000);
  v1 = sub_1C47AD050((uint64_t)&qword_1ED80CC88, 0, 0);
  qword_1ED80CD10 = 0;
  qword_1ED80CD08 = 0;
  unk_1ED80CD18 = 0;
  qword_1ED80CD28 = 0;
  qword_1ED80CD38 = 0;
  qword_1ED80CD30 = 0;
  byte_1ED80CD40 = 0;
  qword_1ED80CD20 = (uint64_t)&unk_1E819E950;
  qword_1ED80CC88 = (uint64_t)&unk_1E819E480;
  qword_1ED80CD48 = (uint64_t)&unk_1E819E970;
  qword_1ED80CD50 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED80CD68 = (uint64_t)&qword_1ED80CD50;
  llvm::cl::Option::setArgStr(v1, "lowertypetests-write-summary", 0x1CuLL);
  qword_1ED80CCA8 = (uint64_t)"Write summary to given YAML file after running pass";
  unk_1ED80CCB0 = 51;
  word_1ED80CC92 = word_1ED80CC92 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED80CC88);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED80CC88, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"Simply drop type test assume sequences";
  v6.n128_u64[1] = 38;
  v5 = 1;
  v4 = 0;
  *(_QWORD *)&v3 = &v4;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED80CAE0, "lowertypetests-drop-type-tests", &v6, &v5, (_BYTE **)&v3);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80CAE0, &dword_1C475E000);
}

void llvm::initializeMergeFunctionsLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831EE0);
  if (v2 != -1)
  {
    v5[0] = sub_1C571AED8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831EE0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C571AED8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Merge Functions";
  *(_QWORD *)(v2 + 8) = 15;
  *(_QWORD *)(v2 + 16) = "mergefunc";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F32F8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C571C138;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C571AF68(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F32F8;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817B420;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831EE0);
  if (v3 != -1)
  {
    v7[0] = sub_1C571AED8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831EE0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C571B030(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *(_DWORD *)(a1 + 16) = 128;
  v2 = (char *)operator new(0x1800uLL, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    v5 = v2 + 16;
    do
    {
      *v5 = 0;
      v5[1] = -4096;
      *(v5 - 2) = &unk_1E817B4C0;
      *(v5 - 1) = 2;
      v5[2] = 0;
      v5 += 6;
      v4 -= 48;
    }
    while (v4);
  }
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = a1;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  return a1;
}

uint64_t sub_1C571B0D0(uint64_t a1, llvm::Function *a2, __n128 a3)
{
  _QWORD *v4;
  _QWORD *v5;
  __n128 *v6;
  __n128 *v7;
  unint64_t v8;
  const std::nothrow_t *v9;
  unint64_t v10;
  __n128 *v11;
  __n128 *v12;
  llvm::Function *v13;
  __n128 *v14;
  __n128 *v15;
  uint64_t v16;
  BOOL v17;
  char v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 *v23;
  unint64_t v24;
  char *v25;
  __n128 *v26;
  __n128 *v27;
  __n128 *v28;
  __n128 *v29;
  __n128 *v30;
  int32x2_t ****v31;
  unint64_t *v33;
  int32x2_t ****v34;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  int32x2_t ****v39;
  int32x2_t *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  int32x2_t *****v45;
  int32x2_t ****v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t ***v53;
  unint64_t v54;
  uint64_t **v55;
  uint64_t *v56;
  uint64_t **v57;
  uint64_t *v58;
  uint64_t ***v59;
  llvm::GlobalValue *Section;
  llvm::Module *v61;
  _BOOL4 v62;
  llvm::GlobalValue *v63;
  llvm::Module *v64;
  llvm::GlobalValue *v65;
  llvm::Module *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t ****v76;
  uint64_t ***v77;
  int v78;
  int v79;
  uint64_t ***v80;
  char *v81;
  size_t v82;
  size_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t ****v88;
  uint64_t ***v89;
  int v90;
  int v91;
  size_t *v92;
  size_t v93;
  size_t v94;
  size_t v95;
  int v96;
  BOOL v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  llvm::GlobalValue *v102;
  llvm::Module *v103;
  llvm::GlobalValue *v104;
  uint64_t v105;
  llvm::Module *v106;
  llvm::UndefValue *v107;
  uint64_t **v108;
  llvm::UndefValue *v109;
  llvm::UndefValue **v110;
  _QWORD *v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  BOOL v116;
  llvm::UndefValue *v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  BOOL v121;
  llvm::PointerType *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t *v131;
  char v132;
  char v133;
  BOOL v134;
  __int16 v135;
  unint64_t v136;
  BOOL v137;
  char v138;
  unint64_t v139;
  unint64_t v140;
  unsigned int v141;
  int v142;
  unsigned int v143;
  void **v144;
  llvm::UndefValue *v145;
  BOOL v146;
  BOOL v147;
  BOOL v148;
  BOOL v149;
  BOOL v150;
  int v151;
  uint64_t v152;
  _QWORD *v153;
  int v154;
  int v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  unint64_t v160;
  unint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unsigned int v166;
  int v167;
  __n128 *__p;
  uint64_t v169;
  int v170;
  _QWORD *v171;
  uint64_t **v172;
  _QWORD v173[3];
  uint64_t ***v174;
  uint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  int32x2_t ****v178;
  __int16 v179;

  v4 = (_QWORD *)((char *)a2 + 24);
  v5 = (_QWORD *)*((_QWORD *)a2 + 4);
  if (v5 != (_QWORD *)((char *)a2 + 24))
  {
    v14 = 0;
    v15 = 0;
    v6 = 0;
    while (1)
    {
      v16 = v5 ? (uint64_t)(v5 - 7) : 0;
      if (v5 && *(_BYTE *)(v16 + 16) == 3)
        break;
      if (!*(_BYTE *)(v16 + 16) && *(_QWORD *)(v16 + 72) == v16 + 72)
      {
        v17 = (*(_BYTE *)(v16 + 34) & 0x80) == 0;
LABEL_15:
        v18 = v17;
        if ((v18 & 1) != 0)
          goto LABEL_25;
      }
      if ((*(_DWORD *)(v16 + 32) & 0xF) != 1)
      {
        v19 = llvm::FunctionComparator::functionHash((llvm::FunctionComparator *)v16, a2);
        v20 = v19;
        if (v15 >= v14)
        {
          v21 = v15 - v6;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 60)
            abort();
          v23 = v6;
          if (((char *)v14 - (char *)v6) >> 3 > v22)
            v22 = ((char *)v14 - (char *)v6) >> 3;
          if ((unint64_t)((char *)v14 - (char *)v6) >= 0x7FFFFFFFFFFFFFF0)
            v24 = 0xFFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            if (v24 >> 60)
              sub_1C4764EE4();
            v25 = (char *)operator new(16 * v24);
            v23 = v6;
          }
          else
          {
            v25 = 0;
          }
          v26 = (__n128 *)&v25[16 * v21];
          v26->n128_u64[0] = v20;
          v26->n128_u64[1] = v16;
          if (v15 == v23)
          {
            v6 = (__n128 *)&v25[16 * v21];
          }
          else
          {
            v27 = (__n128 *)&v25[16 * v21];
            do
            {
              a3 = v15[-1];
              v27[-1] = a3;
              --v27;
              --v15;
            }
            while (v15 != v23);
            v15 = v23;
            v6 = v27;
          }
          v14 = (__n128 *)&v25[16 * v24];
          v7 = v26 + 1;
          if (v15)
            operator delete(v15);
        }
        else
        {
          v15->n128_u64[0] = v19;
          v15->n128_u64[1] = v16;
          v7 = v15 + 1;
        }
        goto LABEL_43;
      }
LABEL_25:
      v7 = v15;
LABEL_43:
      v5 = (_QWORD *)v5[1];
      v15 = v7;
      if (v5 == v4)
        goto LABEL_3;
    }
    v17 = (*(_DWORD *)(v16 + 20) & 0x7FFFFFF) == 0;
    goto LABEL_15;
  }
  v6 = 0;
  v7 = 0;
LABEL_3:
  __p = v6;
  v8 = v7 - v6;
  if ((char *)v7 - (char *)v6 < 1)
  {
LABEL_7:
    v12 = v6;
    sub_1C571C238(v6, v7, v7 - v6, 0, 0, a3);
  }
  else
  {
    v9 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v10 = v7 - v6;
    while (1)
    {
      v11 = (__n128 *)operator new(16 * v10, v9);
      if (v11)
        break;
      v97 = v10 > 1;
      v10 >>= 1;
      if (!v97)
        goto LABEL_7;
    }
    v28 = v11;
    v12 = __p;
    sub_1C571C238(__p, v7, v8, v11, v10, a3);
    operator delete(v28);
  }
  if (v12 != v7)
  {
    v29 = v12;
    v30 = v12;
    do
    {
      if (v30 != v29 && v30[-1].n128_u64[0] == v30->n128_u64[0]
        || &v30[1] != v7 && v30[1].n128_u64[0] == v30->n128_u64[0])
      {
        v31 = (int32x2_t ****)v30->n128_u64[1];
        v176 = 6;
        v177 = 0;
        v178 = v31;
        if (v31 != (int32x2_t ****)-8192 && v31 != (int32x2_t ****)-4096 && v31 != 0)
        {
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v176);
          v29 = __p;
        }
        v33 = *(unint64_t **)(a1 + 80);
        if ((unint64_t)v33 >= *(_QWORD *)(a1 + 88))
        {
          v37 = sub_1C571CA4C((uint64_t *)(a1 + 72), &v176);
          v29 = __p;
        }
        else
        {
          *v33 = 6;
          v33[1] = 0;
          v34 = v178;
          v33[2] = (unint64_t)v178;
          if (v34 != (int32x2_t ****)-8192 && v34 != (int32x2_t ****)-4096)
          {
            if (v34)
            {
              v35 = v176 & 0xFFFFFFFFFFFFFFF8;
              v33[1] = *(_QWORD *)(v176 & 0xFFFFFFFFFFFFFFF8);
              *(_QWORD *)v35 = v33;
              *v33 = v35 | 6;
              v36 = (unint64_t *)v33[1];
              if (v36)
                *v36 = *v36 & 7 | (unint64_t)(v33 + 1);
            }
          }
          v37 = (uint64_t)(v33 + 3);
        }
        *(_QWORD *)(a1 + 80) = v37;
        if (v178 != (int32x2_t ****)-8192 && v178 != (int32x2_t ****)-4096 && v178)
        {
          v38 = v176 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v176 & 0xFFFFFFFFFFFFFFF8) = v177;
          if (v177)
          {
            *v177 = *v177 & 7 | v38;
          }
          else
          {
            v39 = v178;
            v40 = ***v178;
            v41 = (unint64_t)v40[303];
            if (v41 <= v38)
            {
              v42 = v40[305].u32[0];
              if (v41 + 16 * v42 > v38)
              {
                v43 = v42 - 1;
                LODWORD(v44) = v43 & ((v178 >> 4) ^ (v178 >> 9));
                v45 = (int32x2_t *****)(v41 + 16 * v44);
                v46 = *v45;
                if (v178 == *v45)
                {
LABEL_78:
                  *v45 = (int32x2_t ****)-8192;
                  v40[304] = vadd_s32(v40[304], (int32x2_t)0x1FFFFFFFFLL);
                  v39 = v178;
                }
                else
                {
                  v47 = 1;
                  while (v46 != (int32x2_t ****)-4096)
                  {
                    v48 = v44 + v47++;
                    v44 = v48 & v43;
                    v46 = *(int32x2_t *****)(v41 + 16 * v44);
                    if (v178 == v46)
                    {
                      v45 = (int32x2_t *****)(v41 + 16 * v44);
                      goto LABEL_78;
                    }
                  }
                }
                *((_BYTE *)v39 + 17) &= ~1u;
              }
            }
          }
        }
      }
      ++v30;
    }
    while (v30 != v7);
  }
  v49 = 0;
  v171 = (_QWORD *)(a1 + 128);
  v172 = (uint64_t **)(a1 + 104);
  v51 = *(_QWORD *)(a1 + 72);
  v50 = *(_QWORD *)(a1 + 80);
  do
  {
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
    v173[0] = v51;
    v173[1] = v50;
    v52 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = 0;
    v173[2] = v52;
    while (v51 != v50)
    {
      v53 = *(uint64_t ****)(v51 + 16);
      if (!v53)
        goto LABEL_125;
      if (*((_BYTE *)v53 + 16))
      {
        if (*((_BYTE *)v53 + 16) != 3 || (*((_DWORD *)v53 + 5) & 0x7FFFFFF) != 0)
          goto LABEL_92;
      }
      else if (v53[9] != (uint64_t **)(v53 + 9) || (*((_BYTE *)v53 + 34) & 0x80) != 0)
      {
LABEL_92:
        if (((_DWORD)v53[4] & 0xF) == 1)
          goto LABEL_125;
        v54 = llvm::FunctionComparator::functionHash(*(llvm::FunctionComparator **)(v51 + 16), v13);
        v55 = (uint64_t **)(a1 + 104);
        v56 = *v172;
        v57 = (uint64_t **)(a1 + 104);
        if (!*v172)
          goto LABEL_121;
        v57 = (uint64_t **)(a1 + 104);
        while (1)
        {
          while (1)
          {
            v55 = (uint64_t **)v56;
            if (!sub_1C571CFB0((uint64_t *)(a1 + 120), (uint64_t)v53, v54, v56[4], v56[5]))
              break;
            v56 = *v55;
            v57 = v55;
            if (!*v55)
              goto LABEL_121;
          }
          if (!sub_1C571CFB0((uint64_t *)(a1 + 120), (uint64_t)v55[4], (unint64_t)v55[5], (uint64_t)v53, v54))
            break;
          v57 = v55 + 1;
          v56 = v55[1];
          if (!v56)
            goto LABEL_121;
        }
        v58 = *v57;
        if (!*v57)
        {
LABEL_121:
          v67 = (uint64_t *)operator new(0x30uLL);
          v67[4] = (uint64_t)v53;
          v67[5] = v54;
          *v67 = 0;
          v67[1] = 0;
          v67[2] = (uint64_t)v55;
          *v57 = v67;
          v68 = **(_QWORD **)(a1 + 96);
          v69 = v67;
          if (v68)
          {
            *(_QWORD *)(a1 + 96) = v68;
            v69 = *v57;
          }
          sub_1C4768E74(*(uint64_t **)(a1 + 104), v69);
          ++*(_QWORD *)(a1 + 112);
          v174 = v53;
          v175 = v67;
          sub_1C571CDA0((uint64_t)&v176, (uint64_t)v171, (uint64_t *)&v174);
          v70 = 0;
LABEL_124:
          v49 |= v70;
          goto LABEL_125;
        }
        v59 = (uint64_t ***)v58[4];
        if (*((_BYTE *)v59 + 16) == 3
          && (Section = llvm::GlobalValue::getSection((llvm::GlobalValue *)v58[4]), v13 == (llvm::Function *)12)
          && (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
            ? (v146 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
            : (v146 = 0),
              v146))
        {
          v62 = 1;
        }
        else if (((_DWORD)v59[4] & 0xFu) - 5 < 4 || (v62 = 1, ((1 << ((_DWORD)v59[4] & 0xF)) & 0x614) == 0))
        {
          v61 = (llvm::Module *)v59[5];
          v62 = v61 && llvm::Module::getSemanticInterposition(v61) && (*((_BYTE *)v59 + 33) & 0x40) == 0;
        }
        v170 = v49;
        if (*((_BYTE *)v53 + 16) == 3
          && (v63 = llvm::GlobalValue::getSection((llvm::GlobalValue *)v53), v13 == (llvm::Function *)12)
          && (*(_QWORD *)v63 == *(_QWORD *)"llvm.ptrauth"
            ? (v147 = *((unsigned int *)v63 + 2) == (unint64_t)*(unsigned int *)"auth")
            : (v147 = 0),
              v147)
          || ((_DWORD)v53[4] & 0xFu) - 5 >= 4 && ((1 << ((_DWORD)v53[4] & 0xF)) & 0x614) != 0)
        {
          if (v62)
            goto LABEL_130;
LABEL_114:
          if (*((_BYTE *)v59 + 16) != 3
            || (v65 = llvm::GlobalValue::getSection((llvm::GlobalValue *)v59), v13 != (llvm::Function *)12)
            || (*(_QWORD *)v65 == *(_QWORD *)"llvm.ptrauth"
              ? (v150 = *((unsigned int *)v65 + 2) == (unint64_t)*(unsigned int *)"auth")
              : (v150 = 0),
                !v150))
          {
            if (((_DWORD)v59[4] & 0xFu) - 5 < 4 || ((1 << ((_DWORD)v59[4] & 0xF)) & 0x614) == 0)
            {
              v66 = (llvm::Module *)v59[5];
              if (!v66 || !llvm::Module::getSemanticInterposition(v66) || (*((_BYTE *)v59 + 33) & 0x40) != 0)
              {
LABEL_168:
                v101 = v58[4];
                if (*(_BYTE *)(v101 + 16) == 3
                  && (v102 = llvm::GlobalValue::getSection((llvm::GlobalValue *)v58[4]), v13 == (llvm::Function *)12)
                  && (*(_QWORD *)v102 == *(_QWORD *)"llvm.ptrauth"
                    ? (v148 = *((unsigned int *)v102 + 2) == (unint64_t)*(unsigned int *)"auth")
                    : (v148 = 0),
                      v148)
                  || (*(_DWORD *)(v101 + 32) & 0xFu) - 5 >= 4 && ((1 << (*(_DWORD *)(v101 + 32) & 0xF)) & 0x614) != 0
                  || (v103 = *(llvm::Module **)(v101 + 40)) != 0
                  && llvm::Module::getSemanticInterposition(v103)
                  && (*(_BYTE *)(v101 + 33) & 0x40) == 0)
                {
                  v122 = *(llvm::PointerType **)(v101 + 24);
                  if (*((_DWORD *)v122 + 2) <= 0xFFu)
                  {
                    v123 = 2;
                    v124 = v101 + 72;
                    do
                    {
                      v124 = *(_QWORD *)(v124 + 8);
                      --v123;
                    }
                    while (v124 != v101 + 72);
                    if (v123)
                      goto LABEL_224;
                    v125 = *(_QWORD *)(v101 + 80);
                    v126 = v125 ? v125 - 24 : 0;
                    v127 = v126 + 40;
                    v128 = -1;
                    v129 = v127;
                    do
                    {
                      v129 = *(_QWORD *)(v129 + 8);
                      ++v128;
                    }
                    while (v129 != v127);
                    if (v128 > 2)
                      goto LABEL_224;
                  }
                  if (byte_1ED80D1C8 && (*(_DWORD *)(v101 + 32) & 0xC0) == 0x80 && ((_DWORD)v53[4] & 0xC0) == 0x80)
                  {
LABEL_224:
                    v166 = *(_DWORD *)(*(_QWORD *)v101 + 8) >> 8;
                    v167 = *(_DWORD *)(v101 + 32) & 0xF;
                    v179 = 257;
                    v165 = *(_QWORD *)(v101 + 40);
                    v130 = (char *)operator new(0x80uLL);
                    *((_DWORD *)v130 + 7) = *((_DWORD *)v130 + 7) & 0x38000000 | 0x40000000;
                    *(_QWORD *)v130 = 0;
                    v131 = llvm::Function::Function((uint64_t *)v130 + 1, v122, v167, (llvm::Type *)v166, (uint64_t)&v176, v165);
                    llvm::Function::copyAttributesFrom((llvm::Function *)v131, (const llvm::Function *)v101);
                    llvm::Value::takeName((llvm::Value *)(v130 + 8), (llvm::Value *)v101);
                    sub_1C571D018(a1, *(_QWORD *)(v101 + 8));
                    v70 = 1;
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v101, (llvm::Value *)(v130 + 8), (llvm::Value *)1);
                    v132 = *((_WORD *)v130 + 21);
                    v133 = (v132 & 0x3F) - 1;
                    v134 = (v132 & 0x3F) == 0;
                    v135 = *((_WORD *)v53 + 17);
                    if (v134)
                      v133 = 0;
                    v136 = 1 << v133;
                    if (v134)
                      v136 = 0;
                    v137 = (v135 & 0x3F) == 0;
                    v138 = (v135 & 0x3F) - 1;
                    if (v137)
                      v138 = 0;
                    v139 = 1 << v138;
                    if (v137)
                      v139 = 0;
                    if (v139 <= v136)
                      v140 = v136;
                    else
                      v140 = v139;
                    sub_1C571D068(a1, v101, (uint64_t)v53);
                    sub_1C571D068(a1, v101, (uint64_t)(v130 + 8));
                    v141 = (__clz(__rbit64(v140)) << 16) + 0x10000;
                    if (!v140)
                      v141 = 0;
                    *(_DWORD *)(v101 + 32) = *(_DWORD *)(v101 + 32) & 0xFFC0BFC0 | 0x4008 | v141;
                  }
                  else
                  {
                    v70 = 1;
                  }
                }
                else
                {
                  v169 = v101;
                  if (*((_BYTE *)v53 + 16) != 3
                    || (v104 = llvm::GlobalValue::getSection((llvm::GlobalValue *)v53), v105 != 12)
                    || (*(_QWORD *)v104 == *(_QWORD *)"llvm.ptrauth"
                      ? (v149 = *((unsigned int *)v104 + 2) == (unint64_t)*(unsigned int *)"auth")
                      : (v149 = 0),
                        !v149))
                  {
                    if (((_DWORD)v53[4] & 0xFu) - 5 < 4 || ((1 << ((_DWORD)v53[4] & 0xF)) & 0x614) == 0)
                    {
                      v106 = (llvm::Module *)v53[5];
                      if ((!v106 || !llvm::Module::getSemanticInterposition(v106) || (*((_BYTE *)v53 + 33) & 0x40) != 0)
                        && !byte_1ED80D108)
                      {
                        if (((_DWORD)v53[4] & 0xC0) == 0x80)
                        {
                          v176 = 0;
                          v142 = sub_1C6179BF0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)v53, &v176);
                          v143 = *(_DWORD *)(a1 + 16);
                          if (v142)
                            v144 = (void **)v176;
                          else
                            v144 = (void **)(*(_QWORD *)a1 + 48 * v143);
                          if ((void **)(*(_QWORD *)a1 + 48 * v143) != v144)
                            sub_1C629BB10((int32x2_t *)a1, (uint64_t)v144);
                          v145 = (llvm::UndefValue *)v101;
                          if (*(uint64_t ***)v101 != *v53)
                            v145 = sub_1C537D3B8((llvm *)0x31, v101, (llvm::Constant *)*v53, 0);
                          sub_1C571D018(a1, (uint64_t)v53[1]);
                          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v53, v145, (llvm::Value *)1);
                        }
                        else
                        {
                          v107 = (llvm::UndefValue *)v101;
                          if (*(uint64_t ***)v101 != *v53)
                            v107 = sub_1C537D3B8((llvm *)0x31, v101, (llvm::Constant *)*v53, 0);
                          v108 = v53[1];
                          if (v108)
                          {
                            v109 = (llvm::UndefValue *)((char *)v107 + 8);
                            do
                            {
                              v110 = (llvm::UndefValue **)v108;
                              v111 = v108 + 1;
                              v108 = (uint64_t **)v108[1];
                              v112 = v111[2];
                              v113 = *(unsigned __int8 *)(v112 + 16);
                              if (v113 >= 0x1C)
                              {
                                v114 = v113 - 33;
                                v97 = v114 > 0x33;
                                v115 = (1 << v114) & 0x8000000000041;
                                v116 = v97 || v115 == 0;
                                if (!v116 && (llvm::UndefValue **)(v112 - 32) == v110)
                                {
                                  sub_1C571DE50(a1, *(_QWORD *)(*(_QWORD *)(v112 + 40) + 56));
                                  if (*v110)
                                  {
                                    *(_QWORD *)v110[2] = v110[1];
                                    v117 = v110[1];
                                    if (v117)
                                      *((_QWORD *)v117 + 2) = v110[2];
                                  }
                                  *v110 = v107;
                                  if (v107)
                                  {
                                    v118 = *(_QWORD *)v109;
                                    *v111 = *(_QWORD *)v109;
                                    if (v118)
                                      *(_QWORD *)(v118 + 16) = v111;
                                    v110[2] = v109;
                                    *(_QWORD *)v109 = v110;
                                  }
                                }
                              }
                            }
                            while (v108);
                          }
                        }
                      }
                    }
                  }
                  v119 = (_DWORD)v53[4] & 0xF;
                  v97 = v119 > 8;
                  v120 = (1 << v119) & 0x18E;
                  v121 = v97 || v120 == 0;
                  if (v121 || v53[1] || byte_1ED80D108)
                    sub_1C571D068(a1, v169, (uint64_t)v53);
                  else
                    llvm::Function::eraseFromParent((llvm::Function *)v53);
                  v70 = 1;
                  v49 = v170;
                }
                goto LABEL_124;
              }
            }
          }
LABEL_164:
          v98 = v58[4];
          v176 = 0;
          if (sub_1C49F21C0(*(_QWORD *)(a1 + 128), *(_DWORD *)(a1 + 144), v98, &v176))
            v99 = (_QWORD *)v176;
          else
            v99 = (_QWORD *)(*(_QWORD *)(a1 + 128) + 16 * *(unsigned int *)(a1 + 144));
          v100 = (uint64_t *)v99[1];
          *v99 = -8192;
          *(int32x2_t *)(a1 + 136) = vadd_s32(*(int32x2_t *)(a1 + 136), (int32x2_t)0x1FFFFFFFFLL);
          v174 = v53;
          v175 = v100;
          sub_1C571CDA0((uint64_t)&v176, (uint64_t)v171, (uint64_t *)&v174);
          v58[4] = (uint64_t)v53;
          v53 = (uint64_t ***)v98;
          goto LABEL_168;
        }
        v64 = (llvm::Module *)v53[5];
        if (!v64 || !llvm::Module::getSemanticInterposition(v64))
        {
          if (!v62)
            goto LABEL_130;
          goto LABEL_114;
        }
        if (((v62 ^ ((*((_BYTE *)v53 + 33) & 0x40) == 0)) & 1) != 0)
          goto LABEL_114;
LABEL_130:
        v71 = ((_DWORD)v59[4] & 0xF) - 7;
        if (v71 < 2 != ((_DWORD)v53[4] & 0xFu) - 7 < 2)
        {
          if (v71 >= 2)
            goto LABEL_168;
          goto LABEL_164;
        }
        if ((*((_BYTE *)v59 + 23) & 0x10) != 0)
        {
          v72 = ***v59;
          v73 = *(_QWORD *)(v72 + 152);
          v74 = *(unsigned int *)(v72 + 168);
          if (!(_DWORD)v74)
            goto LABEL_140;
          LODWORD(v75) = (v74 - 1) & ((v59 >> 4) ^ (v59 >> 9));
          v76 = (uint64_t ****)(v73 + 16 * v75);
          v77 = *v76;
          if (*v76 != v59)
          {
            v78 = 1;
            while (v77 != (uint64_t ***)-4096)
            {
              v79 = v75 + v78++;
              v75 = v79 & (v74 - 1);
              v77 = *(uint64_t ****)(v73 + 16 * v75);
              if (v77 == v59)
              {
                v76 = (uint64_t ****)(v73 + 16 * v75);
                goto LABEL_141;
              }
            }
LABEL_140:
            v76 = (uint64_t ****)(v73 + 16 * v74);
          }
LABEL_141:
          v80 = v76[1];
          v83 = (size_t)*v80;
          v81 = (char *)(v80 + 2);
          v82 = v83;
        }
        else
        {
          v82 = 0;
          v81 = &byte_1C871356D;
        }
        if ((*((_BYTE *)v53 + 23) & 0x10) != 0)
        {
          v84 = ***v53;
          v85 = *(_QWORD *)(v84 + 152);
          v86 = *(unsigned int *)(v84 + 168);
          if (!(_DWORD)v86)
            goto LABEL_149;
          LODWORD(v87) = (v86 - 1) & ((v53 >> 4) ^ (v53 >> 9));
          v88 = (uint64_t ****)(v85 + 16 * v87);
          v89 = *v88;
          if (*v88 != v53)
          {
            v90 = 1;
            while (v89 != (uint64_t ***)-4096)
            {
              v91 = v87 + v90++;
              v87 = v91 & (v86 - 1);
              v89 = *(uint64_t ****)(v85 + 16 * v87);
              if (v89 == v53)
              {
                v88 = (uint64_t ****)(v85 + 16 * v87);
                goto LABEL_150;
              }
            }
LABEL_149:
            v88 = (uint64_t ****)(v85 + 16 * v86);
          }
LABEL_150:
          v92 = (size_t *)v88[1];
          v94 = *v92;
          v13 = (llvm::Function *)(v92 + 2);
          v93 = v94;
        }
        else
        {
          v93 = 0;
          v13 = (llvm::Function *)&byte_1C871356D;
        }
        if (v93 >= v82)
          v95 = v82;
        else
          v95 = v93;
        if (v95)
        {
          v96 = memcmp(v81, v13, v95);
          if (v96 < 0)
            goto LABEL_168;
          v97 = v96 || v82 > v93;
          if (!v97)
            goto LABEL_168;
        }
        else if (v82 <= v93)
        {
          goto LABEL_168;
        }
        goto LABEL_164;
      }
LABEL_125:
      v51 += 24;
    }
    v176 = (unint64_t)v173;
    sub_1C4D99900((void ***)&v176);
    v51 = *(_QWORD *)(a1 + 72);
    v50 = *(_QWORD *)(a1 + 80);
  }
  while (v51 != v50);
  sub_1C49F3440(*(_QWORD **)(a1 + 104));
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = v172;
  v151 = *(_DWORD *)(a1 + 136);
  if (v151)
  {
    v152 = *(unsigned int *)(a1 + 144);
    if (v152 <= 4 * v151 || v152 < 0x41)
      goto LABEL_299;
    v153 = (_QWORD *)*v171;
    v154 = 1 << (33 - __clz(v151 - 1));
    if (v154 <= 64)
      v155 = 64;
    else
      v155 = v154;
    if (v155 == (_DWORD)v152)
    {
      *(_QWORD *)(a1 + 136) = 0;
      v156 = 16 * v152;
      do
      {
        *v153 = -4096;
        v153 += 2;
        v156 -= 16;
      }
      while (v156);
    }
    else
    {
      MEMORY[0x1CAA32FB4](v153, 8);
      v160 = (4 * v155 / 3u + 1) | ((unint64_t)(4 * v155 / 3u + 1) >> 1);
      v161 = v160 | (v160 >> 2) | ((v160 | (v160 >> 2)) >> 4);
      LODWORD(v161) = (((v161 | (v161 >> 8)) >> 16) | v161 | (v161 >> 8)) + 1;
      *(_DWORD *)(a1 + 144) = v161;
      v162 = operator new(16 * v161, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 128) = v162;
      *(_QWORD *)(a1 + 136) = 0;
      v163 = *(unsigned int *)(a1 + 144);
      if ((_DWORD)v163)
      {
        v164 = 16 * v163;
        do
        {
          *v162 = -4096;
          v162 += 2;
          v164 -= 16;
        }
        while (v164);
      }
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 140))
      goto LABEL_303;
    LODWORD(v152) = *(_DWORD *)(a1 + 144);
    if (v152 > 0x40)
    {
      MEMORY[0x1CAA32FB4](*v171, 8);
      *v171 = 0;
      *(_QWORD *)(a1 + 136) = 0;
      *(_DWORD *)(a1 + 144) = 0;
      goto LABEL_303;
    }
LABEL_299:
    if ((_DWORD)v152)
    {
      v157 = (_QWORD *)*v171;
      v158 = 16 * v152;
      do
      {
        *v157 = -4096;
        v157 += 2;
        v158 -= 16;
      }
      while (v158);
    }
    *(_QWORD *)(a1 + 136) = 0;
  }
LABEL_303:
  sub_1C629BBAC((char *)a1);
  if (*(_BYTE *)(a1 + 48))
  {
    sub_1C4E43068(a1 + 24);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
    *(_BYTE *)(a1 + 48) = 0;
  }
  if (__p)
    operator delete(__p);
  return v49 & 1;
}

_QWORD *sub_1C571C0B4(_QWORD *a1)
{
  void **v3;

  MEMORY[0x1CAA32FB4](a1[16], 8);
  sub_1C49F3440((_QWORD *)a1[13]);
  v3 = (void **)(a1 + 9);
  sub_1C4D99900(&v3);
  if (*((_BYTE *)a1 + 48))
  {
    sub_1C4E43068((uint64_t)(a1 + 3));
    MEMORY[0x1CAA32FB4](a1[3], 8);
    *((_BYTE *)a1 + 48) = 0;
  }
  sub_1C629BA18(a1);
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

uint64_t sub_1C571C138()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C571AF68(v0);
}

void sub_1C571C164(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C571C188(llvm::ModulePass *a1, uint64_t **a2)
{
  uint64_t v3;
  __n128 v5;
  _QWORD v6[3];
  _QWORD v7[3];
  char v8;
  _QWORD *v9[10];
  void **v10;

  if ((llvm::ModulePass::skipModule(a1, a2) & 1) != 0)
    return 0;
  sub_1C571B030((uint64_t)v6);
  v3 = sub_1C571B0D0((uint64_t)v6, (llvm::Function *)a2, v5);
  MEMORY[0x1CAA32FB4](v9[7], 8);
  sub_1C49F3440(v9[4]);
  v10 = (void **)v9;
  sub_1C4D99900(&v10);
  if (v8)
  {
    sub_1C4E43068((uint64_t)v7);
    MEMORY[0x1CAA32FB4](v7[0], 8);
    v8 = 0;
  }
  sub_1C629BA18(v6);
  MEMORY[0x1CAA32FB4](v6[0], 8);
  return v3;
}

void sub_1C571C238(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, uint64_t a5, __n128 a6)
{
  __n128 *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  __n128 *v18;
  uint64_t v19;
  __n128 *v20;
  __n128 *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 *v28;
  __n128 v29;
  __n128 *v30;
  char *v31;
  __n128 *v32;
  unint64_t v33;
  __n128 *v34;
  unint64_t v35;
  uint64_t v36;
  __n128 *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __n128 *v41;
  uint64_t v42;
  unint64_t v43;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = a2[-1].n128_u64[0];
      v9 = a1->n128_u64[0];
      if (v8 < a1->n128_u64[0])
      {
        v10 = a1->n128_u64[1];
        v11 = a2[-1].n128_u64[1];
        a1->n128_u64[0] = v8;
        a1->n128_u64[1] = v11;
        a2[-1].n128_u64[0] = v9;
        a2[-1].n128_u64[1] = v10;
      }
    }
    else if ((uint64_t)a3 <= 0)
    {
      if (a1 != a2)
      {
        v18 = a1 + 1;
        if (&a1[1] != a2)
        {
          v19 = 0;
          v20 = a1;
          do
          {
            v21 = v18;
            v22 = v18->n128_u64[0];
            v23 = v20->n128_u64[0];
            if (v22 < v20->n128_u64[0])
            {
              v24 = v20[1].n128_u64[1];
              v25 = v19;
              while (1)
              {
                v26 = (char *)a1 + v25;
                v27 = *(uint64_t *)((char *)&a1->n128_i64[1] + v25);
                *((_QWORD *)v26 + 2) = v23;
                *((_QWORD *)v26 + 3) = v27;
                if (!v25)
                  break;
                v23 = *((_QWORD *)v26 - 2);
                v25 -= 16;
                if (v22 >= v23)
                {
                  v28 = (__n128 *)((char *)a1 + v25 + 16);
                  goto LABEL_18;
                }
              }
              v28 = a1;
LABEL_18:
              v28->n128_u64[0] = v22;
              v28->n128_u64[1] = v24;
            }
            v18 = v21 + 1;
            v19 += 16;
            v20 = v21;
          }
          while (&v21[1] != a2);
        }
      }
    }
    else
    {
      v14 = (char *)a4;
      v15 = a3 >> 1;
      v16 = &a1[a3 >> 1];
      v17 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v29 = sub_1C571C464(a1, v16, v17, a4, a6);
        v30 = (__n128 *)&v14[16 * v15];
        sub_1C571C464(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v30, v29);
        v31 = &v14[16 * a3];
        v32 = v30;
        while (v32 != (__n128 *)v31)
        {
          v33 = v32->n128_u64[0];
          if (v32->n128_u64[0] < *(_QWORD *)v14)
          {
            v34 = v32;
          }
          else
          {
            v33 = *(_QWORD *)v14;
            v34 = (__n128 *)v14;
          }
          v35 = v34->n128_u64[1];
          if (v32->n128_u64[0] < *(_QWORD *)v14)
            ++v32;
          else
            v14 += 16;
          v7->n128_u64[0] = v33;
          v7->n128_u64[1] = v35;
          ++v7;
          if (v14 == (char *)v30)
          {
            if (v32 != (__n128 *)v31)
            {
              v36 = 0;
              do
              {
                v37 = &v7[v36];
                v39 = v32[v36].n128_u64[1];
                v38 = (uint64_t)&v32[v36 + 1];
                v37->n128_u64[0] = v32[v36].n128_u64[0];
                v37->n128_u64[1] = v39;
                ++v36;
              }
              while ((char *)v38 != v31);
            }
            return;
          }
        }
        if (v14 != (char *)v30)
        {
          v40 = 0;
          do
          {
            v41 = &v7[v40 / 0x10];
            v43 = *(_QWORD *)&v14[v40 + 8];
            v42 = (uint64_t)&v14[v40 + 16];
            v41->n128_u64[0] = *(_QWORD *)&v14[v40];
            v41->n128_u64[1] = v43;
            v40 += 16;
          }
          while ((__n128 *)v42 != v30);
        }
      }
      else
      {
        sub_1C571C238(a1, v16, v17, a4, a5);
        sub_1C571C238(&v7[a3 >> 1], a2, a3 - (a3 >> 1), v14, a5);
        sub_1C571C664((char *)v7, (char *)&v7[a3 >> 1], (char *)a2, a3 >> 1, a3 - (a3 >> 1), v14, a5);
      }
    }
  }
}

__n128 sub_1C571C464(__n128 *a1, __n128 *a2, unint64_t a3, __n128 *a4, __n128 result)
{
  __n128 *v5;
  __n128 *v8;
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __n128 *v21;
  __n128 *v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;

  if (a3)
  {
    v5 = a4;
    v8 = a1;
    if (a3 == 2)
    {
      v9 = a2 - 1;
      if (a2[-1].n128_u64[0] >= a1->n128_u64[0])
      {
        *a4 = *a1;
        result = *v9;
      }
      else
      {
        *a4 = *v9;
        result = *a1;
      }
      a4[1] = result;
    }
    else if (a3 == 1)
    {
      result = *a1;
      *a4 = *a1;
    }
    else if ((uint64_t)a3 > 8)
    {
      v21 = &a1[a3 >> 1];
      sub_1C571C238(a1, v21, a3 >> 1, a4, a3 >> 1);
      sub_1C571C238(&v8[a3 >> 1], a2, a3 - (a3 >> 1), &v5[a3 >> 1], a3 - (a3 >> 1));
      v22 = &v8[a3 >> 1];
      while (v22 != a2)
      {
        if (v22->n128_u64[0] >= v8->n128_u64[0])
        {
          v24 = *v8++;
          result = v24;
        }
        else
        {
          v23 = *v22++;
          result = v23;
        }
        *v5++ = result;
        if (v8 == v21)
        {
          if (v22 != a2)
          {
            v25 = 0;
            do
            {
              result = v22[v25];
              v5[v25++] = result;
            }
            while (&v22[v25] != a2);
          }
          return result;
        }
      }
      if (v8 != v21)
      {
        v26 = 0;
        do
        {
          result = v8[v26];
          v5[v26++] = result;
        }
        while (&v8[v26] != v21);
      }
    }
    else if (a1 != a2)
    {
      result = *a1;
      *a4 = *a1;
      v10 = a1 + 1;
      if (&a1[1] != a2)
      {
        v11 = 0;
        v12 = a4;
        v13 = a4;
        do
        {
          v14 = v10;
          v15 = v13->n128_u64[0];
          ++v13;
          if (v10->n128_u64[0] >= v15)
          {
            result = *v10;
            *v13 = *v10;
          }
          else
          {
            result = *v12;
            *v13 = *v12;
            v16 = a4;
            if (v12 != a4)
            {
              v17 = v11;
              while (1)
              {
                v16 = (__n128 *)((char *)a4 + v17);
                v18 = *(unint64_t *)((char *)a4[-1].n128_u64 + v17);
                if (v14->n128_u64[0] >= v18)
                  break;
                v19 = v16[-1].n128_i64[1];
                v16->n128_u64[0] = v18;
                v16->n128_u64[1] = v19;
                v17 -= 16;
                if (!v17)
                {
                  v16 = a4;
                  break;
                }
              }
            }
            v20 = v8[1].n128_u64[1];
            v16->n128_u64[0] = v14->n128_u64[0];
            v16->n128_u64[1] = v20;
          }
          v10 = v14 + 1;
          v11 += 16;
          v12 = v13;
          v8 = v14;
        }
        while (&v14[1] != a2);
      }
    }
  }
  return result;
}

char *sub_1C571C664(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  BOOL v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  BOOL v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;

  if (a5)
  {
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v10 = 0;
      v11 = *(_QWORD *)a2;
      v12 = -a4;
      while (1)
      {
        v13 = *(_QWORD *)&result[v10];
        if (v11 < v13)
          break;
        v10 += 16;
        v53 = __CFADD__(v12++, 1);
        if (v53)
          return result;
      }
      if (-v12 >= a5)
      {
        if (v12 == -1)
        {
          v63 = &result[v10];
          v64 = *((_QWORD *)v63 + 1);
          v65 = *((_QWORD *)a2 + 1);
          *(_QWORD *)v63 = v11;
          *((_QWORD *)v63 + 1) = v65;
          *(_QWORD *)a2 = v13;
          *((_QWORD *)a2 + 1) = v64;
          return result;
        }
        if (v12 <= 0)
          v23 = -v12;
        else
          v23 = 1 - v12;
        v24 = v23 >> 1;
        v18 = &result[16 * (v23 >> 1) + v10];
        v16 = a3;
        if (a3 != a2)
        {
          v25 = (a3 - a2) >> 4;
          v16 = a2;
          do
          {
            v26 = v25 >> 1;
            v27 = &v16[16 * (v25 >> 1)];
            v29 = *(_QWORD *)v27;
            v28 = v27 + 16;
            v25 += ~(v25 >> 1);
            if (v29 < *(_QWORD *)v18)
              v16 = v28;
            else
              v25 = v26;
          }
          while (v25);
        }
        v15 = (v16 - a2) >> 4;
      }
      else
      {
        if (a5 >= 0)
          v14 = a5;
        else
          v14 = a5 + 1;
        v15 = v14 >> 1;
        v16 = &a2[16 * (v14 >> 1)];
        if (&result[v10] == a2)
        {
          v18 = a2;
        }
        else
        {
          v17 = (a2 - result - v10) >> 4;
          v18 = &result[v10];
          do
          {
            v19 = v17 >> 1;
            v20 = &v18[16 * (v17 >> 1)];
            v22 = *(_QWORD *)v20;
            v21 = v20 + 16;
            v17 += ~(v17 >> 1);
            if (*(_QWORD *)v16 < v22)
              v17 = v19;
            else
              v18 = v21;
          }
          while (v17);
        }
        v24 = (v18 - result - v10) >> 4;
      }
      v30 = v16;
      if (v18 != a2)
      {
        v30 = v18;
        if (a2 != v16)
        {
          v31 = *(_QWORD *)v18;
          v32 = *((_QWORD *)v18 + 1);
          v33 = *((_QWORD *)a2 + 1);
          *(_QWORD *)v18 = v11;
          *((_QWORD *)v18 + 1) = v33;
          *(_QWORD *)a2 = v31;
          *((_QWORD *)a2 + 1) = v32;
          v30 = v18 + 16;
          for (i = a2 + 16; i != v16; i += 16)
          {
            if (v30 == a2)
              a2 = i;
            v35 = *(_QWORD *)v30;
            v36 = *((_QWORD *)v30 + 1);
            v37 = *((_QWORD *)i + 1);
            *(_QWORD *)v30 = *(_QWORD *)i;
            *((_QWORD *)v30 + 1) = v37;
            v30 += 16;
            *(_QWORD *)i = v35;
            *((_QWORD *)i + 1) = v36;
          }
          if (v30 != a2)
          {
            v38 = v30;
            v39 = a2;
            do
            {
              while (1)
              {
                v40 = *(_QWORD *)v38;
                v41 = *((_QWORD *)v38 + 1);
                v42 = *((_QWORD *)v39 + 1);
                *(_QWORD *)v38 = *(_QWORD *)v39;
                *((_QWORD *)v38 + 1) = v42;
                v38 += 16;
                *(_QWORD *)v39 = v40;
                *((_QWORD *)v39 + 1) = v41;
                v39 += 16;
                if (v39 == v16)
                  break;
                if (v38 == a2)
                  a2 = v39;
              }
              v39 = a2;
            }
            while (v38 != a2);
          }
        }
      }
      a4 = -(v24 + v12);
      v43 = a5 - v15;
      if (v24 + v15 >= a5 - (v24 + v15) - v12)
      {
        v46 = v16;
        v47 = &result[v10];
        sub_1C571C664(v30, v46);
        result = v47;
        v16 = v18;
        v43 = v15;
        a4 = v24;
        a3 = v30;
      }
      else
      {
        v44 = v18;
        v45 = a3;
        sub_1C571C664(&result[v10], v44);
        a3 = v45;
        result = v30;
      }
      a5 = v43;
      a2 = v16;
      if (!v43)
        return result;
    }
    if (a4 <= a5)
    {
      if (result != a2)
      {
        v56 = 0;
        do
        {
          *(_OWORD *)&a6[v56] = *(_OWORD *)&result[v56];
          v56 += 16;
        }
        while (&result[v56] != a2);
        if (v56)
        {
          v57 = &a6[v56];
          v58 = (uint64_t)&a6[v56 - 16];
          while (a2 != a3)
          {
            v59 = *(_QWORD *)a2;
            v60 = *(_QWORD *)a2 >= *(_QWORD *)a6;
            if (*(_QWORD *)a2 < *(_QWORD *)a6)
            {
              v61 = a2;
            }
            else
            {
              v59 = *(_QWORD *)a6;
              v61 = a6;
            }
            if (*(_QWORD *)a2 < *(_QWORD *)a6)
              a2 += 16;
            v62 = *((_QWORD *)v61 + 1);
            if (v60)
              a6 += 16;
            *(_QWORD *)result = v59;
            *((_QWORD *)result + 1) = v62;
            result += 16;
            if (v57 == a6)
              return result;
          }
          if (v57 != a6)
          {
            v69 = 0;
            do
            {
              v70 = &result[v69];
              v71 = &a6[v69];
              v72 = *(_QWORD *)&a6[v69 + 8];
              *(_QWORD *)v70 = *(_QWORD *)&a6[v69];
              *((_QWORD *)v70 + 1) = v72;
              v69 += 16;
            }
            while ((char *)v58 != v71);
          }
        }
      }
    }
    else if (a2 != a3)
    {
      v48 = 0;
      do
      {
        *(_OWORD *)&a6[v48] = *(_OWORD *)&a2[v48];
        v48 += 16;
      }
      while (&a2[v48] != a3);
      if (v48)
      {
        v49 = &a6[v48];
        v50 = a3 - 8;
        while (a2 != result)
        {
          v51 = *((_QWORD *)a2 - 2);
          v52 = *((_QWORD *)v49 - 2);
          v53 = v52 >= v51;
          if (v52 < v51)
          {
            v54 = a2;
          }
          else
          {
            v51 = *((_QWORD *)v49 - 2);
            v54 = v49;
          }
          if (!v53)
            a2 -= 16;
          v55 = *((_QWORD *)v54 - 1);
          if (v53)
            v49 -= 16;
          *((_QWORD *)v50 - 1) = v51;
          *(_QWORD *)v50 = v55;
          v50 -= 16;
          if (v49 == a6)
            return result;
        }
        if (v49 != a6)
        {
          v66 = 0;
          do
          {
            v67 = &v50[v66];
            v68 = *(_QWORD *)&v49[v66 - 8];
            *((_QWORD *)v67 - 1) = *(_QWORD *)&v49[v66 - 16];
            *(_QWORD *)v67 = v68;
            v66 -= 16;
          }
          while (&v49[v66] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C571CA4C(uint64_t *a1, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  _QWORD v14[5];

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v14[4] = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (unint64_t *)&v7[24 * v2];
  v14[0] = v7;
  v14[1] = v8;
  v14[3] = &v7[24 * v6];
  *v8 = 6;
  v8[1] = 0;
  v9 = a2[2];
  v8[2] = v9;
  if (v9 != -8192 && v9 != -4096)
  {
    if (v9)
    {
      v10 = *a2 & 0xFFFFFFFFFFFFFFF8;
      v8[1] = *(_QWORD *)v10;
      *(_QWORD *)v10 = v8;
      *v8 = v10 | 6;
      v11 = (unint64_t *)v8[1];
      if (v11)
        *v11 = *v11 & 7 | (unint64_t)(v8 + 1);
    }
  }
  v14[2] = v8 + 3;
  sub_1C571CB9C(a1, v14);
  v12 = a1[1];
  sub_1C571CC6C((uint64_t)v14);
  return v12;
}

uint64_t *sub_1C571CB9C(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_QWORD *)(v4 + v5 - 24) = 6;
      v7 = (unint64_t *)(v4 + v5 - 24);
      v8 = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = v8;
      if (v8 != -8192 && v8 != -4096 && v8 != 0)
      {
        v10 = *(_QWORD *)(v2 + v5 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v6 - 16) = *(_QWORD *)v10;
        *(_QWORD *)v10 = v7;
        *v7 = v10 | 6;
        v11 = *(uint64_t **)(v6 - 16);
        if (v11)
          *v11 = *v11 & 7 | (v4 - 16 + v5);
      }
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v12 = *result;
  *result = v4;
  a2[1] = v12;
  v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C571CC6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int32x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  void *v19;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 != v2)
  {
    do
    {
      v4 = v3 - 24;
      *(_QWORD *)(a1 + 16) = v3 - 24;
      v5 = *(_QWORD *)(v3 - 8);
      if (v5 != -8192 && v5 != -4096 && v5 != 0)
      {
        v7 = *(_QWORD *)(v3 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v7 = *(_QWORD *)(v3 - 16);
        v8 = *(unint64_t **)(v3 - 16);
        if (v8)
        {
          *v8 = *v8 & 7 | v7;
        }
        else
        {
          v9 = *(_QWORD *)(v3 - 8);
          v10 = ***(int32x2_t ****)v9;
          v11 = (unint64_t)v10[303];
          if (v11 <= v7)
          {
            v12 = v10[305].u32[0];
            if (v11 + 16 * v12 > v7)
            {
              v13 = v12 - 1;
              LODWORD(v14) = v13 & ((v9 >> 4) ^ (v9 >> 9));
              v15 = (uint64_t *)(v11 + 16 * v14);
              v16 = *v15;
              if (v9 == *v15)
              {
LABEL_15:
                *v15 = -8192;
                v10[304] = vadd_s32(v10[304], (int32x2_t)0x1FFFFFFFFLL);
                v9 = *(_QWORD *)(v3 - 8);
              }
              else
              {
                v17 = 1;
                while (v16 != -4096)
                {
                  v18 = v14 + v17++;
                  v14 = v18 & v13;
                  v16 = *(_QWORD *)(v11 + 16 * v14);
                  if (v9 == v16)
                  {
                    v15 = (uint64_t *)(v11 + 16 * v14);
                    goto LABEL_15;
                  }
                }
              }
              *(_BYTE *)(v9 + 17) &= ~1u;
            }
          }
        }
        v4 = *(_QWORD *)(a1 + 16);
      }
      v3 = v4;
    }
    while (v4 != v2);
  }
  v19 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v19);
  return a1;
}

uint64_t sub_1C571CDA0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;

  v28 = 0;
  result = sub_1C49F21C0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v28);
  v7 = v28;
  if ((result & 1) != 0)
  {
    v8 = 0;
    goto LABEL_8;
  }
  v29 = v28;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(unsigned int *)(a2 + 16);
  if (4 * v9 + 4 >= (3 * v10))
  {
    v11 = 2 * v10;
    goto LABEL_10;
  }
  v11 = *(_DWORD *)(a2 + 16);
  if ((int)v10 + ~v9 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_10:
    v13 = *(_QWORD *)a2;
    v14 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
    v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
    if ((v16 + 1) > 0x40)
      v17 = v16 + 1;
    else
      v17 = 64;
    *(_DWORD *)(a2 + 16) = v17;
    v18 = operator new(16 * v17, (std::align_val_t)8uLL);
    *(_QWORD *)a2 = v18;
    if (v13)
    {
      *(_QWORD *)(a2 + 8) = 0;
      v19 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v19)
      {
        v20 = 16 * v19;
        do
        {
          *v18 = -4096;
          v18 += 2;
          v20 -= 16;
        }
        while (v20);
      }
      if ((_DWORD)v10)
      {
        v21 = 0;
        v22 = (uint64_t *)(v13 + 8);
        v23 = 16 * v10;
        do
        {
          v24 = *(v22 - 1);
          if ((v24 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v30 = 0;
            sub_1C49F21C0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), v24, &v30);
            v25 = v30;
            *v30 = v24;
            v25[1] = *v22;
            *(_DWORD *)(a2 + 8) = ++v21;
          }
          v22 += 2;
          v23 -= 16;
        }
        while (v23);
      }
      MEMORY[0x1CAA32FB4](v13, 8);
      v18 = *(_QWORD **)a2;
      LODWORD(v26) = *(_DWORD *)(a2 + 16);
    }
    else
    {
      *(_QWORD *)(a2 + 8) = 0;
      v26 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v26)
      {
        v27 = 0;
        do
        {
          v18[v27] = -4096;
          v27 += 2;
        }
        while (2 * v26 != v27);
      }
    }
    result = sub_1C49F21C0((uint64_t)v18, v26, *a3, &v29);
    v9 = *(_DWORD *)(a2 + 8);
    v7 = v29;
  }
  *(_DWORD *)(a2 + 8) = v9 + 1;
  if (*v7 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v7 = *a3;
  v7[1] = a3[1];
  v8 = 1;
LABEL_8:
  v12 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

BOOL sub_1C571CFB0(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  _BOOL8 v5;
  uint64_t v7;
  _QWORD v8[4];
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if (a3 != a5)
    return a3 < a5;
  v7 = *a1;
  v8[0] = a2;
  v8[1] = a4;
  v8[2] = 0;
  v8[3] = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = v7;
  v5 = llvm::FunctionComparator::compare((llvm::FunctionComparator *)v8) == -1;
  sub_1C629BA74((uint64_t)v8);
  return v5;
}

uint64_t sub_1C571D018(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v2 + 24);
      if (v4)
        v5 = *(unsigned __int8 *)(v4 + 16) >= 0x1Cu;
      else
        v5 = 0;
      if (v5)
        result = sub_1C571DE50(v3, *(_QWORD *)(*(_QWORD *)(v4 + 40) + 56));
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
  }
  return result;
}

void sub_1C571D068(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ***v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  llvm::PointerType *v14;
  char v15;
  llvm::Type *v16;
  uint64_t v17;
  char *v18;
  llvm::Function *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t **v23;
  unsigned int v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  llvm::Function *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t ***v33;
  unsigned int v34;
  unsigned __int8 *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t **v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  __int16 v42;
  uint64_t v43;
  unsigned __int8 **v44;
  unsigned __int8 *v45;
  unsigned __int8 **v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  _QWORD *v52;
  _QWORD ***v53;
  _QWORD *v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t ***v61;
  uint64_t *v62;
  uint64_t *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  int v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD **v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  llvm::BasicBlock *v83;
  char *j;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  llvm::Constant *v88;
  llvm::UndefValue *v89;
  llvm::PointerType *v90;
  llvm::Type *v91;
  llvm::Value *v92;
  llvm::GlobalValue *v93;
  char v94;
  char v95;
  BOOL v96;
  int v97;
  unint64_t v98;
  char v99;
  unint64_t v100;
  unsigned int v101;
  unsigned int v102;
  int v103;
  int v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  unsigned __int8 *Impl;
  uint64_t v110;
  uint64_t *v111;
  unsigned __int8 *v112;
  unsigned __int8 **v113;
  unsigned __int8 *v114;
  unsigned __int8 **v115;
  unsigned __int8 *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _BOOL4 v124;
  _BOOL4 v125;
  _QWORD *v126;
  unsigned __int8 *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t i;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  unsigned __int8 *v137;
  char *v138;
  char *v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t *v142;
  uint64_t *v143;
  _QWORD *v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t ***v154;
  uint64_t ***v155;
  uint64_t **v156;
  uint64_t **v157;
  char hasExternalWeakLinkage;
  char *__p;
  unsigned __int8 *v163;
  unsigned __int8 *v164;
  unsigned __int8 *v165;
  unsigned __int8 *v166[4];
  __int16 v167;
  void *v168;
  uint64_t v169;
  _QWORD v170[2];
  __int16 v171;
  uint64_t *v172[2];
  _QWORD v173[10];
  int v174;
  __int16 v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  _QWORD v180[3];

  v3 = (uint64_t ***)a3;
  v5 = a1;
  v180[1] = *MEMORY[0x1E0C80C00];
  if (byte_1ED80D1C8)
  {
    v6 = *(_DWORD *)(a3 + 32);
    if ((v6 & 0xC0) == 0x80)
    {
      v88 = *(llvm::Constant **)a3;
      if (*(uint64_t ***)a2 == *v3)
      {
        v89 = (llvm::UndefValue *)a2;
      }
      else
      {
        v89 = sub_1C537D3B8((llvm *)0x31, a2, v88, 0);
        v88 = (llvm::Constant *)*v3;
        v6 = *((_DWORD *)v3 + 8);
      }
      v90 = (llvm::PointerType *)v3[3];
      v91 = (llvm::Type *)(*((_DWORD *)v88 + 2) >> 8);
      v171 = 257;
      v92 = (llvm::Value *)llvm::GlobalAlias::create(v90, v91, v6 & 0xF, (uint64_t)&v168, (uint64_t)v89, (uint64_t)v3[5]);
      v93 = v92;
      v94 = *((_WORD *)v3 + 17);
      v95 = (v94 & 0x3F) - 1;
      v96 = (v94 & 0x3F) == 0;
      v97 = *(_DWORD *)(a2 + 32);
      if (v96)
        v95 = 0;
      v98 = 1 << v95;
      if (v96)
        v98 = 0;
      v99 = (BYTE2(v97) & 0x3F) - 1;
      if ((v97 & 0x3F0000) == 0)
        v99 = 0;
      v100 = 1 << v99;
      if ((v97 & 0x3F0000) == 0)
        v100 = 0;
      if (v100 > v98)
        v98 = v100;
      v101 = (__clz(__rbit64(v98)) << 16) + 0x10000;
      if (v98)
        v102 = v101;
      else
        v102 = 0;
      *(_DWORD *)(a2 + 32) = v102 | v97 & 0xFFC0FFFF;
      llvm::Value::takeName(v92, (llvm::Value *)v3);
      v103 = (_DWORD)v3[4] & 0x30;
      v104 = *((_DWORD *)v93 + 8);
      v105 = v104 & 0xFFFFFFCF | v103;
      *((_DWORD *)v93 + 8) = v105;
      if ((v104 & 0xFu) - 7 < 2
        || v103
        && (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v93),
            v105 = *((_DWORD *)v93 + 8),
            (hasExternalWeakLinkage & 1) == 0))
      {
        v105 |= 0x4000u;
      }
      *((_DWORD *)v93 + 8) = v105 & 0xFFFFFF3F | 0x80;
      sub_1C571D018(v5, (uint64_t)v3[1]);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v3, v93, (llvm::Value *)1);
      llvm::Function::eraseFromParent((llvm::Function *)v3);
      return;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 8) > 0xFFu)
    return;
  v7 = 2;
  v8 = a2 + 72;
  do
  {
    v8 = *(_QWORD *)(v8 + 8);
    --v7;
  }
  while (v8 != a2 + 72);
  if (!v7)
  {
    v9 = *(_QWORD *)(a2 + 80);
    v10 = v9 ? v9 - 24 : 0;
    v11 = v10 + 40;
    v12 = -1;
    v13 = v11;
    do
    {
      v13 = *(_QWORD *)(v13 + 8);
      ++v12;
    }
    while (v13 != v11);
    if (v12 < 3)
      return;
  }
  if (!byte_1ED80D108)
  {
    v14 = *(llvm::PointerType **)(a3 + 24);
    v15 = *(_DWORD *)(a3 + 32) & 0xF;
    v16 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a3 + 8) >> 8);
    v171 = 257;
    v17 = *(_QWORD *)(a3 + 40);
    v18 = (char *)operator new(0x80uLL);
    v19 = (llvm::Function *)(v18 + 8);
    *((_DWORD *)v18 + 7) = *((_DWORD *)v18 + 7) & 0x38000000 | 0x40000000;
    *(_QWORD *)v18 = 0;
    v20 = llvm::Function::Function((uint64_t *)v18 + 1, v14, v15, v16, (uint64_t)&v168, v17);
    llvm::GlobalObject::setComdat((llvm::GlobalObject *)v20, (llvm::Comdat *)v3[6]);
    v21 = a2;
    v22 = **(_QWORD ***)a2;
    v171 = 257;
    v23 = (uint64_t **)operator new();
    *v23 = (uint64_t *)(*v22 + 1600);
    v23[1] = 0;
    v24 = *((_DWORD *)v23 + 5) & 0xC0000000;
    *((_DWORD *)v23 + 4) = 22;
    *((_DWORD *)v23 + 5) = v24;
    v23[3] = 0;
    v23[4] = 0;
    v23[5] = (uint64_t *)(v23 + 5);
    v23[6] = (uint64_t *)(v23 + 5);
    v23[7] = 0;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v18 + 80), v23);
    v25 = (uint64_t *)*((_QWORD *)v18 + 10);
    v23[4] = (uint64_t *)(v18 + 80);
    v23[3] = v25;
    v25[1] = (uint64_t)(v23 + 3);
    *((_QWORD *)v18 + 10) = v23 + 3;
    llvm::Value::setName((uint64_t ***)v23, (uint64_t)&v168);
    v26 = 0;
    __p = 0;
    goto LABEL_15;
  }
  v26 = 0;
  v117 = 0;
  v118 = *(_QWORD *)(a3 + 80);
  v23 = (uint64_t **)(v118 - 24);
  if (v118)
    v119 = v118 - 24;
  else
    v119 = 0;
  v169 = 0;
  v170[0] = 0;
  v168 = &v169;
  v120 = (_QWORD *)(v119 + 40);
  v121 = *(_QWORD **)(v119 + 48);
  if (v121 == (_QWORD *)(v119 + 40))
    goto LABEL_232;
  v122 = v119;
  do
  {
    if (v121)
      v123 = (uint64_t)(v121 - 3);
    else
      v123 = 0;
    v124 = sub_1C50A0300(v123);
    if (v121 && v124)
    {
      if (!*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v123 - 32 * (*(_DWORD *)(v123 + 20) & 0x7FFFFFF) + 32) + 24) + 32))
        goto LABEL_192;
LABEL_165:
      v172[0] = (uint64_t *)v123;
      sub_1C47BC21C((uint64_t **)&v168, (unint64_t *)v172, v172);
      goto LABEL_192;
    }
    v125 = sub_1C5021D50(v123);
    if (v121 && v125)
    {
      v126 = (_QWORD *)(v123 - 32 * (*(_DWORD *)(v123 + 20) & 0x7FFFFFF));
      if (!*(_WORD *)(*(_QWORD *)(v126[4] + 24) + 32))
        goto LABEL_192;
      v127 = *(unsigned __int8 **)(*v126 + 24);
      v128 = *v127;
      if (v128 <= 0x22)
      {
        if (v128 == 32)
        {
          v127 = (unsigned __int8 *)**((_QWORD **)v127 + 3);
        }
        else if (((1 << v128) & 0x6FFFFFFF0) != 0)
        {
          goto LABEL_192;
        }
      }
      v129 = *((_QWORD *)v127 + 16);
      if (v129)
      {
        if (*(_BYTE *)(v129 + 16) == 59)
        {
          for (i = *(_QWORD *)(v129 + 8); i; i = *(_QWORD *)(i + 8))
          {
            v131 = *(_QWORD *)(i + 24);
            if (v131)
            {
              if (*(_BYTE *)(v131 + 16) == 61)
              {
                v132 = *(_QWORD *)(v131 - 64);
                if (v132)
                {
                  if (*(_BYTE *)(v132 + 16) == 21)
                  {
                    v172[0] = (uint64_t *)v129;
                    sub_1C47BC21C((uint64_t **)&v168, (unint64_t *)v172, v172);
                    v172[0] = (uint64_t *)v131;
                    sub_1C47BC21C((uint64_t **)&v168, (unint64_t *)v172, v172);
                    v172[0] = (uint64_t *)v123;
                    sub_1C47BC21C((uint64_t **)&v168, (unint64_t *)v172, v172);
                  }
                }
              }
            }
          }
        }
      }
    }
    else if (*(unsigned __int8 *)(v123 + 16) - 29 <= 0xA)
    {
      v133 = (_QWORD *)*v120;
      if ((_QWORD *)*v120 != v120)
      {
        if (v133)
          v134 = v133 - 3;
        else
          v134 = 0;
        if (*((unsigned __int8 *)v134 + 16) - 29 >= 0xB)
          v134 = 0;
        if ((_QWORD *)v123 == v134)
          goto LABEL_165;
      }
    }
LABEL_192:
    v121 = (_QWORD *)v121[1];
  }
  while (v121 != v120);
  v135 = *(_QWORD **)(v122 + 48);
  if (v135 != v120)
  {
    v117 = 0;
    v138 = 0;
    v139 = 0;
    while (1)
    {
      if (v135)
        v140 = v135 - 3;
      else
        v140 = 0;
      v141 = (_QWORD *)v169;
      if (!v169)
        goto LABEL_212;
      v142 = &v169;
      do
      {
        v143 = v142;
        v144 = v141;
        v145 = v141[4];
        v146 = v141 + 1;
        if (v145 >= (unint64_t)v140)
        {
          v146 = v144;
          v142 = v144;
        }
        v141 = (_QWORD *)*v146;
      }
      while (v141);
      if (v142 == &v169)
        goto LABEL_212;
      if (v145 >= (unint64_t)v140)
        v143 = v144;
      if ((unint64_t)v140 < v143[4])
      {
LABEL_212:
        if (v138 >= v139)
        {
          v147 = (v138 - v117) >> 3;
          v148 = v147 + 1;
          if ((unint64_t)(v147 + 1) >> 61)
LABEL_245:
            abort();
          if ((v139 - v117) >> 2 > v148)
            v148 = (v139 - v117) >> 2;
          if ((unint64_t)(v139 - v117) >= 0x7FFFFFFFFFFFFFF8)
            v149 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v149 = v148;
          if (v149)
          {
            if (v149 >> 61)
LABEL_246:
              sub_1C4764EE4();
            v150 = (char *)operator new(8 * v149);
          }
          else
          {
            v150 = 0;
          }
          v151 = &v150[8 * v147];
          *(_QWORD *)v151 = v140;
          v26 = v151 + 8;
          while (v138 != v117)
          {
            v152 = *((_QWORD *)v138 - 1);
            v138 -= 8;
            *((_QWORD *)v151 - 1) = v152;
            v151 -= 8;
          }
          v139 = &v150[8 * v149];
          if (v117)
            operator delete(v117);
          v117 = v151;
          goto LABEL_231;
        }
        *(_QWORD *)v138 = v140;
        v138 += 8;
      }
      v26 = v138;
LABEL_231:
      v135 = (_QWORD *)v135[1];
      v138 = v26;
      if (v135 == v120)
        goto LABEL_232;
    }
  }
  v26 = 0;
  v117 = 0;
LABEL_232:
  __p = v117;
  sub_1C47655E8((uint64_t)&v168, (_QWORD *)v169);
  v153 = (_QWORD *)*v120;
  if ((_QWORD *)*v120 == v120)
  {
    v155 = 0;
  }
  else
  {
    if (v153)
      v154 = (uint64_t ***)(v153 - 3);
    else
      v154 = 0;
    if (*((unsigned __int8 *)v154 + 16) - 29 >= 0xB)
      v155 = 0;
    else
      v155 = v154;
  }
  v5 = a1;
  v21 = a2;
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v155[5] + 5), v155);
  v156 = v155[3];
  v157 = v155[4];
  *v157 = (uint64_t *)v156;
  v156[1] = (uint64_t *)v157;
  v155[3] = 0;
  v155[4] = 0;
  llvm::Value::deleteValue((llvm::Value *)v155);
  v19 = 0;
  v3 = (uint64_t ***)a3;
LABEL_15:
  v27 = **v23;
  v172[0] = v173;
  v172[1] = (uint64_t *)0x200000000;
  v173[6] = v27;
  v173[7] = &v179;
  v173[8] = v180;
  v173[9] = 0;
  v174 = 0;
  v175 = 512;
  v176 = 7;
  v177 = 0;
  v178 = 0;
  v179 = &unk_1E8167888;
  v180[0] = &unk_1E8167A08;
  v173[4] = v23;
  v173[5] = v23 + 5;
  if (byte_1ED80D108)
    v28 = (llvm::Function *)v3;
  else
    v28 = v19;
  v168 = v170;
  v169 = 0x1000000000;
  v29 = *(_QWORD *)(v21 + 24);
  if ((*((_BYTE *)v28 + 18) & 1) == 0)
  {
    v30 = (unsigned __int8 *)*((_QWORD *)v28 + 11);
    goto LABEL_20;
  }
  llvm::Function::BuildLazyArguments(v28);
  v30 = (unsigned __int8 *)*((_QWORD *)v28 + 11);
  if ((*((_WORD *)v28 + 9) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(v28);
    v31 = (unsigned __int8 *)*((_QWORD *)v28 + 11);
  }
  else
  {
LABEL_20:
    v31 = v30;
  }
  v32 = &v31[40 * *((_QWORD *)v28 + 12)];
  if (v30 == v32)
  {
    v37 = v169;
LABEL_29:
    v38 = *(uint64_t ***)(v21 + 24);
  }
  else
  {
    v33 = v3;
    v34 = 1;
    do
    {
      v35 = sub_1C571E074((uint64_t *)v172, v30, *(_QWORD *)(*(_QWORD *)(v29 + 16) + 8 * v34));
      v36 = v169;
      if (v169 >= (unint64_t)HIDWORD(v169))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v168, (uint64_t)v170, v169 + 1, 8);
        v36 = v169;
      }
      *((_QWORD *)v168 + v36) = v35;
      v37 = v169 + 1;
      LODWORD(v169) = v169 + 1;
      v30 += 40;
      ++v34;
    }
    while (v30 != v32);
    v21 = a2;
    if (a2)
    {
      v3 = v33;
      goto LABEL_29;
    }
    v38 = 0;
    v3 = v33;
  }
  v167 = 257;
  v39 = sub_1C4774778((uint64_t *)v172, v38, v21, (uint64_t *)v168, v37, (uint64_t)v166, 0);
  v40 = v39;
  v41 = 1;
  if ((*(_WORD *)(v21 + 18) & 0x3FF0) == 0x140)
  {
    if ((*((_WORD *)v3 + 9) & 0x3FF0) == 0x140)
      v41 = 2;
    else
      v41 = 1;
  }
  v42 = *(_WORD *)(v39 + 18) & 0xFFFC | v41;
  *(_WORD *)(v39 + 18) = v42;
  *(_WORD *)(v39 + 18) = (*(_WORD *)(v21 + 18) >> 2) & 0xFFC | v42 & 0xF003;
  *(_QWORD *)(v39 + 64) = *(_QWORD *)(v21 + 112);
  v43 = **(_QWORD **)(*((_QWORD *)v28 + 3) + 16);
  if (*(_BYTE *)(v43 + 8) == 7)
  {
    v44 = LLVMBuildRetVoid_0((uint64_t *)v172);
  }
  else
  {
    v45 = sub_1C571E074((uint64_t *)v172, (unsigned __int8 *)v39, v43);
    v44 = sub_1C538D7E4((uint64_t *)v172, (llvm::Value *)v45);
  }
  v46 = v44;
  if (!byte_1ED80D108)
  {
    llvm::Function::copyAttributesFrom(v19, (const llvm::Function *)v3);
    llvm::Value::takeName(v19, (llvm::Value *)v3);
    sub_1C571D018(v5, (uint64_t)v3[1]);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v3, v19, (llvm::Value *)1);
    llvm::Function::eraseFromParent((llvm::Function *)v3);
    j = __p;
    goto LABEL_101;
  }
  if ((*((_BYTE *)v3 + 23) & 0x20) != 0)
  {
    v47 = ***v3;
    v166[0] = (unsigned __int8 *)v3;
    v48 = *(_DWORD *)(v47 + 2496);
    if (!v48)
    {
      v136 = 0;
      goto LABEL_198;
    }
    v49 = *(_QWORD *)(v47 + 2480);
    v50 = v48 - 1;
    v51 = v50 & ((v3 >> 4) ^ (v3 >> 9));
    v52 = (_QWORD *)(v49 + 40 * v51);
    v53 = (_QWORD ***)*v52;
    if ((uint64_t ***)*v52 != v3)
    {
      v54 = 0;
      v55 = 1;
      while (v53 != (_QWORD ***)-4096)
      {
        if (v54)
          v56 = 0;
        else
          v56 = v53 == (_QWORD ***)-8192;
        if (v56)
          v54 = v52;
        v57 = v51 + v55++;
        v51 = v57 & v50;
        v52 = (_QWORD *)(v49 + 40 * v51);
        v53 = (_QWORD ***)*v52;
        if ((uint64_t ***)*v52 == v3)
          goto LABEL_50;
      }
      if (v54)
        v136 = v54;
      else
        v136 = v52;
LABEL_198:
      v52 = sub_1C541AB24(v47 + 2480, (uint64_t)v166, (uint64_t *)v166, v136);
      v137 = v166[0];
      v52[3] = 0;
      v52[4] = 0;
      *v52 = v137;
      v52[1] = v52 + 3;
      v52[2] = 0x100000000;
    }
LABEL_50:
    v58 = *((unsigned int *)v52 + 4);
    if ((_DWORD)v58)
    {
      v59 = (uint64_t *)(v52[1] + 8);
      v60 = 16 * v58;
      while (*((_DWORD *)v59 - 2))
      {
        v59 += 2;
        v60 -= 16;
        if (!v60)
          goto LABEL_54;
      }
      v106 = *v59;
      if (*v59)
      {
        v107 = *(_QWORD *)(v106 + 16);
        v108 = (uint64_t *)(v107 & 0xFFFFFFFFFFFFFFF8);
        if ((v107 & 4) != 0)
          v108 = (uint64_t *)*v108;
        Impl = (unsigned __int8 *)llvm::DILocation::getImpl(v108, *(_DWORD *)(v106 + 28), 0, v106, 0, 0, 0, 1);
        v166[0] = Impl;
        if (Impl)
          llvm::MetadataTracking::track((uint64_t)v166, Impl, 2);
        v110 = *(_QWORD *)(v106 + 16);
        v111 = (uint64_t *)(v110 & 0xFFFFFFFFFFFFFFF8);
        if ((v110 & 4) != 0)
          v111 = (uint64_t *)*v111;
        v112 = (unsigned __int8 *)llvm::DILocation::getImpl(v111, *(_DWORD *)(v106 + 28), 0, v106, 0, 0, 0, 1);
        v165 = v112;
        if (v112)
          llvm::MetadataTracking::track((uint64_t)&v165, v112, 2);
        v164 = v166[0];
        if (v166[0])
          llvm::MetadataTracking::track((uint64_t)&v164, v166[0], 2);
        v113 = (unsigned __int8 **)(v40 + 48);
        if (&v164 == (unsigned __int8 **)(v40 + 48))
        {
          if (v164)
            llvm::MetadataTracking::untrack((uint64_t)&v164, v164);
        }
        else
        {
          if (*v113)
            llvm::MetadataTracking::untrack(v40 + 48, *v113);
          v114 = v164;
          *v113 = v164;
          if (v114)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v164, v114, v40 + 48);
            v164 = 0;
          }
        }
        v163 = v165;
        if (v165)
          llvm::MetadataTracking::track((uint64_t)&v163, v165, 2);
        v115 = v46 + 6;
        if (&v163 == v46 + 6)
        {
          if (v163)
            llvm::MetadataTracking::untrack((uint64_t)&v163, v163);
        }
        else
        {
          if (*v115)
            llvm::MetadataTracking::untrack((uint64_t)(v46 + 6), *v115);
          v116 = v163;
          *v115 = v163;
          if (v116)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v163, v116, (uint64_t)(v46 + 6));
            v163 = 0;
          }
        }
        if (v165)
          llvm::MetadataTracking::untrack((uint64_t)&v165, v165);
        if (v166[0])
          llvm::MetadataTracking::untrack((uint64_t)v166, v166[0]);
      }
    }
  }
LABEL_54:
  v61 = v3;
  v62 = (uint64_t *)(v3 + 9);
  v63 = v61[10][1];
  if (v63 == v62)
    goto LABEL_97;
  v64 = 0;
  v65 = 0;
  v66 = 0;
  while (2)
  {
    if (v63)
      v67 = v63 - 3;
    else
      v67 = 0;
    v68 = (uint64_t *)v67[6];
    while (2)
    {
      if (v68 != v67 + 5)
      {
        if (v68)
          v69 = v68 - 3;
        else
          v69 = 0;
        v70 = *((_DWORD *)v69 + 5);
        if ((v70 & 0x40000000) != 0)
        {
          v72 = (_QWORD *)*(v69 - 1);
          v71 = v70 & 0x7FFFFFF;
          if (v71)
            goto LABEL_66;
        }
        else
        {
          v71 = v70 & 0x7FFFFFF;
          v72 = &v69[-4 * v71];
          if (v71)
          {
LABEL_66:
            v73 = 32 * v71;
            v74 = (_QWORD **)(v72 + 2);
            do
            {
              if (*(v74 - 2))
              {
                **v74 = *(v74 - 1);
                v75 = (uint64_t)*(v74 - 1);
                if (v75)
                  *(_QWORD *)(v75 + 16) = *v74;
              }
              *(v74 - 2) = 0;
              v74 += 4;
              v73 -= 32;
            }
            while (v73);
          }
        }
        v68 = (uint64_t *)v68[1];
        continue;
      }
      break;
    }
    if (v65 < v64)
    {
      *(_QWORD *)v65 = v67;
      v65 += 8;
      goto LABEL_92;
    }
    v76 = (v65 - v66) >> 3;
    v77 = v76 + 1;
    if ((unint64_t)(v76 + 1) >> 61)
      goto LABEL_245;
    if ((v64 - v66) >> 2 > v77)
      v77 = (v64 - v66) >> 2;
    if ((unint64_t)(v64 - v66) >= 0x7FFFFFFFFFFFFFF8)
      v78 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v78 = v77;
    if (!v78)
    {
      v79 = 0;
      goto LABEL_86;
    }
    if (v78 >> 61)
      goto LABEL_246;
    v79 = (char *)operator new(8 * v78);
LABEL_86:
    v80 = &v79[8 * v76];
    *(_QWORD *)v80 = v67;
    v81 = v80 + 8;
    if (v65 != v66)
    {
      do
      {
        v82 = *((_QWORD *)v65 - 1);
        v65 -= 8;
        *((_QWORD *)v80 - 1) = v82;
        v80 -= 8;
      }
      while (v65 != v66);
      v65 = v66;
    }
    v66 = v80;
    v64 = &v79[8 * v78];
    if (v65)
      operator delete(v65);
    v65 = v81;
LABEL_92:
    v63 = (uint64_t *)v63[1];
    if (v63 != v62)
      continue;
    break;
  }
  while (v65 != v66)
  {
    v83 = (llvm::BasicBlock *)*((_QWORD *)v65 - 1);
    v65 -= 8;
    llvm::BasicBlock::eraseFromParent(v83);
  }
  if (v66)
    operator delete(v66);
LABEL_97:
  for (j = __p; v26 != __p; j = __p)
  {
    v85 = *((_QWORD *)v26 - 1);
    v26 -= 8;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v85 + 40) + 40, (uint64_t ***)v85);
    v86 = *(_QWORD *)(v85 + 24);
    v87 = *(_QWORD **)(v85 + 32);
    *v87 = v86;
    *(_QWORD *)(v86 + 8) = v87;
    *(_QWORD *)(v85 + 24) = 0;
    *(_QWORD *)(v85 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v85);
  }
LABEL_101:
  if (v168 != v170)
  {
    free(v168);
    j = __p;
  }
  if (v172[0] == v173)
  {
    if (j)
      goto LABEL_105;
  }
  else
  {
    free(v172[0]);
    j = __p;
    if (__p)
LABEL_105:
      operator delete(j);
  }
}

uint64_t sub_1C571DE50(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;
  _QWORD *v14;

  v14 = 0;
  result = sub_1C49F21C0(*(_QWORD *)(a1 + 128), *(_DWORD *)(a1 + 144), a2, &v14);
  if ((_DWORD)result)
  {
    v5 = v14;
    v6 = *(_QWORD *)(a1 + 128);
    v7 = *(unsigned int *)(a1 + 144);
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 128);
    v7 = *(unsigned int *)(a1 + 144);
    v5 = (_QWORD *)(v6 + 16 * v7);
  }
  if (v5 != (_QWORD *)(v6 + 16 * v7))
  {
    v8 = (uint64_t *)v5[1];
    v9 = (_QWORD *)v8[1];
    if (v9)
    {
      do
      {
        v11 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      v10 = (_QWORD *)v5[1];
      do
      {
        v11 = (_QWORD *)v10[2];
        v12 = *v11 == (_QWORD)v10;
        v10 = v11;
      }
      while (!v12);
    }
    if (*(uint64_t **)(a1 + 96) == v8)
      *(_QWORD *)(a1 + 96) = v11;
    v13 = *(uint64_t **)(a1 + 104);
    --*(_QWORD *)(a1 + 112);
    sub_1C485B6E0(v13, v8);
    operator delete(v8);
    *v5 = -8192;
    *(int32x2_t *)(a1 + 136) = vadd_s32(*(int32x2_t *)(a1 + 136), (int32x2_t)0x1FFFFFFFFLL);
    return sub_1C629BAAC((uint64_t *)(a1 + 72), a2);
  }
  return result;
}

uint64_t sub_1C571DF5C(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  llvm::ValueHandleBase *v8;
  uint64_t v9;
  _QWORD v11[5];

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v11[4] = a1 + 2;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (llvm::ValueHandleBase *)&v7[24 * v2];
  v11[0] = v7;
  v11[1] = v8;
  v11[3] = &v7[24 * v6];
  *(_QWORD *)v8 = 6;
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = a2;
  if (a2 != -8192 && a2 != -4096 && a2)
    llvm::ValueHandleBase::AddToUseList(v8);
  v11[2] = (char *)v8 + 24;
  sub_1C571CB9C(a1, v11);
  v9 = a1[1];
  sub_1C571CC6C((uint64_t)v11);
  return v9;
}

unsigned __int8 *sub_1C571E074(uint64_t *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[32];
  __int16 v15;
  unsigned int v16;

  v6 = *(_QWORD *)a2;
  v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if (v7 == 13)
  {
    if (*(_BYTE *)(a3 + 8) == 15)
    {
      v15 = 257;
      v12 = 48;
      return sub_1C4773E38(a1, v12, a2, a3, (uint64_t)v14);
    }
LABEL_8:
    if (v7 == 15 && *(_BYTE *)(a3 + 8) == 13)
    {
      v15 = 257;
      v12 = 47;
    }
    else
    {
      v15 = 257;
      v12 = 49;
    }
    return sub_1C4773E38(a1, v12, a2, a3, (uint64_t)v14);
  }
  if (v7 != 16)
    goto LABEL_8;
  v8 = (uint64_t)llvm::UndefValue::get((llvm::UndefValue *)a3, (llvm::Type *)a2);
  v16 = 0;
  v9 = *(_DWORD *)(v6 + 12);
  if (v9)
  {
    do
    {
      v15 = 257;
      v10 = sub_1C506DBC4((uint64_t)a1, (uint64_t *)a2, &v16, 1, (uint64_t)v14);
      v11 = sub_1C571E074(a1, v10, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v16));
      v15 = 257;
      v8 = sub_1C506D788((uint64_t)a1, v8, v11, &v16, 1, (uint64_t)v14);
      ++v16;
    }
    while (v16 < v9);
  }
  return (unsigned __int8 *)v8;
}

char *sub_1C571E1CC(_QWORD *a1)
{
  int v2;
  char *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = *((_DWORD *)a1 + 2);
  result = (char *)sub_1C629BA18(a1);
  v4 = 1 << (33 - __clz(v2 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v2)
    v5 = v4;
  else
    v5 = 0;
  if ((_DWORD)v5 == *((_DWORD *)a1 + 4))
  {
    a1[1] = 0;
    if ((_DWORD)v5)
    {
      v6 = 48 * v5;
      v7 = (_QWORD *)(*a1 + 16);
      do
      {
        *v7 = 0;
        v7[1] = -4096;
        *(v7 - 2) = &unk_1E817B4C0;
        *(v7 - 1) = 2;
        v7[2] = 0;
        v7 += 6;
        v6 -= 48;
      }
      while (v6);
    }
  }
  else
  {
    result = (char *)MEMORY[0x1CAA32FB4](*a1, 8);
    if ((_DWORD)v5)
    {
      v8 = (4 * (int)v5 / 3u + 1) | ((unint64_t)(4 * (int)v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *((_DWORD *)a1 + 4) = v9;
      result = (char *)operator new(48 * v9, (std::align_val_t)8uLL);
      *a1 = result;
      a1[1] = 0;
      v10 = *((unsigned int *)a1 + 4);
      if ((_DWORD)v10)
      {
        v11 = 48 * v10;
        v12 = result + 16;
        do
        {
          *v12 = 0;
          v12[1] = -4096;
          *(v12 - 2) = &unk_1E817B4C0;
          *(v12 - 1) = 2;
          v12[2] = 0;
          v12 += 6;
          v11 -= 48;
        }
        while (v11);
      }
    }
    else
    {
      *a1 = 0;
      a1[1] = 0;
      *((_DWORD *)a1 + 4) = 0;
    }
  }
  return result;
}

uint64_t sub_1C571E318()
{
  int v1;
  __n128 v2;
  int *v3;
  int v4;

  v2.n128_u64[0] = (unint64_t)"How many functions in a module could be used for MergeFunctions to pass a basic cor"
                                     "rectness check. '0' disables this check. Works only with '-debug' key.";
  v2.n128_u64[1] = 153;
  v4 = 0;
  v3 = &v4;
  v1 = 1;
  sub_1C61D8E94((uint64_t)&unk_1ED80CFC8, "mergefunc-verify", &v2, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED80CFC8, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Preserve debug info in thunk when mergefunc transformations are made.";
  v2.n128_u64[1] = 69;
  v3 = &v1;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED80D088, "mergefunc-preserve-debug-info", &v4, (_BYTE **)&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80D088, &dword_1C475E000);
  v4 = 1;
  LOBYTE(v1) = 0;
  v2.n128_u64[0] = (unint64_t)"Allow mergefunc to create aliases";
  v2.n128_u64[1] = 33;
  v3 = &v1;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED80D148, "mergefunc-use-aliases", &v4, (_BYTE **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80D148, &dword_1C475E000);
}

_QWORD *llvm::ModuleInlinerPass::run@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t CachedResultImpl;
  uint64_t v15;
  __n128 Advisor;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)(uint64_t);
  uint64_t *v20;
  char **v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  _QWORD *v27;
  llvm::OptimizationRemarkEmitter *v28;
  _QWORD *v29;
  int v30;
  uint64_t v32;
  uint64_t v33;
  llvm::OptimizationRemarkEmitter *v34;
  uint64_t v35;
  int v36;
  uint64_t *v37;
  uint64_t v38;
  char **v39;
  uint64_t v40;
  uint64_t v41;
  char **v42;
  unint64_t v43;
  void **v44;
  char *v45;
  unint64_t v46;
  void **v47;
  llvm::OptimizationRemarkEmitter *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::AttributeFuncs *v51;
  llvm::Value *v52;
  unsigned int v53;
  uint64_t ***v54;
  unsigned int v55;
  uint64_t ***v56;
  unsigned int v57;
  llvm::InlineAdvice *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  llvm::InlineAdvice *v62;
  llvm::CallBase *v63;
  const llvm::Function *v64;
  int v65;
  uint64_t v66;
  uint64_t ****v67;
  uint64_t v68;
  char *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t ****v79;
  uint64_t ***v80;
  int v81;
  int v82;
  uint64_t ***v83;
  char *v84;
  size_t v85;
  size_t v86;
  llvm::InlineAdvice *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t ****v93;
  uint64_t ***v94;
  int v95;
  int v96;
  uint64_t ***v97;
  char *v98;
  size_t v99;
  size_t v100;
  uint64_t v101;
  uint64_t *v102;
  char *v103;
  uint64_t ***v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t ****v109;
  uint64_t ***v110;
  int v111;
  int v112;
  uint64_t ***v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t **v117;
  uint64_t **v118;
  int v119;
  uint64_t v120;
  uint64_t ***v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t ***v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  char **v132;
  llvm::SmallPtrSetImplBase *v133;
  char v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  llvm::InlineAdvice *v141;
  uint64_t v142;
  __int128 v143[4];
  int v144;
  const char *v145;
  uint64_t v146;
  uint64_t (**v147)(llvm::DiagnosticInfo *__hidden);
  uint64_t (*v148)(uint64_t *, uint64_t);
  uint64_t *v149;
  __int128 v150;
  const char *v151;
  void *v152;
  uint64_t v153;
  _BYTE v154[16];
  void *v155;
  uint64_t v156;
  char *v157[2];
  uint64_t v158;
  void *v159;
  uint64_t v160;
  _BYTE v161[36];
  int v162;
  uint64_t v163;
  char v164;
  _BYTE v165[24];
  __int128 __p;
  _BYTE *v167;
  uint64_t v168;
  _BYTE v169[32];
  void *v170;
  uint64_t v171;
  _WORD v172[32];
  void *v173;
  unsigned int v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  _BYTE v178[8];
  void *v179;
  char v180;
  uint64_t v181;

  v181 = *MEMORY[0x1E0C80C00];
  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InlineAdvisorAnalysis::Key, (uint64_t)a2);
  v9 = *(_DWORD *)(a1 + 76);
  v144 = *(_DWORD *)(a1 + 72);
  v10 = *(_OWORD *)(a1 + 24);
  v11 = *(_OWORD *)(a1 + 56);
  v143[2] = *(_OWORD *)(a1 + 40);
  v143[3] = v11;
  v143[0] = *(_OWORD *)(a1 + 8);
  v143[1] = v10;
  v147 = 0;
  v148 = 0;
  LODWORD(v150) = 0;
  v149 = 0;
  if (!llvm::InlineAdvisorAnalysis::Result::tryCreate((uint64_t *)(ResultImpl + 8), v143, v9, (uint64_t)&v147))
  {
    v12 = *a2;
    v170 = "Could not setup Inlining Advisor for the requested mode and/or options";
    v172[8] = 259;
    LODWORD(v148) = 0;
    BYTE4(v148) = 0;
    v147 = &off_1E814E960;
    v149 = 0;
    *(_QWORD *)&v150 = &v170;
    *((_QWORD *)&v150 + 1) = 0;
    llvm::LLVMContext::diagnose(v12, (const llvm::DiagnosticInfo *)&v147);
    *(_QWORD *)a4 = a4 + 32;
    *(_QWORD *)(a4 + 8) = a4 + 32;
    *(_QWORD *)(a4 + 16) = 2;
    *(_DWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 48) = a4 + 80;
    *(_QWORD *)(a4 + 56) = a4 + 80;
    *(_QWORD *)(a4 + 64) = 2;
    *(_DWORD *)(a4 + 72) = 0;
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a4, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  v133 = (llvm::SmallPtrSetImplBase *)a4;
  CachedResultImpl = llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(a3, (uint64_t)&llvm::ProfileSummaryAnalysis::Key, (uint64_t)a2);
  v15 = CachedResultImpl + 8;
  if (!CachedResultImpl)
    v15 = 0;
  v137 = v15;
  v139 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, (uint64_t)a2)+ 8);
  Advisor = llvm::ModuleInlinerPass::getAdvisor((uint64_t *)a1, a3, v139, (const llvm::Module *)a2);
  v138 = v17;
  (*(void (**)(__n128))(*(_QWORD *)v17 + 16))(Advisor);
  if (byte_1ED80D288)
  {
    v18 = operator new();
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_OWORD *)(v18 + 80) = 0u;
    *(_OWORD *)(v18 + 96) = 0u;
    *(_OWORD *)(v18 + 112) = 0u;
    *(_OWORD *)(v18 + 128) = 0u;
    *(_OWORD *)(v18 + 144) = 0u;
    *(_OWORD *)(v18 + 160) = 0u;
    *(_OWORD *)(v18 + 176) = 0u;
    *(_OWORD *)(v18 + 192) = 0u;
    *(_OWORD *)(v18 + 208) = 0u;
    *(_OWORD *)(v18 + 224) = 0u;
    *(_OWORD *)(v18 + 240) = 0u;
    *(_OWORD *)(v18 + 256) = 0u;
    *(_OWORD *)(v18 + 272) = 0u;
    *(_OWORD *)(v18 + 288) = 0u;
    v19 = (uint64_t (**)(uint64_t))&unk_1E817AE00;
    *(_QWORD *)v18 = &unk_1E817AE00;
    *(_QWORD *)(v18 + 8) = v18 + 24;
    *(_DWORD *)(v18 + 20) = 16;
    *(_QWORD *)(v18 + 280) = 0;
    *(_QWORD *)(v18 + 288) = 0;
    *(_DWORD *)(v18 + 296) = 0;
  }
  else
  {
    v18 = operator new();
    *(_OWORD *)(v18 + 16) = 0u;
    *(_OWORD *)(v18 + 32) = 0u;
    *(_OWORD *)(v18 + 48) = 0u;
    *(_OWORD *)(v18 + 64) = 0u;
    *(_OWORD *)(v18 + 80) = 0u;
    *(_OWORD *)(v18 + 96) = 0u;
    *(_OWORD *)(v18 + 112) = 0u;
    *(_OWORD *)(v18 + 128) = 0u;
    *(_OWORD *)(v18 + 144) = 0u;
    *(_OWORD *)(v18 + 160) = 0u;
    *(_OWORD *)(v18 + 176) = 0u;
    *(_OWORD *)(v18 + 192) = 0u;
    *(_OWORD *)(v18 + 208) = 0u;
    *(_OWORD *)(v18 + 224) = 0u;
    *(_OWORD *)(v18 + 240) = 0u;
    *(_OWORD *)(v18 + 256) = 0u;
    *(_OWORD *)(v18 + 272) = 0u;
    v19 = (uint64_t (**)(uint64_t))&unk_1E817AE48;
    *(_QWORD *)v18 = &unk_1E817AE48;
    *(_QWORD *)(v18 + 8) = v18 + 24;
    *(_DWORD *)(v18 + 20) = 16;
  }
  v20 = (uint64_t *)a2[4];
  v135 = (uint64_t)(a2 + 3);
  if (v20 != a2 + 3)
  {
    v21 = v157;
    do
    {
      if (v20)
        v22 = (uint64_t)(v20 - 7);
      else
        v22 = 0;
      v23 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v139, &llvm::OptimizationRemarkEmitterAnalysis::Key, v22);
      v24 = v22 + 72;
      for (i = *(_QWORD *)(v22 + 80); i != v24; i = *(_QWORD *)(i + 8))
      {
        v26 = i - 24;
        if (!i)
          v26 = 0;
        v27 = *(_QWORD **)(v26 + 48);
        if (v27 != (_QWORD *)(v26 + 40))
        {
          v28 = (llvm::OptimizationRemarkEmitter *)(v23 + 8);
          while (1)
          {
            if (v27)
              v29 = v27 - 3;
            else
              v29 = 0;
            v30 = *((unsigned __int8 *)v29 + 16);
            if ((v30 - 33) <= 0x33 && ((1 << (v30 - 33)) & 0x8000000000041) != 0)
            {
              v32 = *(v27 - 7);
              if (v32)
              {
                if (!*(_BYTE *)(v32 + 16) && *(_QWORD *)(v32 + 24) == v27[6])
                {
                  if (*(_QWORD *)(v32 + 72) != v32 + 72 || (*(_BYTE *)(v32 + 34) & 0x80) != 0)
                  {
                    v147 = (uint64_t (**)(llvm::DiagnosticInfo *__hidden))(v27 - 3);
                    LODWORD(v148) = -1;
                    v48 = v28;
                    (*(void (**)(uint64_t, uint64_t (***)(llvm::DiagnosticInfo *__hidden)))(*(_QWORD *)v18 + 24))(v18, &v147);
                    v28 = v48;
                  }
                  else if (v30 != 84
                         || (v33 = *(v29 - 4)) == 0
                         || *(_BYTE *)(v33 + 16)
                         || *(_QWORD *)(v33 + 24) != v29[9]
                         || (*(_BYTE *)(v33 + 33) & 0x20) == 0)
                  {
                    v34 = v28;
                    llvm::setInlineRemark((llvm::Value *)(v27 - 3), "unavailable definition", 0x16uLL);
                    v35 = ****(_QWORD ****)v34;
                    if (*(_QWORD *)(v35 + 128)
                      || (v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v35 + 72) + 48))(*(_QWORD *)(v35 + 72)),
                          v28 = v34,
                          v36))
                    {
                      v132 = v21;
                      v37 = *(uint64_t **)(v29[5] + 56);
                      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v165, (const llvm::DebugLoc *)(v29 + 6));
                      v38 = v29[5];
                      LODWORD(v148) = 10;
                      BYTE4(v148) = 2;
                      v150 = *(_OWORD *)v165;
                      v149 = v37;
                      v39 = v132;
                      v151 = "module-inline";
                      v152 = "NoDefinition";
                      v153 = 12;
                      v154[0] = 0;
                      v154[8] = 0;
                      v155 = v132;
                      v156 = 0x400000000;
                      v161[32] = 0;
                      v162 = -1;
                      v163 = v38;
                      v147 = &off_1E814E538;
                      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v165, "Callee", 6uLL, (_BYTE *)v32);
                      v40 = sub_1C47E3888((uint64_t)&v147, (uint64_t)v165);
                      v176 = " will not be inlined into ";
                      v177 = 26;
                      sub_1C53B17B4(v40 + 80, (const void **)&v176);
                      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v176, "Caller", 6uLL, *(_BYTE **)(v27[2] + 56));
                      v41 = sub_1C47E3888(v40, (uint64_t)&v176);
                      v145 = " because its definition is unavailable";
                      v146 = 38;
                      sub_1C53B17B4(v41 + 80, (const void **)&v145);
                      *(_BYTE *)(v41 + 352) = 1;
                      sub_1C61998EC((uint64_t)&v170, v41);
                      v170 = &off_1E814E538;
                      if (v180 < 0)
                        operator delete(v179);
                      if ((v178[7] & 0x80000000) != 0)
                        operator delete(v176);
                      if (SHIBYTE(v167) < 0)
                        operator delete((void *)__p);
                      if ((v165[23] & 0x80000000) != 0)
                        operator delete(*(void **)v165);
                      v147 = &off_1E814E790;
                      v42 = (char **)v155;
                      if ((_DWORD)v156)
                      {
                        v43 = (unint64_t)v156 << 6;
                        do
                        {
                          v44 = (void **)((char *)v42 + v43);
                          if (*((char *)v42 + v43 - 17) < 0)
                            operator delete(*(v44 - 5));
                          if (*((char *)v44 - 41) < 0)
                            operator delete(*(v44 - 8));
                          v43 -= 64;
                        }
                        while (v43);
                        v42 = (char **)v155;
                        v39 = v132;
                      }
                      if (v42 != v39)
                        free(v42);
                      llvm::OptimizationRemarkEmitter::emit(v34, (llvm::DiagnosticInfoOptimizationBase *)&v170);
                      v170 = &off_1E814E790;
                      v45 = (char *)v173;
                      if (v174)
                      {
                        v46 = (unint64_t)v174 << 6;
                        v28 = v34;
                        do
                        {
                          v47 = (void **)&v45[v46];
                          if (v45[v46 - 17] < 0)
                          {
                            operator delete(*(v47 - 5));
                            v28 = v34;
                          }
                          if (*((char *)v47 - 41) < 0)
                          {
                            operator delete(*(v47 - 8));
                            v28 = v34;
                          }
                          v46 -= 64;
                        }
                        while (v46);
                        v45 = (char *)v173;
                      }
                      else
                      {
                        v28 = v34;
                      }
                      if (v45 != (char *)&v175)
                      {
                        free(v45);
                        v28 = v34;
                      }
                      v21 = v132;
                    }
                  }
                }
              }
            }
            v27 = (_QWORD *)v27[1];
            v49 = i - 24;
            if (!i)
              v49 = 0;
            if (v27 == (_QWORD *)(v49 + 40))
              break;
LABEL_73:
            if (i == v24)
              goto LABEL_79;
          }
          while (1)
          {
            i = *(_QWORD *)(i + 8);
            if (i == v24)
              goto LABEL_79;
            v50 = i - 24;
            if (!i)
              v50 = 0;
            v27 = *(_QWORD **)(v50 + 48);
            if (v27 != (_QWORD *)(v50 + 40))
              goto LABEL_73;
          }
        }
      }
LABEL_79:
      v20 = (uint64_t *)v20[1];
    }
    while (v20 != (uint64_t *)v135);
    v19 = *(uint64_t (***)(uint64_t))v18;
  }
  if (v19[2](v18))
  {
    v170 = v172;
    v171 = 0x1000000000;
    *(_QWORD *)v165 = 1;
    *(int64x2_t *)&v165[8] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    __p = *(_OWORD *)&v165[8];
    v167 = v169;
    v168 = 0x400000000;
    v176 = v178;
    v177 = 0x400000000;
    if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18))
    {
      v134 = 0;
      goto LABEL_162;
    }
    v134 = 0;
    do
    {
      v51 = *(llvm::AttributeFuncs **)(*(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18)
                                                 + 40)
                                     + 56);
      v142 = v139;
      if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18))
        continue;
      v136 = 0;
      while (*(llvm::AttributeFuncs **)(*(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18)
                                                   + 40)
                                       + 56) == v51)
      {
        v52 = (llvm::Value *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 32))(v18);
        v54 = (uint64_t ***)v52;
        v55 = v53;
        v56 = (uint64_t ***)*((_QWORD *)v52 - 4);
        if (!v56 || *((_BYTE *)v56 + 16) || v56[3] != *((uint64_t ***)v52 + 9))
          v56 = 0;
        if (v53 != -1)
        {
          v57 = v53;
          while (*((uint64_t ****)v170 + 2 * (int)v57) != v56)
          {
            v57 = *((_DWORD *)v170 + 4 * (int)v57 + 2);
            if (v57 == -1)
              goto LABEL_95;
          }
          llvm::setInlineRemark(v52, "recursive", 9uLL);
          goto LABEL_137;
        }
LABEL_95:
        (*(void (**)(llvm::InlineAdvice **__return_ptr, uint64_t, llvm::Value *))(*(_QWORD *)v138 + 40))(&v141, v138, v52);
        v58 = v141;
        if (*((_BYTE *)v141 + 56))
        {
          v59 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v139, &llvm::BlockFrequencyAnalysis::Key, (uint64_t)v54[5][7])+ 8;
          v60 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v139, &llvm::BlockFrequencyAnalysis::Key, (uint64_t)v56);
          v147 = 0;
          v148 = sub_1C571F470;
          v149 = &v142;
          *(_QWORD *)&v150 = v137;
          *((_QWORD *)&v150 + 1) = v59;
          v151 = (const char *)(v60 + 8);
          v152 = v154;
          v153 = 0x400000000;
          v157[0] = (char *)&v158;
          v157[1] = (char *)0x800000000;
          v159 = v161;
          v160 = 0x800000000;
          v164 = 1;
          v61 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v139, &llvm::AAManager::Key, (uint64_t)v54[5][7]);
          v140 = llvm::InlineFunction(v54, (uint64_t)&v147, v61 + 8, 1, 0);
          if (v140)
          {
            v62 = v141;
            *((_BYTE *)v141 + 57) = 1;
            (*(void (**)(llvm::InlineAdvice *, const char **))(*(_QWORD *)v62 + 32))(v62, &v140);
LABEL_131:
            if (v159 != v161)
              free(v159);
            sub_1C52768FC(v157);
            if (v152 != v154)
              free(v152);
            goto LABEL_135;
          }
          v145 = (const char *)v56;
          sub_1C4E486A0((uint64_t)v165, (uint64_t *)&v145);
          if ((_DWORD)v160)
          {
            v65 = v171;
            v66 = v171;
            if (v171 >= (unint64_t)HIDWORD(v171))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 16);
              v66 = v171;
            }
            v67 = (uint64_t ****)((char *)v170 + 16 * v66);
            *v67 = v56;
            v67[1] = (uint64_t ***)v55;
            LODWORD(v171) = v171 + 1;
            if ((_DWORD)v160)
            {
              v68 = 8 * v160;
              v69 = (char *)v159 - 8;
              do
              {
                v70 = *(const char **)&v69[v68];
                v71 = *((_QWORD *)v70 - 4);
                if ((v71 && !*(_BYTE *)(v71 + 16) && *(_QWORD *)(v71 + 24) == *((_QWORD *)v70 + 9)
                   || llvm::tryPromoteCall(*(llvm **)&v69[v68], v63)
                   && (v71 = *((_QWORD *)v70 - 4)) != 0
                   && !*(_BYTE *)(v71 + 16)
                   && *(_QWORD *)(v71 + 24) == *((_QWORD *)v70 + 9))
                  && (*(_QWORD *)(v71 + 72) != v71 + 72 || (*(_BYTE *)(v71 + 34) & 0x80) != 0))
                {
                  v145 = v70;
                  LODWORD(v146) = v65;
                  (*(void (**)(uint64_t, const char **))(*(_QWORD *)v18 + 24))(v18, &v145);
                }
                v68 -= 8;
              }
              while (v68);
            }
          }
          llvm::AttributeFuncs::mergeAttributesForOutlining(v51, (llvm::Function *)v56, v64);
          if (((_DWORD)v56[4] & 0xFu) - 7 > 1)
            goto LABEL_129;
          llvm::Constant::removeDeadConstantUsers((uint64_t)v56);
          if (v56[1])
            goto LABEL_129;
          v72 = llvm::AnalysisManager<llvm::Function>::getResultImpl(v139, &llvm::TargetLibraryAnalysis::Key, (uint64_t)v56);
          v73 = v72;
          LODWORD(v145) = 0;
          v74 = v56 >> 4;
          if ((*((_BYTE *)v56 + 33) & 0x20) != 0)
            goto LABEL_119;
          if ((*((_BYTE *)v56 + 23) & 0x10) != 0)
          {
            v89 = ***v56;
            v90 = *(_QWORD *)(v89 + 152);
            v91 = *(unsigned int *)(v89 + 168);
            if (!(_DWORD)v91)
              goto LABEL_150;
            LODWORD(v92) = (v91 - 1) & (v74 ^ (v56 >> 9));
            v93 = (uint64_t ****)(v90 + 16 * v92);
            v94 = *v93;
            if (*v93 != v56)
            {
              v95 = 1;
              while (v94 != (uint64_t ***)-4096)
              {
                v96 = v92 + v95++;
                v92 = v96 & (v91 - 1);
                v94 = *(uint64_t ****)(v90 + 16 * v92);
                if (v94 == v56)
                {
                  v93 = (uint64_t ****)(v90 + 16 * v92);
                  goto LABEL_151;
                }
              }
LABEL_150:
              v93 = (uint64_t ****)(v90 + 16 * v91);
            }
LABEL_151:
            v97 = v93[1];
            v100 = (size_t)*v97;
            v98 = (char *)(v97 + 2);
            v99 = v100;
          }
          else
          {
            v99 = 0;
            v98 = &byte_1C871356D;
          }
          v101 = *(_QWORD *)(v72 + 8);
          if (llvm::TargetLibraryInfoImpl::getLibFunc(v72, v98, v99, &v145))
          {
            if ((llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(v101, (uint64_t)v56[3], (int)v145) & 1) != 0)
            {
LABEL_129:
              llvm::InlineAdvice::recordInlining(v141);
              goto LABEL_130;
            }
          }
LABEL_119:
          if ((*((_BYTE *)v56 + 23) & 0x10) != 0)
          {
            v75 = ***v56;
            v76 = *(_QWORD *)(v75 + 152);
            v77 = *(unsigned int *)(v75 + 168);
            if (!(_DWORD)v77)
              goto LABEL_126;
            LODWORD(v78) = (v77 - 1) & (v74 ^ (v56 >> 9));
            v79 = (uint64_t ****)(v76 + 16 * v78);
            v80 = *v79;
            if (*v79 != v56)
            {
              v81 = 1;
              while (v80 != (uint64_t ***)-4096)
              {
                v82 = v78 + v81++;
                v78 = v82 & (v77 - 1);
                v80 = *(uint64_t ****)(v76 + 16 * v78);
                if (v80 == v56)
                {
                  v79 = (uint64_t ****)(v76 + 16 * v78);
                  goto LABEL_127;
                }
              }
LABEL_126:
              v79 = (uint64_t ****)(v76 + 16 * v77);
            }
LABEL_127:
            v83 = v79[1];
            v86 = (size_t)*v83;
            v84 = (char *)(v83 + 2);
            v85 = v86;
          }
          else
          {
            v85 = 0;
            v84 = &byte_1C871356D;
          }
          if (llvm::TargetLibraryInfoImpl::isFunctionVectorizable(*(_QWORD *)(v73 + 8), v84, v85))
            goto LABEL_129;
          v145 = (const char *)v56;
          (*(void (**)(uint64_t, BOOL (*)(_QWORD *, uint64_t), const char **))(*(_QWORD *)v18 + 48))(v18, sub_1C571F498, &v145);
          llvm::Function::dropAllReferences((llvm::Function *)v56);
          v88 = v177;
          if (v177 >= (unint64_t)HIDWORD(v177))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, (uint64_t)v178, v177 + 1, 8);
            v88 = v177;
          }
          *(_QWORD *)&v176[8 * v88] = v56;
          LODWORD(v177) = v177 + 1;
          llvm::InlineAdvice::recordInliningWithCalleeDeleted(v141);
LABEL_130:
          v136 = 1;
          goto LABEL_131;
        }
        *((_BYTE *)v141 + 57) = 1;
        (*(void (**)(llvm::InlineAdvice *))(*(_QWORD *)v58 + 40))(v58);
LABEL_135:
        v87 = v141;
        v141 = 0;
        if (v87)
          (*(void (**)(llvm::InlineAdvice *))(*(_QWORD *)v87 + 8))(v87);
LABEL_137:
        if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18))
          break;
      }
      if ((v136 & 1) != 0)
      {
        sub_1C4E4D164(v165);
        LODWORD(v168) = 0;
        v134 = 1;
      }
    }
    while ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18));
LABEL_162:
    if ((_DWORD)v177)
    {
      v102 = (uint64_t *)v176;
      v103 = &v176[8 * v177];
      while (1)
      {
        v104 = (uint64_t ***)*v102;
        if ((*(_BYTE *)(*v102 + 23) & 0x10) == 0)
        {
          v115 = 0;
          v114 = &byte_1C871356D;
          goto LABEL_173;
        }
        v105 = ***v104;
        v106 = *(_QWORD *)(v105 + 152);
        v107 = *(unsigned int *)(v105 + 168);
        if (!(_DWORD)v107)
          goto LABEL_171;
        LODWORD(v108) = (v107 - 1) & ((v104 >> 4) ^ (v104 >> 9));
        v109 = (uint64_t ****)(v106 + 16 * v108);
        v110 = *v109;
        if (*v109 != v104)
          break;
LABEL_172:
        v113 = v109[1];
        v116 = (uint64_t)*v113;
        v114 = (char *)(v113 + 2);
        v115 = v116;
LABEL_173:
        llvm::AnalysisManager<llvm::Function>::clear(v139, *v102, (uint64_t)v114, v115);
        llvm::SymbolTableListTraits<llvm::Function>::removeNodeFromList(v135, v104);
        v117 = v104[7];
        v118 = v104[8];
        *v118 = (uint64_t *)v117;
        v117[1] = (uint64_t *)v118;
        v104[7] = 0;
        v104[8] = 0;
        llvm::Function::~Function((llvm::Function *)v104);
        v119 = *((_DWORD *)v104 + 5);
        if ((v119 & 0x40000000) != 0)
        {
          v126 = (char *)*(v104 - 1);
          v124 = v104 - 1;
          v125 = v126;
          v127 = v119 & 0x7FFFFFF;
          if ((_DWORD)v127)
          {
            v128 = 32 * v127;
            do
            {
              v129 = &v125[v128];
              if (*(_QWORD *)&v125[v128 - 32])
              {
                **((_QWORD **)v129 - 2) = *((_QWORD *)v129 - 3);
                v130 = *((_QWORD *)v129 - 3);
                if (v130)
                  *(_QWORD *)(v130 + 16) = *((_QWORD *)v129 - 2);
              }
              v128 -= 32;
            }
            while (v128);
          }
          operator delete(v125);
        }
        else
        {
          v120 = v119 & 0x7FFFFFF;
          if ((_DWORD)v120)
          {
            v121 = v104 - 2;
            v122 = -32 * v120;
            do
            {
              if (*(v121 - 2))
              {
                **v121 = (uint64_t *)*(v121 - 1);
                v123 = (uint64_t)*(v121 - 1);
                if (v123)
                  *(_QWORD *)(v123 + 16) = *v121;
              }
              v121 -= 4;
              v122 += 32;
            }
            while (v122);
          }
          v124 = &v104[-4 * v120];
          if (v119 < 0)
            v124 = (uint64_t ***)((char *)(v124 - 1) - (char *)*(v124 - 1));
        }
        operator delete(v124);
        if (++v102 == (uint64_t *)v103)
          goto LABEL_192;
      }
      v111 = 1;
      while (v110 != (uint64_t ***)-4096)
      {
        v112 = v108 + v111++;
        v108 = v112 & (v107 - 1);
        v110 = *(uint64_t ****)(v106 + 16 * v108);
        if (v110 == v104)
        {
          v109 = (uint64_t ****)(v106 + 16 * v108);
          goto LABEL_172;
        }
      }
LABEL_171:
      v109 = (uint64_t ****)(v106 + 16 * v107);
      goto LABEL_172;
    }
LABEL_192:
    v131 = (char *)v133 + 80;
    if ((v134 & 1) != 0)
    {
      *(_OWORD *)((char *)v133 + 40) = 0u;
      *(_OWORD *)((char *)v133 + 56) = 0u;
      *((_QWORD *)v133 + 11) = 0;
      *(_OWORD *)((char *)v133 + 72) = 0u;
      *(_OWORD *)((char *)v133 + 24) = 0u;
      *(_QWORD *)v133 = (char *)v133 + 32;
      *((_QWORD *)v133 + 1) = (char *)v133 + 32;
      *((_QWORD *)v133 + 2) = 2;
      *((_QWORD *)v133 + 6) = v131;
      *((_QWORD *)v133 + 7) = v131;
      *((_DWORD *)v133 + 16) = 2;
    }
    else
    {
      *(_QWORD *)v133 = (char *)v133 + 32;
      *((_QWORD *)v133 + 1) = (char *)v133 + 32;
      *((_QWORD *)v133 + 2) = 2;
      *((_DWORD *)v133 + 6) = 0;
      *((_QWORD *)v133 + 6) = v131;
      *((_QWORD *)v133 + 7) = v131;
      *((_QWORD *)v133 + 8) = 2;
      *((_DWORD *)v133 + 18) = 0;
      sub_1C4774094(v133, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    }
    if (v176 != v178)
      free(v176);
    if (v167 != v169)
      free(v167);
    if ((v165[0] & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v165[8], 8);
    if (v170 != v172)
      free(v170);
  }
  else
  {
    *(_QWORD *)v133 = (char *)v133 + 32;
    *((_QWORD *)v133 + 1) = (char *)v133 + 32;
    *((_QWORD *)v133 + 2) = 2;
    *((_DWORD *)v133 + 6) = 0;
    *((_QWORD *)v133 + 6) = (char *)v133 + 80;
    *((_QWORD *)v133 + 7) = (char *)v133 + 80;
    *((_QWORD *)v133 + 8) = 2;
    *((_DWORD *)v133 + 18) = 0;
    sub_1C4774094(v133, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  return (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v138 + 24))(v138, 0);
}

uint64_t sub_1C571F470(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::AssumptionAnalysis::Key, a2) + 8;
}

BOOL sub_1C571F498(_QWORD *a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) == *a1;
}

uint64_t sub_1C571F4B0()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  v4 = 1;
  v2 = 1;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Enable the priority inline order for the module inliner";
  v1.n128_u64[1] = 55;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED80D208, "module-inline-enable-priority-order", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80D208, &dword_1C475E000);
}

_QWORD *llvm::OpenMPOptPass::run(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::omp *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  llvm::Function *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  void **v26;
  char *v27;
  unint64_t v28;
  void **v29;
  _QWORD *v30;
  _QWORD *v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int v37;
  uint64_t ModuleFlag;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t j;
  _QWORD *v43;
  _QWORD *i;
  _QWORD *v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  void **v51;
  char *v52;
  llvm::OptimizationRemarkEmitter *v53;
  _QWORD v54[2];
  int v55;
  uint64_t v56;
  const void **v57;
  _QWORD *v58;
  uint64_t (*v59)(uint64_t *, uint64_t);
  uint64_t *v60;
  _QWORD *v61;
  _QWORD *v62;
  __int128 v63;
  uint64_t v64;
  int v65;
  char v66;
  uint64_t (*v67)(uint64_t *, uint64_t);
  uint64_t *v68;
  const char *v69;
  _QWORD v70[2];
  int v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[2];
  int v78;
  uint64_t v79[2];
  unsigned int v80;
  void *__p;
  void *v82;
  _QWORD v83[10];
  void *v84;
  unsigned int v85;
  uint64_t v86;
  _QWORD v87[10];
  void *v88;
  unsigned int v89;
  uint64_t v90;
  _QWORD v91[3623];
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  int v95;
  _QWORD v96[18];
  _QWORD v97[18];
  _BYTE v98[176];
  uint64_t v99;
  _QWORD v100[4];
  _QWORD v101[6];
  _QWORD v102[2];
  char *v103;
  uint64_t v104;
  _QWORD v105[18];

  MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v5 = v4;
  v7 = (llvm::omp *)v6;
  v9 = v8;
  v105[16] = *MEMORY[0x1E0C80C00];
  if (!llvm::Module::getModuleFlag(v6, "openmp", 6uLL) || byte_1ED80D348)
  {
    *(_QWORD *)v9 = v9 + 32;
    *(_QWORD *)(v9 + 8) = v9 + 32;
    *(_QWORD *)(v9 + 16) = 2;
    *(_DWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 48) = v9 + 80;
    *(_QWORD *)(v9 + 56) = v9 + 80;
    *(_QWORD *)(v9 + 64) = 2;
    *(_DWORD *)(v9 + 72) = 0;
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)v9, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  v11 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(v5, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, (uint64_t)v7)+ 8);
  llvm::omp::getDeviceKernels(v7, (uint64_t)v79);
  v77[0] = 0;
  v77[1] = 0;
  v78 = 0;
  if (llvm::Module::getModuleFlag((uint64_t)v7, "openmp-device", 0xDuLL))
  {
    v92 = v96;
    v93 = v96;
    v94 = 16;
    v95 = 0;
    v12 = (_QWORD *)*((_QWORD *)v7 + 4);
    if (v12 != (_QWORD *)((char *)v7 + 24))
    {
      v13 = &v88;
      v14 = (char *)&v90;
      do
      {
        if (v12)
          v15 = (uint64_t)(v12 - 7);
        else
          v15 = 0;
        if (v12 && *(_BYTE *)(v15 + 16) == 3)
        {
          if ((*(_DWORD *)(v15 + 20) & 0x7FFFFFF) == 0)
            goto LABEL_20;
        }
        else if (!*(_BYTE *)(v15 + 16) && *(_QWORD *)(v15 + 72) == v15 + 72 && (*(_BYTE *)(v15 + 34) & 0x80) == 0)
        {
          goto LABEL_20;
        }
        if (v80)
        {
          v16 = (v80 - 1) & ((v15 >> 4) ^ (v15 >> 9));
          v17 = *(_QWORD *)(v79[0] + 8 * v16);
          if (v15 == v17)
          {
LABEL_19:
            if (v16 != v80)
              goto LABEL_20;
          }
          else
          {
            v18 = 1;
            while (v17 != -4096)
            {
              v19 = v16 + v18++;
              v16 = v19 & (v80 - 1);
              v17 = *(_QWORD *)(v79[0] + 8 * v16);
              if (v15 == v17)
                goto LABEL_19;
            }
          }
        }
        v87[0] = v15;
        v83[0] = 0;
        if (sub_1C614F7B0(v79, v87, v83) && v83[0] != v79[0] + 8 * v80)
          goto LABEL_28;
        v21 = *(_QWORD *)(v15 + 8);
        if (v21)
        {
          while (*(_BYTE *)(*(_QWORD *)(v21 + 24) + 16) == 4)
          {
            v21 = *(_QWORD *)(v21 + 8);
            if (!v21)
              goto LABEL_20;
          }
LABEL_28:
          if (!byte_1ED80D4C8)
          {
            if (llvm::Attributor::isInternalizable((llvm::Attributor *)v15, v20))
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v92, v15);
            }
            else if ((*(_DWORD *)(v15 + 32) & 0xFu) - 7 >= 2)
            {
              v22 = *(_QWORD *)(v15 + 112);
              if (!v22 || (*(_BYTE *)(v22 + 12) & 0x20) == 0)
              {
                v53 = (llvm::OptimizationRemarkEmitter *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(v11, &llvm::OptimizationRemarkEmitterAnalysis::Key, v15)+ 8);
                v23 = ****(_QWORD ****)v53;
                if (*(_QWORD *)(v23 + 128)
                  || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v23 + 72) + 48))(*(_QWORD *)(v23 + 72)))
                {
                  llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)v87, (uint64_t)"openmp-opt", (uint64_t)"OMP140", 6, v15);
                  v103 = "Could not internalize function. ";
                  v104 = 32;
                  sub_1C53B17B4((uint64_t)v13, (const void **)&v103);
                  v103 = "Some optimizations may not be possible. [OMP140]";
                  v104 = 48;
                  v51 = v13;
                  sub_1C53B17B4((uint64_t)v13, (const void **)&v103);
                  sub_1C61998EC((uint64_t)v83, (uint64_t)v87);
                  v83[0] = &off_1E814E570;
                  v87[0] = &off_1E814E790;
                  v24 = (char *)v88;
                  v52 = v14;
                  if (v89)
                  {
                    v25 = (unint64_t)v89 << 6;
                    do
                    {
                      v26 = (void **)&v24[v25];
                      if (v24[v25 - 17] < 0)
                        operator delete(*(v26 - 5));
                      if (*((char *)v26 - 41) < 0)
                        operator delete(*(v26 - 8));
                      v25 -= 64;
                    }
                    while (v25);
                    v24 = (char *)v88;
                    v14 = v52;
                  }
                  if (v24 != v14)
                    free(v24);
                  llvm::OptimizationRemarkEmitter::emit(v53, (llvm::DiagnosticInfoOptimizationBase *)v83);
                  v83[0] = &off_1E814E790;
                  v27 = (char *)v84;
                  if (v85)
                  {
                    v28 = (unint64_t)v85 << 6;
                    do
                    {
                      v29 = (void **)&v27[v28];
                      if (v27[v28 - 17] < 0)
                        operator delete(*(v29 - 5));
                      if (*((char *)v29 - 41) < 0)
                        operator delete(*(v29 - 8));
                      v28 -= 64;
                    }
                    while (v28);
                    v27 = (char *)v84;
                  }
                  if (v27 != (char *)&v86)
                    free(v27);
                  v13 = v51;
                  v14 = v52;
                }
              }
            }
          }
        }
LABEL_20:
        v12 = (_QWORD *)v12[1];
      }
      while (v12 != (_QWORD *)((char *)v7 + 24));
    }
    llvm::Attributor::internalizeFunctions((uint64_t)&v92, v77);
    if (v93 != v92)
      free(v93);
  }
  v103 = (char *)v105;
  v104 = 0x1000000000;
  v30 = (_QWORD *)((char *)v7 + 24);
  v31 = (_QWORD *)*((_QWORD *)v7 + 4);
  if (v31 == (_QWORD *)((char *)v7 + 24))
    goto LABEL_88;
  v32 = 0;
  do
  {
    if (v31)
      v33 = v31 - 7;
    else
      v33 = 0;
    if (v31 && *((_BYTE *)v33 + 16) == 3)
    {
      if ((*((_DWORD *)v33 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_81;
    }
    else if (!*((_BYTE *)v33 + 16) && (_QWORD *)v33[9] == v33 + 9 && (*((_BYTE *)v33 + 34) & 0x80) == 0)
    {
      goto LABEL_81;
    }
    if (v78)
    {
      v34 = (v78 - 1) & ((v33 >> 4) ^ (v33 >> 9));
      v35 = *(_QWORD **)(v77[0] + 16 * v34);
      if (v33 == v35)
      {
LABEL_77:
        if (*(_QWORD *)(v77[0] + 16 * v34 + 8))
          goto LABEL_81;
      }
      else
      {
        v36 = 1;
        while (v35 != (_QWORD *)-4096)
        {
          v37 = v34 + v36++;
          v34 = v37 & (v78 - 1);
          v35 = *(_QWORD **)(v77[0] + 16 * v34);
          if (v33 == v35)
            goto LABEL_77;
        }
      }
    }
    if (v32 >= HIDWORD(v104))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v103, (uint64_t)v105, v32 + 1, 8);
      v32 = v104;
    }
    *(_QWORD *)&v103[8 * v32] = v33;
    v32 = v104 + 1;
    LODWORD(v104) = v104 + 1;
LABEL_81:
    v31 = (_QWORD *)v31[1];
  }
  while (v31 != v30);
  if (!v32)
  {
LABEL_88:
    *(_QWORD *)v9 = v9 + 32;
    *(_QWORD *)(v9 + 8) = v9 + 32;
    *(_QWORD *)(v9 + 16) = 2;
    *(_DWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 48) = v9 + 80;
    *(_QWORD *)(v9 + 56) = v9 + 80;
    *(_QWORD *)(v9 + 64) = 2;
    *(_DWORD *)(v9 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)v9, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
    goto LABEL_89;
  }
  v75 = v11;
  v76 = v11;
  v100[1] = 0;
  v100[2] = v101;
  v100[3] = 0x400000000;
  v101[4] = v102;
  v102[0] = 0;
  v101[5] = 0;
  v102[1] = 1;
  v92 = v96;
  v93 = v96;
  v94 = 16;
  v95 = 0;
  v96[16] = v97;
  v96[17] = 0x1000000000;
  v97[16] = v98;
  v97[17] = 0x1000000000;
  memset(&v98[128], 0, 48);
  v99 = 0;
  v100[0] = 0;
  v70[0] = 0;
  v70[1] = 0;
  v71 = 0;
  v73 = 0;
  v74 = 0;
  v72 = 0;
  sub_1C573F0A4(v70, v103, &v103[8 * v32]);
  sub_1C5720134((uint64_t)v87, (uint64_t *)v7, (uint64_t)&v76, (uint64_t)v100, (uint64_t)v70, (uint64_t)v79);
  ModuleFlag = llvm::Module::getModuleFlag((uint64_t)v7, "openmp-device", 0xDuLL);
  v39 = dword_1ED80DE88;
  LODWORD(v63) = 257;
  if (!ModuleFlag)
    v39 = 32;
  *((_QWORD *)&v63 + 1) = &v92;
  v64 = 0;
  v65 = v39;
  v66 = 1;
  v67 = sub_1C574607C;
  v68 = &v75;
  v69 = "openmp-opt";
  sub_1C62874B8((uint64_t)v83, (uint64_t)v70, (uint64_t)v87, &v63);
  v54[0] = 0;
  v54[1] = 0;
  v55 = 0;
  v56 = *(_QWORD *)(*(_QWORD *)v103 + 40);
  v57 = (const void **)&v103;
  v58 = &v92;
  v59 = sub_1C574607C;
  v60 = &v75;
  v61 = v87;
  v62 = v83;
  v40 = sub_1C572045C((uint64_t)v54, 1);
  if (byte_1ED80DD08 && llvm::Module::getModuleFlag((uint64_t)v7, "openmp-device", 0xDuLL))
  {
    for (i = (_QWORD *)*((_QWORD *)v7 + 4); i != v30; i = (_QWORD *)i[1])
    {
      if (i)
        v45 = i - 7;
      else
        v45 = 0;
      if (i && *((_BYTE *)v45 + 16) == 3)
      {
        if ((*((_DWORD *)v45 + 5) & 0x7FFFFFF) == 0)
          continue;
      }
      else if (!*((_BYTE *)v45 + 16) && (_QWORD *)v45[9] == v45 + 9 && (*((_BYTE *)v45 + 34) & 0x80) == 0)
      {
        continue;
      }
      if (v80)
      {
        v46 = (v80 - 1) & ((v45 >> 4) ^ (v45 >> 9));
        v47 = *(_QWORD **)(v79[0] + 8 * v46);
        if (v45 == v47)
        {
LABEL_122:
          if (v46 != v80)
            continue;
        }
        else
        {
          v49 = 1;
          while (v47 != (_QWORD *)-4096)
          {
            v50 = v46 + v49++;
            v46 = v50 & (v80 - 1);
            v47 = *(_QWORD **)(v79[0] + 8 * v46);
            if (v45 == v47)
              goto LABEL_122;
          }
        }
      }
      v48 = v45[14];
      if (!v48 || (*(_BYTE *)(v48 + 15) & 8) == 0)
        v45[14] = llvm::AttributeList::addAttributeAtIndex(v45 + 14, *(uint64_t **)*v45, -1, 2);
    }
  }
  v41 = v9 + 80;
  if (v40)
  {
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_QWORD *)(v9 + 88) = 0;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_QWORD *)v9 = v9 + 32;
    *(_QWORD *)(v9 + 8) = v9 + 32;
    *(_QWORD *)(v9 + 16) = 2;
    *(_QWORD *)(v9 + 48) = v41;
    *(_QWORD *)(v9 + 56) = v41;
    *(_DWORD *)(v9 + 64) = 2;
  }
  else
  {
    *(_QWORD *)v9 = v9 + 32;
    *(_QWORD *)(v9 + 8) = v9 + 32;
    *(_QWORD *)(v9 + 16) = 2;
    *(_DWORD *)(v9 + 24) = 0;
    *(_QWORD *)(v9 + 48) = v41;
    *(_QWORD *)(v9 + 56) = v41;
    *(_QWORD *)(v9 + 64) = 2;
    *(_DWORD *)(v9 + 72) = 0;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)v9, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  }
  MEMORY[0x1CAA32FB4](v54[0], 8);
  llvm::Attributor::~Attributor((llvm::Attributor *)v83);
  MEMORY[0x1CAA32FB4](v91[3620], 8);
  MEMORY[0x1CAA32FB4](v91[3571], 8);
  for (j = 0; j != -3268; j -= 19)
  {
    sub_1C629CCBC((uint64_t)&v91[j + 3568]);
    MEMORY[0x1CAA32FB4](v91[j + 3568], 8);
    v43 = (_QWORD *)v91[j + 3557];
    if (&v91[j + 3559] != v43)
      free(v43);
  }
  llvm::OpenMPIRBuilder::~OpenMPIRBuilder((llvm::OpenMPIRBuilder *)v91);
  sub_1C56826A4((uint64_t)v87);
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  MEMORY[0x1CAA32FB4](v70[0], 8);
  sub_1C62878B8((llvm::CallGraphUpdater *)&v92);
  sub_1C4926AE8((uint64_t)v100);
LABEL_89:
  if (v103 != (char *)v105)
    free(v103);
  MEMORY[0x1CAA32FB4](v77[0], 8);
  if (__p)
  {
    v82 = __p;
    operator delete(__p);
  }
  return (_QWORD *)MEMORY[0x1CAA32FB4](v79[0], 8);
}

BOOL llvm::omp::containsOpenMP(llvm::omp *this, llvm::Module *a2)
{
  return llvm::Module::getModuleFlag((uint64_t)this, "openmp", 6uLL) != 0;
}

uint64_t llvm::omp::getDeviceKernels@<X0>(llvm::omp *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  result = llvm::Module::getOrInsertNamedMetadata((uint64_t)this, "nvvm.annotations", 0x10uLL);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  if (result)
  {
    v5 = result;
    v6 = *(unsigned int *)(*(_QWORD *)(result + 48) + 8);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 8 * v6;
      do
      {
        v9 = *(_QWORD *)(**(_QWORD **)(v5 + 48) + v7);
        v10 = *(unsigned int *)(v9 + 8);
        if (v10 >= 2)
        {
          v11 = (uint64_t *)(v9 - 8 * v10);
          v12 = v11[1];
          if (!*(_BYTE *)v12)
          {
            v13 = *(_QWORD *)(v12 + 8);
            if (*(_QWORD *)v13 == 6)
            {
              v14 = *(_DWORD *)(v13 + 24);
              v15 = *(unsigned __int16 *)(v13 + 28);
              if (v14 == 1852990827 && v15 == 27749)
              {
                v19 = 0;
                v17 = *v11;
                if (v17)
                {
                  if (*(_BYTE *)v17 == 1)
                  {
                    v18 = *(_QWORD *)(v17 + 128);
                    if (!*(_BYTE *)(v18 + 16))
                    {
                      v19 = v18;
                      result = sub_1C567D3D8((_QWORD *)a2, &v19);
                    }
                  }
                }
              }
            }
          }
        }
        v7 += 8;
      }
      while (v8 != v7);
    }
  }
  return result;
}

BOOL llvm::omp::isOpenMPDevice(llvm::omp *this, llvm::Module *a2)
{
  return llvm::Module::getModuleFlag((uint64_t)this, "openmp-device", 0xDuLL) != 0;
}

uint64_t sub_1C5720134(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  llvm::OpenMPIRBuilder *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  const llvm::APInt *v17;
  uint64_t v18;
  llvm::ConstantInt *v19;
  const llvm::APInt *v20;
  llvm::ValueHandleBase *v21;
  uint64_t *v22;
  uint64_t v23;
  llvm::ValueHandleBase *v24;
  llvm::ConstantInt *v26;
  uint64_t v27;
  unsigned int v28;

  v9 = (_DWORD *)(a1 + 29496);
  v10 = (_DWORD *)(a1 + 29208);
  v11 = sub_1C6286EFC(a1, (uint64_t)a2, a3, a4, a5);
  sub_1C629C3D0(v11 + 616, a2);
  v13 = a1 + 3048;
  v14 = 172;
  do
  {
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 32) = v13 + 48;
    *(_QWORD *)(v13 + 40) = 0x800000000;
    *(_QWORD *)(v13 + 120) = 0;
    *(_QWORD *)(v13 + 128) = 0;
    *(_QWORD *)(v13 + 112) = 0;
    *(_DWORD *)(v13 + 136) = 0;
    v13 += 152;
    --v14;
  }
  while (v14);
  *(_OWORD *)(a1 + 29184) = 0u;
  *(_DWORD *)(a1 + 29200) = 0;
  v15 = -360;
  do
  {
    v16 = (_OWORD *)(a1 + v15 + 29576);
    *v16 = 0uLL;
    v16[1] = 0uLL;
    v15 += 72;
  }
  while (v15);
  *(_QWORD *)(a1 + 29568) = a6;
  *(_OWORD *)(a1 + 29576) = 0u;
  *(_DWORD *)(a1 + 29592) = 0;
  llvm::OpenMPIRBuilder::initializeTypes(v12, *(llvm::Type ***)(a1 + 952));
  sub_1C5724CEC(a1);
  *(_QWORD *)(a1 + 29216) = "nthreads";
  *(_QWORD *)(a1 + 29224) = 8;
  *v10 = 0;
  v10[10] = 2;
  *(_QWORD *)(a1 + 29232) = "OMP_NUM_THREADS";
  *(_QWORD *)(a1 + 29240) = 15;
  *(_QWORD *)(a1 + 29256) = 0;
  *(_QWORD *)(a1 + 29288) = "active_levels";
  *(_QWORD *)(a1 + 29296) = 13;
  v10[18] = 1;
  v10[28] = 0;
  *(_QWORD *)(a1 + 29304) = "NONE";
  *(_QWORD *)(a1 + 29312) = 4;
  v18 = ***(_QWORD ***)(a1 + 2736);
  v19 = *(llvm::ConstantInt **)(v18 + 1960);
  v28 = *(_DWORD *)(v18 + 1968) >> 8;
  if (v28 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v27, 0, 0);
  else
    v27 = 0;
  v21 = llvm::ConstantInt::get(v19, (llvm::LLVMContext *)&v27, v17);
  if (v28 >= 0x41 && v27)
    MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
  *(_QWORD *)(a1 + 29328) = v21;
  *(_QWORD *)(a1 + 29360) = "cancel";
  *(_QWORD *)(a1 + 29368) = 6;
  v10[36] = 2;
  v10[46] = 1;
  *(_QWORD *)(a1 + 29376) = "OMP_CANCELLATION";
  *(_QWORD *)(a1 + 29384) = 16;
  v22 = **(uint64_t ***)(a1 + 2712);
  v23 = *v22;
  v24 = *(llvm::ValueHandleBase **)(*v22 + 1568);
  if (!v24)
  {
    v26 = *(llvm::ConstantInt **)(v23 + 1888);
    v28 = *(_DWORD *)(v23 + 1896) >> 8;
    if (v28 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v27, 0, 0);
    else
      v27 = 0;
    v24 = llvm::ConstantInt::get(v26, (llvm::LLVMContext *)&v27, v20);
    if (v28 >= 0x41 && v27)
      MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
    *(_QWORD *)(v23 + 1568) = v24;
  }
  *(_QWORD *)(a1 + 29400) = v24;
  *(_QWORD *)(a1 + 29432) = "proc_bind";
  *(_QWORD *)(a1 + 29440) = 9;
  v10[54] = 3;
  v10[64] = 2;
  *(_QWORD *)(a1 + 29448) = "OMP_PROC_BIND";
  *(_QWORD *)(a1 + 29456) = 13;
  *(_QWORD *)(a1 + 29472) = 0;
  *(_QWORD *)(a1 + 29504) = "__last";
  *(_QWORD *)(a1 + 29512) = 6;
  *v9 = 4;
  v9[10] = 3;
  *(_QWORD *)(a1 + 29520) = "last";
  *(_QWORD *)(a1 + 29528) = 4;
  *(_QWORD *)(a1 + 29264) = 0x1100000026;
  v10[33] = 29;
  v10[51] = 20;
  v10[69] = 31;
  return a1;
}

uint64_t sub_1C572045C(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Type *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t *v15;
  int64x2_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t v33;
  _DWORD *v34;
  llvm::UndefValue *v35;
  llvm::Type *v36;
  llvm::UndefValue *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  int v45;
  llvm::OptimizationRemarkEmitter *v46;
  uint64_t v47;
  int32x2_t v48;
  int64x2_t v49;
  char *v50;
  unint64_t v51;
  void **v52;
  char *v53;
  unint64_t v54;
  void **v55;
  char *v56;
  unint64_t v57;
  void **v58;
  llvm::OptimizationRemarkEmitter *v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  void **v63;
  char *v64;
  unint64_t v65;
  void **v66;
  unint64_t v67;
  void **v68;
  void **v69;
  void *v70;
  llvm *v71;
  void *v72;
  llvm::Constant ****v73;
  uint64_t v74;
  llvm::Constant ***v75;
  llvm::UndefValue *PointerBitCastOrAddrSpaceCast;
  llvm::Constant **v77;
  llvm::Constant ****v78;
  llvm::Constant **v79;
  llvm::Constant **v80;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  llvm *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  void **v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  void *v100;
  size_t v101;
  uint64_t v102;
  llvm::OptimizationRemarkEmitter *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  void **v110;
  size_t v111;
  void *v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  _BYTE *v117;
  unint64_t v118;
  BOOL v119;
  uint64_t v120;
  char *v121;
  unint64_t v122;
  void **v123;
  char *v124;
  unint64_t v125;
  void **v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  llvm **v131;
  uint64_t v132;
  void **v133;
  char *v134;
  llvm *v135;
  uint64_t *v136;
  llvm::OptimizationRemarkEmitter *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  llvm **v143;
  llvm *v144;
  int v145;
  int v146;
  llvm *v147;
  char *v148;
  size_t v149;
  size_t v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  void **v154;
  char *v155;
  unint64_t v156;
  void **v157;
  _BOOL4 v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  _BOOL4 v170;
  int v171;
  llvm *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  _BOOL4 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t ***v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t ***v199;
  BOOL v200;
  uint64_t ***v201;
  uint64_t **v202;
  uint64_t **v203;
  uint64_t ***v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t **v210;
  int v211;
  uint64_t **v212;
  int v213;
  unsigned __int8 *UnderlyingObject;
  int v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  int v219;
  unsigned int v220;
  _QWORD *v221;
  _QWORD ***v222;
  _QWORD *v223;
  int v224;
  BOOL v225;
  unsigned int v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  unsigned __int8 *v230;
  int v231;
  uint64_t **v232;
  BOOL v233;
  _QWORD *v234;
  llvm *v235;
  uint64_t ***v236;
  uint64_t ***v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  unsigned int v241;
  int v242;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t *v247;
  uint64_t v248;
  unint64_t v249;
  llvm::OptimizationRemarkEmitter *v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  unint64_t *v254;
  unint64_t v255;
  unsigned __int8 *v256;
  uint64_t v257;
  char *v258;
  unint64_t v259;
  void **v260;
  char *v261;
  unint64_t v262;
  void **v263;
  char *v264;
  unint64_t v265;
  void **v266;
  __int128 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  __int128 v273;
  uint64_t v274;
  uint64_t j;
  uint64_t v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  int *v281;
  int *v282;
  _BYTE *v283;
  unsigned int v284;
  int *v285;
  int *v286;
  char v287;
  _QWORD *v288;
  _QWORD *v289;
  uint64_t v290;
  _QWORD *v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  uint64_t v295;
  int v296;
  int v297;
  _QWORD *v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  char v304;
  uint64_t v305;
  char v306;
  unsigned int *v307;
  uint64_t v308;
  llvm::OptimizationRemarkEmitter *v309;
  uint64_t v310;
  unsigned __int8 *v311;
  uint64_t v312;
  _BOOL8 v313;
  const char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  unsigned __int8 *v319;
  char *v320;
  unint64_t v321;
  void **v322;
  char *v323;
  unint64_t v324;
  void **v325;
  char *v326;
  unint64_t v327;
  void **v328;
  uint64_t v329;
  BOOL v330;
  llvm::BasicBlock *v331;
  llvm *v332;
  _QWORD *v333;
  _QWORD *k;
  _QWORD *v335;
  unsigned int v336;
  uint64_t v337;
  llvm::BasicBlock *v339;
  llvm::BasicBlock *v340;
  _QWORD *v341;
  _QWORD *v342;
  unsigned __int8 *v343;
  uint64_t ***v344;
  uint64_t ***v345;
  uint64_t **v346;
  uint64_t **v347;
  llvm::BasicBlock **v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t ii;
  uint64_t v354;
  llvm::BasicBlock *v355;
  llvm::BasicBlock *v356;
  llvm::BasicBlock *v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  BOOL v361;
  llvm::BasicBlock *v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  BOOL v369;
  llvm::BasicBlock *v370;
  char *v371;
  _QWORD *v372;
  _QWORD *m;
  _QWORD *v374;
  unsigned int v375;
  uint64_t v376;
  llvm::BasicBlock *v378;
  unsigned __int8 *v379;
  _QWORD *v380;
  _QWORD *v381;
  _QWORD *v382;
  unsigned __int8 *v383;
  uint64_t ***v384;
  uint64_t ***v385;
  uint64_t **v386;
  uint64_t **v387;
  unsigned __int8 *v388;
  uint64_t n;
  uint64_t v390;
  uint64_t v391;
  unsigned __int8 **v392;
  uint64_t v393;
  _DWORD *v394;
  llvm::Value *v395;
  llvm::PointerType *v396;
  unsigned int v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t *v402;
  uint64_t v403;
  int v404;
  int v405;
  _QWORD *v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  llvm::Type *v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  _DWORD *v415;
  llvm::StoreInst *v416;
  unsigned __int8 *v417;
  unsigned __int8 *v418;
  llvm::Instruction *v419;
  uint64_t *v420;
  uint64_t v421;
  uint64_t v422;
  unint64_t *v423;
  unint64_t *v424;
  llvm::User *v425;
  unsigned int v426;
  _DWORD *v427;
  llvm::Value *v428;
  llvm::PointerType *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  int v436;
  int v437;
  _QWORD *v438;
  uint64_t v439;
  char *v440;
  uint64_t v441;
  unint64_t *v442;
  unint64_t v443;
  uint64_t *v444;
  llvm::BasicBlock *v445;
  void *v446;
  void *v447;
  llvm **v448;
  void (**v449)(llvm **);
  uint64_t v450;
  _DWORD *v451;
  unsigned int v452;
  uint64_t v453;
  uint64_t v455;
  llvm::BasicBlock *Parallel;
  void *v457;
  void (**v458)(void *);
  _DWORD *v459;
  uint64_t v460;
  uint64_t v461;
  llvm::BasicBlock **v462;
  llvm::BasicBlock *v463;
  uint64_t v464;
  uint64_t **v465;
  unint64_t v466;
  uint64_t v467;
  unsigned int v468;
  uint64_t v469;
  unsigned int v470;
  int v471;
  uint64_t v472;
  int v473;
  uint64_t v474;
  uint64_t v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t *v480;
  uint64_t v481;
  _QWORD *v482;
  _QWORD *v483;
  int v484;
  _QWORD *v485;
  unsigned __int8 *v486;
  unsigned __int8 *v487;
  unsigned __int8 *v488;
  int v489;
  uint64_t v490;
  int v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  _QWORD *v504;
  uint64_t v505;
  uint64_t v506;
  BOOL v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  llvm::ValueSymbolTable *v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  void *v519;
  _QWORD *v520;
  _QWORD *v521;
  _QWORD *v522;
  _QWORD *v523;
  int v524;
  uint64_t v525;
  _BYTE *v526;
  int v527;
  int *v528;
  int *v529;
  unsigned int *v530;
  int *v531;
  llvm::BasicBlock *v532;
  llvm *v533;
  int8x16_t v534;
  int8x16_t v535;
  uint64_t v536;
  uint64_t *v537;
  uint64_t *v538;
  _QWORD *v539;
  llvm::OptimizationRemarkEmitter *v540;
  char v541;
  llvm::OptimizationRemarkEmitter *v542;
  llvm::OptimizationRemarkEmitter *v543;
  _QWORD *v544;
  llvm::BasicBlock *v545;
  llvm::BasicBlock *v546;
  uint64_t v547;
  uint64_t v548;
  llvm::BasicBlock **v549;
  uint64_t v550;
  BOOL v551;
  void **v552;
  uint64_t v553;
  unsigned int *v554;
  char *v555;
  llvm::Function *v556;
  _QWORD v558[2];
  char v559;
  uint64_t v560[4];
  llvm *v561;
  uint64_t v562;
  uint64_t v563;
  llvm::DomTreeUpdater *v564;
  unsigned __int8 *v565;
  unsigned __int8 *v566;
  unsigned __int8 *v567;
  void *v568[2];
  unsigned __int8 *v569[3];
  char v570;
  const char *v571;
  uint64_t v572;
  void *v573;
  uint64_t v574;
  _BYTE v575[32];
  __int128 v576;
  uint64_t v577;
  _BYTE __dst[24];
  int v579;
  _BYTE v580[272];
  void *v581[2];
  __int128 v582;
  uint64_t v583;
  _QWORD v584[2];
  uint64_t v585;
  uint64_t v586;
  _QWORD v587[2];
  int v588;
  __int128 v589;
  __int128 v590;
  uint64_t v591;
  _QWORD v592[2];
  _QWORD v593[9];
  _QWORD v594[2];
  int v595;
  void *v596;
  __int128 __len;
  void *v598;
  char v599;
  void *v600;
  unsigned int v601;
  _BYTE v602[272];
  uint64_t (**v603)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v604;
  char *v605;
  __int128 v606;
  const char *v607;
  const char *v608;
  uint64_t v609;
  char v610;
  char v611;
  void *v612;
  uint64_t v613;
  _BYTE v614[256];
  char v615;
  int v616;
  uint64_t v617;
  llvm *v618;
  void *v619;
  uint64_t v620;
  llvm **v621;
  _WORD v622[8];
  char v623;
  void *v624;
  unsigned int v625;
  _QWORD v626[37];

  v626[34] = *MEMORY[0x1E0C80C00];
  v2 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (!v2)
    return v2 & 1;
  v3 = a1;
  if (a2)
  {
    v4 = sub_1C5735440((uint64_t *)a1, 1);
    v5 = *(_QWORD **)(v3 + 64);
    v6 = (uint64_t)(v5 + 396);
    v7 = 172;
    do
    {
      sub_1C629CBDC(v6);
      sub_1C57351CC(v5, v6 - 128);
      v6 += 152;
      --v7;
    }
    while (v7);
    v9 = *(_QWORD *)(v3 + 64);
    if (*(_QWORD *)(v9 + 25808))
      v10 = byte_1ED80DA08 == 0;
    else
      v10 = 0;
    if (v10)
    {
      v11 = *(_QWORD *)(v3 + 32);
      v12 = *(unsigned int *)(v11 + 8);
      if ((_DWORD)v12)
      {
        v13 = 0;
        v14 = v9 + 25688;
        v15 = *(uint64_t **)v11;
        v547 = *(_QWORD *)v11 + 8 * v12;
        v16 = vdupq_n_s64(7uLL);
        v16.i64[0] = (uint64_t)"unknown";
        v535 = (int8x16_t)v16;
        v17 = vdupq_n_s64(0xAuLL);
        v17.i64[0] = (uint64_t)"unexpected";
        v534 = (int8x16_t)v17;
        v551 = v4;
        while (1)
        {
          v18 = *v15;
          v581[0] = &v582;
          v581[1] = (void *)0x200000000;
          v19 = *(_QWORD *)(v18 + 8);
          v618 = (llvm *)&v620;
          v619 = (void *)0x800000000;
          sub_1C6287358((unsigned int *)&v618, v19, (uint64_t)v8, 0);
          v20 = v619;
          if ((_DWORD)v619)
          {
            v21 = 0;
            v22 = 0;
            v23 = 0;
            v24 = 0;
            while (1)
            {
              v25 = *((_QWORD *)v618 + v21);
              v26 = *(_QWORD *)(v25 + 24);
              v27 = *(unsigned __int8 *)(v26 + 16);
              if (v27 == 5)
              {
                for (i = *(_QWORD *)(v26 + 8); i; i = *(_QWORD *)(i + 8))
                {
                  if (v20 >= HIDWORD(v619))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v618, (uint64_t)&v620, v20 + 1, 8);
                    v20 = v619;
                  }
                  *((_QWORD *)v618 + v20) = i;
                  v20 = (_DWORD)v619 + 1;
                  LODWORD(v619) = (_DWORD)v619 + 1;
                }
                goto LABEL_41;
              }
              if (v27 < 0x1C)
                goto LABEL_29;
              if (*(unsigned __int8 *)(v26 + 16) > 0x50u)
              {
                if (v27 == 81)
                {
                  v29 = LODWORD(v581[1]);
                  if (LODWORD(v581[1]) >= (unint64_t)HIDWORD(v581[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v581, (uint64_t)&v582, LODWORD(v581[1]) + 1, 8);
                    v29 = LODWORD(v581[1]);
                  }
                  *((_QWORD *)v581[0] + v29) = v25;
                  ++LODWORD(v581[1]);
                  goto LABEL_41;
                }
                if (v27 != 84)
                  goto LABEL_29;
              }
              else if (v27 != 33 && v27 != 39)
              {
                goto LABEL_29;
              }
              if (v26 - 32 == v25)
              {
                ++v23;
                goto LABEL_41;
              }
LABEL_29:
              v30 = sub_1C5724C80(v26, v14);
              if (!v22 && v30)
              {
                if (((v25 - (v30 + 32 * -(*(_DWORD *)(v30 + 20) & 0x7FFFFFF))) & 0x1FFFFFFFE0) == 0xC0)
                {
                  v31 = LODWORD(v581[1]);
                  if (LODWORD(v581[1]) >= (unint64_t)HIDWORD(v581[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v581, (uint64_t)&v582, LODWORD(v581[1]) + 1, 8);
                    v31 = LODWORD(v581[1]);
                  }
                  *((_QWORD *)v581[0] + v31) = v25;
                  ++LODWORD(v581[1]);
                  v22 = 1;
                  goto LABEL_41;
                }
                v22 = 0;
              }
              v24 = 1;
LABEL_41:
              ++v21;
              v20 = v619;
              if (v21 >= v619)
                goto LABEL_44;
            }
          }
          v24 = 0;
          v23 = 0;
          v22 = 0;
LABEL_44:
          if (v618 != (llvm *)&v620)
            free(v618);
          if (!v22)
            goto LABEL_131;
          if (v24 || v23 != 1 || LODWORD(v581[1]) >= 3)
          {
            v46 = (llvm::OptimizationRemarkEmitter *)(*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(*(_QWORD *)(a1 + 56), v18);
            v47 = ****(_QWORD ****)v46;
            if (*(_QWORD *)(v47 + 128)
              || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v47 + 72) + 48))(*(_QWORD *)(v47 + 72)))
            {
              llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v603, (uint64_t)"openmp-opt", (uint64_t)"OMP101", 6, v18);
              *(_QWORD *)__dst = "Parallel region is used in ";
              *(_QWORD *)&__dst[8] = 27;
              sub_1C53B17B4((uint64_t)&v612, (const void **)__dst);
              v48 = vdup_n_s32(v24 == 0);
              v49.i64[0] = v48.u32[0];
              v49.i64[1] = v48.u32[1];
              *(int8x16_t *)__dst = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v49, 0x3FuLL)), v534, v535);
              sub_1C53B17B4((uint64_t)&v612, (const void **)__dst);
              *(_QWORD *)__dst = " ways. Will not attempt to rewrite the state machine.";
              *(_QWORD *)&__dst[8] = 53;
              sub_1C53B17B4((uint64_t)&v612, (const void **)__dst);
              sub_1C61998EC((uint64_t)&v618, (uint64_t)&v603);
              v618 = (llvm *)&off_1E814E570;
              *(_QWORD *)__dst = " [";
              *(_QWORD *)&__dst[8] = 2;
              sub_1C53B17B4((uint64_t)&v624, (const void **)__dst);
              *(_QWORD *)__dst = "OMP101";
              *(_QWORD *)&__dst[8] = 6;
              sub_1C53B17B4((uint64_t)&v624, (const void **)__dst);
              *(_QWORD *)__dst = "]";
              *(_QWORD *)&__dst[8] = 1;
              sub_1C53B17B4((uint64_t)&v624, (const void **)__dst);
              sub_1C61998EC((uint64_t)&v596, (uint64_t)&v618);
              v596 = &off_1E814E570;
              v618 = (llvm *)&off_1E814E790;
              v50 = (char *)v624;
              if (v625)
              {
                v51 = (unint64_t)v625 << 6;
                do
                {
                  v52 = (void **)&v50[v51];
                  if (v50[v51 - 17] < 0)
                    operator delete(*(v52 - 5));
                  if (*((char *)v52 - 41) < 0)
                    operator delete(*(v52 - 8));
                  v51 -= 64;
                }
                while (v51);
                v50 = (char *)v624;
              }
              if (v50 != (char *)v626)
                free(v50);
              v603 = &off_1E814E790;
              v53 = (char *)v612;
              if ((_DWORD)v613)
              {
                v54 = (unint64_t)v613 << 6;
                do
                {
                  v55 = (void **)&v53[v54];
                  if (v53[v54 - 17] < 0)
                    operator delete(*(v55 - 5));
                  if (*((char *)v55 - 41) < 0)
                    operator delete(*(v55 - 8));
                  v54 -= 64;
                }
                while (v54);
                v53 = (char *)v612;
              }
              if (v53 != v614)
                free(v53);
              llvm::OptimizationRemarkEmitter::emit(v46, (llvm::DiagnosticInfoOptimizationBase *)&v596);
              v596 = &off_1E814E790;
              v56 = (char *)v600;
              if (v601)
              {
                v57 = (unint64_t)v601 << 6;
                v4 = v551;
                do
                {
                  v58 = (void **)&v56[v57];
                  if (v56[v57 - 17] < 0)
                    operator delete(*(v58 - 5));
                  if (*((char *)v58 - 41) < 0)
                    operator delete(*(v58 - 8));
                  v57 -= 64;
                }
                while (v57);
LABEL_117:
                v56 = (char *)v600;
LABEL_137:
                if (v56 != v602)
                  free(v56);
                goto LABEL_132;
              }
LABEL_136:
              v4 = v551;
              goto LABEL_137;
            }
            goto LABEL_131;
          }
          if (!sub_1C5742D70(a1, v18))
          {
            v59 = (llvm::OptimizationRemarkEmitter *)(*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(*(_QWORD *)(a1 + 56), v18);
            v60 = ****(_QWORD ****)v59;
            if (*(_QWORD *)(v60 + 128)
              || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v60 + 72) + 48))(*(_QWORD *)(v60 + 72)))
            {
              llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v603, (uint64_t)"openmp-opt", (uint64_t)"OMP102", 6, v18);
              *(_QWORD *)__dst = "Parallel region is not called from a unique kernel. Will not attempt to rewrite the state machine.";
              *(_QWORD *)&__dst[8] = 98;
              sub_1C53B17B4((uint64_t)&v612, (const void **)__dst);
              sub_1C61998EC((uint64_t)&v618, (uint64_t)&v603);
              v618 = (llvm *)&off_1E814E570;
              *(_QWORD *)__dst = " [";
              *(_QWORD *)&__dst[8] = 2;
              sub_1C53B17B4((uint64_t)&v624, (const void **)__dst);
              *(_QWORD *)__dst = "OMP102";
              *(_QWORD *)&__dst[8] = 6;
              sub_1C53B17B4((uint64_t)&v624, (const void **)__dst);
              *(_QWORD *)__dst = "]";
              *(_QWORD *)&__dst[8] = 1;
              sub_1C53B17B4((uint64_t)&v624, (const void **)__dst);
              sub_1C61998EC((uint64_t)&v596, (uint64_t)&v618);
              v596 = &off_1E814E570;
              v618 = (llvm *)&off_1E814E790;
              v61 = (char *)v624;
              if (v625)
              {
                v62 = (unint64_t)v625 << 6;
                do
                {
                  v63 = (void **)&v61[v62];
                  if (v61[v62 - 17] < 0)
                    operator delete(*(v63 - 5));
                  if (*((char *)v63 - 41) < 0)
                    operator delete(*(v63 - 8));
                  v62 -= 64;
                }
                while (v62);
                v61 = (char *)v624;
              }
              if (v61 != (char *)v626)
                free(v61);
              v603 = &off_1E814E790;
              v64 = (char *)v612;
              if ((_DWORD)v613)
              {
                v65 = (unint64_t)v613 << 6;
                do
                {
                  v66 = (void **)&v64[v65];
                  if (v64[v65 - 17] < 0)
                    operator delete(*(v66 - 5));
                  if (*((char *)v66 - 41) < 0)
                    operator delete(*(v66 - 8));
                  v65 -= 64;
                }
                while (v65);
                v64 = (char *)v612;
              }
              if (v64 != v614)
                free(v64);
              llvm::OptimizationRemarkEmitter::emit(v59, (llvm::DiagnosticInfoOptimizationBase *)&v596);
              v596 = &off_1E814E790;
              v56 = (char *)v600;
              if (v601)
              {
                v67 = (unint64_t)v601 << 6;
                v4 = v551;
                do
                {
                  v68 = (void **)&v56[v67];
                  if (v56[v67 - 17] < 0)
                    operator delete(*(v68 - 5));
                  if (*((char *)v68 - 41) < 0)
                    operator delete(*(v68 - 8));
                  v67 -= 64;
                }
                while (v67);
                goto LABEL_117;
              }
              goto LABEL_136;
            }
            goto LABEL_131;
          }
          v32 = *(uint64_t ***)(v18 + 40);
          v33 = **v32;
          v34 = operator new(0x78uLL);
          v34[13] = v34[13] & 0x38000000 | 1;
          v35 = (llvm::UndefValue *)(v34 + 8);
          *(_QWORD *)v34 = 0;
          *((_QWORD *)v34 + 1) = 0;
          *((_QWORD *)v34 + 2) = 0;
          *((_QWORD *)v34 + 3) = v34 + 8;
          v37 = llvm::UndefValue::get((llvm::UndefValue *)(v33 + 1912), v36);
          if ((*(_BYTE *)(v18 + 23) & 0x10) != 0)
            break;
          v70 = 0;
          v71 = (llvm *)&byte_1C871356D;
LABEL_120:
          v622[0] = 773;
          v618 = v71;
          v619 = v70;
          v620 = (uint64_t)".ID";
          v13 = 1;
          llvm::GlobalVariable::GlobalVariable((uint64_t)v35, (uint64_t)v32, (llvm::PointerType *)(v33 + 1912), 1, 8, (uint64_t)v37, (uint64_t)&v618, 0, 0, 0, 0);
          if (LODWORD(v581[1]))
          {
            v73 = (llvm::Constant ****)v581[0];
            v74 = 8 * LODWORD(v581[1]);
            do
            {
              v75 = *v73;
              PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(v35, ***v73, v8);
              if (*v75)
              {
                *v75[2] = (llvm::Constant *)v75[1];
                v77 = v75[1];
                if (v77)
                  v77[2] = (llvm::Constant *)v75[2];
              }
              *v75 = (llvm::Constant **)PointerBitCastOrAddrSpaceCast;
              if (PointerBitCastOrAddrSpaceCast)
              {
                v80 = (llvm::Constant **)*((_QWORD *)PointerBitCastOrAddrSpaceCast + 1);
                v78 = (llvm::Constant ****)((char *)PointerBitCastOrAddrSpaceCast + 8);
                v79 = v80;
                v75[1] = v80;
                if (v80)
                  v79[2] = (llvm::Constant *)(v75 + 1);
                v75[2] = (llvm::Constant **)v78;
                *v78 = v75;
              }
              ++v73;
              v74 -= 8;
            }
            while (v74);
            v13 = 1;
            v4 = v551;
            goto LABEL_132;
          }
LABEL_131:
          v4 = v551;
LABEL_132:
          if (v581[0] != &v582)
            free(v581[0]);
          if (++v15 == (uint64_t *)v547)
            goto LABEL_149;
        }
        v38 = ***(_QWORD ***)v18;
        v39 = *(_QWORD *)(v38 + 152);
        v40 = *(unsigned int *)(v38 + 168);
        if ((_DWORD)v40)
        {
          LODWORD(v41) = (v40 - 1) & ((v18 >> 4) ^ (v18 >> 9));
          v42 = (uint64_t *)(v39 + 16 * v41);
          v43 = *v42;
          if (*v42 == v18)
          {
LABEL_119:
            v69 = (void **)v42[1];
            v72 = *v69;
            v71 = (llvm *)(v69 + 2);
            v70 = v72;
            goto LABEL_120;
          }
          v44 = 1;
          while (v43 != -4096)
          {
            v45 = v41 + v44++;
            v41 = v45 & (v40 - 1);
            v43 = *(_QWORD *)(v39 + 16 * v41);
            if (v43 == v18)
            {
              v42 = (uint64_t *)(v39 + 16 * v41);
              goto LABEL_119;
            }
          }
        }
        v42 = (uint64_t *)(v39 + 16 * v40);
        goto LABEL_119;
      }
    }
    v13 = 0;
LABEL_149:
    LOBYTE(v527) = v4 | v13;
    v87 = a1;
    v88 = *(_QWORD *)(***(_QWORD ***)(a1 + 24) + 72);
    if (((*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v88 + 32))(v88, "openmp-opt", 10) & 1) != 0
      || ((*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v88 + 40))(v88, "openmp-opt", 10) & 1) != 0
      || (*(unsigned int (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v88 + 24))(v88, "openmp-opt", 10))
    {
      v89 = (llvm *)(*(_QWORD *)(a1 + 64) + 27208);
      v618 = v89;
      v619 = (void *)a1;
      v90 = *(_QWORD *)(a1 + 32);
      v91 = *(unsigned int *)(v90 + 8);
      if ((_DWORD)v91)
      {
        v92 = *(uint64_t **)v90;
        v93 = 8 * v91;
        do
        {
          v94 = *v92++;
          sub_1C5735FC4((uint64_t)v89, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C57432CC, (uint64_t)&v618, v94);
          v93 -= 8;
        }
        while (v93);
      }
    }
    goto LABEL_270;
  }
  if (byte_1ED80D588)
  {
    v81 = *(uint64_t ***)(a1 + 64);
    v82 = v81[1];
    v83 = 16;
    if (v82 == *v81)
      v83 = 20;
    v84 = *(unsigned int *)((char *)v81 + v83);
    if ((_DWORD)v84)
    {
      v85 = 8 * v84;
      v86 = v82;
      while ((unint64_t)*v86 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v86;
        v85 -= 8;
        if (!v85)
          goto LABEL_210;
      }
    }
    else
    {
      v86 = v82;
    }
    v95 = &v82[v84];
    if (v86 != v95)
    {
      v96 = &v598;
      v97 = *v86;
LABEL_159:
      v98 = 0;
      while (1)
      {
        v99 = (_QWORD *)(*(_QWORD *)(v3 + 64) + 72 * *((int *)&xmmword_1C6429EB0 + v98));
        v100 = (void *)v99[3652];
        v101 = v99[3653];
        v102 = v99[3657];
        v103 = (llvm::OptimizationRemarkEmitter *)(*(uint64_t (**)(_QWORD, uint64_t))(v3 + 48))(*(_QWORD *)(v3 + 56), v97);
        v104 = ****(_QWORD ****)v103;
        if (*(_QWORD *)(v104 + 128)
          || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v104 + 72) + 48))(*(_QWORD *)(v104 + 72)))
        {
          break;
        }
LABEL_162:
        if (++v98 == 4)
        {
          v127 = (unint64_t *)(v86 + 1);
          while (v127 != (unint64_t *)v95)
          {
            v128 = *v127++;
            v97 = v128;
            if (v128 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v86 = (uint64_t *)(v127 - 1);
              goto LABEL_159;
            }
          }
          goto LABEL_210;
        }
      }
      llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v618, (uint64_t)"openmp-opt", (uint64_t)"OpenMPICVTracker", 16, v97);
      v596 = "OpenMP ICV ";
      *(_QWORD *)&__len = 11;
      sub_1C53B17B4((uint64_t)&v624, (const void **)&v596);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(v581, "OpenMPICV", 9uLL, v100, v101);
      v105 = sub_1C47E3888((uint64_t)&v618, (uint64_t)v581);
      v596 = " Value: ";
      *(_QWORD *)&__len = 8;
      v106 = v105 + 80;
      sub_1C53B17B4(v105 + 80, (const void **)&v596);
      if (!v102)
      {
        strcpy(__dst, "IMPLEMENTATION_DEFINED");
        __dst[23] = 22;
        v107 = 22;
        v108 = 0x4E454D454C504D49;
        v109 = 0x445F4E4F49544154;
LABEL_177:
        v119 = v107 < 0;
        if (v107 >= 0)
          v108 = (uint64_t)__dst;
        v120 = v107 & 0x7F;
        if (v119)
          v120 = v109;
        v596 = (void *)v108;
        *(_QWORD *)&__len = v120;
        sub_1C53B17B4(v106, (const void **)&v596);
        sub_1C61998EC((uint64_t)&v603, v105);
        v603 = &off_1E814E570;
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        if (SHIBYTE(v584[0]) < 0)
          operator delete(*((void **)&v582 + 1));
        if (SBYTE7(v582) < 0)
          operator delete(v581[0]);
        v618 = (llvm *)&off_1E814E790;
        v121 = (char *)v624;
        if (v625)
        {
          v122 = (unint64_t)v625 << 6;
          do
          {
            v123 = (void **)&v121[v122];
            if (v121[v122 - 17] < 0)
              operator delete(*(v123 - 5));
            if (*((char *)v123 - 41) < 0)
              operator delete(*(v123 - 8));
            v122 -= 64;
          }
          while (v122);
          v121 = (char *)v624;
          v3 = a1;
        }
        if (v121 != (char *)v626)
          free(v121);
        llvm::OptimizationRemarkEmitter::emit(v103, (llvm::DiagnosticInfoOptimizationBase *)&v603);
        v603 = &off_1E814E790;
        v124 = (char *)v612;
        if ((_DWORD)v613)
        {
          v125 = (unint64_t)v613 << 6;
          do
          {
            v126 = (void **)&v124[v125];
            if (v124[v125 - 17] < 0)
              operator delete(*(v126 - 5));
            if (*((char *)v126 - 41) < 0)
              operator delete(*(v126 - 8));
            v125 -= 64;
          }
          while (v125);
          v124 = (char *)v612;
          v3 = a1;
        }
        if (v124 != v614)
          free(v124);
        goto LABEL_162;
      }
      v540 = (llvm::OptimizationRemarkEmitter *)v105;
      v110 = v96;
      v596 = v96;
      __len = xmmword_1C64638D0;
      llvm::APInt::toString(v102 + 24, &v596, 0xAu, 1, 0);
      v111 = __len;
      if ((unint64_t)__len >= 0x7FFFFFFFFFFFFFF8)
        abort();
      v112 = v596;
      if ((unint64_t)__len >= 0x17)
      {
        v114 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
        if (((unint64_t)__len | 7) != 0x17)
          v114 = __len | 7;
        v115 = v114 + 1;
        v116 = v596;
        v117 = operator new(v114 + 1);
        v112 = v116;
        v113 = v117;
        v118 = v115 | 0x8000000000000000;
        v3 = a1;
        *(_QWORD *)&__dst[16] = v118;
        *(_QWORD *)__dst = v117;
        *(_QWORD *)&__dst[8] = v111;
      }
      else
      {
        __dst[23] = __len;
        v113 = __dst;
        if (!(_QWORD)__len)
          goto LABEL_174;
      }
      memmove(v113, v112, v111);
LABEL_174:
      v113[v111] = 0;
      v96 = v110;
      if (v596 != v110)
        free(v596);
      v107 = __dst[23];
      v109 = *(_QWORD *)&__dst[8];
      v108 = *(_QWORD *)__dst;
      v105 = (uint64_t)v540;
      goto LABEL_177;
    }
  }
LABEL_210:
  if (byte_1ED80D648)
  {
    v129 = *(_QWORD *)(v3 + 32);
    v130 = *(unsigned int *)(v129 + 8);
    if ((_DWORD)v130)
    {
      v131 = *(llvm ***)v129;
      v132 = *(_QWORD *)v129 + 8 * v130;
      v133 = &v624;
      v134 = (char *)v626;
      while (1)
      {
        v135 = *v131;
        v136 = *(uint64_t **)(*(_QWORD *)(v3 + 64) + 29568);
        v618 = *v131;
        v603 = 0;
        if (sub_1C614F7B0(v136, &v618, &v603))
        {
          v137 = (llvm::OptimizationRemarkEmitter *)(*(uint64_t (**)(_QWORD, llvm *))(a1 + 48))(*(_QWORD *)(a1 + 56), v135);
          v138 = ****(_QWORD ****)v137;
          if (*(_QWORD *)(v138 + 128)
            || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v138 + 72) + 48))(*(_QWORD *)(v138 + 72)))
          {
            break;
          }
        }
LABEL_216:
        ++v131;
        v3 = a1;
        if (v131 == (llvm **)v132)
          goto LABEL_252;
      }
      llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v618, (uint64_t)"openmp-opt", (uint64_t)"OpenMPGPU", 9, (uint64_t)v135);
      v596 = "OpenMP GPU kernel ";
      *(_QWORD *)&__len = 18;
      sub_1C53B17B4((uint64_t)v133, (const void **)&v596);
      if ((*((_BYTE *)v135 + 23) & 0x10) == 0)
      {
        v149 = 0;
        v148 = &byte_1C871356D;
        goto LABEL_227;
      }
      v139 = ***(_QWORD ***)v135;
      v140 = *(_QWORD *)(v139 + 152);
      v141 = *(unsigned int *)(v139 + 168);
      if ((_DWORD)v141)
      {
        LODWORD(v142) = (v141 - 1) & ((v135 >> 4) ^ (v135 >> 9));
        v143 = (llvm **)(v140 + 16 * v142);
        v144 = *v143;
        if (*v143 == v135)
        {
LABEL_226:
          v147 = v143[1];
          v150 = *(_QWORD *)v147;
          v148 = (char *)v147 + 16;
          v149 = v150;
LABEL_227:
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v596, "OpenMPGPUKernel", 0xFuLL, v148, v149);
          v151 = sub_1C47E3888((uint64_t)&v618, (uint64_t)&v596);
          v581[0] = "\n";
          v581[1] = (void *)1;
          sub_1C53B17B4(v151 + 80, (const void **)v581);
          sub_1C61998EC((uint64_t)&v603, v151);
          v603 = &off_1E814E570;
          if (v599 < 0)
            operator delete(v598);
          if (SHIBYTE(__len) < 0)
            operator delete(v596);
          v618 = (llvm *)&off_1E814E790;
          v152 = (char *)v624;
          v555 = v134;
          if (v625)
          {
            v552 = v133;
            v153 = (unint64_t)v625 << 6;
            do
            {
              v154 = (void **)&v152[v153];
              if (v152[v153 - 17] < 0)
                operator delete(*(v154 - 5));
              if (*((char *)v154 - 41) < 0)
                operator delete(*(v154 - 8));
              v153 -= 64;
            }
            while (v153);
            v152 = (char *)v624;
            v133 = v552;
            v134 = v555;
          }
          if (v152 != v134)
            free(v152);
          llvm::OptimizationRemarkEmitter::emit(v137, (llvm::DiagnosticInfoOptimizationBase *)&v603);
          v603 = &off_1E814E790;
          v155 = (char *)v612;
          if ((_DWORD)v613)
          {
            v156 = (unint64_t)v613 << 6;
            do
            {
              v157 = (void **)&v155[v156];
              if (v155[v156 - 17] < 0)
                operator delete(*(v157 - 5));
              if (*((char *)v157 - 41) < 0)
                operator delete(*(v157 - 8));
              v156 -= 64;
            }
            while (v156);
            v155 = (char *)v612;
            v134 = v555;
          }
          if (v155 != v614)
            free(v155);
          goto LABEL_216;
        }
        v145 = 1;
        while (v144 != (llvm *)-4096)
        {
          v146 = v142 + v145++;
          v142 = v146 & (v141 - 1);
          v144 = *(llvm **)(v140 + 16 * v142);
          if (v144 == v135)
          {
            v143 = (llvm **)(v140 + 16 * v142);
            goto LABEL_226;
          }
        }
      }
      v143 = (llvm **)(v140 + 16 * v141);
      goto LABEL_226;
    }
  }
LABEL_252:
  v158 = sub_1C5735440((uint64_t *)v3, 0);
  v159 = *(_QWORD **)(v3 + 64);
  v160 = (uint64_t)(v159 + 396);
  v161 = 172;
  do
  {
    sub_1C629CBDC(v160);
    sub_1C57351CC(v159, v160 - 128);
    v160 += 152;
    --v161;
  }
  while (v161);
  v87 = a1;
  v162 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(v162 + 4072))
  {
    LOBYTE(v603) = 0;
    v618 = (llvm *)a1;
    v619 = &v603;
    v163 = *(_QWORD *)(a1 + 32);
    v164 = *(unsigned int *)(v163 + 8);
    if ((_DWORD)v164)
    {
      v165 = v162 + 3952;
      v166 = *(uint64_t **)v163;
      v167 = 8 * v164;
      do
      {
        v168 = *v166++;
        sub_1C5735FC4(v165, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C5743600, (uint64_t)&v618, v168);
        v167 -= 8;
      }
      while (v167);
      v169 = v603;
      v87 = a1;
    }
    else
    {
      v169 = 0;
    }
    v170 = v169 != 0;
  }
  else
  {
    v170 = 0;
  }
  v171 = v158 || v170;
  if (byte_1ED80D708)
  {
    v172 = (llvm *)(*(_QWORD *)(v87 + 64) + 23560);
    LOBYTE(v603) = 0;
    v618 = v172;
    v619 = (void *)v87;
    v620 = (uint64_t)&v603;
    v173 = *(_QWORD *)(v87 + 32);
    v174 = *(unsigned int *)(v173 + 8);
    if ((_DWORD)v174)
    {
      v175 = *(uint64_t **)v173;
      v176 = 8 * v174;
      do
      {
        v177 = *v175++;
        sub_1C5735FC4((uint64_t)v172, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C57439C8, (uint64_t)&v618, v177);
        v176 -= 8;
      }
      while (v176);
      LODWORD(v174) = (_BYTE)v603 != 0;
      v87 = a1;
    }
    v171 |= v174;
  }
  v527 = v171 | sub_1C5735D68(v87);
  if (byte_1ED80D408)
  {
    v178 = *(_QWORD *)(v87 + 64);
    if (*(_QWORD *)(v178 + 4072))
    {
      v268 = *(_OWORD *)(v178 + 4576);
      *(_OWORD *)v581 = *(_OWORD *)(v178 + 4560);
      v582 = v268;
      v583 = *(_QWORD *)(v178 + 4592);
      v584[0] = &v585;
      v584[1] = 0x800000000;
      if (*(_DWORD *)(v178 + 4608))
        sub_1C49EEBE4((uint64_t)v584, v178 + 4600);
      v269 = v178 + 3952;
      v270 = *(_QWORD *)(v178 + 4680);
      v587[1] = 0;
      v586 = v270;
      v587[0] = 0;
      v588 = 0;
      sub_1C57453E4((uint64_t)v587, v178 + 4688);
      v271 = *(_QWORD *)(v87 + 64);
      v272 = *(_QWORD *)(v271 + 4440);
      v273 = *(_OWORD *)(v271 + 4424);
      v589 = *(_OWORD *)(v271 + 4408);
      v590 = v273;
      v591 = v272;
      v592[0] = v593;
      v592[1] = 0x800000000;
      if (*(_DWORD *)(v271 + 4456))
        sub_1C49EEBE4((uint64_t)v592, v271 + 4448);
      v274 = *(_QWORD *)(v271 + 4528);
      v594[1] = 0;
      v593[8] = v274;
      v594[0] = 0;
      v595 = 0;
      sub_1C57453E4((uint64_t)v594, v271 + 4536);
      v563 = 0;
      v564 = 0;
      *(_QWORD *)__dst = 1;
      for (j = 8; j != 296; j += 72)
        *(_QWORD *)&__dst[j] = -4096;
      v561 = 0;
      v562 = 0;
      v560[0] = (uint64_t)&v563;
      v560[1] = (uint64_t)&v564;
      v560[2] = (uint64_t)&v562;
      v560[3] = (uint64_t)&v561;
      v558[0] = v269;
      v558[1] = __dst;
      sub_1C629CD4C((uint64_t)__dst);
      v276 = *(_QWORD *)(v87 + 32);
      v277 = *(unsigned int *)(v276 + 8);
      if ((_DWORD)v277)
      {
        v278 = *(uint64_t **)v276;
        v279 = 8 * v277;
        do
        {
          v280 = *v278++;
          sub_1C5735FC4(v269, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C574544C, (uint64_t)v558, v280);
          v279 -= 8;
        }
        while (v279);
      }
      *(_QWORD *)&v576 = &v577;
      *((_QWORD *)&v576 + 1) = 0x400000000;
      v281 = sub_1C629CE18((int *)__dst);
      if ((__dst[0] & 1) != 0)
        v283 = &__dst[8];
      else
        v283 = *(_BYTE **)&__dst[8];
      v284 = *(_DWORD *)&__dst[16];
      if ((__dst[0] & 1) != 0)
        v284 = 4;
      v285 = (int *)&v283[72 * v284];
      if (v285 == v281)
        goto LABEL_871;
      v286 = v281;
      v287 = 0;
      v528 = (int *)&v283[72 * v284];
      v529 = v282;
      while (1)
      {
        if ((v286[7] - v286[8]) < 2)
          goto LABEL_864;
        v288 = *(_QWORD **)v286;
        v573 = v575;
        v574 = 0x400000000;
        v533 = (llvm *)v288;
        v289 = (_QWORD *)v288[6];
        v544 = v288 + 5;
        if (v289 != v288 + 5)
        {
          while (1)
          {
            if (v289)
              v290 = (uint64_t)(v289 - 3);
            else
              v290 = 0;
            v289 = (_QWORD *)v289[1];
            v291 = sub_1C477672C((uint64_t)(v286 + 2), v290);
            v292 = *((_QWORD *)v286 + 2);
            v293 = 6;
            if (v292 == *((_QWORD *)v286 + 1))
              v293 = 7;
            v294 = (_QWORD *)(v292 + 8 * v286[v293]);
            v295 = v574;
            if (v291 != v294)
              break;
            v297 = *(unsigned __int8 *)(v290 + 16);
            if ((v297 - 29) < 0xB)
              goto LABEL_518;
            if (v297 == 84)
            {
              v303 = *(_QWORD *)(v290 - 32);
              if ((_DWORD)v574)
              {
                if (v303
                  && !*(_BYTE *)(v303 + 16)
                  && *(_QWORD *)(v303 + 24) == *(_QWORD *)(v290 + 72)
                  && (*(_BYTE *)(v303 + 33) & 0x20) != 0)
                {
                  goto LABEL_539;
                }
              }
              else if (v303 && !*(_BYTE *)(v303 + 16) && *(_QWORD *)(v303 + 24) == *(_QWORD *)(v290 + 72))
              {
                v304 = 0;
                v305 = 0;
                while (1)
                {
                  v306 = v304;
                  if (v303 == v587[19 * v305 - 1])
                    break;
                  v304 = 1;
                  v305 = 1;
                  if ((v306 & 1) != 0)
                    goto LABEL_539;
                }
              }
LABEL_518:
              v298 = v544;
              if (v289 != v544)
              {
                while (1)
                {
                  if (v289)
                    v299 = (uint64_t)(v289 - 3);
                  else
                    v299 = 0;
                  v300 = sub_1C477672C((uint64_t)(v286 + 2), v299);
                  v301 = *((_QWORD *)v286 + 2);
                  v302 = 6;
                  if (v301 == *((_QWORD *)v286 + 1))
                    v302 = 7;
                  v289 = (_QWORD *)v289[1];
                  if (v300 != (_QWORD *)(v301 + 8 * v286[v302]))
                    break;
                  if (v289 == v544)
                  {
                    v298 = v544;
                    goto LABEL_535;
                  }
                }
                v298 = v289;
              }
LABEL_535:
              if (v574 >= 2)
                sub_1C629CE98((uint64_t)&v576, (unint64_t)&v573);
              v296 = 0;
              v289 = v298;
LABEL_538:
              LODWORD(v574) = v296;
            }
LABEL_539:
            if (v289 == v544)
              goto LABEL_548;
          }
          if (v574 >= (unint64_t)HIDWORD(v574))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v573, (uint64_t)v575, v574 + 1, 8);
            v295 = v574;
          }
          *((_QWORD *)v573 + v295) = v290;
          v296 = v574 + 1;
          goto LABEL_538;
        }
LABEL_548:
        if (DWORD2(v576))
          break;
LABEL_861:
        if (v573 != v575)
          free(v573);
        v285 = v528;
        v282 = v529;
LABEL_864:
        while (1)
        {
          v286 += 18;
          if (v286 == v282)
            break;
          if ((*(_QWORD *)v286 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_868;
        }
        v286 = v282;
LABEL_868:
        if (v286 == v285)
        {
          if ((v287 & 1) != 0)
          {
            v520 = *(_QWORD **)(v87 + 64);
            sub_1C629CBDC((uint64_t)(v520 + 510));
            sub_1C57351CC(v520, (uint64_t)(v520 + 494));
            v521 = *(_QWORD **)(v87 + 64);
            sub_1C629CBDC((uint64_t)(v521 + 396));
            sub_1C57351CC(v521, (uint64_t)(v521 + 380));
            v522 = *(_QWORD **)(v87 + 64);
            sub_1C629CBDC((uint64_t)(v522 + 1213));
            sub_1C57351CC(v522, (uint64_t)(v522 + 1197));
            v523 = *(_QWORD **)(v87 + 64);
            sub_1C629CBDC((uint64_t)(v523 + 1232));
            sub_1C57351CC(v523, (uint64_t)(v523 + 1216));
            v524 = 1;
            goto LABEL_872;
          }
LABEL_871:
          v524 = 0;
LABEL_872:
          sub_1C618F3AC((char **)&v576);
          sub_1C629D3DC((uint64_t)__dst);
          v525 = 304;
          do
          {
            sub_1C629CCBC((uint64_t)&v580[v525 + 248]);
            MEMORY[0x1CAA32FB4](*(_QWORD *)&v580[v525 + 248], 8);
            v526 = *(_BYTE **)&v580[v525 + 160];
            if (&v580[v525 + 176] != v526)
              free(v526);
            v525 -= 152;
          }
          while (v525);
          if (v524)
          {
            sub_1C5735D68(v87);
            LOBYTE(v527) = 1;
          }
          goto LABEL_270;
        }
      }
      v307 = (unsigned int *)v576;
      v530 = (unsigned int *)(v576 + 48 * DWORD2(v576));
      v531 = v286;
LABEL_550:
      v308 = **(_QWORD **)v307;
      v309 = (llvm::OptimizationRemarkEmitter *)(*(uint64_t (**)(_QWORD, _QWORD))(v87 + 48))(*(_QWORD *)(v87 + 56), *(_QWORD *)(*(_QWORD *)(v308 + 40) + 56));
      v310 = ****(_QWORD ****)v309;
      if (*(_QWORD *)(v310 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v310 + 72) + 48))(*(_QWORD *)(v310 + 72)))
      {
        v311 = *(unsigned __int8 **)(*(_QWORD *)(v308 + 40) + 56);
        llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v568, (const llvm::DebugLoc *)(v308 + 48));
        v312 = *(_QWORD *)(v308 + 40);
        LODWORD(v604) = 9;
        BYTE4(v604) = 2;
        v606 = *(_OWORD *)v568;
        v605 = (char *)v311;
        v607 = "openmp-opt";
        v608 = "OMP150";
        v609 = 6;
        v610 = 0;
        v611 = 0;
        v612 = v614;
        v613 = 0x400000000;
        v615 = 0;
        v616 = -1;
        v617 = v312;
        v603 = &off_1E814E500;
        v568[0] = "Parallel region merged with parallel region";
        v568[1] = (void *)43;
        sub_1C53B17B4((uint64_t)&v612, (const void **)v568);
        v313 = v307[2] > 2;
        v314 = "";
        if (v307[2] > 2)
          v314 = "s";
        v568[0] = (void *)v314;
        v568[1] = (void *)v313;
        sub_1C53B17B4((uint64_t)&v612, (const void **)v568);
        v568[0] = " at ";
        v568[1] = (void *)4;
        sub_1C53B17B4((uint64_t)&v612, (const void **)v568);
        v315 = v307[2];
        if ((_DWORD)v315 != 1)
        {
          v316 = *(_QWORD *)v307 + 8;
          v317 = 8 * v315 - 8;
          do
          {
            v318 = *(_QWORD *)v316;
            v319 = *(unsigned __int8 **)(*(_QWORD *)v316 + 48);
            v567 = v319;
            if (v319)
              llvm::MetadataTracking::track((uint64_t)&v567, v319, 2);
            llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v568, "OpenMPParallelMerge", 0x13uLL, (const llvm::DebugLoc *)&v567);
            sub_1C47E3888((uint64_t)&v603, (uint64_t)v568);
            if (v570 < 0)
              operator delete(v569[1]);
            if (SHIBYTE(v569[0]) < 0)
              operator delete(v568[0]);
            if (v567)
              llvm::MetadataTracking::untrack((uint64_t)&v567, v567);
            if (v318 != *(_QWORD *)(*(_QWORD *)v307 + 8 * v307[2] - 8))
            {
              v571 = ", ";
              v572 = 2;
              sub_1C53B17B4((uint64_t)&v612, (const void **)&v571);
            }
            v316 += 8;
            v317 -= 8;
          }
          while (v317);
        }
        v571 = ".";
        v572 = 1;
        sub_1C53B17B4((uint64_t)&v612, (const void **)&v571);
        sub_1C61998EC((uint64_t)&v618, (uint64_t)&v603);
        v618 = (llvm *)&off_1E814E500;
        v568[0] = " [";
        v568[1] = (void *)2;
        sub_1C53B17B4((uint64_t)&v624, (const void **)v568);
        v568[0] = "OMP150";
        v568[1] = (void *)6;
        sub_1C53B17B4((uint64_t)&v624, (const void **)v568);
        v568[0] = "]";
        v568[1] = (void *)1;
        sub_1C53B17B4((uint64_t)&v624, (const void **)v568);
        sub_1C61998EC((uint64_t)&v596, (uint64_t)&v618);
        v596 = &off_1E814E500;
        v618 = (llvm *)&off_1E814E790;
        v320 = (char *)v624;
        if (v625)
        {
          v321 = (unint64_t)v625 << 6;
          do
          {
            v322 = (void **)&v320[v321];
            if (v320[v321 - 17] < 0)
              operator delete(*(v322 - 5));
            if (*((char *)v322 - 41) < 0)
              operator delete(*(v322 - 8));
            v321 -= 64;
          }
          while (v321);
          v320 = (char *)v624;
        }
        if (v320 != (char *)v626)
          free(v320);
        v603 = &off_1E814E790;
        v323 = (char *)v612;
        if ((_DWORD)v613)
        {
          v324 = (unint64_t)v613 << 6;
          do
          {
            v325 = (void **)&v323[v324];
            if (v323[v324 - 17] < 0)
              operator delete(*(v325 - 5));
            if (*((char *)v325 - 41) < 0)
              operator delete(*(v325 - 8));
            v324 -= 64;
          }
          while (v324);
          v323 = (char *)v612;
        }
        if (v323 != v614)
          free(v323);
        llvm::OptimizationRemarkEmitter::emit(v309, (llvm::DiagnosticInfoOptimizationBase *)&v596);
        v596 = &off_1E814E790;
        v326 = (char *)v600;
        if (v601)
        {
          v327 = (unint64_t)v601 << 6;
          do
          {
            v328 = (void **)&v326[v327];
            if (v326[v327 - 17] < 0)
              operator delete(*(v328 - 5));
            if (*((char *)v328 - 41) < 0)
              operator delete(*(v328 - 8));
            v327 -= 64;
          }
          while (v327);
          v326 = (char *)v600;
        }
        if (v326 != v602)
          free(v326);
      }
      v556 = (llvm::Function *)*((_QWORD *)v533 + 7);
      v329 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v307 + 8 * v307[2] - 8) + 32);
      if (v329)
        v330 = v329 == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v307 + 8 * v307[2] - 8) + 40) + 40;
      else
        v330 = 1;
      if (v330)
        v331 = 0;
      else
        v331 = (llvm::BasicBlock *)(v329 - 24);
      v622[0] = 257;
      v332 = (llvm *)sub_1C5EBD70C(v533, v331, 0, v563, v564, 0, (llvm::Twine *)&v618, 0);
      v561 = v332;
      v333 = (_QWORD *)((char *)v332 + 40);
      for (k = (_QWORD *)*((_QWORD *)v332 + 6); ; k = (_QWORD *)k[1])
      {
        if (k == v333)
          goto LABEL_614;
        v335 = k - 3;
        if (!k)
          v335 = 0;
        if (*((_BYTE *)v335 + 16) != 83)
          break;
      }
      v336 = *((unsigned __int8 *)k - 8) - 38;
      v119 = v336 > 0x38;
      v337 = (1 << v336) & 0x100060000000001;
      if (v119 || v337 == 0)
        v333 = k;
      else
        v333 = (_QWORD *)k[1];
LABEL_614:
      if (v333)
        v339 = (llvm::BasicBlock *)(v333 - 3);
      else
        v339 = 0;
      v622[0] = 257;
      v532 = (llvm::BasicBlock *)sub_1C5EBD70C(v332, v339, 0, v563, v564, 0, (llvm::Twine *)&v618, 0);
      v340 = **(llvm::BasicBlock ***)v307;
      v618 = (llvm *)"omp.par.merged";
      v622[0] = 259;
      v562 = sub_1C5EBD70C(v533, v340, 0, v563, v564, 0, (llvm::Twine *)&v618, 0);
      v341 = (_QWORD *)*((_QWORD *)v533 + 5);
      v342 = v341 - 3;
      if (!v341)
        v342 = 0;
      if (*((unsigned __int8 *)v342 + 16) - 29 >= 0xB)
        v342 = 0;
      v343 = (unsigned __int8 *)v342[6];
      v565 = v343;
      if (v343)
      {
        llvm::MetadataTracking::track((uint64_t)&v565, v343, 2);
        v341 = (_QWORD *)*v544;
      }
      if (v341 == v544)
      {
        v344 = 0;
      }
      else
      {
        if (v341)
          v345 = (uint64_t ***)(v341 - 3);
        else
          v345 = 0;
        if (*((unsigned __int8 *)v345 + 16) - 29 >= 0xB)
          v344 = 0;
        else
          v344 = v345;
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v344[5] + 5), v344);
      v346 = v344[3];
      v347 = v344[4];
      *v347 = (uint64_t *)v346;
      v346[1] = (uint64_t *)v347;
      v344[3] = 0;
      v344[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v344);
      v348 = *(llvm::BasicBlock ***)v307;
      v349 = *(_QWORD *)v307 + 8 * v307[2] - 8;
      v554 = v307;
      v536 = v349;
      if (*(_QWORD *)v307 == v349)
        goto LABEL_632;
LABEL_643:
      v355 = *v348;
      v357 = v348[1];
      ++v348;
      v356 = v357;
      v359 = (char *)v355 + 32;
      v358 = *((_QWORD *)v355 + 4);
      v360 = *((_QWORD *)v359 + 1) + 40;
      if (v358)
        v361 = v358 == v360;
      else
        v361 = 1;
      if (v361)
        v362 = 0;
      else
        v362 = (llvm::BasicBlock *)(v358 - 24);
      if (v362 == v356)
        goto LABEL_650;
      v549 = v348;
      v363 = *((_QWORD *)v356 + 3);
      if (v363)
        v364 = v363 - 24;
      else
        v364 = 0;
      v365 = (_QWORD *)*((_QWORD *)v362 + 5);
      v571 = 0;
      v367 = v364 + 32;
      v366 = *(_QWORD *)(v364 + 32);
      v368 = *(_QWORD *)(v367 + 8) + 40;
      if (v366)
        v369 = v366 == v368;
      else
        v369 = 1;
      if (v369)
        v370 = 0;
      else
        v370 = (llvm::BasicBlock *)(v366 - 24);
      v622[0] = 257;
      v371 = (char *)sub_1C5EBD70C((llvm *)v365, v370, 0, v563, v564, 0, (llvm::Twine *)&v618, 0);
      v571 = v371;
      v372 = v371 + 40;
      for (m = (_QWORD *)*((_QWORD *)v371 + 6); ; m = (_QWORD *)m[1])
      {
        if (m == v372)
          goto LABEL_672;
        v374 = m - 3;
        if (!m)
          v374 = 0;
        if (*((_BYTE *)v374 + 16) != 83)
          break;
      }
      v375 = *((unsigned __int8 *)m - 8) - 38;
      v119 = v375 > 0x38;
      v376 = (1 << v375) & 0x100060000000001;
      if (v119 || v376 == 0)
        v372 = m;
      else
        v372 = (_QWORD *)m[1];
LABEL_672:
      if (v372)
        v378 = (llvm::BasicBlock *)(v372 - 3);
      else
        v378 = 0;
      v622[0] = 257;
      v545 = (llvm::BasicBlock *)sub_1C5EBD70C((llvm *)v371, v378, 0, v563, v564, 0, (llvm::Twine *)&v618, 0);
      v567 = 0;
      v618 = (llvm *)"seq.par.merged";
      v622[0] = 259;
      v379 = (unsigned __int8 *)sub_1C5EBD70C((llvm *)v365, v362, 0, v563, v564, 0, (llvm::Twine *)&v618, 0);
      v381 = v365 + 5;
      v380 = (_QWORD *)v365[5];
      v382 = v380 - 3;
      if (!v380)
        v382 = 0;
      if (*((unsigned __int8 *)v382 + 16) - 29 >= 0xB)
        v382 = 0;
      v383 = (unsigned __int8 *)v382[6];
      v566 = v383;
      v567 = v379;
      if (v383)
      {
        llvm::MetadataTracking::track((uint64_t)&v566, v383, 2);
        v380 = (_QWORD *)*v381;
      }
      v539 = v365 + 5;
      v543 = (llvm::OptimizationRemarkEmitter *)v365;
      if (v380 == v381)
      {
        v384 = 0;
      }
      else
      {
        if (v380)
          v385 = (uint64_t ***)(v380 - 3);
        else
          v385 = 0;
        if (*((unsigned __int8 *)v385 + 16) - 29 >= 0xB)
          v384 = 0;
        else
          v384 = v385;
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v384[5] + 5), v384);
      v386 = v384[3];
      v387 = v384[4];
      *v387 = (uint64_t *)v386;
      v386[1] = (uint64_t *)v387;
      v384[3] = 0;
      v384[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v384);
      v596 = &v563;
      *(_QWORD *)&__len = &v564;
      *((_QWORD *)&__len + 1) = &v567;
      v598 = &v571;
      v388 = v567 + 40;
      for (n = *((_QWORD *)v567 + 6); ; n = *(_QWORD *)(n + 8))
      {
        if ((unsigned __int8 *)n == v388)
        {
          v603 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v543;
          v604 = (uint64_t)v539;
          v605 = (char *)v566;
          if (v566)
            llvm::MetadataTracking::track((uint64_t)&v605, v566, 2);
          v87 = a1;
          v444 = (uint64_t *)(*(_QWORD *)(a1 + 64) + 616);
          v618 = (llvm *)&off_1E817C128;
          v621 = &v618;
          v445 = llvm::OpenMPIRBuilder::createMaster(v444, (uint64_t *)&v603, (void (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, llvm::BasicBlock *))sub_1C574572C, (uint64_t)&v596, &v618);
          v447 = v446;
          v448 = v621;
          v307 = v554;
          if (v621 == &v618)
          {
            v449 = (void (**)(llvm **))((char *)v618 + 32);
            v448 = &v618;
            goto LABEL_758;
          }
          if (v621)
          {
            v449 = (void (**)(llvm **))((char *)*v621 + 40);
LABEL_758:
            (*v449)(v448);
          }
          v450 = *(_QWORD *)(a1 + 64) + 616;
          v568[0] = v445;
          v568[1] = v447;
          v569[0] = 0;
          llvm::OpenMPIRBuilder::createBarrier(v450, (uint64_t *)v568, 40, 0, 1);
          if (v569[0])
            llvm::MetadataTracking::untrack((uint64_t)v569, v569[0]);
          v451 = operator new(0x60uLL);
          v451[13] = v451[13] & 0x38000000 | 1;
          *(_QWORD *)v451 = 0;
          *((_QWORD *)v451 + 1) = 0;
          *((_QWORD *)v451 + 2) = 0;
          *((_QWORD *)v451 + 3) = v451 + 8;
          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v451 + 8), v545, v445);
          if (v605)
            llvm::MetadataTracking::untrack((uint64_t)&v605, (unsigned __int8 *)v605);
          if (v566)
            llvm::MetadataTracking::untrack((uint64_t)&v566, v566);
          v348 = v549;
          v349 = v536;
LABEL_650:
          if (v348 == (llvm::BasicBlock **)v349)
          {
LABEL_632:
            v568[0] = v533;
            v568[1] = v544;
            v569[0] = v565;
            if (v565)
              llvm::MetadataTracking::track((uint64_t)v569, v565, 2);
            v350 = *((_QWORD *)v556 + 10);
            if (v350)
              v351 = v350 - 24;
            else
              v351 = 0;
            v352 = v351 + 40;
            for (ii = *(_QWORD *)(v351 + 48); ii != v352; ii = *(_QWORD *)(ii + 8))
            {
              v354 = ii - 24;
              if (!ii)
                v354 = 0;
              if (*(_BYTE *)(v354 + 16) != 83)
              {
                v452 = *(unsigned __int8 *)(ii - 8) - 38;
                v119 = v452 > 0x38;
                v453 = (1 << v452) & 0x100060000000001;
                if (v119 || v453 == 0)
                  v352 = ii;
                else
                  v352 = *(_QWORD *)(ii + 8);
                break;
              }
            }
            v455 = *(_QWORD *)(v87 + 64) + 616;
            v596 = &off_1E817C170;
            v598 = &v596;
            Parallel = (llvm::BasicBlock *)llvm::OpenMPIRBuilder::createParallel(v455, (uint64_t *)v568, v351, v352, (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t *))sub_1C5745874, v560, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1C5745964, (uint64_t)&v559, (llvm::Value *)&v596, 0, 0, 6u, 0);
            v457 = v598;
            if (v598 == &v596)
            {
              v458 = (void (**)(void *))((char *)v596 + 32);
              v457 = &v596;
              goto LABEL_776;
            }
            if (v598)
            {
              v458 = (void (**)(void *))(*(_QWORD *)v598 + 40);
LABEL_776:
              (*v458)(v457);
            }
            v459 = operator new(0x60uLL);
            v459[13] = v459[13] & 0x38000000 | 1;
            *(_QWORD *)v459 = 0;
            *((_QWORD *)v459 + 1) = 0;
            *((_QWORD *)v459 + 2) = 0;
            *((_QWORD *)v459 + 3) = v459 + 8;
            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v459 + 8), v532, Parallel);
            llvm::OpenMPIRBuilder::finalize((llvm::OpenMPIRBuilder *)(*(_QWORD *)(v87 + 64) + 616), v556);
            v460 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)v307 + 40) + 56);
            v618 = (llvm *)&v620;
            v619 = (void *)0x800000000;
            v461 = v307[2];
            if ((_DWORD)v461)
            {
              v462 = *(llvm::BasicBlock ***)v307;
              v546 = (llvm::BasicBlock *)(*(_QWORD *)v307 + 8 * v461);
              v550 = v460;
              do
              {
                v463 = *v462;
                v464 = ((_QWORD *)*v462 - 4 * (*((_DWORD *)*v462 + 5) & 0x7FFFFFF))[8];
                v465 = *(uint64_t ***)(*(_QWORD *)(v87 + 64) + 2880);
                LODWORD(v619) = 0;
                if ((*(_BYTE *)(v460 + 18) & 1) != 0)
                {
                  llvm::Function::BuildLazyArguments((llvm::Function *)v460);
                  v466 = v619;
                }
                else
                {
                  v466 = 0;
                }
                v467 = *(_QWORD *)(v460 + 88);
                if (v466 >= HIDWORD(v619))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v618, (uint64_t)&v620, v466 + 1, 8);
                  v466 = v619;
                }
                *((_QWORD *)v618 + v466) = v467;
                v468 = (_DWORD)v619 + 1;
                LODWORD(v619) = (_DWORD)v619 + 1;
                if ((*(_WORD *)(v460 + 18) & 1) != 0)
                {
                  llvm::Function::BuildLazyArguments((llvm::Function *)v460);
                  v468 = v619;
                }
                v469 = *(_QWORD *)(v460 + 88);
                if (v468 >= HIDWORD(v619))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v618, (uint64_t)&v620, v468 + 1, 8);
                  v468 = v619;
                }
                *((_QWORD *)v618 + v468) = v469 + 40;
                v470 = (_DWORD)v619 + 1;
                LODWORD(v619) = (_DWORD)v619 + 1;
                v471 = *((unsigned __int8 *)v463 + 16);
                if (v471 == 84)
                {
                  v472 = 0;
                }
                else if (v471 == 39)
                {
                  v472 = (*((_DWORD *)v463 + 20) + 1);
                }
                else
                {
                  v472 = 2;
                }
                v473 = *((_DWORD *)v463 + 5);
                if (v473 < 0
                  && (v513 = (uint64_t)v463 - 32 * (v473 & 0x7FFFFFF),
                      v514 = *(_QWORD *)(v513 - 8),
                      (v514 & 0xFFFFFFFF0) != 0))
                {
                  v475 = -(uint64_t)(v473 & 0x7FFFFFF);
                  v474 = (*(_DWORD *)(v513 - 12) - *(_DWORD *)(v513 - v514));
                }
                else
                {
                  v474 = 0;
                  v475 = -(uint64_t)(v473 & 0x7FFFFFF);
                }
                v476 = -32 * v472 - 32 * v474 - 32 * v475 - 32;
                if ((v476 & 0x1FFFFFFF80) != 0)
                {
                  v477 = (v476 >> 5) - 3;
                  v478 = (uint64_t)v463 + 96;
                  do
                  {
                    v479 = *(_QWORD *)(v478 - 32 * (*((_DWORD *)v463 + 5) & 0x7FFFFFF));
                    if (v470 >= HIDWORD(v619))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v618, (uint64_t)&v620, v470 + 1, 8);
                      v470 = v619;
                    }
                    *((_QWORD *)v618 + v470) = v479;
                    v470 = (_DWORD)v619 + 1;
                    LODWORD(v619) = (_DWORD)v619 + 1;
                    v478 += 32;
                    --v477;
                  }
                  while (v477);
                }
                v480 = (uint64_t *)v618;
                v481 = v470 + 1;
                WORD4(v606) = 257;
                v482 = operator new(32 * v481 + 80);
                v483 = &v482[4 * v481];
                v484 = *((_DWORD *)v483 + 5) & 0x38000000 | v481 & 0x7FFFFFF;
                *((_DWORD *)v483 + 5) = v484;
                if (v470 != -1)
                {
                  do
                  {
                    *v482 = 0;
                    v482[1] = 0;
                    v482[2] = 0;
                    v482[3] = v483;
                    v482 += 4;
                  }
                  while (v482 != v483);
                  v484 = *((_DWORD *)v483 + 5);
                }
                *v483 = *v465[2];
                v483[1] = 0;
                *((_BYTE *)v483 + 16) = 84;
                *((_BYTE *)v483 + 17) = 0;
                *((_WORD *)v483 + 9) = 0;
                *((_DWORD *)v483 + 5) = v484 & 0xC0000000 | v481 & 0x7FFFFFF;
                *(_OWORD *)(v483 + 3) = 0u;
                v485 = v483 + 3;
                *(_OWORD *)(v483 + 5) = 0u;
                *((_DWORD *)v483 + 14) = 0;
                if (v463)
                {
                  v509 = *((_QWORD *)v463 + 5);
                  v483[5] = v509;
                  *(_WORD *)(v509 + 18) &= ~0x8000u;
                  if ((*((_BYTE *)v483 + 23) & 0x10) != 0)
                  {
                    v511 = *(_QWORD *)(v509 + 56);
                    if (v511)
                    {
                      v512 = *(llvm::ValueSymbolTable **)(v511 + 104);
                      if (v512)
                        llvm::ValueSymbolTable::reinsertValue(v512, (llvm::Value *)v483);
                    }
                  }
                  v510 = *((_QWORD *)v463 + 3);
                  v483[3] = v510;
                  v483[4] = (char *)v463 + 24;
                  *(_QWORD *)(v510 + 8) = v485;
                  *((_QWORD *)v463 + 3) = v485;
                }
                v483[8] = 0;
                llvm::CallInst::init((uint64_t ***)v483, v465, v464, v480, v470, 0, 0, (uint64_t)&v603);
                v486 = (unsigned __int8 *)*((_QWORD *)v463 + 6);
                if (v486)
                {
                  v571 = (const char *)*((_QWORD *)v463 + 6);
                  llvm::MetadataTracking::track((uint64_t)&v571, v486, 2);
                  v487 = (unsigned __int8 *)v483[6];
                  if (v487)
                    llvm::MetadataTracking::untrack((uint64_t)(v483 + 6), v487);
                  v488 = (unsigned __int8 *)v571;
                  v483[6] = v571;
                  if (v488)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v571, v488, (uint64_t)(v483 + 6));
                    v571 = 0;
                  }
                }
                v489 = *((unsigned __int8 *)v463 + 16);
                if (v489 == 84)
                {
                  v490 = 0;
                }
                else if (v489 == 39)
                {
                  v490 = (*((_DWORD *)v463 + 20) + 1);
                }
                else
                {
                  v490 = 2;
                }
                v491 = *((_DWORD *)v463 + 5);
                if (v491 < 0
                  && (v515 = (uint64_t)v463 - 32 * (v491 & 0x7FFFFFF),
                      v516 = *(_QWORD *)(v515 - 8),
                      (v516 & 0xFFFFFFFF0) != 0))
                {
                  v493 = -(uint64_t)(v491 & 0x7FFFFFF);
                  v492 = (*(_DWORD *)(v515 - 12) - *(_DWORD *)(v515 - v516));
                }
                else
                {
                  v492 = 0;
                  v493 = -(uint64_t)(v491 & 0x7FFFFFF);
                }
                v494 = -32 * v490 - 32 * v492 - 32 * v493 - 32;
                if ((v494 & 0x1FFFFFFF80) != 0)
                {
                  v495 = (v494 >> 5);
                  v496 = 3;
                  do
                  {
                    v497 = *((_QWORD *)v463 + 8);
                    if (v497)
                    {
                      if ((v496 + 2) < *(_DWORD *)(v497 + 8))
                      {
                        v498 = *(_QWORD *)(v497 + 8 * (v496 + 2) + 40);
                        if (v498)
                        {
                          v499 = *(unsigned int *)(v498 + 8);
                          if ((_DWORD)v499)
                          {
                            v500 = (uint64_t *)(v498 + 48);
                            v501 = 8 * v499;
                            do
                            {
                              v502 = *v500++;
                              LODWORD(v603) = v496 - 1;
                              v483[8] = llvm::AttributeList::addParamAttribute(v483 + 8, *(uint64_t **)*v483, &v603, 1, v502);
                              v501 -= 8;
                            }
                            while (v501);
                          }
                        }
                      }
                    }
                    ++v496;
                  }
                  while (v496 != v495);
                }
                v460 = v550;
                v307 = v554;
                v87 = a1;
                if (v463 != *(llvm::BasicBlock **)(*(_QWORD *)v554 + 8 * v554[2] - 8))
                {
                  v505 = v483[4];
                  v506 = *(_QWORD *)(a1 + 64) + 616;
                  v507 = !v505 || v505 == v483[5] + 40;
                  v508 = v507 ? 0 : v505 - 24;
                  v603 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v483[5];
                  v604 = v508 + 24;
                  v605 = 0;
                  llvm::OpenMPIRBuilder::createBarrier(v506, (uint64_t *)&v603, 40, 0, 1);
                  if (v605)
                    llvm::MetadataTracking::untrack((uint64_t)&v605, (unsigned __int8 *)v605);
                }
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v463 + 5) + 40, (uint64_t ***)v463);
                v503 = *((_QWORD *)v463 + 3);
                v504 = (_QWORD *)*((_QWORD *)v463 + 4);
                *v504 = v503;
                *(_QWORD *)(v503 + 8) = v504;
                *((_QWORD *)v463 + 3) = 0;
                *((_QWORD *)v463 + 4) = 0;
                llvm::Value::deleteValue(v463);
                ++v462;
              }
              while (v462 != (llvm::BasicBlock **)v546);
            }
            llvm::CallGraphUpdater::registerOutlinedFunction(*(llvm::CallGraphUpdater **)(v87 + 40), v556, (llvm::Function *)v460);
            llvm::CallGraphUpdater::reanalyzeFunction(*(llvm::CallGraphUpdater **)(v87 + 40), v556);
            if (v618 != (llvm *)&v620)
              free(v618);
            v286 = v531;
            if (v569[0])
              llvm::MetadataTracking::untrack((uint64_t)v569, v569[0]);
            if (v565)
              llvm::MetadataTracking::untrack((uint64_t)&v565, v565);
            v307 += 12;
            if (v307 == v530)
            {
              if (DWORD2(v576))
              {
                v517 = v576;
                v518 = 48 * DWORD2(v576);
                do
                {
                  v519 = *(void **)(v517 + v518 - 48);
                  if ((void *)(v517 + v518 - 32) != v519)
                    free(v519);
                  v518 -= 48;
                }
                while (v518);
              }
              DWORD2(v576) = 0;
              v287 = 1;
              goto LABEL_861;
            }
            goto LABEL_550;
          }
          goto LABEL_643;
        }
        if (n)
          v390 = n - 24;
        else
          v390 = 0;
        v618 = (llvm *)v622;
        v619 = v622;
        v620 = 4;
        LODWORD(v621) = 0;
        v391 = *(_QWORD *)(v390 + 8);
        if (!v391)
          goto LABEL_748;
        do
        {
          v392 = *(unsigned __int8 ***)(v391 + 24);
          if (!llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v392) && v392[5] != v567)
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v618, (uint64_t)v392);
          v391 = *(_QWORD *)(v391 + 8);
        }
        while (v391);
        if (HIDWORD(v620) == (_DWORD)v621)
          goto LABEL_748;
        v393 = *(_QWORD *)(a1 + 24);
        v394 = operator new(0x68uLL);
        v395 = (llvm::Value *)(v394 + 8);
        v394[13] = v394[13] & 0x38000000 | 1;
        *(_QWORD *)v394 = 0;
        *((_QWORD *)v394 + 1) = 0;
        *((_QWORD *)v394 + 2) = 0;
        *((_QWORD *)v394 + 3) = v394 + 8;
        v396 = *(llvm::PointerType **)v390;
        v397 = v390 >> 4;
        if ((*(_BYTE *)(v390 + 23) & 0x10) != 0)
          break;
        v407 = 0;
        v408 = &byte_1C871356D;
LABEL_709:
        v410 = (llvm::Type *)*(unsigned int *)(v393 + 276);
        WORD4(v606) = 773;
        v603 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v408;
        v604 = v407;
        v605 = ".seq.output.alloc";
        v411 = *((_QWORD *)v556 + 10);
        if (v411)
          v412 = v411 - 24;
        else
          v412 = 0;
        v413 = *(_QWORD *)(v412 + 48);
        if (v413)
          v414 = v413 - 24;
        else
          v414 = 0;
        llvm::AllocaInst::AllocaInst((uint64_t)(v394 + 8), v396, v410, 0, (uint64_t)&v603, v414);
        v415 = operator new(0x80uLL);
        v416 = (llvm::StoreInst *)(v415 + 16);
        v415[21] = v415[21] & 0x38000000 | 2;
        *(_QWORD *)v415 = 0;
        *((_QWORD *)v415 + 1) = 0;
        *((_QWORD *)v415 + 2) = 0;
        *((_QWORD *)v415 + 3) = v415 + 16;
        *((_QWORD *)v415 + 4) = 0;
        *((_QWORD *)v415 + 5) = 0;
        *((_QWORD *)v415 + 6) = 0;
        *((_QWORD *)v415 + 7) = v415 + 16;
        v417 = (unsigned __int8 *)*((_QWORD *)v567 + 5);
        if (v417 == v567 + 40)
        {
          v419 = 0;
        }
        else
        {
          if (v417)
            v418 = v417 - 24;
          else
            v418 = 0;
          if (v418[16] - 29 >= 0xB)
            v419 = 0;
          else
            v419 = (llvm::Instruction *)v418;
        }
        llvm::StoreInst::StoreInst(v416, (llvm::Value *)v390, v395, 0, v419);
        if (v619 == v618)
          v420 = (uint64_t *)((char *)&v620 + 4);
        else
          v420 = &v620;
        v421 = *(unsigned int *)v420;
        if ((_DWORD)v421)
        {
          v422 = 8 * v421;
          v423 = (unint64_t *)v619;
          while (*v423 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v423;
            v422 -= 8;
            if (!v422)
              goto LABEL_748;
          }
        }
        else
        {
          v423 = (unint64_t *)v619;
        }
        v424 = (unint64_t *)((char *)v619 + 8 * v421);
        if (v423 != v424)
        {
          v425 = (llvm::User *)*v423;
          v426 = v397 ^ (v390 >> 9);
LABEL_734:
          v427 = operator new(0x60uLL);
          v428 = (llvm::Value *)(v427 + 8);
          v427[13] = v427[13] & 0x38000000 | 1;
          *(_QWORD *)v427 = 0;
          *((_QWORD *)v427 + 1) = 0;
          *((_QWORD *)v427 + 2) = 0;
          *((_QWORD *)v427 + 3) = v427 + 8;
          v429 = *(llvm::PointerType **)v390;
          if ((*(_BYTE *)(v390 + 23) & 0x10) != 0)
          {
            v430 = **(_QWORD **)v429;
            v431 = *(_QWORD *)(v430 + 152);
            v432 = *(unsigned int *)(v430 + 168);
            if (!(_DWORD)v432)
              goto LABEL_741;
            LODWORD(v433) = (v432 - 1) & v426;
            v434 = (uint64_t *)(v431 + 16 * v433);
            v435 = *v434;
            if (*v434 != v390)
            {
              v436 = 1;
              while (v435 != -4096)
              {
                v437 = v433 + v436++;
                v433 = v437 & (v432 - 1);
                v435 = *(_QWORD *)(v431 + 16 * v433);
                if (v435 == v390)
                {
                  v434 = (uint64_t *)(v431 + 16 * v433);
                  goto LABEL_742;
                }
              }
LABEL_741:
              v434 = (uint64_t *)(v431 + 16 * v432);
            }
LABEL_742:
            v438 = (_QWORD *)v434[1];
            v441 = *v438;
            v440 = (char *)(v438 + 2);
            v439 = v441;
          }
          else
          {
            v439 = 0;
            v440 = &byte_1C871356D;
          }
          WORD4(v606) = 773;
          v603 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v440;
          v604 = v439;
          v605 = ".seq.output.load";
          llvm::LoadInst::LoadInst((uint64_t)(v427 + 8), (uint64_t)v429, (uint64_t)v395, (uint64_t)&v603, 0, (uint64_t)v425);
          llvm::User::replaceUsesOfWith(v425, (llvm::Value *)v390, v428);
          v442 = v423 + 1;
          while (v442 != v424)
          {
            v443 = *v442++;
            v425 = (llvm::User *)v443;
            if (v443 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v423 = v442 - 1;
              goto LABEL_734;
            }
          }
        }
LABEL_748:
        if (v619 != v618)
          free(v619);
      }
      v398 = **(_QWORD **)v396;
      v399 = *(_QWORD *)(v398 + 152);
      v400 = *(unsigned int *)(v398 + 168);
      if ((_DWORD)v400)
      {
        LODWORD(v401) = (v400 - 1) & (v397 ^ (v390 >> 9));
        v402 = (uint64_t *)(v399 + 16 * v401);
        v403 = *v402;
        if (*v402 == v390)
        {
LABEL_708:
          v406 = (_QWORD *)v402[1];
          v409 = *v406;
          v408 = (char *)(v406 + 2);
          v407 = v409;
          goto LABEL_709;
        }
        v404 = 1;
        while (v403 != -4096)
        {
          v405 = v401 + v404++;
          v401 = v405 & (v400 - 1);
          v403 = *(_QWORD *)(v399 + 16 * v401);
          if (v403 == v390)
          {
            v402 = (uint64_t *)(v399 + 16 * v401);
            goto LABEL_708;
          }
        }
      }
      v402 = (uint64_t *)(v399 + 16 * v400);
      goto LABEL_708;
    }
  }
LABEL_270:
  if (!byte_1ED80DAC8)
  {
    v179 = *(_QWORD *)(*(_QWORD *)(v87 + 64) + 29568);
    v180 = *(uint64_t **)(v179 + 24);
    v537 = *(uint64_t **)(v179 + 32);
    if (v180 != v537)
    {
      v541 = 0;
      while (1)
      {
        v538 = v180;
        v548 = *v180 + 72;
        v553 = *v180;
        v181 = *(_QWORD *)(*v180 + 80);
        if (v181 != v548)
          break;
LABEL_487:
        v180 = v538 + 1;
        if (v538 + 1 == v537)
          goto LABEL_488;
      }
      while (1)
      {
        v182 = v181 - 24;
        v183 = v181 == 0;
        if (!v181)
          v182 = 0;
        v581[0] = &v582;
        v581[1] = (void *)0x800000000;
        *(_QWORD *)__dst = v580;
        *(_QWORD *)&__dst[8] = v580;
        *(_QWORD *)&__dst[16] = 8;
        v579 = 0;
        v184 = *(_QWORD *)(v553 + 80);
        if (v184)
          v183 = v184 - 24 == v182;
        if (v183)
        {
          v582 = 0uLL;
          LODWORD(v581[1]) = 1;
        }
        v185 = v182 + 40;
        v186 = *(_QWORD *)(v182 + 48);
        if (v186 == v182 + 40)
          goto LABEL_482;
        do
        {
          if (v186)
            v187 = v186 - 24;
          else
            v187 = 0;
          v188 = *(unsigned __int8 *)(v187 + 16);
          if (v188 > 0x26)
          {
            if (v188 != 39 && v188 != 84)
              goto LABEL_303;
LABEL_291:
            v189 = *(_QWORD *)(v186 - 56);
            if (v189
              && !*(_BYTE *)(v189 + 16)
              && *(_QWORD *)(v189 + 24) == *(_QWORD *)(v186 + 48)
              && *(_DWORD *)(v189 + 36) >> 2 == 1695
              || (v618 = (llvm *)"ompx_aligned_barrier",
                  v619 = (void *)20,
                  sub_1C4F024D8((llvm::StringMapImpl *)&llvm::KnownAssumptionStrings, "ompx_aligned_barrier", 0x14uLL),
                  llvm::hasAssumption(v186 - 24, (uint64_t)&v618)))
            {
              v190 = LODWORD(v581[1]);
              if (LODWORD(v581[1]) >= (unint64_t)HIDWORD(v581[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v581, (uint64_t)&v582, LODWORD(v581[1]) + 1, 16);
                v190 = LODWORD(v581[1]);
              }
              *((_QWORD *)v581[0] + 2 * v190) = v187;
LABEL_302:
              ++LODWORD(v581[1]);
              goto LABEL_303;
            }
            goto LABEL_303;
          }
          if (v188 == 29)
          {
            v191 = LODWORD(v581[1]);
            if (LODWORD(v581[1]) >= (unint64_t)HIDWORD(v581[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v581, (uint64_t)&v582, LODWORD(v581[1]) + 1, 16);
              v191 = LODWORD(v581[1]);
            }
            *((_OWORD *)v581[0] + v191) = xmmword_1C64632D0;
            goto LABEL_302;
          }
          if (v188 == 33)
            goto LABEL_291;
LABEL_303:
          v186 = *(_QWORD *)(v186 + 8);
        }
        while (v186 != v185);
        if (LODWORD(v581[1]) >= 2)
        {
          v192 = (uint64_t *)v581[0];
          v193 = (uint64_t *)((char *)v581[0] + 16 * LODWORD(v581[1]) - 16);
          while (1)
          {
            if (v192 == v193)
            {
              if (*(_DWORD *)&__dst[20] != v579)
              {
                if (*(_QWORD *)&__dst[8] == *(_QWORD *)__dst)
                  v245 = *(unsigned int *)&__dst[20];
                else
                  v245 = *(unsigned int *)&__dst[16];
                if ((_DWORD)v245)
                {
                  v246 = 8 * v245;
                  v247 = *(unint64_t **)&__dst[8];
                  while (*v247 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v247;
                    v246 -= 8;
                    if (!v246)
                      goto LABEL_481;
                  }
                }
                else
                {
                  v247 = *(unint64_t **)&__dst[8];
                }
                v248 = *(_QWORD *)&__dst[8] + 8 * v245;
                if (v247 != (unint64_t *)v248)
                {
                  v249 = *v247;
LABEL_443:
                  if (byte_1ED80DDC8)
                  {
                    v250 = (llvm::OptimizationRemarkEmitter *)(*(uint64_t (**)(_QWORD, _QWORD))(v87 + 48))(*(_QWORD *)(v87 + 56), *(_QWORD *)(*(_QWORD *)(v249 + 40) + 56));
                    v251 = ****(_QWORD ****)v250;
                    if (*(_QWORD *)(v251 + 128)
                      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v251 + 72) + 48))(*(_QWORD *)(v251 + 72)))
                    {
                      v542 = v250;
                      v256 = *(unsigned __int8 **)(*(_QWORD *)(v249 + 40) + 56);
                      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v576, (const llvm::DebugLoc *)(v249 + 48));
                      v257 = *(_QWORD *)(v249 + 40);
                      LODWORD(v604) = 9;
                      BYTE4(v604) = 2;
                      v606 = v576;
                      v605 = (char *)v256;
                      v607 = "openmp-opt";
                      v608 = "OMP190";
                      v609 = 6;
                      v610 = 0;
                      v611 = 0;
                      v612 = v614;
                      v613 = 0x400000000;
                      v615 = 0;
                      v616 = -1;
                      v617 = v257;
                      v603 = &off_1E814E500;
                      *(_QWORD *)&v576 = "Redundant barrier eliminated.";
                      *((_QWORD *)&v576 + 1) = 29;
                      sub_1C53B17B4((uint64_t)&v612, (const void **)&v576);
                      sub_1C61998EC((uint64_t)&v618, (uint64_t)&v603);
                      v618 = (llvm *)&off_1E814E500;
                      *(_QWORD *)&v576 = " [";
                      *((_QWORD *)&v576 + 1) = 2;
                      sub_1C53B17B4((uint64_t)&v624, (const void **)&v576);
                      *(_QWORD *)&v576 = "OMP190";
                      *((_QWORD *)&v576 + 1) = 6;
                      sub_1C53B17B4((uint64_t)&v624, (const void **)&v576);
                      *(_QWORD *)&v576 = "]";
                      *((_QWORD *)&v576 + 1) = 1;
                      sub_1C53B17B4((uint64_t)&v624, (const void **)&v576);
                      sub_1C61998EC((uint64_t)&v596, (uint64_t)&v618);
                      v596 = &off_1E814E500;
                      v618 = (llvm *)&off_1E814E790;
                      v258 = (char *)v624;
                      if (v625)
                      {
                        v259 = (unint64_t)v625 << 6;
                        do
                        {
                          v260 = (void **)&v258[v259];
                          if (v258[v259 - 17] < 0)
                            operator delete(*(v260 - 5));
                          if (*((char *)v260 - 41) < 0)
                            operator delete(*(v260 - 8));
                          v259 -= 64;
                        }
                        while (v259);
                        v258 = (char *)v624;
                        v87 = a1;
                      }
                      if (v258 != (char *)v626)
                        free(v258);
                      v603 = &off_1E814E790;
                      v261 = (char *)v612;
                      if ((_DWORD)v613)
                      {
                        v262 = (unint64_t)v613 << 6;
                        do
                        {
                          v263 = (void **)&v261[v262];
                          if (v261[v262 - 17] < 0)
                            operator delete(*(v263 - 5));
                          if (*((char *)v263 - 41) < 0)
                            operator delete(*(v263 - 8));
                          v262 -= 64;
                        }
                        while (v262);
                        v261 = (char *)v612;
                        v87 = a1;
                      }
                      if (v261 != v614)
                        free(v261);
                      llvm::OptimizationRemarkEmitter::emit(v542, (llvm::DiagnosticInfoOptimizationBase *)&v596);
                      v596 = &off_1E814E790;
                      v264 = (char *)v600;
                      if (v601)
                      {
                        v265 = (unint64_t)v601 << 6;
                        do
                        {
                          v266 = (void **)&v264[v265];
                          if (v264[v265 - 17] < 0)
                            operator delete(*(v266 - 5));
                          if (*((char *)v266 - 41) < 0)
                            operator delete(*(v266 - 8));
                          v265 -= 64;
                        }
                        while (v265);
                        v264 = (char *)v600;
                        v87 = a1;
                      }
                      if (v264 != v602)
                        free(v264);
                    }
                  }
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v249 + 40) + 40, (uint64_t ***)v249);
                  v252 = *(_QWORD *)(v249 + 24);
                  v253 = *(_QWORD **)(v249 + 32);
                  *v253 = v252;
                  *(_QWORD *)(v252 + 8) = v253;
                  *(_QWORD *)(v249 + 24) = 0;
                  *(_QWORD *)(v249 + 32) = 0;
                  llvm::Value::deleteValue((llvm::Value *)v249);
                  v254 = v247 + 1;
                  while (v254 != (unint64_t *)v248)
                  {
                    v255 = *v254++;
                    v249 = v255;
                    if (v255 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      v247 = v254 - 1;
                      goto LABEL_443;
                    }
                  }
                }
LABEL_481:
                v541 = 1;
              }
              break;
            }
            v194 = v192;
            v196 = v192[2];
            v192 += 2;
            v195 = (uint64_t ***)v196;
            v197 = *v194;
            if (*v194)
              goto LABEL_308;
            if (v195)
            {
              if (!*((_DWORD *)v194 + 2))
              {
                v205 = *(_QWORD *)(v553 + 80);
                if (v205)
                  v206 = v205 - 24;
                else
                  v206 = 0;
                v207 = *(_QWORD *)(v206 + 48);
                if (v207)
                  v201 = (uint64_t ***)(v207 - 24);
                else
                  v201 = 0;
                goto LABEL_333;
              }
LABEL_308:
              v198 = *(_QWORD *)(v197 + 32);
              v199 = (uint64_t ***)(v198 - 24);
              if (v198)
                v200 = v198 == *(_QWORD *)(v197 + 40) + 40;
              else
                v200 = 1;
              if (v200)
                v201 = 0;
              else
                v201 = (uint64_t ***)(v198 - 24);
              if (!v195)
              {
                if (*((_DWORD *)v194 + 6) != 1)
                {
                  v195 = 0;
                  goto LABEL_333;
                }
                v202 = v201[5];
                v203 = (uint64_t **)v202[5];
                if (v203 != v202 + 5)
                {
                  if (v203)
                    v204 = (uint64_t ***)(v203 - 3);
                  else
                    v204 = 0;
                  if (*((unsigned __int8 *)v204 + 16) - 29 >= 0xB)
                    v195 = 0;
                  else
                    v195 = v204;
                  v201 = v199;
                  goto LABEL_333;
                }
                v195 = 0;
LABEL_334:
                while (2)
                {
                  v208 = *((unsigned __int8 *)v199 + 16) - 33;
                  if (v208 > 0x37)
                    goto LABEL_338;
                  if (((1 << (*((_BYTE *)v199 + 16) - 33)) & 0x808001D0000010) != 0)
                    break;
                  if (((1 << (*((_BYTE *)v199 + 16) - 33)) & 0x8000000000041) != 0)
                  {
                    v210 = v199[8];
                    if (v210 && (*((_BYTE *)v210 + 17) & 0x30) != 0)
                      goto LABEL_338;
                    v211 = *((_DWORD *)v199 + 5);
                    if (v211 < 0
                      && (v236 = &v199[-4 * (v211 & 0x7FFFFFF)],
                          v239 = (uint64_t)*(v236 - 1),
                          v237 = v236 - 1,
                          (v238 = v239) != 0))
                    {
                      v240 = -v238;
                      while (1)
                      {
                        v241 = (*(_DWORD **)((char *)v237 + v240))[2];
                        v119 = v241 > 7;
                        v242 = (1 << v241) & 0x83;
                        if (v119 || v242 == 0)
                          break;
                        v240 += 16;
                        if (!v240)
                          goto LABEL_349;
                      }
                    }
                    else
                    {
LABEL_349:
                      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v199, 45) & 1) != 0
                        || llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v199, 44))
                      {
                        goto LABEL_338;
                      }
                    }
                  }
                  else
                  {
                    if (v208 == 27 && (*((_WORD *)v199 + 9) & 0x301) != 0)
                      break;
LABEL_338:
                    if ((llvm::Instruction::mayThrow((llvm::Instruction *)v199) & 1) != 0
                      || !llvm::Instruction::willReturn((llvm::Instruction *)v199))
                    {
                      break;
                    }
                    v209 = *((unsigned __int8 *)v199 + 16) - 33;
                    if (v209 > 0x37)
                    {
LABEL_400:
                      v232 = v199[4];
                      if (v232)
                        v233 = v232 == v199[5] + 5;
                      else
                        v233 = 1;
                      if (v233)
                        v199 = 0;
                      else
                        v199 = (uint64_t ***)(v232 - 3);
                      if (v199 == v195)
                      {
                        v197 = *v194;
                        goto LABEL_427;
                      }
                      continue;
                    }
                    if (((1 << (*((_BYTE *)v199 + 16) - 33)) & 0x8000000000041) == 0)
                    {
                      if (((1 << (*((_BYTE *)v199 + 16) - 33)) & 0x808001C8000010) != 0
                        || v209 == 28 && (*((_WORD *)v199 + 9) & 0x301) != 0)
                      {
                        break;
                      }
                      goto LABEL_400;
                    }
                    v212 = v199[8];
                    if (v212 && ((*((_BYTE *)v212 + 20) & 4) != 0 || (*((_BYTE *)v212 + 17) & 0x10) != 0))
                      goto LABEL_400;
                    LODWORD(v618) = 7;
                    if (sub_1C53E4BBC((uint64_t)v199, (__int32 *)&v618, 1uLL))
                    {
                      v244 = (uint64_t)*(v199 - 4);
                      if (!v244 || *(_BYTE *)(v244 + 16) || *(uint64_t ***)(v244 + 24) != v199[9])
                      {
                        v87 = a1;
                        break;
                      }
                      v87 = a1;
                      if (*(_DWORD *)(v244 + 36) != 7)
                        break;
                    }
                    if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v199, 66) & 1) != 0
                      || (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v199, 44) & 1) != 0)
                    {
                      goto LABEL_400;
                    }
                  }
                  break;
                }
                v213 = sub_1C4DE85D0((uint64_t)v199);
                if (v199 && v213)
                {
                  llvm::MemoryLocation::getForArgument((uint64_t)v199, 0, 0, (uint64_t)&v618);
                  if (!v618)
                    continue;
                  UnderlyingObject = (unsigned __int8 *)llvm::getUnderlyingObject(v618, (const llvm::Value *)6);
                  if (!UnderlyingObject)
                    continue;
                  v215 = UnderlyingObject[16];
                  if ((v215 - 11) >= 2
                    && v215 != 59
                    && (v215 != 3
                     || (UnderlyingObject[80] & 1) == 0
                     && (UnderlyingObject[33] & 0x1C) == 0
                     && (*(_DWORD *)(*(_QWORD *)UnderlyingObject + 8) & 0xFFFFFE00) != 0x400))
                  {
                    continue;
                  }
                  if (!sub_1C56E895C((uint64_t)v199))
                    goto LABEL_400;
                  llvm::MemoryLocation::getForArgument((uint64_t)v199, 1u, 0, (uint64_t)&v618);
LABEL_388:
                  if (!v618)
                    continue;
                  v230 = (unsigned __int8 *)llvm::getUnderlyingObject(v618, (const llvm::Value *)6);
                  if (!v230)
                    continue;
                  v231 = v230[16];
                  if ((v231 - 11) >= 2
                    && v231 != 59
                    && (v231 != 3
                     || (v230[80] & 1) == 0
                     && (v230[33] & 0x1C) == 0
                     && (*(_DWORD *)(*(_QWORD *)v230 + 8) & 0xFFFFFE00) != 0x400))
                  {
                    continue;
                  }
                  goto LABEL_400;
                }
                if (v199 && *((_BYTE *)v199 + 16) == 60 && (*((_BYTE *)v199 + 23) & 0x20) != 0)
                {
                  v216 = ***v199;
                  v618 = (llvm *)v199;
                  v217 = *(_DWORD *)(v216 + 2496);
                  if (!v217)
                  {
                    v234 = 0;
                    goto LABEL_411;
                  }
                  v218 = *(_QWORD *)(v216 + 2480);
                  v219 = v217 - 1;
                  v220 = v219 & ((v199 >> 4) ^ (v199 >> 9));
                  v221 = (_QWORD *)(v218 + 40 * v220);
                  v222 = (_QWORD ***)*v221;
                  if ((uint64_t ***)*v221 != v199)
                  {
                    v223 = 0;
                    v224 = 1;
                    while (v222 != (_QWORD ***)-4096)
                    {
                      if (v223)
                        v225 = 0;
                      else
                        v225 = v222 == (_QWORD ***)-8192;
                      if (v225)
                        v223 = v221;
                      v226 = v220 + v224++;
                      v220 = v226 & v219;
                      v221 = (_QWORD *)(v218 + 40 * v220);
                      v222 = (_QWORD ***)*v221;
                      if ((uint64_t ***)*v221 == v199)
                        goto LABEL_383;
                    }
                    if (v223)
                      v234 = v223;
                    else
                      v234 = v221;
LABEL_411:
                    v221 = sub_1C541AB24(v216 + 2480, (uint64_t)&v618, (uint64_t *)&v618, v234);
                    v235 = v618;
                    v221[4] = 0;
                    v221[3] = 0;
                    *v221 = v235;
                    v221[1] = v221 + 3;
                    v221[2] = 0x100000000;
                  }
LABEL_383:
                  v227 = *((unsigned int *)v221 + 4);
                  if ((_DWORD)v227)
                  {
                    v228 = (_QWORD *)(v221[1] + 8);
                    v229 = 16 * v227;
                    while (*((_DWORD *)v228 - 2) != 6)
                    {
                      v228 += 2;
                      v229 -= 16;
                      if (!v229)
                        goto LABEL_387;
                    }
                    if (*v228)
                      goto LABEL_400;
                  }
                }
LABEL_387:
                llvm::MemoryLocation::getOrNone(v199, (uint64_t)&v618);
                if (!v623)
                  continue;
                goto LABEL_388;
              }
LABEL_333:
              v199 = v201;
              if (v201 != v195)
                goto LABEL_334;
LABEL_427:
              if (!v197)
                v197 = *v192;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)__dst, v197);
            }
          }
        }
LABEL_482:
        if (*(_QWORD *)&__dst[8] != *(_QWORD *)__dst)
          free(*(void **)&__dst[8]);
        if (v581[0] != &v582)
          free(v581[0]);
        v181 = *(_QWORD *)(v181 + 8);
        if (v181 == v548)
          goto LABEL_487;
      }
    }
  }
  v541 = 0;
LABEL_488:
  LOBYTE(v2) = v527 | v541;
  return v2 & 1;
}

uint64_t sub_1C5723C98(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  MEMORY[0x1CAA32FB4](a1[3697], 8);
  MEMORY[0x1CAA32FB4](a1[3648], 8);
  v2 = 0;
  v3 = a1 + 3268;
  do
  {
    sub_1C629CCBC((uint64_t)&v3[v2 + 377]);
    MEMORY[0x1CAA32FB4](a1[v2 + 3645], 8);
    v4 = (_QWORD *)a1[v2 + 3634];
    if (&v3[v2 + 368] != v4)
      free(v4);
    v2 -= 19;
  }
  while (v2 != -3268);
  llvm::OpenMPIRBuilder::~OpenMPIRBuilder((llvm::OpenMPIRBuilder *)(a1 + 77));
  return sub_1C56826A4((uint64_t)a1);
}

void llvm::initializeOpenMPOptCGSCCLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831EE8);
  if (v2 != -1)
  {
    v5[0] = sub_1C5723D94;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831EE8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5723D94(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeCallGraphWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "OpenMP specific optimizations";
  *(_QWORD *)(v3 + 8) = 29;
  *(_QWORD *)(v3 + 16) = "openmp-opt-cgscc";
  *(_QWORD *)(v3 + 24) = 16;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F3300;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C57459CC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5723E28(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F3300;
  *(_DWORD *)(a1 + 24) = 3;
  *(_QWORD *)a1 = &off_1E817C1B8;
  *(_QWORD *)(a1 + 32) = a1 + 64;
  *(_QWORD *)(a1 + 40) = a1 + 64;
  *(_QWORD *)(a1 + 48) = 16;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 208;
  *(_QWORD *)(a1 + 200) = 0x1000000000;
  *(_QWORD *)(a1 + 336) = a1 + 352;
  *(_QWORD *)(a1 + 344) = 0x1000000000;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_QWORD *)(a1 + 528) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831EE8);
  if (v3 != -1)
  {
    v7[0] = sub_1C5723D94;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831EE8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5723F38(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E817B4E8;
  *(_QWORD *)(a1 + 32) = &unk_1E817B578;
  v2 = *(void **)(a1 + 184);
  if (v2 != (void *)(a1 + 200))
    free(v2);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C5723FAC(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_1E817B4E8;
  *(_QWORD *)(a1 + 32) = &unk_1E817B578;
  v2 = *(void **)(a1 + 184);
  if (v2 != (void *)(a1 + 200))
    free(v2);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5724030(_QWORD *result)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = result;
  v2 = result[2] & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*((_DWORD *)result + 4) & 3) == 0)
    v2 = *(_QWORD *)(v2 + 24);
  if (*(_BYTE *)(v2 + 16))
  {
    if (*(_BYTE *)(v2 + 16) == 21)
      v3 = (unint64_t *)(v2 + 24);
    else
      v3 = (unint64_t *)(*(_QWORD *)(v2 + 40) + 56);
    v2 = *v3;
  }
  v4 = v2 + 72;
  v5 = *(_QWORD *)(v2 + 80);
  if (v5 != v2 + 72)
  {
    do
    {
      v6 = v5 - 24;
      if (!v5)
        v6 = 0;
      v7 = v6;
      result = sub_1C61EA984((uint64_t)(v1 + 6), &v7);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
  }
  v1[41] = *((unsigned int *)v1 + 48);
  return result;
}

void sub_1C57240DC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string __p;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  std::to_string(&v14, *(unsigned int *)(a1 + 192));
  v4 = std::string::insert(&v14, 0, "[AAExecutionDomain] ");
  v5 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v15, "/");
  v7 = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(_QWORD *)(a1 + 328));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v16, (const std::string::value_type *)p_p, size);
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v17, " BBs thread 0 only.");
  *a2 = *v12;
  v12->__r_.__value_.__r.__words[0] = 0;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

uint64_t sub_1C5724228()
{
  return 1;
}

BOOL sub_1C5724234(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t *v6;
  _BYTE *v7;
  int v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v36;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  unsigned int v48;
  uint64_t v49;
  llvm::APInt *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  int v61;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[2];
  char v69;
  char *v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;

  v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v4 = *(_QWORD *)(v4 + 24);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (*(_BYTE *)(v4 + 16))
  {
    if (v5 == 21)
    {
      v6 = (unint64_t *)(v4 + 24);
LABEL_8:
      v4 = *v6;
      goto LABEL_10;
    }
    if (v5 >= 0x1C)
    {
      v6 = (unint64_t *)(*(_QWORD *)(v4 + 40) + 56);
      goto LABEL_8;
    }
    v4 = 0;
  }
LABEL_10:
  v72 = 0;
  v73 = v4;
  v70 = 0;
  v71 = 0;
  sub_1C5643D14(&v70, (uint64_t)&v73);
  v7 = (_BYTE *)(a1 + 48);
  v8 = *(_DWORD *)(a1 + 192);
  v68[0] = a2;
  v68[1] = a1;
  if ((llvm::Attributor::checkForAllCallSites(a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1C5724804, (uint64_t)v68, a1, 1, &v69) & 1) == 0)
  {
    v63 = *(_QWORD *)(v73 + 80);
    if (v63)
      v64 = v63 - 24;
    else
      v64 = 0;
    v67 = v64;
    sub_1C61EAE50(a1 + 48, &v67);
  }
  v10 = v70;
  v9 = v71;
  if (v71 != v70)
  {
    v65 = v8;
    v66 = *(_QWORD *)(a2 + 88) + 25232;
    while (1)
    {
      v12 = *((_QWORD *)v9 - 1);
      v9 -= 8;
      v11 = v12;
      v67 = v12;
      v13 = *(_QWORD *)(v12 + 8);
      v14 = v13;
      if (v13)
      {
        while (1)
        {
          v15 = *(_QWORD *)(v14 + 24);
          v16 = *(unsigned __int8 *)(v15 + 16);
          v17 = v15 && v16 >= 0x1C;
          v18 = !v17 || v16 - 29 > 0xA;
          if (!v18)
            break;
          v14 = *(_QWORD *)(v14 + 8);
          if (!v14)
            goto LABEL_23;
        }
        while (1)
        {
          v22 = *(_QWORD *)(v13 + 24);
          v23 = *(unsigned __int8 *)(v22 + 16);
          v24 = v22 && v23 >= 0x1C;
          if (v24 && v23 - 29 <= 0xA)
            break;
          v13 = *(_QWORD *)(v13 + 8);
          if (!v13)
            goto LABEL_115;
        }
        v26 = 1;
LABEL_35:
        v27 = *(_QWORD *)(v22 + 40);
        v28 = *(_QWORD *)(v27 + 40);
        if (v28 == v27 + 40)
          goto LABEL_101;
        v29 = v28 - 24;
        if (!v28)
          v29 = 0;
        v30 = *(unsigned __int8 *)(v29 + 16) - 40;
        if (v30 < 0xFFFFFFF5)
          v29 = 0;
        if (!v28)
          goto LABEL_101;
        v31 = *(_BYTE *)(v29 + 16) == 30 && v30 >= 0xFFFFFFF5;
        if (!v31 || (*(_DWORD *)(v29 + 20) & 0x7FFFFFF) != 3 || *(_QWORD *)(v29 - 32) != v11)
          goto LABEL_101;
        v32 = *(_QWORD *)(v29 - 96);
        v33 = *(unsigned __int8 *)(v32 + 16);
        v34 = v32 && v33 >= 0x1C;
        if (!v34 || v33 - 83 < 0xFFFFFFFE)
          goto LABEL_101;
        v36 = *(_WORD *)(v32 + 18) & 0x3F;
        if (v36 > 0x29 || ((1 << v36) & 0x2A90000AA00) == 0)
          goto LABEL_101;
        if (v36 - 32 >= 0xA)
        {
          if (v36 != 14 && v36 != 9)
            goto LABEL_101;
        }
        else if ((*(_WORD *)(v32 + 18) & 0x3E) != 0x20)
        {
          goto LABEL_101;
        }
        v38 = *(_QWORD *)(v32 - 32);
        if (v38)
          v39 = *(_BYTE *)(v38 + 16) == 16;
        else
          v39 = 0;
        if (!v39)
          goto LABEL_101;
        if (llvm::Constant::isAllOnesValue(*(llvm::Constant **)(v32 - 32)))
        {
          v40 = *(_QWORD *)(v32 - 64);
          v41 = *(unsigned __int8 *)(v40 + 16);
          if (v41 >= 0x1C)
          {
            v42 = v41 - 33;
            v18 = v42 > 0x33;
            v43 = (1 << v42) & 0x8000000000041;
            if (!v18 && v43 != 0)
            {
              v45 = sub_1C5724C80(v40, v66);
              if (v45)
              {
                v46 = *(_QWORD *)(v45 - 32 * (*(_DWORD *)(v45 + 20) & 0x7FFFFFF) + 32);
                if (v46 && *(_BYTE *)(v46 + 16) == 16)
                {
                  v48 = *(_DWORD *)(v46 + 32);
                  v49 = v48 > 0x40
                      ? **(_QWORD **)(v46 + 24)
                      : (uint64_t)(*(_QWORD *)(v46 + 24) << -(char)v48) >> -(char)v48;
                  if ((v49 & 1) != 0)
                    goto LABEL_105;
                }
              }
            }
          }
LABEL_101:
          v55 = sub_1C629C374(a1 + 48, v27);
          if ((*v7 & 1) != 0)
          {
            v56 = a1 + 56;
            v57 = 16;
          }
          else
          {
            v56 = *(_QWORD *)(a1 + 56);
            v57 = *(unsigned int *)(a1 + 64);
          }
          v26 &= v56 + 8 * v57 != v55;
          goto LABEL_105;
        }
        v50 = (llvm::APInt *)(v38 + 24);
        v51 = *(_DWORD *)(v38 + 32);
        if (v51 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v50) != v51)
            goto LABEL_101;
        }
        else if (*(_QWORD *)v50)
        {
          goto LABEL_101;
        }
        v52 = *(_QWORD *)(v32 - 64);
        if (*(_BYTE *)(v52 + 16) != 84)
          goto LABEL_101;
        v53 = *(_QWORD *)(v52 - 32);
        if (!v53 || *(_BYTE *)(v53 + 16) || *(_QWORD *)(v53 + 24) != *(_QWORD *)(v52 + 72))
          goto LABEL_101;
        if (((*(_BYTE *)(v53 + 33) & 0x20) == 0 || *(_DWORD *)(v53 + 36) != 7247)
          && ((*(_BYTE *)(v53 + 33) & 0x20) == 0 || *(_DWORD *)(v53 + 36) != 3587))
        {
          goto LABEL_101;
        }
LABEL_105:
        while (1)
        {
          v13 = *(_QWORD *)(v13 + 8);
          if (!v13)
            break;
          v22 = *(_QWORD *)(v13 + 24);
          v58 = *(unsigned __int8 *)(v22 + 16);
          if (v22)
            v59 = v58 >= 0x1C;
          else
            v59 = 0;
          if (v59 && v58 - 29 < 0xB)
            goto LABEL_35;
        }
        if ((v26 & 1) != 0)
          goto LABEL_115;
      }
      else
      {
LABEL_23:
        v19 = sub_1C629C374(a1 + 48, v11);
        if ((*v7 & 1) != 0)
        {
          v20 = a1 + 56;
          v21 = 16;
        }
        else
        {
          v20 = *(_QWORD *)(a1 + 56);
          v21 = *(unsigned int *)(a1 + 64);
        }
        if (v20 + 8 * v21 != v19)
          goto LABEL_115;
      }
      sub_1C61EAE50(a1 + 48, &v67);
LABEL_115:
      if (v9 == v10)
      {
        v9 = v70;
        v8 = v65;
        break;
      }
    }
  }
  v61 = *(_DWORD *)(a1 + 192);
  if (v9)
  {
    v71 = v9;
    operator delete(v9);
  }
  return v8 == v61;
}

uint64_t sub_1C5724698(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 120))(a1, *(_QWORD *)(a2 + 40));
}

uint64_t sub_1C57246A8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  if ((_DWORD)result)
  {
    v5 = sub_1C629C374(a1 + 48, a2);
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    {
      v6 = a1 + 56;
      v7 = 16;
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 56);
      v7 = *(unsigned int *)(a1 + 64);
    }
    return v6 + 8 * v7 != v5;
  }
  return result;
}

uint64_t *sub_1C5724710(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 - 32) = off_1E817B4E8;
  *(_QWORD *)a1 = &unk_1E817B578;
  v2 = *(void **)(a1 + 152);
  if (v2 != (void *)(a1 + 168))
    free(v2);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C572477C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)(a1 - 32) = off_1E817B4E8;
  *(_QWORD *)a1 = &unk_1E817B578;
  v2 = *(void **)(a1 + 152);
  if (v2 != (void *)(a1 + 168))
    free(v2);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5724804(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  llvm::AbstractAttribute *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a2;
  v9 = *a2;
  v10 = &v12;
  v11 = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1C614C900((uint64_t)&v10, (uint64_t)(a2 + 1));
    v3 = v9;
  }
  v4 = sub_1C57248C0(*a1, *(_QWORD *)(*(_QWORD *)(v3 + 40) + 56), 0, a1[1], 0);
  v5 = 0;
  if (!(_DWORD)v11)
  {
    v6 = *(unsigned __int8 *)(*(_QWORD *)(v9 - 32) + 16);
    if (v6 < 0x15 || v6 == 24)
      v5 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v4 + 112))(v4);
    else
      v5 = 0;
  }
  if (v10 != &v12)
    free(v10);
  return v5;
}

llvm::AbstractAttribute *sub_1C57248C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  llvm::Attributor *v9;
  llvm::AbstractAttribute *v10;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t *v16;
  uint64_t v17;
  _BOOL4 v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  void **v25;
  void **v26;
  uint64_t *v27;
  void **v28;
  size_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  void *v35[2];
  char v36;
  void *__p[2];
  char v38;
  __int128 v39;

  if (byte_1ED831CE0)
    v8 = a3;
  else
    v8 = 0;
  *(_QWORD *)&v39 = a2;
  *((_QWORD *)&v39 + 1) = v8;
  v10 = (llvm::AbstractAttribute *)sub_1C56AF02C(a1, &v39, a4, a5, 1);
  if (v10)
    return v10;
  v10 = (llvm::AbstractAttribute *)llvm::AAExecutionDomain::createForPosition((llvm::AAExecutionDomain *)&v39, (const llvm::IRPosition *)a1, v9);
  sub_1C629C308(a1, (uint64_t)v10);
  v12 = *(uint64_t **)(a1 + 5480);
  if (v12)
  {
    __p[0] = &llvm::AAExecutionDomain::ID;
    v35[0] = 0;
    v13 = sub_1C614F7B0(v12, __p, v35) ^ 1;
  }
  else
  {
    v13 = 0;
  }
  v14 = v39 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v39 & 3) == 0)
    v14 = *(_QWORD *)(v14 + 24);
  v15 = *(unsigned __int8 *)(v14 + 16);
  if (!*(_BYTE *)(v14 + 16))
    goto LABEL_16;
  if (v15 == 21)
  {
    v16 = (uint64_t *)(v14 + 24);
  }
  else
  {
    if (v15 < 0x1C)
    {
      v14 = 0;
      goto LABEL_23;
    }
    v16 = (uint64_t *)(*(_QWORD *)(v14 + 40) + 56);
  }
  v14 = *v16;
  if (!*v16)
  {
LABEL_23:
    v19 = 1;
    goto LABEL_28;
  }
LABEL_16:
  v17 = *(_QWORD *)(v14 + 112);
  if (v17 && ((*(_BYTE *)(v17 + 14) & 2) != 0 || (*(_BYTE *)(v17 + 17) & 8) != 0))
  {
    v18 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v18 = 0;
  }
  else
  {
    v20 = *(_QWORD **)(a1 + 88);
    v21 = sub_1C477672C((uint64_t)v20, v14);
    v22 = v20[1];
    v23 = 16;
    if (v22 == *v20)
      v23 = 20;
    v18 = v21 == (_QWORD *)(v22 + 8 * *(unsigned int *)((char *)v20 + v23));
  }
  v19 = 0;
  LOBYTE(v13) = (v18 | v13) != 0;
LABEL_28:
  if ((v13 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_55;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v10 + 72))(v35, v10);
  if (v36 >= 0)
    v24 = v36 & 0x7F;
  else
    v24 = (size_t)v35[1];
  v25 = __p;
  sub_1C484371C((uint64_t)__p, v24 + 12);
  if (v38 < 0)
    v25 = (void **)__p[0];
  if (v24)
  {
    if (v36 >= 0)
      v26 = v35;
    else
      v26 = (void **)v35[0];
    memmove(v25, v26, v24);
  }
  strcpy((char *)v25 + v24, "::initialize");
  v27 = (uint64_t *)off_1EF8EEB50();
  if (*v27)
  {
    if (v38 >= 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if (v38 >= 0)
      v29 = v38 & 0x7F;
    else
      v29 = (size_t)__p[1];
    llvm::timeTraceProfilerBegin(v28, v29, (uint64_t)"", 0);
  }
  if (v38 < 0)
    operator delete(__p[0]);
  if (v36 < 0)
    operator delete(v35[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v10 + 24))(v10, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v27)
  {
    sub_1C6392DC0(*v27);
    if ((v19 & 1) != 0)
      goto LABEL_54;
  }
  else if ((v19 & 1) != 0)
  {
    goto LABEL_54;
  }
  v33 = *(uint64_t **)(a1 + 80);
  __p[0] = (void *)v14;
  v35[0] = 0;
  if ((sub_1C614F7B0(v33, __p, v35) & 1) == 0)
  {
    v34 = *(uint64_t **)(a1 + 80);
    __p[0] = (void *)sub_1C5676C10((llvm::IRPosition *)&v39);
    v35[0] = 0;
    if ((sub_1C614F7B0(v34, __p, v35) & 1) == 0)
      goto LABEL_55;
  }
LABEL_54:
  v30 = *(_DWORD *)(a1 + 4368);
  if (v30 == 2)
  {
LABEL_55:
    v31 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v10 + 40))(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 40))(v31);
    return v10;
  }
  *(_DWORD *)(a1 + 4368) = 1;
  llvm::Attributor::updateAA((llvm::Attributor *)a1, v10);
  *(_DWORD *)(a1 + 4368) = v30;
  if (a4)
  {
    v32 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v10 + 40))(v10);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32))
      llvm::Attributor::recordDependence(a1, (uint64_t)v10, a4, a5);
  }
  return v10;
}

uint64_t sub_1C5724C80(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_BYTE *)(result + 16) != 84)
    return 0;
  v2 = *(_DWORD *)(result + 20);
  if (v2 < 0 && (*(_QWORD *)(result - 32 * (v2 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0)
    return 0;
  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 120);
    if (!v3)
      return 0;
    v4 = *(_QWORD *)(result - 32);
    if (!v4 || *(_BYTE *)(v4 + 16) || *(_QWORD *)(v4 + 24) != *(_QWORD *)(result + 72))
      v4 = 0;
    if (v4 != v3)
      return 0;
  }
  return result;
}

#error "1C5724CEC: too big function (funcsize=0)"

void sub_1C57351CC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v2 = *(_QWORD *)(a2 + 120);
  if (v2)
  {
    llvm::OpenMPIRBuilder::addAttributes((uint64_t)(a1 + 77), *(_DWORD *)a2, v2);
    for (i = *(_QWORD *)(*(_QWORD *)(a2 + 120) + 8); i; i = *(_QWORD *)(i + 8))
    {
      v6 = *(_QWORD *)(i + 24);
      if (v6)
        v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
      else
        v7 = 0;
      if (v7)
      {
        v10 = sub_1C477672C((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v6 + 40) + 56));
        v11 = a1[1];
        if (v11 == *a1)
          v12 = 20;
        else
          v12 = 16;
        if (v10 == (_QWORD *)(v11 + 8 * *(unsigned int *)((char *)a1 + v12)))
          continue;
        v9 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 56);
        v8 = a2;
      }
      else
      {
        v8 = a2;
        v9 = 0;
      }
      v13 = sub_1C57352CC(v8, v9);
      v14 = v13;
      v15 = *(unsigned int *)(v13 + 8);
      if (v15 >= *(unsigned int *)(v13 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v13 + 16, v15 + 1, 8);
        v15 = *(unsigned int *)(v14 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v14 + 8 * v15) = i;
      ++*(_DWORD *)(v14 + 8);
    }
  }
}

uint64_t sub_1C57352CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;

  v8 = a2;
  v2 = sub_1C629C4F8(a1 + 128, &v8);
  if (!v2[1])
  {
    v4 = operator new(0xA8uLL);
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E817B5F0;
    v4[3] = v4 + 5;
    v4[4] = 0x1000000000;
    v5 = (std::__shared_weak_count *)v2[2];
    v2[1] = v4 + 3;
    v2[2] = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return v2[1];
}

_QWORD *sub_1C573537C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C629C614(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1C5735440(uint64_t *a1, int a2)
{
  int v2;
  int v3;
  int v4;
  _BOOL8 v5;
  llvm::GlobalValue *v9;
  int v10;
  llvm::GlobalValue *v11;
  int v12;
  llvm::GlobalValue *v13;
  int v14;
  llvm::GlobalValue *v15;
  int v16;
  llvm::GlobalValue *v17;
  int v18;
  llvm::GlobalValue *v19;
  int v20;
  int v21;
  llvm::GlobalValue *v22;
  int v23;
  int v24;
  llvm::GlobalValue *v25;
  llvm::GlobalValue *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t i;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t j;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  llvm::Attributor *v86;
  uint64_t v87;
  uint64_t v88;
  llvm::GlobalValue *v89;
  int v90;
  unsigned int v91;
  int v92;
  unsigned int v93;
  int v94;
  unsigned int v95;
  int v96;
  unsigned int v97;
  int v98;
  unsigned int v99;
  int v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  char hasExternalWeakLinkage;
  char v105;
  llvm::GlobalValue *v106;
  int v107;
  llvm::GlobalValue *v108;
  int v109;
  llvm::GlobalValue *v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  llvm::GlobalValue *v116;
  llvm::GlobalValue *v117;
  llvm::GlobalValue *v118;
  llvm::GlobalValue *v119;
  BOOL v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;

  if (!*(_DWORD *)(a1[4] + 8))
    return 0;
  v9 = *(llvm::GlobalValue **)(a1[8] + 25960);
  if (v9)
  {
    v10 = *((_DWORD *)v9 + 8);
    v2 = v10 & 0xF;
    *((_DWORD *)v9 + 8) = v10 & 0xFFFFFFF0;
    if ((v10 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v9) & 1) == 0)
      *((_DWORD *)v9 + 8) |= 0x4000u;
  }
  v11 = *(llvm::GlobalValue **)(a1[8] + 26112);
  if (v11)
  {
    v12 = *((_DWORD *)v11 + 8);
    v3 = v12 & 0xF;
    *((_DWORD *)v11 + 8) = v12 & 0xFFFFFFF0;
    if ((v12 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v11) & 1) == 0)
      *((_DWORD *)v11 + 8) |= 0x4000u;
  }
  v13 = *(llvm::GlobalValue **)(a1[8] + 28392);
  if (v13)
  {
    v14 = *((_DWORD *)v13 + 8);
    v4 = v14 & 0xF;
    *((_DWORD *)v13 + 8) = v14 & 0xFFFFFFF0;
    if ((v14 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v13) & 1) == 0)
      *((_DWORD *)v13 + 8) |= 0x4000u;
  }
  v15 = *(llvm::GlobalValue **)(a1[8] + 28544);
  if (v15)
  {
    v16 = *((_DWORD *)v15 + 8);
    v115 = v16 & 0xF;
    *((_DWORD *)v15 + 8) = v16 & 0xFFFFFFF0;
    if ((v16 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v15) & 1) == 0)
      *((_DWORD *)v15 + 8) |= 0x4000u;
  }
  v17 = *(llvm::GlobalValue **)(a1[8] + 3920);
  if (v17)
  {
    v18 = *((_DWORD *)v17 + 8);
    v114 = v18 & 0xF;
    *((_DWORD *)v17 + 8) = v18 & 0xFFFFFFF0;
    if ((v18 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v17) & 1) == 0)
      *((_DWORD *)v17 + 8) |= 0x4000u;
  }
  v19 = *(llvm::GlobalValue **)(a1[8] + 5136);
  if (v19)
  {
    v20 = *((_DWORD *)v19 + 8);
    v113 = v20 & 0xF;
    *((_DWORD *)v19 + 8) = v20 & 0xFFFFFFF0;
    if ((v20 & 0x30) != 0)
    {
      v116 = v9;
      v21 = v4;
      v22 = v11;
      v23 = v2;
      v24 = v3;
      v25 = v19;
      if ((llvm::GlobalValue::hasExternalWeakLinkage(v19) & 1) == 0)
        *((_DWORD *)v25 + 8) |= 0x4000u;
      v19 = v25;
      v3 = v24;
      v2 = v23;
      v11 = v22;
      v4 = v21;
      v9 = v116;
    }
  }
  v118 = v17;
  v119 = v19;
  v26 = *(llvm::GlobalValue **)(a1[8] + 5288);
  if (v26)
  {
    v27 = *((_DWORD *)v26 + 8);
    *((_DWORD *)v26 + 8) = v27 & 0xFFFFFFF0;
    v112 = v27 & 0xF;
    if ((v27 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v26) & 1) == 0)
      *((_DWORD *)v26 + 8) |= 0x4000u;
  }
  v28 = a1[4];
  v29 = *(unsigned int *)(v28 + 8);
  if ((_DWORD)v29)
  {
    v106 = v15;
    v107 = v4;
    v108 = v13;
    v111 = v2;
    v117 = v9;
    v30 = a1[8];
    if (a2)
    {
      v121 = a1;
      v31 = v30 + 25232;
      v32 = *(uint64_t **)v28;
      v33 = 8 * v29;
      do
      {
        v34 = *v32++;
        sub_1C5735FC4(v31, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C5736128, (uint64_t)&v121, v34);
        v33 -= 8;
      }
      while (v33);
      v35 = a1[4];
      v36 = *(unsigned int *)(v35 + 8);
      v30 = a1[8];
      v37 = v30 + 28880;
      v122 = v30 + 28880;
      v123 = a1;
      if ((_DWORD)v36)
      {
        v38 = *(uint64_t **)v35;
        v39 = 8 * v36;
        do
        {
          v40 = *v38++;
          sub_1C5735FC4(v37, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C573F5B4, (uint64_t)&v122, v40);
          v39 -= 8;
        }
        while (v39);
        v30 = a1[8];
        v35 = a1[4];
      }
      v41 = v30 + 28120;
      v122 = v30 + 28120;
      v123 = a1;
      v42 = *(unsigned int *)(v35 + 8);
      if ((_DWORD)v42)
      {
        v43 = *(uint64_t **)v35;
        v44 = 8 * v42;
        do
        {
          v45 = *v43++;
          sub_1C5735FC4(v41, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C573F5B4, (uint64_t)&v122, v45);
          v44 -= 8;
        }
        while (v44);
        v30 = a1[8];
        v35 = a1[4];
      }
      v46 = v30 + 27968;
      v122 = v30 + 27968;
      v123 = a1;
      v47 = *(unsigned int *)(v35 + 8);
      if ((_DWORD)v47)
      {
        v48 = *(uint64_t **)v35;
        v49 = 8 * v47;
        do
        {
          v50 = *v48++;
          sub_1C5735FC4(v46, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C573F5B4, (uint64_t)&v122, v50);
          v49 -= 8;
        }
        while (v49);
        v30 = a1[8];
        v35 = a1[4];
      }
      v51 = v30 + 5016;
      v122 = v30 + 5016;
      v123 = a1;
      v52 = *(unsigned int *)(v35 + 8);
      if ((_DWORD)v52)
      {
        v53 = *(uint64_t **)v35;
        v54 = 8 * v52;
        do
        {
          v55 = *v53++;
          sub_1C5735FC4(v51, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C573F5B4, (uint64_t)&v122, v55);
          v54 -= 8;
        }
        while (v54);
        v30 = a1[8];
        v35 = a1[4];
      }
      v56 = v30 + 4864;
      v122 = v30 + 4864;
      v123 = a1;
      v57 = *(unsigned int *)(v35 + 8);
      if ((_DWORD)v57)
      {
        v58 = *(uint64_t **)v35;
        v59 = 8 * v57;
        do
        {
          v60 = *v58++;
          sub_1C5735FC4(v56, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C573F5B4, (uint64_t)&v122, v60);
          v59 -= 8;
        }
        while (v59);
        v30 = a1[8];
      }
    }
    v109 = v3;
    v110 = v11;
    for (i = 0; i != 4; ++i)
    {
      v62 = v30 + 152 * *(int *)(v30 + 72 * i + 29268) + 3040;
      v122 = v62;
      v123 = a1;
      v63 = a1[4];
      v64 = *(unsigned int *)(v63 + 8);
      if ((_DWORD)v64)
      {
        v65 = *(uint64_t **)v63;
        v66 = 8 * v64;
        do
        {
          v67 = *v65++;
          sub_1C5735FC4(v62, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C5740F78, (uint64_t)&v122, v67);
          v66 -= 8;
        }
        while (v66);
        v30 = a1[8];
      }
    }
    v121 = a1;
    if (!byte_1ED80D7C8)
    {
      v68 = a1[4];
      v69 = *(unsigned int *)(v68 + 8);
      if ((_DWORD)v69)
      {
        v70 = v30 + 27208;
        v71 = *(uint64_t **)v68;
        v72 = 8 * v69;
        do
        {
          v73 = *v71++;
          sub_1C5735FC4(v70, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C5742C34, (uint64_t)&v121, v73);
          v72 -= 8;
        }
        while (v72);
      }
    }
    if (llvm::Module::getModuleFlag(a1[3], "openmp-device", 0xDuLL))
    {
      v74 = a1[4];
      v75 = *(unsigned int *)(v74 + 8);
      if ((_DWORD)v75)
      {
        v76 = *(uint64_t **)v74;
        v77 = *(_QWORD *)v74 + 8 * v75;
        do
        {
          v78 = *v76;
          if (*v76)
            v79 = *(_BYTE *)(*v76 + 16) == 3;
          else
            v79 = 0;
          if (v79)
          {
            if ((*(_DWORD *)(v78 + 20) & 0x7FFFFFF) != 0)
              goto LABEL_79;
          }
          else if (*(_BYTE *)(*v76 + 16) || *(_QWORD *)(v78 + 72) != v78 + 72 || (*(_BYTE *)(v78 + 34) & 0x80) != 0)
          {
LABEL_79:
            sub_1C57248C0(a1[9], *v76, 0, 0, 2);
            if (!byte_1ED80D7C8)
              sub_1C5687414(a1[9], v78, 0, 0, 2, 0, 1);
            v80 = v78 + 72;
            for (j = *(_QWORD *)(v78 + 80); j != v80; j = *(_QWORD *)(j + 8))
            {
              v82 = j - 24;
              if (!j)
                v82 = 0;
              v83 = *(_QWORD *)(v82 + 48);
              if (v83 != v82 + 40)
              {
                while (1)
                {
                  v84 = v83 ? v83 - 24 : 0;
                  v85 = *(unsigned __int8 *)(v84 + 16);
                  if (v83 && v85 == 60)
                  {
                    v120 = 0;
                    v86 = (llvm::Attributor *)a1[9];
                    v122 = v84;
                    v123 = 0;
                    llvm::Attributor::getAssumedSimplified(v86, (const llvm::IRPosition *)&v122, 0, &v120);
                  }
                  else if (v83 && v85 == 61)
                  {
                    sub_1C5677D4C(a1[9], v84, 0, 0, 2, 0, 1);
                  }
                  v83 = *(_QWORD *)(v83 + 8);
                  v87 = j - 24;
                  if (!j)
                    v87 = 0;
                  if (v83 == v87 + 40)
                    break;
LABEL_103:
                  if (j == v80)
                    goto LABEL_104;
                }
                while (1)
                {
                  j = *(_QWORD *)(j + 8);
                  if (j == v80)
                    goto LABEL_104;
                  v88 = j - 24;
                  if (!j)
                    v88 = 0;
                  v83 = *(_QWORD *)(v88 + 48);
                  if (v83 != v88 + 40)
                    goto LABEL_103;
                }
              }
            }
          }
LABEL_104:
          ++v76;
        }
        while (v76 != (uint64_t *)v77);
      }
    }
    v9 = v117;
    v2 = v111;
    v11 = v110;
    v3 = v109;
    v13 = v108;
    v4 = v107;
    v15 = v106;
  }
  v5 = llvm::Attributor::run((llvm::Attributor *)a1[9]) == 0;
  v89 = v119;
  if (v26)
  {
    v90 = *((_DWORD *)v26 + 8);
    if ((v112 - 7) < 2)
      v90 &= 0xFFFFFFCF;
    v91 = v90 & 0xFFFFFFF0 | v112 & 0xF;
    *((_DWORD *)v26 + 8) = v91;
    if ((v112 & 0xFu) - 7 < 2)
      goto LABEL_146;
    if ((v90 & 0x30) != 0)
    {
      hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v26);
      v89 = v119;
      if ((hasExternalWeakLinkage & 1) == 0)
      {
        v91 = *((_DWORD *)v26 + 8);
LABEL_146:
        *((_DWORD *)v26 + 8) = v91 | 0x4000;
      }
    }
  }
  if (!v89)
    goto LABEL_116;
  v92 = *((_DWORD *)v89 + 8);
  if ((v113 - 7) < 2)
    v92 &= 0xFFFFFFCF;
  v93 = v92 & 0xFFFFFFF0 | v113 & 0xF;
  *((_DWORD *)v89 + 8) = v93;
  if ((v113 & 0xFu) - 7 < 2)
    goto LABEL_149;
  if ((v92 & 0x30) != 0)
  {
    v105 = llvm::GlobalValue::hasExternalWeakLinkage(v89);
    v89 = v119;
    if ((v105 & 1) == 0)
    {
      v93 = *((_DWORD *)v119 + 8);
LABEL_149:
      *((_DWORD *)v89 + 8) = v93 | 0x4000;
    }
  }
LABEL_116:
  if (!v118)
    goto LABEL_121;
  v94 = *((_DWORD *)v118 + 8);
  if ((v114 - 7) < 2)
    v94 &= 0xFFFFFFCF;
  v95 = v94 & 0xFFFFFFF0 | v114 & 0xF;
  *((_DWORD *)v118 + 8) = v95;
  if ((v114 & 0xFu) - 7 < 2)
    goto LABEL_152;
  if ((v94 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v118) & 1) == 0)
  {
    v95 = *((_DWORD *)v118 + 8);
LABEL_152:
    *((_DWORD *)v118 + 8) = v95 | 0x4000;
  }
LABEL_121:
  if (!v15)
    goto LABEL_126;
  v96 = *((_DWORD *)v15 + 8);
  if ((v115 - 7) < 2)
    v96 &= 0xFFFFFFCF;
  v97 = v96 & 0xFFFFFFF0 | v115 & 0xF;
  *((_DWORD *)v15 + 8) = v97;
  if ((v115 & 0xFu) - 7 < 2)
    goto LABEL_155;
  if ((v96 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v15) & 1) == 0)
  {
    v97 = *((_DWORD *)v15 + 8);
LABEL_155:
    *((_DWORD *)v15 + 8) = v97 | 0x4000;
  }
LABEL_126:
  if (!v13)
    goto LABEL_131;
  v98 = *((_DWORD *)v13 + 8);
  if ((v4 - 7) < 2)
    v98 &= 0xFFFFFFCF;
  v99 = v98 & 0xFFFFFFF0 | v4 & 0xF;
  *((_DWORD *)v13 + 8) = v99;
  if ((v4 & 0xFu) - 7 < 2)
    goto LABEL_158;
  if ((v98 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v13) & 1) == 0)
  {
    v99 = *((_DWORD *)v13 + 8);
LABEL_158:
    *((_DWORD *)v13 + 8) = v99 | 0x4000;
  }
LABEL_131:
  if (!v11)
    goto LABEL_136;
  v100 = *((_DWORD *)v11 + 8);
  if ((v3 - 7) < 2)
    v100 &= 0xFFFFFFCF;
  v101 = v100 & 0xFFFFFFF0 | v3 & 0xF;
  *((_DWORD *)v11 + 8) = v101;
  if ((v3 & 0xFu) - 7 < 2)
    goto LABEL_161;
  if ((v100 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v11) & 1) == 0)
  {
    v101 = *((_DWORD *)v11 + 8);
LABEL_161:
    *((_DWORD *)v11 + 8) = v101 | 0x4000;
  }
LABEL_136:
  if (!v9)
    return v5;
  v102 = *((_DWORD *)v9 + 8);
  if ((v2 - 7) < 2)
    v102 &= 0xFFFFFFCF;
  v103 = v102 & 0xFFFFFFF0 | v2 & 0xF;
  *((_DWORD *)v9 + 8) = v103;
  if ((v2 & 0xFu) - 7 < 2)
  {
LABEL_143:
    *((_DWORD *)v9 + 8) = v103 | 0x4000;
    return v5;
  }
  if ((v102 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(v9) & 1) == 0)
  {
    v103 = *((_DWORD *)v9 + 8);
    goto LABEL_143;
  }
  return v5;
}

uint64_t sub_1C5735D68(uint64_t a1)
{
  uint64_t v2;
  int64x2_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  _QWORD v23[2];
  _QWORD v24[2];
  _QWORD v25[17];
  void *v26;
  uint64_t v27;
  _QWORD v28[18];

  v28[16] = *MEMORY[0x1E0C80C00];
  v25[0] = 1;
  v2 = 1;
  v3 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)&v25[v2] = v3;
    v2 += 2;
  }
  while (v2 != 17);
  v26 = v28;
  v27 = 0x1000000000;
  v24[0] = v25;
  v24[1] = a1;
  v23[0] = v24;
  v23[1] = v25;
  v4 = *(_QWORD *)(a1 + 64) + 3648;
  v5 = *(_QWORD *)(a1 + 32);
  v22[0] = v4;
  v22[1] = v23;
  v6 = *(unsigned int *)(v5 + 8);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)v5;
    v8 = 8 * v6;
    do
    {
      v9 = *v7++;
      sub_1C5735FC4(v4, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C5744C14, (uint64_t)v22, v9);
      v8 -= 8;
    }
    while (v8);
    if ((_DWORD)v27)
    {
      v10 = 0;
      do
        sub_1C57449F4((uint64_t)v23, *(_QWORD *)(*((_QWORD *)v26 + v10++) + 8));
      while (v10 < v27);
    }
  }
  v11 = *(_QWORD *)(a1 + 32);
  v12 = *(unsigned int *)(v11 + 8);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = *(uint64_t **)v11;
    v15 = *(_QWORD *)v11 + 8 * v12;
    while (1)
    {
      v16 = 0;
      v17 = *v14;
      do
        v13 |= sub_1C57444E0(a1, v17, *(_QWORD *)(a1 + 64) + 152 * dword_1C866042C[v16++] + 3040, 0);
      while (v16 != 16);
      if ((*(_WORD *)(v17 + 18) & 1) == 0)
        break;
      llvm::Function::BuildLazyArguments((llvm::Function *)v17);
      v18 = *(_QWORD *)(v17 + 88);
      if ((*(_WORD *)(v17 + 18) & 1) == 0)
        goto LABEL_15;
      llvm::Function::BuildLazyArguments((llvm::Function *)v17);
      v19 = *(_QWORD *)(v17 + 88);
LABEL_16:
      v20 = v19 + 40 * *(_QWORD *)(v17 + 96);
      while (v18 != v20)
      {
        if ((sub_1C61EAAB0((uint64_t)v25, v18, v24) & 1) != 0)
          goto LABEL_21;
        v18 += 40;
      }
      v18 = 0;
LABEL_21:
      v13 |= sub_1C57444E0(a1, v17, *(_QWORD *)(a1 + 64) + 3648, v18);
      if (++v14 == (uint64_t *)v15)
        goto LABEL_26;
    }
    v18 = *(_QWORD *)(v17 + 88);
LABEL_15:
    v19 = v18;
    goto LABEL_16;
  }
  LOBYTE(v13) = 0;
LABEL_26:
  if (v26 != v28)
    free(v26);
  if ((v25[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v25[1], 8);
  return v13 & 1;
}

void sub_1C5735FC4(uint64_t a1, unsigned int (*a2)(uint64_t, _QWORD, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x800000000;
  v7 = sub_1C57352CC(a1, a4);
  v8 = v7;
  v9 = *(unsigned int *)(v7 + 8);
  if ((_DWORD)v9)
  {
    v10 = 0;
    v11 = *(_QWORD *)v7;
    v12 = 8 * v9;
    do
    {
      if (a2(a3, *(_QWORD *)(v11 + 8 * v10), a4))
      {
        v13 = v18;
        if (v18 >= (unint64_t)HIDWORD(v18))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, v18 + 1, 4);
          v13 = v18;
        }
        *((_DWORD *)v17 + v13) = v10;
        LODWORD(v18) = v18 + 1;
      }
      ++v10;
      v12 -= 8;
    }
    while (v12);
    LODWORD(v9) = *(_DWORD *)(v8 + 8);
  }
  if ((_DWORD)v18)
  {
    v14 = v18 - 1;
    v15 = 4 * v18 - 4;
    do
    {
      v16 = *(unsigned int *)((char *)v17 + v15);
      LODWORD(v18) = v14;
      *(_QWORD *)(*(_QWORD *)v8 + 8 * v16) = *(_QWORD *)(*(_QWORD *)v8 + 8 * v9 - 8);
      LODWORD(v9) = v9 - 1;
      *(_DWORD *)(v8 + 8) = v9;
      --v14;
      v15 -= 4;
    }
    while (v14 != -1);
  }
  if (v17 != v19)
    free(v17);
}

uint64_t sub_1C5736128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C573615C(*(_QWORD *)(*(_QWORD *)a1 + 72), a3, 0, 0, 2, 0);
  return 0;
}

llvm::AbstractAttribute *sub_1C573615C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  uint64_t v10;
  llvm::AbstractAttribute *v11;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t *v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  _BOOL4 v22;
  char v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  void *p_p;
  void **v30;
  uint64_t *v31;
  const void *v32;
  size_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  void *v39[2];
  char v40;
  __int128 v41;
  void *__p;
  __int128 v43;

  if (byte_1ED831CE0)
    v10 = a3;
  else
    v10 = 0;
  *(_QWORD *)&v41 = a2;
  *((_QWORD *)&v41 + 1) = v10;
  v11 = (llvm::AbstractAttribute *)sub_1C57365DC(a1, &v41, a4, a5, 1);
  if (v11)
    return v11;
  v13 = sub_1C6283CA4(&v41);
  if (v13 == 4)
  {
    v11 = (llvm::AbstractAttribute *)sub_1C484358C(*(_QWORD *)(a1 + 24), 456, 3);
    sub_1C57366C8((uint64_t)v11, &v41);
    *(_QWORD *)v15 = &off_1E817BAA0;
    *(_QWORD *)(v15 + 32) = &unk_1E817BB20;
    *(_QWORD *)(v15 + 392) = v15 + 424;
    *(_QWORD *)(v15 + 400) = v15 + 424;
    *(_QWORD *)(v15 + 408) = 4;
    *(_DWORD *)(v15 + 416) = 0;
  }
  else if (v13 == 5)
  {
    v11 = (llvm::AbstractAttribute *)sub_1C484358C(*(_QWORD *)(a1 + 24), 392, 3);
    sub_1C57366C8((uint64_t)v11, &v41);
    *v14 = &off_1E817B628;
    v14[4] = &unk_1E817B6A8;
  }
  else
  {
    v11 = 0;
  }
  __p = &unk_1C8660428;
  v43 = *((_OWORD *)v11 + 1);
  sub_1C628623C((uint64_t *)(a1 + 32), (uint64_t)&__p)[3] = (uint64_t)v11;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, (uint64_t)v11);
  v16 = *(uint64_t **)(a1 + 5480);
  if (v16)
  {
    __p = &unk_1C8660428;
    v39[0] = 0;
    v17 = sub_1C614F7B0(v16, &__p, v39) ^ 1;
  }
  else
  {
    v17 = 0;
  }
  v18 = v41 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v41 & 3) == 0)
    v18 = *(_QWORD *)(v18 + 24);
  v19 = *(unsigned __int8 *)(v18 + 16);
  if (!*(_BYTE *)(v18 + 16))
    goto LABEL_23;
  if (v19 == 21)
  {
    v20 = (uint64_t *)(v18 + 24);
  }
  else
  {
    if (v19 < 0x1C)
    {
      v18 = 0;
      goto LABEL_30;
    }
    v20 = (uint64_t *)(*(_QWORD *)(v18 + 40) + 56);
  }
  v18 = *v20;
  if (!*v20)
  {
LABEL_30:
    v23 = 1;
    goto LABEL_35;
  }
LABEL_23:
  v21 = *(_QWORD *)(v18 + 112);
  if (v21 && ((*(_BYTE *)(v21 + 14) & 2) != 0 || (*(_BYTE *)(v21 + 17) & 8) != 0))
  {
    v22 = 1;
  }
  else if (*(_BYTE *)(a1 + 5464))
  {
    v22 = 0;
  }
  else
  {
    v24 = *(_QWORD **)(a1 + 88);
    v25 = sub_1C477672C((uint64_t)v24, v18);
    v26 = v24[1];
    v27 = 16;
    if (v26 == *v24)
      v27 = 20;
    v22 = v25 == (_QWORD *)(v26 + 8 * *(unsigned int *)((char *)v24 + v27));
  }
  v23 = 0;
  LOBYTE(v17) = (v22 | v17) != 0;
LABEL_35:
  if ((v17 & 1) != 0 || *(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_62;
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v11 + 72))(v39, v11);
  if (v40 >= 0)
    v28 = v40 & 0x7F;
  else
    v28 = (size_t)v39[1];
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v28 + 12);
  if (v43 < 0)
    p_p = __p;
  if (v28)
  {
    if (v40 >= 0)
      v30 = v39;
    else
      v30 = (void **)v39[0];
    memmove(p_p, v30, v28);
  }
  strcpy((char *)p_p + v28, "::initialize");
  v31 = (uint64_t *)off_1EF8EEB50();
  if (*v31)
  {
    if (v43 >= 0)
      v32 = &__p;
    else
      v32 = __p;
    if (v43 >= 0)
      v33 = HIBYTE(v43) & 0x7F;
    else
      v33 = v43;
    llvm::timeTraceProfilerBegin(v32, v33, (uint64_t)"", 0);
  }
  if (SHIBYTE(v43) < 0)
    operator delete(__p);
  if (v40 < 0)
    operator delete(v39[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v11 + 24))(v11, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v31)
  {
    sub_1C6392DC0(*v31);
    if ((v23 & 1) != 0)
      goto LABEL_61;
  }
  else if ((v23 & 1) != 0)
  {
    goto LABEL_61;
  }
  v37 = *(uint64_t **)(a1 + 80);
  __p = (void *)v18;
  v39[0] = 0;
  if ((sub_1C614F7B0(v37, &__p, v39) & 1) == 0)
  {
    v38 = *(uint64_t **)(a1 + 80);
    __p = (void *)sub_1C5676C10((llvm::IRPosition *)&v41);
    v39[0] = 0;
    if ((sub_1C614F7B0(v38, &__p, v39) & 1) == 0)
      goto LABEL_62;
  }
LABEL_61:
  v34 = *(_DWORD *)(a1 + 4368);
  if (v34 == 2)
  {
LABEL_62:
    v35 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v11 + 40))(v11);
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 40))(v35);
    return v11;
  }
  if (a6)
  {
    *(_DWORD *)(a1 + 4368) = 1;
    llvm::Attributor::updateAA((llvm::Attributor *)a1, v11);
    *(_DWORD *)(a1 + 4368) = v34;
  }
  if (a4)
  {
    v36 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v11 + 40))(v11);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36))
      llvm::Attributor::recordDependence(a1, (uint64_t)v11, a4, a5);
  }
  return v11;
}

uint64_t sub_1C57365DC(uint64_t a1, __int128 *a2, uint64_t a3, int a4, char a5)
{
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14;
  __int128 v15;
  uint64_t *v16;

  v9 = *a2;
  v14 = &unk_1C8660428;
  v15 = v9;
  v16 = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&v14, &v16) & 1) == 0)
    return 0;
  v10 = v16[3];
  if (v10)
  {
    if (a3
      && a4 != 2
      && (v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v16[3]),
          (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11)))
    {
      llvm::Attributor::recordDependence(a1, v10, a3, a4);
      if ((a5 & 1) != 0)
        return v10;
    }
    else if ((a5 & 1) != 0)
    {
      return v10;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12))
      return 0;
  }
  return v10;
}

double sub_1C57366C8(uint64_t a1, _OWORD *a2)
{
  double result;

  *(_OWORD *)(a1 + 16) = *a2;
  result = 0.0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_BYTE *)(a1 + 57) = 1;
  *(_QWORD *)(a1 + 48) = &off_1E817B7E8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 121) = 1;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = &off_1E817B848;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 185) = 1;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = &off_1E817B8A8;
  *(_DWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 241) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_BYTE *)(a1 + 273) = 1;
  *(_QWORD *)(a1 + 264) = &off_1E817B7E8;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_DWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 337) = 1;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = &off_1E817B908;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)a1 = off_1E817B6E8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = &unk_1E817B768;
  return result;
}

_QWORD *sub_1C57367C8(_QWORD *a1)
{
  void *v2;
  void *v3;

  a1[4] = &off_1E817B7A8;
  a1[41] = &off_1E817B908;
  sub_1C629C730(a1 + 43);
  a1[33] = &off_1E817B7E8;
  v2 = (void *)a1[38];
  if (v2)
  {
    a1[39] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[35], 8);
  a1[22] = &off_1E817B8A8;
  sub_1C6176BF8(a1 + 24);
  a1[14] = &off_1E817B848;
  sub_1C6176BF8(a1 + 16);
  a1[6] = &off_1E817B7E8;
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  MEMORY[0x1CAA32FB4](a1[8], 8);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5736898(_QWORD *a1)
{
  void *v2;
  void *v3;

  a1[4] = &off_1E817B7A8;
  a1[41] = &off_1E817B908;
  sub_1C629C730(a1 + 43);
  a1[33] = &off_1E817B7E8;
  v2 = (void *)a1[38];
  if (v2)
  {
    a1[39] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[35], 8);
  a1[22] = &off_1E817B8A8;
  sub_1C6176BF8(a1 + 24);
  a1[14] = &off_1E817B848;
  sub_1C6176BF8(a1 + 16);
  a1[6] = &off_1E817B7E8;
  v3 = (void *)a1[11];
  if (v3)
  {
    a1[12] = v3;
    operator delete(v3);
  }
  MEMORY[0x1CAA32FB4](a1[8], 8);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5736978(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  unint64_t v5;
  llvm::GlobalValue *v6;
  llvm::AbstractAttribute *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  llvm::Value *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  int v34;
  unint64_t v36;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
  v6 = (llvm::GlobalValue *)sub_1C5676C10(v4);
  v7 = sub_1C5686F3C(a2, v5, 0, a1, 1, 0, 1);
  if ((*(unsigned int (**)(llvm::AbstractAttribute *, const char *, uint64_t))(*(_QWORD *)v7 + 112))(v7, "ompx_spmd_amenable", 18))
  {
    v8 = *(_QWORD *)(a1 + 32);
    *(_BYTE *)(a1 + 184) = *(_BYTE *)(a1 + 185);
    (*(void (**)(void))(v8 + 32))();
  }
  v9 = *(unsigned __int8 *)(v5 + 16);
  v10 = (v9 - 33);
  if (v10 > 0x37)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
  if (((1 << (v9 - 33)) & 0x8000000000041) != 0)
  {
    v12 = *(_QWORD *)(v5 + 64);
    if (v12 && (*(_BYTE *)(v12 + 17) & 0x30) != 0)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
    v13 = *(_DWORD *)(v5 + 20);
    if (v13 < 0 && (v28 = v5 - 32 * (v13 & 0x7FFFFFF), v31 = *(_QWORD *)(v28 - 8), v29 = v28 - 8, (v30 = v31) != 0))
    {
      v32 = -v30;
      while (1)
      {
        v33 = *(_DWORD *)(*(_QWORD *)(v29 + v32) + 8);
        v23 = v33 > 7;
        v34 = (1 << v33) & 0x83;
        if (v23 || v34 == 0)
          break;
        v32 += 16;
        if (!v32)
          goto LABEL_12;
      }
    }
    else
    {
LABEL_12:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(v5, 45) & 1) != 0
        || (llvm::CallBase::hasFnAttrOnCalledFunction(v5, 44) & 1) != 0)
      {
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
      }
      v9 = *(unsigned __int8 *)(v5 + 16);
    }
LABEL_15:
    if (v9 == 84)
    {
      v14 = *(_QWORD *)(v5 - 32);
      if (v14)
      {
        if (!*(_BYTE *)(v14 + 16)
          && *(_QWORD *)(v14 + 24) == *(_QWORD *)(v5 + 72)
          && (*(_BYTE *)(v14 + 33) & 0x20) != 0)
        {
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
        }
      }
    }
    goto LABEL_22;
  }
  if (v10 != 27)
  {
    if (((1 << (v9 - 33)) & 0x808001D0000010) == 0)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
    goto LABEL_15;
  }
  if ((*(_WORD *)(v5 + 18) & 0x301) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
LABEL_22:
  v15 = *(_QWORD *)(a2 + 88);
  v36 = 0;
  result = sub_1C6144BDC(*(_QWORD *)(v15 + 29184), *(_DWORD *)(v15 + 29200), (uint64_t)v6, &v36);
  if ((_DWORD)result)
    v16 = v36 == *(_QWORD *)(v15 + 29184) + 16 * *(unsigned int *)(v15 + 29200);
  else
    v16 = 1;
  if (!v16)
  {
    v18 = *(_DWORD *)(v36 + 8);
    if (v18 > 0x3E)
      goto LABEL_34;
    if (((1 << v18) & 0x4000180000003011) != 0)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
    if (((1 << v18) & 0x3C00000000000000) == 0)
    {
LABEL_34:
      switch(v18)
      {
        case 0x92u:
          *(_QWORD *)(a1 + 240) = v5;
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
        case 0x93u:
          *(_QWORD *)(a1 + 248) = v5;
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
        case 0x94u:
        case 0x96u:
        case 0x97u:
        case 0x98u:
        case 0x99u:
        case 0x9Au:
        case 0x9Eu:
        case 0xA1u:
        case 0xA2u:
        case 0xA3u:
        case 0xA4u:
          goto LABEL_53;
        case 0x95u:
          v26 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 192));
          if (*((_BYTE *)v26 + 16))
            v27 = 0;
          else
            v27 = (uint64_t)v26;
          v36 = v27;
          if (!v27)
            goto LABEL_63;
          sub_1C567D3D8((_QWORD *)(a1 + 64), &v36);
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
        case 0x9Bu:
        case 0x9Cu:
        case 0x9Du:
        case 0xA5u:
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
        case 0x9Fu:
        case 0xA0u:
          return result;
        default:
          v19 = v18 - 63;
          if (v19 > 0x20)
            goto LABEL_53;
          if (((1 << v19) & 0xF) != 0)
            goto LABEL_44;
          if (((1 << v19) & 0x60000010) != 0)
            return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
          if (v19 != 32)
            goto LABEL_53;
          *(_BYTE *)(a1 + 185) = *(_BYTE *)(a1 + 184);
          v36 = v5;
          sub_1C509CEFC((_QWORD *)(a1 + 192), &v36);
LABEL_63:
          v36 = v5;
          *(_BYTE *)(a1 + 121) = *(_BYTE *)(a1 + 120);
          sub_1C518D044((_QWORD *)(a1 + 128), (uint64_t *)&v36);
          break;
      }
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
    }
LABEL_44:
    v20 = *(_QWORD *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 64);
    if (v20 && *(_BYTE *)(v20 + 16) == 16)
    {
      v21 = (_QWORD *)(v20 + 24);
      if (*(_DWORD *)(v20 + 32) >= 0x41u)
        v21 = (_QWORD *)*v21;
      v22 = *(_DWORD *)v21 - 33;
      v23 = v22 > 0x3B;
      v24 = (1 << v22) & 0xC00000000000003;
      if (!v23 && v24 != 0)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
    }
LABEL_53:
    LOBYTE(v17) = *(_BYTE *)(a1 + 184);
LABEL_54:
    *(_BYTE *)(a1 + 185) = v17;
    v36 = v5;
    sub_1C509CEFC((_QWORD *)(a1 + 192), &v36);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
  }
  if (!v6 || (result = sub_1C62873F8(a2, v6), (result & 1) == 0))
  {
    if (((*(uint64_t (**)(llvm::AbstractAttribute *, const char *, uint64_t))(*(_QWORD *)v7 + 112))(v7, "omp_no_openmp", 13) & 1) == 0&& ((*(uint64_t (**)(llvm::AbstractAttribute *, const char *, uint64_t))(*(_QWORD *)v7 + 112))(v7, "omp_no_parallelism", 18) & 1) == 0)
    {
      v36 = v5;
      *(_BYTE *)(a1 + 121) = *(_BYTE *)(a1 + 120);
      sub_1C518D044((_QWORD *)(a1 + 128), (uint64_t *)&v36);
    }
    v17 = *(unsigned __int8 *)(a1 + 184);
    if (*(unsigned __int8 *)(a1 + 185) == v17)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 32))(a1 + 32);
    goto LABEL_54;
  }
  return result;
}

uint64_t sub_1C5736DA8(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_1C5736DB0(uint64_t a1)
{
  return a1 + 32;
}

void sub_1C5736DB8(uint64_t a1@<X0>, char *a2@<X8>)
{
  int v4;
  const char *v5;
  size_t v6;
  int v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  char v14;
  std::string::size_type v15;
  BOOL v16;
  std::string *v17;
  std::string::size_type v18;
  std::string::size_type size;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  char v24;
  std::string::size_type v25;
  BOOL v26;
  std::string *v27;
  std::string::size_type v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  char v34;
  BOOL v35;
  std::string *p_p;
  std::string::size_type v37;
  std::string::size_type v38;
  std::string *v39;
  std::string __p;
  std::string v41;
  std::string v42;
  std::string::value_type v43[8];
  char v44;
  std::string::value_type __s[8];
  char v46;
  std::string __dst;
  std::string v48;
  std::string v49;
  std::string v50;
  std::string v51;
  std::string v52;
  std::string v53;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32) & 1) != 0)
  {
    v4 = *(unsigned __int8 *)(a1 + 185);
    if (*(_BYTE *)(a1 + 185))
      v5 = "SPMD";
    else
      v5 = "generic";
    if (*(_BYTE *)(a1 + 185))
      v6 = 4;
    else
      v6 = 7;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v6;
    memcpy(&__dst, v5, v6);
    *(_BYTE *)((unint64_t)&__dst | v6) = 0;
    v7 = *(unsigned __int8 *)(a1 + 184);
    if (v4 == v7)
      v8 = 6;
    else
      v8 = 0;
    v46 = v8;
    if (v4 == v7)
      qmemcpy(__s, " [FIX]", 6);
    v9 = 0x64696C61766E693CLL;
    *(_BYTE *)((unint64_t)__s | v8) = 0;
    v10 = std::string::append(&__dst, __s, v8);
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v44 = 7;
    strcpy(v43, " #PRs: ");
    v12 = std::string::append(&v48, v43, 7uLL);
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if (*(_BYTE *)(a1 + 57))
    {
      std::to_string(&v42, (uint64_t)(*(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88)) >> 3);
      v14 = HIBYTE(v42.__r_.__value_.__r.__words[2]);
      v15 = v42.__r_.__value_.__r.__words[0];
    }
    else
    {
      v14 = 9;
      *((_BYTE *)&v42.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&v42, "<invalid>");
      v15 = 0x64696C61766E693CLL;
    }
    v16 = v14 < 0;
    if (v14 >= 0)
      v17 = &v42;
    else
      v17 = (std::string *)v15;
    v18 = v14 & 0x7F;
    if (v16)
      size = v42.__r_.__value_.__l.__size_;
    else
      size = v18;
    v20 = std::string::append(&v49, (const std::string::value_type *)v17, size);
    v21 = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    v22 = std::string::append(&v50, ", #Unknown PRs: ");
    v23 = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    if (*(_BYTE *)(a1 + 121))
    {
      std::to_string(&v41, (uint64_t)(*(_QWORD *)(a1 + 160) - *(_QWORD *)(a1 + 152)) >> 3);
      v24 = HIBYTE(v41.__r_.__value_.__r.__words[2]);
      v25 = v41.__r_.__value_.__r.__words[0];
    }
    else
    {
      v24 = 9;
      *((_BYTE *)&v41.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&v41, "<invalid>");
      v25 = 0x64696C61766E693CLL;
    }
    v26 = v24 < 0;
    if (v24 >= 0)
      v27 = &v41;
    else
      v27 = (std::string *)v25;
    v28 = v24 & 0x7F;
    if (v26)
      v29 = v41.__r_.__value_.__l.__size_;
    else
      v29 = v28;
    v30 = std::string::append(&v51, (const std::string::value_type *)v27, v29);
    v31 = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v52.__r_.__value_.__r.__words[2] = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::string::append(&v52, ", #Reaching Kernels: ");
    v33 = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    if (*(_BYTE *)(a1 + 273))
    {
      std::to_string(&__p, (uint64_t)(*(_QWORD *)(a1 + 312) - *(_QWORD *)(a1 + 304)) >> 3);
      v34 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      v9 = __p.__r_.__value_.__r.__words[0];
    }
    else
    {
      v34 = 9;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
      strcpy((char *)&__p, "<invalid>");
    }
    v35 = v34 < 0;
    if (v34 >= 0)
      p_p = &__p;
    else
      p_p = (std::string *)v9;
    v37 = v34 & 0x7F;
    if (v35)
      v38 = __p.__r_.__value_.__l.__size_;
    else
      v38 = v37;
    v39 = std::string::append(&v53, (const std::string::value_type *)p_p, v38);
    *(std::string *)a2 = *v39;
    v39->__r_.__value_.__r.__words[0] = 0;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if (v44 < 0)
      operator delete(*(void **)v43);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (v46 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    a2[23] = 9;
    strcpy(a2, "<invalid>");
  }
}

void sub_1C57371E0(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "AAKernelInfo");
}

void *sub_1C573720C()
{
  return &unk_1C8660428;
}

BOOL sub_1C573721C(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  _BOOL8 v10;
  llvm::AbstractAttribute *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unint64_t v16;
  llvm::AbstractAttribute *v17;
  llvm::AbstractAttribute *v18;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[7];
  void *v27;
  void *v28;
  uint64_t (**v29)();
  _QWORD v30[8];
  void *v31[14];
  void *__p;
  void *v33;
  uint64_t (**v34)();
  _QWORD v35[6];

  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  v6 = *(_QWORD *)(a2 + 88);
  v26[0] = 0;
  v7 = sub_1C6144BDC(*(_QWORD *)(v6 + 29184), *(_DWORD *)(v6 + 29200), v5, v26);
  v8 = v26[0];
  if (v7)
    v9 = v26[0] == *(_QWORD *)(v6 + 29184) + 16 * *(unsigned int *)(v6 + 29200);
  else
    v9 = 1;
  if (!v9)
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    sub_1C5737C10((uint64_t)v26, v15);
    v16 = sub_1C6284150(v4);
    v17 = sub_1C5687414(a2, *(_QWORD *)(*(_QWORD *)(v16 + 40) + 56), 0, a1, 1, 0, 1);
    v18 = sub_1C5738020(a2, *(_QWORD *)(*(_QWORD *)(v16 + 40) + 56), 0, a1, 1);
    v19 = *(_DWORD *)(v8 + 8);
    if (v19 == 160)
    {
      if (((*(uint64_t (**)(llvm::AbstractAttribute *, unint64_t))(*(_QWORD *)v17 + 120))(v17, v16) & 1) == 0)
      {
        v20 = (*(uint64_t (**)(llvm::AbstractAttribute *, unint64_t))(*(_QWORD *)v18 + 120))(v18, v16);
LABEL_15:
        if ((v20 & 1) != 0)
          goto LABEL_19;
        goto LABEL_18;
      }
    }
    else
    {
      if (v19 != 159)
      {
        *(_BYTE *)(a1 + 185) = *(_BYTE *)(a1 + 184);
LABEL_18:
        v25 = v16;
        sub_1C509CEFC((_QWORD *)(a1 + 192), &v25);
        goto LABEL_19;
      }
      if (((*(uint64_t (**)(llvm::AbstractAttribute *, unint64_t))(*(_QWORD *)v17 + 112))(v17, v16) & 1) == 0)
      {
        v20 = (*(uint64_t (**)(llvm::AbstractAttribute *, unint64_t))(*(_QWORD *)v18 + 112))(v18, v16);
        goto LABEL_15;
      }
    }
LABEL_19:
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v10 = sub_1C5737B08((uint64_t)v26, v24);
    v26[0] = &off_1E817B7A8;
    v34 = &off_1E817B908;
    sub_1C629C730(v35);
    v31[9] = &off_1E817B7E8;
    if (__p)
    {
      v33 = __p;
      operator delete(__p);
    }
    MEMORY[0x1CAA32FB4](v31[11], 8);
    v30[6] = &off_1E817B8A8;
    sub_1C6176BF8(v31);
    v29 = &off_1E817B848;
    sub_1C6176BF8(v30);
    v26[2] = &off_1E817B7E8;
    if (v27)
    {
      v28 = v27;
      operator delete(v27);
    }
    MEMORY[0x1CAA32FB4](v26[4], 8);
    return v10;
  }
  v10 = 1;
  v11 = sub_1C573615C(a2, v5, 0, a1, 0, 1);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v13 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v11 + 48))(v11);
  if (!sub_1C5737B08(v12, v13))
  {
    v21 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v11 + 48))(v11);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    *(_BYTE *)(v22 + 8) = *(_BYTE *)(v21 + 8);
    *(_WORD *)(v22 + 24) = *(_WORD *)(v21 + 24);
    sub_1C629C76C(v22 + 32, v21 + 32);
    *(_WORD *)(v22 + 88) = *(_WORD *)(v21 + 88);
    sub_1C629C76C(v22 + 96, v21 + 96);
    *(_WORD *)(v22 + 152) = *(_WORD *)(v21 + 152);
    sub_1C629C76C(v22 + 160, v21 + 160);
    v23 = *(_OWORD *)(v21 + 208);
    *(_BYTE *)(v22 + 224) = *(_BYTE *)(v21 + 224);
    *(_OWORD *)(v22 + 208) = v23;
    *(_WORD *)(v22 + 240) = *(_WORD *)(v21 + 240);
    sub_1C629C76C(v22 + 248, v21 + 248);
    *(_WORD *)(v22 + 304) = *(_WORD *)(v21 + 304);
    sub_1C629C7B4(v22 + 312, v21 + 312);
    return 0;
  }
  return v10;
}

uint64_t *sub_1C5737568(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E817B7A8;
  a1[37] = &off_1E817B908;
  sub_1C629C730(a1 + 39);
  a1[29] = &off_1E817B7E8;
  v2 = (void *)a1[34];
  if (v2)
  {
    a1[35] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[31], 8);
  a1[18] = &off_1E817B8A8;
  sub_1C6176BF8(a1 + 20);
  a1[10] = &off_1E817B848;
  sub_1C6176BF8(a1 + 12);
  a1[2] = &off_1E817B7E8;
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  MEMORY[0x1CAA32FB4](a1[4], 8);
  *(a1 - 4) = &unk_1E8172998;
  return sub_1C6286C70(a1 - 3);
}

void sub_1C5737630(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E817B7A8;
  a1[37] = &off_1E817B908;
  sub_1C629C730(a1 + 39);
  a1[29] = &off_1E817B7E8;
  v2 = (void *)a1[34];
  if (v2)
  {
    a1[35] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[31], 8);
  a1[18] = &off_1E817B8A8;
  sub_1C6176BF8(a1 + 20);
  a1[10] = &off_1E817B848;
  sub_1C6176BF8(a1 + 12);
  a1[2] = &off_1E817B7E8;
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  MEMORY[0x1CAA32FB4](a1[4], 8);
  *(a1 - 4) = &unk_1E8172998;
  sub_1C6286C70(a1 - 3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5737710()
{
  return 1;
}

uint64_t sub_1C5737718(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_1C5737720(_BYTE *a1)
{
  a1[8] = 1;
  a1[240] = a1[241];
  a1[152] = a1[153];
  a1[24] = a1[25];
  a1[88] = a1[89];
  return 1;
}

uint64_t sub_1C5737750(_BYTE *a1)
{
  a1[8] = 1;
  a1[241] = a1[240];
  a1[153] = a1[152];
  a1[25] = a1[24];
  a1[89] = a1[88];
  return 0;
}

_QWORD *sub_1C5737790(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E817B7A8;
  a1[37] = &off_1E817B908;
  sub_1C629C730(a1 + 39);
  a1[29] = &off_1E817B7E8;
  v2 = (void *)a1[34];
  if (v2)
  {
    a1[35] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[31], 8);
  a1[18] = &off_1E817B8A8;
  sub_1C6176BF8(a1 + 20);
  a1[10] = &off_1E817B848;
  sub_1C6176BF8(a1 + 12);
  a1[2] = &off_1E817B7E8;
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  MEMORY[0x1CAA32FB4](a1[4], 8);
  return a1;
}

void sub_1C5737848(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E817B7A8;
  a1[37] = &off_1E817B908;
  sub_1C629C730(a1 + 39);
  a1[29] = &off_1E817B7E8;
  v2 = (void *)a1[34];
  if (v2)
  {
    a1[35] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[31], 8);
  a1[18] = &off_1E817B8A8;
  sub_1C6176BF8(a1 + 20);
  a1[10] = &off_1E817B848;
  sub_1C6176BF8(a1 + 12);
  a1[2] = &off_1E817B7E8;
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  MEMORY[0x1CAA32FB4](a1[4], 8);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5737910(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E817B7E8;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[2], 8);
  return a1;
}

void sub_1C573795C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E817B7E8;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[2], 8);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C57379B8(_QWORD *a1)
{
  *a1 = &off_1E817B848;
  sub_1C6176BF8(a1 + 2);
  return a1;
}

void sub_1C57379E8(_QWORD *a1)
{
  *a1 = &off_1E817B848;
  sub_1C6176BF8(a1 + 2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5737A28(_QWORD *a1)
{
  *a1 = &off_1E817B8A8;
  sub_1C6176BF8(a1 + 2);
  return a1;
}

void sub_1C5737A58(_QWORD *a1)
{
  *a1 = &off_1E817B8A8;
  sub_1C6176BF8(a1 + 2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5737A98(_QWORD *a1)
{
  *a1 = &off_1E817B908;
  sub_1C629C730(a1 + 2);
  return a1;
}

void sub_1C5737AC8(_QWORD *a1)
{
  *a1 = &off_1E817B908;
  sub_1C629C730(a1 + 2);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5737B08(uint64_t a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  const void *v6;
  const void *v7;
  size_t v8;
  const void *v9;

  if ((*(_BYTE *)(a1 + 153) != 0) != (*(_BYTE *)(a2 + 153) != 0))
    return 0;
  if ((*(_BYTE *)(a1 + 152) == 0) == (*(_BYTE *)(a2 + 152) != 0))
    return 0;
  v4 = *(const void **)(a1 + 184);
  v5 = *(_QWORD *)(a1 + 192) - (_QWORD)v4;
  v6 = *(const void **)(a2 + 184);
  if (v5 != *(_QWORD *)(a2 + 192) - (_QWORD)v6)
    return 0;
  if (memcmp(v4, v6, v5))
    return 0;
  if (sub_1C5737E10(a1 + 16, a2 + 16))
    return 0;
  if ((*(_BYTE *)(a1 + 89) != 0) != (*(_BYTE *)(a2 + 89) != 0))
    return 0;
  if ((*(_BYTE *)(a1 + 88) == 0) == (*(_BYTE *)(a2 + 88) != 0))
    return 0;
  v7 = *(const void **)(a1 + 120);
  v8 = *(_QWORD *)(a1 + 128) - (_QWORD)v7;
  v9 = *(const void **)(a2 + 120);
  return v8 == *(_QWORD *)(a2 + 128) - (_QWORD)v9 && !memcmp(v7, v9, v8) && !sub_1C5737E10(a1 + 232, a2 + 232);
}

uint64_t sub_1C5737C10(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  char *v8;
  char *v9;
  __int128 v10;

  *(_QWORD *)a1 = &off_1E817B7A8;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = &unk_1E81792E0;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = &off_1E817B7E8;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1C4DFE328(a1 + 32, a2 + 32);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_1C4DFE394((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  *(_QWORD *)(a1 + 80) = &unk_1E81792E0;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = &off_1E817B848;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_1C4DFE328(a1 + 96, a2 + 96);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_1C4DFE394((_QWORD *)(a1 + 120), *(const void **)(a2 + 120), *(_QWORD *)(a2 + 128), (uint64_t)(*(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120)) >> 3);
  *(_QWORD *)(a1 + 144) = &unk_1E81792E0;
  v4 = *(_WORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 152) = v4;
  *(_QWORD *)(a1 + 144) = &off_1E817B8A8;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  sub_1C4DFE328(a1 + 160, a2 + 160);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  v6 = *(_BYTE **)(a2 + 184);
  v5 = *(_BYTE **)(a2 + 192);
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      abort();
    v8 = (char *)operator new(v5 - v6);
    *(_QWORD *)(a1 + 184) = v8;
    *(_QWORD *)(a1 + 192) = v8;
    v9 = &v8[8 * (v7 >> 3)];
    *(_QWORD *)(a1 + 200) = v9;
    memcpy(v8, v6, v7);
    *(_QWORD *)(a1 + 192) = v9;
  }
  v10 = *(_OWORD *)(a2 + 208);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v10;
  *(_QWORD *)(a1 + 232) = &unk_1E81792E0;
  *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = &off_1E817B7E8;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  sub_1C4DFE328(a1 + 248, a2 + 248);
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  sub_1C4DFE394((_QWORD *)(a1 + 272), *(const void **)(a2 + 272), *(_QWORD *)(a2 + 280), (uint64_t)(*(_QWORD *)(a2 + 280) - *(_QWORD *)(a2 + 272)) >> 3);
  *(_QWORD *)(a1 + 296) = &unk_1E81792E0;
  *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = &off_1E817B908;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 328) = 0;
  sub_1C5737E8C(a1 + 312, a2 + 312);
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  sub_1C515FEEC((_QWORD *)(a1 + 336), *(const void **)(a2 + 336), *(_QWORD *)(a2 + 344), *(_QWORD *)(a2 + 344) - *(_QWORD *)(a2 + 336));
  return a1;
}

BOOL sub_1C5737E10(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t v3;
  size_t v4;
  const void *v5;
  uint64_t v6;

  if ((*(_BYTE *)(a1 + 9) != 0) != (*(_BYTE *)(a2 + 9) != 0))
    return 1;
  if ((*(_BYTE *)(a1 + 8) == 0) == (*(_BYTE *)(a2 + 8) != 0))
    return 1;
  v3 = a1 + 40;
  v2 = *(const void **)(a1 + 40);
  v4 = *(_QWORD *)(v3 + 8) - (_QWORD)v2;
  v6 = a2 + 40;
  v5 = *(const void **)(a2 + 40);
  return v4 != *(_QWORD *)(v6 + 8) - (_QWORD)v5 || memcmp(v2, v5, v4) != 0;
}

size_t sub_1C5737E8C(uint64_t a1, uint64_t a2)
{
  size_t result;
  void *v5;

  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 1);
  result = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = result;
  if ((_DWORD)result)
  {
    v5 = operator new(result, (std::align_val_t)1uLL);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    return (size_t)memcpy(v5, *(const void **)a2, *(unsigned int *)(a1 + 16));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

_QWORD *sub_1C5737EF0(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  size_t v14;
  char *v15;
  char *v16;

  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0)
      goto LABEL_23;
    v10 = 2 * v8;
    if (2 * v8 <= a4)
      v10 = a4;
    v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0)
LABEL_23:
      abort();
    result = operator new(v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v11;
    v12 = a3 - __src;
    if (v12)
      result = memcpy(result, __src, v12);
LABEL_21:
    v16 = &v9[v12];
    goto LABEL_22;
  }
  v13 = (_BYTE *)result[1];
  v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    v12 = a3 - __src;
    if (v12)
      result = memmove((void *)*result, __src, v12);
    goto LABEL_21;
  }
  v15 = &__src[v14];
  if (v13 != v9)
  {
    result = memmove((void *)*result, __src, v14);
    v9 = (char *)v7[1];
  }
  if (a3 != v15)
    result = memmove(v9, v15, a3 - v15);
  v16 = &v9[a3 - v15];
LABEL_22:
  v7[1] = v16;
  return result;
}

llvm::AbstractAttribute *sub_1C5738020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t *v9;
  llvm::AbstractAttribute *v10;
  uint64_t v11;
  int64x2_t v13;
  uint64_t *v14;
  int v15;
  unint64_t v16;
  unsigned int v17;
  unint64_t *v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  void *p_p;
  void **v32;
  uint64_t *v33;
  const void *v34;
  size_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  void *v41[2];
  char v42;
  __int128 v43;
  void *__p;
  __int128 v45;

  if (byte_1ED831CE0)
    v8 = a3;
  else
    v8 = 0;
  *(_QWORD *)&v43 = a2;
  *((_QWORD *)&v43 + 1) = v8;
  __p = &unk_1C8660429;
  v9 = (uint64_t *)(a1 + 32);
  v45 = v43;
  v41[0] = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&__p, (uint64_t **)v41) & 1) != 0)
  {
    v10 = (llvm::AbstractAttribute *)*((_QWORD *)v41[0] + 3);
    if (v10)
    {
      if (!a4)
        return v10;
      if (a5 == 2)
        return v10;
      v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 40))(*((_QWORD *)v41[0] + 3));
      if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11))
        return v10;
      v21 = a1;
      v22 = (uint64_t)v10;
      v23 = a4;
      v24 = 1;
LABEL_32:
      llvm::Attributor::recordDependence(v21, v22, v23, v24);
      return v10;
    }
  }
  if (sub_1C6283CA4(&v43) == 4)
  {
    v10 = (llvm::AbstractAttribute *)sub_1C484358C(*(_QWORD *)(a1 + 24), 208, 3);
    *((_OWORD *)v10 + 1) = v43;
    *((_WORD *)v10 + 20) = 256;
    *(_QWORD *)v10 = off_1E817B968;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 4) = &unk_1E817B9F8;
    *((_QWORD *)v10 + 6) = 1;
    v13 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    *(int64x2_t *)((char *)v10 + 56) = v13;
    *(int64x2_t *)((char *)v10 + 72) = v13;
    *((_QWORD *)v10 + 11) = (char *)v10 + 104;
    *((_QWORD *)v10 + 12) = 0x400000000;
    *((_QWORD *)v10 + 17) = (char *)v10 + 168;
    *((_QWORD *)v10 + 18) = (char *)v10 + 168;
    *((_QWORD *)v10 + 19) = 4;
    *((_DWORD *)v10 + 40) = 0;
    *((_DWORD *)v10 + 50) = 0;
  }
  else
  {
    v10 = 0;
  }
  __p = &unk_1C8660429;
  v45 = *((_OWORD *)v10 + 1);
  sub_1C628623C(v9, (uint64_t)&__p)[3] = (uint64_t)v10;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, (uint64_t)v10);
  v14 = *(uint64_t **)(a1 + 5480);
  if (v14)
  {
    __p = &unk_1C8660429;
    v41[0] = 0;
    v15 = sub_1C614F7B0(v14, &__p, v41) ^ 1;
  }
  else
  {
    v15 = 0;
  }
  v16 = v43 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v43 & 3) == 0)
    v16 = *(_QWORD *)(v16 + 24);
  v17 = *(unsigned __int8 *)(v16 + 16);
  if (!*(_BYTE *)(v16 + 16))
  {
LABEL_25:
    v19 = *(_QWORD *)(v16 + 112);
    if (v19 && ((*(_BYTE *)(v19 + 14) & 2) != 0 || (*(_BYTE *)(v19 + 17) & 8) != 0))
    {
      v20 = 1;
    }
    else if (*(_BYTE *)(a1 + 5464))
    {
      v20 = 0;
    }
    else
    {
      v26 = *(_QWORD **)(a1 + 88);
      v27 = sub_1C477672C((uint64_t)v26, v16);
      v28 = v26[1];
      v29 = 16;
      if (v28 == *v26)
        v29 = 20;
      v20 = v27 == (_QWORD *)(v28 + 8 * *(unsigned int *)((char *)v26 + v29));
    }
    v25 = 0;
    if (v20 | v15)
      goto LABEL_66;
    goto LABEL_40;
  }
  if (v17 == 21)
  {
    v18 = (unint64_t *)(v16 + 24);
  }
  else
  {
    if (v17 < 0x1C)
    {
      v16 = 0;
      goto LABEL_34;
    }
    v18 = (unint64_t *)(*(_QWORD *)(v16 + 40) + 56);
  }
  v16 = *v18;
  if (*v18)
    goto LABEL_25;
LABEL_34:
  v25 = 1;
  if ((v15 & 1) != 0)
    goto LABEL_66;
LABEL_40:
  if (*(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
  {
LABEL_66:
    v37 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v10 + 40))(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 40))(v37);
    return v10;
  }
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v10 + 72))(v41, v10);
  if (v42 >= 0)
    v30 = v42 & 0x7F;
  else
    v30 = (size_t)v41[1];
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v30 + 12);
  if (v45 < 0)
    p_p = __p;
  if (v30)
  {
    if (v42 >= 0)
      v32 = v41;
    else
      v32 = (void **)v41[0];
    memmove(p_p, v32, v30);
  }
  strcpy((char *)p_p + v30, "::initialize");
  v33 = (uint64_t *)off_1EF8EEB50();
  if (*v33)
  {
    if (v45 >= 0)
      v34 = &__p;
    else
      v34 = __p;
    if (v45 >= 0)
      v35 = HIBYTE(v45) & 0x7F;
    else
      v35 = v45;
    llvm::timeTraceProfilerBegin(v34, v35, (uint64_t)"", 0);
  }
  if (SHIBYTE(v45) < 0)
    operator delete(__p);
  if (v42 < 0)
    operator delete(v41[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v10 + 24))(v10, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v33)
  {
    sub_1C6392DC0(*v33);
    if ((v25 & 1) != 0)
      goto LABEL_65;
  }
  else if ((v25 & 1) != 0)
  {
    goto LABEL_65;
  }
  v39 = *(uint64_t **)(a1 + 80);
  __p = (void *)v16;
  v41[0] = 0;
  if ((sub_1C614F7B0(v39, &__p, v41) & 1) == 0)
  {
    v40 = *(uint64_t **)(a1 + 80);
    __p = (void *)sub_1C5676C10((llvm::IRPosition *)&v43);
    v41[0] = 0;
    if ((sub_1C614F7B0(v40, &__p, v41) & 1) == 0)
      goto LABEL_66;
  }
LABEL_65:
  v36 = *(_DWORD *)(a1 + 4368);
  if (v36 == 2)
    goto LABEL_66;
  *(_DWORD *)(a1 + 4368) = 1;
  llvm::Attributor::updateAA((llvm::Attributor *)a1, v10);
  *(_DWORD *)(a1 + 4368) = v36;
  if (a4)
  {
    v38 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v10 + 40))(v10);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38))
    {
      v21 = a1;
      v22 = (uint64_t)v10;
      v23 = a4;
      v24 = a5;
      goto LABEL_32;
    }
  }
  return v10;
}

uint64_t sub_1C57384F4(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_1E817B968;
  *(_QWORD *)(a1 + 32) = &unk_1E817B9F8;
  v2 = *(void **)(a1 + 144);
  if (v2 != *(void **)(a1 + 136))
    free(v2);
  v3 = *(void **)(a1 + 88);
  if (v3 != (void *)(a1 + 104))
    free(v3);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  return a1;
}

void sub_1C573857C(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = off_1E817B968;
  *(_QWORD *)(a1 + 32) = &unk_1E817B9F8;
  v2 = *(void **)(a1 + 144);
  if (v2 != *(void **)(a1 + 136))
    free(v2);
  v3 = *(void **)(a1 + 88);
  if (v3 != (void *)(a1 + 104))
    free(v3);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  *(_QWORD *)a1 = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5738614(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  unint64_t *v13;
  uint64_t (**v14)(void);
  uint64_t v15[2];
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (byte_1ED80D7C8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  v5 = a2[11];
  v17[0] = &off_1E817BA58;
  v18 = v17;
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 27328) + 8);
  if (v6)
  {
    do
    {
      v7 = *(_QWORD *)(v6 + 24);
      v8 = *(unsigned __int8 *)(v7 + 16);
      if (v8 >= 0x1C)
      {
        v9 = v8 - 33;
        v10 = v9 > 0x33;
        v11 = (1 << v9) & 0x8000000000041;
        if (!v10 && v11 != 0)
        {
          v16 = *(_QWORD *)(v6 + 24);
          sub_1C61ABE04(a1 + 48, &v16);
          v15[0] = v7 | 1;
          v15[1] = 0;
          v13 = sub_1C62908E4(a2, v15);
          sub_1C6290848((uint64_t)(v13 + 2), (uint64_t)v17);
        }
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6);
    v5 = a2[11];
  }
  sub_1C5739454(a1, v5);
  result = (uint64_t)v18;
  if (v18 == v17)
  {
    v14 = (uint64_t (**)(void))(v17[0] + 32);
  }
  else
  {
    if (!v18)
      return result;
    v14 = (uint64_t (**)(void))(*v18 + 40);
  }
  return (*v14)();
}

void sub_1C57387A4(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v3;
  std::string::size_type v4;
  std::string *v5;
  std::string v6;
  std::string v7;

  std::to_string(&v6, *(unsigned int *)(a1 + 96));
  v3 = std::string::insert(&v6, 0, "[AAHeapToShared] ");
  v4 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v7.__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v7.__r_.__value_.__r.__words[2] = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v7, " malloc calls eligible.");
  *a2 = *v5;
  v5->__r_.__value_.__r.__words[0] = 0;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1C5738848(char *a1@<X8>)
{
  a1[23] = 14;
  strcpy(a1, "AAHeapToShared");
}

void *sub_1C5738870()
{
  return &unk_1C8660429;
}

uint64_t sub_1C573887C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unsigned int v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  llvm::Type ***v25;
  unsigned int v26;
  llvm::Type **v27;
  llvm::Type **v28;
  llvm::UndefValue *v29;
  llvm::UndefValue *v30;
  _DWORD *v31;
  llvm::UndefValue *v32;
  llvm::Type *v33;
  llvm::UndefValue *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm::ConstantExpr *v39;
  llvm::PointerType *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  llvm::Constant *v51;
  llvm::Type *v52;
  llvm::ConstantExpr *PointerCast;
  uint64_t (*v54)(_QWORD, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  llvm::Type **v62;
  int32x2_t v63;
  int64x2_t v64;
  int8x16_t v65;
  int8x16_t v66;
  char *v67;
  unint64_t v68;
  void **v69;
  char *v70;
  unint64_t v71;
  void **v72;
  char *v73;
  unint64_t v74;
  void **v75;
  __int16 v76;
  int v77;
  llvm::Type ***v79;
  llvm::ConstantExpr *v80;
  _QWORD **v81;
  llvm::ConstantExpr *v82;
  llvm::ArrayType *v83;
  llvm::PointerType *v84;
  _DWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t *v88;
  std::string v89;
  void *__p;
  char v91;
  int8x16_t v92;
  void *v93;
  uint64_t v94;
  _BYTE v95[32];
  _QWORD v96[10];
  void *v97;
  unsigned int v98;
  uint64_t v99;
  uint64_t (**v100)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v101;
  char v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  char v108;
  char v109;
  void *v110;
  uint64_t v111;
  _BYTE v112[260];
  int v113;
  uint64_t v114;
  __int128 v115;
  const char *v116;
  __int16 v117;
  void *v118;
  unsigned int v119;
  _QWORD v120[36];

  v120[34] = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 96))
    return 1;
  v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v4 = *(_QWORD *)(v4 + 24);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (*(_BYTE *)(v4 + 16))
  {
    if (v5 == 21)
    {
      v6 = (unint64_t *)(v4 + 24);
LABEL_9:
      v4 = *v6;
      goto LABEL_11;
    }
    if (v5 >= 0x1C)
    {
      v6 = (unint64_t *)(*(_QWORD *)(v4 + 40) + 56);
      goto LABEL_9;
    }
    v4 = 0;
  }
LABEL_11:
  v7 = *(_QWORD *)(a2 + 88);
  v115 = v4;
  v8 = sub_1C5687800(a2, &v115, a1, 1, 0);
  v9 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v9)
  {
    v10 = v8;
    v87 = (_QWORD *)a2;
    v11 = *(uint64_t **)(a1 + 88);
    v12 = &v11[v9];
    v13 = 1;
    v88 = v12;
    while (1)
    {
      v14 = *v11;
      if (!v10 || ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 112))(v10, *v11) & 1) == 0)
        break;
LABEL_47:
      if (++v11 == v12)
        return v13;
    }
    v93 = v95;
    v94 = 0x400000000;
    v15 = *(_QWORD *)(v14 + 8);
    if (v15)
    {
      v16 = 0;
      do
      {
        v17 = *(_QWORD *)(v15 + 24);
        v18 = *(unsigned __int8 *)(v17 + 16);
        if (v18 >= 0x1C)
        {
          v19 = v18 - 33;
          v20 = v19 > 0x33;
          v21 = (1 << v19) & 0x8000000000041;
          if (!v20 && v21 != 0)
          {
            v23 = *(_QWORD *)(v17 - 32);
            if (!v23 || *(_BYTE *)(v23 + 16) || *(_QWORD *)(v23 + 24) != *(_QWORD *)(v17 + 72))
              v23 = 0;
            if (v23 == *(_QWORD *)(v7 + 27480))
            {
              if (v16 >= HIDWORD(v94))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v93, (uint64_t)v95, v16 + 1, 8);
                v16 = v94;
              }
              *((_QWORD *)v93 + v16) = v17;
              v16 = v94 + 1;
              LODWORD(v94) = v94 + 1;
            }
          }
        }
        v15 = *(_QWORD *)(v15 + 8);
      }
      while (v15);
      if (v16 == 1)
      {
        v24 = *(_QWORD *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF));
        v25 = (llvm::Type ***)(v24 + 24);
        v26 = *(_DWORD *)(v24 + 32);
        v27 = (llvm::Type **)(v24 + 24);
        v12 = v88;
        if (v26 >= 0x41)
          v27 = *v25;
        if ((unint64_t)*v27 + *(unsigned int *)(a1 + 200) > dword_1ED80DF48)
          goto LABEL_45;
        v86 = *(_QWORD *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF));
        v28 = (llvm::Type **)(v24 + 24);
        if (v26 >= 0x41)
          v28 = *v25;
        v81 = *(_QWORD ***)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 56) + 40);
        v83 = (llvm::ArrayType *)(**v81 + 1912);
        llvm::ArrayType::get(v83, *v28);
        v30 = v29;
        v31 = operator new(0x78uLL);
        v31[13] = v31[13] & 0x38000000 | 1;
        *(_QWORD *)v31 = 0;
        *((_QWORD *)v31 + 1) = 0;
        *((_QWORD *)v31 + 2) = 0;
        *((_QWORD *)v31 + 3) = v31 + 8;
        v85 = v31;
        v80 = (llvm::ConstantExpr *)(v31 + 8);
        v32 = v30;
        v34 = llvm::UndefValue::get(v30, v33);
        if ((*(_BYTE *)(v14 + 23) & 0x10) == 0)
        {
          v48 = 0;
          v49 = &byte_1C871356D;
          v39 = v80;
          v38 = (uint64_t)v81;
          v40 = v32;
          v41 = v87;
LABEL_51:
          v117 = 773;
          *(_QWORD *)&v115 = v49;
          *((_QWORD *)&v115 + 1) = v48;
          v116 = "_shared";
          llvm::GlobalVariable::GlobalVariable((uint64_t)v39, v38, v40, 0, 7, (uint64_t)v34, (uint64_t)&v115, 0, 0, 0x100000003, 0);
          v51 = (llvm::Constant *)llvm::PointerType::get(v83, 0);
          PointerCast = llvm::ConstantExpr::getPointerCast(v39, v51, v52);
          v54 = (uint64_t (*)(_QWORD, _QWORD))v41[687];
          if (v54)
          {
            v84 = (llvm::PointerType *)v54(v41[688], *(_QWORD *)(*(_QWORD *)(v14 + 40) + 56));
            v55 = ****(_QWORD ****)v84;
            if (*(_QWORD *)(v55 + 128)
              || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v55 + 72) + 48))(*(_QWORD *)(v55 + 72)))
            {
              v82 = PointerCast;
              v56 = v41[689];
              v57 = *(_QWORD *)(*(_QWORD *)(v14 + 40) + 56);
              llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v89, (const llvm::DebugLoc *)(v14 + 48));
              v58 = *(_QWORD *)(v14 + 40);
              v101 = 9;
              v102 = 2;
              v104 = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
              v103 = v57;
              v105 = v56;
              v106 = "OMP111";
              v107 = 6;
              v108 = 0;
              v109 = 0;
              v110 = v112;
              v111 = 0x400000000;
              v112[256] = 0;
              v113 = -1;
              v114 = v58;
              v100 = &off_1E814E500;
              v89.__r_.__value_.__r.__words[0] = (std::string::size_type)"Replaced globalized variable with ";
              v89.__r_.__value_.__l.__size_ = 34;
              sub_1C53B17B4((uint64_t)&v110, (const void **)&v89.__r_.__value_.__l.__data_);
              v59 = (unint64_t *)v25;
              if (*(_DWORD *)(v86 + 32) >= 0x41u)
                v59 = (unint64_t *)*v25;
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v89, "SharedMemory", 0xCuLL, *v59);
              v60 = sub_1C47E3888((uint64_t)&v100, (uint64_t)&v89);
              v61 = v60;
              v62 = (llvm::Type **)v25;
              if (*(_DWORD *)(v86 + 32) >= 0x41u)
                v62 = *v25;
              v63 = vdup_n_s32(*v62 == (llvm::Type *)1);
              v64.i64[0] = v63.u32[0];
              v64.i64[1] = v63.u32[1];
              v65 = (int8x16_t)vdupq_n_s64(7uLL);
              v65.i64[0] = (uint64_t)" bytes ";
              v66 = (int8x16_t)vdupq_n_s64(6uLL);
              v66.i64[0] = (uint64_t)" byte ";
              v92 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v64, 0x3FuLL)), v66, v65);
              sub_1C53B17B4(v60 + 80, (const void **)&v92);
              v92.i64[0] = (uint64_t)"of shared memory.";
              v92.i64[1] = 17;
              sub_1C53B17B4(v61 + 80, (const void **)&v92);
              sub_1C61998EC((uint64_t)&v115, v61);
              *(_QWORD *)&v115 = &off_1E814E500;
              v41 = v87;
              if (v91 < 0)
                operator delete(__p);
              if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v89.__r_.__value_.__l.__data_);
              v89.__r_.__value_.__r.__words[0] = (std::string::size_type)" [";
              v89.__r_.__value_.__l.__size_ = 2;
              sub_1C53B17B4((uint64_t)&v118, (const void **)&v89.__r_.__value_.__l.__data_);
              v89.__r_.__value_.__r.__words[0] = (std::string::size_type)"OMP111";
              v89.__r_.__value_.__l.__size_ = 6;
              sub_1C53B17B4((uint64_t)&v118, (const void **)&v89.__r_.__value_.__l.__data_);
              v89.__r_.__value_.__r.__words[0] = (std::string::size_type)"]";
              v89.__r_.__value_.__l.__size_ = 1;
              sub_1C53B17B4((uint64_t)&v118, (const void **)&v89.__r_.__value_.__l.__data_);
              sub_1C61998EC((uint64_t)v96, (uint64_t)&v115);
              v96[0] = &off_1E814E500;
              *(_QWORD *)&v115 = &off_1E814E790;
              v67 = (char *)v118;
              v79 = v25;
              if (v119)
              {
                v68 = (unint64_t)v119 << 6;
                do
                {
                  v69 = (void **)&v67[v68];
                  if (v67[v68 - 17] < 0)
                    operator delete(*(v69 - 5));
                  if (*((char *)v69 - 41) < 0)
                    operator delete(*(v69 - 8));
                  v68 -= 64;
                }
                while (v68);
                v67 = (char *)v118;
                v41 = v87;
                v25 = v79;
              }
              if (v67 != (char *)v120)
                free(v67);
              v100 = &off_1E814E790;
              v70 = (char *)v110;
              if ((_DWORD)v111)
              {
                v71 = (unint64_t)v111 << 6;
                do
                {
                  v72 = (void **)&v70[v71];
                  if (v70[v71 - 17] < 0)
                    operator delete(*(v72 - 5));
                  if (*((char *)v72 - 41) < 0)
                    operator delete(*(v72 - 8));
                  v71 -= 64;
                }
                while (v71);
                v70 = (char *)v110;
                v41 = v87;
                v25 = v79;
              }
              if (v70 != v112)
                free(v70);
              llvm::OptimizationRemarkEmitter::emit(v84, (llvm::DiagnosticInfoOptimizationBase *)v96);
              v96[0] = &off_1E814E790;
              v73 = (char *)v97;
              if (v98)
              {
                v74 = (unint64_t)v98 << 6;
                do
                {
                  v75 = (void **)&v73[v74];
                  if (v73[v74 - 17] < 0)
                    operator delete(*(v75 - 5));
                  if (*((char *)v75 - 41) < 0)
                    operator delete(*(v75 - 8));
                  v74 -= 64;
                }
                while (v74);
                v73 = (char *)v97;
                v41 = v87;
                v25 = v79;
              }
              if (v73 != (char *)&v99)
                free(v73);
              PointerCast = v82;
            }
          }
          v76 = sub_1C543FD8C(v14);
          v77 = (v76 << 16) + 0x10000;
          if ((v76 & 0xFF00) == 0)
            v77 = 0;
          v85[16] = v77 | v85[16] & 0xFFC0FFFF;
          sub_1C6290C00((uint64_t)v41, v14, PointerCast, 1);
          sub_1C6290278((uint64_t)v41, v14);
          sub_1C6290278((uint64_t)v41, *(_QWORD *)v93);
          v12 = v88;
          if (*(_DWORD *)(v86 + 32) >= 0x41u)
            v25 = (llvm::Type ***)*v25;
          v13 = 0;
          *(_DWORD *)(a1 + 200) += *(_DWORD *)v25;
          goto LABEL_45;
        }
        v35 = ***(_QWORD ***)v14;
        v36 = *(_QWORD *)(v35 + 152);
        v37 = *(unsigned int *)(v35 + 168);
        v39 = v80;
        v38 = (uint64_t)v81;
        v40 = v32;
        v41 = v87;
        if ((_DWORD)v37)
        {
          LODWORD(v42) = (v37 - 1) & ((v14 >> 4) ^ (v14 >> 9));
          v43 = (uint64_t *)(v36 + 16 * v42);
          v44 = *v43;
          if (*v43 == v14)
          {
LABEL_50:
            v47 = (_QWORD *)v43[1];
            v50 = *v47;
            v49 = (char *)(v47 + 2);
            v48 = v50;
            goto LABEL_51;
          }
          v45 = 1;
          while (v44 != -4096)
          {
            v46 = v42 + v45++;
            v42 = v46 & (v37 - 1);
            v44 = *(_QWORD *)(v36 + 16 * v42);
            if (v44 == v14)
            {
              v43 = (uint64_t *)(v36 + 16 * v42);
              goto LABEL_50;
            }
          }
        }
        v43 = (uint64_t *)(v36 + 16 * v37);
        goto LABEL_50;
      }
      v12 = v88;
    }
LABEL_45:
    if (v93 != v95)
      free(v93);
    goto LABEL_47;
  }
  return 1;
}

BOOL sub_1C573912C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  llvm::AbstractAttribute *v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v18;

  v4 = *(_QWORD *)(a2 + 88);
  v5 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v5 = *(_QWORD *)(v5 + 24);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (*(_BYTE *)(v5 + 16))
  {
    if (v6 == 21)
    {
      v7 = (unint64_t *)(v5 + 24);
LABEL_8:
      v5 = *v7;
      goto LABEL_10;
    }
    if (v6 >= 0x1C)
    {
      v7 = (unint64_t *)(*(_QWORD *)(v5 + 40) + 56);
      goto LABEL_8;
    }
    v5 = 0;
  }
LABEL_10:
  v8 = *(_DWORD *)(a1 + 96);
  v9 = *(_QWORD *)(*(_QWORD *)(v4 + 27328) + 8);
  if (v9)
  {
    do
    {
      v10 = *(_QWORD *)(v9 + 24);
      v11 = sub_1C57248C0(a2, v5, 0, a1, 0);
      v12 = *(unsigned __int8 *)(v10 + 16);
      if (v12 >= 0x1C)
      {
        v13 = v12 - 33;
        v14 = v13 > 0x33;
        v15 = (1 << v13) & 0x8000000000041;
        if (!v14 && v15 != 0)
        {
          v18 = v10;
          if (*(_BYTE *)(*(_QWORD *)(v10 - 32 * (*(_DWORD *)(v10 + 20) & 0x7FFFFFF)) + 16) != 16
            || ((*(uint64_t (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v11 + 112))(v11, v10) & 1) == 0)
          {
            sub_1C61BE50C(a1 + 48, &v18);
          }
        }
      }
      v9 = *(_QWORD *)(v9 + 8);
    }
    while (v9);
    v4 = *(_QWORD *)(a2 + 88);
  }
  sub_1C5739454(a1, v4);
  return v8 == *(_DWORD *)(a1 + 96);
}

uint64_t sub_1C573928C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  if ((_DWORD)result)
    return sub_1C6154170(a1 + 48, a2, &v5);
  return result;
}

uint64_t sub_1C57392D8(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  result = (*(uint64_t (**)(_QWORD *))(a1[4] + 16))(a1 + 4);
  if ((_DWORD)result)
  {
    v5 = sub_1C477672C((uint64_t)(a1 + 17), a2);
    v6 = a1[18];
    v7 = 152;
    if (v6 == a1[17])
      v7 = 156;
    return v5 != (_QWORD *)(v6 + 8 * *(unsigned int *)((char *)a1 + v7));
  }
  return result;
}

uint64_t *sub_1C5739338(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)(a1 - 32) = off_1E817B968;
  *(_QWORD *)a1 = &unk_1E817B9F8;
  v2 = *(void **)(a1 + 112);
  if (v2 != *(void **)(a1 + 104))
    free(v2);
  v3 = *(void **)(a1 + 56);
  if (v3 != (void *)(a1 + 72))
    free(v3);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C57393B8(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)(a1 - 32) = off_1E817B968;
  *(_QWORD *)a1 = &unk_1E817B9F8;
  v2 = *(void **)(a1 + 112);
  if (v2 != *(void **)(a1 + 104))
    free(v2);
  v3 = *(void **)(a1 + 56);
  if (v3 != (void *)(a1 + 72))
    free(v3);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 24), 8);
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5739454(uint64_t a1, uint64_t a2)
{
  void *v5;
  void *v6;
  llvm::SmallPtrSetImplBase *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v24;
  int v25;
  unsigned int v26;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD v30[5];

  v30[4] = *MEMORY[0x1E0C80C00];
  v6 = *(void **)(a1 + 136);
  v5 = *(void **)(a1 + 144);
  v7 = (llvm::SmallPtrSetImplBase *)(a1 + 136);
  if (v5 == v6)
    goto LABEL_2;
  v22 = *(unsigned int *)(a1 + 152);
  if (v22 < 0x21 || 4 * (*(_DWORD *)(a1 + 156) - *(_DWORD *)(a1 + 160)) >= v22)
  {
    memset(v5, 255, 8 * v22);
LABEL_2:
    *(_DWORD *)(a1 + 156) = 0;
    *(_DWORD *)(a1 + 160) = 0;
    goto LABEL_3;
  }
  free(v5);
  v24 = *(_DWORD *)(a1 + 156) - *(_DWORD *)(a1 + 160);
  v25 = 1 << (33 - __clz(v24 - 1));
  *(_DWORD *)(a1 + 156) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  if (v24 <= 0x10)
    v26 = 32;
  else
    v26 = v25;
  *(_DWORD *)(a1 + 152) = v26;
  v27 = malloc_type_malloc(8 * v26, 0x4065EBACuLL);
  if (!v27)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 144) = v27;
  memset(v27, 255, 8 * *(unsigned int *)(a1 + 152));
LABEL_3:
  v8 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v8)
  {
    v9 = *(uint64_t **)(a1 + 88);
    v10 = &v9[v8];
    do
    {
      v11 = *v9;
      v28 = v30;
      v29 = 0x400000000;
      v12 = *(_QWORD *)(v11 + 8);
      if (v12)
      {
        v13 = 0;
        do
        {
          v14 = *(_QWORD *)(v12 + 24);
          v15 = *(unsigned __int8 *)(v14 + 16);
          if (v15 >= 0x1C)
          {
            v16 = v15 - 33;
            v17 = v16 > 0x33;
            v18 = (1 << v16) & 0x8000000000041;
            if (!v17 && v18 != 0)
            {
              v20 = *(_QWORD *)(v14 - 32);
              if (!v20 || *(_BYTE *)(v20 + 16) || *(_QWORD *)(v20 + 24) != *(_QWORD *)(v14 + 72))
                v20 = 0;
              if (v20 == *(_QWORD *)(a2 + 27480))
              {
                if (v13 >= HIDWORD(v29))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v30, v13 + 1, 8);
                  v13 = v29;
                }
                *((_QWORD *)v28 + v13) = v14;
                v13 = v29 + 1;
                LODWORD(v29) = v29 + 1;
              }
            }
          }
          v12 = *(_QWORD *)(v12 + 8);
        }
        while (v12);
        v21 = v28;
        if (v13 == 1)
        {
          sub_1C4774094(v7, *(_QWORD *)v28);
          v21 = v28;
        }
        if (v21 != v30)
          free(v21);
      }
      ++v9;
    }
    while (v9 != v10);
  }
}

void sub_1C57396A4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C57396B8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E817BA58;
  return result;
}

void sub_1C57396DC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817BA58;
}

uint64_t sub_1C57396F4()
{
  return 0;
}

_QWORD *sub_1C5739700(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_1E817BAA0;
  a1[4] = &unk_1E817BB20;
  v2 = (void *)a1[50];
  if (v2 != (void *)a1[49])
    free(v2);
  a1[4] = &off_1E817B7A8;
  a1[41] = &off_1E817B908;
  sub_1C629C730(a1 + 43);
  a1[33] = &off_1E817B7E8;
  v3 = (void *)a1[38];
  if (v3)
  {
    a1[39] = v3;
    operator delete(v3);
  }
  MEMORY[0x1CAA32FB4](a1[35], 8);
  a1[22] = &off_1E817B8A8;
  sub_1C6176BF8(a1 + 24);
  a1[14] = &off_1E817B848;
  sub_1C6176BF8(a1 + 16);
  a1[6] = &off_1E817B7E8;
  v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  MEMORY[0x1CAA32FB4](a1[8], 8);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C57397F8(_QWORD *a1)
{
  sub_1C5739700(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C573981C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  void (**v32)(void);
  void (**v33)(void);
  uint64_t (***v34)();
  void (**v35)(uint64_t (***)());
  uint64_t v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[3];
  _QWORD *v43;
  uint64_t (**v44)();
  uint64_t v45;
  uint64_t *v46;
  uint64_t (***v47)();
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v4 = *(_QWORD *)(v4 + 24);
  v5 = a2[11];
  v6 = *(unsigned __int8 *)(v4 + 16);
  if (*(_BYTE *)(v4 + 16))
  {
    if (v6 == 21)
    {
      v7 = (unint64_t *)(v4 + 24);
    }
    else
    {
      if (v6 < 0x1C)
      {
        v4 = 0;
        goto LABEL_10;
      }
      v7 = (unint64_t *)(*(_QWORD *)(v4 + 40) + 56);
    }
    v4 = *v7;
  }
LABEL_10:
  v39 = v4;
  v8 = v5 + 25384;
  v44 = (uint64_t (**)())&v38;
  v45 = v5 + 25232;
  v46 = (uint64_t *)a1;
  sub_1C5735FC4(v5 + 25232, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C573E71C, (uint64_t)&v44, v4);
  v44 = (uint64_t (**)())&v38;
  v45 = v8;
  v46 = (uint64_t *)a1;
  sub_1C5735FC4(v8, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C573E7CC, (uint64_t)&v44, v4);
  if (*(_QWORD *)(a1 + 240) && *(_QWORD *)(a1 + 248))
  {
    sub_1C567D3D8((_QWORD *)(a1 + 280), &v39);
    *(_BYTE *)(a1 + 256) = 1;
    v44 = &off_1E817BB60;
    v45 = a1;
    v46 = a2;
    v47 = &v44;
    v42[0] = &off_1E817BBA8;
    v42[1] = a1;
    v42[2] = a2;
    v43 = v42;
    v40[0] = &off_1E817BBF0;
    v40[1] = a1;
    v40[2] = a2;
    v41 = v40;
    v9 = *(_QWORD *)(a1 + 240);
    v10 = *(_DWORD *)(v9 + 20);
    if ((v10 & 0x40000000) != 0)
      v11 = *(_QWORD *)(v9 - 8);
    else
      v11 = v9 - 32 * (v10 & 0x7FFFFFF);
    v36 = (v11 + 64) | 3;
    v37 = 0;
    v12 = sub_1C62908E4(a2, &v36);
    sub_1C6290848((uint64_t)(v12 + 2), (uint64_t)&v44);
    v13 = *(_QWORD *)(a1 + 240);
    v14 = *(_DWORD *)(v13 + 20);
    if ((v14 & 0x40000000) != 0)
      v15 = *(_QWORD *)(v13 - 8);
    else
      v15 = v13 - 32 * (v14 & 0x7FFFFFF);
    v36 = (v15 + 32) | 3;
    v37 = 0;
    v16 = sub_1C62908E4(a2, &v36);
    sub_1C6290848((uint64_t)(v16 + 2), (uint64_t)v42);
    v17 = *(_QWORD *)(a1 + 248);
    v18 = *(_DWORD *)(v17 + 20);
    if ((v18 & 0x40000000) != 0)
      v19 = *(_QWORD *)(v17 - 8);
    else
      v19 = v17 - 32 * (v18 & 0x7FFFFFF);
    v36 = (v19 + 32) | 3;
    v37 = 0;
    v20 = sub_1C62908E4(a2, &v36);
    sub_1C6290848((uint64_t)(v20 + 2), (uint64_t)v42);
    v21 = *(_QWORD *)(a1 + 240);
    v22 = *(_DWORD *)(v21 + 20);
    if ((v22 & 0x40000000) != 0)
      v23 = *(_QWORD *)(v21 - 8);
    else
      v23 = v21 - 32 * (v22 & 0x7FFFFFF);
    v36 = (v23 + 96) | 3;
    v37 = 0;
    v24 = sub_1C62908E4(a2, &v36);
    sub_1C6290848((uint64_t)(v24 + 2), (uint64_t)v40);
    v25 = *(_QWORD *)(a1 + 248);
    v26 = *(_DWORD *)(v25 + 20);
    if ((v26 & 0x40000000) != 0)
      v27 = *(_QWORD *)(v25 - 8);
    else
      v27 = v25 - 32 * (v26 & 0x7FFFFFF);
    v36 = (v27 + 64) | 3;
    v37 = 0;
    v28 = sub_1C62908E4(a2, &v36);
    sub_1C6290848((uint64_t)(v28 + 2), (uint64_t)v40);
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 240) - 32 * (*(_DWORD *)(*(_QWORD *)(a1 + 240) + 20) & 0x7FFFFFF) + 32);
    if (v29
      && *(_BYTE *)(v29 + 16) == 16
      && ((v30 = *(_DWORD *)(v29 + 32), v30 > 0x40)
        ? (v31 = **(_QWORD **)(v29 + 24))
        : (v31 = (uint64_t)(*(_QWORD *)(v29 + 24) << -(char)v30) >> -(char)v30),
          (v31 & 2) != 0))
    {
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a1 + 185);
    }
    else if (byte_1ED80D888)
    {
      *(_BYTE *)(a1 + 185) = *(_BYTE *)(a1 + 184);
    }
    if (v41 == v40)
    {
      v32 = (void (**)(void))(v40[0] + 32);
    }
    else
    {
      if (!v41)
        goto LABEL_42;
      v32 = (void (**)(void))(*v41 + 40);
    }
    (*v32)();
LABEL_42:
    if (v43 == v42)
    {
      v33 = (void (**)(void))(v42[0] + 32);
    }
    else
    {
      if (!v43)
        goto LABEL_47;
      v33 = (void (**)(void))(*v43 + 40);
    }
    (*v33)();
LABEL_47:
    v34 = v47;
    if (v47 == &v44)
    {
      v35 = (void (**)(uint64_t (***)()))(v44 + 4);
      v34 = &v44;
    }
    else
    {
      if (!v47)
        return;
      v35 = (void (**)(uint64_t (***)()))(*v47 + 5);
    }
    (*v35)(v34);
  }
}

uint64_t sub_1C5739BD4(uint64_t a1, _QWORD *a2, const llvm::APInt *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  unsigned int *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(_QWORD, _QWORD);
  llvm::OptimizationRemarkEmitter *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  unint64_t v29;
  void **v30;
  char *v31;
  unint64_t v32;
  void **v33;
  char *v34;
  unint64_t v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  llvm::APInt *v42;
  unsigned int v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  int v52;
  int v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *p_p;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  char v67;
  _QWORD *v68;
  _QWORD **v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  int v91;
  llvm::Instruction **v93;
  llvm::Instruction **v94;
  llvm::Instruction *v95;
  llvm::Instruction *v96;
  uint64_t *v97;
  uint64_t *v98;
  char v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  llvm::SmallPtrSetImplBase *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  int v119;
  llvm::Value **v120;
  const llvm::APInt *v121;
  unint64_t v122;
  llvm::ConstantInt *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  llvm::Value *Signed;
  const llvm::APInt *v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  llvm::Value *v134;
  const llvm::APInt *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t v139;
  llvm::Value *v140;
  const llvm::APInt *v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  llvm::Value *v146;
  const llvm::APInt *v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  llvm::Value *v152;
  uint64_t (*v153)(_QWORD, _QWORD);
  uint64_t v154;
  llvm::OptimizationRemarkEmitter *v155;
  uint64_t v156;
  llvm::IRPosition *v157;
  unint64_t v158;
  llvm::Value *Bool;
  uint64_t v160;
  int v161;
  uint64_t v162;
  llvm::BasicBlock **v163;
  llvm::BasicBlock *v164;
  _QWORD *v165;
  uint64_t v166;
  BOOL v167;
  llvm::BasicBlock *v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  _QWORD *v172;
  _QWORD *v173;
  unsigned int v174;
  uint64_t v175;
  llvm::BasicBlock *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  unsigned int v181;
  uint64_t v182;
  llvm::BasicBlock *v184;
  uint64_t v185;
  llvm::BasicBlock *v186;
  llvm::BasicBlock *v187;
  _QWORD *v188;
  unsigned __int8 *v189;
  uint64_t v190;
  char v191;
  _QWORD *v192;
  uint64_t v193;
  llvm::PointerType *v194;
  uint64_t v195;
  unsigned __int8 *v196;
  uint64_t ***v197;
  llvm::PointerType **v198;
  llvm::PointerType *v199;
  int v200;
  _WORD *v201;
  _WORD *v202;
  uint64_t v203;
  _DWORD *v204;
  llvm::Value *v205;
  llvm::PointerType *v206;
  llvm::Type *v207;
  llvm::UndefValue *v208;
  unsigned int v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  llvm::PointerType ***v214;
  llvm::PointerType **v215;
  int v216;
  int v217;
  llvm::PointerType **v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  __int128 *v222;
  uint64_t v223;
  int v224;
  BOOL v225;
  _DWORD *v227;
  llvm::StoreInst *v228;
  _QWORD *v229;
  unsigned __int8 *v230;
  llvm::Instruction *v231;
  _DWORD *v232;
  llvm::Value *v233;
  llvm::UndefValue *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  llvm::PointerType ***v239;
  llvm::PointerType **v240;
  int v241;
  int v242;
  llvm::PointerType **v243;
  llvm::PointerType *v244;
  char *v245;
  llvm::PointerType *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  char **v250;
  uint64_t v251;
  llvm::User **v252;
  uint64_t v253;
  uint64_t v254;
  llvm::User *v255;
  unint64_t *v256;
  unint64_t v257;
  uint64_t ***v258;
  uint64_t **v259;
  uint64_t **v260;
  uint64_t v261;
  llvm::Value **v262;
  char *v263;
  unsigned __int8 *v264;
  unsigned __int8 **v265;
  unsigned __int8 *v266;
  unsigned __int8 *v267;
  llvm::BasicBlock *v268;
  char *v269;
  char *v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t **v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  unsigned __int8 **v278;
  unsigned __int8 *v279;
  llvm::Value **v280;
  llvm::Value *v281;
  char *v282;
  uint64_t v283;
  unsigned __int8 **v284;
  char *v285;
  unsigned __int8 **v286;
  unsigned __int8 **v287;
  unsigned __int8 *v288;
  uint64_t **v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v297;
  unsigned __int8 **v298;
  unsigned __int8 *v299;
  _QWORD *v300;
  _QWORD *v301;
  _QWORD *v302;
  char *v303;
  char *v304;
  uint64_t v305;
  llvm::Value *v306;
  char *v307;
  uint64_t v308;
  char *v309;
  unsigned __int8 *v310;
  unsigned __int8 *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  llvm::ValueSymbolTable *v315;
  uint64_t v316;
  unsigned __int8 *v317;
  uint64_t v318;
  char *v319;
  unint64_t v320;
  void **v321;
  char *v322;
  unint64_t v323;
  void **v324;
  char *v325;
  unint64_t v326;
  void **v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t (*v331)(_QWORD, _QWORD);
  llvm::OptimizationRemarkEmitter *v332;
  uint64_t v333;
  uint64_t v334;
  unsigned __int8 *v335;
  uint64_t v336;
  char *v337;
  unint64_t v338;
  void **v339;
  char *v340;
  unint64_t v341;
  void **v342;
  char *v343;
  unint64_t v344;
  void **v345;
  llvm::OptimizationRemarkEmitter *v346;
  uint64_t v347;
  uint64_t v348;
  unsigned __int8 *v349;
  uint64_t v350;
  char *v351;
  unint64_t v352;
  void **v353;
  char *v354;
  unint64_t v355;
  void **v356;
  char *v357;
  unint64_t v358;
  void **v359;
  llvm::OptimizationRemarkEmitter *v360;
  uint64_t v361;
  uint64_t v362;
  unsigned __int8 *v363;
  uint64_t v364;
  char *v365;
  unint64_t v366;
  void **v367;
  char *v368;
  unint64_t v369;
  void **v370;
  char *v371;
  unint64_t v372;
  void **v373;
  uint64_t *v374;
  uint64_t *i;
  unint64_t v376;
  uint64_t *v377;
  uint64_t *v378;
  BOOL v379;
  uint64_t *v380;
  llvm::BasicBlock *v381;
  uint64_t v382;
  unsigned int v383;
  uint64_t v384;
  uint64_t *v385;
  uint64_t v386;
  uint64_t v387;
  unsigned int v388;
  uint64_t v389;
  uint64_t *v390;
  uint64_t v391;
  uint64_t v392;
  unsigned int v393;
  uint64_t v394;
  uint64_t *v395;
  uint64_t v396;
  uint64_t v397;
  unsigned int v398;
  uint64_t v399;
  uint64_t *v400;
  uint64_t v401;
  uint64_t v402;
  unsigned int v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t **v406;
  uint64_t *v407;
  uint64_t v408;
  unsigned int v409;
  llvm::BasicBlock **v410;
  llvm::BasicBlock *v411;
  uint64_t v412;
  unsigned int v413;
  uint64_t v414;
  uint64_t *v415;
  uint64_t v416;
  uint64_t v417;
  char *v418;
  uint64_t v419;
  char *v420;
  unsigned __int8 *v421;
  const char **v422;
  unsigned __int8 *v423;
  unsigned __int8 *v424;
  _QWORD *v425;
  uint64_t ***v426;
  uint64_t ***v427;
  uint64_t **v428;
  uint64_t **v429;
  llvm::ConstantInt **v430;
  llvm::Value **v431;
  unsigned __int8 **v432;
  unsigned __int8 *v433;
  unsigned __int8 **v434;
  unsigned __int8 *v435;
  _DWORD *v436;
  uint64_t v437;
  llvm::BranchInst *v438;
  _QWORD *v439;
  uint64_t v440;
  uint64_t v441;
  llvm::Type ***RuntimeFunction;
  uint64_t v443;
  uint64_t v444;
  llvm::Type ***v445;
  uint64_t v446;
  uint64_t v447;
  char *v448;
  _QWORD *v449;
  void *v450;
  unsigned __int8 *v451;
  void **v452;
  unsigned __int8 *v453;
  unsigned __int8 *v454;
  char *v455;
  uint64_t v456;
  void *v457;
  unsigned __int8 *v458;
  void **v459;
  unsigned __int8 *v460;
  unsigned __int8 *v461;
  llvm::Value *v462;
  unsigned __int8 *v463;
  unsigned __int8 **v464;
  unsigned __int8 *v465;
  _DWORD **v466;
  unsigned __int8 **v467;
  unsigned __int8 *v468;
  unsigned __int8 **v469;
  unsigned __int8 *v470;
  _DWORD *v471;
  uint64_t v472;
  llvm::BranchInst *v473;
  _QWORD *v474;
  llvm::PointerType *v475;
  char *v476;
  char *v477;
  llvm::PointerType ***v478;
  llvm::Type *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  unsigned __int8 *v484;
  unsigned __int8 *v485;
  unsigned __int8 *v486;
  unsigned __int8 *v487;
  _DWORD *v488;
  void *v489;
  uint64_t v490;
  char *v491;
  uint64_t v492;
  llvm::Instruction *v493;
  char *v494;
  unsigned __int8 *v495;
  unsigned __int8 *v496;
  _QWORD *v497;
  unsigned __int8 *v498;
  unsigned __int8 *v499;
  unsigned int v500;
  llvm::PointerType ***v501;
  char *v502;
  llvm::PointerType *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t (*v506)(_QWORD, _QWORD);
  BOOL v507;
  llvm::OptimizationRemarkEmitter *v508;
  uint64_t v509;
  uint64_t v510;
  unsigned __int8 *v511;
  uint64_t v512;
  char *v513;
  unint64_t v514;
  void **v515;
  char *v516;
  unint64_t v517;
  void **v518;
  char *v519;
  unint64_t v520;
  void **v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  uint64_t v525;
  llvm::PointerType ****v526;
  llvm::PointerType ***v527;
  int v528;
  int v529;
  llvm::PointerType ***v530;
  char *v531;
  llvm::PointerType **v532;
  llvm::PointerType **v533;
  uint64_t ***v534;
  unsigned __int8 *v535;
  unsigned __int8 *v536;
  _QWORD *v537;
  unsigned __int8 *v538;
  unsigned __int8 *v539;
  uint64_t **v540;
  uint64_t v541;
  uint64_t v542;
  char *v543;
  llvm::Value *v544;
  unsigned __int8 *v545;
  unsigned __int8 *v546;
  _QWORD *v547;
  unsigned __int8 *v548;
  unsigned __int8 *v549;
  char *v550;
  llvm::CastInst *v551;
  unsigned __int8 *v552;
  unsigned __int8 *v553;
  unsigned __int8 **v554;
  unsigned __int8 *v555;
  unsigned __int8 *v556;
  uint64_t **v557;
  llvm::Value *v558;
  llvm::BasicBlock *v559;
  llvm::Type *v560;
  llvm::Value **NullValue;
  unsigned __int8 **v562;
  unsigned __int8 *v563;
  unsigned __int8 **v564;
  unsigned __int8 *v565;
  char *v566;
  uint64_t v567;
  llvm::BranchInst *v568;
  char *v569;
  unsigned __int8 *v570;
  unsigned __int8 *v571;
  unsigned __int8 **v572;
  unsigned __int8 *v573;
  unsigned __int8 *v574;
  char *v575;
  uint64_t v576;
  llvm::BranchInst *v577;
  char *v578;
  unsigned __int8 *v579;
  unsigned __int8 *v580;
  unsigned __int8 **v581;
  unsigned __int8 *v582;
  unsigned __int8 *v583;
  llvm::Value **v584;
  uint64_t v585;
  llvm::BasicBlock *v586;
  uint64_t v587;
  llvm::BasicBlock *v588;
  llvm::BasicBlock *v589;
  uint64_t v590;
  uint64_t v591;
  unsigned int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t **v595;
  char *v596;
  uint64_t v597;
  llvm::Instruction *v598;
  char *v599;
  unsigned __int8 *v600;
  unsigned __int8 *v601;
  unsigned __int8 **v602;
  unsigned __int8 *v603;
  unsigned __int8 *v604;
  char *v605;
  unsigned __int8 *v606;
  unsigned __int8 *v607;
  unsigned __int8 **v608;
  unsigned __int8 *v609;
  unsigned __int8 *v610;
  uint64_t v611;
  unsigned int v612;
  uint64_t v613;
  uint64_t v614;
  const llvm::APInt *v615;
  uint64_t v616;
  unsigned __int8 **v617;
  llvm::ConstantInt *v618;
  unsigned int v619;
  char v620;
  unsigned __int8 *v621;
  unsigned __int8 **v622;
  unsigned __int8 *v623;
  char *v624;
  uint64_t v625;
  llvm::BranchInst *v626;
  char *v627;
  unsigned __int8 *v628;
  unsigned __int8 *v629;
  unsigned __int8 **v630;
  unsigned __int8 *v631;
  unsigned __int8 *v632;
  char *v633;
  uint64_t v634;
  llvm::Instruction *v635;
  char *v636;
  unsigned __int8 *v637;
  unsigned __int8 *v638;
  unsigned __int8 **v639;
  unsigned __int8 *v640;
  unsigned __int8 *v641;
  char *v642;
  unsigned __int8 *v643;
  unsigned __int8 *v644;
  unsigned __int8 **v645;
  unsigned __int8 *v646;
  unsigned __int8 *v647;
  uint64_t **v648;
  uint64_t v649;
  uint64_t v650;
  char *v651;
  unsigned __int8 *v652;
  unsigned __int8 *v653;
  unsigned __int8 **v654;
  unsigned __int8 *v655;
  unsigned __int8 *v656;
  char *v657;
  unsigned __int8 *v658;
  unsigned __int8 *v659;
  unsigned __int8 **v660;
  unsigned __int8 *v661;
  unsigned __int8 *v662;
  char *v663;
  uint64_t v664;
  llvm::Instruction *v665;
  char *v666;
  unsigned __int8 *v667;
  unsigned __int8 *v668;
  unsigned __int8 **v669;
  unsigned __int8 *v670;
  unsigned __int8 *v671;
  char *v672;
  unsigned __int8 *v673;
  unsigned __int8 *v674;
  _QWORD *v675;
  unsigned __int8 *v676;
  unsigned __int8 *v677;
  void *v678;
  llvm::PointerType *v679;
  uint64_t v680;
  uint64_t **v681;
  uint64_t v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t ***v685;
  llvm::BasicBlock *v686;
  llvm::SmallPtrSetImplBase *v687;
  llvm::SmallPtrSetImplBase *v688;
  llvm::BasicBlock *v689;
  llvm::BasicBlock *v690;
  llvm::BasicBlock *v691;
  llvm::BasicBlock *v692;
  llvm::PointerType *v693;
  llvm::UndefValue *Ident;
  _QWORD *v695;
  char *PointerBitCastOrAddrSpaceCast;
  llvm::BasicBlock *v697;
  llvm::BasicBlock *v698;
  llvm::BasicBlock *v699;
  int v700;
  llvm::BasicBlock *v701;
  llvm::BasicBlock *v702;
  uint64_t *v703;
  llvm::BasicBlock *v704;
  llvm::BasicBlock *v705;
  llvm::BasicBlock *v707;
  llvm::BasicBlock *v708;
  llvm::PointerType *v710;
  uint64_t v711;
  llvm::ConstantInt *v712;
  uint64_t v713;
  _QWORD *v714;
  uint64_t v715;
  __int128 v716;
  uint64_t v717;
  int v718;
  _BYTE v719[64];
  __int128 v720;
  uint64_t v721;
  unsigned __int8 *v722;
  unsigned __int8 *v723;
  unsigned __int8 *v724;
  unsigned __int8 *v725;
  unsigned __int8 *v726;
  unsigned __int8 *v727;
  unsigned __int8 *v728;
  unsigned __int8 *v729;
  unsigned __int8 *v730;
  unsigned __int8 *v731;
  unsigned __int8 *v732;
  unsigned __int8 *v733;
  unsigned __int8 *v734;
  unsigned __int8 *v735;
  unsigned __int8 *v736;
  unsigned __int8 *v737;
  unsigned __int8 *v738;
  unsigned __int8 *v739;
  void *v740;
  uint64_t v741;
  _BYTE v742[64];
  void *v743[2];
  uint64_t v744;
  const char *v745;
  uint64_t v746;
  unsigned __int8 *v747[2];
  __int16 v748;
  void *v749;
  unsigned int v750;
  _BYTE v751[272];
  void *__p;
  llvm::PointerType *v753;
  unsigned __int8 *v754;
  __int128 v755;
  uint64_t v756;
  const char *v757;
  uint64_t v758;
  char v759;
  char v760;
  void *v761;
  uint64_t v762;
  _BYTE v763[17];
  char v764;
  int v765;
  uint64_t v766;
  __int128 v767;
  char *v768;
  int v769;
  _WORD v770[24];
  void *v771;
  unsigned int v772;
  _QWORD v773[37];

  v773[34] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 240))
    return 1;
  v3 = a1;
  if (!*(_QWORD *)(a1 + 248))
    return 1;
  v4 = a2[11];
  v5 = *(unsigned __int8 *)(a1 + 185);
  if (!*(_BYTE *)(a1 + 185))
  {
    v8 = *(uint64_t **)(a1 + 216);
    v9 = *(uint64_t **)(a1 + 224);
    if (v8 != v9)
    {
      v10 = (uint64_t *)(v4 + 29576);
      v11 = (unsigned int *)(v4 + 29592);
      v12 = a2;
      do
      {
        v13 = *v8;
        if (*v8)
        {
          v14 = *(unsigned __int8 *)(v13 + 16) - 33;
          v225 = v14 > 0x33;
          v15 = (1 << v14) & 0x8000000000041;
          if (v225 || v15 == 0)
            goto LABEL_24;
          v17 = *(_QWORD *)(v13 - 32);
          if (!v17 || *(_BYTE *)(v17 + 16) || *(_QWORD *)(v17 + 24) != *(_QWORD *)(v13 + 72))
            v17 = 0;
          *(_QWORD *)&v767 = v17;
          __p = 0;
          if (sub_1C4A06ED8((uint64_t)v10, &v767, &__p))
          {
            v18 = __p;
            v19 = *v10;
            v20 = *v11;
          }
          else
          {
            v19 = *v10;
            v20 = *v11;
            v18 = (void *)(*v10 + 8 * v20);
          }
          if (v18 == (void *)(v19 + 8 * v20))
          {
LABEL_24:
            v21 = (uint64_t (*)(_QWORD, _QWORD))v12[687];
            if (v21)
            {
              v22 = (llvm::OptimizationRemarkEmitter *)v21(v12[688], *(_QWORD *)(*(_QWORD *)(v13 + 40) + 56));
              v23 = ****(_QWORD ****)v22;
              if (*(_QWORD *)(v23 + 128)
                || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v23 + 72) + 48))(*(_QWORD *)(v23 + 72)))
              {
                v24 = v12[689];
                v25 = *(unsigned __int8 **)(*(_QWORD *)(v13 + 40) + 56);
                llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v716, (const llvm::DebugLoc *)(v13 + 48));
                v26 = *(_QWORD *)(v13 + 40);
                LODWORD(v753) = 11;
                BYTE4(v753) = 2;
                v755 = v716;
                v754 = v25;
                v756 = v24;
                v757 = "OMP121";
                v758 = 6;
                v759 = 0;
                v760 = 0;
                v761 = v763;
                v762 = 0x400000000;
                v764 = 0;
                v765 = -1;
                v766 = v26;
                __p = &off_1E814E570;
                *(_QWORD *)&v716 = "Value has potential side effects preventing SPMD-mode execution";
                *((_QWORD *)&v716 + 1) = 63;
                sub_1C53B17B4((uint64_t)&v761, (const void **)&v716);
                v27 = *(unsigned __int8 *)(v13 + 16) - 33;
                if (v27 <= 0x33 && ((1 << v27) & 0x8000000000041) != 0)
                {
                  *((_QWORD *)&v716 + 1) = 88;
                  sub_1C53B17B4((uint64_t)&v761, (const void **)&v716);
                }
                *(_QWORD *)&v716 = ".";
                *((_QWORD *)&v716 + 1) = 1;
                sub_1C53B17B4((uint64_t)&v761, (const void **)&v716);
                sub_1C61998EC((uint64_t)&v767, (uint64_t)&__p);
                *(_QWORD *)&v767 = &off_1E814E570;
                *(_QWORD *)&v716 = " [";
                *((_QWORD *)&v716 + 1) = 2;
                sub_1C53B17B4((uint64_t)&v771, (const void **)&v716);
                *(_QWORD *)&v716 = "OMP121";
                *((_QWORD *)&v716 + 1) = 6;
                sub_1C53B17B4((uint64_t)&v771, (const void **)&v716);
                *(_QWORD *)&v716 = "]";
                *((_QWORD *)&v716 + 1) = 1;
                sub_1C53B17B4((uint64_t)&v771, (const void **)&v716);
                sub_1C61998EC((uint64_t)&v745, (uint64_t)&v767);
                v745 = (const char *)&off_1E814E570;
                *(_QWORD *)&v767 = &off_1E814E790;
                v28 = (char *)v771;
                if (v772)
                {
                  v29 = (unint64_t)v772 << 6;
                  do
                  {
                    v30 = (void **)&v28[v29];
                    if (v28[v29 - 17] < 0)
                      operator delete(*(v30 - 5));
                    if (*((char *)v30 - 41) < 0)
                      operator delete(*(v30 - 8));
                    v29 -= 64;
                  }
                  while (v29);
                  v28 = (char *)v771;
                }
                if (v28 != (char *)v773)
                  free(v28);
                __p = &off_1E814E790;
                v31 = (char *)v761;
                if ((_DWORD)v762)
                {
                  v32 = (unint64_t)v762 << 6;
                  do
                  {
                    v33 = (void **)&v31[v32];
                    if (v31[v32 - 17] < 0)
                      operator delete(*(v33 - 5));
                    if (*((char *)v33 - 41) < 0)
                      operator delete(*(v33 - 8));
                    v32 -= 64;
                  }
                  while (v32);
                  v31 = (char *)v761;
                }
                v12 = a2;
                if (v31 != v763)
                  free(v31);
                llvm::OptimizationRemarkEmitter::emit(v22, (llvm::DiagnosticInfoOptimizationBase *)&v745);
                v745 = (const char *)&off_1E814E790;
                v34 = (char *)v749;
                if (v750)
                {
                  v35 = (unint64_t)v750 << 6;
                  do
                  {
                    v36 = (void **)&v34[v35];
                    if (v34[v35 - 17] < 0)
                      operator delete(*(v36 - 5));
                    if (*((char *)v36 - 41) < 0)
                      operator delete(*(v36 - 8));
                    v35 -= 64;
                  }
                  while (v35);
                  v34 = (char *)v749;
                  v12 = a2;
                }
                if (v34 != v751)
                  free(v34);
              }
            }
          }
        }
        ++v8;
      }
      while (v8 != v9);
      v3 = a1;
    }
LABEL_62:
    if (byte_1ED80DA08 || !*(_BYTE *)(v3 + 57))
      return 1;
    v37 = *(_QWORD *)(v3 + 240) - 32 * (*(_DWORD *)(*(_QWORD *)(v3 + 240) + 20) & 0x7FFFFFF);
    v38 = *(_QWORD *)(v37 + 64);
    v39 = *(_QWORD *)(v37 + 32);
    v40 = *(_BYTE *)(v39 + 16) == 16 ? v39 : 0;
    if (!v38 || *(_BYTE *)(v38 + 16) != 16)
      return 1;
    v42 = (llvm::APInt *)(v38 + 24);
    v43 = *(_DWORD *)(v38 + 32);
    if (v43 > 0x40)
      v44 = llvm::APInt::countLeadingZerosSlowCase(v42) == v43;
    else
      v44 = *(_QWORD *)v42 == 0;
    v99 = v44;
    result = 1;
    if ((v99 & 1) != 0 || !v40)
      return result;
    v100 = *(_DWORD *)(v40 + 32);
    v101 = v100 > 0x40 ? **(_QWORD **)(v40 + 24) : (uint64_t)(*(_QWORD *)(v40 + 24) << -(char)v100) >> -(char)v100;
    if ((v101 & 2) != 0)
      return result;
    v157 = (llvm::IRPosition *)(v3 + 16);
    v158 = *(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)(v3 + 16) & 3) == 0)
      v158 = *(_QWORD *)(v158 + 24);
    v712 = **(llvm::ConstantInt ***)v158;
    Bool = llvm::ConstantInt::getBool(v712, 0, a3);
    v160 = *(_QWORD *)(v3 + 240);
    v161 = *(_DWORD *)(v160 + 20);
    if ((v161 & 0x40000000) != 0)
      v162 = *(_QWORD *)(v160 - 8);
    else
      v162 = v160 - 32 * (v161 & 0x7FFFFFF);
    sub_1C628F700((uint64_t)a2, v162 + 64, Bool);
    v328 = *(_QWORD *)(v3 + 152);
    v329 = *(_QWORD *)(v3 + 160);
    v330 = *(_QWORD *)(v3 + 240);
    v331 = (uint64_t (*)(_QWORD, _QWORD))a2[687];
    if (*(_QWORD *)(v3 + 88) == *(_QWORD *)(v3 + 96) && v328 == v329)
    {
      if (v331)
      {
        v332 = (llvm::OptimizationRemarkEmitter *)v331(a2[688], *(_QWORD *)(*(_QWORD *)(v330 + 40) + 56));
        v333 = ****(_QWORD ****)v332;
        if (!*(_QWORD *)(v333 + 128))
        {
          result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v333 + 72) + 48))(*(_QWORD *)(v333 + 72));
          if (!(_DWORD)result)
            return result;
        }
        v334 = a2[689];
        v335 = *(unsigned __int8 **)(*(_QWORD *)(v330 + 40) + 56);
        llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v767, (const llvm::DebugLoc *)(v330 + 48));
        v336 = *(_QWORD *)(v330 + 40);
        LODWORD(v753) = 9;
        BYTE4(v753) = 2;
        v755 = v767;
        v754 = v335;
        v756 = v334;
        v757 = "OMP130";
        v758 = 6;
        v759 = 0;
        v760 = 0;
        v761 = v763;
        v762 = 0x400000000;
        v764 = 0;
        v765 = -1;
        v766 = v336;
        __p = &off_1E814E500;
        *(_QWORD *)&v767 = "Removing unused state machine from generic-mode kernel.";
        *((_QWORD *)&v767 + 1) = 55;
        sub_1C53B17B4((uint64_t)&v761, (const void **)&v767);
        sub_1C61998EC((uint64_t)&v767, (uint64_t)&__p);
        *(_QWORD *)&v767 = &off_1E814E500;
        v745 = " [";
        v746 = 2;
        sub_1C53B17B4((uint64_t)&v771, (const void **)&v745);
        v745 = "OMP130";
        v746 = 6;
        sub_1C53B17B4((uint64_t)&v771, (const void **)&v745);
        v745 = "]";
        v746 = 1;
        sub_1C53B17B4((uint64_t)&v771, (const void **)&v745);
        sub_1C61998EC((uint64_t)&v745, (uint64_t)&v767);
        v745 = (const char *)&off_1E814E500;
        *(_QWORD *)&v767 = &off_1E814E790;
        v337 = (char *)v771;
        if (v772)
        {
          v338 = (unint64_t)v772 << 6;
          do
          {
            v339 = (void **)&v337[v338];
            if (v337[v338 - 17] < 0)
              operator delete(*(v339 - 5));
            if (*((char *)v339 - 41) < 0)
              operator delete(*(v339 - 8));
            v338 -= 64;
          }
          while (v338);
          v337 = (char *)v771;
        }
        if (v337 != (char *)v773)
          free(v337);
        __p = &off_1E814E790;
        v340 = (char *)v761;
        if ((_DWORD)v762)
        {
          v341 = (unint64_t)v762 << 6;
          do
          {
            v342 = (void **)&v340[v341];
            if (v340[v341 - 17] < 0)
              operator delete(*(v342 - 5));
            if (*((char *)v342 - 41) < 0)
              operator delete(*(v342 - 8));
            v341 -= 64;
          }
          while (v341);
          v340 = (char *)v761;
        }
        if (v340 != v763)
          free(v340);
        llvm::OptimizationRemarkEmitter::emit(v332, (llvm::DiagnosticInfoOptimizationBase *)&v745);
        v745 = (const char *)&off_1E814E790;
        v343 = (char *)v749;
        if (v750)
        {
          v344 = (unint64_t)v750 << 6;
          do
          {
            v345 = (void **)&v343[v344];
            if (v343[v344 - 17] < 0)
              operator delete(*(v345 - 5));
            if (*((char *)v345 - 41) < 0)
              operator delete(*(v345 - 8));
            v344 -= 64;
          }
          while (v344);
          v343 = (char *)v749;
        }
        if (v343 != v751)
          free(v343);
      }
      return 0;
    }
    if (v328 == v329)
    {
      if (v331)
      {
        v346 = (llvm::OptimizationRemarkEmitter *)v331(a2[688], *(_QWORD *)(*(_QWORD *)(v330 + 40) + 56));
        v347 = ****(_QWORD ****)v346;
        if (*(_QWORD *)(v347 + 128)
          || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v347 + 72) + 48))(*(_QWORD *)(v347 + 72)))
        {
          v348 = a2[689];
          v349 = *(unsigned __int8 **)(*(_QWORD *)(v330 + 40) + 56);
          llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v767, (const llvm::DebugLoc *)(v330 + 48));
          v350 = *(_QWORD *)(v330 + 40);
          LODWORD(v753) = 9;
          BYTE4(v753) = 2;
          v755 = v767;
          v754 = v349;
          v756 = v348;
          v757 = "OMP131";
          v758 = 6;
          v759 = 0;
          v760 = 0;
          v761 = v763;
          v762 = 0x400000000;
          v764 = 0;
          v765 = -1;
          v766 = v350;
          __p = &off_1E814E500;
          *(_QWORD *)&v767 = "Rewriting generic-mode kernel with a customized state machine.";
          *((_QWORD *)&v767 + 1) = 62;
          sub_1C53B17B4((uint64_t)&v761, (const void **)&v767);
          sub_1C61998EC((uint64_t)&v767, (uint64_t)&__p);
          *(_QWORD *)&v767 = &off_1E814E500;
          v745 = " [";
          v746 = 2;
          sub_1C53B17B4((uint64_t)&v771, (const void **)&v745);
          v745 = "OMP131";
          v746 = 6;
          sub_1C53B17B4((uint64_t)&v771, (const void **)&v745);
          v745 = "]";
          v746 = 1;
          sub_1C53B17B4((uint64_t)&v771, (const void **)&v745);
          sub_1C61998EC((uint64_t)&v745, (uint64_t)&v767);
          v745 = (const char *)&off_1E814E500;
          *(_QWORD *)&v767 = &off_1E814E790;
          v351 = (char *)v771;
          if (v772)
          {
            v352 = (unint64_t)v772 << 6;
            do
            {
              v353 = (void **)&v351[v352];
              if (v351[v352 - 17] < 0)
                operator delete(*(v353 - 5));
              if (*((char *)v353 - 41) < 0)
                operator delete(*(v353 - 8));
              v352 -= 64;
            }
            while (v352);
            v351 = (char *)v771;
          }
          if (v351 != (char *)v773)
            free(v351);
          __p = &off_1E814E790;
          v354 = (char *)v761;
          if ((_DWORD)v762)
          {
            v355 = (unint64_t)v762 << 6;
            do
            {
              v356 = (void **)&v354[v355];
              if (v354[v355 - 17] < 0)
                operator delete(*(v356 - 5));
              if (*((char *)v356 - 41) < 0)
                operator delete(*(v356 - 8));
              v355 -= 64;
            }
            while (v355);
            v354 = (char *)v761;
          }
          if (v354 != v763)
            free(v354);
          llvm::OptimizationRemarkEmitter::emit(v346, (llvm::DiagnosticInfoOptimizationBase *)&v745);
          v745 = (const char *)&off_1E814E790;
          v357 = (char *)v749;
          if (v750)
          {
            v358 = (unint64_t)v750 << 6;
            do
            {
              v359 = (void **)&v357[v358];
              if (v357[v358 - 17] < 0)
                operator delete(*(v359 - 5));
              if (*((char *)v359 - 41) < 0)
                operator delete(*(v359 - 8));
              v358 -= 64;
            }
            while (v358);
            v357 = (char *)v749;
          }
          if (v357 != v751)
            free(v357);
        }
      }
    }
    else
    {
      if (v331)
      {
        v360 = (llvm::OptimizationRemarkEmitter *)v331(a2[688], *(_QWORD *)(*(_QWORD *)(v330 + 40) + 56));
        v361 = ****(_QWORD ****)v360;
        if (*(_QWORD *)(v361 + 128)
          || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v361 + 72) + 48))(*(_QWORD *)(v361 + 72)))
        {
          v362 = a2[689];
          v363 = *(unsigned __int8 **)(*(_QWORD *)(v330 + 40) + 56);
          llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v767, (const llvm::DebugLoc *)(v330 + 48));
          v364 = *(_QWORD *)(v330 + 40);
          LODWORD(v753) = 11;
          BYTE4(v753) = 2;
          v755 = v767;
          v754 = v363;
          v756 = v362;
          v757 = "OMP132";
          v758 = 6;
          v759 = 0;
          v760 = 0;
          v761 = v763;
          v762 = 0x400000000;
          v764 = 0;
          v765 = -1;
          v766 = v364;
          __p = &off_1E814E570;
          *(_QWORD *)&v767 = "Generic-mode kernel is executed with a customized state machine that requires a fallback.";
          *((_QWORD *)&v767 + 1) = 89;
          sub_1C53B17B4((uint64_t)&v761, (const void **)&v767);
          sub_1C61998EC((uint64_t)&v767, (uint64_t)&__p);
          *(_QWORD *)&v767 = &off_1E814E570;
          v745 = " [";
          v746 = 2;
          sub_1C53B17B4((uint64_t)&v771, (const void **)&v745);
          v745 = "OMP132";
          v746 = 6;
          sub_1C53B17B4((uint64_t)&v771, (const void **)&v745);
          v745 = "]";
          v746 = 1;
          sub_1C53B17B4((uint64_t)&v771, (const void **)&v745);
          sub_1C61998EC((uint64_t)&v745, (uint64_t)&v767);
          v745 = (const char *)&off_1E814E570;
          *(_QWORD *)&v767 = &off_1E814E790;
          v365 = (char *)v771;
          if (v772)
          {
            v366 = (unint64_t)v772 << 6;
            do
            {
              v367 = (void **)&v365[v366];
              if (v365[v366 - 17] < 0)
                operator delete(*(v367 - 5));
              if (*((char *)v367 - 41) < 0)
                operator delete(*(v367 - 8));
              v366 -= 64;
            }
            while (v366);
            v365 = (char *)v771;
          }
          if (v365 != (char *)v773)
            free(v365);
          __p = &off_1E814E790;
          v368 = (char *)v761;
          if ((_DWORD)v762)
          {
            v369 = (unint64_t)v762 << 6;
            do
            {
              v370 = (void **)&v368[v369];
              if (v368[v369 - 17] < 0)
                operator delete(*(v370 - 5));
              if (*((char *)v370 - 41) < 0)
                operator delete(*(v370 - 8));
              v369 -= 64;
            }
            while (v369);
            v368 = (char *)v761;
          }
          if (v368 != v763)
            free(v368);
          llvm::OptimizationRemarkEmitter::emit(v360, (llvm::DiagnosticInfoOptimizationBase *)&v745);
          v745 = (const char *)&off_1E814E790;
          v371 = (char *)v749;
          if (v750)
          {
            v372 = (unint64_t)v750 << 6;
            do
            {
              v373 = (void **)&v371[v372];
              if (v371[v372 - 17] < 0)
                operator delete(*(v373 - 5));
              if (*((char *)v373 - 41) < 0)
                operator delete(*(v373 - 8));
              v372 -= 64;
            }
            while (v372);
            v371 = (char *)v749;
          }
          if (v371 != v751)
            free(v371);
        }
      }
      v374 = *(uint64_t **)(a1 + 152);
      for (i = *(uint64_t **)(a1 + 160); v374 != i; ++v374)
      {
        v505 = *v374;
        v506 = (uint64_t (*)(_QWORD, _QWORD))a2[687];
        if (*v374)
          v507 = v506 == 0;
        else
          v507 = 1;
        if (!v507)
        {
          v508 = (llvm::OptimizationRemarkEmitter *)v506(a2[688], *(_QWORD *)(*(_QWORD *)(v505 + 40) + 56));
          v509 = ****(_QWORD ****)v508;
          if (*(_QWORD *)(v509 + 128)
            || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v509 + 72) + 48))(*(_QWORD *)(v509 + 72)))
          {
            v510 = a2[689];
            v511 = *(unsigned __int8 **)(*(_QWORD *)(v505 + 40) + 56);
            llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v716, (const llvm::DebugLoc *)(v505 + 48));
            v512 = *(_QWORD *)(v505 + 40);
            LODWORD(v753) = 11;
            BYTE4(v753) = 2;
            v755 = v716;
            v754 = v511;
            v756 = v510;
            v757 = "OMP133";
            v758 = 6;
            v759 = 0;
            v760 = 0;
            v761 = v763;
            v762 = 0x400000000;
            v764 = 0;
            v765 = -1;
            v766 = v512;
            __p = &off_1E814E570;
            *(_QWORD *)&v716 = "Call may contain unknown parallel regions. Use ";
            *((_QWORD *)&v716 + 1) = 47;
            sub_1C53B17B4((uint64_t)&v761, (const void **)&v716);
            *((_QWORD *)&v716 + 1) = 60;
            sub_1C53B17B4((uint64_t)&v761, (const void **)&v716);
            sub_1C61998EC((uint64_t)&v767, (uint64_t)&__p);
            *(_QWORD *)&v767 = &off_1E814E570;
            *(_QWORD *)&v716 = " [";
            *((_QWORD *)&v716 + 1) = 2;
            sub_1C53B17B4((uint64_t)&v771, (const void **)&v716);
            *(_QWORD *)&v716 = "OMP133";
            *((_QWORD *)&v716 + 1) = 6;
            sub_1C53B17B4((uint64_t)&v771, (const void **)&v716);
            *(_QWORD *)&v716 = "]";
            *((_QWORD *)&v716 + 1) = 1;
            sub_1C53B17B4((uint64_t)&v771, (const void **)&v716);
            sub_1C61998EC((uint64_t)&v745, (uint64_t)&v767);
            v745 = (const char *)&off_1E814E570;
            *(_QWORD *)&v767 = &off_1E814E790;
            v513 = (char *)v771;
            if (v772)
            {
              v514 = (unint64_t)v772 << 6;
              do
              {
                v515 = (void **)&v513[v514];
                if (v513[v514 - 17] < 0)
                  operator delete(*(v515 - 5));
                if (*((char *)v515 - 41) < 0)
                  operator delete(*(v515 - 8));
                v514 -= 64;
              }
              while (v514);
              v513 = (char *)v771;
            }
            if (v513 != (char *)v773)
              free(v513);
            __p = &off_1E814E790;
            v516 = (char *)v761;
            if ((_DWORD)v762)
            {
              v517 = (unint64_t)v762 << 6;
              do
              {
                v518 = (void **)&v516[v517];
                if (v516[v517 - 17] < 0)
                  operator delete(*(v518 - 5));
                if (*((char *)v518 - 41) < 0)
                  operator delete(*(v518 - 8));
                v517 -= 64;
              }
              while (v517);
              v516 = (char *)v761;
            }
            if (v516 != v763)
              free(v516);
            llvm::OptimizationRemarkEmitter::emit(v508, (llvm::DiagnosticInfoOptimizationBase *)&v745);
            v745 = (const char *)&off_1E814E790;
            v519 = (char *)v749;
            if (v750)
            {
              v520 = (unint64_t)v750 << 6;
              do
              {
                v521 = (void **)&v519[v520];
                if (v519[v520 - 17] < 0)
                  operator delete(*(v521 - 5));
                if (*((char *)v521 - 41) < 0)
                  operator delete(*(v521 - 8));
                v520 -= 64;
              }
              while (v520);
              v519 = (char *)v749;
            }
            if (v519 != v751)
              free(v519);
          }
        }
      }
    }
    v376 = sub_1C5676C10(v157);
    v377 = *(uint64_t **)(*(_QWORD *)(a1 + 240) + 32);
    v378 = *(uint64_t **)(*(_QWORD *)(a1 + 240) + 40);
    v695 = v378 + 5;
    if (v377)
      v379 = v377 == v378 + 5;
    else
      v379 = 1;
    if (v379)
      v380 = 0;
    else
      v380 = v377 - 3;
    *(_QWORD *)&v767 = "thread.user_code.check";
    v770[0] = 259;
    v381 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v378, v380 + 3, (uint64_t)&v767, 0);
    *(_QWORD *)&v767 = "is_worker_check";
    v770[0] = 259;
    v382 = operator new();
    *(_QWORD *)v382 = *(_QWORD *)v712 + 1600;
    *(_QWORD *)(v382 + 8) = 0;
    v383 = *(_DWORD *)(v382 + 20) & 0xC0000000;
    *(_QWORD *)(v382 + 24) = 0;
    v384 = v382 + 24;
    *(_DWORD *)(v382 + 16) = 22;
    *(_DWORD *)(v382 + 20) = v383;
    *(_QWORD *)(v382 + 32) = 0;
    *(_QWORD *)(v382 + 40) = v382 + 40;
    *(_QWORD *)(v382 + 48) = v382 + 40;
    *(_QWORD *)(v382 + 56) = 0;
    v708 = (llvm::BasicBlock *)v376;
    if (v376)
    {
      if (v381)
        v385 = (uint64_t *)((char *)v381 + 24);
      else
        v385 = (uint64_t *)(v376 + 72);
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v376 + 72, (_QWORD *)v382);
      v386 = *v385;
      *(_QWORD *)(v382 + 24) = *v385;
      *(_QWORD *)(v382 + 32) = v385;
      *(_QWORD *)(v386 + 8) = v384;
      *v385 = v384;
    }
    llvm::Value::setName((uint64_t ***)v382, (uint64_t)&v767);
    *(_QWORD *)&v767 = "worker_state_machine.begin";
    v770[0] = 259;
    v387 = operator new();
    *(_QWORD *)v387 = *(_QWORD *)v712 + 1600;
    *(_QWORD *)(v387 + 8) = 0;
    v388 = *(_DWORD *)(v387 + 20) & 0xC0000000;
    *(_QWORD *)(v387 + 24) = 0;
    v389 = v387 + 24;
    *(_DWORD *)(v387 + 16) = 22;
    *(_DWORD *)(v387 + 20) = v388;
    *(_QWORD *)(v387 + 32) = 0;
    *(_QWORD *)(v387 + 40) = v387 + 40;
    v698 = (llvm::BasicBlock *)(v387 + 40);
    *(_QWORD *)(v387 + 48) = v387 + 40;
    *(_QWORD *)(v387 + 56) = 0;
    v692 = (llvm::BasicBlock *)v387;
    if (v376)
    {
      if (v381)
        v390 = (uint64_t *)((char *)v381 + 24);
      else
        v390 = (uint64_t *)(v376 + 72);
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v376 + 72, (_QWORD *)v387);
      v391 = *v390;
      *((_QWORD *)v692 + 3) = *v390;
      *((_QWORD *)v692 + 4) = v390;
      *(_QWORD *)(v391 + 8) = v389;
      *v390 = v389;
    }
    llvm::Value::setName((uint64_t ***)v692, (uint64_t)&v767);
    *(_QWORD *)&v767 = "worker_state_machine.finished";
    v770[0] = 259;
    v392 = operator new();
    *(_QWORD *)v392 = *(_QWORD *)v712 + 1600;
    *(_QWORD *)(v392 + 8) = 0;
    v393 = *(_DWORD *)(v392 + 20) & 0xC0000000;
    *(_QWORD *)(v392 + 24) = 0;
    v394 = v392 + 24;
    *(_DWORD *)(v392 + 16) = 22;
    *(_DWORD *)(v392 + 20) = v393;
    *(_QWORD *)(v392 + 32) = 0;
    *(_QWORD *)(v392 + 40) = v392 + 40;
    *(_QWORD *)(v392 + 48) = v392 + 40;
    *(_QWORD *)(v392 + 56) = 0;
    if (v376)
    {
      if (v381)
        v395 = (uint64_t *)((char *)v381 + 24);
      else
        v395 = (uint64_t *)(v376 + 72);
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v376 + 72, (_QWORD *)v392);
      v396 = *v395;
      *(_QWORD *)(v392 + 24) = *v395;
      *(_QWORD *)(v392 + 32) = v395;
      *(_QWORD *)(v396 + 8) = v394;
      *v395 = v394;
    }
    llvm::Value::setName((uint64_t ***)v392, (uint64_t)&v767);
    *(_QWORD *)&v767 = "worker_state_machine.is_active.check";
    v770[0] = 259;
    v397 = operator new();
    *(_QWORD *)v397 = *(_QWORD *)v712 + 1600;
    *(_QWORD *)(v397 + 8) = 0;
    v398 = *(_DWORD *)(v397 + 20) & 0xC0000000;
    *(_QWORD *)(v397 + 24) = 0;
    v399 = v397 + 24;
    *(_DWORD *)(v397 + 16) = 22;
    *(_DWORD *)(v397 + 20) = v398;
    *(_QWORD *)(v397 + 32) = 0;
    *(_QWORD *)(v397 + 40) = v397 + 40;
    *(_QWORD *)(v397 + 48) = v397 + 40;
    *(_QWORD *)(v397 + 56) = 0;
    v701 = (llvm::BasicBlock *)v397;
    if (v376)
    {
      if (v381)
        v400 = (uint64_t *)((char *)v381 + 24);
      else
        v400 = (uint64_t *)(v376 + 72);
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v376 + 72, (_QWORD *)v397);
      v401 = *v400;
      *((_QWORD *)v701 + 3) = *v400;
      *((_QWORD *)v701 + 4) = v400;
      *(_QWORD *)(v401 + 8) = v399;
      *v400 = v399;
    }
    llvm::Value::setName((uint64_t ***)v701, (uint64_t)&v767);
    *(_QWORD *)&v767 = "worker_state_machine.parallel_region.check";
    v770[0] = 259;
    v402 = operator new();
    *(_QWORD *)v402 = *(_QWORD *)v712 + 1600;
    *(_QWORD *)(v402 + 8) = 0;
    v403 = *(_DWORD *)(v402 + 20) & 0xC0000000;
    *(_QWORD *)(v402 + 24) = 0;
    v404 = v402 + 24;
    *(_DWORD *)(v402 + 16) = 22;
    *(_DWORD *)(v402 + 20) = v403;
    *(_QWORD *)(v402 + 32) = 0;
    *(_QWORD *)(v402 + 40) = v402 + 40;
    *(_QWORD *)(v402 + 48) = v402 + 40;
    *(_QWORD *)(v402 + 56) = 0;
    v685 = (uint64_t ***)v402;
    if (v376)
    {
      v405 = v376 + 72;
      if (v381)
        v406 = (uint64_t **)((char *)v381 + 24);
      else
        v406 = (uint64_t **)(v376 + 72);
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v405, v685);
      v407 = *v406;
      v685[3] = (uint64_t **)*v406;
      v685[4] = v406;
      v407[1] = v404;
      *v406 = (uint64_t *)v404;
    }
    llvm::Value::setName(v685, (uint64_t)&v767);
    *(_QWORD *)&v767 = "worker_state_machine.parallel_region.end";
    v770[0] = 259;
    v408 = operator new();
    *(_QWORD *)v408 = *(_QWORD *)v712 + 1600;
    *(_QWORD *)(v408 + 8) = 0;
    v409 = *(_DWORD *)(v408 + 20) & 0xC0000000;
    *(_QWORD *)(v408 + 24) = 0;
    v705 = (llvm::BasicBlock *)(v408 + 24);
    *(_DWORD *)(v408 + 16) = 22;
    *(_DWORD *)(v408 + 20) = v409;
    *(_QWORD *)(v408 + 32) = 0;
    *(_QWORD *)(v408 + 40) = v408 + 40;
    *(_QWORD *)(v408 + 48) = v408 + 40;
    *(_QWORD *)(v408 + 56) = 0;
    v690 = (llvm::BasicBlock *)v408;
    if (v708)
    {
      if (v381)
        v410 = (llvm::BasicBlock **)((char *)v381 + 24);
      else
        v410 = (llvm::BasicBlock **)((char *)v708 + 72);
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v708 + 72, (_QWORD *)v408);
      v411 = *v410;
      *((_QWORD *)v690 + 3) = *v410;
      *((_QWORD *)v690 + 4) = v410;
      *((_QWORD *)v411 + 1) = v705;
      *v410 = v705;
    }
    llvm::Value::setName((uint64_t ***)v690, (uint64_t)&v767);
    *(_QWORD *)&v767 = "worker_state_machine.done.barrier";
    v770[0] = 259;
    v412 = operator new();
    *(_QWORD *)v412 = *(_QWORD *)v712 + 1600;
    *(_QWORD *)(v412 + 8) = 0;
    v413 = *(_DWORD *)(v412 + 20) & 0xC0000000;
    *(_QWORD *)(v412 + 24) = 0;
    v414 = v412 + 24;
    *(_DWORD *)(v412 + 16) = 22;
    *(_DWORD *)(v412 + 20) = v413;
    *(_QWORD *)(v412 + 32) = 0;
    *(_QWORD *)(v412 + 40) = v412 + 40;
    *(_QWORD *)(v412 + 48) = v412 + 40;
    *(_QWORD *)(v412 + 56) = 0;
    v688 = (llvm::SmallPtrSetImplBase *)v412;
    if (v708)
    {
      if (v381)
        v415 = (uint64_t *)((char *)v381 + 24);
      else
        v415 = (uint64_t *)((char *)v708 + 72);
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v708 + 72, (_QWORD *)v412);
      v416 = *v415;
      *((_QWORD *)v688 + 3) = *v415;
      *((_QWORD *)v688 + 4) = v415;
      *(_QWORD *)(v416 + 8) = v414;
      *v415 = v414;
    }
    llvm::Value::setName((uint64_t ***)v688, (uint64_t)&v767);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a2 + 547), (uint64_t)v378);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a2 + 547), (uint64_t)v381);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a2 + 547), v382);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a2 + 547), (uint64_t)v692);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a2 + 547), v392);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a2 + 547), (uint64_t)v701);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a2 + 547), (uint64_t)v685);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a2 + 547), (uint64_t)v690);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a2 + 547), (uint64_t)v688);
    v417 = *(_QWORD *)(a1 + 240);
    v418 = (char *)operator new(0x40uLL);
    *((_DWORD *)v418 + 5) &= 0x38000000u;
    *(_QWORD *)v418 = *(_QWORD *)v712 + 1576;
    *((_QWORD *)v418 + 1) = 0;
    v418[16] = 29;
    *(_OWORD *)(v418 + 44) = 0u;
    *(_OWORD *)(v418 + 33) = 0u;
    *(_OWORD *)(v418 + 17) = 0u;
    *(_WORD *)(v392 + 18) &= ~0x8000u;
    v419 = *(_QWORD *)(v392 + 40);
    *((_QWORD *)v418 + 4) = v392 + 40;
    *((_QWORD *)v418 + 5) = v392;
    *((_QWORD *)v418 + 3) = v419;
    *(_QWORD *)(v419 + 8) = v418 + 24;
    *(_QWORD *)(v392 + 40) = v418 + 24;
    v715 = v417;
    v420 = *(char **)(v417 + 48);
    v745 = v420;
    if (v420)
      llvm::MetadataTracking::track((uint64_t)&v745, (unsigned __int8 *)v420, 2);
    v423 = (unsigned __int8 *)*((_QWORD *)v418 + 6);
    v422 = (const char **)(v418 + 48);
    v421 = v423;
    if (v423)
      llvm::MetadataTracking::untrack((uint64_t)v422, v421);
    v424 = (unsigned __int8 *)v745;
    *v422 = v745;
    if (v424)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v745, v424, (uint64_t)v422);
      v745 = 0;
    }
    v425 = (_QWORD *)*v695;
    if ((_QWORD *)*v695 == v695)
    {
      v426 = 0;
    }
    else
    {
      if (v425)
        v427 = (uint64_t ***)(v425 - 3);
      else
        v427 = 0;
      if (*((unsigned __int8 *)v427 + 16) - 29 >= 0xB)
        v426 = 0;
      else
        v426 = v427;
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v426[5] + 5), v426);
    v428 = v426[3];
    v429 = v426[4];
    *v429 = (uint64_t *)v428;
    v428[1] = (uint64_t *)v429;
    v426[3] = 0;
    v426[4] = 0;
    llvm::Value::deleteValue((llvm::Value *)v426);
    v430 = *(llvm::ConstantInt ***)(a1 + 240);
    v431 = llvm::ConstantInt::get(*v430, -1, 0);
    *(_QWORD *)&v767 = "thread.is_worker";
    v770[0] = 259;
    v432 = (unsigned __int8 **)llvm::CmpInst::Create(53, 33, (_DWORD **)v430, (uint64_t)v431, (uint64_t)&v767, (uint64_t)v378);
    v433 = *(unsigned __int8 **)(v417 + 48);
    *(_QWORD *)&v716 = v433;
    if (v433)
      llvm::MetadataTracking::track((uint64_t)&v716, v433, 2);
    v434 = v432 + 6;
    if (&v716 == (__int128 *)(v432 + 6))
    {
      if ((_QWORD)v716)
        llvm::MetadataTracking::untrack((uint64_t)&v716, (unsigned __int8 *)v716);
    }
    else
    {
      if (*v434)
        llvm::MetadataTracking::untrack((uint64_t)(v432 + 6), *v434);
      v435 = (unsigned __int8 *)v716;
      *v434 = (unsigned __int8 *)v716;
      if (v435)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v716, v435, (uint64_t)(v432 + 6));
        *(_QWORD *)&v716 = 0;
      }
    }
    v436 = operator new(0xA0uLL);
    v437 = 0;
    v438 = (llvm::BranchInst *)(v436 + 24);
    v436[29] = v436[29] & 0x38000000 | 3;
    do
    {
      v439 = &v436[v437];
      *v439 = 0;
      v439[1] = 0;
      v439[2] = 0;
      v439[3] = v438;
      v437 += 8;
    }
    while (v437 != 24);
    llvm::BranchInst::BranchInst(v438, (llvm::BasicBlock *)v382, v381, (llvm::Value *)v432, (llvm::BasicBlock *)v378);
    v440 = *((_QWORD *)v708 + 5);
    v441 = a2[11] + 616;
    RuntimeFunction = (llvm::Type ***)llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v441, v440, 13);
    v444 = v443;
    v683 = v441;
    v684 = v440;
    v445 = (llvm::Type ***)llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v441, v440, 14);
    v447 = v446;
    *(_QWORD *)&v767 = "block.hw_size";
    v770[0] = 259;
    v448 = (char *)operator new(0x70uLL);
    *((_DWORD *)v448 + 13) = *((_DWORD *)v448 + 13) & 0x38000000 | 1;
    v449 = v448 + 32;
    *(_QWORD *)v448 = 0;
    *((_QWORD *)v448 + 1) = 0;
    *((_QWORD *)v448 + 2) = 0;
    *((_QWORD *)v448 + 3) = v448 + 32;
    llvm::CallInst::CallInst((llvm::CallInst *)(v448 + 32), RuntimeFunction, (llvm::Value *)v444, (const llvm::Twine *)&v767, (llvm::BasicBlock *)v382);
    if (v444 && !*(_BYTE *)(v444 + 16))
      *((_WORD *)v448 + 25) = (*(_WORD *)(v444 + 18) >> 2) & 0xFFC | *((_WORD *)v448 + 25) & 0xF003;
    v450 = *(void **)(v715 + 48);
    v740 = v450;
    if (v450)
      llvm::MetadataTracking::track((uint64_t)&v740, (unsigned __int8 *)v450, 2);
    v453 = (unsigned __int8 *)*((_QWORD *)v448 + 10);
    v452 = (void **)(v448 + 80);
    v451 = v453;
    if (v453)
      llvm::MetadataTracking::untrack((uint64_t)v452, v451);
    v454 = (unsigned __int8 *)v740;
    *v452 = v740;
    if (v454)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v740, v454, (uint64_t)v452);
      v740 = 0;
    }
    *(_QWORD *)&v767 = "warp.size";
    v770[0] = 259;
    v455 = (char *)operator new(0x70uLL);
    *((_DWORD *)v455 + 13) = *((_DWORD *)v455 + 13) & 0x38000000 | 1;
    v456 = (uint64_t)(v455 + 32);
    *(_QWORD *)v455 = 0;
    *((_QWORD *)v455 + 1) = 0;
    *((_QWORD *)v455 + 2) = 0;
    *((_QWORD *)v455 + 3) = v455 + 32;
    llvm::CallInst::CallInst((llvm::CallInst *)(v455 + 32), v445, (llvm::Value *)v447, (const llvm::Twine *)&v767, (llvm::BasicBlock *)v382);
    if (v447 && !*(_BYTE *)(v447 + 16))
      *((_WORD *)v455 + 25) = (*(_WORD *)(v447 + 18) >> 2) & 0xFFC | *((_WORD *)v455 + 25) & 0xF003;
    v457 = *(void **)(v715 + 48);
    v743[0] = v457;
    if (v457)
      llvm::MetadataTracking::track((uint64_t)v743, (unsigned __int8 *)v457, 2);
    v460 = (unsigned __int8 *)*((_QWORD *)v455 + 10);
    v459 = (void **)(v455 + 80);
    v458 = v460;
    if (v460)
      llvm::MetadataTracking::untrack((uint64_t)v459, v458);
    v461 = (unsigned __int8 *)v743[0];
    *v459 = v743[0];
    if (v461)
    {
      llvm::MetadataTracking::retrack((uint64_t)v743, v461, (uint64_t)v459);
      v743[0] = 0;
    }
    *(_QWORD *)&v767 = "block.size";
    v770[0] = 259;
    v462 = llvm::BinaryOperator::Create(15, v449, v456, (uint64_t)&v767, v382);
    v463 = *(unsigned __int8 **)(v715 + 48);
    *(_QWORD *)&v720 = v463;
    if (v463)
      llvm::MetadataTracking::track((uint64_t)&v720, v463, 2);
    v464 = (unsigned __int8 **)((char *)v462 + 48);
    if (&v720 == (__int128 *)((char *)v462 + 48))
    {
      if ((_QWORD)v720)
        llvm::MetadataTracking::untrack((uint64_t)&v720, (unsigned __int8 *)v720);
    }
    else
    {
      if (*v464)
        llvm::MetadataTracking::untrack((uint64_t)v462 + 48, *v464);
      v465 = (unsigned __int8 *)v720;
      *v464 = (unsigned __int8 *)v720;
      if (v465)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v720, v465, (uint64_t)v462 + 48);
        *(_QWORD *)&v720 = 0;
      }
    }
    v466 = *(_DWORD ***)(a1 + 240);
    *(_QWORD *)&v767 = "thread.is_main_or_worker";
    v770[0] = 259;
    v467 = (unsigned __int8 **)llvm::CmpInst::Create(53, 40, v466, (uint64_t)v462, (uint64_t)&v767, v382);
    v468 = *(unsigned __int8 **)(v715 + 48);
    v739 = v468;
    if (v468)
      llvm::MetadataTracking::track((uint64_t)&v739, v468, 2);
    v469 = v467 + 6;
    if (&v739 == v467 + 6)
    {
      if (v739)
        llvm::MetadataTracking::untrack((uint64_t)&v739, v739);
    }
    else
    {
      if (*v469)
        llvm::MetadataTracking::untrack((uint64_t)(v467 + 6), *v469);
      v470 = v739;
      *v469 = v739;
      if (v470)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v739, v470, (uint64_t)(v467 + 6));
        v739 = 0;
      }
    }
    v471 = operator new(0xA0uLL);
    v472 = 0;
    v473 = (llvm::BranchInst *)(v471 + 24);
    v471[29] = v471[29] & 0x38000000 | 3;
    do
    {
      v474 = &v471[v472];
      *v474 = 0;
      v474[1] = 0;
      v474[2] = 0;
      v474[3] = v473;
      v472 += 8;
    }
    while (v472 != 24);
    llvm::BranchInst::BranchInst(v473, v692, (llvm::BasicBlock *)v392, (llvm::Value *)v467, (llvm::BasicBlock *)v382);
    v475 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v712 + 1912), 0);
    v476 = (char *)operator new(0x68uLL);
    v477 = v476;
    v478 = (llvm::PointerType ***)(v476 + 32);
    *((_DWORD *)v476 + 13) = *((_DWORD *)v476 + 13) & 0x38000000 | 1;
    *(_QWORD *)v476 = 0;
    *((_QWORD *)v476 + 1) = 0;
    *((_QWORD *)v476 + 2) = 0;
    *((_QWORD *)v476 + 3) = v476 + 32;
    v479 = (llvm::Type *)*(unsigned int *)(v440 + 276);
    *(_QWORD *)&v767 = "worker.work_fn.addr";
    v770[0] = 259;
    v480 = *((_QWORD *)v708 + 10);
    if (v480)
      v481 = v480 - 24;
    else
      v481 = 0;
    v482 = *(_QWORD *)(v481 + 48);
    if (v482)
      v483 = v482 - 24;
    else
      v483 = 0;
    llvm::AllocaInst::AllocaInst((uint64_t)(v476 + 32), v475, v479, 0, (uint64_t)&v767, v483);
    v484 = *(unsigned __int8 **)(v715 + 48);
    v738 = v484;
    if (v484)
      llvm::MetadataTracking::track((uint64_t)&v738, v484, 2);
    v485 = (unsigned __int8 *)*((_QWORD *)v477 + 10);
    if (v485)
      llvm::MetadataTracking::untrack((uint64_t)(v477 + 80), v485);
    v486 = v738;
    *((_QWORD *)v477 + 10) = v738;
    if (v486)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v738, v486, (uint64_t)(v477 + 80));
      v738 = 0;
    }
    *(_QWORD *)&v767 = v692;
    *((_QWORD *)&v767 + 1) = v698;
    v487 = *(unsigned __int8 **)(v715 + 48);
    v768 = (char *)v487;
    if (v487)
      llvm::MetadataTracking::track((uint64_t)&v768, v487, 2);
    sub_1C62683AC(v683, (uint64_t *)&v767);
    if (v768)
      llvm::MetadataTracking::untrack((uint64_t)&v768, (unsigned __int8 *)v768);
    v488 = *(_QWORD *)(a1 + 240);
    v489 = *(void **)(v488 - 32 * (*(_DWORD *)(v488 + 20) & 0x7FFFFFF));
    v681 = (uint64_t **)llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v683, v684, 167);
    v682 = v490;
    v678 = v489;
    __p = v489;
    v710 = (llvm::PointerType *)v488;
    v753 = (llvm::PointerType *)v488;
    v770[0] = 257;
    v491 = (char *)operator new(0xB0uLL);
    v492 = 0;
    v493 = (llvm::Instruction *)(v491 + 96);
    *((_DWORD *)v491 + 29) = *((_DWORD *)v491 + 29) & 0x38000000 | 3;
    do
    {
      v494 = &v491[v492];
      *(_QWORD *)v494 = 0;
      *((_QWORD *)v494 + 1) = 0;
      *((_QWORD *)v494 + 2) = 0;
      *((_QWORD *)v494 + 3) = v493;
      v492 += 32;
    }
    while (v492 != 96);
    sub_1C61DD0B0(v493, v681, v682, (uint64_t *)&__p, 2, 0, 0, (uint64_t)&v767, v692);
    if (v682 && !*(_BYTE *)(v682 + 16))
      *((_WORD *)v491 + 57) = (*(_WORD *)(v682 + 18) >> 2) & 0xFFC | *((_WORD *)v491 + 57) & 0xF003;
    v495 = *(unsigned __int8 **)(v715 + 48);
    v737 = v495;
    if (v495)
      llvm::MetadataTracking::track((uint64_t)&v737, v495, 2);
    v498 = (unsigned __int8 *)*((_QWORD *)v491 + 18);
    v497 = v491 + 144;
    v496 = v498;
    if (v498)
      llvm::MetadataTracking::untrack((uint64_t)v497, v496);
    v499 = v737;
    *v497 = v737;
    if (v499)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v737, v499, (uint64_t)v497);
      v737 = 0;
    }
    v500 = *((_DWORD *)*v478 + 2);
    if ((v500 & 0xFE) == 0x12)
      v500 = *(_DWORD *)(*(_QWORD *)(*v478)[2] + 8);
    if (v500 < 0x100)
    {
      v501 = v478;
LABEL_807:
      v540 = (uint64_t **)llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v683, v684, 150);
      v542 = v541;
      __p = v501;
      *(_QWORD *)&v767 = "worker.is_active";
      v770[0] = 259;
      v543 = (char *)operator new(0x90uLL);
      *((_DWORD *)v543 + 21) = *((_DWORD *)v543 + 21) & 0x38000000 | 2;
      v544 = (llvm::Value *)(v543 + 64);
      *(_QWORD *)v543 = 0;
      *((_QWORD *)v543 + 1) = 0;
      *((_QWORD *)v543 + 2) = 0;
      *((_QWORD *)v543 + 3) = v543 + 64;
      *((_QWORD *)v543 + 4) = 0;
      *((_QWORD *)v543 + 5) = 0;
      *((_QWORD *)v543 + 6) = 0;
      *((_QWORD *)v543 + 7) = v543 + 64;
      sub_1C61DD0B0((llvm::Instruction *)(v543 + 64), v540, v542, (uint64_t *)&__p, 1, 0, 0, (uint64_t)&v767, v692);
      if (v542 && !*(_BYTE *)(v542 + 16))
        *((_WORD *)v543 + 41) = (*(_WORD *)(v542 + 18) >> 2) & 0xFFC | *((_WORD *)v543 + 41) & 0xF003;
      v545 = *(unsigned __int8 **)(v715 + 48);
      v735 = v545;
      if (v545)
        llvm::MetadataTracking::track((uint64_t)&v735, v545, 2);
      v548 = (unsigned __int8 *)*((_QWORD *)v543 + 14);
      v547 = v543 + 112;
      v546 = v548;
      if (v548)
        llvm::MetadataTracking::untrack((uint64_t)v547, v546);
      v549 = v735;
      *v547 = v735;
      if (v549)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v735, v549, (uint64_t)v547);
        v735 = 0;
      }
      v550 = (char *)operator new(0x60uLL);
      *((_DWORD *)v550 + 13) = *((_DWORD *)v550 + 13) & 0x38000000 | 1;
      v551 = (llvm::CastInst *)(v550 + 32);
      *(_QWORD *)v550 = 0;
      *((_QWORD *)v550 + 1) = 0;
      *((_QWORD *)v550 + 2) = 0;
      *((_QWORD *)v550 + 3) = v550 + 32;
      *(_QWORD *)&v767 = "worker.work_fn";
      v770[0] = 259;
      llvm::LoadInst::LoadInst((llvm::LoadInst *)(v550 + 32), v475, (llvm::Value *)v501, (const llvm::Twine *)&v767, 0, v692);
      v552 = *(unsigned __int8 **)(v715 + 48);
      v734 = v552;
      if (v552)
        llvm::MetadataTracking::track((uint64_t)&v734, v552, 2);
      v555 = (unsigned __int8 *)*((_QWORD *)v550 + 10);
      v554 = (unsigned __int8 **)(v550 + 80);
      v553 = v555;
      if (v555)
        llvm::MetadataTracking::untrack((uint64_t)v554, v553);
      v556 = v734;
      *v554 = v734;
      if (v556)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v734, v556, (uint64_t)v554);
        v734 = 0;
      }
      v557 = (uint64_t **)(*(_QWORD *)v712 + 1576);
      *(_QWORD *)&v767 = *(_QWORD *)v712 + 1936;
      *((_QWORD *)&v767 + 1) = *(_QWORD *)v712 + 1960;
      v679 = (llvm::PointerType *)llvm::FunctionType::get(v557, (uint64_t *)&v767, 2, 0);
      v558 = (llvm::Value *)llvm::PointerType::get(v679, 0);
      *(_QWORD *)&v767 = "worker.work_fn.addr_cast";
      v770[0] = 259;
      PointerBitCastOrAddrSpaceCast = llvm::CastInst::CreatePointerBitCastOrAddrSpaceCast(v551, v558, (llvm::Type *)&v767, v692, v559);
      NullValue = llvm::Constant::getNullValue(v475, v560);
      *(_QWORD *)&v767 = "worker.is_done";
      v770[0] = 259;
      v562 = (unsigned __int8 **)llvm::CmpInst::Create(53, 32, (_DWORD **)v551, (uint64_t)NullValue, (uint64_t)&v767, (uint64_t)v692);
      v563 = *(unsigned __int8 **)(v715 + 48);
      v733 = v563;
      if (v563)
        llvm::MetadataTracking::track((uint64_t)&v733, v563, 2);
      v564 = v562 + 6;
      if (&v733 == v562 + 6)
      {
        if (v733)
          llvm::MetadataTracking::untrack((uint64_t)&v733, v733);
      }
      else
      {
        if (*v564)
          llvm::MetadataTracking::untrack((uint64_t)(v562 + 6), *v564);
        v565 = v733;
        *v564 = v733;
        if (v565)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v733, v565, (uint64_t)(v562 + 6));
          v733 = 0;
        }
      }
      v566 = (char *)operator new(0xA0uLL);
      v567 = 0;
      v568 = (llvm::BranchInst *)(v566 + 96);
      *((_DWORD *)v566 + 29) = *((_DWORD *)v566 + 29) & 0x38000000 | 3;
      do
      {
        v569 = &v566[v567];
        *(_QWORD *)v569 = 0;
        *((_QWORD *)v569 + 1) = 0;
        *((_QWORD *)v569 + 2) = 0;
        *((_QWORD *)v569 + 3) = v568;
        v567 += 32;
      }
      while (v567 != 96);
      llvm::BranchInst::BranchInst(v568, (llvm::BasicBlock *)v392, v701, (llvm::Value *)v562, v692);
      v570 = *(unsigned __int8 **)(v715 + 48);
      v732 = v570;
      if (v570)
        llvm::MetadataTracking::track((uint64_t)&v732, v570, 2);
      v573 = (unsigned __int8 *)*((_QWORD *)v566 + 18);
      v572 = (unsigned __int8 **)(v566 + 144);
      v571 = v573;
      if (v573)
        llvm::MetadataTracking::untrack((uint64_t)v572, v571);
      v574 = v732;
      *v572 = v732;
      if (v574)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v732, v574, (uint64_t)v572);
        v732 = 0;
      }
      v575 = (char *)operator new(0xA0uLL);
      v576 = 0;
      v577 = (llvm::BranchInst *)(v575 + 96);
      *((_DWORD *)v575 + 29) = *((_DWORD *)v575 + 29) & 0x38000000 | 3;
      do
      {
        v578 = &v575[v576];
        *(_QWORD *)v578 = 0;
        *((_QWORD *)v578 + 1) = 0;
        *((_QWORD *)v578 + 2) = 0;
        *((_QWORD *)v578 + 3) = v577;
        v576 += 32;
      }
      while (v576 != 96);
      llvm::BranchInst::BranchInst(v577, (llvm::BasicBlock *)v685, v688, v544, v701);
      v579 = *(unsigned __int8 **)(v715 + 48);
      v731 = v579;
      if (v579)
        llvm::MetadataTracking::track((uint64_t)&v731, v579, 2);
      v582 = (unsigned __int8 *)*((_QWORD *)v575 + 18);
      v581 = (unsigned __int8 **)(v575 + 144);
      v580 = v582;
      if (v582)
        llvm::MetadataTracking::untrack((uint64_t)v581, v580);
      v583 = v731;
      *v581 = v731;
      if (v583)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v731, v583, (uint64_t)v581);
        v731 = 0;
      }
      v584 = llvm::Constant::getNullValue(*(llvm::Constant **)(*((_QWORD *)v679 + 2) + 8), (llvm::Type *)v583);
      v585 = *(_QWORD *)(a1 + 96) - *(_QWORD *)(a1 + 88);
      if ((int)((unint64_t)v585 >> 3) < 1)
      {
        v611 = (uint64_t)v685;
      }
      else
      {
        v586 = 0;
        v699 = (llvm::BasicBlock *)((unint64_t)v585 >> 3);
        v702 = (llvm::BasicBlock *)(int)(v585 >> 3);
        v587 = (uint64_t)v708 + 72;
        v588 = v690;
        v589 = (llvm::BasicBlock *)v685;
        do
        {
          v590 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * (_QWORD)v586);
          *(_QWORD *)&v767 = "worker_state_machine.parallel_region.execute";
          v770[0] = 259;
          v591 = operator new();
          *(_QWORD *)v591 = *(_QWORD *)v712 + 1600;
          *(_QWORD *)(v591 + 8) = 0;
          v592 = *(_DWORD *)(v591 + 20) & 0xC0000000;
          *(_QWORD *)(v591 + 24) = 0;
          v593 = v591 + 24;
          *(_DWORD *)(v591 + 16) = 22;
          *(_DWORD *)(v591 + 20) = v592;
          *(_QWORD *)(v591 + 32) = 0;
          *(_QWORD *)(v591 + 40) = v591 + 40;
          *(_QWORD *)(v591 + 48) = v591 + 40;
          *(_QWORD *)(v591 + 56) = 0;
          if (v708)
          {
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v587, (_QWORD *)v591);
            v594 = *(_QWORD *)v705;
            *(_QWORD *)(v591 + 24) = *(_QWORD *)v705;
            *(_QWORD *)(v591 + 32) = v705;
            *(_QWORD *)(v594 + 8) = v593;
            *(_QWORD *)v705 = v593;
          }
          llvm::Value::setName((uint64_t ***)v591, (uint64_t)&v767);
          if (v590)
            v595 = *(uint64_t ***)(v590 + 24);
          else
            v595 = 0;
          __p = v584;
          v753 = v710;
          v770[0] = 257;
          v596 = (char *)operator new(0xB0uLL);
          v597 = 0;
          v598 = (llvm::Instruction *)(v596 + 96);
          *((_DWORD *)v596 + 29) = *((_DWORD *)v596 + 29) & 0x38000000 | 3;
          do
          {
            v599 = &v596[v597];
            *(_QWORD *)v599 = 0;
            *((_QWORD *)v599 + 1) = 0;
            *((_QWORD *)v599 + 2) = 0;
            *((_QWORD *)v599 + 3) = v598;
            v597 += 32;
          }
          while (v597 != 96);
          sub_1C61DD0B0(v598, v595, v590, (uint64_t *)&__p, 2, 0, 0, (uint64_t)&v767, (llvm::BasicBlock *)v591);
          v600 = *(unsigned __int8 **)(v715 + 48);
          v730 = v600;
          if (v600)
            llvm::MetadataTracking::track((uint64_t)&v730, v600, 2);
          v603 = (unsigned __int8 *)*((_QWORD *)v596 + 18);
          v602 = (unsigned __int8 **)(v596 + 144);
          v601 = v603;
          if (v603)
            llvm::MetadataTracking::untrack((uint64_t)v602, v601);
          v604 = v730;
          *v602 = v730;
          if (v604)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v730, v604, (uint64_t)v602);
            v730 = 0;
          }
          v605 = (char *)operator new(0x60uLL);
          *((_DWORD *)v605 + 13) = *((_DWORD *)v605 + 13) & 0x38000000 | 1;
          *(_QWORD *)v605 = 0;
          *((_QWORD *)v605 + 1) = 0;
          *((_QWORD *)v605 + 2) = 0;
          *((_QWORD *)v605 + 3) = v605 + 32;
          llvm::BranchInst::BranchInst((llvm::BranchInst *)(v605 + 32), v588, (llvm::BasicBlock *)v591);
          v606 = *(unsigned __int8 **)(v715 + 48);
          v729 = v606;
          if (v606)
            llvm::MetadataTracking::track((uint64_t)&v729, v606, 2);
          v609 = (unsigned __int8 *)*((_QWORD *)v605 + 10);
          v608 = (unsigned __int8 **)(v605 + 80);
          v607 = v609;
          if (v609)
            llvm::MetadataTracking::untrack((uint64_t)v608, v607);
          v610 = v729;
          *v608 = v729;
          if (v610)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v729, v610, (uint64_t)v608);
            v729 = 0;
          }
          *(_QWORD *)&v767 = "worker_state_machine.parallel_region.check";
          v770[0] = 259;
          v611 = operator new();
          *(_QWORD *)v611 = *(_QWORD *)v712 + 1600;
          *(_QWORD *)(v611 + 8) = 0;
          v612 = *(_DWORD *)(v611 + 20) & 0xC0000000;
          *(_QWORD *)(v611 + 24) = 0;
          v613 = v611 + 24;
          *(_DWORD *)(v611 + 16) = 22;
          *(_DWORD *)(v611 + 20) = v612;
          *(_QWORD *)(v611 + 32) = 0;
          *(_QWORD *)(v611 + 40) = v611 + 40;
          *(_QWORD *)(v611 + 48) = v611 + 40;
          *(_QWORD *)(v611 + 56) = 0;
          if (v708)
          {
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v587, (_QWORD *)v611);
            v614 = *(_QWORD *)v705;
            *(_QWORD *)(v611 + 24) = *(_QWORD *)v705;
            *(_QWORD *)(v611 + 32) = v705;
            *(_QWORD *)(v614 + 8) = v613;
            *(_QWORD *)v705 = v613;
          }
          llvm::Value::setName((uint64_t ***)v611, (uint64_t)&v767);
          v586 = (llvm::BasicBlock *)((char *)v586 + 1);
          if ((uint64_t)v586 >= (uint64_t)v702 && *(_QWORD *)(a1 + 152) == *(_QWORD *)(a1 + 160))
          {
            v616 = *(_QWORD *)v712;
            v617 = *(unsigned __int8 ***)(*(_QWORD *)v712 + 1560);
            if (!v617)
            {
              v686 = v589;
              v618 = *(llvm::ConstantInt **)(v616 + 1888);
              v619 = *(_DWORD *)(v616 + 1896);
              DWORD2(v767) = v619 >> 8;
              if (v619 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v767, 1, 0);
              }
              else
              {
                if (v619 <= 0xFF)
                  v620 = 0;
                else
                  v620 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v619);
                *(_QWORD *)&v767 = v620 & 1;
              }
              v617 = (unsigned __int8 **)llvm::ConstantInt::get(v618, (llvm::LLVMContext *)&v767, v615);
              if (DWORD2(v767) >= 0x41 && (_QWORD)v767)
                MEMORY[0x1CAA32F9C](v767, 0x1000C8000313F17);
              *(_QWORD *)(v616 + 1560) = v617;
              v588 = v690;
              v589 = v686;
            }
          }
          else
          {
            *(_QWORD *)&v767 = "worker.check_parallel_region";
            v770[0] = 259;
            v617 = (unsigned __int8 **)llvm::CmpInst::Create(53, 32, (_DWORD **)PointerBitCastOrAddrSpaceCast, v590, (uint64_t)&v767, (uint64_t)v589);
            v621 = *(unsigned __int8 **)(v715 + 48);
            v728 = v621;
            if (v621)
              llvm::MetadataTracking::track((uint64_t)&v728, v621, 2);
            v622 = v617 + 6;
            if (&v728 == v617 + 6)
            {
              if (v728)
                llvm::MetadataTracking::untrack((uint64_t)&v728, v728);
              v588 = v690;
            }
            else
            {
              if (*v622)
                llvm::MetadataTracking::untrack((uint64_t)(v617 + 6), *v622);
              v623 = v728;
              *v622 = v728;
              if (v623)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v728, v623, (uint64_t)(v617 + 6));
                v728 = 0;
              }
            }
          }
          v624 = (char *)operator new(0xA0uLL);
          v625 = 0;
          v626 = (llvm::BranchInst *)(v624 + 96);
          *((_DWORD *)v624 + 29) = *((_DWORD *)v624 + 29) & 0x38000000 | 3;
          do
          {
            v627 = &v624[v625];
            *(_QWORD *)v627 = 0;
            *((_QWORD *)v627 + 1) = 0;
            *((_QWORD *)v627 + 2) = 0;
            *((_QWORD *)v627 + 3) = v626;
            v625 += 32;
          }
          while (v625 != 96);
          llvm::BranchInst::BranchInst(v626, (llvm::BasicBlock *)v591, (llvm::BasicBlock *)v611, (llvm::Value *)v617, v589);
          v628 = *(unsigned __int8 **)(v715 + 48);
          v727 = v628;
          if (v628)
            llvm::MetadataTracking::track((uint64_t)&v727, v628, 2);
          v631 = (unsigned __int8 *)*((_QWORD *)v624 + 18);
          v630 = (unsigned __int8 **)(v624 + 144);
          v629 = v631;
          if (v631)
            llvm::MetadataTracking::untrack((uint64_t)v630, v629);
          v632 = v727;
          *v630 = v727;
          if (v632)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v727, v632, (uint64_t)v630);
            v727 = 0;
          }
          v589 = (llvm::BasicBlock *)v611;
        }
        while (v586 != v699);
      }
      if (*(_QWORD *)(a1 + 152) != *(_QWORD *)(a1 + 160))
      {
        *(_QWORD *)&v767 = "worker_state_machine.parallel_region.fallback.execute";
        v770[0] = 259;
        llvm::Value::setName((uint64_t ***)v611, (uint64_t)&v767);
        __p = v584;
        v753 = v710;
        v770[0] = 257;
        v633 = (char *)operator new(0xB0uLL);
        v634 = 0;
        v635 = (llvm::Instruction *)(v633 + 96);
        *((_DWORD *)v633 + 29) = *((_DWORD *)v633 + 29) & 0x38000000 | 3;
        do
        {
          v636 = &v633[v634];
          *(_QWORD *)v636 = 0;
          *((_QWORD *)v636 + 1) = 0;
          *((_QWORD *)v636 + 2) = 0;
          *((_QWORD *)v636 + 3) = v635;
          v634 += 32;
        }
        while (v634 != 96);
        sub_1C61DD0B0(v635, (uint64_t **)v679, (uint64_t)PointerBitCastOrAddrSpaceCast, (uint64_t *)&__p, 2, 0, 0, (uint64_t)&v767, (llvm::BasicBlock *)v611);
        v637 = *(unsigned __int8 **)(v715 + 48);
        v726 = v637;
        if (v637)
          llvm::MetadataTracking::track((uint64_t)&v726, v637, 2);
        v640 = (unsigned __int8 *)*((_QWORD *)v633 + 18);
        v639 = (unsigned __int8 **)(v633 + 144);
        v638 = v640;
        if (v640)
          llvm::MetadataTracking::untrack((uint64_t)v639, v638);
        v641 = v726;
        *v639 = v726;
        if (v641)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v726, v641, (uint64_t)v639);
          v726 = 0;
        }
      }
      v642 = (char *)operator new(0x60uLL);
      *((_DWORD *)v642 + 13) = *((_DWORD *)v642 + 13) & 0x38000000 | 1;
      *(_QWORD *)v642 = 0;
      *((_QWORD *)v642 + 1) = 0;
      *((_QWORD *)v642 + 2) = 0;
      *((_QWORD *)v642 + 3) = v642 + 32;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v642 + 32), v690, (llvm::BasicBlock *)v611);
      v643 = *(unsigned __int8 **)(v715 + 48);
      v725 = v643;
      if (v643)
        llvm::MetadataTracking::track((uint64_t)&v725, v643, 2);
      v646 = (unsigned __int8 *)*((_QWORD *)v642 + 10);
      v645 = (unsigned __int8 **)(v642 + 80);
      v644 = v646;
      if (v646)
        llvm::MetadataTracking::untrack((uint64_t)v645, v644);
      v647 = v725;
      *v645 = v725;
      if (v647)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v725, v647, (uint64_t)v645);
        v725 = 0;
      }
      v648 = (uint64_t **)llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v683, v684, 151);
      v650 = v649;
      v770[0] = 257;
      v651 = (char *)operator new(0x70uLL);
      *((_DWORD *)v651 + 13) = *((_DWORD *)v651 + 13) & 0x38000000 | 1;
      *(_QWORD *)v651 = 0;
      *((_QWORD *)v651 + 1) = 0;
      *((_QWORD *)v651 + 2) = 0;
      *((_QWORD *)v651 + 3) = v651 + 32;
      sub_1C61DD0B0((llvm::Instruction *)(v651 + 32), v648, v650, 0, 0, 0, 0, (uint64_t)&v767, v690);
      if (v650 && !*(_BYTE *)(v650 + 16))
        *((_WORD *)v651 + 25) = (*(_WORD *)(v650 + 18) >> 2) & 0xFFC | *((_WORD *)v651 + 25) & 0xF003;
      v652 = *(unsigned __int8 **)(v715 + 48);
      v724 = v652;
      if (v652)
        llvm::MetadataTracking::track((uint64_t)&v724, v652, 2);
      v655 = (unsigned __int8 *)*((_QWORD *)v651 + 10);
      v654 = (unsigned __int8 **)(v651 + 80);
      v653 = v655;
      if (v655)
        llvm::MetadataTracking::untrack((uint64_t)v654, v653);
      v656 = v724;
      *v654 = v724;
      if (v656)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v724, v656, (uint64_t)v654);
        v724 = 0;
      }
      v657 = (char *)operator new(0x60uLL);
      *((_DWORD *)v657 + 13) = *((_DWORD *)v657 + 13) & 0x38000000 | 1;
      *(_QWORD *)v657 = 0;
      *((_QWORD *)v657 + 1) = 0;
      *((_QWORD *)v657 + 2) = 0;
      *((_QWORD *)v657 + 3) = v657 + 32;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v657 + 32), v688, v690);
      v658 = *(unsigned __int8 **)(v715 + 48);
      v723 = v658;
      if (v658)
        llvm::MetadataTracking::track((uint64_t)&v723, v658, 2);
      v661 = (unsigned __int8 *)*((_QWORD *)v657 + 10);
      v660 = (unsigned __int8 **)(v657 + 80);
      v659 = v661;
      if (v661)
        llvm::MetadataTracking::untrack((uint64_t)v660, v659);
      v662 = v723;
      *v660 = v723;
      if (v662)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v723, v662, (uint64_t)v660);
        v723 = 0;
      }
      __p = v678;
      v753 = v710;
      v770[0] = 257;
      v663 = (char *)operator new(0xB0uLL);
      v664 = 0;
      v665 = (llvm::Instruction *)(v663 + 96);
      *((_DWORD *)v663 + 29) = *((_DWORD *)v663 + 29) & 0x38000000 | 3;
      do
      {
        v666 = &v663[v664];
        *(_QWORD *)v666 = 0;
        *((_QWORD *)v666 + 1) = 0;
        *((_QWORD *)v666 + 2) = 0;
        *((_QWORD *)v666 + 3) = v665;
        v664 += 32;
      }
      while (v664 != 96);
      sub_1C61DD0B0(v665, v681, v682, (uint64_t *)&__p, 2, 0, 0, (uint64_t)&v767, v688);
      v667 = *(unsigned __int8 **)(v715 + 48);
      v722 = v667;
      if (v667)
        llvm::MetadataTracking::track((uint64_t)&v722, v667, 2);
      v670 = (unsigned __int8 *)*((_QWORD *)v663 + 18);
      v669 = (unsigned __int8 **)(v663 + 144);
      v668 = v670;
      if (v670)
        llvm::MetadataTracking::untrack((uint64_t)v669, v668);
      v671 = v722;
      *v669 = v722;
      if (v671)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v722, v671, (uint64_t)v669);
        v722 = 0;
      }
      v672 = (char *)operator new(0x60uLL);
      *((_DWORD *)v672 + 13) = *((_DWORD *)v672 + 13) & 0x38000000 | 1;
      *(_QWORD *)v672 = 0;
      *((_QWORD *)v672 + 1) = 0;
      *((_QWORD *)v672 + 2) = 0;
      *((_QWORD *)v672 + 3) = v672 + 32;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v672 + 32), v692, v688);
      v673 = *(unsigned __int8 **)(v715 + 48);
      *(_QWORD *)&v767 = v673;
      if (v673)
        llvm::MetadataTracking::track((uint64_t)&v767, v673, 2);
      v676 = (unsigned __int8 *)*((_QWORD *)v672 + 10);
      v675 = v672 + 80;
      v674 = v676;
      if (v676)
        llvm::MetadataTracking::untrack((uint64_t)v675, v674);
      v677 = (unsigned __int8 *)v767;
      *v675 = v767;
      if (v677)
        llvm::MetadataTracking::retrack((uint64_t)&v767, v677, (uint64_t)v675);
      return 0;
    }
    v502 = (char *)operator new(0x60uLL);
    v501 = (llvm::PointerType ***)(v502 + 32);
    *((_DWORD *)v502 + 13) = *((_DWORD *)v502 + 13) & 0x38000000 | 1;
    *(_QWORD *)v502 = 0;
    *((_QWORD *)v502 + 1) = 0;
    *((_QWORD *)v502 + 2) = 0;
    *((_QWORD *)v502 + 3) = v502 + 32;
    v503 = (*v478)[3];
    if (v503)
      v504 = llvm::PointerType::get(v503, 0);
    else
      v504 = llvm::PointerType::get(**v478, 0);
    if ((v477[55] & 0x10) == 0)
    {
      v532 = 0;
      v531 = &byte_1C871356D;
      goto LABEL_801;
    }
    v522 = *(_QWORD *)**v478;
    v523 = *(_QWORD *)(v522 + 152);
    v524 = *(unsigned int *)(v522 + 168);
    if ((_DWORD)v524)
    {
      LODWORD(v525) = (v524 - 1) & ((v478 >> 4) ^ (v478 >> 9));
      v526 = (llvm::PointerType ****)(v523 + 16 * v525);
      v527 = *v526;
      if (*v526 == v478)
      {
LABEL_800:
        v530 = v526[1];
        v533 = *v530;
        v531 = (char *)(v530 + 2);
        v532 = v533;
LABEL_801:
        v770[0] = 773;
        *(_QWORD *)&v767 = v531;
        *((_QWORD *)&v767 + 1) = v532;
        v768 = ".generic";
        v534 = (uint64_t ***)sub_1C53E82F0((uint64_t)v501, v504, 50, (uint64_t)v478, (uint64_t)v692);
        llvm::Value::setName(v534, (uint64_t)&v767);
        v535 = *(unsigned __int8 **)(v715 + 48);
        v736 = v535;
        if (v535)
          llvm::MetadataTracking::track((uint64_t)&v736, v535, 2);
        v538 = (unsigned __int8 *)*((_QWORD *)v502 + 10);
        v537 = v502 + 80;
        v536 = v538;
        if (v538)
          llvm::MetadataTracking::untrack((uint64_t)v537, v536);
        v539 = v736;
        *v537 = v736;
        if (v539)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v736, v539, (uint64_t)v537);
          v736 = 0;
        }
        goto LABEL_807;
      }
      v528 = 1;
      while (v527 != (llvm::PointerType ***)-4096)
      {
        v529 = v525 + v528++;
        v525 = v529 & (v524 - 1);
        v527 = *(llvm::PointerType ****)(v523 + 16 * v525);
        if (v527 == v478)
        {
          v526 = (llvm::PointerType ****)(v523 + 16 * v525);
          goto LABEL_800;
        }
      }
    }
    v526 = (llvm::PointerType ****)(v523 + 16 * v524);
    goto LABEL_800;
  }
  v6 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v6 = *(_QWORD *)(v6 + 24);
  if (*(_BYTE *)(v6 + 16))
  {
    if (*(_BYTE *)(v6 + 16) == 21)
      v7 = (unint64_t *)(v6 + 24);
    else
      v7 = (unint64_t *)(*(_QWORD *)(v6 + 40) + 56);
    v6 = *v7;
  }
  if ((*(_DWORD *)(v6 + 32) & 0xFu) - 7 <= 1)
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 8) + 24) + 40) + 56);
  v45 = *(_QWORD *)(v6 + 40);
  if ((*(_BYTE *)(v6 + 23) & 0x10) == 0)
  {
    v56 = 0;
    v55 = &byte_1C871356D;
    goto LABEL_87;
  }
  v46 = ***(_QWORD ***)v6;
  v47 = *(_QWORD *)(v46 + 152);
  v48 = *(unsigned int *)(v46 + 168);
  if (!(_DWORD)v48)
    goto LABEL_85;
  LODWORD(v49) = (v48 - 1) & ((v6 >> 4) ^ (v6 >> 9));
  v50 = (uint64_t *)(v47 + 16 * v49);
  v51 = *v50;
  if (*v50 != v6)
  {
    v52 = 1;
    while (v51 != -4096)
    {
      v53 = v49 + v52++;
      v49 = v53 & (v48 - 1);
      v51 = *(_QWORD *)(v47 + 16 * v49);
      if (v51 == v6)
      {
        v50 = (uint64_t *)(v47 + 16 * v49);
        goto LABEL_86;
      }
    }
LABEL_85:
    v50 = (uint64_t *)(v47 + 16 * v48);
  }
LABEL_86:
  v54 = (_QWORD *)v50[1];
  v57 = *v54;
  v55 = (char *)(v54 + 2);
  v56 = v57;
LABEL_87:
  v770[0] = 773;
  *(_QWORD *)&v767 = v55;
  *((_QWORD *)&v767 + 1) = v56;
  v768 = "_exec_mode";
  llvm::Twine::str((llvm::Twine *)&v767, &__p);
  if (SHIBYTE(v754) >= 0)
    p_p = (unsigned __int8 *)&__p;
  else
    p_p = (unsigned __int8 *)__p;
  if (SHIBYTE(v754) >= 0)
    v59 = HIBYTE(v754) & 0x7F;
  else
    v59 = (unint64_t)v753;
  v60 = sub_1C4FB7E80(*(uint64_t **)(v45 + 112), p_p, v59);
  if (!v60 || (v61 = v60, *(_BYTE *)(v60 + 16) != 3) || (*(_DWORD *)(v60 + 32) & 0xFu) - 7 <= 1)
    v61 = 0;
  if (SHIBYTE(v754) < 0)
    operator delete(__p);
  v62 = *(_QWORD *)(v61 - 32);
  v63 = *(_DWORD *)(v62 + 32);
  if (v63 > 0x40)
    LOBYTE(v62) = **(_BYTE **)(v62 + 24);
  else
    v62 = (uint64_t)(*(_QWORD *)(v62 + 24) << -(char)v63) >> -(char)v63;
  if (v62 != 1)
    return 1;
  v680 = v61;
  *(_QWORD *)&v716 = v719;
  *((_QWORD *)&v716 + 1) = v719;
  v717 = 8;
  v718 = 0;
  v65 = *(_QWORD *)(v3 + 216);
  v711 = *(_QWORD *)(v3 + 224);
  if (v65 == v711)
  {
    v740 = v742;
    v741 = 0x400000000;
    goto LABEL_212;
  }
  v700 = v5;
  v703 = (uint64_t *)(v3 + 192);
  do
  {
    v66 = *(_QWORD *)(*(_QWORD *)v65 + 40);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v716, v66);
    if (v67)
    {
      *(_QWORD *)&v767 = &v768;
      *((_QWORD *)&v767 + 1) = 0x300000000;
      v69 = *(_QWORD ***)(v66 + 40);
      v68 = (_QWORD *)(v66 + 40);
      v70 = *v69;
      if (*v69 != v68)
      {
        v71 = 0;
        do
        {
          v72 = v70 - 3;
          if (v70)
            v73 = (uint64_t)(v70 - 3);
          else
            v73 = 0;
          v74 = *(unsigned __int8 *)(v73 + 16) - 33;
          if (v74 <= 0x37)
          {
            if (((1 << (*(_BYTE *)(v73 + 16) - 33)) & 0x808001D0000010) != 0)
              goto LABEL_143;
            if (((1 << (*(_BYTE *)(v73 + 16) - 33)) & 0x8000000000041) != 0)
            {
              v77 = *(_QWORD *)(v73 + 64);
              if (!v77 || (*(_BYTE *)(v77 + 17) & 0x30) == 0)
              {
                v78 = *(_DWORD *)(v73 + 20);
                if (v78 < 0)
                {
                  v85 = v73 - 32 * (v78 & 0x7FFFFFF);
                  v88 = *(_QWORD *)(v85 - 8);
                  v86 = v85 - 8;
                  v87 = v88;
                  if (v88)
                  {
                    v89 = -v87;
                    while (1)
                    {
                      v90 = *(_DWORD *)(*(_QWORD *)(v86 + v89) + 8);
                      v225 = v90 > 7;
                      v91 = (1 << v90) & 0x83;
                      if (v225 || v91 == 0)
                        break;
                      v89 += 16;
                      if (!v89)
                        goto LABEL_139;
                    }
LABEL_143:
                    if (sub_1C5724C80(v73, v4 + 27208))
                    {
                      v72 = v71;
                    }
                    else if (*(_QWORD *)(v73 + 8)
                           || ((__p = (void *)v73, v745 = 0, !sub_1C61DB414(v703, &__p, &v745))
                             ? (v80 = *(_QWORD *)(a1 + 192),
                                v81 = *(unsigned int *)(a1 + 208),
                                v79 = (const char *)(v80 + 8 * v81))
                             : (const char *)(v79 = v745, v80 = *(_QWORD *)(a1 + 192), v81 = *(unsigned int *)(a1 + 208)),
                               v79 == (const char *)(v80 + 8 * v81)))
                    {
                      v72 = 0;
                    }
                    else if (v71)
                    {
                      v82 = DWORD2(v767);
                      if (DWORD2(v767) >= (unint64_t)HIDWORD(v767))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v767, (uint64_t)&v768, DWORD2(v767) + 1, 16);
                        v82 = DWORD2(v767);
                      }
                      v83 = (uint64_t *)(v767 + 16 * v82);
                      *v83 = v73;
                      v83[1] = (uint64_t)v71;
                      ++DWORD2(v767);
                    }
                    v70 = (_QWORD *)*v70;
                    v71 = v72;
                    continue;
                  }
                }
LABEL_139:
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v73, 45) & 1) == 0
                  && !llvm::CallBase::hasFnAttrOnCalledFunction(v73, 44))
                {
                  goto LABEL_143;
                }
              }
            }
            else if (v74 == 27 && (*(_WORD *)(v73 + 18) & 0x301) != 0)
            {
              goto LABEL_143;
            }
          }
          if ((llvm::Instruction::mayThrow((llvm::Instruction *)v73) & 1) != 0
            || !llvm::Instruction::willReturn((llvm::Instruction *)v73))
          {
            goto LABEL_143;
          }
          v75 = *(unsigned __int8 *)(v73 + 16) - 33;
          if (v75 <= 0x37)
          {
            if (((1 << (*(_BYTE *)(v73 + 16) - 33)) & 0x8000000000041) != 0)
            {
              v76 = *(_QWORD *)(v73 + 64);
              if (!v76 || (*(_BYTE *)(v76 + 20) & 4) == 0 && (*(_BYTE *)(v76 + 17) & 0x10) == 0)
              {
                LODWORD(__p) = 7;
                if (sub_1C53E4BBC(v73, (__int32 *)&__p, 1uLL))
                {
                  v84 = *(_QWORD *)(v73 - 32);
                  if (!v84
                    || *(_BYTE *)(v84 + 16)
                    || *(_QWORD *)(v84 + 24) != *(_QWORD *)(v73 + 72)
                    || *(_DWORD *)(v84 + 36) != 7)
                  {
                    goto LABEL_143;
                  }
                }
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v73, 66) & 1) == 0
                  && (llvm::CallBase::hasFnAttrOnCalledFunction(v73, 44) & 1) == 0)
                {
                  goto LABEL_143;
                }
              }
            }
            else if (((1 << (*(_BYTE *)(v73 + 16) - 33)) & 0x808001C8000010) != 0
                   || v75 == 28 && (*(_WORD *)(v73 + 18) & 0x301) != 0)
            {
              goto LABEL_143;
            }
          }
          v70 = (_QWORD *)*v70;
        }
        while (v70 != v68);
      }
      v93 = (llvm::Instruction **)v767;
      v94 = (llvm::Instruction **)(v767 + 16 * DWORD2(v767));
      if (DWORD2(v767))
      {
        do
        {
          v95 = *v93;
          v96 = v93[1];
          v93 += 2;
          llvm::Instruction::moveBefore(v95, v96);
        }
        while (v93 != v94);
        v93 = (llvm::Instruction **)v767;
      }
      if (v93 != (llvm::Instruction **)&v768)
        free(v93);
    }
    v65 += 8;
  }
  while (v65 != v711);
  v3 = a1;
  v97 = *(uint64_t **)(a1 + 216);
  v98 = *(uint64_t **)(a1 + 224);
  v740 = v742;
  v741 = 0x400000000;
  if (v97 != v98)
  {
    do
    {
      v102 = *v97;
      v103 = *(_QWORD *)(*v97 + 40);
      v767 = *(unint64_t *)(v103 + 56);
      v104 = sub_1C57365DC((uint64_t)a2, &v767, 0, 2, 0);
      v105 = (llvm::SmallPtrSetImplBase *)(v104 + 392);
      v106 = sub_1C477672C(v104 + 392, v102);
      v107 = *(_QWORD *)(v104 + 400);
      if (v107 == *(_QWORD *)(v104 + 392))
        v108 = 412;
      else
        v108 = 408;
      if (v106 == (_QWORD *)(v107 + 8 * *(unsigned int *)(v104 + v108)))
      {
        v109 = v103 + 40;
        v110 = *(_QWORD *)(v103 + 48);
        if (v110 != v109)
        {
          v111 = 0;
          v112 = 0;
          do
          {
            if (v110)
              v113 = v110 - 24;
            else
              v113 = 0;
            *(_QWORD *)&v767 = v113;
            __p = 0;
            if (sub_1C61DB414(v703, &v767, &__p))
            {
              v114 = __p;
              v115 = *(_QWORD *)(a1 + 192);
              v116 = *(unsigned int *)(a1 + 208);
            }
            else
            {
              v115 = *(_QWORD *)(a1 + 192);
              v116 = *(unsigned int *)(a1 + 208);
              v114 = (void *)(v115 + 8 * v116);
            }
            if (v114 == (void *)(v115 + 8 * v116))
            {
              if (v111)
              {
                v117 = v741;
                if (v741 >= (unint64_t)HIDWORD(v741))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v740, (uint64_t)v742, v741 + 1, 16);
                  v117 = v741;
                }
                v118 = (uint64_t *)((char *)v740 + 16 * v117);
                *v118 = v111;
                v118[1] = v112;
                LODWORD(v741) = v741 + 1;
                v112 = 0;
                v111 = 0;
              }
            }
            else
            {
              sub_1C4774094(v105, v113);
              if (!v111)
                v111 = v113;
              v112 = v113;
            }
            v110 = *(_QWORD *)(v110 + 8);
          }
          while (v110 != v109);
        }
      }
      ++v97;
    }
    while (v97 != v98);
    if (!(_DWORD)v741)
    {
      v3 = a1;
      goto LABEL_212;
    }
    v163 = (llvm::BasicBlock **)v740;
    v687 = (llvm::SmallPtrSetImplBase *)(a2 + 547);
    v689 = (llvm::BasicBlock *)((char *)v740 + 16 * v741);
    while (1)
    {
      v164 = *v163;
      v691 = (llvm::BasicBlock *)v163;
      v165 = (_QWORD *)*((_QWORD *)*v163 + 5);
      v713 = *(_QWORD *)(v165[7] + 40);
      v166 = *((_QWORD *)v163[1] + 4);
      if (v166)
        v167 = v166 == *((_QWORD *)v163[1] + 5) + 40;
      else
        v167 = 1;
      if (v167)
        v168 = 0;
      else
        v168 = (llvm::BasicBlock *)(v166 - 24);
      *(_QWORD *)&v767 = "region.guarded.end";
      v770[0] = 259;
      v169 = (_QWORD *)sub_1C5EBD70C((llvm *)v165, v168, 0, 0, 0, 0, (llvm::Twine *)&v767, 0);
      v170 = (uint64_t)v169;
      v171 = v169 + 5;
      v172 = v169 + 5;
      if ((_QWORD *)v169[6] != v169 + 5)
      {
        v172 = (_QWORD *)v169[6];
        while (1)
        {
          v173 = v172 - 3;
          if (!v172)
            v173 = 0;
          if (*((_BYTE *)v173 + 16) != 83)
            break;
          v172 = (_QWORD *)v172[1];
          if (v172 == v171)
          {
            v172 = v169 + 5;
            goto LABEL_263;
          }
        }
        v174 = *((unsigned __int8 *)v172 - 8) - 38;
        v225 = v174 > 0x38;
        v175 = (1 << v174) & 0x100060000000001;
        if (!v225 && v175 != 0)
          v172 = (_QWORD *)v172[1];
      }
LABEL_263:
      if (v172)
        v177 = (llvm::BasicBlock *)(v172 - 3);
      else
        v177 = 0;
      *(_QWORD *)&v767 = "region.barrier";
      v770[0] = 259;
      v178 = (_QWORD *)sub_1C5EBD70C((llvm *)v169, v177, 0, 0, 0, 0, (llvm::Twine *)&v767, 0);
      v707 = (llvm::BasicBlock *)v178;
      v179 = v178 + 5;
      if ((_QWORD *)v178[6] != v178 + 5)
      {
        v179 = (_QWORD *)v178[6];
        while (1)
        {
          v180 = v179 - 3;
          if (!v179)
            v180 = 0;
          if (*((_BYTE *)v180 + 16) != 83)
            break;
          v179 = (_QWORD *)v179[1];
          if (v179 == v178 + 5)
          {
            v179 = v178 + 5;
            goto LABEL_278;
          }
        }
        v181 = *((unsigned __int8 *)v179 - 8) - 38;
        v225 = v181 > 0x38;
        v182 = (1 << v181) & 0x100060000000001;
        if (!v225 && v182 != 0)
          v179 = (_QWORD *)v179[1];
      }
LABEL_278:
      v714 = v178 + 5;
      if (v179)
        v184 = (llvm::BasicBlock *)(v179 - 3);
      else
        v184 = 0;
      *(_QWORD *)&v767 = "region.exit";
      v770[0] = 259;
      v185 = sub_1C5EBD70C((llvm *)v178, v184, 0, 0, 0, 0, (llvm::Twine *)&v767, 0);
      *(_QWORD *)&v767 = "region.guarded";
      v770[0] = 259;
      v186 = (llvm::BasicBlock *)sub_1C5EBD70C((llvm *)v165, v164, 0, 0, 0, 0, (llvm::Twine *)&v767, 0);
      v187 = 0;
      v188 = (_QWORD *)v165[5];
      v693 = (llvm::PointerType *)(v165 + 5);
      if (v188 != v165 + 5)
      {
        if (v188)
          v189 = (unsigned __int8 *)(v188 - 3);
        else
          v189 = 0;
        if (v189[16] - 29 >= 0xB)
          v187 = 0;
        else
          v187 = (llvm::BasicBlock *)v189;
      }
      *(_QWORD *)&v767 = "region.check.tid";
      v770[0] = 259;
      v697 = (llvm::BasicBlock *)v165;
      v190 = sub_1C5EBD70C((llvm *)v165, v187, 0, 0, 0, 0, (llvm::Twine *)&v767, 0);
      sub_1C4774094(v687, v170);
      sub_1C4774094(v687, (uint64_t)v707);
      sub_1C4774094(v687, v185);
      sub_1C4774094(v687, (uint64_t)v186);
      v704 = (llvm::BasicBlock *)v190;
      sub_1C4774094(v687, v190);
      v191 = 0;
      v192 = (_QWORD *)*((_QWORD *)v186 + 6);
      if (v192 != (_QWORD *)((char *)v186 + 40))
        break;
LABEL_289:
      v193 = a2[11];
      v194 = *(llvm::PointerType **)v693;
      v195 = *(_QWORD *)v693 - 24;
      if (!*(_QWORD *)v693)
        v195 = 0;
      if (*(unsigned __int8 *)(v195 + 16) - 29 >= 0xB)
        v195 = 0;
      v196 = *(unsigned __int8 **)(v195 + 48);
      v739 = v196;
      if (v196)
      {
        llvm::MetadataTracking::track((uint64_t)&v739, v196, 2);
        v194 = *(llvm::PointerType **)v693;
      }
      if (v194 == v693)
      {
        v197 = 0;
      }
      else
      {
        if (v194)
          v258 = (uint64_t ***)((char *)v194 - 24);
        else
          v258 = 0;
        if (*((unsigned __int8 *)v258 + 16) - 29 >= 0xB)
          v197 = 0;
        else
          v197 = v258;
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v197[5] + 5), v197);
      v259 = v197[3];
      v260 = v197[4];
      *v260 = (uint64_t *)v259;
      v259[1] = (uint64_t *)v260;
      v197[3] = 0;
      v197[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v197);
      __p = v697;
      v753 = v693;
      v754 = v739;
      if (v739)
        llvm::MetadataTracking::track((uint64_t)&v754, v739, 2);
      v261 = v193 + 616;
      sub_1C62683AC(v193 + 616, (uint64_t *)&__p);
      LODWORD(v734) = 0;
      v262 = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(v193 + 616, &__p, &v734);
      Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(v193 + 616, v262, v734, 0, 0);
      v263 = (char *)operator new(0x60uLL);
      *((_DWORD *)v263 + 13) = *((_DWORD *)v263 + 13) & 0x38000000 | 1;
      *(_QWORD *)v263 = 0;
      *((_QWORD *)v263 + 1) = 0;
      *((_QWORD *)v263 + 2) = 0;
      *((_QWORD *)v263 + 3) = v263 + 32;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v263 + 32), v704, v697);
      v738 = v739;
      if (v739)
        llvm::MetadataTracking::track((uint64_t)&v738, v739, 2);
      v266 = (unsigned __int8 *)*((_QWORD *)v263 + 10);
      v265 = (unsigned __int8 **)(v263 + 80);
      v264 = v266;
      if (v266)
        llvm::MetadataTracking::untrack((uint64_t)v265, v264);
      v267 = v738;
      *v265 = v738;
      if (v267)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v738, v267, (uint64_t)v265);
        v738 = 0;
      }
      v268 = (llvm::BasicBlock *)*((_QWORD *)v704 + 5);
      if (v268 == (llvm::BasicBlock *)((char *)v704 + 40))
      {
        v269 = 0;
      }
      else
      {
        if (v268)
          v270 = (char *)v268 - 24;
        else
          v270 = 0;
        if (v270[16] - 29 >= 0xB)
          v269 = 0;
        else
          v269 = v270;
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v269 + 5) + 40, (uint64_t ***)v269);
      v271 = *((_QWORD *)v269 + 3);
      v272 = (_QWORD *)*((_QWORD *)v269 + 4);
      *v272 = v271;
      *(_QWORD *)(v271 + 8) = v272;
      *((_QWORD *)v269 + 3) = 0;
      *((_QWORD *)v269 + 4) = 0;
      llvm::Value::deleteValue((llvm::Value *)v269);
      v745 = (const char *)v704;
      v746 = (uint64_t)v704 + 40;
      v747[0] = v739;
      if (v739)
        llvm::MetadataTracking::track((uint64_t)v747, v739, 2);
      sub_1C62683AC(v193 + 616, (uint64_t *)&v745);
      v273 = (uint64_t **)llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v193 + 616, v713, 5);
      v275 = v274;
      v770[0] = 257;
      v276 = (uint64_t *)(v193 + 960);
      v277 = sub_1C4774778((uint64_t *)(v193 + 960), v273, v274, 0, 0, (uint64_t)&v767, 0);
      v737 = v739;
      if (v739)
        llvm::MetadataTracking::track((uint64_t)&v737, v739, 2);
      v278 = (unsigned __int8 **)(v277 + 48);
      v5 = v700;
      if (&v737 == (unsigned __int8 **)(v277 + 48))
      {
        v279 = v737;
        if (v737)
          llvm::MetadataTracking::untrack((uint64_t)&v737, v737);
      }
      else
      {
        if (*v278)
          llvm::MetadataTracking::untrack(v277 + 48, *v278);
        v279 = v737;
        *v278 = v737;
        if (v279)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v737, v279, v277 + 48);
          v737 = 0;
        }
      }
      if (v275 && !*(_BYTE *)(v275 + 16))
        *(_WORD *)(v277 + 18) = (*(_WORD *)(v275 + 18) >> 2) & 0xFFC | *(_WORD *)(v277 + 18) & 0xF003;
      v770[0] = 257;
      v280 = llvm::Constant::getNullValue(*(llvm::Constant **)v277, (llvm::Type *)v279);
      v281 = (llvm::Value *)sub_1C4774B48((uint64_t)v276, 32, v277, (uint64_t)v280, (uint64_t)&v767);
      v282 = (char *)operator new(0xA0uLL);
      v283 = 0;
      v284 = (unsigned __int8 **)(v282 + 96);
      *((_DWORD *)v282 + 29) = *((_DWORD *)v282 + 29) & 0x38000000 | 3;
      do
      {
        v285 = &v282[v283];
        *(_QWORD *)v285 = 0;
        *((_QWORD *)v285 + 1) = 0;
        *((_QWORD *)v285 + 2) = 0;
        *((_QWORD *)v285 + 3) = v284;
        v283 += 32;
      }
      while (v283 != 96);
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v282 + 96), v186, v707, v281, 0);
      v770[0] = 257;
      v286 = sub_1C4867F8C(v276, v284, (uint64_t)&v767);
      v736 = v739;
      if (v739)
        llvm::MetadataTracking::track((uint64_t)&v736, v739, 2);
      v287 = v286 + 6;
      if (&v736 == v287)
      {
        if (v736)
          llvm::MetadataTracking::untrack((uint64_t)&v736, v736);
      }
      else
      {
        if (*v287)
          llvm::MetadataTracking::untrack((uint64_t)v287, *v287);
        v288 = v736;
        *v287 = v736;
        if (v288)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v736, v288, (uint64_t)v287);
          v736 = 0;
        }
      }
      v289 = (uint64_t **)llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v261, v713, 166);
      v291 = v290;
      v292 = v714;
      if (*((_QWORD **)v707 + 6) != v714)
      {
        v292 = (_QWORD *)*((_QWORD *)v707 + 6);
        while (1)
        {
          v293 = v292 - 3;
          if (!v292)
            v293 = 0;
          if (*((_BYTE *)v293 + 16) != 83)
            break;
          v292 = (_QWORD *)v292[1];
          if (v292 == v714)
          {
            v292 = v714;
            goto LABEL_436;
          }
        }
        v294 = *((unsigned __int8 *)v292 - 8) - 38;
        v225 = v294 > 0x38;
        v295 = (1 << v294) & 0x100060000000001;
        if (!v225 && v295 != 0)
          v292 = (_QWORD *)v292[1];
      }
LABEL_436:
      *(_QWORD *)&v767 = v707;
      *((_QWORD *)&v767 + 1) = v292;
      v768 = 0;
      sub_1C62683AC(v261, (uint64_t *)&v767);
      if (v768)
        llvm::MetadataTracking::untrack((uint64_t)&v768, (unsigned __int8 *)v768);
      v743[0] = Ident;
      v743[1] = (void *)v277;
      v770[0] = 257;
      v297 = sub_1C4774778(v276, v289, v291, (uint64_t *)v743, 2, (uint64_t)&v767, 0);
      v735 = v739;
      if (v739)
        llvm::MetadataTracking::track((uint64_t)&v735, v739, 2);
      v298 = (unsigned __int8 **)(v297 + 48);
      if (&v735 == (unsigned __int8 **)(v297 + 48))
      {
        if (v735)
          llvm::MetadataTracking::untrack((uint64_t)&v735, v735);
      }
      else
      {
        if (*v298)
          llvm::MetadataTracking::untrack(v297 + 48, *v298);
        v299 = v735;
        *v298 = v735;
        if (v299)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v735, v299, v297 + 48);
          v735 = 0;
        }
      }
      if (v291 && !*(_BYTE *)(v291 + 16))
        *(_WORD *)(v297 + 18) = (*(_WORD *)(v291 + 18) >> 2) & 0xFFC | *(_WORD *)(v297 + 18) & 0xF003;
      if ((v191 & 1) != 0)
      {
        v743[0] = Ident;
        v743[1] = (void *)v277;
        v770[0] = 257;
        v300 = (_QWORD *)*v714;
        if ((_QWORD *)*v714 == v714)
        {
          v301 = 0;
        }
        else
        {
          if (v300)
            v302 = v300 - 3;
          else
            v302 = 0;
          if (*((unsigned __int8 *)v302 + 16) - 29 >= 0xB)
            v301 = 0;
          else
            v301 = v302;
        }
        v303 = (char *)operator new(0xB0uLL);
        v304 = v303;
        v305 = 0;
        v306 = (llvm::Value *)(v303 + 96);
        *((_DWORD *)v303 + 29) = *((_DWORD *)v303 + 29) & 0x38000000 | 3;
        do
        {
          v307 = &v303[v305];
          *(_QWORD *)v307 = 0;
          *((_QWORD *)v307 + 1) = 0;
          *((_QWORD *)v307 + 2) = 0;
          *((_QWORD *)v307 + 3) = v306;
          v305 += 32;
        }
        while (v305 != 96);
        v308 = *v289[2];
        *(_OWORD *)(v303 + 120) = 0u;
        v309 = v303 + 120;
        *((_QWORD *)v303 + 12) = v308;
        *((_QWORD *)v303 + 13) = 0;
        v303[112] = 84;
        v303[113] = 0;
        *((_WORD *)v303 + 57) = 0;
        *((_DWORD *)v303 + 29) = *((_DWORD *)v303 + 29) & 0xC0000000 | 3;
        *(_OWORD *)(v303 + 136) = 0u;
        *((_DWORD *)v303 + 38) = 0;
        if (v301)
        {
          v312 = v301[5];
          *((_QWORD *)v303 + 17) = v312;
          *(_WORD *)(v312 + 18) &= ~0x8000u;
          if ((v303[119] & 0x10) != 0)
          {
            v314 = *(_QWORD *)(v312 + 56);
            if (v314)
            {
              v315 = *(llvm::ValueSymbolTable **)(v314 + 104);
              if (v315)
                llvm::ValueSymbolTable::reinsertValue(v315, v306);
            }
          }
          v313 = v301[3];
          *((_QWORD *)v304 + 15) = v313;
          *((_QWORD *)v304 + 16) = v301 + 3;
          *(_QWORD *)(v313 + 8) = v309;
          v301[3] = v309;
        }
        *((_QWORD *)v304 + 20) = 0;
        llvm::CallInst::init((uint64_t ***)v306, v289, v291, (uint64_t *)v743, 2, 0, 0, (uint64_t)&v767);
        *(_QWORD *)&v767 = v739;
        if (v739)
          llvm::MetadataTracking::track((uint64_t)&v767, v739, 2);
        v310 = (unsigned __int8 *)*((_QWORD *)v304 + 18);
        v5 = v700;
        if (v310)
          llvm::MetadataTracking::untrack((uint64_t)(v304 + 144), v310);
        v311 = (unsigned __int8 *)v767;
        *((_QWORD *)v304 + 18) = v767;
        if (v311)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v767, v311, (uint64_t)(v304 + 144));
          *(_QWORD *)&v767 = 0;
        }
        if (v291 && !*(_BYTE *)(v291 + 16))
          *((_WORD *)v304 + 57) = (*(_WORD *)(v291 + 18) >> 2) & 0xFFC | *((_WORD *)v304 + 57) & 0xF003;
      }
      if (v747[0])
        llvm::MetadataTracking::untrack((uint64_t)v747, v747[0]);
      v3 = a1;
      if (v754)
        llvm::MetadataTracking::untrack((uint64_t)&v754, v754);
      if (v739)
        llvm::MetadataTracking::untrack((uint64_t)&v739, v739);
      v163 = (llvm::BasicBlock **)((char *)v691 + 16);
      if ((llvm::BasicBlock *)((char *)v691 + 16) == v689)
        goto LABEL_212;
    }
    v191 = 0;
    while (1)
    {
      v198 = v192 ? (llvm::PointerType **)(v192 - 3) : 0;
      *(_QWORD *)&v767 = v770;
      *((_QWORD *)&v767 + 1) = v770;
      v768 = (char *)4;
      v769 = 0;
      v199 = v198[1];
      if (v199)
        break;
LABEL_377:
      v192 = (_QWORD *)v192[1];
      if (v192 == (_QWORD *)((char *)v186 + 40))
        goto LABEL_289;
    }
    v200 = 0;
    v201 = v770;
    v202 = v770;
    do
    {
      v203 = *((_QWORD *)v199 + 3);
      if (*(llvm::BasicBlock **)(v203 + 40) != v186)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v767, v203);
        v202 = (_WORD *)*((_QWORD *)&v767 + 1);
        v201 = (_WORD *)v767;
        v200 = HIDWORD(v768);
      }
      v199 = (llvm::PointerType *)*((_QWORD *)v199 + 1);
    }
    while (v199);
    if (v200 == v769)
    {
LABEL_375:
      if (v202 != v201)
        free(v202);
      goto LABEL_377;
    }
    v204 = operator new(0x78uLL);
    v205 = (llvm::Value *)(v204 + 8);
    v204[13] = v204[13] & 0x38000000 | 1;
    *(_QWORD *)v204 = 0;
    *((_QWORD *)v204 + 1) = 0;
    *((_QWORD *)v204 + 2) = 0;
    *((_QWORD *)v204 + 3) = v204 + 8;
    v206 = *v198;
    v208 = llvm::UndefValue::get(*v198, v207);
    v209 = v198 >> 4;
    if ((*((_BYTE *)v198 + 23) & 0x10) == 0)
    {
      v219 = 0;
      v220 = &byte_1C871356D;
LABEL_316:
      v748 = 773;
      v745 = v220;
      v746 = v219;
      v747[0] = ".guarded.output.alloc";
      llvm::Twine::str((llvm::Twine *)&v745, &v720);
      v222 = (__int128 *)v720;
      if (v721 >= 0)
        v222 = &v720;
      v223 = HIBYTE(v721) & 0x7F;
      if (v721 < 0)
        v223 = *((_QWORD *)&v720 + 1);
      for (; v223; --v223)
      {
        v224 = *(unsigned __int8 *)v222;
        v225 = v224 == 95 || (v224 - 58) > 0xFFFFFFF5;
        if (!v225 && (v224 & 0xFFFFFFDF) - 91 <= 0xFFFFFFE5)
          *(_BYTE *)v222 = 46;
        v222 = (__int128 *)((char *)v222 + 1);
      }
      *(_OWORD *)v743 = v720;
      v744 = v721;
      v721 = 0;
      v720 = 0uLL;
      WORD4(v755) = 260;
      __p = v743;
      llvm::GlobalVariable::GlobalVariable((uint64_t)v205, v713, v206, 0, 7, (uint64_t)v208, (uint64_t)&__p, 0, 0, 0x100000003, 0);
      if (SHIBYTE(v744) < 0)
        operator delete(v743[0]);
      if (SHIBYTE(v721) < 0)
        operator delete((void *)v720);
      v227 = operator new(0x80uLL);
      v228 = (llvm::StoreInst *)(v227 + 16);
      v227[21] = v227[21] & 0x38000000 | 2;
      *(_QWORD *)v227 = 0;
      *((_QWORD *)v227 + 1) = 0;
      *((_QWORD *)v227 + 2) = 0;
      *((_QWORD *)v227 + 3) = v227 + 16;
      *((_QWORD *)v227 + 4) = 0;
      *((_QWORD *)v227 + 5) = 0;
      *((_QWORD *)v227 + 6) = 0;
      *((_QWORD *)v227 + 7) = v227 + 16;
      v229 = (_QWORD *)*v171;
      if ((_QWORD *)*v171 == v171)
      {
        v231 = 0;
      }
      else
      {
        if (v229)
          v230 = (unsigned __int8 *)(v229 - 3);
        else
          v230 = 0;
        if (v230[16] - 29 >= 0xB)
          v231 = 0;
        else
          v231 = (llvm::Instruction *)v230;
      }
      llvm::StoreInst::StoreInst(v228, (llvm::Value *)v198, v205, 0, v231);
      v232 = operator new(0x60uLL);
      v233 = (llvm::Value *)(v232 + 8);
      v232[13] = v232[13] & 0x38000000 | 1;
      *(_QWORD *)v232 = 0;
      *((_QWORD *)v232 + 1) = 0;
      *((_QWORD *)v232 + 2) = 0;
      *((_QWORD *)v232 + 3) = v232 + 8;
      v234 = *v198;
      if ((*((_BYTE *)v198 + 23) & 0x10) == 0)
      {
        v244 = 0;
        v245 = &byte_1C871356D;
        goto LABEL_351;
      }
      v235 = **(_QWORD **)v234;
      v236 = *(_QWORD *)(v235 + 152);
      v237 = *(unsigned int *)(v235 + 168);
      if ((_DWORD)v237)
      {
        LODWORD(v238) = (v237 - 1) & (v209 ^ (v198 >> 9));
        v239 = (llvm::PointerType ***)(v236 + 16 * v238);
        v240 = *v239;
        if (*v239 == v198)
        {
LABEL_350:
          v243 = v239[1];
          v246 = *v243;
          v245 = (char *)(v243 + 2);
          v244 = v246;
LABEL_351:
          WORD4(v755) = 773;
          __p = v245;
          v753 = v244;
          v754 = ".guarded.output.load";
          v247 = *v714;
          if ((_QWORD *)*v714 == v714)
          {
            v249 = 0;
          }
          else
          {
            if (v247)
              v248 = v247 - 24;
            else
              v248 = 0;
            if (*(unsigned __int8 *)(v248 + 16) - 29 >= 0xB)
              v249 = 0;
            else
              v249 = v248;
          }
          llvm::LoadInst::LoadInst((uint64_t)(v232 + 8), (uint64_t)v234, (uint64_t)v205, (uint64_t)&__p, 0, v249);
          v202 = (_WORD *)*((_QWORD *)&v767 + 1);
          v201 = (_WORD *)v767;
          v250 = (char **)((char *)&v768 + 4);
          if (*((_QWORD *)&v767 + 1) != (_QWORD)v767)
            v250 = &v768;
          v251 = *(unsigned int *)v250;
          v252 = (llvm::User **)*((_QWORD *)&v767 + 1);
          if ((_DWORD)v251)
          {
            v253 = 0;
            while (*(_QWORD *)(*((_QWORD *)&v767 + 1) + v253) >= 0xFFFFFFFFFFFFFFFELL)
            {
              v253 += 8;
              if (8 * v251 == v253)
                goto LABEL_373;
            }
            v252 = (llvm::User **)(*((_QWORD *)&v767 + 1) + v253);
          }
          v254 = *((_QWORD *)&v767 + 1) + 8 * v251;
          if (v252 == (llvm::User **)v254)
          {
LABEL_373:
            v191 = 1;
          }
          else
          {
            v255 = *v252;
LABEL_369:
            llvm::User::replaceUsesOfWith(v255, (llvm::Value *)v198, v233);
            v256 = (unint64_t *)(v252 + 1);
            while (v256 != (unint64_t *)v254)
            {
              v257 = *v256++;
              v255 = (llvm::User *)v257;
              if (v257 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v252 = (llvm::User **)(v256 - 1);
                goto LABEL_369;
              }
            }
            v191 = 1;
            v202 = (_WORD *)*((_QWORD *)&v767 + 1);
            v201 = (_WORD *)v767;
          }
          goto LABEL_375;
        }
        v241 = 1;
        while (v240 != (llvm::PointerType **)-4096)
        {
          v242 = v238 + v241++;
          v238 = v242 & (v237 - 1);
          v240 = *(llvm::PointerType ***)(v236 + 16 * v238);
          if (v240 == v198)
          {
            v239 = (llvm::PointerType ***)(v236 + 16 * v238);
            goto LABEL_350;
          }
        }
      }
      v239 = (llvm::PointerType ***)(v236 + 16 * v237);
      goto LABEL_350;
    }
    v210 = **(_QWORD **)*v198;
    v211 = *(_QWORD *)(v210 + 152);
    v212 = *(unsigned int *)(v210 + 168);
    if ((_DWORD)v212)
    {
      LODWORD(v213) = (v212 - 1) & (v209 ^ (v198 >> 9));
      v214 = (llvm::PointerType ***)(v211 + 16 * v213);
      v215 = *v214;
      if (*v214 == v198)
      {
LABEL_315:
        v218 = v214[1];
        v221 = (uint64_t)*v218;
        v220 = (char *)(v218 + 2);
        v219 = v221;
        goto LABEL_316;
      }
      v216 = 1;
      while (v215 != (llvm::PointerType **)-4096)
      {
        v217 = v213 + v216++;
        v213 = v217 & (v212 - 1);
        v215 = *(llvm::PointerType ***)(v211 + 16 * v213);
        if (v215 == v198)
        {
          v214 = (llvm::PointerType ***)(v211 + 16 * v213);
          goto LABEL_315;
        }
      }
    }
    v214 = (llvm::PointerType ***)(v211 + 16 * v212);
    goto LABEL_315;
  }
LABEL_212:
  v119 = v5;
  v120 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(v680 - 32), 3, 0);
  llvm::GlobalVariable::setInitializer(v680, (llvm::Constant *)v120);
  v122 = *(_QWORD *)(v3 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(v3 + 16) & 3) == 0)
    v122 = *(_QWORD *)(v122 + 24);
  v123 = **(llvm::ConstantInt ***)v122;
  v124 = *(_QWORD *)(v3 + 240);
  v125 = *(_DWORD *)(v124 + 20);
  if ((v125 & 0x40000000) != 0)
    v126 = *(_QWORD *)(v124 - 8);
  else
    v126 = v124 - 32 * (v125 & 0x7FFFFFF);
  v127 = v126 + 32;
  Signed = llvm::ConstantInt::getSigned((llvm::ConstantInt **)(*(_QWORD *)v123 + 1912), 2, v121);
  sub_1C628F700((uint64_t)a2, v127, Signed);
  v130 = *(_QWORD *)(v3 + 240);
  v131 = *(_DWORD *)(v130 + 20);
  if ((v131 & 0x40000000) != 0)
    v132 = *(_QWORD *)(v130 - 8);
  else
    v132 = v130 - 32 * (v131 & 0x7FFFFFF);
  v133 = v132 + 64;
  v134 = llvm::ConstantInt::getBool(v123, 0, v129);
  sub_1C628F700((uint64_t)a2, v133, v134);
  v136 = *(_QWORD *)(v3 + 248);
  v137 = *(_DWORD *)(v136 + 20);
  if ((v137 & 0x40000000) != 0)
    v138 = *(_QWORD *)(v136 - 8);
  else
    v138 = v136 - 32 * (v137 & 0x7FFFFFF);
  v139 = v138 + 32;
  v140 = llvm::ConstantInt::getSigned((llvm::ConstantInt **)(*(_QWORD *)v123 + 1912), 2, v135);
  sub_1C628F700((uint64_t)a2, v139, v140);
  v142 = *(_QWORD *)(v3 + 240);
  v143 = *(_DWORD *)(v142 + 20);
  if ((v143 & 0x40000000) != 0)
    v144 = *(_QWORD *)(v142 - 8);
  else
    v144 = v142 - 32 * (v143 & 0x7FFFFFF);
  v145 = v144 + 96;
  v146 = llvm::ConstantInt::getBool(v123, 0, v141);
  sub_1C628F700((uint64_t)a2, v145, v146);
  v148 = *(_QWORD *)(v3 + 248);
  v149 = *(_DWORD *)(v148 + 20);
  if ((v149 & 0x40000000) != 0)
    v150 = *(_QWORD *)(v148 - 8);
  else
    v150 = v148 - 32 * (v149 & 0x7FFFFFF);
  v151 = v150 + 64;
  v152 = llvm::ConstantInt::getBool(v123, 0, v147);
  sub_1C628F700((uint64_t)a2, v151, v152);
  v153 = (uint64_t (*)(_QWORD, _QWORD))a2[687];
  if (v153)
  {
    v154 = *(_QWORD *)(v3 + 240);
    v155 = (llvm::OptimizationRemarkEmitter *)v153(a2[688], *(_QWORD *)(*(_QWORD *)(v154 + 40) + 56));
    v156 = ****(_QWORD ****)v155;
    if (*(_QWORD *)(v156 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v156 + 72) + 48))(*(_QWORD *)(v156 + 72)))
    {
      v316 = a2[689];
      v317 = *(unsigned __int8 **)(*(_QWORD *)(v154 + 40) + 56);
      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v767, (const llvm::DebugLoc *)(v154 + 48));
      v318 = *(_QWORD *)(v154 + 40);
      LODWORD(v753) = 9;
      BYTE4(v753) = 2;
      v755 = v767;
      v754 = v317;
      v756 = v316;
      v757 = "OMP120";
      v758 = 6;
      v759 = 0;
      v760 = 0;
      v761 = v763;
      v762 = 0x400000000;
      v764 = 0;
      v765 = -1;
      v766 = v318;
      __p = &off_1E814E500;
      *(_QWORD *)&v767 = "Transformed generic-mode kernel to SPMD-mode.";
      *((_QWORD *)&v767 + 1) = 45;
      sub_1C53B17B4((uint64_t)&v761, (const void **)&v767);
      sub_1C61998EC((uint64_t)&v767, (uint64_t)&__p);
      *(_QWORD *)&v767 = &off_1E814E500;
      v745 = " [";
      v746 = 2;
      sub_1C53B17B4((uint64_t)&v771, (const void **)&v745);
      v745 = "OMP120";
      v746 = 6;
      sub_1C53B17B4((uint64_t)&v771, (const void **)&v745);
      v745 = "]";
      v746 = 1;
      sub_1C53B17B4((uint64_t)&v771, (const void **)&v745);
      sub_1C61998EC((uint64_t)&v745, (uint64_t)&v767);
      v745 = (const char *)&off_1E814E500;
      *(_QWORD *)&v767 = &off_1E814E790;
      v319 = (char *)v771;
      if (v772)
      {
        v320 = (unint64_t)v772 << 6;
        do
        {
          v321 = (void **)&v319[v320];
          if (v319[v320 - 17] < 0)
            operator delete(*(v321 - 5));
          if (*((char *)v321 - 41) < 0)
            operator delete(*(v321 - 8));
          v320 -= 64;
        }
        while (v320);
        v319 = (char *)v771;
      }
      if (v319 != (char *)v773)
        free(v319);
      __p = &off_1E814E790;
      v322 = (char *)v761;
      if ((_DWORD)v762)
      {
        v323 = (unint64_t)v762 << 6;
        do
        {
          v324 = (void **)&v322[v323];
          if (v322[v323 - 17] < 0)
            operator delete(*(v324 - 5));
          if (*((char *)v324 - 41) < 0)
            operator delete(*(v324 - 8));
          v323 -= 64;
        }
        while (v323);
        v322 = (char *)v761;
      }
      if (v322 != v763)
        free(v322);
      llvm::OptimizationRemarkEmitter::emit(v155, (llvm::DiagnosticInfoOptimizationBase *)&v745);
      v745 = (const char *)&off_1E814E790;
      v325 = (char *)v749;
      if (v750)
      {
        v326 = (unint64_t)v750 << 6;
        do
        {
          v327 = (void **)&v325[v326];
          if (v325[v326 - 17] < 0)
            operator delete(*(v327 - 5));
          if (*((char *)v327 - 41) < 0)
            operator delete(*(v327 - 8));
          v326 -= 64;
        }
        while (v326);
        v325 = (char *)v749;
      }
      if (v325 != v751)
        free(v325);
    }
  }
  if (v740 != v742)
    free(v740);
  if (*((_QWORD *)&v716 + 1) != (_QWORD)v716)
    free(*((void **)&v716 + 1));
  result = 0;
  if (!v119)
    goto LABEL_62;
  return result;
}

uint64_t sub_1C573E30C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  unint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v15;
  uint64_t *v16;
  int v17;
  int v18;
  uint64_t v19;
  llvm::AbstractAttribute *v20;
  BOOL v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  char v28;
  unsigned __int8 v29;
  _QWORD v30[2];
  _QWORD v31[7];
  void *__p;
  void *v33;
  uint64_t (**v34)();
  _QWORD v35[8];
  _QWORD v36[14];
  void *v37;
  void *v38;
  uint64_t (**v39)();
  uint64_t v40[6];
  int *v41[2];
  uint64_t v42;
  int v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  sub_1C5737C10((uint64_t)v31, v4);
  v30[0] = a2;
  v30[1] = a1;
  v29 = 0;
  if (*(unsigned __int8 *)(a1 + 185) != *(unsigned __int8 *)(a1 + 184)
    && (llvm::Attributor::checkForAllReadWriteInstructions(a2, (unsigned int (*)(uint64_t, uint64_t))sub_1C573EB54, (uint64_t)v30, a1, &v29) & 1) == 0)
  {
    *(_BYTE *)(a1 + 185) = *(_BYTE *)(a1 + 184);
  }
  if (*(_BYTE *)(a1 + 256))
  {
    v7 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 88) + 25688;
    v23 = a2;
    v24 = v5;
    v25 = (char *)a1;
    if ((llvm::Attributor::checkForAllCallSites(a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1C573ED48, (uint64_t)&v23, a1, 1, v41) & 1) == 0)*(_BYTE *)(a1 + 337) = *(_BYTE *)(a1 + 336);
    LOBYTE(v41[0]) = 1;
    v23 = a2;
    v24 = a1;
    if ((llvm::Attributor::checkForAllCallSites(a2, (uint64_t (*)(uint64_t, uint64_t *))sub_1C573EFDC, (uint64_t)&v23, a1, 1, v41) & 1) == 0)*(_BYTE *)(a1 + 273) = *(_BYTE *)(a1 + 272);
    v6 = LOBYTE(v41[0]) ^ 1;
    if (*(_BYTE *)(a1 + 337) && *(_BYTE *)(a1 + 273))
    {
      if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 224))
      {
        v15 = *(uint64_t **)(a1 + 304);
        v16 = *(uint64_t **)(a1 + 312);
        if (v15 != v16)
        {
          v17 = 0;
          v18 = 0;
          do
          {
            v19 = *v15++;
            v20 = sub_1C573615C(a2, v19, 0, a1, 1, 1);
            if (*((_BYTE *)v20 + 185))
              ++v17;
            else
              ++v18;
            if (*((unsigned __int8 *)v20 + 185) != *((unsigned __int8 *)v20 + 184))
              v6 = 1;
          }
          while (v15 != v16);
          if (v17)
            v21 = v18 == 0;
          else
            v21 = 1;
          if (!v21)
            *(_BYTE *)(a1 + 185) = *(_BYTE *)(a1 + 184);
        }
        v6 &= 1u;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 185) = *(_BYTE *)(a1 + 184);
    }
    v7 = v6 != 0;
  }
  v28 = 1;
  v27 = 1;
  v23 = a2;
  v24 = a1;
  v25 = &v27;
  v26 = &v28;
  v42 = 0xB00000005;
  v43 = 56;
  v41[0] = (int *)&v42;
  v41[1] = (int *)3;
  v8 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  if ((llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C573F1E0, (uint64_t)&v23, v8, a1, v41, &v22, 0, 0) & 1) != 0)
  {
    v9 = v22;
    if (!v22 && v28)
    {
      *(_BYTE *)(a1 + 56) = *(_BYTE *)(a1 + 57);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a1 + 121);
    }
    if (*(_BYTE *)(a1 + 256)
      && *(unsigned __int8 *)(a1 + 121) == *(unsigned __int8 *)(a1 + 120)
      && *(_BYTE *)(a1 + 57)
      && *(_BYTE *)(a1 + 121)
      && *(unsigned __int8 *)(a1 + 57) == *(unsigned __int8 *)(a1 + 56)
      && *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96)
      && *(_QWORD *)(a1 + 152) == *(_QWORD *)(a1 + 160))
    {
      *(_BYTE *)(a1 + 185) = *(_BYTE *)(a1 + 184);
    }
    if (v29 | v9)
      v10 = 1;
    else
      v10 = v7;
    if ((v10 & 1) == 0 && v27)
      *(_BYTE *)(a1 + 184) = *(_BYTE *)(a1 + 185);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v12 = sub_1C5737B08((uint64_t)v31, v11);
  }
  else
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  }
  v13 = v12;
  v31[0] = &off_1E817B7A8;
  v39 = &off_1E817B908;
  sub_1C629C730(v40);
  v36[9] = &off_1E817B7E8;
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  MEMORY[0x1CAA32FB4](v36[11], 8);
  v35[6] = &off_1E817B8A8;
  sub_1C6176BF8(v36);
  v34 = &off_1E817B848;
  sub_1C6176BF8(v35);
  v31[2] = &off_1E817B7E8;
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v31[4], 8);
  return v13;
}

_QWORD *sub_1C573E6EC(uint64_t a1)
{
  return sub_1C5739700((_QWORD *)(a1 - 32));
}

void sub_1C573E6F4(uint64_t a1)
{
  sub_1C5739700((_QWORD *)(a1 - 32));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C573E71C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 240) = sub_1C573E74C(a2, *(_QWORD *)(a1 + 8));
  return 0;
}

uint64_t sub_1C573E74C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = a1[3];
  if (!result)
    return 0;
  if (*(_BYTE *)(result + 16) != 84 || result - 32 != (_QWORD)a1)
    return 0;
  v5 = *(_DWORD *)(result + 20);
  if (v5 < 0 && (*(_QWORD *)(result - 32 * (v5 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0)
    return 0;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 120);
    if (!v6)
      return 0;
    v7 = *a1;
    if (!v7 || *(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 24) != *(_QWORD *)(result + 72))
      v7 = 0;
    if (v7 != v6)
      return 0;
  }
  return result;
}

uint64_t sub_1C573E7CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 248) = sub_1C573E74C(a2, *(_QWORD *)(a1 + 8));
  return 0;
}

void sub_1C573E800()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C573E814(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E817BB60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C573E84C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817BB60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::ValueHandleBase *sub_1C573E86C(uint64_t a1, _QWORD *a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  const llvm::APInt *v11;
  unint64_t v12;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v5 + 57))
    v6 = byte_1ED80DA08 == 0;
  else
    v6 = 0;
  if (!v6)
    return 0;
  v9 = *a3;
  v10 = v5 + 32;
  if (v9)
    llvm::Attributor::recordDependence(*(_QWORD *)(a1 + 16), v5, v9, 1);
  *a4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10) ^ 1;
  v12 = *a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)a2 & 3) == 0)
    v12 = *(_QWORD *)(v12 + 24);
  return llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)v12, 0, v11);
}

void sub_1C573E91C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C573E930(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E817BBA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C573E968(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817BBA8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::ValueHandleBase *sub_1C573E988(uint64_t a1, _QWORD *a2, const llvm::APInt *a3, char *a4)
{
  uint64_t v4;
  char v7;
  _QWORD *v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v4 + 185))
    return 0;
  if (*(_BYTE *)(v4 + 184))
  {
    v7 = 0;
  }
  else
  {
    a3 = *(const llvm::APInt **)a3;
    v7 = 1;
    if (a3)
      llvm::Attributor::recordDependence(*(_QWORD *)(a1 + 16), v4, (uint64_t)a3, 1);
  }
  *a4 = v7;
  v9 = (_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFFCLL);
  if ((~*(_DWORD *)a2 & 3) == 0)
    v9 = (_QWORD *)v9[3];
  if (*(_BYTE *)(v4 + 185))
    v10 = 2;
  else
    v10 = 1;
  return llvm::ConstantInt::getSigned((llvm::ConstantInt **)(**(_QWORD **)*v9 + 1912), v10, a3);
}

void sub_1C573EA40()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C573EA54(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E817BBF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C573EA8C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817BBF0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::ValueHandleBase *sub_1C573EAAC(uint64_t a1, _QWORD *a2, const llvm::APInt *a3, char *a4)
{
  uint64_t v4;
  char v7;
  unint64_t v9;

  v4 = *(_QWORD *)(a1 + 8);
  if (!*(_BYTE *)(v4 + 185))
    return 0;
  if (*(_BYTE *)(v4 + 184))
  {
    v7 = 0;
  }
  else
  {
    a3 = *(const llvm::APInt **)a3;
    v7 = 1;
    if (a3)
      llvm::Attributor::recordDependence(*(_QWORD *)(a1 + 16), v4, (uint64_t)a3, 1);
  }
  *a4 = v7;
  v9 = *a2 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)a2 & 3) == 0)
    v9 = *(_QWORD *)(v9 + 24);
  return llvm::ConstantInt::getBool(**(llvm::ConstantInt ***)v9, (llvm::LLVMContext *)(*(_BYTE *)(v4 + 185) == 0), a3);
}

uint64_t sub_1C573EB54(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v7;
  uint64_t v8;
  int v9;
  llvm::AbstractAttribute *v10;
  llvm::AbstractAttribute *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[7];

  v20[6] = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int8 *)(a2 + 16) - 37;
  if (v2 <= 0x33)
  {
    v5 = a1[1];
    if (v2 == 23)
    {
      if ((*(_WORD *)(a2 + 18) & 0x301) == 0)
        return 1;
      goto LABEL_7;
    }
    if (v2 != 24)
    {
      if (((1 << (*(_BYTE *)(a2 + 16) - 37)) & 0x808001C000001) == 0)
        return 1;
LABEL_7:
      v18 = (void *)a2;
      sub_1C509CEFC((_QWORD *)(v5 + 192), &v18);
      return 1;
    }
    v18 = v20;
    v19 = 0x600000000;
    llvm::getUnderlyingObjects(*(_QWORD *)(a2 - 32), (uint64_t)&v18, 0, (llvm::Value *)6);
    v7 = (char *)v18;
    if ((_DWORD)v19)
    {
      v8 = 0;
      while (*(_BYTE *)(*(_QWORD *)((char *)v18 + v8) + 16) == 59)
      {
        v8 += 8;
        if (8 * v19 == v8)
          goto LABEL_12;
      }
      v9 = 1;
      v10 = sub_1C5687414(*a1, *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56), 0, v5, 1, 0, 1);
      v7 = (char *)v18;
      if ((_DWORD)v19)
      {
        v11 = v10;
        v12 = 8 * v19;
        while (1)
        {
          v13 = *(unsigned __int8 *)(*(_QWORD *)v7 + 16);
          if (v13 < 0x1C)
            break;
          v14 = v13 - 33;
          v15 = v14 > 0x33;
          v16 = (1 << v14) & 0x8000000000041;
          v17 = v15 || v16 == 0;
          if (v17 || ((*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v11 + 112))(v11) & 1) == 0)
            break;
          v7 += 8;
          v12 -= 8;
          if (!v12)
          {
            v9 = 1;
            goto LABEL_24;
          }
        }
        v9 = 0;
LABEL_24:
        v7 = (char *)v18;
      }
    }
    else
    {
LABEL_12:
      v9 = 1;
    }
    if (v7 != (char *)v20)
      free(v7);
    if (!v9)
      goto LABEL_7;
  }
  return 1;
}

uint64_t sub_1C573ED48(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::AbstractAttribute *v6;
  llvm::AbstractAttribute *v7;
  unsigned __int8 *v8;
  unsigned __int8 *i;
  unint64_t v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  unint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 v22;
  uint64_t v24;
  void *v25[2];
  _BYTE v26[24];

  v3 = *a2;
  v24 = *a2;
  v25[0] = v26;
  v25[1] = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1C614C900((uint64_t)v25, (uint64_t)(a2 + 1));
    v3 = v24;
  }
  v4 = a1[2];
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 56);
  v6 = sub_1C573615C(*a1, v5, 0, 0, 2, 1);
  if (!*((_BYTE *)v6 + 337) || v5 == *(_QWORD *)(a1[1] + 120))
  {
    *(_BYTE *)(v4 + 337) = *(_BYTE *)(v4 + 336);
  }
  else
  {
    v7 = v6;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 328) + 48))(v4 + 328, 1);
    v8 = (unsigned __int8 *)*((_QWORD *)v7 + 46);
    for (i = (unsigned __int8 *)*((_QWORD *)v7 + 47); v8 != i; ++v8)
    {
      sub_1C629C7F8((uint64_t)v26, v4 + 344, v8);
      if (v26[16])
      {
        v11 = *(unsigned __int8 **)(v4 + 376);
        v10 = *(_QWORD *)(v4 + 384);
        if ((unint64_t)v11 >= v10)
        {
          v13 = *(_QWORD *)(v4 + 368);
          v14 = &v11[-v13];
          v15 = (uint64_t)&v11[-v13 + 1];
          if (v15 < 0)
            abort();
          v16 = v10 - v13;
          if (2 * v16 > v15)
            v15 = 2 * v16;
          if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
            v17 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
            v18 = (char *)operator new(v17);
          else
            v18 = 0;
          v19 = (char *)&v14[(_QWORD)v18];
          v20 = &v14[(_QWORD)v18];
          *v20 = *v8;
          v12 = v20 + 1;
          if (v11 != (unsigned __int8 *)v13)
          {
            v21 = &v11[~v13];
            do
            {
              v22 = *--v11;
              (v21--)[(_QWORD)v18] = v22;
            }
            while (v11 != (unsigned __int8 *)v13);
            v11 = *(unsigned __int8 **)(v4 + 368);
            v19 = v18;
          }
          *(_QWORD *)(v4 + 368) = v19;
          *(_QWORD *)(v4 + 376) = v12;
          *(_QWORD *)(v4 + 384) = &v18[v17];
          if (v11)
            operator delete(v11);
        }
        else
        {
          *v11 = *v8;
          v12 = v11 + 1;
        }
        *(_QWORD *)(v4 + 376) = v12;
      }
    }
  }
  if (v25[0] != v26)
    free(v25[0]);
  return 1;
}

void *sub_1C573EF28(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  size_t v8;
  void *result;
  size_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned __int8 **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = (v7 + 1);
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(v8, (std::align_val_t)1uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C629CA5C((_QWORD *)a1, v4, &v4[v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    return memset(result, 255, v10);
  return result;
}

uint64_t sub_1C573EFDC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::AbstractAttribute *v5;
  llvm::AbstractAttribute *v6;
  uint64_t v8;
  void *v9[2];
  uint64_t v10;

  v3 = *a2;
  v8 = *a2;
  v9[0] = &v10;
  v9[1] = 0;
  if (*((_DWORD *)a2 + 4))
  {
    sub_1C614C900((uint64_t)v9, (uint64_t)(a2 + 1));
    v3 = v8;
  }
  v4 = a1[1];
  v5 = sub_1C573615C(*a1, *(_QWORD *)(*(_QWORD *)(v3 + 40) + 56), 0, v4, 0, 1);
  if (*((_BYTE *)v5 + 273))
  {
    v6 = v5;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 + 264) + 48))(v4 + 264, 1);
    sub_1C573F0A4((_QWORD *)(v4 + 280), *((_QWORD **)v6 + 38), *((_QWORD **)v6 + 39));
  }
  else
  {
    *(_BYTE *)(v4 + 273) = *(_BYTE *)(v4 + 272);
  }
  if (v9[0] != &v10)
    free(v9[0]);
  return 1;
}

void sub_1C573F0A4(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  _BYTE v17[31];

  if (a2 != a3)
  {
    v4 = a2;
    do
    {
      sub_1C6288F94((uint64_t)a1, v4, (uint64_t)v17);
      if (v17[16])
      {
        v7 = (_QWORD *)a1[4];
        v6 = a1[5];
        if ((unint64_t)v7 >= v6)
        {
          v9 = (_QWORD *)a1[3];
          v10 = v7 - v9;
          v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 61)
            abort();
          v12 = v6 - (_QWORD)v9;
          if (v12 >> 2 > v11)
            v11 = v12 >> 2;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
            v13 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v13 = v11;
          if (v13)
          {
            if (v13 >> 61)
              sub_1C4764EE4();
            v14 = (char *)operator new(8 * v13);
          }
          else
          {
            v14 = 0;
          }
          v15 = &v14[8 * v10];
          *(_QWORD *)v15 = *v4;
          v8 = v15 + 8;
          if (v7 != v9)
          {
            do
            {
              v16 = *--v7;
              *((_QWORD *)v15 - 1) = v16;
              v15 -= 8;
            }
            while (v7 != v9);
            v7 = (_QWORD *)a1[3];
          }
          a1[3] = v15;
          a1[4] = v8;
          a1[5] = &v14[8 * v13];
          if (v7)
            operator delete(v7);
        }
        else
        {
          *v7 = *v4;
          v8 = v7 + 1;
        }
        a1[4] = v8;
      }
      ++v4;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1C573F1E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *i;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *j;
  unint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL *v35;
  BOOL v37;
  BOOL *v38;
  BOOL v40;
  _QWORD v43[2];
  uint64_t (**v44)();
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t (**v48)();
  _QWORD v49[8];
  void *v50[14];
  void *__p;
  void *v52;
  uint64_t (**v53)();
  uint64_t v54[6];

  v2 = a1[1];
  v3 = (unsigned __int8 *)sub_1C573615C(*a1, a2, 0, v2, 1, 1);
  v4 = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v3 + 48))(v3);
  v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v6 = v5;
  v7 = *(_QWORD *)(v4 + 208);
  if (v7)
    v5[26] = v7;
  v8 = *(_QWORD *)(v4 + 216);
  if (v8)
    v5[27] = v8;
  (*(void (**)(_QWORD *, _QWORD))(v5[18] + 48))(v5 + 18, *(unsigned __int8 *)(v4 + 153));
  v9 = *(_QWORD **)(v4 + 184);
  for (i = *(_QWORD **)(v4 + 192); v9 != i; ++v9)
  {
    sub_1C61DB390((uint64_t)(v6 + 20), v9, (uint64_t)v43);
    if ((_BYTE)v44)
    {
      v12 = (_QWORD *)v6[24];
      v11 = v6[25];
      if ((unint64_t)v12 >= v11)
      {
        v14 = (_QWORD *)v6[23];
        v15 = v12 - v14;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
LABEL_66:
          abort();
        v17 = v11 - (_QWORD)v14;
        if (v17 >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 >> 61)
LABEL_67:
            sub_1C4764EE4();
          v19 = (char *)operator new(8 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[8 * v15];
        *(_QWORD *)v20 = *v9;
        v13 = v20 + 8;
        if (v12 != v14)
        {
          do
          {
            v21 = *--v12;
            *((_QWORD *)v20 - 1) = v21;
            v20 -= 8;
          }
          while (v12 != v14);
          v12 = (_QWORD *)v6[23];
        }
        v6[23] = v20;
        v6[24] = v13;
        v6[25] = &v19[8 * v18];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v12 = *v9;
        v13 = v12 + 1;
      }
      v6[24] = v13;
    }
  }
  (*(void (**)(_QWORD *, _QWORD))(v6[2] + 48))(v6 + 2, *(unsigned __int8 *)(v4 + 25));
  sub_1C573F0A4(v6 + 4, *(_QWORD **)(v4 + 56), *(_QWORD **)(v4 + 64));
  (*(void (**)(_QWORD *, _QWORD))(v6[10] + 48))(v6 + 10, *(unsigned __int8 *)(v4 + 89));
  v22 = *(uint64_t **)(v4 + 120);
  for (j = *(uint64_t **)(v4 + 128); v22 != j; ++v22)
  {
    sub_1C61B7564((uint64_t)v43, (uint64_t)(v6 + 12), v22);
    if ((_BYTE)v44)
    {
      v25 = (uint64_t *)v6[16];
      v24 = v6[17];
      if ((unint64_t)v25 >= v24)
      {
        v27 = (_QWORD *)v6[15];
        v28 = v25 - v27;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61)
          goto LABEL_66;
        v30 = v24 - (_QWORD)v27;
        if (v30 >> 2 > v29)
          v29 = v30 >> 2;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          if (v31 >> 61)
            goto LABEL_67;
          v32 = (char *)operator new(8 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = (uint64_t *)&v32[8 * v28];
        *v33 = *v22;
        v26 = v33 + 1;
        if (v25 != v27)
        {
          do
          {
            v34 = *--v25;
            *--v33 = v34;
          }
          while (v25 != v27);
          v25 = (uint64_t *)v6[15];
        }
        v6[15] = v33;
        v6[16] = v26;
        v6[17] = &v32[8 * v31];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v25 = *v22;
        v26 = v25 + 1;
      }
      v6[16] = v26;
    }
  }
  sub_1C5737C10((uint64_t)v43, (uint64_t)v6);
  v43[0] = &off_1E817B7A8;
  v53 = &off_1E817B908;
  sub_1C629C730(v54);
  v50[9] = &off_1E817B7E8;
  if (__p)
  {
    v52 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v50[11], 8);
  v49[6] = &off_1E817B8A8;
  sub_1C6176BF8(v50);
  v48 = &off_1E817B848;
  sub_1C6176BF8(v49);
  v44 = &off_1E817B7E8;
  if (v46)
  {
    v47 = v46;
    operator delete(v46);
  }
  MEMORY[0x1CAA32FB4](v45, 8);
  v35 = (BOOL *)a1[2];
  v37 = v3[185] == v3[184] && *v35;
  *v35 = v37;
  v38 = (BOOL *)a1[3];
  v40 = v3[57] == v3[56] && *v38;
  *v38 = v40;
  if (v3[121] != v3[120])
    v40 = 0;
  *v38 = v40;
  return 1;
}

uint64_t sub_1C573F5B4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  int v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t *v11;
  uint64_t v12;
  _BOOL4 v13;
  char v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  void *p_p;
  void **v21;
  uint64_t *v22;
  const void *v23;
  size_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  void *v28[2];
  char v29;
  __int128 v30;
  void *__p;
  __int128 v32;

  v3 = sub_1C573E74C(a2, *a1);
  if (!v3)
    return 0;
  v5 = *(_QWORD *)(a1[1] + 72);
  *(_QWORD *)&v30 = v3 | 1;
  *((_QWORD *)&v30 + 1) = 0;
  __p = &unk_1C866042A;
  v32 = v3 | 1uLL;
  v28[0] = 0;
  if ((sub_1C62860C0((uint64_t *)(v5 + 32), (uint64_t)&__p, (uint64_t **)v28) & 1) != 0)
  {
    if (*((_QWORD *)v28[0] + 3))
      return 0;
  }
  if (sub_1C6283CA4(&v30) == 3)
  {
    v6 = sub_1C484358C(*(_QWORD *)(v5 + 24), 72, 3);
    *(_OWORD *)(v6 + 16) = v30;
    *(_WORD *)(v6 + 40) = 256;
    *(_QWORD *)v6 = &off_1E817BC38;
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 32) = &unk_1E817BCC0;
    *(_BYTE *)(v6 + 48) = 0;
    *(_BYTE *)(v6 + 56) = 0;
  }
  else
  {
    v6 = 0;
  }
  __p = &unk_1C866042A;
  v32 = *(_OWORD *)(v6 + 16);
  sub_1C628623C((uint64_t *)(v5 + 32), (uint64_t)&__p)[3] = v6;
  if (*(_DWORD *)(v5 + 4368) <= 1u)
    sub_1C6285820(v5 + 104, v6);
  v7 = *(uint64_t **)(v5 + 5480);
  if (v7)
  {
    __p = &unk_1C866042A;
    v28[0] = 0;
    v8 = sub_1C614F7B0(v7, &__p, v28) ^ 1;
  }
  else
  {
    v8 = 0;
  }
  v9 = v30 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v30 & 3) == 0)
    v9 = *(_QWORD *)(v9 + 24);
  v10 = *(unsigned __int8 *)(v9 + 16);
  if (!*(_BYTE *)(v9 + 16))
    goto LABEL_20;
  if (v10 == 21)
  {
    v11 = (unint64_t *)(v9 + 24);
  }
  else
  {
    if (v10 < 0x1C)
    {
      v9 = 0;
      goto LABEL_27;
    }
    v11 = (unint64_t *)(*(_QWORD *)(v9 + 40) + 56);
  }
  v9 = *v11;
  if (!*v11)
  {
LABEL_27:
    v14 = 1;
    goto LABEL_32;
  }
LABEL_20:
  v12 = *(_QWORD *)(v9 + 112);
  if (v12 && ((*(_BYTE *)(v12 + 14) & 2) != 0 || (*(_BYTE *)(v12 + 17) & 8) != 0))
  {
    v13 = 1;
  }
  else if (*(_BYTE *)(v5 + 5464))
  {
    v13 = 0;
  }
  else
  {
    v15 = *(_QWORD **)(v5 + 88);
    v16 = sub_1C477672C((uint64_t)v15, v9);
    v17 = v15[1];
    v18 = 16;
    if (v17 == *v15)
      v18 = 20;
    v13 = v16 == (_QWORD *)(v17 + 8 * *(unsigned int *)((char *)v15 + v18));
  }
  v14 = 0;
  LOBYTE(v8) = (v13 | v8) != 0;
LABEL_32:
  if ((v8 & 1) != 0 || *(_DWORD *)(v5 + 4372) > llvm::MaxInitializationChainLength)
    goto LABEL_59;
  (*(void (**)(void **__return_ptr, unint64_t))(*(_QWORD *)v6 + 72))(v28, v6);
  if (v29 >= 0)
    v19 = v29 & 0x7F;
  else
    v19 = (size_t)v28[1];
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v19 + 12);
  if (v32 < 0)
    p_p = __p;
  if (v19)
  {
    if (v29 >= 0)
      v21 = v28;
    else
      v21 = (void **)v28[0];
    memmove(p_p, v21, v19);
  }
  strcpy((char *)p_p + v19, "::initialize");
  v22 = (uint64_t *)off_1EF8EEB50();
  if (*v22)
  {
    if (v32 >= 0)
      v23 = &__p;
    else
      v23 = __p;
    if (v32 >= 0)
      v24 = HIBYTE(v32) & 0x7F;
    else
      v24 = v32;
    llvm::timeTraceProfilerBegin(v23, v24, (uint64_t)"", 0);
  }
  if (SHIBYTE(v32) < 0)
    operator delete(__p);
  if (v29 < 0)
    operator delete(v28[0]);
  ++*(_DWORD *)(v5 + 4372);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v5);
  --*(_DWORD *)(v5 + 4372);
  if (*v22)
  {
    sub_1C6392DC0(*v22);
    if ((v14 & 1) != 0)
      goto LABEL_58;
  }
  else if ((v14 & 1) != 0)
  {
    goto LABEL_58;
  }
  v26 = *(uint64_t **)(v5 + 80);
  __p = (void *)v9;
  v28[0] = 0;
  if ((sub_1C614F7B0(v26, &__p, v28) & 1) == 0)
  {
    v27 = *(uint64_t **)(v5 + 80);
    __p = (void *)sub_1C5676C10((llvm::IRPosition *)&v30);
    v28[0] = 0;
    if (!sub_1C614F7B0(v27, &__p, v28))
      goto LABEL_59;
  }
LABEL_58:
  if (*(_DWORD *)(v5 + 4368) == 2)
  {
LABEL_59:
    v25 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v6 + 40))(v6);
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
  }
  return 0;
}

_QWORD *sub_1C573F9AC(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C573F9E0(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C573FA24(_DWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t result;
  uint64_t (**v9)(void);
  uint64_t v10[2];
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (byte_1ED80D948)
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 112))(a1);
  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 4));
  v5 = a2[11];
  v11[0] = 0;
  if ((sub_1C6144BDC(*(_QWORD *)(v5 + 29184), *(_DWORD *)(v5 + 29200), v4, v11) & 1) != 0)
    v6 = v11[0];
  else
    v6 = *(_QWORD *)(v5 + 29184) + 16 * *(unsigned int *)(v5 + 29200);
  a1[16] = *(_DWORD *)(v6 + 8);
  v10[0] = sub_1C6284150((llvm::IRPosition *)(a1 + 4)) | 1;
  v10[1] = 0;
  v11[0] = &off_1E817BD20;
  v11[1] = a1;
  v11[2] = a2;
  v12 = v11;
  v7 = sub_1C62908E4(a2, v10);
  sub_1C6290848((uint64_t)(v7 + 2), (uint64_t)v11);
  result = (uint64_t)v12;
  if (v12 == v11)
  {
    v9 = (uint64_t (**)(void))(v11[0] + 32);
  }
  else
  {
    if (!v12)
      return result;
    v9 = (uint64_t (**)(void))(*v12 + 40);
  }
  return (*v9)();
}

void sub_1C573FB60(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string v11;
  std::string::value_type __s[23];
  char v13;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32) & 1) == 0)
  {
    a2[23] = 9;
    strcpy(a2, "<invalid>");
    return;
  }
  v13 = 18;
  strcpy(__s, "simplified value: ");
  if (!*(_BYTE *)(a1 + 56))
  {
    *((_BYTE *)&v11.__r_.__value_.__s + 23) = 4;
    strcpy((char *)&v11, "none");
LABEL_12:
    v8 = __s;
    v9 = 18;
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(a1 + 48);
  if (!v4)
  {
    *((_BYTE *)&v11.__r_.__value_.__s + 23) = 7;
    LODWORD(v11.__r_.__value_.__l.__data_) = 1819047278;
    v7 = 1920233580;
LABEL_11:
    *(_DWORD *)((char *)v11.__r_.__value_.__r.__words + 3) = v7;
    v11.__r_.__value_.__s.__data_[7] = 0;
    goto LABEL_12;
  }
  if (*(_BYTE *)(v4 + 16) != 16)
  {
    *((_BYTE *)&v11.__r_.__value_.__s + 23) = 7;
    LODWORD(v11.__r_.__value_.__l.__data_) = 1852534389;
    v7 = 1853321070;
    goto LABEL_11;
  }
  v5 = *(_DWORD *)(v4 + 32);
  if (v5 > 0x40)
    v6 = **(_QWORD **)(v4 + 24);
  else
    v6 = (uint64_t)(*(_QWORD *)(v4 + 24) << -(char)v5) >> -(char)v5;
  std::to_string(&v11, v6);
  if (v13 >= 0)
    v8 = __s;
  else
    v8 = *(std::string::value_type **)__s;
  if (v13 >= 0)
    v9 = v13 & 0x7F;
  else
    v9 = *(_QWORD *)&__s[8];
LABEL_13:
  v10 = std::string::insert(&v11, 0, v8, v9);
  *(std::string *)a2 = *v10;
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(*(void **)__s);
}

void sub_1C573FD04(char *a1@<X8>)
{
  a1[23] = 17;
  strcpy(a1, "AAFoldRuntimeCall");
}

void *sub_1C573FD28()
{
  return &unk_1C866042A;
}

uint64_t sub_1C573FD34(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  unint64_t v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t (*v10)(_QWORD, _QWORD);
  llvm::OptimizationRemarkEmitter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t ***v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ****v23;
  uint64_t ***v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t ****v31;
  uint64_t ***v32;
  int v33;
  int v34;
  uint64_t ***v35;
  char *v36;
  uint64_t **v37;
  uint64_t **v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t ***v41;
  char *v42;
  uint64_t **v43;
  uint64_t **v44;
  char *v45;
  unint64_t v46;
  void **v47;
  char *v48;
  unint64_t v49;
  void **v50;
  char *v51;
  unint64_t v52;
  void **v53;
  std::string v54;
  void *__p;
  char v56;
  void *v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t (**v60)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v61;
  char v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  char v68;
  char v69;
  void *v70;
  uint64_t v71;
  _BYTE v72[260];
  int v73;
  uint64_t v74;
  _OWORD v75[5];
  void *v76;
  unsigned int v77;
  _QWORD v78[35];

  v78[34] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 56) || !*(_QWORD *)(a1 + 48))
    return 1;
  v5 = sub_1C5676CEC((_DWORD *)(a1 + 16));
  sub_1C6290C00((uint64_t)a2, v5, *(llvm::Value **)(a1 + 48), 1);
  sub_1C6290278((uint64_t)a2, v5);
  v6 = *(unsigned __int8 *)(v5 + 16) - 33;
  v7 = v6 > 0x33;
  v8 = (1 << v6) & 0x8000000000041;
  if (v7 || v8 == 0)
    return 0;
  if (!byte_1ED80DDC8)
    return 0;
  v10 = (uint64_t (*)(_QWORD, _QWORD))a2[687];
  if (!v10)
    return 0;
  v11 = (llvm::OptimizationRemarkEmitter *)v10(a2[688], *(_QWORD *)(*(_QWORD *)(v5 + 40) + 56));
  v12 = ****(_QWORD ****)v11;
  if (*(_QWORD *)(v12 + 128)
    || (result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v12 + 72) + 48))(*(_QWORD *)(v12 + 72)),
        (_DWORD)result))
  {
    v13 = a2[689];
    v14 = *(_QWORD *)(*(_QWORD *)(v5 + 40) + 56);
    llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v75, (const llvm::DebugLoc *)(v5 + 48));
    v15 = *(_QWORD *)(v5 + 40);
    v61 = 9;
    v62 = 2;
    v63 = v14;
    v64 = v75[0];
    v65 = v13;
    v66 = "OMP180";
    v67 = 6;
    v68 = 0;
    v69 = 0;
    v70 = v72;
    v71 = 0x400000000;
    v72[256] = 0;
    v73 = -1;
    v74 = v15;
    v60 = &off_1E814E500;
    v16 = *(_QWORD *)(a1 + 48);
    v17 = *(unsigned __int8 *)(v16 + 16);
    *(_QWORD *)&v75[0] = "Replacing OpenMP runtime call ";
    *((_QWORD *)&v75[0] + 1) = 30;
    sub_1C53B17B4((uint64_t)&v70, (const void **)v75);
    v18 = *(uint64_t ****)(v5 - 32);
    if (v16 && v17 == 16)
    {
      if (!v18 || *((_BYTE *)v18 + 16) || v18[3] != *(uint64_t ***)(v5 + 72))
        v18 = 0;
      if ((*((_BYTE *)v18 + 23) & 0x10) == 0)
      {
        v37 = 0;
        v36 = &byte_1C871356D;
        goto LABEL_39;
      }
      v19 = ***v18;
      v20 = *(_QWORD *)(v19 + 152);
      v21 = *(unsigned int *)(v19 + 168);
      if ((_DWORD)v21)
      {
        LODWORD(v22) = (v21 - 1) & ((v18 >> 4) ^ (v18 >> 9));
        v23 = (uint64_t ****)(v20 + 16 * v22);
        v24 = *v23;
        if (*v23 == v18)
        {
LABEL_38:
          v35 = v23[1];
          v38 = *v35;
          v36 = (char *)(v35 + 2);
          v37 = v38;
LABEL_39:
          *(_QWORD *)&v75[0] = v36;
          *((_QWORD *)&v75[0] + 1) = v37;
          sub_1C53B17B4((uint64_t)&v70, (const void **)v75);
          *(_QWORD *)&v75[0] = " with ";
          *((_QWORD *)&v75[0] + 1) = 6;
          sub_1C53B17B4((uint64_t)&v70, (const void **)v75);
          v39 = (unint64_t *)(v16 + 24);
          if (*(_DWORD *)(v16 + 32) >= 0x41u)
            v39 = (unint64_t *)*v39;
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v54, "FoldedValue", 0xBuLL, *v39);
          v40 = sub_1C47E3888((uint64_t)&v60, (uint64_t)&v54);
          *(_QWORD *)&v75[0] = ".";
          *((_QWORD *)&v75[0] + 1) = 1;
          sub_1C53B17B4(v40 + 80, (const void **)v75);
          sub_1C61998EC((uint64_t)v75, v40);
          *(_QWORD *)&v75[0] = &off_1E814E500;
          if (v56 < 0)
            operator delete(__p);
          if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v54.__r_.__value_.__l.__data_);
          goto LABEL_48;
        }
        v25 = 1;
        while (v24 != (uint64_t ***)-4096)
        {
          v26 = v22 + v25++;
          v22 = v26 & (v21 - 1);
          v24 = *(uint64_t ****)(v20 + 16 * v22);
          if (v24 == v18)
          {
            v23 = (uint64_t ****)(v20 + 16 * v22);
            goto LABEL_38;
          }
        }
      }
      v23 = (uint64_t ****)(v20 + 16 * v21);
      goto LABEL_38;
    }
    if (!v18 || *((_BYTE *)v18 + 16) || v18[3] != *(uint64_t ***)(v5 + 72))
      v18 = 0;
    if ((*((_BYTE *)v18 + 23) & 0x10) == 0)
    {
      v43 = 0;
      v42 = &byte_1C871356D;
      goto LABEL_47;
    }
    v27 = ***v18;
    v28 = *(_QWORD *)(v27 + 152);
    v29 = *(unsigned int *)(v27 + 168);
    if ((_DWORD)v29)
    {
      LODWORD(v30) = (v29 - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v31 = (uint64_t ****)(v28 + 16 * v30);
      v32 = *v31;
      if (*v31 == v18)
      {
LABEL_46:
        v41 = v31[1];
        v44 = *v41;
        v42 = (char *)(v41 + 2);
        v43 = v44;
LABEL_47:
        *(_QWORD *)&v75[0] = v42;
        *((_QWORD *)&v75[0] + 1) = v43;
        sub_1C53B17B4((uint64_t)&v70, (const void **)v75);
        *(_QWORD *)&v75[0] = ".";
        *((_QWORD *)&v75[0] + 1) = 1;
        sub_1C53B17B4((uint64_t)&v70, (const void **)v75);
        sub_1C61998EC((uint64_t)v75, (uint64_t)&v60);
        *(_QWORD *)&v75[0] = &off_1E814E500;
LABEL_48:
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)" [";
        v54.__r_.__value_.__l.__size_ = 2;
        sub_1C53B17B4((uint64_t)&v76, (const void **)&v54.__r_.__value_.__l.__data_);
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)"OMP180";
        v54.__r_.__value_.__l.__size_ = 6;
        sub_1C53B17B4((uint64_t)&v76, (const void **)&v54.__r_.__value_.__l.__data_);
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)"]";
        v54.__r_.__value_.__l.__size_ = 1;
        sub_1C53B17B4((uint64_t)&v76, (const void **)&v54.__r_.__value_.__l.__data_);
        sub_1C61998EC((uint64_t)&v54, (uint64_t)v75);
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E500;
        *(_QWORD *)&v75[0] = &off_1E814E790;
        v45 = (char *)v76;
        if (v77)
        {
          v46 = (unint64_t)v77 << 6;
          do
          {
            v47 = (void **)&v45[v46];
            if (v45[v46 - 17] < 0)
              operator delete(*(v47 - 5));
            if (*((char *)v47 - 41) < 0)
              operator delete(*(v47 - 8));
            v46 -= 64;
          }
          while (v46);
          v45 = (char *)v76;
        }
        if (v45 != (char *)v78)
          free(v45);
        v60 = &off_1E814E790;
        v48 = (char *)v70;
        if ((_DWORD)v71)
        {
          v49 = (unint64_t)v71 << 6;
          do
          {
            v50 = (void **)&v48[v49];
            if (v48[v49 - 17] < 0)
              operator delete(*(v50 - 5));
            if (*((char *)v50 - 41) < 0)
              operator delete(*(v50 - 8));
            v49 -= 64;
          }
          while (v49);
          v48 = (char *)v70;
        }
        if (v48 != v72)
          free(v48);
        llvm::OptimizationRemarkEmitter::emit(v11, (llvm::DiagnosticInfoOptimizationBase *)&v54);
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E814E790;
        v51 = (char *)v57;
        if (v58)
        {
          v52 = (unint64_t)v58 << 6;
          do
          {
            v53 = (void **)&v51[v52];
            if (v51[v52 - 17] < 0)
              operator delete(*(v53 - 5));
            if (*((char *)v53 - 41) < 0)
              operator delete(*(v53 - 8));
            v52 -= 64;
          }
          while (v52);
          v51 = (char *)v57;
        }
        if (v51 != (char *)&v59)
          free(v51);
        return 0;
      }
      v33 = 1;
      while (v32 != (uint64_t ***)-4096)
      {
        v34 = v30 + v33++;
        v30 = v34 & (v29 - 1);
        v32 = *(uint64_t ****)(v28 + 16 * v30);
        if (v32 == v18)
        {
          v31 = (uint64_t ****)(v28 + 16 * v30);
          goto LABEL_46;
        }
      }
    }
    v31 = (uint64_t ****)(v28 + 16 * v29);
    goto LABEL_46;
  }
  return result;
}

uint64_t sub_1C5740330(uint64_t a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  char *v8;
  size_t v9;
  unint64_t v10;
  unsigned int v11;
  unint64_t *v12;
  int v14;
  uint64_t v15;
  llvm::AbstractAttribute *v16;
  const llvm::APInt *v17;
  uint64_t *v18;
  uint64_t *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  llvm::AbstractAttribute *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  llvm::ConstantInt *v28;
  unint64_t v29;
  char v30;
  llvm::ValueHandleBase *v31;
  int v32;
  llvm::AbstractAttribute *v33;
  uint64_t *v34;
  uint64_t *v35;
  int v36;
  int v37;
  llvm::AbstractAttribute *v38;
  const llvm::APInt *v39;
  unint64_t v40;
  uint64_t v41;
  llvm::ConstantInt *v42;
  unint64_t v43;
  char v44;
  uint64_t v45;
  llvm::ValueHandleBase *v46;
  int v47;
  int v48;
  llvm::ValueHandleBase *v49;
  int v50;
  _QWORD *v51;
  unint64_t v52;
  llvm::AbstractAttribute *v53;
  unint64_t v54;
  uint64_t v55;
  const llvm::APInt *v56;
  llvm::ConstantInt *v57;
  unsigned int v58;
  char v59;
  llvm::ValueHandleBase *v60;
  llvm::ValueHandleBase *v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int v68;

  v4 = *(_DWORD *)(a1 + 64);
  if (v4 > 163)
  {
    if (v4 != 164)
    {
      if (v4 != 165)
      {
        v49 = *(llvm::ValueHandleBase **)(a1 + 48);
        v50 = *(unsigned __int8 *)(a1 + 56);
        v51 = (_QWORD *)(a1 + 16);
        v52 = sub_1C6284150((llvm::IRPosition *)(a1 + 16));
        v53 = sub_1C57248C0(a2, *(_QWORD *)(*(_QWORD *)(v52 + 40) + 56), 0, a1, 0);
        if (((*(uint64_t (**)(uint64_t))(*((_QWORD *)v53 + 4) + 16))((uint64_t)v53 + 32) & 1) != 0)
        {
          v54 = *v51 & 0xFFFFFFFFFFFFFFFCLL;
          if ((~*(_DWORD *)v51 & 3) == 0)
            v54 = *(_QWORD *)(v54 + 24);
          v55 = **(_QWORD **)v54;
          if ((*(unsigned int (**)(llvm::AbstractAttribute *, unint64_t))(*(_QWORD *)v53 + 112))(v53, v52))
          {
            v57 = *(llvm::ConstantInt **)(*(_QWORD *)v55 + 1912);
            v58 = *(_DWORD *)(*(_QWORD *)v55 + 1920);
            v68 = v58 >> 8;
            if (v58 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v67, 1, 0);
            }
            else
            {
              if (v58 <= 0xFF)
                v59 = 0;
              else
                v59 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v58);
              v67 = v59 & 1;
            }
            v60 = llvm::ConstantInt::get(v57, (llvm::LLVMContext *)&v67, v56);
            if (v68 >= 0x41 && v67)
              MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
            if (!*(_BYTE *)(a1 + 56))
              *(_BYTE *)(a1 + 56) = 1;
            *(_QWORD *)(a1 + 48) = v60;
            if (!v50)
              return 0;
            return v60 == v49;
          }
        }
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
      }
      v5 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
      if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
        v5 = *(_QWORD *)(v5 + 24);
      v6 = *(unsigned __int8 *)(v5 + 16);
      if (*(_BYTE *)(v5 + 16))
      {
        if (v6 == 21)
        {
          v7 = (unint64_t *)(v5 + 24);
LABEL_20:
          v5 = *v7;
          goto LABEL_25;
        }
        if (v6 >= 0x1C)
        {
          v7 = (unint64_t *)(*(_QWORD *)(v5 + 40) + 56);
          goto LABEL_20;
        }
        v5 = 0;
      }
LABEL_25:
      v14 = *(unsigned __int8 *)(a1 + 56);
      v15 = *(_QWORD *)(a1 + 48);
      v16 = sub_1C573615C(a2, v5, 0, a1, 0, 1);
      if (*((_BYTE *)v16 + 273))
      {
        v66 = v14;
        v19 = (uint64_t *)*((_QWORD *)v16 + 38);
        v18 = (uint64_t *)*((_QWORD *)v16 + 39);
        if (v19 != v18)
        {
          v20 = 0;
          v21 = 0;
          v22 = 0;
          v23 = 0;
          while (1)
          {
            v24 = sub_1C573615C(a2, *v19, 0, a1, 0, 1);
            if (((*(uint64_t (**)(uint64_t))(*((_QWORD *)v24 + 4) + 16))((uint64_t)v24 + 32) & 1) == 0)
              break;
            if (*((_BYTE *)v24 + 185))
            {
              if (*((_BYTE *)v24 + 184))
                ++v21;
              else
                ++v20;
            }
            else if (*((_BYTE *)v24 + 184))
            {
              ++v22;
            }
            else
            {
              ++v23;
            }
            if (++v19 == v18)
              goto LABEL_39;
          }
          if (!*(_BYTE *)(a1 + 56))
            *(_BYTE *)(a1 + 56) = 1;
          *(_QWORD *)(a1 + 48) = 0;
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
        }
        v23 = 0;
        v22 = 0;
        v21 = 0;
        v20 = 0;
LABEL_39:
        if (v20 + v21 && v22 != -v23)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
        v25 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
        if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
          v25 = *(_QWORD *)(v25 + 24);
        v26 = **(uint64_t ***)v25;
        if (v20 | v21)
        {
          v27 = *v26;
          v28 = *(llvm::ConstantInt **)(v27 + 1912);
          v29 = *(unsigned int *)(v27 + 1920);
          v68 = v29 >> 8;
          if (v29 >> 8 <= 0x40)
          {
            if (v29 <= 0xFF)
              v30 = 0;
            else
              v30 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v29);
            v67 = v30 & 1;
            goto LABEL_73;
          }
          v64 = 1;
        }
        else
        {
          if (!(v23 | v22))
          {
            v48 = *(unsigned __int8 *)(a1 + 56);
LABEL_100:
            if (!v48 || !v66)
              return (v66 != 0) ^ (v48 == 0);
            return *(_QWORD *)(a1 + 48) == v15;
          }
          v45 = *v26;
          v28 = *(llvm::ConstantInt **)(v45 + 1912);
          v68 = *(_DWORD *)(v45 + 1920) >> 8;
          if (v68 <= 0x40)
          {
            v67 = 0;
            goto LABEL_73;
          }
          v64 = 0;
        }
        llvm::APInt::initSlowCase((llvm::APInt *)&v67, v64, 0);
LABEL_73:
        v46 = llvm::ConstantInt::get(v28, (llvm::LLVMContext *)&v67, v17);
        if (v68 >= 0x41 && v67)
          MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
        v47 = *(unsigned __int8 *)(a1 + 56);
        *(_QWORD *)(a1 + 48) = v46;
        v48 = 1;
        if (!v47)
          *(_BYTE *)(a1 + 56) = 1;
        goto LABEL_100;
      }
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    }
    v10 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
      v10 = *(_QWORD *)(v10 + 24);
    v11 = *(unsigned __int8 *)(v10 + 16);
    if (*(_BYTE *)(v10 + 16))
    {
      if (v11 == 21)
      {
        v12 = (unint64_t *)(v10 + 24);
      }
      else
      {
        if (v11 < 0x1C)
        {
          v10 = 0;
          goto LABEL_53;
        }
        v12 = (unint64_t *)(*(_QWORD *)(v10 + 40) + 56);
      }
      v10 = *v12;
    }
LABEL_53:
    v31 = *(llvm::ValueHandleBase **)(a1 + 48);
    v32 = *(unsigned __int8 *)(a1 + 56);
    v33 = sub_1C573615C(a2, v10, 0, a1, 0, 1);
    if (!*((_BYTE *)v33 + 337) || !*((_BYTE *)v33 + 273))
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    v34 = (uint64_t *)*((_QWORD *)v33 + 38);
    v35 = (uint64_t *)*((_QWORD *)v33 + 39);
    if (v34 == v35)
      return 1;
    v36 = 0;
    v37 = 0;
    do
    {
      v38 = sub_1C573615C(a2, *v34, 0, a1, 0, 1);
      if (!*((_BYTE *)v38 + 185))
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
      v37 += *((unsigned __int8 *)v38 + 184);
      if (!*((_BYTE *)v38 + 184))
        ++v36;
      ++v34;
    }
    while (v34 != v35);
    v40 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
    if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
      v40 = *(_QWORD *)(v40 + 24);
    v41 = ***(_QWORD ***)v40;
    v42 = *(llvm::ConstantInt **)(v41 + 1912);
    if (v36 | v37)
    {
      v43 = *(unsigned int *)(v41 + 1920);
      v68 = v43 >> 8;
      if (v43 >> 8 <= 0x40)
      {
        if (v43 <= 0xFF)
          v44 = 0;
        else
          v44 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v43);
        v67 = v44 & 1;
LABEL_93:
        v62 = llvm::ConstantInt::get(v42, (llvm::LLVMContext *)&v67, v39);
        if (v68 >= 0x41 && v67)
          MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
        v63 = *(unsigned __int8 *)(a1 + 56);
        *(_QWORD *)(a1 + 48) = v62;
        if (!v63)
          *(_BYTE *)(a1 + 56) = 1;
        if (v32)
          return v62 == v31;
        return 0;
      }
      v65 = 1;
    }
    else
    {
      v68 = *(_DWORD *)(v41 + 1920) >> 8;
      if (v68 <= 0x40)
      {
        v67 = 0;
        goto LABEL_93;
      }
      v65 = 0;
    }
    llvm::APInt::initSlowCase((llvm::APInt *)&v67, v65, 0);
    goto LABEL_93;
  }
  if (v4 == 12)
  {
    v8 = "omp_target_num_teams";
    v9 = 20;
  }
  else
  {
    v8 = "omp_target_thread_limit";
    v9 = 23;
  }
  return sub_1C5740B18(a1, a2, v8, v9);
}

uint64_t sub_1C5740994(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 56))
    *(_BYTE *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a1 + 40);
  return 0;
}

uint64_t *sub_1C57409B8(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C57409D0(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5740A18(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a1 + 8);
  return 0;
}

void sub_1C5740A40()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C5740A54(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E817BD20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C5740A8C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E817BD20;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5740AAC(uint64_t a1, uint64_t a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t v6;
  uint64_t v7;

  v6 = *a3;
  v7 = *(_QWORD *)(a1 + 8);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 + 32) + 24))(v7 + 32) & 1) == 0)
  {
    *a4 = 1;
    if (v6)
      llvm::Attributor::recordDependence(*(_QWORD *)(a1 + 16), v7, v6, 1);
  }
  return *(_QWORD *)(v7 + 48);
}

uint64_t sub_1C5740B18(uint64_t a1, uint64_t a2, _QWORD *a3, size_t a4)
{
  unint64_t v8;
  unsigned int v9;
  unint64_t *v10;
  int v11;
  uint64_t v12;
  llvm::AbstractAttribute *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  int i;
  int v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  int v34;
  int v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  std::string::size_type v40;
  void *p_str;
  const llvm::APInt *v42;
  int v43;
  uint64_t v44;
  int v46;
  unint64_t v47;
  uint64_t v48;
  llvm::ConstantInt *v49;
  unint64_t v50;
  unint64_t v51;
  llvm::ValueHandleBase *v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  size_t __n;
  uint64_t v58;
  std::string __str;

  v8 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v8 = *(_QWORD *)(v8 + 24);
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (!*(_BYTE *)(v8 + 16))
    goto LABEL_10;
  if (v9 == 21)
  {
    v10 = (unint64_t *)(v8 + 24);
  }
  else
  {
    if (v9 < 0x1C)
    {
      v8 = 0;
      goto LABEL_10;
    }
    v10 = (unint64_t *)(*(_QWORD *)(v8 + 40) + 56);
  }
  v8 = *v10;
LABEL_10:
  v11 = *(unsigned __int8 *)(a1 + 56);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = sub_1C573615C(a2, v8, 0, a1, 0, 1);
  if (!*((_BYTE *)v13 + 273))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v14 = (uint64_t *)*((_QWORD *)v13 + 38);
  v15 = (uint64_t *)*((_QWORD *)v13 + 39);
  if (v14 == v15)
  {
    v46 = *(unsigned __int8 *)(a1 + 56);
    goto LABEL_64;
  }
  v54 = v12;
  __n = a4;
  v16 = (uint64_t)a3 + a4;
  v55 = v11;
  v56 = -1;
  do
  {
    v17 = *v14;
    v18 = *(_QWORD *)(*v14 + 112);
    if (!v18)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    if (!*(_DWORD *)(v18 + 8))
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    v19 = *(_QWORD *)(v18 + 40);
    if (!v19)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    v20 = *(_DWORD *)(v19 + 40);
    if (!v20)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    v21 = *(_QWORD *)(v19 + 24);
    v58 = v16;
    v22 = sub_1C5E3DF4C(a3, v16);
    v23 = v20 - 1;
    for (i = 1; ; ++i)
    {
      v25 = v22 & v23;
      v26 = v21 + 24 * (v22 & v23);
      v27 = *(const void **)v26;
      if (*(_QWORD *)v26 == -1)
      {
        if (a3 == (_QWORD *)-1)
          goto LABEL_28;
        goto LABEL_20;
      }
      if (v27 != (const void *)-2)
        break;
      if (a3 == (_QWORD *)-2)
        goto LABEL_28;
LABEL_20:
      if (v27 == (const void *)-1)
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
      v22 = i + v25;
    }
    if (__n != *(_QWORD *)(v26 + 8) || __n && memcmp(a3, v27, __n))
      goto LABEL_20;
LABEL_28:
    v28 = *(_QWORD *)(v17 + 112);
    if (!v28 || !*(_DWORD *)(v28 + 8) || (v29 = *(_QWORD *)(v28 + 40)) == 0 || (v30 = *(_DWORD *)(v29 + 40)) == 0)
    {
LABEL_47:
      memset(&__str, 0, sizeof(__str));
      goto LABEL_48;
    }
    v31 = *(_QWORD *)(v29 + 24);
    v32 = sub_1C5E3DF4C(a3, v58);
    v33 = v30 - 1;
    v34 = 1;
    while (2)
    {
      v35 = v32 & v33;
      v36 = v31 + 24 * (v32 & v33);
      v37 = *(const void **)v36;
      if (*(_QWORD *)v36 == -1)
      {
        if (a3 == (_QWORD *)-1)
          break;
        goto LABEL_35;
      }
      if (v37 == (const void *)-2)
      {
        if (a3 == (_QWORD *)-2)
          break;
        goto LABEL_35;
      }
      if (__n != *(_QWORD *)(v36 + 8) || __n && memcmp(a3, *(const void **)v36, __n))
      {
LABEL_35:
        if (v37 == (const void *)-1)
          goto LABEL_47;
        v32 = v34 + v35;
        ++v34;
        continue;
      }
      break;
    }
    v38 = *(_QWORD *)(v36 + 16);
    if (!v38)
      goto LABEL_47;
    v39 = *(unsigned int *)(v38 + 12);
    v40 = *(unsigned int *)(v38 + 16);
    if (v40 >= 0x17)
    {
      if ((v40 | 7) == 0x17)
        v44 = (v40 & 0xFFFFFFF8) + 8;
      else
        v44 = v40 | 7;
      p_str = operator new(v44 + 1);
      __str.__r_.__value_.__l.__size_ = v40;
      __str.__r_.__value_.__r.__words[2] = v44 - 0x7FFFFFFFFFFFFFFFLL;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)p_str;
LABEL_59:
      memmove(p_str, (const void *)(v38 + v39 + 25), v40);
      goto LABEL_60;
    }
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = *(_DWORD *)(v38 + 16);
    p_str = &__str;
    if ((_DWORD)v40)
      goto LABEL_59;
LABEL_60:
    *((_BYTE *)p_str + v40) = 0;
LABEL_48:
    v43 = std::stoi(&__str, 0, 10);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v16 = v58;
    if (v43 == -1 || v56 != -1 && v56 != v43)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    ++v14;
    v56 = v43;
  }
  while (v14 != v15);
  v47 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v47 = *(_QWORD *)(v47 + 24);
  v48 = ***(_QWORD ***)v47;
  v49 = *(llvm::ConstantInt **)(v48 + 1960);
  v50 = *(unsigned int *)(v48 + 1968);
  LODWORD(__str.__r_.__value_.__r.__words[1]) = v50 >> 8;
  if (v50 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&__str, v43, 0);
  }
  else
  {
    if (v50 <= 0xFF)
      v51 = 0;
    else
      v51 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v50);
    __str.__r_.__value_.__r.__words[0] = v51 & v43;
  }
  v11 = v55;
  v52 = llvm::ConstantInt::get(v49, (llvm::LLVMContext *)&__str, v42);
  if (LODWORD(__str.__r_.__value_.__r.__words[1]) >= 0x41 && __str.__r_.__value_.__r.__words[0])
    MEMORY[0x1CAA32F9C](__str.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
  v53 = *(unsigned __int8 *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v52;
  v46 = 1;
  v12 = v54;
  if (!v53)
    *(_BYTE *)(a1 + 56) = 1;
LABEL_64:
  if (v46 && v11)
    return *(_QWORD *)(a1 + 48) == v12;
  else
    return (v11 != 0) ^ (v46 == 0);
}

uint64_t sub_1C5740F78(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1C573E74C(a2, *a1);
  if (v3)
    sub_1C5740FC8(*(_QWORD *)(a1[1] + 72), v3, 0, 0, 2);
  return 0;
}

llvm::AbstractAttribute *sub_1C5740FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t *v9;
  llvm::AbstractAttribute *v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t i;
  unint64_t v21;
  uint64_t *v22;
  int v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t *v26;
  uint64_t v27;
  _BOOL4 v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  size_t v34;
  void *p_p;
  void **v36;
  uint64_t *v37;
  const void *v38;
  size_t v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  void *v44[2];
  char v45;
  __int128 v46;
  void *__p;
  __int128 v48;

  if (byte_1ED831CE0)
    v8 = a3;
  else
    v8 = 0;
  *(_QWORD *)&v46 = a2;
  *((_QWORD *)&v46 + 1) = v8;
  __p = &unk_1C866042B;
  v9 = (uint64_t *)(a1 + 32);
  v48 = v46;
  v44[0] = 0;
  if ((sub_1C62860C0((uint64_t *)(a1 + 32), (uint64_t)&__p, (uint64_t **)v44) & 1) != 0)
  {
    v10 = (llvm::AbstractAttribute *)*((_QWORD *)v44[0] + 3);
    if (v10)
    {
      if (!a4 || a5 == 2)
        return v10;
      goto LABEL_8;
    }
  }
  switch(sub_1C6283CA4(&v46))
  {
    case 2u:
      v13 = sub_1C484358C(*(_QWORD *)(a1 + 24), 128, 3);
      v10 = (llvm::AbstractAttribute *)v13;
      v14 = 0;
      *(_OWORD *)(v13 + 16) = v46;
      *(_WORD *)(v13 + 40) = 256;
      *(_DWORD *)(v13 + 44) = 0;
      *(_QWORD *)v13 = &off_1E817BD68;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 32) = &unk_1E817BDF8;
      do
      {
        v15 = v13 + v14;
        *(_BYTE *)(v15 + 48) = 0;
        *(_BYTE *)(v15 + 56) = 0;
        v14 += 16;
      }
      while (v14 != 80);
      break;
    case 3u:
      v16 = sub_1C484358C(*(_QWORD *)(a1 + 24), 128, 3);
      v10 = (llvm::AbstractAttribute *)v16;
      v17 = 0;
      *(_OWORD *)(v16 + 16) = v46;
      *(_WORD *)(v16 + 40) = 256;
      *(_DWORD *)(v16 + 44) = 0;
      *(_QWORD *)v16 = &off_1E817BE58;
      *(_QWORD *)(v16 + 8) = 0;
      *(_QWORD *)(v16 + 32) = &unk_1E817BEE8;
      do
      {
        v18 = v16 + v17;
        *(_BYTE *)(v18 + 48) = 0;
        *(_BYTE *)(v18 + 56) = 0;
        v17 += 16;
      }
      while (v17 != 80);
      break;
    case 4u:
      v19 = sub_1C484358C(*(_QWORD *)(a1 + 24), 168, 3);
      v10 = (llvm::AbstractAttribute *)v19;
      *(_OWORD *)(v19 + 16) = v46;
      *(_WORD *)(v19 + 40) = 256;
      *(_DWORD *)(v19 + 44) = 0;
      *(_QWORD *)v19 = &off_1E817C038;
      *(_QWORD *)(v19 + 8) = 0;
      *(_QWORD *)(v19 + 32) = &unk_1E817C0C8;
      for (i = 48; i != 168; i += 24)
      {
        v21 = v19 + i;
        *(_QWORD *)v21 = 0;
        *(_QWORD *)(v21 + 8) = 0;
        *(_DWORD *)(v21 + 16) = 0;
      }
      break;
    case 5u:
      v10 = (llvm::AbstractAttribute *)sub_1C484358C(*(_QWORD *)(a1 + 24), 72, 3);
      *((_OWORD *)v10 + 1) = v46;
      *((_WORD *)v10 + 20) = 256;
      *((_DWORD *)v10 + 11) = 0;
      *(_QWORD *)v10 = &off_1E817BF48;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 4) = &unk_1E817BFD8;
      *((_BYTE *)v10 + 56) = 0;
      *((_BYTE *)v10 + 64) = 0;
      break;
    default:
      v10 = 0;
      break;
  }
  __p = &unk_1C866042B;
  v48 = *((_OWORD *)v10 + 1);
  sub_1C628623C(v9, (uint64_t)&__p)[3] = (uint64_t)v10;
  if (*(_DWORD *)(a1 + 4368) <= 1u)
    sub_1C6285820(a1 + 104, (uint64_t)v10);
  v22 = *(uint64_t **)(a1 + 5480);
  if (v22)
  {
    __p = &unk_1C866042B;
    v44[0] = 0;
    v23 = sub_1C614F7B0(v22, &__p, v44) ^ 1;
  }
  else
  {
    v23 = 0;
  }
  v24 = v46 & 0xFFFFFFFFFFFFFFFCLL;
  if ((~(_BYTE)v46 & 3) == 0)
    v24 = *(_QWORD *)(v24 + 24);
  v25 = *(unsigned __int8 *)(v24 + 16);
  if (!*(_BYTE *)(v24 + 16))
  {
LABEL_35:
    v27 = *(_QWORD *)(v24 + 112);
    if (v27 && ((*(_BYTE *)(v27 + 14) & 2) != 0 || (*(_BYTE *)(v27 + 17) & 8) != 0))
    {
      v28 = 1;
    }
    else if (*(_BYTE *)(a1 + 5464))
    {
      v28 = 0;
    }
    else
    {
      v30 = *(_QWORD **)(a1 + 88);
      v31 = sub_1C477672C((uint64_t)v30, v24);
      v32 = v30[1];
      v33 = 16;
      if (v32 == *v30)
        v33 = 20;
      v28 = v31 == (_QWORD *)(v32 + 8 * *(unsigned int *)((char *)v30 + v33));
    }
    v29 = 0;
    if (v28 | v23)
      goto LABEL_74;
    goto LABEL_48;
  }
  if (v25 == 21)
  {
    v26 = (unint64_t *)(v24 + 24);
  }
  else
  {
    if (v25 < 0x1C)
    {
      v24 = 0;
      goto LABEL_42;
    }
    v26 = (unint64_t *)(*(_QWORD *)(v24 + 40) + 56);
  }
  v24 = *v26;
  if (*v26)
    goto LABEL_35;
LABEL_42:
  v29 = 1;
  if ((v23 & 1) != 0)
    goto LABEL_74;
LABEL_48:
  if (*(_DWORD *)(a1 + 4372) > llvm::MaxInitializationChainLength)
  {
LABEL_74:
    v41 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v10 + 40))(v10);
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
    return v10;
  }
  (*(void (**)(void **__return_ptr, llvm::AbstractAttribute *))(*(_QWORD *)v10 + 72))(v44, v10);
  if (v45 >= 0)
    v34 = v45 & 0x7F;
  else
    v34 = (size_t)v44[1];
  p_p = &__p;
  sub_1C484371C((uint64_t)&__p, v34 + 12);
  if (v48 < 0)
    p_p = __p;
  if (v34)
  {
    if (v45 >= 0)
      v36 = v44;
    else
      v36 = (void **)v44[0];
    memmove(p_p, v36, v34);
  }
  strcpy((char *)p_p + v34, "::initialize");
  v37 = (uint64_t *)off_1EF8EEB50();
  if (*v37)
  {
    if (v48 >= 0)
      v38 = &__p;
    else
      v38 = __p;
    if (v48 >= 0)
      v39 = HIBYTE(v48) & 0x7F;
    else
      v39 = v48;
    llvm::timeTraceProfilerBegin(v38, v39, (uint64_t)"", 0);
  }
  if (SHIBYTE(v48) < 0)
    operator delete(__p);
  if (v45 < 0)
    operator delete(v44[0]);
  ++*(_DWORD *)(a1 + 4372);
  (*(void (**)(llvm::AbstractAttribute *, uint64_t))(*(_QWORD *)v10 + 24))(v10, a1);
  --*(_DWORD *)(a1 + 4372);
  if (*v37)
  {
    sub_1C6392DC0(*v37);
    if ((v29 & 1) != 0)
      goto LABEL_73;
  }
  else if ((v29 & 1) != 0)
  {
    goto LABEL_73;
  }
  v42 = *(uint64_t **)(a1 + 80);
  __p = (void *)v24;
  v44[0] = 0;
  if ((sub_1C614F7B0(v42, &__p, v44) & 1) == 0)
  {
    v43 = *(uint64_t **)(a1 + 80);
    __p = (void *)sub_1C5676C10((llvm::IRPosition *)&v46);
    v44[0] = 0;
    if ((sub_1C614F7B0(v43, &__p, v44) & 1) == 0)
      goto LABEL_74;
  }
LABEL_73:
  v40 = *(_DWORD *)(a1 + 4368);
  if (v40 == 2)
    goto LABEL_74;
  *(_DWORD *)(a1 + 4368) = 1;
  llvm::Attributor::updateAA((llvm::Attributor *)a1, v10);
  *(_DWORD *)(a1 + 4368) = v40;
  if (!a4)
    return v10;
LABEL_8:
  v11 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v10 + 40))(v10);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11))
    llvm::Attributor::recordDependence(a1, (uint64_t)v10, a4, a5);
  return v10;
}

_QWORD *sub_1C574155C(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5741590(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C57415D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t *v5;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v3 = *(_QWORD *)(v3 + 24);
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 == 21)
  {
    v5 = (unint64_t *)(v3 + 24);
  }
  else
  {
    if (!*(_BYTE *)(v3 + 16))
      goto LABEL_10;
    if (v4 < 0x1C)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
    v5 = (unint64_t *)(*(_QWORD *)(v3 + 40) + 56);
  }
  v3 = *v5;
  if (!v3)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
LABEL_10:
  result = sub_1C62873F8(a2, (llvm::GlobalValue *)v3);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  return result;
}

double sub_1C5741660@<D0>(uint64_t a1@<X8>)
{
  char *v2;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_1C64638E0;
  strcpy(v2, "ICVTrackerFunctionReturned");
  return *(double *)"FunctionReturned";
}

void sub_1C57416B0(char *a1@<X8>)
{
  a1[23] = 12;
  strcpy(a1, "AAICVTracker");
}

void *sub_1C57416DC()
{
  return &unk_1C866042B;
}

uint64_t sub_1C57416E8()
{
  return 1;
}

uint64_t sub_1C57416F4(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  llvm::AbstractAttribute *v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t result;
  int v13;
  int *v14[2];
  char v15;
  _QWORD v16[4];
  __int128 v17;
  int v18;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v5 = *(_QWORD *)(v5 + 24);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (*(_BYTE *)(v5 + 16))
  {
    if (v6 == 21)
    {
      v7 = (unint64_t *)(v5 + 24);
LABEL_8:
      v5 = *v7;
      goto LABEL_10;
    }
    if (v6 >= 0x1C)
    {
      v7 = (unint64_t *)(*(_QWORD *)(v5 + 40) + 56);
      goto LABEL_8;
    }
    v5 = 0;
  }
LABEL_10:
  v8 = sub_1C5740FC8(a2, v5, 0, a1, 0);
  if (!*((_BYTE *)v8 + 41))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  v18 = *(_DWORD *)(a1 + 44);
  v9 = a1 + 16 * v18 + 48;
  LOBYTE(v17) = 0;
  BYTE8(v17) = 0;
  v16[0] = v8;
  v16[1] = &v18;
  v16[2] = a2;
  v16[3] = &v17;
  v13 = 1;
  v14[0] = &v13;
  v14[1] = (int *)1;
  v10 = sub_1C5676C10(v4);
  if ((llvm::Attributor::checkForAllInstructions(a2, (uint64_t (*)(uint64_t, uint64_t))sub_1C574190C, (uint64_t)v16, v10, a1, v14, &v15, 1u, 0) & 1) != 0)
  {
    v11 = BYTE8(v17);
  }
  else
  {
    *(_QWORD *)&v17 = 0;
    v11 = 1;
    if (!BYTE8(v17))
      BYTE8(v17) = 1;
  }
  if (v11 && *(_BYTE *)(v9 + 8))
  {
    if ((_QWORD)v17 != *(_QWORD *)v9)
    {
LABEL_19:
      result = 0;
      *(_OWORD *)v9 = v17;
      return result;
    }
  }
  else if ((v11 == 0) == (*(_BYTE *)(v9 + 8) != 0))
  {
    goto LABEL_19;
  }
  return 1;
}

uint64_t sub_1C5741894()
{
  return 0;
}

uint64_t sub_1C57418A0(uint64_t a1, int a2)
{
  return *(_QWORD *)(a1 + 16 * a2 + 48);
}

uint64_t *sub_1C57418AC(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C57418C4(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C574190C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 112))(*a1, *(unsigned int *)a1[1], a2, a1[2]);
  v5 = a1[3];
  if (*(_BYTE *)(v5 + 8) && (!(_BYTE)v4 || *(_QWORD *)v5 != v3))
    return 0;
  *(_QWORD *)v5 = v3;
  *(_QWORD *)(v5 + 8) = v4;
  return 1;
}

_QWORD *sub_1C5741974(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C57419A8(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C57419EC@<D0>(uint64_t a1@<X8>)
{
  char *v2;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)a1 = v2;
  *(_OWORD *)(a1 + 8) = xmmword_1C64638E0;
  strcpy(v2, "ICVTrackerCallSiteReturned");
  return *(double *)"CallSiteReturned";
}

uint64_t sub_1C5741A3C()
{
  return 1;
}

uint64_t sub_1C5741A48(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  llvm::AbstractAttribute *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  v4 = sub_1C5676C10((llvm::IRPosition *)(a1 + 16));
  v5 = sub_1C5740FC8(a2, v4 | 1, 0, a1, 0);
  if (!*((_BYTE *)v5 + 41))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  v6 = a1 + 16 * *(int *)(a1 + 44);
  v7 = (uint64_t *)(v6 + 48);
  v8 = (*(uint64_t (**)(llvm::AbstractAttribute *))(*(_QWORD *)v5 + 120))(v5);
  if (*(_BYTE *)(v6 + 56))
    v10 = v9 == 0;
  else
    v10 = 1;
  if (v10)
  {
    if ((*(_BYTE *)(v6 + 56) == 0) == (v9 != 0))
    {
LABEL_11:
      v11 = 0;
      *v7 = v8;
      *(_QWORD *)(v6 + 56) = v9;
      return v11;
    }
  }
  else if (*v7 != v8)
  {
    goto LABEL_11;
  }
  return 1;
}

uint64_t sub_1C5741B0C(uint64_t a1, int a2)
{
  return *(_QWORD *)(a1 + 16 * a2 + 48);
}

uint64_t *sub_1C5741B18(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C5741B30(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5741B78(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5741BAC(_QWORD *a1)
{
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C5741BF0(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t result;

  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v5 = *(_QWORD *)(v5 + 24);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 == 21)
  {
    v7 = (unint64_t *)(v5 + 24);
  }
  else
  {
    if (!*(_BYTE *)(v5 + 16))
      goto LABEL_13;
    if (v6 < 0x1C)
    {
LABEL_9:
      (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
      goto LABEL_10;
    }
    v7 = (unint64_t *)(*(_QWORD *)(v5 + 40) + 56);
  }
  v5 = *v7;
  if (!*v7)
    goto LABEL_9;
LABEL_13:
  if (!sub_1C62873F8(a2, (llvm::GlobalValue *)v5))
    goto LABEL_9;
LABEL_10:
  v8 = *(_QWORD *)(a2 + 88);
  v9 = *(_DWORD *)(v8 + 72 * *(int *)(a1 + 44) + 29208);
  v10 = *(_QWORD *)(v8 + 152 * *(int *)(v8 + 72 * *(int *)(a1 + 44) + 29268) + 3160);
  result = sub_1C5676C10(v4);
  if (v10 != result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  *(_DWORD *)(a1 + 48) = v9;
  return result;
}

void sub_1C5741CE0(char *a1@<X8>)
{
  a1[23] = 18;
  strcpy(a1, "ICVTrackerCallSite");
}

uint64_t sub_1C5741D08(uint64_t a1, uint64_t a2)
{
  unint64_t v5;
  unint64_t v6;

  if (!*(_BYTE *)(a1 + 64) || !*(_QWORD *)(a1 + 56))
    return 1;
  v5 = sub_1C5676CEC((_DWORD *)(a1 + 16));
  sub_1C6290C00(a2, v5, *(llvm::Value **)(a1 + 56), 1);
  v6 = sub_1C5676CEC((_DWORD *)(a1 + 16));
  sub_1C6290278(a2, v6);
  return 0;
}

uint64_t sub_1C5741D84(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  llvm::AbstractAttribute *v8;
  llvm::AbstractAttribute *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = (_DWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v5 = *(_QWORD *)(v5 + 24);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (*(_BYTE *)(v5 + 16))
  {
    if (v6 == 21)
    {
      v7 = (unint64_t *)(v5 + 24);
LABEL_8:
      v5 = *v7;
      goto LABEL_10;
    }
    if (v6 >= 0x1C)
    {
      v7 = (unint64_t *)(*(_QWORD *)(v5 + 40) + 56);
      goto LABEL_8;
    }
    v5 = 0;
  }
LABEL_10:
  v8 = sub_1C5740FC8(a2, v5, 0, a1, 0);
  if (!*((_BYTE *)v8 + 41))
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 40))(a1 + 32);
  v9 = v8;
  v10 = *(unsigned int *)(a1 + 48);
  v11 = sub_1C5676CEC(v4);
  v12 = (*(uint64_t (**)(llvm::AbstractAttribute *, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v9 + 112))(v9, v10, v11, a2);
  if (!*(_BYTE *)(a1 + 64) || !(_BYTE)v13)
  {
    if ((*(_BYTE *)(a1 + 64) == 0) == (v13 != 0))
      goto LABEL_14;
    return 1;
  }
  if (*(_QWORD *)(a1 + 56) == v12)
    return 1;
LABEL_14:
  v14 = 0;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v13;
  return v14;
}

uint64_t sub_1C5741EB4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

uint64_t *sub_1C5741EC0(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  return sub_1C6286C70((uint64_t *)(a1 - 24));
}

void sub_1C5741ED8(uint64_t a1)
{
  *(_QWORD *)(a1 - 32) = &unk_1E8172998;
  sub_1C6286C70((uint64_t *)(a1 - 24));
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5741F20(_QWORD *a1)
{
  uint64_t i;

  *a1 = &off_1E817C038;
  a1[4] = &unk_1E817C0C8;
  for (i = 18; i != 3; i -= 3)
    MEMORY[0x1CAA32FB4](a1[i], 8);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  return a1;
}

void sub_1C5741F88(_QWORD *a1)
{
  uint64_t i;

  *a1 = &off_1E817C038;
  a1[4] = &unk_1E817C0C8;
  for (i = 18; i != 3; i -= 3)
    MEMORY[0x1CAA32FB4](a1[i], 8);
  *a1 = &unk_1E8172998;
  sub_1C6286C70(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5742000(char *a1@<X8>)
{
  a1[23] = 18;
  strcpy(a1, "ICVTrackerFunction");
}

uint64_t sub_1C5742028()
{
  return 1;
}

uint64_t sub_1C5742034(uint64_t a1, uint64_t a2)
{
  llvm::IRPosition *v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v17[3];
  int *v18;
  uint64_t v19;
  char v20;
  _QWORD v21[5];
  _QWORD v22[2];
  int v23;
  unsigned int v24;

  v24 = 1;
  v4 = (llvm::IRPosition *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16) & 0xFFFFFFFFFFFFFFFCLL;
  if ((~*(_DWORD *)(a1 + 16) & 3) == 0)
    v5 = *(_QWORD *)(v5 + 24);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (*(_BYTE *)(v5 + 16))
  {
    if (v6 == 21)
    {
      v7 = (unint64_t *)(v5 + 24);
LABEL_8:
      v5 = *v7;
      goto LABEL_10;
    }
    if (v6 >= 0x1C)
    {
      v7 = (unint64_t *)(*(_QWORD *)(v5 + 40) + 56);
      goto LABEL_8;
    }
    v5 = 0;
  }
LABEL_10:
  v8 = *(_DWORD *)(a1 + 44);
  v9 = *(_QWORD *)(a2 + 88) + 152 * *(int *)(*(_QWORD *)(a2 + 88) + 72 * v8 + 29264);
  v23 = v8;
  v10 = (uint64_t *)(a1 + 24 * v8 + 48);
  v22[0] = v10;
  v22[1] = &v24;
  v21[0] = a1;
  v21[1] = a2;
  v21[2] = &v23;
  v21[3] = v10;
  v21[4] = &v24;
  sub_1C5735FC4(v9 + 3040, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C57425F0, (uint64_t)v22, v5);
  LODWORD(v18) = 56;
  v17[0] = (int *)&v18;
  v17[1] = (int *)1;
  v11 = sub_1C5676C10(v4);
  llvm::Attributor::checkForAllInstructions(a2, sub_1C5742694, (uint64_t)v21, v11, a1, v17, &v20, 1u, 0);
  v12 = *(_QWORD *)(v5 + 80);
  if (v12)
    v13 = v12 - 24;
  else
    v13 = 0;
  v14 = *(_QWORD *)(v13 + 48);
  if (v14)
    v15 = (int *)(v14 - 24);
  else
    v15 = 0;
  if (!v24)
  {
    v17[0] = v15;
    v18 = 0;
    if ((sub_1C5667944(v10, v17, &v18) & 1) == 0)
    {
      v18 = v15;
      v19 = 0;
      sub_1C629CB44((uint64_t)v17, (uint64_t)v10, &v18, &v19);
    }
  }
  return v24;
}

llvm::AA *sub_1C57421DC(uint64_t a1, signed int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  llvm::AA *v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;
  llvm::AA *v15;
  char v16;
  int v17;
  llvm::AA *v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  _BYTE *v33;
  _BYTE *v34;
  uint64_t v35;
  int v36;
  _BYTE v37[132];
  signed int v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD v44[18];

  v44[16] = *MEMORY[0x1E0C80C00];
  v38 = a2;
  v7 = (uint64_t *)(a1 + 24 * a2 + 48);
  v33 = (_BYTE *)a3;
  v41 = 0;
  if (sub_1C5667944(v7, &v33, &v41))
  {
    v33 = (_BYTE *)a3;
    v41 = 0;
    v8 = 0;
    if (sub_1C5667944(v7, &v33, &v41))
      return (llvm::AA *)*((_QWORD *)v41 + 1);
    return v8;
  }
  v8 = 0;
  v9 = 0;
  v43 = 16;
  v41 = v44;
  v33 = v37;
  v34 = v37;
  v35 = 16;
  v36 = 0;
  v44[0] = a3;
  v10 = 1;
  while (1)
  {
    v11 = *((_QWORD *)v41 + v10 - 1);
    v42 = v10 - 1;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v33, v11);
    if (v12)
      break;
LABEL_37:
    v10 = v42;
    if (!v42)
      goto LABEL_57;
  }
  v13 = *(_QWORD *)(v11 + 40);
  v14 = (_QWORD *)(v11 + 24);
  if (*(_QWORD *)(v13 + 48) != v11 + 24)
  {
    do
    {
      v14 = (_QWORD *)*v14;
      if (!v14)
        break;
      v39 = 0;
      v40 = v14 - 3;
      if (sub_1C5667944(v7, &v40, &v39))
      {
        v39 = 0;
        v40 = v14 - 3;
        v17 = sub_1C5667944(v7, &v40, &v39);
        v18 = 0;
        if (v17)
          v18 = *(llvm::AA **)(v39 + 8);
        if (!v9)
        {
          v9 = 1;
          v8 = v18;
          break;
        }
        if (v8 == v18)
          break;
LABEL_56:
        v8 = 0;
        goto LABEL_57;
      }
      v15 = sub_1C5742708(a1, a4, (uint64_t)(v14 - 3), &v38);
      if (v16)
      {
        if (!v9)
        {
          v9 = v16;
          v8 = v15;
          break;
        }
        if (v8 != v15)
          goto LABEL_56;
      }
    }
    while (*(_QWORD **)(v14[2] + 48) != v14);
  }
  if (v13 != *(_QWORD *)(a3 + 40) || v9 == 0)
  {
    v20 = *(_QWORD *)(v13 + 8);
    if (v20)
    {
      while (1)
      {
        v21 = *(_QWORD *)(v20 + 24);
        v22 = *(unsigned __int8 *)(v21 + 16);
        v23 = v21 && v22 >= 0x1C;
        if (v23 && v22 - 29 <= 0xA)
          break;
        v20 = *(_QWORD *)(v20 + 8);
        if (!v20)
          goto LABEL_37;
      }
LABEL_39:
      v25 = *(_QWORD *)(v21 + 40);
      v26 = *(_QWORD *)(v25 + 40);
      if (v26 != v25 + 40)
      {
        v27 = v26 ? v26 - 24 : 0;
        if (*(unsigned __int8 *)(v27 + 16) - 29 <= 0xA)
        {
          v28 = v42;
          if (v42 >= (unint64_t)v43)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v41, (uint64_t)v44, v42 + 1, 8);
            v28 = v42;
          }
          *((_QWORD *)v41 + v28) = v27;
          ++v42;
        }
      }
      while (1)
      {
        v20 = *(_QWORD *)(v20 + 8);
        if (!v20)
          break;
        v21 = *(_QWORD *)(v20 + 24);
        v29 = *(unsigned __int8 *)(v21 + 16);
        if (v21)
          v30 = v29 >= 0x1C;
        else
          v30 = 0;
        if (v30 && v29 - 29 < 0xB)
          goto LABEL_39;
      }
    }
    goto LABEL_37;
  }
LABEL_57:
  if (v34 != v33)
    free(v34);
  if (v41 != v44)
    free(v41);
  return v8;
}

uint64_t sub_1C5742500()
{
  return 0;
}

uint64_t *sub_1C574250C(_QWORD *a1)
{
  uint64_t i;

  *(a1 - 4) = &off_1E817C038;
  *a1 = &unk_1E817C0C8;
  for (i = 14; i != -1; i -= 3)
    MEMORY[0x1CAA32FB4](a1[i], 8);
  *(a1 - 4) = &unk_1E8172998;
  return sub_1C6286C70(a1 - 3);
}

void sub_1C574256C(_QWORD *a1)
{
  uint64_t i;

  *(a1 - 4) = &off_1E817C038;
  *a1 = &unk_1E817C0C8;
  for (i = 14; i != -1; i -= 3)
    MEMORY[0x1CAA32FB4](a1[i], 8);
  *(a1 - 4) = &unk_1E8172998;
  sub_1C6286C70(a1 - 3);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C57425F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 16) == 84)
    v3 = *(_QWORD *)(a2 + 24);
  else
    v3 = 0;
  if (v3)
    v4 = v3 - 32 == a2;
  else
    v4 = 0;
  if (v4)
  {
    v6 = *(_DWORD *)(v3 + 20);
    if ((v6 & 0x80000000) == 0 || (*(_QWORD *)(v3 - 32 * (v6 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) == 0)
    {
      v7 = *(_QWORD *)a1;
      v8 = *(_QWORD *)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF));
      v10 = v2;
      v11 = v8;
      sub_1C629CB44((uint64_t)v12, v7, &v10, &v11);
      if (v12[16])
        **(_DWORD **)(a1 + 8) = 0;
    }
  }
  return 0;
}

uint64_t sub_1C5742694(uint64_t a1, uint64_t a2)
{
  llvm::AA *v4;
  char v5;
  uint64_t v7;
  uint64_t v8;
  llvm::AA *v9;
  _BYTE v10[24];

  v4 = sub_1C5742708(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), a2, *(signed int **)(a1 + 16));
  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 24);
    v8 = a2;
    v9 = v4;
    sub_1C629CB44((uint64_t)v10, v7, &v8, &v9);
    if (v10[16])
      **(_DWORD **)(a1 + 32) = 0;
  }
  return 1;
}

llvm::AA *sub_1C5742708(uint64_t a1, uint64_t a2, uint64_t a3, signed int *a4)
{
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  unsigned int v18;
  int v19;
  int i;
  unsigned int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  int j;
  unsigned int v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  llvm::AA *v40;
  uint64_t v42;
  const llvm::Instruction *v43;
  signed int v44;
  llvm::AbstractAttribute *v45;
  llvm::AA *v46;
  llvm::InformationCache *v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;
  int v51;
  unint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = *(unsigned __int8 *)(a3 + 16) - 33;
  v5 = v4 > 0x33;
  v6 = (1 << v4) & 0x8000000000041;
  if (v5 || v6 == 0)
    return 0;
  v12 = *(_QWORD *)(a3 + 64);
  if (v12)
  {
    if (*(_DWORD *)(v12 + 8))
    {
      v13 = *(_QWORD *)(v12 + 40);
      if (v13)
      {
        v14 = *(_DWORD *)(v13 + 40);
        if (v14)
        {
          v15 = *(_QWORD *)(v13 + 24);
          v16 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v16 & 1) == 0)
          {
            v57 = v15;
            v56 = v14;
            v51 = __cxa_guard_acquire(&qword_1ED7EAC88);
            v14 = v56;
            v15 = v57;
            if (v51)
            {
              v52 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v52 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v52;
              __cxa_guard_release(&qword_1ED7EAC88);
              v14 = v56;
              v15 = v57;
            }
          }
          v17 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xD15653C75DE758C1)) ^ ((0x9DDFEA08EB382D69
                                                                                     * (qword_1ED7EAC80 ^ 0xD15653C75DE758C1)) >> 47) ^ 0xBC3836B732B837AFLL);
          v18 = (-348639895 * ((v17 >> 47) ^ v17)) ^ 0x706F5F6F;
          v19 = v14 - 1;
          for (i = 1; ; ++i)
          {
            v21 = v18 & v19;
            v22 = (uint64_t *)(v15 + 24 * v21);
            v23 = *v22;
            if (*v22 == -1)
            {
              if ("no_openmp" == (char *)-1)
                return 0;
            }
            else if (v23 == -2)
            {
              if ("no_openmp" == (char *)-2)
                return 0;
            }
            else if (v22[1] == 9 && *(_QWORD *)v23 == 0x6D6E65706F5F6F6ELL && *(_BYTE *)(v23 + 8) == 112)
            {
              return 0;
            }
            if (v23 == -1)
              break;
            v18 = i + v21;
          }
        }
      }
    }
  }
  if ((llvm::CallBase::hasFnAttrOnCalledFunction(a3, "no_openmp", 9uLL) & 1) != 0)
    return 0;
  v25 = *(_QWORD *)(a3 + 64);
  if (v25)
  {
    if (*(_DWORD *)(v25 + 8))
    {
      v26 = *(_QWORD *)(v25 + 40);
      if (v26)
      {
        v27 = *(_DWORD *)(v26 + 40);
        if (v27)
        {
          v28 = *(_QWORD *)(v26 + 24);
          v29 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v29 & 1) == 0)
          {
            v58 = v28;
            v53 = v27;
            v54 = __cxa_guard_acquire(&qword_1ED7EAC88);
            v27 = v53;
            v28 = v58;
            if (v54)
            {
              v55 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v55 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v55;
              __cxa_guard_release(&qword_1ED7EAC88);
              v27 = v53;
              v28 = v58;
            }
          }
          v30 = __ROR8__(qword_1ED7EAC80 ^ 0x6E026472EA39E42ELL, 30);
          v31 = 0x9DDFEA08EB382D69
              * ((qword_1ED7EAC80 - 0x70239526D379B5B4) ^ ((0x9DDFEA08EB382D69
                                                            * ((v30 + 0x70AB6F8EB220A0D5) ^ (qword_1ED7EAC80
                                                                                             - 0x70239526D379B5B4))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v30 + 0x70AB6F8EB220A0D5) ^ (qword_1ED7EAC80 - 0x70239526D379B5B4))));
          v32 = -348639895 * ((v31 >> 47) ^ v31);
          v33 = v27 - 1;
          for (j = 1; ; ++j)
          {
            v35 = v32 & v33;
            v36 = (uint64_t *)(v28 + 24 * v35);
            v37 = *v36;
            if (*v36 == -1)
            {
              if ("no_openmp_routines" == (char *)-1)
                return 0;
            }
            else if (v37 == -2)
            {
              if ("no_openmp_routines" == (char *)-2)
                return 0;
            }
            else if (v36[1] == 18)
            {
              v38 = *(_QWORD *)v37 == 0x6D6E65706F5F6F6ELL && *(_QWORD *)(v37 + 8) == 0x6E6974756F725F70;
              if (v38 && *(_WORD *)(v37 + 16) == 29541)
                return 0;
            }
            if (v37 == -1)
              break;
            v32 = j + v35;
          }
        }
      }
    }
  }
  if ((llvm::CallBase::hasFnAttrOnCalledFunction(a3, "no_openmp_routines", 0x12uLL) & 1) != 0)
    return 0;
  v42 = *(_QWORD *)(a3 - 32);
  if (!v42 || *(_BYTE *)(v42 + 16) || *(_QWORD *)(v42 + 24) != *(_QWORD *)(a3 + 72))
    return 0;
  v43 = *(const llvm::Instruction **)(a2 + 88);
  v44 = *a4;
  if (v42 == *((_QWORD *)v43 + 19 * *((int *)v43 + 18 * *a4 + 7317) + 395))
    return 0;
  if (v42 == *((_QWORD *)v43 + 19 * *((int *)v43 + 18 * v44 + 7316) + 395))
  {
    v49 = a1 + 48;
    v59 = 0;
    v60 = a3;
    if (!sub_1C5667944((uint64_t *)(v49 + 24 * v44), &v60, &v59))
      return 0;
    v50 = (uint64_t *)(v49 + 24 * *a4);
    v59 = 0;
    v60 = a3;
    v40 = 0;
    if (sub_1C5667944(v50, &v60, &v59))
      return *(llvm::AA **)(v59 + 8);
  }
  else
  {
    if (*(_QWORD *)(v42 + 72) == v42 + 72 && (*(_BYTE *)(v42 + 34) & 0x80) == 0)
      return 0;
    v45 = sub_1C5740FC8(a2, a3 | 1, 0, a1, 0);
    if (!*((_BYTE *)v45 + 41))
      return 0;
    v46 = (llvm::AA *)(*(uint64_t (**)(llvm::AbstractAttribute *, _QWORD))(*(_QWORD *)v45 + 120))(v45, *a4);
    v40 = v46;
    if (v48)
    {
      if (!v46 || !llvm::AA::isValidAtPosition(v46, (const llvm::Value *)a3, v43, v47))
        return 0;
    }
  }
  return v40;
}

uint64_t sub_1C5742C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1C5738020(*(_QWORD *)(*(_QWORD *)a1 + 72), a3, 0, 0, 2);
  return 0;
}

void sub_1C5742C64(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C629CCBC(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 24 * v4;
      do
      {
        *v5 = -4096;
        v5 += 3;
        v6 -= 24;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v8;
      v9 = operator new(24 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 24 * v10;
        do
        {
          *v9 = -4096;
          v9 += 3;
          v11 -= 24;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

uint64_t sub_1C5742D70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  llvm::OptimizationRemarkEmitter *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  void **v17;
  char *v18;
  unint64_t v19;
  void **v20;
  char *v21;
  unint64_t v22;
  void **v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t i;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t (**v43)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t (**v44)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  uint64_t v45;
  int v46;
  _BYTE v47[48];
  void *v48;
  unsigned int v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _BYTE v53[64];
  void *v54;
  unsigned int v55;
  _QWORD v56[35];

  v2 = a2;
  v56[34] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a1 + 64);
  v5 = sub_1C477672C((uint64_t)v4, a2);
  v6 = v4[1];
  v7 = 16;
  if (v6 == *v4)
    v7 = 20;
  if (v5 == (_QWORD *)(v6 + 8 * *(unsigned int *)((char *)v4 + v7)))
    return 0;
  v51 = (void *)v2;
  v9 = sub_1C617A140(a1, (uint64_t *)&v51);
  v10 = v9;
  if (*((_BYTE *)v9 + 16))
    return v9[1];
  v11 = *(uint64_t **)(*(_QWORD *)(a1 + 64) + 29568);
  v51 = (void *)v2;
  v43 = 0;
  if (sub_1C614F7B0(v11, &v51, &v43))
  {
    if (!*((_BYTE *)v10 + 16))
      *((_BYTE *)v10 + 16) = 1;
    v10[1] = v2;
    return v2;
  }
  if (!*((_BYTE *)v10 + 16))
    *((_BYTE *)v10 + 16) = 1;
  v10[1] = 0;
  if ((*(_DWORD *)(v2 + 32) & 0xFu) - 7 >= 2)
  {
    v13 = (llvm::OptimizationRemarkEmitter *)(*(uint64_t (**)(_QWORD, uint64_t))(a1 + 48))(*(_QWORD *)(a1 + 56), v2);
    v14 = ****(_QWORD ****)v13;
    if (*(_QWORD *)(v14 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v14 + 72) + 48))(*(_QWORD *)(v14 + 72)))
    {
      llvm::OptimizationRemarkAnalysis::OptimizationRemarkAnalysis((uint64_t)&v43, (uint64_t)"openmp-opt", (uint64_t)"OMP100", 6, v2);
      v51 = "Potentially unknown OpenMP target region caller.";
      v52 = 48;
      sub_1C53B17B4((uint64_t)&v48, (const void **)&v51);
      sub_1C61998EC((uint64_t)&v51, (uint64_t)&v43);
      v51 = &off_1E814E570;
      v38 = " [";
      v39 = 2;
      sub_1C53B17B4((uint64_t)&v54, (const void **)&v38);
      v38 = "OMP100";
      v39 = 6;
      sub_1C53B17B4((uint64_t)&v54, (const void **)&v38);
      v38 = "]";
      v39 = 1;
      sub_1C53B17B4((uint64_t)&v54, (const void **)&v38);
      sub_1C61998EC((uint64_t)&v38, (uint64_t)&v51);
      v38 = (const char *)&off_1E814E570;
      v51 = &off_1E814E790;
      v15 = (char *)v54;
      if (v55)
      {
        v16 = (unint64_t)v55 << 6;
        do
        {
          v17 = (void **)&v15[v16];
          if (v15[v16 - 17] < 0)
            operator delete(*(v17 - 5));
          if (*((char *)v17 - 41) < 0)
            operator delete(*(v17 - 8));
          v16 -= 64;
        }
        while (v16);
        v15 = (char *)v54;
      }
      if (v15 != (char *)v56)
        free(v15);
      v43 = &off_1E814E790;
      v18 = (char *)v48;
      if (v49)
      {
        v19 = (unint64_t)v49 << 6;
        do
        {
          v20 = (void **)&v18[v19];
          if (v18[v19 - 17] < 0)
            operator delete(*(v20 - 5));
          if (*((char *)v20 - 41) < 0)
            operator delete(*(v20 - 8));
          v19 -= 64;
        }
        while (v19);
        v18 = (char *)v48;
      }
      if (v18 != (char *)&v50)
        free(v18);
      llvm::OptimizationRemarkEmitter::emit(v13, (llvm::DiagnosticInfoOptimizationBase *)&v38);
      v38 = (const char *)&off_1E814E790;
      v21 = (char *)v40;
      if (v41)
      {
        v22 = (unint64_t)v41 << 6;
        do
        {
          v23 = (void **)&v21[v22];
          if (v21[v22 - 17] < 0)
            operator delete(*(v23 - 5));
          if (*((char *)v23 - 41) < 0)
            operator delete(*(v23 - 8));
          v22 -= 64;
        }
        while (v22);
        v21 = (char *)v40;
      }
      if (v21 != (char *)&v42)
        free(v21);
    }
    return 0;
  }
  v43 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v47;
  v44 = (uint64_t (**)(llvm::DiagnosticInfoWithLocationBase *__hidden))v47;
  v45 = 2;
  v46 = 0;
  v24 = *(_QWORD *)(v2 + 8);
  v51 = v53;
  v52 = 0x800000000;
  sub_1C6287358((unsigned int *)&v51, v24, v12, 0);
  v25 = v52;
  if ((_DWORD)v52)
  {
    for (i = 0; i < v25; ++i)
    {
      v27 = *((_QWORD *)v51 + i);
      v28 = *(_QWORD *)(v27 + 24);
      v29 = *(unsigned __int8 *)(v28 + 16);
      if (v29 == 81)
      {
        if ((*(_WORD *)(v28 + 18) & 0x3E) != 0x20)
          goto LABEL_65;
      }
      else
      {
        if (v29 == 5)
        {
          while (1)
          {
            v28 = *(_QWORD *)(v28 + 8);
            if (!v28)
              break;
            if (v25 >= HIDWORD(v52))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v51, (uint64_t)v53, v25 + 1, 8);
              v25 = v52;
            }
            *((_QWORD *)v51 + v25) = v28;
            v25 = v52 + 1;
            LODWORD(v52) = v52 + 1;
          }
          continue;
        }
        if (v29 < 0x1C
          || (v29 - 33 <= 0x33 ? (v30 = ((1 << (v29 - 33)) & 0x8000000000041) == 0) : (v30 = 1),
              v30 || v28 - 32 != v27 && !sub_1C5724C80(*(_QWORD *)(v27 + 24), *(_QWORD *)(a1 + 64) + 25688)))
        {
LABEL_65:
          v31 = 0;
          goto LABEL_66;
        }
      }
      v31 = sub_1C5742D70(a1, *(_QWORD *)(*(_QWORD *)(v28 + 40) + 56));
LABEL_66:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v43, v31);
      v25 = v52;
    }
  }
  if (v51 != v53)
    free(v51);
  if (HIDWORD(v45) - v46 == 1)
  {
    v32 = (char *)v44;
    if (v44 == v43)
      v33 = HIDWORD(v45);
    else
      v33 = v45;
    if ((_DWORD)v33)
    {
      v34 = 8 * v33;
      v35 = (char *)&v44[v33];
      while (*(_QWORD *)v32 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v32 += 8;
        v34 -= 8;
        if (!v34)
        {
          v32 = v35;
          break;
        }
      }
    }
    v36 = *(_QWORD *)v32;
  }
  else
  {
    v36 = 0;
  }
  v51 = (void *)v2;
  v37 = sub_1C617A140(a1, (uint64_t *)&v51);
  if (!*((_BYTE *)v37 + 16))
    *((_BYTE *)v37 + 16) = 1;
  v37[1] = v36;
  if (v44 != v43)
    free(v44);
  return v36;
}

uint64_t sub_1C57432CC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  llvm::OptimizationRemarkEmitter *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  void **v12;
  char *v13;
  unint64_t v14;
  void **v15;
  char *v16;
  unint64_t v17;
  void **v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t (**v24)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v25;
  char v26;
  uint64_t v27;
  _QWORD v28[5];
  char v29;
  char v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[260];
  int v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  unsigned int v39;
  _QWORD v40[35];

  v40[34] = *MEMORY[0x1E0C80C00];
  v3 = sub_1C573E74C(a2, *a1);
  if (v3)
  {
    v4 = v3;
    v5 = (llvm::OptimizationRemarkEmitter *)(*(uint64_t (**)(_QWORD, _QWORD))(a1[1] + 48))(*(_QWORD *)(a1[1] + 56), *(_QWORD *)(*(_QWORD *)(v3 + 40) + 56));
    v6 = ****(_QWORD ****)v5;
    if (*(_QWORD *)(v6 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v6 + 72) + 48))(*(_QWORD *)(v6 + 72)))
    {
      v8 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 56);
      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v28, (const llvm::DebugLoc *)(v4 + 48));
      v9 = *(_QWORD *)(v4 + 40);
      v25 = 10;
      v26 = 2;
      v27 = v8;
      v28[2] = "openmp-opt";
      v28[3] = "OMP112";
      v28[4] = 6;
      v29 = 0;
      v30 = 0;
      v31 = v33;
      v32 = 0x400000000;
      v33[256] = 0;
      v34 = -1;
      v35 = v9;
      v24 = &off_1E814E538;
      v36 = "Found thread data sharing on the GPU. ";
      v37 = 38;
      sub_1C53B17B4((uint64_t)&v31, (const void **)&v36);
      v36 = "Expect degraded performance due to data globalization.";
      v37 = 54;
      sub_1C53B17B4((uint64_t)&v31, (const void **)&v36);
      sub_1C61998EC((uint64_t)&v36, (uint64_t)&v24);
      v36 = (const char *)&off_1E814E538;
      v19 = " [";
      v20 = 2;
      sub_1C53B17B4((uint64_t)&v38, (const void **)&v19);
      v19 = "OMP112";
      v20 = 6;
      sub_1C53B17B4((uint64_t)&v38, (const void **)&v19);
      v19 = "]";
      v20 = 1;
      sub_1C53B17B4((uint64_t)&v38, (const void **)&v19);
      sub_1C61998EC((uint64_t)&v19, (uint64_t)&v36);
      v19 = (const char *)&off_1E814E538;
      v36 = (const char *)&off_1E814E790;
      v10 = (char *)v38;
      if (v39)
      {
        v11 = (unint64_t)v39 << 6;
        do
        {
          v12 = (void **)&v10[v11];
          if (v10[v11 - 17] < 0)
            operator delete(*(v12 - 5));
          if (*((char *)v12 - 41) < 0)
            operator delete(*(v12 - 8));
          v11 -= 64;
        }
        while (v11);
        v10 = (char *)v38;
      }
      if (v10 != (char *)v40)
        free(v10);
      v24 = &off_1E814E790;
      v13 = (char *)v31;
      if ((_DWORD)v32)
      {
        v14 = (unint64_t)v32 << 6;
        do
        {
          v15 = (void **)&v13[v14];
          if (v13[v14 - 17] < 0)
            operator delete(*(v15 - 5));
          if (*((char *)v15 - 41) < 0)
            operator delete(*(v15 - 8));
          v14 -= 64;
        }
        while (v14);
        v13 = (char *)v31;
      }
      if (v13 != v33)
        free(v13);
      llvm::OptimizationRemarkEmitter::emit(v5, (llvm::DiagnosticInfoOptimizationBase *)&v19);
      v19 = (const char *)&off_1E814E790;
      v16 = (char *)v21;
      if (v22)
      {
        v17 = (unint64_t)v22 << 6;
        do
        {
          v18 = (void **)&v16[v17];
          if (v16[v17 - 17] < 0)
            operator delete(*(v18 - 5));
          if (*((char *)v18 - 41) < 0)
            operator delete(*(v18 - 8));
          v17 -= 64;
        }
        while (v17);
        v16 = (char *)v21;
      }
      if (v16 != (char *)&v23)
        free(v16);
    }
  }
  return 0;
}

uint64_t sub_1C5743600(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v6;
  int v7;
  llvm::Value *v8;
  uint64_t v10;
  uint64_t result;
  llvm::OptimizationRemarkEmitter *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  void **v18;
  char *v19;
  unint64_t v20;
  void **v21;
  char *v22;
  unint64_t v23;
  void **v24;
  uint64_t v25;
  _QWORD *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t (**v32)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  char v40;
  char v41;
  void *v42;
  uint64_t v43;
  _BYTE v44[260];
  int v45;
  uint64_t v46;
  _OWORD v47[5];
  void *v48;
  unsigned int v49;
  _QWORD v50[36];

  v50[34] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v2 + 16) == 84)
    v3 = *(_QWORD *)(a2 + 24);
  else
    v3 = 0;
  if (v3)
    v4 = v3 - 32 == a2;
  else
    v4 = 0;
  if (!v4)
    return 0;
  v6 = *a1;
  v7 = *(_DWORD *)(v3 + 20);
  if (v7 < 0 && (*(_QWORD *)(v3 - 32 * (v7 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) != 0)
    return 0;
  v8 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v2 - 32 * (*(_DWORD *)(v2 + 20) & 0x7FFFFFF) + 64));
  if (!v8 || *((_BYTE *)v8 + 16) != 0)
    return 0;
  v10 = *((_QWORD *)v8 + 14);
  if (!v10 || (*(_BYTE *)(v10 + 17) & 0x30) == 0 || (*(_BYTE *)(v10 + 20) & 2) == 0)
    return 0;
  v12 = (llvm::OptimizationRemarkEmitter *)(*(uint64_t (**)(_QWORD, _QWORD))(v6 + 48))(*(_QWORD *)(v6 + 56), *(_QWORD *)(*(_QWORD *)(v2 + 40) + 56));
  v13 = ****(_QWORD ****)v12;
  if (*(_QWORD *)(v13 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v13 + 72) + 48))(*(_QWORD *)(v13 + 72)))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + 56);
    llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v47, (const llvm::DebugLoc *)(v2 + 48));
    v15 = *(_QWORD *)(v2 + 40);
    v33 = 9;
    v34 = 2;
    v35 = v14;
    v36 = v47[0];
    v37 = "openmp-opt";
    v38 = "OMP160";
    v39 = 6;
    v40 = 0;
    v41 = 0;
    v42 = v44;
    v43 = 0x400000000;
    v44[256] = 0;
    v45 = -1;
    v46 = v15;
    v32 = &off_1E814E500;
    *(_QWORD *)&v47[0] = "Removing parallel region with no side-effects.";
    *((_QWORD *)&v47[0] + 1) = 46;
    sub_1C53B17B4((uint64_t)&v42, (const void **)v47);
    sub_1C61998EC((uint64_t)v47, (uint64_t)&v32);
    *(_QWORD *)&v47[0] = &off_1E814E500;
    v27 = " [";
    v28 = 2;
    sub_1C53B17B4((uint64_t)&v48, (const void **)&v27);
    v27 = "OMP160";
    v28 = 6;
    sub_1C53B17B4((uint64_t)&v48, (const void **)&v27);
    v27 = "]";
    v28 = 1;
    sub_1C53B17B4((uint64_t)&v48, (const void **)&v27);
    sub_1C61998EC((uint64_t)&v27, (uint64_t)v47);
    v27 = (const char *)&off_1E814E500;
    *(_QWORD *)&v47[0] = &off_1E814E790;
    v16 = (char *)v48;
    if (v49)
    {
      v17 = (unint64_t)v49 << 6;
      do
      {
        v18 = (void **)&v16[v17];
        if (v16[v17 - 17] < 0)
          operator delete(*(v18 - 5));
        if (*((char *)v18 - 41) < 0)
          operator delete(*(v18 - 8));
        v17 -= 64;
      }
      while (v17);
      v16 = (char *)v48;
    }
    if (v16 != (char *)v50)
      free(v16);
    v32 = &off_1E814E790;
    v19 = (char *)v42;
    if ((_DWORD)v43)
    {
      v20 = (unint64_t)v43 << 6;
      do
      {
        v21 = (void **)&v19[v20];
        if (v19[v20 - 17] < 0)
          operator delete(*(v21 - 5));
        if (*((char *)v21 - 41) < 0)
          operator delete(*(v21 - 8));
        v20 -= 64;
      }
      while (v20);
      v19 = (char *)v42;
    }
    if (v19 != v44)
      free(v19);
    llvm::OptimizationRemarkEmitter::emit(v12, (llvm::DiagnosticInfoOptimizationBase *)&v27);
    v27 = (const char *)&off_1E814E790;
    v22 = (char *)v29;
    if (v30)
    {
      v23 = (unint64_t)v30 << 6;
      do
      {
        v24 = (void **)&v22[v23];
        if (v22[v23 - 17] < 0)
          operator delete(*(v24 - 5));
        if (*((char *)v24 - 41) < 0)
          operator delete(*(v24 - 8));
        v23 -= 64;
      }
      while (v23);
      v22 = (char *)v29;
    }
    if (v22 != (char *)&v31)
      free(v22);
  }
  llvm::CallGraphUpdater::removeCallSite(*(llvm::CallGraphUpdater **)(v6 + 40), (llvm::CallBase *)v2);
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v2 + 40) + 40, (uint64_t ***)v2);
  v25 = *(_QWORD *)(v2 + 24);
  v26 = *(_QWORD **)(v2 + 32);
  *v26 = v25;
  *(_QWORD *)(v25 + 8) = v26;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v2);
  result = 1;
  *(_BYTE *)a1[1] = 1;
  return result;
}

uint64_t sub_1C57439C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  _QWORD *v7;
  llvm **v8;
  llvm *v9;
  llvm *v10;
  llvm *UnderlyingObject;
  llvm *v12;
  llvm *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v33;
  int v34;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  _BYTE *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _DWORD *v48;
  char *v49;
  uint64_t v50;
  llvm::PointerType *v51;
  llvm::Type *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t **v70;
  unsigned int v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t **v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  llvm::Value *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  llvm::ValueSymbolTable *v92;
  uint64_t v93;
  llvm::ValueSymbolTable *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  llvm::PointerType *RuntimeFunction;
  _BYTE v100[32];
  __int16 v101;
  _BYTE v102[168];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105[2];
  char *v106;
  uint64_t v107;
  _WORD v108[64];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = sub_1C573E74C(a2, *(_QWORD *)a1);
  v5 = v4;
  if (!v4)
    return v5;
  for (i = 0; i != 504; i += 168)
  {
    v7 = &v102[i];
    *v7 = 0;
    v7[1] = &v102[i + 24];
    v7[2] = 0x800000000;
    v7[11] = &v102[i + 104];
    v7[12] = 0x800000000;
  }
  v8 = (llvm **)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF));
  v9 = v8[16];
  v10 = v8[20];
  UnderlyingObject = llvm::getUnderlyingObject(v8[12], (const llvm::Value *)6);
  if (*((_BYTE *)UnderlyingObject + 16) != 59
    || !sub_1C5744288((uint64_t)v102, (uint64_t)UnderlyingObject, v5)
    || (v12 = llvm::getUnderlyingObject(v9, (const llvm::Value *)6), *((_BYTE *)v12 + 16) != 59)
    || !sub_1C5744288((uint64_t)&v103, (uint64_t)v12, v5)
    || (v13 = llvm::getUnderlyingObject(v10, (const llvm::Value *)6), v14 = *((unsigned __int8 *)v13 + 16), v14 >= 4)
    && (v14 != 59 || !sub_1C5744288((uint64_t)&v104, (uint64_t)v13, v5)))
  {
    v5 = 0;
    goto LABEL_60;
  }
  v16 = *(_QWORD **)(v5 + 32);
  v15 = *(_QWORD *)(v5 + 40);
  if (v16 == (_QWORD *)(v15 + 40) || !v16)
  {
LABEL_69:
    v41 = *(_QWORD *)(v15 + 40);
    if (v41 == v15 + 40)
      goto LABEL_89;
    v18 = (_QWORD *)(v41 - 24);
    v42 = v41 ? v41 - 24 : 0;
    if (*(unsigned __int8 *)(v42 + 16) - 29 > 0xA)
      goto LABEL_89;
LABEL_74:
    v43 = *(_QWORD *)(v3 + 64);
    v44 = *(_QWORD **)(v15 + 56);
    v45 = v44[10];
    if (v45)
      v46 = v45 - 24;
    else
      v46 = 0;
    v47 = *(_QWORD *)(v46 + 48);
    v48 = operator new(0x68uLL);
    v49 = (char *)(v48 + 8);
    v48[13] = v48[13] & 0x38000000 | 1;
    *(_QWORD *)v48 = 0;
    *((_QWORD *)v48 + 1) = 0;
    *((_QWORD *)v48 + 2) = 0;
    *((_QWORD *)v48 + 3) = v48 + 8;
    if (v47)
      v50 = v47 - 24;
    else
      v50 = 0;
    v51 = *(llvm::PointerType **)(v43 + 2864);
    v52 = (llvm::Type *)(*(_DWORD *)(*v44 + 8) >> 8);
    v106 = "handle";
    v108[8] = 259;
    llvm::AllocaInst::AllocaInst((uint64_t)(v48 + 8), v51, v52, 0, (uint64_t)&v106, v50);
    v96 = v43 + 616;
    RuntimeFunction = llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v43 + 616, *(_QWORD *)(v3 + 24), 137);
    v54 = v53;
    v55 = 0;
    v106 = (char *)v108;
    v107 = 0x1000000000;
    v56 = *(_DWORD *)(v5 + 20);
    v57 = v56 & 0x7FFFFFF;
    v58 = (_QWORD *)(v5 - 32 * v57);
    v59 = *(unsigned __int8 *)(v5 + 16);
    v98 = (char *)v108;
    if (v59 == 84)
    {
      if ((v56 & 0x80000000) == 0)
      {
LABEL_82:
        v60 = 0;
LABEL_83:
        if (v58 == (_QWORD *)(v5 - 32 * v55 - 32 * v60 - 32))
        {
          LODWORD(v61) = 0;
        }
        else
        {
          LODWORD(v61) = 0;
          v62 = 32 * v57 - 32 * v55 - 32 * v60 - 32;
          do
          {
            v63 = *v58;
            if (v61 >= HIDWORD(v107))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v61 + 1, 8);
              LODWORD(v61) = v107;
            }
            *(_QWORD *)&v106[8 * v61] = v63;
            v61 = (v107 + 1);
            LODWORD(v107) = v107 + 1;
            v58 += 4;
            v62 -= 32;
          }
          while (v62);
          if (v61 >= HIDWORD(v107))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v61 + 1, 8);
            LODWORD(v61) = v107;
          }
        }
        v97 = (uint64_t)v49;
        *(_QWORD *)&v106[8 * v61] = v49;
        v64 = v107;
        v65 = (v107 + 1);
        LODWORD(v107) = v107 + 1;
        v66 = (uint64_t *)v106;
        v67 = (v64 + 2);
        v101 = 257;
        v68 = operator new(32 * v67 + 80);
        v69 = &v68[4 * v67];
        *((_DWORD *)v69 + 5) = *((_DWORD *)v69 + 5) & 0x38000000 | v67 & 0x7FFFFFF;
        if ((_DWORD)v67)
        {
          v70 = (uint64_t **)RuntimeFunction;
          do
          {
            *v68 = 0;
            v68[1] = 0;
            v68[2] = 0;
            v68[3] = v69;
            v68 += 4;
          }
          while (v68 != v69);
          v71 = *((_DWORD *)v69 + 5) & 0xC0000000;
        }
        else
        {
          v71 = 0;
          v70 = (uint64_t **)RuntimeFunction;
        }
        *v69 = *v70[2];
        v69[1] = 0;
        *((_BYTE *)v69 + 16) = 84;
        *((_BYTE *)v69 + 17) = 0;
        *((_WORD *)v69 + 9) = 0;
        *((_DWORD *)v69 + 5) = v71 | v67 & 0x7FFFFFF;
        *(_OWORD *)(v69 + 3) = 0u;
        v72 = v69 + 3;
        *(_OWORD *)(v69 + 5) = 0u;
        *((_DWORD *)v69 + 14) = 0;
        v73 = *(_QWORD *)(v5 + 40);
        v74 = (uint64_t *)(v5 + 24);
        v69[5] = v73;
        *(_WORD *)(v73 + 18) &= ~0x8000u;
        if ((*((_BYTE *)v69 + 23) & 0x10) != 0)
        {
          v91 = *(_QWORD *)(v73 + 56);
          if (v91)
          {
            v92 = *(llvm::ValueSymbolTable **)(v91 + 104);
            if (v92)
            {
              llvm::ValueSymbolTable::reinsertValue(v92, (llvm::Value *)v69);
              v70 = (uint64_t **)RuntimeFunction;
            }
          }
        }
        v75 = *v74;
        v69[3] = *v74;
        v69[4] = v74;
        *(_QWORD *)(v75 + 8) = v72;
        *v74 = (uint64_t)v72;
        v69[8] = 0;
        llvm::CallInst::init((uint64_t ***)v69, v70, v54, v66, v65, 0, 0, (uint64_t)v100);
        if (v54 && !*(_BYTE *)(v54 + 16))
          *((_WORD *)v69 + 9) = (*(_WORD *)(v54 + 18) >> 2) & 0xFFC | *((_WORD *)v69 + 9) & 0xF003;
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v5 + 40) + 40, (uint64_t ***)v5);
        v76 = *(_QWORD *)(v5 + 24);
        v77 = *(_QWORD **)(v5 + 32);
        *v77 = v76;
        *(_QWORD *)(v76 + 8) = v77;
        *v74 = 0;
        *(_QWORD *)(v5 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v5);
        v78 = (uint64_t **)llvm::OpenMPIRBuilder::getOrCreateRuntimeFunction(v96, *(_QWORD *)(v3 + 24), 138);
        v80 = v79;
        v105[0] = v69[-4 * (*((_DWORD *)v69 + 5) & 0x7FFFFFF) + 4];
        v105[1] = v97;
        v101 = 257;
        v81 = (char *)operator new(0xB0uLL);
        v82 = v81;
        v83 = 0;
        v84 = (llvm::Value *)(v81 + 96);
        *((_DWORD *)v81 + 29) = *((_DWORD *)v81 + 29) & 0x38000000 | 3;
        do
        {
          v85 = &v81[v83];
          *(_QWORD *)v85 = 0;
          *((_QWORD *)v85 + 1) = 0;
          *((_QWORD *)v85 + 2) = 0;
          *((_QWORD *)v85 + 3) = v84;
          v83 += 32;
        }
        while (v83 != 96);
        v86 = *v78[2];
        *(_OWORD *)(v81 + 120) = 0u;
        v87 = v81 + 120;
        *((_QWORD *)v81 + 12) = v86;
        *((_QWORD *)v81 + 13) = 0;
        v81[112] = 84;
        v81[113] = 0;
        *((_WORD *)v81 + 57) = 0;
        *((_DWORD *)v81 + 29) = *((_DWORD *)v81 + 29) & 0xC0000000 | 3;
        *(_OWORD *)(v81 + 136) = 0u;
        *((_DWORD *)v81 + 38) = 0;
        v88 = v18[5];
        v89 = v18 + 3;
        *((_QWORD *)v81 + 17) = v88;
        *(_WORD *)(v88 + 18) &= ~0x8000u;
        if ((v81[119] & 0x10) != 0)
        {
          v93 = *(_QWORD *)(v88 + 56);
          if (v93)
          {
            v94 = *(llvm::ValueSymbolTable **)(v93 + 104);
            if (v94)
              llvm::ValueSymbolTable::reinsertValue(v94, v84);
          }
        }
        v90 = *v89;
        *((_QWORD *)v82 + 15) = *v89;
        *((_QWORD *)v82 + 16) = v89;
        *(_QWORD *)(v90 + 8) = v87;
        *v89 = (uint64_t)v87;
        *((_QWORD *)v82 + 20) = 0;
        llvm::CallInst::init((uint64_t ***)v84, v78, v80, v105, 2, 0, 0, (uint64_t)v100);
        if (v80 && !*(_BYTE *)(v80 + 16))
          *((_WORD *)v82 + 57) = (*(_WORD *)(v80 + 18) >> 2) & 0xFFC | *((_WORD *)v82 + 57) & 0xF003;
        if (v106 != v98)
          free(v106);
        v5 = 1;
        goto LABEL_111;
      }
    }
    else
    {
      if (v59 == 39)
        v55 = (*(_DWORD *)(v5 + 80) + 1);
      else
        v55 = 2;
      if ((v56 & 0x80000000) == 0)
        goto LABEL_82;
    }
    v95 = *(v58 - 1);
    if ((v95 & 0xFFFFFFFF0) != 0)
      v60 = (*((_DWORD *)v58 - 3) - *(_DWORD *)((char *)v58 - v95));
    else
      v60 = 0;
    goto LABEL_83;
  }
  v17 = 0;
  while (1)
  {
    v18 = v16 - 3;
    v19 = *((unsigned __int8 *)v16 - 8) - 33;
    if (v19 > 0x37)
      goto LABEL_16;
    if (((1 << (*((_BYTE *)v16 - 8) - 33)) & 0x808001D0000010) != 0)
      goto LABEL_67;
    if (((1 << (*((_BYTE *)v16 - 8) - 33)) & 0x8000000000041) == 0)
    {
      if (v19 == 27 && (*((_WORD *)v16 - 3) & 0x301) != 0)
        goto LABEL_67;
      goto LABEL_16;
    }
    v24 = v16[5];
    if (v24 && (*(_BYTE *)(v24 + 17) & 0x30) != 0)
      goto LABEL_16;
    v25 = *((_DWORD *)v16 - 1);
    if (v25 < 0)
    {
      v27 = &v18[-4 * (v25 & 0x7FFFFFF)];
      v30 = *(v27 - 1);
      v28 = v27 - 1;
      v29 = v30;
      if (v30)
        break;
    }
LABEL_39:
    if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v16 - 3), 45) & 1) == 0
      && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v16 - 3), 44))
    {
      goto LABEL_67;
    }
LABEL_16:
    if ((llvm::Instruction::mayThrow((llvm::Instruction *)(v16 - 3)) & 1) != 0
      || !llvm::Instruction::willReturn((llvm::Instruction *)(v16 - 3)))
    {
      goto LABEL_67;
    }
    v20 = *((unsigned __int8 *)v16 - 8) - 33;
    if (v20 <= 0x37)
    {
      if (((1 << (*((_BYTE *)v16 - 8) - 33)) & 0x8000000000041) != 0)
      {
        v21 = v16[5];
        if (!v21 || (*(_BYTE *)(v21 + 20) & 4) == 0 && (*(_BYTE *)(v21 + 17) & 0x10) == 0)
        {
          LODWORD(v106) = 7;
          if (sub_1C53E4BBC((uint64_t)(v16 - 3), (__int32 *)&v106, 1uLL))
          {
            v26 = *(v16 - 7);
            if (!v26 || *(_BYTE *)(v26 + 16) || *(_QWORD *)(v26 + 24) != v16[6] || *(_DWORD *)(v26 + 36) != 7)
              goto LABEL_67;
          }
          if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v16 - 3), 66) & 1) == 0
            && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(v16 - 3), 44) & 1) == 0)
          {
            goto LABEL_67;
          }
        }
      }
      else if (((1 << (*((_BYTE *)v16 - 8) - 33)) & 0x808001C8000010) != 0
             || v20 == 28 && (*((_WORD *)v16 - 3) & 0x301) != 0)
      {
        goto LABEL_67;
      }
    }
    v22 = v16 + 1;
    v16 = (_QWORD *)v16[1];
    v17 = 1;
    if (v16 == (_QWORD *)(v22[1] + 40) || v16 == 0)
    {
      v15 = *(_QWORD *)(v5 + 40);
      goto LABEL_69;
    }
  }
  v31 = -v29;
  while (1)
  {
    v32 = *(_DWORD *)(*(_QWORD *)((char *)v28 + v31) + 8);
    v33 = v32 > 7;
    v34 = (1 << v32) & 0x83;
    if (v33 || v34 == 0)
      break;
    v31 += 16;
    if (!v31)
      goto LABEL_39;
  }
LABEL_67:
  if ((v17 & 1) != 0)
  {
    v15 = *(_QWORD *)(v5 + 40);
    goto LABEL_74;
  }
LABEL_89:
  v5 = 0;
LABEL_111:
  **(_BYTE **)(a1 + 16) |= v5;
LABEL_60:
  v36 = 504;
  do
  {
    v37 = &v102[v36];
    v38 = *(char **)&v102[v36 - 80];
    if ((char *)&v97 + v36 != v38)
      free(v38);
    v39 = (_BYTE *)*((_QWORD *)v37 - 20);
    if (v37 - 144 != v39)
      free(v39);
    v36 -= 168;
  }
  while (v36);
  return v5;
}

uint64_t sub_1C5744288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v7;
  void **v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::DataLayout *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _QWORD *v29;
  const void *v30;
  unsigned int IndexTypeSizeInBits;

  v3 = *(_QWORD *)(a2 + 64);
  if (*(_BYTE *)(v3 + 8) != 17)
    return 0;
  v7 = *(_QWORD *)(v3 + 32);
  v29 = (_QWORD *)(a1 + 8);
  sub_1C4848C0C((unsigned int *)(a1 + 8), v7, 0);
  v8 = (void **)(a1 + 88);
  if (v7 > *(unsigned int *)(a1 + 100))
  {
    *(_DWORD *)(a1 + 96) = 0;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 88, a1 + 104, v7, 8);
    v9 = *(char **)(a1 + 88);
    v10 = v7;
LABEL_11:
    bzero(v9, 8 * v10);
    goto LABEL_12;
  }
  v11 = *(unsigned int *)(a1 + 96);
  if (v11 >= v7)
    v12 = v7;
  else
    v12 = *(unsigned int *)(a1 + 96);
  if (v12)
    bzero(*v8, 8 * v12);
  v10 = v7 - v11;
  if (v7 > v11)
  {
    v9 = (char *)*v8 + 8 * v11;
    goto LABEL_11;
  }
LABEL_12:
  *(_DWORD *)(a1 + 96) = v7;
  v13 = *(_QWORD *)(a2 + 40);
  if (v13 == *(_QWORD *)(a3 + 40))
  {
    v15 = v13 + 40;
    v16 = *(_QWORD *)(v13 + 48);
    if (v16 != v13 + 40)
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 40);
      v18 = (llvm::DataLayout *)(v17 + 272);
      v28 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(v17 + 504) + 4) + 7) >> 3;
      do
      {
        if (v16)
          v19 = v16 - 24;
        else
          v19 = 0;
        if (v19 == a3)
          break;
        if (*(_BYTE *)(v19 + 16) == 61)
        {
          v20 = *(uint64_t **)(v19 - 32);
          IndexTypeSizeInBits = llvm::DataLayout::getIndexTypeSizeInBits((uint64_t)v18, *v20);
          if (IndexTypeSizeInBits > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v30, 0, 0);
          else
            v30 = 0;
          v22 = llvm::Value::stripAndAccumulateConstantOffsets((uint64_t)v20, v18, &v30, 1, 0, 0, v21);
          if (IndexTypeSizeInBits > 0x40)
          {
            v23 = *(_QWORD *)v30;
            MEMORY[0x1CAA32F9C]();
          }
          else
          {
            v23 = (uint64_t)((_QWORD)v30 << -(uint64_t)IndexTypeSizeInBits) >> -(uint64_t)IndexTypeSizeInBits;
          }
          if (v22 == a2)
          {
            v24 = v23 / v28;
            *(_QWORD *)(*v29 + 8 * v24) = llvm::getUnderlyingObject(*(llvm **)(v19 - 64), (const llvm::Value *)6);
            *((_QWORD *)*v8 + v24) = v19;
          }
        }
        v16 = *(_QWORD *)(v16 + 8);
      }
      while (v16 != v15);
    }
    v25 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v25)
    {
LABEL_37:
      *(_QWORD *)a1 = a2;
      return 1;
    }
    v26 = 0;
    v27 = 8 * v25;
    while (*(_QWORD *)(*v29 + v26) && *(_QWORD *)((char *)*v8 + v26))
    {
      v26 += 8;
      if (v27 == v26)
        goto LABEL_37;
    }
  }
  return 0;
}

BOOL sub_1C57444E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v13;
  uint64_t v14;
  uint64_t **v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  llvm::UndefValue *Ident;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  llvm::UndefValue **v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  llvm::UndefValue ***v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  uint64_t v67;
  llvm::Instruction *v68;
  unsigned int v69;
  BOOL v70;
  uint64_t v71;
  llvm::Instruction *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  llvm::Value **SrcLocStr;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86[2];
  unsigned __int8 *v87;
  llvm::UndefValue *v88;
  char v89;

  v4 = a4;
  v85 = a4;
  v8 = sub_1C5744C58(a3 + 128, a2);
  if (*(_QWORD *)(a3 + 128) + 24 * *(unsigned int *)(a3 + 144) == v8)
    return 0;
  v9 = *(_QWORD *)(v8 + 8);
  if (!v9)
    return 0;
  v10 = *(unsigned int *)(v9 + 8);
  v11 = v4 ? v10 + 1 : *(unsigned int *)(v9 + 8);
  if (v11 < 2)
    return 0;
  if (v4)
    goto LABEL_9;
  if (!(_DWORD)v10)
    return 0;
  v15 = *(uint64_t ***)v9;
  v16 = *(_QWORD *)v9 + 8 * v10;
  while (1)
  {
    v17 = sub_1C573E74C(*v15, a3);
    if (!v17)
      goto LABEL_23;
    v4 = v17;
    v18 = *(unsigned __int8 *)(v17 + 16);
    if (v18 == 84)
    {
      v19 = 0;
    }
    else if (v18 == 39)
    {
      v19 = (*(_DWORD *)(v17 + 80) + 1);
    }
    else
    {
      v19 = 2;
    }
    v20 = *(_DWORD *)(v17 + 20);
    if (v20 < 0 && (v31 = v17 - 32 * (v20 & 0x7FFFFFF), v32 = *(_QWORD *)(v31 - 8), (v32 & 0xFFFFFFFF0) != 0))
    {
      v22 = -(uint64_t)(v20 & 0x7FFFFFF);
      v21 = (*(_DWORD *)(v31 - 12) - *(_DWORD *)(v31 - v32));
    }
    else
    {
      v21 = 0;
      v22 = -(uint64_t)(v20 & 0x7FFFFFF);
    }
    v23 = -32 * v19 - 32 * v21 - 32 * v22 - 32;
    v24 = *(_QWORD *)(a1 + 64);
    if ((v23 >> 5))
    {
      if (**(_QWORD **)(v17 + 32 * v22) != *(_QWORD *)(v24 + 2856))
        goto LABEL_23;
      if ((v23 >> 5) >= 2)
      {
        v25 = v17 + 32 * v22 + 32;
        v26 = (v23 >> 5) - 1;
        while (*(unsigned __int8 *)(*(_QWORD *)v25 + 16) <= 0x1Bu)
        {
          v25 += 32;
          if (!--v26)
            goto LABEL_29;
        }
        goto LABEL_23;
      }
    }
LABEL_29:
    v27 = *(uint64_t **)(v24 + 29568);
    v80 = a2;
    v86[0] = 0;
    if (!sub_1C614F7B0(v27, &v80, v86))
      break;
    v28 = *(_QWORD *)(a1 + 64);
    v29 = sub_1C5744C58(v28 + 25360, a2);
    if (*(_QWORD *)(v28 + 25360) + 24 * *(unsigned int *)(v28 + 25376) == v29)
      v30 = 0;
    else
      v30 = *(_QWORD *)(v29 + 8);
    if (*(_DWORD *)(v30 + 8))
    {
      v68 = (llvm::Instruction *)sub_1C573E74C(**(uint64_t ***)v30, v28 + 25232);
      llvm::Instruction::moveAfter((llvm::Instruction *)v4, v68);
      goto LABEL_80;
    }
LABEL_23:
    if (++v15 == (uint64_t **)v16)
      return 0;
  }
  v63 = *(_QWORD *)(a2 + 80);
  v64 = v63 - 24;
  if (!v63)
    v64 = 0;
  v65 = v64 + 40;
  for (i = *(_QWORD *)(v64 + 48); i != v65; i = *(_QWORD *)(i + 8))
  {
    v67 = i - 24;
    if (!i)
      v67 = 0;
    if (*(_BYTE *)(v67 + 16) != 83)
    {
      v69 = *(unsigned __int8 *)(i - 8) - 38;
      v70 = v69 > 0x38;
      v71 = (1 << v69) & 0x100060000000001;
      if (v70 || v71 == 0)
        v65 = i;
      else
        v65 = *(_QWORD *)(i + 8);
      break;
    }
  }
  if (v65)
    v73 = (llvm::Instruction *)(v65 - 24);
  else
    v73 = 0;
  llvm::Instruction::moveBefore((llvm::Instruction *)v4, v73);
LABEL_80:
  v85 = v4;
LABEL_9:
  v13 = *(unsigned __int8 *)(v4 + 16);
  if (v13 < 0x1C)
    goto LABEL_59;
  switch(v13)
  {
    case 'T':
      v14 = 0;
LABEL_42:
      v33 = 0;
      v34 = *(_DWORD *)(v4 + 20);
      v35 = -(uint64_t)(v34 & 0x7FFFFFF);
      if (v34 < 0)
      {
        v78 = v4 - 32 * (v34 & 0x7FFFFFF);
        v79 = *(_QWORD *)(v78 - 8);
        if ((v79 & 0xFFFFFFFF0) != 0)
          v33 = (*(_DWORD *)(v78 - 12) - *(_DWORD *)(v78 - v79));
        else
          v33 = 0;
      }
      v36 = v4 - 32 * v14 - 32 * v33 - 32;
      v37 = (uint64_t **)(v4 + 32 * v35);
      if ((uint64_t **)v36 == v37)
        break;
      v38 = **v37;
      v39 = *(_QWORD *)(a1 + 64);
      if (v38 != *(_QWORD *)(v39 + 2856))
        break;
      v89 = 1;
      v88 = 0;
      v80 = a3;
      v81 = (_QWORD *)a2;
      v82 = &v88;
      v83 = &v89;
      v40 = *(_QWORD *)(a1 + 32);
      v41 = *(unsigned int *)(v40 + 8);
      if ((_DWORD)v41)
      {
        v42 = *(uint64_t **)v40;
        v43 = 8 * v41;
        do
        {
          v44 = *v42++;
          sub_1C5735FC4(a3, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C5744CB0, (uint64_t)&v80, v44);
          v43 -= 8;
        }
        while (v43);
        Ident = v88;
        if (v88)
          v46 = v89 == 0;
        else
          v46 = 1;
        if (!v46)
        {
LABEL_52:
          v47 = *(_DWORD *)(v4 + 20) & 0x7FFFFFF;
          v48 = -v47;
          v49 = (llvm::UndefValue **)(v4 - 32 * v47);
          if (*v49)
          {
            v50 = v4 + 32 * v48;
            v52 = *(_QWORD **)(v50 + 16);
            v51 = (_QWORD *)(v50 + 16);
            *v52 = *(v51 - 1);
            v53 = *(v51 - 1);
            if (v53)
              *(_QWORD *)(v53 + 16) = *v51;
          }
          *v49 = Ident;
          if (Ident)
          {
            v56 = *((_QWORD *)Ident + 1);
            v54 = (llvm::UndefValue ***)((char *)Ident + 8);
            v55 = v56;
            v57 = v4 + 32 * v48;
            *(_QWORD *)(v57 + 8) = v56;
            if (v56)
              *(_QWORD *)(v55 + 16) = v57 + 8;
            *(_QWORD *)(v57 + 16) = v54;
            *v54 = v49;
          }
          break;
        }
        v39 = *(_QWORD *)(a1 + 64);
      }
      if (!*(_QWORD *)(v39 + 1008))
      {
        v74 = *(_QWORD *)(a2 + 80);
        if (v74)
          v75 = v74 - 24;
        else
          v75 = 0;
        v76 = *(_QWORD *)(v75 + 48);
        v86[0] = v75;
        v86[1] = v76;
        v87 = 0;
        sub_1C62683AC(v39 + 616, v86);
        if (v87)
          llvm::MetadataTracking::untrack((uint64_t)&v87, v87);
        v39 = *(_QWORD *)(a1 + 64);
      }
      LODWORD(v86[0]) = 0;
      SrcLocStr = (llvm::Value **)llvm::OpenMPIRBuilder::getOrCreateSrcLocStr(v39 + 616, ";unknown;unknown;0;0;;",
                                    (llvm::Type *)0x16,
                                    v86);
      Ident = llvm::OpenMPIRBuilder::getOrCreateIdent(*(_QWORD *)(a1 + 64) + 616, SrcLocStr, v86[0], 0, 0);
      goto LABEL_52;
    case '\'':
      v14 = (*(_DWORD *)(v4 + 80) + 1);
      goto LABEL_42;
    case '!':
      v14 = 2;
      goto LABEL_42;
  }
LABEL_59:
  LOBYTE(v86[0]) = 0;
  v80 = a3;
  v81 = &v85;
  v82 = (_QWORD *)a2;
  v83 = (char *)a1;
  v84 = v86;
  v58 = *(_QWORD *)(a1 + 32);
  v59 = *(unsigned int *)(v58 + 8);
  if (!(_DWORD)v59)
    return 0;
  v60 = *(uint64_t **)v58;
  v61 = 8 * v59;
  do
  {
    v62 = *v60++;
    sub_1C5735FC4(a3, (unsigned int (*)(uint64_t, _QWORD, uint64_t))sub_1C5744D44, (uint64_t)&v80, v62);
    v61 -= 8;
  }
  while (v61);
  return LOBYTE(v86[0]) != 0;
}

uint64_t sub_1C57449F4(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2)
  {
    v2 = a2;
    v3 = (uint64_t **)result;
    do
    {
      v4 = *(_QWORD *)(v2 + 24);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 16) == 84)
        {
          v5 = *(_DWORD *)(v4 + 20);
          v6 = v4 - 32 * (v5 & 0x7FFFFFF);
          if (v6 <= v2)
          {
            if (v5 < 0 && (v22 = *(_QWORD *)(v6 - 8), (v22 & 0xFFFFFFFF0) != 0))
              v7 = (*(_DWORD *)(v6 - 12) - *(_DWORD *)(v6 - v22));
            else
              v7 = 0;
            v8 = (uint64_t *)(v4 - 32);
            if (v4 - 32 - 32 * v7 > v2)
            {
              v9 = *v8;
              if (*v8)
              {
                if (!*(_BYTE *)(v9 + 16) && *(_QWORD *)(v9 + 24) == *(_QWORD *)(v4 + 72))
                {
                  if ((v5 & 0x40000000) != 0)
                    v6 = *(_QWORD *)(v4 - 8);
                  if ((*(_DWORD *)(v9 + 32) & 0xFu) - 7 <= 1)
                  {
                    v10 = *(_QWORD *)(v9 + 8);
                    if (v10)
                    {
                      v11 = *v3;
                      v12 = (*v3)[1];
                      v13 = ((v2 - v6) >> 5);
                      while (1)
                      {
                        v14 = *(_QWORD *)(v10 + 24);
                        v15 = *(_BYTE *)(v14 + 16) == 84 ? *(_QWORD *)(v10 + 24) : 0;
                        v16 = v15 && v15 - 32 == v10;
                        if (v16
                          && ((v18 = *(_DWORD *)(v15 + 20), (v18 & 0x80000000) == 0)
                           || (*(_QWORD *)(v15 - 32 * (v18 & 0x7FFFFFF) - 8) & 0xFFFFFFFF0) == 0)
                          && (v14 == v4
                           || (v19 = *(_QWORD *)(v14 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) + 32 * v13),
                               result = sub_1C61EAAB0(*v11, v19, &v23),
                               (result & 1) != 0)
                           || (result = sub_1C5724C80(v19, *(_QWORD *)(v12 + 64) + 3648)) != 0))
                        {
                          v17 = 3;
                        }
                        else
                        {
                          v17 = 0;
                        }
                        if (v17 <= 1)
                          v17 = 1;
                        if (v17 != 3)
                          break;
                        v10 = *(_QWORD *)(v10 + 8);
                        if (!v10)
                        {
                          v4 = *(_QWORD *)(v2 + 24);
                          v5 = *(_DWORD *)(v4 + 20);
                          goto LABEL_40;
                        }
                      }
                    }
                    else
                    {
LABEL_40:
                      if ((v5 & 0x40000000) != 0)
                        v20 = *(_QWORD *)(v4 - 8);
                      else
                        v20 = v4 - 32 * (v5 & 0x7FFFFFF);
                      v21 = (uint64_t)v3[1];
                      if ((*(_WORD *)(v9 + 18) & 1) != 0)
                        llvm::Function::BuildLazyArguments((llvm::Function *)v9);
                      v23 = *(_QWORD *)(v9 + 88) + 40 * ((v2 - v20) >> 5);
                      result = (uint64_t)sub_1C61EA984(v21, &v23);
                    }
                  }
                }
              }
            }
          }
        }
      }
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1C5744C14(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_1C573E74C(a2, *a1);
  if (v3)
    sub_1C57449F4(a1[1], *(_QWORD *)(v3 + 8));
  return 0;
}

uint64_t sub_1C5744C58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (sub_1C617A1AC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
}

uint64_t sub_1C5744CB0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v5 = sub_1C573E74C(a2, *(_QWORD *)a1);
  if (v5 && *(_QWORD *)(a1 + 8) == a3)
  {
    v6 = *(uint64_t **)(a1 + 16);
    v7 = *(_QWORD *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
    if (*v6 == v7)
    {
      v7 = *v6;
    }
    else if (*(unsigned __int8 *)(v7 + 16) > 3u)
    {
      v7 = 0;
    }
    else
    {
      **(_BYTE **)(a1 + 24) = *v6 == 0;
    }
    *v6 = v7;
  }
  return 0;
}

uint64_t sub_1C5744D44(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  llvm::OptimizationRemarkEmitter *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  void **v16;
  char *v17;
  unint64_t v18;
  void **v19;
  char *v20;
  unint64_t v21;
  void **v22;
  llvm::OptimizationRemarkEmitter *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  void **v30;
  char *v31;
  unint64_t v32;
  void **v33;
  unint64_t v34;
  void **v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  uint64_t v39;
  char v40;
  void *__p;
  char v42;
  void *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t (**v46)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v47;
  char v48;
  uint64_t v49;
  __int128 v50;
  const char *v51;
  const char *v52;
  uint64_t v53;
  char v54;
  char v55;
  void *v56;
  uint64_t v57;
  _BYTE v58[260];
  int v59;
  uint64_t v60;
  _OWORD v61[5];
  void *v62;
  unsigned int v63;
  _QWORD v64[36];

  v64[34] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)a1;
  v7 = sub_1C573E74C(a2, *(_QWORD *)a1);
  if (v7)
  {
    v8 = (_QWORD *)v7;
    if (v7 != **(_QWORD **)(a1 + 8) && *(_QWORD *)(a1 + 16) == a3)
    {
      if (*(_QWORD *)(v7 + 48))
      {
        v23 = (llvm::OptimizationRemarkEmitter *)(*(uint64_t (**)(_QWORD, _QWORD))(v5 + 48))(*(_QWORD *)(v5 + 56), *(_QWORD *)(*(_QWORD *)(v7 + 40) + 56));
        v24 = ****(_QWORD ****)v23;
        if (*(_QWORD *)(v24 + 128)
          || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v24 + 72) + 48))(*(_QWORD *)(v24 + 72)))
        {
          v25 = *(_QWORD *)(v8[5] + 56);
          llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)v61, (const llvm::DebugLoc *)(v8 + 6));
          v26 = v8[5];
          v47 = 9;
          v48 = 2;
          v49 = v25;
          v50 = v61[0];
          v51 = "openmp-opt";
          v52 = "OMP170";
          v53 = 6;
          v54 = 0;
          v55 = 0;
          v56 = v58;
          v57 = 0x400000000;
          v58[256] = 0;
          v59 = -1;
          v60 = v26;
          v46 = &off_1E814E500;
          *(_QWORD *)&v61[0] = "OpenMP runtime call ";
          *((_QWORD *)&v61[0] + 1) = 20;
          sub_1C53B17B4((uint64_t)&v56, (const void **)v61);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v38, "OpenMPOptRuntime", 0x10uLL, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
          v27 = sub_1C47E3888((uint64_t)&v46, (uint64_t)&v38);
          *(_QWORD *)&v61[0] = " deduplicated.";
          *((_QWORD *)&v61[0] + 1) = 14;
          sub_1C53B17B4(v27 + 80, (const void **)v61);
          sub_1C61998EC((uint64_t)v61, v27);
          *(_QWORD *)&v61[0] = &off_1E814E500;
          if (v42 < 0)
            operator delete(__p);
          if (v40 < 0)
            operator delete(v38);
          v38 = " [";
          v39 = 2;
          sub_1C53B17B4((uint64_t)&v62, (const void **)&v38);
          v38 = "OMP170";
          v39 = 6;
          sub_1C53B17B4((uint64_t)&v62, (const void **)&v38);
          v38 = "]";
          v39 = 1;
          sub_1C53B17B4((uint64_t)&v62, (const void **)&v38);
          sub_1C61998EC((uint64_t)&v38, (uint64_t)v61);
          v38 = &off_1E814E500;
          *(_QWORD *)&v61[0] = &off_1E814E790;
          v28 = (char *)v62;
          if (v63)
          {
            v29 = (unint64_t)v63 << 6;
            do
            {
              v30 = (void **)&v28[v29];
              if (v28[v29 - 17] < 0)
                operator delete(*(v30 - 5));
              if (*((char *)v30 - 41) < 0)
                operator delete(*(v30 - 8));
              v29 -= 64;
            }
            while (v29);
            v28 = (char *)v62;
          }
          if (v28 != (char *)v64)
            free(v28);
          v46 = &off_1E814E790;
          v31 = (char *)v56;
          if ((_DWORD)v57)
          {
            v32 = (unint64_t)v57 << 6;
            do
            {
              v33 = (void **)&v31[v32];
              if (v31[v32 - 17] < 0)
                operator delete(*(v33 - 5));
              if (*((char *)v33 - 41) < 0)
                operator delete(*(v33 - 8));
              v32 -= 64;
            }
            while (v32);
            v31 = (char *)v56;
          }
          if (v31 != v58)
            free(v31);
          llvm::OptimizationRemarkEmitter::emit(v23, (llvm::DiagnosticInfoOptimizationBase *)&v38);
          v38 = &off_1E814E790;
          v20 = (char *)v43;
          if (!v44)
            goto LABEL_75;
          v34 = (unint64_t)v44 << 6;
          do
          {
            v35 = (void **)&v20[v34];
            if (v20[v34 - 17] < 0)
              operator delete(*(v35 - 5));
            if (*((char *)v35 - 41) < 0)
              operator delete(*(v35 - 8));
            v34 -= 64;
          }
          while (v34);
          goto LABEL_74;
        }
      }
      else
      {
        v11 = (llvm::OptimizationRemarkEmitter *)(*(uint64_t (**)(_QWORD, uint64_t))(v5 + 48))(*(_QWORD *)(v5 + 56), a3);
        v12 = ****(_QWORD ****)v11;
        if (*(_QWORD *)(v12 + 128)
          || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v12 + 72) + 48))(*(_QWORD *)(v12 + 72)))
        {
          llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v46, (uint64_t)"openmp-opt", (uint64_t)"OMP170", 6, a3);
          *(_QWORD *)&v61[0] = "OpenMP runtime call ";
          *((_QWORD *)&v61[0] + 1) = 20;
          sub_1C53B17B4((uint64_t)&v56, (const void **)v61);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v38, "OpenMPOptRuntime", 0x10uLL, *(void **)(v6 + 8), *(_QWORD *)(v6 + 16));
          v13 = sub_1C47E3888((uint64_t)&v46, (uint64_t)&v38);
          *(_QWORD *)&v61[0] = " deduplicated.";
          *((_QWORD *)&v61[0] + 1) = 14;
          sub_1C53B17B4(v13 + 80, (const void **)v61);
          sub_1C61998EC((uint64_t)v61, v13);
          *(_QWORD *)&v61[0] = &off_1E814E500;
          if (v42 < 0)
            operator delete(__p);
          if (v40 < 0)
            operator delete(v38);
          v38 = " [";
          v39 = 2;
          sub_1C53B17B4((uint64_t)&v62, (const void **)&v38);
          v38 = "OMP170";
          v39 = 6;
          sub_1C53B17B4((uint64_t)&v62, (const void **)&v38);
          v38 = "]";
          v39 = 1;
          sub_1C53B17B4((uint64_t)&v62, (const void **)&v38);
          sub_1C61998EC((uint64_t)&v38, (uint64_t)v61);
          v38 = &off_1E814E500;
          *(_QWORD *)&v61[0] = &off_1E814E790;
          v14 = (char *)v62;
          if (v63)
          {
            v15 = (unint64_t)v63 << 6;
            do
            {
              v16 = (void **)&v14[v15];
              if (v14[v15 - 17] < 0)
                operator delete(*(v16 - 5));
              if (*((char *)v16 - 41) < 0)
                operator delete(*(v16 - 8));
              v15 -= 64;
            }
            while (v15);
            v14 = (char *)v62;
          }
          if (v14 != (char *)v64)
            free(v14);
          v46 = &off_1E814E790;
          v17 = (char *)v56;
          if ((_DWORD)v57)
          {
            v18 = (unint64_t)v57 << 6;
            do
            {
              v19 = (void **)&v17[v18];
              if (v17[v18 - 17] < 0)
                operator delete(*(v19 - 5));
              if (*((char *)v19 - 41) < 0)
                operator delete(*(v19 - 8));
              v18 -= 64;
            }
            while (v18);
            v17 = (char *)v56;
          }
          if (v17 != v58)
            free(v17);
          llvm::OptimizationRemarkEmitter::emit(v11, (llvm::DiagnosticInfoOptimizationBase *)&v38);
          v38 = &off_1E814E790;
          v20 = (char *)v43;
          if (!v44)
            goto LABEL_75;
          v21 = (unint64_t)v44 << 6;
          do
          {
            v22 = (void **)&v20[v21];
            if (v20[v21 - 17] < 0)
              operator delete(*(v22 - 5));
            if (*((char *)v22 - 41) < 0)
              operator delete(*(v22 - 8));
            v21 -= 64;
          }
          while (v21);
LABEL_74:
          v20 = (char *)v43;
LABEL_75:
          if (v20 != (char *)&v45)
            free(v20);
        }
      }
      llvm::CallGraphUpdater::removeCallSite(*(llvm::CallGraphUpdater **)(v5 + 40), (llvm::CallBase *)v8);
      v9 = 1;
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v8, **(llvm::Value ***)(a1 + 8), (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v8[5] + 40, (uint64_t ***)v8);
      v36 = v8[3];
      v37 = (_QWORD *)v8[4];
      *v37 = v36;
      *(_QWORD *)(v36 + 8) = v37;
      v8[3] = 0;
      v8[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v8);
      **(_BYTE **)(a1 + 32) = 1;
      return v9;
    }
  }
  return 0;
}

uint64_t sub_1C57453E4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  sub_1C629CCBC(a1);
  result = MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    *(_QWORD *)a1 = operator new(24 * v5, (std::align_val_t)8uLL);
    return sub_1C629CEFC(a1, (_QWORD *)a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t sub_1C574544C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  _DWORD *v4;
  _QWORD *v5;
  uint64_t v7;

  v3 = sub_1C573E74C(a2, *a1);
  v4 = (_DWORD *)a1[1];
  v7 = *(_QWORD *)(v3 + 40);
  v5 = sub_1C629D158(v4, &v7);
  sub_1C4774094((llvm::SmallPtrSetImplBase *)(v5 + 1), v3);
  return 0;
}

void sub_1C57454A8(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18[37];

  v2 = a2;
  v18[36] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(72 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C629D28C(a1, v7, &v7[9 * v8]);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v18;
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = v10 + 5;
      *v10 = v12;
      v10[1] = (uint64_t)(v10 + 5);
      v14 = *(void **)(v11 + 16);
      v15 = *(void **)(v11 + 24);
      if (v15 == v14)
      {
        v10[2] = (uint64_t)v13;
        v16 = *(unsigned int *)(a1 + v9 + 36);
        v14 = *(void **)(v11 + 24);
        if ((_DWORD)v16)
        {
          memmove(v13, v14, 8 * v16);
          v15 = *(void **)(v11 + 16);
          v14 = *(void **)(v11 + 24);
        }
      }
      else
      {
        v10[2] = (uint64_t)v15;
        *(_QWORD *)(v11 + 24) = v14;
        v15 = v14;
      }
      v17 = a1 + v9;
      v10[3] = *(_QWORD *)(a1 + v9 + 32);
      *((_DWORD *)v10 + 8) = *(_DWORD *)(a1 + v9 + 40);
      *(_QWORD *)(v17 + 32) = 4;
      *(_DWORD *)(v17 + 40) = 0;
      v10 += 9;
      if (v14 != v15)
        free(v14);
    }
    v9 += 72;
  }
  while (v9 != 288);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(72 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C629D28C(a1, v18, v10);
}

unint64_t sub_1C57456C4(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 48 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C629D370(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C629D370(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C574572C(uint64_t a1, uint64_t a2, uint64_t a3, llvm *a4, uint64_t a5)
{
  llvm::BasicBlock *v7;
  uint64_t v8;
  llvm::DomTreeUpdater *v9;
  llvm::BasicBlock *v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  llvm::Instruction *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  llvm::Instruction *v17;
  _BYTE v19[32];
  __int16 v20;

  if (a5)
    v7 = (llvm::BasicBlock *)(a5 - 24);
  else
    v7 = 0;
  v8 = **(_QWORD **)a1;
  v9 = **(llvm::DomTreeUpdater ***)(a1 + 8);
  v20 = 257;
  v10 = (llvm::BasicBlock *)sub_1C5EBD70C(a4, v7, 0, v8, v9, 0, (llvm::Twine *)v19, 0);
  v11 = (_QWORD *)*((_QWORD *)a4 + 5);
  if (v11 == (_QWORD *)((char *)a4 + 40))
  {
    v13 = 0;
  }
  else
  {
    if (v11)
      v12 = (unsigned __int8 *)(v11 - 3);
    else
      v12 = 0;
    if (v12[16] - 29 >= 0xB)
      v13 = 0;
    else
      v13 = (llvm::Instruction *)v12;
  }
  llvm::Instruction::setSuccessor(v13, 0, **(llvm::BasicBlock ***)(a1 + 16));
  v14 = **(_QWORD **)(a1 + 24);
  v15 = *(_QWORD *)(v14 + 40);
  if (v15 == v14 + 40)
  {
    v17 = 0;
  }
  else
  {
    if (v15)
      v16 = (unsigned __int8 *)(v15 - 24);
    else
      v16 = 0;
    if (v16[16] - 29 >= 0xB)
      v17 = 0;
    else
      v17 = (llvm::Instruction *)v16;
  }
  return llvm::Instruction::setSuccessor(v17, 0, v10);
}

void sub_1C5745820()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5745834()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E817C128;
  return result;
}

void sub_1C5745858(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817C128;
}

uint64_t sub_1C5745874(uint64_t a1, uint64_t a2, uint64_t a3, llvm *a4, uint64_t a5)
{
  llvm::BasicBlock *v7;
  uint64_t v8;
  llvm::DomTreeUpdater *v9;
  llvm::BasicBlock *v10;
  _QWORD *v11;
  unsigned __int8 *v12;
  llvm::Instruction *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  llvm::Instruction *v17;
  _BYTE v19[32];
  __int16 v20;

  if (a5)
    v7 = (llvm::BasicBlock *)(a5 - 24);
  else
    v7 = 0;
  v8 = **(_QWORD **)a1;
  v9 = **(llvm::DomTreeUpdater ***)(a1 + 8);
  v20 = 257;
  v10 = (llvm::BasicBlock *)sub_1C5EBD70C(a4, v7, 0, v8, v9, 0, (llvm::Twine *)v19, 0);
  v11 = (_QWORD *)*((_QWORD *)a4 + 5);
  if (v11 == (_QWORD *)((char *)a4 + 40))
  {
    v13 = 0;
  }
  else
  {
    if (v11)
      v12 = (unsigned __int8 *)(v11 - 3);
    else
      v12 = 0;
    if (v12[16] - 29 >= 0xB)
      v13 = 0;
    else
      v13 = (llvm::Instruction *)v12;
  }
  llvm::Instruction::setSuccessor(v13, 0, **(llvm::BasicBlock ***)(a1 + 16));
  v14 = **(_QWORD **)(a1 + 24);
  v15 = *(_QWORD *)(v14 + 40);
  if (v15 == v14 + 40)
  {
    v17 = 0;
  }
  else
  {
    if (v15)
      v16 = (unsigned __int8 *)(v15 - 24);
    else
      v16 = 0;
    if (v16[16] - 29 >= 0xB)
      v17 = 0;
    else
      v17 = (llvm::Instruction *)v16;
  }
  return llvm::Instruction::setSuccessor(v17, 0, v10);
}

uint64_t sub_1C5745964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t result;

  result = a4;
  *a8 = a7;
  return result;
}

void sub_1C5745978()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C574598C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E817C170;
  return result;
}

void sub_1C57459B0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E817C170;
}

uint64_t sub_1C57459CC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5723E28(v0);
}

void sub_1C57459F4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E817C1B8;
  sub_1C62878B8((llvm::CallGraphUpdater *)(a1 + 32));
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C5745A24(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E817C1B8;
  sub_1C62878B8((llvm::CallGraphUpdater *)(a1 + 32));
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5745A6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t **v5;
  llvm::omp ***v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  llvm::omp **v11;
  llvm::omp **v12;
  unsigned int v13;
  uint64_t v14;
  llvm::omp *v15;
  void **v16;
  void *v17;
  uint64_t ModuleFlag;
  int v19;
  uint64_t i;
  _QWORD *v21;
  _QWORD v22[2];
  int v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  llvm::OptimizationRemarkEmitter *(*v27)(uint64_t *, const llvm::Function *);
  uint64_t **v28;
  _BYTE *v29;
  _BYTE *v30;
  __int128 v31;
  uint64_t v32;
  int v33;
  char v34;
  llvm::OptimizationRemarkEmitter *(*v35)(uint64_t *, const llvm::Function *);
  uint64_t **v36;
  const char *v37;
  _QWORD v38[2];
  int v39;
  void *__p;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45[2];
  unsigned int v46;
  void *v47[3];
  void *v48;
  void *v49;
  _BYTE v50[5520];
  _BYTE v51[616];
  _QWORD v52[3623];
  _QWORD v53[4];
  _QWORD v54[6];
  _QWORD v55[2];
  _QWORD *v56;
  uint64_t v57;
  _QWORD v58[17];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = (llvm::omp ***)v5;
  v7 = v4;
  v58[16] = *MEMORY[0x1E0C80C00];
  if (llvm::Module::getModuleFlag(**v5, "openmp", 6uLL))
    v8 = byte_1ED80D348 == 0;
  else
    v8 = 0;
  if (!v8 || (llvm::CallGraphSCCPass::skipSCC(v7, (uint64_t ****)v6) & 1) != 0)
    return 0;
  v56 = v58;
  v57 = 0x1000000000;
  v11 = v6[2];
  v12 = v6[3];
  if (v11 == v12)
    goto LABEL_23;
  v13 = 0;
  do
  {
    v14 = *((_QWORD *)*v11 + 1);
    if (!v14)
      goto LABEL_21;
    if (*(_BYTE *)(v14 + 16))
    {
      if (*(_BYTE *)(v14 + 16) == 3 && (*(_DWORD *)(v14 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_21;
    }
    else if (*(_QWORD *)(v14 + 72) == v14 + 72 && (*(_BYTE *)(v14 + 34) & 0x80) == 0)
    {
      goto LABEL_21;
    }
    if (v13 >= HIDWORD(v57))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v13 + 1, 8);
      v13 = v57;
    }
    v56[v13] = v14;
    v13 = v57 + 1;
    LODWORD(v57) = v57 + 1;
LABEL_21:
    ++v11;
  }
  while (v11 != v12);
  if (v13)
  {
    v15 = **v6;
    llvm::omp::getDeviceKernels(v15, (uint64_t)v47);
    v16 = **(void ****)(v7 + 8);
    do
    {
      v17 = *v16;
      v16 += 2;
    }
    while (v17 != &llvm::CallGraphWrapperPass::ID);
    *(_QWORD *)(v7 + 480) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), &llvm::CallGraphWrapperPass::ID)+ 32);
    *(_QWORD *)(v7 + 488) = v6;
    v45[0] = 0;
    v45[1] = 0;
    v46 = 0;
    v43 = 0;
    v44 = v45;
    v38[0] = 0;
    v38[1] = 0;
    v39 = 0;
    v41 = 0;
    v42 = 0;
    __p = 0;
    sub_1C573F0A4(v38, v56, &v56[v57]);
    v53[1] = 0;
    v53[0] = 0;
    v53[2] = v54;
    v53[3] = 0x400000000;
    v54[4] = v55;
    v55[0] = 0;
    v54[5] = 0;
    v55[1] = 1;
    sub_1C5720134((uint64_t)v51, *(uint64_t **)(*(v41 - 1) + 40), (uint64_t)&v43, (uint64_t)v53, (uint64_t)v38, (uint64_t)v47);
    ModuleFlag = llvm::Module::getModuleFlag((uint64_t)v15, "openmp-device", 0xDuLL);
    v19 = dword_1ED80DE88;
    LODWORD(v31) = 256;
    if (!ModuleFlag)
      v19 = 32;
    *((_QWORD *)&v31 + 1) = v7 + 32;
    v32 = 0;
    v33 = v19;
    v34 = 1;
    v35 = sub_1C5745EC8;
    v36 = &v44;
    v37 = "openmp-opt";
    sub_1C62874B8((uint64_t)v50, (uint64_t)v38, (uint64_t)v51, &v31);
    v22[0] = 0;
    v22[1] = 0;
    v23 = 0;
    v24 = *(_QWORD *)(*v56 + 40);
    v25 = (void **)&v56;
    v26 = v7 + 32;
    v27 = sub_1C5745EC8;
    v28 = &v44;
    v29 = v51;
    v30 = v50;
    v9 = sub_1C572045C((uint64_t)v22, 0);
    MEMORY[0x1CAA32FB4](v22[0], 8);
    llvm::Attributor::~Attributor((llvm::Attributor *)v50);
    MEMORY[0x1CAA32FB4](v52[3620], 8);
    MEMORY[0x1CAA32FB4](v52[3571], 8);
    for (i = 0; i != -3268; i -= 19)
    {
      sub_1C629CCBC((uint64_t)&v52[i + 3568]);
      MEMORY[0x1CAA32FB4](v52[i + 3568], 8);
      v21 = (_QWORD *)v52[i + 3557];
      if (&v52[i + 3559] != v21)
        free(v21);
    }
    llvm::OpenMPIRBuilder::~OpenMPIRBuilder((llvm::OpenMPIRBuilder *)v52);
    sub_1C56826A4((uint64_t)v51);
    sub_1C4926AE8((uint64_t)v53);
    if (__p)
    {
      v41 = __p;
      operator delete(__p);
    }
    MEMORY[0x1CAA32FB4](v38[0], 8);
    sub_1C629D600(v45[0], v46);
    MEMORY[0x1CAA32FB4](v45[0], 8);
    if (v48)
    {
      v49 = v48;
      operator delete(v48);
    }
    MEMORY[0x1CAA32FB4](v47[0], 8);
  }
  else
  {
LABEL_23:
    v9 = 0;
  }
  if (v56 != v58)
    free(v56);
  return v9;
}

BOOL sub_1C5745EC0(uint64_t a1)
{
  return llvm::CallGraphUpdater::finalize((llvm::CallGraphUpdater *)(a1 + 32));
}

llvm::OptimizationRemarkEmitter *sub_1C5745EC8(uint64_t *a1, const llvm::Function *a2)
{
  llvm::OptimizationRemarkEmitter *result;
  llvm::OptimizationRemarkEmitter **v4;
  llvm::OptimizationRemarkEmitter *v5;
  uint64_t v6;
  const llvm::Function *v7;

  v7 = a2;
  v4 = (llvm::OptimizationRemarkEmitter **)(sub_1C629D414(*a1, (uint64_t *)&v7) + 1);
  result = *v4;
  if (!*v4)
  {
    v5 = (llvm::OptimizationRemarkEmitter *)operator new();
    result = llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v5, a2);
    v6 = (uint64_t)*v4;
    *v4 = result;
    if (v6)
    {
      sub_1C4EF268C((uint64_t)v4, v6);
      return *v4;
    }
  }
  return result;
}

_QWORD *sub_1C5745F40(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C629D52C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

__n128 sub_1C5745FF8(_WORD *a1, __n128 *a2, int **a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80DEC8, "openmp-opt-shared-limit", 0x17uLL);
  word_1ED80DED2 = (32 * (*a1 & 3)) | word_1ED80DED2 & 0xFF9F;
  result = *a2;
  xmmword_1ED80DEE8 = (__int128)*a2;
  v7 = *a3;
  dword_1ED80DF48 = **a3;
  byte_1ED80DF5C = 1;
  dword_1ED80DF58 = *v7;
  return result;
}

uint64_t sub_1C574607C(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::OptimizationRemarkEmitterAnalysis::Key, a2)
       + 8;
}

uint64_t sub_1C57460A4(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::OptimizationRemarkEmitterAnalysis::Key, a2)
       + 8;
}

uint64_t sub_1C57460CC()
{
  char v1;
  int v2;
  int *v3;
  __n128 v4;
  int v5;

  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Disable OpenMP specific optimizations.";
  v4.n128_u64[1] = 38;
  v2 = 1;
  v1 = 0;
  v3 = (int *)&v1;
  sub_1C629D65C(&v5, &v4, &v2, (char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED80D2C8, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Enable the OpenMP region merging optimization.";
  v4.n128_u64[1] = 46;
  v2 = 1;
  v1 = 0;
  v3 = (int *)&v1;
  sub_1C629D7AC(&v5, &v4, &v2, (char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED80D388, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Disable function internalization.";
  v4.n128_u64[1] = 33;
  v2 = 1;
  v1 = 0;
  v3 = (int *)&v1;
  sub_1C629D8FC((llvm::cl::Option *)&unk_1ED80D448, "openmp-opt-disable-internalization", &v5, &v4, &v2, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80D448, &dword_1C475E000);
  LOBYTE(v5) = 0;
  v4.n128_u64[0] = (unint64_t)&v5;
  LODWORD(v3) = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED80D508, "openmp-print-icv-values", &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80D508, &dword_1C475E000);
  LOBYTE(v5) = 0;
  v4.n128_u64[0] = (unint64_t)&v5;
  LODWORD(v3) = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED80D5C8, "openmp-print-gpu-kernels", &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80D5C8, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"[WIP] Tries to hide the latency of host to device memory transfers";
  v4.n128_u64[1] = 66;
  v5 = 1;
  LOBYTE(v2) = 0;
  v3 = &v2;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED80D688, "openmp-hide-memory-transfer-latency", &v4, &v5, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80D688, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Disable OpenMP optimizations involving deglobalization.";
  v4.n128_u64[1] = 55;
  v2 = 1;
  v1 = 0;
  v3 = (int *)&v1;
  sub_1C629D8FC((llvm::cl::Option *)&unk_1ED80D748, "openmp-opt-disable-deglobalization", &v5, &v4, &v2, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80D748, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Disable OpenMP optimizations involving SPMD-ization.";
  v4.n128_u64[1] = 52;
  v2 = 1;
  v1 = 0;
  v3 = (int *)&v1;
  sub_1C629D8FC((llvm::cl::Option *)&unk_1ED80D808, "openmp-opt-disable-spmdization", &v5, &v4, &v2, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80D808, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Disable OpenMP optimizations involving folding.";
  v4.n128_u64[1] = 47;
  v2 = 1;
  v1 = 0;
  v3 = (int *)&v1;
  sub_1C629D8FC((llvm::cl::Option *)&unk_1ED80D8C8, "openmp-opt-disable-folding", &v5, &v4, &v2, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80D8C8, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Disable OpenMP optimizations that replace the state machine.";
  v4.n128_u64[1] = 60;
  v2 = 1;
  v1 = 0;
  v3 = (int *)&v1;
  sub_1C629DA58(&v5, &v4, &v2, (char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED80D988, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Disable OpenMP optimizations that eliminate barriers.";
  v4.n128_u64[1] = 53;
  v2 = 1;
  v1 = 0;
  v3 = (int *)&v1;
  sub_1C629DBA8(&v5, &v4, &v2, (char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED80DA48, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Print the current module after OpenMP optimizations.";
  v4.n128_u64[1] = 52;
  v2 = 1;
  v1 = 0;
  v3 = (int *)&v1;
  sub_1C629DCF8(&v5, &v4, &v2, (char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED80DB08, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Print the current module before OpenMP optimizations.";
  v4.n128_u64[1] = 53;
  v2 = 1;
  v1 = 0;
  v3 = (int *)&v1;
  sub_1C629D8FC((llvm::cl::Option *)&unk_1ED80DBC8, "openmp-opt-print-module-before", &v5, &v4, &v2, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80DBC8, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Inline all applicible functions on the device.";
  v4.n128_u64[1] = 46;
  v2 = 1;
  v1 = 0;
  v3 = (int *)&v1;
  sub_1C629DE48(&v5, &v4, &v2, (char **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED80DC88, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Enables more verbose remarks.";
  v4.n128_u64[1] = 29;
  v2 = 1;
  v1 = 0;
  v3 = (int *)&v1;
  sub_1C629D8FC((llvm::cl::Option *)&unk_1ED80DD48, "openmp-opt-verbose-remarks", &v5, &v4, &v2, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80DD48, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximal number of attributor iterations.";
  v4.n128_u64[1] = 40;
  v2 = 256;
  v3 = &v2;
  sub_1C6147F28((uint64_t)&unk_1ED80DE08, "openmp-opt-max-iterations", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED80DE08, &dword_1C475E000);
  v5 = 1;
  v4.n128_u64[0] = (unint64_t)"Maximum amount of shared memory to use.";
  v4.n128_u64[1] = 39;
  v2 = -1;
  v3 = &v2;
  sub_1C629DF98(&v5, &v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED80DEC8, &dword_1C475E000);
}

void llvm::initializePartialInlinerLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED831EF0);
  if (v2 != -1)
  {
    v5[0] = sub_1C5746670;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED831EF0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5746670(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v2);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Partial Inliner";
  *(_QWORD *)(v3 + 8) = 15;
  *(_QWORD *)(v3 + 16) = "partial-inliner";
  *(_QWORD *)(v3 + 24) = 15;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F3308;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C574BBD8;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5746718(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F3308;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817C268;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED831EF0);
  if (v3 != -1)
  {
    v7[0] = sub_1C5746670;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED831EF0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C57467E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  BOOL v19;
  uint64_t v20;
  llvm::Function *v21;
  llvm::Function *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD, llvm::Function *);
  uint64_t v28;
  uint64_t **v29;
  _DWORD *v30;
  _OWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  int64_t v36;
  llvm::BasicBlock *v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  uint64_t v49;
  char *v50;
  const llvm::BasicBlock *v51;
  uint64_t v52;
  uint64_t *BlockProfileCount;
  char v54;
  uint64_t v55;
  uint64_t *v56;
  char v57;
  unint64_t v58;
  llvm::BasicBlock *v59;
  llvm::BasicBlock **v60;
  char *v61;
  char *v62;
  unsigned int v63;
  char *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  char *v70;
  int v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  int v80;
  int v81;
  llvm::BasicBlock *v82;
  llvm::BasicBlock **v83;
  uint64_t v84;
  llvm::BasicBlock **v85;
  llvm::BasicBlock *v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  llvm::BasicBlock *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  int v96;
  int64_t v97;
  llvm::BasicBlock *v98;
  _QWORD *v99;
  unint64_t v100;
  int v101;
  _BOOL4 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t *v109;
  char *v110;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t *v117;
  int v118;
  BOOL v119;
  unsigned int v120;
  uint64_t v121;
  unsigned int v122;
  unsigned int v123;
  uint64_t v124;
  uint64_t *v125;
  int v126;
  BOOL v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  uint64_t v131;
  int v132;
  BOOL v133;
  unsigned int v134;
  uint64_t SingleSuccessor;
  void *v136;
  uint64_t v137;
  llvm::BasicBlock *v138;
  uint64_t v139;
  uint64_t *v140;
  int v141;
  unsigned __int32 v142;
  uint64_t v143;
  uint64_t v144;
  llvm::BasicBlock *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  llvm::BasicBlock **v150;
  llvm::BasicBlock *v151;
  int v152;
  int v153;
  llvm::BasicBlock *v154;
  char *v155;
  size_t v156;
  size_t v157;
  uint64_t v158;
  char *v159;
  unint64_t v160;
  void **v161;
  char *v162;
  unint64_t v163;
  void **v164;
  int v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  char *v174;
  unint64_t v175;
  void **v176;
  char *v177;
  unint64_t v178;
  void **v179;
  void *v180;
  uint64_t v181;
  char **v182;
  uint64_t *v183;
  char **v184;
  uint64_t v185;
  char *v186;
  unint64_t v187;
  _QWORD *v188;
  char *v189;
  int v190;
  uint64_t v191;
  uint64_t v192;
  int32x2_t *****v193;
  uint64_t v194;
  unint64_t v195;
  int32x2_t ****v196;
  _QWORD *v198;
  unint64_t v200;
  int32x2_t ****v201;
  int32x2_t *v202;
  unint64_t v203;
  uint64_t v204;
  unsigned int v205;
  uint64_t v206;
  int32x2_t *****v207;
  int32x2_t ****v208;
  int v209;
  int v210;
  uint64_t v211;
  uint64_t v212;
  __int128 v213;
  _QWORD *v214;
  unint64_t v215;
  int32x2_t ****v216;
  int32x2_t *v217;
  unint64_t v218;
  uint64_t v219;
  unsigned int v220;
  uint64_t v221;
  int32x2_t *****v222;
  int32x2_t ****v223;
  int v224;
  int v225;
  void *v226;
  _QWORD *v228;
  unint64_t v229;
  int32x2_t ****v230;
  int32x2_t *v231;
  unint64_t v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  int32x2_t *****v236;
  int32x2_t ****v237;
  int v238;
  int v239;
  uint64_t v240;
  _QWORD *v241;
  unint64_t v242;
  int32x2_t ****v243;
  int32x2_t *v244;
  unint64_t v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  int32x2_t *****v249;
  int32x2_t ****v250;
  int v251;
  int v252;
  uint64_t v253;
  void *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t **v257;
  unsigned __int32 v258;
  llvm::Function *v259;
  _QWORD *v260;
  _QWORD *v261;
  uint64_t v262;
  uint64_t v263;
  unint64_t v264;
  unint64_t *v265;
  uint64_t v266;
  int32x2_t *v267;
  unint64_t v268;
  uint64_t v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t *v272;
  uint64_t v273;
  int v274;
  int v275;
  unint64_t v277;
  unint64_t *v278;
  uint64_t v279;
  int32x2_t *v280;
  unint64_t v281;
  uint64_t v282;
  unsigned int v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  int v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  BOOL v295;
  uint64_t v296;
  uint64_t *v297;
  uint64_t v298;
  char *v299;
  uint64_t *v300;
  char *v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  unint64_t v305;
  char *v306;
  _OWORD *v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  char *v311;
  unsigned int v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  uint64_t *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  int v330;
  int v331;
  uint64_t v332;
  _QWORD *v333;
  int v334;
  uint64_t v335;
  _QWORD *v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  int v340;
  uint64_t v341;
  int v342;
  uint64_t v343;
  int v344;
  uint64_t *v345;
  uint64_t v346;
  uint64_t **v347;
  llvm::Function *v348;
  uint64_t *v349;
  uint64_t v350;
  int v351;
  int v352;
  uint64_t v353;
  uint64_t v354;
  char *v355;
  uint64_t *v356;
  uint64_t v357;
  int v358;
  unint64_t v359;
  uint64_t v360;
  llvm::BasicBlock *v361;
  _QWORD *v362;
  unint64_t v363;
  int v364;
  uint64_t v365;
  __int128 v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t CodeRegion;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  char *v374;
  unint64_t v375;
  llvm::OptimizationRemarkEmitter *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  unsigned int v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  char *v386;
  unint64_t v387;
  void **v388;
  char *v389;
  unint64_t v390;
  void **v391;
  int v392;
  uint64_t v393;
  unint64_t *v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unint64_t *v398;
  _QWORD *v399;
  unint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  int v404;
  unsigned int v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  unsigned int v412;
  uint64_t v413;
  int v414;
  unsigned int v415;
  unint64_t v416;
  unint64_t *v417;
  uint64_t v418;
  uint64_t v419;
  unsigned int v420;
  BOOL v421;
  int v423;
  uint64_t v424;
  unsigned int v425;
  BOOL v426;
  char v428;
  _QWORD *v429;
  _QWORD *v430;
  _QWORD *v431;
  uint64_t v432;
  uint64_t v433;
  unsigned int v434;
  BOOL v435;
  uint64_t v438;
  unsigned int v439;
  BOOL v440;
  _QWORD *v442;
  int v443;
  llvm::BasicBlock *v444;
  _QWORD *v445;
  int v446;
  llvm::BasicBlock *v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  llvm::BasicBlock *v452;
  unint64_t v453;
  void *v454;
  unint64_t v455;
  int v456;
  uint64_t v457;
  char *v458;
  unint64_t v459;
  _QWORD *v460;
  int32x2_t ****v461;
  _QWORD *v462;
  unint64_t v463;
  int32x2_t ****v464;
  int32x2_t *v465;
  unint64_t v466;
  uint64_t v467;
  unsigned int v468;
  uint64_t v469;
  int32x2_t *****v470;
  int32x2_t ****v471;
  int v472;
  int v473;
  int32x2_t ****v474;
  _QWORD *v476;
  unint64_t v477;
  int32x2_t ****v478;
  int32x2_t *v479;
  unint64_t v480;
  uint64_t v481;
  unsigned int v482;
  uint64_t v483;
  int32x2_t *****v484;
  int32x2_t ****v485;
  int v486;
  int v487;
  uint64_t v488;
  uint64_t v489;
  _QWORD *v490;
  unint64_t v491;
  uint64_t v492;
  uint64_t v493;
  unint64_t v494;
  unint64_t *v495;
  uint64_t v496;
  int32x2_t *v497;
  unint64_t v498;
  uint64_t v499;
  unsigned int v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t v503;
  int v504;
  int v505;
  unint64_t v507;
  unint64_t *v508;
  uint64_t v509;
  int32x2_t *v510;
  unint64_t v511;
  uint64_t v512;
  unsigned int v513;
  uint64_t v514;
  uint64_t *v515;
  uint64_t v516;
  int v517;
  int v518;
  uint64_t *v519;
  llvm::BasicBlock *v520;
  llvm::BasicBlock *v521;
  _QWORD *v522;
  _QWORD *v523;
  uint64_t v524;
  uint64_t v525;
  llvm::BasicBlock *v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  int v530;
  llvm::ValueAsMetadata *v531;
  uint64_t v532;
  _QWORD *v533;
  _QWORD *v534;
  llvm::Value *v535;
  char *v536;
  uint64_t v537;
  _QWORD *v538;
  _QWORD *v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t j;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  llvm::ValueSymbolTable *v547;
  uint64_t v548;
  uint64_t *v549;
  uint64_t *v550;
  uint64_t v551;
  int v552;
  uint64_t v553;
  uint64_t v554;
  _DWORD *v555;
  _DWORD *v556;
  int v557;
  uint64_t v558;
  uint64_t v559;
  _DWORD *v560;
  int v561;
  uint64_t v562;
  llvm::Value **v563;
  llvm::Value *v564;
  uint64_t v565;
  uint64_t v566;
  unint64_t *v567;
  uint64_t v568;
  int32x2_t ****v569;
  uint64_t v570;
  _QWORD *v572;
  unint64_t v574;
  int32x2_t ****v575;
  int32x2_t *v576;
  unint64_t v577;
  uint64_t v578;
  unsigned int v579;
  uint64_t v580;
  int32x2_t *****v581;
  int32x2_t ****v582;
  int v583;
  int v584;
  uint64_t v585;
  unint64_t v586;
  int32x2_t *****v587;
  int32x2_t *****v588;
  int32x2_t ****v589;
  _QWORD *v591;
  unint64_t v593;
  int32x2_t ****v594;
  int32x2_t *v595;
  unint64_t v596;
  uint64_t v597;
  unsigned int v598;
  uint64_t v599;
  int32x2_t *****v600;
  int32x2_t ****v601;
  int v602;
  int v603;
  uint64_t v604;
  uint64_t v605;
  unint64_t v606;
  uint64_t *v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  _QWORD *v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  unsigned __int8 *v616;
  llvm::User *v617;
  uint64_t **v618;
  llvm::Value *v619;
  uint64_t **v620;
  uint64_t *v621;
  _QWORD *v622;
  uint64_t v623;
  uint64_t *v624;
  uint64_t *v625;
  unint64_t v626;
  int v627;
  llvm::Function *v628;
  unint64_t v629;
  char *v630;
  char *v631;
  llvm::BasicBlock **v632;
  llvm::BasicBlock *v633;
  uint64_t v634;
  uint64_t v635;
  uint64_t v636;
  llvm::BasicBlock **v637;
  uint64_t v638;
  unint64_t v639;
  unint64_t v640;
  char *v641;
  uint64_t *v642;
  llvm::BasicBlock **v643;
  uint64_t v644;
  unint64_t v645;
  int v646;
  unint64_t v647;
  uint64_t v648;
  uint64_t v649;
  uint64_t v650;
  llvm::OptimizationRemarkEmitter *v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t v654;
  uint64_t v655;
  uint64_t v656;
  unsigned int v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t *v660;
  uint64_t v661;
  uint64_t v662;
  uint64_t v663;
  char *v664;
  unint64_t v665;
  void **v666;
  char *v667;
  unint64_t v668;
  void **v669;
  uint64_t v670;
  char *v671;
  int64_t v672;
  llvm::BasicBlock *v673;
  _BOOL8 v674;
  int v675;
  uint64_t v676;
  char *v677;
  char *v678;
  uint64_t **v679;
  char v680;
  uint64_t v681;
  unint64_t v682;
  char *v683;
  uint64_t v684;
  uint64_t v685;
  unint64_t v686;
  uint64_t **v687;
  char *v688;
  uint64_t v689;
  char *v690;
  char *v691;
  uint64_t v692;
  unsigned int v693;
  char *__p;
  char *__pc;
  _QWORD *__pa;
  uint64_t *__pb;
  llvm::BasicBlock *v699;
  llvm::BasicBlock *v700;
  llvm::BasicBlock *v701;
  BOOL v702;
  void *v703;
  uint64_t *v704;
  char *v705;
  char **v706;
  _QWORD v707[2];
  uint64_t *v708;
  __int128 v709;
  char v710;
  uint64_t v711[2];
  int v712;
  void *v713;
  void *v714;
  uint64_t v715;
  _QWORD v716[2];
  int v717;
  void *v718;
  void *v719;
  uint64_t v720;
  _QWORD v721[2];
  int v722;
  void *v723;
  void *v724;
  uint64_t v725;
  void *v726[2];
  char v727;
  void *v728;
  char v729;
  void *v730;
  llvm::Function *v731;
  char *v732;
  __int128 v733;
  __int128 v734;
  llvm::Function *v735;
  _BYTE *v736;
  uint64_t v737;
  _BYTE v738[24];
  uint64_t v739;
  char ***v740;
  uint64_t v741;
  char **v742;
  uint64_t v743;
  llvm::OptimizationRemarkEmitter *v744;
  __int128 v745;
  __int128 v746;
  _QWORD *v747;
  uint64_t v748;
  unsigned int v749;
  __int128 v750;
  __int128 v751;
  _QWORD v752[3];
  _QWORD v753[5];
  void *v754;
  uint64_t v755;
  _QWORD v756[6];
  char v757;
  uint64_t v758;
  void *v759;
  void *v760;
  void *v761;
  uint64_t v762;
  _BYTE v763[7];
  char v764;
  void *v765;
  char v766;
  __int128 v767;
  uint64_t v768;
  void *__src;
  llvm::Value *v770;
  _BYTE *v771;
  uint64_t v772;
  _BYTE v773[72];
  uint64_t v774;
  int v775;
  uint64_t v776[2];
  uint64_t **v777;
  llvm::OptimizationRemarkEmitter *v778;
  __int128 v779;
  __int128 v780;
  void *__dst;
  uint64_t v782;
  int v783;
  char v784;
  __int128 v785;
  __int128 v786;
  llvm::Value *v787;
  _QWORD *v788;
  uint64_t v789;
  _QWORD v790[6];
  _QWORD v791[2];
  __int128 v792;
  unsigned int v793;
  char v794;
  uint64_t v795[2];
  int v796;
  uint64_t v797;
  llvm::Function *v798;
  char v799;
  int v800;
  void *v801;
  uint64_t v802;
  _DWORD v803[58];
  __n128 v804;
  unint64_t *v805;
  int32x2_t ****v806;
  __n128 *v807;
  void *v808;
  uint64_t v809;
  _QWORD v810[34];
  __n128 v811;
  uint64_t v812;
  uint64_t v813;
  unint64_t v814;
  const char *v815;
  const char *v816;
  uint64_t v817;
  char v818;
  char v819;
  __int128 v820;
  _QWORD v821[3];
  void *v822;
  uint64_t v823;
  void *v824;
  char v825;
  uint64_t v826;
  void *v827;
  void *v828;
  char v829;
  int v830;
  uint64_t v831;
  uint64_t v832;

  v832 = *MEMORY[0x1E0C80C00];
  if (!byte_1ED80E008)
  {
    v3 = a2 + 24;
    v704 = 0;
    v703 = 0;
    v705 = 0;
    v4 = -1;
    v5 = v3;
    do
    {
      v5 = *(_QWORD *)(v5 + 8);
      ++v4;
    }
    while (v5 != v3);
    sub_1C4DB1D18((uint64_t)&v703, v4);
    for (i = *(_QWORD *)(a2 + 32); i != v3; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v7 = i - 56;
      else
        v7 = 0;
      if (*(_QWORD *)(v7 + 8))
      {
        if (i && *(_BYTE *)(v7 + 16) == 3)
        {
          if ((*(_DWORD *)(v7 + 20) & 0x7FFFFFF) != 0)
            goto LABEL_16;
        }
        else if (*(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 72) != v7 + 72 || (*(_BYTE *)(v7 + 34) & 0x80) != 0)
        {
LABEL_16:
          v8 = (char *)v704;
          if (v704 >= (uint64_t *)v705)
          {
            v10 = (char *)v703;
            v11 = ((char *)v704 - (_BYTE *)v703) >> 3;
            v12 = v11 + 1;
            if ((unint64_t)(v11 + 1) >> 61)
LABEL_1213:
              abort();
            v13 = v705 - (_BYTE *)v703;
            if ((v705 - (_BYTE *)v703) >> 2 > v12)
              v12 = v13 >> 2;
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
              v14 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v14 = v12;
            if (v14)
            {
              if (v14 >> 61)
LABEL_1214:
                sub_1C4764EE4();
              v15 = (char *)operator new(8 * v14);
            }
            else
            {
              v15 = 0;
            }
            v16 = &v15[8 * v11];
            *(_QWORD *)v16 = v7;
            v9 = (uint64_t *)(v16 + 8);
            if (v8 != v10)
            {
              do
              {
                v17 = *((_QWORD *)v8 - 1);
                v8 -= 8;
                *((_QWORD *)v16 - 1) = v17;
                v16 -= 8;
              }
              while (v8 != v10);
              v8 = (char *)v703;
            }
            v703 = v16;
            v704 = v9;
            v705 = &v15[8 * v14];
            if (v8)
              operator delete(v8);
          }
          else
          {
            *v704 = v7;
            v9 = (uint64_t *)(v8 + 8);
          }
          v704 = v9;
        }
      }
    }
    v18 = (char *)v703;
    if (v703 == v704)
      goto LABEL_1210;
    v19 = 0;
    v18 = (char *)v704;
    v20 = a1;
LABEL_37:
    v22 = (llvm::Function *)*((_QWORD *)v18 - 1);
    v18 -= 8;
    v21 = v22;
    v704 = (uint64_t *)v18;
    if (!*((_QWORD *)v22 + 1))
      goto LABEL_54;
    v23 = 0;
    if ((llvm::Function::hasAddressTaken(v21, 0, 0, 1, 0, 0) & 1) != 0)
      goto LABEL_53;
    v24 = *((_QWORD *)v21 + 14);
    if (v24 && ((*(_BYTE *)(v24 + 12) & 4) != 0 || (*(_BYTE *)(v24 + 15) & 8) != 0)
      || llvm::ProfileSummaryInfo::isFunctionEntryCold(*(llvm::ProfileSummaryInfo **)(v20 + 88), v21)
      || !*((_QWORD *)v21 + 1))
    {
      v23 = 0;
      goto LABEL_53;
    }
    llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v707, v21);
    v702 = v19;
    if (!*(_QWORD *)(*(_QWORD *)(v20 + 88) + 8))
      goto LABEL_511;
    llvm::Function::getEntryCount((uint64_t ***)v21, 0, (uint64_t)&v811);
    if (!(_BYTE)v812 || byte_1ED80E0C8)
      goto LABEL_511;
    v25 = *((_QWORD *)v21 + 10);
    if (v25)
      v26 = v25 - 24;
    else
      v26 = 0;
    v730 = &v732;
    v731 = (llvm::Function *)0x100000000;
    HIDWORD(v736) = 0;
    v733 = 0uLL;
    LODWORD(v734) = 0;
    LOBYTE(v736) = 0;
    *((_QWORD *)&v734 + 1) = 0;
    v735 = v21;
    sub_1C53BA620((uint64_t)&v730, 0);
    v748 = 0;
    v747 = 0;
    v749 = 0;
    v750 = 0u;
    v751 = 0u;
    v752[0] = 0;
    v752[1] = v753;
    v752[2] = 0x400000000;
    v754 = 0;
    v755 = 0;
    v753[4] = &v755;
    v756[0] = 1;
    llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)&v747, (uint64_t)&v730);
    sub_1C4EEA178((uint64_t)&v801, v21, (uint64_t)&v747, 0, 0, 0);
    v27 = *(uint64_t (**)(_QWORD, llvm::Function *))(v20 + 56);
    if (v27)
    {
      v28 = v27(*(_QWORD *)(v20 + 64), v21);
      v29 = 0;
    }
    else
    {
      v29 = (uint64_t **)operator new();
      *v29 = 0;
      llvm::BlockFrequencyInfo::calculate(v29, v21);
      v28 = (uint64_t)v29;
    }
    v30 = *(_DWORD **)(*(_QWORD *)(v20 + 88) + 8);
    if (!v30 || *v30)
    {
      v706 = 0;
      v19 = v702;
      if (v29)
        goto LABEL_357;
      goto LABEL_360;
    }
    v687 = (uint64_t **)v28;
    v679 = v29;
    v31 = (_OWORD *)operator new();
    v31[2] = 0u;
    v31[3] = 0u;
    v31[4] = 0u;
    v31[5] = 0u;
    v31[6] = 0u;
    v31[7] = 0u;
    v31[8] = 0u;
    v31[9] = 0u;
    v31[10] = 0u;
    v31[11] = 0u;
    v31[12] = 0u;
    v31[13] = 0u;
    v31[14] = 0u;
    v31[15] = 0u;
    v31[16] = 0u;
    v31[17] = 0u;
    v31[18] = 0u;
    v31[19] = 0u;
    v31[20] = 0u;
    v31[21] = 0u;
    v31[22] = 0u;
    v31[23] = 0u;
    v31[24] = 0u;
    v31[25] = 0u;
    v31[1] = 0u;
    v31[26] = 0u;
    *(_QWORD *)v31 = v31 + 1;
    *((_QWORD *)v31 + 1) = 0x400000000;
    v726[0] = v31;
    v32 = (*(uint64_t (**)(_QWORD, llvm::Function *))(v20 + 40))(*(_QWORD *)(v20 + 48), v21);
    v33 = (_QWORD *)*((_QWORD *)v21 + 10);
    if (v33 == (_QWORD *)((char *)v21 + 72))
    {
      v36 = 0;
      v35 = 0;
    }
    else
    {
      v34 = (_QWORD *)v32;
      v35 = 0;
      v36 = 0;
      do
      {
        if (v33)
          v37 = (llvm::BasicBlock *)(v33 - 3);
        else
          v37 = 0;
        v38 = sub_1C574E2C0(v37, v34);
        if (v39 == 1)
          v35 = 1;
        if (__OFADD__(v36, v38))
          v36 = ((uint64_t)(v36 + v38) >> 63) ^ 0x8000000000000000;
        else
          v36 += v38;
        v33 = (_QWORD *)v33[1];
      }
      while (v33 != (_QWORD *)((char *)v21 + 72));
    }
    v674 = v35 != 0;
    v40 = (uint64_t)(float)(*(float *)&dword_1ED80E3C8 * (float)v36);
    if (v35)
      v40 = 0;
    v676 = v40;
    v682 = (int)(float)(*(float *)&dword_1ED80E548 * (float)dword_1ED80E488);
    if (dword_1ED80E488 != 0x80000000)
      v682 = (((unint64_t)dword_1ED80E488 >> 1) | (v682 << 31)) / dword_1ED80E488;
    v792 = 0uLL;
    v793 = 0;
    __p = (char *)operator new(8uLL);
    *(_QWORD *)__p = v26;
    v683 = __p + 8;
    sub_1C574EB5C((uint64_t)&v792, 0);
    v41 = v793 - 1;
    v42 = (v793 - 1) & ((v26 >> 4) ^ (v26 >> 9));
    v43 = (uint64_t *)(v792 + 16 * v42);
    v44 = *v43;
    v20 = a1;
    if (v26 == *v43)
    {
LABEL_87:
      v49 = v26;
    }
    else
    {
      v45 = 0;
      v46 = 1;
      while (v44 != -4096)
      {
        if (v45)
          v47 = 0;
        else
          v47 = v44 == -8192;
        if (v47)
          v45 = v43;
        v48 = v42 + v46++;
        v42 = v48 & v41;
        v43 = (uint64_t *)(v792 + 16 * (v48 & v41));
        v44 = *v43;
        if (v26 == *v43)
          goto LABEL_87;
      }
      if (v45)
        v43 = v45;
      v49 = *v43;
    }
    ++DWORD2(v792);
    if (v49 != -4096)
      --HIDWORD(v792);
    v680 = 0;
    v675 = v35 != 0;
    *v43 = v26;
    *((_BYTE *)v43 + 8) = 1;
    v50 = __p + 8;
    v19 = v702;
    while (1)
    {
      v51 = (const llvm::BasicBlock *)*((_QWORD *)v50 - 1);
      v50 -= 8;
      v52 = *(_QWORD *)(v20 + 88);
      v699 = v51;
      BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(v687, v51, 0);
      if (v54 && *(_BYTE *)(v52 + 40) && *(_QWORD *)(v52 + 32) >= (unint64_t)BlockProfileCount)
        goto LABEL_350;
      v55 = (uint64_t)v699;
      v56 = llvm::BlockFrequencyInfo::getBlockProfileCount(v687, v699, 0);
      v58 = v57 ? (unint64_t)v56 : 0;
      if (v58 < dword_1ED80E488)
        goto LABEL_350;
      v60 = (llvm::BasicBlock **)((char *)v699 + 40);
      v59 = (llvm::BasicBlock *)*((_QWORD *)v699 + 5);
      if (v59 == (llvm::BasicBlock *)((char *)v699 + 40))
      {
        v62 = 0;
      }
      else
      {
        v61 = (char *)v59 - 24;
        if (!v59)
          v61 = 0;
        v62 = v61[16] - 29 >= 0xB ? 0 : v61;
      }
      v63 = 0;
      v688 = v62;
      v690 = v62 - 32;
LABEL_109:
      if (v59 == (llvm::BasicBlock *)v60)
      {
LABEL_116:
        v67 = 0;
      }
      else
      {
        v64 = (char *)v59 - 24;
        if (!v59)
          v64 = 0;
        v65 = v64[16];
        v66 = v65 - 29;
        if (v65 != 30)
        {
          v67 = 0;
          switch(v66)
          {
            case 0:
            case 5:
            case 6:
              goto LABEL_117;
            case 1:
LABEL_1215:
              __break(1u);
              return;
            case 2:
              v67 = (*((_DWORD *)v64 + 5) >> 1) & 0x3FFFFFF;
              goto LABEL_117;
            case 3:
            case 9:
              v67 = (*((_DWORD *)v64 + 5) & 0x7FFFFFF) - 1;
              goto LABEL_117;
            case 4:
              v67 = 2;
              goto LABEL_117;
            case 7:
              v67 = *((_WORD *)v64 + 9) & 1;
              goto LABEL_117;
            case 8:
              v67 = 1;
              goto LABEL_117;
            case 10:
              v67 = *((_DWORD *)v64 + 20) + 1;
              goto LABEL_117;
            default:
              goto LABEL_116;
          }
        }
        v67 = (*((_DWORD *)v64 + 5) & 0x7FFFFFF) == 3 ? 2 : 1;
      }
LABEL_117:
      if (v67 != v63)
        break;
      v20 = a1;
LABEL_350:
      if (__p == v50)
      {
        v29 = v679;
        if ((v680 & 1) != 0)
        {
          v182 = (char **)v726[0];
          v726[0] = 0;
        }
        else
        {
          v182 = 0;
        }
        v706 = v182;
        MEMORY[0x1CAA32FB4](v792, 8);
        if (__p)
          operator delete(__p);
        sub_1C574EC14((char ***)v726, 0);
        if (v679)
        {
LABEL_357:
          v183 = *v29;
          *v29 = 0;
          if (v183)
            (*(void (**)(uint64_t *))(*v183 + 8))(v183);
          MEMORY[0x1CAA32FC0](v29, 0x20C4093837F09);
        }
LABEL_360:
        sub_1C4DC0BBC((uint64_t)&v801);
        llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(&v747);
        sub_1C4DC4E38((uint64_t *)&v733);
        if (v730 != &v732)
          free(v730);
        v184 = v706;
        if (v706)
        {
          v730 = v21;
          v731 = 0;
          v732 = (char *)&v733 + 8;
          *(_QWORD *)&v733 = 0x400000000;
          v738[16] = 0;
          v739 = 0;
          LODWORD(v740) = 0;
          v742 = 0;
          v743 = 0;
          v741 = 0;
          v744 = (llvm::OptimizationRemarkEmitter *)v707;
          v745 = *(_OWORD *)(v20 + 24);
          v746 = *(_OWORD *)(v20 + 40);
          v185 = operator new();
          *(_OWORD *)(v185 + 32) = 0u;
          *(_OWORD *)(v185 + 48) = 0u;
          *(_OWORD *)(v185 + 64) = 0u;
          *(_OWORD *)(v185 + 80) = 0u;
          *(_OWORD *)(v185 + 96) = 0u;
          *(_OWORD *)(v185 + 112) = 0u;
          *(_OWORD *)(v185 + 128) = 0u;
          *(_OWORD *)(v185 + 144) = 0u;
          *(_OWORD *)(v185 + 160) = 0u;
          *(_OWORD *)(v185 + 176) = 0u;
          *(_OWORD *)(v185 + 192) = 0u;
          *(_OWORD *)(v185 + 208) = 0u;
          *(_OWORD *)(v185 + 224) = 0u;
          *(_OWORD *)(v185 + 240) = 0u;
          *(_OWORD *)(v185 + 256) = 0u;
          *(_OWORD *)(v185 + 272) = 0u;
          *(_OWORD *)(v185 + 288) = 0u;
          *(_OWORD *)(v185 + 304) = 0u;
          *(_OWORD *)(v185 + 320) = 0u;
          *(_OWORD *)(v185 + 336) = 0u;
          *(_OWORD *)(v185 + 352) = 0u;
          *(_OWORD *)(v185 + 368) = 0u;
          *(_OWORD *)(v185 + 384) = 0u;
          *(_OWORD *)(v185 + 400) = 0u;
          *(_OWORD *)(v185 + 416) = 0u;
          *(_OWORD *)(v185 + 16) = 0u;
          *(_QWORD *)v185 = v185 + 16;
          *(_QWORD *)(v185 + 8) = 0x400000000;
          v811.n128_u64[0] = 0;
          sub_1C574EC14(&v742, (char **)v185);
          sub_1C574EC14((char ***)&v811, 0);
          v749 = 128;
          v186 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
          v747 = v186;
          v748 = 0;
          if (v749)
          {
            v187 = (unint64_t)v749 << 6;
            v188 = v186 + 16;
            do
            {
              *v188 = 0;
              v188[1] = -4096;
              *(v188 - 2) = &unk_1E814DA10;
              *(v188 - 1) = 2;
              v188[2] = 0;
              v188 += 8;
              v187 -= 64;
            }
            while (v187);
          }
          LOBYTE(v750) = 0;
          BYTE8(v751) = 0;
          v189 = llvm::CloneFunction(v21, (uint64_t)&v747, 0);
          v731 = (llvm::Function *)v189;
          v190 = *((_DWORD *)v184 + 2);
          if (v190)
          {
            v191 = (uint64_t)*v184;
            v192 = (uint64_t)&(*v184)[104 * v190];
            while (1)
            {
              v811.n128_u64[0] = (unint64_t)&v812;
              v811.n128_u64[1] = 0x800000000;
              if (*(_DWORD *)(v191 + 8))
              {
                sub_1C49EEBE4((uint64_t)&v811, v191);
                v193 = (int32x2_t *****)v811.n128_u64[0];
                v194 = *(_QWORD *)(v191 + 96);
                v820 = *(_OWORD *)(v191 + 80);
                v821[0] = v194;
                v801 = v803;
                v802 = 0x800000000;
                if (v811.n128_u32[2])
                {
                  v195 = v811.n128_u64[0] + 8 * v811.n128_u32[2];
                  do
                  {
                    v196 = *v193;
                    v804.n128_u64[1] = 2;
                    v805 = 0;
                    v806 = v196;
                    if (v196 != (int32x2_t ****)-8192 && v196 != (int32x2_t ****)-4096 && v196 != 0)
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v804.n128_i8[8]);
                    v804.n128_u64[0] = (unint64_t)&unk_1E814DA10;
                    v807 = (__n128 *)&v747;
                    v198 = sub_1C52E2ED8((uint64_t)&v747, &v804);
                    if (v806 != (int32x2_t ****)-8192 && v806 != (int32x2_t ****)-4096 && v806 != 0)
                    {
                      v200 = v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)(v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8) = v805;
                      if (v805)
                      {
                        *v805 = *v805 & 7 | v200;
                      }
                      else
                      {
                        v201 = v806;
                        v202 = ***v806;
                        v203 = (unint64_t)v202[303];
                        if (v203 <= v200)
                        {
                          v204 = v202[305].u32[0];
                          if (v203 + 16 * v204 > v200)
                          {
                            v205 = v204 - 1;
                            LODWORD(v206) = v205 & ((v806 >> 4) ^ (v806 >> 9));
                            v207 = (int32x2_t *****)(v203 + 16 * v206);
                            v208 = *v207;
                            if (v806 != *v207)
                            {
                              v209 = 1;
                              do
                              {
                                if (v208 == (int32x2_t ****)-4096)
                                  goto LABEL_391;
                                v210 = v206 + v209++;
                                v206 = v210 & v205;
                                v208 = *(int32x2_t *****)(v203 + 16 * v206);
                              }
                              while (v806 != v208);
                              v207 = (int32x2_t *****)(v203 + 16 * v206);
                            }
                            *v207 = (int32x2_t ****)-8192;
                            v202[304] = vadd_s32(v202[304], (int32x2_t)0x1FFFFFFFFLL);
                            v201 = v806;
LABEL_391:
                            *((_BYTE *)v201 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                    v211 = v198[7];
                    v212 = v802;
                    if (v802 >= (unint64_t)HIDWORD(v802))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v801, (uint64_t)v803, v802 + 1, 8);
                      v212 = v802;
                    }
                    *((_QWORD *)v801 + v212) = v211;
                    LODWORD(v802) = v802 + 1;
                    ++v193;
                  }
                  while (v193 != (int32x2_t *****)v195);
                }
              }
              else
              {
                v213 = *(_OWORD *)(v191 + 80);
                v821[0] = *(_QWORD *)(v191 + 96);
                v820 = v213;
                v801 = v803;
                v802 = 0x800000000;
              }
              v804.n128_u64[1] = 2;
              v805 = 0;
              v806 = (int32x2_t ****)v820;
              if ((_QWORD)v820 != -8192 && (_QWORD)v820 != -4096 && (_QWORD)v820)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v804.n128_i8[8]);
              v804.n128_u64[0] = (unint64_t)&unk_1E814DA10;
              v807 = (__n128 *)&v747;
              v214 = sub_1C52E2ED8((uint64_t)&v747, &v804);
              if (v806 != (int32x2_t ****)-8192 && v806 != (int32x2_t ****)-4096 && v806)
              {
                v215 = v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8) = v805;
                if (v805)
                {
                  *v805 = *v805 & 7 | v215;
                }
                else
                {
                  v216 = v806;
                  v217 = ***v806;
                  v218 = (unint64_t)v217[303];
                  if (v218 <= v215)
                  {
                    v219 = v217[305].u32[0];
                    if (v218 + 16 * v219 > v215)
                    {
                      v220 = v219 - 1;
                      LODWORD(v221) = v220 & ((v806 >> 4) ^ (v806 >> 9));
                      v222 = (int32x2_t *****)(v218 + 16 * v221);
                      v223 = *v222;
                      if (v806 != *v222)
                      {
                        v224 = 1;
                        do
                        {
                          if (v223 == (int32x2_t ****)-4096)
                            goto LABEL_414;
                          v225 = v221 + v224++;
                          v221 = v225 & v220;
                          v223 = *(int32x2_t *****)(v218 + 16 * v221);
                        }
                        while (v806 != v223);
                        v222 = (int32x2_t *****)(v218 + 16 * v221);
                      }
                      *v222 = (int32x2_t ****)-8192;
                      v217[304] = vadd_s32(v217[304], (int32x2_t)0x1FFFFFFFFLL);
                      v216 = v806;
LABEL_414:
                      *((_BYTE *)v216 + 17) &= ~1u;
                    }
                  }
                }
              }
              v226 = (void *)v214[7];
              v804.n128_u64[1] = 2;
              v805 = 0;
              v806 = (int32x2_t ****)*((_QWORD *)&v820 + 1);
              if (*((_QWORD *)&v820 + 1) != -8192
                && *((_QWORD *)&v820 + 1) != -4096
                && *((_QWORD *)&v820 + 1) != 0)
              {
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v804.n128_i8[8]);
              }
              v804.n128_u64[0] = (unint64_t)&unk_1E814DA10;
              v807 = (__n128 *)&v747;
              v228 = sub_1C52E2ED8((uint64_t)&v747, &v804);
              if (v806 != (int32x2_t ****)-8192 && v806 != (int32x2_t ****)-4096 && v806)
              {
                v229 = v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8) = v805;
                if (v805)
                {
                  *v805 = *v805 & 7 | v229;
                }
                else
                {
                  v230 = v806;
                  v231 = ***v806;
                  v232 = (unint64_t)v231[303];
                  if (v232 <= v229)
                  {
                    v233 = v231[305].u32[0];
                    if (v232 + 16 * v233 > v229)
                    {
                      v234 = v233 - 1;
                      LODWORD(v235) = v234 & ((v806 >> 4) ^ (v806 >> 9));
                      v236 = (int32x2_t *****)(v232 + 16 * v235);
                      v237 = *v236;
                      if (v806 != *v236)
                      {
                        v238 = 1;
                        do
                        {
                          if (v237 == (int32x2_t ****)-4096)
                            goto LABEL_434;
                          v239 = v235 + v238++;
                          v235 = v239 & v234;
                          v237 = *(int32x2_t *****)(v232 + 16 * v235);
                        }
                        while (v806 != v237);
                        v236 = (int32x2_t *****)(v232 + 16 * v235);
                      }
                      *v236 = (int32x2_t ****)-8192;
                      v231[304] = vadd_s32(v231[304], (int32x2_t)0x1FFFFFFFFLL);
                      v230 = v806;
LABEL_434:
                      *((_BYTE *)v230 + 17) &= ~1u;
                    }
                  }
                }
              }
              v240 = v228[7];
              if (v821[0])
              {
                v804.n128_u64[1] = 2;
                v805 = 0;
                v806 = (int32x2_t ****)v821[0];
                if ((v821[0] | 0x1000) != 0xFFFFFFFFFFFFF000)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v804.n128_i8[8]);
                v804.n128_u64[0] = (unint64_t)&unk_1E814DA10;
                v807 = (__n128 *)&v747;
                v241 = sub_1C52E2ED8((uint64_t)&v747, &v804);
                if (v806 != (int32x2_t ****)-8192 && v806 != (int32x2_t ****)-4096 && v806)
                {
                  v242 = v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8) = v805;
                  if (v805)
                  {
                    *v805 = *v805 & 7 | v242;
                  }
                  else
                  {
                    v243 = v806;
                    v244 = ***v806;
                    v245 = (unint64_t)v244[303];
                    if (v245 <= v242)
                    {
                      v246 = v244[305].u32[0];
                      if (v245 + 16 * v246 > v242)
                      {
                        v247 = v246 - 1;
                        LODWORD(v248) = v247 & ((v806 >> 4) ^ (v806 >> 9));
                        v249 = (int32x2_t *****)(v245 + 16 * v248);
                        v250 = *v249;
                        if (v806 != *v249)
                        {
                          v251 = 1;
                          do
                          {
                            if (v250 == (int32x2_t ****)-4096)
                              goto LABEL_451;
                            v252 = v248 + v251++;
                            v248 = v252 & v247;
                            v250 = *(int32x2_t *****)(v245 + 16 * v248);
                          }
                          while (v806 != v250);
                          v249 = (int32x2_t *****)(v245 + 16 * v248);
                        }
                        *v249 = (int32x2_t ****)-8192;
                        v244[304] = vadd_s32(v244[304], (int32x2_t)0x1FFFFFFFFLL);
                        v243 = v806;
LABEL_451:
                        *((_BYTE *)v243 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v253 = v241[7];
              }
              else
              {
                v253 = 0;
              }
              v254 = v801;
              v255 = v802;
              v804.n128_u64[0] = (unint64_t)&v805;
              v804.n128_u64[1] = 0x800000000;
              if (v802 >= 9)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v804, (uint64_t)&v805, v802, 8);
                v256 = v804.n128_u32[2];
                v257 = (unint64_t **)v804.n128_u64[0];
              }
              else
              {
                if (!(_DWORD)v802)
                {
                  v258 = 0;
                  goto LABEL_459;
                }
                v256 = 0;
                v257 = &v805;
              }
              memcpy(&v257[v256], v254, 8 * v255);
              v258 = v804.n128_u32[2];
LABEL_459:
              v804.n128_u32[2] = v258 + v255;
              v808 = v226;
              v809 = v240;
              v810[0] = v253;
              sub_1C574E844((uint64_t)v742, &v804);
              if ((unint64_t **)v804.n128_u64[0] != &v805)
                free((void *)v804.n128_u64[0]);
              v19 = v702;
              if (v801 != v803)
                free(v801);
              if ((uint64_t *)v811.n128_u64[0] != &v812)
                free((void *)v811.n128_u64[0]);
              v191 += 104;
              if (v191 == v192)
              {
                v259 = v731;
                goto LABEL_470;
              }
            }
          }
          v259 = (llvm::Function *)v189;
LABEL_470:
          llvm::Value::doRAUW(v21, v259, (llvm::Value *)1);
          if (BYTE8(v751))
          {
            sub_1C4E43068((uint64_t)&v750);
            MEMORY[0x1CAA32FB4](v750, 8);
            BYTE8(v751) = 0;
          }
          v260 = v747;
          if (v749)
          {
            v261 = &v747[8 * (unint64_t)v749];
            do
            {
              v262 = v260[3];
              if ((v262 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                v263 = v260[7];
                if (v263)
                {
                  if (v263 != -8192 && v263 != -4096)
                  {
                    v264 = v260[5] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v264 = v260[6];
                    v265 = (unint64_t *)v260[6];
                    if (v265)
                    {
                      *v265 = *v265 & 7 | v264;
                    }
                    else
                    {
                      v266 = v260[7];
                      v267 = ***(int32x2_t ****)v266;
                      v268 = (unint64_t)v267[303];
                      if (v268 <= v264)
                      {
                        v269 = v267[305].u32[0];
                        if (v268 + 16 * v269 > v264)
                        {
                          v270 = v269 - 1;
                          LODWORD(v271) = v270 & ((v266 >> 4) ^ (v266 >> 9));
                          v272 = (uint64_t *)(v268 + 16 * v271);
                          v273 = *v272;
                          if (v266 != *v272)
                          {
                            v274 = 1;
                            do
                            {
                              if (v273 == -4096)
                                goto LABEL_487;
                              v275 = v271 + v274++;
                              v271 = v275 & v270;
                              v273 = *(_QWORD *)(v268 + 16 * v271);
                            }
                            while (v266 != v273);
                            v272 = (uint64_t *)(v268 + 16 * v271);
                          }
                          *v272 = -8192;
                          v267[304] = vadd_s32(v267[304], (int32x2_t)0x1FFFFFFFFLL);
                          v266 = v260[7];
LABEL_487:
                          *(_BYTE *)(v266 + 17) &= ~1u;
                        }
                      }
                    }
                    v262 = v260[3];
                  }
                }
              }
              if (v262 != -4096 && v262 != -8192 && v262 != 0)
              {
                v277 = v260[1] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v277 = v260[2];
                v278 = (unint64_t *)v260[2];
                if (v278)
                {
                  *v278 = *v278 & 7 | v277;
                }
                else
                {
                  v279 = v260[3];
                  v280 = ***(int32x2_t ****)v279;
                  v281 = (unint64_t)v280[303];
                  if (v281 <= v277)
                  {
                    v282 = v280[305].u32[0];
                    if (v281 + 16 * v282 > v277)
                    {
                      v283 = v282 - 1;
                      LODWORD(v284) = v283 & ((v279 >> 4) ^ (v279 >> 9));
                      v285 = (uint64_t *)(v281 + 16 * v284);
                      v286 = *v285;
                      if (v279 != *v285)
                      {
                        v287 = 1;
                        do
                        {
                          if (v286 == -4096)
                            goto LABEL_506;
                          v288 = v284 + v287++;
                          v284 = v288 & v283;
                          v286 = *(_QWORD *)(v281 + 16 * v284);
                        }
                        while (v279 != v286);
                        v285 = (uint64_t *)(v281 + 16 * v284);
                      }
                      *v285 = -8192;
                      v280[304] = vadd_s32(v280[304], (int32x2_t)0x1FFFFFFFFLL);
                      v279 = v260[3];
LABEL_506:
                      *(_BYTE *)(v279 + 17) &= ~1u;
                    }
                  }
                }
              }
              v260 += 8;
            }
            while (v260 != v261);
            v260 = v747;
          }
          MEMORY[0x1CAA32FB4](v260, 8);
          if (*((_DWORD *)v742 + 2))
          {
            *(_QWORD *)&v792 = &v793;
            *((_QWORD *)&v792 + 1) = 0x100000000;
            v800 = 0;
            v795[0] = 0;
            v795[1] = 0;
            v796 = 0;
            v799 = 0;
            v797 = 0;
            v798 = v731;
            sub_1C53BA620((uint64_t)&v792, 0);
            v782 = 0;
            __dst = 0;
            v783 = 0;
            v785 = 0u;
            v786 = 0u;
            v787 = 0;
            v788 = v790;
            v789 = 0x400000000;
            v790[5] = 0;
            v791[0] = 0;
            v790[4] = v791;
            v791[1] = 1;
            llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)&__dst, (uint64_t)&v792);
            sub_1C4EEA178((uint64_t)&v801, v731, (uint64_t)&__dst, 0, 0, 0);
            v347 = (uint64_t **)operator new();
            v348 = v731;
            *v347 = 0;
            llvm::BlockFrequencyInfo::calculate(v347, v348);
            v349 = (uint64_t *)v743;
            v743 = (uint64_t)v347;
            if (v349)
            {
              v350 = *v349;
              *v349 = 0;
              if (v350)
                (*(void (**)(uint64_t))(*(_QWORD *)v350 + 8))(v350);
              MEMORY[0x1CAA32FC0](v349, 0x20C4093837F09);
            }
            llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache((llvm::CodeExtractorAnalysisCache *)&__src, v731);
            v721[1] = 0;
            v721[0] = 0;
            v722 = 0;
            v724 = 0;
            v725 = 0;
            v723 = 0;
            v716[1] = 0;
            v716[0] = 0;
            v717 = 0;
            v719 = 0;
            v720 = 0;
            v718 = 0;
            v711[1] = 0;
            v711[0] = 0;
            v712 = 0;
            v714 = 0;
            v715 = 0;
            v713 = 0;
            v351 = *((_DWORD *)v742 + 2);
            if (v351)
            {
              v354 = (uint64_t)*v742;
              v355 = &(*v742)[104 * v351];
              v356 = (uint64_t *)v763;
              do
              {
                v761 = v763;
                v762 = 0x800000000;
                if (*(_DWORD *)(v354 + 8))
                {
                  sub_1C49EEBE4((uint64_t)&v761, v354);
                  v356 = (uint64_t *)v761;
                  v357 = *(_QWORD *)(v354 + 96);
                  v767 = *(_OWORD *)(v354 + 80);
                  v768 = v357;
                  if ((_DWORD)v762)
                  {
                    v358 = 0;
                    v359 = 0;
                    v360 = 8 * v762;
                    do
                    {
                      v361 = (llvm::BasicBlock *)*v356++;
                      v362 = (_QWORD *)((uint64_t (*)(_QWORD, _QWORD))v746)(*((_QWORD *)&v746 + 1), *((_QWORD *)v361 + 7));
                      v363 = sub_1C574E2C0(v361, v362);
                      if (v364 == 1)
                        v358 = 1;
                      if (__OFADD__(v359, v363))
                        v359 = ((uint64_t)(v359 + v363) >> 63) ^ 0x8000000000000000;
                      else
                        v359 += v363;
                      v360 -= 8;
                    }
                    while (v360);
                    v356 = (uint64_t *)v761;
                    v365 = v762;
                  }
                  else
                  {
                    v365 = 0;
                    v359 = 0;
                    v358 = 0;
                  }
                }
                else
                {
                  v365 = 0;
                  v359 = 0;
                  v358 = 0;
                  v366 = *(_OWORD *)(v354 + 80);
                  v768 = *(_QWORD *)(v354 + 96);
                  v767 = v366;
                }
                v367 = v743;
                v368 = ((uint64_t (*)(_QWORD, _QWORD))v745)(*((_QWORD *)&v745 + 1), *(_QWORD *)(v767 + 56));
                v710 = 0;
                LOBYTE(v709) = 0;
                llvm::CodeExtractor::CodeExtractor((uint64_t)&v747, v356, v365, (uint64_t)&v792, 0, v367, (uint64_t)&v801, v368, 0, 0, 0, &v709);
                llvm::CodeExtractor::findInputsOutputs((uint64_t)&v747, v721, v716, v711);
                if (v719 == v718 || byte_1ED80E188)
                {
                  CodeRegion = llvm::CodeExtractor::extractCodeRegion((llvm::CodeExtractor *)&v747, (const llvm::CodeExtractorAnalysisCache *)&__src);
                  if (CodeRegion)
                  {
                    v370 = CodeRegion;
                    v371 = *(_QWORD *)(*(_QWORD *)(CodeRegion + 8) + 24);
                    v372 = *(_QWORD *)(v371 + 40);
                    v373 = v733;
                    if (v733 >= (unint64_t)DWORD1(v733))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v732, (uint64_t)&v733 + 8, v733 + 1, 16);
                      v373 = v733;
                    }
                    v374 = &v732[16 * v373];
                    *(_QWORD *)v374 = v370;
                    *((_QWORD *)v374 + 1) = v372;
                    LODWORD(v733) = v733 + 1;
                    if (v358 == 1)
                      LODWORD(v740) = 1;
                    v375 = v739 + v359;
                    if (__OFADD__(v739, v359))
                      v375 = ((uint64_t)(v739 + v359) >> 63) ^ 0x8000000000000000;
                    v739 = v375;
                    if (byte_1ED80E248)
                    {
                      *(_WORD *)(v370 + 18) = *(_WORD *)(v370 + 18) & 0xC00F | 0x90;
                      *(_WORD *)(v371 + 18) = *(_WORD *)(v371 + 18) & 0xF003 | 0x24;
                    }
                  }
                  else
                  {
                    v376 = v744;
                    v377 = ****(_QWORD ****)v744;
                    if (*(_QWORD *)(v377 + 128)
                      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v377 + 72) + 48))(*(_QWORD *)(v377 + 72)))
                    {
                      v378 = *(_QWORD *)(*(_QWORD *)v761 + 48);
                      if (v378)
                        v379 = v378 - 24;
                      else
                        v379 = 0;
                      v380 = *(_QWORD *)(v379 + 48);
                      if (v380)
                      {
                        v381 = *(_QWORD *)(v380 - 8 * *(unsigned int *)(v380 + 8));
                        if (*(_BYTE *)v381 != 15)
                          v381 = *(_QWORD *)(v381 - 8 * *(unsigned int *)(v381 + 8));
                        v382 = *(_DWORD *)(v380 + 4);
                        LODWORD(v380) = *(unsigned __int16 *)(v380 + 2);
                      }
                      else
                      {
                        v381 = 0;
                        v382 = 0;
                      }
                      v383 = *(_QWORD *)(v379 + 40);
                      v384 = *(_QWORD *)(v383 + 56);
                      v811.n128_u32[2] = 10;
                      v811.n128_u8[12] = 2;
                      v812 = v384;
                      v813 = v381;
                      v814 = __PAIR64__(v380, v382);
                      v815 = "partial-inlining";
                      v816 = "ExtractFailed";
                      v817 = 13;
                      v818 = 0;
                      v819 = 0;
                      *(_QWORD *)&v820 = v821;
                      *((_QWORD *)&v820 + 1) = 0x400000000;
                      v829 = 0;
                      v830 = -1;
                      v831 = v383;
                      v811.n128_u64[0] = (unint64_t)&off_1E814E538;
                      v726[0] = "Failed to extract region at block ";
                      v726[1] = (void *)34;
                      sub_1C53B17B4((uint64_t)&v820, (const void **)v726);
                      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v726, "Block", 5uLL, *(_BYTE **)v761);
                      v385 = sub_1C47E3888((uint64_t)&v811, (uint64_t)v726);
                      sub_1C61998EC((uint64_t)&v804, v385);
                      v804.n128_u64[0] = (unint64_t)&off_1E814E538;
                      if (v729 < 0)
                        operator delete(v728);
                      if (v727 < 0)
                        operator delete(v726[0]);
                      v811.n128_u64[0] = (unint64_t)&off_1E814E790;
                      v386 = (char *)v820;
                      if (DWORD2(v820))
                      {
                        v387 = (unint64_t)DWORD2(v820) << 6;
                        do
                        {
                          v388 = (void **)&v386[v387];
                          if (v386[v387 - 17] < 0)
                            operator delete(*(v388 - 5));
                          if (*((char *)v388 - 41) < 0)
                            operator delete(*(v388 - 8));
                          v387 -= 64;
                        }
                        while (v387);
                        v386 = (char *)v820;
                      }
                      if (v386 != (char *)v821)
                        free(v386);
                      llvm::OptimizationRemarkEmitter::emit(v376, (llvm::DiagnosticInfoOptimizationBase *)&v804);
                      v804.n128_u64[0] = (unint64_t)&off_1E814E790;
                      v389 = (char *)v808;
                      if ((_DWORD)v809)
                      {
                        v390 = (unint64_t)v809 << 6;
                        do
                        {
                          v391 = (void **)&v389[v390];
                          if (v389[v390 - 17] < 0)
                            operator delete(*(v391 - 5));
                          if (*((char *)v391 - 41) < 0)
                            operator delete(*(v391 - 8));
                          v390 -= 64;
                        }
                        while (v390);
                        v389 = (char *)v808;
                      }
                      if (v389 != (char *)v810)
                        free(v389);
                    }
                  }
                }
                if (v759)
                {
                  v760 = v759;
                  operator delete(v759);
                }
                MEMORY[0x1CAA32FB4](v758, 8);
                if (v757 < 0)
                  operator delete((void *)v756[4]);
                if (v754 != v756)
                  free(v754);
                sub_1C5408A20(v752);
                v356 = (uint64_t *)v763;
                if (v761 != v763)
                {
                  free(v761);
                  v356 = (uint64_t *)v763;
                }
                v354 += 104;
              }
              while ((char *)v354 != v355);
              v352 = v733;
              v353 = a1;
              if (v713)
              {
                v714 = v713;
                operator delete(v713);
              }
              v19 = v702;
            }
            else
            {
              v352 = v733;
              v353 = a1;
            }
            MEMORY[0x1CAA32FB4](v711[0], 8);
            if (v718)
            {
              v719 = v718;
              operator delete(v718);
            }
            MEMORY[0x1CAA32FB4](v716[0], 8);
            if (v723)
            {
              v724 = v723;
              operator delete(v723);
            }
            MEMORY[0x1CAA32FB4](v721[0], 8);
            sub_1C626D3D0((uint64_t)&__src);
            sub_1C4DC0BBC((uint64_t)&v801);
            llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(&__dst);
            sub_1C4DC4E38(v795);
            if ((unsigned int *)v792 != &v793)
              free((void *)v792);
            if (v352 && sub_1C574C128(v353, (_BYTE **)&v730))
            {
              sub_1C574E1F0((uint64_t)&v730);
              sub_1C574EC14(&v706, 0);
              v296 = 0;
              v23 = 1;
              goto LABEL_528;
            }
          }
          sub_1C574E1F0((uint64_t)&v730);
        }
        sub_1C574EC14(&v706, 0);
LABEL_511:
        v289 = *((_QWORD *)v21 + 10);
        v290 = v289 - 24;
        if (v289)
          v291 = v289 - 24;
        else
          v291 = 0;
        v292 = *(_QWORD *)(v291 + 40);
        if (v292 == v291 + 40)
          goto LABEL_526;
        v293 = v292 - 24;
        if (!v292)
          v293 = 0;
        v294 = *(unsigned __int8 *)(v293 + 16) - 40;
        if (v294 < 0xFFFFFFF5)
          v293 = 0;
        if (!v292
          || (*(_BYTE *)(v293 + 16) == 30 ? (v295 = v294 >= 0xFFFFFFF5) : (v295 = 0),
              !v295 || (*(_DWORD *)(v293 + 20) & 0x7FFFFFF) == 1))
        {
LABEL_526:
          v23 = 0;
          v296 = 0;
          v726[0] = 0;
          goto LABEL_527;
        }
        v307 = (_OWORD *)operator new();
        v307[1] = 0u;
        v308 = (uint64_t)(v307 + 1);
        v307[2] = 0u;
        v307[6] = 0u;
        v307[4] = 0u;
        v309 = (uint64_t)(v307 + 4);
        v307[5] = 0u;
        v310 = (char *)(v307 + 5);
        v307[3] = 0u;
        v311 = (char *)(v307 + 3);
        *(_QWORD *)v307 = v307 + 1;
        *((_QWORD *)v307 + 1) = 0x400000000;
        *((_QWORD *)v307 + 6) = 0;
        *((_QWORD *)v307 + 7) = 0;
        *((_QWORD *)v307 + 8) = v307 + 5;
        *((_DWORD *)v307 + 19) = 4;
        v730 = v307;
        if (dword_1ED80E608 < 2)
        {
LABEL_642:
          v726[0] = 0;
          sub_1C574ED20((uint64_t *)&v730, 0);
          v23 = 0;
          v296 = 0;
          goto LABEL_527;
        }
        v296 = (uint64_t)v307;
        v312 = 0;
        while (1)
        {
          v313 = *(_QWORD *)(v290 + 40);
          if (v313 == v290 + 40)
            goto LABEL_642;
          v314 = v313 - 24;
          if (!v313)
            v314 = 0;
          v315 = *(unsigned __int8 *)(v314 + 16);
          if (v315 == 30)
          {
            if ((*(_DWORD *)(v314 + 20) & 0x7FFFFFF) != 3)
              goto LABEL_642;
            v316 = *(_QWORD *)(v314 - 32);
LABEL_553:
            v317 = (uint64_t *)(v314 - 64);
          }
          else
          {
            switch(*(_BYTE *)(v314 + 16))
            {
              case 0x1E:
                goto LABEL_1215;
              case 0x1F:
                v339 = (*(_DWORD *)(v314 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_608;
              case 0x20:
              case 0x26:
                v339 = (*(_DWORD *)(v314 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_608;
              case 0x21:
                v316 = *(_QWORD *)(v314 - 96);
                goto LABEL_553;
              case 0x27:
                v339 = *(_DWORD *)(v314 + 80) + 1;
LABEL_608:
                if (v339 != 2)
                  goto LABEL_642;
                if (v315 != 31)
                  __asm { BR              X11 }
                v340 = *(_DWORD *)(v314 + 20);
                if ((v340 & 0x40000000) != 0)
                  v341 = *(_QWORD *)(v314 - 8);
                else
                  v341 = v314 - 32 * (v340 & 0x7FFFFFF);
                v342 = *(_DWORD *)(v314 + 20);
                if ((v342 & 0x40000000) != 0)
                  v343 = *(_QWORD *)(v314 - 8);
                else
                  v343 = v314 - 32 * (v342 & 0x7FFFFFF);
                v316 = *(_QWORD *)(v341 + 32);
                v317 = (uint64_t *)(v343 + 96);
                break;
              default:
                goto LABEL_642;
            }
          }
          v318 = *v317;
          v319 = *(_QWORD *)(v316 + 40);
          v320 = v319 ? v319 - 24 : 0;
          v321 = *(unsigned __int8 *)(v320 + 16);
          v322 = (v321 - 29) >= 0xB ? 0 : v320;
          if (*(_BYTE *)(v322 + 16) == 29)
          {
            v323 = v316;
            v324 = v318;
          }
          else
          {
            v325 = *(_QWORD *)(v318 + 40);
            if (v325)
              v326 = v325 - 24;
            else
              v326 = 0;
            if (*(unsigned __int8 *)(v326 + 16) - 29 >= 0xB)
              v326 = 0;
            v327 = *(unsigned __int8 *)(v326 + 16);
            v323 = v327 == 29 ? v318 : 0;
            v324 = v327 == 29 ? v316 : 0;
          }
          if (v323)
            break;
          v328 = *(_QWORD *)(v318 + 40);
          v19 = v702;
          if (v328 == v318 + 40)
            goto LABEL_589;
          if (v328)
            v329 = v328 - 24;
          else
            v329 = 0;
          v330 = *(unsigned __int8 *)(v329 + 16);
          if (v330 != 30)
          {
            v331 = 2;
            switch(*(_BYTE *)(v329 + 16))
            {
              case 0x1E:
                goto LABEL_1215;
              case 0x1F:
                v331 = (*(_DWORD *)(v329 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_617;
              case 0x20:
              case 0x26:
                v331 = (*(_DWORD *)(v329 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_617;
              case 0x21:
                goto LABEL_582;
              case 0x24:
                v331 = *(_WORD *)(v329 + 18) & 1;
                goto LABEL_617;
              case 0x25:
                v331 = 1;
                goto LABEL_582;
              case 0x27:
                v331 = *(_DWORD *)(v329 + 80) + 1;
LABEL_617:
                if (!v331)
                  goto LABEL_589;
                goto LABEL_582;
              default:
                goto LABEL_589;
            }
          }
          v331 = (*(_DWORD *)(v329 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
LABEL_582:
          v332 = 0;
          v333 = (_QWORD *)(v329 - 32);
          while (1)
          {
            if (v330 != 30)
              __asm { BR              X5 }
            if (*v333 == v316)
              break;
            ++v332;
            v333 -= 4;
            if (v331 == v332)
              goto LABEL_589;
          }
          if (v331 == (_DWORD)v332)
          {
LABEL_589:
            if (v321 != 30)
            {
              v334 = 2;
              v337 = 0;
              v338 = 0;
              switch(*(_BYTE *)(v320 + 16))
              {
                case 0x1D:
                case 0x22:
                case 0x23:
                  goto LABEL_623;
                case 0x1E:
                  goto LABEL_1215;
                case 0x1F:
                  v334 = (*(_DWORD *)(v320 + 20) >> 1) & 0x3FFFFFF;
                  goto LABEL_621;
                case 0x20:
                case 0x26:
                  v334 = (*(_DWORD *)(v320 + 20) & 0x7FFFFFF) - 1;
                  goto LABEL_621;
                case 0x21:
                  goto LABEL_593;
                case 0x24:
                  v334 = *(_WORD *)(v320 + 18) & 1;
                  goto LABEL_621;
                case 0x25:
                  v334 = 1;
                  goto LABEL_593;
                case 0x27:
                  v334 = *(_DWORD *)(v320 + 80) + 1;
LABEL_621:
                  if (!v334)
                    goto LABEL_622;
                  goto LABEL_593;
                default:
                  goto LABEL_622;
              }
            }
            if ((*(_DWORD *)(v320 + 20) & 0x7FFFFFF) == 3)
              v334 = 2;
            else
              v334 = 1;
LABEL_593:
            v335 = 0;
            v336 = (_QWORD *)(v320 - 32);
            while (1)
            {
              if (v321 != 30)
                __asm { BR              X2 }
              if (*v336 == v318)
                break;
              ++v335;
              v336 -= 4;
              if (v334 == v335)
              {
LABEL_622:
                v337 = 0;
                v338 = 0;
                goto LABEL_623;
              }
            }
            if (v334 == (_DWORD)v335)
              v337 = 0;
            else
              v337 = v318;
            if (v334 == (_DWORD)v335)
              v338 = 0;
            else
              v338 = v316;
          }
          else
          {
            v337 = v316;
            v338 = v318;
          }
LABEL_623:
          if (v337)
          {
            if (v312 >= *(_DWORD *)(v296 + 12))
            {
              v691 = v310;
              __pc = v311;
              llvm::SmallVectorBase<unsigned int>::grow_pod(v296, v308, v312 + 1, 8);
              v311 = __pc;
              v310 = v691;
              v312 = *(_DWORD *)(v296 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v296 + 8 * v312) = v290;
            v344 = *(_DWORD *)(v296 + 8);
            v312 = v344 + 1;
            *(_DWORD *)(v296 + 8) = v344 + 1;
            v290 = v338;
            if (v344 + 2 < dword_1ED80E608)
              continue;
          }
          goto LABEL_642;
        }
        v689 = v308;
        v692 = (uint64_t)v310;
        if (v312 >= *(_DWORD *)(v296 + 12))
        {
          v670 = v308;
          v671 = v311;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v296, v670, v312 + 1, 8);
          v311 = v671;
          v312 = *(_DWORD *)(v296 + 8);
        }
        __pa = v311;
        *(_QWORD *)(*(_QWORD *)v296 + 8 * v312) = v290;
        v392 = *(_DWORD *)(v296 + 8);
        *(_QWORD *)(v296 + 48) = v323;
        *(_QWORD *)(v296 + 56) = v324;
        v802 = 0;
        v801 = 0;
        v803[0] = 0;
        v295 = __CFADD__(v392, 1);
        v393 = (v392 + 1);
        *(_DWORD *)(v296 + 8) = v393;
        if (!v295)
        {
          v394 = *(unint64_t **)v296;
          v395 = 8 * v393;
          do
          {
            v804.n128_u64[0] = 0;
            v396 = *v394++;
            v804.n128_u64[0] = v396;
            sub_1C6187FB8(&v801, &v804, (uint64_t)&v811);
            v395 -= 8;
          }
          while (v395);
        }
        v748 = 0;
        v747 = 0;
        v749 = 0;
        sub_1C4DFE328((uint64_t)&v747, (uint64_t)&v801);
        v811 = 0uLL;
        LODWORD(v812) = 0;
        sub_1C4DFE328((uint64_t)&v811, (uint64_t)&v801);
        v813 = 0;
        v814 = 0;
        LODWORD(v815) = 0;
        sub_1C4DFE328((uint64_t)&v813, (uint64_t)&v747);
        v397 = *(unsigned int *)(v296 + 8);
        if (!(_DWORD)v397)
          goto LABEL_802;
        v398 = *(unint64_t **)v296;
        v700 = (llvm::BasicBlock *)(*(_QWORD *)v296 + 8 * v397);
        v399 = __pa;
        while (1)
        {
          v400 = *v398;
          v401 = *(_QWORD *)(*v398 + 40);
          if (v401 != *v398 + 40)
            break;
LABEL_771:
          v417 = v398;
          v418 = *(_QWORD *)(v400 + 8);
          v19 = v702;
          if (v418)
          {
            while (1)
            {
              v419 = *(_QWORD *)(v418 + 24);
              v420 = *(unsigned __int8 *)(v419 + 16);
              v421 = v419 && v420 >= 0x1C;
              if (v421 && v420 - 29 <= 0xA)
                break;
              v418 = *(_QWORD *)(v418 + 8);
              if (!v418)
                goto LABEL_781;
            }
            v804.n128_u64[0] = *(_QWORD *)(v419 + 40);
            __src = 0;
            v423 = sub_1C4E36498(&v813, &v804, &__src);
            v399 = __pa;
            if (!v423)
            {
LABEL_801:
              v296 = 0;
              goto LABEL_880;
            }
            while (1)
            {
              v418 = *(_QWORD *)(v418 + 8);
              if (!v418)
                break;
              v424 = *(_QWORD *)(v418 + 24);
              v425 = *(unsigned __int8 *)(v424 + 16);
              if (v424)
                v426 = v425 >= 0x1C;
              else
                v426 = 0;
              if (v426 && v425 - 29 <= 0xA)
              {
                v804.n128_u64[0] = *(_QWORD *)(v424 + 40);
                __src = 0;
                v428 = sub_1C4E36498(&v813, &v804, &__src);
                v399 = __pa;
                if ((v428 & 1) == 0)
                  goto LABEL_801;
              }
            }
          }
LABEL_781:
          v398 = v417 + 1;
          if (v417 + 1 == (unint64_t *)v700)
          {
            LODWORD(v397) = *(_DWORD *)(v296 + 8);
LABEL_802:
            if ((int)v397 + 1 < dword_1ED80E608)
            {
              while (1)
              {
                v429 = *(_QWORD **)(v296 + 56);
                __dst = v429;
                v430 = (_QWORD *)v429[5];
                if (v430 == v429 + 5)
                  break;
                v431 = v430 - 3;
                if (!v430)
                  v431 = 0;
                if (*((_BYTE *)v431 + 16) != 30)
                {
                  switch(*((_BYTE *)v431 + 16))
                  {
                    case 0x1E:
                      goto LABEL_1215;
                    case 0x1F:
                      v456 = (*((_DWORD *)v431 + 5) >> 1) & 0x3FFFFFF;
                      goto LABEL_873;
                    case 0x20:
                    case 0x26:
                      v456 = (*((_DWORD *)v431 + 5) & 0x7FFFFFF) - 1;
                      goto LABEL_873;
                    case 0x21:
                      goto LABEL_808;
                    case 0x27:
                      v456 = *((_DWORD *)v431 + 20) + 1;
LABEL_873:
                      if (v456 != 2)
                        goto LABEL_879;
                      goto LABEL_808;
                    default:
                      goto LABEL_879;
                  }
                }
                if ((*((_DWORD *)v431 + 5) & 0x7FFFFFF) != 3)
                  break;
LABEL_808:
                v432 = v429[1];
                if (v432)
                {
                  while (1)
                  {
                    v433 = *(_QWORD *)(v432 + 24);
                    v434 = *(unsigned __int8 *)(v433 + 16);
                    v435 = v433 && v434 >= 0x1C;
                    if (v435 && v434 - 29 <= 0xA)
                      break;
                    v432 = *(_QWORD *)(v432 + 8);
                    if (!v432)
                      goto LABEL_831;
                  }
                  v804.n128_u64[0] = *(_QWORD *)(v433 + 40);
                  __src = 0;
                  if (!sub_1C4E36498((uint64_t *)&v747, &v804, &__src))
                    break;
                  while (1)
                  {
                    v432 = *(_QWORD *)(v432 + 8);
                    if (!v432)
                      break;
                    v438 = *(_QWORD *)(v432 + 24);
                    v439 = *(unsigned __int8 *)(v438 + 16);
                    if (v438)
                      v440 = v439 >= 0x1C;
                    else
                      v440 = 0;
                    if (v440 && v439 - 29 <= 0xA)
                    {
                      v804.n128_u64[0] = *(_QWORD *)(v438 + 40);
                      __src = 0;
                      if ((sub_1C4E36498((uint64_t *)&v747, &v804, &__src) & 1) == 0)
                        goto LABEL_879;
                    }
                  }
                  v429 = __dst;
                  v430 = (_QWORD *)*((_QWORD *)__dst + 5);
                }
LABEL_831:
                if (v430 == v429 + 5)
                {
                  v442 = 0;
                }
                else
                {
                  v442 = v430 - 3;
                  if (!v430)
                    v442 = 0;
                  if (*((unsigned __int8 *)v442 + 16) - 29 >= 0xB)
                    v442 = 0;
                }
                v443 = *((unsigned __int8 *)v442 + 16);
                if (v443 != 30)
                  __asm { BR              X12 }
                v444 = (llvm::BasicBlock *)*(v442 - 4);
                if (v430 == v429 + 5)
                {
                  v445 = 0;
                }
                else
                {
                  if (v430)
                    v445 = v430 - 3;
                  else
                    v445 = 0;
                  if (*((unsigned __int8 *)v445 + 16) - 29 >= 0xB)
                    v445 = 0;
                }
                v446 = *((unsigned __int8 *)v445 + 16);
                if (v446 != 30)
                  __asm { BR              X11 }
                v447 = (llvm::BasicBlock *)*(v445 - 8);
                v448 = *((_QWORD *)v444 + 5);
                if (v448)
                  v449 = v448 - 24;
                else
                  v449 = 0;
                if (*(unsigned __int8 *)(v449 + 16) - 29 >= 0xB)
                  v449 = 0;
                if (*(_BYTE *)(v449 + 16) != 29)
                {
                  v450 = *((_QWORD *)v447 + 5);
                  if (v450)
                    v451 = v450 - 24;
                  else
                    v451 = 0;
                  if (*(unsigned __int8 *)(v451 + 16) - 29 >= 0xB)
                    v451 = 0;
                  if (*(_BYTE *)(v451 + 16) == 29)
                  {
                    v452 = v444;
                    v444 = v447;
                    v447 = v452;
                  }
                  else
                  {
                    v444 = 0;
                    v447 = 0;
                  }
                }
                if (v444
                  && (llvm::BasicBlock *)*__pa == v444
                  && (_QWORD *)llvm::BasicBlock::getSinglePredecessor(v447) == v429)
                {
                  v453 = *(unsigned int *)(v296 + 8);
                  if (v453 >= *(unsigned int *)(v296 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v296, v689, v453 + 1, 8);
                    v453 = *(unsigned int *)(v296 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)v296 + 8 * v453) = v429;
                  ++*(_DWORD *)(v296 + 8);
                  *(_QWORD *)(v296 + 56) = v447;
                  v454 = __dst;
                  v455 = *(unsigned int *)(v296 + 72);
                  if (v455 >= *(unsigned int *)(v296 + 76))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v309, v692, v455 + 1, 8);
                    v455 = *(unsigned int *)(v296 + 72);
                  }
                  *(_QWORD *)(*(_QWORD *)(v296 + 64) + 8 * v455) = v454;
                  ++*(_DWORD *)(v296 + 72);
                  sub_1C6187FB8(&v801, &__dst, (uint64_t)&v804);
                  if (*(_DWORD *)(v296 + 8) + 1 < dword_1ED80E608)
                    continue;
                }
                break;
              }
            }
LABEL_879:
            v730 = 0;
            v19 = v702;
LABEL_880:
            v726[0] = (void *)v296;
            MEMORY[0x1CAA32FB4](v813, 8);
            MEMORY[0x1CAA32FB4](v811.n128_u64[0], 8);
            MEMORY[0x1CAA32FB4](v747, 8);
            MEMORY[0x1CAA32FB4](v801, 8);
            sub_1C574ED20((uint64_t *)&v730, 0);
            if (v296)
            {
              __src = v21;
              v770 = 0;
              v771 = v773;
              v772 = 0x400000000;
              v773[64] = 0;
              v774 = 0;
              v775 = 0;
              v776[1] = 0;
              v777 = 0;
              v776[0] = 0;
              v778 = (llvm::OptimizationRemarkEmitter *)v707;
              v779 = *(_OWORD *)(a1 + 24);
              v780 = *(_OWORD *)(a1 + 40);
              v457 = operator new();
              *(_OWORD *)(v457 + 48) = 0u;
              *(_OWORD *)(v457 + 64) = 0u;
              *(_OWORD *)(v457 + 32) = 0u;
              *(_OWORD *)(v457 + 96) = 0u;
              *(_OWORD *)(v457 + 80) = 0u;
              *(_OWORD *)(v457 + 16) = 0u;
              *(_QWORD *)v457 = v457 + 16;
              *(_QWORD *)(v457 + 8) = 0x400000000;
              *(_QWORD *)(v457 + 48) = 0;
              *(_QWORD *)(v457 + 56) = 0;
              *(_QWORD *)(v457 + 64) = v457 + 80;
              *(_DWORD *)(v457 + 76) = 4;
              v811.n128_u64[0] = 0;
              sub_1C574ED20(v776, v457);
              sub_1C574ED20((uint64_t *)&v811, 0);
              LODWORD(v812) = 128;
              v458 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
              v811 = (__n128)(unint64_t)v458;
              if ((_DWORD)v812)
              {
                v459 = (unint64_t)v812 << 6;
                v460 = v458 + 16;
                do
                {
                  *v460 = 0;
                  v460[1] = -4096;
                  *(v460 - 2) = &unk_1E814DA10;
                  *(v460 - 1) = 2;
                  v460[2] = 0;
                  v460 += 8;
                  v459 -= 64;
                }
                while (v459);
              }
              LOBYTE(v813) = 0;
              LOBYTE(v816) = 0;
              v770 = (llvm::Value *)llvm::CloneFunction(v21, (uint64_t)&v811, 0);
              v461 = *(int32x2_t *****)(v296 + 48);
              v804.n128_u64[1] = 2;
              v805 = 0;
              v806 = v461;
              if (v461 != (int32x2_t ****)-8192 && v461 != (int32x2_t ****)-4096 && v461)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v804.n128_i8[8]);
              v804.n128_u64[0] = (unint64_t)&unk_1E814DA10;
              v807 = &v811;
              v462 = sub_1C52E2ED8((uint64_t)&v811, &v804);
              if (v806 != (int32x2_t ****)-8192 && v806 != (int32x2_t ****)-4096 && v806)
              {
                v463 = v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8) = v805;
                if (v805)
                {
                  *v805 = *v805 & 7 | v463;
                }
                else
                {
                  v464 = v806;
                  v465 = ***v806;
                  v466 = (unint64_t)v465[303];
                  if (v466 <= v463)
                  {
                    v467 = v465[305].u32[0];
                    if (v466 + 16 * v467 > v463)
                    {
                      v468 = v467 - 1;
                      LODWORD(v469) = v468 & ((v806 >> 4) ^ (v806 >> 9));
                      v470 = (int32x2_t *****)(v466 + 16 * v469);
                      v471 = *v470;
                      if (v806 == *v470)
                      {
LABEL_900:
                        *v470 = (int32x2_t ****)-8192;
                        v465[304] = vadd_s32(v465[304], (int32x2_t)0x1FFFFFFFFLL);
                        v464 = v806;
                      }
                      else
                      {
                        v472 = 1;
                        while (v471 != (int32x2_t ****)-4096)
                        {
                          v473 = v469 + v472++;
                          v469 = v473 & v468;
                          v471 = *(int32x2_t *****)(v466 + 16 * v469);
                          if (v806 == v471)
                          {
                            v470 = (int32x2_t *****)(v466 + 16 * v469);
                            goto LABEL_900;
                          }
                        }
                      }
                      *((_BYTE *)v464 + 17) &= ~1u;
                    }
                  }
                }
              }
              *(_QWORD *)(v776[0] + 48) = v462[7];
              v474 = *(int32x2_t *****)(v296 + 56);
              v804.n128_u64[1] = 2;
              v805 = 0;
              v806 = v474;
              if (v474 != (int32x2_t ****)-8192 && v474 != (int32x2_t ****)-4096 && v474 != 0)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v804.n128_i8[8]);
              v804.n128_u64[0] = (unint64_t)&unk_1E814DA10;
              v807 = &v811;
              v476 = sub_1C52E2ED8((uint64_t)&v811, &v804);
              if (v806 != (int32x2_t ****)-8192 && v806 != (int32x2_t ****)-4096 && v806)
              {
                v477 = v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8) = v805;
                if (v805)
                {
                  *v805 = *v805 & 7 | v477;
                }
                else
                {
                  v478 = v806;
                  v479 = ***v806;
                  v480 = (unint64_t)v479[303];
                  if (v480 <= v477)
                  {
                    v481 = v479[305].u32[0];
                    if (v480 + 16 * v481 > v477)
                    {
                      v482 = v481 - 1;
                      LODWORD(v483) = v482 & ((v806 >> 4) ^ (v806 >> 9));
                      v484 = (int32x2_t *****)(v480 + 16 * v483);
                      v485 = *v484;
                      if (v806 == *v484)
                      {
LABEL_920:
                        *v484 = (int32x2_t ****)-8192;
                        v479[304] = vadd_s32(v479[304], (int32x2_t)0x1FFFFFFFFLL);
                        v478 = v806;
                      }
                      else
                      {
                        v486 = 1;
                        while (v485 != (int32x2_t ****)-4096)
                        {
                          v487 = v483 + v486++;
                          v483 = v487 & v482;
                          v485 = *(int32x2_t *****)(v480 + 16 * v483);
                          if (v806 == v485)
                          {
                            v484 = (int32x2_t *****)(v480 + 16 * v483);
                            goto LABEL_920;
                          }
                        }
                      }
                      *((_BYTE *)v478 + 17) &= ~1u;
                    }
                  }
                }
              }
              *(_QWORD *)(v776[0] + 56) = v476[7];
              v488 = *(unsigned int *)(v296 + 8);
              if ((_DWORD)v488)
              {
                v567 = *(unint64_t **)v296;
                v568 = *(_QWORD *)v296 + 8 * v488;
                do
                {
                  v569 = (int32x2_t ****)*v567;
                  v570 = v776[0];
                  v804.n128_u64[1] = 2;
                  v805 = 0;
                  v806 = v569;
                  if (v569 != (int32x2_t ****)-8192 && v569 != (int32x2_t ****)-4096 && v569 != 0)
                    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v804.n128_i8[8]);
                  v804.n128_u64[0] = (unint64_t)&unk_1E814DA10;
                  v807 = &v811;
                  v572 = sub_1C52E2ED8((uint64_t)&v811, &v804);
                  if (v806 != (int32x2_t ****)-8192 && v806 != (int32x2_t ****)-4096 && v806 != 0)
                  {
                    v574 = v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)(v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8) = v805;
                    if (v805)
                    {
                      *v805 = *v805 & 7 | v574;
                    }
                    else
                    {
                      v575 = v806;
                      v576 = ***v806;
                      v577 = (unint64_t)v576[303];
                      if (v577 <= v574)
                      {
                        v578 = v576[305].u32[0];
                        if (v577 + 16 * v578 > v574)
                        {
                          v579 = v578 - 1;
                          LODWORD(v580) = v579 & ((v806 >> 4) ^ (v806 >> 9));
                          v581 = (int32x2_t *****)(v577 + 16 * v580);
                          v582 = *v581;
                          if (v806 == *v581)
                          {
LABEL_1058:
                            *v581 = (int32x2_t ****)-8192;
                            v576[304] = vadd_s32(v576[304], (int32x2_t)0x1FFFFFFFFLL);
                            v575 = v806;
                          }
                          else
                          {
                            v583 = 1;
                            while (v582 != (int32x2_t ****)-4096)
                            {
                              v584 = v580 + v583++;
                              v580 = v584 & v579;
                              v582 = *(int32x2_t *****)(v577 + 16 * v580);
                              if (v806 == v582)
                              {
                                v581 = (int32x2_t *****)(v577 + 16 * v580);
                                goto LABEL_1058;
                              }
                            }
                          }
                          *((_BYTE *)v575 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v585 = v572[7];
                  v586 = *(unsigned int *)(v570 + 8);
                  if (v586 >= *(unsigned int *)(v570 + 12))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v570, v570 + 16, v586 + 1, 8);
                    v586 = *(unsigned int *)(v570 + 8);
                  }
                  *(_QWORD *)(*(_QWORD *)v570 + 8 * v586) = v585;
                  ++*(_DWORD *)(v570 + 8);
                  ++v567;
                }
                while (v567 != (unint64_t *)v568);
              }
              v489 = *(unsigned int *)(v296 + 72);
              if ((_DWORD)v489)
              {
                v587 = *(int32x2_t ******)(v296 + 64);
                v588 = &v587[v489];
                do
                {
                  v589 = *v587;
                  v804.n128_u64[1] = 2;
                  v805 = 0;
                  v806 = v589;
                  if (v589 != (int32x2_t ****)-8192 && v589 != (int32x2_t ****)-4096 && v589 != 0)
                    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v804.n128_i8[8]);
                  v804.n128_u64[0] = (unint64_t)&unk_1E814DA10;
                  v807 = &v811;
                  v591 = sub_1C52E2ED8((uint64_t)&v811, &v804);
                  if (v806 != (int32x2_t ****)-8192 && v806 != (int32x2_t ****)-4096 && v806 != 0)
                  {
                    v593 = v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)(v804.n128_u64[1] & 0xFFFFFFFFFFFFFFF8) = v805;
                    if (v805)
                    {
                      *v805 = *v805 & 7 | v593;
                    }
                    else
                    {
                      v594 = v806;
                      v595 = ***v806;
                      v596 = (unint64_t)v595[303];
                      if (v596 <= v593)
                      {
                        v597 = v595[305].u32[0];
                        if (v596 + 16 * v597 > v593)
                        {
                          v598 = v597 - 1;
                          LODWORD(v599) = v598 & ((v806 >> 4) ^ (v806 >> 9));
                          v600 = (int32x2_t *****)(v596 + 16 * v599);
                          v601 = *v600;
                          if (v806 == *v600)
                          {
LABEL_1085:
                            *v600 = (int32x2_t ****)-8192;
                            v595[304] = vadd_s32(v595[304], (int32x2_t)0x1FFFFFFFFLL);
                            v594 = v806;
                          }
                          else
                          {
                            v602 = 1;
                            while (v601 != (int32x2_t ****)-4096)
                            {
                              v603 = v599 + v602++;
                              v599 = v603 & v598;
                              v601 = *(int32x2_t *****)(v596 + 16 * v599);
                              if (v806 == v601)
                              {
                                v600 = (int32x2_t *****)(v596 + 16 * v599);
                                goto LABEL_1085;
                              }
                            }
                          }
                          *((_BYTE *)v594 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v604 = v591[7];
                  v605 = v776[0];
                  v606 = *(unsigned int *)(v776[0] + 72);
                  if (v606 >= *(unsigned int *)(v776[0] + 76))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v776[0] + 64, v776[0] + 80, v606 + 1, 8);
                    v606 = *(unsigned int *)(v605 + 72);
                  }
                  *(_QWORD *)(*(_QWORD *)(v605 + 64) + 8 * v606) = v604;
                  ++*(_DWORD *)(v605 + 72);
                  ++v587;
                }
                while (v587 != v588);
              }
              llvm::Value::doRAUW(v21, v770, (llvm::Value *)1);
              if ((_BYTE)v816)
              {
                sub_1C4E43068((uint64_t)&v813);
                MEMORY[0x1CAA32FB4](v813, 8);
                LOBYTE(v816) = 0;
              }
              v490 = (_QWORD *)v811.n128_u64[0];
              if ((_DWORD)v812)
              {
                v491 = v811.n128_u64[0] + ((unint64_t)v812 << 6);
                do
                {
                  v492 = v490[3];
                  if ((v492 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  {
                    v493 = v490[7];
                    if (v493)
                    {
                      if (v493 != -8192 && v493 != -4096)
                      {
                        v494 = v490[5] & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v494 = v490[6];
                        v495 = (unint64_t *)v490[6];
                        if (v495)
                        {
                          *v495 = *v495 & 7 | v494;
                        }
                        else
                        {
                          v496 = v490[7];
                          v497 = ***(int32x2_t ****)v496;
                          v498 = (unint64_t)v497[303];
                          if (v498 <= v494)
                          {
                            v499 = v497[305].u32[0];
                            if (v498 + 16 * v499 > v494)
                            {
                              v500 = v499 - 1;
                              LODWORD(v501) = v500 & ((v496 >> 4) ^ (v496 >> 9));
                              v502 = (uint64_t *)(v498 + 16 * v501);
                              v503 = *v502;
                              if (v496 == *v502)
                              {
LABEL_941:
                                *v502 = -8192;
                                v497[304] = vadd_s32(v497[304], (int32x2_t)0x1FFFFFFFFLL);
                                v496 = v490[7];
                              }
                              else
                              {
                                v504 = 1;
                                while (v503 != -4096)
                                {
                                  v505 = v501 + v504++;
                                  v501 = v505 & v500;
                                  v503 = *(_QWORD *)(v498 + 16 * v501);
                                  if (v496 == v503)
                                  {
                                    v502 = (uint64_t *)(v498 + 16 * v501);
                                    goto LABEL_941;
                                  }
                                }
                              }
                              *(_BYTE *)(v496 + 17) &= ~1u;
                            }
                          }
                        }
                        v492 = v490[3];
                      }
                    }
                  }
                  if (v492 != -4096 && v492 != -8192 && v492 != 0)
                  {
                    v507 = v490[1] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v507 = v490[2];
                    v508 = (unint64_t *)v490[2];
                    if (v508)
                    {
                      *v508 = *v508 & 7 | v507;
                    }
                    else
                    {
                      v509 = v490[3];
                      v510 = ***(int32x2_t ****)v509;
                      v511 = (unint64_t)v510[303];
                      if (v511 <= v507)
                      {
                        v512 = v510[305].u32[0];
                        if (v511 + 16 * v512 > v507)
                        {
                          v513 = v512 - 1;
                          LODWORD(v514) = v513 & ((v509 >> 4) ^ (v509 >> 9));
                          v515 = (uint64_t *)(v511 + 16 * v514);
                          v516 = *v515;
                          if (v509 == *v515)
                          {
LABEL_960:
                            *v515 = -8192;
                            v510[304] = vadd_s32(v510[304], (int32x2_t)0x1FFFFFFFFLL);
                            v509 = v490[3];
                          }
                          else
                          {
                            v517 = 1;
                            while (v516 != -4096)
                            {
                              v518 = v514 + v517++;
                              v514 = v518 & v513;
                              v516 = *(_QWORD *)(v511 + 16 * v514);
                              if (v509 == v516)
                              {
                                v515 = (uint64_t *)(v511 + 16 * v514);
                                goto LABEL_960;
                              }
                            }
                          }
                          *(_BYTE *)(v509 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v490 += 8;
                }
                while (v490 != (_QWORD *)v491);
                v490 = (_QWORD *)v811.n128_u64[0];
              }
              MEMORY[0x1CAA32FB4](v490, 8);
              if (v776[0])
              {
                v519 = *(uint64_t **)(v776[0] + 48);
                v520 = (llvm::BasicBlock *)(v519 + 5);
                __pb = v519;
                v521 = (llvm::BasicBlock *)v519[6];
                v701 = v520;
                if (v521 != v520)
                {
                  v522 = (_QWORD *)((char *)v521 - 24);
                  if (!v521)
                    v522 = 0;
                  if (*((_BYTE *)v522 + 16) == 83)
                  {
                    v693 = *(_DWORD *)(v776[0] + 72) + 1;
                    if ((*((_DWORD *)v522 + 5) & 0x7FFFFFFu) > v693)
                    {
                      while (1)
                      {
                        v523 = (_QWORD *)((char *)v521 - 24);
                        v524 = v521 ? (uint64_t)v521 - 24 : 0;
                        if (*(_BYTE *)(v524 + 16) != 83)
                          break;
                        v521 = (llvm::BasicBlock *)*((_QWORD *)v521 + 1);
                        if (v521 == v701)
                        {
                          v523 = 0;
                          break;
                        }
                      }
                      LOWORD(v814) = 257;
                      v525 = llvm::BasicBlock::splitBasicBlock(__pb, v523 + 3, (uint64_t)&v811, 0);
                      *(_QWORD *)(v776[0] + 48) = v525;
                      v526 = (llvm::BasicBlock *)__pb[6];
                      v527 = *(_QWORD *)(*(_QWORD *)(v776[0] + 48) + 48);
                      v811.n128_u64[0] = (unint64_t)&v812;
                      v811.n128_u64[1] = 0x400000000;
                      if (v526 != v701)
                      {
                        if (v527)
                          v528 = v527 - 24;
                        else
                          v528 = 0;
                        do
                        {
                          if (v526)
                            v529 = (uint64_t)v526 - 24;
                          else
                            v529 = 0;
                          v530 = *(unsigned __int8 *)(v529 + 16);
                          if (v530 == 83)
                            v531 = (llvm::ValueAsMetadata *)v529;
                          else
                            v531 = 0;
                          if (!v526 || v530 != 83)
                            break;
                          v532 = *(_QWORD *)v531;
                          LOWORD(v807) = 257;
                          v533 = operator new(0x48uLL);
                          v534 = v533;
                          v533[1] = v532;
                          v535 = (llvm::Value *)(v533 + 1);
                          *v533 = 0;
                          v533[2] = 0;
                          v533[3] = 0x4000000000000053;
                          *((_OWORD *)v533 + 2) = 0u;
                          v536 = (char *)(v533 + 4);
                          *((_OWORD *)v533 + 3) = 0u;
                          *((_DWORD *)v533 + 16) = 0;
                          if (v528)
                          {
                            v544 = *(_QWORD *)(v528 + 40);
                            v533[6] = v544;
                            *(_WORD *)(v544 + 18) &= ~0x8000u;
                            if ((*((_BYTE *)v533 + 31) & 0x10) != 0)
                            {
                              v546 = *(_QWORD *)(v544 + 56);
                              if (v546)
                              {
                                v547 = *(llvm::ValueSymbolTable **)(v546 + 104);
                                if (v547)
                                  llvm::ValueSymbolTable::reinsertValue(v547, v535);
                              }
                            }
                            v545 = *(_QWORD *)(v528 + 24);
                            v534[4] = v545;
                            v534[5] = v528 + 24;
                            *(_QWORD *)(v545 + 8) = v536;
                            *(_QWORD *)(v528 + 24) = v536;
                          }
                          *((_DWORD *)v534 + 17) = v693;
                          llvm::Value::setName((uint64_t ***)v535, (uint64_t)&v804);
                          v537 = *((unsigned int *)v534 + 17);
                          v538 = operator new(40 * v537);
                          *v534 = v538;
                          if ((_DWORD)v537)
                          {
                            v539 = &v538[4 * v537];
                            do
                            {
                              *v538 = 0;
                              v538[1] = 0;
                              v538[2] = 0;
                              v538[3] = v535;
                              v538 += 4;
                            }
                            while (v538 != v539);
                          }
                          llvm::Value::doRAUW(v531, v535, (llvm::Value *)1);
                          v540 = *(_QWORD *)(v776[0] + 48);
                          v541 = v540 + 40;
                          for (j = *(_QWORD *)(v540 + 48); j != v541; j = *(_QWORD *)(j + 8))
                          {
                            v528 = j - 24;
                            if (j)
                              v543 = j - 24;
                            else
                              v543 = 0;
                            if (*(_BYTE *)(v543 + 16) != 83)
                              goto LABEL_1004;
                          }
                          v528 = 0;
LABEL_1004:
                          sub_1C477667C(v535, v529, (uint64_t)__pb);
                          v548 = *(unsigned int *)(v776[0] + 72);
                          if ((_DWORD)v548)
                          {
                            v549 = *(uint64_t **)(v776[0] + 64);
                            v550 = &v549[v548];
                            do
                            {
                              v551 = *v549;
                              v552 = *((_DWORD *)v531 + 5);
                              v553 = v552 & 0x7FFFFFF;
                              if ((v552 & 0x7FFFFFF) != 0)
                              {
                                v554 = 0;
                                while (1)
                                {
                                  v555 = (_DWORD *)((char *)v531 - 32 * v553);
                                  if ((v552 & 0x40000000) != 0)
                                    v555 = (_DWORD *)*((_QWORD *)v531 - 1);
                                  if (*(_QWORD *)&v555[8 * *((unsigned int *)v531 + 15) + 2 * v554] == v551)
                                    break;
                                  if (v553 == ++v554)
                                    goto LABEL_1012;
                                }
                              }
                              else
                              {
LABEL_1012:
                                LODWORD(v554) = -1;
                              }
                              if ((v552 & 0x40000000) != 0)
                                v556 = (_DWORD *)*((_QWORD *)v531 - 1);
                              else
                                v556 = (_DWORD *)((char *)v531 - 32 * v553);
                              sub_1C477667C(v535, *(_QWORD *)&v556[8 * v554], *v549);
                              v557 = *((_DWORD *)v531 + 5);
                              v558 = v557 & 0x7FFFFFF;
                              if ((v557 & 0x7FFFFFF) != 0)
                              {
                                v559 = 0;
                                while (1)
                                {
                                  v560 = (_DWORD *)((char *)v531 - 32 * v558);
                                  if ((v557 & 0x40000000) != 0)
                                    v560 = (_DWORD *)*((_QWORD *)v531 - 1);
                                  if (*(_QWORD *)&v560[8 * *((unsigned int *)v531 + 15) + 2 * v559] == v551)
                                    break;
                                  if (v558 == ++v559)
                                    goto LABEL_1021;
                                }
                              }
                              else
                              {
LABEL_1021:
                                LODWORD(v559) = -1;
                              }
                              llvm::PHINode::removeIncomingValue(v531, v559, 1);
                              ++v549;
                            }
                            while (v549 != v550);
                          }
                          v561 = *((_DWORD *)v531 + 5);
                          if ((v561 & 0x40000000) != 0)
                          {
                            v563 = (llvm::Value **)*((_QWORD *)v531 - 1);
                            v562 = v561 & 0x7FFFFFF;
                          }
                          else
                          {
                            v562 = v561 & 0x7FFFFFF;
                            v563 = (llvm::Value **)((char *)v531 - 32 * v562);
                          }
                          v564 = *v563;
                          if (v562)
                          {
                            v565 = 32 * v562;
                            while (v564 == *v563)
                            {
                              v563 += 4;
                              v565 -= 32;
                              if (!v565)
                                goto LABEL_1032;
                            }
                          }
                          else
                          {
LABEL_1032:
                            if (v564)
                            {
                              llvm::Value::doRAUW(v531, v564, (llvm::Value *)1);
                              v566 = v811.n128_u32[2];
                              if (v811.n128_u32[2] >= (unint64_t)v811.n128_u32[3])
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v811, (uint64_t)&v812, v811.n128_u32[2] + 1, 8);
                                v566 = v811.n128_u32[2];
                              }
                              *(_QWORD *)(v811.n128_u64[0] + 8 * v566) = v531;
                              ++v811.n128_u32[2];
                            }
                          }
                          v526 = (llvm::BasicBlock *)*((_QWORD *)v526 + 1);
                        }
                        while (v526 != v701);
                        if (v811.n128_u32[2])
                        {
                          v607 = (uint64_t *)v811.n128_u64[0];
                          v608 = 8 * v811.n128_u32[2];
                          do
                          {
                            v609 = *v607++;
                            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v609 + 40) + 40, (uint64_t ***)v609);
                            v610 = *(_QWORD *)(v609 + 24);
                            v611 = *(_QWORD **)(v609 + 32);
                            *v611 = v610;
                            *(_QWORD *)(v610 + 8) = v611;
                            *(_QWORD *)(v609 + 24) = 0;
                            *(_QWORD *)(v609 + 32) = 0;
                            llvm::Value::deleteValue((llvm::Value *)v609);
                            v608 -= 8;
                          }
                          while (v608);
                        }
                      }
                      v612 = *(unsigned int *)(v776[0] + 72);
                      if ((_DWORD)v612)
                      {
                        v613 = *(_QWORD *)(v776[0] + 64);
                        v614 = 8 * v612;
                        do
                        {
                          v615 = *(_QWORD *)(*(_QWORD *)v613 + 40);
                          if (v615 == *(_QWORD *)v613 + 40)
                          {
                            v617 = 0;
                          }
                          else
                          {
                            if (v615)
                              v616 = (unsigned __int8 *)(v615 - 24);
                            else
                              v616 = 0;
                            if (v616[16] - 29 >= 0xB)
                              v617 = 0;
                            else
                              v617 = (llvm::User *)v616;
                          }
                          llvm::User::replaceUsesOfWith(v617, (llvm::Value *)__pb, *(llvm::Value **)(v776[0] + 48));
                          v613 += 8;
                          v614 -= 8;
                        }
                        while (v614);
                      }
                      if ((uint64_t *)v811.n128_u64[0] != &v812)
                        free((void *)v811.n128_u64[0]);
                    }
                  }
                }
              }
              __dst = &v783;
              v782 = 0x100000000;
              HIDWORD(v788) = 0;
              v785 = 0uLL;
              LODWORD(v786) = 0;
              LOBYTE(v788) = 0;
              *((_QWORD *)&v786 + 1) = 0;
              v787 = v770;
              sub_1C53BA620((uint64_t)&__dst, 0);
              v731 = 0;
              v730 = 0;
              LODWORD(v732) = 0;
              v733 = 0u;
              v734 = 0u;
              v735 = 0;
              v736 = v738;
              v737 = 0x400000000;
              v741 = 0;
              v742 = 0;
              v740 = &v742;
              v743 = 1;
              llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)&v730, (uint64_t)&__dst);
              sub_1C4EEA178((uint64_t)&v801, v770, (uint64_t)&v730, 0, 0, 0);
              v618 = (uint64_t **)operator new();
              v619 = v770;
              *v618 = 0;
              llvm::BlockFrequencyInfo::calculate(v618, v619);
              v620 = v777;
              v777 = v618;
              if (v620)
              {
                v621 = *v620;
                *v620 = 0;
                if (v621)
                  (*(void (**)(uint64_t *))(*v621 + 8))(v621);
                MEMORY[0x1CAA32FC0](v620, 0x20C4093837F09);
              }
              v622 = (_QWORD *)((uint64_t (*)(_QWORD, llvm::Value *))v780)(*((_QWORD *)&v780 + 1), v770);
              v623 = v776[0];
              v624 = (uint64_t *)operator new(8uLL);
              *v624 = *(_QWORD *)(v623 + 56);
              v625 = v624 + 1;
              v626 = sub_1C574E2C0(*(llvm::BasicBlock **)(v623 + 56), v622);
              if (v627 == 1)
                v775 = 1;
              v628 = v770;
              v629 = v774 + v626;
              if (__OFADD__(v774, v626))
                v629 = ((uint64_t)(v774 + v626) >> 63) ^ 0x8000000000000000;
              v774 = v629;
              v630 = (char *)v770 + 72;
              v631 = (char *)*((_QWORD *)v770 + 10);
              if (v631 == (char *)v770 + 72)
              {
                v632 = (llvm::BasicBlock **)(v624 + 1);
              }
              else
              {
                v632 = (llvm::BasicBlock **)(v624 + 1);
                do
                {
                  if (v631)
                    v633 = (llvm::BasicBlock *)(v631 - 24);
                  else
                    v633 = 0;
                  if (*(llvm::BasicBlock **)(v776[0] + 48) != v633)
                  {
                    v634 = *(_QWORD *)v776[0];
                    v635 = *(unsigned int *)(v776[0] + 8);
                    if ((_DWORD)v635)
                    {
                      v636 = 8 * v635;
                      v637 = *(llvm::BasicBlock ***)v776[0];
                      while (*v637 != v633)
                      {
                        ++v637;
                        v636 -= 8;
                        if (!v636)
                        {
                          v637 = (llvm::BasicBlock **)(v634 + 8 * v635);
                          break;
                        }
                      }
                    }
                    else
                    {
                      v637 = *(llvm::BasicBlock ***)v776[0];
                    }
                    if (v635 == ((uint64_t)v637 - v634) >> 3 && v633 != *(llvm::BasicBlock **)(v776[0] + 56))
                    {
                      if (v632 >= (llvm::BasicBlock **)v625)
                      {
                        v638 = ((char *)v632 - (char *)v624) >> 3;
                        v639 = v638 + 1;
                        if ((unint64_t)(v638 + 1) >> 61)
                          goto LABEL_1213;
                        if (((char *)v625 - (char *)v624) >> 2 > v639)
                          v639 = ((char *)v625 - (char *)v624) >> 2;
                        if ((unint64_t)((char *)v625 - (char *)v624) >= 0x7FFFFFFFFFFFFFF8)
                          v640 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v640 = v639;
                        if (v640)
                        {
                          if (v640 >> 61)
                            goto LABEL_1214;
                          v641 = (char *)operator new(8 * v640);
                        }
                        else
                        {
                          v641 = 0;
                        }
                        v642 = (uint64_t *)&v641[8 * v638];
                        *v642 = (uint64_t)v633;
                        v643 = (llvm::BasicBlock **)(v642 + 1);
                        if (v632 != (llvm::BasicBlock **)v624)
                        {
                          do
                          {
                            v644 = (uint64_t)*--v632;
                            *--v642 = v644;
                          }
                          while (v632 != (llvm::BasicBlock **)v624);
                          v632 = (llvm::BasicBlock **)v624;
                        }
                        v624 = v642;
                        v625 = (uint64_t *)&v641[8 * v640];
                        if (v632)
                          operator delete(v632);
                        v632 = v643;
                      }
                      else
                      {
                        *v632++ = v633;
                      }
                      v645 = sub_1C574E2C0(v633, v622);
                      if (v646 == 1)
                        v775 = 1;
                      v647 = v774 + v645;
                      if (__OFADD__(v774, v645))
                        v647 = ((uint64_t)(v774 + v645) >> 63) ^ 0x8000000000000000;
                      v774 = v647;
                    }
                  }
                  v631 = (char *)*((_QWORD *)v631 + 1);
                }
                while (v631 != v630);
                v628 = v770;
              }
              llvm::CodeExtractorAnalysisCache::CodeExtractorAnalysisCache((llvm::CodeExtractorAnalysisCache *)&v747, v628);
              v648 = ((char *)v632 - (char *)v624) >> 3;
              v649 = (uint64_t)v777;
              v650 = ((uint64_t (*)(_QWORD, llvm::Value *))v779)(*((_QWORD *)&v779 + 1), v770);
              v794 = 0;
              LOBYTE(v792) = 0;
              llvm::CodeExtractor::CodeExtractor((uint64_t)&v811, v624, v648, (uint64_t)&__dst, 0, v649, (uint64_t)&v801, v650, 1u, 0, 0, &v792);
              v296 = llvm::CodeExtractor::extractCodeRegion((llvm::CodeExtractor *)&v811, (const llvm::CodeExtractorAnalysisCache *)&v747);
              if (v827)
              {
                v828 = v827;
                operator delete(v827);
              }
              MEMORY[0x1CAA32FB4](v826, 8);
              if (v825 < 0)
                operator delete(v824);
              if (v822 != &v823)
                free(v822);
              sub_1C5408A20(&v817);
              if (v296)
              {
                v658 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v296 + 8) + 24) + 40);
                v659 = v772;
                if (v772 >= (unint64_t)HIDWORD(v772))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v771, (uint64_t)v773, v772 + 1, 16);
                  v659 = v772;
                }
                v660 = (uint64_t *)&v771[16 * v659];
                *v660 = v296;
                v660[1] = v658;
                LODWORD(v772) = v772 + 1;
              }
              else
              {
                v651 = v778;
                v652 = ****(_QWORD ****)v778;
                if (*(_QWORD *)(v652 + 128)
                  || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v652 + 72) + 48))(*(_QWORD *)(v652 + 72)))
                {
                  v653 = *(_QWORD *)(*v624 + 48);
                  if (v653)
                    v654 = v653 - 24;
                  else
                    v654 = 0;
                  v655 = *(_QWORD *)(v654 + 48);
                  if (v655)
                  {
                    v656 = *(_QWORD *)(v655 - 8 * *(unsigned int *)(v655 + 8));
                    if (*(_BYTE *)v656 != 15)
                      v656 = *(_QWORD *)(v656 - 8 * *(unsigned int *)(v656 + 8));
                    v657 = *(_DWORD *)(v655 + 4);
                    LODWORD(v655) = *(unsigned __int16 *)(v655 + 2);
                  }
                  else
                  {
                    v656 = 0;
                    v657 = 0;
                  }
                  v661 = *(_QWORD *)(v654 + 40);
                  v662 = *(_QWORD *)(v661 + 56);
                  v811.n128_u32[2] = 10;
                  v811.n128_u8[12] = 2;
                  v812 = v662;
                  v813 = v656;
                  v814 = __PAIR64__(v655, v657);
                  v815 = "partial-inlining";
                  v816 = "ExtractFailed";
                  v817 = 13;
                  v818 = 0;
                  v819 = 0;
                  *(_QWORD *)&v820 = v821;
                  *((_QWORD *)&v820 + 1) = 0x400000000;
                  v829 = 0;
                  v830 = -1;
                  v831 = v661;
                  v811.n128_u64[0] = (unint64_t)&off_1E814E538;
                  v761 = "Failed to extract region at block ";
                  v762 = 34;
                  sub_1C53B17B4((uint64_t)&v820, (const void **)&v761);
                  llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v761, "Block", 5uLL, (_BYTE *)*v624);
                  v663 = sub_1C47E3888((uint64_t)&v811, (uint64_t)&v761);
                  sub_1C61998EC((uint64_t)&v804, v663);
                  v804.n128_u64[0] = (unint64_t)&off_1E814E538;
                  if (v766 < 0)
                    operator delete(v765);
                  if (v764 < 0)
                    operator delete(v761);
                  v811.n128_u64[0] = (unint64_t)&off_1E814E790;
                  v664 = (char *)v820;
                  if (DWORD2(v820))
                  {
                    v665 = (unint64_t)DWORD2(v820) << 6;
                    do
                    {
                      v666 = (void **)&v664[v665];
                      if (v664[v665 - 17] < 0)
                        operator delete(*(v666 - 5));
                      if (*((char *)v666 - 41) < 0)
                        operator delete(*(v666 - 8));
                      v665 -= 64;
                    }
                    while (v665);
                    v664 = (char *)v820;
                  }
                  if (v664 != (char *)v821)
                    free(v664);
                  llvm::OptimizationRemarkEmitter::emit(v651, (llvm::DiagnosticInfoOptimizationBase *)&v804);
                  v804.n128_u64[0] = (unint64_t)&off_1E814E790;
                  v667 = (char *)v808;
                  if ((_DWORD)v809)
                  {
                    v668 = (unint64_t)v809 << 6;
                    do
                    {
                      v669 = (void **)&v667[v668];
                      if (v667[v668 - 17] < 0)
                        operator delete(*(v669 - 5));
                      if (*((char *)v669 - 41) < 0)
                        operator delete(*(v669 - 8));
                      v668 -= 64;
                    }
                    while (v668);
                    v667 = (char *)v808;
                  }
                  if (v667 != (char *)v810)
                    free(v667);
                }
              }
              sub_1C626D3D0((uint64_t)&v747);
              if (v624)
                operator delete(v624);
              sub_1C4DC0BBC((uint64_t)&v801);
              llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(&v730);
              sub_1C4DC4E38((uint64_t *)&v785);
              if (__dst != &v783)
                free(__dst);
              if (v296)
              {
                v23 = sub_1C574C128(a1, (_BYTE **)&__src);
                if (!v23)
                  v296 = 0;
              }
              else
              {
                v23 = 0;
              }
              sub_1C574E1F0((uint64_t)&__src);
              v19 = v702;
            }
            else
            {
              v23 = 0;
            }
LABEL_527:
            sub_1C574ED20((uint64_t *)v726, 0);
LABEL_528:
            v297 = v708;
            v708 = 0;
            if (v297)
            {
              v298 = *v297;
              *v297 = 0;
              if (v298)
                (*(void (**)(uint64_t))(*(_QWORD *)v298 + 8))(v298);
              MEMORY[0x1CAA32FC0](v297, 0x20C4093837F09);
            }
            if (!v296)
            {
              v20 = a1;
              goto LABEL_53;
            }
            v299 = (char *)v704;
            if (v704 < (uint64_t *)v705)
            {
              *v704 = v296;
              v300 = (uint64_t *)(v299 + 8);
              v20 = a1;
              goto LABEL_651;
            }
            v301 = (char *)v703;
            v302 = ((char *)v704 - (_BYTE *)v703) >> 3;
            v303 = v302 + 1;
            if ((unint64_t)(v302 + 1) >> 61)
              goto LABEL_1213;
            v304 = v705 - (_BYTE *)v703;
            if ((v705 - (_BYTE *)v703) >> 2 > v303)
              v303 = v304 >> 2;
            if ((unint64_t)v304 >= 0x7FFFFFFFFFFFFFF8)
              v305 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v305 = v303;
            if (!v305)
            {
              v306 = 0;
              goto LABEL_644;
            }
            if (v305 >> 61)
              goto LABEL_1214;
            v306 = (char *)operator new(8 * v305);
LABEL_644:
            v345 = (uint64_t *)&v306[8 * v302];
            *v345 = v296;
            v300 = v345 + 1;
            if (v299 == v301)
            {
              v20 = a1;
            }
            else
            {
              v20 = a1;
              do
              {
                v346 = *((_QWORD *)v299 - 1);
                v299 -= 8;
                *--v345 = v346;
              }
              while (v299 != v301);
              v299 = (char *)v703;
            }
            v703 = v345;
            v704 = v300;
            v705 = &v306[8 * v305];
            v19 = v702;
            if (v299)
              operator delete(v299);
LABEL_651:
            v704 = v300;
LABEL_53:
            v19 = (v23 | v19) != 0;
            v18 = (char *)v704;
LABEL_54:
            if (v703 == v18)
            {
LABEL_1210:
              if (v18)
              {
                v704 = (uint64_t *)v18;
                operator delete(v18);
              }
              return;
            }
            goto LABEL_37;
          }
        }
        if (v401)
          v402 = v401 - 24;
        else
          v402 = 0;
        v403 = *(unsigned __int8 *)(v402 + 16);
        v404 = v403 - 29;
        if (v403 != 30)
        {
          v405 = 2;
          switch(v404)
          {
            case 1:
              goto LABEL_1215;
            case 2:
              v405 = (*(_DWORD *)(v402 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_795;
            case 3:
            case 9:
              v405 = (*(_DWORD *)(v402 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_795;
            case 4:
              goto LABEL_753;
            case 7:
              v405 = *(_WORD *)(v402 + 18) & 1;
              goto LABEL_795;
            case 8:
              v405 = 1;
              goto LABEL_753;
            case 10:
              v405 = *(_DWORD *)(v402 + 80) + 1;
LABEL_795:
              v399 = __pa;
              if (!v405)
                goto LABEL_771;
              goto LABEL_753;
            default:
              goto LABEL_771;
          }
        }
        if ((*(_DWORD *)(v402 + 20) & 0x7FFFFFF) == 3)
          v405 = 2;
        else
          v405 = 1;
LABEL_753:
        v406 = 0;
        v407 = v402 + 32;
        v408 = v402 - 64;
        v409 = v405;
        while (2)
        {
          v410 = *(unsigned __int8 *)(v402 + 16);
          if (v410 != 30)
            __asm { BR              X9 }
          v411 = *(_QWORD *)(v402 - 32 - 32 * v406);
          if ((_DWORD)v812)
          {
            v412 = ((v411 >> 4) ^ (v411 >> 9)) & (v812 - 1);
            v413 = *(_QWORD *)(v811.n128_u64[0] + 8 * v412);
            if (v411 != v413)
            {
              v414 = 1;
              while (v413 != -4096)
              {
                v415 = v412 + v414++;
                v412 = v415 & (v812 - 1);
                v413 = *(_QWORD *)(v811.n128_u64[0] + 8 * v412);
                if (v411 == v413)
                  goto LABEL_768;
              }
              goto LABEL_762;
            }
          }
          else
          {
LABEL_762:
            if (v411 == *v399)
            {
              v416 = *(unsigned int *)(v296 + 72);
              if (v416 >= *(unsigned int *)(v296 + 76))
              {
                v685 = v407;
                v686 = v400;
                v684 = v408;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v309, v692, v416 + 1, 8);
                v408 = v684;
                v407 = v685;
                v400 = v686;
                v399 = __pa;
                v416 = *(unsigned int *)(v296 + 72);
              }
              *(_QWORD *)(*(_QWORD *)(v296 + 64) + 8 * v416) = v400;
              ++*(_DWORD *)(v296 + 72);
            }
            else if (v411 != *(_QWORD *)(v296 + 56))
            {
              v296 = 0;
              v19 = v702;
              goto LABEL_880;
            }
          }
LABEL_768:
          if (++v406 == v409)
            goto LABEL_771;
          continue;
        }
      }
    }
    v68 = v62[16];
    if (v68 != 30)
      __asm { BR              X9 }
    v811.n128_u64[0] = *(_QWORD *)&v690[-32 * v63];
    if (*((_BYTE *)sub_1C629E230((uint64_t *)&v792, &v811) + 8))
      goto LABEL_122;
    v69 = v688[16];
    if (v69 != 30)
      __asm { BR              X9 }
    v811.n128_u64[0] = *(_QWORD *)&v690[-32 * v63];
    *((_BYTE *)sub_1C629E230((uint64_t *)&v792, &v811) + 8) = 1;
    v70 = v688;
    v71 = v688[16];
    if (v71 != 30)
      __asm { BR              X9 }
    v72 = *(_QWORD *)&v690[-32 * v63];
    v73 = __p;
    if (v50 >= v683)
    {
      v74 = (v50 - __p) >> 3;
      v75 = v74 + 1;
      if ((unint64_t)(v74 + 1) >> 61)
        goto LABEL_1213;
      if ((v683 - __p) >> 2 > v75)
        v75 = (v683 - __p) >> 2;
      if ((unint64_t)(v683 - __p) >= 0x7FFFFFFFFFFFFFF8)
        v76 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v76 = v75;
      if (v76)
      {
        if (v76 >> 61)
          goto LABEL_1214;
        v77 = (char *)operator new(8 * v76);
      }
      else
      {
        v77 = 0;
      }
      v78 = &v77[8 * v74];
      *(_QWORD *)v78 = v72;
      v677 = v78 + 8;
      if (v50 == __p)
      {
        v19 = v702;
      }
      else
      {
        v19 = v702;
        do
        {
          v79 = *((_QWORD *)v50 - 1);
          v50 -= 8;
          *((_QWORD *)v78 - 1) = v79;
          v78 -= 8;
        }
        while (v50 != __p);
      }
      v683 = &v77[8 * v76];
      if (__p)
        operator delete(__p);
      v73 = v78;
      v55 = (uint64_t)v699;
      v70 = v688;
      v50 = v677;
    }
    else
    {
      *(_QWORD *)v50 = v72;
      v50 += 8;
      v19 = v702;
    }
    v80 = v70[16];
    __p = v73;
    if (v80 != 30)
      __asm { BR              X9 }
    if (llvm::BranchProbabilityInfo::getEdgeProbability((uint64_t)&v801, v55, *(_QWORD *)&v690[-32 * v63]) > v682)
      goto LABEL_122;
    __src = &v771;
    v770 = (llvm::Value *)0x800000000;
    v81 = v688[16];
    if (v81 != 30)
      __asm { BR              X9 }
    llvm::DominatorTreeBase<llvm::BasicBlock,false>::getDescendants((uint64_t)&v730, *(_QWORD *)&v690[-32 * v63], (uint64_t)&__src);
    if (!llvm::BasicBlock::hasNPredecessors(*(llvm::BasicBlock **)__src, 1) || !(_DWORD)v770)
      goto LABEL_189;
    v678 = v50;
    v82 = 0;
    v83 = (llvm::BasicBlock **)__src;
    v84 = 8 * v770;
    v85 = (llvm::BasicBlock **)__src;
    do
    {
      v86 = (llvm::BasicBlock *)*((_QWORD *)*v85 + 5);
      if (v86 != (llvm::BasicBlock *)((char *)*v85 + 40))
      {
        if (v86)
          v87 = (uint64_t)v86 - 24;
        else
          v87 = 0;
        v88 = *(unsigned __int8 *)(v87 + 16);
        if (v88 != 30)
        {
          v89 = 2;
          switch(*(_BYTE *)(v87 + 16))
          {
            case 0x1E:
              goto LABEL_1215;
            case 0x1F:
              v89 = (*(_DWORD *)(v87 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_178;
            case 0x20:
            case 0x26:
              v89 = (*(_DWORD *)(v87 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_178;
            case 0x21:
              goto LABEL_161;
            case 0x24:
              v89 = *(_WORD *)(v87 + 18) & 1;
              goto LABEL_178;
            case 0x25:
              v89 = 1;
              goto LABEL_161;
            case 0x27:
              v89 = *(_DWORD *)(v87 + 80) + 1;
LABEL_178:
              if (!v89)
                goto LABEL_175;
              goto LABEL_161;
            default:
              goto LABEL_175;
          }
        }
        if ((*(_DWORD *)(v87 + 20) & 0x7FFFFFF) == 3)
          v89 = 2;
        else
          v89 = 1;
LABEL_161:
        v90 = 0;
        v91 = v82;
        do
        {
          if (v88 != 30)
            __asm { BR              X3 }
          v92 = *(_QWORD *)(v87 - 32 - 32 * v90);
          v93 = 8 * v770;
          v94 = (char *)__src;
          do
          {
            if (*(_QWORD *)v94 == v92)
              goto LABEL_167;
            v94 += 8;
            v93 -= 8;
          }
          while (v93);
          v94 = (char *)__src + 8 * v770;
LABEL_167:
          if (v770 == (v94 - (_BYTE *)__src) >> 3)
          {
            v82 = *v85;
            if (v91)
            {
              v95 = ***(_QWORD ***)v707[0];
              if (!*(_QWORD *)(v95 + 128)
                && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v95 + 72) + 48))(*(_QWORD *)(v95 + 72)))
              {
                v19 = v702;
                goto LABEL_187;
              }
              v104 = *(_QWORD *)(v92 + 48);
              if (v104)
                v105 = v104 - 24;
              else
                v105 = 0;
              v106 = *(_QWORD *)(v105 + 48);
              v19 = v702;
              if (v106)
              {
                v107 = *(_QWORD *)(v106 - 8 * *(unsigned int *)(v106 + 8));
                if (*(_BYTE *)v107 != 15)
                  v107 = *(_QWORD *)(v107 - 8 * *(unsigned int *)(v107 + 8));
                v108 = *(_DWORD *)(v106 + 4);
                LODWORD(v106) = *(unsigned __int16 *)(v106 + 2);
              }
              else
              {
                v107 = 0;
                v108 = 0;
              }
              v143 = *(_QWORD *)(v105 + 40);
              v144 = *(_QWORD *)(v143 + 56);
              v811.n128_u32[2] = 10;
              v811.n128_u8[12] = 2;
              v812 = v144;
              v813 = v107;
              v814 = __PAIR64__(v106, v108);
              v815 = "partial-inlining";
              v816 = "MultiExitRegion";
              v817 = 15;
              v818 = 0;
              v819 = 0;
              *(_QWORD *)&v820 = v821;
              *((_QWORD *)&v820 + 1) = 0x400000000;
              v829 = 0;
              v830 = -1;
              v831 = v143;
              v811.n128_u64[0] = (unint64_t)&off_1E814E538;
              __dst = "Region dominated by ";
              v782 = 20;
              sub_1C53B17B4((uint64_t)&v820, (const void **)&__dst);
              v145 = *(llvm::BasicBlock **)__src;
              if ((*(_BYTE *)(*(_QWORD *)__src + 23) & 0x10) != 0)
              {
                v146 = ***(_QWORD ***)v145;
                v147 = *(_QWORD *)(v146 + 152);
                v148 = *(unsigned int *)(v146 + 168);
                if ((_DWORD)v148)
                {
                  LODWORD(v149) = (v148 - 1) & ((v145 >> 4) ^ (v145 >> 9));
                  v150 = (llvm::BasicBlock **)(v147 + 16 * v149);
                  v151 = *v150;
                  if (*v150 != v145)
                  {
                    v152 = 1;
                    do
                    {
                      if (v151 == (llvm::BasicBlock *)-4096)
                        goto LABEL_279;
                      v153 = v149 + v152++;
                      v149 = v153 & (v148 - 1);
                      v151 = *(llvm::BasicBlock **)(v147 + 16 * v149);
                    }
                    while (v151 != v145);
                    v150 = (llvm::BasicBlock **)(v147 + 16 * v149);
                  }
                }
                else
                {
LABEL_279:
                  v150 = (llvm::BasicBlock **)(v147 + 16 * v148);
                }
                v154 = v150[1];
                v157 = *(_QWORD *)v154;
                v155 = (char *)v154 + 16;
                v156 = v157;
              }
              else
              {
                v156 = 0;
                v155 = &byte_1C871356D;
              }
              llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&__dst, "Block", 5uLL, v155, v156);
              v158 = sub_1C47E3888((uint64_t)&v811, (uint64_t)&__dst);
              v761 = " has more than one region exit edge.";
              v762 = 36;
              sub_1C53B17B4(v158 + 80, (const void **)&v761);
              sub_1C61998EC((uint64_t)&v804, v158);
              v804.n128_u64[0] = (unint64_t)&off_1E814E538;
              if (SBYTE7(v786) < 0)
                operator delete((void *)v785);
              if (v784 < 0)
                operator delete(__dst);
              v811.n128_u64[0] = (unint64_t)&off_1E814E790;
              v159 = (char *)v820;
              if (DWORD2(v820))
              {
                v160 = (unint64_t)DWORD2(v820) << 6;
                do
                {
                  v161 = (void **)&v159[v160];
                  if (v159[v160 - 17] < 0)
                    operator delete(*(v161 - 5));
                  if (*((char *)v161 - 41) < 0)
                    operator delete(*(v161 - 8));
                  v160 -= 64;
                }
                while (v160);
                v159 = (char *)v820;
                v19 = v702;
              }
              if (v159 != (char *)v821)
                free(v159);
              llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v707, (llvm::DiagnosticInfoOptimizationBase *)&v804);
              v804.n128_u64[0] = (unint64_t)&off_1E814E790;
              v162 = (char *)v808;
              if ((_DWORD)v809)
              {
                v163 = (unint64_t)v809 << 6;
                do
                {
                  v164 = (void **)&v162[v163];
                  if (v162[v163 - 17] < 0)
                    operator delete(*(v164 - 5));
                  if (*((char *)v164 - 41) < 0)
                    operator delete(*(v164 - 8));
                  v163 -= 64;
                }
                while (v163);
                v162 = (char *)v808;
                v19 = v702;
              }
              v55 = (uint64_t)v699;
              if (v162 != (char *)v810)
                free(v162);
LABEL_188:
              v50 = v678;
LABEL_189:
              if (__src != &v771)
                free(__src);
LABEL_122:
              v62 = v688;
              ++v63;
              v59 = *v60;
              goto LABEL_109;
            }
          }
          else
          {
            v82 = v91;
          }
          ++v90;
          v91 = v82;
          v55 = (uint64_t)v699;
        }
        while (v90 != v89);
      }
LABEL_175:
      ++v85;
    }
    while (v85 != (llvm::BasicBlock **)((char *)__src + 8 * v770));
    if (!v82)
    {
      v19 = v702;
      goto LABEL_188;
    }
    v96 = 0;
    v97 = 0;
    do
    {
      v672 = v97;
      v98 = *v83++;
      v99 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *((_QWORD *)v98 + 7));
      v100 = sub_1C574E2C0(v98, v99);
      if (v101 == 1)
        v96 = 1;
      v97 = ((uint64_t)(v672 + v100) >> 63) ^ 0x8000000000000000;
      if (!__OFADD__(v672, v100))
        v97 = v672 + v100;
      v84 -= 8;
    }
    while (v84);
    if (!byte_1ED80E308)
    {
      v102 = v97 < v676;
      if (v96 != v675)
        v102 = v96 < v675;
      if (v102)
      {
        v103 = ***(_QWORD ***)v707[0];
        if (*(_QWORD *)(v103 + 128)
          || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v103 + 72) + 48))(*(_QWORD *)(v103 + 72)))
        {
          v165 = v688[16];
          if (v165 != 30)
            __asm { BR              X9 }
          v166 = *(_QWORD *)(*(_QWORD *)&v690[-32 * v63] + 48);
          v167 = v166 - 24;
          if (!v166)
            v167 = 0;
          v168 = *(_QWORD *)(v167 + 40);
          v169 = *(_QWORD *)(v167 + 48);
          v170 = *(_QWORD *)(v168 + 56);
          if (v169)
          {
            v171 = *(_QWORD *)(v169 - 8 * *(unsigned int *)(v169 + 8));
            if (*(_BYTE *)v171 != 15)
              v171 = *(_QWORD *)(v171 - 8 * *(unsigned int *)(v171 + 8));
            v172 = *(_DWORD *)(v169 + 4);
            LODWORD(v169) = *(unsigned __int16 *)(v169 + 2);
          }
          else
          {
            v171 = 0;
            v172 = 0;
          }
          v811.n128_u32[2] = 11;
          v811.n128_u8[12] = 2;
          v812 = v170;
          v813 = v171;
          v814 = __PAIR64__(v169, v172);
          v815 = "partial-inlining";
          v816 = "TooCostly";
          v817 = 9;
          v818 = 0;
          v819 = 0;
          *(_QWORD *)&v820 = v821;
          *((_QWORD *)&v820 + 1) = 0x400000000;
          v829 = 0;
          v830 = -1;
          v831 = v168;
          v811.n128_u64[0] = (unint64_t)&off_1E814E570;
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__dst, "Callee", 6uLL, v21);
          sub_1C47E3888((uint64_t)&v811, (uint64_t)&__dst);
          v761 = " inline cost-savings smaller than ";
          v762 = 34;
          sub_1C53B17B4((uint64_t)&v820, (const void **)&v761);
          llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v761, "Cost", 4uLL, v676, v674);
          v173 = sub_1C47E3888((uint64_t)&v811, (uint64_t)&v761);
          sub_1C61998EC((uint64_t)&v804, v173);
          v804.n128_u64[0] = (unint64_t)&off_1E814E570;
          if (v766 < 0)
            operator delete(v765);
          if (v764 < 0)
            operator delete(v761);
          if (SBYTE7(v786) < 0)
            operator delete((void *)v785);
          if (v784 < 0)
            operator delete(__dst);
          v811.n128_u64[0] = (unint64_t)&off_1E814E790;
          v174 = (char *)v820;
          if (DWORD2(v820))
          {
            v175 = (unint64_t)DWORD2(v820) << 6;
            do
            {
              v176 = (void **)&v174[v175];
              if (v174[v175 - 17] < 0)
                operator delete(*(v176 - 5));
              if (*((char *)v176 - 41) < 0)
                operator delete(*(v176 - 8));
              v175 -= 64;
            }
            while (v175);
            v174 = (char *)v820;
          }
          if (v174 != (char *)v821)
            free(v174);
          llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v707, (llvm::DiagnosticInfoOptimizationBase *)&v804);
          v804.n128_u64[0] = (unint64_t)&off_1E814E790;
          v177 = (char *)v808;
          if ((_DWORD)v809)
          {
            v178 = (unint64_t)v809 << 6;
            do
            {
              v179 = (void **)&v177[v178];
              if (v177[v178 - 17] < 0)
                operator delete(*(v179 - 5));
              if (*((char *)v179 - 41) < 0)
                operator delete(*(v179 - 8));
              v178 -= 64;
            }
            while (v178);
            v177 = (char *)v808;
          }
          if (v177 != (char *)v810)
            free(v177);
        }
        v19 = v702;
LABEL_187:
        v55 = (uint64_t)v699;
        goto LABEL_188;
      }
    }
    if ((_DWORD)v770)
    {
      v109 = (uint64_t *)__src;
      v110 = (char *)__src + 8 * v770;
      v111 = v793;
      while (1)
      {
        v112 = *v109;
        if (!v111)
        {
          v115 = 0;
          goto LABEL_229;
        }
        v113 = v111 - 1;
        v114 = ((v112 >> 4) ^ (v112 >> 9)) & (v111 - 1);
        v115 = (uint64_t *)(v792 + 16 * v114);
        v116 = *v115;
        if (v112 != *v115)
          break;
LABEL_235:
        *((_BYTE *)v115 + 8) = 1;
        if (++v109 == (uint64_t *)v110)
          goto LABEL_261;
      }
      v117 = 0;
      v118 = 1;
      while (v116 != -4096)
      {
        if (v117)
          v119 = 0;
        else
          v119 = v116 == -8192;
        if (v119)
          v117 = v115;
        v120 = v114 + v118++;
        v114 = v120 & v113;
        v115 = (uint64_t *)(v792 + 16 * (v120 & v113));
        v116 = *v115;
        if (v112 == *v115)
          goto LABEL_235;
      }
      if (v117)
        v115 = v117;
LABEL_229:
      if (4 * DWORD2(v792) + 4 >= 3 * v111)
      {
        sub_1C574EB5C((uint64_t)&v792, 2 * v111);
        v111 = v793;
        v122 = v793 - 1;
        v123 = (v793 - 1) & ((v112 >> 4) ^ (v112 >> 9));
        v115 = (uint64_t *)(v792 + 16 * v123);
        v124 = *v115;
        if (v112 != *v115)
        {
          v125 = 0;
          v126 = 1;
          while (v124 != -4096)
          {
            if (v125)
              v127 = 0;
            else
              v127 = v124 == -8192;
            if (v127)
              v125 = v115;
            v128 = v123 + v126++;
            v123 = v128 & v122;
            v115 = (uint64_t *)(v792 + 16 * (v128 & v122));
            v124 = *v115;
            if (v112 == *v115)
              goto LABEL_257;
          }
          goto LABEL_258;
        }
      }
      else
      {
        if (v111 + ~DWORD2(v792) - HIDWORD(v792) > v111 >> 3)
        {
LABEL_231:
          v121 = *v115;
LABEL_232:
          ++DWORD2(v792);
          if (v121 != -4096)
            --HIDWORD(v792);
          *v115 = v112;
          *((_BYTE *)v115 + 8) = 0;
          goto LABEL_235;
        }
        sub_1C574EB5C((uint64_t)&v792, v111);
        v111 = v793;
        v129 = v793 - 1;
        v130 = (v793 - 1) & ((v112 >> 4) ^ (v112 >> 9));
        v115 = (uint64_t *)(v792 + 16 * v130);
        v131 = *v115;
        if (v112 != *v115)
        {
          v125 = 0;
          v132 = 1;
          while (v131 != -4096)
          {
            if (v125)
              v133 = 0;
            else
              v133 = v131 == -8192;
            if (v133)
              v125 = v115;
            v134 = v130 + v132++;
            v130 = v134 & v129;
            v115 = (uint64_t *)(v792 + 16 * (v134 & v129));
            v131 = *v115;
            if (v112 == *v115)
              goto LABEL_257;
          }
LABEL_258:
          if (v125)
            v115 = v125;
          goto LABEL_231;
        }
      }
LABEL_257:
      v121 = v112;
      goto LABEL_232;
    }
LABEL_261:
    SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v82);
    v136 = __src;
    v137 = v770;
    v138 = *(llvm::BasicBlock **)__src;
    v811.n128_u64[0] = (unint64_t)&v812;
    v811.n128_u64[1] = 0x800000000;
    v681 = SingleSuccessor;
    v673 = v138;
    if (v770 >= 9)
    {
      v180 = __src;
      v181 = v770;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v811, (uint64_t)&v812, v770, 8);
      v136 = v180;
      v137 = v181;
      v139 = v811.n128_u32[2];
      v140 = (uint64_t *)v811.n128_u64[0];
      v19 = v702;
    }
    else
    {
      v19 = v702;
      if (!(_DWORD)v770)
      {
        v142 = 0;
        v141 = 0;
        goto LABEL_265;
      }
      v139 = 0;
      v140 = &v812;
    }
    v141 = v137;
    memcpy(&v140[v139], v136, 8 * v137);
    v142 = v811.n128_u32[2];
LABEL_265:
    v811.n128_u32[2] = v142 + v141;
    *(_QWORD *)&v820 = v673;
    *((_QWORD *)&v820 + 1) = v82;
    v821[0] = v681;
    sub_1C574E844((uint64_t)v726[0], &v811);
    if ((uint64_t *)v811.n128_u64[0] != &v812)
      free((void *)v811.n128_u64[0]);
    v680 = 1;
    goto LABEL_187;
  }
}

uint64_t sub_1C574BBD8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5746718(v0);
}

void sub_1C574BC04(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C574BC28(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::ProfileSummaryInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

void sub_1C574BC8C(llvm::ModulePass *a1, uint64_t **a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  char **v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t (*v13)(llvm::AssumptionCacheTracker ***, llvm::Function *);
  uint64_t **v14;
  uint64_t (*v15)(llvm::AssumptionCacheTracker **, llvm::Function *);
  uint64_t *v16;
  uint64_t *(*v17)(uint64_t **);
  uint64_t **v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  llvm::ModulePass **v21;
  uint64_t v22;
  llvm::ModulePass *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  if ((llvm::ModulePass::skipModule(a1, a2) & 1) == 0)
  {
    v4 = (char **)**((_QWORD **)a1 + 1);
    do
    {
      v5 = *v4;
      v4 += 2;
    }
    while (v5 != llvm::AssumptionCacheTracker::ID);
    v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::AssumptionCacheTracker::ID);
    v28 = v6;
    v7 = (char **)**((_QWORD **)a1 + 1);
    do
    {
      v8 = *v7;
      v7 += 2;
    }
    while (v8 != llvm::TargetTransformInfoWrapperPass::ID);
    v27 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::TargetTransformInfoWrapperPass::ID);
    v9 = (char **)**((_QWORD **)a1 + 1);
    do
    {
      v10 = *v9;
      v9 += 2;
    }
    while (v10 != llvm::ProfileSummaryInfoWrapperPass::ID);
    v11 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
    v25 = v6;
    v26 = &v28;
    v23 = a1;
    v24 = &v27;
    v12 = 0;
    v13 = sub_1C574BDE0;
    v14 = &v26;
    v15 = sub_1C574BDEC;
    v16 = &v25;
    v17 = sub_1C574BDF4;
    v18 = &v24;
    v19 = 0;
    v20 = sub_1C574BED8;
    v21 = &v23;
    v22 = v11;
    sub_1C57467E0((uint64_t)&v12, (uint64_t)a2);
  }
}

uint64_t sub_1C574BDE0(llvm::AssumptionCacheTracker ***a1, llvm::Function *a2)
{
  return llvm::AssumptionCacheTracker::getAssumptionCache(**a1, a2);
}

uint64_t sub_1C574BDEC(llvm::AssumptionCacheTracker **a1, llvm::Function *a2)
{
  return llvm::AssumptionCacheTracker::lookupAssumptionCache(*a1, a2);
}

uint64_t *sub_1C574BDF4(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10[2];
  int v11;
  _QWORD v12[2];
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v3 = **a1;
  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v4 = *(_QWORD *)(v3 + 56);
  if (!v4)
  {
    sub_1C485C2F0();
    goto LABEL_8;
  }
  v1 = v12;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 48))(&v9);
  v2 = (uint64_t *)(v3 + 64);
  v5 = v9;
  if (!*(_BYTE *)(v3 + 72))
  {
    *(_QWORD *)(v3 + 64) = v9;
    *(_BYTE *)(v3 + 72) = 1;
    goto LABEL_5;
  }
  v9 = 0;
  v6 = *v2;
  *v2 = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v9;
    v9 = 0;
    if (v7)
LABEL_8:
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
LABEL_5:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v1);
  sub_1C4D8B52C(v10);
  return v2;
}

uint64_t sub_1C574BED8(uint64_t a1, uint64_t a2)
{
  char **v3;
  char *v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  void *v10;
  void **v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14[2];
  int v15;
  uint64_t v16[2];
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *__src;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = **(char ****)(*(_QWORD *)a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != llvm::TargetLibraryInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  llvm::TargetLibraryAnalysis::run(v5 + 32, a2, (uint64_t)&v21);
  *(_QWORD *)(v5 + 240) = v21;
  if (*(_BYTE *)(v5 + 320))
  {
    if ((uint64_t *)(v5 + 240) == &v21)
    {
LABEL_16:
      *(_DWORD *)(v5 + 312) = v25;
      goto LABEL_17;
    }
    v6 = (void **)(v5 + 248);
    v7 = v23;
    v8 = *(unsigned int *)(v5 + 256);
    if (v8 >= v23)
    {
      if (v23)
        memmove(*v6, __src, 8 * v23);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v5 + 260) < v23)
    {
      *(_DWORD *)(v5 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v7, 8);
    }
    else if ((_DWORD)v8)
    {
      memmove(*v6, __src, 8 * v8);
      goto LABEL_13;
    }
    v8 = 0;
LABEL_13:
    if (v8 != v23)
      memcpy((char *)*v6 + 8 * v8, (char *)__src + 8 * v8, 8 * v23 - 8 * v8);
LABEL_15:
    *(_DWORD *)(v5 + 256) = v7;
    goto LABEL_16;
  }
  v10 = (void *)(v5 + 264);
  *(_QWORD *)(v5 + 248) = v5 + 264;
  v11 = (void **)(v5 + 248);
  *(_QWORD *)(v5 + 256) = 0x600000000;
  v12 = v23;
  if (v23 && v11 != &__src)
  {
    if (v23 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v23, 8);
      v13 = v23;
      if (!v23)
      {
LABEL_27:
        *(_DWORD *)(v5 + 256) = v12;
        goto LABEL_28;
      }
      v10 = *v11;
    }
    else
    {
      v13 = v23;
    }
    memcpy(v10, __src, 8 * v13);
    goto LABEL_27;
  }
LABEL_28:
  *(_DWORD *)(v5 + 312) = v25;
  *(_BYTE *)(v5 + 320) = 1;
LABEL_17:
  if (__src != &v24)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v16);
  sub_1C4D8B52C(v14);
  return v5 + 240;
}

uint64_t sub_1C574C128(uint64_t a1, _BYTE **a2)
{
  uint64_t v2;
  int v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  llvm::BasicBlock *v11;
  _QWORD *v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t i;
  llvm::BasicBlock *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  BOOL v23;
  int64_t v24;
  BOOL v25;
  int v26;
  int64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t BlockFreq;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  uint64_t ****v51;
  int v52;
  _BOOL4 v53;
  uint64_t v54;
  unsigned __int8 *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned int *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  std::string::size_type *v64;
  std::string::size_type *v65;
  const llvm::Function *v66;
  uint64_t **v67;
  uint64_t **v68;
  std::string::size_type v69;
  const llvm::Function *v70;
  uint64_t (*v71)(_QWORD, _QWORD);
  uint64_t *v72;
  uint64_t *BlockProfileCount;
  char v74;
  uint64_t *v75;
  uint64_t *v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  llvm::Function *v82;
  llvm::BasicBlock *v83;
  uint64_t v84;
  uint64_t v85;
  llvm::BasicBlock *v86;
  uint64_t v87;
  int v88;
  _QWORD *v89;
  const llvm::DataLayout *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  int CallsiteCost;
  unint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  size_t v117;
  char *v118;
  unint64_t v119;
  void **v120;
  uint64_t *v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char **v130;
  unint64_t v131;
  void **v132;
  char *v133;
  unint64_t v134;
  void **v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char **v140;
  unint64_t v141;
  void **v142;
  unint64_t v143;
  void **v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char **v153;
  unint64_t v154;
  void **v155;
  unint64_t v156;
  void **v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char **v161;
  unint64_t v162;
  void **v163;
  unint64_t v164;
  void **v165;
  int v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char **v176;
  unint64_t v177;
  void **v178;
  char *v179;
  unint64_t v180;
  void **v181;
  uint64_t v182;
  uint64_t *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  char **v191;
  unint64_t v192;
  void **v193;
  char *v194;
  unint64_t v195;
  void **v196;
  unsigned int v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char **v203;
  unint64_t v204;
  void **v205;
  char *v206;
  unint64_t v207;
  void **v208;
  unint64_t v209;
  unint64_t v210;
  char v211;
  unint64_t v212;
  void *v214[2];
  char v215;
  void *v216;
  char v217;
  void *v218[2];
  char v219;
  void *v220;
  char v221;
  _QWORD v222[2];
  uint64_t *v223;
  uint64_t v224;
  unint64_t v225;
  int v226;
  char v227;
  _QWORD v228[2];
  int v229;
  void *v230;
  uint64_t *v231;
  uint64_t v232;
  unsigned __int8 *v233[2];
  _BYTE v234[40];
  std::string v235;
  void *v236;
  char v237;
  std::string v238;
  void *v239;
  char v240;
  void *__p;
  uint64_t v242;
  uint64_t v243;
  void *v244;
  char v245;
  const char *v246;
  uint64_t v247;
  unint64_t v248;
  __int128 v249;
  uint64_t v250;
  unint64_t v251;
  const char *v252;
  void *v253;
  uint64_t v254;
  char v255;
  char v256;
  void *v257;
  uint64_t v258;
  char *v259[2];
  uint64_t v260;
  void *v261;
  uint64_t v262;
  _BYTE v263[32];
  char v264;
  int v265;
  uint64_t v266;
  char v267;
  void *v268[2];
  uint64_t *v269;
  void *v270[2];
  int v271;
  char v272;
  uint64_t v273;
  const llvm::Function *v274;
  char v275;
  int v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;
  void **v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  _QWORD v287[4];
  _QWORD v288[28];
  char v289;
  int v290;
  uint64_t v291;
  uint64_t v292;

  v292 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)a2 + 6);
  if (!(_DWORD)v2)
    return 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = a2[2];
  v9 = &v8[2 * v2];
  do
  {
    v10 = *v8;
    v11 = (llvm::BasicBlock *)v8[1];
    v12 = (_QWORD *)(*(uint64_t (**)(_QWORD, _QWORD))(a1 + 40))(*(_QWORD *)(a1 + 48), *v8);
    v13 = sub_1C574E2C0(v11, v12);
    if (v14 == 1)
      v4 = 1;
    if (__OFADD__(v5, v13))
      v5 = ((uint64_t)(v5 + v13) >> 63) ^ 0x8000000000000000;
    else
      v5 += v13;
    v15 = v10 + 72;
    for (i = *(_QWORD *)(v10 + 80); i != v15; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v17 = (llvm::BasicBlock *)(i - 24);
      else
        v17 = 0;
      v18 = sub_1C574E2C0(v17, v12);
      if (v19 == 1)
        v6 = 1;
      if (__OFADD__(v7, v18))
        v7 = ((uint64_t)(v7 + v18) >> 63) ^ 0x8000000000000000;
      else
        v7 += v18;
    }
    v8 += 2;
  }
  while (v8 != v9);
  v20 = *((unsigned int *)a2 + 6);
  v21 = v7 - 10 * v20;
  if (__OFSUB__(v7, 10 * v20))
    v21 = 0x8000000000000000;
  v22 = a2[13];
  v23 = __OFSUB__(v21, v22);
  v24 = v21 - (_QWORD)v22;
  if (v23)
    v24 = (v24 >> 63) ^ 0x8000000000000000;
  v25 = *((_DWORD *)a2 + 28) == 1 || v6 == 1;
  v26 = !v25;
  v23 = __OFADD__(v5, v24);
  v27 = v5 + v24;
  if (v23)
    v27 = (v27 >> 63) ^ 0x8000000000000000;
  v23 = __OFADD__(v27, dword_1ED80E848);
  v28 = v27 + dword_1ED80E848;
  if (v23)
    v28 = 0x7FFFFFFFFFFFFFFFLL;
  if (v4)
    v29 = 0;
  else
    v29 = v5;
  if (v4)
    v30 = 0;
  else
    v30 = v26;
  v31 = v28 << 32;
  if (a2[15])
  {
    v32 = *(_QWORD *)&a2[2][16 * v20 - 8];
    v33 = *((_QWORD *)a2[1] + 10);
    if (v33)
      v34 = v33 - 24;
    else
      v34 = 0;
    BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq((uint64_t *)a2[17], v34);
    v36 = llvm::BlockFrequencyInfo::getBlockFreq((uint64_t *)a2[17], v32);
    if (v36 >= BlockFreq)
      v37 = BlockFreq;
    else
      v37 = v36;
    v38 = 0;
    if (HIDWORD(BlockFreq))
    {
      do
      {
        v39 = BlockFreq >> 1;
        ++v38;
        v209 = BlockFreq >> 33;
        BlockFreq >>= 1;
      }
      while (v209);
    }
    else
    {
      v39 = BlockFreq;
    }
    v40 = v37 >> v38;
    if (v39 != 0x80000000)
      v40 = (((unint64_t)(v37 >> v38) << 31) | (v39 >> 1)) / v39;
    v41 = a2[15];
    llvm::Function::getEntryCount((uint64_t ***)*a2, 0, (uint64_t)&v248);
    if (!BYTE8(v249))
    {
      v42 = *((unsigned int *)v41 + 2);
      if ((_DWORD)v42)
      {
        v43 = *(_QWORD *)v41;
        v44 = 8 * v42;
        while (1)
        {
          v45 = *(_QWORD *)(*(_QWORD *)v43 + 40);
          if (v45 != *(_QWORD *)v43 + 40)
          {
            v46 = v45 ? v45 - 24 : 0;
            v47 = *(unsigned __int8 *)(v46 + 16) - 40;
            v48 = v47 >= 0xFFFFFFF5 ? v46 : 0;
            if (v45)
            {
              v49 = *(_BYTE *)(v48 + 16) == 30 && v47 >= 0xFFFFFFF5;
              if (v49 && (*(_DWORD *)(v48 + 20) & 0x7FFFFFF) != 1)
              {
                v248 = 0;
                v277 = 0;
                if ((llvm::Instruction::extractProfMetadata((llvm::Instruction *)v48, &v248, &v277) & 1) != 0)
                  break;
              }
            }
          }
          v43 += 8;
          v44 -= 8;
          if (!v44)
            goto LABEL_70;
        }
      }
      else
      {
LABEL_70:
        if (v40 >= 0x3999999A
          && v40 <= ((unint64_t)(((((unint64_t)dword_1ED80E788 << 31) | 0x30)
                                                                   * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6))
        {
          LODWORD(v40) = (unint64_t)(((((unint64_t)dword_1ED80E788 << 31) | 0x30)
                                           * (unsigned __int128)0xA3D70A3D70A3D70BLL) >> 64) >> 6;
        }
      }
    }
  }
  else
  {
    LODWORD(v40) = 0;
  }
  if (v30)
    v50 = v31 >> 32;
  else
    v50 = 0;
  LODWORD(v248) = v40;
  v212 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v248, v50);
  v51 = (uint64_t ****)a2;
  if (!byte_1ED80E308)
  {
    v52 = *((_DWORD *)a2 + 28);
    v25 = v52 == 0;
    v53 = v52 < 0;
    if (v25)
      v53 = (uint64_t)a2[13] < v29;
    if (v53)
    {
      llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)&v235, (const llvm::Function *)*a2);
      v233[0] = 0;
      v54 = *(_QWORD *)(*((_QWORD *)a2[1] + 1) + 24);
      v55 = *(unsigned __int8 **)(v54 + 48);
      v277 = (unint64_t)v55;
      if (v55)
      {
        llvm::MetadataTracking::track((uint64_t)&v277, v55, 2);
        v56 = *(_QWORD *)(v54 + 40);
        v248 = v277;
        if (v277)
        {
          llvm::MetadataTracking::track((uint64_t)&v248, (unsigned __int8 *)v277, 2);
          *(_QWORD *)&v249 = v56;
          if (v277)
            llvm::MetadataTracking::untrack((uint64_t)&v277, (unsigned __int8 *)v277);
          goto LABEL_403;
        }
      }
      else
      {
        v56 = *(_QWORD *)(v54 + 40);
        v248 = 0;
      }
      *(_QWORD *)&v249 = v56;
LABEL_403:
      v233[0] = (unsigned __int8 *)v248;
      if (v248)
        llvm::MetadataTracking::retrack((uint64_t)&v248, (unsigned __int8 *)v248, (uint64_t)v233);
      v186 = v249;
      v187 = ***(_QWORD ***)v235.__r_.__value_.__l.__data_;
      if (*(_QWORD *)(v187 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v187 + 72) + 48))(*(_QWORD *)(v187 + 72)))
      {
        v197 = v233[0];
        if (v233[0])
        {
          v199 = *(_QWORD *)&v233[0][-8 * *((unsigned int *)v233[0] + 2)];
          if (*(_BYTE *)v199 != 15)
            v199 = *(_QWORD *)(v199 - 8 * *(unsigned int *)(v199 + 8));
          v198 = *((_DWORD *)v233[0] + 1);
          v197 = *((unsigned __int16 *)v233[0] + 1);
        }
        else
        {
          v198 = 0;
          v199 = 0;
        }
        v200 = *(_QWORD *)(v186 + 56);
        LODWORD(v249) = 11;
        BYTE4(v249) = 2;
        *((_QWORD *)&v249 + 1) = v200;
        v250 = v199;
        v251 = __PAIR64__(v197, v198);
        v252 = "partial-inlining";
        v253 = "OutlineRegionTooSmall";
        v254 = 21;
        v255 = 0;
        v256 = 0;
        v257 = v259;
        v258 = 0x400000000;
        v264 = 0;
        v265 = -1;
        v266 = v186;
        v248 = (unint64_t)&off_1E814E570;
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v268, "Function", 8uLL, *a2);
        sub_1C47E3888((uint64_t)&v248, (uint64_t)v268);
        v277 = (unint64_t)" not partially inlined into callers (Original Size = ";
        v278 = 53;
        sub_1C53B17B4((uint64_t)&v257, (const void **)&v277);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__p, "OutlinedRegionOriginalSize", 0x1AuLL, (uint64_t)a2[13], (uint64_t)a2[14]);
        v201 = sub_1C47E3888((uint64_t)&v248, (uint64_t)&__p);
        v277 = (unint64_t)", Size of call sequence to outlined function = ";
        v278 = 47;
        sub_1C53B17B4(v201 + 80, (const void **)&v277);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v238, "NewSize", 7uLL, v29);
        v202 = sub_1C47E3888(v201, (uint64_t)&v238);
        v277 = (unint64_t)")";
        v278 = 1;
        sub_1C53B17B4(v202 + 80, (const void **)&v277);
        sub_1C61998EC((uint64_t)&v277, v202);
        v277 = (unint64_t)&off_1E814E570;
        if (v240 < 0)
          operator delete(v239);
        if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v238.__r_.__value_.__l.__data_);
        if (v245 < 0)
          operator delete(v244);
        if (SHIBYTE(v243) < 0)
          operator delete(__p);
        if (v272 < 0)
          operator delete(v270[0]);
        if (SHIBYTE(v269) < 0)
          operator delete(v268[0]);
        v248 = (unint64_t)&off_1E814E790;
        v203 = (char **)v257;
        if ((_DWORD)v258)
        {
          v204 = (unint64_t)v258 << 6;
          do
          {
            v205 = (void **)((char *)v203 + v204);
            if (*((char *)v203 + v204 - 17) < 0)
              operator delete(*(v205 - 5));
            if (*((char *)v205 - 41) < 0)
              operator delete(*(v205 - 8));
            v204 -= 64;
          }
          while (v204);
          v203 = (char **)v257;
        }
        if (v203 != v259)
          free(v203);
        llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)&v235, (llvm::DiagnosticInfoOptimizationBase *)&v277);
        v277 = (unint64_t)&off_1E814E790;
        v206 = (char *)v285;
        if ((_DWORD)v286)
        {
          v207 = (unint64_t)v286 << 6;
          do
          {
            v208 = (void **)&v206[v207];
            if (v206[v207 - 17] < 0)
              operator delete(*(v208 - 5));
            if (*((char *)v208 - 41) < 0)
              operator delete(*(v208 - 8));
            v207 -= 64;
          }
          while (v207);
          v206 = (char *)v285;
        }
        if (v206 != (char *)v287)
          free(v206);
      }
      if (v233[0])
        llvm::MetadataTracking::untrack((uint64_t)v233, v233[0]);
      v188 = (uint64_t *)v235.__r_.__value_.__r.__words[2];
      v235.__r_.__value_.__r.__words[2] = 0;
      if (v188)
      {
        v189 = *v188;
        *v188 = 0;
        if (v189)
          (*(void (**)(uint64_t))(*(_QWORD *)v189 + 8))(v189);
        MEMORY[0x1CAA32FC0](v188, 0x20C4093837F09);
      }
      return 0;
    }
  }
  v57 = *((_QWORD *)a2[1] + 1);
  v231 = 0;
  v232 = 0;
  v230 = 0;
  v58 = 0;
  if (v57)
  {
    v59 = v57;
    do
    {
      ++v58;
      v59 = *(_QWORD *)(v59 + 8);
    }
    while (v59);
  }
  sub_1C574ECB0(&v230, v57, 0, v58);
  v228[0] = 0;
  v228[1] = 0;
  v229 = 0;
  llvm::Function::getEntryCount((uint64_t ***)*a2, 0, (uint64_t)&v225);
  v60 = &dword_1C6404980[7584];
  if (!v227)
    goto LABEL_121;
  v61 = *((_QWORD *)a2[1] + 1);
  __p = 0;
  v242 = 0;
  v243 = 0;
  v62 = 0;
  if (v61)
  {
    v63 = v61;
    do
    {
      ++v62;
      v63 = *(_QWORD *)(v63 + 8);
    }
    while (v63);
  }
  sub_1C574ECB0(&__p, v61, 0, v62);
  v64 = (std::string::size_type *)__p;
  v65 = (std::string::size_type *)v242;
  if (__p != (void *)v242)
  {
    v66 = 0;
    v67 = 0;
    v68 = 0;
    do
    {
      v69 = *v64;
      v238.__r_.__value_.__r.__words[0] = v69;
      if (*(_BYTE *)(v69 + 16) != 4)
      {
        v70 = *(const llvm::Function **)(*(_QWORD *)(v69 + 40) + 56);
        if (v66 == v70)
        {
          v70 = v66;
        }
        else
        {
          v71 = *(uint64_t (**)(_QWORD, _QWORD))(a1 + 56);
          if (v71)
          {
            v67 = (uint64_t **)v71(*(_QWORD *)(a1 + 64), *(_QWORD *)(*(_QWORD *)(v69 + 40) + 56));
          }
          else
          {
            v268[0] = &v269;
            v268[1] = (void *)0x100000000;
            v276 = 0;
            v270[0] = 0;
            v270[1] = 0;
            v271 = 0;
            v275 = 0;
            v273 = 0;
            v274 = v70;
            sub_1C53BA620((uint64_t)v268, 0);
            v278 = 0;
            v277 = 0;
            LODWORD(v279) = 0;
            v280 = 0u;
            v281 = 0u;
            v282 = 0;
            v283 = &v285;
            v284 = 0x400000000;
            v287[3] = 0;
            v288[0] = 0;
            v287[2] = v288;
            v288[1] = 1;
            llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::analyze((uint64_t)&v277, (uint64_t)v268);
            sub_1C4EEA178((uint64_t)&v248, v70, (uint64_t)&v277, 0, 0, 0);
            v67 = (uint64_t **)operator new();
            *v67 = 0;
            llvm::BlockFrequencyInfo::calculate(v67, v70);
            if (v68)
            {
              v72 = *v68;
              *v68 = 0;
              if (v72)
                (*(void (**)(uint64_t *))(*v72 + 8))(v72);
              MEMORY[0x1CAA32FC0](v68, 0x20C4093837F09);
            }
            sub_1C4DC0BBC((uint64_t)&v248);
            llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(&v277);
            sub_1C4DC4E38((uint64_t *)v270);
            if (v268[0] != &v269)
              free(v268[0]);
            v68 = v67;
          }
        }
        BlockProfileCount = llvm::BlockFrequencyInfo::getBlockProfileCount(v67, *(const llvm::BasicBlock **)(v69 + 40), 0);
        if (v74)
          v75 = BlockProfileCount;
        else
          v75 = 0;
        sub_1C617C470((uint64_t)v228, (uint64_t *)&v238)[1] = v75;
        v66 = v70;
      }
      ++v64;
    }
    while (v64 != v65);
    v51 = (uint64_t ****)a2;
    v60 = dword_1C6404980 + 30336;
    if (v68)
    {
      v76 = *v68;
      *v68 = 0;
      if (v76)
        (*(void (**)(uint64_t *))(*v76 + 8))(v76);
      MEMORY[0x1CAA32FC0](v68, 0x20C4093837F09);
    }
    v64 = (std::string::size_type *)__p;
  }
  if (v64)
  {
    v242 = (uint64_t)v64;
    operator delete(v64);
  }
  if (v227)
    v77 = v225;
  else
LABEL_121:
    v77 = 0;
  v79 = (uint64_t *)v230;
  v78 = v231;
  if (v230 == v231)
  {
LABEL_398:
    v185 = 0;
    goto LABEL_399;
  }
  v210 = v77;
  v211 = 0;
  v80 = *((_QWORD *)v60 + 206);
  do
  {
    v81 = *v79;
    v224 = v81;
    if (*(_BYTE *)(v81 + 16) == 4 || dword_1ED80E6C8 != -1 && *(_DWORD *)a1 >= dword_1ED80E6C8)
      goto LABEL_193;
    llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v222, *(const llvm::Function **)(*(_QWORD *)(v81 + 40) + 56));
    v84 = *(_QWORD *)(v81 - 32);
    if (!v84 || *(_BYTE *)(v84 + 16) || *(_QWORD *)(v84 + 24) != *(_QWORD *)(v81 + 72))
      v84 = 0;
    if (byte_1ED80E308)
    {
      if (!llvm::isInlineViable((llvm *)v84, v82, v83))
        goto LABEL_158;
      goto LABEL_189;
    }
    v85 = *(_QWORD *)(*(_QWORD *)(v81 + 40) + 56);
    v86 = (llvm::BasicBlock *)(*(uint64_t (**)(_QWORD, uint64_t))(a1 + 40))(*(_QWORD *)(a1 + 48), v84);
    v87 = *(_QWORD *)(***(_QWORD ***)v84 + 72);
    v88 = (*(uint64_t (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v87 + 32))(v87, "partial-inlining", 16);
    llvm::getInlineParams(dword_1ED82D9C0, (uint64_t)&v248);
    v89 = v222;
    if (!v88)
      v89 = 0;
    llvm::getInlineCost(v81, (int *)&v248, v86, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(uint64_t (**)(uint64_t, llvm *))(a1 + 72), *(_QWORD *)(a1 + 80), (uint64_t)v233, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 88), (uint64_t)v89);
    if (LODWORD(v233[0]) == 0x7FFFFFFF)
    {
      v95 = ***(_QWORD ***)v222[0];
      if (*(_QWORD *)(v95 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v95 + 72) + 48))(*(_QWORD *)(v95 + 72)))
      {
        v96 = *(_QWORD *)(v81 + 48);
        if (v96)
        {
          v97 = *(_QWORD *)(v96 - 8 * *(unsigned int *)(v96 + 8));
          if (*(_BYTE *)v97 != 15)
            v97 = *(_QWORD *)(v97 - 8 * *(unsigned int *)(v97 + 8));
          v98 = *(_DWORD *)(v96 + 4);
          LODWORD(v96) = *(unsigned __int16 *)(v96 + 2);
        }
        else
        {
          v97 = 0;
          v98 = 0;
        }
        v136 = *(_QWORD *)(v81 + 40);
        v137 = *(_QWORD *)(v136 + 56);
        LODWORD(v249) = 10;
        BYTE4(v249) = 2;
        *((_QWORD *)&v249 + 1) = v137;
        v250 = v97;
        v251 = __PAIR64__(v96, v98);
        v252 = "partial-inlining";
        v253 = "NeverInline";
        v254 = 11;
        v255 = 0;
        v256 = 0;
        v257 = v259;
        v258 = v80;
        v264 = 0;
        v265 = -1;
        v266 = v136;
        v248 = (unint64_t)&off_1E814E538;
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v268, "Callee", 6uLL, *a2);
        v138 = sub_1C47E3888((uint64_t)&v248, (uint64_t)v268);
        __p = " not partially inlined into ";
        v242 = 28;
        sub_1C53B17B4(v138 + 80, (const void **)&__p);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__p, "Caller", 6uLL, (_BYTE *)v85);
        v139 = sub_1C47E3888(v138, (uint64_t)&__p);
        v238.__r_.__value_.__r.__words[0] = (std::string::size_type)" because it should never be inlined (cost=never)";
        v238.__r_.__value_.__l.__size_ = 48;
        sub_1C53B17B4(v139 + 80, (const void **)&v238.__r_.__value_.__l.__data_);
        sub_1C61998EC((uint64_t)&v277, v139);
        v277 = (unint64_t)&off_1E814E538;
        if (v245 < 0)
          operator delete(v244);
        if (SHIBYTE(v243) < 0)
          operator delete(__p);
        v51 = (uint64_t ****)a2;
        if (v272 < 0)
          operator delete(v270[0]);
        if (SHIBYTE(v269) < 0)
          operator delete(v268[0]);
        v248 = (unint64_t)&off_1E814E790;
        v140 = (char **)v257;
        if ((_DWORD)v258)
        {
          v141 = (unint64_t)v258 << 6;
          do
          {
            v142 = (void **)((char *)v140 + v141);
            if (*((char *)v140 + v141 - 17) < 0)
              operator delete(*(v142 - 5));
            if (*((char *)v142 - 41) < 0)
              operator delete(*(v142 - 8));
            v141 -= 64;
          }
          while (v141);
          v140 = (char **)v257;
        }
        if (v140 != v259)
          free(v140);
        llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v222, (llvm::DiagnosticInfoOptimizationBase *)&v277);
        v277 = (unint64_t)&off_1E814E790;
        v133 = (char *)v285;
        if (!(_DWORD)v286)
          goto LABEL_337;
        v143 = (unint64_t)v286 << 6;
        do
        {
          v144 = (void **)&v133[v143];
          if (v133[v143 - 17] < 0)
            operator delete(*(v144 - 5));
          if (*((char *)v144 - 41) < 0)
            operator delete(*(v144 - 8));
          v143 -= 64;
        }
        while (v143);
        goto LABEL_336;
      }
LABEL_154:
      v109 = 0;
LABEL_155:
      v51 = (uint64_t ****)a2;
      goto LABEL_156;
    }
    if (LODWORD(v233[0]) == 0x80000000)
    {
      v91 = ***(_QWORD ***)v222[0];
      if (!*(_QWORD *)(v91 + 128)
        && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v91 + 72) + 48))(*(_QWORD *)(v91 + 72)))
      {
        goto LABEL_154;
      }
      v92 = *(_QWORD *)(v81 + 48);
      v51 = (uint64_t ****)a2;
      if (v92)
      {
        v93 = *(_QWORD *)(v92 - 8 * *(unsigned int *)(v92 + 8));
        if (*(_BYTE *)v93 != 15)
          v93 = *(_QWORD *)(v93 - 8 * *(unsigned int *)(v93 + 8));
        v94 = *(_DWORD *)(v92 + 4);
        LODWORD(v92) = *(unsigned __int16 *)(v92 + 2);
      }
      else
      {
        v93 = 0;
        v94 = 0;
      }
      v128 = *(_QWORD *)(v81 + 40);
      v129 = *(_QWORD *)(v128 + 56);
      LODWORD(v249) = 11;
      BYTE4(v249) = 2;
      *((_QWORD *)&v249 + 1) = v129;
      v250 = v93;
      v251 = __PAIR64__(v92, v94);
      v252 = "partial-inlining";
      v253 = "AlwaysInline";
      v254 = 12;
      v255 = 0;
      v256 = 0;
      v257 = v259;
      v258 = v80;
      v264 = 0;
      v265 = -1;
      v266 = v128;
      v248 = (unint64_t)&off_1E814E570;
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v268, "Callee", 6uLL, *a2);
      sub_1C47E3888((uint64_t)&v248, (uint64_t)v268);
      __p = " should always be fully inlined, not partially";
      v242 = 46;
      sub_1C53B17B4((uint64_t)&v257, (const void **)&__p);
      sub_1C61998EC((uint64_t)&v277, (uint64_t)&v248);
      v277 = (unint64_t)&off_1E814E570;
      if (v272 < 0)
        operator delete(v270[0]);
      if (SHIBYTE(v269) < 0)
        operator delete(v268[0]);
      v248 = (unint64_t)&off_1E814E790;
      v130 = (char **)v257;
      if ((_DWORD)v258)
      {
        v131 = (unint64_t)v258 << 6;
        do
        {
          v132 = (void **)((char *)v130 + v131);
          if (*((char *)v130 + v131 - 17) < 0)
            operator delete(*(v132 - 5));
          if (*((char *)v132 - 41) < 0)
            operator delete(*(v132 - 8));
          v131 -= 64;
        }
        while (v131);
        v130 = (char **)v257;
      }
      if (v130 != v259)
        free(v130);
      llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v222, (llvm::DiagnosticInfoOptimizationBase *)&v277);
      v277 = (unint64_t)&off_1E814E790;
      v133 = (char *)v285;
      if (!(_DWORD)v286)
        goto LABEL_337;
      v134 = (unint64_t)v286 << 6;
      do
      {
        v135 = (void **)&v133[v134];
        if (v133[v134 - 17] < 0)
          operator delete(*(v135 - 5));
        if (*((char *)v135 - 41) < 0)
          operator delete(*(v135 - 8));
        v134 -= 64;
      }
      while (v134);
      goto LABEL_336;
    }
    if (SLODWORD(v233[0]) >= SHIDWORD(v233[0]))
    {
      v108 = ***(_QWORD ***)v222[0];
      if (!*(_QWORD *)(v108 + 128)
        && !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(v108 + 72) + 48))(*(_QWORD *)(v108 + 72)))
      {
        goto LABEL_154;
      }
      v145 = *(_QWORD *)(v81 + 40);
      v146 = *(_QWORD *)(v81 + 48);
      v147 = *(_QWORD *)(v145 + 56);
      if (v146)
      {
        v148 = *(_QWORD *)(v146 - 8 * *(unsigned int *)(v146 + 8));
        if (*(_BYTE *)v148 != 15)
          v148 = *(_QWORD *)(v148 - 8 * *(unsigned int *)(v148 + 8));
        v149 = *(_DWORD *)(v146 + 4);
        LODWORD(v146) = *(unsigned __int16 *)(v146 + 2);
      }
      else
      {
        v148 = 0;
        v149 = 0;
      }
      LODWORD(v249) = 11;
      BYTE4(v249) = 2;
      *((_QWORD *)&v249 + 1) = v147;
      v250 = v148;
      v251 = __PAIR64__(v146, v149);
      v252 = "partial-inlining";
      v253 = "TooCostly";
      v254 = 9;
      v255 = 0;
      v256 = 0;
      v257 = v259;
      v258 = v80;
      v264 = 0;
      v265 = -1;
      v266 = v145;
      v248 = (unint64_t)&off_1E814E570;
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v268, "Callee", 6uLL, *a2);
      sub_1C47E3888((uint64_t)&v248, (uint64_t)v268);
      __p = " not partially inlined into ";
      v242 = 28;
      sub_1C53B17B4((uint64_t)&v257, (const void **)&__p);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__p, "Caller", 6uLL, (_BYTE *)v85);
      v150 = sub_1C47E3888((uint64_t)&v248, (uint64_t)&__p);
      v238.__r_.__value_.__r.__words[0] = (std::string::size_type)" because too costly to inline (cost=";
      v238.__r_.__value_.__l.__size_ = 36;
      sub_1C53B17B4(v150 + 80, (const void **)&v238.__r_.__value_.__l.__data_);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v238, "Cost", 4uLL, (int)v233[0]);
      v151 = sub_1C47E3888(v150, (uint64_t)&v238);
      v235.__r_.__value_.__r.__words[0] = (std::string::size_type)", threshold=";
      v235.__r_.__value_.__l.__size_ = 12;
      sub_1C53B17B4(v151 + 80, (const void **)&v235.__r_.__value_.__l.__data_);
      llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v235, "Threshold", 9uLL, SHIDWORD(v233[0]));
      v152 = sub_1C47E3888(v151, (uint64_t)&v235);
      v246 = ")";
      v247 = 1;
      sub_1C53B17B4(v152 + 80, (const void **)&v246);
      sub_1C61998EC((uint64_t)&v277, v152);
      v277 = (unint64_t)&off_1E814E570;
      if (v237 < 0)
        operator delete(v236);
      if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v235.__r_.__value_.__l.__data_);
      v51 = (uint64_t ****)a2;
      if (v240 < 0)
        operator delete(v239);
      if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v238.__r_.__value_.__l.__data_);
      if (v245 < 0)
        operator delete(v244);
      if (SHIBYTE(v243) < 0)
        operator delete(__p);
      if (v272 < 0)
        operator delete(v270[0]);
      if (SHIBYTE(v269) < 0)
        operator delete(v268[0]);
      v248 = (unint64_t)&off_1E814E790;
      v153 = (char **)v257;
      if ((_DWORD)v258)
      {
        v154 = (unint64_t)v258 << 6;
        do
        {
          v155 = (void **)((char *)v153 + v154);
          if (*((char *)v153 + v154 - 17) < 0)
            operator delete(*(v155 - 5));
          if (*((char *)v155 - 41) < 0)
            operator delete(*(v155 - 8));
          v154 -= 64;
        }
        while (v154);
        v153 = (char **)v257;
      }
      if (v153 != v259)
        free(v153);
      llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v222, (llvm::DiagnosticInfoOptimizationBase *)&v277);
      v277 = (unint64_t)&off_1E814E790;
      v133 = (char *)v285;
      if (!(_DWORD)v286)
        goto LABEL_337;
      v156 = (unint64_t)v286 << 6;
      do
      {
        v157 = (void **)&v133[v156];
        if (v133[v156 - 17] < 0)
          operator delete(*(v157 - 5));
        if (*((char *)v157 - 41) < 0)
          operator delete(*(v157 - 8));
        v156 -= 64;
      }
      while (v156);
      goto LABEL_336;
    }
    CallsiteCost = llvm::getCallsiteCost((llvm *)v81, (llvm::CallBase *)(*(_QWORD *)(v85 + 40) + 272), v90);
    v100 = CallsiteCost;
    v101 = ***(_QWORD ***)v222[0];
    if (*(_QWORD *)(v101 + 128))
    {
      if (v212 > CallsiteCost)
        goto LABEL_150;
    }
    else
    {
      v102 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v101 + 72) + 48))(*(_QWORD *)(v101 + 72));
      if (v212 > v100)
      {
        if (!v102)
          goto LABEL_154;
LABEL_150:
        v103 = *(_QWORD *)(v81 + 40);
        v104 = *(_QWORD *)(v81 + 48);
        v105 = *(_QWORD *)(v103 + 56);
        if (v104)
        {
          v106 = *(_QWORD *)(v104 - 8 * *(unsigned int *)(v104 + 8));
          if (*(_BYTE *)v106 != 15)
            v106 = *(_QWORD *)(v106 - 8 * *(unsigned int *)(v106 + 8));
          v107 = *(_DWORD *)(v104 + 4);
          LODWORD(v104) = *(unsigned __int16 *)(v104 + 2);
        }
        else
        {
          v106 = 0;
          v107 = 0;
        }
        LODWORD(v249) = 11;
        BYTE4(v249) = 2;
        *((_QWORD *)&v249 + 1) = v105;
        v250 = v106;
        v251 = __PAIR64__(v104, v107);
        v252 = "partial-inlining";
        v253 = "OutliningCallcostTooHigh";
        v254 = 24;
        v255 = 0;
        v256 = 0;
        v257 = v259;
        v258 = v80;
        v264 = 0;
        v265 = -1;
        v266 = v103;
        v248 = (unint64_t)&off_1E814E570;
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v268, "Callee", 6uLL, *a2);
        sub_1C47E3888((uint64_t)&v248, (uint64_t)v268);
        __p = " not partially inlined into ";
        v242 = 28;
        sub_1C53B17B4((uint64_t)&v257, (const void **)&__p);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__p, "Caller", 6uLL, (_BYTE *)v85);
        v158 = sub_1C47E3888((uint64_t)&v248, (uint64_t)&__p);
        v238.__r_.__value_.__r.__words[0] = (std::string::size_type)" runtime overhead (overhead=";
        v238.__r_.__value_.__l.__size_ = 28;
        sub_1C53B17B4(v158 + 80, (const void **)&v238.__r_.__value_.__l.__data_);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v238, "Overhead", 8uLL, v212);
        v159 = sub_1C47E3888(v158, (uint64_t)&v238);
        v235.__r_.__value_.__r.__words[0] = (std::string::size_type)", savings=";
        v235.__r_.__value_.__l.__size_ = 10;
        sub_1C53B17B4(v159 + 80, (const void **)&v235.__r_.__value_.__l.__data_);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v235, "Savings", 7uLL, v100);
        v160 = sub_1C47E3888(v159, (uint64_t)&v235);
        v246 = ")";
        v247 = 1;
        sub_1C53B17B4(v160 + 80, (const void **)&v246);
        v246 = " of making the outlined call is too high";
        v247 = 40;
        sub_1C53B17B4(v160 + 80, (const void **)&v246);
        sub_1C61998EC((uint64_t)&v277, v160);
        v277 = (unint64_t)&off_1E814E570;
        if (v237 < 0)
          operator delete(v236);
        if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v235.__r_.__value_.__l.__data_);
        v51 = (uint64_t ****)a2;
        if (v240 < 0)
          operator delete(v239);
        if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v238.__r_.__value_.__l.__data_);
        if (v245 < 0)
          operator delete(v244);
        if (SHIBYTE(v243) < 0)
          operator delete(__p);
        if (v272 < 0)
          operator delete(v270[0]);
        if (SHIBYTE(v269) < 0)
          operator delete(v268[0]);
        v248 = (unint64_t)&off_1E814E790;
        v161 = (char **)v257;
        if ((_DWORD)v258)
        {
          v162 = (unint64_t)v258 << 6;
          do
          {
            v163 = (void **)((char *)v161 + v162);
            if (*((char *)v161 + v162 - 17) < 0)
              operator delete(*(v163 - 5));
            if (*((char *)v163 - 41) < 0)
              operator delete(*(v163 - 8));
            v162 -= 64;
          }
          while (v162);
          v161 = (char **)v257;
        }
        if (v161 != v259)
          free(v161);
        llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v222, (llvm::DiagnosticInfoOptimizationBase *)&v277);
        v277 = (unint64_t)&off_1E814E790;
        v133 = (char *)v285;
        if (!(_DWORD)v286)
        {
LABEL_337:
          if (v133 != (char *)v287)
            free(v133);
          v109 = 0;
          goto LABEL_156;
        }
        v164 = (unint64_t)v286 << 6;
        do
        {
          v165 = (void **)&v133[v164];
          if (v133[v164 - 17] < 0)
            operator delete(*(v165 - 5));
          if (*((char *)v165 - 41) < 0)
            operator delete(*(v165 - 8));
          v164 -= 64;
        }
        while (v164);
LABEL_336:
        v133 = (char *)v285;
        goto LABEL_337;
      }
      if (!v102)
      {
        v109 = 1;
        goto LABEL_155;
      }
    }
    v168 = *(_QWORD *)(v81 + 40);
    v169 = *(_QWORD *)(v81 + 48);
    v170 = *(_QWORD *)(v168 + 56);
    if (v169)
    {
      v171 = *(_QWORD *)(v169 - 8 * *(unsigned int *)(v169 + 8));
      if (*(_BYTE *)v171 != 15)
        v171 = *(_QWORD *)(v171 - 8 * *(unsigned int *)(v171 + 8));
      v172 = *(_DWORD *)(v169 + 4);
      LODWORD(v169) = *(unsigned __int16 *)(v169 + 2);
    }
    else
    {
      v171 = 0;
      v172 = 0;
    }
    LODWORD(v249) = 11;
    BYTE4(v249) = 2;
    *((_QWORD *)&v249 + 1) = v170;
    v250 = v171;
    v251 = __PAIR64__(v169, v172);
    v252 = "partial-inlining";
    v253 = "CanBePartiallyInlined";
    v254 = 21;
    v255 = 0;
    v256 = 0;
    v257 = v259;
    v258 = v80;
    v264 = 0;
    v265 = -1;
    v266 = v168;
    v248 = (unint64_t)&off_1E814E570;
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v268, "Callee", 6uLL, *a2);
    sub_1C47E3888((uint64_t)&v248, (uint64_t)v268);
    __p = " can be partially inlined into ";
    v242 = 31;
    sub_1C53B17B4((uint64_t)&v257, (const void **)&__p);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&__p, "Caller", 6uLL, (_BYTE *)v85);
    v173 = sub_1C47E3888((uint64_t)&v248, (uint64_t)&__p);
    v238.__r_.__value_.__r.__words[0] = (std::string::size_type)" with cost=";
    v238.__r_.__value_.__l.__size_ = 11;
    sub_1C53B17B4(v173 + 80, (const void **)&v238.__r_.__value_.__l.__data_);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v238, "Cost", 4uLL, (int)v233[0]);
    v174 = sub_1C47E3888(v173, (uint64_t)&v238);
    v235.__r_.__value_.__r.__words[0] = (std::string::size_type)" (threshold=";
    v235.__r_.__value_.__l.__size_ = 12;
    sub_1C53B17B4(v174 + 80, (const void **)&v235.__r_.__value_.__l.__data_);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v235, "Threshold", 9uLL, SHIDWORD(v233[0]));
    v175 = sub_1C47E3888(v174, (uint64_t)&v235);
    v246 = ")";
    v247 = 1;
    sub_1C53B17B4(v175 + 80, (const void **)&v246);
    sub_1C61998EC((uint64_t)&v277, v175);
    v277 = (unint64_t)&off_1E814E570;
    if (v237 < 0)
      operator delete(v236);
    if (SHIBYTE(v235.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v235.__r_.__value_.__l.__data_);
    v51 = (uint64_t ****)a2;
    if (v240 < 0)
      operator delete(v239);
    if (SHIBYTE(v238.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v238.__r_.__value_.__l.__data_);
    if (v245 < 0)
      operator delete(v244);
    if (SHIBYTE(v243) < 0)
      operator delete(__p);
    if (v272 < 0)
      operator delete(v270[0]);
    if (SHIBYTE(v269) < 0)
      operator delete(v268[0]);
    v248 = (unint64_t)&off_1E814E790;
    v176 = (char **)v257;
    if ((_DWORD)v258)
    {
      v177 = (unint64_t)v258 << 6;
      do
      {
        v178 = (void **)((char *)v176 + v177);
        if (*((char *)v176 + v177 - 17) < 0)
          operator delete(*(v178 - 5));
        if (*((char *)v178 - 41) < 0)
          operator delete(*(v178 - 8));
        v177 -= 64;
      }
      while (v177);
      v176 = (char **)v257;
    }
    if (v176 != v259)
      free(v176);
    llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v222, (llvm::DiagnosticInfoOptimizationBase *)&v277);
    v277 = (unint64_t)&off_1E814E790;
    v179 = (char *)v285;
    if ((_DWORD)v286)
    {
      v180 = (unint64_t)v286 << 6;
      do
      {
        v181 = (void **)&v179[v180];
        if (v179[v180 - 17] < 0)
          operator delete(*(v181 - 5));
        if (*((char *)v181 - 41) < 0)
          operator delete(*(v181 - 8));
        v180 -= 64;
      }
      while (v180);
      v179 = (char *)v285;
    }
    if (v179 != (char *)v287)
      free(v179);
    v109 = 1;
LABEL_156:
    if (v234[32])
    {
      sub_1C61996A0((uint64_t)v234);
      if (v109)
      {
LABEL_158:
        v110 = *(_QWORD *)(v81 + 48);
        if (v110)
        {
          v111 = *(_QWORD *)(v110 - 8 * *(unsigned int *)(v110 + 8));
          if (*(_BYTE *)v111 != 15)
            v111 = *(_QWORD *)(v111 - 8 * *(unsigned int *)(v111 + 8));
          v112 = *(_DWORD *)(v110 + 4);
          LODWORD(v110) = *(unsigned __int16 *)(v110 + 2);
        }
        else
        {
          v111 = 0;
          v112 = 0;
        }
        v113 = *(_QWORD *)(v81 + 40);
        v114 = *(_QWORD *)(v113 + 56);
        LODWORD(v278) = 9;
        BYTE4(v278) = 2;
        v279 = v114;
        *(_QWORD *)&v280 = v111;
        *((_QWORD *)&v280 + 1) = __PAIR64__(v110, v112);
        *(_QWORD *)&v281 = "partial-inlining";
        *((_QWORD *)&v281 + 1) = "PartiallyInlined";
        v282 = 16;
        LOBYTE(v283) = 0;
        LOBYTE(v284) = 0;
        v285 = v287;
        v286 = v80;
        v289 = 0;
        v290 = -1;
        v291 = v113;
        v277 = (unint64_t)&off_1E814E500;
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v218, "Callee", 6uLL, *v51);
        v115 = sub_1C47E3888((uint64_t)&v277, (uint64_t)v218);
        v248 = (unint64_t)" partially inlined into ";
        *(_QWORD *)&v249 = 24;
        sub_1C53B17B4(v115 + 80, (const void **)&v248);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)v214, "Caller", 6uLL, *(_BYTE **)(*(_QWORD *)(v81 + 40) + 56));
        sub_1C47E3888(v115, (uint64_t)v214);
        if (v217 < 0)
          operator delete(v216);
        if (v215 < 0)
          operator delete(v214[0]);
        if (v221 < 0)
          operator delete(v220);
        if (v219 < 0)
          operator delete(v218[0]);
        v116 = *(_QWORD *)(a1 + 88);
        v248 = 0;
        v249 = *(_OWORD *)(a1 + 8);
        v251 = 0;
        v252 = 0;
        v250 = v116;
        v253 = &v255;
        v254 = v80;
        v259[0] = (char *)&v260;
        v259[1] = (char *)0x800000000;
        v261 = v263;
        v262 = 0x800000000;
        v267 = 1;
        if (v51[15])
          v117 = (size_t)v51[2][2 * *((unsigned int *)v51 + 6) - 2];
        else
          v117 = 0;
        if (!llvm::InlineFunction((uint64_t ***)v81, (uint64_t)&v248, 0, 1, v117))
        {
          llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v222, (llvm::DiagnosticInfoOptimizationBase *)&v277);
          if (v210)
          {
            if (v229)
            {
              v123 = v229 - 1;
              v124 = ((v224 >> 4) ^ (v224 >> 9)) & (v229 - 1);
              v125 = *(_QWORD *)(v228[0] + 16 * v124);
              if (v224 == v125)
              {
LABEL_200:
                v126 = sub_1C617C470((uint64_t)v228, &v224)[1];
                v49 = v210 >= v126;
                v127 = v210 - v126;
                if (!v49)
                  v127 = 0;
                v210 = v127;
              }
              else
              {
                v166 = 1;
                while (v125 != -4096)
                {
                  v167 = v124 + v166++;
                  v124 = v167 & v123;
                  v125 = *(_QWORD *)(v228[0] + 16 * (v167 & v123));
                  v51 = (uint64_t ****)a2;
                  if (v224 == v125)
                    goto LABEL_200;
                }
                v51 = (uint64_t ****)a2;
              }
            }
          }
          else
          {
            v210 = 0;
          }
          ++*(_DWORD *)a1;
          v211 = 1;
        }
        if (v261 != v263)
          free(v261);
        sub_1C52768FC(v259);
        if (v253 != &v255)
          free(v253);
        v277 = (unint64_t)&off_1E814E790;
        v118 = (char *)v285;
        if ((_DWORD)v286)
        {
          v119 = (unint64_t)v286 << 6;
          do
          {
            v120 = (void **)&v118[v119];
            if (v118[v119 - 17] < 0)
              operator delete(*(v120 - 5));
            if (*((char *)v120 - 41) < 0)
              operator delete(*(v120 - 8));
            v119 -= 64;
          }
          while (v119);
          v118 = (char *)v285;
        }
        if (v118 != (char *)v287)
          free(v118);
      }
    }
    else if (v109)
    {
      goto LABEL_158;
    }
LABEL_189:
    v121 = v223;
    v223 = 0;
    if (v121)
    {
      v122 = *v121;
      *v121 = 0;
      if (v122)
        (*(void (**)(uint64_t))(*(_QWORD *)v122 + 8))(v122);
      MEMORY[0x1CAA32FC0](v121, 0x20C4093837F09);
    }
LABEL_193:
    ++v79;
  }
  while (v79 != v78);
  if ((v211 & 1) == 0)
    goto LABEL_398;
  *((_BYTE *)v51 + 96) = 1;
  if (v227)
    llvm::Function::setEntryCount(*v51, v210, v226, 0);
  llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter((llvm::OptimizationRemarkEmitter *)v268, (const llvm::Function *)*v51);
  v182 = ***(_QWORD ***)v268[0];
  if (*(_QWORD *)(v182 + 128)
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v182 + 72) + 48))(*(_QWORD *)(v182 + 72)))
  {
    llvm::OptimizationRemark::OptimizationRemark((uint64_t)&v248, (uint64_t)"partial-inlining", (uint64_t)"PartiallyInlined", 16, (uint64_t)*v51);
    v277 = (unint64_t)"Partially inlined into at least one caller";
    v278 = 42;
    sub_1C53B17B4((uint64_t)&v257, (const void **)&v277);
    sub_1C61998EC((uint64_t)&v277, (uint64_t)&v248);
    v277 = (unint64_t)&off_1E814E500;
    v248 = (unint64_t)&off_1E814E790;
    v191 = (char **)v257;
    if ((_DWORD)v258)
    {
      v192 = (unint64_t)v258 << 6;
      do
      {
        v193 = (void **)((char *)v191 + v192);
        if (*((char *)v191 + v192 - 17) < 0)
          operator delete(*(v193 - 5));
        if (*((char *)v193 - 41) < 0)
          operator delete(*(v193 - 8));
        v192 -= 64;
      }
      while (v192);
      v191 = (char **)v257;
    }
    if (v191 != v259)
      free(v191);
    llvm::OptimizationRemarkEmitter::emit((llvm::OptimizationRemarkEmitter *)v268, (llvm::DiagnosticInfoOptimizationBase *)&v277);
    v277 = (unint64_t)&off_1E814E790;
    v194 = (char *)v285;
    if ((_DWORD)v286)
    {
      v195 = (unint64_t)v286 << 6;
      do
      {
        v196 = (void **)&v194[v195];
        if (v194[v195 - 17] < 0)
          operator delete(*(v196 - 5));
        if (*((char *)v196 - 41) < 0)
          operator delete(*(v196 - 8));
        v195 -= 64;
      }
      while (v195);
      v194 = (char *)v285;
    }
    if (v194 != (char *)v287)
      free(v194);
  }
  v183 = v269;
  v269 = 0;
  if (v183)
  {
    v184 = *v183;
    *v183 = 0;
    if (v184)
      (*(void (**)(uint64_t))(*(_QWORD *)v184 + 8))(v184);
    MEMORY[0x1CAA32FC0](v183, 0x20C4093837F09);
  }
  v185 = 1;
LABEL_399:
  MEMORY[0x1CAA32FB4](v228[0], 8);
  if (v230)
  {
    v231 = (uint64_t *)v230;
    operator delete(v230);
  }
  return v185;
}

uint64_t sub_1C574E1F0(uint64_t a1)
{
  uint64_t v2;
  llvm::Function **v3;
  uint64_t v4;
  llvm::Function *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;

  llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)(a1 + 8), *(llvm::Value **)a1, (llvm::Value *)1);
  llvm::Function::eraseFromParent(*(llvm::Function **)(a1 + 8));
  if (!*(_BYTE *)(a1 + 96))
  {
    v2 = *(unsigned int *)(a1 + 24);
    if ((_DWORD)v2)
    {
      v3 = *(llvm::Function ***)(a1 + 16);
      v4 = 16 * v2;
      do
      {
        v5 = *v3;
        v3 += 2;
        llvm::Function::eraseFromParent(v5);
        v4 -= 16;
      }
      while (v4);
    }
  }
  v6 = *(uint64_t **)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v6)
  {
    v7 = *v6;
    *v6 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    MEMORY[0x1CAA32FC0](v6, 0x20C4093837F09);
  }
  sub_1C574EC14((char ***)(a1 + 128), 0);
  sub_1C574ED20((uint64_t *)(a1 + 120), 0);
  v8 = *(void **)(a1 + 16);
  if (v8 != (void *)(a1 + 32))
    free(v8);
  return a1;
}

unint64_t sub_1C574E2C0(llvm::BasicBlock *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  const llvm::DataLayout *v12;
  uint64_t v13;
  llvm *v14;
  int CallsiteCost;
  BOOL v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int v41;
  int v42;
  _QWORD *v43;
  _QWORD v44[2];
  int v45;
  void *v46[2];
  _BYTE v47[32];
  void *v48;
  uint64_t v49;
  _DWORD v50[10];
  __int128 v51;
  void *__src;
  uint64_t v53;
  _BYTE v54[32];
  __int128 v55;
  _BYTE v56[24];
  _BYTE *v57;
  __int128 v58;
  _BYTE v59[24];
  _BYTE *v60;
  __int128 v61;
  _BYTE v62[24];
  _BYTE *v63;
  __int128 v64;
  _BYTE v65[24];
  _BYTE *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(*((_QWORD *)a1 + 7) + 40);
  llvm::BasicBlock::instructionsWithoutDebug(a1, 1, (uint64_t)&v61);
  v58 = v61;
  v4 = v59;
  if (v63)
  {
    if (v63 == v62)
    {
      v60 = v59;
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v63 + 24))(v63, v59);
    }
    else
    {
      v60 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v63 + 16))(v63);
    }
  }
  else
  {
    v60 = 0;
  }
  v55 = v64;
  v5 = v56;
  if (v66)
  {
    if (v66 == v65)
    {
      v57 = v56;
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v66 + 24))(v66, v56);
    }
    else
    {
      v57 = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v66 + 16))(v66);
    }
  }
  else
  {
    v57 = 0;
  }
  v6 = v58;
  if ((_QWORD)v58 != (_QWORD)v55)
  {
    v7 = 0;
    v8 = 0;
    v43 = a2;
    while (1)
    {
      v9 = (uint64_t *)(v6 - 24);
      v10 = v6 ? v6 - 24 : 0;
      v11 = *(unsigned __int8 *)(v10 + 16);
      if ((v11 - 59) <= 0x18)
      {
        if (((1 << (v11 - 59)) & 0x1070001) != 0)
          goto LABEL_18;
        if (v11 == 62)
          break;
      }
      if (llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v10))
        goto LABEL_18;
      if (v11 != 84)
      {
        if (v6 && v11 == 33)
        {
          v14 = (llvm *)v10;
LABEL_39:
          CallsiteCost = llvm::getCallsiteCost(v14, (llvm::CallBase *)(v3 + 272), v12);
          v16 = __OFADD__(v8, CallsiteCost);
          v17 = v8 + CallsiteCost;
          v18 = (v17 >> 63) ^ 0x8000000000000000;
LABEL_45:
          if (v16)
            v8 = v18;
          else
            v8 = v17;
          goto LABEL_18;
        }
        if (v6 && v11 == 31)
        {
          v19 = 5 * (((unint64_t)*(unsigned int *)(v10 + 20) >> 1) & 0x3FFFFFF);
          v16 = __OFADD__(v8, v19);
          v17 = v8 + v19;
LABEL_44:
          v18 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_45;
        }
LABEL_43:
        v16 = __OFADD__(v8, 5);
        v17 = v8 + 5;
        goto LABEL_44;
      }
      v13 = *(_QWORD *)(v10 - 32);
      if (!v13
        || *(_BYTE *)(v13 + 16)
        || *(_QWORD *)(v13 + 24) != *(_QWORD *)(v10 + 72)
        || (*(_BYTE *)(v13 + 33) & 0x20) == 0)
      {
        if (v6)
        {
          v14 = (llvm *)(v6 - 24);
          goto LABEL_39;
        }
        goto LABEL_43;
      }
      v41 = *(_DWORD *)(*(_QWORD *)(v6 - 56) + 36);
      v42 = v7;
      __src = v54;
      v53 = 0x400000000;
      v20 = *(unsigned __int8 *)(v6 - 8);
      if (v20 == 84)
      {
        v21 = 0;
      }
      else if (v20 == 39)
      {
        v21 = (*(_DWORD *)(v6 + 56) + 1);
      }
      else
      {
        v21 = 2;
      }
      v22 = *(_DWORD *)(v6 - 4);
      v23 = v22 & 0x7FFFFFF;
      v24 = (uint64_t **)&v9[-4 * v23];
      if (v22 < 0 && (v33 = (uint64_t)*(v24 - 1), (v33 & 0xFFFFFFFF0) != 0))
        v25 = (*((_DWORD *)v24 - 3) - *(_DWORD *)((char *)v24 - v33));
      else
        v25 = 0;
      if (v24 != (uint64_t **)&v9[-4 * v21 - 4 + -4 * v25])
      {
        v26 = 0;
        v27 = 32 * v23 - 32 * v21 - 32 * v25 - 32;
        do
        {
          v28 = **v24;
          if (v26 >= HIDWORD(v53))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v54, v26 + 1, 8);
            v26 = v53;
          }
          *((_QWORD *)__src + v26) = v28;
          v26 = v53 + 1;
          LODWORD(v53) = v53 + 1;
          v24 += 4;
          v27 -= 32;
        }
        while (v27);
      }
      if (sub_1C4774A9C(v6 - 24))
      {
        v29 = *(unsigned __int8 *)(v6 - 7) >> 1;
        if (v29 == 127)
          v29 = -1;
      }
      else
      {
        v29 = 0;
      }
      v30 = *v9;
      v44[0] = 0;
      v44[1] = v30;
      v7 = v42;
      v45 = v41;
      v46[0] = v47;
      v46[1] = (void *)0x400000000;
      v48 = v50;
      v49 = 0x400000000;
      v50[8] = v29;
      v51 = xmmword_1C64632D0;
      sub_1C4F7C758((unsigned int *)v46, (uint64_t)v47, (char *)__src, (char *)__src + 8 * v53);
      v31 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t))(*(_QWORD *)*v43 + 952))(*v43, v44, 3);
      if (v32 == 1)
        v7 = 1;
      if (__OFADD__(v8, v31))
        v8 = ((uint64_t)(v8 + v31) >> 63) ^ 0x8000000000000000;
      else
        v8 += v31;
      if (v48 != v50)
        free(v48);
      if (v46[0] != v47)
        free(v46[0]);
      if (__src != v54)
        free(__src);
LABEL_18:
      while (1)
      {
        v6 = *(_QWORD *)(v58 + 8);
        *(_QWORD *)&v58 = v6;
        if (v6 == *((_QWORD *)&v58 + 1))
          break;
        if (!v60)
          sub_1C485C2F0();
        if ((*(unsigned int (**)(void))(*(_QWORD *)v60 + 48))())
        {
          v6 = v58;
          break;
        }
      }
      if (v6 == (_QWORD)v55)
        goto LABEL_78;
    }
    if ((llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v10) & 1) != 0
      || llvm::Instruction::isLifetimeStartOrEnd((llvm::Instruction *)v10))
    {
      goto LABEL_18;
    }
    goto LABEL_43;
  }
  v8 = 0;
LABEL_78:
  if (v57 == v56)
  {
    v34 = 4;
  }
  else
  {
    if (!v57)
      goto LABEL_83;
    v34 = 5;
    v5 = v57;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v34))(v5);
LABEL_83:
  if (v60 == v59)
  {
    v35 = 4;
  }
  else
  {
    if (!v60)
      goto LABEL_88;
    v35 = 5;
    v4 = v60;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v35))(v4);
LABEL_88:
  v36 = v66;
  if (v66 == v65)
  {
    v37 = 4;
    v36 = v65;
LABEL_90:
    (*(void (**)(void))(*v36 + 8 * v37))();
    goto LABEL_91;
  }
  if (v66)
  {
    v37 = 5;
    goto LABEL_90;
  }
LABEL_91:
  v38 = v63;
  if (v63 == v62)
  {
    v39 = 4;
    v38 = v62;
  }
  else
  {
    if (!v63)
      return v8;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
  return v8;
}

__n128 sub_1C574E844(uint64_t a1, __n128 *a2)
{
  __n128 *v2;
  uint64_t v4;
  char *v5;
  char *v6;
  __n128 *v7;
  __n128 result;
  _BOOL4 v10;
  uint64_t v11;
  char *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  int v29;
  uint64_t v30;
  _BOOL4 v31;
  unint64_t v32;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(char **)a1;
  if (v4 < *(_DWORD *)(a1 + 12))
    goto LABEL_2;
  v10 = v5 <= (char *)a2 && &v5[104 * v4] > (char *)a2;
  if (v10)
    v11 = 0x4EC4EC4EC4EC4EC5 * (((char *)a2 - v5) >> 3);
  else
    v11 = -1;
  v32 = 0;
  v5 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v4 + 1, 104, &v32);
  v12 = *(char **)a1;
  v13 = *(_DWORD *)(a1 + 8);
  if (!v13)
    goto LABEL_36;
  v30 = v11;
  v31 = v10;
  v14 = 0;
  v15 = 104 * v13;
  do
  {
    v16 = &v5[v14];
    v17 = &v12[v14];
    v18 = &v5[v14 + 16];
    *(_QWORD *)v16 = v18;
    *((_QWORD *)v16 + 1) = 0x800000000;
    if (v12 != v5)
    {
      v19 = *((unsigned int *)v17 + 2);
      if (*((_DWORD *)v17 + 2))
      {
        v20 = &v12[v14];
        v22 = (uint64_t)&v12[v14 + 16];
        v21 = *(const void **)&v12[v14];
        if ((const void *)v22 != v21)
        {
          *(_QWORD *)v16 = v21;
          v25 = *((_DWORD *)v20 + 3);
          *((_DWORD *)v16 + 2) = v19;
          *((_DWORD *)v16 + 3) = v25;
          *(_QWORD *)v20 = v22;
          *((_DWORD *)v20 + 3) = 0;
          goto LABEL_23;
        }
        if (v19 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v5[v14], (uint64_t)&v5[v14 + 16], *((unsigned int *)v17 + 2), 8);
          v23 = *((unsigned int *)v17 + 2);
          if (!(_DWORD)v23)
            goto LABEL_22;
          v21 = *(const void **)v17;
          v18 = *(char **)v16;
        }
        else
        {
          v23 = *((unsigned int *)v17 + 2);
        }
        memcpy(v18, v21, 8 * v23);
LABEL_22:
        *((_DWORD *)v16 + 2) = v19;
LABEL_23:
        *((_DWORD *)v17 + 2) = 0;
      }
    }
    v24 = *((_OWORD *)v17 + 5);
    *((_QWORD *)v16 + 12) = *((_QWORD *)v17 + 12);
    *((_OWORD *)v16 + 5) = v24;
    v14 += 104;
  }
  while (v15 != v14);
  v12 = *(char **)a1;
  v26 = *(_DWORD *)(a1 + 8);
  if (v26)
  {
    v27 = 104 * v26;
    v10 = v31;
    v11 = v30;
    do
    {
      v28 = *(char **)&v12[v27 - 104];
      if (&v12[v27 - 88] != v28)
        free(v28);
      v27 -= 104;
    }
    while (v27);
    v12 = *(char **)a1;
  }
  else
  {
    v10 = v31;
    v11 = v30;
  }
LABEL_36:
  v29 = v32;
  if (v12 != (char *)(a1 + 16))
    free(v12);
  *(_QWORD *)a1 = v5;
  *(_DWORD *)(a1 + 12) = v29;
  if (v10)
    v2 = (__n128 *)&v5[104 * v11];
  LODWORD(v4) = *(_DWORD *)(a1 + 8);
LABEL_2:
  v6 = &v5[104 * v4];
  *(_QWORD *)v6 = v6 + 16;
  *((_QWORD *)v6 + 1) = 0x800000000;
  if (v2->n128_u32[2])
    sub_1C49EEBE4((uint64_t)v6, (uint64_t)v2);
  v7 = (__n128 *)&v5[104 * v4];
  result = v2[5];
  v7[6].n128_u64[0] = v2[6].n128_u64[0];
  v7[5] = result;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

_QWORD *sub_1C574EAAC(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  uint64_t *v7;
  _QWORD *v8;

  v3 = *((_DWORD *)a1 + 2);
  v4 = *((_DWORD *)a1 + 4);
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - *((_DWORD *)a1 + 3) > v4 >> 3)
  {
    goto LABEL_3;
  }
  v7 = a1;
  sub_1C574EB5C((uint64_t)a1, v4);
  v8 = 0;
  sub_1C4E62854(v7, a2, &v8);
  a1 = v7;
  a3 = v8;
LABEL_3:
  ++*((_DWORD *)a1 + 2);
  if (*a3 != -4096)
    --*((_DWORD *)a1 + 3);
  return a3;
}

_QWORD *sub_1C574EB5C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C629E184(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

char ***sub_1C574EC14(char ***result, char **a2)
{
  char **v2;
  char *v3;
  unsigned int v4;
  uint64_t v5;
  char *v6;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    v4 = *((_DWORD *)v2 + 2);
    if (v4)
    {
      v5 = 104 * v4;
      do
      {
        v6 = *(char **)&v3[v5 - 104];
        if (&v3[v5 - 88] != v6)
          free(v6);
        v5 -= 104;
      }
      while (v5);
      v3 = *v2;
    }
    if (v3 != (char *)(v2 + 2))
      free(v3);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

_QWORD *sub_1C574ECB0(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;

  if (a4)
  {
    if (a4 >> 61)
      abort();
    v7 = result;
    result = operator new(8 * a4);
    *v7 = result;
    v7[2] = &result[a4];
    while (a2 != a3)
    {
      *result++ = *(_QWORD *)(a2 + 24);
      a2 = *(_QWORD *)(a2 + 8);
    }
    v7[1] = result;
  }
  return result;
}

uint64_t *sub_1C574ED20(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void *v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *(void **)(v2 + 64);
    if (v3 != (void *)(v2 + 80))
      free(v3);
    if (*(_QWORD *)v2 != v2 + 16)
      free(*(void **)v2);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

__n128 sub_1C574ED8C(double **a1, _WORD *a2, __n128 *a3)
{
  int v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80E348, "min-region-size-ratio", 0x15uLL);
  *(float *)&v6 = **a1;
  dword_1ED80E3C8 = v6;
  byte_1ED80E3DC = 1;
  dword_1ED80E3D8 = v6;
  word_1ED80E352 = (32 * (*a2 & 3)) | word_1ED80E352 & 0xFF9F;
  result = *a3;
  xmmword_1ED80E368 = (__int128)*a3;
  return result;
}

__n128 sub_1C574EE10(double **a1, _WORD *a2, __n128 *a3)
{
  int v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED80E4C8, "cold-branch-ratio", 0x11uLL);
  *(float *)&v6 = **a1;
  dword_1ED80E548 = v6;
  byte_1ED80E55C = 1;
  dword_1ED80E558 = v6;
  word_1ED80E4D2 = (32 * (*a2 & 3)) | word_1ED80E4D2 & 0xFF9F;
  result = *a3;
  xmmword_1ED80E4E8 = (__int128)*a3;
  return result;
}

uint64_t sub_1C574EE94(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::AssumptionAnalysis::Key, a2) + 8;
}

uint64_t sub_1C574EEBC(uint64_t *a1, uint64_t a2)
{
  uint64_t CachedResultImpl;

  CachedResultImpl = llvm::AnalysisManager<llvm::Function>::getCachedResultImpl(*a1, (uint64_t)&llvm::AssumptionAnalysis::Key, a2);
  if (CachedResultImpl)
    return CachedResultImpl + 8;
  else
    return 0;
}

uint64_t sub_1C574EEEC(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::TargetIRAnalysis::Key, a2) + 8;
}

uint64_t sub_1C574EF14(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::TargetLibraryAnalysis::Key, a2) + 8;
}

uint64_t sub_1C574EF3C(uint64_t *a1, uint64_t a2)
{
  return llvm::AnalysisManager<llvm::Function>::getResultImpl(*a1, &llvm::BlockFrequencyAnalysis::Key, a2) + 8;
}

uint64_t sub_1C574EF64()
{
  uint64_t v1;
  int v2;
  __n128 v3;
  int v4;
  int *v5;

  LOBYTE(v4) = 0;
  v5 = &v4;
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Disable partial inlining";
  v3.n128_u64[1] = 24;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80DF88, "disable-partial-inlining", (_BYTE **)&v5, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80DF88, &dword_1C475E000);
  LOBYTE(v4) = 0;
  v5 = &v4;
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Disable multi-region partial inlining";
  v3.n128_u64[1] = 37;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80E048, "disable-mr-partial-inlining", (_BYTE **)&v5, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80E048, &dword_1C475E000);
  LOBYTE(v4) = 0;
  v5 = &v4;
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Force outline regions with live exits";
  v3.n128_u64[1] = 37;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80E108, "pi-force-live-exit-outline", (_BYTE **)&v5, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80E108, &dword_1C475E000);
  LOBYTE(v4) = 0;
  v5 = &v4;
  LODWORD(v1) = 1;
  v3.n128_u64[0] = (unint64_t)"Mark outline function calls with ColdCC";
  v3.n128_u64[1] = 39;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80E1C8, "pi-mark-coldcc", (_BYTE **)&v5, &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80E1C8, &dword_1C475E000);
  LOBYTE(v2) = 0;
  v5 = &v2;
  LODWORD(v1) = 1;
  v4 = 2;
  v3.n128_u64[0] = (unint64_t)"Skip Cost Analysis";
  v3.n128_u64[1] = 18;
  sub_1C629E28C((char **)&v5, &v1, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED80E288, &dword_1C475E000);
  v1 = 0x3FB999999999999ALL;
  v5 = (int *)&v1;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Minimum ratio comparing relative sizes of each outline candidate and original function";
  v3.n128_u64[1] = 86;
  sub_1C629E3DC((double **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4EBA468, &qword_1ED80E348, &dword_1C475E000);
  LODWORD(v1) = 100;
  v5 = (int *)&v1;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Minimum block executions to consider its BranchProbabilityInfo valid";
  v3.n128_u64[1] = 68;
  sub_1C4DB1928((uint64_t)&unk_1ED80E408, "min-block-execution", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED80E408, &dword_1C475E000);
  v1 = 0x3FB999999999999ALL;
  v5 = (int *)&v1;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Minimum BranchProbability to consider a region cold.";
  v3.n128_u64[1] = 52;
  sub_1C629E480((double **)&v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4EBA468, &qword_1ED80E4C8, &dword_1C475E000);
  LODWORD(v1) = 5;
  v5 = (int *)&v1;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Max number of blocks to be partially inlined";
  v3.n128_u64[1] = 44;
  sub_1C4DB1928((uint64_t)&unk_1ED80E588, "max-num-inline-blocks", &v5, &v4, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED80E588, &dword_1C475E000);
  LODWORD(v1) = -1;
  v5 = (int *)&v1;
  v4 = 1;
  v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Max number of partial inlining. The default is unlimited";
  v3.n128_u64[1] = 56;
  sub_1C629E524(&v5, &v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED80E648, &dword_1C475E000);
  LODWORD(v1) = 75;
  v5 = (int *)&v1;
  v4 = 1;
  v2 = 1;
  v3.n128_u64[0] = (unint64_t)"Relative frequency of outline region to the entry block";
  v3.n128_u64[1] = 55;
  sub_1C629E664(&v5, &v4, &v2, &v3);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &qword_1ED80E708, &dword_1C475E000);
  LODWORD(v1) = 0;
  v5 = (int *)&v1;
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"A debug option to add additional penalty to the computed one.";
  v3.n128_u64[1] = 61;
  sub_1C4DB1928((uint64_t)&unk_1ED80E7C8, "partial-inlining-extra-penalty", &v5, &v4, &v3);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED80E7C8, &dword_1C475E000);
}

llvm::PassManagerBuilder *llvm::PassManagerBuilder::PassManagerBuilder(llvm::PassManagerBuilder *this)
{
  char *v2;
  char *v3;
  int v4;

  v2 = (char *)this + 96;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  v3 = (char *)this + 120;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_DWORD *)this = 2;
  *((_BYTE *)this + 40) = 0;
  *((_BYTE *)this + 42) = 0;
  *(_QWORD *)((char *)this + 12) = 0;
  *(_QWORD *)((char *)this + 4) = 0;
  *((_DWORD *)this + 5) = 0;
  *(_WORD *)((char *)this + 43) = 257;
  *((_BYTE *)this + 45) = byte_1ED80E9E8;
  *((_BYTE *)this + 46) = byte_1ED8320F8;
  v4 = dword_1ED836050;
  *((_DWORD *)this + 15) = dword_1ED835F90;
  *((_DWORD *)this + 16) = v4;
  *((_BYTE *)this + 47) = 0;
  *((_BYTE *)this + 48) = byte_1ED836110;
  *((_WORD *)this + 34) = 0;
  *((_BYTE *)this + 70) = 0;
  *((_BYTE *)this + 53) = 0;
  *(_DWORD *)((char *)this + 49) = 0;
  MEMORY[0x1CAA32ABC]((char *)this + 72, "");
  MEMORY[0x1CAA32ABC](v2, "");
  MEMORY[0x1CAA32ABC](v3, "");
  *((_BYTE *)this + 54) = byte_1ED80EAA8;
  *((_BYTE *)this + 55) = byte_1ED80EB68;
  *((_BYTE *)this + 56) = 0;
  *((_BYTE *)this + 41) = 1;
  return this;
}

void llvm::PassManagerBuilder::~PassManagerBuilder(llvm::PassManagerBuilder *this)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v2 = (uint64_t *)*((_QWORD *)this + 1);
  if (v2)
  {
    v9 = sub_1C61BB478(v2);
    MEMORY[0x1CAA32FC0](v9, 0x1020C4008A01BC9);
  }
  v3 = *((_QWORD *)this + 2);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 18);
  if (!v4)
    goto LABEL_15;
  v5 = *((_QWORD *)this + 19);
  v6 = (void *)*((_QWORD *)this + 18);
  if (v5 == v4)
    goto LABEL_14;
  do
  {
    v7 = *(_QWORD **)(v5 - 8);
    if ((_QWORD *)(v5 - 32) == v7)
    {
      v7 = (_QWORD *)(v5 - 32);
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_12;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_12:
    v5 -= 40;
  }
  while (v5 != v4);
  v6 = (void *)*((_QWORD *)this + 18);
LABEL_14:
  *((_QWORD *)this + 19) = v4;
  operator delete(v6);
LABEL_15:
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
}

uint64_t llvm::PassManagerBuilder::addGlobalExtension(int a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  unint64_t v17;
  BOOL v18;
  _BYTE *v19;
  int v20;
  _BYTE v21[24];
  _BYTE *v22;
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = dword_1ED80E888++;
  if (!atomic_load(qword_1ED80E890))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED80E890, (void *(*)(void))sub_1C62A1120, (void (*)(void *))sub_1C62A115C);
  v6 = qword_1ED80E890[0];
  v20 = a1;
  v7 = v21;
  v8 = (_QWORD *)a2[3];
  if (v8)
  {
    if (v8 == a2)
    {
      v22 = v21;
      (*(void (**)(_QWORD *, _BYTE *))(*a2 + 24))(a2, v21);
    }
    else
    {
      v22 = (_BYTE *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    v22 = 0;
  }
  v23 = v4;
  v9 = *(unsigned int *)(v6 + 8);
  v10 = *(_QWORD *)v6;
  v11 = &v20;
  if (v9 >= *(_DWORD *)(v6 + 12))
  {
    v17 = v9 + 1;
    v18 = v10 + 48 * v9 > (unint64_t)&v20;
    if (v10 <= (unint64_t)&v20 && v18)
    {
      v19 = &v21[-v10];
      sub_1C57504D0(v6, v17);
      v10 = *(_QWORD *)v6;
      v11 = (int *)&v19[*(_QWORD *)v6];
    }
    else
    {
      sub_1C57504D0(v6, v17);
      v10 = *(_QWORD *)v6;
      v11 = &v20;
    }
  }
  v12 = v10 + 48 * *(unsigned int *)(v6 + 8);
  *(_DWORD *)v12 = *v11;
  v13 = v12 + 8;
  v14 = (int *)*((_QWORD *)v11 + 4);
  if (v14)
  {
    if (v14 == v11 + 2)
    {
      *(_QWORD *)(v12 + 32) = v13;
      (*(void (**)(_QWORD))(**((_QWORD **)v11 + 4) + 24))(*((_QWORD *)v11 + 4));
    }
    else
    {
      *(_QWORD *)(v12 + 32) = v14;
      *((_QWORD *)v11 + 4) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v12 + 32) = 0;
  }
  *(_DWORD *)(v12 + 40) = v11[10];
  ++*(_DWORD *)(v6 + 8);
  if (v22 == v21)
  {
    v15 = 4;
    goto LABEL_18;
  }
  if (v22)
  {
    v15 = 5;
    v7 = v22;
LABEL_18:
    (*(void (**)(_QWORD *, unint64_t))(*v7 + 8 * v15))(v7, v13);
  }
  return v4;
}

_QWORD *llvm::PassManagerBuilder::removeGlobalExtension(_QWORD *this)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;

  if (atomic_load(qword_1ED80E890))
  {
    v2 = (int)this;
    if (!atomic_load(qword_1ED80E890))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED80E890, (void *(*)(void))sub_1C62A1120, (void (*)(void *))sub_1C62A115C);
    v4 = *(_QWORD *)qword_1ED80E890[0];
    v5 = *(unsigned int *)(qword_1ED80E890[0] + 8);
    if ((_DWORD)v5)
    {
      v6 = v4 + 48 * v5;
      v7 = 48 * v5;
      while (*(_DWORD *)(v4 + 40) != v2)
      {
        v4 += 48;
        v7 -= 48;
        if (!v7)
        {
          v4 = v6;
          break;
        }
      }
    }
    if (!atomic_load(qword_1ED80E890))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED80E890, (void *(*)(void))sub_1C62A1120, (void (*)(void *))sub_1C62A115C);
    v9 = qword_1ED80E890[0];
    v10 = *(_QWORD *)qword_1ED80E890[0];
    v11 = *(_DWORD *)(qword_1ED80E890[0] + 8);
    v12 = *(_QWORD *)qword_1ED80E890[0] + 48 * v11;
    v13 = v4 + 48;
    if (v13 != v12)
    {
      while (1)
      {
        *(_DWORD *)(v13 - 48) = *(_DWORD *)v13;
        v14 = *(_QWORD **)(v13 - 16);
        *(_QWORD *)(v13 - 16) = 0;
        if ((_QWORD *)(v13 - 40) == v14)
          break;
        if (v14)
        {
          v15 = 5;
LABEL_16:
          (*(void (**)(void))(*v14 + 8 * v15))();
        }
        v16 = *(_QWORD *)(v13 + 32);
        if (v16)
        {
          if (v13 + 8 == v16)
          {
            *(_QWORD *)(v13 - 16) = v13 - 40;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 + 8) + 24))(v13 + 8, v13 - 40);
          }
          else
          {
            *(_QWORD *)(v13 - 16) = v16;
            *(_QWORD *)(v13 + 32) = 0;
          }
        }
        else
        {
          *(_QWORD *)(v13 - 16) = 0;
        }
        *(_DWORD *)(v13 - 8) = *(_DWORD *)(v13 + 40);
        v13 += 48;
        if (v13 == v12)
        {
          v11 = *(_DWORD *)(v9 + 8);
          v10 = *(_QWORD *)v9;
          goto LABEL_24;
        }
      }
      v14 = (_QWORD *)(v13 - 40);
      v15 = 4;
      goto LABEL_16;
    }
LABEL_24:
    v17 = v11 - 1;
    *(_DWORD *)(v9 + 8) = v17;
    v18 = v10 + 48 * v17;
    v19 = (_QWORD *)(v18 + 8);
    this = *(_QWORD **)(v18 + 32);
    if (this == (_QWORD *)(v18 + 8))
    {
      v20 = 4;
      this = v19;
      return (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v20))();
    }
    if (this)
    {
      v20 = 5;
      return (_QWORD *)(*(uint64_t (**)(void))(*this + 8 * v20))();
    }
  }
  return this;
}

uint64_t *sub_1C574F914(uint64_t *result, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v16[5];

  v3 = result;
  v4 = result[2];
  v5 = result[1];
  if (v5 >= v4)
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *result) >> 3);
    if (v8 + 1 > 0x666666666666666)
      abort();
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - *result) >> 3);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    v16[4] = result + 2;
    if (v11)
    {
      if (v11 > 0x666666666666666)
        sub_1C4764EE4();
      v12 = operator new(40 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[5 * v8];
    v16[0] = v12;
    v16[1] = v13;
    v16[3] = &v12[5 * v11];
    *v13 = *(_DWORD *)a2;
    v14 = *(_QWORD *)(a2 + 32);
    if (v14)
    {
      v15 = &v12[5 * v8 + 4];
      if (v14 == a2 + 8)
      {
        *v15 = v13 + 2;
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
      }
      else
      {
        *v15 = v14;
        *(_QWORD *)(a2 + 32) = 0;
      }
    }
    else
    {
      v12[5 * v8 + 4] = 0;
    }
    v16[2] = v13 + 10;
    sub_1C62A1218(v3, v16);
    v7 = v3[1];
    result = (uint64_t *)sub_1C62A12FC((uint64_t)v16);
  }
  else
  {
    *(_DWORD *)v5 = *(_DWORD *)a2;
    v6 = *(_QWORD *)(a2 + 32);
    if (v6)
    {
      if (v6 == a2 + 8)
      {
        *(_QWORD *)(v5 + 32) = v5 + 8;
        result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 32) + 24))(*(_QWORD *)(a2 + 32));
      }
      else
      {
        *(_QWORD *)(v5 + 32) = v6;
        *(_QWORD *)(a2 + 32) = 0;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 32) = 0;
    }
    v7 = v5 + 40;
  }
  v3[1] = v7;
  return result;
}

llvm *llvm::PassManagerBuilder::addLTOOptimizationPasses(llvm::PassManagerBuilder *this, llvm::legacy::PassManagerBase *a2)
{
  llvm::PassManagerBuilder *v3;
  uint64_t PruneEHPass;
  char v5;
  BOOL v6;
  void *v7;
  size_t v8;
  size_t v9;
  uint64_t SampleProfileLoaderPass;
  uint64_t GlobalDCEPass;
  llvm::PassManagerBuilder *v12;
  llvm *v13;
  uint64_t ForceFunctionAttrsLegacyPass;
  llvm *v15;
  uint64_t InferFunctionAttrsLegacyPass;
  llvm *v17;
  uint64_t v18;
  llvm *v19;
  uint64_t v20;
  uint64_t IPSCCPPass;
  llvm *v22;
  uint64_t CalledValuePropagationPass;
  uint64_t AttributorLegacyPass;
  uint64_t PostOrderFunctionAttrsLegacyPass;
  llvm *v26;
  uint64_t ReversePostOrderFunctionAttrsPass;
  uint64_t v28;
  const llvm::ModuleSummaryIndex *v29;
  uint64_t WholeProgramDevirtPass;
  llvm *result;
  uint64_t GlobalOptimizerPass;
  llvm *v33;
  uint64_t PromoteMemoryToRegisterPass;
  llvm *v35;
  uint64_t ConstantMergePass;
  llvm *v37;
  uint64_t DeadArgEliminationPass;
  llvm *v39;
  uint64_t AggressiveInstCombinerPass;
  llvm::InstructionCombiningPass *InstructionCombiningPass;
  llvm *v42;
  uint64_t v43;
  uint64_t v44;
  llvm *v45;
  uint64_t AttributorCGSCCLegacyPass;
  uint64_t OpenMPOptCGSCCLegacyPass;
  uint64_t v48;
  uint64_t v49;
  uint64_t ArgumentPromotionPass;
  llvm *v51;
  llvm::InstructionCombiningPass *v52;
  uint64_t JumpThreadingPass;
  llvm *v54;
  uint64_t SROAPass;
  llvm *v56;
  uint64_t v57;
  uint64_t v58;
  llvm *v59;
  llvm::GlobalsAAWrapperPass *GlobalsAAWrapperPass;
  uint64_t LICMPass;
  llvm *v62;
  uint64_t NewGVNPass;
  llvm *v64;
  uint64_t MemCpyOptPass;
  llvm *v66;
  uint64_t DeadStoreEliminationPass;
  uint64_t MergedLoadStoreMotionPass;
  llvm *v69;
  uint64_t LoopFlattenPass;
  uint64_t IndVarSimplifyPass;
  llvm *v72;
  uint64_t LoopDeletionPass;
  llvm *v74;
  uint64_t LoopInterchangePass;
  uint64_t ConstraintEliminationPass;
  uint64_t SimpleLoopUnrollPass;
  llvm *v78;
  uint64_t LoopDistributePass;
  uint64_t v80;

  v3 = this;
  if (*((char *)this + 143) < 0)
  {
    if (!*((_QWORD *)this + 16))
      goto LABEL_12;
  }
  else if (!*((_BYTE *)this + 143))
  {
    goto LABEL_12;
  }
  PruneEHPass = llvm::createPruneEHPass(this);
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, PruneEHPass);
  v5 = *((_BYTE *)v3 + 143);
  v6 = v5 < 0;
  if (v5 >= 0)
    v7 = (char *)v3 + 120;
  else
    v7 = (void *)*((_QWORD *)v3 + 15);
  v8 = v5 & 0x7F;
  if (v6)
    v9 = *((_QWORD *)v3 + 16);
  else
    v9 = v8;
  SampleProfileLoaderPass = llvm::createSampleProfileLoaderPass(v7, v9);
  this = (llvm::PassManagerBuilder *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, SampleProfileLoaderPass);
LABEL_12:
  GlobalDCEPass = llvm::createGlobalDCEPass(this);
  v12 = (llvm::PassManagerBuilder *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, GlobalDCEPass);
  v13 = (llvm *)llvm::PassManagerBuilder::addInitialAliasAnalysisPasses(v12, a2);
  ForceFunctionAttrsLegacyPass = llvm::createForceFunctionAttrsLegacyPass(v13);
  v15 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, ForceFunctionAttrsLegacyPass);
  InferFunctionAttrsLegacyPass = llvm::createInferFunctionAttrsLegacyPass(v15);
  v17 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, InferFunctionAttrsLegacyPass);
  if (*(_DWORD *)v3 >= 2u)
  {
    v18 = llvm::createCallSiteSplittingPass(v17);
    v19 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v18);
    if (byte_1ED832CF8 && *(_DWORD *)v3 >= 3u)
    {
      v20 = operator new();
      *(_QWORD *)(v20 + 8) = 0;
      *(_QWORD *)(v20 + 16) = &unk_1EF8F7150;
      *(_DWORD *)(v20 + 24) = 4;
      *(_QWORD *)v20 = &off_1E817C870;
      v19 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v20);
    }
    IPSCCPPass = llvm::createIPSCCPPass(v19);
    v22 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, IPSCCPPass);
    CalledValuePropagationPass = llvm::createCalledValuePropagationPass(v22);
    v17 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, CalledValuePropagationPass);
    if ((dword_1ED832DB8 & 1) != 0)
    {
      AttributorLegacyPass = llvm::createAttributorLegacyPass(v17);
      v17 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, AttributorLegacyPass);
    }
  }
  PostOrderFunctionAttrsLegacyPass = llvm::createPostOrderFunctionAttrsLegacyPass(v17);
  v26 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, PostOrderFunctionAttrsLegacyPass);
  ReversePostOrderFunctionAttrsPass = llvm::createReversePostOrderFunctionAttrsPass(v26);
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, ReversePostOrderFunctionAttrsPass);
  v28 = operator new();
  sub_1C56EB5FC(v28);
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v28);
  WholeProgramDevirtPass = llvm::createWholeProgramDevirtPass(*((llvm **)v3 + 3), 0, v29);
  result = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, WholeProgramDevirtPass);
  if (*(_DWORD *)v3 != 1)
  {
    GlobalOptimizerPass = llvm::createGlobalOptimizerPass(result);
    v33 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, GlobalOptimizerPass);
    PromoteMemoryToRegisterPass = llvm::createPromoteMemoryToRegisterPass(v33);
    v35 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, PromoteMemoryToRegisterPass);
    ConstantMergePass = llvm::createConstantMergePass(v35);
    v37 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, ConstantMergePass);
    DeadArgEliminationPass = llvm::createDeadArgEliminationPass(v37);
    v39 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, DeadArgEliminationPass);
    if (*(_DWORD *)v3 >= 3u)
    {
      AggressiveInstCombinerPass = llvm::createAggressiveInstCombinerPass(v39);
      v39 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, AggressiveInstCombinerPass);
    }
    InstructionCombiningPass = llvm::createInstructionCombiningPass(v39);
    (*(void (**)(llvm::legacy::PassManagerBase *, llvm::InstructionCombiningPass *))(*(_QWORD *)a2 + 16))(a2, InstructionCombiningPass);
    llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)v3, 7, (uint64_t)a2);
    v43 = *((_QWORD *)v3 + 2);
    if (v43)
    {
      v42 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, _QWORD))(*(_QWORD *)a2 + 16))(a2, *((_QWORD *)v3 + 2));
      *((_QWORD *)v3 + 2) = 0;
    }
    v44 = llvm::createPruneEHPass(v42);
    v45 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v44);
    if ((dword_1ED832DB8 & 2) != 0)
    {
      AttributorCGSCCLegacyPass = llvm::createAttributorCGSCCLegacyPass(v45);
      v45 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, AttributorCGSCCLegacyPass);
    }
    if (*(_DWORD *)v3 >= 2u)
    {
      OpenMPOptCGSCCLegacyPass = llvm::createOpenMPOptCGSCCLegacyPass(v45);
      v45 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, OpenMPOptCGSCCLegacyPass);
    }
    if (v43)
    {
      v48 = llvm::createGlobalOptimizerPass(v45);
      v45 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v48);
    }
    v49 = llvm::createGlobalDCEPass(v45);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v49);
    ArgumentPromotionPass = llvm::createArgumentPromotionPass((llvm *)3);
    v51 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, ArgumentPromotionPass);
    v52 = llvm::createInstructionCombiningPass(v51);
    (*(void (**)(llvm::legacy::PassManagerBase *, llvm::InstructionCombiningPass *))(*(_QWORD *)a2 + 16))(a2, v52);
    llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)v3, 7, (uint64_t)a2);
    JumpThreadingPass = llvm::createJumpThreadingPass((llvm *)1, -1);
    v54 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, JumpThreadingPass);
    SROAPass = llvm::createSROAPass(v54);
    v56 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, SROAPass);
    if (*(_DWORD *)v3 >= 2u)
    {
      v57 = llvm::createTailCallEliminationPass(v56);
      v56 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v57);
    }
    v58 = llvm::createPostOrderFunctionAttrsLegacyPass(v56);
    v59 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v58);
    GlobalsAAWrapperPass = llvm::createGlobalsAAWrapperPass(v59);
    (*(void (**)(llvm::legacy::PassManagerBase *, llvm::GlobalsAAWrapperPass *))(*(_QWORD *)a2 + 16))(a2, GlobalsAAWrapperPass);
    LICMPass = llvm::createLICMPass((llvm *)*((unsigned int *)v3 + 15), *((_DWORD *)v3 + 16), 1);
    v62 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LICMPass);
    if (*((_BYTE *)v3 + 46))
      NewGVNPass = llvm::createNewGVNPass(v62);
    else
      NewGVNPass = llvm::createGVNPass((llvm *)*((unsigned __int8 *)v3 + 47), 0);
    v64 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, NewGVNPass);
    MemCpyOptPass = llvm::createMemCpyOptPass(v64);
    v66 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, MemCpyOptPass);
    DeadStoreEliminationPass = llvm::createDeadStoreEliminationPass(v66);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, DeadStoreEliminationPass);
    MergedLoadStoreMotionPass = llvm::createMergedLoadStoreMotionPass(0);
    v69 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, MergedLoadStoreMotionPass);
    if (byte_1ED832338)
    {
      LoopFlattenPass = llvm::createLoopFlattenPass(v69);
      v69 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopFlattenPass);
    }
    IndVarSimplifyPass = llvm::createIndVarSimplifyPass(v69);
    v72 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, IndVarSimplifyPass);
    LoopDeletionPass = llvm::createLoopDeletionPass(v72);
    v74 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopDeletionPass);
    if (byte_1ED8321B8)
    {
      LoopInterchangePass = llvm::createLoopInterchangePass(v74);
      v74 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopInterchangePass);
    }
    if (byte_1ED832C38)
    {
      ConstraintEliminationPass = llvm::createConstraintEliminationPass(v74);
      (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, ConstraintEliminationPass);
    }
    SimpleLoopUnrollPass = llvm::createSimpleLoopUnrollPass((llvm *)*(unsigned int *)v3, *((_BYTE *)v3 + 40), *((_BYTE *)v3 + 48));
    v78 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, SimpleLoopUnrollPass);
    LoopDistributePass = llvm::createLoopDistributePass(v78);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, LoopDistributePass);
    llvm::PassManagerBuilder::addVectorPasses(v3, a2, 1);
    llvm::PassManagerBuilder::addExtensionsToPM((uint64_t)v3, 7, (uint64_t)a2);
    v80 = llvm::createJumpThreadingPass((llvm *)1, -1);
    return (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v80);
  }
  return result;
}

llvm *llvm::PassManagerBuilder::addLateLTOOptimizationPasses(llvm::PassManagerBuilder *this, llvm::legacy::PassManagerBase *a2)
{
  uint64_t HotColdSplittingPass;
  uint64_t CFGSimplificationPass;
  llvm *v6;
  uint64_t (**v7)(llvm *);
  uint64_t EliminateAvailableExternallyPass;
  llvm *v9;
  uint64_t GlobalDCEPass;
  llvm *result;
  uint64_t MergeFunctionsPass;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _QWORD v17[3];
  llvm *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (byte_1ED8324B8 || *((_BYTE *)this + 52))
  {
    HotColdSplittingPass = llvm::createHotColdSplittingPass(this);
    (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, HotColdSplittingPass);
  }
  v13 = 1;
  v14 = 0x101000101000000;
  v15 = 0;
  v16 = 0;
  v18 = 0;
  CFGSimplificationPass = llvm::createCFGSimplificationPass((uint64_t)&v13, v17);
  (*(void (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, CFGSimplificationPass);
  v6 = v18;
  if (v18 == (llvm *)v17)
  {
    v7 = (uint64_t (**)(llvm *))(v17[0] + 32);
    v6 = (llvm *)v17;
  }
  else
  {
    if (!v18)
      goto LABEL_9;
    v7 = (uint64_t (**)(llvm *))(*(_QWORD *)v18 + 40);
  }
  v6 = (llvm *)(*v7)(v6);
LABEL_9:
  EliminateAvailableExternallyPass = llvm::createEliminateAvailableExternallyPass(v6);
  v9 = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, EliminateAvailableExternallyPass);
  GlobalDCEPass = llvm::createGlobalDCEPass(v9);
  result = (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, GlobalDCEPass);
  if (*((_BYTE *)this + 51))
  {
    MergeFunctionsPass = llvm::createMergeFunctionsPass(result);
    return (llvm *)(*(uint64_t (**)(llvm::legacy::PassManagerBase *, uint64_t))(*(_QWORD *)a2 + 16))(a2, MergeFunctionsPass);
  }
  return result;
}

llvm::PassManagerBuilder *LLVMPassManagerBuilderCreate()
{
  llvm::PassManagerBuilder *v0;

  v0 = (llvm::PassManagerBuilder *)operator new();
  return llvm::PassManagerBuilder::PassManagerBuilder(v0);
}

llvm::PassManagerBuilder *LLVMPassManagerBuilderDispose(llvm::PassManagerBuilder *result)
{
  if (result)
  {
    llvm::PassManagerBuilder::~PassManagerBuilder(result);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

_DWORD *LLVMPassManagerBuilderSetOptLevel(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

uint64_t LLVMPassManagerBuilderSetSizeLevel(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4) = a2;
  return result;
}

uint64_t LLVMPassManagerBuilderSetDisableUnrollLoops(uint64_t result, int a2)
{
  *(_BYTE *)(result + 40) = a2 != 0;
  return result;
}

uint64_t LLVMPassManagerBuilderUseInlinerWithThreshold(uint64_t a1, llvm *this)
{
  uint64_t result;

  result = llvm::createFunctionInliningPass(this);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

_QWORD *sub_1C5750300(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E817C308;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E817C370;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C5750380(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

__n128 sub_1C5750394(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&llvm::EnableDFAJumpThreading, "enable-dfa-jump-thread", 0x16uLL);
  result = *a1;
  xmmword_1ED832398 = (__int128)*a1;
  v7 = *a2;
  byte_1ED8323F8 = **a2;
  byte_1ED832409 = 1;
  byte_1ED832408 = *v7;
  word_1ED832382 = (32 * (*a3 & 3)) | word_1ED832382 & 0xFF9F;
  return result;
}

void sub_1C5750418(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C62A0FA0(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C575045C(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED832DE8 >= HIDWORD(qword_1ED832DE8))
  {
    v3 = qword_1ED832DE8 + 1;
    if (qword_1ED832DE0 <= a1 && qword_1ED832DE0 + 48 * (unint64_t)qword_1ED832DE8 > a1)
    {
      v5 = a1 - qword_1ED832DE0;
      sub_1C62A1054(v3);
      return qword_1ED832DE0 + v5;
    }
    else
    {
      sub_1C62A1054(v3);
    }
  }
  return a1;
}

void sub_1C57504D0(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  _DWORD *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unint64_t v16;

  v16 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v16);
  v4 = v3;
  v5 = *(_DWORD **)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v6)
  {
    v7 = v3 + 32;
    v8 = 48 * v6;
    v9 = v5 + 8;
    do
    {
      *((_DWORD *)v7 - 8) = *(v9 - 8);
      v10 = *(_DWORD **)v9;
      if (*(_QWORD *)v9)
      {
        if (v9 - 6 == v10)
        {
          *(_QWORD *)v7 = v7 - 24;
          (*(void (**)(_QWORD))(**(_QWORD **)v9 + 24))(*(_QWORD *)v9);
        }
        else
        {
          *(_QWORD *)v7 = v10;
          *(_QWORD *)v9 = 0;
        }
      }
      else
      {
        *(_QWORD *)v7 = 0;
      }
      *((_DWORD *)v7 + 2) = v9[2];
      v7 += 48;
      v9 += 12;
      v8 -= 48;
    }
    while (v8);
    v5 = *(_DWORD **)a1;
    v11 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v11)
    {
      v12 = 12 * v11;
      while (1)
      {
        v13 = *(_QWORD **)&v5[v12 - 4];
        if (&v5[v12 - 10] == (_DWORD *)v13)
          break;
        if (v13)
        {
          v14 = 5;
LABEL_15:
          (*(void (**)(void))(*v13 + 8 * v14))();
        }
        v12 -= 12;
        if (!(v12 * 4))
        {
          v5 = *(_DWORD **)a1;
          goto LABEL_18;
        }
      }
      v13 = &v5[v12 - 10];
      v14 = 4;
      goto LABEL_15;
    }
  }
LABEL_18:
  v15 = v16;
  if (v5 != (_DWORD *)(a1 + 16))
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v15;
}

uint64_t sub_1C5750608()
{
  __int128 v1;
  int v2;
  int *v3;
  int v4;
  __n128 v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  LOBYTE(v2) = 0;
  *(_QWORD *)&v1 = &v2;
  LODWORD(v3) = 1;
  v4 = 1;
  v5.n128_u64[0] = (unint64_t)"Run Partial inlinining pass";
  v5.n128_u64[1] = 27;
  sub_1C62A06E4((char **)&v1, &v3, &v4, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::RunPartialInlining, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Run GVN instead of Early CSE after vectorization passes";
  v5.n128_u64[1] = 55;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80E8A8, "use-gvn-after-vectorization", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80E8A8, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Run cleanup optimization passes after vectorization.";
  v5.n128_u64[1] = 52;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::ExtraVectorizerPasses, "extra-vectorizer-passes", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::ExtraVectorizerPasses, &dword_1C475E000);
  LODWORD(v1) = 1;
  v5.n128_u64[0] = (unint64_t)"Run the loop rerolling pass";
  v5.n128_u64[1] = 27;
  sub_1C61B2D38((uint64_t)&unk_1ED80E968, "reroll-loops", &v1, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80E968, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Run the NewGVN pass";
  v5.n128_u64[1] = 19;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::RunNewGVN, "enable-newgvn", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::RunNewGVN, &dword_1C475E000);
  v4 = 0;
  v3 = &v4;
  v2 = 1;
  *(_QWORD *)&v1 = "Enable the new, experimental CFL alias analysis";
  *((_QWORD *)&v1 + 1) = 47;
  v5.n128_u64[0] = (unint64_t)&v6;
  v6 = "none";
  v7 = 4;
  v8 = 0;
  v9 = "Disable CFL-AA";
  v10 = 14;
  v11 = "steens";
  v12 = 6;
  v13 = 1;
  v14 = "Enable unification-based CFL-AA";
  v15 = 31;
  v16 = "anders";
  v17 = 6;
  v18 = 2;
  v19 = "Enable inclusion-based CFL-AA";
  v20 = 29;
  v21 = "both";
  v22 = 4;
  v23 = 3;
  v24 = "Enable both variants of CFL-AA";
  v25 = 30;
  v5.n128_u64[1] = 0x400000004;
  sub_1C62A082C(&v3, &v2, &v1, (uint64_t *)&v5);
  if ((const char **)v5.n128_u64[0] != &v6)
    free((void *)v5.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C62198F0, &qword_1ED80EDE8, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the experimental LoopInterchange Pass";
  v5.n128_u64[1] = 44;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::EnableLoopInterchange, "enable-loopinterchange", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableLoopInterchange, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable Unroll And Jam Pass";
  v5.n128_u64[1] = 26;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::EnableUnrollAndJam, "enable-unroll-and-jam", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableUnrollAndJam, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the LoopFlatten Pass";
  v5.n128_u64[1] = 27;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::EnableLoopFlatten, "enable-loop-flatten", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableLoopFlatten, &dword_1C475E000);
  v5.n128_u64[0] = (unint64_t)"Enable DFA jump threading.";
  v5.n128_u64[1] = 26;
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  sub_1C62A098C(&v5, (char **)&v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableDFAJumpThreading, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable preparation for ThinLTO.";
  v5.n128_u64[1] = 31;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80EA28, "prepare-for-thinlto", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80EA28, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable performing ThinLTO.";
  v5.n128_u64[1] = 26;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80EAE8, "perform-thinlto", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80EAE8, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable hot-cold splitting pass";
  v5.n128_u64[1] = 30;
  sub_1C62A0A30((char **)&v1, &v3, (__int128 *)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableHotColdSplit, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable ir outliner pass";
  v5.n128_u64[1] = 23;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::EnableIROutliner, "ir-outliner", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableIROutliner, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the experimental Loop Versioning LICM pass";
  v5.n128_u64[1] = 49;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80EBA8, "enable-loop-versioning-licm", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80EBA8, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Disable pre-instrumentation inliner";
  v5.n128_u64[1] = 35;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::DisablePreInliner, "disable-preinline", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::DisablePreInliner, &dword_1C475E000);
  v2 = 1;
  LODWORD(v3) = 1;
  v4 = 75;
  *(_QWORD *)&v1 = &v4;
  v5.n128_u64[0] = (unint64_t)"Control the amount of inlining in pre-instrumentation inliner (default = 75)";
  v5.n128_u64[1] = 76;
  sub_1C62A0B08(&v3, (int **)&v1, &v2, &v5);
  __cxa_atexit((void (*)(void *))sub_1C4A0083C, &llvm::PreInlineThreshold, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the GVN hoisting pass (default = off)";
  v5.n128_u64[1] = 44;
  sub_1C62A0C48((char **)&v1, &v3, (__int128 *)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableGVNHoist, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Disable shrink-wrap library calls";
  v5.n128_u64[1] = 33;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80EC68, "disable-libcalls-shrinkwrap", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80EC68, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the simple loop unswitch pass. Also enables independent cleanup passes integ"
                                     "rated into the loop pass manager pipeline.";
  v5.n128_u64[1] = 125;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED80ED28, "enable-simple-loop-unswitch", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED80ED28, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable the GVN sinking pass (default = off)";
  v5.n128_u64[1] = 43;
  sub_1C62A0D20((char **)&v1, &v3, (__int128 *)&v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableGVNSink, &dword_1C475E000);
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable control height reduction optimization (CHR)";
  v5.n128_u64[1] = 50;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::EnableCHR, "enable-chr", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableCHR, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Indicate the sample profile being used is flattened, i.e., no inline hierachy exist"
                                     "s in the profile. ";
  v5.n128_u64[1] = 101;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::FlattenedProfileUsed, "flattened-profile-used", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::FlattenedProfileUsed, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable order file instrumentation (default = off)";
  v5.n128_u64[1] = 49;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::EnableOrderFileInstrumentation, "enable-order-file-instrumentation", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableOrderFileInstrumentation, &dword_1C475E000);
  LOBYTE(v4) = 1;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable lowering of the matrix intrinsics";
  v5.n128_u64[1] = 40;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::EnableMatrix, "enable-matrix", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableMatrix, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable pass to eliminate conditions based on linear constraints.";
  v5.n128_u64[1] = 64;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::EnableConstraintElimination, "enable-constraint-elimination", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableConstraintElimination, &dword_1C475E000);
  LOBYTE(v4) = 0;
  *(_QWORD *)&v1 = &v4;
  LODWORD(v3) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable Function Specialization pass";
  v5.n128_u64[1] = 35;
  sub_1C498EDF8((llvm::cl::Option *)&llvm::EnableFunctionSpecialization, "enable-function-specialization", (_BYTE **)&v1, &v3, &v5);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &llvm::EnableFunctionSpecialization, &dword_1C475E000);
  v4 = 1;
  v2 = 0;
  v3 = &v2;
  *(_QWORD *)&v1 = "Enable the attributor inter-procedural deduction pass.";
  *((_QWORD *)&v1 + 1) = 54;
  v5.n128_u64[0] = (unint64_t)&v6;
  v6 = "all";
  v7 = 3;
  v8 = 3;
  v9 = "enable all attributor runs";
  v10 = 26;
  v11 = "module";
  v12 = 6;
  v13 = 1;
  v14 = "enable module-wide attributor runs";
  v15 = 34;
  v16 = "cgscc";
  v17 = 5;
  v18 = 2;
  v19 = "enable call graph SCC attributor runs";
  v20 = 37;
  v21 = "none";
  v22 = 4;
  v23 = 0;
  v24 = "disable attributor runs";
  v25 = 23;
  v5.n128_u64[1] = 0x400000004;
  sub_1C62A0DF8(&v4, &v3, &v1, (uint64_t)&v5);
  if ((const char **)v5.n128_u64[0] != &v6)
    free((void *)v5.n128_u64[0]);
  return __cxa_atexit((void (*)(void *))sub_1C629E7A4, &llvm::AttributorRun, &dword_1C475E000);
}

void llvm::initializePruneEHPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED832F90);
  if (v2 != -1)
  {
    v5[0] = sub_1C575109C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED832F90, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C575109C(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeCallGraphWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Remove unused exception handling info";
  *(_QWORD *)(v3 + 8) = 37;
  *(_QWORD *)(v3 + 16) = "prune-eh";
  *(_QWORD *)(v3 + 24) = 8;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F3310;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C57511F8;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C5751130(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F3310;
  *(_DWORD *)(a1 + 24) = 3;
  *(_QWORD *)a1 = &off_1E817C448;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED832F90);
  if (v3 != -1)
  {
    v7[0] = sub_1C575109C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED832F90, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C57511F8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5751130(v0);
}

void sub_1C5751224(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5751248(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  llvm **v11;
  llvm **v12;
  llvm *v13;
  llvm::GlobalValue **v14;
  llvm::GlobalValue **v15;
  int v16;
  int v17;
  llvm::GlobalValue *v18;
  int v19;
  BOOL v20;
  llvm::GlobalValue *Section;
  uint64_t v22;
  llvm::Module *v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  char v27;
  char *v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  char *v31;
  char *v32;
  _QWORD *v33;
  llvm::Instruction *v34;
  llvm::Instruction *v35;
  int mayThrow;
  _QWORD *i;
  unsigned __int8 *v38;
  int v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v51;
  _QWORD *v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  BOOL v56;
  llvm **v57;
  llvm **v58;
  llvm *v59;
  uint64_t v60;
  uint64_t v61;
  llvm *v62;
  int v63;
  llvm::GlobalValue **v64;
  llvm::GlobalValue **v65;
  int v66;
  char *v67;
  int v68;
  _QWORD v69[2];
  unsigned int v70;
  void *__p;
  llvm **v72;
  uint64_t v73;
  _QWORD v74[3];
  int v75;
  _QWORD v76[18];
  _QWORD v77[18];
  _QWORD v78[18];
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  if ((llvm::CallGraphSCCPass::skipSCC(a1, (uint64_t ****)a2) & 1) != 0)
  {
    LOBYTE(v4) = 0;
    return v4 & 1;
  }
  v69[0] = 0;
  v69[1] = 0;
  v70 = 0;
  v72 = 0;
  v73 = 0;
  __p = 0;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  while (v6 != v7)
  {
    v74[0] = *(_QWORD *)(*(_QWORD *)v6 + 8);
    if (v74[0])
      sub_1C567D3D8(v69, v74);
    v6 += 8;
  }
  v8 = **(void ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::CallGraphWrapperPass::ID);
  LOBYTE(v4) = 0;
  v10 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::CallGraphWrapperPass::ID)+ 32);
  v74[0] = v76;
  v74[1] = v76;
  v74[2] = 16;
  v76[16] = v77;
  v75 = 0;
  v76[17] = 0x1000000000;
  v77[16] = v78;
  v77[17] = 0x1000000000;
  v79 = 0u;
  v80 = 0u;
  v81 = 0;
  v78[16] = v10;
  v78[17] = a2;
  v11 = (llvm **)__p;
  v12 = v72;
  if (__p == v72)
    goto LABEL_148;
  v4 = 0;
  do
  {
    v13 = *v11++;
    v4 |= sub_1C57518A4(v13, (llvm::CallGraphUpdater *)v74);
  }
  while (v11 != v12);
  v14 = (llvm::GlobalValue **)__p;
  v15 = v72;
  if (__p == v72)
    goto LABEL_148;
  v63 = v4;
  v16 = 0;
  v17 = 0;
  v64 = v72;
  while (2)
  {
    v18 = *v14;
    v19 = *((unsigned __int8 *)*v14 + 16);
    if (*v14)
      v20 = v19 == 3;
    else
      v20 = 0;
    if (v20)
    {
      if ((*((_DWORD *)v18 + 5) & 0x7FFFFFF) == 0)
        goto LABEL_44;
    }
    else if (!*((_BYTE *)*v14 + 16)
           && *((llvm::GlobalValue **)v18 + 9) == (llvm::GlobalValue *)((char *)v18 + 72)
           && (*((_BYTE *)v18 + 34) & 0x80) == 0)
    {
      goto LABEL_44;
    }
    if (((1 << (*((_DWORD *)v18 + 8) & 0xF)) & 0x7D5) == 0
      || v19 == 3
      && (Section = llvm::GlobalValue::getSection(*v14), v22 == 12)
      && (*(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
        ? (v56 = *((unsigned int *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
        : (v56 = 0),
          v56)
      || (*((_DWORD *)v18 + 8) & 0xFu) - 5 >= 4 && ((1 << (*((_DWORD *)v18 + 8) & 0xF)) & 0x614) != 0
      || (v23 = (llvm::Module *)*((_QWORD *)v18 + 5)) != 0
      && llvm::Module::getSemanticInterposition(v23)
      && (*((_BYTE *)v18 + 33) & 0x40) == 0)
    {
LABEL_44:
      v26 = *((_QWORD *)v18 + 14);
      if (v26)
      {
        v27 = *(_BYTE *)(v26 + 16);
        v16 |= (v27 & 0x20) == 0;
        LODWORD(v26) = v27 & 1;
      }
      else
      {
        v16 = 1;
      }
      v17 |= v26 ^ 1;
      goto LABEL_122;
    }
    if ((v16 & 1) != 0)
    {
      v68 = 0;
      if ((v17 & 1) != 0)
        goto LABEL_41;
    }
    else
    {
      v24 = *((_QWORD *)v18 + 14);
      if (v24)
        LODWORD(v24) = (*(unsigned __int8 *)(v24 + 16) >> 5) & 1;
      v68 = v24 ^ 1;
      if ((v17 & 1) != 0)
        goto LABEL_41;
    }
    v25 = (_BYTE *)*((_QWORD *)v18 + 14);
    if (v25)
    {
      if ((v25[16] & 1) != 0)
      {
LABEL_41:
        if (!v68)
          goto LABEL_122;
        LOBYTE(v25) = 0;
        v66 = 0;
        goto LABEL_50;
      }
      if ((v25[14] & 2) != 0)
        LODWORD(v25) = (v25[15] >> 3) & 1;
      else
        LOBYTE(v25) = 0;
    }
    v66 = 1;
LABEL_50:
    v65 = v14;
    v28 = (char *)*((_QWORD *)v18 + 10);
    v67 = (char *)v18 + 72;
    if (v28 == (char *)v18 + 72)
      goto LABEL_118;
    v29 = v68 ^ 1;
    v30 = v25 ^ 1;
    do
    {
      if (v28)
        v31 = v28 - 24;
      else
        v31 = 0;
      v33 = v31 + 40;
      v32 = (char *)*((_QWORD *)v31 + 5);
      if (v32 == v31 + 40)
      {
        v35 = 0;
      }
      else
      {
        if (v32)
          v34 = (llvm::Instruction *)(v32 - 24);
        else
          v34 = 0;
        if (*((unsigned __int8 *)v34 + 16) - 29 >= 0xB)
          v35 = 0;
        else
          v35 = v34;
      }
      if (v68)
      {
        mayThrow = llvm::Instruction::mayThrow(v35);
        if (((mayThrow | v66 ^ 1) & 1) == 0)
          goto LABEL_67;
        v16 |= mayThrow;
      }
      else if (v66)
      {
LABEL_67:
        v17 |= *((_BYTE *)v35 + 16) == 29;
      }
      for (i = (_QWORD *)*((_QWORD *)v31 + 6); i != v33; i = (_QWORD *)i[1])
      {
        v38 = i ? (unsigned __int8 *)(i - 3) : 0;
        if (((v29 | v16) & 1) != 0 && ((v30 | v17) & 1) != 0)
          break;
        if (((v29 | v16) & 1) == 0)
        {
          if (llvm::Instruction::mayThrow((llvm::Instruction *)v38))
          {
            v39 = v38[16];
            if (v39 == 84)
              v40 = v38;
            else
              v40 = 0;
            v16 = 1;
            if (i)
            {
              if (v39 == 84)
              {
                v41 = *((_QWORD *)v40 - 4);
                if (v41)
                {
                  if (!*(_BYTE *)(v41 + 16) && *(_QWORD *)(v41 + 24) == *((_QWORD *)v40 + 9))
                  {
                    if (v70)
                    {
                      v42 = v70 - 1;
                      v43 = (v70 - 1) & ((v41 >> 4) ^ (v41 >> 9));
                      v44 = (_QWORD *)(v69[0] + 8 * v43);
                      v45 = *v44;
                      if (v41 == *v44)
                      {
                        v46 = 0;
                        goto LABEL_100;
                      }
                      v52 = 0;
                      v53 = 1;
                      while (v45 != -4096)
                      {
                        v46 = 0;
                        if (v52)
                          v54 = 0;
                        else
                          v54 = v45 == -8192;
                        if (v54)
                          v52 = v44;
                        v55 = v43 + v53++;
                        v43 = v55 & v42;
                        v44 = (_QWORD *)(v69[0] + 8 * (v55 & v42));
                        v45 = *v44;
                        if (v41 == *v44)
                          goto LABEL_100;
                      }
                      if (v52)
                        v44 = v52;
                    }
                    else
                    {
                      v44 = 0;
                    }
                    v46 = 1;
LABEL_100:
                    if (v44 == (_QWORD *)(v69[0] + 8 * v70))
                      v16 = 1;
                    else
                      v16 = v46;
                    if (((v30 | v17) & 1) != 0)
                      continue;
                    goto LABEL_90;
                  }
                }
              }
            }
          }
          else
          {
            v16 = 0;
          }
        }
        if (((v30 | v17) & 1) != 0)
          continue;
LABEL_90:
        v47 = v38[16] - 33;
        v48 = v47 > 0x33;
        v49 = (1 << v47) & 0x8000000000041;
        v17 = 0;
        if (!v48 && v49 != 0)
        {
          v51 = *(i - 7);
          if (v51)
          {
            if (*(_BYTE *)(v51 + 16) == 24)
              v17 = *(unsigned __int8 *)(v51 + 80) != 0;
          }
        }
      }
      v28 = (char *)*((_QWORD *)v28 + 1);
    }
    while (v28 != v67);
LABEL_118:
    if ((v16 & 1) == 0)
    {
      v15 = v64;
      v14 = v65;
      goto LABEL_122;
    }
    v15 = v64;
    v14 = v65;
    if ((v17 & 1) == 0)
    {
LABEL_122:
      if (++v14 == v15)
        goto LABEL_132;
      continue;
    }
    break;
  }
  LOBYTE(v17) = 1;
  LOBYTE(v16) = 1;
LABEL_132:
  v57 = (llvm **)__p;
  v58 = v72;
  if ((v16 & 1) != 0 && (v17 & 1) != 0)
  {
    v4 = v63;
    goto LABEL_147;
  }
  v4 = v63;
  if (__p != v72)
  {
    do
    {
      v59 = *v57;
      if ((v16 & 1) == 0)
      {
        v60 = *((_QWORD *)v59 + 14);
        if (!v60 || (*(_BYTE *)(v60 + 16) & 0x20) == 0)
        {
          *((_QWORD *)v59 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v59 + 14, **(uint64_t ***)v59, -1, 37);
          v4 = 1;
        }
      }
      if ((v17 & 1) == 0)
      {
        v61 = *((_QWORD *)v59 + 14);
        if (!v61 || (*(_BYTE *)(v61 + 16) & 1) == 0)
        {
          *((_QWORD *)v59 + 14) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v59 + 14, **(uint64_t ***)v59, -1, 32);
          v4 = 1;
        }
      }
      ++v57;
    }
    while (v57 != v58);
    v57 = (llvm **)__p;
    v58 = v72;
LABEL_147:
    while (v57 != v58)
    {
      v62 = *v57++;
      v4 |= sub_1C57518A4(v62, (llvm::CallGraphUpdater *)v74);
    }
  }
LABEL_148:
  sub_1C62878B8((llvm::CallGraphUpdater *)v74);
  if (__p)
  {
    v72 = (llvm **)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v69[0], 8);
  return v4 & 1;
}

uint64_t sub_1C57518A4(llvm *this, llvm::CallGraphUpdater *a2)
{
  char *v2;
  char *v3;
  char v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::MemorySSAUpdater *v29;
  char *v30;
  uint64_t v31;
  llvm::DomTreeUpdater *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::MemorySSAUpdater *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v42;
  llvm::ValueSymbolTable *v43;
  char v45[32];
  __int16 v46;

  v2 = (char *)this + 72;
  v3 = (char *)*((_QWORD *)this + 10);
  if (v3 == (char *)this + 72)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    do
    {
      if (v3)
        v7 = (uint64_t *)(v3 - 24);
      else
        v7 = 0;
      v9 = v7 + 5;
      v8 = (uint64_t *)v7[5];
      if (v8 != v7 + 5)
      {
        v10 = v8 ? (uint64_t)(v8 - 3) : 0;
        v11 = *(unsigned __int8 *)(v10 + 16) - 40;
        v12 = v11 >= 0xFFFFFFF5 ? v10 : 0;
        if (v8)
        {
          if (*(_BYTE *)(v12 + 16) == 33
            && v11 >= 0xFFFFFFF5
            && ((v14 = *(_QWORD *)(v12 + 64)) != 0 && (*(_BYTE *)(v14 + 16) & 0x20) != 0
             || llvm::CallBase::hasFnAttrOnCalledFunction(v12, 37))
            && llvm::canSimplifyInvokeNoUnwind(this, a2))
          {
            v33 = *(_QWORD **)(v12 - 64);
            llvm::removeUnwindEdge((llvm *)v7, 0, v32);
            v37 = v33[1];
            if (v37)
            {
              while (1)
              {
                v38 = *(_QWORD *)(v37 + 24);
                v39 = *(unsigned __int8 *)(v38 + 16);
                v40 = v38 && v39 >= 0x1C;
                if (v40 && v39 - 29 < 0xB)
                  break;
                v37 = *(_QWORD *)(v37 + 8);
                if (!v37)
                  goto LABEL_56;
              }
            }
            else
            {
LABEL_56:
              sub_1C5751B4C(v33, a2, v34, v35, v36);
            }
            v6 = 1;
          }
        }
      }
      v15 = (uint64_t *)v7[6];
      while (v15 != v9)
      {
        v16 = v15;
        v15 = (uint64_t *)v15[1];
        v17 = (uint64_t)(v16 - 3);
        if (!v16)
          v17 = 0;
        v18 = *(unsigned __int8 *)(v17 + 16);
        if (v18 == 84)
          v19 = v17;
        else
          v19 = 0;
        if (v16
          && v18 == 84
          && ((v20 = *(_QWORD *)(v19 + 64)) != 0 && (*(_BYTE *)(v20 + 16) & 1) != 0
           || llvm::CallBase::hasFnAttrOnCalledFunction(v19, 32))
          && (*(_WORD *)(v19 + 18) & 3) != 2)
        {
          v21 = v15 - 3;
          if (!v15)
            v21 = 0;
          if (*((_BYTE *)v21 + 16) != 35)
          {
            v46 = 257;
            v22 = (_QWORD *)llvm::BasicBlock::splitBasicBlock(v7, v15, (uint64_t)v45, 0);
            v23 = v7[5];
            if (v23)
              v24 = v23 - 24;
            else
              v24 = 0;
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v7 + 5), (uint64_t ***)v24);
            v25 = *(_QWORD *)(v24 + 24);
            v26 = *(_QWORD **)(v24 + 32);
            *v26 = v25;
            *(_QWORD *)(v25 + 8) = v26;
            *(_QWORD *)(v24 + 24) = 0;
            *(_QWORD *)(v24 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v24);
            v30 = (char *)operator new(0x40uLL);
            *((_DWORD *)v30 + 5) &= 0x38000000u;
            *(_QWORD *)v30 = **(_QWORD **)*v7 + 1576;
            *((_QWORD *)v30 + 1) = 0;
            v30[16] = 35;
            *(_OWORD *)(v30 + 44) = 0u;
            *(_OWORD *)(v30 + 33) = 0u;
            *(_OWORD *)(v30 + 17) = 0u;
            *((_QWORD *)v30 + 5) = v7;
            *((_WORD *)v7 + 9) &= ~0x8000u;
            if ((v30[23] & 0x10) != 0)
            {
              v42 = v7[7];
              if (v42)
              {
                v43 = *(llvm::ValueSymbolTable **)(v42 + 104);
                if (v43)
                  llvm::ValueSymbolTable::reinsertValue(v43, (llvm::Value *)v30);
              }
            }
            v31 = *v9;
            *((_QWORD *)v30 + 3) = *v9;
            *((_QWORD *)v30 + 4) = v9;
            *(_QWORD *)(v31 + 8) = v30 + 24;
            *v9 = (uint64_t)(v30 + 24);
            sub_1C5751B4C(v22, a2, v27, v28, v29);
            v6 = 1;
            break;
          }
        }
      }
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
  return v6 & 1;
}

void sub_1C5751B4C(_QWORD *a1, llvm::CallGraphUpdater *a2, uint64_t a3, uint64_t a4, llvm::MemorySSAUpdater *a5)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  llvm::CallBase *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  llvm::UndefValue *v20;
  _QWORD *v21;
  uint64_t v22;
  llvm::Instruction *v23;
  int v24;
  int v25;
  llvm::Instruction *v26;
  int v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  llvm *v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  _BYTE *v35;
  uint64_t v36;

  v6 = a1 + 5;
  v7 = (_QWORD *)a1[6];
  if (a1 + 5 == v7)
  {
LABEL_24:
    v21 = (_QWORD *)*v6;
    if ((_QWORD *)*v6 == v6)
    {
      v22 = 0;
      v26 = 0;
      v28 = 0;
    }
    else
    {
      v22 = (uint64_t)(v21 - 3);
      if (v21)
        v23 = (llvm::Instruction *)(v21 - 3);
      else
        v23 = 0;
      v24 = *((unsigned __int8 *)v23 + 16);
      v25 = v24 - 29;
      if ((v24 - 29) >= 0xB)
        v26 = 0;
      else
        v26 = v23;
      if (v24 != 30)
      {
        v27 = 0;
        switch(v25)
        {
          case 0:
          case 5:
          case 6:
            goto LABEL_35;
          case 1:
            __break(1u);
            goto LABEL_55;
          case 2:
            v27 = (*((_DWORD *)v23 + 5) >> 1) & 0x3FFFFFF;
            goto LABEL_35;
          case 3:
          case 9:
LABEL_55:
            v27 = (*((_DWORD *)v23 + 5) & 0x7FFFFFF) - 1;
            goto LABEL_35;
          case 4:
            v27 = 2;
            goto LABEL_35;
          case 7:
            v27 = *((_WORD *)v23 + 9) & 1;
            goto LABEL_35;
          case 8:
            v27 = 1;
            goto LABEL_35;
          case 10:
            v27 = *((_DWORD *)v23 + 20) + 1;
            goto LABEL_35;
          default:
            v22 = 0;
            v28 = 0;
            goto LABEL_46;
        }
      }
      if ((*((_DWORD *)v23 + 5) & 0x7FFFFFF) == 3)
        v27 = 2;
      else
        v27 = 1;
LABEL_35:
      v28 = v27;
    }
LABEL_46:
    __p = 0;
    v35 = 0;
    v36 = 0;
    sub_1C5751DF8(&__p, v26, 0, v22, v28, v28);
    if (((v35 - (_BYTE *)__p) & 0x7FFFFFFF8) != 0)
    {
      v32 = 0;
      v33 = ((unint64_t)(v35 - (_BYTE *)__p) >> 3);
      do
        llvm::BasicBlock::removePredecessor(*((llvm::BasicBlock **)__p + v32++), (llvm::BasicBlock *)a1, 0);
      while (v33 != v32);
    }
    llvm::BasicBlock::eraseFromParent((llvm::BasicBlock *)a1);
    if (__p)
    {
      v35 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v9 = a1 + 5;
    while (1)
    {
      v9 = (_QWORD *)*v9;
      v10 = (llvm::CallBase *)(v9 - 3);
      v11 = v9 ? (unsigned __int8 *)(v9 - 3) : 0;
      if (*(_BYTE *)(*(_QWORD *)v11 + 8) == 12)
        break;
      v12 = v11[16] - 33;
      v13 = v12 > 0x33;
      v14 = (1 << v12) & 0x8000000000041;
      if (!v13 && v14 != 0)
      {
        if ((v16 = *(v9 - 7)) == 0
          || *(_BYTE *)(v16 + 16)
          || *(_QWORD *)(v16 + 24) != v9[6]
          || ((v17 = *(_DWORD *)(v16 + 36) - 124, v13 = v17 > 4, v18 = (1 << v17) & 0x19, !v13)
            ? (v19 = v18 == 0)
            : (v19 = 1),
              !v19 || (*(_BYTE *)(v16 + 33) & 0x20) == 0))
        {
          llvm::CallGraphUpdater::removeCallSite(a2, v10);
        }
      }
      if (*((_QWORD *)v11 + 1))
      {
        v20 = llvm::UndefValue::get(*(llvm::UndefValue **)v11, v10);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v11, v20, (llvm::Value *)1);
      }
      if (v9 == v7)
        goto LABEL_24;
    }
    if (*((unsigned __int8 *)v9 - 8) - 29 >= 0xB)
    {
      v29 = v9[1];
      if (v29)
        v30 = v29 == v9[2] + 40;
      else
        v30 = 1;
      if (v30)
        v31 = 0;
      else
        v31 = (llvm *)(v29 - 24);
      llvm::changeToUnreachable(v31, 0, 0, 0, a5);
    }
  }
}

_QWORD *sub_1C5751DF8(_QWORD *result, llvm::Instruction *a2, unsigned int a3, uint64_t a4, int a5, unint64_t a6)
{
  _QWORD *v10;
  _QWORD *v11;

  if (a6)
  {
    if (a6 >> 61)
      abort();
    v10 = result;
    result = operator new(8 * a6);
    v11 = result;
    *v10 = result;
    v10[1] = result;
    for (v10[2] = &result[a6]; a5 != a3; ++a3)
    {
      result = (_QWORD *)llvm::Instruction::getSuccessor(a2, a3);
      *v11++ = result;
    }
    v10[1] = v11;
  }
  return result;
}

_QWORD *llvm::ContextTrieNode::getHottestChildContext(_QWORD *a1, _DWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  v4 = (_QWORD *)*a1;
  v2 = a1 + 1;
  v3 = v4;
  if (v4 == v2)
    return 0;
  v5 = 0;
  v6 = 0;
  do
  {
    if (*((_DWORD *)v3 + 26) == *a2 && *((_DWORD *)v3 + 27) == a2[1])
    {
      v7 = v3[11];
      if (v7)
      {
        v8 = *(_QWORD *)(v7 + 56);
        if (v8 > v6)
        {
          v6 = v8;
          v5 = v3 + 5;
        }
      }
    }
    v9 = (_QWORD *)v3[1];
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v3[2];
        v11 = *v10 == (_QWORD)v3;
        v3 = v10;
      }
      while (!v11);
    }
    v3 = v10;
  }
  while (v10 != v2);
  return v5;
}

uint64_t **llvm::ContextTrieNode::moveToChildContext(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t **v12;
  __int128 v13;
  __int128 v14;
  uint64_t **v15;
  uint64_t i;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  unint64_t v25;
  uint64_t **v26;
  _OWORD v27[2];
  __int128 v28;
  uint64_t v29;
  uint64_t *v30;

  v10 = (uint64_t *)llvm::sampleprof::FunctionSamples::getCallSiteHash(*(void **)(a3 + 32), *(_QWORD *)(a3 + 40), a2);
  v29 = *(_QWORD *)(a3 + 64);
  v30 = v10;
  v11 = *(_QWORD *)(a3 + 24);
  v12 = sub_1C5753EDC(a1, (unint64_t)v10, &v30);
  if (v12 + 5 != (uint64_t **)a3)
    sub_1C57536E4(v12 + 5, *(_QWORD **)a3, (_QWORD *)(a3 + 8));
  v13 = *(_OWORD *)(a3 + 24);
  v14 = *(_OWORD *)(a3 + 56);
  *((_OWORD *)v12 + 5) = *(_OWORD *)(a3 + 40);
  *((_OWORD *)v12 + 6) = v14;
  *((_OWORD *)v12 + 4) = v13;
  v15 = sub_1C5753EDC(a1, (unint64_t)v10, &v30);
  v15[13] = *(uint64_t **)a2;
  v28 = 0u;
  memset(v27, 0, sizeof(v27));
  v15[8] = (uint64_t *)a1;
  v26 = v15 + 5;
  sub_1C48410F0(v27, &v26);
  for (i = *((_QWORD *)&v28 + 1); *((_QWORD *)&v28 + 1); i = *((_QWORD *)&v28 + 1))
  {
    v17 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v27[0] + 1) + (((unint64_t)v28 >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * (v28 & 0x1FF));
    *(_QWORD *)&v28 = v28 + 1;
    *((_QWORD *)&v28 + 1) = i - 1;
    if ((unint64_t)v28 >= 0x400)
    {
      operator delete(**((void ***)&v27[0] + 1));
      *((_QWORD *)&v27[0] + 1) += 8;
      *(_QWORD *)&v28 = v28 - 512;
    }
    v18 = v17[6];
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 40) - a4;
      *(_QWORD *)(v18 + 32) += 24 * a4;
      *(_QWORD *)(v18 + 40) = v19;
      *(_DWORD *)(v18 + 48) |= 2u;
    }
    v20 = (_QWORD *)*v17;
    if ((_QWORD *)*v17 != v17 + 1)
    {
      do
      {
        v26 = (uint64_t **)(v20 + 5);
        v20[8] = v17;
        sub_1C48410F0(v27, &v26);
        v21 = (_QWORD *)v20[1];
        if (v21)
        {
          do
          {
            v22 = v21;
            v21 = (_QWORD *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            v22 = (_QWORD *)v20[2];
            v23 = *v22 == (_QWORD)v20;
            v20 = v22;
          }
          while (!v23);
        }
        v20 = v22;
      }
      while (v22 != v17 + 1);
    }
  }
  if (a5)
  {
    v25 = llvm::sampleprof::FunctionSamples::getCallSiteHash(v15[9], (size_t)v15[10], (unsigned int *)&v29);
    sub_1C62A1B40(v11, v25);
  }
  sub_1C484143C((uint64_t)v27);
  return v15 + 5;
}

uint64_t llvm::ContextTrieNode::getFuncName(llvm::ContextTrieNode *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t llvm::ContextTrieNode::getParentContext(llvm::ContextTrieNode *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t llvm::ContextTrieNode::setParentContext(uint64_t this, llvm::ContextTrieNode *a2)
{
  *(_QWORD *)(this + 24) = a2;
  return this;
}

void llvm::ContextTrieNode::removeChildContext(uint64_t a1, unsigned int *a2, void *__src, size_t __len)
{
  unint64_t v5;

  v5 = llvm::sampleprof::FunctionSamples::getCallSiteHash(__src, __len, a2);
  sub_1C62A1B40(a1, v5);
}

uint64_t llvm::ContextTrieNode::setFunctionSamples(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = a2;
  return result;
}

uint64_t llvm::ContextTrieNode::getFunctionSize(llvm::ContextTrieNode *this)
{
  return *((_QWORD *)this + 7);
}

uint64_t llvm::ContextTrieNode::addFunctionSize(uint64_t this, int a2)
{
  int v2;

  v2 = *(unsigned __int8 *)(this + 60);
  if (*(_BYTE *)(this + 60))
    v2 = *(_DWORD *)(this + 56);
  else
    *(_BYTE *)(this + 60) = 1;
  *(_DWORD *)(this + 56) = v2 + a2;
  return this;
}

llvm::raw_ostream *llvm::ContextTrieNode::dumpNode(size_t *this)
{
  llvm *v2;
  llvm::raw_ostream *v3;
  uint64_t v4;
  _BYTE *v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  _BYTE *v9;
  _QWORD *v10;
  llvm::raw_ostream *result;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  llvm *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  const void *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  BOOL v24;

  v2 = llvm::dbgs((llvm *)this);
  v3 = v2;
  v4 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v4) > 5)
  {
    *(_WORD *)(v4 + 4) = 8250;
    *(_DWORD *)v4 = 1701080910;
    v5 = (_BYTE *)(*((_QWORD *)v2 + 4) + 6);
    *((_QWORD *)v3 + 4) = v5;
  }
  else
  {
    v3 = llvm::raw_ostream::write(v2, "Node: ", 6uLL);
    v5 = (_BYTE *)*((_QWORD *)v3 + 4);
  }
  v6 = (const void *)this[4];
  v7 = this[5];
  if (v7 <= *((_QWORD *)v3 + 3) - (_QWORD)v5)
  {
    if (v7)
    {
      memcpy(v5, v6, this[5]);
      v5 = (_BYTE *)(*((_QWORD *)v3 + 4) + v7);
      *((_QWORD *)v3 + 4) = v5;
    }
  }
  else
  {
    v3 = llvm::raw_ostream::write(v3, (const char *)v6, this[5]);
    v5 = (_BYTE *)*((_QWORD *)v3 + 4);
  }
  if (*((_BYTE **)v3 + 3) == v5)
  {
    v3 = llvm::raw_ostream::write(v3, "\n", 1uLL);
    v8 = *((_QWORD *)v3 + 4);
  }
  else
  {
    *v5 = 10;
    v8 = *((_QWORD *)v3 + 4) + 1;
    *((_QWORD *)v3 + 4) = v8;
  }
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v8) > 0xB)
  {
    *(_DWORD *)(v8 + 8) = 540697972;
    *(_QWORD *)v8 = *(_QWORD *)"  Callsite: ";
    *((_QWORD *)v3 + 4) += 12;
  }
  else
  {
    v3 = llvm::raw_ostream::write(v3, "  Callsite: ", 0xCuLL);
  }
  llvm::sampleprof::LineLocation::print((llvm::sampleprof::LineLocation *)(this + 8), v3);
  v9 = (_BYTE *)*((_QWORD *)v3 + 4);
  if (*((_BYTE **)v3 + 3) == v9)
  {
    v3 = llvm::raw_ostream::write(v3, "\n", 1uLL);
    v10 = (_QWORD *)*((_QWORD *)v3 + 4);
  }
  else
  {
    *v9 = 10;
    v10 = (_QWORD *)(*((_QWORD *)v3 + 4) + 1);
    *((_QWORD *)v3 + 4) = v10;
  }
  if (*((_QWORD *)v3 + 3) - (_QWORD)v10 > 7uLL)
  {
    *v10 = 0x203A657A69532020;
    *((_QWORD *)v3 + 4) += 8;
  }
  else
  {
    v3 = llvm::raw_ostream::write(v3, "  Size: ", 8uLL);
  }
  if (*((_BYTE *)this + 60))
    result = sub_1C5E21910(v3, *((unsigned int *)this + 14), 0, 0, 0);
  else
    result = sub_1C4816AD8(v3, "None");
  v12 = (_BYTE *)*((_QWORD *)v3 + 4);
  if (*((_BYTE **)v3 + 3) == v12)
  {
    result = llvm::raw_ostream::write(v3, "\n", 1uLL);
    v3 = result;
    v13 = *((_QWORD *)result + 4);
  }
  else
  {
    *v12 = 10;
    v13 = *((_QWORD *)v3 + 4) + 1;
    *((_QWORD *)v3 + 4) = v13;
  }
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v13) > 0xB)
  {
    *(_DWORD *)(v13 + 8) = 171601509;
    *(_QWORD *)v13 = *(_QWORD *)"  Children:\n";
    *((_QWORD *)v3 + 4) += 12;
  }
  else
  {
    result = llvm::raw_ostream::write(v3, "  Children:\n", 0xCuLL);
  }
  v16 = (char *)*this;
  v14 = (char *)(this + 1);
  v15 = v16;
  if (v16 != v14)
  {
    do
    {
      v17 = llvm::dbgs(result);
      v18 = v17;
      v19 = *((_QWORD *)v17 + 4);
      if ((unint64_t)(*((_QWORD *)v17 + 3) - v19) > 9)
      {
        *(_WORD *)(v19 + 8) = 8250;
        *(_QWORD *)v19 = *(_QWORD *)"    Node: ";
        result = (llvm::raw_ostream *)(*((_QWORD *)v17 + 4) + 10);
        *((_QWORD *)v18 + 4) = result;
      }
      else
      {
        v18 = llvm::raw_ostream::write(v17, "    Node: ", 0xAuLL);
        result = (llvm::raw_ostream *)*((_QWORD *)v18 + 4);
      }
      v20 = (const void *)*((_QWORD *)v15 + 9);
      v21 = *((_QWORD *)v15 + 10);
      if (v21 <= *((_QWORD *)v18 + 3) - (_QWORD)result)
      {
        if (v21)
        {
          memcpy(result, v20, *((_QWORD *)v15 + 10));
          result = (llvm::raw_ostream *)(*((_QWORD *)v18 + 4) + v21);
          *((_QWORD *)v18 + 4) = result;
        }
      }
      else
      {
        v18 = llvm::raw_ostream::write(v18, (const char *)v20, *((_QWORD *)v15 + 10));
        result = (llvm::raw_ostream *)*((_QWORD *)v18 + 4);
      }
      if (*((llvm::raw_ostream **)v18 + 3) == result)
      {
        result = llvm::raw_ostream::write(v18, "\n", 1uLL);
      }
      else
      {
        *(_BYTE *)result = 10;
        ++*((_QWORD *)v18 + 4);
      }
      v22 = (char *)*((_QWORD *)v15 + 1);
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = *(char **)v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (char *)*((_QWORD *)v15 + 2);
          v24 = *(_QWORD *)v23 == (_QWORD)v15;
          v15 = v23;
        }
        while (!v24);
      }
      v15 = v23;
    }
    while (v23 != v14);
  }
  return result;
}

uint64_t llvm::ContextTrieNode::dumpTree(llvm::ContextTrieNode *this)
{
  llvm *v2;
  void *v3;
  size_t *v4;
  size_t *v5;
  _QWORD *v6;
  size_t v7;
  size_t *v8;
  size_t *v9;
  BOOL v10;
  llvm::ContextTrieNode *v12;
  _OWORD v13[2];
  __int128 v14;

  v2 = llvm::dbgs(this);
  v3 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v3 > 0x15uLL)
  {
    qmemcpy(v3, "Context Profile Tree:\n", 22);
    *((_QWORD *)v2 + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(v2, "Context Profile Tree:\n", 0x16uLL);
  }
  v14 = 0u;
  memset(v13, 0, sizeof(v13));
  v12 = this;
  sub_1C48410F0(v13, &v12);
  while (*((_QWORD *)&v14 + 1))
  {
    v4 = *(size_t **)(*(_QWORD *)(*((_QWORD *)&v13[0] + 1) + (((unint64_t)v14 >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * (v14 & 0x1FF));
    *(_QWORD *)&v14 = v14 + 1;
    --*((_QWORD *)&v14 + 1);
    if ((unint64_t)v14 >= 0x400)
    {
      operator delete(**((void ***)&v13[0] + 1));
      *((_QWORD *)&v13[0] + 1) += 8;
      *(_QWORD *)&v14 = v14 - 512;
    }
    llvm::ContextTrieNode::dumpNode(v4);
    v7 = *v4;
    v5 = v4 + 1;
    v6 = (_QWORD *)v7;
    if ((size_t *)v7 != v5)
    {
      do
      {
        v12 = (llvm::ContextTrieNode *)(v6 + 5);
        sub_1C48410F0(v13, &v12);
        v8 = (size_t *)v6[1];
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = (size_t *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (size_t *)v6[2];
            v10 = *v9 == (_QWORD)v6;
            v6 = v9;
          }
          while (!v10);
        }
        v6 = v9;
      }
      while (v9 != v5);
    }
  }
  return sub_1C484143C((uint64_t)v13);
}

_QWORD *llvm::SampleContextTracker::getOrCreateContextPath(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  uint64_t v10;

  result = (_QWORD *)(a1 + 40);
  v10 = 0;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    v6 = *(_QWORD *)(a2 + 16);
    v7 = v6 + 24 * v4;
    do
    {
      v8 = *(void **)v6;
      v9 = *(_QWORD *)(v6 + 8);
      if (a3)
        result = llvm::ContextTrieNode::getOrCreateChildContext((uint64_t)result, (unsigned int *)&v10, v8, v9, 1);
      else
        result = llvm::ContextTrieNode::getChildContext(result, (unsigned int *)&v10, v8, v9);
      v10 = *(_QWORD *)(v6 + 16);
      v6 += 24;
    }
    while (v6 != v7);
  }
  return result;
}

uint64_t llvm::SampleContextTracker::getCalleeContextSamplesFor(llvm::SampleContextTracker *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  const llvm::DILocation *v4;
  uint64_t v5;
  size_t v8;
  int *v9;
  size_t size;
  _QWORD *CalleeContextFor;
  std::string v12;
  unint64_t __val;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = *(const llvm::DILocation **)(a2 + 48);
  if (!v4)
    return 0;
  v9 = (int *)sub_1C51D4FD4(a3, a4, (uint64_t)"selected", 8);
  size = v8;
  memset(&v12, 0, sizeof(v12));
  if (v8 && llvm::sampleprof::FunctionSamples::UseMD5)
  {
    v14 = xmmword_1C85F4BB0;
    v15 = 0;
    llvm::MD5::update((int *)&v14, v9, v8);
    llvm::MD5::final((int *)&v14, (int *)&__val);
    std::to_string(&v12, __val);
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = (int *)&v12;
    else
      v9 = (int *)v12.__r_.__value_.__r.__words[0];
    if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v12.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v12.__r_.__value_.__l.__size_;
  }
  CalleeContextFor = llvm::SampleContextTracker::getCalleeContextFor(a1, v4, v9, size);
  if (CalleeContextFor)
    v5 = CalleeContextFor[6];
  else
    v5 = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v5;
}

void llvm::SampleContextTracker::getIndirectCalleeContextSamplesFor(llvm::SampleContextTracker *this@<X0>, const llvm::DILocation *a2@<X1>, char **a3@<X8>)
{
  _QWORD *ContextFor;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  BOOL v25;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    ContextFor = llvm::SampleContextTracker::getContextFor(this, a2);
    v6 = llvm::sampleprof::FunctionSamples::getCallSiteIdentifier((uint64_t)a2, 0);
    v9 = (_QWORD *)*ContextFor;
    v7 = ContextFor + 1;
    v8 = v9;
    if (v9 != v7)
    {
      v10 = v6;
      v11 = 0;
      do
      {
        if (v8[13] == v10)
        {
          v12 = v8[11];
          if (v12)
          {
            v13 = (unint64_t)a3[2];
            if ((unint64_t)v11 >= v13)
            {
              v15 = *a3;
              v16 = (v11 - *a3) >> 3;
              v17 = v16 + 1;
              if ((unint64_t)(v16 + 1) >> 61)
                abort();
              v18 = v13 - (_QWORD)v15;
              if (v18 >> 2 > v17)
                v17 = v18 >> 2;
              if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
                v19 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v19 = v17;
              if (v19)
              {
                if (v19 >> 61)
                  sub_1C4764EE4();
                v20 = (char *)operator new(8 * v19);
              }
              else
              {
                v20 = 0;
              }
              v21 = &v20[8 * v16];
              *(_QWORD *)v21 = v12;
              v14 = v21 + 8;
              if (v11 != v15)
              {
                do
                {
                  v22 = *((_QWORD *)v11 - 1);
                  v11 -= 8;
                  *((_QWORD *)v21 - 1) = v22;
                  v21 -= 8;
                }
                while (v11 != v15);
                v11 = *a3;
              }
              *a3 = v21;
              a3[1] = v14;
              a3[2] = &v20[8 * v19];
              if (v11)
                operator delete(v11);
            }
            else
            {
              *(_QWORD *)v11 = v12;
              v14 = v11 + 8;
            }
            a3[1] = v14;
            v11 = v14;
          }
        }
        v23 = (_QWORD *)v8[1];
        if (v23)
        {
          do
          {
            v24 = v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v24 = (_QWORD *)v8[2];
            v25 = *v24 == (_QWORD)v8;
            v8 = v24;
          }
          while (!v25);
        }
        v8 = v24;
      }
      while (v24 != v7);
    }
  }
}

_QWORD *llvm::SampleContextTracker::getContextFor(llvm::SampleContextTracker *this, const llvm::DILocation *a2)
{
  const llvm::DILocation *v2;
  unsigned int v4;
  const llvm::DILocation *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type *v10;
  std::string::size_type v11;
  std::string::size_type v12;
  std::string::size_type v13;
  uint64_t v14;
  std::string::size_type *v15;
  std::string::size_type v16;
  unint64_t v17;
  char *v18;
  __int128 v19;
  uint64_t i;
  uint64_t v21;
  std::string::size_type *v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string::size_type v25;
  uint64_t j;
  uint64_t v27;
  std::string::size_type *v28;
  std::string::size_type v29;
  unint64_t v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  size_t *v35;
  _QWORD *v36;
  _QWORD *v37;
  void **v38;
  size_t v39;
  int *v40;
  _QWORD *v41;
  char v42;
  int v43;
  size_t v44;
  size_t v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *ChildContext;
  _QWORD v50[2];
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _BYTE v54[240];
  unint64_t __val;
  std::string v56;
  uint64_t v57;

  v2 = a2;
  v57 = *MEMORY[0x1E0C80C00];
  v52 = v54;
  v53 = 0xA00000000;
  v4 = *((_DWORD *)a2 + 2);
  if (v4 == 2)
  {
    v5 = (const llvm::DILocation *)*((_QWORD *)a2 - 1);
    if (v5)
    {
      while (1)
      {
        v6 = *((_QWORD *)v2 - 2);
        v2 = v5;
        v7 = *(_BYTE *)v6 & 0xFE;
        v8 = v6;
        if (v7 == 18)
        {
          v8 = v6;
          do
            v8 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8) + 8);
          while ((*(_BYTE *)v8 & 0xFE) == 0x12);
        }
        v9 = *(_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8) + 24);
        if (!v9
          || (v10 = *(std::string::size_type **)(v9 + 8),
              v13 = *v10,
              v11 = (std::string::size_type)(v10 + 3),
              (v12 = v13) == 0))
        {
          while (v7 == 18)
          {
            v6 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8) + 8);
            v7 = *(_BYTE *)v6 & 0xFE;
          }
          v14 = *(_QWORD *)(v6 - 8 * *(unsigned int *)(v6 + 8) + 16);
          if (v14)
          {
            v15 = *(std::string::size_type **)(v14 + 8);
            v16 = *v15;
            v11 = (std::string::size_type)(v15 + 3);
            v12 = v16;
          }
          else
          {
            v11 = 0;
            v12 = 0;
          }
        }
        v56.__r_.__value_.__r.__words[0] = llvm::sampleprof::FunctionSamples::getCallSiteIdentifier((uint64_t)v2, 0);
        v56.__r_.__value_.__l.__size_ = v11;
        v56.__r_.__value_.__r.__words[2] = v12;
        v17 = sub_1C4926708((uint64_t)&v52, (unint64_t)&v56, 1);
        v18 = (char *)v52 + 24 * v53;
        v19 = *(_OWORD *)v17;
        *((_QWORD *)v18 + 2) = *(_QWORD *)(v17 + 16);
        *(_OWORD *)v18 = v19;
        LODWORD(v53) = v53 + 1;
        v4 = *((_DWORD *)v2 + 2);
        if (v4 != 2)
          break;
        v5 = (const llvm::DILocation *)*((_QWORD *)v2 - 1);
        if (!v5)
          goto LABEL_16;
      }
    }
    else
    {
LABEL_16:
      v4 = 2;
    }
  }
  for (i = *((_QWORD *)v2 - v4); (*(_BYTE *)i & 0xFE) == 0x12; i = *(_QWORD *)(i - 8 * *(unsigned int *)(i + 8) + 8))
    ;
  v21 = *(_QWORD *)(i - 8 * *(unsigned int *)(i + 8) + 24);
  if (!v21
    || (v22 = *(std::string::size_type **)(v21 + 8),
        v25 = *v22,
        v23 = (std::string::size_type)(v22 + 3),
        (v24 = v25) == 0))
  {
    for (j = *((_QWORD *)v2 - v4); (*(_BYTE *)j & 0xFE) == 0x12; j = *(_QWORD *)(j - 8 * *(unsigned int *)(j + 8) + 8))
      ;
    v27 = *(_QWORD *)(j - 8 * *(unsigned int *)(j + 8) + 16);
    if (v27)
    {
      v28 = *(std::string::size_type **)(v27 + 8);
      v29 = *v28;
      v23 = (std::string::size_type)(v28 + 3);
      v24 = v29;
    }
    else
    {
      v23 = 0;
      v24 = 0;
    }
  }
  v56.__r_.__value_.__r.__words[0] = 0;
  v56.__r_.__value_.__l.__size_ = v23;
  v56.__r_.__value_.__r.__words[2] = v24;
  v30 = sub_1C4926708((uint64_t)&v52, (unint64_t)&v56, 1);
  v31 = (char *)v52 + 24 * v53;
  v32 = *(_OWORD *)v30;
  *((_QWORD *)v31 + 2) = *(_QWORD *)(v30 + 16);
  *(_OWORD *)v31 = v32;
  v33 = (v53 + 1);
  LODWORD(v53) = v53 + 1;
  v50[0] = v50;
  v50[1] = v50;
  v51 = 0;
  if (llvm::sampleprof::FunctionSamples::UseMD5)
  {
    if (!(_DWORD)v33)
    {
      v46 = (_QWORD *)((char *)this + 40);
      goto LABEL_49;
    }
    v34 = 24 * v33;
    v35 = (size_t *)((char *)v52 + 16);
    v36 = v50;
    do
    {
      v37 = v36;
      v36 = operator new(0x28uLL);
      v36[2] = 0;
      v38 = (void **)(v36 + 2);
      v36[3] = 0;
      v36[4] = 0;
      *v36 = v37;
      v36[1] = v50;
      v37[1] = v36;
      v50[0] = v36;
      ++v51;
      v39 = *v35;
      if (*v35 && llvm::sampleprof::FunctionSamples::UseMD5)
      {
        v40 = (int *)*(v35 - 1);
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = xmmword_1C85F4BB0;
        v56.__r_.__value_.__r.__words[2] = 0;
        llvm::MD5::update((int *)&v56, v40, v39);
        llvm::MD5::final((int *)&v56, (int *)&__val);
        std::to_string(&v56, __val);
        if (*((char *)v36 + 39) < 0)
          operator delete(*v38);
        *(_OWORD *)v38 = *(_OWORD *)&v56.__r_.__value_.__l.__data_;
        v36[4] = *((_QWORD *)&v56.__r_.__value_.__l + 2);
        v36 = (_QWORD *)v50[0];
      }
      v41 = (_QWORD *)v36[2];
      v42 = *((_BYTE *)v36 + 39);
      v43 = v42;
      if (v42 >= 0)
        v41 = v36 + 2;
      v44 = v36[3];
      v45 = v42 & 0x7F;
      if (v43 >= 0)
        v44 = v45;
      *(v35 - 1) = (size_t)v41;
      *v35 = v44;
      v35 += 3;
      v34 -= 24;
    }
    while (v34);
    LODWORD(v33) = v53;
  }
  v46 = (_QWORD *)((char *)this + 40);
  if ((int)v33 >= 1)
  {
    v47 = v33;
    do
    {
      LODWORD(v33) = v47 - 1;
      ChildContext = llvm::ContextTrieNode::getChildContext(v46, (unsigned int *)v52 + 6 * (v47 - 1), *((void **)v52 + 3 * (v47 - 1) + 1), *((_QWORD *)v52 + 3 * (v47 - 1) + 2));
      v46 = ChildContext;
      if (v47 < 2)
        break;
      --v47;
    }
    while (ChildContext);
  }
LABEL_49:
  sub_1C5753C70((char *)v50);
  if (v52 != v54)
    free(v52);
  if ((int)v33 >= 1)
    return 0;
  else
    return v46;
}

_QWORD *llvm::SampleContextTracker::getContextSamplesFor(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = llvm::SampleContextTracker::getContextFor(a1, a2);
  if (result)
    return (_QWORD *)result[6];
  return result;
}

size_t *llvm::SampleContextTracker::getAllContextSamplesFor(llvm::SampleContextTracker *this, const llvm::Function *a2)
{
  unsigned __int8 *v3;
  size_t v4;

  v3 = (unsigned __int8 *)sub_1C6200B8C(a2);
  return *sub_1C62A1BBC((uint64_t)this, v3, v4) + 1;
}

size_t *llvm::SampleContextTracker::getAllContextSamplesFor(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  return *sub_1C62A1BBC(a1, a2, a3) + 1;
}

uint64_t llvm::SampleContextTracker::getBaseSamplesFor(uint64_t **a1, int *a2, size_t a3, int a4)
{
  size_t size;
  std::string *v6;
  llvm::ContextTrieNode *ChildContext;
  uint64_t v9;
  size_t **v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  llvm::ContextTrieNode *ContextFor;
  std::string v19;
  unint64_t __val;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  size = a3;
  v6 = (std::string *)a2;
  v23 = *MEMORY[0x1E0C80C00];
  memset(&v19, 0, sizeof(v19));
  if (a3 && llvm::sampleprof::FunctionSamples::UseMD5)
  {
    v21 = xmmword_1C85F4BB0;
    v22 = 0;
    llvm::MD5::update((int *)&v21, a2, a3);
    llvm::MD5::final((int *)&v21, (int *)&__val);
    std::to_string(&v19, __val);
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v19;
    else
      v6 = (std::string *)v19.__r_.__value_.__r.__words[0];
    if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v19.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v19.__r_.__value_.__l.__size_;
  }
  *(_QWORD *)&v21 = 0;
  ChildContext = (llvm::ContextTrieNode *)llvm::ContextTrieNode::getChildContext(a1 + 5, (unsigned int *)&v21, v6, size);
  if (a4)
  {
    v11 = sub_1C62A1BBC((uint64_t)a1, (unsigned __int8 *)v6, size);
    v12 = (_QWORD *)(*v11)[1];
    v13 = (uint64_t)(*v11 + 2);
    if (v12 != (_QWORD *)v13)
    {
      do
      {
        v14 = v12[4];
        if ((*(_BYTE *)(v14 + 48) & 0xC) == 0)
        {
          ContextFor = (llvm::ContextTrieNode *)llvm::SampleContextTracker::getContextFor((uint64_t)a1, v14 + 16);
          if (ContextFor != ChildContext)
            ChildContext = (llvm::ContextTrieNode *)llvm::SampleContextTracker::promoteMergeContextSamplesTree((llvm::SampleContextTracker *)a1, ContextFor, a1 + 5, *(_DWORD *)(*((_QWORD *)ContextFor + 6) + 40) - 1);
        }
        v15 = (_QWORD *)v12[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (_QWORD *)v12[2];
            v17 = *v16 == (_QWORD)v12;
            v12 = v16;
          }
          while (!v17);
        }
        v12 = v16;
      }
      while (v16 != (_QWORD *)v13);
    }
  }
  if (ChildContext)
    v9 = *((_QWORD *)ChildContext + 6);
  else
    v9 = 0;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return v9;
}

_QWORD *llvm::SampleContextTracker::getTopLevelContextNode(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v4;

  v4 = 0;
  return llvm::ContextTrieNode::getChildContext((_QWORD *)(a1 + 40), (unsigned int *)&v4, a2, a3);
}

uint64_t **llvm::SampleContextTracker::promoteMergeContextSamplesTree(uint64_t **this, llvm::ContextTrieNode *a2)
{
  return llvm::SampleContextTracker::promoteMergeContextSamplesTree((llvm::SampleContextTracker *)this, a2, this + 5, *(_DWORD *)(*((_QWORD *)a2 + 6) + 40) - 1);
}

uint64_t **llvm::SampleContextTracker::promoteMergeContextSamplesTree(uint64_t **a1, uint64_t a2, void *a3, size_t a4)
{
  const llvm::DILocation *v7;
  uint64_t **result;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  BOOL v17;
  uint64_t **v18;

  v7 = *(const llvm::DILocation **)(a2 + 48);
  result = (uint64_t **)llvm::SampleContextTracker::getContextFor((llvm::SampleContextTracker *)a1, v7);
  if (result)
  {
    v9 = result;
    result = (uint64_t **)llvm::sampleprof::FunctionSamples::getCallSiteIdentifier((uint64_t)v7, 0);
    v18 = result;
    if (a4)
    {
      result = (uint64_t **)llvm::ContextTrieNode::getChildContext(v9, (unsigned int *)&v18, a3, a4);
      if (result)
        return llvm::SampleContextTracker::promoteMergeContextSamplesTree((llvm::SampleContextTracker *)a1, (llvm::ContextTrieNode *)result, a1 + 5, *((_DWORD *)result[6] + 10) - 1);
    }
    else
    {
      v12 = *v9;
      v10 = (uint64_t *)(v9 + 1);
      v11 = v12;
      if (v12 != v10)
      {
        v13 = result;
        do
        {
          if (v13 == (uint64_t **)v11[13])
          {
            v14 = v11[11];
            if (!v14 || (*(_BYTE *)(v14 + 48) & 4) == 0)
              result = llvm::SampleContextTracker::promoteMergeContextSamplesTree((llvm::SampleContextTracker *)a1, (llvm::ContextTrieNode *)(v11 + 5), a1 + 5, *(_DWORD *)(v14 + 40) - 1);
          }
          v15 = (uint64_t *)v11[1];
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = (uint64_t *)*v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (uint64_t *)v11[2];
              v17 = *v16 == (_QWORD)v11;
              v11 = v16;
            }
            while (!v17);
          }
          v11 = v16;
        }
        while (v16 != v10);
      }
    }
  }
  return result;
}

uint64_t **llvm::SampleContextTracker::promoteMergeContextSamplesTree(llvm::SampleContextTracker *this, llvm::ContextTrieNode *a2, uint64_t **a3, unsigned int a4)
{
  uint64_t v8;
  llvm::ContextTrieNode *v9;
  uint64_t v10;
  llvm::SampleContextTracker *ChildContext;
  uint64_t **v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v8 = *((_QWORD *)a2 + 8);
  v20 = v8;
  v21 = 0;
  v9 = (llvm::SampleContextTracker *)((char *)this + 40);
  if ((uint64_t **)((char *)this + 40) != a3)
    v21 = v8;
  v10 = *((_QWORD *)a2 + 3);
  ChildContext = (llvm::SampleContextTracker *)llvm::ContextTrieNode::getChildContext(a3, (unsigned int *)&v21, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
  if (ChildContext)
  {
    v12 = (uint64_t **)ChildContext;
    llvm::SampleContextTracker::mergeContextNode(ChildContext, a2, ChildContext, a4);
    v14 = (char *)a2 + 8;
    v15 = *(char **)a2;
    if (*(llvm::ContextTrieNode **)a2 != (llvm::ContextTrieNode *)((char *)a2 + 8))
    {
      do
      {
        llvm::SampleContextTracker::promoteMergeContextSamplesTree(this, (llvm::ContextTrieNode *)(v15 + 40), (llvm::ContextTrieNode *)v12, a4);
        v16 = (char *)*((_QWORD *)v15 + 1);
        if (v16)
        {
          do
          {
            v17 = v16;
            v16 = *(char **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            v17 = (char *)*((_QWORD *)v15 + 2);
            v18 = *(_QWORD *)v17 == (_QWORD)v15;
            v15 = v17;
          }
          while (!v18);
        }
        v15 = v17;
      }
      while (v17 != v14);
    }
    sub_1C62A18C0((uint64_t)a2, *((_QWORD **)a2 + 1));
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = v14;
  }
  else
  {
    v12 = llvm::ContextTrieNode::moveToChildContext(a3, (unsigned int *)&v21, (uint64_t)a2, a4, 0);
  }
  if (v9 == (llvm::ContextTrieNode *)a3)
  {
    v19 = llvm::sampleprof::FunctionSamples::getCallSiteHash(v12[4], (size_t)v12[5], (unsigned int *)&v20);
    sub_1C62A1B40(v10, v19);
  }
  return v12;
}

uint64_t llvm::SampleContextTracker::dump(llvm::SampleContextTracker *this)
{
  return llvm::ContextTrieNode::dumpTree((llvm::SampleContextTracker *)((char *)this + 40));
}

uint64_t llvm::SampleContextTracker::getFuncNameFor(llvm::SampleContextTracker *this, llvm::ContextTrieNode *a2)
{
  uint64_t v2;
  const char *v3;
  size_t v4;
  std::string::size_type v5;
  std::string *p_dst;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  std::string __dst;

  if (!llvm::sampleprof::FunctionSamples::UseMD5)
    return *((_QWORD *)a2 + 4);
  v2 = *((_QWORD *)this + 4);
  v3 = (const char *)*((_QWORD *)a2 + 4);
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (std::string *)operator new(v8 + 1);
    __dst.__r_.__value_.__l.__size_ = v5;
    __dst.__r_.__value_.__r.__words[2] = v9 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v4;
  p_dst = &__dst;
  if (v4)
LABEL_10:
    memmove(p_dst, v3, v5);
  p_dst->__r_.__value_.__s.__data_[v5] = 0;
  v10 = std::stoull(&__dst, 0, 10);
  v11 = *(_DWORD *)(v2 + 16);
  if (v11)
  {
    v12 = v11 - 1;
    v13 = v12 & (37 * v10);
    v14 = (uint64_t *)(*(_QWORD *)v2 + 24 * v13);
    v15 = *v14;
    if (v10 == *v14)
    {
LABEL_13:
      v7 = v14[1];
      goto LABEL_19;
    }
    v16 = 1;
    while (v15 != -1)
    {
      v17 = v13 + v16++;
      v13 = v17 & v12;
      v14 = (uint64_t *)(*(_QWORD *)v2 + 24 * v13);
      v15 = *v14;
      if (v10 == *v14)
        goto LABEL_13;
    }
  }
  v7 = 0;
LABEL_19:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v7;
}

uint64_t **llvm::SampleContextTracker::addTopLevelContextNode(uint64_t a1, void *a2, size_t a3)
{
  uint64_t v4;

  v4 = 0;
  return llvm::ContextTrieNode::getOrCreateChildContext(a1 + 40, (unsigned int *)&v4, a2, a3, 1);
}

uint64_t sub_1C5753498(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  _QWORD *v13;
  char *v14;
  unsigned int v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  unsigned int v25;
  BOOL v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t *v32;

  if (!*(_QWORD *)a1)
    *(_QWORD *)a1 = *(_QWORD *)a2;
  if (!*(_QWORD *)(a1 + 24))
  {
    v6 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = v7;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    if (v8 != v9)
      return 14;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v9;
  }
  LODWORD(v10) = sub_1C5753CE8(a1, *(_QWORD *)(a2 + 56), a3);
  v11 = sub_1C5753D6C(a1, *(_QWORD *)(a2 + 64), a3);
  if (v11)
    v12 = (_DWORD)v10 == 0;
  else
    v12 = 0;
  if (v12)
    v10 = v11;
  else
    v10 = v10;
  v13 = *(_QWORD **)(a2 + 72);
  if (v13 != (_QWORD *)(a2 + 80))
  {
    do
    {
      v32 = v13 + 4;
      v14 = sub_1C62A190C(a1 + 72, (unsigned int *)v13 + 8, (uint64_t)&std::piecewise_construct, &v32);
      v15 = llvm::sampleprof::SampleRecord::merge((uint64_t *)v14 + 5, (uint64_t)(v13 + 5), a3);
      if (v15)
        v16 = (_DWORD)v10 == 0;
      else
        v16 = 0;
      if (v16)
        v10 = v15;
      else
        v10 = v10;
      v17 = (_QWORD *)v13[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v13[2];
          v12 = *v18 == (_QWORD)v13;
          v13 = v18;
        }
        while (!v12);
      }
      v13 = v18;
    }
    while (v18 != (_QWORD *)(a2 + 80));
  }
  v19 = *(_QWORD **)(a2 + 96);
  if (v19 != (_QWORD *)(a2 + 104))
  {
    v20 = a1 + 96;
    do
    {
      v32 = v19 + 4;
      v21 = sub_1C62A19D0(v20, (unsigned int *)v19 + 8, (uint64_t)&std::piecewise_construct, &v32);
      v22 = (_QWORD *)v19[5];
      if (v22 != v19 + 6)
      {
        v23 = (uint64_t)(v21 + 5);
        do
        {
          v32 = v22 + 4;
          v24 = sub_1C62A1A88(v23, (const void **)v22 + 4, (uint64_t)&std::piecewise_construct, (__int128 **)&v32);
          v25 = sub_1C5753498(v24 + 56, v22 + 7, a3);
          if (v25)
            v26 = (_DWORD)v10 == 0;
          else
            v26 = 0;
          if (v26)
            v10 = v25;
          else
            v10 = v10;
          v27 = (_QWORD *)v22[1];
          if (v27)
          {
            do
            {
              v28 = v27;
              v27 = (_QWORD *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              v28 = (_QWORD *)v22[2];
              v12 = *v28 == (_QWORD)v22;
              v22 = v28;
            }
            while (!v12);
          }
          v22 = v28;
        }
        while (v28 != v19 + 6);
      }
      v29 = (_QWORD *)v19[1];
      if (v29)
      {
        do
        {
          v30 = v29;
          v29 = (_QWORD *)*v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (_QWORD *)v19[2];
          v12 = *v30 == (_QWORD)v19;
          v19 = v30;
        }
        while (!v12);
      }
      v19 = v30;
    }
    while (v30 != (_QWORD *)(a2 + 104));
  }
  return v10;
}

void sub_1C57536E4(_QWORD **a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t **v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  BOOL v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 v27;
  __int128 v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;

  if (a1[2])
  {
    v6 = *a1;
    v8 = a1 + 1;
    v7 = a1[1];
    *a1 = a1 + 1;
    v7[2] = 0;
    a1[2] = 0;
    a1[1] = 0;
    v9 = v6[1] ? v6[1] : (uint64_t)v6;
    if (v9)
    {
      v24 = sub_1C4FCE18C(v9);
      if (a2 == a3)
      {
        v25 = (_QWORD *)v9;
      }
      else
      {
        v26 = a2;
        do
        {
          v25 = v24;
          *(_QWORD *)(v9 + 32) = v26[4];
          if ((_QWORD *)v9 != v26)
            sub_1C57536E4(v9 + 40, v26[5], v26 + 6);
          v27 = *((_OWORD *)v26 + 4);
          v28 = *((_OWORD *)v26 + 6);
          *(_OWORD *)(v9 + 80) = *((_OWORD *)v26 + 5);
          *(_OWORD *)(v9 + 96) = v28;
          *(_OWORD *)(v9 + 64) = v27;
          v29 = *v8;
          v30 = (uint64_t *)(a1 + 1);
          v31 = (uint64_t *)(a1 + 1);
          if (*v8)
          {
            do
            {
              while (1)
              {
                v30 = v29;
                if (*(_QWORD *)(v9 + 32) >= (unint64_t)v29[4])
                  break;
                v29 = (uint64_t *)*v29;
                v31 = v30;
                if (!*v30)
                  goto LABEL_41;
              }
              v29 = (uint64_t *)v29[1];
            }
            while (v29);
            v31 = v30 + 1;
          }
LABEL_41:
          *(_QWORD *)v9 = 0;
          *(_QWORD *)(v9 + 8) = 0;
          *(_QWORD *)(v9 + 16) = v30;
          *v31 = v9;
          v32 = (_QWORD *)**a1;
          if (v32)
          {
            *a1 = v32;
            v9 = *v31;
          }
          sub_1C4768E74(a1[1], (uint64_t *)v9);
          a1[2] = (_QWORD *)((char *)a1[2] + 1);
          if (v24)
            v24 = sub_1C4FCE18C((uint64_t)v24);
          else
            v24 = 0;
          v33 = (_QWORD *)v26[1];
          if (v33)
          {
            do
            {
              a2 = v33;
              v33 = (_QWORD *)*v33;
            }
            while (v33);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v26[2];
              v15 = *a2 == (_QWORD)v26;
              v26 = a2;
            }
            while (!v15);
          }
          if (!v25)
            break;
          v26 = a2;
          v9 = (uint64_t)v25;
        }
        while (a2 != a3);
      }
      sub_1C62A18C0((uint64_t)a1, v25);
      if (v24)
      {
        do
        {
          v34 = v24;
          v24 = (_QWORD *)v24[2];
        }
        while (v24);
        sub_1C62A18C0((uint64_t)a1, v34);
      }
    }
  }
  if (a2 != a3)
  {
    v10 = a1 + 1;
    do
    {
      v11 = operator new(0x70uLL);
      v11[4] = a2[4];
      v11[6] = 0;
      v11[5] = v11 + 6;
      v11[7] = 0;
      v12 = (_QWORD *)a2[5];
      if (v12 != a2 + 6)
      {
        do
        {
          sub_1C57539FC(v11 + 5, v11 + 6, v12[4], (uint64_t)(v12 + 4));
          v13 = (_QWORD *)v12[1];
          if (v13)
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              v14 = (_QWORD *)v12[2];
              v15 = *v14 == (_QWORD)v12;
              v12 = v14;
            }
            while (!v15);
          }
          v12 = v14;
        }
        while (v14 != a2 + 6);
      }
      v16 = *((_OWORD *)a2 + 4);
      v17 = *((_OWORD *)a2 + 6);
      *((_OWORD *)v11 + 5) = *((_OWORD *)a2 + 5);
      *((_OWORD *)v11 + 6) = v17;
      *((_OWORD *)v11 + 4) = v16;
      v18 = (_QWORD *)*v10;
      v19 = a1 + 1;
      v20 = a1 + 1;
      if (*v10)
      {
        do
        {
          while (1)
          {
            v19 = v18;
            if (v11[4] >= v18[4])
              break;
            v18 = (_QWORD *)*v18;
            v20 = v19;
            if (!*v19)
              goto LABEL_21;
          }
          v18 = (_QWORD *)v18[1];
        }
        while (v18);
        v20 = v19 + 1;
      }
LABEL_21:
      *v11 = 0;
      v11[1] = 0;
      v11[2] = v19;
      *v20 = v11;
      v21 = (_QWORD *)**a1;
      if (v21)
      {
        *a1 = v21;
        v11 = (_QWORD *)*v20;
      }
      sub_1C4768E74(a1[1], v11);
      a1[2] = (_QWORD *)((char *)a1[2] + 1);
      v22 = (_QWORD *)a2[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (_QWORD *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          v23 = (_QWORD *)a2[2];
          v15 = *v23 == (_QWORD)a2;
          a2 = v23;
        }
        while (!v15);
      }
      a2 = v23;
    }
    while (v23 != a3);
  }
}

uint64_t *sub_1C57539FC(uint64_t *result, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  __int128 v27;
  uint64_t v28;

  v5 = a2;
  v6 = result;
  v7 = result + 1;
  if (result + 1 == a2 || (v8 = a2[4], v8 > a3))
  {
    v9 = *a2;
    if ((uint64_t *)*result == a2)
    {
      v11 = a2;
LABEL_16:
      if (v9)
        v17 = v11;
      else
        v17 = a2;
      if (v9)
        v13 = v11 + 1;
      else
        v13 = a2;
      if (*v13)
        return result;
      v5 = v17;
      goto LABEL_42;
    }
    if (v9)
    {
      v10 = (uint64_t *)*a2;
      do
      {
        v11 = v10;
        v10 = (uint64_t *)v10[1];
      }
      while (v10);
    }
    else
    {
      v15 = a2;
      do
      {
        v11 = (uint64_t *)v15[2];
        v16 = *v11 == (_QWORD)v15;
        v15 = v11;
      }
      while (v16);
    }
    if (v11[4] < a3)
      goto LABEL_16;
    v18 = (uint64_t *)*v7;
    v13 = result + 1;
    v5 = result + 1;
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          v5 = v18;
          v19 = v18[4];
          if (v19 <= a3)
            break;
          v18 = (uint64_t *)*v18;
          v13 = v5;
          if (!*v5)
            goto LABEL_42;
        }
        if (v19 >= a3)
          return result;
        v18 = (uint64_t *)v18[1];
        if (!v18)
          goto LABEL_30;
      }
    }
LABEL_42:
    v23 = operator new(0x70uLL);
    v24 = *(_QWORD **)(a4 + 8);
    v23[4] = *(_QWORD *)a4;
    v23[6] = 0;
    v23[5] = v23 + 6;
    v23[7] = 0;
    if (v24 != (_QWORD *)(a4 + 16))
    {
      do
      {
        sub_1C57539FC(v23 + 5, v23 + 6, v24[4], v24 + 4);
        v25 = (_QWORD *)v24[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v24[2];
            v16 = *v26 == (_QWORD)v24;
            v24 = v26;
          }
          while (!v16);
        }
        v24 = v26;
      }
      while (v26 != (_QWORD *)(a4 + 16));
    }
    v27 = *(_OWORD *)(a4 + 48);
    *((_OWORD *)v23 + 4) = *(_OWORD *)(a4 + 32);
    *((_OWORD *)v23 + 5) = v27;
    *((_OWORD *)v23 + 6) = *(_OWORD *)(a4 + 64);
    *v23 = 0;
    v23[1] = 0;
    v23[2] = v5;
    *v13 = (uint64_t)v23;
    v28 = *(_QWORD *)*v6;
    if (v28)
    {
      *v6 = v28;
      v23 = (_QWORD *)*v13;
    }
    result = sub_1C4768E74((uint64_t *)v6[1], v23);
    ++v6[2];
    return result;
  }
  if (v8 >= a3)
    return result;
  v13 = a2 + 1;
  v12 = (uint64_t *)a2[1];
  if (v12)
  {
    do
    {
      v13 = v12;
      v12 = (uint64_t *)*v12;
      v5 = v13;
      v14 = v13;
    }
    while (v12);
  }
  else
  {
    v14 = a2;
    do
    {
      v20 = v14;
      v14 = (uint64_t *)v14[2];
    }
    while ((uint64_t *)*v14 != v20);
  }
  if (v14 == v7)
    goto LABEL_42;
  if (v14[4] > a3)
    goto LABEL_42;
  v21 = (uint64_t *)*v7;
  v13 = result + 1;
  v5 = result + 1;
  if (!*v7)
    goto LABEL_42;
  while (1)
  {
    while (1)
    {
      v5 = v21;
      v22 = v21[4];
      if (v22 <= a3)
        break;
      v21 = (uint64_t *)*v21;
      v13 = v5;
      if (!*v5)
        goto LABEL_42;
    }
    if (v22 >= a3)
      return result;
    v21 = (uint64_t *)v21[1];
    if (!v21)
    {
LABEL_30:
      v13 = v5 + 1;
      goto LABEL_42;
    }
  }
}

void sub_1C5753C70(char *a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;

  if (*((_QWORD *)a1 + 2))
  {
    v2 = *(_QWORD *)a1;
    v3 = (char *)*((_QWORD *)a1 + 1);
    v4 = *(_QWORD *)v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*(_QWORD *)a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    *((_QWORD *)a1 + 2) = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (char *)*((_QWORD *)v3 + 1);
        if (v3[39] < 0)
          operator delete(*((void **)v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t sub_1C5753CE8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v12;
  BOOL v13;

  v3 = *(_QWORD *)(a1 + 56);
  v4 = __clz(a3) + __clz(a2);
  if (v4 < 0x40)
  {
    if (v4 != 63
      || (v12 = (a2 >> 1) * a3, (v12 & 0x8000000000000000) != 0)
      || (v5 = 2 * v12, (a2 & 1) != 0) && (v5 + a3 >= v5 ? (v13 = v5 + a3 >= a3) : (v13 = 0), v5 += a3, !v13))
    {
      *(_QWORD *)(a1 + 56) = -1;
      return 10;
    }
  }
  else
  {
    v5 = a3 * a2;
  }
  v6 = v5 + v3;
  v8 = v5 + v3 >= v3 && v6 >= v5;
  v9 = !v8;
  if (v8)
    v10 = v6;
  else
    v10 = -1;
  *(_QWORD *)(a1 + 56) = v10;
  if (v9)
    return 10;
  else
    return 0;
}

uint64_t sub_1C5753D6C(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v12;
  BOOL v13;

  v3 = *(_QWORD *)(a1 + 64);
  v4 = __clz(a3) + __clz(a2);
  if (v4 < 0x40)
  {
    if (v4 != 63
      || (v12 = (a2 >> 1) * a3, (v12 & 0x8000000000000000) != 0)
      || (v5 = 2 * v12, (a2 & 1) != 0) && (v5 + a3 >= v5 ? (v13 = v5 + a3 >= a3) : (v13 = 0), v5 += a3, !v13))
    {
      *(_QWORD *)(a1 + 64) = -1;
      return 10;
    }
  }
  else
  {
    v5 = a3 * a2;
  }
  v6 = v5 + v3;
  v8 = v5 + v3 >= v3 && v6 >= v5;
  v9 = !v8;
  if (v8)
    v10 = v6;
  else
    v10 = -1;
  *(_QWORD *)(a1 + 64) = v10;
  if (v9)
    return 10;
  else
    return 0;
}

uint64_t *sub_1C5753DF0(uint64_t a1, _QWORD *a2, unsigned int *a3)
{
  uint64_t *result;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;

  v5 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *a3;
    v7 = a3[1];
    while (1)
    {
      while (1)
      {
        v8 = v4;
        v9 = *((_DWORD *)v4 + 8);
        if (v6 >= v9)
          break;
LABEL_6:
        v4 = (uint64_t *)*v8;
        result = v8;
        if (!*v8)
          goto LABEL_14;
      }
      if (v6 == v9)
      {
        v10 = *((_DWORD *)v8 + 9);
        if (v7 < v10)
          goto LABEL_6;
        if (v10 >= v7)
          goto LABEL_14;
      }
      else if (v9 >= v6)
      {
        goto LABEL_14;
      }
      result = v8 + 1;
      v4 = (uint64_t *)v8[1];
      if (!v4)
        goto LABEL_14;
    }
  }
  v8 = result;
LABEL_14:
  *a2 = v8;
  return result;
}

char *sub_1C5753E5C(char *__dst, __int128 **a2)
{
  __int128 *v3;
  __int128 v4;

  v3 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    *((_QWORD *)__dst + 2) = *((_QWORD *)v3 + 2);
    *(_OWORD *)__dst = v4;
  }
  *(_OWORD *)(__dst + 88) = 0u;
  *(_OWORD *)(__dst + 72) = 0u;
  *(_OWORD *)(__dst + 56) = 0u;
  *(_OWORD *)(__dst + 40) = 0u;
  *(_OWORD *)(__dst + 24) = 0u;
  *(_OWORD *)(__dst + 104) = 0u;
  *((_QWORD *)__dst + 12) = __dst + 104;
  *((_QWORD *)__dst + 17) = 0;
  *((_QWORD *)__dst + 16) = 0;
  *((_QWORD *)__dst + 15) = __dst + 128;
  return __dst;
}

uint64_t **sub_1C5753EDC(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x70uLL);
    v10 = *a3;
    v7[7] = 0;
    v7[6] = 0;
    v7[4] = v10;
    v7[5] = (uint64_t *)(v7 + 6);
    *((_BYTE *)v7 + 100) = 0;
    v7[13] = 0;
    *v7 = 0;
    v7[1] = 0;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_BYTE *)v7 + 96) = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

_QWORD *sub_1C5753FC4(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    while (1)
    {
      while (1)
      {
        v7 = v4;
        v8 = *a3;
        v9 = v4[4];
        v10 = *(_QWORD *)(*a3 + 56);
        v11 = *(_QWORD *)(v9 + 56);
        if (v10 == v11)
          break;
        if (v10 <= v11)
          goto LABEL_8;
LABEL_6:
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_15;
      }
      if (sub_1C5754088(v8 + 16, v9 + 16))
        goto LABEL_6;
      v9 = v7[4];
      v8 = *a3;
      v11 = *(_QWORD *)(v9 + 56);
      v10 = *(_QWORD *)(*a3 + 56);
LABEL_8:
      if (v11 == v10)
      {
        if (!sub_1C5754088(v9 + 16, v8 + 16))
          goto LABEL_15;
      }
      else if (v11 <= v10)
      {
        goto LABEL_15;
      }
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
      if (!v4)
        goto LABEL_15;
    }
  }
  v7 = (_QWORD *)(a1 + 8);
LABEL_15:
  *a2 = v7;
  return v5;
}

BOOL sub_1C5754088(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  int v20;
  int v21;

  v2 = *(_DWORD *)(a1 + 32);
  v3 = *(_DWORD *)(a2 + 32);
  v4 = v2 >= v3;
  if (v2 != v3)
    return !v4;
  if (!v2)
  {
    v17 = *(_QWORD *)(a2 + 8);
    v18 = *(_QWORD *)(a1 + 8);
    if (v17 >= v18)
      v19 = *(_QWORD *)(a1 + 8);
    else
      v19 = *(_QWORD *)(a2 + 8);
    if (v19 && (v20 = memcmp(*(const void **)a1, *(const void **)a2, v19)) != 0)
    {
      v21 = (v20 >> 31) | 1;
    }
    else
    {
      if (v18 < v17)
        v21 = -1;
      else
        v21 = 1;
      if (v18 == v17)
        v21 = 0;
    }
    return v21 == -1;
  }
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 >= v5)
    v7 = *(_QWORD *)(a1 + 24);
  else
    v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
  {
LABEL_17:
    v4 = v5 >= v6;
    return !v4;
  }
  v8 = (_DWORD *)(*(_QWORD *)(a1 + 16) + 16);
  v9 = (_DWORD *)(*(_QWORD *)(a2 + 16) + 16);
  while (1)
  {
    v10 = *((_QWORD *)v9 - 1);
    v11 = *((_QWORD *)v8 - 1);
    v12 = v10 >= v11 ? *((_QWORD *)v8 - 1) : *((_QWORD *)v9 - 1);
    if (v12)
    {
      v13 = memcmp(*((const void **)v8 - 2), *((const void **)v9 - 2), v12);
      if (v13)
        return v13 >> 31;
    }
    v4 = v11 >= v10;
    if (v11 != v10)
      return !v4;
    v4 = *v8 >= *v9;
    if (*v8 != *v9)
      return !v4;
    v14 = v8[1];
    v15 = v9[1];
    v4 = v14 >= v15;
    if (v14 != v15)
      return !v4;
    v8 += 6;
    v9 += 6;
    if (!--v7)
      goto LABEL_17;
  }
}

void llvm::initializeSampleProfileLoaderLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED833418);
  if (v2 != -1)
  {
    v5[0] = sub_1C5754208;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED833418, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5754208(llvm *a1)
{
  llvm::PassRegistry *v2;
  uint64_t v3;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v2);
  v3 = operator new();
  *(_QWORD *)v3 = "Sample Profile loader";
  *(_QWORD *)(v3 + 8) = 21;
  *(_QWORD *)(v3 + 16) = "sample-profile";
  *(_QWORD *)(v3 + 24) = 14;
  *(_QWORD *)(v3 + 32) = &unk_1ED80F040;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5759E48;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t llvm::createSampleProfileLoaderPass(llvm *this)
{
  uint64_t v1;
  size_t v2;
  uint64_t *v3;
  unsigned int *v5;

  v1 = operator new();
  if (byte_1ED80FC1F >= 0)
    v2 = byte_1ED80FC1F & 0x7F;
  else
    v2 = unk_1ED80FC10;
  v5 = 0;
  if (byte_1ED80FC1F >= 0)
    v3 = &qword_1ED80FC08;
  else
    v3 = (uint64_t *)qword_1ED80FC08;
  return sub_1C5754314(v1, v3, v2, &v5);
}

uint64_t sub_1C5754314(uint64_t a1, void *__src, size_t __len, unsigned int **a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  size_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t *v14;
  void (**v15)(void);
  void (**v16)(void);
  void (**v17)(void);
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  BOOL v21;
  unsigned int *v22;
  unsigned int v23;
  unint64_t v25;
  unsigned int *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD v30[2];
  _QWORD v31[3];
  _QWORD *v32;
  _QWORD v33[3];
  _QWORD *v34;
  _QWORD v35[3];
  _QWORD *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED80F040;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E817C4F8;
  v7 = a1 + 32;
  v8 = byte_1ED80FD07;
  v9 = qword_1ED80FCF0;
  if (byte_1ED80FD07 >= 0)
    v10 = byte_1ED80FD07 & 0x7F;
  else
    v10 = qword_1ED80FCF8;
  v11 = *a4;
  if (*a4)
  {
    v27 = *a4;
    v12 = v11 + 2;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  else
  {
    llvm::vfs::getRealFileSystem(&v27);
  }
  v35[0] = &off_1E817C598;
  v35[1] = a1;
  v36 = v35;
  v33[0] = &off_1E817C5E0;
  v33[1] = a1;
  v34 = v33;
  v31[0] = &off_1E817C628;
  v31[1] = a1;
  if (v8 >= 0)
    v14 = &qword_1ED80FCF0;
  else
    v14 = (uint64_t *)v9;
  v32 = v31;
  sub_1C57545DC(v7, __src, __len, v14, v10, 0, &v27, (uint64_t)v35, (uint64_t)v33, (uint64_t)v31);
  if (v32 == v31)
  {
    v15 = (void (**)(void))(v31[0] + 32);
  }
  else
  {
    if (!v32)
      goto LABEL_15;
    v15 = (void (**)(void))(*v32 + 40);
  }
  (*v15)();
LABEL_15:
  if (v34 == v33)
  {
    v16 = (void (**)(void))(v33[0] + 32);
  }
  else
  {
    if (!v34)
      goto LABEL_20;
    v16 = (void (**)(void))(*v34 + 40);
  }
  (*v16)();
LABEL_20:
  if (v36 == v35)
  {
    v17 = (void (**)(void))(v35[0] + 32);
  }
  else
  {
    if (!v36)
      goto LABEL_25;
    v17 = (void (**)(void))(*v36 + 40);
  }
  (*v17)();
LABEL_25:
  v18 = v27;
  if (v11)
  {
    if (!v27)
      goto LABEL_36;
    v19 = v27 + 2;
    do
    {
      v20 = __ldaxr(v19);
      v21 = --v20 == 0;
    }
    while (__stlxr(v20, v19));
  }
  else
  {
    if (!v27)
      goto LABEL_36;
    v22 = v27 + 2;
    do
    {
      v23 = __ldaxr(v22);
      v21 = --v23 == 0;
    }
    while (__stlxr(v23, v22));
  }
  if (v21)
    (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
LABEL_36:
  *(_QWORD *)(a1 + 1456) = 0;
  *(_OWORD *)(a1 + 1440) = 0u;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v28 = qword_1ED830BC0[0];
  v25 = atomic_load(&qword_1ED833418);
  if (v25 != -1)
  {
    v30[0] = sub_1C5754208;
    v30[1] = &v28;
    v29 = v30;
    std::__call_once(&qword_1ED833418, &v29, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C57545DC(uint64_t a1, void *__src, size_t __len, void *a4, size_t a5, int a6, unsigned int **a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int **v11;
  int v12;
  const void *v14;
  __int128 *p_dst;
  size_t v19;
  size_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  _BYTE *v32;
  _BYTE *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *__p[2];
  unint64_t v43;
  __int128 __dst;
  unint64_t v45;

  if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_54:
    abort();
  v10 = a8;
  v11 = a7;
  v12 = a6;
  v14 = a4;
  if (__len >= 0x17)
  {
    v19 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v19 = __len | 7;
    v24 = v19 + 1;
    p_dst = (__int128 *)operator new(v19 + 1);
    v25 = v24 | 0x8000000000000000;
    v12 = a6;
    v10 = a8;
    v11 = a7;
    v14 = a4;
    *((_QWORD *)&__dst + 1) = __len;
    v45 = v25;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v45) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  if (a5 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_54;
  if (a5 >= 0x17)
  {
    v27 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a5 | 7) != 0x17)
      v27 = a5 | 7;
    v28 = v27 + 1;
    v26 = operator new(v27 + 1);
    __p[1] = (void *)a5;
    v43 = v28 | 0x8000000000000000;
    __p[0] = v26;
    goto LABEL_16;
  }
  HIBYTE(v43) = a5;
  v26 = __p;
  if (a5)
LABEL_16:
    memmove(v26, v14, a5);
  *((_BYTE *)v26 + a5) = 0;
  v29 = *v11;
  if (v29)
  {
    v30 = v29 + 2;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  *(_QWORD *)a1 = off_1E817C690;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 112;
  *(_QWORD *)(a1 + 88) = a1 + 112;
  *(_QWORD *)(a1 + 96) = 32;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 384;
  *(_QWORD *)(a1 + 376) = 0x2000000000;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_QWORD *)(a1 + 896) = a1 + 904;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_BYTE *)(a1 + 1048) = 0;
  v32 = (_BYTE *)(a1 + 1072);
  *(_DWORD *)(a1 + 936) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 972) = 0u;
  *(_DWORD *)(a1 + 1008) = 0;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_DWORD *)(a1 + 1032) = 0;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_OWORD *)(a1 + 1056) = 0u;
  if (SHIBYTE(v45) < 0)
  {
    sub_1C47EBC30(v32, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)v32 = __dst;
    *(_QWORD *)(a1 + 1088) = v45;
  }
  v33 = (_BYTE *)(a1 + 1096);
  if (SHIBYTE(v43) < 0)
  {
    sub_1C47EBC30(v33, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)v33 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 1112) = v43;
  }
  *(_QWORD *)(a1 + 1120) = v29;
  if (v29)
  {
    v34 = v29 + 2;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
    *(_OWORD *)(a1 + 1128) = 0u;
    do
    {
      v36 = __ldaxr(v34);
      v37 = v36 - 1;
    }
    while (__stlxr(v37, v34));
    if (!v37)
      (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 8))(v29);
  }
  else
  {
    *(_OWORD *)(a1 + 1128) = 0u;
  }
  if (SHIBYTE(v43) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v45) < 0)
    operator delete((void *)__dst);
  *(_QWORD *)a1 = off_1E817C670;
  *(_QWORD *)(a1 + 1160) = 0x1000000000;
  *(_OWORD *)(a1 + 1144) = 0u;
  v38 = *(_QWORD *)(v10 + 24);
  if (v38)
  {
    if (v38 == v10)
    {
      *(_QWORD *)(a1 + 1200) = a1 + 1176;
      (*(void (**)(_QWORD))(**(_QWORD **)(v10 + 24) + 24))(*(_QWORD *)(v10 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 1200) = v38;
      *(_QWORD *)(v10 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1200) = 0;
  }
  v39 = *(_QWORD *)(a9 + 24);
  if (v39)
  {
    if (v39 == a9)
    {
      *(_QWORD *)(a1 + 1232) = a1 + 1208;
      (*(void (**)(_QWORD))(**(_QWORD **)(a9 + 24) + 24))(*(_QWORD *)(a9 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 1232) = v39;
      *(_QWORD *)(a9 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1232) = 0;
  }
  v40 = *(_QWORD *)(a10 + 24);
  if (v40)
  {
    if (v40 == a10)
    {
      *(_QWORD *)(a1 + 1264) = a1 + 1240;
      (*(void (**)(_QWORD))(**(_QWORD **)(a10 + 24) + 24))(*(_QWORD *)(a10 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 1264) = v40;
      *(_QWORD *)(a10 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 1264) = 0;
  }
  *(_QWORD *)(a1 + 1272) = 0;
  *(_BYTE *)(a1 + 1280) = 0;
  *(_DWORD *)(a1 + 1284) = v12;
  *(_DWORD *)(a1 + 1320) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(_DWORD *)(a1 + 1344) = 0;
  *(_QWORD *)(a1 + 1368) = 0x800000000;
  *(_OWORD *)(a1 + 1352) = 0u;
  *(_OWORD *)(a1 + 1392) = 0u;
  return a1;
}

uint64_t sub_1C57549D0(uint64_t a1, const llvm::MemoryBuffer **a2, uint64_t a3)
{
  const llvm::MemoryBuffer *v6;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  const std::string::value_type *v10;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  BOOL v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  const std::error_category *v20;
  std::string::size_type v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned __int8 *v27;
  size_t v28;
  std::string::size_type v29;
  _BYTE *v30;
  _BYTE *v31;
  llvm::PseudoProbeManager *v32;
  llvm::PseudoProbeManager *v33;
  _QWORD *v34;
  std::string::size_type v35;
  _QWORD *v36;
  std::string::size_type v37;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[4];
  __int16 v51;
  std::string v52;
  uint64_t v53;
  int v54;
  uint64_t *v55;
  void *v56[2];
  std::string::size_type v57;
  std::error_code v58;
  void *__p[2];
  uint64_t v60;
  __int128 __dst;
  uint64_t v62;
  std::error_code v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = (__int128 *)(a1 + 1072);
  if (*(char *)(a1 + 1095) < 0)
  {
    sub_1C47EBC30(&__dst, *(void **)(a1 + 1072), *(_QWORD *)(a1 + 1080));
  }
  else
  {
    __dst = *v7;
    v62 = *(_QWORD *)(a1 + 1088);
  }
  v8 = *(_QWORD *)(a1 + 1120);
  if (*(char *)(a1 + 1119) < 0)
  {
    sub_1C47EBC30(__p, *(void **)(a1 + 1096), *(_QWORD *)(a1 + 1104));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 1096);
    v60 = *(_QWORD *)(a1 + 1112);
  }
  llvm::sampleprof::SampleProfileReader::create((uint64_t)&__dst, v6, v8, 0, (uint64_t)__p, (uint64_t)&v63);
  if (SHIBYTE(v60) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v62) < 0)
    operator delete((void *)__dst);
  if ((v64 & 1) != 0)
  {
    v9 = *(_QWORD *)&v63.__val_;
    v58 = v63;
    if (v63.__val_)
    {
      std::error_code::message(&v52, &v58);
      v10 = "Could not open profile: ";
LABEL_14:
      v11 = std::string::insert(&v52, 0, v10);
      v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)v56 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v57 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v52.__r_.__value_.__l.__data_);
      v13 = *(_BYTE *)(a1 + 1095);
      v14 = v13 < 0;
      if (v13 >= 0)
        v15 = (std::string::size_type)v7;
      else
        v15 = *(_QWORD *)(a1 + 1072);
      v16 = v13 & 0x7F;
      if (v14)
        v16 = *(_QWORD *)(a1 + 1080);
      v51 = 260;
      v50[0] = (uint64_t)v56;
      LODWORD(v52.__r_.__value_.__r.__words[1]) = 8;
      v52.__r_.__value_.__s.__data_[12] = 0;
      v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E814E700;
      v52.__r_.__value_.__r.__words[2] = v15;
      v53 = v16;
      v54 = 0;
      v55 = v50;
      llvm::LLVMContext::diagnose((uint64_t)v6, (const llvm::DiagnosticInfo *)&v52);
      if (SHIBYTE(v57) < 0)
        operator delete(v56[0]);
      goto LABEL_23;
    }
  }
  else
  {
    std::system_category();
    v9 = *(_QWORD *)&v63.__val_;
  }
  *(_QWORD *)&v63.__val_ = 0;
  v19 = *(_QWORD *)(a1 + 1056);
  *(_QWORD *)(a1 + 1056) = v9;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v9 = *(_QWORD *)(a1 + 1056);
  }
  (*(void (**)(uint64_t, BOOL))(*(_QWORD *)v9 + 80))(v9, *(_DWORD *)(a1 + 1284) == 2);
  *(_QWORD *)(*(_QWORD *)(a1 + 1056) + 136) = a2;
  *(_QWORD *)&v58.__val_ = sub_1C6200418(*(llvm::LLVMContext ***)(a1 + 1056));
  v58.__cat_ = v20;
  if (v58.__val_)
  {
    std::error_code::message(&v52, &v58);
    v10 = "profile reading failed: ";
    goto LABEL_14;
  }
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 1056) + 48))(&v52);
  v21 = v52.__r_.__value_.__r.__words[0];
  v52.__r_.__value_.__r.__words[0] = 0;
  v22 = *(_QWORD *)(a1 + 1288);
  *(_QWORD *)(a1 + 1288) = v21;
  if (v22)
  {
    v41 = sub_1C62A2428(v22);
    MEMORY[0x1CAA32FC0](v41, 0x10B0C408C61162ELL);
    v42 = v52.__r_.__value_.__r.__words[0];
    v52.__r_.__value_.__r.__words[0] = 0;
    if (v42)
    {
      v43 = sub_1C62A2428(v42);
      MEMORY[0x1CAA32FC0](v43, 0x10B0C408C61162ELL);
    }
  }
  if (!byte_1ED80F248 || !*(_QWORD *)(a1 + 1288))
  {
    *(_BYTE *)(a1 + 1384) = 0;
LABEL_42:
    if (!a3)
      goto LABEL_46;
    goto LABEL_43;
  }
  v23 = byte_1ED80F0C8;
  *(_BYTE *)(a1 + 1384) = byte_1ED80F0C8 ^ 1;
  if (v23)
    goto LABEL_42;
  sub_1C62A23BC(a1 + 1352);
  v24 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 1056) + 56))(*(_QWORD *)(a1 + 1056));
  if (v24)
  {
    v25 = *v24;
    v26 = v24[1];
    while (v25 != v26)
    {
      v27 = *(unsigned __int8 **)v25;
      v28 = *(_QWORD *)(v25 + 8);
      v25 += 16;
      sub_1C4F024D8((llvm::StringMapImpl *)(a1 + 1352), v27, v28);
    }
  }
  *(_BYTE *)(a1 + 1048) = 1;
  if (a3)
  {
LABEL_43:
    v29 = qword_1ED80FDE0;
    if (byte_1ED80FDEF >= 0)
      v29 = byte_1ED80FDEF & 0x7F;
    if (v29)
    {
      v49 = 0;
      if (byte_1ED80FDEF >= 0)
        v46 = &qword_1ED80FDD8;
      else
        v46 = (uint64_t *)qword_1ED80FDD8;
      v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
      v52.__r_.__value_.__l.__size_ = v29;
      v52.__r_.__value_.__r.__words[2] = __PAIR64__(dword_1EF8F35F0, dword_1EF8F3398);
      LODWORD(v53) = dword_1EF8F3848;
      llvm::getReplayInlineAdvisor((const llvm::Module *)a2, a3, (uint64_t)v6, &v49, (__int128 *)&v52, 0, v50);
      v47 = *(_QWORD *)(a1 + 1392);
      *(_QWORD *)(a1 + 1392) = v50[0];
      if (v47)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
      v48 = v49;
      v49 = 0;
      if (v48)
        (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
    }
  }
LABEL_46:
  v30 = *(_BYTE **)(a1 + 1056);
  if (v30[121] || v30[122] || v30[120])
  {
    if (!word_1ED82CCC0)
    {
      v52.__r_.__value_.__s.__data_[0] = 1;
      byte_1ED82CD38 = 1;
      if (!qword_1ED82CD70)
        goto LABEL_95;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)qword_1ED82CD70 + 48))(qword_1ED82CD70, &v52);
    }
    if (!word_1ED837B20)
    {
      v52.__r_.__value_.__s.__data_[0] = 1;
      byte_1ED837B98 = 1;
      if (!qword_1ED837BD0)
        goto LABEL_95;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)qword_1ED837BD0 + 48))(qword_1ED837BD0, &v52);
    }
    if (!word_1ED837270)
    {
      v52.__r_.__value_.__s.__data_[0] = 1;
      byte_1ED8372E8 = 1;
      if (!qword_1ED837320)
        goto LABEL_95;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)qword_1ED837320 + 48))(qword_1ED837320, &v52);
    }
  }
  v31 = *(_BYTE **)(a1 + 1056);
  if (v31[121] || v31[122])
  {
    *(_BYTE *)(a1 + 1280) = v31[121];
    if (!word_1ED80F4D0)
    {
      v52.__r_.__value_.__s.__data_[0] = 1;
      byte_1ED80F548 = 1;
      if (!qword_1ED80F580)
        goto LABEL_95;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)qword_1ED80F580 + 48))(qword_1ED80F580, &v52);
    }
    if (!word_1ED80F7D0)
    {
      v52.__r_.__value_.__s.__data_[0] = 1;
      byte_1ED80F848 = 1;
      if (!qword_1ED80F880)
        goto LABEL_95;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)qword_1ED80F880 + 48))(qword_1ED80F880, &v52);
    }
    if (!word_1ED80F890)
    {
      v52.__r_.__value_.__s.__data_[0] = 1;
      byte_1ED80F908 = 1;
      if (!qword_1ED80F940)
        goto LABEL_95;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)qword_1ED80F940 + 48))(qword_1ED80F940, &v52);
    }
    if (word_1ED80F950)
      goto LABEL_72;
    v52.__r_.__value_.__s.__data_[0] = 1;
    byte_1ED80F9C8 = 1;
    if (qword_1ED80FA00)
    {
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)qword_1ED80FA00 + 48))(qword_1ED80FA00, &v52);
LABEL_72:
      v31 = *(_BYTE **)(a1 + 1056);
      if (llvm::sampleprof::FunctionSamples::ProfileIsCSFlat)
      {
        v44 = (uint64_t)(v31 + 8);
        v45 = operator new();
        llvm::SampleContextTracker::SampleContextTracker(v45, v44, a1 + 1328);
        v52.__r_.__value_.__r.__words[0] = 0;
        sub_1C575B0D4((uint64_t *)(a1 + 1272), v45);
        sub_1C575B0D4((uint64_t *)&v52, 0);
        v31 = *(_BYTE **)(a1 + 1056);
      }
      goto LABEL_74;
    }
LABEL_95:
    sub_1C485C2F0();
    return sub_1C57550F8();
  }
LABEL_74:
  if (!v31[120])
  {
    v17 = 1;
    goto LABEL_24;
  }
  v32 = (llvm::PseudoProbeManager *)operator new();
  v33 = llvm::PseudoProbeManager::PseudoProbeManager(v32, (const llvm::Module *)a2);
  v34 = *(_QWORD **)(a1 + 1400);
  *(_QWORD *)(a1 + 1400) = v33;
  if (v34)
  {
    MEMORY[0x1CAA32FB4](*v34, 8);
    MEMORY[0x1CAA32FC0](v34, 0x1020C405AF6BDC9);
  }
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)"llvm.pseudo_probe_desc";
  LOWORD(v54) = 259;
  v17 = 1;
  if (llvm::Module::getNamedMetadata((uint64_t)a2, (uint64_t)&v52))
    goto LABEL_24;
  v37 = (std::string::size_type)a2[21];
  v36 = a2 + 21;
  v35 = v37;
  v38 = *((_BYTE *)v36 + 23);
  v39 = v38;
  if (v38 >= 0)
    v35 = (std::string::size_type)v36;
  v40 = v38 & 0x7F;
  if (v39 < 0)
    v40 = v36[1];
  v50[0] = (uint64_t)"Pseudo-probe-based profile requires SampleProfileProbePass";
  v51 = 259;
  LODWORD(v52.__r_.__value_.__r.__words[1]) = 8;
  v52.__r_.__value_.__s.__data_[12] = 1;
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E814E700;
  v52.__r_.__value_.__r.__words[2] = v35;
  v53 = v40;
  v54 = 0;
  v55 = v50;
  llvm::LLVMContext::diagnose((uint64_t)v6, (const llvm::DiagnosticInfo *)&v52);
LABEL_23:
  v17 = 0;
LABEL_24:
  if ((v64 & 1) == 0)
  {
    if (*(_QWORD *)&v63.__val_)
      (*(void (**)(_QWORD))(**(_QWORD **)&v63.__val_ + 8))(*(_QWORD *)&v63.__val_);
  }
  return v17;
}

void sub_1C57550F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  llvm::Value *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value **v14;
  llvm::Value *v15;
  int v16;
  int v17;
  llvm::Value *v18;
  void *v19;
  int *v20;
  void *v21;
  int *v22;
  int *v23;
  void *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  BOOL v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  llvm::Value *v39;
  BOOL v40;
  uint64_t v41;
  BOOL v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  void *v45;
  unsigned __int8 *v46;
  size_t v47;
  size_t **v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  llvm *v53;
  BOOL v54;
  llvm::raw_ostream *v55;
  void *v56;
  int v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned __int8 v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  int jj;
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  BOOL v74;
  char *v76;
  uint64_t **v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  unsigned __int8 v98;
  uint64_t v99;
  unint64_t v100;
  unsigned int v101;
  int i;
  unsigned int v103;
  uint64_t *v104;
  uint64_t v105;
  BOOL v106;
  char *v108;
  uint64_t **v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  void *v117;
  uint64_t *v118;
  int v119;
  unint64_t v120;
  uint64_t **v121;
  int v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  unsigned __int8 v132;
  uint64_t v133;
  unint64_t v134;
  unsigned int v135;
  int kk;
  unsigned int v137;
  uint64_t v138;
  _QWORD *v139;
  BOOL v140;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t **v147;
  uint64_t *v148;
  int v149;
  int v150;
  uint64_t *v151;
  char *v152;
  size_t v153;
  size_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  unsigned int v159;
  int mm;
  int v161;
  uint64_t v162;
  const void *v163;
  uint64_t v164;
  size_t v165;
  uint64_t v166;
  uint64_t v167;
  const void *v168;
  int v169;
  size_t v170;
  size_t v171;
  unsigned __int8 *v172;
  int v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  uint64_t v179;
  _QWORD *v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  llvm::OptimizationRemarkEmitter *v184;
  llvm::OptimizationRemarkEmitter *v185;
  uint64_t v186;
  void *v187;
  uint64_t v188;
  uint64_t ResultImpl;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t BaseSamplesFor;
  uint64_t **v194;
  int *v195;
  size_t v196;
  uint64_t v197;
  int v198;
  uint64_t v199;
  uint64_t *Desc;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  char v207;
  uint64_t v208;
  int v209;
  uint64_t v211;
  uint64_t v212;
  unsigned __int8 *v213;
  uint64_t *v214;
  _BOOL4 v215;
  uint64_t v216;
  void **v217;
  unsigned __int8 *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  llvm::BasicBlock *v222;
  _BOOL4 v223;
  uint64_t v224;
  _QWORD *v225;
  int v226;
  uint64_t v227;
  uint64_t *v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  void **v232;
  void **v233;
  _QWORD *v234;
  int32x2_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  _QWORD *v240;
  void *v241;
  int v242;
  int v243;
  unsigned int v244;
  uint64_t v246;
  int v247;
  uint64_t v248;
  int v249;
  unsigned int v250;
  _QWORD *v251;
  uint64_t v252;
  _QWORD *v253;
  int v254;
  BOOL v255;
  unsigned int v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  uint64_t v261;
  unint64_t v262;
  __int128 v263;
  uint64_t *v264;
  _QWORD *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  uint64_t v269;
  _BOOL8 v270;
  int v271;
  int v272;
  _QWORD *v273;
  _QWORD *v274;
  int v275;
  uint64_t v276;
  int v277;
  _QWORD *v278;
  uint64_t v279;
  int v280;
  int v281;
  uint64_t v282;
  _QWORD *v283;
  _QWORD *v284;
  int v285;
  int v286;
  uint64_t *v287;
  char *v288;
  char *v289;
  char *v290;
  uint64_t *v291;
  uint64_t *v292;
  uint64_t nn;
  uint64_t v294;
  unsigned int v295;
  BOOL v296;
  uint64_t v297;
  __int128 v299;
  uint64_t v300;
  unint64_t v301;
  unint64_t v302;
  char *v303;
  __int128 v304;
  char *v305;
  char *i1;
  __int128 v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t i2;
  uint64_t v311;
  uint64_t v312;
  uint64_t i5;
  uint64_t v314;
  int v315;
  unsigned int v316;
  llvm::Value *v318;
  llvm::MDNode *v319;
  uint64_t v320;
  uint64_t i3;
  uint64_t v322;
  int v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  llvm::MDNode *BranchWeights;
  uint64_t v328;
  unint64_t v329;
  unsigned int v330;
  unint64_t v331;
  char v332;
  void *v333;
  _OWORD *v334;
  char *i4;
  unint64_t v337;
  uint64_t v338;
  int v339;
  unint64_t *v340;
  _QWORD *v341;
  _OWORD *v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  BOOL v348;
  uint64_t *v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t v352;
  unsigned int v353;
  unsigned int v354;
  _QWORD *v355;
  _QWORD *v356;
  uint64_t v357;
  _QWORD *v358;
  _QWORD *v359;
  void *v360;
  _QWORD *v361;
  _QWORD *v362;
  _QWORD *v363;
  int v364;
  unsigned __int8 *v365;
  unint64_t v366;
  unint64_t v367;
  int v368;
  unsigned int v369;
  void *Successor;
  _QWORD *v371;
  unint64_t v372;
  int v373;
  _QWORD *v374;
  unint64_t v375;
  unint64_t v376;
  uint64_t v377;
  int v378;
  unsigned int v379;
  unint64_t i6;
  int v381;
  unsigned int v382;
  _QWORD *v383;
  _QWORD *v384;
  llvm::MDNode *v385;
  llvm::OptimizationRemarkEmitter *v386;
  uint64_t v387;
  uint64_t v388;
  _QWORD *v389;
  unsigned int v390;
  uint64_t v391;
  void *v392;
  uint64_t v393;
  char *v394;
  unint64_t v395;
  void **v396;
  char *v397;
  unint64_t v398;
  void **v399;
  __int128 v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  __int128 v404;
  char *v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  _BOOL4 v409;
  __int128 v410;
  char *v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  llvm *v415;
  uint64_t v416;
  uint64_t *v417;
  unsigned int v418;
  uint64_t v420;
  int v421;
  uint64_t v422;
  int v423;
  unsigned int v424;
  _QWORD *v425;
  _QWORD ***v426;
  _QWORD *v427;
  int v428;
  BOOL v429;
  unsigned int v430;
  uint64_t v431;
  _QWORD *v432;
  uint64_t v433;
  _QWORD *v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t **v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  unint64_t v441;
  _BOOL8 v442;
  float v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t *v446;
  uint64_t *v447;
  __int128 v448;
  uint64_t v449;
  char *v450;
  uint64_t v451;
  unint64_t v452;
  unint64_t v453;
  unint64_t v454;
  unint64_t v455;
  char *v456;
  __int128 v457;
  char *v458;
  char *v459;
  __int128 v460;
  uint64_t v461;
  _QWORD *v462;
  void *v463;
  uint64_t v464;
  uint64_t *v465;
  uint64_t *v466;
  uint64_t v467;
  __int128 v468;
  uint64_t v469;
  char *v470;
  uint64_t v471;
  unint64_t v472;
  unint64_t v473;
  unint64_t v474;
  unint64_t v475;
  char *v476;
  __int128 v477;
  char *v478;
  char *v479;
  __int128 v480;
  int v481;
  unint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t *v485;
  uint64_t v486;
  uint64_t *v487;
  uint64_t *v488;
  uint64_t *v489;
  llvm::Metadata *MD;
  uint64_t v491;
  _QWORD *v492;
  _QWORD *j;
  uint64_t v494;
  llvm::SampleContextTracker *v495;
  _QWORD *v496;
  _QWORD *v497;
  unsigned __int8 *FuncNameFor;
  size_t v499;
  _QWORD *v500;
  _QWORD *v501;
  uint64_t v502;
  llvm::ContextTrieNode *v503;
  llvm::Function *v504;
  llvm::Function *v505;
  uint64_t v506;
  unsigned __int8 *v507;
  size_t v508;
  uint64_t v509;
  uint64_t v510;
  BOOL v511;
  unint64_t v512;
  unint64_t v513;
  unsigned __int8 *v514;
  size_t v515;
  int v516;
  size_t v517;
  unsigned __int8 *v518;
  int v519;
  int v520;
  _QWORD *v521;
  char *v522;
  uint64_t v523;
  int v524;
  int v525;
  uint64_t v526;
  _QWORD *v527;
  char *v528;
  unsigned __int8 *v529;
  int v530;
  unsigned __int8 *v531;
  size_t v532;
  size_t v533;
  unsigned __int8 *v534;
  size_t v535;
  llvm::Function *v536;
  llvm::Function *v537;
  uint64_t v538;
  _QWORD *v539;
  _BYTE *v540;
  char *v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  int v545;
  uint64_t v546;
  unsigned __int8 v547;
  uint64_t v548;
  unint64_t v549;
  unsigned int v550;
  int k;
  unsigned int v552;
  uint64_t *v553;
  uint64_t v554;
  BOOL v555;
  uint64_t v557;
  unsigned __int8 *v558;
  size_t v559;
  _QWORD *v560;
  _QWORD *v561;
  unint64_t v562;
  unint64_t v563;
  const void ***v564;
  const void ***v565;
  uint64_t v566;
  uint64_t v567;
  size_t v568;
  const void *v569;
  int v570;
  char *v571;
  unsigned __int8 *v572;
  int v573;
  uint64_t v574;
  int v575;
  int v576;
  uint64_t v577;
  _QWORD *v578;
  int v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  int v583;
  uint64_t v584;
  unsigned __int8 v585;
  uint64_t v586;
  unint64_t v587;
  unsigned int v588;
  int m;
  unsigned int v590;
  uint64_t *v591;
  uint64_t v592;
  BOOL v593;
  char *v595;
  uint64_t **v596;
  char *v597;
  uint64_t v598;
  unint64_t v599;
  uint64_t v600;
  unint64_t v601;
  char *v602;
  char *v603;
  uint64_t v604;
  int v605;
  unint64_t v606;
  unint64_t *v607;
  unint64_t *v608;
  unint64_t v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t *v612;
  unint64_t *v613;
  uint64_t *v614;
  uint64_t **v615;
  _QWORD *v616;
  uint64_t v617;
  uint64_t *v618;
  uint64_t *v619;
  uint64_t *v620;
  uint64_t **v621;
  uint64_t **v622;
  _QWORD *v623;
  _QWORD *v624;
  uint64_t *v625;
  unint64_t v626;
  _QWORD *v627;
  unint64_t v628;
  _QWORD *v629;
  uint64_t *v630;
  int v631;
  unint64_t v632;
  unint64_t v633;
  unint64_t v634;
  unint64_t v635;
  uint8x8_t v636;
  _QWORD *v637;
  _QWORD *ii;
  unint64_t v639;
  _QWORD *v640;
  float v641;
  _BOOL8 v642;
  unint64_t v643;
  unint64_t v644;
  int8x8_t prime;
  void *v646;
  void *v647;
  uint64_t v648;
  _QWORD **v649;
  unint64_t v650;
  uint8x8_t v651;
  unint64_t v652;
  uint8x8_t v653;
  uint64_t v654;
  _QWORD *v655;
  uint64_t v656;
  _QWORD *v657;
  unint64_t v658;
  uint64_t *v659;
  uint64_t **v660;
  unint64_t v661;
  void *v662;
  uint64_t v663;
  char *v664;
  char *v665;
  char *v666;
  int64_t v667;
  unint64_t v668;
  uint64_t v669;
  unint64_t v670;
  char *v671;
  char *v672;
  uint64_t v673;
  _QWORD *v674;
  _QWORD *v675;
  _QWORD *v676;
  char *v677;
  BOOL v678;
  char *v679;
  uint64_t v680;
  void **v681;
  void **v682;
  unint64_t v683;
  unint64_t v684;
  uint64_t v685;
  void *v686;
  _QWORD *v687;
  _QWORD *v688;
  void *v689;
  _QWORD *n;
  uint64_t v691;
  uint64_t v692;
  int v693;
  unsigned int *v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t *v698;
  _QWORD *v699;
  unsigned int *v700;
  _QWORD **v701;
  void **v702;
  uint64_t **v703;
  _QWORD *v706;
  unsigned int v707;
  uint64_t **v708;
  llvm::SampleContextTracker *v709;
  int v710;
  _QWORD *v711;
  int v712;
  int v713;
  unint64_t v714;
  uint64_t v715;
  uint64_t v716;
  int v717;
  uint64_t v718;
  unsigned int v719;
  uint64_t v720;
  llvm::Function *v721;
  llvm::Function *v722;
  uint64_t v723;
  llvm::ContextTrieNode *v724;
  uint64_t v725;
  unint64_t v726;
  unint64_t v727;
  uint64_t v728;
  int v729;
  char *FirstNonPHIOrDbgOrLifetime;
  char *v731;
  uint64_t *v732;
  unint64_t v733;
  const void ***v734;
  void *__p;
  uint64_t **v737;
  char *v738;
  __int128 v739;
  size_t v740[4];
  llvm::Value *v741;
  llvm::OptimizationRemarkEmitter *v742;
  uint64_t v743[2];
  int v744;
  uint64_t **v745;
  uint64_t *v746;
  uint64_t v747[4];
  char v748;
  unint64_t v749;
  void *v750;
  const void ***v751;
  char *v752;
  unsigned __int8 *v753;
  _QWORD *v754;
  uint64_t v755;
  unsigned __int8 *v756;
  __int128 v757;
  __int128 v758;
  __int128 v759;
  __int128 v760;
  __int128 v761;
  float v762;
  void *v763[4];
  int v764;
  void *__src;
  char *v766;
  unint64_t v767;
  void *v768;
  unsigned int v769;
  uint64_t v770;
  void *__s1[4];
  __int128 v772;
  __int128 v773;
  __int128 v774;
  __int128 v775;
  _QWORD v776[32];
  char v777;
  int v778;
  uint64_t v779;
  uint64_t v780;

  v780 = *MEMORY[0x1E0C80C00];
  v7 = a1 + 1328;
  v701 = *(_QWORD ***)(a1 + 1056);
  if (((unsigned int (*)(_QWORD **))(*v701)[9])(v701))
  {
    v8 = *(_QWORD *)(a2 + 32);
    if (v8 != a2 + 24)
    {
      while (1)
      {
        v9 = v8 ? (llvm::Value *)(v8 - 56) : 0;
        if ((*((_BYTE *)v9 + 23) & 0x10) != 0)
          break;
        v19 = 0;
        v20 = (int *)&byte_1C871356D;
LABEL_15:
        *(_OWORD *)__s1 = xmmword_1C85F4BB0;
        __s1[2] = 0;
        llvm::MD5::update((int *)__s1, v20, (size_t)v19);
        llvm::MD5::final((int *)__s1, (int *)&v757);
        v763[0] = (void *)v757;
        v763[1] = v20;
        v763[2] = v19;
        sub_1C62A25A0((uint64_t)__s1, v7, v763, &v763[1]);
        v22 = (int *)sub_1C6200B8C(v9);
        v23 = v22;
        v25 = v24;
        if (v24 != v19 || v19 && memcmp(v22, v20, (size_t)v19))
        {
          *(_OWORD *)__s1 = xmmword_1C85F4BB0;
          __s1[2] = 0;
          llvm::MD5::update((int *)__s1, v23, (size_t)v25);
          llvm::MD5::final((int *)__s1, (int *)&v757);
          v763[0] = (void *)v757;
          v763[1] = v23;
          v763[2] = v25;
          sub_1C62A25A0((uint64_t)__s1, v7, v763, &v763[1]);
        }
        v8 = *(_QWORD *)(v8 + 8);
        if (v8 == a2 + 24)
          goto LABEL_22;
      }
      v10 = ***(_QWORD ***)v9;
      v11 = *(_QWORD *)(v10 + 152);
      v12 = *(unsigned int *)(v10 + 168);
      if ((_DWORD)v12)
      {
        LODWORD(v13) = (v12 - 1) & ((v9 >> 4) ^ (v9 >> 9));
        v14 = (llvm::Value **)(v11 + 16 * v13);
        v15 = *v14;
        if (*v14 == v9)
        {
LABEL_14:
          v18 = v14[1];
          v21 = *(void **)v18;
          v20 = (int *)((char *)v18 + 16);
          v19 = v21;
          goto LABEL_15;
        }
        v16 = 1;
        while (v15 != (llvm::Value *)-4096)
        {
          v17 = v13 + v16++;
          v13 = v17 & (v12 - 1);
          v15 = *(llvm::Value **)(v11 + 16 * v13);
          if (v15 == v9)
          {
            v14 = (llvm::Value **)(v11 + 16 * v13);
            goto LABEL_14;
          }
        }
      }
      v14 = (llvm::Value **)(v11 + 16 * v12);
      goto LABEL_14;
    }
LABEL_22:
    sub_1C575B128(v701[3], v7);
  }
  *(_QWORD *)(a1 + 1128) = a4;
  if (!llvm::Module::getProfileSummary((llvm::Module *)a2, 0))
  {
    MD = (llvm::Metadata *)llvm::ProfileSummary::getMD(*(llvm::ProfileSummary **)(*(_QWORD *)(a1 + 1056) + 104), *(llvm::LLVMContext **)a2, 1, 1);
    llvm::Module::setModuleFlag((uint64_t **)a2, (llvm::Type *)1, "ProfileSummary", 0xEuLL, MD);
    llvm::ProfileSummaryInfo::refresh(*(unsigned __int8 **)(a1 + 1128));
  }
  v26 = *(_QWORD *)(a1 + 1056);
  v27 = *(_QWORD **)(v26 + 24);
  if (v27)
  {
    v28 = *(_QWORD *)(a1 + 1296);
    do
    {
      v28 += v27[14];
      v27 = (_QWORD *)*v27;
    }
    while (v27);
    *(_QWORD *)(a1 + 1296) = v28;
  }
  v29 = *(_QWORD *)(a2 + 112);
  v30 = *(uint64_t **)v29;
  v31 = *(unsigned int *)(v29 + 8);
  v694 = (unsigned int *)v7;
  v725 = a2;
  v32 = v30;
  if ((_DWORD)v31)
  {
    while (1)
    {
      v33 = !*v32 || *v32 == -8;
      if (!v33)
        break;
      ++v32;
    }
  }
  v34 = &v30[v31];
  if (v32 != v34)
  {
    v35 = *(_QWORD *)(v26 + 112);
    v36 = a1 + 1144;
    v37 = *v32;
    do
    {
      v38 = *(void **)v37;
      if (*(_BYTE *)(*(_QWORD *)(v37 + 8) + 16))
        v39 = 0;
      else
        v39 = *(llvm::Value **)(v37 + 8);
      if (v39)
        v40 = v38 == 0;
      else
        v40 = 1;
      if (v40)
        goto LABEL_46;
      v43 = (unsigned __int8 *)(v37 + 16);
      (*sub_1C6136E50(v36, (unsigned __int8 *)(v37 + 16), *(_QWORD *)v37))[1] = (size_t)v39;
      v44 = (unsigned __int8 *)sub_1C6200B8C(v39);
      v46 = v44;
      v47 = (size_t)v45;
      if (v38 == v45)
      {
        if (!memcmp(v43, v44, (size_t)v38))
          goto LABEL_59;
      }
      else if (!v45)
      {
LABEL_59:
        if (!v35)
          goto LABEL_46;
        goto LABEL_60;
      }
      v740[2] = (size_t)v46;
      v740[3] = v47;
      v741 = v39;
      v48 = sub_1C62A263C(v36, v46, v47, (size_t *)&v741);
      if (!v49)
        (*v48)[1] = 0;
      v43 = v46;
      v38 = (void *)v47;
      if (!v35)
        goto LABEL_46;
LABEL_60:
      llvm::sampleprof::SampleProfileReaderItaniumRemapper::lookUpNameInProfile(v35, (char *)v43, (unint64_t)v38, (uint64_t)__s1);
      if (LOBYTE(__s1[2]))
      {
        if (__s1[1] == v38)
        {
          if (memcmp(__s1[0], v43, (size_t)v38) && v38)
          {
LABEL_66:
            v739 = *(_OWORD *)__s1;
            v740[0] = (size_t)v39;
            sub_1C62A263C(v36, (unsigned __int8 *)__s1[0], (size_t)__s1[1], v740);
            goto LABEL_46;
          }
        }
        else if (__s1[1])
        {
          goto LABEL_66;
        }
      }
      do
      {
LABEL_46:
        v41 = v32[1];
        ++v32;
        v37 = v41;
        if (v41)
          v42 = v37 == -8;
        else
          v42 = 1;
      }
      while (v42);
    }
    while (v32 != v34);
  }
  v50 = v725 + 24;
  __p = 0;
  v737 = 0;
  v738 = 0;
  v51 = -1;
  v52 = v725 + 24;
  do
  {
    v52 = *(_QWORD *)(v52 + 8);
    ++v51;
  }
  while (v52 != v50);
  sub_1C4DB1D18((uint64_t)&__p, v51);
  if (byte_1ED80F3C8)
    v54 = 1;
  else
    v54 = byte_1ED80F488 == 0;
  if (!v54)
  {
    v55 = (llvm::raw_ostream *)llvm::errs(v53);
    v56 = (void *)*((_QWORD *)v55 + 4);
    if (*((_QWORD *)v55 + 3) - (_QWORD)v56 > 0x66uLL)
    {
      qmemcpy(v56, "WARNING: -use-profiled-call-graph ignored, should be used together with -sample-profile-top-down-load.\n", 103);
      *((_QWORD *)v55 + 4) += 103;
    }
    else
    {
      llvm::raw_ostream::write(v55, "WARNING: -use-profiled-call-graph ignored, should be used together with -sample-profile-top-down-load.\n", 0x67uLL);
    }
  }
  if (!a5 || !byte_1ED80F3C8)
  {
    v87 = a1;
    if (byte_1ED80F308)
    {
      LOBYTE(__s1[0]) = 0;
      byte_1ED80F308 = 0;
      if (!qword_1ED80F340)
      {
LABEL_1277:
        sub_1C485C2F0();
        __break(1u);
        return;
      }
      (*(void (**)(uint64_t, void **))(*(_QWORD *)qword_1ED80F340 + 48))(qword_1ED80F340, __s1);
      v87 = a1;
    }
    v91 = *(_QWORD *)(v725 + 32);
    if (v91 == v50)
      goto LABEL_209;
    v92 = &llvm::hashing::detail::fixed_seed_override;
    while (1)
    {
      if (v91)
        v93 = v91 - 56;
      else
        v93 = 0;
      if (v91 && *(_BYTE *)(v93 + 16) == 3)
      {
        if ((*(_DWORD *)(v93 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_203;
      }
      else if (!*(_BYTE *)(v93 + 16) && *(_QWORD *)(v93 + 72) == v93 + 72 && (*(_BYTE *)(v93 + 34) & 0x80) == 0)
      {
        goto LABEL_203;
      }
      v94 = *(_QWORD *)(v93 + 112);
      if (!v94)
        goto LABEL_203;
      if (!*(_DWORD *)(v94 + 8))
        goto LABEL_203;
      v95 = *(_QWORD *)(v94 + 40);
      if (!v95)
        goto LABEL_203;
      v96 = *(_DWORD *)(v95 + 40);
      if (!v96)
        goto LABEL_203;
      v97 = *(_QWORD *)(v95 + 24);
      v98 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v98 & 1) == 0)
      {
        v119 = __cxa_guard_acquire(&qword_1ED7EAC88);
        v92 = &llvm::hashing::detail::fixed_seed_override;
        v87 = a1;
        if (v119)
        {
          v120 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v120 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v120;
          __cxa_guard_release(&qword_1ED7EAC88);
          v92 = &llvm::hashing::detail::fixed_seed_override;
          v87 = a1;
        }
      }
      v99 = __ROR8__(qword_1ED7EAC80 ^ 0x3A4251CF5CABDDE3, 30);
      v100 = 0x9DDFEA08EB382D69
           * ((qword_1ED7EAC80 + 0x20E38D834E0EEBC9) ^ ((0x9DDFEA08EB382D69
                                                         * ((v99 - 0x3222A10545348927) ^ (qword_1ED7EAC80
                                                                                          + 0x20E38D834E0EEBC9))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v99 - 0x3222A10545348927) ^ (qword_1ED7EAC80 + 0x20E38D834E0EEBC9))));
      v101 = -348639895 * ((v100 >> 47) ^ v100);
      for (i = 1; ; ++i)
      {
        v103 = v101 & (v96 - 1);
        v104 = (uint64_t *)(v97 + 24 * v103);
        v105 = *v104;
        if (*v104 == -1)
        {
          if ("use-sample-profile" == (char *)-1)
            goto LABEL_186;
          goto LABEL_172;
        }
        if (v105 != -2)
          break;
        if ("use-sample-profile" == (char *)-2)
          goto LABEL_186;
LABEL_172:
        if (v105 == -1)
          goto LABEL_203;
        v101 = i + v103;
      }
      if (v104[1] != 18)
        goto LABEL_172;
      v106 = *(_QWORD *)v105 == 0x706D61732D657375 && *(_QWORD *)(v105 + 8) == 0x69666F72702D656CLL;
      if (!v106 || *(_WORD *)(v105 + 16) != 25964)
        goto LABEL_172;
LABEL_186:
      v108 = (char *)v737;
      if (v737 >= (uint64_t **)v738)
      {
        v110 = (char *)__p;
        v111 = ((char *)v737 - (_BYTE *)__p) >> 3;
        v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 61)
          goto LABEL_1275;
        v113 = v738 - (_BYTE *)__p;
        if ((v738 - (_BYTE *)__p) >> 2 > v112)
          v112 = v113 >> 2;
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFF8)
          v112 = 0x1FFFFFFFFFFFFFFFLL;
        v727 = v112;
        if (v112)
        {
          if (v112 >> 61)
            goto LABEL_1276;
          v114 = (char *)operator new(8 * v112);
          v87 = a1;
          v92 = &llvm::hashing::detail::fixed_seed_override;
        }
        else
        {
          v114 = 0;
        }
        v115 = &v114[8 * v111];
        *(_QWORD *)v115 = v93;
        v109 = (uint64_t **)(v115 + 8);
        if (v108 != v110)
        {
          do
          {
            v116 = *((_QWORD *)v108 - 1);
            v108 -= 8;
            *((_QWORD *)v115 - 1) = v116;
            v115 -= 8;
          }
          while (v108 != v110);
          v108 = (char *)__p;
        }
        __p = v115;
        v737 = v109;
        v738 = &v114[8 * v727];
        if (v108)
        {
          v117 = v108;
          v118 = v92;
          operator delete(v117);
          v92 = v118;
          v87 = a1;
        }
      }
      else
      {
        *v737 = (uint64_t *)v93;
        v109 = (uint64_t **)(v108 + 8);
      }
      v737 = v109;
LABEL_203:
      v91 = *(_QWORD *)(v91 + 8);
      if (v91 == v50)
        goto LABEL_209;
    }
  }
  v57 = *(unsigned __int8 *)(a1 + 1280);
  if (byte_1ED80F488)
  {
    v743[0] = 0;
    if (!v57)
    {
      v491 = *(_QWORD *)(a1 + 1056);
      v492 = (_QWORD *)operator new();
      *v492 = 0;
      v492[1] = 0;
      v492[3] = 0;
      v492[2] = v492 + 3;
      v492[4] = 0;
      v492[5] = 0;
      v492[6] = 0;
      v492[7] = 0x3000000000;
      for (j = *(_QWORD **)(v491 + 24); j; j = (_QWORD *)*j)
        sub_1C575B56C((uint64_t)v492, (uint64_t)(j + 7));
      __s1[0] = 0;
      v494 = (uint64_t)v492;
LABEL_970:
      sub_1C575B518(v743, v494);
      sub_1C575B518((uint64_t *)__s1, 0);
      v539 = (_QWORD *)a5[1];
      if (v539 != a5 + 2)
      {
        do
        {
          v542 = v539[4];
          if (v542)
          {
            if (*(_BYTE *)(v542 + 16))
            {
              if (*(_BYTE *)(v542 + 16) == 3 && (*(_DWORD *)(v542 + 20) & 0x7FFFFFF) == 0)
                goto LABEL_1003;
            }
            else if (*(_QWORD *)(v542 + 72) == v542 + 72 && (*(_BYTE *)(v542 + 34) & 0x80) == 0)
            {
              goto LABEL_1003;
            }
            v543 = *(_QWORD *)(v542 + 112);
            if (v543)
            {
              if (*(_DWORD *)(v543 + 8))
              {
                v544 = *(_QWORD *)(v543 + 40);
                if (v544)
                {
                  v545 = *(_DWORD *)(v544 + 40);
                  if (v545)
                  {
                    v546 = *(_QWORD *)(v544 + 24);
                    v547 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
                    if ((v547 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
                    {
                      v562 = llvm::hashing::detail::fixed_seed_override;
                      if (!llvm::hashing::detail::fixed_seed_override)
                        v562 = 0xFF51AFD7ED558CCDLL;
                      qword_1ED7EAC80 = v562;
                      __cxa_guard_release(&qword_1ED7EAC88);
                    }
                    v548 = __ROR8__(qword_1ED7EAC80 ^ 0x3A4251CF5CABDDE3, 30);
                    v549 = 0x9DDFEA08EB382D69
                         * ((qword_1ED7EAC80 + 0x20E38D834E0EEBC9) ^ ((0x9DDFEA08EB382D69
                                                                       * ((v548 - 0x3222A10545348927) ^ (qword_1ED7EAC80 + 0x20E38D834E0EEBC9))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v548 - 0x3222A10545348927) ^ (qword_1ED7EAC80 + 0x20E38D834E0EEBC9))));
                    v550 = -348639895 * ((v549 >> 47) ^ v549);
                    for (k = 1; ; ++k)
                    {
                      v552 = v550 & (v545 - 1);
                      v553 = (uint64_t *)(v546 + 24 * v552);
                      v554 = *v553;
                      if (*v553 == -1)
                      {
                        if ("use-sample-profile" == (char *)-1)
                          goto LABEL_1002;
                      }
                      else if (v554 == -2)
                      {
                        if ("use-sample-profile" == (char *)-2)
                          goto LABEL_1002;
                      }
                      else if (v553[1] == 18)
                      {
                        v555 = *(_QWORD *)v554 == 0x706D61732D657375 && *(_QWORD *)(v554 + 8) == 0x69666F72702D656CLL;
                        if (v555 && *(_WORD *)(v554 + 16) == 25964)
                        {
LABEL_1002:
                          v557 = v743[0];
                          v558 = (unsigned __int8 *)sub_1C6200B8C((llvm::Value *)v542);
                          sub_1C62A273C(v557, v558, v559);
                          break;
                        }
                      }
                      if (v554 == -1)
                        break;
                      v550 = k + v552;
                    }
                  }
                }
              }
            }
          }
LABEL_1003:
          v560 = (_QWORD *)v539[1];
          if (v560)
          {
            do
            {
              v561 = v560;
              v560 = (_QWORD *)*v560;
            }
            while (v560);
          }
          else
          {
            do
            {
              v561 = (_QWORD *)v539[2];
              v33 = *v561 == (_QWORD)v539;
              v539 = v561;
            }
            while (!v33);
          }
          v539 = v561;
        }
        while (v561 != a5 + 2);
      }
      LODWORD(__s1[0]) = 0;
      memset(&__s1[1], 0, 20);
      v772 = 0u;
      v773 = 0u;
      v774 = 0u;
      v775 = 0u;
      v776[0] = 0;
      sub_1C62A2E28((int *)__s1, v743[0]);
      sub_1C575B950(__s1);
      v540 = (_BYTE *)*((_QWORD *)&v773 + 1);
      v541 = (char *)v774;
      if (*((_QWORD *)&v773 + 1) == (_QWORD)v774)
      {
LABEL_972:
        sub_1C617D7D4(__s1);
        sub_1C575B518(v743, 0);
        goto LABEL_143;
      }
      while (1)
      {
        v563 = v541 - v540;
        if (v541 - v540 < 0)
          goto LABEL_1275;
        v564 = (const void ***)operator new(v541 - v540);
        v565 = (const void ***)((char *)v564 + v563);
        v750 = v564;
        v752 = (char *)v564 + v563;
        memmove(v564, v540, v541 - v540);
        v751 = (const void ***)((char *)v564 + v563);
        if (!byte_1ED833018)
          goto LABEL_1016;
        memset(v763, 0, sizeof(v763));
        v764 = 1065353216;
        v766 = 0;
        v767 = 0;
        __src = 0;
        if (v563 > 0xF)
          break;
        sub_1C4DE4490(&__src, v540, v541, v563 >> 3);
LABEL_1270:
        sub_1C4DE4490(&v750, (char *)__src, v766, (v766 - (_BYTE *)__src) >> 3);
        sub_1C62A305C((uint64_t)v763);
        v564 = (const void ***)v750;
        v565 = v751;
LABEL_1016:
        v566 = a1;
        v734 = v565;
        if (v564 != v565)
        {
          do
          {
            v567 = *(unsigned int *)(v566 + 1152);
            if (!(_DWORD)v567)
              goto LABEL_1078;
            v569 = **v564;
            v568 = (size_t)(*v564)[1];
            v570 = 0;
            if (v568)
            {
              v571 = (char *)(*v564)[1];
              v572 = (unsigned __int8 *)**v564;
              do
              {
                v573 = *v572++;
                v570 = 33 * v570 + v573;
                --v571;
              }
              while (v571);
            }
            v574 = *(_QWORD *)(v566 + 1144);
            v575 = 1;
            v576 = v570;
            while (1)
            {
              v577 = v576 & (v567 - 1);
              v578 = *(_QWORD **)(v574 + 8 * v577);
              if (v578 != (_QWORD *)-8)
              {
                if (!v578)
                  goto LABEL_1078;
                if (*(_DWORD *)(v574 + 8 * v567 + 8 + 4 * v577) == v570 && v568 == *v578)
                {
                  if (!v568)
                    break;
                  v579 = memcmp(v569, (char *)v578 + *(unsigned int *)(v566 + 1164), v568);
                  v566 = a1;
                  if (!v579)
                    break;
                }
              }
              v576 = v575 + v577;
              ++v575;
            }
            if ((_DWORD)v577 != -1 && (int)v577 != v567)
            {
              v580 = *(_QWORD *)(*(_QWORD *)(v574 + 8 * (int)v577) + 8);
              if (v580)
              {
                if (*(_BYTE *)(v580 + 16))
                {
                  if (*(_BYTE *)(v580 + 16) == 3 && (*(_DWORD *)(v580 + 20) & 0x7FFFFFF) == 0)
                    goto LABEL_1078;
                }
                else if (*(_QWORD *)(v580 + 72) == v580 + 72 && (*(_BYTE *)(v580 + 34) & 0x80) == 0)
                {
                  goto LABEL_1078;
                }
                v581 = *(_QWORD *)(v580 + 112);
                if (!v581)
                  goto LABEL_1078;
                if (!*(_DWORD *)(v581 + 8))
                  goto LABEL_1078;
                v582 = *(_QWORD *)(v581 + 40);
                if (!v582)
                  goto LABEL_1078;
                v583 = *(_DWORD *)(v582 + 40);
                if (!v583)
                  goto LABEL_1078;
                v584 = *(_QWORD *)(v582 + 24);
                v585 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
                if ((v585 & 1) == 0)
                {
                  v605 = __cxa_guard_acquire(&qword_1ED7EAC88);
                  v566 = a1;
                  if (v605)
                  {
                    v606 = llvm::hashing::detail::fixed_seed_override;
                    if (!llvm::hashing::detail::fixed_seed_override)
                      v606 = 0xFF51AFD7ED558CCDLL;
                    qword_1ED7EAC80 = v606;
                    __cxa_guard_release(&qword_1ED7EAC88);
                    v566 = a1;
                  }
                }
                v586 = __ROR8__(qword_1ED7EAC80 ^ 0x3A4251CF5CABDDE3, 30);
                v587 = 0x9DDFEA08EB382D69
                     * ((qword_1ED7EAC80 + 0x20E38D834E0EEBC9) ^ ((0x9DDFEA08EB382D69
                                                                   * ((v586 - 0x3222A10545348927) ^ (qword_1ED7EAC80 + 0x20E38D834E0EEBC9))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v586 - 0x3222A10545348927) ^ (qword_1ED7EAC80 + 0x20E38D834E0EEBC9))));
                v588 = -348639895 * ((v587 >> 47) ^ v587);
                for (m = 1; ; ++m)
                {
                  v590 = v588 & (v583 - 1);
                  v591 = (uint64_t *)(v584 + 24 * v590);
                  v592 = *v591;
                  if (*v591 == -1)
                  {
                    if ("use-sample-profile" == (char *)-1)
                      goto LABEL_1060;
                  }
                  else if (v592 == -2)
                  {
                    if ("use-sample-profile" == (char *)-2)
                      goto LABEL_1060;
                  }
                  else if (v591[1] == 18)
                  {
                    v593 = *(_QWORD *)v592 == 0x706D61732D657375 && *(_QWORD *)(v592 + 8) == 0x69666F72702D656CLL;
                    if (v593 && *(_WORD *)(v592 + 16) == 25964)
                    {
LABEL_1060:
                      v595 = (char *)v737;
                      if (v737 < (uint64_t **)v738)
                      {
                        *v737 = (uint64_t *)v580;
                        v596 = (uint64_t **)(v595 + 8);
                        goto LABEL_1077;
                      }
                      v597 = (char *)__p;
                      v598 = ((char *)v737 - (_BYTE *)__p) >> 3;
                      v599 = v598 + 1;
                      if (!((unint64_t)(v598 + 1) >> 61))
                      {
                        v600 = v738 - (_BYTE *)__p;
                        if ((v738 - (_BYTE *)__p) >> 2 > v599)
                          v599 = v600 >> 2;
                        if ((unint64_t)v600 >= 0x7FFFFFFFFFFFFFF8)
                          v601 = 0x1FFFFFFFFFFFFFFFLL;
                        else
                          v601 = v599;
                        if (v601)
                        {
                          if (v601 >> 61)
                            goto LABEL_1276;
                          v602 = (char *)operator new(8 * v601);
                          v566 = a1;
                        }
                        else
                        {
                          v602 = 0;
                        }
                        v603 = &v602[8 * v598];
                        *(_QWORD *)v603 = v580;
                        v596 = (uint64_t **)(v603 + 8);
                        if (v595 != v597)
                        {
                          do
                          {
                            v604 = *((_QWORD *)v595 - 1);
                            v595 -= 8;
                            *((_QWORD *)v603 - 1) = v604;
                            v603 -= 8;
                          }
                          while (v595 != v597);
                          v595 = (char *)__p;
                        }
                        __p = v603;
                        v737 = v596;
                        v738 = &v602[8 * v601];
                        if (v595)
                        {
                          operator delete(v595);
                          v566 = a1;
                        }
LABEL_1077:
                        v737 = v596;
                        break;
                      }
LABEL_1275:
                      abort();
                    }
                  }
                  if (v592 == -1)
                    break;
                  v588 = m + v590;
                }
              }
            }
LABEL_1078:
            ++v564;
          }
          while (v564 != v734);
          v565 = (const void ***)v750;
        }
        sub_1C575B950(__s1);
        if (v565)
        {
          v751 = v565;
          operator delete(v565);
        }
        v540 = (_BYTE *)*((_QWORD *)&v773 + 1);
        v541 = (char *)v774;
        if (*((_QWORD *)&v773 + 1) == (_QWORD)v774)
          goto LABEL_972;
      }
      sub_1C62A2EDC(v763);
      v607 = (unint64_t *)*((_QWORD *)&v773 + 1);
      v608 = (unint64_t *)v774;
      if (*((_QWORD *)&v773 + 1) == (_QWORD)v774)
      {
        v746 = 0;
        v747[0] = 0;
        v745 = &v746;
LABEL_1094:
        v760 = 0u;
        v761 = 0u;
        v762 = 1.0;
        goto LABEL_1095;
      }
      do
      {
        v609 = *v607++;
        *(_QWORD *)&v757 = v609;
        sub_1C575BCE4((float *)v763, v609, (uint64_t *)&v757);
      }
      while (v607 != v608);
      v610 = *((_QWORD *)&v773 + 1);
      v611 = v774;
      v746 = 0;
      v747[0] = 0;
      v745 = &v746;
      if (*((_QWORD *)&v773 + 1) == (_QWORD)v774)
        goto LABEL_1094;
      do
      {
        v616 = *(_QWORD **)(*(_QWORD *)v610 + 16);
        v617 = *(_QWORD *)v610 + 24;
        if (v616 != (_QWORD *)v617)
        {
          do
          {
            if (sub_1C61B81A8(v763, v616[5]))
            {
              v618 = (uint64_t *)operator new(0x28uLL);
              v619 = v618;
              v618[4] = (uint64_t)(v616 + 4);
              v620 = v746;
              v621 = &v746;
              v622 = &v746;
              if (v746)
              {
                do
                {
                  while (1)
                  {
                    v621 = (uint64_t **)v620;
                    if (v616[6] <= *(_QWORD *)(v620[4] + 16))
                      break;
                    v620 = (uint64_t *)*v620;
                    v622 = v621;
                    if (!*v621)
                      goto LABEL_1113;
                  }
                  v620 = (uint64_t *)v620[1];
                }
                while (v620);
                v622 = v621 + 1;
              }
LABEL_1113:
              *v618 = 0;
              v618[1] = 0;
              v618[2] = (uint64_t)v621;
              *v622 = v618;
              if (*v745)
              {
                v745 = (uint64_t **)*v745;
                v619 = *v622;
              }
              sub_1C4768E74(v746, v619);
              ++v747[0];
            }
            v623 = (_QWORD *)v616[1];
            if (v623)
            {
              do
              {
                v624 = v623;
                v623 = (_QWORD *)*v623;
              }
              while (v623);
            }
            else
            {
              do
              {
                v624 = (_QWORD *)v616[2];
                v33 = *v624 == (_QWORD)v616;
                v616 = v624;
              }
              while (!v33);
            }
            v616 = v624;
          }
          while (v624 != (_QWORD *)v617);
        }
        v610 += 8;
      }
      while (v610 != v611);
      v625 = (uint64_t *)v745;
      v760 = 0u;
      v761 = 0u;
      v762 = 1.0;
      if (v745 == &v746)
      {
LABEL_1095:
        v758 = 0u;
        v759 = 0u;
        v757 = 0u;
        v612 = (uint64_t *)v745;
        if (v745 != &v746)
        {
          do
          {
            v613 = (unint64_t *)v612[4];
            if (*((_BYTE *)sub_1C575BCE4((float *)v763, *v613, (uint64_t *)v613) + 36))
            {
              sub_1C51DF784((uint64_t)&v757, v613);
              *((_BYTE *)sub_1C575BCE4((float *)v763, *v613, (uint64_t *)v613) + 36) = 0;
            }
            v614 = (uint64_t *)v612[1];
            if (v614)
            {
              do
              {
                v615 = (uint64_t **)v614;
                v614 = (uint64_t *)*v614;
              }
              while (v614);
            }
            else
            {
              do
              {
                v615 = (uint64_t **)v612[2];
                v33 = *v615 == v612;
                v612 = (uint64_t *)v615;
              }
              while (!v33);
            }
            v612 = (uint64_t *)v615;
          }
          while (v615 != &v746);
          while (*((_QWORD *)&v759 + 1))
          {
            v663 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v757 + 1) + (((unint64_t)v759 >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * (v759 & 0x1FF));
            --*((_QWORD *)&v759 + 1);
            *(_QWORD *)&v759 = v759 + 1;
            if ((unint64_t)v759 >= 0x400)
            {
              operator delete(**((void ***)&v757 + 1));
              *((_QWORD *)&v757 + 1) += 8;
              *(_QWORD *)&v759 = v759 - 512;
            }
            v664 = v766;
            if ((unint64_t)v766 >= v767)
            {
              v666 = (char *)__src;
              v667 = (v766 - (_BYTE *)__src) >> 3;
              v668 = v667 + 1;
              if ((unint64_t)(v667 + 1) >> 61)
                goto LABEL_1275;
              v669 = v767 - (_QWORD)__src;
              if ((uint64_t)(v767 - (_QWORD)__src) >> 2 > v668)
                v668 = v669 >> 2;
              if ((unint64_t)v669 >= 0x7FFFFFFFFFFFFFF8)
                v670 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v670 = v668;
              if (v670)
              {
                if (v670 >> 61)
                  goto LABEL_1276;
                v671 = (char *)operator new(8 * v670);
              }
              else
              {
                v671 = 0;
              }
              v672 = &v671[8 * v667];
              *(_QWORD *)v672 = v663;
              v665 = v672 + 8;
              if (v664 != v666)
              {
                do
                {
                  v673 = *((_QWORD *)v664 - 1);
                  v664 -= 8;
                  *((_QWORD *)v672 - 1) = v673;
                  v672 -= 8;
                }
                while (v664 != v666);
                v664 = (char *)__src;
              }
              __src = v672;
              v766 = v665;
              v767 = (unint64_t)&v671[8 * v670];
              if (v664)
                operator delete(v664);
            }
            else
            {
              *(_QWORD *)v766 = v663;
              v665 = v664 + 8;
            }
            v766 = v665;
            v674 = *(_QWORD **)(v663 + 16);
            if (v674 != (_QWORD *)(v663 + 24))
            {
              do
              {
                if (sub_1C62A2F7C(v760, *((unint64_t *)&v760 + 1), (unint64_t)(v674 + 4))
                  && !*((_BYTE *)sub_1C575BCE4((float *)v763, v674[5], v674 + 5) + 36))
                {
                  *((_BYTE *)sub_1C575BCE4((float *)v763, v674[5], v674 + 5) + 36) = 1;
                  sub_1C51DF784((uint64_t)&v757, v674 + 5);
                }
                v675 = (_QWORD *)v674[1];
                if (v675)
                {
                  do
                  {
                    v676 = v675;
                    v675 = (_QWORD *)*v675;
                  }
                  while (v675);
                }
                else
                {
                  do
                  {
                    v676 = (_QWORD *)v674[2];
                    v33 = *v676 == (_QWORD)v674;
                    v674 = v676;
                  }
                  while (!v33);
                }
                v674 = v676;
              }
              while (v676 != (_QWORD *)(v663 + 24));
            }
          }
        }
        v677 = v766 - 8;
        v678 = __src == v766 || __src >= v677;
        if (!v678)
        {
          v679 = (char *)__src + 8;
          do
          {
            v680 = *((_QWORD *)v679 - 1);
            *((_QWORD *)v679 - 1) = *(_QWORD *)v677;
            *(_QWORD *)v677 = v680;
            v677 -= 8;
            v678 = v679 >= v677;
            v679 += 8;
          }
          while (!v678);
        }
        v681 = (void **)*((_QWORD *)&v757 + 1);
        v682 = (void **)v758;
        *((_QWORD *)&v759 + 1) = 0;
        v683 = v758 - *((_QWORD *)&v757 + 1);
        if ((_QWORD)v758 - *((_QWORD *)&v757 + 1) >= 0x11uLL)
        {
          do
          {
            operator delete(*v681);
            v682 = (void **)v758;
            v681 = (void **)(*((_QWORD *)&v757 + 1) + 8);
            *((_QWORD *)&v757 + 1) = v681;
            v683 = v758 - (_QWORD)v681;
          }
          while ((_QWORD)v758 - (_QWORD)v681 > 0x10uLL);
        }
        v684 = v683 >> 3;
        if (v684 == 1)
        {
          v685 = 256;
        }
        else
        {
          if (v684 != 2)
            goto LABEL_1259;
          v685 = 512;
        }
        *(_QWORD *)&v759 = v685;
LABEL_1259:
        if (v681 != v682)
        {
          do
          {
            v686 = *v681++;
            operator delete(v686);
          }
          while (v681 != v682);
          if ((_QWORD)v758 != *((_QWORD *)&v757 + 1))
            *(_QWORD *)&v758 = v758 + ((*((_QWORD *)&v757 + 1) - v758 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v757)
          operator delete((void *)v757);
        v687 = (_QWORD *)v761;
        if ((_QWORD)v761)
        {
          do
          {
            v688 = (_QWORD *)*v687;
            operator delete(v687);
            v687 = v688;
          }
          while (v688);
        }
        v689 = (void *)v760;
        *(_QWORD *)&v760 = 0;
        if (v689)
          operator delete(v689);
        sub_1C6143384(v746);
        goto LABEL_1270;
      }
      while (1)
      {
        v626 = v625[4];
        v627 = sub_1C575BCE4((float *)v763, *(_QWORD *)v626, (uint64_t *)v626);
        v628 = (unint64_t)sub_1C62A2F40(v627 + 3);
        v629 = sub_1C575BCE4((float *)v763, *(_QWORD *)(v626 + 8), (uint64_t *)(v626 + 8));
        v630 = sub_1C62A2F40(v629 + 3);
        if ((uint64_t *)v628 != v630)
          break;
LABEL_1188:
        v659 = (uint64_t *)v625[1];
        if (v659)
        {
          do
          {
            v660 = (uint64_t **)v659;
            v659 = (uint64_t *)*v659;
          }
          while (v659);
        }
        else
        {
          do
          {
            v660 = (uint64_t **)v625[2];
            v33 = *v660 == v625;
            v625 = (uint64_t *)v660;
          }
          while (!v33);
        }
        v625 = (uint64_t *)v660;
        if (v660 == &v746)
        {
          for (n = (_QWORD *)v761; n; n = (_QWORD *)*n)
            *((_BYTE *)sub_1C575BCE4((float *)v763, *(_QWORD *)(n[2] + 8), (uint64_t *)(n[2] + 8)) + 36) = 0;
          goto LABEL_1095;
        }
      }
      *v630 = v628;
      v631 = *(_DWORD *)(v628 + 8);
      if (v631 == *((_DWORD *)v630 + 2))
        *((_DWORD *)v630 + 2) = v631 + 1;
      v632 = 0x9DDFEA08EB382D69 * (((8 * v626) + 8) ^ HIDWORD(v626));
      v633 = 0x9DDFEA08EB382D69 * (HIDWORD(v626) ^ (v632 >> 47) ^ v632);
      v634 = 0x9DDFEA08EB382D69 * (v633 ^ (v633 >> 47));
      v635 = *((_QWORD *)&v760 + 1);
      if (*((_QWORD *)&v760 + 1))
      {
        v636 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v760 + 8));
        v636.i16[0] = vaddlv_u8(v636);
        if (v636.u32[0] > 1uLL)
        {
          v628 = 0x9DDFEA08EB382D69 * (v633 ^ (v633 >> 47));
          if (v634 >= *((_QWORD *)&v760 + 1))
            v628 = v634 % *((_QWORD *)&v760 + 1);
        }
        else
        {
          v628 = (*((_QWORD *)&v760 + 1) - 1) & v634;
        }
        v637 = *(_QWORD **)(v760 + 8 * v628);
        if (v637)
        {
          for (ii = (_QWORD *)*v637; ii; ii = (_QWORD *)*ii)
          {
            v639 = ii[1];
            if (v639 == v634)
            {
              if (ii[2] == v626)
                goto LABEL_1188;
            }
            else
            {
              if (v636.u32[0] > 1uLL)
              {
                if (v639 >= *((_QWORD *)&v760 + 1))
                  v639 %= *((_QWORD *)&v760 + 1);
              }
              else
              {
                v639 &= *((_QWORD *)&v760 + 1) - 1;
              }
              if (v639 != v628)
                break;
            }
          }
        }
      }
      v640 = operator new(0x18uLL);
      *v640 = 0;
      v640[1] = v634;
      v640[2] = v626;
      v641 = (float)(unint64_t)(*((_QWORD *)&v761 + 1) + 1);
      if (v635 && (float)(v762 * (float)v635) >= v641)
      {
LABEL_1178:
        v656 = v760;
        v657 = *(_QWORD **)(v760 + 8 * v628);
        if (v657)
        {
          *v640 = *v657;
        }
        else
        {
          *v640 = v761;
          *(_QWORD *)&v761 = v640;
          *(_QWORD *)(v656 + 8 * v628) = &v761;
          if (!*v640)
          {
LABEL_1187:
            ++*((_QWORD *)&v761 + 1);
            goto LABEL_1188;
          }
          v658 = *(_QWORD *)(*v640 + 8);
          if ((v635 & (v635 - 1)) != 0)
          {
            if (v658 >= v635)
              v658 %= v635;
          }
          else
          {
            v658 &= v635 - 1;
          }
          v657 = (_QWORD *)(v760 + 8 * v658);
        }
        *v657 = v640;
        goto LABEL_1187;
      }
      v642 = (v635 & (v635 - 1)) != 0;
      if (v635 < 3)
        v642 = 1;
      v643 = v642 | (2 * v635);
      v644 = vcvtps_u32_f32(v641 / v762);
      if (v643 <= v644)
        prime = (int8x8_t)v644;
      else
        prime = (int8x8_t)v643;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
        v635 = *((_QWORD *)&v760 + 1);
      }
      if (*(_QWORD *)&prime <= v635)
      {
        if (*(_QWORD *)&prime >= v635)
          goto LABEL_1173;
        v652 = vcvtps_u32_f32((float)*((unint64_t *)&v761 + 1) / v762);
        if (v635 < 3 || (v653 = (uint8x8_t)vcnt_s8((int8x8_t)v635), v653.i16[0] = vaddlv_u8(v653), v653.u32[0] > 1uLL))
        {
          v652 = std::__next_prime(v652);
        }
        else
        {
          v654 = 1 << -(char)__clz(v652 - 1);
          if (v652 >= 2)
            v652 = v654;
        }
        if (*(_QWORD *)&prime <= v652)
          prime = (int8x8_t)v652;
        if (*(_QWORD *)&prime >= v635)
        {
          v635 = *((_QWORD *)&v760 + 1);
LABEL_1173:
          if ((v635 & (v635 - 1)) != 0)
          {
            if (v634 >= v635)
              v628 = v634 % v635;
            else
              v628 = v634;
          }
          else
          {
            v628 = (v635 - 1) & v634;
          }
          goto LABEL_1178;
        }
        if (!*(_QWORD *)&prime)
        {
          v662 = (void *)v760;
          *(_QWORD *)&v760 = 0;
          if (v662)
            operator delete(v662);
          v635 = 0;
          *((_QWORD *)&v760 + 1) = 0;
          goto LABEL_1173;
        }
      }
      if (*(_QWORD *)&prime >> 61)
        goto LABEL_1276;
      v646 = operator new(8 * *(_QWORD *)&prime);
      v647 = (void *)v760;
      *(_QWORD *)&v760 = v646;
      if (v647)
        operator delete(v647);
      v648 = 0;
      *((int8x8_t *)&v760 + 1) = prime;
      do
        *(_QWORD *)(v760 + 8 * v648++) = 0;
      while (*(_QWORD *)&prime != v648);
      v649 = (_QWORD **)v761;
      if (!(_QWORD)v761)
        goto LABEL_1172;
      v650 = *(_QWORD *)(v761 + 8);
      v651 = (uint8x8_t)vcnt_s8(prime);
      v651.i16[0] = vaddlv_u8(v651);
      if (v651.u32[0] > 1uLL)
      {
        if (v650 >= *(_QWORD *)&prime)
          v650 %= *(_QWORD *)&prime;
      }
      else
      {
        v650 &= *(_QWORD *)&prime - 1;
      }
      *(_QWORD *)(v760 + 8 * v650) = &v761;
      v655 = *v649;
      if (!*v649)
      {
LABEL_1172:
        v635 = (unint64_t)prime;
        goto LABEL_1173;
      }
      while (1)
      {
        v661 = v655[1];
        if (v651.u32[0] > 1uLL)
        {
          if (v661 >= *(_QWORD *)&prime)
            v661 %= *(_QWORD *)&prime;
        }
        else
        {
          v661 &= *(_QWORD *)&prime - 1;
        }
        if (v661 != v650)
        {
          if (!*(_QWORD *)(v760 + 8 * v661))
          {
            *(_QWORD *)(v760 + 8 * v661) = v649;
            goto LABEL_1203;
          }
          *v649 = (_QWORD *)*v655;
          *v655 = **(_QWORD **)(v760 + 8 * v661);
          **(_QWORD **)(v760 + 8 * v661) = v655;
          v655 = v649;
        }
        v661 = v650;
LABEL_1203:
        v649 = (_QWORD **)v655;
        v655 = (_QWORD *)*v655;
        v650 = v661;
        if (!v655)
          goto LABEL_1172;
      }
    }
LABEL_918:
    v495 = *(llvm::SampleContextTracker **)(a1 + 1272);
    v496 = (_QWORD *)operator new();
    *v496 = 0;
    v496[1] = 0;
    v496[3] = 0;
    v496[2] = v496 + 3;
    v496[4] = 0;
    v496[5] = 0;
    v496[6] = 0;
    v496[7] = 0x3000000000;
    v772 = 0u;
    memset(__s1, 0, sizeof(__s1));
    v497 = (_QWORD *)*((_QWORD *)v495 + 5);
    if (v497 != (_QWORD *)((char *)v495 + 48))
    {
      do
      {
        v763[0] = v497 + 5;
        FuncNameFor = (unsigned __int8 *)llvm::SampleContextTracker::getFuncNameFor(v495, (llvm::ContextTrieNode *)(v497 + 5));
        sub_1C62A273C((uint64_t)v496, FuncNameFor, v499);
        sub_1C48410F0(__s1, v763);
        v500 = (_QWORD *)v497[1];
        if (v500)
        {
          do
          {
            v501 = v500;
            v500 = (_QWORD *)*v500;
          }
          while (v500);
        }
        else
        {
          do
          {
            v501 = (_QWORD *)v497[2];
            v33 = *v501 == (_QWORD)v497;
            v497 = v501;
          }
          while (!v33);
        }
        v497 = v501;
      }
      while (v501 != (_QWORD *)((char *)v495 + 48));
      v502 = *((_QWORD *)&v772 + 1);
      if (*((_QWORD *)&v772 + 1))
      {
        v709 = v495;
        v711 = v496;
        do
        {
          v503 = *(llvm::ContextTrieNode **)(*(_QWORD *)((char *)__s1[1]
                                                       + (((unint64_t)v772 >> 6) & 0x3FFFFFFFFFFFFF8))
                                           + 8 * (v772 & 0x1FF));
          *((_QWORD *)&v772 + 1) = v502 - 1;
          *(_QWORD *)&v772 = v772 + 1;
          if ((unint64_t)v772 >= 0x400)
          {
            operator delete(*(void **)__s1[1]);
            __s1[1] = (char *)__s1[1] + 8;
            *(_QWORD *)&v772 = v772 - 512;
          }
          v504 = *(llvm::Function **)v503;
          v505 = (llvm::ContextTrieNode *)((char *)v503 + 8);
          if (*(llvm::ContextTrieNode **)v503 != (llvm::ContextTrieNode *)((char *)v503 + 8))
          {
            v506 = *((_QWORD *)v503 + 6);
            do
            {
              *(_QWORD *)&v757 = (char *)v504 + 40;
              v507 = (unsigned __int8 *)llvm::SampleContextTracker::getFuncNameFor(v495, (llvm::Function *)((char *)v504 + 40));
              sub_1C62A273C((uint64_t)v496, v507, v508);
              sub_1C48410F0(__s1, &v757);
              v509 = v757;
              v510 = *(_QWORD *)(v757 + 48);
              if (v510)
                v511 = v506 == 0;
              else
                v511 = 1;
              if (v511)
              {
                v512 = 0;
              }
              else
              {
                v513 = sub_1C575B32C(*(_QWORD **)(v757 + 48));
                sub_1C62A284C((uint64_t)v763, v506, *(_DWORD *)(v509 + 64), *(_DWORD *)(v509 + 68));
                if ((v764 & 1) != 0)
                {
                  v527 = 0;
                }
                else
                {
                  v733 = v513;
                  if (LODWORD(v763[1]))
                  {
                    v720 = v506;
                    v722 = v505;
                    v514 = *(unsigned __int8 **)(v510 + 16);
                    v515 = *(_QWORD *)(v510 + 24);
                    v724 = v503;
                    v516 = 0;
                    if (v515)
                    {
                      v517 = v515;
                      v518 = v514;
                      do
                      {
                        v519 = *v518++;
                        v516 = 33 * v516 + v519;
                        --v517;
                      }
                      while (v517);
                    }
                    v520 = LODWORD(v763[1]) - 1;
                    v521 = v763[0];
                    v715 = LODWORD(v763[1]);
                    v522 = (char *)v763[0] + 8 * LODWORD(v763[1]) + 8;
                    v523 = HIDWORD(v763[2]);
                    v524 = 1;
                    v525 = v516;
                    while (1)
                    {
                      v526 = v525 & v520;
                      v527 = (_QWORD *)v521[v526];
                      if (v527 != (_QWORD *)-8)
                      {
                        if (!v527)
                        {
                          v495 = v709;
                          v496 = v711;
                          v505 = v722;
                          v503 = v724;
                          v506 = v720;
                          goto LABEL_952;
                        }
                        if (*(_DWORD *)&v522[4 * v526] == v516 && v515 == *v527)
                        {
                          if (!v515)
                            break;
                          v528 = (char *)v527 + v523;
                          v529 = v514;
                          v530 = memcmp(v514, v528, v515);
                          v514 = v529;
                          if (!v530)
                            break;
                        }
                      }
                      v525 = v524 + v526;
                      ++v524;
                    }
                    v527 = 0;
                    v495 = v709;
                    v496 = v711;
                    v503 = v724;
                    v506 = v720;
                    if ((_DWORD)v526 == -1)
                    {
                      v505 = v722;
                    }
                    else
                    {
                      v538 = (int)v526;
                      v33 = (int)v526 == v715;
                      v505 = v722;
                      if (!v33)
                        v527 = *(_QWORD **)(v521[v538] + 8);
                    }
                  }
                  else
                  {
                    v527 = 0;
                  }
LABEL_952:
                  sub_1C61A8A20((uint64_t)v763);
                  v513 = v733;
                }
                if ((unint64_t)v527 <= v513)
                  v512 = v513;
                else
                  v512 = (unint64_t)v527;
              }
              v531 = (unsigned __int8 *)llvm::SampleContextTracker::getFuncNameFor(v495, v503);
              v533 = v532;
              v534 = (unsigned __int8 *)llvm::SampleContextTracker::getFuncNameFor(v495, (llvm::ContextTrieNode *)v757);
              sub_1C62A28BC((uint64_t)v496, v531, v533, v534, v535, v512);
              v536 = (llvm::Function *)*((_QWORD *)v504 + 1);
              if (v536)
              {
                do
                {
                  v537 = v536;
                  v536 = *(llvm::Function **)v536;
                }
                while (v536);
              }
              else
              {
                do
                {
                  v537 = (llvm::Function *)*((_QWORD *)v504 + 2);
                  v33 = *(_QWORD *)v537 == (_QWORD)v504;
                  v504 = v537;
                }
                while (!v33);
              }
              v504 = v537;
            }
            while (v537 != v505);
          }
          v502 = *((_QWORD *)&v772 + 1);
        }
        while (*((_QWORD *)&v772 + 1));
      }
    }
    sub_1C484143C((uint64_t)__s1);
    __s1[0] = 0;
    v494 = (uint64_t)v496;
    goto LABEL_970;
  }
  if (*(_BYTE *)(a1 + 1280) && !word_1ED80F410)
  {
    v743[0] = 0;
    goto LABEL_918;
  }
  v58 = a5[10];
  LODWORD(__s1[0]) = 0;
  memset(&__s1[1], 0, 20);
  v772 = 0u;
  v773 = 0u;
  v774 = 0u;
  v775 = 0u;
  v776[0] = 0;
  sub_1C4DE3A20((int *)__s1, v58);
  sub_1C4DE3CBC(__s1);
  v59 = (char *)*((_QWORD *)&v773 + 1);
  v60 = (char *)v774;
  if (*((_QWORD *)&v773 + 1) == (_QWORD)v774)
    goto LABEL_136;
  while (1)
  {
    v61 = *(_QWORD *)(*(_QWORD *)v59 + 8);
    if (!v61)
      goto LABEL_129;
    if (*(_BYTE *)(v61 + 16))
    {
      if (*(_BYTE *)(v61 + 16) == 3 && (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) == 0)
        goto LABEL_129;
    }
    else if (*(_QWORD *)(v61 + 72) == v61 + 72 && (*(_BYTE *)(v61 + 34) & 0x80) == 0)
    {
      goto LABEL_129;
    }
    v62 = *(_QWORD *)(v61 + 112);
    if (!v62)
      goto LABEL_129;
    if (!*(_DWORD *)(v62 + 8))
      goto LABEL_129;
    v63 = *(_QWORD *)(v62 + 40);
    if (!v63)
      goto LABEL_129;
    v64 = *(_DWORD *)(v63 + 40);
    if (!v64)
      goto LABEL_129;
    v65 = *(_QWORD *)(v63 + 24);
    v66 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v66 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v86 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v86 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v86;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    v67 = __ROR8__(qword_1ED7EAC80 ^ 0x3A4251CF5CABDDE3, 30);
    v68 = 0x9DDFEA08EB382D69
        * ((qword_1ED7EAC80 + 0x20E38D834E0EEBC9) ^ ((0x9DDFEA08EB382D69
                                                      * ((v67 - 0x3222A10545348927) ^ (qword_1ED7EAC80
                                                                                       + 0x20E38D834E0EEBC9))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v67 - 0x3222A10545348927) ^ (qword_1ED7EAC80 + 0x20E38D834E0EEBC9))));
    v69 = -348639895 * ((v68 >> 47) ^ v68);
    for (jj = 1; ; ++jj)
    {
      v71 = v69 & (v64 - 1);
      v72 = (uint64_t *)(v65 + 24 * v71);
      v73 = *v72;
      if (*v72 == -1)
      {
        if ("use-sample-profile" == (char *)-1)
          goto LABEL_110;
        goto LABEL_96;
      }
      if (v73 != -2)
        break;
      if ("use-sample-profile" == (char *)-2)
        goto LABEL_110;
LABEL_96:
      if (v73 == -1)
        goto LABEL_129;
      v69 = jj + v71;
    }
    if (v72[1] != 18)
      goto LABEL_96;
    v74 = *(_QWORD *)v73 == 0x706D61732D657375 && *(_QWORD *)(v73 + 8) == 0x69666F72702D656CLL;
    if (!v74 || *(_WORD *)(v73 + 16) != 25964)
      goto LABEL_96;
LABEL_110:
    v76 = (char *)v737;
    if (v737 < (uint64_t **)v738)
    {
      *v737 = (uint64_t *)v61;
      v77 = (uint64_t **)(v76 + 8);
      goto LABEL_128;
    }
    v78 = (char *)__p;
    v79 = ((char *)v737 - (_BYTE *)__p) >> 3;
    v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 61)
      goto LABEL_1275;
    v81 = v738 - (_BYTE *)__p;
    if ((v738 - (_BYTE *)__p) >> 2 > v80)
      v80 = v81 >> 2;
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
      v80 = 0x1FFFFFFFFFFFFFFFLL;
    v726 = v80;
    if (v80)
    {
      if (!(v80 >> 61))
      {
        v82 = (char *)operator new(8 * v80);
        goto LABEL_121;
      }
LABEL_1276:
      sub_1C4764EE4();
    }
    v82 = 0;
LABEL_121:
    v83 = &v82[8 * v79];
    *(_QWORD *)v83 = v61;
    v77 = (uint64_t **)(v83 + 8);
    if (v76 == v78)
    {
      v84 = v726;
    }
    else
    {
      v84 = v726;
      do
      {
        v85 = *((_QWORD *)v76 - 1);
        v76 -= 8;
        *((_QWORD *)v83 - 1) = v85;
        v83 -= 8;
      }
      while (v76 != v78);
      v76 = (char *)__p;
    }
    __p = v83;
    v737 = v77;
    v738 = &v82[8 * v84];
    if (v76)
      operator delete(v76);
LABEL_128:
    v737 = v77;
LABEL_129:
    v59 += 8;
    if (v59 == v60)
    {
      sub_1C4DE3CBC(__s1);
      v59 = (char *)*((_QWORD *)&v773 + 1);
      v60 = (char *)v774;
      if (*((_QWORD *)&v773 + 1) == (_QWORD)v774)
        break;
    }
  }
LABEL_136:
  if ((_QWORD)v775)
  {
    *((_QWORD *)&v775 + 1) = v775;
    operator delete((void *)v775);
    v59 = (char *)*((_QWORD *)&v773 + 1);
  }
  if (v59)
  {
    *(_QWORD *)&v774 = v59;
    operator delete(v59);
  }
  if ((_QWORD)v772)
  {
    *((_QWORD *)&v772 + 1) = v772;
    operator delete((void *)v772);
  }
  MEMORY[0x1CAA32FB4](__s1[1], 8);
LABEL_143:
  v87 = a1;
  if (__p != v737)
  {
    v88 = (char *)(v737 - 1);
    if (__p < v737 - 1)
    {
      v89 = (char *)__p + 8;
      do
      {
        v90 = *((_QWORD *)v89 - 1);
        *((_QWORD *)v89 - 1) = *(_QWORD *)v88;
        *(_QWORD *)v88 = v90;
        v88 -= 8;
        v678 = v89 >= v88;
        v89 += 8;
      }
      while (!v678);
    }
  }
LABEL_209:
  v121 = (uint64_t **)__p;
  v703 = v737;
  if (__p == v737)
    goto LABEL_893;
  v122 = 0;
  v700 = (unsigned int *)(v87 + 8);
  v123 = v87 + 1144;
  v696 = v87 + 1240;
  v697 = v87 + 1176;
  v692 = v87 + 32;
  v695 = v87 + 56;
  v723 = v87 + 1144;
  while (2)
  {
    v708 = v121;
    v124 = *v121;
    v125 = v87;
    sub_1C62A24E0(v87);
    sub_1C61446F0(v700);
    v126 = byte_1ED80F248;
    if (byte_1ED80F248)
      v126 = *(_QWORD *)(v125 + 1288) != 0;
    v127 = v125;
    *(_BYTE *)(v125 + 1384) = v126;
    v710 = v122;
    v721 = (llvm::Function *)v124;
    if (byte_1ED80F0C8)
    {
LABEL_236:
      v142 = 0;
      *(_BYTE *)(v127 + 1384) = 0;
      *(_BYTE *)(v127 + 1048) = 0;
      goto LABEL_281;
    }
    v128 = v124[14];
    if (v128)
    {
      if (*(_DWORD *)(v128 + 8))
      {
        v129 = *(_QWORD *)(v128 + 40);
        if (v129)
        {
          v130 = *(_DWORD *)(v129 + 40);
          if (v130)
          {
            v131 = *(_QWORD *)(v129 + 24);
            v132 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v132 & 1) == 0)
            {
              v481 = __cxa_guard_acquire(&qword_1ED7EAC88);
              v127 = a1;
              if (v481)
              {
                v482 = llvm::hashing::detail::fixed_seed_override;
                if (!llvm::hashing::detail::fixed_seed_override)
                  v482 = 0xFF51AFD7ED558CCDLL;
                qword_1ED7EAC80 = v482;
                __cxa_guard_release(&qword_1ED7EAC88);
                v127 = a1;
              }
            }
            v133 = __ROR8__(qword_1ED7EAC80 ^ 0x2285082CC813EAEFLL, 30);
            v134 = 0x9DDFEA08EB382D69
                 * ((qword_1ED7EAC80 - 0x6B0D9FCD0C2AF079) ^ ((0x9DDFEA08EB382D69
                                                               * ((v133 - 0x5C7E2870F3C8162ELL) ^ (qword_1ED7EAC80
                                                                                                 - 0x6B0D9FCD0C2AF079))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v133 - 0x5C7E2870F3C8162ELL) ^ (qword_1ED7EAC80 - 0x6B0D9FCD0C2AF079))));
            v135 = -348639895 * ((v134 >> 47) ^ v134);
            for (kk = 1; ; ++kk)
            {
              v137 = v135 & (v130 - 1);
              v138 = v131 + 24 * v137;
              v139 = *(_QWORD **)v138;
              if (*(_QWORD *)v138 == -1)
              {
                if ("profile-sample-accurate" == (char *)-1)
                  goto LABEL_236;
              }
              else if (v139 == (_QWORD *)-2)
              {
                if ("profile-sample-accurate" == (char *)-2)
                  goto LABEL_236;
              }
              else if (*(_QWORD *)(v138 + 8) == 23)
              {
                v140 = *v139 == 0x2D656C69666F7270 && v139[1] == 0x612D656C706D6173;
                if (v140 && *(_QWORD *)((char *)v139 + 15) == 0x6574617275636361)
                  goto LABEL_236;
              }
              if (v139 == (_QWORD *)-1)
                break;
              v135 = kk + v137;
            }
            v126 = *(unsigned __int8 *)(v127 + 1384);
          }
        }
      }
    }
    *(_BYTE *)(v127 + 1048) = v126;
    if (!v126)
    {
      v142 = -1;
      goto LABEL_281;
    }
    if ((*((_BYTE *)v124 + 23) & 0x10) != 0)
    {
      v143 = **(_QWORD **)*v124;
      v144 = *(_QWORD *)(v143 + 152);
      v145 = *(unsigned int *)(v143 + 168);
      if (!(_DWORD)v145)
        goto LABEL_247;
      LODWORD(v146) = (v145 - 1) & ((v124 >> 4) ^ (v124 >> 9));
      v147 = (uint64_t **)(v144 + 16 * v146);
      v148 = *v147;
      if (*v147 != v124)
      {
        v149 = 1;
        while (v148 != (uint64_t *)-4096)
        {
          v150 = v146 + v149++;
          v146 = v150 & (v145 - 1);
          v148 = *(uint64_t **)(v144 + 16 * v146);
          if (v148 == v124)
          {
            v147 = (uint64_t **)(v144 + 16 * v146);
            goto LABEL_248;
          }
        }
LABEL_247:
        v147 = (uint64_t **)(v144 + 16 * v145);
      }
LABEL_248:
      v151 = v147[1];
      v154 = *v151;
      v152 = (char *)(v151 + 2);
      v153 = v154;
    }
    else
    {
      v153 = 0;
      v152 = &byte_1C871356D;
    }
    v155 = *(_QWORD *)(v127 + 1288);
    v156 = *(_DWORD *)(v155 + 24);
    if (v156)
    {
      v157 = *(_QWORD *)(v155 + 8);
      v158 = sub_1C5E3DF4C(v152, (uint64_t)&v152[v153]);
      v159 = v156 - 1;
      for (mm = 1; ; ++mm)
      {
        v161 = v158 & v159;
        v162 = v157 + 16 * (v158 & v159);
        v163 = *(const void **)v162;
        if (*(_QWORD *)v162 == -1)
        {
          if (v152 == (char *)-1)
            goto LABEL_261;
        }
        else if (v163 == (const void *)-2)
        {
          if (v152 == (char *)-2)
            goto LABEL_261;
        }
        else if (v153 == *(_QWORD *)(v162 + 8) && (!v153 || !memcmp(v152, v163, v153)))
        {
LABEL_261:
          v728 = 0;
          goto LABEL_263;
        }
        if (v163 == (const void *)-1)
          break;
        v158 = mm + v161;
      }
      v728 = -1;
LABEL_263:
      v124 = (uint64_t *)v721;
    }
    else
    {
      v728 = -1;
    }
    v164 = sub_1C6200B8C((llvm::Value *)v124);
    v166 = a1;
    v167 = *(unsigned int *)(a1 + 1360);
    if ((_DWORD)v167)
    {
      v168 = (const void *)v164;
      v169 = 0;
      v170 = v165;
      if (v165)
      {
        v171 = v165;
        v172 = (unsigned __int8 *)v164;
        do
        {
          v173 = *v172++;
          v169 = 33 * v169 + v173;
          --v171;
        }
        while (v171);
      }
      v174 = v167 - 1;
      v175 = *(_QWORD *)(a1 + 1352);
      v716 = *(unsigned int *)(a1 + 1360);
      v176 = v175 + 8 * v167 + 8;
      v177 = 1;
      v178 = v169;
      while (1)
      {
        v179 = v178 & v174;
        v180 = *(_QWORD **)(v175 + 8 * v179);
        if (v180 != (_QWORD *)-8)
        {
          if (!v180)
          {
            v182 = v716;
            v183 = v716;
            goto LABEL_277;
          }
          if (*(_DWORD *)(v176 + 4 * v179) == v169 && v170 == *v180)
          {
            if (!v170)
              break;
            v181 = memcmp(v168, (char *)v180 + *(unsigned int *)(v166 + 1372), v170);
            v166 = a1;
            if (!v181)
              break;
          }
        }
        v178 = v177 + v179;
        ++v177;
      }
      v183 = (int)v179;
      v182 = v716;
      if ((_DWORD)v179 == -1)
        v183 = v716;
    }
    else
    {
      v182 = 0;
      v183 = 0;
    }
LABEL_277:
    if (v183 == v182)
      v142 = v728;
    else
      v142 = -1;
    v122 = v710;
    v124 = (uint64_t *)v721;
    v123 = v723;
LABEL_281:
    llvm::Function::getEntryCount((uint64_t ***)v124, 0, (uint64_t)__s1);
    if (!LOBYTE(__s1[2]))
      llvm::Function::setEntryCount((uint64_t ***)v124, v142, 0, 0);
    v742 = 0;
    if (a3)
    {
      ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, v124[5]);
      v188 = llvm::AnalysisManager<llvm::Function>::getResultImpl(*(_QWORD *)(ResultImpl + 8), &llvm::OptimizationRemarkEmitterAnalysis::Key, (uint64_t)v124)+ 8;
    }
    else
    {
      v184 = (llvm::OptimizationRemarkEmitter *)operator new();
      v185 = llvm::OptimizationRemarkEmitter::OptimizationRemarkEmitter(v184, (const llvm::Function *)v124);
      __s1[0] = 0;
      v186 = (uint64_t)v742;
      v742 = v185;
      if (v186)
      {
        sub_1C4EF268C((uint64_t)&v742, v186);
        v187 = __s1[0];
        __s1[0] = 0;
        if (v187)
          sub_1C4EF268C((uint64_t)__s1, (uint64_t)v187);
      }
      v188 = (uint64_t)v742;
    }
    *(_QWORD *)(a1 + 1136) = v188;
    if (*(_BYTE *)(a1 + 1280))
    {
      v194 = *(uint64_t ***)(a1 + 1272);
      v195 = (int *)sub_1C6200B8C((llvm::Value *)v124);
      BaseSamplesFor = llvm::SampleContextTracker::getBaseSamplesFor(v194, v195, v196, 1);
    }
    else
    {
      v190 = *(_QWORD *)(a1 + 1056);
      v191 = sub_1C6200B8C((llvm::Value *)v124);
      BaseSamplesFor = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v190 + 40))(v190, v191, v192);
    }
    v197 = BaseSamplesFor;
    *(_QWORD *)(a1 + 1064) = BaseSamplesFor;
    v87 = a1;
    if (!BaseSamplesFor || !*(_QWORD *)(BaseSamplesFor + 56))
    {
      v198 = 0;
      goto LABEL_295;
    }
    if (llvm::sampleprof::FunctionSamples::ProfileIsProbeBased)
    {
      Desc = llvm::PseudoProbeManager::getDesc(*(llvm::PseudoProbeManager **)(a1 + 1400), (const llvm::Function *)v124);
      if (!Desc || Desc[1] != *(_QWORD *)(v197 + 8))
        goto LABEL_304;
LABEL_310:
      v743[0] = 0;
      v743[1] = 0;
      v744 = 0;
      v201 = a1;
      v698 = v124 + 9;
      if (!byte_1ED80F848)
      {
        v693 = 0;
        v750 = 0;
        v751 = 0;
        LODWORD(v752) = 0;
        while (1)
        {
          __s1[0] = &__s1[2];
          __s1[1] = (void *)0xA00000000;
          v202 = v124[10];
          if ((uint64_t *)v202 == v698)
          {
LABEL_473:
            if (!llvm::sampleprof::FunctionSamples::ProfileIsCSFlat)
            {
              memset(__s1, 0, 20);
              sub_1C4DFEB14((uint64_t)__s1, (uint64_t)&v750);
              sub_1C575DAD8(a1, (uint64_t)__s1, v124);
              MEMORY[0x1CAA32FB4](__s1[0], 8);
            }
            MEMORY[0x1CAA32FB4](v750, 8);
            goto LABEL_523;
          }
          do
          {
            v203 = v202 - 24;
            if (!v202)
              v203 = 0;
            v763[0] = &v763[2];
            v763[1] = (void *)0xA00000000;
            *(_QWORD *)&v757 = &v758;
            *((_QWORD *)&v757 + 1) = 0xA00000000;
            v204 = v203 + 40;
            v205 = *(_QWORD *)(v203 + 48);
            if (v205 == v203 + 40)
            {
              v206 = __s1[0];
              v122 = v710;
              v124 = (uint64_t *)v721;
              goto LABEL_363;
            }
            v207 = 0;
            do
            {
              while (1)
              {
                if (v205)
                  v208 = v205 - 24;
                else
                  v208 = 0;
                v756 = 0;
                v209 = *(unsigned __int8 *)(v208 + 16);
                if ((v209 - 33) > 0x33
                  || ((1 << (v209 - 33)) & 0x8000000000041) == 0)
                {
                  goto LABEL_335;
                }
                v755 = v205 - 24;
                if (v209 == 84)
                {
                  v211 = *(_QWORD *)(v208 - 32);
                  if (v211)
                  {
                    if (!*(_BYTE *)(v211 + 16)
                      && *(_QWORD *)(v211 + 24) == *(_QWORD *)(v208 + 72)
                      && (*(_BYTE *)(v211 + 33) & 0x20) != 0)
                    {
                      goto LABEL_335;
                    }
                  }
                }
                v212 = v201;
                v213 = (unsigned __int8 *)sub_1C575AF70(v201, (llvm *)(v205 - 24));
                v756 = v213;
                v214 = (uint64_t *)v755;
                if (!v213)
                {
                  v215 = sub_1C575E3DC(*(_QWORD *)(v212 + 1392), v755);
                  v201 = v212;
                  if (!v215)
                    goto LABEL_335;
                  v216 = LODWORD(v763[1]);
                  v217 = v763;
                  if (LODWORD(v763[1]) >= (unint64_t)HIDWORD(v763[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v763, (uint64_t)&v763[2], LODWORD(v763[1]) + 1, 8);
                    v201 = a1;
                    v216 = LODWORD(v763[1]);
                  }
                  goto LABEL_334;
                }
                v218 = v213;
                v219 = LODWORD(v763[1]);
                if (LODWORD(v763[1]) >= (unint64_t)HIDWORD(v763[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v763, (uint64_t)&v763[2], LODWORD(v763[1]) + 1, 8);
                  v219 = LODWORD(v763[1]);
                }
                *((_QWORD *)v763[0] + v219) = v214;
                ++LODWORD(v763[1]);
                if (sub_1C575B32C(v218) || *(_BYTE *)(a1 + 1280))
                  sub_1C6187718((uint64_t)&v760, (uint64_t)&v750, &v755, &v756);
                if (!llvm::sampleprofutil::callsiteIsHot((_BOOL8)v218, *(const llvm::sampleprof::FunctionSamples **)(a1 + 1128), (llvm::ProfileSummaryInfo *)*(unsigned __int8 *)(a1 + 1384)))break;
                v205 = *(_QWORD *)(v205 + 8);
                v207 = 1;
                v201 = a1;
                if (v205 == v204)
                {
                  v206 = __s1[0];
                  v122 = v710;
                  v124 = (uint64_t *)v721;
                  goto LABEL_365;
                }
              }
              v201 = a1;
              if (byte_1ED80F548)
              {
                v220 = *(v214 - 4);
                if (v220)
                {
                  if (!*(_BYTE *)(v220 + 16) && *(_QWORD *)(v220 + 24) == v214[9])
                  {
                    llvm::getInlineParams(dword_1ED82D9C0, (uint64_t)&v760);
                    v221 = *(_QWORD *)(a1 + 1232);
                    if (!v221)
                      goto LABEL_1277;
                    v222 = (llvm::BasicBlock *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v221 + 48))(v221, v220);
                    llvm::getInlineCost((uint64_t)v214, (int *)&v760, v222, (uint64_t)sub_1C4E5E070, v697, (uint64_t (*)(uint64_t, llvm *))sub_1C5598CFC, v696, (uint64_t)&v745, 0, v691, 0, 0);
                    if ((_DWORD)v745 == 0x80000000)
                      v223 = 1;
                    else
                      v223 = (_DWORD)v745 != 0x7FFFFFFF && (int)v745 <= dword_1ED8333D8;
                    v201 = a1;
                    if (v748)
                    {
                      sub_1C61996A0((uint64_t)v747);
                      v201 = a1;
                      if (v223)
                      {
LABEL_357:
                        v216 = DWORD2(v757);
                        v217 = (void **)&v757;
                        if (DWORD2(v757) >= (unint64_t)HIDWORD(v757))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v757, (uint64_t)&v758, DWORD2(v757) + 1, 8);
                          v201 = a1;
                          v216 = DWORD2(v757);
                        }
LABEL_334:
                        *((_QWORD *)*v217 + v216) = v214;
                        ++*((_DWORD *)v217 + 2);
                      }
                    }
                    else if (v223)
                    {
                      goto LABEL_357;
                    }
                  }
                }
              }
LABEL_335:
              v205 = *(_QWORD *)(v205 + 8);
            }
            while (v205 != v204);
            v206 = __s1[0];
            v122 = v710;
            v124 = (uint64_t *)v721;
            if ((v207 & 1) == 0)
            {
LABEL_363:
              if (!*(_QWORD *)(v201 + 1392))
              {
                v224 = v201;
                sub_1C618FC28((unsigned int *)__s1, (uint64_t)v206, (uint64_t *)v757, (uint64_t *)(v757 + 8 * DWORD2(v757)));
                v225 = (_QWORD *)v757;
                v226 = DWORD2(v757);
                v227 = v224;
                v228 = v124;
                v229 = 0;
                goto LABEL_366;
              }
            }
LABEL_365:
            v230 = v201;
            sub_1C618FC28((unsigned int *)__s1, (uint64_t)v206, (uint64_t *)v763[0], (uint64_t *)v763[0] + LODWORD(v763[1]));
            v225 = v763[0];
            v226 = (int)v763[1];
            v227 = v230;
            v228 = v124;
            v229 = 1;
LABEL_366:
            sub_1C5761450(v227, v225, v226, v228, v229);
            v231 = v723;
            if ((__int128 *)v757 != &v758)
              free((void *)v757);
            if (v763[0] != &v763[2])
              free(v763[0]);
            v202 = *(_QWORD *)(v202 + 8);
            v201 = a1;
          }
          while ((uint64_t *)v202 != v698);
          v232 = (void **)__s1[0];
          if (!LODWORD(__s1[1]))
          {
            LOBYTE(v712) = 0;
            goto LABEL_470;
          }
          v712 = 0;
          v233 = (void **)((char *)__s1[0] + 8 * LODWORD(__s1[1]));
          v234 = v750;
          v235 = (int32x2_t)v751;
          v729 = (int)v752;
          v717 = (_DWORD)v752 - 1;
          v702 = v233;
          v706 = v750;
          while (2)
          {
            v236 = (uint64_t)*v232;
            v237 = *((_QWORD *)*v232 - 4);
            if (!v237
              || *(_BYTE *)(v237 + 16)
              || (v238 = (uint64_t *)*((_QWORD *)*v232 - 4), *(_QWORD *)(v237 + 24) != *(_QWORD *)(v236 + 72)))
            {
              v238 = 0;
            }
            v763[3] = 0;
            v763[0] = (void *)v236;
            if (v729)
            {
              v239 = v717 & ((v236 >> 4) ^ (v236 >> 9));
              v240 = (_QWORD *)v234[2 * v239];
              if ((_QWORD *)v236 == v240)
              {
LABEL_379:
                v241 = (void *)v234[2 * v239 + 1];
                goto LABEL_385;
              }
              v242 = 1;
              while (v240 != (_QWORD *)-4096)
              {
                v243 = v239 + v242++;
                v239 = v243 & v717;
                v240 = (_QWORD *)v234[2 * v239];
                if ((_QWORD *)v236 == v240)
                  goto LABEL_379;
              }
            }
            v241 = 0;
LABEL_385:
            v763[1] = v241;
            v763[2] = 0;
            LODWORD(v763[3]) = 1065353216;
            if (v238 == v124)
              goto LABEL_443;
            v244 = *(unsigned __int8 *)(v237 + 16);
            if (v244 < 0x15 || v244 == 24)
            {
              if (v238 && (*((_BYTE *)v238 + 23) & 0x20) != 0)
              {
                v246 = **(_QWORD **)*v238;
                *(_QWORD *)&v757 = v238;
                v247 = *(_DWORD *)(v246 + 2496);
                if (!v247)
                {
                  v278 = 0;
                  goto LABEL_453;
                }
                v248 = *(_QWORD *)(v246 + 2480);
                v249 = v247 - 1;
                v250 = v249 & ((v238 >> 4) ^ (v238 >> 9));
                v251 = (_QWORD *)(v248 + 40 * v250);
                v252 = *v251;
                if ((uint64_t *)*v251 != v238)
                {
                  v253 = 0;
                  v254 = 1;
                  while (v252 != -4096)
                  {
                    if (v253)
                      v255 = 0;
                    else
                      v255 = v252 == -8192;
                    if (v255)
                      v253 = v251;
                    v256 = v250 + v254++;
                    v250 = v256 & v249;
                    v251 = (_QWORD *)(v248 + 40 * v250);
                    v252 = *v251;
                    if ((uint64_t *)*v251 == v238)
                      goto LABEL_403;
                  }
                  if (v253)
                    v278 = v253;
                  else
                    v278 = v251;
LABEL_453:
                  v251 = sub_1C541AB24(v246 + 2480, (uint64_t)&v757, (uint64_t *)&v757, v278);
                  v279 = v757;
                  v251[4] = 0;
                  v251[3] = 0;
                  *v251 = v279;
                  v251[1] = v251 + 3;
                  v251[2] = 0x100000000;
                  v201 = a1;
                }
LABEL_403:
                v257 = *((unsigned int *)v251 + 4);
                if ((_DWORD)v257)
                {
                  v258 = (_QWORD *)(v251[1] + 8);
                  v259 = 16 * v257;
                  while (*((_DWORD *)v258 - 2))
                  {
                    v258 += 2;
                    v259 -= 16;
                    if (!v259)
                      goto LABEL_407;
                  }
                  if (*v258)
                  {
                    if (*((_BYTE *)v238 + 16))
                    {
                      if (*((_BYTE *)v238 + 16) == 3 && (*((_DWORD *)v238 + 5) & 0x7FFFFFF) == 0)
                        goto LABEL_407;
LABEL_456:
                      v280 = sub_1C575D3E8(v201, (uint64_t)v763, 0);
                      v281 = v712;
                      if (v280)
                        v281 = 1;
                      if (v729 && v280)
                      {
                        LODWORD(v282) = v717 & ((v236 >> 4) ^ (v236 >> 9));
                        v283 = &v234[2 * v282];
                        v284 = (_QWORD *)*v283;
                        v201 = a1;
                        if (v236 == *v283)
                        {
LABEL_461:
                          *v283 = -8192;
                          v235 = vadd_s32(v235, (int32x2_t)0x1FFFFFFFFLL);
                          v712 = 1;
                        }
                        else
                        {
                          v285 = 1;
                          while (v284 != (_QWORD *)-4096)
                          {
                            v286 = v282 + v285++;
                            v282 = v286 & v717;
                            v284 = (_QWORD *)v706[2 * v282];
                            if ((_QWORD *)v236 == v284)
                            {
                              v234 = v706;
                              v283 = &v706[2 * v282];
                              v201 = a1;
                              v124 = (uint64_t *)v721;
                              v231 = v723;
                              v233 = v702;
                              goto LABEL_461;
                            }
                          }
                          v712 = 1;
                          v201 = a1;
                          v124 = (uint64_t *)v721;
                          v231 = v723;
                          v233 = v702;
                          v234 = v706;
                        }
                        goto LABEL_443;
                      }
                      v712 = v281;
LABEL_442:
                      v201 = a1;
                      goto LABEL_443;
                    }
                    if ((uint64_t *)v238[9] != v238 + 9 || (*((_BYTE *)v238 + 34) & 0x80) != 0)
                      goto LABEL_456;
                  }
                }
              }
LABEL_407:
              if (*(_DWORD *)(v201 + 1284) != 1)
                goto LABEL_443;
              v260 = sub_1C575AF70(v201, (llvm *)v236);
              v261 = *(_QWORD *)(a1 + 1128);
              if (*(_BYTE *)(v261 + 24))
                v262 = *(_QWORD *)(v261 + 16);
              else
                v262 = -1;
              sub_1C575C634(a1, v236, (uint64_t)v260, (uint64_t)v743, v231, v262);
              goto LABEL_442;
            }
            *(_QWORD *)&v760 = 0;
            sub_1C575C1E0((unint64_t *)&v757, v201, (llvm *)v236, &v760);
            v263 = v757;
            if ((_QWORD)v757 != *((_QWORD *)&v757 + 1))
            {
              v699 = &v234[2 * (v717 & ((v236 >> 4) ^ (v236 >> 9)))];
              v264 = (uint64_t *)v757;
              v201 = a1;
              while (1)
              {
                v265 = (_QWORD *)*v264;
                v266 = *(_QWORD *)(v201 + 1128);
                if (*(_DWORD *)(v201 + 1284) == 1)
                {
                  if (*(_BYTE *)(v266 + 24))
                    v267 = *(_QWORD *)(v266 + 16);
                  else
                    v267 = -1;
                  sub_1C575C634(v201, v236, *v264, (uint64_t)v743, v231, v267);
                }
                else
                {
                  v268 = v760;
                  v269 = v201;
                  if (!llvm::sampleprofutil::callsiteIsHot(*v264, (const llvm::sampleprof::FunctionSamples *)v266, (llvm::ProfileSummaryInfo *)*(unsigned __int8 *)(v201 + 1384)))
                  {
                    v201 = v269;
LABEL_429:
                    v231 = v723;
                    v234 = v706;
                    goto LABEL_418;
                  }
                  v270 = sub_1C575B32C(v265);
                  v763[0] = (void *)v236;
                  v763[1] = v265;
                  v763[2] = (void *)v270;
                  LODWORD(v763[3]) = 1065353216;
                  v271 = sub_1C575CBFC(v269, v721, (uint64_t)v763, v268, (unint64_t *)&v760, 0);
                  v272 = v712;
                  if (v271)
                    v272 = 1;
                  if (!v729)
                  {
                    v712 = v272;
                    v201 = a1;
                    goto LABEL_429;
                  }
                  v231 = v723;
                  v234 = v706;
                  if (v271)
                  {
                    v273 = v699;
                    v274 = (_QWORD *)*v699;
                    v201 = a1;
                    if (v236 == *v699)
                    {
LABEL_426:
                      *v273 = -8192;
                      v235 = vadd_s32(v235, (int32x2_t)0x1FFFFFFFFLL);
                    }
                    else
                    {
                      v275 = 1;
                      LODWORD(v276) = v717 & ((v236 >> 4) ^ (v236 >> 9));
                      while (v274 != (_QWORD *)-4096)
                      {
                        v277 = v276 + v275++;
                        v276 = v277 & v717;
                        v274 = (_QWORD *)v706[2 * v276];
                        if ((_QWORD *)v236 == v274)
                        {
                          v273 = &v706[2 * v276];
                          goto LABEL_426;
                        }
                      }
                    }
                    v712 = 1;
                    goto LABEL_418;
                  }
                  v712 = v272;
                }
                v201 = a1;
LABEL_418:
                if (++v264 == *((uint64_t **)&v263 + 1))
                  goto LABEL_437;
              }
            }
            v201 = a1;
LABEL_437:
            if ((_QWORD)v263)
            {
              operator delete((void *)v263);
              v201 = a1;
            }
            v124 = (uint64_t *)v721;
            v233 = v702;
LABEL_443:
            if (++v232 != v233)
              continue;
            break;
          }
          v751 = (const void ***)v235;
          v232 = (void **)__s1[0];
          v122 = v710;
LABEL_470:
          if (v232 != &__s1[2])
          {
            free(v232);
            v201 = a1;
          }
          v693 = (v712 | v693) & 1;
          if ((v712 & 1) == 0)
            goto LABEL_473;
        }
      }
      v287 = (uint64_t *)v124[10];
      if (v287 == v124 + 9)
      {
        v288 = 0;
        v289 = 0;
        v290 = 0;
      }
      else
      {
        v290 = 0;
        v289 = 0;
        v288 = 0;
        do
        {
          v291 = v287 - 3;
          if (!v287)
            v291 = 0;
          v292 = v291 + 5;
          for (nn = v291[6]; (uint64_t *)nn != v292; nn = *(_QWORD *)(nn + 8))
          {
            if (nn)
              v294 = nn - 24;
            else
              v294 = 0;
            v295 = *(unsigned __int8 *)(v294 + 16) - 33;
            v296 = v295 > 0x33;
            v297 = (1 << v295) & 0x8000000000041;
            if (!v296 && v297 != 0)
            {
              if (sub_1C575C0F4(v201, (uint64_t)v763, nn - 24))
              {
                if (v289 >= v290)
                {
                  v300 = (v289 - v288) >> 5;
                  v301 = v300 + 1;
                  if ((unint64_t)(v300 + 1) >> 59)
                    goto LABEL_1275;
                  if ((v290 - v288) >> 4 > v301)
                    v301 = (v290 - v288) >> 4;
                  if ((unint64_t)(v290 - v288) >= 0x7FFFFFFFFFFFFFE0)
                    v302 = 0x7FFFFFFFFFFFFFFLL;
                  else
                    v302 = v301;
                  if (v302)
                  {
                    if (v302 >> 59)
                      goto LABEL_1276;
                    v303 = (char *)operator new(32 * v302);
                  }
                  else
                  {
                    v303 = 0;
                  }
                  v304 = *(_OWORD *)&v763[2];
                  v305 = &v303[32 * v300];
                  *(_OWORD *)v305 = *(_OWORD *)v763;
                  *((_OWORD *)v305 + 1) = v304;
                  for (i1 = v305; v289 != v288; v289 -= 32)
                  {
                    v307 = *((_OWORD *)v289 - 1);
                    *((_OWORD *)i1 - 2) = *((_OWORD *)v289 - 2);
                    *((_OWORD *)i1 - 1) = v307;
                    i1 -= 32;
                  }
                  v290 = &v303[32 * v302];
                  v289 = v305 + 32;
                  if (v288)
                    operator delete(v288);
                  v288 = i1;
                  v123 = v723;
                }
                else
                {
                  v299 = *(_OWORD *)&v763[2];
                  *(_OWORD *)v289 = *(_OWORD *)v763;
                  *((_OWORD *)v289 + 1) = v299;
                  v289 += 32;
                }
                sub_1C575E608((uint64_t)v288, (uint64_t)v289, (v289 - v288) >> 5);
              }
              v201 = a1;
            }
          }
          v287 = (uint64_t *)v287[1];
        }
        while (v287 != v698);
      }
      v124 = (uint64_t *)v721;
      v308 = v201;
      v693 = 0;
      v309 = dword_1ED8330D8 * llvm::Function::getInstructionCount(v721);
      if (dword_1ED833258 < v309)
        v309 = dword_1ED833258;
      if (v309 <= dword_1ED833198)
        v309 = dword_1ED833198;
      if (*(_QWORD *)(v308 + 1392))
        v309 = -1;
      v707 = v309;
      v760 = 0uLL;
      LODWORD(v761) = 0;
      if (v288 == v289)
        goto LABEL_519;
      v693 = 0;
      do
      {
        if (llvm::Function::getInstructionCount((llvm::Function *)v124) >= v707)
          break;
        v400 = *((_OWORD *)v288 + 1);
        v757 = *(_OWORD *)v288;
        v758 = v400;
        v401 = a1;
        if (v289 - v288 >= 33)
        {
          v731 = v290;
          v402 = 0;
          v403 = (v289 - v288) >> 5;
          v404 = *((_OWORD *)v288 + 1);
          *(_OWORD *)__s1 = *(_OWORD *)v288;
          *(_OWORD *)&__s1[2] = v404;
          v405 = v288;
          do
          {
            v406 = &v405[32 * v402 + 32];
            v407 = (2 * v402) | 1;
            v408 = 2 * v402 + 2;
            if (v408 < v403)
            {
              v409 = sub_1C575E23C(*(_QWORD *)&v405[32 * v402 + 40], *(_QWORD *)&v405[32 * v402 + 48], *(_QWORD *)&v405[32 * v402 + 72], *(_QWORD *)&v405[32 * v402 + 80]);
              v401 = a1;
              v406 += 32 * v409;
              if (v409)
                v407 = v408;
            }
            v410 = *((_OWORD *)v406 + 1);
            *(_OWORD *)v405 = *(_OWORD *)v406;
            *((_OWORD *)v405 + 1) = v410;
            v405 = v406;
            v402 = v407;
          }
          while (v407 <= (uint64_t)((unint64_t)(v403 - 2) >> 1));
          v411 = v289 - 32;
          if (v406 == v289 - 32)
          {
            v414 = *(_OWORD *)&__s1[2];
            *(_OWORD *)v406 = *(_OWORD *)__s1;
            *((_OWORD *)v406 + 1) = v414;
          }
          else
          {
            v412 = *((_OWORD *)v289 - 1);
            *(_OWORD *)v406 = *(_OWORD *)v411;
            *((_OWORD *)v406 + 1) = v412;
            v413 = *(_OWORD *)&__s1[2];
            *(_OWORD *)v411 = *(_OWORD *)__s1;
            *((_OWORD *)v289 - 1) = v413;
            sub_1C575E608((uint64_t)v288, (uint64_t)(v406 + 32), (v406 + 32 - v288) >> 5);
            v401 = a1;
          }
          v124 = (uint64_t *)v721;
          v123 = v723;
          v290 = v731;
        }
        v415 = (llvm *)v757;
        v756 = (unsigned __int8 *)v757;
        v416 = *(_QWORD *)(v757 - 32);
        if (!v416
          || *(_BYTE *)(v416 + 16)
          || (v417 = *(uint64_t **)(v757 - 32), *(_QWORD *)(v416 + 24) != *(_QWORD *)(v757 + 72)))
        {
          v417 = 0;
        }
        v289 -= 32;
        if (v417 == v124)
          continue;
        v418 = *(unsigned __int8 *)(v416 + 16);
        if (v418 < 0x15 || v418 == 24)
        {
          if (v417 && (*((_BYTE *)v417 + 23) & 0x20) != 0)
          {
            v420 = **(_QWORD **)*v417;
            __s1[0] = v417;
            v421 = *(_DWORD *)(v420 + 2496);
            if (!v421)
            {
              v462 = 0;
              goto LABEL_853;
            }
            v422 = *(_QWORD *)(v420 + 2480);
            v423 = v421 - 1;
            v424 = v423 & ((v417 >> 4) ^ (v417 >> 9));
            v425 = (_QWORD *)(v422 + 40 * v424);
            v426 = (_QWORD ***)*v425;
            if ((uint64_t *)*v425 != v417)
            {
              v427 = 0;
              v428 = 1;
              while (v426 != (_QWORD ***)-4096)
              {
                if (v427)
                  v429 = 0;
                else
                  v429 = v426 == (_QWORD ***)-8192;
                if (v429)
                  v427 = v425;
                v430 = v424 + v428++;
                v424 = v430 & v423;
                v425 = (_QWORD *)(v422 + 40 * v424);
                v426 = (_QWORD ***)*v425;
                if ((uint64_t *)*v425 == v417)
                  goto LABEL_783;
              }
              if (v427)
                v462 = v427;
              else
                v462 = v425;
LABEL_853:
              v425 = sub_1C541AB24(v420 + 2480, (uint64_t)__s1, (uint64_t *)__s1, v462);
              v463 = __s1[0];
              v425[4] = 0;
              v425[3] = 0;
              *v425 = v463;
              v425[1] = v425 + 3;
              v425[2] = 0x100000000;
              v401 = a1;
            }
LABEL_783:
            v431 = *((unsigned int *)v425 + 4);
            if ((_DWORD)v431)
            {
              v432 = (_QWORD *)(v425[1] + 8);
              v433 = 16 * v431;
              while (*((_DWORD *)v432 - 2))
              {
                v432 += 2;
                v433 -= 16;
                if (!v433)
                  goto LABEL_787;
              }
              if (*v432)
              {
                if (*((_BYTE *)v417 + 16))
                {
                  if (*((_BYTE *)v417 + 16) == 3 && (*((_DWORD *)v417 + 5) & 0x7FFFFFF) == 0)
                    goto LABEL_787;
LABEL_856:
                  __s1[0] = &__s1[2];
                  __s1[1] = (void *)0x800000000;
                  v464 = v401;
                  if (sub_1C575D3E8(v401, (uint64_t)&v757, (uint64_t)__s1))
                  {
                    if (LODWORD(__s1[1]))
                    {
                      v465 = (uint64_t *)__s1[0];
                      v466 = (uint64_t *)((char *)__s1[0] + 8 * LODWORD(__s1[1]));
                      v467 = a1;
                      do
                      {
                        if (sub_1C575C0F4(v467, (uint64_t)v763, *v465))
                        {
                          if (v289 >= v290)
                          {
                            v470 = v290;
                            v471 = (v289 - v288) >> 5;
                            v472 = v471 + 1;
                            if ((unint64_t)(v471 + 1) >> 59)
                              goto LABEL_1275;
                            v473 = v470 - v288;
                            v474 = (v470 - v288) >> 4;
                            if (v474 > v472)
                              v472 = v474;
                            if (v473 >= 0x7FFFFFFFFFFFFFE0)
                              v475 = 0x7FFFFFFFFFFFFFFLL;
                            else
                              v475 = v472;
                            if (v475)
                            {
                              if (v475 >> 59)
                                goto LABEL_1276;
                              v476 = (char *)operator new(32 * v475);
                            }
                            else
                            {
                              v476 = 0;
                            }
                            v477 = *(_OWORD *)&v763[2];
                            v478 = &v476[32 * v471];
                            *(_OWORD *)v478 = *(_OWORD *)v763;
                            *((_OWORD *)v478 + 1) = v477;
                            if (v289 == v288)
                            {
                              v288 = &v476[32 * v471];
                            }
                            else
                            {
                              v479 = &v476[32 * v471];
                              do
                              {
                                v480 = *((_OWORD *)v289 - 1);
                                *((_OWORD *)v479 - 2) = *((_OWORD *)v289 - 2);
                                *((_OWORD *)v479 - 1) = v480;
                                v479 -= 32;
                                v289 -= 32;
                              }
                              while (v289 != v288);
                              v289 = v288;
                              v288 = v479;
                            }
                            v290 = &v476[32 * v475];
                            v469 = (uint64_t)(v478 + 32);
                            if (v289)
                              operator delete(v289);
                          }
                          else
                          {
                            v468 = *(_OWORD *)&v763[2];
                            *(_OWORD *)v289 = *(_OWORD *)v763;
                            *((_OWORD *)v289 + 1) = v468;
                            v469 = (uint64_t)(v289 + 32);
                          }
                          sub_1C575E608((uint64_t)v288, v469, (v469 - (uint64_t)v288) >> 5);
                          v289 = (char *)v469;
                        }
                        ++v465;
                        v467 = a1;
                      }
                      while (v465 != v466);
                      v693 = 1;
                      v124 = (uint64_t *)v721;
                    }
                    else
                    {
                      v693 = 1;
                    }
                  }
                  else if (!*(_QWORD *)(v464 + 1272))
                  {
                    sub_1C6187718((uint64_t)&v745, (uint64_t)&v760, (uint64_t *)&v756, (_QWORD *)&v757 + 1);
                  }
                  if (__s1[0] != &__s1[2])
                    free(__s1[0]);
                  continue;
                }
                if ((uint64_t *)v417[9] != v417 + 9 || (*((_BYTE *)v417 + 34) & 0x80) != 0)
                  goto LABEL_856;
              }
            }
          }
LABEL_787:
          if (*(_DWORD *)(v401 + 1284) == 1)
          {
            v434 = sub_1C575AF70(v401, v415);
            v435 = *(_QWORD *)(a1 + 1128);
            if (*(_BYTE *)(v435 + 24))
              v436 = *(_QWORD *)(v435 + 16);
            else
              v436 = -1;
            sub_1C575C634(a1, (uint64_t)v415, (uint64_t)v434, (uint64_t)v743, v123, v436);
          }
          continue;
        }
        v755 = 0;
        sub_1C575C1E0((unint64_t *)&v745, v401, (llvm *)v757, &v755);
        v714 = v755;
        v755 = (unint64_t)(float)(*((float *)&v758 + 2) * (float)(unint64_t)v755);
        v437 = v745;
        v732 = v746;
        if (v745 == (uint64_t **)v746)
          goto LABEL_839;
        v719 = 0;
        v438 = a1;
        while (1)
        {
          v439 = *v437;
          v754 = *v437;
          if (*(_DWORD *)(v438 + 1284) == 1)
          {
            v440 = *(_QWORD *)(v438 + 1128);
            if (*(_BYTE *)(v440 + 24))
              v441 = *(_QWORD *)(v440 + 16);
            else
              v441 = -1;
            v461 = (uint64_t)v439;
            v123 = v723;
            sub_1C575C634(v438, (uint64_t)v756, v461, (uint64_t)v743, v723, v441);
            goto LABEL_834;
          }
          v442 = sub_1C575B32C(v439);
          v443 = *((float *)&v758 + 2) * (float)v442;
          v444 = (unint64_t)v443;
          if (v719 >= dword_1ED80F788 && 100 * v444 < v714 * dword_1ED80F6C8)
            break;
          v445 = *(_QWORD *)(a1 + 1128);
          if (!*(_BYTE *)(v445 + 24) || *(_QWORD *)(v445 + 16) > v444)
            break;
          __s1[0] = &__s1[2];
          __s1[1] = (void *)0x800000000;
          *(_QWORD *)&v757 = v756;
          *((_QWORD *)&v757 + 1) = v439;
          *(_QWORD *)&v758 = (unint64_t)v443;
          if (sub_1C575CBFC(a1, (const llvm::CallBase *)v124, (uint64_t)&v757, v714, (unint64_t *)&v755, (uint64_t)__s1))
          {
            if (LODWORD(__s1[1]))
            {
              v446 = (uint64_t *)__s1[0];
              v447 = (uint64_t *)((char *)__s1[0] + 8 * LODWORD(__s1[1]));
              v438 = a1;
              do
              {
                if (sub_1C575C0F4(v438, (uint64_t)v763, *v446))
                {
                  if (v289 >= v290)
                  {
                    v450 = v290;
                    v451 = (v289 - v288) >> 5;
                    v452 = v451 + 1;
                    if ((unint64_t)(v451 + 1) >> 59)
                      goto LABEL_1275;
                    v453 = v450 - v288;
                    v454 = (v450 - v288) >> 4;
                    if (v454 > v452)
                      v452 = v454;
                    if (v453 >= 0x7FFFFFFFFFFFFFE0)
                      v455 = 0x7FFFFFFFFFFFFFFLL;
                    else
                      v455 = v452;
                    if (v455)
                    {
                      if (v455 >> 59)
                        goto LABEL_1276;
                      v456 = (char *)operator new(32 * v455);
                    }
                    else
                    {
                      v456 = 0;
                    }
                    v457 = *(_OWORD *)&v763[2];
                    v458 = &v456[32 * v451];
                    *(_OWORD *)v458 = *(_OWORD *)v763;
                    *((_OWORD *)v458 + 1) = v457;
                    if (v289 == v288)
                    {
                      v288 = &v456[32 * v451];
                    }
                    else
                    {
                      v459 = &v456[32 * v451];
                      do
                      {
                        v460 = *((_OWORD *)v289 - 1);
                        *((_OWORD *)v459 - 2) = *((_OWORD *)v289 - 2);
                        *((_OWORD *)v459 - 1) = v460;
                        v459 -= 32;
                        v289 -= 32;
                      }
                      while (v289 != v288);
                      v289 = v288;
                      v288 = v459;
                    }
                    v290 = &v456[32 * v455];
                    v449 = (uint64_t)(v458 + 32);
                    if (v289)
                      operator delete(v289);
                  }
                  else
                  {
                    v448 = *(_OWORD *)&v763[2];
                    *(_OWORD *)v289 = *(_OWORD *)v763;
                    *((_OWORD *)v289 + 1) = v448;
                    v449 = (uint64_t)(v289 + 32);
                  }
                  sub_1C575E608((uint64_t)v288, v449, (v449 - (uint64_t)v288) >> 5);
                  v289 = (char *)v449;
                }
                ++v446;
                v438 = a1;
              }
              while (v446 != v447);
            }
            else
            {
              v438 = a1;
            }
            ++v719;
            v693 = 1;
            v124 = (uint64_t *)v721;
            v123 = v723;
          }
          else
          {
            if (!*(_QWORD *)(a1 + 1272))
              sub_1C6187718((uint64_t)&v750, (uint64_t)&v760, (uint64_t *)&v756, &v754);
            v438 = a1;
            v123 = v723;
          }
          if (__s1[0] == &__s1[2])
            goto LABEL_835;
          free(__s1[0]);
LABEL_834:
          v438 = a1;
LABEL_835:
          if (++v437 == (uint64_t **)v732)
            goto LABEL_838;
        }
        v123 = v723;
LABEL_838:
        v437 = v745;
LABEL_839:
        if (v437)
          operator delete(v437);
      }
      while (v288 != v289);
LABEL_519:
      if (!llvm::sampleprof::FunctionSamples::ProfileIsCSFlat)
      {
        memset(__s1, 0, 20);
        sub_1C4DFEB14((uint64_t)__s1, (uint64_t)&v760);
        sub_1C575DAD8(a1, (uint64_t)__s1, v124);
        MEMORY[0x1CAA32FB4](__s1[0], 8);
      }
      MEMORY[0x1CAA32FB4](v760, 8);
      v122 = v710;
      if (v288)
        operator delete(v288);
LABEL_523:
      v198 = v693 | sub_1C62A308C((_QWORD *)a1, (uint64_t ***)v124, (uint64_t)v743);
      if ((v198 & 1) != 0)
      {
        v713 = v198;
        v755 = *(_QWORD *)*v124;
        for (i2 = v124[10]; (uint64_t *)i2 != v698; i2 = *(_QWORD *)(v718 + 8))
        {
          v718 = i2;
          if (i2)
            v311 = i2 - 24;
          else
            v311 = 0;
          v754 = (_QWORD *)v311;
          if (sub_1C617C470(v692, (uint64_t *)&v754)[1])
          {
            v320 = v311 + 40;
            for (i3 = *(_QWORD *)(v311 + 48); ; i3 = *(_QWORD *)(i3 + 8))
            {
              if (i3 == v320)
                goto LABEL_646;
              if (i3)
                v322 = i3 - 24;
              else
                v322 = 0;
              v323 = *(unsigned __int8 *)(v322 + 16);
              if (v323 == 84 || v323 == 33)
              {
                v324 = *(_QWORD *)(v322 - 32);
                if (v324 && !*(_BYTE *)(v324 + 16) && *(_QWORD *)(v324 + 24) == *(_QWORD *)(v322 + 72))
                {
                  if (v323 != 84 || (*(_BYTE *)(v324 + 33) & 0x20) == 0)
                  {
                    LODWORD(__s1[0]) = sub_1C617C470(v692, (uint64_t *)&v754)[1];
                    BranchWeights = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&v755, (uint64_t)__s1, 1);
                    if (BranchWeights || *(_QWORD *)(v322 + 48) || (*(_BYTE *)(v322 + 23) & 0x20) != 0)
                      llvm::Value::setMetadata((llvm::Value *)v322, 2, BranchWeights);
                  }
                }
                else
                {
                  v325 = *(_QWORD *)(v322 + 48);
                  if (v325)
                  {
                    v326 = sub_1C575AA78(a1, (llvm *)v322);
                    if (v326)
                    {
                      v328 = (uint64_t)v326;
                      v329 = llvm::sampleprof::FunctionSamples::getCallSiteIdentifier(v325, 0);
                      v330 = v329;
                      v331 = HIDWORD(v329);
                      sub_1C62A284C((uint64_t)v763, v328, v329, HIDWORD(v329));
                      if ((v764 & 1) != 0 || !HIDWORD(v763[1]))
                      {
                        if ((v764 & 1) != 0)
                          continue;
LABEL_573:
                        sub_1C61A8A20((uint64_t)v763);
                        continue;
                      }
                      if (llvm::sampleprof::FunctionSamples::ProfileIsProbeBased)
                      {
                        llvm::extractProbe((llvm *)v322, (uint64_t)&v760);
                        if ((_BYTE)v761)
                        {
                          if (*((float *)&v760 + 3) < 1.0)
                          {
                            sub_1C62A3F18((size_t **)&v757, (uint64_t *)v763[0], (int)v763[1], *((float *)&v760 + 3));
                            LOBYTE(v772) = v772 & 0xFE;
                            sub_1C62A29BC((llvm::StringMapImpl *)__s1, (uint64_t *)&v757);
                            v332 = v764;
                            if ((v764 & 1) == 0)
                            {
                              sub_1C61A8A20((uint64_t)v763);
                              v332 = v764;
                            }
                            if ((v772 & 1) != 0)
                            {
                              LOBYTE(v764) = v332 | 1;
                              v763[1] = __s1[1];
                              v763[0] = __s1[0];
                            }
                            else
                            {
                              v333 = __s1[0];
                              *(_OWORD *)&v763[1] = *(_OWORD *)&__s1[1];
                              memset(__s1, 0, 20);
                              LOBYTE(v764) = v332 & 0xFE;
                              v763[0] = v333;
                              sub_1C61A8A20((uint64_t)__s1);
                            }
                            sub_1C61A8A20((uint64_t)&v757);
                          }
                        }
                      }
                      __s1[0] = &__s1[2];
                      __s1[1] = (void *)0x200000000;
                      sub_1C62A3FC4((uint64_t *)v763, &v757);
                      v334 = (_OWORD *)v757;
                      if ((__int128 *)v757 != (__int128 *)((char *)&v757 + 8))
                      {
                        do
                        {
                          v337 = sub_1C575E2A0(*((int **)v334 + 4), *((_QWORD *)v334 + 5));
                          v338 = *((_QWORD *)v334 + 6);
                          v339 = (int)__s1[1];
                          if (LODWORD(__s1[1]) >= HIDWORD(__s1[1]))
                          {
                            sub_1C4F76720(__s1, v337, v338);
                          }
                          else
                          {
                            v340 = (unint64_t *)((char *)__s1[0] + 16 * LODWORD(__s1[1]));
                            *v340 = v337;
                            v340[1] = v338;
                            LODWORD(__s1[1]) = v339 + 1;
                          }
                          v341 = (_QWORD *)*((_QWORD *)v334 + 1);
                          if (v341)
                          {
                            do
                            {
                              v342 = v341;
                              v341 = (_QWORD *)*v341;
                            }
                            while (v341);
                          }
                          else
                          {
                            do
                            {
                              v342 = (_OWORD *)*((_QWORD *)v334 + 2);
                              v33 = *(_QWORD *)v342 == (_QWORD)v334;
                              v334 = v342;
                            }
                            while (!v33);
                          }
                          v334 = v342;
                        }
                        while (v342 != (__int128 *)((char *)&v757 + 8));
                      }
                      sub_1C47655E8((uint64_t)&v757, *((_QWORD **)&v757 + 1));
                      if (LODWORD(v763[1]))
                      {
                        for (i4 = (char *)v763[0]; !*(_QWORD *)i4 || *(_QWORD *)i4 == -8; i4 += 8)
                          ;
                      }
                      else
                      {
                        i4 = (char *)v763[0];
                      }
                      v343 = (char *)v763[0] + 8 * LODWORD(v763[1]);
                      if (i4 == v343)
                      {
                        v344 = 0;
                      }
                      else
                      {
                        v344 = 0;
                        v345 = *(_QWORD *)i4;
                        do
                        {
                          v346 = *(_QWORD *)(v345 + 8);
                          do
                          {
                            v347 = *((_QWORD *)i4 + 1);
                            i4 += 8;
                            v345 = v347;
                            if (v347)
                              v348 = v345 == -8;
                            else
                              v348 = 1;
                          }
                          while (v348);
                          v344 += v346;
                        }
                        while (i4 != v343);
                      }
                      if (!llvm::sampleprof::FunctionSamples::ProfileIsCSFlat)
                      {
                        v351 = *(uint64_t **)(v328 + 104);
                        v350 = v328 + 104;
                        v349 = v351;
                        if (v351)
                        {
                          v352 = v350;
                          do
                          {
                            v353 = *((_DWORD *)v349 + 8);
                            if (v353 >= v330)
                            {
                              if (v353 == v330)
                              {
                                if (*((_DWORD *)v349 + 9) < v331)
                                  ++v349;
                                else
                                  v352 = (uint64_t)v349;
                              }
                              else
                              {
                                v352 = (uint64_t)v349;
                              }
                            }
                            else
                            {
                              ++v349;
                            }
                            v349 = (uint64_t *)*v349;
                          }
                          while (v349);
                          if (v352 != v350)
                          {
                            v354 = *(_DWORD *)(v352 + 32);
                            if (v354 <= v330 && (v354 != v330 || *(_DWORD *)(v352 + 36) <= v331))
                            {
                              v355 = *(_QWORD **)(v352 + 40);
                              v356 = (_QWORD *)(v352 + 48);
                              if (v355 != (_QWORD *)(v352 + 48))
                              {
                                do
                                {
                                  v357 = sub_1C575B32C(v355 + 7);
                                  v358 = (_QWORD *)v355[1];
                                  if (v358)
                                  {
                                    do
                                    {
                                      v359 = v358;
                                      v358 = (_QWORD *)*v358;
                                    }
                                    while (v358);
                                  }
                                  else
                                  {
                                    do
                                    {
                                      v359 = (_QWORD *)v355[2];
                                      v33 = *v359 == (_QWORD)v355;
                                      v355 = v359;
                                    }
                                    while (!v33);
                                  }
                                  v344 += v357;
                                  v355 = v359;
                                }
                                while (v359 != v356);
                              }
                            }
                          }
                        }
                      }
                      if (v344)
                      {
                        sub_1C575FFAC(v322, (unsigned int *)__s1, v344);
                        v122 = v710;
                      }
                      else
                      {
                        v122 = v710;
                        if (byte_1ED80FB48 && (*(_QWORD *)(v322 + 48) || (*(_BYTE *)(v322 + 23) & 0x20) != 0))
                          llvm::Value::setMetadata((llvm::Value *)v322, 2, 0);
                      }
                      if (__s1[0] != &__s1[2])
                        free(__s1[0]);
                      if ((v764 & 1) == 0)
                        goto LABEL_573;
                    }
                  }
                }
              }
            }
          }
          if (byte_1ED80FB48 | byte_1ED80F188)
          {
            v312 = v311 + 40;
            for (i5 = *(_QWORD *)(v311 + 48); i5 != v312; i5 = *(_QWORD *)(i5 + 8))
            {
              if (i5)
                v314 = i5 - 24;
              else
                v314 = 0;
              v315 = *(unsigned __int8 *)(v314 + 16);
              if (v315 == 84 || v315 == 33)
              {
                v316 = *(unsigned __int8 *)(*(_QWORD *)(v314 - 32) + 16);
                if (v316 < 0x15 || v316 == 24)
                {
                  LODWORD(__s1[0]) = 0;
                  v319 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&v755, (uint64_t)__s1, 1);
                  if (v319 || *(_QWORD *)(v314 + 48) || (*(_BYTE *)(v314 + 23) & 0x20) != 0)
                  {
                    v318 = (llvm::Value *)v314;
                    goto LABEL_545;
                  }
                }
                else if (*(_QWORD *)(v314 + 48) || (*(_BYTE *)(v314 + 23) & 0x20) != 0)
                {
                  v318 = (llvm::Value *)v314;
                  v319 = 0;
LABEL_545:
                  llvm::Value::setMetadata(v318, 2, v319);
                  continue;
                }
              }
            }
          }
LABEL_646:
          v360 = v754;
          v361 = (_QWORD *)v754[5];
          if (v361 == v754 + 5)
          {
            v362 = 0;
          }
          else
          {
            if (v361)
              v363 = v361 - 3;
            else
              v363 = 0;
            if (*((unsigned __int8 *)v363 + 16) - 29 >= 0xB)
              v362 = 0;
            else
              v362 = v363;
          }
          v124 = (uint64_t *)v721;
          v364 = *((unsigned __int8 *)v362 + 16);
          if (v364 != 30)
            __asm { BR              X10 }
          if ((*((_DWORD *)v362 + 5) & 0x7FFFFFF) == 3)
          {
            v365 = (unsigned __int8 *)v362[6];
            v753 = v365;
            if (v365)
              llvm::MetadataTracking::track((uint64_t)&v753, v365, 2);
            *(_QWORD *)&v760 = &v761;
            *((_QWORD *)&v760 + 1) = 0x400000000;
            v745 = 0;
            v746 = 0;
            LODWORD(v747[0]) = 0;
            v750 = 0;
            v751 = 0;
            v752 = 0;
            if (byte_1ED837B98)
            {
              v378 = *((unsigned __int8 *)v362 + 16);
              if (v378 != 30)
                __asm { BR              X10 }
              if ((*((_DWORD *)v362 + 5) & 0x7FFFFFF) == 3)
                v379 = 2;
              else
                v379 = 1;
              sub_1C570F434((char **)&v750, v379);
              for (i6 = 0; ; ++i6)
              {
                v381 = *((unsigned __int8 *)v362 + 16);
                if (v381 != 30)
                  __asm { BR              X10 }
                v382 = (*((_DWORD *)v362 + 5) & 0x7FFFFFF) == 3 ? 2 : 1;
                if (i6 >= v382)
                  break;
                __s1[0] = (void *)llvm::Instruction::getSuccessor((llvm::Instruction *)v362, i6);
                v383 = sub_1C617C470((uint64_t)&v745, (uint64_t *)__s1);
                *((_QWORD *)v750 + i6) = v383[1];
                v384 = sub_1C617C470((uint64_t)&v745, (uint64_t *)__s1);
                ++v384[1];
              }
            }
            v366 = 0;
            FirstNonPHIOrDbgOrLifetime = 0;
            v367 = 0;
            while (1)
            {
              v368 = *((unsigned __int8 *)v362 + 16);
              if (v368 != 30)
                __asm { BR              X10 }
              v369 = (*((_DWORD *)v362 + 5) & 0x7FFFFFF) == 3 ? 2 : 1;
              if (v366 >= v369)
                break;
              Successor = (void *)llvm::Instruction::getSuccessor((llvm::Instruction *)v362, v366);
              v763[0] = Successor;
              __s1[0] = v360;
              __s1[1] = Successor;
              v371 = sub_1C6200D70(v695, (uint64_t *)__s1);
              if (v371[2] >= 0xFFFFFFFFuLL)
                v372 = 0xFFFFFFFFLL;
              else
                v372 = v371[2];
              if (byte_1ED837B98)
              {
                v374 = sub_1C617C470((uint64_t)&v745, (uint64_t *)v763);
                v375 = *((_QWORD *)v750 + v366);
                v376 = v372 / v374[1];
                if (v375 >= v372 % sub_1C617C470((uint64_t)&v745, (uint64_t *)v763)[1])
                  v373 = v376;
                else
                  v373 = v376 + 1;
              }
              else
              {
                v373 = v372 + 1;
              }
              v377 = DWORD2(v760);
              if (DWORD2(v760) >= (unint64_t)HIDWORD(v760))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v760, (uint64_t)&v761, DWORD2(v760) + 1, 4);
                v377 = DWORD2(v760);
              }
              *(_DWORD *)(v760 + 4 * v377) = v373;
              ++DWORD2(v760);
              if (v372 && v372 > v367)
              {
                v367 = v372;
                FirstNonPHIOrDbgOrLifetime = llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime((llvm::BasicBlock *)Successor, 1);
              }
              ++v366;
            }
            llvm::misexpect::checkBackendInstrumentation((llvm::misexpect *)v362, (unsigned int *)v760, DWORD2(v760));
            v749 = 0;
            if (v367)
            {
              v122 = v710;
              v124 = (uint64_t *)v721;
              if (!llvm::Instruction::extractProfTotalWeight((llvm::Instruction *)v362, &v749)
                || byte_1ED80FB48)
              {
                v385 = (llvm::MDNode *)llvm::MDBuilder::createBranchWeights((uint64_t **)&v755, v760, DWORD2(v760));
                if (v385 || v362[6] || (*((_BYTE *)v362 + 23) & 0x20) != 0)
                  llvm::Value::setMetadata((llvm::Value *)v362, 2, v385);
                v386 = *(llvm::OptimizationRemarkEmitter **)(a1 + 1136);
                v387 = ****(_QWORD ****)v386;
                if (*(_QWORD *)(v387 + 128)
                  || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v387 + 72) + 48))(*(_QWORD *)(v387 + 72)))
                {
                  v388 = *((_QWORD *)FirstNonPHIOrDbgOrLifetime + 6);
                  if (v388)
                  {
                    v389 = *(_QWORD **)(v388 - 8 * *(unsigned int *)(v388 + 8));
                    if (*(_BYTE *)v389 != 15)
                      v389 = (_QWORD *)v389[-*((unsigned int *)v389 + 2)];
                    v390 = *(_DWORD *)(v388 + 4);
                    LODWORD(v388) = *(unsigned __int16 *)(v388 + 2);
                  }
                  else
                  {
                    v389 = 0;
                    v390 = 0;
                  }
                  v391 = *((_QWORD *)FirstNonPHIOrDbgOrLifetime + 5);
                  v392 = *(void **)(v391 + 56);
                  LODWORD(__s1[1]) = 9;
                  BYTE4(__s1[1]) = 2;
                  __s1[2] = v392;
                  __s1[3] = v389;
                  *(_QWORD *)&v772 = __PAIR64__(v388, v390);
                  *((_QWORD *)&v772 + 1) = "sample-profile";
                  *(_QWORD *)&v773 = "PopularDest";
                  *((_QWORD *)&v773 + 1) = 11;
                  LOBYTE(v774) = 0;
                  BYTE8(v774) = 0;
                  *(_QWORD *)&v775 = v776;
                  *((_QWORD *)&v775 + 1) = 0x400000000;
                  v777 = 0;
                  v778 = -1;
                  v779 = v391;
                  __s1[0] = &off_1E814E500;
                  *(_QWORD *)&v757 = "most popular destination for conditional branches at ";
                  *((_QWORD *)&v757 + 1) = 53;
                  sub_1C53B17B4((uint64_t)&v775, (const void **)&v757);
                  v756 = v753;
                  if (v753)
                    llvm::MetadataTracking::track((uint64_t)&v756, v753, 2);
                  llvm::DiagnosticInfoOptimizationBase::Argument::Argument((uint64_t)&v757, "CondBranchesLoc", 0xFuLL, (const llvm::DebugLoc *)&v756);
                  v393 = sub_1C47E3888((uint64_t)__s1, (uint64_t)&v757);
                  sub_1C61998EC((uint64_t)v763, v393);
                  v763[0] = &off_1E814E500;
                  if (SHIBYTE(v759) < 0)
                    operator delete(*((void **)&v758 + 1));
                  if (SBYTE7(v758) < 0)
                    operator delete((void *)v757);
                  if (v756)
                    llvm::MetadataTracking::untrack((uint64_t)&v756, v756);
                  __s1[0] = &off_1E814E790;
                  v394 = (char *)v775;
                  if (DWORD2(v775))
                  {
                    v395 = (unint64_t)DWORD2(v775) << 6;
                    do
                    {
                      v396 = (void **)&v394[v395];
                      if (v394[v395 - 17] < 0)
                        operator delete(*(v396 - 5));
                      if (*((char *)v396 - 41) < 0)
                        operator delete(*(v396 - 8));
                      v395 -= 64;
                    }
                    while (v395);
                    v394 = (char *)v775;
                  }
                  if (v394 != (char *)v776)
                    free(v394);
                  llvm::OptimizationRemarkEmitter::emit(v386, (llvm::DiagnosticInfoOptimizationBase *)v763);
                  v763[0] = &off_1E814E790;
                  v397 = (char *)v768;
                  if (v769)
                  {
                    v398 = (unint64_t)v769 << 6;
                    do
                    {
                      v399 = (void **)&v397[v398];
                      if (v397[v398 - 17] < 0)
                        operator delete(*(v399 - 5));
                      if (*((char *)v399 - 41) < 0)
                        operator delete(*(v399 - 8));
                      v398 -= 64;
                    }
                    while (v398);
                    v397 = (char *)v768;
                  }
                  if (v397 != (char *)&v770)
                    free(v397);
                }
              }
            }
            else
            {
              v122 = v710;
              v124 = (uint64_t *)v721;
              if (byte_1ED80FB48 && (v362[6] || (*((_BYTE *)v362 + 23) & 0x20) != 0))
                llvm::Value::setMetadata((llvm::Value *)v362, 2, 0);
            }
            if (v750)
            {
              v751 = (const void ***)v750;
              operator delete(v750);
            }
            MEMORY[0x1CAA32FB4](v745, 8);
            if ((__int128 *)v760 != &v761)
              free((void *)v760);
            if (v753)
              llvm::MetadataTracking::untrack((uint64_t)&v753, v753);
          }
        }
        v198 = v713;
      }
      sub_1C62A3104((const llvm::sampleprof::FunctionSamples **)a1, (uint64_t **)v124);
      MEMORY[0x1CAA32FB4](v743[0], 8);
      v87 = a1;
      goto LABEL_295;
    }
    if (sub_1C62005F0((llvm::Function *)v124))
      goto LABEL_310;
LABEL_304:
    v198 = 0;
    v87 = a1;
LABEL_295:
    v199 = (uint64_t)v742;
    v742 = 0;
    if (v199)
    {
      sub_1C4EF268C((uint64_t)&v742, v199);
      v87 = a1;
    }
    v122 |= v198;
    v121 = v708 + 1;
    v123 = v723;
    if (v708 + 1 != v703)
      continue;
    break;
  }
  v121 = (uint64_t **)__p;
LABEL_893:
  if (v121)
  {
    v737 = v121;
    operator delete(v121);
    v87 = a1;
  }
  if (!*(_BYTE *)(v87 + 1280))
  {
    v483 = *(_QWORD *)(v87 + 1304);
    v484 = *(unsigned int *)(v87 + 1320);
    v485 = (uint64_t *)(v483 + 16 * v484);
    if (*(_DWORD *)(v87 + 1312))
    {
      if ((_DWORD)v484)
      {
        v486 = 16 * v484;
        v487 = *(uint64_t **)(v87 + 1304);
        while ((*v487 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v487 += 2;
          v486 -= 16;
          if (!v486)
            goto LABEL_904;
        }
      }
      else
      {
        v487 = *(uint64_t **)(v87 + 1304);
      }
    }
    else
    {
LABEL_904:
      v487 = (uint64_t *)(v483 + 16 * v484);
    }
    v488 = (uint64_t *)(v483 + 16 * v484);
LABEL_907:
    while (v487 != v488)
    {
      llvm::updateProfileCallee(*v487, v487[1], 0);
      v489 = v487 + 2;
      v487 = v485;
      if (v489 != v485)
      {
        v487 = v489;
        while ((*v487 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v487 += 2;
          if (v487 == v485)
          {
            v487 = v485;
            goto LABEL_907;
          }
        }
      }
    }
  }
  if (((unsigned int (*)(_QWORD **))(*v701)[9])(v701))
  {
    sub_1C62A4128(v694);
    sub_1C575B128(v701[3], 0);
  }
}

uint64_t sub_1C5759BB0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;

  v2 = *(_QWORD **)(a1 + 1400);
  *(_QWORD *)(a1 + 1400) = 0;
  if (v2)
  {
    MEMORY[0x1CAA32FB4](*v2, 8);
    MEMORY[0x1CAA32FC0](v2, 0x1020C405AF6BDC9);
  }
  v3 = *(_QWORD *)(a1 + 1392);
  *(_QWORD *)(a1 + 1392) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1C4F02264(a1 + 1352);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1328), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 1304), 8);
  v4 = *(_QWORD *)(a1 + 1288);
  *(_QWORD *)(a1 + 1288) = 0;
  if (v4)
  {
    v5 = sub_1C62A2428(v4);
    MEMORY[0x1CAA32FC0](v5, 0x10B0C408C61162ELL);
  }
  sub_1C575B0D4((uint64_t *)(a1 + 1272), 0);
  v6 = *(_QWORD **)(a1 + 1264);
  if (v6 == (_QWORD *)(a1 + 1240))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 1240);
  }
  else
  {
    if (!v6)
      goto LABEL_12;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_12:
  v8 = *(_QWORD **)(a1 + 1232);
  if (v8 == (_QWORD *)(a1 + 1208))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 1208);
  }
  else
  {
    if (!v8)
      goto LABEL_17;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_17:
  v10 = *(_QWORD **)(a1 + 1200);
  if (v10 == (_QWORD *)(a1 + 1176))
  {
    v11 = 4;
    v10 = (_QWORD *)(a1 + 1176);
LABEL_21:
    (*(void (**)(void))(*v10 + 8 * v11))();
    goto LABEL_22;
  }
  if (v10)
  {
    v11 = 5;
    goto LABEL_21;
  }
LABEL_22:
  sub_1C61A8A20(a1 + 1144);
  *(_QWORD *)a1 = off_1E817C690;
  v12 = *(unsigned int **)(a1 + 1120);
  if (v12)
  {
    v13 = v12 + 2;
    do
    {
      v14 = __ldaxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
  }
  if (*(char *)(a1 + 1119) < 0)
    operator delete(*(void **)(a1 + 1096));
  if (*(char *)(a1 + 1095) < 0)
    operator delete(*(void **)(a1 + 1072));
  v16 = *(_QWORD *)(a1 + 1056);
  *(_QWORD *)(a1 + 1056) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  sub_1C51D7534((uint64_t *)(a1 + 1016));
  sub_1C620115C(a1 + 992);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 992), 8);
  sub_1C620115C(a1 + 968);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 968), 8);
  v17 = *(_QWORD **)(a1 + 960);
  *(_QWORD *)(a1 + 960) = 0;
  if (v17)
  {
    v18 = llvm::LoopInfoBase<llvm::BasicBlock,llvm::Loop>::~LoopInfoBase(v17);
    MEMORY[0x1CAA32FC0](v18, 0x10B0C40D29300ECLL);
  }
  v19 = *(_QWORD *)(a1 + 952);
  *(_QWORD *)(a1 + 952) = 0;
  if (v19)
    sub_1C4DC4E98(a1 + 952, v19);
  v20 = *(_QWORD *)(a1 + 944);
  *(_QWORD *)(a1 + 944) = 0;
  if (v20)
    sub_1C4DC4DE4(a1 + 944, v20);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 920), 8);
  sub_1C6143384(*(_QWORD **)(a1 + 904));
  v21 = *(void **)(a1 + 368);
  if (v21 != (void *)(a1 + 384))
    free(v21);
  v22 = *(void **)(a1 + 88);
  if (v22 != *(void **)(a1 + 80))
    free(v22);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 56), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 32), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

uint64_t sub_1C5759E48()
{
  uint64_t v0;
  size_t v1;
  uint64_t *v2;
  unsigned int *v4;

  v0 = operator new();
  if (byte_1ED80FC1F >= 0)
    v1 = byte_1ED80FC1F & 0x7F;
  else
    v1 = unk_1ED80FC10;
  v4 = 0;
  if (byte_1ED80FC1F >= 0)
    v2 = &qword_1ED80FC08;
  else
    v2 = (uint64_t *)qword_1ED80FC08;
  return sub_1C5754314(v0, v2, v1, &v4);
}

void sub_1C5759EA8(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E817C4F8;
  sub_1C5759BB0((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
}

void sub_1C5759ED8(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E817C4F8;
  sub_1C5759BB0((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5759F1C()
{
  return "Sample profile pass";
}

uint64_t sub_1C5759F2C(uint64_t a1, const llvm::MemoryBuffer **a2)
{
  return sub_1C57549D0(a1 + 32, a2, 0);
}

void *sub_1C5759F38(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::ProfileSummaryInfoWrapperPass::ID);
}

void sub_1C5759F9C(uint64_t a1, uint64_t a2)
{
  char **v4;
  char *v5;
  char **v6;
  char *v7;
  char **v8;
  char *v9;
  char **v10;
  char *v11;
  uint64_t v12;

  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::AssumptionCacheTracker::ID);
  *(_QWORD *)(a1 + 1440) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::AssumptionCacheTracker::ID);
  v6 = **(char ****)(a1 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != llvm::TargetTransformInfoWrapperPass::ID);
  *(_QWORD *)(a1 + 1448) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  v8 = **(char ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::TargetLibraryInfoWrapperPass::ID);
  *(_QWORD *)(a1 + 1456) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v10 = **(char ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::ProfileSummaryInfoWrapperPass::ID);
  v12 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::ProfileSummaryInfoWrapperPass::ID)+ 32);
  sub_1C57550F8(a1 + 32, a2, 0, v12, 0);
}

void sub_1C575A0B0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C575A0C4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817C598;
  result[1] = v3;
  return result;
}

uint64_t sub_1C575A0F8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817C598;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C575A114(uint64_t a1, llvm::Function *a2)
{
  return llvm::AssumptionCacheTracker::getAssumptionCache(*(llvm::AssumptionCacheTracker **)(*(_QWORD *)(a1 + 8) + 1440), a2);
}

void sub_1C575A124()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C575A138(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817C5E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C575A16C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817C5E0;
  a2[1] = v2;
  return result;
}

uint64_t *sub_1C575A188(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10[2];
  int v11;
  _QWORD v12[2];
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1448);
  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v4 = *(_QWORD *)(v3 + 56);
  if (!v4)
  {
    sub_1C485C2F0();
    goto LABEL_8;
  }
  v1 = v12;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 48))(&v9);
  v2 = (uint64_t *)(v3 + 64);
  v5 = v9;
  if (!*(_BYTE *)(v3 + 72))
  {
    *(_QWORD *)(v3 + 64) = v9;
    *(_BYTE *)(v3 + 72) = 1;
    goto LABEL_5;
  }
  v9 = 0;
  v6 = *v2;
  *v2 = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v9;
    v9 = 0;
    if (v7)
LABEL_8:
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
LABEL_5:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v1);
  sub_1C4D8B52C(v10);
  return v2;
}

void sub_1C575A270()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C575A284(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E817C628;
  result[1] = v3;
  return result;
}

uint64_t sub_1C575A2B8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E817C628;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C575A2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  unint64_t v4;
  uint64_t v5;
  void *v7;
  void **v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11[2];
  int v12;
  uint64_t v13[2];
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *__src;
  unsigned int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 1456);
  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  llvm::TargetLibraryAnalysis::run(v2 + 32, a2, (uint64_t)&v18);
  *(_QWORD *)(v2 + 240) = v18;
  if (*(_BYTE *)(v2 + 320))
  {
    if ((uint64_t *)(v2 + 240) == &v18)
    {
LABEL_14:
      *(_DWORD *)(v2 + 312) = v22;
      goto LABEL_15;
    }
    v3 = (void **)(v2 + 248);
    v4 = v20;
    v5 = *(unsigned int *)(v2 + 256);
    if (v5 >= v20)
    {
      if (v20)
        memmove(*v3, __src, 8 * v20);
      goto LABEL_13;
    }
    if (*(_DWORD *)(v2 + 260) < v20)
    {
      *(_DWORD *)(v2 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 248, v2 + 264, v4, 8);
    }
    else if ((_DWORD)v5)
    {
      memmove(*v3, __src, 8 * v5);
      goto LABEL_11;
    }
    v5 = 0;
LABEL_11:
    if (v5 != v20)
      memcpy((char *)*v3 + 8 * v5, (char *)__src + 8 * v5, 8 * v20 - 8 * v5);
LABEL_13:
    *(_DWORD *)(v2 + 256) = v4;
    goto LABEL_14;
  }
  v7 = (void *)(v2 + 264);
  *(_QWORD *)(v2 + 248) = v2 + 264;
  v8 = (void **)(v2 + 248);
  *(_QWORD *)(v2 + 256) = 0x600000000;
  v9 = v20;
  if (v20 && v8 != &__src)
  {
    if (v20 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v2 + 248, v2 + 264, v20, 8);
      v10 = v20;
      if (!v20)
      {
LABEL_25:
        *(_DWORD *)(v2 + 256) = v9;
        goto LABEL_26;
      }
      v7 = *v8;
    }
    else
    {
      v10 = v20;
    }
    memcpy(v7, __src, 8 * v10);
    goto LABEL_25;
  }
LABEL_26:
  *(_DWORD *)(v2 + 312) = v22;
  *(_BYTE *)(v2 + 320) = 1;
LABEL_15:
  if (__src != &v21)
    free(__src);
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v13);
  sub_1C4D8B52C(v11);
  return v2 + 240;
}

void sub_1C575A4E8(llvm *this@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  const std::error_category *v6;
  const std::error_category *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  const std::error_category *v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int v16;
  unsigned int v17;
  float v18;
  unint64_t v19;
  llvm::OptimizationRemarkEmitter *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  unint64_t v28;
  void **v29;
  unsigned int v30[3];
  float v31;
  char v32;
  std::string v33;
  void *v34;
  char v35;
  std::string v36;
  void *__p;
  char v38;
  std::string v39;
  void *v40;
  char v41;
  std::string v42;
  void *v43;
  char v44;
  const void *v45[2];
  unint64_t v46[2];
  char v47;
  uint64_t (**v48)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  const char *v55;
  const char *v56;
  uint64_t v57;
  char v58;
  char v59;
  char *v60;
  uint64_t v61;
  _BYTE v62[260];
  int v63;
  uint64_t v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (!llvm::sampleprof::FunctionSamples::ProfileIsProbeBased)
  {
    if (*((_QWORD *)this + 6))
    {
      v11 = *((unsigned __int8 *)this + 16);
      if (v11 != 30
        && v11 != 83
        && (v11 != 84
         || (v12 = *((_QWORD *)this - 4)) == 0
         || *(_BYTE *)(v12 + 16)
         || *(_QWORD *)(v12 + 24) != *((_QWORD *)this + 9)
         || (*(_BYTE *)(v12 + 33) & 0x20) == 0))
      {
        if (!*(_BYTE *)(a2 + 1280))
        {
          v16 = v11 - 33;
          if (v16 <= 0x33 && ((1 << v16) & 0x8000000000041) != 0)
          {
            v17 = *(unsigned __int8 *)(*((_QWORD *)this - 4) + 16);
            if (v17 < 0x15 || v17 == 24)
            {
              if (sub_1C575AF70(a2, this))
                goto LABEL_13;
            }
          }
        }
        sub_1C575AB3C(a3, (_QWORD *)a2, (uint64_t)this);
        return;
      }
    }
LABEL_24:
    v13 = std::system_category();
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = v13;
    return;
  }
  llvm::extractProbe(this, (uint64_t)v30);
  if (!v32)
    goto LABEL_24;
  v6 = (const std::error_category *)sub_1C575AA78(a2, this);
  if (!v6
    || (v7 = v6, !*(_BYTE *)(a2 + 1280))
    && (v8 = *((unsigned __int8 *)this + 16) - 33, v8 <= 0x33)
    && ((1 << v8) & 0x8000000000041) != 0
    && ((v9 = *(unsigned __int8 *)(*((_QWORD *)this - 4) + 16), v9 >= 0x15) ? (v10 = v9 == 24) : (v10 = 1),
        v10 && sub_1C575AF70(a2, this)))
  {
LABEL_13:
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = 0;
    return;
  }
  v14 = v30[0];
  sub_1C620192C(v7, v30[0], 0, (uint64_t)v46);
  if ((v47 & 1) != 0)
  {
    *(_BYTE *)(a3 + 16) |= 1u;
    v15 = v46[1];
    *(_QWORD *)a3 = v46[0];
    *(_QWORD *)(a3 + 8) = v15;
  }
  else
  {
    v18 = v31;
    v19 = (unint64_t)(float)(v31 * (float)v46[0]);
    if (llvm::sampleprofutil::SampleCoverageTracker::markSamplesUsed((llvm::sampleprofutil::SampleCoverageTracker *)(a2 + 1016), (const llvm::sampleprof::FunctionSamples *)v7, v14, 0, v19))
    {
      v20 = *(llvm::OptimizationRemarkEmitter **)(a2 + 1136);
      v21 = ****(_QWORD ****)v20;
      if (*(_QWORD *)(v21 + 128)
        || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v21 + 72) + 48))(*(_QWORD *)(v21 + 72)))
      {
        v22 = *((_QWORD *)this + 5);
        v23 = *((_QWORD *)this + 6);
        v24 = *(_QWORD *)(v22 + 56);
        if (v23)
        {
          v25 = *(_QWORD *)(v23 - 8 * *(unsigned int *)(v23 + 8));
          if (*(_BYTE *)v25 != 15)
            v25 = *(_QWORD *)(v25 - 8 * *(unsigned int *)(v25 + 8));
          v26 = *(_DWORD *)(v23 + 4);
          LODWORD(v23) = *(unsigned __int16 *)(v23 + 2);
        }
        else
        {
          v25 = 0;
          v26 = 0;
        }
        v49 = 11;
        v50 = 2;
        v51 = v24;
        v52 = v25;
        v53 = v26;
        v54 = v23;
        v55 = "sample-profile";
        v56 = "AppliedSamples";
        v57 = 14;
        v58 = 0;
        v59 = 0;
        v60 = v62;
        v61 = 0x400000000;
        v62[256] = 0;
        v63 = -1;
        v64 = v22;
        v48 = &off_1E814E570;
        v42.__r_.__value_.__r.__words[0] = (std::string::size_type)"Applied ";
        v42.__r_.__value_.__l.__size_ = 8;
        sub_1C53B17B4((uint64_t)&v60, (const void **)&v42.__r_.__value_.__l.__data_);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v42, "NumSamples", 0xAuLL, v19);
        sub_1C47E3888((uint64_t)&v48, (uint64_t)&v42);
        if (v44 < 0)
          operator delete(v43);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)" samples from profile (ProbeId=";
        v39.__r_.__value_.__l.__size_ = 31;
        sub_1C53B17B4((uint64_t)&v60, (const void **)&v39.__r_.__value_.__l.__data_);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v39, "ProbeId", 7uLL, v14);
        sub_1C47E3888((uint64_t)&v48, (uint64_t)&v39);
        if (v41 < 0)
          operator delete(v40);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        v36.__r_.__value_.__r.__words[0] = (std::string::size_type)", Factor=";
        v36.__r_.__value_.__l.__size_ = 9;
        sub_1C53B17B4((uint64_t)&v60, (const void **)&v36.__r_.__value_.__l.__data_);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v36, "Factor", 6uLL, v18);
        sub_1C47E3888((uint64_t)&v48, (uint64_t)&v36);
        if (v38 < 0)
          operator delete(__p);
        if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v36.__r_.__value_.__l.__data_);
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)", OriginalSamples=";
        v33.__r_.__value_.__l.__size_ = 18;
        sub_1C53B17B4((uint64_t)&v60, (const void **)&v33.__r_.__value_.__l.__data_);
        llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v33, "OriginalSamples", 0xFuLL, v46[0]);
        sub_1C47E3888((uint64_t)&v48, (uint64_t)&v33);
        if (v35 < 0)
          operator delete(v34);
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v33.__r_.__value_.__l.__data_);
        v45[0] = ")";
        v45[1] = (const void *)1;
        sub_1C53B17B4((uint64_t)&v60, v45);
        llvm::OptimizationRemarkEmitter::emit(v20, (llvm::DiagnosticInfoOptimizationBase *)&v48);
        v48 = &off_1E814E790;
        v27 = v60;
        if ((_DWORD)v61)
        {
          v28 = (unint64_t)v61 << 6;
          do
          {
            v29 = (void **)&v27[v28];
            if (v27[v28 - 17] < 0)
              operator delete(*(v29 - 5));
            if (*((char *)v29 - 41) < 0)
              operator delete(*(v29 - 8));
            v28 -= 64;
          }
          while (v28);
          v27 = v60;
        }
        if (v27 != v62)
          free(v27);
      }
    }
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v19;
  }
}

void *sub_1C575AA78(uint64_t a1, llvm *this)
{
  void *result;
  _QWORD v5[2];
  char v6;
  const llvm::DILocation *v7;

  if (llvm::sampleprof::FunctionSamples::ProfileIsProbeBased)
  {
    llvm::extractProbe(this, (uint64_t)v5);
    if (!v6)
      return 0;
  }
  v7 = (const llvm::DILocation *)*((_QWORD *)this + 6);
  if (!v7)
    return *(void **)(a1 + 1064);
  sub_1C6201C30(a1 + 8, &v7, (uint64_t)v5);
  if (!v6)
    return *(void **)(v5[0] + 8);
  if (*(_BYTE *)(a1 + 1280))
    result = llvm::SampleContextTracker::getContextSamplesFor(*(llvm::SampleContextTracker **)(a1 + 1272), v7);
  else
    result = llvm::sampleprof::FunctionSamples::findFunctionSamples(*(llvm::sampleprof::FunctionSamples **)(a1 + 1064), v7, *(llvm::sampleprof::SampleProfileReaderItaniumRemapper **)(*(_QWORD *)(a1 + 1056) + 112));
  *(_QWORD *)(v5[0] + 8) = result;
  return result;
}

void sub_1C575AB3C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  const llvm::DILocation *v7;
  uint64_t v8;
  const std::error_category *v9;
  const std::error_category *v10;
  unsigned int Offset;
  unsigned __int8 *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  llvm::OptimizationRemarkEmitter *v17;
  _QWORD v18[4];
  unsigned int v19;
  unsigned int v20;

  v6 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 8))(a2, a3);
  if (!v6 || (v8 = *(_QWORD *)(a3 + 48)) == 0)
  {
    v9 = std::system_category();
    *(_BYTE *)(a1 + 16) |= 1u;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = v9;
    return;
  }
  v10 = (const std::error_category *)v6;
  Offset = llvm::sampleprof::FunctionSamples::getOffset(*(llvm::sampleprof::FunctionSamples **)(a3 + 48), v7);
  v20 = Offset;
  v12 = *(unsigned __int8 **)(v8 - 8 * *(unsigned int *)(v8 + 8));
  v13 = *v12;
  if (byte_1ED830650)
  {
    if (v13 == 19)
    {
      v15 = *((_DWORD *)v12 + 6);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v13 != 19)
  {
    LOBYTE(v16) = 0;
LABEL_14:
    v15 = v16 & 0x1F;
    goto LABEL_15;
  }
  v14 = *((_DWORD *)v12 + 6);
  if ((v14 & 1) != 0)
  {
LABEL_13:
    v15 = 0;
    goto LABEL_15;
  }
  if ((v14 & 0x40) == 0)
  {
    v16 = v14 >> 1;
    goto LABEL_14;
  }
  v15 = (v14 >> 2) & 0xFE0 | (v14 >> 1) & 0x1F;
LABEL_15:
  v19 = v15;
  sub_1C620192C(v10, Offset, v15, a1);
  if ((*(_BYTE *)(a1 + 16) & 1) == 0
    && llvm::sampleprofutil::SampleCoverageTracker::markSamplesUsed((llvm::sampleprofutil::SampleCoverageTracker *)(a2 + 127), (const llvm::sampleprof::FunctionSamples *)v10, Offset, v15, *(_QWORD *)a1))
  {
    v17 = (llvm::OptimizationRemarkEmitter *)a2[142];
    v18[0] = a3;
    v18[1] = a1;
    v18[2] = &v20;
    v18[3] = &v19;
    sub_1C62A2174(v17, (uint64_t)v18);
  }
}

void sub_1C575AC84(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char *v9;
  unint64_t v10;
  void **v11;
  std::string v12;
  void *v13;
  char v14;
  std::string v15;
  void *v16;
  char v17;
  std::string v18;
  void *__p;
  char v20;
  const char *v21;
  uint64_t v22;
  uint64_t (**v23)(llvm::DiagnosticInfoWithLocationBase *__hidden);
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  char v33;
  char v34;
  void *v35;
  uint64_t v36;
  _BYTE v37[260];
  int v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 40);
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 48);
  v6 = *(_QWORD *)(v4 + 56);
  if (v5)
  {
    v7 = *(_QWORD *)(v5 - 8 * *(unsigned int *)(v5 + 8));
    if (*(_BYTE *)v7 != 15)
      v7 = *(_QWORD *)(v7 - 8 * *(unsigned int *)(v7 + 8));
    v8 = *(_DWORD *)(v5 + 4);
    LODWORD(v5) = *(unsigned __int16 *)(v5 + 2);
  }
  else
  {
    v7 = 0;
    v8 = 0;
  }
  v24 = 11;
  v25 = 2;
  v26 = v6;
  v27 = v7;
  v28 = v8;
  v29 = v5;
  v30 = "sample-profile-impl";
  v31 = "AppliedSamples";
  v32 = 14;
  v33 = 0;
  v34 = 0;
  v35 = v37;
  v36 = 0x400000000;
  v37[256] = 0;
  v38 = -1;
  v39 = v4;
  v23 = &off_1E814E570;
  v21 = "Applied ";
  v22 = 8;
  sub_1C53B17B4((uint64_t)&v35, (const void **)&v21);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v18, "NumSamples", 0xAuLL, **(_QWORD **)(a2 + 8));
  sub_1C47E3888((uint64_t)&v23, (uint64_t)&v18);
  if (v20 < 0)
    operator delete(__p);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v21 = " samples from profile (offset: ";
  v22 = 31;
  sub_1C53B17B4((uint64_t)&v35, (const void **)&v21);
  llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v15, "LineOffset", 0xAuLL, **(_DWORD **)(a2 + 16));
  sub_1C47E3888((uint64_t)&v23, (uint64_t)&v15);
  if (v17 < 0)
    operator delete(v16);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (**(_DWORD **)(a2 + 24))
  {
    v21 = ".";
    v22 = 1;
    sub_1C53B17B4((uint64_t)&v35, (const void **)&v21);
    llvm::DiagnosticInfoOptimizationBase::Argument::Argument(&v12, "Discriminator", 0xDuLL, **(_DWORD **)(a2 + 24));
    sub_1C47E3888((uint64_t)&v23, (uint64_t)&v12);
    if (v14 < 0)
      operator delete(v13);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
  }
  v21 = ")";
  v22 = 1;
  sub_1C53B17B4((uint64_t)&v35, (const void **)&v21);
  sub_1C62A22EC((uint64_t)a1, (uint64_t)&v23);
  *a1 = &off_1E814E570;
  v23 = &off_1E814E790;
  v9 = (char *)v35;
  if ((_DWORD)v36)
  {
    v10 = (unint64_t)v36 << 6;
    do
    {
      v11 = (void **)&v9[v10];
      if (v9[v10 - 17] < 0)
        operator delete(*(v11 - 5));
      if (*((char *)v11 - 41) < 0)
        operator delete(*(v11 - 8));
      v10 -= 64;
    }
    while (v10);
    v9 = (char *)v35;
  }
  if (v9 != v37)
    free(v9);
}

_QWORD *sub_1C575AF70(uint64_t a1, llvm *a2)
{
  uint64_t v2;
  uint64_t ***v4;
  unint64_t v5;
  char *v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  uint64_t ***v17;
  unint64_t v18;
  unint64_t v19;

  v2 = *((_QWORD *)a2 + 6);
  if (!v2)
    return 0;
  v4 = (uint64_t ***)*((_QWORD *)a2 - 4);
  if (!v4 || *((_BYTE *)v4 + 16) || v4[3] != *((uint64_t ***)a2 + 9))
  {
    v5 = 0;
    v6 = 0;
    goto LABEL_6;
  }
  if ((*((_BYTE *)v4 + 23) & 0x10) != 0)
  {
    v9 = ***v4;
    v10 = *(_QWORD *)(v9 + 152);
    v11 = *(unsigned int *)(v9 + 168);
    if ((_DWORD)v11)
    {
      LODWORD(v12) = (v11 - 1) & ((v4 >> 4) ^ (v4 >> 9));
      v13 = (uint64_t ****)(v10 + 16 * v12);
      v14 = *v13;
      if (*v13 == v4)
      {
LABEL_20:
        v17 = v13[1];
        v18 = (unint64_t)*v17;
        v6 = (char *)(v17 + 2);
        v5 = v18;
        goto LABEL_6;
      }
      v15 = 1;
      while (v14 != (uint64_t ***)-4096)
      {
        v16 = v12 + v15++;
        v12 = v16 & (v11 - 1);
        v14 = *(uint64_t ****)(v10 + 16 * v12);
        if (v14 == v4)
        {
          v13 = (uint64_t ****)(v10 + 16 * v12);
          goto LABEL_20;
        }
      }
    }
    v13 = (uint64_t ****)(v10 + 16 * v11);
    goto LABEL_20;
  }
  v5 = 0;
  v6 = &byte_1C871356D;
LABEL_6:
  if (*(_BYTE *)(a1 + 1280))
    return (_QWORD *)llvm::SampleContextTracker::getCalleeContextSamplesFor(*(llvm::SampleContextTracker **)(a1 + 1272), (uint64_t)a2, (uint64_t)v6, v5);
  result = sub_1C575AA78(a1, a2);
  if (result)
  {
    v8 = (uint64_t)result;
    v19 = llvm::sampleprof::FunctionSamples::getCallSiteIdentifier(v2, 0);
    return llvm::sampleprof::FunctionSamples::findFunctionSamplesAt(v8, (unsigned int *)&v19, (uint64_t)v6, v5, *(_QWORD *)(*(_QWORD *)(a1 + 1056) + 112));
  }
  return result;
}

uint64_t *sub_1C575B0D4(uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    sub_1C62A18C0(v2 + 40, *(_QWORD **)(v2 + 48));
    sub_1C62A245C(v2);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

void sub_1C575B128(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  void *__p[2];
  __int128 v21;
  __int128 v22;

  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)__p = 0u;
  if (a1)
  {
    v3 = a1;
    do
    {
      v19 = v3 + 7;
      sub_1C51DF784((uint64_t)__p, &v19);
      v3 = (_QWORD *)*v3;
    }
    while (v3);
    while (*((_QWORD *)&v22 + 1))
    {
      v4 = *(_QWORD **)(*(_QWORD *)((char *)__p[1] + (((unint64_t)v22 >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * (v22 & 0x1FF));
      *(_QWORD *)&v22 = v22 + 1;
      --*((_QWORD *)&v22 + 1);
      if ((unint64_t)v22 >= 0x400)
      {
        operator delete(*(void **)__p[1]);
        __p[1] = (char *)__p[1] + 8;
        *(_QWORD *)&v22 = v22 - 512;
      }
      *v4 = a2;
      v5 = (_QWORD *)v4[12];
      v6 = v4 + 13;
      if (v5 != v6)
      {
        do
        {
          v7 = (_QWORD *)v5[5];
          if (v7 != v5 + 6)
          {
            do
            {
              v19 = v7 + 7;
              sub_1C51DF784((uint64_t)__p, &v19);
              v8 = (_QWORD *)v7[1];
              if (v8)
              {
                do
                {
                  v9 = v8;
                  v8 = (_QWORD *)*v8;
                }
                while (v8);
              }
              else
              {
                do
                {
                  v9 = (_QWORD *)v7[2];
                  v10 = *v9 == (_QWORD)v7;
                  v7 = v9;
                }
                while (!v10);
              }
              v7 = v9;
            }
            while (v9 != v5 + 6);
          }
          v11 = (_QWORD *)v5[1];
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (_QWORD *)v5[2];
              v10 = *v12 == (_QWORD)v5;
              v5 = v12;
            }
            while (!v10);
          }
          v5 = v12;
        }
        while (v12 != v6);
      }
    }
  }
  v13 = (void **)__p[1];
  v14 = (void **)v21;
  *((_QWORD *)&v22 + 1) = 0;
  v15 = v21 - (unint64_t)__p[1];
  if ((unint64_t)v21 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v13);
      v14 = (void **)v21;
      v13 = (void **)((char *)__p[1] + 8);
      __p[1] = v13;
      v15 = v21 - (_QWORD)v13;
    }
    while ((_QWORD)v21 - (_QWORD)v13 > 0x10uLL);
  }
  v16 = v15 >> 3;
  if (v16 == 1)
  {
    v17 = 256;
    goto LABEL_28;
  }
  if (v16 == 2)
  {
    v17 = 512;
LABEL_28:
    *(_QWORD *)&v22 = v17;
  }
  if (v13 != v14)
  {
    do
    {
      v18 = *v13++;
      operator delete(v18);
    }
    while (v13 != v14);
    if ((void *)v21 != __p[1])
      *(_QWORD *)&v21 = v21 + (((unint64_t)__p[1] - v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
}

