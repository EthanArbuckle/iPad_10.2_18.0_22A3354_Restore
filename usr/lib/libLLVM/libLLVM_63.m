uint64_t sub_1C612B618(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = -1;
  *(_QWORD *)(a1 + 72) = -1;
  *(_QWORD *)(a1 + 16) = &unk_1C69032D4;
  *(_QWORD *)(a1 + 24) = "10000";
  *(_DWORD *)(a1 + 48) = 13480;
  *(_QWORD *)a1 = &off_1E7F95970;
  *(_QWORD *)(a1 + 8) = &unk_1E7FB5628;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_1C61344B0(a1 + 80, a1);
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 440) = 0;
  v2 = (_QWORD *)operator new();
  *v2 = &unk_1E8054328;
  v3 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(a1 + 432) = v2;
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v2 = *(_QWORD **)(a1 + 432);
  }
  v4 = (_QWORD *)operator new();
  *v4 = &off_1E7F958F0;
  v4[1] = v2;
  v5 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v4;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t sub_1C612B714(uint64_t a1, uint64_t a2, unsigned int a3, int a4, char a5)
{
  uint64_t v8;
  const llvm::MachineOperand *v9;
  llvm::MachineFunction *v10;
  llvm::MachineInstr *v11;
  llvm::MachineInstr *v12;
  llvm::MachineInstr *v13;
  llvm::MachineFunction *v14;
  const llvm::MachineOperand *v15;
  __int128 v17;
  __int128 v18;

  v8 = *(_QWORD *)(a2 + 32);
  v9 = (const llvm::MachineOperand *)(v8 + 64);
  v10 = sub_1C612596C(*(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 8), (unsigned __int8 **)(a2 + 56), a1 + 48 * a3, *(_DWORD *)(v8 + 4));
  v12 = v11;
  LODWORD(v17) = 1;
  *((_QWORD *)&v17 + 1) = 0;
  *(_QWORD *)&v18 = 0;
  llvm::MachineInstr::addOperand(v11, v10, (const llvm::MachineOperand *)&v17);
  llvm::MachineInstr::addOperand(v12, v10, v9);
  if (a4)
  {
    llvm::MachineInstr::addOperand(v12, v10, v9);
    llvm::MachineInstr::addOperand(v12, v10, v9);
    if ((a5 & 1) != 0)
    {
      v13 = v12;
      v14 = v10;
      v15 = v9;
LABEL_6:
      llvm::MachineInstr::addOperand(v13, v14, v15);
    }
  }
  else
  {
    LODWORD(v17) = 1;
    *((_QWORD *)&v17 + 1) = 0;
    *(_QWORD *)&v18 = 0;
    llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v17);
    llvm::MachineInstr::addOperand(v12, v10, v9);
    LODWORD(v17) = 1;
    *((_QWORD *)&v17 + 1) = 0;
    *(_QWORD *)&v18 = 0;
    llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v17);
    llvm::MachineInstr::addOperand(v12, v10, v9);
    LODWORD(v17) = 1;
    *((_QWORD *)&v17 + 1) = 0;
    *(_QWORD *)&v18 = 0;
    llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v17);
    if ((a5 & 1) != 0)
    {
      llvm::MachineInstr::addOperand(v12, v10, v9);
      LODWORD(v17) = 1;
      *((_QWORD *)&v17 + 1) = 0;
      *(_QWORD *)&v18 = 0;
      v15 = (const llvm::MachineOperand *)&v17;
      v13 = v12;
      v14 = v10;
      goto LABEL_6;
    }
  }
  v17 = 0u;
  v18 = 0u;
  llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v17);
  LODWORD(v17) = 1;
  *((_QWORD *)&v17 + 1) = 0;
  *(_QWORD *)&v18 = 3;
  llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v17);
  v18 = 0uLL;
  v17 = 0x200000000uLL;
  llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v17);
  return llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)a2);
}

uint64_t sub_1C612B8E8(uint64_t a1, llvm::MachineInstr *this)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v7;
  unsigned int v8;
  int v9;
  char v10;

  v2 = 0;
  switch(**((_WORD **)this + 2))
  {
    case 0x123:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 564624;
      goto LABEL_34;
    case 0x124:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 564672;
      goto LABEL_34;
    case 0x125:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 564720;
      goto LABEL_34;
    case 0x126:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 564768;
      goto LABEL_34;
    case 0x127:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 564816;
      goto LABEL_34;
    case 0x128:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 564864;
      goto LABEL_34;
    case 0x129:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 564912;
      goto LABEL_34;
    case 0x12A:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 564960;
      goto LABEL_34;
    case 0x12B:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 565008;
      goto LABEL_34;
    case 0x12C:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 565056;
      goto LABEL_34;
    case 0x12D:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 565104;
      goto LABEL_34;
    case 0x12E:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 565152;
      goto LABEL_34;
    case 0x12F:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 565200;
      goto LABEL_34;
    case 0x130:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 565248;
      goto LABEL_34;
    case 0x131:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 565296;
      goto LABEL_34;
    case 0x132:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 565344;
      goto LABEL_34;
    case 0x134:
      sub_1C612B714(*(_QWORD *)(a1 + 8), (uint64_t)this, 0x565u, 0, 0);
      goto LABEL_35;
    case 0x135:
      v7 = *(_QWORD *)(a1 + 8);
      v2 = 1;
      v8 = 1445;
      v9 = 1;
      v10 = 0;
      goto LABEL_42;
    case 0x136:
      v7 = *(_QWORD *)(a1 + 8);
      v2 = 1;
      v8 = 1003;
      v9 = 0;
      goto LABEL_41;
    case 0x137:
      v7 = *(_QWORD *)(a1 + 8);
      v2 = 1;
      v8 = 1015;
      v9 = 1;
LABEL_41:
      v10 = 1;
LABEL_42:
      sub_1C612B714(v7, (uint64_t)this, v8, v9, v10);
      return v2;
    case 0x13A:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 642720;
      goto LABEL_34;
    case 0x13B:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 642768;
      goto LABEL_34;
    case 0x13C:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 642816;
      goto LABEL_34;
    case 0x13D:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 642864;
      goto LABEL_34;
    case 0x13E:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 642912;
      goto LABEL_34;
    case 0x13F:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 642960;
      goto LABEL_34;
    case 0x140:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 643008;
      goto LABEL_34;
    case 0x141:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 643056;
      goto LABEL_34;
    case 0x142:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 643104;
      goto LABEL_34;
    case 0x143:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 643152;
      goto LABEL_34;
    case 0x144:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 643200;
      goto LABEL_34;
    case 0x145:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 643248;
      goto LABEL_34;
    case 0x146:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 643296;
      goto LABEL_34;
    case 0x147:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 643344;
      goto LABEL_34;
    case 0x148:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 643392;
      goto LABEL_34;
    case 0x149:
      llvm::MachineInstr::removeOperand((uint64_t)this, 2u);
      v5 = *(_QWORD *)(a1 + 8) + 643440;
LABEL_34:
      *((_QWORD *)this + 2) = v5;
LABEL_35:
      v2 = 1;
      break;
    default:
      return v2;
  }
  return v2;
}

uint64_t sub_1C612BD34(uint64_t a1, unsigned int a2)
{
  return a2;
}

void *sub_1C612BD3C()
{
  return &unk_1E7F95578;
}

void *sub_1C612BD4C()
{
  return &unk_1E7F955D8;
}

llvm::MachineFunction *sub_1C612BD5C(_QWORD *a1, _QWORD *a2, unint64_t *a3, unsigned __int8 **a4, int a5, unsigned int a6, int a7)
{
  unsigned __int8 *v14;
  unint64_t v15;
  llvm::MachineFunction *v16;
  unsigned int v17;
  llvm::MachineFunction **v18;
  llvm::MachineInstr *v19;
  llvm::MachineFunction *v20;
  llvm::MachineFunction **v21;
  llvm::MachineInstr *v22;
  llvm::MachineFunction *v23;
  llvm::MachineFunction **v24;
  llvm::MachineInstr *v25;
  llvm::MachineFunction *v26;
  llvm::MachineInstr *v27;
  llvm::MachineFunction *v28;
  llvm::MachineInstr *v29;
  llvm::MachineFunction *v30;
  llvm::MachineInstr *v31;
  llvm::MachineFunction *v32;
  llvm::MachineFunction *v34[2];
  unsigned __int8 *v35;
  __int128 v36;
  __int128 v37;

  v14 = *a4;
  v35 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v35, v14, 2);
  v15 = sub_1C47BF56C(a1, a2, a3, &v35, a5, a6, 1);
  if (v35)
    llvm::MetadataTracking::untrack((uint64_t)&v35, v35);
  if (!v15)
  {
    v34[0] = sub_1C4787570((uint64_t)a2, a3, a4, a1[1] + 66288, a5);
    v34[1] = v16;
    LODWORD(v36) = 1;
    *((_QWORD *)&v36 + 1) = 0;
    *(_QWORD *)&v37 = 0;
    llvm::MachineInstr::addOperand(v16, v34[0], (const llvm::MachineOperand *)&v36);
    if (a7)
      v17 = 8;
    else
      v17 = 0;
    v18 = sub_1C47BF4F4(v34, a6, v17, 0);
    v19 = v18[1];
    v20 = *v18;
    LODWORD(v36) = 1;
    *((_QWORD *)&v36 + 1) = 0;
    *(_QWORD *)&v37 = 0;
    llvm::MachineInstr::addOperand(v19, v20, (const llvm::MachineOperand *)&v36);
    v21 = sub_1C47BF4F4(v18, a6, v17, 0);
    v22 = v21[1];
    v23 = *v21;
    LODWORD(v36) = 1;
    *((_QWORD *)&v36 + 1) = 0;
    *(_QWORD *)&v37 = 0;
    llvm::MachineInstr::addOperand(v22, v23, (const llvm::MachineOperand *)&v36);
    v24 = sub_1C47BF4F4(v21, a6, v17, 0);
    v25 = v24[1];
    v26 = *v24;
    LODWORD(v36) = 1;
    *((_QWORD *)&v36 + 1) = 0;
    *(_QWORD *)&v37 = 0;
    llvm::MachineInstr::addOperand(v25, v26, (const llvm::MachineOperand *)&v36);
    v28 = *v24;
    v27 = v24[1];
    v36 = 0u;
    v37 = 0u;
    llvm::MachineInstr::addOperand(v27, v28, (const llvm::MachineOperand *)&v36);
    v30 = *v24;
    v29 = v24[1];
    LODWORD(v36) = 1;
    *((_QWORD *)&v36 + 1) = 0;
    *(_QWORD *)&v37 = 0;
    llvm::MachineInstr::addOperand(v29, v30, (const llvm::MachineOperand *)&v36);
    v32 = *v24;
    v31 = v24[1];
    v36 = 0u;
    v37 = 0u;
    llvm::MachineInstr::addOperand(v31, v32, (const llvm::MachineOperand *)&v36);
    return v24[1];
  }
  return (llvm::MachineFunction *)v15;
}

llvm::MachineFunction *sub_1C612BF28(_QWORD *a1, _QWORD *a2, unint64_t *a3, unsigned __int8 **a4, int a5, unsigned int a6, int a7)
{
  unsigned __int8 *v14;
  unint64_t v15;
  llvm::MachineFunction *v16;
  unsigned int v17;
  llvm::MachineFunction **v18;
  llvm::MachineInstr *v19;
  llvm::MachineFunction *v20;
  llvm::MachineFunction **v21;
  llvm::MachineInstr *v22;
  llvm::MachineFunction *v23;
  llvm::MachineFunction **v24;
  llvm::MachineInstr *v25;
  llvm::MachineFunction *v26;
  llvm::MachineFunction **v27;
  llvm::MachineInstr *v28;
  llvm::MachineFunction *v29;
  llvm::MachineInstr *v30;
  llvm::MachineFunction *v31;
  llvm::MachineInstr *v32;
  llvm::MachineFunction *v33;
  llvm::MachineInstr *v34;
  llvm::MachineFunction *v35;
  llvm::MachineFunction *v37[2];
  unsigned __int8 *v38;
  __int128 v39;
  __int128 v40;

  v14 = *a4;
  v38 = v14;
  if (v14)
    llvm::MetadataTracking::track((uint64_t)&v38, v14, 2);
  v15 = sub_1C47BF56C(a1, a2, a3, &v38, a5, a6, 0);
  if (v38)
    llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
  if (!v15)
  {
    v37[0] = sub_1C4787570((uint64_t)a2, a3, a4, a1[1] + 48144, a5);
    v37[1] = v16;
    LODWORD(v39) = 1;
    *((_QWORD *)&v39 + 1) = 0;
    *(_QWORD *)&v40 = 0;
    llvm::MachineInstr::addOperand(v16, v37[0], (const llvm::MachineOperand *)&v39);
    if (a7)
      v17 = 8;
    else
      v17 = 0;
    v18 = sub_1C47BF4F4(v37, a6, v17, 0);
    v19 = v18[1];
    v20 = *v18;
    LODWORD(v39) = 1;
    *((_QWORD *)&v39 + 1) = 0;
    *(_QWORD *)&v40 = 0;
    llvm::MachineInstr::addOperand(v19, v20, (const llvm::MachineOperand *)&v39);
    v21 = sub_1C47BF4F4(v18, a6, v17, 0);
    v22 = v21[1];
    v23 = *v21;
    LODWORD(v39) = 1;
    *((_QWORD *)&v39 + 1) = 0;
    *(_QWORD *)&v40 = 0;
    llvm::MachineInstr::addOperand(v22, v23, (const llvm::MachineOperand *)&v39);
    v24 = sub_1C47BF4F4(v21, a6, v17, 0);
    v25 = v24[1];
    v26 = *v24;
    LODWORD(v39) = 1;
    *((_QWORD *)&v39 + 1) = 0;
    *(_QWORD *)&v40 = 0;
    llvm::MachineInstr::addOperand(v25, v26, (const llvm::MachineOperand *)&v39);
    v27 = sub_1C47BF4F4(v24, a6, v17, 0);
    v28 = v27[1];
    v29 = *v27;
    LODWORD(v39) = 1;
    *((_QWORD *)&v39 + 1) = 0;
    *(_QWORD *)&v40 = 0;
    llvm::MachineInstr::addOperand(v28, v29, (const llvm::MachineOperand *)&v39);
    v31 = *v27;
    v30 = v27[1];
    v39 = 0u;
    v40 = 0u;
    llvm::MachineInstr::addOperand(v30, v31, (const llvm::MachineOperand *)&v39);
    v33 = *v27;
    v32 = v27[1];
    LODWORD(v39) = 1;
    *((_QWORD *)&v39 + 1) = 0;
    *(_QWORD *)&v40 = 0;
    llvm::MachineInstr::addOperand(v32, v33, (const llvm::MachineOperand *)&v39);
    v35 = *v27;
    v34 = v27[1];
    v39 = 0u;
    v40 = 0u;
    llvm::MachineInstr::addOperand(v34, v35, (const llvm::MachineOperand *)&v39);
    return v27[1];
  }
  return (llvm::MachineFunction *)v15;
}

uint64_t sub_1C612C124(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;

  if (**(unsigned __int16 **)(a2 + 16) - 12157 > 0x31)
    return 0;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)v3 || *(_BYTE *)(v3 + 32) != 5 || *(_BYTE *)(v3 + 64) != 1 || *(_QWORD *)(v3 + 80))
    return 0;
  *a3 = *(_DWORD *)(v3 + 48);
  return *(unsigned int *)(v3 + 4);
}

uint64_t sub_1C612C180(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3;

  if (**(unsigned __int16 **)(a2 + 16) - 12884 > 0x31)
    return 0;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)v3 || *(_BYTE *)(v3 + 32) != 5 || *(_BYTE *)(v3 + 64) != 1 || *(_QWORD *)(v3 + 80))
    return 0;
  *a3 = *(_DWORD *)(v3 + 48);
  return *(unsigned int *)(v3 + 4);
}

void sub_1C612C1DC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, llvm::MachineFunction *a6, uint64_t a7)
{
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  llvm::MachineMemOperand *v29;
  llvm::MachineMemOperand *v30;
  llvm::MachineFunction *v31;
  unsigned int v32;
  llvm::MachineFunction **v33;
  llvm::MachineInstr *v34;
  llvm::MachineFunction *v35;
  llvm::MachineInstr *v36;
  llvm::MachineFunction *v37;
  llvm::MachineFunction *v38;
  llvm::MachineInstr *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  _BYTE *v43;
  llvm::MachineFunction *v44[2];
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  unsigned __int8 *v49;
  __int128 v50;
  __int128 v51;

  v49 = 0;
  if (a2 + 48 != a3)
    sub_1C47C0F04(&v49, (unsigned __int8 **)(a3 + 56));
  v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 32) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), **(_QWORD **)(a2 + 32));
  v15 = *(unsigned __int8 *)(v14 + 280);
  v16 = *(unsigned __int16 *)(*(_QWORD *)a7 + 24);
  v17 = v16 >> 5;
  v18 = dword_1C642C814[v16 >> 5];
  v19 = 1 << v16;
  v43 = (_BYTE *)v14;
  if ((v19 & v18) != 0)
  {
    v20 = a4;
    v21 = v15 == 0;
    v22 = 12892;
    goto LABEL_5;
  }
  if ((dword_1C642E020[v17] & v19) != 0)
  {
    v20 = a4;
    v21 = v15 == 0;
    v22 = 12910;
    goto LABEL_5;
  }
  if ((dword_1C642F8F8[v17] & v19) != 0)
  {
    v20 = a4;
    v21 = v15 == 0;
    v22 = 12922;
    goto LABEL_5;
  }
  if ((dword_1C6431170[v17] & v19) != 0)
  {
    v20 = a4;
    v21 = v15 == 0;
    v22 = 12926;
    goto LABEL_5;
  }
  if ((dword_1C6432370[v17] & v19) != 0)
  {
    v20 = a4;
    v21 = v15 == 0;
    v22 = 12928;
    goto LABEL_5;
  }
  if ((dword_1C6433A08[v17] & v19) != 0)
  {
    v20 = a4;
    v21 = v15 == 0;
    v22 = 12932;
    goto LABEL_5;
  }
  if ((dword_1C6434A88[v17] & v19) != 0)
  {
    v20 = a4;
    v21 = v15 == 0;
    v22 = 12884;
    goto LABEL_5;
  }
  if ((dword_1C6435F40[v17] & v19) != 0)
  {
    v20 = a4;
    v21 = v15 == 0;
    v22 = 12886;
    goto LABEL_5;
  }
  if ((dword_1C6436E40[v17] & v19) != 0)
  {
    v20 = a4;
    v21 = v15 == 0;
    v22 = 12888;
    goto LABEL_5;
  }
  v20 = a4;
  if ((dword_1C6438118[v17] & v19) != 0)
  {
    v21 = v15 == 0;
    v22 = 12890;
    goto LABEL_5;
  }
  if ((dword_1C6438E98[v17] & v19) != 0)
  {
    v21 = v15 == 0;
    v22 = 12894;
    goto LABEL_5;
  }
  if ((dword_1C6439F90[v17] & v19) != 0)
  {
    v21 = v15 == 0;
    v22 = 12896;
    goto LABEL_5;
  }
  if ((dword_1C643AB90[v17] & v19) != 0)
  {
    v21 = v15 == 0;
    v22 = 12898;
    goto LABEL_5;
  }
  if ((dword_1C643BAA8[v17] & v19) != 0)
  {
    v21 = v15 == 0;
    v22 = 12900;
    goto LABEL_5;
  }
  if ((dword_1C643C528[v17] & v19) != 0)
  {
    v21 = v15 == 0;
    v22 = 12902;
    goto LABEL_5;
  }
  if ((dword_1C643D260[v17] & v19) != 0)
  {
    v21 = v15 == 0;
    v22 = 12904;
    goto LABEL_5;
  }
  if ((dword_1C643DB18[v17] & v19) != 0)
  {
    v21 = v15 == 0;
    v22 = 12906;
    goto LABEL_5;
  }
  if ((dword_1C643DDA0[v17] & v19) != 0)
  {
    v21 = v15 == 0;
    v22 = 12908;
    goto LABEL_5;
  }
  if ((dword_1C643DFE0[v17] & v19) != 0)
  {
    v21 = v15 == 0;
    v22 = 12912;
    goto LABEL_5;
  }
  if ((dword_1C643E1D8[v17] & v19) != 0)
  {
    v21 = v15 == 0;
    v22 = 12914;
    goto LABEL_5;
  }
  if ((dword_1C643E388[v17] & v19) != 0)
  {
    v21 = v15 == 0;
    v22 = 12916;
    goto LABEL_5;
  }
  if ((dword_1C643E4F0[v17] & v19) != 0)
  {
    v21 = v15 == 0;
    v22 = 12918;
    goto LABEL_5;
  }
  if ((dword_1C643E610[v17] & v19) != 0)
  {
    v21 = v15 == 0;
    v22 = 12920;
LABEL_5:
    if (v21)
      v23 = v22 + 1;
    else
      v23 = v22;
    goto LABEL_8;
  }
  v41 = dword_1C643E6E8[v17];
  v42 = 12924;
  if (!*(_BYTE *)(v14 + 280))
    v42 = 12925;
  if ((v41 & v19) != 0)
    v23 = v42;
  else
    v23 = 0;
LABEL_8:
  v24 = *(_QWORD *)(a2 + 32);
  v25 = *(_QWORD *)(v24 + 56);
  llvm::MachinePointerInfo::getFixedStack((uint64_t ***)v24, a6, 0, (uint64_t)&v47);
  v26 = *(_QWORD *)(v25 + 8) + 40 * (*(_DWORD *)(v25 + 32) + (_DWORD)a6);
  v27 = *(unsigned int *)(v26 + 8);
  v28 = *(_BYTE *)(v26 + 16);
  v45 = v47;
  v46 = v48;
  v50 = 0u;
  v51 = 0u;
  llvm::MachineFunction::getMachineMemOperand(v24, (uint64_t)&v45, 2, v27, v28, (uint64_t)&v50, 0, 1, 0, 0, 0);
  v30 = v29;
  v44[0] = sub_1C477A100(a2, (unint64_t *)a3, &v49, *(_QWORD *)(a1 + 8) + 48 * v23);
  v44[1] = v31;
  if (a5)
    v32 = 8;
  else
    v32 = 0;
  v33 = sub_1C47BF4F4(v44, v20, v32, 0);
  v34 = v33[1];
  v35 = *v33;
  LODWORD(v50) = 5;
  *((_QWORD *)&v50 + 1) = 0;
  LODWORD(v51) = (_DWORD)a6;
  llvm::MachineInstr::addOperand(v34, v35, (const llvm::MachineOperand *)&v50);
  v37 = *v33;
  v36 = v33[1];
  LODWORD(v50) = 1;
  *((_QWORD *)&v50 + 1) = 0;
  *(_QWORD *)&v51 = 0;
  llvm::MachineInstr::addOperand(v36, v37, (const llvm::MachineOperand *)&v50);
  v38 = *v33;
  v39 = v33[1];
  if (v15)
  {
    LODWORD(v50) = 1;
    *((_QWORD *)&v50 + 1) = 0;
    *(_QWORD *)&v51 = 0;
    llvm::MachineInstr::addOperand(v39, v38, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
  }
  else
  {
    if (v43[310])
    {
      v40 = 1;
    }
    else if (v43[311])
    {
      v40 = 2;
    }
    else
    {
      v40 = 3;
      if (!v43[312])
        v40 = 0;
    }
    LODWORD(v50) = 1;
    *((_QWORD *)&v50 + 1) = 0;
    *(_QWORD *)&v51 = v40;
    llvm::MachineInstr::addOperand(v39, v38, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
    *((_QWORD *)&v50 + 1) = 0;
    *(_QWORD *)&v51 = 0;
    llvm::MachineInstr::addOperand(v39, v38, (const llvm::MachineOperand *)&v50);
    LODWORD(v50) = 1;
  }
  *((_QWORD *)&v50 + 1) = 0;
  *(_QWORD *)&v51 = 0;
  llvm::MachineInstr::addOperand(v39, v38, (const llvm::MachineOperand *)&v50);
  LODWORD(v50) = 1;
  *((_QWORD *)&v50 + 1) = 0;
  *(_QWORD *)&v51 = 0;
  llvm::MachineInstr::addOperand(v39, v38, (const llvm::MachineOperand *)&v50);
  LODWORD(v50) = 1;
  *((_QWORD *)&v50 + 1) = 0;
  *(_QWORD *)&v51 = 0;
  llvm::MachineInstr::addOperand(v39, v38, (const llvm::MachineOperand *)&v50);
  v50 = 0u;
  v51 = 0u;
  llvm::MachineInstr::addOperand(v39, v38, (const llvm::MachineOperand *)&v50);
  llvm::MachineInstr::addMemOperand(v39, v38, v30);
  if (v49)
    llvm::MetadataTracking::untrack((uint64_t)&v49, v49);
}

void sub_1C612C7B0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, llvm::MachineFunction *a5, uint64_t a6)
{
  uint64_t v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int VirtualRegister;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  llvm::MachineMemOperand *v25;
  llvm::MachineMemOperand *v26;
  uint64_t v27;
  llvm::MachineFunction *v28;
  llvm::MachineInstr *v29;
  llvm::MachineInstr *v30;
  llvm::MachineFunction *v31;
  llvm::MachineInstr *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _BYTE *v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 *v46;
  __int128 v47;
  __int128 v48;

  v46 = 0;
  if (a2 + 48 != a3)
    sub_1C47C0F04(&v46, (unsigned __int8 **)(a3 + 56));
  v12 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(a2 + 32) + 8) + 16))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), **(_QWORD **)(a2 + 32));
  v13 = *(unsigned __int8 *)(v12 + 280);
  v14 = *(unsigned __int16 *)(*(_QWORD *)a6 + 24);
  v15 = v14 >> 5;
  v16 = dword_1C642C814[v14 >> 5];
  v17 = 1 << v14;
  v40 = (_BYTE *)v12;
  v41 = a4;
  if ((v17 & v16) != 0)
  {
    if (*(_BYTE *)(v12 + 280))
      v18 = 12165;
    else
      v18 = 12166;
    VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40), (uint64_t)&off_1E7F984F0, "", 0);
    goto LABEL_8;
  }
  if ((dword_1C642E020[v15] & v17) == 0)
  {
    if ((dword_1C642F8F8[v15] & v17) != 0)
    {
      v33 = v13 == 0;
      v34 = 12195;
      goto LABEL_17;
    }
    if ((dword_1C6431170[v15] & v17) != 0)
    {
      v33 = v13 == 0;
      v34 = 12199;
      goto LABEL_17;
    }
    if ((dword_1C6432370[v15] & v17) != 0)
    {
      v33 = v13 == 0;
      v34 = 12201;
      goto LABEL_17;
    }
    if ((dword_1C6433A08[v15] & v17) != 0)
    {
      v33 = v13 == 0;
      v34 = 12205;
      goto LABEL_17;
    }
    if ((dword_1C6434A88[v15] & v17) != 0)
    {
      v33 = v13 == 0;
      v34 = 12157;
      goto LABEL_17;
    }
    if ((dword_1C6435F40[v15] & v17) != 0)
    {
      v33 = v13 == 0;
      v34 = 12159;
      goto LABEL_17;
    }
    if ((dword_1C6436E40[v15] & v17) != 0)
    {
      v33 = v13 == 0;
      v34 = 12161;
      goto LABEL_17;
    }
    if ((dword_1C6438118[v15] & v17) != 0)
    {
      v33 = v13 == 0;
      v34 = 12163;
      goto LABEL_17;
    }
    if ((dword_1C6438E98[v15] & v17) != 0)
    {
      v36 = v13 == 0;
      v37 = 12167;
    }
    else if ((dword_1C6439F90[v15] & v17) != 0)
    {
      v36 = v13 == 0;
      v37 = 12169;
    }
    else if ((dword_1C643AB90[v15] & v17) != 0)
    {
      v36 = v13 == 0;
      v37 = 12171;
    }
    else if ((dword_1C643BAA8[v15] & v17) != 0)
    {
      v36 = v13 == 0;
      v37 = 12173;
    }
    else if ((dword_1C643C528[v15] & v17) != 0)
    {
      v36 = v13 == 0;
      v37 = 12175;
    }
    else if ((dword_1C643D260[v15] & v17) != 0)
    {
      v36 = v13 == 0;
      v37 = 12177;
    }
    else if ((dword_1C643DB18[v15] & v17) != 0)
    {
      v36 = v13 == 0;
      v37 = 12179;
    }
    else if ((dword_1C643DDA0[v15] & v17) != 0)
    {
      v36 = v13 == 0;
      v37 = 12181;
    }
    else if ((dword_1C643DFE0[v15] & v17) != 0)
    {
      v36 = v13 == 0;
      v37 = 12185;
    }
    else if ((dword_1C643E1D8[v15] & v17) != 0)
    {
      v36 = v13 == 0;
      v37 = 12187;
    }
    else if ((dword_1C643E388[v15] & v17) != 0)
    {
      v36 = v13 == 0;
      v37 = 12189;
    }
    else if ((dword_1C643E4F0[v15] & v17) != 0)
    {
      v36 = v13 == 0;
      v37 = 12191;
    }
    else
    {
      if ((dword_1C643E610[v15] & v17) == 0)
      {
        v38 = dword_1C643E6E8[v15];
        v39 = 12197;
        if (!*(_BYTE *)(v12 + 280))
          v39 = 12198;
        if ((v38 & v17) != 0)
          v18 = v39;
        else
          v18 = 0;
        goto LABEL_50;
      }
      v36 = v13 == 0;
      v37 = 12193;
    }
    if (v36)
      v18 = v37 + 1;
    else
      v18 = v37;
LABEL_50:
    VirtualRegister = a4;
    goto LABEL_8;
  }
  v33 = v13 == 0;
  v34 = 12183;
LABEL_17:
  if (v33)
    v18 = v34 + 1;
  else
    v18 = v34;
  VirtualRegister = a4;
LABEL_8:
  v20 = *(_QWORD *)(a2 + 32);
  v21 = *(_QWORD *)(v20 + 56);
  llvm::MachinePointerInfo::getFixedStack((uint64_t ***)v20, a5, 0, (uint64_t)&v44);
  v22 = *(_QWORD *)(v21 + 8) + 40 * (*(_DWORD *)(v21 + 32) + (_DWORD)a5);
  v23 = *(unsigned int *)(v22 + 8);
  v24 = *(_BYTE *)(v22 + 16);
  v42 = v44;
  v43 = v45;
  v47 = 0u;
  v48 = 0u;
  llvm::MachineFunction::getMachineMemOperand(v20, (uint64_t)&v42, 1, v23, v24, (uint64_t)&v47, 0, 1, 0, 0, 0);
  v26 = v25;
  v27 = a1;
  v28 = sub_1C4787570(a2, (unint64_t *)a3, &v46, *(_QWORD *)(a1 + 8) + 48 * v18, VirtualRegister);
  v30 = v29;
  LODWORD(v47) = 5;
  *((_QWORD *)&v47 + 1) = 0;
  LODWORD(v48) = (_DWORD)a5;
  llvm::MachineInstr::addOperand(v29, v28, (const llvm::MachineOperand *)&v47);
  LODWORD(v47) = 1;
  *((_QWORD *)&v47 + 1) = 0;
  *(_QWORD *)&v48 = 0;
  llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v47);
  if (v13)
  {
    LODWORD(v47) = 1;
    *((_QWORD *)&v47 + 1) = 0;
    *(_QWORD *)&v48 = 0;
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
  }
  else
  {
    if (v40[310])
    {
      v35 = 1;
    }
    else if (v40[311])
    {
      v35 = 2;
    }
    else
    {
      v35 = 3;
      if (!v40[312])
        v35 = 0;
    }
    LODWORD(v47) = 1;
    *((_QWORD *)&v47 + 1) = 0;
    *(_QWORD *)&v48 = v35;
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
    *((_QWORD *)&v47 + 1) = 0;
    *(_QWORD *)&v48 = 0;
    llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v47);
    LODWORD(v47) = 1;
  }
  *((_QWORD *)&v47 + 1) = 0;
  *(_QWORD *)&v48 = 0;
  llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v47);
  LODWORD(v47) = 1;
  *((_QWORD *)&v47 + 1) = 0;
  *(_QWORD *)&v48 = 0;
  llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v47);
  LODWORD(v47) = 1;
  *((_QWORD *)&v47 + 1) = 0;
  *(_QWORD *)&v48 = 0;
  llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v47);
  v47 = 0u;
  v48 = 0u;
  llvm::MachineInstr::addOperand(v30, v28, (const llvm::MachineOperand *)&v47);
  llvm::MachineInstr::addMemOperand(v30, v28, v26);
  if (VirtualRegister != v41)
  {
    v31 = sub_1C4787570(a2, (unint64_t *)a3, &v46, *(_QWORD *)(v27 + 8) + 912, v41);
    *((_QWORD *)&v47 + 1) = 0;
    v48 = 0uLL;
    LODWORD(v47) = 256;
    DWORD1(v47) = VirtualRegister;
    llvm::MachineInstr::addOperand(v32, v31, (const llvm::MachineOperand *)&v47);
  }
  if (v46)
    llvm::MetadataTracking::untrack((uint64_t)&v46, v46);
}

uint64_t sub_1C612CDC8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v5;

  v2 = (_QWORD *)(a2 + 48);
  if (a2 + 48 == *(_QWORD *)(a2 + 56))
    return 0;
  v4 = *v2 & 0xFFFFFFFFFFFFFFF8;
  if (!v4 || (*(_BYTE *)v4 & 4) == 0)
  {
    while ((*(_WORD *)(v4 + 44) & 4) != 0)
      v4 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
  }
  if (sub_1C47BEF78(v4))
  {
    while (v4 != *(_QWORD *)(a2 + 56))
    {
      v4 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
      if (!v4 || (*(_BYTE *)v4 & 4) == 0)
      {
        while ((*(_WORD *)(v4 + 44) & 4) != 0)
          v4 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
      }
      if ((sub_1C47BEF78(v4) & 1) == 0)
        goto LABEL_15;
    }
    return 0;
  }
LABEL_15:
  if (**(unsigned __int16 **)(v4 + 16) - 11575 > 1)
    return 0;
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v4);
  if (v2 == *(_QWORD **)(a2 + 56))
    return 1;
  v5 = *v2 & 0xFFFFFFFFFFFFFFF8;
  if (!v5 || (*(_BYTE *)v5 & 4) == 0)
  {
    while ((*(_WORD *)(v5 + 44) & 4) != 0)
      v5 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFF8;
  }
  if (**(_WORD **)(v5 + 16) != 11576)
    return 1;
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v5);
  return 2;
}

uint64_t sub_1C612CEF0(int a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  char *v9;
  int v10;
  unsigned int *v11;

  v6 = dword_1C6416968[a1 - 1];
  if (a4)
    v7 = 4;
  else
    v7 = 0;
  if (a5)
    v8 = 2;
  else
    v8 = 0;
  v9 = (char *)&unk_1C6416658 + 4 * (v8 | v7 | a6 | (8 * v6));
  if (a4)
    v10 = 2;
  else
    v10 = 0;
  v11 = (unsigned int *)((char *)&unk_1C6416718 + 4 * (v10 | a6 | (4 * v6)));
  if (!a3)
    v11 = (unsigned int *)v9;
  return *v11;
}

uint64_t sub_1C612CF5C(int a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  int v6;
  int v7;
  int v8;
  char *v9;
  int v10;
  unsigned int *v11;

  v6 = dword_1C6416980[a1 - 10];
  if (a4)
    v7 = 4;
  else
    v7 = 0;
  if (a5)
    v8 = 2;
  else
    v8 = 0;
  v9 = (char *)&unk_1C6416778 + 4 * (v8 | v7 | a6 | (8 * v6));
  if (a4)
    v10 = 2;
  else
    v10 = 0;
  v11 = (unsigned int *)((char *)&unk_1C64168B8 + 4 * (v10 | a6 | (4 * v6)));
  if (!a3)
    v11 = (unsigned int *)v9;
  return *v11;
}

BOOL sub_1C612CFC8(uint64_t a1, unsigned int a2)
{
  return (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 48 * a2 + 16) & 1) == 0;
}

uint64_t sub_1C612CFE4(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5, _BYTE *a6)
{
  unsigned int v9;
  _OWORD *v10;
  _OWORD *v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;

  if ((unsigned __int16)(**(_WORD **)(a2 + 16) - 308) >= 4u)
    llvm::report_fatal_error((llvm *)"Unknown select opcode!", (const char *)1);
  v9 = 0x10001u >> (8 * (**(_BYTE **)(a2 + 16) - 52));
  *a4 = 1;
  *a5 = 2;
  v10 = (_OWORD *)sub_1C47C0F60(a3, *(_QWORD *)(a2 + 32) + 96, 1);
  v11 = (_OWORD *)(*(_QWORD *)a3 + 32 * *(unsigned int *)(a3 + 8));
  v12 = v10[1];
  *v11 = *v10;
  v11[1] = v12;
  ++*(_DWORD *)(a3 + 8);
  v13 = (_OWORD *)sub_1C47C0F60(a3, *(_QWORD *)(a2 + 32) + 128, 1);
  v14 = (_OWORD *)(*(_QWORD *)a3 + 32 * *(unsigned int *)(a3 + 8));
  v15 = v13[1];
  *v14 = *v13;
  v14[1] = v15;
  ++*(_DWORD *)(a3 + 8);
  *a6 = v9;
  return 0;
}

llvm::MachineInstr *sub_1C612D0C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  llvm::MachineFunction *v8;
  llvm::MachineInstr *v9;
  llvm::MachineInstr *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;

  if ((**(unsigned __int16 **)(a2 + 16) | 2) != 0x136)
    llvm::report_fatal_error((llvm *)"Unknown select opcode!", (const char *)1);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 40);
  v6 = sub_1C47C0304(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 64), *(_DWORD *)(*(_QWORD *)(a2 + 32) + 68), v5);
  v7 = (uint64_t *)v6;
  if (!v6)
  {
    v7 = (uint64_t *)sub_1C47C0304(*(_DWORD *)(*(_QWORD *)(a2 + 32) + 32), *(_DWORD *)(*(_QWORD *)(a2 + 32) + 36), v5);
    if (!v7)
      return 0;
  }
  v8 = sub_1C4779044(*(_QWORD *)(a2 + 24), a2, (unsigned __int8 **)(a2 + 56), v7[2], *(_DWORD *)(*(_QWORD *)(a2 + 32) + 4));
  v10 = v9;
  v11 = v7[2];
  v12 = *(unsigned __int16 *)(v11 + 2);
  if (v12 != 1)
  {
    v20 = 1;
    do
    {
      if ((*(_BYTE *)(*(_QWORD *)(v11 + 40) + 6 * v20 + 2) & 2) != 0)
        break;
      v21 = v20;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)(v7[4] + 32 * v20));
      v20 = v21 + 1;
    }
    while (v12 != v21 + 1);
  }
  if (v6)
  {
    v13 = 1;
    LODWORD(v22) = 1;
    *((_QWORD *)&v22 + 1) = 0;
    *(_QWORD *)&v23 = 3;
    llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v22);
  }
  else
  {
    LODWORD(v22) = 1;
    *((_QWORD *)&v22 + 1) = 0;
    *(_QWORD *)&v23 = 1;
    llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v22);
    v13 = 2;
  }
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)(*(_QWORD *)(a2 + 32) + 128));
  v14 = (__int128 *)(*(_QWORD *)(a2 + 32) + 32 * v13);
  v15 = v14[1];
  v22 = *v14;
  v23 = v15;
  LODWORD(v22) = v22 | 0x2000000;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v22);
  llvm::MachineInstr::tieOperands((uint64_t)v10, 0, *((_DWORD *)v10 + 10) - 1);
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, (uint64_t)v10);
  v16 = sub_1C477672C(a3, (uint64_t)v7);
  v17 = *(_QWORD *)(a3 + 8);
  if (v17 == *(_QWORD *)a3)
    v18 = (unsigned int *)(a3 + 20);
  else
    v18 = (unsigned int *)(a3 + 16);
  if (v16 != (_QWORD *)(v17 + 8 * *v18))
  {
    *v16 = -2;
    ++*(_DWORD *)(a3 + 24);
  }
  llvm::MachineInstr::eraseFromParent((llvm::MachineInstr *)v7);
  return v10;
}

BOOL sub_1C612D2DC(uint64_t a1)
{
  unsigned __int16 *v1;
  unint64_t v2;
  _BOOL8 result;
  unsigned int v4;

  v1 = *(unsigned __int16 **)(a1 + 16);
  v2 = *((_QWORD *)v1 + 2);
  if ((v2 & 0x20) == 0)
    return (v2 >> 12) & 1;
  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 32 * sub_1C612B500(*v1, 10) + 16);
  result = 1;
  if (v4 > 5 || ((1 << v4) & 0x23) == 0)
    return (v4 & 0xFFFFFFFB) == 2;
  return result;
}

uint64_t sub_1C612D350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 **a7)
{
  llvm::MachineFunction *v8;
  llvm::MachineInstr *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v8 = sub_1C477A100(a2, (unint64_t *)(a2 + 48), a7, *(_QWORD *)(a1 + 8) + 555600);
  v12 = 0;
  v13 = a3;
  v11 = 4;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v11);
  return 1;
}

uint64_t sub_1C612D3B8(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, int *a5)
{
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  int v8;

  result = 0;
  v6 = **(unsigned __int16 **)(a2 + 16);
  if (v6 <= 0xAF4)
  {
    if (v6 != 2770)
    {
      if (v6 != 2797)
        return result;
      v7 = *(_QWORD *)(a2 + 32);
      if (*(_QWORD *)(v7 + 144) == 0x100000000 && !*(_BYTE *)(v7 + 64))
      {
        v8 = 33;
LABEL_13:
        *a3 = *(_DWORD *)(v7 + 68);
        *a4 = *(_DWORD *)(v7 + 4);
        *a5 = v8;
        return 1;
      }
      return 0;
    }
LABEL_9:
    v7 = *(_QWORD *)(a2 + 32);
    if (*(_QWORD *)(v7 + 144) == 0x100000000 && !*(_BYTE *)(v7 + 64))
    {
      v8 = 1;
      goto LABEL_13;
    }
    return 0;
  }
  if (v6 == 2805 || v6 == 2845)
    goto LABEL_9;
  return result;
}

uint64_t sub_1C612D454(uint64_t a1, int *a2, _DWORD *a3, int *a4)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  int v16;

  v4 = 0;
  v5 = **(unsigned __int16 **)(a1 + 16);
  v6 = 2;
  v7 = 2;
  v8 = 1;
  v9 = 1;
  if (v5 <= 0x2E20)
  {
    if (**(unsigned __int16 **)(a1 + 16) <= 0x30Au)
    {
      if (**(unsigned __int16 **)(a1 + 16) <= 0x1BDu)
      {
        switch(**(_WORD **)(a1 + 16))
        {
          case 0x192:
            goto LABEL_30;
          case 0x193:
          case 0x195:
          case 0x197:
          case 0x199:
          case 0x19A:
          case 0x19B:
          case 0x19C:
          case 0x19D:
          case 0x19F:
          case 0x1A1:
          case 0x1A3:
            return v4;
          case 0x194:
            goto LABEL_47;
          case 0x196:
            goto LABEL_37;
          case 0x198:
            goto LABEL_46;
          case 0x19E:
            goto LABEL_66;
          case 0x1A0:
            goto LABEL_84;
          case 0x1A2:
            goto LABEL_70;
          case 0x1A4:
            goto LABEL_83;
          default:
            switch(**(_WORD **)(a1 + 16))
            {
              case 0x1AE:
              case 0x1B2:
                goto LABEL_64;
              case 0x1B0:
              case 0x1B4:
                goto LABEL_21;
              default:
                return v4;
            }
        }
      }
      else
      {
        switch(**(_WORD **)(a1 + 16))
        {
          case 0x1BE:
            goto LABEL_34;
          case 0x1BF:
          case 0x1C1:
          case 0x1C3:
          case 0x1C5:
          case 0x1C6:
          case 0x1C7:
          case 0x1C9:
          case 0x1CB:
          case 0x1CD:
            return v4;
          case 0x1C0:
            goto LABEL_91;
          case 0x1C2:
            goto LABEL_67;
          case 0x1C4:
            goto LABEL_55;
          case 0x1C8:
            goto LABEL_68;
          case 0x1CA:
            goto LABEL_89;
          case 0x1CC:
            goto LABEL_69;
          case 0x1CE:
            goto LABEL_88;
          default:
            switch(**(_WORD **)(a1 + 16))
            {
              case 0x2EF:
                goto LABEL_30;
              case 0x2F1:
                goto LABEL_47;
              case 0x2F3:
                goto LABEL_37;
              case 0x2F5:
                goto LABEL_46;
              case 0x2FB:
                goto LABEL_66;
              case 0x2FD:
                goto LABEL_84;
              case 0x2FF:
                goto LABEL_70;
              case 0x301:
                goto LABEL_83;
              default:
                return v4;
            }
        }
      }
      return v4;
    }
    if (**(unsigned __int16 **)(a1 + 16) <= 0x2D83u)
    {
      if (**(unsigned __int16 **)(a1 + 16) <= 0x2D43u)
      {
        switch(**(_WORD **)(a1 + 16))
        {
          case 0x31B:
            goto LABEL_34;
          case 0x31C:
          case 0x31E:
          case 0x320:
          case 0x322:
          case 0x323:
          case 0x324:
          case 0x326:
          case 0x328:
          case 0x32A:
            return v4;
          case 0x31D:
            goto LABEL_91;
          case 0x31F:
            goto LABEL_67;
          case 0x321:
            goto LABEL_55;
          case 0x325:
            goto LABEL_68;
          case 0x327:
            goto LABEL_89;
          case 0x329:
            goto LABEL_69;
          case 0x32B:
            goto LABEL_88;
          default:
            switch(**(_WORD **)(a1 + 16))
            {
              case 0x30B:
              case 0x30F:
                goto LABEL_64;
              case 0x30D:
              case 0x311:
                goto LABEL_21;
              default:
                return v4;
            }
        }
        return v4;
      }
      if (**(unsigned __int16 **)(a1 + 16) <= 0x2D55u)
      {
        if (v5 != 11588)
        {
          if (v5 != 11590)
            return v4;
          goto LABEL_46;
        }
        goto LABEL_47;
      }
      if (v5 != 11606)
      {
        if (v5 != 11608)
          return v4;
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    if (**(unsigned __int16 **)(a1 + 16) > 0x2DCEu)
    {
      switch(**(_WORD **)(a1 + 16))
      {
        case 0x2E05:
          goto LABEL_30;
        case 0x2E06:
        case 0x2E08:
        case 0x2E0A:
        case 0x2E0C:
        case 0x2E0D:
        case 0x2E0E:
        case 0x2E0F:
        case 0x2E10:
        case 0x2E12:
        case 0x2E14:
        case 0x2E16:
          return v4;
        case 0x2E07:
          goto LABEL_47;
        case 0x2E09:
          goto LABEL_37;
        case 0x2E0B:
          goto LABEL_46;
        case 0x2E11:
          goto LABEL_66;
        case 0x2E13:
          goto LABEL_84;
        case 0x2E15:
          goto LABEL_70;
        case 0x2E17:
          goto LABEL_83;
        default:
          if (v5 == 11727)
            goto LABEL_89;
          v16 = 11729;
          goto LABEL_87;
      }
    }
    if (**(unsigned __int16 **)(a1 + 16) <= 0x2DBAu)
    {
      if (v5 != 11652 && v5 != 11654)
      {
        if (v5 != 11705)
          return v4;
        goto LABEL_91;
      }
LABEL_21:
      v8 = 4;
LABEL_22:
      v9 = v8;
      goto LABEL_57;
    }
    if (v5 != 11707)
    {
      if (v5 == 11716)
        goto LABEL_57;
      if (v5 != 11718)
        return v4;
      goto LABEL_54;
    }
LABEL_55:
    v9 = 8;
    goto LABEL_56;
  }
  if (**(unsigned __int16 **)(a1 + 16) <= 0x2E81u)
  {
    switch(**(_WORD **)(a1 + 16))
    {
      case 0x2E31:
LABEL_34:
        v6 = 8;
        goto LABEL_35;
      case 0x2E32:
      case 0x2E34:
      case 0x2E36:
      case 0x2E38:
      case 0x2E3A:
      case 0x2E3C:
      case 0x2E3E:
      case 0x2E40:
      case 0x2E41:
      case 0x2E42:
      case 0x2E44:
      case 0x2E46:
      case 0x2E48:
        return v4;
      case 0x2E33:
        goto LABEL_91;
      case 0x2E35:
LABEL_67:
        v7 = 8;
        goto LABEL_65;
      case 0x2E37:
        goto LABEL_55;
      case 0x2E39:
LABEL_32:
        v6 = 1;
LABEL_35:
        v7 = v6;
        goto LABEL_66;
      case 0x2E3B:
        goto LABEL_57;
      case 0x2E3D:
LABEL_80:
        v7 = 1;
        goto LABEL_65;
      case 0x2E3F:
        goto LABEL_54;
      case 0x2E43:
LABEL_68:
        v7 = 12;
        v6 = 16;
        goto LABEL_66;
      case 0x2E45:
        goto LABEL_89;
      case 0x2E47:
LABEL_69:
        v7 = 12;
LABEL_65:
        v6 = 4;
LABEL_66:
        *a4 = v7;
        *a2 = 0;
        v13 = (_DWORD *)(*(_QWORD *)(a1 + 32) + 48);
        goto LABEL_61;
      case 0x2E49:
        goto LABEL_88;
      default:
        switch(**(_WORD **)(a1 + 16))
        {
          case 0x2E66:
LABEL_30:
            v6 = 16;
            goto LABEL_35;
          case 0x2E67:
          case 0x2E69:
          case 0x2E6B:
          case 0x2E6D:
          case 0x2E6E:
          case 0x2E6F:
          case 0x2E70:
          case 0x2E71:
          case 0x2E73:
          case 0x2E75:
          case 0x2E77:
            return v4;
          case 0x2E68:
            goto LABEL_47;
          case 0x2E6A:
LABEL_37:
            v7 = 16;
            goto LABEL_65;
          case 0x2E6C:
            goto LABEL_46;
          case 0x2E72:
            goto LABEL_66;
          case 0x2E74:
            goto LABEL_84;
          case 0x2E76:
LABEL_70:
            v7 = 2;
            goto LABEL_65;
          case 0x2E78:
            goto LABEL_83;
          default:
            switch(**(_WORD **)(a1 + 16))
            {
              case 0x2E21:
              case 0x2E25:
LABEL_64:
                v7 = 4;
                goto LABEL_65;
              case 0x2E23:
              case 0x2E27:
                goto LABEL_21;
              default:
                return v4;
            }
        }
        return v4;
    }
  }
  if (**(unsigned __int16 **)(a1 + 16) <= 0x339Cu)
  {
    switch(**(_WORD **)(a1 + 16))
    {
      case 0x2E92:
        goto LABEL_34;
      case 0x2E93:
      case 0x2E95:
      case 0x2E97:
      case 0x2E99:
      case 0x2E9B:
      case 0x2E9D:
      case 0x2E9F:
      case 0x2EA1:
      case 0x2EA2:
      case 0x2EA3:
      case 0x2EA5:
      case 0x2EA7:
      case 0x2EA9:
        return v4;
      case 0x2E94:
        goto LABEL_91;
      case 0x2E96:
        goto LABEL_67;
      case 0x2E98:
        goto LABEL_55;
      case 0x2E9A:
        goto LABEL_32;
      case 0x2E9C:
        goto LABEL_57;
      case 0x2E9E:
        goto LABEL_80;
      case 0x2EA0:
        goto LABEL_54;
      case 0x2EA4:
        goto LABEL_68;
      case 0x2EA6:
        goto LABEL_89;
      case 0x2EA8:
        goto LABEL_69;
      case 0x2EAA:
        goto LABEL_88;
      default:
        switch(**(_WORD **)(a1 + 16))
        {
          case 0x2E82:
          case 0x2E86:
            goto LABEL_64;
          case 0x2E84:
          case 0x2E88:
            goto LABEL_21;
          default:
            return v4;
        }
    }
    return v4;
  }
  if (**(unsigned __int16 **)(a1 + 16) <= 0x3411u)
  {
    if (**(unsigned __int16 **)(a1 + 16) <= 0x33B0u)
    {
      if (v5 == 13213)
      {
LABEL_47:
        v8 = 16;
        goto LABEL_22;
      }
      if (v5 == 13215)
      {
LABEL_46:
        v9 = 16;
LABEL_56:
        v8 = 4;
        goto LABEL_57;
      }
      if (v5 != 13231)
        return v4;
LABEL_84:
      v9 = 2;
      v8 = 2;
      goto LABEL_57;
    }
    if (v5 == 13233)
    {
LABEL_83:
      v9 = 2;
      goto LABEL_56;
    }
    if (v5 != 13277 && v5 != 13279)
      return v4;
    goto LABEL_21;
  }
  if (**(unsigned __int16 **)(a1 + 16) <= 0x341Eu)
  {
    if (v5 == 13330)
    {
LABEL_91:
      v8 = 8;
      goto LABEL_22;
    }
    if (v5 != 13332)
    {
      if (v5 != 13341)
        return v4;
      goto LABEL_57;
    }
    goto LABEL_55;
  }
  if (v5 == 13343)
  {
LABEL_54:
    v9 = 1;
    goto LABEL_56;
  }
  if (v5 != 13352)
  {
    v16 = 13354;
LABEL_87:
    if (v5 != v16)
      return v4;
LABEL_88:
    v9 = 12;
    goto LABEL_56;
  }
LABEL_89:
  v9 = 12;
  v8 = 16;
LABEL_57:
  *a4 = v9;
  v11 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v11 + 32))
    v12 = *(_DWORD *)(v11 + 36) | 0x40000000;
  else
    v12 = *(_DWORD *)(v11 + 36);
  *a2 = v12;
  v13 = (_DWORD *)(v11 + 80);
  v6 = v8;
LABEL_61:
  *a3 = *v13 * v6;
  return 1;
}

uint64_t sub_1C612D8F4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 16) >> 5) & 1;
}

void sub_1C612D908(_QWORD *a1)
{
  sub_1C612DD38(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C612D92C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
}

uint64_t sub_1C612D93C(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  *a4 = 0;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
}

uint64_t sub_1C612D94C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1C612D954()
{
  return 1;
}

uint64_t sub_1C612D95C()
{
  return 1;
}

uint64_t sub_1C612D964()
{
  return 0;
}

uint64_t sub_1C612D96C()
{
  return 0;
}

uint64_t sub_1C612D980()
{
  return 1;
}

uint64_t sub_1C612D988()
{
  return 1;
}

void sub_1C612D990(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1C612D998()
{
  return 1;
}

uint64_t sub_1C612D9A4()
{
  return 1;
}

uint64_t sub_1C612D9AC()
{
  return 0;
}

uint64_t sub_1C612D9B4()
{
  return 0;
}

uint64_t sub_1C612D9BC()
{
  return 0;
}

uint64_t sub_1C612D9C4()
{
  return 0;
}

uint64_t sub_1C612D9CC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 144))(a1);
}

uint64_t sub_1C612D9D8()
{
  return 0;
}

uint64_t sub_1C612D9E0()
{
  return 0;
}

uint64_t sub_1C612D9EC()
{
  return 0;
}

void sub_1C612D9F4(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[16] = 0;
}

uint64_t sub_1C612DA00()
{
  return 0;
}

uint64_t sub_1C612DA08()
{
  return 0;
}

uint64_t sub_1C612DA14()
{
  return 0;
}

uint64_t sub_1C612DA1C()
{
  return 0;
}

uint64_t sub_1C612DA28()
{
  return 0;
}

uint64_t sub_1C612DA30()
{
  return 0;
}

uint64_t sub_1C612DA38()
{
  return 0;
}

uint64_t sub_1C612DA40()
{
  return 0;
}

uint64_t sub_1C612DA48()
{
  return 0;
}

uint64_t sub_1C612DA50()
{
  return 0;
}

uint64_t sub_1C612DA58()
{
  return 0;
}

uint64_t sub_1C612DA60()
{
  return 0;
}

uint64_t sub_1C612DA68()
{
  return 0;
}

uint64_t sub_1C612DA70()
{
  return 0;
}

uint64_t sub_1C612DA78()
{
  return 0;
}

uint64_t sub_1C612DA80()
{
  return 0;
}

uint64_t sub_1C612DA88()
{
  return 0;
}

void sub_1C612DA90(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_1C612DA9C()
{
  return 0;
}

uint64_t sub_1C612DAA4()
{
  return 0;
}

uint64_t sub_1C612DAB0()
{
  return 1;
}

uint64_t sub_1C612DAB8()
{
  return 0;
}

BOOL sub_1C612DAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 16);
  return (*(_BYTE *)(v2 + 10) & 0x40) != 0
      && (*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32 * (*(unsigned __int16 *)(v2 + 2) - 2) + 16) & 0xFFFFFFFDLL) == 1;
}

uint64_t sub_1C612DAFC()
{
  return 0;
}

uint64_t sub_1C612DB04()
{
  return 0;
}

uint64_t sub_1C612DB10()
{
  return 0;
}

uint64_t sub_1C612DB18()
{
  return 0;
}

uint64_t sub_1C612DB20(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(*(_QWORD *)(a2 + 16) + 10) >> 6) & 1;
}

uint64_t sub_1C612DB30()
{
  return 0;
}

uint64_t sub_1C612DB38()
{
  return 0;
}

uint64_t sub_1C612DB40()
{
  return 0;
}

uint64_t sub_1C612DB48()
{
  return 0;
}

uint64_t sub_1C612DB50()
{
  return 0;
}

uint64_t sub_1C612DB58()
{
  return 1;
}

uint64_t sub_1C612DB60()
{
  return 0;
}

uint64_t sub_1C612DB6C()
{
  return 0;
}

uint64_t sub_1C612DB74()
{
  return 0;
}

uint64_t sub_1C612DB80()
{
  return 0;
}

uint64_t sub_1C612DB88()
{
  return 0;
}

uint64_t sub_1C612DB94()
{
  return 0;
}

double sub_1C612DBA8@<D0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  double result;

  a2[2] = *(_QWORD *)(a1 + 56);
  *a2 = a2 + 2;
  a2[3] = a1 + 48;
  *(_QWORD *)&result = 0x300000001;
  a2[1] = 0x300000001;
  return result;
}

uint64_t sub_1C612DBDC()
{
  return 0;
}

uint64_t sub_1C612DBE4()
{
  return 0;
}

_QWORD *sub_1C612DBEC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = *(_QWORD **)(a1 + 56);
  if (!result)
  {
    result = (_QWORD *)operator new();
    *result = &off_1E7F95930;
    v3 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = result;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      return *(_QWORD **)(a1 + 56);
    }
  }
  return result;
}

uint64_t sub_1C612DC5C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 440);
}

uint64_t sub_1C612DC64(uint64_t a1, int a2)
{
  if (a2 <= 2)
    return 2;
  else
    return 4;
}

uint64_t sub_1C612DC78(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

uint64_t sub_1C612DC80(uint64_t a1)
{
  return a1 + 80;
}

void sub_1C612DC8C(llvm::GPUTargetInstrInfo *a1)
{
  llvm::GPUTargetInstrInfo::~GPUTargetInstrInfo(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C612DCB0()
{
  return 0;
}

uint64_t sub_1C612DCB8()
{
  return 0;
}

uint64_t sub_1C612DCC0()
{
  return 0;
}

uint64_t sub_1C612DCC8()
{
  return 1;
}

uint64_t sub_1C612DCD8()
{
  return 1;
}

uint64_t sub_1C612DCF0()
{
  return 0;
}

uint64_t sub_1C612DCF8()
{
  return 0;
}

uint64_t sub_1C612DD00()
{
  return 0;
}

uint64_t sub_1C612DD08()
{
  return 0;
}

uint64_t sub_1C612DD10()
{
  return 0;
}

uint64_t sub_1C612DD1C()
{
  return 0;
}

uint64_t sub_1C612DD24()
{
  return 0;
}

uint64_t sub_1C612DD30()
{
  return 0;
}

void sub_1C612DD38(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  *a1 = &off_1E7F95970;
  v2 = a1[55];
  a1[55] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[54];
  a1[54] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  a1[10] = &off_1E7F9D920;
  v4 = (_QWORD *)a1[45];
  if (v4 != a1 + 47)
    free(v4);
  llvm::TargetRegisterInfo::~TargetRegisterInfo((llvm::TargetRegisterInfo *)(a1 + 10));
  llvm::TargetInstrInfo::~TargetInstrInfo((llvm::TargetInstrInfo *)a1);
}

void sub_1C612DDC8()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C612DDDC(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return llvm::raw_ostream::operator<<(a2, a5);
}

uint64_t sub_1C612DDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (***a4)(_QWORD))
{
  return (**a4)(a4);
}

uint64_t sub_1C612DE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  int v6;
  uint64_t *v7;
  unsigned int v8;

  v6 = *(unsigned __int16 *)(a2 + 24);
  if ((v6 - 198) > 2)
    return sub_1C47C16B8(a1, a2, a3, a4, a5, 16, 0);
  v7 = *(uint64_t **)(a2 + 32);
  if (*(_BYTE *)(*(_QWORD *)(*v7 + 40) + 16 * *((unsigned int *)v7 + 2)) != 4)
    return sub_1C47C16B8(a1, a2, a3, a4, a5, 16, 0);
  if (v6 == 198)
    v8 = a6 | 8;
  else
    v8 = a6;
  return sub_1C47C1164(a1, *v7, v7[1], a4, a5, 0, 0, 0, 0, 0, v8);
}

uint64_t sub_1C612DE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = a3;
  result = sub_1C47C1B70(&v9);
  if ((_DWORD)result)
    return sub_1C47C1164(a1, v9, v10, a4, a5, 0, 1, 0, 0, 0, result);
  return result;
}

uint64_t sub_1C612DEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = a3;
  result = sub_1C47C1B70(&v9);
  if ((_DWORD)result)
    return sub_1C47C0FD4(a1, v9, v10, a4, a5, result);
  return result;
}

uint64_t sub_1C612DF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = a3;
  result = sub_1C47C1B70(&v9);
  if ((_DWORD)result)
    return sub_1C612DE00(a1, v9, v10, a4, a5, result);
  return result;
}

uint64_t sub_1C612DFB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  int v6;
  uint64_t *v7;
  unsigned int v8;

  v6 = *(unsigned __int16 *)(a2 + 24);
  if ((v6 - 198) > 2)
    return sub_1C47C16B8(a1, a2, a3, a4, a5, 32, 0);
  v7 = *(uint64_t **)(a2 + 32);
  if (*(_BYTE *)(*(_QWORD *)(*v7 + 40) + 16 * *((unsigned int *)v7 + 2)) != 5)
    return sub_1C47C16B8(a1, a2, a3, a4, a5, 32, 0);
  if (v6 == 198)
    v8 = a6 | 8;
  else
    v8 = a6;
  return sub_1C47C1164(a1, *v7, v7[1], a4, a5, 0, 0, 0, 0, 0, v8);
}

uint64_t sub_1C612E038(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = a3;
  result = sub_1C47C1B70(&v9);
  if ((_DWORD)result)
    return sub_1C47C1164(a1, v9, v10, a4, a5, 0, 0, 0, 0, 0, result);
  return result;
}

uint64_t sub_1C612E0A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  v9 = a2;
  v10 = a3;
  result = sub_1C47C1B70(&v9);
  if ((_DWORD)result)
    return sub_1C612DFB0(a1, v9, v10, a4, a5, result);
  return result;
}

_QWORD *sub_1C612E104(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = operator new();
  result = (_QWORD *)sub_1C6372000(v4, a1, a2);
  result[59] = a1;
  result[60] = a1 + 1328;
  *result = &off_1E7F95E90;
  return result;
}

const char *sub_1C612E15C()
{
  return "AGX1 Instruction Selection";
}

uint64_t sub_1C612E174()
{
  return 1;
}

uint64_t sub_1C612E188()
{
  return 0;
}

uint64_t sub_1C612E190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  if (*(_DWORD *)(a4 + 28) == -1 || (v6 = sub_1C63726F0(a4), result = sub_1C63726F0(a2), v6 > (int)result))
  {
    v8 = a4 + 8;
    if (!a4)
      v8 = 0;
    v9 = v8 - 8;
    if (!a4)
      v9 = 0;
    v11 = *(_QWORD *)(v9 + 8);
    v12 = *(_QWORD **)(v9 + 16);
    v10 = (_QWORD *)(v9 + 8);
    *v12 = v11;
    *(_QWORD *)(v11 + 8) = v12;
    *v10 = 0;
    v10[1] = 0;
    v14 = *(_QWORD *)(a2 + 8);
    v13 = a2 + 8;
    *v10 = v14;
    v10[1] = v13;
    *(_QWORD *)(v14 + 8) = v10;
    *(_QWORD *)v13 = v10;
    *(_DWORD *)(a4 + 28) = *(_DWORD *)(v13 + 20);
    return sub_1C63726E0(a4);
  }
  return result;
}

unsigned int *sub_1C612E234(unsigned int *result, _BYTE *__src, _BYTE *a3)
{
  _DWORD *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = result[2];
  v8 = v7 + ((a3 - __src) >> 4);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 16);
    LODWORD(v7) = v5[2];
  }
  if (__src != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v5 + 16 * v7), __src, v6);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 4);
  return result;
}

_QWORD *sub_1C612E2B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, __int128 *a6, __int128 *a7, __int128 *a8)
{
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x400000000;
  sub_1C47EC1C0(a1, (uint64_t)&v14, a5, a6, a7, a8);
  v12 = sub_1C5D61678(a1, 11085, a2, a3, a4, (uint64_t *)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

_QWORD *sub_1C612E388(uint64_t a1, int a2, uint64_t a3, unsigned int a4, __int128 *a5, __int128 *a6, __int128 *a7, __int128 *a8)
{
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x400000000;
  sub_1C612E7D0(a1, (uint64_t)&v14, a5, a6, a7, a8);
  v12 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

uint64_t sub_1C612E45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1C612E190(a1, a2, a3, a4);
  if (*(_WORD *)(a4 + 56))
  {
    v9 = 40 * *(unsigned __int16 *)(a4 + 56);
    v10 = *(_QWORD *)(a4 + 32) + 8;
    do
    {
      v11 = *(_QWORD *)(v10 - 8);
      if (*(_DWORD *)(v11 + 28) == -1)
        result = sub_1C612E190(a1, a4, a5, v11);
      v10 += 40;
      v9 -= 40;
    }
    while (v9);
  }
  return result;
}

uint64_t *sub_1C612E4E4(uint64_t a1, uint64_t a2, int a3, const llvm::APInt *a4, int a5, llvm *a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v14 = sub_1C636A8B4(a1, (uint64_t)a6, a7, 1, 0);
  v16 = v15;
  v19 = a2;
  v20 = a3;
  v21 = sub_1C5D428B0(a1, a5, a6, a7);
  v22 = v17;
  return sub_1C636AB08(a1, (const char *)0x32, a4, v14, v16, &v19, 2);
}

_QWORD *sub_1C612E5C8(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v4;
  _QWORD *v6;
  uint64_t v11;
  unsigned __int8 **v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned int v19;

  v4 = *(unsigned __int16 *)(a2 + 24);
  if (v4 != 36 && v4 != 12)
    return 0;
  v11 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 16 * a3);
  sub_1C47E2804(*(_QWORD *)(a2 + 80) + 24, (unsigned int *)&v18);
  if (v19 >= 0x41)
    v12 = (unsigned __int8 **)v18;
  else
    v12 = &v18;
  v13 = (unint64_t)*v12 | ((unint64_t)(v11 == 9) << 32);
  if (v19 >= 0x41 && v18 != 0)
    MEMORY[0x1CAA32F9C]();
  v15 = 0x80000000;
  if (v11 == 9)
    v15 = 0x8000;
  if (!a4)
    v15 = 0;
  v16 = v13 ^ v15;
  v17 = *(unsigned __int8 **)(a2 + 64);
  v18 = v17;
  if (v17)
    llvm::MetadataTracking::track((uint64_t)&v18, v17, 2);
  v19 = *(_DWORD *)(a2 + 60);
  v6 = sub_1C6366AB4(a1, v16, (const llvm::APInt *)&v18, (llvm *)6, 0, 1, 0);
  if (v18)
    llvm::MetadataTracking::untrack((uint64_t)&v18, v18);
  return v6;
}

uint64_t sub_1C612E700(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 2176) + 480) + 281);
}

void sub_1C612E710(_QWORD *a1)
{
  sub_1C612E734(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C612E734(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *a1 = off_1E7F95FF8;
  v2 = (_QWORD *)a1[205];
  if (v2 != a1 + 207)
    free(v2);
  MEMORY[0x1CAA32FB4](a1[202], 8);
  v3 = (_QWORD *)a1[136];
  if (v3 != a1 + 138)
    free(v3);
  v4 = (_QWORD *)a1[118];
  if (v4 != a1 + 120)
    free(v4);
  v5 = (_QWORD *)a1[100];
  if (v5 != a1 + 102)
    free(v5);
  v6 = (_QWORD *)a1[1];
  if (v6 != a1 + 3)
    free(v6);
  return a1;
}

void *sub_1C612E7D0(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5, __int128 *a6)
{
  sub_1C47E28C4(a1, a2, a3);
  sub_1C47E28C4(a1, a2, a4);
  sub_1C47E28C4(a1, a2, a5);
  return sub_1C47E28C4(a1, a2, a6);
}

void sub_1C612E83C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2, 24);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
        bzero((void *)(*(_QWORD *)a1 + 24 * v2), 24 * ((-24 * v2 + 24 * a2 - 24) / 0x18) + 24);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

_QWORD *sub_1C612E8D8(uint64_t *a1, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  unsigned __int8 *v8;
  __int16 v9;
  int v10;
  _QWORD *v11;
  int v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  unsigned __int8 *v34;
  int v35;
  unsigned __int8 *v36;
  int v37;
  unsigned __int8 *v38;
  int v39;
  __int16 v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[2];

  v4 = *(__int128 **)(a2 + 32);
  v5 = *v4;
  v46 = *(__int128 *)((char *)v4 + 40);
  v47[0] = v5;
  v6 = v4[5];
  v44 = *(__int128 *)((char *)v4 + 120);
  v45 = v6;
  v7 = *(unsigned int *)(*((_QWORD *)v4 + 20) + 76);
  v8 = *(unsigned __int8 **)(a2 + 64);
  v41 = v8;
  if (v8)
    llvm::MetadataTracking::track((uint64_t)&v41, v8, 2);
  v42 = *(_DWORD *)(a2 + 60);
  v40 = 0;
  v9 = *(_WORD *)(*(_QWORD *)a1[1] + 1020);
  if ((v7 - 7) > 1)
  {
    v12 = v9 & 1;
    v43 = sub_1C47EFC5C((_QWORD **)a1, v7, (unsigned int *)v47, (uint64_t)&v46, &v45, (uint64_t)&v44, (_BYTE *)&v40 + 1, &v40, 1);
    sub_1C47F0474((uint64_t)a1, (unsigned int *)&v43, (unsigned int *)v47, (unsigned int *)&v46, (uint64_t *)&v45, (uint64_t *)&v44, v12);
    v13 = v43;
    v14 = v47[0];
    v15 = v46;
    v16 = v45;
    v17 = v44;
    v38 = v41;
    if (v41)
      llvm::MetadataTracking::track((uint64_t)&v38, v41, 2);
    v39 = v42;
    v11 = sub_1C47F238C(a1, v13, v14, *((uint64_t *)&v14 + 1), 0, v15, *((uint64_t *)&v15 + 1), 1, v16, v17, (const llvm::APInt *)&v38);
    if (v38)
      llvm::MetadataTracking::untrack((uint64_t)&v38, v38);
    v10 = HIBYTE(v40);
  }
  else
  {
    v10 = (v9 & 1) == 0;
    if ((_DWORD)v7 == 7)
    {
      v11 = (_QWORD *)v45;
    }
    else
    {
      v11 = (_QWORD *)v44;
      LOBYTE(v40) = 1;
    }
  }
  if (v10)
  {
    v18 = &v45;
    if (!(_BYTE)v40)
      v18 = &v44;
    v19 = *(_QWORD **)v18;
    v20 = *((_QWORD *)v18 + 1);
    v21 = *(_QWORD *)&v47[0];
    v22 = *(unsigned __int16 *)(*(_QWORD *)&v47[0] + 24);
    if (v22 == 36 || v22 == 12)
    {
      v23 = *(_QWORD *)(*(_QWORD *)&v47[0] + 80);
      if (*(_UNKNOWN **)(v23 + 32) == &unk_1C866F1C0)
        v24 = *(_QWORD *)(v23 + 40);
      else
        v24 = v23 + 24;
      if ((*(_BYTE *)(v24 + 28) & 7) == 1)
      {
        v11 = v19;
        goto LABEL_31;
      }
    }
    else
    {
      v25 = *((_QWORD *)&v47[0] + 1);
      v36 = v41;
      if (v41)
        llvm::MetadataTracking::track((uint64_t)&v36, v41, 2);
      v37 = v42;
      *((_QWORD *)&v32 + 1) = v20;
      *(_QWORD *)&v32 = v19;
      v11 = sub_1C47F238C(a1, 1, v21, v25, 0, v21, v25, 1, (unint64_t)v11, v32, (const llvm::APInt *)&v36);
      if (v36)
        llvm::MetadataTracking::untrack((uint64_t)&v36, v36);
    }
    v26 = v46;
    v27 = *(unsigned __int16 *)(v46 + 24);
    if (v27 == 36 || v27 == 12)
    {
      v28 = *(_QWORD *)(v46 + 80);
      if (*(_UNKNOWN **)(v28 + 32) == &unk_1C866F1C0)
        v29 = *(_QWORD *)(v28 + 40);
      else
        v29 = v28 + 24;
      if ((*(_BYTE *)(v29 + 28) & 7) == 1)
        v11 = v19;
    }
    else
    {
      v31 = *((_QWORD *)&v46 + 1);
      v34 = v41;
      if (v41)
        llvm::MetadataTracking::track((uint64_t)&v34, v41, 2);
      v35 = v42;
      *((_QWORD *)&v33 + 1) = v20;
      *(_QWORD *)&v33 = v19;
      v11 = sub_1C47F238C(a1, 1, v26, v31, 0, v26, v31, 1, (unint64_t)v11, v33, (const llvm::APInt *)&v34);
      if (v34)
        llvm::MetadataTracking::untrack((uint64_t)&v34, v34);
    }
  }
LABEL_31:
  if (v41)
    llvm::MetadataTracking::untrack((uint64_t)&v41, v41);
  return v11;
}

uint64_t sub_1C612EC20(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8, unsigned __int8 a9)
{
  int v17;
  uint64_t v18;
  int v20;
  uint64_t result;
  unint64_t v26;
  int v27;

  if (!sub_1C47EFE94(*(_QWORD *)a3) && !sub_1C47EFE94(*(_QWORD *)a4))
    goto LABEL_18;
  v17 = *(_DWORD *)(a3 + 8);
  v18 = *(_QWORD *)a4;
  if (*(_QWORD *)a3 == a5 && v17 == a6)
  {
    v20 = *(_DWORD *)(a4 + 8);
    if (v18 == a7 && v20 == a8)
      goto LABEL_25;
  }
  else
  {
    v20 = *(_DWORD *)(a4 + 8);
  }
  if (v18 == a5 && v20 == a6 && *(_QWORD *)a3 == a7 && v17 == a8)
  {
LABEL_25:
    result = 0;
    HIDWORD(v26) = *a2 - 3;
    LODWORD(v26) = HIDWORD(v26);
    switch((v26 >> 1))
    {
      case 0u:
        v27 = 2;
        goto LABEL_33;
      case 1u:
        v27 = 4;
        goto LABEL_33;
      case 4u:
        v27 = 10;
        goto LABEL_33;
      case 5u:
        v27 = 12;
        goto LABEL_33;
      case 8u:
        v27 = 18;
        goto LABEL_33;
      case 9u:
        v27 = 20;
LABEL_33:
        *a2 = v27;
        return 1;
      default:
        return result;
    }
  }
LABEL_18:
  if ((sub_1C47EF694(a1, a2, (unsigned int *)a4, a9 ^ 1u) & 1) != 0)
    return 1;
  else
    return sub_1C47EF694(a1, a2, (unsigned int *)a3, a9);
}

unint64_t sub_1C612ED80(llvm::EVT *this, uint64_t a2, BOOL a3)
{
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 v7;

  if (*(_BYTE *)this)
  {
    if (*(unsigned __int8 *)this - 15 >= 0x9C)
    {
      v7 = *(_BYTE *)this;
      LOBYTE(v4) = sub_1C612EEC0(&v7);
      v5 = 0;
      return v5 | v4;
    }
    goto LABEL_6;
  }
  if (llvm::EVT::isExtendedVector(this))
  {
LABEL_6:
    v4 = sub_1C612EE78(this, a2, a3);
    v5 = v4 & 0xFFFFFFFFFFFFFF00;
    return v5 | v4;
  }
  v4 = llvm::EVT::changeExtendedTypeToInteger(this);
  v5 = v4 & 0xFFFFFFFFFFFFFF00;
  return v5 | v4;
}

uint64_t sub_1C612EE00(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  unsigned int v8;
  unsigned int v11;

  v8 = a1 && (a1 != a3 || a2 != a4) && (a1 != a5 || a2 != a6) && (a1 != a7 || a2 != a8);
  if (a3 && (a3 != a5 || a4 != a6) && (a3 != a7 || a4 != a8))
    ++v8;
  if (a5 == a7 && a6 == a8)
    v11 = v8;
  else
    v11 = v8 + 1;
  if (a5)
    v8 = v11;
  if (a7)
    return v8 + 1;
  else
    return v8;
}

unint64_t sub_1C612EE78(llvm::EVT *a1, uint64_t a2, BOOL a3)
{
  unint64_t v3;
  unint64_t v4;
  unsigned __int8 v6;

  if (*(_BYTE *)a1)
  {
    v6 = *(_BYTE *)a1;
    LOBYTE(v3) = sub_1C612EF6C(&v6);
    v4 = 0;
  }
  else
  {
    v3 = llvm::EVT::changeExtendedVectorElementTypeToInteger(a1, a2, a3);
    v4 = v3 & 0xFFFFFFFFFFFFFF00;
  }
  return v4 | v3;
}

unint64_t sub_1C612EEC0(unsigned __int8 *a1)
{
  int v1;
  const char *v2;
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  int v7;
  unsigned int v8;
  int v10;

  if (*a1 - 15 <= 0x9B)
    return sub_1C612EF6C(a1);
  v1 = sub_1C47A8C74(a1);
  if ((_DWORD)v2 == 1)
  {
    v10 = v1;
    v1 = v10;
  }
  if (v1 == 128)
    v3 = 7;
  else
    v3 = 0;
  if (v1 == 64)
    v4 = 6;
  else
    v4 = v3;
  if (v1 == 32)
    v5 = 5;
  else
    v5 = v4;
  if (v1 == 16)
    v6 = 4;
  else
    v6 = 0;
  if (v1 == 8)
    v7 = 3;
  else
    v7 = v6;
  if (v1 == 1)
    v8 = 2;
  else
    v8 = v7;
  if (v1 <= 31)
    return v8;
  else
    return v5;
}

unint64_t sub_1C612EF6C(unsigned __int8 *a1)
{
  int v2;
  const char *v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  int v11;
  int v13;
  unsigned __int8 v14;

  v14 = sub_1C47F37A0(a1);
  v2 = sub_1C47A8C74(&v14);
  if ((_DWORD)v3 == 1)
  {
    v13 = v2;
    v2 = v13;
  }
  v4 = 5;
  v5 = 6;
  v6 = 7;
  if (v2 != 128)
    v6 = 0;
  if (v2 != 64)
    v5 = v6;
  if (v2 != 32)
    v4 = v5;
  v7 = 2;
  v8 = 3;
  v9 = 4;
  if (v2 != 16)
    v9 = 0;
  if (v2 != 8)
    v8 = v9;
  if (v2 != 1)
    v7 = v8;
  if (v2 <= 31)
    v10 = v7;
  else
    v10 = v4;
  v11 = sub_1C47F381C(a1);
  if (*a1 - 120 > 0x32)
    return sub_1C47AC934(v10, v11);
  else
    return sub_1C47AC5FC(v10, v11);
}

uint64_t sub_1C612F040(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  _OWORD *v24;
  const llvm::TargetRegisterInfo *v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  int8x8_t v38;
  char v39;
  char v40;

  v4 = a1 + 184288;
  v5 = a1 + 173976;
  v6 = (_BYTE *)(a1 + 40959);
  v7 = a1 + 33514;
  v8 = a1 + 23028;
  v9 = a1 + 18738;
  v10 = a1 + 14448;
  v11 = a1 + 4509;
  *(_QWORD *)sub_1C6374BF4((llvm::TargetLoweringBase *)a1, (const llvm::TargetMachine *)a2) = &off_1E7F96418;
  *(_QWORD *)(v4 + 8) = a2 + 1328;
  v12 = a2[1608];
  if (!a2[1608])
  {
    *(_QWORD *)(a1 + 144) = &off_1E7F98AB8;
    *(_QWORD *)(a1 + 488) = &off_1E7F98AB8;
  }
  *(_QWORD *)(a1 + 704) = &off_1E7F98468;
  *(_QWORD *)(a1 + 400) = &off_1E7F98468;
  *(_QWORD *)(a1 + 128) = &off_1E7F982A8;
  *(_QWORD *)(a1 + 136) = &off_1E7F98468;
  *(_QWORD *)(a1 + 312) = &off_1E7F982A8;
  *(_QWORD *)(a1 + 320) = &off_1E7F98468;
  *(_QWORD *)(a1 + 168) = &off_1E7F982A8;
  *(_QWORD *)(a1 + 176) = &off_1E7F98468;
  *(_BYTE *)v4 = 0;
  *(_DWORD *)(v5 + 10284) = 4096;
  *(_DWORD *)(v5 + 10304) = 4096;
  *(_DWORD *)(v5 + 10276) = 4096;
  *(_DWORD *)(a1 + 60) = 1;
  v13 = 178;
  v14 = 4402;
  *(_QWORD *)(a1 + 52) = 0x100000001;
  do
  {
    *(_BYTE *)(a1 + v14) = 2;
    v14 += 390;
    --v13;
  }
  while (v13);
  *(_BYTE *)(v11 + 1875) = 2;
  *(_BYTE *)(v11 + 1485) = 0;
  *(_BYTE *)(v11 + 1095) = 2;
  *(_BYTE *)(v8 + 126) = 2;
  *(_BYTE *)(v9 + 906) = 2;
  *(_BYTE *)(v9 + 126) = 2;
  *(_BYTE *)(v7 + 129) = 2;
  *(_BYTE *)(v11 + 2960) = 2;
  *(_BYTE *)(v11 + 3350) = 2;
  *(_BYTE *)(v11 + 3104) = 0;
  *(_BYTE *)(v11 + 3494) = 0;
  *(_BYTE *)(v7 + 229) = 2;
  *(_BYTE *)(v11 + 2962) = 4;
  *(_BYTE *)(v11 + 3352) = 4;
  *(_DWORD *)(v7 + 84) = 33686018;
  *(_BYTE *)(v11 + 3092) = 4;
  *(_BYTE *)(v11 + 3482) = 4;
  *(_BYTE *)(v11 + 3115) = 2;
  *(_BYTE *)(v11 + 3505) = 2;
  *(_BYTE *)(v11 + 2875) = 0;
  *(_BYTE *)(v11 + 3265) = 0;
  *(_BYTE *)v7 = 0;
  *(_WORD *)(v11 + 731) = 1028;
  *(_WORD *)(v9 + 152) = 514;
  *(_WORD *)(v8 + 152) = 514;
  *(_WORD *)(v10 + 146) = 514;
  *(_WORD *)(v9 + 146) = 514;
  *(_WORD *)(v8 + 146) = 514;
  *(_WORD *)(v11 + 1895) = 1028;
  *(_WORD *)(v11 + 1498) = 1028;
  *(_BYTE *)(v11 + 1500) = 4;
  *(_BYTE *)(v10 + 97) = 4;
  *(_BYTE *)(v10 + 487) = 4;
  *(_BYTE *)(v9 + 97) = 4;
  *(_BYTE *)(v7 + 141) = 4;
  *(_BYTE *)(v8 + 97) = 4;
  if (v12)
  {
    v15 = 0;
    v16 = 4;
  }
  else
  {
    *(_BYTE *)(v11 + 1885) = 4;
    *(_BYTE *)(v8 + 136) = 4;
    *(_BYTE *)(v11 + 1495) = 4;
    *(_BYTE *)(v11 + 3445) = 4;
    *(_BYTE *)(v11 + 1105) = 4;
    *(_BYTE *)(v10 + 136) = 4;
    v16 = 2;
    v15 = 4;
    *(_BYTE *)(v11 + 3055) = 4;
  }
  *(_BYTE *)(v7 + 180) = 4;
  *(_BYTE *)(v9 + 136) = v15;
  *(_BYTE *)(v11 + 3053) = 2;
  *(_BYTE *)(v11 + 1103) = 2;
  *(_BYTE *)(v10 + 134) = 2;
  *(_BYTE *)(v7 + 178) = 2;
  *(_BYTE *)(v9 + 134) = 2;
  *(_BYTE *)(v11 + 1493) = 2;
  *(_BYTE *)(v11 + 3443) = 2;
  *(_BYTE *)(v11 + 1882) = 4;
  *(_BYTE *)(v11 + 1877) = 4;
  *(_WORD *)(v11 + 711) = 514;
  *(_WORD *)(v11 + 1101) = 514;
  *(_WORD *)(v11 + 1491) = 514;
  *(_WORD *)(v11 + 706) = 514;
  *(_WORD *)(v11 + 1096) = 514;
  *(_WORD *)(v11 + 1486) = 514;
  *(_BYTE *)(v11 + 708) = 2;
  *(_BYTE *)(v11 + 1106) = 2;
  *(_BYTE *)(v11 + 3056) = 2;
  *(_BYTE *)(v10 + 137) = 2;
  *(_BYTE *)(v11 + 1496) = 2;
  *(_BYTE *)(v11 + 3446) = 2;
  *(_BYTE *)(v7 + 181) = 2;
  *(_BYTE *)(v9 + 137) = 2;
  *(_BYTE *)(v11 + 1886) = 4;
  *(_BYTE *)(v11 + 1361) = 4;
  *(_BYTE *)(v11 + 1751) = 4;
  *(_WORD *)(v11 + 1366) = 1028;
  *(_BYTE *)(v11 + 1463) = v16;
  *(_BYTE *)(v11 + 1462) = v16;
  *(_BYTE *)(v11 + 1371) = 2;
  *(_WORD *)(v11 + 1091) = 258;
  *(_WORD *)(v11 + 1481) = 1026;
  *(_WORD *)(v11 + 1871) = 514;
  *(_BYTE *)(v10 + 482) = 4;
  *(_BYTE *)(v10 + 92) = 4;
  *(_BYTE *)(v10 + 481) = 4;
  *(_BYTE *)(v10 + 91) = 4;
  *(_WORD *)(v9 + 91) = 1028;
  *(_WORD *)(v7 + 135) = 1028;
  *(_WORD *)(v11 + 1840) = 1028;
  *(_BYTE *)(v10 + 483) = 4;
  *(_BYTE *)(v11 + 1844) = 4;
  *(_BYTE *)(v10 + 95) = 4;
  *(_BYTE *)(v7 + 139) = 4;
  *(_BYTE *)(v9 + 95) = 4;
  *(_BYTE *)(v11 + 3087) = 4;
  *(_BYTE *)(v11 + 3477) = 4;
  *(_WORD *)(v11 + 3096) = 4;
  *(_WORD *)(v11 + 3486) = 4;
  *(_WORD *)(v11 + 3093) = 4;
  *(_WORD *)(v11 + 3483) = 4;
  *(_BYTE *)(v11 + 2) = 2;
  *(_BYTE *)(v11 + 783) = 1;
  *(_BYTE *)(v11 + 1173) = 0;
  *(_BYTE *)(v11 + 1563) = 0;
  *(_BYTE *)(v11 + 3123) = 0;
  *(_BYTE *)(v11 + 3513) = 0;
  *(_BYTE *)(v11 + 1953) = 4;
  *(_WORD *)v11 = 514;
  *(_BYTE *)(v11 + 1316) = 4;
  *(_BYTE *)(v11 + 1706) = 4;
  *(_BYTE *)(v11 + 1740) = 4;
  *(_BYTE *)(v7 + 35) = 4;
  *(_BYTE *)(v7 + 815) = 4;
  *v6 = 4;
  v6[780] = 4;
  *(_BYTE *)(v8 + 771) = 4;
  *(_BYTE *)(v9 + 771) = 4;
  *(_BYTE *)(v11 + 959) = 4;
  *(_BYTE *)(v11 + 3396) = 0;
  *(_BYTE *)(v11 + 3006) = 0;
  *(_BYTE *)(v11 + 3099) = 4;
  *(_BYTE *)(v11 + 3489) = 4;
  v6[99] = 4;
  v6[879] = 4;
  *(_BYTE *)v10 = 2;
  *(_BYTE *)(v10 + 390) = 2;
  *(_BYTE *)v9 = 2;
  *(_BYTE *)v8 = 2;
  *(_BYTE *)(v10 + 1) = 2;
  *(_BYTE *)(v10 + 391) = 2;
  *(_BYTE *)(v9 + 1) = 2;
  *(_BYTE *)(v8 + 1) = 2;
  *(_BYTE *)(v11 + 1762) = 2;
  *(_BYTE *)(v11 + 1372) = 2;
  *(_BYTE *)(v11 + 982) = 2;
  *(_BYTE *)(v10 + 2) = 2;
  *(_BYTE *)(v10 + 392) = 2;
  *(_BYTE *)(v9 + 2) = 2;
  *(_BYTE *)(v8 + 2) = 2;
  *(_BYTE *)(v11 + 1480) = 0;
  *(_BYTE *)(v10 + 121) = 2;
  *(_BYTE *)(v10 + 511) = 2;
  *(_BYTE *)(v9 + 121) = 2;
  *(_BYTE *)(v8 + 121) = 2;
  *(_BYTE *)(v10 + 120) = 2;
  *(_BYTE *)(v10 + 510) = 2;
  *(_BYTE *)(v9 + 120) = 2;
  *(_BYTE *)(v8 + 120) = 2;
  *(_BYTE *)(v10 + 119) = 2;
  *(_BYTE *)(v10 + 509) = 2;
  *(_BYTE *)(v9 + 119) = 2;
  *(_BYTE *)(v8 + 119) = 2;
  *(_BYTE *)(v10 + 137) = 2;
  *(_BYTE *)(v10 + 527) = 2;
  *(_BYTE *)(v9 + 137) = 2;
  *(_BYTE *)(v8 + 137) = 2;
  *(_BYTE *)(v10 + 148) = 2;
  *(_BYTE *)(v10 + 538) = 2;
  *(_BYTE *)(v9 + 148) = 2;
  *(_BYTE *)(v8 + 148) = 2;
  *(_BYTE *)(v11 + 337) = 4;
  *(_BYTE *)(v11 + 727) = 4;
  *(_BYTE *)(v11 + 1117) = 4;
  *(_BYTE *)(v11 + 1507) = 4;
  *(_BYTE *)(v11 + 1897) = 4;
  *(_DWORD *)(v10 + 142) = 33686018;
  *(_DWORD *)(a1 + 14980) = 33686018;
  *(_DWORD *)(v9 + 142) = 33686018;
  *(_DWORD *)(v8 + 142) = 33686018;
  v17 = *(_BYTE **)(v4 + 8);
  if (v17[280])
  {
    *(_BYTE *)(v11 + 1868) = 4;
    *(_BYTE *)(v11 + 1870) = 4;
    v18 = (_BYTE *)(v11 + 1869);
  }
  else
  {
    *(_WORD *)(v8 + 91) = 1028;
    *(_WORD *)(v11 + 1864) = 1028;
    *(_BYTE *)(v11 + 1866) = 4;
    *(_WORD *)(v11 + 1072) = 514;
    *(_WORD *)(v11 + 1891) = 514;
    v18 = (_BYTE *)(v11 + 1356);
    *(_BYTE *)(v11 + 1883) = 2;
  }
  *v18 = 4;
  *(_BYTE *)(v10 + 115) = 4;
  *(_BYTE *)(v10 + 505) = 4;
  *(_BYTE *)(v9 + 115) = 4;
  *(_BYTE *)(v8 + 115) = 2;
  *(_WORD *)(v10 + 116) = 1028;
  *(_WORD *)(v10 + 506) = 1028;
  *(_WORD *)(v9 + 116) = 1028;
  *(_WORD *)(v8 + 116) = 514;
  *(_WORD *)(v11 + 3499) = 0;
  *(_WORD *)(v11 + 3109) = 0;
  *(_BYTE *)(v7 + 84) = 2;
  *(_BYTE *)(v7 + 86) = 2;
  *(_WORD *)(v7 + 210) = 514;
  *(_BYTE *)(v7 + 129) = 2;
  v19 = 177;
  v20 = 74032;
  *(_BYTE *)(v11 + 27) = 0;
  do
  {
    *(_BYTE *)(a1 + v20 + 1) = 34;
    v20 += 360;
    --v19;
  }
  while (v19);
  v21 = 170;
  v22 = 137934;
  *(_QWORD *)&v23 = 0x202020202020202;
  *((_QWORD *)&v23 + 1) = 0x202020202020202;
  do
  {
    v24 = (_OWORD *)(a1 + v22);
    *(_OWORD *)((char *)v24 + 154) = v23;
    v24[8] = v23;
    v24[9] = v23;
    v24[6] = v23;
    v24[7] = v23;
    v24[4] = v23;
    v24[5] = v23;
    v24[2] = v23;
    v24[3] = v23;
    v22 += 179;
    *v24 = v23;
    v24[1] = v23;
    --v21;
  }
  while (v21);
  v25 = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v17 + 176))(v17);
  llvm::TargetLoweringBase::computeRegisterProperties((llvm::TargetLoweringBase *)a1, v25);
  *(_DWORD *)(a1 + 64) = 1;
  llvm::TargetLoweringBase::setJumpIsExpensive(a1, 1);
  *(_BYTE *)(v5 + 6) |= 7u;
  v26 = *(_QWORD *)(v4 + 8);
  v27 = *(_BYTE *)(v5 + 17);
  v28 = *(_BYTE *)(v5 + 37) | 3;
  v29 = *(_BYTE *)(v5 + 36) | 0xFB;
  v30 = *(_BYTE *)(v5 + 30) | 0x60;
  v31 = *(_BYTE *)(v5 + 35) | 0xEC;
  v32 = *(_BYTE *)(v5 + 18) | 2;
  v33 = *(_BYTE *)(v5 + 5) | 1;
  v34 = *(_BYTE *)(v5 + 4) | 0xC0;
  v35 = *(_BYTE *)(v5 + 28) | 4;
  v36 = *(_BYTE *)v5 | 0x80;
  v37 = *(_BYTE *)(v5 + 11) | 0xD;
  v38 = *(int8x8_t *)(v5 + 20);
  v39 = *(_BYTE *)(v5 + 16) | 0x20;
  *(_BYTE *)(v5 + 20) = v38.i8[0] | 0x38;
  if (*(_BYTE *)(v26 + 280))
    v40 = v27;
  else
    v40 = v27 | 0x98;
  *(_BYTE *)(v5 + 37) = v28;
  *(_BYTE *)(v5 + 36) = v29;
  *(_BYTE *)(v5 + 30) = v30;
  *(_BYTE *)(v5 + 35) = v31;
  *(_BYTE *)(v5 + 18) = v32;
  *(_BYTE *)(v5 + 5) = v33;
  *(_BYTE *)(v5 + 4) = v34;
  *(_BYTE *)(v5 + 28) = v35;
  *(_BYTE *)v5 = v36;
  *(_BYTE *)(v5 + 16) = v39;
  *(_BYTE *)(v5 + 11) = v37;
  *(_BYTE *)(v5 + 17) = v40 | 4;
  *(int8x8_t *)(v5 + 20) = vorr_s8(v38, (int8x8_t)0x81C1901E038003B8);
  return a1;
}

const char *sub_1C612F658(uint64_t a1, int a2)
{
  const char *result;

  result = 0;
  switch(a2)
  {
    case 391:
      result = "AGX1ISD::VRET";
      break;
    case 392:
      result = "AGX1ISD::FRET";
      break;
    case 393:
      result = "AGX1ISD::PHASE_SEL";
      break;
    case 394:
      result = "AGX1ISD::PHASE_SMP";
      break;
    case 395:
      result = "AGX1ISD::READ_SHARED";
      break;
    case 396:
      result = "AGX1ISD::READ_COEFF";
      break;
    case 397:
      result = "AGX1ISD::FITR";
      break;
    case 398:
      result = "AGX1ISD::FITR_PROJ";
      break;
    case 399:
      result = "AGX1ISD::FITR_CEM";
      break;
    case 400:
      result = "AGX1ISD::FITR_SAT";
      break;
    case 401:
      result = "AGX1ISD::FITR_PROJ_SAT";
      break;
    case 402:
      result = "AGX1ISD::FITR_CEM_SAT";
      break;
    case 403:
      result = "AGX1ISD::FITR_TMP";
      break;
    case 404:
      result = "AGX1ISD::FITR_PROJ_TMP";
      break;
    case 405:
      result = "AGX1ISD::FITR_CEM_TMP";
      break;
    case 406:
      result = "AGX1ISD::FITR_CEMGRAD_TMP";
      break;
    case 407:
      result = "AGX1ISD::FITR_TMP_SAT";
      break;
    case 408:
      result = "AGX1ISD::FITR_PROJ_TMP_SAT";
      break;
    case 409:
      result = "AGX1ISD::FITR_CEM_TMP_SAT";
      break;
    case 410:
      result = "AGX1ISD::FITR_CEMGRAD_TMP_SAT";
      break;
    case 411:
      result = "AGX1ISD::FITR_16x2";
      break;
    case 412:
      result = "AGX1ISD::FITR_PROJ_16x2";
      break;
    case 413:
      result = "AGX1ISD::FITR_3D";
      break;
    case 414:
      result = "AGX1ISD::FITR_PROJ_16x3";
      break;
    case 415:
      result = "AGX1ISD::FITR_4D";
      break;
    case 416:
      result = "AGX1ISD::FITR_PROJ_16x4";
      break;
    case 417:
      result = "AGX1ISD::FITR_32x2";
      break;
    case 418:
      result = "AGX1ISD::FITR_PROJ_32x2";
      break;
    case 419:
      result = "AGX1ISD::FITR_32x3";
      break;
    case 420:
      result = "AGX1ISD::FITR_PROJ_32x3";
      break;
    case 421:
      result = "AGX1ISD::FITR_32x4";
      break;
    case 422:
      result = "AGX1ISD::FITR_PROJ_32x4";
      break;
    case 423:
      result = "AGX1ISD::RCP";
      break;
    case 424:
      result = "AGX1ISD::RSQRT";
      break;
    case 425:
      result = "AGX1ISD::QREFL";
      break;
    case 426:
      result = "AGX1ISD::RSQRTFROMSQRT";
      break;
    case 427:
      result = "AGX1ISD::ADDH";
      break;
    case 428:
      result = "AGX1ISD::SUBH";
      break;
    case 429:
    case 444:
    case 445:
      return result;
    case 430:
      result = "AGX1ISD::GAMMA_CMP_G5";
      break;
    case 431:
      result = "AGX1ISD::GAMMA_EXP_G5";
      break;
    case 432:
      result = "AGX1ISD::IMADH";
      break;
    case 433:
      result = "AGX1ISD::IMSUBH";
      break;
    case 434:
      result = "AGX1ISD::IMADHS";
      break;
    case 435:
      result = "AGX1ISD::IMSUBHS";
      break;
    case 436:
      result = "AGX1ISD::INSERT";
      break;
    case 437:
      result = "AGX1ISD::EXTRACT";
      break;
    case 438:
      result = "AGX1ISD::FPTOU8";
      break;
    case 439:
      result = "AGX1ISD::FPTOS8";
      break;
    case 440:
      result = "AGX1ISD::FPTOU8_SCALE";
      break;
    case 441:
      result = "AGX1ISD::FPTOS8_SCALE";
      break;
    case 442:
      result = "AGX1ISD::LADDR";
      break;
    case 443:
      result = "AGX1ISD::FMIX";
      break;
    case 446:
      result = "AGX1ISD::BIT_EXTRACT";
      break;
    case 447:
      result = "AGX1ISD::ATOMIC_LOCAL_G4";
      break;
    case 448:
      result = "AGX1ISD::ATOMIC_LOCAL_G5";
      break;
    case 449:
      result = "AGX1ISD::ATOMIC_LOCAL_CMPXCHG_G4";
      break;
    case 450:
      result = "AGX1ISD::ATOMIC_LOCAL_CMPXCHG_G5";
      break;
    case 451:
      result = "AGX1ISD::ATOMIC_GLOBAL_CMPXCHG_G4";
      break;
    case 452:
      result = "AGX1ISD::ATOMIC_GLOBAL_CMPXCHG_G5";
      break;
    case 453:
      result = "AGX1ISD::ATOMIC_GLOBAL_ADD";
      break;
    case 454:
      result = "AGX1ISD::ATOMIC_GLOBAL_SUB";
      break;
    case 455:
      result = "AGX1ISD::ATOMIC_GLOBAL_XCHG";
      break;
    case 456:
      result = "AGX1ISD::ATOMIC_GLOBAL_UMIN";
      break;
    case 457:
      result = "AGX1ISD::ATOMIC_GLOBAL_IMIN";
      break;
    case 458:
      result = "AGX1ISD::ATOMIC_GLOBAL_UMAX";
      break;
    case 459:
      result = "AGX1ISD::ATOMIC_GLOBAL_IMAX";
      break;
    case 460:
      result = "AGX1ISD::ATOMIC_GLOBAL_AND";
      break;
    case 461:
      result = "AGX1ISD::ATOMIC_GLOBAL_OR";
      break;
    case 462:
      result = "AGX1ISD::ATOMIC_GLOBAL_XOR";
      break;
    default:
      switch(a2)
      {
        case 890:
          result = "AGX1ISD::SPILL8";
          break;
        case 891:
          result = "AGX1ISD::SPILL16";
          break;
        case 892:
          result = "AGX1ISD::SPILL32";
          break;
        case 893:
          result = "AGX1ISD::SPILL64";
          break;
        case 894:
          result = "AGX1ISD::SPILL96";
          break;
        case 895:
          result = "AGX1ISD::SPILL128";
          break;
        case 899:
          result = "AGX1ISD::SPILL256";
          break;
        case 902:
          result = "AGX1ISD::RELOAD8";
          break;
        case 903:
          result = "AGX1ISD::RELOAD16";
          break;
        case 904:
          result = "AGX1ISD::RELOAD32";
          break;
        case 905:
          result = "AGX1ISD::RELOAD64";
          break;
        case 906:
          result = "AGX1ISD::RELOAD96";
          break;
        case 907:
          result = "AGX1ISD::RELOAD128";
          break;
        case 908:
          result = "AGX1ISD::RELOAD160";
          break;
        case 909:
          result = "AGX1ISD::RELOAD192";
          break;
        case 910:
          result = "AGX1ISD::RELOAD224";
          break;
        case 911:
          result = "AGX1ISD::RELOAD256";
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

_QWORD *sub_1C612FAAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  unsigned __int8 *v13;
  _QWORD *v14;
  unsigned __int8 *v16;
  int v17;

  v13 = *(unsigned __int8 **)a7;
  v16 = v13;
  if (v13)
    llvm::MetadataTracking::track((uint64_t)&v16, v13, 2);
  v17 = *(_DWORD *)(a7 + 8);
  v14 = sub_1C61390F4(a2, a3, a4, a5, a6, (const llvm::APInt *)&v16);
  if (v16)
    llvm::MetadataTracking::untrack((uint64_t)&v16, v16);
  return v14;
}

uint64_t sub_1C612FB50(uint64_t a1, char a2, uint64_t a3, const llvm::APInt *a4, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, int a10, uint64_t a11, int a12, _QWORD *a13)
{
  uint64_t v13;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t *v31;
  _BYTE *v32;
  _BYTE *v33;
  int v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _BYTE v45[8];
  uint64_t v46[3];
  _BYTE v47[8];
  uint64_t v48[3];
  _BYTE v49[8];
  void *v50[3];
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (a2 != 9 || (*(_WORD *)(*a13 + 1020) & 1) == 0)
    return 0;
  v17 = 0;
  v18 = 0;
  v55 = a5;
  v56 = a6;
  v57 = a7;
  v58 = a8;
  while (1)
  {
    v19 = v17;
    v20 = *(&v55 + 2 * v18);
    v21 = *(unsigned __int16 *)(v20 + 24);
    if (v21 == 36 || v21 == 12)
      break;
    v17 = 1;
    v18 = 1;
    if ((v19 & 1) != 0)
    {
      v23 = 0;
      v24 = 0;
      v20 = 0;
      goto LABEL_13;
    }
  }
  v25 = &v55 + 2 * (v18 ^ 1);
  v23 = *v25;
  v24 = *((unsigned int *)v25 + 2);
LABEL_13:
  v26 = 0;
  v27 = 0;
  v51 = a9;
  v52 = a10;
  v53 = a11;
  v54 = a12;
  while (1)
  {
    v28 = *(&v51 + 2 * v27);
    v29 = *(unsigned __int16 *)(v28 + 24);
    if (v29 == 12 || v29 == 36)
      break;
    v30 = v26;
    v26 = 1;
    v27 = 1;
    if ((v30 & 1) != 0)
      return 0;
  }
  if (!v20)
    return 0;
  v43 = *((unsigned int *)&v51 + 4 * v27 + 2);
  v31 = &v51 + 2 * (v27 ^ 1);
  v41 = *((unsigned int *)v31 + 2);
  v42 = *v31;
  sub_1C47A813C((llvm::detail::DoubleAPFloat *)v50, (uint64_t *)(*(_QWORD *)(v20 + 80) + 32));
  sub_1C47A813C((llvm::detail::DoubleAPFloat *)v48, (uint64_t *)(*(_QWORD *)(v28 + 80) + 32));
  v32 = v50[0] == &unk_1C866F1C0 ? v50[1] : v49;
  if ((v32[28] & 8) != 0
    || ((_UNKNOWN *)v48[0] != &unk_1C866F1C0 ? (v33 = v47) : (v33 = (_BYTE *)v48[1]), (v33[28] & 8) != 0))
  {
    v13 = 0;
    v38 = 1;
  }
  else
  {
    sub_1C47B4138((uint64_t)v49, (uint64_t)v47, 1);
    v35 = v34;
    sub_1C47BC1BC((uint64_t)v45, 1.0);
    llvm::APFloat::convert((uint64_t)v45, v50[0], 1, &v44);
    sub_1C47B415C((uint64_t)v49, (uint64_t)v45);
    v38 = 0;
    if (!v35 && v36 == 1)
    {
      v39 = a13[104];
      if (v39)
        LOWORD(v39) = *(_WORD *)(v39 + 8);
      *(_QWORD *)a1 = sub_1C5D58E08((uint64_t)a13, (const char *)0x1BB, a4, (llvm *)9, 0, v23, v24, v37, v28, v43, v42, v41, SHIDWORD(v41), v39);
      *(_DWORD *)(a1 + 8) = v40;
      v38 = 1;
    }
    sub_1C47A8258(v46);
    v13 = 1;
  }
  sub_1C47A8258(v48);
  sub_1C47A8258((uint64_t *)v50);
  if (!v38)
    return 0;
  return v13;
}

uint64_t sub_1C612FE00(llvm::EVT *this, const char *a2)
{
  int v3;

  v3 = *(unsigned __int8 *)this;
  if (*(_BYTE *)this)
  {
    if ((v3 - 120) >= 0x33)
      goto LABEL_3;
  }
  else if (!llvm::EVT::isExtendedScalableVector(this))
  {
    return llvm::EVT::getExtendedVectorNumElements(this);
  }
  llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of EVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use EVT::getVectorElementCount() instead", a2);
  v3 = *(unsigned __int8 *)this;
LABEL_3:
  if (!v3)
    return llvm::EVT::getExtendedVectorNumElements(this);
  if ((v3 - 120) <= 0x32)
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", a2);
  return sub_1C47F381C((unsigned __int8 *)this);
}

uint64_t *sub_1C612FE80(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned __int8 *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t *v27;
  int v28;
  int v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  int v43;
  _QWORD *v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  int v61;
  _QWORD *v62;
  _QWORD *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  llvm *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  int v80;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  _QWORD *v105;
  int v106;
  int v107;
  _QWORD *v108;
  int v109;
  int v110;
  _QWORD *v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  __int16 v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  unint64_t v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  uint64_t *v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  unint64_t v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  uint64_t *v137;
  int v138;
  int v139;
  uint64_t v140;
  _QWORD *v141;
  unint64_t v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  int v149;
  uint64_t v150;
  int v151;
  char *v152;
  int v153;
  int v154;
  uint64_t v155;
  int v156;
  _QWORD *v157;
  int v158;
  unsigned int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  unsigned __int8 *v164;
  int v165;
  unsigned __int8 *v166;
  int v167;
  __int128 v168;
  __int128 v169;
  unsigned __int8 *v170;
  int v171;
  uint64_t v172;
  int v173;
  _QWORD *v174;
  int v175;
  __int128 v176;
  _QWORD *v177;
  uint64_t v178;
  _QWORD *v179;
  int v180;
  uint64_t v181;
  unsigned __int8 *v182;
  _QWORD *v183;
  int v184;
  _QWORD *v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  __int128 v189;
  _QWORD *v190;
  int v191;
  _QWORD *v192;
  int v193;
  _QWORD *v194;
  int v195;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 **)(a2 + 64);
  v170 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v170, v6, 2);
  v171 = *(_DWORD *)(a2 + 60);
  v7 = *(unsigned __int16 *)(a2 + 24);
  if (v7 == 291)
    v8 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 80) + 40)
                   + 16 * *(unsigned int *)(*(_QWORD *)(a2 + 32) + 88));
  else
    v8 = *(uint64_t **)(a2 + 40);
  v9 = *v8;
  if (*v8 != 5)
  {
    v152 = "Atomic operations only support i32";
    goto LABEL_73;
  }
  v10 = v8[1];
  v11 = *(__int128 **)(a2 + 32);
  v12 = *v11;
  v168 = *(__int128 *)((char *)v11 + 40);
  v169 = v12;
  if (v7 == 290)
  {
    v13 = sub_1C6366AB4(a3[2], 0, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
    LODWORD(v15) = v14;
  }
  else
  {
    v13 = (_QWORD *)*((_QWORD *)v11 + 10);
    v15 = *((_QWORD *)v11 + 11);
  }
  v16 = *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16);
  if ((v16 & 0xFFFFFFFD) != 1)
  {
    v152 = "Unsupported address space for atomic operation";
LABEL_73:
    llvm::report_fatal_error((llvm *)v152, (const char *)1);
  }
  v17 = *(__int16 *)(a2 + 24) - 290;
  if (v16 == 1)
  {
    v161 = v10;
    v163 = v13;
    v156 = v15;
    v18 = dword_1C642B1E8[v17];
    v19 = v168;
    v20 = (uint64_t *)(a1 + 184296);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 281))
    {
      v43 = DWORD2(v168);
      v41 = (_QWORD *)v168;
    }
    else
    {
      v21 = a3[2];
      v22 = sub_1C6366AB4(v21, 0, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
      v25 = 0;
      v26 = *(_QWORD *)(v21 + 832);
      if (v26)
        v25 = *(_WORD *)(v26 + 8);
      v27 = sub_1C5D56C70(v21, 53, (const llvm::APInt *)&v170, (llvm *)5, 0, v168, *((unint64_t *)&v168 + 1), v24, (uint64_t)v22, v23, v25);
      v29 = v28;
      v30 = a3[2];
      v31 = sub_1C6366AB4(v30, 1, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
      v34 = 0;
      v35 = *(_QWORD *)(v30 + 832);
      if (v35)
        v34 = *(_WORD *)(v35 + 8);
      v36 = (uint64_t)sub_1C5D56C70(v30, 53, (const llvm::APInt *)&v170, (llvm *)5, 0, v168, *((unint64_t *)&v168 + 1), v33, (uint64_t)v31, v32, v34);
      v37 = v36;
      v39 = v38;
      v40 = a3[2];
      v166 = v170;
      if (v170)
        v36 = llvm::MetadataTracking::track((uint64_t)&v166, v170, 2);
      v167 = v171;
      v41 = sub_1C612FAAC(v36, (uint64_t)v27, v29, v37, v39, v40, (uint64_t)&v166);
      v43 = v42;
      if (v166)
        llvm::MetadataTracking::untrack((uint64_t)&v166, v166);
    }
    v159 = v18;
    v157 = sub_1C6366AB4(a3[2], 0, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
    v158 = v57;
    if (*(_BYTE *)(*v20 + 280))
    {
      v79 = sub_1C5D428B0(a3[2], 0, (llvm *)0xAE, 0);
      v81 = v80;
      v154 = v43;
      v82 = v41;
      if (*(_BYTE *)(*v20 + 287) && *(_BYTE *)(*v20 + 288))
      {
        v121 = a3[2];
        v122 = *((_QWORD *)&v168 + 1);
        v123 = sub_1C6366AB4(v121, -64, (const llvm::APInt *)&v170, (llvm *)6, 0, 0, 0);
        v126 = 0;
        v127 = *(_QWORD *)(v121 + 832);
        if (v127)
          v126 = *(_WORD *)(v127 + 8);
        v128 = sub_1C5D56C70(v121, 171, (const llvm::APInt *)&v170, (llvm *)6, 0, v19, v122, v125, (uint64_t)v123, v124, v126);
        v130 = v129;
        v131 = a3[2];
        v132 = sub_1C6366AB4(v131, 0, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
        v135 = 0;
        v136 = *(_QWORD *)(v131 + 832);
        if (v136)
          v135 = *(_WORD *)(v136 + 8);
        v137 = sub_1C5D56C70(v131, 53, (const llvm::APInt *)&v170, (llvm *)5, 0, (uint64_t)v128, v130, v134, (uint64_t)v132, v133, v135);
        v139 = v138;
        v140 = a3[2];
        v141 = sub_1C6366AB4(v140, 1, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
        v144 = 0;
        v145 = *(_QWORD *)(v140 + 832);
        if (v145)
          v144 = *(_WORD *)(v145 + 8);
        v146 = (uint64_t)sub_1C5D56C70(v140, 53, (const llvm::APInt *)&v170, (llvm *)5, 0, (uint64_t)v128, v130, v143, (uint64_t)v141, v142, v144);
        v147 = v146;
        v149 = v148;
        v150 = a3[2];
        v164 = v170;
        if (v170)
          v146 = llvm::MetadataTracking::track((uint64_t)&v164, v170, 2);
        v165 = v171;
        v79 = (uint64_t)sub_1C612FAAC(v146, (uint64_t)v137, v139, v147, v149, v150, (uint64_t)&v164);
        v81 = v151;
        if (v164)
          llvm::MetadataTracking::untrack((uint64_t)&v164, v164);
      }
      v83 = a3[2];
      v84 = *(uint64_t **)(v83 + 40);
      v85 = *v20;
      v86 = *v84;
      LODWORD(v181) = 0;
      if (sub_1C4785D88(v85, v86, "GAtomCMode", &v181))
        v87 = v181;
      else
        v87 = 0;
      v88 = sub_1C6366AB4(v83, v87, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
      v90 = v89;
      v91 = a3[2];
      v92 = *v20;
      v93 = *v84;
      LODWORD(v181) = 0;
      if (sub_1C4785D88(v92, v93, "GAtomSLCMode", &v181))
        v94 = v181;
      else
        v94 = 0;
      v95 = sub_1C6366AB4(v91, v94, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
      v181 = v169;
      LODWORD(v182) = DWORD2(v169);
      v183 = v82;
      v184 = v154;
      v185 = (_QWORD *)v79;
      LODWORD(v186) = v81;
      v187 = v163;
      LODWORD(v188) = v156;
      *(_QWORD *)&v189 = v88;
      DWORD2(v189) = v90;
      v190 = v95;
      v191 = v96;
      v192 = v157;
      v193 = v158;
      v97 = sub_1C636A8B4(a3[2], v9, v161, 1, 0);
      v99 = v98;
      v100 = 0;
      v101 = a3[2];
      v102 = *(_QWORD *)(v101 + 832);
      if (v102)
        v100 = *(_WORD *)(v102 + 8);
      v103 = (const char *)v159;
      v104 = 7;
    }
    else
    {
      v58 = sub_1C6366AB4(a3[2], 0, (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
      v59 = *v20;
      v155 = v9;
      v153 = v60;
      if (*(_BYTE *)(*v20 + 310))
      {
        v63 = v41;
        v64 = v43;
        v65 = 1;
        v61 = v156;
        v62 = v163;
      }
      else
      {
        v61 = v156;
        v62 = v163;
        v63 = v41;
        v64 = v43;
        if (*(_BYTE *)(v59 + 311))
        {
          v65 = 2;
        }
        else if (*(_BYTE *)(v59 + 312))
        {
          v65 = 3;
        }
        else
        {
          v65 = 0;
        }
      }
      v105 = sub_1C6366AB4(a3[2], v65, (const llvm::APInt *)&v170, (llvm *)4, 0, 0, 0);
      v107 = v106;
      v108 = sub_1C6366AB4(a3[2], 1, (const llvm::APInt *)&v170, (llvm *)4, 0, 0, 0);
      v110 = v109;
      v111 = sub_1C6366AB4(a3[2], 0, (const llvm::APInt *)&v170, (llvm *)4, 0, 0, 0);
      v181 = v169;
      LODWORD(v182) = DWORD2(v169);
      v183 = v63;
      v184 = v64;
      v185 = v58;
      LODWORD(v186) = v153;
      v187 = v62;
      LODWORD(v188) = v61;
      *(_QWORD *)&v189 = v105;
      DWORD2(v189) = v107;
      v190 = v108;
      v191 = v110;
      v192 = v111;
      v193 = v112;
      v194 = v157;
      v195 = v158;
      v97 = sub_1C636A8B4(a3[2], v155, v161, 1, 0);
      v99 = v113;
      v100 = 0;
      v101 = a3[2];
      v114 = *(_QWORD *)(v101 + 832);
      if (v114)
        v100 = *(_WORD *)(v114 + 8);
      v103 = (const char *)v159;
      v104 = 8;
    }
    v56 = sub_1C636D410(v101, v103, (const llvm::APInt *)&v170, v97, v99, &v181, v104, v100);
  }
  else
  {
    v44 = sub_1C6366AB4(a3[2], qword_1C642B228[v17], (const llvm::APInt *)&v170, (llvm *)5, 0, 0, 0);
    v46 = v45;
    v47 = sub_1C636A8B4(a3[2], v9, v10, 1, 0);
    v49 = v47;
    v50 = v48;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 280))
    {
      v160 = v48;
      v162 = v47;
      v66 = *(_QWORD *)(v168 + 40) + 16 * DWORD2(v168);
      v67 = *(llvm **)v66;
      v68 = *(_QWORD *)(v66 + 8);
      v69 = a3[2];
      v70 = sub_1C6366AB4(v69, 1, (const llvm::APInt *)&v170, *(llvm **)v66, v68, 0, 0);
      v73 = *(_QWORD *)(v69 + 832);
      if (v73)
        LOWORD(v73) = *(_WORD *)(v73 + 8);
      v74 = sub_1C5D56C70(v69, 177, (const llvm::APInt *)&v170, v67, v68, v168, *((unint64_t *)&v168 + 1), v72, (uint64_t)v70, v71, v73);
      DWORD2(v168) = v75;
      v76 = a3[2];
      v77 = *(_QWORD *)(v76 + 832);
      if (v77)
        v78 = *(_WORD *)(v77 + 8);
      else
        v78 = 0;
      v115 = sub_1C5D52060(v76, 201, (const llvm::APInt *)&v170, (llvm *)4, 0, (uint64_t)v74, *((unint64_t *)&v168 + 1), v78);
      v116 = 0;
      v181 = v169;
      LODWORD(v182) = DWORD2(v169);
      *(_QWORD *)&v168 = v115;
      DWORD2(v168) = v117;
      v183 = v44;
      v184 = v46;
      v185 = v115;
      LODWORD(v186) = v117;
      v187 = v13;
      LODWORD(v188) = v15;
      v118 = a3[2];
      v119 = *(_QWORD *)(v118 + 832);
      if (v119)
        v116 = *(_WORD *)(v119 + 8);
      v56 = sub_1C636D410(v118, (const char *)0x1BF, (const llvm::APInt *)&v170, v162, v160, &v181, 4, v116);
    }
    else
    {
      v182 = 0;
      LODWORD(v183) = 0;
      LOBYTE(v185) = 0;
      v186 = 0;
      LOBYTE(v187) = 0;
      v190 = 0;
      v191 = 0;
      v188 = 0;
      *(_QWORD *)&v189 = 0;
      DWORD2(v189) = 0;
      v192 = a3;
      sub_1C4831E60((uint64_t)&v181, (uint64_t *)&v168, 4, 0, 4, 0, 4, 0, 0);
      v172 = v169;
      v173 = DWORD2(v169);
      v174 = v44;
      v175 = v46;
      v176 = v189;
      v51 = sub_1C47F4C2C((uint64_t)&v181);
      v52 = 0;
      v177 = v51;
      v178 = v53;
      v179 = v13;
      v180 = v15;
      v54 = a3[2];
      v55 = *(_QWORD *)(v54 + 832);
      if (v55)
        v52 = *(_WORD *)(v55 + 8);
      v56 = sub_1C636D410(v54, (const char *)0x1C0, (const llvm::APInt *)&v170, v49, v50, &v172, 5, v52);
      if (v182)
        llvm::MetadataTracking::untrack((uint64_t)&v182, v182);
    }
  }
  if (v170)
    llvm::MetadataTracking::untrack((uint64_t)&v170, v170);
  return v56;
}

uint64_t *sub_1C6130884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  uint64_t *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  llvm *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  __int16 v80;
  uint64_t *v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t *v87;
  int v88;
  uint64_t v89;
  uint64_t *v90;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  int v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  unsigned __int8 *v100;
  int v101;
  uint64_t v102;
  int v103;
  __int128 v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  unsigned __int8 *v112;
  uint64_t *v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;

  v123 = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int8 **)(a2 + 64);
  v100 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v100, v6, 2);
  v101 = *(_DWORD *)(a2 + 60);
  v7 = *(uint64_t **)(a2 + 40);
  v8 = *v7;
  if (*v7 != 5)
  {
    v92 = "Atomic operations only support i32";
    goto LABEL_41;
  }
  v9 = v7[1];
  v10 = *(__int128 **)(a2 + 32);
  v11 = *v10;
  v98 = *(__int128 *)((char *)v10 + 40);
  v99 = v11;
  v13 = *((_QWORD *)v10 + 10);
  v12 = *((_QWORD *)v10 + 11);
  v97 = *(__int128 *)((char *)v10 + 120);
  v14 = *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16);
  if ((v14 & 0xFFFFFFFD) != 1)
  {
    v92 = "Unsupported address space for atomic operation";
LABEL_41:
    llvm::report_fatal_error((llvm *)v92, (const char *)1);
  }
  if (v14 != 1)
  {
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 280))
    {
      v112 = 0;
      LODWORD(v113) = 0;
      LOBYTE(v115) = 0;
      v116 = 0;
      LOBYTE(v117) = 0;
      v120 = 0;
      v121 = 0;
      v118 = 0;
      *(_QWORD *)&v119 = 0;
      DWORD2(v119) = 0;
      v122 = a3;
      sub_1C4831E60((uint64_t)&v111, (uint64_t *)&v98, 4, 0, 4, 0, 4, 0, 0);
      v27 = sub_1C636A8B4(*(_QWORD *)(a3 + 16), v8, v9, 1, 0);
      v29 = v28;
      v30 = *(_QWORD *)(a3 + 16);
      v102 = v99;
      v103 = DWORD2(v99);
      v104 = v119;
      v31 = sub_1C47F4C2C((uint64_t)&v111);
      v20 = 0;
      v105 = v31;
      v106 = v32;
      v107 = v97;
      v108 = DWORD2(v97);
      v109 = v13;
      v110 = v12;
      v33 = *(_QWORD *)(v30 + 832);
      if (v33)
        v20 = *(_WORD *)(v33 + 8);
      v23 = v30;
      v24 = 450;
      v25 = v27;
      v26 = v29;
      goto LABEL_14;
    }
    v94 = v12;
    v67 = v13;
    v68 = *(_QWORD *)(v98 + 40) + 16 * DWORD2(v98);
    v69 = *(llvm **)v68;
    v70 = *(_QWORD *)(v68 + 8);
    v71 = *(_QWORD *)(a3 + 16);
    v72 = sub_1C6366AB4(v71, 1, (const llvm::APInt *)&v100, *(llvm **)v68, v70, 0, 0);
    v75 = *(_QWORD *)(v71 + 832);
    if (v75)
      LOWORD(v75) = *(_WORD *)(v75 + 8);
    v77 = sub_1C5D56C70(v71, 177, (const llvm::APInt *)&v100, v69, v70, v98, *((unint64_t *)&v98 + 1), v74, (uint64_t)v72, v73, v75);
    v78 = *(_QWORD *)(a3 + 16);
    v79 = *(_QWORD *)(v78 + 832);
    if (v79)
      v80 = *(_WORD *)(v79 + 8);
    else
      v80 = 0;
    v13 = v67;
    v81 = sub_1C5D52060(v78, 201, (const llvm::APInt *)&v100, (llvm *)4, 0, (uint64_t)v77, v76, v80);
    v83 = v82;
    v60 = sub_1C636A8B4(*(_QWORD *)(a3 + 16), v8, v9, 1, 0);
    v62 = v84;
    v63 = 0;
    v111 = v99;
    LODWORD(v112) = DWORD2(v99);
    v64 = *(_QWORD *)(a3 + 16);
    v113 = v81;
    v114 = v83;
    v115 = v97;
    LODWORD(v116) = DWORD2(v97);
    v117 = v67;
    v12 = v94;
    LODWORD(v118) = v94;
    v85 = *(_QWORD *)(v64 + 832);
    if (v85)
      v63 = *(_WORD *)(v85 + 8);
    v66 = 449;
LABEL_35:
    v34 = sub_1C636D410(v64, (const char *)v66, (const llvm::APInt *)&v100, v60, v62, &v111, 4, v63);
    v36 = v86;
    goto LABEL_36;
  }
  if (*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 280))
  {
    v93 = v13;
    v37 = *(_QWORD *)(a3 + 16);
    v38 = sub_1C6366AB4(v37, 0, (const llvm::APInt *)&v100, (llvm *)5, 0, 0, 0);
    v41 = 0;
    v42 = *(_QWORD *)(v37 + 832);
    if (v42)
      v41 = *(_WORD *)(v42 + 8);
    v43 = sub_1C5D56C70(v37, 53, (const llvm::APInt *)&v100, (llvm *)5, 0, v98, *((unint64_t *)&v98 + 1), v40, (uint64_t)v38, v39, v41);
    v45 = v44;
    v46 = *(_QWORD *)(a3 + 16);
    v47 = sub_1C6366AB4(v46, 1, (const llvm::APInt *)&v100, (llvm *)5, 0, 0, 0);
    v50 = 0;
    v51 = *(_QWORD *)(v46 + 832);
    if (v51)
      v50 = *(_WORD *)(v51 + 8);
    v52 = (uint64_t)sub_1C5D56C70(v46, 53, (const llvm::APInt *)&v100, (llvm *)5, 0, v98, *((unint64_t *)&v98 + 1), v49, (uint64_t)v47, v48, v50);
    v53 = v52;
    v55 = v54;
    v56 = *(_QWORD *)(a3 + 16);
    v95 = v100;
    if (v100)
      v52 = llvm::MetadataTracking::track((uint64_t)&v95, v100, 2);
    v96 = v101;
    v57 = sub_1C612FAAC(v52, (uint64_t)v43, v45, v53, v55, v56, (uint64_t)&v95);
    v59 = v58;
    if (v95)
      llvm::MetadataTracking::untrack((uint64_t)&v95, v95);
    v60 = sub_1C636A8B4(*(_QWORD *)(a3 + 16), v8, v9, 1, 0);
    v62 = v61;
    v63 = 0;
    v111 = v99;
    LODWORD(v112) = DWORD2(v99);
    v64 = *(_QWORD *)(a3 + 16);
    v113 = v57;
    v114 = v59;
    v115 = v97;
    LODWORD(v116) = DWORD2(v97);
    v13 = v93;
    v117 = v93;
    LODWORD(v118) = v12;
    v65 = *(_QWORD *)(v64 + 832);
    if (v65)
      v63 = *(_WORD *)(v65 + 8);
    v66 = 451;
    goto LABEL_35;
  }
  v112 = 0;
  LODWORD(v113) = 0;
  LOBYTE(v115) = 0;
  v116 = 0;
  LOBYTE(v117) = 0;
  v120 = 0;
  v121 = 0;
  v118 = 0;
  *(_QWORD *)&v119 = 0;
  DWORD2(v119) = 0;
  v122 = a3;
  sub_1C4831E60((uint64_t)&v111, (uint64_t *)&v98, 4, 0, 6, 0, 5, 0, 0);
  v15 = sub_1C636A8B4(*(_QWORD *)(a3 + 16), v8, v9, 1, 0);
  v17 = v16;
  v18 = *(_QWORD *)(a3 + 16);
  v102 = v99;
  v103 = DWORD2(v99);
  v104 = v119;
  v19 = sub_1C47F4C2C((uint64_t)&v111);
  v20 = 0;
  v105 = v19;
  v106 = v21;
  v107 = v97;
  v108 = DWORD2(v97);
  v109 = v13;
  v110 = v12;
  v22 = *(_QWORD *)(v18 + 832);
  if (v22)
    v20 = *(_WORD *)(v22 + 8);
  v23 = v18;
  v24 = 452;
  v25 = v15;
  v26 = v17;
LABEL_14:
  v34 = sub_1C636D410(v23, (const char *)v24, (const llvm::APInt *)&v100, v25, v26, &v102, 5, v20);
  v36 = v35;
  if (v112)
    llvm::MetadataTracking::untrack((uint64_t)&v112, v112);
LABEL_36:
  v87 = sub_1C47F4CEC(*(_QWORD **)(a3 + 16), (const llvm::APInt *)&v100, *(llvm **)(*(_QWORD *)(a2 + 40) + 16), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 24), (uint64_t)v34, v36, v13, v12, 0x11u, 0, 0, 0, 0);
  v90 = sub_1C636D72C(*(_QWORD *)(a3 + 16), (const char *)0x37, (const llvm::APInt *)&v100, *(_QWORD *)(a2 + 40), *(unsigned __int16 *)(a2 + 58), (uint64_t)v34, 0, v89, (uint64_t)v87, v88, (uint64_t)v34, 1);
  if (v100)
    llvm::MetadataTracking::untrack((uint64_t)&v100, v100);
  return v90;
}

uint64_t sub_1C6130EE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  llvm::APInt *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v30;
  llvm::APInt *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t i;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  unsigned __int8 *v58;
  int v59;

  if (**(_BYTE **)(a2 + 40) != 2)
    return 0;
  v6 = *(unsigned __int8 **)(a2 + 64);
  v58 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v58, v6, 2);
  v59 = *(_DWORD *)(a2 + 60);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)v7;
  v9 = *(_DWORD *)(v7 + 8);
  v10 = *(_QWORD *)(v7 + 40);
  v11 = *(_QWORD *)(v7 + 48);
  if (*(_WORD *)(v10 + 24) != 193)
    goto LABEL_13;
  if (*(_WORD *)(v8 + 24) != 193)
    goto LABEL_26;
  v12 = *(_QWORD *)(v10 + 48);
  if (!v12)
    goto LABEL_13;
  v13 = 1;
  do
  {
    if (*(_DWORD *)(v12 + 8) == (_DWORD)v11)
    {
      if (!v13)
        goto LABEL_13;
      --v13;
    }
    v12 = *(_QWORD *)(v12 + 32);
  }
  while (v12);
  if (!v13)
  {
LABEL_26:
    v15 = v9;
    v14 = v8;
  }
  else
  {
LABEL_13:
    v14 = v10;
    v15 = v11;
    v10 = v8;
    LODWORD(v11) = v9;
  }
  if (*(_WORD *)(v10 + 24) != 193)
    goto LABEL_52;
  v16 = *(_QWORD *)(v10 + 32);
  v17 = *(_QWORD *)v16;
  if (*(_WORD *)(*(_QWORD *)v16 + 24) == 171)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 40);
    v19 = *(unsigned __int16 *)(v18 + 24);
    if (v19 == 35 || v19 == 11)
    {
      v21 = *(_QWORD *)(v18 + 80);
      v22 = (llvm::APInt *)(v21 + 24);
      v23 = *(_DWORD *)(v21 + 32);
      if (v23 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v22) == v23 - 1)
          goto LABEL_52;
      }
      else if (*(_QWORD *)v22 == 1)
      {
        goto LABEL_52;
      }
    }
  }
  if (*(_WORD *)(v14 + 24) != 193)
    goto LABEL_39;
  v26 = **(_QWORD **)(v14 + 32);
  if (*(_WORD *)(v26 + 24) != 171)
    goto LABEL_39;
  v27 = *(_QWORD *)(*(_QWORD *)(v26 + 32) + 40);
  v28 = *(unsigned __int16 *)(v27 + 24);
  if (v28 != 35 && v28 != 11)
    goto LABEL_39;
  v30 = *(_QWORD *)(v27 + 80);
  v31 = (llvm::APInt *)(v30 + 24);
  v32 = *(_DWORD *)(v30 + 32);
  if (v32 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v31) != v32 - 1)
      goto LABEL_39;
LABEL_52:
    v24 = 0;
    goto LABEL_53;
  }
  if (*(_QWORD *)v31 == 1)
    goto LABEL_52;
LABEL_39:
  v33 = *(_QWORD *)(v10 + 48);
  if (!v33)
    goto LABEL_46;
  v34 = 1;
  v35 = *(_QWORD *)(v10 + 48);
  do
  {
    if (*(_DWORD *)(v35 + 8) == (_DWORD)v11)
    {
      if (!v34)
        goto LABEL_46;
      --v34;
    }
    v35 = *(_QWORD *)(v35 + 32);
  }
  while (v35);
  if (v34)
  {
LABEL_46:
    for (i = *(_QWORD *)(a2 + 48); i; i = *(_QWORD *)(i + 32))
    {
      v37 = *(unsigned __int16 *)(*(_QWORD *)(i + 16) + 24);
      if (v37 == 190 || v37 == 259)
        goto LABEL_52;
    }
  }
  v38 = *(unsigned __int16 *)(a2 + 24);
  if (v38 == 172)
  {
    if (!v33)
      goto LABEL_62;
    v39 = 1;
    do
    {
      if (*(_DWORD *)(v33 + 8) == (_DWORD)v11)
      {
        if (!v39)
          goto LABEL_62;
        --v39;
      }
      v33 = *(_QWORD *)(v33 + 32);
    }
    while (v33);
    if (v39)
      goto LABEL_62;
    v49 = *(_QWORD *)(v14 + 48);
    if (!v49)
      goto LABEL_62;
    v50 = 1;
    do
    {
      if (*(_DWORD *)(v49 + 8) == v15)
      {
        if (!v50)
          goto LABEL_62;
        --v50;
      }
      v49 = *(_QWORD *)(v49 + 32);
    }
    while (v49);
    if (v50)
    {
LABEL_62:
      if (*(_BYTE *)(*(_QWORD *)(v17 + 40) + 16 * *(unsigned int *)(v16 + 8)) != 9)
        goto LABEL_52;
    }
    v40 = *(_QWORD *)(a3 + 16);
    v41 = *(_QWORD *)(v16 + 8);
    v42 = *(_QWORD *)(v16 + 40);
    v43 = *(_QWORD *)(v16 + 48);
    v44 = sub_1C6366AB4(v40, 1, (const llvm::APInt *)&v58, (llvm *)2, 0, 0, 0);
    v47 = sub_1C63698B8(v40, (const char *)0xC0, (const llvm::APInt *)&v58, (llvm *)2, 0, v17, v41, v46, v42, v43, (uint64_t)v44, v45, v14, v15, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v10 + 32) + 88));
  }
  else
  {
    if (v38 != 171)
      goto LABEL_52;
    v51 = *(_QWORD *)(a3 + 16);
    v52 = *(_QWORD *)(v16 + 8);
    v53 = *(_QWORD *)(v16 + 40);
    v54 = *(_QWORD *)(v16 + 48);
    v55 = sub_1C6366AB4(v51, 0, (const llvm::APInt *)&v58, (llvm *)2, 0, 0, 0);
    v47 = sub_1C63698B8(v51, (const char *)0xC0, (const llvm::APInt *)&v58, (llvm *)2, 0, v17, v52, v57, v53, v54, v14, v15, (uint64_t)v55, v56, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v10 + 32) + 88));
  }
  *(_QWORD *)a1 = v47;
  *(_DWORD *)(a1 + 8) = v48;
  v24 = 1;
LABEL_53:
  if (v58)
    llvm::MetadataTracking::untrack((uint64_t)&v58, v58);
  return v24;
}

unint64_t sub_1C6131264(unsigned __int8 *a1, uint64_t a2, BOOL a3)
{
  unint64_t EVT;
  unint64_t v4;
  uint64_t v6;

  if (*a1)
  {
    if (*a1 - 15 < 0x9C)
    {
      LOBYTE(EVT) = sub_1C47F37A0(a1);
      v4 = 0;
      return v4 | EVT;
    }
  }
  else
  {
    v6 = *((_QWORD *)a1 + 1);
    if ((*(_DWORD *)(v6 + 8) & 0xFE) == 0x12)
    {
      EVT = llvm::EVT::getEVT(*(llvm::EVT **)(v6 + 24), 0, a3);
      v4 = EVT & 0xFFFFFFFFFFFFFF00;
      return v4 | EVT;
    }
  }
  return *(_QWORD *)a1;
}

_QWORD *sub_1C61312D0(uint64_t a1, llvm *a2, uint64_t a3)
{
  _QWORD *v3;
  unsigned __int8 *v5[2];

  v5[0] = 0;
  v5[1] = 0;
  v3 = sub_1C5D51E4C(a1, 51, (uint64_t)v5, a2, a3);
  if (v5[0])
    llvm::MetadataTracking::untrack((uint64_t)v5, v5[0]);
  return v3;
}

llvm::Type *sub_1C6131328(unsigned __int8 *a1, uint64_t a2, BOOL a3)
{
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = sub_1C6131264(a1, a2, a3);
  v5[1] = v3;
  if (LOBYTE(v5[0]))
    return (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)v5);
  else
    return llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v5);
}

unint64_t sub_1C6131364(uint64_t a1, uint64_t a2, BOOL a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[2];

  v6[0] = a4;
  v6[1] = a5;
  if (!(_BYTE)a4)
  {
    if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
      return 4;
    return sub_1C612EE78((llvm::EVT *)v6, a2, a3);
  }
  if (a4 - 15 < 0x9C)
    return sub_1C612EE78((llvm::EVT *)v6, a2, a3);
  return 4;
}

void sub_1C61313B8(llvm *a1, uint64_t a2)
{
  llvm::raw_ostream *v3;
  llvm *v4;
  unint64_t v5;
  llvm::raw_ostream *v6;

  v3 = (llvm::raw_ostream *)llvm::errs(a1);
  v4 = sub_1C4816AD8(v3, "This call was not recognized as an intrinsic: ");
  v5 = *(_QWORD *)(a2 + 40);
  v6 = (llvm::raw_ostream *)llvm::errs(v4);
  sub_1C63718D8(v5, v6, 0);
  __break(1u);
}

uint64_t sub_1C61313F4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 4)
    return 4;
  else
    return 5;
}

void sub_1C6131408(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(v2 + 8) & 4) != 0)
  {
    v4 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 32 * v4;
      v7 = 2;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v2 + 40) + v7) & 4) != 0)
        {
          v8 = *(_QWORD *)(a2 + 32) + v5;
          if (*(_DWORD *)(v8 + 4))
            llvm::MachineOperand::setIsDef(v8, 1);
        }
        v5 += 32;
        v7 += 6;
      }
      while (v6 != v5);
    }
  }
}

uint64_t *sub_1C6131488(uint64_t a1, uint64_t a2, unint64_t a3, llvm *a4, uint64_t a5, int a6, const llvm::APInt *a7, uint64_t a8)
{
  unint64_t v12;
  uint64_t *v13;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  const llvm::APInt *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  int v36;
  llvm::EVT *v37;
  const char *v38;
  llvm::LLVMContext *v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  const llvm::APInt *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  BOOL v55;
  unsigned int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  __int16 v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  llvm::LLVMContext *v84;
  uint64_t *v85;
  unint64_t v86;

  v12 = a3;
  v13 = (uint64_t *)a2;
  v85 = (uint64_t *)a2;
  v86 = a3;
  if (!a6)
  {
    v30 = (unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 16 * a3);
    v31 = *v30;
    if (v31 != 174 && ((_DWORD)v31 != a4 || !(_BYTE)a4 && *((_QWORD *)v30 + 1) != a5))
    {
      v32 = *(_QWORD *)(a8 + 16);
      v33 = *(_QWORD *)(v32 + 832);
      if (v33)
        v34 = *(_WORD *)(v33 + 8);
      else
        v34 = 0;
      return sub_1C5D52060(v32, 216, a7, a4, a5, a2, a3, v34);
    }
    return v13;
  }
  if ((_BYTE)a4)
  {
    if (a4 == 10)
    {
      v16 = *(_QWORD *)(a8 + 16);
      v17 = *(_QWORD *)(v16 + 832);
      if (v17)
        v18 = *(_WORD *)(v17 + 8);
      else
        v18 = 0;
      v19 = a7;
      v20 = 9;
      v21 = 0;
      v22 = a2;
LABEL_7:
      v13 = sub_1C5D52060(v16, 216, v19, (llvm *)v20, v21, v22, v12, v18);
      v85 = v13;
      LODWORD(v86) = v23;
      LODWORD(v12) = v23;
      goto LABEL_8;
    }
    if (((_BYTE)a4 - 120) < 0x20u
      || ((_BYTE)a4 - 2) < 6u
      || ((_BYTE)a4 - 15) < 0x3Cu)
    {
LABEL_29:
      v37 = *(llvm::EVT **)(*(_QWORD *)(a8 + 16) + 56);
      v39 = sub_1C6131A64((unsigned int *)&v85);
      if ((_DWORD)v38 == 1)
      {
        v84 = v39;
        v39 = v84;
      }
      v20 = sub_1C4815B1C(v37, v39);
      v21 = v40;
      v16 = *(_QWORD *)(a8 + 16);
      v22 = (uint64_t)v85;
      v12 = v86;
      v41 = *(_QWORD *)(v16 + 832);
      if (v41)
        v18 = *(_WORD *)(v41 + 8);
      else
        v18 = 0;
      v19 = a7;
      goto LABEL_7;
    }
  }
  else
  {
    if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12)
      v36 = *(unsigned __int8 *)(**(_QWORD **)(a5 + 16) + 8);
    else
      v36 = *(_DWORD *)(a5 + 8);
    if (v36 == 13)
      goto LABEL_29;
  }
LABEL_8:
  if (a6 != 1)
  {
    if (a6 == 2)
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 281))
        v42 = 0;
      else
        v42 = a4 == 6;
      if (!v42)
      {
        v24 = *(_QWORD *)(a8 + 16);
        v26 = v86;
        v43 = *(_QWORD *)(v24 + 832);
        if (v43)
          v28 = *(_WORD *)(v43 + 8);
        else
          v28 = 0;
        v29 = 198;
        goto LABEL_45;
      }
      v58 = v86;
      if (*(_BYTE *)(v13[5] + 16 * v12) != 5)
      {
        v59 = *(_QWORD *)(a8 + 16);
        v60 = *(_QWORD *)(v59 + 832);
        if (v60)
          v61 = *(_WORD *)(v60 + 8);
        else
          v61 = 0;
        v13 = sub_1C5D52060(v59, 198, a7, (llvm *)5, 0, (uint64_t)v13, v86, v61);
        v85 = v13;
        LODWORD(v86) = v73;
        v58 = v86;
      }
      v74 = *(_QWORD *)(a8 + 16);
      v75 = sub_1C6366AB4(v74, 31, a7, (llvm *)5, 0, 0, 0);
      v78 = *(_QWORD *)(v74 + 832);
      if (v78)
        LOWORD(v78) = *(_WORD *)(v78 + 8);
      v81 = sub_1C5D56C70(v74, 176, a7, (llvm *)5, 0, (uint64_t)v13, v58, v77, (uint64_t)v75, v76, v78);
      v82 = *(_QWORD *)(a8 + 16);
      v83 = *(_QWORD *)(v82 + 832);
      if (v83)
        LOWORD(v83) = *(_WORD *)(v83 + 8);
      return sub_1C5D56C70(v82, 54, a7, (llvm *)6, 0, (uint64_t)v85, v86, v80, (uint64_t)v81, v79, v83);
    }
    else
    {
      if (a6 != 3)
        llvm::report_fatal_error((llvm *)"Unexpected ext type for load", (const char *)1);
      v24 = *(_QWORD *)(a8 + 16);
      if (*(_BYTE *)(*(_QWORD *)(a1 + 184296) + 281))
        v25 = 0;
      else
        v25 = a4 == 6;
      if (!v25)
      {
        v26 = v86;
        v27 = *(_QWORD *)(v24 + 832);
        if (v27)
          v28 = *(_WORD *)(v27 + 8);
        else
          v28 = 0;
        v29 = 199;
LABEL_45:
        v44 = a7;
        v45 = (uint64_t)a4;
        v46 = a5;
LABEL_46:
        v13 = sub_1C5D52060(v24, v29, v44, (llvm *)v45, v46, (uint64_t)v13, v26, v28);
        LODWORD(v86) = v47;
        return v13;
      }
      v63 = sub_1C6366AB4(v24, 0, a7, (llvm *)5, 0, 0, 0);
      v65 = v64;
      v66 = v85;
      if (*(_BYTE *)(v85[5] + 16 * v86) != 5)
      {
        v67 = *(_QWORD *)(a8 + 16);
        v68 = *(_QWORD *)(v67 + 832);
        if (v68)
          v69 = *(_WORD *)(v68 + 8);
        else
          v69 = 0;
        v66 = sub_1C5D52060(v67, 199, a7, (llvm *)5, 0, (uint64_t)v85, v86, v69);
        v85 = v66;
        LODWORD(v86) = v70;
      }
      v71 = *(_QWORD *)(a8 + 16);
      v72 = *(_QWORD *)(v71 + 832);
      if (v72)
        LOWORD(v72) = *(_WORD *)(v72 + 8);
      return sub_1C5D56C70(v71, 54, a7, (llvm *)6, 0, (uint64_t)v66, v86, v62, (uint64_t)v63, v65, v72);
    }
  }
  if (a4 == 10)
  {
    v24 = *(_QWORD *)(a8 + 16);
    v26 = v86;
    v49 = *(_QWORD *)(v24 + 832);
    if (v49)
      v28 = *(_WORD *)(v49 + 8);
    else
      v28 = 0;
    v29 = 215;
    v44 = a7;
    v45 = 10;
    v46 = 0;
    goto LABEL_46;
  }
  v50 = (unsigned __int8 *)(v13[5] + 16 * v12);
  v51 = *v50;
  if (v51 != a4)
  {
    if ((_BYTE)a4)
    {
      if (((_BYTE)a4 - 120) < 0x20u
        || ((_BYTE)a4 - 2) < 6u
        || ((_BYTE)a4 - 15) < 0x3Cu)
      {
LABEL_58:
        v24 = *(_QWORD *)(a8 + 16);
        v26 = v86;
        v54 = *(_QWORD *)(v24 + 832);
        if (v54)
          v28 = *(_WORD *)(v54 + 8);
        else
          v28 = 0;
        v29 = 200;
        goto LABEL_45;
      }
      goto LABEL_77;
    }
    goto LABEL_55;
  }
  v52 = *((_QWORD *)v50 + 1);
  if (!(_BYTE)a4 && v52 != a5)
  {
LABEL_55:
    if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12)
      v53 = *(unsigned __int8 *)(**(_QWORD **)(a5 + 16) + 8);
    else
      v53 = *(_DWORD *)(a5 + 8);
    if (v53 == 13)
      goto LABEL_58;
    if (v51 != a4)
    {
LABEL_82:
      if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12)
        v56 = *(unsigned __int8 *)(**(_QWORD **)(a5 + 16) + 8);
      else
        v56 = *(_DWORD *)(a5 + 8);
      if (v56 <= 6)
        goto LABEL_87;
      return v13;
    }
    v52 = *((_QWORD *)v50 + 1);
  }
  if (*v50)
    v55 = 1;
  else
    v55 = v52 == a5;
  if (v55)
    return v13;
LABEL_77:
  if (!(_BYTE)a4)
    goto LABEL_82;
  if (((_BYTE)a4 + 104) < 0x13u
    || ((_BYTE)a4 - 8) < 7u
    || ((_BYTE)a4 - 75) < 0x2Du)
  {
LABEL_87:
    v24 = *(_QWORD *)(a8 + 16);
    v26 = v86;
    v57 = *(_QWORD *)(v24 + 832);
    if (v57)
      v28 = *(_WORD *)(v57 + 8);
    else
      v28 = 0;
    v29 = 215;
    goto LABEL_45;
  }
  return v13;
}

llvm::Type *sub_1C6131A64(unsigned int *a1)
{
  __int128 v2;

  v2 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 40) + 16 * a1[2]);
  if ((_BYTE)v2)
    return (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v2);
  else
    return llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v2);
}

uint64_t sub_1C6131AB0(uint64_t a1)
{
  int v1;
  unsigned int v2;
  char v3;

  v1 = *(unsigned __int16 *)(a1 + 24);
  v2 = 2;
  v3 = v1 - 53;
  if ((v1 - 309) <= 0x3B)
  {
    if (((1 << v3) & 0xE00000000000001) != 0)
      return *(_QWORD *)(a1 + 32) + 40 * v2;
    if (((1 << v3) & 6) != 0)
    {
      v2 = 3;
      return *(_QWORD *)(a1 + 32) + 40 * v2;
    }
  }
  if (v1 != 254)
    v2 = 1;
  return *(_QWORD *)(a1 + 32) + 40 * v2;
}

BOOL sub_1C6131B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  unsigned int ExtendedSizeInBits;
  const char *v8;
  unsigned int v9;
  unsigned int v10;
  const char *v11;
  int v13;
  int v14;
  unsigned int v15;
  _QWORD v16[2];
  _QWORD v17[2];

  v17[0] = a2;
  v17[1] = a3;
  v16[0] = a4;
  v16[1] = a5;
  if ((_BYTE)a2)
  {
    if (a2 - 15 < 0x9C)
      return 0;
  }
  else if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
  {
    return 0;
  }
  v6 = a4;
  if ((_BYTE)a4)
  {
    if (a4 - 15 < 0x9C)
      return 0;
  }
  else if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12)
  {
    return 0;
  }
  if ((_BYTE)a2)
  {
    if (a2 - 2 >= 6)
      return 0;
  }
  else
  {
    if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
      v13 = *(unsigned __int8 *)(**(_QWORD **)(a3 + 16) + 8);
    else
      v13 = *(_DWORD *)(a3 + 8);
    if (v13 != 13)
      return 0;
  }
  if ((_BYTE)a4)
  {
    if (a4 - 2 >= 6)
      return 0;
  }
  else
  {
    if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12)
      v14 = *(unsigned __int8 *)(**(_QWORD **)(a5 + 16) + 8);
    else
      v14 = *(_DWORD *)(a5 + 8);
    if (v14 != 13)
      return 0;
  }
  if ((_BYTE)a2)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v17);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v17);
  v9 = ExtendedSizeInBits;
  if ((_DWORD)v8 == 1)
  if (v6)
    v10 = sub_1C47A8C74((unsigned __int8 *)v16);
  else
    v10 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v16);
  if ((_DWORD)v11 == 1)
  {
    v15 = v10;
    v10 = v15;
  }
  return v10 > 0xF && v9 > v10;
}

BOOL sub_1C6131C84(int a1, llvm::Type *this, llvm::Type *a3)
{
  const char *v4;
  unsigned int PrimitiveSizeInBits;
  const char *v6;
  unsigned int v7;

  if (*((_BYTE *)this + 8) != 13 || *((_BYTE *)a3 + 8) != 13)
    return 0;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(this);
  if ((_DWORD)v4 == 1)
  v7 = llvm::Type::getPrimitiveSizeInBits(a3);
  if ((_DWORD)v6 == 1)
  return v7 > 0xF && PrimitiveSizeInBits > v7;
}

BOOL sub_1C6131D14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v7;
  unint64_t v9;
  const char *v10;
  unint64_t v11;
  _QWORD v12[2];

  v12[0] = a4;
  v12[1] = a5;
  if ((_BYTE)a4)
  {
    if (a4 - 15 >= 0x9C)
      goto LABEL_7;
  }
  else if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
  {
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(a2 + 48);
  if (!v5 || *(_QWORD *)(v5 + 32))
    return 0;
LABEL_7:
  v7 = *(_DWORD *)(*(_QWORD *)(a2 + 96) + 16);
  if (v7 != 64 && v7 != 3)
    return 1;
  v9 = sub_1C47C1C70((unsigned __int8 *)v12);
  if ((_DWORD)v10 == 1)
  {
    v11 = v9;
    v9 = v11;
  }
  return (v9 & 0x1FFFFFFFFFFFFFFELL) != 0;
}

BOOL sub_1C6131DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t ExtendedSizeInBits;
  const char *v6;
  unint64_t v8;
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  if ((_BYTE)a4)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v9);
  else
    ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v9);
  if ((_DWORD)v6 == 1)
  {
    v8 = ExtendedSizeInBits;
    ExtendedSizeInBits = v8;
  }
  return ExtendedSizeInBits > 0x1F;
}

BOOL sub_1C6131E1C(int a1, llvm::Type *this, llvm::Type *a3)
{
  int ScalarSizeInBits;
  int v5;

  ScalarSizeInBits = llvm::Type::getScalarSizeInBits(this);
  if (ScalarSizeInBits != 32 && ScalarSizeInBits != 16)
    return 0;
  v5 = llvm::Type::getScalarSizeInBits(a3);
  return v5 == 32 || v5 == 64;
}

uint64_t sub_1C6131E7C(int a1, llvm::DataLayout *this, unsigned int a3)
{
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;

  v3 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(this, a3) + 4);
  if (v3 == 128)
    v4 = 7;
  else
    v4 = 0;
  if (v3 == 64)
    v5 = 6;
  else
    v5 = v4;
  if (v3 == 32)
    v6 = 5;
  else
    v6 = v5;
  if (v3 == 16)
    v7 = 4;
  else
    v7 = 0;
  if (v3 == 8)
    v8 = 3;
  else
    v8 = v7;
  if (v3 == 1)
    v9 = 2;
  else
    v9 = v8;
  if (v3 <= 31)
    return v9;
  else
    return v6;
}

uint64_t sub_1C6131EEC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, 0);
}

uint64_t sub_1C6131EFC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C6131F04()
{
  return 5;
}

uint64_t sub_1C6131F0C()
{
  return 5;
}

uint64_t sub_1C6131F14()
{
  return 1;
}

uint64_t sub_1C6131F1C()
{
  return 1;
}

uint64_t sub_1C6131F24()
{
  return 0;
}

BOOL sub_1C6131F2C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return a4 < 3;
}

uint64_t sub_1C6131F38()
{
  return 0;
}

uint64_t sub_1C6131F40()
{
  return 1;
}

uint64_t sub_1C6131F48()
{
  return 0;
}

uint64_t sub_1C6131F50(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
}

uint64_t sub_1C6131F5C()
{
  return 0;
}

uint64_t sub_1C6131F64()
{
  return 1;
}

uint64_t sub_1C6131F6C()
{
  return 1;
}

uint64_t sub_1C6131F74()
{
  return 0;
}

uint64_t sub_1C6131F7C()
{
  return 1;
}

uint64_t sub_1C6131F84()
{
  return 0;
}

uint64_t sub_1C6131F8C()
{
  return 0;
}

uint64_t sub_1C6131F94(uint64_t a1, int a2)
{
  uint64_t v2;

  v2 = 0;
  if (a2 > 31)
  {
    switch(a2)
    {
      case 32:
        LODWORD(v2) = 5;
        break;
      case 64:
        LODWORD(v2) = 6;
        break;
      case 128:
        LODWORD(v2) = 7;
        break;
      default:
        return v2;
    }
  }
  else
  {
    switch(a2)
    {
      case 1:
        LODWORD(v2) = 2;
        break;
      case 8:
        LODWORD(v2) = 3;
        break;
      case 16:
        LODWORD(v2) = 4;
        break;
      default:
        return v2;
    }
  }
  if (*(_QWORD *)(a1 + 8 * v2 + 96))
    return v2;
  else
    return 0;
}

uint64_t sub_1C6132014()
{
  return 0;
}

uint64_t sub_1C613201C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1);
}

uint64_t sub_1C6132028()
{
  return 0;
}

uint64_t sub_1C6132030()
{
  return 0;
}

uint64_t sub_1C6132038()
{
  return 1;
}

uint64_t sub_1C6132040()
{
  return 0;
}

uint64_t sub_1C6132048()
{
  return 1;
}

uint64_t sub_1C6132050()
{
  return 0;
}

uint64_t sub_1C6132058()
{
  return 0;
}

uint64_t sub_1C6132060()
{
  return 0;
}

uint64_t sub_1C6132068()
{
  return 0;
}

uint64_t sub_1C6132070()
{
  return 0;
}

uint64_t sub_1C6132078(uint64_t a1, unsigned __int8 a2)
{
  return *(_QWORD *)(a1 + 8 * a2 + 2072);
}

uint64_t sub_1C6132084(uint64_t a1, unsigned __int8 a2)
{
  return *(unsigned __int8 *)(a1 + a2 + 3504);
}

uint64_t sub_1C6132090()
{
  return 1;
}

uint64_t sub_1C6132098(unint64_t a1, llvm::EVT *a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, unsigned int *a7, unsigned __int8 *a8)
{
  return llvm::TargetLoweringBase::getVectorTypeBreakdown(a1, a2, a4, a5, a6, a7, a8);
}

uint64_t sub_1C61320B0()
{
  return 1;
}

uint64_t sub_1C61320B8()
{
  return 0;
}

uint64_t sub_1C61320C0()
{
  return 0;
}

uint64_t sub_1C61320C8()
{
  return 0;
}

uint64_t sub_1C61320D0()
{
  return 0;
}

uint64_t sub_1C61320D8()
{
  return 0;
}

void sub_1C61320E4(int a1, uint64_t a2, llvm::DataLayout *this)
{
  llvm::DataLayout::getABITypeAlign((uint64_t)this, a2);
}

uint64_t sub_1C61320EC()
{
  return 1;
}

uint64_t sub_1C61320F4(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v3;
  uint64_t v4;
  unsigned __int8 v5;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, a2, 0);
  result = sub_1C47A8C74(&v5);
  if ((_DWORD)v3 == 1)
  {
    v4 = result;
    return v4;
  }
  return result;
}

uint64_t sub_1C613214C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 184268);
}

uint64_t sub_1C613215C()
{
  return 0;
}

uint64_t sub_1C6132164()
{
  return 1;
}

uint64_t sub_1C6132170()
{
  return 0;
}

uint64_t sub_1C6132178()
{
  return 1;
}

uint64_t sub_1C6132180()
{
  return 0;
}

uint64_t sub_1C6132188()
{
  return 0;
}

void sub_1C6132190()
{
  llvm::report_fatal_error((llvm *)"Funclet EH is not implemented for this target", (const char *)1);
}

uint64_t sub_1C61321A8()
{
  return 0;
}

uint64_t sub_1C61321B0()
{
  return 0;
}

uint64_t sub_1C61321B8()
{
  return 0;
}

uint64_t sub_1C61321C0()
{
  return 0;
}

uint64_t sub_1C61321C8()
{
  return 0;
}

const char *sub_1C61321D0()
{
  return "";
}

uint64_t sub_1C61321E0()
{
  return 0;
}

uint64_t sub_1C6132200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t sub_1C6132208()
{
  return 1;
}

uint64_t sub_1C6132210()
{
  return 0;
}

uint64_t sub_1C6132218()
{
  return 0;
}

uint64_t sub_1C6132220()
{
  return 0;
}

uint64_t sub_1C6132228(uint64_t a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 18) >> 4) - 11 >= 2)
    return 0;
  else
    return 3;
}

uint64_t sub_1C6132244()
{
  return 0;
}

uint64_t sub_1C613224C()
{
  return 199;
}

uint64_t sub_1C6132254()
{
  return 200;
}

BOOL sub_1C613225C(uint64_t a1, uint64_t a2, char a3)
{
  return a3 == 9;
}

uint64_t sub_1C613226C()
{
  return 0;
}

uint64_t sub_1C6132274()
{
  return 0;
}

uint64_t sub_1C613227C()
{
  return 0;
}

uint64_t sub_1C6132284()
{
  return 1;
}

uint64_t sub_1C613228C()
{
  return 0;
}

uint64_t sub_1C6132294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 1064))(a1, a2, a3, a4, a5, 0)- 1;
}

uint64_t sub_1C61322C0()
{
  return 1;
}

uint64_t sub_1C61322C8()
{
  return 1;
}

BOOL sub_1C61322D0(uint64_t a1, uint64_t a2)
{
  return a2 == 0;
}

uint64_t sub_1C61322DC()
{
  return 0;
}

BOOL sub_1C61322E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unsigned int v5;

  v3 = *(unsigned __int8 *)(a2 + 8);
  if (v3 >= 7 && v3 != 13)
    return 0;
  v5 = *(unsigned __int8 *)(a3 + 8);
  return v5 == 13 || v5 < 7;
}

BOOL sub_1C6132310(uint64_t a1, int a2)
{
  _BOOL8 result;

  result = 1;
  if (((a2 - 159) > 0xE || ((1 << (a2 + 97)) & 0x7F3F) == 0)
    && ((a2 - 56) > 0x2A || ((1 << (a2 - 56)) & 0x5000C305185) == 0))
  {
    return (a2 - 246) < 6;
  }
  return result;
}

BOOL sub_1C613236C(uint64_t a1, int a2)
{
  _BOOL8 result;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1128))(a1) & 1) != 0)
    return 1;
  result = 1;
  if ((a2 - 57) > 0x2B || ((1 << (a2 - 57)) & 0xD001800003DLL) == 0)
    return (a2 - 175) < 5;
  return result;
}

uint64_t sub_1C61323D8()
{
  return 0;
}

uint64_t sub_1C61323E0(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, llvm::LLVMContext *a5)
{
  unint64_t ApproximateEVTForLLT;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  ApproximateEVTForLLT = llvm::getApproximateEVTForLLT(a2, a4, a5);
  v11 = v10;
  v12 = llvm::getApproximateEVTForLLT(a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1
                                                                                                  + 1160))(a1, ApproximateEVTForLLT, v11, v12, v13);
}

uint64_t sub_1C613245C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, llvm::LLVMContext *a5)
{
  unint64_t ApproximateEVTForLLT;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  ApproximateEVTForLLT = llvm::getApproximateEVTForLLT(a2, a4, a5);
  v11 = v10;
  v12 = llvm::getApproximateEVTForLLT(a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)a1
                                                                                                  + 1192))(a1, ApproximateEVTForLLT, v11, v12, v13);
}

uint64_t sub_1C61324D8()
{
  return 0;
}

uint64_t sub_1C61324E0()
{
  return 0;
}

uint64_t sub_1C61324E8()
{
  return 0;
}

uint64_t sub_1C61324F0()
{
  return 2;
}

uint64_t sub_1C61324F8()
{
  return 0;
}

uint64_t sub_1C6132500()
{
  return 0;
}

uint64_t sub_1C6132508(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v3;

  v3 = (_QWORD *)(*(_QWORD *)(a2 + 40) + 16 * a3);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 1192))(a1, *v3, v3[1]);
}

uint64_t sub_1C6132520()
{
  return 0;
}

uint64_t sub_1C6132528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 1288))(a1, a4, a5, a6, a7);
}

uint64_t sub_1C6132544()
{
  return 0;
}

uint64_t sub_1C613254C()
{
  return 1;
}

uint64_t sub_1C6132554()
{
  return 1;
}

uint64_t sub_1C613255C()
{
  return 1;
}

uint64_t sub_1C6132564()
{
  return 0;
}

uint64_t sub_1C613256C()
{
  return 0;
}

BOOL sub_1C6132574(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  unsigned __int8 *v3;
  int v4;
  int v5;

  v3 = (unsigned __int8 *)a1 + 7539;
  v4 = (unsigned __int16)(a3 >> 3);
  v5 = (unsigned __int16)(a3 >> 19);
  if ((a3 & 2) == 0)
    v5 = a3 >> 19;
  if ((a3 & 4) != 0)
    v4 = v5;
  if ((a3 & 1) != 0)
    v4 = a3 >> 3;
  if (v4 == 64)
  {
    if (a1[23])
    {
      v3 = (unsigned __int8 *)a1 + 8319;
      return *v3 == 0;
    }
  }
  else
  {
    if (v4 != 32)
    {
      if (v4 != 16 || !a1[21])
        return 0;
      return *v3 == 0;
    }
    if (a1[22])
    {
      v3 = (unsigned __int8 *)a1 + 7929;
      return *v3 == 0;
    }
  }
  return 0;
}

uint64_t sub_1C61325FC()
{
  return 0;
}

uint64_t sub_1C6132604()
{
  return 0;
}

uint64_t sub_1C613260C()
{
  return 0;
}

uint64_t sub_1C6132614()
{
  return 0;
}

uint64_t sub_1C613261C()
{
  return 0;
}

uint64_t sub_1C6132624()
{
  return 0;
}

uint64_t sub_1C613262C()
{
  return 0;
}

uint64_t sub_1C6132634()
{
  return 0;
}

uint64_t sub_1C613263C()
{
  return 0;
}

uint64_t sub_1C6132644()
{
  return 0;
}

uint64_t sub_1C613264C()
{
  return 0;
}

uint64_t sub_1C6132654(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  int v5;
  unsigned int v6;

  v4 = *(_QWORD *)(a3 + 48);
  if (v4)
  {
    v5 = 1;
    while (1)
    {
      if (*(_DWORD *)(v4 + 8) == a4)
      {
        if (!v5)
        {
          v6 = 0;
          goto LABEL_10;
        }
        --v5;
      }
      v4 = *(_QWORD *)(v4 + 32);
      if (!v4)
        goto LABEL_9;
    }
  }
  v5 = 1;
LABEL_9:
  v6 = 1;
LABEL_10:
  if (v5)
    return 0;
  else
    return v6;
}

uint64_t sub_1C613269C()
{
  return 0;
}

uint64_t sub_1C61326A4()
{
  return 0;
}

uint64_t sub_1C61326AC()
{
  return 0;
}

uint64_t sub_1C61326B4()
{
  return 0;
}

uint64_t sub_1C61326C0()
{
  return 1;
}

uint64_t sub_1C61326C8()
{
  return 0;
}

uint64_t sub_1C61326D0()
{
  return 1;
}

uint64_t sub_1C61326D8(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C61326E4()
{
  return 1;
}

BOOL sub_1C61326EC(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return a3 && *(_QWORD *)(a1 + 8 * a3 + 96) != 0;
}

uint64_t sub_1C6132710()
{
  return 0;
}

uint64_t sub_1C6132718()
{
  return 0;
}

uint64_t sub_1C6132720()
{
  return 0;
}

uint64_t sub_1C6132728()
{
  return 0;
}

uint64_t sub_1C6132738()
{
  return 0;
}

uint64_t sub_1C6132740()
{
  return 0;
}

uint64_t sub_1C6132750()
{
  return 1;
}

uint64_t sub_1C6132758()
{
  return 0;
}

const char *sub_1C6132760()
{
  return "__clear_cache";
}

void sub_1C613276C()
{
  llvm::report_fatal_error((llvm *)"Named registers not implemented for this target", (const char *)1);
}

uint64_t sub_1C6132784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v7[2];

  v7[0] = a3;
  v7[1] = a4;
  v4 = *(unsigned __int8 *)(a1 + 1891);
  if ((_DWORD)v4 == a3 && (*(_BYTE *)(a1 + 1891) || a4 == 0))
    return a3;
  if (!sub_1C4826078((unsigned __int8 *)v7, v4, 0))
    return v7[0];
  return v4;
}

BOOL sub_1C61327EC(uint64_t a1, _BYTE *a2)
{
  return *a2 == 0;
}

uint64_t sub_1C61327FC()
{
  return 0;
}

uint64_t sub_1C6132804(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C6132810()
{
  return 0;
}

uint64_t sub_1C6132818()
{
  return 0;
}

uint64_t sub_1C6132820(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C61286D4(a2, a3);
}

uint64_t sub_1C613282C()
{
  return 0;
}

uint64_t sub_1C6132834(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3;
  int v4;
  unsigned int v5;

  if (a3 != 1)
    return 0;
  v3 = *a2;
  if (v3 == 88)
    return 18;
  if (v3 == 112)
    v4 = 22;
  else
    v4 = 0;
  if (v3 == 111)
    v5 = 4;
  else
    v5 = v4;
  if (v3 == 109)
    return 3;
  else
    return v5;
}

uint64_t sub_1C6132880()
{
  return 0;
}

uint64_t sub_1C6132888()
{
  return 0;
}

uint64_t sub_1C6132894()
{
  return 0;
}

uint64_t *sub_1C61328A0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t *v8;
  unsigned __int8 *v10;
  int v11;

  v6 = a3;
  v7 = *(unsigned __int8 **)(a2 + 64);
  v10 = v7;
  if (v7)
    llvm::MetadataTracking::track((uint64_t)&v10, v7, 2);
  v11 = *(_DWORD *)(a2 + 60);
  v8 = sub_1C5D404C4(a4, (const llvm::APInt *)&v10, *(_QWORD *)(*(_QWORD *)(a2 + 40) + 16 * v6), *(_QWORD *)(*(_QWORD *)(a2 + 40) + 16 * v6 + 8), 0, 0.0);
  if (v10)
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
  return v8;
}

uint64_t sub_1C6132934()
{
  return 0;
}

uint64_t *sub_1C6132940(uint64_t a1, const llvm::APInt *a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a7 + 832);
  if (v8)
    LOWORD(v8) = *(_WORD *)(v8 + 8);
  return sub_1C5D56C70(a7, 257, a2, (llvm *)1, 0, a3, a4, a8, a5, a6, v8);
}

uint64_t sub_1C6132990(uint64_t a1, int a2, uint64_t a3)
{
  *(_QWORD *)(a1 + 32) = a3;
  return ((uint64_t (*)(void))((char *)sub_1C61329B0 + 4 * byte_1C642B10A[a2 - 1860]))();
}

uint64_t sub_1C61329B0(uint64_t result, int a2)
{
  int v2;

  *(_OWORD *)result = xmmword_1C642B4D0;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = a2 != 1860;
  if (a2 == 1860)
    v2 = 3754;
  else
    v2 = 276;
  *(_DWORD *)(result + 20) = v2;
  return result;
}

uint64_t *sub_1C6132BA0(uint64_t a1, uint64_t a2, int a3, const llvm::APInt *a4, int a5, uint64_t a6, unsigned int a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v16 = sub_1C636A8B4(a1, 1, 0, 172, 0);
  v18 = v17;
  v27 = a2;
  v28 = a3;
  v19 = *(_QWORD *)(a6 + 40) + 16 * a7;
  v20 = sub_1C5D428B0(a1, a5, *(llvm **)v19, *(_QWORD *)(v19 + 8));
  v21 = 0;
  v29 = v20;
  v30 = v22;
  v31 = a6;
  v32 = a7;
  v33 = a9;
  v34 = a10;
  v23 = *(_QWORD *)(a1 + 832);
  if (v23)
    v21 = *(_WORD *)(v23 + 8);
  if (a9)
    v24 = 4;
  else
    v24 = 3;
  return sub_1C636D410(a1, (const char *)0x31, a4, v16, v18, &v27, v24, v21);
}

uint64_t sub_1C6132CB4(uint64_t result, unsigned int a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;

  v3 = result;
  LOBYTE(result) = a3;
  v4 = *(uint64_t **)(v3 + 174032);
  if (v4)
  {
    v5 = (uint64_t *)(v3 + 174032);
    do
    {
      v6 = *((_DWORD *)v4 + 7);
      if (v6 >= a2)
      {
        if (v6 <= a2)
        {
          if (*((unsigned __int8 *)v4 + 32) < a3)
            ++v4;
          else
            v5 = v4;
        }
        else
        {
          v5 = v4;
        }
      }
      else
      {
        ++v4;
      }
      v4 = (uint64_t *)*v4;
    }
    while (v4);
    if (v5 != (uint64_t *)(v3 + 174032))
    {
      v7 = *((_DWORD *)v5 + 7);
      if (v7 <= a2 && (v7 < a2 || *((unsigned __int8 *)v5 + 32) <= a3))
        return *((unsigned __int8 *)v5 + 36);
    }
  }
  do
  {
    do
      result = result + 1;
    while ((result & 0x100) != 0);
  }
  while (!*(_QWORD *)(v3 + 8 * result + 96)
       || a2 <= 0x185 && *(_BYTE *)(v3 + 390 * result + a2 + 3862) == 1);
  return result;
}

unsigned int *sub_1C6132D88(unsigned int *result, char *a2, char *a3)
{
  char *v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;

  v4 = a2;
  v5 = result;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 3);
  v7 = result[2];
  if (v6 + v7 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + v7, 16);
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v8 = (_OWORD *)(*(_QWORD *)v5 + 16 * v7);
    do
    {
      v9 = *(_OWORD *)v4;
      v4 += 40;
      *v8++ = v9;
    }
    while (v4 != a3);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + v6;
  return result;
}

unsigned int *sub_1C6132E18(unsigned int *result, char *a2, char *a3)
{
  char *v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[2];
  v8 = v7 + ((a3 - a2) >> 4);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 16);
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v9 = (_OWORD *)(*(_QWORD *)v5 + 16 * v7);
    do
    {
      v10 = *(_OWORD *)v4;
      v4 += 16;
      *v9++ = v10;
    }
    while (v4 != a3);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 4);
  return result;
}

void sub_1C6132EA0(uint64_t a1)
{
  sub_1C6132EC4(a1);
}

void sub_1C6132EAC()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6132EC4(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E814B8C0;
  sub_1C47655E8(a1 + 174024, *(_QWORD **)(a1 + 174032));
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(8 * *(unsigned int *)(a1 + 40)));
}

uint64_t sub_1C6132F08()
{
  uint64_t v0;

  return v0;
}

uint64_t *sub_1C6132F18(uint64_t a1, const llvm::APInt *a2, uint64_t a3, unint64_t a4)
{
  int v8;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = *(unsigned __int16 *)(a3 + 24);
  if (v8 == 35 || v8 == 11)
  {
    v10 = *(_QWORD *)(a3 + 80);
    v11 = *(_DWORD *)(v10 + 32);
    if (v11 > 0x40)
      v12 = **(_QWORD **)(v10 + 24);
    else
      v12 = (uint64_t)(*(_QWORD *)(v10 + 24) << -(char)v11) >> -(char)v11;
    return sub_1C6366AB4(a1, v12 >> 1, a2, (llvm *)5, 0, 1, 0);
  }
  else
  {
    v13 = sub_1C6366AB4(a1, 1, a2, (llvm *)4, 0, 0, 0);
    v16 = *(_QWORD *)(a1 + 832);
    if (v16)
      LOWORD(v16) = *(_WORD *)(v16 + 8);
    return sub_1C5D56C70(a1, 177, a2, (llvm *)4, 0, a3, a4, v15, (uint64_t)v13, v14, v16);
  }
}

void sub_1C6133014(uint64_t a1)
{
  sub_1C6132EC4(a1);
}

void sub_1C6133020()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6133038()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF708);
  *result = &off_1E7F97EB8;
  return result;
}

uint64_t sub_1C6133078(uint64_t a1, _DWORD *a2, __int128 *a3, __int128 *a4, int a5, int a6)
{
  __int128 v10;
  __int128 v11;
  unsigned int *v12;
  __int128 *v13;
  char *v14;
  uint64_t result;
  char v16;
  __int128 v17;
  unsigned int v18[7];
  char v19;
  __int128 v20;
  __int128 v21;

  v10 = *a3;
  v20 = *a4;
  v21 = v10;
  v19 = 0;
  v11 = *a4;
  v17 = *a3;
  *(_OWORD *)v18 = v11;
  v12 = (unsigned int *)&v21;
  v13 = &v20;
  v14 = &v19;
  if ((sub_1C4830EF8(a1, a2, (unsigned int *)&v21, (uint64_t)&v20, &v19, a6) & 1) != 0
    || a5
    && (v16 = 0, v12 = v18, v13 = &v17, v14 = &v16, (sub_1C4830EF8(a1, a2, v18, (uint64_t)&v17, &v16, a6) & 1) != 0))
  {
    result = 1;
  }
  else
  {
    result = 0;
    v14 = &v19;
    v13 = &v20;
    v12 = (unsigned int *)&v21;
  }
  *(_QWORD *)(a1 + 64) = *(_QWORD *)v12;
  *(_DWORD *)(a1 + 72) = v12[2];
  *(_QWORD *)(a1 + 80) = *(_QWORD *)v13;
  *(_DWORD *)(a1 + 88) = *((_DWORD *)v13 + 2);
  *(_BYTE *)(a1 + 1) = *v14;
  return result;
}

uint64_t *sub_1C6133170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _BYTE *a7)
{
  int v14;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v14 = *(unsigned __int16 *)(a2 + 24);
  if (v14 != 253 && (v14 - 290) > 0x11)
  {
    if (v14 != 254)
    {
      v16 = 0;
      v17 = 0;
      v18 = *(_QWORD *)(a2 + 32);
      v24 = *(_QWORD *)v18;
      v25 = *(_DWORD *)(v18 + 8);
      return sub_1C4831E60(a1, &v24, v17, v16, a3, a4, a5, a6, a7);
    }
    v22 = *(_QWORD *)(a2 + 32);
    v24 = *(_QWORD *)(v22 + 80);
    v21 = *(_DWORD *)(v22 + 88);
  }
  else
  {
    v20 = *(_QWORD *)(a2 + 32);
    v24 = *(_QWORD *)(v20 + 40);
    v21 = *(_DWORD *)(v20 + 48);
  }
  v25 = v21;
  if (sub_1C6133268(a2))
    v23 = a2;
  else
    v23 = 0;
  v17 = sub_1C4831E04(*(_QWORD *)(v23 + 96));
  v16 = 1;
  return sub_1C4831E60(a1, &v24, v17, v16, a3, a4, a5, a6, a7);
}

BOOL sub_1C6133268(uint64_t a1)
{
  int v2;
  _BOOL8 result;
  BOOL v4;

  v2 = *(unsigned __int16 *)(a1 + 24);
  result = 1;
  if ((v2 - 290) >= 0x16 && (v2 - 366) >= 6)
  {
    v4 = (v2 - 253) > 0x22 || ((1 << (v2 + 3)) & 0x400000003) == 0;
    if (v4 && ((v2 - 47) > 1 || (*(_BYTE *)(a1 + 26) & 2) == 0))
      return (__int16)v2 > 889;
  }
  return result;
}

uint64_t sub_1C61332D8()
{
  return 0;
}

uint64_t sub_1C61332E0()
{
  return 0;
}

uint64_t sub_1C61332E8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return *(unsigned __int8 *)((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *a3) + 282);
}

uint64_t sub_1C6133314(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4, int *a5, int *a6, int *a7)
{
  uint64_t result;
  int v12;
  unsigned __int8 v13;
  int v14;
  int v15;
  int v16;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 16))(a2, *a3);
  *a6 = 0;
  v12 = 4;
  if (a4 >= 4)
  {
    if (a4 - 4 >= 2)
      v16 = 4;
    else
      v16 = 8;
    v15 = 0;
    *a5 = v16;
    v12 = 2;
    goto LABEL_11;
  }
  v13 = *(_BYTE *)(result + 280);
  if (v13)
    v14 = 16;
  else
    v14 = 4;
  *a5 = v14;
  if (!(*(_BYTE *)(result + 282) | v13))
  {
    v15 = 1;
LABEL_11:
    *a6 = v15;
  }
  *a7 = v12;
  return result;
}

_UNKNOWN ***sub_1C61333B4(uint64_t a1, int a2, int a3)
{
  _UNKNOWN ****v3;

  v3 = off_1E7F98050;
  if (a3 == 16)
    v3 = off_1E7F97FD8;
  return v3[a2 - 2];
}

void *sub_1C61333D8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a2 + 25) << 8 == 4096)
    return &unk_1C642BCB8;
  else
    return &unk_1C642BCF8;
}

uint64_t sub_1C61333FC(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int *v10;
  uint64_t result;

  v7 = *a2;
  v8 = **(unsigned __int16 **)(*a2 + 16);
  if (v8 > 0x2CC6)
  {
    if (**(unsigned __int16 **)(*a2 + 16) <= 0x2DF2u)
      __asm { BR              X10 }
    if (**(unsigned __int16 **)(*a2 + 16) <= 0x2F77u)
    {
      if (v8 == 11763)
      {
        v9 = a3 - 2;
        v10 = (unsigned int *)&unk_1C642C668;
      }
      else
      {
        v9 = a3 - 2;
        v10 = (unsigned int *)&unk_1C642C6D8;
      }
    }
    else if (v8 == 12152)
    {
      v9 = a3 - 2;
      v10 = (unsigned int *)&unk_1C642C6F4;
    }
    else if (v8 == 13390)
    {
      v9 = a3 - 2;
      v10 = (unsigned int *)&unk_1C642C6A0;
    }
    else
    {
      v9 = a3 - 2;
      v10 = (unsigned int *)&unk_1C642C71C;
    }
  }
  else
  {
    if (**(unsigned __int16 **)(*a2 + 16) > 0x2B48u)
    {
      switch(**(_WORD **)(*a2 + 16))
      {
        case 0x2C57:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C3C8;
          goto LABEL_20;
        case 0x2C58:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C3D4;
          goto LABEL_20;
        case 0x2C59:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C3E0;
          goto LABEL_20;
        case 0x2C5A:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C3EC;
          goto LABEL_20;
        case 0x2C5B:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C3F8;
          goto LABEL_20;
        case 0x2C5C:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C404;
          goto LABEL_20;
        case 0x2C5D:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C410;
          goto LABEL_20;
        case 0x2C5E:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C41C;
          goto LABEL_20;
        case 0x2C5F:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C428;
          goto LABEL_20;
        case 0x2C60:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C434;
          goto LABEL_20;
        case 0x2C61:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C440;
          goto LABEL_20;
        case 0x2C62:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C44C;
          goto LABEL_20;
        case 0x2C63:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C458;
          goto LABEL_20;
        case 0x2C64:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C464;
          goto LABEL_20;
        case 0x2C65:
        case 0x2C66:
        case 0x2C67:
        case 0x2C68:
        case 0x2C69:
        case 0x2C6A:
        case 0x2C6B:
        case 0x2C6C:
        case 0x2C6D:
        case 0x2C6E:
        case 0x2C6F:
        case 0x2C70:
        case 0x2C71:
        case 0x2C72:
        case 0x2C73:
        case 0x2C74:
        case 0x2C75:
        case 0x2C76:
        case 0x2C77:
        case 0x2C78:
        case 0x2C79:
        case 0x2C7A:
        case 0x2C7B:
        case 0x2C7C:
        case 0x2C7D:
        case 0x2C7E:
        case 0x2C7F:
        case 0x2C80:
        case 0x2C81:
        case 0x2C82:
        case 0x2C83:
        case 0x2C84:
        case 0x2C85:
        case 0x2C86:
        case 0x2C87:
        case 0x2C88:
        case 0x2C89:
        case 0x2C8A:
        case 0x2C8B:
        case 0x2C8C:
        case 0x2C8D:
        case 0x2C8E:
          __break(1u);
          return result;
        case 0x2C8F:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C470;
          goto LABEL_20;
        case 0x2C90:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C47C;
          goto LABEL_20;
        case 0x2C91:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C488;
          goto LABEL_20;
        case 0x2C92:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C494;
          goto LABEL_20;
        case 0x2C93:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C4A0;
          goto LABEL_20;
        case 0x2C94:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C4AC;
          goto LABEL_20;
        case 0x2C95:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C4B8;
          goto LABEL_20;
        case 0x2C96:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C4C4;
          goto LABEL_20;
        case 0x2C97:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C4D0;
          goto LABEL_20;
        case 0x2C98:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C4DC;
          goto LABEL_20;
        case 0x2C99:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C4E8;
          goto LABEL_20;
        case 0x2C9A:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C4F4;
          goto LABEL_20;
        case 0x2C9B:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C500;
          goto LABEL_20;
        case 0x2C9C:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C50C;
          goto LABEL_20;
        default:
          __asm { BR              X10 }
          return result;
      }
    }
    if (**(unsigned __int16 **)(*a2 + 16) <= 0x13Au)
    {
      if (v8 == 291)
      {
        v9 = a3 - 2;
        v10 = (unsigned int *)&unk_1C642C684;
      }
      else if (v8 == 292)
      {
        v9 = a3 - 2;
        v10 = (unsigned int *)&unk_1C642C700;
      }
      else
      {
        v9 = a3 - 2;
        v10 = (unsigned int *)&unk_1C642C6BC;
      }
    }
    else
    {
      switch(**(_WORD **)(*a2 + 16))
      {
        case 0x297B:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C008;
          break;
        case 0x297C:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C044;
          break;
        case 0x297D:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C080;
          break;
        case 0x297E:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C0BC;
          break;
        case 0x297F:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C2D8;
          break;
        case 0x2980:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C314;
          break;
        case 0x2981:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642BE28;
          break;
        case 0x2982:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642BE64;
          break;
        case 0x2983:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642BEA0;
          break;
        case 0x2984:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642BEDC;
          break;
        case 0x2985:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C1E8;
          break;
        case 0x2986:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C224;
          break;
        case 0x2987:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C260;
          break;
        case 0x2988:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C29C;
          break;
        default:
          v9 = a3 - 2;
          v10 = (unsigned int *)&unk_1C642C738;
          break;
      }
    }
  }
LABEL_20:
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(a6 + 8) + 48 * v10[v9];
  result = llvm::MachineOperand::setReg(*(_QWORD *)(v7 + 32), a4);
  **(_DWORD **)(v7 + 32) &= 0xFFF000FF;
  *(_QWORD *)(*(_QWORD *)(v7 + 32) + 48) = a5;
  return result;
}

void sub_1C6133B30(llvm::GPUIterateCombiner *a1)
{
  llvm::GPUIterateCombiner::~GPUIterateCombiner(a1);
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C6133B58(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = &off_1E7F980D8;
  result = *(double *)(a2 + 16);
  *(double *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1C6133B70(uint64_t a1, uint64_t *a2)
{
  sub_1C6133C1C(a2, (uint64_t)"VertexInputRegCount", (_DWORD *)(a1 + 8), 0);
  return sub_1C6133C1C(a2, (uint64_t)"SampleScratchReg", (_DWORD *)(a1 + 12), 0);
}

double sub_1C6133BD0(uint64_t a1, uint64_t a2)
{
  double result;

  result = *(double *)(a2 + 8);
  *(double *)(a1 + 16) = result;
  return result;
}

void sub_1C6133BE0(uint64_t a1)
{
  sub_1C6133CA4(a1);
}

void sub_1C6133BEC()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6133C08()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6133C1C(uint64_t *a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_1C4832A78(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

void sub_1C6133CA4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E7F98100;
  llvm::deallocate_buffer(*(llvm **)(a1 + 24), (void *)(16 * *(unsigned int *)(a1 + 40)));
}

void sub_1C6133CD4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  llvm::MachineFunctionInfo *v12;

  llvm::MachineFunctionInfo::~MachineFunctionInfo(v12);
}

uint64_t sub_1C6133CE4()
{
  return 0;
}

void sub_1C6133CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a4 = 500;
  *(_DWORD *)(a4 + 12) = 500;
  *(_BYTE *)(a4 + 40) = 1;
  *(_BYTE *)(a4 + 42) = 0;
  sub_1C5EAA198(a2, a3, (_DWORD *)a4, 5000, 64, 1, 0, *(unsigned __int8 *)(*(_QWORD *)(a1 + 24) + 280));
}

uint64_t sub_1C6133D2C(uint64_t a1)
{
  if (*(_BYTE *)(*(_QWORD *)(a1 + 24) + 280))
    return 512;
  else
    return 128;
}

uint64_t sub_1C6133D48(uint64_t a1, llvm::Type **a2)
{
  uint64_t result;
  uint64_t v4;
  int v5;
  BOOL v6;

  if ((*((_DWORD *)*a2 + 2) & 0xFE) == 0x12 && llvm::Type::getScalarSizeInBits(*a2) < 0x10)
    return 0;
  v4 = (uint64_t)*(a2 - 4);
  v5 = *(_DWORD *)(*(_QWORD *)v4 + 8);
  if ((v5 & 0xFE) == 0x12)
    v5 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v4 + 16) + 8);
  if ((v5 & 0xFFFFFF00) != 0x4000)
    return 1;
  v6 = sub_1C5E9DE14(v4, 0);
  result = 0;
  if (!v6)
    return 1;
  return result;
}

BOOL sub_1C6133DD4(uint64_t a1, uint64_t a2)
{
  llvm::Type *v2;

  v2 = **(llvm::Type ***)(a2 - 64);
  return (*((_DWORD *)v2 + 2) & 0xFE) != 0x12 || llvm::Type::getScalarSizeInBits(v2) >= 0x10;
}

unint64_t sub_1C6133E14(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v8;
  uint64_t v10;
  unsigned int v11;

  sub_1C4832EA4((llvm::APInt *)&v10, *(_DWORD *)(a2 + 32), -1, 1);
  v8 = sub_1C6133EB0(a1, a2, (uint64_t)&v10, a3, a4);
  if (v11 >= 0x41 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  return v8;
}

unint64_t sub_1C6133EB0(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  int v5;
  unsigned int v11;
  unint64_t v12;
  _QWORD *v13;
  llvm::EVT **v14;
  llvm::EVT **v15;
  uint64_t v17;

  v5 = *(_DWORD *)(a2 + 32);
  if (v5 < 1)
    return 0;
  v11 = 0;
  v12 = 0;
  do
  {
    if (*(_DWORD *)(a3 + 8) >= 0x41u)
      v13 = (_QWORD *)(*(_QWORD *)a3 + 8 * (v11 >> 6));
    else
      v13 = (_QWORD *)a3;
    if (((*v13 >> v11) & 1) != 0)
    {
      if (a4)
      {
        v14 = (llvm::EVT **)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
          v14 = **(llvm::EVT ****)(a2 + 16);
        llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v14, (uint64_t)&v17);
        if (__OFADD__(v12, v17))
          v12 = ((uint64_t)(v12 + v17) >> 63) ^ 0x8000000000000000;
        else
          v12 += v17;
      }
      if (a5)
      {
        v15 = (llvm::EVT **)a2;
        if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
          v15 = **(llvm::EVT ****)(a2 + 16);
        llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v15, (uint64_t)&v17);
        if (__OFADD__(v12, v17))
          v12 = ((uint64_t)(v12 + v17) >> 63) ^ 0x8000000000000000;
        else
          v12 += v17;
      }
    }
    ++v11;
  }
  while (v5 != v11);
  return v12;
}

_QWORD *sub_1C6134000()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF709);
  *result = &off_1E7F98128;
  return result;
}

_QWORD *sub_1C6134040()
{
  uint64_t v0;
  _QWORD *result;
  char v2;

  v0 = operator new();
  v2 = 0;
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&v2);
  *result = &off_1E7F981E8;
  return result;
}

uint64_t sub_1C6134088(uint64_t a1, int a2, int a3)
{
  return word_1C643E8DC[427 * byte_1C643E730[a2 - 1] + a3 - 1];
}

uint64_t sub_1C61340B4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = byte_1C6445046[a2 - 1];
  v4 = qword_1C64589E0[2 * v3];
  if (!v4)
    return 0;
  result = 0;
  v6 = &qword_1C64589E0[2 * v3 + 2];
  do
  {
    v7 = v4 & a3;
    v8 = __ROR8__(v7, -*((_BYTE *)v6 - 8));
    if (*((_BYTE *)v6 - 8))
      v7 = v8;
    result |= v7;
    v9 = *v6;
    v6 += 2;
    v4 = v9;
  }
  while (v9);
  return result;
}

uint64_t sub_1C6134114(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = byte_1C6445046[a2 - 1];
  if (!qword_1C64589E0[2 * v3])
    return 0;
  result = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * a2) & a3;
  v7 = &qword_1C64589E0[2 * v3 + 2];
  do
  {
    v8 = __ROR8__(v6, *((_BYTE *)v7 - 8));
    if (*((_BYTE *)v7 - 8))
      v9 = v8;
    else
      v9 = v6;
    result |= v9;
    v10 = *v7;
    v7 += 2;
  }
  while (v10);
  return result;
}

uint64_t sub_1C613417C(uint64_t a1, uint64_t a2, int a3)
{
  char *v3;

  if (a3)
  {
    v3 = (char *)&unk_1C64451F1 + 427 * *(unsigned __int16 *)(*(_QWORD *)a2 + 24);
    if (v3[a3 - 1])
      return *(_QWORD *)(*(_QWORD *)(a1 + 240) + 8 * (v3[a3 - 1] - 1));
    else
      return 0;
  }
  return a2;
}

char *sub_1C61341C0(uint64_t a1, uint64_t a2)
{
  return (char *)&unk_1C6456880 + 8 * *(unsigned __int16 *)(*(_QWORD *)a2 + 24);
}

uint64_t sub_1C61341D8(uint64_t a1, int a2)
{
  return byte_1C6456DB8[a2];
}

uint64_t sub_1C61341E8()
{
  return 9;
}

char *sub_1C61341F0(uint64_t a1, int a2)
{
  return off_1E7F9B408[a2];
}

uint64_t sub_1C6134200(uint64_t a1, uint64_t a2, int a3)
{
  return word_1C64573BA[a3];
}

char *sub_1C6134210(uint64_t a1, uint64_t a2)
{
  return (char *)&unk_1C6457474 + 4 * byte_1C64573CC[*(unsigned __int16 *)(*(_QWORD *)a2 + 24)];
}

char *sub_1C6134234(uint64_t a1, int a2)
{
  return (char *)&unk_1C6457474 + 4 * byte_1C64574F4[a2];
}

double sub_1C6134250(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = llvm::TargetRegisterInfo::TargetRegisterInfo(a1, (uint64_t)&off_1E7F9B450, (uint64_t)off_1E7F9B468, (uint64_t)off_1E7F9B9A0, (uint64_t)off_1E7F9B9A0, (uint64_t)&unk_1C6457AF8, -1, (uint64_t)&unk_1E7F9C700, 0);
  *(_QWORD *)v1 = off_1E7F9D6B8;
  *(_QWORD *)(v1 + 8) = "P";
  *(_QWORD *)(v1 + 16) = 20571;
  *(_DWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &off_1E7FB4148;
  *(_QWORD *)(v1 + 64) = &unk_1C67D0148;
  *(_QWORD *)(v1 + 72) = "VI85_VI86_VI87_VI88_VI89_VI90_VI91_VI92_VI93_VI94_VI95_VI96_VI97_VI98_VI99_VI100";
  *(_QWORD *)(v1 + 48) = &unk_1C686D310;
  *(_QWORD *)(v1 + 56) = &unk_1C67A0440;
  *(_QWORD *)(v1 + 40) = 0x601000000A7;
  *(_QWORD *)(v1 + 80) = "GPR32tup10";
  *(_QWORD *)(v1 + 88) = &unk_1C67D0C88;
  *(_DWORD *)(v1 + 104) = 428;
  *(_QWORD *)(v1 + 96) = &unk_1C67D28C8;
  *(_QWORD *)(v1 + 112) = &unk_1C68DACA8;
  *(_QWORD *)(v1 + 152) = &unk_1C68D2C68;
  *(_QWORD *)(v1 + 160) = &unk_1C68D2C74;
  *(_QWORD *)(v1 + 136) = &unk_1C68D2C80;
  *(_QWORD *)(v1 + 144) = &unk_1C68D6C94;
  *(_QWORD *)&result = 0x80200000802;
  *(_OWORD *)(v1 + 120) = xmmword_1C642C7A0;
  return result;
}

uint64_t sub_1C613436C()
{
  return 0;
}

uint64_t sub_1C6134378()
{
  return 0;
}

uint64_t sub_1C6134380()
{
  return 0;
}

uint64_t sub_1C6134388()
{
  return 0;
}

uint64_t sub_1C6134394(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _DWORD v9[4];
  char v10;
  uint64_t v11;
  unsigned __int16 v12;

  sub_1C6134250(a1);
  *(_QWORD *)v2 = &off_1E7F9D920;
  v3 = (_QWORD *)(v2 + 280);
  *(_QWORD *)(v2 + 280) = v2 + 296;
  *(_QWORD *)(v2 + 288) = 0x600000000;
  *(_DWORD *)(v2 + 344) = 0;
  sub_1C4833580((_DWORD *)(v2 + 280), *(_DWORD *)(v2 + 16), 0);
  v4 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(v4 + 32) |= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)&v5 = -1;
  *((_QWORD *)&v5 + 1) = -1;
  *(_OWORD *)(v4 + 40) = v5;
  *(_OWORD *)(v4 + 56) = v5;
  *(_OWORD *)(v4 + 72) = v5;
  v6 = *(_QWORD *)(v4 + 96) | 7;
  *(_QWORD *)(v4 + 88) = -1;
  *(_QWORD *)(v4 + 96) = v6;
  *(_QWORD *)(v4 + 160) |= 4uLL;
  sub_1C48385F4((uint64_t)v9, 0x502u, (_QWORD *)(a1 + 8), 1);
  while (v11)
  {
LABEL_2:
    *(_QWORD *)(*v3 + (((unint64_t)v12 >> 3) & 0x1FF8)) |= 1 << v12;
    while (1)
    {
      sub_1C48386F0((uint64_t)v9);
      if (v10 || v11 == 0)
        break;
      if (v9[0] != v12)
        goto LABEL_2;
    }
  }
  return a1;
}

BOOL sub_1C61344B4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8) != *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16);
}

BOOL sub_1C61344C8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8) != *(_QWORD *)(*(_QWORD *)(a2 + 56) + 16);
}

void *sub_1C61344DC()
{
  return &unk_1C64589D8;
}

uint64_t sub_1C61344F0()
{
  return 0;
}

uint64_t sub_1C61344F8()
{
  return 0;
}

uint64_t sub_1C6134504()
{
  return 1;
}

uint64_t sub_1C613450C()
{
  return 0;
}

uint64_t sub_1C6134514()
{
  return 0;
}

uint64_t sub_1C613451C()
{
  return 0;
}

uint64_t sub_1C613452C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C6134534()
{
  return 0;
}

uint64_t sub_1C613453C()
{
  return 0;
}

uint64_t sub_1C6134544()
{
  return 0;
}

uint64_t sub_1C613454C()
{
  return 1;
}

uint64_t sub_1C6134554()
{
  return 0;
}

uint64_t sub_1C613455C()
{
  return 0;
}

uint64_t sub_1C6134564()
{
  return 0;
}

uint64_t sub_1C613456C()
{
  return 1;
}

uint64_t sub_1C6134574()
{
  return 0;
}

uint64_t sub_1C613457C()
{
  return 0;
}

uint64_t sub_1C6134590()
{
  return 0;
}

uint64_t sub_1C6134598(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 24 * a2);
  v4 = v2 + v3;
  if (v2)
    strlen((const char *)(v2 + v3));
  return v4;
}

uint64_t sub_1C61345E8()
{
  return 1;
}

uint64_t sub_1C61345F0()
{
  return 1;
}

uint64_t sub_1C61345F8()
{
  return 0;
}

uint64_t sub_1C6134600()
{
  return 0;
}

void sub_1C6134608(llvm::TargetRegisterInfo *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E7F9D920;
  v2 = (char *)*((_QWORD *)this + 35);
  if (v2 != (char *)this + 296)
    free(v2);
  llvm::TargetRegisterInfo::~TargetRegisterInfo(this);
}

void sub_1C6134648(llvm::TargetRegisterInfo *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E7F9D920;
  v2 = (char *)*((_QWORD *)this + 35);
  if (v2 != (char *)this + 296)
    free(v2);
  llvm::TargetRegisterInfo::~TargetRegisterInfo(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C613469C()
{
  return 0;
}

uint64_t sub_1C61346A4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C61346AC()
{
  return 1;
}

uint64_t sub_1C61346B4()
{
  return 0;
}

uint64_t sub_1C61346BC()
{
  return 0;
}

uint64_t sub_1C61346C4()
{
  return 1;
}

uint64_t sub_1C61346CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  double v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28[4];
  __int16 v29;

  v2 = operator new();
  v3 = operator new();
  v4 = v3;
  *(_QWORD *)v3 = &off_1E7F9DC20;
  *(_OWORD *)(v3 + 8) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_QWORD *)(v3 + 64) = 0xFFFFFFFFLL;
  *(_BYTE *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 88) = 1;
  for (i = 96; i != 224; i += 16)
    *(_QWORD *)(v3 + i) = -4096;
  v28[0] = (uint64_t)"AvailableQ";
  v29 = 259;
  *(_DWORD *)(v3 + 224) = 1;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v3 + 232));
  *(_QWORD *)(v4 + 256) = 0;
  *(_QWORD *)(v4 + 264) = 0;
  *(_QWORD *)(v4 + 272) = 0;
  v28[0] = (uint64_t)"AvailableITRQ";
  v29 = 259;
  *(_DWORD *)(v4 + 280) = 2;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v4 + 288));
  *(_QWORD *)(v4 + 312) = 0;
  *(_QWORD *)(v4 + 320) = 0;
  *(_QWORD *)(v4 + 328) = 0;
  v28[0] = (uint64_t)"AvailableSMPQ";
  v29 = 259;
  *(_DWORD *)(v4 + 336) = 4;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v4 + 344));
  *(_QWORD *)(v4 + 368) = 0;
  *(_QWORD *)(v4 + 376) = 0;
  *(_QWORD *)(v4 + 384) = 0;
  v28[0] = (uint64_t)"AvailableLocalPixQ";
  v29 = 259;
  *(_DWORD *)(v4 + 392) = 8;
  llvm::Twine::str((llvm::Twine *)v28, (_QWORD *)(v4 + 400));
  v6 = 0;
  *(_QWORD *)(v4 + 456) = v4 + 488;
  *(_QWORD *)(v4 + 464) = v4 + 488;
  *(_QWORD *)(v4 + 472) = 8;
  *(_QWORD *)(v4 + 552) = v4 + 584;
  *(_QWORD *)(v4 + 560) = v4 + 584;
  *(_QWORD *)(v4 + 568) = 8;
  *(_QWORD *)(v4 + 424) = 0;
  *(_QWORD *)(v4 + 432) = 0;
  *(_QWORD *)(v4 + 440) = 0;
  *(_DWORD *)(v4 + 448) = 0;
  *(_DWORD *)(v4 + 480) = 0;
  *(_DWORD *)(v4 + 576) = 0;
  do
  {
    v7 = v4 + v6;
    *(_QWORD *)(v7 + 648) = v4 + v6 + 664;
    *(_QWORD *)(v7 + 656) = 0x800000000;
    v6 += 48;
  }
  while (v6 != 96);
  *(_DWORD *)(v4 + 744) = 0;
  *(_OWORD *)(v4 + 752) = 0u;
  *(_OWORD *)(v4 + 768) = 0u;
  *(_OWORD *)(v4 + 784) = 0u;
  *(_QWORD *)(v4 + 800) = v4 + 816;
  *(_QWORD *)(v4 + 808) = 0x1000000000;
  *(_QWORD *)(v4 + 880) = v4 + 896;
  *(_QWORD *)(v4 + 888) = 0x1000000000;
  *(_DWORD *)(v4 + 960) = 0;
  *(_WORD *)(v4 + 964) = 0;
  *(_DWORD *)(v4 + 968) = -2;
  *(_QWORD *)(v4 + 976) = v4 + 992;
  *(_QWORD *)(v4 + 984) = 0x600000000;
  *(_DWORD *)(v4 + 1040) = 0;
  *(_WORD *)(v4 + 1048) = 0;
  *(_OWORD *)(v4 + 1072) = 0u;
  *(_OWORD *)(v4 + 1088) = 0u;
  *(_DWORD *)(v4 + 1104) = 1065353216;
  *(_OWORD *)(v4 + 1112) = 0u;
  *(_OWORD *)(v4 + 1128) = 0u;
  *(_DWORD *)(v4 + 1144) = 1065353216;
  *(_QWORD *)(v4 + 1152) = 1;
  v8 = 1160;
  v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(v4 + v8) = v9;
    v8 += 24;
  }
  while (v8 != 1928);
  *(_OWORD *)(v4 + 1928) = xmmword_1C6463240;
  *(_QWORD *)(v4 + 1944) = 0;
  *(_BYTE *)(v4 + 1952) = 0;
  *(_QWORD *)(v4 + 1960) = v4 + 1976;
  *(_QWORD *)(v4 + 1968) = 0x600000000;
  *(_DWORD *)(v4 + 2024) = 0;
  *(_QWORD *)(v4 + 2052) = 0;
  *(_OWORD *)(v4 + 2032) = 0u;
  *(_BYTE *)(v4 + 2048) = 0;
  *(_OWORD *)(v4 + 2064) = 0u;
  *(_OWORD *)(v4 + 2080) = 0u;
  *(_OWORD *)(v4 + 2096) = 0u;
  *(_QWORD *)(v4 + 2112) = 0;
  *(_QWORD *)(v4 + 2120) = v4 + 2136;
  *(_QWORD *)(v4 + 2128) = 0x600000000;
  *(_DWORD *)(v4 + 2184) = 0;
  *(_DWORD *)(v4 + 2208) = 0;
  *(_OWORD *)(v4 + 2192) = 0u;
  *(_QWORD *)(v4 + 2232) = 0;
  *(_OWORD *)(v4 + 2216) = 0u;
  *(_QWORD *)(v4 + 2240) = v4 + 2256;
  *(_QWORD *)(v4 + 2248) = 0x600000000;
  *(_DWORD *)(v4 + 2304) = 0;
  *(_OWORD *)(v4 + 2312) = 0u;
  *(_OWORD *)(v4 + 2328) = 0u;
  *(_OWORD *)(v4 + 2344) = 0u;
  *(_OWORD *)(v4 + 2360) = 0u;
  *(_OWORD *)(v4 + 2376) = 0u;
  *(_OWORD *)(v4 + 2388) = 0u;
  *(_QWORD *)(v4 + 2424) = 0;
  *(_OWORD *)(v4 + 2408) = 0u;
  *(_QWORD *)(v4 + 2432) = 0x3F4000003F59999ALL;
  v28[0] = v4;
  v10 = sub_1C4838D9C((llvm::ScheduleDAGInstrs *)v2, a1, v28);
  v11 = v28[0];
  v28[0] = 0;
  if (v11)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v11 + 16))(v11, v10);
  *(_QWORD *)v2 = &off_1E7F9DB88;
  v12 = (_QWORD *)operator new();
  *v12 = &off_1E7F9DCB8;
  v27 = v12;
  v13 = *(_QWORD **)(v2 + 2664);
  if ((unint64_t)v13 >= *(_QWORD *)(v2 + 2672))
  {
    v19 = sub_1C483904C((char **)(v2 + 2656), (uint64_t *)&v27);
    v20 = (uint64_t)v27;
    *(_QWORD *)(v2 + 2664) = v19;
    v27 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  }
  else
  {
    *v13 = v12;
    *(_QWORD *)(v2 + 2664) = v13 + 1;
    v27 = 0;
  }
  v14 = (_QWORD *)operator new();
  *v14 = &off_1E7F9DCE8;
  v26 = v14;
  v15 = *(_QWORD **)(v2 + 2664);
  if ((unint64_t)v15 >= *(_QWORD *)(v2 + 2672))
  {
    v21 = sub_1C483904C((char **)(v2 + 2656), (uint64_t *)&v26);
    v22 = (uint64_t)v26;
    *(_QWORD *)(v2 + 2664) = v21;
    v26 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  }
  else
  {
    *v15 = v14;
    *(_QWORD *)(v2 + 2664) = v15 + 1;
    v26 = 0;
  }
  v16 = (_QWORD *)operator new();
  *v16 = &off_1E7F9DD18;
  v25 = v16;
  v17 = *(_QWORD **)(v2 + 2664);
  if ((unint64_t)v17 >= *(_QWORD *)(v2 + 2672))
  {
    v23 = sub_1C483904C((char **)(v2 + 2656), (uint64_t *)&v25);
    v24 = (uint64_t)v25;
    *(_QWORD *)(v2 + 2664) = v23;
    v25 = 0;
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
  }
  else
  {
    *v17 = v16;
    *(_QWORD *)(v2 + 2664) = v17 + 1;
  }
  return v2;
}

uint64_t sub_1C6134B6C()
{
  return 1;
}

_OWORD *sub_1C6134B74(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _OWORD *result;
  int v5;
  _OWORD *v6;
  int64x2_t v7;

  if (a2 <= 0x20)
  {
    *a1 = 1;
    goto LABEL_5;
  }
  *(_DWORD *)a1 &= ~1u;
  v3 = a2;
  result = operator new(24 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v3;
  v5 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v5 & 1) != 0)
  {
LABEL_5:
    result = a1 + 1;
    v6 = a1 + 97;
    goto LABEL_6;
  }
  v6 = (_OWORD *)((char *)result + 24 * v3);
LABEL_6:
  v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *result = v7;
    result = (_OWORD *)((char *)result + 24);
  }
  while (result != v6);
  return result;
}

_OWORD *sub_1C6134C04(_OWORD *result)
{
  int v1;
  unsigned int v2;
  char *v3;
  char *v4;
  unsigned int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = (char *)result + 8;
      v4 = (char *)result + 776;
    }
    else
    {
      v2 = *((_DWORD *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41)
        return sub_1C6134C80(result);
      if (!v2)
      {
        v5 = 0;
LABEL_11:
        *(_QWORD *)result = v5;
        return result;
      }
      v3 = (char *)*((_QWORD *)result + 1);
      v4 = &v3[24 * v2];
    }
    do
    {
      *(_QWORD *)v3 = -4096;
      *((_QWORD *)v3 + 1) = -4096;
      v3 += 24;
    }
    while (v3 != v4);
    v5 = *(_DWORD *)result & 1;
    goto LABEL_11;
  }
  return result;
}

_OWORD *sub_1C6134C80(_OWORD *result)
{
  _QWORD *v1;
  int v2;
  int v3;
  unsigned int v4;
  int64x2_t *v5;
  int64x2_t *v6;
  int64x2_t v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = 1 << (33 - __clz((*(_DWORD *)result >> 1) - 1));
  if (*(_DWORD *)result >= 2u)
    v4 = v3;
  else
    v4 = 0;
  if ((v2 & 1) != 0 && v4 < 0x21)
  {
    v5 = (int64x2_t *)((char *)result + 776);
    *(_QWORD *)result = 1;
    v6 = (int64x2_t *)((char *)result + 8);
    goto LABEL_7;
  }
  if ((v2 & 1) != 0)
    return sub_1C6134B74(v1, v4);
  if (v4 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](*((_QWORD *)result + 1), 8);
    return sub_1C6134B74(v1, v4);
  }
  *(_QWORD *)result = 0;
  if (!v4)
    return result;
  v6 = (int64x2_t *)*((_QWORD *)result + 1);
  v5 = (int64x2_t *)((char *)v6 + 24 * v4);
LABEL_7:
  v7 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *v6 = v7;
    v6 = (int64x2_t *)((char *)v6 + 24);
  }
  while (v6 != v5);
  return result;
}

uint64_t sub_1C6134D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v7 = 0;
  if ((sub_1C6134D9C(a1, a2, a3, &v7) & 1) != 0)
    return v7;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = a1 + 8;
    v6 = 32;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 16);
  }
  return v5 + 24 * v6;
}

uint64_t sub_1C6134D9C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 32;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      v12 = 0;
      result = 0;
      goto LABEL_11;
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v6 = ((a3 >> 4) ^ (a3 >> 9) | ((unint64_t)((a2 >> 4) ^ (a2 >> 9)) << 32))
     + ~((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
  v10 = v5 - 1;
  v11 = (v5 - 1) & v9;
  v12 = (_QWORD *)(v4 + 24 * v11);
  v13 = *v12;
  v14 = v12[1];
  if (*v12 == a2 && v14 == a3)
  {
    result = 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v13 != -4096 || v14 != -4096)
    {
      if (v16)
        v19 = 0;
      else
        v19 = v14 == -8192;
      if (v19 && v13 == -8192)
        v16 = v12;
      v21 = v11 + v17++;
      v11 = v21 & v10;
      v12 = (_QWORD *)(v4 + 24 * (v21 & v10));
      v13 = *v12;
      v14 = v12[1];
      if (*v12 == a2 && v14 == a3)
        goto LABEL_11;
    }
    result = 0;
    if (v16)
      v12 = v16;
  }
LABEL_11:
  *a4 = v12;
  return result;
}

uint64_t sub_1C6134EA4(uint64_t a1, uint64_t a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_1C6134D9C(a2, *a3, a3[1], &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 32;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(_DWORD *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 24 * v11;
  }
  else
  {
    result = (uint64_t)sub_1C6134F7C((_DWORD *)a2, a3, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = a3[1];
    *(_BYTE *)(result + 16) = *a4;
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 32;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(_DWORD *)(a2 + 16);
    }
    v13 = v14 + 24 * v15;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

_QWORD *sub_1C6134F7C(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 32;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_11;
  }
  if (v6 + ~v5 - a1[1] <= v6 >> 3)
  {
LABEL_11:
    sub_1C484073C((uint64_t)a1, v6);
    v8 = 0;
    sub_1C6134D9C((uint64_t)a1, *a2, a2[1], &v8);
    a3 = v8;
  }
  *a1 += 2;
  if (*a3 != -4096 || a3[1] != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C6135044(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;
  int64x2_t *v8;
  int64x2_t *v9;
  int64x2_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (int64x2_t *)(result + 8);
    v9 = (int64x2_t *)(result + 776);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_14;
    v8 = *(int64x2_t **)(result + 8);
    v9 = (int64x2_t *)((char *)v8 + 24 * v7);
  }
  v10 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *v8 = v10;
    v8 = (int64x2_t *)((char *)v8 + 24);
  }
  while (v8 != v9);
LABEL_14:
  while (a2 != a3)
  {
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v12 != -4096) && (v11 != -8192 || v12 != -8192))
    {
      v14 = 0;
      result = sub_1C6134D9C((uint64_t)v5, v11, v12, &v14);
      v13 = v14;
      *v14 = *(_QWORD *)a2;
      v13[1] = *(_QWORD *)(a2 + 8);
      *((_BYTE *)v13 + 16) = *(_BYTE *)(a2 + 16);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1C6135130(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFD)
    {
      v11 = 0;
      result = sub_1C4840A30((uint64_t)v5, a2, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1C61351F0(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    v6 = *(char **)a1;
    v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(_QWORD *)a1)
    {
      if (v4 == v6)
        v14 = 1;
      else
        v14 = (v4 - v6) >> 2;
      if (v14 >> 61)
        sub_1C4764EE4();
      v15 = (char *)operator new(8 * v14);
      v16 = &v15[8 * (v14 >> 2)];
      v18 = v4 - v5;
      v17 = v4 == v5;
      v4 = v16;
      if (!v17)
      {
        v4 = &v16[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = &v15[8 * (v14 >> 2)];
        do
        {
          v21 = *(_QWORD *)v5;
          v5 += 8;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = &v15[8 * v14];
      if (v6)
      {
        operator delete(v6);
        v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      v7 = (uint64_t)&v5[-*(_QWORD *)a1] >> 3;
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = -(v8 >> 1);
      v10 = v8 >> 1;
      v11 = &v5[-8 * v10];
      v12 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v10], *(const void **)(a1 + 8), v4 - v5);
        v4 = *(char **)(a1 + 8);
      }
      v13 = &v4[8 * v9];
      v4 = &v11[v12];
      *(_QWORD *)(a1 + 8) = v13;
      *(_QWORD *)(a1 + 16) = &v11[v12];
    }
  }
  *(_QWORD *)v4 = *a2;
  *(_QWORD *)(a1 + 16) += 8;
}

void sub_1C6135314(void **a1, _QWORD *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;

  v4 = a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - (_BYTE *)v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v15 = 1;
      else
        v15 = v14;
      if (v15 >> 61)
        sub_1C4764EE4();
      v16 = (char *)operator new(8 * v15);
      v5 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
      v17 = v5;
      v18 = v7 - (_BYTE *)v4;
      if (v7 != (_BYTE *)v4)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
        v21 = v4;
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *a1 = v16;
      a1[1] = v5;
      a1[2] = v17;
      a1[3] = &v16[8 * v15];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - (_BYTE *)v4)];
      if (v7 != (_BYTE *)v4)
      {
        memmove(&v11[-(v7 - (_BYTE *)v4)], v4, v7 - (_BYTE *)v4);
        v4 = a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

__int128 *sub_1C6135440(uint64_t a1, _DWORD *a2, size_t a3, _DWORD *a4, size_t a5, const void *a6, size_t a7, uint64_t a8)
{
  __int128 *result;
  uint64_t v10;

  result = llvm::MCSubtargetInfo::InitMCProcessorInfo(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 192);
  if ((v10 & 1) != 0)
    *(_BYTE *)(a1 + 295) = 1;
  if ((v10 & 2) != 0)
    *(_BYTE *)(a1 + 314) = 1;
  if ((v10 & 4) != 0)
    *(_BYTE *)(a1 + 297) = 1;
  if ((v10 & 8) != 0)
    *(_BYTE *)(a1 + 288) = 1;
  if ((v10 & 0x10) != 0)
    *(_BYTE *)(a1 + 283) = 1;
  if ((v10 & 0x20) != 0)
    *(_BYTE *)(a1 + 280) = 1;
  if ((v10 & 0x40) != 0)
    *(_BYTE *)(a1 + 281) = 1;
  if ((v10 & 0x80) != 0)
    *(_BYTE *)(a1 + 282) = 1;
  if ((v10 & 0x100) != 0)
    *(_BYTE *)(a1 + 315) = 1;
  if ((v10 & 0x200) != 0)
    *(_BYTE *)(a1 + 286) = 1;
  if ((v10 & 0x400) != 0)
    *(_BYTE *)(a1 + 310) = 1;
  if ((v10 & 0x800) != 0)
    *(_BYTE *)(a1 + 311) = 1;
  if ((v10 & 0x1000) != 0)
    *(_BYTE *)(a1 + 312) = 1;
  if ((v10 & 0x2000) != 0)
    *(_BYTE *)(a1 + 287) = 1;
  if ((v10 & 0x4000) != 0)
    *(_BYTE *)(a1 + 305) = 1;
  if ((v10 & 0x8000) != 0)
    *(_BYTE *)(a1 + 303) = 1;
  if ((v10 & 0x10000) != 0)
    *(_BYTE *)(a1 + 306) = 1;
  if ((v10 & 0x20000) != 0)
    *(_BYTE *)(a1 + 284) = 1;
  if ((v10 & 0x40000) != 0)
    *(_BYTE *)(a1 + 290) = 1;
  if ((v10 & 0x80000) != 0)
    *(_BYTE *)(a1 + 289) = 1;
  if ((v10 & 0x100000) != 0)
    *(_BYTE *)(a1 + 291) = 1;
  if ((v10 & 0x200000) != 0)
    *(_BYTE *)(a1 + 292) = 1;
  if ((v10 & 0x400000) != 0)
    *(_BYTE *)(a1 + 293) = 1;
  if ((v10 & 0x800000) != 0)
    *(_BYTE *)(a1 + 299) = 1;
  if ((v10 & 0x1000000) != 0)
    *(_BYTE *)(a1 + 300) = 1;
  if ((v10 & 0x2000000) != 0)
    *(_BYTE *)(a1 + 301) = 1;
  if ((v10 & 0x4000000) != 0)
    *(_BYTE *)(a1 + 294) = 1;
  if ((v10 & 0x8000000) != 0)
    *(_BYTE *)(a1 + 298) = 1;
  if ((v10 & 0x10000000) != 0)
    *(_BYTE *)(a1 + 302) = 1;
  if ((v10 & 0x20000000) != 0)
    *(_BYTE *)(a1 + 296) = 1;
  if ((v10 & 0x40000000) != 0)
    *(_BYTE *)(a1 + 307) = 1;
  if ((v10 & 0x80000000) != 0)
    *(_BYTE *)(a1 + 308) = 1;
  if ((v10 & 0x100000000) != 0)
    *(_BYTE *)(a1 + 309) = 1;
  if ((v10 & 0x200000000) != 0)
    *(_BYTE *)(a1 + 304) = 1;
  if ((v10 & 0x400000000) != 0)
    *(_BYTE *)(a1 + 285) = 1;
  return result;
}

uint64_t sub_1C6135690(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v5;

  if (a2 != 40 || (v4 = *(_DWORD *)(a4 + 28), v4 != 2) && v4 != 1)
    llvm::report_fatal_error((llvm *)"Expected a variant SchedClass", (const char *)1);
  v5 = *(_QWORD *)(a3 + 32);
  if (*(_BYTE *)v5
    || *(_BYTE *)(v5 + 32)
    || (*(_DWORD *)(v5 + 4) - 1) < 0x3FFFFFFF
    || (*(_DWORD *)(v5 + 36) - 1) <= 0x3FFFFFFE)
  {
    return 42;
  }
  else
  {
    return 41;
  }
}

uint64_t sub_1C6135714(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1C4B12EDC(a2, a3, a4, a5);
}

uint64_t sub_1C6135728(uint64_t a1, __int128 *a2, _WORD *a3, size_t a4, const void *a5, size_t a6, unsigned __int8 *a7)
{
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  size_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  _DWORD *v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v13 = llvm::TargetSubtargetInfo::TargetSubtargetInfo(a1, a2, a3, a4, a3, a4, a5, a6, (uint64_t)&off_1E80535A8, 35, (uint64_t)&off_1E8053EF8, 11, (uint64_t)&unk_1C6910574, (uint64_t)&unk_1C69105CC, (uint64_t)&unk_1C69105E4, 0, 0, 0);
  *v13 = &unk_1E7F9DD48;
  v14 = v13 + 32;
  std::string::__init((std::string *)(v13 + 32), (const std::string::value_type *)a3, a4);
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 304) = 1;
  *(_QWORD *)(a1 + 305) = 0;
  *(_WORD *)(a1 + 313) = 1;
  *(_BYTE *)(a1 + 315) = 0;
  *(_DWORD *)(a1 + 328) = 1;
  *(_WORD *)(a1 + 332) = 771;
  *(_DWORD *)(a1 + 336) = 0;
  *(_BYTE *)(a1 + 340) = 1;
  *(_QWORD *)(a1 + 320) = &unk_1E7F95400;
  *(_QWORD *)(a1 + 344) = a1;
  sub_1C612B710(a1 + 352);
  *(_QWORD *)(a1 + 800) = &off_1E7F9DF08;
  *(_QWORD *)(a1 + 808) = 0;
  v16 = *(char *)(a1 + 279);
  if (v16 < 0)
    v17 = *(_QWORD *)(a1 + 264);
  else
    v17 = *(unsigned __int8 *)(a1 + 279);
  if (!v17)
  {
    MEMORY[0x1CAA32ABC](v14, "g4");
    LOBYTE(v16) = *(_BYTE *)(a1 + 279);
  }
  if ((v16 & 0x80u) == 0)
    v18 = v14;
  else
    v18 = *(_DWORD **)(a1 + 256);
  if ((v16 & 0x80u) == 0)
    v19 = v16 & 0x7F;
  else
    v19 = *(_QWORD *)(a1 + 264);
  llvm::MCSubtargetInfo::InitMCProcessorInfo(a1, v18, v19, v18, v19, a5, a6, v15);
  v21 = *(_BYTE *)(a1 + 279);
  v22 = v21 < 0;
  if (v21 >= 0)
    v23 = v14;
  else
    v23 = *(_DWORD **)(a1 + 256);
  v24 = v21 & 0x7F;
  if (v22)
    v25 = *(_QWORD *)(a1 + 264);
  else
    v25 = v24;
  sub_1C6135440(a1, v23, v25, v23, v25, a5, a6, v20);
  if (a4 != 1)
  {
    if (!a4 || *a3 == 13415)
    {
      v26 = operator new();
      v27 = (_QWORD *)sub_1C612F040(v26, a7);
      v28 = (char *)&unk_1E7F96CE8;
    }
    else
    {
      if (*a3 != 13671)
      {
        if (*a3 == 14695)
        {
          v31 = operator new();
          *(_QWORD *)sub_1C612F040(v31, a7) = &unk_1E7F975D8;
          v32 = *(_QWORD *)(a1 + 808);
          *(_QWORD *)(a1 + 808) = v31;
          if (v32)
            (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
          *(_BYTE *)(a1 + 309) = 1;
        }
        return a1;
      }
      v26 = operator new();
      v27 = (_QWORD *)sub_1C612F040(v26, a7);
      v28 = (char *)&unk_1E7F975C8;
    }
    *v27 = v28 + 16;
    v29 = *(_QWORD *)(a1 + 808);
    *(_QWORD *)(a1 + 808) = v26;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  }
  return a1;
}

uint64_t sub_1C6135A0C()
{
  return 0;
}

uint64_t sub_1C6135A14(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(a1, 0);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return 0;
}

uint64_t sub_1C6135A3C()
{
  return 0;
}

uint64_t sub_1C6135A44()
{
  return 0;
}

uint64_t sub_1C6135A4C()
{
  return 0;
}

uint64_t sub_1C6135A54()
{
  return 0;
}

uint64_t sub_1C6135A5C()
{
  return 0;
}

uint64_t sub_1C6135A64()
{
  return 0;
}

uint64_t sub_1C6135A6C()
{
  return 0;
}

uint64_t sub_1C6135A74()
{
  return 0;
}

uint64_t sub_1C6135A7C()
{
  return 0;
}

uint64_t sub_1C6135A84()
{
  return 0;
}

uint64_t sub_1C6135A8C()
{
  return 0;
}

uint64_t sub_1C6135A94()
{
  return 0;
}

uint64_t sub_1C6135A9C()
{
  return 0;
}

uint64_t sub_1C6135AA4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 208))(a1);
}

uint64_t sub_1C6135AB0()
{
  return 0;
}

uint64_t sub_1C6135AB8()
{
  return 1;
}

uint64_t sub_1C6135AC0()
{
  return 1;
}

uint64_t sub_1C6135AD4()
{
  return 1;
}

uint64_t sub_1C6135ADC()
{
  return 2;
}

uint64_t sub_1C6135AE4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 368))(a1);
}

uint64_t sub_1C6135AF0()
{
  return 0;
}

void sub_1C6135AF8(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1C6135B00()
{
  return 0;
}

uint64_t sub_1C6135B08()
{
  return 0;
}

void sub_1C6135B10()
{
  llvm::report_fatal_error((llvm *)"Not implemented for the (sub)target", (const char *)1);
}

void sub_1C6135B2C(uint64_t a1)
{
  sub_1C484240C(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6135B50(uint64_t a1)
{
  return a1 + 352;
}

uint64_t sub_1C6135B58(uint64_t a1)
{
  return a1 + 320;
}

uint64_t sub_1C6135B60(uint64_t a1)
{
  return *(_QWORD *)(a1 + 808);
}

uint64_t sub_1C6135B68(uint64_t a1)
{
  return a1 + 800;
}

uint64_t sub_1C6135B70(uint64_t a1)
{
  uint64_t v1;

  v1 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 1288))(v1);
}

uint64_t sub_1C6135B94()
{
  return 1;
}

uint64_t sub_1C6135B9C()
{
  return 0;
}

uint64_t sub_1C6135BA4()
{
  return 1;
}

uint64_t sub_1C6135BAC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 304);
}

void sub_1C6135BB8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6135BCC()
{
  return 0;
}

uint64_t sub_1C6135BD8()
{
  return 0;
}

uint64_t sub_1C6135BE4()
{
  return 0;
}

double sub_1C6135BF0@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1C6135BFC@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1C6135C08@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1C6135C14@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1C6135C20@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1C6135C2C@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1C6135C38()
{
  return 0;
}

uint64_t sub_1C6135C44()
{
  return 0;
}

void LLVMInitializeAGX1Target()
{
  uint64_t v1;

  qword_1ED82C368 = (uint64_t)sub_1C6136CD8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v1 = qword_1ED830BC0[0];
  sub_1C627DA28((llvm *)qword_1ED830BC0[0]);
  sub_1C6125690(v1);
}

uint64_t sub_1C6135CBC(uint64_t a1, uint64_t a2, __int128 *a3, _WORD *a4, size_t a5, void *a6, size_t a7, __int128 *a8, uint64_t a9, uint64_t a10, int a11)
{
  llvm::TargetLoweringObjectFileMachO *v18;
  _BYTE v20[312];

  sub_1C4843154((uint64_t)v20, a8);
  sub_1C48424CC((_DWORD *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, (uint64_t)v20, a9, a10, a11);
  sub_1C48433E8((uint64_t)v20);
  *(_QWORD *)a1 = &off_1E7F9DF80;
  v18 = (llvm::TargetLoweringObjectFileMachO *)operator new();
  *(_QWORD *)(a1 + 1320) = llvm::TargetLoweringObjectFileMachO::TargetLoweringObjectFileMachO(v18);
  sub_1C6135728(a1 + 1328, a3, a4, a5, a6, a7, (unsigned __int8 *)a1);
  *(_OWORD *)(a1 + 2144) = 0u;
  *(_QWORD *)(a1 + 2160) = 0x1000000000;
  *(_BYTE *)(a1 + 592) |= 1u;
  llvm::LLVMTargetMachine::initAsmInfo((llvm::LLVMTargetMachine *)a1);
  return a1;
}

unint64_t sub_1C6135DD4(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  result = sub_1C484358C(a2, 48, 3);
  *(_DWORD *)(result + 8) = -1;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)result = off_1E7F98100;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 40) = 0;
  return result;
}

BOOL sub_1C6135E1C(uint64_t a1, unsigned int a2)
{
  return a2 < 4 || a2 == 64;
}

void sub_1C6135E34(uint64_t a1, uint64_t a2)
{
  if (byte_1ED7EB240)
    sub_1C6124F6C(a2);
  else
    sub_1C61346CC(a2);
}

_QWORD *sub_1C6135E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t DataLayout;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;

  DataLayout = llvm::Module::getDataLayout(*(llvm::Module **)(a2 + 40));
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 120))(v7);
  result = (_QWORD *)operator new();
  *result = &off_1E7F9E3A8;
  result[1] = &off_1E7F9E350;
  result[2] = DataLayout;
  result[3] = a1;
  result[4] = v7;
  result[5] = v8;
  *a3 = result;
  return result;
}

llvm::TargetPassConfig *sub_1C6135EF0(llvm::LLVMTargetMachine *a1, llvm::legacy::PassManagerBase *a2)
{
  llvm::TargetPassConfig *v4;
  llvm::TargetPassConfig *v5;

  v4 = (llvm::TargetPassConfig *)operator new();
  v5 = llvm::TargetPassConfig::TargetPassConfig(v4, a1, a2);
  *(_QWORD *)v5 = &off_1E7F9E070;
  llvm::TargetPassConfig::substitutePass((uint64_t)v5, (uint64_t)&llvm::LiveVariables::ID, 0, 0);
  llvm::TargetPassConfig::substitutePass((uint64_t)v4, (uint64_t)&unk_1EF8F7011, 0, 0);
  llvm::TargetPassConfig::substitutePass((uint64_t)v4, (uint64_t)&unk_1EF8F6F51, 0, 0);
  return v4;
}

uint64_t sub_1C6135F94(llvm::TargetPassConfig *a1)
{
  uint64_t v2;
  uint64_t OptLevel;
  llvm::Pass *v4;

  v2 = *((_QWORD *)a1 + 14);
  OptLevel = llvm::TargetPassConfig::getOptLevel(a1);
  v4 = (llvm::Pass *)sub_1C612E104(v2, OptLevel);
  llvm::TargetPassConfig::addPass(a1, v4);
  return 0;
}

void sub_1C6135FD4(uint64_t a1)
{
  char *v2;
  llvm::Pass *UnifyFunctionExitNodesPass;
  llvm::Pass *CodeGenPreparePass;
  llvm::Pass *v5;
  llvm::Pass *v6;
  llvm::Pass *CFGSimplificationPass;
  llvm *v8;
  uint64_t (**v9)(void);
  llvm::Pass *LowerSwitchPass;
  llvm::Pass *v11;
  llvm *v12;
  llvm::Pass *LoadStoreVectorizerPass;
  llvm::Pass *v14;
  llvm::Pass *v15;
  llvm *v16;
  llvm::Pass *LoopSimplifyPass;
  llvm::Pass *v18;
  void (**v19)(void);
  _QWORD *v20;
  void (**v21)(void);
  llvm::Pass *v22;
  void (**v23)(void);
  void (**v24)(void);
  void (**v25)(void);
  void (**v26)(void);
  void (**v27)(void);
  llvm::Pass *VerifierPass;
  llvm::Pass *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  _QWORD v38[3];
  _QWORD *v39;
  _QWORD v40[3];
  _QWORD *v41;
  _QWORD v42[3];
  _QWORD *v43;
  _QWORD v44[3];
  _QWORD *v45;
  _QWORD v46[3];
  _QWORD *v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  llvm *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v2 = *(char **)(a1 + 112);
  UnifyFunctionExitNodesPass = llvm::createUnifyFunctionExitNodesPass((llvm *)a1);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, UnifyFunctionExitNodesPass);
  CodeGenPreparePass = (llvm::Pass *)llvm::createCodeGenPreparePass((llvm *)1);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, CodeGenPreparePass);
  v5 = (llvm::Pass *)sub_1C627DD50(*(_QWORD *)(a1 + 112));
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v5);
  if (!byte_1ED7EB0C0)
  {
    v6 = (llvm::Pass *)sub_1C627D95C();
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v6);
  }
  v30 = 1;
  v31 = 0x101000100010001;
  v32 = 0;
  v33 = 0;
  v51 = 0;
  CFGSimplificationPass = (llvm::Pass *)llvm::createCFGSimplificationPass((uint64_t)&v30, v50);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, CFGSimplificationPass);
  v8 = v51;
  if (v51 == (llvm *)v50)
  {
    v9 = (uint64_t (**)(void))(v50[0] + 32);
  }
  else
  {
    if (!v51)
      goto LABEL_7;
    v9 = (uint64_t (**)(void))(*(_QWORD *)v51 + 40);
  }
  v8 = (llvm *)(*v9)();
LABEL_7:
  LowerSwitchPass = (llvm::Pass *)llvm::createLowerSwitchPass(v8);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, LowerSwitchPass);
  v11 = (llvm::Pass *)sub_1C6125648();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v11);
  LoadStoreVectorizerPass = (llvm::Pass *)llvm::createLoadStoreVectorizerPass(v12);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, LoadStoreVectorizerPass);
  v14 = (llvm::Pass *)sub_1C627E3D8(1);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v14);
  v15 = (llvm::Pass *)sub_1C61255F0(v2[1608]);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v15);
  LoopSimplifyPass = (llvm::Pass *)llvm::createLoopSimplifyPass(v16);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, LoopSimplifyPass);
  if (v2[1643])
  {
    v49 = 0;
    v47 = 0;
    v18 = (llvm::Pass *)sub_1C627B90C(v48, v46);
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v18);
    if (v47 == v46)
    {
      v19 = (void (**)(void))(v46[0] + 32);
    }
    else
    {
      if (!v47)
        goto LABEL_12;
      v19 = (void (**)(void))(*v47 + 40);
    }
    (*v19)();
LABEL_12:
    v20 = v49;
    if (v49 == v48)
    {
      v21 = (void (**)(void))(v48[0] + 32);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  v45 = 0;
  v29 = (llvm::Pass *)sub_1C627DBF4(v44);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v29);
  v20 = v45;
  if (v45 == v44)
  {
    v21 = (void (**)(void))(v44[0] + 32);
    goto LABEL_15;
  }
LABEL_13:
  if (!v20)
    goto LABEL_16;
  v21 = (void (**)(void))(*v20 + 40);
LABEL_15:
  (*v21)();
LABEL_16:
  if (!v2[1642])
    goto LABEL_37;
  v42[0] = &off_1E7F9E890;
  v42[1] = v2 + 1328;
  v43 = v42;
  v40[0] = &off_1E7F9E890;
  v40[1] = v2 + 1328;
  v41 = v40;
  v38[0] = &off_1E7F9E890;
  v38[1] = v2 + 1328;
  v39 = v38;
  v37 = 0;
  v35 = 0;
  v22 = (llvm::Pass *)sub_1C6282A28(v42, v40, v38, v36, v34, 1, 0);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v22);
  if (v35 == v34)
  {
    v23 = (void (**)(void))(v34[0] + 32);
  }
  else
  {
    if (!v35)
      goto LABEL_21;
    v23 = (void (**)(void))(*v35 + 40);
  }
  (*v23)();
LABEL_21:
  if (v37 == v36)
  {
    v24 = (void (**)(void))(v36[0] + 32);
  }
  else
  {
    if (!v37)
      goto LABEL_25;
    v24 = (void (**)(void))(*v37 + 40);
  }
  (*v24)();
LABEL_25:
  if (v39 == v38)
  {
    v25 = (void (**)(void))(v38[0] + 32);
  }
  else
  {
    if (!v39)
      goto LABEL_29;
    v25 = (void (**)(void))(*v39 + 40);
  }
  (*v25)();
LABEL_29:
  if (v41 == v40)
  {
    v26 = (void (**)(void))(v40[0] + 32);
  }
  else
  {
    if (!v41)
      goto LABEL_33;
    v26 = (void (**)(void))(*v41 + 40);
  }
  (*v26)();
LABEL_33:
  if (v43 == v42)
  {
    v27 = (void (**)(void))(v42[0] + 32);
  }
  else
  {
    if (!v43)
      goto LABEL_37;
    v27 = (void (**)(void))(*v43 + 40);
  }
  (*v27)();
LABEL_37:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  if (!*(_BYTE *)(a1 + 129))
  {
    VerifierPass = (llvm::Pass *)llvm::createVerifierPass((llvm *)1);
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, VerifierPass);
  }
}

uint64_t sub_1C61363BC(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  llvm::Pass *v3;

  v2 = (llvm::Pass *)sub_1C6134040();
  llvm::TargetPassConfig::addPass(a1, v2);
  v3 = (llvm::Pass *)sub_1C61390A0();
  llvm::TargetPassConfig::addPass(a1, v3);
  return 1;
}

uint64_t sub_1C61363FC(llvm::TargetPassConfig *a1)
{
  uint64_t (***v2)();
  llvm::Pass *GPUSampleSinkPass;

  v2 = sub_1C612A104();
  GPUSampleSinkPass = (llvm::Pass *)llvm::createGPUSampleSinkPass((uint64_t)v2, 0, 0, 0);
  llvm::TargetPassConfig::addPass(a1, GPUSampleSinkPass);
  return 0;
}

uint64_t sub_1C613643C(llvm::TargetPassConfig *a1)
{
  uint64_t (***v2)();
  llvm::Pass *GPUSampleSinkPass;

  v2 = sub_1C612A104();
  GPUSampleSinkPass = (llvm::Pass *)llvm::createGPUSampleSinkPass((uint64_t)v2, 0, 0, 0);
  llvm::TargetPassConfig::addPass(a1, GPUSampleSinkPass);
  return 0;
}

void sub_1C613647C(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;

  v2 = (llvm::Pass *)sub_1C6134000();
  llvm::TargetPassConfig::addPass(a1, v2);
}

uint64_t sub_1C61364A4()
{
  return 0;
}

void sub_1C61364B0(llvm::TargetPassConfig *a1)
{
  uint64_t v2;
  llvm::Pass *v3;
  uint64_t (***v4)();
  llvm::Pass *GPUCFGLoweringPass;
  uint64_t (***v6)();
  llvm::Pass *GPUWaitPlacementPass;
  llvm::Pass *v8;
  llvm::Pass *v9;
  llvm::Pass *v10;
  llvm *v11;
  const llvm::GPUConditionalizer *v12;

  v2 = *((_QWORD *)a1 + 14);
  if (*(_BYTE *)(v2 + 1624))
  {
    v3 = (llvm::Pass *)sub_1C6133038();
    llvm::TargetPassConfig::addPass(a1, v3);
  }
  if (*(_BYTE *)(v2 + 1643))
  {
    v4 = sub_1C612A104();
    GPUCFGLoweringPass = (llvm::Pass *)llvm::createGPUCFGLoweringPass((uint64_t)v4);
  }
  else
  {
    v11 = (llvm *)sub_1C6125A2C();
    llvm::createGPUConditionalFlattenerPass(v11, v12);
  }
  llvm::TargetPassConfig::addPass(a1, GPUCFGLoweringPass);
  v6 = sub_1C61390C8();
  GPUWaitPlacementPass = (llvm::Pass *)llvm::createGPUWaitPlacementPass((uint64_t)v6);
  llvm::TargetPassConfig::addPass(a1, GPUWaitPlacementPass);
  v8 = (llvm::Pass *)sub_1C61266E8();
  llvm::TargetPassConfig::addPass(a1, v8);
  sub_1C6138F10();
  llvm::TargetPassConfig::addPass(a1, v9);
  v10 = (llvm::Pass *)sub_1C6139234();
  llvm::TargetPassConfig::addPass(a1, v10);
}

void sub_1C6136550(llvm::TargetPassConfig *a1)
{
  llvm::Pass *FunctionGroupInfoWrapperPass;

  FunctionGroupInfoWrapperPass = (llvm::Pass *)llvm::createFunctionGroupInfoWrapperPass((llvm *)*(unsigned __int8 *)(*((_QWORD *)a1 + 14) + 1608));
  llvm::TargetPassConfig::addPass(a1, FunctionGroupInfoWrapperPass);
}

void sub_1C6136580(uint64_t a1)
{
  llvm *v2;
  llvm::Pass *TypeBasedAAWrapperPass;
  llvm *v4;
  llvm::Pass *ScopedNoAliasAAWrapperPass;
  llvm *v6;
  llvm::Pass *BasicAAWrapperPass;
  llvm *v8;
  llvm::Pass *GPUAAWrapperPass;
  llvm::Pass *VerifierPass;
  llvm::Pass *v11;
  llvm::Pass *v12;
  llvm::Pass *v13;
  void (**v14)(void);
  llvm::Pass *v15;
  llvm::Pass *v16;
  llvm::Pass *v17;
  void (**v18)(void);
  llvm::Pass *v19;
  _QWORD v20[3];
  _QWORD *v21;
  _QWORD v22[3];
  _QWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F7002, 0, 0);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F6EDD, 0, 0);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F6FB4, 0, 0);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F702A, 0, 0);
  v2 = (llvm *)llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F6EDA, 0, 0);
  TypeBasedAAWrapperPass = llvm::createTypeBasedAAWrapperPass(v2);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, TypeBasedAAWrapperPass);
  ScopedNoAliasAAWrapperPass = llvm::createScopedNoAliasAAWrapperPass(v4);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, ScopedNoAliasAAWrapperPass);
  BasicAAWrapperPass = llvm::createBasicAAWrapperPass(v6);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, BasicAAWrapperPass);
  GPUAAWrapperPass = llvm::createGPUAAWrapperPass(v8);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, GPUAAWrapperPass);
  if (!*(_BYTE *)(a1 + 129))
  {
    VerifierPass = (llvm::Pass *)llvm::createVerifierPass((llvm *)1);
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, VerifierPass);
  }
  v11 = (llvm::Pass *)sub_1C6283140();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v11);
  v12 = (llvm::Pass *)sub_1C627AAB8();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v12);
  v23 = 0;
  v13 = (llvm::Pass *)sub_1C627A944(v22, 0, 1);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v13);
  if (v23 == v22)
  {
    v14 = (void (**)(void))(v22[0] + 32);
  }
  else
  {
    if (!v23)
      goto LABEL_7;
    v14 = (void (**)(void))(*v23 + 40);
  }
  (*v14)();
LABEL_7:
  v15 = (llvm::Pass *)sub_1C627DE78(*(_BYTE *)(*(_QWORD *)(a1 + 112) + 1608));
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v15);
  v16 = (llvm::Pass *)sub_1C6283540();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v16);
  v21 = 0;
  v17 = (llvm::Pass *)sub_1C627DF14(v20, 0);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v17);
  if (v21 == v20)
  {
    v18 = (void (**)(void))(v20[0] + 32);
    goto LABEL_10;
  }
  if (v21)
  {
    v18 = (void (**)(void))(*v21 + 40);
LABEL_10:
    (*v18)();
  }
  v19 = (llvm::Pass *)sub_1C6282224(1, 0, 0);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v19);
}

_QWORD *sub_1C61367A8()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E7F980D8;
  result[1] = 0;
  return result;
}

double sub_1C61367E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  if (!v2)
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v2;
  }
  v4 = operator new();
  return sub_1C6133B58(v4, v2);
}

uint64_t sub_1C6136840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a3 + 96);
  v5 = *(_QWORD *)(v4 + 48);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v4 + 8) + 216))(*(_QWORD *)(v4 + 8), v4 + 128, *(_QWORD *)(a3 + 96));
    *(_QWORD *)(v4 + 48) = v5;
  }
  sub_1C6133BD0(v5, a2);
  return 0;
}

void sub_1C6136894(llvm::TargetPassConfig *a1)
{
  llvm::TargetPassConfig::~TargetPassConfig(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C61368BC()
{
  return 0;
}

uint64_t sub_1C61368C8()
{
  return 1;
}

uint64_t sub_1C61368D4()
{
  return 1;
}

uint64_t sub_1C61368E0()
{
  return 1;
}

uint64_t sub_1C61368EC()
{
  return 1;
}

uint64_t sub_1C61368F4()
{
  return 0;
}

uint64_t sub_1C61368FC()
{
  return 1;
}

uint64_t sub_1C6136904()
{
  return 0;
}

uint64_t sub_1C6136910()
{
  return 0;
}

uint64_t sub_1C6136918()
{
  return 0;
}

void sub_1C6136934(llvm::TargetMachine *a1)
{
  sub_1C6136A98(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6136958(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1320);
}

uint64_t sub_1C6136960()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1C6136974()
{
  return 0;
}

uint64_t sub_1C613697C()
{
  return 32;
}

void sub_1C6136984(llvm *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4[2];

  v4[0] = llvm::inconvertibleErrorCode(a1);
  v4[1] = v3;
  sub_1C48434E0("buildCodeGenPipeline is not overriden", v4, a2);
}

uint64_t sub_1C61369C8()
{
  return 1;
}

uint64_t sub_1C61369D0()
{
  return 0;
}

uint64_t sub_1C61369D8()
{
  return 0;
}

uint64_t sub_1C61369E0(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0xFF00000000) != 0)
    return a2;
  else
    return 1;
}

uint64_t sub_1C61369F4()
{
  return 0;
}

uint64_t sub_1C61369FC()
{
  return 0;
}

uint64_t sub_1C6136A04()
{
  return 0;
}

uint64_t sub_1C6136A0C()
{
  return 0;
}

uint64_t sub_1C6136A14()
{
  return 0;
}

uint64_t sub_1C6136A1C()
{
  return 0;
}

void sub_1C6136A24()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6136A38(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C6136A48(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C6136A58(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C6136A68(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C6136A78(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C6136A88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24));
}

void sub_1C6136A98(llvm::TargetMachine *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E7F9DF80;
  sub_1C6136AEC((uint64_t)a1 + 2144);
  sub_1C484240C((uint64_t)a1 + 1328);
  v2 = *((_QWORD *)a1 + 165);
  *((_QWORD *)a1 + 165) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::TargetMachine::~TargetMachine(a1);
}

uint64_t sub_1C6136AEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v5 != -8 && v5 != 0)
        {
          v7 = *(_QWORD *)(v5 + 8);
          *(_QWORD *)(v5 + 8) = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          MEMORY[0x1CAA32FB4](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1C6136B80(uint64_t a1, char *a2, _OWORD *a3, _BYTE **a4)
{
  uint64_t v8;
  size_t v9;
  _BYTE *v10;

  v8 = sub_1C47AD050(a1, 0, 0);
  *(_BYTE *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)v8 = &unk_1E819E898;
  *(_QWORD *)(v8 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v8 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v8 + 184) = v8 + 160;
  v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  *(_OWORD *)(a1 + 32) = *a3;
  v10 = *a4;
  *(_BYTE *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v10;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

BOOL sub_1C6136C50(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 9) && *(_BYTE *)(a1 + 9) && *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8);
}

void sub_1C6136C80()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6136C94()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7F9E8F8;
  return result;
}

void sub_1C6136CBC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7F9E8F8;
}

uint64_t sub_1C6136CD8(uint64_t a1, __int128 *a2, _WORD *a3, size_t a4, void *a5, size_t a6, __int128 *a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v17;
  __int128 v20[19];

  v17 = operator new();
  sub_1C4843154((uint64_t)v20, a7);
  sub_1C6135CBC(v17, a1, a2, a3, a4, a5, a6, v20, a8, a9, a10);
  sub_1C48433E8((uint64_t)v20);
  return v17;
}

llvm::cl::Option *sub_1C6136DA0(llvm::cl::Option *a1, char *a2, _OWORD *a3)
{
  uint64_t v6;
  size_t v7;

  v6 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_BYTE *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v6 + 144) = 0;
  *(_QWORD *)v6 = &unk_1E819E898;
  *(_QWORD *)(v6 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v6 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v6 + 184) = v6 + 160;
  v7 = strlen(a2);
  llvm::cl::Option::setArgStr((uint64_t)a1, (unsigned __int8 *)a2, v7);
  *((_OWORD *)a1 + 2) = *a3;
  llvm::cl::Option::addArgument(a1);
  return a1;
}

size_t **sub_1C6136E50(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  size_t **i;
  size_t *v8;
  size_t *v9;
  _QWORD *v11;
  size_t *v12;
  char *v13;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (size_t **)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == (size_t *)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == (size_t *)-8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  v11 = operator new(a3 + 17, (std::align_val_t)8uLL);
  v12 = v11;
  v13 = (char *)(v11 + 2);
  if (a3)
    memcpy(v11 + 2, a2, a3);
  v13[a3] = 0;
  *v12 = a3;
  v12[1] = 0;
  *i = v12;
  ++*(_DWORD *)(a1 + 12);
  for (i = (size_t **)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

void sub_1C6136F40(llvm::TargetTransformInfo::Concept *a1)
{
  llvm::TargetTransformInfo::Concept::~Concept(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6136F64(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1C6136F6C(uint64_t a1, uint64_t a2, llvm::Value *a3, llvm **a4, uint64_t a5)
{
  return sub_1C484388C((uint64_t *)(a1 + 16), a2, a3, a4, a5);
}

uint64_t sub_1C6136F74()
{
  return 1;
}

uint64_t sub_1C6136F7C()
{
  return 0;
}

uint64_t sub_1C6136F84()
{
  return 150;
}

uint64_t sub_1C6136F8C()
{
  return 4;
}

uint64_t sub_1C6136F98(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  return sub_1C4843E38(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), a2, a3, a4, a5);
}

uint64_t sub_1C6136FB8(uint64_t a1, llvm::ShuffleVectorInst *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1C48446A4((uint64_t *)(a1 + 16), a2, a3, a4, a5);
}

uint64_t sub_1C6136FC0()
{
  unsigned int v1;

  llvm::BranchProbability::BranchProbability(&v1, 0x63uLL, 0x64u);
  return v1;
}

uint64_t sub_1C6136FEC()
{
  return 0;
}

uint64_t sub_1C6136FF4()
{
  return 0;
}

uint64_t sub_1C6136FFC()
{
  return 0;
}

uint64_t sub_1C6137004()
{
  return 0;
}

uint64_t sub_1C613700C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1C6137014()
{
  return 0;
}

uint64_t sub_1C613701C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
}

BOOL sub_1C6137030(uint64_t a1, int a2)
{
  return a2 == 0;
}

uint64_t sub_1C613703C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
}

uint64_t sub_1C6137050(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
}

uint64_t sub_1C6137064()
{
  return 0;
}

uint64_t sub_1C613706C(uint64_t a1, uint64_t ***a2)
{
  return sub_1C4845148(a1 + 16, a2);
}

void sub_1C6137074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1C6133CEC(a1 + 8, a2, a3, a4);
}

void sub_1C613707C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a4 = 0;
  *(_WORD *)(a4 + 4) = 1;
  *(_BYTE *)(a4 + 6) = 1;
}

uint64_t sub_1C6137090()
{
  return 0;
}

uint64_t sub_1C6137098()
{
  return 0;
}

uint64_t sub_1C61370A0()
{
  return 0;
}

uint64_t sub_1C61370A8()
{
  return 0;
}

uint64_t sub_1C61370B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  size_t v6;
  void *v7;
  const void *v9;
  int v10;

  v5 = *(unsigned int *)(a4 + 8);
  v10 = v5;
  if (v5 > 0x40)
  {
    v6 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
    v7 = (void *)operator new[]();
    v9 = v7;
    memcpy(v7, *(const void **)a4, v6);
    sub_1C6138A10((uint64_t)&v9);
    MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  }
  else
  {
    v9 = *(const void **)a4;
    sub_1C6138A10((uint64_t)&v9);
  }
  return 0;
}

uint64_t sub_1C6137164(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  void (**v13)(void);
  void *v15;
  int v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned int *)(a4 + 8);
  v16 = v10;
  if (v10 > 0x40)
  {
    v11 = (void *)operator new[]();
    memcpy(v11, *(const void **)a4, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v11 = *(void **)a4;
  }
  v15 = v11;
  v12 = (_QWORD *)a8[3];
  if (v12)
  {
    if (v12 == a8)
    {
      v18 = v17;
      (*(void (**)(_QWORD *, _QWORD *))(*a8 + 24))(a8, v17);
    }
    else
    {
      v18 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
    }
  }
  else
  {
    v18 = 0;
  }
  sub_1C6138A98((uint64_t)&v15, v17);
  if (v18 == v17)
  {
    v13 = (void (**)(void))(v17[0] + 32);
    goto LABEL_9;
  }
  if (v18)
  {
    v13 = (void (**)(void))(*v18 + 40);
LABEL_9:
    (*v13)();
  }
  if (v10 >= 0x41 && v11)
    MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_1C61372CC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 1088))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1C61372DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 1080))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1C61372EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v9[0] = a3;
  v9[1] = a4;
  v10 = a5;
  v11 = a6;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 1064))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), v9, a2, a7, a8);
}

BOOL sub_1C613733C(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];
  _OWORD v7[2];

  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  return sub_1C6138BE0(a1 + 16, v7, v6);
}

uint64_t sub_1C6137374()
{
  return 1;
}

uint64_t sub_1C613737C()
{
  return 0;
}

uint64_t sub_1C6137384()
{
  return 0;
}

uint64_t sub_1C613738C()
{
  return 0;
}

uint64_t sub_1C6137394()
{
  return 2;
}

uint64_t sub_1C613739C()
{
  return 0;
}

uint64_t sub_1C61373A4()
{
  return 0;
}

BOOL sub_1C61373AC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1C4849330((uint64_t *)(a1 + 16), a2, a3);
}

BOOL sub_1C61373B8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1C4849330((uint64_t *)(a1 + 16), a2, a3);
}

uint64_t sub_1C61373C4()
{
  return 0;
}

uint64_t sub_1C61373CC()
{
  return 0;
}

uint64_t sub_1C61373D4()
{
  return 0;
}

uint64_t sub_1C61373DC()
{
  return 0;
}

uint64_t sub_1C61373E4()
{
  return 0;
}

uint64_t sub_1C61373EC()
{
  return 0;
}

uint64_t sub_1C61373F4()
{
  return 0;
}

uint64_t sub_1C61373FC()
{
  return 0;
}

uint64_t sub_1C6137404()
{
  return 0;
}

uint64_t sub_1C613740C()
{
  return 0;
}

uint64_t sub_1C6137414()
{
  return 1;
}

uint64_t sub_1C613741C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v8[0] = a3;
  v8[1] = a4;
  v9 = a5;
  v10 = a6;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 1072))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), v8, a2, a7);
}

uint64_t sub_1C6137468()
{
  return 0;
}

uint64_t sub_1C6137470(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 1144))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1C6137480(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 1176))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1C6137490(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 368))(*(_QWORD *)(a1 + 32));
}

BOOL sub_1C61374A0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;

  v3 = sub_1C47A7FD0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), a2, 0);
  return v3 && *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v3 + 96) != 0;
}

uint64_t sub_1C61374F4(uint64_t a1, llvm::EVT **a2)
{
  uint64_t v3;

  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 40), *(const llvm::DataLayout **)(a1 + 16), a2, (uint64_t)&v3);
  return v3;
}

uint64_t sub_1C6137528()
{
  return sub_1C6133CE4();
}

uint64_t sub_1C6137530()
{
  return 1;
}

unint64_t sub_1C6137538(uint64_t a1)
{
  return sub_1C48493AC(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
}

uint64_t sub_1C6137544()
{
  return 0;
}

unint64_t sub_1C613754C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return sub_1C6133EB0(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1C6137554(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t *a4)
{
  return sub_1C4848A1C(a1 + 8, a2, a3, a4);
}

uint64_t sub_1C613755C()
{
  return 0;
}

uint64_t sub_1C6137564()
{
  return 0;
}

double sub_1C613756C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(a1 + 16) = 0x800000000;
  *(_DWORD *)(a1 + 56) = 1;
  *(_BYTE *)(a1 + 60) = 0;
  return result;
}

uint64_t sub_1C6137594()
{
  return 0;
}

uint64_t sub_1C613759C()
{
  return 0;
}

uint64_t sub_1C61375A4()
{
  return 0;
}

uint64_t sub_1C61375AC()
{
  return 0;
}

uint64_t sub_1C61375B4(uint64_t a1, llvm::EVT *a2, llvm::LLVMContext *a3, uint64_t a4, unsigned __int8 a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v9 = a5;
  v10 = sub_1C4815B1C(a2, a3);
  return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 40) + 648))(*(_QWORD *)(a1 + 40), v10, v11, a4, v9, 0, a6);
}

uint64_t sub_1C613761C(uint64_t a1, unsigned int a2)
{
  return 2 * (a2 < 0x21);
}

BOOL sub_1C613762C(uint64_t a1, uint64_t a2)
{
  return sub_1C4849494(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_1C6137640()
{
  return 1;
}

uint64_t sub_1C6137648(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = sub_1C47A7FD0(v2, *(_QWORD *)(a1 + 16), a2, 0);
  if (v3 && (v3 == 1 || *(_QWORD *)(v2 + 8 * v3 + 96)) && (v4 = *(char *)(v2 + 390 * v3 + 3958), v4 <= 4))
    return qword_1C6463578[v4];
  else
    return 4;
}

uint64_t sub_1C61376C4()
{
  return 0;
}

uint64_t sub_1C61376D0()
{
  return 1;
}

uint64_t sub_1C61376DC()
{
  return 0;
}

uint64_t sub_1C61376E8()
{
  return 0;
}

uint64_t sub_1C61376F4()
{
  return 8;
}

uint64_t sub_1C61376FC(uint64_t a1, uint64_t a2)
{
  return a2;
}

const char *sub_1C6137704(uint64_t a1, int a2)
{
  const char *v2;

  v2 = "Generic::Unknown Register Class";
  if (a2 == 1)
    v2 = "Generic::VectorRC";
  if (a2)
    return v2;
  else
    return "Generic::ScalarRC";
}

uint64_t sub_1C6137730()
{
  return 32;
}

uint64_t sub_1C613773C()
{
  return 128;
}

uint64_t sub_1C6137744()
{
  return 0;
}

uint64_t sub_1C613774C()
{
  return 0;
}

uint64_t sub_1C6137754()
{
  return 0;
}

uint64_t sub_1C613775C(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
    return 0x100000000;
  else
    return 0;
}

uint64_t sub_1C613776C()
{
  return 0;
}

uint64_t sub_1C6137774(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t sub_1C6137780(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C6137790(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C61377A0(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  if ((result & 0xFF00000000) == 0)
    return 0;
  return result;
}

uint64_t sub_1C61377C8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C61377D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 88))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C61377E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C61377F8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C6137808()
{
  return 1;
}

void sub_1C6137810(uint64_t a1, int a2)
{
  sub_1C4845E1C(a1 + 8, a2);
}

void sub_1C613781C(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  sub_1C4846E20(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_1C6137828(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type ***a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  return sub_1C4846390(a1 + 8, a2, a3, a4, a5, a6, a7);
}

unint64_t sub_1C6137830(uint64_t a1, uint64_t a2, llvm::Type ***a3, uint64_t a4)
{
  return sub_1C6138C84(a1 + 8, a2, a3, a4);
}

uint64_t sub_1C6137838(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_1C4846B20(a1 + 8, a2, a3, a4, a6);
}

uint64_t sub_1C6137844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::TargetLoweringBase *v4;
  uint64_t v6;

  v4 = *(llvm::TargetLoweringBase **)(a1 + 40);
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
    a3 = **(_QWORD **)(a3 + 16);
  llvm::TargetLoweringBase::getTypeLegalizationCost(v4, *(const llvm::DataLayout **)(a1 + 16), (llvm::EVT **)a3, (uint64_t)&v6);
  return v6;
}

unint64_t sub_1C613788C(uint64_t a1, llvm::FixedVectorType *a2, int a3, llvm::Type *a4, llvm::APIntOps *a5)
{
  return sub_1C6137AE8(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1C6137894(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  if (a6)
    return 1;
  else
    return sub_1C4832C7C(a1 + 8, a2, a3, a4 | 0x100, a5, 0);
}

uint64_t sub_1C61378C8()
{
  return 1;
}

unint64_t sub_1C61378D4(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  return sub_1C6137F68(a1 + 8, a2, a3, a4, 1, 0, a6);
}

unint64_t sub_1C61378EC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned __int8 a6, int a7)
{
  return sub_1C6137F68(a1 + 8, a2, a3, a6, a5, 1, a7);
}

unint64_t sub_1C61378FC(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, unint64_t a6, unsigned __int8 a7, unsigned int a8, int a9, char a10, char a11)
{
  return sub_1C48494F4(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

unint64_t sub_1C6137920(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1C6137BE0(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1C6137928(uint64_t a1, llvm::FixedVectorType **a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1C6137BFC(a1 + 8, a2, a3, a5);
}

unint64_t sub_1C6137934(uint64_t a1, int a2, int a3, llvm::FixedVectorType *a4, uint64_t a5, uint64_t a6)
{
  return sub_1C6138D34(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t sub_1C613793C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C484559C(a1 + 8, a2, a3);
}

uint64_t sub_1C6137944()
{
  return 10;
}

uint64_t sub_1C6137950(uint64_t a1, llvm::EVT **a2)
{
  _DWORD v3[6];

  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 40), *(const llvm::DataLayout **)(a1 + 16), a2, (uint64_t)v3);
  if (v3[2])
    return 0;
  else
    return v3[0];
}

uint64_t sub_1C6137990()
{
  return 0;
}

uint64_t sub_1C613799C()
{
  return 0;
}

uint64_t sub_1C61379A8()
{
  return 0;
}

uint64_t sub_1C61379B0()
{
  return 0;
}

uint64_t sub_1C61379B8()
{
  return 0;
}

_QWORD *sub_1C61379C0(int a1, llvm::Type *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a8 & 0xFF00000000) != 0)
    return llvm::Type::getIntNTy(this, (llvm::LLVMContext *)(8 * a8));
  else
    return (_QWORD *)(*(_QWORD *)this + 1912);
}

void *sub_1C61379E4(int a1, uint64_t a2, llvm::Type *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  return sub_1C6138E7C(a1 + 16, a2, a3, a4, a5, a6, a7, a8, a9);
}

BOOL sub_1C61379F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4849AD0(a1 + 16, a2, a3);
}

BOOL sub_1C61379FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4849AD0(a1 + 16, a2, a3);
}

uint64_t sub_1C6137A04(uint64_t a1)
{
  return sub_1C6133D2C(a1 + 8);
}

uint64_t sub_1C6137A0C(uint64_t a1, llvm::Type **a2)
{
  return sub_1C6133D48(a1 + 8, a2);
}

BOOL sub_1C6137A14(uint64_t a1, uint64_t a2)
{
  return sub_1C6133DD4(a1 + 8, a2);
}

BOOL sub_1C6137A1C(uint64_t a1, unsigned int a2, char a3, int a4)
{
  return sub_1C4832BD0(a1 + 8, a2, a3, a4);
}

BOOL sub_1C6137A28(uint64_t a1, unsigned int a2, char a3, int a4)
{
  return sub_1C4832BD0(a1 + 8, a2, a3, a4);
}

uint64_t sub_1C6137A34()
{
  return 1;
}

uint64_t sub_1C6137A3C()
{
  return 1;
}

uint64_t sub_1C6137A44(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return sub_1C4832C10(a1 + 8, a2, a3, a4);
}

uint64_t sub_1C6137A4C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  return sub_1C4832C10(a1 + 8, a2, a3, a4);
}

uint64_t sub_1C6137A54()
{
  return 0;
}

uint64_t sub_1C6137A5C()
{
  return 0;
}

uint64_t sub_1C6137A64()
{
  return 1;
}

uint64_t sub_1C6137A6C()
{
  return 1;
}

uint64_t sub_1C6137A74()
{
  return 0;
}

uint64_t sub_1C6137A7C()
{
  return 0;
}

uint64_t sub_1C6137A84()
{
  return 0;
}

uint64_t sub_1C6137A8C(uint64_t a1, llvm::ShuffleVectorInst *a2)
{
  if (*((_BYTE *)a2 + 16) == 60)
    return 4;
  else
    return sub_1C484A384((uint64_t *)(a1 + 16), a2);
}

uint64_t sub_1C6137ABC()
{
  return 0x200000001;
}

uint64_t sub_1C6137AC8()
{
  return 0;
}

uint64_t sub_1C6137AD0()
{
  return 1;
}

uint64_t sub_1C6137AD8()
{
  return 1;
}

BOOL sub_1C6137AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4832E0C(a1 + 8, a2, a3);
}

unint64_t sub_1C6137AE8(uint64_t a1, llvm::FixedVectorType *this, int a3, llvm::Type *a4, llvm::APIntOps *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unsigned int v18;

  llvm::FixedVectorType::get(this, a4);
  v11 = v10;
  llvm::FixedVectorType::get(this, (llvm::Type *)((_DWORD)a4 * a3));
  v13 = v12;
  llvm::APIntOps::ScaleBitMask(a5, a4, (llvm::APInt *)&v17);
  v14 = sub_1C6133EB0(a1, v11, (uint64_t)&v17, 0, 1);
  v15 = sub_1C6133EB0(a1, v13, (uint64_t)a5, 1, 0);
  if (v18 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  if (__OFADD__(v14, v15))
    return ((uint64_t)(v14 + v15) >> 63) ^ 0x8000000000000000;
  else
    return v14 + v15;
}

unint64_t sub_1C6137BE0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a4 & 0xFF00000000) == 0 || (a4 & 1) != 0)
    return sub_1C613823C(a1, a2, (llvm::FixedVectorType **)a3, a5);
  else
    return sub_1C613816C(a1, a2, a3);
}

unint64_t sub_1C6137BFC(uint64_t a1, llvm::FixedVectorType **a2, uint64_t a3, int a4)
{
  uint64_t v4;
  llvm::Type *v5;
  unsigned int v7;
  llvm::FixedVectorType *v8;
  llvm::FixedVectorType *v9;
  llvm::Type *v10;
  int v11;
  const char *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  BOOL v24;
  int64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  unint64_t v35;
  llvm::TargetLoweringBase *v36;
  const llvm::DataLayout *v37;
  unint64_t v38;
  int64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v43;
  llvm::FixedVectorType *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char v52[16];
  unsigned __int8 v53[8];
  uint64_t v54;
  int v55;

  v4 = a3;
  v5 = (llvm::Type *)a2;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v7 = *(unsigned __int8 *)(*(_QWORD *)a2[2] + 8);
  else
    v7 = *((_DWORD *)a2 + 2);
  v8 = a2[3];
  v9 = *(llvm::FixedVectorType **)(a3 + 24);
  LODWORD(v10) = *((_DWORD *)a2 + 8);
  if (v7 >= 7)
    v11 = 53;
  else
    v11 = 54;
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), a2, (uint64_t)v52);
  if (v53[0] - 15 > 0x9B)
  {
    v13 = 1;
  }
  else
  {
    if (v53[0] - 120 <= 0x32)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v12);
    v13 = sub_1C47F381C(v53);
  }
  v14 = __clz(v10);
  if (v10 <= v13)
  {
    v48 = 0;
    v49 = 0;
    v15 = 0;
  }
  else
  {
    v43 = v14;
    v44 = v8;
    v15 = 0;
    v48 = 0;
    v49 = 0;
    v45 = v13;
    do
    {
      v10 = (llvm::Type *)(v10 >> 1);
      llvm::FixedVectorType::get(v44, v10);
      v17 = v16;
      llvm::FixedVectorType::get(v9, v10);
      v4 = v18;
      v19 = sub_1C6138808(a1, (uint64_t)v5, v17);
      v20 = v49 + v19;
      if (__OFADD__(v49, v19))
        v20 = ((uint64_t)(v49 + v19) >> 63) ^ 0x8000000000000000;
      v49 = v20;
      v21 = sub_1C4846B20(a1, v11, v17, v4, a4);
      v5 = (llvm::Type *)v17;
      v22 = sub_1C4846B20(a1, 57, v17, v4, a4);
      v23 = v21 + v22;
      if (__OFADD__(v21, v22))
        v23 = (v23 >> 63) ^ 0x8000000000000000;
      v24 = __OFADD__(v48, v23);
      v25 = v48 + v23;
      if (v24)
        v25 = (v25 >> 63) ^ 0x8000000000000000;
      v48 = v25;
      --v15;
    }
    while (v10 > v45);
    v14 = v43;
  }
  v26 = 0;
  v27 = v15 - v14 + 31;
  v28 = 1;
  if (v5 && *((_BYTE *)v5 + 8) == 18)
    v26 = sub_1C613870C(a1, (uint64_t)v5);
  v50 = v26;
  v51 = v28;
  v54 = v27;
  v55 = 0;
  sub_1C4848B64((uint64_t)&v54, (uint64_t)&v50);
  v46 = v54;
  v29 = sub_1C4846B20(a1, v11, (uint64_t)v5, v4, a4);
  v31 = v30;
  v32 = sub_1C4846B20(a1, 57, (uint64_t)v5, v4, a4);
  v33 = v31 & 0xFFFFFFFF00000000 | 1;
  if (v34 != 1)
    v33 = v31;
  v35 = v29 + v32;
  if (__OFADD__(v29, v32))
    v35 = ((v29 + v32) >> 63) ^ 0x8000000000000000;
  v50 = v35;
  v51 = v33;
  v54 = v27;
  v55 = 0;
  sub_1C4848B64((uint64_t)&v54, (uint64_t)&v50);
  v36 = *(llvm::TargetLoweringBase **)(a1 + 32);
  v37 = *(const llvm::DataLayout **)(a1 + 8);
  if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12)
    v5 = (llvm::Type *)**((_QWORD **)v5 + 2);
  v38 = v49 + v46;
  if (__OFADD__(v49, v46))
    v38 = ((v49 + v46) >> 63) ^ 0x8000000000000000;
  v39 = v48 + v54;
  if (__OFADD__(v48, v54))
    v39 = (v39 >> 63) ^ 0x8000000000000000;
  v24 = __OFADD__(v38, v39);
  v40 = v38 + v39;
  if (v24)
    v41 = (v40 >> 63) ^ 0x8000000000000000;
  else
    v41 = v40;
  llvm::TargetLoweringBase::getTypeLegalizationCost(v36, v37, (llvm::EVT **)v5, (uint64_t)&v54);
  if (__OFADD__(v41, v54))
    return ((uint64_t)(v41 + v54) >> 63) ^ 0x8000000000000000;
  else
    return v41 + v54;
}

unint64_t sub_1C6137F68(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, int a5, int a6, int a7)
{
  llvm::FixedVectorType *v13;
  uint64_t v14;
  llvm::EVT **v15;
  llvm::Type *v16;
  unint64_t v17;
  llvm::Type *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  llvm::Type *v23;
  unint64_t v24;
  llvm::Type *v25;
  uint64_t v26;
  llvm::EVT **v27;
  uint64_t v28;
  _BOOL8 v29;
  BOOL v30;
  uint64_t v31;
  llvm::Type *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v36;
  unint64_t v37;
  llvm::Type *v38;
  unint64_t v39;

  if (a6)
  {
    v13 = (llvm::FixedVectorType *)llvm::PointerType::get(*(llvm::PointerType **)(a3 + 24), 0);
    llvm::FixedVectorType::get(v13, (llvm::Type *)*(unsigned int *)(a3 + 32));
    v15 = (llvm::EVT **)v14;
    if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
      v15 = **(llvm::EVT ****)(v14 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v15, (uint64_t)&v38);
    v16 = v38;
    v17 = v39;
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  v18 = (llvm::Type *)*(unsigned int *)(a3 + 32);
  v19 = sub_1C4832C7C(a1, a2, *(_QWORD *)(a3 + 24), a4 | 0x100, 0, a7);
  v20 = v17 & 0xFFFFFFFF00000000 | 1;
  if (v21 != 1)
    v20 = v17;
  v22 = (unint64_t)v16 + v19;
  if (__OFADD__(v16, v19))
    v22 = ((uint64_t)((uint64_t)v16 + v19) >> 63) ^ 0x8000000000000000;
  v36 = v22;
  v37 = v20;
  v38 = v18;
  LODWORD(v39) = 0;
  sub_1C4848B64((uint64_t)&v38, (uint64_t)&v36);
  v23 = v38;
  v24 = sub_1C6133E14(a1, a3, a2 != 33, a2 == 33);
  if (a5)
  {
    v25 = (llvm::Type *)*(unsigned int *)(a3 + 32);
    llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(_QWORD **)a3 + 1888), v25);
    v27 = (llvm::EVT **)v26;
    if ((*(_DWORD *)(v26 + 8) & 0xFE) == 0x12)
      v27 = **(llvm::EVT ****)(v26 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v27, (uint64_t)&v38);
    v28 = (uint64_t)v38 + 1;
    if (__OFADD__(v38, 1))
      v28 = 0x7FFFFFFFFFFFFFFFLL;
    v29 = a7 == 0;
    v30 = __OFADD__(v28, v29);
    v31 = v28 + v29;
    if (v30)
      v31 = 0x7FFFFFFFFFFFFFFFLL;
    v36 = v31;
    v37 = v39;
    v38 = v25;
    LODWORD(v39) = 0;
    sub_1C4848B64((uint64_t)&v38, (uint64_t)&v36);
    v32 = v38;
  }
  else
  {
    v32 = 0;
  }
  v33 = (unint64_t)v23 + v24;
  if (__OFADD__(v23, v24))
    v33 = ((uint64_t)((uint64_t)v23 + v24) >> 63) ^ 0x8000000000000000;
  v30 = __OFADD__(v33, v32);
  v34 = (uint64_t)v32 + v33;
  if (v30)
    return (v34 >> 63) ^ 0x8000000000000000;
  else
    return v34;
}

unint64_t sub_1C613816C(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  int v12;

  if (*(_BYTE *)(a3 + 8) == 19)
    return 0;
  v7 = sub_1C6133E14(a1, a3, 0, 1);
  sub_1C4845E1C(a1, a2);
  v10[0] = v8;
  v10[1] = v9;
  v11 = *(unsigned int *)(a3 + 32);
  v12 = 0;
  sub_1C4848B64((uint64_t)v10, (uint64_t)&v11);
  if (__OFADD__(v7, v10[0]))
    return ((uint64_t)(v7 + v10[0]) >> 63) ^ 0x8000000000000000;
  else
    return v7 + v10[0];
}

unint64_t sub_1C613823C(uint64_t a1, int a2, llvm::FixedVectorType **a3, uint64_t a4)
{
  llvm::Type *v5;
  llvm::FixedVectorType *v7;
  llvm::Type *v8;
  BOOL v9;
  const char *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  llvm::Type *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  llvm::Type ***v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  llvm::FixedVectorType *v39;
  unsigned int v40;
  unint64_t v42;
  uint64_t v43;
  char v44[16];
  unsigned __int8 v45[8];
  uint64_t v46;
  int v47;

  v5 = (llvm::Type *)a3;
  v7 = a3[3];
  LODWORD(v8) = *((_DWORD *)a3 + 8);
  if ((a2 & 0xFFFFFFFE) == 0x1C
    && (v7 == (llvm::FixedVectorType *)(*(_QWORD *)*a3 + 1888) ? (v9 = v8 >= 2) : (v9 = 0), v9))
  {
    v34 = (llvm::Type ***)llvm::IntegerType::get(*a3, (llvm::LLVMContext *)*((unsigned int *)a3 + 8));
    v35 = sub_1C4846390(a1, 49, v34, (llvm::Type ***)v5, 0, a4, 0);
    sub_1C4774CC4(v34);
    v37 = sub_1C4846B20(a1, 53, (uint64_t)v34, v36, a4);
    v31 = __OFADD__(v35, v37);
    v32 = v35 + v37;
  }
  else
  {
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), a3, (uint64_t)v44);
    if (v45[0] - 15 > 0x9B)
    {
      v11 = 1;
    }
    else
    {
      if (v45[0] - 120 <= 0x32)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v10);
      v11 = sub_1C47F381C(v45);
    }
    v12 = __clz(v8);
    if (v8 <= v11)
    {
      v15 = 0;
      v14 = 0;
      v13 = 0;
    }
    else
    {
      v38 = v12;
      v39 = v7;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v40 = v11;
      do
      {
        v16 = a4;
        v17 = v5;
        v8 = (llvm::Type *)(v8 >> 1);
        llvm::FixedVectorType::get(v39, v8);
        v5 = (llvm::Type *)v18;
        v19 = (uint64_t)v17;
        a4 = v16;
        v20 = sub_1C6138808(a1, v19, v18);
        if (__OFADD__(v15, v20))
          v15 = ((uint64_t)(v15 + v20) >> 63) ^ 0x8000000000000000;
        else
          v15 += v20;
        sub_1C4845E1C(a1, a2);
        if (__OFADD__(v14, v21))
          v14 = ((uint64_t)(v14 + v21) >> 63) ^ 0x8000000000000000;
        else
          v14 += v21;
        --v13;
      }
      while (v8 > v40);
      v12 = v38;
    }
    v22 = 0;
    v23 = v13 - v12 + 31;
    v24 = 1;
    if (v5 && *((_BYTE *)v5 + 8) == 18)
      v22 = sub_1C613870C(a1, (uint64_t)v5);
    v42 = v22;
    v43 = v24;
    v46 = v23;
    v47 = 0;
    sub_1C4848B64((uint64_t)&v46, (uint64_t)&v42);
    if (__OFADD__(v15, v46))
      v25 = ((uint64_t)(v15 + v46) >> 63) ^ 0x8000000000000000;
    else
      v25 = v15 + v46;
    sub_1C4845E1C(a1, a2);
    v42 = v26;
    v43 = v27;
    v46 = v23;
    v47 = 0;
    sub_1C4848B64((uint64_t)&v46, (uint64_t)&v42);
    v28 = v14 + v46;
    if (__OFADD__(v14, v46))
      v28 = ((uint64_t)(v14 + v46) >> 63) ^ 0x8000000000000000;
    v31 = __OFADD__(v25, v28);
    v29 = v25 + v28;
    if (v31)
      v30 = (v29 >> 63) ^ 0x8000000000000000;
    else
      v30 = v29;
    if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12)
      v5 = (llvm::Type *)**((_QWORD **)v5 + 2);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), (llvm::EVT **)v5, (uint64_t)&v46);
    v31 = __OFADD__(v30, v46);
    v32 = v30 + v46;
  }
  if (v31)
    return (v32 >> 63) ^ 0x8000000000000000;
  else
    return v32;
}

unint64_t sub_1C6138580(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;

  v10 = sub_1C6133E14(a1, a2, 1, 0);
  if (a4)
    v11 = sub_1C4848A1C(a1, a3, a4, a5);
  else
    v11 = sub_1C6133E14(a1, a2, 0, 1);
  if (__OFADD__(v10, v11))
    return ((uint64_t)(v10 + v11) >> 63) ^ 0x8000000000000000;
  else
    return v10 + v11;
}

unint64_t sub_1C6138630(uint64_t a1, uint64_t a2)
{
  llvm::TargetLoweringBase *v4;
  llvm::EVT **v5;
  unint64_t v6;
  int v7;
  llvm::EVT **v8;
  unint64_t v10;

  v4 = *(llvm::TargetLoweringBase **)(a1 + 32);
  v5 = (llvm::EVT **)a2;
  if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
    v5 = **(llvm::EVT ****)(a2 + 16);
  llvm::TargetLoweringBase::getTypeLegalizationCost(v4, *(const llvm::DataLayout **)(a1 + 8), v5, (uint64_t)&v10);
  v6 = v10;
  v7 = *(_DWORD *)(a2 + 32);
  if (v7 >= 1)
  {
    do
    {
      v8 = (llvm::EVT **)a2;
      if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
        v8 = **(llvm::EVT ****)(a2 + 16);
      llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v8, (uint64_t)&v10);
      if (__OFADD__(v6, v10))
        v6 = ((uint64_t)(v6 + v10) >> 63) ^ 0x8000000000000000;
      else
        v6 += v10;
      --v7;
    }
    while (v7);
  }
  return v6;
}

unint64_t sub_1C613870C(uint64_t a1, uint64_t a2)
{
  int v2;
  unint64_t v5;
  llvm::EVT **v6;
  unint64_t v7;
  llvm::EVT **v8;
  uint64_t v10;

  v2 = *(_DWORD *)(a2 + 32);
  if (v2 < 1)
    return 0;
  v5 = 0;
  do
  {
    v6 = (llvm::EVT **)a2;
    if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
      v6 = **(llvm::EVT ****)(a2 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v6, (uint64_t)&v10);
    if (__OFADD__(v5, v10))
      v7 = ((uint64_t)(v5 + v10) >> 63) ^ 0x8000000000000000;
    else
      v7 = v5 + v10;
    v8 = (llvm::EVT **)a2;
    if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
      v8 = **(llvm::EVT ****)(a2 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v8, (uint64_t)&v10);
    if (__OFADD__(v7, v10))
      v5 = ((uint64_t)(v7 + v10) >> 63) ^ 0x8000000000000000;
    else
      v5 = v7 + v10;
    --v2;
  }
  while (v2);
  return v5;
}

unint64_t sub_1C6138808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unint64_t v7;
  llvm::EVT **v8;
  unint64_t v9;
  llvm::EVT **v10;
  uint64_t v12;

  v3 = *(_DWORD *)(a3 + 32);
  if (!v3)
    return 0;
  v7 = 0;
  do
  {
    v8 = (llvm::EVT **)a2;
    if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
      v8 = **(llvm::EVT ****)(a2 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v8, (uint64_t)&v12);
    if (__OFADD__(v7, v12))
      v9 = ((uint64_t)(v7 + v12) >> 63) ^ 0x8000000000000000;
    else
      v9 = v7 + v12;
    v10 = (llvm::EVT **)a3;
    if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
      v10 = **(llvm::EVT ****)(a3 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v10, (uint64_t)&v12);
    if (__OFADD__(v9, v12))
      v7 = ((uint64_t)(v9 + v12) >> 63) ^ 0x8000000000000000;
    else
      v7 = v9 + v12;
    --v3;
  }
  while (v3);
  return v7;
}

unint64_t sub_1C613890C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unint64_t v7;
  llvm::EVT **v8;
  unint64_t v9;
  llvm::EVT **v10;
  uint64_t v12;

  v3 = *(_DWORD *)(a3 + 32);
  if (!v3)
    return 0;
  v7 = 0;
  do
  {
    v8 = (llvm::EVT **)a3;
    if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
      v8 = **(llvm::EVT ****)(a3 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v8, (uint64_t)&v12);
    if (__OFADD__(v7, v12))
      v9 = ((uint64_t)(v7 + v12) >> 63) ^ 0x8000000000000000;
    else
      v9 = v7 + v12;
    v10 = (llvm::EVT **)a2;
    if ((*(_DWORD *)(a2 + 8) & 0xFE) == 0x12)
      v10 = **(llvm::EVT ****)(a2 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v10, (uint64_t)&v12);
    if (__OFADD__(v9, v12))
      v7 = ((uint64_t)(v9 + v12) >> 63) ^ 0x8000000000000000;
    else
      v7 = v9 + v12;
    --v3;
  }
  while (v3);
  return v7;
}

uint64_t sub_1C6138A10(uint64_t result)
{
  uint64_t v1;
  const void **v2;
  size_t v3;
  void *v4;

  v1 = *(unsigned int *)(result + 8);
  if (v1 >= 0x41)
  {
    v2 = (const void **)result;
    v3 = ((unint64_t)(v1 + 63) >> 3) & 0x3FFFFFF8;
    v4 = (void *)operator new[]();
    memcpy(v4, *v2, v3);
    JUMPOUT(0x1CAA32F9CLL);
  }
  return result;
}

_QWORD *sub_1C6138A98(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  _QWORD *result;
  uint64_t (*v7)(void);
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 > 0x40)
  {
    v5 = (void *)operator new[]();
    memcpy(v5, *(const void **)a1, ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v5 = *(void **)a1;
  }
  result = (_QWORD *)a2[3];
  if (result)
  {
    if (result == a2)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v8);
      result = v9;
    }
    else
    {
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 16))(result);
      v9 = result;
    }
    if (result == v8)
    {
      v7 = *(uint64_t (**)(void))(v8[0] + 32);
    }
    else
    {
      if (!result)
        goto LABEL_11;
      v7 = *(uint64_t (**)(void))(*result + 40);
    }
    result = (_QWORD *)v7();
  }
  else
  {
    v9 = 0;
  }
LABEL_11:
  if (v4 >= 0x41)
  {
    if (v5)
      return (_QWORD *)MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  return result;
}

BOOL sub_1C6138BE0(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v3;
  unsigned int v4;
  _DWORD *v6[7];
  _DWORD *v7[7];
  char v8;

  v7[0] = a2 + 1;
  v7[1] = a2 + 2;
  v7[2] = a2 + 3;
  v7[3] = a2 + 4;
  v7[4] = a2 + 7;
  v7[5] = a2 + 5;
  v7[6] = a2 + 6;
  v3 = a3[1];
  v6[0] = a3 + 1;
  v6[1] = a3 + 2;
  v6[2] = a3 + 3;
  v6[3] = a3 + 4;
  v6[4] = a3 + 7;
  v6[5] = a3 + 5;
  v6[6] = a3 + 6;
  v4 = a2[1];
  if (v4 < v3)
    return 1;
  if (v3 >= v4)
    return sub_1C4849234((uint64_t)&v8, v7, v6);
  return 0;
}

unint64_t sub_1C6138C84(uint64_t a1, uint64_t a2, llvm::Type ***a3, uint64_t a4)
{
  llvm::TargetLoweringBase *v8;
  llvm::EVT **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v8 = *(llvm::TargetLoweringBase **)(a1 + 32);
  v9 = (llvm::EVT **)a4;
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
    v9 = **(llvm::EVT ****)(a4 + 16);
  llvm::TargetLoweringBase::getTypeLegalizationCost(v8, *(const llvm::DataLayout **)(a1 + 8), v9, (uint64_t)&v13);
  v10 = v13;
  v11 = sub_1C4846390(a1, a2, a3, *(llvm::Type ****)(a4 + 24), 0, 0, 0);
  if (__OFADD__(v10, v11))
    return ((v10 + v11) >> 63) ^ 0x8000000000000000;
  else
    return v10 + v11;
}

unint64_t sub_1C6138D34(uint64_t a1, int a2, int a3, llvm::FixedVectorType *a4, uint64_t a5, uint64_t a6)
{
  llvm::FixedVectorType **v11;
  llvm::Type ***v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  int v23;

  llvm::VectorType::get(a4, (llvm::Type *)(*(unsigned int *)(a5 + 32) | ((unint64_t)(*(_BYTE *)(a5 + 8) == 19) << 32)));
  v12 = (llvm::Type ***)v11;
  v13 = sub_1C613823C(a1, 13, v11, a6);
  if (a3)
    v14 = 39;
  else
    v14 = 40;
  v15 = sub_1C4846390(a1, v14, v12, (llvm::Type ***)a5, 0, a6, 0);
  v21[0] = v15;
  v21[1] = v16;
  if (a2)
  {
    sub_1C4845E1C(a1, 17);
    v18 = v17;
    v22 = 2;
    v23 = 0;
    sub_1C4848B64((uint64_t)v21, (uint64_t)&v22);
    v15 = v21[0];
  }
  else
  {
    v18 = 0;
  }
  v19 = v13 + v18;
  if (__OFADD__(v13, v18))
    v19 = ((uint64_t)(v13 + v18) >> 63) ^ 0x8000000000000000;
  if (__OFADD__(v19, v15))
    return ((uint64_t)(v19 + v15) >> 63) ^ 0x8000000000000000;
  else
    return v19 + v15;
}

void *sub_1C6138E7C(int a1, uint64_t a2, llvm::Type *this, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  int v11;
  void *result;
  void *v13;
  unsigned int v14;

  if ((a9 & 0xFF00000000) != 0)
    v11 = a9;
  else
    v11 = 1;
  result = llvm::Type::getIntNTy(this, (llvm::LLVMContext *)(8 * v11));
  if (a4)
  {
    v13 = result;
    v14 = *(_DWORD *)(a2 + 8);
    do
    {
      if (v14 >= *(_DWORD *)(a2 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v14 + 1, 8);
        v14 = *(_DWORD *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v14) = v13;
      v14 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v14;
      a4 -= v11;
    }
    while (a4);
  }
  return result;
}

double sub_1C6138F10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8EF70A);
  *(_OWORD *)(v1 + 296) = xmmword_1C8663800;
  *(_OWORD *)(v1 + 312) = unk_1C8663810;
  *(_QWORD *)(v1 + 328) = 0;
  *(_OWORD *)(v1 + 264) = llvm::MCSchedModel::Default;
  *(_OWORD *)(v1 + 280) = unk_1C86637F0;
  *(_OWORD *)(v1 + 368) = xmmword_1C8663800;
  *(_OWORD *)(v1 + 384) = unk_1C8663810;
  *(_QWORD *)(v1 + 400) = 0;
  *(_OWORD *)(v1 + 336) = llvm::MCSchedModel::Default;
  *(_OWORD *)(v1 + 352) = unk_1C86637F0;
  *(_OWORD *)(v1 + 424) = 0u;
  *(_OWORD *)(v1 + 440) = 0u;
  *(_OWORD *)(v1 + 408) = 0u;
  *(_QWORD *)(v1 + 456) = v1 + 472;
  *(_QWORD *)(v1 + 464) = 0x1000000000;
  *(_QWORD *)(v1 + 536) = 0;
  *(_QWORD *)v1 = &off_1E7F9E940;
  v2 = 560;
  do
  {
    v3 = v1 + v2;
    *(_QWORD *)v3 = -1;
    *(_DWORD *)(v3 + 8) = -1;
    *(_QWORD *)(v3 + 16) = 0;
    v2 += 24;
  }
  while (v3 + 24 != v1 + 944);
  *(_DWORD *)(v1 + 552) = 0;
  *(_QWORD *)(v1 + 944) = v1 + 960;
  *(_QWORD *)(v1 + 952) = 0x800000000;
  *(_QWORD *)(v1 + 1120) = 0;
  *(_DWORD *)(v1 + 1128) = 0;
  *(_QWORD *)(v1 + 1136) = 0xFFFFFFFFLL;
  *(_QWORD *)(v1 + 1144) = v1 + 1160;
  *(_QWORD *)(v1 + 1152) = 0x800000000;
  *(_QWORD *)(v1 + 1320) = 0;
  *(_DWORD *)(v1 + 1328) = 0;
  *(_QWORD *)(v1 + 1336) = 0xFFFFFFFFLL;
  *(_QWORD *)(v1 + 1344) = v1 + 1360;
  *(_QWORD *)&result = 0x600000000;
  *(_QWORD *)(v1 + 1352) = 0x600000000;
  *(_DWORD *)(v1 + 1408) = 0;
  return result;
}

void sub_1C613902C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C6139058(_DWORD *a1, _DWORD *a2)
{
  unsigned int v3;
  unsigned int v4;

  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  if (*a2 < *a1)
    return 1;
  v3 = a1[1];
  v4 = a2[1];
  if (v3 >= v4)
    return v4 < v3;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1C61390A0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4850294(v0);
}

uint64_t (***sub_1C61390C8())()
{
  return &off_1EF8EB078;
}

uint64_t sub_1C61390D4()
{
  return 0;
}

uint64_t sub_1C61390DC()
{
  return 0;
}

uint64_t sub_1C61390E4()
{
  return 0;
}

uint64_t sub_1C61390EC()
{
  return 0;
}

_QWORD *sub_1C61390F4(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, const llvm::APInt *a6)
{
  int v12;
  int v13;
  int v14;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v16 = sub_1C6366AB4(a5, 27, a6, (llvm *)5, 0, 1, 0);
  v17 = v12;
  v18 = a1;
  v19 = a2;
  v20 = sub_1C6366AB4(a5, 33, a6, (llvm *)5, 0, 1, 0);
  v21 = v13;
  v22 = a3;
  v23 = a4;
  v24 = sub_1C6366AB4(a5, 34, a6, (llvm *)5, 0, 1, 0);
  v25 = v14;
  return sub_1C636E56C(a5, 18, (uint64_t)a6, (llvm *)0xAE, 0, (uint64_t *)&v16, 5);
}

uint64_t sub_1C6139234()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4852C2C(v0);
}

void LLVMInitializeAGX2AsmPrinter()
{
  qword_1ED82C4A8 = (uint64_t)sub_1C6139538;
}

void sub_1C6139274(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E7F9ED48;
  sub_1C4765054((uint64_t)a1 + 1488);
  sub_1C6139390((uint64_t)a1 + 792);
  sub_1C5FEAEB4(a1);
}

void sub_1C61392B0(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E7F9ED48;
  sub_1C4765054((uint64_t)a1 + 1488);
  sub_1C6139390((uint64_t)a1 + 792);
  sub_1C5FEAEB4(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::AnalysisUsage *sub_1C6139300(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C63BC59C(a1, a2);
  return llvm::AnalysisUsage::addRequiredID(a2, llvm::MachineLoopInfo::ID);
}

uint64_t sub_1C613932C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E81A7280;
  *(_QWORD *)(a1 + 64) = a2;
  llvm::raw_ostream::SetBufferAndMode(a1, 0, 0, 0);
  return a1;
}

uint64_t sub_1C6139390(uint64_t result)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)result = off_1E7F9EF28;
  *(_QWORD *)(result + 624) = off_1E81A6E70;
  if (*(_DWORD *)(result + 680) == 1)
  {
    v3 = *(_QWORD *)(result + 640);
    if (v3)
    {
      v4 = result;
      MEMORY[0x1CAA32F9C](v3, 0x1000C8077774924);
      result = v4;
    }
  }
  v1 = *(void **)(result + 344);
  if (v1 != (void *)(result + 368))
  {
    v5 = result;
    free(v1);
    result = v5;
  }
  v2 = *(void **)(result + 272);
  if (v2 != (void *)(result + 288))
  {
    v6 = result;
    free(v2);
    return v6;
  }
  return result;
}

uint64_t sub_1C6139444(uint64_t a1)
{
  return *(unsigned int *)(a1 + 252);
}

uint64_t sub_1C613944C()
{
  return 1;
}

void sub_1C6139454(uint64_t a1)
{
  sub_1C6139390(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6139478(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFD)
    {
      v11 = 0;
      result = sub_1C485B44C((uint64_t)v5, a2, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C6139538(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = operator new();
  v5 = *a2;
  *a2 = 0;
  v7 = v5;
  sub_1C61395B8(v4, a1, &v7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  return v4;
}

uint64_t sub_1C61395B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a3;
  *a3 = 0;
  v7 = v4;
  sub_1C63BC478(a1, a2, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  *(_QWORD *)a1 = &off_1E7F9ED48;
  sub_1C613963C(a1 + 792);
  llvm::GPUMetadataEmitter::GPUMetadataEmitter(a1 + 1488, a1 + 792);
  *(_QWORD *)(a1 + 7856) = 0;
  *(_DWORD *)(a1 + 7864) = 0;
  return a1;
}

uint64_t sub_1C613963C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E7F9EF28;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 288;
  *(_QWORD *)(a1 + 280) = 0x600000000;
  sub_1C4765AA4((char *)(a1 + 272), 4uLL, 0);
  *(_DWORD *)(a1 + 336) = 256;
  *(_QWORD *)(a1 + 344) = a1 + 368;
  *(_OWORD *)(a1 + 352) = xmmword_1C64638F0;
  sub_1C613932C(a1 + 624, a1 + 344);
  return a1;
}

BOOL sub_1C61396F8(unsigned __int8 *a1)
{
  int v1;
  _BOOL8 result;
  unsigned int v4;
  BOOL v5;
  int v6;

  v1 = *a1;
  result = 1;
  if ((v1 - 22) > 0x39 || ((1 << (v1 - 22)) & 0x210080020080101) == 0)
  {
    v4 = v1 - 89;
    v5 = v4 > 0x16;
    v6 = (1 << v4) & 0x400101;
    return !v5 && v6 != 0;
  }
  return result;
}

_QWORD *sub_1C6139754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  BOOL (*v7)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t);
  BOOL (*v8)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t);
  uint64_t (*v9)(unsigned int, unsigned __int8, unsigned __int8, char, char, uint64_t, uint64_t);
  _QWORD v11[40];

  v6 = a3;
  v11[39] = *MEMORY[0x1E0C80C00];
  llvm::CCState::CCState(v11, a3, 0, a1, a5, a2);
  v7 = sub_1C485C6D4;
  v8 = (BOOL (*)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t))sub_1C485CC1C;
  if (v6 == 108)
    v8 = sub_1C485C6D4;
  if (v6 != 101)
    v7 = v8;
  if (v6 <= 100)
    v9 = sub_1C485C854;
  else
    v9 = (uint64_t (*)(unsigned int, unsigned __int8, unsigned __int8, char, char, uint64_t, uint64_t))v7;
  llvm::CCState::AnalyzeReturn((uint64_t)v11, a4, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))v9);
  return sub_1C476CC0C(v11);
}

_QWORD *sub_1C613980C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  uint64_t (*v7)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t);
  uint64_t (*v8)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t);
  _QWORD v10[40];

  v6 = a3;
  v10[39] = *MEMORY[0x1E0C80C00];
  llvm::CCState::CCState(v10, a3, 0, a1, a5, a2);
  v7 = (uint64_t (*)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t))sub_1C485CFE4;
  if (v6 != 106)
    v7 = sub_1C485D5B8;
  if (v6 == 102)
    v7 = (uint64_t (*)(unsigned int, unsigned __int8, unsigned __int8, int, char, uint64_t, uint64_t))sub_1C485CFF4;
  if (v6 <= 101)
    v8 = sub_1C485D174;
  else
    v8 = v7;
  llvm::CCState::AnalyzeFormalArguments((uint64_t)v10, a4, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))v8);
  return sub_1C476CC0C(v10);
}

_QWORD *sub_1C61398CC(_QWORD *result, uint64_t a2)
{
  *result = off_1E7F9F350;
  result[1] = a2;
  return result;
}

void sub_1C61398E8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C61398FC()
{
  return 0;
}

uint64_t sub_1C6139904()
{
  return 0;
}

void sub_1C613990C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6139924(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  _DWORD v10[12];
  uint64_t v11;
  int v12;
  uint64_t v13;

  v3 = a3;
  v13 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)a1[1];
  v6 = (*(unsigned __int16 *)(*v5 + 18) >> 4) & 0x3FF;
  if (v6)
    v7 = v6 == 8;
  else
    v7 = 1;
  if (v7 || v6 == 255 || *(_BYTE *)(v5[7] + 62))
  {
    v11 = 257;
    v12 = 0;
    v10[0] = a3;
    v10[4] = 0;
    v10[6] = sub_1C4861064((uint64_t)a1, a2);
    v10[10] = 0;
    (*(void (**)(_QWORD *, uint64_t, uint64_t *, uint64_t, _DWORD *, uint64_t, _QWORD))(*a1 + 32))(a1, 46, &v11, 1, v10, 2, 0);
    return *(unsigned int *)(*(_QWORD *)(v8 + 32) + 4);
  }
  return v3;
}

void sub_1C6139A00()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6139A14(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EB2A0);
  if (v1 != -1)
  {
    v4[0] = sub_1C4862964;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EB2A0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6139A74(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void (**v8)(_QWORD *);
  _QWORD *v9;
  void (**v10)(_QWORD *);
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  v5 = (_QWORD *)a1[3];
  if (v5)
  {
    if (v5 == a1)
    {
      v15 = v14;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v14);
    }
    else
    {
      v15 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v15 = 0;
  }
  v6 = (_QWORD *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      v13 = v12;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v12);
    }
    else
    {
      v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    }
  }
  else
  {
    v13 = 0;
  }
  sub_1C4862A10(v4, (uint64_t)v14, (uint64_t)v12);
  v7 = v13;
  if (v13 == v12)
  {
    v8 = (void (**)(_QWORD *))(v12[0] + 32);
    v7 = v12;
LABEL_9:
    (*v8)(v7);
    goto LABEL_10;
  }
  if (v13)
  {
    v8 = (void (**)(_QWORD *))(*v13 + 40);
    goto LABEL_9;
  }
LABEL_10:
  v9 = v15;
  if (v15 == v14)
  {
    v10 = (void (**)(_QWORD *))(v14[0] + 32);
    v9 = v14;
  }
  else
  {
    if (!v15)
      return v4;
    v10 = (void (**)(_QWORD *))(*v15 + 40);
  }
  (*v10)(v9);
  return v4;
}

void sub_1C6139BFC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6139C10(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E7F9F768;
  result[1] = v3;
  return result;
}

uint64_t sub_1C6139C48(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E7F9F768;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C6139C68(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

void sub_1C6139C74(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EB2A8);
  if (v1 != -1)
  {
    v4[0] = sub_1C48680FC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EB2A8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6139CD4(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8EF718;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E7F9F850;
  *(_QWORD *)(result + 32) = a1;
  return result;
}

uint64_t sub_1C6139D2C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::ConstantDataSequential *this, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[9];

  v13[8] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x1000000000;
  llvm::ShuffleVectorInst::getShuffleMask(this, (uint64_t)&v11);
  result = sub_1C486AD20(a1, a2, a3, v11, v12, a5);
  if (v11 != v13)
  {
    v10 = result;
    free(v11);
    return v10;
  }
  return result;
}

uint64_t sub_1C6139DF8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C486B018(v0);
}

double sub_1C6139E20()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6441);
  *(_QWORD *)v1 = &off_1E7F9F9B0;
  *(_QWORD *)(v1 + 272) = v1 + 288;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(v1 + 280) = 0x800000000;
  *(_QWORD *)(v1 + 416) = 0;
  *(_DWORD *)(v1 + 424) = 0;
  return result;
}

void sub_1C6139E7C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EB2C0);
  if (v1 != -1)
  {
    v4[0] = sub_1C4871FB8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EB2C0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

double sub_1C6139EDC()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8EF720);
  *(_QWORD *)v1 = &off_1E7F9FA70;
  *(_QWORD *)(v1 + 248) = v1 + 280;
  *(_QWORD *)(v1 + 256) = v1 + 280;
  *(_QWORD *)&result = 8;
  *(_QWORD *)(v1 + 264) = 8;
  *(_DWORD *)(v1 + 272) = 0;
  *(_QWORD *)(v1 + 392) = 0;
  *(_QWORD *)(v1 + 397) = 0;
  return result;
}

_UNKNOWN **sub_1C6139F44()
{
  return &off_1EF8EB080;
}

void sub_1C6139F50()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6139F64(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 8) = a3;
  *(_WORD *)(result + 12) = 1028;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 1;
  *(_QWORD *)result = &off_1E7F9FBF0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void sub_1C6139F94(llvm::TargetFrameLowering *a1)
{
  llvm::TargetFrameLowering::~TargetFrameLowering(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6139FB8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EB2D0);
  if (v1 != -1)
  {
    v4[0] = sub_1C487FFF0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EB2D0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C613A018()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4880080(v0);
}

uint64_t sub_1C613A040()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C48827D4(v0);
}

uint64_t sub_1C613A068(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C613A084 + 4 * byte_1C6464EFF[a2 - 290]))();
}

uint64_t sub_1C613A084(uint64_t result)
{
  *(_BYTE *)(result + 20) = 1;
  return result;
}

uint64_t sub_1C613A090(uint64_t result)
{
  *(_DWORD *)(result + 8) = 7;
  return result;
}

void sub_1C613A0DC()
{
  JUMPOUT(0x1C613A0D4);
}

uint64_t sub_1C613A0E4(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

void sub_1C613A0EC()
{
  JUMPOUT(0x1C613A0D4);
}

void sub_1C613A0F4()
{
  JUMPOUT(0x1C613A0D4);
}

void sub_1C613A0FC()
{
  JUMPOUT(0x1C613A0D4);
}

void sub_1C613A104()
{
  JUMPOUT(0x1C613A0D4);
}

uint64_t sub_1C613A110(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_1C646B0A0;
  *(_QWORD *)(a1 + 16) = &unk_1C699BF14;
  *(_QWORD *)(a1 + 24) = "1000";
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 8350;
  *(_QWORD *)a1 = &off_1E7F9FEF8;
  *(_QWORD *)(a1 + 8) = &unk_1E8055610;
  *(_QWORD *)(a1 + 80) = a2;
  sub_1C6147D8C(a1 + 88);
  *(_QWORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = 0;
  v3 = (_QWORD *)operator new();
  *v3 = &unk_1E80BA430;
  v4 = *(_QWORD *)(a1 + 440);
  *(_QWORD *)(a1 + 440) = v3;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v3 = *(_QWORD **)(a1 + 440);
  }
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E7FA0720;
  v5[1] = v3;
  v6 = *(_QWORD *)(a1 + 448);
  *(_QWORD *)(a1 + 448) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

_QWORD *sub_1C613A220(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = *(_QWORD **)(a1 + 456);
  if (!result)
  {
    result = (_QWORD *)operator new();
    *result = &off_1E7F95930;
    v3 = *(_QWORD *)(a1 + 456);
    *(_QWORD *)(a1 + 456) = result;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      return *(_QWORD **)(a1 + 456);
    }
  }
  return result;
}

BOOL sub_1C613A290(uint64_t a1, uint64_t a2)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16) & 0x1000000001) == 1
      && *(_DWORD *)(*(_QWORD *)(a2 + 264)
                   + 24
                   * (*(unsigned __int16 *)(*llvm::TargetRegisterInfo::getMinimalPhysRegClass(a2, *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4), 1u)+ 24)+ *(_DWORD *)(a2 + 272) * ((*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 3))) > 0x20u;
}

uint64_t sub_1C613A314(uint64_t a1, unsigned int a2)
{
  return a2;
}

void *sub_1C613A31C()
{
  return &unk_1E7FA0400;
}

void *sub_1C613A32C()
{
  return &unk_1E7FA04D0;
}

void *sub_1C613A33C()
{
  return &unk_1E7FA05A0;
}

uint64_t sub_1C613A34C(unsigned __int8 a1, int a2)
{
  _BOOL4 v3;
  int v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v15;
  unsigned __int8 v16;

  v16 = a1;
  v3 = (a1 - 75) < 0x2Du || (a1 + 104) < 0x13u;
  v4 = (a1 - 8) < 7u || v3;
  sub_1C47A8C74(&v16);
  if ((_DWORD)v5 == 1)
  v7 = sub_1C47A8C74(&v16) + 7;
  if ((_DWORD)v6 == 1)
  {
    v15 = v7;
    LODWORD(v7) = v15;
  }
  v8 = v7 & 0xFFFFFFF8;
  if (a2 == 4)
    v9 = 4075;
  else
    v9 = 4077;
  if (a2 == 4)
    v10 = 4072;
  else
    v10 = 4073;
  if (v8 == 16)
    v9 = v10;
  if (a2 == 4)
    v11 = 4070;
  else
    v11 = 4071;
  if (a2 == 4)
    v12 = 4066;
  else
    v12 = 4067;
  if (v8 == 16)
    v13 = v12;
  else
    v13 = v11;
  if (v4)
    return v13;
  else
    return v9;
}

uint64_t sub_1C613A43C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 **a7)
{
  llvm::MachineFunction *v8;
  llvm::MachineInstr *v9;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v8 = sub_1C477A100(a2, (unint64_t *)(a2 + 48), a7, *(_QWORD *)(a1 + 8) + 13824);
  v12 = 0;
  v13 = a3;
  v11 = 4;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v11);
  return 1;
}

uint64_t sub_1C613A4A4(uint64_t a1, uint64_t a2)
{
  unint64_t ExtendedSizeInBits;
  const char *v3;
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  unint64_t ExtendedVectorElementType;
  unint64_t v9;
  const char *v10;
  int v11;
  int v12;
  const char *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD v16[2];
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  if ((_BYTE)a1)
  {
    if (a1 - 15 >= 0x9C)
    {
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v17);
LABEL_4:
      if ((_DWORD)v3 == 1)
      {
        v14 = ExtendedSizeInBits;
        ExtendedSizeInBits = v14;
      }
      v4 = 0;
      return dword_1C6468690[2 * v4 + (ExtendedSizeInBits > 0x10)];
    }
    LOBYTE(ExtendedVectorElementType) = sub_1C47F37A0((unsigned __int8 *)v17);
    v9 = 0;
    v10 = 0;
  }
  else
  {
    if (!llvm::EVT::isExtendedVector((llvm::EVT *)v17))
    {
      ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v17);
      goto LABEL_4;
    }
    ExtendedVectorElementType = llvm::EVT::getExtendedVectorElementType((llvm::EVT *)v17, v6, v7);
    v9 = ExtendedVectorElementType & 0xFFFFFFFFFFFFFF00;
  }
  v11 = ExtendedVectorElementType;
  v16[0] = v9 | ExtendedVectorElementType;
  v16[1] = v10;
  v12 = sub_1C612FE00((llvm::EVT *)v17, v10);
  if (v11)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v16);
  else
    ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v16);
  if ((_DWORD)v13 == 1)
  {
    v15 = ExtendedSizeInBits;
    ExtendedSizeInBits = v15;
  }
  v4 = qword_1C646AED0[v12 - 2];
  return dword_1C6468690[2 * v4 + (ExtendedSizeInBits > 0x10)];
}

uint64_t sub_1C613A5C0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = a2 + 32;
  *(_QWORD *)(a2 + 24) = 0x800000000;
  *(_BYTE *)(a2 + 160) = 0;
  v2 = *(_QWORD *)(result + 80);
  if (*(_BYTE *)(v2 + 318))
  {
    v3 = 4674;
  }
  else if (*(_BYTE *)(v2 + 327))
  {
    v3 = 4676;
  }
  else
  {
    v3 = 4675;
  }
  *(_DWORD *)a2 = v3;
  return result;
}

void sub_1C613A60C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C613A624()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C613A63C(_QWORD *a1)
{
  sub_1C613A688(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C613A664(llvm::GPUTargetInstrInfo *a1)
{
  llvm::GPUTargetInstrInfo::~GPUTargetInstrInfo(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C613A688(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = &off_1E7F9FEF8;
  v2 = a1[57];
  a1[57] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[56];
  a1[56] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[55];
  a1[55] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  a1[11] = &off_1E7FA6230;
  v5 = (_QWORD *)a1[46];
  if (v5 != a1 + 48)
    free(v5);
  llvm::TargetRegisterInfo::~TargetRegisterInfo((llvm::TargetRegisterInfo *)(a1 + 11));
  llvm::TargetInstrInfo::~TargetInstrInfo((llvm::TargetInstrInfo *)a1);
}

uint64_t sub_1C613A730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  _QWORD *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  _QWORD *v17;

  v6 = operator new();
  v7 = sub_1C6270F50(v6);
  *v8 = off_1E7FA07B0;
  v8[7] = a1;
  v8[8] = a2;
  *(_QWORD *)(v6 + 72) = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a2 + 104))(a2, v7);
  *(_QWORD *)(v6 + 80) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
  *(_QWORD *)(v6 + 88) = a3;
  v9 = *(unsigned __int8 *)(a2 + 318);
  *(_BYTE *)(v6 + 96) = v9;
  v10 = *(unsigned __int8 *)(a2 + 319);
  *(_BYTE *)(v6 + 97) = v10;
  *(_WORD *)(v6 + 98) = *(_WORD *)(a2 + 320);
  v11 = *(unsigned __int8 *)(a2 + 326);
  *(_BYTE *)(v6 + 100) = v11;
  v12 = *(unsigned __int8 *)(a2 + 322);
  *(_BYTE *)(v6 + 101) = v12;
  if (v10)
    v13 = v9 | 0x80;
  else
    v13 = v9;
  if ((_DWORD)v9)
    v14 = v13;
  else
    v14 = v13 | 2;
  if (*(_BYTE *)(a2 + 323))
    v14 |= 0x200uLL;
  if (*(_BYTE *)(a2 + 324))
    v14 |= 0x400uLL;
  if (*(_BYTE *)(a2 + 325))
    v14 |= 0x100uLL;
  if (v11)
    v14 |= 8uLL;
  if (*(_BYTE *)(a2 + 327))
    v14 |= 4uLL;
  if (v12)
    v14 |= 0x40uLL;
  if (*(_BYTE *)(a2 + 397))
    v14 |= 0x20uLL;
  if (*(_BYTE *)(a2 + 398))
    v14 |= 0x10uLL;
  *(_QWORD *)(v6 + 104) = v14;
  *(_QWORD *)(v6 + 112) = 0;
  sub_1C6270F1C((_QWORD *)(v6 + 120), 3u);
  *(_QWORD *)(v6 + 240) = &unk_1C646B3E0;
  *(_QWORD *)(v6 + 248) = &unk_1C646B418;
  *(_QWORD *)(v6 + 256) = &unk_1ED7EA930;
  *(_QWORD *)(v6 + 264) = &unk_1ED7EA8E0;
  *(_QWORD *)(v6 + 272) = 1;
  for (i = 280; i != 1304; i += 16)
    *(_QWORD *)(v6 + i) = 2;
  v16 = 0;
  v17 = &unk_1C646B3E0;
  do
    *((_DWORD *)sub_1C613AADC((_DWORD *)(v6 + 272), v17++) + 2) = v16++;
  while (v16 != 7);
  return v6;
}

void sub_1C613A8F8(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 32, &v5);
  sub_1C613A964(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C613A964(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = *(_QWORD *)result;
    v6 = 32 * v2;
    do
    {
      v7 = *(_QWORD *)(v5 + 24);
      if (v7)
      {
        if (v5 == v7)
        {
          *(_QWORD *)(a2 + 24) = a2;
          result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 24) + 24))(*(_QWORD *)(v5 + 24), a2);
        }
        else
        {
          *(_QWORD *)(a2 + 24) = v7;
          *(_QWORD *)(v5 + 24) = 0;
        }
      }
      else
      {
        *(_QWORD *)(a2 + 24) = 0;
      }
      v5 += 32;
      a2 += 32;
      v6 -= 32;
    }
    while (v6);
    v8 = *(unsigned int *)(v4 + 8);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)v4;
      v10 = 32 * v8;
      while (1)
      {
        result = *(_QWORD *)(v9 + v10 - 8);
        if (v9 + v10 - 32 == result)
          break;
        if (result)
        {
          v11 = 5;
LABEL_16:
          result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v11))();
        }
        v10 -= 32;
        if (!v10)
          return result;
      }
      result = v9 + v10 - 32;
      v11 = 4;
      goto LABEL_16;
    }
  }
  return result;
}

double sub_1C613AA38(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 32 * v5;
    while (1)
    {
      v7 = *(char **)&v4[v6 - 8];
      if (&v4[v6 - 32] == v7)
        break;
      if (v7)
      {
        v8 = 5;
LABEL_7:
        (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
      }
      v6 -= 32;
      if (!v6)
      {
        v4 = *a1;
        goto LABEL_10;
      }
    }
    v7 = &v4[v6 - 32];
    v8 = 4;
    goto LABEL_7;
  }
LABEL_10:
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

_QWORD *sub_1C613AADC(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C48AF0F8((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C613AB3C(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_QWORD *sub_1C613AB3C(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v8;
  _QWORD *v9;

  v4 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v5 = 64;
  else
    v5 = a1[4];
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  v8 = (uint64_t)a1;
  sub_1C48AF1B4((uint64_t)a1, v5);
  v9 = 0;
  sub_1C48AF0F8(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != 2)
    --a1[1];
  return a4;
}

uint64_t sub_1C613ABF8(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 1032);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_13;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = 2;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_13:
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 != 2 && *(_QWORD *)a2 != 4)
    {
      v12 = 0;
      result = sub_1C48AF0F8((uint64_t)v5, (_QWORD *)a2, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C613ACBC(uint64_t a1)
{
  void *v2;
  void **v4;

  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 72), 4);
  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
  v4 = (void **)a1;
  sub_1C48AF338(&v4);
  return a1;
}

_QWORD *sub_1C613AD1C(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E7FA1810;
  v2 = (void *)a1[2];
  if (v2 != (void *)a1[1])
    free(v2);
  return a1;
}

void sub_1C613AD60(_QWORD *a1)
{
  void *v2;

  *a1 = off_1E7FA1810;
  v2 = (void *)a1[2];
  if (v2 != (void *)a1[1])
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C613ADC4(_QWORD *a1)
{
  sub_1C613AF54(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C613ADE8(uint64_t a1)
{
  return sub_1C613AF54((_QWORD *)(a1 - 8));
}

void sub_1C613ADF0(uint64_t a1)
{
  sub_1C613AF54((_QWORD *)(a1 - 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C613AE18(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(unsigned int *)(result + 80);
  if ((_DWORD)v2)
  {
    v4 = *(uint64_t **)(result + 72);
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, a2);
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

llvm::raw_ostream *sub_1C613AE68(uint64_t a1, llvm::raw_ostream *a2)
{
  char *v4;
  llvm::Value *v5;

  if (*(_BYTE *)(a1 + 24))
    v4 = "constimage(";
  else
    v4 = "image(";
  sub_1C4816AD8(a2, v4);
  v5 = *(llvm::Value **)(a1 + 16);
  if (v5)
    llvm::Value::print(v5, a2, 0);
  else
    sub_1C4816AD8(a2, "nullptr");
  return sub_1C4816AD8(a2, ")");
}

void sub_1C613AEE4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C613AEF8@<Q0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a1;
  v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__int16 ***sub_1C613AF08(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  __int128 v3;

  *((_QWORD *)&v3 + 1) = a2;
  *(_QWORD *)&v3 = a2 - 16;
  v2 = v3 >> 4;
  if (v2 > 0xF)
    return 0;
  else
    return off_1E7FA18C8[v2];
}

void sub_1C613AF30(int a1@<W1>, unsigned int *a2@<X8>)
{
  unsigned int v2;

  v2 = *a2;
  *((_QWORD *)a2 + 1) = 0;
  a2[4] = 64;
  a2[6] = 0;
  *a2 = v2 & 0xFFF00000 | 0x207;
  a2[1] = a1;
}

_QWORD *sub_1C613AF54(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;

  *a1 = &off_1E7FA1778;
  a1[1] = &unk_1E7FA17D0;
  v2 = (_QWORD *)a1[10];
  if (v2 != a1 + 12)
    free(v2);
  a1[1] = off_1E7FA1810;
  v3 = (void *)a1[3];
  if (v3 != (void *)a1[2])
    free(v3);
  return a1;
}

void sub_1C613AFBC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EB300);
  if (v1 != -1)
  {
    v4[0] = sub_1C48C37F8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EB300, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C613B01C()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF728);
  *result = &off_1E7FA1958;
  return result;
}

_QWORD *sub_1C613B05C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = operator new();
  result = (_QWORD *)sub_1C6372000(v4, a1, a2);
  *result = &off_1E7FA1A18;
  result[59] = a1;
  result[60] = a1 + 1328;
  return result;
}

_QWORD *sub_1C613B0B4(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, unsigned int *a7, unsigned int *a8, __int128 *a9, __int128 *a10)
{
  _QWORD *v17;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[11];

  v23[10] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v22 = 0x500000000;
  v19 = a6;
  v20 = 6;
  sub_1C47E2820(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1C48DD6DC(a1, (uint64_t)&v21, *a7, a8, a9, a10);
  v17 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v21, v22);
  if (v21 != v23)
    free(v21);
  return v17;
}

_QWORD *sub_1C613B1C8(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, __int128 *a7)
{
  _QWORD *v13;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x200000000;
  v15 = a6;
  v16 = 6;
  sub_1C47E2820(a1, (uint64_t)&v17, (uint64_t)&v15);
  sub_1C47E28C4(a1, (uint64_t)&v17, a7);
  v13 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v17, v18);
  if (v17 != v19)
    free(v17);
  return v13;
}

_QWORD *sub_1C613B2C0(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int *a6, uint64_t *a7)
{
  _QWORD *v13;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x200000000;
  v15 = *a6;
  v16 = 6;
  sub_1C47E2820(a1, (uint64_t)&v17, (uint64_t)&v15);
  v15 = *a7;
  v16 = 6;
  sub_1C47E2820(a1, (uint64_t)&v17, (uint64_t)&v15);
  v13 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v17, v18);
  if (v17 != v19)
    free(v17);
  return v13;
}

_QWORD *sub_1C613B3C4(uint64_t a1, int a2, uint64_t a3, unsigned int a4, __int128 *a5)
{
  _QWORD *v9;
  uint64_t v11;
  char v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x200000000;
  v11 = a4;
  v12 = 6;
  sub_1C47E2820(a1, (uint64_t)&v13, (uint64_t)&v11);
  sub_1C47E28C4(a1, (uint64_t)&v13, a5);
  v9 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v13, v14);
  if (v13 != v15)
    free(v13);
  return v9;
}

_QWORD *sub_1C613B4AC(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t *a7, unsigned int *a8, __int128 *a9, unsigned int *a10, int *a11, unsigned int *a12)
{
  _QWORD *v17;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[16];

  v25[14] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = 0x700000000;
  v21 = a6;
  v22 = 6;
  sub_1C47E2820(a1, (uint64_t)&v23, (uint64_t)&v21);
  sub_1C48E519C(a1, (uint64_t)&v23, *a7, a7[1], a8, a9, a10, a11, a12);
  v17 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v23, v24);
  if (v23 != v25)
    free(v23);
  return v17;
}

_QWORD *sub_1C613B5C4(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, __int128 *a7, unsigned int *a8, int *a9)
{
  _QWORD *v16;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  v18 = a6;
  v19 = 6;
  sub_1C47E2820(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1C613E93C(a1, (uint64_t)&v20, a7, a8, a9);
  v16 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v20, v21);
  if (v20 != v22)
    free(v20);
  return v16;
}

_QWORD *sub_1C613B6D4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, __int128 *a6, __int128 *a7, __int128 *a8, __int128 *a9)
{
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[13];

  v16[12] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x600000000;
  sub_1C613E9B4(a1, (uint64_t)&v14, a4, a5, a6, a7, a8, a9);
  v12 = sub_1C636E56C(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

_QWORD *sub_1C613B7A8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, __int128 *a6, uint64_t *a7, unsigned int *a8, __int128 *a9, __int128 *a10)
{
  _QWORD *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[15];

  v17[14] = *MEMORY[0x1E0C80C00];
  v16 = 0x700000000;
  v15 = v17;
  sub_1C613EA54(a1, (uint64_t)&v15, a4, a5, a6, a7, a8, a9, a10);
  v13 = sub_1C636E56C(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v15, v16);
  if (v15 != v17)
    free(v15);
  return v13;
}

_QWORD *sub_1C613B87C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, __int128 *a8, __int128 *a9, __int128 *a10)
{
  _QWORD *v17;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[11];

  v23[10] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v22 = 0x500000000;
  v19 = a6;
  v20 = 6;
  sub_1C47E2820(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1C613EB10(a1, (uint64_t)&v21, a7, a8, a9, a10);
  v17 = sub_1C5D61678(a1, a2, a3, a4, a5, (uint64_t *)v21, v22);
  if (v21 != v23)
    free(v21);
  return v17;
}

_QWORD *sub_1C613B98C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8, unsigned int *a9, __int128 *a10, __int128 *a11)
{
  _QWORD *v16;
  void *v18;
  uint64_t v19;
  _QWORD v20[13];

  v20[12] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x600000000;
  sub_1C48E5670(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  v16 = sub_1C5D61678(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20)
    free(v18);
  return v16;
}

_QWORD *sub_1C613BA74(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, uint64_t *a6, unsigned int *a7, __int128 *a8, unsigned int *a9, int *a10, int *a11)
{
  _QWORD *v17;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[16];

  v24[14] = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x700000000;
  v20 = a5;
  v21 = 6;
  sub_1C47E2820(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1C48E57E0(a1, (uint64_t)&v22, *a6, a6[1], a7, a8, a9, a10, a11);
  v17 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v22, v23);
  if (v22 != v24)
    free(v22);
  return v17;
}

_QWORD *sub_1C613BB94(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, __int128 *a5, unsigned int *a6, int *a7, __int128 *a8, unsigned int *a9, int *a10)
{
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[17];

  v16[16] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x800000000;
  sub_1C48E5B10(a1, (uint64_t)&v14, a3, a4, a5, a6, a7, a8, a9, a10);
  v12 = sub_1C636E56C(a1, 3576, a2, (llvm *)5, 0, (uint64_t *)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

_QWORD *sub_1C613BC50(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, __int128 *a6, unsigned int *a7, int *a8)
{
  _QWORD *v15;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[9];

  v21[8] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x400000000;
  v17 = a5;
  v18 = 6;
  sub_1C47E2820(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1C613E93C(a1, (uint64_t)&v19, a6, a7, a8);
  v15 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v19, v20);
  if (v19 != v21)
    free(v19);
  return v15;
}

_QWORD *sub_1C613BD54(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, __int128 *a6, unsigned int *a7, __int128 *a8)
{
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x400000000;
  sub_1C48E5CD4(a1, (uint64_t)&v14, a5, a6, a7, a8);
  v12 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

_QWORD *sub_1C613BE28(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t *a8, __int128 *a9, uint64_t a10, int *a11)
{
  _QWORD *v17;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[14];

  v24[12] = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x600000000;
  v20 = a6;
  v21 = 6;
  sub_1C47E2820(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1C47E2820(a1, (uint64_t)&v22, a7);
  sub_1C48E5FF8(a1, (uint64_t)&v22, *a8, a8[1], a9, a10, a11);
  v17 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v22, v23);
  if (v22 != v24)
    free(v22);
  return v17;
}

_QWORD *sub_1C613BF50(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t *a7, unsigned int *a8, uint64_t *a9)
{
  _QWORD *v16;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  v18 = a6;
  v19 = 6;
  sub_1C47E2820(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1C48E61C8(a1, (uint64_t)&v20, *a7, a7[1], a8, a9);
  v16 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v20, v21);
  if (v20 != v22)
    free(v20);
  return v16;
}

_QWORD *sub_1C613C060(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, __int128 *a7, __int128 *a8)
{
  _QWORD *v15;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x300000000;
  v17 = a6;
  v18 = 6;
  sub_1C47E2820(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1C47E28C4(a1, (uint64_t)&v19, a7);
  sub_1C47E28C4(a1, (uint64_t)&v19, a8);
  v15 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v19, v20);
  if (v19 != v21)
    free(v19);
  return v15;
}

_QWORD *sub_1C613C16C(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, __int128 *a7, unsigned int *a8)
{
  _QWORD *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[7];

  v17[6] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x300000000;
  sub_1C613EC38(a1, (uint64_t)&v15, a6, a7, a8);
  v13 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v15, v16);
  if (v15 != v17)
    free(v15);
  return v13;
}

_QWORD *sub_1C613C240(uint64_t a1, int a2, uint64_t a3, int a4, __int128 *a5)
{
  _QWORD *v9;
  uint64_t v11;
  char v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x200000000;
  v11 = a4;
  v12 = 6;
  sub_1C47E2820(a1, (uint64_t)&v13, (uint64_t)&v11);
  sub_1C47E28C4(a1, (uint64_t)&v13, a5);
  v9 = sub_1C636E56C(a1, a2, a3, (llvm *)0xAE, 0, (uint64_t *)v13, v14);
  if (v13 != v15)
    free(v13);
  return v9;
}

_QWORD *sub_1C613C328(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t *a5, __int128 *a6, unsigned int *a7, __int128 *a8)
{
  _QWORD *v15;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[11];

  v21[10] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x500000000;
  v17 = a4;
  v18 = 6;
  sub_1C47E2820(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1C48E6348(a1, (uint64_t)&v19, *a5, a5[1], a6, a7, a8);
  v15 = sub_1C636E56C(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v19, v20);
  if (v19 != v21)
    free(v19);
  return v15;
}

_QWORD *sub_1C613C430(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, __int128 *a5, __int128 *a6, __int128 *a7)
{
  _QWORD *v10;
  void *v12;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  v12 = v14;
  v13 = 0x400000000;
  sub_1C613EB10(a1, (uint64_t)&v12, a4, a5, a6, a7);
  v10 = sub_1C636E56C(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v12, v13);
  if (v12 != v14)
    free(v12);
  return v10;
}

unint64_t sub_1C613C4F8(uint64_t a1, int a2)
{
  _BOOL4 v2;
  unint64_t v3;

  switch(a2)
  {
    case 401:
      v2 = **(unsigned __int8 **)(a1 + 40) == 9;
      v3 = 0x100000000;
      return v3 | v2;
    case 402:
      v2 = **(unsigned __int8 **)(a1 + 40) == 9;
      v3 = 0x100000000;
      return v3 | v2;
    case 403:
      v2 = **(unsigned __int8 **)(a1 + 40) == 9;
      v3 = 0x100000000;
      return v3 | v2;
    case 404:
      v2 = **(unsigned __int8 **)(a1 + 40) == 9;
      v3 = 0x100000000;
      return v3 | v2;
    case 405:
      v3 = 0x200000000;
      goto LABEL_12;
    case 406:
      v3 = 0x200000000;
      v2 = 1;
      return v3 | v2;
    case 407:
      v3 = 0x300000000;
      goto LABEL_12;
    case 408:
      v3 = 0x300000000;
      goto LABEL_14;
    case 409:
      v3 = 0x400000000;
LABEL_12:
      v2 = 1;
      break;
    case 410:
      v3 = 0x400000000;
LABEL_14:
      v2 = 1;
      break;
    case 411:
      v2 = 0;
      v3 = 0x200000000;
      break;
    case 412:
      v2 = 0;
      v3 = 0x200000000;
      break;
    case 413:
      v2 = 0;
      v3 = 0x300000000;
      break;
    case 414:
      v2 = 0;
      v3 = 0x300000000;
      break;
    case 415:
      v2 = 0;
      v3 = 0x400000000;
      break;
    case 416:
      v2 = 0;
      v3 = 0x400000000;
      break;
    default:
      v2 = 0;
      v3 = 0xFFFFFFFF00000000;
      break;
  }
  return v3 | v2;
}

_QWORD *sub_1C613C688(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, __int128 *a7, __int128 *a8, int *a9)
{
  _QWORD *v14;
  void *v16;
  uint64_t v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x400000000;
  sub_1C48E6A94(a1, (uint64_t)&v16, a6, a7, a8, a9);
  v14 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v16, v17);
  if (v16 != v18)
    free(v16);
  return v14;
}

_QWORD *sub_1C613C764(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, __int128 *a6, __int128 *a7, int *a8)
{
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x400000000;
  sub_1C48E6A94(a1, (uint64_t)&v14, a5, a6, a7, a8);
  v12 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

_QWORD *sub_1C613C838(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t *a5, unsigned int *a6, __int128 *a7, __int128 *a8)
{
  _QWORD *v15;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[11];

  v21[10] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x500000000;
  v17 = a4;
  v18 = 6;
  sub_1C47E2820(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1C48E54CC(a1, (uint64_t)&v19, *a5, a5[1], a6, a7, a8);
  v15 = sub_1C636E56C(a1, a2, a3, (llvm *)0xA, 0, (uint64_t *)v19, v20);
  if (v19 != v21)
    free(v19);
  return v15;
}

uint64_t sub_1C613C940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v6;
  int v7;
  int v8;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  _DWORD *v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  v15 = v17;
  v16 = 0x200000000;
  v6 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 16))(a4, a3);
  v7 = *(_DWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a2 + 40);
  sub_1C613F618(&v15, *(_DWORD *)(a1 + 32), v7);
  sub_1C613F618(&v15, *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 40));
  if (v8 == 32 || v7 == 32)
    v10 = 48;
  else
    v10 = 47;
  if (*(_BYTE *)(a1 + 44))
    v11 = v10;
  else
    v11 = 49;
  v12 = v15;
  v13 = sub_1C4884024(v11, v15, v16, v6);
  if (v12 != (_DWORD *)v17)
    free(v12);
  return v13;
}

_QWORD *sub_1C613CA4C(uint64_t a1, int a2, uint64_t a3, __int128 *a4, __int128 *a5, unsigned __int8 *a6, __int128 *a7, __int128 *a8, __int128 *a9)
{
  _QWORD *v16;
  void *v18;
  uint64_t v19;
  _QWORD v20[17];

  v20[16] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x800000000;
  sub_1C47E28C4(a1, (uint64_t)&v18, a4);
  sub_1C47E28C4(a1, (uint64_t)&v18, a5);
  sub_1C48E7AF4(a1, (uint64_t)&v18, *a6, a7, a8, a9);
  v16 = sub_1C636E56C(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v18, v19);
  if (v18 != v20)
    free(v18);
  return v16;
}

_QWORD *sub_1C613CB60(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, int *a7, __int128 *a8, unsigned int *a9)
{
  _QWORD *v16;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  v18 = a6;
  v19 = 6;
  sub_1C47E2820(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1C48E7F3C(a1, (uint64_t)&v20, *a7, a8, a9);
  v16 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v20, v21);
  if (v20 != v22)
    free(v20);
  return v16;
}

_QWORD *sub_1C613CC70(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t *a7, unsigned int *a8, __int128 *a9, unsigned int *a10, unsigned int *a11, int *a12)
{
  _QWORD *v17;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[16];

  v25[14] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = 0x700000000;
  v21 = a6;
  v22 = 6;
  sub_1C47E2820(a1, (uint64_t)&v23, (uint64_t)&v21);
  sub_1C48E80C0(a1, (uint64_t)&v23, *a7, a7[1], a8, a9, a10, a11, a12);
  v17 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v23, v24);
  if (v23 != v25)
    free(v23);
  return v17;
}

_QWORD *sub_1C613CD88(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int *a5, __int128 *a6, unsigned int *a7, unsigned int *a8, int *a9)
{
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[13];

  v16[12] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x600000000;
  sub_1C613FB30(a1, (uint64_t)&v14, a4, a5, a6, a7, a8, a9);
  v12 = sub_1C636E56C(a1, a2, a3, (llvm *)4, 0, (uint64_t *)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

_QWORD *sub_1C613CE5C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int *a5, __int128 *a6, int *a7)
{
  _QWORD *v13;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x400000000;
  v15 = a4;
  v16 = 6;
  sub_1C47E2820(a1, (uint64_t)&v17, (uint64_t)&v15);
  sub_1C48E83F0(a1, (uint64_t)&v17, a5, a6, a7);
  v13 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v17, v18);
  if (v17 != v19)
    free(v17);
  return v13;
}

_QWORD *sub_1C613CF5C(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, int *a7, __int128 *a8, unsigned int *a9, unsigned int *a10, int *a11)
{
  _QWORD *v16;
  void *v18;
  uint64_t v19;
  _QWORD v20[13];

  v20[12] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x600000000;
  sub_1C613FB30(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  v16 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20)
    free(v18);
  return v16;
}

_QWORD *sub_1C613D044(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, unsigned int *a7, __int128 *a8, unsigned int *a9)
{
  _QWORD *v16;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  v18 = a6;
  v19 = 6;
  sub_1C47E2820(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1C48E7DB8(a1, (uint64_t)&v20, *a7, a8, a9);
  v16 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v20, v21);
  if (v20 != v22)
    free(v20);
  return v16;
}

_QWORD *sub_1C613D154(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, int *a7, __int128 *a8, unsigned int *a9, int *a10, unsigned int *a11)
{
  _QWORD *v16;
  void *v18;
  uint64_t v19;
  _QWORD v20[13];

  v20[12] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x600000000;
  sub_1C613FBE0(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  v16 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20)
    free(v18);
  return v16;
}

_QWORD *sub_1C613D23C(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, __int128 *a7, unsigned int *a8, __int128 *a9, unsigned int *a10)
{
  _QWORD *v17;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[11];

  v23[10] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v22 = 0x500000000;
  v19 = a6;
  v20 = 6;
  sub_1C47E2820(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1C47E28C4(a1, (uint64_t)&v21, a7);
  sub_1C613EC38(a1, (uint64_t)&v21, *a8, a9, a10);
  v17 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v21, v22);
  if (v21 != v23)
    free(v21);
  return v17;
}

_QWORD *sub_1C613D35C(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t *a7, __int128 *a8, unsigned int *a9)
{
  _QWORD *v16;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[9];

  v22[8] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x400000000;
  v18 = a6;
  v19 = 6;
  sub_1C47E2820(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1C48E8574(a1, (uint64_t)&v20, *a7, a8, a9);
  v16 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v20, v21);
  if (v20 != v22)
    free(v20);
  return v16;
}

_QWORD *sub_1C613D46C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, __int128 *a6, __int128 *a7, unsigned int *a8, int *a9)
{
  _QWORD *v16;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[11];

  v22[10] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x500000000;
  v18 = a5;
  v19 = 6;
  sub_1C47E2820(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1C47E28C4(a1, (uint64_t)&v20, a6);
  sub_1C613E93C(a1, (uint64_t)&v20, a7, a8, a9);
  v16 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v20, v21);
  if (v20 != v22)
    free(v20);
  return v16;
}

_QWORD *sub_1C613D58C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, __int128 *a6, unsigned int *a7, __int128 *a8, int *a9)
{
  _QWORD *v16;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[11];

  v22[10] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x500000000;
  v18 = a5;
  v19 = 6;
  sub_1C47E2820(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1C47E28C4(a1, (uint64_t)&v20, a6);
  sub_1C48E86FC(a1, (uint64_t)&v20, *a7, a8, a9);
  v16 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v20, v21);
  if (v20 != v22)
    free(v20);
  return v16;
}

_QWORD *sub_1C613D6AC(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, __int128 *a6, unsigned int *a7, __int128 *a8, unsigned int *a9, int *a10)
{
  _QWORD *v14;
  void *v16;
  uint64_t v17;
  _QWORD v18[13];

  v18[12] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x600000000;
  sub_1C613FC90(a1, (uint64_t)&v16, a5, a6, a7, a8, a9, a10);
  v14 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v16, v17);
  if (v16 != v18)
    free(v16);
  return v14;
}

_QWORD *sub_1C613D790(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, __int128 *a6, __int128 *a7, __int128 *a8, __int128 *a9, __int128 *a10)
{
  _QWORD *v13;
  void *v15;
  uint64_t v16;
  _QWORD v17[15];

  v17[14] = *MEMORY[0x1E0C80C00];
  v16 = 0x700000000;
  v15 = v17;
  sub_1C48EBCE8(a1, (uint64_t)&v15, a4, a5, a6, a7, a8, a9, a10);
  v13 = sub_1C636E56C(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v15, v16);
  if (v15 != v17)
    free(v15);
  return v13;
}

_QWORD *sub_1C613D864(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, unsigned int *a6, __int128 *a7)
{
  _QWORD *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[7];

  v15[6] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x300000000;
  sub_1C48EBEAC(a1, (uint64_t)&v13, a5, a6, a7);
  v11 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v13, v14);
  if (v13 != v15)
    free(v13);
  return v11;
}

_QWORD *sub_1C613D934(uint64_t a1, int a2, uint64_t a3, unsigned int a4, __int128 *a5)
{
  _QWORD *v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[3];

  v13[2] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x100000000;
  sub_1C47E28C4(a1, (uint64_t)&v11, a5);
  v9 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v11, v12);
  if (v11 != v13)
    free(v11);
  return v9;
}

_QWORD *sub_1C613D9FC(uint64_t a1, int a2, uint64_t a3, __int128 *a4, uint64_t *a5, __int128 *a6, __int128 *a7, __int128 *a8, __int128 *a9, __int128 *a10, __int128 *a11, __int128 *a12, __int128 *a13, __int128 *a14)
{
  _QWORD *v21;
  void *v23;
  uint64_t v24;
  _QWORD v25[24];

  v25[22] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = 0xB00000000;
  sub_1C47E28C4(a1, (uint64_t)&v23, a4);
  sub_1C48EC030(a1, (uint64_t)&v23, *a5, a5[1], a6, a7, a8, a9, a10, a11, a12, a13, a14);
  v21 = sub_1C636E56C(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v23, v24);
  if (v23 != v25)
    free(v23);
  return v21;
}

_QWORD *sub_1C613DB24(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, int *a7, __int128 *a8, __int128 *a9)
{
  _QWORD *v14;
  void *v16;
  uint64_t v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x400000000;
  sub_1C48EC2C0(a1, (uint64_t)&v16, a6, a7, a8, a9);
  v14 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v16, v17);
  if (v16 != v18)
    free(v16);
  return v14;
}

_QWORD *sub_1C613DC00(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int *a5, __int128 *a6, unsigned int *a7)
{
  _QWORD *v13;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x400000000;
  v15 = a4;
  v16 = 6;
  sub_1C47E2820(a1, (uint64_t)&v17, (uint64_t)&v15);
  sub_1C48E7F3C(a1, (uint64_t)&v17, *a5, a6, a7);
  v13 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v17, v18);
  if (v17 != v19)
    free(v17);
  return v13;
}

_QWORD *sub_1C613DD00(uint64_t a1, int a2, uint64_t a3, unsigned int a4, __int128 *a5, __int128 *a6, __int128 *a7, unsigned int *a8, int *a9)
{
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[13];

  v16[12] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x600000000;
  sub_1C48EC84C(a1, (uint64_t)&v14, a4, a5, a6, a7, a8, a9);
  v12 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

_QWORD *sub_1C613DDD4(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int *a5, __int128 *a6, __int128 *a7, unsigned int *a8, int *a9)
{
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[13];

  v16[12] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x600000000;
  sub_1C48EC9CC(a1, (uint64_t)&v14, a4, a5, a6, a7, a8, a9);
  v12 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

_QWORD *sub_1C613DEA8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t *a5, unsigned int *a6, __int128 *a7, unsigned int *a8, __int128 *a9, int *a10)
{
  _QWORD *v17;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[16];

  v23[14] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v22 = 0x700000000;
  v19 = a4;
  v20 = 6;
  sub_1C47E2820(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1C48ECB84(a1, (uint64_t)&v21, *a5, a5[1], a6, a7, a8, a9, a10);
  v17 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v21, v22);
  if (v21 != v23)
    free(v21);
  return v17;
}

_QWORD *sub_1C613DFC4(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int *a5, __int128 *a6, unsigned int *a7, __int128 *a8, int *a9)
{
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[13];

  v16[12] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x600000000;
  sub_1C6141190(a1, (uint64_t)&v14, a4, a5, a6, a7, a8, a9);
  v12 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

_QWORD *sub_1C613E098(uint64_t a1, int a2, uint64_t a3, unsigned int a4, __int128 *a5, unsigned int *a6, __int128 *a7, unsigned int *a8, __int128 *a9, unsigned int *a10, int *a11)
{
  _QWORD *v17;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[18];

  v24[16] = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x800000000;
  v20 = a4;
  v21 = 6;
  sub_1C47E2820(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1C47E28C4(a1, (uint64_t)&v22, a5);
  sub_1C613FC90(a1, (uint64_t)&v22, *a6, a7, a8, a9, a10, a11);
  v17 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v22, v23);
  if (v22 != v24)
    free(v22);
  return v17;
}

_QWORD *sub_1C613E1C8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, int *a5, __int128 *a6, unsigned int *a7, __int128 *a8, unsigned int *a9, int *a10)
{
  _QWORD *v17;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[16];

  v23[14] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v22 = 0x700000000;
  v19 = a4;
  v20 = 6;
  sub_1C47E2820(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1C48ECD04(a1, (uint64_t)&v21, *a5, a6, a7, a8, a9, a10);
  v17 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v21, v22);
  if (v21 != v23)
    free(v21);
  return v17;
}

_QWORD *sub_1C613E2E4(uint64_t a1, int a2, uint64_t a3, unsigned int a4, __int128 *a5, unsigned int *a6, __int128 *a7, unsigned int *a8)
{
  _QWORD *v15;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[11];

  v21[10] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x500000000;
  v17 = a4;
  v18 = 6;
  sub_1C47E2820(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1C47E28C4(a1, (uint64_t)&v19, a5);
  sub_1C613EC38(a1, (uint64_t)&v19, *a6, a7, a8);
  v15 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v19, v20);
  if (v19 != v21)
    free(v19);
  return v15;
}

_QWORD *sub_1C613E3F8(uint64_t a1, int a2, uint64_t a3, unsigned int a4, __int128 *a5, __int128 *a6, unsigned int *a7)
{
  _QWORD *v10;
  void *v12;
  uint64_t v13;
  _QWORD v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  v12 = v14;
  v13 = 0x400000000;
  sub_1C6141240(a1, (uint64_t)&v12, a4, a5, a6, a7);
  v10 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v12, v13);
  if (v12 != v14)
    free(v12);
  return v10;
}

void sub_1C613E4C4(_QWORD *a1)
{
  sub_1C613E798(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C613E4E8(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, int *a7, __int128 *a8, uint64_t *a9, unsigned int *a10, int *a11)
{
  _QWORD *v16;
  void *v18;
  uint64_t v19;
  _QWORD v20[13];

  v20[12] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x600000000;
  sub_1C613E6E8(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  v16 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20)
    free(v18);
  return v16;
}

_QWORD *sub_1C613E5D0(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t *a7, unsigned int *a8, __int128 *a9, __int128 *a10, unsigned int *a11, int *a12)
{
  _QWORD *v17;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[16];

  v25[14] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = 0x700000000;
  v21 = a6;
  v22 = 6;
  sub_1C47E2820(a1, (uint64_t)&v23, (uint64_t)&v21);
  sub_1C48E42A0(a1, (uint64_t)&v23, *a7, a7[1], a8, a9, a10, a11, a12);
  v17 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v23, v24);
  if (v23 != v25)
    free(v23);
  return v17;
}

void *sub_1C613E6E8(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, __int128 *a5, uint64_t *a6, unsigned int *a7, int *a8)
{
  uint64_t v16;
  char v17;

  v16 = a3;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  v16 = *a4;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  sub_1C47E28C4(a1, a2, a5);
  return sub_1C48E4120(a1, a2, *a6, a6[1], a7, a8);
}

_QWORD *sub_1C613E798(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *a1 = off_1E7FA1B80;
  v2 = (_QWORD *)a1[205];
  if (v2 != a1 + 207)
    free(v2);
  MEMORY[0x1CAA32FB4](a1[202], 8);
  v3 = (_QWORD *)a1[136];
  if (v3 != a1 + 138)
    free(v3);
  v4 = (_QWORD *)a1[118];
  if (v4 != a1 + 120)
    free(v4);
  v5 = (_QWORD *)a1[100];
  if (v5 != a1 + 102)
    free(v5);
  v6 = (_QWORD *)a1[1];
  if (v6 != a1 + 3)
    free(v6);
  return a1;
}

_QWORD *sub_1C613E834(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t *a5, unsigned int *a6, __int128 *a7, __int128 *a8)
{
  _QWORD *v15;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[11];

  v21[10] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x500000000;
  v17 = a4;
  v18 = 6;
  sub_1C47E2820(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1C48E54CC(a1, (uint64_t)&v19, *a5, a5[1], a6, a7, a8);
  v15 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v19, v20);
  if (v19 != v21)
    free(v19);
  return v15;
}

void *sub_1C613E93C(uint64_t a1, uint64_t a2, __int128 *a3, unsigned int *a4, int *a5)
{
  uint64_t v10;
  char v11;

  sub_1C47E28C4(a1, a2, a3);
  v10 = *a4;
  v11 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v10);
  v10 = *a5;
  v11 = 6;
  return sub_1C47E2820(a1, a2, (uint64_t)&v10);
}

void *sub_1C613E9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, __int128 *a5, __int128 *a6, __int128 *a7, __int128 *a8)
{
  uint64_t v16;
  char v17;

  v16 = a3;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  v16 = *a4;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  return sub_1C612E7D0(a1, a2, a5, a6, a7, a8);
}

uint64_t sub_1C613EA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, __int128 *a5, uint64_t *a6, unsigned int *a7, __int128 *a8, __int128 *a9)
{
  uint64_t v17;
  char v18;

  v17 = a3;
  v18 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v17);
  v17 = *a4;
  v18 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v17);
  sub_1C47E28C4(a1, a2, a5);
  return sub_1C48E54CC(a1, a2, *a6, a6[1], a7, a8, a9);
}

void *sub_1C613EB10(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, __int128 *a5, __int128 *a6)
{
  uint64_t v12;
  char v13;

  v12 = *a3;
  v13 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v12);
  sub_1C47E28C4(a1, a2, a4);
  sub_1C47E28C4(a1, a2, a5);
  return sub_1C47E28C4(a1, a2, a6);
}

void *sub_1C613EB9C(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, __int128 *a5, unsigned int *a6, int *a7)
{
  uint64_t v14;
  char v15;

  v14 = a3;
  v15 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v14);
  v14 = *a4;
  v15 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v14);
  return sub_1C613E93C(a1, a2, a5, a6, a7);
}

void *sub_1C613EC38(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, unsigned int *a5)
{
  uint64_t v10;
  char v11;

  v10 = a3;
  v11 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v10);
  sub_1C47E28C4(a1, a2, a4);
  v10 = *a5;
  v11 = 6;
  return sub_1C47E2820(a1, a2, (uint64_t)&v10);
}

_QWORD *sub_1C613ECBC(uint64_t a1, int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t *a6, __int128 *a7, __int128 *a8, int *a9)
{
  _QWORD *v16;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[11];

  v22[10] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x500000000;
  v18 = a5;
  v19 = 6;
  sub_1C47E2820(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1C48E6740(a1, (uint64_t)&v20, *a6, a7, a8, a9);
  v16 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v20, v21);
  if (v20 != v22)
    free(v20);
  return v16;
}

_QWORD *sub_1C613EDCC(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, int *a6, __int128 *a7, unsigned int *a8, int *a9, int *a10)
{
  _QWORD *v14;
  void *v16;
  uint64_t v17;
  _QWORD v18[13];

  v18[12] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x600000000;
  sub_1C613EEAC(a1, (uint64_t)&v16, a5, a6, a7, a8, a9, a10);
  v14 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v16, v17);
  if (v16 != v18)
    free(v16);
  return v14;
}

void *sub_1C613EEAC(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, __int128 *a5, unsigned int *a6, int *a7, int *a8)
{
  uint64_t v16;
  char v17;

  v16 = a3;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  v16 = *a4;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  sub_1C47E28C4(a1, a2, a5);
  return sub_1C48E5960(a1, a2, *a6, a7, a8);
}

_QWORD *sub_1C613EF5C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int a5, __int128 *a6, __int128 *a7)
{
  _QWORD *v13;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[11];

  v19[10] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x500000000;
  v15 = a5;
  v16 = 6;
  sub_1C47E2820(a1, (uint64_t)&v17, (uint64_t)&v15);
  sub_1C48E69CC(a1, (uint64_t)&v17, a6);
  sub_1C48E69CC(a1, (uint64_t)&v17, a7);
  v13 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v17, v18);
  if (v17 != v19)
    free(v17);
  return v13;
}

uint64_t sub_1C613F064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  unsigned int v12;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  unsigned int ExtendedSizeInBits;
  const char *v20;
  uint64_t v21;
  unsigned int v23;
  int v24;
  unsigned int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v12 = a2;
  v28 = a1;
  v29 = a2;
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(unsigned __int8 **)v14;
  v16 = *(_QWORD *)(v14 + 8);
  if ((_BYTE)v15)
  {
    v17 = ((_BYTE)v15 - 75) < 0x2Du || ((_BYTE)v15 + 104) < 0x13u;
    v18 = ((_BYTE)v15 - 8) < 7u || v17;
    v26 = v15;
    v27 = v16;
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v26);
  }
  else
  {
    if ((*(_DWORD *)(v16 + 8) & 0xFE) == 0x12)
      v23 = *(unsigned __int8 *)(**(_QWORD **)(v16 + 16) + 8);
    else
      v23 = *(_DWORD *)(v16 + 8);
    v18 = v23 < 7;
    v26 = v15;
    v27 = v16;
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v26);
  }
  if ((_DWORD)v20 == 1)
  {
    v25 = ExtendedSizeInBits;
    ExtendedSizeInBits = v25;
  }
  v21 = 0;
  if ((a5 & 1) == 0 && v18)
  {
    if (ExtendedSizeInBits == 32 || ExtendedSizeInBits == 16)
    {
      sub_1C48DD498(a1, v12, (uint64_t)&v28, 0, 0, a6, a7);
      *(_QWORD *)a3 = v28;
      *(_DWORD *)(a3 + 8) = v29;
      v26 = 0;
      v27 = 0;
      *(_QWORD *)a4 = sub_1C6366AB4(a7, 0, (const llvm::APInt *)&v26, (llvm *)5, 0, 1, 0);
      *(_DWORD *)(a4 + 8) = v24;
      if (v26)
        llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return v21;
}

uint64_t sub_1C613F208(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  _BYTE *v12;
  _DWORD *v13;
  uint64_t v14;
  char v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v16 = a1;
  if (a1)
    v11 = 5;
  else
    v11 = 2;
  v17 = v19;
  v18 = 0x500000000;
  sub_1C4893E04((char *)&v17, 1uLL, v11);
  v12 = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a6 + 8) + 16))(*(_QWORD *)(a6 + 8), *(_QWORD *)a6);
  sub_1C613F434(&v17, &v16, *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 40), 0);
  sub_1C613F434(&v17, &v16, *(_DWORD *)(a3 + 32), *(_DWORD *)(a3 + 40), 0);
  sub_1C613F434(&v17, &v16, *(_DWORD *)(a4 + 32), *(_DWORD *)(a4 + 40), 1);
  sub_1C613F434(&v17, &v16, *(_DWORD *)(a5 + 32), *(_DWORD *)(a5 + 40), 1);
  v13 = v17;
  v14 = sub_1C4884024(30, v17, v18, v12);
  if (v13 != (_DWORD *)v19)
    free(v13);
  return v14;
}

_QWORD *sub_1C613F354(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, unsigned int *a6, __int128 *a7, __int128 *a8, __int128 *a9, __int128 *a10)
{
  _QWORD *v14;
  void *v16;
  uint64_t v17;
  _QWORD v18[21];

  v18[20] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0xA00000000;
  sub_1C48E742C(a1, (uint64_t)&v16, a5, a6, a7, a8, a9, a10);
  v14 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v16, v17);
  if (v16 != v18)
    free(v16);
  return v14;
}

_DWORD *sub_1C613F434(_DWORD *result, _BYTE *a2, int a3, int a4, char a5)
{
  _DWORD *v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;

  v5 = result;
  if (a3 < 4)
  {
    if ((a5 & 1) != 0)
    {
      v9 = *a2 == 0;
      v10 = 5;
      v11 = 2;
    }
    else
    {
      v9 = a4 == 32;
      v10 = 2;
      v11 = 5;
    }
    if (v9)
      v8 = v11;
    else
      v8 = v10;
    v6 = result[2];
    v7 = result[3];
  }
  else
  {
    v6 = result[2];
    v7 = result[3];
    v8 = 1;
  }
  if (v6 >= v7)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 4);
    v6 = v5[2];
  }
  *(_DWORD *)(*(_QWORD *)v5 + 4 * v6) = v8;
  ++v5[2];
  return result;
}

uint64_t sub_1C613F4CC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  _BYTE *v12;
  _DWORD *v13;
  uint64_t v14;
  char v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v16 = a1;
  if (a1)
    v11 = 5;
  else
    v11 = 2;
  v17 = v19;
  v18 = 0x500000000;
  sub_1C4893E04((char *)&v17, 1uLL, v11);
  v12 = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a6 + 8) + 16))(*(_QWORD *)(a6 + 8), *(_QWORD *)a6);
  sub_1C613F434(&v17, &v16, *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 40), 0);
  sub_1C613F434(&v17, &v16, *(_DWORD *)(a3 + 32), *(_DWORD *)(a3 + 40), 0);
  sub_1C613F434(&v17, &v16, *(_DWORD *)(a4 + 32), *(_DWORD *)(a4 + 40), 1);
  sub_1C613F434(&v17, &v16, *(_DWORD *)(a5 + 32), *(_DWORD *)(a5 + 40), 1);
  v13 = v17;
  v14 = sub_1C4884024(34, v17, v18, v12);
  if (v13 != (_DWORD *)v19)
    free(v13);
  return v14;
}

_DWORD *sub_1C613F618(_DWORD *result, int a2, int a3)
{
  _DWORD *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;

  v3 = result;
  if (a2 < 4)
  {
    if (a3 == 32)
      v6 = 5;
    else
      v6 = 2;
    v4 = result[2];
    v5 = result[3];
  }
  else
  {
    v4 = result[2];
    v5 = result[3];
    v6 = 1;
  }
  if (v4 >= v5)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v4 + 1, 4);
    v4 = v3[2];
  }
  *(_DWORD *)(*(_QWORD *)v3 + 4 * v4) = v6;
  ++v3[2];
  return result;
}

_QWORD *sub_1C613F698(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, __int128 *a6, unsigned int *a7)
{
  _QWORD *v13;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x400000000;
  v15 = a4;
  v16 = 6;
  sub_1C47E2820(a1, (uint64_t)&v17, (uint64_t)&v15);
  sub_1C48E7DB8(a1, (uint64_t)&v17, *a5, a6, a7);
  v13 = sub_1C636E56C(a1, a2, a3, (llvm *)0x1B, 0, (uint64_t *)v17, v18);
  if (v17 != v19)
    free(v17);
  return v13;
}

_QWORD *sub_1C613F798(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t *a7, unsigned int *a8, __int128 *a9, unsigned int *a10, int *a11, int *a12)
{
  _QWORD *v17;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[16];

  v25[14] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = 0x700000000;
  v21 = a6;
  v22 = 6;
  sub_1C47E2820(a1, (uint64_t)&v23, (uint64_t)&v21);
  sub_1C48E57E0(a1, (uint64_t)&v23, *a7, a7[1], a8, a9, a10, a11, a12);
  v17 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v23, v24);
  if (v23 != v25)
    free(v23);
  return v17;
}

_QWORD *sub_1C613F8B0(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, int *a7, __int128 *a8, unsigned int *a9, int *a10, int *a11)
{
  _QWORD *v16;
  void *v18;
  uint64_t v19;
  _QWORD v20[13];

  v20[12] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x600000000;
  sub_1C613EEAC(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  v16 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20)
    free(v18);
  return v16;
}

uint64_t sub_1C613F998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6, uint64_t a7)
{
  unsigned int v12;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  _BOOL4 v17;
  _BOOL4 v18;
  unsigned int ExtendedSizeInBits;
  const char *v20;
  uint64_t v21;
  int v23;
  int v24;
  unsigned int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v12 = a2;
  v28 = a1;
  v29 = a2;
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(unsigned __int8 **)v14;
  v16 = *(_QWORD *)(v14 + 8);
  if ((_BYTE)v15)
  {
    v17 = v15 - 120 < 0x20;
    if (v15 - 15 < 0x3C)
      v17 = 1;
    v18 = v15 - 2 < 6 || v17;
    v26 = v15;
    v27 = v16;
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v26);
  }
  else
  {
    if ((*(_DWORD *)(v16 + 8) & 0xFE) == 0x12)
      v23 = *(unsigned __int8 *)(**(_QWORD **)(v16 + 16) + 8);
    else
      v23 = *(_DWORD *)(v16 + 8);
    v18 = v23 == 13;
    v26 = v15;
    v27 = v16;
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v26);
  }
  if ((_DWORD)v20 == 1)
  {
    v25 = ExtendedSizeInBits;
    ExtendedSizeInBits = v25;
  }
  v21 = 0;
  if ((a5 & 1) == 0 && v18)
  {
    if (ExtendedSizeInBits == 32 || ExtendedSizeInBits == 16)
    {
      sub_1C48DD498(a1, v12, (uint64_t)&v28, 0, 1, a6, a7);
      *(_QWORD *)a3 = v28;
      *(_DWORD *)(a3 + 8) = v29;
      v26 = 0;
      v27 = 0;
      *(_QWORD *)a4 = sub_1C6366AB4(a7, 0, (const llvm::APInt *)&v26, (llvm *)5, 0, 1, 0);
      *(_DWORD *)(a4 + 8) = v24;
      if (v26)
        llvm::MetadataTracking::untrack((uint64_t)&v26, v26);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return v21;
}

void *sub_1C613FB30(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, __int128 *a5, unsigned int *a6, unsigned int *a7, int *a8)
{
  uint64_t v16;
  char v17;

  v16 = a3;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  v16 = *a4;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  sub_1C47E28C4(a1, a2, a5);
  return sub_1C48E8240(a1, a2, *a6, a7, a8);
}

void *sub_1C613FBE0(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, __int128 *a5, unsigned int *a6, int *a7, unsigned int *a8)
{
  uint64_t v16;
  char v17;

  v16 = a3;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  v16 = *a4;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  sub_1C47E28C4(a1, a2, a5);
  return sub_1C48E531C(a1, a2, *a6, a7, a8);
}

void *sub_1C613FC90(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, unsigned int *a5, __int128 *a6, unsigned int *a7, int *a8)
{
  uint64_t v16;
  char v17;

  v16 = a3;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  sub_1C47E28C4(a1, a2, a4);
  v16 = *a5;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  return sub_1C613E93C(a1, a2, a6, a7, a8);
}

_QWORD *sub_1C613FD40(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, __int128 *a6, unsigned int *a7, __int128 *a8, unsigned int *a9)
{
  _QWORD *v16;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[11];

  v22[10] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x500000000;
  v18 = a5;
  v19 = 6;
  sub_1C47E2820(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1C47E28C4(a1, (uint64_t)&v20, a6);
  sub_1C48E7DB8(a1, (uint64_t)&v20, *a7, a8, a9);
  v16 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v20, v21);
  if (v20 != v22)
    free(v20);
  return v16;
}

_QWORD *sub_1C613FE60(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, __int128 *a6, unsigned int *a7, __int128 *a8, unsigned int *a9, uint64_t a10)
{
  _QWORD *v17;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[13];

  v23[12] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v22 = 0x600000000;
  v19 = a5;
  v20 = 6;
  sub_1C47E2820(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1C47E28C4(a1, (uint64_t)&v21, a6);
  sub_1C48E8FA4(a1, (uint64_t)&v21, *a7, a8, a9, a10);
  v17 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v21, v22);
  if (v21 != v23)
    free(v21);
  return v17;
}

_QWORD *sub_1C613FF84(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, uint64_t a6, __int128 *a7, unsigned int *a8)
{
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x400000000;
  sub_1C48E91B0(a1, (uint64_t)&v14, a5, a6, a7, a8);
  v12 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

_QWORD *sub_1C6140058(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, uint64_t a6, __int128 *a7, unsigned int *a8, uint64_t a9)
{
  _QWORD *v16;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[11];

  v22[10] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x500000000;
  v18 = a5;
  v19 = 6;
  sub_1C47E2820(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1C48E93BC(a1, (uint64_t)&v20, *(_QWORD *)a6, *(_BYTE *)(a6 + 8), a7, a8, a9);
  v16 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v20, v21);
  if (v20 != v22)
    free(v20);
  return v16;
}

_QWORD *sub_1C6140170(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, __int128 *a6, unsigned int *a7, uint64_t a8)
{
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x400000000;
  sub_1C48E8FA4(a1, (uint64_t)&v14, a5, a6, a7, a8);
  v12 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

_QWORD *sub_1C6140244(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, uint64_t *a6, unsigned int *a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v16;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[11];

  v22[10] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x500000000;
  v18 = a5;
  v19 = 6;
  sub_1C47E2820(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1C48E95CC(a1, (uint64_t)&v20, *a6, a6[1], a7, a8, a9);
  v16 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v20, v21);
  if (v20 != v22)
    free(v20);
  return v16;
}

_QWORD *sub_1C6140358(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t *a7, unsigned int *a8, __int128 *a9, unsigned int *a10, __int128 *a11, unsigned int *a12)
{
  _QWORD *v17;
  uint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[16];

  v25[14] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = 0x700000000;
  v21 = a6;
  v22 = 6;
  sub_1C47E2820(a1, (uint64_t)&v23, (uint64_t)&v21);
  sub_1C48E97D4(a1, (uint64_t)&v23, *a7, a7[1], a8, a9, a10, a11, a12);
  v17 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v23, v24);
  if (v23 != v25)
    free(v23);
  return v17;
}

_QWORD *sub_1C6140470(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, __int128 *a7, unsigned int *a8, __int128 *a9, unsigned int *a10, uint64_t a11)
{
  _QWORD *v17;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[14];

  v24[12] = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x600000000;
  v20 = a6;
  v21 = 6;
  sub_1C47E2820(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1C47E28C4(a1, (uint64_t)&v22, a7);
  sub_1C48E8FA4(a1, (uint64_t)&v22, *a8, a9, a10, a11);
  v17 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v22, v23);
  if (v22 != v24)
    free(v22);
  return v17;
}

_QWORD *sub_1C6140598(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, __int128 *a7, unsigned int *a8, uint64_t a9, __int128 *a10, unsigned int *a11)
{
  _QWORD *v17;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[14];

  v24[12] = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x600000000;
  v20 = a6;
  v21 = 6;
  sub_1C47E2820(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1C47E28C4(a1, (uint64_t)&v22, a7);
  sub_1C48E91B0(a1, (uint64_t)&v22, *a8, a9, a10, a11);
  v17 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v22, v23);
  if (v22 != v24)
    free(v22);
  return v17;
}

_QWORD *sub_1C61406C0(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t *a7, unsigned int *a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v17;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[11];

  v23[10] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v22 = 0x500000000;
  v19 = a6;
  v20 = 6;
  sub_1C47E2820(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1C48E95CC(a1, (uint64_t)&v21, *a7, a7[1], a8, a9, a10);
  v17 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v21, v22);
  if (v21 != v23)
    free(v21);
  return v17;
}

_QWORD *sub_1C61407D4(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t a7, __int128 *a8, unsigned int *a9, __int128 *a10, unsigned int *a11)
{
  _QWORD *v16;
  void *v18;
  uint64_t v19;
  _QWORD v20[13];

  v20[12] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x600000000;
  sub_1C48E9954(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  v16 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20)
    free(v18);
  return v16;
}

_QWORD *sub_1C61408BC(uint64_t a1, int a2, uint64_t a3, llvm *a4, uint64_t a5, unsigned int a6, uint64_t a7, __int128 *a8, unsigned int *a9, uint64_t a10)
{
  _QWORD *v17;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[11];

  v23[10] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v22 = 0x500000000;
  v19 = a6;
  v20 = 6;
  sub_1C47E2820(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1C48E93BC(a1, (uint64_t)&v21, *(_QWORD *)a7, *(_BYTE *)(a7 + 8), a8, a9, a10);
  v17 = sub_1C636E56C(a1, a2, a3, a4, a5, (uint64_t *)v21, v22);
  if (v21 != v23)
    free(v21);
  return v17;
}

void sub_1C61409D4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C61409E8(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  int v6;

  v6 = 0;
  if ((*(unsigned int (**)(_QWORD, int *))(**(_QWORD **)(a1 + 8) + 80))(*(_QWORD *)(a1 + 8), &v6))
    v4 = 9;
  else
    v4 = 10;
  return sub_1C5D410E8(*(_QWORD *)(a1 + 40), 64, (llvm *)v4, 0, a2, v6);
}

uint64_t sub_1C6140A50(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t *sub_1C6140A5C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v6;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  __int16 v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  int v26;
  unsigned __int8 *v27;
  int v28;

  if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 352))(*(_QWORD *)(a1 + 8)))
    return (uint64_t *)a2;
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(unsigned __int8 **)(a2 + 64);
  v27 = v9;
  if (v9)
    llvm::MetadataTracking::track((uint64_t)&v27, v9, 2);
  v28 = *(_DWORD *)(a2 + 60);
  v10 = *(_QWORD *)(v8 + 832);
  if (v10)
    v11 = *(_WORD *)(v10 + 8);
  else
    v11 = 0;
  v12 = sub_1C5D52060(v8, 199, (const llvm::APInt *)&v27, (llvm *)5, 0, a2, a3, v11);
  v14 = v13;
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(unsigned __int8 **)(a2 + 64);
  v27 = v16;
  if (v16)
  {
    llvm::MetadataTracking::track((uint64_t)&v27, v16, 2);
    v24 = *(unsigned __int8 **)(a2 + 64);
    v17 = *(_DWORD *)(a2 + 60);
    v28 = v17;
    v18 = *(_QWORD *)(a1 + 40);
    v25 = v24;
    if (v24)
    {
      llvm::MetadataTracking::track((uint64_t)&v25, v24, 2);
      v17 = *(_DWORD *)(a2 + 60);
    }
  }
  else
  {
    v17 = *(_DWORD *)(a2 + 60);
    v28 = v17;
    v25 = 0;
    v18 = v15;
  }
  v26 = v17;
  v19 = sub_1C6366AB4(v18, 16, (const llvm::APInt *)&v25, (llvm *)5, 0, 0, 0);
  v22 = 0;
  v23 = *(_QWORD *)(v15 + 832);
  if (v23)
    v22 = *(_WORD *)(v23 + 8);
  v6 = sub_1C5D56C70(v15, 175, (const llvm::APInt *)&v27, (llvm *)5, 0, (uint64_t)v12, v14, v21, (uint64_t)v19, v20, v22);
  if (v25)
    llvm::MetadataTracking::untrack((uint64_t)&v25, v25);
  if (v27)
    llvm::MetadataTracking::untrack((uint64_t)&v27, v27);
  sub_1C612E190(*(_QWORD *)(a1 + 40), a2, a3, (uint64_t)v12);
  sub_1C612E190(*(_QWORD *)(a1 + 40), a2, a3, (uint64_t)v6);
  return v6;
}

uint64_t *sub_1C6140C44(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  __int16 v9;
  uint64_t *v10;
  unsigned __int8 *v12;
  int v13;

  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(unsigned __int8 **)(a2 + 64);
  v12 = v7;
  if (v7)
    llvm::MetadataTracking::track((uint64_t)&v12, v7, 2);
  v13 = *(_DWORD *)(a2 + 60);
  v8 = *(_QWORD *)(v6 + 832);
  if (v8)
    v9 = *(_WORD *)(v8 + 8);
  else
    v9 = 0;
  v10 = sub_1C5D52060(v6, 199, (const llvm::APInt *)&v12, (llvm *)5, 0, a2, a3, v9);
  if (v12)
    llvm::MetadataTracking::untrack((uint64_t)&v12, v12);
  sub_1C612E190(*(_QWORD *)(a1 + 40), a2, a3, (uint64_t)v10);
  return v10;
}

uint64_t sub_1C6140D10(uint64_t result, uint64_t a2, unint64_t *a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;

  v8 = *a5;
  if ((*a5 & 1) != 0)
  {
    v12 = result;
    if (v8 <= 1)
    {
      *a5 = v8 | 2;
      v13 = *(_QWORD *)(result + 40);
      v14 = *(_QWORD *)(*a3 + 88);
      v21 = 0;
      v22 = 0;
      v15 = sub_1C6366AB4(v13, v14, (const llvm::APInt *)&v21, (llvm *)4, 0, 0, 0);
      *a3 = (unint64_t)v15;
      *((_DWORD *)a3 + 2) = v16;
      if (v21)
      {
        llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
        v15 = (_QWORD *)*a3;
      }
      sub_1C612E190(*(_QWORD *)(v12 + 40), a2, 0, (uint64_t)v15);
    }
    v17 = 0;
    v18 = *(_QWORD *)(v12 + 40);
    v21 = 0;
    v22 = 0;
    v19 = *(_QWORD *)(v18 + 832);
    if (v19)
      v17 = *(_WORD *)(v19 + 8);
    *a3 = (unint64_t)sub_1C5D56C70(v18, 146, (const llvm::APInt *)&v21, (llvm *)0x1B, 0, *a3, a3[1], a8, *(_QWORD *)a4, *(_QWORD *)(a4 + 8), v17);
    *((_DWORD *)a3 + 2) = v20;
    if (v21)
      llvm::MetadataTracking::untrack((uint64_t)&v21, v21);
    *(_QWORD *)a4 = 0;
    *(_DWORD *)(a4 + 8) = 0;
    return sub_1C612E190(*(_QWORD *)(v12 + 40), a2, 0, *a3);
  }
  return result;
}

uint64_t sub_1C6140E30(uint64_t a1, unsigned int a2)
{
  return sub_1C5D410E8(*(_QWORD *)(a1 + 40), 64, (llvm *)0x4C, 0, a2, 2);
}

_QWORD *sub_1C6140E4C(uint64_t a1, uint64_t a2, unsigned __int8 a3, __int128 *a4, unsigned int *a5)
{
  _QWORD *v9;
  uint64_t v11;
  char v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];

  v15[4] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x200000000;
  sub_1C47E28C4(a1, (uint64_t)&v13, a4);
  v11 = *a5;
  v12 = 6;
  sub_1C47E2820(a1, (uint64_t)&v13, (uint64_t)&v11);
  v9 = sub_1C636E56C(a1, 8, a2, (llvm *)a3, 0, (uint64_t *)v13, v14);
  if (v13 != v15)
    free(v13);
  return v9;
}

_QWORD *sub_1C6140F34(uint64_t a1, int a2, uint64_t a3, unsigned int a4, __int128 *a5, __int128 *a6, __int128 *a7, int *a8)
{
  _QWORD *v15;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[17];

  v21[16] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x800000000;
  v17 = a4;
  v18 = 6;
  sub_1C47E2820(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1C48EC5B0(a1, (uint64_t)&v19, a5, a6, a7, a8);
  v15 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v19, v20);
  if (v19 != v21)
    free(v19);
  return v15;
}

uint64_t sub_1C6141044(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v11;
  _BYTE *v12;
  _DWORD *v13;
  uint64_t v14;
  char v16;
  _DWORD *v17;
  uint64_t v18;
  _QWORD v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v16 = a1;
  if (a1)
    v11 = 5;
  else
    v11 = 2;
  v17 = v19;
  v18 = 0x500000000;
  sub_1C4893E04((char *)&v17, 1uLL, v11);
  v12 = (_BYTE *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a6 + 8) + 16))(*(_QWORD *)(a6 + 8), *(_QWORD *)a6);
  sub_1C613F434(&v17, &v16, *(_DWORD *)(a2 + 32), *(_DWORD *)(a2 + 40), 0);
  sub_1C613F434(&v17, &v16, *(_DWORD *)(a3 + 32), *(_DWORD *)(a3 + 40), 0);
  sub_1C613F434(&v17, &v16, *(_DWORD *)(a4 + 32), *(_DWORD *)(a4 + 40), 1);
  sub_1C613F434(&v17, &v16, *(_DWORD *)(a5 + 32), *(_DWORD *)(a5 + 40), 1);
  v13 = v17;
  v14 = sub_1C4884024(44, v17, v18, v12);
  if (v13 != (_DWORD *)v19)
    free(v13);
  return v14;
}

void *sub_1C6141190(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, __int128 *a5, unsigned int *a6, __int128 *a7, int *a8)
{
  uint64_t v16;
  char v17;

  v16 = a3;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  v16 = *a4;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  sub_1C47E28C4(a1, a2, a5);
  return sub_1C48E86FC(a1, a2, *a6, a7, a8);
}

void *sub_1C6141240(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, __int128 *a5, unsigned int *a6)
{
  uint64_t v12;
  char v13;

  v12 = a3;
  v13 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v12);
  sub_1C47E28C4(a1, a2, a4);
  sub_1C47E28C4(a1, a2, a5);
  v12 = *a6;
  v13 = 6;
  return sub_1C47E2820(a1, a2, (uint64_t)&v12);
}

const char *sub_1C61412D8(uint64_t a1, int a2)
{
  const char *result;

  result = 0;
  switch(a2)
  {
    case 391:
      result = "AGX2ISD::VRET";
      break;
    case 392:
      result = "AGX2ISD::FRET";
      break;
    case 393:
    case 394:
    case 396:
    case 397:
    case 426:
    case 430:
      return result;
    case 395:
      result = "AGX2ISD::READ_SHARED";
      break;
    case 398:
      result = "AGX2ISD::READ_COEFF";
      break;
    case 399:
      result = "AGX2ISD::WRITE_UNIFORM";
      break;
    case 400:
      result = "AGX2ISD::READ_ADDRESS";
      break;
    case 401:
      result = "AGX2ISD::ITR";
      break;
    case 402:
      result = "AGX2ISD::ITR_PROJ";
      break;
    case 403:
      result = "AGX2ISD::ITR_SAT";
      break;
    case 404:
      result = "AGX2ISD::ITR_PROJ_SAT";
      break;
    case 405:
      result = "AGX2ISD::ITR_16x2";
      break;
    case 406:
      result = "AGX2ISD::ITR_PROJ_16x2";
      break;
    case 407:
      result = "AGX2ISD::ITR_3D";
      break;
    case 408:
      result = "AGX2ISD::ITR_PROJ_16x3";
      break;
    case 409:
      result = "AGX2ISD::ITR_4D";
      break;
    case 410:
      result = "AGX2ISD::ITR_PROJ_16x4";
      break;
    case 411:
      result = "AGX2ISD::ITR_32x2";
      break;
    case 412:
      result = "AGX2ISD::ITR_PROJ_32x2";
      break;
    case 413:
      result = "AGX2ISD::ITR_32x3";
      break;
    case 414:
      result = "AGX2ISD::ITR_PROJ_32x3";
      break;
    case 415:
      result = "AGX2ISD::ITR_32x4";
      break;
    case 416:
      result = "AGX2ISD::ITR_PROJ_32x4";
      break;
    case 417:
      result = "AGX2ISD::RCP";
      break;
    case 418:
      result = "AGX2ISD::RSQRT";
      break;
    case 419:
      result = "AGX2ISD::SQRTSTEP";
      break;
    case 420:
      result = "AGX2ISD::QREFL";
      break;
    case 421:
      result = "AGX2ISD::F16DIVSTEP";
      break;
    case 422:
      result = "AGX2ISD::FPTOU8";
      break;
    case 423:
      result = "AGX2ISD::FPTOS8";
      break;
    case 424:
      result = "AGX2ISD::FPTOU8_SCALE";
      break;
    case 425:
      result = "AGX2ISD::FPTOS8_SCALE";
      break;
    case 427:
      result = "AGX2ISD::BIT_EXTRACT";
      break;
    case 428:
      result = "AGX2ISD::SELECT_CC_NNAN";
      break;
    case 429:
      result = "AGX2ISD::FLUSH_DENORM";
      break;
    case 431:
      result = "AGX2ISD::F16MATMAD4x4";
      break;
    case 432:
      result = "AGX2ISD::F16MATMAD8x8";
      break;
    case 433:
      result = "AGX2ISD::F32MATMAD4x4";
      break;
    case 434:
      result = "AGX2ISD::F32MATMAD8x8";
      break;
    case 435:
      result = "AGX2ISD::SIMDSHFFUPI";
      break;
    case 436:
      result = "AGX2ISD::SIMDSHFFDNI";
      break;
    case 437:
      result = "AGX2ISD::SIMDSHFFUPF";
      break;
    case 438:
      result = "AGX2ISD::SIMDSHFFDNF";
      break;
    default:
      switch(a2)
      {
        case 890:
          result = "AGX2ISD::SPILL8";
          break;
        case 891:
          result = "AGX2ISD::SPILL16";
          break;
        case 892:
          result = "AGX2ISD::SPILL32";
          break;
        case 893:
          result = "AGX2ISD::SPILL48";
          break;
        case 894:
          result = "AGX2ISD::SPILL64";
          break;
        case 895:
          result = "AGX2ISD::SPILL96";
          break;
        case 896:
          result = "AGX2ISD::SPILL128";
          break;
        case 897:
          result = "AGX2ISD::RELOAD8";
          break;
        case 898:
          result = "AGX2ISD::RELOAD16";
          break;
        case 899:
          result = "AGX2ISD::RELOAD32";
          break;
        case 900:
          result = "AGX2ISD::RELOAD48";
          break;
        case 901:
          result = "AGX2ISD::RELOAD64";
          break;
        case 902:
          result = "AGX2ISD::RELOAD96";
          break;
        case 903:
          result = "AGX2ISD::RELOAD128";
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t sub_1C61415C4(int a1)
{
  uint64_t result;
  unsigned int v3;

  result = 1;
  if (((a1 - 222) > 0x13 || ((1 << (a1 + 34)) & 0x81203) == 0) && (a1 - 417) >= 5)
  {
    v3 = a1 - 96;
    if (v3 > 0x2D || ((1 << v3) & 0x200000000007) == 0)
      return 0;
  }
  return result;
}

uint64_t sub_1C6141628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  llvm::APInt *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v30;
  llvm::APInt *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  uint64_t i;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  int v52;
  uint64_t v53;
  unsigned __int8 *v54;
  int v55;

  if (**(_BYTE **)(a2 + 40) != 2)
    return 0;
  v6 = *(unsigned __int8 **)(a2 + 64);
  v54 = v6;
  if (v6)
    llvm::MetadataTracking::track((uint64_t)&v54, v6, 2);
  v55 = *(_DWORD *)(a2 + 60);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)v7;
  v9 = *(_DWORD *)(v7 + 8);
  v10 = *(_QWORD *)(v7 + 40);
  v11 = *(_QWORD *)(v7 + 48);
  if (*(_WORD *)(v10 + 24) != 193)
    goto LABEL_13;
  if (*(_WORD *)(v8 + 24) != 193)
    goto LABEL_26;
  v12 = *(_QWORD *)(v10 + 48);
  if (!v12)
    goto LABEL_13;
  v13 = 1;
  do
  {
    if (*(_DWORD *)(v12 + 8) == (_DWORD)v11)
    {
      if (!v13)
        goto LABEL_13;
      --v13;
    }
    v12 = *(_QWORD *)(v12 + 32);
  }
  while (v12);
  if (!v13)
  {
LABEL_26:
    v15 = v9;
    v14 = v8;
  }
  else
  {
LABEL_13:
    v14 = v10;
    v15 = v11;
    v10 = v8;
    LODWORD(v11) = v9;
  }
  if (*(_WORD *)(v10 + 24) != 193)
    goto LABEL_52;
  v16 = *(uint64_t **)(v10 + 32);
  v17 = *v16;
  if (*(_WORD *)(*v16 + 24) == 171)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v17 + 32) + 40);
    v19 = *(unsigned __int16 *)(v18 + 24);
    if (v19 == 35 || v19 == 11)
    {
      v21 = *(_QWORD *)(v18 + 80);
      v22 = (llvm::APInt *)(v21 + 24);
      v23 = *(_DWORD *)(v21 + 32);
      if (v23 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v22) == v23 - 1)
          goto LABEL_52;
      }
      else if (*(_QWORD *)v22 == 1)
      {
        goto LABEL_52;
      }
    }
  }
  if (*(_WORD *)(v14 + 24) != 193)
    goto LABEL_39;
  v26 = **(_QWORD **)(v14 + 32);
  if (*(_WORD *)(v26 + 24) != 171)
    goto LABEL_39;
  v27 = *(_QWORD *)(*(_QWORD *)(v26 + 32) + 40);
  v28 = *(unsigned __int16 *)(v27 + 24);
  if (v28 != 35 && v28 != 11)
    goto LABEL_39;
  v30 = *(_QWORD *)(v27 + 80);
  v31 = (llvm::APInt *)(v30 + 24);
  v32 = *(_DWORD *)(v30 + 32);
  if (v32 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(v31) != v32 - 1)
      goto LABEL_39;
LABEL_52:
    v24 = 0;
    goto LABEL_53;
  }
  if (*(_QWORD *)v31 == 1)
    goto LABEL_52;
LABEL_39:
  v33 = *(_QWORD *)(v10 + 48);
  if (!v33)
    goto LABEL_46;
  v34 = 1;
  do
  {
    if (*(_DWORD *)(v33 + 8) == (_DWORD)v11)
    {
      if (!v34)
        goto LABEL_46;
      --v34;
    }
    v33 = *(_QWORD *)(v33 + 32);
  }
  while (v33);
  if (v34)
  {
LABEL_46:
    for (i = *(_QWORD *)(a2 + 48); i; i = *(_QWORD *)(i + 32))
    {
      v36 = *(unsigned __int16 *)(*(_QWORD *)(i + 16) + 24);
      if (v36 == 190 || v36 == 259)
        goto LABEL_52;
    }
  }
  v37 = *(unsigned __int16 *)(a2 + 24);
  if (v37 == 172)
  {
    v47 = *(_QWORD *)(a3 + 16);
    v48 = v16[1];
    v49 = v16[5];
    v50 = v16[6];
    v51 = sub_1C6366AB4(v47, 1, (const llvm::APInt *)&v54, (llvm *)2, 0, 0, 0);
    v45 = sub_1C63698B8(v47, (const char *)0xC0, (const llvm::APInt *)&v54, (llvm *)2, 0, v17, v48, v53, v49, v50, (uint64_t)v51, v52, v14, v15, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v10 + 32) + 88));
  }
  else
  {
    if (v37 != 171)
      goto LABEL_52;
    v38 = *(_QWORD *)(a3 + 16);
    v39 = v16[1];
    v40 = v16[5];
    v41 = v16[6];
    v42 = sub_1C6366AB4(v38, 0, (const llvm::APInt *)&v54, (llvm *)2, 0, 0, 0);
    v45 = sub_1C63698B8(v38, (const char *)0xC0, (const llvm::APInt *)&v54, (llvm *)2, 0, v17, v39, v44, v40, v41, v14, v15, (uint64_t)v42, v43, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 80), *(_QWORD *)(*(_QWORD *)(v10 + 32) + 88));
  }
  *(_QWORD *)a1 = v45;
  *(_DWORD *)(a1 + 8) = v46;
  v24 = 1;
LABEL_53:
  if (v54)
    llvm::MetadataTracking::untrack((uint64_t)&v54, v54);
  return v24;
}

BOOL sub_1C6141934(uint64_t a1)
{
  int v1;

  v1 = *(__int16 *)(a1 + 24);
  return (v1 - 101) < 0x27 || (v1 - 220) <= 1;
}

_QWORD *sub_1C6141960(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int *a5, unsigned int *a6, __int128 *a7, int *a8, unsigned int *a9, unsigned int *a10, __int128 *a11)
{
  _QWORD *v14;
  void *v16;
  uint64_t v17;
  _QWORD v18[17];

  v18[16] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x800000000;
  sub_1C49155A8(a1, (uint64_t)&v16, a4, a5, a6, a7, a8, a9, a10, a11);
  v14 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v16, v17);
  if (v16 != v18)
    free(v16);
  return v14;
}

_QWORD *sub_1C6141A3C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, __int128 *a6, unsigned int *a7, unsigned int *a8, __int128 *a9)
{
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[13];

  v16[12] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x600000000;
  sub_1C491585C(a1, (uint64_t)&v14, a4, a5, a6, a7, a8, a9);
  v12 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

_QWORD *sub_1C6141B10(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, unsigned int *a8, __int128 *a9)
{
  _QWORD *v16;
  uint64_t v18;
  char v19;
  void *v20;
  uint64_t v21;
  _QWORD v22[13];

  v22[12] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x600000000;
  v18 = a4;
  v19 = 6;
  sub_1C47E2820(a1, (uint64_t)&v20, (uint64_t)&v18);
  sub_1C6142FF0(a1, (uint64_t)&v20, *a5, a6, a7, a8, a9);
  v16 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v20, v21);
  if (v20 != v22)
    free(v20);
  return v16;
}

_QWORD *sub_1C6141C28(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, unsigned int *a6, unsigned int *a7, __int128 *a8)
{
  _QWORD *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[11];

  v15[10] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x500000000;
  sub_1C6142FF0(a1, (uint64_t)&v13, a4, a5, a6, a7, a8);
  v11 = sub_1C636E56C(a1, a2, a3, (llvm *)5, 0, (uint64_t *)v13, v14);
  if (v13 != v15)
    free(v13);
  return v11;
}

_QWORD *sub_1C6141CF4(uint64_t a1, uint64_t a2, int *a3, __int128 *a4, int *a5)
{
  _QWORD *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[7];

  v11[6] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = 0x300000000;
  sub_1C48E83F0(a1, (uint64_t)&v9, a3, a4, a5);
  v7 = sub_1C636E56C(a1, 2162, a2, (llvm *)4, 0, (uint64_t *)v9, v10);
  if (v9 != v11)
    free(v9);
  return v7;
}

uint64_t sub_1C6141DA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v16;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  unsigned __int8 **v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  int v25;

  if ((int)a4 <= 99 || (a4 - 100) > 8)
    goto LABEL_10;
  v16 = 1 << (a4 - 100);
  if ((v16 & 0x19B) != 0)
    return a2;
  if ((v16 & 0x44) != 0)
  {
    v18 = *(unsigned __int8 **)a7;
    v24 = v18;
    if (v18)
      llvm::MetadataTracking::track((uint64_t)&v24, v18, 2);
    v25 = *(_DWORD *)(a7 + 8);
    sub_1C4904450(a2, a3, (const llvm::APInt *)&v24, a8, a4, a6, a1, a9, 0);
    v19 = v24;
    if (v24)
    {
      v20 = &v24;
LABEL_14:
      llvm::MetadataTracking::untrack((uint64_t)v20, v19);
    }
  }
  else
  {
LABEL_10:
    v21 = *(unsigned __int8 **)a7;
    v22 = v21;
    if (v21)
      llvm::MetadataTracking::track((uint64_t)&v22, v21, 2);
    v23 = *(_DWORD *)(a7 + 8);
    sub_1C4904450(a2, a3, (const llvm::APInt *)&v22, a8, a4, a6, a1, a9, 1);
    v19 = v22;
    if (v22)
    {
      v20 = &v22;
      goto LABEL_14;
    }
  }
  return a2;
}

uint64_t sub_1C6141EF4(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  uint64_t v8;
  void *v10;
  _QWORD v11[39];
  void *v12[2];
  _QWORD v13[25];

  v13[24] = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a5 + 8))
    return 1;
  if (a2 > 100)
  {
    v10 = sub_1C485CC1C;
    if (a2 == 108)
      v10 = sub_1C485C6D4;
    if (a2 == 101)
      v7 = sub_1C485C6D4;
    else
      v7 = v10;
  }
  else
  {
    v7 = sub_1C485C854;
  }
  v12[0] = v13;
  v12[1] = (void *)0x1000000000;
  llvm::CCState::CCState((uint64_t)v11, a2, a4, a3, (uint64_t)v12, a6);
  v8 = llvm::CCState::CheckReturn((uint64_t)v11, a5, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))v7);
  sub_1C476CC0C(v11);
  if (v12[0] != v13)
    free(v12[0]);
  return v8;
}

uint64_t sub_1C6141FF8(uint64_t a1, char *a2, uint64_t a3)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (a3 != 1)
    return sub_1C63773C8(a1, a2, a3);
  v3 = *a2 - 102;
  v4 = v3 > 0xC;
  v5 = (1 << v3) & 0x1005;
  if (v4 || v5 == 0)
    return sub_1C63773C8(a1, a2, a3);
  else
    return 1;
}

uint64_t sub_1C6142030(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;
  int v7;

  if (a4 != 1)
    return sub_1C5D9305C(a1, a2, a3, a4, a5);
  result = 0;
  v7 = (char)*a3;
  if (v7 != 114 && v7 != 104)
  {
    if (v7 == 102)
      return 0;
    return sub_1C5D9305C(a1, a2, a3, a4, a5);
  }
  return result;
}

unint64_t sub_1C6142084(uint64_t a1, uint64_t a2, BOOL a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[2];

  v6[0] = a4;
  v6[1] = a5;
  if (!(_BYTE)a4)
  {
    if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
      return 4;
    return sub_1C612EE78((llvm::EVT *)v6, a2, a3);
  }
  if (a4 - 15 < 0x9C)
    return sub_1C612EE78((llvm::EVT *)v6, a2, a3);
  return 4;
}

uint64_t *sub_1C61420D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, const llvm::APInt *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v12 = sub_1C636A8B4(a1, 1, 0, 172, 0);
  v14 = v13;
  v21 = a2;
  v22 = a3;
  v23 = sub_1C63662D4(a1, a4, a6, 1);
  v24 = v15;
  v16 = sub_1C63662D4(a1, a5, a6, 1);
  v17 = 0;
  v25 = v16;
  v26 = v18;
  v19 = *(_QWORD *)(a1 + 832);
  if (v19)
    v17 = *(_WORD *)(v19 + 8);
  return sub_1C636D410(a1, (const char *)0x10D, a6, v12, v14, &v21, 3, v17);
}

uint64_t sub_1C61421D8(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 4)
    return 4;
  else
    return 5;
}

void sub_1C61421EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(v2 + 8) & 4) != 0)
  {
    v4 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v4)
    {
      v5 = 0;
      v6 = 32 * v4;
      v7 = 2;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(v2 + 40) + v7) & 4) != 0)
        {
          v8 = *(_QWORD *)(a2 + 32) + v5;
          if (*(_DWORD *)(v8 + 4))
            llvm::MachineOperand::setIsDef(v8, 1);
        }
        v5 += 32;
        v7 += 6;
      }
      while (v6 != v5);
    }
  }
}

uint64_t *sub_1C614226C(uint64_t a1, uint64_t a2, unint64_t a3, llvm *a4, uint64_t a5, int a6, const llvm::APInt *a7, uint64_t a8)
{
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  const llvm::APInt *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  llvm::EVT *v33;
  const char *v34;
  llvm::LLVMContext *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const llvm::APInt *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v44;
  unsigned __int8 *v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  llvm::LLVMContext *v53;
  uint64_t *v54;
  unint64_t v55;

  v13 = a3;
  v14 = (uint64_t *)a2;
  v54 = (uint64_t *)a2;
  v55 = a3;
  if (!a6)
  {
    v27 = (unsigned __int8 *)(*(_QWORD *)(a2 + 40) + 16 * a3);
    v28 = *v27;
    if (v28 != 174 && ((_DWORD)v28 != a4 || !(_BYTE)a4 && *((_QWORD *)v27 + 1) != a5))
    {
      v29 = *(_QWORD *)(a8 + 16);
      v30 = *(_QWORD *)(v29 + 832);
      if (v30)
        v31 = *(_WORD *)(v30 + 8);
      else
        v31 = 0;
      return sub_1C5D52060(v29, 216, a7, a4, a5, a2, a3, v31);
    }
    return v14;
  }
  if ((_BYTE)a4)
  {
    if (a4 == 10)
    {
      v15 = *(_QWORD *)(a8 + 16);
      v16 = *(_QWORD *)(v15 + 832);
      if (v16)
        v17 = *(_WORD *)(v16 + 8);
      else
        v17 = 0;
      v18 = a7;
      v19 = 9;
      v20 = 0;
LABEL_7:
      v14 = sub_1C5D52060(v15, 216, v18, (llvm *)v19, v20, (uint64_t)v14, v13, v17);
      LODWORD(v13) = v21;
      v54 = v14;
      LODWORD(v55) = v21;
      goto LABEL_8;
    }
    if (((_BYTE)a4 - 120) < 0x20u
      || ((_BYTE)a4 - 2) < 6u
      || ((_BYTE)a4 - 15) < 0x3Cu)
    {
LABEL_24:
      v33 = *(llvm::EVT **)(*(_QWORD *)(a8 + 16) + 56);
      v35 = sub_1C6131A64((unsigned int *)&v54);
      if ((_DWORD)v34 == 1)
      {
        v53 = v35;
        v35 = v53;
      }
      v19 = sub_1C4815B1C(v33, v35);
      v20 = v36;
      v15 = *(_QWORD *)(a8 + 16);
      v14 = v54;
      v13 = v55;
      v37 = *(_QWORD *)(v15 + 832);
      if (v37)
        v17 = *(_WORD *)(v37 + 8);
      else
        v17 = 0;
      v18 = a7;
      goto LABEL_7;
    }
  }
  else
  {
    if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12)
      v32 = *(unsigned __int8 *)(**(_QWORD **)(a5 + 16) + 8);
    else
      v32 = *(_DWORD *)(a5 + 8);
    if (v32 == 13)
      goto LABEL_24;
  }
LABEL_8:
  if (a6 != 1)
  {
    if (a6 == 2)
    {
      v22 = *(_QWORD *)(a8 + 16);
      v23 = v55;
      v38 = *(_QWORD *)(v22 + 832);
      if (v38)
        v25 = *(_WORD *)(v38 + 8);
      else
        v25 = 0;
      v26 = 198;
    }
    else
    {
      if (a6 != 3)
        llvm::report_fatal_error((llvm *)"Unexpected ext type for load", (const char *)1);
      v22 = *(_QWORD *)(a8 + 16);
      v23 = v55;
      v24 = *(_QWORD *)(v22 + 832);
      if (v24)
        v25 = *(_WORD *)(v24 + 8);
      else
        v25 = 0;
      v26 = 199;
    }
    goto LABEL_36;
  }
  if (a4 == 10)
  {
    v22 = *(_QWORD *)(a8 + 16);
    v23 = v55;
    v44 = *(_QWORD *)(v22 + 832);
    if (v44)
      v25 = *(_WORD *)(v44 + 8);
    else
      v25 = 0;
    v26 = 215;
    v39 = a7;
    v40 = 10;
    v41 = 0;
    goto LABEL_37;
  }
  v45 = (unsigned __int8 *)(v14[5] + 16 * v13);
  v46 = *v45;
  if (v46 != a4)
  {
    if ((_BYTE)a4)
    {
      if (((_BYTE)a4 - 120) < 0x20u
        || ((_BYTE)a4 - 2) < 6u
        || ((_BYTE)a4 - 15) < 0x3Cu)
      {
LABEL_49:
        v22 = *(_QWORD *)(a8 + 16);
        v23 = v55;
        v49 = *(_QWORD *)(v22 + 832);
        if (v49)
          v25 = *(_WORD *)(v49 + 8);
        else
          v25 = 0;
        v26 = 200;
LABEL_36:
        v39 = a7;
        v40 = (uint64_t)a4;
        v41 = a5;
LABEL_37:
        v14 = sub_1C5D52060(v22, v26, v39, (llvm *)v40, v41, (uint64_t)v14, v23, v25);
        LODWORD(v55) = v42;
        return v14;
      }
      goto LABEL_68;
    }
    goto LABEL_46;
  }
  v47 = *((_QWORD *)v45 + 1);
  if (!(_BYTE)a4 && v47 != a5)
  {
LABEL_46:
    if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12)
      v48 = *(unsigned __int8 *)(**(_QWORD **)(a5 + 16) + 8);
    else
      v48 = *(_DWORD *)(a5 + 8);
    if (v48 == 13)
      goto LABEL_49;
    if (v46 != a4)
    {
LABEL_73:
      if ((*(_DWORD *)(a5 + 8) & 0xFE) == 0x12)
        v51 = *(unsigned __int8 *)(**(_QWORD **)(a5 + 16) + 8);
      else
        v51 = *(_DWORD *)(a5 + 8);
      if (v51 <= 6)
        goto LABEL_78;
      return v14;
    }
    v47 = *((_QWORD *)v45 + 1);
  }
  if (*v45)
    v50 = 1;
  else
    v50 = v47 == a5;
  if (v50)
    return v14;
LABEL_68:
  if (!(_BYTE)a4)
    goto LABEL_73;
  if (((_BYTE)a4 + 104) < 0x13u
    || ((_BYTE)a4 - 8) < 7u
    || ((_BYTE)a4 - 75) < 0x2Du)
  {
LABEL_78:
    v22 = *(_QWORD *)(a8 + 16);
    v23 = v55;
    v52 = *(_QWORD *)(v22 + 832);
    if (v52)
      v25 = *(_WORD *)(v52 + 8);
    else
      v25 = 0;
    v26 = 215;
    goto LABEL_36;
  }
  return v14;
}

BOOL sub_1C6142668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int AddrSpace;
  unint64_t v9;
  const char *v10;
  unint64_t v11;
  _QWORD v12[2];

  v12[0] = a4;
  v12[1] = a5;
  if ((_BYTE)a4)
  {
    if (a4 - 15 >= 0x9C)
      goto LABEL_7;
  }
  else if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
  {
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(a2 + 48);
  if (!v5 || *(_QWORD *)(v5 + 32))
    return 0;
LABEL_7:
  AddrSpace = llvm::MachinePointerInfo::getAddrSpace(*(llvm::MachinePointerInfo **)(a2 + 96));
  if (AddrSpace != 64 && AddrSpace != 3)
    return 1;
  v9 = sub_1C47C1C70((unsigned __int8 *)v12);
  if ((_DWORD)v10 == 1)
  {
    v11 = v9;
    v9 = v11;
  }
  return (v9 & 0x1FFFFFFFFFFFFFFELL) != 0;
}

BOOL sub_1C6142710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t ExtendedSizeInBits;
  const char *v6;
  unint64_t v8;
  _QWORD v9[2];

  v9[0] = a4;
  v9[1] = a5;
  if ((_BYTE)a4)
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v9);
  else
    ExtendedSizeInBits = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v9);
  if ((_DWORD)v6 == 1)
  {
    v8 = ExtendedSizeInBits;
    ExtendedSizeInBits = v8;
  }
  return ExtendedSizeInBits > 0x1F;
}

uint64_t sub_1C6142778()
{
  return 0;
}

uint64_t sub_1C6142780(unint64_t a1, llvm::EVT *a2, _BOOL8 a3, uint64_t a4)
{
  _BYTE v5[24];

  if (*(_BYTE *)(a1 + 16))
    return 0;
  llvm::TargetLoweringBase::getTypeConversion(a1, a2, a3, a4, (uint64_t)v5);
  if (v5[0] <= 6u)
    return (0x2Bu >> v5[0]) & 1;
  else
    return 1;
}

uint64_t sub_1C61427CC()
{
  return 0;
}

uint64_t sub_1C61427D4()
{
  return 1;
}

uint64_t sub_1C61427DC()
{
  return 1;
}

uint64_t sub_1C61427E4()
{
  return 0;
}

_QWORD *sub_1C61427EC(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, __int128 *a6)
{
  _QWORD *v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[7];

  v13[6] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x300000000;
  sub_1C61428B0(a1, (uint64_t)&v11, a4, a5, a6);
  v9 = sub_1C636E56C(a1, a2, a3, (llvm *)1, 0, (uint64_t *)v11, v12);
  if (v11 != v13)
    free(v11);
  return v9;
}

void *sub_1C61428B0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, __int128 *a5)
{
  uint64_t v10;
  char v11;

  v10 = a3;
  v11 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v10);
  v10 = *a4;
  v11 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v10);
  return sub_1C47E28C4(a1, a2, a5);
}

_QWORD *sub_1C6142934(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, unsigned int *a6, __int128 *a7, int *a8)
{
  _QWORD *v15;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[11];

  v21[10] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x500000000;
  v17 = a5;
  v18 = 6;
  sub_1C47E2820(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1C6142D14(a1, (uint64_t)&v19, *a6, a7, a8);
  v15 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v19, v20);
  if (v19 != v21)
    free(v19);
  return v15;
}

_QWORD *sub_1C6142A38(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, unsigned int *a6, __int128 *a7, __int128 *a8)
{
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  _QWORD v16[13];

  v16[12] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x600000000;
  sub_1C4913D3C(a1, (uint64_t)&v14, a5, a6, a7, a8);
  v12 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v14, v15);
  if (v14 != v16)
    free(v14);
  return v12;
}

_QWORD *sub_1C6142B0C(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, unsigned int a5, unsigned int *a6, unsigned int *a7, unsigned int *a8)
{
  _QWORD *v15;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[9];

  v21[8] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x400000000;
  v17 = a5;
  v18 = 6;
  sub_1C47E2820(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1C4913FB8(a1, (uint64_t)&v19, *a6, a7, a8);
  v15 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v19, v20);
  if (v19 != v21)
    free(v19);
  return v15;
}

_QWORD *sub_1C6142C10(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, int a5, unsigned int *a6, unsigned int *a7, int *a8)
{
  _QWORD *v15;
  uint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[9];

  v21[8] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x400000000;
  v17 = a5;
  v18 = 6;
  sub_1C47E2820(a1, (uint64_t)&v19, (uint64_t)&v17);
  sub_1C48E8240(a1, (uint64_t)&v19, *a6, a7, a8);
  v15 = sub_1C636E56C(a1, a2, a3, (llvm *)a4, 0, (uint64_t *)v19, v20);
  if (v19 != v21)
    free(v19);
  return v15;
}

void *sub_1C6142D14(uint64_t a1, uint64_t a2, unsigned int a3, __int128 *a4, int *a5)
{
  uint64_t v10;
  char v11;

  v10 = a3;
  v11 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v10);
  sub_1C48E69CC(a1, a2, a4);
  v10 = *a5;
  v11 = 6;
  return sub_1C47E2820(a1, a2, (uint64_t)&v10);
}

llvm::raw_ostream *sub_1C6142D98(uint64_t a1, llvm::raw_ostream *a2)
{
  unint64_t v3;
  unint64_t *v4;
  int v5;
  int v6;
  llvm::raw_ostream *v7;
  unint64_t v8;
  unint64_t v9;
  llvm::raw_ostream *v10;
  int v11;
  int i;

  v4 = (unint64_t *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if ((v3 & 1) != 0)
  {
    v6 = __clz(__rbit64((v3 >> 1) & ~(-1 << (v3 >> 58))));
    if (((v3 >> 1) & ~(-1 << (v3 >> 58))) != 0)
      v5 = v6;
    else
      v5 = -1;
  }
  else
  {
    v5 = sub_1C476B7EC(v3);
  }
  sub_1C4816AD8(a2, "libaccess");
  v7 = sub_1C4816AD8(a2, "[");
  v8 = *v4;
  if ((*v4 & 1) != 0)
    v9 = v8 >> 58;
  else
    v9 = *(unsigned int *)(v8 + 64);
  v10 = llvm::raw_ostream::operator<<(v7, v9);
  sub_1C4816AD8(v10, "]: {");
  if (v5 != -1)
  {
    llvm::raw_ostream::operator<<(a2, v5);
    v11 = sub_1C49143F4(v4, v5);
    if (v11 != -1)
    {
      for (i = v11; i != -1; i = sub_1C49143F4(v4, i))
      {
        sub_1C4816AD8(a2, " ");
        llvm::raw_ostream::operator<<(a2, i);
      }
    }
  }
  return sub_1C4816AD8(a2, "}");
}

uint64_t sub_1C6142EAC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_1E7FA2C18;
  sub_1C4914448((void ***)(a1 + 16));
  return a1;
}

uint64_t *sub_1C6142EE0(uint64_t a1, uint64_t a2, int a3, const llvm::APInt *a4, int a5, llvm *a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v16 = sub_1C636B134(a1, (uint64_t)a6, a7, 1, 0, 172, 0);
  v18 = v17;
  v26 = a2;
  v27 = a3;
  v19 = sub_1C5D428B0(a1, a5, a6, a7);
  v20 = 0;
  v28 = v19;
  v29 = v21;
  v30 = a9;
  v31 = a10;
  v22 = *(_QWORD *)(a1 + 832);
  if (v22)
    v20 = *(_WORD *)(v22 + 8);
  if (a9)
    v23 = 3;
  else
    v23 = 2;
  return sub_1C636D410(a1, (const char *)0x32, a4, v16, v18, &v26, v23, v20);
}

void *sub_1C6142FF0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, __int128 *a7)
{
  uint64_t v14;
  char v15;

  v14 = a3;
  v15 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v14);
  v14 = *a4;
  v15 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v14);
  return sub_1C61428B0(a1, a2, *a5, a6, a7);
}

uint64_t sub_1C614308C(uint64_t result, int *a2, int *a3, int *a4, int *a5)
{
  int v5;
  int v6;
  int v7;
  int v8;

  v5 = 0;
  v6 = 401;
  v7 = 1;
  if ((int)result > 2453)
  {
LABEL_7:
    v8 = 0;
    switch((int)result)
    {
      case 2454:
      case 2455:
        goto LABEL_67;
      case 2456:
        goto LABEL_41;
      case 2457:
        goto LABEL_23;
      case 2458:
        goto LABEL_35;
      case 2459:
        goto LABEL_42;
      case 2460:
        goto LABEL_61;
      case 2461:
        goto LABEL_68;
      case 2462:
      case 2463:
        goto LABEL_8;
      case 2464:
        goto LABEL_24;
      case 2465:
        goto LABEL_15;
      case 2466:
        goto LABEL_16;
      case 2467:
        goto LABEL_18;
      case 2468:
        goto LABEL_36;
      case 2469:
        goto LABEL_43;
      default:
        result = ((uint64_t (*)(void))((char *)&loc_1C61430F4
                                    + 4 * algn_1C66088D3[(result - 2528)]))();
        break;
    }
  }
  else
  {
    v8 = 0;
    switch((int)result)
    {
      case 2309:
      case 2310:
        v8 = 0;
        v6 = 401;
        v5 = 2;
        v7 = 1;
        goto LABEL_67;
      case 2311:
        v8 = 0;
        v6 = 411;
        goto LABEL_49;
      case 2312:
        v8 = 0;
        v6 = 405;
        goto LABEL_49;
      case 2313:
        v8 = 0;
        v6 = 413;
        goto LABEL_52;
      case 2314:
        v8 = 0;
        v6 = 407;
        goto LABEL_52;
      case 2315:
        v8 = 0;
        v6 = 415;
        goto LABEL_56;
      case 2316:
        v8 = 0;
        v6 = 409;
        goto LABEL_56;
      case 2317:
      case 2318:
        goto LABEL_67;
      case 2319:
LABEL_41:
        v5 = 0;
        v8 = 0;
        v6 = 411;
        goto LABEL_26;
      case 2320:
LABEL_23:
        v5 = 0;
        v8 = 0;
        v6 = 405;
        goto LABEL_26;
      case 2321:
LABEL_35:
        v5 = 0;
        v8 = 0;
        v6 = 413;
        goto LABEL_53;
      case 2322:
LABEL_42:
        v5 = 0;
        v8 = 0;
        v6 = 407;
        goto LABEL_53;
      case 2323:
LABEL_61:
        v5 = 0;
        v8 = 0;
        v6 = 415;
        goto LABEL_57;
      case 2324:
LABEL_68:
        v5 = 0;
        v8 = 0;
        v6 = 409;
        goto LABEL_57;
      case 2325:
      case 2326:
        v8 = 0;
        v6 = 401;
        v7 = 1;
        v5 = 1;
        goto LABEL_67;
      case 2327:
        v8 = 0;
        v6 = 411;
        goto LABEL_21;
      case 2328:
        v8 = 0;
        v6 = 405;
LABEL_21:
        v5 = 1;
        goto LABEL_26;
      case 2329:
        v8 = 0;
        v6 = 413;
        goto LABEL_63;
      case 2330:
        v8 = 0;
        v6 = 407;
LABEL_63:
        v5 = 1;
        goto LABEL_53;
      case 2331:
        v8 = 0;
        v6 = 415;
        goto LABEL_38;
      case 2332:
        v8 = 0;
        v6 = 409;
LABEL_38:
        v5 = 1;
        goto LABEL_57;
      case 2333:
      case 2334:
      case 2335:
      case 2336:
        __break(1u);
        goto LABEL_7;
      case 2337:
      case 2338:
        v6 = 402;
        v5 = 2;
        v7 = 1;
        goto LABEL_66;
      case 2339:
        v6 = 412;
        goto LABEL_48;
      case 2340:
        v6 = 406;
LABEL_48:
        v8 = 1;
LABEL_49:
        v7 = 2;
        v5 = 2;
        goto LABEL_67;
      case 2341:
        v6 = 414;
        goto LABEL_51;
      case 2342:
        v6 = 408;
LABEL_51:
        v8 = 1;
LABEL_52:
        v5 = 2;
        goto LABEL_53;
      case 2343:
        v6 = 416;
        goto LABEL_55;
      case 2344:
        v6 = 410;
LABEL_55:
        v8 = 1;
LABEL_56:
        v5 = 2;
        goto LABEL_57;
      case 2345:
      case 2346:
LABEL_8:
        v5 = 0;
        v6 = 402;
        goto LABEL_66;
      case 2347:
LABEL_24:
        v5 = 0;
        v6 = 412;
        goto LABEL_25;
      case 2348:
LABEL_15:
        v5 = 0;
        v6 = 406;
LABEL_25:
        v8 = 1;
LABEL_26:
        v7 = 2;
        goto LABEL_67;
      case 2349:
LABEL_16:
        v5 = 0;
        v6 = 414;
        goto LABEL_19;
      case 2350:
LABEL_18:
        v5 = 0;
        v6 = 408;
LABEL_19:
        v8 = 1;
LABEL_53:
        v7 = 3;
        goto LABEL_67;
      case 2351:
LABEL_36:
        v5 = 0;
        v6 = 416;
        goto LABEL_44;
      case 2352:
LABEL_43:
        v5 = 0;
        v6 = 410;
LABEL_44:
        v8 = 1;
LABEL_57:
        v7 = 4;
        goto LABEL_67;
      case 2353:
      case 2354:
        v6 = 402;
        v7 = 1;
        v5 = 1;
        goto LABEL_66;
      case 2355:
        v6 = 412;
        goto LABEL_60;
      case 2356:
        v6 = 406;
LABEL_60:
        v5 = 1;
        v7 = 2;
        goto LABEL_66;
      case 2357:
        v6 = 414;
        goto LABEL_40;
      case 2358:
        v6 = 408;
LABEL_40:
        v5 = 1;
        v7 = 3;
        goto LABEL_66;
      case 2359:
        v6 = 416;
        goto LABEL_65;
      case 2360:
        v6 = 410;
LABEL_65:
        v5 = 1;
        v7 = 4;
LABEL_66:
        v8 = 1;
LABEL_67:
        *a2 = v7;
        *a3 = v5;
        *a4 = v8;
        *a5 = v6;
        break;
      default:
        result = ((uint64_t (*)(void))((char *)&loc_1C614314C + 4 * byte_1C660887F[(result - 2115)]))();
        break;
    }
  }
  return result;
}

void sub_1C6143384(_QWORD *a1)
{
  if (a1)
  {
    sub_1C6143384(*a1);
    sub_1C6143384(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_1C61433BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = a1 + 8;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = a1 + 40;
  *(_DWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v5 = *(unsigned __int16 *)(a2 + 24);
  if ((v5 - 47) <= 1 && (*(_BYTE *)(a2 + 26) & 2) != 0 || v5 == 287 || (__int16)v5 >= 890)
  {
    if ((*(_WORD *)(*(_QWORD *)(a2 + 96) + 32) & 2) != 0)
      v6 = 5;
    else
      v6 = 2;
    *(_DWORD *)(a1 + 64) = v6;
LABEL_13:
    __asm { BR              X11 }
  }
  if ((v5 - 290) <= 0x11)
  {
    *(_DWORD *)(a1 + 64) = 4;
    v12 = *(_QWORD *)(a2 + 32);
    v13 = *(_QWORD *)(v12 + 80);
    v14 = *(_DWORD *)(v12 + 88);
  }
  else
  {
    if (v5 == 253)
    {
      *(_DWORD *)(a1 + 64) = 1;
      *(_QWORD *)(a1 + 24) = a2;
      *(_DWORD *)(a1 + 32) = 0;
      goto LABEL_24;
    }
    if (v5 != 254)
    {
      v6 = *(_DWORD *)(a1 + 64);
      goto LABEL_13;
    }
    *(_DWORD *)(a1 + 64) = 3;
    v15 = *(_QWORD *)(a2 + 32);
    v13 = *(_QWORD *)(v15 + 40);
    v14 = *(_DWORD *)(v15 + 48);
  }
  *(_DWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 24) = v13;
LABEL_24:
  v16 = sub_1C6131AB0(a2);
  v18 = *(_QWORD *)v16;
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(v16 + 8);
  *(_QWORD *)v3 = v18;
  v19 = 120;
  if (*(_WORD *)(*(_QWORD *)a1 + 24) == 253)
    v19 = 80;
  v20 = *(_QWORD *)(*(_QWORD *)a1 + 32) + v19;
  v21 = *(_QWORD *)v20;
  *(_DWORD *)(v4 + 8) = *(_DWORD *)(v20 + 8);
  *(_QWORD *)v4 = v21;
  v7 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 16 * *(unsigned int *)(a1 + 32));
  v9 = *v7;
  v8 = v7[1];
  v22[0] = v9;
  v22[1] = v8;
  if (!(_BYTE)v9)
  {
    if ((*(_DWORD *)(v8 + 8) & 0xFE) != 0x12)
      goto LABEL_16;
LABEL_19:
    v10 = sub_1C612FE00((llvm::EVT *)v22, v17);
    goto LABEL_17;
  }
  if (v9 - 15 < 0x9C)
    goto LABEL_19;
LABEL_16:
  v10 = 1;
LABEL_17:
  *(_DWORD *)(a1 + 68) = v10;
  return a1;
}

uint64_t sub_1C61435C8(uint64_t a1)
{
  uint64_t v1;
  int v2;

  v1 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)a1 + 96) + 16);
  if ((v1 - 64) > 8)
    return ((uint64_t (*)(void))((char *)&loc_1C6143600 + 4 * byte_1C6609165[v1]))();
  v2 = 1 << (v1 - 64);
  if ((v2 & 0x1D) != 0)
    return 3;
  if ((v2 & 0x1C2) != 0)
    return 1;
  return 2;
}

unint64_t sub_1C6143634(_DWORD *a1)
{
  unint64_t result;
  const char *v2;
  unint64_t v3;
  __int128 v4;

  if (a1[16] != 2)
    return sub_1C4831E04(*(_QWORD *)(*(_QWORD *)a1 + 96));
  v4 = *(_OWORD *)*(_QWORD *)(*(_QWORD *)a1 + 40);
  result = sub_1C47C1C70((unsigned __int8 *)&v4);
  if ((_DWORD)v2 == 1)
  {
    v3 = result;
    return v3;
  }
  return result;
}

_DWORD *sub_1C61436A0(uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  int v3;

  result = (_DWORD *)sub_1C61433BC(a1, a2);
  result[22] = 0;
  v3 = result[16];
  if (v3 != 2 && v3 != 5)
    result[22] = (*(unsigned __int16 *)(*(_QWORD *)result + 26) >> 10) & 3;
  return result;
}

uint64_t sub_1C61436D8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v3;

  result = sub_1C61433BC(a1, a2);
  *(_BYTE *)(result + 88) = 0;
  v3 = *(_DWORD *)(result + 64);
  if (v3 != 2 && v3 != 5)
    *(_BYTE *)(result + 88) = (*(_WORD *)(*(_QWORD *)result + 26) & 0x400) != 0;
  return result;
}

unint64_t sub_1C6143710(uint64_t a1)
{
  unint64_t result;
  const char *v2;
  unint64_t v3;
  __int128 v4;

  if (*(_DWORD *)(a1 + 64) != 5)
    return sub_1C4831E04(*(_QWORD *)(*(_QWORD *)a1 + 96));
  v4 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40) + 16 * *(unsigned int *)(a1 + 32));
  result = sub_1C47C1C70((unsigned __int8 *)&v4);
  if ((_DWORD)v2 == 1)
  {
    v3 = result;
    return v3;
  }
  return result;
}

void sub_1C6143780(unint64_t *a1, llvm::raw_ostream *a2)
{
  unsigned int v4;
  llvm::raw_ostream *v5;

  v4 = sub_1C6143634(a1);
  v5 = llvm::raw_ostream::operator<<(a2, v4);
  sub_1C4816AD8(v5, "-byte load from ");
  sub_1C491641C(a1, a2);
}

void sub_1C61437C4(unint64_t *a1, llvm::raw_ostream *a2)
{
  unsigned int v4;
  llvm::raw_ostream *v5;

  v4 = sub_1C6143710((uint64_t)a1);
  v5 = llvm::raw_ostream::operator<<(a2, v4);
  sub_1C4816AD8(v5, "-byte store to  ");
  sub_1C491641C(a1, a2);
}

llvm::raw_ostream *sub_1C6143808(llvm *a1)
{
  llvm *v2;
  llvm *v3;
  llvm *v4;

  v2 = llvm::dbgs(a1);
  sub_1C6143780((unint64_t *)a1, v2);
  v4 = llvm::dbgs(v3);
  return sub_1C4816AD8(v4, "\n");
}

llvm::raw_ostream *sub_1C6143840(llvm *a1)
{
  llvm *v2;
  llvm *v3;
  llvm *v4;

  v2 = llvm::dbgs(a1);
  sub_1C61437C4((unint64_t *)a1, v2);
  v4 = llvm::dbgs(v3);
  return sub_1C4816AD8(v4, "\n");
}

void sub_1C6143878()
{
  llvm::report_fatal_error((llvm *)"There are no dynamically indexed uniform loads on G10", (const char *)1);
}

_QWORD *sub_1C6143894(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7, __int128 *a8, __int128 *a9, int *a10, __int128 *a11)
{
  _QWORD *v16;
  void *v18;
  uint64_t v19;
  _QWORD v20[13];

  v20[12] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x600000000;
  sub_1C6143E84(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  v16 = sub_1C5D61678(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20)
    free(v18);
  return v16;
}

_QWORD *sub_1C614397C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, __int128 *a7, __int128 *a8, __int128 *a9)
{
  _QWORD *v14;
  void *v16;
  uint64_t v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x400000000;
  sub_1C613EB10(a1, (uint64_t)&v16, a6, a7, a8, a9);
  v14 = sub_1C5D61678(a1, a2, a3, a4, a5, (uint64_t *)v16, v17);
  if (v16 != v18)
    free(v16);
  return v14;
}

_QWORD *sub_1C6143A58(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7, __int128 *a8, __int128 *a9, __int128 *a10, int *a11, __int128 *a12)
{
  _QWORD *v17;
  void *v19;
  uint64_t v20;
  _QWORD v21[15];

  v21[14] = *MEMORY[0x1E0C80C00];
  v20 = 0x700000000;
  v19 = v21;
  sub_1C491C130(a1, (uint64_t)&v19, a6, a7, a8, a9, a10, a11, a12);
  v17 = sub_1C5D61678(a1, a2, a3, a4, a5, (uint64_t *)v19, v20);
  if (v19 != v21)
    free(v19);
  return v17;
}

_QWORD *sub_1C6143B40(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, __int128 *a8, __int128 *a9, __int128 *a10)
{
  _QWORD *v17;
  uint64_t v19;
  char v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[11];

  v23[10] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v22 = 0x500000000;
  v19 = a6;
  v20 = 6;
  sub_1C47E2820(a1, (uint64_t)&v21, (uint64_t)&v19);
  sub_1C612E7D0(a1, (uint64_t)&v21, a7, a8, a9, a10);
  v17 = sub_1C5D61678(a1, a2, a3, a4, a5, (uint64_t *)v21, v22);
  if (v21 != v23)
    free(v21);
  return v17;
}

_QWORD *sub_1C6143C50(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, __int128 *a7, __int128 *a8, __int128 *a9, unsigned int *a10, __int128 *a11)
{
  _QWORD *v17;
  uint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[14];

  v24[12] = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x600000000;
  v20 = a6;
  v21 = 6;
  sub_1C47E2820(a1, (uint64_t)&v22, (uint64_t)&v20);
  sub_1C47E28C4(a1, (uint64_t)&v22, a7);
  sub_1C6143FB0(a1, (uint64_t)&v22, a8, a9, a10, a11);
  v17 = sub_1C5D61678(a1, a2, a3, a4, a5, (uint64_t *)v22, v23);
  if (v22 != v24)
    free(v22);
  return v17;
}

_QWORD *sub_1C6143D74(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, __int128 *a8, __int128 *a9, unsigned int *a10, __int128 *a11)
{
  _QWORD *v16;
  void *v18;
  uint64_t v19;
  _QWORD v20[13];

  v20[12] = *MEMORY[0x1E0C80C00];
  v18 = v20;
  v19 = 0x600000000;
  sub_1C6144038(a1, (uint64_t)&v18, a6, a7, a8, a9, a10, a11);
  v16 = sub_1C5D61678(a1, a2, a3, a4, a5, (uint64_t *)v18, v19);
  if (v18 != v20)
    free(v18);
  return v16;
}

void sub_1C6143E60(uint64_t a1)
{
  sub_1C6132EC4(a1);
}

void sub_1C6143E6C()
{
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C6143E84(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, __int128 *a5, __int128 *a6, int *a7, __int128 *a8)
{
  uint64_t v16;
  char v17;

  v16 = a3;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  v16 = *a4;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  return sub_1C6143F28(a1, a2, a5, a6, a7, a8);
}

void *sub_1C6143F28(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, int *a5, __int128 *a6)
{
  uint64_t v12;
  char v13;

  sub_1C47E28C4(a1, a2, a3);
  sub_1C47E28C4(a1, a2, a4);
  v12 = *a5;
  v13 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v12);
  return sub_1C47E28C4(a1, a2, a6);
}

void *sub_1C6143FB0(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, unsigned int *a5, __int128 *a6)
{
  uint64_t v12;
  char v13;

  sub_1C47E28C4(a1, a2, a3);
  sub_1C47E28C4(a1, a2, a4);
  v12 = *a5;
  v13 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v12);
  return sub_1C47E28C4(a1, a2, a6);
}

void *sub_1C6144038(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, __int128 *a5, __int128 *a6, unsigned int *a7, __int128 *a8)
{
  uint64_t v16;
  char v17;

  v16 = a3;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  v16 = *a4;
  v17 = 6;
  sub_1C47E2820(a1, a2, (uint64_t)&v16);
  return sub_1C6143FB0(a1, a2, a5, a6, a7, a8);
}

void sub_1C61440D8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EB310);
  if (v1 != -1)
  {
    v4[0] = sub_1C491CB18;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EB310, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6144138(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = sub_1C4776848(a1, (uint64_t)&unk_1ED7EB308);
  *(_QWORD *)v2 = &off_1E7FA3548;
  *(_QWORD *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 264) = 0;
  *(_QWORD *)(v2 + 248) = 0;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_QWORD *)(v2 + 320) = 0;
  *(_DWORD *)(v2 + 328) = dword_1ED7EB458;
  *(_QWORD *)(v2 + 332) = 0x300000000;
  PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)v2);
  v3 = atomic_load(&qword_1ED7EB310);
  if (v3 != -1)
  {
    v7[0] = sub_1C491CB18;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED7EB310, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void *sub_1C61441F4(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7108);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7108);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7110);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7110);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::MachineLoopInfo::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C61442C8(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  _DWORD *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  _DWORD v11[6];

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v11[0] = *(_DWORD *)(a2 + 4);
    v11[4] = 0;
    v8 = sub_1C4926708(a1, (unint64_t)v11, 1);
    v9 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
    v10 = *(_OWORD *)v8;
    *(_QWORD *)(v9 + 16) = *(_QWORD *)(v8 + 16);
    *(_OWORD *)v9 = v10;
  }
  else
  {
    v4 = (_DWORD *)(*(_QWORD *)a1 + 24 * v3);
    *v4 = *(_DWORD *)(a2 + 4);
    v4[4] = 0;
  }
  v5 = *(_DWORD *)(a1 + 8) + 1;
  v6 = *(_QWORD *)a1 + 24 * v5;
  *(_DWORD *)(a1 + 8) = v5;
  return v6 - 24;
}

unsigned __int8 **sub_1C614436C(uint64_t a1, llvm::MachineBasicBlock *this)
{
  unint64_t *FirstTerminator;
  unsigned __int8 **result;
  unsigned __int8 *v6;

  FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(this);
  sub_1C48532D0((unint64_t *)this, FirstTerminator, *(unint64_t **)(a1 + 24), (unint64_t *)a1);
  v6 = 0;
  result = sub_1C49264C4((unsigned __int8 **)(a1 + 56), &v6);
  if (v6)
    return (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
  return result;
}

uint64_t sub_1C61443D0(uint64_t result, uint64_t a2, llvm::MachineBasicBlock *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t VRegDef;

  v3 = *(_QWORD *)(a2 + 24);
  if ((llvm::MachineBasicBlock *)v3 != a3)
  {
    v6 = result;
    v7 = *(_QWORD *)(result + 312);
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v7);
    result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v7 + 1320), v3, (uint64_t)a3);
    if ((result & 1) == 0)
    {
      v8 = *(_DWORD *)(a2 + 40);
      v9 = v8 - 1;
      if (v8 != 1)
      {
        v10 = 0;
        do
        {
          v11 = *(_QWORD *)(a2 + 32) + v10;
          if (!*(_BYTE *)(v11 + 32))
          {
            VRegDef = llvm::MachineRegisterInfo::getVRegDef(*(_QWORD *)(v6 + 272), *(_DWORD *)(v11 + 36));
            sub_1C61443D0(v6, VRegDef, a3);
          }
          v10 += 32;
          --v9;
        }
        while (v9);
      }
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 288) + 32))(*(_QWORD *)(v6 + 288), a2);
      sub_1C614436C(a2, a3);
      return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v6 + 288) + 40))(*(_QWORD *)(v6 + 288), a2);
    }
  }
  return result;
}

uint64_t sub_1C61444C4(uint64_t a1, uint64_t a2, llvm::MachineBasicBlock *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[3];
  int v23;
  uint64_t v24;
  _QWORD v25[2];
  int v26;
  _QWORD v27[2];
  int v28;

  v27[0] = 0;
  v27[1] = 0;
  v28 = 0;
  v6 = (uint64_t *)(*(_QWORD *)(a1 + 280) + 248);
  v25[0] = a3;
  v22[0] = 0;
  v7 = 0;
  if (sub_1C48BF0C0(v6, v25, v22))
    v7 = *(_QWORD *)(v22[0] + 8);
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  v8 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v8)
    goto LABEL_18;
  v9 = *(uint64_t **)a2;
  v10 = 8 * v8;
  do
  {
    v11 = *v9++;
    v24 = v11;
    v23 = 0;
    sub_1C6144658((uint64_t)v22, (uint64_t)v25, &v24, &v23);
    v10 -= 8;
  }
  while (v10);
  v12 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = *(uint64_t **)a2;
    v15 = 8 * v12;
    do
    {
      v16 = *v14;
      if (!v7
        || ((v17 = sub_1C477672C(v7 + 56, *(_QWORD *)(v16 + 24)), v18 = *(_QWORD *)(v7 + 64),
                                                                  v18 != *(_QWORD *)(v7 + 56))
          ? (v19 = 72)
          : (v19 = 76),
            v17 != (_QWORD *)(v18 + 8 * *(unsigned int *)(v7 + v19))))
      {
        *(_DWORD *)(a1 + 332) = 0;
        if (sub_1C4923FC0(a1, v16, (uint64_t)a3, (uint64_t)v27, 0, (uint64_t)v25) == 1)
        {
          sub_1C61443D0(a1, v16, a3);
          v13 = 1;
        }
        sub_1C61446F0((unsigned int *)v27);
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
    v21 = v27[0];
  }
  else
  {
LABEL_18:
    v21 = 0;
    v13 = 0;
  }
  MEMORY[0x1CAA32FB4](v25[0], 8);
  MEMORY[0x1CAA32FB4](v21, 8);
  return v13 & 1;
}

uint64_t sub_1C6144658(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C6144BDC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6144CDC(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

unsigned int *sub_1C61446F0(unsigned int *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C4926838(result);
    }
  }
  return result;
}

void sub_1C6144744()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6144758(llvm::Pass *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E7FA3548;
  v2 = *((_QWORD *)a1 + 31);
  *((_QWORD *)a1 + 31) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1C4926674(a1);
}

void sub_1C614479C(llvm::Pass *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E7FA3548;
  v2 = *((_QWORD *)a1 + 31);
  *((_QWORD *)a1 + 31) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C61447F4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6144138(v0);
}

uint64_t sub_1C614481C@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C4926528((uint64_t)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C61448AC(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * a1[4];
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *sub_1C61448AC(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C49265BC((uint64_t)a1, v7);
  v9 = 0;
  sub_1C4926528((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

uint64_t sub_1C614495C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C4926528(v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C6144A08(uint64_t a1, char *a2, _OWORD *a3, _WORD *a4, _BYTE **a5)
{
  uint64_t v10;
  size_t v11;
  _BYTE *v12;

  v10 = sub_1C47AD050(a1, 0, 0);
  *(_BYTE *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E898;
  *(_QWORD *)(v10 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v10 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  *(_OWORD *)(a1 + 32) = *a3;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 10) & 0xFFF8 | *a4 & 7;
  v12 = *a5;
  *(_BYTE *)(a1 + 128) = **a5;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v12;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t sub_1C6144AF4(uint64_t a1, char *a2, _OWORD *a3, _WORD *a4, int **a5)
{
  uint64_t v10;
  size_t v11;
  int v12;

  v10 = sub_1C47AD050(a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F952A8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E3B0;
  *(_QWORD *)(v10 + 152) = &unk_1E819E2C0;
  *(_QWORD *)(v10 + 160) = &off_1E7F95260;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  *(_OWORD *)(a1 + 32) = *a3;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 10) & 0xFFF8 | *a4 & 7;
  v12 = **a5;
  *(_DWORD *)(a1 + 128) = v12;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v12;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t sub_1C6144BDC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C6144C70(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6144CDC(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_QWORD *sub_1C6144CDC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4926780(a1, v6);
  v8 = 0;
  sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6144D8C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C6144BDC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_1C6144E40(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6144EA0(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6144F3C((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C6144EA0(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C6144F3C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1C4926B84(a1, v7);
    v9 = 0;
    sub_1C6144EA0((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6144FEC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C6144EA0((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_1C61450A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int VirtualRegister;
  uint64_t v11;
  llvm::MachineFunction *v12;
  llvm::MachineInstr *v13;
  llvm::MachineInstr *v14;
  _DWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v7 = **(unsigned __int16 **)(a5 + 16);
  if (v7 > 0xF51)
  {
    switch(**(_WORD **)(a5 + 16))
    {
      case 0xF52:
        v8 = 3928;
        break;
      case 0xF53:
        v8 = 3929;
        break;
      case 0xF54:
        v8 = 3930;
        break;
      case 0xF55:
        v8 = 3931;
        break;
      case 0xF56:
        v8 = 3932;
        break;
      case 0xF57:
        v8 = 3933;
        break;
      default:
        __asm { BR              X10 }
        return;
    }
  }
  else
  {
    v8 = 3835;
    switch(**(_WORD **)(a5 + 16))
    {
      case 0xEF2:
        v8 = 3832;
        break;
      case 0xEF3:
        v8 = 3833;
        break;
      case 0xEF4:
        v8 = 3834;
        break;
      case 0xEF5:
        break;
      case 0xEF6:
        v8 = 3836;
        break;
      case 0xEF7:
        v8 = 3837;
        break;
      default:
        __asm { BR              X10 }
        return;
    }
  }
  v9 = *(_DWORD *)(*(_QWORD *)(a5 + 32) + 4);
  VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(a4, (uint64_t)&off_1E7FA5F48, "", 0);
  *(_QWORD *)(a5 + 16) = *(_QWORD *)(a3 + 8) + 48 * v8;
  llvm::MachineOperand::setReg(*(_QWORD *)(a5 + 32), VirtualRegister);
  v11 = a5;
  if ((*(_BYTE *)a5 & 4) == 0)
  {
    v11 = a5;
    if ((*(_WORD *)(a5 + 44) & 8) != 0)
    {
      v11 = a5;
      do
        v11 = *(_QWORD *)(v11 + 8);
      while ((*(_WORD *)(v11 + 44) & 8) != 0);
    }
  }
  v12 = sub_1C4787570(*(_QWORD *)(a5 + 24), *(unint64_t **)(v11 + 8), (unsigned __int8 **)(a5 + 56), *(_QWORD *)(a3 + 8) + 51072, v9);
  v14 = v13;
  v15[0] = 1;
  v16 = 0;
  v17 = 0;
  llvm::MachineInstr::addOperand(v13, v12, (const llvm::MachineOperand *)v15);
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v15[0] = 0x4000000;
  v15[1] = VirtualRegister;
  llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)v15);
  v15[0] = 1;
  v16 = 0;
  v17 = 0;
  llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)v15);
  v15[0] = 1;
  v16 = 0;
  v17 = 128;
  llvm::MachineInstr::addOperand(v14, v12, (const llvm::MachineOperand *)v15);
}

void sub_1C6145328(llvm::GPUIterateCombiner *a1)
{
  llvm::GPUIterateCombiner::~GPUIterateCombiner(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C614534C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void (**v6)(_QWORD *);
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v9 = 0;
  }
  v4 = sub_1C4952FC8(a1, 0, v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = (void (**)(_QWORD *))(v8[0] + 32);
    v5 = v8;
LABEL_9:
    (*v6)(v5);
    return v4;
  }
  if (v9)
  {
    v6 = (void (**)(_QWORD *))(*v9 + 40);
    goto LABEL_9;
  }
  return v4;
}

uint64_t sub_1C6145434(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  void (**v9)(_QWORD *);
  _QWORD *v10;
  void (**v11)(_QWORD *);
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v15);
    }
    else
    {
      v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v16 = 0;
  }
  v6 = (_QWORD *)a3[3];
  if (v6)
  {
    if (v6 == a3)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v13);
    }
    else
    {
      v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    }
  }
  else
  {
    v14 = 0;
  }
  v7 = sub_1C4953548(a1, 4, v15, v13);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = (void (**)(_QWORD *))(v13[0] + 32);
    v8 = v13;
LABEL_9:
    (*v9)(v8);
    goto LABEL_10;
  }
  if (v14)
  {
    v9 = (void (**)(_QWORD *))(*v14 + 40);
    goto LABEL_9;
  }
LABEL_10:
  v10 = v16;
  if (v16 == v15)
  {
    v11 = (void (**)(_QWORD *))(v15[0] + 32);
    v10 = v15;
  }
  else
  {
    if (!v16)
      return v7;
    v11 = (void (**)(_QWORD *))(*v16 + 40);
  }
  (*v11)(v10);
  return v7;
}

uint64_t sub_1C61455A0(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  _QWORD *v5;
  void (**v6)(_QWORD *);
  _QWORD *v7;
  void (**v8)(_QWORD *);
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v2 = a2;
  v14 = *MEMORY[0x1E0C80C00];
  sub_1C6271304(a2, (uint64_t)v12);
  v10[0] = &off_1E816E690;
  v10[1] = v2;
  v11 = v10;
  v4 = sub_1C4953548(a1, 4, v12, v10);
  v5 = v11;
  if (v11 == v10)
  {
    v6 = (void (**)(_QWORD *))(v10[0] + 32);
    v5 = v10;
LABEL_3:
    (*v6)(v5);
    goto LABEL_4;
  }
  if (v11)
  {
    v6 = (void (**)(_QWORD *))(*v11 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v7 = v13;
  if (v13 == v12)
  {
    v8 = (void (**)(_QWORD *))(v12[0] + 32);
    v7 = v12;
  }
  else
  {
    if (!v13)
      return v4;
    v8 = (void (**)(_QWORD *))(*v13 + 40);
  }
  (*v8)(v7);
  return v4;
}

uint64_t sub_1C61456A0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  void (**v9)(_QWORD *);
  _QWORD *v10;
  void (**v11)(_QWORD *);
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v15);
    }
    else
    {
      v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v16 = 0;
  }
  v6 = (_QWORD *)a3[3];
  if (v6)
  {
    if (v6 == a3)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v13);
    }
    else
    {
      v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    }
  }
  else
  {
    v14 = 0;
  }
  v7 = sub_1C4953548(a1, 2, v15, v13);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = (void (**)(_QWORD *))(v13[0] + 32);
    v8 = v13;
LABEL_9:
    (*v9)(v8);
    goto LABEL_10;
  }
  if (v14)
  {
    v9 = (void (**)(_QWORD *))(*v14 + 40);
    goto LABEL_9;
  }
LABEL_10:
  v10 = v16;
  if (v16 == v15)
  {
    v11 = (void (**)(_QWORD *))(v15[0] + 32);
    v10 = v15;
  }
  else
  {
    if (!v16)
      return v7;
    v11 = (void (**)(_QWORD *))(*v16 + 40);
  }
  (*v11)(v10);
  return v7;
}

uint64_t sub_1C614580C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  void (**v6)(_QWORD *);
  _QWORD *v7;
  void (**v8)(_QWORD *);
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  sub_1C627129C(a2, (uint64_t)v12);
  sub_1C62713F4(a2, (uint64_t)v10);
  v4 = sub_1C4953548(a1, 3, v12, v10);
  v5 = v11;
  if (v11 == v10)
  {
    v6 = (void (**)(_QWORD *))(v10[0] + 32);
    v5 = v10;
LABEL_3:
    (*v6)(v5);
    goto LABEL_4;
  }
  if (v11)
  {
    v6 = (void (**)(_QWORD *))(*v11 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v7 = v13;
  if (v13 == v12)
  {
    v8 = (void (**)(_QWORD *))(v12[0] + 32);
    v7 = v12;
  }
  else
  {
    if (!v13)
      return v4;
    v8 = (void (**)(_QWORD *))(*v13 + 40);
  }
  (*v8)(v7);
  return v4;
}

uint64_t sub_1C6145904(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void (**v3)(_QWORD *);
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &unk_1E7FA3828;
  v5[1] = sub_1C4953BAC;
  v6 = v5;
  v1 = sub_1C4952FC8(a1, 6, v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = (void (**)(_QWORD *))(v5[0] + 32);
    v2 = v5;
  }
  else
  {
    if (!v6)
      return v1;
    v3 = (void (**)(_QWORD *))(*v6 + 40);
  }
  (*v3)(v2);
  return v1;
}

uint64_t sub_1C61459B4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void (**v3)(_QWORD *);
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &unk_1E7FA3828;
  v5[1] = sub_1C4953BAC;
  v6 = v5;
  v1 = sub_1C49328CC(a1, v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = (void (**)(_QWORD *))(v5[0] + 32);
    v2 = v5;
  }
  else
  {
    if (!v6)
      return v1;
    v3 = (void (**)(_QWORD *))(*v6 + 40);
  }
  (*v3)(v2);
  return v1;
}

uint64_t sub_1C6145A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  void (**v6)(_QWORD *);
  _QWORD *v7;
  void (**v8)(_QWORD *);
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12[0] = &off_1E7FA3870;
  v12[1] = a3 | (unint64_t)(a2 << 32);
  v13 = v12;
  sub_1C62713BC(a2, a3, v10);
  v4 = sub_1C61456A0(a1, v12, v10);
  v5 = v11;
  if (v11 == v10)
  {
    v6 = (void (**)(_QWORD *))(v10[0] + 32);
    v5 = v10;
LABEL_3:
    (*v6)(v5);
    goto LABEL_4;
  }
  if (v11)
  {
    v6 = (void (**)(_QWORD *))(*v11 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v7 = v13;
  if (v13 == v12)
  {
    v8 = (void (**)(_QWORD *))(v12[0] + 32);
    v7 = v12;
  }
  else
  {
    if (!v13)
      return v4;
    v8 = (void (**)(_QWORD *))(*v13 + 40);
  }
  (*v8)(v7);
  return v4;
}

uint64_t sub_1C6145B5C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  void (**v9)(_QWORD *);
  _QWORD *v10;
  void (**v11)(_QWORD *);
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v15);
    }
    else
    {
      v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v16 = 0;
  }
  v6 = (_QWORD *)a3[3];
  if (v6)
  {
    if (v6 == a3)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v13);
    }
    else
    {
      v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    }
  }
  else
  {
    v14 = 0;
  }
  v7 = sub_1C4953548(a1, 1, v15, v13);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = (void (**)(_QWORD *))(v13[0] + 32);
    v8 = v13;
LABEL_9:
    (*v9)(v8);
    goto LABEL_10;
  }
  if (v14)
  {
    v9 = (void (**)(_QWORD *))(*v14 + 40);
    goto LABEL_9;
  }
LABEL_10:
  v10 = v16;
  if (v16 == v15)
  {
    v11 = (void (**)(_QWORD *))(v15[0] + 32);
    v10 = v15;
  }
  else
  {
    if (!v16)
      return v7;
    v11 = (void (**)(_QWORD *))(*v16 + 40);
  }
  (*v11)(v10);
  return v7;
}

uint64_t sub_1C6145CC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t (***v2)();
  void (**v3)(uint64_t (***)());
  uint64_t (**v5)();
  int v6;
  uint64_t (***v7)();
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = &off_1E816E450;
  v6 = 0;
  v7 = &v5;
  v1 = sub_1C4952FC8(a1, 9, &v5);
  v2 = v7;
  if (v7 == &v5)
  {
    v3 = (void (**)(uint64_t (***)()))(v5 + 4);
    v2 = &v5;
  }
  else
  {
    if (!v7)
      return v1;
    v3 = (void (**)(uint64_t (***)()))(*v7 + 5);
  }
  (*v3)(v2);
  return v1;
}

uint64_t sub_1C6145D70(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void (**v4)(_QWORD *);
  _QWORD *v5;
  void (**v6)(_QWORD *);
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  sub_1C6271284(0, (uint64_t)v10);
  sub_1C62713D8(0, 0, v8);
  v2 = sub_1C4953548(a1, 1, v10, v8);
  v3 = v9;
  if (v9 == v8)
  {
    v4 = (void (**)(_QWORD *))(v8[0] + 32);
    v3 = v8;
LABEL_3:
    (*v4)(v3);
    goto LABEL_4;
  }
  if (v9)
  {
    v4 = (void (**)(_QWORD *))(*v9 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v5 = v11;
  if (v11 == v10)
  {
    v6 = (void (**)(_QWORD *))(v10[0] + 32);
    v5 = v10;
  }
  else
  {
    if (!v11)
      return v2;
    v6 = (void (**)(_QWORD *))(*v11 + 40);
  }
  (*v6)(v5);
  return v2;
}

uint64_t sub_1C6145E60(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  void (**v6)(_QWORD *);
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v9 = v8;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v8);
    }
    else
    {
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v9 = 0;
  }
  v4 = sub_1C4952FC8(a1, 9, v8);
  v5 = v9;
  if (v9 == v8)
  {
    v6 = (void (**)(_QWORD *))(v8[0] + 32);
    v5 = v8;
LABEL_9:
    (*v6)(v5);
    return v4;
  }
  if (v9)
  {
    v6 = (void (**)(_QWORD *))(*v9 + 40);
    goto LABEL_9;
  }
  return v4;
}

uint64_t sub_1C6145F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v6;
  _QWORD *v7;
  void (**v8)(_QWORD *);
  _QWORD *v9;
  void (**v10)(_QWORD *);
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v4 = a2;
  v16 = *MEMORY[0x1E0C80C00];
  sub_1C62712EC(a2, (uint64_t)v14);
  v12[0] = &off_1E816E648;
  v12[1] = v4 | (unint64_t)(a3 << 32);
  v13 = v12;
  v6 = sub_1C4953548(a1, 2, v14, v12);
  v7 = v13;
  if (v13 == v12)
  {
    v8 = (void (**)(_QWORD *))(v12[0] + 32);
    v7 = v12;
LABEL_3:
    (*v8)(v7);
    goto LABEL_4;
  }
  if (v13)
  {
    v8 = (void (**)(_QWORD *))(*v13 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v9 = v15;
  if (v15 == v14)
  {
    v10 = (void (**)(_QWORD *))(v14[0] + 32);
    v9 = v14;
  }
  else
  {
    if (!v15)
      return v6;
    v10 = (void (**)(_QWORD *))(*v15 + 40);
  }
  (*v10)(v9);
  return v6;
}

uint64_t sub_1C6146050(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  void (**v9)(_QWORD *);
  _QWORD *v10;
  void (**v11)(_QWORD *);
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v15);
    }
    else
    {
      v16 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v16 = 0;
  }
  v6 = (_QWORD *)a3[3];
  if (v6)
  {
    if (v6 == a3)
    {
      v14 = v13;
      (*(void (**)(_QWORD *, _QWORD *))(*a3 + 24))(a3, v13);
    }
    else
    {
      v14 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    }
  }
  else
  {
    v14 = 0;
  }
  v7 = sub_1C4953548(a1, 3, v15, v13);
  v8 = v14;
  if (v14 == v13)
  {
    v9 = (void (**)(_QWORD *))(v13[0] + 32);
    v8 = v13;
LABEL_9:
    (*v9)(v8);
    goto LABEL_10;
  }
  if (v14)
  {
    v9 = (void (**)(_QWORD *))(*v14 + 40);
    goto LABEL_9;
  }
LABEL_10:
  v10 = v16;
  if (v16 == v15)
  {
    v11 = (void (**)(_QWORD *))(v15[0] + 32);
    v10 = v15;
  }
  else
  {
    if (!v16)
      return v7;
    v11 = (void (**)(_QWORD *))(*v16 + 40);
  }
  (*v11)(v10);
  return v7;
}

uint64_t sub_1C61461BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  void (**v3)(_QWORD *);
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &unk_1E7FA3828;
  v5[1] = sub_1C4953BAC;
  v6 = v5;
  v1 = sub_1C4952FC8(a1, 9, v5);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = (void (**)(_QWORD *))(v5[0] + 32);
    v2 = v5;
  }
  else
  {
    if (!v6)
      return v1;
    v3 = (void (**)(_QWORD *))(*v6 + 40);
  }
  (*v3)(v2);
  return v1;
}

uint64_t sub_1C614626C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  void (**v5)(void);
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v3 = (_QWORD *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      v8 = v7;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v7);
    }
    else
    {
      v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v3 + 16))(v3);
    }
  }
  else
  {
    v8 = 0;
  }
  v4 = sub_1C4952FC8(a1, 6, v7);
  if (v8 == v7)
  {
    v5 = (void (**)(void))(v7[0] + 32);
    goto LABEL_7;
  }
  if (v8)
  {
    v5 = (void (**)(void))(*v8 + 40);
LABEL_7:
    (*v5)();
  }
  return v4;
}

uint64_t sub_1C6146358(uint64_t a1)
{
  uint64_t i;

  *(_QWORD *)a1 = &off_1E816E938;
  sub_1C4959BE8((char **)(a1 + 35456));
  for (i = 0; i != -35448; i -= 168)
    sub_1C4959EB8((char **)(a1 + 35296 + i));
  return a1;
}

void sub_1C61463C4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C61463D8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FA3708;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

BOOL sub_1C614641C(uint64_t a1, uint64_t a2)
{
  return sub_1C6146424((unsigned int *)(a1 + 8), a2);
}

BOOL sub_1C6146424(unsigned int *a1, uint64_t a2)
{
  BOOL v2;
  const char *v4;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *a1);
  v2 = (v8 & 0xFFFFFFFFFFFFFFF9) == 0 || (v8 & 4) == 0;
  if (v2 || sub_1C492E6FC(&v8) != *((_QWORD *)a1 + 1))
    return 0;
  v6 = v8;
  v7 = 0x800000000000000;
  if ((v8 & 2) == 0)
    v7 = 0x8000000000000;
  if ((v7 & v8) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v4);
    v6 = v8;
  }
  return a1[4] > (unsigned __int16)(v6 >> 3);
}

void sub_1C61464CC()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C61464E0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA3750;
  result[1] = v3;
  return result;
}

uint64_t sub_1C6146518(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;

  v3 = *(unsigned int *)(a1 + 12);
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(a1 + 8));
  v4 = sub_1C492E6FC(&v6);
  sub_1C4953AD0(v3, v4);
  return *(unsigned int *)(a1 + 8);
}

void sub_1C614656C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C6146580(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E7FA3798;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

BOOL sub_1C61465C4(uint64_t a1, uint64_t a2)
{
  return sub_1C61465CC((unsigned int *)(a1 + 8), a2);
}

BOOL sub_1C61465CC(unsigned int *a1, uint64_t a2)
{
  BOOL v2;
  const char *v4;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *a1);
  v2 = (v8 & 0xFFFFFFFFFFFFFFF9) == 0 || (v8 & 4) == 0;
  if (v2 || sub_1C492E6FC(&v8) != *((_QWORD *)a1 + 1))
    return 0;
  v6 = v8;
  v7 = 0x800000000000000;
  if ((v8 & 2) == 0)
    v7 = 0x8000000000000;
  if ((v7 & v8) != 0)
  {
    llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of LLT::getNumElements() for scalable vector. Scalable flag may be dropped, use LLT::getElementCount() instead", v4);
    v6 = v8;
  }
  return a1[4] < (unsigned __int16)(v6 >> 3);
}

void sub_1C6146674()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6146688(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA37E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C61466C0(uint64_t a1, uint64_t a2)
{
  return sub_1C61466C8((unsigned int *)(a1 + 8), a2);
}

uint64_t sub_1C61466C8(unsigned int *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v6;

  v3 = a1[1];
  v6 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *a1);
  v4 = sub_1C492E6FC(&v6);
  if ((_DWORD)v3 != 1)
    sub_1C4953AD0(v3, v4);
  return *a1;
}

void sub_1C6146724()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6146738(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E7FA3828;
  result[1] = v3;
  return result;
}

uint64_t sub_1C6146774(uint64_t a1, char a2, const void *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v10;
  void (**v11)(void);
  void (**v12)(void);
  void (**v13)(void);
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  sub_1C55102A4(0, a3, a4, (uint64_t)v17);
  sub_1C55102A4(1, a5, a6, (uint64_t)v15);
  sub_1C49326DC(v17, v15, (uint64_t)v19);
  v10 = sub_1C4952FC8(a1, a2, v19);
  if (v20 == v19)
  {
    v11 = (void (**)(void))(v19[0] + 32);
  }
  else
  {
    if (!v20)
      goto LABEL_5;
    v11 = (void (**)(void))(*v20 + 40);
  }
  (*v11)();
LABEL_5:
  if (v16 == v15)
  {
    v12 = (void (**)(void))(v15[0] + 32);
  }
  else
  {
    if (!v16)
      goto LABEL_9;
    v12 = (void (**)(void))(*v16 + 40);
  }
  (*v12)();
LABEL_9:
  if (v18 == v17)
  {
    v13 = (void (**)(void))(v17[0] + 32);
    goto LABEL_12;
  }
  if (v18)
  {
    v13 = (void (**)(void))(*v18 + 40);
LABEL_12:
    (*v13)();
  }
  return v10;
}

uint64_t sub_1C61468C4(uint64_t a1, char a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v6;
  void (**v7)(void);
  _QWORD v9[3];
  _QWORD *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  sub_1C6271004(0, 1u, a3, a4, (uint64_t)v9);
  v6 = sub_1C4952FC8(a1, a2, v9);
  if (v10 == v9)
  {
    v7 = (void (**)(void))(v9[0] + 32);
    goto LABEL_4;
  }
  if (v10)
  {
    v7 = (void (**)(void))(*v10 + 40);
LABEL_4:
    (*v7)();
  }
  return v6;
}

void sub_1C6146980()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6146994(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FA3870;
  result[1] = v3;
  return result;
}

uint64_t sub_1C61469C8(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E7FA3870;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void sub_1C61469E8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      sub_1C6146A84(a1, a2);
    }
    else
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C6146AEC(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v5 = 3 * v2;
        v6 = *(_QWORD *)a1 + 24 * v2;
        v7 = 24 * a2 - 8 * v5;
        do
        {
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          *(_DWORD *)(v6 + 16) = 0;
          v6 += 24;
          v7 -= 24;
        }
        while (v7);
      }
      *(_DWORD *)(a1 + 8) = a2;
    }
  }
}

uint64_t sub_1C6146A84(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = a2;
  v3 = result;
  v4 = *(unsigned int *)(result + 8);
  if (v4 != a2)
  {
    v5 = 3 * v4;
    v6 = 24 * a2 - 8 * v5;
    v7 = (uint64_t *)(*(_QWORD *)result + 8 * v5 - 24);
    do
    {
      v8 = *v7;
      v7 -= 3;
      result = MEMORY[0x1CAA32FB4](v8, 8);
      v6 += 24;
    }
    while (v6);
  }
  *(_DWORD *)(v3 + 8) = v2;
  return result;
}

void sub_1C6146AEC(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  int v5;
  unint64_t v6;

  v6 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 24, &v6);
  sub_1C6146B5C(a1, (uint64_t)v3);
  v4 = v6;
  if (*(_QWORD *)a1 != a1 + 16)
  {
    v5 = v6;
    free(*(void **)a1);
    v4 = v5;
  }
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C6146B5C(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v3 = *(_QWORD *)result;
    v4 = *(_QWORD *)result + 24 * v2;
    do
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_DWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = *(_QWORD *)v3;
      *(_QWORD *)v3 = 0;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(v3 + 8);
      *(_DWORD *)(v3 + 8) = 0;
      v5 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a2 + 12) = *(_DWORD *)(v3 + 12);
      *(_DWORD *)(v3 + 12) = v5;
      v6 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 16) = *(_DWORD *)(v3 + 16);
      *(_DWORD *)(v3 + 16) = v6;
      v3 += 24;
      a2 += 24;
    }
    while (v3 != v4);
    v7 = *(unsigned int *)(result + 8);
    if ((_DWORD)v7)
    {
      v8 = 24 * v7;
      v9 = *(_QWORD *)result - 24;
      do
      {
        result = MEMORY[0x1CAA32FB4](*(_QWORD *)(v9 + v8), 8);
        v8 -= 24;
      }
      while (v8);
    }
  }
  return result;
}

uint64_t sub_1C6146C04(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = 2;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 != 2 && *(_QWORD *)a2 != 4)
    {
      v11 = 0;
      result = sub_1C4953CC4(v5, (_QWORD *)a2, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_BYTE *)v10 + 8) = *(_BYTE *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C6146CB0(uint64_t a1, char a2, const void *a3, uint64_t a4)
{
  uint64_t v8;
  void (**v9)(void);
  void (**v10)(void);
  void (**v11)(void);
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  sub_1C55102A4(0, a3, a4, (uint64_t)v15);
  sub_1C55102A4(1, a3, a4, (uint64_t)v13);
  sub_1C49326DC(v15, v13, (uint64_t)v17);
  v8 = sub_1C4952FC8(a1, a2, v17);
  if (v18 == v17)
  {
    v9 = (void (**)(void))(v17[0] + 32);
  }
  else
  {
    if (!v18)
      goto LABEL_5;
    v9 = (void (**)(void))(*v18 + 40);
  }
  (*v9)();
LABEL_5:
  if (v14 == v13)
  {
    v10 = (void (**)(void))(v13[0] + 32);
  }
  else
  {
    if (!v14)
      goto LABEL_9;
    v10 = (void (**)(void))(*v14 + 40);
  }
  (*v10)();
LABEL_9:
  if (v16 == v15)
  {
    v11 = (void (**)(void))(v15[0] + 32);
    goto LABEL_12;
  }
  if (v16)
  {
    v11 = (void (**)(void))(*v16 + 40);
LABEL_12:
    (*v11)();
  }
  return v8;
}

uint64_t sub_1C6146E00(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void (**v11)(_QWORD *);
  _QWORD *v12;
  void (**v13)(_QWORD *);
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int16)(a3 >> 3);
  v7 = (unsigned __int16)(a3 >> 19);
  if ((a3 & 2) == 0)
    v7 = (a3 >> 19);
  if ((a3 & 4) != 0)
    v6 = v7;
  if ((a3 & 1) != 0)
    v8 = (a3 >> 3);
  else
    v8 = v6;
  sub_1C62712B4(a2, v8, v17);
  sub_1C62713A4(a2, a3, v15);
  v9 = sub_1C4953548(a1, 2, v17, v15);
  v10 = v16;
  if (v16 == v15)
  {
    v11 = (void (**)(_QWORD *))(v15[0] + 32);
    v10 = v15;
LABEL_10:
    (*v11)(v10);
    goto LABEL_11;
  }
  if (v16)
  {
    v11 = (void (**)(_QWORD *))(*v16 + 40);
    goto LABEL_10;
  }
LABEL_11:
  v12 = v18;
  if (v18 == v17)
  {
    v13 = (void (**)(_QWORD *))(v17[0] + 32);
    v12 = v17;
  }
  else
  {
    if (!v18)
      return v9;
    v13 = (void (**)(_QWORD *))(*v18 + 40);
  }
  (*v13)(v12);
  return v9;
}

uint64_t sub_1C6146F28(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void (**v11)(_QWORD *);
  _QWORD *v12;
  void (**v13)(_QWORD *);
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = (unsigned __int16)(a3 >> 3);
  v7 = (unsigned __int16)(a3 >> 19);
  if ((a3 & 2) == 0)
    v7 = (a3 >> 19);
  if ((a3 & 4) != 0)
    v6 = v7;
  if ((a3 & 1) != 0)
    v8 = (a3 >> 3);
  else
    v8 = v6;
  sub_1C62712D0(a2, v8, v17);
  sub_1C62713A4(a2, a3, v15);
  v9 = sub_1C4953548(a1, 1, v17, v15);
  v10 = v16;
  if (v16 == v15)
  {
    v11 = (void (**)(_QWORD *))(v15[0] + 32);
    v10 = v15;
LABEL_10:
    (*v11)(v10);
    goto LABEL_11;
  }
  if (v16)
  {
    v11 = (void (**)(_QWORD *))(*v16 + 40);
    goto LABEL_10;
  }
LABEL_11:
  v12 = v18;
  if (v18 == v17)
  {
    v13 = (void (**)(_QWORD *))(v17[0] + 32);
    v12 = v17;
  }
  else
  {
    if (!v18)
      return v9;
    v13 = (void (**)(_QWORD *))(*v18 + 40);
  }
  (*v13)(v12);
  return v9;
}

uint64_t sub_1C6147050(uint64_t a1, char a2, const void *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, uint64_t a8)
{
  uint64_t v14;
  void (**v15)(void);
  void (**v16)(void);
  void (**v17)(void);
  void (**v18)(void);
  void (**v19)(void);
  _QWORD v21[3];
  _QWORD *v22;
  _QWORD v23[3];
  _QWORD *v24;
  _QWORD v25[3];
  _QWORD *v26;
  _QWORD v27[3];
  _QWORD *v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  sub_1C55102A4(0, a3, a4, (uint64_t)v27);
  sub_1C55102A4(1, a5, a6, (uint64_t)v23);
  sub_1C55102A4(2, a7, a8, (uint64_t)v21);
  sub_1C49326DC(v23, v21, (uint64_t)v25);
  sub_1C49326DC(v27, v25, (uint64_t)v29);
  v14 = sub_1C4952FC8(a1, a2, v29);
  if (v30 == v29)
  {
    v15 = (void (**)(void))(v29[0] + 32);
  }
  else
  {
    if (!v30)
      goto LABEL_5;
    v15 = (void (**)(void))(*v30 + 40);
  }
  (*v15)();
LABEL_5:
  if (v26 == v25)
  {
    v16 = (void (**)(void))(v25[0] + 32);
  }
  else
  {
    if (!v26)
      goto LABEL_9;
    v16 = (void (**)(void))(*v26 + 40);
  }
  (*v16)();
LABEL_9:
  if (v22 == v21)
  {
    v17 = (void (**)(void))(v21[0] + 32);
  }
  else
  {
    if (!v22)
      goto LABEL_13;
    v17 = (void (**)(void))(*v22 + 40);
  }
  (*v17)();
LABEL_13:
  if (v24 == v23)
  {
    v18 = (void (**)(void))(v23[0] + 32);
  }
  else
  {
    if (!v24)
      goto LABEL_17;
    v18 = (void (**)(void))(*v24 + 40);
  }
  (*v18)();
LABEL_17:
  if (v28 == v27)
  {
    v19 = (void (**)(void))(v27[0] + 32);
    goto LABEL_20;
  }
  if (v28)
  {
    v19 = (void (**)(void))(*v28 + 40);
LABEL_20:
    (*v19)();
  }
  return v14;
}

void sub_1C614723C(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 32, &v5);
  sub_1C61472A8(a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C61472A8(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 32 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x400000000;
      if (*(_DWORD *)(v5 + 8))
        sub_1C48621E4((uint64_t)a2, v5);
      v5 += 32;
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 32 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 32);
        if ((void *)(v8 + v9 - 16) != v10)
          free(v10);
        v9 -= 32;
      }
      while (v9);
    }
  }
}

_QWORD *sub_1C6147350(_QWORD *a1)
{
  *a1 = &unk_1E7FA38B8;
  sub_1C495A1D8(a1 + 1);
  return a1;
}

void sub_1C6147384(_QWORD *a1)
{
  *a1 = &unk_1E7FA38B8;
  sub_1C495A1D8(a1 + 1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C61473C8(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E7FA38B8;
  return sub_1C495A128((uint64_t)(a2 + 1), a1 + 8);
}

_QWORD *sub_1C61473E8(uint64_t a1)
{
  return sub_1C495A1D8((_QWORD *)(a1 + 8));
}

_QWORD *sub_1C61473F0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E7FA3F30;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_1C6147450(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &unk_1E7FA3F30;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C61474C0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &unk_1E7FA3F30;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    if (v4 == a1 + 8)
    {
      v2[4] = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    }
    else
    {
      v2[4] = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
    }
  }
  else
  {
    v2[4] = 0;
  }
  return v2;
}

uint64_t sub_1C6147540(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &unk_1E7FA3F30;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

_QWORD *sub_1C61475B8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 32);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_1C61475EC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_4;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_4:
  operator delete(a1);
}

uint64_t sub_1C6147640(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)result = &off_1E7FA44C0;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 440);
  *(_BYTE *)(result + 16) = *(_BYTE *)(a2 + 452);
  *(_WORD *)(result + 17) = *(_WORD *)(a2 + 453);
  *(_QWORD *)(result + 20) = *(_QWORD *)(a2 + 460);
  v2 = *(_QWORD *)(a2 + 468);
  if ((v2 & 0xFF00000000) != 0)
  {
    *(_DWORD *)(result + 28) = v2;
    v3 = 1;
  }
  else
  {
    v3 = 0;
    *(_BYTE *)(result + 28) = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

uint64_t sub_1C61476A0(uint64_t a1, uint64_t *a2)
{
  return sub_1C61476B0(a2, a1);
}

uint64_t sub_1C61476B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v5;

  sub_1C6133C1C(a1, (uint64_t)"VertexInputRegCount", (_DWORD *)(a2 + 8), 0);
  sub_1C6133C1C(a1, (uint64_t)"SampleScratchReg", (_DWORD *)(a2 + 12), 0);
  sub_1C6147850((uint64_t)a1, (uint64_t)"HasIndirectBranches", (_BYTE *)(a2 + 16), 0);
  sub_1C6147850((uint64_t)a1, (uint64_t)"HasSIMDPermuteRegReserved", (_BYTE *)(a2 + 17), 0);
  sub_1C6147850((uint64_t)a1, (uint64_t)"FrameFinalized", (_BYTE *)(a2 + 18), 0);
  sub_1C61478D8(a1, (uint64_t)"SpillSlotFI", (uint64_t *)(a2 + 20), 0);
  sub_1C61478D8(a1, (uint64_t)"TLSAllocSize", (uint64_t *)(a2 + 24), 0);
  v5 = 0;
  return sub_1C495C6D8(a1, (uint64_t)"LMSpillAddressRegister", a2 + 28, &v5, 0);
}

uint64_t sub_1C61477BC(uint64_t result, uint64_t a2)
{
  int v2;

  *(_QWORD *)(result + 440) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(result + 452) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(result + 453) = *(_WORD *)(a2 + 17);
  *(_QWORD *)(result + 460) = *(_QWORD *)(a2 + 20);
  if (*(_BYTE *)(a2 + 32))
  {
    v2 = *(unsigned __int8 *)(result + 472);
    *(_DWORD *)(result + 468) = *(_DWORD *)(a2 + 28);
    if (!v2)
      *(_BYTE *)(result + 472) = 1;
  }
  else
  {
    *(_QWORD *)(result + 468) = 0;
  }
  return result;
}

void sub_1C6147814(uint64_t a1)
{
  sub_1C495C870(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C614783C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6147850(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*(_QWORD *)a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_1C495C3FC(a1, a3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v8);
  }
  return result;
}

uint64_t sub_1C61478D8(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  char v7;
  uint64_t v8;

  v8 = 0;
  v7 = 0;
  result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, a2, a4, 0, &v7, &v8);
  if ((_DWORD)result)
  {
    sub_1C495C580(a1, a3);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v8);
  }
  return result;
}

void sub_1C6147960(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EB558);
  if (v1 != -1)
  {
    v4[0] = sub_1C495D200;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EB558, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C61479C0()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF730);
  *result = &off_1E7FA4510;
  return result;
}

llvm::cl::Option *sub_1C6147A00(llvm::cl::Option *a1, char *a2, __n128 *a3, _BYTE **a4, _WORD *a5)
{
  uint64_t v10;

  v10 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_BYTE *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E898;
  *(_QWORD *)(v10 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v10 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  sub_1C495EA28(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

void sub_1C6147AB4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EB560);
  if (v1 != -1)
  {
    v4[0] = sub_1C495EB38;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EB560, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C6147B14()
{
  uint64_t v0;
  _QWORD *result;
  char v2;

  v0 = operator new();
  v2 = byte_1EF8EF738;
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&v2);
  *result = &off_1E7FA4610;
  return result;
}

uint64_t sub_1C6147B64(uint64_t result)
{
  void *v1;
  uint64_t v2;

  v1 = *(void **)(result + 24);
  if (v1 != (void *)(result + 40))
  {
    v2 = result;
    free(v1);
    return v2;
  }
  return result;
}

_QWORD *sub_1C6147BA0(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)llvm::RegisterBankInfo::RegisterBankInfo(a1, (llvm::RegisterBank **)&off_1EF8EB090, 1);
  *result = &off_1E7FA46E0;
  if ((byte_1ED7EB5C8 & 1) == 0)
    byte_1ED7EB5C8 = 1;
  return result;
}

void sub_1C6147BF4(uint64_t *a1)
{
  sub_1C495EF58(a1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C6147C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2 != a3;
}

uint64_t sub_1C6147C24()
{
  return 0xFFFFFFFFLL;
}

char *sub_1C6147C30(uint64_t a1, int a2)
{
  return off_1E7FA5098[a2];
}

double sub_1C6147C40(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = llvm::TargetRegisterInfo::TargetRegisterInfo(a1, (uint64_t)&off_1E7FA50A8, (uint64_t)&off_1E7FA50C0, (uint64_t)off_1E7FA5238, (uint64_t)off_1E7FA5238, (uint64_t)&unk_1C6610520, -1, (uint64_t)&unk_1E7FA57E8, 0);
  *(_QWORD *)v1 = off_1E7FA5C60;
  *(_QWORD *)(v1 + 8) = "0";
  *(_QWORD *)(v1 + 16) = 2559;
  *(_DWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &off_1E8055030;
  *(_QWORD *)(v1 + 64) = &unk_1C6965370;
  *(_QWORD *)(v1 + 72) = "R89_R90_R91_R92_R93_R94_R95_R96_R97_R98_R99_R100";
  *(_QWORD *)(v1 + 48) = &unk_1C6978CCC;
  *(_QWORD *)(v1 + 56) = &unk_1C6960108;
  *(_QWORD *)(v1 + 40) = 0x1380000002FLL;
  *(_QWORD *)(v1 + 80) = "GPR32tup12";
  *(_QWORD *)(v1 + 88) = &unk_1C6965768;
  *(_DWORD *)(v1 + 104) = 182;
  *(_QWORD *)(v1 + 96) = &unk_1C6965C98;
  *(_QWORD *)(v1 + 112) = &unk_1C6982558;
  *(_QWORD *)(v1 + 152) = &unk_1C697F1A8;
  *(_QWORD *)(v1 + 160) = &unk_1C697FDBC;
  *(_QWORD *)(v1 + 136) = &unk_1C69809D0;
  *(_QWORD *)(v1 + 144) = &unk_1C6981794;
  *(_QWORD *)&result = 0x1B8000001B8;
  *(_OWORD *)(v1 + 120) = xmmword_1C660B7A0;
  return result;
}

_UNKNOWN **sub_1C6147D5C()
{
  return &off_1E7FA5EB8;
}

uint64_t sub_1C6147D6C()
{
  return 0;
}

uint64_t sub_1C6147D74()
{
  return 0;
}

char **sub_1C6147D7C()
{
  return off_1E7FA5EC8;
}

int32x2_t sub_1C6147D90(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v6 = 0;
  if (sub_1C4964208(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v6))
  {
    v4 = v6;
    v5 = (_QWORD *)v6[1];
    if (v5 != v6 + 3)
      free(v5);
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void sub_1C6147E10(llvm::TargetRegisterInfo *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E7FA6230;
  v2 = (char *)*((_QWORD *)this + 35);
  if (v2 != (char *)this + 296)
    free(v2);
  llvm::TargetRegisterInfo::~TargetRegisterInfo(this);
}

void sub_1C6147E50(llvm::TargetRegisterInfo *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E7FA6230;
  v2 = (char *)*((_QWORD *)this + 35);
  if (v2 != (char *)this + 296)
    free(v2);
  llvm::TargetRegisterInfo::~TargetRegisterInfo(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6147EA4()
{
  return 0;
}

uint64_t sub_1C6147EAC()
{
  return 0;
}

_DWORD *sub_1C6147EB4(_DWORD *result, unsigned int a2, unsigned __int8 a3)
{
  _DWORD *v5;
  uint64_t v6;

  v5 = result;
  v6 = result[2];
  if (v6 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 8);
    LODWORD(v6) = v5[2];
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = a2 | ((unint64_t)a3 << 32);
  ++v5[2];
  return result;
}

uint64_t sub_1C6147F28(uint64_t a1, char *a2, _WORD *a3, _OWORD *a4, int **a5)
{
  uint64_t v10;
  size_t v11;
  int v12;

  v10 = sub_1C47AD050(a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F952A8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E3B0;
  *(_QWORD *)(v10 + 152) = &unk_1E819E2C0;
  *(_QWORD *)(v10 + 160) = &off_1E7F95260;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  *(_OWORD *)(a1 + 32) = *a4;
  v12 = **a5;
  *(_DWORD *)(a1 + 128) = v12;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v12;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

llvm::cl::Option *sub_1C6148018(llvm::cl::Option *a1, char *a2, _WORD *a3, __n128 *a4, _BYTE **a5)
{
  uint64_t v10;

  v10 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_BYTE *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E898;
  *(_QWORD *)(v10 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v10 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  sub_1C4964004(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

void sub_1C61480CC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EB818);
  if (v1 != -1)
  {
    v4[0] = sub_1C49646A0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EB818, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C614812C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4964748(v0);
}

void sub_1C6148154(unsigned int *a1)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  void *v5;
  size_t v6;

  v2 = *a1;
  v3 = 1 << (33 - __clz((*a1 >> 1) - 1));
  if (*a1 >= 2)
    v4 = v3;
  else
    v4 = 0;
  if ((v2 & 1) != 0 && v4 < 0x21)
  {
    *(_QWORD *)a1 = 1;
    v5 = a1 + 2;
    v6 = 256;
LABEL_7:
    memset_pattern16(v5, &unk_1C6612680, v6);
    return;
  }
  if ((v2 & 1) != 0)
    goto LABEL_9;
  if (v4 != a1[4])
  {
    MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 1), 4);
LABEL_9:
    sub_1C496F1BC(a1, v4);
    return;
  }
  *(_QWORD *)a1 = 0;
  if (v2 >= 2)
  {
    v5 = (void *)*((_QWORD *)a1 + 1);
    v6 = 8 * v4;
    goto LABEL_7;
  }
}

void sub_1C6148218(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EB858);
  if (v1 != -1)
  {
    v4[0] = sub_1C4974820;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EB858, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6148278()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C49748CC(v0);
}

_DWORD *sub_1C61482A0(uint64_t a1, int *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v9;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v9 = 0;
LABEL_5:
    v6 = sub_1C4979214(a1, (uint64_t)a2, a2, v9);
    *(_QWORD *)v6 = *a2;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + 8 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v10 = 0;
    v11 = 1;
    while (v7 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v7 == -2;
      if (v12)
        v10 = v6;
      v13 = v5 + v11++;
      v5 = v13 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + 8 * (v13 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v10)
      v9 = v10;
    else
      v9 = v6;
    goto LABEL_5;
  }
  return v6;
}

void sub_1C614835C(__int128 *a1, _WORD *a2, int **a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED7EB860, 0, 0);
  dword_1ED7EB8E0 = 0;
  qword_1ED7EB8E8 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED7EB8F0 = 0;
  qword_1ED7EB860 = (uint64_t)&unk_1E819E3B0;
  qword_1ED7EB8F8 = (uint64_t)&unk_1E819E2C0;
  qword_1ED7EB900 = (uint64_t)&off_1E7F95260;
  qword_1ED7EB918 = (uint64_t)&qword_1ED7EB900;
  llvm::cl::Option::setArgStr(v6, "agx2-set-spill-to-lm-tgt-threadgroup-size", 0x29uLL);
  xmmword_1ED7EB880 = *a1;
  word_1ED7EB86A = word_1ED7EB86A & 0xFFF8 | *a2 & 7;
  dword_1ED7EB8E0 = **a3;
  byte_1ED7EB8F4 = 1;
  dword_1ED7EB8F0 = dword_1ED7EB8E0;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EB860);
}

void sub_1C6148430(__int128 *a1, _WORD *a2, int **a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED7EB920, 0, 0);
  dword_1ED7EB9A0 = 0;
  qword_1ED7EB9A8 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED7EB9B0 = 0;
  qword_1ED7EB920 = (uint64_t)&unk_1E819E3B0;
  qword_1ED7EB9B8 = (uint64_t)&unk_1E819E2C0;
  qword_1ED7EB9C0 = (uint64_t)&off_1E7F95260;
  qword_1ED7EB9D8 = (uint64_t)&qword_1ED7EB9C0;
  llvm::cl::Option::setArgStr(v6, "agx2-set-spill-to-lm-tgt-default-lower-bound", 0x2CuLL);
  xmmword_1ED7EB940 = *a1;
  word_1ED7EB92A = word_1ED7EB92A & 0xFFF8 | *a2 & 7;
  dword_1ED7EB9A0 = **a3;
  byte_1ED7EB9B4 = 1;
  dword_1ED7EB9B0 = dword_1ED7EB9A0;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EB920);
}

void sub_1C6148504(__int128 *a1, _WORD *a2, int **a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED7EB9E0, 0, 0);
  dword_1ED7EBA60 = 0;
  qword_1ED7EBA68 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED7EBA70 = 0;
  qword_1ED7EB9E0 = (uint64_t)&unk_1E819E3B0;
  qword_1ED7EBA78 = (uint64_t)&unk_1E819E2C0;
  qword_1ED7EBA80 = (uint64_t)&off_1E7F95260;
  qword_1ED7EBA98 = (uint64_t)&qword_1ED7EBA80;
  llvm::cl::Option::setArgStr(v6, "agx2-set-spill-to-lm-tgt-spilling-room", 0x26uLL);
  xmmword_1ED7EBA00 = *a1;
  word_1ED7EB9EA = word_1ED7EB9EA & 0xFFF8 | *a2 & 7;
  dword_1ED7EBA60 = **a3;
  byte_1ED7EBA74 = 1;
  dword_1ED7EBA70 = dword_1ED7EBA60;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EB9E0);
}

void sub_1C61485D8(__int128 *a1, _WORD *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED7EBAA0, 0, 0);
  dword_1ED7EBB20 = 0;
  qword_1ED7EBB28 = (uint64_t)&off_1E7F952A8;
  unk_1ED7EBB30 = 0;
  qword_1ED7EBAA0 = (uint64_t)&unk_1E819E3B0;
  qword_1ED7EBB38 = (uint64_t)&unk_1E819E2C0;
  qword_1ED7EBB40 = (uint64_t)&off_1E7F95260;
  qword_1ED7EBB58 = (uint64_t)&qword_1ED7EBB40;
  llvm::cl::Option::setArgStr(v4, "agx2-set-spill-to-lm-tgt-occupancy-limit", 0x28uLL);
  xmmword_1ED7EBAC0 = *a1;
  word_1ED7EBAAA = word_1ED7EBAAA & 0xFFF8 | *a2 & 7;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EBAA0);
}

void sub_1C6148690(__int128 *a1, _WORD *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED7EBB60, 0, 0);
  byte_1ED7EBBE0 = 0;
  qword_1ED7EBBE8 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7EBBF0 = 0;
  qword_1ED7EBB60 = (uint64_t)&unk_1E819E898;
  qword_1ED7EBBF8 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EBC00 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EBC18 = (uint64_t)&qword_1ED7EBC00;
  llvm::cl::Option::setArgStr(v4, "agx2-set-spill-to-lm-tgt-handle-unspillable", 0x2BuLL);
  xmmword_1ED7EBB80 = *a1;
  word_1ED7EBB6A = word_1ED7EBB6A & 0xFFF8 | *a2 & 7;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EBB60);
}

void sub_1C6148748(_WORD *a1, __n128 *a2, char **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED7EBCE0, 0, 0);
  byte_1ED7EBD60 = 0;
  qword_1ED7EBD68 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7EBD70 = 0;
  qword_1ED7EBCE0 = (uint64_t)&unk_1E819E898;
  qword_1ED7EBD78 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EBD80 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EBD98 = (uint64_t)&qword_1ED7EBD80;
  sub_1C4979834(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EBCE0);
}

__int128 *sub_1C61487EC(uint64_t a1, _DWORD *a2, size_t a3, _DWORD *a4, size_t a5, const void *a6, size_t a7, uint64_t a8)
{
  __int128 *result;
  uint64_t v10;
  uint64_t v11;

  result = llvm::MCSubtargetInfo::InitMCProcessorInfo(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 192);
  if ((v10 & 1) != 0)
    *(_BYTE *)(a1 + 382) = 1;
  if ((v10 & 2) != 0)
    *(_BYTE *)(a1 + 339) = 1;
  if ((v10 & 4) != 0)
    *(_BYTE *)(a1 + 400) = 1;
  if ((v10 & 8) != 0)
    *(_BYTE *)(a1 + 286) = 1;
  if ((v10 & 0x10) != 0)
    *(_BYTE *)(a1 + 362) = 1;
  if ((v10 & 0x20) != 0)
    *(_BYTE *)(a1 + 349) = 1;
  if ((v10 & 0x40) != 0)
    *(_BYTE *)(a1 + 351) = 1;
  if ((v10 & 0x80) != 0)
    *(_BYTE *)(a1 + 350) = 1;
  if ((v10 & 0x100) != 0)
    *(_BYTE *)(a1 + 352) = 1;
  if ((v10 & 0x200) != 0)
    *(_BYTE *)(a1 + 328) = 1;
  if ((v10 & 0x400) != 0)
    *(_BYTE *)(a1 + 396) = 1;
  if ((v10 & 0x800) != 0)
    *(_BYTE *)(a1 + 386) = 1;
  if ((v10 & 0x1000) != 0)
    *(_BYTE *)(a1 + 348) = 1;
  if ((v10 & 0x2000) != 0)
    *(_BYTE *)(a1 + 284) = 1;
  if ((v10 & 0x4000) != 0)
    *(_BYTE *)(a1 + 370) = 1;
  if ((v10 & 0x8000) != 0)
    *(_BYTE *)(a1 + 402) = 1;
  if ((v10 & 0x10000) != 0)
    *(_BYTE *)(a1 + 407) = 1;
  if ((v10 & 0x20000) != 0)
    *(_BYTE *)(a1 + 317) = 1;
  if ((v10 & 0x40000) != 0)
    *(_BYTE *)(a1 + 388) = 1;
  if ((v10 & 0x80000) != 0)
    *(_BYTE *)(a1 + 280) = 1;
  if ((v10 & 0x100000) != 0)
    *(_BYTE *)(a1 + 397) = 1;
  if ((v10 & 0x200000) != 0)
    *(_BYTE *)(a1 + 398) = 1;
  if ((v10 & 0x400000) != 0)
    *(_BYTE *)(a1 + 347) = 1;
  if ((v10 & 0x800000) != 0)
    *(_BYTE *)(a1 + 384) = 1;
  if ((v10 & 0x1000000) != 0)
    *(_BYTE *)(a1 + 363) = 1;
  if ((v10 & 0x2000000) != 0)
    *(_BYTE *)(a1 + 338) = 1;
  if ((v10 & 0x4000000) != 0)
    *(_BYTE *)(a1 + 340) = 1;
  if ((v10 & 0x8000000) != 0)
    *(_BYTE *)(a1 + 371) = 1;
  if ((v10 & 0x10000000) != 0)
    *(_BYTE *)(a1 + 372) = 1;
  if ((v10 & 0x20000000) != 0)
    *(_BYTE *)(a1 + 295) = 1;
  if ((v10 & 0x40000000) != 0)
    *(_BYTE *)(a1 + 401) = 1;
  if ((v10 & 0x80000000) != 0)
    *(_BYTE *)(a1 + 324) = 1;
  if ((v10 & 0x100000000) != 0)
    *(_BYTE *)(a1 + 323) = 1;
  if ((v10 & 0x200000000) != 0)
    *(_BYTE *)(a1 + 318) = 1;
  if ((v10 & 0x400000000) != 0)
    *(_BYTE *)(a1 + 325) = 1;
  if ((v10 & 0x800000000) != 0)
    *(_BYTE *)(a1 + 319) = 1;
  if ((v10 & 0x1000000000) != 0)
    *(_BYTE *)(a1 + 326) = 1;
  if ((v10 & 0x2000000000) != 0)
    *(_BYTE *)(a1 + 320) = 1;
  if ((v10 & 0x4000000000) != 0)
    *(_BYTE *)(a1 + 344) = 1;
  if ((v10 & 0x8000000000) != 0)
    *(_BYTE *)(a1 + 346) = 1;
  if ((v10 & 0x10000000000) != 0)
    *(_BYTE *)(a1 + 327) = 1;
  if ((v10 & 0x20000000000) != 0)
    *(_BYTE *)(a1 + 321) = 1;
  if ((v10 & 0x40000000000) != 0)
    *(_BYTE *)(a1 + 381) = 1;
  if ((v10 & 0x80000000000) != 0)
    *(_BYTE *)(a1 + 322) = 1;
  if ((v10 & 0x100000000000) != 0)
    *(_BYTE *)(a1 + 356) = 1;
  if ((v10 & 0x200000000000) != 0)
    *(_BYTE *)(a1 + 355) = 1;
  if ((v10 & 0x400000000000) != 0)
    *(_BYTE *)(a1 + 379) = 1;
  if ((v10 & 0x800000000000) != 0)
    *(_BYTE *)(a1 + 380) = 1;
  if ((v10 & 0x1000000000000) != 0)
    *(_BYTE *)(a1 + 357) = 1;
  if ((v10 & 0x2000000000000) != 0)
    *(_BYTE *)(a1 + 358) = 1;
  if ((v10 & 0x4000000000000) != 0)
    *(_BYTE *)(a1 + 359) = 1;
  if ((v10 & 0x8000000000000) != 0)
    *(_BYTE *)(a1 + 360) = 1;
  if ((v10 & 0x10000000000000) != 0)
    *(_BYTE *)(a1 + 394) = 1;
  if ((v10 & 0x20000000000000) != 0)
    *(_BYTE *)(a1 + 316) = 1;
  if ((v10 & 0x40000000000000) != 0)
    *(_BYTE *)(a1 + 301) = 1;
  if ((v10 & 0x80000000000000) != 0)
    *(_BYTE *)(a1 + 378) = 1;
  if ((v10 & 0x100000000000000) != 0)
    *(_BYTE *)(a1 + 298) = 1;
  if ((v10 & 0x200000000000000) != 0)
    *(_BYTE *)(a1 + 404) = 1;
  if ((v10 & 0x400000000000000) != 0)
    *(_BYTE *)(a1 + 376) = 1;
  if ((v10 & 0x800000000000000) != 0)
    *(_BYTE *)(a1 + 375) = 1;
  if ((v10 & 0x1000000000000000) != 0)
    *(_BYTE *)(a1 + 329) = 1;
  if ((v10 & 0x2000000000000000) != 0)
    *(_BYTE *)(a1 + 361) = 1;
  if ((v10 & 0x4000000000000000) != 0)
    *(_BYTE *)(a1 + 283) = 1;
  if (v10 < 0)
    *(_BYTE *)(a1 + 392) = 1;
  v11 = *(_QWORD *)(a1 + 200);
  if ((v11 & 1) != 0)
    *(_BYTE *)(a1 + 345) = 1;
  if ((v11 & 2) != 0)
    *(_BYTE *)(a1 + 393) = 1;
  if ((v11 & 4) != 0)
    *(_BYTE *)(a1 + 405) = 1;
  if ((v11 & 8) != 0)
    *(_BYTE *)(a1 + 406) = 1;
  if ((v11 & 0x10) != 0)
    *(_BYTE *)(a1 + 300) = 1;
  if ((v11 & 0x20) != 0)
    *(_BYTE *)(a1 + 313) = 1;
  if ((v11 & 0x40) != 0)
    *(_BYTE *)(a1 + 314) = 1;
  if ((v11 & 0x80) != 0)
    *(_BYTE *)(a1 + 315) = 1;
  if ((v11 & 0x100) != 0)
    *(_BYTE *)(a1 + 312) = 1;
  if ((v11 & 0x200) != 0)
    *(_BYTE *)(a1 + 395) = 1;
  if ((v11 & 0x400) != 0)
    *(_BYTE *)(a1 + 364) = 1;
  if ((v11 & 0x800) != 0)
    *(_BYTE *)(a1 + 383) = 1;
  if ((v11 & 0x1000) != 0)
    *(_BYTE *)(a1 + 302) = 1;
  if ((v11 & 0x2000) != 0)
    *(_BYTE *)(a1 + 311) = 1;
  if ((v11 & 0x4000) != 0)
    *(_BYTE *)(a1 + 303) = 1;
  if ((v11 & 0x8000) != 0)
    *(_BYTE *)(a1 + 305) = 1;
  if ((v11 & 0x10000) != 0)
    *(_BYTE *)(a1 + 306) = 1;
  if ((v11 & 0x20000) != 0)
    *(_BYTE *)(a1 + 307) = 1;
  if ((v11 & 0x40000) != 0)
    *(_BYTE *)(a1 + 308) = 1;
  if ((v11 & 0x80000) != 0)
    *(_BYTE *)(a1 + 309) = 1;
  if ((v11 & 0x100000) != 0)
    *(_BYTE *)(a1 + 304) = 1;
  if ((v11 & 0x200000) != 0)
    *(_BYTE *)(a1 + 310) = 1;
  if ((v11 & 0x400000) != 0)
    *(_BYTE *)(a1 + 399) = 1;
  if ((v11 & 0x800000) != 0)
    *(_BYTE *)(a1 + 297) = 1;
  if ((v11 & 0x1000000) != 0)
    *(_BYTE *)(a1 + 299) = 1;
  if ((v11 & 0x2000000) != 0)
    *(_BYTE *)(a1 + 389) = 1;
  if ((v11 & 0x4000000) != 0)
    *(_BYTE *)(a1 + 385) = 1;
  if ((v11 & 0x8000000) != 0)
    *(_BYTE *)(a1 + 296) = 1;
  if ((v11 & 0x10000000) != 0)
    *(_BYTE *)(a1 + 377) = 1;
  if ((v11 & 0x20000000) != 0)
    *(_BYTE *)(a1 + 374) = 1;
  if ((v11 & 0x40000000) != 0)
    *(_BYTE *)(a1 + 390) = 1;
  if ((v11 & 0x80000000) != 0)
    *(_BYTE *)(a1 + 333) = 1;
  if ((v11 & 0x100000000) != 0)
    *(_BYTE *)(a1 + 332) = 1;
  if ((v11 & 0x200000000) != 0)
    *(_BYTE *)(a1 + 334) = 1;
  if ((v11 & 0x400000000) != 0)
    *(_BYTE *)(a1 + 335) = 1;
  if ((v11 & 0x800000000) != 0)
    *(_BYTE *)(a1 + 336) = 1;
  if ((v11 & 0x1000000000) != 0)
    *(_BYTE *)(a1 + 369) = 1;
  if ((v11 & 0x2000000000) != 0)
    *(_BYTE *)(a1 + 366) = 1;
  if ((v11 & 0x4000000000) != 0)
    *(_BYTE *)(a1 + 365) = 1;
  if ((v11 & 0x8000000000) != 0)
    *(_BYTE *)(a1 + 368) = 1;
  if ((v11 & 0x10000000000) != 0)
    *(_BYTE *)(a1 + 367) = 1;
  if ((v11 & 0x20000000000) != 0)
    *(_BYTE *)(a1 + 331) = 1;
  if ((v11 & 0x40000000000) != 0)
    *(_BYTE *)(a1 + 353) = 1;
  if ((v11 & 0x80000000000) != 0)
    *(_BYTE *)(a1 + 354) = 1;
  if ((v11 & 0x100000000000) != 0)
    *(_BYTE *)(a1 + 391) = 1;
  if ((v11 & 0x200000000000) != 0)
    *(_BYTE *)(a1 + 281) = 1;
  if ((v11 & 0x400000000000) != 0)
    *(_BYTE *)(a1 + 408) = 1;
  if ((v11 & 0x800000000000) != 0)
    *(_BYTE *)(a1 + 282) = 1;
  if ((v11 & 0x1000000000000) != 0)
    *(_BYTE *)(a1 + 287) = 1;
  if ((v11 & 0x2000000000000) != 0)
    *(_BYTE *)(a1 + 288) = 1;
  if ((v11 & 0x4000000000000) != 0)
    *(_BYTE *)(a1 + 289) = 1;
  if ((v11 & 0x8000000000000) != 0)
    *(_BYTE *)(a1 + 290) = 1;
  if ((v11 & 0x10000000000000) != 0)
    *(_BYTE *)(a1 + 291) = 1;
  if ((v11 & 0x20000000000000) != 0)
    *(_BYTE *)(a1 + 292) = 1;
  if ((v11 & 0x40000000000000) != 0)
    *(_BYTE *)(a1 + 293) = 1;
  if ((v11 & 0x80000000000000) != 0)
    *(_BYTE *)(a1 + 294) = 1;
  if ((v11 & 0x100000000000000) != 0)
    *(_BYTE *)(a1 + 285) = 1;
  if ((v11 & 0x200000000000000) != 0)
    *(_BYTE *)(a1 + 373) = 1;
  if ((v11 & 0x400000000000000) != 0)
    *(_BYTE *)(a1 + 343) = 1;
  if ((v11 & 0x800000000000000) != 0)
    *(_BYTE *)(a1 + 387) = 1;
  if ((v11 & 0x1000000000000000) != 0)
    *(_BYTE *)(a1 + 342) = 1;
  if ((v11 & 0x2000000000000000) != 0)
    *(_BYTE *)(a1 + 341) = 1;
  if ((v11 & 0x4000000000000000) != 0)
    *(_BYTE *)(a1 + 337) = 1;
  if (v11 < 0)
    *(_BYTE *)(a1 + 330) = 1;
  return result;
}

uint64_t sub_1C6148F94(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1C4C05D70(a2, a3, a4, a5);
}

_QWORD *sub_1C6148FA8(_QWORD *a1, __int128 *a2, void *a3, size_t a4, const void *a5, size_t a6, unsigned __int8 *a7)
{
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  size_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  _DWORD *v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v13 = llvm::TargetSubtargetInfo::TargetSubtargetInfo((uint64_t)a1, a2, a3, a4, a3, a4, a5, a6, (uint64_t)&off_1E80B73B0, 127, (uint64_t)&off_1E80B9520, 40, (uint64_t)&unk_1C69A418C, (uint64_t)&unk_1C69A429C, (uint64_t)&unk_1C69A42DC, 0, 0, 0);
  *v13 = &off_1E7FA6940;
  v14 = v13 + 32;
  std::string::__init((std::string *)(v13 + 32), (const std::string::value_type *)a3, a4);
  *((_WORD *)a1 + 140) = 256;
  *(_OWORD *)((char *)a1 + 282) = 0u;
  *(_OWORD *)((char *)a1 + 298) = 0u;
  *(_OWORD *)((char *)a1 + 314) = 0u;
  *(_OWORD *)((char *)a1 + 330) = 0u;
  *(_OWORD *)((char *)a1 + 346) = 0u;
  *(_OWORD *)((char *)a1 + 362) = 0u;
  *(_OWORD *)((char *)a1 + 378) = 0u;
  *(_OWORD *)((char *)a1 + 393) = 0u;
  *((_OWORD *)a1 + 26) = 0u;
  *((_OWORD *)a1 + 27) = 0u;
  a1[56] = 0;
  sub_1C613A21C(a1 + 57, a1);
  a1[115] = &off_1E7FA6B00;
  a1[116] = 0;
  v16 = *((char *)a1 + 279);
  if (v16 < 0)
    v17 = a1[33];
  else
    v17 = *((unsigned __int8 *)a1 + 279);
  if (!v17)
  {
    MEMORY[0x1CAA32ABC](v14, "g10");
    LOBYTE(v16) = *((_BYTE *)a1 + 279);
  }
  if ((v16 & 0x80u) == 0)
    v18 = v14;
  else
    v18 = (_DWORD *)a1[32];
  if ((v16 & 0x80u) == 0)
    v19 = v16 & 0x7F;
  else
    v19 = a1[33];
  llvm::MCSubtargetInfo::InitMCProcessorInfo((uint64_t)a1, v18, v19, v18, v19, a5, a6, v15);
  v21 = *((_BYTE *)a1 + 279);
  v22 = v21 < 0;
  if (v21 >= 0)
    v23 = v14;
  else
    v23 = (_DWORD *)a1[32];
  v24 = v21 & 0x7F;
  if (v22)
    v25 = a1[33];
  else
    v25 = v24;
  sub_1C61487EC((uint64_t)a1, v23, v25, v23, v25, a5, a6, v20);
  v26 = operator new();
  sub_1C6139F64(v26, (uint64_t)a1, 0);
  v27 = a1[56];
  a1[56] = v26;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = operator new();
  *(_QWORD *)sub_1C48ED184(v28, a7) = &unk_1E7FA2C60;
  v29 = a1[116];
  a1[116] = v28;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  v30 = operator new();
  (*(void (**)(_QWORD *))(*a1 + 176))(a1);
  sub_1C6147BA0(v30);
  v31 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  v32 = (_QWORD *)operator new();
  sub_1C61398CC(v32, v31);
  v33 = a1[52];
  a1[52] = v32;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
  v34 = sub_1C613A730((uint64_t)a7, (uint64_t)a1, v30);
  v35 = a1[53];
  a1[53] = v34;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = operator new();
  sub_1C6146354(v36, a1);
  v37 = a1[54];
  a1[54] = v36;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = a1[55];
  a1[55] = v30;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
  return a1;
}

void sub_1C614930C(uint64_t a1)
{
  sub_1C497A338(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6149330(uint64_t a1)
{
  return a1 + 920;
}

uint64_t sub_1C6149338()
{
  return 1;
}

void sub_1C6149344()
{
  JUMPOUT(0x1CAA32FC0);
}

void LLVMInitializeAGX2Target()
{
  uint64_t v1;

  qword_1ED82C490 = (uint64_t)sub_1C614AA04;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v1 = qword_1ED830BC0[0];
  sub_1C627DA28((llvm *)qword_1ED830BC0[0]);
  sub_1C626EB00(v1);
  sub_1C6139E7C(v1);
  sub_1C61440D8(v1);
  sub_1C614CAF4(v1);
  sub_1C614CCDC(v1);
  sub_1C614CFC4(v1);
  sub_1C614BF28(v1);
  sub_1C62778AC(v1);
  sub_1C55C7154(v1);
  sub_1C6139A14(v1);
  sub_1C6147960(v1);
  sub_1C6139C74(v1);
  sub_1C61480CC(v1);
  sub_1C614BD48(v1);
  sub_1C6147AB4(v1);
  sub_1C613AFBC(v1);
  sub_1C614D62C(v1);
  sub_1C6139FB8(v1);
  sub_1C6148218(v1);
  sub_1C614C878(v1);
  sub_1C614C004(v1);
}

uint64_t sub_1C6149468(uint64_t a1, uint64_t a2, __int128 *a3, void *a4, size_t a5, void *a6, size_t a7, __int128 *a8, uint64_t a9, uint64_t a10, int a11)
{
  llvm::TargetLoweringObjectFileMachO *v18;
  _BYTE v20[312];

  sub_1C4843154((uint64_t)v20, a8);
  sub_1C48424CC((_DWORD *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, (uint64_t)v20, a9, a10, a11);
  sub_1C48433E8((uint64_t)v20);
  *(_QWORD *)a1 = &off_1E7FA6B78;
  v18 = (llvm::TargetLoweringObjectFileMachO *)operator new();
  *(_QWORD *)(a1 + 1320) = llvm::TargetLoweringObjectFileMachO::TargetLoweringObjectFileMachO(v18);
  sub_1C6148FA8((_QWORD *)(a1 + 1328), a3, a4, a5, a6, a7, (unsigned __int8 *)a1);
  *(_OWORD *)(a1 + 2264) = 0u;
  *(_QWORD *)(a1 + 2280) = 0x1000000000;
  *(_BYTE *)(a1 + 592) |= 1u;
  llvm::LLVMTargetMachine::initAsmInfo((llvm::LLVMTargetMachine *)a1);
  return a1;
}

llvm::TargetPassConfig *sub_1C6149588(llvm::LLVMTargetMachine *a1, llvm::legacy::PassManagerBase *a2)
{
  llvm::TargetPassConfig *v4;
  llvm::TargetPassConfig *v5;

  v4 = (llvm::TargetPassConfig *)operator new();
  v5 = llvm::TargetPassConfig::TargetPassConfig(v4, a1, a2);
  *(_QWORD *)v5 = &off_1E7FA6C68;
  llvm::TargetPassConfig::substitutePass((uint64_t)v5, (uint64_t)&llvm::LiveVariables::ID, 0, 0);
  llvm::TargetPassConfig::substitutePass((uint64_t)v4, (uint64_t)&unk_1EF8F7011, 0, 0);
  llvm::TargetPassConfig::substitutePass((uint64_t)v4, (uint64_t)&unk_1EF8F6F51, 0, 0);
  return v4;
}

BOOL sub_1C614962C(llvm::TargetPassConfig *a1)
{
  return (*(_WORD *)(*((_QWORD *)a1 + 14) + 1020) & 0x1000) != 0
      || llvm::TargetPassConfig::reportDiagnosticWhenGlobalISelFallback(a1);
}

uint64_t sub_1C6149644(llvm::TargetPassConfig *a1)
{
  uint64_t v2;
  uint64_t OptLevel;
  llvm::Pass *v4;

  v2 = *((_QWORD *)a1 + 14);
  OptLevel = llvm::TargetPassConfig::getOptLevel(a1);
  v4 = (llvm::Pass *)sub_1C613B05C(v2, OptLevel);
  llvm::TargetPassConfig::addPass(a1, v4);
  return 0;
}

uint64_t sub_1C6149684(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  int OptLevel;

  v2 = (llvm::Pass *)operator new();
  OptLevel = llvm::TargetPassConfig::getOptLevel(a1);
  sub_1C626F09C((uint64_t)v2, OptLevel);
  llvm::TargetPassConfig::addPass(a1, v2);
  return 0;
}

void sub_1C61496E0(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;

  v2 = (llvm::Pass *)operator new();
  sub_1C614D140((uint64_t)v2);
  llvm::TargetPassConfig::addPass(a1, v2);
}

uint64_t sub_1C6149724(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;

  v2 = (llvm::Pass *)operator new();
  sub_1C627146C((uint64_t)v2);
  llvm::TargetPassConfig::addPass(a1, v2);
  return 0;
}

void sub_1C6149770(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  llvm::Pass *v3;

  v2 = (llvm::Pass *)operator new();
  sub_1C614CC70((uint64_t)v2);
  llvm::TargetPassConfig::addPass(a1, v2);
  v3 = (llvm::Pass *)operator new();
  sub_1C61441F0((uint64_t)v3);
  llvm::TargetPassConfig::addPass(a1, v3);
}

uint64_t sub_1C61497E0(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;

  v2 = (llvm::Pass *)operator new();
  sub_1C627799C((uint64_t)v2);
  llvm::TargetPassConfig::addPass(a1, v2);
  return 0;
}

uint64_t sub_1C614982C(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  llvm::Pass *v3;

  v2 = (llvm::Pass *)operator new();
  sub_1C6274CCC((uint64_t)v2);
  llvm::TargetPassConfig::addPass(a1, v2);
  v3 = (llvm::Pass *)operator new();
  sub_1C6270DE8((uint64_t)v3);
  llvm::TargetPassConfig::addPass(a1, v3);
  return 0;
}

void sub_1C61498A4(uint64_t a1)
{
  llvm::Pass *CodeGenPreparePass;
  llvm::Pass *v3;
  llvm *v4;
  llvm::Pass *v5;
  llvm::Pass *LowerSwitchPass;
  llvm::Pass *v7;
  _QWORD *v8;
  void (**v9)(_QWORD *);
  _QWORD *v10;
  void (**v11)(_QWORD *);
  _QWORD *v12;
  void (**v13)(_QWORD *);
  _QWORD *v14;
  void (**v15)(_QWORD *);
  _QWORD *v16;
  void (**v17)(_QWORD *);
  llvm::Pass *CFGSimplificationPass;
  llvm *v19;
  llvm::Pass *UnifyFunctionExitNodesPass;
  llvm::Pass *v21;
  llvm::Pass *v22;
  llvm::Pass *v23;
  _QWORD *v24;
  void (**v25)(_QWORD *);
  llvm *v26;
  uint64_t (**v27)(llvm *);
  llvm::Pass *LoopSimplifyPass;
  llvm::Pass *v29;
  _QWORD *v30;
  void (**v31)(_QWORD *);
  _QWORD *v32;
  void (**v33)(_QWORD *);
  llvm::Pass *v34;
  llvm::PassRegistry *v35;
  uint64_t v36;
  llvm::Pass *v38;
  uint64_t (**v39)(llvm *);
  llvm::Pass *VerifierPass;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD v47[3];
  _QWORD *v48;
  _QWORD v49[3];
  _QWORD *v50;
  _QWORD v51[3];
  llvm *v52;
  _QWORD v53[3];
  llvm *v54;
  _QWORD v55[3];
  _QWORD *v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[3];
  _QWORD *v60;
  _QWORD v61[3];
  _QWORD *v62;
  _QWORD v63[3];
  _QWORD *v64;
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (byte_1ED7EC360)
  {
    v38 = (llvm::Pass *)sub_1C614D524(*(_QWORD *)(a1 + 112));
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v38);
  }
  CodeGenPreparePass = (llvm::Pass *)llvm::createCodeGenPreparePass((llvm *)1);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, CodeGenPreparePass);
  v3 = (llvm::Pass *)sub_1C627DD50(*(_QWORD *)(a1 + 112));
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v3);
  if (!byte_1ED7EBE20)
  {
    v5 = (llvm::Pass *)sub_1C627D95C();
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v5);
  }
  LowerSwitchPass = (llvm::Pass *)llvm::createLowerSwitchPass(v4);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, LowerSwitchPass);
  v63[0] = &off_1E7FA73C0;
  v63[1] = a1;
  v64 = v63;
  v61[0] = &off_1E7FA7408;
  v61[1] = a1;
  v62 = v61;
  v59[0] = &off_1E7FA7450;
  v59[1] = a1;
  v60 = v59;
  v57[0] = &off_1E7FA7498;
  v57[1] = a1;
  v58 = v57;
  v55[0] = &off_1E7FA74E0;
  v55[1] = a1;
  v56 = v55;
  v7 = (llvm::Pass *)sub_1C6282A28(v63, v61, v59, v57, v55, 1, 0);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v7);
  v8 = v56;
  if (v56 == v55)
  {
    v9 = (void (**)(_QWORD *))(v55[0] + 32);
    v8 = v55;
LABEL_7:
    (*v9)(v8);
    goto LABEL_8;
  }
  if (v56)
  {
    v9 = (void (**)(_QWORD *))(*v56 + 40);
    goto LABEL_7;
  }
LABEL_8:
  v10 = v58;
  if (v58 == v57)
  {
    v11 = (void (**)(_QWORD *))(v57[0] + 32);
    v10 = v57;
LABEL_10:
    (*v11)(v10);
    goto LABEL_11;
  }
  if (v58)
  {
    v11 = (void (**)(_QWORD *))(*v58 + 40);
    goto LABEL_10;
  }
LABEL_11:
  v12 = v60;
  if (v60 == v59)
  {
    v13 = (void (**)(_QWORD *))(v59[0] + 32);
    v12 = v59;
LABEL_13:
    (*v13)(v12);
    goto LABEL_14;
  }
  if (v60)
  {
    v13 = (void (**)(_QWORD *))(*v60 + 40);
    goto LABEL_13;
  }
LABEL_14:
  v14 = v62;
  if (v62 == v61)
  {
    v15 = (void (**)(_QWORD *))(v61[0] + 32);
    v14 = v61;
LABEL_16:
    (*v15)(v14);
    goto LABEL_17;
  }
  if (v62)
  {
    v15 = (void (**)(_QWORD *))(*v62 + 40);
    goto LABEL_16;
  }
LABEL_17:
  v16 = v64;
  if (v64 == v63)
  {
    v17 = (void (**)(_QWORD *))(v63[0] + 32);
    v16 = v63;
LABEL_19:
    (*v17)(v16);
    goto LABEL_20;
  }
  if (v64)
  {
    v17 = (void (**)(_QWORD *))(*v64 + 40);
    goto LABEL_19;
  }
LABEL_20:
  v41 = 1;
  v42 = 0x101000101010001;
  v43 = 0;
  v44 = 0;
  v54 = 0;
  CFGSimplificationPass = (llvm::Pass *)llvm::createCFGSimplificationPass((uint64_t)&v41, v53);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, CFGSimplificationPass);
  v19 = v54;
  if (v54 == (llvm *)v53)
  {
    v39 = (uint64_t (**)(llvm *))(v53[0] + 32);
    v19 = (llvm *)v53;
  }
  else
  {
    if (!v54)
      goto LABEL_22;
    v39 = (uint64_t (**)(llvm *))(*(_QWORD *)v54 + 40);
  }
  v19 = (llvm *)(*v39)(v19);
LABEL_22:
  UnifyFunctionExitNodesPass = llvm::createUnifyFunctionExitNodesPass(v19);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, UnifyFunctionExitNodesPass);
  v21 = (llvm::Pass *)sub_1C6139CD4(*(_QWORD *)(a1 + 112));
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v21);
  v22 = (llvm::Pass *)sub_1C627E3D8(1);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v22);
  v51[0] = &off_1E7FA7528;
  v51[1] = a1;
  v52 = (llvm *)v51;
  v49[0] = &off_1E7FA7570;
  v49[1] = a1;
  v50 = v49;
  v23 = (llvm::Pass *)sub_1C6139A74(v51, v49);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v23);
  v24 = v50;
  if (v50 == v49)
  {
    v25 = (void (**)(_QWORD *))(v49[0] + 32);
    v24 = v49;
LABEL_24:
    (*v25)(v24);
    goto LABEL_25;
  }
  if (v50)
  {
    v25 = (void (**)(_QWORD *))(*v50 + 40);
    goto LABEL_24;
  }
LABEL_25:
  v26 = v52;
  if (v52 == (llvm *)v51)
  {
    v27 = (uint64_t (**)(llvm *))(v51[0] + 32);
    v26 = (llvm *)v51;
LABEL_27:
    v26 = (llvm *)(*v27)(v26);
    goto LABEL_28;
  }
  if (v52)
  {
    v27 = (uint64_t (**)(llvm *))(*(_QWORD *)v52 + 40);
    goto LABEL_27;
  }
LABEL_28:
  LoopSimplifyPass = (llvm::Pass *)llvm::createLoopSimplifyPass(v26);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, LoopSimplifyPass);
  v47[0] = &off_1E7FA75B8;
  v47[1] = a1;
  v48 = v47;
  v45[0] = &off_1E7FA7600;
  v45[1] = a1;
  v46 = v45;
  v29 = (llvm::Pass *)sub_1C627B90C(v47, v45);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v29);
  v30 = v46;
  if (v46 == v45)
  {
    v31 = (void (**)(_QWORD *))(v45[0] + 32);
    v30 = v45;
LABEL_30:
    (*v31)(v30);
    goto LABEL_31;
  }
  if (v46)
  {
    v31 = (void (**)(_QWORD *))(*v46 + 40);
    goto LABEL_30;
  }
LABEL_31:
  v32 = v48;
  if (v48 == v47)
  {
    v33 = (void (**)(_QWORD *))(v47[0] + 32);
    v32 = v47;
LABEL_33:
    (*v33)(v32);
    goto LABEL_34;
  }
  if (v48)
  {
    v33 = (void (**)(_QWORD *))(*v48 + 40);
    goto LABEL_33;
  }
LABEL_34:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  v34 = (llvm::Pass *)sub_1C627E474();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v34);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 112) + 1042) & 8) != 0)
  {
    v36 = operator new();
    *(_QWORD *)(v36 + 16) = &llvm::DummyCGSCCPass::ID;
    *(_DWORD *)(v36 + 24) = 3;
    *(_QWORD *)v36 = &off_1E7FA79F0;
    *(_QWORD *)(v36 + 8) = 0;
    if (!atomic_load(qword_1ED830BC0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    llvm::initializeDummyCGSCCPassPass((llvm *)qword_1ED830BC0[0], v35);
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, (llvm::Pass *)v36);
  }
  if (!*(_BYTE *)(a1 + 129))
  {
    VerifierPass = (llvm::Pass *)llvm::createVerifierPass((llvm *)1);
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, VerifierPass);
  }
}

void sub_1C6149DD8(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  llvm::Pass *v3;

  if (byte_1ED7EC2A0)
  {
    sub_1C614BFB0();
    llvm::TargetPassConfig::addPass(a1, v3);
  }
  v2 = (llvm::Pass *)sub_1C614C064();
  llvm::TargetPassConfig::addPass(a1, v2);
}

uint64_t sub_1C6149E20(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  llvm::Pass *v3;
  llvm::Pass *v4;
  llvm::Pass *v6;

  if (*(_BYTE *)(*((_QWORD *)a1 + 14) + 1716))
  {
    v6 = (llvm::Pass *)sub_1C614D1AC();
    llvm::TargetPassConfig::addPass(a1, v6);
  }
  v2 = (llvm::Pass *)sub_1C614812C();
  llvm::TargetPassConfig::addPass(a1, v2);
  v3 = (llvm::Pass *)sub_1C6147B14();
  llvm::TargetPassConfig::addPass(a1, v3);
  if (byte_1ED7EC060 || !word_1ED7EBFE8 && (*(_BYTE *)(*((_QWORD *)a1 + 14) + 1042) & 8) != 0)
  {
    v4 = (llvm::Pass *)sub_1C6148278();
    llvm::TargetPassConfig::addPass(a1, v4);
  }
  return 1;
}

uint64_t sub_1C6149EB4(llvm::TargetPassConfig *a1)
{
  _UNKNOWN **v2;
  llvm::Pass *GPUSampleSinkPass;

  llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6ED0);
  v2 = sub_1C6139F44();
  GPUSampleSinkPass = (llvm::Pass *)llvm::createGPUSampleSinkPass((uint64_t)v2, 1, 0, 0);
  llvm::TargetPassConfig::addPass(a1, GPUSampleSinkPass);
  return 0;
}

uint64_t sub_1C6149F00(llvm::TargetPassConfig *a1)
{
  _UNKNOWN **v2;
  llvm::Pass *GPUSampleSinkPass;

  v2 = sub_1C6139F44();
  GPUSampleSinkPass = (llvm::Pass *)llvm::createGPUSampleSinkPass((uint64_t)v2, 1, 0, 0);
  llvm::TargetPassConfig::addPass(a1, GPUSampleSinkPass);
  return 0;
}

void sub_1C6149F40(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  llvm::Pass *v3;

  v2 = (llvm::Pass *)sub_1C614C8D8();
  llvm::TargetPassConfig::addPass(a1, v2);
  v3 = (llvm::Pass *)sub_1C614D68C();
  llvm::TargetPassConfig::addPass(a1, v3);
}

void sub_1C6149F78(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;

  v2 = (llvm::Pass *)sub_1C61479C0();
  llvm::TargetPassConfig::addPass(a1, v2);
}

uint64_t sub_1C6149FA0()
{
  return 0;
}

void sub_1C6149FAC(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  _UNKNOWN **v3;
  llvm::Pass *GPUCFGLoweringPass;
  uint64_t (***v5)();
  llvm::Pass *GPUWaitPlacementPass;
  llvm::Pass *v7;
  llvm::Pass *v8;
  llvm::Pass *v9;
  llvm::Pass *v10;
  llvm::Pass *v11;
  llvm::Pass *v12;

  if (*(_BYTE *)(*((_QWORD *)a1 + 14) + 1659))
  {
    v2 = (llvm::Pass *)sub_1C613B01C();
    llvm::TargetPassConfig::addPass(a1, v2);
  }
  v3 = sub_1C6139F44();
  GPUCFGLoweringPass = (llvm::Pass *)llvm::createGPUCFGLoweringPass((uint64_t)v3);
  llvm::TargetPassConfig::addPass(a1, GPUCFGLoweringPass);
  v5 = sub_1C614BF14();
  GPUWaitPlacementPass = (llvm::Pass *)llvm::createGPUWaitPlacementPass((uint64_t)v5);
  llvm::TargetPassConfig::addPass(a1, GPUWaitPlacementPass);
  v7 = (llvm::Pass *)sub_1C614C838();
  llvm::TargetPassConfig::addPass(a1, v7);
  sub_1C6139EDC();
  llvm::TargetPassConfig::addPass(a1, v8);
  v9 = (llvm::Pass *)sub_1C613A018();
  llvm::TargetPassConfig::addPass(a1, v9);
  v10 = (llvm::Pass *)sub_1C613A040();
  llvm::TargetPassConfig::addPass(a1, v10);
  v11 = (llvm::Pass *)sub_1C614BDA8();
  llvm::TargetPassConfig::addPass(a1, v11);
  v12 = (llvm::Pass *)sub_1C614BF88();
  llvm::TargetPassConfig::addPass(a1, v12);
}

void sub_1C614A068(uint64_t a1)
{
  llvm::Pass *TypeBasedAAWrapperPass;
  llvm *v3;
  llvm::Pass *ScopedNoAliasAAWrapperPass;
  llvm *v5;
  llvm::Pass *BasicAAWrapperPass;
  llvm *v7;
  llvm::Pass *GPUAAWrapperPass;
  char *v9;
  llvm::Pass *v10;
  llvm::Pass *v11;
  llvm *v12;
  llvm::Pass *UnifyFunctionExitNodesPass;
  llvm::Pass *v14;
  llvm *v15;
  llvm::Pass *v16;
  llvm::Pass *v17;
  _QWORD *v18;
  void (**v19)(_QWORD *);
  llvm::Pass *v20;
  llvm::Pass *v21;
  _QWORD *v22;
  void (**v23)(_QWORD *);
  _QWORD *v24;
  void (**v25)(_QWORD *);
  llvm::Pass *v26;
  llvm *v27;
  llvm::Pass *LoadStoreVectorizerPass;
  llvm *v29;
  llvm::Pass *DeadCodeEliminationPass;
  llvm::Pass *v31;
  llvm::Pass *v32;
  llvm::Pass *v33;
  llvm::Pass *v34;
  llvm::Pass *v35;
  _QWORD *v36;
  void (**v37)(_QWORD *);
  _QWORD *v38;
  void (**v39)(_QWORD *);
  _QWORD *v40;
  void (**v41)(_QWORD *);
  _QWORD *v42;
  void (**v43)(_QWORD *);
  _QWORD *v44;
  void (**v45)(_QWORD *);
  _QWORD *v46;
  void (**v47)(_QWORD *);
  _QWORD *v48;
  void (**v49)(_QWORD *);
  _QWORD *v50;
  void (**v51)(_QWORD *);
  _QWORD *v52;
  void (**v53)(_QWORD *);
  llvm::Pass *v54;
  _QWORD *v55;
  void (**v56)(_QWORD *);
  llvm::Pass *v57;
  unsigned int v58;
  llvm::Pass *v59;
  llvm::Pass *VerifierPass;
  llvm::Pass *LowerAtomicPass;
  _QWORD v62[3];
  _QWORD *v63;
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  _QWORD v68[3];
  _QWORD *v69;
  _QWORD v70[3];
  _QWORD *v71;
  _QWORD v72[3];
  _QWORD *v73;
  _QWORD v74[3];
  _QWORD *v75;
  _QWORD v76[3];
  _QWORD *v77;
  _QWORD v78[3];
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  _QWORD v84[3];
  _QWORD *v85;
  _QWORD v86[3];
  _QWORD *v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  if (byte_1ED7EBEE0)
  {
    v58 = sub_1C4893C68((_BYTE *)(*(_QWORD *)(a1 + 112) + 1328));
    v59 = (llvm::Pass *)sub_1C627A444(v58 | 0x100000000);
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v59);
  }
  TypeBasedAAWrapperPass = llvm::createTypeBasedAAWrapperPass((llvm *)a1);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, TypeBasedAAWrapperPass);
  ScopedNoAliasAAWrapperPass = llvm::createScopedNoAliasAAWrapperPass(v3);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, ScopedNoAliasAAWrapperPass);
  BasicAAWrapperPass = llvm::createBasicAAWrapperPass(v5);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, BasicAAWrapperPass);
  GPUAAWrapperPass = llvm::createGPUAAWrapperPass(v7);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, GPUAAWrapperPass);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F7002, 0, 0);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F6EDD, 0, 0);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F6FB4, 0, 0);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F702A, 0, 0);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F6EDA, 0, 0);
  if (!*(_BYTE *)(a1 + 129))
  {
    VerifierPass = (llvm::Pass *)llvm::createVerifierPass((llvm *)1);
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, VerifierPass);
  }
  v9 = *(char **)(a1 + 112);
  v10 = (llvm::Pass *)sub_1C627D1D4(v9[1711]);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v10);
  v11 = (llvm::Pass *)sub_1C6283140();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v11);
  UnifyFunctionExitNodesPass = llvm::createUnifyFunctionExitNodesPass(v12);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, UnifyFunctionExitNodesPass);
  v14 = (llvm::Pass *)sub_1C6280AE8();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v14);
  if (v9[1697])
  {
    LowerAtomicPass = (llvm::Pass *)llvm::createLowerAtomicPass(v15);
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, LowerAtomicPass);
  }
  v16 = (llvm::Pass *)sub_1C627AAB8();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v16);
  v86[0] = &off_1E7FA7648;
  v86[1] = a1;
  v87 = v86;
  v17 = (llvm::Pass *)sub_1C627A944(v86, v9[1655], 1);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v17);
  v18 = v87;
  if (v87 == v86)
  {
    v19 = (void (**)(_QWORD *))(v86[0] + 32);
    v18 = v86;
LABEL_9:
    (*v19)(v18);
    goto LABEL_10;
  }
  if (v87)
  {
    v19 = (void (**)(_QWORD *))(*v87 + 40);
    goto LABEL_9;
  }
LABEL_10:
  if (!v9[1712])
  {
    v20 = (llvm::Pass *)sub_1C627D8D0();
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v20);
  }
  v84[0] = &off_1E7FA7690;
  v84[1] = a1;
  v85 = v84;
  v82[0] = &off_1E7FA76D8;
  v82[1] = a1;
  v83 = v82;
  v21 = (llvm::Pass *)sub_1C62803A8(v84, v82, 0, 0);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v21);
  v22 = v83;
  if (v83 == v82)
  {
    v23 = (void (**)(_QWORD *))(v82[0] + 32);
    v22 = v82;
LABEL_14:
    (*v23)(v22);
    goto LABEL_15;
  }
  if (v83)
  {
    v23 = (void (**)(_QWORD *))(*v83 + 40);
    goto LABEL_14;
  }
LABEL_15:
  v24 = v85;
  if (v85 == v84)
  {
    v25 = (void (**)(_QWORD *))(v84[0] + 32);
    v24 = v84;
LABEL_17:
    (*v25)(v24);
    goto LABEL_18;
  }
  if (v85)
  {
    v25 = (void (**)(_QWORD *))(*v85 + 40);
    goto LABEL_17;
  }
LABEL_18:
  v26 = (llvm::Pass *)sub_1C627B318();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v26);
  LoadStoreVectorizerPass = (llvm::Pass *)llvm::createLoadStoreVectorizerPass(v27);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, LoadStoreVectorizerPass);
  DeadCodeEliminationPass = (llvm::Pass *)llvm::createDeadCodeEliminationPass(v29);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, DeadCodeEliminationPass);
  v31 = (llvm::Pass *)sub_1C627DDEC();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v31);
  v32 = (llvm::Pass *)sub_1C627FA70(v9[1713]);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v32);
  sub_1C627AC5C();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v33);
  v34 = (llvm::Pass *)sub_1C6283540();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v34);
  v80[0] = &off_1E7FA7720;
  v80[1] = a1;
  v81 = v80;
  v78[0] = &off_1E7FA7768;
  v78[1] = a1;
  v79 = v78;
  v76[0] = &off_1E7FA77B0;
  v76[1] = a1;
  v77 = v76;
  v74[0] = &off_1E7FA77F8;
  v74[1] = a1;
  v75 = v74;
  v72[0] = &off_1E7FA7840;
  v72[1] = a1;
  v73 = v72;
  v70[0] = &off_1E7FA7888;
  v70[1] = a1;
  v71 = v70;
  v68[0] = &off_1E7FA78D0;
  v68[1] = a1;
  v69 = v68;
  v66[0] = &off_1E7FA7918;
  v66[1] = a1;
  v67 = v66;
  v64[0] = &off_1E7FA7960;
  v64[1] = a1;
  v65 = v64;
  v35 = (llvm::Pass *)sub_1C62813E4(v80, v78, v76, v74, v72, v70, v68, v66, v64, v9[1736], 1);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v35);
  v36 = v65;
  if (v65 == v64)
  {
    v37 = (void (**)(_QWORD *))(v64[0] + 32);
    v36 = v64;
LABEL_20:
    (*v37)(v36);
    goto LABEL_21;
  }
  if (v65)
  {
    v37 = (void (**)(_QWORD *))(*v65 + 40);
    goto LABEL_20;
  }
LABEL_21:
  v38 = v67;
  if (v67 == v66)
  {
    v39 = (void (**)(_QWORD *))(v66[0] + 32);
    v38 = v66;
LABEL_23:
    (*v39)(v38);
    goto LABEL_24;
  }
  if (v67)
  {
    v39 = (void (**)(_QWORD *))(*v67 + 40);
    goto LABEL_23;
  }
LABEL_24:
  v40 = v69;
  if (v69 == v68)
  {
    v41 = (void (**)(_QWORD *))(v68[0] + 32);
    v40 = v68;
LABEL_26:
    (*v41)(v40);
    goto LABEL_27;
  }
  if (v69)
  {
    v41 = (void (**)(_QWORD *))(*v69 + 40);
    goto LABEL_26;
  }
LABEL_27:
  v42 = v71;
  if (v71 == v70)
  {
    v43 = (void (**)(_QWORD *))(v70[0] + 32);
    v42 = v70;
LABEL_29:
    (*v43)(v42);
    goto LABEL_30;
  }
  if (v71)
  {
    v43 = (void (**)(_QWORD *))(*v71 + 40);
    goto LABEL_29;
  }
LABEL_30:
  v44 = v73;
  if (v73 == v72)
  {
    v45 = (void (**)(_QWORD *))(v72[0] + 32);
    v44 = v72;
LABEL_32:
    (*v45)(v44);
    goto LABEL_33;
  }
  if (v73)
  {
    v45 = (void (**)(_QWORD *))(*v73 + 40);
    goto LABEL_32;
  }
LABEL_33:
  v46 = v75;
  if (v75 == v74)
  {
    v47 = (void (**)(_QWORD *))(v74[0] + 32);
    v46 = v74;
LABEL_35:
    (*v47)(v46);
    goto LABEL_36;
  }
  if (v75)
  {
    v47 = (void (**)(_QWORD *))(*v75 + 40);
    goto LABEL_35;
  }
LABEL_36:
  v48 = v77;
  if (v77 == v76)
  {
    v49 = (void (**)(_QWORD *))(v76[0] + 32);
    v48 = v76;
LABEL_38:
    (*v49)(v48);
    goto LABEL_39;
  }
  if (v77)
  {
    v49 = (void (**)(_QWORD *))(*v77 + 40);
    goto LABEL_38;
  }
LABEL_39:
  v50 = v79;
  if (v79 == v78)
  {
    v51 = (void (**)(_QWORD *))(v78[0] + 32);
    v50 = v78;
LABEL_41:
    (*v51)(v50);
    goto LABEL_42;
  }
  if (v79)
  {
    v51 = (void (**)(_QWORD *))(*v79 + 40);
    goto LABEL_41;
  }
LABEL_42:
  v52 = v81;
  if (v81 == v80)
  {
    v53 = (void (**)(_QWORD *))(v80[0] + 32);
    v52 = v80;
LABEL_44:
    (*v53)(v52);
    goto LABEL_45;
  }
  if (v81)
  {
    v53 = (void (**)(_QWORD *))(*v81 + 40);
    goto LABEL_44;
  }
LABEL_45:
  v62[0] = &off_1E7FA79A8;
  v62[1] = a1;
  v63 = v62;
  v54 = (llvm::Pass *)sub_1C627DF14(v62, v9[1713]);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v54);
  v55 = v63;
  if (v63 == v62)
  {
    v56 = (void (**)(_QWORD *))(v62[0] + 32);
    v55 = v62;
  }
  else
  {
    if (!v63)
      goto LABEL_48;
    v56 = (void (**)(_QWORD *))(*v63 + 40);
  }
  (*v56)(v55);
LABEL_48:
  v57 = (llvm::Pass *)sub_1C627FD58();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v57);
}

uint64_t sub_1C614A70C()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = &off_1E7FA44C0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 15) = 0;
  *(_DWORD *)(result + 20) = -1;
  return result;
}

uint64_t sub_1C614A758(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  if (!v2)
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v2;
  }
  v4 = operator new();
  return sub_1C614769C(v4, v2);
}

uint64_t sub_1C614A7B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a3 + 96);
  v5 = *(_QWORD *)(v4 + 48);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v4 + 8) + 216))(*(_QWORD *)(v4 + 8), v4 + 128, *(_QWORD *)(a3 + 96));
    *(_QWORD *)(v4 + 48) = v5;
  }
  sub_1C61477BC(v5, a2);
  return 0;
}

void sub_1C614A80C(llvm::TargetPassConfig *a1)
{
  llvm::TargetPassConfig::~TargetPassConfig(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C614A83C(llvm::TargetMachine *a1)
{
  sub_1C614A91C(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C614A860(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 1042) >> 3) & 1;
}

void sub_1C614A86C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C614A880(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C614A890(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C614A8A0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C614A8B0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C614A8C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C614A8D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24));
}

void sub_1C614A8E4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C614A908()
{
  return 2;
}

void sub_1C614A910(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

void sub_1C614A91C(llvm::TargetMachine *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E7FA6B78;
  sub_1C614A970((uint64_t)a1 + 2264);
  sub_1C497A338((uint64_t)a1 + 1328);
  v2 = *((_QWORD *)a1 + 165);
  *((_QWORD *)a1 + 165) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::TargetMachine::~TargetMachine(a1);
}

uint64_t sub_1C614A970(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v5)
          v6 = v5 == -8;
        else
          v6 = 1;
        if (!v6)
        {
          v7 = *(_QWORD *)(v5 + 8);
          *(_QWORD *)(v5 + 8) = 0;
          if (v7)
            (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
          MEMORY[0x1CAA32FB4](v5, 8);
        }
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

uint64_t sub_1C614AA04(uint64_t a1, __int128 *a2, void *a3, size_t a4, void *a5, size_t a6, __int128 *a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v17;
  __int128 v20[19];

  v17 = operator new();
  sub_1C4843154((uint64_t)v20, a7);
  sub_1C6149468(v17, a1, a2, a3, a4, a5, a6, v20, a8, a9, a10);
  sub_1C48433E8((uint64_t)v20);
  return v17;
}

uint64_t sub_1C614AAD0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1C614AAD8(uint64_t a1, uint64_t a2, llvm::Value *a3, llvm **a4, uint64_t a5)
{
  return sub_1C484388C((uint64_t *)(a1 + 16), a2, a3, a4, a5);
}

uint64_t sub_1C614AAE0()
{
  return 4;
}

uint64_t sub_1C614AAEC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5)
{
  return sub_1C4843E38(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), a2, a3, a4, a5);
}

uint64_t sub_1C614AB0C()
{
  return 0;
}

uint64_t sub_1C614AB14()
{
  return 0;
}

uint64_t sub_1C614AB1C()
{
  return 0;
}

uint64_t sub_1C614AB24()
{
  return 0;
}

uint64_t sub_1C614AB2C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1C614AB34()
{
  return 0;
}

uint64_t sub_1C614AB3C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
}

uint64_t sub_1C614AB50(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
}

uint64_t sub_1C614AB64()
{
  return 0;
}

uint64_t sub_1C614AB6C()
{
  return 0;
}

uint64_t sub_1C614AB74()
{
  return 0;
}

uint64_t sub_1C614AB7C()
{
  return 0;
}

uint64_t sub_1C614AB84(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 1088))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1C614AB94(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 1080))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1C614ABA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v9[0] = a3;
  v9[1] = a4;
  v10 = a5;
  v11 = a6;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 1064))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), v9, a2, a7, a8);
}

BOOL sub_1C614ABF4(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];
  _OWORD v7[2];

  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  return sub_1C6138BE0(a1 + 16, v7, v6);
}

uint64_t sub_1C614AC2C()
{
  return 1;
}

uint64_t sub_1C614AC34()
{
  return 0;
}

uint64_t sub_1C614AC3C()
{
  return 0;
}

uint64_t sub_1C614AC44()
{
  return 0;
}

uint64_t sub_1C614AC4C()
{
  return 2;
}

uint64_t sub_1C614AC54()
{
  return 0;
}

uint64_t sub_1C614AC5C()
{
  return 0;
}

BOOL sub_1C614AC64(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1C4849330((uint64_t *)(a1 + 16), a2, a3);
}

BOOL sub_1C614AC70(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1C4849330((uint64_t *)(a1 + 16), a2, a3);
}

uint64_t sub_1C614AC7C()
{
  return 0;
}

uint64_t sub_1C614AC84()
{
  return 0;
}

uint64_t sub_1C614AC8C()
{
  return 0;
}

uint64_t sub_1C614AC94()
{
  return 0;
}

uint64_t sub_1C614AC9C()
{
  return 0;
}

uint64_t sub_1C614ACA4()
{
  return 0;
}

uint64_t sub_1C614ACAC()
{
  return 0;
}

uint64_t sub_1C614ACB4()
{
  return 0;
}

uint64_t sub_1C614ACBC()
{
  return 0;
}

uint64_t sub_1C614ACC4()
{
  return 0;
}

uint64_t sub_1C614ACCC()
{
  return 1;
}

uint64_t sub_1C614ACD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v8[0] = a3;
  v8[1] = a4;
  v9 = a5;
  v10 = a6;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 1072))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), v8, a2, a7);
}

uint64_t sub_1C614AD20()
{
  return 0;
}

uint64_t sub_1C614AD28(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 1144))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1C614AD38(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 1176))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1C614AD48(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 368))(*(_QWORD *)(a1 + 32));
}

BOOL sub_1C614AD58(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;

  v3 = sub_1C47A7FD0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), a2, 0);
  return v3 && *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v3 + 96) != 0;
}

uint64_t sub_1C614ADAC(uint64_t a1, llvm::EVT **a2)
{
  uint64_t v3;

  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 40), *(const llvm::DataLayout **)(a1 + 16), a2, (uint64_t)&v3);
  return v3;
}

unint64_t sub_1C614ADE0(uint64_t a1)
{
  return sub_1C48493AC(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
}

uint64_t sub_1C614ADEC()
{
  return 0;
}

unint64_t sub_1C614ADF4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return sub_1C6133EB0(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1C614ADFC(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t *a4)
{
  return sub_1C4848A1C(a1 + 8, a2, a3, a4);
}

uint64_t sub_1C614AE04()
{
  return 0;
}

uint64_t sub_1C614AE0C()
{
  return 0;
}

double sub_1C614AE14@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(a1 + 16) = 0x800000000;
  *(_DWORD *)(a1 + 56) = 1;
  *(_BYTE *)(a1 + 60) = 0;
  return result;
}

uint64_t sub_1C614AE3C()
{
  return 0;
}

uint64_t sub_1C614AE44()
{
  return 0;
}

uint64_t sub_1C614AE4C()
{
  return 0;
}

uint64_t sub_1C614AE54()
{
  return 0;
}

uint64_t sub_1C614AE5C(uint64_t a1, unsigned int a2)
{
  return 2 * (a2 < 0x21);
}

BOOL sub_1C614AE6C(uint64_t a1, uint64_t a2)
{
  return sub_1C4849494(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_1C614AE80()
{
  return 1;
}

uint64_t sub_1C614AE88()
{
  return 0;
}

uint64_t sub_1C614AE94()
{
  return 1;
}

uint64_t sub_1C614AEA0()
{
  return 0;
}

uint64_t sub_1C614AEAC()
{
  return 0;
}

uint64_t sub_1C614AEB8()
{
  return 8;
}

uint64_t sub_1C614AEC0(uint64_t a1, uint64_t a2)
{
  return a2;
}

const char *sub_1C614AEC8(uint64_t a1, int a2)
{
  const char *v2;

  v2 = "Generic::Unknown Register Class";
  if (a2 == 1)
    v2 = "Generic::VectorRC";
  if (a2)
    return v2;
  else
    return "Generic::ScalarRC";
}

uint64_t sub_1C614AEF4()
{
  return 32;
}

uint64_t sub_1C614AF00()
{
  return 128;
}

uint64_t sub_1C614AF08()
{
  return 0;
}

uint64_t sub_1C614AF10()
{
  return 0;
}

uint64_t sub_1C614AF18()
{
  return 0;
}

uint64_t sub_1C614AF20(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
    return 0x100000000;
  else
    return 0;
}

uint64_t sub_1C614AF30()
{
  return 0;
}

uint64_t sub_1C614AF38(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C614AF48(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C614AF58(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  if ((result & 0xFF00000000) == 0)
    return 0;
  return result;
}

uint64_t sub_1C614AF80(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C614AF90(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 88))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C614AFA0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C614AFB0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C614AFC0()
{
  return 1;
}

void sub_1C614AFC8(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  sub_1C497DCF8(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_1C614AFD4(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type ***a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  return sub_1C497D250(a1 + 8, a2, a3, a4, a5, a6, a7);
}

unint64_t sub_1C614AFDC(uint64_t a1, uint64_t a2, llvm::Type ***a3, uint64_t a4)
{
  return sub_1C614BB40(a1 + 8, a2, a3, a4);
}

uint64_t sub_1C614AFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::TargetLoweringBase *v4;
  uint64_t v6;

  v4 = *(llvm::TargetLoweringBase **)(a1 + 40);
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
    a3 = **(_QWORD **)(a3 + 16);
  llvm::TargetLoweringBase::getTypeLegalizationCost(v4, *(const llvm::DataLayout **)(a1 + 16), (llvm::EVT **)a3, (uint64_t)&v6);
  return v6;
}

unint64_t sub_1C614B02C(uint64_t a1, llvm::FixedVectorType *a2, int a3, llvm::Type *a4, llvm::APIntOps *a5)
{
  return sub_1C614B218(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1C614B034(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  if (a6)
    return 1;
  else
    return sub_1C4832C7C(a1 + 8, a2, a3, a4 | 0x100, a5, 0);
}

uint64_t sub_1C614B068()
{
  return 1;
}

unint64_t sub_1C614B074(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  return sub_1C6137F68(a1 + 8, a2, a3, a4, 1, 0, a6);
}

unint64_t sub_1C614B08C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned __int8 a6, int a7)
{
  return sub_1C6137F68(a1 + 8, a2, a3, a6, a5, 1, a7);
}

unint64_t sub_1C614B09C(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, unint64_t a6, unsigned __int8 a7, unsigned int a8, int a9, char a10, char a11)
{
  return sub_1C497FD6C(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

unint64_t sub_1C614B0C0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1C614B320(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1C614B0C8(uint64_t a1, llvm::FixedVectorType **a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1C614B33C(a1 + 8, a2, a3, a5);
}

unint64_t sub_1C614B0D4(uint64_t a1, int a2, int a3, llvm::FixedVectorType *a4, uint64_t a5, uint64_t a6)
{
  return sub_1C614BBF0(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t sub_1C614B0DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C497C368(a1 + 8, a2, a3);
}

uint64_t sub_1C614B0E4()
{
  return 10;
}

uint64_t sub_1C614B0F0(uint64_t a1, llvm::EVT **a2)
{
  _DWORD v3[6];

  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 40), *(const llvm::DataLayout **)(a1 + 16), a2, (uint64_t)v3);
  if (v3[2])
    return 0;
  else
    return v3[0];
}

uint64_t sub_1C614B130()
{
  return 0;
}

uint64_t sub_1C614B13C()
{
  return 0;
}

uint64_t sub_1C614B148()
{
  return 0;
}

uint64_t sub_1C614B150()
{
  return 0;
}

_QWORD *sub_1C614B158(int a1, llvm::Type *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a8 & 0xFF00000000) != 0)
    return llvm::Type::getIntNTy(this, (llvm::LLVMContext *)(8 * a8));
  else
    return (_QWORD *)(*(_QWORD *)this + 1912);
}

void *sub_1C614B17C(int a1, uint64_t a2, llvm::Type *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  return sub_1C6138E7C(a1 + 16, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1C614B18C()
{
  return 1;
}

uint64_t sub_1C614B194()
{
  return 1;
}

uint64_t sub_1C614B19C()
{
  return 0;
}

uint64_t sub_1C614B1A4()
{
  return 0;
}

uint64_t sub_1C614B1AC()
{
  return 1;
}

uint64_t sub_1C614B1B4()
{
  return 1;
}

uint64_t sub_1C614B1BC()
{
  return 0;
}

uint64_t sub_1C614B1C4()
{
  return 0;
}

uint64_t sub_1C614B1CC()
{
  return 0;
}

uint64_t sub_1C614B1D4(uint64_t a1, llvm::ShuffleVectorInst *a2)
{
  if (*((_BYTE *)a2 + 16) == 60)
    return 4;
  else
    return sub_1C4980364((uint64_t *)(a1 + 16), a2);
}

uint64_t sub_1C614B204()
{
  return 0x200000001;
}

uint64_t sub_1C614B210()
{
  return 1;
}

unint64_t sub_1C614B218(uint64_t a1, llvm::FixedVectorType *this, int a3, llvm::Type *a4, llvm::APIntOps *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;

  llvm::FixedVectorType::get(this, a4);
  v11 = v10;
  llvm::FixedVectorType::get(this, (llvm::Type *)((_DWORD)a4 * a3));
  v13 = v12;
  llvm::APIntOps::ScaleBitMask(a5, a4, (llvm::APInt *)&v18);
  v14 = sub_1C6133EB0(a1, v11, (uint64_t)&v18, 0, 1);
  v15 = sub_1C6133EB0(a1, v13, (uint64_t)a5, 1, 0);
  if (v19 >= 0x41 && v18)
  {
    v17 = v15;
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
    v15 = v17;
  }
  if (__OFADD__(v14, v15))
    return ((uint64_t)(v14 + v15) >> 63) ^ 0x8000000000000000;
  else
    return v14 + v15;
}

unint64_t sub_1C614B320(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a4 & 0xFF00000000) == 0 || (a4 & 1) != 0)
    return sub_1C614B7C0(a1, a2, (llvm::FixedVectorType **)a3, a5);
  else
    return sub_1C614B6E0(a1, a2, a3);
}

unint64_t sub_1C614B33C(uint64_t a1, llvm::FixedVectorType **a2, uint64_t a3, int a4)
{
  uint64_t v4;
  llvm::Type *v5;
  uint64_t v6;
  unsigned int v7;
  llvm::FixedVectorType *v8;
  llvm::FixedVectorType *v9;
  llvm::Type *v10;
  int v11;
  const char *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int64_t v31;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v50;
  llvm::FixedVectorType *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v56;
  unint64_t v57;
  int64_t v58;
  int64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62[16];
  unsigned __int8 v63[8];
  uint64_t v64;
  int v65;

  v4 = a3;
  v5 = (llvm::Type *)a2;
  v6 = a1;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v7 = *(unsigned __int8 *)(*(_QWORD *)a2[2] + 8);
  else
    v7 = *((_DWORD *)a2 + 2);
  v8 = a2[3];
  v9 = *(llvm::FixedVectorType **)(a3 + 24);
  LODWORD(v10) = *((_DWORD *)a2 + 8);
  if (v7 >= 7)
    v11 = 53;
  else
    v11 = 54;
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), a2, (uint64_t)v62);
  if (v63[0] - 15 > 0x9B)
  {
    v13 = 1;
  }
  else
  {
    if (v63[0] - 120 <= 0x32)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v12);
    v13 = sub_1C47F381C(v63);
  }
  v14 = __clz(v10);
  if (v10 <= v13)
  {
    v57 = 0;
    v59 = 0;
    v15 = 0;
  }
  else
  {
    v50 = v14;
    v15 = 0;
    v16 = 0;
    v51 = v8;
    v17 = 0;
    v53 = v6;
    v18 = (uint64_t)v5;
    v19 = 0;
    v54 = v11;
    v52 = v13;
    v20 = v6;
    do
    {
      v58 = v17;
      v56 = v15;
      v21 = v18;
      v10 = (llvm::Type *)(v10 >> 1);
      llvm::FixedVectorType::get(v51, v10);
      v18 = v22;
      llvm::FixedVectorType::get(v9, v10);
      v4 = v23;
      sub_1C497DCF8(v20, 5, v21, 0, 0);
      if (__OFADD__(v19, v24))
        v19 = ((uint64_t)(v19 + v24) >> 63) ^ 0x8000000000000000;
      else
        v19 += v24;
      v25 = v16;
      v26 = sub_1C497D9E0(v20, v54, v18, v4, 42, a4);
      v28 = v27;
      v29 = sub_1C497D9E0(v20, 57, v18, v4, 42, a4);
      v31 = v26 + v29;
      if (__OFADD__(v26, v29))
        v31 = (v31 >> 63) ^ 0x8000000000000000;
      if (v28 == 1 || v30 == 1)
        v16 = 1;
      else
        v16 = v25;
      v33 = __OFADD__(v58, v31);
      v17 = v58 + v31;
      if (v33)
        v17 = (v17 >> 63) ^ 0x8000000000000000;
      v15 = v56 - 1;
    }
    while (v10 > v52);
    v57 = v19;
    v59 = v17;
    v6 = v53;
    v11 = v54;
    v5 = (llvm::Type *)v18;
    v14 = v50;
  }
  v34 = v15 - v14 + 31;
  sub_1C497DCF8(v6, 7, (uint64_t)v5, 0, 0);
  v60 = v35;
  v61 = v36;
  v64 = v34;
  v65 = 0;
  sub_1C4848B64((uint64_t)&v64, (uint64_t)&v60);
  v37 = v64;
  v38 = sub_1C497D9E0(v6, v11, (uint64_t)v5, v4, 42, a4);
  v40 = v39;
  v41 = sub_1C497D9E0(v6, 57, (uint64_t)v5, v4, 42, a4);
  v42 = v40 & 0xFFFFFFFF00000000 | 1;
  if (v43 != 1)
    v42 = v40;
  v44 = v38 + v41;
  if (__OFADD__(v38, v41))
    v44 = ((v38 + v41) >> 63) ^ 0x8000000000000000;
  v60 = v44;
  v61 = v42;
  v64 = v34;
  v65 = 0;
  sub_1C4848B64((uint64_t)&v64, (uint64_t)&v60);
  if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12)
    v5 = (llvm::Type *)**((_QWORD **)v5 + 2);
  v45 = v57 + v37;
  if (__OFADD__(v57, v37))
    v45 = ((uint64_t)(v57 + v37) >> 63) ^ 0x8000000000000000;
  v46 = v59 + v64;
  if (__OFADD__(v59, v64))
    v46 = (v46 >> 63) ^ 0x8000000000000000;
  v33 = __OFADD__(v45, v46);
  v47 = v45 + v46;
  if (v33)
    v48 = (v47 >> 63) ^ 0x8000000000000000;
  else
    v48 = v47;
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v6 + 32), *(const llvm::DataLayout **)(v6 + 8), (llvm::EVT **)v5, (uint64_t)&v64);
  if (__OFADD__(v48, v64))
    return ((uint64_t)(v48 + v64) >> 63) ^ 0x8000000000000000;
  else
    return v48 + v64;
}

unint64_t sub_1C614B6E0(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  int v12;

  if (*(_BYTE *)(a3 + 8) == 19)
    return 0;
  v7 = sub_1C6133E14(a1, a3, 0, 1);
  sub_1C497CCA4(a1, a2);
  v10[0] = v8;
  v10[1] = v9;
  v11 = *(unsigned int *)(a3 + 32);
  v12 = 0;
  sub_1C4848B64((uint64_t)v10, (uint64_t)&v11);
  if (__OFADD__(v7, v10[0]))
    return ((uint64_t)(v7 + v10[0]) >> 63) ^ 0x8000000000000000;
  else
    return v7 + v10[0];
}

unint64_t sub_1C614B7C0(uint64_t a1, int a2, llvm::FixedVectorType **a3, uint64_t a4)
{
  llvm::Type *v5;
  uint64_t v7;
  llvm::FixedVectorType *v8;
  llvm::Type *v9;
  BOOL v10;
  const char *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  llvm::Type *v18;
  llvm::Type *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  llvm::Type ***v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[16];
  unsigned __int8 v47[8];
  uint64_t v48;
  int v49;

  v5 = (llvm::Type *)a3;
  v7 = a1;
  v8 = a3[3];
  LODWORD(v9) = *((_DWORD *)a3 + 8);
  if ((a2 & 0xFFFFFFFE) == 0x1C
    && (v8 == (llvm::FixedVectorType *)(*(_QWORD *)*a3 + 1888) ? (v10 = v9 >= 2) : (v10 = 0), v10))
  {
    v36 = (llvm::Type ***)llvm::IntegerType::get(*a3, (llvm::LLVMContext *)*((unsigned int *)a3 + 8));
    v37 = sub_1C497D250(v7, 49, v36, (llvm::Type ***)v5, 0, a4, 0);
    sub_1C4774CC4(v36);
    v39 = sub_1C497D9E0(v7, 53, (uint64_t)v36, v38, 42, a4);
    v33 = __OFADD__(v37, v39);
    v34 = v37 + v39;
  }
  else
  {
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), a3, (uint64_t)v46);
    if (v47[0] - 15 > 0x9B)
    {
      v12 = 1;
    }
    else
    {
      if (v47[0] - 120 <= 0x32)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v11);
      v12 = sub_1C47F381C(v47);
    }
    v13 = __clz(v9);
    if (v9 <= v12)
    {
      v23 = a2;
      v16 = 0;
      v15 = 0;
      v14 = 0;
    }
    else
    {
      v40 = v13;
      v43 = a2;
      v14 = 0;
      v42 = v7;
      v15 = 0;
      v16 = 0;
      v41 = v12;
      do
      {
        v17 = a4;
        v18 = v5;
        v9 = (llvm::Type *)(v9 >> 1);
        llvm::FixedVectorType::get(v8, v9);
        v5 = v19;
        v20 = (uint64_t)v18;
        a4 = v17;
        sub_1C497DCF8(v42, 5, v20, 0, 0);
        if (__OFADD__(v16, v21))
          v16 = ((uint64_t)(v16 + v21) >> 63) ^ 0x8000000000000000;
        else
          v16 += v21;
        sub_1C497CCA4(v42, v43);
        if (__OFADD__(v15, v22))
          v15 = ((uint64_t)(v15 + v22) >> 63) ^ 0x8000000000000000;
        else
          v15 += v22;
        --v14;
      }
      while (v9 > v41);
      v23 = v43;
      v7 = v42;
      v13 = v40;
    }
    v24 = v14 - v13 + 31;
    sub_1C497DCF8(v7, 7, (uint64_t)v5, 0, 0);
    v44 = v25;
    v45 = v26;
    v48 = v24;
    v49 = 0;
    sub_1C4848B64((uint64_t)&v48, (uint64_t)&v44);
    if (__OFADD__(v16, v48))
      v27 = ((uint64_t)(v16 + v48) >> 63) ^ 0x8000000000000000;
    else
      v27 = v16 + v48;
    sub_1C497CCA4(v7, v23);
    v44 = v28;
    v45 = v29;
    v48 = v24;
    v49 = 0;
    sub_1C4848B64((uint64_t)&v48, (uint64_t)&v44);
    v30 = v15 + v48;
    if (__OFADD__(v15, v48))
      v30 = ((uint64_t)(v15 + v48) >> 63) ^ 0x8000000000000000;
    v33 = __OFADD__(v27, v30);
    v31 = v27 + v30;
    if (v33)
      v32 = (v31 >> 63) ^ 0x8000000000000000;
    else
      v32 = v31;
    if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12)
      v5 = (llvm::Type *)**((_QWORD **)v5 + 2);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v7 + 32), *(const llvm::DataLayout **)(v7 + 8), (llvm::EVT **)v5, (uint64_t)&v48);
    v33 = __OFADD__(v32, v48);
    v34 = v32 + v48;
  }
  if (v33)
    return (v34 >> 63) ^ 0x8000000000000000;
  else
    return v34;
}

unint64_t sub_1C614BB40(uint64_t a1, uint64_t a2, llvm::Type ***a3, uint64_t a4)
{
  llvm::TargetLoweringBase *v8;
  llvm::EVT **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v8 = *(llvm::TargetLoweringBase **)(a1 + 32);
  v9 = (llvm::EVT **)a4;
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
    v9 = **(llvm::EVT ****)(a4 + 16);
  llvm::TargetLoweringBase::getTypeLegalizationCost(v8, *(const llvm::DataLayout **)(a1 + 8), v9, (uint64_t)&v13);
  v10 = v13;
  v11 = sub_1C497D250(a1, a2, a3, *(llvm::Type ****)(a4 + 24), 0, 0, 0);
  if (__OFADD__(v10, v11))
    return ((v10 + v11) >> 63) ^ 0x8000000000000000;
  else
    return v10 + v11;
}

unint64_t sub_1C614BBF0(uint64_t a1, int a2, int a3, llvm::FixedVectorType *a4, uint64_t a5, uint64_t a6)
{
  llvm::FixedVectorType **v11;
  llvm::Type ***v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  int v23;

  llvm::VectorType::get(a4, (llvm::Type *)(*(unsigned int *)(a5 + 32) | ((unint64_t)(*(_BYTE *)(a5 + 8) == 19) << 32)));
  v12 = (llvm::Type ***)v11;
  v13 = sub_1C614B7C0(a1, 13, v11, a6);
  if (a3)
    v14 = 39;
  else
    v14 = 40;
  v15 = sub_1C497D250(a1, v14, v12, (llvm::Type ***)a5, 0, a6, 0);
  v21[0] = v15;
  v21[1] = v16;
  if (a2)
  {
    sub_1C497CCA4(a1, 17);
    v18 = v17;
    v22 = 2;
    v23 = 0;
    sub_1C4848B64((uint64_t)v21, (uint64_t)&v22);
    v15 = v21[0];
  }
  else
  {
    v18 = 0;
  }
  v19 = v13 + v18;
  if (__OFADD__(v13, v18))
    v19 = ((uint64_t)(v13 + v18) >> 63) ^ 0x8000000000000000;
  if (__OFADD__(v19, v15))
    return ((uint64_t)(v19 + v15) >> 63) ^ 0x8000000000000000;
  else
    return v19 + v15;
}

void sub_1C614BD48(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EC3A8);
  if (v1 != -1)
  {
    v4[0] = sub_1C4981588;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EC3A8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C614BDA8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4981618(v0);
}

_DWORD *sub_1C614BDD0(_QWORD *a1, unsigned int a2)
{
  _DWORD *result;
  _DWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 4)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 5;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = operator new(8 * a2, (std::align_val_t)4uLL);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[2 * v5];
  do
  {
LABEL_4:
    *result = -1;
    result += 2;
  }
  while (result != v4);
  return result;
}

_DWORD *sub_1C614BE50(_DWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  _DWORD *v7;

  v1 = result;
  v2 = *result;
  v3 = __clz((*result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    v6 = result + 2;
    *(_QWORD *)result = 1;
    v7 = result + 10;
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
    return sub_1C614BDD0(v1, v5);
  if (v5 != result[4])
  {
    MEMORY[0x1CAA32FB4](*((_QWORD *)result + 1), 4);
    return sub_1C614BDD0(v1, v5);
  }
  *(_QWORD *)result = 0;
  if (!v5)
    return result;
  v6 = (_DWORD *)*((_QWORD *)result + 1);
  v7 = &v6[2 * v5];
  do
  {
LABEL_10:
    *v6 = -1;
    v6 += 2;
  }
  while (v6 != v7);
  return result;
}

uint64_t (***sub_1C614BF14())()
{
  return &off_1EF8EB098;
}

uint64_t sub_1C614BF20()
{
  return 0;
}

void sub_1C614BF28(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EC478);
  if (v1 != -1)
  {
    v4[0] = sub_1C4987AC4;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EC478, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C614BF88()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4987B68(v0);
}

double sub_1C614BFB0()
{
  uint64_t v0;
  _QWORD *v1;
  double result;

  v0 = operator new();
  v1 = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF739);
  *v1 = &off_1E7FA7D28;
  v1[31] = v1 + 33;
  *(_QWORD *)&result = 0xA00000000;
  v1[32] = 0xA00000000;
  return result;
}

void sub_1C614C004(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EC488);
  if (v1 != -1)
  {
    v4[0] = sub_1C498F2B0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EC488, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C614C064()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C498F340(v0);
}

uint64_t *sub_1C614C08C(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  __int16 v24;

  v5 = *(uint64_t **)(a1 + 32);
  v6 = *v5;
  v7 = v5[1];
  v8 = *(_QWORD *)(a2 + 832);
  if (v8)
    v9 = *(_WORD *)(v8 + 8);
  else
    v9 = 0;
  v10 = sub_1C5D52060(a2, 198, a3, (llvm *)5, 0, v6, v7, v9);
  v12 = v11;
  v13 = sub_1C6366AB4(a2, 31, a3, (llvm *)6, 0, 0, 0);
  v16 = *(_QWORD *)(a2 + 832);
  if (v16)
    LOWORD(v16) = *(_WORD *)(v16 + 8);
  v17 = sub_1C5D56C70(a2, 176, a3, (llvm *)5, 0, (uint64_t)v10, v12, v15, (uint64_t)v13, v14, v16);
  v20 = *(_QWORD *)(a2 + 832);
  if (v20)
    LOWORD(v20) = *(_WORD *)(v20 + 8);
  v22 = sub_1C5D56C70(a2, 146, a3, (llvm *)0x31, 0, (uint64_t)v10, v12, v19, (uint64_t)v17, v18, v20);
  v23 = *(_QWORD *)(a2 + 832);
  if (v23)
    v24 = *(_WORD *)(v23 + 8);
  else
    v24 = 0;
  return sub_1C5D52060(a2, 216, a3, (llvm *)6, 0, (uint64_t)v22, v21, v24);
}

uint64_t *sub_1C614C1C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t **a9@<X8>, uint64_t a10, const llvm::APInt *a11)
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int16 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *result;
  uint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v144;
  unsigned int v145;

  v145 = 32;
  v144 = 0xFFFFLL;
  v12 = sub_1C63666FC(a10, (llvm::LLVMContext *)&v144, a11, 5, 0, 0, 0);
  v14 = v13;
  if (v145 >= 0x41 && v144)
    MEMORY[0x1CAA32F9C](v144, 0x1000C8000313F17);
  v15 = *(_QWORD *)(a10 + 832);
  if (v15)
    LOWORD(v15) = *(_WORD *)(v15 + 8);
  v17 = sub_1C5D56C70(a10, 171, a11, (llvm *)5, 0, a1, a2, v11, v12, v14, v15);
  v19 = v18;
  v20 = 0;
  v21 = *(_QWORD *)(a10 + 832);
  if (v21)
    v20 = *(_WORD *)(v21 + 8);
  v22 = sub_1C5D56C70(a10, 171, a11, (llvm *)5, 0, a5, a6, v16, v12, v14, v20);
  v25 = (uint64_t)v22;
  v26 = v23;
  v27 = 0;
  v28 = *(_QWORD *)(a10 + 832);
  if (v28)
    v27 = *(_WORD *)(v28 + 8);
  v128 = v19;
  v129 = (uint64_t)v17;
  v31 = sub_1C5D56C70(a10, 58, a11, (llvm *)5, 0, (uint64_t)v17, v19, v24, (uint64_t)v22, v23, v27);
  v32 = v29;
  v33 = 0;
  v34 = *(_QWORD *)(a10 + 832);
  if (v34)
    v33 = *(_WORD *)(v34 + 8);
  v35 = sub_1C5D56C70(a10, 171, a11, (llvm *)5, 0, (uint64_t)v31, v29, v30, v12, v14, v33);
  v130 = v36;
  v131 = (uint64_t)v35;
  v37 = sub_1C6366AB4(a10, 16, a11, (llvm *)6, 0, 0, 0);
  v40 = (uint64_t)v37;
  v41 = v38;
  v42 = *(_QWORD *)(a10 + 832);
  if (v42)
    LOWORD(v42) = *(_WORD *)(v42 + 8);
  v44 = sub_1C5D56C70(a10, 177, a11, (llvm *)5, 0, (uint64_t)v31, v32, v39, (uint64_t)v37, v38, v42);
  v46 = v45;
  v47 = *(_QWORD *)(a10 + 832);
  if (v47)
    LOWORD(v47) = *(_WORD *)(v47 + 8);
  v48 = sub_1C5D56C70(a10, 177, a11, (llvm *)5, 0, a1, a2, v43, v40, v41, v47);
  v138 = v50;
  v139 = (uint64_t)v48;
  v51 = *(_QWORD *)(a10 + 832);
  if (v51)
    LOWORD(v51) = *(_WORD *)(v51 + 8);
  v127 = sub_1C5D56C70(a10, 177, a11, (llvm *)5, 0, a5, a6, v49, v40, v41, v51);
  v137 = v53;
  v54 = *(_QWORD *)(a10 + 832);
  if (v54)
    LOWORD(v54) = *(_WORD *)(v54 + 8);
  v56 = sub_1C5D56C70(a10, 58, a11, (llvm *)5, 0, v139, v138, v52, v25, v26, v54);
  v58 = *(_QWORD *)(a10 + 832);
  if (v58)
    LOWORD(v58) = *(_WORD *)(v58 + 8);
  v61 = sub_1C5D56C70(a10, 56, a11, (llvm *)5, 0, (uint64_t)v56, v55, v57, (uint64_t)v44, v46, v58);
  v62 = v59;
  v63 = *(_QWORD *)(a10 + 832);
  if (v63)
    LOWORD(v63) = *(_WORD *)(v63 + 8);
  v65 = sub_1C5D56C70(a10, 171, a11, (llvm *)5, 0, (uint64_t)v61, v59, v60, v12, v14, v63);
  v67 = v66;
  v68 = *(_QWORD *)(a10 + 832);
  if (v68)
    LOWORD(v68) = *(_WORD *)(v68 + 8);
  v69 = sub_1C5D56C70(a10, 177, a11, (llvm *)5, 0, (uint64_t)v61, v62, v64, v40, v41, v68);
  v125 = v71;
  v126 = (uint64_t)v69;
  v72 = *(_QWORD *)(a10 + 832);
  if (v72)
    LOWORD(v72) = *(_WORD *)(v72 + 8);
  v74 = sub_1C5D56C70(a10, 58, a11, (llvm *)5, 0, v129, v128, v70, (uint64_t)v127, v137, v72);
  v76 = *(_QWORD *)(a10 + 832);
  if (v76)
    LOWORD(v76) = *(_WORD *)(v76 + 8);
  v79 = sub_1C5D56C70(a10, 56, a11, (llvm *)5, 0, (uint64_t)v74, v73, v75, (uint64_t)v65, v67, v76);
  v80 = v77;
  v81 = *(_QWORD *)(a10 + 832);
  if (v81)
    LOWORD(v81) = *(_WORD *)(v81 + 8);
  v83 = sub_1C5D56C70(a10, 177, a11, (llvm *)5, 0, (uint64_t)v79, v77, v78, v40, v41, v81);
  v85 = v84;
  v86 = *(_QWORD *)(a10 + 832);
  if (v86)
    LOWORD(v86) = *(_WORD *)(v86 + 8);
  v88 = sub_1C5D56C70(a10, 58, a11, (llvm *)5, 0, v139, v138, v82, (uint64_t)v127, v137, v86);
  v90 = v89;
  v91 = *(_QWORD *)(a10 + 832);
  if (v91)
    LOWORD(v91) = *(_WORD *)(v91 + 8);
  v92 = sub_1C5D56C70(a10, 56, a11, (llvm *)5, 0, v126, v125, v87, (uint64_t)v83, v85, v91);
  v95 = *(_QWORD *)(a10 + 832);
  if (v95)
    LOWORD(v95) = *(_WORD *)(v95 + 8);
  v97 = sub_1C5D56C70(a10, 56, a11, (llvm *)5, 0, (uint64_t)v88, v90, v94, (uint64_t)v92, v93, v95);
  v99 = v98;
  v100 = *(_QWORD *)(a10 + 832);
  if (v100)
    LOWORD(v100) = *(_WORD *)(v100 + 8);
  v101 = sub_1C5D56C70(a10, 175, a11, (llvm *)5, 0, (uint64_t)v79, v80, v96, v40, v41, v100);
  v104 = *(_QWORD *)(a10 + 832);
  if (v104)
    LOWORD(v104) = *(_WORD *)(v104 + 8);
  v106 = sub_1C5D56C70(a10, 56, a11, (llvm *)5, 0, v131, v130, v103, (uint64_t)v101, v102, v104);
  v108 = v107;
  v109 = *(_QWORD *)(a10 + 832);
  if (v109)
    LOWORD(v109) = *(_WORD *)(v109 + 8);
  v111 = sub_1C5D56C70(a10, 58, a11, (llvm *)5, 0, a7, a8, v105, a1, a2, v109);
  v113 = v112;
  v114 = *(_QWORD *)(a10 + 832);
  if (v114)
    LOWORD(v114) = *(_WORD *)(v114 + 8);
  v115 = sub_1C5D56C70(a10, 58, a11, (llvm *)5, 0, a5, a6, v110, a3, a4, v114);
  v118 = *(_QWORD *)(a10 + 832);
  if (v118)
    LOWORD(v118) = *(_WORD *)(v118 + 8);
  v119 = sub_1C5D56C70(a10, 56, a11, (llvm *)5, 0, (uint64_t)v111, v113, v117, (uint64_t)v115, v116, v118);
  v122 = *(_QWORD *)(a10 + 832);
  if (v122)
    LOWORD(v122) = *(_WORD *)(v122 + 8);
  result = sub_1C5D56C70(a10, 56, a11, (llvm *)5, 0, (uint64_t)v97, v99, v121, (uint64_t)v119, v120, v122);
  *a9 = v106;
  a9[1] = v108;
  a9[2] = result;
  a9[3] = v124;
  return result;
}

_DWORD *sub_1C614C7CC(_DWORD *result, unsigned int a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;

  v5 = result;
  v6 = result[2];
  if (v6 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 8);
    LODWORD(v6) = v5[2];
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = a2 | (unint64_t)(a3 << 32);
  ++v5[2];
  return result;
}

_QWORD *sub_1C614C838()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6442);
  *result = &off_1E7FA7EA8;
  return result;
}

void sub_1C614C878(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EC498);
  if (v1 != -1)
  {
    v4[0] = sub_1C4994060;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EC498, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C614C8D8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C49940EC(v0);
}

uint64_t sub_1C614C900(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 4 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 4 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 4 * v10), (const void *)(*(_QWORD *)a2 + 4 * v10), *(_QWORD *)a2 + 4 * v11 - (*(_QWORD *)a2 + 4 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 4);
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_1C614CA14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v3 = *(unsigned int *)(a2 + 8);
    v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if ((_DWORD)v3)
        memmove(*(void **)a1, *(const void **)a2, 4 * v3);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v3)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v9 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v3, 4);
      a2 = v9;
    }
    else if ((_DWORD)v4)
    {
      v8 = *(unsigned int *)(a1 + 8);
      v10 = a2;
      memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      v5 = v8;
      a2 = v10;
LABEL_6:
      v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 4 * v5), (const void *)(*(_QWORD *)a2 + 4 * v5), *(_QWORD *)a2 + 4 * v6 - (*(_QWORD *)a2 + 4 * v5));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

void sub_1C614CAF4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EC4A8);
  if (v1 != -1)
  {
    v4[0] = sub_1C499545C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EC4A8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void *sub_1C614CB54(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7108);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7108);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7110);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7110);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C614CBE0(uint64_t a1)
{
  llvm::PassRegistry *v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (llvm::PassRegistry *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EC4A0);
  *(_QWORD *)v2 = &off_1E7FA8028;
  PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  v3 = atomic_load(&qword_1ED7EC4A8);
  if (v3 != -1)
  {
    v7[0] = sub_1C499545C;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED7EC4A8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C614CC78()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C614CC90(llvm::Pass *a1)
{
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C614CCB4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C614CBE0(v0);
}

void sub_1C614CCDC(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EC6F8);
  if (v1 != -1)
  {
    v4[0] = sub_1C4998D1C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EC6F8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void *sub_1C614CD3C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  *((_BYTE *)this + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C614CD7C(uint64_t a1)
{
  llvm::PassRegistry *v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (llvm::PassRegistry *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EC6F0);
  *(_QWORD *)v2 = &off_1E7FA8110;
  PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  v3 = atomic_load(&qword_1ED7EC6F8);
  if (v3 != -1)
  {
    v7[0] = sub_1C4998D1C;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED7EC6F8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C614CE08(llvm::FunctionPass *a1, uint64_t a2)
{
  uint64_t v2;
  void **v5;
  void *v6;
  uint64_t v7;
  const llvm::Function *v8;
  char v9;
  char hasFnAttribute;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t (**v15)();
  __int16 v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;

  v2 = 0;
  if ((**(_BYTE **)(a2 + 360) & 0x10) == 0 && byte_1ED7EC6B0)
  {
    v5 = (void **)**((_QWORD **)a1 + 1);
    do
    {
      v6 = *v5;
      v5 += 2;
    }
    while (v6 != &llvm::TargetPassConfig::ID);
    v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::TargetPassConfig::ID);
    v8 = *(const llvm::Function **)a2;
    if (llvm::TargetMachine::getOptLevel(*(llvm::TargetMachine **)(a2 + 8)))
      v9 = llvm::FunctionPass::skipFunction(a1, v8) ^ 1;
    else
      v9 = 0;
    hasFnAttribute = 1;
    if ((llvm::Function::hasFnAttribute((uint64_t)v8, 42) & 1) == 0)
      hasFnAttribute = llvm::Function::hasFnAttribute((uint64_t)v8, 15);
    v16 = 1;
    v17 = 0;
    v18 = v9;
    v19 = hasFnAttribute;
    v20 = llvm::Function::hasFnAttribute((uint64_t)v8, 15);
    v15 = &off_1E7FA81D0;
    sub_1C54F59A8(v13, (uint64_t)&v15, v7);
    v2 = sub_1C54F59B4();
    v11 = v14;
    v14 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  return v2;
}

void sub_1C614CF50()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C614CF68(llvm::Pass *a1)
{
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C614CF8C()
{
  return "AGX2PostSelectionCombiner";
}

uint64_t sub_1C614CF9C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C614CD7C(v0);
}

void sub_1C614CFC4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EC708);
  if (v1 != -1)
  {
    v4[0] = sub_1C499925C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EC708, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void *sub_1C614D024(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7108);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7108);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7110);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7110);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C614D0B0(uint64_t a1)
{
  llvm::PassRegistry *v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (llvm::PassRegistry *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EC700);
  *(_QWORD *)v2 = &off_1E7FA81F8;
  PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  v3 = atomic_load(&qword_1ED7EC708);
  if (v3 != -1)
  {
    v7[0] = sub_1C499925C;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED7EC708, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C614D148()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C614D160(llvm::Pass *a1)
{
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C614D184()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C614D0B0(v0);
}

uint64_t sub_1C614D1AC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C499B16C(v0);
}

void sub_1C614D1D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  unint64_t v6;
  char *v7;
  __int128 v8;
  BOOL v9;
  unsigned int v10;
  char *v11;
  uint64_t *v12;
  unint64_t v13;
  char *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[25];

  v21[24] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x800000000;
  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v17 = *v5;
      v18 = *(_OWORD *)(v17 + 8);
      v6 = sub_1C4926708((uint64_t)&v19, (unint64_t)&v17, 1);
      v7 = (char *)v19 + 24 * v20;
      v8 = *(_OWORD *)v6;
      *((_QWORD *)v7 + 2) = *(_QWORD *)(v6 + 16);
      *(_OWORD *)v7 = v8;
      v9 = __CFADD__((_DWORD)v20, 1);
      v10 = v20 + 1;
      LODWORD(v20) = v20 + 1;
      if (!v9)
      {
        do
        {
          v11 = (char *)v19 + 24 * v10;
          v12 = (uint64_t *)*((_QWORD *)v11 - 2);
          if (v12 == *((uint64_t **)v11 - 1))
          {
            v17 = *((_QWORD *)v11 - 3);
            v16 = *(_QWORD *)(a3 + 24);
            if (!v16)
              sub_1C485C2F0();
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 48))(v16, &v17);
            v10 = v20 - 1;
          }
          else
          {
            *((_QWORD *)v11 - 2) = v12 + 1;
            v17 = *v12;
            v18 = *(_OWORD *)(*v12 + 8);
            v13 = sub_1C4926708((uint64_t)&v19, (unint64_t)&v17, 1);
            v14 = (char *)v19 + 24 * v20;
            v15 = *(_OWORD *)v13;
            *((_QWORD *)v14 + 2) = *(_QWORD *)(v13 + 16);
            *(_OWORD *)v14 = v15;
            v10 = v20 + 1;
          }
          LODWORD(v20) = v10;
        }
        while (v10);
      }
      ++v5;
    }
    while (v5 != a2);
    if (v19 != v21)
      free(v19);
  }
}

uint64_t sub_1C614D378(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 8 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 8 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 8 * v10), (const void *)(*(_QWORD *)a2 + 8 * v10), *(_QWORD *)a2 + 8 * v11 - (*(_QWORD *)a2 + 8 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 8);
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_1C614D48C(unsigned int *a1)
{
  uint64_t v1;
  uint8x8_t v2;
  int v3;
  int v4;
  unint64_t v5;
  int8x8_t *v6;
  int8x8_t v7;
  uint8x8_t v8;

  v1 = a1[2];
  if (v1 > 0x40)
  {
    v4 = 0;
    v5 = (unint64_t)(v1 + 63) >> 6;
    v6 = *(int8x8_t **)a1;
    do
    {
      v7 = *v6++;
      v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v4 += v8.i32[0];
      --v5;
    }
    while (v5);
    if (v4 == 1)
    {
      v3 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a1);
      return (v1 + ~v3);
    }
  }
  else
  {
    v2 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a1);
    v2.i16[0] = vaddlv_u8(v2);
    if (v2.u32[0] == 1)
    {
      v3 = v1 + __clz(*(_QWORD *)a1) - 64;
      return (v1 + ~v3);
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1C614D524(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  return sub_1C49BCF50(v2, a1);
}

llvm::ScheduleDAGInstrs *sub_1C614D55C(uint64_t a1)
{
  llvm::ScheduleDAGInstrs *v2;
  uint64_t v3;
  _QWORD *v4;
  double v5;
  uint64_t v6;
  _QWORD *v8;

  v2 = (llvm::ScheduleDAGInstrs *)operator new();
  v3 = operator new();
  v4 = (_QWORD *)sub_1C49BD128(v3, a1);
  *v4 = &off_1E7FA8488;
  v8 = v4;
  v5 = sub_1C4838D9C(v2, a1, (uint64_t *)&v8);
  v6 = (uint64_t)v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v6 + 16))(v6, v5);
  return v2;
}

void sub_1C614D5FC(_QWORD *a1)
{
  sub_1C49BD404(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C614D62C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EC8E8);
  if (v1 != -1)
  {
    v4[0] = sub_1C49BD4C0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EC8E8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C614D68C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C49BD550(v0);
}

void sub_1C614D6B4(llvm::RegScavenger *this, uint64_t a2)
{
  if (*((_BYTE *)this + 44) || *(_QWORD *)(*((_QWORD *)this + 3) + 56) == a2)
    goto LABEL_4;
  do
  {
    llvm::RegScavenger::forward(this);
LABEL_4:
    ;
  }
  while (*((_QWORD *)this + 4) != a2);
}

void LLVMInitializeAGX3AsmPrinter()
{
  qword_1EF8F68D0 = (uint64_t)sub_1C614DAAC;
}

llvm::raw_ostream *sub_1C614D714(llvm::raw_ostream *a1, int a2)
{
  return llvm::raw_ostream::operator<<(a1, a2);
}

uint64_t sub_1C614D71C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)a2 + 48))(a2, "Instruction ");
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 56))(v3, a1 + 16);
  v5 = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v4 + 48))(v4, ", falling back to AGX2:  ");
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 56))(v5, a1 + 40);
}

uint64_t sub_1C614D788(uint64_t a1)
{
  return *(unsigned int *)(a1 + 208);
}

double sub_1C614D790(uint64_t a1)
{
  return *(double *)(a1 + 248);
}

uint64_t sub_1C614D798()
{
  return 1;
}

void sub_1C614D7A4(uint64_t a1)
{
  sub_1C614D8DC(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C614D7C8(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E7FA8A90;
  sub_1C4765054((uint64_t)a1 + 1584);
  sub_1C614D8DC((uint64_t)a1 + 792);
  sub_1C5FEAEB4(a1);
}

void sub_1C614D804(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E7FA8A90;
  sub_1C4765054((uint64_t)a1 + 1584);
  sub_1C614D8DC((uint64_t)a1 + 792);
  sub_1C5FEAEB4(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::AnalysisUsage *sub_1C614D854(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  sub_1C63BC59C(a1, a2);
  return llvm::AnalysisUsage::addRequiredID(a2, llvm::MachineLoopInfo::ID);
}

void sub_1C614D880(uint64_t a1)
{
  sub_1C49C7A04(a1);
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C614D8A4(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 32)
      && *(_BYTE *)(a1 + 32)
      && !sub_1C49C7600((unsigned __int8 *)(a1 + 8), (unsigned __int8 *)(a2 + 8));
}

uint64_t sub_1C614D8DC(uint64_t result)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)result = off_1E7FA86B0;
  *(_QWORD *)(result + 720) = off_1E81A6E70;
  if (*(_DWORD *)(result + 776) == 1)
  {
    v3 = *(_QWORD *)(result + 736);
    if (v3)
    {
      v4 = result;
      MEMORY[0x1CAA32F9C](v3, 0x1000C8077774924);
      result = v4;
    }
  }
  v1 = *(void **)(result + 440);
  if (v1 != (void *)(result + 464))
  {
    v5 = result;
    free(v1);
    result = v5;
  }
  v2 = *(void **)(result + 368);
  if (v2 != (void *)(result + 384))
  {
    v6 = result;
    free(v2);
    return v6;
  }
  return result;
}

uint64_t sub_1C614D990(uint64_t a1, char *a2, _OWORD *a3, _BYTE **a4)
{
  uint64_t v8;
  size_t v9;
  _BYTE *v10;

  v8 = sub_1C47AD050(a1, 0, 0);
  *(_BYTE *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)v8 = &unk_1E819E898;
  *(_QWORD *)(v8 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v8 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v8 + 184) = v8 + 160;
  v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  *(_OWORD *)(a1 + 32) = *a3;
  v10 = *a4;
  *(_BYTE *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v10;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void sub_1C614DA5C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C614DA70()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA8CB8;
  return result;
}

void sub_1C614DA94(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA8CB8;
}

uint64_t sub_1C614DAAC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = operator new();
  v5 = *a2;
  *a2 = 0;
  v7 = v5;
  sub_1C614DB2C(v4, a1, &v7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  return v4;
}

uint64_t sub_1C614DB2C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a3;
  *a3 = 0;
  v7 = v4;
  sub_1C63BC478(a1, a2, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  *(_QWORD *)a1 = &off_1E7FA8A90;
  sub_1C614DBAC(a1 + 792);
  llvm::GPUMetadataEmitter::GPUMetadataEmitter(a1 + 1584, a1 + 792);
  *(_DWORD *)(a1 + 7952) = 0;
  return a1;
}

uint64_t sub_1C614DBAC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E7FA86B0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_DWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_DWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 384;
  *(_QWORD *)(a1 + 376) = 0x600000000;
  sub_1C4765AA4((char *)(a1 + 368), 4uLL, 0);
  *(_DWORD *)(a1 + 432) = 256;
  *(_QWORD *)(a1 + 440) = a1 + 464;
  *(_OWORD *)(a1 + 448) = xmmword_1C64638F0;
  *(_DWORD *)(a1 + 728) = 0;
  *(_BYTE *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 768) = 0;
  *(_QWORD *)(a1 + 720) = &off_1E81A7280;
  *(_QWORD *)(a1 + 784) = a1 + 440;
  *(_DWORD *)(a1 + 776) = 0;
  *(_QWORD *)(a1 + 736) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 744) = 0;
  return a1;
}

_QWORD *sub_1C614DCB0(_QWORD *result, uint64_t a2)
{
  *result = off_1E7FA8D70;
  result[1] = a2;
  return result;
}

void sub_1C614DCC4()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C614DCD8(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  size_t v4;
  void *v5;
  int v6;

  if (a2 <= 4)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    v3 = a2;
    v4 = 4 * a2;
    v5 = operator new(v4, (std::align_val_t)4uLL);
    a1[1] = v5;
    a1[2] = v3;
    v6 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v6 & 1) == 0)
      goto LABEL_6;
  }
  v5 = a1 + 1;
  v4 = 16;
LABEL_6:
  memset_pattern16(v5, &unk_1C6613B70, v4);
}

void sub_1C614DD5C(uint64_t a1, int *a2, int *a3)
{
  int v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  int v10;
  int *v11;

  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (void *)(a1 + 8);
    v9 = 16;
  }
  else
  {
    v7 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v7)
      goto LABEL_6;
    v8 = *(void **)(a1 + 8);
    v9 = 4 * v7;
  }
  memset_pattern16(v8, &unk_1C6613B70, v9);
LABEL_6:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 - 0x7FFFFFFF) >= 2)
    {
      v11 = 0;
      sub_1C49CE1AC(a1, v10, &v11);
      *v11 = *a2;
      *(_DWORD *)a1 += 2;
    }
    ++a2;
  }
}

void sub_1C614DE18(unsigned int *a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  void *v6;
  size_t v7;

  v2 = *a1;
  v3 = __clz((*a1 >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    *(_QWORD *)a1 = 1;
    v6 = a1 + 2;
    v7 = 16;
LABEL_10:
    memset_pattern16(v6, &unk_1C6613B70, v7);
    return;
  }
  if ((v2 & 1) != 0)
    goto LABEL_17;
  if (v5 != a1[4])
  {
    MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 1), 4);
LABEL_17:
    sub_1C614DCD8(a1, v5);
    return;
  }
  *(_QWORD *)a1 = 0;
  if (v5)
  {
    v6 = (void *)*((_QWORD *)a1 + 1);
    v7 = 4 * v5;
    goto LABEL_10;
  }
}

void sub_1C614DEE4(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 40, &v5);
  sub_1C614DF50((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C614DF50(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = *a1 + 40 * v2;
    do
    {
      v8 = a2 + v5;
      v9 = v6 + v5;
      *(_DWORD *)v8 = *(_DWORD *)(v6 + v5);
      *(_QWORD *)(v8 + 16) = 0x400000000;
      *(_QWORD *)(v8 + 8) = a2 + v5 + 24;
      if (*(_DWORD *)(v6 + v5 + 16))
        sub_1C614C900(a2 + v5 + 8, v9 + 8);
      v5 += 40;
    }
    while (v9 + 40 != v7);
    v10 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v10)
    {
      v11 = *a1;
      v12 = 40 * v10;
      do
      {
        v13 = *(void **)(v11 + v12 - 32);
        if ((void *)(v11 + v12 - 16) != v13)
          free(v13);
        v12 -= 40;
      }
      while (v12);
    }
  }
}

void sub_1C614E020(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EF800);
  if (v1 != -1)
  {
    v4[0] = sub_1C49CEB08;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EF800, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C614E080(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  void (**v8)(_QWORD *);
  _QWORD *v9;
  void (**v10)(_QWORD *);
  _QWORD v12[3];
  _QWORD *v13;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v4 = operator new();
  v5 = (_QWORD *)a1[3];
  if (v5)
  {
    if (v5 == a1)
    {
      v15 = v14;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v14);
    }
    else
    {
      v15 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
    }
  }
  else
  {
    v15 = 0;
  }
  v6 = (_QWORD *)a2[3];
  if (v6)
  {
    if (v6 == a2)
    {
      v13 = v12;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v12);
    }
    else
    {
      v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v6 + 16))(v6);
    }
  }
  else
  {
    v13 = 0;
  }
  sub_1C49CEBB4(v4, (uint64_t)v14, (uint64_t)v12);
  v7 = v13;
  if (v13 == v12)
  {
    v8 = (void (**)(_QWORD *))(v12[0] + 32);
    v7 = v12;
LABEL_9:
    (*v8)(v7);
    goto LABEL_10;
  }
  if (v13)
  {
    v8 = (void (**)(_QWORD *))(*v13 + 40);
    goto LABEL_9;
  }
LABEL_10:
  v9 = v15;
  if (v15 == v14)
  {
    v10 = (void (**)(_QWORD *))(v14[0] + 32);
    v9 = v14;
  }
  else
  {
    if (!v15)
      return v4;
    v10 = (void (**)(_QWORD *))(*v15 + 40);
  }
  (*v10)(v9);
  return v4;
}

void sub_1C614E204(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EF810);
  if (v1 != -1)
  {
    v4[0] = sub_1C49D33E0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EF810, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C614E264(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8EF818;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E7FA91C8;
  *(_QWORD *)(result + 32) = a1;
  return result;
}

uint64_t sub_1C614E2BC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C49D3938(v0);
}

uint64_t sub_1C614E2E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C49D52C0((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_BYTE *)v9 + 8) = *(_BYTE *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

double sub_1C614E390()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F6530);
  *(_QWORD *)v1 = &off_1E7FA9328;
  *(_QWORD *)(v1 + 272) = v1 + 288;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(v1 + 280) = 0x800000000;
  *(_QWORD *)(v1 + 416) = 0;
  *(_DWORD *)(v1 + 424) = 0;
  return result;
}

uint64_t sub_1C614E3EC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C614E568(v0);
}

void sub_1C614E414(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7ECB08);
  if (v1 != -1)
  {
    v4[0] = sub_1C49D73B8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7ECB08, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C614E474(llvm::Pass *a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E7FA93E8;
  v2 = (void *)*((_QWORD *)a1 + 36);
  if (v2 != *((void **)a1 + 35))
    free(v2);
  sub_1C4926674(a1);
}

void sub_1C614E4B4(llvm::Pass *a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E7FA93E8;
  v2 = (void *)*((_QWORD *)a1 + 36);
  if (v2 != *((void **)a1 + 35))
    free(v2);
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::AnalysisUsage *sub_1C614E50C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
  *((_BYTE *)a2 + 160) = 1;
  llvm::AnalysisUsage::addRequiredID(a2, llvm::SlotIndexes::ID);
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::MachineDominatorTree::ID);
  return llvm::AnalysisUsage::addRequiredID(a2, llvm::MachinePostDominatorTree::ID);
}

uint64_t sub_1C614E568(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = sub_1C4776848(a1, (uint64_t)&unk_1ED7ECB00);
  *(_QWORD *)v2 = &off_1E7FA93E8;
  *(_QWORD *)(v2 + 280) = v2 + 312;
  *(_QWORD *)(v2 + 288) = v2 + 312;
  *(_QWORD *)(v2 + 296) = 4;
  *(_DWORD *)(v2 + 304) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)v2);
  v3 = atomic_load(&qword_1ED7ECB08);
  if (v3 != -1)
  {
    v7[0] = sub_1C49D73B8;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED7ECB08, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C614E610()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C614E568(v0);
}

uint64_t sub_1C614E638()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C49D7F14(v0);
}

void sub_1C614E660(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7ECB18);
  if (v1 != -1)
  {
    v4[0] = sub_1C49D7FD4;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7ECB18, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C614E6C0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 880 * v6;
    do
    {
      *v7 = -4096;
      v7 += 110;
      v8 -= 880;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v11 = 0;
        sub_1C49D9368(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
        v10 = v11;
        *v11 = *(_QWORD *)v4;
        sub_1C49D93F4((uint64_t)(v10 + 1), v4 + 8);
        v10[1] = off_1E7FA9568;
        *((_DWORD *)v10 + 218) = *(_DWORD *)(v4 + 872);
        ++*(_DWORD *)(v5 + 8);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v4 + 8) + 24))(v4 + 8);
      }
      v4 += 880;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_1C614E7AC(uint64_t a1)
{
  sub_1C49DA524(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C614E7D8(uint64_t a1, uint64_t a2)
{
  void *v4;

  if (*(_BYTE *)(a1 + 72))
  {
    v4 = *(void **)a1;
    if (*(_QWORD *)a1 != a1 + 16)
      free(v4);
    *(_BYTE *)(a1 + 72) = 0;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  if (*(_DWORD *)(a2 + 8))
    sub_1C49DA960(a1, a2);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = 1;
}

uint64_t sub_1C614E850(uint64_t a1)
{
  uint64_t v2;

  if (*(_DWORD *)a1 == 6 || *(_BYTE *)(a1 + 8) && *(_DWORD *)(a1 + 4) == 100)
    return 1;
  v2 = *(_QWORD *)(a1 + 16);
  if ((*(_WORD *)(v2 + 44) & 0xC) != 0 && (*(_WORD *)(v2 + 44) & 4) == 0)
    return llvm::MachineInstr::hasPropertyInBundle(v2, 128, 1);
  else
    return *(unsigned __int8 *)(*(_QWORD *)(v2 + 16) + 8) >> 7;
}

void sub_1C614E8B0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EF820);
  if (v1 != -1)
  {
    v4[0] = sub_1C49DAA54;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EF820, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C614E910()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF828);
  *result = &off_1E7FA9618;
  return result;
}

void sub_1C614E950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE v5[24];
  uint64_t v6;
  void *v7[2];
  _DWORD v8[14];
  void *v9;
  int v10;
  _DWORD v11[14];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  sub_1C49E11A4((uint64_t)&v9, *(_QWORD *)a1, *(_DWORD *)(a1 + 16), a3);
  v6 = a2;
  v7[0] = v8;
  v7[1] = (void *)0x600000000;
  if (v10)
    sub_1C476B4F4((uint64_t)v7, (uint64_t)&v9);
  v8[12] = v11[12];
  sub_1C49F6DEC((uint64_t)v5, a1, &v6, (uint64_t)v7);
  if (v7[0] != v8)
    free(v7[0]);
  if (v9 != v11)
    free(v9);
}

double sub_1C614EA34(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  double result;
  uint64_t v7;

  v7 = 0;
  if (sub_1C614ECAC(a2, a3, a4, &v7))
  {
    v5 = v7;
    *a1 = a1 + 2;
    *(_QWORD *)&result = 0x100000000;
    a1[1] = 0x100000000;
    if (*(_DWORD *)(v5 + 16))
      sub_1C49EEBE4((uint64_t)a1, v5 + 8);
  }
  else
  {
    *a1 = a1 + 2;
    *(_QWORD *)&result = 0x100000000;
    a1[1] = 0x100000000;
  }
  return result;
}

void sub_1C614EAC4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EF830);
  if (v1 != -1)
  {
    v4[0] = sub_1C49E16FC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EF830, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C614EB24()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF838);
  *result = &off_1E7FA96D8;
  return result;
}

_QWORD *sub_1C614EB64(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 0x10)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 17;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = operator new(8 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[v5];
  do
LABEL_4:
    *result++ = -4096;
  while (result != v4);
  return result;
}

uint64_t sub_1C614EBE4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 16 * v4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 16 * v5);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v5), (const void *)(*(_QWORD *)a2 + 16 * v5), *(_QWORD *)a2 + 16 * v6 - (*(_QWORD *)a2 + 16 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 16);
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_1C614ECAC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_4;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_4:
  *a4 = v5;
  return v7;
}

uint64_t sub_1C614ED40(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C49EEE4C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C614EDCC(a2, v12, a3, a4);
    v9 = (_QWORD *)result;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_1C614EDCC(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v6;

  v6 = sub_1C49EEEE0(a1, a3, a2);
  *v6 = *a3;
  v6[1] = v6 + 3;
  v6[2] = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
    sub_1C49EECC0((uint64_t)(v6 + 1), (const void **)a4);
  return v6;
}

void sub_1C614EE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v13 = 0;
        sub_1C49EEE4C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
        v10 = v13;
        *v13 = *(_QWORD *)v4;
        v10[2] = 0x100000000;
        v10[1] = v10 + 3;
        v11 = (uint64_t)(v10 + 1);
        if (*(_DWORD *)(v4 + 16))
          sub_1C49EECC0(v11, (const void **)(v4 + 8));
        ++*(_DWORD *)(a1 + 8);
        v12 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v12)
          free(v12);
      }
      v4 += 32;
    }
    while (v4 != a3);
  }
}

_QWORD *sub_1C614EF20(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 == 28)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 0x11)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 17;
    do
LABEL_16:
      *v6++ = -4096;
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) != 0)
    return sub_1C614EB64(v1, v5);
  if (v5 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C614EB64(v1, v5);
  }
  *result = 0;
  if (v5)
  {
    v6 = (_QWORD *)result[1];
    v7 = &v6[v5];
    goto LABEL_16;
  }
  return result;
}

void sub_1C614EFE0(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 != a2)
  {
    v5 = *(_QWORD *)a1 + 104 * v4 - 24;
    v6 = 104 * a2 - 104 * v4;
    do
    {
      sub_1C47655E8(v5, *(_QWORD **)(v5 + 8));
      v7 = *(void **)(v5 - 80);
      if ((void *)(v5 - 64) != v7)
        free(v7);
      v5 -= 104;
      v6 += 104;
    }
    while (v6);
  }
  *(_DWORD *)(a1 + 8) = v2;
}

void sub_1C614F05C(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 104, &v5);
  sub_1C614F0C8(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C614F0C8(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 104 * v2;
    do
    {
      sub_1C49F6B78(a2, v5);
      v5 += 104;
      a2 += 104;
      v6 -= 104;
    }
    while (v6);
    v7 = *(_DWORD *)(a1 + 8);
    if (v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 104 * v7;
      do
      {
        sub_1C47655E8(v8 + v9 - 24, *(_QWORD **)(v8 + v9 - 16));
        v10 = *(void **)(v8 + v9 - 104);
        if ((void *)(v8 + v9 - 88) != v10)
          free(v10);
        v9 -= 104;
      }
      while (v9);
    }
  }
}

void sub_1C614F160(__int128 *a1, _WORD *a2, char **a3)
{
  uint64_t v6;
  char *v7;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED7ECB80, 0, 0);
  byte_1ED7ECC00 = 0;
  qword_1ED7ECC08 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7ECC10 = 0;
  qword_1ED7ECB80 = (uint64_t)&unk_1E819E898;
  qword_1ED7ECC18 = (uint64_t)&off_1E819E9A0;
  qword_1ED7ECC20 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7ECC38 = (uint64_t)&qword_1ED7ECC20;
  llvm::cl::Option::setArgStr(v6, "global-fence-placement", 0x16uLL);
  xmmword_1ED7ECBA0 = *a1;
  word_1ED7ECB8A = word_1ED7ECB8A & 0xFFF8 | *a2 & 7;
  v7 = *a3;
  byte_1ED7ECC00 = **a3;
  byte_1ED7ECC11 = 1;
  byte_1ED7ECC10 = *v7;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7ECB80);
}

void sub_1C614F230(__int128 *a1, _WORD *a2, int **a3)
{
  uint64_t v6;
  int *v7;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED7ECC40, 0, 0);
  dword_1ED7ECCC0 = 0;
  qword_1ED7ECCC8 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED7ECCD0 = 0;
  qword_1ED7ECC40 = (uint64_t)&unk_1E819E3B0;
  qword_1ED7ECCD8 = (uint64_t)&unk_1E819E2C0;
  qword_1ED7ECCE0 = (uint64_t)&off_1E7F95260;
  qword_1ED7ECCF8 = (uint64_t)&qword_1ED7ECCE0;
  llvm::cl::Option::setArgStr(v6, "global-fence-placement-mbb-size-threshold", 0x29uLL);
  xmmword_1ED7ECC60 = *a1;
  word_1ED7ECC4A = word_1ED7ECC4A & 0xFFF8 | *a2 & 7;
  v7 = *a3;
  dword_1ED7ECCC0 = **a3;
  byte_1ED7ECCD4 = 1;
  dword_1ED7ECCD0 = *v7;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7ECC40);
}

uint64_t sub_1C614F300(uint64_t a1, char *a2, _OWORD *a3, _WORD *a4, _BYTE **a5)
{
  uint64_t v10;
  size_t v11;
  _BYTE *v12;

  v10 = sub_1C47AD050(a1, 0, 0);
  *(_BYTE *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E898;
  *(_QWORD *)(v10 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v10 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  *(_OWORD *)(a1 + 32) = *a3;
  *(_WORD *)(a1 + 10) = *(_WORD *)(a1 + 10) & 0xFFF8 | *a4 & 7;
  v12 = *a5;
  *(_BYTE *)(a1 + 128) = **a5;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v12;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void sub_1C614F3E4(__int128 *a1, _WORD *a2, char **a3)
{
  uint64_t v6;
  char *v7;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED7ECE80, 0, 0);
  byte_1ED7ECF00 = 0;
  qword_1ED7ECF08 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7ECF10 = 0;
  qword_1ED7ECE80 = (uint64_t)&unk_1E819E898;
  qword_1ED7ECF18 = (uint64_t)&off_1E819E9A0;
  qword_1ED7ECF20 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7ECF38 = (uint64_t)&qword_1ED7ECF20;
  llvm::cl::Option::setArgStr(v6, "global-fence-placement-post-processing", 0x26uLL);
  xmmword_1ED7ECEA0 = *a1;
  word_1ED7ECE8A = word_1ED7ECE8A & 0xFFF8 | *a2 & 7;
  v7 = *a3;
  byte_1ED7ECF00 = **a3;
  byte_1ED7ECF11 = 1;
  byte_1ED7ECF10 = *v7;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7ECE80);
}

void sub_1C614F4B4(__int128 *a1, _WORD *a2)
{
  uint64_t v4;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED7ED000, 0, 0);
  dword_1ED7ED080 = 0;
  qword_1ED7ED088 = (uint64_t)&off_1E7F952A8;
  unk_1ED7ED090 = 0;
  qword_1ED7ED000 = (uint64_t)&unk_1E819E3B0;
  qword_1ED7ED098 = (uint64_t)&unk_1E819E2C0;
  qword_1ED7ED0A0 = (uint64_t)&off_1E7F95260;
  qword_1ED7ED0B8 = (uint64_t)&qword_1ED7ED0A0;
  llvm::cl::Option::setArgStr(v4, "restrict-fence-count", 0x14uLL);
  xmmword_1ED7ED020 = *a1;
  word_1ED7ED00A = word_1ED7ED00A & 0xFFF8 | *a2 & 7;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7ED000);
}

void sub_1C614F564(__int128 *a1, _WORD *a2, int **a3)
{
  uint64_t v6;

  v6 = sub_1C47AD050((uint64_t)&qword_1ED7ED180, 0, 0);
  dword_1ED7ED200 = 0;
  qword_1ED7ED208 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED7ED210 = 0;
  qword_1ED7ED180 = (uint64_t)&unk_1E819E3B0;
  qword_1ED7ED218 = (uint64_t)&unk_1E819E2C0;
  qword_1ED7ED220 = (uint64_t)&off_1E7F95260;
  qword_1ED7ED238 = (uint64_t)&qword_1ED7ED220;
  llvm::cl::Option::setArgStr(v6, "fence-placement-smps2imgwci-min-batch-size", 0x2AuLL);
  xmmword_1ED7ED1A0 = *a1;
  word_1ED7ED18A = word_1ED7ED18A & 0xFFF8 | *a2 & 7;
  dword_1ED7ED200 = **a3;
  byte_1ED7ED214 = 1;
  dword_1ED7ED210 = dword_1ED7ED200;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7ED180);
}

void sub_1C614F630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  _QWORD *v12;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 80 * v6;
    do
    {
      *v7 = -4096;
      v7 += 10;
      v8 -= 80;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        sub_1C49F6FA8(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v12);
        v10 = v12;
        *v12 = *(_QWORD *)v4;
        v10[1] = v10 + 3;
        v10[2] = 0x600000000;
        if (*(_DWORD *)(v4 + 16))
          sub_1C476B4F4((uint64_t)(v10 + 1), v4 + 8);
        *((_DWORD *)v10 + 18) = *(_DWORD *)(v4 + 72);
        ++*(_DWORD *)(a1 + 8);
        v11 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v11)
          free(v11);
      }
      v4 += 80;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1C614F72C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C614F7B0((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C614F84C(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C614F7B0(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C614F84C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C49F7104(a1, v7);
  v9 = 0;
  sub_1C614F7B0((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C614F8F8(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C614F7B0((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C614F9A4(uint64_t a1)
{
  int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_1C4C91598(**(unsigned __int16 **)(a1 + 16));
  if ((v2 - 172) < 0xE)
  {
    v3 = sub_1C4C32DE8(**(unsigned __int16 **)(a1 + 16), 41, 0) == 67;
    v4 = 5;
  }
  else
  {
    if ((v2 - 125) > 0xD)
    {
      v5 = 0;
      v4 = 0;
      return v4 | v5;
    }
    v3 = sub_1C4C32DE8(**(unsigned __int16 **)(a1 + 16), 41, 0) == 67;
    v4 = 2;
  }
  if (!v3)
    ++v4;
  v5 = 0x100000000;
  return v4 | v5;
}

uint64_t sub_1C614FA38()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C614FB94(v0);
}

void sub_1C614FA60(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7ED268);
  if (v1 != -1)
  {
    v4[0] = sub_1C49FA650;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7ED268, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C614FAC4(llvm::Pass *a1)
{
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C614FAE8(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  llvm::AnalysisUsage::addRequiredID(this, llvm::MachineLoopInfo::ID);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::MachineDominatorTree::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::MachinePostDominatorTree::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C614FB94(uint64_t a1)
{
  llvm::PassRegistry *v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (llvm::PassRegistry *)sub_1C4776848(a1, (uint64_t)&unk_1ED7ED240);
  *(_QWORD *)v2 = &off_1E7FA98B8;
  PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  v3 = atomic_load(&qword_1ED7ED268);
  if (v3 != -1)
  {
    v7[0] = sub_1C49FA650;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED7ED268, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C614FC24()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C614FB94(v0);
}

uint64_t sub_1C614FC4C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C49FA7AC(v0);
}

void sub_1C614FC74(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7ED278);
  if (v1 != -1)
  {
    v4[0] = sub_1C49FA86C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7ED278, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C614FCD4(uint64_t result, int *a2, int *a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD **)result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = *(_DWORD **)result;
    do
    {
      *v6 = 0x7FFFFFFF;
      v6 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v7 = *a2;
    if ((*a2 - 0x7FFFFFFF) >= 2)
    {
      v8 = *(_DWORD *)(result + 16) - 1;
      v9 = v8 & (37 * v7);
      v10 = &v3[2 * v9];
      v11 = *v10;
      if (v7 != *v10)
      {
        v12 = 0;
        v13 = 1;
        while (v11 != 0x7FFFFFFF)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == 0x80000000;
          if (v14)
            v12 = v10;
          v15 = v9 + v13++;
          v9 = v15 & v8;
          v10 = &v3[2 * (v15 & v8)];
          v11 = *v10;
          if (v7 == *v10)
            goto LABEL_7;
        }
        if (v12)
          v10 = v12;
      }
LABEL_7:
      *v10 = v7;
      v10[1] = a2[1];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

llvm::cl::Option *sub_1C614FDB4(llvm::cl::Option *a1, char *a2, __n128 *a3, _BYTE **a4, _WORD *a5)
{
  uint64_t v10;

  v10 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_BYTE *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E898;
  *(_QWORD *)(v10 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v10 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  sub_1C495EA28(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

void sub_1C614FE64()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C614FE78(uint64_t result, uint64_t a2, int a3)
{
  *(_DWORD *)(result + 8) = a3;
  *(_WORD *)(result + 12) = 1028;
  *(_DWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 20) = 1;
  *(_QWORD *)result = &off_1E7FA9AF8;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void sub_1C614FEA8(llvm::TargetFrameLowering *a1)
{
  llvm::TargetFrameLowering::~TargetFrameLowering(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C614FECC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4A00AE8(v0);
}

void sub_1C614FEF4(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7ED290);
  if (v1 != -1)
  {
    v4[0] = sub_1C4A00C90;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7ED290, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C614FF54(__n128 *a1, int **a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED7ED2B0, 0, 0);
  dword_1ED7ED330 = 0;
  qword_1ED7ED338 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED7ED340 = 0;
  qword_1ED7ED2B0 = (uint64_t)&unk_1E819E418;
  qword_1ED7ED348 = (uint64_t)&unk_1E819E230;
  qword_1ED7ED350 = (uint64_t)&off_1E7FA9D80;
  qword_1ED7ED368 = (uint64_t)&qword_1ED7ED350;
  sub_1C4A0EB18(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7ED2B0);
}

BOOL sub_1C614FFF0(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1C6150020()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6150034()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FA9D80;
  return result;
}

void sub_1C6150058(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FA9D80;
}

uint64_t sub_1C6150070()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C61501AC(v0);
}

void sub_1C6150098(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7ED378);
  if (v1 != -1)
  {
    v4[0] = sub_1C4A0F598;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7ED378, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C61500FC(llvm::Pass *a1)
{
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C6150120(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  llvm::AnalysisUsage::addRequiredID(this, llvm::SlotIndexes::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::LiveIntervals::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C61501AC(uint64_t a1)
{
  llvm::PassRegistry *v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (llvm::PassRegistry *)sub_1C4776848(a1, (uint64_t)&unk_1ED7ED370);
  *(_QWORD *)v2 = &off_1E7FA9DE8;
  PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  v3 = atomic_load(&qword_1ED7ED378);
  if (v3 != -1)
  {
    v7[0] = sub_1C4A0F598;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED7ED378, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C615023C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C61501AC(v0);
}

uint64_t sub_1C6150264(char a1)
{
  uint64_t v2;

  v2 = operator new();
  return sub_1C61503DC(v2, a1);
}

void sub_1C615029C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7ED390);
  if (v1 != -1)
  {
    v4[0] = sub_1C4A10FAC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7ED390, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C6150300(llvm::Pass *a1)
{
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C6150324(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  if (*((_BYTE *)a1 + 248))
  {
    llvm::AnalysisUsage::addRequiredID(this, llvm::LiveIntervals::ID);
    llvm::AnalysisUsage::addRequiredID(this, llvm::SlotIndexes::ID);
    sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::SlotIndexes::ID);
    sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::LiveIntervals::ID);
  }
  llvm::AnalysisUsage::addRequiredID(this, llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::MachineLoopInfo::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C61503DC(uint64_t a1, char a2)
{
  llvm::PassRegistry *v4;
  unint64_t v5;
  unint64_t PassRegistry;
  _QWORD *v8;
  _QWORD v9[2];

  v4 = (llvm::PassRegistry *)sub_1C4776848(a1, (uint64_t)&unk_1ED7ED380);
  *(_QWORD *)v4 = &off_1E7FA9EA8;
  *((_BYTE *)v4 + 248) = a2;
  PassRegistry = llvm::PassRegistry::getPassRegistry(v4);
  v5 = atomic_load(&qword_1ED7ED390);
  if (v5 != -1)
  {
    v9[0] = sub_1C4A10FAC;
    v9[1] = &PassRegistry;
    v8 = v9;
    std::__call_once(&qword_1ED7ED390, &v8, (void (__cdecl *)(void *))sub_1C4776838);
  }
  if (word_1ED7ED460)
    *(_BYTE *)(a1 + 248) = byte_1ED7ED4D8 ^ 1;
  return a1;
}

uint64_t sub_1C615049C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C61503DC(v0, 1);
}

void sub_1C61504C8(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED7ED398, 0, 0);
  byte_1ED7ED418 = 0;
  qword_1ED7ED420 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7ED428 = 0;
  qword_1ED7ED398 = (uint64_t)&unk_1E819E898;
  qword_1ED7ED430 = (uint64_t)&off_1E819E9A0;
  qword_1ED7ED438 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7ED450 = (uint64_t)&qword_1ED7ED438;
  sub_1C4A11C90(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7ED398);
}

void sub_1C6150564(_WORD *a1, __n128 *a2, char **a3, _WORD *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED7ED458, 0, 0);
  byte_1ED7ED4D8 = 0;
  qword_1ED7ED4E0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7ED4E8 = 0;
  qword_1ED7ED458 = (uint64_t)&unk_1E819E898;
  qword_1ED7ED4F0 = (uint64_t)&off_1E819E9A0;
  qword_1ED7ED4F8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7ED510 = (uint64_t)&qword_1ED7ED4F8;
  sub_1C6150610(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7ED458);
}

__n128 sub_1C6150610(_WORD *a1, __n128 *a2, char **a3, _WORD *a4)
{
  __int16 v8;
  __n128 result;
  char *v10;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7ED458, "agx3-simplify-red-phi-values-second-clr-pass", 0x2CuLL);
  v8 = word_1ED7ED462;
  word_1ED7ED462 = word_1ED7ED462 & 0xFF9F | (32 * (*a1 & 3));
  result = *a2;
  xmmword_1ED7ED478 = (__int128)*a2;
  v10 = *a3;
  byte_1ED7ED4D8 = **a3;
  byte_1ED7ED4E9 = 1;
  byte_1ED7ED4E8 = *v10;
  word_1ED7ED462 = v8 & 0xFF9F | (32 * (*a4 & 3));
  return result;
}

void sub_1C61506A8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EF900);
  if (v1 != -1)
  {
    v4[0] = sub_1C4A11DE0;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EF900, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C6150708()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6531);
  *result = &off_1E7FA9F68;
  return result;
}

uint64_t sub_1C6150748(unsigned int a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v5;

  v1 = a1 & 0xF;
  v2 = (a1 >> 12) & 0x7F;
  if (v2)
  {
    if (v2 != 4)
    {
      v3 = v2 == 2;
      return ((uint64_t (*)(uint64_t))((char *)nullsub_1583 + 4 * byte_1C6613CEB[v1]))(v3);
    }
  }
  else
  {
    v5 = (a1 >> 9) & 3;
    v3 = v5 == 1;
    if (v5 != 2)
      return ((uint64_t (*)(uint64_t))((char *)nullsub_1583 + 4 * byte_1C6613CEB[v1]))(v3);
  }
  v3 = 2;
  return ((uint64_t (*)(_QWORD))((char *)nullsub_1583 + 4 * byte_1C6613CEB[v1]))(v3);
}

uint64_t sub_1C61507A0(int a1)
{
  return nullsub_1583((a1 + 1));
}

uint64_t sub_1C61507A8()
{
  return 2;
}

uint64_t sub_1C61507B0(int a1)
{
  return (a1 + 2);
}

uint64_t sub_1C61507BC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = xmmword_1C6616230;
  *(_QWORD *)(a1 + 16) = &unk_1C6A31F88;
  *(_QWORD *)(a1 + 24) = "1000";
  *(_OWORD *)(a1 + 32) = 0u;
  *(_DWORD *)(a1 + 48) = 9284;
  *(_QWORD *)a1 = &off_1E7FAA758;
  *(_QWORD *)(a1 + 8) = &unk_1E80C0570;
  *(_QWORD *)(a1 + 80) = a2;
  sub_1C6153AB4(a1 + 88);
  *(_QWORD *)(a1 + 776) = 0;
  *(_OWORD *)(a1 + 760) = 0u;
  v3 = (_QWORD *)operator new();
  *v3 = &off_1E812F0A8;
  v4 = *(_QWORD *)(a1 + 760);
  *(_QWORD *)(a1 + 760) = v3;
  if (v4)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v3 = *(_QWORD **)(a1 + 760);
  }
  v5 = (_QWORD *)operator new();
  *v5 = &off_1E7FAA6F0;
  v5[1] = v3;
  v6 = *(_QWORD *)(a1 + 768);
  *(_QWORD *)(a1 + 768) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

_QWORD *sub_1C61508DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = *(_QWORD **)(a1 + 776);
  if (!result)
  {
    result = (_QWORD *)operator new();
    *result = &off_1E7F95930;
    v3 = *(_QWORD *)(a1 + 776);
    *(_QWORD *)(a1 + 776) = result;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      return *(_QWORD **)(a1 + 776);
    }
  }
  return result;
}

unint64_t sub_1C6150948(uint64_t a1, int a2)
{
  return a2 | ((unint64_t)((a2 & 0xFFFFFF00) >> 8) << 40);
}

void *sub_1C615095C()
{
  return &unk_1E7FAA018;
}

void *sub_1C615096C()
{
  return &unk_1E7FAA408;
}

void *sub_1C615097C()
{
  return &unk_1E7FAA428;
}

void *sub_1C615098C()
{
  return &unk_1E7FAA568;
}

void sub_1C61509A0()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C61509B8(_QWORD *a1)
{
  sub_1C6150A40(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C61509E0(llvm::GPUTargetInstrInfo *a1)
{
  llvm::GPUTargetInstrInfo::~GPUTargetInstrInfo(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6150A04(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*a1, 4);
  return a1;
}

void sub_1C6150A40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *a1 = &off_1E7FAA758;
  v2 = a1[97];
  a1[97] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[96];
  a1[96] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[95];
  a1[95] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1C6150AC0((llvm::TargetRegisterInfo *)(a1 + 11));
  llvm::TargetInstrInfo::~TargetInstrInfo((llvm::TargetInstrInfo *)a1);
}

void sub_1C6150AC0(llvm::TargetRegisterInfo *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;

  *(_QWORD *)this = &off_1E7FB18F8;
  v2 = (char *)*((_QWORD *)this + 81);
  if (v2 != (char *)this + 672)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 77);
  if (v3 != (char *)this + 632)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 73);
  if (v4 != (char *)this + 600)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 62);
  if (v5 != (char *)this + 512)
    free(v5);
  v6 = (char *)*((_QWORD *)this + 53);
  if (v6 != (char *)this + 440)
    free(v6);
  v7 = (char *)*((_QWORD *)this + 44);
  if (v7 != (char *)this + 368)
    free(v7);
  v8 = (char *)*((_QWORD *)this + 35);
  if (v8 != (char *)this + 296)
    free(v8);
  llvm::TargetRegisterInfo::~TargetRegisterInfo(this);
}

_DWORD *sub_1C6150B8C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *result;
  int v10;
  char v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *(_DWORD *)(a1 + 16);
  if (!v6)
  {
    v12 = 0;
LABEL_6:
    result = sub_1C6150C74(a1, (uint64_t)a2, a2, v12);
    *result = *a2;
    v7 = *(_QWORD *)a1;
    v6 = *(_DWORD *)(a1 + 16);
    v11 = 1;
    goto LABEL_4;
  }
  v7 = *(_QWORD *)a1;
  v8 = (37 * *a2) & (v6 - 1);
  result = (_DWORD *)(*(_QWORD *)a1 + 4 * v8);
  v10 = *result;
  if (*a2 != *result)
  {
    v13 = 0;
    v14 = 1;
    while (v10 != 0x7FFFFFFF)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v10 == 0x80000000;
      if (v15)
        v13 = result;
      v16 = v8 + v14++;
      v8 = v16 & (v6 - 1);
      result = (_DWORD *)(v7 + 4 * v8);
      v10 = *result;
      if (*a2 == *result)
        goto LABEL_3;
    }
    if (v13)
      v12 = v13;
    else
      v12 = result;
    goto LABEL_6;
  }
LABEL_3:
  v11 = 0;
LABEL_4:
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v7 + 4 * v6;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

_DWORD *sub_1C6150C74(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_1C4A1830C(a1, v7);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (37 * *a3) & v18;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v19);
      v20 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v21 = 1;
      while (v20 != 0x7FFFFFFF)
      {
        if (v13)
          v22 = 0;
        else
          v22 = v20 == 0x80000000;
        if (v22)
          v13 = a4;
        v23 = v19 + v21++;
        v19 = v23 & v18;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v19);
        v20 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_21;
    }
LABEL_24:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1C4A1830C(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_24;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v11);
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != 0x7FFFFFFF)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == 0x80000000;
    if (v15)
      v13 = a4;
    v16 = v11 + v14++;
    v11 = v16 & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 4 * v11);
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_21:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != 0x7FFFFFFF)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_1C6150E04(void **a1, int *a2, int *a3)
{
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  a1[1] = 0;
  v6 = (char *)*a1;
  v7 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v7)
    memset_pattern16(*a1, &unk_1C6613B70, 4 * v7);
  for (; a2 != a3; ++a2)
  {
    v8 = *a2;
    if ((*a2 - 0x7FFFFFFF) >= 2)
    {
      v9 = *((_DWORD *)a1 + 4) - 1;
      v10 = v9 & (37 * v8);
      v11 = &v6[4 * v10];
      v12 = *(_DWORD *)v11;
      if (v8 != *(_DWORD *)v11)
      {
        v13 = 0;
        v14 = 1;
        while (v12 != 0x7FFFFFFF)
        {
          if (v13)
            v15 = 0;
          else
            v15 = v12 == 0x80000000;
          if (v15)
            v13 = v11;
          v16 = v10 + v14++;
          v10 = v16 & v9;
          v11 = &v6[4 * (v16 & v9)];
          v12 = *(_DWORD *)v11;
          if (v8 == *(_DWORD *)v11)
            goto LABEL_6;
        }
        if (v13)
          v11 = v13;
      }
LABEL_6:
      *(_DWORD *)v11 = v8;
      ++*((_DWORD *)a1 + 2);
    }
  }
}

void sub_1C6150F00(uint64_t a1)
{
  int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 || *(_DWORD *)(a1 + 12))
  {
    v3 = *(unsigned int *)(a1 + 16);
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      if ((_DWORD)v3)
        memset_pattern16(*(void **)a1, &unk_1C6613B70, 4 * v3);
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      sub_1C4A183CC((_QWORD *)a1);
    }
  }
}

void sub_1C6150F70(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7ED548);
  if (v1 != -1)
  {
    v4[0] = sub_1C4A18468;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7ED548, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6150FD0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4A18504(v0);
}

_QWORD *sub_1C6150FF8(_QWORD *a1)
{
  *a1 = &off_1E7FAAF10;
  sub_1C4A21CD8((uint64_t)(a1 + 9));
  return a1;
}

uint64_t sub_1C6151028(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      sub_1C4A1A17C((uint64_t *)v5, a2, &v11);
      v9 = v11;
      *v11 = *a2;
      v10 = a2[1];
      a2[1] = 0;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
      result = a2[1];
      a2[1] = 0;
      if (result)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    }
    a2 += 2;
  }
  return result;
}

llvm::raw_ostream *sub_1C61510F8(uint64_t a1, llvm::raw_ostream *a2)
{
  char *v4;
  llvm::Value *v5;

  if (*(_BYTE *)(a1 + 24))
    v4 = "constimage(";
  else
    v4 = "image(";
  sub_1C4816AD8(a2, v4);
  v5 = *(llvm::Value **)(a1 + 16);
  if (v5)
    llvm::Value::print(v5, a2, 0);
  else
    sub_1C4816AD8(a2, "nullptr");
  return sub_1C4816AD8(a2, ")");
}

uint64_t sub_1C6151174(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1C615117C()
{
  return 1;
}

void sub_1C6151184(_QWORD *a1)
{
  *a1 = &off_1E7FAAF10;
  sub_1C4A21CD8((uint64_t)(a1 + 9));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C61511C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  unsigned int v5;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int GenericVirtualRegister;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = *a5;
  if ((*a5 & 1) == 0)
    return 1;
  if (v5 <= 1)
  {
    *a5 = v5 | 2;
    v10 = *(unsigned int *)(a3 + 4) | ((unint64_t)*(unsigned int *)(a3 + 24) << 32);
    v11 = *(_QWORD *)(a1 + 64);
    v26 = 129;
    v27 = 0;
    sub_1C5544694(v11, &v26, v10);
    v13 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 4);
    v14 = *(unsigned __int8 *)(a3 + 32);
    *(_DWORD *)a3 = 0;
    *(_DWORD *)(a3 + 4) = v13;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if (!v14)
      *(_BYTE *)(a3 + 32) = 1;
  }
  if (!*(_BYTE *)(a4 + 32) || *(_BYTE *)a4 || !*(_BYTE *)(a3 + 32) || *(_BYTE *)a3)
    return 0;
  v15 = *(uint64_t **)(a1 + 64);
  v29 = 129;
  v30 = 0;
  LODWORD(v26) = *(_DWORD *)(a3 + 4);
  v28 = 0;
  sub_1C5546D14(v15, &v29, (int *)&v26);
  v17 = v16;
  v18 = *(uint64_t **)(a1 + 64);
  v29 = 129;
  v30 = 0;
  LODWORD(v26) = *(_DWORD *)(a4 + 4);
  v28 = 0;
  sub_1C5546D14(v18, &v29, (int *)&v26);
  v20 = v19;
  GenericVirtualRegister = llvm::MachineRegisterInfo::createGenericVirtualRegister(*(_QWORD *)(a1 + 48), 4194324, "", 0);
  v22 = *(_QWORD *)(a1 + 64);
  LODWORD(v26) = GenericVirtualRegister;
  v27 = 1;
  v23 = *(_DWORD *)(*(_QWORD *)(v20 + 32) + 4);
  LODWORD(v29) = *(_DWORD *)(*(_QWORD *)(v17 + 32) + 4);
  HIDWORD(v29) = v23;
  sub_1C5547750(v22, (uint64_t)&v26, (int *)&v29, 2);
  v25 = *(_DWORD *)(*(_QWORD *)(v24 + 32) + 4);
  if (!*(_BYTE *)(a3 + 32))
    *(_BYTE *)(a3 + 32) = 1;
  *(_DWORD *)a3 = 0;
  *(_DWORD *)(a3 + 4) = v25;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)a4 = 0;
  result = 1;
  *(_BYTE *)(a4 + 32) = 0;
  return result;
}

_UNKNOWN ***sub_1C6151390(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  __int128 v3;

  *((_QWORD *)&v3 + 1) = a2;
  *(_QWORD *)&v3 = a2 - 16;
  v2 = v3 >> 4;
  if (v2 > 0xF)
    return 0;
  else
    return (&off_1E7FAB118)[v2];
}

void sub_1C61513B8(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, unint64_t a11, __int128 *a12, uint64_t a13, int a14, __int128 *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  uint64_t v34;
  _OWORD *v35;
  _OWORD *v36;
  __int128 v37;
  _OWORD *v38;
  _OWORD *v39;
  __int128 v40;
  _OWORD *v41;
  _OWORD *v42;
  __int128 v43;
  _OWORD *v44;
  _OWORD *v45;
  __int128 v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;
  __int128 v50;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  _OWORD *v55;
  _OWORD *v56;
  __int128 v57;
  uint64_t v58;
  _OWORD *v59;
  _OWORD *v60;
  __int128 v61;
  uint64_t v63;
  __int128 v64;
  __int128 v65;
  _OWORD *v66;
  _OWORD *v67;
  __int128 v68;
  _OWORD *v69;
  _OWORD *v70;
  __int128 v71;
  uint64_t v72;
  _OWORD *v73;
  _OWORD *v74;
  __int128 v75;
  uint64_t v76;
  _OWORD *v77;
  _OWORD *v78;
  __int128 v79;
  int v80;
  unsigned int *v81;
  _QWORD v82[4];
  __int128 v83;
  __int128 v84;

  if (a10)
  {
    v29 = 8 * a10;
    do
    {
      LODWORD(v82[0]) = *a9;
      v30 = *(_QWORD *)(a21 + 24);
      if (!v30)
        goto LABEL_35;
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v30 + 48))(&v83, v30, v82);
      v31 = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v83, 1);
      v32 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
      v33 = v31[1];
      *v32 = *v31;
      v32[1] = v33;
      ++*(_DWORD *)(a20 + 8);
      ++a9;
      v29 -= 8;
    }
    while (v29);
  }
  if (a18)
  {
    ((void (*)(_QWORD *__return_ptr, _QWORD **, uint64_t, uint64_t, uint64_t))(*a1)[12])(v82, a1, a3, a17, a18);
    v34 = *(_QWORD *)(a22 + 24);
    if (!v34)
      goto LABEL_35;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v34 + 48))(&v83, v34, v82);
    v35 = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v83, 1);
    v36 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
    v37 = v35[1];
    *v36 = *v35;
    v36[1] = v37;
    ++*(_DWORD *)(a20 + 8);
  }
  v38 = (_OWORD *)sub_1C47C0F60(a20, a5, 1);
  v39 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
  v40 = v38[1];
  *v39 = *v38;
  v39[1] = v40;
  ++*(_DWORD *)(a20 + 8);
  if (*(_BYTE *)(a6 + 32))
  {
    v41 = (_OWORD *)sub_1C47C0F60(a20, a6, 1);
    v42 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
    v43 = v41[1];
    *v42 = *v41;
    v42[1] = v43;
    ++*(_DWORD *)(a20 + 8);
  }
  if (*(_DWORD *)(a2 + 92) == -1 && *(_BYTE *)(a7 + 32))
  {
    v69 = (_OWORD *)sub_1C47C0F60(a20, a7, 1);
    v70 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
    v71 = v69[1];
    *v70 = *v69;
    v70[1] = v71;
    ++*(_DWORD *)(a20 + 8);
  }
  v44 = (_OWORD *)sub_1C47C0F60(a20, a11, 1);
  v45 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
  v46 = v44[1];
  *v45 = *v44;
  v45[1] = v46;
  ++*(_DWORD *)(a20 + 8);
  if ((*(unsigned int (**)(_QWORD *))(*a1[1] + 184))(a1[1]))
  {
    LODWORD(v82[0]) = 0;
    v47 = *(_QWORD *)(a21 + 24);
    if (!v47)
      goto LABEL_35;
    (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v47 + 48))(&v83, v47, v82);
    v48 = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v83, 1);
    v49 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
    v50 = v48[1];
    *v49 = *v48;
    v49[1] = v50;
    ++*(_DWORD *)(a20 + 8);
  }
  if (a13)
  {
    v52 = 32 * a13;
    do
    {
      v53 = *a12;
      v54 = a12[1];
      a12 += 2;
      v83 = v53;
      v84 = v54;
      v55 = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v83, 1);
      v56 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
      v57 = v55[1];
      *v56 = *v55;
      v56[1] = v57;
      ++*(_DWORD *)(a20 + 8);
      v52 -= 32;
    }
    while (v52);
    if (a14 != 7
      && (*(unsigned int (**)(_QWORD *))(*a1[1] + 184))(a1[1])
      && (*(_DWORD *)(a2 + 92) == -1 || (*(unsigned int (**)(_QWORD *))(*a1[1] + 320))(a1[1])))
    {
      LODWORD(v82[0]) = 0;
      v58 = *(_QWORD *)(a21 + 24);
      if (!v58)
        goto LABEL_35;
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v58 + 48))(&v83, v58, v82);
      v59 = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v83, 1);
      v60 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
      v61 = v59[1];
      *v60 = *v59;
      v60[1] = v61;
      ++*(_DWORD *)(a20 + 8);
    }
  }
  if (a16)
  {
    v63 = 32 * a16;
    do
    {
      v64 = *a15;
      v65 = a15[1];
      a15 += 2;
      v83 = v64;
      v84 = v65;
      v66 = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v83, 1);
      v67 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
      v68 = v66[1];
      *v67 = *v66;
      v67[1] = v68;
      ++*(_DWORD *)(a20 + 8);
      v63 -= 32;
    }
    while (v63);
    if (!a18)
    {
      LODWORD(v82[0]) = 0;
      v76 = *(_QWORD *)(a21 + 24);
      if (v76)
      {
        (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v76 + 48))(&v83, v76, v82);
        v77 = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v83, 1);
        v78 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
        v79 = v77[1];
        *v78 = *v77;
        v78[1] = v79;
        ++*(_DWORD *)(a20 + 8);
        goto LABEL_27;
      }
LABEL_35:
      sub_1C485C2F0();
      sub_1C6151830(v80, v81);
      return;
    }
  }
LABEL_27:
  if (*(_DWORD *)(a2 + 92) == -1)
  {
    LODWORD(v82[0]) = 0;
    v72 = *(_QWORD *)(a21 + 24);
    if (v72)
    {
      (*(void (**)(__int128 *__return_ptr, uint64_t, _QWORD *))(*(_QWORD *)v72 + 48))(&v83, v72, v82);
      v73 = (_OWORD *)sub_1C47C0F60(a20, (unint64_t)&v83, 1);
      v74 = (_OWORD *)(*(_QWORD *)a20 + 32 * *(unsigned int *)(a20 + 8));
      v75 = v73[1];
      *v74 = *v73;
      v74[1] = v75;
      ++*(_DWORD *)(a20 + 8);
      return;
    }
    goto LABEL_35;
  }
}

void sub_1C6151830(int a1@<W1>, unsigned int *a2@<X8>)
{
  unsigned int v2;

  v2 = *a2;
  *((_QWORD *)a2 + 1) = 0;
  a2[4] = 64;
  a2[6] = 0;
  *a2 = v2 & 0xFFF00000 | 0x207;
  a2[1] = a1;
}

void sub_1C6151854(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 96, &v5);
  sub_1C61518C0((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C61518C0(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1 + 96 * v2;
    v5 = (_QWORD *)(a2 + 24);
    v6 = *a1 + 24;
    do
    {
      v7 = *(_QWORD *)(v6 - 8);
      *(_OWORD *)(v5 - 3) = *(_OWORD *)(v6 - 24);
      *(v5 - 1) = v7;
      *v5 = v5 + 2;
      v5[1] = 0x200000000;
      if (*(_DWORD *)(v6 + 8))
        sub_1C4A20D38((uint64_t)v5, v6);
      v8 = v6 - 24;
      v5 += 12;
      v6 += 96;
    }
    while (v8 + 96 != v4);
    v9 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v9)
    {
      v10 = *a1;
      v11 = 96 * v9;
      do
      {
        v12 = *(void **)(v10 + v11 - 72);
        if ((void *)(v10 + v11 - 56) != v12)
          free(v12);
        v11 -= 96;
      }
      while (v11);
    }
  }
}

uint64_t sub_1C6151988(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  unsigned int v13;

  v5 = *(_QWORD *)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 4 * v6 == a2)
  {
    v12 = *a3;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 4);
      v5 = *(_QWORD *)a1;
      v6 = *(unsigned int *)(a1 + 8);
    }
    *(_DWORD *)(v5 + 4 * v6) = v12;
    v13 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v13;
    return *(_QWORD *)a1 + 4 * v13 - 4;
  }
  else
  {
    v7 = (a2 - v5) >> 2;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 4);
      v5 = *(_QWORD *)a1;
      v6 = *(unsigned int *)(a1 + 8);
    }
    v8 = (int *)(v5 + 4 * v7);
    *(_DWORD *)(v5 + 4 * v6) = *(_DWORD *)(v5 + 4 * v6 - 4);
    v9 = *(unsigned int *)(a1 + 8);
    v10 = v5 + 4 * v9 - 4;
    if ((int *)v10 != v8)
    {
      memmove(v8 + 1, v8, v10 - (_QWORD)v8);
      LODWORD(v9) = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v9 + 1;
    *v8 = *a3;
  }
  return (uint64_t)v8;
}

uint64_t sub_1C6151A90(uint64_t *a1, int a2, unsigned int a3, int a4, int a5)
{
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::MachineFunction *v14;
  llvm::MachineInstr *v15;
  llvm::MachineInstr *v16;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v11 = *a1;
  v10 = (unsigned int *)a1[1];
  v12 = *(_QWORD *)(*a1 + 64);
  v13 = *v10;
  v23 = *(_QWORD *)a1[2];
  v24 = 0;
  v14 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v12 + 32))(v12, v13, &v23, 1, 0, 0, 0);
  v16 = v15;
  v18 = 1;
  v20 = 0;
  v21 = 0;
  llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)&v18);
  v18 = 1;
  v20 = 0;
  v21 = 15;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = a2;
  v22 = 0;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  v18 = 1;
  v20 = 0;
  v21 = 0;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  v18 = 1;
  v20 = 0;
  v21 = a3;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = a4;
  v22 = 0;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  v18 = 1;
  v20 = 0;
  v21 = 0;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = a5;
  v22 = 0;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  v18 = 1;
  v20 = 0;
  v21 = 0;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
  sub_1C554AE8C(v16, *(_QWORD *)(v11 + 40), *(_QWORD **)(v11 + 56));
  return *(unsigned int *)(*((_QWORD *)v16 + 4) + 4);
}

llvm::MachineFunction *sub_1C6151C64(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::MachineFunction *v8;
  llvm::MachineInstr *v9;
  llvm::MachineInstr *v10;
  int v11;
  _DWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *(_QWORD *)(*a1 + 64);
  v17 = *v5;
  v18 = 0;
  v8 = (llvm::MachineFunction *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v7 + 32))(v7, a2, &v17, 1, 0, 0, 0);
  v10 = v9;
  v13[0] = 1;
  v14 = 0;
  v15 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)v13);
  v13[0] = 1;
  v14 = 0;
  v15 = 8;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)v13);
  v11 = *(_DWORD *)a1[2];
  v14 = 0;
  v15 = 0;
  v13[0] = 0;
  v13[1] = v11;
  v16 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)v13);
  v13[0] = 1;
  v14 = 0;
  v15 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)v13);
  v13[0] = 1;
  v14 = 0;
  v15 = a3;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)v13);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v6 + 48) + 24) + 16 * (*(_DWORD *)(*((_QWORD *)v10 + 4) + 4) & 0x7FFFFFFF)) = &off_1E7FB1568;
  return v8;
}

llvm::cl::Option *sub_1C6151DC0(llvm::cl::Option *a1, char *a2, _WORD *a3, __n128 *a4, _BYTE **a5)
{
  uint64_t v10;

  v10 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_BYTE *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E898;
  *(_QWORD *)(v10 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v10 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  sub_1C4964004(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

uint64_t sub_1C6151E6C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6;
  double v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  _QWORD *v12;

  v6 = operator new();
  v7 = sub_1C6270F50(v6);
  *v8 = off_1E7FAB1C0;
  v8[7] = a1;
  v8[8] = a2;
  *(_QWORD *)(v6 + 72) = (*(uint64_t (**)(unsigned __int8 *, double))(*(_QWORD *)a2 + 104))(a2, v7);
  *(_QWORD *)(v6 + 80) = (*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)a2 + 176))(a2);
  *(_QWORD *)(v6 + 88) = a3;
  v9 = a2[297];
  if (a2[302])
    v9 |= 2uLL;
  if (a2[304])
    v9 |= 4uLL;
  *(_QWORD *)(v6 + 96) = v9;
  *(_QWORD *)(v6 + 104) = 0;
  sub_1C6270F1C((_QWORD *)(v6 + 112), 4u);
  *(_QWORD *)(v6 + 232) = &unk_1C6616678;
  *(_QWORD *)(v6 + 240) = &unk_1C66166C0;
  *(_QWORD *)(v6 + 248) = &unk_1ED7EACE0;
  *(_QWORD *)(v6 + 256) = &unk_1ED7EAC90;
  *(_QWORD *)(v6 + 264) = 1;
  for (i = 272; i != 1296; i += 16)
    *(_QWORD *)(v6 + i) = 2;
  v11 = 0;
  v12 = &unk_1C6616678;
  do
    *((_DWORD *)sub_1C613AADC((_DWORD *)(v6 + 264), v12++) + 2) = v11++;
  while (v11 != 9);
  return v6;
}

uint64_t sub_1C6151FA0(uint64_t a1, const llvm::TargetMachine *a2)
{
  uint64_t v4;
  const llvm::TargetRegisterInfo *v5;
  unsigned __int8 v6;

  v4 = a1 + 184252;
  *(_QWORD *)sub_1C6374BF4((llvm::TargetLoweringBase *)a1, a2) = &off_1E7FABC10;
  *(_QWORD *)(v4 + 44) = (char *)a2 + 1328;
  *(_QWORD *)(a1 + 144) = &off_1E7FB1BC0;
  *(_QWORD *)(a1 + 488) = &off_1E7FB1BC0;
  *(_QWORD *)(a1 + 856) = &off_1E7FB1BC0;
  *(_QWORD *)(a1 + 704) = &off_1E7FB1568;
  *(_QWORD *)(a1 + 784) = &off_1E7FB1568;
  *(_QWORD *)(a1 + 400) = &off_1E7FB1568;
  *(_QWORD *)(a1 + 128) = &off_1E7FB1B88;
  *(_QWORD *)(a1 + 136) = &off_1E7FB1568;
  *(_QWORD *)(a1 + 312) = &off_1E7FB1B88;
  *(_QWORD *)(a1 + 320) = &off_1E7FB1568;
  *(_QWORD *)(a1 + 168) = &off_1E7FB1B88;
  *(_QWORD *)(a1 + 176) = &off_1E7FB1568;
  *(_QWORD *)(a1 + 160) = &off_1E7FB1B88;
  *(_BYTE *)(v4 + 36) = 0;
  *(_DWORD *)(v4 + 8) = 4096;
  *(_DWORD *)(v4 + 28) = 4096;
  *(_DWORD *)v4 = 4096;
  *(_QWORD *)(a1 + 52) = 0x100000001;
  *(_DWORD *)(a1 + 60) = 1;
  *(_WORD *)(a1 + 4509) = 514;
  v5 = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(_QWORD *))(*((_QWORD *)a2 + 166) + 176))((_QWORD *)a2 + 166);
  llvm::TargetLoweringBase::computeRegisterProperties((llvm::TargetLoweringBase *)a1, v5);
  *(_DWORD *)(a1 + 64) = 1;
  llvm::TargetLoweringBase::setJumpIsExpensive(a1, 1);
  v6 = atomic_load((unsigned __int8 *)&qword_1ED7ED6F0);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7ED6F0))
  {
    byte_1ED7ED6E8 = 0;
    __cxa_guard_release(&qword_1ED7ED6F0);
  }
  *(_BYTE *)(a1 + 16) = byte_1ED7ED6E8;
  return a1;
}

void sub_1C61520CC(uint64_t a1)
{
  sub_1C6132EC4(a1);
}

void sub_1C61520D8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C61520F0()
{
  return 0;
}

BOOL sub_1C61520F8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  uint64_t v5;

  if (a4)
  {
    if (a4 - 15 >= 0x9C)
      return 1;
  }
  else if ((*(_DWORD *)(a5 + 8) & 0xFE) != 0x12)
  {
    return 1;
  }
  v5 = *(_QWORD *)(a2 + 48);
  return v5 && !*(_QWORD *)(v5 + 32);
}

uint64_t sub_1C615213C()
{
  return 1;
}

uint64_t sub_1C6152144()
{
  return 0;
}

uint64_t sub_1C615214C()
{
  return 0;
}

void sub_1C6152164(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7ED700);
  if (v1 != -1)
  {
    v4[0] = sub_1C4A51624;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7ED700, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C61521C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = sub_1C4776848(a1, (uint64_t)&unk_1ED7ED6F8);
  *(_QWORD *)v2 = &off_1E7FAC4B0;
  *(_QWORD *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 264) = 0;
  *(_QWORD *)(v2 + 248) = 0;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_DWORD *)(v2 + 328) = dword_1ED7ED858;
  *(_QWORD *)(v2 + 332) = 0x300000000;
  PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)v2);
  v3 = atomic_load(&qword_1ED7ED700);
  if (v3 != -1)
  {
    v7[0] = sub_1C4A51624;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED7ED700, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void *sub_1C6152284(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7108);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7108);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7110);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7110);
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  llvm::AnalysisUsage::addRequiredID(this, llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)llvm::MachineLoopInfo::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

unsigned __int8 **sub_1C6152358(uint64_t a1, llvm::MachineBasicBlock *this)
{
  unint64_t *FirstTerminator;
  unsigned __int8 **result;
  unsigned __int8 *v6;

  FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(this);
  sub_1C48532D0((unint64_t *)this, FirstTerminator, *(unint64_t **)(a1 + 24), (unint64_t *)a1);
  v6 = 0;
  result = sub_1C49264C4((unsigned __int8 **)(a1 + 56), &v6);
  if (v6)
    return (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)&v6, v6);
  return result;
}

uint64_t sub_1C61523C0(uint64_t a1, uint64_t a2, llvm::MachineBasicBlock *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[3];
  int v23;
  uint64_t v24;
  uint64_t v25[2];
  int v26;
  _QWORD v27[2];
  int v28;

  v27[0] = 0;
  v27[1] = 0;
  v28 = 0;
  v6 = (uint64_t *)(*(_QWORD *)(a1 + 288) + 248);
  v25[0] = (uint64_t)a3;
  v22[0] = 0;
  v7 = 0;
  if (sub_1C48BF0C0(v6, v25, v22))
    v7 = *(_QWORD *)(v22[0] + 8);
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  v8 = *(unsigned int *)(a2 + 8);
  if (!(_DWORD)v8)
    goto LABEL_15;
  v9 = *(uint64_t **)a2;
  v10 = 8 * v8;
  do
  {
    v11 = *v9++;
    v24 = v11;
    v23 = 0;
    sub_1C6152548((uint64_t)v22, (uint64_t)v25, &v24, &v23);
    v10 -= 8;
  }
  while (v10);
  v12 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v12)
  {
    v13 = 0;
    v14 = *(uint64_t **)a2;
    v15 = 8 * v12;
    do
    {
      v16 = *v14;
      if (!v7)
        goto LABEL_9;
      v19 = sub_1C477672C(v7 + 56, *(_QWORD *)(v16 + 24));
      v20 = *(_QWORD *)(v7 + 64);
      v21 = 72;
      if (v20 == *(_QWORD *)(v7 + 56))
        v21 = 76;
      if (v19 != (_QWORD *)(v20 + 8 * *(unsigned int *)(v7 + v21)))
      {
LABEL_9:
        *(_DWORD *)(a1 + 332) = 0;
        if (sub_1C4A5A03C(a1, v16, (uint64_t)a3, (uint64_t)v27, 0, v25) == 1)
        {
          sub_1C4A5A418(a1, v16, a3);
          v13 = 1;
        }
        sub_1C4A5A548((unsigned int *)v27);
      }
      ++v14;
      v15 -= 8;
    }
    while (v15);
    v17 = v27[0];
  }
  else
  {
LABEL_15:
    v17 = 0;
    v13 = 0;
  }
  MEMORY[0x1CAA32FB4](v25[0], 8);
  MEMORY[0x1CAA32FB4](v17, 8);
  return v13 & 1;
}

uint64_t sub_1C6152548(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C4A5C500(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C4A5C588(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

void sub_1C61525E4()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C61525F8(llvm::Pass *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E7FAC4B0;
  v2 = *((_QWORD *)a1 + 31);
  *((_QWORD *)a1 + 31) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1C4926674(a1);
}

void sub_1C615263C(llvm::Pass *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E7FAC4B0;
  v2 = *((_QWORD *)a1 + 31);
  *((_QWORD *)a1 + 31) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6152694()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C61521C4(v0);
}

uint64_t sub_1C61526BC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4A5C500(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void sub_1C615276C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6152780(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FAC598;
  result[1] = v3;
  return result;
}

uint64_t sub_1C61527BC(uint64_t a1)
{
  uint64_t i;

  *(_QWORD *)a1 = &off_1E816E938;
  sub_1C4959BE8((char **)(a1 + 35456));
  for (i = 0; i != -35448; i -= 168)
    sub_1C4959EB8((char **)(a1 + 35296 + i));
  return a1;
}

uint64_t sub_1C6152824(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void (**v4)(_QWORD *);
  _QWORD *v5;
  void (**v6)(_QWORD *);
  _QWORD v8[3];
  _QWORD *v9;
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v10[0] = &off_1E7FAC660;
  v10[1] = 0x100000000;
  v11 = v10;
  sub_1C62713BC(1, 0, v8);
  v2 = sub_1C6145B5C(a1, v10, v8);
  v3 = v9;
  if (v9 == v8)
  {
    v4 = (void (**)(_QWORD *))(v8[0] + 32);
    v3 = v8;
LABEL_3:
    (*v4)(v3);
    goto LABEL_4;
  }
  if (v9)
  {
    v4 = (void (**)(_QWORD *))(*v9 + 40);
    goto LABEL_3;
  }
LABEL_4:
  v5 = v11;
  if (v11 == v10)
  {
    v6 = (void (**)(_QWORD *))(v10[0] + 32);
    v5 = v10;
  }
  else
  {
    if (!v11)
      return v2;
    v6 = (void (**)(_QWORD *))(*v11 + 40);
  }
  (*v6)(v5);
  return v2;
}

void sub_1C6152920()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6152934(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FAC660;
  result[1] = v3;
  return result;
}

uint64_t sub_1C6152968(uint64_t result, _QWORD *a2)
{
  *a2 = &off_1E7FAC660;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_1C6152988(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 16))
  {
    if (*(_BYTE *)(a1 + 16))
    {
      if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
        MEMORY[0x1CAA32F9C]();
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_DWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a1 + 16) = 1;
    }
  }
  else if (*(_BYTE *)(a1 + 16))
  {
    if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
      MEMORY[0x1CAA32F9C]();
    *(_BYTE *)(a1 + 16) = 0;
  }
  return a1;
}

llvm::raw_ostream *sub_1C6152A4C(uint64_t a1, llvm::raw_ostream *a2)
{
  unint64_t v3;
  unint64_t *v4;
  int v5;
  int v6;
  llvm::raw_ostream *v7;
  unint64_t v8;
  unint64_t v9;
  llvm::raw_ostream *v10;
  int v11;
  int i;

  v4 = (unint64_t *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 16);
  if ((v3 & 1) != 0)
  {
    v6 = __clz(__rbit64((v3 >> 1) & ~(-1 << (v3 >> 58))));
    if (((v3 >> 1) & ~(-1 << (v3 >> 58))) != 0)
      v5 = v6;
    else
      v5 = -1;
  }
  else
  {
    v5 = sub_1C476B7EC(v3);
  }
  sub_1C4816AD8(a2, "libaccess");
  v7 = sub_1C4816AD8(a2, "[");
  v8 = *v4;
  if ((*v4 & 1) != 0)
    v9 = v8 >> 58;
  else
    v9 = *(unsigned int *)(v8 + 64);
  v10 = llvm::raw_ostream::operator<<(v7, v9);
  sub_1C4816AD8(v10, "]: {");
  if (v5 != -1)
  {
    llvm::raw_ostream::operator<<(a2, v5);
    v11 = sub_1C49143F4(v4, v5);
    if (v11 != -1)
    {
      for (i = v11; i != -1; i = sub_1C49143F4(v4, i))
      {
        sub_1C4816AD8(a2, " ");
        llvm::raw_ostream::operator<<(a2, i);
      }
    }
  }
  return sub_1C4816AD8(a2, "}");
}

uint64_t sub_1C6152B60(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E7FAD308;
  sub_1C4914448((void ***)(a1 + 16));
  return a1;
}

uint64_t sub_1C6152B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E7FAD350;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 496);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 497);
  *(_QWORD *)(a1 + 24) = a1 + 40;
  v4 = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0x300000000;
  if (*(_DWORD *)(a2 + 512))
    sub_1C614CA14(v4, a2 + 504);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 544);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 552);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 560);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 564);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 568);
  return a1;
}

uint64_t sub_1C6152C3C(uint64_t a1, uint64_t *a2)
{
  return sub_1C4A94C28(a2, a1);
}

uint64_t sub_1C6152C4C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 497) = *(_WORD *)(a2 + 17);
  result = sub_1C614CA14(a1 + 504, a2 + 24);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 560) = *(_WORD *)(a2 + 80);
  *(_DWORD *)(a1 + 564) = *(_DWORD *)(a2 + 84);
  *(_BYTE *)(a1 + 568) = *(_BYTE *)(a2 + 88);
  return result;
}

void sub_1C6152CC4(uint64_t a1)
{
  sub_1C4A950E8(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6152CE8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
  return a1;
}

void sub_1C6152D1C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6152D60(uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  char v5;
  uint64_t v6;

  v6 = 0;
  v5 = 0;
  result = (*(uint64_t (**)(uint64_t *, const char *, _QWORD, _QWORD, char *, uint64_t *))(*a1 + 120))(a1, "SpillSlotFIs ", 0, 0, &v5, &v6);
  if ((_DWORD)result)
  {
    sub_1C4A94E64(a1, a2);
    return (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 128))(a1, v6);
  }
  return result;
}

void sub_1C6152DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  _QWORD *v13;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 24 * v6;
    do
    {
      *v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = 0;
      sub_1C4A965B0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v9, &v13);
      v10 = v13;
      *v13 = *(_QWORD *)a2;
      v10[2] = 0;
      v10[1] = v10 + 3;
      v11 = (uint64_t)(v10 + 1);
      if (*(_DWORD *)(a2 + 16))
        sub_1C49EECC0(v11, (const void **)(a2 + 8));
      ++*(_DWORD *)(a1 + 8);
      v12 = *(void **)(a2 + 8);
      if ((void *)(a2 + 24) != v12)
        free(v12);
    }
    a2 += 24;
  }
}

unint64_t sub_1C6152EC8(uint64_t a1, uint64_t a2, int a3, int a4)
{
  unint64_t v8;
  uint64_t v10;
  unsigned int v11;

  sub_1C4832EA4((llvm::APInt *)&v10, *(_DWORD *)(a2 + 32), -1, 1);
  v8 = sub_1C4A967D8(a1, a2, (uint64_t)&v10, a3, a4);
  if (v11 >= 0x41 && v10)
    MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  return v8;
}

void sub_1C6152F64(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EF910);
  if (v1 != -1)
  {
    v4[0] = sub_1C4A96FC8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EF910, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6152FC4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6152FEC(v0);
}

uint64_t sub_1C6152FEC(uint64_t a1)
{
  llvm::PassRegistry *v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  sub_1C6153090(a1);
  PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  v3 = atomic_load(&qword_1EF8EF910);
  if (v3 != -1)
  {
    v7[0] = sub_1C4A96FC8;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1EF8EF910, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C6153068()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6152FEC(v0);
}

double sub_1C6153090(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = sub_1C4776848(a1, (uint64_t)&unk_1EF8EF908);
  *(_QWORD *)v1 = &off_1E7FAD3A0;
  *(_DWORD *)(v1 + 520) = 0;
  *(_BYTE *)(v1 + 524) = 0;
  *(_QWORD *)(v1 + 256) = 0;
  *(_QWORD *)(v1 + 264) = 0;
  *(_QWORD *)(v1 + 248) = 0;
  *(_DWORD *)(v1 + 272) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 280) = 0u;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_DWORD *)(v1 + 312) = 0;
  *(_QWORD *)(v1 + 320) = 0;
  *(_QWORD *)(v1 + 328) = 0;
  *(_DWORD *)(v1 + 336) = 0;
  *(_QWORD *)(v1 + 344) = 0;
  *(_QWORD *)(v1 + 352) = 0;
  *(_DWORD *)(v1 + 360) = 0;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_OWORD *)(v1 + 384) = 0u;
  *(_DWORD *)(v1 + 400) = 0;
  *(_QWORD *)(v1 + 408) = 0;
  *(_QWORD *)(v1 + 416) = 0;
  *(_DWORD *)(v1 + 424) = 0;
  *(_QWORD *)(v1 + 432) = 0;
  *(_QWORD *)(v1 + 440) = 0;
  *(_DWORD *)(v1 + 448) = 0;
  *(_DWORD *)(v1 + 488) = 0;
  *(_OWORD *)(v1 + 472) = 0u;
  *(_OWORD *)(v1 + 456) = 0u;
  *(_DWORD *)(v1 + 512) = 0;
  *(_QWORD *)(v1 + 496) = 0;
  *(_QWORD *)(v1 + 504) = 0;
  *(_BYTE *)(v1 + 525) = 1;
  return result;
}

void sub_1C6153128(uint64_t *a1)
{
  *a1 = (uint64_t)&off_1E7FAD3A0;
  sub_1C6153204(a1 + 54);
  sub_1C615324C(a1 + 43);
  sub_1C615324C(a1 + 32);
  sub_1C4926674((llvm::Pass *)a1);
}

void sub_1C615316C(uint64_t *a1)
{
  *a1 = (uint64_t)&off_1E7FAD3A0;
  sub_1C6153204(a1 + 54);
  sub_1C615324C(a1 + 43);
  sub_1C615324C(a1 + 32);
  sub_1C4926674((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C61531C4(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::PhysicalRegisterUsageInfo::ID);
  *((_BYTE *)this + 160) = 1;
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t *sub_1C6153204(uint64_t *a1)
{
  sub_1C49D9160((uint64_t)(a1 + 8));
  MEMORY[0x1CAA32FB4](a1[8], 8);
  sub_1C49D9160((uint64_t)(a1 + 5));
  MEMORY[0x1CAA32FB4](a1[5], 8);
  return sub_1C4A9D0C8(a1);
}

uint64_t *sub_1C615324C(uint64_t *a1)
{
  sub_1C49D9160((uint64_t)(a1 + 8));
  MEMORY[0x1CAA32FB4](a1[8], 8);
  sub_1C49D9160((uint64_t)(a1 + 5));
  MEMORY[0x1CAA32FB4](a1[5], 8);
  return sub_1C4A9D14C(a1);
}

void sub_1C6153294(uint64_t a1)
{
  sub_1C49DA524(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C61532B8(uint64_t a1)
{
  sub_1C49DA524(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C61532DC(uint64_t a1)
{
  sub_1C49DA524(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6153308(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8F6540);
  if (v1 != -1)
  {
    v4[0] = sub_1C4A9FA14;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8F6540, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C6153368(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  void **v5;
  uint64_t v6;
  void **v7;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 != a2)
  {
    v5 = (void **)(*(_QWORD *)a1 + (v4 << 6) - 24);
    v6 = (a2 << 6) - (v4 << 6);
    do
    {
      if (v5 + 2 != *v5)
        free(*v5);
      v7 = (void **)*(v5 - 4);
      if (v5 - 2 != v7)
        free(v7);
      v5 -= 8;
      v6 += 64;
    }
    while (v6);
  }
  *(_DWORD *)(a1 + 8) = v2;
}

uint64_t sub_1C61533E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v4 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0x100000000;
  if (*(_DWORD *)(a2 + 16))
    sub_1C615346C(v4, a2 + 8);
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = 0x200000000;
  if (*(_DWORD *)(a2 + 48))
    sub_1C4AA1E04(a1 + 40, (const void **)(a2 + 40));
  return a1;
}

uint64_t sub_1C615346C(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 8 * v9 - 3);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 8 * v10 - 3);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 8 * v10), (const void *)(*(_QWORD *)a2 + 8 * v10), *(_QWORD *)a2 + 8 * v11 - (*(_QWORD *)a2 + 8 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 8);
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

void sub_1C6153588(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EF9D8);
  if (v1 != -1)
  {
    v4[0] = sub_1C4AA3394;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EF9D8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C61535E8()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF9E0);
  *result = &off_1E7FAD628;
  return result;
}

void sub_1C6153628(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EF9E8);
  if (v1 != -1)
  {
    v4[0] = sub_1C4AA61D4;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EF9E8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C6153688()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF9F0);
  *result = &off_1E7FAD730;
  return result;
}

void sub_1C61536C8(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED7ED998, 0, 0);
  byte_1ED7EDA18 = 0;
  qword_1ED7EDA20 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7EDA28 = 0;
  qword_1ED7ED998 = (uint64_t)&unk_1E819E898;
  qword_1ED7EDA30 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EDA38 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EDA50 = (uint64_t)&qword_1ED7EDA38;
  sub_1C4AA9BDC(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7ED998);
}

void sub_1C6153764(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED7EDA58, 0, 0);
  byte_1ED7EDAD8 = 0;
  qword_1ED7EDAE0 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7EDAE8 = 0;
  qword_1ED7EDA58 = (uint64_t)&unk_1E819E898;
  qword_1ED7EDAF0 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EDAF8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EDB10 = (uint64_t)&qword_1ED7EDAF8;
  sub_1C4AA9C60(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EDA58);
}

void sub_1C6153800(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EF9F8);
  if (v1 != -1)
  {
    v4[0] = sub_1C4AA9E40;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EF9F8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C6153860()
{
  uint64_t v0;
  _QWORD *result;
  char v2;

  v0 = operator new();
  v2 = byte_1EF8EFA00;
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&v2);
  *result = &off_1E7FAD870;
  return result;
}

_QWORD *sub_1C61538B0(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)llvm::RegisterBankInfo::RegisterBankInfo(a1, (llvm::RegisterBank **)&off_1EF8EB128, 1);
  *result = &off_1E7FAD940;
  if ((byte_1EF8EFA68 & 1) == 0)
    byte_1EF8EFA68 = 1;
  return result;
}

void sub_1C6153900(uint64_t *a1)
{
  sub_1C495EF58(a1);
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C6153924(uint64_t a1, int a2)
{
  return off_1E7FAFAE0[a2];
}

uint64_t sub_1C6153934(uint64_t a1, uint64_t a2, int a3)
{
  return word_1C677B598[a3];
}

char *sub_1C6153944(uint64_t a1, uint64_t a2)
{
  return (char *)&unk_1C677B6C8 + 4 * word_1C677B5C8[*(unsigned __int16 *)(*(_QWORD *)a2 + 24)];
}

double sub_1C6153968(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = llvm::TargetRegisterInfo::TargetRegisterInfo(a1, (uint64_t)&off_1E7FAFBA0, (uint64_t)off_1E7FAFBB8, (uint64_t)off_1E7FAFFB8, (uint64_t)off_1E7FAFFB8, (uint64_t)&unk_1C677BFB0, -1, (uint64_t)&unk_1E7FB06F0, 0);
  *(_QWORD *)v1 = off_1E7FB1300;
  *(_QWORD *)(v1 + 8) = "0";
  *(_QWORD *)(v1 + 16) = 2948;
  *(_DWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 32) = &off_1E80BF570;
  *(_QWORD *)(v1 + 64) = &unk_1C69E60C8;
  *(_QWORD *)(v1 + 72) = "R89_R90_R91_R92_R93_R94_R95_R96_R97_R98_R99_R100";
  *(_QWORD *)(v1 + 48) = &unk_1C69FCDC0;
  *(_QWORD *)(v1 + 56) = &unk_1C69DE9B6;
  *(_QWORD *)(v1 + 40) = 0x17800000080;
  *(_QWORD *)(v1 + 80) = "IR16tup16_with_hsub3_hsub4_hsub5_hsub6_hsub7_hsub8_hsub9_hsub10";
  *(_QWORD *)(v1 + 88) = &unk_1C69E6650;
  *(_DWORD *)(v1 + 104) = 231;
  *(_QWORD *)(v1 + 96) = &unk_1C69E7030;
  *(_QWORD *)(v1 + 112) = &unk_1C6A0AF18;
  *(_QWORD *)(v1 + 152) = &unk_1C6A08E78;
  *(_QWORD *)(v1 + 160) = &unk_1C6A08E84;
  *(_QWORD *)(v1 + 136) = &unk_1C6A08E90;
  *(_QWORD *)(v1 + 144) = &unk_1C6A09ED4;
  *(_QWORD *)&result = 0x20800000208;
  *(_OWORD *)(v1 + 120) = xmmword_1C676CC40;
  return result;
}

_UNKNOWN **sub_1C6153A84()
{
  return &off_1E7FB1558;
}

uint64_t sub_1C6153A94()
{
  return 0;
}

uint64_t sub_1C6153A9C()
{
  return 0;
}

char **sub_1C6153AA4()
{
  return &off_1E7FB1560;
}

void sub_1C6153AC4(llvm::TargetRegisterInfo *a1)
{
  sub_1C6150AC0(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6153AE8()
{
  return 0;
}

uint64_t sub_1C6153AF0()
{
  return 0;
}

void sub_1C6153AF8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EDDA0);
  if (v1 != -1)
  {
    v4[0] = sub_1C4AB16BC;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EDDA0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6153B58()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4AB1764(v0);
}

void sub_1C6153B80(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EFA70);
  if (v1 != -1)
  {
    v4[0] = sub_1C4AB4E64;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EFA70, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C6153BE0()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EFA78);
  *result = &off_1E7FB1DA8;
  return result;
}

void sub_1C6153C20(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EFA80);
  if (v1 != -1)
  {
    v4[0] = sub_1C4AB981C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EFA80, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C6153C80()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EFA88);
  *result = &off_1E7FB1E68;
  return result;
}

void sub_1C6153CC0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EDEE8);
  if (v1 != -1)
  {
    v4[0] = sub_1C4ABB53C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EDEE8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6153D20()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6153D48(v0);
}

uint64_t sub_1C6153D48(uint64_t a1)
{
  llvm::PassRegistry *v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (llvm::PassRegistry *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EDEE0);
  *(_QWORD *)v2 = &off_1E7FB1F28;
  *((_QWORD *)v2 + 31) = 0;
  *((_QWORD *)v2 + 32) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  v3 = atomic_load(&qword_1ED7EDEE8);
  if (v3 != -1)
  {
    v7[0] = sub_1C4ABB53C;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED7EDEE8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C6153DDC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6153D48(v0);
}

void sub_1C6153E08(llvm::Pass *a1)
{
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6153E2C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C6153E50(llvm *a1, llvm::MachineSchedContext *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  llvm::createGenericSchedPostRA(a1, a2);
  v3 = v2;
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E7FB2128;
  *(_BYTE *)(v4 + 8) = 1;
  v9 = v4;
  v5 = *(uint64_t **)(v3 + 2664);
  if ((unint64_t)v5 >= *(_QWORD *)(v3 + 2672))
  {
    v7 = sub_1C483904C((char **)(v3 + 2656), &v9);
    v8 = v9;
    *(_QWORD *)(v3 + 2664) = v7;
    v9 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  }
  else
  {
    *v5 = v4;
    *(_QWORD *)(v3 + 2664) = v5 + 1;
  }
  return v3;
}

_QWORD *sub_1C6153EF4(_QWORD *a1)
{
  *a1 = &off_1E7FB1FE8;
  sub_1C6150A04(a1 + 210);
  return sub_1C49BD404(a1);
}

void sub_1C6153F2C(_QWORD *a1)
{
  sub_1C49BD404(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6153F50(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8F65A0);
  if (v1 != -1)
  {
    v4[0] = sub_1C4ABF89C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8F65A0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6153FB0(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 24);
    v4 = *(const void **)a2;
    if (v4 == v5)
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(_QWORD *)(a1 + 8);
      if (v9 >= v8)
      {
        if (v8)
          memmove(*(void **)a1, v4, *(_QWORD *)(a2 + 8));
      }
      else
      {
        if (*(_QWORD *)(a1 + 16) >= v8)
        {
          if (v9)
            memmove(*(void **)a1, v4, *(_QWORD *)(a1 + 8));
        }
        else
        {
          *(_QWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), v8, 1);
          v9 = 0;
        }
        v10 = *(_QWORD *)(a2 + 8);
        if (v9 != v10)
          memcpy((void *)(*(_QWORD *)a1 + v9), (const void *)(*(_QWORD *)a2 + v9), *(_QWORD *)a2 + v10 - (*(_QWORD *)a2 + v9));
      }
      *(_QWORD *)(a1 + 8) = v8;
    }
    else
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 24)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = v5;
    }
    *(_QWORD *)(a2 + 8) = 0;
  }
  return a1;
}

_QWORD *sub_1C61540B4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C6154170(a2, *a3, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 4;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 16);
    }
    v10 = 0;
    v11 = v8 + 8 * v9;
  }
  else
  {
    result = sub_1C615421C((_DWORD *)a2, a3, v14);
    v7 = result;
    *result = *a3;
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 4;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v11 = v12 + 8 * v13;
    v10 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C6154170(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C615421C(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C4AC446C((uint64_t)a1, v6);
  v8 = 0;
  sub_1C6154170((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C61542D8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 40);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C6154170((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C6154398(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)(a2 + 8);
    v5 = *(_QWORD *)(a1 + 8);
    if (v5 >= v4)
    {
      if (v4)
        memmove(*(void **)a1, *(const void **)a2, v4);
    }
    else
    {
      if (*(_QWORD *)(a1 + 16) >= v4)
      {
        if (v5)
          memmove(*(void **)a1, *(const void **)a2, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_QWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, (void *)(a1 + 24), v4, 1);
        v5 = 0;
      }
      v6 = *(_QWORD *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + v5), (const void *)(*(_QWORD *)a2 + v5), *(_QWORD *)a2 + v6 - (*(_QWORD *)a2 + v5));
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 8 * v4);
      goto LABEL_10;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
LABEL_6:
        v6 = *(unsigned int *)(a2 + 8);
        if (v5 != v6)
          memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v5));
LABEL_10:
        *(_DWORD *)(a1 + 8) = v4;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 8);
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_1C6154528(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C6144BDC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C61545C0(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_1C61545C0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4AC4F98(a1, v6);
  v8 = 0;
  sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6154670(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C6144BDC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_1C6154724(_QWORD *a1, size_t a2)
{
  uint64_t v4;

  v4 = a1[1];
  if (v4 + a2 > a1[2])
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v4 + a2, 1);
    v4 = a1[1];
  }
  if (a2)
    bzero((void *)(*a1 + v4), a2);
  a1[1] = v4 + a2;
}

void sub_1C6154790(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2, 8);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 8 * v2), 8 * (a2 - v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_1C6154804(uint64_t a1, uint64_t a2)
{
  int v4;
  int *v5;
  void *v6;
  int v7;

  if (a1 != a2)
  {
    v5 = (int *)(a2 + 8);
    v4 = *(_DWORD *)(a2 + 8);
    if (v4)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *v5;
      }
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v7 = *(_DWORD *)(a2 + 12);
      *(_DWORD *)(a1 + 8) = v4;
      *(_DWORD *)(a1 + 12) = v7;
      *(_QWORD *)a2 = a2 + 16;
      *(_DWORD *)(a2 + 12) = 0;
    }
    else
    {
      v5 = (int *)(a1 + 8);
    }
    *v5 = 0;
  }
  return a1;
}

_QWORD *sub_1C6154884(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;

  if (a1 != a2)
  {
    v5 = a2 + 1;
    v4 = a2[1];
    if (v4)
    {
      v6 = (_QWORD *)*a1;
      if ((_QWORD *)*a1 != a1 + 3)
      {
        free(v6);
        v4 = *v5;
      }
      *a1 = *a2;
      a1[1] = v4;
      a1[2] = a2[2];
      *a2 = a2 + 3;
      *v5 = 0;
      v5[1] = 0;
    }
    else
    {
      a1[1] = 0;
    }
  }
  return a1;
}

__int128 *sub_1C6154900(uint64_t a1, _DWORD *a2, size_t a3, _DWORD *a4, size_t a5, const void *a6, size_t a7, uint64_t a8)
{
  __int128 *result;
  uint64_t v10;
  uint64_t v11;

  result = llvm::MCSubtargetInfo::InitMCProcessorInfo(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 192);
  if ((v10 & 1) != 0)
    *(_BYTE *)(a1 + 389) = 1;
  if ((v10 & 2) != 0)
    *(_BYTE *)(a1 + 380) = 1;
  if ((v10 & 4) != 0)
    *(_BYTE *)(a1 + 345) = 1;
  if ((v10 & 8) != 0)
    *(_BYTE *)(a1 + 287) = 1;
  if ((v10 & 0x10) != 0)
    *(_BYTE *)(a1 + 387) = 1;
  if ((v10 & 0x20) != 0)
    *(_BYTE *)(a1 + 320) = 1;
  if ((v10 & 0x40) != 0)
    *(_BYTE *)(a1 + 314) = 1;
  if ((v10 & 0x80) != 0)
    *(_BYTE *)(a1 + 316) = 1;
  if ((v10 & 0x100) != 0)
    *(_BYTE *)(a1 + 315) = 1;
  if ((v10 & 0x200) != 0)
    *(_BYTE *)(a1 + 317) = 1;
  if ((v10 & 0x400) != 0)
    *(_BYTE *)(a1 + 343) = 1;
  if ((v10 & 0x800) != 0)
    *(_BYTE *)(a1 + 390) = 1;
  if ((v10 & 0x1000) != 0)
    *(_BYTE *)(a1 + 313) = 1;
  if ((v10 & 0x2000) != 0)
    *(_BYTE *)(a1 + 284) = 1;
  if ((v10 & 0x4000) != 0)
    *(_BYTE *)(a1 + 378) = 1;
  if ((v10 & 0x8000) != 0)
    *(_BYTE *)(a1 + 377) = 1;
  if ((v10 & 0x10000) != 0)
    *(_BYTE *)(a1 + 351) = 1;
  if ((v10 & 0x20000) != 0)
    *(_BYTE *)(a1 + 328) = 1;
  if ((v10 & 0x40000) != 0)
    *(_BYTE *)(a1 + 394) = 1;
  if ((v10 & 0x80000) != 0)
    *(_BYTE *)(a1 + 353) = 1;
  if ((v10 & 0x100000) != 0)
    *(_BYTE *)(a1 + 382) = 1;
  if ((v10 & 0x200000) != 0)
    *(_BYTE *)(a1 + 349) = 1;
  if ((v10 & 0x400000) != 0)
    *(_BYTE *)(a1 + 350) = 1;
  if ((v10 & 0x800000) != 0)
    *(_BYTE *)(a1 + 367) = 1;
  if ((v10 & 0x1000000) != 0)
    *(_BYTE *)(a1 + 296) = 1;
  if ((v10 & 0x2000000) != 0)
    *(_BYTE *)(a1 + 352) = 1;
  if ((v10 & 0x4000000) != 0)
    *(_BYTE *)(a1 + 392) = 1;
  if ((v10 & 0x8000000) != 0)
    *(_BYTE *)(a1 + 369) = 1;
  if ((v10 & 0x10000000) != 0)
    *(_BYTE *)(a1 + 338) = 1;
  if ((v10 & 0x20000000) != 0)
    *(_BYTE *)(a1 + 280) = 1;
  if ((v10 & 0x40000000) != 0)
    *(_BYTE *)(a1 + 395) = 1;
  if ((v10 & 0x80000000) != 0)
    *(_BYTE *)(a1 + 384) = 1;
  if ((v10 & 0x100000000) != 0)
    *(_BYTE *)(a1 + 312) = 1;
  if ((v10 & 0x200000000) != 0)
    *(_BYTE *)(a1 + 399) = 1;
  if ((v10 & 0x400000000) != 0)
    *(_BYTE *)(a1 + 359) = 1;
  if ((v10 & 0x800000000) != 0)
    *(_BYTE *)(a1 + 398) = 1;
  if ((v10 & 0x1000000000) != 0)
    *(_BYTE *)(a1 + 321) = 1;
  if ((v10 & 0x2000000000) != 0)
    *(_BYTE *)(a1 + 310) = 1;
  if ((v10 & 0x4000000000) != 0)
    *(_BYTE *)(a1 + 329) = 1;
  if ((v10 & 0x8000000000) != 0)
    *(_BYTE *)(a1 + 330) = 1;
  if ((v10 & 0x10000000000) != 0)
    *(_BYTE *)(a1 + 288) = 1;
  if ((v10 & 0x20000000000) != 0)
    *(_BYTE *)(a1 + 300) = 1;
  if ((v10 & 0x40000000000) != 0)
    *(_BYTE *)(a1 + 301) = 1;
  if ((v10 & 0x80000000000) != 0)
    *(_BYTE *)(a1 + 297) = 1;
  if ((v10 & 0x100000000000) != 0)
    *(_BYTE *)(a1 + 298) = 1;
  if ((v10 & 0x200000000000) != 0)
    *(_BYTE *)(a1 + 299) = 1;
  if ((v10 & 0x400000000000) != 0)
    *(_BYTE *)(a1 + 303) = 1;
  if ((v10 & 0x800000000000) != 0)
    *(_BYTE *)(a1 + 302) = 1;
  if ((v10 & 0x1000000000000) != 0)
    *(_BYTE *)(a1 + 305) = 1;
  if ((v10 & 0x2000000000000) != 0)
    *(_BYTE *)(a1 + 304) = 1;
  if ((v10 & 0x4000000000000) != 0)
    *(_BYTE *)(a1 + 356) = 1;
  if ((v10 & 0x8000000000000) != 0)
    *(_BYTE *)(a1 + 364) = 1;
  if ((v10 & 0x10000000000000) != 0)
    *(_BYTE *)(a1 + 342) = 1;
  if ((v10 & 0x20000000000000) != 0)
    *(_BYTE *)(a1 + 355) = 1;
  if ((v10 & 0x40000000000000) != 0)
    *(_BYTE *)(a1 + 354) = 1;
  if ((v10 & 0x80000000000000) != 0)
    *(_BYTE *)(a1 + 393) = 1;
  if ((v10 & 0x100000000000000) != 0)
    *(_BYTE *)(a1 + 285) = 1;
  if ((v10 & 0x200000000000000) != 0)
    *(_BYTE *)(a1 + 295) = 1;
  if ((v10 & 0x400000000000000) != 0)
    *(_BYTE *)(a1 + 362) = 1;
  if ((v10 & 0x800000000000000) != 0)
    *(_BYTE *)(a1 + 335) = 1;
  if ((v10 & 0x1000000000000000) != 0)
    *(_BYTE *)(a1 + 347) = 1;
  if ((v10 & 0x2000000000000000) != 0)
    *(_BYTE *)(a1 + 334) = 1;
  if ((v10 & 0x4000000000000000) != 0)
    *(_BYTE *)(a1 + 333) = 1;
  if (v10 < 0)
    *(_BYTE *)(a1 + 373) = 1;
  v11 = *(_QWORD *)(a1 + 200);
  if ((v11 & 1) != 0)
    *(_BYTE *)(a1 + 366) = 1;
  if ((v11 & 2) != 0)
    *(_BYTE *)(a1 + 360) = 1;
  if ((v11 & 4) != 0)
    *(_BYTE *)(a1 + 283) = 1;
  if ((v11 & 8) != 0)
    *(_BYTE *)(a1 + 348) = 1;
  if ((v11 & 0x10) != 0)
    *(_BYTE *)(a1 + 292) = 1;
  if ((v11 & 0x20) != 0)
    *(_BYTE *)(a1 + 293) = 1;
  if ((v11 & 0x40) != 0)
    *(_BYTE *)(a1 + 294) = 1;
  if ((v11 & 0x80) != 0)
    *(_BYTE *)(a1 + 291) = 1;
  if ((v11 & 0x100) != 0)
    *(_BYTE *)(a1 + 388) = 1;
  if ((v11 & 0x200) != 0)
    *(_BYTE *)(a1 + 322) = 1;
  if ((v11 & 0x400) != 0)
    *(_BYTE *)(a1 + 368) = 1;
  if ((v11 & 0x800) != 0)
    *(_BYTE *)(a1 + 358) = 1;
  if ((v11 & 0x1000) != 0)
    *(_BYTE *)(a1 + 383) = 1;
  if ((v11 & 0x2000) != 0)
    *(_BYTE *)(a1 + 361) = 1;
  if ((v11 & 0x4000) != 0)
    *(_BYTE *)(a1 + 397) = 1;
  if ((v11 & 0x8000) != 0)
    *(_BYTE *)(a1 + 344) = 1;
  if ((v11 & 0x10000) != 0)
    *(_BYTE *)(a1 + 290) = 1;
  if ((v11 & 0x20000) != 0)
    *(_BYTE *)(a1 + 370) = 1;
  if ((v11 & 0x40000) != 0)
    *(_BYTE *)(a1 + 339) = 1;
  if ((v11 & 0x80000) != 0)
    *(_BYTE *)(a1 + 381) = 1;
  if ((v11 & 0x100000) != 0)
    *(_BYTE *)(a1 + 336) = 1;
  if ((v11 & 0x200000) != 0)
    *(_BYTE *)(a1 + 385) = 1;
  if ((v11 & 0x400000) != 0)
    *(_BYTE *)(a1 + 376) = 1;
  if ((v11 & 0x800000) != 0)
    *(_BYTE *)(a1 + 386) = 1;
  if ((v11 & 0x1000000) != 0)
    *(_BYTE *)(a1 + 363) = 1;
  if ((v11 & 0x2000000) != 0)
    *(_BYTE *)(a1 + 391) = 1;
  if ((v11 & 0x4000000) != 0)
    *(_BYTE *)(a1 + 289) = 1;
  if ((v11 & 0x8000000) != 0)
    *(_BYTE *)(a1 + 371) = 1;
  if ((v11 & 0x10000000) != 0)
    *(_BYTE *)(a1 + 332) = 1;
  if ((v11 & 0x20000000) != 0)
    *(_BYTE *)(a1 + 372) = 1;
  if ((v11 & 0x40000000) != 0)
    *(_BYTE *)(a1 + 374) = 1;
  if ((v11 & 0x80000000) != 0)
    *(_BYTE *)(a1 + 340) = 1;
  if ((v11 & 0x100000000) != 0)
    *(_BYTE *)(a1 + 396) = 1;
  if ((v11 & 0x200000000) != 0)
    *(_BYTE *)(a1 + 282) = 1;
  if ((v11 & 0x400000000) != 0)
    *(_BYTE *)(a1 + 327) = 1;
  if ((v11 & 0x800000000) != 0)
    *(_BYTE *)(a1 + 324) = 1;
  if ((v11 & 0x1000000000) != 0)
    *(_BYTE *)(a1 + 323) = 1;
  if ((v11 & 0x2000000000) != 0)
    *(_BYTE *)(a1 + 326) = 1;
  if ((v11 & 0x4000000000) != 0)
    *(_BYTE *)(a1 + 325) = 1;
  if ((v11 & 0x8000000000) != 0)
    *(_BYTE *)(a1 + 365) = 1;
  if ((v11 & 0x10000000000) != 0)
    *(_BYTE *)(a1 + 318) = 1;
  if ((v11 & 0x20000000000) != 0)
    *(_BYTE *)(a1 + 319) = 1;
  if ((v11 & 0x40000000000) != 0)
    *(_BYTE *)(a1 + 357) = 1;
  if ((v11 & 0x80000000000) != 0)
    *(_BYTE *)(a1 + 341) = 1;
  if ((v11 & 0x100000000000) != 0)
    *(_BYTE *)(a1 + 375) = 1;
  if ((v11 & 0x200000000000) != 0)
    *(_BYTE *)(a1 + 308) = 1;
  if ((v11 & 0x400000000000) != 0)
    *(_BYTE *)(a1 + 281) = 1;
  if ((v11 & 0x800000000000) != 0)
    *(_BYTE *)(a1 + 379) = 1;
  if ((v11 & 0x1000000000000) != 0)
    *(_BYTE *)(a1 + 286) = 1;
  if ((v11 & 0x2000000000000) != 0)
    *(_BYTE *)(a1 + 331) = 1;
  if ((v11 & 0x4000000000000) != 0)
    *(_BYTE *)(a1 + 311) = 1;
  if ((v11 & 0x8000000000000) != 0)
    *(_BYTE *)(a1 + 309) = 1;
  if ((v11 & 0x10000000000000) != 0)
    *(_BYTE *)(a1 + 337) = 1;
  if ((v11 & 0x20000000000000) != 0)
    *(_BYTE *)(a1 + 307) = 1;
  if ((v11 & 0x40000000000000) != 0)
    *(_BYTE *)(a1 + 306) = 1;
  return result;
}

uint64_t sub_1C6154FD4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1C615BE68(a2, a3, a4, a5);
}

_QWORD *sub_1C6154FE8(_QWORD *a1, __int128 *a2, void *a3, size_t a4, const void *a5, size_t a6, uint64_t a7)
{
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _DWORD *v18;
  size_t v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  _DWORD *v23;
  size_t v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v13 = llvm::TargetSubtargetInfo::TargetSubtargetInfo((uint64_t)a1, a2, a3, a4, a3, a4, a5, a6, (uint64_t)&off_1E812D230, 92, (uint64_t)&off_1E812E978, 19, (uint64_t)&unk_1C6A3B098, (uint64_t)&unk_1C6A3B300, (uint64_t)&unk_1C6A3B35C, 0, 0, 0);
  *v13 = &off_1E7FB2398;
  v14 = v13 + 32;
  std::string::__init((std::string *)(v13 + 32), (const std::string::value_type *)a3, a4);
  *((_WORD *)a1 + 140) = 256;
  *(_OWORD *)((char *)a1 + 282) = 0u;
  *(_OWORD *)((char *)a1 + 298) = 0u;
  *(_OWORD *)((char *)a1 + 314) = 0u;
  *(_OWORD *)((char *)a1 + 330) = 0u;
  *(_OWORD *)((char *)a1 + 346) = 0u;
  *(_OWORD *)((char *)a1 + 362) = 0u;
  *(_OWORD *)((char *)a1 + 378) = 0u;
  *(_OWORD *)((char *)a1 + 394) = 0u;
  *(_OWORD *)((char *)a1 + 410) = 0u;
  *(_OWORD *)(a1 + 53) = 0u;
  sub_1C61508D8(a1 + 55, a1);
  a1[153] = 0;
  v16 = *((char *)a1 + 279);
  if (v16 < 0)
    v17 = a1[33];
  else
    v17 = *((unsigned __int8 *)a1 + 279);
  if (!v17)
  {
    MEMORY[0x1CAA32ABC](v14, "g15");
    LOBYTE(v16) = *((_BYTE *)a1 + 279);
  }
  if ((v16 & 0x80u) == 0)
    v18 = v14;
  else
    v18 = (_DWORD *)a1[32];
  if ((v16 & 0x80u) == 0)
    v19 = v16 & 0x7F;
  else
    v19 = a1[33];
  llvm::MCSubtargetInfo::InitMCProcessorInfo((uint64_t)a1, v18, v19, v18, v19, a5, a6, v15);
  v21 = *((_BYTE *)a1 + 279);
  v22 = v21 < 0;
  if (v21 >= 0)
    v23 = v14;
  else
    v23 = (_DWORD *)a1[32];
  v24 = v21 & 0x7F;
  if (v22)
    v25 = a1[33];
  else
    v25 = v24;
  sub_1C6154900((uint64_t)a1, v23, v25, v23, v25, a5, a6, v20);
  v26 = operator new();
  sub_1C614FE78(v26, (uint64_t)a1, 0);
  v27 = a1[54];
  a1[54] = v26;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v28 = operator new();
  sub_1C61520C4(v28, a7);
  v29 = a1[153];
  a1[153] = v28;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  v30 = operator new();
  (*(void (**)(_QWORD *))(*a1 + 176))(a1);
  sub_1C61538B0(v30);
  v31 = (*(uint64_t (**)(_QWORD *))(*a1 + 120))(a1);
  v32 = (_QWORD *)operator new();
  sub_1C614DCB0(v32, v31);
  v33 = a1[50];
  a1[50] = v32;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
  v34 = sub_1C6151E6C(a7, (unsigned __int8 *)a1, v30);
  v35 = a1[51];
  a1[51] = v34;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = operator new();
  sub_1C61527B8(v36, (uint64_t)a1);
  v37 = a1[52];
  a1[52] = v36;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = a1[53];
  a1[53] = v30;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
  return a1;
}

void sub_1C615532C(uint64_t a1)
{
  sub_1C4AC75B8(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6155350()
{
  return 1;
}

void sub_1C6155358(__int128 *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)&qword_1EF8F65B0, 0, 0);
  dword_1EF8F6630 = 0;
  qword_1EF8F6638 = (uint64_t)&off_1E7F952A8;
  unk_1EF8F6640 = 0;
  qword_1EF8F65B0 = (uint64_t)&unk_1E819E3B0;
  qword_1EF8F6648 = (uint64_t)&unk_1E819E2C0;
  qword_1EF8F6650 = (uint64_t)&off_1E7F95260;
  qword_1EF8F6668 = (uint64_t)&qword_1EF8F6650;
  llvm::cl::Option::setArgStr(v2, "agx3-tmp-reg-limit", 0x12uLL);
  xmmword_1EF8F65D0 = *a1;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F65B0);
}

void LLVMInitializeAGX3Target()
{
  uint64_t v1;

  qword_1EF8F68B8 = (uint64_t)sub_1C6156F00;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v1 = qword_1ED830BC0[0];
  sub_1C627DA28((llvm *)qword_1ED830BC0[0]);
  sub_1C626EB00(v1);
  sub_1C614E8B0(v1);
  sub_1C6152164(v1);
  sub_1C6150F70(v1);
  sub_1C6158CD0(v1);
  sub_1C6158EB8(v1);
  sub_1C615852C(v1);
  sub_1C62778AC(v1);
  sub_1C55C7154(v1);
  sub_1C614E020(v1);
  sub_1C6153628(v1);
  sub_1C614E204(v1);
  sub_1C614FEF4(v1);
  sub_1C6153AF8(v1);
  sub_1C614EAC4(v1);
  sub_1C6152F64(v1);
  sub_1C61596B0(v1);
  sub_1C6153308(v1);
  sub_1C6153CC0(v1);
  sub_1C6153800(v1);
  sub_1C6153B80(v1);
  sub_1C6153C20(v1);
  sub_1C6153F50(v1);
  sub_1C61506A8(v1);
  sub_1C6150098(v1);
  sub_1C615029C(v1);
  sub_1C6153588(v1);
  sub_1C615A428(v1);
  sub_1C614FA60(v1);
  sub_1C614E414(v1);
  sub_1C614E660(v1);
  sub_1C614FC74(v1);
  sub_1C615A4F0(v1);
}

uint64_t sub_1C6155558(uint64_t a1, uint64_t a2, __int128 *a3, void *a4, size_t a5, void *a6, size_t a7, __int128 *a8, uint64_t a9, uint64_t a10, int a11)
{
  llvm::TargetLoweringObjectFileMachO *v18;
  _BYTE v20[312];

  sub_1C4843154((uint64_t)v20, a8);
  sub_1C48424CC((_DWORD *)a1, a2, (uint64_t)a3, a4, a5, a6, a7, (uint64_t)v20, a9, a10, a11);
  sub_1C48433E8((uint64_t)v20);
  *(_QWORD *)a1 = &off_1E7FB2558;
  v18 = (llvm::TargetLoweringObjectFileMachO *)operator new();
  *(_QWORD *)(a1 + 1320) = llvm::TargetLoweringObjectFileMachO::TargetLoweringObjectFileMachO(v18);
  sub_1C6154FE8((_QWORD *)(a1 + 1328), a3, a4, a5, a6, a7, a1);
  *(_OWORD *)(a1 + 2560) = 0u;
  *(_QWORD *)(a1 + 2576) = 0x1000000000;
  *(_BYTE *)(a1 + 592) |= 1u;
  *(_WORD *)(a1 + 1020) |= 0x1000u;
  *(_DWORD *)(a1 + 1024) = 1;
  llvm::LLVMTargetMachine::initAsmInfo((llvm::LLVMTargetMachine *)a1);
  return a1;
}

uint64_t sub_1C6155684(uint64_t a1, llvm *a2)
{
  return sub_1C6153E50(a2, a2);
}

llvm::TargetPassConfig *sub_1C6155690(llvm::LLVMTargetMachine *a1, llvm::legacy::PassManagerBase *a2)
{
  llvm::TargetPassConfig *v4;
  llvm::TargetPassConfig *v5;

  v4 = (llvm::TargetPassConfig *)operator new();
  v5 = sub_1C6155970(v4, a1, a2);
  llvm::TargetPassConfig::substitutePass((uint64_t)v5, (uint64_t)&llvm::LiveVariables::ID, 0, 0);
  llvm::TargetPassConfig::substitutePass((uint64_t)v4, (uint64_t)&unk_1EF8F7011, 0, 0);
  llvm::TargetPassConfig::substitutePass((uint64_t)v4, (uint64_t)&unk_1EF8F6F51, 0, 0);
  return v4;
}

BOOL sub_1C6155728(llvm::TargetPassConfig *a1)
{
  return (*(_WORD *)(*((_QWORD *)a1 + 14) + 1020) & 0x1000) != 0
      || llvm::TargetPassConfig::reportDiagnosticWhenGlobalISelFallback(a1);
}

uint64_t sub_1C6155740(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  int OptLevel;

  v2 = (llvm::Pass *)operator new();
  OptLevel = llvm::TargetPassConfig::getOptLevel(a1);
  sub_1C626F09C((uint64_t)v2, OptLevel);
  llvm::TargetPassConfig::addPass(a1, v2);
  return 0;
}

void sub_1C615579C(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;

  v2 = (llvm::Pass *)operator new();
  sub_1C6159034((uint64_t)v2);
  llvm::TargetPassConfig::addPass(a1, v2);
}

uint64_t sub_1C61557E0(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;

  v2 = (llvm::Pass *)operator new();
  sub_1C627146C((uint64_t)v2);
  llvm::TargetPassConfig::addPass(a1, v2);
  return 0;
}

void sub_1C615582C(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  llvm::Pass *v3;
  llvm::Pass *v4;

  v2 = (llvm::Pass *)operator new();
  sub_1C6158E4C((uint64_t)v2);
  llvm::TargetPassConfig::addPass(a1, v2);
  v3 = (llvm::Pass *)sub_1C6150FD0();
  llvm::TargetPassConfig::addPass(a1, v3);
  v4 = (llvm::Pass *)operator new();
  sub_1C6152280((uint64_t)v4);
  llvm::TargetPassConfig::addPass(a1, v4);
}

uint64_t sub_1C61558AC(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;

  v2 = (llvm::Pass *)operator new();
  sub_1C627799C((uint64_t)v2);
  llvm::TargetPassConfig::addPass(a1, v2);
  return 0;
}

uint64_t sub_1C61558F8(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  llvm::Pass *v3;

  v2 = (llvm::Pass *)operator new();
  sub_1C6274CCC((uint64_t)v2);
  llvm::TargetPassConfig::addPass(a1, v2);
  v3 = (llvm::Pass *)operator new();
  sub_1C6270DE8((uint64_t)v3);
  llvm::TargetPassConfig::addPass(a1, v3);
  return 0;
}

llvm::TargetPassConfig *sub_1C6155970(llvm::TargetPassConfig *a1, llvm::LLVMTargetMachine *a2, llvm::legacy::PassManagerBase *a3)
{
  unsigned __int8 v4;

  *(_QWORD *)llvm::TargetPassConfig::TargetPassConfig(a1, a2, a3) = &off_1E7FB2648;
  v4 = atomic_load((unsigned __int8 *)&qword_1EF8EFA98);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EF8EFA98))
    __cxa_guard_release(&qword_1EF8EFA98);
  return a1;
}

void sub_1C61559D0(uint64_t a1)
{
  uint64_t v2;
  llvm::Pass *CodeGenPreparePass;
  llvm::Pass *v4;
  llvm *v5;
  llvm::Pass *v6;
  llvm::Pass *LowerSwitchPass;
  llvm::Pass *v8;
  llvm::Pass *v9;
  _QWORD *v10;
  void (**v11)(_QWORD *);
  _QWORD *v12;
  void (**v13)(_QWORD *);
  _QWORD *v14;
  void (**v15)(_QWORD *);
  _QWORD *v16;
  void (**v17)(_QWORD *);
  _QWORD *v18;
  void (**v19)(_QWORD *);
  llvm::Pass *CFGSimplificationPass;
  llvm *v21;
  llvm::Pass *UnifyFunctionExitNodesPass;
  llvm::Pass *v23;
  llvm::Pass *v24;
  llvm::Pass *v25;
  _QWORD *v26;
  void (**v27)(_QWORD *);
  llvm *v28;
  uint64_t (**v29)(llvm *);
  llvm::Pass *LoopSimplifyPass;
  llvm::Pass *v31;
  _QWORD *v32;
  void (**v33)(_QWORD *);
  _QWORD *v34;
  void (**v35)(_QWORD *);
  llvm::Pass *v36;
  llvm::PassRegistry *v37;
  uint64_t v38;
  llvm::Pass *v40;
  uint64_t (**v41)(llvm *);
  llvm::Pass *VerifierPass;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  _QWORD v47[3];
  _QWORD *v48;
  _QWORD v49[3];
  _QWORD *v50;
  _QWORD v51[3];
  _QWORD *v52;
  _QWORD v53[3];
  llvm *v54;
  _QWORD v55[3];
  llvm *v56;
  _QWORD v57[3];
  _QWORD *v58;
  _QWORD v59[3];
  _QWORD *v60;
  _QWORD v61[3];
  _QWORD *v62;
  _QWORD v63[3];
  _QWORD *v64;
  _QWORD v65[3];
  _QWORD *v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 112);
  if (byte_1ED7EE468)
  {
    v40 = (llvm::Pass *)sub_1C61590C8(*(_QWORD *)(a1 + 112));
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v40);
  }
  CodeGenPreparePass = (llvm::Pass *)llvm::createCodeGenPreparePass((llvm *)1);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, CodeGenPreparePass);
  v4 = (llvm::Pass *)sub_1C627DD50(*(_QWORD *)(a1 + 112));
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v4);
  if (!byte_1ED7EE168)
  {
    v6 = (llvm::Pass *)sub_1C627D95C();
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v6);
  }
  LowerSwitchPass = (llvm::Pass *)llvm::createLowerSwitchPass(v5);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, LowerSwitchPass);
  if (*(_BYTE *)(v2 + 1696))
  {
    v8 = (llvm::Pass *)sub_1C628024C();
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v8);
  }
  v65[0] = &off_1E7FB2E40;
  v65[1] = a1;
  v66 = v65;
  v63[0] = &off_1E7FB2E88;
  v63[1] = a1;
  v64 = v63;
  v61[0] = &off_1E7FB2ED0;
  v61[1] = a1;
  v62 = v61;
  v59[0] = &off_1E7FB2F18;
  v59[1] = a1;
  v60 = v59;
  v57[0] = &off_1E7FB2F60;
  v58 = v57;
  v9 = (llvm::Pass *)sub_1C6282A28(v65, v63, v61, v59, v57, 2, 1);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v9);
  v10 = v58;
  if (v58 == v57)
  {
    v11 = (void (**)(_QWORD *))(v57[0] + 32);
    v10 = v57;
LABEL_9:
    (*v11)(v10);
    goto LABEL_10;
  }
  if (v58)
  {
    v11 = (void (**)(_QWORD *))(*v58 + 40);
    goto LABEL_9;
  }
LABEL_10:
  v12 = v60;
  if (v60 == v59)
  {
    v13 = (void (**)(_QWORD *))(v59[0] + 32);
    v12 = v59;
LABEL_12:
    (*v13)(v12);
    goto LABEL_13;
  }
  if (v60)
  {
    v13 = (void (**)(_QWORD *))(*v60 + 40);
    goto LABEL_12;
  }
LABEL_13:
  v14 = v62;
  if (v62 == v61)
  {
    v15 = (void (**)(_QWORD *))(v61[0] + 32);
    v14 = v61;
LABEL_15:
    (*v15)(v14);
    goto LABEL_16;
  }
  if (v62)
  {
    v15 = (void (**)(_QWORD *))(*v62 + 40);
    goto LABEL_15;
  }
LABEL_16:
  v16 = v64;
  if (v64 == v63)
  {
    v17 = (void (**)(_QWORD *))(v63[0] + 32);
    v16 = v63;
LABEL_18:
    (*v17)(v16);
    goto LABEL_19;
  }
  if (v64)
  {
    v17 = (void (**)(_QWORD *))(*v64 + 40);
    goto LABEL_18;
  }
LABEL_19:
  v18 = v66;
  if (v66 == v65)
  {
    v19 = (void (**)(_QWORD *))(v65[0] + 32);
    v18 = v65;
LABEL_21:
    (*v19)(v18);
    goto LABEL_22;
  }
  if (v66)
  {
    v19 = (void (**)(_QWORD *))(*v66 + 40);
    goto LABEL_21;
  }
LABEL_22:
  v43 = 1;
  v44 = 0x101000101010001;
  v45 = 0;
  v46 = 0;
  v56 = 0;
  CFGSimplificationPass = (llvm::Pass *)llvm::createCFGSimplificationPass((uint64_t)&v43, v55);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, CFGSimplificationPass);
  v21 = v56;
  if (v56 == (llvm *)v55)
  {
    v41 = (uint64_t (**)(llvm *))(v55[0] + 32);
    v21 = (llvm *)v55;
  }
  else
  {
    if (!v56)
      goto LABEL_24;
    v41 = (uint64_t (**)(llvm *))(*(_QWORD *)v56 + 40);
  }
  v21 = (llvm *)(*v41)(v21);
LABEL_24:
  UnifyFunctionExitNodesPass = llvm::createUnifyFunctionExitNodesPass(v21);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, UnifyFunctionExitNodesPass);
  v23 = (llvm::Pass *)sub_1C614E264(*(_QWORD *)(a1 + 112));
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v23);
  v24 = (llvm::Pass *)sub_1C627E3D8(1);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v24);
  v54 = (llvm *)v53;
  v51[0] = &off_1E7FB2FF0;
  v51[1] = a1;
  v52 = v51;
  v53[0] = &off_1E7FB2FA8;
  v25 = (llvm::Pass *)sub_1C614E080(v53, v51);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v25);
  v26 = v52;
  if (v52 == v51)
  {
    v27 = (void (**)(_QWORD *))(v51[0] + 32);
    v26 = v51;
LABEL_26:
    (*v27)(v26);
    goto LABEL_27;
  }
  if (v52)
  {
    v27 = (void (**)(_QWORD *))(*v52 + 40);
    goto LABEL_26;
  }
LABEL_27:
  v28 = v54;
  if (v54 == (llvm *)v53)
  {
    v29 = (uint64_t (**)(llvm *))(v53[0] + 32);
    v28 = (llvm *)v53;
LABEL_29:
    v28 = (llvm *)(*v29)(v28);
    goto LABEL_30;
  }
  if (v54)
  {
    v29 = (uint64_t (**)(llvm *))(*(_QWORD *)v54 + 40);
    goto LABEL_29;
  }
LABEL_30:
  LoopSimplifyPass = (llvm::Pass *)llvm::createLoopSimplifyPass(v28);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, LoopSimplifyPass);
  v49[0] = &off_1E7FB3038;
  v49[1] = a1;
  v50 = v49;
  v47[0] = &off_1E7FB3080;
  v47[1] = a1;
  v48 = v47;
  v31 = (llvm::Pass *)sub_1C627B90C(v49, v47);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v31);
  v32 = v48;
  if (v48 == v47)
  {
    v33 = (void (**)(_QWORD *))(v47[0] + 32);
    v32 = v47;
LABEL_32:
    (*v33)(v32);
    goto LABEL_33;
  }
  if (v48)
  {
    v33 = (void (**)(_QWORD *))(*v48 + 40);
    goto LABEL_32;
  }
LABEL_33:
  v34 = v50;
  if (v50 == v49)
  {
    v35 = (void (**)(_QWORD *))(v49[0] + 32);
    v34 = v49;
LABEL_35:
    (*v35)(v34);
    goto LABEL_36;
  }
  if (v50)
  {
    v35 = (void (**)(_QWORD *))(*v50 + 40);
    goto LABEL_35;
  }
LABEL_36:
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 296))(a1);
  v36 = (llvm::Pass *)sub_1C627E474();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v36);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 112) + 1042) & 8) != 0)
  {
    v38 = operator new();
    *(_QWORD *)(v38 + 8) = 0;
    *(_QWORD *)(v38 + 16) = &llvm::DummyCGSCCPass::ID;
    *(_DWORD *)(v38 + 24) = 3;
    *(_QWORD *)v38 = &off_1E7FA79F0;
    if (!atomic_load(qword_1ED830BC0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    llvm::initializeDummyCGSCCPassPass((llvm *)qword_1ED830BC0[0], v37);
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, (llvm::Pass *)v38);
  }
  if (!*(_BYTE *)(a1 + 129))
  {
    VerifierPass = (llvm::Pass *)llvm::createVerifierPass((llvm *)1);
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, VerifierPass);
  }
}

void sub_1C6155F18(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;

  if (byte_1ED7EE2E8)
  {
    sub_1C61585B4();
    llvm::TargetPassConfig::addPass(a1, v2);
  }
}

uint64_t sub_1C6155F58(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  llvm::Pass *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm *v6;
  llvm::Pass *v8;
  llvm::Pass *AGXPreRAAnalysisPass;

  if (*(_BYTE *)(*((_QWORD *)a1 + 14) + 1666))
  {
    v8 = (llvm::Pass *)sub_1C61590A0();
    llvm::TargetPassConfig::addPass(a1, v8);
  }
  v2 = (llvm::Pass *)sub_1C6153B58();
  llvm::TargetPassConfig::addPass(a1, v2);
  v3 = (llvm::Pass *)sub_1C6153860();
  llvm::TargetPassConfig::addPass(a1, v3);
  v4 = (llvm::Pass *)sub_1C6159710();
  llvm::TargetPassConfig::addPass(a1, v4);
  v5 = (llvm::Pass *)sub_1C614FECC();
  llvm::TargetPassConfig::addPass(a1, v5);
  if (byte_1ED7EE228)
  {
    AGXPreRAAnalysisPass = (llvm::Pass *)llvm::createAGXPreRAAnalysisPass(v6);
    llvm::TargetPassConfig::addPass(a1, AGXPreRAAnalysisPass);
  }
  return 1;
}

uint64_t sub_1C6155FF8(llvm::TargetPassConfig *a1)
{
  int32x2_t *v2;
  uint64_t (***v3)();
  llvm::Pass *GPUSampleSinkPass;
  llvm::Pass *v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  llvm::TargetPassConfig::addPass(a1, &unk_1EF8F6ED0);
  v2 = (int32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)a1 + 14) + 1328) + 176))(*((_QWORD *)a1 + 14) + 1328);
  v3 = sub_1C49FBA6C();
  v7[0] = vrev64_s32(v2[72]);
  GPUSampleSinkPass = (llvm::Pass *)llvm::createGPUSampleSinkPass((uint64_t)v3, 0, v7, 2);
  llvm::TargetPassConfig::addPass(a1, GPUSampleSinkPass);
  v5 = (llvm::Pass *)sub_1C6150264(1);
  llvm::TargetPassConfig::addPass(a1, v5);
  return 0;
}

uint64_t sub_1C61560B0(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  int32x2_t *v3;
  uint64_t (***v4)();
  llvm::Pass *GPUSampleSinkPass;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x1E0C80C00];
  v2 = (llvm::Pass *)sub_1C6150070();
  llvm::TargetPassConfig::addPass(a1, v2);
  v3 = (int32x2_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(*((_QWORD *)a1 + 14) + 1328) + 176))(*((_QWORD *)a1 + 14) + 1328);
  v4 = sub_1C49FBA6C();
  v7[0] = vrev64_s32(v3[72]);
  GPUSampleSinkPass = (llvm::Pass *)llvm::createGPUSampleSinkPass((uint64_t)v4, 0, v7, 2);
  llvm::TargetPassConfig::addPass(a1, GPUSampleSinkPass);
  return 0;
}

void sub_1C6156158(llvm::TargetPassConfig *a1)
{
  llvm::Pass *v2;
  llvm::Pass *v3;

  v2 = (llvm::Pass *)sub_1C6153688();
  llvm::TargetPassConfig::addPass(a1, v2);
  v3 = (llvm::Pass *)sub_1C6150264(0);
  llvm::TargetPassConfig::addPass(a1, v3);
}

uint64_t sub_1C6156194()
{
  return 0;
}

void sub_1C61561A0(llvm::TargetPassConfig *a1)
{
  uint64_t (***v2)();
  llvm::Pass *GPUCFGLoweringPass;
  llvm::Pass *v4;
  llvm::Pass *v5;
  unsigned __int8 v6;
  llvm::Pass *v7;
  llvm::Pass *v8;
  unsigned __int8 v9;
  llvm::Pass *v10;
  llvm::Pass *v11;
  llvm::Pass *v12;
  llvm *v13;
  llvm::Pass *RegUsageInfoCollector;
  llvm::Pass *v15;
  llvm::Pass *v16;
  llvm::Pass *v17;

  v2 = sub_1C49FBA6C();
  GPUCFGLoweringPass = (llvm::Pass *)llvm::createGPUCFGLoweringPass((uint64_t)v2);
  llvm::TargetPassConfig::addPass(a1, GPUCFGLoweringPass);
  v4 = (llvm::Pass *)sub_1C6158C90();
  llvm::TargetPassConfig::addPass(a1, v4);
  v5 = (llvm::Pass *)sub_1C614E910();
  llvm::TargetPassConfig::addPass(a1, v5);
  v6 = atomic_load((unsigned __int8 *)&qword_1ED7EE0D8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE0D8))
  {
    byte_1ED7EE0C9 = 1;
    __cxa_guard_release(&qword_1ED7EE0D8);
  }
  if (byte_1ED7EE0C9 == 1)
  {
    v7 = (llvm::Pass *)sub_1C614E3EC();
    llvm::TargetPassConfig::addPass(a1, v7);
  }
  v8 = (llvm::Pass *)sub_1C615858C();
  llvm::TargetPassConfig::addPass(a1, v8);
  v9 = atomic_load((unsigned __int8 *)&qword_1ED7EE0E0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EE0E0))
  {
    byte_1ED7EE0CA = 1;
    __cxa_guard_release(&qword_1ED7EE0E0);
  }
  if (byte_1ED7EE0CA == 1)
  {
    v10 = (llvm::Pass *)sub_1C6153D20();
    llvm::TargetPassConfig::addPass(a1, v10);
  }
  v11 = (llvm::Pass *)sub_1C614E638();
  llvm::TargetPassConfig::addPass(a1, v11);
  v12 = (llvm::Pass *)sub_1C614EB24();
  llvm::TargetPassConfig::addPass(a1, v12);
  if ((*(_BYTE *)(*((_QWORD *)a1 + 14) + 1042) & 8) != 0)
  {
    RegUsageInfoCollector = (llvm::Pass *)llvm::createRegUsageInfoCollector(v13);
    llvm::TargetPassConfig::addPass(a1, RegUsageInfoCollector);
  }
  v15 = (llvm::Pass *)sub_1C615A4C8();
  llvm::TargetPassConfig::addPass(a1, v15);
  v16 = (llvm::Pass *)sub_1C6152FC4();
  llvm::TargetPassConfig::addPass(a1, v16);
  v17 = (llvm::Pass *)sub_1C6153BE0();
  llvm::TargetPassConfig::addPass(a1, v17);
}

void sub_1C6156318(llvm::TargetPassConfig *a1)
{
  uint64_t v2;
  llvm::Pass *v3;
  uint64_t v4;
  llvm::PassRegistry *v5;
  uint64_t v6;
  llvm::Pass *v8;

  if (*(_BYTE *)(*((_QWORD *)a1 + 14) + 1625))
  {
    v2 = operator new();
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = &unk_1EF8EFAA0;
    *(_DWORD *)(v2 + 24) = 4;
    *(_QWORD *)v2 = &off_1E7FB2890;
    llvm::TargetPassConfig::addPass(a1, (llvm::Pass *)v2);
    v3 = (llvm::Pass *)sub_1C6153C80();
    llvm::TargetPassConfig::addPass(a1, v3);
    v4 = operator new();
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = &unk_1EF8EFAA0;
    *(_DWORD *)(v4 + 24) = 4;
    *(_QWORD *)v4 = &off_1E7FB2890;
    llvm::TargetPassConfig::addPass(a1, (llvm::Pass *)v4);
    if ((*(_BYTE *)(*((_QWORD *)a1 + 14) + 1042) & 8) != 0)
    {
      v6 = operator new();
      *(_QWORD *)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = &llvm::DummyCGSCCPass::ID;
      *(_DWORD *)(v6 + 24) = 3;
      *(_QWORD *)v6 = &off_1E7FA79F0;
      if (!atomic_load(qword_1ED830BC0))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
      llvm::initializeDummyCGSCCPassPass((llvm *)qword_1ED830BC0[0], v5);
      llvm::TargetPassConfig::addPass(a1, (llvm::Pass *)v6);
    }
    v8 = (llvm::Pass *)sub_1C61535E8();
    llvm::TargetPassConfig::addPass(a1, v8);
  }
}

void sub_1C6156478(uint64_t a1)
{
  unsigned int v2;
  _BYTE *v3;
  llvm::Pass *v4;
  llvm *v5;
  llvm::Pass *TypeBasedAAWrapperPass;
  llvm *v7;
  llvm::Pass *ScopedNoAliasAAWrapperPass;
  llvm *v9;
  llvm::Pass *BasicAAWrapperPass;
  llvm *v11;
  llvm::Pass *GPUAAWrapperPass;
  llvm::Pass *v13;
  llvm *v14;
  llvm::Pass *UnifyFunctionExitNodesPass;
  llvm::Pass *v16;
  llvm *v17;
  int v18;
  llvm::Pass *v19;
  llvm::Pass *v20;
  _QWORD *v21;
  void (**v22)(_QWORD *);
  llvm::Pass *v23;
  _QWORD *v24;
  void (**v25)(_QWORD *);
  _QWORD *v26;
  void (**v27)(_QWORD *);
  llvm::Pass *v28;
  llvm *v29;
  llvm::Pass *LoadStoreVectorizerPass;
  llvm::Pass *v31;
  llvm *v32;
  llvm::Pass *DeadCodeEliminationPass;
  llvm::Pass *v34;
  llvm::Pass *v35;
  llvm::Pass *v36;
  llvm::Pass *v37;
  llvm::Pass *v38;
  _QWORD *v39;
  void (**v40)(_QWORD *);
  _QWORD *v41;
  void (**v42)(_QWORD *);
  _QWORD *v43;
  void (**v44)(_QWORD *);
  _QWORD *v45;
  _QWORD *v46;
  void (**v47)(_QWORD *);
  _QWORD *v48;
  void (**v49)(_QWORD *);
  _QWORD *v50;
  void (**v51)(_QWORD *);
  _QWORD *v52;
  void (**v53)(_QWORD *);
  _QWORD *v54;
  void (**v55)(_QWORD *);
  llvm::Pass *v56;
  _QWORD *v57;
  void (**v58)(_QWORD *);
  llvm::Pass *v59;
  llvm::Pass *v60;
  llvm::Pass *VerifierPass;
  llvm::Pass *LowerAtomicPass;
  void (**v63)(_QWORD *);
  _QWORD v64[3];
  _QWORD *v65;
  _QWORD v66[3];
  _QWORD *v67;
  _QWORD v68[3];
  _QWORD *v69;
  _QWORD v70[3];
  _QWORD *v71;
  _QWORD v72[3];
  _QWORD *v73;
  _QWORD v74[3];
  _QWORD *v75;
  _QWORD v76[3];
  _QWORD *v77;
  _QWORD v78[3];
  _QWORD *v79;
  _QWORD v80[3];
  _QWORD *v81;
  _QWORD v82[3];
  _QWORD *v83;
  _QWORD v84[3];
  _QWORD *v85;
  _QWORD v86[3];
  _QWORD *v87;
  _QWORD v88[3];
  _QWORD *v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v2 = sub_1C4A17AE8(*(_QWORD *)(a1 + 112) + 1328);
  if (byte_1ED7EE3A8)
  {
    v60 = (llvm::Pass *)sub_1C627A444(v2 | 0x100000000);
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v60);
  }
  v3 = *(_BYTE **)(a1 + 112);
  v4 = (llvm::Pass *)sub_1C627D1D4(v3[1686]);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v4);
  TypeBasedAAWrapperPass = llvm::createTypeBasedAAWrapperPass(v5);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, TypeBasedAAWrapperPass);
  ScopedNoAliasAAWrapperPass = llvm::createScopedNoAliasAAWrapperPass(v7);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, ScopedNoAliasAAWrapperPass);
  BasicAAWrapperPass = llvm::createBasicAAWrapperPass(v9);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, BasicAAWrapperPass);
  GPUAAWrapperPass = llvm::createGPUAAWrapperPass(v11);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, GPUAAWrapperPass);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F7002, 0, 0);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F6EDD, 0, 0);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F6FB4, 0, 0);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F702A, 0, 0);
  llvm::TargetPassConfig::substitutePass(a1, (uint64_t)&unk_1EF8F6EDA, 0, 0);
  if (!*(_BYTE *)(a1 + 129))
  {
    VerifierPass = (llvm::Pass *)llvm::createVerifierPass((llvm *)1);
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, VerifierPass);
  }
  v13 = (llvm::Pass *)sub_1C6283140();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v13);
  UnifyFunctionExitNodesPass = llvm::createUnifyFunctionExitNodesPass(v14);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, UnifyFunctionExitNodesPass);
  v16 = (llvm::Pass *)sub_1C6280AE8();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v16);
  if (v3[1655])
  {
    LowerAtomicPass = (llvm::Pass *)llvm::createLowerAtomicPass(v17);
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, LowerAtomicPass);
  }
  v18 = v3[1715];
  if (v3[1715])
  {
    v19 = (llvm::Pass *)sub_1C627AAB8();
    llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v19);
    v18 = v3[1715];
  }
  v88[0] = &off_1E7FB30C8;
  v89 = v88;
  v20 = (llvm::Pass *)sub_1C627A944(v88, 1, v18 != 0);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v20);
  v21 = v89;
  if (v89 == v88)
  {
    v22 = (void (**)(_QWORD *))(v88[0] + 32);
    v21 = v88;
LABEL_11:
    (*v22)(v21);
    goto LABEL_12;
  }
  if (v89)
  {
    v22 = (void (**)(_QWORD *))(*v89 + 40);
    goto LABEL_11;
  }
LABEL_12:
  v86[0] = &off_1E7FB3110;
  v86[1] = a1;
  v87 = v86;
  v84[0] = &off_1E7FB3158;
  v85 = v84;
  v23 = (llvm::Pass *)sub_1C62803A8(v86, v84, 1, v3[1717]);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v23);
  v24 = v85;
  if (v85 == v84)
  {
    v25 = (void (**)(_QWORD *))(v84[0] + 32);
    v24 = v84;
LABEL_14:
    (*v25)(v24);
    goto LABEL_15;
  }
  if (v85)
  {
    v25 = (void (**)(_QWORD *))(*v85 + 40);
    goto LABEL_14;
  }
LABEL_15:
  v26 = v87;
  if (v87 == v86)
  {
    v27 = (void (**)(_QWORD *))(v86[0] + 32);
    v26 = v86;
LABEL_17:
    (*v27)(v26);
    goto LABEL_18;
  }
  if (v87)
  {
    v27 = (void (**)(_QWORD *))(*v87 + 40);
    goto LABEL_17;
  }
LABEL_18:
  v28 = (llvm::Pass *)sub_1C627B318();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v28);
  LoadStoreVectorizerPass = (llvm::Pass *)llvm::createLoadStoreVectorizerPass(v29);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, LoadStoreVectorizerPass);
  v31 = (llvm::Pass *)sub_1C627B880();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v31);
  DeadCodeEliminationPass = (llvm::Pass *)llvm::createDeadCodeEliminationPass(v32);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, DeadCodeEliminationPass);
  v34 = (llvm::Pass *)sub_1C627DDEC();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v34);
  v35 = (llvm::Pass *)sub_1C627FA70(v3[1664]);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v35);
  sub_1C627AC5C();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v36);
  v37 = (llvm::Pass *)sub_1C6283540();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v37);
  v82[0] = &off_1E7FB31A0;
  v82[1] = a1;
  v83 = v82;
  v80[0] = &off_1E7FB31E8;
  v80[1] = a1;
  v81 = v80;
  v78[0] = &off_1E7FB3230;
  v78[1] = a1;
  v79 = v78;
  v76[0] = &off_1E7FB3278;
  v76[1] = a1;
  v77 = v76;
  v74[0] = &off_1E7FB32C0;
  v74[1] = a1;
  v75 = v74;
  v73 = 0;
  v70[0] = &off_1E7FB3308;
  v70[1] = a1;
  v71 = v70;
  v69 = v68;
  v66[0] = &off_1E7FB3398;
  v67 = v66;
  v68[0] = &off_1E7FB3350;
  v38 = (llvm::Pass *)sub_1C62813E4(v82, v80, v78, v76, v74, v72, v70, v68, v66, v3[1707], 0);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v38);
  v39 = v67;
  if (v67 == v66)
  {
    v40 = (void (**)(_QWORD *))(v66[0] + 32);
    v39 = v66;
LABEL_20:
    (*v40)(v39);
    goto LABEL_21;
  }
  if (v67)
  {
    v40 = (void (**)(_QWORD *))(*v67 + 40);
    goto LABEL_20;
  }
LABEL_21:
  v41 = v69;
  if (v69 == v68)
  {
    v42 = (void (**)(_QWORD *))(v68[0] + 32);
    v41 = v68;
LABEL_23:
    (*v42)(v41);
    goto LABEL_24;
  }
  if (v69)
  {
    v42 = (void (**)(_QWORD *))(*v69 + 40);
    goto LABEL_23;
  }
LABEL_24:
  v43 = v71;
  if (v71 == v70)
  {
    v44 = (void (**)(_QWORD *))(v70[0] + 32);
    v43 = v70;
LABEL_26:
    (*v44)(v43);
    goto LABEL_27;
  }
  if (v71)
  {
    v44 = (void (**)(_QWORD *))(*v71 + 40);
    goto LABEL_26;
  }
LABEL_27:
  v45 = v73;
  if (v73 == v72)
  {
    v63 = (void (**)(_QWORD *))(v72[0] + 32);
    v45 = v72;
  }
  else
  {
    if (!v73)
      goto LABEL_29;
    v63 = (void (**)(_QWORD *))(*v73 + 40);
  }
  (*v63)(v45);
LABEL_29:
  v46 = v75;
  if (v75 == v74)
  {
    v47 = (void (**)(_QWORD *))(v74[0] + 32);
    v46 = v74;
LABEL_31:
    (*v47)(v46);
    goto LABEL_32;
  }
  if (v75)
  {
    v47 = (void (**)(_QWORD *))(*v75 + 40);
    goto LABEL_31;
  }
LABEL_32:
  v48 = v77;
  if (v77 == v76)
  {
    v49 = (void (**)(_QWORD *))(v76[0] + 32);
    v48 = v76;
LABEL_34:
    (*v49)(v48);
    goto LABEL_35;
  }
  if (v77)
  {
    v49 = (void (**)(_QWORD *))(*v77 + 40);
    goto LABEL_34;
  }
LABEL_35:
  v50 = v79;
  if (v79 == v78)
  {
    v51 = (void (**)(_QWORD *))(v78[0] + 32);
    v50 = v78;
LABEL_37:
    (*v51)(v50);
    goto LABEL_38;
  }
  if (v79)
  {
    v51 = (void (**)(_QWORD *))(*v79 + 40);
    goto LABEL_37;
  }
LABEL_38:
  v52 = v81;
  if (v81 == v80)
  {
    v53 = (void (**)(_QWORD *))(v80[0] + 32);
    v52 = v80;
LABEL_40:
    (*v53)(v52);
    goto LABEL_41;
  }
  if (v81)
  {
    v53 = (void (**)(_QWORD *))(*v81 + 40);
    goto LABEL_40;
  }
LABEL_41:
  v54 = v83;
  if (v83 == v82)
  {
    v55 = (void (**)(_QWORD *))(v82[0] + 32);
    v54 = v82;
LABEL_43:
    (*v55)(v54);
    goto LABEL_44;
  }
  if (v83)
  {
    v55 = (void (**)(_QWORD *))(*v83 + 40);
    goto LABEL_43;
  }
LABEL_44:
  v64[0] = &off_1E7FB33E0;
  v64[1] = a1;
  v65 = v64;
  v56 = (llvm::Pass *)sub_1C627DF14(v64, v3[1664]);
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v56);
  v57 = v65;
  if (v65 == v64)
  {
    v58 = (void (**)(_QWORD *))(v64[0] + 32);
    v57 = v64;
  }
  else
  {
    if (!v65)
      goto LABEL_47;
    v58 = (void (**)(_QWORD *))(*v65 + 40);
  }
  (*v58)(v57);
LABEL_47:
  v59 = (llvm::Pass *)sub_1C627FD58();
  llvm::TargetPassConfig::addPass((llvm::TargetPassConfig *)a1, v59);
}

uint64_t sub_1C6156B10(llvm::TargetPassConfig *a1)
{
  llvm::Pass *GreedyRegisterAllocator;
  _QWORD *v3;
  void (**v4)(_QWORD *);
  llvm::Pass *VirtRegRewriter;
  llvm::Pass *v6;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = &off_1E7FB3428;
  v8[1] = sub_1C4AC8424;
  v9 = v8;
  GreedyRegisterAllocator = (llvm::Pass *)llvm::createGreedyRegisterAllocator(v8);
  llvm::TargetPassConfig::addPass(a1, GreedyRegisterAllocator);
  v3 = v9;
  if (v9 == v8)
  {
    v4 = (void (**)(_QWORD *))(v8[0] + 32);
    v3 = v8;
  }
  else
  {
    if (!v9)
      goto LABEL_4;
    v4 = (void (**)(_QWORD *))(*v9 + 40);
  }
  (*v4)(v3);
LABEL_4:
  VirtRegRewriter = (llvm::Pass *)llvm::createVirtRegRewriter(0);
  llvm::TargetPassConfig::addPass(a1, VirtRegRewriter);
  v6 = (llvm::Pass *)sub_1C614FC4C();
  llvm::TargetPassConfig::addPass(a1, v6);
  return llvm::TargetPassConfig::addRegAssignAndRewriteOptimized(a1);
}

double sub_1C6156BEC()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_QWORD *)v0 = &off_1E7FAD350;
  *(_QWORD *)(v0 + 8) = 0;
  *(_DWORD *)(v0 + 15) = 0;
  *(_QWORD *)(v0 + 24) = v0 + 40;
  *(_DWORD *)(v0 + 36) = 3;
  *(_BYTE *)(v0 + 68) = 0;
  *(_BYTE *)(v0 + 81) = 0;
  return result;
}

uint64_t sub_1C6156C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  if (!v2)
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v2;
  }
  v4 = operator new();
  return sub_1C6152C38(v4, v2);
}

uint64_t sub_1C6156CAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a3 + 96);
  v5 = *(_QWORD *)(v4 + 48);
  if (!v5)
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v4 + 8) + 216))(*(_QWORD *)(v4 + 8), v4 + 128, *(_QWORD *)(a3 + 96));
    *(_QWORD *)(v4 + 48) = v5;
  }
  sub_1C6152C4C(v5, a2);
  return 0;
}

void sub_1C6156D00(llvm::TargetMachine *a1)
{
  sub_1C6156E10(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6156D24(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 1042) >> 3) & 1;
}

void sub_1C6156D34(llvm::TargetPassConfig *a1)
{
  llvm::TargetPassConfig::~TargetPassConfig(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6156D5C()
{
  return 1;
}

void sub_1C6156D64()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6156D78(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C6156D88(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C6156D98(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C6156DA8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C6156DB8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 72))(*(_QWORD *)(a1 + 24));
}

uint64_t sub_1C6156DC8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 80))(*(_QWORD *)(a1 + 24));
}

void sub_1C6156DDC(llvm::ModulePass *a1)
{
  llvm::ModulePass::~ModulePass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C6156E00()
{
  return "Dummy Module Pass";
}

void sub_1C6156E10(llvm::TargetMachine *a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E7FB2558;
  sub_1C614A970((uint64_t)a1 + 2560);
  sub_1C4AC75B8((uint64_t)a1 + 1328);
  v2 = *((_QWORD *)a1 + 165);
  *((_QWORD *)a1 + 165) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::TargetMachine::~TargetMachine(a1);
}

void sub_1C6156E64(__n128 *a1, char **a2, _WORD *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED7EE1A8, 0, 0);
  byte_1ED7EE228 = 0;
  qword_1ED7EE230 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7EE238 = 0;
  qword_1ED7EE1A8 = (uint64_t)&unk_1E819E898;
  qword_1ED7EE240 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EE248 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EE260 = (uint64_t)&qword_1ED7EE248;
  sub_1C4AC8478(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EE1A8);
}

uint64_t sub_1C6156F00(uint64_t a1, __int128 *a2, void *a3, size_t a4, void *a5, size_t a6, __int128 *a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v17;
  __int128 v20[19];

  v17 = operator new();
  sub_1C4843154((uint64_t)v20, a7);
  sub_1C6155558(v17, a1, a2, a3, a4, a5, a6, v20, a8, a9, a10);
  sub_1C48433E8((uint64_t)v20);
  return v17;
}

uint64_t sub_1C6156FD0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1C6156FD8(uint64_t a1, uint64_t a2, llvm::Value *a3, llvm **a4, uint64_t a5)
{
  return sub_1C484388C((uint64_t *)(a1 + 16), a2, a3, a4, a5);
}

uint64_t sub_1C6156FE0()
{
  return 4;
}

uint64_t sub_1C6156FEC()
{
  return 0;
}

uint64_t sub_1C6156FF4()
{
  return 0;
}

uint64_t sub_1C6156FFC()
{
  return 0;
}

uint64_t sub_1C6157004()
{
  return 0;
}

uint64_t sub_1C615700C()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1C6157014()
{
  return 0;
}

uint64_t sub_1C615701C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 64))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
}

uint64_t sub_1C6157030(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 40) + 8) + 72))(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
}

uint64_t sub_1C6157044()
{
  return 0;
}

uint64_t sub_1C615704C()
{
  return 0;
}

uint64_t sub_1C6157054()
{
  return 0;
}

uint64_t sub_1C615705C()
{
  return 0;
}

uint64_t sub_1C6157064(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 1088))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1C6157074(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 1080))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1C6157084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v9[0] = a3;
  v9[1] = a4;
  v10 = a5;
  v11 = a6;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 1064))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), v9, a2, a7, a8);
}

BOOL sub_1C61570D4(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];
  _OWORD v7[2];

  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  return sub_1C6138BE0(a1 + 16, v7, v6);
}

uint64_t sub_1C615710C()
{
  return 1;
}

uint64_t sub_1C6157114()
{
  return 0;
}

uint64_t sub_1C615711C()
{
  return 0;
}

uint64_t sub_1C6157124()
{
  return 0;
}

uint64_t sub_1C615712C()
{
  return 2;
}

uint64_t sub_1C6157134()
{
  return 0;
}

uint64_t sub_1C615713C()
{
  return 0;
}

BOOL sub_1C6157144(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1C4849330((uint64_t *)(a1 + 16), a2, a3);
}

BOOL sub_1C6157150(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1C4849330((uint64_t *)(a1 + 16), a2, a3);
}

uint64_t sub_1C615715C()
{
  return 0;
}

uint64_t sub_1C6157164()
{
  return 0;
}

uint64_t sub_1C615716C()
{
  return 0;
}

uint64_t sub_1C6157174()
{
  return 0;
}

uint64_t sub_1C615717C()
{
  return 0;
}

uint64_t sub_1C6157184()
{
  return 0;
}

uint64_t sub_1C615718C()
{
  return 0;
}

uint64_t sub_1C6157194()
{
  return 0;
}

uint64_t sub_1C615719C()
{
  return 0;
}

uint64_t sub_1C61571A4()
{
  return 0;
}

uint64_t sub_1C61571AC()
{
  return 1;
}

uint64_t sub_1C61571B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  _QWORD v8[2];
  char v9;
  uint64_t v10;

  v8[0] = a3;
  v8[1] = a4;
  v9 = a5;
  v10 = a6;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD *, uint64_t, uint64_t))(**(_QWORD **)(a1 + 40) + 1072))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), v8, a2, a7);
}

uint64_t sub_1C6157200()
{
  return 0;
}

uint64_t sub_1C6157208(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 1144))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1C6157218(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 40) + 1176))(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1C6157228(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 368))(*(_QWORD *)(a1 + 32));
}

BOOL sub_1C6157238(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;

  v3 = sub_1C47A7FD0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 16), a2, 0);
  return v3 && *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v3 + 96) != 0;
}

uint64_t sub_1C615728C(uint64_t a1, llvm::EVT **a2)
{
  uint64_t v3;

  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 40), *(const llvm::DataLayout **)(a1 + 16), a2, (uint64_t)&v3);
  return v3;
}

unint64_t sub_1C61572C0(uint64_t a1)
{
  return sub_1C48493AC(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8));
}

unint64_t sub_1C61572CC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return sub_1C4A967D8(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1C61572D4(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t *a4)
{
  return sub_1C4ACD754(a1 + 8, a2, a3, a4);
}

uint64_t sub_1C61572DC()
{
  return 0;
}

uint64_t sub_1C61572E4()
{
  return 0;
}

double sub_1C61572EC@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(a1 + 16) = 0x800000000;
  *(_DWORD *)(a1 + 56) = 1;
  *(_BYTE *)(a1 + 60) = 0;
  return result;
}

uint64_t sub_1C6157314()
{
  return 0;
}

uint64_t sub_1C615731C()
{
  return 0;
}

uint64_t sub_1C6157324()
{
  return 0;
}

uint64_t sub_1C615732C()
{
  return 0;
}

uint64_t sub_1C6157334(uint64_t a1, unsigned int a2)
{
  return 2 * (a2 < 0x21);
}

BOOL sub_1C6157344(uint64_t a1, uint64_t a2)
{
  return sub_1C4849494(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_1C6157358()
{
  return 1;
}

uint64_t sub_1C6157360()
{
  return 0;
}

uint64_t sub_1C615736C()
{
  return 1;
}

uint64_t sub_1C6157378()
{
  return 0;
}

uint64_t sub_1C6157384()
{
  return 0;
}

uint64_t sub_1C6157390()
{
  return 8;
}

uint64_t sub_1C6157398(uint64_t a1, uint64_t a2)
{
  return a2;
}

const char *sub_1C61573A0(uint64_t a1, int a2)
{
  const char *v2;

  v2 = "Generic::Unknown Register Class";
  if (a2 == 1)
    v2 = "Generic::VectorRC";
  if (a2)
    return v2;
  else
    return "Generic::ScalarRC";
}

uint64_t sub_1C61573CC()
{
  return 32;
}

uint64_t sub_1C61573D8()
{
  return 128;
}

uint64_t sub_1C61573E0()
{
  return 0;
}

uint64_t sub_1C61573E8()
{
  return 0;
}

uint64_t sub_1C61573F0()
{
  return 0;
}

uint64_t sub_1C61573F8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
    return 0x100000000;
  else
    return 0;
}

uint64_t sub_1C6157408()
{
  return 0;
}

uint64_t sub_1C6157410(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 56))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C6157420(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C6157430(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32));
  if ((result & 0xFF00000000) == 0)
    return 0;
  return result;
}

uint64_t sub_1C6157458(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 64))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C6157468(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 88))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C6157478(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 72))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C6157488(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 80))(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1C6157498()
{
  return 1;
}

void sub_1C61574A0(uint64_t a1, int a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  sub_1C4ACB830(a1 + 8, a2, a3, a4, a5);
}

uint64_t sub_1C61574AC(uint64_t a1, uint64_t a2, llvm::Type ***a3, llvm::Type ***a4, unsigned int a5, unsigned int a6, uint64_t a7)
{
  return sub_1C4ACAD88(a1 + 8, a2, a3, a4, a5, a6, a7);
}

unint64_t sub_1C61574B4(uint64_t a1, uint64_t a2, llvm::Type ***a3, uint64_t a4)
{
  return sub_1C61582BC(a1 + 8, a2, a3, a4);
}

uint64_t sub_1C61574BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  llvm::TargetLoweringBase *v4;
  uint64_t v6;

  v4 = *(llvm::TargetLoweringBase **)(a1 + 40);
  if ((*(_DWORD *)(a3 + 8) & 0xFE) == 0x12)
    a3 = **(_QWORD **)(a3 + 16);
  llvm::TargetLoweringBase::getTypeLegalizationCost(v4, *(const llvm::DataLayout **)(a1 + 16), (llvm::EVT **)a3, (uint64_t)&v6);
  return v6;
}

unint64_t sub_1C6157504(uint64_t a1, llvm::FixedVectorType *a2, int a3, llvm::Type *a4, llvm::APIntOps *a5)
{
  return sub_1C61576F0(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1C615750C(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  if (a6)
    return 1;
  else
    return sub_1C4A96648(a1 + 8, a2, a3, a4 | 0x100, a5, 0);
}

uint64_t sub_1C6157540()
{
  return 1;
}

unint64_t sub_1C615754C(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, int a6)
{
  return sub_1C6157BA8(a1 + 8, a2, a3, a4, 1, 0, a6);
}

unint64_t sub_1C6157564(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, unsigned __int8 a6, int a7)
{
  return sub_1C6157BA8(a1 + 8, a2, a3, a6, a5, 1, a7);
}

unint64_t sub_1C6157574(uint64_t a1, int a2, uint64_t a3, unsigned int a4, unsigned int *a5, unint64_t a6, unsigned __int8 a7, unsigned int a8, int a9, char a10, char a11)
{
  return sub_1C4ACD89C(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

unint64_t sub_1C6157598(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1C61577E8(a1 + 8, a2, a3, a4, a5);
}

unint64_t sub_1C61575A0(uint64_t a1, llvm::FixedVectorType **a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1C6157804(a1 + 8, a2, a3, a5);
}

unint64_t sub_1C61575AC(uint64_t a1, int a2, int a3, llvm::FixedVectorType *a4, uint64_t a5, uint64_t a6)
{
  return sub_1C615836C(a1 + 8, a2, a3, a4, a5, a6);
}

uint64_t sub_1C61575B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4AC9E98(a1 + 8, a2, a3);
}

uint64_t sub_1C61575BC()
{
  return 10;
}

uint64_t sub_1C61575C8(uint64_t a1, llvm::EVT **a2)
{
  _DWORD v3[6];

  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 40), *(const llvm::DataLayout **)(a1 + 16), a2, (uint64_t)v3);
  if (v3[2])
    return 0;
  else
    return v3[0];
}

uint64_t sub_1C6157608()
{
  return 0;
}

uint64_t sub_1C6157614()
{
  return 0;
}

uint64_t sub_1C6157620()
{
  return 0;
}

uint64_t sub_1C6157628()
{
  return 0;
}

_QWORD *sub_1C6157630(int a1, llvm::Type *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a8 & 0xFF00000000) != 0)
    return llvm::Type::getIntNTy(this, (llvm::LLVMContext *)(8 * a8));
  else
    return (_QWORD *)(*(_QWORD *)this + 1912);
}

void *sub_1C6157654(int a1, uint64_t a2, llvm::Type *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  return sub_1C6138E7C(a1 + 16, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1C6157664()
{
  return 1;
}

uint64_t sub_1C615766C()
{
  return 1;
}

uint64_t sub_1C6157674()
{
  return 0;
}

uint64_t sub_1C615767C()
{
  return 0;
}

uint64_t sub_1C6157684()
{
  return 1;
}

uint64_t sub_1C615768C()
{
  return 1;
}

uint64_t sub_1C6157694()
{
  return 0;
}

uint64_t sub_1C615769C()
{
  return 0;
}

uint64_t sub_1C61576A4()
{
  return 0;
}

uint64_t sub_1C61576AC(uint64_t a1, llvm::ShuffleVectorInst *a2)
{
  if (*((_BYTE *)a2 + 16) == 60)
    return 4;
  else
    return sub_1C4ACDE94((uint64_t *)(a1 + 16), a2);
}

uint64_t sub_1C61576DC()
{
  return 0x200000001;
}

uint64_t sub_1C61576E8()
{
  return 1;
}

unint64_t sub_1C61576F0(uint64_t a1, llvm::FixedVectorType *this, int a3, llvm::Type *a4, llvm::APIntOps *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  unsigned int v18;

  llvm::FixedVectorType::get(this, a4);
  v11 = v10;
  llvm::FixedVectorType::get(this, (llvm::Type *)((_DWORD)a4 * a3));
  v13 = v12;
  llvm::APIntOps::ScaleBitMask(a5, a4, (llvm::APInt *)&v17);
  v14 = sub_1C4A967D8(a1, v11, (uint64_t)&v17, 0, 1);
  v15 = sub_1C4A967D8(a1, v13, (uint64_t)a5, 1, 0);
  if (v18 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  if (__OFADD__(v14, v15))
    return ((uint64_t)(v14 + v15) >> 63) ^ 0x8000000000000000;
  else
    return v14 + v15;
}

unint64_t sub_1C61577E8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if ((a4 & 0xFF00000000) == 0 || (a4 & 1) != 0)
    return sub_1C6157E8C(a1, a2, (llvm::FixedVectorType **)a3, a5);
  else
    return sub_1C6157DAC(a1, a2, a3);
}

unint64_t sub_1C6157804(uint64_t a1, llvm::FixedVectorType **a2, uint64_t a3, int a4)
{
  uint64_t v4;
  llvm::Type *v5;
  uint64_t v6;
  unsigned int v7;
  llvm::FixedVectorType *v8;
  llvm::FixedVectorType *v9;
  llvm::Type *v10;
  int v11;
  const char *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int64_t v31;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  int64_t v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v50;
  llvm::FixedVectorType *v51;
  unsigned int v52;
  uint64_t v53;
  int v54;
  int v56;
  unint64_t v57;
  int64_t v58;
  int64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62[16];
  unsigned __int8 v63[8];
  uint64_t v64;
  int v65;

  v4 = a3;
  v5 = (llvm::Type *)a2;
  v6 = a1;
  if (((_DWORD)a2[1] & 0xFE) == 0x12)
    v7 = *(unsigned __int8 *)(*(_QWORD *)a2[2] + 8);
  else
    v7 = *((_DWORD *)a2 + 2);
  v8 = a2[3];
  v9 = *(llvm::FixedVectorType **)(a3 + 24);
  LODWORD(v10) = *((_DWORD *)a2 + 8);
  if (v7 >= 7)
    v11 = 53;
  else
    v11 = 54;
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), a2, (uint64_t)v62);
  if (v63[0] - 15 > 0x9B)
  {
    v13 = 1;
  }
  else
  {
    if (v63[0] - 120 <= 0x32)
      llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v12);
    v13 = sub_1C47F381C(v63);
  }
  v14 = __clz(v10);
  if (v10 <= v13)
  {
    v57 = 0;
    v59 = 0;
    v15 = 0;
  }
  else
  {
    v50 = v14;
    v15 = 0;
    v16 = 0;
    v51 = v8;
    v17 = 0;
    v53 = v6;
    v18 = (uint64_t)v5;
    v19 = 0;
    v54 = v11;
    v52 = v13;
    v20 = v6;
    do
    {
      v58 = v17;
      v56 = v15;
      v21 = v18;
      v10 = (llvm::Type *)(v10 >> 1);
      llvm::FixedVectorType::get(v51, v10);
      v18 = v22;
      llvm::FixedVectorType::get(v9, v10);
      v4 = v23;
      sub_1C4ACB830(v20, 5, v21, 0, 0);
      if (__OFADD__(v19, v24))
        v19 = ((uint64_t)(v19 + v24) >> 63) ^ 0x8000000000000000;
      else
        v19 += v24;
      v25 = v16;
      v26 = sub_1C4ACB518(v20, v54, v18, v4, 42, a4);
      v28 = v27;
      v29 = sub_1C4ACB518(v20, 57, v18, v4, 42, a4);
      v31 = v26 + v29;
      if (__OFADD__(v26, v29))
        v31 = (v31 >> 63) ^ 0x8000000000000000;
      if (v28 == 1 || v30 == 1)
        v16 = 1;
      else
        v16 = v25;
      v33 = __OFADD__(v58, v31);
      v17 = v58 + v31;
      if (v33)
        v17 = (v17 >> 63) ^ 0x8000000000000000;
      v15 = v56 - 1;
    }
    while (v10 > v52);
    v57 = v19;
    v59 = v17;
    v6 = v53;
    v11 = v54;
    v5 = (llvm::Type *)v18;
    v14 = v50;
  }
  v34 = v15 - v14 + 31;
  sub_1C4ACB830(v6, 7, (uint64_t)v5, 0, 0);
  v60 = v35;
  v61 = v36;
  v64 = v34;
  v65 = 0;
  sub_1C4848B64((uint64_t)&v64, (uint64_t)&v60);
  v37 = v64;
  v38 = sub_1C4ACB518(v6, v11, (uint64_t)v5, v4, 42, a4);
  v40 = v39;
  v41 = sub_1C4ACB518(v6, 57, (uint64_t)v5, v4, 42, a4);
  v42 = v40 & 0xFFFFFFFF00000000 | 1;
  if (v43 != 1)
    v42 = v40;
  v44 = v38 + v41;
  if (__OFADD__(v38, v41))
    v44 = ((v38 + v41) >> 63) ^ 0x8000000000000000;
  v60 = v44;
  v61 = v42;
  v64 = v34;
  v65 = 0;
  sub_1C4848B64((uint64_t)&v64, (uint64_t)&v60);
  if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12)
    v5 = (llvm::Type *)**((_QWORD **)v5 + 2);
  v45 = v57 + v37;
  if (__OFADD__(v57, v37))
    v45 = ((uint64_t)(v57 + v37) >> 63) ^ 0x8000000000000000;
  v46 = v59 + v64;
  if (__OFADD__(v59, v64))
    v46 = (v46 >> 63) ^ 0x8000000000000000;
  v33 = __OFADD__(v45, v46);
  v47 = v45 + v46;
  if (v33)
    v48 = (v47 >> 63) ^ 0x8000000000000000;
  else
    v48 = v47;
  llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v6 + 32), *(const llvm::DataLayout **)(v6 + 8), (llvm::EVT **)v5, (uint64_t)&v64);
  if (__OFADD__(v48, v64))
    return ((uint64_t)(v48 + v64) >> 63) ^ 0x8000000000000000;
  else
    return v48 + v64;
}

unint64_t sub_1C6157BA8(uint64_t a1, int a2, uint64_t a3, unsigned __int8 a4, int a5, int a6, int a7)
{
  llvm::FixedVectorType *v13;
  uint64_t v14;
  llvm::EVT **v15;
  llvm::Type *v16;
  unint64_t v17;
  llvm::Type *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  llvm::Type *v23;
  unint64_t v24;
  llvm::Type *v25;
  uint64_t v26;
  llvm::EVT **v27;
  uint64_t v28;
  _BOOL8 v29;
  BOOL v30;
  uint64_t v31;
  llvm::Type *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v36;
  unint64_t v37;
  llvm::Type *v38;
  unint64_t v39;

  if (a6)
  {
    v13 = (llvm::FixedVectorType *)llvm::PointerType::get(*(llvm::PointerType **)(a3 + 24), 0);
    llvm::FixedVectorType::get(v13, (llvm::Type *)*(unsigned int *)(a3 + 32));
    v15 = (llvm::EVT **)v14;
    if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
      v15 = **(llvm::EVT ****)(v14 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v15, (uint64_t)&v38);
    v16 = v38;
    v17 = v39;
  }
  else
  {
    v16 = 0;
    v17 = 0;
  }
  v18 = (llvm::Type *)*(unsigned int *)(a3 + 32);
  v19 = sub_1C4A96648(a1, a2, *(_QWORD *)(a3 + 24), a4 | 0x100, 0, a7);
  v20 = v17 & 0xFFFFFFFF00000000 | 1;
  if (v21 != 1)
    v20 = v17;
  v22 = (unint64_t)v16 + v19;
  if (__OFADD__(v16, v19))
    v22 = ((uint64_t)((uint64_t)v16 + v19) >> 63) ^ 0x8000000000000000;
  v36 = v22;
  v37 = v20;
  v38 = v18;
  LODWORD(v39) = 0;
  sub_1C4848B64((uint64_t)&v38, (uint64_t)&v36);
  v23 = v38;
  v24 = sub_1C6152EC8(a1, a3, a2 != 33, a2 == 33);
  if (a5)
  {
    v25 = (llvm::Type *)*(unsigned int *)(a3 + 32);
    llvm::FixedVectorType::get((llvm::FixedVectorType *)(**(_QWORD **)a3 + 1888), v25);
    v27 = (llvm::EVT **)v26;
    if ((*(_DWORD *)(v26 + 8) & 0xFE) == 0x12)
      v27 = **(llvm::EVT ****)(v26 + 16);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), v27, (uint64_t)&v38);
    v28 = (uint64_t)v38 + 1;
    if (__OFADD__(v38, 1))
      v28 = 0x7FFFFFFFFFFFFFFFLL;
    v29 = a7 == 0;
    v30 = __OFADD__(v28, v29);
    v31 = v28 + v29;
    if (v30)
      v31 = 0x7FFFFFFFFFFFFFFFLL;
    v36 = v31;
    v37 = v39;
    v38 = v25;
    LODWORD(v39) = 0;
    sub_1C4848B64((uint64_t)&v38, (uint64_t)&v36);
    v32 = v38;
  }
  else
  {
    v32 = 0;
  }
  v33 = (unint64_t)v23 + v24;
  if (__OFADD__(v23, v24))
    v33 = ((uint64_t)((uint64_t)v23 + v24) >> 63) ^ 0x8000000000000000;
  v30 = __OFADD__(v33, v32);
  v34 = (uint64_t)v32 + v33;
  if (v30)
    return (v34 >> 63) ^ 0x8000000000000000;
  else
    return v34;
}

unint64_t sub_1C6157DAC(uint64_t a1, int a2, uint64_t a3)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];
  uint64_t v11;
  int v12;

  if (*(_BYTE *)(a3 + 8) == 19)
    return 0;
  v7 = sub_1C6152EC8(a1, a3, 0, 1);
  sub_1C4ACA7DC(a1, a2);
  v10[0] = v8;
  v10[1] = v9;
  v11 = *(unsigned int *)(a3 + 32);
  v12 = 0;
  sub_1C4848B64((uint64_t)v10, (uint64_t)&v11);
  if (__OFADD__(v7, v10[0]))
    return ((uint64_t)(v7 + v10[0]) >> 63) ^ 0x8000000000000000;
  else
    return v7 + v10[0];
}

unint64_t sub_1C6157E8C(uint64_t a1, int a2, llvm::FixedVectorType **a3, uint64_t a4)
{
  llvm::Type *v5;
  uint64_t v7;
  llvm::FixedVectorType *v8;
  llvm::Type *v9;
  BOOL v10;
  const char *v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  llvm::Type *v18;
  llvm::Type *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  llvm::Type ***v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[16];
  unsigned __int8 v47[8];
  uint64_t v48;
  int v49;

  v5 = (llvm::Type *)a3;
  v7 = a1;
  v8 = a3[3];
  LODWORD(v9) = *((_DWORD *)a3 + 8);
  if ((a2 & 0xFFFFFFFE) == 0x1C
    && (v8 == (llvm::FixedVectorType *)(*(_QWORD *)*a3 + 1888) ? (v10 = v9 >= 2) : (v10 = 0), v10))
  {
    v36 = (llvm::Type ***)llvm::IntegerType::get(*a3, (llvm::LLVMContext *)*((unsigned int *)a3 + 8));
    v37 = sub_1C4ACAD88(v7, 49, v36, (llvm::Type ***)v5, 0, a4, 0);
    sub_1C4774CC4(v36);
    v39 = sub_1C4ACB518(v7, 53, (uint64_t)v36, v38, 42, a4);
    v33 = __OFADD__(v37, v39);
    v34 = v37 + v39;
  }
  else
  {
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(a1 + 32), *(const llvm::DataLayout **)(a1 + 8), a3, (uint64_t)v46);
    if (v47[0] - 15 > 0x9B)
    {
      v12 = 1;
    }
    else
    {
      if (v47[0] - 120 <= 0x32)
        llvm::reportInvalidSizeRequest((llvm *)"Possible incorrect use of MVT::getVectorNumElements() for scalable vector. Scalable flag may be dropped, use MVT::getVectorElementCount() instead", v11);
      v12 = sub_1C47F381C(v47);
    }
    v13 = __clz(v9);
    if (v9 <= v12)
    {
      v23 = a2;
      v16 = 0;
      v15 = 0;
      v14 = 0;
    }
    else
    {
      v40 = v13;
      v43 = a2;
      v14 = 0;
      v42 = v7;
      v15 = 0;
      v16 = 0;
      v41 = v12;
      do
      {
        v17 = a4;
        v18 = v5;
        v9 = (llvm::Type *)(v9 >> 1);
        llvm::FixedVectorType::get(v8, v9);
        v5 = v19;
        v20 = (uint64_t)v18;
        a4 = v17;
        sub_1C4ACB830(v42, 5, v20, 0, 0);
        if (__OFADD__(v16, v21))
          v16 = ((uint64_t)(v16 + v21) >> 63) ^ 0x8000000000000000;
        else
          v16 += v21;
        sub_1C4ACA7DC(v42, v43);
        if (__OFADD__(v15, v22))
          v15 = ((uint64_t)(v15 + v22) >> 63) ^ 0x8000000000000000;
        else
          v15 += v22;
        --v14;
      }
      while (v9 > v41);
      v23 = v43;
      v7 = v42;
      v13 = v40;
    }
    v24 = v14 - v13 + 31;
    sub_1C4ACB830(v7, 7, (uint64_t)v5, 0, 0);
    v44 = v25;
    v45 = v26;
    v48 = v24;
    v49 = 0;
    sub_1C4848B64((uint64_t)&v48, (uint64_t)&v44);
    if (__OFADD__(v16, v48))
      v27 = ((uint64_t)(v16 + v48) >> 63) ^ 0x8000000000000000;
    else
      v27 = v16 + v48;
    sub_1C4ACA7DC(v7, v23);
    v44 = v28;
    v45 = v29;
    v48 = v24;
    v49 = 0;
    sub_1C4848B64((uint64_t)&v48, (uint64_t)&v44);
    v30 = v15 + v48;
    if (__OFADD__(v15, v48))
      v30 = ((uint64_t)(v15 + v48) >> 63) ^ 0x8000000000000000;
    v33 = __OFADD__(v27, v30);
    v31 = v27 + v30;
    if (v33)
      v32 = (v31 >> 63) ^ 0x8000000000000000;
    else
      v32 = v31;
    if ((*((_DWORD *)v5 + 2) & 0xFE) == 0x12)
      v5 = (llvm::Type *)**((_QWORD **)v5 + 2);
    llvm::TargetLoweringBase::getTypeLegalizationCost(*(llvm::TargetLoweringBase **)(v7 + 32), *(const llvm::DataLayout **)(v7 + 8), (llvm::EVT **)v5, (uint64_t)&v48);
    v33 = __OFADD__(v32, v48);
    v34 = v32 + v48;
  }
  if (v33)
    return (v34 >> 63) ^ 0x8000000000000000;
  else
    return v34;
}

unint64_t sub_1C615820C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  unint64_t v10;
  unint64_t v11;

  v10 = sub_1C6152EC8(a1, a2, 1, 0);
  if (a4)
    v11 = sub_1C4ACD754(a1, a3, a4, a5);
  else
    v11 = sub_1C6152EC8(a1, a2, 0, 1);
  if (__OFADD__(v10, v11))
    return ((uint64_t)(v10 + v11) >> 63) ^ 0x8000000000000000;
  else
    return v10 + v11;
}

unint64_t sub_1C61582BC(uint64_t a1, uint64_t a2, llvm::Type ***a3, uint64_t a4)
{
  llvm::TargetLoweringBase *v8;
  llvm::EVT **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v8 = *(llvm::TargetLoweringBase **)(a1 + 32);
  v9 = (llvm::EVT **)a4;
  if ((*(_DWORD *)(a4 + 8) & 0xFE) == 0x12)
    v9 = **(llvm::EVT ****)(a4 + 16);
  llvm::TargetLoweringBase::getTypeLegalizationCost(v8, *(const llvm::DataLayout **)(a1 + 8), v9, (uint64_t)&v13);
  v10 = v13;
  v11 = sub_1C4ACAD88(a1, a2, a3, *(llvm::Type ****)(a4 + 24), 0, 0, 0);
  if (__OFADD__(v10, v11))
    return ((v10 + v11) >> 63) ^ 0x8000000000000000;
  else
    return v10 + v11;
}

unint64_t sub_1C615836C(uint64_t a1, int a2, int a3, llvm::FixedVectorType *a4, uint64_t a5, uint64_t a6)
{
  llvm::FixedVectorType **v11;
  llvm::Type ***v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  int v23;

  llvm::VectorType::get(a4, (llvm::Type *)(*(unsigned int *)(a5 + 32) | ((unint64_t)(*(_BYTE *)(a5 + 8) == 19) << 32)));
  v12 = (llvm::Type ***)v11;
  v13 = sub_1C6157E8C(a1, 13, v11, a6);
  if (a3)
    v14 = 39;
  else
    v14 = 40;
  v15 = sub_1C4ACAD88(a1, v14, v12, (llvm::Type ***)a5, 0, a6, 0);
  v21[0] = v15;
  v21[1] = v16;
  if (a2)
  {
    sub_1C4ACA7DC(a1, 17);
    v18 = v17;
    v22 = 2;
    v23 = 0;
    sub_1C4848B64((uint64_t)v21, (uint64_t)&v22);
    v15 = v21[0];
  }
  else
  {
    v18 = 0;
  }
  v19 = v13 + v18;
  if (__OFADD__(v13, v18))
    v19 = ((uint64_t)(v13 + v18) >> 63) ^ 0x8000000000000000;
  if (__OFADD__(v19, v15))
    return ((uint64_t)(v19 + v15) >> 63) ^ 0x8000000000000000;
  else
    return v19 + v15;
}

void sub_1C61584C8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C61584DC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E7FB3428;
  result[1] = v3;
  return result;
}

uint64_t sub_1C6158510(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E7FB3428;
  a2[1] = v2;
  return result;
}

void sub_1C615852C(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EE570);
  if (v1 != -1)
  {
    v4[0] = sub_1C4ACEDD8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EE570, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C615858C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4ACEE7C(v0);
}

double sub_1C61585B4()
{
  uint64_t v0;
  _QWORD *v1;
  double result;

  v0 = operator new();
  v1 = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EFAA8);
  *v1 = &off_1E7FB3530;
  v1[31] = v1 + 33;
  *(_QWORD *)&result = 0xA00000000;
  v1[32] = 0xA00000000;
  return result;
}

BOOL sub_1C6158608(uint64_t a1)
{
  unsigned __int8 v1;
  unsigned __int16 *v2;
  _BOOL8 result;
  unsigned int v4;
  int v5;
  uint64_t v6;

  v1 = atomic_load((unsigned __int8 *)&qword_1EF8F6688);
  if ((v1 & 1) == 0)
  {
    v6 = a1;
    v5 = __cxa_guard_acquire(&qword_1EF8F6688);
    a1 = v6;
    if (v5)
    {
      byte_1EF8F6680 = 1;
      __cxa_guard_release(&qword_1EF8F6688);
      a1 = v6;
    }
  }
  v2 = *(unsigned __int16 **)(a1 + 16);
  if ((v2[10] & 4) == 0)
    return 0;
  v4 = sub_1C4C91598(*v2);
  result = 0;
  if (v4 <= 0x29)
  {
    if (((1 << v4) & 0x10870) != 0)
    {
      return 1;
    }
    else if (((1 << v4) & 0x30030000000) != 0)
    {
      return byte_1EF8F6680 != 0;
    }
  }
  return result;
}

BOOL sub_1C61586E8(uint64_t a1)
{
  unsigned __int16 *v1;
  unsigned int v4;
  unsigned int v6;
  uint64_t v7;
  unint64_t v8;

  v1 = *(unsigned __int16 **)(a1 + 16);
  if ((v1[10] & 4) == 0 || **(_BYTE **)(a1 + 32))
    return 0;
  v4 = sub_1C4C91598(*v1);
  if (v4 <= 0x29 && ((1 << v4) & 0x30030000000) != 0)
    return 1;
  if (v4 != 196)
    return 0;
  v6 = sub_1C4C2FD5C(**(unsigned __int16 **)(a1 + 16));
  v7 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v7 + 32 * v6 + 16) != 8)
    return 0;
  v8 = *(unsigned int *)(v7 + 4);
  return (v8 - 1) > 0x826 || ((byte_1C6A002DC[v8 >> 3] >> (v8 & 7)) & 1) == 0;
}

BOOL sub_1C61587B4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  int v5;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 20) & 4) == 0)
    return 0;
  v5 = sub_1C4AD4FB8(a1, a2, (_QWORD *)(a3 + 8));
  if ((v5 - 1) < 2)
    return 1;
  if (v5 != 3 || sub_1C4C91598(**(unsigned __int16 **)(a1 + 16)) != 147)
    return 0;
  return *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32 * sub_1C4C2FD5C(**(unsigned __int16 **)(a1 + 16))) == 0;
}

void sub_1C6158840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  unsigned int v16;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 20) & 4) != 0)
  {
    v4 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v4)
    {
      v7 = 0;
      while (1)
      {
        if (sub_1C61587B4(a1, v7, a2))
        {
          v8 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 32 * v7 + 4);
          v9 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 112) + 2 * v8);
          v10 = sub_1C49E1960(a2, v8);
          if (v10 >= 0x10)
            break;
        }
LABEL_9:
        if (++v7 == v4)
          return;
      }
      v11 = v9 >> 1;
      v12 = v9 + (v10 >> 4);
      while (1)
      {
        v16 = v11;
        v13 = *(_QWORD *)(a3 + 24);
        if (!v13)
          break;
        (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)v13 + 48))(v13, &v16);
        v9 += 2;
        ++v11;
        if (v9 >= v12)
          goto LABEL_9;
      }
      sub_1C485C2F0();
      sub_1C6158918(v14, v15);
    }
  }
}

void sub_1C6158918(int *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  uint64_t i;
  unsigned int v6;

  sub_1C4C91598(a1[4]);
  v4 = 0;
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  for (i = 16; i != 32; i += 4)
  {
    v6 = sub_1C4C2FD5C(*((unsigned __int16 *)a1 + 8));
    if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 32 * v6))
    {
      if (v4 >= *(_DWORD *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v4 + 1, 4);
        v4 = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v4) = v6;
      v4 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v4;
    }
  }
}

BOOL sub_1C6158A54(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5)
{
  int v5;
  void *v7;
  int v8;
  _QWORD v9[5];

  v9[4] = *MEMORY[0x1E0C80C00];
  sub_1C4AD662C(a1, a2, a3, a4, a5, &v7);
  v5 = v8;
  if (v7 != v9)
    free(v7);
  return v5 != 0;
}

void *sub_1C6158AD0(_DWORD *a1, unsigned int a2)
{
  void *v2;
  size_t v3;
  uint64_t v5;
  int v6;
  size_t v7;
  _DWORD *v8;

  if (a2 > 0x10)
  {
    *a1 &= ~1u;
    v5 = a2;
    v7 = 4 * a2;
    v8 = a1;
    v2 = operator new(v7, (std::align_val_t)4uLL);
    a1 = v8;
    *((_QWORD *)v8 + 1) = v2;
    *((_QWORD *)v8 + 2) = v5;
    v6 = *v8;
    *(_QWORD *)v8 = *v8 & 1;
    if ((v6 & 1) == 0)
    {
      v3 = v7;
      return memset(v2, 255, v3);
    }
  }
  else
  {
    *(_QWORD *)a1 = 1;
  }
  v2 = a1 + 2;
  v3 = 64;
  return memset(v2, 255, v3);
}

_DWORD *sub_1C6158B5C(_DWORD *result, unsigned int a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;

  v5 = result;
  v6 = result[2];
  if (v6 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 8);
    LODWORD(v6) = v5[2];
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = a2 | (unint64_t)(a3 << 32);
  ++v5[2];
  return result;
}

_DWORD *sub_1C6158BCC(_DWORD *result)
{
  _DWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  void *v6;
  size_t v7;

  v1 = result;
  v2 = *result;
  v3 = __clz((*result >> 1) - 1);
  if (v3 == 28)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 0x11)
  {
    *(_QWORD *)result = 1;
    v6 = result + 2;
    v7 = 64;
    return memset(v6, 255, v7);
  }
  if ((v2 & 1) != 0)
    return sub_1C6158AD0(v1, v5);
  if (v5 != result[4])
  {
    MEMORY[0x1CAA32FB4](*((_QWORD *)result + 1), 4);
    return sub_1C6158AD0(v1, v5);
  }
  *(_QWORD *)result = 0;
  if (v5)
  {
    v6 = (void *)*((_QWORD *)result + 1);
    v7 = 4 * v5;
    return memset(v6, 255, v7);
  }
  return result;
}

_QWORD *sub_1C6158C90()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F66A8);
  *result = &off_1E7FB35F0;
  return result;
}

void sub_1C6158CD0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EE588);
  if (v1 != -1)
  {
    v4[0] = sub_1C4AD81F4;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EE588, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void *sub_1C6158D30(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7108);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7108);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7110);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7110);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C6158DBC(uint64_t a1)
{
  llvm::PassRegistry *v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (llvm::PassRegistry *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EE580);
  *(_QWORD *)v2 = &off_1E7FB36B0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  v3 = atomic_load(&qword_1ED7EE588);
  if (v3 != -1)
  {
    v7[0] = sub_1C4AD81F4;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED7EE588, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C6158E54()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6158E6C(llvm::Pass *a1)
{
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6158E90()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6158DBC(v0);
}

void sub_1C6158EB8(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EE718);
  if (v1 != -1)
  {
    v4[0] = sub_1C4ADC260;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EE718, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void *sub_1C6158F18(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::addRequiredID(this, (char *)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7108);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7108);
  llvm::AnalysisUsage::addRequiredID(this, byte_1EF8F7110);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)byte_1EF8F7110);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C6158FA4(uint64_t a1)
{
  llvm::PassRegistry *v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  v2 = (llvm::PassRegistry *)sub_1C4776848(a1, (uint64_t)&unk_1ED7EE710);
  *(_QWORD *)v2 = &off_1E7FB3798;
  PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  v3 = atomic_load(&qword_1ED7EE718);
  if (v3 != -1)
  {
    v7[0] = sub_1C4ADC260;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED7EE718, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C615903C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6159054(llvm::Pass *a1)
{
  sub_1C4926674(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6159078()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6158FA4(v0);
}

uint64_t sub_1C61590A0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4ADF8B0(v0);
}

uint64_t sub_1C61590C8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  return sub_1C4AFC2A4(v2, a1);
}

uint64_t sub_1C6159104(int32x2_t *a1, char *a2)
{
  uint64_t result;
  char *v5;
  int64_t v6;
  _QWORD *v7;

  v7 = 0;
  result = sub_1C4A06ED8((uint64_t)a1, a2, &v7);
  if ((_DWORD)result)
  {
    *v7 = -8192;
    a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  }
  v5 = (char *)a1[4];
  v6 = v5 - (a2 + 8);
  if (v5 != a2 + 8)
    result = (uint64_t)memmove(a2, a2 + 8, v5 - (a2 + 8));
  a1[4] = (int32x2_t)&a2[v6];
  return result;
}

unint64_t *sub_1C6159188(unint64_t *a1)
{
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    *a1 = v2 & 0xFC00000000000000 | (2 * ~(-1 << (v2 >> 58))) | 1;
  }
  else
  {
    v3 = *(_QWORD **)v2;
    v4 = *(unsigned int *)(v2 + 8);
    if ((_DWORD)v4)
      memset(*(void **)v2, 255, 8 * v4);
    if ((*(_DWORD *)(v2 + 64) & 0x3F) != 0)
      v3[v4 - 1] &= ~(-1 << (*(_DWORD *)(v2 + 64) & 0x3F));
  }
  return a1;
}

void sub_1C615921C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int a5, int a6)
{
  uint64_t *v12;
  uint64_t GlobalVariable;
  llvm::GlobalValue *v14;
  int8x8_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  int v21;
  int8x8_t v22;
  int v23;
  int v24;
  int8x8_t v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t (**v30)();
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v12 = *(uint64_t **)(a2 + 32);
  GlobalVariable = llvm::Module::getGlobalVariable(*(_QWORD *)(*v12 + 40), (unsigned __int8 *)off_1E7FB3C38[a4 - 1], qword_1C677F500[a4 - 1], 0);
  if (GlobalVariable)
  {
    v14 = (llvm::GlobalValue *)GlobalVariable;
    v30 = &off_1E816EC08;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    sub_1C5543728(&v30, (uint64_t)v12);
    *(_QWORD *)&v33 = a2;
    *((_QWORD *)&v33 + 1) = a3;
    if (a4 == 1)
    {
      v16 = v12[43];
      v17 = sub_1C4A17AE8(v12[2]);
      v18 = sub_1C5EAB3E0(v14, 0, v16, v17 << 32);
      v19 = sub_1C4AFF798((uint64_t)&v30, a1 + 328, v18);
      v20 = sub_1C4AFE530((uint64_t)&v30, a1 + 328);
      v21 = sub_1C4AFF8B8((uint64_t)&v30, a1 + 328, v20, a5, v19);
      sub_1C4AFF340(a1, &v30, v21, a5, (uint64_t)v14, v22);
      v23 = sub_1C4AFF798((uint64_t)&v30, a1 + 328, 0x20000u);
      v24 = sub_1C4AFFA74((uint64_t)&v30, a1 + 328, v23, v21);
      sub_1C4AFF340(a1, &v30, v24, 32, (uint64_t)v14, v25);
      if (!a6)
        goto LABEL_7;
      v26 = sub_1C4A17AE8(v12[2]);
      a5 = sub_1C5EAB358(v26);
      v27 = sub_1C4AFF798((uint64_t)&v30, a1 + 328, v18 + 0x40000);
      v28 = sub_1C4AFE530((uint64_t)&v30, a1 + 328);
      v29 = sub_1C4AFF8B8((uint64_t)&v30, a1 + 328, v28, a5, v27);
    }
    else
    {
      v29 = *(_DWORD *)(a1 + 504);
    }
    sub_1C4AFF340(a1, &v30, v29, a5, (uint64_t)v14, v15);
LABEL_7:
    v30 = &off_1E816EC08;
    if (*((_QWORD *)&v32 + 1))
      llvm::MetadataTracking::untrack((uint64_t)&v32 + 8, *((unsigned __int8 **)&v32 + 1));
  }
}

uint64_t sub_1C6159428(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t NearestCommonDominator;
  BOOL v17;
  int v19;

  do
  {
    v10 = *(_DWORD *)(a2 + 24);
    if (sub_1C61594FC(*a5, v10, a3))
      break;
    v19 = a3;
    v11 = *(_QWORD *)(a4 + 8592) + 536 * v10;
    if (!sub_1C4B0417C(*(uint64_t **)(v11 + 264), *(_DWORD *)(v11 + 272), a4, &v19))
      return a2;
    v12 = *(uint64_t **)(a2 + 88);
    v13 = *(uint64_t **)(a2 + 96);
    v14 = a2;
    if (v12 == v13)
      break;
    do
    {
      v15 = *v12++;
      NearestCommonDominator = llvm::DominatorTreeBase<llvm::MachineBasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(*(_QWORD *)(a1 + 312) + 248), v14, v15);
      v14 = NearestCommonDominator;
    }
    while (v12 != v13);
    v17 = NearestCommonDominator == a2 || NearestCommonDominator == 0;
    a2 = NearestCommonDominator;
  }
  while (!v17);
  return 0;
}

BOOL sub_1C61594FC(uint64_t a1, int a2, char a3)
{
  unint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8 * a2);
  if ((v3 & 1) != 0)
  {
    if (v3 >> 58)
    {
      v4 = (1 << a3) & (v3 >> 1) & ~(-1 << (v3 >> 58));
      return v4 != 0;
    }
    return 0;
  }
  if (!*(_DWORD *)(v3 + 64))
    return 0;
  v4 = **(_QWORD **)v3 & (1 << a3);
  return v4 != 0;
}

uint64_t sub_1C6159558()
{
  uint64_t v0;
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v13;
  uint64_t v14;
  _QWORD v15[18];
  _QWORD v16[4340];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v6 = v5;
  v7 = v0;
  v16[4339] = *MEMORY[0x1E0C80C00];
  v8 = v0 + 256;
  sub_1C4B041F0((uint64_t)v16, v5, *(_DWORD *)(v0 + 248), *(_QWORD *)(v0 + 320), v0 + 256);
  sub_1C4AFCF04(v16);
  v13 = v15;
  v14 = 0x1000000000;
  v15[16] = v6;
  v15[17] = v8;
  sub_1C4AFD6C8((uint64_t)&v13);
  if ((_DWORD)v4)
    v4 = sub_1C4AFFDE8(v7, 1, (uint64_t)v16, (uint64_t *)&v13);
  if (v2 && *(_BYTE *)(v7 + 508))
    v4 = v4 | sub_1C4AFFDE8(v7, 3, (uint64_t)v16, (uint64_t *)&v13);
  sub_1C4AFE0FC(v7);
  v9 = v13;
  if ((_DWORD)v14)
  {
    v10 = 8 * v14;
    v11 = (char *)v13 - 8;
    do
    {
      sub_1C4914448((void ***)&v11[v10]);
      v10 -= 8;
    }
    while (v10);
    v9 = v13;
  }
  if (v9 != v15)
    free(v9);
  sub_1C4B0456C((uint64_t)v16);
  return v4;
}

void sub_1C61596B0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EFAB8);
  if (v1 != -1)
  {
    v4[0] = sub_1C4B03380;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EFAB8, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C6159710()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6159738(v0);
}

uint64_t sub_1C6159738(uint64_t a1)
{
  llvm::PassRegistry *v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  sub_1C6159DA0(a1);
  PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  v3 = atomic_load(&qword_1EF8EFAB8);
  if (v3 != -1)
  {
    v7[0] = sub_1C4B03380;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1EF8EFAB8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C61597B8(llvm::Pass *a1)
{
  sub_1C4B046AC(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C61597DC(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::AAResultsWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, (char *)&llvm::MachineDominatorTree::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::MachinePostDominatorTree::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::SlotIndexes::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::LiveIntervals::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)llvm::MachineLoopInfo::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

_QWORD *sub_1C61598B0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E7FB3AE8;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E7FB3B50;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C6159930(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FB3B50;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C6159970(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C61599E8(v11);
}

uint64_t sub_1C61599E8(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C6159A00(_QWORD *a1)
{
  sub_1C61598B0(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C6159A24(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C6159A30(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C6159A40(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &off_1E7FB3BA0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C6159AAC(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C6159AB4(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E7FB3B50;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6159B04(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C6159B0C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C6159B20(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C6159B34(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

uint64_t sub_1C6159B48(uint64_t a1, _QWORD *a2, const void *a3, size_t a4, const void *a5, size_t a6, _DWORD *a7)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  llvm::raw_ostream *v15;
  uint64_t result;
  const char *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  _BYTE v21[40];

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
  if (v8)
    a4 = a6;
  if (v8)
    a3 = a5;
  v11 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v11)
  {
    v13 = *(_QWORD *)(a1 + 16);
    while (*(_QWORD *)(v13 + 8) != a4 || a4 && memcmp(*(const void **)v13, a3, a4))
    {
      v13 += 48;
      if (!--v11)
        goto LABEL_13;
    }
    result = 0;
    *a7 = *(_DWORD *)(v13 + 40);
  }
  else
  {
LABEL_13:
    v20 = 1283;
    v19[0] = (uint64_t)"Cannot find option named '";
    v19[2] = (uint64_t)a3;
    v19[3] = a4;
    v17 = "'!";
    v18 = 259;
    v14 = sub_1C4825FE4(v19, (uint64_t *)&v17, (uint64_t)v21);
    v15 = (llvm::raw_ostream *)llvm::errs((llvm *)v14);
    return llvm::cl::Option::error(a2, (llvm::Twine *)v21, 0, 0, v15);
  }
  return result;
}

BOOL sub_1C6159C38(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1C6159C64(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 != a2)
  {
    v5 = *(_QWORD *)a1 + 536 * v4 - 536;
    v6 = 536 * a2 - 536 * v4;
    do
    {
      v7 = *(void **)(v5 + 264);
      if ((void *)(v5 + 280) != v7)
        free(v7);
      if ((*(_BYTE *)v5 & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v5 + 8), 8);
      v5 -= 536;
      v6 += 536;
    }
    while (v6);
  }
  *(_DWORD *)(a1 + 8) = v2;
}

uint64_t sub_1C6159CEC(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int64x2_t v6;

  *(_QWORD *)a1 = 1;
  v4 = a1 + 264;
  v5 = 8;
  v6 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    *(int64x2_t *)(a1 + v5) = v6;
    v5 += 16;
  }
  while (v5 != 264);
  sub_1C4B03E98((unsigned int *)a1, a2);
  *(_QWORD *)(a1 + 264) = a1 + 280;
  *(_QWORD *)(a1 + 272) = 0x2000000000;
  if (a2[68])
    sub_1C4B03F84(v4, (uint64_t)(a2 + 66));
  return a1;
}

uint64_t sub_1C6159D78()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6159738(v0);
}

double sub_1C6159DA0(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = sub_1C4776848(a1, (uint64_t)&unk_1EF8EFAB0);
  *(_QWORD *)v1 = &off_1E7FB3A28;
  *(_QWORD *)(v1 + 280) = 0;
  result = 0.0;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_DWORD *)(v1 + 272) = 0;
  *(_QWORD *)(v1 + 328) = v1 + 344;
  *(_QWORD *)(v1 + 336) = 0x800000000;
  *(_QWORD *)(v1 + 408) = v1 + 440;
  *(_QWORD *)(v1 + 416) = v1 + 440;
  *(_QWORD *)(v1 + 424) = 8;
  *(_DWORD *)(v1 + 432) = 0;
  *(_BYTE *)(v1 + 504) = 0;
  *(_BYTE *)(v1 + 508) = 0;
  *(_OWORD *)(v1 + 512) = 0u;
  *(_QWORD *)(v1 + 528) = v1 + 544;
  *(_QWORD *)(v1 + 536) = 0x800000000;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_DWORD *)(v1 + 624) = 0;
  *(_QWORD *)(v1 + 632) = v1 + 648;
  *(_QWORD *)(v1 + 640) = 0x800000000;
  *(_DWORD *)(v1 + 792) = 0;
  *(_OWORD *)(v1 + 776) = 0u;
  return result;
}

void sub_1C6159E3C(__int128 *a1, uint64_t *a2, int **a3)
{
  sub_1C47AD050((uint64_t)qword_1ED7EE950, 0, 0);
  dword_1ED7EE9D0 = 0;
  qword_1ED7EE9D8 = (uint64_t)&off_1E7FB3BA0;
  *(_QWORD *)&dword_1ED7EE9E0 = 0;
  qword_1ED7EE950[0] = (uint64_t)off_1E7FB3AE8;
  qword_1ED7EE9E8 = (uint64_t)&off_1E7FB3B50;
  qword_1ED7EE9F0 = (uint64_t)qword_1ED7EE950;
  qword_1ED7EE9F8 = (uint64_t)&unk_1ED7EEA08;
  qword_1ED7EEA00 = 0x800000000;
  qword_1ED7EEB88 = (uint64_t)&off_1E7FB3BE0;
  qword_1ED7EEBA0 = (uint64_t)&qword_1ED7EEB88;
  sub_1C4B04754(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED7EE950);
}

void sub_1C6159EE8()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6159EFC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7FB3BE0;
  return result;
}

void sub_1C6159F20(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7FB3BE0;
}

void sub_1C6159F3C(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  _QWORD v11[5];
  int v12;
  char v13;

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = &off_1E7FB3BA0;
  v13 = 1;
  v12 = a3;
  v7 = sub_1C4B047F8((unint64_t)v11);
  v8 = qword_1ED7EE9F8 + 48 * qword_1ED7EEA00;
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 32) = &off_1E7FB3BC0;
  v10 = *(_BYTE *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(_BYTE *)(v8 + 44) = v10;
  *(_QWORD *)(v8 + 32) = &off_1E7FB3BA0;
  LODWORD(qword_1ED7EEA00) = qword_1ED7EEA00 + 1;
  llvm::cl::AddLiteralOption(qword_1ED7EE9F0, a1, a2);
}

void sub_1C6159FF0(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED7EE9F8, a1, 48, &v8);
  v2 = (_OWORD *)qword_1ED7EE9F8;
  if ((_DWORD)qword_1ED7EEA00)
  {
    v3 = qword_1ED7EE9F8 + 48 * qword_1ED7EEA00;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E7FB3BC0;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E7FB3BA0;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1ED7EE9F8;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1ED7EEA08)
    free(v2);
  qword_1ED7EE9F8 = (uint64_t)v1;
  HIDWORD(qword_1ED7EEA00) = v7;
}

_QWORD *sub_1C615A0BC(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = 1 << (33 - __clz((*(_DWORD *)result >> 1) - 1));
  if (*(_DWORD *)result >= 2u)
    v4 = v3;
  else
    v4 = 0;
  if ((v2 & 1) != 0 && v4 < 0x21)
  {
    v5 = result + 33;
    *result = 1;
    v6 = result + 1;
    goto LABEL_7;
  }
  if ((v2 & 1) != 0)
    return sub_1C4B03E18(v1, v4);
  if (v4 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C4B03E18(v1, v4);
  }
  *result = 0;
  if (v2 < 2)
    return result;
  v6 = (_QWORD *)result[1];
  v5 = &v6[v4];
  do
LABEL_7:
    *v6++ = -4096;
  while (v6 != v5);
  return result;
}

uint64_t sub_1C615A178(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4B03B6C((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void sub_1C615A230(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  void ***v6;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C615A2D4(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        memset_pattern16((void *)(*(_QWORD *)a1 + 8 * v2), &xmmword_1C677F4F0, 8 * (a2 - v2));
    }
    else
    {
      v5 = 8 * a2 - 8 * v2;
      v6 = (void ***)(*(_QWORD *)a1 + 8 * v2 - 8);
      do
      {
        v6 = sub_1C4914448(v6) - 1;
        v5 += 8;
      }
      while (v5);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_1C615A2D4(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  int v11;
  unint64_t v12;

  v12 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v12);
  v4 = *(_QWORD **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = 8 * v5;
    v8 = v3;
    v9 = *(_QWORD **)a1;
    do
    {
      *v8++ = *v9;
      *v9++ = 1;
      v7 -= 8;
    }
    while (v7);
    v10 = (char *)(v4 - 1);
    do
    {
      sub_1C4914448((void ***)&v10[v6]);
      v6 -= 8;
    }
    while (v6);
    v4 = *(_QWORD **)a1;
  }
  v11 = v12;
  if (v4 != (_QWORD *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v11;
}

uint64_t sub_1C615A37C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4B04E2C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_1C615A428(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1EF8EFAC0);
  if (v1 != -1)
  {
    v4[0] = sub_1C4B05384;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1EF8EFAC0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

_QWORD *sub_1C615A488()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F66A9);
  *result = &off_1E7FB3C60;
  return result;
}

uint64_t sub_1C615A4C8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4B060E0(v0);
}

void sub_1C615A4F0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EEBB0);
  if (v1 != -1)
  {
    v4[0] = sub_1C4B061A4;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EEBB0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::raw_ostream *sub_1C615A550(llvm *a1)
{
  llvm::raw_ostream *v2;

  v2 = (llvm::raw_ostream *)llvm::errs(a1);
  return sub_1C615A578((uint64_t)a1, v2);
}

llvm::raw_ostream *sub_1C615A578(uint64_t a1, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;

  v3 = sub_1C4816AD8(a2, "Off=");
  sub_1C5E21910(v3, *(_QWORD *)a1, 0, 0, 0);
  v4 = sub_1C4816AD8(v3, ", Sym=");
  v5 = llvm::raw_ostream::operator<<(v4, *(_QWORD *)(a1 + 8));
  v6 = sub_1C4816AD8(v5, ", Type=");
  sub_1C5E21910(v6, *(unsigned int *)(a1 + 16), 0, 0, 0);
  v7 = sub_1C4816AD8(v6, ", Addend=");
  sub_1C5E21910(v7, *(_QWORD *)(a1 + 24), 0, 0, 0);
  v8 = sub_1C4816AD8(v7, ", OriginalSymbol=");
  v9 = llvm::raw_ostream::operator<<(v8, *(_QWORD *)(a1 + 32));
  v10 = sub_1C4816AD8(v9, ", OriginalAddend=");
  return sub_1C5E21910(v10, *(_QWORD *)(a1 + 40), 0, 0, 0);
}

_QWORD *sub_1C615A658()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)llvm::MCAsmBackend::MCAsmBackend(v0, 1);
  *result = &off_1E7FB3DE0;
  return result;
}

uint64_t sub_1C615A694()
{
  return 0;
}

uint64_t sub_1C615A6A0()
{
  return 0;
}

uint64_t sub_1C615A6AC()
{
  return 0;
}

uint64_t sub_1C615A6B4(uint64_t a1, int a2)
{
  __int128 v2;

  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)(a1 + 36) = v2;
  *(_OWORD *)(a1 + 12) = xmmword_1C677F590;
  *(_QWORD *)(a1 + 28) = 0x600000005;
  *(_OWORD *)(a1 + 52) = v2;
  *(_QWORD *)(a1 + 68) = -1;
  *(_DWORD *)(a1 + 76) = 1;
  return ((uint64_t (*)(void))((char *)sub_1C615A744 + 4 * word_1C677F5F8[a2 - 2022]))();
}

uint64_t sub_1C615A744@<X0>(uint64_t result@<X0>, char a2@<W2>, _QWORD *a3@<X8>)
{
  *(_DWORD *)(result + 76) = 2;
  *(_DWORD *)(result + 72) = 13;
  *(_BYTE *)result = 0;
  *(_QWORD *)(result + 4) = 0x400000003;
  *(_OWORD *)(result + 56) = xmmword_1C677F5B0;
  *(_DWORD *)(result + 72) = -1;
  *a3 = 0x800000007;
  if ((a2 & 1) != 0)
  {
    *(_OWORD *)(result + 16) = xmmword_1C6429EB0;
    *(_QWORD *)(result + 32) = 0x500000004;
    *(_DWORD *)(result + 40) = 6;
    *(_QWORD *)(result + 56) = 0x800000007;
    *(_DWORD *)(result + 64) = 9;
    *(_DWORD *)(result + 68) = 10;
    *(_DWORD *)(result + 72) = -3;
  }
  return result;
}

void sub_1C615A974(uint64_t a1)
{
  *(_DWORD *)(a1 + 76) = 2;
  *(_DWORD *)(a1 + 72) = 13;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 4) = 0x400000001;
  *(_OWORD *)(a1 + 56) = xmmword_1C677F5B0;
  JUMPOUT(0x1C615A78CLL);
}

void sub_1C615A9C0(uint64_t a1)
{
  *(_DWORD *)(a1 + 76) = 2;
  *(_DWORD *)(a1 + 72) = 12;
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 4) = 0x400000001;
  *(_OWORD *)(a1 + 56) = xmmword_1C677F5C0;
  JUMPOUT(0x1C615A7A0);
}

void sub_1C615AA20()
{
  JUMPOUT(0x1C615A90CLL);
}

void sub_1C615AA2C()
{
  JUMPOUT(0x1C615A90CLL);
}

void sub_1C615AA38()
{
  JUMPOUT(0x1C615A8C0);
}

void sub_1C615AA44()
{
  JUMPOUT(0x1C615A8C0);
}

void sub_1C615AA50(uint64_t a1)
{
  *(_DWORD *)(a1 + 76) = 2;
  *(_DWORD *)(a1 + 72) = 13;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 4) = 0x400000002;
  *(_OWORD *)(a1 + 56) = xmmword_1C677F5B0;
  JUMPOUT(0x1C615A78CLL);
}

void sub_1C615AA9C(uint64_t a1)
{
  *(_DWORD *)(a1 + 76) = 2;
  *(_DWORD *)(a1 + 72) = 13;
  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 4) = 0x400000002;
  *(_OWORD *)(a1 + 56) = xmmword_1C677F5B0;
  JUMPOUT(0x1C615A798);
}

void sub_1C615AAF8()
{
  JUMPOUT(0x1C615A90CLL);
}

void sub_1C615AB48()
{
  JUMPOUT(0x1C615A8C0);
}

void sub_1C615AB54()
{
  JUMPOUT(0x1C615A8C0);
}

void sub_1C615AB5C()
{
  JUMPOUT(0x1C615A8C0);
}

_QWORD *sub_1C615AB68@<X0>(char a1@<W0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _QWORD *result;

  v8 = operator new();
  result = (_QWORD *)llvm::MCMachObjectTargetWriter::MCMachObjectTargetWriter(v8, a1, a2, a3);
  *result = &off_1E7FB4010;
  *a4 = result;
  return result;
}

uint64_t sub_1C615ABD0()
{
  return 5;
}

uint64_t sub_1C615ABDC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C4B08104((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = 0;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(a2 + 8);
      v9[3] = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 32;
  }
  return result;
}

void sub_1C615ACA0(llvm::MCAsmInfo *a1)
{
  llvm::MCAsmInfo::~MCAsmInfo(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C615ACC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C615ACCC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 464) = a2;
  return result;
}

uint64_t sub_1C615ACD4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 465) = a2;
  return result;
}

uint64_t sub_1C615ACDC(uint64_t result, char a2)
{
  *(_BYTE *)(result + 466) = a2;
  return result;
}

_QWORD *sub_1C615ACE4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = llvm::MCCodeEmitter::MCCodeEmitter(v4);
  *result = &off_1E7FB40C0;
  result[1] = a1;
  result[2] = *(_QWORD *)(a2 + 160);
  result[3] = a2;
  return result;
}

unsigned int *sub_1C615AD38(unsigned int *result, uint64_t a2, int *a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;

  v4 = result;
  v5 = *(_QWORD *)result;
  v6 = result[2];
  if (*(_QWORD *)result + 4 * v6 == a2)
  {
    v11 = *a3;
    if (v6 >= result[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 4);
      v5 = *(_QWORD *)v4;
      v6 = v4[2];
    }
    *(_DWORD *)(v5 + 4 * v6) = v11;
    ++v4[2];
  }
  else
  {
    v7 = (a2 - v5) >> 2;
    if (v6 >= result[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 4);
      v5 = *(_QWORD *)v4;
      v6 = v4[2];
    }
    v8 = (int *)(v5 + 4 * v7);
    *(_DWORD *)(v5 + 4 * v6) = *(_DWORD *)(v5 + 4 * v6 - 4);
    v9 = v4[2];
    v10 = v5 + 4 * v9 - 4;
    if ((int *)v10 != v8)
    {
      result = (unsigned int *)memmove(v8 + 1, v8, v10 - (_QWORD)v8);
      LODWORD(v9) = v4[2];
    }
    v4[2] = v9 + 1;
    *v8 = *a3;
  }
  return result;
}

llvm::MCStreamer *sub_1C615AE30(uint64_t a1, llvm::MCStreamer *this)
{
  return llvm::MCStreamer::visitUsedExpr(this, *(const llvm::MCExpr ***)(a1 + 32));
}

llvm::raw_ostream *sub_1C615AE40(llvm::raw_ostream *result, llvm::raw_ostream *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  unint64_t v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  char *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  uint64_t v23;
  llvm::raw_ostream *v24;
  uint64_t v25;

  v3 = *(_QWORD *)(*((_QWORD *)result + 4) + 16);
  switch(*((_DWORD *)result + 6))
  {
    case 0:
      sub_1C4816AD8(a2, "{ ");
      v4 = 0;
      if (v3 >= 0)
        v5 = v3;
      else
        v5 = v3 + 1;
      v6 = v5 >> 1;
      do
      {
        if (v4)
          sub_1C4816AD8(a2, ", ");
        v7 = sub_1C4816AD8(a2, "sh");
        llvm::raw_ostream::operator<<(v7, v6 + v4++);
      }
      while (v4 != 6);
      goto LABEL_30;
    case 1:
      sub_1C4816AD8(a2, "{ ");
      v8 = 0;
      if (v3 >= 0)
        v9 = v3;
      else
        v9 = v3 + 1;
      v10 = v9 >> 1;
      do
      {
        if (v8)
          sub_1C4816AD8(a2, ", ");
        v11 = sub_1C4816AD8(a2, "sh");
        llvm::raw_ostream::operator<<(v11, v10 + v8++);
      }
      while (v8 != 4);
      goto LABEL_30;
    case 2:
      sub_1C4816AD8(a2, "{ ");
      v12 = 0;
      if (v3 >= 0)
        v13 = v3;
      else
        v13 = v3 + 1;
      v14 = v13 >> 1;
      do
      {
        if (v12)
          sub_1C4816AD8(a2, ", ");
        v15 = sub_1C4816AD8(a2, "sh");
        llvm::raw_ostream::operator<<(v15, v14 + v12++);
      }
      while (v12 != 3);
      goto LABEL_30;
    case 3:
      sub_1C4816AD8(a2, "{ ");
      if (v3 >= 0)
        v16 = v3;
      else
        v16 = v3 + 1;
      v17 = v16 >> 1;
      v18 = sub_1C4816AD8(a2, "sh");
      llvm::raw_ostream::operator<<(v18, v17);
      sub_1C4816AD8(a2, ", ");
      v19 = sub_1C4816AD8(a2, "sh");
      llvm::raw_ostream::operator<<(v19, v17 + 1);
LABEL_30:
      v20 = " }";
      v21 = a2;
      goto LABEL_31;
    case 4:
      v22 = sub_1C4816AD8(a2, "sh");
      if (v3 >= 0)
        v23 = v3;
      else
        v23 = v3 + 1;
      return llvm::raw_ostream::operator<<(v22, v23 >> 1);
    case 5:
      v24 = sub_1C4816AD8(a2, "sh");
      if (v3 >= 0)
        v25 = v3;
      else
        v25 = v3 + 1;
      v21 = llvm::raw_ostream::operator<<(v24, v25 >> 1);
      if ((v3 & 1) != 0)
        v20 = "h";
      else
        v20 = "l";
LABEL_31:
      result = sub_1C4816AD8(v21, v20);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C615B0AC()
{
  return 0;
}

void sub_1C615B0B8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C615B0CC()
{
  return 0;
}

uint64_t sub_1C615B0D4()
{
  return 0;
}

void sub_1C615B0DC(uint64_t a1)
{
  llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 32));
}

uint64_t sub_1C615B0E8()
{
  return 0;
}

uint64_t sub_1C615B0F0(uint64_t a1, int a2)
{
  return byte_1C69105FC[a2] & 1;
}

uint64_t sub_1C615B104(uint64_t a1, int a2)
{
  return (byte_1C69105FC[a2] >> 1) & 1;
}

uint64_t sub_1C615B118(uint64_t a1, int a2)
{
  return (byte_1C69105FC[a2] >> 2) & 1;
}

void LLVMInitializeAGX1TargetMC()
{
  qword_1ED82C338 = (uint64_t)sub_1C4B12EF8;
  qword_1ED82C348 = (uint64_t)sub_1C4B12F54;
  qword_1ED82C358 = (uint64_t)sub_1C4B12FA8;
  unk_1ED82C360 = sub_1C4B130AC;
  qword_1ED82C398 = (uint64_t)sub_1C615ACE4;
  qword_1ED82C3A8 = (uint64_t)sub_1C4B13188;
  qword_1ED82C370 = (uint64_t)sub_1C615A658;
}

void sub_1C615B18C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C615B1A4(void **a1)
{
  llvm::TargetSubtargetInfo::~TargetSubtargetInfo(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C615B1C8()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)llvm::MCAsmBackend::MCAsmBackend(v0, 1);
  *result = &off_1E8054D28;
  return result;
}

_QWORD *sub_1C615B204@<X0>(char a1@<W0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _QWORD *result;

  v8 = operator new();
  result = (_QWORD *)llvm::MCMachObjectTargetWriter::MCMachObjectTargetWriter(v8, a1, a2, a3);
  *result = &off_1E8054EF8;
  *a4 = result;
  return result;
}

void sub_1C615B270(llvm::MCMachObjectTargetWriter *a1)
{
  llvm::MCMachObjectTargetWriter::~MCMachObjectTargetWriter(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C615B298(llvm::MCAsmInfo *a1)
{
  llvm::MCAsmInfo::~MCAsmInfo(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C615B2BC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = llvm::MCCodeEmitter::MCCodeEmitter(v4);
  *result = &off_1E8054FA8;
  result[1] = a1;
  result[2] = *(_QWORD *)(a2 + 160);
  result[3] = a2;
  return result;
}

llvm::raw_ostream *sub_1C615B30C(llvm::raw_ostream *result, llvm::raw_ostream *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::raw_ostream *v11;
  uint64_t v12;
  unint64_t v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  uint64_t i;
  llvm::raw_ostream *v17;
  uint64_t v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  char *v21;
  char *v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;
  uint64_t v25;
  unint64_t v26;
  llvm::raw_ostream *v27;
  uint64_t v28;
  char *v29;

  v3 = *(_QWORD *)(*((_QWORD *)result + 4) + 16);
  switch(*((_DWORD *)result + 6))
  {
    case 0:
      sub_1C4816AD8(a2, "{ ");
      v4 = 0;
      if (v3 >= 0)
        v5 = v3;
      else
        v5 = v3 + 1;
      v6 = v5 >> 1;
      do
      {
        if (v4)
          sub_1C4816AD8(a2, ", ");
        v7 = sub_1C4816AD8(a2, "u");
        llvm::raw_ostream::operator<<(v7, v6 + v4++);
      }
      while (v4 != 5);
      goto LABEL_32;
    case 1:
      sub_1C4816AD8(a2, "{ ");
      v8 = 0;
      if (v3 >= 0)
        v9 = v3;
      else
        v9 = v3 + 1;
      v10 = v9 >> 1;
      do
      {
        if (v8)
          sub_1C4816AD8(a2, ", ");
        v11 = sub_1C4816AD8(a2, "u");
        llvm::raw_ostream::operator<<(v11, v10 + v8++);
      }
      while (v8 != 3);
      goto LABEL_32;
    case 2:
      sub_1C4816AD8(a2, "{ ");
      if (v3 >= 0)
        v12 = v3;
      else
        v12 = v3 + 1;
      v13 = v12 >> 1;
      v14 = sub_1C4816AD8(a2, "u");
      llvm::raw_ostream::operator<<(v14, v13);
      sub_1C4816AD8(a2, ", ");
      v15 = sub_1C4816AD8(a2, "u");
      llvm::raw_ostream::operator<<(v15, v13 + 1);
      goto LABEL_32;
    case 3:
      sub_1C4816AD8(a2, "{ ");
      for (i = 0; i != 3; ++i)
      {
        if (i)
          sub_1C4816AD8(a2, ", ");
        v17 = sub_1C4816AD8(a2, "u");
        v18 = v3 + i;
        if (v3 + i >= 0)
          v19 = v3 + i;
        else
          v19 = v18 + 1;
        v20 = llvm::raw_ostream::operator<<(v17, v19 >> 1);
        if ((v18 & 1) != 0)
          v21 = "h";
        else
          v21 = "l";
        sub_1C4816AD8(v20, v21);
      }
LABEL_32:
      v22 = " }";
      v23 = a2;
      return sub_1C4816AD8(v23, v22);
    case 4:
      v24 = sub_1C4816AD8(a2, "u");
      if (v3 >= 0)
        v25 = v3;
      else
        v25 = v3 + 1;
      v26 = v25 >> 1;
      goto LABEL_48;
    case 5:
      v27 = sub_1C4816AD8(a2, "u");
      if (v3 >= 0)
        v28 = v3;
      else
        v28 = v3 + 1;
      v23 = llvm::raw_ostream::operator<<(v27, v28 >> 1);
      if ((v3 & 1) != 0)
        v22 = "h";
      else
        v22 = "l";
      return sub_1C4816AD8(v23, v22);
    case 6:
      v29 = "ss";
      goto LABEL_47;
    case 7:
      v29 = "cf";
      goto LABEL_47;
    case 8:
      v29 = "ts";
LABEL_47:
      v24 = sub_1C4816AD8(a2, v29);
      v26 = v3;
LABEL_48:
      result = llvm::raw_ostream::operator<<(v24, v26);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C615B5D4()
{
  return 0;
}

void sub_1C615B5E0()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C615B5F4(uint64_t a1)
{
  llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 32));
}

void LLVMInitializeAGX2TargetMC()
{
  qword_1ED82C460 = (uint64_t)sub_1C4C05EE0;
  qword_1ED82C480 = (uint64_t)sub_1C4C05F98;
  unk_1ED82C488 = sub_1C4C0609C;
  qword_1ED82C550 = (uint64_t)sub_1C4C05E1C;
  byte_1ED82C300 = 1;
  qword_1ED82C4C0 = (uint64_t)sub_1C615B2BC;
  qword_1ED82C500 = (uint64_t)sub_1C615B970;
  unk_1ED82C508 = sub_1C615B9C0;
  qword_1ED82C4D0 = (uint64_t)sub_1C4C06178;
  qword_1ED82C498 = (uint64_t)sub_1C615B1C8;
  qword_1ED82C470 = (uint64_t)sub_1C4C05F44;
  unk_1ED82C478 = sub_1C4C06180;
  qword_1ED82C538 = (uint64_t)sub_1C615B93C;
}

void sub_1C615B6A0()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C615B6B8(void **a1)
{
  llvm::TargetSubtargetInfo::~TargetSubtargetInfo(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C615B6E0()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C615B6F4(uint64_t a1, unsigned int *a2)
{
  return (*(unsigned __int8 *)(**(_QWORD **)(a1 + 8) + 48 * *a2 + 9) >> 2) & 1;
}

BOOL sub_1C615B714(uint64_t a1, unsigned int *a2)
{
  return (*(_QWORD *)(**(_QWORD **)(a1 + 8) + 48 * *a2 + 8) & 0xD00) == 1024;
}

BOOL sub_1C615B740(uint64_t a1, unsigned int *a2)
{
  return (*(_QWORD *)(**(_QWORD **)(a1 + 8) + 48 * *a2 + 8) & 0xD00) == 1280;
}

uint64_t sub_1C615B76C(uint64_t a1, unsigned int *a2)
{
  return (*(unsigned __int8 *)(**(_QWORD **)(a1 + 8) + 48 * *a2 + 9) >> 3) & 1;
}

uint64_t sub_1C615B78C(uint64_t a1, unsigned int *a2)
{
  return *(unsigned __int8 *)(**(_QWORD **)(a1 + 8) + 48 * *a2 + 8) >> 7;
}

uint64_t sub_1C615B7AC(uint64_t a1, unsigned int *a2)
{
  return (*(unsigned __int8 *)(**(_QWORD **)(a1 + 8) + 48 * *a2 + 8) >> 5) & 1;
}

uint64_t sub_1C615B7CC(uint64_t a1, unsigned int *a2)
{
  return (*(unsigned __int8 *)(**(_QWORD **)(a1 + 8) + 48 * *a2 + 9) >> 1) & 1;
}

uint64_t sub_1C615B7EC()
{
  return 0;
}

uint64_t sub_1C615B7F4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

uint64_t sub_1C615B800()
{
  return 0;
}

void sub_1C615B808(_QWORD **a1, unsigned int *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t v16;

  if ((((uint64_t (*)(_QWORD **))(*a1)[6])(a1) & 1) != 0
    || (((uint64_t (*)(_QWORD **, unsigned int *))(*a1)[4])(a1, a2) & 1) != 0
    || ((unsigned int (*)(_QWORD **, unsigned int *))(*a1)[3])(a1, a2))
  {
    v9 = *a2;
    v10 = *a1[1];
    if ((*(_BYTE *)(v10 + 48 * *a2 + 9) & 8) == 0)
    {
      if (a2[6])
      {
        v11 = 3;
        if (v9 != 50)
          v11 = 0;
        if (*(_BYTE *)(*(_QWORD *)(v10 + 48 * v9 + 40) + 6 * v11 + 3) != 4)
          a3 = 0;
        v16 = 0;
        v12 = *((_QWORD *)a2 + 2);
        v13 = *(unsigned __int8 *)(v12 + 16 * v11);
        if (v13 == 5)
        {
          v14 = &v16;
          llvm::MCExpr::evaluateAsAbsolute(*(_QWORD *)(v12 + 16 * v11 + 8), &v16);
          if (!v15)
            return;
        }
        else
        {
          if (v13 != 2)
            return;
          v14 = (uint64_t *)(v12 + 16 * v11 + 8);
        }
        *a5 = *(int *)v14 + a3;
      }
    }
  }
}

void sub_1C615B930(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

_QWORD *sub_1C615B93C()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E80BE7D8;
  return result;
}

_QWORD *sub_1C615B970(llvm::MCStreamer *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = llvm::MCTargetStreamer::MCTargetStreamer(v4, a1);
  *result = &off_1E80BE800;
  result[2] = a2;
  return result;
}

_QWORD *sub_1C615B9C0(llvm::MCStreamer *a1)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = (_QWORD *)operator new();
  result = llvm::MCTargetStreamer::MCTargetStreamer(v2, a1);
  *result = &off_1E80BE870;
  return result;
}

uint64_t sub_1C615BA08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  unint64_t v5;
  _BYTE v7[24];
  uint64_t v8;
  _OWORD v9[22];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v3 = operator new();
  v4 = sub_1C4C0B52C(a2);
  llvm::MCAsmBackend::MCAsmBackend(v3, 1);
  *(_QWORD *)v3 = off_1E80BE9D8;
  *(_DWORD *)(v3 + 12) = v4;
  *(_QWORD *)(v3 + 2104) = v3 + 2128;
  *(_OWORD *)(v3 + 2112) = xmmword_1C6612EE0;
  memcpy((void *)(v3 + 16), &off_1E80BEAC0, 0x828uLL);
  v5 = sub_1C4C94664();
  sub_1C4C07158((_QWORD *)(v3 + 2104), v5);
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  if (v4 >= 4)
    *(_QWORD *)&v9[0] = 0x7200000003;
  v8 = 0;
  v7[0] = 0;
  v7[16] = 0;
  if (sub_1C4C94178(v4, (uint64_t)v9, 0x73u, (uint64_t)v7, *(void **)(v3 + 2104), (_DWORD *)&v8 + 1, &v8))
    sub_1C4C07158((_QWORD *)(v3 + 2104), (unint64_t)v8 >> 1);
  else
    *(_QWORD *)(v3 + 2112) = 0;
  *(_QWORD *)v3 = &off_1E80BE8E0;
  return v3;
}

_QWORD *sub_1C615BB8C@<X0>(char a1@<W0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _QWORD *result;

  v8 = operator new();
  result = (_QWORD *)llvm::MCMachObjectTargetWriter::MCMachObjectTargetWriter(v8, a1, a2, a3);
  *result = &off_1E80BF2F8;
  *a4 = result;
  return result;
}

void sub_1C615BBF8(llvm::MCMachObjectTargetWriter *a1)
{
  llvm::MCMachObjectTargetWriter::~MCMachObjectTargetWriter(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C615BC20(llvm::MCAsmInfo *a1)
{
  llvm::MCAsmInfo::~MCAsmInfo(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C615BC44(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = llvm::MCCodeEmitter::MCCodeEmitter(v4);
  *result = &off_1E80BF3A8;
  result[1] = a1;
  result[2] = *(_QWORD *)(a2 + 160);
  result[3] = a2;
  return result;
}

llvm::raw_ostream *sub_1C615BC94(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  unint64_t v3;
  char *v4;
  llvm::raw_ostream *v5;
  char *v6;

  v3 = *(_QWORD *)(*((_QWORD *)result + 4) + 16);
  switch(*((_DWORD *)result + 6))
  {
    case 0:
      return sub_1C4C081B8(this, "u", (unsigned __int16)*(_QWORD *)(*((_QWORD *)result + 4) + 16), *((_DWORD *)result + 10));
    case 1:
      v4 = "ss";
      goto LABEL_6;
    case 2:
      v4 = "cf";
      goto LABEL_6;
    case 3:
      v4 = "ts";
LABEL_6:
      v5 = sub_1C4816AD8(this, v4);
      return llvm::raw_ostream::operator<<(v5, v3);
    case 4:
      sub_1C4C081B8(this, "i", v3, *((_DWORD *)result + 10));
      v6 = ".il4";
      goto LABEL_14;
    case 5:
      sub_1C4C081B8(this, "i", v3, *((_DWORD *)result + 10));
      v6 = ".il8";
      goto LABEL_14;
    case 6:
      sub_1C4C081B8(this, "i", v3, *((_DWORD *)result + 10));
      v6 = ".il16";
      goto LABEL_14;
    case 7:
      sub_1C4C081B8(this, "i", v3, *((_DWORD *)result + 10));
      v6 = ".il32";
      goto LABEL_14;
    case 8:
      sub_1C4C081B8(this, "i", v3, *((_DWORD *)result + 10));
      v6 = ".il64";
      goto LABEL_14;
    case 9:
      sub_1C4C081B8(this, "s", v3, *((_DWORD *)result + 10));
      v6 = ".st2";
      goto LABEL_14;
    case 0xA:
      sub_1C4C081B8(this, "s", v3, *((_DWORD *)result + 10));
      v6 = ".st4";
LABEL_14:
      result = sub_1C4816AD8(this, v6);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1C615BE3C()
{
  return 0;
}

void sub_1C615BE48()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C615BE5C(uint64_t a1)
{
  llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 32));
}

uint64_t sub_1C615BE68(int a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result;

  if (a1 <= 211)
  {
    switch(a1)
    {
      case 150:
      case 152:
        if ((a4 - 1) >= 3)
          goto LABEL_25;
        result = 334;
        break;
      case 151:
        if ((a4 - 1) >= 3)
          goto LABEL_25;
        result = 340;
        break;
      case 153:
      case 155:
      case 157:
        if ((a4 - 1) >= 3)
          goto LABEL_25;
        result = 343;
        break;
      case 154:
        if ((a4 - 1) >= 3)
          goto LABEL_25;
        result = 349;
        break;
      case 156:
      case 158:
        if ((a4 - 1) >= 3)
          goto LABEL_25;
        result = 352;
        break;
      default:
        if (a1 == 211)
        {
LABEL_19:
          if ((a4 - 1) < 3)
            return 357;
        }
LABEL_25:
        result = 0;
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 307:
      case 308:
      case 309:
        if ((a4 - 1) >= 3)
          goto LABEL_25;
        result = 360;
        break;
      case 310:
      case 311:
      case 312:
      case 313:
        if ((a4 - 1) >= 3)
          goto LABEL_25;
        result = 362;
        break;
      default:
        if (a1 == 212)
          goto LABEL_19;
        if (a1 != 330 || (a4 - 1) >= 3)
          goto LABEL_25;
        result = 364;
        break;
    }
  }
  return result;
}

void LLVMInitializeAGX3TargetMC()
{
  qword_1EF8F6888 = (uint64_t)sub_1C4C087B4;
  qword_1EF8F68A8 = (uint64_t)sub_1C4C08860;
  unk_1EF8F68B0 = sub_1C4C08964;
  qword_1EF8F6978 = (uint64_t)sub_1C4C086F0;
  byte_1EF8F66AA = 1;
  qword_1EF8F68E8 = (uint64_t)sub_1C615BC44;
  qword_1EF8F6928 = (uint64_t)sub_1C615C154;
  unk_1EF8F6930 = sub_1C615C1A4;
  qword_1EF8F68F8 = (uint64_t)sub_1C4C08A40;
  qword_1EF8F68C0 = (uint64_t)sub_1C615BA08;
  qword_1EF8F6898 = (uint64_t)sub_1C4C0880C;
  unk_1EF8F68A0 = sub_1C4C08A48;
  qword_1EF8F6960 = (uint64_t)sub_1C615C120;
}

void sub_1C615C02C()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C615C044(void **a1)
{
  llvm::TargetSubtargetInfo::~TargetSubtargetInfo(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C615C068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1C615BE68(a2, a2, a3, a5);
}

void sub_1C615C078()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C615C08C(__int128 *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)&qword_1EF8F66B0, 0, 0);
  dword_1EF8F6730 = 0;
  qword_1EF8F6738 = (uint64_t)&off_1E7F952A8;
  unk_1EF8F6740 = 0;
  qword_1EF8F66B0 = (uint64_t)&unk_1E819E3B0;
  qword_1EF8F6748 = (uint64_t)&unk_1E819E2C0;
  qword_1EF8F6750 = (uint64_t)&off_1E7F95260;
  qword_1EF8F6768 = (uint64_t)&qword_1EF8F6750;
  llvm::cl::Option::setArgStr(v2, "agx3-flag-reg-limit", 0x13uLL);
  xmmword_1EF8F66D0 = *a1;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1EF8F66B0);
}

_QWORD *sub_1C615C120()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E81315C8;
  return result;
}

_QWORD *sub_1C615C154(llvm::MCStreamer *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = llvm::MCTargetStreamer::MCTargetStreamer(v4, a1);
  *result = &off_1E81315F0;
  result[2] = a2;
  return result;
}

_QWORD *sub_1C615C1A4(llvm::MCStreamer *a1)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = (_QWORD *)operator new();
  result = llvm::MCTargetStreamer::MCTargetStreamer(v2, a1);
  *result = &off_1E8131660;
  return result;
}

uint64_t sub_1C615C1EC(uint64_t a1, int a2, _DWORD *a3)
{
  int v3;

  v3 = dword_1C6A4824C[a2];
  if (v3)
    return ((uint64_t (*)(void))((char *)&loc_1C615C218 + 4 * word_1C6A3EE68[v3 - 1]))();
  *a3 = 0;
  return 0;
}

uint64_t sub_1C615C7CC(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1C6173944(a2, a1);
  result = 0;
  if ((v2 & 0xFF00000000) != 0 && v2 <= 0x22B5)
    return dword_1C6A5135C[(int)v2];
  return result;
}

uint64_t sub_1C615C818(uint64_t result)
{
  if (result)
    JUMPOUT(0x1CAA32FC0);
  return result;
}

uint64_t sub_1C615C834(uint64_t a1, char *a2, _BYTE **a3, _OWORD *a4)
{
  uint64_t v8;
  size_t v9;
  _BYTE *v10;

  v8 = sub_1C47AD050(a1, 0, 0);
  *(_BYTE *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)v8 = &unk_1E819E898;
  *(_QWORD *)(v8 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v8 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v8 + 184) = v8 + 160;
  v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  v10 = *a3;
  *(_BYTE *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v10;
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

double sub_1C615C8FC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 <= 3u)
  {
    *(_QWORD *)&result = sub_1C615C970(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    sub_1C4C2627C((uint64_t)a2);
    *(_QWORD *)&result = sub_1C615CABC(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1C615C970(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[4];

  *a3 = 76;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v20 = 0u;
  memset(v21, 0, 60);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v21[3] + 8, (int8x8_t *)v21 + 1, (uint64_t)&v21[1] + 8);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1C4C0C3FC((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v21[1] + 1);
  LOBYTE(v21[1]) = 1;
  v12 = v21[2];
  *(_OWORD *)(a4 + 96) = v21[1];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v21[2] + 12);
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21[0];
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C615CABC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *a3 = 78;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 12, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1C4C0C3FC((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v22 + 2);
  BYTE4(v22) = 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 80;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C615CC3C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 > 3u)
  {
    sub_1C4C2627C((uint64_t)a2);
    *(_QWORD *)&result = sub_1C615CABC(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(_QWORD *)&result = sub_1C615C970(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

double sub_1C615CCB0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 <= 3u)
  {
    *(_QWORD *)&result = sub_1C615CD24(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    sub_1C4C2627C((uint64_t)a2);
    *(_QWORD *)&result = sub_1C615CE70(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1C615CD24(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[4];

  *a3 = 94;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v20 = 0u;
  memset(v21, 0, 60);
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v21[3] + 8, (int8x8_t *)v21 + 1, (uint64_t)&v21[1] + 8);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1C4C0C3FC((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v21[1] + 1);
  LOBYTE(v21[1]) = 1;
  v12 = v21[2];
  *(_OWORD *)(a4 + 96) = v21[1];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v21[2] + 12);
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21[0];
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C615CE70(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;

  *a3 = 101;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 12, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1C4C0C3FC((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v19 + 8, (_DWORD *)&v22 + 2);
  BYTE4(v22) = 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 100;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C615CFF0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 > 3u)
  {
    sub_1C4C2627C((uint64_t)a2);
    *(_QWORD *)&result = sub_1C615CE70(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(_QWORD *)&result = sub_1C615CD24(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

double sub_1C615D064(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 <= 3u)
    return sub_1C615D0D8(a1, a2, a3, a4);
  sub_1C4C2627C((uint64_t)a2);
  *(_QWORD *)&result = sub_1C615D260(a1, a2, a3, a4).n128_u64[0];
  return result;
}

double sub_1C615D0D8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  BOOL v29[16];

  *a3 = 81;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v18 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v29, (int8x8_t *)((char *)&v26 + 4), (uint64_t)&v27);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v20 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v22 + 8);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v18, (uint64_t)&v24 + 4);
  BYTE12(v26) = 1;
  v12 = v28;
  *(_OWORD *)(a4 + 128) = v27;
  *(_OWORD *)(a4 + 144) = v12;
  *(_DWORD *)(a4 + 160) = *(_DWORD *)v29;
  v13 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v13;
  v14 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v14;
  v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  result = *(double *)&v25;
  v17 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v17;
  return result;
}

__n128 sub_1C615D260(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 82;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 4, (int8x8_t *)&v25 + 1, (uint64_t)&v26 + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v19 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v21.n128_i64[1]);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v23 + 4);
  LOBYTE(v26) = 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      LODWORD(v25) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    DWORD1(v25) = 84;
  }
  v13 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v13;
  *(_QWORD *)(a4 + 160) = v28;
  v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  v15 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v16;
  result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C615D414(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 <= 3u)
    return sub_1C615D0D8(a1, a2, a3, a4);
  sub_1C4C2627C((uint64_t)a2);
  *(_QWORD *)&result = sub_1C615D260(a1, a2, a3, a4).n128_u64[0];
  return result;
}

__n128 sub_1C615D488(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  BOOL v28[16];

  *a3 = 88;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v17 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v28, (int8x8_t *)&v25 + 1, (uint64_t)&v26);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v19 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v21.n128_i64[1]);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v17, (uint64_t)&v23 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      LODWORD(v25) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    DWORD1(v25) = 89;
  }
  v12 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v12;
  *(_DWORD *)(a4 + 160) = *(_DWORD *)v28;
  v13 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v13;
  v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  v15 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v15;
  result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C615D63C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (*a1 <= 3u)
    return sub_1C615D6B0(a1, a2, a3, a4);
  sub_1C4C2627C((uint64_t)a2);
  *(_QWORD *)&result = sub_1C615D838(a1, a2, a3, a4).n128_u64[0];
  return result;
}

double sub_1C615D6B0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  BOOL v29[16];

  *a3 = 86;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v18 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v29, (int8x8_t *)((char *)&v26 + 4), (uint64_t)&v27);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v20 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v22 + 8);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v18, (uint64_t)&v24 + 4);
  BYTE12(v26) = 1;
  v12 = v28;
  *(_OWORD *)(a4 + 128) = v27;
  *(_OWORD *)(a4 + 144) = v12;
  *(_DWORD *)(a4 + 160) = *(_DWORD *)v29;
  v13 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v13;
  v14 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v14;
  v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  result = *(double *)&v25;
  v17 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v17;
  return result;
}

__n128 sub_1C615D838(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 87;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 4, (int8x8_t *)&v25 + 1, (uint64_t)&v26 + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v19 + 12);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v21.n128_i64[1]);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v23 + 4);
  LOBYTE(v26) = 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      LODWORD(v25) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    DWORD1(v25) = 88;
  }
  v13 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v13;
  *(_QWORD *)(a4 + 160) = v28;
  v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  v15 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v16;
  result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C615D9EC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 7;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 12;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C615DB90(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 8;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 13;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C615DD2C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 9;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 14;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C615DED0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 10;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 15;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C615E06C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 12;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 17;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C615E20C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 7;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 12;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C615E3A8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 9;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 14;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C615E544(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 12;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 17;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C615E6E0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 13;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 18;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C615E87C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[7];

  *a3 = 50;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v34 = 0u;
  memset(v35, 0, 92);
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v26);
  LOBYTE(v27) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v35[5] + 4, (int8x8_t *)&v35[2] + 1, (uint64_t)&v35[3] + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v24, (uint64_t)&v28 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v30);
  sub_1C4C1280C(a1, (uint64_t)a2, v25, (uint64_t)&v31 + 12);
  v13 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v13 + 16 * v11) == 1)
  {
    sub_1C4C12430(a1, a2, v11, (uint64_t)&v33 + 8);
    v13 = *((_QWORD *)a2 + 2);
  }
  else
  {
    BYTE8(v33) = *(_BYTE *)(v13 + 16 * v11 + 8) & 0x7F;
    *(_QWORD *)&v34 = 0x200000006;
    BYTE8(v34) = 0;
  }
  if (*(_BYTE *)(v13 + 16 * v12) == 1)
  {
    sub_1C4C12430(a1, a2, v12, (uint64_t)v35 + 4);
  }
  else
  {
    BYTE4(v35[0]) = *(_BYTE *)(v13 + 16 * v12 + 8) & 0x7F;
    *(_QWORD *)((char *)v35 + 12) = 0x200000006;
    BYTE4(v35[1]) = 0;
  }
  v14 = *(_DWORD *)a2;
  BYTE12(v27) = sub_1C4C32DEC(v14) == 19;
  v15 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 5u)
  {
    DWORD2(v35[5]) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v23 = sub_1C4C915C4(v14);
      if ((v23 & 0xFF00000000) == 0 || v23 != 47)
        DWORD2(v35[5]) = 0;
    }
    LODWORD(v35[3]) = 1;
  }
  else
  {
    LODWORD(v35[3]) = 1;
    if (v15 != 4)
      goto LABEL_15;
  }
  if ((DWORD2(v26) - 2) <= 3)
    LODWORD(v35[2]) = dword_1C6A5F9D0[DWORD2(v26) - 2];
  DWORD1(v35[2]) = 55;
LABEL_15:
  v16 = v35[4];
  *(_OWORD *)(a4 + 192) = v35[3];
  *(_OWORD *)(a4 + 208) = v16;
  *(_OWORD *)(a4 + 220) = *(_OWORD *)((char *)&v35[4] + 12);
  v17 = v35[0];
  *(_OWORD *)(a4 + 128) = v34;
  *(_OWORD *)(a4 + 144) = v17;
  v18 = v35[2];
  *(_OWORD *)(a4 + 160) = v35[1];
  *(_OWORD *)(a4 + 176) = v18;
  v19 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v19;
  v20 = v33;
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v20;
  v21 = v27;
  *(_OWORD *)a4 = v26;
  *(_OWORD *)(a4 + 16) = v21;
  result = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C615EB78(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double result;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;

  *a3 = 59;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v21);
  LOBYTE(v22) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v30, (int8x8_t *)((char *)&v27 + 4), (uint64_t)&v28);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v23 + 4);
  v12 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v12 + 16 * v11) == 1)
  {
    sub_1C4C12430(a1, a2, v11, (uint64_t)&v25);
  }
  else
  {
    LOBYTE(v25) = *(_BYTE *)(v12 + 16 * v11 + 8) & 0x7F;
    *((_QWORD *)&v25 + 1) = 0x200000006;
    LOBYTE(v26) = 0;
  }
  v13 = *(_DWORD *)a2;
  BYTE12(v22) = sub_1C4C32DEC(v13) == 19;
  v14 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v30) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v20 = sub_1C4C915C4(v13);
      if ((v20 & 0xFF00000000) == 0 || v20 != 47)
        HIDWORD(v30) = 0;
    }
    HIDWORD(v27) = 1;
  }
  else
  {
    HIDWORD(v27) = 1;
    if (v14 != 4)
      goto LABEL_12;
  }
  if ((DWORD2(v21) - 2) <= 3)
    HIDWORD(v26) = dword_1C6A5F9D0[DWORD2(v21) - 2];
  LODWORD(v27) = 64;
LABEL_12:
  v15 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v29;
  *(_QWORD *)(a4 + 144) = v30;
  v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  result = *(double *)&v21;
  v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  return result;
}

double sub_1C615EDB0(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  double result;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 62;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v24, (int8x8_t *)&v21 + 1, (uint64_t)&v22);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  v11 = *(_DWORD *)a2;
  BYTE12(v18) = sub_1C4C32DEC(v11) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v24) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v16 = sub_1C4C915C4(v11);
      if ((v16 & 0xFF00000000) == 0 || v16 != 47)
        HIDWORD(v24) = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_6;
  }
  if ((DWORD2(v17) - 2) <= 3)
    LODWORD(v21) = dword_1C6A5F9D0[DWORD2(v17) - 2];
  DWORD1(v21) = 67;
LABEL_6:
  v12 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v12;
  *(_OWORD *)(a4 + 96) = v23;
  *(_QWORD *)(a4 + 112) = v24;
  v13 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v13;
  result = *(double *)&v19;
  v15 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v15;
  return result;
}

double sub_1C615EF70(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[4];

  *a3 = 60;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v20 = 0u;
  memset(v21, 0, 60);
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v21[3] + 4, (int8x8_t *)v21 + 1, (uint64_t)&v21[1] + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  v11 = *(_DWORD *)a2;
  BYTE12(v18) = sub_1C4C32DEC(*(_DWORD *)a2) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    DWORD2(v21[3]) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v12 = sub_1C4C915C4(v11);
      if ((v12 & 0xFF00000000) == 0 || v12 != 47)
        DWORD2(v21[3]) = 0;
    }
  }
  sub_1C4C14CB8((int *)a2, (uint64_t)&v17);
  if (*(_DWORD *)a1 >= 4u)
  {
    if ((DWORD2(v17) - 2) <= 3)
      LODWORD(v21[0]) = dword_1C6A5F9D0[DWORD2(v17) - 2];
    DWORD1(v21[0]) = 65;
  }
  v13 = v21[1];
  a4[4] = v21[0];
  a4[5] = v13;
  a4[6] = v21[2];
  *(_OWORD *)((char *)a4 + 108) = *(_OWORD *)((char *)&v21[2] + 12);
  v14 = v18;
  *a4 = v17;
  a4[1] = v14;
  result = *(double *)&v19;
  v16 = v20;
  a4[2] = v19;
  a4[3] = v16;
  return result;
}

double sub_1C615F12C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  __int128 v12;
  __int128 v13;
  double result;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[4];

  *a3 = 60;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v20 = 0u;
  memset(v21, 0, 60);
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v17);
  LOBYTE(v18) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v21[3] + 4, (int8x8_t *)v21 + 1, (uint64_t)&v21[1] + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v19 + 4);
  v11 = *(_DWORD *)a2;
  BYTE12(v18) = sub_1C4C32DEC(*(_DWORD *)a2) == 19;
  if (*(_DWORD *)a1 >= 5u)
  {
    DWORD2(v21[3]) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v16 = sub_1C4C915C4(v11);
      if ((v16 & 0xFF00000000) == 0 || v16 != 47)
        DWORD2(v21[3]) = 0;
    }
  }
  sub_1C4C14CB8((int *)a2, (uint64_t)&v17);
  if (*(_DWORD *)a1 >= 4u)
  {
    if ((DWORD2(v17) - 2) <= 3)
      LODWORD(v21[0]) = dword_1C6A5F9D0[DWORD2(v17) - 2];
    DWORD1(v21[0]) = 65;
  }
  v12 = v21[1];
  a4[4] = v21[0];
  a4[5] = v12;
  a4[6] = v21[2];
  *(_OWORD *)((char *)a4 + 108) = *(_OWORD *)((char *)&v21[2] + 12);
  v13 = v18;
  *a4 = v17;
  a4[1] = v13;
  result = *(double *)&v19;
  v15 = v20;
  a4[2] = v19;
  a4[3] = v15;
  return result;
}

__n128 sub_1C615F2EC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  *a3 = 55;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v17 = sub_1C4C2FD5C(v7);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  sub_1C4C15114((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 8, (int8x8_t *)&v26, (uint64_t)&v26 + 8);
  sub_1C4C15180((uint64_t)a1, a2, v10, (uint64_t)&v20 + 4);
  sub_1C4C15180((uint64_t)a1, a2, v11, (uint64_t)&v22);
  sub_1C4C15180((uint64_t)a1, a2, v17, (uint64_t)&v23 + 12);
  BYTE12(v19) = sub_1C4C32DEC(*(_DWORD *)a2) == 19;
  sub_1C4C15394((uint64_t)a1, (int *)a2, &v18);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      DWORD2(v25) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    HIDWORD(v25) = 60;
  }
  v12 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v12;
  *(_OWORD *)(a4 + 160) = v28;
  v13 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v13;
  v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  v15 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v15;
  result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C615F4CC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;

  *a3 = 56;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v17 = sub_1C4C2FD5C(v7);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  sub_1C4C15114((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 8, (int8x8_t *)&v26, (uint64_t)&v26 + 8);
  sub_1C4C15180((uint64_t)a1, a2, v10, (uint64_t)&v20 + 4);
  sub_1C4C15180((uint64_t)a1, a2, v11, (uint64_t)&v22);
  sub_1C4C15180((uint64_t)a1, a2, v17, (uint64_t)&v23 + 12);
  BYTE12(v19) = sub_1C4C32DEC(*(_DWORD *)a2) == 19;
  sub_1C4C15394((uint64_t)a1, (int *)a2, &v18);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      DWORD2(v25) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    HIDWORD(v25) = 61;
  }
  v12 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v12;
  *(_OWORD *)(a4 + 160) = v28;
  v13 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v13;
  v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  v15 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v15;
  result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C615F6B0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 37;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  sub_1C4C157AC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 4, (int8x8_t *)((char *)&v25 + 12), (uint64_t)&v26 + 4);
  sub_1C4C15874((uint64_t)a1, a2, v10, (uint64_t)&v20);
  sub_1C4C15874((uint64_t)a1, a2, v11, (uint64_t)&v21.n128_i64[1] + 4);
  sub_1C4C15874((uint64_t)a1, a2, v12, (uint64_t)&v23 + 8);
  BYTE12(v19) = sub_1C4C32DEC(*(_DWORD *)a2) == 19;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      DWORD1(v25) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    DWORD2(v25) = 42;
  }
  v13 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v13;
  *(_QWORD *)(a4 + 160) = v28;
  v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  v15 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v16;
  result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C615F880(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 40;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  sub_1C4C15D94((uint64_t)a1, a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v28 + 4, (int8x8_t *)((char *)&v25 + 12), (uint64_t)&v26 + 4);
  sub_1C4C15180((uint64_t)a1, a2, v10, (uint64_t)&v20);
  sub_1C4C15180((uint64_t)a1, a2, v11, (uint64_t)&v21.n128_i64[1] + 4);
  sub_1C4C15180((uint64_t)a1, a2, v12, (uint64_t)&v23 + 8);
  BYTE12(v19) = sub_1C4C32DEC(*(_DWORD *)a2) == 19;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      DWORD1(v25) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    DWORD2(v25) = 45;
  }
  v13 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v13;
  *(_QWORD *)(a4 + 160) = v28;
  v14 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v14;
  v15 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v16;
  result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C615FA4C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  *a3 = 187;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v31 = 0;
  v13 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  LOBYTE(v22) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v31 + 4, (int8x8_t *)((char *)&v28 + 12), (uint64_t)&v29 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v26 + 4);
  if (HIDWORD(v26) == 1)
    LODWORD(v27) = 2;
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v22 + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v24.n128_i64[1]);
  if ((_DWORD)v25 == 1)
    *(_QWORD *)&v25 = 0x200000001;
  v14 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8);
  if (v14 == 32)
    v15 = 0;
  else
    v15 = v14 & 0x1F;
  LOBYTE(v28) = v15;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v21) - 2) <= 3)
      DWORD1(v28) = dword_1C6A5F9D0[DWORD2(v21) - 2];
    DWORD2(v28) = 184;
  }
  v16 = v30;
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v16;
  *(_QWORD *)(a4 + 160) = v31;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  v18 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v18;
  v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  result = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C615FC4C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 185;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 168;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C615FDD4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  *a3 = 35;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v31 = 0;
  v13 = sub_1C4C2FD5C(v7);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  LOBYTE(v22) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v31 + 4, (int8x8_t *)((char *)&v28 + 12), (uint64_t)&v29 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v26 + 4);
  if (HIDWORD(v26) == 1)
    LODWORD(v27) = 2;
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v22 + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v24.n128_i64[1]);
  if ((_DWORD)v25 == 1)
    *(_QWORD *)&v25 = 0x200000001;
  v14 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v13 + 8);
  if (v14 == 32)
    v15 = 0;
  else
    v15 = v14 & 0x1F;
  LOBYTE(v28) = v15;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v21) - 2) <= 3)
      DWORD1(v28) = dword_1C6A5F9D0[DWORD2(v21) - 2];
    DWORD2(v28) = 40;
  }
  v16 = v30;
  *(_OWORD *)(a4 + 128) = v29;
  *(_OWORD *)(a4 + 144) = v16;
  *(_QWORD *)(a4 + 160) = v31;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  v18 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v18;
  v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  result = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C615FFDC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  _OWORD v18[3];

  *a3 = 75;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  memset(v18, 0, 44);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  LOBYTE(v15) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3)
      v17.n128_u32[2] = dword_1C6A5F9D0[DWORD2(v14) - 2];
    v17.n128_u32[3] = 79;
  }
  v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C6160124(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  _OWORD v18[3];

  *a3 = 18;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  memset(v18, 0, 44);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  LOBYTE(v15) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3)
      v17.n128_u32[2] = dword_1C6A5F9D0[DWORD2(v14) - 2];
    v17.n128_u32[3] = 23;
  }
  v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C616026C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 v17;
  _OWORD v18[3];

  *a3 = 144;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  memset(v18, 0, 44);
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v14);
  LOBYTE(v15) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v18[2] + 8, (int8x8_t *)v18, (uint64_t)v18 + 8);
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&v15 + 12);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v14) - 2) <= 3)
      v17.n128_u32[2] = dword_1C6A5F9D0[DWORD2(v14) - 2];
    v17.n128_u32[3] = 143;
  }
  v11 = v18[1];
  *(_OWORD *)(a4 + 64) = v18[0];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v18[1] + 12);
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  result = v17;
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C61603B4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 170;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1] + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 153;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6160528(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  uint64_t v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  *a3 = 74;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v23 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  v14 = *((_QWORD *)a2 + 2);
  v15 = *(_DWORD *)(v14 + 16 * v8 + 8);
  if (v15 == 2)
  {
    v16 = 6;
  }
  else if (v15 == 1)
  {
    v16 = 7;
  }
  else
  {
    v16 = (v15 + 9) & 0xF;
  }
  BYTE1(v24) = v16;
  LOBYTE(v24) = 1;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v23, (BOOL *)&v34 + 8, (int8x8_t *)((char *)&v31 + 12), (uint64_t)&v32 + 8);
  DWORD1(v32) = *(_DWORD *)(v14 + 16 * v9 + 8) & 0xF;
  sub_1C4C1280C(a1, (uint64_t)a2, v10, (uint64_t)&v24 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v11, (uint64_t)&v26);
  sub_1C4C0E920(a1, a2, v12, (uint64_t)&v27.n128_i64[1] + 4);
  sub_1C4C0E920(a1, a2, v13, (uint64_t)&v29 + 8);
  if (DWORD1(v28) == 1)
    *(_QWORD *)((char *)&v28 + 4) = 0x200000001;
  if ((_DWORD)v30 == 1)
    *(_QWORD *)&v30 = 0x200000001;
  if (*(_DWORD *)a1 >= 5u)
  {
    HIDWORD(v34) = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v22 = sub_1C4C915C4(*(_DWORD *)a2);
      if ((v22 & 0xFF00000000) == 0 || v22 != 47)
        HIDWORD(v34) = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_15;
  }
  *(_QWORD *)((char *)&v31 + 4) = 0x4E00000003;
LABEL_15:
  v17 = v33;
  *(_OWORD *)(a4 + 128) = v32;
  *(_OWORD *)(a4 + 144) = v17;
  *(_OWORD *)(a4 + 160) = v34;
  v18 = v29;
  *(_OWORD *)(a4 + 64) = v28;
  *(_OWORD *)(a4 + 80) = v18;
  v19 = v31;
  *(_OWORD *)(a4 + 96) = v30;
  *(_OWORD *)(a4 + 112) = v19;
  v20 = v25;
  *(_OWORD *)a4 = v24;
  *(_OWORD *)(a4 + 16) = v20;
  result = v27;
  *(_OWORD *)(a4 + 32) = v26;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C6160780(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  BOOL v38[16];
  _QWORD v39[4];

  v39[2] = *MEMORY[0x1E0C80C00];
  *a3 = 97;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v22 = sub_1C4C2FD5C(v7);
  v23 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v38 = 0;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v26);
  v11 = *((_QWORD *)a2 + 2);
  v27.n128_u8[0] = (*(_BYTE *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v38, (int8x8_t *)((char *)&v35 + 4), (uint64_t)&v36);
  HIDWORD(v35) = dword_1C6A5FB54[(*(_QWORD *)(v11 + 16 * v10 + 8) & 0xFLL) - 8];
  sub_1C4C0E430((uint64_t)a1, a2, v22, (uint64_t)&v27.n128_i64[1] + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v23, (uint64_t)&v29 + 8);
  sub_1C4C0E920((uint64_t)a1, a2, v25, (uint64_t)&v31 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v24, (uint64_t)&v33);
  if (HIDWORD(v31) == 1)
    LODWORD(v32) = 1;
  if (DWORD2(v33) == 1)
    *((_QWORD *)&v33 + 1) = 0x100000001;
  if (HIDWORD(v35) >= 4)
  {
    v12 = 0;
    v13 = 0;
    v39[0] = (char *)&v27.n128_u64[1] + 4;
    v39[1] = (char *)&v29 + 8;
    do
    {
      v14 = v12;
      v15 = v39[v13];
      if (*(_DWORD *)(v15 + 8) != 1 && *(_DWORD *)(v15 + 12) == 1)
        *(_BYTE *)(v15 + 25) = 1;
      v12 = 1;
      v13 = 1;
    }
    while ((v14 & 1) == 0);
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v26) - 2) <= 3)
      HIDWORD(v34) = dword_1C6A5F9D0[DWORD2(v26) - 2];
    LODWORD(v35) = 96;
  }
  v16 = v37;
  *(_OWORD *)(a4 + 160) = v36;
  *(_OWORD *)(a4 + 176) = v16;
  *(_DWORD *)(a4 + 192) = *(_DWORD *)v38;
  v17 = v33;
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v17;
  v18 = v35;
  *(_OWORD *)(a4 + 128) = v34;
  *(_OWORD *)(a4 + 144) = v18;
  v19 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v19;
  v20 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v20;
  result = v27;
  *(_OWORD *)a4 = v26;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6160A40(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  char v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[4];
  _QWORD v36[5];

  v36[2] = *MEMORY[0x1E0C80C00];
  *a3 = 95;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v34 = 0u;
  memset(v35, 0, 60);
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  sub_1C4C157AC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v26);
  v13 = *((_QWORD *)a2 + 2);
  v27.n128_u8[0] = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v35[3] + 8, (int8x8_t *)((char *)v35 + 12), (uint64_t)&v35[1] + 8);
  DWORD1(v35[1]) = dword_1C6A5FB54[(*(_QWORD *)(v13 + 16 * v10 + 8) & 0xFLL) - 8];
  sub_1C4C0E430((uint64_t)a1, a2, v24, (uint64_t)&v28 + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v30);
  sub_1C4C15874((uint64_t)a1, a2, v25, (uint64_t)&v31 + 12);
  sub_1C4C15874((uint64_t)a1, a2, v12, (uint64_t)&v33 + 8);
  if (DWORD1(v32) == 1)
    *(_QWORD *)((char *)&v32 + 4) = 0x100000001;
  if ((_DWORD)v34 == 1)
    *(_QWORD *)&v34 = 0x100000001;
  if (DWORD1(v35[1]) >= 4)
  {
    v20 = 0;
    v21 = 0;
    v36[0] = (char *)&v28 + 4;
    v36[1] = &v30;
    do
    {
      v22 = v20;
      v23 = v36[v21];
      if (*(_DWORD *)(v23 + 8) != 1 && *(_DWORD *)(v23 + 12) == 1)
        *(_BYTE *)(v23 + 25) = 1;
      v20 = 1;
      v21 = 1;
    }
    while ((v22 & 1) == 0);
  }
  if (*a1 >= 4u)
  {
    if ((DWORD2(v26) - 2) <= 3)
      DWORD1(v35[0]) = dword_1C6A5F9D0[DWORD2(v26) - 2];
    DWORD2(v35[0]) = 94;
  }
  v14 = v35[2];
  *(_OWORD *)(a4 + 160) = v35[1];
  *(_OWORD *)(a4 + 176) = v14;
  *(_OWORD *)(a4 + 188) = *(_OWORD *)((char *)&v35[2] + 12);
  v15 = v33;
  *(_OWORD *)(a4 + 96) = v32;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v35[0];
  *(_OWORD *)(a4 + 128) = v34;
  *(_OWORD *)(a4 + 144) = v16;
  v17 = v29;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v17;
  v18 = v31;
  *(_OWORD *)(a4 + 64) = v30;
  *(_OWORD *)(a4 + 80) = v18;
  result = v27;
  *(_OWORD *)a4 = v26;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6160CF8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  char v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __n128 result;
  unsigned int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[4];
  _QWORD v35[5];

  v35[2] = *MEMORY[0x1E0C80C00];
  *a3 = 100;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v33 = 0u;
  memset(v34, 0, 60);
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v14 = *((_QWORD *)a2 + 2);
  v15 = *(_DWORD *)(v14 + 16 * v8 + 8);
  if (v15 == 2)
  {
    v16 = 6;
  }
  else if (v15 == 1)
  {
    v16 = 7;
  }
  else
  {
    v16 = (v15 + 9) & 0xF;
  }
  BYTE1(v27) = v16;
  LOBYTE(v27) = 1;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v34[3] + 8, (int8x8_t *)((char *)v34 + 12), (uint64_t)&v34[1] + 8);
  DWORD1(v34[1]) = dword_1C6A5FB54[(*(_QWORD *)(v14 + 16 * v26 + 8) & 0xFLL) - 8];
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&v27 + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v11, (uint64_t)&v29);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v30.n128_i64[1] + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v13, (uint64_t)&v32 + 8);
  if (DWORD1(v31) == 1)
    *(_QWORD *)((char *)&v31 + 4) = 0x200000001;
  if ((_DWORD)v33 == 1)
    *(_QWORD *)&v33 = 0x200000001;
  if (DWORD1(v34[1]) >= 4)
  {
    v17 = 0;
    v18 = 0;
    v35[0] = (char *)&v27 + 4;
    v35[1] = &v29;
    do
    {
      v19 = v17;
      v20 = v35[v18];
      if (*(_DWORD *)(v20 + 8) != 1 && *(_DWORD *)(v20 + 12) == 1)
        *(_BYTE *)(v20 + 25) = 1;
      v17 = 1;
      v18 = 1;
    }
    while ((v19 & 1) == 0);
  }
  if (*a1 >= 4u)
    *(_QWORD *)((char *)v34 + 4) = 0x6300000003;
  v21 = v34[2];
  *(_OWORD *)(a4 + 128) = v34[1];
  *(_OWORD *)(a4 + 144) = v21;
  *(_OWORD *)(a4 + 156) = *(_OWORD *)((char *)&v34[2] + 12);
  v22 = v32;
  *(_OWORD *)(a4 + 64) = v31;
  *(_OWORD *)(a4 + 80) = v22;
  v23 = v34[0];
  *(_OWORD *)(a4 + 96) = v33;
  *(_OWORD *)(a4 + 112) = v23;
  v24 = v28;
  *(_OWORD *)a4 = v27;
  *(_OWORD *)(a4 + 16) = v24;
  result = v30;
  *(_OWORD *)(a4 + 32) = v29;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C6160FB0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];

  *a3 = 165;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  memset(v26, 0, 44);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v20);
  v13 = *((_QWORD *)a2 + 2);
  v21.n128_u8[0] = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v26[2] + 8, (int8x8_t *)v26, (uint64_t)v26 + 8);
  v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  if (v14 == 2)
  {
    v15 = 6;
  }
  else if (v14 == 1)
  {
    v15 = 7;
  }
  else
  {
    v15 = (v14 + 9) & 0xF;
  }
  BYTE5(v25) = v15;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v21.n128_i64[1] + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v23 + 8);
  if (DWORD1(v22) == 1)
    *(_QWORD *)((char *)&v22 + 4) = 0x200000001;
  if ((_DWORD)v24 == 1)
    *(_QWORD *)&v24 = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v20) - 2) <= 3)
      DWORD2(v25) = dword_1C6A5F9D0[DWORD2(v20) - 2];
    HIDWORD(v25) = 148;
  }
  v16 = v26[1];
  *(_OWORD *)(a4 + 96) = v26[0];
  *(_OWORD *)(a4 + 112) = v16;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v26[1] + 12);
  v17 = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(_OWORD *)(a4 + 48) = v17;
  v18 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v18;
  result = v21;
  *(_OWORD *)a4 = v20;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C616119C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double result;
  __int128 v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  BOOL v30[16];

  *a3 = 162;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v20 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  sub_1C4C157AC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  v12 = *((_QWORD *)a2 + 2);
  LOBYTE(v22) = (*(_BYTE *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v30, (int8x8_t *)&v27 + 1, (uint64_t)&v28);
  v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  if (v13 == 2)
  {
    v14 = 6;
  }
  else if (v13 == 1)
  {
    v14 = 7;
  }
  else
  {
    v14 = (v13 + 9) & 0xF;
  }
  BYTE13(v26) = v14;
  sub_1C4C15874((uint64_t)a1, a2, v20, (uint64_t)&v23 + 4);
  sub_1C4C15874((uint64_t)a1, a2, v11, (uint64_t)&v25);
  if (HIDWORD(v23) == 1)
    LODWORD(v24) = 1;
  if (DWORD2(v25) == 1)
    *((_QWORD *)&v25 + 1) = 0x100000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v21) - 2) <= 3)
      LODWORD(v27) = dword_1C6A5F9D0[DWORD2(v21) - 2];
    DWORD1(v27) = 145;
  }
  v15 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v29;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v30;
  v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  result = *(double *)&v21;
  v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  return result;
}

double sub_1C6161390(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double result;
  __int128 v19;
  unsigned int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  BOOL v30[16];

  *a3 = 163;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v20 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  sub_1C4C157AC((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v21);
  v12 = *((_QWORD *)a2 + 2);
  LOBYTE(v22) = (*(_BYTE *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v30, (int8x8_t *)&v27 + 1, (uint64_t)&v28);
  v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  if (v13 == 2)
  {
    v14 = 6;
  }
  else if (v13 == 1)
  {
    v14 = 7;
  }
  else
  {
    v14 = (v13 + 9) & 0xF;
  }
  BYTE13(v26) = v14;
  sub_1C4C15874((uint64_t)a1, a2, v20, (uint64_t)&v23 + 4);
  sub_1C4C15874((uint64_t)a1, a2, v11, (uint64_t)&v25);
  if (HIDWORD(v23) == 1)
    LODWORD(v24) = 2;
  if (DWORD2(v25) == 1)
    *((_QWORD *)&v25 + 1) = 0x200000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v21) - 2) <= 3)
      LODWORD(v27) = dword_1C6A5F9D0[DWORD2(v21) - 2];
    DWORD1(v27) = 146;
  }
  v15 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v29;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v30;
  v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  result = *(double *)&v21;
  v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  return result;
}

double sub_1C616158C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  BOOL v29[16];

  *a3 = 161;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  sub_1C4C18D44((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v20);
  sub_1C4C18F14(a1, (uint64_t)a2, v9, (uint64_t)&v20, v29, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  v12 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8);
  if (v12 == 2)
  {
    v13 = 6;
  }
  else if (v12 == 1)
  {
    v13 = 7;
  }
  else
  {
    v13 = (v12 + 9) & 0xF;
  }
  BYTE1(v26) = v13;
  sub_1C4C15874((uint64_t)a1, a2, v19, (uint64_t)&v22 + 8);
  sub_1C4C15874((uint64_t)a1, a2, v11, (uint64_t)&v24 + 4);
  if (v20 <= 1)
  {
    if ((_DWORD)v23 == 1)
      DWORD1(v23) = v21;
    if (HIDWORD(v24) == 1)
      LODWORD(v25) = v21;
  }
  v14 = v27;
  *(_OWORD *)(a4 + 96) = v26;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v28;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v29;
  v15 = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v20;
  v18 = v21;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

__n128 sub_1C6161750(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  char v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 result;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _OWORD v26[3];

  *a3 = 164;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  memset(v26, 0, 44);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v20);
  v13 = *((_QWORD *)a2 + 2);
  v21.n128_u8[0] = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v26[2] + 8, (int8x8_t *)v26, (uint64_t)v26 + 8);
  v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  if (v14 == 2)
  {
    v15 = 6;
  }
  else if (v14 == 1)
  {
    v15 = 7;
  }
  else
  {
    v15 = (v14 + 9) & 0xF;
  }
  BYTE5(v25) = v15;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v21.n128_i64[1] + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v23 + 8);
  if (DWORD1(v22) == 1)
    *(_QWORD *)((char *)&v22 + 4) = 0x100000001;
  if ((_DWORD)v24 == 1)
    *(_QWORD *)&v24 = 0x100000001;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v20) - 2) <= 3)
      DWORD2(v25) = dword_1C6A5F9D0[DWORD2(v20) - 2];
    HIDWORD(v25) = 147;
  }
  v16 = v26[1];
  *(_OWORD *)(a4 + 96) = v26[0];
  *(_OWORD *)(a4 + 112) = v16;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v26[1] + 12);
  v17 = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(_OWORD *)(a4 + 48) = v17;
  v18 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v18;
  result = v21;
  *(_OWORD *)a4 = v20;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C6161934(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  char v17;
  __int128 v18;
  __int128 v19;
  double result;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  BOOL v29[16];

  *a3 = 167;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  v13 = *((_QWORD *)a2 + 2);
  v14 = *(_DWORD *)(v13 + 16 * v8 + 8);
  if (v14 == 2)
  {
    v15 = 6;
  }
  else if (v14 == 1)
  {
    v15 = 7;
  }
  else
  {
    v15 = (v14 + 9) & 0xF;
  }
  BYTE1(v22) = v15;
  LOBYTE(v22) = 1;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v29, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  v16 = *(_DWORD *)(v13 + 16 * v10 + 8);
  if (v16 == 2)
  {
    v17 = 6;
  }
  else if (v16 == 1)
  {
    v17 = 7;
  }
  else
  {
    v17 = (v16 + 9) & 0xF;
  }
  BYTE13(v25) = v17;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v22 + 4);
  sub_1C4C0E920((uint64_t)a1, a2, v12, (uint64_t)&v24);
  if (HIDWORD(v22) == 1)
    LODWORD(v23) = 2;
  if (DWORD2(v24) == 1)
    *((_QWORD *)&v24 + 1) = 0x200000001;
  if (*a1 >= 4u)
    *(_QWORD *)&v26 = 0x9600000003;
  v18 = v27;
  *(_OWORD *)(a4 + 64) = v26;
  *(_OWORD *)(a4 + 80) = v18;
  *(_OWORD *)(a4 + 96) = v28;
  *(_DWORD *)(a4 + 112) = *(_DWORD *)v29;
  v19 = v23;
  *(_OWORD *)a4 = v22;
  *(_OWORD *)(a4 + 16) = v19;
  result = *(double *)&v24;
  v21 = v25;
  *(_OWORD *)(a4 + 32) = v24;
  *(_OWORD *)(a4 + 48) = v21;
  return result;
}

double sub_1C6161B18(unsigned int *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  *a3 = 53;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v27 = 0;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  v20 = 0u;
  memset(v21, 0, sizeof(v21));
  v19 = 0u;
  sub_1C4C12CA8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  v11 = *((_QWORD *)a2 + 2);
  LOBYTE(v20) = (*(_BYTE *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v27, (int8x8_t *)((char *)&v24 + 4), (uint64_t)&v25);
  if (*(_BYTE *)(v11 + 16 * v10) == 1)
  {
    sub_1C4C12430((uint64_t)a1, a2, v10, (uint64_t)v21 + 4);
  }
  else
  {
    BYTE4(v21[0]) = *(_BYTE *)(v11 + 16 * v10 + 8) & 0x7F;
    *(_QWORD *)((char *)v21 + 12) = 0x200000006;
    BYTE4(v21[1]) = 0;
  }
  v12 = *(_DWORD *)a2;
  HIDWORD(v24) = sub_1C4C32DEC(v12) == 22;
  v13 = *a1;
  if (v13 >= 5)
    HIDWORD(v27) = 1;
  sub_1C4C32DEC(v12);
  *((_QWORD *)&v22 + 1) = 0x200000007;
  LODWORD(v22) = 66;
  if (v13 >= 4)
  {
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v23) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v24) = 58;
  }
  v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v26;
  *(_QWORD *)(a4 + 144) = v27;
  v15 = v21[1];
  *(_OWORD *)(a4 + 32) = v21[0];
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v19;
  v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1C6161D14(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  *a3 = 66;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  v13 = *((_QWORD *)a2 + 2);
  LOBYTE(v20) = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v26 + 4, (int8x8_t *)&v23, (uint64_t)&v24 + 4);
  v14 = *(_QWORD *)(v13 + 16 * v11 + 8);
  DWORD2(v23) = *(_QWORD *)(v13 + 16 * v10 + 8);
  HIDWORD(v23) = v14;
  sub_1C4C15874((uint64_t)a1, a2, v12, (uint64_t)&v20 + 12);
  DWORD2(v21) = 1;
  LOBYTE(v24) = 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3)
      DWORD2(v22) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    HIDWORD(v22) = 71;
  }
  v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  *(_OWORD *)(a4 + 96) = v25;
  *(_QWORD *)(a4 + 112) = v26;
  v16 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v16;
  result = *(double *)&v21;
  v18 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v18;
  return result;
}

__n128 sub_1C6161EB0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  __int128 v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  *a3 = 140;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  v13 = *((_QWORD *)a2 + 2);
  v20.n128_u8[0] = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v27 + 12, (int8x8_t *)((char *)&v24 + 12), (uint64_t)&v25 + 12);
  v14 = *(_QWORD *)(v13 + 16 * v10 + 8);
  DWORD1(v25) = dword_1C6A5FB54[(v14 & 0xF) - 8];
  BYTE8(v25) = (v14 & 0x10) != 0;
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v20.n128_i64[1] + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v22 + 8);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3)
      DWORD1(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    DWORD2(v24) = 139;
  }
  v15 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v27;
  v16 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v17;
  result = v20;
  *(_OWORD *)a4 = v19;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C6162064(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double result;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;

  *a3 = 139;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  sub_1C4C0BC90(a1, (uint64_t)a2, v8, (uint64_t)&v21);
  v13 = *((_QWORD *)a2 + 2);
  LOBYTE(v22) = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v29 + 12, (int8x8_t *)((char *)&v26 + 12), (uint64_t)&v27 + 12);
  v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  DWORD1(v27) = v14 & 0xF;
  BYTE8(v27) = (v14 & 0x10) != 0;
  sub_1C4C1280C(a1, (uint64_t)a2, v11, (uint64_t)&v22 + 12);
  sub_1C4C1280C(a1, (uint64_t)a2, v12, (uint64_t)&v24 + 8);
  if (*(_DWORD *)a1 >= 5u)
  {
    v30 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v20 = sub_1C4C915C4(*(_DWORD *)a2);
      if ((v20 & 0xFF00000000) == 0 || v20 != 47)
        v30 = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_8;
  }
  if ((DWORD2(v21) - 2) <= 3)
    DWORD1(v26) = dword_1C6A5F9D0[DWORD2(v21) - 2];
  DWORD2(v26) = 138;
LABEL_8:
  v15 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v29;
  *(_DWORD *)(a4 + 144) = v30;
  v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  result = *(double *)&v21;
  v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  return result;
}

double sub_1C6162258(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double result;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;

  *a3 = 173;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  sub_1C4C0BC90(a1, (uint64_t)a2, v8, (uint64_t)&v21);
  v13 = *((_QWORD *)a2 + 2);
  LOBYTE(v22) = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v29 + 12, (int8x8_t *)((char *)&v26 + 12), (uint64_t)&v27 + 12);
  v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  DWORD1(v27) = v14 & 0xF;
  BYTE8(v27) = (v14 & 0x10) != 0;
  sub_1C4C1280C(a1, (uint64_t)a2, v11, (uint64_t)&v22 + 12);
  sub_1C4C1280C(a1, (uint64_t)a2, v12, (uint64_t)&v24 + 8);
  if (*(_DWORD *)a1 >= 5u)
  {
    v30 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v20 = sub_1C4C915C4(*(_DWORD *)a2);
      if ((v20 & 0xFF00000000) == 0 || v20 != 47)
        v30 = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_3;
  }
  if ((DWORD2(v21) - 2) <= 3)
    DWORD1(v26) = dword_1C6A5F9D0[DWORD2(v21) - 2];
  DWORD2(v26) = 156;
LABEL_3:
  v15 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v29;
  *(_DWORD *)(a4 + 144) = v30;
  v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  result = *(double *)&v21;
  v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  return result;
}

__n128 sub_1C616244C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  __int128 v19;
  __n128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  *a3 = 174;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  v13 = *((_QWORD *)a2 + 2);
  v20.n128_u8[0] = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v27 + 12, (int8x8_t *)((char *)&v24 + 12), (uint64_t)&v25 + 12);
  v14 = *(_QWORD *)(v13 + 16 * v10 + 8);
  DWORD1(v25) = dword_1C6A5FB54[(v14 & 0xF) - 8];
  BYTE8(v25) = (v14 & 0x10) != 0;
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v20.n128_i64[1] + 4);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v12, (uint64_t)&v22 + 8);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3)
      DWORD1(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    DWORD2(v24) = 157;
  }
  v15 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v27;
  v16 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v17;
  result = v20;
  *(_OWORD *)a4 = v19;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C6162600(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double result;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;

  *a3 = 173;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v30 = 0;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  sub_1C4C0BC90(a1, (uint64_t)a2, v8, (uint64_t)&v21);
  v13 = *((_QWORD *)a2 + 2);
  LOBYTE(v22) = (*(_BYTE *)(v13 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v29 + 12, (int8x8_t *)((char *)&v26 + 12), (uint64_t)&v27 + 12);
  v14 = *(_DWORD *)(v13 + 16 * v10 + 8);
  DWORD1(v27) = v14 & 0xF;
  BYTE8(v27) = (v14 & 0x10) != 0;
  sub_1C4C1280C(a1, (uint64_t)a2, v11, (uint64_t)&v22 + 12);
  sub_1C4C1280C(a1, (uint64_t)a2, v12, (uint64_t)&v24 + 8);
  if (*(_DWORD *)a1 >= 5u)
  {
    v30 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v20 = sub_1C4C915C4(*(_DWORD *)a2);
      if ((v20 & 0xFF00000000) == 0 || v20 != 47)
        v30 = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_8;
  }
  if ((DWORD2(v21) - 2) <= 3)
    DWORD1(v26) = dword_1C6A5F9D0[DWORD2(v21) - 2];
  DWORD2(v26) = 156;
LABEL_8:
  v15 = v28;
  *(_OWORD *)(a4 + 96) = v27;
  *(_OWORD *)(a4 + 112) = v15;
  *(_OWORD *)(a4 + 128) = v29;
  *(_DWORD *)(a4 + 144) = v30;
  v16 = v24;
  *(_OWORD *)(a4 + 32) = v23;
  *(_OWORD *)(a4 + 48) = v16;
  v17 = v26;
  *(_OWORD *)(a4 + 64) = v25;
  *(_OWORD *)(a4 + 80) = v17;
  result = *(double *)&v21;
  v19 = v22;
  *(_OWORD *)a4 = v21;
  *(_OWORD *)(a4 + 16) = v19;
  return result;
}

__n128 sub_1C61627F4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  *a3 = 176;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v18 = sub_1C4C2FD5C(v7);
  v29 = 0;
  v12 = sub_1C4C2FD5C(v7);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v29 + 4, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v20 + 12);
  if (DWORD1(v21) == 1)
    *(_QWORD *)((char *)&v21 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v22.n128_i64[1]);
  if ((_DWORD)v23 == 1)
    *(_QWORD *)&v23 = 0x200000001;
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v18, (uint64_t)&v24 + 4);
  if ((*(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v12 + 8) & 7uLL) - 1 <= 4)
    LODWORD(v29) = (*(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v12 + 8) & 7) - 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3)
      LODWORD(v26) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    DWORD1(v26) = 159;
  }
  v13 = v28;
  *(_OWORD *)(a4 + 128) = v27;
  *(_OWORD *)(a4 + 144) = v13;
  *(_QWORD *)(a4 + 160) = v29;
  v14 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v14;
  v15 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v16;
  result = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

__n128 sub_1C6162A00(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  unsigned int v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  *a3 = 175;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v18 = sub_1C4C2FD5C(v7);
  v29 = 0;
  v12 = sub_1C4C2FD5C(v7);
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v29 + 4, (int8x8_t *)&v26 + 1, (uint64_t)&v27);
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v20 + 12);
  if (DWORD1(v21) == 1)
    *(_QWORD *)((char *)&v21 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v22.n128_i64[1]);
  if ((_DWORD)v23 == 1)
    *(_QWORD *)&v23 = 0x200000001;
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v18, (uint64_t)&v24 + 4);
  if ((*(_QWORD *)(*((_QWORD *)a2 + 2) + 16 * v12 + 8) & 7uLL) - 1 <= 4)
    LODWORD(v29) = (*(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v12 + 8) & 7) - 1;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3)
      LODWORD(v26) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    DWORD1(v26) = 158;
  }
  v13 = v28;
  *(_OWORD *)(a4 + 128) = v27;
  *(_OWORD *)(a4 + 144) = v13;
  *(_QWORD *)(a4 + 160) = v29;
  v14 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v14;
  v15 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v15;
  v16 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v16;
  result = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C6162C0C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  double result;
  __int128 v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  int v45;

  *a3 = 52;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v45 = 0;
  v13 = sub_1C4C2FD5C(v7);
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v30);
  LOBYTE(v31) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v9, (BOOL *)&v44 + 12, (int8x8_t *)&v41 + 1, (uint64_t)&v42 + 4);
  sub_1C4C0E920(a1, a2, v10, (uint64_t)&v35 + 12);
  if (DWORD1(v36) == 1)
    *(_QWORD *)((char *)&v36 + 4) = 0x200000001;
  sub_1C4C0E920(a1, a2, v11, (uint64_t)&v37 + 8);
  if ((_DWORD)v38 == 1)
    *(_QWORD *)&v38 = 0x200000001;
  v14 = *(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v12 + 8);
  BYTE4(v44) = (v14 & 4) != 0;
  BYTE5(v44) = (v14 & 2) != 0;
  BYTE6(v44) = v14 & 1;
  sub_1C4C0C39C(a1, (uint64_t)a2, v27, (uint64_t)&v39 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v28, (uint64_t)&v32 + 4);
  sub_1C4C1280C(a1, (uint64_t)a2, v29, (uint64_t)&v34);
  v15 = *((_QWORD *)a2 + 2);
  LODWORD(v42) = *(_QWORD *)(v15 + 16 * v26 + 8);
  v16 = (*(_QWORD *)(v15 + 16 * v13 + 8) & 7) - 1;
  if (v16 <= 4)
    DWORD2(v44) = v16;
  if (*(_DWORD *)a1 >= 5u)
  {
    v45 = 1;
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
    {
      v25 = sub_1C4C915C4(*(_DWORD *)a2);
      if ((v25 & 0xFF00000000) == 0 || v25 != 47)
        v45 = 0;
    }
  }
  else if (*(_DWORD *)a1 != 4)
  {
    goto LABEL_14;
  }
  if ((DWORD2(v30) - 2) <= 3)
    LODWORD(v41) = dword_1C6A5F9D0[DWORD2(v30) - 2];
  DWORD1(v41) = 57;
LABEL_14:
  v17 = v43;
  *(_OWORD *)(a4 + 192) = v42;
  *(_OWORD *)(a4 + 208) = v17;
  *(_OWORD *)(a4 + 224) = v44;
  *(_DWORD *)(a4 + 240) = v45;
  v18 = v39;
  *(_OWORD *)(a4 + 128) = v38;
  *(_OWORD *)(a4 + 144) = v18;
  v19 = v41;
  *(_OWORD *)(a4 + 160) = v40;
  *(_OWORD *)(a4 + 176) = v19;
  v20 = v35;
  *(_OWORD *)(a4 + 64) = v34;
  *(_OWORD *)(a4 + 80) = v20;
  v21 = v37;
  *(_OWORD *)(a4 + 96) = v36;
  *(_OWORD *)(a4 + 112) = v21;
  v22 = v31;
  *(_OWORD *)a4 = v30;
  *(_OWORD *)(a4 + 16) = v22;
  result = *(double *)&v32;
  v24 = v33;
  *(_OWORD *)(a4 + 32) = v32;
  *(_OWORD *)(a4 + 48) = v24;
  return result;
}

__n128 sub_1C6162F1C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 141;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 140;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C61630A8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 138;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 137;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6163230(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 143;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 142;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C61633B8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 142;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 141;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6163544(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 142;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 141;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C61636CC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 171;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 154;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6163858(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 171;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 154;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C61639E8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 172;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 155;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6163B70(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 178;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 161;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6163CF8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 177;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v17.n128_i64[1] + 4);
  if (DWORD1(v18) == 1)
    *(_QWORD *)((char *)&v18 + 4) = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v11 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v11, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 160;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6163E84(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  *a3 = 21;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v16);
  v17.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v24 + 4, (int8x8_t *)((char *)&v21 + 12), (uint64_t)&v22 + 4);
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&v19 + 8);
  if ((_DWORD)v20 == 1)
    *(_QWORD *)&v20 = 0x200000001;
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v17.n128_i64[1] + 4);
  if (*a1 >= 4u)
  {
    if ((DWORD2(v16) - 2) <= 3)
      DWORD1(v21) = dword_1C6A5F9D0[DWORD2(v16) - 2];
    DWORD2(v21) = 26;
  }
  v12 = v23;
  *(_OWORD *)(a4 + 96) = v22;
  *(_OWORD *)(a4 + 112) = v12;
  *(_QWORD *)(a4 + 128) = v24;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21;
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C616400C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 124;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 123;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C616419C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 125;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 131;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C616432C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 126;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 136;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C61644BC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 147;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 169;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C616464C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 148;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 177;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C61647DC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 149;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 182;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C616496C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 124;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 123;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6164AFC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 125;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 131;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6164C8C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 126;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 136;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6164E1C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 147;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 169;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6164FAC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 148;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 177;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C616513C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 149;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 182;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C61652CC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 134;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 132;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6165474(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 136;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1)
    *(_QWORD *)((char *)&v17 + 4) = 0x200000001;
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 134;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6165634(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 135;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 133;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C61657DC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 137;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1)
    *(_QWORD *)((char *)&v17 + 4) = 0x200000001;
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 135;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C616599C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 160;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1)
    *(_QWORD *)((char *)&v17 + 4) = 0x200000001;
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  else
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 181;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6165B5C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 133;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 130;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6165D00(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 134;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 132;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6165EA4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 136;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1)
    *(_QWORD *)((char *)&v17 + 4) = 0x200000001;
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 134;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C616605C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 135;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 133;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6166200(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 137;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1)
    *(_QWORD *)((char *)&v17 + 4) = 0x200000001;
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 135;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C61663B8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 156;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 176;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C616655C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 157;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 178;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6166700(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 159;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1)
    *(_QWORD *)((char *)&v17 + 4) = 0x200000001;
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 180;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C61668B8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 158;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 179;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6166A5C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[4];

  *a3 = 160;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  memset(v20, 0, 60);
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)&v16.n128_i64[1] + 4);
  if (DWORD1(v17) == 1)
    *(_QWORD *)((char *)&v17 + 4) = 0x200000001;
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20[3] + 8, (int8x8_t *)((char *)v20 + 12), (uint64_t)&v20[1] + 8);
  if (DWORD1(v17) == 1)
    DWORD2(v17) = HIDWORD(v15);
  DWORD1(v20[1]) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    *((_QWORD *)&v18 + 1) = 0;
    v19 = 0uLL;
    LODWORD(v20[0]) = 0;
    if ((DWORD2(v15) - 2) <= 3)
      DWORD1(v20[0]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    DWORD2(v20[0]) = 181;
  }
  else
  {
    *(_QWORD *)&v19 = 0x100000001;
    WORD4(v18) = 1;
  }
  v11 = v20[2];
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 124) = *(_OWORD *)((char *)&v20[2] + 12);
  v12 = v18;
  *(_OWORD *)(a4 + 32) = v17;
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v20[0];
  *(_OWORD *)(a4 + 64) = v19;
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6166C14(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  _OWORD v17[4];
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *a3 = 127;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  v15 = 0u;
  sub_1C4C21B68((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C15874((uint64_t)a1, a2, v9, (uint64_t)v17);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20 + 12, (int8x8_t *)&v18, (uint64_t)&v18 + 12);
  DWORD2(v18) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    memset((char *)&v17[1] + 12, 0, 28);
    if ((DWORD2(v15) - 2) <= 3)
      DWORD2(v17[3]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    HIDWORD(v17[3]) = 124;
  }
  else
  {
    *(_QWORD *)((char *)&v17[2] + 4) = 0x100000001;
    WORD6(v17[1]) = 1;
  }
  v11 = v19;
  *(_OWORD *)(a4 + 96) = v18;
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 128) = v20;
  v12 = v17[1];
  *(_OWORD *)(a4 + 32) = v17[0];
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v17[3];
  *(_OWORD *)(a4 + 64) = v17[2];
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C6166DB4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 129;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v13 = sub_1C4C915C4(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 126;
  }
  v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v19;
  v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

__n128 sub_1C6166FA0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  _OWORD v17[4];
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *a3 = 128;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  v15 = 0u;
  sub_1C4C21B68((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C15874((uint64_t)a1, a2, v9, (uint64_t)v17);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20 + 12, (int8x8_t *)&v18, (uint64_t)&v18 + 12);
  DWORD2(v18) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)((char *)&v17[2] + 4) = 0x100000001;
    WORD6(v17[1]) = 1;
  }
  else
  {
    memset((char *)&v17[1] + 12, 0, 28);
    if ((DWORD2(v15) - 2) <= 3)
      DWORD2(v17[3]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    HIDWORD(v17[3]) = 125;
  }
  v11 = v19;
  *(_OWORD *)(a4 + 96) = v18;
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 128) = v20;
  v12 = v17[1];
  *(_OWORD *)(a4 + 32) = v17[0];
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v17[3];
  *(_OWORD *)(a4 + 64) = v17[2];
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C6167140(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 130;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v13 = sub_1C4C915C4(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 127;
  }
  v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v19;
  v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1C616732C(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 131;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v13 = sub_1C4C915C4(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 128;
  }
  v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v19;
  v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1C6167518(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 132;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v13 = sub_1C4C915C4(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 129;
  }
  v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v19;
  v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1C6167704(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 129;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 4u)
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v18 = sub_1C4C915C4(v11);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 126;
  }
  else
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  result = *(double *)&v19;
  v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

double sub_1C61678F4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 130;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 4u)
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v18 = sub_1C4C915C4(v11);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 127;
  }
  else
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  result = *(double *)&v19;
  v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

double sub_1C6167AE4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 131;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 4u)
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v18 = sub_1C4C915C4(v11);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 128;
  }
  else
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  result = *(double *)&v19;
  v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

double sub_1C6167CD4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 132;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 4u)
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v18 = sub_1C4C915C4(v11);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 129;
  }
  else
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  result = *(double *)&v19;
  v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

__n128 sub_1C6167EC4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  _OWORD v17[4];
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *a3 = 150;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  v15 = 0u;
  sub_1C4C21B68((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C15874((uint64_t)a1, a2, v9, (uint64_t)v17);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20 + 12, (int8x8_t *)&v18, (uint64_t)&v18 + 12);
  DWORD2(v18) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 <= 3u)
  {
    *(_QWORD *)((char *)&v17[2] + 4) = 0x100000001;
    WORD6(v17[1]) = 1;
  }
  else
  {
    memset((char *)&v17[1] + 12, 0, 28);
    if ((DWORD2(v15) - 2) <= 3)
      DWORD2(v17[3]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    HIDWORD(v17[3]) = 170;
  }
  v11 = v19;
  *(_OWORD *)(a4 + 96) = v18;
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 128) = v20;
  v12 = v17[1];
  *(_OWORD *)(a4 + 32) = v17[0];
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v17[3];
  *(_OWORD *)(a4 + 64) = v17[2];
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C6168064(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 152;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v13 = sub_1C4C915C4(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 172;
  }
  v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v19;
  v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

__n128 sub_1C6168250(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __n128 v16;
  _OWORD v17[4];
  __int128 v18;
  __int128 v19;
  __int128 v20;

  *a3 = 151;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  v15 = 0u;
  sub_1C4C21B68((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v15);
  sub_1C4C15874((uint64_t)a1, a2, v9, (uint64_t)v17);
  v16.n128_u8[0] = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v10, (BOOL *)&v20 + 12, (int8x8_t *)&v18, (uint64_t)&v18 + 12);
  DWORD2(v18) = sub_1C4C32DEC(*(_DWORD *)a2) == 67;
  if (*a1 > 3u)
  {
    memset((char *)&v17[1] + 12, 0, 28);
    if ((DWORD2(v15) - 2) <= 3)
      DWORD2(v17[3]) = dword_1C6A5F9D0[DWORD2(v15) - 2];
    HIDWORD(v17[3]) = 171;
  }
  else
  {
    *(_QWORD *)((char *)&v17[2] + 4) = 0x100000001;
    WORD6(v17[1]) = 1;
  }
  v11 = v19;
  *(_OWORD *)(a4 + 96) = v18;
  *(_OWORD *)(a4 + 112) = v11;
  *(_OWORD *)(a4 + 128) = v20;
  v12 = v17[1];
  *(_OWORD *)(a4 + 32) = v17[0];
  *(_OWORD *)(a4 + 48) = v12;
  v13 = v17[3];
  *(_OWORD *)(a4 + 64) = v17[2];
  *(_OWORD *)(a4 + 80) = v13;
  result = v16;
  *(_OWORD *)a4 = v15;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C61683F0(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 153;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v13 = sub_1C4C915C4(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 173;
  }
  v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v19;
  v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1C61685DC(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 154;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v13 = sub_1C4C915C4(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 174;
  }
  v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v19;
  v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1C61687C8(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 155;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 < 4u)
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  else
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v13 = sub_1C4C915C4(v11);
        if ((v13 & 0xFF00000000) == 0 || v13 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 175;
  }
  v14 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v15 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v19;
  v18 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1C61689B4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 153;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 4u)
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v18 = sub_1C4C915C4(v11);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 173;
  }
  else
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  result = *(double *)&v19;
  v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

double sub_1C6168BA4(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 154;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 4u)
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v18 = sub_1C4C915C4(v11);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 174;
  }
  else
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  result = *(double *)&v19;
  v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

double sub_1C6168D94(uint64_t a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  *a3 = 155;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8(a1, (uint64_t)a2, v8, (uint64_t)&v19);
  sub_1C4C15874(a1, a2, v9, (uint64_t)&v21 + 4);
  LOBYTE(v20) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v10 + 8) & 0x20) != 0;
  sub_1C4C0B76C((_DWORD *)a1, (uint64_t)a2, v10, (BOOL *)&v28, (int8x8_t *)((char *)&v25 + 4), (uint64_t)&v26);
  v11 = *(_DWORD *)a2;
  HIDWORD(v25) = sub_1C4C32DEC(v11) == 67;
  v12 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 >= 4u)
  {
    v23 = 0uLL;
    DWORD2(v24) = 0;
    *(_QWORD *)&v24 = 0;
    if (v12 != 4)
    {
      HIDWORD(v28) = 1;
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 196) & 2) != 0)
      {
        v18 = sub_1C4C915C4(v11);
        if ((v18 & 0xFF00000000) == 0 || v18 != 47)
          HIDWORD(v28) = 0;
      }
    }
    if ((DWORD2(v19) - 2) <= 3)
      HIDWORD(v24) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    LODWORD(v25) = 175;
  }
  else
  {
    *((_QWORD *)&v23 + 1) = 0x100000001;
    LOWORD(v23) = 1;
  }
  v13 = v26;
  *(_OWORD *)(a4 + 96) = v25;
  *(_OWORD *)(a4 + 112) = v13;
  *(_OWORD *)(a4 + 128) = v27;
  *(_QWORD *)(a4 + 144) = v28;
  v14 = v22;
  *(_OWORD *)(a4 + 32) = v21;
  *(_OWORD *)(a4 + 48) = v14;
  v15 = v24;
  *(_OWORD *)(a4 + 64) = v23;
  *(_OWORD *)(a4 + 80) = v15;
  result = *(double *)&v19;
  v17 = v20;
  *(_OWORD *)a4 = v19;
  *(_OWORD *)(a4 + 16) = v17;
  return result;
}

double sub_1C6168F84(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  unsigned int v7;
  __int128 v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  *a3 = 145;
  v7 = sub_1C4C2FD5C(*a2);
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v7, (BOOL *)&v12 + 12, (int8x8_t *)((char *)&v10 + 4), (unint64_t)&v10 | 0xC);
  v8 = v11;
  *a4 = v10;
  a4[1] = v8;
  result = *(double *)&v12;
  a4[2] = v12;
  return result;
}

__n128 sub_1C6169008(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[4];

  *a3 = 196;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v16 = 0u;
  memset(v17, 0, 60);
  v14 = 0u;
  v15 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v17[3] + 8, (int8x8_t *)&v14 + 1, (uint64_t)&v15);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)v17);
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&v17[1] + 12);
  if (*a1 >= 4u)
    *(_QWORD *)&v14 = 0xC100000002;
  v11 = v17[2];
  *(_OWORD *)(a4 + 64) = v17[1];
  *(_OWORD *)(a4 + 80) = v11;
  *(_OWORD *)(a4 + 92) = *(_OWORD *)((char *)&v17[2] + 12);
  v12 = v15;
  *(_OWORD *)a4 = v14;
  *(_OWORD *)(a4 + 16) = v12;
  result = (__n128)v17[0];
  *(_OWORD *)(a4 + 32) = v16;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C6169120(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  unsigned int v7;
  __int128 v8;
  double result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  BOOL v13[16];

  *a3 = 197;
  v7 = sub_1C4C2FD5C(*a2);
  *(_DWORD *)v13 = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v7, v13, (int8x8_t *)&v10 + 1, (uint64_t)&v11);
  if (*a1 >= 4u)
    *(_QWORD *)&v10 = 0xC200000002;
  v8 = v11;
  *(_OWORD *)a4 = v10;
  *(_OWORD *)(a4 + 16) = v8;
  result = *(double *)&v12;
  *(_OWORD *)(a4 + 32) = v12;
  *(_DWORD *)(a4 + 48) = *(_DWORD *)v13;
  return result;
}

__n128 sub_1C61691C8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  __int128 v10;
  __n128 result;
  _OWORD v12[3];
  __int128 v13;
  __int128 v14;

  *a3 = 201;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v13 = 0u;
  v14 = 0u;
  memset(v12, 0, sizeof(v12));
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v14 + 12, (int8x8_t *)((char *)&v12[2] + 4), (uint64_t)&v12[2] + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v9, (uint64_t)v12);
  if (*a1 >= 4u)
    *(_QWORD *)((char *)&v12[1] + 12) = 0xC600000002;
  v10 = v13;
  *(_OWORD *)(a4 + 32) = v12[2];
  *(_OWORD *)(a4 + 48) = v10;
  *(_OWORD *)(a4 + 64) = v14;
  result = (__n128)v12[1];
  *(_OWORD *)a4 = v12[0];
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C61692A4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  *a3 = 168;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  sub_1C4C0B76C(a1, (uint64_t)a2, v8, (BOOL *)&v22 + 12, (int8x8_t *)&v19 + 1, (uint64_t)&v20);
  v12 = *((_QWORD *)a2 + 2);
  if (*(_BYTE *)(v12 + 16 * v9) == 5)
    v13 = 0;
  else
    v13 = *(_DWORD *)(v12 + 16 * v9 + 8);
  LODWORD(v22) = v13;
  if (*(_BYTE *)(v12 + 16 * v10) == 5)
    v14 = 0;
  else
    v14 = *(_DWORD *)(v12 + 16 * v10 + 8);
  DWORD1(v22) = v14;
  if (*(_BYTE *)(v12 + 16 * v11) == 5)
    v15 = 0;
  else
    v15 = *(_DWORD *)(v12 + 16 * v11 + 8);
  DWORD2(v22) = v15;
  if (*a1 >= 4u)
    *(_QWORD *)&v19 = 0x9800000003;
  v16 = v20;
  *a4 = v19;
  a4[1] = v16;
  result = *(double *)&v21;
  v18 = v22;
  a4[2] = v21;
  a4[3] = v18;
  return result;
}

double sub_1C6169408(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  BOOL v26[16];

  *a3 = 77;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C24604((uint64_t)a1, a2, v8, (uint64_t)&v17);
  BYTE12(v17) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v26, (int8x8_t *)&v23, (uint64_t)&v23 + 12);
  sub_1C4C24934((uint64_t)a1, a2, v10, (uint64_t)&v18 + 8);
  sub_1C4C24934((uint64_t)a1, a2, v11, (uint64_t)&v20 + 8);
  BYTE8(v23) = 1;
  HIDWORD(v25) = sub_1C4C32DEC(*(_DWORD *)a2) == 47;
  if (*a1 >= 4u)
    *((_QWORD *)&v22 + 1) = 0x5300000003;
  v12 = v24;
  *(_OWORD *)(a4 + 96) = v23;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v25;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v26;
  v13 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v14;
  result = *(double *)&v17;
  v16 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v16;
  return result;
}

__n128 sub_1C61695A0(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  __int128 v22;
  __int128 v23;

  *a3 = 210;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v22 = 0u;
  v23 = 0u;
  memset(v21, 0, sizeof(v21));
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  sub_1C4C24604((uint64_t)a1, a2, v8, (uint64_t)&v16);
  BYTE12(v16) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v23 + 12, (int8x8_t *)((char *)&v21[1] + 4), (uint64_t)&v21[1] + 12);
  sub_1C4C2469C((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1]);
  sub_1C4C249F0((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  DWORD2(v21[0]) = 1;
  sub_1C4C32DEC(*(_DWORD *)a2);
  if (*a1 >= 4u)
    *(_QWORD *)((char *)v21 + 12) = 0xD500000003;
  v12 = v22;
  *(_OWORD *)(a4 + 96) = v21[1];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v23;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21[0];
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

__n128 sub_1C6169710(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  __int128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD v21[2];
  __int128 v22;
  __int128 v23;

  *a3 = 211;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v22 = 0u;
  v23 = 0u;
  memset(v21, 0, sizeof(v21));
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  sub_1C4C24604((uint64_t)a1, a2, v8, (uint64_t)&v16);
  BYTE12(v16) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v23 + 12, (int8x8_t *)((char *)&v21[1] + 4), (uint64_t)&v21[1] + 12);
  sub_1C4C249F0((uint64_t)a1, a2, v10, (uint64_t)&v17.n128_i64[1]);
  sub_1C4C2469C((uint64_t)a1, a2, v11, (uint64_t)&v19 + 8);
  DWORD2(v21[0]) = 1;
  sub_1C4C32DEC(*(_DWORD *)a2);
  if (*a1 >= 4u)
    *(_QWORD *)((char *)v21 + 12) = 0xD600000003;
  v12 = v22;
  *(_OWORD *)(a4 + 96) = v21[1];
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v23;
  v13 = v19;
  *(_OWORD *)(a4 + 32) = v18;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v21[0];
  *(_OWORD *)(a4 + 64) = v20;
  *(_OWORD *)(a4 + 80) = v14;
  result = v17;
  *(_OWORD *)a4 = v16;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

double sub_1C6169880(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  BOOL v26[16];

  *a3 = 212;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C24604((uint64_t)a1, a2, v8, (uint64_t)&v17);
  BYTE12(v17) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v26, (int8x8_t *)&v23, (uint64_t)&v23 + 12);
  sub_1C4C24934((uint64_t)a1, a2, v10, (uint64_t)&v18 + 8);
  sub_1C4C24934((uint64_t)a1, a2, v11, (uint64_t)&v20 + 8);
  BYTE8(v23) = 0;
  HIDWORD(v25) = sub_1C4C32DEC(*(_DWORD *)a2) == 47;
  if (*a1 >= 4u)
    *((_QWORD *)&v22 + 1) = 0xD700000003;
  v12 = v24;
  *(_OWORD *)(a4 + 96) = v23;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v25;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v26;
  v13 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v14;
  result = *(double *)&v17;
  v16 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v16;
  return result;
}

double sub_1C6169A14(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  BOOL v26[16];

  *a3 = 212;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C24604((uint64_t)a1, a2, v8, (uint64_t)&v17);
  BYTE12(v17) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v26, (int8x8_t *)&v23, (uint64_t)&v23 + 12);
  sub_1C4C24934((uint64_t)a1, a2, v10, (uint64_t)&v18 + 8);
  sub_1C4C24934((uint64_t)a1, a2, v11, (uint64_t)&v20 + 8);
  BYTE8(v23) = 1;
  HIDWORD(v25) = sub_1C4C32DEC(*(_DWORD *)a2) == 47;
  if (*a1 >= 4u)
    *((_QWORD *)&v22 + 1) = 0xD700000003;
  v12 = v24;
  *(_OWORD *)(a4 + 96) = v23;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v25;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v26;
  v13 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v14;
  result = *(double *)&v17;
  v16 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v16;
  return result;
}

double sub_1C6169BAC(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  BOOL v26[16];

  *a3 = 213;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C24604((uint64_t)a1, a2, v8, (uint64_t)&v17);
  BYTE12(v17) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v26, (int8x8_t *)&v23, (uint64_t)&v23 + 12);
  sub_1C4C24934((uint64_t)a1, a2, v10, (uint64_t)&v18 + 8);
  sub_1C4C24934((uint64_t)a1, a2, v11, (uint64_t)&v20 + 8);
  BYTE8(v23) = 0;
  HIDWORD(v25) = sub_1C4C32DEC(*(_DWORD *)a2) == 47;
  if (*a1 >= 4u)
    *((_QWORD *)&v22 + 1) = 0xD800000003;
  v12 = v24;
  *(_OWORD *)(a4 + 96) = v23;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v25;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v26;
  v13 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v14;
  result = *(double *)&v17;
  v16 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v16;
  return result;
}

double sub_1C6169D40(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  BOOL v26[16];

  *a3 = 213;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  sub_1C4C24604((uint64_t)a1, a2, v8, (uint64_t)&v17);
  BYTE12(v17) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v26, (int8x8_t *)&v23, (uint64_t)&v23 + 12);
  sub_1C4C24934((uint64_t)a1, a2, v10, (uint64_t)&v18 + 8);
  sub_1C4C24934((uint64_t)a1, a2, v11, (uint64_t)&v20 + 8);
  BYTE8(v23) = 1;
  HIDWORD(v25) = sub_1C4C32DEC(*(_DWORD *)a2) == 47;
  if (*a1 >= 4u)
    *((_QWORD *)&v22 + 1) = 0xD800000003;
  v12 = v24;
  *(_OWORD *)(a4 + 96) = v23;
  *(_OWORD *)(a4 + 112) = v12;
  *(_OWORD *)(a4 + 128) = v25;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v26;
  v13 = v20;
  *(_OWORD *)(a4 + 32) = v19;
  *(_OWORD *)(a4 + 48) = v13;
  v14 = v22;
  *(_OWORD *)(a4 + 64) = v21;
  *(_OWORD *)(a4 + 80) = v14;
  result = *(double *)&v17;
  v16 = v18;
  *(_OWORD *)a4 = v17;
  *(_OWORD *)(a4 + 16) = v16;
  return result;
}

__n128 sub_1C6169ED8(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  unsigned int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  BOOL v28[16];

  *a3 = 200;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v17 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v28 = 0;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v18);
  LOBYTE(v19) = (*(_BYTE *)(*((_QWORD *)a2 + 2) + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v28, (int8x8_t *)&v25 + 1, (uint64_t)&v26);
  sub_1C4C0E430((uint64_t)a1, a2, v10, (uint64_t)&v19 + 12);
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v21.n128_i64[1]);
  if ((_DWORD)v22 == 1)
    *(_QWORD *)&v22 = 0x200000001;
  sub_1C4C0E920((uint64_t)a1, a2, v17, (uint64_t)&v23 + 4);
  if (HIDWORD(v23) == 1)
    LODWORD(v24) = 2;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v18) - 2) <= 3)
      LODWORD(v25) = dword_1C6A5F9D0[DWORD2(v18) - 2];
    DWORD1(v25) = 197;
  }
  v12 = v27;
  *(_OWORD *)(a4 + 128) = v26;
  *(_OWORD *)(a4 + 144) = v12;
  *(_DWORD *)(a4 + 160) = *(_DWORD *)v28;
  v13 = v23;
  *(_OWORD *)(a4 + 64) = v22;
  *(_OWORD *)(a4 + 80) = v13;
  v14 = v25;
  *(_OWORD *)(a4 + 96) = v24;
  *(_OWORD *)(a4 + 112) = v14;
  v15 = v19;
  *(_OWORD *)a4 = v18;
  *(_OWORD *)(a4 + 16) = v15;
  result = v21;
  *(_OWORD *)(a4 + 32) = v20;
  *(__n128 *)(a4 + 48) = result;
  return result;
}

double sub_1C616A0B4(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  BOOL v29[16];

  *a3 = 120;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v19 = sub_1C4C2FD5C(v7);
  *(_DWORD *)v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v20);
  v12 = *((_QWORD *)a2 + 2);
  LOBYTE(v21) = (*(_BYTE *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, v29, (int8x8_t *)((char *)&v25 + 12), (uint64_t)&v27);
  v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  BYTE4(v26) = (v13 & 0x10) != 0;
  BYTE12(v26) = (~(_BYTE)v13 & 0x60) == 0;
  DWORD2(v26) = v13 & 3;
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v11, (uint64_t)&v21 + 12);
  sub_1C4C1280C((uint64_t)a1, (uint64_t)a2, v19, (uint64_t)&v23 + 8);
  if (!BYTE12(v26))
    LODWORD(v24) = 0;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v20) - 2) <= 3)
      DWORD1(v25) = dword_1C6A5F9D0[DWORD2(v20) - 2];
    DWORD2(v25) = 117;
  }
  v14 = v27;
  *(_OWORD *)(a4 + 96) = v26;
  *(_OWORD *)(a4 + 112) = v14;
  *(_OWORD *)(a4 + 128) = v28;
  *(_DWORD *)(a4 + 144) = *(_DWORD *)v29;
  v15 = v23;
  *(_OWORD *)(a4 + 32) = v22;
  *(_OWORD *)(a4 + 48) = v15;
  v16 = v25;
  *(_OWORD *)(a4 + 64) = v24;
  *(_OWORD *)(a4 + 80) = v16;
  result = *(double *)&v20;
  v18 = v21;
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v18;
  return result;
}

double sub_1C616A288(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, _OWORD *a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[4];

  *a3 = 195;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v22 = 0u;
  memset(v23, 0, 60);
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1C4C12CA8((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v19);
  v12 = *((_QWORD *)a2 + 2);
  LOBYTE(v20) = (*(_BYTE *)(v12 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v23[3] + 8, (int8x8_t *)v23 + 1, (uint64_t)&v23[1] + 8);
  v13 = *(_DWORD *)(v12 + 16 * v10 + 8);
  BYTE4(v23[1]) = (~(_BYTE)v13 & 0x60) == 0;
  LODWORD(v23[1]) = v13 & 3;
  sub_1C4C0E920((uint64_t)a1, a2, v11, (uint64_t)&v21 + 4);
  v14 = HIDWORD(v19);
  if (BYTE4(v23[1]))
    v14 = dword_1C6A5F700[HIDWORD(v19) - 1];
  HIDWORD(v19) = v14;
  if (*a1 >= 4u)
  {
    if ((DWORD2(v19) - 2) <= 3)
      LODWORD(v23[0]) = dword_1C6A5F9D0[DWORD2(v19) - 2];
    DWORD1(v23[0]) = 192;
  }
  v15 = v23[1];
  a4[4] = v23[0];
  a4[5] = v15;
  a4[6] = v23[2];
  *(_OWORD *)((char *)a4 + 108) = *(_OWORD *)((char *)&v23[2] + 12);
  v16 = v20;
  *a4 = v19;
  a4[1] = v16;
  result = *(double *)&v21;
  v18 = v22;
  a4[2] = v21;
  a4[3] = v18;
  return result;
}

double sub_1C616A428(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  double result;

  if (sub_1C4C26C54((uint64_t)a2))
  {
    sub_1C4C26C54((uint64_t)a2);
    *(_QWORD *)&result = sub_1C616A49C(a1, a2, a3, a4).n128_u64[0];
  }
  else
  {
    *(_QWORD *)&result = sub_1C4C2550C(a1, a2, a3, a4).n128_u64[0];
  }
  return result;
}

__n128 sub_1C616A49C(_DWORD *a1, unsigned __int16 *a2, _DWORD *a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __n128 result;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  __int128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  *a3 = 208;
  v7 = *a2;
  v8 = sub_1C4C2FD5C(v7);
  v9 = sub_1C4C2FD5C(v7);
  v33 = sub_1C4C2FD5C(v7);
  v32 = sub_1C4C2FD5C(v7);
  v31 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v34 = sub_1C4C2FD5C(v7);
  v35 = sub_1C4C2FD5C(v7);
  v30 = sub_1C4C2FD5C(v7);
  v29 = sub_1C4C2FD5C(v7);
  v28 = sub_1C4C2FD5C(v7);
  v27 = sub_1C4C2FD5C(v7);
  v26 = sub_1C4C2FD5C(v7);
  v25 = sub_1C4C2FD5C(v7);
  v24 = sub_1C4C2FD5C(v7);
  v23 = sub_1C4C2FD5C(v7);
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v36 = 0u;
  sub_1C4C0BC90((uint64_t)a1, (uint64_t)a2, v8, (uint64_t)&v36);
  v11 = *((_QWORD *)a2 + 2);
  v37.n128_u8[0] = (*(_BYTE *)(v11 + 16 * v9 + 8) & 0x20) != 0;
  sub_1C4C0B76C(a1, (uint64_t)a2, v9, (BOOL *)&v46, (int8x8_t *)&v43 + 1, (uint64_t)&v44);
  v12 = dword_1C6A5FB54[(*(_QWORD *)(v11 + 16 * v32 + 8) & 0xFLL) - 8];
  DWORD1(v46) = dword_1C6A5FB54[(*(_QWORD *)(v11 + 16 * v33 + 8) & 0xFLL) - 8];
  DWORD2(v46) = v12;
  HIDWORD(v46) = dword_1C6A5FB54[(*(_QWORD *)(v11 + 16 * v31 + 8) & 0xFLL) - 8];
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v10, (uint64_t)&v37.n128_i64[1] + 4);
  if (DWORD1(v38) == 1)
    *(_QWORD *)((char *)&v38 + 4) = 0x200000001;
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v34, (uint64_t)&v39 + 8);
  if ((_DWORD)v40 == 1)
    *(_QWORD *)&v40 = 0x200000001;
  sub_1C4C0C39C((uint64_t)a1, (uint64_t)a2, v35, (uint64_t)&v41 + 4);
  if (HIDWORD(v41) == 1)
    LODWORD(v42) = 2;
  v13 = *((_QWORD *)a2 + 2);
  v14 = *(_QWORD *)(v13 + 16 * v29 + 8);
  LODWORD(v47) = *(_QWORD *)(v13 + 16 * v30 + 8);
  DWORD1(v47) = v14;
  v15 = *(_QWORD *)(v13 + 16 * v27 + 8);
  DWORD2(v47) = *(_QWORD *)(v13 + 16 * v28 + 8);
  HIDWORD(v47) = v15;
  v16 = *(_QWORD *)(v13 + 16 * v25 + 8);
  LODWORD(v48) = *(_QWORD *)(v13 + 16 * v26 + 8);
  DWORD1(v48) = v16;
  *((_QWORD *)&v48 + 1) = __PAIR64__(*(_QWORD *)(v13 + 16 * v23 + 8), *(_QWORD *)(v13 + 16 * v24 + 8));
  if (*a1 >= 4u)
  {
    if ((DWORD2(v36) - 2) <= 3)
      LODWORD(v43) = dword_1C6A5F9D0[DWORD2(v36) - 2];
    DWORD1(v43) = 211;
  }
  v17 = v47;
  *(_OWORD *)(a4 + 160) = v46;
  *(_OWORD *)(a4 + 176) = v17;
  *(_OWORD *)(a4 + 192) = v48;
  v18 = v43;
  *(_OWORD *)(a4 + 96) = v42;
  *(_OWORD *)(a4 + 112) = v18;
  v19 = v45;
  *(_OWORD *)(a4 + 128) = v44;
  *(_OWORD *)(a4 + 144) = v19;
  v20 = v39;
  *(_OWORD *)(a4 + 32) = v38;
  *(_OWORD *)(a4 + 48) = v20;
  v21 = v41;
  *(_OWORD *)(a4 + 64) = v40;
  *(_OWORD *)(a4 + 80) = v21;
  result = v37;
  *(_OWORD *)a4 = v36;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

uint64_t sub_1C616A850(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;

  v8 = sub_1C4C2FD5C(a2);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v8, *(unsigned __int8 *)(a5 + 49), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 16));
  return 3;
}

uint64_t sub_1C616A8A8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;

  v8 = sub_1C4C2FD5C(a2);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v8, *(unsigned __int8 *)(a5 + 48), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 16));
  return 3;
}

uint64_t sub_1C616A900(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 69), (unsigned __int8 *)(a5 + 24), (unsigned int *)(a5 + 32));
  v11 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  v12 = *(unsigned int *)(a5 + 64);
  *v11 = 2;
  v11[1] = v12;
  return 3;
}

uint64_t sub_1C616A98C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 80), (unsigned __int8 *)(a5 + 36), (unsigned int *)(a5 + 48));
  v12 = *(__int16 *)(a5 + 44);
  v13 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  *v13 = 2;
  v13[1] = v12;
  v14 = (uint64_t)((unint64_t)*(unsigned __int16 *)(a5 + 46) << 52) >> 52;
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
  *v15 = 2;
  v15[1] = v14;
  return 3;
}

uint64_t sub_1C616AA3C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)v12 == 3)
  {
    v13 = *(unsigned __int8 *)(a5 + 80);
    v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    v16 = (_QWORD *)(v15 + 16 * v10);
    if (*(_BYTE *)v16 == 2)
    {
      v16 = (_QWORD *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      *v16 = 2;
    }
    v16[1] = v14;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 36), (unsigned int *)(a5 + 48));
    v17 = *(unsigned __int16 *)(a5 + 44);
    v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    *v18 = 2;
    v18[1] = v17;
  }
  return v12;
}

uint64_t sub_1C616AB48(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  switch(a4)
  {
    case 'O':
      return sub_1C4C275C4(a1, a2, a3, a5);
    case 'N':
      return sub_1C4C27480(a1, a2, a3, a5);
    case 'L':
      return sub_1C4C2733C(a1, a2, a3, a5);
  }
  return 0;
}

uint64_t sub_1C616AB80(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4 == 78)
    return sub_1C4C27480(a1, a2, a3, a5);
  if (a4 == 76)
    return sub_1C4C2733C(a1, a2, a3, a5);
  return 0;
}

uint64_t sub_1C616ABA8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  switch(a4)
  {
    case 'f':
      return sub_1C4C275C4(a1, a2, a3, a5);
    case 'e':
      return sub_1C4C27480(a1, a2, a3, a5);
    case '^':
      return sub_1C4C2733C(a1, a2, a3, a5);
  }
  return 0;
}

uint64_t sub_1C616ABE0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4 == 101)
    return sub_1C4C27480(a1, a2, a3, a5);
  if (a4 == 94)
    return sub_1C4C2733C(a1, a2, a3, a5);
  return 0;
}

uint64_t sub_1C616AC08(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  switch(a4)
  {
    case 'S':
      return sub_1C4C27ACC(a1, a2, a3, a5);
    case 'R':
      return sub_1C4C27960(a1, a2, a3, a5);
    case 'Q':
      return sub_1C4C277F4(a1, a2, a3, a5);
  }
  return 0;
}

uint64_t sub_1C616AC40(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4 == 82)
    return sub_1C4C27960(a1, a2, a3, a5);
  if (a4 == 81)
    return sub_1C4C277F4(a1, a2, a3, a5);
  return 0;
}

uint64_t sub_1C616AC68(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  switch(a4)
  {
    case 'X':
      return sub_1C4C27ACC(a1, a2, a3, a5);
    case 'W':
      return sub_1C4C27960(a1, a2, a3, a5);
    case 'V':
      return sub_1C4C277F4(a1, a2, a3, a5);
  }
  return 0;
}

uint64_t sub_1C616ACA0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a4 == 87)
    return sub_1C4C27960(a1, a2, a3, a5);
  if (a4 == 86)
    return sub_1C4C277F4(a1, a2, a3, a5);
  return 0;
}

uint64_t sub_1C616ACC8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a5 + 132);
    v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v10);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 100));
    result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 28, 1);
    if ((_DWORD)result == 3)
      return sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
  }
  return result;
}

uint64_t sub_1C616AE10(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)v12 == 3)
  {
    v13 = *(unsigned __int8 *)(a5 + 80);
    v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    v16 = (_QWORD *)(v15 + 16 * v10);
    if (*(_BYTE *)v16 == 2)
    {
      v16 = (_QWORD *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      *v16 = 2;
    }
    v16[1] = v14;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 48));
    v17 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    v18 = *(unsigned int *)(a5 + 28);
    *v17 = 2;
    v17[1] = v18;
  }
  return v12;
}

uint64_t sub_1C616AF1C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v13 = *(unsigned __int8 *)(a5 + 108);
    v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    v16 = (_QWORD *)(v15 + 16 * v10);
    if (*(_BYTE *)v16 == 2)
    {
      v16 = (_QWORD *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      *v16 = 2;
    }
    v16[1] = v14;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 76));
    return sub_1C4C27D28((uint64_t)a1, a3, v11, a5 + 28);
  }
  return result;
}

uint64_t sub_1C616B024(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v13 = *(unsigned __int8 *)(a5 + 104);
    v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    v16 = (_QWORD *)(v15 + 16 * v10);
    if (*(_BYTE *)v16 == 2)
    {
      v16 = (_QWORD *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      *v16 = 2;
    }
    v16[1] = v14;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 72));
    return sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 28, 1);
  }
  return result;
}

uint64_t sub_1C616B130(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, *(unsigned __int8 *)(a5 + 104), (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 72));
    return sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 28, 1);
  }
  return result;
}

uint64_t sub_1C616B1FC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 60), (unsigned __int8 *)(a5 + 16), (unsigned int *)(a5 + 28));
  v11 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  if (*(_BYTE *)(a5 + 24))
    v12 = *(_QWORD *)a5;
  else
    v12 = (uint64_t)(*(_QWORD *)a5 << 16) >> 16;
  *v11 = 2;
  v11[1] = v12;
  return 3;
}

uint64_t sub_1C616B298(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;

  v8 = sub_1C4C2FD5C(a2);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v8, *(unsigned __int8 *)(a5 + 52), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 20));
  return 3;
}

uint64_t sub_1C616B2F0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 52), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 20));
  v11 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  v12 = *(unsigned __int16 *)(a5 + 16);
  *v11 = 2;
  v11[1] = v12;
  return 3;
}

uint64_t sub_1C616B37C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  __n128 v13;
  unsigned int v14;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 112), (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 76));
  result = sub_1C4C27C38((uint64_t)a1, a3, v10, a5 + 28, 1);
  if ((_DWORD)result == 3)
  {
    v14 = sub_1C6172BE0(v13);
    return sub_1C4C2FC84((uint64_t)a1, a3, v11, a5, v14);
  }
  return result;
}

uint64_t sub_1C616B454(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 104), (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 72));
  result = sub_1C4C27C38((uint64_t)a1, a3, v10, a5, 1);
  if ((_DWORD)result == 3)
    return sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 28, 1);
  return result;
}

uint64_t sub_1C616B520(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 85), (unsigned __int8 *)(a5 + 36), (unsigned int *)(a5 + 52));
  return sub_1C4C27C38((uint64_t)a1, a3, v10, a5, 3);
}

uint64_t sub_1C616B5A8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a5 + 140);
    v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v10);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 100), (unsigned int *)(a5 + 108));
    result = sub_1C4C2A160((uint64_t)a1, a3, v11, a5 + 36);
    if ((_DWORD)result == 3)
      return sub_1C4C2A160((uint64_t)a1, a3, v12, a5 + 64);
  }
  return result;
}

uint64_t sub_1C616B6E8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v15 = *(unsigned __int8 *)(a5 + 228);
    v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    v17 = *(_QWORD *)(a3 + 16);
    v18 = (_QWORD *)(v17 + 16 * v10);
    if (*(_BYTE *)v18 == 2)
    {
      v18 = (_QWORD *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      *v18 = 2;
    }
    v18[1] = v16;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 184), (unsigned int *)(a5 + 196));
    result = sub_1C4C2A160((uint64_t)a1, a3, v11, a5 + 36);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C2A160((uint64_t)a1, a3, v12, a5 + 64);
      if ((_DWORD)result == 3)
        return sub_1C4C2A160((uint64_t)a1, a3, v13, a5 + 92);
    }
  }
  return result;
}

uint64_t sub_1C616B854(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  _QWORD *v26;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 228);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 184), (unsigned int *)(a5 + 196));
    result = sub_1C4C2A160((uint64_t)a1, a3, v11, a5 + 36);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C2A160((uint64_t)a1, a3, v12, a5 + 64);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C2A160((uint64_t)a1, a3, v13, a5 + 92);
        if ((_DWORD)result == 3)
        {
          v21 = (unsigned __int8 *)(a5 + 120);
          if (*(_DWORD *)(a5 + 128) == 2)
          {
            result = sub_1C4C27C38((uint64_t)a1, a3, v14, (uint64_t)v21, 3);
            if ((_DWORD)result != 3)
              return result;
          }
          else
          {
            v22 = *v21;
            v23 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
            *v23 = 2;
            v23[1] = v22;
          }
          v24 = (unsigned __int8 *)(a5 + 148);
          if (*(_DWORD *)(a5 + 156) == 2)
          {
            return sub_1C4C27C38((uint64_t)a1, a3, v15, (uint64_t)v24, 3);
          }
          else
          {
            v25 = *v24;
            v26 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
            *v26 = 2;
            v26[1] = v25;
            return 3;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C616BA74(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v13 = *(unsigned __int8 *)(a5 + 144);
    v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    v16 = (_QWORD *)(v15 + 16 * v10);
    if (*(_BYTE *)v16 == 2)
    {
      v16 = (_QWORD *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      *v16 = 2;
    }
    v16[1] = v14;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 100), (unsigned int *)(a5 + 112));
    return sub_1C4C2A160((uint64_t)a1, a3, v11, a5 + 36);
  }
  return result;
}

uint64_t sub_1C616BB7C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  _QWORD *v20;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a5 + 144);
    v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v10);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 100), (unsigned int *)(a5 + 112));
    result = sub_1C4C2A160((uint64_t)a1, a3, v11, a5 + 36);
    if ((_DWORD)result == 3)
    {
      v18 = (unsigned __int8 *)(a5 + 64);
      if (*(_DWORD *)(a5 + 72) == 2)
      {
        return sub_1C4C27C38((uint64_t)a1, a3, v12, (uint64_t)v18, 3);
      }
      else
      {
        v19 = *v18;
        v20 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
        *v20 = 2;
        v20[1] = v19;
        return 3;
      }
    }
  }
  return result;
}

uint64_t sub_1C616BCE4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v15 = *(unsigned __int8 *)(a5 + 168);
    v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    v17 = *(_QWORD *)(a3 + 16);
    v18 = (_QWORD *)(v17 + 16 * v10);
    if (*(_BYTE *)v18 == 2)
    {
      v18 = (_QWORD *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      *v18 = 2;
    }
    v18[1] = v16;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 128), (unsigned int *)(a5 + 136));
    result = sub_1C4C2A160((uint64_t)a1, a3, v11, a5 + 92);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C2A160((uint64_t)a1, a3, v12, a5 + 36);
      if ((_DWORD)result == 3)
        return sub_1C4C2A160((uint64_t)a1, a3, v13, a5 + 64);
    }
  }
  return result;
}

uint64_t sub_1C616BE50(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v13 = *(unsigned __int8 *)(a5 + 112);
    v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    v16 = (_QWORD *)(v15 + 16 * v10);
    if (*(_BYTE *)v16 == 2)
    {
      v16 = (_QWORD *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      *v16 = 2;
    }
    v16[1] = v14;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 72), (unsigned int *)(a5 + 80));
    return sub_1C4C2A160((uint64_t)a1, a3, v11, a5 + 36);
  }
  return result;
}

uint64_t sub_1C616BF58(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v13 = *(unsigned __int8 *)(a5 + 116);
    v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    v16 = (_QWORD *)(v15 + 16 * v10);
    if (*(_BYTE *)v16 == 2)
    {
      v16 = (_QWORD *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      *v16 = 2;
    }
    v16[1] = v14;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 72), (unsigned int *)(a5 + 84));
    return sub_1C4C2A160((uint64_t)a1, a3, v11, a5 + 36);
  }
  return result;
}

void sub_1C616C060(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  sub_1C4C2A6E8((uint64_t)a1, a3, v9, a5);
  if (v14 == 3)
  {
    v15 = *(unsigned __int8 *)(a5 + 168);
    v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    v17 = *(_QWORD *)(a3 + 16);
    v18 = (_QWORD *)(v17 + 16 * v10);
    if (*(_BYTE *)v18 == 2)
    {
      v18 = (_QWORD *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      *v18 = 2;
    }
    v18[1] = v16;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 128), (unsigned int *)(a5 + 136));
    if (sub_1C4C2A7F4((uint64_t)a1, a3, v11, a5 + 36) == 3
      && sub_1C4C2A7F4((uint64_t)a1, a3, v12, a5 + 64) == 3)
    {
      sub_1C4C2A7F4((uint64_t)a1, a3, v13, a5 + 92);
    }
  }
}

uint64_t sub_1C616C1C8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2A8CC((uint64_t)a1, a3, v9, a5);
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a5 + 136);
    v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v10);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 96), (unsigned int *)(a5 + 104));
    result = sub_1C4C2A160((uint64_t)a1, a3, v11, a5 + 32);
    if ((_DWORD)result == 3)
      return sub_1C4C2A160((uint64_t)a1, a3, v12, a5 + 60);
  }
  return result;
}

uint64_t sub_1C616C304(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2A8CC((uint64_t)a1, a3, v9, a5);
  if ((_DWORD)result == 3)
  {
    v15 = *(unsigned __int8 *)(a5 + 164);
    v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    v17 = *(_QWORD *)(a3 + 16);
    v18 = (_QWORD *)(v17 + 16 * v10);
    if (*(_BYTE *)v18 == 2)
    {
      v18 = (_QWORD *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      *v18 = 2;
    }
    v18[1] = v16;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 132));
    result = sub_1C4C2A160((uint64_t)a1, a3, v11, a5 + 32);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C2A160((uint64_t)a1, a3, v12, a5 + 60);
      if ((_DWORD)result == 3)
        return sub_1C4C2A160((uint64_t)a1, a3, v13, a5 + 88);
    }
  }
  return result;
}

uint64_t sub_1C616C46C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2A9BC((uint64_t)a1, a3, v9, a5);
  if ((_DWORD)result == 3)
  {
    v15 = *(unsigned __int8 *)(a5 + 164);
    v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    v17 = *(_QWORD *)(a3 + 16);
    v18 = (_QWORD *)(v17 + 16 * v10);
    if (*(_BYTE *)v18 == 2)
    {
      v18 = (_QWORD *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      *v18 = 2;
    }
    v18[1] = v16;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 132));
    result = sub_1C4C2A7F4((uint64_t)a1, a3, v11, a5 + 32);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C2A7F4((uint64_t)a1, a3, v12, a5 + 60);
      if ((_DWORD)result == 3)
        return sub_1C4C2A7F4((uint64_t)a1, a3, v13, a5 + 88);
    }
  }
  return result;
}

uint64_t sub_1C616C5D4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v16 = *(unsigned __int8 *)(a5 + 172);
    v17 = 32 * *(unsigned __int8 *)(a5 + 16);
    v18 = *(_QWORD *)(a3 + 16);
    v19 = (_QWORD *)(v18 + 16 * v10);
    if (*(_BYTE *)v19 == 2)
    {
      v19 = (_QWORD *)(v18 + 16 * v10);
      v17 |= v19[1];
    }
    else
    {
      *v19 = 2;
    }
    v19[1] = v17;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v16 != 0, (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 140));
    result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 80, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C2ADEC((uint64_t)a1, a3, v12, a5 + 52);
      if ((_DWORD)result == 3)
      {
        v20 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
        v21 = *(__int16 *)(a5 + 28);
        *v20 = 2;
        v20[1] = v21;
        v22 = *(__int16 *)(a5 + 30);
        v23 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
        *v23 = 2;
        v23[1] = v22;
      }
    }
  }
  return result;
}

uint64_t sub_1C616C760(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2800C((uint64_t)a1, a3, v9, a5, 0x100000004, 0x100000001);
  if ((_DWORD)result == 3)
  {
    v16 = *(unsigned __int8 *)(a5 + 172);
    v17 = 32 * *(unsigned __int8 *)(a5 + 16);
    v18 = *(_QWORD *)(a3 + 16);
    v19 = (_QWORD *)(v18 + 16 * v10);
    if (*(_BYTE *)v19 == 2)
    {
      v19 = (_QWORD *)(v18 + 16 * v10);
      v17 |= v19[1];
    }
    else
    {
      *v19 = 2;
    }
    v19[1] = v17;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v16 != 0, (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 140));
    result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 80, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C2ADEC((uint64_t)a1, a3, v12, a5 + 52);
      if ((_DWORD)result == 3)
      {
        v20 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
        v21 = *(__int16 *)(a5 + 28);
        *v20 = 2;
        v20[1] = v21;
        v22 = *(__int16 *)(a5 + 30);
        v23 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
        *v23 = 2;
        v23[1] = v22;
      }
    }
  }
  return result;
}

uint64_t sub_1C616C8F4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v16 = *(unsigned __int8 *)(a5 + 164);
    v17 = 32 * *(unsigned __int8 *)(a5 + 16);
    v18 = *(_QWORD *)(a3 + 16);
    v19 = (_QWORD *)(v18 + 16 * v10);
    if (*(_BYTE *)v19 == 2)
    {
      v19 = (_QWORD *)(v18 + 16 * v10);
      v17 |= v19[1];
    }
    else
    {
      *v19 = 2;
    }
    v19[1] = v17;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v16 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 132));
    result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 84, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27D28((uint64_t)a1, a3, v12, a5 + 28);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C27C38((uint64_t)a1, a3, v13, a5 + 56, 1);
        if ((_DWORD)result == 3)
        {
          if (*(_BYTE *)(a5 + 112))
            v20 = *(unsigned __int8 *)(a5 + 112);
          else
            v20 = 32;
          v21 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
          *v21 = 2;
          v21[1] = v20;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C616CA98(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v13 = *(unsigned __int8 *)(a5 + 104);
    v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    v16 = (_QWORD *)(v15 + 16 * v10);
    if (*(_BYTE *)v16 == 2)
    {
      v16 = (_QWORD *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      *v16 = 2;
    }
    v16[1] = v14;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 72));
    return sub_1C4C27D28((uint64_t)a1, a3, v11, a5 + 28);
  }
  return result;
}

uint64_t sub_1C616CBA0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a5 + 132);
    v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v10);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 100));
    result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 28, 1);
    if ((_DWORD)result == 3)
      return sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
  }
  return result;
}

uint64_t sub_1C616CCE8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  switch(a4)
  {
    case 'D':
      return sub_1C616CD3C(a1, a2, a3, a5);
    case 'E':
      v6 = a5;
      return sub_1C616D0C0(a1, a2, a3, v6);
    case 'F':
      v6 = a5;
      return sub_1C616D0C0(a1, a2, a3, v6);
    case 'G':
      v7 = a5;
      goto LABEL_9;
    case 'H':
      v7 = a5;
LABEL_9:
      result = sub_1C616CEE0(a1, a2, a3, v7);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C616CD3C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v14 = sub_1C4C2FD5C(v7);
  result = sub_1C4C2B23C((uint64_t)a1, a3, v8, (int *)a4);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C2B2C0(a1, a3, v9, *(_DWORD *)a4, *(_BYTE *)(a4 + 20), *(unsigned __int8 *)(a4 + 200), (unsigned __int8 *)(a4 + 156), (unsigned int *)(a4 + 168));
    if ((_DWORD)result == 3)
    {
      v16 = (*(_DWORD *)(a4 + 164) - 1);
      if (v16 < 7)
        v17 = v16 + 1;
      else
        v17 = 0;
      v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
      *v18 = 2;
      v18[1] = v17;
      result = sub_1C4C2A160((uint64_t)a1, a3, v11, a4 + 40);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C2A160((uint64_t)a1, a3, v12, a4 + 68);
        if ((_DWORD)result == 3)
        {
          result = sub_1C4C2A160((uint64_t)a1, a3, v13, a4 + 96);
          if ((_DWORD)result == 3)
            return sub_1C4C2A160((uint64_t)a1, a3, v14, a4 + 124);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C616CEE0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v14 = sub_1C4C2FD5C(v7);
  result = sub_1C4C27248((uint64_t)a1, a3, v8, a4, 1);
  if ((_DWORD)result == 3)
  {
    v16 = *(unsigned __int8 *)(a4 + 192);
    v17 = 32 * *(unsigned __int8 *)(a4 + 16);
    v18 = *(_QWORD *)(a3 + 16);
    v19 = (_QWORD *)(v18 + 16 * v9);
    if (*(_BYTE *)v19 == 2)
    {
      v19 = (_QWORD *)(v18 + 16 * v9);
      v17 |= v19[1];
    }
    else
    {
      *v19 = 2;
    }
    v19[1] = v17;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v16 != 0, (unsigned __int8 *)(a4 + 148), (unsigned int *)(a4 + 160));
    v20 = (*(_DWORD *)(a4 + 156) - 1);
    if (v20 < 7)
      v21 = v20 + 1;
    else
      v21 = 0;
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
    *v22 = 2;
    v22[1] = v21;
    result = sub_1C4C2A160((uint64_t)a1, a3, v11, a4 + 28);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C2A160((uint64_t)a1, a3, v12, a4 + 56);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C27C38((uint64_t)a1, a3, v13, a4 + 84, 1);
        if ((_DWORD)result == 3)
          return sub_1C4C27C38((uint64_t)a1, a3, v14, a4 + 112, 1);
      }
    }
  }
  return result;
}

uint64_t sub_1C616D0C0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v14 = sub_1C4C2FD5C(v7);
  result = sub_1C4C27248((uint64_t)a1, a3, v8, a4, 1);
  if ((_DWORD)result == 3)
  {
    v16 = *(unsigned __int8 *)(a4 + 200);
    v17 = 32 * *(unsigned __int8 *)(a4 + 16);
    v18 = *(_QWORD *)(a3 + 16);
    v19 = (_QWORD *)(v18 + 16 * v9);
    if (*(_BYTE *)v19 == 2)
    {
      v19 = (_QWORD *)(v18 + 16 * v9);
      v17 |= v19[1];
    }
    else
    {
      *v19 = 2;
    }
    v19[1] = v17;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v16 != 0, (unsigned __int8 *)(a4 + 156), (unsigned int *)(a4 + 168));
    v20 = (*(_DWORD *)(a4 + 164) - 1);
    if (v20 < 7)
      v21 = v20 + 1;
    else
      v21 = 0;
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
    *v22 = 2;
    v22[1] = v21;
    result = sub_1C4C2A160((uint64_t)a1, a3, v11, a4 + 36);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C2A160((uint64_t)a1, a3, v12, a4 + 64);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C2A160((uint64_t)a1, a3, v13, a4 + 92);
        if ((_DWORD)result == 3)
          return sub_1C4C2A160((uint64_t)a1, a3, v14, a4 + 120);
      }
    }
  }
  return result;
}

uint64_t sub_1C616D298(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  switch(a4)
  {
    case 'D':
      return sub_1C616CD3C(a1, a2, a3, a5);
    case 'E':
      v6 = a5;
      return sub_1C616D0C0(a1, a2, a3, v6);
    case 'F':
      v6 = a5;
      return sub_1C616D0C0(a1, a2, a3, v6);
    case 'G':
      v7 = a5;
      goto LABEL_9;
    case 'H':
      v7 = a5;
LABEL_9:
      result = sub_1C616CEE0(a1, a2, a3, v7);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C616D2EC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6;

  switch(a4)
  {
    case 'I':
      v6 = a5;
      return sub_1C4C2B348(a1, a2, a3, v6);
    case 'J':
      v6 = a5;
      return sub_1C4C2B348(a1, a2, a3, v6);
    case 'D':
      return sub_1C616CD3C(a1, a2, a3, a5);
    default:
      return 0;
  }
}

uint64_t sub_1C616D324(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  switch(a4)
  {
    case ']':
      return sub_1C616D378(a1, a2, a3, a5);
    case '_':
      v6 = a5;
      return sub_1C616D71C(a1, a2, a3, v6);
      v6 = a5;
      return sub_1C616D71C(a1, a2, a3, v6);
    case 'a':
      v7 = a5;
      goto LABEL_8;
    case 'b':
      v7 = a5;
LABEL_8:
      result = sub_1C616D52C(a1, a2, a3, v7);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C616D378(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v14 = sub_1C4C2FD5C(v7);
  result = sub_1C4C2B23C((uint64_t)a1, a3, v8, (int *)a4);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C2B2C0(a1, a3, v9, *(_DWORD *)a4, *(_BYTE *)(a4 + 20), *(unsigned __int8 *)(a4 + 200), (unsigned __int8 *)(a4 + 156), (unsigned int *)(a4 + 168));
    if ((_DWORD)result == 3)
    {
      v16 = *(int *)(a4 + 164);
      if (v16 > 6)
        v17 = 0;
      else
        v17 = qword_1C6A5FD50[v16];
      v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
      *v18 = 2;
      v18[1] = v17;
      result = sub_1C4C27D28((uint64_t)a1, a3, v11, a4 + 40);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C27D28((uint64_t)a1, a3, v12, a4 + 68);
        if ((_DWORD)result == 3)
        {
          result = sub_1C4C2A160((uint64_t)a1, a3, v13, a4 + 96);
          if ((_DWORD)result == 3)
            return sub_1C4C2A160((uint64_t)a1, a3, v14, a4 + 124);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C616D52C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v14 = sub_1C4C2FD5C(v7);
  result = sub_1C4C27248((uint64_t)a1, a3, v8, a4, 1);
  if ((_DWORD)result == 3)
  {
    v16 = *(unsigned __int8 *)(a4 + 192);
    v17 = 32 * *(unsigned __int8 *)(a4 + 16);
    v18 = *(_QWORD *)(a3 + 16);
    v19 = (_QWORD *)(v18 + 16 * v9);
    if (*(_BYTE *)v19 == 2)
    {
      v19 = (_QWORD *)(v18 + 16 * v9);
      v17 |= v19[1];
    }
    else
    {
      *v19 = 2;
    }
    v19[1] = v17;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v16 != 0, (unsigned __int8 *)(a4 + 148), (unsigned int *)(a4 + 160));
    v20 = *(int *)(a4 + 156);
    if (v20 > 6)
      v21 = 0;
    else
      v21 = qword_1C6A5FD50[v20];
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
    *v22 = 2;
    v22[1] = v21;
    result = sub_1C4C27D28((uint64_t)a1, a3, v11, a4 + 28);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27D28((uint64_t)a1, a3, v12, a4 + 56);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C27C38((uint64_t)a1, a3, v13, a4 + 84, 1);
        if ((_DWORD)result == 3)
          return sub_1C4C27C38((uint64_t)a1, a3, v14, a4 + 112, 1);
      }
    }
  }
  return result;
}

uint64_t sub_1C616D71C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v14 = sub_1C4C2FD5C(v7);
  result = sub_1C4C27248((uint64_t)a1, a3, v8, a4, 1);
  if ((_DWORD)result == 3)
  {
    v16 = *(unsigned __int8 *)(a4 + 200);
    v17 = 32 * *(unsigned __int8 *)(a4 + 16);
    v18 = *(_QWORD *)(a3 + 16);
    v19 = (_QWORD *)(v18 + 16 * v9);
    if (*(_BYTE *)v19 == 2)
    {
      v19 = (_QWORD *)(v18 + 16 * v9);
      v17 |= v19[1];
    }
    else
    {
      *v19 = 2;
    }
    v19[1] = v17;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v16 != 0, (unsigned __int8 *)(a4 + 156), (unsigned int *)(a4 + 168));
    v20 = *(int *)(a4 + 164);
    if (v20 > 6)
      v21 = 0;
    else
      v21 = qword_1C6A5FD50[v20];
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
    *v22 = 2;
    v22[1] = v21;
    result = sub_1C4C27D28((uint64_t)a1, a3, v11, a4 + 36);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27D28((uint64_t)a1, a3, v12, a4 + 64);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C2A160((uint64_t)a1, a3, v13, a4 + 92);
        if ((_DWORD)result == 3)
          return sub_1C4C2A160((uint64_t)a1, a3, v14, a4 + 120);
      }
    }
  }
  return result;
}

uint64_t sub_1C616D904(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  switch(a4)
  {
    case ']':
      return sub_1C616D378(a1, a2, a3, a5);
    case '_':
      v6 = a5;
      return sub_1C616D71C(a1, a2, a3, v6);
      v6 = a5;
      return sub_1C616D71C(a1, a2, a3, v6);
    case 'a':
      v7 = a5;
      goto LABEL_8;
    case 'b':
      v7 = a5;
LABEL_8:
      result = sub_1C616D52C(a1, a2, a3, v7);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C616D958(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6;

  switch(a4)
  {
    case 'c':
      v6 = a5;
      return sub_1C4C2B4FC(a1, a2, a3, v6);
    case 'd':
      v6 = a5;
      return sub_1C4C2B4FC(a1, a2, a3, v6);
    case ']':
      return sub_1C616D378(a1, a2, a3, a5);
    default:
      return 0;
  }
}

uint64_t sub_1C616D990(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  switch(a4)
  {
    case 161:
      return sub_1C4C2B6C0(a1, a2, a3, a5);
    case 162:
      v6 = a5;
      return sub_1C4C2B9AC(a1, a2, a3, v6);
    case 163:
      v6 = a5;
      return sub_1C4C2B9AC(a1, a2, a3, v6);
    case 164:
      v7 = a5;
      goto LABEL_8;
    case 165:
      v7 = a5;
LABEL_8:
      result = sub_1C4C2B818(a1, a2, a3, v7);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C616D9E4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  switch(a4)
  {
    case 161:
      return sub_1C4C2B6C0(a1, a2, a3, a5);
    case 162:
      v6 = a5;
      return sub_1C4C2B9AC(a1, a2, a3, v6);
    case 163:
      v6 = a5;
      return sub_1C4C2B9AC(a1, a2, a3, v6);
    case 164:
      v7 = a5;
      goto LABEL_8;
    case 165:
      v7 = a5;
LABEL_8:
      result = sub_1C4C2B818(a1, a2, a3, v7);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C616DA38(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6;

  switch(a4)
  {
    case 167:
      v6 = a5;
      return sub_1C4C2BB38(a1, a2, a3, v6);
    case 166:
      v6 = a5;
      return sub_1C4C2BB38(a1, a2, a3, v6);
    case 161:
      return sub_1C4C2B6C0(a1, a2, a3, a5);
    default:
      return 0;
  }
}

uint64_t sub_1C616DA70(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a5 + 140);
    v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v10);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 108));
    v18 = qword_1C6A5FC98[*(int *)(a5 + 100)];
    v19 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    *v19 = 2;
    v19[1] = v18;
    return sub_1C4C2A160((uint64_t)a1, a3, v12, a5 + 28);
  }
  return result;
}

uint64_t sub_1C616DBB8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C32DEC(*(_DWORD *)a3);
  if (v14 == 36)
  {
    v15 = 1;
  }
  else
  {
    if (v14 != 37)
      llvm::report_fatal_error((llvm *)"Unhandled norm_size", (const char *)1);
    v15 = 2;
  }
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, v15);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 140);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 108));
    v21 = qword_1C6A5FC98[*(int *)(a5 + 100)];
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    *v22 = 2;
    v22[1] = v21;
    result = sub_1C4C2A160((uint64_t)a1, a3, v12, a5 + 28);
    if ((_DWORD)result == 3)
      return sub_1C4C2A160((uint64_t)a1, a3, v13, a5 + 56);
  }
  return result;
}

uint64_t sub_1C616DD64(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = 1;
  if (*(_BYTE *)(a5 + 84))
    v13 = 2;
  result = sub_1C4C2F6C4((uint64_t)a1, *(_DWORD *)a3, *(_QWORD *)(a3 + 16), v9, (int *)a5, *(_DWORD *)(a5 + 8), *(_DWORD *)(a5 + 12), *(_DWORD *)(a5 + 24), v13);
  if ((_DWORD)result == 3)
  {
    v15 = v9 + 1;
    v16 = (unint64_t)*(unsigned int *)(a5 + 20) << 20;
    v17 = *(_QWORD *)(a3 + 16);
    v18 = (_QWORD *)(v17 + 16 * v15);
    if (*(_BYTE *)v18 == 2)
    {
      *(_QWORD *)(v17 + 16 * v15 + 8) |= v16;
    }
    else
    {
      *v18 = 2;
      v18[1] = v16;
    }
    v19 = *(unsigned __int8 *)(a5 + 120);
    v20 = 32 * *(unsigned __int8 *)(a5 + 16);
    v21 = *(_QWORD *)(a3 + 16);
    v22 = (_QWORD *)(v21 + 16 * v10);
    if (*(_BYTE *)v22 == 2)
    {
      v22 = (_QWORD *)(v21 + 16 * v10);
      v20 |= v22[1];
    }
    else
    {
      *v22 = 2;
    }
    v22[1] = v20;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v19 != 0, (unsigned __int8 *)(a5 + 72), (unsigned int *)(a5 + 88));
    v23 = qword_1C6A5FC98[*(int *)(a5 + 80)];
    v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    *v24 = 2;
    v24[1] = v23;
    return sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 36, 1);
  }
  return result;
}

uint64_t sub_1C616DF18(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v16 = *(unsigned __int8 *)(a5 + 196);
    v17 = 32 * *(unsigned __int8 *)(a5 + 16);
    v18 = *(_QWORD *)(a3 + 16);
    v19 = (_QWORD *)(v18 + 16 * v10);
    if (*(_BYTE *)v19 == 2)
    {
      v19 = (_QWORD *)(v18 + 16 * v10);
      v17 |= v19[1];
    }
    else
    {
      *v19 = 2;
    }
    v19[1] = v17;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v16 != 0, (unsigned __int8 *)(a5 + 148), (unsigned int *)(a5 + 164));
    v20 = *(int *)(a5 + 156);
    v21 = (uint64_t *)((char *)&unk_1C6A5FCD0 + 8 * v20);
    v22 = (char *)&unk_1C6A5FCE8 + 8 * v20;
    v23 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    if (*(_DWORD *)(a5 + 160) != 1)
      v21 = (uint64_t *)v22;
    v24 = *v21;
    *v23 = 2;
    v23[1] = v24;
    result = sub_1C4C2A160((uint64_t)a1, a3, v12, a5 + 28);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C2A160((uint64_t)a1, a3, v13, a5 + 56);
      if ((_DWORD)result == 3)
        return sub_1C4C2A160((uint64_t)a1, a3, v14, a5 + 84);
    }
  }
  return result;
}

uint64_t sub_1C616E0E0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 196);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 148), (unsigned int *)(a5 + 164));
    v21 = *(int *)(a5 + 156);
    v22 = (uint64_t *)((char *)&unk_1C6A5FCD0 + 8 * v21);
    v23 = (char *)&unk_1C6A5FCE8 + 8 * v21;
    v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    if (*(_DWORD *)(a5 + 160) != 1)
      v22 = (uint64_t *)v23;
    v25 = *v22;
    *v24 = 2;
    v24[1] = v25;
    result = sub_1C4C2A160((uint64_t)a1, a3, v12, a5 + 28);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C2A160((uint64_t)a1, a3, v13, a5 + 56);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C2A160((uint64_t)a1, a3, v14, a5 + 84);
        if ((_DWORD)result == 3)
          return sub_1C4C2A160((uint64_t)a1, a3, v15, a5 + 112);
      }
    }
  }
  return result;
}

uint64_t sub_1C616E2D4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2BCA0((uint64_t)a1, a3, v9, a5, *(_DWORD *)(a5 + 80));
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a5 + 116);
    v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v10);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 72), (unsigned int *)(a5 + 84));
    v18 = *(int *)(a5 + 80);
    v19 = (char *)&unk_1C6A5FCD0 + 8 * v18;
    v20 = (uint64_t *)((char *)&unk_1C6A5FCE8 + 8 * v18);
    v21 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    if (*(_DWORD *)(a5 + 32) == 1)
      v20 = (uint64_t *)v19;
    v22 = *v20;
    *v21 = 2;
    v21[1] = v22;
    return sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 36, 1);
  }
  return result;
}

void sub_1C616E43C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _QWORD *v19;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  sub_1C4C2BD80((uint64_t)a1, a3, v9, a5);
  if (v12 == 3)
  {
    v13 = *(unsigned __int8 *)(a5 + 144);
    v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    v16 = (_QWORD *)(v15 + 16 * v10);
    if (*(_BYTE *)v16 == 2)
    {
      v16 = (_QWORD *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      *v16 = 2;
    }
    v16[1] = v14;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 100), (unsigned int *)(a5 + 112));
    v17 = (unsigned __int8 *)(a5 + 36);
    if (*(_DWORD *)(a5 + 44) == 2)
    {
      sub_1C4C27C38((uint64_t)a1, a3, v11, (uint64_t)v17, 3);
    }
    else
    {
      v18 = *v17;
      v19 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
      *v19 = 2;
      v19[1] = v18;
    }
  }
}

void sub_1C616E568(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  sub_1C4C2BD80((uint64_t)a1, a3, v9, a5);
  if (v13 == 3)
  {
    v14 = *(unsigned __int8 *)(a5 + 144);
    v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v10);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 100), (unsigned int *)(a5 + 112));
    v18 = (unsigned __int8 *)(a5 + 36);
    if (*(_DWORD *)(a5 + 44) == 2)
    {
      if (sub_1C4C27C38((uint64_t)a1, a3, v11, (uint64_t)v18, 3) != 3)
        return;
    }
    else
    {
      v19 = *v18;
      v20 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
      *v20 = 2;
      v20[1] = v19;
    }
    if (*(_DWORD *)(a5 + 72) == 7)
    {
      v21 = *(unsigned __int8 *)(a5 + 68);
      v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
      *v22 = 2;
      v22[1] = v21;
    }
    else
    {
      sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 64, 1);
    }
  }
}

uint64_t sub_1C616E6F4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v13 = *(unsigned __int8 *)(a5 + 108);
    v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    v16 = (_QWORD *)(v15 + 16 * v10);
    if (*(_BYTE *)v16 == 2)
    {
      v16 = (_QWORD *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      *v16 = 2;
    }
    v16[1] = v14;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 76));
    return sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 28, 1);
  }
  return result;
}

uint64_t sub_1C616E800(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27C38((uint64_t)a1, a3, v9, a5 + 28, 1);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C2800C((uint64_t)a1, a3, v10, a5, 0x100000003, 0x100000002);
    if ((_DWORD)result == 3)
    {
      v13 = *(unsigned __int8 *)(a5 + 108);
      v14 = 32 * *(unsigned __int8 *)(a5 + 16);
      v15 = *(_QWORD *)(a3 + 16);
      v16 = (_QWORD *)(v15 + 16 * v11);
      if (*(_BYTE *)v16 == 2)
      {
        v16 = (_QWORD *)(v15 + 16 * v11);
        v14 |= v16[1];
      }
      else
      {
        *v16 = 2;
      }
      v16[1] = v14;
      sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v11, v13 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 76));
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C616E91C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v28 = sub_1C4C2FD5C(v8);
  v27 = sub_1C4C2FD5C(v8);
  v26 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2800C((uint64_t)a1, a3, v9, a5, 0, 0);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 340);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 304));
    v21 = 2 * (*(_DWORD *)(a5 + 300) == 1);
    if (*a1 >= 4)
      v21 = *(_DWORD *)(a5 + 336);
    v22 = sub_1C4A20B8C(*(_DWORD *)(a5 + 280), *(_BYTE *)(a5 + 136), *(_QWORD *)(a5 + 140), *(_DWORD *)(a5 + 292), *(_DWORD *)(a5 + 296), *(_QWORD *)(a5 + 272), *(_DWORD *)(a5 + 288), *(_DWORD *)(a5 + 268), *(_DWORD *)(a5 + 132), *(_DWORD *)(a5 + 152), v21, *(_DWORD *)(a5 + 344));
    if (v23)
    {
      v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
      *v24 = 2;
      v24[1] = v22;
      result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C27C38((uint64_t)a1, a3, v13, a5 + 84, 1);
        if ((_DWORD)result == 3)
        {
          result = sub_1C4C27C38((uint64_t)a1, a3, v14, a5 + 156, 1);
          if ((_DWORD)result == 3)
          {
            result = sub_1C4C27D28((uint64_t)a1, a3, v28, a5 + 184);
            if ((_DWORD)result == 3)
            {
              result = sub_1C4C27C38((uint64_t)a1, a3, v27, a5 + 212, 1);
              if ((_DWORD)result == 3)
              {
                result = sub_1C4C27D28((uint64_t)a1, a3, v26, a5 + 240);
                if ((_DWORD)result == 3)
                {
                  v25 = sub_1C6172CE8(a5, *a1);
                  return sub_1C4C2FC84((uint64_t)a1, a3, v15, a5 + 28, v25);
                }
              }
            }
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C616EBFC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  unint64_t v22;
  char v23;
  _QWORD *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v30 = sub_1C4C2FD5C(v8);
  v29 = sub_1C4C2FD5C(v8);
  v28 = sub_1C4C2FD5C(v8);
  v27 = sub_1C4C2FD5C(v8);
  v26 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2800C((uint64_t)a1, a3, v9, a5, 0, 0);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 340);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 124), (unsigned int *)(a5 + 304));
    v21 = 2 * (*(_DWORD *)(a5 + 300) == 1);
    if (*a1 >= 4)
      v21 = *(_DWORD *)(a5 + 336);
    v22 = sub_1C4A20B8C(*(_DWORD *)(a5 + 280), *(_BYTE *)(a5 + 136), *(_QWORD *)(a5 + 140), *(_DWORD *)(a5 + 292), *(_DWORD *)(a5 + 296), *(_QWORD *)(a5 + 272), *(_DWORD *)(a5 + 288), *(_DWORD *)(a5 + 268), *(_DWORD *)(a5 + 132), *(_DWORD *)(a5 + 152), v21, *(_DWORD *)(a5 + 344));
    if (v23)
    {
      v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
      *v24 = 2;
      v24[1] = v22;
      result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C27C38((uint64_t)a1, a3, v13, a5 + 84, 1);
        if ((_DWORD)result == 3)
        {
          result = sub_1C4C27C38((uint64_t)a1, a3, v14, a5 + 156, 1);
          if ((_DWORD)result == 3)
          {
            result = sub_1C4C27D28((uint64_t)a1, a3, v30, a5 + 184);
            if ((_DWORD)result == 3)
            {
              result = sub_1C4C27C38((uint64_t)a1, a3, v29, a5 + 212, 1);
              if ((_DWORD)result == 3)
              {
                result = sub_1C4C27D28((uint64_t)a1, a3, v28, a5 + 240);
                if ((_DWORD)result == 3)
                {
                  v25 = sub_1C6172CE8(a5, *a1);
                  result = sub_1C4C2FC84((uint64_t)a1, a3, v27, a5 + 28, v25);
                  if ((_DWORD)result == 3)
                  {
                    result = sub_1C4C2BE88(a1, (unsigned __int16 *)a3, v26, a5);
                    if ((_DWORD)result == 3)
                      return sub_1C4C2BE88(a1, (unsigned __int16 *)a3, v15, a5);
                  }
                }
              }
            }
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C616EF34(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 88), (unsigned __int8 *)(a5 + 44), (unsigned int *)(a5 + 56));
  return sub_1C4C27248((uint64_t)a1, a3, v10, a5, 1);
}

uint64_t sub_1C616EFBC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 88), (unsigned __int8 *)(a5 + 44), (unsigned int *)(a5 + 56));
  return sub_1C4C27C38((uint64_t)a1, a3, v10, a5 + 8, 1);
}

uint64_t sub_1C616F044(unsigned int *a1, unsigned __int16 a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C27248((uint64_t)a1, (uint64_t)a3, v9, (uint64_t)a5, 1);
  if ((_DWORD)v14 == 3)
  {
    v15 = *((unsigned __int8 *)a5 + 164);
    v16 = 32 * *((unsigned __int8 *)a5 + 16);
    v17 = *((_QWORD *)a3 + 2);
    v18 = (_QWORD *)(v17 + 16 * v10);
    if (*(_BYTE *)v18 == 2)
    {
      v18 = (_QWORD *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      *v18 = 2;
    }
    v18[1] = v16;
    sub_1C4C27178(*a1, *((_QWORD *)a3 + 2), v10, v15 != 0, (unsigned __int8 *)a5 + 120, (unsigned int *)a5 + 33);
    v14 = sub_1C4C2A160((uint64_t)a1, (uint64_t)a3, v11, (uint64_t)(a5 + 14));
    if ((_DWORD)v14 == 3)
    {
      v14 = sub_1C4C2A160((uint64_t)a1, (uint64_t)a3, v12, (uint64_t)(a5 + 28));
      if ((_DWORD)v14 == 3)
      {
        v14 = sub_1C4C2A160((uint64_t)a1, (uint64_t)a3, v13, (uint64_t)(a5 + 42));
        if ((_DWORD)v14 == 3)
        {
          if (*((_DWORD *)a5 + 32))
            return 3;
          v20 = *a5;
          if (v20 > 0xFD)
          {
            return 3;
          }
          else
          {
            v21 = *((_QWORD *)a1 + 1);
            v22 = *((_QWORD *)a3 + 2);
            v14 = 3;
            v23 = (_QWORD *)(v22 + 16 * sub_1C4C2FD5C(*a3));
            v24 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v21 + 24) + 480) + 2 * v20);
            *v23 = 1;
            v23[1] = v24;
          }
        }
      }
    }
  }
  return v14;
}

uint64_t sub_1C616F204(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t result;
  unint64_t v20;
  _QWORD *v21;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = *(unsigned __int8 *)(a5 + 176);
  v16 = 32 * *(unsigned __int8 *)(a5 + 16);
  v17 = *(_QWORD *)(a3 + 16);
  v18 = (_QWORD *)(v17 + 16 * v9);
  if (*(_BYTE *)v18 == 2)
  {
    v18 = (_QWORD *)(v17 + 16 * v9);
    v16 |= v18[1];
  }
  else
  {
    *v18 = 2;
  }
  v18[1] = v16;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v15 != 0, (unsigned __int8 *)(a5 + 120), (unsigned int *)(a5 + 128));
  result = sub_1C4C27248((uint64_t)a1, a3, v10, a5, 1);
  if ((_DWORD)result == 3)
  {
    v20 = *(unsigned int *)(a5 + 160) | (16 * *(unsigned __int8 *)(a5 + 164)) | ((unint64_t)*(unsigned int *)(a5 + 168) << 9) | ((unint64_t)*(unsigned __int8 *)(a5 + 172) << 13);
    v21 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    *v21 = 2;
    v21[1] = v20;
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 28, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27C38((uint64_t)a1, a3, v13, a5 + 56, 1);
      if ((_DWORD)result == 3)
        return sub_1C4C27C38((uint64_t)a1, a3, v14, a5 + 84, 1);
    }
  }
  return result;
}

uint64_t sub_1C616F3C8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t result;
  unint64_t v16;
  _QWORD *v17;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 176), (unsigned __int8 *)(a5 + 120), (unsigned int *)(a5 + 128));
  result = sub_1C4C27248((uint64_t)a1, a3, v10, a5, 1);
  if ((_DWORD)result == 3)
  {
    v16 = *(unsigned int *)(a5 + 160) | (16 * *(unsigned __int8 *)(a5 + 164)) | ((unint64_t)*(unsigned int *)(a5 + 168) << 9) | ((unint64_t)*(unsigned __int8 *)(a5 + 172) << 13);
    v17 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    *v17 = 2;
    v17[1] = v16;
    result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 28, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27C38((uint64_t)a1, a3, v13, a5 + 56, 1);
      if ((_DWORD)result == 3)
        return sub_1C4C27C38((uint64_t)a1, a3, v14, a5 + 84, 1);
    }
  }
  return result;
}

uint64_t sub_1C616F548(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v15 = *(unsigned __int8 *)(a5 + 116);
    v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    v17 = *(_QWORD *)(a3 + 16);
    v18 = (_QWORD *)(v17 + 16 * v10);
    if (*(_BYTE *)v18 == 2)
    {
      v18 = (_QWORD *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      *v18 = 2;
    }
    v18[1] = v16;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 84));
    v19 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    v20 = *(unsigned int *)(a5 + 72);
    *v19 = 2;
    v19[1] = v20;
    v21 = *(unsigned int *)(a5 + 76);
    v22 = *(_QWORD *)(a3 + 16);
    v23 = (_QWORD *)(v22 + 16 * v12);
    if (*(_BYTE *)v23 == 2)
    {
      v23 = (_QWORD *)(v22 + 16 * v12);
      v21 |= v23[1];
    }
    else
    {
      *v23 = 2;
    }
    v23[1] = v21;
    return sub_1C4C2A160((uint64_t)a1, a3, v13, a5 + 28);
  }
  return result;
}

uint64_t sub_1C616F6D0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v15 = *(unsigned __int8 *)(a5 + 116);
    v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    v17 = *(_QWORD *)(a3 + 16);
    v18 = (_QWORD *)(v17 + 16 * v10);
    if (*(_BYTE *)v18 == 2)
    {
      v18 = (_QWORD *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      *v18 = 2;
    }
    v18[1] = v16;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 84));
    v19 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    v20 = *(unsigned int *)(a5 + 72);
    *v19 = 2;
    v19[1] = v20;
    v21 = *(unsigned int *)(a5 + 76);
    v22 = *(_QWORD *)(a3 + 16);
    v23 = (_QWORD *)(v22 + 16 * v12);
    if (*(_BYTE *)v23 == 2)
    {
      v23 = (_QWORD *)(v22 + 16 * v12);
      v21 |= v23[1];
    }
    else
    {
      *v23 = 2;
    }
    v23[1] = v21;
    return sub_1C4C2C810((uint64_t)a1, a3, v13, (unsigned __int16 *)(a5 + 28), *(_DWORD *)(a5 + 72));
  }
  return result;
}

uint64_t sub_1C616F85C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2C9D4((uint64_t)a1, a3, v9, a5, *(_DWORD *)(a5 + 80));
  if ((_DWORD)result == 3)
  {
    v14 = *(unsigned __int8 *)(a5 + 116);
    v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v10);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 72), (unsigned int *)(a5 + 84));
    v18 = *(unsigned int *)(a5 + 32);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v11);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v11);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    return sub_1C4C2CA6C((uint64_t)a1, (unsigned __int16 *)a3, v12, a5 + 36, *(_DWORD *)(a5 + 80));
  }
  return result;
}

uint64_t sub_1C616F9C0(_DWORD *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL8 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *((unsigned __int8 *)a5 + 57), (unsigned __int8 *)a5 + 16, (unsigned int *)a5 + 6);
  v12 = *((_DWORD *)a5 + 1) == 1;
  if (*((_BYTE *)a5 + 56))
    v13 = v12 | 2;
  else
    v13 = *((_DWORD *)a5 + 1) == 1;
  if ((*a1 - 3) < 3)
    v12 = v13;
  v14 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  *v14 = 2;
  v14[1] = v12;
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
  v16 = *a5;
  *v15 = 2;
  v15[1] = v16;
  return 3;
}

uint64_t sub_1C616FA94(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *((unsigned __int8 *)a5 + 52), (unsigned __int8 *)a5 + 12, (unsigned int *)a5 + 5);
  v11 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  v12 = *a5;
  *v11 = 2;
  v11[1] = v12;
  return 3;
}

uint64_t sub_1C616FB20(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  unint64_t v12;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 63), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 28));
  v11 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  v12 = ((unint64_t)*(unsigned __int8 *)(a5 + 18) << 8) | ((unint64_t)*(unsigned __int8 *)(a5 + 16) << 7) | ((unint64_t)*(unsigned __int8 *)(a5 + 19) << 9) | ((unint64_t)*(unsigned __int8 *)(a5 + 20) << 10) | ((unint64_t)*(unsigned __int8 *)(a5 + 17) << 11) | (2 * *(unsigned int *)(a5 + 24)) | (16 * *(unsigned __int8 *)(a5 + 60)) | (32 * *(unsigned __int8 *)(a5 + 61)) | ((unint64_t)*(unsigned __int8 *)(a5 + 62) << 6);
  *v11 = 2;
  v11[1] = v12;
  return 3;
}

uint64_t sub_1C616FBF0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  __n128 v11;
  unsigned int v12;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 84), (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 48));
  v12 = sub_1C6172B70(v11, a5, *a1);
  return sub_1C4C2FC84((uint64_t)a1, a3, v10, a5, v12);
}

uint64_t sub_1C616FC84(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  __n128 v11;
  unsigned int v12;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 88), (unsigned __int8 *)(a5 + 40), (unsigned int *)(a5 + 52));
  v12 = sub_1C4C92A44(a5, *a1, v11);
  return sub_1C4C2FC84((uint64_t)a1, a3, v10, a5, v12);
}

uint64_t sub_1C616FD18(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C27C38((uint64_t)a1, a3, v10, a5 + 28, 1);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 56, 1);
      if ((_DWORD)result == 3)
      {
        v14 = *(unsigned __int8 *)(a5 + 132);
        v15 = 32 * *(unsigned __int8 *)(a5 + 16);
        v16 = *(_QWORD *)(a3 + 16);
        v17 = (_QWORD *)(v16 + 16 * v12);
        if (*(_BYTE *)v17 == 2)
        {
          v17 = (_QWORD *)(v16 + 16 * v12);
          v15 |= v17[1];
        }
        else
        {
          *v17 = 2;
        }
        v17[1] = v15;
        sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v12, v14 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 100));
        return 3;
      }
    }
  }
  return result;
}

uint64_t sub_1C616FE5C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C27C38((uint64_t)a1, a3, v10, a5 + 28, 1);
    if ((_DWORD)result == 3)
    {
      v13 = *(unsigned __int8 *)(a5 + 136);
      v14 = 32 * *(unsigned __int8 *)(a5 + 16);
      v15 = *(_QWORD *)(a3 + 16);
      v16 = (_QWORD *)(v15 + 16 * v11);
      if (*(_BYTE *)v16 == 2)
      {
        v16 = (_QWORD *)(v15 + 16 * v11);
        v14 |= v16[1];
      }
      else
      {
        *v16 = 2;
      }
      v16[1] = v14;
      sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v11, v13 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 104));
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C616FF68(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  result = sub_1C4C2E02C((uint64_t)a1, a3, v9, a5);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C2A160((uint64_t)a1, a3, v10, a5 + 32);
    if ((_DWORD)result == 3)
    {
      v13 = *(unsigned __int8 *)(a5 + 140);
      v14 = 32 * *(unsigned __int8 *)(a5 + 16);
      v15 = *(_QWORD *)(a3 + 16);
      v16 = (_QWORD *)(v15 + 16 * v11);
      if (*(_BYTE *)v16 == 2)
      {
        v16 = (_QWORD *)(v15 + 16 * v11);
        v14 |= v16[1];
      }
      else
      {
        *v16 = 2;
      }
      v16[1] = v14;
      sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v11, v13 != 0, (unsigned __int8 *)(a5 + 96), (unsigned int *)(a5 + 108));
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C617006C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C2A160((uint64_t)a1, a3, v10, a5 + 36);
    if ((_DWORD)result == 3)
    {
      v13 = *(unsigned __int8 *)(a5 + 144);
      v14 = 32 * *(unsigned __int8 *)(a5 + 16);
      v15 = *(_QWORD *)(a3 + 16);
      v16 = (_QWORD *)(v15 + 16 * v11);
      if (*(_BYTE *)v16 == 2)
      {
        v16 = (_QWORD *)(v15 + 16 * v11);
        v14 |= v16[1];
      }
      else
      {
        *v16 = 2;
      }
      v16[1] = v14;
      sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v11, v13 != 0, (unsigned __int8 *)(a5 + 100), (unsigned int *)(a5 + 112));
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C6170174(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v13 = *(unsigned __int8 *)(a5 + 104);
    v14 = 32 * *(unsigned __int8 *)(a5 + 16);
    v15 = *(_QWORD *)(a3 + 16);
    v16 = (_QWORD *)(v15 + 16 * v10);
    if (*(_BYTE *)v16 == 2)
    {
      v16 = (_QWORD *)(v15 + 16 * v10);
      v14 |= v16[1];
    }
    else
    {
      *v16 = 2;
    }
    v16[1] = v14;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v13 != 0, (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 72));
    return sub_1C4C27C38((uint64_t)a1, a3, v11, a5 + 28, 1);
  }
  return result;
}

uint64_t sub_1C6170280(int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v17;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 216), (unsigned __int8 *)(a5 + 64), (unsigned int *)(a5 + 72));
  result = sub_1C4C27C38((uint64_t)a1, a3, v10, a5 + 104, 1);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C27D28((uint64_t)a1, a3, v11, a5 + 132);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 160, 1);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C27C38((uint64_t)a1, a3, v13, a5 + 188, 1);
        if ((_DWORD)result == 3)
        {
          result = sub_1C4C27C38((uint64_t)a1, a3, v14, a5 + 32, 1);
          if ((_DWORD)result == 3)
          {
            v17 = sub_1C6172E9C(a5, *a1);
            return sub_1C4C2FC84((uint64_t)a1, a3, v15, a5, v17);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C617042C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;

  v8 = sub_1C4C2FD5C(a2);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v8, *(unsigned __int8 *)(a5 + 44), (unsigned __int8 *)(a5 + 4), (unsigned int *)(a5 + 12));
  return 3;
}

uint64_t sub_1C6170484(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t result;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 104), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 16));
  result = sub_1C4C27C38((uint64_t)a1, a3, v10, a5 + 48, 1);
  if ((_DWORD)result == 3)
    return sub_1C4C27D28((uint64_t)a1, a3, v11, a5 + 76);
  return result;
}

uint64_t sub_1C617054C(int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 76), (unsigned __int8 *)(a5 + 36), (unsigned int *)(a5 + 44));
  v11 = sub_1C6172F0C(a5, *a1);
  return sub_1C4C2FC84((uint64_t)a1, a3, v10, a5, v11);
}

uint64_t sub_1C61705E0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 76), (unsigned __int8 *)(a5 + 36), (unsigned int *)(a5 + 44));
  return sub_1C4C27C38((uint64_t)a1, a3, v10, a5, 1);
}

uint64_t sub_1C6170668(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)v11 == 3)
  {
    v12 = *(unsigned __int8 *)(a5 + 76);
    v13 = 32 * *(unsigned __int8 *)(a5 + 16);
    v14 = *(_QWORD *)(a3 + 16);
    v15 = (_QWORD *)(v14 + 16 * v10);
    if (*(_BYTE *)v15 == 2)
    {
      v15 = (_QWORD *)(v14 + 16 * v10);
      v13 |= v15[1];
    }
    else
    {
      *v15 = 2;
    }
    v15[1] = v13;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v12 != 0, (unsigned __int8 *)(a5 + 36), (unsigned int *)(a5 + 44));
  }
  return v11;
}

uint64_t sub_1C6170744(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *((unsigned __int8 *)a5 + 64), (unsigned __int8 *)a5 + 20, (unsigned int *)a5 + 7);
  v13 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  v14 = *((unsigned int *)a5 + 15);
  *v13 = 2;
  v13[1] = v14;
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
  v16 = *a5;
  *v15 = 2;
  v15[1] = v16;
  v17 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
  v18 = *((unsigned int *)a5 + 2);
  *v17 = 2;
  v17[1] = v18;
  return 3;
}

uint64_t sub_1C6170818(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v14 = sub_1C4C2FD5C(v7);
  v15 = sub_1C4C2FD5C(v7);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v8, *(unsigned __int8 *)(a5 + 70), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 16));
  v16 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v9);
  v17 = *(unsigned int *)(a5 + 52);
  *v16 = 2;
  v16[1] = v17;
  v18 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  v19 = *(unsigned int *)(a5 + 56);
  *v18 = 2;
  v18[1] = v19;
  v20 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
  v21 = *(unsigned int *)(a5 + 60);
  *v20 = 2;
  v20[1] = v21;
  v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
  v23 = *(unsigned __int8 *)(a5 + 64);
  *v22 = 2;
  v22[1] = v23;
  v24 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
  v25 = *(unsigned __int8 *)(a5 + 69);
  *v24 = 2;
  v24[1] = v25;
  v26 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
  v27 = *(unsigned __int8 *)(a5 + 68);
  *v26 = 2;
  v26[1] = v27;
  v28 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
  v29 = *(unsigned __int16 *)(a5 + 48);
  *v28 = 2;
  v28[1] = v29;
  return 3;
}

uint64_t sub_1C6170980(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 62), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 24));
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  v16 = *(unsigned __int8 *)(a5 + 16);
  *v15 = 2;
  v15[1] = v16;
  v17 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
  v18 = *(unsigned int *)(a5 + 20);
  *v17 = 2;
  v17[1] = v18;
  v19 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
  v20 = *(unsigned __int16 *)(a5 + 60);
  *v19 = 2;
  v19[1] = v20;
  v21 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
  v22 = *(unsigned __int16 *)(a5 + 56);
  *v21 = 2;
  v21[1] = v22;
  v23 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
  v24 = *(unsigned __int16 *)(a5 + 58);
  *v23 = 2;
  v23[1] = v24;
  return 3;
}

uint64_t sub_1C6170A9C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, *(unsigned __int8 *)(a5 + 60), (unsigned __int8 *)(a5 + 8), (unsigned int *)(a5 + 16));
  v13 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
  v14 = *(unsigned int *)(a5 + 48);
  *v13 = 2;
  v13[1] = v14;
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
  v16 = *(unsigned int *)(a5 + 52);
  *v15 = 2;
  v15[1] = v16;
  v17 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
  v18 = *(unsigned int *)(a5 + 56);
  *v17 = 2;
  v17[1] = v18;
  return 3;
}

uint64_t sub_1C6170B70(unsigned int *a1, unsigned __int16 a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _OWORD *v25;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = *a5;
  if ((v11 & 0xFFFFFE0F) != 0)
    return 0;
  v13 = v10;
  v14 = sub_1C4C2FD5C(v8);
  v15 = (_QWORD *)(*((_QWORD *)a3 + 2) + 16 * sub_1C4C2FD5C(v8));
  v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 2880) + ((v11 >> 3) & 0x1FFE));
  *v15 = 1;
  v15[1] = v16;
  v17 = *((unsigned __int8 *)a5 + 140);
  v18 = 32 * *((unsigned __int8 *)a5 + 12);
  v19 = *((_QWORD *)a3 + 2);
  v20 = (_QWORD *)(v19 + 16 * v14);
  if (*(_BYTE *)v20 == 2)
  {
    v20 = (_QWORD *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    *v20 = 2;
  }
  v20[1] = v18;
  sub_1C4C27178(*a1, *((_QWORD *)a3 + 2), v14, v17 != 0, (unsigned __int8 *)a5 + 100, (unsigned int *)a5 + 27);
  result = sub_1C4C2E76C(*((_QWORD *)a1 + 1), (uint64_t)a3, v9, a5 + 12);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C2E76C(*((_QWORD *)a1 + 1), (uint64_t)a3, v13, a5 + 28);
    if ((_DWORD)result == 3)
    {
      v21 = sub_1C4C2FD5C(*a3);
      v22 = *a5;
      if ((v22 & 0xFFFFFE0F) == 0)
      {
        v23 = (_QWORD *)(*((_QWORD *)a3 + 2) + 16 * v21);
        v24 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 2880) + ((v22 >> 3) & 0x1FFE));
        *v23 = 1;
        v23[1] = v24;
      }
      v25 = (_OWORD *)(*((_QWORD *)a3 + 2) + 16 * (v21 + 1));
      if (*(_BYTE *)v25 != 2)
        *v25 = xmmword_1C64169D0;
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C6170D24(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = *a5;
  if ((v11 & 0xFFFFFE0F) != 0)
    return 0;
  v13 = v10;
  v14 = sub_1C4C2FD5C(v8);
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * sub_1C4C2FD5C(v8));
  v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 2880) + ((v11 >> 3) & 0x1FFE));
  *v15 = 1;
  v15[1] = v16;
  v17 = *((unsigned __int8 *)a5 + 140);
  v18 = 32 * *((unsigned __int8 *)a5 + 12);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (_QWORD *)(v19 + 16 * v14);
  if (*(_BYTE *)v20 == 2)
  {
    v20 = (_QWORD *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    *v20 = 2;
  }
  v20[1] = v18;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 100, (unsigned int *)a5 + 27);
  result = sub_1C4C2E76C(*((_QWORD *)a1 + 1), a3, v9, a5 + 12);
  if ((_DWORD)result == 3)
    return sub_1C4C2E76C(*((_QWORD *)a1 + 1), a3, v13, a5 + 28);
  return result;
}

uint64_t sub_1C6170E78(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = *a5;
  if ((v11 & 0xFFFFFE0F) != 0)
    return 0;
  v13 = v10;
  v14 = sub_1C4C2FD5C(v8);
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * sub_1C4C2FD5C(v8));
  v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 2880) + ((v11 >> 3) & 0x1FFE));
  *v15 = 1;
  v15[1] = v16;
  v17 = *((unsigned __int8 *)a5 + 144);
  v18 = 32 * *((unsigned __int8 *)a5 + 12);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (_QWORD *)(v19 + 16 * v14);
  if (*(_BYTE *)v20 == 2)
  {
    v20 = (_QWORD *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    *v20 = 2;
  }
  v20[1] = v18;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 96, (unsigned int *)a5 + 27);
  result = sub_1C4C2E878(*((_QWORD *)a1 + 1), a3, v9, a5 + 12);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C2E878(*((_QWORD *)a1 + 1), a3, v13, a5 + 28);
    if ((_DWORD)result == 3)
    {
      sub_1C4C2E928(*((_QWORD *)a1 + 1), (unsigned __int16 *)a3, *a5);
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C6170FD8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = *a5;
  if ((v11 & 0xFFFFFE0F) != 0)
    return 0;
  v13 = v10;
  v14 = sub_1C4C2FD5C(v8);
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * sub_1C4C2FD5C(v8));
  v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 2880) + ((v11 >> 3) & 0x1FFE));
  *v15 = 1;
  v15[1] = v16;
  v17 = *((unsigned __int8 *)a5 + 144);
  v18 = 32 * *((unsigned __int8 *)a5 + 12);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (_QWORD *)(v19 + 16 * v14);
  if (*(_BYTE *)v20 == 2)
  {
    v20 = (_QWORD *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    *v20 = 2;
  }
  v20[1] = v18;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 96, (unsigned int *)a5 + 27);
  result = sub_1C4C2E878(*((_QWORD *)a1 + 1), a3, v9, a5 + 12);
  if ((_DWORD)result == 3)
    return sub_1C4C2E878(*((_QWORD *)a1 + 1), a3, v13, a5 + 28);
  return result;
}

uint64_t sub_1C617112C(unsigned int *a1, unsigned __int16 a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _OWORD *v25;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0)
    return 0;
  v13 = v10;
  v14 = sub_1C4C2FD5C(v8);
  v15 = (_QWORD *)(*((_QWORD *)a3 + 2) + 16 * sub_1C4C2FD5C(v8));
  v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *v15 = 1;
  v15[1] = v16;
  v17 = *((unsigned __int8 *)a5 + 140);
  v18 = 32 * *((unsigned __int8 *)a5 + 12);
  v19 = *((_QWORD *)a3 + 2);
  v20 = (_QWORD *)(v19 + 16 * v14);
  if (*(_BYTE *)v20 == 2)
  {
    v20 = (_QWORD *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    *v20 = 2;
  }
  v20[1] = v18;
  sub_1C4C27178(*a1, *((_QWORD *)a3 + 2), v14, v17 != 0, (unsigned __int8 *)a5 + 100, (unsigned int *)a5 + 27);
  result = sub_1C4C2E76C(*((_QWORD *)a1 + 1), (uint64_t)a3, v9, a5 + 12);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C2E9B4(*((_QWORD *)a1 + 1), (uint64_t)a3, v13, a5 + 28);
    if ((_DWORD)result == 3)
    {
      v21 = sub_1C4C2FD5C(*a3);
      v22 = *a5;
      if ((v22 & 0xFFFFFE07) == 0)
      {
        v23 = (_QWORD *)(*((_QWORD *)a3 + 2) + 16 * v21);
        v24 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 1824) + ((v22 >> 2) & 0x3FFE));
        *v23 = 1;
        v23[1] = v24;
      }
      v25 = (_OWORD *)(*((_QWORD *)a3 + 2) + 16 * (v21 + 1));
      if (*(_BYTE *)v25 != 2)
        *v25 = xmmword_1C64169D0;
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C61712E0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0)
    return 0;
  v13 = v10;
  v14 = sub_1C4C2FD5C(v8);
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * sub_1C4C2FD5C(v8));
  v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *v15 = 1;
  v15[1] = v16;
  v17 = *((unsigned __int8 *)a5 + 140);
  v18 = 32 * *((unsigned __int8 *)a5 + 12);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (_QWORD *)(v19 + 16 * v14);
  if (*(_BYTE *)v20 == 2)
  {
    v20 = (_QWORD *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    *v20 = 2;
  }
  v20[1] = v18;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 100, (unsigned int *)a5 + 27);
  result = sub_1C4C2E76C(*((_QWORD *)a1 + 1), a3, v9, a5 + 12);
  if ((_DWORD)result == 3)
    return sub_1C4C2E9B4(*((_QWORD *)a1 + 1), a3, v13, a5 + 28);
  return result;
}

uint64_t sub_1C6171434(unsigned int *a1, unsigned __int16 a2, unsigned __int16 *a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _OWORD *v25;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0)
    return 0;
  v13 = v10;
  v14 = sub_1C4C2FD5C(v8);
  v15 = (_QWORD *)(*((_QWORD *)a3 + 2) + 16 * sub_1C4C2FD5C(v8));
  v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *v15 = 1;
  v15[1] = v16;
  v17 = *((unsigned __int8 *)a5 + 140);
  v18 = 32 * *((unsigned __int8 *)a5 + 12);
  v19 = *((_QWORD *)a3 + 2);
  v20 = (_QWORD *)(v19 + 16 * v14);
  if (*(_BYTE *)v20 == 2)
  {
    v20 = (_QWORD *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    *v20 = 2;
  }
  v20[1] = v18;
  sub_1C4C27178(*a1, *((_QWORD *)a3 + 2), v14, v17 != 0, (unsigned __int8 *)a5 + 100, (unsigned int *)a5 + 27);
  result = sub_1C4C2E9B4(*((_QWORD *)a1 + 1), (uint64_t)a3, v9, a5 + 12);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C2E76C(*((_QWORD *)a1 + 1), (uint64_t)a3, v13, a5 + 28);
    if ((_DWORD)result == 3)
    {
      v21 = sub_1C4C2FD5C(*a3);
      v22 = *a5;
      if ((v22 & 0xFFFFFE07) == 0)
      {
        v23 = (_QWORD *)(*((_QWORD *)a3 + 2) + 16 * v21);
        v24 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 1824) + ((v22 >> 2) & 0x3FFE));
        *v23 = 1;
        v23[1] = v24;
      }
      v25 = (_OWORD *)(*((_QWORD *)a3 + 2) + 16 * (v21 + 1));
      if (*(_BYTE *)v25 != 2)
        *v25 = xmmword_1C64169D0;
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C61715E8(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0)
    return 0;
  v13 = v10;
  v14 = sub_1C4C2FD5C(v8);
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * sub_1C4C2FD5C(v8));
  v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *v15 = 1;
  v15[1] = v16;
  v17 = *((unsigned __int8 *)a5 + 140);
  v18 = 32 * *((unsigned __int8 *)a5 + 12);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (_QWORD *)(v19 + 16 * v14);
  if (*(_BYTE *)v20 == 2)
  {
    v20 = (_QWORD *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    *v20 = 2;
  }
  v20[1] = v18;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 100, (unsigned int *)a5 + 27);
  result = sub_1C4C2E9B4(*((_QWORD *)a1 + 1), a3, v9, a5 + 12);
  if ((_DWORD)result == 3)
    return sub_1C4C2E76C(*((_QWORD *)a1 + 1), a3, v13, a5 + 28);
  return result;
}

uint64_t sub_1C617173C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0)
    return 0;
  v13 = v10;
  v14 = sub_1C4C2FD5C(v8);
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * sub_1C4C2FD5C(v8));
  v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *v15 = 1;
  v15[1] = v16;
  v17 = *((unsigned __int8 *)a5 + 144);
  v18 = 32 * *((unsigned __int8 *)a5 + 12);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (_QWORD *)(v19 + 16 * v14);
  if (*(_BYTE *)v20 == 2)
  {
    v20 = (_QWORD *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    *v20 = 2;
  }
  v20[1] = v18;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 96, (unsigned int *)a5 + 27);
  result = sub_1C4C2E878(*((_QWORD *)a1 + 1), a3, v9, a5 + 12);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C2EAC0(*((_QWORD *)a1 + 1), a3, v13, a5 + 28);
    if ((_DWORD)result == 3)
    {
      sub_1C4C2EB6C(*((_QWORD *)a1 + 1), (unsigned __int16 *)a3, *a5);
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C617189C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0)
    return 0;
  v13 = v10;
  v14 = sub_1C4C2FD5C(v8);
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * sub_1C4C2FD5C(v8));
  v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *v15 = 1;
  v15[1] = v16;
  v17 = *((unsigned __int8 *)a5 + 144);
  v18 = 32 * *((unsigned __int8 *)a5 + 12);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (_QWORD *)(v19 + 16 * v14);
  if (*(_BYTE *)v20 == 2)
  {
    v20 = (_QWORD *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    *v20 = 2;
  }
  v20[1] = v18;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 96, (unsigned int *)a5 + 27);
  result = sub_1C4C2E878(*((_QWORD *)a1 + 1), a3, v9, a5 + 12);
  if ((_DWORD)result == 3)
    return sub_1C4C2EAC0(*((_QWORD *)a1 + 1), a3, v13, a5 + 28);
  return result;
}

uint64_t sub_1C61719F0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0)
    return 0;
  v13 = v10;
  v14 = sub_1C4C2FD5C(v8);
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * sub_1C4C2FD5C(v8));
  v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *v15 = 1;
  v15[1] = v16;
  v17 = *((unsigned __int8 *)a5 + 144);
  v18 = 32 * *((unsigned __int8 *)a5 + 12);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (_QWORD *)(v19 + 16 * v14);
  if (*(_BYTE *)v20 == 2)
  {
    v20 = (_QWORD *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    *v20 = 2;
  }
  v20[1] = v18;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 96, (unsigned int *)a5 + 27);
  result = sub_1C4C2EAC0(*((_QWORD *)a1 + 1), a3, v9, a5 + 12);
  if ((_DWORD)result == 3)
  {
    result = sub_1C4C2E878(*((_QWORD *)a1 + 1), a3, v13, a5 + 28);
    if ((_DWORD)result == 3)
    {
      sub_1C4C2EB6C(*((_QWORD *)a1 + 1), (unsigned __int16 *)a3, *a5);
      return 3;
    }
  }
  return result;
}

uint64_t sub_1C6171B50(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t result;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = *a5;
  if ((v11 & 0xFFFFFE07) != 0)
    return 0;
  v13 = v10;
  v14 = sub_1C4C2FD5C(v8);
  v15 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * sub_1C4C2FD5C(v8));
  v16 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 24) + 1824) + ((v11 >> 2) & 0x3FFE));
  *v15 = 1;
  v15[1] = v16;
  v17 = *((unsigned __int8 *)a5 + 144);
  v18 = 32 * *((unsigned __int8 *)a5 + 12);
  v19 = *(_QWORD *)(a3 + 16);
  v20 = (_QWORD *)(v19 + 16 * v14);
  if (*(_BYTE *)v20 == 2)
  {
    v20 = (_QWORD *)(v19 + 16 * v14);
    v18 |= v20[1];
  }
  else
  {
    *v20 = 2;
  }
  v20[1] = v18;
  sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v14, v17 != 0, (unsigned __int8 *)a5 + 96, (unsigned int *)a5 + 27);
  result = sub_1C4C2EAC0(*((_QWORD *)a1 + 1), a3, v9, a5 + 12);
  if ((_DWORD)result == 3)
    return sub_1C4C2E878(*((_QWORD *)a1 + 1), a3, v13, a5 + 28);
  return result;
}

uint64_t sub_1C6171CA4(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v15 = *(unsigned __int8 *)(a5 + 160);
    v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    v17 = *(_QWORD *)(a3 + 16);
    v18 = (_QWORD *)(v17 + 16 * v10);
    if (*(_BYTE *)v18 == 2)
    {
      v18 = (_QWORD *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      *v18 = 2;
    }
    v18[1] = v16;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 120), (unsigned int *)(a5 + 128));
    result = sub_1C4C27D28((uint64_t)a1, a3, v11, a5 + 28);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 56, 1);
      if ((_DWORD)result == 3)
        return sub_1C4C27C38((uint64_t)a1, a3, v13, a5 + 84, 1);
    }
  }
  return result;
}

uint64_t sub_1C6171E18(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v15 = *(unsigned __int8 *)(a5 + 144);
    v16 = 32 * *(unsigned __int8 *)(a5 + 16);
    v17 = *(_QWORD *)(a3 + 16);
    v18 = (_QWORD *)(v17 + 16 * v10);
    if (*(_BYTE *)v18 == 2)
    {
      v18 = (_QWORD *)(v17 + 16 * v10);
      v16 |= v18[1];
    }
    else
    {
      *v18 = 2;
    }
    v18[1] = v16;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v15 != 0, (unsigned __int8 *)(a5 + 92), (unsigned int *)(a5 + 112));
    v19 = 96;
    if (!*(_BYTE *)(a5 + 108))
      v19 = 32;
    v20 = *(unsigned int *)(a5 + 104) | (16 * *(unsigned __int8 *)(a5 + 100)) | v19;
    v21 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    *v21 = 2;
    v21[1] = v20;
    result = sub_1C4C2A160((uint64_t)a1, a3, v12, a5 + 28);
    if ((_DWORD)result == 3)
    {
      if (*(_DWORD *)(a5 + 64))
      {
        return sub_1C4C2A160((uint64_t)a1, a3, v13, a5 + 56);
      }
      else
      {
        *(_OWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13) = xmmword_1C64169D0;
        return 3;
      }
    }
  }
  return result;
}

void sub_1C6171FBC(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  sub_1C4C2EBF8((uint64_t)a1, a3, v9, a5, *(_BYTE *)(a5 + 84));
  if (v13 == 3)
  {
    v14 = *(unsigned __int8 *)(a5 + 120);
    v15 = 32 * *(unsigned __int8 *)(a5 + 16);
    v16 = *(_QWORD *)(a3 + 16);
    v17 = (_QWORD *)(v16 + 16 * v10);
    if (*(_BYTE *)v17 == 2)
    {
      v17 = (_QWORD *)(v16 + 16 * v10);
      v15 |= v17[1];
    }
    else
    {
      *v17 = 2;
    }
    v17[1] = v15;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v14 != 0, (unsigned __int8 *)(a5 + 72), (unsigned int *)(a5 + 88));
    v18 = 96;
    if (!*(_BYTE *)(a5 + 84))
      v18 = 32;
    v19 = v18 | *(unsigned int *)(a5 + 80);
    v20 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    *v20 = 2;
    v20[1] = v19;
    sub_1C4C27C38((uint64_t)a1, a3, v12, a5 + 36, 1);
  }
}

void sub_1C6172114(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;

  if (a4 == 204)
  {
    v5 = a5;
LABEL_5:
    sub_1C617213C(a1, a2, a3, v5);
    return;
  }
  if (a4 == 203)
  {
    v5 = a5;
    goto LABEL_5;
  }
}

void sub_1C617213C(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4)
{
  int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;

  v7 = a2;
  v8 = sub_1C4C2FD5C(a2);
  v9 = sub_1C4C2FD5C(v7);
  v10 = sub_1C4C2FD5C(v7);
  v11 = sub_1C4C2FD5C(v7);
  v12 = sub_1C4C2FD5C(v7);
  v13 = sub_1C4C2FD5C(v7);
  v53 = sub_1C4C2FD5C(v7);
  v52 = sub_1C4C2FD5C(v7);
  v51 = sub_1C4C2FD5C(v7);
  v50 = sub_1C4C2FD5C(v7);
  v49 = sub_1C4C2FD5C(v7);
  v48 = sub_1C4C2FD5C(v7);
  v47 = sub_1C4C2FD5C(v7);
  v46 = sub_1C4C2FD5C(v7);
  v45 = sub_1C4C2FD5C(v7);
  v14 = sub_1C4C2FD5C(v7);
  sub_1C4C2BD80((uint64_t)a1, a3, v8, a4);
  if (v15 == 3)
  {
    v16 = *(unsigned __int8 *)(a4 + 168);
    v17 = 32 * *(unsigned __int8 *)(a4 + 16);
    v18 = *(_QWORD *)(a3 + 16);
    v19 = (_QWORD *)(v18 + 16 * v9);
    if (*(_BYTE *)v19 == 2)
    {
      v19 = (_QWORD *)(v18 + 16 * v9);
      v17 |= v19[1];
    }
    else
    {
      *v19 = 2;
    }
    v19[1] = v17;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v9, v16 != 0, (unsigned __int8 *)(a4 + 128), (unsigned int *)(a4 + 136));
    v20 = (*(_DWORD *)(a4 + 172) - 1);
    if (v20 < 7)
      v21 = v20 + 1;
    else
      v21 = 0;
    v22 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v10);
    *v22 = 2;
    v22[1] = v21;
    v23 = (*(_DWORD *)(a4 + 176) - 1);
    if (v23 < 7)
      v24 = v23 + 1;
    else
      v24 = 0;
    v25 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    *v25 = 2;
    v25[1] = v24;
    v26 = (*(_DWORD *)(a4 + 180) - 1);
    if (v26 < 7)
      v27 = v26 + 1;
    else
      v27 = 0;
    v28 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
    *v28 = 2;
    v28[1] = v27;
    if (sub_1C4C2A160((uint64_t)a1, a3, v13, a4 + 36) == 3
      && sub_1C4C2A160((uint64_t)a1, a3, v53, a4 + 64) == 3
      && sub_1C4C2A160((uint64_t)a1, a3, v52, a4 + 92) == 3)
    {
      v29 = *(unsigned int *)(a4 + 184);
      v30 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v51);
      *v30 = 2;
      v30[1] = v29;
      v31 = *(unsigned int *)(a4 + 188);
      v32 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v50);
      *v32 = 2;
      v32[1] = v31;
      v33 = *(unsigned int *)(a4 + 192);
      v34 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v49);
      *v34 = 2;
      v34[1] = v33;
      v35 = *(unsigned int *)(a4 + 196);
      v36 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v48);
      *v36 = 2;
      v36[1] = v35;
      v37 = *(unsigned int *)(a4 + 200);
      v38 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v47);
      *v38 = 2;
      v38[1] = v37;
      v39 = *(unsigned int *)(a4 + 204);
      v40 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v46);
      *v40 = 2;
      v40[1] = v39;
      v41 = *(unsigned int *)(a4 + 208);
      v42 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v45);
      *v42 = 2;
      v42[1] = v41;
      v43 = *(unsigned int *)(a4 + 212);
      v44 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v14);
      *v44 = 2;
      v44[1] = v43;
    }
  }
}

uint64_t sub_1C6172484(unsigned int *a1, unsigned __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t result;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;

  v8 = a2;
  v9 = sub_1C4C2FD5C(a2);
  v10 = sub_1C4C2FD5C(v8);
  v11 = sub_1C4C2FD5C(v8);
  v12 = sub_1C4C2FD5C(v8);
  v13 = sub_1C4C2FD5C(v8);
  v14 = sub_1C4C2FD5C(v8);
  v54 = sub_1C4C2FD5C(v8);
  v53 = sub_1C4C2FD5C(v8);
  v52 = sub_1C4C2FD5C(v8);
  v51 = sub_1C4C2FD5C(v8);
  v50 = sub_1C4C2FD5C(v8);
  v49 = sub_1C4C2FD5C(v8);
  v48 = sub_1C4C2FD5C(v8);
  v47 = sub_1C4C2FD5C(v8);
  v46 = sub_1C4C2FD5C(v8);
  v15 = sub_1C4C2FD5C(v8);
  result = sub_1C4C27248((uint64_t)a1, a3, v9, a5, 1);
  if ((_DWORD)result == 3)
  {
    v17 = *(unsigned __int8 *)(a5 + 160);
    v18 = 32 * *(unsigned __int8 *)(a5 + 16);
    v19 = *(_QWORD *)(a3 + 16);
    v20 = (_QWORD *)(v19 + 16 * v10);
    if (*(_BYTE *)v20 == 2)
    {
      v20 = (_QWORD *)(v19 + 16 * v10);
      v18 |= v20[1];
    }
    else
    {
      *v20 = 2;
    }
    v20[1] = v18;
    sub_1C4C27178(*a1, *(_QWORD *)(a3 + 16), v10, v17 != 0, (unsigned __int8 *)(a5 + 120), (unsigned int *)(a5 + 128));
    v21 = (*(_DWORD *)(a5 + 164) - 1);
    if (v21 < 7)
      v22 = v21 + 1;
    else
      v22 = 0;
    v23 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v11);
    *v23 = 2;
    v23[1] = v22;
    v24 = (*(_DWORD *)(a5 + 168) - 1);
    if (v24 < 7)
      v25 = v24 + 1;
    else
      v25 = 0;
    v26 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v12);
    *v26 = 2;
    v26[1] = v25;
    v27 = (*(_DWORD *)(a5 + 172) - 1);
    if (v27 < 7)
      v28 = v27 + 1;
    else
      v28 = 0;
    v29 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v13);
    *v29 = 2;
    v29[1] = v28;
    result = sub_1C4C2A160((uint64_t)a1, a3, v14, a5 + 28);
    if ((_DWORD)result == 3)
    {
      result = sub_1C4C2A160((uint64_t)a1, a3, v54, a5 + 56);
      if ((_DWORD)result == 3)
      {
        result = sub_1C4C2A160((uint64_t)a1, a3, v53, a5 + 84);
        if ((_DWORD)result == 3)
        {
          v30 = *(unsigned int *)(a5 + 176);
          v31 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v52);
          *v31 = 2;
          v31[1] = v30;
          v32 = *(unsigned int *)(a5 + 180);
          v33 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v51);
          *v33 = 2;
          v33[1] = v32;
          v34 = *(unsigned int *)(a5 + 184);
          v35 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v50);
          *v35 = 2;
          v35[1] = v34;
          v36 = *(unsigned int *)(a5 + 188);
          v37 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v49);
          *v37 = 2;
          v37[1] = v36;
          v38 = *(unsigned int *)(a5 + 192);
          v39 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v48);
          *v39 = 2;
          v39[1] = v38;
          v40 = *(unsigned int *)(a5 + 196);
          v41 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v47);
          *v41 = 2;
          v41[1] = v40;
          v42 = *(unsigned int *)(a5 + 200);
          v43 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v46);
          *v43 = 2;
          v43[1] = v42;
          v44 = *(unsigned int *)(a5 + 204);
          v45 = (_QWORD *)(*(_QWORD *)(a3 + 16) + 16 * v15);
          *v45 = 2;
          v45[1] = v44;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C61727D0(unsigned int *a1, unsigned __int16 a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;

  if (a4 == 208)
  {
    v5 = a5;
    return sub_1C4C2ED08(a1, a2, a3, v5);
  }
  if (a4 == 207)
  {
    v5 = a5;
    return sub_1C4C2ED08(a1, a2, a3, v5);
  }
  return 0;
}

uint64_t sub_1C61727F8(int a1)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C617281C + 4 * byte_1C6A64570[a1]))(14);
}

uint64_t sub_1C617281C()
{
  return 17;
}

uint64_t sub_1C6172824()
{
  return 520;
}

uint64_t sub_1C617282C()
{
  return 519;
}

uint64_t sub_1C6172834()
{
  return 41;
}

uint64_t sub_1C617283C()
{
  return 44;
}

uint64_t sub_1C6172844()
{
  return 43;
}

uint64_t sub_1C617284C()
{
  return 37;
}

uint64_t sub_1C6172854()
{
  return 24;
}

uint64_t sub_1C617285C()
{
  return 25;
}

uint64_t sub_1C6172864()
{
  return 26;
}

uint64_t sub_1C617286C()
{
  return 18;
}

uint64_t sub_1C6172874()
{
  return 23;
}

uint64_t sub_1C617287C()
{
  return 6;
}

uint64_t sub_1C6172884()
{
  return 34;
}

uint64_t sub_1C617288C()
{
  return 42;
}

uint64_t sub_1C6172894()
{
  return 53;
}

uint64_t sub_1C617289C()
{
  return 55;
}

uint64_t sub_1C61728A4()
{
  return 57;
}

uint64_t sub_1C61728AC()
{
  return 49;
}

uint64_t sub_1C61728B4()
{
  return 50;
}

uint64_t sub_1C61728BC()
{
  return 51;
}

uint64_t sub_1C61728C4()
{
  return 59;
}

uint64_t sub_1C61728CC()
{
  return 60;
}

uint64_t sub_1C61728D4()
{
  return 61;
}

uint64_t sub_1C61728DC()
{
  return 52;
}

uint64_t sub_1C61728E4()
{
  return 54;
}

uint64_t sub_1C61728EC()
{
  return 56;
}

uint64_t sub_1C61728F4()
{
  return 21;
}

uint64_t sub_1C61728FC()
{
  return 22;
}

uint64_t sub_1C6172904()
{
  return 19;
}

uint64_t sub_1C617290C()
{
  return 20;
}

uint64_t sub_1C6172914()
{
  return 35;
}

uint64_t sub_1C617291C()
{
  return 36;
}

uint64_t sub_1C6172924()
{
  return 63;
}

uint64_t sub_1C617292C()
{
  return 64;
}

uint64_t sub_1C6172934()
{
  return 8;
}

uint64_t sub_1C617293C()
{
  return 45;
}

uint64_t sub_1C6172944()
{
  return 7;
}

uint64_t sub_1C617294C()
{
  return 62;
}

uint64_t sub_1C6172954()
{
  return 5;
}

uint64_t sub_1C617295C()
{
  return 31;
}

uint64_t sub_1C6172964()
{
  return 11;
}

uint64_t sub_1C617296C()
{
  return 12;
}

uint64_t sub_1C6172974()
{
  return 39;
}

uint64_t sub_1C617297C()
{
  return 16;
}

uint64_t sub_1C6172984()
{
  return 32;
}

uint64_t sub_1C617298C()
{
  return 46;
}

uint64_t sub_1C6172994()
{
  return 47;
}

uint64_t sub_1C617299C()
{
  return 48;
}

uint64_t sub_1C61729A4()
{
  return 68;
}

uint64_t sub_1C61729AC()
{
  return 10;
}

uint64_t sub_1C61729B4()
{
  return 9;
}

uint64_t sub_1C61729BC()
{
  return 67;
}

uint64_t sub_1C61729C4()
{
  return 66;
}

uint64_t sub_1C61729CC()
{
  return 65;
}

uint64_t sub_1C61729D4()
{
  return 58;
}

uint64_t sub_1C61729DC()
{
  return 38;
}

uint64_t sub_1C61729E4()
{
  return 69;
}

uint64_t sub_1C61729EC()
{
  return 15;
}

uint64_t sub_1C61729F4()
{
  return 13;
}

uint64_t sub_1C61729FC()
{
  return 30;
}

uint64_t sub_1C6172A04()
{
  return 29;
}

uint64_t sub_1C6172A0C()
{
  return 28;
}

uint64_t sub_1C6172A14()
{
  return 27;
}

uint64_t sub_1C6172A1C()
{
  return 33;
}

uint64_t sub_1C6172A24()
{
  return 40;
}

void sub_1C6172A2C()
{
  llvm::report_fatal_error((llvm *)"ZERO is not mapped.", (const char *)1);
}

uint64_t sub_1C6172A44(uint64_t *a1)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t result;
  unsigned int v12;
  std::string v13;
  std::string *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  _BYTE v18[40];

  v1 = *a1;
  v2 = *((_DWORD *)a1 + 2);
  v3 = *a1 + 96 * v2;
  if (v2 >= 2)
  {
    v4 = v1 + 96;
    v5 = 96 * v2 - 96;
    do
    {
      if (*(_DWORD *)(v1 + 4) < *(_DWORD *)(v4 + 4))
        v1 = v4;
      v4 += 96;
      v5 -= 96;
    }
    while (v5);
  }
  if (v1 == v3 || (v6 = *(_DWORD *)(v1 + 4), v7 = __CFADD__(v6, 1), v8 = (v6 + 1), v7))
  {
    v12 = 0;
LABEL_16:
    v16 = "Unhandled NumWords interleave: ";
    v17 = 259;
    std::to_string(&v13, v12);
    v15 = 260;
    v14 = &v13;
    sub_1C6131AAC((uint64_t *)&v16, (uint64_t *)&v14, (uint64_t)v18);
    llvm::report_fatal_error((uint64_t)v18, 1);
  }
  v9 = (v8 - 1) | ((unint64_t)(v8 - 1) >> 1) | (((v8 - 1) | ((unint64_t)(v8 - 1) >> 1)) >> 2);
  v10 = v9 | (v9 >> 4) | ((v9 | (v9 >> 4)) >> 8);
  result = v10 | (v10 >> 16);
  v12 = result + 1;
  switch((int)result)
  {
    case 0:
      return result;
    case 1:
      return 1;
    case 2:
    case 4:
    case 5:
    case 6:
      goto LABEL_16;
    case 3:
      return 2;
    case 7:
      return 3;
    default:
      if ((_DWORD)result != 15)
        goto LABEL_16;
      return 4;
  }
}

uint64_t sub_1C6172B70(__n128 a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  char *v5[195];

  v5[194] = *(char **)MEMORY[0x1E0C80C00];
  sub_1C61738D8(0, v5, a1, a3);
  v3 = sub_1C6172A44((uint64_t *)v5);
  sub_1C4C930EC(v5);
  return v3;
}

uint64_t sub_1C6172BE0(__n128 a1)
{
  uint64_t v1;
  char *v3[195];

  v3[194] = *(char **)MEMORY[0x1E0C80C00];
  sub_1C6173890(v3, a1);
  v1 = sub_1C6172A44((uint64_t *)v3);
  sub_1C4C930EC(v3);
  return v1;
}

void sub_1C6172C4C(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  _BOOL4 v8;
  int v9;
  char v10;
  __n128 v11;
  uint64_t v12;
  int v13;
  char v14;

  v8 = *(_DWORD *)(a1 + 148) == 2;
  v12 = sub_1C4C919CC(*(_QWORD *)(a1 + 140), *(_QWORD *)(a1 + 272), *(_DWORD *)(a1 + 280), *(_DWORD *)(a1 + 288), a2);
  v13 = v9;
  v14 = v10;
  sub_1C4C91BF4(v8, *(_QWORD *)(a1 + 140), *(_QWORD *)(a1 + 272), *(_DWORD *)(a1 + 280), *(_DWORD *)(a1 + 288), &v12, a2, a3, a4, v11);
}

uint64_t sub_1C6172CE8(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  char *v4[195];

  v4[194] = *(char **)MEMORY[0x1E0C80C00];
  sub_1C6172C4C(a1, a2, 61, v4);
  v2 = sub_1C6172A44((uint64_t *)v4);
  sub_1C4C930EC(v4);
  return v2;
}

void sub_1C6172D58(uint64_t a1@<X0>, unsigned int a2@<W1>, int a3@<W2>, uint64_t *a4@<X8>, __n128 a5@<Q0>)
{
  sub_1C4C92144(*(_QWORD *)(a1 + 140), *(unsigned int *)(a1 + 148), *(unsigned int *)(a1 + 136), *(_DWORD *)(a1 + 248), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 92), a2, a3, a4, a5);
}

uint64_t sub_1C6172D80(uint64_t a1, unsigned int a2, __n128 a3)
{
  uint64_t v3;
  char *v5[195];

  v5[194] = *(char **)MEMORY[0x1E0C80C00];
  sub_1C4C92144(*(_QWORD *)(a1 + 140), *(unsigned int *)(a1 + 148), *(unsigned int *)(a1 + 136), *(_DWORD *)(a1 + 248), *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 92), a2, 61, (uint64_t *)v5, a3);
  v3 = sub_1C6172A44((uint64_t *)v5);
  sub_1C4C930EC(v5);
  return v3;
}

uint64_t sub_1C6172E10(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  uint64_t v3;
  char *v5[195];

  v5[194] = *(char **)MEMORY[0x1E0C80C00];
  if (a2 == 5)
    v2 = 4;
  else
    v2 = a2;
  sub_1C4C9CF00(*(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(_DWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 68), v5, v2);
  v3 = sub_1C6172A44((uint64_t *)v5);
  sub_1C4C930EC(v5);
  return v3;
}

uint64_t sub_1C6172E9C(uint64_t a1, int a2)
{
  uint64_t v2;
  char *v4[195];

  v4[194] = *(char **)MEMORY[0x1E0C80C00];
  sub_1C61738E8(0, a2);
  v2 = sub_1C6172A44((uint64_t *)v4);
  sub_1C4C930EC(v4);
  return v2;
}

uint64_t sub_1C6172F0C(uint64_t a1, int a2)
{
  uint64_t v2;
  char *v4[195];

  v4[194] = *(char **)MEMORY[0x1E0C80C00];
  sub_1C61738E8(1, a2);
  v2 = sub_1C6172A44((uint64_t *)v4);
  sub_1C4C930EC(v4);
  return v2;
}

double sub_1C6172F7C(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 96 * v5;
    do
    {
      v7 = *(char **)&v4[v6 - 72];
      if (&v4[v6 - 56] != v7)
        free(v7);
      v6 -= 96;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t sub_1C6173008(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_10;
      result = 153;
      break;
    case 1:
    case 2:
      if (a2)
        goto LABEL_10;
      result = 154;
      break;
    case 3:
      if (a2)
        goto LABEL_10;
      result = 155;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_10;
      result = 156;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specLM", (const char *)1);
  }
  return result;
}

uint64_t sub_1C6173074(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_10;
      result = 157;
      break;
    case 1:
    case 2:
      if (a2)
        goto LABEL_10;
      result = 158;
      break;
    case 3:
      if (a2)
        goto LABEL_10;
      result = 159;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_10;
      result = 160;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specLM", (const char *)1);
  }
  return result;
}

uint64_t sub_1C61730E0(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_8;
      result = 161;
      break;
    case 1:
    case 2:
    case 3:
      if (a2)
        goto LABEL_8;
      result = 162;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_8;
      result = 163;
      break;
    default:
LABEL_8:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specLM", (const char *)1);
  }
  return result;
}

uint64_t sub_1C6173140(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_10;
      result = 164;
      break;
    case 1:
    case 2:
      if (a2)
        goto LABEL_10;
      result = 165;
      break;
    case 3:
      if (a2)
        goto LABEL_10;
      result = 166;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_10;
      result = 167;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specLM", (const char *)1);
  }
  return result;
}

uint64_t sub_1C61731AC(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_10;
      result = 168;
      break;
    case 1:
    case 2:
      if (a2)
        goto LABEL_10;
      result = 169;
      break;
    case 3:
      if (a2)
        goto LABEL_10;
      result = 170;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_10;
      result = 171;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specLM", (const char *)1);
  }
  return result;
}

uint64_t sub_1C6173218(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_10;
      result = 172;
      break;
    case 1:
    case 2:
      if (a2)
        goto LABEL_10;
      result = 173;
      break;
    case 3:
      if (a2)
        goto LABEL_10;
      result = 174;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_10;
      result = 175;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specLM", (const char *)1);
  }
  return result;
}

uint64_t sub_1C6173284(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_10;
      result = 176;
      break;
    case 1:
    case 2:
      if (a2)
        goto LABEL_10;
      result = 177;
      break;
    case 3:
      if (a2)
        goto LABEL_10;
      result = 178;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_10;
      result = 179;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specLM", (const char *)1);
  }
  return result;
}

uint64_t sub_1C61732F0(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_8;
      result = 180;
      break;
    case 1:
    case 2:
    case 3:
      if (a2)
        goto LABEL_8;
      result = 181;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_8;
      result = 182;
      break;
    default:
LABEL_8:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specTPR", (const char *)1);
  }
  return result;
}

uint64_t sub_1C6173350(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_8;
      result = 183;
      break;
    case 1:
    case 2:
    case 3:
      if (a2)
        goto LABEL_8;
      result = 184;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_8;
      result = 185;
      break;
    default:
LABEL_8:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specTPR", (const char *)1);
  }
  return result;
}

uint64_t sub_1C61733B0(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_10;
      result = 186;
      break;
    case 1:
    case 2:
      if (a2)
        goto LABEL_10;
      result = 187;
      break;
    case 3:
      if (a2)
        goto LABEL_10;
      result = 188;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_10;
      result = 189;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specTPR", (const char *)1);
  }
  return result;
}

uint64_t sub_1C617341C(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_10;
      result = 190;
      break;
    case 1:
    case 2:
      if (a2)
        goto LABEL_10;
      result = 191;
      break;
    case 3:
      if (a2)
        goto LABEL_10;
      result = 192;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_10;
      result = 193;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specTPR", (const char *)1);
  }
  return result;
}

uint64_t sub_1C6173488(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_10;
      result = 194;
      break;
    case 1:
    case 2:
      if (a2)
        goto LABEL_10;
      result = 195;
      break;
    case 3:
      if (a2)
        goto LABEL_10;
      result = 196;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_10;
      result = 197;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for specTPR", (const char *)1);
  }
  return result;
}

uint64_t sub_1C61734F4(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_10;
      result = 198;
      break;
    case 1:
    case 2:
      if (a2)
        goto LABEL_10;
      result = 199;
      break;
    case 3:
      if (a2)
        goto LABEL_10;
      result = 200;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_10;
      result = 201;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for ldshdr", (const char *)1);
  }
  return result;
}

uint64_t sub_1C6173560(int a1)
{
  return ((uint64_t (*)(void))((char *)sub_1C617357C + 4 * byte_1C831DA7A[a1 - 198]))();
}

void sub_1C617357C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64x2_t v3;
  int32x4_t v4;
  int16x8_t v5;

  *(_BYTE *)(a2 + 2) |= (_BYTE)a3 << 6;
  v3 = (uint64x2_t)vdupq_n_s64(a3 << 6);
  v4 = (int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1C831DAD0);
  v5 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v3, (uint64x2_t)xmmword_1C831DAE0), v4);
  v4.i32[0] = *(_DWORD *)(a2 + 3);
  *(int8x8_t *)v5.i8 = vorr_s8((int8x8_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v4.i8), (int8x8_t)vmovn_s32((int32x4_t)v5));
  *(_DWORD *)(a2 + 3) = vmovn_s16(v5).u32[0];
  *(_BYTE *)(a2 + 7) |= a3 >> 34;
  *(_BYTE *)(a2 + 8) |= (a3 >> 42) & 0x3F;
}

uint64_t sub_1C6173704(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_10;
      result = 202;
      break;
    case 1:
    case 2:
      if (a2)
        goto LABEL_10;
      result = 203;
      break;
    case 3:
      if (a2)
        goto LABEL_10;
      result = 204;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_10;
      result = 205;
      break;
    default:
LABEL_10:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for ldshdr", (const char *)1);
  }
  return result;
}

uint64_t sub_1C6173770(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_8;
      result = 206;
      break;
    case 1:
    case 2:
    case 3:
      if (a2)
        goto LABEL_8;
      result = 207;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_8;
      result = 208;
      break;
    default:
LABEL_8:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for setProfileCtl", (const char *)1);
  }
  return result;
}

uint64_t sub_1C61737D0(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_8;
      result = 209;
      break;
    case 1:
    case 2:
    case 3:
      if (a2)
        goto LABEL_8;
      result = 210;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_8;
      result = 211;
      break;
    default:
LABEL_8:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for setProfileCtl", (const char *)1);
  }
  return result;
}

uint64_t sub_1C6173830(int a1, int a2)
{
  uint64_t result;

  switch(a1)
  {
    case 0:
      if (a2)
        goto LABEL_8;
      result = 212;
      break;
    case 1:
    case 2:
    case 3:
      if (a2)
        goto LABEL_8;
      result = 213;
      break;
    case 4:
    case 5:
      if (a2)
        goto LABEL_8;
      result = 214;
      break;
    default:
LABEL_8:
      llvm::report_fatal_error((llvm *)"Failed to find a valid fixup for setProfileCtl", (const char *)1);
  }
  return result;
}

uint64_t sub_1C6173890@<X0>(_QWORD *a1@<X8>, __n128 a2@<Q0>)
{
  unsigned __int8 *v3[2];

  *a1 = a1 + 2;
  a2.n128_u64[0] = 0x1000000000;
  a1[1] = 0x1000000000;
  v3[0] = (unsigned __int8 *)&unk_1C849993C;
  v3[1] = (unsigned __int8 *)&unk_1C8499942;
  return sub_1C4C99D3C(v3, (uint64_t)a1, a2);
}

double sub_1C61738D8@<D0>(unsigned int a1@<W0>, _QWORD *a2@<X8>, __n128 a3@<Q0>, unsigned int a4@<W1>)
{
  if (a4 > 3)
    return sub_1C4C9A164(a1, a2, a3);
  else
    return sub_1C4C99C30(a1, a2, a3);
}

uint64_t sub_1C61738E8(uint64_t a1, int a2)
{
  return ((uint64_t (*)(void))((char *)sub_1C6173908 + 4 * byte_1C8472DC6[a2]))();
}

double sub_1C6173908@<D0>(_QWORD *a1@<X8>, __n128 a2@<Q0>)
{
  unsigned int v2;

  return sub_1C4C9C7A4(a1, v2, a2);
}

double sub_1C6173914@<D0>(_QWORD *a1@<X8>, __n128 a2@<Q0>)
{
  unsigned int v2;

  return sub_1C4C9C694(a1, v2, a2);
}

double sub_1C6173920@<D0>(_QWORD *a1@<X8>, __n128 a2@<Q0>)
{
  unsigned int v2;

  return sub_1C4C9C584(a1, v2, a2);
}

void sub_1C617392C()
{
  llvm::report_fatal_error((llvm *)"Unsupported GPU for pack sequence.", (const char *)1);
}

uint64_t sub_1C6173944(uint64_t a1, int a2)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  int v11;
  uint64_t v12;

  v2 = 0;
  v3 = 0;
  switch(a2)
  {
    case 0:
      v3 = 0x2D9200000200;
      goto LABEL_227;
    case 1:
      v3 = 0xEDDB00000600;
      v2 = 177;
      goto LABEL_218;
    case 2:
      v3 = 0xEE2700000600;
      v2 = 192;
      goto LABEL_218;
    case 3:
      v3 = 0x2D5700000200;
      v2 = 33;
      goto LABEL_218;
    case 4:
      v3 = 0xEE2F00000600;
      goto LABEL_155;
    case 5:
      v3 = 0x1D6400000000;
      v2 = 246;
      goto LABEL_218;
    case 6:
      v3 = 0x1DE300000100;
      v2 = 4;
      goto LABEL_218;
    case 7:
      v3 = 0x1E6200000100;
      v2 = 18;
      goto LABEL_218;
    case 8:
      v3 = 0x1EE100000100;
      v2 = 32;
      goto LABEL_218;
    case 9:
      v3 = 0x1F6000000100;
      goto LABEL_235;
    case 10:
      v3 = 0x1FDF00000100;
      v2 = 60;
      goto LABEL_218;
    case 11:
      v3 = 0x205E00000100;
      v2 = 74;
      goto LABEL_218;
    case 12:
      v3 = 0x20DD00000100;
      v2 = 88;
      goto LABEL_218;
    case 13:
      v3 = 0x215C00000100;
      v2 = 102;
      goto LABEL_218;
    case 14:
      v3 = 0x21DB00000100;
      v2 = 116;
      goto LABEL_218;
    case 15:
      v3 = 0x2D6300000200;
      v2 = 37;
      goto LABEL_218;
    case 16:
      v3 = 0x2D5D00000200;
      v2 = 35;
      goto LABEL_218;
    case 18:
      v3 = 0x700100000400;
      goto LABEL_131;
    case 19:
      v3 = 0xEBBF00000600;
      goto LABEL_93;
    case 20:
      v3 = 0xF8DA00000800;
      goto LABEL_151;
    case 21:
      v3 = 0xF41D00000700;
      goto LABEL_65;
    case 22:
      v3 = 0x2D6900000200;
      v2 = 39;
      goto LABEL_218;
    case 23:
      v3 = 0x2D8200000200;
      v2 = 47;
      goto LABEL_218;
    case 24:
      v3 = 0x2D7C00000200;
      v2 = 45;
      goto LABEL_218;
    case 25:
      v3 = 0x2D8600000200;
      goto LABEL_229;
    case 26:
      v3 = 0x2D7600000200;
      v2 = 43;
      goto LABEL_218;
    case 27:
      v3 = 0x2D6D00000200;
      goto LABEL_30;
    case 28:
      v3 = 0x2D7000000200;
LABEL_30:
      v2 = 41;
      goto LABEL_218;
    case 29:
      v3 = 0xF7C600000800;
      goto LABEL_217;
    case 30:
      v3 = 0x2D5100000200;
      v2 = 22;
      goto LABEL_218;
    case 32:
      v3 = 0xEE3B00000600;
      goto LABEL_115;
    case 33:
      v3 = 0xF8CD00000800;
      goto LABEL_217;
    case 34:
      v2 = 0;
      v3 = 0x100000000;
      goto LABEL_218;
    case 35:
      v3 = 0x6FB700000400;
      goto LABEL_242;
    case 36:
      v3 = 0x62D600000300;
      v2 = 84;
      goto LABEL_218;
    case 37:
      v3 = 0x63BE00000300;
      goto LABEL_208;
    case 38:
      v3 = 0xF0A700000700;
      v2 = 31;
      goto LABEL_218;
    case 39:
      v3 = 0xF09700000700;
      v2 = 24;
      goto LABEL_218;
    case 40:
      v3 = 0x640A00000300;
      goto LABEL_183;
    case 41:
      v3 = 0x645600000300;
      v2 = 119;
      goto LABEL_218;
    case 42:
      v3 = 0x632200000300;
      v2 = 92;
      goto LABEL_218;
    case 43:
      v3 = 0x32A200000200;
      v2 = 79;
      goto LABEL_218;
    case 44:
      v3 = 0x557A00000200;
      v2 = 249;
      goto LABEL_218;
    case 45:
      v3 = 0x561600000300;
      v2 = 6;
      goto LABEL_218;
    case 47:
      v3 = 0x53A600000200;
      goto LABEL_137;
    case 50:
      v3 = 0x4B9A00000200;
      v2 = 121;
      goto LABEL_218;
    case 51:
      v3 = 0xF20700000700;
      goto LABEL_181;
    case 52:
      v3 = 0xF15700000700;
      v2 = 38;
      goto LABEL_218;
    case 53:
      v3 = 0xCC1000000600;
      goto LABEL_135;
    case 54:
      v3 = 0x530A00000200;
      goto LABEL_176;
    case 55:
      v3 = 0x5D8E00000300;
      goto LABEL_131;
    case 56:
      v3 = 0x628A00000300;
      v2 = 60;
      goto LABEL_218;
    case 57:
      v3 = 0x379E00000200;
      goto LABEL_208;
    case 58:
      v3 = 0x51D200000200;
      v2 = 163;
      goto LABEL_218;
    case 59:
      v3 = 0x4CD600000200;
      v2 = 148;
      goto LABEL_218;
    case 60:
      v3 = 0x589200000300;
      v2 = 19;
      goto LABEL_218;
    case 61:
      v3 = 0x526E00000200;
      v2 = 184;
      goto LABEL_218;
    case 62:
      v3 = 0x54DE00000200;
      goto LABEL_201;
    case 63:
      v3 = 0x544200000200;
      v2 = 223;
      goto LABEL_218;
    case 64:
      v3 = 0xF93400000800;
      goto LABEL_199;
    case 65:
      v3 = 0x2DF000000200;
      v2 = 55;
      goto LABEL_218;
    case 66:
      v3 = 0xED3300000600;
LABEL_65:
      v2 = 150;
      goto LABEL_218;
    case 67:
      v3 = 0xC95B00000600;
      goto LABEL_188;
    case 68:
      v3 = 0x812600000400;
      goto LABEL_135;
    case 69:
      v3 = 0x8F5700000400;
      goto LABEL_77;
    case 70:
      v3 = 0x941200000400;
      v2 = 171;
      goto LABEL_218;
    case 71:
      v3 = 0x85E100000400;
      v2 = 96;
      goto LABEL_218;
    case 72:
      v3 = 0x8A9C00000400;
      v2 = 121;
      goto LABEL_218;
    case 73:
      v3 = 0x962A00000400;
      v2 = 196;
      goto LABEL_218;
    case 74:
      v3 = 0x984200000400;
      v2 = 216;
      goto LABEL_218;
    case 75:
      v3 = 0x6FDC00000400;
      goto LABEL_244;
    case 76:
      v3 = 0x18200000000;
      v2 = 2;
      goto LABEL_218;
    case 77:
      v3 = 0xF95800000800;
LABEL_77:
      v2 = 146;
      goto LABEL_218;
    case 78:
      v3 = 0x2FF00000000;
      v2 = 21;
      goto LABEL_218;
    case 79:
      v3 = 0x3F500000000;
      v2 = 40;
      goto LABEL_218;
    case 80:
      v3 = 0x2E4600000200;
      v2 = 67;
      goto LABEL_218;
    case 81:
      v3 = 0xBEC00000000;
      v2 = 112;
      goto LABEL_218;
    case 82:
      v3 = 0xFF300000000;
      v2 = 135;
      goto LABEL_218;
    case 83:
      v3 = 0x126500000000;
      v2 = 158;
      goto LABEL_218;
    case 84:
      v3 = 0x645C00000300;
      v2 = 128;
      goto LABEL_218;
    case 85:
      v3 = 0xECF300000600;
      goto LABEL_191;
    case 86:
      v3 = 0x166C00000000;
      v2 = 179;
      goto LABEL_218;
    case 87:
      v3 = 0x1A7300000000;
      goto LABEL_155;
    case 88:
      v3 = 0x1CE500000000;
      v2 = 225;
      goto LABEL_218;
    case 89:
      v2 = 0;
      v3 = 0x500000000;
      goto LABEL_218;
    case 90:
      v3 = 0xED7600000600;
      v2 = 164;
      goto LABEL_218;
    case 91:
      v3 = 0xF7C200000800;
      goto LABEL_217;
    case 92:
      v3 = 0xF7BE00000800;
LABEL_93:
      v2 = 106;
      goto LABEL_218;
    case 93:
      v3 = 0xA91A00000400;
      goto LABEL_201;
    case 94:
      v3 = 0x57200000000;
      v2 = 57;
      goto LABEL_218;
    case 95:
      v3 = 0xB74B00000500;
      v2 = 64;
      goto LABEL_218;
    case 96:
      v3 = 0xBC0600000500;
      v2 = 89;
      goto LABEL_218;
    case 97:
      v3 = 0xADD500000500;
      v2 = 14;
      goto LABEL_218;
    case 98:
      v3 = 0xB29000000500;
      v2 = 39;
      goto LABEL_218;
    case 99:
      v3 = 0xBE1E00000500;
      v2 = 114;
      goto LABEL_218;
    case 100:
      v3 = 0xC03600000500;
      goto LABEL_151;
    case 101:
      v3 = 0x6EF00000000;
      v2 = 76;
      goto LABEL_218;
    case 102:
      v3 = 0x7E500000000;
      v2 = 95;
      goto LABEL_218;
    case 103:
      v3 = 0xCC1600000600;
      v2 = 74;
      goto LABEL_218;
    case 104:
      v3 = 0xCC1C00000600;
      v2 = 76;
      goto LABEL_218;
    case 105:
      v3 = 0x235600000100;
      goto LABEL_191;
    case 106:
      v3 = 0x21E200000100;
      goto LABEL_193;
    case 107:
      v3 = 0x2B3600000100;
      v2 = 224;
      goto LABEL_218;
    case 108:
      v3 = 0xF8DE00000800;
      goto LABEL_199;
    case 109:
      v3 = 0x269600000100;
      v2 = 172;
      goto LABEL_218;
    case 110:
      v3 = 0x28E600000100;
      v2 = 200;
      goto LABEL_218;
    case 111:
      v3 = 0x66D400000300;
      v2 = 142;
      goto LABEL_218;
    case 112:
      v3 = 0x659800000300;
      goto LABEL_193;
    case 113:
      v3 = 0xEE3300000600;
LABEL_115:
      v2 = 204;
      goto LABEL_218;
    case 114:
      v2 = 0;
      v3 = 0x200000000;
      goto LABEL_218;
    case 115:
      goto LABEL_218;
    case 116:
      v3 = 0xC97500000600;
      v2 = 30;
      goto LABEL_218;
    case 117:
      v3 = 0xEC5700000600;
      goto LABEL_233;
    case 118:
      v3 = 0xEC0B00000600;
      v2 = 124;
      goto LABEL_218;
    case 119:
      v3 = 0xCB8900000600;
      goto LABEL_131;
    case 120:
      v3 = 0xFAEE00000800;
      v2 = 188;
      goto LABEL_218;
    case 121:
      v3 = 0x66F800000300;
      goto LABEL_171;
    case 122:
      v3 = 0xEE2C00000600;
      goto LABEL_155;
    case 123:
      v3 = 0xEE2B00000600;
      goto LABEL_155;
    case 124:
      v3 = 0xF44100000700;
      v2 = 162;
      goto LABEL_218;
    case 125:
      v3 = 0xF46500000700;
      v2 = 170;
      goto LABEL_218;
    case 126:
      v3 = 0xF48900000700;
      v2 = 178;
      goto LABEL_218;
    case 127:
      v3 = 0xF66300000800;
      v2 = 34;
      goto LABEL_218;
    case 128:
      v3 = 0xF68D00000800;
      v2 = 44;
      goto LABEL_218;
    case 129:
      v3 = 0xF68700000800;
LABEL_131:
      v2 = 36;
      goto LABEL_218;
    case 130:
      v3 = 0xF6B100000800;
      goto LABEL_235;
    case 131:
      v3 = 0xF6D500000800;
      goto LABEL_181;
    case 132:
      v3 = 0xF6F900000800;
LABEL_135:
      v2 = 62;
      goto LABEL_218;
    case 133:
      v3 = 0xF51900000700;
LABEL_137:
      v2 = 210;
      goto LABEL_218;
    case 134:
      v3 = 0xF53D00000700;
      v2 = 218;
      goto LABEL_218;
    case 135:
      v3 = 0xF58500000700;
      v2 = 234;
      goto LABEL_218;
    case 136:
      v3 = 0xF56100000700;
      v2 = 226;
      goto LABEL_218;
    case 137:
      v3 = 0xF5A900000700;
      v2 = 242;
      goto LABEL_218;
    case 138:
      v3 = 0xF27700000700;
      goto LABEL_159;
    case 139:
      v3 = 0xEF3900000600;
      v2 = 222;
      goto LABEL_218;
    case 140:
      v3 = 0xEEBA00000600;
      goto LABEL_237;
    case 141:
      v3 = 0xF23F00000700;
      goto LABEL_157;
    case 142:
      v3 = 0xF2E700000700;
      goto LABEL_208;
    case 143:
      v3 = 0xF2AF00000700;
      goto LABEL_163;
    case 144:
      v3 = 0x702600000400;
      v2 = 45;
      goto LABEL_218;
    case 145:
      v3 = 0xF7C300000800;
      goto LABEL_217;
    case 146:
      v3 = 0x21F200000100;
LABEL_151:
      v2 = 134;
      goto LABEL_218;
    case 147:
      v3 = 0xF4AD00000700;
      v2 = 186;
      goto LABEL_218;
    case 148:
      v3 = 0xF4D100000700;
      v2 = 194;
      goto LABEL_218;
    case 149:
      v3 = 0xF4F500000700;
LABEL_155:
      v2 = 202;
      goto LABEL_218;
    case 150:
      v3 = 0xF6FF00000800;
LABEL_157:
      v2 = 70;
      goto LABEL_218;
    case 151:
      v3 = 0xF72900000800;
LABEL_159:
      v2 = 80;
      goto LABEL_218;
    case 152:
      v3 = 0xF72300000800;
      v2 = 72;
      goto LABEL_218;
    case 153:
      v3 = 0xF74D00000800;
      v2 = 82;
      goto LABEL_218;
    case 154:
      v3 = 0xF77100000800;
LABEL_163:
      v2 = 90;
      goto LABEL_218;
    case 155:
      v3 = 0xF79500000800;
      v2 = 98;
      goto LABEL_218;
    case 156:
      v3 = 0xF5CD00000700;
      goto LABEL_203;
    case 157:
      v3 = 0xF5F100000800;
      v2 = 2;
      goto LABEL_218;
    case 158:
      v3 = 0xF63900000800;
      v2 = 18;
      goto LABEL_218;
    case 159:
      v3 = 0xF61500000800;
      v2 = 10;
      goto LABEL_218;
    case 160:
      v3 = 0xF65D00000800;
      v2 = 26;
      goto LABEL_218;
    case 161:
      v3 = 0xC3EA00000500;
LABEL_171:
      v2 = 154;
      goto LABEL_218;
    case 162:
      v3 = 0xC70800000500;
      v2 = 214;
      goto LABEL_218;
    case 163:
      v3 = 0xC81200000500;
      v2 = 231;
      goto LABEL_218;
    case 164:
      v3 = 0xC4F400000500;
      goto LABEL_231;
    case 165:
      v3 = 0xC5FE00000500;
LABEL_176:
      v2 = 197;
      goto LABEL_218;
    case 166:
      v3 = 0xC88600000500;
      v2 = 248;
      goto LABEL_218;
    case 167:
      v3 = 0xC8FA00000600;
      v2 = 4;
      goto LABEL_218;
    case 168:
      v3 = 0xF8E100000800;
      goto LABEL_199;
    case 170:
      v3 = 0x704E00000400;
LABEL_181:
      v2 = 54;
      goto LABEL_218;
    case 171:
      v3 = 0xF31F00000700;
LABEL_183:
      v2 = 110;
      goto LABEL_218;
    case 172:
      v3 = 0xF35700000700;
      v2 = 120;
      goto LABEL_218;
    case 173:
      v3 = 0xF03700000600;
      goto LABEL_203;
    case 174:
      v3 = 0xEFB800000600;
      goto LABEL_201;
    case 175:
      v3 = 0xF08700000700;
LABEL_188:
      v2 = 16;
      goto LABEL_218;
    case 176:
      v3 = 0xF05F00000700;
      goto LABEL_242;
    case 177:
      v3 = 0xF3C700000700;
LABEL_191:
      v2 = 140;
      goto LABEL_218;
    case 178:
      v3 = 0xF38F00000700;
LABEL_193:
      v2 = 130;
      goto LABEL_218;
    case 179:
      v3 = 0x688500000300;
      goto LABEL_247;
    case 180:
      v3 = 0x6B9F00000300;
      v2 = 198;
      goto LABEL_218;
    case 181:
      v3 = 0xEA1800000600;
      v2 = 78;
      goto LABEL_218;
    case 182:
      v3 = 0xF8DF00000800;
      goto LABEL_199;
    case 183:
      v3 = 0xF8E000000800;
LABEL_199:
      v2 = 138;
      goto LABEL_218;
    case 184:
      v3 = 0x6DAB00000300;
LABEL_201:
      v2 = 236;
      goto LABEL_218;
    case 185:
      v3 = 0x6E2A00000300;
LABEL_203:
      v2 = 250;
      goto LABEL_218;
    case 186:
      v3 = 0x6A1200000300;
      v2 = 179;
      goto LABEL_218;
    case 187:
      v3 = 0x6D2C00000300;
      v2 = 217;
      goto LABEL_218;
    case 188:
      v3 = 0xEA2E00000600;
      v2 = 103;
      goto LABEL_218;
    case 189:
      v3 = 0xEA2300000600;
LABEL_208:
      v2 = 100;
      goto LABEL_218;
    case 190:
      v3 = 0x24BA00000100;
      v2 = 156;
      goto LABEL_218;
    case 191:
      v3 = 0x2C2200000100;
      v2 = 239;
      goto LABEL_218;
    case 192:
      v3 = 0x287200000100;
      v2 = 186;
      goto LABEL_218;
    case 193:
      v3 = 0x295A00000100;
      v2 = 212;
      goto LABEL_218;
    case 194:
      v3 = 0xCB9900000600;
      v2 = 58;
      goto LABEL_218;
    case 195:
      v3 = 0xFB1600000800;
      v2 = 200;
      goto LABEL_218;
    case 196:
      v3 = 0xF7C400000800;
      goto LABEL_217;
    case 197:
      v3 = 0xF7C500000800;
LABEL_217:
      v2 = 115;
      goto LABEL_218;
    case 198:
      v3 = 0x2D9A00000200;
LABEL_227:
      v2 = 52;
      goto LABEL_218;
    case 199:
      v3 = 0x2D8E00000200;
LABEL_229:
      v2 = 49;
      goto LABEL_218;
    case 200:
      v3 = 0xFA9800000800;
LABEL_231:
      v2 = 180;
      goto LABEL_218;
    case 201:
      v3 = 0xF8D300000800;
LABEL_233:
      v2 = 132;
      goto LABEL_218;
    case 202:
      v3 = 0xFF7600000900;
LABEL_235:
      v2 = 46;
      goto LABEL_218;
    case 203:
      v3 = 0xFBA900000800;
LABEL_237:
      v2 = 208;
      goto LABEL_218;
    case 204:
      v3 = 0xFC3C00000800;
      v2 = 227;
      goto LABEL_218;
    case 205:
      v3 = 0xFD4600000800;
      v2 = 246;
      goto LABEL_218;
    case 206:
      v3 = 0x1008000000900;
      v2 = 63;
      goto LABEL_218;
    case 207:
      v3 = 0xFDD900000900;
LABEL_242:
      v2 = 8;
      goto LABEL_218;
    case 208:
      v3 = 0xFE6C00000900;
LABEL_244:
      v2 = 27;
      goto LABEL_218;
    case 210:
      v3 = 0xF9AE00000800;
      v2 = 152;
      goto LABEL_218;
    case 211:
      v3 = 0xFA0400000800;
LABEL_247:
      v2 = 160;
      goto LABEL_218;
    case 212:
      v3 = 0xFA2800000800;
      v2 = 168;
      goto LABEL_218;
    case 213:
      v3 = 0xFA4C00000800;
      v2 = 174;
      goto LABEL_218;
    case 216:
      v3 = 0x2C9600000100;
      v2 = 252;
      goto LABEL_218;
    case 217:
      v3 = 0x2D0A00000200;
      v2 = 9;
LABEL_218:
      v10 = off_1E8131E58;
      v11 = v3 | v2;
      v12 = a1;
      v7 = &v9;
      v8 = 0x100000000;
      sub_1C4D5C3A0(SHIDWORD(v3), (uint64_t)&unk_1C849AD9C, (uint64_t)&v7, (uint64_t)&v10);
      v4 = v8;
      if ((_DWORD)v8 == 1)
        v5 = LODWORD(qword_1C84DAFB0[2 * *(unsigned int *)v7 + 1]) | 0x100000000;
      else
        v5 = 0x100000000;
      if (v7 != &v9)
        free(v7);
      if (v4 != 1)
        return 0;
      return v5;
    default:
      return 0;
  }
}

llvm::APInt *sub_1C6174604(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  __int128 v5;
  llvm::APInt *result;
  const void **v7;

  v3 = sub_1C4CD9CB8(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8);
  v5 = *(_OWORD *)v3;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v3 + 16);
  *(_OWORD *)v4 = v5;
  result = (llvm::APInt *)(v4 + 24);
  v7 = (const void **)(v3 + 24);
  LODWORD(v3) = *(_DWORD *)(v3 + 32);
  *(_DWORD *)(v4 + 32) = v3;
  if (v3 > 0x40)
    result = (llvm::APInt *)llvm::APInt::initSlowCase(result, v7);
  else
    *(_QWORD *)result = *v7;
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1C6174680(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 40, &v5);
  sub_1C61746EC(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C61746EC(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;

  v2 = *(_DWORD *)(result + 8);
  if (v2)
  {
    v3 = *(__int128 **)result;
    v4 = *(_QWORD *)result + 40 * v2;
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 8);
      *(_QWORD *)(a2 + 24) = *((_QWORD *)v3 + 3);
      *((_DWORD *)v3 + 8) = 0;
      v3 = (__int128 *)((char *)v3 + 40);
      a2 += 40;
    }
    while (v3 != (__int128 *)v4);
    v6 = *(unsigned int *)(result + 8);
    if ((_DWORD)v6)
    {
      v7 = *(__int128 **)result;
      v8 = 40 * v6;
      do
      {
        if (*(_DWORD *)((char *)v7 + v8 - 8) >= 0x41u)
        {
          result = *(_QWORD *)((char *)v7 + v8 - 16);
          if (result)
            result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
        }
        v8 -= 40;
      }
      while (v8);
    }
  }
  return result;
}

char *sub_1C6174794@<X0>(char **a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  char *result;
  char *v7;
  char *v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char **v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;

  result = *a1;
  v7 = *a2;
  if (!result)
  {
LABEL_21:
    *a3 = v7;
    *a2 = 0;
    return result;
  }
  if (!v7)
  {
    *a3 = result;
LABEL_15:
    *a1 = 0;
    return result;
  }
  if ((*(unsigned int (**)(char *, void *))(*(_QWORD *)result + 48))(result, &llvm::ErrorList::ID))
  {
    v8 = *a1;
    result = *a2;
    if (*a2)
    {
      result = (char *)(*(uint64_t (**)(char *, void *))(*(_QWORD *)result + 48))(result, &llvm::ErrorList::ID);
      v9 = *a2;
      if ((_DWORD)result)
      {
        *a2 = 0;
        v10 = (uint64_t *)*((_QWORD *)v9 + 1);
        v11 = (uint64_t *)*((_QWORD *)v9 + 2);
        if (v10 == v11)
          goto LABEL_13;
        result = (char *)*((_QWORD *)v8 + 2);
        do
        {
          if ((unint64_t)result >= *((_QWORD *)v8 + 3))
          {
            result = sub_1C4D62F9C((char **)v8 + 1, v10);
          }
          else
          {
            v12 = *v10;
            *v10 = 0;
            *(_QWORD *)result = v12;
            result += 8;
          }
          *((_QWORD *)v8 + 2) = result;
          ++v10;
        }
        while (v10 != v11);
        if (v9)
LABEL_13:
          result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)v9 + 8))(v9);
LABEL_28:
        *a3 = *a1;
        goto LABEL_15;
      }
    }
    else
    {
      v9 = 0;
    }
    v22 = v9;
    *a2 = 0;
    v15 = (char **)*((_QWORD *)v8 + 2);
    if ((unint64_t)v15 >= *((_QWORD *)v8 + 3))
    {
      v16 = sub_1C4D62F9C((char **)v8 + 1, (uint64_t *)&v22);
      result = v22;
      *((_QWORD *)v8 + 2) = v16;
      v22 = 0;
      if (result)
        result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      *v15 = v9;
      *((_QWORD *)v8 + 2) = v15 + 1;
    }
    goto LABEL_28;
  }
  if (*a2 && (*(unsigned int (**)(char *, void *))(*(_QWORD *)*a2 + 48))(*a2, &llvm::ErrorList::ID))
  {
    v13 = (uint64_t **)(*a2 + 8);
    v14 = *v13;
    v22 = *a1;
    *a1 = 0;
    sub_1C4D62D3C(v13, (uint64_t)v14, (uint64_t *)&v22);
    result = v22;
    v22 = 0;
    if (result)
      result = (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
    v7 = *a2;
    goto LABEL_21;
  }
  v17 = operator new();
  v18 = (uint64_t)*a1;
  *a1 = 0;
  v20 = *a2;
  v21 = (char *)v18;
  *a2 = 0;
  *a3 = sub_1C6174B44(v17, (uint64_t *)&v21, (uint64_t *)&v20);
  v19 = (uint64_t)v20;
  v20 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  result = v21;
  v21 = 0;
  if (result)
    return (char *)(*(uint64_t (**)(char *))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C61749C4(uint64_t a1, uint64_t *a2)
{
  _BYTE *v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v4 = *(_BYTE **)(a1 + 16);
  if (v4 == *(_BYTE **)(a1 + 24))
  {
    v7 = *(_BYTE **)a1;
    v8 = *(_QWORD **)(a1 + 8);
    if ((unint64_t)v8 <= *(_QWORD *)a1)
    {
      if (v4 == v7)
        v15 = 1;
      else
        v15 = (v4 - v7) >> 2;
      if (v15 >> 61)
        sub_1C4764EE4();
      v16 = (char *)operator new(8 * v15);
      v17 = &v16[8 * (v15 >> 2)];
      v18 = &v16[8 * v15];
      v19 = v4 - (_BYTE *)v8;
      if (v4 == (_BYTE *)v8)
      {
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v17;
        *(_QWORD *)(a1 + 24) = v18;
      }
      else
      {
        v20 = v19 >> 3;
        v21 = &v17[v19 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * v20;
        v23 = 8 * (v15 >> 2);
        do
        {
          v24 = *v8;
          *v8++ = 0;
          *(_QWORD *)&v16[v23] = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
        v7 = *(_BYTE **)a1;
        v25 = *(_QWORD **)(a1 + 8);
        v26 = *(_QWORD **)(a1 + 16);
        *(_QWORD *)a1 = v16;
        *(_QWORD *)(a1 + 8) = v17;
        *(_QWORD *)(a1 + 16) = v21;
        *(_QWORD *)(a1 + 24) = v18;
        while (v26 != v25)
        {
          v28 = *--v26;
          v27 = v28;
          *v26 = 0;
          if (v28)
            (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
        }
      }
      if (v7)
        operator delete(v7);
    }
    else
    {
      v9 = ((uint64_t)v8 - *(_QWORD *)a1) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = -(v10 >> 1);
      if (v8 == (_QWORD *)v4)
      {
        v14 = &v8[-(v10 >> 1)];
      }
      else
      {
        do
        {
          v12 = *v8;
          *v8 = 0;
          v13 = v8[v11];
          v8[v11] = v12;
          if (v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
          ++v8;
        }
        while (v8 != (_QWORD *)v4);
        v4 = *(_BYTE **)(a1 + 8);
        v14 = &v8[v11];
      }
      *(_QWORD *)(a1 + 8) = &v4[8 * v11];
      *(_QWORD *)(a1 + 16) = v14;
    }
  }
  v5 = *(_QWORD **)(a1 + 16);
  v6 = *a2;
  *a2 = 0;
  *v5 = v6;
  *(_QWORD *)(a1 + 16) += 8;
}

uint64_t sub_1C6174B44(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  char **v5;
  char *v6;
  uint64_t v7;
  char *v8;

  *(_QWORD *)a1 = &unk_1E81A0DC0;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (char **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v6 = sub_1C4D62F9C((char **)(a1 + 8), a2);
  *(_QWORD *)(a1 + 16) = v6;
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 24))
  {
    v8 = sub_1C4D62F9C(v5, a3);
  }
  else
  {
    v7 = *a3;
    *a3 = 0;
    *(_QWORD *)v6 = v7;
    v8 = v6 + 8;
  }
  *(_QWORD *)(a1 + 16) = v8;
  return a1;
}

uint64_t LLVMInitializeAGX1TargetInfo()
{
  return llvm::TargetRegistry::RegisterTarget((uint64_t)&unk_1ED82C308, (uint64_t)"agx1", (uint64_t)"AGX1", (uint64_t)"AGX1", (uint64_t)sub_1C6174BF0, 0);
}

BOOL sub_1C6174BF0(int a1)
{
  return a1 == 27;
}

uint64_t LLVMInitializeAGX2TargetInfo()
{
  return llvm::TargetRegistry::RegisterTarget((uint64_t)&unk_1ED82C430, (uint64_t)"agx2", (uint64_t)"AGX2", (uint64_t)"AGX2", (uint64_t)sub_1C6174C28, 0);
}

BOOL sub_1C6174C28(int a1)
{
  return a1 == 28;
}

uint64_t LLVMInitializeAGX3TargetInfo()
{
  return llvm::TargetRegistry::RegisterTarget((uint64_t)&unk_1EF8F6858, (uint64_t)"agx3", (uint64_t)"AGX3", (uint64_t)"AGX3", (uint64_t)sub_1C6174C60, 0);
}

BOOL sub_1C6174C60(int a1)
{
  return a1 == 29;
}

uint64_t sub_1C6174C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v8;
  char v9;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_1C6174CF0(a1, (__int128 **)a2, (uint64_t)&v8);
      if (v9)
        llvm::json::Value::moveFrom(v8 + 24, (unsigned __int16 *)(a2 + 24), v6);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

uint64_t sub_1C6174CF0@<X0>(uint64_t a1@<X0>, __int128 **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  result = sub_1C4D658E0((uint64_t *)a1, (uint64_t)a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    v7 = sub_1C4D65BC4(a1, (uint64_t)a2, (uint64_t)a2, v10);
    result = (uint64_t)sub_1C4D65828((uint64_t *)v7, a2);
    *(_WORD *)(v7 + 24) = 0;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C6174D80(uint64_t a1, __int16 a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1C4D66308(a1, 2uLL);
  v4 = *(_QWORD *)(a1 + 48);
  if ((unint64_t)(v4 - *(_QWORD *)(a1 + 56)) <= 1)
  {
    sub_1C4D663A4((uint64_t *)a1, 2uLL);
    v4 = *(_QWORD *)(a1 + 48);
  }
  *(_WORD *)(v4 - 2) = a2;
  v5 = v4 - 2;
  *(_QWORD *)(a1 + 48) = v5;
  return (*(_DWORD *)(a1 + 32) - v5 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1C6174DE0(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16));
}

uint64_t sub_1C6174E14(llvm::raw_ostream *this, uint64_t a2)
{
  const char *v4;
  const char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = (const char *)*((_QWORD *)this + 4);
  v5 = (const char *)*((_QWORD *)this + 2);
  if (v4 != v5)
  {
    *((_QWORD *)this + 4) = v5;
    llvm::raw_ostream::flush_tied_then_write(this, v5, v4 - v5);
  }
  result = operator new[]();
  if (*((_DWORD *)this + 14) == 1)
  {
    v7 = *((_QWORD *)this + 2);
    if (v7)
    {
      v8 = result;
      MEMORY[0x1CAA32F9C](v7, 0x1000C8077774924);
      result = v8;
    }
  }
  *((_QWORD *)this + 2) = result;
  *((_QWORD *)this + 3) = result + a2;
  *((_QWORD *)this + 4) = result;
  *((_DWORD *)this + 14) = 1;
  return result;
}

uint64_t *sub_1C6174EC0(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t v5;
  int v6;
  unsigned int v7;

  if (a3)
  {
    v5 = (uint64_t)result;
    result = (uint64_t *)sub_1C4D66308((uint64_t)result, 4uLL);
    v6 = *(_DWORD *)(v5 + 32) - *(_DWORD *)(v5 + 48) + *(_DWORD *)(v5 + 40) - a3;
    if (v6 != -4 || *(_BYTE *)(v5 + 80))
    {
      v7 = sub_1C4D68A6C(v5, v6 + 4);
      return sub_1C4D66288((uint64_t *)v5, a2, v7);
    }
  }
  return result;
}

uint64_t sub_1C6174F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  *(_BYTE *)(a1 + 70) = 1;
  v6 = 4 * a3;
  sub_1C4D68B54(a1, 4 * a3, 4uLL);
  sub_1C4D68B54(a1, v6, 4uLL);
  if (a3)
  {
    v7 = a2 - 4;
    v8 = a3;
    do
    {
      v9 = v8 - 1;
      v10 = *(_DWORD *)(v7 + 4 * v8);
      sub_1C4D66308(a1, 4uLL);
      sub_1C4D68A6C(a1, *(_DWORD *)(a1 + 32) - *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 40) - v10 + 4);
      v8 = v9;
    }
    while (v9);
  }
  *(_BYTE *)(a1 + 70) = 0;
  return sub_1C4D68A6C(a1, a3);
}

uint64_t sub_1C6174FF8(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

_BYTE *sub_1C6175028(_BYTE *result, _BYTE *a2)
{
  _BYTE *v3;
  char v4;
  char v5;
  uint64_t v6;

  if (result != a2)
  {
    v3 = result;
    v4 = result[16];
    if ((v4 & 1) != 0)
    {
      result = *(_BYTE **)result;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
        v4 = v3[16];
      }
    }
    v5 = a2[16];
    v3[16] = v4 & 0xFE | v5 & 1;
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)v3 = v6;
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)a2;
    }
  }
  return result;
}

_BYTE *sub_1C617509C(_BYTE *result, _BYTE *a2)
{
  _BYTE *v3;
  char v4;
  char v5;
  uint64_t v6;

  if (result != a2)
  {
    v3 = result;
    v4 = result[8];
    if ((v4 & 1) != 0)
    {
      result = *(_BYTE **)result;
      *(_QWORD *)v3 = 0;
      if (result)
      {
        result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
        v4 = v3[8];
      }
    }
    v5 = a2[8];
    v3[8] = v4 & 0xFE | v5 & 1;
    if ((v5 & 1) != 0)
    {
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a2 = 0;
      *(_QWORD *)v3 = v6;
    }
    else
    {
      *v3 = *a2;
    }
  }
  return result;
}

llvm::raw_ostream *llvm::AGCStatusRecord::emitStartMarker(llvm::AGCStatusRecord *this, llvm::raw_ostream *a2)
{
  return sub_1C4D6E95C(a2, "Start", 5uLL, (uint64_t)this);
}

llvm::raw_ostream *llvm::AGCStatusRecord::emitEndMarker(llvm::AGCStatusRecord *this, llvm::raw_ostream *a2)
{
  return sub_1C4D6E95C(a2, "End", 3uLL, (uint64_t)this);
}

uint64_t sub_1C6175188(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  *a2 = 0;
  v9 = v4;
  v10 = 0;
  v11 = a3;
  v5 = *(_QWORD **)(a1 + 8);
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 16))
  {
    v6 = sub_1C4D72FA4((void **)a1, (uint64_t)&v9);
  }
  else
  {
    v5[1] = 0;
    v5[2] = a3;
    v9 = 0;
    v10 = 0;
    v6 = (char *)(v5 + 3);
    *v5 = v4;
  }
  *(_QWORD *)(a1 + 8) = v6;
  v7 = -1431655765 * ((unint64_t)&v6[-*(_QWORD *)a1] >> 3);
  llvm::SourceMgr::SrcBuffer::~SrcBuffer((llvm::SourceMgr::SrcBuffer *)&v9);
  return v7;
}

uint64_t sub_1C6175210(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v6 = *a1;
    v7 = v3 - 1;
    v8 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v4 = (_QWORD *)(*a1 + 16 * v8);
    v9 = *v4;
    if (*a2 == *v4)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v9 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v9 == -8192;
        if (v12)
          v10 = v4;
        v13 = v8 + v11++;
        v8 = v13 & v7;
        v4 = (_QWORD *)(v6 + 16 * (v13 & v7));
        v9 = *v4;
        if (*a2 == *v4)
          goto LABEL_8;
      }
      result = 0;
      if (v10)
        v4 = v10;
    }
  }
  else
  {
    v4 = 0;
    result = 0;
  }
LABEL_8:
  *a3 = v4;
  return result;
}

uint64_t sub_1C61752AC()
{
  return 0;
}

uint64_t sub_1C61752B4()
{
  return 0;
}

const char *sub_1C61752BC()
{
  return "";
}

uint64_t sub_1C61752F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
}

void sub_1C6175310(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[32] = 0;
}

uint64_t sub_1C6175324()
{
  return 1;
}

_QWORD *sub_1C6175338(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6175210(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6175394((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C6175394(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1C4D73CF4(a1, v7);
    v9 = 0;
    sub_1C6175210((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6175444(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C6175210((uint64_t *)v5, a2, &v11);
      v9 = v11;
      v10 = a2[1];
      *v11 = *a2;
      v9[1] = v10;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C61754F0(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t llvm::AGX::AGCStatusPrinter::hookOptimizePrinter(uint64_t this, llvm::legacy::PassManager *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(this + 136))
  {
    v3 = *(_QWORD *)(this + 136);
    v4 = operator new();
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = &unk_1EF8F6982;
    *(_DWORD *)(v4 + 24) = 4;
    *(_QWORD *)v4 = off_1E8133290;
    *(_BYTE *)(v4 + 63) = 9;
    *(_QWORD *)(v4 + 32) = v3;
    strcpy((char *)(v4 + 40), "Optimized");
    *(_QWORD *)(v4 + 64) = v3 + 72;
    *(_QWORD *)(v4 + 72) = v3 + 96;
    return (*(uint64_t (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
  }
  return this;
}

uint64_t llvm::AGX::AGCStatusPrinter::hookLoweredPrinter(uint64_t this, llvm::legacy::PassManager *a2)
{
  uint64_t v3;
  uint64_t v4;

  if (*(_QWORD *)(this + 136))
  {
    v3 = *(_QWORD *)(this + 136);
    v4 = operator new();
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = &unk_1EF8F6982;
    *(_DWORD *)(v4 + 24) = 4;
    *(_QWORD *)v4 = off_1E8133290;
    *(_QWORD *)(v4 + 32) = v3;
    *(_BYTE *)(v4 + 63) = 7;
    strcpy((char *)(v4 + 40), "Lowered");
    *(_QWORD *)(v4 + 64) = v3 + 72;
    *(_QWORD *)(v4 + 72) = v3 + 96;
    return (*(uint64_t (**)(llvm::legacy::PassManager *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4);
  }
  return this;
}

llvm::raw_ostream *llvm::AGX::AGCStatusPrinter::logRaw(uint64_t a1, uint64_t *a2)
{
  llvm::raw_ostream *result;
  char v3;
  BOOL v4;
  size_t v5;
  size_t v6;
  size_t v7;

  result = *(llvm::raw_ostream **)(a1 + 136);
  if (result)
  {
    v3 = *((_BYTE *)a2 + 23);
    v4 = v3 < 0;
    v5 = a2[1];
    if (v3 < 0)
      a2 = (uint64_t *)*a2;
    v6 = v3 & 0x7F;
    if (v4)
      v7 = v5;
    else
      v7 = v6;
    return llvm::raw_ostream::write(result, (const char *)a2, v7);
  }
  return result;
}

void llvm::AGX::AGCStatusPrinter::~AGCStatusPrinter(llvm::AGX::AGCStatusPrinter *this)
{
  void **v2;
  void **v3;
  llvm::AGX::AGCStatusPrinter *v4;

  v2 = (void **)*((_QWORD *)this + 17);
  *((_QWORD *)this + 17) = 0;
  if (v2)
  {
    v4 = this;
    v3 = sub_1C4D779CC(v2);
    MEMORY[0x1CAA32FC0](v3, 0x10B2C40A7EA51BELL);
    sub_1C4D7796C((uint64_t)v4);
  }
  else
  {
    sub_1C4D7796C((uint64_t)this);
  }
}

llvm::raw_ostream *sub_1C61756FC(llvm::raw_ostream *this)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)this = &unk_1E8133330;
  v2 = (const char *)*((_QWORD *)this + 4);
  v3 = (const char *)*((_QWORD *)this + 2);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    *((_QWORD *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3, v4);
  }
  *(_QWORD *)this = off_1E81A6E70;
  if (*((_DWORD *)this + 14) == 1)
  {
    v6 = *((_QWORD *)this + 2);
    if (v6)
      MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924, v4);
  }
  return this;
}

void sub_1C6175784(llvm::raw_ostream *this)
{
  const char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)this = &unk_1E8133330;
  v2 = (const char *)*((_QWORD *)this + 4);
  v3 = (const char *)*((_QWORD *)this + 2);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    *((_QWORD *)this + 4) = v3;
    llvm::raw_ostream::flush_tied_then_write(this, v3, v4);
  }
  *(_QWORD *)this = off_1E81A6E70;
  if (*((_DWORD *)this + 14) == 1)
  {
    v5 = *((_QWORD *)this + 2);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8077774924, v4);
  }
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6175820()
{
  return 0;
}

uint64_t sub_1C6175828(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t sub_1C6175834(uint64_t result, char a2)
{
  *(_BYTE *)(result + 40) = a2;
  return result;
}

llvm::raw_ostream *sub_1C617583C(uint64_t a1, const char *a2, size_t a3)
{
  return llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 64), a2, a3);
}

uint64_t *llvm::AGX::AGCReplay::createCompiler@<X0>(llvm::AGX::AGCReplay *this@<X0>, uint64_t a2@<X8>)
{
  return llvm::AGX::AGXCompiler::create((__int128 *)this, (uint64_t)this + 72, a2);
}

double llvm::AGX::AGCReplay::createPlan@<D0>(llvm::AGX::AGCReplay *this@<X0>, llvm::AGX::AGXCompiler *a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_QWORD *)&result = llvm::AGX::AGXCompiler::createCompilePlan(a2, *((_DWORD *)this + 6), *((_BYTE *)this + 32), *((_BYTE *)this + 33), 0, *((unsigned __int8 *)this + 67), *((_DWORD *)this + 7), a3).n128_u64[0];
  return result;
}

uint64_t sub_1C617586C(uint64_t a1, char *a2, _BYTE **a3, _OWORD *a4)
{
  uint64_t v8;
  size_t v9;
  _BYTE *v10;

  v8 = sub_1C47AD050(a1, 0, 0);
  *(_BYTE *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)v8 = &unk_1E819E898;
  *(_QWORD *)(v8 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v8 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v8 + 184) = v8 + 160;
  v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  v10 = *a3;
  *(_BYTE *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v10;
  *(_OWORD *)(a1 + 32) = *a4;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

void llvm::AGX::AGXCompiler::init(llvm::AGX::AGXCompiler *this)
{
  unint64_t v1;
  void (**v2)();
  void (*v3)();

  v1 = atomic_load(&init_flag);
  if (v1 != -1)
  {
    v2 = &v3;
    v3 = sub_1C4D7A2F0;
    std::__call_once(&init_flag, &v2, (void (__cdecl *)(void *))sub_1C4D7B69C);
  }
}

uint64_t *llvm::AGX::AGXCompiler::create@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t *result;

  v6 = (uint64_t *)operator new();
  result = sub_1C4D7A870(v6, a1, a2);
  *(_BYTE *)a3 = 0;
  *(_QWORD *)(a3 + 8) = result;
  return result;
}

__n128 llvm::AGX::AGXCompiler::getLastDiagnostics@<Q0>(__n128 **this@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  __n128 result;

  v2 = *this;
  result = (*this)[1];
  *a2 = result;
  v2[1].n128_u64[0] = 0;
  v2[1].n128_u64[1] = 0;
  a2[1].n128_u64[0] = v2[2].n128_u64[0];
  v2[2].n128_u64[0] = 0;
  return result;
}

BOOL llvm::AGX::AGXCompiler::isValid(llvm::AGX::AGXCompiler *this)
{
  return **(_QWORD **)this && *(_QWORD *)(*(_QWORD *)this + 8) != 0;
}

__n128 llvm::AGX::AGXCompiler::createCompilePlan@<Q0>(_QWORD *a1@<X0>, int a2@<W1>, char a3@<W2>, char a4@<W3>, char a5@<W4>, int a6@<W5>, int a7@<W6>, uint64_t a8@<X8>)
{
  __int128 v9;
  __n128 result;
  __int128 v11;

  llvm::AGX::AGXCompilePlan::AGXCompilePlan((uint64_t **)&v11, *a1 + 40, *(_QWORD *)(*a1 + 8 * (a6 == 1)), *a1 + 16, a2, a7, a3, a4, a5);
  *(_BYTE *)a8 = 0;
  v9 = v11;
  v11 = 0uLL;
  *(_OWORD *)(a8 + 8) = v9;
  llvm::AGX::AGXCompilePlan::~AGXCompilePlan((llvm::AGX::AGXCompilePlan *)&v11);
  return result;
}

uint64_t sub_1C6175AFC(uint64_t a1)
{
  return a1 + 16;
}

_QWORD *llvm::AGX::DiagnosticManager::install(llvm::AGX::DiagnosticManager *this, llvm::MCContext *a2)
{
  _QWORD *result;
  uint64_t (**v3)(void);
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4[0] = &off_1E8133458;
  v4[1] = this;
  v5 = v4;
  sub_1C4D7BD48((_QWORD *)a2 + 14, v4);
  result = v5;
  if (v5 == v4)
  {
    v3 = (uint64_t (**)(void))(v4[0] + 32);
  }
  else
  {
    if (!v5)
      return result;
    v3 = (uint64_t (**)(void))(*v5 + 40);
  }
  return (_QWORD *)(*v3)();
}

uint64_t llvm::AGX::PerformanceDiagnostic::getMessageImpl(llvm::AGX::PerformanceDiagnostic *this)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE v6[16];
  _QWORD v7[14];
  uint64_t v8;

  result = *((_QWORD *)this + 59);
  if (!result)
  {
    sub_1C4D7C8B4((uint64_t)v6);
    sub_1C4D7C62C(v7, (uint64_t)"[Performance Stats] Instructions: ", 34);
    v3 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v3, (uint64_t)" ; Registers: ", 14);
    v4 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v4, (uint64_t)" ...", 4);
    v5 = operator new();
    std::stringbuf::str();
    sub_1C4765904((uint64_t *)this + 59, v5);
    sub_1C4D7CB78((uint64_t)v6);
    MEMORY[0x1CAA32F18](&v8);
    return *((_QWORD *)this + 59);
  }
  return result;
}

_QWORD *sub_1C6175C78(_QWORD *a1)
{
  *a1 = &off_1E8133510;
  sub_1C4765904(a1 + 59, 0);
  return a1;
}

_QWORD *sub_1C6175CB0(_QWORD *a1)
{
  *a1 = &off_1E8133538;
  sub_1C4765904(a1 + 3, 0);
  return a1;
}

uint64_t sub_1C6175CE4(uint64_t a1, llvm::MCContext *a2, uint64_t a3, uint64_t a4)
{
  char v5;
  uint64_t (*v7)(llvm::MCContext *, uint64_t, uint64_t);
  uint64_t v9;

  v5 = a3;
  v7 = *(uint64_t (**)(llvm::MCContext *, uint64_t, uint64_t))(a1 + 56);
  if (v7)
    return v7(a2, a3, a4);
  v9 = operator new();
  bzero((void *)(v9 + 16), 0x390uLL);
  *(_OWORD *)(v9 + 920) = 0u;
  *(_QWORD *)v9 = off_1E8181AC8;
  *(_QWORD *)(v9 + 8) = 0;
  *(_DWORD *)(v9 + 16) = 0;
  bzero((void *)(v9 + 24), 0x329uLL);
  *(_BYTE *)(v9 + 864) = 0;
  *(_QWORD *)(v9 + 856) = 0;
  *(_OWORD *)(v9 + 840) = 0u;
  llvm::MCObjectFileInfo::initMCObjectFileInfo((llvm::MCObjectFileInfo *)v9, a2, v5, a4);
  return v9;
}

BOOL llvm::AGX::AssemblePipeline::run(llvm::AGX::DiagnosticManager ***a1, uint64_t *a2, uint64_t a3, int a4)
{
  return llvm::AGX::AssemblePipeline::AssemblerImpl::run(*a1, a2, a3, a4);
}

uint64_t sub_1C6175EA0(uint64_t a1, uint64_t a2, llvm::MCContext *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, unsigned __int8 a10)
{
  int v12;
  uint64_t (*v13)(llvm::MCContext *, uint64_t *, uint64_t *, uint64_t *, uint64_t, _QWORD);
  uint64_t ELFStreamer;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t (*v18)(uint64_t, llvm::MCContext *, uint64_t *, uint64_t *, uint64_t *, uint64_t);
  char *v19;

  v12 = *(_DWORD *)(a2 + 44);
  if (v12 != 5)
  {
    v15 = 0;
    switch(v12)
    {
      case 1:
        ELFStreamer = (*(uint64_t (**)(llvm::MCContext *, uint64_t *, uint64_t *, uint64_t *, uint64_t, _QWORD))(a1 + 152))(a3, a4, a5, a6, a8, a9);
        goto LABEL_4;
      case 3:
        v18 = *(uint64_t (**)(uint64_t, llvm::MCContext *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(a1 + 168);
        if (v18)
          goto LABEL_21;
        ELFStreamer = llvm::createELFStreamer(a3, a4, a5, a6, a8);
        goto LABEL_4;
      case 4:
        v19 = "GOFF MCObjectStreamer not implemented yet";
        goto LABEL_19;
      case 6:
        v18 = *(uint64_t (**)(uint64_t, llvm::MCContext *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(a1 + 192);
        if (v18)
          goto LABEL_21;
        ELFStreamer = (uint64_t)llvm::createSPIRVStreamer(a3, a4, a5, a6, a8);
        goto LABEL_4;
      case 7:
        v18 = *(uint64_t (**)(uint64_t, llvm::MCContext *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(a1 + 176);
        if (v18)
          goto LABEL_21;
        ELFStreamer = llvm::createWasmStreamer(a3, a4, a5, a6, a8);
        goto LABEL_4;
      case 8:
        v19 = "MetalLib MCObjectStreamer not implemented yet.";
LABEL_19:
        llvm::report_fatal_error((llvm *)v19, (const char *)1);
      case 9:
        v18 = *(uint64_t (**)(uint64_t, llvm::MCContext *, uint64_t *, uint64_t *, uint64_t *, uint64_t))(a1 + 184);
        if (v18)
LABEL_21:
          ELFStreamer = v18(a2, a3, a4, a5, a6, a8);
        else
          ELFStreamer = (uint64_t)llvm::createXCOFFStreamer(a3, a4, a5, a6, a8);
        goto LABEL_4;
      default:
        goto LABEL_5;
    }
  }
  v13 = *(uint64_t (**)(llvm::MCContext *, uint64_t *, uint64_t *, uint64_t *, uint64_t, _QWORD))(a1 + 160);
  if (v13)
    ELFStreamer = v13(a3, a4, a5, a6, a8, a10);
  else
    ELFStreamer = llvm::createMachOStreamer(a3, a4, a5, a6, a8, a10, 0);
LABEL_4:
  v15 = ELFStreamer;
LABEL_5:
  v16 = *(void (**)(uint64_t, uint64_t))(a1 + 216);
  if (v16)
    v16(v15, a7);
  return v15;
}

uint64_t *sub_1C6176038(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;

  sub_1C4D7E63C((uint64_t)&v5, a1[1], a1[2]);
  v2 = (uint64_t *)(*(_QWORD *)*a1 + 8);
  v3 = v5;
  v5 = 0;
  sub_1C4D81EB8(v2, v3);
  return sub_1C4D81EB8(&v5, 0);
}

uint64_t *sub_1C61760B0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;

  sub_1C4D7E63C((uint64_t)&v5, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v2 = **(uint64_t ***)a1;
  v3 = v5;
  v5 = 0;
  sub_1C4D81EB8(v2, v3);
  return sub_1C4D81EB8(&v5, 0);
}

void sub_1C6176124()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6176138(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8133680;
  result[1] = v3;
  return result;
}

uint64_t sub_1C617616C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8133680;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C6176188(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

void sub_1C6176194()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C61761A8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81336C8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C61761DC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81336C8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C61761F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

void sub_1C6176204()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6176218(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8133710;
  result[1] = v3;
  return result;
}

uint64_t sub_1C617624C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8133710;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C6176268(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

void sub_1C6176278()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C617628C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8133830;
  result[1] = v3;
  return result;
}

uint64_t sub_1C61762C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8133830;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C61762DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 8))();
}

void sub_1C61762E8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C61762FC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8133998;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C6176334(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8133998;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C6176354(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(unsigned __int8 *)(a1 + 16));
}

void sub_1C6176364()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6176378(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8133EF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C61763AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8133EF0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C61763C4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 8))(a2, *a3, a3[1]);
}

BOOL llvm::AGX::AGXCompilePlan::isValid(llvm::AGX::AGXCompilePlan *this)
{
  return *(_QWORD *)this != 0;
}

void llvm::AGX::AGXCompilePlan::~AGXCompilePlan(llvm::AGX::AGXCompilePlan *this)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t v4;

  v2 = (uint64_t **)*((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v2)
  {
    llvm::AGX::AGXAssemblePlan::~AGXAssemblePlan(v2);
    MEMORY[0x1CAA32FC0]();
  }
  v3 = *(uint64_t **)this;
  *(_QWORD *)this = 0;
  if (v3)
  {
    v4 = *v3;
    *v3 = 0;
    if (v4)
      sub_1C4D8315C((uint64_t)v3, v4);
    MEMORY[0x1CAA32FC0](v3, 0x20C4093837F09);
  }
}

void llvm::AGX::AGXAssemblePlan::~AGXAssemblePlan(uint64_t **this)
{
  uint64_t *v2;
  uint64_t v3;

  sub_1C6176620((uint64_t)(this + 1));
  v2 = *this;
  *this = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      MEMORY[0x1CAA32FC0](v3, 0x20C40A4A59CD2);
    MEMORY[0x1CAA32FC0](v2, 0x20C4093837F09);
  }
}

unsigned __int8 *sub_1C6176504(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  char v4;
  BOOL v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  char v19;

  v2 = (unsigned __int8 *)a2;
  v4 = *(_BYTE *)(a2 + 23);
  v5 = v4 < 0;
  v6 = *(_QWORD *)(a2 + 8);
  if (v4 < 0)
    a2 = *(_QWORD *)a2;
  v7 = v4 & 0x7F;
  if (v5)
    v8 = v6;
  else
    v8 = v7;
  v9 = sub_1C4D8463C((uint64_t)&v19, (uint64_t *)a2, v8);
  v10 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v10)
    return 0;
  v11 = v9;
  v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  v13 = v12.u32[0];
  if (v12.u32[0] > 1uLL)
  {
    v14 = v9;
    if (v9 >= *(_QWORD *)&v10)
      v14 = v9 % *(_QWORD *)&v10;
  }
  else
  {
    v14 = (*(_QWORD *)&v10 - 1) & v9;
  }
  v15 = *(unsigned __int8 ***)(*a1 + 8 * v14);
  if (!v15)
    return 0;
  for (i = *v15; i; i = *(unsigned __int8 **)i)
  {
    v17 = *((_QWORD *)i + 1);
    if (v17 == v11)
    {
      if (sub_1C49C7600(i + 16, v2))
        return i;
    }
    else
    {
      if (v13 > 1)
      {
        if (v17 >= *(_QWORD *)&v10)
          v17 %= *(_QWORD *)&v10;
      }
      else
      {
        v17 &= *(_QWORD *)&v10 - 1;
      }
      if (v17 != v14)
        return 0;
    }
  }
  return i;
}

uint64_t sub_1C6176620(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1C4765530((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_1C617667C(_QWORD *a1, const std::string::value_type *a2, std::string::size_type a3, uint64_t a4)
{
  void *v5;
  void *v6;
  char v7;

  sub_1C61766F4((uint64_t)&v6, (uint64_t)a1, a2, a3, a4);
  v5 = v6;
  if ((sub_1C617679C(a1, (uint64_t)v6) & 1) == 0 && v5)
  {
    if (v7)
      sub_1C4765530((uint64_t)v5 + 16);
    operator delete(v5);
  }
}

unint64_t sub_1C61766F4(uint64_t a1, uint64_t a2, const std::string::value_type *a3, std::string::size_type a4, uint64_t a5)
{
  uint64_t v9;
  char *v10;
  char v11;
  BOOL v12;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t result;
  char v17;

  v9 = a2 + 16;
  v10 = (char *)operator new(0x40uLL);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  std::string::__init((std::string *)(v10 + 16), a3, a4);
  std::string::__init((std::string *)(v10 + 40), *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  *(_BYTE *)(a1 + 16) = 1;
  v11 = v10[39];
  v12 = v11 < 0;
  if (v11 >= 0)
    v13 = (uint64_t *)(v10 + 16);
  else
    v13 = (uint64_t *)*((_QWORD *)v10 + 2);
  v14 = v11 & 0x7F;
  if (v12)
    v15 = *((_QWORD *)v10 + 3);
  else
    v15 = v14;
  result = sub_1C4D8463C((uint64_t)&v17, v13, v15);
  *((_QWORD *)v10 + 1) = result;
  return result;
}

uint64_t sub_1C617679C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  int v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v12;

  v4 = a2 + 16;
  v5 = *(_BYTE *)(a2 + 39);
  v6 = v5;
  if (v5 >= 0)
    v7 = (uint64_t *)(a2 + 16);
  else
    v7 = *(uint64_t **)(a2 + 16);
  v8 = v5 & 0x7F;
  if (v6 >= 0)
    v9 = v8;
  else
    v9 = *(_QWORD *)(v4 + 8);
  v10 = sub_1C4D8463C((uint64_t)&v12, v7, v9);
  *(_QWORD *)(v4 - 8) = v10;
  if (sub_1C4D84AA4((uint64_t)a1, v10, (unsigned __int8 **)v4))
    return 0;
  sub_1C4D84E2C(a1, (_QWORD *)a2);
  return 1;
}

uint64_t llvm::raw_std_ostream::write_impl(llvm::raw_std_ostream *this, const char *a2)
{
  return std::ostream::write();
}

uint64_t llvm::raw_std_ostream::current_pos(llvm::raw_std_ostream *this)
{
  return 0;
}

uint64_t sub_1C6176838(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)result = off_1E81A6E70;
  if (*(_DWORD *)(result + 56) == 1)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      v2 = result;
      MEMORY[0x1CAA32F9C](v1, 0x1000C8077774924);
      return v2;
    }
  }
  return result;
}

uint64_t llvm::AGX::CompileRequest::setModule(uint64_t this, llvm::Module *a2)
{
  *(_QWORD *)(*(_QWORD *)this + 8) = a2;
  return this;
}

uint64_t llvm::AGX::CompileRequest::getId(llvm::AGX::CompileRequest *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 48);
}

uint64_t llvm::AGX::CompileRequest::getTelemetryCollector(llvm::AGX::CompileRequest *this)
{
  return *(_QWORD *)(*(_QWORD *)this + 56);
}

__n128 llvm::AGX::CompileReply::takeDiagnostics@<Q0>(llvm::AGX::CompileReply *this@<X0>, __n128 *a2@<X8>)
{
  _QWORD *v2;
  __n128 result;

  v2 = *(_QWORD **)this;
  result = *(__n128 *)(*(_QWORD *)this + 24);
  *a2 = result;
  a2[1].n128_u64[0] = v2[5];
  v2[4] = 0;
  v2[5] = 0;
  v2[3] = 0;
  return result;
}

uint64_t *llvm::AGX::CompileReply::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
    sub_1C4D85830((uint64_t)a1, v4);
  return a1;
}

uint64_t llvm::createAggressiveInstCombinerPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C4D897D0(v1);
}

uint64_t sub_1C6176948(uint64_t a1, uint64_t *a2, llvm::APInt *a3)
{
  const void **v6;
  uint64_t v7;
  llvm::APInt *v8;
  unsigned int v9;
  llvm::APInt *v10;
  unsigned int v11;

  v7 = *a2;
  v6 = (const void **)(a2 + 1);
  *(_QWORD *)a1 = v7;
  v8 = (llvm::APInt *)(a1 + 8);
  v9 = *((_DWORD *)a2 + 4);
  *(_DWORD *)(a1 + 16) = v9;
  if (v9 > 0x40)
    llvm::APInt::initSlowCase(v8, v6);
  else
    *(_QWORD *)v8 = *v6;
  *(_QWORD *)(a1 + 24) = a2[3];
  v10 = (llvm::APInt *)(a1 + 32);
  v11 = *((_DWORD *)a3 + 2);
  *(_DWORD *)(a1 + 40) = v11;
  if (v11 > 0x40)
    llvm::APInt::initSlowCase(v10, (const void **)a3);
  else
    *(_QWORD *)v10 = *(_QWORD *)a3;
  return a1;
}

uint64_t sub_1C61769D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(a1 + 40) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 16) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  return a1;
}

uint64_t sub_1C6176A40(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v4;
  const void **v6;
  uint64_t v7;
  llvm::APInt *v8;

  v4 = a2;
  v7 = *a2;
  v6 = (const void **)(a2 + 1);
  *(_QWORD *)a1 = v7;
  v8 = (llvm::APInt *)(a1 + 8);
  LODWORD(v4) = *((_DWORD *)v4 + 4);
  *(_DWORD *)(a1 + 16) = (_DWORD)v4;
  if (v4 > 0x40)
    llvm::APInt::initSlowCase(v8, v6);
  else
    *(_QWORD *)v8 = *v6;
  sub_1C6176A9C(a1 + 24, a3);
  return a1;
}

uint64_t sub_1C6176A9C(uint64_t a1, uint64_t *a2)
{
  const void **v4;
  uint64_t v5;
  llvm::APInt *v6;
  unsigned int v7;
  llvm::APInt *v8;
  const void **v9;
  unsigned int v10;

  v5 = *a2;
  v4 = (const void **)(a2 + 1);
  *(_QWORD *)a1 = v5;
  v6 = (llvm::APInt *)(a1 + 8);
  v7 = *((_DWORD *)a2 + 4);
  *(_DWORD *)(a1 + 16) = v7;
  if (v7 > 0x40)
    llvm::APInt::initSlowCase(v6, v4);
  else
    *(_QWORD *)v6 = *v4;
  v8 = (llvm::APInt *)(a1 + 24);
  v9 = (const void **)(a2 + 3);
  v10 = *((_DWORD *)a2 + 8);
  *(_DWORD *)(a1 + 32) = v10;
  if (v10 > 0x40)
    llvm::APInt::initSlowCase(v8, v9);
  else
    *(_QWORD *)v8 = *v9;
  return a1;
}

uint64_t sub_1C6176B10(uint64_t a1, _QWORD *a2, llvm::APInt *a3)
{
  _QWORD *v4;
  const void **v6;
  uint64_t v7;
  llvm::APInt *v8;
  llvm::APInt *v9;
  unsigned int v10;

  v4 = a2;
  v7 = *a2;
  v6 = (const void **)(a2 + 1);
  *(_QWORD *)a1 = v7;
  v8 = (llvm::APInt *)(a1 + 8);
  LODWORD(v4) = *((_DWORD *)v4 + 4);
  *(_DWORD *)(a1 + 16) = (_DWORD)v4;
  if (v4 > 0x40)
    llvm::APInt::initSlowCase(v8, v6);
  else
    *(_QWORD *)v8 = *v6;
  v9 = (llvm::APInt *)(a1 + 24);
  v10 = *((_DWORD *)a3 + 2);
  *(_DWORD *)(a1 + 32) = v10;
  if (v10 > 0x40)
    llvm::APInt::initSlowCase(v9, (const void **)a3);
  else
    *(_QWORD *)v9 = *(_QWORD *)a3;
  return a1;
}

uint64_t sub_1C6176B88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)(a1 + 32) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 16) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  return a1;
}

_QWORD *sub_1C6176BF8(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](*a1, 8);
  return a1;
}

uint64_t sub_1C6176C34(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;

  v10 = *a2;
  v11 = 0;
  result = sub_1C6176E38((_DWORD *)a1, &v10, &v11, (uint64_t)&v8);
  if (v9)
  {
    v5 = v8;
    v6 = *(_QWORD *)(a1 + 32);
    if (v6 >= *(_QWORD *)(a1 + 40))
    {
      result = (uint64_t)sub_1C4D8DBBC((void **)(a1 + 24), (uint64_t)a2);
    }
    else
    {
      v7 = *(_OWORD *)a2;
      *(_QWORD *)(v6 + 16) = a2[2];
      *(_OWORD *)v6 = v7;
      result = v6 + 24;
    }
    *(_QWORD *)(a1 + 32) = result;
    *(_DWORD *)(v5 + 8) = -1431655765 * ((unint64_t)(result - *(_QWORD *)(a1 + 24)) >> 3) - 1;
  }
  return result;
}

uint64_t sub_1C6176CE4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;

  v15 = *a2;
  v16 = 0;
  sub_1C6176E38((_DWORD *)a1, &v15, &v16, (uint64_t)&v13);
  v4 = v13;
  if (v14)
  {
    v5 = *a2;
    v12 = 0;
    v11 = (unint64_t)v5;
    v6 = *(_QWORD *)(a1 + 32);
    if (v6 >= *(_QWORD *)(a1 + 40))
    {
      v7 = sub_1C4D8DBBC((void **)(a1 + 24), (uint64_t)&v11);
    }
    else
    {
      *(_OWORD *)v6 = v11;
      *(_QWORD *)(v6 + 16) = v12;
      v7 = (char *)(v6 + 24);
    }
    *(_QWORD *)(a1 + 32) = v7;
    v9 = *(_QWORD *)(a1 + 24);
    v8 = -1431655765 * ((unint64_t)&v7[-v9] >> 3) - 1;
    *(_DWORD *)(v4 + 8) = v8;
  }
  else
  {
    v8 = *(_DWORD *)(v13 + 8);
    v9 = *(_QWORD *)(a1 + 24);
  }
  return v9 + 24 * v8 + 8;
}

uint64_t sub_1C6176DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = a2;
  if (sub_1C4926528(a1, &v8, &v7))
  {
    v3 = v7;
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 16);
    v3 = *(_QWORD *)a1 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(v3 + 8) + 8);
}

uint64_t sub_1C6176E38@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C47AD1C0((uint64_t)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C4D8D8F4(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_DWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * a1[4];
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

unsigned int *sub_1C6176EC8(unsigned int *result, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 8 * v8 == a2)
    return sub_1C486AF08(result, __src, a4);
  v9 = (a2 - v7) >> 3;
  v10 = (char *)a4 - (char *)__src;
  v11 = a4 - __src;
  if (v8 + v11 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8 + v11, 8);
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v12 = (_QWORD *)(v7 + 8 * v9);
  v13 = (_BYTE *)(v7 + 8 * v8);
  v14 = (v13 - (_BYTE *)v12) >> 3;
  if (v14 >= v11)
  {
    result = sub_1C6177054(v6, &v13[-8 * v11], (char *)(v7 + 8 * v8));
    if (&v13[-8 * v11] != (_BYTE *)v12)
      result = (unsigned int *)memmove(&v12[v11], v12, &v13[-8 * v11] - (_BYTE *)v12);
    if (v5 != a4)
      return (unsigned int *)memmove(v12, v5, (char *)a4 - (char *)v5);
  }
  else
  {
    v15 = v8 + (v10 >> 3);
    v6[2] = v15;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - (_BYTE *)v12);
      do
      {
        v16 = *v5++;
        *v12++ = v16;
        --v14;
      }
      while (v14);
    }
    if (v5 != a4)
      return (unsigned int *)memcpy(v13, v5, (char *)a4 - (char *)v5);
  }
  return result;
}

unsigned int *sub_1C6177054(unsigned int *result, char *a2, char *a3)
{
  char *v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[2];
  v8 = v7 + ((a3 - a2) >> 3);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 8);
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v9 = (_QWORD *)(*(_QWORD *)v5 + 8 * v7);
    do
    {
      v10 = *(_QWORD *)v4;
      v4 += 8;
      *v9++ = v10;
    }
    while (v4 != a3);
  }
  v5[2] = v7 + (v6 >> 3);
  return result;
}

uint64_t sub_1C61770D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a2;
  v5 = 0;
  if (!sub_1C4926528(a1, &v4, &v5) || v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 24 * *(unsigned int *)(v5 + 8);
}

uint64_t llvm::AAResults::getArgModRefInfo(llvm::AAResults *this, const llvm::CallBase *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;

  v3 = (_QWORD *)*((_QWORD *)this + 1);
  v4 = (_QWORD *)*((_QWORD *)this + 2);
  if (v3 == v4)
    return 7;
  LODWORD(v7) = 7;
  while (1)
  {
    v7 = (*(unsigned int (**)(_QWORD, const llvm::CallBase *, uint64_t))(*(_QWORD *)*v3 + 40))(*v3, a2, a3) & v7;
    if ((v7 & 3) == 0)
      break;
    if (++v3 == v4)
      return v7;
  }
  return 4;
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, int a2)
{
  llvm::raw_ostream *v3;
  char *v4;
  llvm::raw_ostream *v5;

  v3 = a1;
  switch((char)a2)
  {
    case 0:
      v4 = "NoAlias";
      goto LABEL_7;
    case 1:
      v4 = "MayAlias";
      goto LABEL_7;
    case 2:
      sub_1C4816AD8(a1, "PartialAlias");
      if ((a2 & 0x100) == 0)
        return v3;
      v5 = sub_1C4816AD8(v3, " (off ");
      a1 = llvm::raw_ostream::operator<<(v5, (uint64_t)a2 >> 9);
      v4 = ")";
LABEL_7:
      sub_1C4816AD8(a1, v4);
      return v3;
    case 3:
      v4 = "MustAlias";
      goto LABEL_7;
    default:
      return v3;
  }
}

{
  return sub_1C4816AD8(a1, off_1E81729B0[a2]);
}

llvm::ExternalAAWrapperPass *llvm::ExternalAAWrapperPass::ExternalAAWrapperPass(llvm::ExternalAAWrapperPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::ExternalAAWrapperPass::ID;
  *((_DWORD *)this + 6) = 4;
  *(_QWORD *)this = &off_1E81340D8;
  *((_QWORD *)this + 7) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED7EF350);
  if (v2 != -1)
  {
    v6[0] = sub_1C4D90E00;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED7EF350, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

uint64_t llvm::ExternalAAWrapperPass::ExternalAAWrapperPass(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t PassRegistry;
  _QWORD *v7;
  _QWORD v8[2];

  v2 = a1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &llvm::ExternalAAWrapperPass::ID;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81340D8;
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      a1 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 32);
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v3;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  v4 = atomic_load(&qword_1ED7EF350);
  if (v4 != -1)
  {
    v8[0] = sub_1C4D90E00;
    v8[1] = &PassRegistry;
    v7 = v8;
    std::__call_once(&qword_1ED7EF350, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v2;
}

uint64_t llvm::createExternalAAWrapperPass(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  void (**v5)(_QWORD *);
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v3 = (_QWORD *)a1[3];
  if (v3)
  {
    if (v3 == a1)
    {
      v8 = v7;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v7);
    }
    else
    {
      v8 = (_QWORD *)a1[3];
      a1[3] = 0;
    }
  }
  else
  {
    v8 = 0;
  }
  llvm::ExternalAAWrapperPass::ExternalAAWrapperPass(v2, (uint64_t)v7);
  v4 = v8;
  if (v8 == v7)
  {
    v5 = (void (**)(_QWORD *))(v7[0] + 32);
    v4 = v7;
  }
  else
  {
    if (!v8)
      return v2;
    v5 = (void (**)(_QWORD *))(*v8 + 40);
  }
  (*v5)(v4);
  return v2;
}

llvm::AAResultsWrapperPass *llvm::AAResultsWrapperPass::AAResultsWrapperPass(llvm::AAResultsWrapperPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::AAResultsWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E8134180;
  *((_QWORD *)this + 4) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82C620);
  if (v2 != -1)
  {
    v6[0] = sub_1C4D90E98;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82C620, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

void llvm::initializeAAResultsWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82C620);
  if (v2 != -1)
  {
    v5[0] = sub_1C4D90E98;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82C620, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

char *sub_1C61775CC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *result;
  _QWORD *v7;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E8134340;
  v4[1] = a2;
  *a2 = a1;
  v7 = v4;
  v5 = *(_QWORD **)(a1 + 16);
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24))
  {
    result = sub_1C4D80F34((char **)(a1 + 8), &v7);
  }
  else
  {
    *v5 = v4;
    result = (char *)(v5 + 1);
  }
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

char *sub_1C617764C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *result;
  _QWORD *v7;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E8134400;
  v4[1] = a2;
  *a2 = a1;
  v7 = v4;
  v5 = *(_QWORD **)(a1 + 16);
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24))
  {
    result = sub_1C4D80F34((char **)(a1 + 8), &v7);
  }
  else
  {
    *v5 = v4;
    result = (char *)(v5 + 1);
  }
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

char *sub_1C61776CC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *result;
  _QWORD *v7;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E8134460;
  v4[1] = a2;
  *a2 = a1;
  v7 = v4;
  v5 = *(_QWORD **)(a1 + 16);
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24))
  {
    result = sub_1C4D80F34((char **)(a1 + 8), &v7);
  }
  else
  {
    *v5 = v4;
    result = (char *)(v5 + 1);
  }
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

char *sub_1C617774C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char *result;
  _QWORD *v7;

  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E81344C0;
  v4[1] = a2;
  *a2 = a1;
  v7 = v4;
  v5 = *(_QWORD **)(a1 + 16);
  if ((unint64_t)v5 >= *(_QWORD *)(a1 + 24))
  {
    result = sub_1C4D80F34((char **)(a1 + 8), &v7);
  }
  else
  {
    *v5 = v4;
    result = (char *)(v5 + 1);
  }
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void *llvm::AAResultsWrapperPass::getAnalysisUsage(llvm::AAResultsWrapperPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::BasicAAWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::GPUAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::ScopedNoAliasAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::TypeBasedAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::objcarc::ObjCARCAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::SCEVAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::CFLAndersAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::CFLSteensAAWrapperPass::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::ExternalAAWrapperPass::ID);
}

void *llvm::getAAResultsAnalysisUsage(llvm *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage::addRequiredID(this, llvm::TargetLibraryInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::ScopedNoAliasAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::TypeBasedAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::objcarc::ObjCARCAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::GlobalsAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::CFLAndersAAWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::CFLSteensAAWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::ExternalAAWrapperPass::ID);
}

void sub_1C617797C(llvm::Pass *a1)
{
  sub_1C6177B4C(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C61779A0(llvm::ImmutablePass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E81340D8;
  v2 = (char *)this + 32;
  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::ImmutablePass::~ImmutablePass(this);
}

void sub_1C61779FC(llvm::ImmutablePass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E81340D8;
  v2 = (_QWORD *)((char *)a1 + 32);
  v3 = (_QWORD *)*((_QWORD *)a1 + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_4;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_4:
  llvm::ImmutablePass::~ImmutablePass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6177A6C(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

BOOL sub_1C6177A78(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int *BundleOpInfoForOperand;

  BundleOpInfoForOperand = (unsigned int *)llvm::CallBase::getBundleOpInfoForOperand((char *)a1, a2);
  return !*(_DWORD *)(*(_QWORD *)BundleOpInfoForOperand + 8)
      && (a3 == 45 || a3 == 22)
      && *(_BYTE *)(**(_QWORD **)(a1
                                - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)
                                + 32 * BundleOpInfoForOperand[2]
                                + 32 * (a2 - BundleOpInfoForOperand[2]))
                  + 8) == 15;
}

llvm::ExternalAAWrapperPass *llvm::callDefaultCtor<llvm::ExternalAAWrapperPass>()
{
  llvm::ExternalAAWrapperPass *v0;

  v0 = (llvm::ExternalAAWrapperPass *)operator new();
  return llvm::ExternalAAWrapperPass::ExternalAAWrapperPass(v0);
}

llvm::AAResultsWrapperPass *llvm::callDefaultCtor<llvm::AAResultsWrapperPass>()
{
  llvm::AAResultsWrapperPass *v0;

  v0 = (llvm::AAResultsWrapperPass *)operator new();
  return llvm::AAResultsWrapperPass::AAResultsWrapperPass(v0);
}

void sub_1C6177B4C(llvm::Pass *this)
{
  llvm::AAResults *v2;

  *(_QWORD *)this = &off_1E8134180;
  v2 = (llvm::AAResults *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    llvm::AAResults::~AAResults(v2);
    MEMORY[0x1CAA32FC0]();
  }
  llvm::Pass::~Pass(this);
}

void sub_1C6177B9C(_WORD *a1, char **a2)
{
  uint64_t v4;
  char *v5;

  v4 = sub_1C47AD050((uint64_t)&llvm::DisableBasicAA, 0, 0);
  byte_1ED82C5E0 = 0;
  qword_1ED82C5E8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED82C5F0 = 0;
  llvm::DisableBasicAA = (uint64_t)&unk_1E819E898;
  qword_1ED82C5F8 = (uint64_t)&off_1E819E9A0;
  qword_1ED82C600 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED82C618 = (uint64_t)&qword_1ED82C600;
  llvm::cl::Option::setArgStr(v4, "disable-basic-aa", 0x10uLL);
  word_1ED82C56A = (32 * (*a1 & 3)) | word_1ED82C56A & 0xFF9F;
  v5 = *a2;
  byte_1ED82C5E0 = **a2;
  byte_1ED82C5F1 = 1;
  byte_1ED82C5F0 = *v5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::DisableBasicAA);
}

void sub_1C6177C80()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6177C94(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(result + 8) = a2;
  return result;
}

uint64_t sub_1C6177CA0(uint64_t a1, llvm::Value **a2, llvm::Value **a3)
{
  return llvm::objcarc::ObjCARCAAResult::alias(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_1C6177CA8(uint64_t a1, llvm::Value **a2)
{
  return llvm::objcarc::ObjCARCAAResult::pointsToConstantMemory(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1C6177CB0()
{
  return 7;
}

uint64_t sub_1C6177CB8()
{
  return 63;
}

uint64_t sub_1C6177CC0(uint64_t a1, const llvm::Function *a2)
{
  return llvm::objcarc::ObjCARCAAResult::getModRefBehavior(*(llvm::objcarc::ObjCARCAAResult **)(a1 + 8), a2);
}

uint64_t sub_1C6177CC8(uint64_t a1, const llvm::Function *a2)
{
  return llvm::objcarc::ObjCARCAAResult::getModRefInfo(*(_QWORD *)(a1 + 8), a2);
}

uint64_t sub_1C6177CD0()
{
  return 7;
}

void sub_1C6177CE0()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6177CF4(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(result + 8) = a2;
  return result;
}

uint64_t sub_1C6177D00(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  return llvm::SCEVAAResult::alias(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_1C6177D08()
{
  return 0;
}

uint64_t sub_1C6177D10()
{
  return 7;
}

uint64_t sub_1C6177D18()
{
  return 63;
}

uint64_t sub_1C6177D20()
{
  return 63;
}

uint64_t sub_1C6177D28()
{
  return 7;
}

uint64_t sub_1C6177D30()
{
  return 7;
}

void sub_1C6177D3C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6177D50(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(result + 8) = a2;
  return result;
}

uint64_t sub_1C6177D5C(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  return llvm::CFLAndersAAResult::alias(*(llvm::CFLAndersAAResult **)(a1 + 8), a2, a3);
}

uint64_t sub_1C6177D64()
{
  return 0;
}

uint64_t sub_1C6177D6C()
{
  return 7;
}

uint64_t sub_1C6177D74()
{
  return 63;
}

uint64_t sub_1C6177D7C()
{
  return 63;
}

uint64_t sub_1C6177D84()
{
  return 7;
}

uint64_t sub_1C6177D8C()
{
  return 7;
}

void sub_1C6177D98()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6177DAC(uint64_t result, uint64_t a2)
{
  **(_QWORD **)(result + 8) = a2;
  return result;
}

uint64_t sub_1C6177DB8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  llvm::CFLSteensAAResult *v3;
  uint64_t result;

  if (*a2 == *a3)
    return 3;
  v3 = *(llvm::CFLSteensAAResult **)(a1 + 8);
  if (*(unsigned __int8 *)(*a2 + 16) <= 0x14u && *(unsigned __int8 *)(*a3 + 16) < 0x15u)
    return 1;
  LODWORD(result) = llvm::CFLSteensAAResult::query(v3, a2, a3);
  if (result == 1)
    return 1;
  else
    return result;
}

uint64_t sub_1C6177E14()
{
  return 0;
}

uint64_t sub_1C6177E1C()
{
  return 7;
}

uint64_t sub_1C6177E24()
{
  return 63;
}

uint64_t sub_1C6177E2C()
{
  return 63;
}

uint64_t sub_1C6177E34()
{
  return 7;
}

uint64_t sub_1C6177E3C()
{
  return 7;
}

_QWORD *llvm::AAEvaluator::run@<X0>(llvm::AAEvaluator *a1@<X0>, llvm::Function *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AAManager::Key, (uint64_t)a2);
  llvm::AAEvaluator::runInternal(a1, a2, (llvm::AAResults *)(ResultImpl + 8));
  return llvm::InstCountPass::run(a4);
}

void llvm::AAEvaluator::~AAEvaluator(llvm::AAEvaluator *this)
{
  uint64_t v2;
  llvm::raw_ostream *v3;
  llvm *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  llvm *v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  llvm *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  llvm *v24;
  llvm::raw_ostream *v25;
  llvm::raw_ostream *v26;
  llvm::raw_ostream *v27;
  llvm::raw_ostream *v28;
  llvm::raw_ostream *v29;
  llvm::raw_ostream *v30;
  llvm::raw_ostream *v31;
  llvm::raw_ostream *v32;
  char *v33;
  llvm *v34;
  uint64_t v35;
  llvm::raw_ostream *v36;
  llvm::raw_ostream *v37;
  llvm::raw_ostream *v38;
  llvm *v39;
  llvm::raw_ostream *v40;
  llvm::raw_ostream *v41;
  llvm::raw_ostream *v42;
  llvm *v43;
  llvm::raw_ostream *v44;
  llvm::raw_ostream *v45;
  llvm::raw_ostream *v46;
  llvm *v47;
  llvm::raw_ostream *v48;
  llvm::raw_ostream *v49;
  llvm::raw_ostream *v50;
  llvm *v51;
  llvm::raw_ostream *v52;
  llvm::raw_ostream *v53;
  llvm::raw_ostream *v54;
  llvm *v55;
  llvm::raw_ostream *v56;
  llvm::raw_ostream *v57;
  llvm::raw_ostream *v58;
  llvm *v59;
  llvm::raw_ostream *v60;
  llvm::raw_ostream *v61;
  llvm::raw_ostream *v62;
  llvm *v63;
  llvm::raw_ostream *v64;
  llvm::raw_ostream *v65;
  llvm::raw_ostream *v66;
  llvm *v67;
  llvm::raw_ostream *v68;
  llvm::raw_ostream *v69;
  llvm::raw_ostream *v70;
  llvm *v71;
  llvm::raw_ostream *v72;
  llvm::raw_ostream *v73;
  llvm::raw_ostream *v74;
  llvm::raw_ostream *v75;
  llvm::raw_ostream *v76;
  llvm::raw_ostream *v77;
  llvm::raw_ostream *v78;
  llvm::raw_ostream *v79;
  llvm::raw_ostream *v80;
  llvm::raw_ostream *v81;
  llvm::raw_ostream *v82;
  llvm::raw_ostream *v83;
  llvm::raw_ostream *v84;
  llvm::raw_ostream *v85;
  llvm::raw_ostream *v86;
  llvm::raw_ostream *v87;
  char *v88;

  if (*(_QWORD *)this)
  {
    v2 = vaddvq_s64(vaddq_s64(*(int64x2_t *)((char *)this + 8), *(int64x2_t *)((char *)this + 24)));
    v3 = (llvm::raw_ostream *)llvm::errs(this);
    v4 = sub_1C4816AD8(v3, "===== Alias Analysis Evaluator Report =====\n");
    v5 = (llvm::raw_ostream *)llvm::errs(v4);
    if (v2)
    {
      v6 = sub_1C4816AD8(v5, "  ");
      v7 = llvm::raw_ostream::operator<<(v6, v2);
      v8 = sub_1C4816AD8(v7, " Total Alias Queries Performed\n");
      v9 = (llvm::raw_ostream *)llvm::errs(v8);
      v10 = sub_1C4816AD8(v9, "  ");
      v11 = llvm::raw_ostream::operator<<(v10, *((_QWORD *)this + 1));
      sub_1C4816AD8(v11, " no alias responses ");
      v12 = sub_1C4D95660(*((llvm **)this + 1), v2);
      v13 = (llvm::raw_ostream *)llvm::errs(v12);
      v14 = sub_1C4816AD8(v13, "  ");
      v15 = llvm::raw_ostream::operator<<(v14, *((_QWORD *)this + 2));
      sub_1C4816AD8(v15, " may alias responses ");
      v16 = sub_1C4D95660(*((llvm **)this + 2), v2);
      v17 = (llvm::raw_ostream *)llvm::errs(v16);
      v18 = sub_1C4816AD8(v17, "  ");
      v19 = llvm::raw_ostream::operator<<(v18, *((_QWORD *)this + 3));
      sub_1C4816AD8(v19, " partial alias responses ");
      v20 = sub_1C4D95660(*((llvm **)this + 3), v2);
      v21 = (llvm::raw_ostream *)llvm::errs(v20);
      v22 = sub_1C4816AD8(v21, "  ");
      v23 = llvm::raw_ostream::operator<<(v22, *((_QWORD *)this + 4));
      sub_1C4816AD8(v23, " must alias responses ");
      v24 = sub_1C4D95660(*((llvm **)this + 4), v2);
      v25 = (llvm::raw_ostream *)llvm::errs(v24);
      v26 = sub_1C4816AD8(v25, "  Alias Analysis Evaluator Pointer Alias Summary: ");
      v27 = llvm::raw_ostream::operator<<(v26, 100 * *((_QWORD *)this + 1) / v2);
      v28 = sub_1C4816AD8(v27, "%/");
      v29 = llvm::raw_ostream::operator<<(v28, 100 * *((_QWORD *)this + 2) / v2);
      v30 = sub_1C4816AD8(v29, "%/");
      v31 = llvm::raw_ostream::operator<<(v30, 100 * *((_QWORD *)this + 3) / v2);
      v32 = sub_1C4816AD8(v31, "%/");
      v5 = llvm::raw_ostream::operator<<(v32, 100 * *((_QWORD *)this + 4) / v2);
      v33 = "%\n";
    }
    else
    {
      v33 = "  Alias Analysis Evaluator Summary: No pointers!\n";
    }
    v34 = sub_1C4816AD8(v5, v33);
    v35 = vaddvq_s64(vaddq_s64(vaddq_s64(*(int64x2_t *)((char *)this + 40), *(int64x2_t *)((char *)this + 72)), vaddq_s64(*(int64x2_t *)((char *)this + 56), *(int64x2_t *)((char *)this + 88))));
    v36 = (llvm::raw_ostream *)llvm::errs(v34);
    if (v35)
    {
      v37 = sub_1C4816AD8(v36, "  ");
      v38 = llvm::raw_ostream::operator<<(v37, v35);
      v39 = sub_1C4816AD8(v38, " Total ModRef Queries Performed\n");
      v40 = (llvm::raw_ostream *)llvm::errs(v39);
      v41 = sub_1C4816AD8(v40, "  ");
      v42 = llvm::raw_ostream::operator<<(v41, *((_QWORD *)this + 5));
      sub_1C4816AD8(v42, " no mod/ref responses ");
      v43 = sub_1C4D95660(*((llvm **)this + 5), v35);
      v44 = (llvm::raw_ostream *)llvm::errs(v43);
      v45 = sub_1C4816AD8(v44, "  ");
      v46 = llvm::raw_ostream::operator<<(v45, *((_QWORD *)this + 6));
      sub_1C4816AD8(v46, " mod responses ");
      v47 = sub_1C4D95660(*((llvm **)this + 6), v35);
      v48 = (llvm::raw_ostream *)llvm::errs(v47);
      v49 = sub_1C4816AD8(v48, "  ");
      v50 = llvm::raw_ostream::operator<<(v49, *((_QWORD *)this + 7));
      sub_1C4816AD8(v50, " ref responses ");
      v51 = sub_1C4D95660(*((llvm **)this + 7), v35);
      v52 = (llvm::raw_ostream *)llvm::errs(v51);
      v53 = sub_1C4816AD8(v52, "  ");
      v54 = llvm::raw_ostream::operator<<(v53, *((_QWORD *)this + 8));
      sub_1C4816AD8(v54, " mod & ref responses ");
      v55 = sub_1C4D95660(*((llvm **)this + 8), v35);
      v56 = (llvm::raw_ostream *)llvm::errs(v55);
      v57 = sub_1C4816AD8(v56, "  ");
      v58 = llvm::raw_ostream::operator<<(v57, *((_QWORD *)this + 9));
      sub_1C4816AD8(v58, " must responses ");
      v59 = sub_1C4D95660(*((llvm **)this + 9), v35);
      v60 = (llvm::raw_ostream *)llvm::errs(v59);
      v61 = sub_1C4816AD8(v60, "  ");
      v62 = llvm::raw_ostream::operator<<(v61, *((_QWORD *)this + 11));
      sub_1C4816AD8(v62, " must mod responses ");
      v63 = sub_1C4D95660(*((llvm **)this + 11), v35);
      v64 = (llvm::raw_ostream *)llvm::errs(v63);
      v65 = sub_1C4816AD8(v64, "  ");
      v66 = llvm::raw_ostream::operator<<(v65, *((_QWORD *)this + 10));
      sub_1C4816AD8(v66, " must ref responses ");
      v67 = sub_1C4D95660(*((llvm **)this + 10), v35);
      v68 = (llvm::raw_ostream *)llvm::errs(v67);
      v69 = sub_1C4816AD8(v68, "  ");
      v70 = llvm::raw_ostream::operator<<(v69, *((_QWORD *)this + 12));
      sub_1C4816AD8(v70, " must mod & ref responses ");
      v71 = sub_1C4D95660(*((llvm **)this + 12), v35);
      v72 = (llvm::raw_ostream *)llvm::errs(v71);
      v73 = sub_1C4816AD8(v72, "  Alias Analysis Evaluator Mod/Ref Summary: ");
      v74 = llvm::raw_ostream::operator<<(v73, 100 * *((_QWORD *)this + 5) / v35);
      v75 = sub_1C4816AD8(v74, "%/");
      v76 = llvm::raw_ostream::operator<<(v75, 100 * *((_QWORD *)this + 6) / v35);
      v77 = sub_1C4816AD8(v76, "%/");
      v78 = llvm::raw_ostream::operator<<(v77, 100 * *((_QWORD *)this + 7) / v35);
      v79 = sub_1C4816AD8(v78, "%/");
      v80 = llvm::raw_ostream::operator<<(v79, 100 * *((_QWORD *)this + 8) / v35);
      v81 = sub_1C4816AD8(v80, "%/");
      v82 = llvm::raw_ostream::operator<<(v81, 100 * *((_QWORD *)this + 9) / v35);
      v83 = sub_1C4816AD8(v82, "%/");
      v84 = llvm::raw_ostream::operator<<(v83, 100 * *((_QWORD *)this + 10) / v35);
      v85 = sub_1C4816AD8(v84, "%/");
      v86 = llvm::raw_ostream::operator<<(v85, 100 * *((_QWORD *)this + 11) / v35);
      v87 = sub_1C4816AD8(v86, "%/");
      v36 = llvm::raw_ostream::operator<<(v87, 100 * *((_QWORD *)this + 12) / v35);
      v88 = "%\n";
    }
    else
    {
      v88 = "  Alias Analysis Mod/Ref Evaluator Summary: no mod/ref!\n";
    }
    sub_1C4816AD8(v36, v88);
  }
}

uint64_t llvm::createAAEvalPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C6178344(v1);
}

uint64_t llvm::callDefaultCtor<llvm::AAEvalLegacyPass>()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C6178344(v0);
}

uint64_t sub_1C6178344(uint64_t a1)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &llvm::AAEvalLegacyPass::ID;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8134520;
  *(_QWORD *)(a1 + 32) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  v2 = atomic_load(&qword_1ED82C628);
  if (v2 != -1)
  {
    v6[0] = sub_1C4D957C8;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82C628, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C61783E0(llvm::Pass *a1)
{
  sub_1C6178558(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6178404(uint64_t a1)
{
  uint64_t v2;
  llvm::AAEvaluator *v3;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_QWORD *)(v2 + 96) = 0;
  v3 = *(llvm::AAEvaluator **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v2;
  if (v3)
  {
    llvm::AAEvaluator::~AAEvaluator(v3);
    MEMORY[0x1CAA32FC0]();
  }
  return 0;
}

uint64_t sub_1C617847C(uint64_t a1)
{
  llvm::AAEvaluator *v2;

  v2 = *(llvm::AAEvaluator **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
  {
    llvm::AAEvaluator::~AAEvaluator(v2);
    MEMORY[0x1CAA32FC0]();
  }
  return 0;
}

llvm::AnalysisUsage *sub_1C61784BC(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage *result;

  result = llvm::AnalysisUsage::addRequiredID(this, llvm::AAResultsWrapperPass::ID);
  *((_BYTE *)this + 160) = 1;
  return result;
}

uint64_t sub_1C61784F0(uint64_t a1, llvm::Function *a2)
{
  llvm::AAEvaluator *v3;
  char **v4;
  char *v5;
  uint64_t v6;

  v3 = *(llvm::AAEvaluator **)(a1 + 32);
  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::AAResultsWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::AAResultsWrapperPass::ID);
  llvm::AAEvaluator::runInternal(v3, a2, *(llvm::AAResults **)(v6 + 32));
  return 0;
}

void sub_1C6178558(llvm::Pass *this)
{
  llvm::AAEvaluator *v2;

  *(_QWORD *)this = &off_1E8134520;
  v2 = (llvm::AAEvaluator *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    llvm::AAEvaluator::~AAEvaluator(v2);
    MEMORY[0x1CAA32FC0]();
  }
  llvm::Pass::~Pass(this);
}

void sub_1C61785AC(_WORD *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)&qword_1ED7EF358, 0, 0);
  byte_1ED7EF3D8 = 0;
  qword_1ED7EF3E0 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7EF3E8 = 0;
  qword_1ED7EF358 = (uint64_t)&unk_1E819E898;
  qword_1ED7EF3F0 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EF3F8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EF410 = (uint64_t)&qword_1ED7EF3F8;
  llvm::cl::Option::setArgStr(v2, "print-all-alias-modref-info", 0x1BuLL);
  word_1ED7EF362 = (32 * (*a1 & 3)) | word_1ED7EF362 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EF358);
}

llvm::cl::Option *sub_1C6178658(llvm::cl::Option *a1, char *a2, _WORD *a3)
{
  uint64_t v6;
  size_t v7;

  v6 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_BYTE *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v6 + 144) = 0;
  *(_QWORD *)v6 = &unk_1E819E898;
  *(_QWORD *)(v6 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v6 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v6 + 184) = v6 + 160;
  v7 = strlen(a2);
  llvm::cl::Option::setArgStr((uint64_t)a1, (unsigned __int8 *)a2, v7);
  *((_WORD *)a1 + 5) = (32 * (*a3 & 3)) | *((_WORD *)a1 + 5) & 0xFF9F;
  llvm::cl::Option::addArgument(a1);
  return a1;
}

void sub_1C6178718(_WORD *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)&qword_1ED7EF4D8, 0, 0);
  byte_1ED7EF558 = 0;
  qword_1ED7EF560 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7EF568 = 0;
  qword_1ED7EF4D8 = (uint64_t)&unk_1E819E898;
  qword_1ED7EF570 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EF578 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EF590 = (uint64_t)&qword_1ED7EF578;
  llvm::cl::Option::setArgStr(v2, "print-may-aliases", 0x11uLL);
  word_1ED7EF4E2 = (32 * (*a1 & 3)) | word_1ED7EF4E2 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EF4D8);
}

void sub_1C61787C4(_WORD *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)&qword_1ED7EF598, 0, 0);
  byte_1ED7EF618 = 0;
  qword_1ED7EF620 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7EF628 = 0;
  qword_1ED7EF598 = (uint64_t)&unk_1E819E898;
  qword_1ED7EF630 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EF638 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EF650 = (uint64_t)&qword_1ED7EF638;
  llvm::cl::Option::setArgStr(v2, "print-partial-aliases", 0x15uLL);
  word_1ED7EF5A2 = (32 * (*a1 & 3)) | word_1ED7EF5A2 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EF598);
}

void sub_1C6178870(_WORD *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)&qword_1ED7EF658, 0, 0);
  byte_1ED7EF6D8 = 0;
  qword_1ED7EF6E0 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7EF6E8 = 0;
  qword_1ED7EF658 = (uint64_t)&unk_1E819E898;
  qword_1ED7EF6F0 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EF6F8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EF710 = (uint64_t)&qword_1ED7EF6F8;
  llvm::cl::Option::setArgStr(v2, "print-must-aliases", 0x12uLL);
  word_1ED7EF662 = (32 * (*a1 & 3)) | word_1ED7EF662 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EF658);
}

void sub_1C617891C(_WORD *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)&qword_1ED7EF718, 0, 0);
  byte_1ED7EF798 = 0;
  qword_1ED7EF7A0 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7EF7A8 = 0;
  qword_1ED7EF718 = (uint64_t)&unk_1E819E898;
  qword_1ED7EF7B0 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EF7B8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EF7D0 = (uint64_t)&qword_1ED7EF7B8;
  llvm::cl::Option::setArgStr(v2, "print-no-modref", 0xFuLL);
  word_1ED7EF722 = (32 * (*a1 & 3)) | word_1ED7EF722 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EF718);
}

void sub_1C61789C8(_WORD *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)&qword_1ED7EF958, 0, 0);
  byte_1ED7EF9D8 = 0;
  qword_1ED7EF9E0 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7EF9E8 = 0;
  qword_1ED7EF958 = (uint64_t)&unk_1E819E898;
  qword_1ED7EF9F0 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EF9F8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EFA10 = (uint64_t)&qword_1ED7EF9F8;
  llvm::cl::Option::setArgStr(v2, "print-modref", 0xCuLL);
  word_1ED7EF962 = (32 * (*a1 & 3)) | word_1ED7EF962 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EF958);
}

void sub_1C6178A74(_WORD *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)&qword_1ED7EFA18, 0, 0);
  byte_1ED7EFA98 = 0;
  qword_1ED7EFAA0 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7EFAA8 = 0;
  qword_1ED7EFA18 = (uint64_t)&unk_1E819E898;
  qword_1ED7EFAB0 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EFAB8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EFAD0 = (uint64_t)&qword_1ED7EFAB8;
  llvm::cl::Option::setArgStr(v2, "print-must", 0xAuLL);
  word_1ED7EFA22 = (32 * (*a1 & 3)) | word_1ED7EFA22 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EFA18);
}

void sub_1C6178B20(_WORD *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)&qword_1ED7EFD18, 0, 0);
  byte_1ED7EFD98 = 0;
  qword_1ED7EFDA0 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7EFDA8 = 0;
  qword_1ED7EFD18 = (uint64_t)&unk_1E819E898;
  qword_1ED7EFDB0 = (uint64_t)&off_1E819E9A0;
  qword_1ED7EFDB8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7EFDD0 = (uint64_t)&qword_1ED7EFDB8;
  llvm::cl::Option::setArgStr(v2, "evaluate-aa-metadata", 0x14uLL);
  word_1ED7EFD22 = (32 * (*a1 & 3)) | word_1ED7EFD22 & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EFD18);
}

uint64_t sub_1C6178BCC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C6178C5C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, a3[1], &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6178D44(a2, a3, v10);
    v7 = (_QWORD *)result;
    *(_OWORD *)result = *(_OWORD *)a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_1C6178C5C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ((a4 >> 4) ^ (a4 >> 9) | ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32))
       + ~((unint64_t)((a4 >> 4) ^ (a4 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (_QWORD *)(a1 + 16 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -4096 || v12 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -8192;
        if (v18 && v11 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (_QWORD *)(a1 + 16 * (v20 & v8));
        v11 = *v10;
        v12 = v10[1];
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

_QWORD *sub_1C6178D44(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_1C4D95860(a1, v6);
    v8 = 0;
    sub_1C6178C5C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, a2[1], &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096 || a3[1] != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C6178E00(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
    memset_pattern16(*(void **)a1, &unk_1C85F2160, 16 * v6);
  while (a2 != a3)
  {
    v7 = *a2;
    v8 = a2[1];
    if ((*a2 != -4096 || v8 != -4096) && (v7 != -8192 || v8 != -8192))
    {
      v10 = 0;
      sub_1C6178C5C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v7, v8, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(a1 + 8);
    }
    a2 += 2;
  }
}

uint64_t sub_1C6178EC0(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 8 * v6;
    do
    {
      *v7++ = -4096;
      v8 -= 8;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v9 = 0;
      result = sub_1C4D959A4((uint64_t *)v5, a2, &v9);
      *v9 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

uint64_t llvm::cflaa::getAttrUnknown(llvm::cflaa *this)
{
  return 2;
}

uint64_t llvm::cflaa::getAttrCaller(llvm::cflaa *this)
{
  return 8;
}

BOOL llvm::cflaa::hasUnknownOrCallerAttr(char a1)
{
  return (a1 & 0xA) != 0;
}

uint64_t llvm::cflaa::getAttrEscaped(llvm::cflaa *this)
{
  return 1;
}

BOOL llvm::cflaa::isGlobalOrArgAttr(int a1)
{
  return (a1 & 0xFFFFFFF4) != 0;
}

uint64_t llvm::cflaa::getExternallyVisibleAttrs(char a1)
{
  return a1 & 7;
}

uint64_t sub_1C6178FA4(uint64_t *a1, uint64_t a2)
{
  llvm::ValueHandleBase *v3;
  uint64_t result;

  v3 = (llvm::ValueHandleBase *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    result = sub_1C4D99A2C(a1, a2);
  }
  else
  {
    *(_QWORD *)v3 = 4;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2)
      llvm::ValueHandleBase::AddToUseList(v3);
    result = (uint64_t)v3 + 24;
  }
  a1[1] = result;
  return result;
}

llvm::AliasSet *llvm::AliasSetTracker::findAliasSetForUnknownInst(llvm::AliasSetTracker *this, llvm::Instruction *a2)
{
  char *v2;
  llvm::AliasSet *v3;
  llvm::AliasSet *v6;
  char *v7;

  v2 = (char *)this + 8;
  v3 = (llvm::AliasSet *)*((_QWORD *)this + 2);
  if (v3 == (llvm::AliasSetTracker *)((char *)this + 8))
    return 0;
  v6 = 0;
  do
  {
    v7 = (char *)*((_QWORD *)v3 + 1);
    if (!*((_QWORD *)v3 + 4) && llvm::AliasSet::aliasesUnknownInst(v3, a2, *(llvm::AAResults **)this))
    {
      if (v6)
        llvm::AliasSet::mergeSetIn(v6, v3, this);
      else
        v6 = v3;
    }
    v3 = (llvm::AliasSet *)v7;
  }
  while (v7 != v2);
  return v6;
}

void llvm::AliasSetTracker::add(llvm::AliasSetTracker *this, llvm::BasicBlock *a2)
{
  char *v2;
  char *v3;
  llvm::Instruction *v5;

  v2 = (char *)a2 + 40;
  v3 = (char *)*((_QWORD *)a2 + 6);
  if (v3 != (char *)a2 + 40)
  {
    do
    {
      if (v3)
        v5 = (llvm::Instruction *)(v3 - 24);
      else
        v5 = 0;
      llvm::AliasSetTracker::add(this, v5);
      v3 = (char *)*((_QWORD *)v3 + 1);
    }
    while (v3 != v2);
  }
}

uint64_t llvm::AliasSetTracker::deleteValue(llvm::AliasSetTracker *this, llvm::Value *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t result;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v4 = (char *)this + 24;
  v3 = *((_QWORD *)this + 3);
  v9 = 0;
  result = sub_1C6179BF0(v3, *((_DWORD *)v4 + 4), (uint64_t)a2, &v9);
  v6 = *((_DWORD *)v4 + 4);
  if ((_DWORD)result)
    v7 = v9;
  else
    v7 = *(_QWORD *)v4 + 48 * v6;
  if (*(_QWORD *)v4 + 48 * v6 != v7)
  {
    v8 = *(_QWORD **)(v7 + 40);
    sub_1C4D97660((uint64_t)v8, this);
    sub_1C4D96ECC(v8);
  }
  return result;
}

int32x2_t sub_1C6179188(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int32x2_t *v18;
  llvm::AliasSetTracker *v19;
  uint64_t v20;
  llvm::AliasSet *v21;
  int v22;

  v22 = *((_DWORD *)v21 + 16);
  if ((v22 & 0x40000000) != 0)
  {
    --*((_DWORD *)v19 + 12);
    v22 = *((_DWORD *)v21 + 16);
    --*((_DWORD *)v21 + 17);
  }
  *((_DWORD *)v21 + 16) = v22 & 0xF8000000 | (v22 - 1) & 0x7FFFFFF;
  if (((v22 - 1) & 0x7FFFFFF) == 0)
    llvm::AliasSetTracker::removeAliasSet(v19, v21);
  return sub_1C61791EC(v18, v20);
}

int32x2_t sub_1C61791EC(int32x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  int32x2_t result;
  uint64_t v7[2];
  uint64_t v8;
  uint64_t v9;

  v7[1] = 0;
  v8 = -8192;
  v7[0] = 2;
  v9 = 0;
  sub_1C4D98DE0((unint64_t *)(a2 + 8), v7);
  v4 = v8;
  *(_QWORD *)(a2 + 32) = v9;
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList(v7);
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

_QWORD *llvm::AliasSetTracker::copyValue(llvm::AliasSetTracker *this, llvm::Value *a2, llvm::Value *a3)
{
  _QWORD *result;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13[2];

  *(_QWORD *)&v13[0] = 0;
  result = (_QWORD *)sub_1C6179BF0(*((_QWORD *)this + 3), *((_DWORD *)this + 10), (uint64_t)a2, v13);
  if ((_DWORD)result)
    v7 = *(_QWORD *)&v13[0] == *((_QWORD *)this + 3) + 48 * *((unsigned int *)this + 10);
  else
    v7 = 1;
  if (!v7)
  {
    result = sub_1C4D972CC((uint64_t)this, (_QWORD ***)a3);
    if (!result[3])
    {
      v8 = result;
      *(_QWORD *)&v13[0] = 0;
      if ((sub_1C6179BF0(*((_QWORD *)this + 3), *((_DWORD *)this + 10), (uint64_t)a2, v13) & 1) != 0)
        v9 = *(_QWORD *)&v13[0];
      else
        v9 = *((_QWORD *)this + 3) + 48 * *((unsigned int *)this + 10);
      v10 = sub_1C4D97660(*(_QWORD *)(v9 + 40), this);
      v11 = *(_QWORD *)(v9 + 40);
      v12 = *(_QWORD *)(v11 + 32);
      sub_1C4D965B4(v11, v13);
      return (_QWORD *)llvm::AliasSet::addPointer(v10, (uint64_t)this, v8, v12, v13, 1, 1);
    }
  }
  return result;
}

uint64_t llvm::AliasSetTracker::mergeAllAliasSets(llvm::AliasSetTracker *this)
{
  char *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  llvm::AliasSet **v8;
  llvm::AliasSet *v9;
  llvm::AliasSet *v10;
  int v11;
  uint64_t v12;
  void *__p;
  uint64_t *v15;
  unint64_t v16;

  __p = 0;
  v15 = 0;
  v16 = 0;
  sub_1C4D98200((uint64_t)&__p, dword_1ED82C6B0);
  v2 = (char *)this + 8;
  v3 = *((_QWORD *)this + 2);
  v4 = v15;
  while ((char *)v3 != v2)
  {
    if ((unint64_t)v4 >= v16)
      v4 = sub_1C4ABDC28(&__p, v3);
    else
      *v4++ = v3;
    v15 = v4;
    v3 = *(_QWORD *)(v3 + 8);
  }
  v5 = operator new();
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 24) = v5 + 16;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_DWORD *)(v5 + 64) &= 0x80000000;
  *(_DWORD *)(v5 + 68) = 0;
  v6 = *((_QWORD *)this + 1);
  *(_QWORD *)v5 = v6;
  *(_QWORD *)(v5 + 8) = v2;
  *(_QWORD *)(v6 + 8) = v5;
  *((_QWORD *)this + 1) = v5;
  *((_QWORD *)this + 7) = v5;
  *(_DWORD *)(v5 + 64) |= 0x78000000u;
  v7 = __p;
  if (__p == v4)
  {
    v12 = v5;
  }
  else
  {
    v8 = (llvm::AliasSet **)__p;
    do
    {
      v9 = (llvm::AliasSet *)*((_QWORD *)*v8 + 4);
      v10 = (llvm::AliasSet *)*((_QWORD *)this + 7);
      if (v9)
      {
        *((_QWORD *)*v8 + 4) = v10;
        *((_DWORD *)v10 + 16) = *((_DWORD *)v10 + 16) & 0xF8000000 | (*((_DWORD *)v10 + 16) + 1) & 0x7FFFFFF;
        v11 = *((_DWORD *)v9 + 16);
        *((_DWORD *)v9 + 16) = v11 & 0xF8000000 | (v11 - 1) & 0x7FFFFFF;
        if (((v11 - 1) & 0x7FFFFFF) == 0)
          llvm::AliasSetTracker::removeAliasSet(this, v9);
      }
      else
      {
        llvm::AliasSet::mergeSetIn(v10, *v8, this);
      }
      ++v8;
    }
    while (v8 != (llvm::AliasSet **)v4);
    v12 = *((_QWORD *)this + 7);
  }
  if (v7)
    operator delete(v7);
  return v12;
}

llvm::raw_ostream *llvm::AliasSet::print(llvm::AliasSet *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  char *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  uint64_t i;
  llvm::Value *v12;
  llvm::raw_ostream *v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  char *v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::Value *v23;
  uint64_t v25;

  v4 = sub_1C4816AD8(a2, "  AliasSet[");
  v5 = llvm::raw_ostream::operator<<(v4, (unint64_t)this);
  v6 = sub_1C4816AD8(v5, ", ");
  v7 = llvm::raw_ostream::operator<<(v6, *((_DWORD *)this + 16) & 0x7FFFFFF);
  sub_1C4816AD8(v7, "] ");
  if ((*((_DWORD *)this + 16) & 0x40000000) != 0)
    v8 = "may";
  else
    v8 = "must";
  v9 = sub_1C4816AD8(a2, v8);
  sub_1C4816AD8(v9, " alias, ");
  sub_1C4816AD8(a2, off_1E8134678[((unint64_t)*((unsigned int *)this + 16) >> 28) & 3]);
  if (*((_QWORD *)this + 4))
  {
    v10 = sub_1C4816AD8(a2, " forwarding to ");
    llvm::raw_ostream::operator<<(v10, *((_QWORD *)this + 4));
  }
  if (*((_QWORD *)this + 2))
  {
    sub_1C4816AD8(a2, "Pointers: ");
    for (i = *((_QWORD *)this + 2); i; i = *(_QWORD *)(i + 16))
    {
      if (i != *((_QWORD *)this + 2))
        sub_1C4816AD8(a2, ", ");
      v12 = *(llvm::Value **)i;
      v13 = sub_1C4816AD8(a2, "(");
      llvm::Value::printAsOperand(v12, v13, 1, 0);
      v14 = *(_QWORD *)(i + 32);
      v15 = a2;
      if (v14 == -1)
      {
        v16 = ", unknown before-or-after)";
      }
      else if (v14 == -2)
      {
        v16 = ", unknown after)";
      }
      else
      {
        v17 = sub_1C4816AD8(a2, ", ");
        v25 = *(_QWORD *)(i + 32);
        llvm::LocationSize::print((llvm::LocationSize *)&v25, v17);
        v15 = v17;
        v16 = ")";
      }
      sub_1C4816AD8(v15, v16);
    }
  }
  if (*((_QWORD *)this + 5) != *((_QWORD *)this + 6))
  {
    v18 = sub_1C4816AD8(a2, "\n    ");
    v19 = llvm::raw_ostream::operator<<(v18, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3));
    sub_1C4816AD8(v19, " Unknown instructions: ");
    v20 = -1431655765 * ((*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3);
    if ((_DWORD)v20)
    {
      v21 = 0;
      v22 = 24 * v20;
      do
      {
        if (v21)
          sub_1C4816AD8(a2, ", ");
        v23 = *(llvm::Value **)(*((_QWORD *)this + 5) + v21 + 16);
        if (v23)
        {
          if ((*((_BYTE *)v23 + 23) & 0x10) != 0)
            llvm::Value::printAsOperand(v23, a2, 1, 0);
          else
            llvm::Value::print(v23, a2, 0);
        }
        v21 += 24;
      }
      while (v22 != v21);
    }
  }
  return sub_1C4816AD8(a2, "\n");
}

llvm::raw_ostream *llvm::AliasSetTracker::print(llvm::AliasSetTracker *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v4;
  llvm::AliasSet *v5;
  unint64_t v6;
  llvm::AliasSet *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  llvm::AliasSet *i;

  v4 = sub_1C4816AD8(a2, "Alias Set Tracker: ");
  v5 = (llvm::AliasSetTracker *)((char *)this + 8);
  v6 = -1;
  v7 = (llvm::AliasSetTracker *)((char *)this + 8);
  do
  {
    v7 = (llvm::AliasSet *)*((_QWORD *)v7 + 1);
    ++v6;
  }
  while (v7 != v5);
  llvm::raw_ostream::operator<<(v4, v6);
  if (*((_QWORD *)this + 7))
    sub_1C4816AD8(a2, " (Saturated)");
  v8 = sub_1C4816AD8(a2, " alias sets for ");
  v9 = llvm::raw_ostream::operator<<(v8, *((unsigned int *)this + 8));
  sub_1C4816AD8(v9, " pointer values.\n");
  for (i = (llvm::AliasSet *)*((_QWORD *)this + 2); i != v5; i = (llvm::AliasSet *)*((_QWORD *)i + 1))
    llvm::AliasSet::print(i, a2);
  return sub_1C4816AD8(a2, "\n");
}

llvm::raw_ostream *llvm::AliasSet::dump(llvm::AliasSet *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::AliasSet::print(this, v2);
}

llvm::raw_ostream *llvm::AliasSetTracker::dump(llvm::AliasSetTracker *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::AliasSetTracker::print(this, v2);
}

uint64_t llvm::AliasSetTracker::ASTCallbackVH::deleted(llvm::AliasSetTracker **this)
{
  return llvm::AliasSetTracker::deleteValue(this[4], this[3]);
}

_QWORD *llvm::AliasSetTracker::ASTCallbackVH::allUsesReplacedWith(llvm::AliasSetTracker **this, llvm::Value *a2)
{
  return llvm::AliasSetTracker::copyValue(this[4], this[3], a2);
}

_QWORD *llvm::AliasSetsPrinterPass::AliasSetsPrinterPass(_QWORD *this, llvm::raw_ostream *a2)
{
  *this = a2;
  return this;
}

uint64_t sub_1C61798D0(uint64_t a1, char *a2, _WORD *a3, int **a4, _OWORD *a5)
{
  uint64_t v10;
  size_t v11;
  int v12;

  v10 = sub_1C47AD050(a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7F952A8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E3B0;
  *(_QWORD *)(v10 + 152) = &unk_1E819E2C0;
  *(_QWORD *)(v10 + 160) = &off_1E7F95260;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  v12 = **a4;
  *(_DWORD *)(a1 + 128) = v12;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v12;
  *(_OWORD *)(a1 + 32) = *a5;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

unint64_t sub_1C61799C0(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_QWORD *)(result + 8);
  v5 = a2 + v4 - a4;
  v6 = v4;
  if (v5 < a3)
  {
    v7 = 0;
    do
    {
      v8 = (unint64_t *)(v4 + v7);
      *v8 = 4;
      v8[1] = 0;
      v9 = *(_QWORD *)(v5 + v7 + 16);
      v8[2] = v9;
      if (v9 != -8192 && v9 != -4096 && v9 != 0)
      {
        v11 = *(_QWORD *)(v5 + v7) & 0xFFFFFFFFFFFFFFF8;
        v8[1] = *(_QWORD *)v11;
        *(_QWORD *)v11 = v8;
        *v8 = v11 | 4;
        v12 = (uint64_t *)v8[1];
        if (v12)
          *v12 = *v12 & 7 | (v4 + 8 + v7);
      }
      v7 += 24;
    }
    while (v5 + v7 < a3);
    v6 = v4 + v7;
  }
  *(_QWORD *)(result + 8) = v6;
  if (v4 != a4)
  {
    v13 = (unint64_t *)(v4 - 24);
    v14 = 8 * ((v4 - a4) >> 3);
    v15 = a2 - 24;
    do
    {
      result = sub_1C4D98DE0(v13, (uint64_t *)(v15 + v14));
      v13 -= 3;
      v14 -= 24;
    }
    while (v14);
  }
  return result;
}

uint64_t sub_1C6179ABC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  while (v2 != v3)
  {
    v4 = *(v2 - 1);
    v2 -= 3;
    *(_QWORD *)(a1 + 16) = v2;
    if (v4 != -8192 && v4 != -4096 && v4 != 0)
    {
      llvm::ValueHandleBase::RemoveFromUseList(v2);
      v2 = *(_QWORD **)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_1C6179B20(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  if (v2 != *result)
  {
    v5 = 0;
    do
    {
      v6 = v4 + v5;
      *(_QWORD *)(v4 + v5 - 24) = 4;
      v7 = (unint64_t *)(v4 + v5 - 24);
      v8 = *(_QWORD *)(v2 + v5 - 8);
      *(_QWORD *)(v6 - 16) = 0;
      *(_QWORD *)(v6 - 8) = v8;
      if (v8 != -8192 && v8 != -4096 && v8 != 0)
      {
        v10 = *(_QWORD *)(v2 + v5 - 24) & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v6 - 16) = *(_QWORD *)v10;
        *(_QWORD *)v10 = v7;
        *v7 = v10 | 4;
        v11 = *(uint64_t **)(v6 - 16);
        if (v11)
          *v11 = *v11 & 7 | (v4 - 16 + v5);
      }
      v5 -= 24;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  v12 = *result;
  *result = v4;
  a2[1] = v12;
  v13 = result[1];
  result[1] = a2[2];
  a2[2] = v13;
  v14 = result[2];
  result[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C6179BF0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = a1 + 48 * v5;
    v7 = *(_QWORD *)(v6 + 24);
    if (v7 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = a1 + 48 * (v13 & v4);
        v7 = *(_QWORD *)(v6 + 24);
        v8 = 1;
        if (v7 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

double llvm::getKnowledgeFromUse@<D0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v8;
  double result;
  uint64_t v10;
  _DWORD *v11;
  __int128 v12;
  uint64_t v13;

  v8 = sub_1C4D9A91C(a1);
  if (!v8)
    goto LABEL_9;
  llvm::getKnowledgeFromBundle(a1[3], (uint64_t)v8, (uint64_t)&v12);
  if (a3)
  {
    v10 = 4 * a3;
    v11 = a2;
    while (*v11 != (_DWORD)v12)
    {
      ++v11;
      v10 -= 4;
      if (!v10)
      {
        v11 = &a2[a3];
        break;
      }
    }
  }
  else
  {
    v11 = a2;
  }
  if (a3 != v11 - a2)
  {
    result = *(double *)&v12;
    *(_OWORD *)a4 = v12;
    *(_QWORD *)(a4 + 16) = v13;
  }
  else
  {
LABEL_9:
    *(_DWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
  }
  return result;
}

uint64_t sub_1C6179D3C(uint64_t *a1, _DWORD *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = sub_1C6179DA8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6179F68((uint64_t)a1, a2, v7);
    *(_QWORD *)v5 = *(_QWORD *)a2;
    *(_DWORD *)(v5 + 8) = a2[2];
    *(_DWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
  }
  return v5;
}

uint64_t sub_1C6179DA8(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v8 = *a1;
    v9 = sub_1C6179E94(a2);
    v10 = v4 - 1;
    v11 = a2[2];
    v12 = v9 & (v4 - 1);
    v5 = (uint64_t *)(v8 + 40 * v12);
    v13 = *v5;
    v14 = *((_DWORD *)v5 + 2);
    if (*(_QWORD *)a2 == *v5 && v11 == v14)
    {
      result = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      result = 1;
      while (v13 != -4096 || v14 != 82)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v14 == 83;
        if (v18 && v13 == -8192)
          v16 = v5;
        v20 = v12 + v17++;
        v12 = v20 & v10;
        v5 = (uint64_t *)(v8 + 40 * (v20 & v10));
        v13 = *v5;
        v14 = *((_DWORD *)v5 + 2);
        if (*(_QWORD *)a2 == *v5 && v11 == v14)
          goto LABEL_3;
      }
      result = 0;
      if (v16)
        v5 = v16;
    }
  }
  else
  {
    v5 = 0;
    result = 0;
  }
LABEL_3:
  *a3 = v5;
  return result;
}

uint64_t sub_1C6179E94(_DWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v7;

  v1 = (*a1 >> 4) ^ (*a1 >> 9);
  v7 = a1[2];
  v2 = sub_1C6179F0C(&v7);
  v3 = (v2 | (unint64_t)(v1 << 32)) + ~(v2 << 32);
  v4 = 9 * (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) ^ (((v3 ^ (v3 >> 22)) + ~((v3 ^ (v3 >> 22)) << 13)) >> 8));
  v5 = (v4 ^ (v4 >> 15)) + ~((v4 ^ (v4 >> 15)) << 27);
  return (v5 >> 31) ^ v5;
}

unint64_t sub_1C6179F0C(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = sub_1C4D9B584();
  v3 = *a1;
  v4 = (8 * v3) | 4;
  v5 = v2 ^ v3;
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ ((0x9DDFEA08EB382D69 * (v4 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v5 ^ ((0x9DDFEA08EB382D69 * (v4 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ v5)))) >> 47));
}

uint64_t sub_1C6179F68(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
    goto LABEL_8;
  }
  if (v6 + ~v5 - *(_DWORD *)(a1 + 12) <= v6 >> 3)
  {
LABEL_8:
    sub_1C4D9B5FC(a1, v6);
    v8 = 0;
    sub_1C6179DA8((uint64_t *)a1, a2, &v8);
    a3 = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 != -4096 || *(_DWORD *)(a3 + 8) != 82)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C617A020(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  int v11;
  int v12;
  _QWORD *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 40 * v6;
    do
    {
      *v7 = xmmword_1C85F2170;
      v7 = (_OWORD *)((char *)v7 + 40);
      v8 -= 40;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_DWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v9 != 82) && (*(_QWORD *)a2 != -8192 || v9 != 83))
    {
      v13 = 0;
      sub_1C6179DA8((uint64_t *)v5, (_DWORD *)a2, &v13);
      v10 = v13;
      *v13 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      *((_DWORD *)v10 + 8) = 0;
      v10[2] = 0;
      v10[3] = 0;
      v10[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      *((_DWORD *)v10 + 6) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = 0;
      v11 = *((_DWORD *)v10 + 7);
      *((_DWORD *)v10 + 7) = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a2 + 28) = v11;
      v12 = *((_DWORD *)v10 + 8);
      *((_DWORD *)v10 + 8) = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a2 + 32) = v12;
      ++*(_DWORD *)(v5 + 8);
      result = MEMORY[0x1CAA32FB4](0, 8);
    }
    a2 += 40;
  }
  return result;
}

_QWORD *sub_1C617A140(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C617A1AC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C617A248(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
    v5[2] = 0;
  }
  return v5;
}

uint64_t sub_1C617A1AC(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C617A248(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4D9B6C4(a1, v6);
  v8 = 0;
  sub_1C617A1AC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C617A2F8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C617A1AC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *(_OWORD *)(v10 + 1) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

int32x2_t sub_1C617A3B0(int32x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  int32x2_t result;
  uint64_t v7[2];
  uint64_t v8;
  uint64_t v9;

  sub_1C4D9F1A8((char **)(a2 + 40));
  v7[1] = 0;
  v8 = -8192;
  v7[0] = 2;
  v9 = 0;
  sub_1C4D98DE0((unint64_t *)(a2 + 8), v7);
  v4 = v8;
  *(_QWORD *)(a2 + 32) = v9;
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList(v7);
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

_QWORD *llvm::AssumptionPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  llvm::raw_ostream *v8;
  size_t v9;
  char *Name;
  size_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::raw_ostream *v16;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::AssumptionAnalysis::Key, (uint64_t)a2);
  v8 = sub_1C4816AD8(*a1, "Cached assumptions for function: ");
  Name = llvm::Value::getName(a2);
  v11 = v9;
  v12 = (void *)*((_QWORD *)v8 + 4);
  if (v9 <= *((_QWORD *)v8 + 3) - (_QWORD)v12)
  {
    if (v9)
    {
      memcpy(v12, Name, v9);
      *((_QWORD *)v8 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v8, Name, v9);
  }
  sub_1C4816AD8(v8, "\n");
  if (!*(_BYTE *)(ResultImpl + 192))
    llvm::AssumptionCache::scanFunction((llvm::AssumptionCache *)(ResultImpl + 8));
  v13 = *(unsigned int *)(ResultImpl + 32);
  if ((_DWORD)v13)
  {
    v14 = 32 * v13;
    v15 = *(_QWORD *)(ResultImpl + 24) + 16;
    do
    {
      if (*(_QWORD *)v15)
      {
        v16 = sub_1C4816AD8(*a1, "  ");
        llvm::Value::print(*(llvm::Value **)(*(_QWORD *)v15 - 32 * (*(_DWORD *)(*(_QWORD *)v15 + 20) & 0x7FFFFFF)), v16, 0);
        sub_1C4816AD8(v16, "\n");
      }
      v15 += 32;
      v14 -= 32;
    }
    while (v14);
  }
  return llvm::InstCountPass::run(a4);
}

uint64_t llvm::AssumptionCacheTracker::lookupAssumptionCache(llvm::AssumptionCacheTracker *this, llvm::Function *a2)
{
  int v3;
  uint64_t result;
  llvm::Function *v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  v3 = sub_1C4D9F900((uint64_t *)this + 4, &v5, &v6);
  result = 0;
  if (v3)
  {
    if (v6 != *((_QWORD *)this + 4) + 48 * *((unsigned int *)this + 12))
      return *(_QWORD *)(v6 + 40);
  }
  return result;
}

uint64_t sub_1C617A604(uint64_t *a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_DWORD *)a1 + 2);
  result = *a1;
  v4 = *((unsigned int *)a1 + 4);
  v5 = result + 48 * v4;
  if (!v2)
    return v5;
  if ((_DWORD)v4)
  {
    v6 = 48 * v4;
    while ((*(_QWORD *)(result + 24) | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      result += 48;
      v6 -= 48;
      if (!v6)
        return v5;
    }
  }
  return result;
}

llvm::AssumptionCacheTracker *llvm::AssumptionCacheTracker::AssumptionCacheTracker(llvm::AssumptionCacheTracker *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = llvm::AssumptionCacheTracker::ID;
  *((_DWORD *)this + 6) = 4;
  *(_QWORD *)this = &off_1E81346A8;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82C6F8);
  if (v2 != -1)
  {
    v6[0] = sub_1C4D9DA70;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82C6F8, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

double sub_1C617A77C(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 32 * v5;
    do
    {
      v7 = *(_QWORD *)&v4[v6 - 16];
      if (v7 != -8192 && v7 != -4096 && v7 != 0)
        llvm::ValueHandleBase::RemoveFromUseList(&v4[v6 - 32]);
      v6 -= 32;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

llvm::AssumptionCacheTracker *llvm::callDefaultCtor<llvm::AssumptionCacheTracker>()
{
  llvm::AssumptionCacheTracker *v0;

  v0 = (llvm::AssumptionCacheTracker *)operator new();
  return llvm::AssumptionCacheTracker::AssumptionCacheTracker(v0);
}

uint64_t sub_1C617A83C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = a1 + 88 * v5;
    v7 = *(_QWORD *)(v6 + 24);
    if (v7 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = a1 + 88 * (v13 & v4);
        v7 = *(_QWORD *)(v6 + 24);
        v8 = 1;
        if (v7 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

uint64_t sub_1C617A8D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = *a1;
  v6 = *((unsigned int *)a1 + 2);
  v7 = *a1 + 32 * v6;
  if (v7 == a3)
  {
    v9 = a2;
  }
  else
  {
    v8 = a3;
    v9 = a2;
    do
    {
      sub_1C4D98DE0((unint64_t *)v9, (uint64_t *)v8);
      *(_DWORD *)(v9 + 24) = *(_DWORD *)(v8 + 24);
      v9 += 32;
      v8 += 32;
    }
    while (v8 != v7);
    v5 = *a1;
    v6 = *((unsigned int *)a1 + 2);
  }
  v10 = (_QWORD *)(v5 + 32 * v6);
  if (v10 != (_QWORD *)v9)
  {
    do
    {
      v11 = *(v10 - 2);
      v10 -= 4;
      if (v11 != -8192 && v11 != -4096 && v11 != 0)
        llvm::ValueHandleBase::RemoveFromUseList(v10);
    }
    while (v10 != (_QWORD *)v9);
    v5 = *a1;
  }
  *((_DWORD *)a1 + 2) = (unint64_t)(v9 - v5) >> 5;
  return a2;
}

uint64_t sub_1C617A9A4(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;

  v6 = 0;
  v3 = sub_1C477507C((uint64_t *)a1, a2, &v6);
  if ((_DWORD)v3)
  {
    v4 = v6;
    sub_1C4DA9768(v6 + 1);
    *v4 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v3;
}

llvm::BasicAAWrapperPass *llvm::BasicAAWrapperPass::BasicAAWrapperPass(llvm::BasicAAWrapperPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::BasicAAWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E81347A0;
  *((_QWORD *)this + 4) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82C700);
  if (v2 != -1)
  {
    v6[0] = sub_1C4DA87D4;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82C700, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

void llvm::initializeBasicAAWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82C700);
  if (v2 != -1)
  {
    v5[0] = sub_1C4DA87D4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82C700, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::BasicAAWrapperPass *llvm::createBasicAAWrapperPass(llvm *this)
{
  llvm::BasicAAWrapperPass *v1;

  v1 = (llvm::BasicAAWrapperPass *)operator new();
  return llvm::BasicAAWrapperPass::BasicAAWrapperPass(v1);
}

void *llvm::BasicAAWrapperPass::getAnalysisUsage(llvm::BasicAAWrapperPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::AssumptionCacheTracker::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::DominatorTreeWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::TargetTransformInfoWrapperPass::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 144, (uint64_t)&llvm::PhiValuesWrapperPass::ID);
}

void sub_1C617ABB0(uint64_t a1)
{
  sub_1C4DA93B8(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C617ABD4(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 16), 8);
  return a1;
}

void sub_1C617AC08(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 16), 8);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C617AC50(llvm::Pass *a1)
{
  sub_1C617AC9C(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::BasicAAWrapperPass *llvm::callDefaultCtor<llvm::BasicAAWrapperPass>()
{
  llvm::BasicAAWrapperPass *v0;

  v0 = (llvm::BasicAAWrapperPass *)operator new();
  return llvm::BasicAAWrapperPass::BasicAAWrapperPass(v0);
}

void sub_1C617AC9C(llvm::Pass *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E81347A0;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = sub_1C4DA9EC0(v2);
    MEMORY[0x1CAA32FC0](v3, 0x10E0C40C5342A8FLL);
  }
  llvm::Pass::~Pass(this);
}

uint64_t sub_1C617ACEC(uint64_t a1, char *a2, _WORD *a3, _BYTE **a4)
{
  uint64_t v8;
  size_t v9;
  _BYTE *v10;

  v8 = sub_1C47AD050(a1, 0, 0);
  *(_BYTE *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)v8 = &unk_1E819E898;
  *(_QWORD *)(v8 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v8 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v8 + 184) = v8 + 160;
  v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  v10 = *a4;
  *(_BYTE *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v10;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t sub_1C617ADCC(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C4850EC8((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t *sub_1C617AE78(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD *v11;

  v4 = result;
  result[1] = 0;
  v5 = *((unsigned int *)result + 4);
  if ((_DWORD)v5)
  {
    v6 = (_QWORD *)*result;
    v7 = 16 * v5;
    do
    {
      *v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 1;
    do
    {
      if ((*(v8 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v11 = 0;
        sub_1C477507C(v4, v8 - 1, &v11);
        v9 = v11;
        *v11 = *(v8 - 1);
        v9[1] = *v8;
        *v8 = 0;
        ++*((_DWORD *)v4 + 2);
        result = sub_1C4DA9768(v8);
      }
      v10 = v8 + 1;
      v8 += 2;
    }
    while (v10 != a3);
  }
  return result;
}

void llvm::BlockFrequencyInfo::view(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  _BYTE v3[32];
  __int16 v4;
  _QWORD v5[4];
  __int16 v6;
  uint64_t **v7;

  v7 = a1;
  v6 = 261;
  v5[0] = a2;
  v5[1] = a3;
  v4 = 257;
  sub_1C4DADF20(&v7, (llvm::Twine *)v5, 0, (llvm::Twine *)v3, 0);
}

uint64_t llvm::BlockFrequencyInfo::print(llvm::BlockFrequencyInfo *this, llvm::raw_ostream *a2)
{
  uint64_t result;

  result = *(_QWORD *)this;
  if (result)
    return (*(uint64_t (**)(uint64_t, llvm::raw_ostream *))(*(_QWORD *)result + 24))(result, a2);
  return result;
}

uint64_t ****llvm::BlockFrequencyInfo::getProfileCountFromFreq(uint64_t *****this, uint64_t a2)
{
  uint64_t ****result;

  result = *this;
  if (result)
    return (uint64_t ****)llvm::BlockFrequencyInfoImplBase::getProfileCountFromFreq((llvm::BlockFrequencyInfoImplBase *)result, result[16], a2, 0);
  return result;
}

uint64_t llvm::BlockFrequencyInfo::isIrrLoopHeader(llvm::BlockFrequencyInfo *this, const llvm::BasicBlock *a2)
{
  uint64_t v2;
  unsigned int v4;

  v2 = *(_QWORD *)this;
  v4 = sub_1C4DB12BC(*(_QWORD *)this, (uint64_t)a2);
  return llvm::BlockFrequencyInfoImplBase::isIrrLoopHeader(v2, &v4);
}

uint64_t llvm::BlockFrequencyInfo::getEntryFreq(llvm::BlockFrequencyInfo *this)
{
  if (*(_QWORD *)this)
    return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 8) + 16);
  else
    return 0;
}

void llvm::initializeBlockFrequencyInfoWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82CBF0);
  if (v2 != -1)
  {
    v5[0] = sub_1C4DAFFD8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82CBF0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::BlockFrequencyInfoWrapperPass *llvm::BlockFrequencyInfoWrapperPass::BlockFrequencyInfoWrapperPass(llvm::BlockFrequencyInfoWrapperPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::BlockFrequencyInfoWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E8134898;
  *((_QWORD *)this + 4) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82CBF0);
  if (v2 != -1)
  {
    v6[0] = sub_1C4DAFFD8;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82CBF0, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

uint64_t llvm::BlockFrequencyInfoWrapperPass::print(llvm::BlockFrequencyInfoWrapperPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  if (result)
    return (*(uint64_t (**)(uint64_t, llvm::raw_ostream *))(*(_QWORD *)result + 24))(result, a2);
  return result;
}

llvm::AnalysisUsage *llvm::BlockFrequencyInfoWrapperPass::getAnalysisUsage(llvm::BlockFrequencyInfoWrapperPass *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage *result;

  llvm::AnalysisUsage::addRequiredID(a2, llvm::BranchProbabilityInfoWrapperPass::ID);
  result = llvm::AnalysisUsage::addRequiredID(a2, llvm::LoopInfoWrapperPass::ID);
  *((_BYTE *)a2 + 160) = 1;
  return result;
}

_QWORD *llvm::BlockFrequencyPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  size_t v10;
  char *Name;
  size_t v12;
  void *v13;
  llvm::raw_ostream *v14;
  uint64_t v15;

  v8 = sub_1C4816AD8(*a1, "Printing analysis results of BFI for function ");
  v9 = sub_1C4816AD8(v8, "'");
  Name = llvm::Value::getName(a2);
  v12 = v10;
  v13 = (void *)*((_QWORD *)v9 + 4);
  if (v10 <= *((_QWORD *)v9 + 3) - (_QWORD)v13)
  {
    if (v10)
    {
      memcpy(v13, Name, v10);
      *((_QWORD *)v9 + 4) += v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, Name, v10);
  }
  v14 = sub_1C4816AD8(v9, "':");
  sub_1C4816AD8(v14, "\n");
  v15 = *(_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::BlockFrequencyAnalysis::Key, (uint64_t)a2)+ 8);
  if (v15)
    (*(void (**)(uint64_t, llvm::raw_ostream *))(*(_QWORD *)v15 + 24))(v15, *a1);
  return llvm::InstCountPass::run(a4);
}

_QWORD *sub_1C617B31C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E81349A0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C617B360(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C617B3D8(v11);
}

uint64_t sub_1C617B3D8(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C617B3F0(_QWORD *a1)
{
  sub_1C4DB01FC(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C617B414(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C617B420(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C617B430(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  void *v4;
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &unk_1E81349F0;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C617B4A0(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C617B4A8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E81349A0;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C617B4FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C617B504(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C617B518(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C617B52C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C617B540(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

_QWORD *sub_1C617B56C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E8134A98;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C617B5B0(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C617B628(v11);
}

uint64_t sub_1C617B628(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C617B640(_QWORD *a1)
{
  sub_1C4DB0298(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C617B664(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C617B670(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C617B680(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  void *v4;
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &unk_1E8134AE8;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C617B6F0(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C617B6F8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &unk_1E8134A98;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C617B74C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C617B754(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C617B768(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C617B77C(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C617B790(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

uint64_t sub_1C617B7C0(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((_QWORD *)(a1 + 8));
  return a1;
}

void sub_1C617B800(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 != -8192 && v1 != -4096 && v1 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((_QWORD *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

llvm::BlockFrequencyInfoWrapperPass *llvm::callDefaultCtor<llvm::BlockFrequencyInfoWrapperPass>()
{
  llvm::BlockFrequencyInfoWrapperPass *v0;

  v0 = (llvm::BlockFrequencyInfoWrapperPass *)operator new();
  return llvm::BlockFrequencyInfoWrapperPass::BlockFrequencyInfoWrapperPass(v0);
}

void sub_1C617B878(_WORD *a1, __int128 *a2, uint64_t *a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED7F0020, 0, 0);
  dword_1ED7F00A0 = 0;
  qword_1ED7F00A8 = (uint64_t)&unk_1E81349F0;
  unk_1ED7F00B0 = 0;
  qword_1ED7F0020 = (uint64_t)&unk_1E8134938;
  qword_1ED7F00B8 = (uint64_t)&unk_1E81349A0;
  unk_1ED7F00C0 = &qword_1ED7F0020;
  qword_1ED7F00C8 = (uint64_t)&unk_1ED7F00D8;
  qword_1ED7F00D0 = 0x800000000;
  qword_1ED7F0258 = (uint64_t)&unk_1E8134B90;
  qword_1ED7F0270 = (uint64_t)&qword_1ED7F0258;
  sub_1C4DB1660(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F0020);
}

void sub_1C617B934()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C617B948()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E8134B90;
  return result;
}

void sub_1C617B970(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E8134B90;
}

void sub_1C617B990(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  char *v4;
  unsigned int v5;
  char *v6;
  _OWORD *v7;
  __int128 v8;
  int v9;
  int v10;
  unint64_t v11;

  v11 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v11);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[48 * v5];
    v7 = v3;
    do
    {
      v8 = *((_OWORD *)v4 + 1);
      *v7 = *(_OWORD *)v4;
      v7[1] = v8;
      *((_QWORD *)v7 + 4) = &unk_1E8134A10;
      v9 = *((_DWORD *)v4 + 10);
      *((_BYTE *)v7 + 44) = v4[44];
      *((_DWORD *)v7 + 10) = v9;
      *((_QWORD *)v7 + 4) = &unk_1E81349F0;
      v4 += 48;
      v7 += 3;
    }
    while (v4 != v6);
    v4 = *(char **)a1;
  }
  v10 = v11;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v10;
}

void sub_1C617BA50(_WORD *a1, __int128 *a2, uint64_t *a3)
{
  sub_1C47AD050((uint64_t)&llvm::PGOViewCounts, 0, 0);
  dword_1ED82C930 = 0;
  qword_1ED82C938 = (uint64_t)&unk_1E8134AE8;
  unk_1ED82C940 = 0;
  llvm::PGOViewCounts = (uint64_t)&unk_1E8134A30;
  qword_1ED82C948 = (uint64_t)&unk_1E8134A98;
  unk_1ED82C950 = &llvm::PGOViewCounts;
  qword_1ED82C958 = (uint64_t)&unk_1ED82C968;
  qword_1ED82C960 = 0x800000000;
  qword_1ED82CAE8 = (uint64_t)&unk_1E8134BD8;
  qword_1ED82CB00 = (uint64_t)&qword_1ED82CAE8;
  sub_1C4DB1A18(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::PGOViewCounts);
}

void sub_1C617BB0C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C617BB20()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E8134BD8;
  return result;
}

void sub_1C617BB48(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E8134BD8;
}

void sub_1C617BB68(uint64_t a1, unint64_t a2)
{
  _OWORD *v3;
  char *v4;
  unsigned int v5;
  char *v6;
  _OWORD *v7;
  __int128 v8;
  int v9;
  int v10;
  unint64_t v11;

  v11 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v11);
  v4 = *(char **)a1;
  v5 = *(_DWORD *)(a1 + 8);
  if (v5)
  {
    v6 = &v4[48 * v5];
    v7 = v3;
    do
    {
      v8 = *((_OWORD *)v4 + 1);
      *v7 = *(_OWORD *)v4;
      v7[1] = v8;
      *((_QWORD *)v7 + 4) = &unk_1E8134B08;
      v9 = *((_DWORD *)v4 + 10);
      *((_BYTE *)v7 + 44) = v4[44];
      *((_DWORD *)v7 + 10) = v9;
      *((_QWORD *)v7 + 4) = &unk_1E8134AE8;
      v4 += 48;
      v7 += 3;
    }
    while (v4 != v6);
    v4 = *(char **)a1;
  }
  v10 = v11;
  if (v4 != (char *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v10;
}

void sub_1C617BC28(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  __int16 v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  unint64_t v14;
  __int16 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  void **v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  void *v33[3];
  uint64_t v34;
  __int16 v35;
  void *__p;
  char *v37;
  _QWORD v38[2];
  int v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  void **v43;

  v40 = 0;
  v41 = 0;
  v42 = 0;
  sub_1C4DB3EBC(a1, &v40);
  v2 = v40;
  if (v40 == v41)
    goto LABEL_2;
  v38[0] = 0;
  v38[1] = 0;
  v39 = 0;
  sub_1C617C408(&__p, v41 - v40);
  v34 = 0;
  v35 = 0;
  v3 = v40;
  if (v41 != v40)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v33[0] = (void *)v3[v7];
      v8 = v33[0];
      sub_1C617C470((uint64_t)v38, (uint64_t *)v33)[1] = v7;
      v9 = sub_1C4DB12BC(a1, (uint64_t)v8);
      if (v9 == -1)
      {
        v10 = 0;
        LOWORD(v11) = 0;
      }
      else
      {
        v12 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 24 * v9);
        v10 = *v12;
        v11 = v12[1];
      }
      v13 = (char *)__p + v4;
      *(_QWORD *)v13 = v10;
      *((_WORD *)v13 + 4) = v11;
      v14 = sub_1C617C634(v6, v5, *(_QWORD *)((char *)__p + v4), *(_WORD *)((char *)__p + v4 + 8));
      v34 = v14;
      v5 = v15;
      v35 = v15;
      if (v15 < 0x4000)
      {
        v6 = v14;
      }
      else
      {
        v6 = -1;
        v34 = -1;
        v5 = 0x3FFF;
        v35 = 0x3FFF;
      }
      ++v7;
      v3 = v40;
      v4 += 16;
    }
    while (v7 < v41 - v40);
  }
  v16 = (char *)__p;
  v17 = v37;
  while (v16 != v17)
  {
    sub_1C4DB4640((uint64_t)v16, (uint64_t)&v34);
    v16 += 16;
  }
  memset(v33, 0, sizeof(v33));
  sub_1C4DB46AC(a1, &v40, (uint64_t)v38, v33);
  sub_1C4DB4FE8(v33, (uint64_t *)&__p);
  v18 = *(_QWORD *)(a1 + 128);
  v19 = v18 + 72;
  v20 = *(_QWORD *)(v18 + 80);
  if (v20 != v18 + 72)
  {
    while (1)
    {
      if (v20)
        v21 = (void **)(v20 - 24);
      else
        v21 = 0;
      v22 = sub_1C4DB12BC(a1, (uint64_t)v21);
      if (v22 == -1)
        goto LABEL_25;
      v23 = v22;
      if (!v39)
        goto LABEL_27;
      v24 = (v39 - 1) & ((v21 >> 4) ^ (v21 >> 9));
      v25 = *(void ***)(v38[0] + 16 * v24);
      if (v21 != v25)
        break;
LABEL_24:
      v43 = v21;
      v26 = sub_1C617C470((uint64_t)v38, (uint64_t *)&v43);
      v27 = (char *)__p + 16 * v26[1];
      v28 = *(_QWORD *)(a1 + 8) + 24 * v23;
      v29 = *((_WORD *)v27 + 4);
      *(_QWORD *)v28 = *(_QWORD *)v27;
      *(_WORD *)(v28 + 8) = v29;
LABEL_25:
      v20 = *(_QWORD *)(v20 + 8);
      if (v20 == v19)
        goto LABEL_28;
    }
    v31 = 1;
    while (v25 != (void **)-4096)
    {
      v32 = v24 + v31++;
      v24 = v32 & (v39 - 1);
      v25 = *(void ***)(v38[0] + 16 * v24);
      if (v21 == v25)
        goto LABEL_24;
    }
LABEL_27:
    v30 = *(_QWORD *)(a1 + 8) + 24 * v22;
    *(_QWORD *)v30 = 0;
    *(_WORD *)(v30 + 8) = 0;
    goto LABEL_25;
  }
LABEL_28:
  v43 = v33;
  sub_1C4DB60AC(&v43);
  if (__p)
  {
    v37 = (char *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v38[0], 8);
  v2 = v40;
LABEL_2:
  if (v2)
  {
    v41 = v2;
    operator delete(v2);
  }
}

_DWORD *sub_1C617BEE8(_DWORD *result, int a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;

  if (a2)
  {
    v2 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v3 = v2 | (v2 >> 2) | ((v2 | (v2 >> 2)) >> 4);
    v4 = ((v3 | (v3 >> 8)) >> 16) | v3 | (v3 >> 8);
    if (result[4] <= v4)
      return sub_1C4A0CAD0((uint64_t)result, v4 + 1);
  }
  return result;
}

_DWORD *sub_1C617BF34(llvm::bfi_detail::IrreducibleGraph *this, uint64_t a2, uint64_t a3)
{
  unsigned int v5;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int v11;
  _DWORD *result;
  unsigned int v13;
  unsigned int v14;

  if (a2)
  {
    llvm::bfi_detail::IrreducibleGraph::addNodesInLoop((uint64_t)this, a2);
    v8 = *(unsigned int *)(a2 + 104);
    if ((_DWORD)v8)
    {
      v9 = *(unsigned int **)(a2 + 96);
      v10 = 4 * v8;
      do
      {
        v11 = *v9++;
        v14 = v11;
        sub_1C4DB3B1C((uint64_t)this, &v14, a2, a3);
        v10 -= 4;
      }
      while (v10);
    }
  }
  else
  {
    llvm::bfi_detail::IrreducibleGraph::addNodesInFunction((uint64_t *)this);
    if (*(_QWORD *)(*(_QWORD *)this + 72) != *(_QWORD *)(*(_QWORD *)this + 64))
    {
      v5 = 1;
      do
      {
        v13 = v5 - 1;
        sub_1C4DB3B1C((uint64_t)this, &v13, 0, a3);
      }
      while (0xAAAAAAAAAAAAAAABLL
            * ((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 72) - *(_QWORD *)(*(_QWORD *)this + 64)) >> 3) > v5++);
    }
  }
  result = sub_1C617C220((_DWORD *)this + 12, (_DWORD *)this + 2);
  *((_QWORD *)this + 2) = *((_QWORD *)result + 1);
  return result;
}

uint64_t sub_1C617C028(uint64_t a1, _DWORD *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v7 = 0;
  v3 = sub_1C617C170(a1, a2, &v7);
  v4 = a1 + 8;
  if (v3)
    return v7;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v6 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v6 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v6;
}

void sub_1C617C0A0(uint64_t *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int NumSuccessors;
  int v12;
  unsigned int i;
  uint64_t Successor;
  unsigned int v15;

  v4 = *(_QWORD *)(*(_QWORD *)(*a1 + 136) + 8 * *a3);
  v5 = *(_QWORD *)(v4 + 40);
  if (v5 != v4 + 40)
  {
    if (v5)
      v6 = (unsigned __int8 *)(v5 - 24);
    else
      v6 = 0;
    if (v6[16] - 29 <= 0xA)
    {
      NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v6);
      if (NumSuccessors)
      {
        v12 = NumSuccessors;
        for (i = 0; i != v12; ++i)
        {
          Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v6, i);
          v15 = sub_1C4DB12BC(*a1, Successor);
          llvm::bfi_detail::IrreducibleGraph::addEdge(a2, (uint64_t)a3, &v15, a4);
        }
      }
    }
  }
}

uint64_t sub_1C617C170(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (37 * *a2) & (v4 - 1);
  v7 = (_DWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_DWORD *sub_1C617C220(_DWORD *a1, _DWORD *a2)
{
  char v4;
  _DWORD *v5;
  _DWORD *v7;

  v7 = 0;
  v4 = sub_1C617C170((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C617C284(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_QWORD *)v5 + 1) = 0;
  }
  return v5;
}

_DWORD *sub_1C617C284(_DWORD *a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C4DB3C08((uint64_t)a1, v7);
  v9 = 0;
  sub_1C617C170((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_6:
  *a1 += 2;
  if (*a4 != -1)
    --a1[1];
  return a4;
}

uint64_t sub_1C617C340(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_DWORD *)(result + 8);
    v9 = (_DWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_DWORD **)(result + 8);
    v9 = &v8[4 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 4;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v11 = 0;
      result = sub_1C617C170((uint64_t)v5, (_DWORD *)a2, &v11);
      v10 = v11;
      *v11 = *(_DWORD *)a2;
      *((_QWORD *)v10 + 1) = *(_QWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_1C617C408(_QWORD *a1, unint64_t a2)
{
  size_t v4;
  char *v5;
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >> 60)
      abort();
    v4 = 16 * a2;
    v5 = (char *)operator new(16 * a2);
    *a1 = v5;
    v6 = &v5[16 * a2];
    a1[2] = v6;
    bzero(v5, v4);
    a1[1] = v6;
  }
  return a1;
}

_QWORD *sub_1C617C470(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C617C4D8(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C617C4D8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DB5B2C(a1, v6);
  v8 = 0;
  sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C617C588(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C6144BDC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
      v10 = v12;
      v11 = a2[1];
      *v12 = *a2;
      v10[1] = v11;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

unint64_t sub_1C617C634(unint64_t a1, __int16 a2, unint64_t a3, __int16 a4)
{
  unint64_t v4;
  __int16 v6;
  unint64_t v7;
  __int16 v8;
  unint64_t v9;

  v9 = a1;
  v8 = a2;
  v7 = a3;
  v6 = a4;
  sub_1C4DB5BE4(&v9, &v8, &v7, &v6);
  v4 = v7 + v9;
  if (__CFADD__(v7, v9))
    return (v4 >> 1) | 0x8000000000000000;
  return v4;
}

_QWORD *sub_1C617C694(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  size_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v3 = 3 * a2;
    v4 = 24 * a2;
    v5 = (char *)operator new(24 * a2);
    *a1 = v5;
    a1[2] = &v5[8 * v3];
    v6 = 24 * ((v4 - 24) / 0x18uLL) + 24;
    bzero(v5, v6);
    a1[1] = &v5[v6];
  }
  return a1;
}

void sub_1C617C730(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3;
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

llvm::raw_ostream *sub_1C617C7A0(llvm::raw_ostream **a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  char v10;
  int v11;
  uint64_t v12;
  llvm::raw_ostream *v13;
  char v14;
  BOOL v15;
  const char *v16;
  size_t v17;
  size_t v18;
  llvm::raw_ostream *v19;

  v8 = sub_1C4816AD8(*a1, "\tNode");
  llvm::write_hex(v8, a2, 3, 0, 0);
  v9 = sub_1C4816AD8(*a1, " -> Node");
  llvm::write_hex(v9, a3, 3, 0, 0);
  v10 = *(_BYTE *)(a4 + 23);
  v11 = v10;
  v12 = v10 & 0x7F;
  if (v11 < 0)
    v12 = *(_QWORD *)(a4 + 8);
  if (v12)
  {
    v13 = sub_1C4816AD8(*a1, "[");
    v14 = *(_BYTE *)(a4 + 23);
    v15 = v14 < 0;
    if (v14 >= 0)
      v16 = (const char *)a4;
    else
      v16 = *(const char **)a4;
    v17 = v14 & 0x7F;
    if (v15)
      v18 = *(_QWORD *)(a4 + 8);
    else
      v18 = v17;
    v19 = llvm::raw_ostream::write(v13, v16, v18);
    sub_1C4816AD8(v19, "]");
  }
  return sub_1C4816AD8(*a1, ";\n");
}

llvm::raw_ostream *llvm::bfi_detail::BlockMass::dump(llvm::bfi_detail::BlockMass *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::bfi_detail::BlockMass::print(this, v2);
}

llvm::raw_ostream *llvm::bfi_detail::BlockMass::print(llvm::bfi_detail::BlockMass *this, llvm::raw_ostream *a2)
{
  uint64_t i;
  uint64_t v5;
  char v6;
  char v7;
  char *v8;

  for (i = 60; i != -4; i -= 4)
  {
    v5 = (*(_QWORD *)this >> i) & 0xFLL;
    if (v5 >= 0xA)
      v6 = 87;
    else
      v6 = 48;
    v7 = v6 + v5;
    v8 = (char *)*((_QWORD *)a2 + 4);
    if ((unint64_t)v8 >= *((_QWORD *)a2 + 3))
    {
      llvm::raw_ostream::write(a2, v7);
    }
    else
    {
      *((_QWORD *)a2 + 4) = v8 + 1;
      *v8 = v7;
    }
  }
  return a2;
}

uint64_t *llvm::BlockFrequencyInfoImplBase::getBlockProfileCount(llvm::BlockFrequencyInfoImplBase *a1, uint64_t ***a2, _DWORD *a3, int a4)
{
  uint64_t v4;

  if (*a3 == -1)
    v4 = 0;
  else
    v4 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 24 * *a3 + 16);
  return llvm::BlockFrequencyInfoImplBase::getProfileCountFromFreq(a1, a2, v4, a4);
}

uint64_t llvm::BlockFrequencyInfoImplBase::isIrrLoopHeader(uint64_t a1, unsigned int *a2)
{
  unsigned int v2;

  v2 = *a2;
  if (v2 == -1)
    return 0;
  else
    return sub_1C617C970((uint64_t *)(a1 + 32), v2);
}

uint64_t sub_1C617C970(uint64_t *a1, unsigned int a2)
{
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;

  if (a1[2]
    && (v4 = a2 >> 7, v5 = sub_1C4DB3A84(a1, a2 >> 7), v5 != a1)
    && (v7 = *((_DWORD *)v5 + 4), v6 = v5 + 2, v7 == v4))
  {
    return ((unint64_t)v6[((a2 >> 6) & 1) + 1] >> a2) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::BlockFrequencyInfoImplBase::getFloatingBlockFreq(uint64_t a1, _DWORD *a2)
{
  if (*a2 == -1)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24 * *a2);
}

llvm::raw_ostream *llvm::BlockFrequencyInfoImplBase::printBlockFreq(uint64_t a1, llvm::ScaledNumberBase *this, _DWORD *a3)
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  __int16 v6;

  if (*a3 == -1)
  {
    v5 = 0;
    v6 = 0;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8) + 24 * *a3;
    v5 = *(llvm::raw_ostream **)v4;
    v6 = *(_WORD *)(v4 + 8);
  }
  return llvm::ScaledNumberBase::print(this, v5, v6, 64, 0xAu);
}

void llvm::bfi_detail::IrreducibleGraph::addNodesInLoop(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;

  *(_DWORD *)(a1 + 8) = **(_DWORD **)(a2 + 96);
  v4 = (uint64_t *)(a1 + 24);
  sub_1C4DB8928((uint64_t *)(a1 + 24), *(unsigned int *)(a2 + 104));
  v5 = *(unsigned int *)(a2 + 104);
  if ((_DWORD)v5)
  {
    v6 = *(int **)(a2 + 96);
    v7 = 4 * v5;
    do
    {
      v8 = *v6;
      v9 = *(_QWORD *)(a1 + 32);
      if (v9 >= *(_QWORD *)(a1 + 40))
      {
        v10 = sub_1C4DBA14C(v4, *v6);
      }
      else
      {
        *(_DWORD *)v9 = v8;
        v10 = v9 + 56;
        *(_OWORD *)(v9 + 4) = 0u;
        *(_OWORD *)(v9 + 20) = 0u;
        *(_OWORD *)(v9 + 36) = 0u;
        *(_DWORD *)(v9 + 52) = 0;
      }
      *(_QWORD *)(a1 + 32) = v10;
      *(_QWORD *)sub_1C4DB3A24(*(_QWORD *)(*(_QWORD *)a1 + 64) + 24 * v8) = 0;
      ++v6;
      v7 -= 4;
    }
    while (v7);
  }
  v11 = *(_DWORD **)(a1 + 24);
  v12 = *(_DWORD **)(a1 + 32);
  if (v11 != v12)
  {
    v13 = (_DWORD *)(a1 + 48);
    do
    {
      *((_QWORD *)sub_1C617C220(v13, v11) + 1) = v11;
      v11 += 14;
    }
    while (v11 != v12);
  }
}

void sub_1C617CB38(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1[4];
  if (!v4)
  {
    sub_1C617DA88((uint64_t)a1);
    v4 = a1[4];
  }
  v5 = a1[1];
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 9));
  if (a1[2] == v5)
    v7 = 0;
  else
    v7 = *v6 + 8 * (v4 & 0x1FF);
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  *(_QWORD *)(v7 - 8) = *a2;
  v8 = a1[5] + 1;
  a1[4] = v4 - 1;
  a1[5] = v8;
}

void llvm::BlockFrequencyInfoImplBase::adjustLoopHeaderMass(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t i;
  uint64_t v6;
  unsigned int *v7;
  _DWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[64];
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = 0x400000000;
  v28 = 0;
  v29 = 0;
  v3 = *(unsigned int *)(a2 + 12);
  if ((_DWORD)v3)
  {
    for (i = 0; i < v3; ++i)
    {
      v6 = *(_QWORD *)(a2 + 96);
      v7 = (unsigned int *)(v6 + 4 * i);
      if (v3 < 2)
      {
        v14 = 0;
      }
      else
      {
        v8 = *(_DWORD **)(a2 + 96);
        v9 = v3;
        do
        {
          v10 = v9 >> 1;
          v11 = &v8[v9 >> 1];
          v13 = *v11;
          v12 = v11 + 1;
          v9 += ~(v9 >> 1);
          if (v13 < *v7)
            v8 = v12;
          else
            v9 = v10;
        }
        while (v9);
        v14 = ((uint64_t)v8 - v6) >> 2;
      }
      v15 = *(_QWORD *)(*(_QWORD *)(a2 + 128) + 8 * v14);
      if (v15)
      {
        llvm::BlockFrequencyInfoImplBase::Distribution::add(&v25, v7, v15, 0);
        v3 = *(unsigned int *)(a2 + 12);
      }
    }
  }
  llvm::BlockFrequencyInfoImplBase::Distribution::normalize((llvm::BlockFrequencyInfoImplBase::Distribution *)&v25);
  v16 = v25;
  if ((_DWORD)v26)
  {
    v17 = 16 * v26;
    v18 = v28;
    v19 = (unint64_t *)((char *)v25 + 8);
    v20 = -1;
    do
    {
      v21 = *v19;
      v22 = *v19;
      if (v18 != 0x80000000)
        v22 = ((v18 >> 1) | ((unint64_t)*v19 << 31)) / v18;
      v24 = v22;
      v23 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v24, v20);
      v18 -= v21;
      if (v20 >= v23)
        v20 -= v23;
      else
        v20 = 0;
      *(_QWORD *)sub_1C4DB3A24(*(_QWORD *)(a1 + 64) + 24 * *((unsigned int *)v19 - 1)) = v23;
      v19 += 2;
      v17 -= 16;
    }
    while (v17);
    v16 = v25;
  }
  if (v16 != v27)
    free(v16);
}

void llvm::BlockFrequencyInfoImplBase::distributeIrrLoopHeaderMass(llvm::BlockFrequencyInfoImplBase *this, llvm::BlockFrequencyInfoImplBase::Distribution *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;

  llvm::BlockFrequencyInfoImplBase::Distribution::normalize(a2);
  v4 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v4)
  {
    v5 = 16 * v4;
    v6 = *((_DWORD *)a2 + 20);
    v7 = (unint64_t *)(*(_QWORD *)a2 + 8);
    v8 = -1;
    do
    {
      v9 = *v7;
      v10 = *v7;
      if (v6 != 0x80000000)
        v10 = ((v6 >> 1) | ((unint64_t)*v7 << 31)) / v6;
      v12 = v10;
      v11 = llvm::BranchProbability::scale((llvm::BranchProbability *)&v12, v8);
      v6 -= v9;
      if (v8 >= v11)
        v8 -= v11;
      else
        v8 = 0;
      *(_QWORD *)sub_1C4DB3A24(*((_QWORD *)this + 8) + 24 * *((unsigned int *)v7 - 1)) = v11;
      v7 += 2;
      v5 -= 16;
    }
    while (v5);
  }
}

void sub_1C617CE48(_QWORD *a1)
{
  sub_1C4DB1064(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C617CE6C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C617CE74(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v11;

  v11 = 0;
  v8 = llvm::cl::parser<double>::parse(a1 + 160, (_QWORD *)a1, a3, a4, a5, a6, (double *)&v11);
  if (v8)
    return v8;
  *(_QWORD *)(a1 + 128) = v11;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 192);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(v9, &v11);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C617CEEC();
}

uint64_t sub_1C617CEEC()
{
  return 2;
}

void sub_1C617CEF4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E8134C50;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      sub_1C47A80D0(a1);
      JUMPOUT(0x1CAA32FC0);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  goto LABEL_6;
}

uint64_t sub_1C617CF68(uint64_t a1)
{
  return llvm::cl::basic_parser_impl::getOptionWidth(a1 + 160, a1);
}

llvm::raw_ostream *sub_1C617CF74(uint64_t a1, unsigned int a2)
{
  return llvm::cl::basic_parser_impl::printOptionInfo((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, a2);
}

double sub_1C617CF84(uint64_t a1, int a2, int a3, double result)
{
  uint64_t v4;
  _QWORD v5[2];
  char v6;

  if (a3)
  {
    result = *(double *)(a1 + 128);
LABEL_3:
    v4 = *(_QWORD *)(a1 + 144);
    v6 = *(_BYTE *)(a1 + 152);
    v5[0] = &unk_1E8134CB8;
    v5[1] = v4;
    llvm::cl::parser<double>::printOptionDiff((llvm::cl::basic_parser_impl *)(a1 + 160), (const llvm::cl::Option *)a1, (uint64_t)v5, a2, result);
    return result;
  }
  if (*(_BYTE *)(a1 + 152))
  {
    result = *(double *)(a1 + 128);
    if (*(double *)(a1 + 144) != result)
      goto LABEL_3;
  }
  return result;
}

BOOL sub_1C617CFF4(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 16) && *(_BYTE *)(a1 + 16) && *(double *)(a1 + 8) != *(double *)(a2 + 8);
}

uint64_t sub_1C617D020(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -1;
      v7 += 6;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v11 = 0;
      result = sub_1C4DB9344(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_DWORD *)a2;
      *(_OWORD *)(v10 + 2) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

int *sub_1C617D0CC(int *a1)
{
  int v2;
  int *v3;
  uint64_t v4;
  int *result;
  uint64_t v6;
  int *v7;

  v2 = *a1;
  if (*a1 > 1)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 34;
LABEL_10:
      while ((*(_QWORD *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 4;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (int *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if ((_DWORD)v6)
      {
        v7 = &result[4 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 8;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[4 * v4];
  }
  return result;
}

_QWORD *sub_1C617D144(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C617D1A8((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C617D254(a1, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
  }
  return v5;
}

uint64_t sub_1C617D1A8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C617D254(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 8;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C4DBA338((uint64_t)a1, v6);
  v8 = 0;
  sub_1C617D1A8((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C617D310(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 136);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C617D1A8((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_BYTE *)v11 + 8) = *(_BYTE *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_1C617D3D8(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  result = (_QWORD *)(v3 + 8 * (v2 >> 9));
  if (v4 == v3)
    v6 = 0;
  else
    v6 = *result + 8 * (v2 & 0x1FF);
  v7 = *(unsigned int *)(a1 + 4);
  if ((_DWORD)v7)
  {
    v8 = v7 + ((v6 - *result) >> 3);
    if (v8 < 1)
      result -= (unint64_t)(511 - v8) >> 9;
    else
      result += (unint64_t)v8 >> 9;
  }
  return result;
}

uint64_t sub_1C617D460(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

uint64_t sub_1C617D47C(uint64_t a1, uint64_t a2, _BYTE *a3, _BYTE *a4, int *a5, int *a6)
{
  unsigned int *v9;
  uint64_t v10;

  *(_QWORD *)a1 = a2;
  *(_BYTE *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = 1;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x400000000;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  v9 = (unsigned int *)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0x400000000;
  sub_1C617D6D0((unsigned int *)(a1 + 96), a3, a4);
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 136) = 0x100000000;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_WORD *)(a1 + 168) = 0;
  v10 = *(unsigned int *)(a1 + 104);
  *(_DWORD *)(a1 + 12) = v10;
  sub_1C617D544(v9, *(_QWORD *)v9 + 4 * v10, a5, a6);
  sub_1C6154790(a1 + 128, *(unsigned int *)(a1 + 12));
  return a1;
}

unsigned int *sub_1C617D544(unsigned int *result, uint64_t a2, int *__src, int *a4)
{
  int *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  int v16;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 4 * v8 == a2)
    return sub_1C617D6D0(result, __src, a4);
  v9 = (a2 - v7) >> 2;
  v10 = (char *)a4 - (char *)__src;
  v11 = a4 - __src;
  if (v8 + v11 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8 + v11, 4);
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v12 = (_DWORD *)(v7 + 4 * v9);
  v13 = (_BYTE *)(v7 + 4 * v8);
  v14 = (v13 - (_BYTE *)v12) >> 2;
  if (v14 >= v11)
  {
    result = sub_1C617D750(v6, &v13[-4 * v11], (char *)(v7 + 4 * v8));
    if (&v13[-4 * v11] != (_BYTE *)v12)
      result = (unsigned int *)memmove(&v12[v11], v12, &v13[-4 * v11] - (_BYTE *)v12);
    if (v5 != a4)
      return (unsigned int *)memmove(v12, v5, (char *)a4 - (char *)v5);
  }
  else
  {
    v15 = v8 + (v10 >> 2);
    v6[2] = v15;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 4 * v15 - 4 * v14), v12, v13 - (_BYTE *)v12);
      do
      {
        v16 = *v5++;
        *v12++ = v16;
        --v14;
      }
      while (v14);
    }
    if (v5 != a4)
      return (unsigned int *)memcpy(v13, v5, (char *)a4 - (char *)v5);
  }
  return result;
}

unsigned int *sub_1C617D6D0(unsigned int *result, _BYTE *__src, _BYTE *a3)
{
  _DWORD *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = result[2];
  v8 = v7 + ((a3 - __src) >> 2);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 4);
    LODWORD(v7) = v5[2];
  }
  if (__src != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v5 + 4 * v7), __src, v6);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 2);
  return result;
}

unsigned int *sub_1C617D750(unsigned int *result, char *a2, char *a3)
{
  char *v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  int v10;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[2];
  v8 = v7 + ((a3 - a2) >> 2);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 4);
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v9 = (_DWORD *)(*(_QWORD *)v5 + 4 * v7);
    do
    {
      v10 = *(_DWORD *)v4;
      v4 += 4;
      *v9++ = v10;
    }
    while (v4 != a3);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 2);
  return result;
}

_QWORD *sub_1C617D7D4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  MEMORY[0x1CAA32FB4](a1[1], 8);
  return a1;
}

llvm::cl::Option *sub_1C617D830(llvm::cl::Option *a1, char *a2, _BYTE **a3, _WORD *a4, _WORD *a5, __n128 *a6)
{
  uint64_t v12;

  v12 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_BYTE *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)v12 = &unk_1E819E898;
  *(_QWORD *)(v12 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v12 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v12 + 184) = v12 + 160;
  sub_1C617D8EC(v12, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 sub_1C617D8EC(uint64_t a1, char *__s, _BYTE **a3, _WORD *a4, _WORD *a5, __n128 *a6)
{
  size_t v12;
  _BYTE *v13;
  __int16 v14;
  __n128 result;

  v12 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v12);
  v13 = *a3;
  *(_BYTE *)(a1 + 128) = **a3;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v13;
  v14 = *(_WORD *)(a1 + 10) & 0xFF9F | (32 * (*a4 & 3));
  *(_WORD *)(a1 + 10) = v14;
  *(_WORD *)(a1 + 10) = v14 & 0xFFF8 | *a5 & 7;
  result = *a6;
  *(__n128 *)(a1 + 32) = *a6;
  return result;
}

void sub_1C617D984(uint64_t **a1, _WORD *a2, __n128 *a3)
{
  sub_1C47AD050((uint64_t)&llvm::IterativeBFIPrecision, 0, 0);
  xmmword_1ED82CEB8 = 0u;
  *(_OWORD *)&qword_1ED82CEC8 = 0u;
  *((_QWORD *)&xmmword_1ED82CEB8 + 1) = &unk_1E8134CB8;
  llvm::IterativeBFIPrecision = (uint64_t)&unk_1E8134C50;
  qword_1ED82CED8 = (uint64_t)&unk_1E819E320;
  qword_1ED82CEE0 = (uint64_t)&unk_1E8134CD8;
  qword_1ED82CEF8 = (uint64_t)&qword_1ED82CEE0;
  sub_1C4DBA4B0(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&llvm::IterativeBFIPrecision);
}

void sub_1C617DA30()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C617DA44()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E8134CD8;
  return result;
}

void sub_1C617DA6C(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E8134CD8;
}

void sub_1C617DA88(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *i;
  _BYTE *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  char *v19;
  __int128 v20;
  uint64_t v21;

  v2 = *(_BYTE **)(a1 + 8);
  v3 = *(_BYTE **)(a1 + 16);
  if (v3 == v2)
    v4 = 0;
  else
    v4 = ((v3 - v2) << 6) - 1;
  v5 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v4 - (*(_QWORD *)(a1 + 40) + v5)) < 0x200)
  {
    v6 = *(_BYTE **)(a1 + 24);
    v7 = *(_BYTE **)a1;
    v8 = (uint64_t)&v6[-*(_QWORD *)a1];
    if (v3 - v2 >= (unint64_t)v8)
    {
      if (v6 == v7)
        v10 = 1;
      else
        v10 = v8 >> 2;
      v21 = a1 + 24;
      if (v10 >> 61)
        sub_1C4764EE4();
      v18 = (char *)operator new(8 * v10);
      v19 = v18;
      *(_QWORD *)&v20 = v18;
      *((_QWORD *)&v20 + 1) = &v18[8 * v10];
      v17 = operator new(0x1000uLL);
      sub_1C61351F0((uint64_t)&v18, &v17);
      for (i = *(_QWORD **)(a1 + 8); i != *(_QWORD **)(a1 + 16); ++i)
        sub_1C4DBA538((uint64_t)&v18, i);
      v12 = *(_BYTE **)a1;
      v13 = v19;
      *(_QWORD *)a1 = v18;
      *(_QWORD *)(a1 + 8) = v13;
      v14 = v20;
      *(_OWORD *)(a1 + 16) = v20;
      if (v14 - (_QWORD)v13 == 8)
        v15 = 256;
      else
        v15 = *(_QWORD *)(a1 + 32) + 512;
      *(_QWORD *)(a1 + 32) = v15;
      if (v12)
        operator delete(v12);
    }
    else
    {
      if (v2 == v7)
      {
        v18 = (char *)operator new(0x1000uLL);
        sub_1C61351F0(a1, &v18);
        v9 = *(_QWORD *)(a1 + 16);
        v18 = *(char **)(v9 - 8);
        *(_QWORD *)(a1 + 16) = v9 - 8;
      }
      else
      {
        v18 = (char *)operator new(0x1000uLL);
      }
      sub_1C6135314((void **)a1, &v18);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        v16 = 256;
      else
        v16 = *(_QWORD *)(a1 + 32) + 512;
      *(_QWORD *)(a1 + 32) = v16;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v5 + 512;
    v18 = (char *)*((_QWORD *)v3 - 1);
    *(_QWORD *)(a1 + 16) = v3 - 8;
    sub_1C6135314((void **)a1, &v18);
  }
}

_OWORD *sub_1C617DC3C(int *a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  _OWORD *result;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = a2;
  v4 = *a1 + 1;
  *a1 = v4;
  *((_DWORD *)sub_1C6144C70((uint64_t)(a1 + 2), &v15) + 2) = v4;
  v5 = (uint64_t *)*((_QWORD *)a1 + 5);
  if ((unint64_t)v5 >= *((_QWORD *)a1 + 6))
  {
    v6 = sub_1C4ABDC28((void **)a1 + 4, a2);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *((_QWORD *)a1 + 5) = v6;
  v7 = sub_1C617D3D8(a2);
  v8 = *a1;
  *(_QWORD *)&v13 = a2;
  *((_QWORD *)&v13 + 1) = v7;
  *(_QWORD *)&v14 = v9;
  DWORD2(v14) = v8;
  v10 = (_OWORD *)*((_QWORD *)a1 + 11);
  if ((unint64_t)v10 >= *((_QWORD *)a1 + 12))
  {
    result = sub_1C4DBA810((void **)a1 + 10, &v13);
  }
  else
  {
    v11 = v14;
    *v10 = v13;
    v10[1] = v11;
    result = v10 + 2;
  }
  *((_QWORD *)a1 + 11) = result;
  return result;
}

uint64_t sub_1C617DCF4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  while (1)
  {
    v2 = *(_QWORD *)(v1 + 88);
    v3 = *(_QWORD **)(v2 - 32);
    v4 = v3[2];
    if (v3[3] == v4)
    {
      v6 = 0;
    }
    else
    {
      v5 = v3[5] + v3[6];
      v6 = *(_QWORD *)(v4 + ((v5 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v5 & 0x1FF);
    }
    v7 = *(uint64_t **)(v2 - 16);
    if (v7 == (uint64_t *)v6)
      break;
    *(_QWORD *)(v2 - 16) = v7 + 1;
    v8 = *(_QWORD **)(v2 - 24);
    if ((uint64_t *)((char *)v7 - *v8 + 8) == (uint64_t *)4096)
    {
      *(_QWORD *)(v2 - 24) = v8 + 1;
      *(_QWORD *)(v2 - 16) = v8[1];
    }
    v9 = *v7;
    v13 = 0;
    result = sub_1C6144BDC(*(_QWORD *)(v1 + 8), *(_DWORD *)(v1 + 24), v9, &v13);
    if ((_DWORD)result)
      v10 = v13 == *(_QWORD *)(v1 + 8) + 16 * *(unsigned int *)(v1 + 24);
    else
      v10 = 1;
    if (v10)
    {
      result = (uint64_t)sub_1C617DC3C((int *)v1, v9);
    }
    else
    {
      v11 = *(_DWORD *)(v13 + 8);
      v12 = *(_QWORD *)(v1 + 88);
      if (*(_DWORD *)(v12 - 8) > v11)
        *(_DWORD *)(v12 - 8) = v11;
    }
  }
  return result;
}

void llvm::initializeBranchProbabilityInfoWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82CFE8);
  if (v2 != -1)
  {
    v5[0] = sub_1C4DBAA94;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82CFE8, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::BranchProbabilityInfoWrapperPass *llvm::BranchProbabilityInfoWrapperPass::BranchProbabilityInfoWrapperPass(llvm::BranchProbabilityInfoWrapperPass *this)
{
  uint64_t v2;
  uint64_t i;
  unint64_t v4;
  unint64_t PassRegistry;
  _QWORD *v7;
  _QWORD v8[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = llvm::BranchProbabilityInfoWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E8134D20;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_DWORD *)this + 12) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_DWORD *)this + 18) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 10) = 0;
  v2 = 112;
  *((_QWORD *)this + 13) = 1;
  do
  {
    *(_QWORD *)((char *)this + v2) = -4096;
    v2 += 16;
  }
  while (v2 != 176);
  *((_QWORD *)this + 22) = 1;
  for (i = 184; i != 280; i += 24)
    *(_OWORD *)((char *)this + i) = xmmword_1C85F22B0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v4 = atomic_load(&qword_1ED82CFE8);
  if (v4 != -1)
  {
    v8[0] = sub_1C4DBAA94;
    v8[1] = &PassRegistry;
    v7 = v8;
    std::__call_once(&qword_1ED82CFE8, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

uint64_t llvm::BranchProbabilityInfo::SccInfo::getSccBlockType(llvm::BranchProbabilityInfo::SccInfo *this, const llvm::BasicBlock *a2, int a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  const llvm::BasicBlock *v11;

  v4 = *((_QWORD *)this + 3);
  v5 = (uint64_t *)(v4 + 24 * a3);
  v10 = 0;
  v11 = a2;
  if (sub_1C4926528((uint64_t)v5, &v11, &v10))
  {
    v6 = v10;
    v7 = *v5;
    v8 = *(unsigned int *)(v4 + 24 * a3 + 16);
  }
  else
  {
    v7 = *v5;
    v8 = *(unsigned int *)(v4 + 24 * a3 + 16);
    v6 = *v5 + 16 * v8;
  }
  if (v6 == v7 + 16 * v8)
    return 0;
  else
    return *(unsigned int *)(v6 + 8);
}

uint64_t sub_1C617DFD4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v5;
  unsigned int v8;
  unsigned int v9;
  char v10;
  unint64_t EstimatedEdgeWeight;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15[2];
  _BYTE v16[24];
  void *v17;
  uint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x400000000;
  if (a3 == a4)
  {
    v9 = 0;
    v8 = 0;
    v14 = 0;
LABEL_14:
    v12 = (unint64_t)v9 << 8;
  }
  else
  {
    v5 = a3;
    v8 = 0;
    v9 = 0;
    v10 = 1;
    while (1)
    {
      llvm::BranchProbabilityInfo::LoopBlock::LoopBlock((uint64_t)v16, *v5, *(uint64_t **)(a1 + 56), *(uint64_t **)(a1 + 64));
      v15[0] = a2;
      v15[1] = (uint64_t)v16;
      EstimatedEdgeWeight = llvm::BranchProbabilityInfo::getEstimatedEdgeWeight(a1, v15);
      if (!HIDWORD(EstimatedEdgeWeight))
        break;
      if ((v10 & 1) != 0 || (v8 | (v9 << 8)) < EstimatedEdgeWeight)
      {
        v8 = EstimatedEdgeWeight;
        v9 = EstimatedEdgeWeight >> 8;
      }
      v10 = 0;
      if (++v5 == a4)
      {
        v14 = 0x100000000;
        goto LABEL_14;
      }
    }
    v8 = 0;
    v14 = 0;
    v12 = 0;
  }
  if (v17 != v19)
    free(v17);
  return v12 | v14 & 0x100000000 | v8;
}

llvm::raw_ostream *llvm::BranchProbabilityInfo::print(llvm::BranchProbabilityInfo *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const llvm::BasicBlock *v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  int v11;
  unsigned int i;
  const llvm::BasicBlock *Successor;
  llvm::raw_ostream *v14;

  result = sub_1C4816AD8(a2, "---- Branch Probabilities ----\n");
  v5 = *((_QWORD *)this + 6);
  v6 = v5 + 72;
  v7 = *(_QWORD *)(v5 + 80);
  if (v7 != v5 + 72)
  {
    do
    {
      if (v7)
        v8 = (const llvm::BasicBlock *)(v7 - 24);
      else
        v8 = 0;
      v9 = (_QWORD *)*((_QWORD *)v8 + 5);
      if (v9 != (_QWORD *)((char *)v8 + 40))
      {
        if (v9)
          v10 = (unsigned __int8 *)(v9 - 3);
        else
          v10 = 0;
        if (v10[16] - 29 <= 0xA)
        {
          result = (llvm::raw_ostream *)llvm::Instruction::getNumSuccessors((llvm::Instruction *)v10);
          if ((_DWORD)result)
          {
            v11 = (int)result;
            for (i = 0; i != v11; ++i)
            {
              Successor = (const llvm::BasicBlock *)llvm::Instruction::getSuccessor((llvm::Instruction *)v10, i);
              v14 = sub_1C4816AD8(a2, "  ");
              result = llvm::BranchProbabilityInfo::printEdgeProbability(this, v14, v8, Successor);
            }
          }
        }
      }
      v7 = *(_QWORD *)(v7 + 8);
    }
    while (v7 != v6);
  }
  return result;
}

llvm::raw_ostream *llvm::BranchProbabilityInfo::printEdgeProbability(llvm::BranchProbabilityInfo *this, llvm::raw_ostream *a2, const llvm::BasicBlock *a3, const llvm::BasicBlock *a4)
{
  int EdgeProbability;
  llvm::raw_ostream *v9;
  size_t v10;
  char *Name;
  size_t v12;
  void *v13;
  llvm::raw_ostream *v14;
  size_t v15;
  char *v16;
  size_t v17;
  void *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  char *v21;
  int v23;

  EdgeProbability = llvm::BranchProbabilityInfo::getEdgeProbability((uint64_t)this, (uint64_t)a3, (uint64_t)a4);
  v9 = sub_1C4816AD8(a2, "edge ");
  Name = llvm::Value::getName(a3);
  v12 = v10;
  v13 = (void *)*((_QWORD *)v9 + 4);
  if (v10 <= *((_QWORD *)v9 + 3) - (_QWORD)v13)
  {
    if (v10)
    {
      memcpy(v13, Name, v10);
      *((_QWORD *)v9 + 4) += v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, Name, v10);
  }
  v14 = sub_1C4816AD8(v9, " -> ");
  v16 = llvm::Value::getName(a4);
  v17 = v15;
  v18 = (void *)*((_QWORD *)v14 + 4);
  if (v15 <= *((_QWORD *)v14 + 3) - (_QWORD)v18)
  {
    if (v15)
    {
      memcpy(v18, v16, v15);
      *((_QWORD *)v14 + 4) += v17;
    }
  }
  else
  {
    llvm::raw_ostream::write(v14, v16, v15);
  }
  v19 = sub_1C4816AD8(v14, " probability is ");
  v23 = EdgeProbability;
  v20 = llvm::BranchProbability::print((llvm::BranchProbability *)&v23, v19);
  if (llvm::BranchProbabilityInfo::getEdgeProbability((uint64_t)this, (uint64_t)a3, (uint64_t)a4) <= 0x66666666)
    v21 = "\n";
  else
    v21 = " [HOT edge]\n";
  sub_1C4816AD8(v20, v21);
  return a2;
}

uint64_t llvm::BranchProbabilityInfo::copyEdgeProbabilities(llvm::BranchProbabilityInfo *this, llvm::BasicBlock *a2, llvm::BasicBlock *a3)
{
  llvm::BasicBlock *v6;
  unsigned __int8 *v7;
  llvm::Instruction *v8;
  uint64_t result;
  int v10;
  char *v11;
  int i;
  int v13;
  llvm::BasicBlock *v14;
  _QWORD v15[2];
  llvm::BasicBlock *v16;
  llvm::BranchProbabilityInfo *v17;
  uint64_t v18[3];

  llvm::BranchProbabilityInfo::eraseBlock((uint64_t)this, a3);
  v6 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if (v6 == (llvm::BasicBlock *)((char *)a2 + 40))
  {
    v8 = 0;
  }
  else
  {
    if (v6)
      v7 = (unsigned __int8 *)v6 - 24;
    else
      v7 = 0;
    if (v7[16] - 29 >= 0xB)
      v8 = 0;
    else
      v8 = (llvm::Instruction *)v7;
  }
  result = llvm::Instruction::getNumSuccessors(v8);
  if ((_DWORD)result)
  {
    v10 = result;
    v11 = (char *)this + 24;
    v14 = a2;
    LODWORD(v15[0]) = 0;
    v18[0] = 0;
    result = sub_1C4DC40BC((uint64_t)this + 24, (uint64_t *)&v14, v18);
    if ((_DWORD)result)
    {
      if (v18[0] != *((_QWORD *)this + 3) + 24 * *((unsigned int *)this + 10))
      {
        v15[0] = 2;
        v15[1] = 0;
        v16 = a3;
        if (a3 != (llvm::BasicBlock *)-8192 && a3 != (llvm::BasicBlock *)-4096 && a3)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v15);
        v14 = (llvm::BasicBlock *)&off_1E8134DC0;
        v17 = this;
        sub_1C4DC41B8((uint64_t)this, &v14, (uint64_t)v18);
        if (v16 != (llvm::BasicBlock *)-8192 && v16 != (llvm::BasicBlock *)-4096 && v16)
          llvm::ValueHandleBase::RemoveFromUseList(v15);
        for (i = 0; i != v10; ++i)
        {
          v14 = a2;
          LODWORD(v15[0]) = i;
          v13 = *(_DWORD *)(sub_1C4DC495C((uint64_t)v11, (uint64_t)&v14) + 16);
          v14 = a3;
          LODWORD(v15[0]) = i;
          result = sub_1C4DC495C((uint64_t)v11, (uint64_t)&v14);
          *(_DWORD *)(result + 16) = v13;
        }
      }
    }
  }
  return result;
}

llvm::AnalysisUsage *llvm::BranchProbabilityInfoWrapperPass::getAnalysisUsage(llvm::BranchProbabilityInfoWrapperPass *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage *result;

  llvm::AnalysisUsage::addRequiredID(a2, llvm::DominatorTreeWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::LoopInfoWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::DominatorTreeWrapperPass::ID);
  result = llvm::AnalysisUsage::addRequiredID(a2, llvm::PostDominatorTreeWrapperPass::ID);
  *((_BYTE *)a2 + 160) = 1;
  return result;
}

llvm::raw_ostream *llvm::BranchProbabilityInfoWrapperPass::print(llvm::BranchProbabilityInfoWrapperPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  return llvm::BranchProbabilityInfo::print((llvm::BranchProbabilityInfoWrapperPass *)((char *)this + 32), a2);
}

_QWORD *llvm::BranchProbabilityPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  size_t v10;
  char *Name;
  size_t v12;
  void *v13;
  llvm::raw_ostream *v14;
  uint64_t ResultImpl;

  v8 = sub_1C4816AD8(*a1, "Printing analysis results of BPI for function ");
  v9 = sub_1C4816AD8(v8, "'");
  Name = llvm::Value::getName(a2);
  v12 = v10;
  v13 = (void *)*((_QWORD *)v9 + 4);
  if (v10 <= *((_QWORD *)v9 + 3) - (_QWORD)v13)
  {
    if (v10)
    {
      memcpy(v13, Name, v10);
      *((_QWORD *)v9 + 4) += v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, Name, v10);
  }
  v14 = sub_1C4816AD8(v9, "':");
  sub_1C4816AD8(v14, "\n");
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::BranchProbabilityAnalysis::Key, (uint64_t)a2);
  llvm::BranchProbabilityInfo::print((llvm::BranchProbabilityInfo *)(ResultImpl + 8), *a1);
  return llvm::InstCountPass::run(a4);
}

void sub_1C617E67C(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8134D20;
  sub_1C4DC0BBC((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
}

void sub_1C617E6AC(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E8134D20;
  sub_1C4DC0BBC((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::BranchProbabilityInfoWrapperPass *llvm::callDefaultCtor<llvm::BranchProbabilityInfoWrapperPass>()
{
  llvm::BranchProbabilityInfoWrapperPass *v0;

  v0 = (llvm::BranchProbabilityInfoWrapperPass *)operator new();
  return llvm::BranchProbabilityInfoWrapperPass::BranchProbabilityInfoWrapperPass(v0);
}

_OWORD *sub_1C617E718(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _OWORD *result;
  int v5;
  _OWORD *v6;

  if (a2 <= 4)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    v3 = a2;
    result = operator new(24 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      v6 = (_OWORD *)((char *)result + 24 * v3);
      goto LABEL_6;
    }
  }
  result = a1 + 1;
  v6 = a1 + 13;
  do
  {
LABEL_6:
    *result = xmmword_1C85F22B0;
    result = (_OWORD *)((char *)result + 24);
  }
  while (result != v6);
  return result;
}

uint64_t sub_1C617E7A8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v16 = 0;
  result = sub_1C4DC1ABC(a2, *(_QWORD *)a3, *(_DWORD *)(a3 + 8), &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 4;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(_DWORD *)(a2 + 16);
    }
    v13 = 0;
    v12 = v14 + 24 * v15;
  }
  else
  {
    result = sub_1C617E884((_DWORD *)a2, a3, v16);
    v9 = result;
    *(_QWORD *)result = *(_QWORD *)a3;
    *(_DWORD *)(result + 8) = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(result + 16) = *a4;
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 4;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(_DWORD *)(a2 + 16);
    }
    v12 = v10 + 24 * v11;
    v13 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v13;
  return result;
}

uint64_t sub_1C617E884(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v4 = 4;
  else
    v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[1] > v4 >> 3)
  {
    goto LABEL_5;
  }
  v8 = (uint64_t)a1;
  sub_1C4DC3B9C((uint64_t)a1, v4);
  v9 = 0;
  sub_1C4DC1ABC(v8, *(_QWORD *)a2, *(_DWORD *)(a2 + 8), &v9);
  a1 = (_DWORD *)v8;
  a3 = v9;
LABEL_5:
  *a1 += 2;
  if (*(_QWORD *)a3 != -4096 || *(_DWORD *)(a3 + 8) != 0x7FFFFFFF)
    --a1[1];
  return a3;
}

uint64_t sub_1C617E954(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  int v10;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;

  v4 = a2;
  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v7 = (_OWORD *)(result + 8);
    v8 = (_OWORD *)(result + 104);
  }
  else
  {
    v14 = *(_DWORD *)(result + 16);
    if (!v14)
      goto LABEL_4;
    v7 = *(_OWORD **)(result + 8);
    v8 = (_OWORD *)((char *)v7 + 24 * v14);
  }
  do
  {
    *v7 = xmmword_1C85F22B0;
    v7 = (_OWORD *)((char *)v7 + 24);
  }
  while (v7 != v8);
LABEL_4:
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      v10 = *(_DWORD *)(v4 + 8);
      if ((*(_QWORD *)v4 != -4096 || v10 != 0x7FFFFFFF) && (v9 != -8192 || v10 != 0x80000000))
      {
        v15 = 0;
        result = sub_1C4DC1ABC((uint64_t)v5, v9, v10, &v15);
        v13 = v15;
        *v15 = *(_QWORD *)v4;
        *((_DWORD *)v13 + 2) = *(_DWORD *)(v4 + 8);
        *((_DWORD *)v13 + 4) = *(_DWORD *)(v4 + 16);
        *v5 += 2;
      }
      v4 += 24;
    }
    while (v4 != a3);
  }
  return result;
}

_OWORD *sub_1C617EA48(_OWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  char *v6;
  char *v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    v6 = (char *)result + 8;
    *(_QWORD *)result = 1;
    v7 = (char *)result + 104;
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
    return sub_1C617E718(v1, v5);
  if (v5 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](*((_QWORD *)result + 1), 8);
    return sub_1C617E718(v1, v5);
  }
  *(_QWORD *)result = 0;
  if (!v5)
    return result;
  v6 = (char *)*((_QWORD *)result + 1);
  v7 = &v6[24 * v5];
  do
  {
LABEL_10:
    *(_OWORD *)v6 = xmmword_1C85F22B0;
    v6 += 24;
  }
  while (v6 != v7);
  return result;
}

_QWORD *llvm::CFGViewerPass::run@<X0>(llvm::Value *this@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v6;
  size_t v7;
  uint64_t v8;
  char *v9;
  Function *v10;
  uint64_t v11;
  const llvm::BlockFrequencyInfo *v12;
  unint64_t MaxFreq;
  uint64_t v15[2];

  v6 = byte_1ED7F09CF;
  if (byte_1ED7F09CF >= 0)
    v7 = byte_1ED7F09CF & 0x7F;
  else
    v7 = qword_1ED7F09C0;
  if (!v7
    || ((v15[0] = (uint64_t)llvm::Value::getName(this), v15[1] = v8, v6 >= 0)
      ? (v9 = (char *)&qword_1ED7F09B8)
      : (v9 = (char *)qword_1ED7F09B8),
        llvm::StringRef::find(v15, v9, v7, 0) != -1))
  {
    v10 = (Function *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BlockFrequencyAnalysis::Key, (uint64_t)this)+ 8);
    v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BranchProbabilityAnalysis::Key, (uint64_t)this)
        + 8;
    MaxFreq = llvm::getMaxFreq(this, v10, v12);
    sub_1C4DC6F9C((uint64_t ***)this, (uint64_t)v10, v11, MaxFreq, 0);
  }
  return llvm::InstCountPass::run(a3);
}

_QWORD *llvm::CFGOnlyViewerPass::run@<X0>(llvm::Value *this@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v6;
  size_t v7;
  uint64_t v8;
  char *v9;
  Function *v10;
  uint64_t v11;
  const llvm::BlockFrequencyInfo *v12;
  unint64_t MaxFreq;
  uint64_t v15[2];

  v6 = byte_1ED7F09CF;
  if (byte_1ED7F09CF >= 0)
    v7 = byte_1ED7F09CF & 0x7F;
  else
    v7 = qword_1ED7F09C0;
  if (!v7
    || ((v15[0] = (uint64_t)llvm::Value::getName(this), v15[1] = v8, v6 >= 0)
      ? (v9 = (char *)&qword_1ED7F09B8)
      : (v9 = (char *)qword_1ED7F09B8),
        llvm::StringRef::find(v15, v9, v7, 0) != -1))
  {
    v10 = (Function *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BlockFrequencyAnalysis::Key, (uint64_t)this)+ 8);
    v11 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BranchProbabilityAnalysis::Key, (uint64_t)this)
        + 8;
    MaxFreq = llvm::getMaxFreq(this, v10, v12);
    sub_1C4DC6F9C((uint64_t ***)this, (uint64_t)v10, v11, MaxFreq, 1);
  }
  return llvm::InstCountPass::run(a3);
}

_QWORD *llvm::CFGPrinterPass::run@<X0>(llvm::Value *this@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v6;
  size_t v7;
  uint64_t v8;
  char *v9;
  Function *v10;
  char *v11;
  const llvm::BlockFrequencyInfo *v12;
  uint64_t **MaxFreq;
  uint64_t v15[2];

  v6 = byte_1ED7F09CF;
  if (byte_1ED7F09CF >= 0)
    v7 = byte_1ED7F09CF & 0x7F;
  else
    v7 = qword_1ED7F09C0;
  if (!v7
    || ((v15[0] = (uint64_t)llvm::Value::getName(this), v15[1] = v8, v6 >= 0)
      ? (v9 = (char *)&qword_1ED7F09B8)
      : (v9 = (char *)qword_1ED7F09B8),
        llvm::StringRef::find(v15, v9, v7, 0) != -1))
  {
    v10 = (Function *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BlockFrequencyAnalysis::Key, (uint64_t)this)+ 8);
    v11 = (char *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BranchProbabilityAnalysis::Key, (uint64_t)this)+ 8);
    MaxFreq = (uint64_t **)llvm::getMaxFreq(this, v10, v12);
    sub_1C4DC728C((uint64_t ***)this, (uint64_t)v10, v11, MaxFreq, 0);
  }
  return llvm::InstCountPass::run(a3);
}

_QWORD *llvm::CFGOnlyPrinterPass::run@<X0>(llvm::Value *this@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v6;
  size_t v7;
  uint64_t v8;
  char *v9;
  Function *v10;
  char *v11;
  const llvm::BlockFrequencyInfo *v12;
  uint64_t **MaxFreq;
  uint64_t v15[2];

  v6 = byte_1ED7F09CF;
  if (byte_1ED7F09CF >= 0)
    v7 = byte_1ED7F09CF & 0x7F;
  else
    v7 = qword_1ED7F09C0;
  if (!v7
    || ((v15[0] = (uint64_t)llvm::Value::getName(this), v15[1] = v8, v6 >= 0)
      ? (v9 = (char *)&qword_1ED7F09B8)
      : (v9 = (char *)qword_1ED7F09B8),
        llvm::StringRef::find(v15, v9, v7, 0) != -1))
  {
    v10 = (Function *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BlockFrequencyAnalysis::Key, (uint64_t)this)+ 8);
    v11 = (char *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::BranchProbabilityAnalysis::Key, (uint64_t)this)+ 8);
    MaxFreq = (uint64_t **)llvm::getMaxFreq(this, v10, v12);
    sub_1C4DC728C((uint64_t ***)this, (uint64_t)v10, v11, MaxFreq, 1);
  }
  return llvm::InstCountPass::run(a3);
}

void llvm::Function::viewCFG(llvm::Function *this)
{
  llvm::Function::viewCFG(this, 0, 0, 0);
}

void llvm::Function::viewCFG(llvm::Function *this, char a2, Function *a3, const llvm::BranchProbabilityInfo *a4)
{
  int v8;
  size_t v9;
  Function *v10;
  char *v11;
  unint64_t MaxFreq;
  uint64_t v13;
  _WORD v14[20];
  _QWORD v15[4];
  __int16 v16;
  char **v17;
  char *Name;
  Function *v19;
  const llvm::BranchProbabilityInfo *v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  BOOL v24;

  v8 = byte_1ED7F09CF;
  if (byte_1ED7F09CF >= 0)
    v9 = byte_1ED7F09CF & 0x7F;
  else
    v9 = qword_1ED7F09C0;
  if (!v9
    || ((Name = llvm::Value::getName(this), v19 = v10, v8 >= 0)
      ? (v11 = (char *)&qword_1ED7F09B8)
      : (v11 = (char *)qword_1ED7F09B8),
        llvm::StringRef::find((uint64_t *)&Name, v11, v9, 0) != -1))
  {
    if (a3)
      MaxFreq = llvm::getMaxFreq(this, a3, (const llvm::BlockFrequencyInfo *)a3);
    else
      MaxFreq = 0;
    Name = (char *)this;
    v19 = a3;
    v20 = a4;
    v21 = MaxFreq;
    v22 = 0;
    v23 = a4 != 0;
    v24 = a3 != 0;
    v17 = &Name;
    v16 = 1283;
    v15[0] = "cfg";
    v15[2] = llvm::Value::getName(this);
    v15[3] = v13;
    v14[16] = 257;
    sub_1C4DC76F0((uint64_t)&v17, (llvm::Twine *)v15, a2, (llvm::Twine *)v14);
  }
}

void llvm::Function::viewCFGOnly(llvm::Function *this)
{
  llvm::Function::viewCFG(this, 1, 0, 0);
}

uint64_t sub_1C617F014(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 24) = a4;
  MEMORY[0x1CAA32FB4](0, 8);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  MEMORY[0x1CAA32FB4](0, 8);
  *(_BYTE *)(a1 + 16) = 0;
  return a1;
}

void sub_1C617F06C(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  llvm::Value *v6;

  v1 = *(_QWORD *)*a1[1];
  v2 = v1 + 72;
  v3 = *(_QWORD *)(v1 + 80);
  if (v3 != v1 + 72)
  {
    v5 = (uint64_t)(a1 + 3);
    do
    {
      if (v3)
        v6 = (llvm::Value *)(v3 - 24);
      else
        v6 = 0;
      if (!llvm::DOTGraphTraits<llvm::DOTFuncInfo *>::isNodeHidden(v5, (uint64_t)v6, *a1[1]))
        sub_1C4DC8F08(a1, v6);
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
}

void sub_1C617F0F4(std::string *a1, char a2, llvm::Value *a3)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE v5[9];
  uint64_t v6;

  if (a2)
  {
    sub_1C4DCA780(a3, a1);
  }
  else
  {
    *(_QWORD *)&v5[1] = v3;
    v6 = v4;
    sub_1C4DCA9C4(a3, (void (*)(uint64_t, void (***)(llvm::raw_ostream *__hidden), llvm::Value *))sub_1C617F190, (uint64_t)v5, (void (*)(uint64_t, std::string *, unsigned int *, std::string::size_type))sub_1C617F19C, (uint64_t)sub_1C617F158, a1);
  }
}

std::string *sub_1C617F158(std::string *a1, _DWORD *a2, unsigned int a3)
{
  std::string *result;

  result = std::string::erase(a1, *a2, a3 - (unint64_t)*a2);
  --*a2;
  return result;
}

void sub_1C617F190(int a1, llvm::raw_ostream *a2, llvm::Value *this)
{
  llvm::Value::print(this, a2, 0);
}

uint64_t sub_1C617F19C(uint64_t (*a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a2, a3, a4);
}

llvm::raw_ostream **sub_1C617F1B0(llvm::raw_ostream **result, unint64_t a2, int a3, unint64_t a4, uint64_t a5)
{
  llvm::raw_ostream **v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  char v13;
  int v14;
  uint64_t v15;
  llvm::raw_ostream *v16;
  char v17;
  BOOL v18;
  const char *v19;
  size_t v20;
  size_t v21;
  llvm::raw_ostream *v22;

  if (a3 <= 64)
  {
    v9 = result;
    v10 = sub_1C4816AD8(*result, "\tNode");
    llvm::write_hex(v10, a2, 3, 0, 0);
    if ((a3 & 0x80000000) == 0)
    {
      v11 = sub_1C4816AD8(*v9, ":s");
      llvm::raw_ostream::operator<<(v11, a3);
    }
    v12 = sub_1C4816AD8(*v9, " -> Node");
    llvm::write_hex(v12, a4, 3, 0, 0);
    v13 = *(_BYTE *)(a5 + 23);
    v14 = v13;
    v15 = v13 & 0x7F;
    if (v14 < 0)
      v15 = *(_QWORD *)(a5 + 8);
    if (v15)
    {
      v16 = sub_1C4816AD8(*v9, "[");
      v17 = *(_BYTE *)(a5 + 23);
      v18 = v17 < 0;
      if (v17 >= 0)
        v19 = (const char *)a5;
      else
        v19 = *(const char **)a5;
      v20 = v17 & 0x7F;
      if (v18)
        v21 = *(_QWORD *)(a5 + 8);
      else
        v21 = v20;
      v22 = llvm::raw_ostream::write(v16, v19, v21);
      sub_1C4816AD8(v22, "]");
    }
    return (llvm::raw_ostream **)sub_1C4816AD8(*v9, ";\n");
  }
  return result;
}

void sub_1C617F2C4()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C617F2D8(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  sub_1C4DCAFD8(*(double **)(a1 + 8), a2, a3, a4);
}

void sub_1C617F2E4()
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C617F2F8(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return sub_1C617F300((unint64_t *)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *sub_1C617F300(unint64_t *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t *v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  int v11;
  unsigned int v12;
  size_t v13;
  int v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;

  v15 = a3;
  v16 = a4;
  v14 = 0;
  if (sub_1C617F438(&v15, &v14))
  {
    v7 = v14;
    v17 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v15, (llvm::StringRef *)0xA, &v17, v6))
      v8 = 0;
    else
      v8 = v17;
    if (llvm::isPrefixedHexStyle(v7))
      v9 = v8 + 2;
    else
      v9 = v8;
    return llvm::write_hex(a2, *a1, v14, v9, 1);
  }
  if (v16)
  {
    v11 = 0;
    v12 = *v15;
    if (v12 <= 0x63)
    {
      if (v12 != 68)
      {
        if (v12 != 78)
          goto LABEL_20;
        goto LABEL_17;
      }
LABEL_18:
      v11 = 0;
      ++v15;
      goto LABEL_19;
    }
    if (v12 == 100)
      goto LABEL_18;
    if (v12 == 110)
    {
LABEL_17:
      ++v15;
      v11 = 1;
LABEL_19:
      --v16;
    }
  }
  else
  {
    v11 = 0;
  }
LABEL_20:
  v17 = 0;
  if (llvm::consumeUnsignedInteger((llvm *)&v15, (llvm::StringRef *)0xA, &v17, v6))
    v13 = 0;
  else
    v13 = v17;
  return sub_1C5E21910(a2, *a1, v13, v11, 0);
}

BOOL sub_1C617F438(unsigned __int8 **a1, int *a2)
{
  _BOOL8 v4;
  int v5;

  v4 = llvm::StringRef::startswith_insensitive(a1, "x", 1uLL);
  if (v4)
  {
    if ((sub_1C49CDD20((const void **)a1, "x-", 2uLL) & 1) != 0)
    {
      v5 = 1;
    }
    else if ((sub_1C49CDD20((const void **)a1, "X-", 2uLL) & 1) != 0)
    {
      v5 = 0;
    }
    else if ((sub_1C49CDD20((const void **)a1, "x+", 2uLL) & 1) != 0
           || (sub_1C49CDD20((const void **)a1, "x", 1uLL) & 1) != 0)
    {
      v5 = 3;
    }
    else
    {
      v5 = 2;
      if ((sub_1C49CDD20((const void **)a1, "X+", 2uLL) & 1) == 0)
      {
        if (!sub_1C49CDD20((const void **)a1, "X", 1uLL))
          return v4;
        v5 = 2;
      }
    }
    *a2 = v5;
  }
  return v4;
}

void sub_1C617F530(char **a1)
{
  uint64_t v2;
  char *v3;

  v2 = sub_1C47AD050((uint64_t)qword_1ED7F04B0, 0, 0);
  byte_1ED7F0530 = 0;
  qword_1ED7F0538 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7F0540 = 0;
  qword_1ED7F04B0[0] = (uint64_t)&unk_1E819E898;
  qword_1ED7F0548 = (uint64_t)&off_1E819E9A0;
  qword_1ED7F0550 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7F0568 = (uint64_t)&qword_1ED7F0550;
  llvm::cl::Option::setArgStr(v2, "cfg-hide-unreachable-paths", 0x1AuLL);
  v3 = *a1;
  byte_1ED7F0530 = **a1;
  byte_1ED7F0541 = 1;
  byte_1ED7F0540 = *v3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED7F04B0);
}

void sub_1C617F5E0(char **a1)
{
  uint64_t v2;
  char *v3;

  v2 = sub_1C47AD050((uint64_t)qword_1ED7F0570, 0, 0);
  byte_1ED7F05F0 = 0;
  qword_1ED7F05F8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7F0600 = 0;
  qword_1ED7F0570[0] = (uint64_t)&unk_1E819E898;
  qword_1ED7F0608 = (uint64_t)&off_1E819E9A0;
  qword_1ED7F0610 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7F0628 = (uint64_t)&qword_1ED7F0610;
  llvm::cl::Option::setArgStr(v2, "cfg-hide-deoptimize-paths", 0x19uLL);
  v3 = *a1;
  byte_1ED7F05F0 = **a1;
  byte_1ED7F0601 = 1;
  byte_1ED7F0600 = *v3;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED7F0570);
}

void sub_1C617F690(uint64_t **a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED7F0870, 0, 0);
  xmmword_1ED7F08F0 = 0u;
  *(_OWORD *)&qword_1ED7F0900 = 0u;
  *((_QWORD *)&xmmword_1ED7F08F0 + 1) = &unk_1E8134CB8;
  qword_1ED7F0870 = (uint64_t)&unk_1E8134C50;
  qword_1ED7F0910 = (uint64_t)&unk_1E819E320;
  qword_1ED7F0918 = (uint64_t)&unk_1E8134CD8;
  qword_1ED7F0930 = (uint64_t)&qword_1ED7F0918;
  llvm::cl::Option::setArgStr(v4, "cfg-hide-cold-paths", 0x13uLL);
  v5 = *a1;
  *(_QWORD *)&xmmword_1ED7F08F0 = **a1;
  byte_1ED7F0908 = 1;
  qword_1ED7F0900 = *v5;
  xmmword_1ED7F0890 = *a2;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F0870);
}

_QWORD *sub_1C617F758(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C61252B8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C617F7BC((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
  }
  return v5;
}

_QWORD *sub_1C617F7BC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DCB5F4(a1, v7);
  v9 = 0;
  sub_1C61252B8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C617F868(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C61252B8((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_BYTE *)v9 + 8) = *(_BYTE *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void llvm::CFLAndersAAResult::~CFLAndersAAResult(llvm::CFLAndersAAResult *this)
{
  llvm::CFLAndersAAResult *v2;
  uint64_t v3;

  sub_1C617FEBC((_QWORD **)this + 8);
  sub_1C61811A0((unsigned int *)this + 10);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 5), 8);
  v2 = (llvm::CFLAndersAAResult *)*((_QWORD *)this + 4);
  if (v2 == (llvm::CFLAndersAAResult *)((char *)this + 8))
  {
    v3 = 4;
    v2 = (llvm::CFLAndersAAResult *)((char *)this + 8);
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

uint64_t llvm::CFLAndersAAResult::FunctionInfo::getAttrs(llvm::CFLAndersAAResult::FunctionInfo *this, const llvm::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  if (sub_1C6144BDC(*((_QWORD *)this + 3), *((_DWORD *)this + 10), (uint64_t)a2, &v7))
  {
    v3 = v7;
    v4 = *((_QWORD *)this + 3);
    v5 = *((unsigned int *)this + 10);
  }
  else
  {
    v4 = *((_QWORD *)this + 3);
    v5 = *((unsigned int *)this + 10);
    v3 = v4 + 16 * v5;
  }
  if (v3 == v4 + 16 * v5)
    return 0;
  else
    return *(_QWORD *)(v3 + 8);
}

unsigned int *llvm::CFLAndersAAResult::scan(llvm::CFLAndersAAResult *this, const llvm::Function *a2)
{
  char *v4;
  _QWORD *v5;
  unsigned int *v6;
  const llvm::Function *v8;
  _BYTE v9[24];
  const llvm::Function *v10;
  unsigned int v11[100];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (char *)this + 40;
  v10 = a2;
  LOBYTE(v11[0]) = 0;
  v12 = 0;
  sub_1C6181E50((uint64_t)v9, (uint64_t)this + 40, (uint64_t *)&v10, (uint64_t)v11);
  if (v12)
    sub_1C61810BC(v11);
  llvm::CFLAndersAAResult::buildInfoFrom(this, a2, (uint64_t)&v10);
  v8 = a2;
  v5 = sub_1C61821A0((uint64_t)v4, (uint64_t *)&v8);
  v6 = (unsigned int *)(v5 + 1);
  if (*((_BYTE *)v5 + 408))
  {
    sub_1C6182268(v6, (uint64_t)&v10);
  }
  else
  {
    sub_1C6180D5C((uint64_t)v6, (uint64_t)&v10);
    *((_BYTE *)v5 + 408) = 1;
  }
  *((_QWORD *)this + 8) = sub_1C4DD01D8(*((_QWORD *)this + 8), (uint64_t)a2, (uint64_t)this);
  return sub_1C61810BC((unsigned int *)&v10);
}

int32x2_t sub_1C617FB84(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  if (sub_1C6181F48(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
  {
    v4 = v5;
    if (*(_BYTE *)(v5 + 408))
    {
      sub_1C61810BC((unsigned int *)(v5 + 8));
      *(_BYTE *)(v4 + 408) = 0;
    }
    *(_QWORD *)v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t llvm::CFLAndersAAResult::alias(llvm::CFLAndersAAResult *a1, unint64_t *a2, unint64_t *a3)
{
  if (*a2 == *a3)
    return 3;
  if (*(unsigned __int8 *)(*a2 + 16) > 0x14u || *(unsigned __int8 *)(*a3 + 16) >= 0x15u)
    return llvm::CFLAndersAAResult::query(a1, a2, a3);
  return 1;
}

void llvm::CFLAndersAA::run(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = &off_1E8135198;
  *(_QWORD *)(a2 + 16) = a1;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = a2 + 8;
  *(_DWORD *)(a2 + 56) = 0;
}

void llvm::initializeCFLAndersAAWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82D010);
  if (v2 != -1)
  {
    v5[0] = sub_1C4DCD96C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82D010, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::CFLAndersAAWrapperPass *llvm::createCFLAndersAAWrapperPass(llvm *this)
{
  llvm::CFLAndersAAWrapperPass *v1;

  v1 = (llvm::CFLAndersAAWrapperPass *)operator new();
  return llvm::CFLAndersAAWrapperPass::CFLAndersAAWrapperPass(v1);
}

llvm::CFLAndersAAWrapperPass *llvm::CFLAndersAAWrapperPass::CFLAndersAAWrapperPass(llvm::CFLAndersAAWrapperPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::CFLAndersAAWrapperPass::ID;
  *((_DWORD *)this + 6) = 4;
  *(_QWORD *)this = &off_1E81350C8;
  *((_QWORD *)this + 4) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82D010);
  if (v2 != -1)
  {
    v6[0] = sub_1C4DCD96C;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82D010, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

_QWORD *llvm::CFLAndersAAWrapperPass::initializePass(llvm::CFLAndersAAWrapperPass *this)
{
  uint64_t v2;
  uint64_t (**v3)();
  llvm::CFLAndersAAResult *v4;
  uint64_t (**v5)(_QWORD *);
  _QWORD *result;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v3 = &off_1E81351E0;
  v7[0] = &off_1E81351E0;
  v7[1] = this;
  v8 = v7;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = &off_1E81351E0;
  *(_QWORD *)(v2 + 16) = this;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = v2 + 8;
  *(_DWORD *)(v2 + 56) = 0;
  v4 = (llvm::CFLAndersAAResult *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v2;
  if (!v4)
    goto LABEL_2;
  llvm::CFLAndersAAResult::~CFLAndersAAResult(v4);
  MEMORY[0x1CAA32FC0]();
  result = v8;
  if (v8 == v7)
  {
    v3 = (uint64_t (**)())v7[0];
LABEL_2:
    v5 = (uint64_t (**)(_QWORD *))(v3 + 4);
    result = v7;
    return (_QWORD *)(*v5)(result);
  }
  if (v8)
  {
    v5 = (uint64_t (**)(_QWORD *))(*v8 + 40);
    return (_QWORD *)(*v5)(result);
  }
  return result;
}

llvm::AnalysisUsage *llvm::CFLAndersAAWrapperPass::getAnalysisUsage(llvm::CFLAndersAAWrapperPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  return llvm::AnalysisUsage::addRequiredID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
}

void sub_1C617FE98(llvm::ImmutablePass *a1)
{
  sub_1C618114C(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C617FEBC(_QWORD **a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *a1;
  while (v2)
  {
    v3 = v2;
    v2 = (_QWORD *)*v2;
    v4 = v3[4];
    if (v4 != -8192 && v4 != -4096 && v4 != 0)
      llvm::ValueHandleBase::RemoveFromUseList(v3 + 2);
    operator delete(v3);
  }
  *a1 = 0;
}

uint64_t sub_1C617FF20(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = sub_1C617FF94(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6180090(a1, a2, v7);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_DWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
  }
  return v5;
}

uint64_t sub_1C617FF94(uint64_t a1, int a2, uint64_t a3, int a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ~((unint64_t)(37 * a4) << 32)
       + (37 * a4)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (uint64_t *)(a1 + 40 * v9);
    v11 = *v10;
    v12 = *((_DWORD *)v10 + 2);
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -2;
        if (v18 && v11 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (uint64_t *)(a1 + 40 * (v20 & v8));
        v11 = *v10;
        v12 = *((_DWORD *)v10 + 2);
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

uint64_t sub_1C6180090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DCDBB4(a1, v6);
  v9 = 0;
  sub_1C617FF94(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 != -4096 || *(_DWORD *)(a3 + 8) != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C618014C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _OWORD *v13;
  int v14;
  int v15;
  _OWORD *v16;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 40 * v6;
    do
    {
      *v7 = xmmword_1C85F22C0;
      v7 = (_OWORD *)((char *)v7 + 40);
      v8 -= 40;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    v10 = *(_DWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      v16 = 0;
      sub_1C617FF94(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v16);
      v13 = v16;
      *v16 = *(_OWORD *)a2;
      *((_DWORD *)v13 + 8) = 0;
      *((_QWORD *)v13 + 2) = 0;
      *((_QWORD *)v13 + 3) = 0;
      *((_QWORD *)v13 + 2) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 16) = 0;
      *((_DWORD *)v13 + 6) = *(_DWORD *)(a2 + 24);
      *(_DWORD *)(a2 + 24) = 0;
      v14 = *((_DWORD *)v13 + 7);
      *((_DWORD *)v13 + 7) = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(a2 + 28) = v14;
      v15 = *((_DWORD *)v13 + 8);
      *((_DWORD *)v13 + 8) = *(_DWORD *)(a2 + 32);
      *(_DWORD *)(a2 + 32) = v15;
      ++*(_DWORD *)(v5 + 8);
      result = MEMORY[0x1CAA32FB4](0, 8);
    }
    a2 += 40;
  }
  return result;
}

uint64_t sub_1C618025C(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = sub_1C61802CC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C61803C8(a1, a2, v7);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_QWORD *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t sub_1C61802CC(uint64_t a1, int a2, uint64_t a3, int a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ~((unint64_t)(37 * a4) << 32)
       + (37 * a4)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (uint64_t *)(a1 + 24 * v9);
    v11 = *v10;
    v12 = *((_DWORD *)v10 + 2);
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -2;
        if (v18 && v11 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (uint64_t *)(a1 + 24 * (v20 & v8));
        v11 = *v10;
        v12 = *((_DWORD *)v10 + 2);
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

uint64_t sub_1C61803C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DCDC7C(a1, v6);
  v9 = 0;
  sub_1C61802CC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 != -4096 || *(_DWORD *)(a3 + 8) != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6180484(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _OWORD *v13;
  _OWORD *v14;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_1C85F22C0;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    v10 = *(_DWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      v14 = 0;
      result = sub_1C61802CC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
      v13 = v14;
      *v14 = *(_OWORD *)a2;
      *((_QWORD *)v13 + 2) = *(_QWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1C6180550(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = a2;
  if (sub_1C61805E8((uint64_t *)a1, &v12, &v11))
  {
    v5 = v11;
    v6 = *(_QWORD *)a1;
    v7 = *(unsigned int *)(a1 + 16);
  }
  else
  {
    v6 = *(_QWORD *)a1;
    v7 = *(unsigned int *)(a1 + 16);
    v5 = *(_QWORD *)a1 + 32 * v7;
  }
  if (v5 == v6 + 32 * v7)
    return 0;
  v9 = v5 + 8;
  v8 = *(_QWORD *)(v5 + 8);
  if (-1227133513 * ((unint64_t)(*(_QWORD *)(v9 + 8) - v8) >> 3) <= a3)
    return 0;
  else
    return v8 + 56 * a3;
}

uint64_t sub_1C61805E8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 32 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 32 * v6);
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

uint64_t sub_1C6180684(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v4 = sub_1C617FF94(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6180090(a1, a2, v7);
    *(_OWORD *)v5 = *(_OWORD *)a2;
    *(_QWORD *)(v5 + 24) = 0;
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 16) = 0;
  }
  return v5;
}

uint64_t sub_1C61806F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v10 = 0;
  result = sub_1C6180788(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_QWORD *)a3, *(_DWORD *)(a3 + 8), &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = sub_1C618087C(a2, a3, v10);
    v7 = result;
    *(_OWORD *)result = *(_OWORD *)a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_1C6180788(uint64_t a1, int a2, uint64_t a3, int a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v14;
  uint64_t *v16;
  int v17;
  BOOL v18;
  unsigned int v20;

  if (a2)
  {
    v5 = ~((unint64_t)(37 * a4) << 32)
       + (37 * a4)
       + ((unint64_t)((a3 >> 4) ^ (a3 >> 9)) << 32);
    v6 = (v5 ^ (v5 >> 22)) + ~((v5 ^ (v5 >> 22)) << 13);
    v7 = (9 * (v6 ^ (v6 >> 8))) ^ ((9 * (v6 ^ (v6 >> 8))) >> 15);
    v8 = a2 - 1;
    v9 = (a2 - 1) & (((v7 + ~(v7 << 27)) >> 31) ^ (v7 + ~((_DWORD)v7 << 27)));
    v10 = (uint64_t *)(a1 + 16 * v9);
    v11 = *v10;
    v12 = *((_DWORD *)v10 + 2);
    if (*v10 == a3 && v12 == a4)
    {
      v14 = 1;
    }
    else
    {
      v16 = 0;
      v17 = 1;
      while (v11 != -4096 || v12 != -1)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v12 == -2;
        if (v18 && v11 == -8192)
          v16 = v10;
        v20 = v9 + v17++;
        v9 = v20 & v8;
        v10 = (uint64_t *)(a1 + 16 * (v20 & v8));
        v11 = *v10;
        v12 = *((_DWORD *)v10 + 2);
        v14 = 1;
        if (*v10 == a3 && v12 == a4)
          goto LABEL_8;
      }
      v14 = 0;
      if (v16)
        v10 = v16;
    }
  }
  else
  {
    v10 = 0;
    v14 = 0;
  }
LABEL_8:
  *a5 = v10;
  return v14;
}

uint64_t sub_1C618087C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DCDDEC(a1, v6);
  v9 = 0;
  sub_1C6180788(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 != -4096 || *(_DWORD *)(a3 + 8) != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6180938(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _OWORD *v13;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7++ = xmmword_1C85F22C0;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    v10 = *(_DWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      v13 = 0;
      result = sub_1C6180788(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v13);
      *v13 = *(_OWORD *)a2;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C61809F8(uint64_t *a1)
{
  int v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v2 = *((_DWORD *)a1 + 2);
  result = *a1;
  v4 = *((unsigned int *)a1 + 4);
  v5 = result + 24 * v4;
  if (!v2)
    return v5;
  if ((_DWORD)v4)
  {
    v6 = 24 * v4;
    while (1)
    {
      v7 = *(_DWORD *)(result + 8);
      if ((*(_QWORD *)result != -4096 || v7 != -1) && (*(_QWORD *)result != -8192 || v7 != -2))
        break;
      result += 24;
      v6 -= 24;
      if (!v6)
        return v5;
    }
  }
  return result;
}

_QWORD *sub_1C6180A54(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6180ABC(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C6180ABC(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DCDEA8(a1, v6);
  v8 = 0;
  sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6180B6C(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C6144BDC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C6180C20(__int128 *a1, __int128 *a2)
{
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  v7 = *a1;
  v8 = *((_QWORD *)a1 + 2);
  v5 = *a2;
  v6 = *((_QWORD *)a2 + 2);
  if (sub_1C4DCF33C((uint64_t *)&v7, (uint64_t *)&v5))
    return 0xFFFFFFFFLL;
  v7 = *a2;
  v8 = *((_QWORD *)a2 + 2);
  v5 = *a1;
  v6 = *((_QWORD *)a1 + 2);
  return sub_1C4DCF33C((uint64_t *)&v7, (uint64_t *)&v5);
}

uint64_t sub_1C6180CAC(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;

  if (a2)
  {
    v2 = result + 40 * a2;
    v3 = (_QWORD *)(result + 16);
    do
    {
      v5 = v3 - 2;
      v4 = *(v3 - 2);
      v6 = *((_DWORD *)v3 - 2);
      if ((v4 != -4096 || v6 != -1) && (v4 != -8192 || v6 != -2))
        result = MEMORY[0x1CAA32FB4](*v3, 8);
      v3 += 5;
    }
    while (v5 + 5 != (_QWORD *)v2);
  }
  return result;
}

uint64_t sub_1C6180D1C(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1C6180D5C(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  int v5;
  int v6;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v3 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v3;
  v4 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  v5 = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v5;
  v6 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v6;
  sub_1C6180E08((_QWORD *)(a1 + 48), a2 + 48);
  return a1;
}

_QWORD *sub_1C6180E08(_QWORD *a1, uint64_t a2)
{
  *a1 = a1 + 2;
  a1[1] = 0x800000000;
  if (*(_DWORD *)(a2 + 8))
    sub_1C6180E84((uint64_t)a1, a2);
  a1[26] = a1 + 28;
  a1[27] = 0x800000000;
  if (*(_DWORD *)(a2 + 216))
    sub_1C6180FA8((uint64_t)(a1 + 26), a2 + 208);
  return a1;
}

uint64_t sub_1C6180E84(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 24 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 24 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v10), (const void *)(*(_QWORD *)a2 + 24 * v10), *(_QWORD *)a2 + 24 * v11 - (*(_QWORD *)a2 + 24 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 24);
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

uint64_t sub_1C6180FA8(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_6;
    }
    v7 = (_DWORD *)(a2 + 8);
    v9 = *(unsigned int *)(a2 + 8);
    v10 = *(unsigned int *)(a1 + 8);
    if (v10 >= v9)
    {
      if ((_DWORD)v9)
        memmove(*(void **)a1, v4, 16 * v9);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v9)
    {
      if ((_DWORD)v10)
      {
        memmove(*(void **)a1, v4, 16 * v10);
LABEL_12:
        v11 = *v7;
        if (v10 != v11)
          memcpy((void *)(*(_QWORD *)a1 + 16 * v10), (const void *)(*(_QWORD *)a2 + 16 * v10), *(_QWORD *)a2 + 16 * v11 - (*(_QWORD *)a2 + 16 * v10));
LABEL_16:
        *(_DWORD *)(a1 + 8) = v9;
LABEL_6:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v9, 16);
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

unsigned int *sub_1C61810BC(unsigned int *a1)
{
  unsigned int *v2;
  unsigned int *v3;

  v2 = (unsigned int *)*((_QWORD *)a1 + 32);
  if (v2 != a1 + 68)
    free(v2);
  v3 = (unsigned int *)*((_QWORD *)a1 + 6);
  if (v3 != a1 + 16)
    free(v3);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 3), 8);
  sub_1C4DCF4C8(a1);
  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  return a1;
}

llvm::CFLAndersAAWrapperPass *llvm::callDefaultCtor<llvm::CFLAndersAAWrapperPass>()
{
  llvm::CFLAndersAAWrapperPass *v0;

  v0 = (llvm::CFLAndersAAWrapperPass *)operator new();
  return llvm::CFLAndersAAWrapperPass::CFLAndersAAWrapperPass(v0);
}

void sub_1C618114C(llvm::ImmutablePass *this)
{
  llvm::CFLAndersAAResult *v2;

  *(_QWORD *)this = &off_1E81350C8;
  v2 = (llvm::CFLAndersAAResult *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    llvm::CFLAndersAAResult::~CFLAndersAAResult(v2);
    MEMORY[0x1CAA32FC0]();
  }
  llvm::ImmutablePass::~ImmutablePass(this);
}

unsigned int *sub_1C61811A0(unsigned int *result)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result[4];
  if (v1)
  {
    v2 = *(_QWORD *)result;
    v3 = 416 * v1;
    do
    {
      if ((*(_QWORD *)v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(_BYTE *)(v2 + 408))
        {
          result = sub_1C61810BC((unsigned int *)(v2 + 8));
          *(_BYTE *)(v2 + 408) = 0;
        }
      }
      v2 += 416;
      v3 -= 416;
    }
    while (v3);
  }
  return result;
}

BOOL sub_1C6181204(_BOOL8 result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t GlobalOrArgAttrFromValue;
  _BOOL8 v5;
  uint64_t AttrCaller;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15)
  {
    v3 = (uint64_t *)(result + 16);
    GlobalOrArgAttrFromValue = llvm::cflaa::getGlobalOrArgAttrFromValue(a2);
    v5 = sub_1C4DCF5FC(v3, a2, 0, GlobalOrArgAttrFromValue);
    AttrCaller = llvm::cflaa::getAttrCaller((llvm::cflaa *)v5);
    return sub_1C4DCF5FC(v3, a2, 1, AttrCaller);
  }
  return result;
}

void sub_1C6181270(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1C61812A8()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_BYTE *)(*(_QWORD *)v0 + 8) == 15)
    sub_1C4DCF520(v1, v0, 2);
}

void sub_1C6181334()
{
  JUMPOUT(0x1C61812C4);
}

char *sub_1C6181344()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1C4DCF9BC(v1, v0);
}

void sub_1C618135C()
{
  JUMPOUT(0x1C61812F4);
}

void sub_1C6181368()
{
  uint64_t v0;
  uint64_t v1;

  sub_1C6181B94(v1, v0);
}

char *sub_1C6181380()
{
  uint64_t v0;
  char *v1;

  return sub_1C6181ABC(v1, *(_QWORD *)(v0 - 32), v0, 1);
}

void sub_1C61813BC()
{
  uint64_t v0;
  uint64_t v1;

  sub_1C6181438(v1, v0);
}

char *sub_1C61813D4()
{
  uint64_t v0;
  char *v1;

  return sub_1C6181DE8(v1, v0);
}

void sub_1C61813EC()
{
  uint64_t v0;
  char *v1;

  sub_1C61818B0(v1, *(_QWORD *)(v0 - 64), v0, 0);
  JUMPOUT(0x1C61813A8);
}

void sub_1C6181420()
{
  JUMPOUT(0x1C61813A4);
}

void sub_1C618142C()
{
  JUMPOUT(0x1C6181384);
}

void sub_1C6181438(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(a2 - 32 * v2);
    if (v3)
    {
      if (*(_BYTE *)(*(_QWORD *)v3 + 8) == 15)
      {
        sub_1C4DCF520(a1, v3, 0);
        v5 = *(_QWORD *)(a1 + 32);
        v6 = *(unsigned int *)(v5 + 8);
        if (v6 >= *(_DWORD *)(v5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v6 + 1, 8);
          LODWORD(v6) = *(_DWORD *)(v5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v3;
        ++*(_DWORD *)(v5 + 8);
      }
    }
  }
}

void sub_1C61814C8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

char *sub_1C61814FC()
{
  uint64_t v0;
  char *v1;

  sub_1C61818B0(v1, *(_QWORD *)(v0 - 32 * (*(_DWORD *)(v0 + 20) & 0x7FFFFFF)), v0, 0);
  return sub_1C61818B0(v1, *(_QWORD *)(v0 - 32 * (*(_DWORD *)(v0 + 20) & 0x7FFFFFF) + 32), v0, 0);
}

char *sub_1C6181544()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1C4DCF9BC(v1, v0);
}

void sub_1C6181558(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  sub_1C4DCF520(v13, v12, 2);
}

void sub_1C6181594()
{
  JUMPOUT(0x1C618152CLL);
}

char *sub_1C61815A8()
{
  uint64_t v0;
  char *v1;

  return sub_1C6181ABC(v1, *(_QWORD *)(v0 - 32 * (*(_DWORD *)(v0 + 20) & 0x7FFFFFF)), v0, 1);
}

void sub_1C6181610()
{
  uint64_t v0;
  char *v1;

  sub_1C61818B0(v1, *(_QWORD *)(v0 - 32 * (*(_DWORD *)(v0 + 20) & 0x7FFFFFF) + 32), v0, 0);
  JUMPOUT(0x1C618152CLL);
}

_QWORD *sub_1C6181648(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C61805E8(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C61816AC((uint64_t)a1, (uint64_t)a2, a2, v8);
    v7 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v7;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C61816AC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DCF69C(a1, v7);
  v9 = 0;
  sub_1C61805E8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void sub_1C6181758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void **v9;
  void **v10;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      sub_1C61805E8((uint64_t *)a1, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(void **)a2;
      v9[1] = 0;
      v9[2] = 0;
      v9[3] = 0;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(a2 + 8);
      v9[3] = *(void **)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      ++*(_DWORD *)(a1 + 8);
      v10 = (void **)(a2 + 8);
      sub_1C4DCF458(&v10);
    }
    a2 += 32;
  }
}

void sub_1C6181830(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0x6DB6DB6DB6DB6DB7 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1C4DCF754(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 56 * a2;
    while (v3 != v7)
      v3 = sub_1C6180D1C(v3 - 56);
    a1[1] = v7;
  }
}

char *sub_1C61818B0(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15 && *(_BYTE *)(*(_QWORD *)a3 + 8) == 15)
  {
    v7 = result;
    result = (char *)((uint64_t (*)(void))sub_1C4DCF520)();
    if (a3 != a2)
    {
      sub_1C4DCF520(v7, a3, 0);
      return sub_1C6181948(*((_QWORD *)v7 + 3), a2, 0, a3, 0, a4);
    }
  }
  return result;
}

char *sub_1C6181948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  char *v16;
  unint64_t v17;
  __int128 v18;
  char *result;
  __int128 v20;
  uint64_t v21;

  v12 = sub_1C6181A2C(a1, a2, a3);
  v13 = sub_1C6181A2C(a1, a4, a5);
  *(_QWORD *)&v20 = a4;
  *((_QWORD *)&v20 + 1) = a5;
  v21 = a6;
  v14 = *(_QWORD *)(v12 + 8);
  if (v14 >= *(_QWORD *)(v12 + 16))
  {
    v16 = sub_1C4DCFAFC((void **)v12, (uint64_t)&v20);
  }
  else
  {
    v15 = v20;
    *(_QWORD *)(v14 + 16) = v21;
    *(_OWORD *)v14 = v15;
    v16 = (char *)(v14 + 24);
  }
  *(_QWORD *)(v12 + 8) = v16;
  *(_QWORD *)&v20 = a2;
  *((_QWORD *)&v20 + 1) = a3;
  v21 = a6;
  v17 = *(_QWORD *)(v13 + 32);
  if (v17 >= *(_QWORD *)(v13 + 40))
  {
    result = sub_1C4DCFAFC((void **)(v13 + 24), (uint64_t)&v20);
  }
  else
  {
    v18 = v20;
    *(_QWORD *)(v17 + 16) = v21;
    *(_OWORD *)v17 = v18;
    result = (char *)(v17 + 24);
  }
  *(_QWORD *)(v13 + 32) = result;
  return result;
}

uint64_t sub_1C6181A2C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v9 = 0;
  v5 = sub_1C61805E8((uint64_t *)a1, &v8, &v9);
  result = 0;
  if (v5 && v9 != *(_QWORD *)a1 + 32 * *(unsigned int *)(a1 + 16))
  {
    v7 = *(_QWORD *)(v9 + 8);
    if (-1227133513 * ((unint64_t)(*(_QWORD *)(v9 + 16) - v7) >> 3) <= a3)
      return 0;
    else
      return v7 + 56 * a3;
  }
  return result;
}

char *sub_1C6181ABC(char *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15 && *(_BYTE *)(*(_QWORD *)a3 + 8) == 15)
  {
    v7 = (uint64_t)result;
    sub_1C4DCF520((uint64_t)result, a2, 0);
    sub_1C4DCF520(v7, a3, 0);
    v8 = *(uint64_t **)(v7 + 24);
    if (a4)
    {
      v9 = 1;
      sub_1C4DCF5FC(v8, a2, 1, 0);
      v10 = 0;
    }
    else
    {
      v10 = 1;
      sub_1C4DCF5FC(v8, a3, 1, 0);
      v9 = 0;
    }
    return sub_1C6181948(*(_QWORD *)(v7 + 24), a2, v9, a3, v10, 0);
  }
  return result;
}

void sub_1C6181B94(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AttrEscaped;
  uint64_t v16;
  uint64_t v17;
  void *v18[2];
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v5 = sub_1C4DD000C(a2);
  if (v4 != (uint64_t *)v5)
  {
    v6 = (uint64_t *)v5;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)*v4 + 8) == 15)
        sub_1C4DCF520(a1, *v4, 0);
      v4 += 4;
    }
    while (v4 != v6);
  }
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15)
    sub_1C4DCF520(a1, a2, 0);
  if ((llvm::isMallocOrCallocLikeFn(a2, *(uint64_t **)(a1 + 16)) & 1) == 0
    && !llvm::isFreeCall(a2, *(uint64_t **)(a1 + 16)))
  {
    v18[0] = v19;
    v18[1] = (void *)0x400000000;
    if (!sub_1C4DCFC14(*(_QWORD *)(a2 - 32), *(_QWORD *)(a2 + 72), (uint64_t)v18)
      || (sub_1C4DCFC98(a1, a2, (unint64_t)v18) & 1) == 0)
    {
      if ((sub_1C4DD007C(a2, 45) & 1) == 0)
      {
        v10 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        v11 = sub_1C4DD000C(a2);
        if (v10 != (uint64_t *)v11)
        {
          v12 = v11;
          do
          {
            v13 = *v10;
            if (*(_BYTE *)(*(_QWORD *)*v10 + 8) == 15)
            {
              v14 = *(_QWORD *)(a1 + 24);
              AttrEscaped = llvm::cflaa::getAttrEscaped((llvm::cflaa *)v11);
              v16 = sub_1C6181A2C(v14, v13, 0);
              *(_QWORD *)(v16 + 48) |= AttrEscaped;
              v11 = sub_1C4DCF5FC(*(uint64_t **)(a1 + 24), v13, 1, 2);
            }
            v10 += 4;
          }
          while (v10 != (uint64_t *)v12);
        }
      }
      if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15)
      {
        v7 = *(_QWORD *)(a2 - 32);
        if (!v7
          || *(_BYTE *)(v7 + 16)
          || *(_QWORD *)(v7 + 24) != *(_QWORD *)(a2 + 72)
          || (v8 = *(_QWORD *)(v7 + 112)) == 0
          || *(_DWORD *)(v8 + 8) < 2u
          || (v17 = *(_QWORD *)(v8 + 48)) == 0
          || (*(_BYTE *)(v17 + 14) & 8) == 0)
        {
          v9 = sub_1C6181A2C(*(_QWORD *)(a1 + 24), a2, 0);
          *(_QWORD *)(v9 + 48) |= 2uLL;
        }
      }
    }
    if (v18[0] != v19)
      free(v18[0]);
  }
}

char *sub_1C6181DE8(char *result, uint64_t a2)
{
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = *(uint64_t **)(a2 - 8);
    v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (uint64_t *)(a2 - 32 * v5);
  }
  if (v5)
  {
    v7 = 32 * v5;
    do
    {
      v8 = *v6;
      v6 += 4;
      result = sub_1C61818B0(v3, v8, a2, 0);
      v7 -= 32;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1C6181E50(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C6181F48(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6181EE0(a2, v12, a3, a4);
    v9 = (_QWORD *)result;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 416 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_1C6181EE0(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v6;

  v6 = sub_1C6181FE4(a1, a3, a2);
  *v6 = *a3;
  *((_BYTE *)v6 + 8) = 0;
  *((_BYTE *)v6 + 408) = 0;
  if (*(_BYTE *)(a4 + 400))
  {
    sub_1C6180D5C((uint64_t)(v6 + 1), a4);
    *((_BYTE *)v6 + 408) = 1;
  }
  return v6;
}

uint64_t sub_1C6181F48(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 416 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 416 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C6181FE4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DD0110(a1, v6);
  v8 = 0;
  sub_1C6181F48(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6182094(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(_DWORD *)(result + 16);
  if (v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 416 * v6;
    do
    {
      *v7 = -4096;
      v7 += 52;
      v8 -= 416;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *(_QWORD *)v4;
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        sub_1C6181F48(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v12);
        v10 = v12;
        *v12 = *(_QWORD *)v4;
        *((_BYTE *)v10 + 8) = 0;
        result = (uint64_t)(v10 + 1);
        *((_BYTE *)v10 + 408) = 0;
        if (*(_BYTE *)(v4 + 408))
        {
          result = sub_1C6180D5C(result, v4 + 8);
          *((_BYTE *)v10 + 408) = 1;
          v11 = *(unsigned __int8 *)(v4 + 408);
          ++*(_DWORD *)(v5 + 8);
          if (v11)
          {
            result = (uint64_t)sub_1C61810BC((unsigned int *)(v4 + 8));
            *(_BYTE *)(v4 + 408) = 0;
          }
        }
        else
        {
          ++*(_DWORD *)(v5 + 8);
        }
      }
      v4 += 416;
    }
    while (v4 != a3);
  }
  return result;
}

_QWORD *sub_1C61821A0(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6181F48(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6181FE4(a1, a2, v7);
    *v5 = *a2;
    v5[51] = 0;
    *(_OWORD *)(v5 + 31) = 0u;
    *(_OWORD *)(v5 + 29) = 0u;
    *(_OWORD *)(v5 + 27) = 0u;
    *(_OWORD *)(v5 + 25) = 0u;
    *(_OWORD *)(v5 + 23) = 0u;
    *(_OWORD *)(v5 + 21) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    *(_OWORD *)(v5 + 17) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
    *(_OWORD *)(v5 + 47) = 0u;
    *(_OWORD *)(v5 + 49) = 0u;
    *(_OWORD *)(v5 + 43) = 0u;
    *(_OWORD *)(v5 + 45) = 0u;
    *(_OWORD *)(v5 + 39) = 0u;
    *(_OWORD *)(v5 + 41) = 0u;
    *(_OWORD *)(v5 + 35) = 0u;
    *(_OWORD *)(v5 + 37) = 0u;
    *(_OWORD *)(v5 + 33) = 0u;
  }
  return v5;
}

unsigned int *sub_1C6182268(unsigned int *a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;

  sub_1C4DCF4C8(a1);
  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  a1[4] = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  a1[2] = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = a1[3];
  a1[3] = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = a1[4];
  a1[4] = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  sub_1C6182300((uint64_t)(a1 + 6), a2 + 24);
  sub_1C6180E84((uint64_t)(a1 + 12), a2 + 48);
  sub_1C6180FA8((uint64_t)(a1 + 64), a2 + 256);
  return a1;
}

uint64_t sub_1C6182300(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

void sub_1C6182378(_QWORD *a1)
{
  uint64_t v2;

  sub_1C617FB84(a1[4] + 40, a1[3]);
  v2 = a1[3];
  if (v2)
  {
    if ((v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      llvm::ValueHandleBase::RemoveFromUseList(a1 + 1);
    a1[3] = 0;
  }
}

void llvm::CFLSteensAAResult::~CFLSteensAAResult(llvm::CFLSteensAAResult *this)
{
  llvm::CFLSteensAAResult *v2;
  uint64_t v3;

  sub_1C617FEBC((_QWORD **)this + 8);
  sub_1C61830C4((_QWORD *)this + 5);
  MEMORY[0x1CAA32FB4](*((_QWORD *)this + 5), 8);
  v2 = (llvm::CFLSteensAAResult *)*((_QWORD *)this + 4);
  if (v2 == (llvm::CFLSteensAAResult *)((char *)this + 8))
  {
    v3 = 4;
    v2 = (llvm::CFLSteensAAResult *)((char *)this + 8);
  }
  else
  {
    if (!v2)
      return;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
}

uint64_t *llvm::CFLSteensAAResult::FunctionInfo::FunctionInfo(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t *v19[2];
  _QWORD v20[2];
  int v21;

  sub_1C6182CAC((uint64_t)a1, a4);
  v7[6] = v7 + 8;
  v7[7] = 0x800000000;
  v7[32] = v7 + 34;
  v7[33] = 0x800000000;
  if (*(_QWORD *)(a2 + 96) <= 0x32uLL)
  {
    v20[0] = 0;
    v20[1] = 0;
    v21 = 0;
    v19[0] = v20;
    v19[1] = a1;
    v8 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v8)
    {
      v9 = *(uint64_t **)a3;
      v10 = 8 * v8;
      do
      {
        v11 = sub_1C61825DC((uint64_t)a1, *v9, 0);
        if (HIDWORD(v11))
          sub_1C4DD06E8(v19, 0, v11);
        ++v9;
        v10 -= 8;
      }
      while (v10);
    }
    v12 = sub_1C485F330(a2);
    if (v12 != v13)
    {
      v14 = v12;
      v15 = v13;
      v16 = 1;
      do
      {
        if (*(_BYTE *)(*(_QWORD *)v14 + 8) == 15)
        {
          v17 = sub_1C61825DC((uint64_t)a1, v14, 0);
          if (HIDWORD(v17))
            sub_1C4DD06E8(v19, v16, v17);
        }
        v14 += 40;
        ++v16;
      }
      while (v14 != v15);
    }
    MEMORY[0x1CAA32FB4](v20[0], 4);
  }
  return a1;
}

uint64_t sub_1C61825DC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;

  v8 = 0;
  if (sub_1C61802CC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, a3, &v8))
  {
    v4 = v8;
    v5 = *(_QWORD *)a1;
    v6 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    v5 = *(_QWORD *)a1;
    v6 = *(_DWORD *)(a1 + 16);
    v4 = *(_QWORD *)a1 + 24 * v6;
  }
  if (v4 == v5 + 24 * v6)
    return 0;
  else
    return *(unsigned int *)(v4 + 16) | 0x100000000;
}

uint64_t sub_1C6182660(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char v5;
  unsigned int v6;

  result = sub_1C618392C(a1, *(_QWORD *)a2, *(_DWORD *)(a2 + 8));
  if (!v5)
  {
    v6 = sub_1C6183998(a1);
    return sub_1C4DD16C0(a1, (__int128 *)a2, v6);
  }
  return result;
}

unsigned int *sub_1C61826B4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;

  result = (unsigned int *)sub_1C618392C(a1, a2, a3);
  v7 = *result;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = v8 + 32 * v7;
  v12 = *(_DWORD *)(v9 + 24);
  v10 = (_DWORD *)(v9 + 24);
  v11 = v12;
  if (v12 != -1)
  {
    v13 = v11;
    do
    {
      v14 = v13;
      v13 = *(unsigned int *)(v8 + 32 * v13 + 24);
    }
    while ((_DWORD)v13 != -1);
    v15 = *(_DWORD *)(v8 + 32 * v14);
    do
    {
      v7 = v11;
      *v10 = v15;
      v16 = v8 + 32 * v11;
      v17 = *(_DWORD *)(v16 + 24);
      v10 = (_DWORD *)(v16 + 24);
      v11 = v17;
    }
    while (v17 != -1);
  }
  *(_QWORD *)(v8 + 32 * v7 + 16) |= a4;
  return result;
}

BOOL sub_1C6182738(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v29;

  v6 = sub_1C6183FA8(a1, a2, a3);
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 24);
  v9 = v8 + 32 * v6;
  v12 = *(_DWORD *)(v9 + 24);
  v10 = (_DWORD *)(v9 + 24);
  v11 = v12;
  v13 = v6;
  if (v12 != -1)
  {
    v14 = v11;
    do
    {
      v15 = v14;
      v14 = *(unsigned int *)(v8 + 32 * v14 + 24);
    }
    while ((_DWORD)v14 != -1);
    v16 = *(_DWORD *)(v8 + 32 * v15);
    do
    {
      v13 = v11;
      *v10 = v16;
      v17 = v8 + 32 * v11;
      v18 = *(_DWORD *)(v17 + 24);
      v10 = (_DWORD *)(v17 + 24);
      v11 = v18;
    }
    while (v18 != -1);
  }
  if (*(_DWORD *)(v8 + 32 * v13 + 12) == -1)
  {
    v29 = sub_1C6183998(a1);
    v8 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(v8 + 32 * v6 + 12) = v29;
    *(_DWORD *)(v8 + 32 * v29 + 8) = v6;
  }
  v19 = v8 + 32 * v6;
  v22 = *(_DWORD *)(v19 + 24);
  v20 = (_DWORD *)(v19 + 24);
  v21 = v22;
  if (v22 != -1)
  {
    v23 = v21;
    do
    {
      v24 = v23;
      v23 = *(unsigned int *)(v8 + 32 * v23 + 24);
    }
    while ((_DWORD)v23 != -1);
    v25 = *(_DWORD *)(v8 + 32 * v24);
    do
    {
      v7 = v21;
      *v20 = v25;
      v26 = v8 + 32 * v21;
      v27 = *(_DWORD *)(v26 + 24);
      v20 = (_DWORD *)(v26 + 24);
      v21 = v27;
    }
    while (v27 != -1);
  }
  return sub_1C4DD16C0(a1, a4, *(_DWORD *)(v8 + 32 * v7 + 12));
}

void sub_1C6182848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;

  v8 = 0uLL;
  v9 = 0;
  sub_1C4DD1C80(a2, (unsigned int **)&v8);
  sub_1C6184034((uint64_t *)&v8);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = 0;
  v6 = v9;
  *(_QWORD *)a1 = v4;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 40) = v6;
  JUMPOUT(0x1CAA32FB4);
}

void llvm::CFLSteensAAResult::scan(llvm::CFLSteensAAResult *this, llvm::Function *a2)
{
  _BYTE v4[24];
  llvm::Function *v5;
  llvm::Function *v6;
  _QWORD v7[50];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a2;
  LOBYTE(v7[0]) = 0;
  v8 = 0;
  sub_1C6184174((uint64_t)v4, (uint64_t)this + 40, (uint64_t *)&v6, (uint64_t)v7);
  if (v8)
    sub_1C6183000(v7);
  llvm::CFLSteensAAResult::buildSetsFrom(this, a2);
}

int32x2_t sub_1C61829B0(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  uint64_t v4;
  uint64_t v5;

  v5 = 0;
  if (sub_1C6181F48(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
  {
    v4 = v5;
    if (*(_BYTE *)(v5 + 408))
    {
      sub_1C6183000((_QWORD *)(v5 + 8));
      *(_BYTE *)(v4 + 408) = 0;
    }
    *(_QWORD *)v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void llvm::CFLSteensAA::run(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = &off_1E81352F8;
  *(_QWORD *)(a2 + 16) = a1;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = a2 + 8;
  *(_DWORD *)(a2 + 56) = 0;
}

void llvm::initializeCFLSteensAAWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82D018);
  if (v2 != -1)
  {
    v5[0] = sub_1C4DD0FD4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82D018, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::CFLSteensAAWrapperPass *llvm::createCFLSteensAAWrapperPass(llvm *this)
{
  llvm::CFLSteensAAWrapperPass *v1;

  v1 = (llvm::CFLSteensAAWrapperPass *)operator new();
  return llvm::CFLSteensAAWrapperPass::CFLSteensAAWrapperPass(v1);
}

llvm::CFLSteensAAWrapperPass *llvm::CFLSteensAAWrapperPass::CFLSteensAAWrapperPass(llvm::CFLSteensAAWrapperPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::CFLSteensAAWrapperPass::ID;
  *((_DWORD *)this + 6) = 4;
  *(_QWORD *)this = &off_1E8135228;
  *((_QWORD *)this + 4) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82D018);
  if (v2 != -1)
  {
    v6[0] = sub_1C4DD0FD4;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82D018, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

_QWORD *llvm::CFLSteensAAWrapperPass::initializePass(llvm::CFLSteensAAWrapperPass *this)
{
  uint64_t v2;
  uint64_t (**v3)();
  llvm::CFLSteensAAResult *v4;
  uint64_t (**v5)(_QWORD *);
  _QWORD *result;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = operator new();
  v3 = &off_1E8135340;
  v7[0] = &off_1E8135340;
  v7[1] = this;
  v8 = v7;
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = &off_1E8135340;
  *(_QWORD *)(v2 + 16) = this;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = v2 + 8;
  *(_DWORD *)(v2 + 56) = 0;
  v4 = (llvm::CFLSteensAAResult *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v2;
  if (!v4)
    goto LABEL_2;
  llvm::CFLSteensAAResult::~CFLSteensAAResult(v4);
  MEMORY[0x1CAA32FC0]();
  result = v8;
  if (v8 == v7)
  {
    v3 = (uint64_t (**)())v7[0];
LABEL_2:
    v5 = (uint64_t (**)(_QWORD *))(v3 + 4);
    result = v7;
    return (_QWORD *)(*v5)(result);
  }
  if (v8)
  {
    v5 = (uint64_t (**)(_QWORD *))(*v8 + 40);
    return (_QWORD *)(*v5)(result);
  }
  return result;
}

llvm::AnalysisUsage *llvm::CFLSteensAAWrapperPass::getAnalysisUsage(llvm::CFLSteensAAWrapperPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  return llvm::AnalysisUsage::addRequiredID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
}

void sub_1C6182C88(llvm::ImmutablePass *a1)
{
  sub_1C6183070(a1);
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C6182CAC(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  __n128 result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v2 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v2;
  v3 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_1C6182D10(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 12 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 12 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

uint64_t sub_1C6182DAC(uint64_t a1, uint64_t a2, int *a3, _QWORD *a4)
{
  uint64_t result;
  _DWORD *v9;
  char v10;
  uint64_t v11;
  _DWORD *v12;

  v12 = 0;
  result = sub_1C6182D10(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6182E48(a2, a3, v12);
    v9 = (_DWORD *)result;
    *(_DWORD *)result = *a3;
    *(_QWORD *)(result + 4) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 12 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_DWORD *sub_1C6182E48(uint64_t a1, int *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  _DWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DD106C(a1, v6);
  v8 = 0;
  sub_1C6182D10(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6182EF8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)result;
    v8 = 12 * v6;
    do
    {
      *v7 = -1;
      v7 += 3;
      v8 -= 12;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v11 = 0;
      result = sub_1C6182D10(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_DWORD *)a2;
      *(_QWORD *)(v10 + 1) = *(_QWORD *)(a2 + 4);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 12;
  }
  return result;
}

_QWORD *sub_1C6182FAC(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  if (*(_BYTE *)(a1 + 400))
  {
    sub_1C6183000((_QWORD *)a1);
    *(_BYTE *)(a1 + 400) = 0;
  }
  sub_1C6182CAC(a1, a2);
  result = sub_1C6180E08((_QWORD *)(a1 + 48), a2 + 48);
  *(_BYTE *)(a1 + 400) = 1;
  return result;
}

_QWORD *sub_1C6183000(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = (_QWORD *)a1[32];
  if (v2 != a1 + 34)
    free(v2);
  v3 = (_QWORD *)a1[6];
  if (v3 != a1 + 8)
    free(v3);
  return sub_1C6176BF8(a1);
}

llvm::CFLSteensAAWrapperPass *llvm::callDefaultCtor<llvm::CFLSteensAAWrapperPass>()
{
  llvm::CFLSteensAAWrapperPass *v0;

  v0 = (llvm::CFLSteensAAWrapperPass *)operator new();
  return llvm::CFLSteensAAWrapperPass::CFLSteensAAWrapperPass(v0);
}

void sub_1C6183070(llvm::ImmutablePass *this)
{
  llvm::CFLSteensAAResult *v2;

  *(_QWORD *)this = &off_1E8135228;
  v2 = (llvm::CFLSteensAAResult *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    llvm::CFLSteensAAResult::~CFLSteensAAResult(v2);
    MEMORY[0x1CAA32FC0]();
  }
  llvm::ImmutablePass::~ImmutablePass(this);
}

_QWORD *sub_1C61830C4(_QWORD *result)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *((_DWORD *)result + 4);
  if (v1)
  {
    v2 = *result;
    v3 = 416 * v1;
    do
    {
      if ((*(_QWORD *)v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (*(_BYTE *)(v2 + 408))
        {
          result = sub_1C6183000((_QWORD *)(v2 + 8));
          *(_BYTE *)(v2 + 408) = 0;
        }
      }
      v2 += 416;
      v3 -= 416;
    }
    while (v3);
  }
  return result;
}

void sub_1C6183128(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1C6183160()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_BYTE *)(*(_QWORD *)v0 + 8) == 15)
    sub_1C4DD1130(v1, v0, 2);
}

void sub_1C61831EC()
{
  JUMPOUT(0x1C618317CLL);
}

char *sub_1C61831FC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1C4DD120C(v1, v0);
}

void sub_1C6183214()
{
  JUMPOUT(0x1C61831ACLL);
}

void sub_1C6183220()
{
  uint64_t v0;
  uint64_t v1;

  sub_1C6183670(v1, v0);
}

char *sub_1C6183238()
{
  uint64_t v0;
  char *v1;

  return sub_1C6183598(v1, *(_QWORD *)(v0 - 32), v0, 1);
}

void sub_1C6183274()
{
  uint64_t v0;
  uint64_t v1;

  sub_1C61832F0(v1, v0);
}

char *sub_1C618328C()
{
  uint64_t v0;
  char *v1;

  return sub_1C61838C4(v1, v0);
}

void sub_1C61832A4()
{
  uint64_t v0;
  char *v1;

  sub_1C6183500(v1, *(_QWORD *)(v0 - 64), v0, 0);
  JUMPOUT(0x1C6183260);
}

void sub_1C61832D8()
{
  JUMPOUT(0x1C618325CLL);
}

void sub_1C61832E4()
{
  JUMPOUT(0x1C618323CLL);
}

void sub_1C61832F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(a2 - 32 * v2);
    if (v3)
    {
      if (*(_BYTE *)(*(_QWORD *)v3 + 8) == 15)
      {
        sub_1C4DD1130(a1, v3, 0);
        v5 = *(_QWORD *)(a1 + 32);
        v6 = *(unsigned int *)(v5 + 8);
        if (v6 >= *(_DWORD *)(v5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v5 + 16, v6 + 1, 8);
          LODWORD(v6) = *(_DWORD *)(v5 + 8);
        }
        *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = v3;
        ++*(_DWORD *)(v5 + 8);
      }
    }
  }
}

void sub_1C6183380(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

char *sub_1C61833B4()
{
  uint64_t v0;
  char *v1;

  sub_1C6183500(v1, *(_QWORD *)(v0 - 32 * (*(_DWORD *)(v0 + 20) & 0x7FFFFFF)), v0, 0);
  return sub_1C6183500(v1, *(_QWORD *)(v0 - 32 * (*(_DWORD *)(v0 + 20) & 0x7FFFFFF) + 32), v0, 0);
}

char *sub_1C61833FC()
{
  uint64_t v0;
  uint64_t v1;

  return sub_1C4DD120C(v1, v0);
}

void sub_1C6183410(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  sub_1C4DD1130(v13, v12, 2);
}

void sub_1C618344C()
{
  JUMPOUT(0x1C61833E4);
}

char *sub_1C6183460()
{
  uint64_t v0;
  char *v1;

  return sub_1C6183598(v1, *(_QWORD *)(v0 - 32 * (*(_DWORD *)(v0 + 20) & 0x7FFFFFF)), v0, 1);
}

void sub_1C61834C8()
{
  uint64_t v0;
  char *v1;

  sub_1C6183500(v1, *(_QWORD *)(v0 - 32 * (*(_DWORD *)(v0 + 20) & 0x7FFFFFF) + 32), v0, 0);
  JUMPOUT(0x1C61833E4);
}

char *sub_1C6183500(char *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15 && *(_BYTE *)(*(_QWORD *)a3 + 8) == 15)
  {
    v7 = result;
    result = (char *)((uint64_t (*)(void))sub_1C4DD1130)();
    if (a3 != a2)
    {
      sub_1C4DD1130(v7, a3, 0);
      return sub_1C6181948(*((_QWORD *)v7 + 3), a2, 0, a3, 0, a4);
    }
  }
  return result;
}

char *sub_1C6183598(char *result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15 && *(_BYTE *)(*(_QWORD *)a3 + 8) == 15)
  {
    v7 = (uint64_t)result;
    sub_1C4DD1130((uint64_t)result, a2, 0);
    sub_1C4DD1130(v7, a3, 0);
    v8 = *(uint64_t **)(v7 + 24);
    if (a4)
    {
      v9 = 1;
      sub_1C4DCF5FC(v8, a2, 1, 0);
      v10 = 0;
    }
    else
    {
      v10 = 1;
      sub_1C4DCF5FC(v8, a3, 1, 0);
      v9 = 0;
    }
    return sub_1C6181948(*(_QWORD *)(v7 + 24), a2, v9, a3, v10, 0);
  }
  return result;
}

void sub_1C6183670(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t AttrEscaped;
  uint64_t v16;
  uint64_t v17;
  void *v18[2];
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v5 = sub_1C4DD000C(a2);
  if (v4 != (uint64_t *)v5)
  {
    v6 = (uint64_t *)v5;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)*v4 + 8) == 15)
        sub_1C4DD1130(a1, *v4, 0);
      v4 += 4;
    }
    while (v4 != v6);
  }
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15)
    sub_1C4DD1130(a1, a2, 0);
  if ((llvm::isMallocOrCallocLikeFn(a2, *(uint64_t **)(a1 + 16)) & 1) == 0
    && !llvm::isFreeCall(a2, *(uint64_t **)(a1 + 16)))
  {
    v18[0] = v19;
    v18[1] = (void *)0x400000000;
    if (!sub_1C4DCFC14(*(_QWORD *)(a2 - 32), *(_QWORD *)(a2 + 72), (uint64_t)v18)
      || (sub_1C4DD134C(a1, a2, (unint64_t)v18) & 1) == 0)
    {
      if ((sub_1C4DD007C(a2, 45) & 1) == 0)
      {
        v10 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
        v11 = sub_1C4DD000C(a2);
        if (v10 != (uint64_t *)v11)
        {
          v12 = v11;
          do
          {
            v13 = *v10;
            if (*(_BYTE *)(*(_QWORD *)*v10 + 8) == 15)
            {
              v14 = *(_QWORD *)(a1 + 24);
              AttrEscaped = llvm::cflaa::getAttrEscaped((llvm::cflaa *)v11);
              v16 = sub_1C6181A2C(v14, v13, 0);
              *(_QWORD *)(v16 + 48) |= AttrEscaped;
              v11 = sub_1C4DCF5FC(*(uint64_t **)(a1 + 24), v13, 1, 2);
            }
            v10 += 4;
          }
          while (v10 != (uint64_t *)v12);
        }
      }
      if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 15)
      {
        v7 = *(_QWORD *)(a2 - 32);
        if (!v7
          || *(_BYTE *)(v7 + 16)
          || *(_QWORD *)(v7 + 24) != *(_QWORD *)(a2 + 72)
          || (v8 = *(_QWORD *)(v7 + 112)) == 0
          || *(_DWORD *)(v8 + 8) < 2u
          || (v17 = *(_QWORD *)(v8 + 48)) == 0
          || (*(_BYTE *)(v17 + 14) & 8) == 0)
        {
          v9 = sub_1C6181A2C(*(_QWORD *)(a1 + 24), a2, 0);
          *(_QWORD *)(v9 + 48) |= 2uLL;
        }
      }
    }
    if (v18[0] != v19)
      free(v18[0]);
  }
}

char *sub_1C61838C4(char *result, uint64_t a2)
{
  char *v3;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = result;
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = *(uint64_t **)(a2 - 8);
    v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (uint64_t *)(a2 - 32 * v5);
  }
  if (v5)
  {
    v7 = 32 * v5;
    do
    {
      v8 = *v6;
      v6 += 4;
      result = sub_1C6183500(v3, v8, a2, 0);
      v7 -= 32;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1C618392C(uint64_t a1, uint64_t a2, int a3)
{
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;

  v9 = 0;
  v4 = sub_1C61802CC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, a3, &v9);
  v5 = v9;
  if (!v4)
    v5 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  v6 = v5 == *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  v7 = v5 + 16;
  if (v6)
    return 0;
  else
    return v7;
}

unint64_t sub_1C6183998(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  _OWORD *v8;
  __int128 v10;
  __int128 v11;

  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_OWORD **)(a1 + 32);
  v2 = a1 + 24;
  v5 = *(_QWORD *)(v2 + 16);
  v6 = ((unint64_t)v3 - v4) >> 5;
  LODWORD(v10) = v6;
  *((_QWORD *)&v10 + 1) = -1;
  *(_QWORD *)&v11 = 0;
  DWORD2(v11) = -1;
  if ((unint64_t)v3 >= v5)
  {
    v8 = sub_1C4DD17E8((void **)v2, &v10);
  }
  else
  {
    v7 = v11;
    *v3 = v10;
    v3[1] = v7;
    v8 = v3 + 2;
  }
  *(_QWORD *)(a1 + 32) = v8;
  return v6;
}

uint64_t sub_1C6183A0C(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;

  result = sub_1C4DD1990(a1, a2, a3);
  if ((result & 1) == 0)
  {
    result = sub_1C4DD1990(a1, a3, a2);
    if ((result & 1) == 0)
      return sub_1C6183C98(*(_QWORD *)(a1 + 24), a2, a3);
  }
  return result;
}

uint64_t sub_1C6183A70(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  result = sub_1C61802CC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *(_QWORD *)a3, *(_DWORD *)(a3 + 8), &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = sub_1C6183B10(a2, a3, v12);
    v9 = result;
    *(_OWORD *)result = *(_OWORD *)a3;
    *(_DWORD *)(result + 16) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 24 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C6183B10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t v9;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DD18C8(a1, v6);
  v9 = 0;
  sub_1C61802CC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(_DWORD *)(a2 + 8), &v9);
  a3 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a3 != -4096 || *(_DWORD *)(a3 + 8) != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6183BCC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _OWORD *v13;
  _OWORD *v14;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_1C85F22C0;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    v10 = *(_DWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -4096 || v10 != -1) && (v9 != -8192 || v10 != -2))
    {
      v14 = 0;
      result = sub_1C61802CC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, v10, &v14);
      v13 = v14;
      *v14 = *(_OWORD *)a2;
      *((_DWORD *)v13 + 4) = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1C6183C98(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  _DWORD *v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  unsigned int v84;
  int v85;

  v3 = a2;
  v4 = result + 32 * a2;
  v7 = *(_DWORD *)(v4 + 24);
  v5 = (_DWORD *)(v4 + 24);
  v6 = v7;
  if (v7 != -1)
  {
    v8 = v6;
    do
    {
      v9 = v8;
      v8 = *(unsigned int *)(result + 32 * v8 + 24);
    }
    while ((_DWORD)v8 != -1);
    v10 = *(_DWORD *)(result + 32 * v9);
    do
    {
      v3 = v6;
      *v5 = v10;
      v11 = result + 32 * v6;
      v12 = *(_DWORD *)(v11 + 24);
      v5 = (_DWORD *)(v11 + 24);
      v6 = v12;
    }
    while (v12 != -1);
  }
  v13 = a3;
  v14 = result + 32 * a3;
  v17 = *(_DWORD *)(v14 + 24);
  v15 = (_DWORD *)(v14 + 24);
  v16 = v17;
  if (v17 != -1)
  {
    v18 = v16;
    do
    {
      v19 = v18;
      v18 = *(unsigned int *)(result + 32 * v18 + 24);
    }
    while ((_DWORD)v18 != -1);
    v20 = *(_DWORD *)(result + 32 * v19);
    do
    {
      v13 = v16;
      *v15 = v20;
      v21 = result + 32 * v16;
      v22 = *(_DWORD *)(v21 + 24);
      v15 = (_DWORD *)(v21 + 24);
      v16 = v22;
    }
    while (v22 != -1);
  }
  while (1)
  {
    v42 = *(unsigned int *)(result + 32 * v3 + 8);
    if ((_DWORD)v42 == -1)
      break;
    v23 = *(unsigned int *)(result + 32 * v13 + 8);
    if ((_DWORD)v23 == -1)
      break;
    v24 = result + 32 * v42;
    v27 = *(_DWORD *)(v24 + 24);
    v25 = (_DWORD *)(v24 + 24);
    v26 = v27;
    v3 = *(unsigned int *)(result + 32 * v3 + 8);
    if (v27 != -1)
    {
      v28 = v26;
      do
      {
        v29 = v28;
        v28 = *(unsigned int *)(result + 32 * v28 + 24);
      }
      while ((_DWORD)v28 != -1);
      v30 = *(_DWORD *)(result + 32 * v29);
      do
      {
        v3 = v26;
        *v25 = v30;
        v31 = result + 32 * v26;
        v32 = *(_DWORD *)(v31 + 24);
        v25 = (_DWORD *)(v31 + 24);
        v26 = v32;
      }
      while (v32 != -1);
    }
    v33 = result + 32 * v23;
    v36 = *(_DWORD *)(v33 + 24);
    v34 = (_DWORD *)(v33 + 24);
    v35 = v36;
    if (v36 != -1)
    {
      v37 = v35;
      do
      {
        v38 = v37;
        v37 = *(unsigned int *)(result + 32 * v37 + 24);
      }
      while ((_DWORD)v37 != -1);
      v39 = *(_DWORD *)(result + 32 * v38);
      do
      {
        v23 = v35;
        *v34 = v39;
        v40 = result + 32 * v35;
        v41 = *(_DWORD *)(v40 + 24);
        v34 = (_DWORD *)(v40 + 24);
        v35 = v41;
      }
      while (v41 != -1);
    }
    v13 = v23;
  }
  v43 = result + 32 * v13;
  v44 = (int *)(result + 32 * v3);
  v45 = *(unsigned int *)(v43 + 8);
  if ((_DWORD)v45 != -1)
  {
    v44[2] = v45;
    v46 = result + 32 * v45;
    v49 = *(_DWORD *)(v46 + 24);
    v47 = (_DWORD *)(v46 + 24);
    v48 = v49;
    if (v49 != -1)
    {
      v50 = v48;
      do
      {
        v51 = v50;
        v50 = *(unsigned int *)(result + 32 * v50 + 24);
      }
      while ((_DWORD)v50 != -1);
      v52 = *(_DWORD *)(result + 32 * v51);
      do
      {
        v45 = v48;
        *v47 = v52;
        v53 = result + 32 * v48;
        v54 = *(_DWORD *)(v53 + 24);
        v47 = (_DWORD *)(v53 + 24);
        v48 = v54;
      }
      while (v54 != -1);
    }
    *(_DWORD *)(result + 32 * v45 + 12) = *v44;
  }
  while (1)
  {
    v72 = v44[3];
    if ((_DWORD)v72 == -1)
      break;
    v55 = *(unsigned int *)(v43 + 12);
    if ((_DWORD)v55 == -1)
      break;
    *((_QWORD *)v44 + 2) |= *(_QWORD *)(v43 + 16);
    v56 = result + 32 * v55;
    v59 = *(_DWORD *)(v56 + 24);
    v57 = (_DWORD *)(v56 + 24);
    v58 = v59;
    if (v59 != -1)
    {
      v60 = v58;
      do
      {
        v61 = v60;
        v60 = *(unsigned int *)(result + 32 * v60 + 24);
      }
      while ((_DWORD)v60 != -1);
      v62 = *(_DWORD *)(result + 32 * v61);
      do
      {
        v55 = v58;
        *v57 = v62;
        v63 = result + 32 * v58;
        v64 = *(_DWORD *)(v63 + 24);
        v57 = (_DWORD *)(v63 + 24);
        v58 = v64;
      }
      while (v64 != -1);
    }
    *(_DWORD *)(v43 + 24) = *v44;
    v65 = result + 32 * v72;
    v68 = *(_DWORD *)(v65 + 24);
    v66 = (_DWORD *)(v65 + 24);
    v67 = v68;
    if (v68 != -1)
    {
      v69 = v67;
      do
      {
        v70 = v69;
        v69 = *(unsigned int *)(result + 32 * v69 + 24);
      }
      while ((_DWORD)v69 != -1);
      v71 = *(_DWORD *)(result + 32 * v70);
      do
      {
        v72 = v67;
        *v66 = v71;
        v73 = result + 32 * v67;
        v74 = *(_DWORD *)(v73 + 24);
        v66 = (_DWORD *)(v73 + 24);
        v67 = v74;
      }
      while (v74 != -1);
    }
    v43 = result + 32 * v55;
    v44 = (int *)(result + 32 * v72);
  }
  v75 = *(unsigned int *)(v43 + 12);
  if ((_DWORD)v75 == -1)
  {
    v85 = *v44;
  }
  else
  {
    v44[3] = v75;
    v76 = result + 32 * v75;
    v79 = *(_DWORD *)(v76 + 24);
    v77 = (_DWORD *)(v76 + 24);
    v78 = v79;
    if (v79 != -1)
    {
      v80 = v78;
      do
      {
        v81 = v80;
        v80 = *(unsigned int *)(result + 32 * v80 + 24);
      }
      while ((_DWORD)v80 != -1);
      v82 = *(_DWORD *)(result + 32 * v81);
      do
      {
        v75 = v78;
        *v77 = v82;
        v83 = result + 32 * v78;
        v84 = *(_DWORD *)(v83 + 24);
        v77 = (_DWORD *)(v83 + 24);
        v78 = v84;
      }
      while (v84 != -1);
    }
    v85 = *v44;
    *(_DWORD *)(result + 32 * v75 + 8) = *v44;
  }
  *((_QWORD *)v44 + 2) |= *(_QWORD *)(v43 + 16);
  *(_DWORD *)(v43 + 24) = v85;
  return result;
}

uint64_t sub_1C6183FA8(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;

  v4 = (unsigned int *)sub_1C618392C(a1, a2, a3);
  if (!v5)
    return 0;
  v6 = *v4;
  v7 = *(_QWORD *)(a1 + 24);
  v8 = v7 + 32 * v6;
  v11 = *(_DWORD *)(v8 + 24);
  v9 = (_DWORD *)(v8 + 24);
  v10 = v11;
  if (v11 != -1)
  {
    v12 = v10;
    do
    {
      v13 = v12;
      v12 = *(unsigned int *)(v7 + 32 * v12 + 24);
    }
    while ((_DWORD)v12 != -1);
    v14 = *(_DWORD *)(v7 + 32 * v13);
    do
    {
      v6 = v10;
      *v9 = v14;
      v15 = v7 + 32 * v10;
      v16 = *(_DWORD *)(v15 + 24);
      v9 = (_DWORD *)(v15 + 24);
      v10 = v16;
    }
    while (v16 != -1);
  }
  return *(unsigned int *)(v7 + 32 * v6) | 0x100000000;
}

void sub_1C6184034(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  void *v14[2];
  _BYTE v15[64];
  _QWORD *v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v14[0] = v15;
  v14[1] = (void *)0x1000000000;
  v17[0] = 0;
  v17[1] = 0;
  v16 = v17;
  v1 = a1[1] - *a1;
  if ((v1 >> 4))
  {
    v3 = 0;
    v4 = (v1 >> 4);
    do
    {
      v13 = 0;
      v5 = v3;
      do
      {
        v6 = v5;
        v5 = *(unsigned int *)(*a1 + 16 * v5);
      }
      while ((_DWORD)v5 != -1);
      v13 = v6;
      if ((sub_1C48302EC((uint64_t)v14, &v13) & 0x100000000) != 0)
      {
        v7 = *a1;
        v8 = *a1 + 16 * v13;
        v9 = *(unsigned int *)(v8 + 4);
        if ((_DWORD)v9 != -1)
        {
          v10 = *(_QWORD *)(v8 + 8);
          do
          {
            v11 = v7 + 16 * v9;
            v10 |= *(_QWORD *)(v11 + 8);
            *(_QWORD *)(v11 + 8) = v10;
            v13 = v9;
            v9 = *(unsigned int *)(v11 + 4);
          }
          while ((_DWORD)v9 != -1);
        }
      }
      ++v3;
    }
    while (v3 != v4);
    v12 = (_QWORD *)v17[0];
  }
  else
  {
    v12 = 0;
  }
  sub_1C47655E8((uint64_t)&v16, v12);
  if (v14[0] != v15)
    free(v14[0]);
}

uint64_t sub_1C6184174(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C6181F48(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6184204(a2, v12, a3, a4);
    v9 = (_QWORD *)result;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 416 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_1C6184204(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v6;

  v6 = sub_1C6184264(a1, a3, a2);
  *v6 = *a3;
  *((_BYTE *)v6 + 8) = 0;
  *((_BYTE *)v6 + 408) = 0;
  if (*(_BYTE *)(a4 + 400))
    sub_1C6182FAC((uint64_t)(v6 + 1), a4);
  return v6;
}

_QWORD *sub_1C6184264(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DD2170(a1, v6);
  v8 = 0;
  sub_1C6181F48(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C6184314(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;

  v5 = result;
  result[1] = 0;
  v6 = *((_DWORD *)result + 4);
  if (v6)
  {
    v7 = (_QWORD *)*result;
    v8 = 416 * v6;
    do
    {
      *v7 = -4096;
      v7 += 52;
      v8 -= 416;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      sub_1C6181F48(*v5, *((_DWORD *)v5 + 4), v9, &v12);
      v10 = v12;
      *v12 = *(_QWORD *)a2;
      *((_BYTE *)v10 + 408) = 0;
      *((_BYTE *)v10 + 8) = 0;
      result = v10 + 1;
      if (*(_BYTE *)(a2 + 408))
      {
        result = sub_1C6182FAC((uint64_t)result, a2 + 8);
        v11 = *(unsigned __int8 *)(a2 + 408);
        ++*((_DWORD *)v5 + 2);
        if (v11)
        {
          result = sub_1C6183000((_QWORD *)(a2 + 8));
          *(_BYTE *)(a2 + 408) = 0;
        }
      }
      else
      {
        ++*((_DWORD *)v5 + 2);
      }
    }
    a2 += 416;
  }
  return result;
}

_QWORD *sub_1C6184404(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C6181F48(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6184264(a1, a2, v7);
    *v5 = *a2;
    v5[51] = 0;
    *(_OWORD *)(v5 + 31) = 0u;
    *(_OWORD *)(v5 + 29) = 0u;
    *(_OWORD *)(v5 + 27) = 0u;
    *(_OWORD *)(v5 + 25) = 0u;
    *(_OWORD *)(v5 + 23) = 0u;
    *(_OWORD *)(v5 + 21) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    *(_OWORD *)(v5 + 17) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
    *(_OWORD *)(v5 + 47) = 0u;
    *(_OWORD *)(v5 + 49) = 0u;
    *(_OWORD *)(v5 + 43) = 0u;
    *(_OWORD *)(v5 + 45) = 0u;
    *(_OWORD *)(v5 + 39) = 0u;
    *(_OWORD *)(v5 + 41) = 0u;
    *(_OWORD *)(v5 + 35) = 0u;
    *(_OWORD *)(v5 + 37) = 0u;
    *(_OWORD *)(v5 + 33) = 0u;
  }
  return v5;
}

uint64_t sub_1C61844CC(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 400))
  {
    sub_1C6184528(a1, a2);
  }
  else
  {
    sub_1C6182CAC(a1, a2);
    sub_1C6180E08((_QWORD *)(a1 + 48), a2 + 48);
    *(_BYTE *)(a1 + 400) = 1;
  }
  return a1;
}

uint64_t sub_1C6184528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1C6182300(a1, a2);
  sub_1C6184574(v4 + 24, (__n128 *)(a2 + 24));
  sub_1C6180E84(a1 + 48, a2 + 48);
  sub_1C6180FA8(a1 + 256, a2 + 256);
  return a1;
}

__n128 sub_1C6184574(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_1C61845CC(_QWORD *a1)
{
  uint64_t v2;

  sub_1C61829B0(a1[4] + 40, a1[3]);
  v2 = a1[3];
  if (v2)
  {
    if ((v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      llvm::ValueHandleBase::RemoveFromUseList(a1 + 1);
    a1[3] = 0;
  }
}

uint64_t llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>::Invalidator::invalidate(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE v18[8];
  uint64_t v19[3];

  v8 = sub_1C4D91F84(*a1, a2);
  v9 = *a1;
  v10 = *a1 + 8;
  if ((*(_BYTE *)*a1 & 1) != 0)
  {
    v11 = 8;
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 16);
  }
  if (v10 + 16 * v11 == v8)
  {
    v13 = a1[1];
    v19[0] = a2;
    v19[1] = a3;
    v17 = 0;
    if (sub_1C4DD9D34((uint64_t *)v13, v19, &v17))
      v14 = v17;
    else
      v14 = *(_QWORD *)v13 + 24 * *(unsigned int *)(v13 + 16);
    v15 = *a1;
    v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(v14 + 16) + 24)
                                                                         + 16))(*(_QWORD *)(*(_QWORD *)(v14 + 16) + 24), a3, a4, a1);
    v17 = a2;
    v18[0] = v16;
    sub_1C4D921A4(v15, &v17, v18, (uint64_t)v19);
    v8 = v19[0];
  }
  return *(unsigned __int8 *)(v8 + 8);
}

uint64_t sub_1C618472C(uint64_t a1, uint64_t *__p)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *__p;
  v4 = __p[1];
  *(_QWORD *)(v3 + 8) = v4;
  *(_QWORD *)__p[1] = v3;
  --*(_QWORD *)(a1 + 16);
  v5 = __p[3];
  __p[3] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  operator delete(__p);
  return v4;
}

int32x2_t sub_1C6184788(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;
  _QWORD *v5;

  v5 = 0;
  if (sub_1C4DDA200(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v5))
  {
    v4 = v5;
    sub_1C4D8B4AC(v5 + 1);
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

llvm::raw_ostream *llvm::PassManager<llvm::LazyCallGraph::SCC,llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::LazyCallGraph&,llvm::CGSCCUpdateResult &>::printPipeline(llvm::raw_ostream *result, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  llvm::raw_ostream *v8;
  uint64_t v9;
  unint64_t v10;

  v4 = *((_QWORD *)result + 1) - *(_QWORD *)result;
  if ((v4 & 0x7FFFFFFF8) != 0)
  {
    v8 = result;
    v9 = 0;
    v10 = (v4 >> 3);
    do
    {
      result = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD, llvm::raw_ostream *, uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)v8 + 8 * v9) + 24))(*(_QWORD *)(*(_QWORD *)v8 + 8 * v9), a2, a3, a4);
      if (++v9 < v10)
        result = sub_1C4816AD8(a2, ",");
    }
    while (v10 != v9);
  }
  return result;
}

{
  return __ZN4llvm11PassManagerINS_13LazyCallGraph3SCCENS_15AnalysisManagerIS2_JRS1_EEEJS4_RNS_17CGSCCUpdateResultEEE13printPipelineERNS_11raw_ostreamENS_12function_refIFNS_9StringRefESC_EEE(result, a2, a3, a4);
}

uint64_t llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::LazyCallGraph::SCC,llvm::LazyCallGraph&>,llvm::Module>::run(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a2);
  v6 = *a1;
  llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::LazyCallGraphAnalysis::Key, a2);
  return v6;
}

BOOL sub_1C61848F4(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(a1 + 16))
    return 0;
  v3 = *(_QWORD **)a1;
  v4 = sub_1C477672C(*(_QWORD *)a1, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
  v5 = v3[1];
  v6 = 16;
  if (v5 == *v3)
    v6 = 20;
  if (v4 != (_QWORD *)(v5 + 8 * *(unsigned int *)((char *)v3 + v6)))
    return 1;
  v7 = *(_QWORD **)a1;
  v8 = sub_1C477672C((uint64_t)v7, (uint64_t)&llvm::AllAnalysesOn<llvm::LazyCallGraph::SCC>::SetKey);
  v9 = v7[1];
  v10 = 16;
  if (v9 == *v7)
    v10 = 20;
  return v8 != (_QWORD *)(v9 + 8 * *(unsigned int *)((char *)v7 + v10));
}

_QWORD *sub_1C6184998(_QWORD *a1, unsigned int a2)
{
  uint64_t v3;
  _QWORD *result;
  int v5;
  _QWORD *v6;

  if (a2 <= 0x10)
  {
    *a1 = 1;
  }
  else
  {
    *(_DWORD *)a1 &= ~1u;
    v3 = a2;
    result = operator new(16 * a2, (std::align_val_t)8uLL);
    a1[1] = result;
    a1[2] = v3;
    v5 = *(_DWORD *)a1;
    *a1 = *(_DWORD *)a1 & 1;
    if ((v5 & 1) == 0)
    {
      v6 = &result[2 * v3];
      goto LABEL_6;
    }
  }
  result = a1 + 1;
  v6 = a1 + 33;
  do
  {
LABEL_6:
    *result = -4096;
    result += 2;
  }
  while (result != v6);
  return result;
}

void **sub_1C6184A18(void **result)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v6;
  void **v7;
  char *v8;

  v1 = (void **)*result;
  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v7 = result;
    v8 = (char *)*result;
    v3 = 32 * v2;
    do
    {
      v4 = *(_QWORD *)&v8[v3 - 8];
      if (v4 != -8192 && v4 != -4096 && v4 != 0)
        llvm::ValueHandleBase::RemoveFromUseList(&v8[v3 - 24]);
      v3 -= 32;
    }
    while (v3);
    result = v7;
    v1 = (void **)*v7;
  }
  if (v1 != result + 2)
  {
    v6 = result;
    free(v1);
    return v6;
  }
  return result;
}

uint64_t sub_1C6184AB0(uint64_t a1, char *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  int v9;

  v8 = *(_QWORD *)a2;
  v9 = 0;
  result = sub_1C6184B28((uint64_t)&v6, a1, &v8, &v9);
  if (v7)
  {
    v5 = v6;
    result = (uint64_t)sub_1C4DD8CA4(a1 + 264, a2);
    *(_DWORD *)(v5 + 8) = *(_DWORD *)(a1 + 272) - 1;
  }
  return result;
}

uint64_t sub_1C6184B28(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_1C6184BF0(a2, *a3, &v16);
  v9 = v16;
  if ((_DWORD)result)
  {
    v10 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v11 = 16;
    }
    else
    {
      v10 = *(_QWORD *)(a2 + 8);
      v11 = *(unsigned int *)(a2 + 16);
    }
    v12 = 0;
    v13 = v10 + 16 * v11;
  }
  else
  {
    result = (uint64_t)sub_1C6184C9C((_DWORD *)a2, a3, v16);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v14 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v15 = 16;
    }
    else
    {
      v14 = *(_QWORD *)(a2 + 8);
      v15 = *(unsigned int *)(a2 + 16);
    }
    v13 = v14 + 16 * v15;
    v12 = 1;
  }
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v13;
  *(_BYTE *)(a1 + 16) = v12;
  return result;
}

uint64_t sub_1C6184BF0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C6184C9C(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 16;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C4DD8D2C((uint64_t)a1, v6);
  v8 = 0;
  sub_1C6184BF0((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_6:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C6184D58(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C6184BF0((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

void sub_1C6184E20(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 32, &v5);
  sub_1C6184E8C((uint64_t *)a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t *sub_1C6184E8C(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *((unsigned int *)result + 2);
  if ((_DWORD)v2)
  {
    v4 = result;
    v5 = (_QWORD *)*result;
    v6 = 32 * v2;
    do
    {
      result = sub_1C4DD8EB0(a2, v5);
      v5 += 4;
      a2 += 4;
      v6 -= 32;
    }
    while (v6);
    v7 = *((unsigned int *)v4 + 2);
    if ((_DWORD)v7)
    {
      v8 = *v4;
      v9 = 32 * v7;
      do
      {
        v10 = *(_QWORD *)(v8 + v9 - 8);
        if (v10 != -8192 && v10 != -4096 && v10 != 0)
          result = llvm::ValueHandleBase::RemoveFromUseList((_QWORD *)(v8 + v9 - 24));
        v9 -= 32;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_1C6184F20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;

  v3 = sub_1C6184FFC(a1, a2);
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 16;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  if (v4 + 16 * v5 == v3)
    v6 = (unsigned int *)(a1 + 272);
  else
    v6 = (unsigned int *)(v3 + 8);
  return *(_QWORD *)(a1 + 264) + 32 * *v6;
}

void *sub_1C6184F7C(uint64_t a1, uint64_t *a2)
{
  void *result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  result = sub_1C6185058((uint64_t)v7, a1, a2);
  if (v7[16])
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, a1 + 56, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_1C6184FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  if ((sub_1C6184BF0(a1, a2, &v6) & 1) != 0)
    return v6;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 16;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

_QWORD *sub_1C6185058(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C4A07A58(a2, *a3, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v12 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v13 = 4;
    }
    else
    {
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(unsigned int *)(a2 + 16);
    }
    v11 = 0;
    v10 = v12 + 8 * v13;
  }
  else
  {
    result = sub_1C6185114((_DWORD *)a2, a3, v14);
    v7 = result;
    *result = *a3;
    v8 = a2 + 8;
    if ((*(_BYTE *)a2 & 1) != 0)
    {
      v9 = 4;
    }
    else
    {
      v8 = *(_QWORD *)(a2 + 8);
      v9 = *(unsigned int *)(a2 + 16);
    }
    v10 = v8 + 8 * v9;
    v11 = 1;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v10;
  *(_BYTE *)(a1 + 16) = v11;
  return result;
}

_QWORD *sub_1C6185114(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C4A07AFC((uint64_t)a1, v6);
  v8 = 0;
  sub_1C4A07A58((uint64_t)a1, *a2, &v8);
  a3 = v8;
LABEL_5:
  *a1 += 2;
  if (*a3 != -4096)
    --a1[1];
  return a3;
}

uint64_t sub_1C61851D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = a2;
  if (sub_1C6185234(a1, &v7, &v6))
    return v6;
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

uint64_t sub_1C6185234(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1C61852E4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  int64x2_t *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(int64x2_t **)result;
    v8 = 24 * v6;
    v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *v7 = v9;
      v7 = (int64x2_t *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v10 = a2[1];
    if ((*a2 != -4096 || v10 != -4096) && (*a2 != -8192 || v10 != -8192))
    {
      v12 = 0;
      result = sub_1C4DD97E0((uint64_t *)v5, a2, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      v11[2] = a2[2];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 3;
  }
  return result;
}

void sub_1C61853C0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      sub_1C4DD9B30((uint64_t *)a1, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      sub_1C6185480(v9 + 1, a2 + 1);
      ++*(_DWORD *)(a1 + 8);
      sub_1C4D8B4AC(a2 + 1);
    }
    a2 += 4;
  }
}

uint64_t *sub_1C6185480(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *result = (uint64_t)result;
  result[1] = (uint64_t)result;
  result[2] = 0;
  v2 = a2[2];
  if (v2)
  {
    v4 = *a2;
    v3 = (uint64_t *)a2[1];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(*a2 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    v6 = *result;
    *(_QWORD *)(v6 + 8) = v3;
    *v3 = v6;
    *result = v4;
    *(_QWORD *)(v4 + 8) = result;
    result[2] = v2;
    a2[2] = 0;
  }
  return result;
}

void sub_1C61854C8(__int128 *a1)
{
  uint64_t v2;

  v2 = sub_1C47AD050((uint64_t)qword_1ED7F0B08, 0, 0);
  byte_1ED7F0B88 = 0;
  qword_1ED7F0B90 = (uint64_t)&off_1E7F9E8D8;
  unk_1ED7F0B98 = 0;
  qword_1ED7F0B08[0] = (uint64_t)&unk_1E819E898;
  qword_1ED7F0BA0 = (uint64_t)&off_1E819E9A0;
  qword_1ED7F0BA8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7F0BC0 = (uint64_t)&qword_1ED7F0BA8;
  llvm::cl::Option::setArgStr(v2, "abort-on-max-devirt-iterations-reached", 0x26uLL);
  xmmword_1ED7F0B28 = *a1;
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED7F0B08);
}

uint64_t sub_1C618556C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  _BYTE v16[8];
  uint64_t v17[3];

  v6 = sub_1C4D91F84(*a1, (uint64_t)&llvm::LazyCallGraphAnalysis::Key);
  v7 = *a1;
  v8 = *a1 + 8;
  if ((*(_BYTE *)*a1 & 1) != 0)
  {
    v9 = 8;
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 16);
  }
  if (v8 + 16 * v9 == v6)
  {
    v11 = a1[1];
    v17[0] = (uint64_t)&llvm::LazyCallGraphAnalysis::Key;
    v17[1] = a2;
    v15 = 0;
    if (sub_1C4DD97E0((uint64_t *)v11, v17, &v15))
      v12 = (uint64_t)v15;
    else
      v12 = *(_QWORD *)v11 + 24 * *(unsigned int *)(v11 + 16);
    v13 = *a1;
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(v12 + 16) + 24)
                                                                         + 16))(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 24), a2, a3, a1);
    v15 = &llvm::LazyCallGraphAnalysis::Key;
    v16[0] = v14;
    sub_1C4D921A4(v13, &v15, v16, (uint64_t)v17);
    v6 = v17[0];
  }
  return *(unsigned __int8 *)(v6 + 8);
}

uint64_t sub_1C6185670(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  void *v15;
  _BYTE v16[8];
  uint64_t v17[3];

  v6 = sub_1C4D91F84(*a1, (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key);
  v7 = *a1;
  v8 = *a1 + 8;
  if ((*(_BYTE *)*a1 & 1) != 0)
  {
    v9 = 8;
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 8);
    v9 = *(unsigned int *)(v7 + 16);
  }
  if (v8 + 16 * v9 == v6)
  {
    v11 = a1[1];
    v17[0] = (uint64_t)&llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key;
    v17[1] = a2;
    v15 = 0;
    if (sub_1C4DD97E0((uint64_t *)v11, v17, &v15))
      v12 = (uint64_t)v15;
    else
      v12 = *(_QWORD *)v11 + 24 * *(unsigned int *)(v11 + 16);
    v13 = *a1;
    v14 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(v12 + 16) + 24)
                                                                         + 16))(*(_QWORD *)(*(_QWORD *)(v12 + 16) + 24), a2, a3, a1);
    v15 = &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key;
    v16[0] = v14;
    sub_1C4D921A4(v13, &v15, v16, (uint64_t)v17);
    v6 = v17[0];
  }
  return *(unsigned __int8 *)(v6 + 8);
}

uint64_t llvm::AnalysisManager<llvm::Module>::Invalidator::invalidate(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE v18[8];
  uint64_t v19[3];

  v8 = sub_1C4D91F84(*a1, a2);
  v9 = *a1;
  v10 = *a1 + 8;
  if ((*(_BYTE *)*a1 & 1) != 0)
  {
    v11 = 8;
  }
  else
  {
    v10 = *(_QWORD *)(v9 + 8);
    v11 = *(unsigned int *)(v9 + 16);
  }
  if (v10 + 16 * v11 == v8)
  {
    v13 = a1[1];
    v19[0] = a2;
    v19[1] = a3;
    v17 = 0;
    if (sub_1C4DD97E0((uint64_t *)v13, v19, &v17))
      v14 = v17;
    else
      v14 = *(_QWORD *)v13 + 24 * *(unsigned int *)(v13 + 16);
    v15 = *a1;
    v16 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t *))(**(_QWORD **)(*(_QWORD *)(v14 + 16) + 24)
                                                                         + 16))(*(_QWORD *)(*(_QWORD *)(v14 + 16) + 24), a3, a4, a1);
    v17 = a2;
    v18[0] = v16;
    sub_1C4D921A4(v15, &v17, v18, (uint64_t)v19);
    v8 = v19[0];
  }
  return *(unsigned __int8 *)(v8 + 8);
}

const void **sub_1C6185870(const void **this, const void **a2)
{
  if (*((_BYTE *)this + 96))
  {
    if (a2 != this)
    {
      llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)this, (const llvm::SmallPtrSetImplBase *)a2);
      llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)(this + 6), (const llvm::SmallPtrSetImplBase *)(a2 + 6));
    }
  }
  else
  {
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)this, this + 4, (const llvm::SmallPtrSetImplBase *)a2);
    llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)(this + 6), this + 10, (const llvm::SmallPtrSetImplBase *)(a2 + 6));
    *((_BYTE *)this + 96) = 1;
  }
  return this;
}

llvm::raw_ostream *llvm::CallGraphNode::print(llvm::CallGraphNode *this, llvm::raw_ostream *a2)
{
  llvm::Value *v4;
  llvm::raw_ostream *v5;
  size_t v6;
  char *Name;
  size_t v8;
  void *v9;
  char *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *result;
  _BYTE *v16;
  uint64_t i;
  uint64_t v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  llvm::Value *v21;
  llvm::raw_ostream *v22;
  size_t v23;
  char *v24;
  size_t v25;
  void *v26;
  llvm::raw_ostream *v27;
  char *v28;
  llvm::raw_ostream *v29;
  _BYTE *v30;

  v4 = (llvm::Value *)*((_QWORD *)this + 1);
  if (v4)
  {
    v5 = sub_1C4816AD8(a2, "Call graph node for function: '");
    Name = llvm::Value::getName(v4);
    v8 = v6;
    v9 = (void *)*((_QWORD *)v5 + 4);
    if (v6 <= *((_QWORD *)v5 + 3) - (_QWORD)v9)
    {
      if (v6)
      {
        memcpy(v9, Name, v6);
        *((_QWORD *)v5 + 4) += v8;
      }
    }
    else
    {
      llvm::raw_ostream::write(v5, Name, v6);
    }
    v10 = "'";
    v11 = v5;
  }
  else
  {
    v10 = "Call graph node <<null function>>";
    v11 = a2;
  }
  sub_1C4816AD8(v11, v10);
  v12 = sub_1C4816AD8(a2, "<<");
  v13 = llvm::raw_ostream::operator<<(v12, (unint64_t)this);
  v14 = sub_1C4816AD8(v13, ">>  #uses=");
  result = llvm::raw_ostream::operator<<(v14, *((unsigned int *)this + 10));
  v16 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v16 >= *((_QWORD *)result + 3))
  {
    result = llvm::raw_ostream::write(result, 10);
  }
  else
  {
    *((_QWORD *)result + 4) = v16 + 1;
    *v16 = 10;
  }
  v18 = *((_QWORD *)this + 2);
  for (i = *((_QWORD *)this + 3); v18 != i; v18 += 40)
  {
    v19 = sub_1C4816AD8(a2, "  CS<");
    v20 = v19;
    if (*(_BYTE *)(v18 + 24))
      llvm::raw_ostream::operator<<(v19, *(_QWORD *)(v18 + 16));
    else
      llvm::operator<<(v19);
    sub_1C4816AD8(v20, "> calls ");
    v21 = *(llvm::Value **)(*(_QWORD *)(v18 + 32) + 8);
    if (v21)
    {
      v22 = sub_1C4816AD8(a2, "function '");
      v24 = llvm::Value::getName(v21);
      v25 = v23;
      v26 = (void *)*((_QWORD *)v22 + 4);
      if (v23 <= *((_QWORD *)v22 + 3) - (_QWORD)v26)
      {
        if (v23)
        {
          memcpy(v26, v24, v23);
          *((_QWORD *)v22 + 4) += v25;
        }
      }
      else
      {
        llvm::raw_ostream::write(v22, v24, v23);
      }
      v27 = v22;
      v28 = "'\n";
    }
    else
    {
      v29 = sub_1C4816AD8(a2, "<<null function>><<");
      v27 = llvm::raw_ostream::operator<<(v29, *(_QWORD *)(v18 + 32));
      v28 = ">>\n";
    }
    result = sub_1C4816AD8(v27, v28);
  }
  v30 = (_BYTE *)*((_QWORD *)a2 + 4);
  if ((unint64_t)v30 >= *((_QWORD *)a2 + 3))
    return llvm::raw_ostream::write(a2, 10);
  *((_QWORD *)a2 + 4) = v30 + 1;
  *v30 = 10;
  return result;
}

void llvm::CallGraph::dump(llvm::CallGraph *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  llvm::CallGraph::print(this, v2);
}

uint64_t llvm::CallGraph::ReplaceExternalCallEdge(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(result + 80);
  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  while (v4 != v5)
  {
    if (*(_QWORD *)(v4 + 32) == a2)
    {
      --*(_DWORD *)(a2 + 40);
      *(_QWORD *)(v4 + 32) = a3;
      ++*(_DWORD *)(a3 + 40);
    }
    v4 += 40;
  }
  return result;
}

llvm::raw_ostream *llvm::CallGraphNode::dump(llvm::CallGraphNode *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return llvm::CallGraphNode::print(this, v2);
}

_QWORD *llvm::CallGraphPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;

  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a3, &llvm::CallGraphAnalysis::Key, a2);
  llvm::CallGraph::print((llvm::CallGraph *)(ResultImpl + 8), *a1);
  return llvm::InstCountPass::run(a4);
}

uint64_t llvm::CallGraphWrapperPass::CallGraphWrapperPass(uint64_t this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = &llvm::CallGraphWrapperPass::ID;
  *(_DWORD *)(this + 24) = 4;
  *(_QWORD *)this = &off_1E8135418;
  *(_QWORD *)(this + 32) = 0;
  if (!atomic_load(qword_1ED830BC0))
  {
    v3 = this;
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    this = v3;
  }
  v5 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED82D020);
  if (v2 != -1)
  {
    v7[0] = sub_1C4DDD7D4;
    v7[1] = &v5;
    v6 = v7;
    v4 = this;
    std::__call_once(&qword_1ED82D020, &v6, (void (__cdecl *)(void *))sub_1C4776838);
    return v4;
  }
  return this;
}

void llvm::initializeCallGraphWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82D020);
  if (v2 != -1)
  {
    v5[0] = sub_1C4DDD7D4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82D020, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void llvm::CallGraphWrapperPass::~CallGraphWrapperPass(llvm::CallGraphWrapperPass *this)
{
  llvm::CallGraph *v2;
  llvm::Pass *v3;

  *(_QWORD *)this = &off_1E8135418;
  v2 = (llvm::CallGraph *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = this;
    llvm::CallGraph::~CallGraph(v2);
    MEMORY[0x1CAA32FC0]();
    llvm::Pass::~Pass(v3);
  }
  else
  {
    llvm::Pass::~Pass(this);
  }
}

{
  llvm::CallGraphWrapperPass::~CallGraphWrapperPass(this);
  JUMPOUT(0x1CAA32FC0);
}

void llvm::CallGraphWrapperPass::getAnalysisUsage(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

void llvm::CallGraphWrapperPass::print(llvm::CallGraphWrapperPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  llvm::CallGraph *v3;

  v3 = (llvm::CallGraph *)*((_QWORD *)this + 4);
  if (v3)
    llvm::CallGraph::print(v3, a2);
  else
    sub_1C4816AD8(a2, "No call graph has been built!\n");
}

uint64_t llvm::CallGraphWrapperPass::dump(llvm::CallGraphWrapperPass *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return (*(uint64_t (**)(llvm::CallGraphWrapperPass *, llvm *, _QWORD))(*(_QWORD *)this + 40))(this, v2, 0);
}

uint64_t llvm::callDefaultCtor<llvm::CallGraphWrapperPass>()
{
  uint64_t v0;

  v0 = operator new();
  return llvm::CallGraphWrapperPass::CallGraphWrapperPass(v0);
}

llvm::Value *sub_1C6185E84(llvm::CallBase **a1)
{
  llvm::Value **v2;
  llvm::Value *result;

  if (*((_DWORD *)a1 + 4) || llvm::CallBase::isIndirectCall(*a1))
    v2 = (llvm::Value **)((char *)*a1 + 32 * *(unsigned int *)a1[1] + -32 * (*((_DWORD *)*a1 + 5) & 0x7FFFFFF));
  else
    v2 = (llvm::Value **)((char *)*a1 - 32);
  result = *v2;
  if (*v2)
  {
    result = llvm::Value::stripPointerCasts(result);
    if (*((_BYTE *)result + 16))
      return 0;
  }
  return result;
}

uint64_t sub_1C6185EF0(uint64_t result)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(result + 8);
  for (i = *(_QWORD *)(result + 16); i != v2; i = *(_QWORD *)(v7 + 16))
  {
    v6 = v2;
    v7 = result;
    *(_QWORD *)(result + 16) = i - 16;
    v5 = *(_QWORD *)(i - 8);
    v4 = (_QWORD *)(i - 8);
    v3 = v5;
    *v4 = 0;
    if (v5)
      sub_1C4DDE2A8((uint64_t)v4, v3);
    v2 = v6;
    result = v7;
  }
  if (*(_QWORD *)result)
  {
    v8 = result;
    operator delete(*(void **)result);
    return v8;
  }
  return result;
}

_QWORD *llvm::CallGraphSCC::DeleteNode(uint64_t a1, uint64_t a2)
{
  return llvm::CallGraphSCC::ReplaceNode(a1, a2, 0);
}

void llvm::CallGraphSCCPass::assignPassManager(llvm::Pass *a1, llvm::PMStack *a2)
{
  uint64_t v4;
  uint64_t i;
  int v6;
  uint64_t v7;
  uint64_t v8;
  llvm::PMDataManager *v9;
  int32x2_t *v10;
  uint64_t v11;

  v4 = *(_QWORD *)a2;
  for (i = *((_QWORD *)a2 + 1); v4 != i; i = *((_QWORD *)a2 + 1))
  {
    if ((*(int (**)(_QWORD))(**(_QWORD **)(i - 8) + 40))(*(_QWORD *)(i - 8)) <= 2)
    {
      v4 = *((_QWORD *)a2 + 1);
      break;
    }
    llvm::PMStack::pop(a2);
    v4 = *(_QWORD *)a2;
  }
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 - 8) + 40))(*(_QWORD *)(v4 - 8));
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 1) - 8);
  if (v6 == 2)
  {
    if (v7)
      v8 = v7 - 32;
    else
      v8 = 0;
  }
  else
  {
    v8 = operator new();
    *(_QWORD *)(v8 + 16) = &unk_1EF8EFBC9;
    *(_QWORD *)(v8 + 32) = &unk_1E81356B8;
    v9 = (llvm::PMDataManager *)(v8 + 32);
    *(_DWORD *)(v8 + 24) = 4;
    *(_QWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = v8 + 64;
    *(_QWORD *)(v8 + 56) = 0x1000000000;
    *(_DWORD *)(v8 + 256) = 0;
    *(_QWORD *)(v8 + 240) = 0;
    *(_QWORD *)(v8 + 248) = 0;
    *(_QWORD *)(v8 + 264) = v8 + 280;
    *(_QWORD *)(v8 + 272) = 0x1000000000;
    *(_DWORD *)(v8 + 408) = 0;
    *(_OWORD *)(v8 + 192) = 0u;
    *(_OWORD *)(v8 + 208) = 0u;
    *(_OWORD *)(v8 + 224) = 0u;
    *(_QWORD *)v8 = &off_1E8135608;
    *(_QWORD *)(v8 + 8) = 0;
    v10 = *(int32x2_t **)(v7 + 8);
    v11 = v10[15].u32[0];
    if (v11 >= v10[15].i32[1])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v10[14], (uint64_t)&v10[16], v11 + 1, 8);
      LODWORD(v11) = v10[15].i32[0];
    }
    *(_QWORD *)(*(_QWORD *)&v10[14] + 8 * v11) = v9;
    ++v10[15].i32[0];
    llvm::PMTopLevelManager::schedulePass(v10, (const void **)v8);
    llvm::PMStack::push(a2, v9);
  }
  llvm::PMDataManager::add((llvm::PMDataManager *)(v8 + 32), a1, 1);
}

void *llvm::CallGraphSCCPass::getAnalysisUsage(llvm::CallGraphSCCPass *this, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::CallGraphWrapperPass::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::CallGraphWrapperPass::ID);
}

void llvm::initializeDummyCGSCCPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82D0F0);
  if (v2 != -1)
  {
    v5[0] = sub_1C4DE2F5C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82D0F0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::callDefaultCtor<llvm::DummyCGSCCPass>()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C61861A8(v0);
}

uint64_t sub_1C61861A8(uint64_t a1)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *(_QWORD *)(a1 + 16) = &llvm::DummyCGSCCPass::ID;
  *(_DWORD *)(a1 + 24) = 3;
  *(_QWORD *)a1 = &off_1E7FA79F0;
  *(_QWORD *)(a1 + 8) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry((llvm::PassRegistry *)a1);
  v2 = atomic_load(&qword_1ED82D0F0);
  if (v2 != -1)
  {
    v6[0] = sub_1C4DE2F5C;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82D0F0, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C6186240(uint64_t a1, char *a2, _WORD *a3, int **a4)
{
  uint64_t v8;
  size_t v9;
  int v10;

  v8 = sub_1C47AD050(a1, 0, 0);
  *(_DWORD *)(v8 + 128) = 0;
  *(_QWORD *)(v8 + 136) = &off_1E7F952A8;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)v8 = &unk_1E819E3B0;
  *(_QWORD *)(v8 + 152) = &unk_1E819E2C0;
  *(_QWORD *)(v8 + 160) = &off_1E7F95260;
  *(_QWORD *)(v8 + 184) = v8 + 160;
  v9 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v9);
  *(_WORD *)(a1 + 10) = (32 * (*a3 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  v10 = **a4;
  *(_DWORD *)(a1 + 128) = v10;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v10;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

_QWORD *llvm::CallGraphDOTPrinterPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;

  v6 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, a1)+ 8);
  sub_1C4DE54C4(a1, (uint64_t)sub_1C4DE777C, (uint64_t)&v6);
  return llvm::InstCountPass::run(a3);
}

_QWORD *llvm::CallGraphViewerPass::run@<X0>(llvm::Module *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;

  v6 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, (uint64_t)a1)+ 8);
  sub_1C4DE5830(a1, (uint64_t)sub_1C4DE77A4, (uint64_t)&v6);
  return llvm::InstCountPass::run(a3);
}

uint64_t llvm::createCallGraphViewerPass(llvm *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8EFBD0;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E81357F0;
  return result;
}

uint64_t llvm::createCallGraphDOTPrinterPass(llvm *this)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8EFBD1;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E8135890;
  return result;
}

void sub_1C6186470()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C6186484(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E81357A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C61864BC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81357A8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C61864DC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
}

_QWORD *sub_1C61864E4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  MEMORY[0x1CAA32FB4](a1[2], 8);
  return a1;
}

uint64_t llvm::PointerMayBeCaptured(llvm *a1, char a2, int a3, uint64_t a4, llvm::CaptureTracker *a5)
{
  _QWORD v6[2];
  char v7;
  unsigned __int8 v8;

  v6[0] = &off_1E8135970;
  v6[1] = a4;
  v7 = a2;
  v8 = 0;
  llvm::PointerMayBeCaptured(a1, (const llvm::Value *)v6, a5);
  return v8;
}

uint64_t llvm::createCostModelAnalysisPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C4DE980C(v1);
}

_QWORD *llvm::CostModelPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  llvm::raw_ostream *v8;
  size_t v9;
  char *Name;
  size_t v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  llvm::TargetTransformInfo *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *i;
  const llvm::Instruction *v19;
  uint64_t v20;
  int v21;
  llvm::raw_ostream *v22;
  unint64_t v23;
  llvm::raw_ostream *v24;
  uint64_t v26;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::TargetIRAnalysis::Key, (uint64_t)a2);
  v8 = sub_1C4816AD8(*a1, "Printing analysis 'Cost Model Analysis' for function '");
  Name = llvm::Value::getName(a2);
  v11 = v9;
  v12 = (void *)*((_QWORD *)v8 + 4);
  v26 = a4;
  if (v9 <= *((_QWORD *)v8 + 3) - (_QWORD)v12)
  {
    if (v9)
    {
      memcpy(v12, Name, v9);
      *((_QWORD *)v8 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v8, Name, v9);
  }
  sub_1C4816AD8(v8, "':\n");
  v13 = (_QWORD *)((char *)a2 + 72);
  v14 = (_QWORD *)*((_QWORD *)a2 + 10);
  if (v14 != (_QWORD *)((char *)a2 + 72))
  {
    v15 = (llvm::TargetTransformInfo *)(ResultImpl + 8);
    do
    {
      v16 = v14 - 3;
      if (!v14)
        v16 = 0;
      v17 = v16 + 5;
      for (i = (_QWORD *)v16[6]; i != v17; i = (_QWORD *)i[1])
      {
        if (i)
          v19 = (const llvm::Instruction *)(i - 3);
        else
          v19 = 0;
        v20 = sub_1C618675C(v15, v19, dword_1ED7F1030);
        if (v21)
        {
          sub_1C4816AD8(*a1, "Cost Model: Invalid cost");
        }
        else
        {
          v23 = v20;
          v24 = sub_1C4816AD8(*a1, "Cost Model: Found an estimated cost of ");
          llvm::raw_ostream::operator<<(v24, v23);
        }
        v22 = sub_1C4816AD8(*a1, " for instruction: ");
        llvm::Value::print(v19, v22, 0);
        sub_1C4816AD8(v22, "\n");
      }
      v14 = (_QWORD *)v14[1];
    }
    while (v14 != v13);
  }
  return llvm::InstCountPass::run(v26);
}

uint64_t sub_1C618675C(llvm::TargetTransformInfo *a1, const llvm::Instruction *a2, int a3)
{
  if ((a3 - 2) < 2)
    return sub_1C4DE9CE4(a1, (uint64_t)a2);
  if (a3 == 1)
    return llvm::TargetTransformInfo::getInstructionLatency(a1, a2);
  if (a3)
    return 0;
  return llvm::TargetTransformInfo::getInstructionThroughput(a1, a2);
}

_QWORD *sub_1C61867A8(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8135A98;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C61867E8(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C6186860(v11);
}

uint64_t sub_1C6186860(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C6186878(_QWORD *a1)
{
  sub_1C4DE98D8(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C618689C(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C61868A8(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C61868B8(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &off_1E8135AE8;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C6186924(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C618692C(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8135A98;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C618697C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C6186984(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C6186998(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C61869AC(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C61869C0(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1C61869EC(__int128 *a1, int **a2, uint64_t *a3)
{
  sub_1C47AD050((uint64_t)qword_1ED7F0FB0, 0, 0);
  dword_1ED7F1030 = 0;
  qword_1ED7F1038 = (uint64_t)&off_1E8135AE8;
  *(_QWORD *)&dword_1ED7F1040 = 0;
  qword_1ED7F0FB0[0] = (uint64_t)off_1E8135A30;
  qword_1ED7F1048 = (uint64_t)&off_1E8135A98;
  qword_1ED7F1050 = (uint64_t)qword_1ED7F0FB0;
  qword_1ED7F1058 = (uint64_t)&unk_1ED7F1068;
  qword_1ED7F1060 = 0x800000000;
  qword_1ED7F11E8 = (uint64_t)&off_1E8135BC8;
  qword_1ED7F1200 = (uint64_t)&qword_1ED7F11E8;
  sub_1C4DE9E24(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)qword_1ED7F0FB0);
}

void sub_1C6186A98()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6186AAC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8135BC8;
  return result;
}

void sub_1C6186AD0(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8135BC8;
}

void sub_1C6186AEC(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  _QWORD v11[5];
  int v12;
  char v13;

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = &off_1E8135AE8;
  v13 = 1;
  v12 = a3;
  v7 = sub_1C4DE9EC0((unint64_t)v11);
  v8 = qword_1ED7F1058 + 48 * qword_1ED7F1060;
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 32) = &off_1E8135B08;
  v10 = *(_BYTE *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(_BYTE *)(v8 + 44) = v10;
  *(_QWORD *)(v8 + 32) = &off_1E8135AE8;
  LODWORD(qword_1ED7F1060) = qword_1ED7F1060 + 1;
  llvm::cl::AddLiteralOption(qword_1ED7F1050, a1, a2);
}

void sub_1C6186BA0(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED7F1058, a1, 48, &v8);
  v2 = (_OWORD *)qword_1ED7F1058;
  if ((_DWORD)qword_1ED7F1060)
  {
    v3 = qword_1ED7F1058 + 48 * qword_1ED7F1060;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E8135B08;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E8135AE8;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1ED7F1058;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1ED7F1068)
    free(v2);
  qword_1ED7F1058 = (uint64_t)v1;
  HIDWORD(qword_1ED7F1060) = v7;
}

llvm::UndefValue *llvm::ConstantFoldLoadFromConst(llvm::Type **this, llvm::Constant ***a2, llvm::Type *a3, const llvm::DataLayout *a4, const llvm::DataLayout *a5)
{
  llvm::UndefValue *result;
  llvm::UndefValue *v6;
  const void *v7;
  unsigned int v8;

  v8 = 64;
  v7 = 0;
  result = llvm::ConstantFoldLoadFromConst(this, a2, &v7, a3, a5);
  if (v8 >= 0x41)
  {
    if (v7)
    {
      v6 = result;
      MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
      return v6;
    }
  }
  return result;
}

void sub_1C6186CDC(llvm::IRBuilderFolder *a1)
{
  llvm::IRBuilderFolder::~IRBuilderFolder(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::UndefValue *sub_1C6186D00(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *FAdd;

  FAdd = llvm::ConstantExpr::getFAdd(this, a3, a3, a4);
  return sub_1C4DF9348(a1, (uint64_t)FAdd);
}

llvm::UndefValue *sub_1C6186D30(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  llvm::ValueHandleBase *Sub;

  Sub = llvm::ConstantExpr::getSub(this, a3, a4, a5);
  return sub_1C4DF9348(a1, (uint64_t)Sub);
}

llvm::UndefValue *sub_1C6186D68(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *FSub;

  FSub = llvm::ConstantExpr::getFSub(this, a3, a3, a4);
  return sub_1C4DF9348(a1, (uint64_t)FSub);
}

llvm::UndefValue *sub_1C6186D98(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *FMul;

  FMul = llvm::ConstantExpr::getFMul(this, a3, a3, a4);
  return sub_1C4DF9348(a1, (uint64_t)FMul);
}

llvm::UndefValue *sub_1C6186DC8(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *UDiv;

  UDiv = llvm::ConstantExpr::getUDiv(this, a3, a4, a4);
  return sub_1C4DF9348(a1, (uint64_t)UDiv);
}

llvm::UndefValue *sub_1C6186DFC(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *SDiv;

  SDiv = llvm::ConstantExpr::getSDiv(this, a3, a4, a4);
  return sub_1C4DF9348(a1, (uint64_t)SDiv);
}

llvm::UndefValue *sub_1C6186E30(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *FDiv;

  FDiv = llvm::ConstantExpr::getFDiv(this, a3, a3, a4);
  return sub_1C4DF9348(a1, (uint64_t)FDiv);
}

llvm::UndefValue *sub_1C6186E60(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *URem;

  URem = llvm::ConstantExpr::getURem(this, a3, a3, a4);
  return sub_1C4DF9348(a1, (uint64_t)URem);
}

llvm::UndefValue *sub_1C6186E90(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *SRem;

  SRem = llvm::ConstantExpr::getSRem(this, a3, a3, a4);
  return sub_1C4DF9348(a1, (uint64_t)SRem);
}

llvm::UndefValue *sub_1C6186EC0(uint64_t a1, llvm::ConstantExpr *a2, llvm::Constant *a3, uint64_t a4, uint64_t a5, llvm::Type *a6)
{
  llvm::ValueHandleBase *FRem;

  FRem = llvm::ConstantExpr::getFRem(a2, a3, a3, a4, a5, a6);
  return sub_1C4DF9348(a1, (uint64_t)FRem);
}

llvm::UndefValue *sub_1C6186EF0(uint64_t a1, llvm::ConstantExpr *a2, llvm::Constant *a3, llvm::Constant *a4, uint64_t a5, llvm::Type *a6)
{
  llvm::ValueHandleBase *AShr;

  AShr = llvm::ConstantExpr::getAShr(a2, a3, a4, (BOOL)a4, a5, a6);
  return sub_1C4DF9348(a1, (uint64_t)AShr);
}

llvm::UndefValue *sub_1C6186F24(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t Xor;

  Xor = llvm::ConstantExpr::getXor(this, a3, a3, a4);
  return sub_1C4DF9348(a1, Xor);
}

llvm::UndefValue *sub_1C6186F54(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, int a4)
{
  llvm::ValueHandleBase *Neg;

  Neg = llvm::ConstantExpr::getNeg(this, a3, a4);
  return sub_1C4DF9348(a1, (uint64_t)Neg);
}

llvm::UndefValue *sub_1C6186F88(uint64_t a1, llvm::ConstantExpr *this, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  uint64_t FNeg;

  FNeg = llvm::ConstantExpr::getFNeg(this, this, a3, a4, a5);
  return sub_1C4DF9348(a1, FNeg);
}

llvm::UndefValue *sub_1C6186FB4(uint64_t a1, llvm::ConstantExpr *this, unsigned __int8 *a3, uint64_t a4, llvm::Type *a5)
{
  uint64_t v6;

  v6 = llvm::ConstantExpr::get(this, a3, 0, 0, a5);
  return sub_1C4DF9348(a1, v6);
}

llvm::UndefValue *sub_1C6186FEC(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3)
{
  llvm::ConstantExpr *PointerCast;

  if (*(llvm::Constant **)this == a3)
    return this;
  PointerCast = llvm::ConstantExpr::getPointerCast(this, a3, a3);
  return sub_1C4DF9348(a1, (uint64_t)PointerCast);
}

llvm::UndefValue *sub_1C6187038(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3)
{
  llvm::UndefValue *PointerBitCastOrAddrSpaceCast;

  if (*(llvm::Constant **)this == a3)
    return this;
  PointerBitCastOrAddrSpaceCast = llvm::ConstantExpr::getPointerBitCastOrAddrSpaceCast(this, a3, a3);
  return sub_1C4DF9348(a1, (uint64_t)PointerBitCastOrAddrSpaceCast);
}

llvm::UndefValue *sub_1C6187084(uint64_t a1, llvm::ConstantExpr *this, llvm::Type ***a3)
{
  llvm::ConstantExpr *FPCast;

  if (*(llvm::Type ****)this == a3)
    return this;
  FPCast = llvm::ConstantExpr::getFPCast(this, a3, (llvm::Type *)a3);
  return sub_1C4DF9348(a1, (uint64_t)FPCast);
}

llvm::UndefValue *sub_1C61870D0(uint64_t a1, llvm::Constant **a2, llvm::Constant *a3)
{
  llvm::UndefValue *v4;

  if (*a2 == a3)
    return (llvm::UndefValue *)a2;
  v4 = sub_1C537D3B8((llvm *)0x31, (uint64_t)a2, a3, 0);
  return sub_1C4DF9348(a1, (uint64_t)v4);
}

llvm::UndefValue *sub_1C618711C(uint64_t a1, llvm::Constant **a2, llvm::Constant *a3)
{
  llvm::UndefValue *v4;

  if (*a2 == a3)
    return (llvm::UndefValue *)a2;
  v4 = sub_1C537D3B8((llvm *)0x30, (uint64_t)a2, a3, 0);
  return sub_1C4DF9348(a1, (uint64_t)v4);
}

llvm::UndefValue *sub_1C6187168(uint64_t a1, llvm::Constant **a2, llvm::Constant *a3)
{
  llvm::UndefValue *v4;

  if (*a2 == a3)
    return (llvm::UndefValue *)a2;
  v4 = sub_1C537D3B8((llvm *)0x2F, (uint64_t)a2, a3, 0);
  return sub_1C4DF9348(a1, (uint64_t)v4);
}

llvm::UndefValue *sub_1C61871B4(uint64_t a1, llvm::Type **this, llvm::Type ***a3)
{
  llvm::UndefValue *ZExtOrBitCast;

  if (*this == (llvm::Type *)a3)
    return (llvm::UndefValue *)this;
  ZExtOrBitCast = llvm::ConstantExpr::getZExtOrBitCast(this, a3, (llvm::Type *)a3);
  return sub_1C4DF9348(a1, (uint64_t)ZExtOrBitCast);
}

llvm::UndefValue *sub_1C6187200(uint64_t a1, llvm::Type **this, llvm::Type ***a3)
{
  llvm::ConstantExpr *SExtOrBitCast;

  if (*this == (llvm::Type *)a3)
    return (llvm::UndefValue *)this;
  SExtOrBitCast = llvm::ConstantExpr::getSExtOrBitCast(this, a3, (llvm::Type *)a3);
  return sub_1C4DF9348(a1, (uint64_t)SExtOrBitCast);
}

llvm::UndefValue *sub_1C618724C(uint64_t a1, llvm::Type **a2, llvm::Type ***a3)
{
  llvm::ConstantExpr *TruncOrBitCast;

  if (*a2 == (llvm::Type *)a3)
    return (llvm::UndefValue *)a2;
  TruncOrBitCast = llvm::ConstantExpr::getTruncOrBitCast(a2, a3, (llvm::Type *)a3);
  return sub_1C4DF9348(a1, (uint64_t)TruncOrBitCast);
}

llvm::UndefValue *sub_1C6187298(uint64_t a1, unsigned __int16 a2, unsigned __int8 *a3, llvm::Constant *a4)
{
  llvm::UndefValue *Compare;

  Compare = llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)a2, a3, a4, 0);
  return sub_1C4DF9348(a1, (uint64_t)Compare);
}

llvm::UndefValue *sub_1C61872D0(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Type *a4)
{
  llvm::UndefValue *Element;

  Element = llvm::ConstantExpr::getExtractElement(this, a3, 0, a4);
  return sub_1C4DF9348(a1, (uint64_t)Element);
}

llvm::UndefValue *sub_1C6187304(uint64_t a1, llvm *a2, llvm *a3, int *a4, _BOOL8 a5)
{
  llvm::UndefValue *ShuffleVector;

  ShuffleVector = llvm::ConstantExpr::getShuffleVector(a2, a3, a4, a5, 0);
  return sub_1C4DF9348(a1, (uint64_t)ShuffleVector);
}

llvm::UndefValue *sub_1C6187340(uint64_t a1, llvm::Constant *a2, uint64_t *a3, _DWORD *a4, uint64_t a5)
{
  void *InsertValue;

  InsertValue = llvm::ConstantExpr::getInsertValue(a2, a3, a4, a5, 0);
  return sub_1C4DF9348(a1, (uint64_t)InsertValue);
}

llvm::detail::DoubleAPFloat *sub_1C618737C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  BOOL v11;
  BOOL v12;
  int v13;
  uint64_t v14;

  v5 = (uint64_t *)(a1 + 8);
  if (*(_UNKNOWN **)(a1 + 8) == &unk_1C866F1C0)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = a1;
  v7 = *(unsigned __int8 *)(v6 + 28);
  if ((v7 & 7) != 1)
  {
    v5 = (uint64_t *)(a2 + 8);
    v8 = *(_UNKNOWN **)(a2 + 8) == &unk_1C866F1C0 ? *(_QWORD *)(a2 + 16) : a2;
    v9 = *(_BYTE *)(v8 + 28);
    if ((v9 & 7) != 1)
    {
      v11 = (v7 & 7) == 3 && (v9 & 7) == 3;
      if (!v11 || ((v7 >> 3) & 1) == (v9 & 8) >> 3)
      {
        sub_1C47B415C(a2, a1);
        v12 = v13 == 0;
      }
      else
      {
        v12 = (v7 & 8) == 0;
      }
      if (v12)
        v14 = a2;
      else
        v14 = a1;
      v5 = (uint64_t *)(v14 + 8);
    }
  }
  return sub_1C47A813C((llvm::detail::DoubleAPFloat *)(a3 + 8), v5);
}

uint64_t sub_1C6187438(uint64_t a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  const llvm::detail::DoubleAPFloat *v4;

  v3 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v4 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v3 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::mod(v2, v4);
  else
    return llvm::detail::IEEEFloat::mod(v2, v4);
}

llvm::detail::DoubleAPFloat *sub_1C6187458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  BOOL v11;
  uint64_t v12;
  int v13;

  v5 = (uint64_t *)(a1 + 8);
  if (*(_UNKNOWN **)(a1 + 8) == &unk_1C866F1C0)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = a1;
  v7 = *(unsigned __int8 *)(v6 + 28);
  if ((v7 & 7) != 1)
  {
    v5 = (uint64_t *)(a2 + 8);
    v8 = *(_UNKNOWN **)(a2 + 8) == &unk_1C866F1C0 ? *(_QWORD *)(a2 + 16) : a2;
    v9 = *(_BYTE *)(v8 + 28);
    if ((v9 & 7) != 1)
    {
      v11 = (v7 & 7) == 3 && (v9 & 7) == 3;
      if (!v11 || ((v7 >> 3) & 1) == (v9 & 8) >> 3)
      {
        sub_1C47B415C(a1, a2);
        if (v13)
          v12 = a1;
        else
          v12 = a2;
      }
      else if ((v7 & 8) != 0)
      {
        v12 = a2;
      }
      else
      {
        v12 = a1;
      }
      v5 = (uint64_t *)(v12 + 8);
    }
  }
  return sub_1C47A813C((llvm::detail::DoubleAPFloat *)(a3 + 8), v5);
}

_QWORD *sub_1C6187518(uint64_t a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  const llvm::detail::DoubleAPFloat *v4;

  v3 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  v4 = (const llvm::detail::DoubleAPFloat *)(a2 + 8);
  if (v3 == &unk_1C866F1C0)
    return (_QWORD *)llvm::detail::DoubleAPFloat::remainder(v2, v4);
  else
    return llvm::detail::IEEEFloat::remainder((__int128 **)v2, v4);
}

llvm::Value **sub_1C6187538(int a1, llvm::Type ***this)
{
  llvm::Type *v4;
  unsigned int PrimitiveSizeInBits;
  const llvm::APInt *v6;
  llvm::Value **IntegerValue;
  uint64_t v9;
  unsigned int v10;

  v4 = (llvm::Type *)this;
  if (((_DWORD)this[1] & 0xFE) == 0x12)
    v4 = *this[2];
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v4);
  sub_1C4DF901C(a1, PrimitiveSizeInBits, (llvm::APInt *)&v9);
  IntegerValue = llvm::Constant::getIntegerValue(this, (llvm::Type *)&v9, v6);
  if (v10 >= 0x41 && v9)
    MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
  return IntegerValue;
}

uint64_t sub_1C61875D4(uint64_t this, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;

  v2 = *(void **)(this + 8);
  v3 = this;
  if (v2 == &unk_1C866F1C0)
    v3 = *(_QWORD *)(this + 16);
  v4 = (*(unsigned __int8 *)(v3 + 28) >> 3) & 1;
  if (*(_UNKNOWN **)(a2 + 8) == &unk_1C866F1C0)
    v5 = *(_QWORD *)(a2 + 16);
  else
    v5 = a2;
  if (v4 != (*(_BYTE *)(v5 + 28) & 8) >> 3)
  {
    if (v2 == &unk_1C866F1C0)
      return llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)(this + 8));
    else
      *(_BYTE *)(this + 28) ^= 8u;
  }
  return this;
}

_QWORD *llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::getTopLevelParentCycle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  int v9;
  _QWORD *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = a2;
  v5 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  v11[0] = 0;
  if (sub_1C6144BDC(v4, *(_DWORD *)(v5 + 16), a2, v11))
    v6 = v11[0] == *(_QWORD *)v5 + 16 * *(unsigned int *)(v5 + 16);
  else
    v6 = 1;
  if (!v6)
    return *(_QWORD **)(v11[0] + 8);
  v11[0] = 0;
  v9 = sub_1C6144BDC(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 24), a2, v11);
  v7 = 0;
  if (v9 && v11[0] != *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
  {
    v10 = *(_QWORD **)(v11[0] + 8);
    do
    {
      v7 = v10;
      v10 = (_QWORD *)*v10;
    }
    while (v10);
    v12 = v7;
    sub_1C6187718((uint64_t)v11, v5, &v13, &v12);
  }
  return v7;
}

{
  return __ZN4llvm16GenericCycleInfoINS_17GenericSSAContextINS_8FunctionEEEE22getTopLevelParentCycleEPNS_10BasicBlockE(a1, a2);
}

uint64_t sub_1C6187718(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C6144BDC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6180ABC(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

void sub_1C61877B0(_QWORD *a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  _OWORD v6[4];
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  sub_1C6187E38((uint64_t)&v11, a2);
  v7 = 0;
  __p = 0;
  memset(v6, 0, sizeof(v6));
  v3 = (char *)v6 + 8;
  v4 = (char *)v6 + 8;
  v5 = 8;
  v9 = 0;
  v10 = 0;
  sub_1C6187CC0(a1, (uint64_t)&v11, (uint64_t)&v3);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v4 != v3)
    free(v4);
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v12 != v11)
    free(v12);
}

uint64_t llvm::CycleAnalysis::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_DWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::compute((char **)a2, a1);
}

_QWORD *llvm::CycleInfoPrinterPass::CycleInfoPrinterPass(_QWORD *this, llvm::raw_ostream *a2)
{
  *this = a2;
  return this;
}

_QWORD *llvm::CycleInfoPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::raw_ostream *v8;
  size_t v9;
  char *Name;
  size_t v11;
  void *v12;
  uint64_t ResultImpl;

  v8 = sub_1C4816AD8(*a1, "CycleInfo for function: ");
  Name = llvm::Value::getName(a2);
  v11 = v9;
  v12 = (void *)*((_QWORD *)v8 + 4);
  if (v9 <= *((_QWORD *)v8 + 3) - (_QWORD)v12)
  {
    if (v9)
    {
      memcpy(v12, Name, v9);
      *((_QWORD *)v8 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v8, Name, v9);
  }
  sub_1C4816AD8(v8, "\n");
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::CycleAnalysis::Key, (uint64_t)a2);
  llvm::GenericCycleInfo<llvm::GenericSSAContext<llvm::Function>>::print(ResultImpl + 8, *a1);
  return llvm::InstCountPass::run(a4);
}

uint64_t sub_1C6187958(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 56);
  sub_1C4DFB9EC(&v3);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 32), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

void sub_1C61879A8(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int NumSuccessors;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[8];
  void *v21;
  uint64_t v22;
  _QWORD v23[5];

  v3 = 0;
  v23[4] = *MEMORY[0x1E0C80C00];
  v21 = v23;
  v22 = 0x800000000;
  v18 = v20;
  v17 = 0;
  v20[0] = a2;
  v19 = 0x800000001;
  v4 = a1 + 8;
  v5 = 1;
  do
  {
    v6 = *((_QWORD *)v18 + v5 - 1);
    v16 = v6;
    if ((sub_1C6144BDC(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 24), v6, v15) & 1) != 0)
    {
      v7 = v19;
      if ((_DWORD)v19 == *((_DWORD *)v21 + v22 - 1))
      {
        v15[0] = 0;
        if ((sub_1C6144BDC(*(_QWORD *)(a1 + 8), *(_DWORD *)(a1 + 24), v6, v15) & 1) != 0)
          v14 = v15[0];
        else
          v14 = *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24);
        *(_DWORD *)(v14 + 12) = v3;
        LODWORD(v22) = v22 - 1;
        v7 = v19;
      }
      v5 = v7 - 1;
      LODWORD(v19) = v5;
    }
    else
    {
      v8 = v19;
      if (v22 >= HIDWORD(v22))
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, v22 + 1, 4);
      *((_DWORD *)v21 + v22) = v8;
      LODWORD(v22) = v22 + 1;
      v9 = *(_QWORD *)(v6 + 40);
      if (v9 == v6 + 40
        || ((v10 = v9 - 24, v9) ? (v11 = (unsigned __int8 *)(v9 - 24)) : (v11 = 0), v11[16] - 29 > 0xA))
      {
        v10 = 0;
        v11 = 0;
        NumSuccessors = 0;
      }
      else
      {
        NumSuccessors = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v11);
      }
      sub_1C4DFBE40((unsigned int *)&v18, (uint64_t)v18 + 8 * v19, (llvm::Instruction *)v11, 0, v10, NumSuccessors);
      v17 = ++v3;
      sub_1C6187C28((uint64_t)v15, v4, &v16, &v17);
      v13 = *(unsigned int *)(a1 + 40);
      if (v13 >= *(unsigned int *)(a1 + 44))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, v13 + 1, 8);
        v13 = *(unsigned int *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * v13) = v6;
      ++*(_DWORD *)(a1 + 40);
      v5 = v19;
    }
  }
  while (v5);
  if (v18 != v20)
    free(v18);
  if (v21 != v23)
    free(v21);
}

uint64_t sub_1C6187C28(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C6144BDC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6180ABC(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    *(_DWORD *)(result + 12) = 0;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

void sub_1C6187CC0(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;

  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v11, &v13, 8, (uint64_t *)a2);
  *(_OWORD *)v14 = *(_OWORD *)(a2 + 96);
  v15 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)&v6, &v8, 8, (uint64_t *)a3);
  *(_OWORD *)__p = *(_OWORD *)(a3 + 96);
  v10 = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  sub_1C6187DA4(a1, (uint64_t)&v11, (uint64_t)&v6);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v7 != v6)
    free(v7);
  if (v14[0])
  {
    v14[1] = v14[0];
    operator delete(v14[0]);
  }
  if (v12 != v11)
    free(v12);
}

_QWORD *sub_1C6187DA4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;

  v6 = (_QWORD *)llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)a1, a1 + 4, 8, (uint64_t *)a2);
  v6[12] = 0;
  v6[13] = 0;
  v6[14] = 0;
  *((_OWORD *)v6 + 6) = *(_OWORD *)(a2 + 96);
  v6[14] = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((uint64_t)(v6 + 15), a1 + 19, 8, (uint64_t *)a3);
  a1[27] = 0;
  a1[28] = 0;
  a1[29] = 0;
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a3 + 96);
  a1[29] = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  return a1;
}

uint64_t sub_1C6187E38(uint64_t a1, uint64_t a2)
{
  void **v4;
  unint64_t v5;
  char *v6;
  __int128 v8;
  uint64_t v9;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v4 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a2);
  *(_QWORD *)&v8 = a2;
  BYTE8(v8) = 0;
  LOBYTE(v9) = 0;
  v5 = *(_QWORD *)(a1 + 104);
  if (v5 >= *(_QWORD *)(a1 + 112))
  {
    v6 = sub_1C4D8DBBC(v4, (uint64_t)&v8);
  }
  else
  {
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(v5 + 16) = v9;
    v6 = (char *)(v5 + 24);
  }
  *(_QWORD *)(a1 + 104) = v6;
  return a1;
}

char *sub_1C6187ED4(char *this)
{
  llvm::SmallPtrSetImplBase *v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;

  v1 = (llvm::SmallPtrSetImplBase *)this;
  v2 = (void **)(this + 96);
  v3 = *((_QWORD *)this + 13);
  while (2)
  {
    v4 = *(_QWORD *)(v3 - 24);
    if (!*(_BYTE *)(v3 - 8))
    {
      *(_QWORD *)(v3 - 16) = *(_QWORD *)(v4 + 32);
      *(_BYTE *)(v3 - 8) = 1;
    }
    while (1)
    {
      v5 = *(uint64_t **)(v3 - 16);
      if (v5 == *(uint64_t **)(v4 + 40))
        break;
      *(_QWORD *)(v3 - 16) = v5 + 1;
      v6 = *v5;
      this = (char *)sub_1C4774094(v1, *v5);
      if (v7)
      {
        *(_QWORD *)&v10 = v6;
        BYTE8(v10) = 0;
        LOBYTE(v11) = 0;
        v9 = *((_QWORD *)v1 + 13);
        if (v9 >= *((_QWORD *)v1 + 14))
        {
          this = sub_1C4D8DBBC(v2, (uint64_t)&v10);
        }
        else
        {
          *(_OWORD *)v9 = v10;
          *(_QWORD *)(v9 + 16) = v11;
          this = (char *)(v9 + 24);
        }
        *((_QWORD *)v1 + 13) = this;
        return this;
      }
    }
    v8 = *((_QWORD *)v1 + 12);
    v3 = *((_QWORD *)v1 + 13) - 24;
    *((_QWORD *)v1 + 13) = v3;
    if (v8 != v3)
      continue;
    break;
  }
  return this;
}

uint64_t sub_1C6187FB8@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C4A06ED8((uint64_t)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C618803C(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * a1[4];
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

_QWORD *sub_1C618803C(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DFC02C((uint64_t)a1, v7);
  v9 = 0;
  sub_1C4A06ED8((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

void sub_1C61880F0()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C6188104(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8135E30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C618813C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8135E30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***sub_1C618815C(uint64_t a1, llvm::raw_ostream *a2))()
{
  return sub_1C6188164((uint64_t (***)())(a1 + 8), a2);
}

uint64_t (***sub_1C6188164(uint64_t (***result)(), llvm::raw_ostream *this))()
{
  uint64_t v2;
  uint64_t *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t (**v8)(void);
  _BYTE *v9;
  uint64_t (**v10[3])();
  uint64_t (***v11)();
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)*result + 4);
  if ((_DWORD)v2)
  {
    v4 = (uint64_t *)(*result)[1];
    v5 = 8 * v2;
    v6 = 1;
    while (1)
    {
      v7 = *v4;
      if ((v6 & 1) == 0)
      {
        v9 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v9 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 32);
        }
        else
        {
          *((_QWORD *)this + 4) = v9 + 1;
          *v9 = 32;
        }
      }
      llvm::GenericSSAContext<llvm::Function>::print(v7, v10);
      if (!v11)
        sub_1C485C2F0();
      ((void (*)(uint64_t (***)(), llvm::raw_ostream *))(*v11)[6])(v11, this);
      result = v11;
      if (v11 == v10)
        break;
      if (v11)
      {
        v8 = *v11 + 5;
LABEL_8:
        result = (uint64_t (***)())(*v8)();
      }
      v6 = 0;
      ++v4;
      v5 -= 8;
      if (!v5)
        return result;
    }
    v8 = v10[0] + 4;
    goto LABEL_8;
  }
  return result;
}

void sub_1C6188298()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C61882AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8135E78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C61882E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8135E78;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (***sub_1C6188304(uint64_t a1, llvm::raw_ostream *a2))()
{
  return sub_1C618830C((uint64_t *)(a1 + 8), a2);
}

uint64_t (***sub_1C618830C(uint64_t *a1, llvm::raw_ostream *a2))()
{
  uint64_t v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  uint64_t (**v8)();
  _BYTE *v9;
  uint64_t (***result)();
  uint64_t (**v11)(void);
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _BYTE *v19;
  uint64_t (**v20)(void);
  uint64_t (**v21)();
  uint64_t (**v22[2])();
  uint64_t (***v23)();
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  v5 = sub_1C4816AD8(a2, "depth=");
  v6 = llvm::raw_ostream::operator<<(v5, *(unsigned int *)(v4 + 80));
  v7 = sub_1C4816AD8(v6, ": entries(");
  v8 = (uint64_t (**)())a1[1];
  v21 = &off_1E8135E30;
  v22[0] = (uint64_t (**)())v4;
  v22[1] = v8;
  v23 = &v21;
  sub_1C6188164(v22, v7);
  v9 = (_BYTE *)*((_QWORD *)v7 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v7 + 3))
  {
    llvm::raw_ostream::write(v7, 41);
  }
  else
  {
    *((_QWORD *)v7 + 4) = v9 + 1;
    *v9 = 41;
  }
  result = v23;
  if (v23 == &v21)
  {
    v11 = v21 + 4;
  }
  else
  {
    if (!v23)
      goto LABEL_8;
    v11 = *v23 + 5;
  }
  result = (uint64_t (***)())(*v11)();
LABEL_8:
  v12 = *(uint64_t **)(v4 + 56);
  v13 = *(uint64_t **)(v4 + 64);
  if (v12 != v13)
  {
    while (1)
    {
      v14 = *v12;
      v15 = *(_QWORD *)(v4 + 8);
      v16 = *(unsigned int *)(v4 + 16);
      if ((_DWORD)v16)
      {
        v17 = 8 * v16;
        v18 = *(_QWORD **)(v4 + 8);
        while (*v18 != v14)
        {
          ++v18;
          v17 -= 8;
          if (!v17)
          {
            v18 = (_QWORD *)(v15 + 8 * v16);
            break;
          }
        }
      }
      else
      {
        v18 = *(_QWORD **)(v4 + 8);
      }
      if (v16 != ((uint64_t)v18 - v15) >> 3)
        goto LABEL_24;
      v19 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v19 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 32);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v19 + 1;
        *v19 = 32;
      }
      llvm::GenericSSAContext<llvm::Function>::print(v14, &v21);
      if (!v23)
        sub_1C485C2F0();
      ((void (*)(uint64_t (***)(), llvm::raw_ostream *))(*v23)[6])(v23, a2);
      result = v23;
      if (v23 == &v21)
        break;
      if (v23)
      {
        v20 = *v23 + 5;
LABEL_23:
        result = (uint64_t (***)())(*v20)();
      }
LABEL_24:
      if (++v12 == v13)
        return result;
    }
    v20 = v21 + 4;
    goto LABEL_23;
  }
  return result;
}

BOOL llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::findEdgesTo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *i;
  _QWORD *v7;
  unint64_t v8;

  v4 = *(_QWORD **)(a1 + 24);
  for (i = *(_QWORD **)(a1 + 32); v4 != i; ++v4)
  {
    v7 = (_QWORD *)*v4;
    if (*(_QWORD *)*v4 == a2)
    {
      v8 = *(unsigned int *)(a3 + 8);
      if (v8 >= *(unsigned int *)(a3 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v8 + 1, 8);
        v8 = *(unsigned int *)(a3 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a3 + 8 * v8) = v7;
      ++*(_DWORD *)(a3 + 8);
    }
  }
  return *(_DWORD *)(a3 + 8) != 0;
}

{
  return __ZNK4llvm6DGNodeINS_7DDGNodeENS_7DDGEdgeEE11findEdgesToERKS1_RNS_15SmallVectorImplIPS2_EE(a1, a2, a3);
}

uint64_t sub_1C61885C4(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int64_t v7;
  _QWORD *v9;

  v9 = 0;
  v4 = sub_1C614F7B0((uint64_t *)a1, a2, &v9);
  if ((_DWORD)v4)
  {
    *v9 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    v6 = *(char **)(a1 + 24);
    v5 = *(char **)(a1 + 32);
    if (v6 != v5)
    {
      while (*(_QWORD *)v6 != *a2)
      {
        v6 += 8;
        if (v6 == v5)
        {
          v6 = *(char **)(a1 + 32);
          break;
        }
      }
    }
    v7 = v5 - (v6 + 8);
    if (v5 != v6 + 8)
      memmove(v6, v6 + 8, v5 - (v6 + 8));
    *(_QWORD *)(a1 + 32) = &v6[v7];
  }
  return v4;
}

uint64_t llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::addNode(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = *(_QWORD **)a1;
    while (*v7 != a2)
    {
      ++v7;
      v6 -= 8;
      if (!v6)
        goto LABEL_5;
    }
    return 0;
  }
  else
  {
LABEL_5:
    if (v5 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5 + 1, 8);
      v4 = *(_QWORD **)a1;
      v5 = *(unsigned int *)(a1 + 8);
    }
    v4[v5] = a2;
    ++*(_DWORD *)(a1 + 8);
    return 1;
  }
}

{
  return __ZN4llvm13DirectedGraphINS_7DDGNodeENS_7DDGEdgeEE7addNodeERS1_(a1, a2);
}

BOOL llvm::DDGNode::collectInstructions(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void *__src;
  uint64_t v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(a1 + 56) - 1) > 1)
  {
    v10 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v10)
    {
      v11 = *(uint64_t **)(a1 + 64);
      v12 = 8 * v10;
      do
      {
        v13 = *v11;
        __src = v17;
        v16 = 0x800000000;
        llvm::DDGNode::collectInstructions(v13, a2, &__src);
        sub_1C6189598(a3, *(_QWORD *)a3 + 8 * a3[2], (uint64_t *)__src, (uint64_t *)__src + v16);
        if (__src != v17)
          free(__src);
        ++v11;
        v12 -= 8;
      }
      while (v12);
    }
  }
  else
  {
    v5 = *(unsigned int *)(a1 + 72);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD **)(a1 + 64);
      v7 = 8 * v5;
      do
      {
        v8 = *v6;
        if ((*(unsigned int (**)(_QWORD, _QWORD))a2)(*(_QWORD *)(a2 + 8), *v6))
        {
          v9 = a3[2];
          if (v9 >= a3[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a3, (uint64_t)(a3 + 4), v9 + 1, 8);
            v9 = a3[2];
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v9) = v8;
          ++a3[2];
        }
        ++v6;
        v7 -= 8;
      }
      while (v7);
    }
  }
  return a3[2] != 0;
}

void sub_1C6188A30(unsigned int *a1)
{
  llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::computeInstructionOrdinals((uint64_t)a1);
  llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::createFineGrainedNodes((uint64_t)a1);
  llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::createDefUseEdges((uint64_t)a1);
  llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::createMemoryDependencyEdges(a1);
  llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::simplify(a1);
  llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::createAndConnectRootNode(a1);
  llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::createPiBlocks(a1);
  llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::sortNodesTopologically(a1);
}

uint64_t llvm::DataDependenceGraph::addNode(llvm::DataDependenceGraph *this, llvm::DDGNode *a2)
{
  uint64_t v4;
  int v5;
  llvm::DDGNode *v6;
  uint64_t v8;
  uint64_t *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;
  llvm::DDGNode *v15;

  v4 = llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::addNode((uint64_t)this + 88, (uint64_t)a2);
  if ((_DWORD)v4)
  {
    v5 = *((_DWORD *)a2 + 14);
    if (v5 == 3)
      v6 = a2;
    else
      v6 = 0;
    if (v5 == 4)
    {
      *((_QWORD *)this + 10) = a2;
    }
    else if (v5 == 3)
    {
      v8 = *((unsigned int *)a2 + 18);
      if ((_DWORD)v8)
      {
        v9 = (uint64_t *)*((_QWORD *)a2 + 8);
        v10 = (char *)this + 184;
        v11 = 8 * v8;
        do
        {
          v12 = *v9++;
          v14 = v12;
          v15 = v6;
          sub_1C6189940((uint64_t)v13, (uint64_t)v10, &v14, &v15);
          v11 -= 8;
        }
        while (v11);
      }
    }
  }
  return v4;
}

uint64_t llvm::DataDependenceGraph::getPiBlock(llvm::DataDependenceGraph *this, const llvm::DDGNode *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  const llvm::DDGNode *v11;

  v4 = (uint64_t *)((char *)this + 184);
  v10 = 0;
  v11 = a2;
  if (sub_1C61252B8((uint64_t *)this + 23, &v11, &v10))
  {
    v5 = v10;
    v6 = *((_QWORD *)this + 23);
    v7 = *((unsigned int *)this + 50);
  }
  else
  {
    v6 = *((_QWORD *)this + 23);
    v7 = *((unsigned int *)this + 50);
    v5 = v6 + 16 * v7;
  }
  if (v5 == v6 + 16 * v7)
    return 0;
  v10 = 0;
  v11 = a2;
  if (sub_1C61252B8(v4, &v11, &v10))
    v9 = v10;
  else
    v9 = *((_QWORD *)this + 23) + 16 * *((unsigned int *)this + 50);
  return *(_QWORD *)(v9 + 8);
}

llvm::raw_ostream *llvm::operator<<(llvm::raw_ostream *a1, llvm::DataDependenceGraph *this)
{
  uint64_t v3;
  const llvm::DDGNode **v5;
  uint64_t v6;
  const llvm::DDGNode *v7;
  llvm::raw_ostream *v8;

  v3 = *((unsigned int *)this + 24);
  if ((_DWORD)v3)
  {
    v5 = (const llvm::DDGNode **)*((_QWORD *)this + 11);
    v6 = 8 * v3;
    do
    {
      v7 = *v5;
      if (!llvm::DataDependenceGraph::getPiBlock(this, *v5))
      {
        v8 = llvm::operator<<(a1, (unint64_t)v7);
        sub_1C4816AD8(v8, "\n");
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  sub_1C4816AD8(a1, "\n");
  return a1;
}

uint64_t llvm::DDGBuilder::mergeNodes(llvm::DDGBuilder *this, llvm::DDGNode *a2, uint64_t **a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v16;

  v5 = *((_QWORD *)a2 + 8);
  v6 = (_QWORD *)((char *)a2 + 8);
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 5) - 8);
  v8 = *((unsigned int *)a2 + 18);
  v9 = *((unsigned int *)a3 + 18);
  if (v9 == 1 && v8 == 0)
    v11 = 1;
  else
    v11 = 2;
  *((_DWORD *)a2 + 14) = v11;
  sub_1C6176EC8((unsigned int *)a2 + 16, v5 + 8 * v8, a3[8], &a3[8][v9]);
  v12 = a3[4];
  v13 = a3[5];
  while (v12 != v13)
  {
    v14 = *v12++;
    v16 = v14;
    sub_1C4DFC308(v6, &v16);
  }
  v16 = v7;
  sub_1C61885C4((uint64_t)v6, &v16);
  (*(void (**)(llvm::DDGBuilder *, uint64_t))(*(_QWORD *)this + 72))(this, v7);
  llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::removeNode((unsigned int *)(*((_QWORD *)this + 1) + 88), (uint64_t)a3);
  return (*(uint64_t (**)(llvm::DDGBuilder *, uint64_t **))(*(_QWORD *)this + 80))(this, a3);
}

uint64_t llvm::DDGBuilder::shouldSimplify(llvm::DDGBuilder *this)
{
  return byte_1ED7F1288;
}

uint64_t llvm::DDGBuilder::shouldCreatePiBlocks(llvm::DDGBuilder *this)
{
  return byte_1ED7F1348;
}

uint64_t llvm::DDGAnalysis::run@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int8x16_t v8;
  uint64_t v9;
  int8x16_t v10;
  uint64_t v11;

  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 32) + 56);
  v9 = *a2;
  v8 = *(int8x16_t *)(a2 + 3);
  v10 = vextq_s8(v8, v8, 8uLL);
  v11 = v5;
  v6 = operator new();
  result = llvm::DataDependenceGraph::DataDependenceGraph(v6, a1, (llvm::LoopInfo *)v8.i64[0], (char *)&v9);
  *a3 = result;
  return result;
}

_QWORD *llvm::DDGAnalysisPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  llvm::raw_ostream *v10;
  size_t v11;
  char *Name;
  size_t v13;
  void *v14;
  llvm::raw_ostream *v15;
  uint64_t ResultImpl;

  v10 = sub_1C4816AD8(*a1, "'DDG' for loop '");
  Name = llvm::Value::getName(**(llvm::Value ***)(a2 + 32));
  v13 = v11;
  v14 = (void *)*((_QWORD *)v10 + 4);
  if (v11 <= *((_QWORD *)v10 + 3) - (_QWORD)v14)
  {
    if (v11)
    {
      memcpy(v14, Name, v11);
      *((_QWORD *)v10 + 4) += v13;
    }
  }
  else
  {
    llvm::raw_ostream::write(v10, Name, v11);
  }
  sub_1C4816AD8(v10, "':\n");
  v15 = *a1;
  ResultImpl = llvm::AnalysisManager<llvm::Loop,llvm::LoopStandardAnalysisResults &>::getResultImpl(a3, &llvm::DDGAnalysis::Key, a2, a4);
  llvm::operator<<(v15, *(llvm::DataDependenceGraph **)(ResultImpl + 8));
  return llvm::InstCountPass::run(a5);
}

void sub_1C6188F04(_QWORD *a1)
{
  sub_1C6189218(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6188F28(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_DWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_DWORD *)(v2 + 56) = 4;
  *(_QWORD *)v2 = &off_1E8136070;
  llvm::DataDependenceGraph::addNode(*(llvm::DataDependenceGraph **)(a1 + 8), (llvm::DDGNode *)v2);
  return v2;
}

uint64_t sub_1C6188F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_DWORD *)(v4 + 56) = 1;
  *(_QWORD *)(v4 + 80) = a2;
  *(_QWORD *)v4 = &off_1E8135EC0;
  *(_QWORD *)(v4 + 64) = v4 + 80;
  *(_QWORD *)(v4 + 72) = 0x200000001;
  llvm::DataDependenceGraph::addNode(*(llvm::DataDependenceGraph **)(a1 + 8), (llvm::DDGNode *)v4);
  return v4;
}

llvm::DDGNode *sub_1C6189024(uint64_t a1, uint64_t a2)
{
  llvm::DDGNode *v4;

  v4 = (llvm::DDGNode *)operator new();
  llvm::PiBlockDDGNode::PiBlockDDGNode((uint64_t)v4, a2);
  llvm::DataDependenceGraph::addNode(*(llvm::DataDependenceGraph **)(a1 + 8), v4);
  return v4;
}

uint64_t sub_1C6189080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;

  v5 = operator new();
  *(_QWORD *)v5 = a3;
  *(_DWORD *)(v5 + 8) = 1;
  v7 = v5;
  sub_1C4DFC308((_QWORD *)(a2 + 8), &v7);
  return v5;
}

uint64_t sub_1C61890EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;

  v5 = operator new();
  *(_QWORD *)v5 = a3;
  *(_DWORD *)(v5 + 8) = 2;
  v7 = v5;
  sub_1C4DFC308((_QWORD *)(a2 + 8), &v7);
  return v5;
}

uint64_t sub_1C6189158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;

  v5 = operator new();
  *(_QWORD *)v5 = a3;
  *(_DWORD *)(v5 + 8) = 3;
  v7 = v5;
  sub_1C4DFC308((_QWORD *)(a2 + 8), &v7);
  return v5;
}

uint64_t sub_1C61891C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (*(_DWORD *)(a2 + 56) == 3)
    v2 = a2;
  else
    v2 = 0;
  return v2 + 64;
}

void sub_1C61891D8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C61891F0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
}

uint64_t sub_1C6189208()
{
  return 1;
}

uint64_t sub_1C6189210()
{
  return 1;
}

_QWORD *sub_1C6189218(_QWORD *a1)
{
  *a1 = &unk_1E8135FC8;
  MEMORY[0x1CAA32FB4](a1[10], 8);
  MEMORY[0x1CAA32FB4](a1[7], 8);
  MEMORY[0x1CAA32FB4](a1[4], 8);
  return a1;
}

uint64_t sub_1C618926C(uint64_t a1)
{
  sub_1C6176BF8((_QWORD *)(a1 + 8));
  return a1;
}

void sub_1C6189294(uint64_t a1)
{
  sub_1C6176BF8((_QWORD *)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C61892CC(char **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED7F12C8, 0, 0);
  byte_1ED7F1348 = 0;
  qword_1ED7F1350 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7F1358 = 0;
  qword_1ED7F12C8 = (uint64_t)&unk_1E819E898;
  qword_1ED7F1360 = (uint64_t)&off_1E819E9A0;
  qword_1ED7F1368 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7F1380 = (uint64_t)&qword_1ED7F1368;
  sub_1C6189380(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F12C8);
}

__n128 sub_1C6189380(char **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  char *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7F12C8, "ddg-pi-blocks", 0xDuLL);
  v8 = *a1;
  byte_1ED7F1348 = **a1;
  byte_1ED7F1359 = 1;
  byte_1ED7F1358 = *v8;
  word_1ED7F12D2 = word_1ED7F12D2 & 0xFF9F | (32 * (*a2 & 3));
  word_1ED7F12D2 = word_1ED7F12D2 & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED7F12E8 = (__int128)*a4;
  return result;
}

uint64_t sub_1C6189414(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C614F7B0((uint64_t *)a2, a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C618949C(a2, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

_QWORD *sub_1C618949C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C49F7104(a1, v6);
  v8 = 0;
  sub_1C614F7B0((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

unsigned int *sub_1C6189548(unsigned int *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 8 * v1;
        do
        {
          *v2++ = -4096;
          v3 -= 8;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C4DFE514(result);
    }
  }
  return result;
}

_BYTE *sub_1C6189598(unsigned int *a1, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = a1[2];
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    sub_1C4DFE610(a1, __src, a4);
    return (_BYTE *)(*(_QWORD *)a1 + 8 * v8);
  }
  else
  {
    v10 = (char *)a4 - (char *)__src;
    v11 = a4 - __src;
    if (v9 + v11 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v9 + v11, 8);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v12 = (_BYTE *)(v7 + 8 * v8);
    v13 = (_BYTE *)(v7 + 8 * v9);
    v14 = (v13 - v12) >> 3;
    if (v14 >= v11)
    {
      sub_1C6177054(a1, &v13[-8 * v11], (char *)(v7 + 8 * v9));
      if (&v13[-8 * v11] != v12)
        memmove(&v12[8 * v11], v12, &v13[-8 * v11] - v12);
      if (v5 != a4)
        memmove(v12, v5, (char *)a4 - (char *)v5);
    }
    else
    {
      v15 = v9 + (v10 >> 3);
      a1[2] = v15;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - v12);
        v16 = v12;
        do
        {
          v17 = *v5++;
          *v16++ = v17;
          --v14;
        }
        while (v14);
      }
      if (v5 != a4)
        memcpy(v13, v5, (char *)a4 - (char *)v5);
    }
  }
  return v12;
}

_OWORD *sub_1C61896F4(int *a1, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _OWORD *v9;
  __int128 v10;
  _OWORD *result;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = a2;
  v3 = *a1 + 1;
  *a1 = v3;
  *((_DWORD *)sub_1C4DFE97C((uint64_t)(a1 + 2), &v14) + 2) = v3;
  v4 = (_QWORD *)*((_QWORD *)a1 + 5);
  if ((unint64_t)v4 >= *((_QWORD *)a1 + 6))
  {
    v5 = sub_1C4DFEA3C((void **)a1 + 4, &v14);
  }
  else
  {
    *v4 = v14;
    v5 = v4 + 1;
  }
  *((_QWORD *)a1 + 5) = v5;
  v6 = *(_QWORD *)(v14 + 40);
  if (v6 == v14 + 40)
  {
    v7 = 0;
  }
  else
  {
    if (v6)
      v7 = v6 - 24;
    else
      v7 = 0;
    if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB)
      v7 = 0;
  }
  v8 = *a1;
  *(_QWORD *)&v12 = v14;
  *((_QWORD *)&v12 + 1) = v7;
  *(_QWORD *)&v13 = 0;
  DWORD2(v13) = v8;
  v9 = (_OWORD *)*((_QWORD *)a1 + 11);
  if ((unint64_t)v9 >= *((_QWORD *)a1 + 12))
  {
    result = sub_1C4DBA810((void **)a1 + 10, &v12);
  }
  else
  {
    v10 = v13;
    *v9 = v12;
    v9[1] = v10;
    result = v9 + 2;
  }
  *((_QWORD *)a1 + 11) = result;
  return result;
}

uint64_t sub_1C61897D4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t result;
  llvm::Instruction *v8;
  unsigned int v9;
  uint64_t Successor;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (uint64_t *)(a1 + 8);
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 88);
    v4 = *(_QWORD *)(v3 - 32);
    v5 = *(_QWORD *)(v4 + 40);
    if (v5 == v4 + 40 || (v5 ? (v6 = (unsigned __int8 *)(v5 - 24)) : (v6 = 0), v6[16] - 29 > 0xA))
      result = 0;
    else
      result = llvm::Instruction::getNumSuccessors((llvm::Instruction *)v6);
    if (*(_DWORD *)(v3 - 16) == (_DWORD)result)
      break;
    v8 = *(llvm::Instruction **)(v3 - 24);
    v9 = *(_DWORD *)(v3 - 16);
    *(_DWORD *)(v3 - 16) = v9 + 1;
    Successor = llvm::Instruction::getSuccessor(v8, v9);
    v13 = Successor;
    v14 = 0;
    if (!sub_1C4DD8A9C(v2, &v13, &v14) || v14 == *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
    {
      sub_1C61896F4((int *)a1, Successor);
    }
    else
    {
      v11 = *(_DWORD *)(v14 + 8);
      v12 = *(_QWORD *)(a1 + 88);
      if (*(_DWORD *)(v12 - 8) > v11)
        *(_DWORD *)(v12 - 8) = v11;
    }
  }
  return result;
}

unsigned int *sub_1C61898C0(unsigned int *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = a3;
  v7 = result;
  v8 = a3 - a5;
  v9 = result[2];
  v10 = v9 + ((a3 - a5) >> 3);
  if (v10 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v10, 8);
    v9 = v7[2];
  }
  if (v6 != a5)
  {
    v11 = (_QWORD *)(*(_QWORD *)v7 + 8 * v9);
    do
    {
      v12 = *(_QWORD *)(v6 - 8);
      v6 -= 8;
      *v11++ = v12;
    }
    while (v6 != a5);
  }
  v7[2] = v9 + (v8 >> 3);
  return result;
}

uint64_t sub_1C6189940(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C61252B8((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C61899D4(a2, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *sub_1C61899D4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4DFEC00(a1, v6);
  v8 = 0;
  sub_1C61252B8((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6189A80(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C61252B8((uint64_t *)v5, a2, &v10);
      v9 = v10;
      *v10 = *a2;
      v9[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

void sub_1C6189B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  const llvm::DDGNode **v4;
  uint64_t v5;
  const llvm::DDGNode *v6;

  v1 = **(_QWORD **)(a1 + 8);
  v2 = *(unsigned int *)(v1 + 96);
  if ((_DWORD)v2)
  {
    v4 = *(const llvm::DDGNode ***)(v1 + 88);
    v5 = 8 * v2;
    do
    {
      v6 = *v4;
      if ((!*(_BYTE *)(a1 + 17) || *((_DWORD *)v6 + 14) != 4)
        && !llvm::DataDependenceGraph::getPiBlock(**(llvm::DataDependenceGraph ***)(a1 + 8), *v4))
      {
        sub_1C4E00020(a1, (unint64_t)v6);
      }
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
}

uint64_t sub_1C6189BBC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

__n128 sub_1C6189BC4(const char **a1, _WORD *a2, __n128 *a3)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7F1448, "dot-ddg-filename-prefix", 0x17uLL);
  sub_1C49C7D74(a1, (uint64_t)&qword_1ED7F1448);
  word_1ED7F1452 = (32 * (*a2 & 3)) | word_1ED7F1452 & 0xFF9F;
  result = *a3;
  xmmword_1ED7F1468 = (__int128)*a3;
  return result;
}

BOOL llvm::DependenceGraphInfo<llvm::DDGNode>::getDependencies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::Instruction **v7;
  llvm::Instruction **v8;
  uint64_t v9;
  llvm::Instruction *v10;
  llvm::Instruction **v11;
  uint64_t v12;
  uint64_t (*v13)(int, llvm::Instruction *);
  int v14;
  uint64_t (*v16)(int, llvm::Instruction *);
  char *v17;
  char v18;
  void *v19;
  uint64_t v20;
  _BYTE v21[64];
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x800000000;
  v19 = v21;
  v20 = 0x800000000;
  v16 = sub_1C6189DC0;
  v17 = &v18;
  llvm::DDGNode::collectInstructions(a2, (uint64_t)&v16, (unsigned int *)&v22);
  v16 = sub_1C6189DC0;
  v17 = &v18;
  llvm::DDGNode::collectInstructions(a3, (uint64_t)&v16, (unsigned int *)&v19);
  if ((_DWORD)v23)
  {
    v7 = (llvm::Instruction **)v22;
    v8 = (llvm::Instruction **)((char *)v22 + 8 * v23);
    v9 = a1 + 32;
    do
    {
      if ((_DWORD)v20)
      {
        v10 = *v7;
        v11 = (llvm::Instruction **)v19;
        v12 = 8 * v20;
        do
        {
          llvm::DependenceInfo::depends(v9, v10, *v11, 1, (uint64_t *)&v16);
          if (v16)
          {
            sub_1C4E0081C(a4, (char *)&v16);
            v13 = v16;
            v16 = 0;
            if (v13)
              (*(void (**)(uint64_t (*)(int, llvm::Instruction *)))(*(_QWORD *)v13 + 8))(v13);
          }
          ++v11;
          v12 -= 8;
        }
        while (v12);
      }
      ++v7;
    }
    while (v7 != v8);
  }
  v14 = *(_DWORD *)(a4 + 8);
  if (v19 != v21)
    free(v19);
  if (v22 != v24)
    free(v22);
  return v14 != 0;
}

uint64_t sub_1C6189DC0(int a1, llvm::Instruction *this)
{
  if ((llvm::Instruction::mayReadFromMemory(this) & 1) != 0)
    return 1;
  else
    return llvm::Instruction::mayWriteToMemory(this);
}

void sub_1C6189DFC(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;

  v13 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 8, &v13);
  v4 = *(uint64_t **)a1;
  v5 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v5)
  {
    v6 = 8 * v5;
    v7 = 8 * v5;
    v8 = v3;
    do
    {
      v9 = *v4;
      *v4++ = 0;
      *v8++ = v9;
      v7 -= 8;
    }
    while (v7);
    v10 = *(_QWORD *)a1 - 8;
    do
    {
      v11 = *(_QWORD *)(v10 + v6);
      *(_QWORD *)(v10 + v6) = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v6 -= 8;
    }
    while (v6);
    v4 = *(uint64_t **)a1;
  }
  v12 = v13;
  if (v4 != (uint64_t *)(a1 + 16))
    free(v4);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v12;
}

uint64_t sub_1C6189EB0(uint64_t result, llvm::Dependence **a2, llvm::raw_ostream *a3, llvm::raw_ostream *a4, uint64_t a5)
{
  llvm::Dependence **v8;
  const void *v9;
  unint64_t v10;
  void *v11;
  llvm::raw_ostream *v12;

  v12 = a3;
  if ((llvm::Dependence **)result != a2)
  {
    v8 = (llvm::Dependence **)result;
    while (1)
    {
      result = sub_1C4E008A0(&v12, v8++);
      if (v8 == a2)
        break;
      v9 = *(const void **)a5;
      v10 = *(_QWORD *)(a5 + 8);
      v11 = (void *)*((_QWORD *)a4 + 4);
      if (v10 <= *((_QWORD *)a4 + 3) - (_QWORD)v11)
      {
        if (v10)
        {
          memcpy(v11, v9, *(_QWORD *)(a5 + 8));
          *((_QWORD *)a4 + 4) += v10;
        }
      }
      else
      {
        llvm::raw_ostream::write(a4, (const char *)v9, *(_QWORD *)(a5 + 8));
      }
    }
  }
  return result;
}

_QWORD *sub_1C6189F54(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  _QWORD *result;

  v3 = sub_1C4E01578(a1, a2, 1);
  result = (_QWORD *)(*(_QWORD *)a1 + 80 * *(unsigned int *)(a1 + 8));
  *result = result + 2;
  result[1] = 0x800000000;
  if (*(_DWORD *)(v3 + 8))
    result = (_QWORD *)sub_1C614D378((uint64_t)result, v3);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL llvm::ConstraintSystem::mayHaveSolutionImpl(llvm::ConstraintSystem *this)
{
  unsigned int v2;
  _QWORD **v3;
  _BOOL8 result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  while (1)
  {
    v2 = *((_DWORD *)this + 2);
    if (!v2)
      return 1;
    v3 = *(_QWORD ***)this;
    if (*(_DWORD *)(*(_QWORD *)this + 8) < 2u)
      break;
    if (!llvm::ConstraintSystem::eliminateUsingFM(this))
      return 1;
  }
  v5 = 80 * v2 - 80;
  do
  {
    v6 = *v3;
    v3 += 10;
    result = *v6 >= 0;
    if ((*v6 & 0x8000000000000000) != 0)
      break;
    v7 = v5;
    v5 -= 80;
  }
  while (v7);
  return result;
}

BOOL llvm::ConstraintSystem::isConditionImplied(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v8;
  void *v10[2];
  _DWORD v11[82];
  void *v12[2];
  _QWORD v13[9];

  v13[8] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)a2;
  v5 = *(unsigned int *)(a2 + 8);
  v6 = 1;
  do
  {
    if (v5 == v6)
      return *v4 >= 0;
  }
  while (!v4[v6++]);
  v12[0] = v13;
  v12[1] = (void *)0x800000000;
  if ((_DWORD)v5)
    llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)v12, a2);
  sub_1C618A18C((uint64_t)v12, v10);
  sub_1C614D378(a2, (uint64_t)v10);
  if (v10[0] != v11)
    free(v10[0]);
  if (v12[0] != v13)
    free(v12[0]);
  v10[0] = v11;
  v10[1] = (void *)0x400000000;
  if (*(_DWORD *)(a1 + 8))
    sub_1C4E013C0((uint64_t)v10, a1);
  v11[80] = *(_DWORD *)(a1 + 336);
  sub_1C4E0125C((uint64_t)v10, *(uint64_t **)a2, *(unsigned int *)(a2 + 8));
  v8 = !llvm::ConstraintSystem::mayHaveSolutionImpl((llvm::ConstraintSystem *)v10);
  sub_1C618A4D0((char **)v10);
  return v8;
}

uint64_t sub_1C618A18C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD **)result;
  ++**(_QWORD **)result;
  v3 = *(unsigned int *)(result + 8);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    do
    {
      *v2 = -*v2;
      ++v2;
      v4 -= 8;
    }
    while (v4);
    *a2 = a2 + 2;
    a2[1] = 0x800000000;
    return sub_1C614D378((uint64_t)a2, result);
  }
  else
  {
    *a2 = a2 + 2;
    a2[1] = 0x800000000;
  }
  return result;
}

void sub_1C618A1F4(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 80, &v5);
  sub_1C618A260(a1, v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C618A260(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 80 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x800000000;
      if (*(_DWORD *)(v5 + 8))
        sub_1C614D378((uint64_t)a2, v5);
      v5 += 80;
      a2 += 10;
      v6 -= 80;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 80 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 80);
        if ((void *)(v8 + v9 - 64) != v10)
          free(v10);
        v9 -= 80;
      }
      while (v9);
    }
  }
}

uint64_t sub_1C618A318(uint64_t a1, _BYTE **a2, _BYTE **a3)
{
  unsigned int v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  unsigned int v8;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return sub_1C618A394(a1, a2, a3);
  v5 = *(_QWORD *)a1 + 80 * v4;
  v6 = *a2;
  v7 = *a3;
  *(_QWORD *)v5 = v5 + 16;
  *(_QWORD *)(v5 + 8) = 0x800000000;
  sub_1C618A450((unsigned int *)v5, v6, v7);
  v8 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v8;
  return *(_QWORD *)a1 + 80 * v8 - 80;
}

uint64_t sub_1C618A394(uint64_t a1, _BYTE **a2, _BYTE **a3)
{
  _QWORD *v6;
  unsigned int *v7;
  _BYTE *v8;
  _BYTE *v9;
  int v10;
  unsigned int v11;
  unint64_t v13;

  v13 = 0;
  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 80, &v13);
  v7 = (unsigned int *)&v6[10 * *(unsigned int *)(a1 + 8)];
  v8 = *a2;
  v9 = *a3;
  *(_QWORD *)v7 = v7 + 4;
  *((_QWORD *)v7 + 1) = 0x800000000;
  sub_1C618A450(v7, v8, v9);
  sub_1C618A260(a1, v6);
  v10 = v13;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v6;
  v11 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 12) = v10;
  return (uint64_t)&v6[10 * v11 - 10];
}

unsigned int *sub_1C618A450(unsigned int *result, _BYTE *__src, _BYTE *a3)
{
  _DWORD *v5;
  size_t v6;
  uint64_t v7;
  unint64_t v8;

  v5 = result;
  v6 = a3 - __src;
  v7 = result[2];
  v8 = v7 + ((a3 - __src) >> 3);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 8);
    LODWORD(v7) = v5[2];
  }
  if (__src != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v5 + 8 * v7), __src, v6);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 3);
  return result;
}

char **sub_1C618A4D0(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 80 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 80];
      if (&v2[v4 - 64] != v5)
        free(v5);
      v4 -= 80;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

double sub_1C618A544(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 80 * v5;
    do
    {
      v7 = *(char **)&v4[v6 - 80];
      if (&v4[v6 - 64] != v7)
        free(v7);
      v6 -= 80;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

void sub_1C618A5D0(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  int v5;
  unint64_t v6;

  v6 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 24, &v6);
  sub_1C4E018F8((__int128 **)a1, (uint64_t)v3);
  v4 = v6;
  if (*(_QWORD *)a1 != a1 + 16)
  {
    v5 = v6;
    free(*(void **)a1);
    v4 = v5;
  }
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void llvm::collectParametricTerms(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  void *v14;
  uint64_t v15;
  _BYTE v16[32];
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  _BYTE v20[64];
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  int v24;
  _QWORD v25[10];

  v25[8] = *MEMORY[0x1E0C80C00];
  v13[1] = &v14;
  v14 = v16;
  v15 = 0x400000000;
  v13[0] = a1;
  v17 = v13;
  v18 = v20;
  v19 = 0x800000000;
  v21 = v25;
  v22 = v25;
  v23 = 8;
  v24 = 0;
  sub_1C4E032F4((uint64_t)&v17, a2);
  if ((_DWORD)v19)
  {
    v5 = *((_QWORD *)v18 + v19 - 1);
    LODWORD(v19) = v19 - 1;
    __asm { BR              X10 }
  }
  if (v22 != v21)
    free(v22);
  if (v18 != v20)
    free(v18);
  if ((_DWORD)v15)
  {
    v6 = (uint64_t *)v14;
    v7 = (uint64_t *)((char *)v14 + 8 * v15);
    do
    {
      v8 = *v6;
      v12[0] = a3;
      v17 = v12;
      v18 = v20;
      v19 = 0x800000000;
      v21 = v25;
      v22 = v25;
      v23 = 8;
      v24 = 0;
      sub_1C4E034C0((uint64_t)&v17, v8);
      if ((_DWORD)v19)
      {
        v9 = *((_QWORD *)v18 + v19 - 1);
        LODWORD(v19) = v19 - 1;
        __asm { BR              X10 }
      }
      if (v22 != v21)
        free(v22);
      if (v18 != v20)
        free(v18);
      ++v6;
    }
    while (v6 != v7);
  }
  v12[0] = a3;
  v12[1] = a1;
  v17 = v12;
  v18 = v20;
  v19 = 0x800000000;
  v21 = v25;
  v22 = v25;
  v23 = 8;
  v24 = 0;
  sub_1C4E03784((uint64_t)&v17, a2);
  if ((_DWORD)v19)
  {
    v10 = *((_QWORD *)v18 + v19 - 1);
    LODWORD(v19) = v19 - 1;
    __asm { BR              X10 }
  }
  if (v22 != v21)
    free(v22);
  if (v18 != v20)
    free(v18);
  if (v14 != v16)
    free(v14);
}

void llvm::delinearize(llvm::SCEVDivision *a1, uint64_t a2, uint64_t a3, uint64_t a4, const llvm::SCEV ***a5)
{
  uint64_t v10;
  const llvm::SCEV **v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v12 = v14;
  v13 = 0x400000000;
  llvm::collectParametricTerms((uint64_t)a1, a2, (uint64_t)&v12);
  if ((_DWORD)v13)
  {
    llvm::findArrayDimensions(a1, (uint64_t)&v12, a4, a5);
    if (*(_DWORD *)(a4 + 8))
      llvm::computeAccessFunctions((uint64_t)a1, a2, a3, a4, v10, v11);
  }
  if (v12 != v14)
    free(v12);
}

_QWORD *llvm::DelinearizationPrinterPass::DelinearizationPrinterPass(_QWORD *this, llvm::raw_ostream *a2)
{
  *this = a2;
  return this;
}

_QWORD *llvm::DelinearizationPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t ***a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::raw_ostream *v7;
  uint64_t *v8;
  uint64_t ResultImpl;

  v7 = *a1;
  v8 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::LoopAnalysis::Key, (uint64_t)a2) + 8);
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::ScalarEvolutionAnalysis::Key, (uint64_t)a2);
  sub_1C4E02670(v7, a2, v8, (llvm::ScalarEvolution *)(ResultImpl + 8));
  return llvm::InstCountPass::run(a4);
}

unint64_t sub_1C618AB20(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  _BYTE *v5;
  _BYTE *v6;
  unint64_t AddRecExpr;
  void *v9[2];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE **)a2;
  v6 = (_BYTE *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8));
  v9[0] = v10;
  v9[1] = (void *)0x400000000;
  sub_1C618A450((unsigned int *)v9, v5, v6);
  AddRecExpr = llvm::ScalarEvolution::getAddRecExpr(a1, (uint64_t **)v9, a3);
  if (v9[0] != v10)
    free(v9[0]);
  return AddRecExpr;
}

uint64_t sub_1C618ABDC(_QWORD *a1, _QWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

void llvm::initializeDemandedBitsWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82D120);
  if (v2 != -1)
  {
    v5[0] = sub_1C4E04BE8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82D120, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::DemandedBitsWrapperPass *llvm::DemandedBitsWrapperPass::DemandedBitsWrapperPass(llvm::DemandedBitsWrapperPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::DemandedBitsWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E8136178;
  *((_BYTE *)this + 32) = 0;
  *((_BYTE *)this + 536) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82D120);
  if (v2 != -1)
  {
    v6[0] = sub_1C4E04BE8;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82D120, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

llvm::AnalysisUsage *llvm::DemandedBitsWrapperPass::getAnalysisUsage(llvm::DemandedBitsWrapperPass *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage *result;

  llvm::AnalysisUsage::setPreservesCFG(a2);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::AssumptionCacheTracker::ID);
  result = llvm::AnalysisUsage::addRequiredID(a2, llvm::DominatorTreeWrapperPass::ID);
  *((_BYTE *)a2 + 160) = 1;
  return result;
}

void llvm::DemandedBitsWrapperPass::print(llvm::DemandedBitsWrapperPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  llvm::DemandedBits::print((llvm::DemandedBitsWrapperPass *)((char *)this + 32), a2);
}

uint64_t llvm::DemandedBits::determineLiveOperandBitsSub@<X0>(llvm::DemandedBits *this@<X0>, const llvm::APInt *a2@<X2>, const llvm::KnownBits *a3@<X3>, llvm::APInt *a4@<X1>, uint64_t a5@<X8>)
{
  int v8;
  const llvm::APInt *v10;
  unsigned int v11;
  unsigned int v12;
  const llvm::KnownBits *v14;
  llvm::APInt *v15;
  llvm::APInt *v16;
  const llvm::APInt *v17;
  const llvm::APInt *v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned int v26;

  v8 = (int)this;
  v24 = 1;
  v23 = 0;
  v26 = 1;
  v25 = 0;
  v10 = (const llvm::KnownBits *)((char *)a3 + 16);
  v11 = *((_DWORD *)a3 + 6);
  if (v11 > 0x40)
  {
    v21 = a5;
    v19 = v8;
    v15 = a4;
    v17 = a2;
    v14 = a3;
    llvm::APInt::assignSlowCase((const llvm::APInt *)&v23, v10);
    a3 = v14;
    a4 = v15;
    a5 = v21;
    v8 = v19;
    a2 = v17;
    if (v26 > 0x40)
      goto LABEL_7;
  }
  else
  {
    v23 = *(_QWORD *)v10;
    v24 = v11;
  }
  v12 = *((_DWORD *)a3 + 2);
  if (v12 > 0x40)
  {
LABEL_7:
    v16 = a4;
    v18 = a2;
    v20 = v8;
    v22 = a5;
    llvm::APInt::assignSlowCase((const llvm::APInt *)&v25, a3);
    a5 = v22;
    v8 = v20;
    a4 = v16;
    a2 = v18;
    goto LABEL_5;
  }
  v25 = *(_QWORD *)a3;
  v26 = v12;
LABEL_5:
  sub_1C4E07DDC(a5, v8, a4, (uint64_t)a2, (uint64_t)&v23, 0, 1u);
  return sub_1C48C0CF0((uint64_t)&v23);
}

uint64_t llvm::DemandedBitsWrapperPass::runOnFunction(llvm::DemandedBitsWrapperPass *this, llvm::Function *a2)
{
  char **v4;
  char *v5;
  llvm::AssumptionCacheTracker *v6;
  uint64_t AssumptionCache;
  char **v8;
  char *v9;
  uint64_t v10;

  v4 = (char **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::AssumptionCacheTracker::ID);
  v6 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::AssumptionCacheTracker::ID);
  AssumptionCache = llvm::AssumptionCacheTracker::getAssumptionCache(v6, a2);
  v8 = (char **)**((_QWORD **)this + 1);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != llvm::DominatorTreeWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), llvm::DominatorTreeWrapperPass::ID);
  sub_1C618B020((_QWORD *)this + 4, (uint64_t)a2, AssumptionCache, v10 + 32);
  return 0;
}

_QWORD *llvm::DemandedBitsWrapperPass::releaseMemory(_QWORD *this)
{
  _QWORD *v1;

  if (*((_BYTE *)this + 536))
  {
    v1 = this;
    this = sub_1C4E08C94(this + 4);
    *((_BYTE *)v1 + 536) = 0;
  }
  return this;
}

_QWORD *llvm::DemandedBitsPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DemandedBitsAnalysis::Key, a2);
  llvm::DemandedBits::print((llvm::DemandedBits *)(ResultImpl + 8), *a1);
  return llvm::InstCountPass::run(a4);
}

void sub_1C618AF64(llvm::Pass *this)
{
  *(_QWORD *)this = &off_1E8136178;
  if (*((_BYTE *)this + 536))
  {
    sub_1C4E08C94((_QWORD *)this + 4);
    *((_BYTE *)this + 536) = 0;
  }
  llvm::Pass::~Pass(this);
}

void sub_1C618AFA4(llvm::Pass *this)
{
  *(_QWORD *)this = &off_1E8136178;
  if (*((_BYTE *)this + 536))
  {
    sub_1C4E08C94((_QWORD *)this + 4);
    *((_BYTE *)this + 536) = 0;
  }
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

llvm::DemandedBitsWrapperPass *llvm::callDefaultCtor<llvm::DemandedBitsWrapperPass>()
{
  llvm::DemandedBitsWrapperPass *v0;

  v0 = (llvm::DemandedBitsWrapperPass *)operator new();
  return llvm::DemandedBitsWrapperPass::DemandedBitsWrapperPass(v0);
}

double sub_1C618B020(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  if (*((_BYTE *)a1 + 504))
    a1 = sub_1C4E08C94(a1);
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  *((_BYTE *)a1 + 24) = 0;
  a1[4] = a1 + 8;
  a1[5] = a1 + 8;
  a1[6] = 32;
  *((_DWORD *)a1 + 14) = 0;
  a1[40] = 0;
  a1[41] = 0;
  *((_DWORD *)a1 + 84) = 0;
  a1[43] = a1 + 47;
  a1[44] = a1 + 47;
  *(_QWORD *)&result = 16;
  a1[45] = 16;
  *((_DWORD *)a1 + 92) = 0;
  *((_BYTE *)a1 + 504) = 1;
  return result;
}

uint64_t llvm::DependenceAnalysis::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v6 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::AAManager::Key, a1) + 8;
  v7 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::ScalarEvolutionAnalysis::Key, a1) + 8;
  result = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1);
  *a3 = v6;
  a3[1] = v7;
  a3[2] = result + 8;
  a3[3] = a1;
  return result;
}

void llvm::initializeDependenceAnalysisWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82D128);
  if (v2 != -1)
  {
    v5[0] = sub_1C4E095DC;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82D128, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::DependenceAnalysisWrapperPass *llvm::DependenceAnalysisWrapperPass::DependenceAnalysisWrapperPass(llvm::DependenceAnalysisWrapperPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::DependenceAnalysisWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E8136218;
  *((_QWORD *)this + 4) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82D128);
  if (v2 != -1)
  {
    v6[0] = sub_1C4E095DC;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82D128, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

llvm::DependenceAnalysisWrapperPass *llvm::createDependenceAnalysisWrapperPass(llvm *this)
{
  llvm::DependenceAnalysisWrapperPass *v1;

  v1 = (llvm::DependenceAnalysisWrapperPass *)operator new();
  return llvm::DependenceAnalysisWrapperPass::DependenceAnalysisWrapperPass(v1);
}

uint64_t llvm::DependenceAnalysisWrapperPass::runOnFunction(llvm::DependenceAnalysisWrapperPass *this, llvm::Function *a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  char **v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = (char **)**((_QWORD **)this + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::AAResultsWrapperPass::ID);
  v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::AAResultsWrapperPass::ID)+ 32);
  v7 = (char **)**((_QWORD **)this + 1);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::ScalarEvolutionWrapperPass::ID);
  v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v10 = (char **)**((_QWORD **)this + 1);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::LoopInfoWrapperPass::ID);
  v12 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::LoopInfoWrapperPass::ID)+ 32;
  v13 = (_QWORD *)operator new();
  *v13 = v6;
  v13[1] = v9;
  v13[2] = v12;
  v13[3] = a2;
  v14 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v13;
  if (v14)
    MEMORY[0x1CAA32FC0](v14, 0x1020C4063BC1FCFLL);
  return 0;
}

uint64_t llvm::DependenceAnalysisWrapperPass::getDI(llvm::DependenceAnalysisWrapperPass *this)
{
  return *((_QWORD *)this + 4);
}

uint64_t llvm::DependenceAnalysisWrapperPass::releaseMemory(llvm::DependenceAnalysisWrapperPass *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (result)
    JUMPOUT(0x1CAA32FC0);
  return result;
}

llvm::AnalysisUsage *llvm::DependenceAnalysisWrapperPass::getAnalysisUsage(llvm::DependenceAnalysisWrapperPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::AAResultsWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::ScalarEvolutionWrapperPass::ID);
  return llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::LoopInfoWrapperPass::ID);
}

uint64_t llvm::DependenceAnalysisWrapperPass::print(llvm::DependenceInfo **this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  return sub_1C4E09688((uint64_t)a2, this[4]);
}

_QWORD *llvm::DependenceAnalysisPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::raw_ostream *v8;
  size_t v9;
  char *Name;
  size_t v11;
  void *v12;
  llvm::raw_ostream *v13;
  uint64_t ResultImpl;

  v8 = sub_1C4816AD8(*a1, "'Dependence Analysis' for function '");
  Name = llvm::Value::getName(a2);
  v11 = v9;
  v12 = (void *)*((_QWORD *)v8 + 4);
  if (v9 <= *((_QWORD *)v8 + 3) - (_QWORD)v12)
  {
    if (v9)
    {
      memcpy(v12, Name, v9);
      *((_QWORD *)v8 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v8, Name, v9);
  }
  sub_1C4816AD8(v8, "':\n");
  v13 = *a1;
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DependenceAnalysis::Key, (uint64_t)a2);
  sub_1C4E09688((uint64_t)v13, (llvm::DependenceInfo *)(ResultImpl + 8));
  return llvm::InstCountPass::run(a4);
}

uint64_t llvm::Dependence::isOutput(llvm::Instruction **this)
{
  uint64_t result;

  result = llvm::Instruction::mayWriteToMemory(this[1]);
  if ((_DWORD)result)
    return llvm::Instruction::mayWriteToMemory(this[2]);
  return result;
}

uint64_t llvm::Dependence::isFlow(llvm::Instruction **this)
{
  uint64_t result;

  result = llvm::Instruction::mayWriteToMemory(this[1]);
  if ((_DWORD)result)
    return llvm::Instruction::mayReadFromMemory(this[2]);
  return result;
}

uint64_t llvm::Dependence::isAnti(llvm::Instruction **this)
{
  uint64_t result;

  result = llvm::Instruction::mayReadFromMemory(this[1]);
  if ((_DWORD)result)
    return llvm::Instruction::mayWriteToMemory(this[2]);
  return result;
}

uint64_t llvm::Dependence::isScalar(llvm::Dependence *this)
{
  return 0;
}

llvm::FullDependence *llvm::FullDependence::FullDependence(llvm::FullDependence *this, llvm::Instruction *a2, llvm::Instruction *a3, char a4, unsigned int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = a3;
  *(_QWORD *)this = &off_1E81362B8;
  *((_WORD *)this + 20) = a5;
  *((_BYTE *)this + 42) = a4;
  *((_QWORD *)this + 6) = 0;
  *((_BYTE *)this + 43) = 1;
  if (a5)
  {
    v7 = operator new[]();
    v8 = v7;
    do
    {
      *(_BYTE *)v8 = *(_BYTE *)v8 & 0x80 | 0xF;
      *(_QWORD *)(v8 + 8) = 0;
      v8 += 16;
    }
    while (v8 != v7 + 16 * a5);
    v9 = *((_QWORD *)this + 6);
    *((_QWORD *)this + 6) = v7;
    if (v9)
      MEMORY[0x1CAA32F9C](v9, 0x1060C80768B1B2DLL);
  }
  return this;
}

uint64_t llvm::FullDependence::getDirection(llvm::FullDependence *this, int a2)
{
  return *(_BYTE *)(*((_QWORD *)this + 6) + 16 * (a2 - 1)) & 7;
}

uint64_t llvm::FullDependence::getDistance(llvm::FullDependence *this, int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 6) + 16 * (a2 - 1) + 8);
}

uint64_t llvm::FullDependence::isScalar(llvm::FullDependence *this, int a2)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 6) + 16 * (a2 - 1)) >> 3) & 1;
}

uint64_t llvm::FullDependence::isPeelFirst(llvm::FullDependence *this, int a2)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 6) + 16 * (a2 - 1)) >> 4) & 1;
}

uint64_t llvm::FullDependence::isPeelLast(llvm::FullDependence *this, int a2)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 6) + 16 * (a2 - 1)) >> 5) & 1;
}

uint64_t llvm::FullDependence::isSplitable(llvm::FullDependence *this, int a2)
{
  return (*(unsigned __int8 *)(*((_QWORD *)this + 6) + 16 * (a2 - 1)) >> 6) & 1;
}

unint64_t llvm::DependenceInfo::Constraint::setDistance(llvm::DependenceInfo::Constraint *this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  llvm::ScalarEvolution *v6;
  llvm::Type *Type;
  unint64_t Constant;
  unint64_t result;

  *(_DWORD *)this = 2;
  v6 = (llvm::ScalarEvolution *)*((_QWORD *)this + 1);
  Type = (llvm::Type *)llvm::SCEV::getType(a2);
  Constant = llvm::ScalarEvolution::getConstant(v6, Type, 1, 0);
  *((_QWORD *)this + 2) = Constant;
  *((_QWORD *)this + 3) = llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)this + 1), Constant);
  result = llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)this + 1), (uint64_t)a2);
  *((_QWORD *)this + 4) = result;
  *((_QWORD *)this + 5) = a3;
  return result;
}

llvm::raw_ostream *llvm::DependenceInfo::Constraint::dump(llvm::DependenceInfo::Constraint *this, llvm::raw_ostream *a2)
{
  char *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  unint64_t NegativeSCEV;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;

  switch(*(_DWORD *)this)
  {
    case 0:
      v4 = " Empty\n";
      goto LABEL_9;
    case 1:
      v5 = sub_1C4816AD8(a2, " Point is <");
      llvm::SCEV::print(*((_QWORD *)this + 2));
      v6 = sub_1C4816AD8(v5, ", ");
      llvm::SCEV::print(*((_QWORD *)this + 3));
      v4 = ">\n";
      goto LABEL_6;
    case 2:
      v7 = sub_1C4816AD8(a2, " Distance is ");
      NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)this + 1), *((_QWORD *)this + 4));
      llvm::SCEV::print(NegativeSCEV);
      v9 = sub_1C4816AD8(v7, " (");
      llvm::SCEV::print(*((_QWORD *)this + 2));
      v10 = sub_1C4816AD8(v9, "*X + ");
      llvm::SCEV::print(*((_QWORD *)this + 3));
      v6 = sub_1C4816AD8(v10, "*Y = ");
      llvm::SCEV::print(*((_QWORD *)this + 4));
      v4 = ")\n";
      goto LABEL_6;
    case 4:
      v4 = " Any\n";
LABEL_9:
      v13 = a2;
      return sub_1C4816AD8(v13, v4);
    default:
      v11 = sub_1C4816AD8(a2, " Line is ");
      llvm::SCEV::print(*((_QWORD *)this + 2));
      v12 = sub_1C4816AD8(v11, "*X + ");
      llvm::SCEV::print(*((_QWORD *)this + 3));
      v6 = sub_1C4816AD8(v12, "*Y = ");
      llvm::SCEV::print(*((_QWORD *)this + 4));
      v4 = "\n";
LABEL_6:
      v13 = v6;
      return sub_1C4816AD8(v13, v4);
  }
}

uint64_t llvm::DependenceInfo::isKnownPredicate(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  const llvm::SCEV *v4;
  const llvm::SCEV *v5;
  int v8;
  llvm::SCEV *v9;
  llvm::SCEV *v10;
  uint64_t Type;

  v4 = (const llvm::SCEV *)a4;
  v5 = (const llvm::SCEV *)a3;
  if ((a2 & 0xFFFFFFFE) == 0x20)
  {
    v8 = *(unsigned __int16 *)(a3 + 24);
    if (v8 == 2)
    {
      if (*(_WORD *)(a4 + 24) != 2)
        goto LABEL_7;
    }
    else if (v8 != 3 || *(_WORD *)(a4 + 24) != 3)
    {
      goto LABEL_7;
    }
    v9 = *(llvm::SCEV **)(a3 + 32);
    v10 = *(llvm::SCEV **)(a4 + 32);
    Type = llvm::SCEV::getType(v9);
    if (Type == llvm::SCEV::getType(v10))
    {
      v5 = v9;
      v4 = v10;
    }
  }
LABEL_7:
  if ((llvm::ScalarEvolution::isKnownPredicate(*(uint64_t *****)(a1 + 8), a2, v5, v4) & 1) == 0)
  {
    llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), (uint64_t)v5, (uint64_t)v4);
    __asm { BR              X10 }
  }
  return 1;
}

BOOL sub_1C618BA00(uint64_t a1, const llvm::SCEV *a2)
{
  uint64_t v2;

  return llvm::ScalarEvolution::isKnownNonNegative(*(llvm::ScalarEvolution **)(v2 + 8), a2);
}

uint64_t sub_1C618BA1C(uint64_t a1, const llvm::SCEV *a2)
{
  uint64_t v2;

  return llvm::ScalarEvolution::isKnownNonZero(*(llvm::ScalarEvolution **)(v2 + 8), a2);
}

uint64_t sub_1C618BA38(uint64_t a1, const llvm::SCEV *a2)
{
  uint64_t v2;

  return llvm::ScalarEvolution::isKnownPositive(*(llvm::ScalarEvolution **)(v2 + 8), a2);
}

uint64_t sub_1C618BA54(uint64_t a1, const llvm::SCEV *a2)
{
  uint64_t v2;

  return llvm::ScalarEvolution::isKnownNonPositive(*(llvm::ScalarEvolution **)(v2 + 8), a2);
}

unint64_t sub_1C618BA70(uint64_t a1, const llvm::SCEV *a2)
{
  uint64_t v2;

  return llvm::ScalarEvolution::isKnownNegative(*(llvm::ScalarEvolution **)(v2 + 8), a2);
}

uint64_t llvm::DependenceInfo::establishNestingLevels(llvm::DependenceInfo *this, const llvm::Instruction *a2, const llvm::Instruction *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *((_QWORD *)a2 + 5);
  v5 = *((_QWORD *)a3 + 5);
  v6 = *((_QWORD *)this + 2);
  v19 = 0;
  v20 = v4;
  if ((sub_1C4926528(v6, &v20, &v19) & 1) != 0 && (v7 = *(_QWORD **)(v19 + 8)) != 0)
  {
    v8 = 0;
    do
    {
      v7 = (_QWORD *)*v7;
      ++v8;
    }
    while (v7);
  }
  else
  {
    v8 = 0;
  }
  v9 = *((_QWORD *)this + 2);
  v19 = 0;
  v20 = v5;
  if ((sub_1C4926528(v9, &v20, &v19) & 1) != 0 && (v10 = *(_QWORD **)(v19 + 8)) != 0)
  {
    v11 = 0;
    do
    {
      v10 = (_QWORD *)*v10;
      ++v11;
    }
    while (v10);
  }
  else
  {
    v11 = 0;
  }
  v12 = *((_QWORD *)this + 2);
  v19 = 0;
  v20 = v4;
  v13 = 0;
  if (sub_1C4926528(v12, &v20, &v19))
    v13 = *(_QWORD **)(v19 + 8);
  v14 = *((_QWORD *)this + 2);
  v19 = 0;
  v20 = v5;
  result = sub_1C4926528(v14, &v20, &v19);
  v16 = 0;
  if ((_DWORD)result)
    v16 = *(_QWORD **)(v19 + 8);
  *((_DWORD *)this + 9) = v8;
  v17 = v8;
  if (v8 > v11)
  {
    do
    {
      v13 = (_QWORD *)*v13;
      --v17;
    }
    while (v17 > v11);
    v17 = v11;
  }
  if (v11 > v17)
  {
    v18 = v11;
    do
    {
      v16 = (_QWORD *)*v16;
      --v18;
    }
    while (v18 > v17);
  }
  while (v13 != v16)
  {
    v13 = (_QWORD *)*v13;
    v16 = (_QWORD *)*v16;
    --v17;
  }
  *((_DWORD *)this + 8) = v17;
  *((_DWORD *)this + 10) = v11 + v8 - v17;
  return result;
}

BOOL llvm::DependenceInfo::isLoopInvariant(llvm::ScalarEvolution **this, const llvm::SCEV *a2, const llvm::Loop *a3)
{
  const llvm::Loop *v3;
  BOOL v6;
  _BOOL8 result;

  if (!a3)
    return 1;
  v3 = a3;
  do
  {
    v6 = llvm::ScalarEvolution::getLoopDisposition(this[1], a2, v3) == 1;
    result = v6;
    if (!v6)
      break;
    v3 = *(const llvm::Loop **)v3;
  }
  while (v3);
  return result;
}

void llvm::DependenceInfo::removeMatchingExtensions(uint64_t a1, llvm::SCEV **a2)
{
  llvm::SCEV *v3;
  int v4;
  llvm::SCEV *v5;
  llvm::SCEV *v6;
  uint64_t Type;

  v3 = a2[1];
  v4 = *((unsigned __int16 *)*a2 + 12);
  if (v4 == 3)
  {
    if (*((_WORD *)v3 + 12) != 3)
      return;
    goto LABEL_6;
  }
  if (v4 == 2 && *((_WORD *)v3 + 12) == 2)
  {
LABEL_6:
    v5 = (llvm::SCEV *)*((_QWORD *)*a2 + 4);
    v6 = (llvm::SCEV *)*((_QWORD *)v3 + 4);
    Type = llvm::SCEV::getType(v5);
    if (Type == llvm::SCEV::getType(v6))
    {
      *a2 = v5;
      a2[1] = v6;
    }
  }
}

uint64_t llvm::DependenceInfo::classifyPair(uint64_t a1, uint64_t a2, const llvm::Loop *a3, uint64_t a4, const llvm::Loop *a5, uint64_t *a6)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int8x8_t *v15;
  uint64_t v16;
  int8x8_t v17;
  uint8x8_t v18;
  uint8x8_t v20;
  uint64_t v21;
  __int32 v22;
  int8x8_t *v23;
  uint64_t v24;
  int8x8_t v25;
  uint8x8_t v26;
  uint8x8_t v27;
  uint64_t v28;
  __int32 v29;
  int8x8_t *v30;
  uint64_t v31;
  int8x8_t v32;
  uint8x8_t v33;
  uint8x8_t v34;
  uint64_t v35;
  __int32 v36;
  int8x8_t *v37;
  uint64_t v38;
  int8x8_t v39;
  uint8x8_t v40;
  uint8x8_t v41;
  uint64_t v42;
  __int32 v43;
  int8x8_t *v44;
  uint64_t v45;
  int8x8_t v46;
  uint8x8_t v47;
  uint8x8_t v48;
  unint64_t v49;
  unint64_t v50;

  sub_1C4E18778((uint64_t *)&v50, (*(_DWORD *)(a1 + 40) + 1));
  sub_1C4E18778((uint64_t *)&v49, (*(_DWORD *)(a1 + 40) + 1));
  if (!llvm::DependenceInfo::checkSubscript(a1, a2, a3, &v50, 1)
    || !llvm::DependenceInfo::checkSubscript(a1, a4, a5, &v49, 0))
  {
    v14 = 4;
    goto LABEL_9;
  }
  sub_1C4AFDC18(a6, (uint64_t *)&v50);
  sub_1C4AFD980((unint64_t *)a6, &v49);
  v12 = *a6;
  if ((*a6 & 1) != 0)
  {
    v20 = (uint8x8_t)vcnt_s8((int8x8_t)((v12 >> 1) & ~(-1 << (v12 >> 58))));
    v20.i16[0] = vaddlv_u8(v20);
    v14 = v20.u32[0];
  }
  else
  {
    v13 = *(unsigned int *)(v12 + 8);
    if (!(_DWORD)v13)
    {
      v14 = 0;
      goto LABEL_9;
    }
    LODWORD(v14) = 0;
    v15 = *(int8x8_t **)v12;
    v16 = 8 * v13;
    do
    {
      v17 = *v15++;
      v18 = (uint8x8_t)vcnt_s8(v17);
      v18.i16[0] = vaddlv_u8(v18);
      v14 = (v14 + v18.i32[0]);
      v16 -= 8;
    }
    while (v16);
  }
  if ((_DWORD)v14)
  {
    if ((_DWORD)v14 != 2)
    {
      if ((_DWORD)v14 != 1)
      {
LABEL_14:
        v14 = 3;
        goto LABEL_9;
      }
      goto LABEL_9;
    }
    if ((v50 & 1) != 0)
    {
      v27 = (uint8x8_t)vcnt_s8((int8x8_t)((v50 >> 1) & ~(-1 << (v50 >> 58))));
      v27.i16[0] = vaddlv_u8(v27);
      v22 = v27.i32[0];
    }
    else
    {
      v21 = *(unsigned int *)(v50 + 8);
      if (!(_DWORD)v21)
        goto LABEL_44;
      v22 = 0;
      v23 = *(int8x8_t **)v50;
      v24 = 8 * v21;
      do
      {
        v25 = *v23++;
        v26 = (uint8x8_t)vcnt_s8(v25);
        v26.i16[0] = vaddlv_u8(v26);
        v22 += v26.i32[0];
        v24 -= 8;
      }
      while (v24);
    }
    if (v22)
    {
      if ((v49 & 1) != 0)
      {
        v34 = (uint8x8_t)vcnt_s8((int8x8_t)((v49 >> 1) & ~(-1 << (v49 >> 58))));
        v34.i16[0] = vaddlv_u8(v34);
        v29 = v34.i32[0];
      }
      else
      {
        v28 = *(unsigned int *)(v49 + 8);
        if (!(_DWORD)v28)
          goto LABEL_44;
        v29 = 0;
        v30 = *(int8x8_t **)v49;
        v31 = 8 * v28;
        do
        {
          v32 = *v30++;
          v33 = (uint8x8_t)vcnt_s8(v32);
          v33.i16[0] = vaddlv_u8(v33);
          v29 += v33.i32[0];
          v31 -= 8;
        }
        while (v31);
      }
      if (v29)
      {
        if ((v50 & 1) != 0)
        {
          v41 = (uint8x8_t)vcnt_s8((int8x8_t)((v50 >> 1) & ~(-1 << (v50 >> 58))));
          v41.i16[0] = vaddlv_u8(v41);
          v36 = v41.i32[0];
        }
        else
        {
          v35 = *(unsigned int *)(v50 + 8);
          if (!(_DWORD)v35)
            goto LABEL_14;
          v36 = 0;
          v37 = *(int8x8_t **)v50;
          v38 = 8 * v35;
          do
          {
            v39 = *v37++;
            v40 = (uint8x8_t)vcnt_s8(v39);
            v40.i16[0] = vaddlv_u8(v40);
            v36 += v40.i32[0];
            v38 -= 8;
          }
          while (v38);
        }
        if (v36 != 1)
          goto LABEL_14;
        if ((v49 & 1) != 0)
        {
          v48 = (uint8x8_t)vcnt_s8((int8x8_t)((v49 >> 1) & ~(-1 << (v49 >> 58))));
          v48.i16[0] = vaddlv_u8(v48);
          v43 = v48.i32[0];
        }
        else
        {
          v42 = *(unsigned int *)(v49 + 8);
          if (!(_DWORD)v42)
            goto LABEL_14;
          v43 = 0;
          v44 = *(int8x8_t **)v49;
          v45 = 8 * v42;
          do
          {
            v46 = *v44++;
            v47 = (uint8x8_t)vcnt_s8(v46);
            v47.i16[0] = vaddlv_u8(v47);
            v43 += v47.i32[0];
            v45 -= 8;
          }
          while (v45);
        }
        if (v43 != 1)
          goto LABEL_14;
      }
    }
LABEL_44:
    v14 = 2;
  }
LABEL_9:
  sub_1C4914448((void ***)&v49);
  sub_1C4914448((void ***)&v50);
  return v14;
}

void llvm::DependenceInfo::collectUpperBound(llvm::ScalarEvolution **this, const llvm::Loop *a2, llvm::Type *a3)
{
  uint64_t BackedgeTakenCount;

  if (llvm::ScalarEvolution::hasLoopInvariantBackedgeTakenCount(this[1], a2))
  {
    BackedgeTakenCount = llvm::ScalarEvolution::getBackedgeTakenCount(this[1], a2, 0);
    llvm::ScalarEvolution::getTruncateOrZeroExtend((uint64_t)this[1], BackedgeTakenCount);
  }
}

uint64_t llvm::DependenceInfo::symbolicRDIVtest(llvm::DependenceInfo *this, const llvm::SCEV *a2, const llvm::SCEV *a3, const llvm::SCEV *a4, const llvm::SCEV *a5, const llvm::Loop *a6, const llvm::Loop *a7)
{
  llvm::Type *Type;
  uint64_t v15;
  uint64_t v16;
  llvm::Type *v17;
  uint64_t v18;
  uint64_t v19;
  const llvm::SCEV *v20;
  const llvm::SCEV *v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL4 isKnownNonNegative;
  llvm::ScalarEvolution *v25;
  uint64_t result;
  uint64_t v27;
  llvm::DependenceInfo *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  Type = (llvm::Type *)llvm::SCEV::getType(a2);
  llvm::DependenceInfo::collectUpperBound((llvm::ScalarEvolution **)this, a6, Type);
  v16 = v15;
  v17 = (llvm::Type *)llvm::SCEV::getType(a2);
  llvm::DependenceInfo::collectUpperBound((llvm::ScalarEvolution **)this, a7, v17);
  v19 = v18;
  llvm::ScalarEvolution::getMinusSCEV(*((_QWORD *)this + 1), (uint64_t)a5, (uint64_t)a4);
  v21 = v20;
  llvm::ScalarEvolution::getMinusSCEV(*((_QWORD *)this + 1), (uint64_t)a4, (uint64_t)a5);
  v23 = v22;
  isKnownNonNegative = llvm::ScalarEvolution::isKnownNonNegative(*((llvm::ScalarEvolution **)this + 1), a2);
  v25 = (llvm::ScalarEvolution *)*((_QWORD *)this + 1);
  if (isKnownNonNegative)
  {
    if (llvm::ScalarEvolution::isKnownNonNegative(v25, a3))
    {
      if (v16)
      {
        v30 = sub_1C4E0AE60(*((_QWORD *)this + 1), (uint64_t)a2, v16, 0, 0);
        if ((llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x26u, (uint64_t)v21, v30) & 1) != 0)
          return 1;
      }
      if (!v19)
        return 0;
      v29 = sub_1C4E0AE60(*((_QWORD *)this + 1), (uint64_t)a3, v19, 0, 0);
      v28 = this;
      v27 = v23;
      return llvm::DependenceInfo::isKnownPredicate((uint64_t)v28, 0x28u, v29, v27);
    }
    result = llvm::ScalarEvolution::isKnownNonPositive(*((llvm::ScalarEvolution **)this + 1), a3);
    if ((_DWORD)result)
    {
      if (!v16)
        return llvm::ScalarEvolution::isKnownNegative(*((llvm::ScalarEvolution **)this + 1), v21);
      if (!v19)
        return llvm::ScalarEvolution::isKnownNegative(*((llvm::ScalarEvolution **)this + 1), v21);
      v34 = sub_1C4E0AE60(*((_QWORD *)this + 1), (uint64_t)a2, v16, 0, 0);
      v35 = sub_1C4E0AE60(*((_QWORD *)this + 1), (uint64_t)a3, v19, 0, 0);
      llvm::ScalarEvolution::getMinusSCEV(*((_QWORD *)this + 1), v34, v35);
      if ((llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x26u, (uint64_t)v21, v36) & 1) == 0)
        return llvm::ScalarEvolution::isKnownNegative(*((llvm::ScalarEvolution **)this + 1), v21);
      return 1;
    }
  }
  else
  {
    result = llvm::ScalarEvolution::isKnownNonPositive(v25, a2);
    if ((_DWORD)result)
    {
      if (llvm::ScalarEvolution::isKnownNonNegative(*((llvm::ScalarEvolution **)this + 1), a3))
      {
        if (!v16)
          return llvm::ScalarEvolution::isKnownPositive(*((llvm::ScalarEvolution **)this + 1), v21);
        if (!v19)
          return llvm::ScalarEvolution::isKnownPositive(*((llvm::ScalarEvolution **)this + 1), v21);
        v31 = sub_1C4E0AE60(*((_QWORD *)this + 1), (uint64_t)a2, v16, 0, 0);
        v32 = sub_1C4E0AE60(*((_QWORD *)this + 1), (uint64_t)a3, v19, 0, 0);
        llvm::ScalarEvolution::getMinusSCEV(*((_QWORD *)this + 1), v31, v32);
        if ((llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x26u, v33, (uint64_t)v21) & 1) == 0)
          return llvm::ScalarEvolution::isKnownPositive(*((llvm::ScalarEvolution **)this + 1), v21);
        return 1;
      }
      result = llvm::ScalarEvolution::isKnownNonPositive(*((llvm::ScalarEvolution **)this + 1), a3);
      if ((_DWORD)result)
      {
        if (v16)
        {
          v37 = sub_1C4E0AE60(*((_QWORD *)this + 1), (uint64_t)a2, v16, 0, 0);
          if ((llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x26u, v37, (uint64_t)v21) & 1) != 0)
            return 1;
        }
        if (!v19)
          return 0;
        v27 = sub_1C4E0AE60(*((_QWORD *)this + 1), (uint64_t)a3, v19, 0, 0);
        v28 = this;
        v29 = v23;
        return llvm::DependenceInfo::isKnownPredicate((uint64_t)v28, 0x28u, v29, v27);
      }
    }
  }
  return result;
}

void llvm::DependenceInfo::testSIV(uint64_t **this, const llvm::SCEV *a2, const llvm::SCEV *a3, unsigned int *a4, llvm::FullDependence *a5, llvm::DependenceInfo::Constraint *a6, const llvm::SCEV **a7)
{
  const llvm::SCEV *v12;
  const llvm::SCEV *v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  const llvm::SCEV *v22;
  const llvm::SCEV *v23;
  const llvm::SCEV *v24;
  unint64_t v25;
  const llvm::SCEV *v26;
  unsigned int v27;
  const llvm::Loop *v28;
  const llvm::Loop *v29;
  unint64_t NegativeSCEV;
  unsigned int v31;
  const llvm::SCEV *v32;
  const llvm::SCEV *v33;
  const llvm::SCEV *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int v40;
  char v41;
  uint64_t v42;
  char v43;
  const llvm::SCEV *v44;
  char v45;

  if (*((_WORD *)a2 + 12) == 7)
    v12 = a2;
  else
    v12 = 0;
  if (*((_WORD *)a3 + 12) == 7)
    v13 = a3;
  else
    v13 = 0;
  if (v12)
    v14 = v13 == 0;
  else
    v14 = 1;
  if (v14)
  {
    if (v12)
    {
      v15 = **((_QWORD **)v12 + 4);
      v16 = sub_1C4E0C3BC((uint64_t)v12, this[1]);
      LODWORD(v17) = 0;
      v18 = *((_QWORD *)v12 + 6);
      v19 = (_QWORD *)v18;
      do
      {
        v19 = (_QWORD *)*v19;
        v17 = (v17 + 1);
      }
      while (v19);
      *a4 = v17;
      llvm::DependenceInfo::weakZeroDstSIVtest((uint64_t)this, v16, v15, (uint64_t)a3, v18, v17, (uint64_t)a5);
      if ((v20 & 1) != 0)
        return;
    }
    else
    {
      v35 = **((_QWORD **)v13 + 4);
      v36 = sub_1C4E0C3BC((uint64_t)v13, this[1]);
      LODWORD(v37) = 0;
      v38 = *((_QWORD *)v13 + 6);
      v39 = (_QWORD *)v38;
      do
      {
        v39 = (_QWORD *)*v39;
        v37 = (v37 + 1);
      }
      while (v39);
      v40 = *((_DWORD *)this + 8);
      if (v37 > v40)
        v37 = *((_DWORD *)this + 9) - v40 + v37;
      *a4 = v37;
      llvm::DependenceInfo::weakZeroSrcSIVtest((uint64_t)this, v36, (uint64_t)a2, v35, v38, v37, (uint64_t)a5);
      if ((v41 & 1) != 0)
        return;
    }
    llvm::DependenceInfo::gcdMIVtest((uint64_t)this, (uint64_t)a2);
    return;
  }
  v22 = (const llvm::SCEV *)**((_QWORD **)v12 + 4);
  v23 = (const llvm::SCEV *)**((_QWORD **)v13 + 4);
  v24 = (const llvm::SCEV *)sub_1C4E0C3BC((uint64_t)v12, this[1]);
  v25 = sub_1C4E0C3BC((uint64_t)v13, this[1]);
  v26 = (const llvm::SCEV *)v25;
  v27 = 0;
  v28 = (const llvm::Loop *)*((_QWORD *)v12 + 6);
  v29 = v28;
  do
  {
    v29 = *(const llvm::Loop **)v29;
    ++v27;
  }
  while (v29);
  *a4 = v27;
  if (v24 == (const llvm::SCEV *)v25)
  {
    v32 = v22;
    v42 = (uint64_t)v22;
    v34 = v23;
    llvm::DependenceInfo::strongSIVtest((uint64_t)this, (uint64_t)v24, v42, (uint64_t)v23);
    if ((v43 & 1) != 0)
      return;
  }
  else
  {
    NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV((uint64_t)this[1], v25);
    v31 = *a4;
    if (v24 == (const llvm::SCEV *)NegativeSCEV)
    {
      v32 = v22;
      v44 = v22;
      v34 = v23;
      if ((llvm::DependenceInfo::weakCrossingSIVtest((llvm::DependenceInfo *)this, v24, v44, v23, v28, v31, a5, a6, a7) & 1) != 0)
        return;
    }
    else
    {
      v32 = v22;
      v33 = v22;
      v34 = v23;
      if ((llvm::DependenceInfo::exactSIVtest((llvm::DependenceInfo *)this, v24, v26, v33, v23, v28, v31, a5, a6) & 1) != 0)
        return;
    }
  }
  llvm::DependenceInfo::gcdMIVtest((uint64_t)this, (uint64_t)a2);
  if ((v45 & 1) == 0)
    llvm::DependenceInfo::symbolicRDIVtest((llvm::DependenceInfo *)this, v24, v26, v32, v34, v28, v28);
}

uint64_t llvm::DependenceInfo::testRDIV(uint64_t **this, const llvm::SCEV *a2, const llvm::SCEV *a3, llvm::FullDependence *a4)
{
  const llvm::SCEV *v7;
  const llvm::SCEV *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  const llvm::SCEV *v13;
  const llvm::SCEV *v14;
  const llvm::Loop *v15;
  const llvm::SCEV *v16;
  const llvm::SCEV *NegativeSCEV;
  const llvm::Loop *v18;
  char v19;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;

  if (*((_WORD *)a2 + 12) == 7)
    v7 = a2;
  else
    v7 = 0;
  if (*((_WORD *)a3 + 12) == 7)
    v8 = a3;
  else
    v8 = 0;
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (v9)
  {
    if (v7)
    {
      if (*(_WORD *)(**((_QWORD **)v7 + 4) + 24) == 7)
        v10 = **((_QWORD **)v7 + 4);
      else
        v10 = 0;
      v13 = **(const llvm::SCEV ***)(v10 + 32);
      v14 = (const llvm::SCEV *)sub_1C4E0C3BC(v10, this[1]);
      v15 = *(const llvm::Loop **)(v10 + 48);
      v11 = this[1];
      v12 = sub_1C4E0C3BC((uint64_t)v7, v11);
      NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV((uint64_t)v11, v12);
      v18 = (const llvm::Loop *)*((_QWORD *)v7 + 6);
      v16 = a3;
    }
    else
    {
      if (*(_WORD *)(**((_QWORD **)v8 + 4) + 24) == 7)
        v21 = **((_QWORD **)v8 + 4);
      else
        v21 = 0;
      v16 = **(const llvm::SCEV ***)(v21 + 32);
      NegativeSCEV = (const llvm::SCEV *)sub_1C4E0C3BC(v21, this[1]);
      v18 = *(const llvm::Loop **)(v21 + 48);
      v22 = this[1];
      v23 = sub_1C4E0C3BC((uint64_t)v8, v22);
      v14 = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV((uint64_t)v22, v23);
      v15 = (const llvm::Loop *)*((_QWORD *)v8 + 6);
      v13 = a2;
    }
  }
  else
  {
    v13 = (const llvm::SCEV *)**((_QWORD **)v7 + 4);
    v14 = (const llvm::SCEV *)sub_1C4E0C3BC((uint64_t)v7, this[1]);
    v15 = (const llvm::Loop *)*((_QWORD *)v7 + 6);
    v16 = (const llvm::SCEV *)**((_QWORD **)v8 + 4);
    NegativeSCEV = (const llvm::SCEV *)sub_1C4E0C3BC((uint64_t)v8, this[1]);
    v18 = (const llvm::Loop *)*((_QWORD *)v8 + 6);
  }
  if ((llvm::DependenceInfo::exactRDIVtest((llvm::DependenceInfo *)this, v14, NegativeSCEV, v13, v16, v15, v18, a4) & 1) != 0)
    return 1;
  llvm::DependenceInfo::gcdMIVtest((uint64_t)this, (uint64_t)a2);
  if ((v19 & 1) != 0)
    return 1;
  else
    return llvm::DependenceInfo::symbolicRDIVtest((llvm::DependenceInfo *)this, v14, NegativeSCEV, v13, v16, v15, v18);
}

unint64_t llvm::DependenceInfo::findBoundsALL(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t *v6;
  _QWORD *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  uint64_t v16;
  uint64_t v17;
  llvm::ScalarEvolution *v18;
  llvm::Type *Type;
  llvm::ScalarEvolution *v20;
  llvm::Type *v21;

  v6 = (uint64_t *)(a4 + 144 * a5);
  v6[16] = 0;
  v7 = v6 + 16;
  v6[8] = 0;
  v8 = (unint64_t *)(v6 + 8);
  if (*v6)
  {
    v9 = *(_QWORD *)(a1 + 8);
    v10 = a2 + 32 * a5;
    v11 = a3 + 32 * a5;
    llvm::ScalarEvolution::getMinusSCEV(v9, *(_QWORD *)(v10 + 16), *(_QWORD *)(v11 + 8));
    *v7 = sub_1C4E0AE60(v9, v12, *v6, 0, 0);
    v13 = *(_QWORD *)(a1 + 8);
    llvm::ScalarEvolution::getMinusSCEV(v13, *(_QWORD *)(v10 + 8), *(_QWORD *)(v11 + 16));
    result = sub_1C4E0AE60(v13, v14, *v6, 0, 0);
LABEL_3:
    *v8 = result;
    return result;
  }
  v16 = a2 + 32 * a5;
  v17 = a3 + 32 * a5;
  if (llvm::DependenceInfo::isKnownPredicate(a1, 0x20u, *(_QWORD *)(v16 + 16), *(_QWORD *)(v17 + 8)))
  {
    v18 = *(llvm::ScalarEvolution **)(a1 + 8);
    Type = (llvm::Type *)llvm::SCEV::getType(*(llvm::SCEV **)v16);
    *v7 = llvm::ScalarEvolution::getConstant(v18, Type, 0, 0);
  }
  result = llvm::DependenceInfo::isKnownPredicate(a1, 0x20u, *(_QWORD *)(v16 + 8), *(_QWORD *)(v17 + 16));
  if ((_DWORD)result)
  {
    v20 = *(llvm::ScalarEvolution **)(a1 + 8);
    v21 = (llvm::Type *)llvm::SCEV::getType(*(llvm::SCEV **)v16);
    result = llvm::ScalarEvolution::getConstant(v20, v21, 0, 0);
    goto LABEL_3;
  }
  return result;
}

uint64_t llvm::DependenceInfo::exploreDirections(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD **a6, unsigned int *a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v32;
  uint64_t v33;

  v9 = *(unsigned int *)(a1 + 32);
  v10 = *a6;
  v11 = (unint64_t)*a6 >> 1;
  v12 = ~(-1 << ((unint64_t)*a6 >> 58));
  if (v9 > dword_1ED7F1730)
  {
    if ((v9 + 1) > 2)
      v13 = (v9 + 1);
    else
      v13 = 2;
    v14 = (_BYTE *)(a5 + 281);
    v15 = 1;
    do
    {
      if ((v10 & 1) != 0)
      {
        v16 = 1 << v15;
        v17 = v12 & v11;
      }
      else
      {
        v16 = *(_QWORD *)(*v10 + 8 * (v15 >> 6));
        v17 = 1 << v15;
      }
      if ((v16 & v17) != 0)
        *v14 = 7;
      ++v15;
      v14 += 144;
    }
    while (v13 != v15);
    return 1;
  }
  v20 = a2;
  if (v9 < a2)
  {
LABEL_15:
    if ((_DWORD)v9)
    {
      v21 = v9 + 1;
      v22 = (_BYTE *)(a5 + 281);
      v23 = 1;
      do
      {
        if ((v10 & 1) != 0)
        {
          v24 = 1 << v23;
          v25 = v12 & v11;
        }
        else
        {
          v24 = *(_QWORD *)(*v10 + 8 * (v23 >> 6));
          v25 = 1 << v23;
        }
        if ((v24 & v25) != 0)
          *v22 |= *(v22 - 1);
        ++v23;
        v22 += 144;
      }
      while (v21 != v23);
    }
    return 1;
  }
  while (1)
  {
    if ((v10 & 1) != 0)
    {
      v32 = 1 << v20;
      v33 = v12 & v11;
    }
    else
    {
      v32 = *(_QWORD *)(*v10 + 8 * (v20 >> 6));
      v33 = 1 << v20;
    }
    if ((v32 & v33) != 0)
      break;
    if (v9 < ++v20)
      goto LABEL_15;
  }
  if (*a7 < v20)
  {
    *a7 = v20;
    llvm::DependenceInfo::findBoundsLT(a1, a3, a4, a5, v20);
    llvm::DependenceInfo::findBoundsGT(a1, a3, a4, a5, v20);
    llvm::DependenceInfo::findBoundsEQ(a1, a3, a4, a5, v20);
  }
  if (llvm::DependenceInfo::testBounds(a1, 1, v20, a5, a8))
    v18 = llvm::DependenceInfo::exploreDirections(a1, v20 + 1, a3, a4, a5, a6, a7, a8);
  else
    v18 = 0;
  if (llvm::DependenceInfo::testBounds(a1, 2, v20, a5, a8))
    v18 = llvm::DependenceInfo::exploreDirections(a1, v20 + 1, a3, a4, a5, a6, a7, a8) + v18;
  if (llvm::DependenceInfo::testBounds(a1, 4, v20, a5, a8))
    v18 = llvm::DependenceInfo::exploreDirections(a1, v20 + 1, a3, a4, a5, a6, a7, a8) + v18;
  *(_BYTE *)(a5 + 144 * v20 + 136) = 7;
  return v18;
}

void llvm::DependenceInfo::findBoundsLT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  llvm::ScalarEvolution *v13;
  llvm::Type *Type;
  unint64_t Constant;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::SCEV *v20;
  const llvm::SCEV *v21;
  llvm::ScalarEvolution *v22;
  llvm::Type *v23;
  const llvm::SCEV *v24;
  uint64_t SMinExpr;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  llvm::SCEV *v29;
  const llvm::SCEV *v30;
  llvm::ScalarEvolution *v31;
  llvm::Type *v32;
  const llvm::SCEV *v33;
  uint64_t SMaxExpr;
  uint64_t v35;
  uint64_t v36;
  unint64_t NegativeSCEV;
  uint64_t v38;
  uint64_t *v39;
  llvm::SCEV *v40;
  const llvm::SCEV *v41;
  llvm::ScalarEvolution *v42;
  llvm::Type *v43;
  const llvm::SCEV *v44;
  llvm::SCEV *v45;
  llvm::SCEV *v46;
  const llvm::SCEV *v47;
  llvm::ScalarEvolution *v48;
  llvm::Type *v49;
  const llvm::SCEV *v50;
  llvm::SCEV *v51;

  v8 = a5;
  v9 = a4 + 144 * a5;
  *(_QWORD *)(v9 + 80) = 0;
  v10 = (unint64_t *)(v9 + 80);
  *(_QWORD *)(v9 + 16) = 0;
  v11 = (unint64_t *)(v9 + 16);
  v12 = *(_QWORD *)(a4 + 144 * a5);
  v13 = *(llvm::ScalarEvolution **)(a1 + 8);
  if (v12)
  {
    Type = (llvm::Type *)llvm::SCEV::getType(*(llvm::SCEV **)(a4 + 144 * a5));
    Constant = llvm::ScalarEvolution::getConstant(v13, Type, 1, 0);
    llvm::ScalarEvolution::getMinusSCEV((uint64_t)v13, v12, Constant);
    v17 = v16;
    v18 = a2 + 32 * v8;
    v19 = 32 * v8;
    llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), *(_QWORD *)(v18 + 16), *(_QWORD *)(a3 + v19));
    v21 = v20;
    v22 = *(llvm::ScalarEvolution **)(a1 + 8);
    v23 = (llvm::Type *)llvm::SCEV::getType(v20);
    v24 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v22, v23, 0, 0);
    SMinExpr = llvm::ScalarEvolution::getSMinExpr(v22, v21, v24);
    v26 = *(_QWORD *)(a1 + 8);
    v27 = sub_1C4E0AE60(v26, SMinExpr, v17, 0, 0);
    llvm::ScalarEvolution::getMinusSCEV(v26, v27, *(_QWORD *)(a3 + v19));
    *v10 = v28;
    llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), *(_QWORD *)(v18 + 8), *(_QWORD *)(a3 + v19));
    v30 = v29;
    v31 = *(llvm::ScalarEvolution **)(a1 + 8);
    v32 = (llvm::Type *)llvm::SCEV::getType(v29);
    v33 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v31, v32, 0, 0);
    SMaxExpr = llvm::ScalarEvolution::getSMaxExpr(v31, v30, v33);
    v35 = *(_QWORD *)(a1 + 8);
    v36 = sub_1C4E0AE60(v35, SMaxExpr, v17, 0, 0);
    llvm::ScalarEvolution::getMinusSCEV(v35, v36, *(_QWORD *)(a3 + v19));
LABEL_3:
    *v11 = NegativeSCEV;
    return;
  }
  v38 = a2 + 32 * a5;
  v39 = (uint64_t *)(a3 + 32 * a5);
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), *(_QWORD *)(v38 + 16), *v39);
  v41 = v40;
  v42 = *(llvm::ScalarEvolution **)(a1 + 8);
  v43 = (llvm::Type *)llvm::SCEV::getType(v40);
  v44 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v42, v43, 0, 0);
  v45 = (llvm::SCEV *)llvm::ScalarEvolution::getSMinExpr(v42, v41, v44);
  if (llvm::SCEV::isZero(v45))
    *v10 = llvm::ScalarEvolution::getNegativeSCEV(*(_QWORD *)(a1 + 8), *v39);
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), *(_QWORD *)(v38 + 8), *v39);
  v47 = v46;
  v48 = *(llvm::ScalarEvolution **)(a1 + 8);
  v49 = (llvm::Type *)llvm::SCEV::getType(v46);
  v50 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v48, v49, 0, 0);
  v51 = (llvm::SCEV *)llvm::ScalarEvolution::getSMaxExpr(v48, v47, v50);
  if (llvm::SCEV::isZero(v51))
  {
    NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(*(_QWORD *)(a1 + 8), *v39);
    goto LABEL_3;
  }
}

uint64_t llvm::DependenceInfo::findBoundsGT(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  llvm::ScalarEvolution *v13;
  llvm::Type *Type;
  unint64_t Constant;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::SCEV *v21;
  const llvm::SCEV *v22;
  llvm::ScalarEvolution *v23;
  llvm::Type *v24;
  const llvm::SCEV *v25;
  uint64_t SMinExpr;
  uint64_t v27;
  uint64_t v28;
  llvm::SCEV *v29;
  const llvm::SCEV *v30;
  llvm::ScalarEvolution *v31;
  llvm::Type *v32;
  const llvm::SCEV *v33;
  uint64_t SMaxExpr;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t *v38;
  uint64_t v39;
  llvm::SCEV *v40;
  const llvm::SCEV *v41;
  llvm::ScalarEvolution *v42;
  llvm::Type *v43;
  const llvm::SCEV *v44;
  llvm::SCEV *v45;
  llvm::SCEV *v46;
  const llvm::SCEV *v47;
  llvm::ScalarEvolution *v48;
  llvm::Type *v49;
  const llvm::SCEV *v50;
  llvm::SCEV *v51;

  v8 = a5;
  v9 = a4 + 144 * a5;
  *(_QWORD *)(v9 + 104) = 0;
  v10 = (uint64_t *)(v9 + 104);
  *(_QWORD *)(v9 + 40) = 0;
  v11 = (uint64_t *)(v9 + 40);
  v12 = *(_QWORD *)(a4 + 144 * a5);
  v13 = *(llvm::ScalarEvolution **)(a1 + 8);
  if (v12)
  {
    Type = (llvm::Type *)llvm::SCEV::getType(*(llvm::SCEV **)(a4 + 144 * a5));
    Constant = llvm::ScalarEvolution::getConstant(v13, Type, 1, 0);
    llvm::ScalarEvolution::getMinusSCEV((uint64_t)v13, v12, Constant);
    v17 = v16;
    v18 = 32 * v8;
    v19 = *(_QWORD *)(a2 + 32 * v8);
    v20 = a3 + 32 * v8;
    llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), v19, *(_QWORD *)(v20 + 8));
    v22 = v21;
    v23 = *(llvm::ScalarEvolution **)(a1 + 8);
    v24 = (llvm::Type *)llvm::SCEV::getType(v21);
    v25 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v23, v24, 0, 0);
    SMinExpr = llvm::ScalarEvolution::getSMinExpr(v23, v22, v25);
    v27 = *(_QWORD *)(a1 + 8);
    v28 = sub_1C4E0AE60(v27, SMinExpr, v17, 0, 0);
    *v10 = sub_1C4E0AF14(v27, v28, *(_QWORD *)(a2 + v18), 0, 0);
    llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + v18), *(_QWORD *)(v20 + 16));
    v30 = v29;
    v31 = *(llvm::ScalarEvolution **)(a1 + 8);
    v32 = (llvm::Type *)llvm::SCEV::getType(v29);
    v33 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v31, v32, 0, 0);
    SMaxExpr = llvm::ScalarEvolution::getSMaxExpr(v31, v30, v33);
    v35 = *(_QWORD *)(a1 + 8);
    v36 = sub_1C4E0AE60(v35, SMaxExpr, v17, 0, 0);
    result = sub_1C4E0AF14(v35, v36, *(_QWORD *)(a2 + v18), 0, 0);
LABEL_3:
    *v11 = result;
    return result;
  }
  v38 = (uint64_t *)(a2 + 32 * a5);
  v39 = a3 + 32 * a5;
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), *v38, *(_QWORD *)(v39 + 8));
  v41 = v40;
  v42 = *(llvm::ScalarEvolution **)(a1 + 8);
  v43 = (llvm::Type *)llvm::SCEV::getType(v40);
  v44 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v42, v43, 0, 0);
  v45 = (llvm::SCEV *)llvm::ScalarEvolution::getSMinExpr(v42, v41, v44);
  if (llvm::SCEV::isZero(v45))
    *v10 = *v38;
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), *v38, *(_QWORD *)(v39 + 16));
  v47 = v46;
  v48 = *(llvm::ScalarEvolution **)(a1 + 8);
  v49 = (llvm::Type *)llvm::SCEV::getType(v46);
  v50 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v48, v49, 0, 0);
  v51 = (llvm::SCEV *)llvm::ScalarEvolution::getSMaxExpr(v48, v47, v50);
  result = llvm::SCEV::isZero(v51);
  if ((_DWORD)result)
  {
    result = *v38;
    goto LABEL_3;
  }
  return result;
}

uint64_t llvm::DependenceInfo::findBoundsEQ(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  llvm::SCEV *v9;
  const llvm::SCEV *v10;
  llvm::ScalarEvolution *v11;
  llvm::Type *Type;
  const llvm::SCEV *Constant;
  llvm::SCEV *SMinExpr;
  llvm::SCEV *v15;
  llvm::ScalarEvolution *v16;
  llvm::Type *v17;
  const llvm::SCEV *v18;
  uint64_t SMaxExpr;
  uint64_t result;
  llvm::SCEV *v21;
  llvm::ScalarEvolution *v22;
  llvm::Type *v23;
  const llvm::SCEV *v24;

  v6 = (uint64_t *)(a4 + 144 * a5);
  v6[11] = 0;
  v7 = v6 + 11;
  v6[3] = 0;
  v8 = *v6;
  llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 32 * a5), *(_QWORD *)(a3 + 32 * a5));
  v10 = v9;
  v11 = *(llvm::ScalarEvolution **)(a1 + 8);
  Type = (llvm::Type *)llvm::SCEV::getType(v9);
  Constant = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v11, Type, 0, 0);
  SMinExpr = (llvm::SCEV *)llvm::ScalarEvolution::getSMinExpr(v11, v10, Constant);
  v15 = SMinExpr;
  if (v8)
  {
    *v7 = sub_1C4E0AE60(*(_QWORD *)(a1 + 8), (uint64_t)SMinExpr, *v6, 0, 0);
    v16 = *(llvm::ScalarEvolution **)(a1 + 8);
    v17 = (llvm::Type *)llvm::SCEV::getType(v10);
    v18 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v16, v17, 0, 0);
    SMaxExpr = llvm::ScalarEvolution::getSMaxExpr(v16, v10, v18);
    result = sub_1C4E0AE60(*(_QWORD *)(a1 + 8), SMaxExpr, *v6, 0, 0);
    v21 = (llvm::SCEV *)result;
LABEL_3:
    v6[3] = (uint64_t)v21;
    return result;
  }
  if (llvm::SCEV::isZero(SMinExpr))
    *v7 = (uint64_t)v15;
  v22 = *(llvm::ScalarEvolution **)(a1 + 8);
  v23 = (llvm::Type *)llvm::SCEV::getType(v10);
  v24 = (const llvm::SCEV *)llvm::ScalarEvolution::getConstant(v22, v23, 0, 0);
  v21 = (llvm::SCEV *)llvm::ScalarEvolution::getSMaxExpr(v22, v10, v24);
  result = llvm::SCEV::isZero(v21);
  if ((_DWORD)result)
    goto LABEL_3;
  return result;
}

uint64_t llvm::DependenceInfo::getLowerBound(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int i;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8 * *(unsigned __int8 *)(a2 + 280) + 216);
  if (v3)
  {
    for (i = 2; i <= *(_DWORD *)(a1 + 40); ++i)
    {
      v6 = *(_QWORD *)(a2 + 144 * i + 8 * *(unsigned __int8 *)(a2 + 144 * i + 136) + 72);
      if (!v6)
        return 0;
      v3 = sub_1C4E0AF14(*(_QWORD *)(a1 + 8), v3, v6, 0, 0);
      if (!v3)
        return v3;
    }
  }
  return v3;
}

uint64_t llvm::DependenceInfo::getUpperBound(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int i;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8 * *(unsigned __int8 *)(a2 + 280) + 152);
  if (v3)
  {
    for (i = 2; i <= *(_DWORD *)(a1 + 40); ++i)
    {
      v6 = *(_QWORD *)(a2 + 144 * i + 8 * *(unsigned __int8 *)(a2 + 144 * i + 136) + 8);
      if (!v6)
        return 0;
      v3 = sub_1C4E0AF14(*(_QWORD *)(a1 + 8), v3, v6, 0, 0);
      if (!v3)
        return v3;
    }
  }
  return v3;
}

uint64_t llvm::DependenceInfo::propagate(llvm::DependenceInfo *a1, const llvm::SCEV **a2, const llvm::SCEV **a3, unint64_t *a4, _QWORD *a5, BOOL *a6)
{
  unint64_t v12;
  unsigned int v13;
  unint64_t v14;
  char v15;
  llvm::DependenceInfo::Constraint *v16;
  int v17;
  char v18;

  v12 = *a4;
  if ((*a4 & 1) == 0)
  {
    v13 = sub_1C476B7EC(v12);
    if (v13 == -1)
      goto LABEL_16;
    goto LABEL_6;
  }
  v14 = (v12 >> 1) & ~(-1 << (v12 >> 58));
  if (v14)
  {
    v13 = __clz(__rbit64(v14));
LABEL_6:
    v15 = 0;
    while (1)
    {
      v16 = (llvm::DependenceInfo::Constraint *)(*a5 + 48 * v13);
      v17 = *(_DWORD *)v16;
      if (*(_DWORD *)v16 == 2)
      {
        v18 = llvm::DependenceInfo::propagateDistance(a1, a2, a3, v16, a6);
      }
      else
      {
        if ((v17 & 0xFFFFFFFE) != 2)
        {
          if (v17 == 1)
          {
            llvm::DependenceInfo::propagatePoint(a1, a2, a3, v16);
            v15 = 1;
          }
          goto LABEL_11;
        }
        v18 = llvm::DependenceInfo::propagateLine((llvm::ConstantInt *****)a1, a2, a3, v16, a6);
      }
      v15 |= v18;
LABEL_11:
      v13 = sub_1C49143F4(a4, v13);
      if (v13 == -1)
        return v15 & 1;
    }
  }
LABEL_16:
  v15 = 0;
  return v15 & 1;
}

BOOL llvm::DependenceInfo::propagateDistance(llvm::DependenceInfo *this, const llvm::SCEV **a2, const llvm::SCEV **a3, llvm::DependenceInfo::Constraint *a4, BOOL *a5)
{
  const llvm::Loop *v10;
  llvm::SCEV *Coefficient;
  _BOOL4 isZero;
  uint64_t v13;
  unint64_t NegativeSCEV;
  uint64_t v15;
  const llvm::SCEV *v16;
  const llvm::SCEV *v17;
  const llvm::SCEV *v18;
  const llvm::SCEV *v19;
  llvm::SCEV *v20;

  v10 = (const llvm::Loop *)*((_QWORD *)a4 + 5);
  Coefficient = (llvm::SCEV *)llvm::DependenceInfo::findCoefficient(this, *a2, v10);
  isZero = llvm::SCEV::isZero(Coefficient);
  if (!isZero)
  {
    v13 = *((_QWORD *)this + 1);
    NegativeSCEV = llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)a4 + 1), *((_QWORD *)a4 + 4));
    v15 = sub_1C4E0AE60(v13, (uint64_t)Coefficient, NegativeSCEV, 0, 0);
    llvm::ScalarEvolution::getMinusSCEV(*((_QWORD *)this + 1), (uint64_t)*a2, v15);
    *a2 = v16;
    *a2 = (const llvm::SCEV *)llvm::DependenceInfo::zeroCoefficient(this, (const llvm::SCEV ***)v16, v10);
    v17 = *a3;
    v18 = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)this + 1), (uint64_t)Coefficient);
    v19 = (const llvm::SCEV *)llvm::DependenceInfo::addToCoefficient(this, v17, (uint64_t **)v10, v18);
    *a3 = v19;
    v20 = (llvm::SCEV *)llvm::DependenceInfo::findCoefficient(this, v19, v10);
    if (!llvm::SCEV::isZero(v20))
      *a5 = 0;
  }
  return !isZero;
}

uint64_t llvm::DependenceInfo::propagateLine(llvm::ConstantInt *****this, const llvm::SCEV **a2, const llvm::SCEV **a3, llvm::DependenceInfo::Constraint *a4, BOOL *a5)
{
  llvm::SCEV *v9;
  llvm::SCEV *v10;
  const llvm::Loop *v11;
  uint64_t v12;
  llvm::SCEV *v13;
  uint64_t v14;
  BOOL v15;
  llvm::SCEV *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  size_t v30;
  unint64_t v31;
  llvm::ConstantInt ****v32;
  const llvm::SCEV *v33;
  const llvm::APInt *v34;
  unint64_t v35;
  uint64_t v36;
  const llvm::SCEV *v37;
  const llvm::SCEV *v38;
  llvm::SCEV *v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  size_t v44;
  unint64_t Coefficient;
  llvm::ConstantInt ****v46;
  const llvm::SCEV *v47;
  const llvm::APInt *v48;
  unint64_t Constant;
  uint64_t v50;
  const llvm::SCEV *v51;
  llvm::SCEV *v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  unint64_t v58;
  uint64_t v59;
  const llvm::SCEV *v60;
  uint64_t v61;
  const llvm::SCEV *v62;
  const llvm::SCEV *v63;
  const llvm::SCEV *v64;
  const llvm::SCEV *v65;
  llvm::SCEV *v66;
  size_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  size_t v71;
  const llvm::SCEV *v72;
  llvm::ConstantInt ****v73;
  const llvm::SCEV *v74;
  const llvm::APInt *v75;
  unint64_t v76;
  uint64_t v77;
  const llvm::SCEV *v78;
  uint64_t v79;
  unsigned int v80;
  void *v81;
  unsigned int v82;
  const void *v83;
  unsigned int v84;

  v10 = (llvm::SCEV *)*((_QWORD *)a4 + 2);
  v9 = (llvm::SCEV *)*((_QWORD *)a4 + 3);
  v12 = *((_QWORD *)a4 + 4);
  v11 = (const llvm::Loop *)*((_QWORD *)a4 + 5);
  if (!llvm::SCEV::isZero(v10))
  {
    if (llvm::SCEV::isZero(v9))
    {
      if (*((_WORD *)v10 + 12))
        v17 = 0;
      else
        v17 = v10;
      if (*(_WORD *)(v12 + 24))
        v18 = 0;
      else
        v18 = v12;
      if (v17)
        v19 = v18 == 0;
      else
        v19 = 1;
      if (!v19)
      {
        v20 = *((_QWORD *)v17 + 4);
        v21 = *(unsigned int *)(v20 + 32);
        v84 = v21;
        if (v21 > 0x40)
        {
          v40 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
          v22 = (void *)operator new[]();
          memcpy(v22, *(const void **)(v20 + 24), v40);
        }
        else
        {
          v22 = *(void **)(v20 + 24);
        }
        v83 = v22;
        v41 = *(_QWORD *)(v18 + 32);
        v42 = *(unsigned int *)(v41 + 32);
        v82 = v42;
        if (v42 > 0x40)
        {
          v44 = ((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8;
          v43 = (void *)operator new[]();
          memcpy(v43, *(const void **)(v41 + 24), v44);
        }
        else
        {
          v43 = *(void **)(v41 + 24);
        }
        v81 = v43;
        llvm::APInt::sdiv((llvm::APInt *)&v81, &v83, (llvm::APInt *)&v79);
        Coefficient = llvm::DependenceInfo::findCoefficient((llvm::DependenceInfo *)this, *a2, v11);
        v46 = this[1];
        v47 = *a2;
        Constant = llvm::ScalarEvolution::getConstant(v46, (const llvm::APInt *)&v79, v48);
        v50 = sub_1C4E0AE60((uint64_t)v46, Coefficient, Constant, 0, 0);
        v51 = (const llvm::SCEV *)sub_1C4E0AF14((uint64_t)v46, (uint64_t)v47, v50, 0, 0);
        *a2 = v51;
        *a2 = (const llvm::SCEV *)llvm::DependenceInfo::zeroCoefficient((llvm::DependenceInfo *)this, (const llvm::SCEV ***)v51, v11);
        v38 = *a3;
        goto LABEL_34;
      }
    }
    else
    {
      if (!llvm::DependenceInfo::isKnownPredicate((uint64_t)this, 0x20u, (uint64_t)v10, (uint64_t)v9))
      {
        v58 = llvm::DependenceInfo::findCoefficient((llvm::DependenceInfo *)this, *a2, v11);
        *a2 = (const llvm::SCEV *)sub_1C4E0AE60((uint64_t)this[1], (uint64_t)*a2, (uint64_t)v10, 0, 0);
        *a3 = (const llvm::SCEV *)sub_1C4E0AE60((uint64_t)this[1], (uint64_t)*a3, (uint64_t)v10, 0, 0);
        v59 = (uint64_t)this[1];
        v60 = *a2;
        v61 = sub_1C4E0AE60(v59, v58, v12, 0, 0);
        v62 = (const llvm::SCEV *)sub_1C4E0AF14(v59, (uint64_t)v60, v61, 0, 0);
        *a2 = v62;
        *a2 = (const llvm::SCEV *)llvm::DependenceInfo::zeroCoefficient((llvm::DependenceInfo *)this, (const llvm::SCEV ***)v62, v11);
        v63 = *a3;
        v64 = (const llvm::SCEV *)sub_1C4E0AE60((uint64_t)this[1], v58, (uint64_t)v9, 0, 0);
        v65 = (const llvm::SCEV *)llvm::DependenceInfo::addToCoefficient((llvm::DependenceInfo *)this, v63, (uint64_t **)v11, v64);
        *a3 = v65;
        v66 = (llvm::SCEV *)llvm::DependenceInfo::findCoefficient((llvm::DependenceInfo *)this, v65, v11);
        if (!llvm::SCEV::isZero(v66))
          *a5 = 0;
        return 1;
      }
      if (*((_WORD *)v10 + 12))
        v52 = 0;
      else
        v52 = v10;
      if (*(_WORD *)(v12 + 24))
        v53 = 0;
      else
        v53 = v12;
      if (v52)
        v54 = v53 == 0;
      else
        v54 = 1;
      if (!v54)
      {
        v55 = *((_QWORD *)v52 + 4);
        v56 = *(unsigned int *)(v55 + 32);
        v84 = v56;
        if (v56 > 0x40)
        {
          v67 = ((unint64_t)(v56 + 63) >> 3) & 0x3FFFFFF8;
          v57 = (void *)operator new[]();
          memcpy(v57, *(const void **)(v55 + 24), v67);
        }
        else
        {
          v57 = *(void **)(v55 + 24);
        }
        v83 = v57;
        v68 = *(_QWORD *)(v53 + 32);
        v69 = *(unsigned int *)(v68 + 32);
        v82 = v69;
        if (v69 > 0x40)
        {
          v71 = ((unint64_t)(v69 + 63) >> 3) & 0x3FFFFFF8;
          v70 = (void *)operator new[]();
          memcpy(v70, *(const void **)(v68 + 24), v71);
        }
        else
        {
          v70 = *(void **)(v68 + 24);
        }
        v81 = v70;
        llvm::APInt::sdiv((llvm::APInt *)&v81, &v83, (llvm::APInt *)&v79);
        v72 = (const llvm::SCEV *)llvm::DependenceInfo::findCoefficient((llvm::DependenceInfo *)this, *a2, v11);
        v73 = this[1];
        v74 = *a2;
        v76 = llvm::ScalarEvolution::getConstant(v73, (const llvm::APInt *)&v79, v75);
        v77 = sub_1C4E0AE60((uint64_t)v73, (uint64_t)v72, v76, 0, 0);
        v78 = (const llvm::SCEV *)sub_1C4E0AF14((uint64_t)v73, (uint64_t)v74, v77, 0, 0);
        *a2 = v78;
        *a2 = (const llvm::SCEV *)llvm::DependenceInfo::zeroCoefficient((llvm::DependenceInfo *)this, (const llvm::SCEV ***)v78, v11);
        v38 = (const llvm::SCEV *)llvm::DependenceInfo::addToCoefficient((llvm::DependenceInfo *)this, *a3, (uint64_t **)v11, v72);
        *a3 = v38;
        goto LABEL_34;
      }
    }
    return 0;
  }
  if (*((_WORD *)v9 + 12))
    v13 = 0;
  else
    v13 = v9;
  if (*(_WORD *)(v12 + 24))
    v14 = 0;
  else
    v14 = v12;
  if (v13)
    v15 = v14 == 0;
  else
    v15 = 1;
  if (v15)
    return 0;
  v23 = *((_QWORD *)v13 + 4);
  v24 = *(unsigned int *)(v23 + 32);
  v84 = v24;
  if (v24 > 0x40)
  {
    v26 = ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8;
    v25 = (void *)operator new[]();
    memcpy(v25, *(const void **)(v23 + 24), v26);
  }
  else
  {
    v25 = *(void **)(v23 + 24);
  }
  v83 = v25;
  v27 = *(_QWORD *)(v14 + 32);
  v28 = *(unsigned int *)(v27 + 32);
  v82 = v28;
  if (v28 > 0x40)
  {
    v30 = ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8;
    v29 = (void *)operator new[]();
    memcpy(v29, *(const void **)(v27 + 24), v30);
  }
  else
  {
    v29 = *(void **)(v27 + 24);
  }
  v81 = v29;
  llvm::APInt::sdiv((llvm::APInt *)&v81, &v83, (llvm::APInt *)&v79);
  v31 = llvm::DependenceInfo::findCoefficient((llvm::DependenceInfo *)this, *a3, v11);
  v32 = this[1];
  v33 = *a2;
  v35 = llvm::ScalarEvolution::getConstant(v32, (const llvm::APInt *)&v79, v34);
  v36 = sub_1C4E0AE60((uint64_t)v32, v31, v35, 0, 0);
  llvm::ScalarEvolution::getMinusSCEV((uint64_t)v32, (uint64_t)v33, v36);
  *a2 = v37;
  *a3 = (const llvm::SCEV *)llvm::DependenceInfo::zeroCoefficient((llvm::DependenceInfo *)this, (const llvm::SCEV ***)*a3, v11);
  v38 = *a2;
LABEL_34:
  v39 = (llvm::SCEV *)llvm::DependenceInfo::findCoefficient((llvm::DependenceInfo *)this, v38, v11);
  if (!llvm::SCEV::isZero(v39))
    *a5 = 0;
  if (v80 >= 0x41 && v79)
    MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
  if (v82 >= 0x41 && v81)
    MEMORY[0x1CAA32F9C](v81, 0x1000C8000313F17);
  if (v84 >= 0x41)
  {
    if (v83)
      MEMORY[0x1CAA32F9C](v83, 0x1000C8000313F17);
  }
  return 1;
}

uint64_t llvm::DependenceInfo::propagatePoint(llvm::DependenceInfo *this, const llvm::SCEV **a2, const llvm::SCEV **a3, llvm::DependenceInfo::Constraint *a4)
{
  const llvm::Loop *v8;
  unint64_t Coefficient;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const llvm::SCEV *v14;
  uint64_t v15;
  const llvm::SCEV *v16;

  v8 = (const llvm::Loop *)*((_QWORD *)a4 + 5);
  Coefficient = llvm::DependenceInfo::findCoefficient(this, *a2, v8);
  v10 = llvm::DependenceInfo::findCoefficient(this, *a3, v8);
  v11 = sub_1C4E0AE60(*((_QWORD *)this + 1), Coefficient, *((_QWORD *)a4 + 2), 0, 0);
  v12 = sub_1C4E0AE60(*((_QWORD *)this + 1), v10, *((_QWORD *)a4 + 3), 0, 0);
  v13 = *((_QWORD *)this + 1);
  v14 = *a2;
  llvm::ScalarEvolution::getMinusSCEV(v13, v11, v12);
  v16 = (const llvm::SCEV *)sub_1C4E0AF14(v13, (uint64_t)v14, v15, 0, 0);
  *a2 = v16;
  *a2 = (const llvm::SCEV *)llvm::DependenceInfo::zeroCoefficient(this, (const llvm::SCEV ***)v16, v8);
  *a3 = (const llvm::SCEV *)llvm::DependenceInfo::zeroCoefficient(this, (const llvm::SCEV ***)*a3, v8);
  return 1;
}

uint64_t llvm::DependenceInfo::updateDirection(uint64_t result, char *a2, int *a3)
{
  int v3;
  uint64_t v6;
  const llvm::SCEV *NegativeSCEV;
  int v8;
  int v9;
  char v10;
  char v11;
  int v12;
  int v13;

  v3 = *a3;
  if (*a3 != 4)
  {
    v6 = result;
    if (v3 == 2)
    {
      *a2 &= ~8u;
      NegativeSCEV = (const llvm::SCEV *)llvm::ScalarEvolution::getNegativeSCEV(*((_QWORD *)a3 + 1), *((_QWORD *)a3 + 4));
      *((_QWORD *)a2 + 1) = NegativeSCEV;
      if (llvm::ScalarEvolution::isKnownNonZero(*(llvm::ScalarEvolution **)(v6 + 8), NegativeSCEV))
        v8 = 0;
      else
        v8 = 2;
      v9 = v8 | llvm::ScalarEvolution::isKnownNonPositive(*(llvm::ScalarEvolution **)(v6 + 8), *((const llvm::SCEV **)a2 + 1)) ^ 1;
      result = llvm::ScalarEvolution::isKnownNonNegative(*(llvm::ScalarEvolution **)(v6 + 8), *((const llvm::SCEV **)a2 + 1));
      v10 = v9 | 4;
      v11 = *a2;
      if ((_DWORD)result)
        v10 = v9;
    }
    else
    {
      if ((v3 & 0xFFFFFFFE) == 2)
      {
        *a2 &= ~8u;
        *((_QWORD *)a2 + 1) = 0;
        return result;
      }
      *a2 &= ~8u;
      *((_QWORD *)a2 + 1) = 0;
      if (llvm::DependenceInfo::isKnownPredicate(result, 0x21u, *((_QWORD *)a3 + 3), *((_QWORD *)a3 + 2)))
        v12 = 0;
      else
        v12 = 2;
      v13 = v12 | llvm::DependenceInfo::isKnownPredicate(v6, 0x29u, *((_QWORD *)a3 + 3), *((_QWORD *)a3 + 2)) ^ 1;
      result = llvm::DependenceInfo::isKnownPredicate(v6, 0x27u, *((_QWORD *)a3 + 3), *((_QWORD *)a3 + 2));
      v10 = v13 | 4;
      v11 = *a2;
      if ((_DWORD)result)
        v10 = v13;
    }
    *a2 = (v10 | 0xF8) & v11;
  }
  return result;
}

uint64_t llvm::DependenceInfo::invalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  _QWORD v11[2];
  BOOL v12;

  v11[0] = a3;
  v11[1] = &llvm::DependenceAnalysis::Key;
  v7 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::DependenceAnalysis::Key);
  v8 = *(_QWORD *)(a3 + 56);
  if (v8 == *(_QWORD *)(a3 + 48))
    v9 = (unsigned int *)(a3 + 68);
  else
    v9 = (unsigned int *)(a3 + 64);
  v12 = v7 != (_QWORD *)(v8 + 8 * *v9);
  if ((sub_1C4DAA35C((uint64_t)v11) || sub_1C4DAA3F8((uint64_t)v11))
    && (sub_1C4DA944C(a4, (uint64_t)&llvm::AAManager::Key, a2, a3) & 1) == 0
    && (sub_1C4DA944C(a4, (uint64_t)&llvm::ScalarEvolutionAnalysis::Key, a2, a3) & 1) == 0)
  {
    return sub_1C4DA944C(a4, (uint64_t)&llvm::LoopAnalysis::Key, a2, a3);
  }
  else
  {
    return 1;
  }
}

uint64_t sub_1C618DF20(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    MEMORY[0x1CAA32F9C](v2, 0x1060C80768B1B2DLL);
  return a1;
}

void sub_1C618DF64()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C618DF78()
{
  return 1;
}

uint64_t sub_1C618DF80()
{
  return 1;
}

uint64_t sub_1C618DF88()
{
  return 0;
}

uint64_t sub_1C618DF90()
{
  return 0;
}

uint64_t sub_1C618DF98()
{
  return 7;
}

uint64_t sub_1C618DFA0()
{
  return 0;
}

uint64_t sub_1C618DFA8()
{
  return 0;
}

uint64_t sub_1C618DFB0()
{
  return 0;
}

uint64_t sub_1C618DFB8()
{
  return 0;
}

void sub_1C618DFC0(llvm::Pass *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E8136218;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x1020C4063BC1FCFLL);
  llvm::Pass::~Pass(this);
}

void sub_1C618E00C(llvm::Pass *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E8136218;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x1020C4063BC1FCFLL);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C618E06C(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  if (v2)
    MEMORY[0x1CAA32F9C](v2, 0x1060C80768B1B2DLL);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C618E0BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 42);
}

uint64_t sub_1C618E0C4()
{
  return 0;
}

uint64_t sub_1C618E0CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 43);
}

uint64_t sub_1C618E0D4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 40);
}

llvm::DependenceAnalysisWrapperPass *llvm::callDefaultCtor<llvm::DependenceAnalysisWrapperPass>()
{
  llvm::DependenceAnalysisWrapperPass *v0;

  v0 = (llvm::DependenceAnalysisWrapperPass *)operator new();
  return llvm::DependenceAnalysisWrapperPass::DependenceAnalysisWrapperPass(v0);
}

void sub_1C618E104(char **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED7F1530, 0, 0);
  byte_1ED7F15B0 = 0;
  qword_1ED7F15B8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7F15C0 = 0;
  qword_1ED7F1530 = (uint64_t)&unk_1E819E898;
  qword_1ED7F15C8 = (uint64_t)&off_1E819E9A0;
  qword_1ED7F15D0 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7F15E8 = (uint64_t)&qword_1ED7F15D0;
  sub_1C618E1B8(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F1530);
}

__n128 sub_1C618E1B8(char **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  char *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7F1530, "da-delinearize", 0xEuLL);
  v8 = *a1;
  byte_1ED7F15B0 = **a1;
  byte_1ED7F15C1 = 1;
  byte_1ED7F15C0 = *v8;
  word_1ED7F153A = word_1ED7F153A & 0xFF9F | (32 * (*a2 & 3));
  word_1ED7F153A = word_1ED7F153A & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED7F1550 = (__int128)*a4;
  return result;
}

void sub_1C618E24C(int **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED7F16B0, 0, 0);
  dword_1ED7F1730 = 0;
  qword_1ED7F1738 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED7F1740 = 0;
  qword_1ED7F16B0 = (uint64_t)&unk_1E819E3B0;
  qword_1ED7F1748 = (uint64_t)&unk_1E819E2C0;
  qword_1ED7F1750 = (uint64_t)&off_1E7F95260;
  qword_1ED7F1768 = (uint64_t)&qword_1ED7F1750;
  sub_1C618E300(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F16B0);
}

__n128 sub_1C618E300(int **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7F16B0, "da-miv-max-level-threshold", 0x1AuLL);
  dword_1ED7F1730 = **a1;
  byte_1ED7F1744 = 1;
  dword_1ED7F1740 = dword_1ED7F1730;
  word_1ED7F16BA = word_1ED7F16BA & 0xFF9F | (32 * (*a2 & 3));
  word_1ED7F16BA = word_1ED7F16BA & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED7F16D0 = (__int128)*a4;
  return result;
}

char **sub_1C618E390(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 16 * v3;
    do
    {
      if (*(_DWORD *)&v2[v4 - 8] >= 0x41u)
      {
        v5 = *(_QWORD *)&v2[v4 - 16];
        if (v5)
          MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
      }
      v4 -= 16;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C618E414(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int64x2_t v7;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 > a2)
    {
      sub_1C618E4C0((void ***)(*(_QWORD *)a1 + 48 * a2), (void ***)(*(_QWORD *)a1 + 48 * v2));
    }
    else
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C618E518(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (v2 != a2)
      {
        v5 = *(_QWORD *)a1 + 48 * a2;
        v6 = *(_QWORD *)a1 + 48 * v2;
        v7 = vdupq_n_s64(1uLL);
        do
        {
          *(_QWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          *(_QWORD *)(v6 + 16) = 0;
          *(int64x2_t *)(v6 + 24) = v7;
          *(_QWORD *)(v6 + 40) = 1;
          v6 += 48;
        }
        while (v6 != v5);
      }
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void ***sub_1C618E4C0(void ***result, void ***a2)
{
  void ***v2;
  void ***v3;

  if (a2 != result)
  {
    v2 = a2;
    v3 = result;
    do
    {
      sub_1C4914448(v2 - 1);
      sub_1C4914448(v2 - 2);
      result = sub_1C4914448(v2 - 3);
      v2 -= 6;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1C618E518(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 48, &v5);
  sub_1C618E584((__int128 **)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void ***sub_1C618E584(__int128 **a1, uint64_t a2)
{
  __int128 *v3;
  unsigned int v4;
  unsigned int v5;
  __int128 *v6;
  __int128 v7;

  v3 = *a1;
  v4 = *((_DWORD *)a1 + 2);
  if (v4)
  {
    v6 = &v3[3 * v4];
    do
    {
      v7 = *v3;
      *(_DWORD *)(a2 + 16) = *((_DWORD *)v3 + 4);
      *(_OWORD *)a2 = v7;
      *(_QWORD *)(a2 + 24) = *((_QWORD *)v3 + 3);
      *((_QWORD *)v3 + 3) = 1;
      *(_QWORD *)(a2 + 32) = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 4) = 1;
      *(_QWORD *)(a2 + 40) = *((_QWORD *)v3 + 5);
      *((_QWORD *)v3 + 5) = 1;
      v3 += 3;
      a2 += 48;
    }
    while (v3 != v6);
    v3 = *a1;
    v5 = *((_DWORD *)a1 + 2);
  }
  else
  {
    v5 = 0;
  }
  return sub_1C618E4C0((void ***)v3, (void ***)&v3[3 * v5]);
}

void sub_1C618E600(uint64_t a1, __int128 *a2)
{
  void *v4;
  int v5;
  unint64_t v6;

  v6 = 0;
  v4 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 1uLL, 48, &v6);
  sub_1C4E188E0((uint64_t)v4, a2);
  sub_1C618E4C0(*(void ****)a1, (void ***)(*(_QWORD *)a1 + 48 * *(unsigned int *)(a1 + 8)));
  v5 = v6;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 8) = 1;
  *(_DWORD *)(a1 + 12) = v5;
}

uint64_t llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::computeInstructionOrdinals(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;

  v1 = *(uint64_t **)(result + 24);
  v2 = *((unsigned int *)v1 + 2);
  if ((_DWORD)v2)
  {
    v3 = *v1;
    v4 = *v1 + 8 * v2;
    v5 = result + 56;
    v6 = 1;
    do
    {
      v7 = *(_QWORD *)v3 + 40;
      v8 = *(_QWORD *)(*(_QWORD *)v3 + 48);
      while (v8 != v7)
      {
        v9 = v8 - 24;
        if (!v8)
          v9 = 0;
        v10 = v6 + 1;
        v12 = v9;
        v13 = v6;
        result = sub_1C618F0E8((uint64_t)v11, v5, &v12, &v13);
        v8 = *(_QWORD *)(v8 + 8);
        v6 = v10;
      }
      v3 += 8;
    }
    while (v3 != v4);
  }
  return result;
}

{
  return __ZN4llvm30AbstractDependenceGraphBuilderINS_19DataDependenceGraphEE26computeInstructionOrdinalsEv(result);
}

uint64_t llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::createFineGrainedNodes(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[3];
  uint64_t v15;
  uint64_t v16;

  v1 = *(uint64_t **)(result + 24);
  v2 = *((unsigned int *)v1 + 2);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *v1;
    v13 = *v1 + 8 * v2;
    v5 = result + 32;
    v6 = result + 80;
    v7 = result + 56;
    do
    {
      v8 = *(_QWORD *)v4 + 40;
      for (i = *(_QWORD *)(*(_QWORD *)v4 + 48); i != v8; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v10 = i - 24;
        else
          v10 = 0;
        v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, v10);
        v15 = v10;
        v16 = v11;
        sub_1C6187718((uint64_t)v14, v5, &v15, &v16);
        v14[0] = v10;
        v12 = sub_1C617C470(v7, v14)[1];
        v15 = v11;
        v16 = v12;
        result = sub_1C618F0E8((uint64_t)v14, v6, &v15, &v16);
      }
      v4 += 8;
    }
    while (v4 != v13);
  }
  return result;
}

{
  return __ZN4llvm30AbstractDependenceGraphBuilderINS_19DataDependenceGraphEE22createFineGrainedNodesEv(result);
}

void llvm::AbstractDependenceGraphBuilder<llvm::DataDependenceGraph>::createMemoryDependencyEdges(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  llvm::Instruction **v11;
  llvm::Instruction *v12;
  llvm::Instruction **v13;
  llvm::Instruction **v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  llvm::Instruction **v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t *v24;
  char *v25;
  llvm::Instruction **v26;
  llvm::Instruction **v27[2];
  char v28;
  void *v29;
  uint64_t v30;
  _BYTE v31[16];
  void *v32;
  uint64_t v33;
  _QWORD v34[4];

  v34[2] = *MEMORY[0x1E0C80C00];
  v1 = a1[1];
  v2 = *(unsigned int *)(v1 + 96);
  if (!(_DWORD)v2)
    return;
  v4 = *(uint64_t **)(v1 + 88);
  v5 = &v4[v2];
  v24 = v5;
  do
  {
    v32 = v34;
    v33 = 0x200000000;
    v6 = *v4;
    v29 = sub_1C618F184;
    v30 = (uint64_t)&v28;
    llvm::DDGNode::collectInstructions(v6, (uint64_t)&v29, (unsigned int *)&v32);
    if (v4 == v5 || !(_DWORD)v33)
      goto LABEL_59;
    v7 = v4;
    do
    {
      v8 = *v7;
      if (*v7 == *v4)
        goto LABEL_7;
      v29 = v31;
      v30 = 0x200000000;
      v27[0] = (llvm::Instruction **)sub_1C618F184;
      v27[1] = (llvm::Instruction **)&v28;
      llvm::DDGNode::collectInstructions(v8, (uint64_t)v27, (unsigned int *)&v29);
      if (!(_DWORD)v30 || !(_DWORD)v33)
        goto LABEL_56;
      v9 = 0;
      v10 = 0;
      v11 = (llvm::Instruction **)v32;
      v25 = (char *)v32 + 8 * v33;
      do
      {
        v26 = v11;
        if (!(_DWORD)v30)
          goto LABEL_43;
        v12 = *v11;
        v13 = (llvm::Instruction **)v29;
        v14 = (llvm::Instruction **)((char *)v29 + 8 * v30);
        while (1)
        {
          llvm::DependenceInfo::depends(a1[2], v12, *v13, 1, (uint64_t *)v27);
          if (v27[0])
            break;
LABEL_31:
          if (++v13 == v14)
            goto LABEL_43;
        }
        if ((*((unsigned int (**)(llvm::Instruction **))*v27[0] + 3))(v27[0]))
          goto LABEL_16;
        if (!sub_1C618EBB8(v27[0])
          || ((*((uint64_t (**)(llvm::Instruction **))*v27[0] + 2))(v27[0]) & 1) != 0
          || !(*((unsigned int (**)(llvm::Instruction **))*v27[0] + 5))(v27[0]))
        {
          goto LABEL_38;
        }
        v22 = 1;
        while (1)
        {
          v20 = (*((uint64_t (**)(llvm::Instruction **, uint64_t))*v27[0] + 6))(v27[0], v22);
          v21 = (uint64_t)*v27[0];
          if (v20 != 2)
            break;
          v22 = (v22 + 1);
          if (v22 > (*(unsigned int (**)(void))(v21 + 40))())
            goto LABEL_38;
        }
        if ((*(unsigned int (**)(void))(v21 + 48))() != 4)
        {
          if ((*((unsigned int (**)(llvm::Instruction **, uint64_t))*v27[0] + 6))(v27[0], v22) == 1)
          {
LABEL_38:
            if (!v9)
              (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 48))(a1, *v4, *v7);
          }
          else
          {
LABEL_16:
            v15 = *v4;
            v16 = *v7;
            if (!v9)
              (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 48))(a1, *v4, *v7);
            if (!v10)
              (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 48))(a1, v16, v15);
            v10 = 1;
          }
          v9 = 1;
          goto LABEL_22;
        }
        if (!v10)
          (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 48))(a1, *v7, *v4);
        v10 = 1;
LABEL_22:
        if (v9)
          v17 = v10 == 0;
        else
          v17 = 1;
        v18 = v17;
        v19 = v27[0];
        v27[0] = 0;
        if (v19)
          (*((void (**)(llvm::Instruction **))*v19 + 1))(v19);
        if (v18)
          goto LABEL_31;
        v10 = 1;
        v9 = 1;
LABEL_43:
        if (v10)
          v23 = v9 == 0;
        else
          v23 = 1;
        if (!v23)
          break;
        v11 = v26 + 1;
      }
      while (v26 + 1 != (llvm::Instruction **)v25);
LABEL_56:
      if (v29 != v31)
        free(v29);
      v5 = v24;
LABEL_7:
      ++v7;
    }
    while (v7 != v5);
LABEL_59:
    if (v32 != v34)
      free(v32);
    ++v4;
  }
  while (v4 != v5);
}

{
  __ZN4llvm30AbstractDependenceGraphBuilderINS_19DataDependenceGraphEE27createMemoryDependencyEdgesEv(a1);
}

uint64_t sub_1C618EBB8(llvm::Instruction **a1)
{
  if ((llvm::Dependence::isOutput(a1) & 1) != 0 || (llvm::Dependence::isFlow(a1) & 1) != 0)
    return 1;
  else
    return llvm::Dependence::isAnti(a1);
}

_QWORD *sub_1C618EBFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  _QWORD v23[3];
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  LODWORD(v34[0]) = *(_DWORD *)a2;
  v3 = v34[0];
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v8 = *(_QWORD *)(a2 + 72);
  v9 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v10 = *(_QWORD *)(a2 + 96);
  v11 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v12 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  v13 = *(_QWORD *)(a3 + 48);
  v14 = *(_OWORD *)(a3 + 32);
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  LODWORD(v23[0]) = *(_DWORD *)a3;
  v16 = v23[0];
  v17 = *(_DWORD *)(a3 + 24);
  *(_DWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  v18 = *(_QWORD *)(a3 + 72);
  v19 = *(_OWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  v20 = *(_QWORD *)(a3 + 96);
  v21 = *(_OWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_DWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v34[1] = 0;
  *(_QWORD *)(a1 + 16) = v15;
  v34[2] = 0;
  *(_DWORD *)(a1 + 24) = v5;
  v35 = 0;
  *(_OWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 48) = v6;
  v36 = 0;
  v37 = 0;
  *(_OWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 72) = v8;
  v38 = 0;
  v39 = 0;
  v40 = 0;
  v41 = 0;
  *(_OWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 96) = v10;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  *(_DWORD *)(a1 + 104) = v16;
  *(_QWORD *)(a1 + 112) = v12;
  v23[1] = 0;
  *(_QWORD *)&v7 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a1 + 120) = v7;
  v23[2] = 0;
  *(_DWORD *)(a1 + 128) = v17;
  v24 = 0;
  *(_OWORD *)(a1 + 136) = v14;
  *(_QWORD *)(a1 + 152) = v13;
  v25 = 0;
  v26 = 0;
  *(_OWORD *)(a1 + 160) = v19;
  *(_QWORD *)(a1 + 176) = v18;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  *(_OWORD *)(a1 + 184) = v21;
  *(_QWORD *)(a1 + 200) = v20;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_1C617D7D4(v23);
  return sub_1C617D7D4(v34);
}

unsigned int *sub_1C618ED50(uint64_t a1, char **a2, char **a3)
{
  unsigned int v4;
  uint64_t v5;
  char *v6;
  char *v7;
  unsigned int *result;

  v4 = *(_DWORD *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return (unsigned int *)sub_1C618F630(a1, a2, a3);
  v5 = *(_QWORD *)a1 + 48 * v4;
  v6 = *a2;
  v7 = *a3;
  *(_QWORD *)v5 = v5 + 16;
  *(_QWORD *)(v5 + 8) = 0x400000000;
  result = sub_1C6177054((unsigned int *)v5, v6, v7);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1C618EDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  _QWORD **v5;
  _QWORD **v6;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[11];

  v20[10] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD ***)(a2 + 32);
  v6 = *(_QWORD ***)(a2 + 40);
  if (v5 != v6)
  {
    v9 = *(_QWORD *)(a1 + 16);
    v10 = a2 + 8;
    while (**v5 != a3)
    {
      if (++v5 == v6)
        return;
    }
    v18 = v20;
    v19 = 0xA00000000;
    llvm::DGNode<llvm::DDGNode,llvm::DDGEdge>::findEdgesTo(a2 + 8, a3, (uint64_t)&v18);
    v11 = (char *)v18;
    if ((_DWORD)v19)
    {
      v12 = 8 * v19;
      while (1)
      {
        v13 = *(_QWORD *)v11;
        v14 = *(int *)(*(_QWORD *)v11 + 8);
        if (!*(_BYTE *)(*(_QWORD *)a1 + 4 * a5 + v14))
          break;
LABEL_15:
        v17 = v13;
        sub_1C61885C4(v10, &v17);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 72))(v9, v13);
        v11 += 8;
        v12 -= 8;
        if (!v12)
        {
          v11 = (char *)v18;
          goto LABEL_17;
        }
      }
      if (a5 == 1)
      {
        v15 = *(void (**)(void))(***(_QWORD ***)(a1 + 8) + 8 * (v14 - 1) + 40);
      }
      else
      {
        if (a5)
        {
LABEL_14:
          *(_BYTE *)(*(_QWORD *)a1 + 4 * a5 + v14) = 1;
          goto LABEL_15;
        }
        v15 = *(void (**)(void))(***(_QWORD ***)(a1 + 8) + 8 * (v14 - 1) + 40);
      }
      v16 = *(int *)(*(_QWORD *)v11 + 8);
      v15();
      v14 = v16;
      goto LABEL_14;
    }
LABEL_17:
    if (v11 != (char *)v20)
      free(v11);
  }
}

void sub_1C618EF88(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  _OWORD v6[4];
  void *v7[2];
  _OWORD v8[12];
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  _QWORD v13[25];

  v13[24] = *MEMORY[0x1E0C80C00];
  sub_1C618FA28((unint64_t)&v10, a2);
  v9 = 0;
  memset(v8, 0, sizeof(v8));
  v7[0] = 0;
  memset(v6, 0, sizeof(v6));
  v3 = (char *)v6 + 8;
  v4 = (char *)v6 + 8;
  v5 = 8;
  v7[1] = (char *)v8 + 8;
  DWORD1(v8[0]) = 8;
  sub_1C618F8F8(a1, (uint64_t)&v10, (uint64_t)&v3);
  if (v7[1] != (char *)v8 + 8)
    free(v7[1]);
  if (v4 != v3)
    free(v4);
  if (v12 != v13)
    free(v12);
  if (v11 != v10)
    free(v11);
}

_QWORD *sub_1C618F0A8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t sub_1C618F0E8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = 0;
  result = sub_1C6144BDC(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v13);
  v9 = v13;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C617C4D8(a2, a3, v13);
    v9 = (_QWORD *)result;
    v12 = *a4;
    *(_QWORD *)result = *a3;
    *(_QWORD *)(result + 8) = v12;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C618F17C()
{
  return 1;
}

uint64_t sub_1C618F184(int a1, llvm::Instruction *this)
{
  if ((llvm::Instruction::mayReadFromMemory(this) & 1) != 0)
    return 1;
  else
    return llvm::Instruction::mayWriteToMemory(this);
}

void sub_1C618F1C0(_QWORD *a1, uint64_t a2, llvm::SmallPtrSetImplBase *a3)
{
  _BYTE *v4;
  uint64_t v5;
  void *__p;
  _BYTE *v7;

  sub_1C618F220(&v5, a2, a3);
  v4 = __p;
  *a1 = v5;
  a1[2] = 0;
  a1[3] = 0;
  a1[1] = 0;
  sub_1C4E19D7C(a1 + 1, v4, v7, (v7 - v4) >> 5);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

_QWORD *sub_1C618F220(_QWORD *a1, uint64_t a2, llvm::SmallPtrSetImplBase *this)
{
  void **v5;
  char v6;
  _OWORD *v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v11;
  __int128 v12;

  *a1 = this;
  a1[1] = 0;
  v5 = (void **)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  sub_1C4774094(this, a2);
  if (v6)
  {
    *(_QWORD *)&v11 = a2;
    BYTE8(v11) = 0;
    BYTE8(v12) = 0;
    v7 = (_OWORD *)a1[2];
    if ((unint64_t)v7 >= a1[3])
    {
      v9 = sub_1C4DD17E8(v5, &v11);
    }
    else
    {
      v8 = v12;
      *v7 = v11;
      v7[1] = v8;
      v9 = v7 + 2;
    }
    a1[2] = v9;
  }
  return a1;
}

char *sub_1C618F2AC(char *result)
{
  char *v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v7;
  char v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v1 = result;
  v2 = (void **)(result + 8);
  v3 = *((_QWORD *)result + 2);
  while (2)
  {
    v4 = *(_QWORD *)(v3 - 32);
    if (!*(_BYTE *)(v3 - 8))
    {
      *(_QWORD *)(v3 - 24) = *(_QWORD *)(v4 + 32);
      *(_QWORD *)(v3 - 16) = sub_1C618F3A4;
      *(_BYTE *)(v3 - 8) = 1;
    }
    while (1)
    {
      v5 = *(_QWORD **)(v3 - 24);
      if (v5 == *(_QWORD **)(v4 + 40))
        break;
      v6 = *(uint64_t (**)(_QWORD))(v3 - 16);
      *(_QWORD *)(v3 - 24) = v5 + 1;
      v7 = v6(*v5);
      result = (char *)sub_1C4774094(*(llvm::SmallPtrSetImplBase **)v1, v7);
      if (v8)
      {
        *(_QWORD *)&v12 = v7;
        BYTE8(v12) = 0;
        BYTE8(v13) = 0;
        v10 = (_OWORD *)*((_QWORD *)v1 + 2);
        if ((unint64_t)v10 >= *((_QWORD *)v1 + 3))
        {
          result = (char *)sub_1C4DD17E8(v2, &v12);
        }
        else
        {
          v11 = v13;
          *v10 = v12;
          v10[1] = v11;
          result = (char *)(v10 + 2);
        }
        *((_QWORD *)v1 + 2) = result;
        return result;
      }
    }
    v9 = *((_QWORD *)v1 + 1);
    v3 = *((_QWORD *)v1 + 2) - 32;
    *((_QWORD *)v1 + 2) = v3;
    if (v9 != v3)
      continue;
    break;
  }
  return result;
}

uint64_t sub_1C618F3A4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char **sub_1C618F3AC(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5)
        free(v5);
      v4 -= 48;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

_OWORD *sub_1C618F420(int *a1, uint64_t a2)
{
  int v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  _OWORD *v9;
  __int128 v10;
  _OWORD *result;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = a2;
  v4 = *a1 + 1;
  *a1 = v4;
  *((_DWORD *)sub_1C6144C70((uint64_t)(a1 + 2), &v14) + 2) = v4;
  v5 = (uint64_t *)*((_QWORD *)a1 + 5);
  if ((unint64_t)v5 >= *((_QWORD *)a1 + 6))
  {
    v6 = sub_1C4ABDC28((void **)a1 + 4, a2);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *((_QWORD *)a1 + 5) = v6;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *a1;
  *(_QWORD *)&v12 = a2;
  *((_QWORD *)&v12 + 1) = v7;
  *(_QWORD *)&v13 = sub_1C618F3A4;
  DWORD2(v13) = v8;
  v9 = (_OWORD *)*((_QWORD *)a1 + 11);
  if ((unint64_t)v9 >= *((_QWORD *)a1 + 12))
  {
    result = sub_1C4DBA810((void **)a1 + 10, &v12);
  }
  else
  {
    v10 = v13;
    *v9 = v12;
    v9[1] = v10;
    result = v9 + 2;
  }
  *((_QWORD *)a1 + 11) = result;
  return result;
}

uint64_t sub_1C618F4DC(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;

  v1 = *(_QWORD *)(result + 88);
  v2 = *(_QWORD **)(v1 - 24);
  if (v2 != *(_QWORD **)(*(_QWORD *)(v1 - 32) + 40))
  {
    v3 = result;
    do
    {
      v4 = *(uint64_t (**)(_QWORD))(v1 - 16);
      *(_QWORD *)(v1 - 24) = v2 + 1;
      v5 = v4(*v2);
      v8 = 0;
      result = sub_1C6144BDC(*(_QWORD *)(v3 + 8), *(_DWORD *)(v3 + 24), v5, &v8);
      if ((_DWORD)result)
        v6 = v8 == *(_QWORD *)(v3 + 8) + 16 * *(unsigned int *)(v3 + 24);
      else
        v6 = 1;
      if (v6)
      {
        result = (uint64_t)sub_1C618F420((int *)v3, v5);
        v1 = *(_QWORD *)(v3 + 88);
      }
      else
      {
        v7 = *(_DWORD *)(v8 + 8);
        v1 = *(_QWORD *)(v3 + 88);
        if (*(_DWORD *)(v1 - 8) > v7)
          *(_DWORD *)(v1 - 8) = v7;
      }
      v2 = *(_QWORD **)(v1 - 24);
    }
    while (v2 != *(_QWORD **)(*(_QWORD *)(v1 - 32) + 40));
  }
  return result;
}

uint64_t sub_1C618F5A0(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  sub_1C4DFEB14(a1 + 8, a2 + 8);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_1C4DFE394((_QWORD *)(a1 + 32), *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  sub_1C4DFE394((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  sub_1C4DFEB80((_QWORD *)(a1 + 80), *(const void **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 5);
  return a1;
}

uint64_t sub_1C618F630(uint64_t a1, char **a2, char **a3)
{
  _QWORD *v6;
  unsigned int *v7;
  char *v8;
  char *v9;
  int v10;
  unsigned int v11;
  unint64_t v13;

  v13 = 0;
  v6 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 48, &v13);
  v7 = (unsigned int *)&v6[6 * *(unsigned int *)(a1 + 8)];
  v8 = *a2;
  v9 = *a3;
  *(_QWORD *)v7 = v7 + 4;
  *((_QWORD *)v7 + 1) = 0x400000000;
  sub_1C6177054(v7, v8, v9);
  sub_1C618F6EC(a1, v6);
  v10 = v13;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v6;
  v11 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v11;
  *(_DWORD *)(a1 + 12) = v10;
  return (uint64_t)&v6[6 * v11 - 6];
}

void sub_1C618F6EC(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
  {
    v5 = *(_QWORD *)a1;
    v6 = 48 * v2;
    do
    {
      *a2 = a2 + 2;
      a2[1] = 0x400000000;
      if (*(_DWORD *)(v5 + 8))
        sub_1C614D378((uint64_t)a2, v5);
      v5 += 48;
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
    v7 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v7)
    {
      v8 = *(_QWORD *)a1;
      v9 = 48 * v7;
      do
      {
        v10 = *(void **)(v8 + v9 - 48);
        if ((void *)(v8 + v9 - 32) != v10)
          free(v10);
        v9 -= 48;
      }
      while (v9);
    }
  }
}

llvm::SmallPtrSetImplBase *sub_1C618F7A4(llvm::SmallPtrSetImplBase *this, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;

  *(_QWORD *)this = (char *)this + 32;
  *((_QWORD *)this + 1) = (char *)this + 32;
  *((_QWORD *)this + 2) = 4;
  *((_DWORD *)this + 6) = 0;
  if (a2 != a3)
  {
    v5 = a2;
    do
    {
      v6 = *v5++;
      sub_1C4774094(this, v6);
    }
    while (v5 != a3);
  }
  return this;
}

unsigned int *sub_1C618F808(unsigned int *result, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t *v6;
  unsigned int *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;

  v6 = a2;
  v7 = result;
  if (a2 == a4)
  {
    v8 = 0;
  }
  else
  {
    v8 = 0;
    v9 = a2;
    do
    {
      ++v8;
      v10 = v9 + 1;
      while (v10 != a3)
      {
        v11 = *v10++;
        if (v11 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v9 = v10 - 1;
          goto LABEL_8;
        }
      }
      v9 = a3;
LABEL_8:
      ;
    }
    while (v9 != a4);
  }
  v12 = result[2];
  if (v8 + v12 > (unint64_t)result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8 + v12, 8);
    v12 = v7[2];
  }
  if (v6 != a4)
  {
    v13 = (unint64_t *)(*(_QWORD *)v7 + 8 * v12);
    do
    {
      v15 = *v6;
      v14 = v6 + 1;
      *v13 = v15;
      while (v14 != a3)
      {
        v16 = *v14++;
        if (v16 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v6 = v14 - 1;
          goto LABEL_18;
        }
      }
      v6 = a3;
LABEL_18:
      ++v13;
    }
    while (v6 != a4);
  }
  v7[2] = v12 + v8;
  return result;
}

void sub_1C618F8F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[25];

  v12[24] = *MEMORY[0x1E0C80C00];
  sub_1C618F9D0((uint64_t)&v9, a2);
  sub_1C618F9D0((uint64_t)&v5, a3);
  sub_1C618F9D0(a1, (uint64_t)&v9);
  sub_1C618F9D0(a1 + 304, (uint64_t)&v5);
  if (v7 != &v8)
    free(v7);
  if (v6 != v5)
    free(v6);
  if (v11 != v12)
    free(v11);
  if (v10 != v9)
    free(v10);
}

uint64_t sub_1C618F9D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase(a1, (void *)(a1 + 32), 8, (uint64_t *)a2);
  *(_QWORD *)(v4 + 96) = v4 + 112;
  v5 = v4 + 96;
  *(_QWORD *)(v5 + 8) = 0x800000000;
  if (*(_DWORD *)(a2 + 104))
    sub_1C4E1B24C(v5, (uint64_t *)(a2 + 96));
  return a1;
}

unint64_t sub_1C618FA28(unint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;
  _QWORD v10[3];

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  v4 = (_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 104) = 0x800000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a2);
  v5 = *(_QWORD *)(a2 + 32);
  v10[0] = a2;
  v10[1] = v5;
  v10[2] = sub_1C618F3A4;
  v6 = sub_1C4DC1E54((uint64_t)v4, (unint64_t)v10);
  v7 = *v4 + 24 * *(unsigned int *)(a1 + 104);
  v8 = *(_OWORD *)v6;
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 + 16);
  *(_OWORD *)v7 = v8;
  ++*(_DWORD *)(a1 + 104);
  sub_1C618FAE4(a1);
  return a1;
}

unint64_t sub_1C618FAE4(unint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  uint64_t (*v5)(_QWORD);
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned int v11;
  _QWORD v12[3];

  v1 = (_QWORD *)(result + 96);
  v2 = *(_QWORD *)(result + 96) + 24 * *(unsigned int *)(result + 104);
  v3 = *(_QWORD **)(v2 - 16);
  if (v3 != *(_QWORD **)(*(_QWORD *)(v2 - 24) + 40))
  {
    v4 = result;
    do
    {
      v5 = *(uint64_t (**)(_QWORD))(v2 - 8);
      *(_QWORD *)(v2 - 16) = v3 + 1;
      v6 = v5(*v3);
      result = (unint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)v4, v6);
      if (v7)
      {
        v8 = *(_QWORD *)(v6 + 32);
        v12[0] = v6;
        v12[1] = v8;
        v12[2] = sub_1C618F3A4;
        result = sub_1C4DC1E54((uint64_t)v1, (unint64_t)v12);
        v9 = *(_QWORD *)(v4 + 96) + 24 * *(unsigned int *)(v4 + 104);
        v10 = *(_OWORD *)result;
        *(_QWORD *)(v9 + 16) = *(_QWORD *)(result + 16);
        *(_OWORD *)v9 = v10;
        v11 = *(_DWORD *)(v4 + 104) + 1;
        *(_DWORD *)(v4 + 104) = v11;
      }
      else
      {
        v11 = *(_DWORD *)(v4 + 104);
      }
      v2 = *v1 + 24 * v11;
      v3 = *(_QWORD **)(v2 - 16);
    }
    while (v3 != *(_QWORD **)(*(_QWORD *)(v2 - 24) + 40));
  }
  return result;
}

const void **sub_1C618FBD4(const void **a1, llvm::SmallPtrSetImplBase *a2)
{
  llvm::SmallPtrSetImplBase *v4;
  uint64_t v5;

  v4 = llvm::SmallPtrSetImplBase::SmallPtrSetImplBase((llvm::SmallPtrSetImplBase *)a1, a1 + 4, a2);
  *((_QWORD *)v4 + 12) = (char *)v4 + 112;
  v5 = (uint64_t)v4 + 96;
  *(_QWORD *)(v5 + 8) = 0x800000000;
  if (*((_DWORD *)a2 + 26))
    sub_1C4E1B3A4(v5, (uint64_t *)a2 + 12);
  return a1;
}

unsigned int *sub_1C618FC28(unsigned int *result, uint64_t a2, uint64_t *__src, uint64_t *a4)
{
  uint64_t *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 8 * v8 == a2)
    return sub_1C618A450(result, __src, a4);
  v9 = (a2 - v7) >> 3;
  v10 = (char *)a4 - (char *)__src;
  v11 = a4 - __src;
  if (v8 + v11 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8 + v11, 8);
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v12 = (_QWORD *)(v7 + 8 * v9);
  v13 = (_BYTE *)(v7 + 8 * v8);
  v14 = (v13 - (_BYTE *)v12) >> 3;
  if (v14 >= v11)
  {
    result = sub_1C6177054(v6, &v13[-8 * v11], (char *)(v7 + 8 * v8));
    if (&v13[-8 * v11] != (_BYTE *)v12)
      result = (unsigned int *)memmove(&v12[v11], v12, &v13[-8 * v11] - (_BYTE *)v12);
    if (v5 != a4)
      return (unsigned int *)memmove(v12, v5, (char *)a4 - (char *)v5);
  }
  else
  {
    v15 = v8 + (v10 >> 3);
    v6[2] = v15;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 8 * v15 - 8 * v14), v12, v13 - (_BYTE *)v12);
      do
      {
        v16 = *v5++;
        *v12++ = v16;
        --v14;
      }
      while (v14);
    }
    if (v5 != a4)
      return (unsigned int *)memcpy(v13, v5, (char *)a4 - (char *)v5);
  }
  return result;
}

BOOL llvm::DivergenceAnalysisImpl::markDivergent(llvm::DivergenceAnalysisImpl *this, const llvm::Value *a2)
{
  const llvm::Value *v4;
  uint64_t v5;
  uint64_t v6;
  const llvm::Value *v8;
  _QWORD v9[2];
  char v10;

  v8 = 0;
  v9[0] = a2;
  if (sub_1C4E1CB18((uint64_t *)this + 9, v9, &v8))
  {
    v4 = v8;
    v5 = *((_QWORD *)this + 9);
    v6 = *((unsigned int *)this + 22);
  }
  else
  {
    v5 = *((_QWORD *)this + 9);
    v6 = *((unsigned int *)this + 22);
    v4 = (const llvm::Value *)(v5 + 8 * v6);
  }
  if (v4 != (const llvm::Value *)(v5 + 8 * v6))
    return 0;
  v8 = a2;
  sub_1C61904FC((uint64_t)this + 96, (uint64_t *)&v8, (uint64_t)v9);
  return v10 != 0;
}

BOOL llvm::DivergenceAnalysisImpl::inRegion(llvm::DivergenceAnalysisImpl *this, const llvm::Instruction *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *((_QWORD *)a2 + 5);
  if (!v2)
    return 0;
  v3 = *((_QWORD *)this + 1);
  if (!v3)
    return *(_QWORD *)(v2 + 56) == *(_QWORD *)this;
  v4 = sub_1C477672C(v3 + 56, v2);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = 72;
  if (v5 == *(_QWORD *)(v3 + 56))
    v6 = 76;
  return v4 != (_QWORD *)(v5 + 8 * *(unsigned int *)(v3 + v6));
}

BOOL llvm::DivergenceAnalysisImpl::isDivergent(llvm::DivergenceAnalysisImpl *this, const llvm::Value *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const llvm::Value *v8;

  v7 = 0;
  v8 = a2;
  if (sub_1C4E1CB18((uint64_t *)this + 12, &v8, &v7))
  {
    v3 = v7;
    v4 = *((_QWORD *)this + 12);
    v5 = *((unsigned int *)this + 28);
  }
  else
  {
    v4 = *((_QWORD *)this + 12);
    v5 = *((unsigned int *)this + 28);
    v3 = v4 + 8 * v5;
  }
  return v3 != v4 + 8 * v5;
}

uint64_t llvm::DivergenceAnalysis::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  const llvm::DominatorTree *v6;
  const llvm::PostDominatorTree *v7;
  uint64_t *v8;
  _QWORD *v9;

  v6 = (const llvm::DominatorTree *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1)+ 8);
  v7 = (const llvm::PostDominatorTree *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::PostDominatorTreeAnalysis::Key, a1)+ 8);
  v8 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1) + 8);
  v9 = (_QWORD *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::TargetIRAnalysis::Key, a1) + 8);
  return llvm::DivergenceInfo::DivergenceInfo(a3, a1, v6, v7, v8, v9, 0);
}

_QWORD *llvm::DivergenceAnalysisPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;
  llvm::raw_ostream *v7;
  size_t v8;
  char *Name;
  size_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  llvm::Value *v15;
  llvm::Value *v16;
  llvm::raw_ostream *v17;
  char *v18;
  llvm::raw_ostream *v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t *v22;
  llvm::Value *v23;
  llvm::raw_ostream *v24;
  size_t v25;
  char *v26;
  size_t v27;
  void *v28;
  uint64_t v29;
  llvm::Value *v30;
  llvm::raw_ostream *v31;
  char *v32;
  llvm::raw_ostream *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v40;
  _BYTE v41[24];
  _BYTE *v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  _QWORD v47[3];
  _QWORD *v48;
  __int128 v49;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DivergenceAnalysis::Key, (uint64_t)a2);
  v7 = sub_1C4816AD8(*a1, "'Divergence Analysis' for function '");
  Name = llvm::Value::getName(a2);
  v10 = v8;
  v11 = (void *)*((_QWORD *)v7 + 4);
  if (v8 <= *((_QWORD *)v7 + 3) - (_QWORD)v11)
  {
    if (v8)
    {
      memcpy(v11, Name, v8);
      *((_QWORD *)v7 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v7, Name, v8);
  }
  sub_1C4816AD8(v7, "':\n");
  if (*(_BYTE *)(ResultImpl + 16) || *(_DWORD *)(*(_QWORD *)(ResultImpl + 32) + 104))
  {
    v12 = ResultImpl + 8;
    v13 = sub_1C485F330((uint64_t)a2);
    if ((llvm::Value *)v13 != v14)
    {
      v15 = (llvm::Value *)v13;
      v16 = v14;
      do
      {
        v17 = *a1;
        if (sub_1C6190408(v12, (uint64_t)v15))
          v18 = "DIVERGENT: ";
        else
          v18 = "           ";
        sub_1C4816AD8(v17, v18);
        v19 = *a1;
        llvm::Value::print(v15, *a1, 0);
        sub_1C4816AD8(v19, "\n");
        v15 = (llvm::Value *)((char *)v15 + 40);
      }
      while (v15 != v16);
    }
    v20 = (_QWORD *)*((_QWORD *)a2 + 10);
    if (v20 != (_QWORD *)((char *)a2 + 72))
    {
      v21 = &v44;
      while (1)
      {
        v22 = v21;
        v23 = v20 ? (llvm::Value *)(v20 - 3) : 0;
        v24 = sub_1C4816AD8(*a1, "\n           ");
        v26 = llvm::Value::getName(v23);
        v27 = v25;
        v28 = (void *)*((_QWORD *)v24 + 4);
        if (v25 <= *((_QWORD *)v24 + 3) - (_QWORD)v28)
        {
          if (v25)
          {
            memcpy(v28, v26, v25);
            *((_QWORD *)v24 + 4) += v27;
          }
        }
        else
        {
          llvm::raw_ostream::write(v24, v26, v25);
        }
        sub_1C4816AD8(v24, ":\n");
        llvm::BasicBlock::instructionsWithoutDebug(v23, 1, &v46);
        v43 = v46;
        if (v48)
        {
          v21 = v22;
          if (v48 == v47)
          {
            v45 = (uint64_t)v22;
            (*(void (**)(_QWORD *, uint64_t *))(v47[0] + 24))(v47, v22);
          }
          else
          {
            v45 = (*(uint64_t (**)(void))(*v48 + 16))();
          }
        }
        else
        {
          v45 = 0;
          v21 = v22;
        }
        v40 = v49;
        if (v51)
        {
          if (v51 == v50)
          {
            v42 = v41;
            (*(void (**)(_QWORD *, _BYTE *))(v50[0] + 24))(v50, v41);
          }
          else
          {
            v42 = (_BYTE *)(*(uint64_t (**)(void))(*v51 + 16))();
          }
        }
        else
        {
          v42 = 0;
        }
LABEL_21:
        v29 = v43;
        while (v29 != v40)
        {
          if (v29)
            v30 = (llvm::Value *)(v29 - 24);
          else
            v30 = 0;
          v31 = *a1;
          if (sub_1C6190408(v12, (uint64_t)v30))
            v32 = "DIVERGENT:     ";
          else
            v32 = "               ";
          sub_1C4816AD8(v31, v32);
          v33 = *a1;
          llvm::Value::print(v30, *a1, 0);
          sub_1C4816AD8(v33, "\n");
          while (1)
          {
            v29 = *(_QWORD *)(v43 + 8);
            *(_QWORD *)&v43 = v29;
            if (v29 == *((_QWORD *)&v43 + 1))
              break;
            if (!v45)
              sub_1C485C2F0();
            if ((*(unsigned int (**)(void))(*(_QWORD *)v45 + 48))())
              goto LABEL_21;
          }
        }
        v34 = v42;
        if (v42 == v41)
          break;
        if (v42)
        {
          v35 = 5;
          goto LABEL_36;
        }
LABEL_37:
        v36 = (_QWORD *)v45;
        if ((uint64_t *)v45 == v21)
        {
          v36 = v21;
          v37 = 4;
        }
        else
        {
          if (!v45)
            goto LABEL_40;
          v37 = 5;
        }
        (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_40:
        sub_1C619047C(&v46);
        v20 = (_QWORD *)v20[1];
        if (v20 == (_QWORD *)((char *)a2 + 72))
          return llvm::InstCountPass::run(a4);
      }
      v34 = v41;
      v35 = 4;
LABEL_36:
      (*(void (**)(void))(*v34 + 8 * v35))();
      goto LABEL_37;
    }
  }
  return llvm::InstCountPass::run(a4);
}

BOOL sub_1C6190408(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 8))
    return 1;
  v3 = *(_QWORD *)(a1 + 24);
  v7 = 0;
  v8 = a2;
  if (sub_1C4E1CB18((uint64_t *)(v3 + 96), &v8, &v7))
  {
    v4 = v7;
    v5 = *(_QWORD *)(v3 + 96);
    v6 = *(unsigned int *)(v3 + 112);
  }
  else
  {
    v5 = *(_QWORD *)(v3 + 96);
    v6 = *(unsigned int *)(v3 + 112);
    v4 = v5 + 8 * v6;
  }
  return v4 != v5 + 8 * v6;
}

_QWORD *sub_1C619047C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[5];
  if (v5 == a1 + 2)
  {
    v6 = 4;
    v5 = a1 + 2;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t sub_1C61904FC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C4E1CB18((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C4E1CBB4(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

uint64_t sub_1C6190580(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = sub_1C614F7B0((uint64_t *)a2, a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C614F84C(a2, (uint64_t)a3, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

_QWORD *sub_1C619060C(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[15];
  if (v2)
  {
    a1[16] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[12], 8);
  MEMORY[0x1CAA32FB4](a1[9], 8);
  MEMORY[0x1CAA32FB4](a1[4], 8);
  return a1;
}

uint64_t llvm::createDomPrinterPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C4E1DC48(v1);
}

uint64_t llvm::createDomOnlyPrinterPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C4E1DD24(v1);
}

uint64_t llvm::createDomViewerPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C4E1DE10(v1);
}

uint64_t llvm::createDomOnlyViewerPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C4E1DEEC(v1);
}

uint64_t llvm::createPostDomPrinterPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C4E1DFD8(v1);
}

uint64_t llvm::createPostDomOnlyPrinterPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C4E1E0C4(v1);
}

uint64_t llvm::createPostDomViewerPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C4E1E1B4(v1);
}

uint64_t llvm::createPostDomOnlyViewerPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C4E1E2A0(v1);
}

void sub_1C61907A0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  uint64_t v5;
  _OWORD v6[4];
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  sub_1C4E1FBCC((uint64_t)&v11, *(_QWORD *)(*(_QWORD *)a1 + 48));
  v7 = 0;
  __p = 0;
  memset(v6, 0, sizeof(v6));
  v3 = (char *)v6 + 8;
  v4 = (char *)v6 + 8;
  v5 = 8;
  v9 = 0;
  v10 = 0;
  sub_1C4E1F928((uint64_t)&v11, (uint64_t)&v3, a2);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v4 != v3)
    free(v4);
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v12 != v11)
    free(v12);
}

void sub_1C6190858(uint64_t a1, _BYTE *a2, llvm::Value *a3)
{
  char *v4;
  char v5;

  if (a3)
  {
    if (*a2)
      sub_1C4DCA780(a3, (_QWORD *)a1);
    else
      sub_1C4DCA9C4(a3, (void (*)(uint64_t, void (***)(llvm::raw_ostream *__hidden), llvm::Value *))sub_1C617F190, (uint64_t)&v5, (void (*)(uint64_t, std::string *, unsigned int *, std::string::size_type))sub_1C617F19C, (uint64_t)sub_1C617F158, (std::string *)a1);
  }
  else
  {
    v4 = (char *)operator new(0x20uLL);
    *(_QWORD *)a1 = v4;
    *(_OWORD *)(a1 + 8) = xmmword_1C640C690;
    strcpy(v4, "Post dominance root node");
  }
}

void sub_1C619090C(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  _OWORD v6[4];
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;

  if (a2)
  {
    sub_1C4E1FBCC((uint64_t)&v11, a2);
  }
  else
  {
    v15 = 0;
    v16 = 0;
    memset(v14, 0, sizeof(v14));
    v11 = &v14[8];
    v12 = &v14[8];
    v13 = 8;
    v17 = 0;
    v18 = 0;
  }
  v7 = 0;
  __p = 0;
  memset(v6, 0, sizeof(v6));
  v3 = (char *)v6 + 8;
  v4 = (char *)v6 + 8;
  v5 = 8;
  v9 = 0;
  v10 = 0;
  sub_1C4E1F928((uint64_t)&v11, (uint64_t)&v3, a1);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v4 != v3)
    free(v4);
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v12 != v11)
    free(v12);
}

void llvm::DomTreeUpdater::recalculate(llvm::DomTreeUpdater *this, llvm::Function *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*((_BYTE *)this + 304))
  {
    *((_WORD *)this + 216) = 257;
    llvm::DomTreeUpdater::forceFlushDeletedBB(this);
    v4 = *((_QWORD *)this + 36);
    if (v4)
    {
      *(_QWORD *)(v4 + 56) = a2;
      llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(v4);
    }
    v5 = *((_QWORD *)this + 37);
    if (v5)
    {
      *(_QWORD *)(v5 + 80) = a2;
      llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(v5);
    }
    *((_WORD *)this + 216) = 0;
    v6 = *((unsigned int *)this + 2);
    *((_QWORD *)this + 34) = v6;
    *((_QWORD *)this + 35) = v6;
    llvm::DomTreeUpdater::dropOutOfDateUpdates((uint64_t)this);
  }
  else
  {
    v7 = *((_QWORD *)this + 36);
    if (v7)
    {
      *(_QWORD *)(v7 + 56) = a2;
      llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,false>>(v7);
    }
    v8 = *((_QWORD *)this + 37);
    if (v8)
    {
      *(_QWORD *)(v8 + 80) = a2;
      llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::BasicBlock,true>>(v8);
    }
  }
}

BOOL llvm::DomTreeUpdater::isBBPendingDeletion(llvm::DomTreeUpdater *this, llvm::BasicBlock *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  if (!*((_BYTE *)this + 304) || *((_DWORD *)this + 83) == *((_DWORD *)this + 84))
    return 0;
  v4 = sub_1C477672C((uint64_t)this + 312, (uint64_t)a2);
  v5 = *((_QWORD *)this + 40);
  v6 = 328;
  if (v5 == *((_QWORD *)this + 39))
    v6 = 332;
  return v4 != (_QWORD *)(v5 + 8 * *(unsigned int *)((char *)this + v6));
}

_QWORD *sub_1C6190B00(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v6 = a1[4];
  v2 = a1[8];
  if (v2)
  {
    result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v6);
    v4 = a1[3];
    if (v4)
    {
      if ((v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = llvm::ValueHandleBase::RemoveFromUseList(a1 + 1);
      a1[3] = 0;
    }
  }
  else
  {
    sub_1C485C2F0();
    return sub_1C6190B68(v5);
  }
  return result;
}

_QWORD *sub_1C6190B68(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = a1[3];
  if (v5 != -8192 && v5 != -4096 && v5 != 0)
    llvm::ValueHandleBase::RemoveFromUseList(a1 + 1);
  return a1;
}

uint64_t **sub_1C6190BD8(uint64_t a1, unint64_t *a2, _OWORD *a3)
{
  uint64_t **result;
  uint64_t **v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  result = (uint64_t **)sub_1C4E296BC(a1, &v11, a2);
  if (!*result)
  {
    v6 = result;
    v7 = operator new(0x30uLL);
    v7[2] = *a3;
    v8 = v11;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v8;
    *v6 = (uint64_t *)v7;
    v9 = **(_QWORD **)a1;
    if (v9)
    {
      *(_QWORD *)a1 = v9;
      v10 = *v6;
    }
    else
    {
      v10 = (uint64_t *)v7;
    }
    result = (uint64_t **)sub_1C4768E74(*(uint64_t **)(a1 + 8), v10);
    ++*(_QWORD *)(a1 + 16);
  }
  return result;
}

void llvm::initializeDominanceFrontierWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82D170);
  if (v2 != -1)
  {
    v5[0] = sub_1C4E2AC30;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82D170, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::DominanceFrontierWrapperPass *llvm::DominanceFrontierWrapperPass::DominanceFrontierWrapperPass(llvm::DominanceFrontierWrapperPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::DominanceFrontierWrapperPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E8136E40;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = (char *)this + 72;
  *((_QWORD *)this + 8) = 0x100000000;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82D170);
  if (v2 != -1)
  {
    v6[0] = sub_1C4E2AC30;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82D170, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

void llvm::DominanceFrontierWrapperPass::releaseMemory(llvm::DominanceFrontierWrapperPass *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)this + 40);
  sub_1C61910D0((uint64_t)this + 32, *((_QWORD **)this + 5));
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
}

uint64_t llvm::DominanceFrontierWrapperPass::runOnFunction(char ****this, llvm::Function *a2)
{
  char **v3;
  char *v4;
  uint64_t v5;

  ((void (*)(char ****, llvm::Function *))(*this)[11])(this, a2);
  v3 = *this[1];
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != llvm::DominatorTreeWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), llvm::DominatorTreeWrapperPass::ID);
  llvm::ForwardDominanceFrontierBase<llvm::BasicBlock>::analyze((uint64_t)(this + 4), v5 + 32);
  return 0;
}

llvm::AnalysisUsage *llvm::DominanceFrontierWrapperPass::getAnalysisUsage(llvm::DominanceFrontierWrapperPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  return llvm::AnalysisUsage::addRequiredID(a2, llvm::DominatorTreeWrapperPass::ID);
}

llvm::Value *llvm::DominanceFrontierWrapperPass::print(llvm::DominanceFrontierWrapperPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  return llvm::DominanceFrontierBase<llvm::BasicBlock,false>::print((llvm::DominanceFrontierWrapperPass *)((char *)this + 32), a2);
}

uint64_t llvm::DominanceFrontierWrapperPass::dump(llvm::DominanceFrontierWrapperPass *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  return (*(uint64_t (**)(llvm::DominanceFrontierWrapperPass *, llvm *, _QWORD))(*(_QWORD *)this + 40))(this, v2, 0);
}

BOOL llvm::DominanceFrontier::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &llvm::DominanceFrontierAnalysis::Key;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::DominanceFrontierAnalysis::Key);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C4DAA3F8((uint64_t)v8) && !sub_1C4DAA49C((uint64_t)v8);
}

uint64_t **llvm::DominanceFrontierAnalysis::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;

  a3[1] = 0;
  *a3 = a3 + 1;
  a3[2] = 0;
  a3[3] = a3 + 5;
  a3[4] = 0x100000000;
  v4 = llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::DominatorTreeAnalysis::Key, a1) + 8;
  return llvm::ForwardDominanceFrontierBase<llvm::BasicBlock>::analyze((uint64_t)a3, v4);
}

_QWORD *llvm::DominanceFrontierPrinterPass::DominanceFrontierPrinterPass(_QWORD *this, llvm::raw_ostream *a2)
{
  *this = a2;
  return this;
}

_QWORD *llvm::DominanceFrontierPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::raw_ostream *v8;
  size_t v9;
  char *Name;
  size_t v11;
  void *v12;
  uint64_t ResultImpl;

  v8 = sub_1C4816AD8(*a1, "DominanceFrontier for function: ");
  Name = llvm::Value::getName(a2);
  v11 = v9;
  v12 = (void *)*((_QWORD *)v8 + 4);
  if (v9 <= *((_QWORD *)v8 + 3) - (_QWORD)v12)
  {
    if (v9)
    {
      memcpy(v12, Name, v9);
      *((_QWORD *)v8 + 4) += v11;
    }
  }
  else
  {
    llvm::raw_ostream::write(v8, Name, v9);
  }
  sub_1C4816AD8(v8, "\n");
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::DominanceFrontierAnalysis::Key, (uint64_t)a2);
  llvm::DominanceFrontierBase<llvm::BasicBlock,false>::print((llvm::Value *)(ResultImpl + 8), *a1);
  return llvm::InstCountPass::run(a4);
}

void sub_1C6191038(uint64_t a1)
{
  sub_1C6191084(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::DominanceFrontierWrapperPass *llvm::callDefaultCtor<llvm::DominanceFrontierWrapperPass>()
{
  llvm::DominanceFrontierWrapperPass *v0;

  v0 = (llvm::DominanceFrontierWrapperPass *)operator new();
  return llvm::DominanceFrontierWrapperPass::DominanceFrontierWrapperPass(v0);
}

void sub_1C6191084(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E8136E40;
  v2 = *(void **)(a1 + 56);
  if (v2 != (void *)(a1 + 72))
    free(v2);
  sub_1C61910D0(a1 + 32, *(_QWORD **)(a1 + 40));
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C61910D0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1C61910D0(a1, *a2);
    sub_1C61910D0(a1, a2[1]);
    sub_1C47655E8((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

char *llvm::getEHPersonalityName(int a1)
{
  return off_1E8136ED0[a1 - 1];
}

uint64_t llvm::getDefaultEHPersonality(llvm *this, const llvm::Triple *a2)
{
  return 2;
}

BOOL llvm::canSimplifyInvokeNoUnwind(llvm *this, const llvm::Function *a2)
{
  llvm::Value *PersonalityFn;
  const llvm::Value *v3;

  PersonalityFn = (llvm::Value *)llvm::Function::getPersonalityFn(this);
  return llvm::classifyEHPersonality(PersonalityFn, v3) - 9 < 0xFFFFFFFE;
}

uint64_t sub_1C619116C(uint64_t result, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = (uint64_t *)result;
  v4 = *(_QWORD *)result;
  if (*(_QWORD *)result > 7uLL)
  {
    if ((v4 & 4) == 0)
    {
      v5 = v4 & 0xFFFFFFFFFFFFFFF8;
      result = operator new();
      *(_QWORD *)result = result + 16;
      *(_QWORD *)(result + 8) = 0x400000000;
      *v3 = result | 4;
      v6 = result & 0xFFFFFFFFFFFFFFF8;
      v7 = *(unsigned int *)((result & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v7 >= *(_DWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 12))
      {
        v10 = result & 0xFFFFFFFFFFFFFFF8;
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(result & 0xFFFFFFFFFFFFFFF8, v6 + 16, v7 + 1, 8);
        v6 = v10;
        LODWORD(v7) = *(_DWORD *)(v10 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v5;
      ++*(_DWORD *)(v6 + 8);
      v4 = *v3;
    }
    v8 = v4 & 0xFFFFFFFFFFFFFFF8;
    v9 = *(unsigned int *)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v9 >= *(_DWORD *)(v8 + 12))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v8 + 16, v9 + 1, 8);
      LODWORD(v9) = *(_DWORD *)(v8 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v8 + 8 * v9) = a2;
    ++*(_DWORD *)(v8 + 8);
  }
  else
  {
    *(_QWORD *)result = a2 & 0xFFFFFFFFFFFFFFFBLL;
  }
  return result;
}

uint64_t *sub_1C619127C(uint64_t *a1)
{
  uint64_t v2;
  void **v3;

  v2 = *a1;
  if ((*a1 & 4) != 0)
  {
    v3 = (void **)(v2 & 0xFFFFFFFFFFFFFFF8);
    if ((v2 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      if (*v3 != v3 + 2)
        free(*v3);
      MEMORY[0x1CAA32FC0](v3, 0x1080C40ED926357);
    }
  }
  return a1;
}

_QWORD *sub_1C61912D8(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C61252B8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6191338((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C6191338(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4E2BA74(a1, v7);
  v9 = 0;
  sub_1C61252B8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t *sub_1C61913E4(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = result;
  result[1] = 0;
  v5 = *((unsigned int *)result + 4);
  if ((_DWORD)v5)
  {
    v6 = (_QWORD *)*result;
    v7 = 16 * v5;
    do
    {
      *v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 1;
    do
    {
      if ((*(v8 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v11 = 0;
        sub_1C61252B8(v4, v8 - 1, &v11);
        v10 = v11;
        *v11 = *(v8 - 1);
        v10[1] = *v8;
        *v8 = 0;
        ++*((_DWORD *)v4 + 2);
        result = sub_1C619127C(v8);
      }
      v9 = v8 + 1;
      v8 += 2;
    }
    while (v9 != a3);
  }
  return result;
}

llvm::raw_ostream *llvm::FunctionPropertiesInfo::print(llvm::FunctionPropertiesInfo *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v3;
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  llvm::raw_ostream *v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  llvm::raw_ostream *v23;
  llvm::raw_ostream *v24;
  llvm::raw_ostream *v25;

  v3 = sub_1C4816AD8(a2, "BasicBlockCount: ");
  v4 = llvm::raw_ostream::operator<<(v3, *(_QWORD *)this);
  v5 = sub_1C4816AD8(v4, "\n");
  v6 = sub_1C4816AD8(v5, "BlocksReachedFromConditionalInstruction: ");
  v7 = llvm::raw_ostream::operator<<(v6, *((_QWORD *)this + 1));
  v8 = sub_1C4816AD8(v7, "\n");
  v9 = sub_1C4816AD8(v8, "Uses: ");
  v10 = llvm::raw_ostream::operator<<(v9, *((_QWORD *)this + 2));
  v11 = sub_1C4816AD8(v10, "\n");
  v12 = sub_1C4816AD8(v11, "DirectCallsToDefinedFunctions: ");
  v13 = llvm::raw_ostream::operator<<(v12, *((_QWORD *)this + 3));
  v14 = sub_1C4816AD8(v13, "\n");
  v15 = sub_1C4816AD8(v14, "LoadInstCount: ");
  v16 = llvm::raw_ostream::operator<<(v15, *((_QWORD *)this + 4));
  v17 = sub_1C4816AD8(v16, "\n");
  v18 = sub_1C4816AD8(v17, "StoreInstCount: ");
  v19 = llvm::raw_ostream::operator<<(v18, *((_QWORD *)this + 5));
  v20 = sub_1C4816AD8(v19, "\n");
  v21 = sub_1C4816AD8(v20, "MaxLoopDepth: ");
  v22 = llvm::raw_ostream::operator<<(v21, *((_QWORD *)this + 6));
  v23 = sub_1C4816AD8(v22, "\n");
  v24 = sub_1C4816AD8(v23, "TopLevelLoopCount: ");
  v25 = llvm::raw_ostream::operator<<(v24, *((_QWORD *)this + 7));
  return sub_1C4816AD8(v25, "\n\n");
}

uint64_t llvm::FunctionPropertiesAnalysis::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v5;

  v5 = (uint64_t *)(llvm::AnalysisManager<llvm::Function>::getResultImpl(a2, &llvm::LoopAnalysis::Key, a1) + 8);
  return llvm::FunctionPropertiesInfo::getFunctionPropertiesInfo(a1, v5, a3);
}

_QWORD *llvm::FunctionPropertiesPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  size_t v10;
  char *Name;
  size_t v12;
  void *v13;
  llvm::raw_ostream *v14;
  uint64_t ResultImpl;

  v8 = sub_1C4816AD8(*a1, "Printing analysis results of CFA for function ");
  v9 = sub_1C4816AD8(v8, "'");
  Name = llvm::Value::getName(a2);
  v12 = v10;
  v13 = (void *)*((_QWORD *)v9 + 4);
  if (v10 <= *((_QWORD *)v9 + 3) - (_QWORD)v13)
  {
    if (v10)
    {
      memcpy(v13, Name, v10);
      *((_QWORD *)v9 + 4) += v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, Name, v10);
  }
  v14 = sub_1C4816AD8(v9, "':");
  sub_1C4816AD8(v14, "\n");
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::FunctionPropertiesAnalysis::Key, (uint64_t)a2);
  llvm::FunctionPropertiesInfo::print((llvm::FunctionPropertiesInfo *)(ResultImpl + 8), *a1);
  return llvm::InstCountPass::run(a4);
}

uint64_t *sub_1C61916E0(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  _DWORD *v5;
  int *v6;
  int *v7;
  uint64_t i;

  v4 = *a1 & 0xFFFFFFFFFFFFFFF8;
  if (v4)
  {
    if ((*(_BYTE *)v4 & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)(v4 + 8), 8);
    MEMORY[0x1CAA32FC0](v4, 0x1000C400BDB4DB4);
  }
  *a1 = *a2 & 7;
  v5 = (_DWORD *)(*a2 & 0xFFFFFFFFFFFFFFF8);
  if (v5)
  {
    v6 = (int *)operator new();
    v7 = v6;
    *(_QWORD *)v6 = 1;
    for (i = 2; i != 66; i += 4)
      *(_QWORD *)&v6[i] = -4096;
    sub_1C4E2F4A4(v6, v5);
    *a1 = *a1 & 7 | (unint64_t)v7;
  }
  return a1;
}

BOOL llvm::GlobalsAAResult::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;

  v4 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::GlobalsAA::Key);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  return v4 != (_QWORD *)(v5 + 8 * *v6);
}

uint64_t llvm::GlobalsAAResult::GlobalsAAResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  v4 = *(_QWORD *)(a3 + 24);
  if (v4)
  {
    if (v4 == a3)
    {
      *(_QWORD *)(a1 + 40) = a1 + 16;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 40) = v4;
      *(_QWORD *)(a3 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 0;
  }
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 8;
  *(_DWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 184;
  *(_QWORD *)(a1 + 160) = a1 + 184;
  *(_QWORD *)(a1 + 168) = 8;
  *(_DWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 320;
  *(_QWORD *)(a1 + 328) = a1 + 320;
  *(_QWORD *)(a1 + 336) = 0;
  return a1;
}

uint64_t llvm::GlobalsAAResult::analyzeModule@<X0>(llvm::Module *a1@<X0>, _QWORD *a2@<X1>, llvm::CallGraph *a3@<X2>, llvm::GlobalsAAResult *a4@<X8>)
{
  uint64_t DataLayout;
  _QWORD *v9;
  _QWORD *v10;
  void (**v11)(_QWORD *);
  llvm::Module *v12;
  _QWORD v14[3];
  _QWORD *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  DataLayout = llvm::Module::getDataLayout(a1);
  v9 = (_QWORD *)a2[3];
  if (v9)
  {
    if (v9 == a2)
    {
      v15 = v14;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v14);
    }
    else
    {
      v15 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
    }
  }
  else
  {
    v15 = 0;
  }
  llvm::GlobalsAAResult::GlobalsAAResult((uint64_t)a4, DataLayout, (uint64_t)v14);
  v10 = v15;
  if (v15 == v14)
  {
    v11 = (void (**)(_QWORD *))(v14[0] + 32);
    v10 = v14;
  }
  else
  {
    if (!v15)
      goto LABEL_7;
    v11 = (void (**)(_QWORD *))(*v15 + 40);
  }
  (*v11)(v10);
LABEL_7:
  llvm::GlobalsAAResult::CollectSCCMembership(a4, a3);
  llvm::GlobalsAAResult::AnalyzeGlobals(a4, a1);
  return llvm::GlobalsAAResult::AnalyzeCallGraph(a4, a3, v12);
}

_QWORD *llvm::GlobalsAA::run@<X0>(llvm::Module *a1@<X1>, uint64_t a2@<X2>, llvm::GlobalsAAResult *a3@<X8>)
{
  uint64_t v6;
  uint64_t ResultImpl;
  _QWORD *result;
  uint64_t (**v9)(_QWORD *);
  _QWORD v10[3];
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, (uint64_t)a1)+ 8);
  v10[0] = &off_1E8137010;
  v10[1] = v6;
  v11 = v10;
  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a2, &llvm::CallGraphAnalysis::Key, (uint64_t)a1);
  llvm::GlobalsAAResult::analyzeModule(a1, v10, (llvm::CallGraph *)(ResultImpl + 8), a3);
  result = v11;
  if (v11 == v10)
  {
    v9 = (uint64_t (**)(_QWORD *))(v10[0] + 32);
    result = v10;
    return (_QWORD *)(*v9)(result);
  }
  if (v11)
  {
    v9 = (uint64_t (**)(_QWORD *))(*v11 + 40);
    return (_QWORD *)(*v9)(result);
  }
  return result;
}

unsigned int *sub_1C6191AC8(unsigned int *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C4926838(result);
    }
  }
  return result;
}

void llvm::initializeGlobalsAAWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82D178);
  if (v2 != -1)
  {
    v5[0] = sub_1C4E2F094;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82D178, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::GlobalsAAWrapperPass *llvm::createGlobalsAAWrapperPass(llvm *this)
{
  llvm::GlobalsAAWrapperPass *v1;

  v1 = (llvm::GlobalsAAWrapperPass *)operator new();
  return llvm::GlobalsAAWrapperPass::GlobalsAAWrapperPass(v1);
}

llvm::GlobalsAAWrapperPass *llvm::GlobalsAAWrapperPass::GlobalsAAWrapperPass(llvm::GlobalsAAWrapperPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::GlobalsAAWrapperPass::ID;
  *((_DWORD *)this + 6) = 4;
  *(_QWORD *)this = &off_1E8136F48;
  *((_QWORD *)this + 4) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82D178);
  if (v2 != -1)
  {
    v6[0] = sub_1C4E2F094;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82D178, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

uint64_t llvm::GlobalsAAWrapperPass::runOnModule(llvm::GlobalsAAWrapperPass *this, llvm::Module *a2)
{
  llvm::GlobalsAAResult *v4;
  void **v5;
  void *v6;
  uint64_t v7;
  llvm::GlobalsAAResult *v8;
  void (**v9)(void);
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v4 = (llvm::GlobalsAAResult *)operator new();
  v11[0] = &off_1E8137058;
  v11[1] = this;
  v12 = v11;
  v5 = (void **)**((_QWORD **)this + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::CallGraphWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::CallGraphWrapperPass::ID);
  llvm::GlobalsAAResult::analyzeModule(a2, v11, *(llvm::CallGraph **)(v7 + 32), v4);
  v8 = (llvm::GlobalsAAResult *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v4;
  if (v8)
  {
    llvm::GlobalsAAResult::~GlobalsAAResult(v8);
    MEMORY[0x1CAA32FC0]();
  }
  if (v12 == v11)
  {
    v9 = (void (**)(void))(v11[0] + 32);
    goto LABEL_8;
  }
  if (v12)
  {
    v9 = (void (**)(void))(*v12 + 40);
LABEL_8:
    (*v9)();
  }
  return 0;
}

uint64_t llvm::GlobalsAAWrapperPass::doFinalization(llvm::GlobalsAAWrapperPass *this, llvm::Module *a2)
{
  llvm::GlobalsAAResult *v3;

  v3 = (llvm::GlobalsAAResult *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    llvm::GlobalsAAResult::~GlobalsAAResult(v3);
    MEMORY[0x1CAA32FC0]();
  }
  return 0;
}

llvm::AnalysisUsage *llvm::GlobalsAAWrapperPass::getAnalysisUsage(llvm::GlobalsAAWrapperPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  llvm::AnalysisUsage::addRequiredID(a2, llvm::CallGraphWrapperPass::ID);
  return llvm::AnalysisUsage::addRequiredID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
}

void sub_1C6191DE8(llvm::ModulePass *a1)
{
  sub_1C6191EAC(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6191E0C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v7 = 0;
  v3 = sub_1C4E2F138(a1, a2, &v7);
  v4 = a1 + 8;
  if (v3)
    return v7;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v5 = 16;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

llvm::GlobalsAAWrapperPass *llvm::callDefaultCtor<llvm::GlobalsAAWrapperPass>()
{
  llvm::GlobalsAAWrapperPass *v0;

  v0 = (llvm::GlobalsAAWrapperPass *)operator new();
  return llvm::GlobalsAAWrapperPass::GlobalsAAWrapperPass(v0);
}

void sub_1C6191EAC(llvm::ModulePass *this)
{
  llvm::GlobalsAAResult *v2;

  *(_QWORD *)this = &off_1E8136F48;
  v2 = (llvm::GlobalsAAResult *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    llvm::GlobalsAAResult::~GlobalsAAResult(v2);
    MEMORY[0x1CAA32FC0]();
  }
  llvm::ModulePass::~ModulePass(this);
}

void sub_1C6191EFC(char **a1, _WORD *a2)
{
  uint64_t v4;
  char *v5;

  v4 = sub_1C47AD050((uint64_t)&qword_1ED7F1770, 0, 0);
  byte_1ED7F17F0 = 0;
  qword_1ED7F17F8 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7F1800 = 0;
  qword_1ED7F1770 = (uint64_t)&unk_1E819E898;
  qword_1ED7F1808 = (uint64_t)&off_1E819E9A0;
  qword_1ED7F1810 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7F1828 = (uint64_t)&qword_1ED7F1810;
  llvm::cl::Option::setArgStr(v4, "enable-unsafe-globalsmodref-alias-results", 0x29uLL);
  v5 = *a1;
  byte_1ED7F17F0 = **a1;
  byte_1ED7F1801 = 1;
  byte_1ED7F1800 = *v5;
  word_1ED7F177A = (32 * (*a2 & 3)) | word_1ED7F177A & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F1770);
}

_QWORD *sub_1C6191FD0(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4E2F6FC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6192038(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *sub_1C6192038(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4E2FA68(a1, v6);
  v8 = 0;
  sub_1C4E2F6FC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C61920E8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4E2F6FC(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

llvm::AnalysisUsage *llvm::GPUAAWrapperPass::getAnalysisUsage(llvm::GPUAAWrapperPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  llvm::AnalysisUsage::addRequiredID(a2, llvm::AssumptionCacheTracker::ID);
  return llvm::AnalysisUsage::addRequiredID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
}

llvm::GPUAAWrapperPass *llvm::createGPUAAWrapperPass(llvm *this)
{
  llvm::GPUAAWrapperPass *v1;

  v1 = (llvm::GPUAAWrapperPass *)operator new();
  return llvm::GPUAAWrapperPass::GPUAAWrapperPass(v1);
}

llvm::GPUAAWrapperPass *llvm::GPUAAWrapperPass::GPUAAWrapperPass(llvm::GPUAAWrapperPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::GPUAAWrapperPass::ID;
  *((_DWORD *)this + 6) = 4;
  *(_QWORD *)this = &off_1E81370A0;
  *((_QWORD *)this + 4) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82D180);
  if (v2 != -1)
  {
    v6[0] = sub_1C4E30B14;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82D180, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

void llvm::initializeGPUAAWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82D180);
  if (v2 != -1)
  {
    v5[0] = sub_1C4E30B14;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82D180, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

void sub_1C61922F8(llvm::ImmutablePass *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E81370A0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x60C4082687C62);
  llvm::ImmutablePass::~ImmutablePass(this);
}

void sub_1C6192344(llvm::ImmutablePass *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E81370A0;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x60C4082687C62);
  llvm::ImmutablePass::~ImmutablePass(this);
  JUMPOUT(0x1CAA32FC0);
}

llvm::GPUAAWrapperPass *llvm::callDefaultCtor<llvm::GPUAAWrapperPass>()
{
  llvm::GPUAAWrapperPass *v0;

  v0 = (llvm::GPUAAWrapperPass *)operator new();
  return llvm::GPUAAWrapperPass::GPUAAWrapperPass(v0);
}

void llvm::getHeatColor(double a1@<D0>, std::string *a2@<X8>)
{
  double v4;
  BOOL v5;
  double v6;
  const char *v7;
  std::string::size_type v8;

  if (a1 > 1.0)
    a1 = 1.0;
  v4 = a1 * 99.0;
  v5 = a1 < 0.0;
  v6 = 0.0;
  if (!v5)
    v6 = v4;
  v7 = &a3d50c3[8 * vcvtad_u64_f64(v6)];
  v8 = strlen(v7);
  std::string::__init(a2, v7, v8);
}

void llvm::IRSimilarity::IRInstructionMapper::convertToUnsignedVec(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  unint64_t *v16;
  char *v17;
  char *v18;
  uint64_t i;
  void *__p;
  char *v21;
  uint64_t v22;
  uint64_t v23;

  v7 = *(_QWORD *)(a2 + 48);
  v22 = 0;
  v23 = v7;
  v8 = a2 + 40;
  __p = 0;
  v21 = 0;
  v17 = 0;
  v18 = 0;
  for (i = 0; v7 != v8; v23 = v7)
  {
    if (v7)
      v9 = v7 - 24;
    else
      v9 = 0;
    v10 = sub_1C6192620(a1 + 88, v9);
    switch(v10)
    {
      case 2:
        *(_BYTE *)(a1 + 56) = 0;
        break;
      case 1:
        llvm::IRSimilarity::IRInstructionMapper::mapToIllegalUnsigned((unsigned int *)a1, &v23, (uint64_t)&__p, (uint64_t)&v17, 0);
        break;
      case 0:
        llvm::IRSimilarity::IRInstructionMapper::mapToLegalUnsigned(a1, &v23, (uint64_t)&__p, (uint64_t)&v17);
        break;
    }
    v7 = *(_QWORD *)(v7 + 8);
  }
  if (*(_BYTE *)(a1 + 56))
    llvm::IRSimilarity::IRInstructionMapper::mapToIllegalUnsigned((unsigned int *)a1, &v23, (uint64_t)&__p, (uint64_t)&v17, 1);
  v12 = v17;
  v11 = v18;
  if (v17 != v18)
  {
    v13 = *(uint64_t **)(a1 + 80);
    v14 = *v13;
    v15 = v17;
    do
    {
      v16 = *(unint64_t **)v15;
      v15 += 8;
      *v16 = v14 & 0xFFFFFFFFFFFFFFF8 | *v16 & 7;
      v16[1] = (unint64_t)v13;
      *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8) = v16;
      v14 = *v13 & 7 | (unint64_t)v16;
      *v13 = v14;
    }
    while (v15 != v11);
  }
  sub_1C4E36820(a3, *(_QWORD *)(a3 + 8), v12, v11, (v11 - v12) >> 3);
  sub_1C4E36A24(a4, a4[1], (char *)__p, v21, (v21 - (_BYTE *)__p) >> 2);
  if (v12)
    operator delete(v12);
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

uint64_t sub_1C6192620(uint64_t a1, uint64_t a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C6192648
                                          + 4 * byte_1C85F31D6[*(unsigned __int8 *)(a2 + 16) - 29]))(1);
}

uint64_t sub_1C6192648()
{
  return 0;
}

BOOL sub_1C6192650@<W0>(unsigned __int8 *a1@<X8>)
{
  return *a1 == 0;
}

uint64_t sub_1C6192660@<X0>(llvm::Instruction *a1@<X1>, uint64_t a2@<X8>)
{
  return sub_1C6193A6C(a2, a1);
}

uint64_t llvm::IRSimilarity::IRInstructionMapper::mapToLegalUnsigned(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  unint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _DWORD *v25;
  char *v26;
  llvm::IRSimilarity *v27;
  uint64_t v28;
  unsigned int v29[4];
  char v30;

  *(_BYTE *)(a1 + 56) = 0;
  if (*(_BYTE *)(a1 + 57))
    *(_BYTE *)(a1 + 58) = 1;
  *(_BYTE *)(a1 + 57) = 1;
  if (*a2)
    v8 = *a2 - 24;
  else
    v8 = 0;
  v9 = *(_QWORD *)(a1 + 80);
  v10 = sub_1C484358C(*(_QWORD *)(a1 + 64), 160, 3);
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v10 + 24) = v10 + 40;
  *(_QWORD *)(v10 + 32) = 0x400000000;
  *(_BYTE *)(v10 + 72) = 1;
  *(_BYTE *)(v10 + 76) = 0;
  *(_BYTE *)(v10 + 80) = 0;
  *(_BYTE *)(v10 + 88) = 0;
  *(_BYTE *)(v10 + 112) = 0;
  *(_QWORD *)(v10 + 120) = v10 + 136;
  *(_QWORD *)(v10 + 128) = 0x400000000;
  *(_QWORD *)(v10 + 152) = v9;
  llvm::IRSimilarity::IRInstructionData::initializeInstruction(v10);
  v17 = *(unint64_t **)(a4 + 8);
  if ((unint64_t)v17 >= *(_QWORD *)(a4 + 16))
  {
    v18 = sub_1C4ABDC28((void **)a4, v10);
  }
  else
  {
    *v17 = v10;
    v18 = v17 + 1;
  }
  *(_QWORD *)(a4 + 8) = v18;
  v19 = *a2;
  v20 = *a2 - 24;
  if (!*a2)
    v20 = 0;
  if (*(_BYTE *)(v20 + 16) == 30)
  {
    llvm::IRSimilarity::IRInstructionData::setBranchSuccessors((_QWORD *)v10, (uint64_t *)(a1 + 32));
    v19 = *a2;
  }
  v21 = v19 - 24;
  if (!v19)
    v21 = 0;
  if (*(_BYTE *)(v21 + 16) == 84)
  {
    llvm::IRSimilarity::IRInstructionData::setCalleeName((llvm::IRSimilarity::IRInstructionData *)v10, *(unsigned __int8 *)(a1 + 59), v11, v12, v13, v14, v15, v16);
    v19 = *a2;
  }
  if (v19)
    v22 = v19 - 24;
  else
    v22 = 0;
  if (*(_BYTE *)(v22 + 16) == 83)
    llvm::IRSimilarity::IRInstructionData::setPHIPredecessors((_QWORD *)v10, (uint64_t *)(a1 + 32));
  v23 = *(unsigned int *)(a1 + 4);
  v27 = (llvm::IRSimilarity *)v10;
  v28 = v23;
  sub_1C6193B44((uint64_t)v29, a1 + 8, &v27, &v28);
  result = *(unsigned int *)(*(_QWORD *)v29 + 8);
  v29[0] = *(_DWORD *)(*(_QWORD *)v29 + 8);
  if (v30)
    ++*(_DWORD *)(a1 + 4);
  v25 = *(_DWORD **)(a3 + 8);
  if ((unint64_t)v25 >= *(_QWORD *)(a3 + 16))
  {
    v26 = sub_1C4E36640((char **)a3, v29);
    result = v29[0];
  }
  else
  {
    *v25 = result;
    v26 = (char *)(v25 + 1);
  }
  *(_QWORD *)(a3 + 8) = v26;
  return result;
}

uint64_t llvm::IRSimilarity::IRInstructionMapper::mapToIllegalUnsigned(unsigned int *a1, _QWORD *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  _DWORD *v16;
  char *v17;
  int v18;

  *((_BYTE *)a1 + 57) = 0;
  if (*((_BYTE *)a1 + 56))
    return *a1;
  if ((a5 & 1) != 0)
  {
    v10 = *((_QWORD *)a1 + 10);
    v11 = sub_1C484358C(*((_QWORD *)a1 + 8), 160, 3);
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = v11 + 40;
    *(_QWORD *)(v11 + 32) = 0x400000000;
    *(_BYTE *)(v11 + 72) = 0;
    *(_BYTE *)(v11 + 76) = 0;
    *(_BYTE *)(v11 + 80) = 0;
    *(_BYTE *)(v11 + 88) = 0;
    *(_BYTE *)(v11 + 112) = 0;
    *(_QWORD *)(v11 + 120) = v11 + 136;
    *(_QWORD *)(v11 + 128) = 0x400000000;
    *(_QWORD *)(v11 + 152) = v10;
  }
  else
  {
    if (*a2)
      v12 = *a2 - 24;
    else
      v12 = 0;
    v13 = *((_QWORD *)a1 + 10);
    v11 = sub_1C484358C(*((_QWORD *)a1 + 8), 160, 3);
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = v12;
    *(_QWORD *)(v11 + 24) = v11 + 40;
    *(_QWORD *)(v11 + 32) = 0x400000000;
    *(_BYTE *)(v11 + 72) = 0;
    *(_BYTE *)(v11 + 76) = 0;
    *(_BYTE *)(v11 + 80) = 0;
    *(_BYTE *)(v11 + 88) = 0;
    *(_BYTE *)(v11 + 112) = 0;
    *(_QWORD *)(v11 + 120) = v11 + 136;
    *(_QWORD *)(v11 + 128) = 0x400000000;
    *(_QWORD *)(v11 + 152) = v13;
    llvm::IRSimilarity::IRInstructionData::initializeInstruction(v11);
  }
  v14 = *(unint64_t **)(a4 + 8);
  if ((unint64_t)v14 >= *(_QWORD *)(a4 + 16))
  {
    v15 = sub_1C4ABDC28((void **)a4, v11);
  }
  else
  {
    *v14 = v11;
    v15 = v14 + 1;
  }
  *(_QWORD *)(a4 + 8) = v15;
  *((_BYTE *)a1 + 56) = 1;
  v6 = *a1;
  *a1 = v6 - 1;
  v18 = v6;
  v16 = *(_DWORD **)(a3 + 8);
  if ((unint64_t)v16 >= *(_QWORD *)(a3 + 16))
  {
    v17 = sub_1C4E36640((char **)a3, &v18);
  }
  else
  {
    *v16 = v6;
    v17 = (char *)(v16 + 1);
  }
  *(_QWORD *)(a3 + 8) = v17;
  return v6;
}

uint64_t sub_1C61929B4(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C4DA97DC((uint64_t *)a2, a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C4E38190(a2, (uint64_t)a3, a3, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t llvm::IRSimilarity::IRSimilarityCandidate::compareCommutativeOperandMapping(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  int v19;
  _QWORD v20[2];
  int v21;
  uint64_t v22;
  _QWORD v23[3];

  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  v19 = 0;
  v18[0] = 0;
  v18[1] = 0;
  v4 = a1[1];
  v5 = *(_DWORD *)(v4 + 8);
  if (v5)
  {
    v6 = *(uint64_t **)a2[1];
    v7 = *(uint64_t **)v4;
    do
    {
      v8 = *a1;
      v9 = (uint64_t *)(*a1 + 24);
      v10 = *v7;
      v22 = 0;
      v23[0] = v10;
      if (sub_1C4E36534(v9, v23, &v22))
        v11 = v22;
      else
        v11 = *(_QWORD *)(v8 + 24) + 16 * *(unsigned int *)(v8 + 40);
      sub_1C4E38888((uint64_t)v23, (uint64_t)v20, (_DWORD *)(v11 + 8));
      v12 = *a2;
      v13 = (uint64_t *)(*a2 + 24);
      v14 = *v6;
      v22 = 0;
      v23[0] = v14;
      if (sub_1C4E36534(v13, v23, &v22))
        v15 = v22;
      else
        v15 = *(_QWORD *)(v12 + 24) + 16 * *(unsigned int *)(v12 + 40);
      sub_1C4E38888((uint64_t)v23, (uint64_t)v18, (_DWORD *)(v15 + 8));
      ++v7;
      ++v6;
      --v5;
    }
    while (v5);
    v4 = a1[1];
  }
  if ((sub_1C4E32C10((uint64_t *)(*a1 + 24), a1[2], v4, (uint64_t)v18) & 1) != 0)
    v16 = sub_1C4E32C10((uint64_t *)(*a2 + 24), a2[2], a2[1], (uint64_t)v20);
  else
    v16 = 0;
  MEMORY[0x1CAA32FB4](v18[0], 4);
  MEMORY[0x1CAA32FB4](v20[0], 4);
  return v16;
}

_QWORD *sub_1C6192D48(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];
  uint64_t v12;
  uint64_t v13;

  v2 = a2 + 24;
  v3 = *(_QWORD *)(a2 + 32);
  if (v3 != a2 + 24)
  {
    v4 = 0;
    v5 = (uint64_t)(result + 4);
    do
    {
      v6 = v3 - 56;
      if (!v3)
        v6 = 0;
      v7 = v6 + 72;
      v8 = *(_QWORD *)(v6 + 80);
      if (v8 == v6 + 72)
      {
        v10 = v4;
      }
      else
      {
        do
        {
          v9 = v8 - 24;
          if (!v8)
            v9 = 0;
          v10 = (v4 + 1);
          v12 = v9;
          v13 = v4;
          result = sub_1C4E358A8((uint64_t)v11, v5, &v12, &v13);
          v8 = *(_QWORD *)(v8 + 8);
          LODWORD(v4) = v10;
        }
        while (v8 != v7);
      }
      v3 = *(_QWORD *)(v3 + 8);
      v4 = v10;
    }
    while (v3 != v2);
  }
  return result;
}

uint64_t sub_1C6192E10(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  v3 = sub_1C4E36534((uint64_t *)(a1 + 24), &v5, &v6);
  result = 0;
  if (v3)
  {
    if (v6 != *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(a1 + 40))
      return *(unsigned int *)(v6 + 8) | 0x100000000;
  }
  return result;
}

void sub_1C6192E74(_DWORD *a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  int v6;
  void **v7;

  v2 = a1[2];
  if (v2 || a1[3])
  {
    v3 = a1[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      sub_1C4E38A5C(a1);
      return;
    }
    if (!(_DWORD)v3)
    {
LABEL_12:
      *((_QWORD *)a1 + 1) = 0;
      return;
    }
    v4 = 32 * v3;
    v5 = (void **)(*(_QWORD *)a1 + 8);
    while (1)
    {
      v6 = *((_DWORD *)v5 - 2);
      if (v6 == -2)
        goto LABEL_10;
      if (v6 != -1)
        break;
LABEL_11:
      v5 += 4;
      v4 -= 32;
      if (!v4)
        goto LABEL_12;
    }
    v7 = v5;
    sub_1C4E38968(&v7);
LABEL_10:
    *((_DWORD *)v5 - 2) = -1;
    goto LABEL_11;
  }
}

void sub_1C6192F28(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4[3];
  void ***v5;

  if (*(_BYTE *)(a1 + 320))
  {
    v2 = *(void ***)(a1 + 296);
    v3 = *(void ***)(a1 + 304);
    while (v3 != v2)
    {
      v3 -= 3;
      v4[0] = v3;
      sub_1C4E38968(v4);
    }
    *(_QWORD *)(a1 + 304) = v2;
  }
  else
  {
    *(_QWORD *)(a1 + 296) = 0;
    *(_QWORD *)(a1 + 304) = 0;
    *(_QWORD *)(a1 + 312) = 0;
    memset(v4, 0, sizeof(v4));
    *(_BYTE *)(a1 + 320) = 1;
    v5 = v4;
    sub_1C4E365D0((void ***)&v5);
  }
}

uint64_t llvm::IRSimilarity::IRSimilarityIdentifier::findSimilarity(llvm::IRSimilarity::IRSimilarityIdentifier *this, llvm::Module *a2)
{
  void *__p;
  void *v6;
  uint64_t v7;
  void *v8[3];

  sub_1C6192F28((uint64_t)this);
  *((_WORD *)this + 140) = *((_WORD *)this + 144);
  *((_BYTE *)this + 251) = *((_BYTE *)this + 290);
  *((_WORD *)this + 141) = *(_WORD *)((char *)this + 291);
  memset(v8, 0, sizeof(v8));
  __p = 0;
  v6 = 0;
  v7 = 0;
  llvm::IRSimilarity::IRSimilarityIdentifier::populateMapper((uint64_t)this, (uint64_t)a2, (uint64_t)v8, (char **)&__p);
  llvm::IRSimilarity::IRSimilarityIdentifier::findCandidates((uint64_t)this, v8, &__p);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
  if (v8[0])
    operator delete(v8[0]);
  return (uint64_t)this + 296;
}

void llvm::initializeIRSimilarityIdentifierWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82D488);
  if (v2 != -1)
  {
    v5[0] = sub_1C4E34FC4;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82D488, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::IRSimilarityIdentifierWrapperPass *llvm::IRSimilarityIdentifierWrapperPass::IRSimilarityIdentifierWrapperPass(llvm::IRSimilarityIdentifierWrapperPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::IRSimilarityIdentifierWrapperPass::ID;
  *((_DWORD *)this + 6) = 4;
  *(_QWORD *)this = &off_1E8137148;
  *((_QWORD *)this + 4) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82D488);
  if (v2 != -1)
  {
    v6[0] = sub_1C4E34FC4;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82D488, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

uint64_t llvm::IRSimilarityIdentifierWrapperPass::doInitialization(llvm::IRSimilarityIdentifierWrapperPass *this, llvm::Module *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = operator new();
  sub_1C6193750(v3, byte_1ED82D208 == 0, byte_1ED82D2C8 == 0, byte_1ED82D388, byte_1ED82D448 == 0);
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v3;
  if (v4)
  {
    v6 = sub_1C619386C(v4);
    MEMORY[0x1CAA32FC0](v6, 0x10B2C4033E05AA0);
  }
  return 0;
}

uint64_t llvm::IRSimilarityIdentifierWrapperPass::doFinalization(llvm::IRSimilarityIdentifierWrapperPass *this, llvm::Module *a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v3)
  {
    v5 = sub_1C619386C(v3);
    MEMORY[0x1CAA32FC0](v5, 0x10B2C4033E05AA0);
  }
  return 0;
}

uint64_t llvm::IRSimilarityIdentifierWrapperPass::runOnModule(llvm::IRSimilarity::IRSimilarityIdentifier **this, llvm::Module *a2)
{
  llvm::IRSimilarity::IRSimilarityIdentifier::findSimilarity(this[4], a2);
  return 0;
}

uint64_t llvm::IRSimilarityAnalysis::run@<X0>(llvm::Module *a1@<X1>, uint64_t a2@<X8>)
{
  llvm::IRSimilarity::IRSimilarityIdentifier *v3;

  v3 = (llvm::IRSimilarity::IRSimilarityIdentifier *)sub_1C6193750(a2, byte_1ED82D208 == 0, byte_1ED82D2C8 == 0, byte_1ED82D388, byte_1ED82D448 == 0);
  return llvm::IRSimilarity::IRSimilarityIdentifier::findSimilarity(v3, a1);
}

void sub_1C61932A4(llvm::ModulePass *a1)
{
  sub_1C6193910(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C61932C8(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

uint64_t sub_1C61932D4(int32x2_t *a1, _DWORD *a2)
{
  __int32 v2;
  int32x2_t v3;
  __int32 v4;
  uint64_t v5;
  int *v6;
  int v7;
  int v9;
  int v10;

  v2 = a1[2].i32[0];
  if (v2)
  {
    v3 = *a1;
    v4 = v2 - 1;
    LODWORD(v5) = (37 * *a2) & (v2 - 1);
    v6 = (int *)(*(_QWORD *)a1 + 4 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_3:
      *v6 = -2;
      a1[1] = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
      return 1;
    }
    v9 = 1;
    while (v7 != -1)
    {
      v10 = v5 + v9++;
      v5 = v10 & v4;
      v7 = *(_DWORD *)(*(_QWORD *)&v3 + 4 * v5);
      if (*a2 == v7)
      {
        v6 = (int *)(*(_QWORD *)&v3 + 4 * v5);
        goto LABEL_3;
      }
    }
  }
  return 0;
}

uint64_t sub_1C619335C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 2;
  if (a2)
  {
    *(_QWORD *)(a1 + 48) = sub_1C4DFEA3C((void **)(a1 + 40), &v4);
    sub_1C4E35998((_QWORD *)a1);
  }
  return a1;
}

__n128 *sub_1C61933BC(uint64_t a1, unsigned int a2, int a3, llvm::IRSimilarity::IRInstructionData *a4, llvm::IRSimilarity::IRInstructionData *a5)
{
  llvm::IRSimilarity::IRSimilarityCandidate *v6;
  __n128 *result;

  v6 = *(llvm::IRSimilarity::IRSimilarityCandidate **)(a1 + 8);
  if ((unint64_t)v6 >= *(_QWORD *)(a1 + 16))
    result = sub_1C4E35D8C((__n128 **)a1, a2, a3, a4, a5);
  else
    result = (__n128 *)((char *)llvm::IRSimilarity::IRSimilarityCandidate::IRSimilarityCandidate(v6, a2, a3, a4, a5)
                      + 120);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

__n128 sub_1C6193400(__n128 *a1, __n128 *a2)
{
  __n128 result;
  unint64_t v3;

  result = *a2;
  v3 = a2[1].n128_u64[0];
  *a1 = *a2;
  a1[1].n128_u64[1] = 0;
  a1[2].n128_u64[0] = 0;
  a1[1].n128_u64[0] = v3;
  a1[2].n128_u32[2] = 0;
  a1[1].n128_u64[1] = a2[1].n128_u64[1];
  a2[1].n128_u64[1] = 0;
  a1[2].n128_u32[0] = a2[2].n128_u32[0];
  a2[2].n128_u32[0] = 0;
  LODWORD(v3) = a1[2].n128_u32[1];
  a1[2].n128_u32[1] = a2[2].n128_u32[1];
  a2[2].n128_u32[1] = v3;
  LODWORD(v3) = a1[2].n128_u32[2];
  a1[2].n128_u32[2] = a2[2].n128_u32[2];
  a2[2].n128_u32[2] = v3;
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u32[0] = 0;
  a1[3].n128_u64[0] = a2[3].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a1[3].n128_u32[2] = a2[3].n128_u32[2];
  a2[3].n128_u32[2] = 0;
  LODWORD(v3) = a1[3].n128_u32[3];
  a1[3].n128_u32[3] = a2[3].n128_u32[3];
  a2[3].n128_u32[3] = v3;
  LODWORD(v3) = a1[4].n128_u32[0];
  a1[4].n128_u32[0] = a2[4].n128_u32[0];
  a2[4].n128_u32[0] = v3;
  a1[4].n128_u64[1] = 0;
  a1[5].n128_u64[0] = 0;
  a1[5].n128_u32[2] = 0;
  a1[4].n128_u64[1] = a2[4].n128_u64[1];
  a2[4].n128_u64[1] = 0;
  a1[5].n128_u32[0] = a2[5].n128_u32[0];
  a2[5].n128_u32[0] = 0;
  LODWORD(v3) = a1[5].n128_u32[1];
  a1[5].n128_u32[1] = a2[5].n128_u32[1];
  a2[5].n128_u32[1] = v3;
  LODWORD(v3) = a1[5].n128_u32[2];
  a1[5].n128_u32[2] = a2[5].n128_u32[2];
  a2[5].n128_u32[2] = v3;
  a1[6].n128_u64[0] = 0;
  a1[6].n128_u64[1] = 0;
  a1[7].n128_u32[0] = 0;
  a1[6].n128_u64[0] = a2[6].n128_u64[0];
  a2[6].n128_u64[0] = 0;
  a1[6].n128_u32[2] = a2[6].n128_u32[2];
  a2[6].n128_u32[2] = 0;
  LODWORD(v3) = a1[6].n128_u32[3];
  a1[6].n128_u32[3] = a2[6].n128_u32[3];
  a2[6].n128_u32[3] = v3;
  LODWORD(v3) = a1[7].n128_u32[0];
  a1[7].n128_u32[0] = a2[7].n128_u32[0];
  a2[7].n128_u32[0] = v3;
  return result;
}

_QWORD *sub_1C6193514(_QWORD *a1)
{
  MEMORY[0x1CAA32FB4](a1[12], 4);
  MEMORY[0x1CAA32FB4](a1[9], 4);
  MEMORY[0x1CAA32FB4](a1[6], 8);
  MEMORY[0x1CAA32FB4](a1[3], 8);
  return a1;
}

_DWORD *sub_1C6193564(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = result;
  v2 = result[2];
  if (v2 || result[3])
  {
    v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
      return sub_1C4E36100(result);
    if (!(_DWORD)v3)
    {
LABEL_12:
      *((_QWORD *)v1 + 1) = 0;
      return result;
    }
    v4 = *(_QWORD *)result;
    v5 = 32 * v3;
    while (1)
    {
      if (*(_DWORD *)v4 == -2)
        goto LABEL_10;
      if (*(_DWORD *)v4 != -1)
        break;
LABEL_11:
      v4 += 32;
      v5 -= 32;
      if (!v5)
        goto LABEL_12;
    }
    result = (_DWORD *)MEMORY[0x1CAA32FB4](*(_QWORD *)(v4 + 8), 4);
LABEL_10:
    *(_DWORD *)v4 = -1;
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1C6193608(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1C4DFEB14(a1 + 24, (uint64_t)a2 + 24);
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  sub_1C4DFEB14(a1 + 48, (uint64_t)(a2 + 3));
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_1C4E36094(a1 + 72, (uint64_t)a2 + 72);
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_1C4E36094(a1 + 96, (uint64_t)(a2 + 6));
  return a1;
}

uint64_t sub_1C6193698(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)result + 8);
    do
    {
      if (*((_DWORD *)v3 - 2) <= 0xFFFFFFFD)
        result = MEMORY[0x1CAA32FB4](*v3, 4);
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

_QWORD *sub_1C61936E8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

llvm::IRSimilarityIdentifierWrapperPass *llvm::callDefaultCtor<llvm::IRSimilarityIdentifierWrapperPass>()
{
  llvm::IRSimilarityIdentifierWrapperPass *v0;

  v0 = (llvm::IRSimilarityIdentifierWrapperPass *)operator new();
  return llvm::IRSimilarityIdentifierWrapperPass::IRSimilarityIdentifierWrapperPass(v0);
}

uint64_t sub_1C6193750(uint64_t a1, char a2, char a3, char a4, char a5)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x400000000;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 128;
  *(_QWORD *)(a1 + 120) = 0x400000000;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = a1 + 176;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  sub_1C6193804(a1 + 192, a1, a1 + 96);
  *(_BYTE *)(a1 + 288) = a2;
  *(_BYTE *)(a1 + 289) = a3;
  *(_BYTE *)(a1 + 290) = a4;
  *(_BYTE *)(a1 + 291) = a5;
  *(_BYTE *)(a1 + 292) = 0;
  *(_BYTE *)(a1 + 296) = 0;
  *(_BYTE *)(a1 + 320) = 0;
  return a1;
}

uint64_t sub_1C6193804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;

  *(_DWORD *)a1 = -3;
  *(_QWORD *)(a1 + 4) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 12) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a2;
  *(_QWORD *)(a1 + 72) = a3;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  v4 = sub_1C484358C(a3, 16, 3);
  *(_QWORD *)v4 = v4 | 4;
  *(_QWORD *)(v4 + 8) = v4;
  *(_QWORD *)(a1 + 80) = v4;
  return a1;
}

uint64_t sub_1C619386C(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 320))
  {
    v3 = (void **)(a1 + 296);
    sub_1C4E365D0(&v3);
    *(_BYTE *)(a1 + 320) = 0;
  }
  sub_1C61938D8(a1 + 192);
  sub_1C4926A50(a1 + 96);
  sub_1C4926AE8(a1 + 96);
  sub_1C4E3631C(a1);
  return sub_1C4926AE8(a1);
}

uint64_t sub_1C61938D8(uint64_t a1)
{
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 32), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

void sub_1C6193910(llvm::ModulePass *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E8137148;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = sub_1C619386C(v2);
    MEMORY[0x1CAA32FC0](v3, 0x10B2C4033E05AA0);
  }
  llvm::ModulePass::~ModulePass(this);
}

uint64_t sub_1C6193964(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v11;
  unsigned int v12;

  v5 = *(_QWORD *)a1;
  v6 = *(unsigned int *)(a1 + 8);
  if (*(_QWORD *)a1 + 8 * v6 == a2)
  {
    v11 = *a3;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 8);
      v5 = *(_QWORD *)a1;
      v6 = *(unsigned int *)(a1 + 8);
    }
    *(_QWORD *)(v5 + 8 * v6) = v11;
    v12 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 8) = v12;
    return *(_QWORD *)a1 + 8 * v12 - 8;
  }
  else
  {
    v7 = (a2 - v5) >> 3;
    if (v6 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 8);
      v5 = *(_QWORD *)a1;
      v6 = *(unsigned int *)(a1 + 8);
    }
    v8 = (uint64_t *)(v5 + 8 * v7);
    *(_QWORD *)(v5 + 8 * v6) = *(_QWORD *)(v5 + 8 * v6 - 8);
    v9 = *(_QWORD *)a1 + 8 * v6 - 8;
    if ((uint64_t *)v9 != v8)
    {
      memmove(v8 + 1, v8, v9 - (_QWORD)v8);
      LODWORD(v6) = *(_DWORD *)(a1 + 8);
    }
    *(_DWORD *)(a1 + 8) = v6 + 1;
    *v8 = *a3;
  }
  return (uint64_t)v8;
}

uint64_t sub_1C6193A6C(uint64_t a1, llvm::Instruction *this)
{
  uint64_t v4;
  int v6;

  v4 = *((_QWORD *)this - 4);
  if (!v4 || *(_BYTE *)(v4 + 16) || *(_QWORD *)(v4 + 24) != *((_QWORD *)this + 9))
    return sub_1C4E36710(a1, (uint64_t)this);
  v6 = *(_DWORD *)(v4 + 36);
  if (v6 <= 196)
  {
    if ((v6 - 56) < 3)
      return 2;
    if (!v6)
      return sub_1C4E36710(a1, (uint64_t)this);
  }
  return llvm::Instruction::isLifetimeStartOrEnd(this)
      || (sub_1C4E36790((uint64_t)this) & 1) != 0
      || *(_BYTE *)(a1 + 2) == 0;
}

uint64_t sub_1C6193B44(uint64_t a1, uint64_t a2, llvm::IRSimilarity **a3, _DWORD *a4)
{
  uint64_t result;
  const llvm::IRSimilarity::IRInstructionData **v9;
  char v10;
  uint64_t v11;
  const llvm::IRSimilarity::IRInstructionData **v12;

  v12 = 0;
  result = sub_1C4E36C1C(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C6193F58(a2, a3, v12);
    v9 = (const llvm::IRSimilarity::IRInstructionData **)result;
    *(_QWORD *)result = *a3;
    *(_DWORD *)(result + 8) = *a4;
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

unint64_t sub_1C6193BD8(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _OWORD v9[4];
  _OWORD v10[3];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  memset(v9, 0, sizeof(v9));
  v12 = sub_1C4D9B584();
  return sub_1C6193E08((char *)v9, v9, (char *)v10, *a1, a2, a3, a4);
}

unint64_t sub_1C6193C8C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _OWORD v14[7];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  memset(v14, 0, sizeof(v14));
  v10 = sub_1C4D9B584();
  v11 = *a1;
  v15 = v10;
  v13 = v11;
  return sub_1C6193E08((char *)&v13, v14, (char *)&v14[3] + 8, *a2, a3, a4, a5);
}

unint64_t sub_1C6193D54(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _OWORD v10[7];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  memset(v10, 0, sizeof(v10));
  v6 = sub_1C4D9B584();
  v7 = *a1;
  v11 = v6;
  v9 = v7;
  return sub_1C4E37B28((char *)&v9, 0, v10, (char *)&v10[3] + 8, a2, a3);
}

unint64_t sub_1C6193E08(char *a1, _QWORD *__dst, char *a3, uint64_t a4, uint64_t *a5, uint64_t *a6, uint64_t *a7)
{
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;

  v15 = 0;
  v12 = sub_1C4E37644(a1, &v15, __dst, (unint64_t)a3, a4);
  v16 = v15;
  v13 = sub_1C4E37644(a1, &v16, v12, (unint64_t)a3, *a5);
  return sub_1C4E37B28(a1, v16, v13, a3, a6, a7);
}

unint64_t sub_1C6193EA0(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9[7];

  v4 = sub_1C4D9B584();
  v5 = a2 - (_QWORD)a1;
  if ((unint64_t)(a2 - (_QWORD)a1) <= 0x40)
    return sub_1C49CE808(a1, a2 - (_QWORD)a1, v4);
  sub_1C4E378E0(a1, v4, v9);
  v7 = (v5 & 0xFFFFFFFFFFFFFFC0) - 64;
  if ((v5 & 0xFFFFFFFFFFFFFFC0) != 0x40)
  {
    v8 = a1 + 8;
    do
    {
      sub_1C4E37A08(v9, v8);
      v8 += 8;
      v7 -= 64;
    }
    while (v7);
  }
  if ((v5 & 0x3F) != 0)
    sub_1C4E37A08(v9, (_QWORD *)(a2 - 64));
  return sub_1C4E37DC8(v9, v5);
}

const llvm::IRSimilarity::IRInstructionData **sub_1C6193F58(uint64_t a1, llvm::IRSimilarity **a2, const llvm::IRSimilarity::IRInstructionData **a3)
{
  int v5;
  unsigned int v6;
  const llvm::IRSimilarity::IRInstructionData **v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4E380DC(a1, v6);
  v8 = 0;
  sub_1C4E36C1C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C6194004(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  const llvm::IRSimilarity::IRInstructionData **v9;
  const llvm::IRSimilarity::IRInstructionData **v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = 0;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((unint64_t)(*(_QWORD *)a2 + 1) >= 2)
    {
      v10 = 0;
      result = sub_1C4E36C1C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), (llvm::IRSimilarity **)a2, &v10);
      v9 = v10;
      *v10 = *(const llvm::IRSimilarity::IRInstructionData **)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

int *sub_1C61940B0(uint64_t *a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *result;
  int v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    result = (int *)(v2 + 4 * v4);
    v6 = *result;
    if (*a2 == *result)
      return result;
    v7 = 1;
    while (v6 != -1)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_DWORD *)(v2 + 4 * v4);
      if (*a2 == v6)
        return (int *)(v2 + 4 * v4);
    }
  }
  return (int *)(v2 + 4 * v3);
}

uint64_t *sub_1C6194120(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  void **v7;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    v5 = (void **)(v3 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
      {
        v7 = v5;
        sub_1C4E38968(&v7);
      }
      v5 += 4;
      v4 -= 32;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

BOOL llvm::RecurrenceDescriptor::areAllUsesIn(uint64_t a1, _QWORD *a2)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  _QWORD *v13;
  _BOOL8 result;
  BOOL v15;

  v3 = *(_DWORD *)(a1 + 20);
  if ((v3 & 0x40000000) != 0)
  {
    v5 = *(uint64_t **)(a1 - 8);
    v4 = v3 & 0x7FFFFFF;
  }
  else
  {
    v4 = v3 & 0x7FFFFFF;
    v5 = (uint64_t *)(a1 - 32 * v4);
  }
  if (!v4)
    return 1;
  v6 = 32 * v4 - 32;
  do
  {
    v8 = *v5;
    v5 += 4;
    v7 = v8;
    if (*(unsigned __int8 *)(v8 + 16) <= 0x1Bu)
      v9 = 0;
    else
      v9 = v7;
    v10 = sub_1C477672C((uint64_t)a2, v9);
    v11 = a2[1];
    if (v11 == *a2)
      v12 = (unsigned int *)a2 + 5;
    else
      v12 = (unsigned int *)(a2 + 2);
    v13 = (_QWORD *)(v11 + 8 * *v12);
    v15 = v10 == v13;
    result = v10 != v13;
    v15 = v15 || v6 == 0;
    v6 -= 32;
  }
  while (!v15);
  return result;
}

uint64_t llvm::RecurrenceDescriptor::isReductionPHI(uint64_t a1, uint64_t a2, _QWORD *a3, llvm::DemandedBits *a4, void *a5, uint64_t a6)
{
  uint64_t v12;
  char v13;
  _BOOL4 ValueAsBool;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t FnAttribute;

  v12 = *(_QWORD *)(**(_QWORD **)(a2 + 32) + 56);
  FnAttribute = llvm::Function::getFnAttribute(v12, "no-nans-fp-math", 0xFuLL);
  if (llvm::Attribute::getValueAsBool((llvm::Attribute *)&FnAttribute))
    v13 = 2;
  else
    v13 = 0;
  FnAttribute = llvm::Function::getFnAttribute(v12, "no-signed-zeros-fp-math", 0x17uLL);
  ValueAsBool = llvm::Attribute::getValueAsBool((llvm::Attribute *)&FnAttribute);
  v15 = 8;
  if (!ValueAsBool)
    v15 = 0;
  v16 = v15 | v13;
  v17 = 1;
  if ((llvm::RecurrenceDescriptor::AddReductionVar(a1, 1u, a2, v16, a3, a4, a5, a6) & 1) == 0
    && (llvm::RecurrenceDescriptor::AddReductionVar(a1, 2u, a2, v16, a3, a4, a5, a6) & 1) == 0
    && (llvm::RecurrenceDescriptor::AddReductionVar(a1, 3u, a2, v16, a3, a4, a5, a6) & 1) == 0
    && (llvm::RecurrenceDescriptor::AddReductionVar(a1, 4u, a2, v16, a3, a4, a5, a6) & 1) == 0
    && (llvm::RecurrenceDescriptor::AddReductionVar(a1, 5u, a2, v16, a3, a4, a5, a6) & 1) == 0
    && (llvm::RecurrenceDescriptor::AddReductionVar(a1, 7u, a2, v16, a3, a4, a5, a6) & 1) == 0
    && (llvm::RecurrenceDescriptor::AddReductionVar(a1, 6u, a2, v16, a3, a4, a5, a6) & 1) == 0
    && (llvm::RecurrenceDescriptor::AddReductionVar(a1, 9u, a2, v16, a3, a4, a5, a6) & 1) == 0
    && (llvm::RecurrenceDescriptor::AddReductionVar(a1, 8u, a2, v16, a3, a4, a5, a6) & 1) == 0
    && (llvm::RecurrenceDescriptor::AddReductionVar(a1, 0xFu, a2, v16, a3, a4, a5, a6) & 1) == 0
    && (llvm::RecurrenceDescriptor::AddReductionVar(a1, 0xBu, a2, v16, a3, a4, a5, a6) & 1) == 0
    && (llvm::RecurrenceDescriptor::AddReductionVar(a1, 0xAu, a2, v16, a3, a4, a5, a6) & 1) == 0
    && (llvm::RecurrenceDescriptor::AddReductionVar(a1, 0xDu, a2, v16, a3, a4, a5, a6) & 1) == 0
    && (llvm::RecurrenceDescriptor::AddReductionVar(a1, 0xCu, a2, v16, a3, a4, a5, a6) & 1) == 0
    && (llvm::RecurrenceDescriptor::AddReductionVar(a1, 0x10u, a2, v16, a3, a4, a5, a6) & 1) == 0)
  {
    return llvm::RecurrenceDescriptor::AddReductionVar(a1, 0xEu, a2, v16, a3, a4, a5, a6);
  }
  return v17;
}

uint64_t sub_1C6194570(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  int v14;

  v13 = *a2;
  v14 = 0;
  sub_1C6176E38((_DWORD *)a1, &v13, &v14, (uint64_t)&v11);
  v4 = v11;
  if (v12)
  {
    v10 = (unint64_t)*a2;
    v5 = *(_OWORD **)(a1 + 32);
    if ((unint64_t)v5 >= *(_QWORD *)(a1 + 40))
    {
      v6 = sub_1C4E3D7FC((void **)(a1 + 24), &v10);
    }
    else
    {
      *v5 = v10;
      v6 = v5 + 1;
    }
    *(_QWORD *)(a1 + 32) = v6;
    v8 = *(_QWORD *)(a1 + 24);
    v7 = (((unint64_t)v6 - v8) >> 4) - 1;
    *(_DWORD *)(v4 + 8) = v7;
  }
  else
  {
    v7 = *(_DWORD *)(v11 + 8);
    v8 = *(_QWORD *)(a1 + 24);
  }
  return v8 + 16 * v7 + 8;
}

void llvm::RecurrenceDescriptor::getRecurrenceIdentity(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

llvm::Value **sub_1C6194658(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  llvm::ConstantInt *v16;

  return llvm::ConstantInt::get(v16, 0, 0);
}

llvm::APFloatBase *sub_1C6194674(int a1, llvm::Type *a2, int a3, char a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  llvm::ConstantFP **v24;
  double v25;

  if ((a4 & 8) != 0)
    v25 = 0.0;
  else
    v25 = -0.0;
  return llvm::ConstantFP::get(v24, a2, v25);
}

uint64_t llvm::RecurrenceDescriptor::getOpcode(int a1)
{
  return dword_1C85F3330[a1 - 1];
}

uint64_t llvm::InductionDescriptor::getConstIntStepValue(llvm::InductionDescriptor *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (*(_WORD *)(v1 + 24))
    return 0;
  else
    return *(_QWORD *)(v1 + 32);
}

uint64_t sub_1C6194810(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, char a8, char a9, _QWORD *a10, int a11)
{
  uint64_t *v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 6;
  sub_1C4E3D39C((llvm::ValueHandleBase *)a1, a2);
  *(_QWORD *)(a1 + 64) = a1 + 96;
  *(_QWORD *)(a1 + 24) = a3;
  *(_DWORD *)(a1 + 32) = a4;
  *(_DWORD *)(a1 + 36) = a5;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 48) = a7;
  *(_BYTE *)(a1 + 56) = a8;
  *(_BYTE *)(a1 + 57) = a9;
  *(_QWORD *)(a1 + 72) = a1 + 96;
  *(_QWORD *)(a1 + 80) = 8;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 160) = a11;
  v18 = (uint64_t *)a10[1];
  if (v18 == (uint64_t *)*a10)
    v19 = (unsigned int *)a10 + 5;
  else
    v19 = (unsigned int *)(a10 + 2);
  v20 = *v19;
  v21 = &v18[v20];
  if ((_DWORD)v20)
  {
    v22 = 8 * v20;
    while ((unint64_t)*v18 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v18;
      v22 -= 8;
      if (!v22)
      {
        v18 = v21;
        break;
      }
    }
  }
  sub_1C4E3D1B8((llvm::SmallPtrSetImplBase *)(a1 + 64), v18, v21, v21);
  return a1;
}

llvm::ValueHandleBase *sub_1C6194908(llvm::ValueHandleBase *this)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)*((_QWORD *)this + 9);
  if (v2 != *((void **)this + 8))
    free(v2);
  v3 = *((_QWORD *)this + 2);
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList(this);
  return this;
}

uint64_t sub_1C619495C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = 0;
  if (!sub_1C4926528(a1, &v4, &v5) || v5 == *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16))
    return *(_QWORD *)(a1 + 32);
  else
    return *(_QWORD *)(a1 + 24) + 16 * *(unsigned int *)(v5 + 8);
}

uint64_t sub_1C61949C4(int **a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;

  if (*(_BYTE *)(a2 + 16) != 85)
    return 0;
  v2 = *(_DWORD *)(a2 + 20);
  if ((v2 & 0x40000000) != 0)
    v3 = *(uint64_t **)(a2 - 8);
  else
    v3 = (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  return sub_1C4E3D4C8(a1, *v3);
}

llvm::raw_ostream *llvm::GPUFunctionAnalysisResult::print(llvm::Value **this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v3;
  size_t v4;
  char *Name;
  size_t v6;
  void *v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  char *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  char *v14;
  llvm::raw_ostream *v15;

  v3 = sub_1C4816AD8(a2, "GPUFunctionAnalysisResult for ");
  Name = llvm::Value::getName(*this);
  v6 = v4;
  v7 = (void *)*((_QWORD *)v3 + 4);
  if (v4 <= *((_QWORD *)v3 + 3) - (_QWORD)v7)
  {
    if (v4)
    {
      memcpy(v7, Name, v4);
      *((_QWORD *)v3 + 4) += v6;
    }
  }
  else
  {
    llvm::raw_ostream::write(v3, Name, v4);
  }
  v8 = sub_1C4816AD8(v3, "\n");
  v9 = sub_1C4816AD8(v8, ".. HasMemorySync = ");
  if (*((_BYTE *)this + 8))
    v10 = "true";
  else
    v10 = "false";
  v11 = sub_1C4816AD8(v9, v10);
  v12 = sub_1C4816AD8(v11, "\n");
  v13 = sub_1C4816AD8(v12, ".. HasLoaderState = ");
  if (*((_BYTE *)this + 9))
    v14 = "true";
  else
    v14 = "false";
  v15 = sub_1C4816AD8(v13, v14);
  return sub_1C4816AD8(v15, "\n");
}

uint64_t llvm::GPUFunctionAnalysis::run(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2;
  LOWORD(v4) = 0;
  llvm::GPUFunctionAnalysisResult::analyze((llvm::GPUFunctionAnalysisResult *)&v3);
  return v3;
}

_QWORD *llvm::GPUFunctionInfoPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t ResultImpl;

  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::GPUFunctionAnalysis::Key, a2);
  llvm::GPUFunctionAnalysisResult::print((llvm::Value **)(ResultImpl + 8), *a1);
  return llvm::InstCountPass::run(a4);
}

llvm::raw_ostream *sub_1C6194B60(llvm *a1)
{
  llvm *v2;

  v2 = llvm::dbgs(a1);
  return llvm::GPUFunctionCallInfo::print((unsigned int **)a1, v2);
}

void llvm::initializeGPUFunctionCallInfoWrapperPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82D490);
  if (v2 != -1)
  {
    v5[0] = sub_1C4E3F5DC;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82D490, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::callDefaultCtor<llvm::GPUFunctionCallInfoWrapper>()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &llvm::GPUFunctionCallInfoWrapper::ID;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E81372D0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

void sub_1C6194C38(llvm::ModulePass *a1)
{
  sub_1C6194C64(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C6194C5C(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::GPUFunctionCallInfo::print(*(unsigned int ***)(a1 + 32), a2);
}

void sub_1C6194C64(llvm::ModulePass *this)
{
  _QWORD *v2;
  _QWORD *v3;
  llvm::ModulePass *v4;

  *(_QWORD *)this = &off_1E81372D0;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v4 = this;
    v3 = sub_1C4E3F79C(v2);
    MEMORY[0x1CAA32FC0](v3, 0x10E0C408DED98BELL);
    llvm::ModulePass::~ModulePass(v4);
  }
  else
  {
    llvm::ModulePass::~ModulePass(this);
  }
}

uint64_t llvm::createFunctionGroupInfoWrapperPass(llvm *this)
{
  char v1;
  uint64_t v2;

  v1 = (char)this;
  v2 = operator new();
  return sub_1C4E40220(v2, v1);
}

uint64_t llvm::callDefaultCtor<llvm::FunctionGroupInfoWrapperPass>()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C4E40220(v0, 0);
}

void sub_1C6194D28(uint64_t a1)
{
  sub_1C6194D5C(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6194D4C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 88))(*(_QWORD *)(a1 + 32));
}

void sub_1C6194D5C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &off_1E81373B8;
  sub_1C4E403B0((_QWORD **)(a1 + 40), 0);
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::ImmutablePass::~ImmutablePass((llvm::ImmutablePass *)a1);
}

uint64_t sub_1C6194DA8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t i;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  *(_QWORD *)a1 = &off_1E8137460;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 1;
  for (i = 40; i != 104; i += 16)
    *(_QWORD *)(a1 + i) = -4096;
  *(_QWORD *)(a1 + 104) = a1 + 120;
  *(_QWORD *)(a1 + 112) = 0x400000000;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_QWORD *)(a1 + 536) = a1 + 544;
  *(_QWORD *)(a1 + 560) = a1 + 576;
  *(_QWORD *)(a1 + 568) = 0x100000000;
  *(_DWORD *)(a1 + 600) = 128;
  v6 = (char *)operator new(0x4000uLL, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 584) = v6;
  *(_QWORD *)(a1 + 592) = 0;
  v7 = *(unsigned int *)(a1 + 600);
  if ((_DWORD)v7)
  {
    v8 = v7 << 7;
    v9 = v6 + 16;
    do
    {
      *v9 = 0;
      v9[1] = -4096;
      *(v9 - 2) = &off_1E81374F0;
      *(v9 - 1) = 2;
      v9[2] = 0;
      v9 += 16;
      v8 -= 128;
    }
    while (v8);
  }
  *(_BYTE *)(a1 + 608) = 0;
  *(_BYTE *)(a1 + 632) = 0;
  *(_DWORD *)(a1 + 664) = 128;
  v10 = (char *)operator new(0x1800uLL, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 648) = v10;
  *(_QWORD *)(a1 + 656) = 0;
  v11 = *(unsigned int *)(a1 + 664);
  if ((_DWORD)v11)
  {
    v12 = 48 * v11;
    v13 = v10 + 16;
    do
    {
      *v13 = 0;
      v13[1] = -4096;
      *(v13 - 2) = &off_1E8137518;
      *(v13 - 1) = 2;
      v13[2] = 0;
      v13 += 6;
      v12 -= 48;
    }
    while (v12);
  }
  *(_BYTE *)(a1 + 672) = 0;
  *(_BYTE *)(a1 + 696) = 0;
  *(_DWORD *)(a1 + 728) = 0;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_DWORD *)(a1 + 752) = 0;
  *(_OWORD *)(a1 + 760) = xmmword_1C85F3440;
  *(_BYTE *)(a1 + 776) = a3;
  return a1;
}

void sub_1C6194F2C(uint64_t a1)
{
  sub_1C4E42F54(a1);
  JUMPOUT(0x1CAA32FC0);
}

int32x2_t sub_1C6194F50(uint64_t a1, unint64_t a2, int32x2_t ****a3)
{
  uint64_t *v6;
  _QWORD *v7;
  uint64_t *v8;
  unint64_t v9;
  BOOL v10;
  _QWORD *v11;
  int32x2_t *v12;
  BOOL v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  unint64_t v29;
  BOOL v30;
  _QWORD *v31;
  uint64_t v32;

  v6 = (uint64_t *)(a1 + 544);
  v7 = *(_QWORD **)(a1 + 544);
  if (v7)
  {
    v8 = (uint64_t *)(a1 + 544);
    do
    {
      v9 = v7[4];
      v10 = v9 >= a2;
      if (v9 >= a2)
        v11 = v7;
      else
        v11 = v7 + 1;
      if (v10)
        v8 = v7;
      v7 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v8 != v6 && v8[4] <= a2)
    {
      v26 = v8[5];
      v8[5] = 0;
      v32 = v26;
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v26 + 48))(v26, a2);
      (*(void (**)(uint64_t, int32x2_t ****))(*(_QWORD *)v26 + 40))(v26, a3);
      v27 = (_QWORD *)*v6;
      if (*v6)
      {
        v28 = v6;
        do
        {
          v29 = v27[4];
          v30 = v29 >= a2;
          if (v29 >= a2)
            v31 = v27;
          else
            v31 = v27 + 1;
          if (v30)
            v28 = v27;
          v27 = (_QWORD *)*v31;
        }
        while (*v31);
        if (v28 != v6 && v28[4] <= a2)
          sub_1C6197F08((uint64_t **)(a1 + 536), v28);
      }
      sub_1C4E4D260((uint64_t *)(a1 + 536), (unint64_t)a3, (uint64_t)a3, &v32);
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
    }
  }
  v12 = (int32x2_t *)(a1 + 584);
  v32 = 0;
  if (sub_1C4E4B20C(*(_QWORD *)(a1 + 584), *(_DWORD *)(a1 + 600), a2, &v32))
    v13 = v32 == *(_QWORD *)(a1 + 584) + ((unint64_t)*(unsigned int *)(a1 + 600) << 7);
  else
    v13 = 1;
  if (!v13)
  {
    v14 = *(unsigned int *)(v32 + 88);
    if ((_DWORD)v14)
    {
      v15 = *(unint64_t **)(v32 + 80);
      v16 = &v15[v14];
      do
      {
        v17 = *v15;
        v32 = *v15;
        v18 = (_QWORD *)*v6;
        if (*v6)
        {
          v19 = v6;
          do
          {
            v20 = v18[4];
            v21 = v20 >= v17;
            if (v20 >= v17)
              v22 = v18;
            else
              v22 = v18 + 1;
            if (v21)
              v19 = v18;
            v18 = (_QWORD *)*v22;
          }
          while (*v22);
          if (v19 != v6 && v17 >= v19[4])
          {
            v23 = v19[5];
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v23 + 48))(v23, a2);
            (*(void (**)(uint64_t, int32x2_t ****))(*(_QWORD *)v23 + 40))(v23, a3);
          }
        }
        v24 = sub_1C4E4AA50((uint64_t)v12, a3);
        sub_1C4E486A0(v24, &v32);
        ++v15;
      }
      while (v15 != v16);
    }
  }
  return sub_1C4E4D1E0(v12, a2);
}

llvm::raw_ostream *sub_1C6195164(llvm::raw_ostream *result, llvm::raw_ostream *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::Value *v7;
  llvm::raw_ostream *v8;
  size_t v9;
  char *Name;
  size_t v11;
  void *v12;

  if (!a3)
    return sub_1C4816AD8(a2, "Cannot print function groups without a module\n");
  v4 = a3 + 24;
  v5 = *(_QWORD *)(a3 + 32);
  if (v5 != a3 + 24)
  {
    v6 = (uint64_t)result;
    do
    {
      if (v5)
        v7 = (llvm::Value *)(v5 - 56);
      else
        v7 = 0;
      v8 = sub_1C4816AD8(a2, "Function ");
      Name = llvm::Value::getName(v7);
      v11 = v9;
      v12 = (void *)*((_QWORD *)v8 + 4);
      if (v9 <= *((_QWORD *)v8 + 3) - (_QWORD)v12)
      {
        if (v9)
        {
          memcpy(v12, Name, v9);
          *((_QWORD *)v8 + 4) += v11;
        }
      }
      else
      {
        llvm::raw_ostream::write(v8, Name, v9);
      }
      sub_1C4816AD8(v8, "'s group contains:\n");
      result = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t, llvm::Value *))(*(_QWORD *)v6 + 24))(v6, v7);
      if (result)
        result = (llvm::raw_ostream *)(*(uint64_t (**)(llvm::raw_ostream *, llvm::raw_ostream *))(*(_QWORD *)result + 584))(result, a2);
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
  }
  return result;
}

void sub_1C61952A0(uint64_t a1)
{
  _QWORD v3[2];
  uint64_t v4;
  uint64_t v5;

  sub_1C4E42548(v3, (_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 32);
  sub_1C61954A4(v5, v4);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList(v3);
}

void sub_1C6195314(uint64_t a1, uint64_t a2)
{
  int32x2_t *v4;
  int v5;
  unint64_t v6;
  uint64_t v7;
  int32x2_t *v8;
  _QWORD v9[4];
  _QWORD v10[2];
  uint64_t v11;
  int32x2_t *v12;
  uint64_t v13;
  char v14[8];
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  sub_1C4E42548(v10, (_QWORD *)(a1 + 8));
  v4 = *(int32x2_t **)(a1 + 32);
  v9[3] = &off_1E81374F0;
  v12 = v4;
  v13 = 0;
  v5 = sub_1C4E41C80((uint64_t)*v4, v4[2].i32[0], v11, &v13);
  v6 = *(_QWORD *)v4 + ((unint64_t)v4[2].u32[0] << 7);
  if (v5)
    v7 = v13;
  else
    v7 = v6;
  if (*(_QWORD *)v12 + ((unint64_t)v12[2].u32[0] << 7) != v7)
  {
    sub_1C4E41D14((uint64_t)&v18, (unsigned int *)(v7 + 40));
    sub_1C6195584(v12, v7);
    v8 = v12;
    v13 = a2;
    sub_1C4E41D14((uint64_t)v14, &v18);
    sub_1C6195648((uint64_t)v9, (uint64_t)v8, (unsigned int *)&v13);
    if (v16 != &v17)
      free(v16);
    if ((v14[0] & 1) == 0)
      MEMORY[0x1CAA32FB4](v15, 8);
    if (v20 != v21)
      free(v20);
    if ((v18 & 1) == 0)
      MEMORY[0x1CAA32FB4](v19, 8);
  }
  if (v11 != -8192 && v11 != -4096)
  {
    if (v11)
      llvm::ValueHandleBase::RemoveFromUseList(v10);
  }
}

int32x2_t sub_1C61954A4(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  uint64_t (**v4)(llvm::CallbackVH *__hidden);
  uint64_t (**v5)(llvm::CallbackVH *__hidden);
  uint64_t v6;
  uint64_t (**v7)(llvm::CallbackVH *__hidden);
  uint64_t v8[2];
  uint64_t v9;
  uint64_t (*v10)(llvm::CallbackVH *__hidden);

  v7 = 0;
  if (sub_1C4E41C80(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v7))
  {
    v4 = v7;
    v5 = (uint64_t (**)(llvm::CallbackVH *__hidden))v7[10];
    if (v5 != v7 + 12)
      free(v5);
    if (((_BYTE)v4[5] & 1) == 0)
      MEMORY[0x1CAA32FB4](v4[6], 8);
    v8[1] = 0;
    v9 = -8192;
    v7 = &off_1E81374F0;
    v8[0] = 2;
    v10 = 0;
    sub_1C4D98DE0((unint64_t *)v4 + 1, v8);
    v6 = v9;
    v4[4] = v10;
    if (v6 != -8192 && v6 != -4096)
    {
      if (v6)
        llvm::ValueHandleBase::RemoveFromUseList(v8);
    }
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

int32x2_t sub_1C6195584(int32x2_t *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  int32x2_t result;
  uint64_t v7[2];
  uint64_t v8;
  uint64_t v9;

  v4 = *(void **)(a2 + 80);
  if (v4 != (void *)(a2 + 96))
    free(v4);
  if ((*(_BYTE *)(a2 + 40) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a2 + 48), 8);
  v7[1] = 0;
  v8 = -8192;
  v7[0] = 2;
  v9 = 0;
  sub_1C4D98DE0((unint64_t *)(a2 + 8), v7);
  v5 = v8;
  *(_QWORD *)(a2 + 32) = v9;
  if (v5 != -8192 && v5 != -4096 && v5)
    llvm::ValueHandleBase::RemoveFromUseList(v7);
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

double sub_1C6195648(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  double result;
  _QWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  uint64_t (**v16)(llvm::CallbackVH *__hidden);
  unint64_t v17;
  _QWORD v18[3];
  unsigned int v19[22];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a3;
  v7 = 2;
  v11[0] = 2;
  v11[1] = 0;
  v12 = v6;
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
  {
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)v11);
    v7 = v11[0];
    v6 = v12;
  }
  v13 = a2;
  v17 = v7 & 6;
  v18[0] = 0;
  v18[1] = v6;
  v9 = a2;
  if (v6 != -8192)
  {
    v9 = a2;
    if (v6 != -4096)
    {
      v9 = a2;
      if (v6)
      {
        v18[0] = *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)(v7 & 0xFFFFFFFFFFFFFFF8) = &v17;
        v17 = v7 & 0xFFFFFFFFFFFFFFFELL;
        if (v18[0])
          *(_QWORD *)v18[0] = *(_QWORD *)v18[0] & 7 | (unint64_t)v18;
        v9 = v13;
      }
    }
  }
  v16 = &off_1E81374F0;
  v18[2] = v9;
  sub_1C4E41D14((uint64_t)v19, a3 + 2);
  sub_1C61957CC((uint64_t)&v14, a2, (uint64_t *)&v16, v19);
  sub_1C6195880((uint64_t)&v16);
  if (v12 != -8192 && v12 != -4096 && v12)
    llvm::ValueHandleBase::RemoveFromUseList(v11);
  result = *(double *)&v14;
  *(_OWORD *)a1 = v14;
  *(_BYTE *)(a1 + 16) = v15;
  return result;
}

uint64_t sub_1C61957CC(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int *a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;

  v12 = 0;
  result = sub_1C4E41C80(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), a3[3], &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v9 = sub_1C4E42024((_DWORD *)a2, (uint64_t)a3, v12);
    sub_1C4D98DE0((unint64_t *)(v9 + 8), a3 + 1);
    *(_QWORD *)(v9 + 32) = a3[4];
    result = sub_1C4E41D14(v9 + 40, a4);
    v10 = 1;
  }
  v11 = *(_QWORD *)a2 + ((unint64_t)*(unsigned int *)(a2 + 16) << 7);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_1C6195880(uint64_t a1)
{
  void *v2;
  uint64_t v3;

  v2 = *(void **)(a1 + 80);
  if (v2 != (void *)(a1 + 96))
    free(v2);
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 48), 8);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList((_QWORD *)(a1 + 8));
  return a1;
}

void sub_1C61958EC(uint64_t a1)
{
  _QWORD v3[2];
  uint64_t v4;
  uint64_t v5;

  sub_1C4E42548(v3, (_QWORD *)(a1 + 8));
  v5 = *(_QWORD *)(a1 + 32);
  sub_1C6195A5C(v5, v4);
  if (v4 != -8192 && v4 != -4096 && v4 != 0)
    llvm::ValueHandleBase::RemoveFromUseList(v3);
}

int32x2_t *sub_1C6195960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  int32x2_t *result;
  unint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  int32x2_t *v10;
  uint64_t (**v11)(llvm::CallbackVH *__hidden);
  _QWORD v12[2];
  uint64_t v13;
  int32x2_t *v14;

  sub_1C4E42548(v12, (_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 32);
  v11 = &off_1E8137518;
  v14 = (int32x2_t *)v4;
  v8[0] = 0;
  if (sub_1C4E425B0(*(_QWORD *)v4, *(_DWORD *)(v4 + 16), v13, v8))
    v5 = (unint64_t *)v8[0];
  else
    v5 = (unint64_t *)(*(_QWORD *)v4 + 48 * *(unsigned int *)(v4 + 16));
  result = v14;
  if ((unint64_t *)(*(_QWORD *)v14 + 48 * v14[2].u32[0]) != v5)
  {
    v7 = v5[5];
    v5[5] = 0;
    sub_1C6195B28(result, v5);
    v9 = a2;
    v10 = (int32x2_t *)v7;
    sub_1C4E4263C((uint64_t)v8, (uint64_t)v14, (uint64_t)&v9);
    result = v10;
    if (v10)
      result = (int32x2_t *)(*(uint64_t (**)(int32x2_t *))(*(_QWORD *)v10 + 24))(v10);
  }
  if (v13 != -8192 && v13 != -4096)
  {
    if (v13)
      return (int32x2_t *)llvm::ValueHandleBase::RemoveFromUseList(v12);
  }
  return result;
}

int32x2_t sub_1C6195A5C(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  uint64_t (**v4)(llvm::CallbackVH *__hidden);
  uint64_t (*v5)(llvm::CallbackVH *__hidden);
  uint64_t v6;
  uint64_t (**v7)(llvm::CallbackVH *__hidden);
  uint64_t v8[2];
  uint64_t v9;
  uint64_t (*v10)(llvm::CallbackVH *__hidden);

  v7 = 0;
  if (sub_1C4E425B0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v7))
  {
    v4 = v7;
    v5 = v7[5];
    v7[5] = 0;
    if (v5)
      (*(void (**)(uint64_t (*)(llvm::CallbackVH *__hidden)))(*(_QWORD *)v5 + 24))(v5);
    v8[1] = 0;
    v9 = -8192;
    v7 = &off_1E8137518;
    v8[0] = 2;
    v10 = 0;
    sub_1C4D98DE0((unint64_t *)v4 + 1, v8);
    v6 = v9;
    v4[4] = v10;
    if (v6 != -8192 && v6 != -4096)
    {
      if (v6)
        llvm::ValueHandleBase::RemoveFromUseList(v8);
    }
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

int32x2_t sub_1C6195B28(int32x2_t *a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  int32x2_t result;
  uint64_t v8[2];
  uint64_t v9;
  unint64_t v10;

  v4 = a2[5];
  a2[5] = 0;
  if (v4)
    (*(void (**)(unint64_t))(*(_QWORD *)v4 + 24))(v4);
  v8[1] = 0;
  v9 = -8192;
  v8[0] = 2;
  v10 = 0;
  sub_1C4D98DE0(a2 + 1, v8);
  v5 = v9;
  a2[4] = v10;
  if (v5 != -8192 && v5 != -4096 && v5 != 0)
    llvm::ValueHandleBase::RemoveFromUseList(v8);
  result = vadd_s32(a1[1], (int32x2_t)0x1FFFFFFFFLL);
  a1[1] = result;
  return result;
}

uint64_t sub_1C6195BD8()
{
  return 3;
}

uint64_t sub_1C6195BE0()
{
  return 0;
}

uint64_t sub_1C6195BE8(uint64_t a1, int a2)
{
  return dword_1C85F34C4[a2];
}

uint64_t sub_1C6195BF8(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return 4;
}

char *sub_1C6195C18(uint64_t a1, int a2)
{
  return llvm::AGX01CommonRegisterInfo::RegNames[a2];
}

uint64_t sub_1C6195C28()
{
  return 4;
}

uint64_t sub_1C6195C30()
{
  return 4;
}

void sub_1C6195C3C()
{
  JUMPOUT(0x1CAA32FC0);
}

char *sub_1C6195C50(uint64_t a1, int a2)
{
  return llvm::AGX2CommonRegisterInfo::RegNames[a2];
}

void sub_1C6195C68()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C6195C80(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 104, &v5);
  sub_1C4E45E6C((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C6195CF0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

void sub_1C6195CF8()
{
  llvm::report_fatal_error((llvm *)"should not call subgroup_begin() on simple function group", (const char *)1);
}

void sub_1C6195D10()
{
  llvm::report_fatal_error((llvm *)"should not call subgroup_end() on simple function group", (const char *)1);
}

uint64_t sub_1C6195D28(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 560))(a1))
    return a1;
  else
    return 0;
}

unsigned int *sub_1C6195D58(uint64_t a1, __int128 *a2, uint64_t a3)
{
  *(_DWORD *)(a1 + 2432) = 0;
  return sub_1C61966D8((unsigned int *)(a1 + 2424), *(_QWORD *)(a1 + 2424), a2, &a2[a3]);
}

uint64_t sub_1C6195D78(uint64_t a1)
{
  return *(_QWORD *)(a1 + 2696);
}

_QWORD *sub_1C6195D90@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 4056);
  result = (_QWORD *)operator new();
  *result = &off_1E8137968;
  result[1] = v3;
  *a2 = result;
  return result;
}

_QWORD *sub_1C6195DD8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 4056) + 16 * *(unsigned int *)(a1 + 4064);
  result = (_QWORD *)operator new();
  *result = &off_1E8137968;
  result[1] = v3;
  *a2 = result;
  return result;
}

uint64_t sub_1C6195E28(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 4472) + 4 * a2);
}

uint64_t sub_1C6195E34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4532);
}

uint64_t sub_1C6195E40(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4533) = a2;
  return result;
}

uint64_t sub_1C6195E4C(uint64_t a1, unsigned int a2)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
  v5 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a1)(a1, 7, 0, 1, 3);
  v6 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a1)(a1, 6, 0, 1, 1);
  if (a2 < v4 || (v7 = a2 - v4 + v5 / v6, (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1) <= v7))
  {
    v11 = 0;
    v10 = 0;
    v9 = 0;
  }
  else
  {
    v8 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 320))(a1, v7);
    v9 = v8 & 0xFFFFFF00;
    v10 = v8;
    v11 = 0x100000000;
  }
  return v11 | v9 | v10;
}

BOOL sub_1C6195F28(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1) != 0;
}

uint64_t sub_1C6195F4C(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 160))(a1, 9) ^ 1;
}

uint64_t sub_1C6195F70(uint64_t (***a1)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t))
{
  return (**a1)(a1, 5, 0xFFFFFFFFLL, 1, 1);
}

uint64_t sub_1C6195F9C(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, 4);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 336))(a1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 48))(v6, v5);
  v8 = *(_QWORD *)(a1 + 2720);
  v9 = *(unsigned int *)(v8 + 4 * v5);
  if (v9 % v7)
    LODWORD(v9) = (v9 + (unint64_t)v7 - 1) / v7 * v7;
  v10 = v9 + v7 * a2;
  *(_DWORD *)(v8 + 4 * v5) = v10;
  *(_DWORD *)(a1 + 4528) = (v10 + 3) & 0xFFFFFFFC;
  return v9 / v7;
}

uint64_t sub_1C6196048(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 240))(a1);
  if ((result & 0xFF00000000) == 0)
  {
    v5 = 4 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 312))(a1);
    v6 = a2;
    *(_DWORD *)sub_1C4E49C50(a1 + 3792, &v6) = v5;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 328))(a1, 0);
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 328))(a1, 0);
  }
  return result;
}

void *sub_1C61960EC(unint64_t a1, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  llvm::Value **v7;
  uint64_t v8;
  size_t v9;
  char *Name;
  size_t v11;
  void *v12;
  void *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  size_t v18;
  char *v19;
  size_t v20;
  void *v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  unint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unsigned int v31;
  void *v32;
  llvm::raw_ostream *v33;
  size_t v34;
  char *v35;
  size_t v36;
  void *v37;
  llvm::raw_ostream *v38;
  llvm::raw_ostream *v39;
  llvm::raw_ostream *v40;
  char *v41;
  llvm::raw_ostream *v42;
  _QWORD v43[2];
  int v44;
  __int16 v45;
  char v46;

  v4 = sub_1C4816AD8(a2, "Simple function group @");
  v5 = llvm::raw_ostream::operator<<(v4, a1);
  sub_1C4816AD8(v5, ":\n");
  sub_1C4816AD8(a2, "  Functions: [ ");
  v6 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v6)
  {
    v7 = *(llvm::Value ***)(a1 + 88);
    v8 = 8 * v6;
    do
    {
      Name = llvm::Value::getName(*v7);
      v11 = v9;
      v12 = (void *)*((_QWORD *)a2 + 4);
      if (v9 <= *((_QWORD *)a2 + 3) - (_QWORD)v12)
      {
        if (v9)
        {
          memcpy(v12, Name, v9);
          *((_QWORD *)a2 + 4) += v11;
        }
      }
      else
      {
        llvm::raw_ostream::write(a2, Name, v9);
      }
      sub_1C4816AD8(a2, " ");
      ++v7;
      v8 -= 8;
    }
    while (v8);
  }
  result = sub_1C4816AD8(a2, "]\n");
  if (*(_DWORD *)(a1 + 4064))
  {
    result = sub_1C4816AD8(a2, "  GlobalValueLiteralConstantOffsetMap:\n");
    v14 = *(unsigned int *)(a1 + 4064);
    if ((_DWORD)v14)
    {
      v15 = *(_QWORD *)(a1 + 4056);
      v16 = v15 + 16 * v14;
      do
      {
        v17 = sub_1C4816AD8(a2, "    [");
        v19 = llvm::Value::getName(*(llvm::Value **)v15);
        v20 = v18;
        v21 = (void *)*((_QWORD *)v17 + 4);
        if (v18 <= *((_QWORD *)v17 + 3) - (_QWORD)v21)
        {
          if (v18)
          {
            memcpy(v21, v19, v18);
            *((_QWORD *)v17 + 4) += v20;
          }
        }
        else
        {
          llvm::raw_ostream::write(v17, v19, v18);
        }
        v22 = sub_1C4816AD8(v17, "]: ");
        result = sub_1C5E21910(v22, *(unsigned int *)(v15 + 8), 0, 0, 0);
        v23 = (_BYTE *)*((_QWORD *)v22 + 4);
        if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
        {
          result = llvm::raw_ostream::write(v22, 10);
        }
        else
        {
          *((_QWORD *)v22 + 4) = v23 + 1;
          *v23 = 10;
        }
        v15 += 16;
      }
      while (v15 != v16);
    }
  }
  if (*(_DWORD *)(a1 + 4480))
  {
    result = sub_1C4816AD8(a2, "  LiteralConstants:\n");
    if (*(_DWORD *)(a1 + 4480))
    {
      v24 = 0;
      do
      {
        if ((v24 & 7) != 0)
        {
          v25 = (_BYTE *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v25 >= *((_QWORD *)a2 + 3))
          {
            llvm::raw_ostream::write(a2, 32);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v25 + 1;
            *v25 = 32;
          }
        }
        else
        {
          sub_1C4816AD8(a2, "    ");
        }
        v43[0] = *(unsigned int *)(*(_QWORD *)(a1 + 4472) + 4 * v24);
        v43[1] = 0;
        v44 = 8;
        v45 = 1;
        v46 = 0;
        result = llvm::raw_ostream::operator<<(a2, (uint64_t)v43);
        if ((++v24 & 7) == 0 || v24 == *(_DWORD *)(a1 + 4480))
        {
          v26 = (_BYTE *)*((_QWORD *)a2 + 4);
          if ((unint64_t)v26 >= *((_QWORD *)a2 + 3))
          {
            result = llvm::raw_ostream::write(a2, 10);
          }
          else
          {
            *((_QWORD *)a2 + 4) = v26 + 1;
            *v26 = 10;
          }
        }
      }
      while (v24 < *(unsigned int *)(a1 + 4480));
    }
  }
  if (*(_DWORD *)(a1 + 4536) >= 2u)
  {
    sub_1C4816AD8(a2, "  RegisterOffsets:\n");
    result = sub_1C6196948((int *)(a1 + 4536));
    v27 = (uint64_t)result;
    v29 = v28;
    if ((*(_BYTE *)(a1 + 4536) & 1) != 0)
    {
      v30 = a1 + 4544;
      v31 = 64;
    }
    else
    {
      v30 = *(_QWORD *)(a1 + 4544);
      v31 = *(_DWORD *)(a1 + 4552);
    }
    v32 = (void *)(v30 + 24 * v31);
    if (v32 != result)
    {
      do
      {
        v33 = sub_1C4816AD8(a2, "    [");
        v35 = llvm::Value::getName(*(llvm::Value **)v27);
        v36 = v34;
        v37 = (void *)*((_QWORD *)v33 + 4);
        if (v34 <= *((_QWORD *)v33 + 3) - (_QWORD)v37)
        {
          if (v34)
          {
            memcpy(v37, v35, v34);
            *((_QWORD *)v33 + 4) += v36;
          }
        }
        else
        {
          llvm::raw_ostream::write(v33, v35, v34);
        }
        v38 = sub_1C4816AD8(v33, "]: { idx: ");
        sub_1C5E21910(v38, *(unsigned int *)(v27 + 8), 0, 0, 0);
        v39 = sub_1C4816AD8(v38, " size: ");
        sub_1C5E21910(v39, *(unsigned int *)(v27 + 12), 0, 0, 0);
        v40 = sub_1C4816AD8(v39, " type: ");
        v41 = sub_1C61969C8(*(_DWORD *)(v27 + 16));
        v42 = sub_1C4816AD8(v40, v41);
        result = sub_1C4816AD8(v42, " }\n");
        while (1)
        {
          v27 += 24;
          if (v27 == v29)
            break;
          if ((*(_QWORD *)v27 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_48;
        }
        v27 = v29;
LABEL_48:
        ;
      }
      while ((void *)v27 != v32);
    }
  }
  return result;
}

BOOL sub_1C6196570(uint64_t a1)
{
  _BOOL8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 72))(&v8);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 80))(&v7, a1);
  v6 = v8;
  v2 = sub_1C61969D8((uint64_t)&v6, a1);
  v3 = v7;
  v7 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = v6;
  v6 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v2;
}

_QWORD *sub_1C6196610(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if (v3 - 28 >= 3)
    v4 = 1 << (33 - v3);
  else
    v4 = 64;
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 5)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 5;
    goto LABEL_10;
  }
  if ((v2 & 1) != 0)
    return sub_1C4E41D80(v1, v5);
  if (v5 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C4E41D80(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v6 = (_QWORD *)result[1];
  v7 = &v6[v5];
  do
LABEL_10:
    *v6++ = -4096;
  while (v6 != v7);
  return result;
}

unsigned int *sub_1C61966D8(unsigned int *result, uint64_t a2, __int128 *__src, __int128 *a4)
{
  __int128 *v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  _BYTE *v13;
  unint64_t v14;
  unsigned int v15;
  __int128 v16;

  v5 = __src;
  v6 = result;
  v7 = *(_QWORD *)result;
  v8 = result[2];
  if (*(_QWORD *)result + 16 * v8 == a2)
    return sub_1C612E234(result, __src, a4);
  v9 = (a2 - v7) >> 4;
  v10 = (char *)a4 - (char *)__src;
  v11 = a4 - __src;
  if (v8 + v11 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8 + v11, 16);
    v7 = *(_QWORD *)v6;
    v8 = v6[2];
  }
  v12 = (_OWORD *)(v7 + 16 * v9);
  v13 = (_BYTE *)(v7 + 16 * v8);
  v14 = (v13 - (_BYTE *)v12) >> 4;
  if (v14 >= v11)
  {
    result = sub_1C6132E18(v6, &v13[-16 * v11], (char *)(v7 + 16 * v8));
    if (&v13[-16 * v11] != (_BYTE *)v12)
      result = (unsigned int *)memmove(&v12[v11], v12, &v13[-16 * v11] - (_BYTE *)v12);
    if (v5 != a4)
      return (unsigned int *)memmove(v12, v5, (char *)a4 - (char *)v5);
  }
  else
  {
    v15 = v8 + (v10 >> 4);
    v6[2] = v15;
    if (v9 != v8)
    {
      result = (unsigned int *)memcpy((void *)(v7 + 16 * v15 - 16 * v14), v12, v13 - (_BYTE *)v12);
      do
      {
        v16 = *v5++;
        *v12++ = v16;
        --v14;
      }
      while (v14);
    }
    if (v5 != a4)
      return (unsigned int *)memcpy(v13, v5, (char *)a4 - (char *)v5);
  }
  return result;
}

void sub_1C6196868()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C619687C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;

  result = (_QWORD *)operator new();
  v5 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8137968;
  result[1] = v5;
  *a2 = result;
  return result;
}

uint64_t sub_1C61968CC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1C61968D4(uint64_t result)
{
  *(_QWORD *)(result + 8) += 16;
  return result;
}

uint64_t sub_1C61968E8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
    return sub_1C4E49FDC(a1, a2, a3, a4);
  v5 = *(_QWORD *)a1 + 16 * v4;
  *(_QWORD *)v5 = a2;
  *(_DWORD *)(v5 + 8) = a3;
  *(_DWORD *)(v5 + 12) = a4;
  *(_DWORD *)(a1 + 8) = v4 + 1;
  return a1;
}

llvm::raw_ostream *sub_1C6196914(llvm::raw_ostream *a1, unsigned int a2)
{
  sub_1C5E21910(a1, a2, 0, 0, 0);
  return a1;
}

int *sub_1C6196948(int *a1)
{
  int v2;
  int *v3;
  unsigned int v4;
  int *result;
  unsigned int v6;
  int *v7;

  v2 = *a1;
  if (*a1 > 1)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 386;
LABEL_10:
      while ((*(_QWORD *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 6;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (int *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if (v6)
      {
        v7 = &result[6 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 64;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[6 * v4];
  }
  return result;
}

char *sub_1C61969C8(int a1)
{
  return off_1E8137D40[a1];
}

BOOL sub_1C61969D8(uint64_t a1, uint64_t a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  sub_1C4E40408(&v9, a1);
  sub_1C4E40408(&v8, a1 + 8);
  v4 = sub_1C4E4A890(&v9, &v8, a2);
  v5 = v8;
  v8 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = v9;
  v9 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return v4;
}

_QWORD *sub_1C6196A60(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_1E8137A28;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

void sub_1C6196AA0()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "insertMember";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6196B10()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "removeMember";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6196B80()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "getNumMembers";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6196BF0()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "hasMember";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

uint64_t sub_1C6196C60(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

uint64_t sub_1C6196C68(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(result + 24);
  if ((_DWORD)v3)
  {
    v6 = *(uint64_t **)(result + 16);
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 152))(v8, a2, a3);
      v7 -= 8;
    }
    while (v7);
  }
  return result;
}

void sub_1C6196CC0()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "global_resource_clear";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6196D30()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "getVIDMAList";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6196DA0()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "setVIDMAList";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6196E10()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "getVIRemap";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6196E80()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "setVIRemap";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

uint64_t sub_1C6196EF0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 224))(result);
  return result;
}

uint64_t sub_1C6196F08(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 232))(*(_QWORD *)(a1 + 64));
}

void sub_1C6196F18()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "getGlobalValueLiteralConstantOffset";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6196F88()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "global_value_literal_constant_offset_begin";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6196FF8()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "global_value_literal_constant_offset_end";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6197068()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "global_value_literal_constant_offset_empty";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C61970D8()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "bound_checking_uniform_alloc_begin";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6197148()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "bound_checking_uniform_alloc_end";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C61971B8()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "literal_constant_begin";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6197228()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "literal_constant_end";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

uint64_t sub_1C6197298(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  v1 = *(uint64_t **)(a1 + 16);
  v2 = *(unsigned int *)(a1 + 24);
  if (v2 >= 2)
  {
    v3 = v1 + 1;
    v4 = 8 * v2 - 8;
    v5 = v1 + 1;
    do
    {
      v6 = *v5++;
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v1 + 312))(*v1);
      if (v7 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 312))(v6))
        v1 = v3;
      v3 = v5;
      v4 -= 8;
    }
    while (v4);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v1 + 312))(*v1);
}

void sub_1C6197328()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "literal_constant_at";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

uint64_t sub_1C6197398(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 328))(*(_QWORD *)(a1 + 64));
}

void sub_1C61973A8()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "hasReadLiteralConstantLocation";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6197418()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "getSharedRegisterLiteralConstantBase";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6197488()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "getCPROGHasCalls";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C61974F8()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "setCPROGHasCalls";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

uint64_t sub_1C6197568(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 376))(v1);
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1C6197584(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 384))(result);
  return result;
}

void sub_1C619759C()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "setCommonStoreRegisterForGlobal";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C619760C()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "hasSharedRegisterAllocations";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C619767C()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "hasCoefficientRegisterAllocations";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C61976EC()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "getAllocatedCoeffRegisterBytes";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C619775C()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "getNumAvailableTexRegs";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C61977CC()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "allocateConstantLiteralForGlobalValue";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C619783C()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "allocateBoundCheckingUniform";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C61978AC()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "getNextAvailableResourceAllocationForSize";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C619791C()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "allocateResourceForSize";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

uint64_t sub_1C619798C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 408))(*(_QWORD *)(a1 + 64));
  if ((result & 1) == 0)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 64) + 496))(*(_QWORD *)(a1 + 64), a2, a3, a4);
  return result;
}

void sub_1C61979F8()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "allocateRegisterForDylib";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6197A68()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "allocateRegisterForBindlessSamplerBase";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

uint64_t sub_1C6197AD8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    v2 = **(_QWORD **)(a1 + 16);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 520))(v2);
}

void sub_1C6197AF8()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "resetAllocationForType";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6197B68()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "allocate32BitSharedRegisters";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6197BD8()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "emitGlobalConstant";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6197C48()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "emitExternGlobal";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6197CB8()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "getRepresentativeFunction";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6197D28()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "onGlobalValueErased";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

llvm::raw_ostream *sub_1C6197D98(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;

  sub_1C4816AD8(a2, "Complex function group with subgroups: {\n");
  v4 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = 8 * v4;
    do
    {
      v8 = (_BYTE *)*((_QWORD *)a2 + 4);
      if ((unint64_t)v8 >= *((_QWORD *)a2 + 3))
      {
        llvm::raw_ostream::write(a2, 91);
      }
      else
      {
        *((_QWORD *)a2 + 4) = v8 + 1;
        *v8 = 91;
      }
      sub_1C5E21910(a2, v5, 0, 0, 0);
      sub_1C4816AD8(a2, "]: ");
      (*(void (**)(_QWORD, llvm::raw_ostream *))(**(_QWORD **)(v6 + 8 * v5) + 584))(*(_QWORD *)(v6 + 8 * v5), a2);
      ++v5;
      v7 -= 8;
    }
    while (v7);
  }
  return sub_1C4816AD8(a2, "}\n");
}

uint64_t sub_1C6197E70(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 608))(*(_QWORD *)(a1 + 64));
}

uint64_t sub_1C6197E80(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 64) + 616))(*(_QWORD *)(a1 + 64));
}

void sub_1C6197E90()
{
  const char *v0;
  __int16 v1;
  const char *v2;
  __int16 v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[5];
  _BYTE v7[40];

  v4 = "ComplexFunctionGroup::";
  v5 = 259;
  v2 = "getBindlessSamplerBaseSize";
  v3 = 259;
  sub_1C6131AAC((uint64_t *)&v4, (uint64_t *)&v2, (uint64_t)v6);
  v0 = " not implemented";
  v1 = 259;
  sub_1C6131AAC(v6, (uint64_t *)&v0, (uint64_t)v7);
  llvm::report_fatal_error((uint64_t)v7, 1);
}

void sub_1C6197F08(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3;

  sub_1C49C7D1C(a1, a2);
  v3 = a2[5];
  a2[5] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  operator delete(a2);
}

double sub_1C6197F44(char **a1, char **a2)
{
  char *v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  double result;

  v4 = *a1;
  v5 = *((_DWORD *)a1 + 2);
  if (v5)
  {
    v6 = 104 * v5;
    do
    {
      v7 = *(char **)&v4[v6 - 48];
      if (&v4[v6 - 32] != v7)
        free(v7);
      if ((v4[v6 - 88] & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)&v4[v6 - 80], 8);
      v6 -= 104;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

llvm::IVUsers *llvm::IVUsersAnalysis::run@<X0>(llvm::Loop *a1@<X1>, llvm::AssumptionCache **a2@<X3>, llvm::IVUsers *a3@<X8>)
{
  return llvm::IVUsers::IVUsers(a3, a1, a2[1], a2[3], a2[2], a2[4]);
}

void llvm::initializeIVUsersWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82D4A0);
  if (v2 != -1)
  {
    v5[0] = sub_1C4E4D420;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82D4A0, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::IVUsers::AddUser(llvm::IVUsers *this, llvm::Instruction *a2, llvm::Value *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v6 = operator new();
  result = sub_1C6198608(v6, (uint64_t)this, (uint64_t)a2, (uint64_t)a3);
  v8 = *((_QWORD *)this + 25);
  this = (llvm::IVUsers *)((char *)this + 200);
  *(_QWORD *)(result + 40) = this;
  *(_QWORD *)(result + 32) = v8;
  *(_QWORD *)(v8 + 8) = result + 32;
  *(_QWORD *)this = result + 32;
  return result;
}

llvm::IVUsers *llvm::IVUsers::IVUsers(llvm::IVUsers *this, llvm::Loop *a2, llvm::AssumptionCache *a3, llvm::LoopInfo *a4, llvm::DominatorTree *a5, llvm::ScalarEvolution *a6)
{
  llvm::SmallPtrSetImplBase *v9;
  uint64_t i;
  uint64_t v11;

  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = a3;
  *((_QWORD *)this + 2) = a4;
  *((_QWORD *)this + 3) = a5;
  *((_QWORD *)this + 4) = a6;
  *((_QWORD *)this + 5) = (char *)this + 72;
  *((_QWORD *)this + 6) = (char *)this + 72;
  *((_QWORD *)this + 7) = 16;
  *((_DWORD *)this + 16) = 0;
  *((_QWORD *)this + 27) = (char *)this + 248;
  v9 = (llvm::IVUsers *)((char *)this + 216);
  *((_QWORD *)this + 25) = (char *)this + 200;
  *((_QWORD *)this + 26) = (char *)this + 200;
  *((_QWORD *)this + 28) = (char *)this + 248;
  *((_QWORD *)this + 29) = 32;
  *((_DWORD *)this + 60) = 0;
  sub_1C4E4DBF0((uint64_t)this + 216);
  llvm::CodeMetrics::collectEphemeralValues((uint64_t)a2, a3, v9);
  for (i = *(_QWORD *)(**((_QWORD **)a2 + 4) + 48); ; i = *(_QWORD *)(i + 8))
  {
    v11 = i ? i - 24 : 0;
    if (*(_BYTE *)(v11 + 16) != 83)
      break;
    llvm::IVUsers::AddUsersIfInteresting(this, (llvm::Instruction *)(i - 24));
  }
  return this;
}

void llvm::IVUsers::dump(llvm::IVUsers *this)
{
  llvm *v2;
  const llvm::Module *v3;

  v2 = llvm::dbgs(this);
  llvm::IVUsers::print((llvm::ScalarEvolution **)this, v2, v3);
}

llvm::IVUsersWrapperPass *llvm::IVUsersWrapperPass::IVUsersWrapperPass(llvm::IVUsersWrapperPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::IVUsersWrapperPass::ID;
  *((_DWORD *)this + 6) = 1;
  *(_QWORD *)this = &off_1E8137DF0;
  *((_QWORD *)this + 4) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82D4A0);
  if (v2 != -1)
  {
    v6[0] = sub_1C4E4D420;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82D4A0, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

llvm::AnalysisUsage *llvm::IVUsersWrapperPass::getAnalysisUsage(llvm::IVUsersWrapperPass *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage *result;

  llvm::AnalysisUsage::addRequiredID(a2, llvm::AssumptionCacheTracker::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::LoopInfoWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredID(a2, llvm::DominatorTreeWrapperPass::ID);
  result = llvm::AnalysisUsage::addRequiredID(a2, llvm::ScalarEvolutionWrapperPass::ID);
  *((_BYTE *)a2 + 160) = 1;
  return result;
}

uint64_t llvm::IVUsersWrapperPass::runOnLoop(llvm::IVUsersWrapperPass *this, llvm::Loop *a2, llvm::LPPassManager *a3)
{
  char **v5;
  char *v6;
  llvm::AssumptionCacheTracker *v7;
  llvm::AssumptionCache *AssumptionCache;
  char **v9;
  char *v10;
  uint64_t v11;
  char **v12;
  char *v13;
  uint64_t v14;
  char **v15;
  char *v16;
  llvm::DominatorTree *v17;
  llvm::ScalarEvolution *v18;
  llvm::IVUsers *v19;
  _QWORD *v20;
  _QWORD *v22;

  v5 = (char **)**((_QWORD **)this + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != llvm::AssumptionCacheTracker::ID);
  v7 = (llvm::AssumptionCacheTracker *)(*(uint64_t (**)(_QWORD, char *, llvm::LPPassManager *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), llvm::AssumptionCacheTracker::ID, a3);
  AssumptionCache = (llvm::AssumptionCache *)llvm::AssumptionCacheTracker::getAssumptionCache(v7, *(llvm::Function **)(**((_QWORD **)a2 + 4) + 56));
  v9 = (char **)**((_QWORD **)this + 1);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != llvm::LoopInfoWrapperPass::ID);
  v11 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), llvm::LoopInfoWrapperPass::ID);
  v12 = (char **)**((_QWORD **)this + 1);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != llvm::DominatorTreeWrapperPass::ID);
  v14 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), llvm::DominatorTreeWrapperPass::ID);
  v15 = (char **)**((_QWORD **)this + 1);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != llvm::ScalarEvolutionWrapperPass::ID);
  v17 = (llvm::DominatorTree *)(v14 + 32);
  v18 = *(llvm::ScalarEvolution **)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), llvm::ScalarEvolutionWrapperPass::ID)+ 32);
  v19 = (llvm::IVUsers *)operator new();
  llvm::IVUsers::IVUsers(v19, a2, AssumptionCache, (llvm::LoopInfo *)(v11 + 32), v17, v18);
  v20 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v19;
  if (v20)
  {
    v22 = sub_1C61987D4(v20);
    MEMORY[0x1CAA32FC0](v22, 0x10E0C402C01844DLL);
  }
  return 0;
}

void llvm::IVUsersWrapperPass::print(llvm::ScalarEvolution ***this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  llvm::IVUsers::print(this[4], a2, a3);
}

uint64_t llvm::IVUsersWrapperPass::releaseMemory(llvm::IVUsersWrapperPass *this)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *((_QWORD *)this + 4);
  result = (uint64_t)sub_1C4E4DBF0(v1 + 40);
  v3 = *(_QWORD *)(v1 + 208);
  if (v1 + 200 != v3)
  {
    do
    {
      result = sub_1C6198704(v1 + 200, v3);
      v3 = result;
    }
    while (v1 + 200 != result);
  }
  return result;
}

uint64_t llvm::IVUsers::getExpr(llvm::ScalarEvolution **this, llvm::Value **a2)
{
  uint64_t SCEV;

  SCEV = llvm::ScalarEvolution::getSCEV(this[4], a2[9]);
  return llvm::normalizeForPostIncUse(SCEV, (uint64_t)(a2 + 10), (uint64_t)this[4]);
}

unint64_t llvm::IVUsers::getStride(llvm::ScalarEvolution **this, llvm::Value **a2, const llvm::Loop *a3)
{
  uint64_t SCEV;
  uint64_t v7;
  unint64_t result;

  SCEV = llvm::ScalarEvolution::getSCEV(this[4], a2[9]);
  v7 = llvm::normalizeForPostIncUse(SCEV, (uint64_t)(a2 + 10), (uint64_t)this[4]);
  result = sub_1C4E4E304(v7, (uint64_t)a3);
  if (result)
    return sub_1C4E0C3BC(result, (uint64_t *)this[4]);
  return result;
}

_QWORD *llvm::IVStrideUse::transformToPostInc(llvm::IVStrideUse *this, const llvm::Loop *a2)
{
  return sub_1C4774094((llvm::IVStrideUse *)((char *)this + 80), (uint64_t)a2);
}

uint64_t llvm::IVStrideUse::deleted(llvm::IVStrideUse *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_QWORD *)this + 6);
  v3 = sub_1C477672C(v2 + 40, *((_QWORD *)this + 3));
  v4 = *(_QWORD *)(v2 + 48);
  v5 = 56;
  if (v4 == *(_QWORD *)(v2 + 40))
    v5 = 60;
  if (v3 != (_QWORD *)(v4 + 8 * *(unsigned int *)(v2 + v5)))
  {
    *v3 = -2;
    ++*(_DWORD *)(v2 + 64);
  }
  return sub_1C6198704(*((_QWORD *)this + 6) + 200, (uint64_t)this + 32);
}

void sub_1C61985B4(llvm::Pass *a1)
{
  sub_1C61986B0(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C61985D8()
{
  return 4;
}

llvm::IVUsersWrapperPass *llvm::callDefaultCtor<llvm::IVUsersWrapperPass>()
{
  llvm::IVUsersWrapperPass *v0;

  v0 = (llvm::IVUsersWrapperPass *)operator new();
  return llvm::IVUsersWrapperPass::IVUsersWrapperPass(v0);
}

uint64_t sub_1C6198608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::ValueHandleBase *v7;

  *(_QWORD *)(a1 + 8) = 2;
  *(_QWORD *)(a1 + 16) = 0;
  v7 = (llvm::ValueHandleBase *)(a1 + 8);
  *((_QWORD *)v7 + 2) = a3;
  if (a3 != -8192 && a3 != -4096 && a3)
    llvm::ValueHandleBase::AddToUseList(v7);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)a1 = off_1E8137EA0;
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 56) = 6;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = a4;
  if (a4 != -8192 && a4 != -4096 && a4)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(a1 + 56));
  *(_QWORD *)(a1 + 80) = a1 + 112;
  *(_QWORD *)(a1 + 88) = a1 + 112;
  *(_QWORD *)(a1 + 96) = 2;
  *(_DWORD *)(a1 + 104) = 0;
  return a1;
}

void sub_1C61986B0(llvm::Pass *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E8137DF0;
  v2 = (_QWORD *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v3 = sub_1C61987D4(v2);
    MEMORY[0x1CAA32FC0](v3, 0x10E0C402C01844DLL);
  }
  llvm::Pass::~Pass(this);
}

uint64_t sub_1C6198704(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v7;

  v2 = *(_QWORD *)(a2 + 8);
  if (a2)
    v3 = a2 - 32;
  else
    v3 = 0;
  v4 = *(_QWORD *)(v3 + 32);
  v5 = *(_QWORD **)(v3 + 40);
  *v5 = v4;
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 40) = 0;
  if (a2)
  {
    v7 = sub_1C6198760((_QWORD *)(a2 - 32));
    MEMORY[0x1CAA32FC0](v7, 0x10E1C40910D9C65);
  }
  return v2;
}

_QWORD *sub_1C6198760(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v5;

  v2 = (void *)a1[11];
  if (v2 != (void *)a1[10])
    free(v2);
  v3 = a1[9];
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
    llvm::ValueHandleBase::RemoveFromUseList(a1 + 7);
  v5 = a1[3];
  if (v5 != -8192 && v5 != -4096 && v5 != 0)
    llvm::ValueHandleBase::RemoveFromUseList(a1 + 1);
  return a1;
}

_QWORD *sub_1C61987D4(_QWORD *a1)
{
  void *v2;
  uint64_t i;
  void *v4;

  v2 = (void *)a1[28];
  if (v2 != (void *)a1[27])
    free(v2);
  for (i = a1[26]; a1 + 25 != (_QWORD *)i; i = sub_1C6198704((uint64_t)(a1 + 25), i))
    ;
  v4 = (void *)a1[6];
  if (v4 != (void *)a1[5])
    free(v4);
  return a1;
}

size_t llvm::ImportedFunctionsInliningStatistics::createInlineGraphNode(llvm::ImportedFunctionsInliningStatistics *this, const llvm::Function *a2)
{
  unsigned __int8 *Name;
  size_t v5;
  size_t **v6;
  size_t *v7;
  size_t result;
  uint64_t v9;
  void **v10;
  BOOL v11;

  Name = (unsigned __int8 *)llvm::Value::getName(a2);
  v6 = sub_1C6198FB4((uint64_t)this, Name, v5);
  v7 = *v6;
  result = (*v6)[1];
  if (!result)
  {
    v9 = operator new();
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)(v9 + 80) = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_QWORD *)v9 = v9 + 16;
    *(_QWORD *)(v9 + 8) = 0x800000000;
    *(_WORD *)(v9 + 88) = 0;
    *(_QWORD *)(v9 + 80) = 0;
    v10 = (void **)v7[1];
    v7[1] = v9;
    if (v10)
    {
      if (*v10 != v10 + 2)
        free(*v10);
      MEMORY[0x1CAA32FC0](v10, 0x1080C40232BEC51);
    }
    v11 = llvm::Value::getMetadata((uint64_t)a2, "thinlto_src_module", 0x12uLL) != 0;
    result = v7[1];
    *(_BYTE *)(result + 88) = v11;
  }
  return result;
}

uint64_t llvm::ImportedFunctionsInliningStatistics::setModuleInfo(uint64_t this, const llvm::Module *a2)
{
  char *v2;
  char *v3;
  char *v4;
  char v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  llvm::GlobalValue *v11;
  int v12;

  v4 = (char *)*((_QWORD *)a2 + 21);
  v2 = (char *)a2 + 168;
  v3 = v4;
  v5 = v2[23];
  v6 = v5;
  if (v5 >= 0)
    v3 = v2;
  v7 = v5 & 0x7F;
  if (v6 < 0)
    v7 = *((_QWORD *)v2 + 1);
  *(_QWORD *)(this + 64) = v3;
  *(_QWORD *)(this + 72) = v7;
  v8 = v2 - 144;
  v9 = *((_QWORD *)v2 - 17);
  if ((char *)v9 != v2 - 144)
  {
    v10 = this;
    do
    {
      if (v9)
        v11 = (llvm::GlobalValue *)(v9 - 56);
      else
        v11 = 0;
      this = llvm::GlobalValue::isDeclaration(v11);
      if ((this & 1) == 0)
      {
        ++*(_DWORD *)(v10 + 56);
        this = llvm::Value::getMetadata((uint64_t)v11, "thinlto_src_module", 0x12uLL);
        v12 = *(_DWORD *)(v10 + 60);
        if (this)
          ++v12;
        *(_DWORD *)(v10 + 60) = v12;
      }
      v9 = *(_QWORD *)(v9 + 8);
    }
    while ((char *)v9 != v8);
  }
  return this;
}

uint64_t llvm::ImportedFunctionsInliningStatistics::dfs(uint64_t result, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  *((_BYTE *)a2 + 89) = 1;
  v2 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = *a2;
    v5 = 8 * v2;
    do
    {
      v6 = *v4;
      *(_DWORD *)(v6 + 84) = *(_DWORD *)(*v4 + 84) + 1;
      if (!*(_BYTE *)(v6 + 89))
        result = llvm::ImportedFunctionsInliningStatistics::dfs(v3);
      ++v4;
      v5 -= 8;
    }
    while (v5);
  }
  return result;
}

_QWORD *sub_1C6198A60(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E8137EC8;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E8137F30;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

_QWORD *sub_1C6198AE0(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8137F30;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  return a1;
}

uint64_t sub_1C6198B20(uint64_t a1, __int16 a2, const void *a3, size_t a4, const void *a5, size_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;

  v12 = 0;
  v8 = sub_1C6159B48(a1 + 152, (_QWORD *)a1, a3, a4, a5, a6, &v12);
  if ((v8 & 1) != 0)
    return v8;
  *(_DWORD *)(a1 + 128) = v12;
  *(_WORD *)(a1 + 12) = a2;
  v9 = *(_QWORD *)(a1 + 592);
  if (v9)
  {
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v9 + 48))(v9, &v12);
    return v8;
  }
  sub_1C485C2F0();
  return sub_1C6198B98(v11);
}

uint64_t sub_1C6198B98(uint64_t a1)
{
  if (*(_QWORD *)(*(_QWORD *)(a1 + 160) + 24))
    return 2;
  else
    return 3;
}

void sub_1C6198BB0(_QWORD *a1)
{
  sub_1C6198A60(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C6198BD4(uint64_t a1)
{
  return llvm::cl::generic_parser_base::getOptionWidth(a1 + 152, a1);
}

uint64_t sub_1C6198BE0(uint64_t a1, unsigned int a2)
{
  return llvm::cl::generic_parser_base::printOptionInfo((llvm::cl::generic_parser_base *)(a1 + 152), (const llvm::cl::Option *)a1, a2);
}

llvm::raw_ostream *sub_1C6198BF0(llvm::raw_ostream *result, int a2, int a3)
{
  int v3;
  uint64_t (**v4)();
  int v5;
  char v6;

  if (a3)
  {
    v3 = *((_DWORD *)result + 32);
LABEL_3:
    v4 = &off_1E8137F80;
    v6 = 1;
    v5 = v3;
    return llvm::cl::generic_parser_base::printGenericOptionDiff((llvm::raw_ostream *)((char *)result + 152), result, (const llvm::cl::GenericOptionValue *)&v4, (llvm::raw_ostream *)((char *)result + 136), a2);
  }
  if (*((_BYTE *)result + 148))
  {
    v3 = *((_DWORD *)result + 32);
    if (*((_DWORD *)result + 36) != v3)
      goto LABEL_3;
  }
  return result;
}

_QWORD *sub_1C6198C5C(uint64_t a1, uint64_t a2)
{
  return sub_1C4B03438((_QWORD *)(a1 + 152), a2);
}

void sub_1C6198C64(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E8137F30;
  v2 = (_QWORD *)a1[2];
  if (v2 != a1 + 4)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6198CB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C6198CBC(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2);
}

uint64_t sub_1C6198CD0(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 48 * a2 + 16);
}

uint64_t sub_1C6198CE4(uint64_t a1, unsigned int a2)
{
  return *(_QWORD *)(a1 + 16) + 48 * a2 + 32;
}

BOOL sub_1C6198CF8(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1C6198D24(int **a1, uint64_t *a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&InlinerFunctionImportStats, 0, 0);
  dword_1ED82D528 = 0;
  qword_1ED82D530 = (uint64_t)&off_1E8137F80;
  *(_QWORD *)&dword_1ED82D538 = 0;
  InlinerFunctionImportStats = (uint64_t)off_1E8137EC8;
  qword_1ED82D540 = (uint64_t)&off_1E8137F30;
  qword_1ED82D548 = (uint64_t)&InlinerFunctionImportStats;
  qword_1ED82D550 = (uint64_t)&unk_1ED82D560;
  qword_1ED82D558 = 0x800000000;
  qword_1ED82D6E0 = (uint64_t)&off_1E8137FC0;
  qword_1ED82D6F8 = (uint64_t)&qword_1ED82D6E0;
  sub_1C4E4F5EC(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&InlinerFunctionImportStats);
}

void sub_1C6198DE0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6198DF4()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8137FC0;
  return result;
}

void sub_1C6198E18(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8137FC0;
}

void sub_1C6198E34(unsigned __int8 *a1, size_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  char v10;
  _QWORD v11[5];
  int v12;
  char v13;

  v11[0] = a1;
  v11[1] = a2;
  v11[2] = a4;
  v11[3] = a5;
  v11[4] = &off_1E8137F80;
  v13 = 1;
  v12 = a3;
  v7 = sub_1C4E4F6B4((unint64_t)v11);
  v8 = qword_1ED82D550 + 48 * qword_1ED82D558;
  v9 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)v8 = *(_OWORD *)v7;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 32) = &off_1E8137FA0;
  v10 = *(_BYTE *)(v7 + 44);
  *(_DWORD *)(v8 + 40) = *(_DWORD *)(v7 + 40);
  *(_BYTE *)(v8 + 44) = v10;
  *(_QWORD *)(v8 + 32) = &off_1E8137F80;
  LODWORD(qword_1ED82D558) = qword_1ED82D558 + 1;
  llvm::cl::AddLiteralOption(qword_1ED82D548, a1, a2);
}

void sub_1C6198EE8(unint64_t a1)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  int v6;
  int v7;
  unint64_t v8;

  v8 = 0;
  v1 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&qword_1ED82D550, a1, 48, &v8);
  v2 = (_OWORD *)qword_1ED82D550;
  if ((_DWORD)qword_1ED82D558)
  {
    v3 = qword_1ED82D550 + 48 * qword_1ED82D558;
    v4 = v1;
    do
    {
      v5 = v2[1];
      *v4 = *v2;
      v4[1] = v5;
      *((_QWORD *)v4 + 4) = &off_1E8137FA0;
      v6 = *((_DWORD *)v2 + 10);
      *((_BYTE *)v4 + 44) = *((_BYTE *)v2 + 44);
      *((_DWORD *)v4 + 10) = v6;
      *((_QWORD *)v4 + 4) = &off_1E8137F80;
      v2 += 3;
      v4 += 3;
    }
    while (v2 != (_OWORD *)v3);
    v2 = (_OWORD *)qword_1ED82D550;
  }
  v7 = v8;
  if (v2 != (_OWORD *)&unk_1ED82D560)
    free(v2);
  qword_1ED82D550 = (uint64_t)v1;
  HIDWORD(qword_1ED82D558) = v7;
}

size_t **sub_1C6198FB4(uint64_t a1, unsigned __int8 *a2, size_t a3)
{
  uint64_t v6;
  size_t **i;
  size_t *v8;
  size_t *v9;
  _QWORD *buffer;
  size_t *v12;
  char *v13;

  v6 = llvm::StringMapImpl::LookupBucketFor((uint64_t *)a1, a2, a3);
  i = (size_t **)(*(_QWORD *)a1 + 8 * v6);
  v8 = *i;
  if (*i == (size_t *)-8)
  {
    --*(_DWORD *)(a1 + 16);
  }
  else if (v8)
  {
    while (!v8 || v8 == (size_t *)-8)
    {
      v9 = i[1];
      ++i;
      v8 = v9;
    }
    return i;
  }
  buffer = llvm::allocate_buffer(a3 + 17, (std::align_val_t)8uLL);
  v12 = buffer;
  v13 = (char *)(buffer + 2);
  if (a3)
    memcpy(buffer + 2, a2, a3);
  v13[a3] = 0;
  *v12 = a3;
  v12[1] = 0;
  *i = v12;
  ++*(_DWORD *)(a1 + 12);
  for (i = (size_t **)(*(_QWORD *)a1
                      + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)a1, v6));
        !*i || *i + 1 == 0;
  return i;
}

void sub_1C61990A0(int **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED82D700, 0, 0);
  dword_1ED82D780 = 0;
  qword_1ED82D788 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED82D790 = 0;
  qword_1ED82D700 = (uint64_t)&unk_1E819E3B0;
  qword_1ED82D798 = (uint64_t)&unk_1E819E2C0;
  qword_1ED82D7A0 = (uint64_t)&off_1E7F95260;
  qword_1ED82D7B8 = (uint64_t)&qword_1ED82D7A0;
  sub_1C6199154(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED82D700);
}

__n128 sub_1C6199154(int **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED82D700, "icp-remaining-percent-threshold", 0x1FuLL);
  dword_1ED82D780 = **a1;
  byte_1ED82D794 = 1;
  dword_1ED82D790 = dword_1ED82D780;
  word_1ED82D70A = word_1ED82D70A & 0xFF9F | (32 * (*a2 & 3));
  word_1ED82D70A = word_1ED82D70A & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED82D720 = (__int128)*a4;
  return result;
}

llvm::cl::Option *sub_1C61991E4(llvm::cl::Option *a1, char *a2, int **a3, _WORD *a4, _WORD *a5, __n128 *a6)
{
  uint64_t v12;

  v12 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_DWORD *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 136) = &off_1E7F952A8;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)v12 = &unk_1E819E3B0;
  *(_QWORD *)(v12 + 152) = &unk_1E819E2C0;
  *(_QWORD *)(v12 + 160) = &off_1E7F95260;
  *(_QWORD *)(v12 + 184) = v12 + 160;
  sub_1C61992A0(v12, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 sub_1C61992A0(uint64_t a1, char *__s, int **a3, _WORD *a4, _WORD *a5, __n128 *a6)
{
  size_t v12;
  int v13;
  __int16 v14;
  __n128 result;

  v12 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v12);
  v13 = **a3;
  *(_DWORD *)(a1 + 128) = v13;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = v13;
  v14 = *(_WORD *)(a1 + 10) & 0xFF9F | (32 * (*a4 & 3));
  *(_WORD *)(a1 + 10) = v14;
  *(_WORD *)(a1 + 10) = v14 & 0xFFF8 | *a5 & 7;
  result = *a6;
  *(__n128 *)(a1 + 32) = *a6;
  return result;
}

void sub_1C6199334(int **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED82D880, 0, 0);
  dword_1ED82D900 = 0;
  qword_1ED82D908 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED82D910 = 0;
  qword_1ED82D880 = (uint64_t)&unk_1E819E3B0;
  qword_1ED82D918 = (uint64_t)&unk_1E819E2C0;
  qword_1ED82D920 = (uint64_t)&off_1E7F95260;
  qword_1ED82D938 = (uint64_t)&qword_1ED82D920;
  sub_1C61993E8(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED82D880);
}

__n128 sub_1C61993E8(int **a1, _WORD *a2, _WORD *a3, __n128 *a4)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED82D880, "icp-max-prom", 0xCuLL);
  dword_1ED82D900 = **a1;
  byte_1ED82D914 = 1;
  dword_1ED82D910 = dword_1ED82D900;
  word_1ED82D88A = word_1ED82D88A & 0xFF9F | (32 * (*a2 & 3));
  word_1ED82D88A = word_1ED82D88A & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED82D8A0 = (__int128)*a4;
  return result;
}

uint64_t sub_1C6199478(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = llvm::AttributeList::getParamByValType((llvm::AttributeList *)(a1 + 64), a2);
  if (!result)
  {
    v5 = *(_QWORD *)(a1 - 32);
    if (v5 && !*(_BYTE *)(v5 + 16) && *(_QWORD *)(v5 + 24) == *(_QWORD *)(a1 + 72))
    {
      v6 = *(_QWORD *)(v5 + 112);
      return llvm::AttributeList::getParamByValType((llvm::AttributeList *)&v6, a2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::getInlineParams@<X0>(uint64_t a1@<X8>)
{
  return llvm::getInlineParams(dword_1ED82D9C0, a1);
}

uint64_t llvm::getInlineParams@<X0>(llvm *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v6;

  if (this > 2)
  {
    result = llvm::getInlineParams(250, a3);
    v6 = *(unsigned __int8 *)(a3 + 48);
    *(_DWORD *)(a3 + 44) = dword_1ED82DE40;
    if (!v6)
      *(_BYTE *)(a3 + 48) = 1;
  }
  else
  {
    if (a2 == 1)
    {
      v3 = 50;
    }
    else if (a2 == 2)
    {
      v3 = 5;
    }
    else
    {
      v3 = dword_1ED82D9C0;
    }
    return llvm::getInlineParams(v3, a3);
  }
  return result;
}

llvm::APInt *sub_1C6199584(llvm::APInt *this, uint64_t *a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  llvm::APInt *result;
  size_t v10;
  void *v11;
  const void *v12;
  int v13;
  uint64_t v14;
  unsigned int v15;

  if (*((_BYTE *)this + 32))
  {
    sub_1C61996A0((uint64_t)this);
    *((_BYTE *)this + 32) = 0;
  }
  v6 = *((_DWORD *)a2 + 2);
  v15 = v6;
  v7 = *a2;
  v14 = *a2;
  *((_DWORD *)a2 + 2) = 0;
  v8 = *(unsigned int *)(a3 + 8);
  v13 = v8;
  if (v8 > 0x40)
  {
    v10 = ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8;
    v11 = (void *)operator new[]();
    v12 = v11;
    memcpy(v11, *(const void **)a3, v10);
    sub_1C6199710(this, (uint64_t)&v14, (llvm::APInt *)&v12);
    result = (llvm::APInt *)MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
  }
  else
  {
    v12 = *(const void **)a3;
    result = sub_1C6199710(this, (uint64_t)&v14, (llvm::APInt *)&v12);
  }
  if (v6 >= 0x41 && v7)
    result = (llvm::APInt *)MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  *((_BYTE *)this + 32) = 1;
  return result;
}

uint64_t sub_1C61996A0(uint64_t a1)
{
  uint64_t v2;

  if (*(_DWORD *)(a1 + 24) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
  }
  if (*(_DWORD *)(a1 + 8) >= 0x41u && *(_QWORD *)a1)
    MEMORY[0x1CAA32F9C](*(_QWORD *)a1, 0x1000C8000313F17);
  return a1;
}

llvm::APInt *sub_1C6199710(llvm::APInt *this, uint64_t a2, llvm::APInt *a3)
{
  unsigned int v5;
  llvm::APInt *v6;
  unsigned int v7;

  v5 = *(_DWORD *)(a2 + 8);
  *((_DWORD *)this + 2) = v5;
  if (v5 > 0x40)
    llvm::APInt::initSlowCase(this, (const void **)a2);
  else
    *(_QWORD *)this = *(_QWORD *)a2;
  v6 = (llvm::APInt *)((char *)this + 16);
  v7 = *((_DWORD *)a3 + 2);
  *((_DWORD *)this + 6) = v7;
  if (v7 > 0x40)
    llvm::APInt::initSlowCase(v6, (const void **)a3);
  else
    *(_QWORD *)v6 = *(_QWORD *)a3;
  return this;
}

uint64_t sub_1C6199780(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4E58498(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C619982C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C49EEE4C(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      v10[1] = *(_QWORD *)(a2 + 8);
      *((_DWORD *)v10 + 6) = *(_DWORD *)(a2 + 24);
      v10[2] = *(_QWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 24) = 0;
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 32;
  }
  return result;
}

uint64_t sub_1C61998EC(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = &unk_1E814E610;
  v4 = *(_DWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 12) = *(_BYTE *)(a2 + 12);
  *(_DWORD *)(a1 + 8) = v4;
  *(_QWORD *)a1 = &off_1E814E760;
  v5 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)a1 = &off_1E814E790;
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = a1 + 96;
  v9 = a1 + 80;
  *(_QWORD *)(v9 - 8) = v8;
  *(_OWORD *)(v9 - 24) = v7;
  *(_OWORD *)(v9 - 40) = v6;
  *(_QWORD *)(v9 + 8) = 0x400000000;
  if (*(_DWORD *)(a2 + 88))
    sub_1C4E5CE00(v9, a2 + 80);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)a1 = &unk_1E814E7C8;
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  return a1;
}

void sub_1C61999BC(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 64, &v5);
  sub_1C4E5D038((__int128 **)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

llvm::APInt *sub_1C6199A28(llvm::APInt *this, llvm::APInt *a2)
{
  unsigned int v4;
  llvm::APInt *v5;
  const void **v6;
  unsigned int v7;

  v4 = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 2) = v4;
  if (v4 > 0x40)
    llvm::APInt::initSlowCase(this, (const void **)a2);
  else
    *(_QWORD *)this = *(_QWORD *)a2;
  v5 = (llvm::APInt *)((char *)this + 16);
  v6 = (const void **)((char *)a2 + 16);
  v7 = *((_DWORD *)a2 + 6);
  *((_DWORD *)this + 6) = v7;
  if (v7 > 0x40)
    llvm::APInt::initSlowCase(v5, v6);
  else
    *(_QWORD *)v5 = *v6;
  return this;
}

llvm::cl::Option *sub_1C6199A9C(llvm::cl::Option *a1, char *a2, _WORD *a3, _DWORD **a4, _WORD *a5, __n128 *a6)
{
  uint64_t v12;

  v12 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_DWORD *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 136) = &off_1E7FA9DC8;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)v12 = &unk_1E819E418;
  *(_QWORD *)(v12 + 152) = &unk_1E819E230;
  *(_QWORD *)(v12 + 160) = &off_1E7FA9D80;
  *(_QWORD *)(v12 + 184) = v12 + 160;
  sub_1C6199B50(v12, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 sub_1C6199B50(uint64_t a1, char *__s, _WORD *a3, _DWORD **a4, _WORD *a5, __n128 *a6)
{
  size_t v12;
  __int16 v13;
  _DWORD *v14;
  __n128 result;

  v12 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v12);
  v13 = *(_WORD *)(a1 + 10) & 0xFF9F | (32 * (*a3 & 3));
  *(_WORD *)(a1 + 10) = v13;
  v14 = *a4;
  *(_DWORD *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 148) = 1;
  *(_DWORD *)(a1 + 144) = *v14;
  *(_WORD *)(a1 + 10) = v13 & 0xFFF8 | *a5 & 7;
  result = *a6;
  *(__n128 *)(a1 + 32) = *a6;
  return result;
}

void sub_1C6199BE8(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED82DA00, 0, 0);
  dword_1ED82DA80 = 0;
  qword_1ED82DA88 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED82DA90 = 0;
  qword_1ED82DA00 = (uint64_t)&unk_1E819E418;
  qword_1ED82DA98 = (uint64_t)&unk_1E819E230;
  qword_1ED82DAA0 = (uint64_t)&off_1E7FA9D80;
  qword_1ED82DAB8 = (uint64_t)&qword_1ED82DAA0;
  sub_1C6199C94(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED82DA00);
}

__n128 sub_1C6199C94(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  int *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED82DA00, "inline-threshold", 0x10uLL);
  word_1ED82DA0A = word_1ED82DA0A & 0xFF9F | (32 * (*a1 & 3));
  v8 = *a2;
  dword_1ED82DA80 = **a2;
  byte_1ED82DA94 = 1;
  dword_1ED82DA90 = *v8;
  word_1ED82DA0A = word_1ED82DA0A & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED82DA20 = (__int128)*a4;
  return result;
}

void sub_1C6199D28(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED7F1A70, 0, 0);
  dword_1ED7F1AF0 = 0;
  qword_1ED7F1AF8 = (uint64_t)&off_1E7FA9DC8;
  *(_QWORD *)&dword_1ED7F1B00 = 0;
  qword_1ED7F1A70 = (uint64_t)&unk_1E819E418;
  qword_1ED7F1B08 = (uint64_t)&unk_1E819E230;
  qword_1ED7F1B10 = (uint64_t)&off_1E7FA9D80;
  qword_1ED7F1B28 = (uint64_t)&qword_1ED7F1B10;
  sub_1C6199DD4(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F1A70);
}

__n128 sub_1C6199DD4(_WORD *a1, int **a2, _WORD *a3, __n128 *a4)
{
  int *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7F1A70, "inline-savings-multiplier", 0x19uLL);
  word_1ED7F1A7A = word_1ED7F1A7A & 0xFF9F | (32 * (*a1 & 3));
  v8 = *a2;
  dword_1ED7F1AF0 = **a2;
  byte_1ED7F1B04 = 1;
  dword_1ED7F1B00 = *v8;
  word_1ED7F1A7A = word_1ED7F1A7A & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED7F1A90 = (__int128)*a4;
  return result;
}

llvm::cl::Option *sub_1C6199E68(llvm::cl::Option *a1, char *a2, _WORD *a3, _DWORD **a4, __n128 *a5)
{
  uint64_t v10;

  v10 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7FA9DC8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E418;
  *(_QWORD *)(v10 + 152) = &unk_1E819E230;
  *(_QWORD *)(v10 + 160) = &off_1E7FA9D80;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  sub_1C4E5DF50(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

llvm::cl::Option *sub_1C6199F14(llvm::cl::Option *a1, char *a2, _WORD *a3, _BYTE **a4, _WORD *a5, __n128 *a6)
{
  uint64_t v12;

  v12 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_BYTE *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 136) = &off_1E7F9E8D8;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)v12 = &unk_1E819E898;
  *(_QWORD *)(v12 + 152) = &off_1E819E9A0;
  *(_QWORD *)(v12 + 160) = &off_1E7F9E8F8;
  *(_QWORD *)(v12 + 184) = v12 + 160;
  sub_1C6199FD0(v12, a2, a3, a4, a5, a6);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

__n128 sub_1C6199FD0(uint64_t a1, char *__s, _WORD *a3, _BYTE **a4, _WORD *a5, __n128 *a6)
{
  size_t v12;
  __int16 v13;
  _BYTE *v14;
  __n128 result;

  v12 = strlen(__s);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)__s, v12);
  v13 = *(_WORD *)(a1 + 10) & 0xFF9F | (32 * (*a3 & 3));
  *(_WORD *)(a1 + 10) = v13;
  v14 = *a4;
  *(_BYTE *)(a1 + 128) = **a4;
  *(_BYTE *)(a1 + 145) = 1;
  *(_BYTE *)(a1 + 144) = *v14;
  *(_WORD *)(a1 + 10) = v13 & 0xFFF8 | *a5 & 7;
  result = *a6;
  *(__n128 *)(a1 + 32) = *a6;
  return result;
}

void sub_1C619A068(_WORD *a1, char **a2, _WORD *a3, __n128 *a4)
{
  sub_1C47AD050((uint64_t)&qword_1ED7F1EF0, 0, 0);
  byte_1ED7F1F70 = 0;
  qword_1ED7F1F78 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&byte_1ED7F1F80 = 0;
  qword_1ED7F1EF0 = (uint64_t)&unk_1E819E898;
  qword_1ED7F1F88 = (uint64_t)&off_1E819E9A0;
  qword_1ED7F1F90 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED7F1FA8 = (uint64_t)&qword_1ED7F1F90;
  sub_1C619A11C(a1, a2, a3, a4);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7F1EF0);
}

__n128 sub_1C619A11C(_WORD *a1, char **a2, _WORD *a3, __n128 *a4)
{
  char *v8;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED7F1EF0, "inline-caller-superset-nobuiltin", 0x20uLL);
  word_1ED7F1EFA = word_1ED7F1EFA & 0xFF9F | (32 * (*a1 & 3));
  v8 = *a2;
  byte_1ED7F1F70 = **a2;
  byte_1ED7F1F81 = 1;
  byte_1ED7F1F80 = *v8;
  word_1ED7F1EFA = word_1ED7F1EFA & 0xFFF8 | *a3 & 7;
  result = *a4;
  xmmword_1ED7F1F10 = (__int128)*a4;
  return result;
}

BOOL llvm::InlineAdvisorAnalysis::Result::tryCreate(uint64_t *a1, __int128 *a2, int a3, uint64_t a4)
{
  uint64_t ResultImpl;
  uint64_t v9;
  _QWORD *v10;
  const llvm::Module *v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  const llvm::Module *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int v32;

  ResultImpl = llvm::AnalysisManager<llvm::Module>::getResultImpl(a1[1], &llvm::InnerAnalysisManagerProxy<llvm::AnalysisManager<llvm::Function>,llvm::Module>::Key, *a1);
  if (!a3)
  {
    v9 = *(_QWORD *)(ResultImpl + 8);
    v10 = (_QWORD *)operator new();
    v11 = (const llvm::Module *)*a1;
    v12 = a2[3];
    v30 = a2[2];
    v31 = v12;
    v32 = *((_DWORD *)a2 + 16);
    v13 = a2[1];
    v28 = *a2;
    v29 = v13;
    v14 = llvm::InlineAdvisor::InlineAdvisor(v10, v11, v9);
    *v14 = &off_1E81383D0;
    v15 = v31;
    *((_OWORD *)v14 + 4) = v30;
    *((_OWORD *)v14 + 5) = v15;
    *((_DWORD *)v14 + 24) = v32;
    v16 = v29;
    *((_OWORD *)v14 + 2) = v28;
    *((_OWORD *)v14 + 3) = v16;
    v17 = a1[2];
    a1[2] = (uint64_t)v10;
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    if (*(_QWORD *)(a4 + 8))
    {
      v19 = (const llvm::Module *)*a1;
      v20 = *(_QWORD *)*a1;
      v21 = a1[2];
      a1[2] = 0;
      v26 = v21;
      llvm::getReplayInlineAdvisor(v19, v9, v20, &v26, (__int128 *)a4, 1, &v27);
      v22 = v27;
      v27 = 0;
      v23 = a1[2];
      a1[2] = v22;
      if (v23)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
        v24 = v27;
        v27 = 0;
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      }
      v25 = v26;
      v26 = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    }
  }
  return a1[2] != 0;
}

_QWORD *llvm::InlineAdvisor::InlineAdvisor(_QWORD *result, const llvm::Module *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *result = off_1E8138348;
  result[1] = a2;
  result[2] = a3;
  result[3] = 0;
  if (dword_1ED82D528)
  {
    v3 = result;
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_DWORD *)(v4 + 20) = 16;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_OWORD *)(v4 + 64) = 0u;
    v5 = v3[3];
    v3[3] = v4;
    if (v5)
    {
      v6 = sub_1C619A658(v5);
      MEMORY[0x1CAA32FC0](v6, 0x10F0C40A22A8682);
      v4 = v3[3];
    }
    llvm::ImportedFunctionsInliningStatistics::setModuleInfo(v4, a2);
    return v3;
  }
  return result;
}

void llvm::InlineAdvisor::~InlineAdvisor(llvm::InlineAdvisor *this)
{
  size_t *v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = off_1E8138348;
  v1 = (size_t *)*((_QWORD *)this + 3);
  if (v1)
  {
    llvm::ImportedFunctionsInliningStatistics::dump(v1, dword_1ED82D528 == 2);
    v2 = *((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = 0;
    if (v2)
    {
      v3 = sub_1C619A658(v2);
      MEMORY[0x1CAA32FC0](v3, 0x10F0C40A22A8682);
    }
  }
  else
  {
    *((_QWORD *)this + 3) = 0;
  }
}

_QWORD *llvm::InlineAdvisorAnalysisPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t CachedResultImpl;

  CachedResultImpl = llvm::AnalysisManager<llvm::Module>::getCachedResultImpl(a3, (uint64_t)&llvm::InlineAdvisorAnalysis::Key, a2);
  if (CachedResultImpl)
    (*(void (**)(_QWORD, llvm::raw_ostream *))(**(_QWORD **)(CachedResultImpl + 24) + 32))(*(_QWORD *)(CachedResultImpl + 24), *a1);
  else
    sub_1C4816AD8(*a1, "No Inline Advisor\n");
  return llvm::InstCountPass::run(a4);
}

void sub_1C619A4E4(llvm::InlineAdvisor *a1)
{
  llvm::InlineAdvisor::~InlineAdvisor(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C619A508(int a1, llvm::raw_ostream *a2)
{
  return sub_1C4816AD8(a2, "Unimplemented InlineAdvisor print\n");
}

_QWORD *sub_1C619A518(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  *a1 = &unk_1E8138308;
  v4 = (unsigned __int8 *)a1[4];
  v2 = (uint64_t)(a1 + 4);
  v3 = v4;
  if (v4)
    llvm::MetadataTracking::untrack(v2, v3);
  return a1;
}

void sub_1C619A554(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  *a1 = &unk_1E8138308;
  v3 = (unsigned __int8 *)a1[4];
  v1 = (uint64_t)(a1 + 4);
  v2 = v3;
  if (v3)
    llvm::MetadataTracking::untrack(v1, v2);
  JUMPOUT(0x1CAA32FC0);
}

llvm::cl::Option *sub_1C619A5AC(llvm::cl::Option *a1, char *a2, __n128 *a3, _DWORD **a4, _WORD *a5)
{
  uint64_t v10;

  v10 = sub_1C47AD050((uint64_t)a1, 0, 0);
  *(_DWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = &off_1E7FA9DC8;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)v10 = &unk_1E819E418;
  *(_QWORD *)(v10 + 152) = &unk_1E819E230;
  *(_QWORD *)(v10 + 160) = &off_1E7FA9D80;
  *(_QWORD *)(v10 + 184) = v10 + 160;
  sub_1C4E61394(v10, a2, a3, a4, a5);
  llvm::cl::Option::addArgument(a1);
  return a1;
}

uint64_t sub_1C619A658(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 32);
  if (!v1)
    return sub_1C4E61900(a1);
  *(_QWORD *)(a1 + 40) = v1;
  operator delete(v1);
  return sub_1C4E61900(a1);
}

uint64_t llvm::InlineSizeEstimatorAnalysis::run()
{
  return 0;
}

_QWORD *llvm::InlineSizeEstimatorAnalysisPrinterPass::run@<X0>(llvm::raw_ostream **a1@<X0>, llvm::Value *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  llvm::raw_ostream *v7;
  size_t v8;
  char *Name;
  size_t v10;
  void *v11;
  llvm::raw_ostream *v12;
  uint64_t ResultImpl;

  v7 = sub_1C4816AD8(*a1, "[InlineSizeEstimatorAnalysis] size estimate for ");
  Name = llvm::Value::getName(a2);
  v10 = v8;
  v11 = (void *)*((_QWORD *)v7 + 4);
  if (v8 <= *((_QWORD *)v7 + 3) - (_QWORD)v11)
  {
    if (v8)
    {
      memcpy(v11, Name, v8);
      *((_QWORD *)v7 + 4) += v10;
    }
  }
  else
  {
    llvm::raw_ostream::write(v7, Name, v8);
  }
  v12 = sub_1C4816AD8(v7, ": ");
  ResultImpl = llvm::AnalysisManager<llvm::Function>::getResultImpl(a3, &llvm::InlineSizeEstimatorAnalysis::Key, (uint64_t)a2);
  if (*(_BYTE *)(ResultImpl + 16))
    llvm::raw_ostream::operator<<(v12, *(_QWORD *)(ResultImpl + 8));
  else
    llvm::operator<<(v12);
  sub_1C4816AD8(v12, "\n");
  return llvm::InstCountPass::run(a4);
}

uint64_t llvm::createInstCountPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return sub_1C4E62168(v1);
}

_QWORD *sub_1C619A814(_QWORD *a1)
{
  *a1 = &unk_1E8138548;
  MEMORY[0x1CAA32FB4](a1[1], 8);
  return a1;
}

void sub_1C619A850(_QWORD *a1)
{
  *a1 = &unk_1E8138548;
  MEMORY[0x1CAA32FB4](a1[1], 8);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C619A89C(_QWORD *a1)
{
  *a1 = &unk_1E8138548;
  MEMORY[0x1CAA32FB4](a1[1], 8);
  return a1;
}

void sub_1C619A8D8(_QWORD *a1)
{
  *a1 = &unk_1E8138548;
  MEMORY[0x1CAA32FB4](a1[1], 8);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::replaceAndRecursivelySimplify(llvm::Instruction *a1, llvm::Value *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t Module;
  llvm::Instruction *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::Type *v16;
  llvm::DSOLocalEquivalent **v17;
  int v18;
  BOOL v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  llvm::UndefValue *v23;
  llvm::Value *v24;
  llvm::Instruction *v25;
  uint64_t v26;
  int v27;
  uint64_t v29[5];
  __int16 v30;
  llvm::Instruction *v31;
  uint64_t v32;
  int64x2_t v33;
  int64x2_t v34;
  int64x2_t v35;
  int64x2_t v36;
  void *v37;
  uint64_t v38;
  _QWORD v39[10];

  v39[8] = *MEMORY[0x1E0C80C00];
  v31 = a1;
  v32 = 1;
  v33 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v34 = v33;
  v35 = v33;
  v36 = v33;
  v37 = v39;
  v38 = 0x800000000;
  Module = llvm::Instruction::getModule(a1);
  if (a2)
  {
    v12 = v31;
    v13 = *((_QWORD *)v31 + 1);
    if (v13)
    {
      do
      {
        if (*(llvm::Instruction **)(v13 + 24) != v31)
        {
          v29[0] = *(_QWORD *)(v13 + 24);
          sub_1C4E7C77C((uint64_t)&v32, v29);
        }
        v13 = *(_QWORD *)(v13 + 8);
      }
      while (v13);
      v12 = v31;
    }
    llvm::Value::doRAUW(v12, a2, (llvm::Value *)1);
    if (*((_QWORD *)v31 + 5))
    {
      v18 = *((unsigned __int8 *)v31 + 16);
      v19 = (v18 - 38) > 0x38 || ((1 << (v18 - 38)) & 0x100060000000001) == 0;
      if (v19 && (v18 - 29) >= 0xB && (llvm::Instruction::mayHaveSideEffects(v31) & 1) == 0)
        llvm::Instruction::eraseFromParent(v31);
    }
  }
  else
  {
    sub_1C4E7C77C((uint64_t)&v32, (uint64_t *)&v31);
  }
  if ((_DWORD)v38)
  {
    v20 = 0;
    v21 = 0;
    v22 = Module + 272;
    while (1)
    {
      v31 = (llvm::Instruction *)*((_QWORD *)v37 + v21);
      v29[0] = v22;
      v29[1] = a3;
      v29[2] = a4;
      v29[3] = a5;
      v29[4] = 0;
      v30 = 257;
      v23 = llvm::SimplifyInstruction(v31, (uint64_t)v29, v14, v15, v16, v17);
      if (!v23)
      {
        if (a6)
          sub_1C4E7C77C(a6, (uint64_t *)&v31);
        goto LABEL_30;
      }
      v24 = v23;
      v25 = v31;
      v26 = *((_QWORD *)v31 + 1);
      if (v26)
      {
        do
        {
          v29[0] = *(_QWORD *)(v26 + 24);
          sub_1C4E7C77C((uint64_t)&v32, v29);
          v26 = *(_QWORD *)(v26 + 8);
        }
        while (v26);
        v25 = v31;
      }
      v20 = 1;
      llvm::Value::doRAUW(v25, v24, (llvm::Value *)1);
      if (*((_QWORD *)v31 + 5))
      {
        v27 = *((unsigned __int8 *)v31 + 16);
        if ((v27 - 38) >= 0x39)
        {
          if ((v27 - 29) >= 0xB)
            goto LABEL_33;
        }
        else if (((0x100060000000001uLL >> (v27 - 38)) & 1) == 0 && (v27 - 29) > 0xA)
        {
LABEL_33:
          if ((llvm::Instruction::mayHaveSideEffects(v31) & 1) == 0)
            llvm::Instruction::eraseFromParent(v31);
        }
      }
LABEL_30:
      if ((_DWORD)v38 == ++v21)
        goto LABEL_36;
    }
  }
  v20 = 0;
LABEL_36:
  if (v37 != v39)
    free(v37);
  if ((v32 & 1) == 0)
    MEMORY[0x1CAA32FB4](v33.i64[0], 8);
  return v20 & 1;
}

void sub_1C619ABDC(uint64_t a1)
{
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(a1 + 8));
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)a1);
}

void sub_1C619AC04(uint64_t a1)
{
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)(a1 + 8));
  llvm::IRBuilderFolder::~IRBuilderFolder((llvm::IRBuilderFolder *)a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::Value **sub_1C619AC40(uint64_t a1, llvm *a2, llvm::Constant *a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E640C8(a2, a3, a1 + 24, 3, a5, a6);
}

llvm::ValueHandleBase *sub_1C619AC58(uint64_t a1, llvm *a2, llvm::Constant *a3, uint64_t a4, const llvm::DataLayout *a5, llvm::DSOLocalEquivalent **a6)
{
  return sub_1C4E65634(a2, a3, a1 + 24, 3, a5, a6);
}

llvm::Value **sub_1C619AC70(uint64_t a1, uint64_t a2, llvm *a3, llvm::UndefValue *a4)
{
  return sub_1C4E66730(a2, a3, a4, a1 + 24, 3);
}

llvm::UndefValue *sub_1C619AC8C(uint64_t a1, llvm::GetElementPtrInst *a2, unsigned __int8 *a3, llvm::Value *a4, uint64_t a5, int a6)
{
  return sub_1C4E6B244(a2, a3, a4, a5, a6, a1 + 24);
}

llvm::Constant *sub_1C619ACAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C4E6A420(a2, a3, a4, a1 + 24, 3);
}

llvm::UndefValue *sub_1C619ACC8(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *FAdd;

  FAdd = llvm::ConstantExpr::getFAdd(this, a3, a3, a4);
  return llvm::ConstantFoldConstant((uint64_t)FAdd, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619ACF8(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  llvm::ValueHandleBase *Sub;

  Sub = llvm::ConstantExpr::getSub(this, a3, a4, a5);
  return llvm::ConstantFoldConstant((uint64_t)Sub, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619AD30(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *FSub;

  FSub = llvm::ConstantExpr::getFSub(this, a3, a3, a4);
  return llvm::ConstantFoldConstant((uint64_t)FSub, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619AD60(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  llvm::ValueHandleBase *Mul;

  Mul = llvm::ConstantExpr::getMul(this, a3, a4, a5);
  return llvm::ConstantFoldConstant((uint64_t)Mul, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619AD98(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *FMul;

  FMul = llvm::ConstantExpr::getFMul(this, a3, a3, a4);
  return llvm::ConstantFoldConstant((uint64_t)FMul, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619ADC8(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *UDiv;

  UDiv = llvm::ConstantExpr::getUDiv(this, a3, a4, a4);
  return llvm::ConstantFoldConstant((uint64_t)UDiv, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619ADFC(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *SDiv;

  SDiv = llvm::ConstantExpr::getSDiv(this, a3, a4, a4);
  return llvm::ConstantFoldConstant((uint64_t)SDiv, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619AE30(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *FDiv;

  FDiv = llvm::ConstantExpr::getFDiv(this, a3, a3, a4);
  return llvm::ConstantFoldConstant((uint64_t)FDiv, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619AE60(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *URem;

  URem = llvm::ConstantExpr::getURem(this, a3, a3, a4);
  return llvm::ConstantFoldConstant((uint64_t)URem, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619AE90(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  llvm::ValueHandleBase *SRem;

  SRem = llvm::ConstantExpr::getSRem(this, a3, a3, a4);
  return llvm::ConstantFoldConstant((uint64_t)SRem, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619AEC0(uint64_t a1, llvm::ConstantExpr *a2, llvm::Constant *a3, uint64_t a4, uint64_t a5, llvm::Type *a6)
{
  llvm::ValueHandleBase *FRem;

  FRem = llvm::ConstantExpr::getFRem(a2, a3, a3, a4, a5, a6);
  return llvm::ConstantFoldConstant((uint64_t)FRem, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619AEF0(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, llvm::Constant *a5)
{
  llvm::ValueHandleBase *Shl;

  Shl = llvm::ConstantExpr::getShl(this, a3, a4, a5);
  return llvm::ConstantFoldConstant((uint64_t)Shl, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619AF28(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t LShr;

  LShr = llvm::ConstantExpr::getLShr(this, a3, a4, a4);
  return llvm::ConstantFoldConstant(LShr, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619AF5C(uint64_t a1, llvm::ConstantExpr *a2, llvm::Constant *a3, llvm::Constant *a4, uint64_t a5, llvm::Type *a6)
{
  llvm::ValueHandleBase *AShr;

  AShr = llvm::ConstantExpr::getAShr(a2, a3, a4, (BOOL)a4, a5, a6);
  return llvm::ConstantFoldConstant((uint64_t)AShr, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619AF90(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4)
{
  uint64_t Xor;

  Xor = llvm::ConstantExpr::getXor(this, a3, a3, a4);
  return llvm::ConstantFoldConstant(Xor, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619AFC0(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, uint64_t a5, llvm::Type *a6)
{
  llvm::ValueHandleBase *v7;

  v7 = llvm::ConstantExpr::get(this, a3, a4, 0, 0, a6);
  return llvm::ConstantFoldConstant((uint64_t)v7, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619AFFC(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, int a4)
{
  llvm::ValueHandleBase *Neg;

  Neg = llvm::ConstantExpr::getNeg(this, a3, a4);
  return llvm::ConstantFoldConstant((uint64_t)Neg, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619B030(uint64_t a1, llvm::ConstantExpr *this, uint64_t a3, uint64_t a4, llvm::Type *a5)
{
  uint64_t FNeg;

  FNeg = llvm::ConstantExpr::getFNeg(this, this, a3, a4, a5);
  return llvm::ConstantFoldConstant(FNeg, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619B05C(uint64_t a1, llvm::Constant **this)
{
  uint64_t Not;

  Not = llvm::ConstantExpr::getNot(this, (llvm::Constant *)this);
  return llvm::ConstantFoldConstant(Not, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619B088(uint64_t a1, llvm::ConstantExpr *this, unsigned __int8 *a3, uint64_t a4, llvm::Type *a5)
{
  uint64_t v6;

  v6 = llvm::ConstantExpr::get(this, a3, 0, 0, a5);
  return llvm::ConstantFoldConstant(v6, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619B0C0(uint64_t a1, llvm::Constant **a2, llvm::Constant *a3)
{
  llvm::UndefValue *v4;

  if (*a2 == a3)
    return (llvm::UndefValue *)a2;
  v4 = sub_1C537D3B8((llvm *)0x31, (uint64_t)a2, a3, 0);
  return llvm::ConstantFoldConstant((uint64_t)v4, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619B10C(uint64_t a1, llvm::Constant **a2, llvm::Constant *a3)
{
  llvm::UndefValue *v4;

  if (*a2 == a3)
    return (llvm::UndefValue *)a2;
  v4 = sub_1C537D3B8((llvm *)0x30, (uint64_t)a2, a3, 0);
  return llvm::ConstantFoldConstant((uint64_t)v4, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619B158(uint64_t a1, llvm::Constant **a2, llvm::Constant *a3)
{
  llvm::UndefValue *v4;

  if (*a2 == a3)
    return (llvm::UndefValue *)a2;
  v4 = sub_1C537D3B8((llvm *)0x2F, (uint64_t)a2, a3, 0);
  return llvm::ConstantFoldConstant((uint64_t)v4, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619B1A4(uint64_t a1, unsigned __int16 a2, unsigned __int8 *a3, llvm::Constant *a4)
{
  llvm::UndefValue *Compare;

  Compare = llvm::ConstantExpr::getCompare((llvm::ConstantExpr *)a2, a3, a4, 0);
  return llvm::ConstantFoldConstant((uint64_t)Compare, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619B1DC(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Type *a4)
{
  llvm::UndefValue *Element;

  Element = llvm::ConstantExpr::getExtractElement(this, a3, 0, a4);
  return llvm::ConstantFoldConstant((uint64_t)Element, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619B210(uint64_t a1, llvm::ConstantExpr *this, llvm::Constant *a3, llvm::Constant *a4, llvm::Type *a5)
{
  llvm *InsertElement;

  InsertElement = llvm::ConstantExpr::getInsertElement(this, a3, a4, 0, a5);
  return llvm::ConstantFoldConstant((uint64_t)InsertElement, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619B248(uint64_t a1, llvm *a2, llvm *a3, int *a4, _BOOL8 a5)
{
  llvm::UndefValue *ShuffleVector;

  ShuffleVector = llvm::ConstantExpr::getShuffleVector(a2, a3, a4, a5, 0);
  return llvm::ConstantFoldConstant((uint64_t)ShuffleVector, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619B284(uint64_t a1, llvm::Constant *this, unsigned int *a3, uint64_t a4)
{
  llvm::UndefValue *Value;

  Value = llvm::ConstantExpr::getExtractValue(this, a3, a4, 0);
  return llvm::ConstantFoldConstant((uint64_t)Value, *(llvm::Type **)(a1 + 16), 0);
}

llvm::UndefValue *sub_1C619B2BC(uint64_t a1, llvm::Constant *a2, uint64_t *a3, _DWORD *a4, uint64_t a5)
{
  void *InsertValue;

  InsertValue = llvm::ConstantExpr::getInsertValue(a2, a3, a4, a5, 0);
  return llvm::ConstantFoldConstant((uint64_t)InsertValue, *(llvm::Type **)(a1 + 16), 0);
}

uint64_t sub_1C619B2F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int SwappedPredicate;
  _DWORD **v7;

  if (!a2)
    return 0;
  v2 = *(_QWORD *)(a2 - 64);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 == v2)
  {
    v4 = *(_QWORD *)(a2 - 32);
    if (*(_QWORD *)(a1 + 16) == v4)
    {
      v7 = (_DWORD **)a1;
      SwappedPredicate = *(_WORD *)(a2 + 18) & 0x3F;
LABEL_12:
      **v7 = SwappedPredicate;
      return 1;
    }
  }
  else
  {
    v4 = *(_QWORD *)(a2 - 32);
  }
  if (v3 == v4)
  {
    v7 = (_DWORD **)a1;
    if (*(_QWORD *)(a1 + 16) == v2)
    {
      SwappedPredicate = llvm::CmpInst::getSwappedPredicate(*(_WORD *)(a2 + 18) & 0x3F);
      goto LABEL_12;
    }
  }
  return 0;
}

uint64_t sub_1C619B38C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C4E7C8C0((uint64_t)v5, a2, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

llvm::raw_ostream *llvm::Interval::print(llvm::Interval *this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v4;
  llvm::Value **v5;
  llvm::Value **v6;
  llvm::Value *v7;
  llvm::Value **v8;
  llvm::Value **v9;
  llvm::Value *v10;
  llvm::raw_ostream *result;
  llvm::Value **v12;
  llvm::Value **i;
  llvm::Value *v14;

  v4 = sub_1C4816AD8(a2, "-------------------------------------------------------------\n");
  sub_1C4816AD8(v4, "Interval Contents:\n");
  v5 = (llvm::Value **)*((_QWORD *)this + 1);
  v6 = (llvm::Value **)*((_QWORD *)this + 2);
  while (v5 != v6)
  {
    v7 = *v5++;
    llvm::Value::print(v7, a2, 0);
    sub_1C4816AD8(a2, "\n");
  }
  sub_1C4816AD8(a2, "Interval Predecessors:\n");
  v8 = (llvm::Value **)*((_QWORD *)this + 7);
  v9 = (llvm::Value **)*((_QWORD *)this + 8);
  while (v8 != v9)
  {
    v10 = *v8++;
    llvm::Value::print(v10, a2, 0);
    sub_1C4816AD8(a2, "\n");
  }
  result = sub_1C4816AD8(a2, "Interval Successors:\n");
  v12 = (llvm::Value **)*((_QWORD *)this + 4);
  for (i = (llvm::Value **)*((_QWORD *)this + 5); v12 != i; result = sub_1C4816AD8(a2, "\n"))
  {
    v14 = *v12++;
    llvm::Value::print(v14, a2, 0);
  }
  return result;
}

llvm::IntervalPartition *llvm::IntervalPartition::IntervalPartition(llvm::IntervalPartition *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::IntervalPartition::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E81386F0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = (char *)this + 40;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82DF48);
  if (v2 != -1)
  {
    v6[0] = sub_1C4E7CBEC;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82DF48, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

void llvm::IntervalPartition::releaseMemory(llvm::IntervalPartition *this)
{
  _QWORD **v2;
  _QWORD **v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = (_QWORD **)*((_QWORD *)this + 8);
  v3 = (_QWORD **)*((_QWORD *)this + 9);
  while (v2 != v3)
  {
    if (*v2)
    {
      v4 = sub_1C619BA10(*v2);
      MEMORY[0x1CAA32FC0](v4, 0xA0C40CC6163FFLL);
    }
    ++v2;
  }
  v6 = (_QWORD *)*((_QWORD *)this + 5);
  v5 = (_QWORD *)((char *)this + 40);
  sub_1C6143384(v6);
  v5[1] = 0;
  v5[2] = 0;
  *(v5 - 1) = v5;
  *v5 = 0;
  v5[4] = v5[3];
}

llvm::raw_ostream *llvm::IntervalPartition::print(llvm::raw_ostream *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  llvm::Interval **v3;
  llvm::Interval **i;
  llvm::Interval *v6;

  v3 = (llvm::Interval **)*((_QWORD *)this + 8);
  for (i = (llvm::Interval **)*((_QWORD *)this + 9); v3 != i; this = llvm::Interval::print(v6, a2))
    v6 = *v3++;
  return this;
}

_QWORD *llvm::IntervalPartition::addIntervalToPartition(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *result;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t *v8;
  unint64_t v9;

  v4 = *(uint64_t **)(a1 + 72);
  if ((unint64_t)v4 >= *(_QWORD *)(a1 + 80))
  {
    result = sub_1C4ABDC28((void **)(a1 + 64), a2);
  }
  else
  {
    *v4 = a2;
    result = v4 + 1;
  }
  *(_QWORD *)(a1 + 72) = result;
  v6 = *(unint64_t **)(a2 + 8);
  v7 = *(unint64_t **)(a2 + 16);
  if (v6 != v7)
  {
    v8 = (uint64_t *)(a1 + 32);
    do
    {
      v9 = *v6++;
      result = sub_1C4E7DD38(v8, v9, v9, a2);
    }
    while (v6 != v7);
  }
  return result;
}

_QWORD *llvm::IntervalPartition::updatePredecessors(_QWORD *result, uint64_t *a2)
{
  unint64_t *v2;
  unint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v13 = *a2;
  v2 = (unint64_t *)a2[4];
  v3 = (unint64_t *)a2[5];
  if (v2 != v3)
  {
    v4 = result + 5;
    do
    {
      v5 = (_QWORD *)*v4;
      v6 = v4;
      if (*v4)
      {
        v7 = *v2;
        v6 = v4;
        do
        {
          v8 = v5[4];
          v9 = v8 >= v7;
          if (v8 >= v7)
            v10 = v5;
          else
            v10 = v5 + 1;
          if (v9)
            v6 = v5;
          v5 = (_QWORD *)*v10;
        }
        while (*v10);
      }
      v11 = v6[5];
      v12 = *(_QWORD **)(v11 + 64);
      if ((unint64_t)v12 >= *(_QWORD *)(v11 + 72))
      {
        result = sub_1C4DFEA3C((void **)(v11 + 56), &v13);
      }
      else
      {
        *v12 = v13;
        result = v12 + 1;
      }
      *(_QWORD *)(v11 + 64) = result;
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t llvm::IntervalPartition::runOnFunction(llvm::IntervalPartition *this, llvm::Function *a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t *v12;
  __int128 v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD v17[2];
  char *v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[3];
  char v23;

  v18 = 0;
  v19 = 0;
  v22[0] = 0;
  v22[1] = 0;
  v20 = 0;
  v21 = v22;
  v23 = 0;
  v22[2] = a2;
  v3 = *((_QWORD *)a2 + 10);
  if (v3)
    v4 = (uint64_t *)(v3 - 24);
  else
    v4 = 0;
  sub_1C4E7CEE0((uint64_t)&v18, v4);
  v5 = *((_QWORD *)v19 - 2);
  *((_QWORD *)this + 7) = v5;
  llvm::IntervalPartition::addIntervalToPartition((uint64_t)this, v5);
  sub_1C619B910((uint64_t)&v18);
  v6 = 0;
  v7 = 0;
  memset(v17, 0, sizeof(v17));
  v14 = 0u;
  v15 = 0;
  v16 = v17;
  while (1)
  {
    v8 = v18;
    if (v19 - v18 == v7 - (_QWORD)v6)
      break;
LABEL_13:
    llvm::IntervalPartition::addIntervalToPartition((uint64_t)this, *((_QWORD *)v19 - 2));
    sub_1C619B910((uint64_t)&v18);
    v7 = *((_QWORD *)&v14 + 1);
    v6 = (_QWORD *)v14;
  }
  while (v8 != v19)
  {
    if (*(_QWORD *)v8 != *v6 || *((_QWORD *)v8 + 1) != v6[1])
      goto LABEL_13;
    v8 += 16;
    v6 += 2;
  }
  sub_1C619BAA4((char **)&v14);
  v10 = (uint64_t **)*((_QWORD *)this + 8);
  v11 = (uint64_t **)*((_QWORD *)this + 9);
  while (v10 != v11)
  {
    v12 = *v10++;
    llvm::IntervalPartition::updatePredecessors(this, v12);
  }
  sub_1C619BAA4(&v18);
  return 0;
}

uint64_t sub_1C619B910(uint64_t a1)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t **v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;

  v2 = *(_QWORD *)(a1 + 8);
  do
  {
    v3 = *(uint64_t ***)(v2 - 8);
    v4 = *(uint64_t ***)(*(_QWORD *)(v2 - 16) + 40);
    while (v3 != v4)
    {
      v5 = sub_1C4E7CEE0(a1, *v3);
      v3 = (uint64_t **)(*(_QWORD *)(v2 - 8) + 8);
      *(_QWORD *)(v2 - 8) = v3;
      if ((v5 & 1) != 0)
        return a1;
    }
    v6 = *(_QWORD *)(a1 + 8);
    if (*(_BYTE *)(a1 + 56))
    {
      v7 = *(_QWORD **)(v6 - 16);
      if (v7)
      {
        v9 = sub_1C619BA10(v7);
        MEMORY[0x1CAA32FC0](v9, 0xA0C40CC6163FFLL);
        v6 = *(_QWORD *)(a1 + 8);
      }
    }
    v2 = v6 - 16;
    *(_QWORD *)(a1 + 8) = v6 - 16;
  }
  while (*(_QWORD *)a1 != v6 - 16);
  return a1;
}

void sub_1C619B9B8(uint64_t a1)
{
  sub_1C619BA60(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C619B9DC(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
}

llvm::IntervalPartition *llvm::callDefaultCtor<llvm::IntervalPartition>()
{
  llvm::IntervalPartition *v0;

  v0 = (llvm::IntervalPartition *)operator new();
  return llvm::IntervalPartition::IntervalPartition(v0);
}

_QWORD *sub_1C619BA10(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
  return a1;
}

void sub_1C619BA60(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E81386F0;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  sub_1C6143384(*(_QWORD **)(a1 + 40));
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

char **sub_1C619BAA4(char **a1)
{
  char *v2;
  char *i;
  char *v5;
  _QWORD *v6;
  _QWORD *v7;

  if (*((_BYTE *)a1 + 56))
  {
    v5 = *a1;
    for (i = a1[1]; v5 != i; a1[1] = i)
    {
      v6 = (_QWORD *)*((_QWORD *)i - 2);
      if (v6)
      {
        v7 = sub_1C619BA10(v6);
        MEMORY[0x1CAA32FC0](v7, 0xA0C40CC6163FFLL);
        v5 = *a1;
        i = a1[1];
      }
      i -= 16;
    }
  }
  sub_1C47655E8((uint64_t)(a1 + 3), a1[4]);
  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    operator delete(v2);
  }
  return a1;
}

llvm::LazyBranchProbabilityInfoPass *llvm::LazyBranchProbabilityInfoPass::LazyBranchProbabilityInfoPass(llvm::LazyBranchProbabilityInfoPass *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = llvm::LazyBranchProbabilityInfoPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E8138790;
  *((_QWORD *)this + 4) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82DF50);
  if (v2 != -1)
  {
    v6[0] = sub_1C4E7DE58;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82DF50, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

llvm::raw_ostream *llvm::LazyBranchProbabilityInfoPass::print(llvm::LazyBranchProbabilityInfoPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 4);
  if (!*(_BYTE *)(v4 + 248))
  {
    llvm::BranchProbabilityInfo::calculate(*((_QWORD *)this + 4), *(const llvm::Function **)(v4 + 256), *(_QWORD *)(v4 + 264), *(uint64_t **)(v4 + 272), 0, 0);
    *(_BYTE *)(v4 + 248) = 1;
  }
  return llvm::BranchProbabilityInfo::print((llvm::BranchProbabilityInfo *)v4, a2);
}

llvm::AnalysisUsage *llvm::LazyBranchProbabilityInfoPass::getAnalysisUsage(llvm::LazyBranchProbabilityInfoPass *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage *result;

  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::DominatorTreeWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::LoopInfoWrapperPass::ID);
  result = llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::TargetLibraryInfoWrapperPass::ID);
  *((_BYTE *)a2 + 160) = 1;
  return result;
}

llvm::AnalysisUsage *llvm::LazyBranchProbabilityInfoPass::getLazyBPIAnalysisUsage(llvm::LazyBranchProbabilityInfoPass *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage::addRequiredTransitiveID(this, llvm::LazyBranchProbabilityInfoPass::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(this, llvm::LoopInfoWrapperPass::ID);
  return llvm::AnalysisUsage::addRequiredTransitiveID(this, llvm::TargetLibraryInfoWrapperPass::ID);
}

void llvm::initializeLazyBPIPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v3;
  llvm *v4;
  _QWORD *v5;
  _QWORD v6[2];

  v4 = this;
  v3 = atomic_load(&qword_1ED82DF50);
  if (v3 != -1)
  {
    v6[0] = sub_1C4E7DE58;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED82DF50, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)this);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)this);
}

void sub_1C619BD2C(llvm::Pass *a1)
{
  sub_1C619BD78(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::LazyBranchProbabilityInfoPass *llvm::callDefaultCtor<llvm::LazyBranchProbabilityInfoPass>()
{
  llvm::LazyBranchProbabilityInfoPass *v0;

  v0 = (llvm::LazyBranchProbabilityInfoPass *)operator new();
  return llvm::LazyBranchProbabilityInfoPass::LazyBranchProbabilityInfoPass(v0);
}

void sub_1C619BD78(llvm::Pass *this)
{
  uint64_t v2;
  uint64_t v3;
  llvm::Pass *v4;

  *(_QWORD *)this = &off_1E8138790;
  v2 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v2)
  {
    v4 = this;
    v3 = sub_1C4DC0BBC(v2);
    MEMORY[0x1CAA32FC0](v3, 0x1060C4069C990F3);
    llvm::Pass::~Pass(v4);
  }
  else
  {
    llvm::Pass::~Pass(this);
  }
}

void llvm::initializeLazyBlockFrequencyInfoPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82DF58);
  if (v2 != -1)
  {
    v5[0] = sub_1C4E7E27C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82DF58, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::LazyBlockFrequencyInfoPass *llvm::LazyBlockFrequencyInfoPass::LazyBlockFrequencyInfoPass(llvm::LazyBlockFrequencyInfoPass *this)
{
  llvm::PassRegistry *v2;
  unint64_t v3;
  unint64_t PassRegistry;
  _QWORD *v6;
  _QWORD v7[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = llvm::LazyBlockFrequencyInfoPass::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E8138830;
  v2 = (llvm::PassRegistry *)llvm::BlockFrequencyInfo::BlockFrequencyInfo((_QWORD *)this + 4);
  *((_BYTE *)this + 40) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(v2);
  v3 = atomic_load(&qword_1ED82DF58);
  if (v3 != -1)
  {
    v7[0] = sub_1C4E7E27C;
    v7[1] = &PassRegistry;
    v6 = v7;
    std::__call_once(&qword_1ED82DF58, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

uint64_t llvm::LazyBlockFrequencyInfoPass::print(llvm::LazyBlockFrequencyInfoPass *this, llvm::raw_ostream *a2, const llvm::Module *a3)
{
  llvm::BlockFrequencyInfo *v4;

  v4 = (llvm::BlockFrequencyInfo *)sub_1C619C0A4((uint64_t)this + 32);
  return llvm::BlockFrequencyInfo::print(v4, a2);
}

llvm::AnalysisUsage *llvm::LazyBlockFrequencyInfoPass::getAnalysisUsage(llvm::LazyBlockFrequencyInfoPass *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage *result;

  llvm::LazyBranchProbabilityInfoPass::getLazyBPIAnalysisUsage(a2, a2);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::DominatorTreeWrapperPass::ID);
  result = llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::LoopInfoWrapperPass::ID);
  *((_BYTE *)a2 + 160) = 1;
  return result;
}

llvm::AnalysisUsage *llvm::LazyBlockFrequencyInfoPass::getLazyBFIAnalysisUsage(llvm::LazyBlockFrequencyInfoPass *this, llvm::AnalysisUsage *a2)
{
  llvm::LazyBranchProbabilityInfoPass::getLazyBPIAnalysisUsage(this, a2);
  llvm::AnalysisUsage::addRequiredTransitiveID(this, llvm::LazyBlockFrequencyInfoPass::ID);
  return llvm::AnalysisUsage::addRequiredTransitiveID(this, llvm::LoopInfoWrapperPass::ID);
}

void llvm::initializeLazyBFIPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v3;
  llvm *v4;
  _QWORD *v5;
  _QWORD v6[2];

  llvm::initializeLazyBPIPassPass(this, a2);
  v4 = this;
  v3 = atomic_load(&qword_1ED82DF58);
  if (v3 != -1)
  {
    v6[0] = sub_1C4E7E27C;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED82DF58, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)this);
}

void sub_1C619C008(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8138830;
  llvm::BlockFrequencyInfo::~BlockFrequencyInfo((llvm::BlockFrequencyInfo *)(a1 + 32));
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C619C038(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E8138830;
  llvm::BlockFrequencyInfo::~BlockFrequencyInfo((llvm::BlockFrequencyInfo *)(a1 + 32));
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::LazyBlockFrequencyInfoPass *llvm::callDefaultCtor<llvm::LazyBlockFrequencyInfoPass>()
{
  llvm::LazyBlockFrequencyInfoPass *v0;

  v0 = (llvm::LazyBlockFrequencyInfoPass *)operator new();
  return llvm::LazyBlockFrequencyInfoPass::LazyBlockFrequencyInfoPass(v0);
}

uint64_t sub_1C619C0A4(uint64_t a1)
{
  llvm::Value *v3;
  uint64_t v4;

  if (!*(_BYTE *)(a1 + 8))
  {
    v3 = *(llvm::Value **)(a1 + 16);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
    if (!*(_BYTE *)(v4 + 248))
    {
      llvm::BranchProbabilityInfo::calculate(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 32), *(const llvm::Function **)(v4 + 256), *(_QWORD *)(v4 + 264), *(uint64_t **)(v4 + 272), 0, 0);
      *(_BYTE *)(v4 + 248) = 1;
    }
    llvm::BlockFrequencyInfo::calculate((uint64_t **)a1, v3);
    *(_BYTE *)(a1 + 8) = 1;
  }
  return a1;
}

llvm::raw_ostream *llvm::LazyCallGraph::Node::dump(llvm::LazyCallGraph::Node *this)
{
  llvm *v2;
  llvm::raw_ostream *result;
  _BYTE *v4;

  v2 = llvm::dbgs(this);
  result = sub_1C4E7EE34(v2, (uint64_t)this);
  v4 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v4 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v4 + 1;
  *v4 = 10;
  return result;
}

uint64_t llvm::LazyCallGraph::LazyCallGraph(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;

  v4 = sub_1C4E854AC(a1, a2);
  *(_DWORD *)(v4 + 112) = 0;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;
  *(_DWORD *)(v4 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = 0;
  v5 = *(_DWORD *)(v4 + 108);
  *(_DWORD *)(v4 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a2 + 108) = v5;
  v6 = *(_DWORD *)(v4 + 112);
  *(_DWORD *)(v4 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a2 + 112) = v6;
  sub_1C4E85050(v4 + 120, a2 + 120);
  sub_1C4E854AC(a1 + 192, a2 + 192);
  *(_DWORD *)(a1 + 304) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a2 + 288) = 0;
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  *(_DWORD *)(a2 + 296) = 0;
  v7 = *(_DWORD *)(a1 + 300);
  *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
  *(_DWORD *)(a2 + 300) = v7;
  v8 = *(_DWORD *)(a1 + 304);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
  *(_DWORD *)(a2 + 304) = v8;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = a1 + 344;
  *(_QWORD *)(a1 + 336) = 0x400000000;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 376) = a1 + 392;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 408) = a1 + 424;
  *(_QWORD *)(a1 + 416) = 0x1000000000;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_DWORD *)(a1 + 568) = 0;
  sub_1C4E41D14(a1 + 576, (unsigned int *)(a2 + 576));
  llvm::LazyCallGraph::updateGraphPtrs(a1);
  return a1;
}

BOOL llvm::LazyCallGraph::invalidate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  _QWORD v8[2];
  BOOL v9;

  v8[0] = a3;
  v8[1] = &llvm::LazyCallGraphAnalysis::Key;
  v4 = sub_1C477672C(a3 + 48, (uint64_t)&llvm::LazyCallGraphAnalysis::Key);
  v5 = *(_QWORD *)(a3 + 56);
  if (v5 == *(_QWORD *)(a3 + 48))
    v6 = (unsigned int *)(a3 + 68);
  else
    v6 = (unsigned int *)(a3 + 64);
  v9 = v4 != (_QWORD *)(v5 + 8 * *v6);
  return !sub_1C4DAA35C((uint64_t)v8) && !sub_1C4DD6D80((uint64_t)v8);
}

llvm::raw_ostream *llvm::LazyCallGraph::SCC::dump(llvm::LazyCallGraph::SCC *this)
{
  llvm *v2;
  llvm::raw_ostream *result;
  _BYTE *v4;

  v2 = llvm::dbgs(this);
  result = sub_1C4E7F5E0(v2, (uint64_t)this);
  v4 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v4 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v4 + 1;
  *v4 = 10;
  return result;
}

llvm::raw_ostream *llvm::LazyCallGraph::RefSCC::dump(llvm::LazyCallGraph::RefSCC *this)
{
  llvm *v2;
  llvm::raw_ostream *result;
  _BYTE *v4;

  v2 = llvm::dbgs(this);
  result = sub_1C4E7FB30(v2, (uint64_t)this);
  v4 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v4 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v4 + 1;
  *v4 = 10;
  return result;
}

uint64_t llvm::LazyCallGraph::RefSCC::switchTrivialInternalEdgeToRef(llvm::LazyCallGraph::RefSCC *this, llvm::LazyCallGraph::Node *a2, llvm::LazyCallGraph::Node *a3)
{
  uint64_t result;
  uint64_t v5;
  llvm::LazyCallGraph::Node *v6;
  uint64_t v7;

  v6 = a3;
  v7 = 0;
  result = sub_1C4850EC8((uint64_t *)a2 + 9, &v6, &v7);
  v5 = v7;
  if (!(_DWORD)result)
    v5 = *((_QWORD *)a2 + 9) + 16 * *((unsigned int *)a2 + 22);
  *(_QWORD *)(*((_QWORD *)a2 + 3) + 8 * *(int *)(v5 + 8)) &= ~4uLL;
  return result;
}

uint64_t llvm::LazyCallGraph::RefSCC::switchOutgoingEdgeToCall(llvm::LazyCallGraph::RefSCC *this, llvm::LazyCallGraph::Node *a2, llvm::LazyCallGraph::Node *a3)
{
  uint64_t result;
  uint64_t v5;
  llvm::LazyCallGraph::Node *v6;
  uint64_t v7;

  v6 = a3;
  v7 = 0;
  result = sub_1C4850EC8((uint64_t *)a2 + 9, &v6, &v7);
  v5 = v7;
  if (!(_DWORD)result)
    v5 = *((_QWORD *)a2 + 9) + 16 * *((unsigned int *)a2 + 22);
  *(_QWORD *)(*((_QWORD *)a2 + 3) + 8 * *(int *)(v5 + 8)) |= 4uLL;
  return result;
}

uint64_t llvm::LazyCallGraph::RefSCC::switchOutgoingEdgeToRef(llvm::LazyCallGraph::RefSCC *this, llvm::LazyCallGraph::Node *a2, llvm::LazyCallGraph::Node *a3)
{
  uint64_t result;
  uint64_t v5;
  llvm::LazyCallGraph::Node *v6;
  uint64_t v7;

  v6 = a3;
  v7 = 0;
  result = sub_1C4850EC8((uint64_t *)a2 + 9, &v6, &v7);
  v5 = v7;
  if (!(_DWORD)result)
    v5 = *((_QWORD *)a2 + 9) + 16 * *((unsigned int *)a2 + 22);
  *(_QWORD *)(*((_QWORD *)a2 + 3) + 8 * *(int *)(v5 + 8)) &= ~4uLL;
  return result;
}

_QWORD *llvm::LazyCallGraph::RefSCC::replaceNodeFunction(int32x2_t **this, llvm::LazyCallGraph::Node *a2, llvm::Function *a3)
{
  uint64_t v6;
  int32x2_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *result;
  uint64_t v11;
  llvm::Function *v12;

  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a2 + 1) = a3;
  v7 = *this;
  v8 = (uint64_t *)&(*this)[12];
  v11 = v6;
  v12 = 0;
  if (sub_1C4850EC8(v8, &v11, &v12))
  {
    *(_QWORD *)v12 = -8192;
    v7[13] = vadd_s32(v7[13], (int32x2_t)0x1FFFFFFFFLL);
  }
  v9 = (uint64_t *)&(*this)[12];
  v12 = a3;
  result = sub_1C4E851E8(v9, &v12);
  result[1] = a2;
  return result;
}

unint64_t llvm::LazyCallGraph::initNode(llvm::LazyCallGraph *this, llvm::Function *a2)
{
  unint64_t v4;
  unint64_t v5;
  llvm::Function *v7;

  v4 = sub_1C4E7EC8C((uint64_t)this, (uint64_t)a2);
  v5 = v4;
  *(_QWORD *)(v4 + 16) = -1;
  if (!*(_BYTE *)(v4 + 96))
    llvm::LazyCallGraph::Node::populateSlow((llvm::LazyCallGraph::Node *)v4);
  v7 = a2;
  sub_1C4E851E8((uint64_t *)this + 12, &v7)[1] = v5;
  return v5;
}

_QWORD *sub_1C619C5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;

  v5 = (_QWORD *)sub_1C484358C(a1 + 192, 32, 3);
  *v5 = a2;
  v5[1] = v5 + 3;
  v5[2] = 0x100000000;
  if (*(_DWORD *)(a3 + 8))
    sub_1C614D378((uint64_t)(v5 + 1), a3);
  return v5;
}

unint64_t llvm::LazyCallGraph::insertInto(llvm::LazyCallGraph *this, llvm::Function *a2, llvm::LazyCallGraph::Node **a3)
{
  unint64_t result;

  result = sub_1C484358C((uint64_t)this, 104, 3);
  *a3 = (llvm::LazyCallGraph::Node *)result;
  *(_QWORD *)result = this;
  *(_QWORD *)(result + 8) = a2;
  *(_BYTE *)(result + 96) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = 0;
  return result;
}

_QWORD *llvm::LazyCallGraphPrinterPass::LazyCallGraphPrinterPass(_QWORD *this, llvm::raw_ostream *a2)
{
  *this = a2;
  return this;
}

_QWORD *llvm::LazyCallGraphDOTPrinterPass::LazyCallGraphDOTPrinterPass(_QWORD *this, llvm::raw_ostream *a2)
{
  *this = a2;
  return this;
}

uint64_t sub_1C619C6B4(uint64_t a1, const void **a2)
{
  const void *v3;
  const void **v4;
  void *v5;
  _DWORD *v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;

  if ((const void **)a1 != a2)
  {
    v4 = a2 + 2;
    v3 = *a2;
    if (*a2 != a2 + 2)
    {
      v5 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        v12 = a2;
        free(v5);
        a2 = v12;
        v3 = *v12;
      }
      *(_QWORD *)a1 = v3;
      v6 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_6;
    }
    v6 = a2 + 1;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, *a2, 8 * v8);
      goto LABEL_14;
    }
    if (*(_DWORD *)(a1 + 12) < v8)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v14 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
      a2 = v14;
    }
    else if ((_DWORD)v9)
    {
      v13 = *(unsigned int *)(a1 + 8);
      v15 = a2;
      memmove(*(void **)a1, v3, 8 * v9);
      v10 = v13;
      a2 = v15;
LABEL_12:
      v11 = *v6;
      if (v10 != v11)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v10), (char *)*a2 + 8 * v10, (_BYTE *)*a2 + 8 * v11 - ((_BYTE *)*a2 + 8 * v10));
LABEL_14:
      *(_DWORD *)(a1 + 8) = v8;
LABEL_6:
      *v6 = 0;
      return a1;
    }
    v10 = 0;
    goto LABEL_12;
  }
  return a1;
}

_DWORD *sub_1C619C7F0(_DWORD *result, uint64_t a2, char a3)
{
  _DWORD *v5;
  uint64_t v6;

  v5 = result;
  v6 = result[2];
  if (v6 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 8);
    LODWORD(v6) = v5[2];
  }
  *(_QWORD *)(*(_QWORD *)v5 + 8 * v6) = a2 | (4 * (a3 != 0));
  ++v5[2];
  return result;
}

_QWORD *sub_1C619C864(_DWORD *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4E85724((uint64_t)a1, *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4E857C8(a1, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_1C619C8C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C4E85724((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C619C984(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  v7 = 0;
  if ((sub_1C6185234(a1, &v6, &v7) & 1) != 0)
    return v7;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = a1 + 8;
    v5 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(unsigned int *)(a1 + 16);
  }
  return v4 + 16 * v5;
}

_QWORD *sub_1C619C9E4(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C4A5C500(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C4E862AC(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C619CA48(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v5;
  uint64_t v6;
  unsigned int v7;

  v5 = *a3;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 8);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v6) = a2 | (4 * (v5 != 0));
  v7 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v7;
  return *(_QWORD *)a1 + 8 * v7 - 8;
}

unsigned int *sub_1C619CAC4(unsigned int *result, uint64_t a2, uint64_t *a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = result;
  v5 = *(_QWORD *)result;
  v6 = result[2];
  if (*(_QWORD *)result + 8 * v6 == a2)
  {
    v10 = *a3;
    if (v6 >= result[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 8);
      v5 = *(_QWORD *)v4;
      v6 = v4[2];
    }
    *(_QWORD *)(v5 + 8 * v6) = v10;
    ++v4[2];
  }
  else
  {
    v7 = (a2 - v5) >> 3;
    if (v6 >= result[3])
    {
      result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 8);
      v5 = *(_QWORD *)v4;
      v6 = v4[2];
    }
    v8 = (uint64_t *)(v5 + 8 * v7);
    *(_QWORD *)(v5 + 8 * v6) = *(_QWORD *)(v5 + 8 * v6 - 8);
    v9 = *(_QWORD *)v4 + 8 * v6 - 8;
    if ((uint64_t *)v9 != v8)
    {
      result = (unsigned int *)memmove(v8 + 1, v8, v9 - (_QWORD)v8);
      LODWORD(v6) = v4[2];
    }
    v4[2] = v6 + 1;
    *v8 = *a3;
  }
  return result;
}

uint64_t llvm::LazyValueInfoWrapperPass::LazyValueInfoWrapperPass(uint64_t this)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = &llvm::LazyValueInfoWrapperPass::ID;
  *(_DWORD *)(this + 24) = 2;
  *(_QWORD *)this = &off_1E81388D0;
  *(_OWORD *)(this + 32) = 0u;
  *(_OWORD *)(this + 48) = 0u;
  if (!atomic_load(qword_1ED830BC0))
  {
    v3 = this;
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    this = v3;
  }
  v5 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED82DF60);
  if (v2 != -1)
  {
    v7[0] = sub_1C4E866D8;
    v7[1] = &v5;
    v6 = v7;
    v4 = this;
    std::__call_once(&qword_1ED82DF60, &v6, (void (__cdecl *)(void *))sub_1C4776838);
    return v4;
  }
  return this;
}

void llvm::initializeLazyValueInfoWrapperPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82DF60);
  if (v2 != -1)
  {
    v5[0] = sub_1C4E866D8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82DF60, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t llvm::createLazyValueInfoPass(llvm *this)
{
  uint64_t v1;

  v1 = operator new();
  return llvm::LazyValueInfoWrapperPass::LazyValueInfoWrapperPass(v1);
}

void *llvm::LazyValueInfoWrapperPass::getAnalysisUsage(llvm::LazyValueInfoWrapperPass *this, llvm::AnalysisUsage *a2)
{
  *((_BYTE *)a2 + 160) = 1;
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t llvm::LazyValueInfo::getConstantRangeOnEdge@<X0>(llvm::LazyValueInfo *this@<X0>, llvm::Value *a2@<X1>, llvm::BasicBlock *a3@<X2>, llvm::BasicBlock *a4@<X3>, llvm::Instruction *a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  llvm::ConstantRange *v15;
  unsigned int v16;
  int v17;
  __int16 v18;
  _QWORD v19[5];

  v19[4] = *MEMORY[0x1E0C80C00];
  v11 = *(_DWORD *)(*(_QWORD *)a2 + 8) >> 8;
  sub_1C4E869F0((uint64_t *)this + 3, *(_QWORD *)this, *(_QWORD *)(*((_QWORD *)a3 + 7) + 40));
  sub_1C4E87A04(v12, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, (uint64_t)&v18);
  v13 = v18;
  if ((_BYTE)v18)
  {
    if ((v18 & 0xFE) == 4)
    {
      result = sub_1C4E94384(a6, (uint64_t)v19);
      v13 = v18;
      goto LABEL_6;
    }
    v15 = (llvm::ConstantRange *)a6;
    v16 = v11;
    v17 = 1;
  }
  else
  {
    v15 = (llvm::ConstantRange *)a6;
    v16 = v11;
    v17 = 0;
  }
  result = (uint64_t)llvm::ConstantRange::ConstantRange(v15, v16, v17);
LABEL_6:
  if ((v13 & 0xFE) == 4)
    return sub_1C4E8C6FC((uint64_t)v19);
  return result;
}

uint64_t *llvm::LazyValueInfo::printLVI(llvm::LazyValueInfo *this, llvm::Function *a2, llvm::DominatorTree *a3, llvm::raw_ostream *a4)
{
  uint64_t *result;
  uint64_t v6;
  uint64_t v10;
  _QWORD v11[3];

  v6 = *((_QWORD *)this + 3);
  result = (uint64_t *)((char *)this + 24);
  if (v6)
  {
    sub_1C4E869F0(result, *(_QWORD *)this, *((_QWORD *)a2 + 5));
    v11[0] = &off_1E8138A70;
    v11[1] = v10;
    v11[2] = a3;
    return llvm::Function::print(a2, a4, (llvm::AssemblyAnnotationWriter *)v11, 0, 0);
  }
  return result;
}

void sub_1C619CEE8(uint64_t *a1)
{
  *a1 = (uint64_t)&off_1E81388D0;
  llvm::LazyValueInfo::releaseMemory(a1 + 4);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C619CF18(uint64_t *a1)
{
  *a1 = (uint64_t)&off_1E81388D0;
  llvm::LazyValueInfo::releaseMemory(a1 + 4);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::callDefaultCtor<llvm::LazyValueInfoWrapperPass>()
{
  uint64_t v0;

  v0 = operator new();
  return llvm::LazyValueInfoWrapperPass::LazyValueInfoWrapperPass(v0);
}

uint64_t sub_1C619CF84(uint64_t a1, unsigned int *a2)
{
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  *(_QWORD *)a1 = 1;
  *(int64x2_t *)(a1 + 8) = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  sub_1C4E907F0((unsigned int *)a1, a2);
  return a1;
}

void sub_1C619CFE0(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 32, &v5);
  sub_1C619D04C(a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

uint64_t sub_1C619D04C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = a2 + 16;
    v4 = (_DWORD *)(*(_QWORD *)result + 24);
    v5 = 32 * v2;
    do
    {
      *(_DWORD *)(v3 - 8) = *(v4 - 4);
      *(_QWORD *)(v3 - 16) = *((_QWORD *)v4 - 3);
      *(v4 - 4) = 0;
      *(_DWORD *)(v3 + 8) = *v4;
      *(_QWORD *)v3 = *((_QWORD *)v4 - 1);
      v3 += 32;
      *v4 = 0;
      v4 += 8;
      v5 -= 32;
    }
    while (v5);
    v6 = *(unsigned int *)(result + 8);
    if ((_DWORD)v6)
    {
      v7 = 32 * v6;
      v8 = *(_QWORD *)result - 32;
      do
      {
        result = sub_1C4E8C6FC(v8 + v7);
        v7 -= 32;
      }
      while (v7);
    }
  }
  return result;
}

int *sub_1C619D0D0(int *a1)
{
  int v2;
  int *v3;
  uint64_t v4;
  int *result;
  uint64_t v6;
  int *v7;

  v2 = *a1;
  if (*a1 > 1)
  {
    if ((v2 & 1) != 0)
    {
      result = a1 + 2;
      v7 = a1 + 10;
LABEL_10:
      while ((*(_QWORD *)result | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        result += 2;
        if (result == v7)
          return v7;
      }
    }
    else
    {
      result = (int *)*((_QWORD *)a1 + 1);
      v6 = a1[4];
      if ((_DWORD)v6)
      {
        v7 = &result[2 * v6];
        goto LABEL_10;
      }
    }
  }
  else
  {
    if (v2)
    {
      v3 = a1 + 2;
      v4 = 4;
    }
    else
    {
      v3 = (int *)*((_QWORD *)a1 + 1);
      v4 = a1[4];
    }
    return &v3[2 * v4];
  }
  return result;
}

unsigned int *sub_1C619D148(unsigned int *result, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v6 = a2;
  v7 = result;
  if (a2 != a4)
  {
    v8 = 0;
    v9 = a2;
    while (1)
    {
      if (++v9 == a3)
      {
        v9 = a3;
LABEL_7:
        ++v8;
        if (v9 == a4)
          goto LABEL_8;
      }
      else if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        goto LABEL_7;
      }
    }
  }
  v8 = 0;
LABEL_8:
  v10 = result[2];
  if (v8 + v10 > (unint64_t)result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8 + v10, 8);
    v10 = v7[2];
  }
  if (v6 != a4)
  {
    v11 = (_QWORD *)(*(_QWORD *)v7 + 8 * v10);
    do
    {
      v12 = *v6++;
      *v11 = v12;
      while (v6 != a3)
      {
        if ((*v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_17;
        ++v6;
      }
      v6 = a3;
LABEL_17:
      ++v11;
    }
    while (v6 != a4);
  }
  v7[2] = v10 + v8;
  return result;
}

llvm::LegacyDivergenceAnalysis *llvm::LegacyDivergenceAnalysis::LegacyDivergenceAnalysis(llvm::LegacyDivergenceAnalysis *this)
{
  unint64_t v2;
  unint64_t PassRegistry;
  _QWORD *v5;
  _QWORD v6[2];

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::LegacyDivergenceAnalysis::ID;
  *((_DWORD *)this + 6) = 2;
  *(_QWORD *)this = &off_1E8138B58;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  PassRegistry = llvm::PassRegistry::getPassRegistry(this);
  v2 = atomic_load(&qword_1ED82DF70);
  if (v2 != -1)
  {
    v6[0] = sub_1C4E94DFC;
    v6[1] = &PassRegistry;
    v5 = v6;
    std::__call_once(&qword_1ED82DF70, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return this;
}

void llvm::initializeLegacyDivergenceAnalysisPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1ED82DF70);
  if (v2 != -1)
  {
    v5[0] = sub_1C4E94DFC;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1ED82DF70, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

llvm::LegacyDivergenceAnalysis *llvm::createLegacyDivergenceAnalysisPass(llvm *this)
{
  llvm::LegacyDivergenceAnalysis *v1;

  v1 = (llvm::LegacyDivergenceAnalysis *)operator new();
  return llvm::LegacyDivergenceAnalysis::LegacyDivergenceAnalysis(v1);
}

llvm::AnalysisUsage *llvm::LegacyDivergenceAnalysis::getAnalysisUsage(llvm::LegacyDivergenceAnalysis *this, llvm::AnalysisUsage *a2)
{
  llvm::AnalysisUsage *result;

  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::DominatorTreeWrapperPass::ID);
  llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::PostDominatorTreeWrapperPass::ID);
  result = llvm::AnalysisUsage::addRequiredTransitiveID(a2, llvm::LoopInfoWrapperPass::ID);
  *((_BYTE *)a2 + 160) = 1;
  return result;
}

uint64_t llvm::LegacyDivergenceAnalysis::shouldUseGPUDivergenceAnalysis(llvm::LegacyDivergenceAnalysis *this, const llvm::Function *a2, const llvm::TargetTransformInfo *a3)
{
  void **v5;
  void *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  const llvm::Function *v11;
  void *__p;
  void *v13;
  uint64_t v14;

  if (!byte_1ED7F2270 && !llvm::TargetTransformInfo::useGPUDivergenceAnalysis(a3))
    return 0;
  v5 = (void **)**((_QWORD **)this + 1);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::LoopInfoWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *, const llvm::TargetTransformInfo *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::LoopInfoWrapperPass::ID, a3);
  v11 = a2;
  __p = 0;
  v8 = (uint64_t *)(v7 + 32);
  v13 = 0;
  v14 = 0;
  sub_1C4DC1ECC((char **)&__p, (uint64_t)&v11);
  v9 = sub_1C4E1C800((uint64_t *)&__p, v8) ^ 1;
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  return v9;
}

uint64_t llvm::LegacyDivergenceAnalysis::isDivergent(llvm::LegacyDivergenceAnalysis *this, const llvm::Value *a2)
{
  uint64_t v2;
  uint64_t v4;
  const llvm::Value *v5;

  v2 = *((_QWORD *)this + 4);
  if (v2)
  {
    return *(_BYTE *)(v2 + 8)
        || llvm::DivergenceAnalysisImpl::isDivergent(*(llvm::DivergenceAnalysisImpl **)(v2 + 24), a2);
  }
  else
  {
    v4 = 0;
    v5 = a2;
    return sub_1C4E1CB18((uint64_t *)this + 5, &v5, &v4);
  }
}

void sub_1C619D4D0(llvm::Pass *a1)
{
  sub_1C619D51C(a1);
  JUMPOUT(0x1CAA32FC0);
}

llvm::LegacyDivergenceAnalysis *llvm::callDefaultCtor<llvm::LegacyDivergenceAnalysis>()
{
  llvm::LegacyDivergenceAnalysis *v0;

  v0 = (llvm::LegacyDivergenceAnalysis *)operator new();
  return llvm::LegacyDivergenceAnalysis::LegacyDivergenceAnalysis(v0);
}

void sub_1C619D51C(llvm::Pass *a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &off_1E8138B58;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 8), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 5), 8);
  v2 = *((_QWORD *)a1 + 4);
  *((_QWORD *)a1 + 4) = 0;
  if (v2)
  {
    v3 = sub_1C619D5D8(v2);
    MEMORY[0x1CAA32FC0](v3, 0x1020C40F5E4CFB4);
  }
  llvm::Pass::~Pass(a1);
}

_DWORD *sub_1C619D588(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 8 * v1;
        do
        {
          *v2++ = -4096;
          v3 -= 8;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C4A06814(result);
    }
  }
  return result;
}

uint64_t sub_1C619D5D8(uint64_t a1)
{
  _QWORD *v2;
  llvm::SyncDependenceAnalysis *v3;
  _QWORD *v5;

  v2 = *(_QWORD **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
  {
    v5 = sub_1C619060C(v2);
    MEMORY[0x1CAA32FC0](v5, 0x10E0C405B15C183);
  }
  v3 = *(llvm::SyncDependenceAnalysis **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
  {
    llvm::SyncDependenceAnalysis::~SyncDependenceAnalysis(v3);
    MEMORY[0x1CAA32FC0]();
  }
  return a1;
}

