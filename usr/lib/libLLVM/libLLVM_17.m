void sub_1C4F73994(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  _BOOL4 v67;
  uint64_t v68;
  uint64_t v69;
  _BOOL4 v70;
  unint64_t v71;
  int v72;
  BOOL v73;
  int v75;
  unint64_t v76;
  uint64_t v77;
  void *v79;
  uint64_t v80;
  _QWORD v81[5];

  v3 = a1;
  v81[4] = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)a1[3];
  v5 = a1[4];
  v6 = *((_DWORD *)v4 + 4);
  if (v6)
  {
    v7 = *v4;
    v8 = v6 - 1;
    v9 = ((v5 >> 4) ^ (v5 >> 9)) & (v6 - 1);
    v10 = *(_QWORD *)(v7 + 16 * v9);
    if (v5 == v10)
    {
LABEL_6:
      v13 = *(_QWORD **)(v7 + 16 * v9 + 8);
      goto LABEL_8;
    }
    v11 = 1;
    while (v10 != -4096)
    {
      v12 = v9 + v11++;
      v9 = v12 & v8;
      v10 = *(_QWORD *)(v7 + 16 * v9);
      if (v5 == v10)
        goto LABEL_6;
    }
  }
  v13 = 0;
LABEL_8:
  v14 = ((*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 3) - 1;
  v15 = *(_QWORD *)(v5 + 40);
  if (v15 != v5 + 40)
  {
    if (v15)
      v2 = (_DWORD *)(v15 - 24);
    else
      v2 = 0;
    v16 = *((unsigned __int8 *)v2 + 16);
    v17 = v16 - 29;
    if (v16 == 30)
    {
      if ((v2[5] & 0x7FFFFFF) == 3)
        v18 = 2;
      else
        v18 = 1;
LABEL_16:
      v19 = 0;
      LODWORD(v20) = 0;
      v21 = v18;
      while (1)
      {
        v22 = *((unsigned __int8 *)v2 + 16);
        if (v22 != 30)
          __asm { BR              X9 }
        v23 = *(_QWORD *)&v2[-8 * v19 - 8];
        v24 = *((unsigned int *)sub_1C61B81A8((_QWORD *)(*v3 + 24), v23) + 6);
        *(_QWORD *)(v3[5] + 8 * v24) = v23;
        if ((int)v20 <= (int)v24)
          v20 = v24;
        else
          v20 = v20;
        if ((int)v24 >= (int)v14)
          v14 = v14;
        else
          v14 = v24;
        if (v13)
        {
          v25 = (uint64_t *)v3[3];
          v26 = *((_DWORD *)v25 + 4);
          if (v26)
          {
            v27 = *v25;
            v28 = v26 - 1;
            v29 = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
            v30 = *(_QWORD *)(v27 + 16 * v29);
            if (v23 == v30)
            {
LABEL_30:
              v33 = *(_QWORD **)(v27 + 16 * v29 + 8);
              if (v33)
              {
                while (v33 != v13)
                {
                  if (!v33)
                    goto LABEL_34;
                  v33 = (_QWORD *)*v33;
                }
                goto LABEL_35;
              }
            }
            else
            {
              v31 = 1;
              while (v30 != -4096)
              {
                v32 = v29 + v31++;
                v29 = v32 & v28;
                v30 = *(_QWORD *)(v27 + 16 * v29);
                if (v23 == v30)
                  goto LABEL_30;
              }
            }
          }
LABEL_34:
          sub_1C4774094((llvm::SmallPtrSetImplBase *)(v3[8] + 64), v23);
        }
LABEL_35:
        if (++v19 == v21)
          goto LABEL_45;
      }
    }
    v18 = 2;
    switch(v17)
    {
      case 1:
LABEL_108:
        __break(1u);
        goto LABEL_109;
      case 2:
        v18 = (v2[5] >> 1) & 0x3FFFFFF;
        break;
      case 3:
      case 9:
LABEL_109:
        v18 = (v2[5] & 0x7FFFFFF) - 1;
        break;
      case 4:
        goto LABEL_16;
      case 7:
        v18 = *((_WORD *)v2 + 9) & 1;
        break;
      case 8:
        v18 = 1;
        goto LABEL_16;
      case 10:
        v18 = v2[20] + 1;
        break;
      default:
        goto LABEL_39;
    }
    if (v18)
      goto LABEL_16;
  }
LABEL_39:
  if ((int)v14 <= 0)
  {
    v20 = 0;
LABEL_45:
    v35 = 0;
    while (1)
    {
      v36 = *(_QWORD *)(v3[5] + 8 * v20);
      if (v36)
        break;
LABEL_72:
      v36 = v35;
LABEL_101:
      v73 = v20-- <= (int)v14;
      v35 = v36;
      if (v73)
        goto LABEL_40;
    }
    v37 = *(_QWORD *)(*(_QWORD *)*v3 + 8 * v20);
    v38 = (uint64_t *)v3[3];
    v39 = *((_DWORD *)v38 + 4);
    v76 = v35;
    v77 = v20;
    if (v39)
    {
      v40 = *v38;
      v41 = v39 - 1;
      v42 = ((v37 >> 4) ^ (v37 >> 9)) & (v39 - 1);
      v43 = *(_QWORD *)(v40 + 16 * v42);
      if (v37 == v43)
      {
LABEL_52:
        v46 = *(_QWORD *)(v40 + 16 * v42 + 8);
        if (v46 && **(_QWORD **)(v46 + 32) == v37)
        {
          v79 = v81;
          v80 = 0x400000000;
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks((_QWORD *)v46, (uint64_t)&v79);
          v59 = sub_1C477672C(v46 + 56, v3[4]);
          v60 = *(_QWORD *)(v46 + 64);
          v61 = 76;
          if (v60 != *(_QWORD *)(v46 + 56))
            v61 = 72;
          v2 = v79;
          if ((_DWORD)v80)
          {
            v62 = v59;
            LODWORD(v13) = 0;
            v63 = (_QWORD *)(v60 + 8 * *(unsigned int *)(v46 + v61));
            LODWORD(v48) = v14;
            v64 = 8 * v80;
            v65 = v48;
            do
            {
              v66 = *(_QWORD *)v2;
              if (v62 == v63)
              {
                v67 = sub_1C4F74CAC((uint64_t)v3, *(_QWORD *)v2, v36);
              }
              else
              {
                v68 = *((unsigned int *)sub_1C61B81A8((_QWORD *)(*v3 + 24), *(_QWORD *)v2) + 6);
                v69 = v3[5];
                v70 = *(_QWORD *)(v69 + 8 * v68) != 0 && *(_QWORD *)(v69 + 8 * v68) != v36;
                if (*(_QWORD *)(v69 + 8 * v68) != 0 && *(_QWORD *)(v69 + 8 * v68) != v36)
                  v71 = v66;
                else
                  v71 = v36;
                *(_QWORD *)(v69 + 8 * v68) = v71;
                if (v70)
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)(v3[8] + 64), v66);
                  v67 = 1;
                }
                else
                {
                  v67 = 0;
                }
              }
              v13 = (_QWORD *)(v13 | v67);
              v72 = *((_DWORD *)sub_1C61B81A8((_QWORD *)(*v3 + 24), v66) + 6);
              if (v72 >= (int)v48)
                v48 = v48;
              else
                v48 = v72;
              v2 += 2;
              v64 -= 8;
            }
            while (v64);
            v2 = v79;
            LODWORD(v14) = v65;
            v35 = v76;
            v20 = v77;
          }
          else
          {
            v13 = 0;
            v48 = v14;
          }
          if (v2 != (_DWORD *)v81)
            free(v2);
          if (!(_BYTE)v13)
          {
LABEL_98:
            if (v35 == v36)
              v14 = v14;
            else
              v14 = v48;
            goto LABEL_101;
          }
          goto LABEL_71;
        }
      }
      else
      {
        v44 = 1;
        while (v43 != -4096)
        {
          v45 = v42 + v44++;
          v42 = v45 & v41;
          v43 = *(_QWORD *)(v40 + 16 * v42);
          if (v37 == v43)
            goto LABEL_52;
        }
      }
    }
    v47 = *(_QWORD *)(v37 + 40);
    LODWORD(v48) = v14;
    if (v47 == v37 + 40)
      goto LABEL_98;
    if (v47)
      v49 = v47 - 24;
    else
      v49 = 0;
    v50 = *(unsigned __int8 *)(v49 + 16);
    v51 = v50 - 29;
    if (v50 != 30)
    {
      v52 = 2;
      LODWORD(v48) = v14;
      switch(v51)
      {
        case 1:
          goto LABEL_108;
        case 2:
          v52 = (*(_DWORD *)(v49 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_92;
        case 3:
        case 9:
          v52 = (*(_DWORD *)(v49 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_92;
        case 4:
          goto LABEL_62;
        case 7:
          v52 = *(_WORD *)(v49 + 18) & 1;
          goto LABEL_92;
        case 8:
          v52 = 1;
          goto LABEL_62;
        case 10:
          v52 = *(_DWORD *)(v49 + 80) + 1;
LABEL_92:
          LODWORD(v48) = v14;
          if (!v52)
            goto LABEL_98;
          goto LABEL_62;
        default:
          goto LABEL_98;
      }
    }
    v52 = (*(_DWORD *)(v49 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
LABEL_62:
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v13 = (_QWORD *)(v49 - 64);
    v75 = v14;
    LODWORD(v48) = v14;
    v56 = v52;
    do
    {
      v57 = *(unsigned __int8 *)(v49 + 16);
      if (v57 != 30)
        __asm { BR              X9 }
      v2 = *(_DWORD **)(v49 - 32 - 32 * v54);
      v55 |= sub_1C4F74CAC((uint64_t)a1, (unint64_t)v2, v36);
      v58 = *((_DWORD *)sub_1C61B81A8((_QWORD *)(*a1 + 24), (unint64_t)v2) + 6);
      if (v58 >= (int)v48)
        v48 = v48;
      else
        v48 = v58;
      ++v54;
      v53 += 2;
      v13 += 4;
    }
    while (v56 != v54);
    v3 = a1;
    LODWORD(v14) = v75;
    v35 = v76;
    if ((v55 & 1) == 0)
      goto LABEL_98;
LABEL_71:
    v14 = v48;
    goto LABEL_72;
  }
LABEL_40:
  v34 = v3[8];
  v3[8] = 0;
  *a2 = v34;
}

_QWORD *sub_1C4F74134(_QWORD *result, uint64_t *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *j;
  unint64_t v25;
  unint64_t **v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  unsigned int v42;
  char v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *i;
  unint64_t v54;
  char **v55;
  unint64_t v56;
  unint64_t *v57;
  char *v58;
  unint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  char *v87;
  uint64_t *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  _QWORD *v100;
  void (**v101)(_QWORD *, uint64_t);
  _QWORD *v102;
  void (**v103)(_QWORD *, uint64_t);
  uint64_t *v105;
  uint64_t v106;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v111;
  uint64_t v112;
  void *__p;
  uint64_t *v114;
  uint64_t *v115;
  _QWORD v116[3];
  _QWORD *v117;
  void *v118;
  uint64_t v119;
  _BYTE v120[24];
  _QWORD v121[3];
  _QWORD *v122;
  uint64_t v123;

  v5 = a5;
  v6 = a3;
  v123 = *MEMORY[0x1E0C80C00];
  if (a3)
    v112 = **(_QWORD **)(a3 + 32);
  else
    v112 = 0;
  v7 = result[1];
  if (*result != v7)
  {
    v109 = a3 + 56;
    v111 = result;
    v105 = a2;
    do
    {
      v8 = *(_QWORD *)(v7 - 8);
      v9 = *((_DWORD *)a2 + 4);
      if (v9)
      {
        v10 = *a2;
        v11 = v9 - 1;
        v12 = ((v8 >> 4) ^ (v8 >> 9)) & (v9 - 1);
        v13 = *(_QWORD *)(*a2 + 16 * v12);
        if (v8 == v13)
        {
LABEL_11:
          v16 = *(_QWORD *)(v10 + 16 * v12 + 8);
          goto LABEL_13;
        }
        v14 = 1;
        while (v13 != -4096)
        {
          v15 = v12 + v14++;
          v12 = v15 & v11;
          v13 = *(_QWORD *)(v10 + 16 * v12);
          if (v8 == v13)
            goto LABEL_11;
        }
      }
      v16 = 0;
LABEL_13:
      if (v16 == v6)
      {
        v38 = *(_QWORD *)(v8 + 40);
        if (v38 == v8 + 40)
          goto LABEL_101;
        if (v38)
          v39 = v38 - 24;
        else
          v39 = 0;
        v40 = *(unsigned __int8 *)(v39 + 16);
        v41 = v40 - 29;
        if (v40 != 30)
        {
          v42 = 2;
          switch(v41)
          {
            case 1:
LABEL_186:
              __break(1u);
              return result;
            case 2:
              v42 = (*(_DWORD *)(v39 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_147;
            case 3:
            case 9:
              v42 = (*(_DWORD *)(v39 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_147;
            case 4:
              goto LABEL_57;
            case 7:
              v42 = *(_WORD *)(v39 + 18) & 1;
              goto LABEL_147;
            case 8:
              v42 = 1;
              goto LABEL_57;
            case 10:
              v42 = *(_DWORD *)(v39 + 80) + 1;
LABEL_147:
              if (!v42)
                goto LABEL_101;
              goto LABEL_57;
            default:
              goto LABEL_101;
          }
        }
        if ((*(_DWORD *)(v39 + 20) & 0x7FFFFFF) == 3)
          v42 = 2;
        else
          v42 = 1;
LABEL_57:
        v43 = 0;
        v44 = 0;
        v45 = v39 - 32;
        v46 = v42;
        while (2)
        {
          v47 = v44;
          while (1)
          {
            v48 = *(unsigned __int8 *)(v39 + 16);
            if (v48 != 30)
              __asm { BR              X9 }
            v49 = *(_QWORD *)(v45 - 32 * v47);
            if (v49 != v112)
            {
              if (!v6)
                break;
              v50 = sub_1C477672C(v109, *(_QWORD *)(v45 - 32 * v47));
              v51 = *(_QWORD *)(v6 + 64);
              v52 = 72;
              if (v51 == *(_QWORD *)(v6 + 56))
                v52 = 76;
              if (v50 != (_QWORD *)(v51 + 8 * *(unsigned int *)(v6 + v52)))
                break;
            }
LABEL_71:
            if (++v47 == v46)
            {
              if ((v43 & 1) == 0)
              {
                result = v111;
                v7 = v111[1];
LABEL_101:
                result[1] = v7 - 8;
                if ((sub_1C4EE51A0((uint64_t **)v5, v8, v8) & 1) != 0)
                {
                  v68 = a4[3];
                  if (v68)
                  {
                    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v68 + 48))(v68, v8);
                    goto LABEL_169;
                  }
LABEL_185:
                  sub_1C485C2F0();
                }
              }
              goto LABEL_169;
            }
          }
          for (i = *(_QWORD **)(v5 + 8); i; i = (_QWORD *)*i)
          {
            v54 = i[4];
            if (v49 >= v54)
            {
              if (v54 >= v49)
                goto LABEL_71;
              ++i;
            }
          }
          v55 = (char **)v111;
          v57 = (unint64_t *)v111[1];
          v56 = v111[2];
          if ((unint64_t)v57 >= v56)
          {
            v59 = (unint64_t *)*v111;
            v60 = ((uint64_t)v57 - *v111) >> 3;
            v61 = v60 + 1;
            if ((unint64_t)(v60 + 1) >> 61)
LABEL_183:
              abort();
            v62 = v56 - (_QWORD)v59;
            if (v62 >> 2 > v61)
              v61 = v62 >> 2;
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
              v63 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v63 = v61;
            if (v63)
            {
              if (v63 >> 61)
LABEL_184:
                sub_1C4764EE4();
              v64 = (char *)operator new(8 * v63);
            }
            else
            {
              v64 = 0;
            }
            v65 = &v64[8 * v60];
            *(_QWORD *)v65 = v49;
            v58 = v65 + 8;
            if (v57 == v59)
            {
              v55 = (char **)v111;
            }
            else
            {
              do
              {
                v66 = *--v57;
                *((_QWORD *)v65 - 1) = v66;
                v65 -= 8;
              }
              while (v57 != v59);
              v55 = (char **)v111;
              v57 = (unint64_t *)*v111;
            }
            *v55 = v65;
            v55[1] = v58;
            v55[2] = &v64[8 * v63];
            if (v57)
              operator delete(v57);
            v5 = a5;
          }
          else
          {
            *v57 = v49;
            v58 = (char *)(v57 + 1);
          }
          v55[1] = v58;
          v44 = v47 + 1;
          v43 = 1;
          v6 = a3;
          if ((_DWORD)v46 != (_DWORD)v47 + 1)
            continue;
          goto LABEL_169;
        }
      }
      v118 = v120;
      v119 = 0x300000000;
      sub_1C4EAEA40((_QWORD *)v16, (uint64_t)&v118);
      if ((_DWORD)v119)
      {
        v17 = 0;
        v18 = (uint64_t *)v118;
        v19 = (uint64_t *)((char *)v118 + 8 * v119);
        do
        {
          while (1)
          {
            v20 = *v18;
            if (*v18 == v112)
              break;
            if (v6)
            {
              v21 = sub_1C477672C(v109, *v18);
              v22 = *(_QWORD *)(v6 + 64);
              v23 = 72;
              if (v22 == *(_QWORD *)(v6 + 56))
                v23 = 76;
              if (v21 == (_QWORD *)(v22 + 8 * *(unsigned int *)(v6 + v23)))
                break;
            }
            for (j = *(_QWORD **)(v5 + 8); j; j = (_QWORD *)*j)
            {
              v25 = j[4];
              if (v20 >= v25)
              {
                if (v25 >= v20)
                  goto LABEL_28;
                ++j;
              }
            }
            v26 = (unint64_t **)v111;
            v28 = (unint64_t *)v111[1];
            v27 = v111[2];
            if ((unint64_t)v28 >= v27)
            {
              v30 = (unint64_t *)*v111;
              v31 = ((uint64_t)v28 - *v111) >> 3;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 61)
                goto LABEL_183;
              v33 = v27 - (_QWORD)v30;
              if (v33 >> 2 > v32)
                v32 = v33 >> 2;
              if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v32;
              if (v34)
              {
                if (v34 >> 61)
                  goto LABEL_184;
                v35 = (char *)operator new(8 * v34);
              }
              else
              {
                v35 = 0;
              }
              v36 = (unint64_t *)&v35[8 * v31];
              *v36 = v20;
              v29 = v36 + 1;
              if (v28 == v30)
              {
                v26 = (unint64_t **)v111;
              }
              else
              {
                do
                {
                  v37 = *--v28;
                  *--v36 = v37;
                }
                while (v28 != v30);
                v26 = (unint64_t **)v111;
                v28 = (unint64_t *)*v111;
              }
              *v26 = v36;
              v26[1] = v29;
              v26[2] = (unint64_t *)&v35[8 * v34];
              if (v28)
                operator delete(v28);
              v5 = a5;
            }
            else
            {
              *v28 = v20;
              v29 = v28 + 1;
            }
            v26[1] = v29;
            ++v18;
            v17 = 1;
            v6 = a3;
            if (v18 == v19)
              goto LABEL_167;
          }
LABEL_28:
          ++v18;
        }
        while (v18 != v19);
        if ((v17 & 1) != 0)
          goto LABEL_167;
      }
      v111[1] -= 8;
      v67 = (_QWORD *)a4[3];
      if (v67)
      {
        if (v67 == a4)
        {
          v117 = v116;
          (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v116);
        }
        else
        {
          v117 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v67 + 16))(v67);
        }
      }
      else
      {
        v117 = 0;
      }
      __p = 0;
      v114 = 0;
      v115 = 0;
      v69 = **(_QWORD **)(v16 + 32);
      sub_1C4EE51A0((uint64_t **)v5, v69, v69);
      if (!v117)
        goto LABEL_185;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD *, unint64_t))(*v117 + 48))(v117, v69);
      v71 = *(_QWORD *)(v69 + 40);
      if (v71 != v69 + 40)
      {
        if (v71)
          v72 = v71 - 24;
        else
          v72 = 0;
        v73 = *(unsigned __int8 *)(v72 + 16);
        v74 = v73 - 29;
        if (v73 != 30)
        {
          v75 = 2;
          switch(v74)
          {
            case 1:
              goto LABEL_186;
            case 2:
              v75 = (*(_DWORD *)(v72 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_172;
            case 3:
            case 9:
              v75 = (*(_DWORD *)(v72 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_172;
            case 4:
              goto LABEL_115;
            case 7:
              v75 = *(_WORD *)(v72 + 18) & 1;
              goto LABEL_172;
            case 8:
              v75 = 1;
              goto LABEL_115;
            case 10:
              v75 = *(_DWORD *)(v72 + 80) + 1;
LABEL_172:
              if (!v75)
                goto LABEL_150;
              goto LABEL_115;
            default:
              goto LABEL_150;
          }
        }
        if ((*(_DWORD *)(v72 + 20) & 0x7FFFFFF) == 3)
          v75 = 2;
        else
          v75 = 1;
LABEL_115:
        v76 = 0;
        v77 = v16 + 56;
        v78 = v72 - 32;
        v79 = v75;
        v106 = v72;
        v108 = v72 - 32;
        do
        {
          v80 = *(unsigned __int8 *)(v72 + 16);
          if (v80 != 30)
            __asm { BR              X9 }
          v81 = *(_QWORD *)(v78 - 32 * v76);
          v82 = sub_1C477672C(v77, v81);
          v83 = *(_QWORD *)(v16 + 64);
          v84 = 72;
          if (v83 == *(_QWORD *)(v16 + 56))
            v84 = 76;
          if (v82 != (_QWORD *)(v83 + 8 * *(unsigned int *)(v16 + v84)) && v81 != v69)
          {
            v86 = v77;
            v87 = (char *)v114;
            if (v114 >= v115)
            {
              v89 = (char *)__p;
              v90 = ((char *)v114 - (_BYTE *)__p) >> 3;
              v91 = v90 + 1;
              if ((unint64_t)(v90 + 1) >> 61)
                goto LABEL_183;
              v92 = v69;
              v93 = (char *)v115 - (_BYTE *)__p;
              if (((char *)v115 - (_BYTE *)__p) >> 2 > v91)
                v91 = v93 >> 2;
              if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF8)
                v94 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v94 = v91;
              if (v94)
              {
                if (v94 >> 61)
                  goto LABEL_184;
                v95 = (char *)operator new(8 * v94);
              }
              else
              {
                v95 = 0;
              }
              v96 = (uint64_t *)&v95[8 * v90];
              *v96 = v81;
              v88 = v96 + 1;
              if (v87 != v89)
              {
                do
                {
                  v97 = *((_QWORD *)v87 - 1);
                  v87 -= 8;
                  *--v96 = v97;
                }
                while (v87 != v89);
                v87 = (char *)__p;
              }
              __p = v96;
              v115 = (uint64_t *)&v95[8 * v94];
              v6 = a3;
              if (v87)
                operator delete(v87);
              v69 = v92;
              v72 = v106;
            }
            else
            {
              *v114 = v81;
              v88 = (uint64_t *)(v87 + 8);
            }
            v77 = v86;
            v114 = v88;
            v78 = v108;
          }
          ++v76;
        }
        while (v76 != v79);
      }
LABEL_150:
      if (v117)
      {
        v5 = a5;
        v98 = v105;
        if (v117 == v116)
        {
          v122 = v121;
          (*(void (**)(_QWORD *, _QWORD *))(v116[0] + 24))(v116, v121);
        }
        else
        {
          v122 = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t))(*v117 + 16))(v117, v70);
        }
      }
      else
      {
        v122 = 0;
        v5 = a5;
        v98 = v105;
      }
      sub_1C4F74134(&__p, v98, v16, v121, v5);
      v100 = v122;
      if (v122 == v121)
      {
        v101 = (void (**)(_QWORD *, uint64_t))(v121[0] + 32);
        v100 = v121;
        goto LABEL_159;
      }
      if (v122)
      {
        v101 = (void (**)(_QWORD *, uint64_t))(*v122 + 40);
LABEL_159:
        (*v101)(v100, v99);
      }
      if (__p)
        operator delete(__p);
      v102 = v117;
      if (v117 == v116)
      {
        v103 = (void (**)(_QWORD *, uint64_t))(v116[0] + 32);
        v102 = v116;
      }
      else
      {
        if (!v117)
          goto LABEL_167;
        v103 = (void (**)(_QWORD *, uint64_t))(*v117 + 40);
      }
      (*v103)(v102, v99);
LABEL_167:
      if (v118 != v120)
        free(v118);
LABEL_169:
      result = v111;
      v7 = v111[1];
      a2 = v105;
    }
    while (*v111 != v7);
  }
  return result;
}

_QWORD *sub_1C4F74BF8(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  a1[3] = a5;
  a1[4] = a6;
  v7 = a2[1] - *a2;
  v8 = (v7 >> 3);
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  if ((v7 >> 3))
  {
    v9 = 8 * v8;
    v10 = (char *)operator new(8 * v8);
    a1[5] = v10;
    v11 = &v10[8 * v8];
    a1[7] = v11;
    bzero(v10, v9);
    a1[6] = v11;
  }
  v12 = operator new();
  *(_QWORD *)v12 = v12 + 32;
  *(_QWORD *)(v12 + 8) = v12 + 32;
  *(_QWORD *)(v12 + 16) = 4;
  *(_DWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 64) = v12 + 96;
  *(_QWORD *)(v12 + 72) = v12 + 96;
  *(_QWORD *)(v12 + 80) = 4;
  *(_DWORD *)(v12 + 88) = 0;
  a1[8] = v12;
  return a1;
}

BOOL sub_1C4F74CAC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  unint64_t v9;

  v6 = *((unsigned int *)sub_1C61B81A8((_QWORD *)(*(_QWORD *)a1 + 24), a2) + 6);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(v7 + 8 * v6) != 0 && *(_QWORD *)(v7 + 8 * v6) != a3;
  if (*(_QWORD *)(v7 + 8 * v6) != 0 && *(_QWORD *)(v7 + 8 * v6) != a3)
    v9 = a2;
  else
    v9 = a3;
  *(_QWORD *)(v7 + 8 * v6) = v9;
  if (v8)
    sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(a1 + 64), a2);
  return v8;
}

void sub_1C4F74D24()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C4F74D38(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E813B740;
  result[1] = v3;
  return result;
}

uint64_t sub_1C4F74D6C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E813B740;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1C4F74D88(uint64_t a1, unint64_t a2)
{
  return sub_1C61B8354(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *sub_1C4F74D90(float *a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  int8x8_t prime;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint8x8_t v25;
  unint64_t v26;
  uint8x8_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v35;

  v6 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v7 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v6 >> 47) ^ v6);
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  v9 = *((_QWORD *)a1 + 1);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == a2)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  v12[2] = *a3;
  *((_DWORD *)v12 + 6) = 0;
  v14 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v15 = a1[8];
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    v16 = 1;
    if (v9 >= 3)
      v16 = (v9 & (v9 - 1)) != 0;
    v17 = v16 | (2 * v9);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      prime = (int8x8_t)v18;
    else
      prime = (int8x8_t)v17;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v9 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v9)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v9)
    {
      v26 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (v27 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v27.i16[0] = vaddlv_u8(v27), v27.u32[0] > 1uLL))
      {
        v26 = std::__next_prime(v26);
      }
      else
      {
        v28 = 1 << -(char)__clz(v26 - 1);
        if (v26 >= 2)
          v26 = v28;
      }
      if (*(_QWORD *)&prime <= v26)
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_1C4764EE4();
          v20 = operator new(8 * *(_QWORD *)&prime);
          v21 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v20;
          if (v21)
            operator delete(v21);
          v22 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v22++) = 0;
          while (*(_QWORD *)&prime != v22);
          v23 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v23)
          {
            v24 = v23[1];
            v25 = (uint8x8_t)vcnt_s8(prime);
            v25.i16[0] = vaddlv_u8(v25);
            if (v25.u32[0] > 1uLL)
            {
              if (v24 >= *(_QWORD *)&prime)
                v24 %= *(_QWORD *)&prime;
            }
            else
            {
              v24 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = a1 + 4;
            v29 = (_QWORD *)*v23;
            if (*v23)
            {
              do
              {
                v30 = v29[1];
                if (v25.u32[0] > 1uLL)
                {
                  if (v30 >= *(_QWORD *)&prime)
                    v30 %= *(_QWORD *)&prime;
                }
                else
                {
                  v30 &= *(_QWORD *)&prime - 1;
                }
                if (v30 != v24)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v30))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v30) = v23;
                    goto LABEL_55;
                  }
                  *v23 = *v29;
                  *v29 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v30);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v30) = v29;
                  v29 = v23;
                }
                v30 = v24;
LABEL_55:
                v23 = v29;
                v29 = (_QWORD *)*v29;
                v24 = v30;
              }
              while (v29);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_59;
        }
        v35 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v35)
          operator delete(v35);
        v9 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v31 = *(_QWORD **)a1;
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v32)
  {
    *v12 = *v32;
LABEL_72:
    *v32 = v12;
    goto LABEL_73;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v31[v3] = a1 + 4;
  if (*v12)
  {
    v33 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v33 >= v9)
        v33 %= v9;
    }
    else
    {
      v33 &= v9 - 1;
    }
    v32 = (_QWORD *)(*(_QWORD *)a1 + 8 * v33);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
  return v12;
}

uint64_t **sub_1C4F75198(uint64_t **a1, unint64_t *a2, uint64_t **a3, uint64_t **a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = v7[4];
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (uint64_t *)v10;
    v10 = (uint64_t **)operator new(0x30uLL);
    v13 = *a3;
    v14 = *a4;
    *a4 = 0;
    v10[4] = v13;
    v10[5] = v14;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v8 = (uint64_t *)v10;
    v15 = (uint64_t *)**a1;
    v16 = (uint64_t *)v10;
    if (v15)
    {
      *a1 = v15;
      v16 = *v8;
    }
    sub_1C4768E74(a1[1], v16);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

uint64_t sub_1C4F75280()
{
  llvm::SyncDependenceAnalysis::EmptyDivergenceDesc = (uint64_t)&unk_1ED82EAD0;
  *(_QWORD *)algn_1ED82EAB8 = &unk_1ED82EAD0;
  qword_1ED82EAC0 = 4;
  dword_1ED82EAC8 = 0;
  qword_1ED82EAF0 = (uint64_t)&unk_1ED82EB10;
  unk_1ED82EAF8 = &unk_1ED82EB10;
  qword_1ED82EB00 = 4;
  dword_1ED82EB08 = 0;
  return __cxa_atexit((void (*)(void *))sub_1C61B7DAC, &llvm::SyncDependenceAnalysis::EmptyDivergenceDesc, &dword_1C475E000);
}

void llvm::SyntheticCountsUtils<llvm::CallGraph const*>::propagate(uint64_t a1, void (*a2)(unint64_t *__return_ptr, uint64_t, _QWORD, _QWORD), uint64_t a3, void (*a4)(uint64_t, _QWORD, unint64_t, uint64_t), uint64_t a5)
{
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t **i;
  char *v13;
  void **v14[3];
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unint64_t v23;

  v21 = 0;
  v22 = 0;
  v23 = 0;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  LODWORD(v14[0]) = 0;
  v14[1] = 0;
  v14[2] = 0;
  v15 = 0;
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v20 = 0;
  sub_1C4F75E94((int *)v14, v9);
  sub_1C4F76098((uint64_t)v14);
  while (*((_QWORD *)&v17 + 1) != (_QWORD)v18)
  {
    v10 = v22;
    if ((unint64_t)v22 >= v23)
    {
      v11 = sub_1C4F765CC(&v21, (uint64_t)&v17 + 8);
    }
    else
    {
      *(_QWORD *)v22 = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      sub_1C4DFE394(v10, *((const void **)&v17 + 1), v18, (uint64_t)(v18 - *((_QWORD *)&v17 + 1)) >> 3);
      v11 = v10 + 24;
    }
    v22 = v11;
    sub_1C4F76098((uint64_t)v14);
  }
  sub_1C617D7D4(v14);
  v13 = v21;
  for (i = (uint64_t **)v22;
        i != (uint64_t **)v13;
        llvm::SyntheticCountsUtils<llvm::CallGraph const*>::propagateFromSCC(i, a2, a3, a4, a5))
  {
    i -= 3;
  }
  v14[0] = (void **)&v21;
  sub_1C4DB60AC(v14);
}

{
  __ZN4llvm20SyntheticCountsUtilsIPKNS_9CallGraphEE9propagateERKS3_NS_12function_refIFNS_8OptionalINS_12ScaledNumberIyEEEEPKNS_13CallGraphNodeERKNSt3__14pairINS8_INS_14WeakTrackingVHEEEPSC_EEEEENS7_IFvSE_SA_EEE(a1, a2, a3, a4, a5);
}

uint64_t llvm::SyntheticCountsUtils<llvm::CallGraph const*>::propagateFromSCC(uint64_t **a1, void (*a2)(unint64_t *__return_ptr, uint64_t, _QWORD, _QWORD), uint64_t a3, void (*a4)(uint64_t, _QWORD, unint64_t, uint64_t), uint64_t a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  void **v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void (*v34)(uint64_t, _QWORD, unint64_t, uint64_t);
  _QWORD *v35;
  __int16 v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  uint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int v57;
  void *v58;
  uint64_t v59;
  _BYTE v60[128];
  char *v61;
  uint64_t v62;
  _QWORD v63[18];

  v63[16] = *MEMORY[0x1E0C80C00];
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v61 = (char *)v63;
  v62 = 0x800000000;
  v58 = v60;
  v59 = 0x800000000;
  v8 = *a1;
  v7 = a1[1];
  if (*a1 == v7)
  {
    v10 = 0;
    v9 = 0;
  }
  else
  {
    do
      sub_1C61B7564((uint64_t)&v55, (uint64_t)&v52, v8++);
    while (v8 != v7);
    v9 = v52;
    v10 = v54;
    if ((_DWORD)v53)
    {
      v11 = &v52[v54];
      if (v54)
      {
        v12 = 0;
        while ((v52[v12] | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          if (v54 == ++v12)
          {
            v13 = &v52[v54];
            goto LABEL_11;
          }
        }
        v13 = &v52[v12];
      }
      else
      {
        v13 = v52;
      }
      goto LABEL_11;
    }
  }
  v13 = &v9[v10];
  v11 = v13;
LABEL_11:
  v14 = &v9[v10];
  if (v13 == v14)
    goto LABEL_35;
  v15 = v10 - 1;
  do
  {
    v17 = *(_QWORD *)(*v13 + 16);
    v16 = *(_QWORD *)(*v13 + 24);
    while (v17 != v16)
    {
      if (v10)
      {
        v18 = *(_QWORD *)(v17 + 32);
        v19 = ((v18 >> 4) ^ (v18 >> 9)) & v15;
        v20 = v9[v19];
        if (v18 == v20)
        {
LABEL_17:
          v21 = v62;
          if (v62 < HIDWORD(v62))
          {
            v22 = &v61[16 * v62];
            *(_QWORD *)v22 = *v13;
            *((_QWORD *)v22 + 1) = v17;
            LODWORD(v62) = v21 + 1;
            goto LABEL_25;
          }
          v27 = *v13;
          v28 = (void **)&v61;
          goto LABEL_28;
        }
        v23 = 1;
        while (v20 != -4096)
        {
          v24 = v19 + v23++;
          v19 = v24 & v15;
          v20 = v9[v19];
          if (v18 == v20)
            goto LABEL_17;
        }
      }
      v25 = v59;
      if (v59 < HIDWORD(v59))
      {
        v26 = (uint64_t *)((char *)v58 + 16 * v59);
        *v26 = *v13;
        v26[1] = v17;
        LODWORD(v59) = v25 + 1;
        goto LABEL_25;
      }
      v27 = *v13;
      v28 = &v58;
LABEL_28:
      sub_1C4F76720(v28, v27, v17);
LABEL_25:
      v17 += 40;
    }
    v29 = v13 + 1;
    v13 = v11;
    if (v29 != v11)
    {
      v13 = v29;
      while ((*v13 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (++v13 == v11)
        {
          v13 = v11;
          break;
        }
      }
    }
  }
  while (v13 != v14);
LABEL_35:
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v30 = v62;
  if (!(_DWORD)v62)
  {
    v37 = 0;
    v33 = a5;
    v34 = a4;
LABEL_49:
    v40 = &v37[3 * v30];
    v38 = v40;
    goto LABEL_50;
  }
  v31 = 16 * v62;
  v32 = v61 + 8;
  v33 = a5;
  v34 = a4;
  do
  {
    a2(&v49, a3, *(v32 - 1), *v32);
    if (v51)
    {
      v48 = *(_QWORD *)(*v32 + 32);
      v35 = sub_1C617A140((uint64_t)&v55, &v48);
      v35[1] = sub_1C617C634(v35[1], *((_WORD *)v35 + 8), v49, v50);
      *((_WORD *)v35 + 8) = v36;
      if (v36 >= 0x4000)
      {
        v35[1] = -1;
        *((_WORD *)v35 + 8) = 0x3FFF;
      }
    }
    v32 += 2;
    v31 -= 16;
  }
  while (v31);
  v37 = v55;
  v30 = v57;
  if (!(_DWORD)v56)
    goto LABEL_49;
  v38 = &v55[3 * v57];
  if (v57)
  {
    v39 = 0;
    while ((v55[v39] | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v39 += 3;
      if (3 * v57 == v39)
      {
        v40 = &v55[3 * v57];
        goto LABEL_50;
      }
    }
    v40 = &v55[v39];
  }
  else
  {
    v40 = v55;
  }
LABEL_50:
  v41 = &v37[3 * v30];
LABEL_51:
  while (v40 != v41)
  {
    v34(v33, *v40, v40[1], v40[2]);
    v42 = v40 + 3;
    v40 = v38;
    if (v42 != v38)
    {
      v40 = v42;
      while ((*v40 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v40 += 3;
        if (v40 == v38)
        {
          v40 = v38;
          goto LABEL_51;
        }
      }
    }
  }
  if ((_DWORD)v59)
  {
    v43 = 16 * v59;
    v44 = (char *)v58 + 8;
    do
    {
      a2(&v49, a3, *(v44 - 1), *v44);
      if (v51)
        v34(v33, *(_QWORD *)(*v44 + 32), v49, v50);
      v44 += 2;
      v43 -= 16;
    }
    while (v43);
  }
  MEMORY[0x1CAA32FB4](v37, 8);
  if (v58 != v60)
    free(v58);
  if (v61 != (char *)v63)
    free(v61);
  return MEMORY[0x1CAA32FB4](v52, 8);
}

{
  return __ZN4llvm20SyntheticCountsUtilsIPKNS_9CallGraphEE16propagateFromSCCERKNSt3__16vectorIPKNS_13CallGraphNodeENS5_9allocatorIS9_EEEENS_12function_refIFNS_8OptionalINS_12ScaledNumberIyEEEES9_RKNS5_4pairINSG_INS_14WeakTrackingVHEEEPS7_EEEEENSF_IFvS9_SI_EEE(a1, a2, a3, a4, a5);
}

void llvm::SyntheticCountsUtils<llvm::ModuleSummaryIndex *>::propagate(uint64_t *a1, void (*a2)(unint64_t *__return_ptr, uint64_t, _QWORD, uint64_t *), uint64_t a3, void (*a4)(uint64_t, uint64_t, unint64_t, uint64_t), uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t i;
  char *v12;
  void **v13[7];
  _BYTE *v14;
  _BYTE *v15;
  char *v16;
  _QWORD *v17;
  unint64_t v18;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  sub_1C4F7678C(a1, (uint64_t)v13);
  while (v14 != v15)
  {
    v9 = v17;
    if ((unint64_t)v17 >= v18)
    {
      v10 = sub_1C4F77298(&v16, (uint64_t)&v14);
    }
    else
    {
      *v17 = 0;
      v9[1] = 0;
      v9[2] = 0;
      sub_1C4DFE394(v9, v14, (uint64_t)v15, (v15 - v14) >> 3);
      v10 = v9 + 3;
    }
    v17 = v10;
    sub_1C4F76FF0(v13);
  }
  sub_1C617D7D4(v13);
  v12 = v16;
  for (i = (uint64_t)v17;
        (char *)i != v12;
        llvm::SyntheticCountsUtils<llvm::ModuleSummaryIndex *>::propagateFromSCC(i, a2, a3, a4, a5))
  {
    i -= 24;
  }
  v13[0] = (void **)&v16;
  sub_1C4DB60AC(v13);
}

{
  __ZN4llvm20SyntheticCountsUtilsIPNS_18ModuleSummaryIndexEE9propagateERKS2_NS_12function_refIFNS_8OptionalINS_12ScaledNumberIyEEEENS_9ValueInfoERNSt3__14pairISB_NS_10CalleeInfoEEEEEENS6_IFvSB_S9_EEE(a1, a2, a3, a4, a5);
}

uint64_t llvm::SyntheticCountsUtils<llvm::ModuleSummaryIndex *>::propagateFromSCC(uint64_t a1, void (*a2)(unint64_t *__return_ptr, uint64_t, _QWORD, uint64_t *), uint64_t a3, void (*a4)(uint64_t, uint64_t, unint64_t, uint64_t), uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  int v28;
  uint64_t *v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  void **v35;
  uint64_t *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  __int16 v46;
  int v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t **v54;
  unint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BYTE v68[128];
  void *v69;
  uint64_t v70;
  _QWORD v71[18];

  v71[16] = *MEMORY[0x1E0C80C00];
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v69 = v71;
  v70 = 0x800000000;
  v66 = v68;
  v67 = 0x800000000;
  v9 = *(_QWORD **)a1;
  v10 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 == v10)
  {
    v12 = 0;
    v11 = 0;
LABEL_10:
    v15 = &v11[v12];
    v13 = v15;
    goto LABEL_11;
  }
  do
    sub_1C61A75D0((uint64_t)&v59, v9++, (uint64_t)&v62);
  while (v9 != v10);
  v11 = v59;
  v12 = v61;
  if (!(_DWORD)v60)
    goto LABEL_10;
  v13 = &v59[v61];
  if (v61)
  {
    v14 = 0;
    while ((~v59[v14] & 0xFFFFFFFFFFFFFFF0) == 0)
    {
      if (v61 == ++v14)
      {
        v15 = &v59[v61];
        goto LABEL_11;
      }
    }
    v15 = &v59[v14];
  }
  else
  {
    v15 = v59;
  }
LABEL_11:
  v16 = &v11[v12];
  if (v15 == v16)
    goto LABEL_43;
  do
  {
    v17 = *v15 & 0xFFFFFFFFFFFFFFF8;
    v18 = *(uint64_t **)(v17 + 24);
    if (*(uint64_t **)(v17 + 32) == v18)
    {
      v22 = &qword_1ED830B88;
      v21 = &qword_1ED830B80;
    }
    else
    {
      v19 = *v18;
      if (v19)
        v20 = *(_DWORD *)(v19 + 8) == 0;
      else
        v20 = 0;
      if (v20)
        v19 = *(_QWORD *)(v19 + 72);
      v21 = (uint64_t *)(v19 + 80);
      v22 = (uint64_t *)(v19 + 88);
    }
    v23 = (_QWORD *)*v21;
    v24 = (_QWORD *)*v22;
    while (v23 != v24)
    {
      if (v61)
      {
        v25 = *v23 & 0xFFFFFFFFFFFFFFF8;
        v26 = (v61 - 1) & *v23 & 0xFFFFFFF8;
        v27 = v59[v26] & 0xFFFFFFFFFFFFFFF8;
        if (v25 == v27)
        {
LABEL_25:
          v28 = v70;
          if (v70 < HIDWORD(v70))
          {
            v29 = (uint64_t *)((char *)v69 + 16 * v70);
            *v29 = *v15;
            v29[1] = (uint64_t)v23;
            LODWORD(v70) = v28 + 1;
            goto LABEL_33;
          }
          v34 = *v15;
          v35 = &v69;
          goto LABEL_36;
        }
        v30 = 1;
        while (v27 != -8)
        {
          v31 = v26 + v30++;
          v26 = v31 & (v61 - 1);
          v27 = v59[v26] & 0xFFFFFFFFFFFFFFF8;
          if (v25 == v27)
            goto LABEL_25;
        }
      }
      v32 = v67;
      if (v67 < HIDWORD(v67))
      {
        v33 = (uint64_t *)((char *)v66 + 16 * v67);
        *v33 = *v15;
        v33[1] = (uint64_t)v23;
        LODWORD(v67) = v32 + 1;
        goto LABEL_33;
      }
      v34 = *v15;
      v35 = &v66;
LABEL_36:
      sub_1C4F76720(v35, v34, (uint64_t)v23);
LABEL_33:
      v23 += 2;
    }
    v36 = v15 + 1;
    v15 = v13;
    if (v36 != v13)
    {
      v15 = v36;
      while ((~*v15 & 0xFFFFFFFFFFFFFFF0) == 0)
      {
        if (++v15 == v13)
        {
          v15 = v13;
          break;
        }
      }
    }
  }
  while (v15 != v16);
LABEL_43:
  v62 = 0;
  v63 = 0;
  v64 = 0;
  v37 = v70;
  if (!(_DWORD)v70)
  {
    v38 = 0;
    goto LABEL_67;
  }
  v38 = 0;
  v39 = 16 * v70;
  v40 = (uint64_t **)((char *)v69 + 8);
  do
  {
    a2(&v56, a3, *(v40 - 1), *v40);
    if (!v58)
      goto LABEL_46;
    v41 = **v40;
    v65 = 0;
    v42 = v64;
    v43 = sub_1C4F77408(v38, v64, v41, &v65);
    v44 = v65;
    if (!v43)
    {
      if (4 * (int)v63 + 4 >= 3 * v42)
      {
        v47 = 2 * v42;
      }
      else
      {
        if (v42 + ~(_DWORD)v63 - HIDWORD(v63) > v42 >> 3)
        {
LABEL_52:
          LODWORD(v63) = v63 + 1;
          if ((~*(_QWORD *)v44 & 0xFFFFFFFFFFFFFFF8) != 0)
            --HIDWORD(v63);
          v45 = 0;
          *(_QWORD *)(v44 + 8) = 0;
          *(_QWORD *)(v44 + 16) = 0;
          *(_QWORD *)v44 = v41;
          goto LABEL_55;
        }
        v47 = v42;
      }
      sub_1C4F774A8((uint64_t)&v62, v47);
      v65 = 0;
      v38 = v62;
      sub_1C4F77408(v62, v64, v41, &v65);
      v44 = v65;
      goto LABEL_52;
    }
    v45 = *(_QWORD *)(v65 + 8);
LABEL_55:
    *(_QWORD *)(v44 + 8) = sub_1C617C634(v45, *(_WORD *)(v44 + 16), v56, v57);
    *(_WORD *)(v44 + 16) = v46;
    if (v46 >= 0x4000)
    {
      *(_QWORD *)(v44 + 8) = -1;
      *(_WORD *)(v44 + 16) = 0x3FFF;
    }
LABEL_46:
    v40 += 2;
    v39 -= 16;
  }
  while (v39);
  v37 = v64;
  if (!(_DWORD)v63)
  {
LABEL_67:
    v50 = (_QWORD *)(v38 + 24 * v37);
    v48 = v50;
    goto LABEL_68;
  }
  v48 = (_QWORD *)(v38 + 24 * v64);
  if (v64)
  {
    v49 = 0;
    while ((~*(_QWORD *)(v38 + v49) & 0xFFFFFFFFFFFFFFF0) == 0)
    {
      v49 += 24;
      if (24 * v64 == v49)
      {
        v50 = (_QWORD *)(v38 + 24 * v64);
        goto LABEL_68;
      }
    }
    v50 = (_QWORD *)(v38 + v49);
  }
  else
  {
    v50 = (_QWORD *)v38;
  }
LABEL_68:
  v51 = (_QWORD *)(v38 + 24 * v37);
  while (v50 != v51)
  {
    a4(a5, *v50, v50[1], v50[2]);
    v52 = v50 + 3;
    v50 = v48;
    if (v52 != v48)
    {
      v50 = v52;
      while ((~*v50 & 0xFFFFFFFFFFFFFFF0) == 0)
      {
        v50 += 3;
        if (v50 == v48)
        {
          v50 = v48;
          break;
        }
      }
    }
  }
  if ((_DWORD)v67)
  {
    v53 = 16 * v67;
    v54 = (uint64_t **)((char *)v66 + 8);
    do
    {
      a2(&v56, a3, *(v54 - 1), *v54);
      if (v58)
        a4(a5, **v54, v56, v57);
      v54 += 2;
      v53 -= 16;
    }
    while (v53);
  }
  MEMORY[0x1CAA32FB4](v38, 8);
  if (v66 != v68)
    free(v66);
  if (v69 != v71)
    free(v69);
  return MEMORY[0x1CAA32FB4](v59, 8);
}

{
  return __ZN4llvm20SyntheticCountsUtilsIPNS_18ModuleSummaryIndexEE16propagateFromSCCERKNSt3__16vectorINS_9ValueInfoENS4_9allocatorIS6_EEEENS_12function_refIFNS_8OptionalINS_12ScaledNumberIyEEEES6_RNS4_4pairIS6_NS_10CalleeInfoEEEEEENSC_IFvS6_SF_EEE(a1, a2, a3, a4, a5);
}

void sub_1C4F75E94(int *a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;

  v30 = a2;
  v4 = *a1 + 1;
  *a1 = v4;
  *(_DWORD *)(sub_1C4F762F0((uint64_t)(a1 + 2), &v30) + 8) = v4;
  v6 = (uint64_t *)*((_QWORD *)a1 + 5);
  v5 = *((_QWORD *)a1 + 6);
  if ((unint64_t)v6 < v5)
  {
    *v6 = a2;
    v14 = v6 + 1;
  }
  else
  {
    v7 = (_QWORD *)*((_QWORD *)a1 + 4);
    v8 = v6 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      goto LABEL_35;
    v10 = v5 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        goto LABEL_36;
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = (uint64_t *)&v12[8 * v8];
    *v13 = a2;
    v14 = v13 + 1;
    if (v6 != v7)
    {
      do
      {
        v15 = *--v6;
        *--v13 = v15;
      }
      while (v6 != v7);
      v6 = (uint64_t *)*((_QWORD *)a1 + 4);
    }
    *((_QWORD *)a1 + 4) = v13;
    *((_QWORD *)a1 + 5) = v14;
    *((_QWORD *)a1 + 6) = &v12[8 * v11];
    if (v6)
      operator delete(v6);
  }
  *((_QWORD *)a1 + 5) = v14;
  v16 = v30;
  v17 = *(_QWORD *)(v30 + 16);
  v18 = *a1;
  v20 = (char *)*((_QWORD *)a1 + 11);
  v19 = *((_QWORD *)a1 + 12);
  if ((unint64_t)v20 < v19)
  {
    *(_QWORD *)v20 = v30;
    *((_QWORD *)v20 + 1) = v17;
    *((_QWORD *)v20 + 2) = sub_1C4DE7514;
    *((_DWORD *)v20 + 6) = v18;
    v21 = v20 + 32;
    goto LABEL_18;
  }
  v22 = (_BYTE *)*((_QWORD *)a1 + 10);
  v23 = (v20 - v22) >> 5;
  v24 = v23 + 1;
  if ((unint64_t)(v23 + 1) >> 59)
LABEL_35:
    abort();
  v25 = v19 - (_QWORD)v22;
  if (v25 >> 4 > v24)
    v24 = v25 >> 4;
  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
    v26 = 0x7FFFFFFFFFFFFFFLL;
  else
    v26 = v24;
  if (!v26)
  {
    v27 = 0;
    goto LABEL_28;
  }
  if (v26 >> 59)
LABEL_36:
    sub_1C4764EE4();
  v27 = (char *)operator new(32 * v26);
LABEL_28:
  v28 = &v27[32 * v23];
  *(_QWORD *)v28 = v16;
  *((_QWORD *)v28 + 1) = v17;
  *((_QWORD *)v28 + 2) = sub_1C4DE7514;
  *((_DWORD *)v28 + 6) = v18;
  v21 = v28 + 32;
  if (v20 != v22)
  {
    do
    {
      v29 = *((_OWORD *)v20 - 2);
      *(_OWORD *)(v28 - 20) = *(_OWORD *)(v20 - 20);
      *((_OWORD *)v28 - 2) = v29;
      v28 -= 32;
      v20 -= 32;
    }
    while (v20 != v22);
    v20 = (char *)*((_QWORD *)a1 + 10);
  }
  *((_QWORD *)a1 + 10) = v28;
  *((_QWORD *)a1 + 11) = v21;
  *((_QWORD *)a1 + 12) = &v27[32 * v26];
  if (v20)
    operator delete(v20);
LABEL_18:
  *((_QWORD *)a1 + 11) = v21;
}

uint64_t sub_1C4F76098(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23[2];

  *(_QWORD *)(result + 64) = *(_QWORD *)(result + 56);
  v2 = *(_QWORD *)(result + 80);
  v1 = *(_QWORD *)(result + 88);
  if (v2 != v1)
  {
    v3 = result;
    v4 = result + 8;
    while (1)
    {
      v5 = *(_QWORD *)(v1 - 24);
      if (v5 != *(_QWORD *)(*(_QWORD *)(v1 - 32) + 24))
      {
        do
        {
          v6 = *(_QWORD *)(v1 - 16);
          *(_QWORD *)(v1 - 24) = v5 + 40;
          v23[0] = v5;
          v23[1] = v6;
          v7 = sub_1C4DE71A0(v23);
          v23[0] = 0;
          if (sub_1C4F763D4(*(_QWORD *)(v3 + 8), *(_DWORD *)(v3 + 24), v7, v23))
            v8 = v23[0] == *(_QWORD *)(v3 + 8) + 16 * *(unsigned int *)(v3 + 24);
          else
            v8 = 1;
          if (v8)
          {
            sub_1C4F75E94((int *)v3, v7);
            v1 = *(_QWORD *)(v3 + 88);
          }
          else
          {
            v9 = *(_DWORD *)(v23[0] + 8);
            v1 = *(_QWORD *)(v3 + 88);
            if (*(_DWORD *)(v1 - 8) > v9)
              *(_DWORD *)(v1 - 8) = v9;
          }
          v5 = *(_QWORD *)(v1 - 24);
        }
        while (v5 != *(_QWORD *)(*(_QWORD *)(v1 - 32) + 24));
        v2 = *(_QWORD *)(v3 + 80);
      }
      v23[0] = 0;
      v23[0] = *(_QWORD *)(v1 - 32);
      v10 = *(_DWORD *)(v1 - 8);
      *(_QWORD *)(v3 + 88) = v1 - 32;
      if (v2 != v1 - 32 && *(_DWORD *)(v1 - 40) > v10)
        *(_DWORD *)(v1 - 40) = v10;
      result = sub_1C4F762F0(v4, v23);
      if (v10 == *(_DWORD *)(result + 8))
        break;
      v2 = *(_QWORD *)(v3 + 80);
      v1 = *(_QWORD *)(v3 + 88);
      if (v2 == v1)
        return result;
    }
    v11 = *(_QWORD **)(v3 + 64);
    do
    {
      v12 = *(_QWORD *)(v3 + 40);
      v13 = *(_QWORD *)(v3 + 72);
      if ((unint64_t)v11 >= v13)
      {
        v15 = *(_QWORD **)(v3 + 56);
        v16 = v11 - v15;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 61)
          abort();
        v18 = v13 - (_QWORD)v15;
        if (v18 >> 2 > v17)
          v17 = v18 >> 2;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v19 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 61)
            sub_1C4764EE4();
          v20 = (char *)operator new(8 * v19);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[8 * v16];
        *(_QWORD *)v21 = *(_QWORD *)(v12 - 8);
        v14 = v21 + 8;
        if (v11 != v15)
        {
          do
          {
            v22 = *--v11;
            *((_QWORD *)v21 - 1) = v22;
            v21 -= 8;
          }
          while (v11 != v15);
          v11 = *(_QWORD **)(v3 + 56);
        }
        *(_QWORD *)(v3 + 56) = v21;
        *(_QWORD *)(v3 + 64) = v14;
        *(_QWORD *)(v3 + 72) = &v20[8 * v19];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = *(_QWORD *)(v12 - 8);
        v14 = v11 + 1;
      }
      *(_QWORD *)(v3 + 64) = v14;
      *(_QWORD *)(v3 + 40) -= 8;
      result = sub_1C4F762F0(v4, v14 - 1);
      *(_DWORD *)(result + 8) = -1;
      v11 = *(_QWORD **)(v3 + 64);
    }
    while (*(v11 - 1) != v23[0]);
  }
  return result;
}

uint64_t sub_1C4F762F0(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_1C4F763D4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1C4F76468(a1, v7);
    v8 = 0;
    sub_1C4F763D4(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)result != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)result = *a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_1C4F763D4(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_4;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_4:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C4F76468(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4F76520(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C4F76520(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C4F763D4(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *(_QWORD *)a2;
      *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

char *sub_1C4F765CC(char **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  int64x2_t v11;
  char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  uint64_t v17;
  int64x2_t v18;
  char *v19;
  _QWORD *v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v3;
  v20 = a1 + 2;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_1C4764EE4();
  v7 = (char *)operator new(24 * v5);
  v8 = &v7[24 * v2];
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = 0;
  sub_1C4DFE394(v8, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v10 = *a1;
  v9 = a1[1];
  if (v9 == *a1)
  {
    v11 = vdupq_n_s64((unint64_t)v9);
    v12 = v8;
  }
  else
  {
    v12 = v8;
    do
    {
      *((_QWORD *)v12 - 3) = 0;
      *((_QWORD *)v12 - 2) = 0;
      v12 -= 24;
      *((_QWORD *)v12 + 2) = 0;
      v13 = *(_OWORD *)(v9 - 24);
      v9 -= 24;
      *(_OWORD *)v12 = v13;
      *((_QWORD *)v12 + 2) = *((_QWORD *)v9 + 2);
      *(_QWORD *)v9 = 0;
      *((_QWORD *)v9 + 1) = 0;
      *((_QWORD *)v9 + 2) = 0;
    }
    while (v9 != v10);
    v11 = *(int64x2_t *)a1;
  }
  v14 = v8 + 24;
  *a1 = v12;
  a1[1] = v14;
  v18 = v11;
  v15 = a1[2];
  a1[2] = &v7[24 * v5];
  v19 = v15;
  v17 = v11.i64[0];
  sub_1C61B83C8((uint64_t)&v17);
  return v14;
}

_DWORD *sub_1C4F76720(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = result;
  v6 = result[2];
  if (v6 >= result[3])
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 16);
    LODWORD(v6) = v5[2];
  }
  v7 = (_QWORD *)(*(_QWORD *)v5 + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  ++v5[2];
  return result;
}

_QWORD *sub_1C4F7678C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;

  v3 = sub_1C4F767DC(*a1);
  *(_DWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_QWORD *)(a2 + 96) = 0;
  sub_1C4F76DBC((int *)a2, v3);
  return sub_1C4F76FF0((_QWORD *)a2);
}

unint64_t sub_1C4F767DC(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  const char *v5;
  _QWORD *v6;
  unsigned __int8 v7;
  uint64_t v8;
  _BYTE v10[40];
  const void *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  void **v17;

  sub_1C4F7695C(a1, (uint64_t)v10);
  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E8139E80;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)&v10[8];
  *(_OWORD *)(v2 + 24) = *(_OWORD *)&v10[24];
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  sub_1C4DFE394((_QWORD *)(v2 + 40), v11, v12, (v12 - (uint64_t)v11) >> 3);
  *(_QWORD *)v2 = &unk_1E8139E60;
  v3 = v14;
  *(_OWORD *)(v2 + 64) = v13;
  *(_OWORD *)(v2 + 80) = v3;
  *(_QWORD *)(v2 + 96) = v15;
  v14 = 0uLL;
  v4 = v16;
  v15 = 0;
  v16 = 0uLL;
  *(_OWORD *)(v2 + 104) = v4;
  sub_1C61A85AC(v10);
  v5 = 0;
  if (!*(_BYTE *)(a1 + 133))
  {
    *(_QWORD *)&v10[8] = 0;
    v5 = "";
  }
  *(_QWORD *)v10 = v5;
  v6 = operator new(8uLL);
  *(_QWORD *)&v10[16] = v6;
  *v6 = v2;
  *(_QWORD *)&v10[24] = v6 + 1;
  *(_QWORD *)&v10[32] = v6 + 1;
  v7 = atomic_load((unsigned __int8 *)&qword_1EF8EB1E0);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1EF8EB1E0))
  {
    qword_1EF8EB1B0 = 0;
    unk_1EF8EB1B8 = *(_OWORD *)v10;
    unk_1EF8EB1C8 = *(_OWORD *)&v10[16];
    qword_1EF8EB1D8 = *(_QWORD *)&v10[32];
    memset(&v10[16], 0, 24);
    __cxa_atexit((void (*)(void *))sub_1C61B8428, &qword_1EF8EB1B0, &dword_1C475E000);
    __cxa_guard_release(&qword_1EF8EB1E0);
  }
  v8 = *(unsigned __int8 *)(a1 + 133);
  v17 = (void **)&v10[16];
  sub_1C4764BBC(&v17);
  return v8 | (unint64_t)&qword_1EF8EB1B0;
}

void sub_1C4F7695C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  void **v24;
  void *v25;
  __int128 v26;
  uint64_t v27;
  void *__p[3];
  uint64_t *v29;
  _QWORD *v30[2];

  v3 = 0;
  v30[0] = 0;
  v30[1] = 0;
  v29 = (uint64_t *)v30;
  v4 = (_QWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (*(_QWORD *)a1 == a1 + 8)
    goto LABEL_41;
  do
  {
    v7 = v5[7];
    if (v5[8] != v7 && *(_DWORD *)(*(_QWORD *)v7 + 8) == 1)
      sub_1C4F76BEC((unint64_t)(v5 + 4) & 0xFFFFFFFFFFFFFFF8 | *(unsigned __int8 *)(a1 + 133), &v29);
    v8 = (_QWORD *)v5[1];
    if (v8)
    {
      do
      {
        v9 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v9 = (_QWORD *)v5[2];
        v10 = *v9 == (_QWORD)v5;
        v5 = v9;
      }
      while (!v10);
    }
    v5 = v9;
  }
  while (v9 != v4);
  v11 = v29;
  if (v29 == (uint64_t *)v30)
  {
    v3 = 0;
LABEL_41:
    memset(__p, 0, sizeof(__p));
    sub_1C61B8460((__int128 *)__p, a2);
    v25 = __p[0];
    if (!__p[0])
      goto LABEL_44;
    v24 = &__p[1];
    goto LABEL_43;
  }
  v12 = 0;
  v13 = 0;
  v3 = 0;
  do
  {
    if (!*((_BYTE *)v11 + 40))
    {
      v14 = v11[4];
      if (v13 >= v12)
      {
        v15 = (v13 - v3) >> 4;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 60)
          abort();
        if ((v12 - v3) >> 3 > v16)
          v16 = (v12 - v3) >> 3;
        if ((unint64_t)(v12 - v3) >= 0x7FFFFFFFFFFFFFF0)
          v17 = 0xFFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
        {
          if (v17 >> 60)
            sub_1C4764EE4();
          v18 = (char *)operator new(16 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = (uint64_t *)&v18[16 * v15];
        *v19 = v14;
        v19[1] = 0;
        if (v13 == v3)
        {
          v21 = v13;
          v3 = &v18[16 * v15];
        }
        else
        {
          v20 = &v18[16 * v15];
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v13 - 1);
            v20 -= 16;
            v13 -= 16;
          }
          while (v13 != v3);
          v21 = v3;
          v3 = v20;
        }
        v12 = &v18[16 * v17];
        v13 = (char *)(v19 + 2);
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_QWORD *)v13 = v14;
        *((_QWORD *)v13 + 1) = 0;
        v13 += 16;
      }
    }
    v22 = (uint64_t *)v11[1];
    if (v22)
    {
      do
      {
        v23 = v22;
        v22 = (uint64_t *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        v23 = (uint64_t *)v11[2];
        v10 = *v23 == (_QWORD)v11;
        v11 = v23;
      }
      while (!v10);
    }
    v11 = v23;
  }
  while (v23 != (uint64_t *)v30);
  v24 = (void **)&v26 + 1;
  if (v3 == v13)
    goto LABEL_41;
  v26 = 0uLL;
  v27 = 0;
  sub_1C4EECB34(&v26, v3, v13, (v13 - v3) >> 4);
  sub_1C61B8460(&v26, a2);
  v25 = (void *)v26;
  if ((_QWORD)v26)
  {
LABEL_43:
    *v24 = v25;
    operator delete(v25);
  }
LABEL_44:
  if (v3)
    operator delete(v3);
  sub_1C47655E8((uint64_t)&v29, v30[0]);
}

unint64_t sub_1C4F76BEC(unint64_t result, uint64_t **a2)
{
  char v3;
  uint64_t v4;
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  unint64_t v11;

  v11 = result;
  if (*(_QWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 32) != *(_QWORD *)((result & 0xFFFFFFFFFFFFFFF8) + 24))
  {
    v10 = 0;
    result = (unint64_t)sub_1C4F76CC4(a2, &v11, (uint64_t **)&v11, &v10);
    if ((v3 & 1) != 0)
    {
      v4 = **(_QWORD **)((v11 & 0xFFFFFFFFFFFFFFF8) + 24);
      if (*(_DWORD *)(v4 + 8) != 1)
        v4 = 0;
      v5 = *(uint64_t ***)(v4 + 80);
      v6 = *(_QWORD *)(v4 + 88) - (_QWORD)v5;
      if (v6)
      {
        v7 = 16 * (v6 >> 4);
        do
        {
          v9 = 1;
          result = (unint64_t)sub_1C4F76CC4(a2, v5, v5, &v9);
          if (v8)
          {
            result = sub_1C4F76BEC(*v5, a2);
          }
          else if (!*(_BYTE *)(result + 40))
          {
            *(_BYTE *)(result + 40) = 1;
          }
          v5 += 2;
          v7 -= 16;
        }
        while (v7);
      }
    }
  }
  return result;
}

uint64_t **sub_1C4F76CC4(uint64_t **a1, _QWORD *a2, uint64_t **a3, _BYTE *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *(_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = *(_QWORD *)(v7[4] & 0xFFFFFFFFFFFFFFF8);
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = (uint64_t *)v10;
    v10 = (uint64_t **)operator new(0x30uLL);
    v10[4] = *a3;
    *((_BYTE *)v10 + 40) = *a4;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = v12;
    *v8 = (uint64_t *)v10;
    v13 = (uint64_t *)**a1;
    v14 = (uint64_t *)v10;
    if (v13)
    {
      *a1 = v13;
      v14 = *v8;
    }
    sub_1C4768E74(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v10;
}

void sub_1C4F76DBC(int *a1, uint64_t a2)
{
  int v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _DWORD *v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  char *v22;
  char *v23;
  _BYTE *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;

  v32 = a2;
  v3 = *a1 + 1;
  *a1 = v3;
  *((_DWORD *)sub_1C61B85A0((uint64_t *)a1 + 1, &v32) + 2) = v3;
  v5 = (char *)*((_QWORD *)a1 + 5);
  v4 = *((_QWORD *)a1 + 6);
  if ((unint64_t)v5 >= v4)
  {
    v7 = (char *)*((_QWORD *)a1 + 4);
    v8 = (v5 - v7) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      goto LABEL_44;
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        goto LABEL_45;
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = v32;
    v6 = v13 + 8;
    while (v5 != v7)
    {
      v14 = *((_QWORD *)v5 - 1);
      v5 -= 8;
      *((_QWORD *)v13 - 1) = v14;
      v13 -= 8;
    }
    *((_QWORD *)a1 + 4) = v13;
    *((_QWORD *)a1 + 5) = v6;
    *((_QWORD *)a1 + 6) = &v12[8 * v11];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v5 = v32;
    v6 = v5 + 8;
  }
  *((_QWORD *)a1 + 5) = v6;
  v15 = v32;
  v16 = *(_QWORD **)((v32 & 0xFFFFFFFFFFFFFFF8) + 24);
  if (*(_QWORD **)((v32 & 0xFFFFFFFFFFFFFFF8) + 32) == v16)
  {
    v17 = &llvm::FunctionSummary::ExternalNode;
  }
  else
  {
    v17 = (_DWORD *)*v16;
    if (v17)
      v18 = v17[2] == 0;
    else
      v18 = 0;
    if (v18)
      v17 = (_DWORD *)*((_QWORD *)v17 + 9);
  }
  v19 = *((_QWORD *)v17 + 10);
  v20 = *a1;
  v22 = (char *)*((_QWORD *)a1 + 11);
  v21 = *((_QWORD *)a1 + 12);
  if ((unint64_t)v22 < v21)
  {
    *(_QWORD *)v22 = v32;
    *((_QWORD *)v22 + 1) = v19;
    *((_QWORD *)v22 + 2) = sub_1C61B8604;
    *((_DWORD *)v22 + 6) = v20;
    v23 = v22 + 32;
    goto LABEL_43;
  }
  v24 = (_BYTE *)*((_QWORD *)a1 + 10);
  v25 = (v22 - v24) >> 5;
  v26 = v25 + 1;
  if ((unint64_t)(v25 + 1) >> 59)
LABEL_44:
    abort();
  v27 = v21 - (_QWORD)v24;
  if (v27 >> 4 > v26)
    v26 = v27 >> 4;
  if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFE0)
    v28 = 0x7FFFFFFFFFFFFFFLL;
  else
    v28 = v26;
  if (!v28)
  {
    v29 = 0;
    goto LABEL_38;
  }
  if (v28 >> 59)
LABEL_45:
    sub_1C4764EE4();
  v29 = (char *)operator new(32 * v28);
LABEL_38:
  v30 = &v29[32 * v25];
  *(_QWORD *)v30 = v15;
  *((_QWORD *)v30 + 1) = v19;
  *((_QWORD *)v30 + 2) = sub_1C61B8604;
  *((_DWORD *)v30 + 6) = v20;
  v23 = v30 + 32;
  if (v22 != v24)
  {
    do
    {
      v31 = *((_OWORD *)v22 - 2);
      *(_OWORD *)(v30 - 20) = *(_OWORD *)(v22 - 20);
      *((_OWORD *)v30 - 2) = v31;
      v30 -= 32;
      v22 -= 32;
    }
    while (v22 != v24);
    v22 = (char *)*((_QWORD *)a1 + 10);
  }
  *((_QWORD *)a1 + 10) = v30;
  *((_QWORD *)a1 + 11) = v23;
  *((_QWORD *)a1 + 12) = &v29[32 * v28];
  if (v22)
    operator delete(v22);
LABEL_43:
  *((_QWORD *)a1 + 11) = v23;
}

_QWORD *sub_1C4F76FF0(_QWORD *result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  result[8] = result[7];
  if (result[10] != result[11])
  {
    v1 = result;
    v2 = result + 1;
    while (1)
    {
      sub_1C4F771A8((uint64_t)v1);
      v4 = v1[10];
      v3 = v1[11];
      v18 = *(_QWORD *)(v3 - 32);
      v5 = *(_DWORD *)(v3 - 8);
      v1[11] = v3 - 32;
      if (v4 != v3 - 32 && *(_DWORD *)(v3 - 40) > v5)
        *(_DWORD *)(v3 - 40) = v5;
      result = sub_1C61B85A0(v2, &v18);
      if (v5 == *((_DWORD *)result + 2))
        break;
      if (v1[10] == v1[11])
        return result;
    }
    v6 = (char *)v1[8];
    do
    {
      v7 = v1[5];
      v8 = v1[9];
      if ((unint64_t)v6 >= v8)
      {
        v10 = (char *)v1[7];
        v11 = (v6 - v10) >> 3;
        v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 61)
          abort();
        v13 = v8 - (_QWORD)v10;
        if (v13 >> 2 > v12)
          v12 = v13 >> 2;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v14 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v14 = v12;
        if (v14)
        {
          if (v14 >> 61)
            sub_1C4764EE4();
          v15 = (char *)operator new(8 * v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = *(_QWORD *)(v7 - 8);
        v9 = v16 + 8;
        while (v6 != v10)
        {
          v17 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        v1[7] = v16;
        v1[8] = v9;
        v1[9] = &v15[8 * v14];
        if (v10)
        {
          operator delete(v10);
          v7 = v1[5];
        }
      }
      else
      {
        *(_QWORD *)v6 = *(_QWORD *)(v7 - 8);
        v9 = v6 + 8;
      }
      v1[8] = v9;
      v1[5] = v7 - 8;
      result = sub_1C61B85A0(v2, v9 - 1);
      *((_DWORD *)result + 2) = -1;
      v6 = (char *)v1[8];
    }
    while ((*((_QWORD *)v6 - 1) & 0xFFFFFFFFFFFFFFF8) != (v18 & 0xFFFFFFFFFFFFFFF8));
  }
  return result;
}

uint64_t sub_1C4F771A8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t *v8;
  uint64_t result;
  uint64_t (*v10)(void);
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = (uint64_t *)(a1 + 8);
  while (1)
  {
    v3 = *(_QWORD *)(a1 + 88);
    v4 = *(_QWORD *)(v3 - 32) & 0xFFFFFFFFFFFFFFF8;
    v5 = *(uint64_t **)(v4 + 24);
    if (*(uint64_t **)(v4 + 32) == v5)
    {
      v8 = &qword_1ED830B88;
    }
    else
    {
      v6 = *v5;
      if (v6)
        v7 = *(_DWORD *)(v6 + 8) == 0;
      else
        v7 = 0;
      if (v7)
        v6 = *(_QWORD *)(v6 + 72);
      v8 = (uint64_t *)(v6 + 88);
    }
    result = *(_QWORD *)(v3 - 24);
    if (result == *v8)
      break;
    v10 = *(uint64_t (**)(void))(v3 - 16);
    *(_QWORD *)(v3 - 24) = result + 16;
    v13 = v10();
    v14 = 0;
    if (!sub_1C61A7F08(v2, &v13, &v14) || v14 == *(_QWORD *)(a1 + 8) + 16 * *(unsigned int *)(a1 + 24))
    {
      sub_1C4F76DBC((int *)a1, v13);
    }
    else
    {
      v11 = *(_DWORD *)(v14 + 8);
      v12 = *(_QWORD *)(a1 + 88);
      if (*(_DWORD *)(v12 - 8) > v11)
        *(_DWORD *)(v12 - 8) = v11;
    }
  }
  return result;
}

_QWORD *sub_1C4F77298(char **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  void *v16;
  void *v17;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v3;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_1C4764EE4();
  v7 = (char *)operator new(24 * v5);
  v8 = &v7[24 * v2];
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = 0;
  sub_1C4DFE394(v8, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v9 = *a1;
  v10 = a1[1];
  if (v10 == *a1)
  {
    v14 = v8 + 24;
    *a1 = v8;
    a1[1] = v8 + 24;
    a1[2] = &v7[24 * v5];
    if (!v10)
      return v14;
    goto LABEL_17;
  }
  v11 = &v7[24 * v2];
  do
  {
    *((_QWORD *)v11 - 3) = 0;
    *((_QWORD *)v11 - 2) = 0;
    v11 -= 24;
    *((_QWORD *)v11 + 2) = 0;
    v12 = *(_OWORD *)(v10 - 24);
    v10 -= 24;
    *(_OWORD *)v11 = v12;
    *((_QWORD *)v11 + 2) = *((_QWORD *)v10 + 2);
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 2) = 0;
  }
  while (v10 != v9);
  v10 = *a1;
  v13 = a1[1];
  v14 = v8 + 24;
  *a1 = v11;
  a1[1] = v8 + 24;
  a1[2] = &v7[24 * v5];
  if (v13 != v10)
  {
    v15 = v13;
    do
    {
      v17 = (void *)*((_QWORD *)v15 - 3);
      v15 -= 24;
      v16 = v17;
      if (v17)
      {
        *((_QWORD *)v13 - 2) = v16;
        operator delete(v16);
      }
      v13 = v15;
    }
    while (v15 != v10);
  }
  if (v10)
LABEL_17:
    operator delete(v10);
  return v14;
}

uint64_t sub_1C4F77408(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (a2 - 1) & a3 & 0xFFFFFFF8;
    v6 = (_QWORD *)(a1 + 24 * v5);
    v7 = *v6 & 0xFFFFFFFFFFFFFFF8;
    if ((a3 & 0xFFFFFFFFFFFFFFF8) == v7)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -8)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -16;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6 & 0xFFFFFFFFFFFFFFF8;
        v8 = 1;
        if ((a3 & 0xFFFFFFFFFFFFFFF8) == v7)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C4F774A8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -8;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((~*(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF0) != 0)
        {
          v18 = 0;
          sub_1C4F77408(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(_QWORD *)v13;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 24 * v16;
    do
    {
      *result = -8;
      result += 3;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

BOOL llvm::TargetLibraryInfoImpl::isCallingConvCCompatible(llvm::TargetLibraryInfoImpl *this, llvm::CallBase *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40);
  if ((*(_BYTE *)(v2 + 239) & 0x80) != 0)
  {
    v3 = *(_QWORD *)(v2 + 216);
    v4 = *(_QWORD *)(v2 + 224);
  }
  else
  {
    v3 = v2 + 216;
    v4 = *(_BYTE *)(v2 + 239) & 0x7F;
  }
  return sub_1C4F77630((*((unsigned __int16 *)this + 9) >> 2) & 0x3FF, v3, v4, *((_QWORD *)this + 9));
}

BOOL sub_1C4F77630(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v8;
  char v9;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  void *__p;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  if ((a1 - 66) >= 3)
    return a1 == 0;
  v23 = v4;
  v24 = v5;
  v19 = 261;
  v18[0] = a2;
  v18[1] = a3;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v18);
  v8 = v22 == 7 || v22 == 28;
  v9 = (v22 & 0xFFFFFFFE) == 0x20 || v8;
  if (v21 < 0)
  {
    operator delete(__p);
    if ((v9 & 1) != 0)
      return 0;
  }
  else if ((v9 & 1) != 0)
  {
    return 0;
  }
  v11 = *(_QWORD *)(a4 + 16);
  v12 = *(unsigned __int8 *)(*(_QWORD *)v11 + 8);
  v13 = v12 > 0xF;
  v14 = (1 << v12) & 0xA080;
  if (!v13 && v14 != 0)
  {
    if (8 * *(unsigned int *)(a4 + 12) == 8)
      return 1;
    v16 = v11 + 8;
    v17 = 8 * ((8 * *(unsigned int *)(a4 + 12) - 8) >> 3);
    while ((*(unsigned __int8 *)(*(_QWORD *)v16 + 8) | 2) == 0xF)
    {
      v16 += 8;
      v17 -= 8;
      if (!v17)
        return 1;
    }
  }
  return 0;
}

llvm::TargetLibraryInfoImpl *llvm::TargetLibraryInfoImpl::TargetLibraryInfoImpl(llvm::TargetLibraryInfoImpl *this)
{
  __int128 v2;
  void *__p[2];
  __int128 v5;
  __int128 v6;

  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)this = v2;
  *((_OWORD *)this + 1) = v2;
  *((_OWORD *)this + 2) = v2;
  *((_OWORD *)this + 3) = v2;
  *((_OWORD *)this + 4) = v2;
  *((_OWORD *)this + 5) = v2;
  *((_OWORD *)this + 6) = v2;
  *(_QWORD *)((char *)this + 109) = -1;
  v5 = 0u;
  v6 = 0u;
  *(_OWORD *)__p = 0u;
  sub_1C4F777B0((uint64_t)this, (int *)__p);
  if (SBYTE7(v5) < 0)
    operator delete(__p[0]);
  return this;
}

void sub_1C4F777B0(uint64_t a1, int *a2)
{
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  unint64_t v11;
  char v12;
  double v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  int *v21;
  char v22;
  int v23;
  int v24;
  _BOOL4 v25;
  int v26;
  int v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  unsigned int v49;
  char v50;
  int v51;
  BOOL v52;
  char v53;
  int v54;
  char v55;
  int v56;
  char v57;
  int16x8_t v58;
  char v59;
  char v60;
  int16x8_t v61;
  int16x8_t v62;
  int16x8_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t OSVersion;
  uint64_t v67;

  if ((a2[6] - 27) >= 3)
  {
    v10 = *(_BYTE *)(a1 + 70);
    v9 = *(_BYTE *)(a1 + 88);
    v8 = *(_BYTE *)(a1 + 63);
    v7 = *(_BYTE *)(a1 + 56);
    v6 = *(_BYTE *)(a1 + 64);
    v5 = *(_BYTE *)(a1 + 69);
    v4 = *(_BYTE *)(a1 + 57);
  }
  else
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    *(_QWORD *)(a1 + 109) = 0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  *(_BYTE *)(a1 + 70) = v10 & 0xCC;
  *(_BYTE *)(a1 + 88) = v9 & 0x33;
  *(_BYTE *)(a1 + 63) = v8 & 0xCF;
  *(_BYTE *)(a1 + 56) = v7 & 0x3F;
  *(_BYTE *)(a1 + 69) = v5 & 0xCF;
  *(_BYTE *)(a1 + 64) = v6 & 0xCC;
  *(_BYTE *)(a1 + 57) = v4 & 0xCF;
  v11 = a2[6];
  v12 = (v11 < 0x25) & (0x1401800000uLL >> v11);
  *(_BYTE *)(a1 + 144) = v12;
  *(_BYTE *)(a1 + 145) = v12;
  *(_BYTE *)(a1 + 146) = (v11 & 0xFFFFFFFC) == 16;
  if (sub_1C5E4EA90(v11) == 16)
    v14 = 16;
  else
    v14 = 32;
  *(_DWORD *)(a1 + 148) = v14;
  if ((v11 & 0xFFFFFFFE) == 0x30)
  {
    *(_QWORD *)(a1 + 109) = 0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_WORD *)(a1 + 80) = 12528;
    return;
  }
  if ((_DWORD)v11 == 30 || (_DWORD)v11 == 25)
  {
    *(_QWORD *)(a1 + 109) = 0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_WORD *)(a1 + 22) = 960;
    return;
  }
  v15 = a2[9];
  if ((v15 & 0xFFFFFFF7) == 3)
  {
    *(_BYTE *)(a1 + 70) = v10 | 0x33;
    *(_BYTE *)(a1 + 88) = v9 | 0xCC;
    if ((llvm::Triple::isMacOSXVersionLT((llvm::Triple *)a2, 0xAu, 5, 0) & 1) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
  if (v15 > 0x21)
  {
LABEL_19:
    *(_BYTE *)(a1 + 82) &= 0xF0u;
    *(_BYTE *)(a1 + 81) &= 0x3Fu;
LABEL_20:
    v15 = a2[9];
    goto LABEL_21;
  }
  if (((1 << v15) & 0x360000000) == 0)
  {
    if (((1 << v15) & 0x10000080) != 0)
    {
      OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)a2);
      v67 = v16;
      v64 = 3;
      v65 = 0;
      if (!sub_1C4F7A4D8(&OSVersion, &v64))
        goto LABEL_20;
    }
    goto LABEL_19;
  }
LABEL_21:
  if (v15 > 0x21 || ((1 << v15) & 0x3F0000888) == 0 || a2[6] == 41)
    goto LABEL_30;
  if ((v15 & 0xFFFFFFF7) == 3)
  {
    if ((llvm::Triple::isMacOSXVersionLT((llvm::Triple *)a2, 0xAu, 9, 0) & 1) != 0)
      goto LABEL_30;
    v15 = a2[9];
  }
  if (v15 == 28 || v15 == 7)
  {
    OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)a2);
    v67 = v17;
    v64 = 7;
    v65 = 0;
    if (!sub_1C4F7A4D8(&OSVersion, &v64))
    {
LABEL_31:
      v15 = a2[9];
      goto LABEL_32;
    }
LABEL_30:
    *(_BYTE *)(a1 + 29) &= 0xF0u;
    *(_BYTE *)(a1 + 18) &= 0xFu;
    *(_BYTE *)(a1 + 27) &= 0x3Fu;
    *(_BYTE *)(a1 + 28) &= 0xFCu;
    goto LABEL_31;
  }
LABEL_32:
  if (v15 != 5 && v15 != 14)
  {
    if (v15 == 9)
    {
      v18 = a2[10];
      if ((v18 - 1) < 6 || (v18 & 0xFFFFFFFC) == 0xC)
      {
LABEL_42:
        v20 = a2[6];
        goto LABEL_43;
      }
    }
    *(_BYTE *)(a1 + 42) &= 0xFCu;
    v15 = a2[9];
  }
  v19 = v15 & 0xFFFFFFF7;
  v20 = a2[6];
  if (v19 == 3 && v20 == 41)
  {
    if ((llvm::Triple::isMacOSXVersionLT((llvm::Triple *)a2, 0xAu, 7, 0) & 1) == 0)
    {
      sub_1C4F7A270(a1, 0x115u, "fwrite$UNIX2003", 0xFuLL);
      v13 = sub_1C4F7A270(a1, 0xFFu, "fputs$UNIX2003", 0xEuLL);
    }
    goto LABEL_42;
  }
LABEL_43:
  if (v20 != 37 && v20 != 43)
  {
    if (a2[9] == 40)
    {
LABEL_48:
      v21 = a2 + 10;
      goto LABEL_74;
    }
    *(_BYTE *)(a1 + 72) &= 0x3Fu;
    *(_BYTE *)(a1 + 97) &= 0xCFu;
    *(_BYTE *)(a1 + 58) &= 0xFCu;
  }
  if (a2[9] == 40)
    goto LABEL_48;
  v22 = *(_BYTE *)(a1 + 29);
  *(_BYTE *)(a1 + 30) &= 0xFCu;
  *(_BYTE *)(a1 + 29) = v22 & 0xF;
  v21 = a2 + 10;
  if (a2[9] != 15)
    goto LABEL_74;
  v23 = *v21;
  v24 = 15;
  if (*v21 != 1 && v23 != 18)
  {
    v25 = v23 != 16 || llvm::Triple::getEnvironmentVersion((llvm::Triple *)a2) - 19 < 0xFFFFFFEE;
    v26 = a2[6];
    v27 = 1;
    if (v26 != 1 && v26 != 3)
    {
      if (v26 == 42)
        goto LABEL_60;
      v27 = 0;
      *(_BYTE *)(a1 + 35) &= 0x3Fu;
      *(_BYTE *)(a1 + 37) &= 0xCFu;
      *(_BYTE *)(a1 + 39) &= 0x33u;
      *(_BYTE *)(a1 + 44) &= 0x3Fu;
      *(_BYTE *)(a1 + 47) &= 0x33u;
      *(_BYTE *)(a1 + 52) &= 0xCFu;
      *(_BYTE *)(a1 + 58) &= 0x3Fu;
      *(_BYTE *)(a1 + 61) &= 0x3Fu;
      *(_BYTE *)(a1 + 75) &= 0xCFu;
      *(_BYTE *)(a1 + 78) &= 0xF3u;
      *(_BYTE *)(a1 + 83) &= 0xF3u;
      *(_BYTE *)(a1 + 87) &= 0xFCu;
      *(_BYTE *)(a1 + 91) &= 0xF3u;
      *(_BYTE *)(a1 + 96) &= 0x33u;
      *(_BYTE *)(a1 + 98) &= 0xCFu;
      *(_BYTE *)(a1 + 109) &= 0xCCu;
    }
    if ((v26 | 2) == 3)
    {
LABEL_61:
      v28 = *(_BYTE *)(a1 + 65);
      v29 = *(_BYTE *)(a1 + 74);
      v30 = *(_BYTE *)(a1 + 36);
      v31 = v30 & 0x3F;
      *(_BYTE *)(a1 + 36) = v30 & 0x3F;
      v32 = *(_BYTE *)(a1 + 38);
      v33 = v32 & 0xCF;
      *(_BYTE *)(a1 + 38) = v32 & 0xCF;
      *(_BYTE *)(a1 + 39) &= 0xCFu;
      v34 = *(_BYTE *)(a1 + 40);
      v35 = v34 & 0x3F;
      *(_BYTE *)(a1 + 40) = v34 & 0x3F;
      v36 = *(_BYTE *)(a1 + 45) & 0xFC;
      *(_BYTE *)(a1 + 45) = v36;
      *(_BYTE *)(a1 + 48) &= 0xF0u;
      v37 = *(_BYTE *)(a1 + 52) & 0x3F;
      *(_BYTE *)(a1 + 52) = v37;
      v38 = *(_BYTE *)(a1 + 54) & 0xF3;
      *(_BYTE *)(a1 + 54) = v38;
      *(_BYTE *)(a1 + 59) &= 0xFCu;
      *(_BYTE *)(a1 + 62) &= 0xFCu;
      *(_BYTE *)(a1 + 65) = v28 & 0xC3;
      *(_BYTE *)(a1 + 74) = v29 & 0xC3;
      *(_BYTE *)(a1 + 75) &= 0x3Fu;
      v39 = *(_BYTE *)(a1 + 78) & 0xCF;
      *(_BYTE *)(a1 + 78) = v39;
      *(_BYTE *)(a1 + 83) &= 0xCFu;
      *(_BYTE *)(a1 + 87) &= 0xF3u;
      *(_BYTE *)(a1 + 91) &= 0xCFu;
      *(_BYTE *)(a1 + 97) &= 0xF0u;
      *(_BYTE *)(a1 + 98) &= 0x3Fu;
      *(_BYTE *)(a1 + 110) &= 0xFCu;
      *(_BYTE *)(a1 + 109) &= 0x3Fu;
      if (v25)
      {
        v40 = *(_BYTE *)(a1 + 93);
        v41 = *(_BYTE *)(a1 + 94);
        v42 = *(_BYTE *)(a1 + 111);
      }
      else
      {
        *(_BYTE *)(a1 + 36) = v30 & 0x30;
        *(_BYTE *)(a1 + 37) &= 0x3Fu;
        *(_BYTE *)(a1 + 38) = v32 & 0xCC;
        *(_BYTE *)(a1 + 40) = v34 & 0x30;
        sub_1C4F7A270(a1, 0xABu, "_cabs", 5uLL);
        *(_BYTE *)(a1 + 43) &= 0x3Cu;
        *(_BYTE *)(a1 + 44) &= 0xFCu;
        sub_1C4F7A270(a1, 0xB9u, "_copysign", 9uLL);
        sub_1C4F7A270(a1, 0xBAu, "_copysignf", 0xAuLL);
        *(_BYTE *)(a1 + 51) &= 0x3Fu;
        *(_BYTE *)(a1 + 52) &= 0xFCu;
        *(_BYTE *)(a1 + 53) &= 0xF0u;
        *(_BYTE *)(a1 + 60) &= 0x30u;
        *(_BYTE *)(a1 + 61) &= 0xFCu;
        *(_BYTE *)(a1 + 76) &= 0x30u;
        *(_BYTE *)(a1 + 77) &= 0xFCu;
        v13 = sub_1C4F7A270(a1, 0x136u, "_logb", 5uLL);
        if (v27)
          v13 = sub_1C4F7A270(a1, 0x137u, "_logbf", 6uLL);
        else
          *(_BYTE *)(a1 + 77) &= 0x3Fu;
        *(_BYTE *)(a1 + 92) &= 0xFu;
        v40 = *(_BYTE *)(a1 + 93) & 0xCF;
        v41 = *(_BYTE *)(a1 + 94) & 0xCF;
        v42 = *(_BYTE *)(a1 + 111) & 0xC3;
        v31 = *(_BYTE *)(a1 + 36);
        v33 = *(_BYTE *)(a1 + 38);
        v35 = *(_BYTE *)(a1 + 40);
        v37 = *(_BYTE *)(a1 + 52);
        v39 = *(_BYTE *)(a1 + 78);
        v36 = *(_BYTE *)(a1 + 45);
        v38 = *(_BYTE *)(a1 + 54);
      }
      *(_BYTE *)(a1 + 36) = v31 & 0xCF;
      *(_BYTE *)(a1 + 38) = v33 & 0xF3;
      *(_BYTE *)(a1 + 40) = v35 & 0xCF;
      *(_BYTE *)(a1 + 43) &= 0xF3u;
      *(_BYTE *)(a1 + 44) &= 0xF3u;
      v43 = *(_BYTE *)(a1 + 46);
      *(_BYTE *)(a1 + 52) = v37 & 0xF3;
      *(_BYTE *)(a1 + 53) &= 0xCFu;
      *(_BYTE *)(a1 + 60) &= 0xCFu;
      *(_BYTE *)(a1 + 61) &= 0xF3u;
      *(_BYTE *)(a1 + 76) &= 0xCFu;
      *(_BYTE *)(a1 + 77) &= 0xF3u;
      *(_BYTE *)(a1 + 78) = v39 & 0xFC;
      *(_BYTE *)(a1 + 84) &= 0xF3u;
      *(_BYTE *)(a1 + 94) = v41 & 0x3F;
      *(_BYTE *)(a1 + 111) = v42 & 0x3F;
      *(_BYTE *)(a1 + 35) &= 0xF3u;
      *(_BYTE *)(a1 + 45) = v36 & 0xF3;
      *(_BYTE *)(a1 + 46) = v43 & 0x3C;
      *(_BYTE *)(a1 + 54) = v38 & 0x3F;
      *(_BYTE *)(a1 + 57) &= 0x3Fu;
      *(_BYTE *)(a1 + 66) &= 0xF3u;
      *(_BYTE *)(a1 + 67) &= 0xFCu;
      *(_BYTE *)(a1 + 68) &= 0xF3u;
      *(_BYTE *)(a1 + 72) &= 0xFCu;
      *(_BYTE *)(a1 + 79) &= 0x3Fu;
      *(_BYTE *)(a1 + 82) &= 0xCFu;
      *(_BYTE *)(a1 + 85) &= 0xCu;
      *(_BYTE *)(a1 + 86) &= 0xF3u;
      *(_BYTE *)(a1 + 89) &= 0x3Fu;
      *(_BYTE *)(a1 + 93) = v40 & 0xF0;
      *(_BYTE *)(a1 + 99) &= 0xF3u;
      *(_BYTE *)(a1 + 100) &= 0x3Fu;
      *(_BYTE *)(a1 + 103) &= 0xCFu;
      *(_BYTE *)(a1 + 112) &= 0xCFu;
      *(_BYTE *)(a1 + 113) &= 0xFCu;
      *(_BYTE *)(a1 + 116) &= 0x3Fu;
      v24 = a2[9];
      v23 = a2[10];
      goto LABEL_68;
    }
LABEL_60:
    *(_BYTE *)(a1 + 54) &= 0xFCu;
    goto LABEL_61;
  }
LABEL_68:
  if (v24 == 15 && v23 != 18)
  {
    *(_BYTE *)(a1 + 42) &= 0xC0u;
    *(_BYTE *)(a1 + 45) &= 0xCFu;
    *(_BYTE *)(a1 + 48) &= 0xCFu;
    *(_BYTE *)(a1 + 55) &= 0x3Fu;
    *(_BYTE *)(a1 + 58) &= 0xF3u;
    *(_BYTE *)(a1 + 67) &= 0xCFu;
    *(_BYTE *)(a1 + 68) &= 0x3Fu;
    *(_BYTE *)(a1 + 69) &= 0xFCu;
    *(_BYTE *)(a1 + 71) &= 0xC0u;
    *(_BYTE *)(a1 + 72) &= 0xC3u;
    *(_BYTE *)(a1 + 73) &= 0x3Fu;
    *(_BYTE *)(a1 + 78) &= 0x3Fu;
    *(_BYTE *)(a1 + 84) &= 0xFu;
    *(_BYTE *)(a1 + 87) &= 0xCFu;
    *(_BYTE *)(a1 + 89) &= 0xF3u;
    *(_BYTE *)(a1 + 90) &= 0x3Cu;
    *(_BYTE *)(a1 + 95) &= 0xCFu;
    *(_BYTE *)(a1 + 99) &= 0x3Fu;
    *(_BYTE *)(a1 + 100) &= 0xC3u;
    *(_BYTE *)(a1 + 110) &= 0xF3u;
    *(_BYTE *)(a1 + 112) &= 0x3Cu;
    *(_BYTE *)(a1 + 113) &= 0xF3u;
    v24 = a2[9];
    v23 = a2[10];
  }
  if (v24 == 15 && (v23 & 0xFFFFFFEE) == 0)
  {
    *(_BYTE *)(a1 + 5) &= 0xFu;
    *(_DWORD *)(a1 + 6) = 0;
    *(_DWORD *)(a1 + 9) = 0;
    *(_BYTE *)(a1 + 13) &= 0xF0u;
    goto LABEL_75;
  }
LABEL_74:
  *(_BYTE *)(a1 + 4) = 0;
  *(_DWORD *)a1 = 0;
LABEL_75:
  v44 = a2[9];
  if (v44 > 0x21)
    goto LABEL_86;
  if (((1 << v44) & 0x2F0000080) == 0)
  {
    if (v44 == 11)
    {
      *(_BYTE *)(a1 + 51) &= 0xCFu;
      if (!llvm::Triple::isMacOSXVersionLT((llvm::Triple *)a2, 0xAu, 11, 0))
      {
LABEL_82:
        sub_1C4F7A270(a1, 0xCCu, "__exp10", 7uLL);
        v13 = sub_1C4F7A270(a1, 0xCDu, "__exp10f", 8uLL);
        goto LABEL_88;
      }
      goto LABEL_85;
    }
LABEL_86:
    v48 = *(_BYTE *)(a1 + 51) & 0xC0;
    goto LABEL_87;
  }
  *(_BYTE *)(a1 + 51) &= 0xCFu;
  v45 = a2[9];
  if (v45 != 28 && v45 != 7)
    goto LABEL_82;
  OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)a2);
  v67 = v46;
  v64 = 7;
  v65 = 0;
  if ((sub_1C4F7A4D8(&OSVersion, &v64) & 1) == 0)
  {
    OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)a2);
    v67 = v47;
    v64 = 9;
    v65 = 0;
    if (!sub_1C4F7A4D8(&OSVersion, &v64) || (a2[6] - 41) > 1)
      goto LABEL_82;
  }
LABEL_85:
  v48 = *(_BYTE *)(a1 + 51) & 0xF0;
LABEL_87:
  *(_BYTE *)(a1 + 51) = v48;
LABEL_88:
  v49 = a2[9];
  if (v49 > 0x21 || ((1 << v49) & 0x270000AA8) == 0)
  {
    *(_BYTE *)(a1 + 56) &= 0xFCu;
    v49 = a2[9];
  }
  if (v49 > 0x21 || ((1 << v49) & 0x230000AA8) == 0)
  {
    *(_BYTE *)(a1 + 56) &= 0xF3u;
    v49 = a2[9];
  }
  if (v49 != 5)
  {
    *(_BYTE *)(a1 + 59) &= 3u;
    if (a2[9] == 9 && (*v21 - 1) < 6)
      goto LABEL_104;
  }
  *(_BYTE *)(a1 + 32) &= 0xCFu;
  *(_BYTE *)(a1 + 34) &= 0xF3u;
  v50 = *(_BYTE *)(a1 + 22);
  *(_BYTE *)(a1 + 22) = v50 & 0xC3;
  *(_BYTE *)(a1 + 5) &= 0xF0u;
  v51 = a2[10];
  v52 = (v51 & 0xFFFFFFFC) == 0xC || v51 == 11;
  v53 = *(_BYTE *)(a1 + 79);
  if (!v52)
    v53 &= 0xCCu;
  *(_BYTE *)(a1 + 62) &= 0xCFu;
  *(_BYTE *)(a1 + 66) &= 0xCFu;
  *(_BYTE *)(a1 + 67) &= 0x33u;
  *(_BYTE *)(a1 + 68) &= 0xCFu;
  *(_BYTE *)(a1 + 79) = v53 & 0xFC;
  *(_BYTE *)(a1 + 85) &= 0xF3u;
  *(_BYTE *)(a1 + 99) &= 0xCFu;
  *(_BYTE *)(a1 + 100) &= 0xFCu;
  *(_BYTE *)(a1 + 110) &= 0x3Fu;
  *(_BYTE *)(a1 + 13) &= 0xFu;
  *(_WORD *)(a1 + 14) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 17) &= 0x3Cu;
  *(_BYTE *)(a1 + 18) &= 0xF0u;
  *(_WORD *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 22) = v50 & 0xC0;
  *(_BYTE *)(a1 + 23) &= 3u;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 25) &= 0xF0u;
  *(_BYTE *)(a1 + 27) &= 0xC0u;
  *(_BYTE *)(a1 + 28) &= 3u;
  *(_BYTE *)(a1 + 30) &= 0x3Fu;
  *(_BYTE *)(a1 + 31) &= 0xF0u;
  v54 = a2[10];
  if (a2[9] == 9 && (v54 - 1) < 6)
    goto LABEL_104;
  if (v54 == 11 && (sub_1C4F7A460(a2, 0x1Cu) & 1) == 0)
  {
LABEL_104:
    *(_BYTE *)(a1 + 70) |= 0x33u;
    *(_BYTE *)(a1 + 88) |= 0xCCu;
    *(_BYTE *)(a1 + 63) |= 0x30u;
    *(_BYTE *)(a1 + 56) |= 0xC0u;
    v55 = *(_BYTE *)(a1 + 64);
    *(_BYTE *)(a1 + 69) |= 0x30u;
    *(_BYTE *)(a1 + 64) = v55 | 0x33;
    *(_BYTE *)(a1 + 57) |= 0x30u;
  }
  if (*v21 == 11 && sub_1C4F7A460(a2, 0x15u))
    *(_BYTE *)(a1 + 100) &= 0xC3u;
  v56 = a2[6];
  if (v56 == 42 && a2[8] == 3 && a2[9] == 25)
  {
    v57 = *(_BYTE *)(a1 + 79);
    *(_BYTE *)(a1 + 6) &= 0xFu;
    LODWORD(v13) = *(_DWORD *)(a1 + 8);
    v58 = (int16x8_t)vmovl_u8(*(uint8x8_t *)&v13);
    *(int8x8_t *)v58.i8 = vand_s8(*(int8x8_t *)v58.i8, (int8x8_t)0xF00F0000F000FLL);
    *(_DWORD *)(a1 + 8) = vmovn_s16(v58).u32[0];
    *(_BYTE *)(a1 + 12) &= 0xF0u;
    *(_BYTE *)(a1 + 25) &= 0xFu;
    *(_BYTE *)(a1 + 26) &= 0xC0u;
    *(_BYTE *)(a1 + 30) &= 0xC3u;
    *(_BYTE *)(a1 + 31) &= 0xFu;
    *(_BYTE *)(a1 + 32) &= 0x30u;
    *(_BYTE *)(a1 + 33) = 0;
    v59 = *(_BYTE *)(a1 + 34);
    *(_BYTE *)(a1 + 35) &= 0xF3u;
    *(_BYTE *)(a1 + 45) &= 0xC3u;
    *(_BYTE *)(a1 + 46) &= 0xFCu;
    *(_BYTE *)(a1 + 48) &= 0xFu;
    *(_BYTE *)(a1 + 49) = 0;
    *(_BYTE *)(a1 + 50) &= 0xC0u;
    *(_BYTE *)(a1 + 62) &= 0x3Fu;
    *(_BYTE *)(a1 + 78) &= 0x3Fu;
    *(_BYTE *)(a1 + 82) &= 0xCFu;
    *(_BYTE *)(a1 + 89) &= 0x33u;
    v60 = *(_BYTE *)(a1 + 90);
    *(_BYTE *)(a1 + 99) &= 0x33u;
    *(_BYTE *)(a1 + 108) &= 0xCFu;
    *(_BYTE *)(a1 + 116) &= 0x3Fu;
    *(_BYTE *)(a1 + 17) &= 0xC3u;
    *(_BYTE *)(a1 + 22) &= 0x3Fu;
    *(_BYTE *)(a1 + 23) &= 0xFCu;
    *(_BYTE *)(a1 + 34) = v59 & 0xC;
    *(_BYTE *)(a1 + 42) = 0;
    *(_BYTE *)(a1 + 43) &= 0xF0u;
    *(_BYTE *)(a1 + 55) &= 0x3Fu;
    *(_BYTE *)(a1 + 58) &= 0xF3u;
    *(int8x8_t *)v58.i8 = vand_s8(*(int8x8_t *)(a1 + 66), (int8x8_t)0x3CC0C03FFC33CCF3);
    *(_QWORD *)(a1 + 66) = v58.i64[0];
    *(_BYTE *)(a1 + 79) = v57 & 0xF | 0x30;
    *(_BYTE *)(a1 + 81) &= 0xF0u;
    v58.i32[0] = *(_DWORD *)(a1 + 84);
    v61 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v58.i8);
    *(int8x8_t *)v61.i8 = vand_s8(*(int8x8_t *)v61.i8, (int8x8_t)0xCF00F3000C000FLL);
    *(int8x8_t *)v61.i8 = vmovn_s16(v61);
    *(_DWORD *)(a1 + 84) = v61.i32[0];
    *(_BYTE *)(a1 + 90) = v60 & 0xC;
    v61.i32[0] = *(_DWORD *)(a1 + 92);
    v62 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v61.i8);
    *(int8x8_t *)v62.i8 = vand_s8(*(int8x8_t *)v62.i8, (int8x8_t)0xCF00F0003300FCLL);
    *(int8x8_t *)v62.i8 = vmovn_s16(v62);
    *(_DWORD *)(a1 + 92) = v62.i32[0];
    *(_BYTE *)(a1 + 100) &= 0xC3u;
    *(_BYTE *)(a1 + 102) &= 0x3Fu;
    *(_BYTE *)(a1 + 103) &= 0xFCu;
    *(_BYTE *)(a1 + 104) &= 0xFu;
    v62.i32[0] = *(_DWORD *)(a1 + 110);
    v63 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v62.i8);
    *(int8x8_t *)v63.i8 = vand_s8(*(int8x8_t *)v63.i8, (int8x8_t)0xC0000C00FC00C3);
    *(_DWORD *)(a1 + 110) = vmovn_s16(v63).u32[0];
    v56 = a2[6];
  }
  if ((v56 & 0xFFFFFFFE) == 0x2C)
  {
    *(_QWORD *)(a1 + 109) = 0;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_BYTE *)(a1 + 26) = -64;
    *(_BYTE *)(a1 + 79) = 12;
    *(_BYTE *)(a1 + 64) = -64;
    *(_WORD *)(a1 + 22) = 960;
  }
  else
  {
    *(_BYTE *)(a1 + 26) &= 0x3Fu;
  }
  if (a2[9] != 21)
  {
    *(_BYTE *)(a1 + 113) &= 0x3Fu;
    *(_BYTE *)(a1 + 114) &= 0xC0u;
  }
  llvm::TargetLibraryInfoImpl::addVectorizableFunctionsFromVecLib();
}

llvm::TargetLibraryInfoImpl *llvm::TargetLibraryInfoImpl::TargetLibraryInfoImpl(llvm::TargetLibraryInfoImpl *this, const llvm::Triple *a2)
{
  __int128 v3;

  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  *(_OWORD *)this = v3;
  *((_OWORD *)this + 1) = v3;
  *((_OWORD *)this + 2) = v3;
  *((_OWORD *)this + 3) = v3;
  *((_OWORD *)this + 4) = v3;
  *((_OWORD *)this + 5) = v3;
  *((_OWORD *)this + 6) = v3;
  *(_QWORD *)((char *)this + 109) = -1;
  sub_1C4F777B0((uint64_t)this, (int *)a2);
  return this;
}

{
  __int128 v3;

  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_DWORD *)this + 34) = 0;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_QWORD *)&v3 = -1;
  *((_QWORD *)&v3 + 1) = -1;
  *(_OWORD *)this = v3;
  *((_OWORD *)this + 1) = v3;
  *((_OWORD *)this + 2) = v3;
  *((_OWORD *)this + 3) = v3;
  *((_OWORD *)this + 4) = v3;
  *((_OWORD *)this + 5) = v3;
  *((_OWORD *)this + 6) = v3;
  *(_QWORD *)((char *)this + 109) = -1;
  sub_1C4F777B0((uint64_t)this, (int *)a2);
  return this;
}

uint64_t llvm::TargetLibraryInfoImpl::operator=(uint64_t a1, uint64_t *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  if (a2 != (uint64_t *)a1)
    sub_1C4F7AD9C((uint64_t *)(a1 + 120), a2 + 15);
  *(_WORD *)(a1 + 144) = *((_WORD *)a2 + 72);
  *(_BYTE *)(a1 + 146) = *((_BYTE *)a2 + 146);
  *(_DWORD *)(a1 + 148) = *((_DWORD *)a2 + 37);
  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  v6 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  v7 = *((_OWORD *)a2 + 4);
  v8 = *((_OWORD *)a2 + 5);
  v9 = *((_OWORD *)a2 + 6);
  *(_QWORD *)(a1 + 109) = *(uint64_t *)((char *)a2 + 109);
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 64) = v7;
  return a1;
}

void *llvm::TargetLibraryInfoImpl::operator=(uint64_t a1, uint64_t a2)
{
  sub_1C4F789E8((uint64_t *)(a1 + 120), (uint64_t *)(a2 + 120));
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(_WORD *)(a1 + 145) = *(_WORD *)(a2 + 145);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  return memmove((void *)a1, (const void *)a2, 0x75uLL);
}

uint64_t *sub_1C4F789E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;

  v4 = *((unsigned int *)a1 + 4);
  v5 = *a1;
  if ((_DWORD)v4)
  {
    v6 = 32 * v4;
    do
    {
      if (*(_DWORD *)v5 <= 0xFFFFFFFD && *(char *)(v5 + 31) < 0)
        operator delete(*(void **)(v5 + 8));
      v5 += 32;
      v6 -= 32;
    }
    while (v6);
    v5 = *a1;
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *a2;
  *a2 = 0;
  *((_DWORD *)a1 + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)a2 + 2) = 0;
  v7 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *((_DWORD *)a2 + 3);
  *((_DWORD *)a2 + 3) = v7;
  v8 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v8;
  return a1;
}

uint64_t llvm::TargetLibraryInfoImpl::getLibFunc(int a1, _BYTE *a2, size_t __n, _DWORD *a4)
{
  _BYTE *v5;
  size_t v6;
  const void *v7;
  size_t v8;
  unint64_t v9;
  char **v10;
  char **v11;
  size_t v12;
  size_t v13;
  int v14;
  int v15;

  v5 = sub_1C4F78BA8(a2, __n);
  if (!v6)
    return 0;
  v7 = v5;
  v8 = v6;
  v9 = 468;
  v10 = &llvm::TargetLibraryInfoImpl::StandardNames;
  do
  {
    v11 = &v10[2 * (v9 >> 1)];
    v12 = (size_t)v11[1];
    if (v8 >= v12)
      v13 = (size_t)v11[1];
    else
      v13 = v8;
    if (v13 && (v14 = memcmp(*v11, v7, v13)) != 0)
    {
      v15 = (v14 >> 31) | 1;
    }
    else
    {
      if (v12 < v8)
        v15 = -1;
      else
        v15 = 1;
      if (v12 == v8)
        v15 = 0;
    }
    if (v15 == -1)
      v9 += ~(v9 >> 1);
    else
      v9 >>= 1;
    if (v15 == -1)
      v10 = v11 + 2;
  }
  while (v9);
    return 0;
  *a4 = (unint64_t)((char *)v10 - (char *)&llvm::TargetLibraryInfoImpl::StandardNames) >> 4;
  return 1;
}

_BYTE *sub_1C4F78BA8(_BYTE *a1, size_t __n)
{
  _BYTE *v3;

  if (!__n)
    return 0;
  v3 = memchr(a1, 0, __n);
  if (v3 && v3 - a1 != -1)
    return 0;
  if (*a1 == 1)
    return a1 + 1;
  return a1;
}

uint64_t llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(uint64_t a1, uint64_t a2, int a3)
{
  return ((uint64_t (*)(void))((char *)sub_1C4F78C40 + 4 * (unsigned __int16)asc_1C85F63E8[a3]))();
}

BOOL sub_1C4F78C40(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;

  if (v2 == 1 && (v3 = *(_QWORD **)(a2 + 16), *(unsigned __int8 *)(*v3 + 8) <= 6u))
    return *v3 == v3[1];
  else
    return 0;
}

uint64_t llvm::TargetLibraryInfoImpl::getLibFunc(uint64_t a1, uint64_t ***a2, int *a3)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ****v11;
  uint64_t ***v12;
  int v13;
  int v14;
  uint64_t ***v15;
  char *v16;
  size_t v17;
  size_t v18;

  if ((*((_BYTE *)a2 + 33) & 0x20) != 0)
    return 0;
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v7 = ***a2;
    v8 = *(_QWORD *)(v7 + 152);
    v9 = *(unsigned int *)(v7 + 168);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v11 = (uint64_t ****)(v8 + 16 * v10);
      v12 = *v11;
      if (*v11 == a2)
      {
LABEL_10:
        v15 = v11[1];
        v18 = (size_t)*v15;
        v16 = (char *)(v15 + 2);
        v17 = v18;
        goto LABEL_11;
      }
      v13 = 1;
      while (v12 != (uint64_t ***)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(uint64_t ****)(v8 + 16 * v10);
        if (v12 == a2)
        {
          v11 = (uint64_t ****)(v8 + 16 * v10);
          goto LABEL_10;
        }
      }
    }
    v11 = (uint64_t ****)(v8 + 16 * v9);
    goto LABEL_10;
  }
  v17 = 0;
  v16 = &byte_1C871356D;
LABEL_11:
  if (!llvm::TargetLibraryInfoImpl::getLibFunc(a1, v16, v17, a3))
    return 0;
  return llvm::TargetLibraryInfoImpl::isValidProtoForLibFunc(a1, (uint64_t)a2[3], *a3);
}

void llvm::TargetLibraryInfoImpl::addVectorizableFunctions(_QWORD *a1, char *__src, uint64_t a3)
{
  char *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  BOOL (*v15)(uint64_t, uint64_t);

  v6 = &__src[40 * a3];
  sub_1C4F7B01C((uint64_t)(a1 + 19), a1[20], __src, v6, a3);
  v7 = a1[19];
  v8 = a1[20];
  v9 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - v7) >> 3));
  v15 = sub_1C4F79B40;
  if (v8 == v7)
    v10 = 0;
  else
    v10 = v9;
  sub_1C4F7B2B4(v7, v8, (uint64_t (**)(__int128 *, __int128 *))&v15, v10, 1);
  sub_1C4F7B01C((uint64_t)(a1 + 22), a1[23], __src, v6, a3);
  v11 = a1[22];
  v12 = a1[23];
  v13 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - v11) >> 3));
  v15 = sub_1C4F79BA0;
  if (v12 == v11)
    v14 = 0;
  else
    v14 = v13;
  sub_1C4F7B2B4(v11, v12, (uint64_t (**)(__int128 *, __int128 *))&v15, v14, 1);
}

BOOL sub_1C4F79B40(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  size_t v4;
  int v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= v2)
    v4 = *(_QWORD *)(a1 + 8);
  else
    v4 = *(_QWORD *)(a2 + 8);
  if (v4 && (v5 = memcmp(*(const void **)a1, *(const void **)a2, v4)) != 0)
  {
    v6 = (v5 >> 31) | 1;
  }
  else
  {
    if (v2 < v3)
      v6 = -1;
    else
      v6 = 1;
    if (v2 == v3)
      v6 = 0;
  }
  return v6 == -1;
}

BOOL sub_1C4F79BA0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  size_t v4;
  int v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a2 + 24);
  if (v3 >= v2)
    v4 = *(_QWORD *)(a1 + 24);
  else
    v4 = *(_QWORD *)(a2 + 24);
  if (v4 && (v5 = memcmp(*(const void **)(a1 + 16), *(const void **)(a2 + 16), v4)) != 0)
  {
    v6 = (v5 >> 31) | 1;
  }
  else
  {
    if (v2 < v3)
      v6 = -1;
    else
      v6 = 1;
    if (v2 == v3)
      v6 = 0;
  }
  return v6 == -1;
}

BOOL llvm::TargetLibraryInfoImpl::isFunctionVectorizable(uint64_t a1, _BYTE *a2, size_t a3)
{
  _BYTE *v4;
  size_t v5;
  const void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL4 v12;

  v4 = sub_1C4F78BA8(a2, a3);
  if (!v5)
    return 0;
  v6 = v4;
  v7 = v5;
  v8 = *(_QWORD *)(a1 + 152);
  v9 = *(_QWORD *)(a1 + 160);
  if (v9 != v8)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v9 - v8) >> 3);
    do
    {
      v11 = v8 + 40 * (v10 >> 1);
      v12 = sub_1C4F79CE0(v11, v6, v7);
      if (v12)
        v10 += ~(v10 >> 1);
      else
        v10 >>= 1;
      if (v12)
        v8 = v11 + 40;
    }
    while (v10);
  }
  return v8 != v9 && *(_QWORD *)(v8 + 8) == v7 && memcmp(*(const void **)v8, v6, v7) == 0;
}

BOOL sub_1C4F79CE0(uint64_t a1, const void *a2, size_t a3)
{
  size_t v3;
  size_t v4;
  int v5;
  int v6;

  v3 = a3;
  v4 = *(_QWORD *)(a1 + 8);
  if (a3 >= v4)
    a3 = *(_QWORD *)(a1 + 8);
  if (a3 && (v5 = memcmp(*(const void **)a1, a2, a3)) != 0)
  {
    v6 = (v5 >> 31) | 1;
  }
  else
  {
    if (v4 < v3)
      v6 = -1;
    else
      v6 = 1;
    if (v4 == v3)
      v6 = 0;
  }
  return v6 == -1;
}

_BYTE *llvm::TargetLibraryInfoImpl::getVectorizedFunction(uint64_t a1, _BYTE *a2, size_t __n, int *a4)
{
  size_t v6;
  _BYTE *v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  int v14;
  int v15;

  v7 = sub_1C4F78BA8(a2, __n);
  if (v6)
  {
    v8 = v6;
    v9 = *(_QWORD *)(a1 + 152);
    v10 = *(_QWORD *)(a1 + 160);
    if (v10 != v9)
    {
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v9) >> 3);
      do
      {
        v12 = v9 + 40 * (v11 >> 1);
        v13 = sub_1C4F79CE0(v12, v7, v8);
        if (v13)
          v11 += ~(v11 >> 1);
        else
          v11 >>= 1;
        if (v13)
          v9 = v12 + 40;
      }
      while (v11);
    }
    if (v9 != v10)
    {
      v15 = *a4;
      v14 = a4[1];
      while (*(_QWORD *)(v9 + 8) == v8 && !memcmp(*(const void **)v9, v7, v8))
      {
        if (*(_DWORD *)(v9 + 32) == v15 && *(_DWORD *)(v9 + 36) == v14)
          return *(_BYTE **)(v9 + 16);
        v9 += 40;
        if (v9 == v10)
          return 0;
      }
    }
    return 0;
  }
  return v7;
}

uint64_t llvm::TargetLibraryAnalysis::run@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9[4];
  __int16 v10;
  void *__p[2];
  char v12;
  _OWORD v13[6];
  _BYTE v14[21];
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 200))
  {
    v7 = *(_QWORD *)(a2 + 40) + 216;
    v10 = 260;
    v9[0] = v7;
    llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v9);
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)&v8 = -1;
    *((_QWORD *)&v8 + 1) = -1;
    v13[0] = v8;
    v13[1] = v8;
    v13[2] = v8;
    v13[3] = v8;
    v13[4] = v8;
    v13[5] = v8;
    *(_OWORD *)v14 = v8;
    *(_QWORD *)&v14[13] = -1;
    sub_1C4F777B0((uint64_t)v13, (int *)__p);
    sub_1C61BB7C4(a1, (uint64_t)v13);
    sub_1C61BB478((uint64_t *)v13);
    if (v12 < 0)
      operator delete(__p[0]);
  }
  return sub_1C4F7A934(a3, a1, a2, 1);
}

uint64_t llvm::TargetLibraryInfoImpl::getWCharSize(llvm::TargetLibraryInfoImpl *this, const llvm::Module *a2)
{
  uint64_t result;
  uint64_t v3;
  unsigned int *v4;

  result = llvm::Module::getModuleFlag((uint64_t)a2, "wchar_size", 0xAuLL);
  if (result)
  {
    v3 = *(_QWORD *)(result + 128);
    v4 = (unsigned int *)(v3 + 24);
    if (*(_DWORD *)(v3 + 32) >= 0x41u)
      v4 = *(unsigned int **)v4;
    return *v4;
  }
  return result;
}

void llvm::initializeTargetLibraryInfoWrapperPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82EB30);
  if (v1 != -1)
  {
    v4[0] = sub_1C4F7A00C;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82EB30, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4F7A00C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Target Library Information";
  *(_QWORD *)(v2 + 8) = 26;
  *(_QWORD *)(v2 + 16) = "targetlibinfo";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &llvm::TargetLibraryInfoWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::TargetLibraryInfoWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::TargetLibraryInfoImpl::getWidestVF(uint64_t a1, _BYTE *a2, size_t __n, _QWORD *a4, _QWORD *a5)
{
  uint64_t result;
  size_t v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  _QWORD *v18;
  BOOL v19;

  result = (uint64_t)sub_1C4F78BA8(a2, __n);
  *a5 = 0x100000000;
  *a4 = 1;
  if (v9)
  {
    v10 = (const void *)result;
    v11 = v9;
    v12 = *(_QWORD *)(a1 + 152);
    v13 = *(_QWORD *)(a1 + 160);
    if (v13 != v12)
    {
      v14 = 0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 3);
      do
      {
        v15 = v12 + 40 * (v14 >> 1);
        result = sub_1C4F79CE0(v15, v10, v11);
        if ((_DWORD)result)
          v14 += ~(v14 >> 1);
        else
          v14 >>= 1;
        if ((_DWORD)result)
          v12 = v15 + 40;
      }
      while (v14);
    }
    for (; v12 != v13; v12 += 40)
    {
      if (*(_QWORD *)(v12 + 8) != v11)
        break;
      result = memcmp(*(const void **)v12, v10, v11);
      if ((_DWORD)result)
        break;
      v16 = *(_DWORD *)(v12 + 36);
      v17 = v16 == 1;
      v18 = v16 == 1 ? a5 : a4;
      v19 = !v17 && *((_DWORD *)v18 + 1) == 1;
      if (!v19 && *(_DWORD *)(v12 + 32) > *(_DWORD *)v18)
      {
        *v18 = *(_QWORD *)(v12 + 32);
        v13 = *(_QWORD *)(a1 + 160);
      }
    }
  }
  return result;
}

_QWORD *sub_1C4F7A1DC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = off_1E813D578;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &off_1E813D5E0;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C4F7A25C(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

double sub_1C4F7A270(uint64_t a1, unsigned int a2, void *__src, size_t __len)
{
  char **v8;
  double result;
  __int128 *p_dst;
  size_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  _DWORD *v21;
  int v22;
  BOOL v23;
  int v24;
  _DWORD *v25;
  _DWORD *v26;
  unsigned int v27;
  __int128 __dst;
  unint64_t v29;

  v8 = &(&llvm::TargetLibraryInfoImpl::StandardNames)[2 * a2];
  if (v8[1] == (char *)__len && (!__len || !memcmp(*v8, __src, __len)))
  {
    *(_BYTE *)(a1 + ((unint64_t)a2 >> 2)) |= 3 << (2 * (a2 & 3));
    return result;
  }
  *(_BYTE *)(a1 + ((unint64_t)a2 >> 2)) = *(_BYTE *)(a1 + ((unint64_t)a2 >> 2)) & ~(3 << (2 * (a2 & 3))) | (1 << (2 * (a2 & 3)));
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v11 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v11 = __len | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v29 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v29) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_11:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v15 = *(_QWORD *)(a1 + 120);
  v14 = a1 + 120;
  v13 = v15;
  v27 = a2;
  v16 = *(_DWORD *)(v14 + 16);
  if (!v16)
  {
    v25 = 0;
LABEL_25:
    v19 = sub_1C4F7A554(v14, (uint64_t)&v27, &v27, v25);
    *v19 = v27;
    *((_QWORD *)v19 + 2) = 0;
    *((_QWORD *)v19 + 3) = 0;
    *((_QWORD *)v19 + 1) = 0;
    goto LABEL_26;
  }
  v17 = v16 - 1;
  v18 = v17 & (37 * a2);
  v19 = (_DWORD *)(v13 + 32 * v18);
  v20 = *v19;
  if (*v19 != a2)
  {
    v21 = 0;
    v22 = 1;
    while (v20 != -1)
    {
      if (v21)
        v23 = 0;
      else
        v23 = v20 == -2;
      if (v23)
        v21 = v19;
      v24 = v18 + v22++;
      v18 = v24 & v17;
      v19 = (_DWORD *)(v13 + 32 * v18);
      v20 = *v19;
      if (*v19 == a2)
        goto LABEL_26;
    }
    if (v21)
      v25 = v21;
    else
      v25 = v19;
    goto LABEL_25;
  }
LABEL_26:
  v26 = v19 + 2;
  if (*((char *)v19 + 31) < 0)
    operator delete(*(void **)v26);
  result = *(double *)&__dst;
  *(_OWORD *)v26 = __dst;
  *((_QWORD *)v26 + 2) = v29;
  return result;
}

uint64_t sub_1C4F7A460(int *a1, unsigned int a2)
{
  uint64_t v4;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];

  v12[0] = llvm::Triple::getEnvironmentVersion((llvm::Triple *)a1);
  v12[1] = v4;
  if (sub_1C5E4EA90(a1[6]) != 64 || LODWORD(v12[0]) > 0x14)
  {
    v10 = a2;
    v11 = 0;
    v6 = v12;
    v7 = &v10;
  }
  else
  {
    v10 = 21;
    v11 = 0;
    v9[0] = a2;
    v9[1] = 0;
    v6 = &v10;
    v7 = v9;
  }
  return sub_1C4F7A4D8(v6, v7);
}

uint64_t sub_1C4F7A4D8(_DWORD *a1, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  _BOOL4 v8;

  if (*a1 < *a2)
    return 1;
  if (*a2 < *a1)
    return 0;
  v2 = a1[1] & 0x7FFFFFFF;
  v3 = a2[1] & 0x7FFFFFFF;
  if (v2 < v3)
    return 1;
  if (v3 < v2)
    return 0;
  v5 = a1[2] & 0x7FFFFFFF;
  v6 = a2[2] & 0x7FFFFFFF;
  v8 = v6 >= v5 && (a1[3] & 0x7FFFFFFFu) < (a2[3] & 0x7FFFFFFFu);
  return v5 < v6 || v8;
}

_DWORD *sub_1C4F7A554(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_1C4F7A6D8(a1, v7);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (37 * *a3) & v18;
      a4 = (_DWORD *)(*(_QWORD *)a1 + 32 * v19);
      v20 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v21 = 1;
      while (v20 != -1)
      {
        if (v13)
          v22 = 0;
        else
          v22 = v20 == -2;
        if (v22)
          v13 = a4;
        v23 = v19 + v21++;
        v19 = v23 & v18;
        a4 = (_DWORD *)(*(_QWORD *)a1 + 32 * v19);
        v20 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_29;
    }
LABEL_28:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1C4F7A6D8(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_28;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_DWORD *)(*(_QWORD *)a1 + 32 * v11);
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != -1)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -2;
    if (v15)
      v13 = a4;
    v16 = v11 + v14++;
    v11 = v16 & v10;
    a4 = (_DWORD *)(*(_QWORD *)a1 + 32 * v11);
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_29:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *sub_1C4F7A6D8(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4F7A790(a1, v4, &v4[8 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -1;
      result += 8;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

void sub_1C4F7A790(uint64_t a1, int *a2, int *a3)
{
  int *v4;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  int v18;
  __int128 v19;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a1;
    v8 = 32 * v6;
    do
    {
      *v7 = -1;
      v7 += 8;
      v8 -= 32;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      v9 = *v4;
      if (*v4 <= 0xFFFFFFFD)
      {
        v10 = *(_DWORD *)(a1 + 16);
        if (v10)
        {
          v11 = v10 - 1;
          v12 = (v10 - 1) & (37 * v9);
          v13 = *(_QWORD *)a1 + 32 * v12;
          v14 = *(_DWORD *)v13;
          if (v9 != *(_DWORD *)v13)
          {
            v15 = 0;
            v16 = 1;
            while (v14 != -1)
            {
              if (v15)
                v17 = 0;
              else
                v17 = v14 == -2;
              if (v17)
                v15 = v13;
              v18 = v12 + v16++;
              v12 = v18 & v11;
              v13 = *(_QWORD *)a1 + 32 * v12;
              v14 = *(_DWORD *)v13;
              if (v9 == *(_DWORD *)v13)
                goto LABEL_18;
            }
            if (v15)
              v13 = v15;
          }
        }
        else
        {
          v13 = 0;
        }
LABEL_18:
        *(_DWORD *)v13 = v9;
        v19 = *(_OWORD *)(v4 + 2);
        *(_QWORD *)(v13 + 24) = *((_QWORD *)v4 + 3);
        *(_OWORD *)(v13 + 8) = v19;
        *((_QWORD *)v4 + 2) = 0;
        *((_QWORD *)v4 + 3) = 0;
        *((_QWORD *)v4 + 1) = 0;
        ++*(_DWORD *)(a1 + 8);
        if (*((char *)v4 + 31) < 0)
          operator delete(*((void **)v4 + 1));
      }
      v4 += 8;
    }
    while (v4 != a3);
  }
}

uint64_t *sub_1C4F7A8C4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 32 * v2;
    do
    {
      if (*(_DWORD *)v3 <= 0xFFFFFFFD && *(char *)(v3 + 31) < 0)
        operator delete(*(void **)(v3 + 8));
      v3 += 32;
      v4 -= 32;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t sub_1C4F7A934(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  int LibFunc;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned int v15;
  int i;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v31;
  unsigned int v32;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v7 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0x600000000;
  LibFunc = sub_1C4765AA4((char *)(a1 + 8), 8uLL, 0);
  *(_DWORD *)(a1 + 72) = 468;
  if (a4)
  {
    v9 = *(_QWORD *)(a3 + 112);
    if (v9)
    {
      if (*(_DWORD *)(v9 + 8) && (v10 = *(_QWORD *)(v9 + 40)) != 0 && (v11 = *(_DWORD *)(v10 + 40)) != 0)
      {
        v12 = *(_QWORD *)(v10 + 24);
        v13 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v13 & 1) == 0)
        {
          LibFunc = __cxa_guard_acquire(&qword_1ED7EAC88);
          if (LibFunc)
          {
            v31 = llvm::hashing::detail::fixed_seed_override;
            if (!llvm::hashing::detail::fixed_seed_override)
              v31 = 0xFF51AFD7ED558CCDLL;
            qword_1ED7EAC80 = v31;
            __cxa_guard_release(&qword_1ED7EAC88);
          }
        }
        v14 = 0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xD9C204B84CA0E240)) ^ ((0x9DDFEA08EB382D69
                                                                                   * (qword_1ED7EAC80 ^ 0xD9C204B84CA0E240)) >> 47) ^ 0xADAE6DCD2E8D8D2ELL);
        v15 = (-348639895 * ((v14 >> 47) ^ v14)) ^ 0x6C697562;
        for (i = 1; ; ++i)
        {
          v17 = v15 & (v11 - 1);
          v18 = v12 + 24 * v17;
          v19 = *(_QWORD **)v18;
          if (*(_QWORD *)v18 == -1)
          {
            if ("no-builtins" == (char *)-1)
              goto LABEL_21;
          }
          else if (v19 == (_QWORD *)-2)
          {
            if ("no-builtins" == (char *)-2)
              goto LABEL_21;
          }
          else if (*(_QWORD *)(v18 + 8) == 11
                 && *v19 == 0x746C6975622D6F6ELL
                 && *(_QWORD *)((char *)v19 + 3) == 0x736E69746C697562)
          {
LABEL_21:
            v21 = *(_QWORD *)(a1 + 8);
            v22 = *(unsigned int *)(a1 + 16);
            if ((_DWORD)v22)
              memset(*(void **)(a1 + 8), 255, 8 * v22);
            if ((*(_DWORD *)(a1 + 72) & 0x3F) != 0)
              *(_QWORD *)(v21 + 8 * v22 - 8) &= ~(-1 << (*(_DWORD *)(a1 + 72) & 0x3F));
            return a1;
          }
          if (v19 == (_QWORD *)-1)
            break;
          v15 = i + v17;
        }
        v9 = *(_QWORD *)(a3 + 112);
        v32 = 0;
        if (!v9)
          return a1;
      }
      else
      {
        v32 = 0;
      }
      if (*(_DWORD *)(v9 + 8))
      {
        v23 = *(_QWORD *)(v9 + 40);
        if (v23)
        {
          v24 = *(unsigned int *)(v23 + 8);
          if ((_DWORD)v24)
          {
            v25 = (uint64_t *)(v23 + 48);
            v26 = 8 * v24;
            do
            {
              v27 = *v25;
              if (*v25)
              {
                if (*(_BYTE *)(v27 + 8) == 2)
                {
                  v28 = *(unsigned int *)(v27 + 12);
                  if (v28 >= 0xB
                    && *(_QWORD *)(v27 + 24) == 0x746C6975622D6F6ELL
                    && *(_QWORD *)(v27 + 27) == 0x2D6E69746C697562)
                  {
                    LibFunc = llvm::TargetLibraryInfoImpl::getLibFunc(LibFunc, (_BYTE *)(v27 + 35), v28 - 11, &v32);
                    if (LibFunc)
                      *(_QWORD *)(*v7 + (((unint64_t)v32 >> 3) & 0x1FFFFFF8)) |= 1 << v32;
                  }
                }
              }
              ++v25;
              v26 -= 8;
            }
            while (v26);
          }
        }
      }
    }
  }
  return a1;
}

void sub_1C4F7AC48(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  size_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  unint64_t v12;
  char *v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t (**v16)();
  int v17;
  char v18;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      v4 = *(unsigned __int8 **)v2;
      v5 = *(_QWORD *)(v2 + 8);
      v6 = *(_DWORD *)(v2 + 16);
      v14[0] = *(_QWORD *)v2;
      v14[1] = v5;
      v15 = *(_OWORD *)(v2 + 24);
      v16 = &off_1E813D630;
      v18 = 1;
      v17 = v6;
      v7 = qword_1ED7F4560;
      if (qword_1ED7F4568 >= HIDWORD(qword_1ED7F4568))
      {
        v12 = qword_1ED7F4568 + 1;
        if (qword_1ED7F4560 <= (unint64_t)v14
          && qword_1ED7F4560 + 48 * (unint64_t)qword_1ED7F4568 > (unint64_t)v14)
        {
          v13 = (char *)v14 - qword_1ED7F4560;
          sub_1C61BB6F8(v12);
          v7 = qword_1ED7F4560;
          v8 = &v13[qword_1ED7F4560];
          goto LABEL_5;
        }
        sub_1C61BB6F8(v12);
        v7 = qword_1ED7F4560;
      }
      v8 = (char *)v14;
LABEL_5:
      v9 = v7 + 48 * qword_1ED7F4568;
      v10 = *((_OWORD *)v8 + 1);
      *(_OWORD *)v9 = *(_OWORD *)v8;
      *(_OWORD *)(v9 + 16) = v10;
      *(_QWORD *)(v9 + 32) = &off_1E813D650;
      v11 = *((_DWORD *)v8 + 10);
      *(_BYTE *)(v9 + 44) = v8[44];
      *(_DWORD *)(v9 + 40) = v11;
      *(_QWORD *)(v9 + 32) = &off_1E813D630;
      LODWORD(qword_1ED7F4568) = qword_1ED7F4568 + 1;
      llvm::cl::AddLiteralOption(qword_1ED7F4558, v4, v5);
      v2 += 40;
    }
    while (v2 != v3);
  }
}

_QWORD *sub_1C4F7AD9C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v4 = *((unsigned int *)a1 + 4);
  v5 = *a1;
  if ((_DWORD)v4)
  {
    v6 = 32 * v4;
    do
    {
      if (*(_DWORD *)v5 <= 0xFFFFFFFD && *(char *)(v5 + 31) < 0)
        operator delete(*(void **)(v5 + 8));
      v5 += 32;
      v6 -= 32;
    }
    while (v6);
    v5 = *a1;
  }
  result = (_QWORD *)MEMORY[0x1CAA32FB4](v5, 8);
  v8 = *((unsigned int *)a2 + 4);
  *((_DWORD *)a1 + 4) = v8;
  if ((_DWORD)v8)
  {
    result = operator new(32 * v8, (std::align_val_t)8uLL);
    *a1 = (uint64_t)result;
    a1[1] = a2[1];
    if (*((_DWORD *)a1 + 4))
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = *a1;
        v12 = *a2;
        v13 = *(_DWORD *)(*a2 + v9);
        *(_DWORD *)(*a1 + v9) = v13;
        if (v13 <= 0xFFFFFFFD)
        {
          result = (_QWORD *)(v11 + v9 + 8);
          v14 = v12 + v9;
          v15 = v12 + v9 + 8;
          if (*(char *)(v14 + 31) < 0)
          {
            result = sub_1C47EBC30(result, *(void **)v15, *(_QWORD *)(v14 + 16));
          }
          else
          {
            v16 = *(_OWORD *)v15;
            result[2] = *(_QWORD *)(v15 + 16);
            *(_OWORD *)result = v16;
          }
        }
        ++v10;
        v9 += 32;
      }
      while (v10 < *((unsigned int *)a1 + 4));
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

_QWORD *sub_1C4F7AEAC(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  char *v17;
  void *v18;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - *result) >> 3) < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x666666666666666)
      goto LABEL_23;
    v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    v12 = v10 >= 0x333333333333333 ? 0x666666666666666 : v11;
    if (v12 > 0x666666666666666)
LABEL_23:
      abort();
    v13 = 5 * v12;
    result = operator new(40 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  if (0xCCCCCCCCCCCCCCCDLL * ((v16 - v9) >> 3) >= a4)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v18 = (void *)*result;
LABEL_21:
    result = memmove(v18, __src, v14);
    goto LABEL_22;
  }
  v17 = &__src[8 * ((v16 - v9) >> 3)];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v17;
  if (v14)
  {
    v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *v15 = &v9[v14];
  return result;
}

void sub_1C4F7B01C(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  __int128 v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;

  if (a5 < 1)
    return;
  v6 = __src;
  v8 = *(char **)a1;
  v9 = *(_BYTE **)(a1 + 8);
  v10 = (a2 - *(_QWORD *)a1) / 40;
  v11 = (char *)(*(_QWORD *)a1 + 40 * v10);
  v12 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v9) >> 3)) < a5)
  {
    v13 = a5 - 0x3333333333333333 * ((v9 - v8) >> 3);
    if (v13 > 0x666666666666666)
      abort();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v8) >> 3);
    v15 = 2 * v14;
    if (2 * v14 <= v13)
      v15 = v13;
    if (v14 >= 0x333333333333333)
      v16 = 0x666666666666666;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 > 0x666666666666666)
        sub_1C4764EE4();
      v17 = (char *)operator new(40 * v16);
    }
    else
    {
      v17 = 0;
    }
    v26 = &v17[40 * v10];
    v27 = 5 * a5;
    v28 = &v26[40 * a5];
    v29 = 8 * v27;
    v30 = v26;
    do
    {
      v31 = *((_OWORD *)v6 + 1);
      *(_OWORD *)v30 = *(_OWORD *)v6;
      *((_OWORD *)v30 + 1) = v31;
      *((_QWORD *)v30 + 4) = *((_QWORD *)v6 + 4);
      v30 += 40;
      v6 += 40;
      v29 -= 40;
    }
    while (v29);
    v32 = *(char **)a1;
    if (v11 != *(char **)a1)
    {
      v33 = v11;
      do
      {
        v34 = *(_OWORD *)(v33 - 40);
        v35 = *(_OWORD *)(v33 - 24);
        *((_QWORD *)v26 - 1) = *((_QWORD *)v33 - 1);
        *(_OWORD *)(v26 - 24) = v35;
        *(_OWORD *)(v26 - 40) = v34;
        v26 -= 40;
        v33 -= 40;
      }
      while (v33 != v32);
      v9 = *(_BYTE **)(a1 + 8);
    }
    v36 = &v17[40 * v16];
    if (v9 != v11)
      memmove(v28, v11, v9 - v11);
    v37 = *(char **)a1;
    *(_QWORD *)a1 = v26;
    *(_QWORD *)(a1 + 8) = &v28[v9 - v11];
    *(_QWORD *)(a1 + 16) = v36;
    if (v37)
      operator delete(v37);
    return;
  }
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v11) >> 3)) >= a5)
  {
    v18 = &__src[40 * a5];
    v20 = *(char **)(a1 + 8);
LABEL_18:
    v21 = &v11[40 * a5];
    v22 = (unint64_t)&v20[-40 * a5];
    v23 = v20;
    if (v22 < (unint64_t)v9)
    {
      v23 = v20;
      do
      {
        v24 = *(_OWORD *)v22;
        v25 = *(_OWORD *)(v22 + 16);
        *((_QWORD *)v23 + 4) = *(_QWORD *)(v22 + 32);
        *(_OWORD *)v23 = v24;
        *((_OWORD *)v23 + 1) = v25;
        v22 += 40;
        v23 += 40;
      }
      while (v22 < (unint64_t)v9);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v11[40 * a5], v11, v20 - v21);
    if (v18 != v6)
      memmove(v11, v6, v18 - v6);
    return;
  }
  v18 = &__src[8 * ((v9 - v11) >> 3)];
  v19 = a4 - v18;
  if (a4 != v18)
    memmove(*(void **)(a1 + 8), &__src[8 * ((v9 - v11) >> 3)], a4 - v18);
  v20 = &v9[v19];
  *(_QWORD *)(a1 + 8) = &v9[v19];
  if (v9 - v11 >= 1)
    goto LABEL_18;
}

void sub_1C4F7B2B4(uint64_t a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  __int128 *v27;
  unint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  BOOL v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  __int128 *v45;
  int v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 *v65;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  int64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  _OWORD *v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v121;
  __int128 *v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  char v127;
  __int128 v128;
  __int128 v129;
  __int128 *v130;
  __int128 *v131;
  uint64_t v132;
  _OWORD *v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;

uint64_t sub_1C4F7BBC0(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *a1;
      v11 = a1[1];
      v12 = *((_QWORD *)a1 + 4);
      v13 = *((_QWORD *)a3 + 4);
      v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((_QWORD *)a1 + 4) = v13;
    }
    else
    {
      v25 = *a1;
      v26 = a1[1];
      v27 = *((_QWORD *)a1 + 4);
      v28 = *((_QWORD *)a2 + 4);
      v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      *((_QWORD *)a1 + 4) = v28;
      *((_QWORD *)a2 + 4) = v27;
      *a2 = v25;
      a2[1] = v26;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *a2;
      v11 = a2[1];
      v12 = *((_QWORD *)a2 + 4);
      v30 = *((_QWORD *)a3 + 4);
      v31 = a3[1];
      *a2 = *a3;
      a2[1] = v31;
      *((_QWORD *)a2 + 4) = v30;
    }
    *((_QWORD *)a3 + 4) = v12;
    *a3 = v10;
    a3[1] = v11;
  }
  else if ((_DWORD)result)
  {
    v15 = *a2;
    v16 = a2[1];
    v17 = *((_QWORD *)a2 + 4);
    v18 = *((_QWORD *)a3 + 4);
    v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((_QWORD *)a2 + 4) = v18;
    *((_QWORD *)a3 + 4) = v17;
    *a3 = v15;
    a3[1] = v16;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v20 = *a1;
      v21 = a1[1];
      v22 = *((_QWORD *)a1 + 4);
      v23 = *((_QWORD *)a2 + 4);
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      *((_QWORD *)a1 + 4) = v23;
      *((_QWORD *)a2 + 4) = v22;
      *a2 = v20;
      a2[1] = v21;
    }
  }
  return result;
}

BOOL sub_1C4F7BCF8(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 40);
      if (!(*a3)((__int128 *)(a2 - 40), (__int128 *)a1))
        return 1;
      v9 = *(_OWORD *)a1;
      v10 = *(_OWORD *)(a1 + 16);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(a2 - 8);
      v13 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(_QWORD *)(a1 + 32) = v12;
      *(_QWORD *)(a2 - 8) = v11;
      result = 1;
      *v8 = v9;
      *(_OWORD *)(a2 - 24) = v10;
      return result;
    case 3uLL:
      sub_1C4F7BBC0((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      sub_1C4F7BEEC(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      sub_1C4F7BFD4(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      v14 = (__int128 *)(a1 + 80);
      sub_1C4F7BBC0((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), a3);
      v15 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v15, v14))
    {
      v18 = *(_OWORD *)(v15 + 16);
      v24 = *(_OWORD *)v15;
      v25 = v18;
      v26 = *(_QWORD *)(v15 + 32);
      v19 = v16;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 96);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 136) = v21;
        *(_QWORD *)(v20 + 152) = *(_QWORD *)(a1 + v19 + 112);
        if (v19 == -80)
          break;
        v19 -= 40;
        if (((*a3)(&v24, (__int128 *)(v20 + 40)) & 1) == 0)
        {
          v22 = a1 + v19 + 120;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      v23 = v25;
      *(_OWORD *)v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(_QWORD *)(v22 + 32) = v26;
      if (++v17 == 8)
        return v15 + 40 == a2;
    }
    v14 = (__int128 *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2)
      return 1;
  }
}

__n128 sub_1C4F7BEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;

  sub_1C4F7BBC0((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_OWORD *)a3;
    v12 = *(_OWORD *)(a3 + 16);
    v13 = *(_QWORD *)(a3 + 32);
    v14 = *(_QWORD *)(a4 + 32);
    v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v15;
    *(_QWORD *)(a3 + 32) = v14;
    *(_QWORD *)(a4 + 32) = v13;
    *(_OWORD *)a4 = v11;
    *(_OWORD *)(a4 + 16) = v12;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v16 = *(_OWORD *)a2;
      v17 = *(_OWORD *)(a2 + 16);
      v18 = *(_QWORD *)(a2 + 32);
      v19 = *(_QWORD *)(a3 + 32);
      v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(_QWORD *)(a2 + 32) = v19;
      *(_QWORD *)(a3 + 32) = v18;
      *(_OWORD *)a3 = v16;
      *(_OWORD *)(a3 + 16) = v17;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        result = *(__n128 *)a1;
        v21 = *(_OWORD *)(a1 + 16);
        v22 = *(_QWORD *)(a1 + 32);
        v23 = *(_QWORD *)(a2 + 32);
        v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(_QWORD *)(a1 + 32) = v23;
        *(_QWORD *)(a2 + 32) = v22;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v21;
      }
    }
  }
  return result;
}

__n128 sub_1C4F7BFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v12 = sub_1C4F7BEEC(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v14 = *(_OWORD *)a4;
    v15 = *(_OWORD *)(a4 + 16);
    v16 = *(_QWORD *)(a4 + 32);
    v17 = *(_QWORD *)(a5 + 32);
    v18 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v18;
    *(_QWORD *)(a4 + 32) = v17;
    *(_QWORD *)(a5 + 32) = v16;
    *(_OWORD *)a5 = v14;
    *(_OWORD *)(a5 + 16) = v15;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v19 = *(_OWORD *)a3;
      v20 = *(_OWORD *)(a3 + 16);
      v21 = *(_QWORD *)(a3 + 32);
      v22 = *(_QWORD *)(a4 + 32);
      v23 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v23;
      *(_QWORD *)(a3 + 32) = v22;
      *(_QWORD *)(a4 + 32) = v21;
      *(_OWORD *)a4 = v19;
      *(_OWORD *)(a4 + 16) = v20;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v24 = *(__n128 *)a2;
        v25 = *(_OWORD *)(a2 + 16);
        v26 = *(_QWORD *)(a2 + 32);
        v27 = *(_QWORD *)(a3 + 32);
        v28 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v28;
        *(_QWORD *)(a2 + 32) = v27;
        *(_QWORD *)(a3 + 32) = v26;
        *(__n128 *)a3 = v24;
        *(_OWORD *)(a3 + 16) = v25;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          result = *(__n128 *)a1;
          v29 = *(_OWORD *)(a1 + 16);
          v30 = *(_QWORD *)(a1 + 32);
          v31 = *(_QWORD *)(a2 + 32);
          v32 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v32;
          *(_QWORD *)(a1 + 32) = v31;
          *(_QWORD *)(a2 + 32) = v30;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v29;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C4F7C0FC()
{
  int v0;
  char *v1;
  int v3;
  int *v4;
  __int128 v5;
  int v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[21];

  v9[20] = *MEMORY[0x1E0C80C00];
  v6 = 1;
  *(_QWORD *)&v5 = "Vector functions library";
  *((_QWORD *)&v5 + 1) = 24;
  v3 = 0;
  v4 = &v3;
  v7 = v9;
  v8 = 0x400000000;
  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v7, (uint64_t)v9, 6uLL, 40);
  v0 = v8;
  v1 = (char *)v7 + 40 * v8;
  *(_QWORD *)v1 = "none";
  *((_QWORD *)v1 + 1) = 4;
  *((_DWORD *)v1 + 4) = 0;
  *((_QWORD *)v1 + 3) = "No vector functions library";
  *((_QWORD *)v1 + 4) = 27;
  *((_QWORD *)v1 + 5) = "Accelerate";
  *((_QWORD *)v1 + 6) = 10;
  *((_DWORD *)v1 + 14) = 1;
  *((_QWORD *)v1 + 8) = "Accelerate framework";
  *((_QWORD *)v1 + 9) = 20;
  *((_QWORD *)v1 + 10) = "Darwin_libsystem_m";
  *((_QWORD *)v1 + 11) = 18;
  *((_DWORD *)v1 + 24) = 2;
  *((_QWORD *)v1 + 13) = "Darwin libsystem_m";
  *((_QWORD *)v1 + 14) = 18;
  *((_QWORD *)v1 + 15) = "LIBMVEC-X86";
  *((_QWORD *)v1 + 16) = 11;
  *((_DWORD *)v1 + 34) = 3;
  *((_QWORD *)v1 + 18) = "GLIBC Vector Math library";
  *((_QWORD *)v1 + 19) = 25;
  *((_QWORD *)v1 + 20) = "MASSV";
  *((_QWORD *)v1 + 21) = 5;
  *((_DWORD *)v1 + 44) = 4;
  *((_QWORD *)v1 + 23) = "IBM MASS vector library";
  *((_QWORD *)v1 + 24) = 23;
  *((_QWORD *)v1 + 25) = "SVML";
  *((_QWORD *)v1 + 26) = 4;
  *((_DWORD *)v1 + 54) = 5;
  *((_QWORD *)v1 + 28) = "Intel SVML library";
  *((_QWORD *)v1 + 29) = 18;
  LODWORD(v8) = v0 + 6;
  sub_1C61BB550(&v6, &v5, &v4, (uint64_t)&v7);
  if (v7 != v9)
    free(v7);
  return __cxa_atexit((void (*)(void *))sub_1C61B860C, &qword_1ED7F44B8, &dword_1C475E000);
}

_QWORD *sub_1C4F7C2CC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t *v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  _BYTE v34[264];

  v30 = v34;
  v31 = v34;
  v32 = 32;
  v33 = 0;
  v3 = *(_QWORD *)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == v3)
    return 0;
  while (1)
  {
    v6 = *(_QWORD *)(v2 - 8);
    v2 -= 8;
    v5 = v6;
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)&v30, v6);
    v8 = *(_QWORD *)(v6 + 40);
    if (v8 != v6 + 40)
      break;
LABEL_28:
    if (v2 == v3)
    {
      v28 = 0;
      v18 = v30;
      v17 = v31;
      goto LABEL_38;
    }
  }
  if (v8)
    v9 = v8 - 24;
  else
    v9 = 0;
  v10 = *(unsigned __int8 *)(v9 + 16);
  v11 = v10 - 29;
  if (v10 != 30)
  {
    v12 = 2;
    switch(v11)
    {
      case 1:
        __break(1u);
        return result;
      case 2:
        v12 = (*(_DWORD *)(v9 + 20) >> 1) & 0x3FFFFFF;
        goto LABEL_31;
      case 3:
      case 9:
        v12 = (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) - 1;
        goto LABEL_31;
      case 4:
        goto LABEL_10;
      case 7:
        v12 = *(_WORD *)(v9 + 18) & 1;
        goto LABEL_31;
      case 8:
        v12 = 1;
        goto LABEL_10;
      case 10:
        v12 = *(_DWORD *)(v9 + 80) + 1;
LABEL_31:
        if (!v12)
          goto LABEL_28;
        goto LABEL_10;
      default:
        goto LABEL_28;
    }
  }
  if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) == 3)
    v12 = 2;
  else
    v12 = 1;
LABEL_10:
  v13 = 0;
  v29 = v12;
  while (1)
  {
    v14 = *(unsigned __int8 *)(v9 + 16);
    if (v14 != 30)
      __asm { BR              X9 }
    v15 = *(_QWORD *)(v9 - 32 - 32 * v13);
    v16 = sub_1C477672C((uint64_t)&v30, v15);
    v18 = v30;
    v17 = v31;
    v19 = (uint64_t *)((char *)&v32 + 4);
    if (v31 != v30)
      v19 = &v32;
    if (v16 == (_QWORD *)&v31[8 * *(unsigned int *)v19])
      goto LABEL_24;
    v20 = *((_DWORD *)a2 + 4);
    if (!v20)
      goto LABEL_37;
    v21 = *a2;
    v22 = v20 - 1;
    v23 = (v20 - 1) & ((v5 >> 4) ^ (v5 >> 9));
    v24 = *(_QWORD *)(*a2 + 16 * v23);
    if (v5 != v24)
      break;
LABEL_20:
    v27 = *(uint64_t ***)(v21 + 16 * v23 + 8);
    if (!v27)
      goto LABEL_37;
    while (*v27[4] != v15)
    {
      v27 = (uint64_t **)*v27;
      if (!v27)
        goto LABEL_37;
    }
LABEL_24:
    if (++v13 == v29)
      goto LABEL_28;
  }
  v25 = 1;
  while (v24 != -4096)
  {
    v26 = v23 + v25++;
    v23 = v26 & v22;
    v24 = *(_QWORD *)(v21 + 16 * v23);
    if (v5 == v24)
      goto LABEL_20;
  }
LABEL_37:
  v28 = 1;
LABEL_38:
  if (v17 != v18)
    free(v17);
  return (_QWORD *)v28;
}

uint64_t llvm::IntrinsicCostAttributes::IntrinsicCostAttributes(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(a3 + 16) != 84)
    goto LABEL_5;
  v7 = *(_QWORD *)(a3 - 32);
  if (!v7)
    goto LABEL_6;
  if (!*(_BYTE *)(v7 + 16) && *(_QWORD *)(v7 + 24) == *(_QWORD *)(a3 + 72))
  {
    if ((*(_BYTE *)(v7 + 33) & 0x20) != 0)
      v7 = a3;
    else
      v7 = 0;
  }
  else
  {
LABEL_5:
    v7 = 0;
  }
LABEL_6:
  v8 = *(_QWORD *)a3;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_DWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  v9 = (uint64_t *)(a1 + 72);
  *(_QWORD *)(a1 + 80) = 0x400000000;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = a4;
  *(_QWORD *)(a1 + 136) = a5;
  if (sub_1C4774A9C(a3))
  {
    v10 = *(unsigned __int8 *)(a3 + 17) >> 1;
    if (v10 == 127)
      v10 = -1;
    *(_DWORD *)(a1 + 120) = v10;
  }
  v11 = *(_DWORD *)(a3 + 20);
  v12 = *(unsigned __int8 *)(a3 + 16);
  if (v12 == 84)
  {
    v13 = 0;
  }
  else if (v12 == 39)
  {
    v13 = (*(_DWORD *)(a3 + 80) + 1);
  }
  else
  {
    v13 = 2;
  }
  v14 = 0;
  v15 = -(uint64_t)(v11 & 0x7FFFFFF);
  if (v11 < 0)
  {
    v17 = a3 - 32 * (v11 & 0x7FFFFFF);
    v18 = *(_QWORD *)(v17 - 8);
    if ((v18 & 0xFFFFFFFF0) != 0)
      v14 = (*(_DWORD *)(v17 - 12) - *(_DWORD *)(v17 - v18));
    else
      v14 = 0;
  }
  sub_1C4DA9878((unsigned int *)(a1 + 72), *v9, (char *)(a3 + 32 * v15), (char *)(a3 - 32 * v13 - 32 * v14 - 32));
  sub_1C4F7C758((unsigned int *)(a1 + 24), *(_QWORD *)(a1 + 24), (char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 - 32) + 24) + 16) + 8), (char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 - 32) + 24) + 16)+ 8 * *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a3 - 32) + 24) + 12)));
  return a1;
}

_BYTE *sub_1C4F7C758(unsigned int *a1, uint64_t a2, char *__src, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE *__srca;

  v5 = __src;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 3;
  v9 = a1[2];
  v10 = a1[3];
  v11 = a4 - __src;
  v12 = v9 + ((a4 - __src) >> 3);
  if (*(_QWORD *)a1 + 8 * v9 == a2)
  {
    if (v12 > v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v12, 8);
      LODWORD(v9) = a1[2];
      v7 = *(_QWORD *)a1;
    }
    if (v5 != a4)
    {
      memcpy((void *)(v7 + 8 * v9), v5, v11);
      LODWORD(v9) = a1[2];
      v7 = *(_QWORD *)a1;
    }
    a1[2] = v9 + (v11 >> 3);
    return (_BYTE *)(v7 + 8 * v8);
  }
  else
  {
    v15 = (uint64_t)v11 >> 3;
    if (v12 > v10)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v12, 8);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v16 = (_BYTE *)(v7 + 8 * v9);
    __srca = (_BYTE *)(v7 + 8 * v8);
    v17 = (v16 - __srca) >> 3;
    if (v17 >= v15)
    {
      sub_1C6177054(a1, &v16[-8 * v15], (char *)(v7 + 8 * v9));
      if (&v16[-8 * v15] != __srca)
        memmove(&__srca[8 * v15], __srca, &v16[-8 * v15] - __srca);
      if (v5 != a4)
      {
        v13 = __srca;
        memmove(__srca, v5, v11);
        return v13;
      }
    }
    else
    {
      v18 = v9 + (v11 >> 3);
      a1[2] = v18;
      if (v8 != v9)
      {
        v19 = (_QWORD *)(v7 + 8 * v8);
        memcpy((void *)(v7 + 8 * v18 - 8 * v17), __srca, v16 - __srca);
        do
        {
          v20 = *(_QWORD *)v5;
          v5 += 8;
          *v19++ = v20;
          --v17;
        }
        while (v17);
      }
      if (v5 != a4)
        memcpy(v16, v5, a4 - v5);
    }
    return __srca;
  }
}

uint64_t llvm::IntrinsicCostAttributes::IntrinsicCostAttributes(uint64_t a1, int a2, uint64_t a3, char *__src, uint64_t a5, int a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10)
{
  *(_QWORD *)a1 = a7;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0x400000000;
  *(_DWORD *)(a1 + 120) = a6;
  *(_QWORD *)(a1 + 128) = a9;
  *(_QWORD *)(a1 + 136) = a10;
  sub_1C4F7C758((unsigned int *)(a1 + 24), a1 + 40, __src, &__src[8 * a5]);
  return a1;
}

{
  *(_QWORD *)a1 = a7;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0x400000000;
  *(_DWORD *)(a1 + 120) = a6;
  *(_QWORD *)(a1 + 128) = a9;
  *(_QWORD *)(a1 + 136) = a10;
  sub_1C4F7C758((unsigned int *)(a1 + 24), a1 + 40, __src, &__src[8 * a5]);
  return a1;
}

uint64_t llvm::IntrinsicCostAttributes::IntrinsicCostAttributes(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, char *__src, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t *v14;

  *(_QWORD *)a1 = a9;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  v14 = (uint64_t *)(a1 + 72);
  *(_QWORD *)(a1 + 32) = 0x400000000;
  *(_QWORD *)(a1 + 80) = 0x400000000;
  *(_DWORD *)(a1 + 120) = a8;
  *(_QWORD *)(a1 + 128) = a10;
  *(_QWORD *)(a1 + 136) = a11;
  sub_1C4F7C758((unsigned int *)(a1 + 24), a1 + 40, __src, &__src[8 * a7]);
  sub_1C61BB99C((unsigned int *)(a1 + 72), *v14, a4, &a4[a5]);
  return a1;
}

{
  uint64_t *v14;

  *(_QWORD *)a1 = a9;
  *(_QWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  v14 = (uint64_t *)(a1 + 72);
  *(_QWORD *)(a1 + 32) = 0x400000000;
  *(_QWORD *)(a1 + 80) = 0x400000000;
  *(_DWORD *)(a1 + 120) = a8;
  *(_QWORD *)(a1 + 128) = a10;
  *(_QWORD *)(a1 + 136) = a11;
  sub_1C4F7C758((unsigned int *)(a1 + 24), a1 + 40, __src, &__src[8 * a7]);
  sub_1C61BB99C((unsigned int *)(a1 + 72), *v14, a4, &a4[a5]);
  return a1;
}

BOOL llvm::HardwareLoopInfo::isHardwareLoopCandidate(const llvm::Loop **this, llvm::ScalarEvolution *a2, llvm::LoopInfo *a3, llvm::DominatorTree *a4, BOOL a5, char a6)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t ExitCount;
  uint64_t v13;
  uint64_t v14;
  llvm::APInt *v15;
  unsigned int v16;
  const llvm::Loop *v17;
  uint64_t *v19;
  uint64_t v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x400000000;
  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(*this, (uint64_t)&v19);
  if ((_DWORD)v20)
  {
    v9 = v19;
    v10 = &v19[v20];
    do
    {
      v11 = *v9;
      if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopLatch((uint64_t)*this, *v9)
        || (a6 & 1) == 0 && !*((_BYTE *)this + 49))
      {
        ExitCount = llvm::ScalarEvolution::getExitCount(a2, *this, v11, 0);
        if (*(_WORD *)(ExitCount + 24) != 15)
        {
          v13 = ExitCount;
          if (*(_WORD *)(ExitCount + 24))
          {
            if (llvm::ScalarEvolution::getLoopDisposition(a2, (const llvm::SCEV *)ExitCount, *this) == 1)
              goto LABEL_15;
          }
          else
          {
            v14 = *(_QWORD *)(ExitCount + 32);
            v15 = (llvm::APInt *)(v14 + 24);
            v16 = *(_DWORD *)(v14 + 32);
            if (v16 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase(v15) != v16)
LABEL_15:
                __asm { BR              X10 }
            }
            else if (*(_QWORD *)v15)
            {
              goto LABEL_15;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
  v17 = this[1];
  if (v19 != v21)
    free(v19);
  return v17 != 0;
}

llvm::TargetTransformInfo *llvm::TargetTransformInfo::TargetTransformInfo(llvm::TargetTransformInfo *this, const llvm::DataLayout *a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E813D768;
  v4[1] = a2;
  *(_QWORD *)this = v4;
  return this;
}

{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E813D768;
  v4[1] = a2;
  *(_QWORD *)this = v4;
  return this;
}

void llvm::TargetTransformInfo::~TargetTransformInfo(llvm::TargetTransformInfo *this)
{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

_QWORD *llvm::TargetTransformInfo::TargetTransformInfo(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t *llvm::TargetTransformInfo::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *a2 = 0;
  v4 = *a1;
  *a1 = v3;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

uint64_t llvm::TargetTransformInfo::getInliningThresholdMultiplier(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 32))(*(_QWORD *)this);
}

uint64_t llvm::TargetTransformInfo::adjustInliningThreshold(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 40))(*a1);
}

uint64_t llvm::TargetTransformInfo::getInlinerVectorBonusPercent(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 48))(*(_QWORD *)this);
}

uint64_t llvm::TargetTransformInfo::getEstimatedNumberOfCaseClusters(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 64))(*a1);
}

uint64_t llvm::TargetTransformInfo::getUserCost(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
}

uint64_t llvm::TargetTransformInfo::getPredictableBranchThreshold(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 80))(*(_QWORD *)this);
}

uint64_t llvm::TargetTransformInfo::hasBranchDivergence(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 88))(*(_QWORD *)this);
}

uint64_t llvm::TargetTransformInfo::canHaveNonUndefGlobalInitializerInAddressSpace(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 144))(*(_QWORD *)this);
}

uint64_t llvm::TargetTransformInfo::getPredicatedAddrSpace(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1);
}

uint64_t llvm::TargetTransformInfo::isLoweredToCall(llvm::TargetTransformInfo *this, const Function *a2)
{
  return (*(uint64_t (**)(_QWORD, const Function *))(**(_QWORD **)this + 176))(*(_QWORD *)this, a2);
}

uint64_t llvm::TargetTransformInfo::instCombineIntrinsic(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 224))(*a1);
}

uint64_t llvm::TargetTransformInfo::simplifyDemandedUseBitsIntrinsic(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t result;
  size_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;

  v4 = *a1;
  v5 = *(unsigned int *)(a4 + 8);
  v15 = v5;
  if (v5 > 0x40)
  {
    v8 = ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8;
    v12 = a2;
    v13 = v4;
    v11 = a3;
    v6 = (void *)operator new[]();
    memcpy(v6, *(const void **)a4, v8);
    a2 = v12;
    v4 = v13;
    a3 = v11;
  }
  else
  {
    v6 = *(void **)a4;
  }
  v14 = v6;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **))(*(_QWORD *)v4 + 232))(v4, a2, a3, &v14);
  if (v15 >= 0x41)
  {
    if (v14)
    {
      v10 = result;
      MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
      return v10;
    }
  }
  return result;
}

uint64_t llvm::TargetTransformInfo::simplifyDemandedVectorEltsIntrinsic(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  void (**v19)(_QWORD *);
  size_t v21;
  _QWORD *v23;
  void *v24;
  unsigned int v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v13 = *a1;
  v14 = *(unsigned int *)(a4 + 8);
  v25 = v14;
  if (v14 > 0x40)
  {
    v21 = ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8;
    v23 = a8;
    v15 = (void *)operator new[]();
    memcpy(v15, *(const void **)a4, v21);
    a8 = v23;
  }
  else
  {
    v15 = *(void **)a4;
  }
  v24 = v15;
  v16 = (_QWORD *)a8[3];
  if (v16)
  {
    if (v16 == a8)
    {
      v27 = v26;
      (*(void (**)(_QWORD *, _QWORD *))(*a8 + 24))(a8, v26);
    }
    else
    {
      v27 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v16 + 16))(v16);
    }
  }
  else
  {
    v27 = 0;
  }
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void **, uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v13 + 240))(v13, a2, a3, &v24, a5, a6, a7, v26);
  v18 = v27;
  if (v27 == v26)
  {
    v19 = (void (**)(_QWORD *))(v26[0] + 32);
    v18 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_9;
    v19 = (void (**)(_QWORD *))(*v27 + 40);
  }
  (*v19)(v18);
LABEL_9:
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  return v17;
}

uint64_t llvm::TargetTransformInfo::getUnrollingPreferences(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 184))(*a1);
}

uint64_t llvm::TargetTransformInfo::getPeelingPreferences(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 192))(*a1);
}

uint64_t llvm::TargetTransformInfo::isTruncateFree(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 456))(*a1);
}

uint64_t llvm::TargetTransformInfo::isProfitableToHoist(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 464))(*a1);
}

uint64_t llvm::TargetTransformInfo::shouldBuildLookupTables(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 496))(*(_QWORD *)this);
}

uint64_t llvm::TargetTransformInfo::shouldBuildLookupTablesForConstant(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 504))(*a1);
}

uint64_t llvm::TargetTransformInfo::useColdCCForColdCall(llvm::TargetTransformInfo *this, Function *a2)
{
  return (*(uint64_t (**)(_QWORD, Function *))(**(_QWORD **)this + 520))(*(_QWORD *)this, a2);
}

uint64_t llvm::TargetTransformInfo::allowsMisalignedMemoryAccesses(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 600))(*a1, a2, a3, a4, a5);
}

uint64_t llvm::TargetTransformInfo::getFPOpCost(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 632))(*a1);
}

uint64_t llvm::TargetTransformInfo::getRegisterClassName(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 688))(*(_QWORD *)this);
}

uint64_t llvm::TargetTransformInfo::shouldConsiderAddressTypePromotion(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 752))(*a1);
}

uint64_t llvm::TargetTransformInfo::getCacheSize(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 768))(*a1);
}

uint64_t llvm::TargetTransformInfo::getCacheAssociativity(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 776))(*a1);
}

uint64_t llvm::TargetTransformInfo::getOperandInfo(int8x8_t *a1, const llvm::Value *a2)
{
  _DWORD *v2;
  int v4;
  uint64_t v5;
  int8x8_t v6;
  uint8x8_t v7;
  uint64_t isZeroEltSplatMask;
  int v9;
  unint64_t v10;
  int8x8_t *v11;
  int8x8_t v12;
  uint8x8_t v13;
  llvm::APFloatBase *SplatValue;
  llvm::APFloatBase *v15;
  int v16;
  unsigned int v18;
  uint64_t v19;
  int v20;
  int v21;
  int8x8_t *ElementAsConstant;
  uint64_t v23;
  uint8x8_t v24;
  int v25;
  unint64_t v26;
  int8x8_t *v27;
  int8x8_t v28;
  uint8x8_t v29;
  unint64_t v30;
  int8x8_t *v31;
  int8x8_t v32;
  uint8x8_t v33;

  v2 = a2;
  *(_DWORD *)a2 = 0;
  v4 = a1[2].u8[0];
  if (a1 && v4 == 16)
  {
    v5 = a1[4].u32[0];
    if (v5 <= 0x40)
    {
      v6 = a1[3];
      goto LABEL_5;
    }
    v9 = 0;
    v10 = (unint64_t)(v5 + 63) >> 6;
    v11 = (int8x8_t *)a1[3];
    do
    {
      v12 = *v11++;
      v13 = (uint8x8_t)vcnt_s8(v12);
      v13.i16[0] = vaddlv_u8(v13);
      v9 += v13.i32[0];
      --v10;
    }
    while (v10);
    goto LABEL_13;
  }
  isZeroEltSplatMask = 0;
  if (a1 && v4 == 91)
  {
    a2 = (const llvm::Value *)*(unsigned int *)(**(_QWORD **)&a1[-8] + 32);
    if ((_DWORD)a2 == a1[9].i32[0])
      isZeroEltSplatMask = llvm::ShuffleVectorInst::isZeroEltSplatMask(*(int **)&a1[8], (uint64_t)a2);
    else
      isZeroEltSplatMask = 0;
  }
  SplatValue = llvm::getSplatValue((llvm *)a1, a2);
  v15 = SplatValue;
  v16 = a1[2].u8[0];
  if (v16 == 15 || v16 == 10)
  {
    if (SplatValue)
    {
      v18 = *((unsigned __int8 *)SplatValue + 16);
      if (v18 == 16)
      {
        v19 = *((unsigned int *)SplatValue + 8);
        if (v19 <= 0x40)
        {
          v6 = *(int8x8_t *)((char *)SplatValue + 24);
LABEL_5:
          v7 = (uint8x8_t)vcnt_s8(v6);
          v7.i16[0] = vaddlv_u8(v7);
          if (v7.u32[0] != 1)
            return 2;
          goto LABEL_14;
        }
        v9 = 0;
        v30 = (unint64_t)(v19 + 63) >> 6;
        v31 = (int8x8_t *)*((_QWORD *)SplatValue + 3);
        do
        {
          v32 = *v31++;
          v33 = (uint8x8_t)vcnt_s8(v32);
          v33.i16[0] = vaddlv_u8(v33);
          v9 += v33.i32[0];
          --v30;
        }
        while (v30);
LABEL_13:
        if (v9 != 1)
          return 2;
LABEL_14:
        *v2 = 1;
        return 2;
      }
      LODWORD(isZeroEltSplatMask) = 2;
      goto LABEL_48;
    }
    isZeroEltSplatMask = 3;
    if (!a1)
      return isZeroEltSplatMask;
    if ((v16 & 0xFE) != 0xE)
      return isZeroEltSplatMask;
    *v2 = 1;
    v20 = *(_DWORD *)(*(_QWORD *)a1 + 32);
    if (!v20)
      return isZeroEltSplatMask;
    v21 = 0;
    while (1)
    {
      ElementAsConstant = (int8x8_t *)llvm::ConstantDataSequential::getElementAsConstant((llvm::ConstantDataSequential *)a1);
      if (!ElementAsConstant || ElementAsConstant[2].i8[0] != 16)
        break;
      v23 = ElementAsConstant[4].u32[0];
      if (v23 > 0x40)
      {
        v25 = 0;
        v26 = (unint64_t)(v23 + 63) >> 6;
        v27 = (int8x8_t *)ElementAsConstant[3];
        do
        {
          v28 = *v27++;
          v29 = (uint8x8_t)vcnt_s8(v28);
          v29.i16[0] = vaddlv_u8(v29);
          v25 += v29.i32[0];
          --v26;
        }
        while (v26);
        if (v25 != 1)
          break;
      }
      else
      {
        v24 = (uint8x8_t)vcnt_s8(ElementAsConstant[3]);
        v24.i16[0] = vaddlv_u8(v24);
        if (v24.u32[0] != 1)
          break;
      }
      if (++v21 == v20)
        goto LABEL_45;
    }
    *v2 = 0;
LABEL_45:
    isZeroEltSplatMask = 3;
  }
  if (!v15)
    return isZeroEltSplatMask;
  v18 = *((unsigned __int8 *)v15 + 16);
LABEL_48:
  if (v18 < 4 || v18 == 21)
    return 1;
  else
    return isZeroEltSplatMask;
}

uint64_t llvm::TargetTransformInfo::getArithmeticInstrCost(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 824))(*a1);
}

uint64_t llvm::TargetTransformInfo::getCastContextHint(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  int v18;

  if (result)
  {
    v1 = result;
    result = 0;
    v2 = *(unsigned __int8 *)(v1 + 16) - 66;
    if (v2 <= 8)
    {
      v3 = 1 << v2;
      if ((v3 & 0x106) != 0)
      {
        v4 = *(_DWORD *)(v1 + 20);
        if ((v4 & 0x40000000) != 0)
          v5 = *(uint64_t **)(v1 - 8);
        else
          v5 = (uint64_t *)(v1 - 32 * (v4 & 0x7FFFFFF));
        v14 = *v5;
        v15 = *(unsigned __int8 *)(v14 + 16);
        if (v14)
          v16 = v15 >= 0x1C;
        else
          v16 = 0;
        if (!v16)
          return 0;
        if (v15 != 60)
        {
          if (v15 != 84)
            return 0;
          v17 = *(_QWORD *)(v14 - 32);
          if (!v17
            || *(_BYTE *)(v17 + 16)
            || *(_QWORD *)(v17 + 24) != *(_QWORD *)(v14 + 72)
            || (*(_BYTE *)(v17 + 33) & 0x20) == 0)
          {
            return 0;
          }
          v18 = *(_DWORD *)(v17 + 36);
          if (v18 == 184)
            v12 = 3;
          else
            v12 = 0;
          v13 = v18 == 185;
          goto LABEL_42;
        }
      }
      else
      {
        if ((v3 & 0x81) == 0)
          return result;
        v6 = *(_QWORD *)(v1 + 8);
        if (!v6 || *(_QWORD *)(v6 + 8))
          return 0;
        v7 = *(_QWORD *)(v6 + 24);
        v8 = *(unsigned __int8 *)(v7 + 16);
        if (!v7 || v8 < 0x1C)
          return 0;
        if (v8 != 61)
        {
          if (v8 != 84)
            return 0;
          v10 = *(_QWORD *)(v7 - 32);
          if (!v10
            || *(_BYTE *)(v10 + 16)
            || *(_QWORD *)(v10 + 24) != *(_QWORD *)(v7 + 72)
            || (*(_BYTE *)(v10 + 33) & 0x20) == 0)
          {
            return 0;
          }
          v11 = *(_DWORD *)(v10 + 36);
          if (v11 == 186)
            v12 = 3;
          else
            v12 = 0;
          v13 = v11 == 187;
LABEL_42:
          if (v13)
            return 2;
          else
            return v12;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t llvm::TargetTransformInfo::getCmpSelInstrCost(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 864))(*a1);
}

uint64_t llvm::TargetTransformInfo::getReplicationShuffleCost(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 880))(*a1);
}

uint64_t llvm::TargetTransformInfo::getMemcpyCost(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 56))(*a1);
}

uint64_t llvm::TargetTransformInfo::getTgtMemIntrinsic(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 992))(*a1);
}

uint64_t llvm::TargetTransformInfo::getMemcpyLoopLoweringType(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 1016))(*a1);
}

uint64_t llvm::TargetTransformInfo::getMemcpyLoopResidualLoweringType(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 1024))(*a1);
}

uint64_t llvm::TargetTransformInfo::areInlineCompatible(llvm::TargetTransformInfo *this, const Function *a2, const Function *a3)
{
  return (*(uint64_t (**)(_QWORD, const Function *, const Function *))(**(_QWORD **)this + 1032))(*(_QWORD *)this, a2, a3);
}

uint64_t llvm::TargetTransformInfo::areTypesABICompatible(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 1040))(*a1);
}

uint64_t llvm::TargetTransformInfo::getLoadStoreVecRegBitWidth(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 1064))(*(_QWORD *)this);
}

uint64_t llvm::TargetTransformInfo::isLegalToVectorizeLoad(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 1072))(*a1);
}

uint64_t llvm::TargetTransformInfo::isLegalToVectorizeStore(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 1080))(*a1);
}

uint64_t llvm::TargetTransformInfo::isLegalToVectorizeLoadChain(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 1088))(*a1, a2, a3);
}

uint64_t llvm::TargetTransformInfo::isLegalToVectorizeStoreChain(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*a1 + 1096))(*a1, a2, a3);
}

uint64_t llvm::TargetTransformInfo::getLoadVectorFactor(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 1120))(*a1);
}

uint64_t llvm::TargetTransformInfo::getStoreVectorFactor(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 1128))(*a1);
}

uint64_t llvm::TargetTransformInfo::hasActiveVectorLength(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 1184))(*a1, a2, a3, a4);
}

uint64_t llvm::TargetTransformInfo::hasDisjointAddressSpaces(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 1208))(*(_QWORD *)this);
}

uint64_t llvm::TargetTransformInfo::canAddressSpacesOverlap(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 1216))(*(_QWORD *)this);
}

uint64_t llvm::TargetTransformInfo::canWriteToAddressSpace(llvm::TargetTransformInfo *this)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)this + 1224))(*(_QWORD *)this);
}

uint64_t llvm::TargetTransformInfo::canCSEInstruction(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 1232))(*a1);
}

_QWORD *llvm::TargetIRAnalysis::TargetIRAnalysis(_QWORD *this)
{
  *this = &off_1E813DC50;
  this[1] = llvm::TargetIRAnalysis::getDefaultTTI;
  this[3] = this;
  return this;
}

{
  *this = &off_1E813DC50;
  this[1] = llvm::TargetIRAnalysis::getDefaultTTI;
  this[3] = this;
  return this;
}

uint64_t llvm::TargetIRAnalysis::TargetIRAnalysis(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v3;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = v3;
      *(_QWORD *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void llvm::TargetIRAnalysis::run(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  }
  else
  {
    sub_1C485C2F0();
    llvm::initializeTargetTransformInfoWrapperPassPass(v2);
  }
}

void llvm::initializeTargetTransformInfoWrapperPassPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED82EB38);
  if (v1 != -1)
  {
    v4[0] = sub_1C4F7D948;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED82EB38, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C4F7D948(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Target Transform Information";
  *(_QWORD *)(v2 + 8) = 28;
  *(_QWORD *)(v2 + 16) = "tti";
  *(_QWORD *)(v2 + 24) = 3;
  *(_QWORD *)(v2 + 32) = &llvm::TargetTransformInfoWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::TargetTransformInfoWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t *llvm::TargetTransformInfoWrapperPass::getTTI(llvm::TargetTransformInfoWrapperPass *this, const llvm::Function *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11[2];
  int v12;
  _QWORD v13[2];
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v5 = *((_QWORD *)this + 7);
  if (!v5)
  {
    sub_1C485C2F0();
    goto LABEL_8;
  }
  v2 = v13;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 48))(&v10);
  v3 = (uint64_t *)((char *)this + 64);
  v6 = v10;
  if (!*((_BYTE *)this + 72))
  {
    *((_QWORD *)this + 8) = v10;
    *((_BYTE *)this + 72) = 1;
    goto LABEL_5;
  }
  v10 = 0;
  v7 = *v3;
  *v3 = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v10;
    v10 = 0;
    if (v8)
LABEL_8:
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
LABEL_5:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v2);
  sub_1C4D8B52C(v11);
  return v3;
}

_QWORD *sub_1C4F7DAC4(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[1], 8);
  return a1;
}

void sub_1C4F7DB04()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C4F7DB18(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_1C4F7DB20(uint64_t a1, uint64_t a2, llvm::Value *a3, llvm **a4, uint64_t a5)
{
  return sub_1C4F7E598((uint64_t *)(a1 + 8), a2, a3, a4, a5);
}

uint64_t sub_1C4F7DB28()
{
  return 1;
}

uint64_t sub_1C4F7DB30()
{
  return 0;
}

uint64_t sub_1C4F7DB38()
{
  return 150;
}

uint64_t sub_1C4F7DB40()
{
  return 4;
}

uint64_t sub_1C4F7DB4C(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  *a3 = 0;
  return ((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFFu) - 1;
}

uint64_t sub_1C4F7DB60(uint64_t a1, int **a2, uint64_t a3, uint64_t a4, int a5)
{
  return sub_1C4F7EA30((uint64_t *)(a1 + 8), a2, a3, a4, a5);
}

uint64_t sub_1C4F7DB68()
{
  return 2126008812;
}

uint64_t sub_1C4F7DB74()
{
  return 0;
}

uint64_t sub_1C4F7DB7C()
{
  return 0;
}

uint64_t sub_1C4F7DB84()
{
  return 0;
}

uint64_t sub_1C4F7DB8C()
{
  return 0;
}

uint64_t sub_1C4F7DB94()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1C4F7DB9C()
{
  return 0;
}

uint64_t sub_1C4F7DBA4()
{
  return 0;
}

BOOL sub_1C4F7DBAC(uint64_t a1, int a2)
{
  return a2 == 0;
}

uint64_t sub_1C4F7DBB8()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1C4F7DBC0()
{
  return 0;
}

uint64_t sub_1C4F7DBCC()
{
  return 0;
}

uint64_t sub_1C4F7DBD4(uint64_t a1, uint64_t ***a2)
{
  return sub_1C4845148(a1 + 8, a2);
}

uint64_t sub_1C4F7DBE4()
{
  return 0;
}

uint64_t sub_1C4F7DBEC()
{
  return 0;
}

uint64_t sub_1C4F7DBF4()
{
  return 0;
}

uint64_t sub_1C4F7DBFC()
{
  return 0;
}

uint64_t sub_1C4F7DC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  size_t v6;
  void *v7;

  v4 = *(unsigned int *)(a4 + 8);
  if (v4 >= 0x41)
  {
    v6 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
    v7 = (void *)operator new[]();
    memcpy(v7, *(const void **)a4, v6);
    MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  }
  return 0;
}

uint64_t sub_1C4F7DC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v10;
  void *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD v15[3];
  _QWORD *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned int *)(a4 + 8);
  if (v10 > 0x40)
  {
    v11 = (void *)operator new[]();
    memcpy(v11, *(const void **)a4, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v11 = *(void **)a4;
  }
  v12 = (_QWORD *)a8[3];
  if (v12)
  {
    if (v12 == a8)
    {
      v16 = v15;
      (*(void (**)(_QWORD *, _QWORD *))(*a8 + 24))(a8, v15);
      v13 = v16;
    }
    else
    {
      v13 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v12 + 16))(v12);
      v16 = v13;
    }
    if (v13 == v15)
    {
      (*(void (**)(_QWORD *))(v15[0] + 32))(v15);
    }
    else if (v13)
    {
      (*(void (**)(_QWORD *))(*v13 + 40))(v13);
    }
  }
  else
  {
    v16 = 0;
  }
  if (v10 >= 0x41 && v11)
    MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
  return 0;
}

uint64_t sub_1C4F7DDDC()
{
  return 0;
}

uint64_t sub_1C4F7DDE4()
{
  return 0;
}

BOOL sub_1C4F7DDEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  BOOL v6;

  if (a3 | a4)
    v6 = 1;
  else
    v6 = a6 >= 2;
  return !v6;
}

BOOL sub_1C4F7DE00(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  return sub_1C6138BE0(a1 + 8, a2, a3);
}

uint64_t sub_1C4F7DE08()
{
  return 1;
}

uint64_t sub_1C4F7DE10()
{
  return 0;
}

uint64_t sub_1C4F7DE18()
{
  return 0;
}

uint64_t sub_1C4F7DE20()
{
  return 0;
}

uint64_t sub_1C4F7DE28()
{
  return 2;
}

uint64_t sub_1C4F7DE30()
{
  return 0;
}

uint64_t sub_1C4F7DE38()
{
  return 0;
}

BOOL sub_1C4F7DE40(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1C4849330((uint64_t *)(a1 + 8), a2, a3);
}

BOOL sub_1C4F7DE4C(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1C4849330((uint64_t *)(a1 + 8), a2, a3);
}

uint64_t sub_1C4F7DE58()
{
  return 0;
}

uint64_t sub_1C4F7DE60()
{
  return 0;
}

uint64_t sub_1C4F7DE68()
{
  return 0;
}

uint64_t sub_1C4F7DE70()
{
  return 0;
}

uint64_t sub_1C4F7DE78()
{
  return 0;
}

uint64_t sub_1C4F7DE80()
{
  return 0;
}

uint64_t sub_1C4F7DE88()
{
  return 0;
}

uint64_t sub_1C4F7DE90()
{
  return 0;
}

uint64_t sub_1C4F7DE98()
{
  return 0;
}

uint64_t sub_1C4F7DEA0()
{
  return 0;
}

uint64_t sub_1C4F7DEA8()
{
  return 1;
}

uint64_t sub_1C4F7DEB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  BOOL v6;
  uint64_t v7;

  if (a3 | a4)
    v6 = 1;
  else
    v6 = a6 > 1;
  v7 = v6;
  return v7 << 63 >> 63;
}

uint64_t sub_1C4F7DECC()
{
  return 0;
}

uint64_t sub_1C4F7DED4()
{
  return 0;
}

uint64_t sub_1C4F7DEDC()
{
  return 1;
}

uint64_t sub_1C4F7DEE4()
{
  return 0;
}

uint64_t sub_1C4F7DEEC()
{
  return 0;
}

uint64_t sub_1C4F7DEF4()
{
  return 1;
}

uint64_t sub_1C4F7DF00()
{
  return 1;
}

uint64_t sub_1C4F7DF08()
{
  return 1;
}

uint64_t sub_1C4F7DF10()
{
  return 0;
}

uint64_t sub_1C4F7DF18()
{
  return 0;
}

uint64_t sub_1C4F7DF20()
{
  return 0;
}

uint64_t sub_1C4F7DF2C()
{
  return 0;
}

uint64_t sub_1C4F7DF38()
{
  return 0;
}

uint64_t sub_1C4F7DF40()
{
  return 0;
}

double sub_1C4F7DF48@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)&result = 0x800000000;
  *(_QWORD *)(a1 + 16) = 0x800000000;
  *(_DWORD *)(a1 + 56) = 1;
  *(_BYTE *)(a1 + 60) = 0;
  return result;
}

uint64_t sub_1C4F7DF70()
{
  return 0;
}

uint64_t sub_1C4F7DF78()
{
  return 0;
}

uint64_t sub_1C4F7DF80()
{
  return 0;
}

uint64_t sub_1C4F7DF88()
{
  return 0;
}

uint64_t sub_1C4F7DF90()
{
  return 0;
}

uint64_t sub_1C4F7DF98()
{
  return 0;
}

uint64_t sub_1C4F7DFA0()
{
  return 0;
}

uint64_t sub_1C4F7DFA8()
{
  return 1;
}

uint64_t sub_1C4F7DFB0()
{
  return 1;
}

uint64_t sub_1C4F7DFBC()
{
  return 0;
}

uint64_t sub_1C4F7DFC8()
{
  return 1;
}

uint64_t sub_1C4F7DFD4()
{
  return 0;
}

uint64_t sub_1C4F7DFE0()
{
  return 0;
}

uint64_t sub_1C4F7DFEC()
{
  return 8;
}

uint64_t sub_1C4F7DFF4(uint64_t a1, uint64_t a2)
{
  return a2;
}

const char *sub_1C4F7DFFC(uint64_t a1, int a2)
{
  const char *v2;

  v2 = "Generic::Unknown Register Class";
  if (a2 == 1)
    v2 = "Generic::VectorRC";
  if (a2)
    return v2;
  else
    return "Generic::ScalarRC";
}

uint64_t sub_1C4F7E028()
{
  return 32;
}

uint64_t sub_1C4F7E034()
{
  return 128;
}

uint64_t sub_1C4F7E03C()
{
  return 0;
}

uint64_t sub_1C4F7E044()
{
  return 0;
}

uint64_t sub_1C4F7E04C()
{
  return 0;
}

uint64_t sub_1C4F7E054(uint64_t a1, uint64_t a2, int a3)
{
  if (a3)
    return 0x100000000;
  else
    return 0;
}

uint64_t sub_1C4F7E064()
{
  return 0;
}

uint64_t sub_1C4F7E06C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  *a3 = 0;
  return 0;
}

uint64_t sub_1C4F7E078()
{
  return 0;
}

uint64_t sub_1C4F7E080()
{
  return 0;
}

uint64_t sub_1C4F7E088()
{
  return 0;
}

uint64_t sub_1C4F7E090()
{
  return 0;
}

uint64_t sub_1C4F7E098()
{
  return 1;
}

uint64_t sub_1C4F7E0A0()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_1C4F7E0A8()
{
  return 0;
}

uint64_t sub_1C4F7E0B0()
{
  return 1;
}

uint64_t sub_1C4F7E0B8(uint64_t a1, int a2)
{
  if ((a2 - 19) >= 6)
    return 1;
  else
    return 4;
}

uint64_t sub_1C4F7E0D0()
{
  return 1;
}

BOOL sub_1C4F7E0DC(uint64_t a1, int a2, llvm::Type ***a3, llvm::Type ***a4)
{
  return sub_1C4848CBC((uint64_t *)(a1 + 8), a2, a3, a4);
}

uint64_t sub_1C4F7E0E4()
{
  return 1;
}

BOOL sub_1C4F7E0F0(uint64_t a1, int a2, int a3)
{
  return a2 != 55 || a3 == 0;
}

uint64_t sub_1C4F7E104()
{
  return 1;
}

uint64_t sub_1C4F7E110()
{
  return 1;
}

uint64_t sub_1C4F7E11C()
{
  return 1;
}

uint64_t sub_1C4F7E128()
{
  return 1;
}

uint64_t sub_1C4F7E134()
{
  return 1;
}

uint64_t sub_1C4F7E140()
{
  return 1;
}

uint64_t sub_1C4F7E14C()
{
  return 1;
}

uint64_t sub_1C4F7E158()
{
  return 1;
}

uint64_t sub_1C4F7E164()
{
  return 1;
}

uint64_t sub_1C4F7E170()
{
  return 1;
}

uint64_t sub_1C4F7E17C()
{
  return 1;
}

uint64_t sub_1C4F7E188(uint64_t a1, uint64_t a2)
{
  return sub_1C4846F4C(a1 + 8, a2);
}

uint64_t sub_1C4F7E190()
{
  return 1;
}

uint64_t sub_1C4F7E19C()
{
  return 1;
}

uint64_t sub_1C4F7E1A4()
{
  return 0;
}

uint64_t sub_1C4F7E1B0()
{
  return 0;
}

uint64_t sub_1C4F7E1BC()
{
  return 0;
}

uint64_t sub_1C4F7E1C4()
{
  return 0;
}

uint64_t sub_1C4F7E1CC()
{
  return 0;
}

_QWORD *sub_1C4F7E1D4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  _QWORD *result;
  _DWORD *v11;
  int v12;
  int v13;

  if ((a8 & 0xFF00000000) == 0)
    return (_QWORD *)(*a2 + 1912);
  v9 = 8 * a8;
  v13 = 8 * a8;
  if (8 * (int)a8 > 63)
  {
    if (v9 == 64)
      return (_QWORD *)(*a2 + 1984);
    if (v9 == 128)
      return (_QWORD *)(*a2 + 2008);
    goto LABEL_14;
  }
  switch(v9)
  {
    case 32:
      return (_QWORD *)(*a2 + 1960);
    case 16:
      return (_QWORD *)(*a2 + 1936);
    case 8:
      return (_QWORD *)(*a2 + 1912);
  }
LABEL_14:
  v11 = sub_1C5270984(*a2 + 2168, &v13);
  result = (_QWORD *)*((_QWORD *)v11 + 1);
  if (!result)
  {
    result = (_QWORD *)sub_1C484358C(*a2 + 2040, 24, 3);
    v12 = v13;
    *result = a2;
    result[2] = 0;
    result[1] = (v12 << 8) | 0xDu;
    *((_QWORD *)v11 + 1) = result;
  }
  return result;
}

void *sub_1C4F7E2C0(int a1, uint64_t a2, llvm::Type *a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  return sub_1C6138E7C(a1 + 8, a2, a3, a4, a5, a6, a7, a8, a9);
}

BOOL sub_1C4F7E2D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4849AD0(a1 + 8, a2, a3);
}

BOOL sub_1C4F7E2D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1C4849AD0(a1 + 8, a2, a3);
}

uint64_t sub_1C4F7E2E0()
{
  return 0;
}

uint64_t sub_1C4F7E2E8()
{
  return 0;
}

uint64_t sub_1C4F7E2F0()
{
  return 128;
}

uint64_t sub_1C4F7E2F8()
{
  return 1;
}

uint64_t sub_1C4F7E300()
{
  return 1;
}

uint64_t sub_1C4F7E308()
{
  return 1;
}

uint64_t sub_1C4F7E310()
{
  return 1;
}

uint64_t sub_1C4F7E318()
{
  return 1;
}

uint64_t sub_1C4F7E320()
{
  return 1;
}

uint64_t sub_1C4F7E328(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C4F7E330(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C4F7E338()
{
  return 0;
}

uint64_t sub_1C4F7E340()
{
  return 0;
}

uint64_t sub_1C4F7E348()
{
  return 1;
}

uint64_t sub_1C4F7E350()
{
  return 1;
}

uint64_t sub_1C4F7E358()
{
  return 0;
}

uint64_t sub_1C4F7E360()
{
  return 0;
}

uint64_t sub_1C4F7E368()
{
  return 0;
}

uint64_t sub_1C4F7E370(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  unint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  int v19;
  int *v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)(a1 + 8);
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = *(uint64_t **)(a2 - 8);
    v5 = v4 & 0x7FFFFFF;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (uint64_t *)(a2 - 32 * v5);
  }
  v25 = v27;
  v26 = 0x400000000;
  if (v5 >= 5)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v5, 8);
    v7 = v26;
    v9 = v25;
    v8 = v26;
  }
  else
  {
    v7 = 0;
    if (!v5)
    {
      v13 = v27;
      goto LABEL_11;
    }
    v8 = 0;
    v9 = v27;
  }
  v10 = 32 * v5;
  v11 = &v9[v8];
  do
  {
    v12 = *v6;
    v6 += 4;
    *v11++ = v12;
    v10 -= 32;
  }
  while (v10);
  v13 = v25;
LABEL_11:
  LODWORD(v26) = v7 + v5;
  v14 = sub_1C4F7EA30(v3, (int **)a2, (uint64_t)v13, (v7 + v5), 1);
  v16 = v14 < 0;
  if (v15)
    v16 = v15 < 0;
  if (!v16)
  {
    v17 = v15 < 1;
    if (!v15)
      v17 = v14 < 1;
    if (v17)
    {
      v18 = 0;
      goto LABEL_35;
    }
  }
  v19 = *(unsigned __int8 *)(a2 + 16);
  if (v19 == 60)
  {
    v18 = 4;
    goto LABEL_35;
  }
  v20 = *(int **)a2;
  if (v19 == 84)
  {
    v21 = *(_QWORD *)(a2 - 32);
    if (!v21
      || *(_BYTE *)(v21 + 16)
      || *(_QWORD *)(v21 + 24) != *(_QWORD *)(a2 + 72)
      || (sub_1C4845148((uint64_t)v3, (uint64_t ***)v21) & 1) != 0)
    {
      v18 = 40;
      goto LABEL_35;
    }
    if (*((_BYTE *)v20 + 8) == 16 && v20)
      v20 = (int *)**((_QWORD **)v20 + 2);
  }
  v22 = v20[2];
  v23 = v22;
  if (v20 && (v22 & 0xFE) == 0x12)
    v23 = *(unsigned __int8 *)(*((_QWORD *)v20 + 3) + 8);
  if (v23 >= 7)
    v18 = 1;
  else
    v18 = 3;
LABEL_35:
  if (v25 != v27)
    free(v25);
  return v18;
}

uint64_t sub_1C4F7E56C()
{
  return 0x200000001;
}

uint64_t sub_1C4F7E578()
{
  return 0;
}

uint64_t sub_1C4F7E580()
{
  return 1;
}

uint64_t sub_1C4F7E588()
{
  return 1;
}

uint64_t sub_1C4F7E590()
{
  return 1;
}

uint64_t sub_1C4F7E598(uint64_t *a1, uint64_t a2, llvm::Value *this, llvm **a4, uint64_t a5)
{
  llvm::Value *v10;
  llvm::Value *v11;
  const llvm::Value *v12;
  unsigned int PointerTypeSizeInBits;
  unint64_t v14;
  llvm **v15;
  unint64_t v16;
  unint64_t v17;
  llvm::UndefValue *AggregateElement;
  BOOL v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  llvm *v23;
  BOOL v24;
  llvm::APFloatBase *SplatValue;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v28;
  llvm::StructLayout *StructLayout;
  uint64_t v30;
  llvm::UndefValue *v31;
  BOOL v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  unsigned int v39;
  unsigned int v40;
  unint64_t v41;
  llvm::APInt **v42;
  unsigned int v43;
  llvm::APInt *v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  llvm::APInt *v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BOOL4 v54;
  BOOL v55;
  llvm::Value *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  llvm::Value *v61;
  llvm::APInt *v62;
  unsigned int v63;
  llvm **v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;

  v10 = llvm::Value::stripPointerCasts(this);
  if (*((unsigned __int8 *)v10 + 16) >= 4u)
    v11 = 0;
  else
    v11 = v10;
  PointerTypeSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits(*a1, *(_QWORD *)this);
  v67 = PointerTypeSizeInBits;
  if (PointerTypeSizeInBits > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v66, 0, 0);
  else
    v66 = 0;
  v64 = a4;
  v65 = a2 | 4;
  if (a5)
  {
    v61 = v11;
    v14 = 0;
    v15 = &a4[a5];
    while (1)
    {
      v16 = v14;
      v17 = v65 & 0xFFFFFFFFFFFFFFF8;
      if ((v65 & 4) == 0 || !v17)
      {
        AggregateElement = *v64;
        if (*v64)
          v19 = *((_BYTE *)*v64 + 16) == 16;
        else
          v19 = 0;
        if (!v19)
          AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
        v22 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
        v20 = (unsigned int *)((char *)AggregateElement + 24);
        v21 = v22;
        if (v20[2] < 0x41)
          v21 = v20;
        v17 = *(_QWORD *)(*(_QWORD *)(v17 + 16) + 8 * *v21);
      }
      v23 = *a4;
      if (*a4)
        v24 = *((_BYTE *)*a4 + 16) == 16;
      else
        v24 = 0;
      if (!v24)
      {
        SplatValue = llvm::getSplatValue(*a4, v12);
        if (SplatValue)
        {
          if (*((_BYTE *)SplatValue + 16) == 16)
            v23 = SplatValue;
          else
            v23 = 0;
        }
        else
        {
          v23 = 0;
        }
      }
      v26 = v65 & 0xFFFFFFFFFFFFFFF8;
      if ((v65 & 4) != 0 || !v26)
        break;
      v27 = (unsigned int *)((char *)v23 + 24);
      if (*((_DWORD *)v23 + 8) >= 0x41u)
        v27 = *(unsigned int **)v27;
      v28 = *v27;
      StructLayout = llvm::DataLayout::getStructLayout((llvm::DataLayout *)*a1, (llvm::StructType *)(v65 & 0xFFFFFFFFFFFFFFF8));
      llvm::APInt::operator+=((uint64_t)&v66, *((_QWORD *)StructLayout + v28 + 2));
LABEL_61:
      v14 = v16;
LABEL_62:
      ++a4;
      sub_1C4843D7C((uint64_t)&v64);
      if (a4 == v15)
      {
        if (v67 <= 0x3F)
        {
          v57 = (uint64_t)(v66 << -(char)v67) >> -(char)v67;
          v56 = v61;
        }
        else
        {
          v56 = v61;
          if (v67 == 64)
            v57 = v66;
          else
            v57 = *(_QWORD *)v66;
        }
        v58 = (unint64_t)v56 | v57;
        v55 = v14 <= 1 && v58 == 0;
        goto LABEL_85;
      }
    }
    if (*(_BYTE *)(v17 + 8) == 19)
      goto LABEL_88;
    v30 = *a1;
    if (!v26 || (v65 & 4) == 0)
    {
      v31 = *v64;
      if (*v64)
        v32 = *((_BYTE *)*v64 + 16) == 16;
      else
        v32 = 0;
      if (!v32)
        v31 = llvm::Constant::getAggregateElement(v31, 0);
      v35 = (unsigned int *)*((_QWORD *)v31 + 3);
      v33 = (unsigned int *)((char *)v31 + 24);
      v34 = v35;
      if (v33[2] < 0x41)
        v34 = v33;
      v26 = *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * *v34);
    }
    sub_1C4768AD0(v30, v26);
    v37 = (unint64_t)(v36 + 7) >> 3;
    llvm::DataLayout::getAlignment(v30, v26);
    v14 = ((1 << v38) + v37 - 1) & -(1 << v38);
    if (!v23)
    {
      if (v16)
      {
LABEL_88:
        v59 = 1;
        goto LABEL_89;
      }
      goto LABEL_62;
    }
    v39 = *((_DWORD *)v23 + 8);
    if (v39 < PointerTypeSizeInBits)
    {
      llvm::APInt::sext((llvm *)((char *)v23 + 24), PointerTypeSizeInBits, (llvm::APInt *)&v62);
    }
    else if (v39 > PointerTypeSizeInBits)
    {
      llvm::APInt::trunc((llvm *)((char *)v23 + 24), PointerTypeSizeInBits, (llvm::APInt *)&v62);
    }
    else
    {
      sub_1C5DD14E0((uint64_t)&v62, (uint64_t)v23 + 24);
    }
    v40 = v63;
    if (v63 > 0x40)
    {
      llvm::APInt::tcMultiplyPart(v62, (unint64_t *)v62, (const unint64_t *)v14, 0, ((unint64_t)v63 + 63) >> 6, ((unint64_t)v63 + 63) >> 6, 0);
      v40 = v63;
      if (v63)
      {
LABEL_49:
        v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v40;
        if (v40 >= 0x41)
        {
          v42 = (llvm::APInt **)((char *)v62 + 8 * (((unint64_t)v40 + 63) >> 6) - 8);
          goto LABEL_51;
        }
LABEL_50:
        v42 = &v62;
LABEL_51:
        *v42 = (llvm::APInt *)((unint64_t)*v42 & v41);
        v43 = v63;
        v44 = v62;
        v63 = 0;
        v45 = v67;
        if (v67 >= 0x41)
        {
          v47 = 0;
          v48 = (unint64_t *)v66;
          v49 = ((unint64_t)v67 + 63) >> 6;
          v50 = v62;
          v51 = v49;
          do
          {
            v52 = *(_QWORD *)v50;
            v50 = (llvm::APInt *)((char *)v50 + 8);
            v53 = v52 + *v48;
            v54 = v53 + 1 <= *v48;
            if (v47)
            {
              ++v53;
              v47 = v54;
            }
            else
            {
              v47 = v53 < *v48;
            }
            *v48++ = v53;
            --v51;
          }
          while (v51);
          *(_QWORD *)(v66 + 8 * (v49 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v45;
        }
        else
        {
          if (v67)
            v46 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v67;
          else
            v46 = 0;
          v66 = v46 & ((unint64_t)v62 + v66);
        }
        if (v43 >= 0x41 && v44)
          MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
        if (v63 >= 0x41 && v62)
          MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
        goto LABEL_61;
      }
    }
    else
    {
      v62 = (llvm::APInt *)((_QWORD)v62 * v14);
      if (v63)
        goto LABEL_49;
    }
    v41 = 0;
    goto LABEL_50;
  }
  v55 = v11 == 0;
LABEL_85:
  v59 = !v55;
LABEL_89:
  if (v67 >= 0x41 && v66)
    MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
  return v59;
}

uint64_t sub_1C4F7EA30(uint64_t *a1, int **this, uint64_t a3, uint64_t a4, int a5)
{
  llvm::ShuffleVectorInst *v6;
  unsigned int v8;
  int v9;
  uint64_t v10;
  llvm::ShuffleVectorInst *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  llvm::Type *****v20;
  llvm::Type ***v21;
  int *v22;
  int8x8_t **v23;
  int v25;
  int8x8_t **v26;
  int v27;
  unint64_t v28;
  int8x8_t **v29;
  int v30;
  uint64_t v31;
  int8x8_t **v32;
  uint64_t v33;
  int8x8_t **v34;
  int8x8_t *v35;
  BOOL v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int *v44;
  char v45;
  char v46;
  uint64_t v47;
  int *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  llvm::Value **v52;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  int **v61;
  uint64_t v62;
  char v63[2];
  int v64;
  llvm::Type *v65[2];
  int v66[2];
  int8x8_t *v67;
  void *v68;
  uint64_t v69;
  int8x8_t *v70;
  void *v71;
  uint64_t v72;
  void *v73;
  _QWORD v74[8];

  v6 = (llvm::ShuffleVectorInst *)this;
  v74[7] = *MEMORY[0x1E0C80C00];
  v8 = *((unsigned __int8 *)this + 16);
  v9 = v8 - 28;
  if (v8 < 0x1C)
    goto LABEL_16;
  if (v8 == 33 || v8 == 39)
    goto LABEL_9;
  if (v8 == 84)
  {
    v10 = (uint64_t)*(this - 4);
    if (!v10
      || *(_BYTE *)(v10 + 16)
      || *(int **)(v10 + 24) != this[9]
      || (v11 = (llvm::ShuffleVectorInst *)this, (*(_BYTE *)(v10 + 33) & 0x20) == 0))
    {
LABEL_9:
      v12 = (uint64_t)*(this - 4);
      if (!v12 || *(_BYTE *)(v12 + 16) || *(int **)(v12 + 24) != this[9])
      {
        if (v8 == 84)
        {
          v13 = 0;
        }
        else if (v8 == 39)
        {
          v13 = (*((_DWORD *)this + 20) + 1);
        }
        else
        {
          v13 = 2;
        }
        v14 = 0;
        v15 = *((_DWORD *)this + 5);
        v16 = -(uint64_t)(v15 & 0x7FFFFFF);
        if (v15 < 0)
        {
          v61 = &this[-4 * (v15 & 0x7FFFFFF)];
          v62 = (uint64_t)*(v61 - 1);
          if ((v62 & 0xFFFFFFFF0) != 0)
            v14 = *((_DWORD *)v61 - 3) - *(_DWORD *)((char *)v61 - v62);
          else
            v14 = 0;
        }
        return ((-32 * v13 + 32 * (unint64_t)-v14 - 32 * v16 - 32) >> 5) + 1;
      }
      if (sub_1C4845148((uint64_t)a1, (uint64_t ***)*(this - 4)))
        return *(unsigned int *)(*(_QWORD *)(v12 + 24) + 12);
      return 1;
    }
  }
  else
  {
LABEL_16:
    v11 = 0;
  }
  v18 = *((_DWORD *)this + 5);
  v19 = v18 & 0x7FFFFFF;
  if ((v18 & 0x7FFFFFF) == 1)
  {
    if ((v18 & 0x40000000) != 0)
      v20 = (llvm::Type *****)*(this - 1);
    else
      v20 = (llvm::Type *****)(this - 4);
    v21 = **v20;
  }
  else
  {
    v21 = 0;
  }
  v22 = *this;
  if (v8 <= 0x1B)
  {
    if (v8 != 5)
      return 1;
    v9 = *((unsigned __int16 *)this + 9);
  }
  v17 = 0;
  switch(v9)
  {
    case 1:
    case 2:
    case 3:
    case 55:
      if (a5)
        v36 = v9 == 55;
      else
        v36 = 0;
      return !v36;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
      if ((v18 & 0x40000000) != 0)
        v23 = (int8x8_t **)*(this - 1);
      else
        v23 = (int8x8_t **)&this[-4 * v19];
      llvm::TargetTransformInfo::getOperandInfo(*v23, (const llvm::Value *)v65);
      if (v9 != 12)
      {
        v25 = *((_DWORD *)v6 + 5);
        if ((v25 & 0x40000000) != 0)
          v26 = (int8x8_t **)*((_QWORD *)v6 - 1);
        else
          v26 = (int8x8_t **)((char *)v6 - 32 * (v25 & 0x7FFFFFF));
        llvm::TargetTransformInfo::getOperandInfo(v26[4], (const llvm::Value *)&v67);
      }
      v27 = *((_DWORD *)v6 + 5);
      if ((v27 & 0x40000000) != 0)
      {
        v29 = (int8x8_t **)*((_QWORD *)v6 - 1);
        v28 = v27 & 0x7FFFFFF;
      }
      else
      {
        v28 = v27 & 0x7FFFFFF;
        v29 = (int8x8_t **)((char *)v6 - 32 * v28);
      }
      v68 = &v70;
      v69 = 0x200000000;
      if (v28 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, (uint64_t)&v70, v28, 8);
        v30 = v69;
        v32 = (int8x8_t **)v68;
        v31 = v69;
      }
      else
      {
        if (!v28)
        {
          if ((v9 - 19) >= 6)
            return 1;
          else
            return 4;
        }
        v30 = 0;
        v31 = 0;
        v32 = &v70;
      }
      v33 = 32 * v28;
      v34 = &v32[v31];
      do
      {
        v35 = *v29;
        v29 += 4;
        *v34++ = v35;
        v33 -= 32;
      }
      while (v33);
      LODWORD(v69) = v30 + v28;
      if ((v9 - 19) >= 6)
        v17 = 1;
      else
        v17 = 4;
      if (v68 != &v70)
        free(v68);
      return v17;
    case 31:
      if (*((_BYTE *)*(this - 4) + 16) != 16)
        return 1;
      v37 = this[5];
      v38 = *(_QWORD *)(*((_QWORD *)v37 + 7) + 80);
      v39 = v38 ? v38 - 24 : 0;
      return v37 != (int *)v39 || (*((_WORD *)this + 9) & 0x40) != 0;
    case 34:
      v36 = v8 == 62;
      v50 = 3;
      if (v36)
        v50 = 8;
      v51 = (uint64_t)this[v50];
      if ((v18 & 0x40000000) != 0)
        v52 = (llvm::Value **)*((_QWORD *)v6 - 1);
      else
        v52 = (llvm::Value **)((char *)v6 - 32 * v19);
      return sub_1C4F7E598(a1, v51, *v52, (llvm **)(a3 + 8), a4 - 1);
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
      if (v8 <= 0x1B)
        v6 = 0;
      llvm::TargetTransformInfo::getCastContextHint((uint64_t)v6);
      return sub_1C4848CBC(a1, v9, (llvm::Type ***)v22, v21);
    case 56:
      llvm::IntrinsicCostAttributes::IntrinsicCostAttributes((uint64_t)&v68, (*(this - 4))[9], (uint64_t)v11, 0, 1);
      v17 = sub_1C4846F4C((uint64_t)a1, (uint64_t)&v68);
      if (v73 != v74)
        free(v73);
      if (v71 != &v72)
        free(v71);
      return v17;
    case 57:
      *(_QWORD *)v66 = 0;
      v67 = 0;
      v68 = &v67;
      v69 = (uint64_t)v66;
      if ((sub_1C4848F80((_QWORD **)&v68, (uint64_t)this) & 1) != 0
        || (v65[0] = (llvm::Type *)&v67,
            v65[1] = (llvm::Type *)v66,
            (sub_1C4849098((_QWORD **)v65, (uint64_t)v6) & 1) != 0))
      {
        llvm::TargetTransformInfo::getOperandInfo(v67, (const llvm::Value *)v65);
        llvm::TargetTransformInfo::getOperandInfo(*(int8x8_t **)v66, (const llvm::Value *)&v64);
        v68 = &v70;
        v70 = v67;
        v71 = *(void **)v66;
        v69 = 0x200000002;
        sub_1C48491B0((uint64_t)v63, (unsigned __int8 *)v6);
        if (v68 != &v70)
          free(v68);
      }
      return 1;
    case 63:
      if (v8 != 91)
        return 1;
      LODWORD(v65[0]) = 0;
      LODWORD(v67) = 0;
      v40 = (uint64_t *)*(this - 8);
      v41 = *v40;
      v42 = *(unsigned int *)(*v40 + 32);
      v43 = *((unsigned int *)this + 18);
      if ((_DWORD)v42 != (_DWORD)v43)
      {
        if (v42 < v43
          && (llvm::ShuffleVectorInst::isIdentityWithPadding((llvm::ShuffleVectorInst *)this) & 1) != 0)
        {
          return 0;
        }
        if (*((_BYTE *)v22 + 8) != 19)
        {
          v60 = (int *)*((_QWORD *)v6 + 8);
          if ((llvm::ShuffleVectorInst::isExtractSubvectorMask(v60, v43, v42, (int *)&v67) & 1) != 0)
            return 1;
          if (*((_BYTE *)v22 + 8) != 19
            && llvm::ShuffleVectorInst::isInsertSubvectorMask(v60, v43, *(_DWORD *)(v41 + 32), (unsigned int *)v65, &v67))
          {
LABEL_120:
            if ((v22[2] & 0xFE) == 0x12)
              v22 = (int *)**((_QWORD **)v22 + 2);
            llvm::FixedVectorType::get((llvm::FixedVectorType *)v22, (llvm::Type *)LODWORD(v65[0]));
            return 1;
          }
        }
        v64 = 0;
        if (!llvm::ShuffleVectorInst::isReplicationMask(v6, v66, &v64))
        {
          if (a5)
            return 1;
          else
            return -1;
        }
        v54 = *((_DWORD *)v6 + 18);
        LODWORD(v69) = v54;
        if (v54 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v68, 0, 0);
          v55 = *((_DWORD *)v6 + 18);
          v54 = v69;
          if (v55)
          {
LABEL_107:
            v56 = 0;
            v57 = *((_QWORD *)v6 + 8);
            v58 = 4 * v55;
            do
            {
              if (*(_DWORD *)(v57 + 4 * v56) != -1)
              {
                v59 = 1 << v56;
                if (v54 > 0x40)
                  *((_QWORD *)v68 + (v56 >> 6)) |= v59;
                else
                  v68 = (void *)((unint64_t)v68 | v59);
              }
              ++v56;
              v58 -= 4;
            }
            while (v58);
          }
        }
        else
        {
          v68 = 0;
          v55 = v54;
          if (v54)
            goto LABEL_107;
        }
        if (v54 >= 0x41 && v68)
          MEMORY[0x1CAA32F9C](v68, 0x1000C8000313F17);
        return 1;
      }
      v44 = this[8];
      if ((sub_1C53EC390(v44, *(unsigned int *)(*v40 + 32), *(_DWORD *)(*v40 + 32)) & 1) != 0)
        return 0;
      if ((llvm::ShuffleVectorInst::isReverseMask(v44, v42) & 1) != 0
        || (llvm::ShuffleVectorInst::isSelectMask(v44, v42) & 1) != 0
        || (llvm::ShuffleVectorInst::isTransposeMask(v44, v42) & 1) != 0
        || (llvm::ShuffleVectorInst::isZeroEltSplatMask(v44, v42) & 1) != 0)
      {
        return 1;
      }
      if ((_DWORD)v42)
      {
        v45 = 0;
        v46 = 0;
        v47 = 4 * v42;
        v48 = v44;
        while (1)
        {
          v49 = *v48;
          if (*v48 != -1)
          {
            v45 |= v49 < (int)v42;
            v46 |= v49 >= (int)v42;
            if ((v45 & 1) != 0 && (v46 & 1) != 0)
              goto LABEL_130;
          }
          ++v48;
          v47 -= 4;
          if (!v47)
            goto LABEL_128;
        }
      }
      v46 = 0;
      v45 = 0;
LABEL_128:
      v17 = 1;
      if ((v45 & 1) == 0 && (v46 & 1) == 0)
      {
LABEL_130:
        if (*((_BYTE *)v22 + 8) == 19
          || !llvm::ShuffleVectorInst::isInsertSubvectorMask(v44, v42, v42, (unsigned int *)v65, &v67))
        {
          return 1;
        }
        goto LABEL_120;
      }
      return v17;
    case 64:
    case 67:
      return v17;
    default:
      return 1;
  }
}

uint64_t sub_1C4F7F1CC()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Recognize reduction patterns.";
  v1.n128_u64[1] = 29;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED7F4710, "costmodel-reduxcost", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED7F4710, &dword_1C475E000);
}

uint64_t llvm::Trace::getFunction(llvm::Trace *this)
{
  return *(_QWORD *)(**(_QWORD **)this + 56);
}

uint64_t llvm::Trace::getModule(llvm::Trace *this)
{
  return *(_QWORD *)(*(_QWORD *)(**(_QWORD **)this + 56) + 40);
}

void llvm::Trace::print(llvm::Value ***this, llvm::raw_ostream *a2)
{
  llvm::raw_ostream *v2;
  llvm::Value *v4;
  void *v5;
  llvm::raw_ostream *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value **v11;
  llvm::Value *v12;
  int v13;
  int v14;
  size_t *v15;
  const void *v16;
  size_t v17;
  size_t v18;
  _WORD *v19;
  llvm::Value **v20;
  llvm::Value **v21;
  _WORD *v22;
  _BYTE *v23;
  void *v24;

  v2 = a2;
  v4 = (llvm::Value *)*((_QWORD *)**this + 7);
  v5 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v5 > 0x15uLL)
  {
    qmemcpy(v5, "; Trace from function ", 22);
    *((_QWORD *)a2 + 4) += 22;
    v6 = a2;
  }
  else
  {
    v6 = llvm::raw_ostream::write(a2, "; Trace from function ", 0x16uLL);
  }
  if ((*((_BYTE *)v4 + 23) & 0x10) == 0)
  {
    v19 = (_WORD *)*((_QWORD *)v6 + 4);
    goto LABEL_15;
  }
  v7 = ***(_QWORD ***)v4;
  v8 = *(_QWORD *)(v7 + 152);
  v9 = *(unsigned int *)(v7 + 168);
  if ((_DWORD)v9)
  {
    LODWORD(v10) = (v9 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    v11 = (llvm::Value **)(v8 + 16 * v10);
    v12 = *v11;
    if (*v11 == v4)
      goto LABEL_11;
    v13 = 1;
    while (v12 != (llvm::Value *)-4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(llvm::Value **)(v8 + 16 * v10);
      if (v12 == v4)
      {
        v11 = (llvm::Value **)(v8 + 16 * v10);
        goto LABEL_11;
      }
    }
  }
  v11 = (llvm::Value **)(v8 + 16 * v9);
LABEL_11:
  v15 = (size_t *)v11[1];
  v18 = *v15;
  v16 = v15 + 2;
  v17 = v18;
  v19 = (_WORD *)*((_QWORD *)v6 + 4);
  if (v18 <= *((_QWORD *)v6 + 3) - (_QWORD)v19)
  {
    if (v17)
    {
      memcpy(v19, v16, v17);
      v19 = (_WORD *)(*((_QWORD *)v6 + 4) + v17);
      *((_QWORD *)v6 + 4) = v19;
    }
  }
  else
  {
    v6 = llvm::raw_ostream::write(v6, (const char *)v16, v17);
    v19 = (_WORD *)*((_QWORD *)v6 + 4);
  }
LABEL_15:
  if (*((_QWORD *)v6 + 3) - (_QWORD)v19 > 9uLL)
  {
    v19[4] = 2618;
    *(_QWORD *)v19 = *(_QWORD *)", blocks:\n";
    *((_QWORD *)v6 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v6, ", blocks:\n", 0xAuLL);
  }
  v20 = *this;
  v21 = this[1];
  if (*this != v21)
  {
    do
    {
      v22 = (_WORD *)*((_QWORD *)v2 + 4);
      if (*((_QWORD *)v2 + 3) - (_QWORD)v22 > 1uLL)
      {
        *v22 = 8251;
        *((_QWORD *)v2 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v2, "; ", 2uLL);
      }
      llvm::Value::printAsOperand(*v20, v2, 1, *(const llvm::Module **)(*((_QWORD *)**this + 7) + 40));
      v23 = (_BYTE *)*((_QWORD *)v2 + 4);
      if (*((_BYTE **)v2 + 3) == v23)
      {
        llvm::raw_ostream::write(v2, "\n", 1uLL);
      }
      else
      {
        *v23 = 10;
        ++*((_QWORD *)v2 + 4);
      }
      ++v20;
    }
    while (v20 != v21);
  }
  v24 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v24 > 0x19uLL)
  {
    qmemcpy(v24, "; Trace parent function: \n", 26);
    *((_QWORD *)v2 + 4) += 26;
  }
  else
  {
    v2 = llvm::raw_ostream::write(v2, "; Trace parent function: \n", 0x1AuLL);
  }
  llvm::Value::print(v4, v2, 0);
}

void llvm::Trace::dump(llvm::Trace *this)
{
  llvm *v2;

  v2 = llvm::dbgs(this);
  llvm::Trace::print((llvm::Value ***)this, v2);
}

BOOL llvm::TypeBasedAAResult::alias(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return !byte_1ED82EBC0 || sub_1C4F7FD38(*(_QWORD *)(a2 + 16), *(_QWORD *)(a3 + 16), 0);
}

BOOL llvm::TypeBasedAAResult::Aliases(llvm::TypeBasedAAResult *this, const llvm::MDNode *a2, const llvm::MDNode *a3)
{
  return sub_1C4F7FD38((uint64_t)a2, (uint64_t)a3, 0);
}

uint64_t llvm::TypeBasedAAResult::pointsToConstantMemory(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (byte_1ED82EBC0)
  {
    v2 = *(_QWORD *)(a2 + 16);
    if (v2)
    {
      v3 = *(unsigned int *)(v2 + 8);
      v4 = (unsigned __int8 **)(v2 - 8 * v3);
      if (**v4 - 4 >= 0x1F)
      {
        if (v3 >= 3)
        {
          v6 = v4[2];
          if (*v6 == 1)
          {
            v7 = *((_QWORD *)v6 + 16);
            if (*(_BYTE *)(v7 + 16) == 16)
            {
              v8 = (_QWORD *)(v7 + 24);
              if (*(_DWORD *)(v7 + 32) >= 0x41u)
                v8 = (_QWORD *)*v8;
              if ((*(_BYTE *)v8 & 1) != 0)
                return 1;
            }
          }
        }
      }
      else if (v3 >= 3)
      {
        v9 = *(_QWORD *)(a2 + 16);
        if ((sub_1C4F7F650((uint64_t)&v9) & 1) != 0)
          return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1C4F7F650(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if (sub_1C4F80790(a1))
    v2 = 4;
  else
    v2 = 3;
  v3 = *(unsigned int *)(*(_QWORD *)a1 + 8);
  if (v3 <= v2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)a1 - 8 * v3 + 8 * v2);
  if (*(_BYTE *)v4 != 1)
    return 0;
  v5 = *(_QWORD *)(v4 + 128);
  if (*(_BYTE *)(v5 + 16) != 16)
    return 0;
  v6 = (_QWORD *)(v5 + 24);
  if (*(_DWORD *)(v5 + 32) >= 0x41u)
    v6 = (_QWORD *)*v6;
  return *(_BYTE *)v6 & 1;
}

uint64_t llvm::TypeBasedAAResult::getModRefBehavior(llvm::TypeBasedAAResult *this, const llvm::CallBase *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  const llvm::CallBase **v7;
  const llvm::CallBase *v8;
  const llvm::CallBase **v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 **v19;
  const llvm::CallBase **v20;
  const llvm::CallBase *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  _QWORD *v24;
  const llvm::CallBase *v25;

  if (!byte_1ED82EBC0 || (*((_BYTE *)a2 + 23) & 0x20) == 0)
    return 63;
  v2 = ***(_QWORD ***)a2;
  v25 = a2;
  v3 = *(_DWORD *)(v2 + 2496);
  if (!v3)
  {
    v20 = 0;
LABEL_26:
    v7 = (const llvm::CallBase **)sub_1C541AB24(v2 + 2480, (uint64_t)&v25, (uint64_t *)&v25, v20);
    v21 = v25;
    v7[3] = 0;
    v7[4] = 0;
    *v7 = v21;
    v7[1] = (const llvm::CallBase *)(v7 + 3);
    v7[2] = (const llvm::CallBase *)0x100000000;
    goto LABEL_13;
  }
  v4 = *(_QWORD *)(v2 + 2480);
  v5 = v3 - 1;
  v6 = v5 & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (const llvm::CallBase **)(v4 + 40 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != (const llvm::CallBase *)-4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == (const llvm::CallBase *)-8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (const llvm::CallBase **)(v4 + 40 * v6);
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_13;
    }
    if (v9)
      v20 = v9;
    else
      v20 = v7;
    goto LABEL_26;
  }
LABEL_13:
  v13 = *((unsigned int *)v7 + 4);
  if ((_DWORD)v13)
  {
    v14 = (_QWORD *)((char *)v7[1] + 8);
    v15 = 16 * v13;
    result = 63;
    while (*((_DWORD *)v14 - 2) != 1)
    {
      v14 += 2;
      v15 -= 16;
      if (!v15)
        return result;
    }
    v17 = *v14;
    if (v17)
    {
      v18 = *(unsigned int *)(v17 + 8);
      v19 = (unsigned __int8 **)(v17 - 8 * v18);
      if (**v19 - 4 > 0x1E)
      {
        if (v18 >= 3)
        {
          v22 = v19[2];
          if (*v22 == 1)
          {
            v23 = *((_QWORD *)v22 + 16);
            if (*(_BYTE *)(v23 + 16) == 16)
            {
              v24 = (_QWORD *)(v23 + 24);
              if (*(_DWORD *)(v23 + 32) >= 0x41u)
                v24 = (_QWORD *)*v24;
              if ((*(_BYTE *)v24 & 1) != 0)
                return 61;
            }
          }
        }
      }
      else if (v18 > 2)
      {
        v25 = (const llvm::CallBase *)v17;
        if ((sub_1C4F7F650((uint64_t)&v25) & 1) != 0)
          return 61;
      }
    }
  }
  return 63;
}

uint64_t llvm::TypeBasedAAResult::getModRefBehavior(llvm::TypeBasedAAResult *this, const Function *a2)
{
  return 63;
}

uint64_t llvm::TypeBasedAAResult::getModRefInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  if (!byte_1ED82EBC0)
    return 7;
  v3 = *(_QWORD *)(a3 + 16);
  if (!v3 || (*(_BYTE *)(a2 + 23) & 0x20) == 0)
    return 7;
  v4 = ***(_QWORD ***)a2;
  v21 = a2;
  v5 = *(_DWORD *)(v4 + 2496);
  if (!v5)
  {
    v19 = 0;
LABEL_25:
    v9 = sub_1C541AB24(v4 + 2480, (uint64_t)&v21, &v21, v19);
    v20 = v21;
    v9[3] = 0;
    v9[4] = 0;
    *v9 = v20;
    v9[1] = v9 + 3;
    v9[2] = 0x100000000;
    goto LABEL_14;
  }
  v6 = *(_QWORD *)(v4 + 2480);
  v7 = v5 - 1;
  v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
  v9 = (_QWORD *)(v6 + 40 * v8);
  v10 = *v9;
  if (*v9 != a2)
  {
    v11 = 0;
    v12 = 1;
    while (v10 != -4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (_QWORD *)(v6 + 40 * v8);
      v10 = *v9;
      if (*v9 == a2)
        goto LABEL_14;
    }
    if (v11)
      v19 = v11;
    else
      v19 = v9;
    goto LABEL_25;
  }
LABEL_14:
  v15 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v15)
    return 7;
  v16 = (uint64_t *)(v9[1] + 8);
  v17 = 16 * v15;
  while (*((_DWORD *)v16 - 2) != 1)
  {
    v16 += 2;
    v17 -= 16;
    if (!v17)
      return 7;
  }
  if (!*v16 || sub_1C4F7FD38(v3, *v16, 0))
    return 7;
  return 4;
}

{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;

  if (!byte_1ED82EBC0 || (*(_BYTE *)(a2 + 23) & 0x20) == 0)
    return 7;
  v4 = ***(_QWORD ***)a2;
  v38 = a2;
  v5 = *(_DWORD *)(v4 + 2496);
  if (!v5)
  {
    v34 = 0;
LABEL_38:
    v9 = sub_1C541AB24(v4 + 2480, (uint64_t)&v38, &v38, v34);
    v35 = v38;
    v9[3] = 0;
    v9[4] = 0;
    *v9 = v35;
    v9[1] = v9 + 3;
    v9[2] = 0x100000000;
    goto LABEL_13;
  }
  v6 = *(_QWORD *)(v4 + 2480);
  v7 = v5 - 1;
  v8 = v7 & ((a2 >> 4) ^ (a2 >> 9));
  v9 = (_QWORD *)(v6 + 40 * v8);
  v10 = *v9;
  if (*v9 != a2)
  {
    v11 = 0;
    v12 = 1;
    while (v10 != -4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (_QWORD *)(v6 + 40 * v8);
      v10 = *v9;
      if (*v9 == a2)
        goto LABEL_13;
    }
    if (v11)
      v34 = v11;
    else
      v34 = v9;
    goto LABEL_38;
  }
LABEL_13:
  v15 = *((unsigned int *)v9 + 4);
  if (!(_DWORD)v15)
    return 7;
  v16 = (uint64_t *)(v9[1] + 8);
  v17 = 16 * v15;
  result = 7;
  while (*((_DWORD *)v16 - 2) != 1)
  {
    v16 += 2;
    v17 -= 16;
    if (!v17)
      return result;
  }
  v19 = *v16;
  if (!*v16 || (*(_BYTE *)(a3 + 23) & 0x20) == 0)
    return 7;
  v20 = ***(_QWORD ***)a3;
  v38 = a3;
  v21 = *(_DWORD *)(v20 + 2496);
  if (!v21)
  {
    v36 = 0;
LABEL_45:
    v25 = sub_1C541AB24(v20 + 2480, (uint64_t)&v38, &v38, v36);
    v37 = v38;
    v25[3] = 0;
    v25[4] = 0;
    *v25 = v37;
    v25[1] = v25 + 3;
    v25[2] = 0x100000000;
    goto LABEL_30;
  }
  v22 = *(_QWORD *)(v20 + 2480);
  v23 = v21 - 1;
  v24 = v23 & ((a3 >> 4) ^ (a3 >> 9));
  v25 = (_QWORD *)(v22 + 40 * v24);
  v26 = *v25;
  if (*v25 != a3)
  {
    v27 = 0;
    v28 = 1;
    while (v26 != -4096)
    {
      if (v27)
        v29 = 0;
      else
        v29 = v26 == -8192;
      if (v29)
        v27 = v25;
      v30 = v24 + v28++;
      v24 = v30 & v23;
      v25 = (_QWORD *)(v22 + 40 * v24);
      v26 = *v25;
      if (*v25 == a3)
        goto LABEL_30;
    }
    if (v27)
      v36 = v27;
    else
      v36 = v25;
    goto LABEL_45;
  }
LABEL_30:
  v31 = *((unsigned int *)v25 + 4);
  if (!(_DWORD)v31)
    return 7;
  v32 = (uint64_t *)(v25[1] + 8);
  v33 = 16 * v31;
  while (*((_DWORD *)v32 - 2) != 1)
  {
    v32 += 2;
    v33 -= 16;
    if (!v33)
      return 7;
  }
  if (!*v32 || sub_1C4F7FD38(v19, *v32, 0))
    return 7;
  return 4;
}

BOOL llvm::MDNode::isTBAAVtableAccess(llvm::MDNode *this)
{
  uint64_t v1;
  unsigned __int8 **v2;
  _BYTE *v3;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *((unsigned int *)this + 2);
  v2 = (unsigned __int8 **)((char *)this - 8 * v1);
  v3 = *v2;
  if (v1 < 3 || **v2 - 4 >= 0x1F)
  {
    if (!(_DWORD)v1 || **v2)
      return 0;
  }
  else
  {
    v5 = v2[1];
    if (v5)
    {
      switch(*v5)
      {
        case 4u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
        case 0x22u:
          break;
        default:
          v5 = 0;
          break;
      }
    }
    v6 = 0;
    v7 = *((unsigned int *)v5 + 2);
    if (v7 >= 3)
      v6 = 2 * (**(unsigned __int8 **)&v5[-8 * v7] - 4 < 0x1F);
    v3 = *(_BYTE **)&v5[8 * v6 + -8 * v7];
    if (*v3)
      return 0;
  }
  v8 = (_QWORD *)*((_QWORD *)v3 + 1);
  if (*v8 != 14)
    return 0;
  v9 = v8[3];
  v10 = *(_QWORD *)((char *)v8 + 30);
  return v9 == 0x7020656C62617476 && v10 == 0x7265746E696F7020;
}

uint64_t llvm::MDNode::getMostGenericTBAA(llvm::MDNode *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  uint64_t v4;

  v4 = 0;
  sub_1C4F7FD38((uint64_t)this, (uint64_t)a2, &v4);
  return v4;
}

BOOL sub_1C4F7FD38(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _BYTE *v6;
  _BYTE *v7;
  int v8;
  _OWORD *v9;
  int v10;
  unsigned int v11;
  _BYTE *v12;
  int v13;
  unsigned int v14;
  int v15;
  _OWORD *v16;
  int v17;
  unsigned int v18;
  _BYTE *v19;
  int v20;
  unsigned int v21;
  _BOOL8 result;
  uint64_t v23;
  int v24;
  int v25;
  _BYTE *v26;
  int v27;
  _BYTE *v28;
  _BYTE *v29;
  _BYTE *v30;
  uint64_t v31;
  _OWORD v32[2];
  void *v33;
  uint64_t v34;
  _BYTE v35[32];
  uint64_t v36;
  _OWORD v37[2];
  void *v38;
  uint64_t v39;
  _QWORD v40[5];

  v40[4] = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
  {
    if (a3)
      *a3 = a1;
    return 1;
  }
  if (!a1 || !a2)
    goto LABEL_51;
  v6 = *(_BYTE **)(a1 - 8 * *(unsigned int *)(a1 + 8) + 8);
  if (v6)
  {
    switch(*v6)
    {
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
        break;
      default:
        v6 = 0;
        break;
    }
  }
  v7 = *(_BYTE **)(a2 - 8 * *(unsigned int *)(a2 + 8) + 8);
  if (!v7 || !v6 || *v7 - 4 > 0x1E)
  {
LABEL_51:
    if (a3)
      *a3 = 0;
    return 1;
  }
  if (v6 == v7)
    goto LABEL_48;
  v36 = 1;
  v37[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v37[1] = v37[0];
  v38 = v40;
  v39 = 0x400000000;
  v30 = v6;
  do
  {
    if ((v36 & 1) != 0)
    {
      v8 = 4;
      v9 = v37;
    }
    else
    {
      v8 = DWORD2(v37[0]);
      if (!DWORD2(v37[0]))
        goto LABEL_23;
      v9 = *(_OWORD **)&v37[0];
    }
    v10 = v8 - 1;
    v11 = v10 & ((v6 >> 4) ^ (v6 >> 9));
    v12 = (_BYTE *)*((_QWORD *)v9 + v11);
    if (v6 == v12)
LABEL_62:
      llvm::report_fatal_error((llvm *)"Cycle found in TBAA metadata.", (const char *)1);
    v13 = 1;
    while (v12 != (_BYTE *)-4096)
    {
      v14 = v11 + v13++;
      v11 = v14 & v10;
      v12 = (_BYTE *)*((_QWORD *)v9 + v11);
      if (v6 == v12)
        goto LABEL_62;
    }
LABEL_23:
    v31 = (uint64_t)v6;
    sub_1C4F80CE8((uint64_t)&v36, &v31);
    v6 = sub_1C4F80D74((uint64_t *)&v30);
    v30 = v6;
  }
  while (v6);
  v31 = 1;
  v32[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v32[1] = v32[0];
  v33 = v35;
  v34 = 0x400000000;
  v29 = v7;
  do
  {
    if ((v31 & 1) != 0)
    {
      v15 = 4;
      v16 = v32;
    }
    else
    {
      v15 = DWORD2(v32[0]);
      if (!DWORD2(v32[0]))
        goto LABEL_34;
      v16 = *(_OWORD **)&v32[0];
    }
    v17 = v15 - 1;
    v18 = v17 & ((v7 >> 4) ^ (v7 >> 9));
    v19 = (_BYTE *)*((_QWORD *)v16 + v18);
    if (v7 == v19)
      goto LABEL_62;
    v20 = 1;
    while (v19 != (_BYTE *)-4096)
    {
      v21 = v18 + v20++;
      v18 = v21 & v17;
      v19 = (_BYTE *)*((_QWORD *)v16 + v18);
      if (v7 == v19)
        goto LABEL_62;
    }
LABEL_34:
    v28 = v7;
    sub_1C4F80CE8((uint64_t)&v31, (uint64_t *)&v28);
    v7 = sub_1C4F80D74((uint64_t *)&v29);
    v29 = v7;
  }
  while (v7);
  v6 = 0;
  if ((int)v39 - 1 >= 0 && (((_DWORD)v34 - 1) & 0x80000000) == 0)
  {
    v6 = (_BYTE *)*((_QWORD *)v38 + (v39 - 1));
    if (v6 == *((_BYTE **)v33 + (v34 - 1)))
    {
      if (((((_DWORD)v34 - 2) | ((_DWORD)v39 - 2)) & 0x80000000) == 0)
      {
        v24 = v39 - 3;
        v25 = v34 - 3;
        do
        {
          v26 = (_BYTE *)*((_QWORD *)v38 + (v24 + 1));
          if (v26 != *((_BYTE **)v33 + (v25 + 1)))
            break;
          v27 = v25-- | v24--;
          v6 = v26;
        }
        while ((v27 & 0x80000000) == 0);
      }
    }
    else
    {
      v6 = 0;
    }
  }
  if (v33 != v35)
    free(v33);
  if ((v31 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v32[0], 8);
  if (v38 != v40)
    free(v38);
  if ((v36 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v37[0], 8);
  if (!v6)
    goto LABEL_51;
LABEL_48:
  LOBYTE(v36) = 0;
  if ((sub_1C4F807F4(a1, a2, (uint64_t)v6, a3, (BOOL *)&v36) & 1) != 0
    || sub_1C4F807F4(a2, a1, (uint64_t)v6, a3, (BOOL *)&v36))
  {
    return (_BYTE)v36 != 0;
  }
  if (!a3)
    return 0;
  v23 = sub_1C4F80BC4((uint64_t)v6);
  result = 0;
  *a3 = v23;
  return result;
}

void llvm::TypeBasedAA::run(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1C4F80104(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Type-Based Alias Analysis";
  *(_QWORD *)(v2 + 8) = 25;
  *(_QWORD *)(v2 + 16) = "tbaa";
  *(_QWORD *)(v2 + 24) = 4;
  *(_QWORD *)(v2 + 32) = &llvm::TypeBasedAAWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::TypeBasedAAWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::TypeBasedAAWrapperPass::doInitialization(llvm::TypeBasedAAWrapperPass *this, llvm::Module *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v3;
  if (v4)
    MEMORY[0x1CAA32FC0](v4, 0x20C4093837F09);
  return 0;
}

uint64_t llvm::TypeBasedAAWrapperPass::doFinalization(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x20C4093837F09);
  return 0;
}

llvm::AAMDNodes *llvm::AAMDNodes::shiftTBAAStruct(llvm::AAMDNodes *this, llvm::MDNode *a2, const llvm::APInt *a3)
{
  llvm::AAMDNodes *Impl;
  unint64_t v4;
  unsigned int v6;
  unint64_t i;
  _QWORD *v8;
  uint64_t v9;
  char ***v10;
  unsigned int v11;
  char **v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  llvm::ConstantInt *v17;
  unsigned int v18;
  unint64_t v19;
  llvm::Value *v20;
  llvm::ValueHandleBase *v21;
  const llvm::APInt *v22;
  _QWORD *v23;
  uint64_t v24;
  llvm::ConstantInt *v25;
  unsigned int v26;
  unint64_t v27;
  llvm::Value *v28;
  llvm::ValueHandleBase *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  unint64_t v37;
  unsigned int v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[4];

  Impl = this;
  v41[3] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v39 = v41;
    v40 = 0x300000000;
    v4 = *((unsigned int *)this + 2);
    if ((_DWORD)v4)
    {
      v6 = 0;
      for (i = 0; i < v4; i += 3)
      {
        v8 = (_QWORD *)((char *)Impl + 8 * i + -8 * *((unsigned int *)Impl + 2));
        v9 = *(_QWORD *)(*v8 + 128);
        v10 = (char ***)(v9 + 24);
        v11 = *(_DWORD *)(v9 + 32);
        v12 = (char **)(v9 + 24);
        if (v11 >= 0x41)
          v12 = *v10;
        v13 = *(_QWORD *)(v8[1] + 128);
        if (*(_DWORD *)(v13 + 32) > 0x40u)
          v14 = **(_QWORD **)(v13 + 24);
        else
          v14 = *(_QWORD *)(v13 + 24);
        if (&(*v12)[v14] > (char *)a2)
        {
          if (v11 > 0x40)
            v15 = **v10;
          else
            v15 = (char *)*v10;
          v16 = v15 - (char *)a2;
          if (v15 < (char *)a2)
          {
            v16 = 0;
            v14 = (uint64_t)&v15[v14 - (_QWORD)a2];
          }
          v17 = **(llvm::ConstantInt ***)v9;
          v18 = *(_DWORD *)(*(_QWORD *)v9 + 8);
          v38 = v18 >> 8;
          if (v18 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v37, v16, 0);
          }
          else
          {
            if (v18 <= 0xFF)
              v19 = 0;
            else
              v19 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v18);
            v37 = v19 & v16;
          }
          v21 = llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v37, a3);
          if (v38 >= 0x41 && v37)
            MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
          v23 = llvm::ValueAsMetadata::get(v21, v20);
          v24 = v40;
          if (v40 >= (unint64_t)HIDWORD(v40))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v40 + 1, 8);
            v24 = v40;
          }
          *((_QWORD *)v39 + v24) = v23;
          LODWORD(v40) = v40 + 1;
          v25 = **(llvm::ConstantInt ***)v13;
          v26 = *(_DWORD *)(*(_QWORD *)v13 + 8);
          v38 = v26 >> 8;
          if (v26 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v37, v14, 0);
          }
          else
          {
            if (v26 <= 0xFF)
              v27 = 0;
            else
              v27 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v26);
            v37 = v27 & v14;
          }
          v29 = llvm::ConstantInt::get(v25, (llvm::LLVMContext *)&v37, v22);
          if (v38 >= 0x41 && v37)
            MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
          v30 = llvm::ValueAsMetadata::get(v29, v28);
          v31 = v40;
          if (v40 >= (unint64_t)HIDWORD(v40))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v40 + 1, 8);
            v31 = v40;
          }
          *((_QWORD *)v39 + v31) = v30;
          v32 = (v40 + 1);
          LODWORD(v40) = v32;
          v33 = *((_QWORD *)Impl + i - *((unsigned int *)Impl + 2) + 2);
          if (v32 >= HIDWORD(v40))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v32 + 1, 8);
            LODWORD(v32) = v40;
          }
          *((_QWORD *)v39 + v32) = v33;
          v6 = v40 + 1;
          LODWORD(v40) = v40 + 1;
        }
      }
    }
    else
    {
      v6 = 0;
    }
    v34 = *((_QWORD *)Impl + 2);
    v35 = (uint64_t *)(v34 & 0xFFFFFFFFFFFFFFF8);
    if ((v34 & 4) != 0)
      v35 = (uint64_t *)*v35;
    Impl = (llvm::AAMDNodes *)llvm::MDTuple::getImpl(v35, v39, v6, 0, 1);
    if (v39 != v41)
      free(v39);
  }
  return Impl;
}

llvm::AAMDNodes *llvm::AAMDNodes::extendToTBAA(llvm::AAMDNodes *this, uint64_t a2)
{
  llvm::AAMDNodes *Impl;
  uint64_t v3;
  char *v4;
  const llvm::APInt *v7;
  _QWORD *v8;
  uint64_t v9;
  llvm::MDNode *v10;
  unsigned int v11;
  llvm::ConstantInt *v12;
  unsigned int v13;
  unint64_t v14;
  llvm::Value *v15;
  llvm::ValueHandleBase *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  llvm::AAMDNodes *v22;
  unint64_t v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  Impl = this;
  v3 = *((unsigned int *)this + 2);
  v4 = (char *)this - 8 * v3;
  if (v3 >= 3 && **(unsigned __int8 **)v4 - 4 <= 0x1E)
  {
    v22 = this;
    if (sub_1C4F80790((uint64_t)&v22))
    {
      if (a2 != -1)
      {
        v25 = v27;
        v26 = 0x400000000;
        sub_1C485BB4C((unsigned int *)&v25, v4, (char *)Impl);
        v8 = v25;
        v9 = *(_QWORD *)(*((_QWORD *)v25 + 3) + 128);
        v10 = (llvm::MDNode *)(v9 + 24);
        v11 = *(_DWORD *)(v9 + 32);
        if (v11 >= 0x41)
        {
          if (v11 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v9 + 24)) > 0x40)
            goto LABEL_12;
          v10 = *(llvm::MDNode **)v10;
        }
        if (*(_QWORD *)v10 == a2)
        {
LABEL_21:
          if (v8 != v27)
            free(v8);
          return Impl;
        }
LABEL_12:
        v12 = **(llvm::ConstantInt ***)v9;
        v13 = *(_DWORD *)(*(_QWORD *)v9 + 8);
        v24 = v13 >> 8;
        if (v13 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v23, a2, 0);
        }
        else
        {
          if (v13 <= 0xFF)
            v14 = 0;
          else
            v14 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v13);
          v23 = v14 & a2;
        }
        v16 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v23, v7);
        if (v24 >= 0x41 && v23)
          MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
        v17 = llvm::ValueAsMetadata::get(v16, v15);
        v18 = v25;
        *((_QWORD *)v25 + 3) = v17;
        v19 = *((_QWORD *)Impl + 2);
        v20 = (uint64_t *)(v19 & 0xFFFFFFFFFFFFFFF8);
        if ((v19 & 4) != 0)
          v20 = (uint64_t *)*v20;
        Impl = (llvm::AAMDNodes *)llvm::MDTuple::getImpl(v20, v18, v26, 0, 1);
        v8 = v25;
        goto LABEL_21;
      }
      return 0;
    }
  }
  return Impl;
}

BOOL sub_1C4F80790(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v3;
  uint64_t v4;

  v1 = *(unsigned int *)(*(_QWORD *)a1 + 8);
  if (v1 < 4)
    return 0;
  v3 = *(unsigned __int8 **)(*(_QWORD *)a1 - 8 * v1 + 8);
  if (!v3 || *v3 - 4 > 0x1E)
    return 1;
  v4 = *((unsigned int *)v3 + 2);
  if (v4 < 3)
    return 0;
  return **(unsigned __int8 **)&v3[-8 * v4] - 4 < 0x1F;
}

uint64_t sub_1C4F807F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, BOOL *a5)
{
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  unsigned __int8 *v36;
  BOOL v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;

  v41 = a1;
  v9 = (unsigned __int8 **)(a1 - 8 * *(unsigned int *)(a1 + 8));
  v10 = v9[1];
  if (v10)
  {
    switch(*v10)
    {
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
        v11 = v9[1];
        break;
      default:
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    v11 = 0;
  }
  v12 = *v9;
  if (*v9)
  {
    switch(*v12)
    {
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
        v13 = *v9;
        break;
      default:
        goto LABEL_8;
    }
  }
  else
  {
LABEL_8:
    v13 = 0;
  }
  if (v11 == v13)
  {
    if (v10)
    {
      switch(*v10)
      {
        case 4u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 9u:
        case 0xAu:
        case 0xBu:
        case 0xCu:
        case 0xDu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x20u:
        case 0x21u:
        case 0x22u:
          v14 = v9[1];
          break;
        default:
          goto LABEL_13;
      }
    }
    else
    {
LABEL_13:
      v14 = 0;
    }
    if (v14 == (unsigned __int8 *)a3)
      goto LABEL_68;
  }
  result = sub_1C4F80790((uint64_t)&v41);
  if (v12)
  {
    switch(*v12)
    {
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0xCu:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
      case 0x19u:
      case 0x1Au:
      case 0x1Bu:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
        break;
      default:
        v12 = 0;
        break;
    }
  }
  v16 = *((_QWORD *)v9[2] + 16);
  v17 = (_QWORD *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u)
    v17 = (_QWORD *)*v17;
  if (!v12)
  {
LABEL_60:
    if (!(_DWORD)result)
      return result;
    v12 = 0;
    v20 = *(unsigned __int8 **)(a2 - 8 * *(unsigned int *)(a2 + 8));
LABEL_62:
    if (v20)
      v36 = *v20 - 4 >= 0x1F ? 0 : v20;
    else
      v36 = 0;
    result = sub_1C4F810EC((uint64_t)v12, v36);
    if (!(_DWORD)result)
      return result;
LABEL_68:
    v37 = 1;
    if (a4)
      goto LABEL_69;
    goto LABEL_71;
  }
  v18 = (_QWORD *)*v17;
  v19 = a2 - 8 * *(unsigned int *)(a2 + 8);
  v20 = *(unsigned __int8 **)v19;
  if (!*(_QWORD *)v19)
    goto LABEL_24;
LABEL_22:
  switch(*v20)
  {
    case 4u:
    case 5u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
    case 0xAu:
    case 0xBu:
    case 0xCu:
    case 0xDu:
    case 0xEu:
    case 0xFu:
    case 0x10u:
    case 0x11u:
    case 0x12u:
    case 0x13u:
    case 0x14u:
    case 0x15u:
    case 0x16u:
    case 0x17u:
    case 0x18u:
    case 0x19u:
    case 0x1Au:
    case 0x1Bu:
    case 0x1Cu:
    case 0x1Du:
    case 0x1Eu:
    case 0x1Fu:
    case 0x20u:
    case 0x21u:
    case 0x22u:
      v21 = *(unsigned __int8 **)v19;
      break;
    default:
      goto LABEL_24;
  }
  while (v12 != v21)
  {
    if ((_DWORD)result)
    {
      if (v10)
      {
        switch(*v10)
        {
          case 4u:
          case 5u:
          case 6u:
          case 7u:
          case 8u:
          case 9u:
          case 0xAu:
          case 0xBu:
          case 0xCu:
          case 0xDu:
          case 0xEu:
          case 0xFu:
          case 0x10u:
          case 0x11u:
          case 0x12u:
          case 0x13u:
          case 0x14u:
          case 0x15u:
          case 0x16u:
          case 0x17u:
          case 0x18u:
          case 0x19u:
          case 0x1Au:
          case 0x1Bu:
          case 0x1Cu:
          case 0x1Du:
          case 0x1Eu:
          case 0x1Fu:
          case 0x20u:
          case 0x21u:
          case 0x22u:
            v22 = v10;
            break;
          default:
            goto LABEL_30;
        }
      }
      else
      {
LABEL_30:
        v22 = 0;
      }
      if (v12 == v22)
        goto LABEL_62;
    }
    v23 = *((unsigned int *)v12 + 2);
    if (v23 < 3)
    {
      if ((_DWORD)v23 != 2)
        goto LABEL_60;
      v24 = 0;
      v25 = -2;
LABEL_35:
      v12 = *(unsigned __int8 **)&v12[8 * v25 + 8];
      if (!v12 || *v12 - 4 >= 0x1F)
        goto LABEL_60;
      goto LABEL_53;
    }
    v26 = &v12[-8 * v23];
    if (**(unsigned __int8 **)v26 - 4 <= 0x1E)
    {
      if (v23 >= 6)
      {
        v27 = 3;
        v28 = 3;
        goto LABEL_41;
      }
      goto LABEL_60;
    }
    if (v23 <= 3)
    {
      v34 = *(_QWORD *)(*((_QWORD *)v26 + 2) + 128);
      v35 = (_QWORD *)(v34 + 24);
      if (*(_DWORD *)(v34 + 32) >= 0x41u)
        v35 = (_QWORD *)*v35;
      v25 = -v23;
      v24 = (_QWORD *)*v35;
      goto LABEL_35;
    }
    v28 = 1;
    v27 = 2;
    while (1)
    {
LABEL_41:
      v29 = *(_QWORD *)(*(_QWORD *)&v26[8 * v28 + 8] + 128);
      v30 = (_QWORD *)(v29 + 24);
      if (*(_DWORD *)(v29 + 32) >= 0x41u)
        v30 = (_QWORD *)*v30;
      if (*v30 > (unint64_t)v18)
        break;
      v28 += v27;
      if (v28 >= v23)
        goto LABEL_47;
    }
    v31 = v28 - v27;
    if (v31)
      goto LABEL_48;
LABEL_47:
    v31 = v23 - v27;
LABEL_48:
    v32 = *(_QWORD *)(*(_QWORD *)&v26[8 * v31 + 8] + 128);
    v33 = (_QWORD *)(v32 + 24);
    if (*(_DWORD *)(v32 + 32) >= 0x41u)
      v33 = (_QWORD *)*v33;
    v12 = *(unsigned __int8 **)&v26[8 * v31];
    if (!v12 || *v12 - 4 > 0x1E)
      goto LABEL_60;
    v24 = (_QWORD *)*v33;
LABEL_53:
    v18 = (_QWORD *)((char *)v18 - (uint64_t)v24);
    if (v20)
      goto LABEL_22;
LABEL_24:
    v21 = 0;
  }
  v38 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 128);
  v39 = (_QWORD *)(v38 + 24);
  if (*(_DWORD *)(v38 + 32) >= 0x41u)
    v39 = (_QWORD *)*v39;
  v40 = (_QWORD *)*v39;
  v37 = v18 == v40;
  if (!a4)
    goto LABEL_71;
  if (v18 == v40)
  {
    v37 = 1;
    goto LABEL_70;
  }
  v37 = 0;
LABEL_69:
  a2 = sub_1C4F80BC4(a3);
LABEL_70:
  *a4 = a2;
LABEL_71:
  *a5 = v37;
  return 1;
}

uint64_t sub_1C4F80BC4(uint64_t a1)
{
  uint64_t v3;
  _QWORD *v4;
  llvm::ConstantInt *v5;
  llvm::Value **v6;
  llvm::Value *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  llvm::Value **v11;
  llvm::Value *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) < 2u)
    return 0;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0)
    v4 = (_QWORD *)*v4;
  v5 = (llvm::ConstantInt *)(*v4 + 1984);
  v6 = llvm::ConstantInt::get(v5, 0, 0);
  v8 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v6, v7);
  v9 = v8;
  v10 = *(unsigned int *)(a1 + 8);
  if (v10 < 3 || **(unsigned __int8 **)(a1 - 8 * v10) - 4 > 0x1E)
  {
    v17 = a1;
    v18 = a1;
    v19 = v8;
    v16 = *(_QWORD *)(a1 + 16);
    v14 = (uint64_t *)(v16 & 0xFFFFFFFFFFFFFFF8);
    if ((v16 & 4) != 0)
      v14 = (uint64_t *)*v14;
    v15 = 3;
  }
  else
  {
    v11 = llvm::ConstantInt::get(v5, -1, 0);
    v17 = a1;
    v18 = a1;
    v19 = v9;
    v20 = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v11, v12);
    v13 = *(_QWORD *)(a1 + 16);
    v14 = (uint64_t *)(v13 & 0xFFFFFFFFFFFFFFF8);
    if ((v13 & 4) != 0)
      v14 = (uint64_t *)*v14;
    v15 = 4;
  }
  return llvm::MDTuple::getImpl(v14, &v17, v15, 0, 1);
}

BOOL sub_1C4F80CE8(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  _BYTE v9[16];
  unsigned __int8 v10;

  sub_1C4F80E88(a1, a2, (uint64_t)v9);
  v4 = v10;
  if (v10)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52))
    {
      v8 = v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, a1 + 56, v6 + 1, 8);
      v4 = v8;
      LODWORD(v6) = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

_BYTE *sub_1C4F80D74(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *result;

  v1 = *a1;
  v2 = *(unsigned int *)(*a1 + 8);
  if (v2 >= 3)
  {
    result = *(_BYTE **)(v1 - 8 * v2);
    if (*result - 4 < 0x1F)
      return result;
    v3 = -v2;
  }
  else
  {
    if ((_DWORD)v2 != 2)
      return 0;
    v3 = -2;
  }
  result = *(_BYTE **)(v1 + 8 * v3 + 8);
  if (result)
  {
    switch(*result)
    {
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x10:
      case 0x11:
      case 0x12:
      case 0x13:
      case 0x14:
      case 0x15:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x1F:
      case 0x20:
      case 0x21:
      case 0x22:
        return result;
      default:
        return 0;
    }
  }
  return result;
}

uint64_t sub_1C4F80DF0(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1C4F80E88@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  BOOL v29;
  int v30;
  uint64_t *v31;

  v4 = result;
  v7 = result + 8;
  v6 = *(_DWORD *)result;
  v8 = *(_DWORD *)result & 1;
  if (v8)
  {
    v9 = 4;
    v10 = result + 8;
  }
  else
  {
    v9 = *(_DWORD *)(result + 16);
    if (!v9)
    {
      v13 = 0;
      v19 = 0;
      goto LABEL_18;
    }
    v10 = *(_QWORD *)(result + 8);
  }
  v11 = v9 - 1;
  v12 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v9 - 1);
  v13 = (uint64_t *)(v10 + 8 * v12);
  v14 = *v13;
  if (*a2 == *v13)
  {
LABEL_12:
    if (v8)
    {
      v18 = 4;
    }
    else
    {
      v7 = *(_QWORD *)(v4 + 8);
      v18 = *(unsigned int *)(v4 + 16);
    }
    v22 = 0;
    v21 = v7 + 8 * v18;
    goto LABEL_26;
  }
  v15 = 0;
  result = 1;
  while (v14 != -4096)
  {
    if (v15)
      v16 = 0;
    else
      v16 = v14 == -8192;
    if (v16)
      v15 = v13;
    v17 = v12 + result;
    result = (result + 1);
    v12 = v17 & v11;
    v13 = (uint64_t *)(v10 + 8 * (v17 & v11));
    v14 = *v13;
    if (*a2 == *v13)
      goto LABEL_12;
  }
  if (v15)
    v13 = v15;
  if (v8)
    v19 = 4;
  else
    v19 = *(_DWORD *)(v4 + 16);
LABEL_18:
  if (4 * (v6 >> 1) + 4 < 3 * v19)
  {
    if (v19 + ~(v6 >> 1) - *(_DWORD *)(v4 + 4) <= v19 >> 3)
    {
      sub_1C4E9153C(v4, v19);
      v31 = 0;
      result = sub_1C4F80DF0(v4, *a2, &v31);
      v13 = v31;
      v6 = *(_DWORD *)v4;
      v8 = *(_DWORD *)v4 & 1;
    }
    goto LABEL_21;
  }
  result = (uint64_t)sub_1C4E9153C(v4, 2 * v19);
  v6 = *(_DWORD *)v4;
  if ((*(_DWORD *)v4 & 1) != 0)
  {
    v23 = 4;
    v24 = v7;
    goto LABEL_31;
  }
  v23 = *(_DWORD *)(v4 + 16);
  if (v23)
  {
    v24 = *(_QWORD *)(v4 + 8);
LABEL_31:
    v8 = *(_DWORD *)v4 & 1;
    v25 = v23 - 1;
    v26 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v23 - 1);
    v13 = (uint64_t *)(v24 + 8 * v26);
    v27 = *v13;
    if (*a2 != *v13)
    {
      v28 = 0;
      result = 1;
      while (v27 != -4096)
      {
        if (v28)
          v29 = 0;
        else
          v29 = v27 == -8192;
        if (v29)
          v28 = v13;
        v30 = v26 + result;
        result = (result + 1);
        v26 = v30 & v25;
        v13 = (uint64_t *)(v24 + 8 * (v30 & v25));
        v27 = *v13;
        if (*a2 == *v13)
          goto LABEL_21;
      }
      if (v28)
        v13 = v28;
    }
    goto LABEL_21;
  }
  v8 = 0;
  v13 = 0;
LABEL_21:
  *(_DWORD *)v4 = (v6 & 0xFFFFFFFE | v8) + 2;
  if (*v13 != -4096)
    --*(_DWORD *)(v4 + 4);
  *v13 = *a2;
  if ((*(_BYTE *)v4 & 1) != 0)
  {
    v20 = 4;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 8);
    v20 = *(unsigned int *)(v4 + 16);
  }
  v21 = v7 + 8 * v20;
  v22 = 1;
LABEL_26:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v21;
  *(_BYTE *)(a3 + 16) = v22;
  return result;
}

uint64_t sub_1C4F810EC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unsigned int v4;
  int v5;
  unsigned int v6;
  int v7;
  unsigned __int8 **v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  BOOL v13;
  unsigned __int8 *v14;

  v3 = *(unsigned int *)(a1 + 8);
  v4 = 2;
  if (v3 >= 3)
  {
    if (**(unsigned __int8 **)(a1 - 8 * v3) - 4 >= 0x1F)
      v5 = -1;
    else
      v5 = -3;
    if (**(unsigned __int8 **)(a1 - 8 * v3) - 4 >= 0x1F)
      v4 = 2;
    else
      v4 = 3;
  }
  else
  {
    v5 = -1;
  }
  v6 = v5 + v3;
  if (v4 > v6)
    return 0;
  v7 = 0;
  v8 = (unsigned __int8 **)(a1 - 8 * v3);
  v9 = v6 / v4;
  while (1)
  {
    if (v3 >= 3)
    {
      v12 = **v8 - 4;
      v13 = v12 >= 0x1F;
      v11 = v12 >= 0x1F ? 1 : 3;
      v10 = v13 ? 2 : 3;
    }
    else
    {
      v10 = 2;
      v11 = 1;
    }
    v14 = v8[v11 + v10 * v7];
    if (v14 == a2 || sub_1C4F810EC(v14, a2))
      break;
    if (v9 == ++v7)
      return 0;
  }
  return 1;
}

uint64_t sub_1C4F811D8()
{
  int v1;
  char v2;
  char *v3;

  v2 = 1;
  v3 = &v2;
  v1 = 1;
  sub_1C61BCA60(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED82EB40, &dword_1C475E000);
}

void llvm::findDevirtualizableCallsForTypeTest(uint64_t a1, uint64_t a2, uint64_t a3, llvm::DominatorTree *a4)
{
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  _BOOL4 v11;
  BOOL v12;
  unint64_t v13;
  llvm::Value *v14;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 56) + 40);
  for (i = *(_QWORD *)(a3 + 8); i; i = *(_QWORD *)(i + 8))
  {
    v10 = *(_QWORD *)(i + 24);
    v11 = sub_1C4D9F8B4(v10);
    if (v10)
      v12 = !v11;
    else
      v12 = 1;
    if (!v12)
    {
      v13 = *(unsigned int *)(a2 + 8);
      if (v13 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v13 + 1, 8);
        v13 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v13) = v10;
      ++*(_DWORD *)(a2 + 8);
    }
  }
  if (*(_DWORD *)(a2 + 8))
  {
    v14 = llvm::Value::stripPointerCasts(*(llvm::Value **)(a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF)));
    sub_1C4F81330(v8, a1, (uint64_t)v14, 0, (const llvm::Value *)a3, a4);
  }
}

void sub_1C4F81330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const llvm::Value *a5, llvm::DominatorTree *a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  llvm::UndefValue **v23;
  llvm::UndefValue **v24;
  uint64_t v25;
  uint64_t IndexedOffsetInType;
  llvm::DataLayout *v27;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v31[8] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a3 + 8);
  if (v6)
  {
    v10 = a3;
    v12 = a1;
    v27 = (llvm::DataLayout *)(a1 + 272);
    do
    {
      v13 = *(_QWORD *)(v6 + 24);
      v14 = *(unsigned __int8 *)(v13 + 16);
      switch(v14)
      {
        case '<':
          sub_1C4F81714(a2, 0, *(_QWORD *)(v6 + 24), a4, a5, a6);
          break;
        case '>':
          v15 = *(_DWORD *)(v13 + 20) & 0x7FFFFFF;
          v16 = (_QWORD *)(v13 - 32 * v15);
          if (*v16 == v10)
          {
            if ((_DWORD)v15 == 1)
            {
LABEL_12:
              v18 = v10;
              v19 = v16 + 4;
              v29 = v31;
              v30 = 0x800000000;
              v20 = -(-32 * v15 + 32);
              if ((unint64_t)v20 >= 0x101)
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v20 >> 5, 8);
                v21 = v30;
                v23 = (llvm::UndefValue **)v29;
                v22 = v30;
              }
              else
              {
                v21 = 0;
                v22 = 0;
                v23 = (llvm::UndefValue **)v31;
              }
              if (v19 == (_QWORD *)v13)
              {
                v10 = v18;
              }
              else
              {
                v24 = &v23[v21];
                v25 = 32 - 32 * v15;
                v10 = v18;
                do
                {
                  *v24++ = *(llvm::UndefValue **)(v13 + v25);
                  v25 += 32;
                }
                while (v25);
                v23 = (llvm::UndefValue **)v29;
              }
              v12 = a1;
              LODWORD(v30) = v22 + ((unint64_t)v20 >> 5);
              IndexedOffsetInType = llvm::DataLayout::getIndexedOffsetInType(v27, *(_QWORD *)(v13 + 64), v23, v30);
              sub_1C4F81330(a1, a2, v13, IndexedOffsetInType + a4, a5, a6);
              if (v29 != v31)
                free(v29);
            }
            else
            {
              v17 = 1;
              while (*(_BYTE *)(v16[4 * v17] + 16) == 16)
              {
                if ((_DWORD)v15 == ++v17)
                  goto LABEL_12;
              }
            }
          }
          break;
        case 'M':
          sub_1C4F81330(v12, a2, *(_QWORD *)(v6 + 24), a4, a5, a6);
          break;
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6);
  }
}

uint64_t llvm::findDevirtualizableCallsForTypeCheckedLoad(uint64_t result, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, llvm::DominatorTree *a6)
{
  uint64_t v7;
  BOOL v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v7 = *(_QWORD *)(a5 - 32 * (*(_DWORD *)(a5 + 20) & 0x7FFFFFF) + 32);
  if (v7)
    v8 = *(_BYTE *)(v7 + 16) == 16;
  else
    v8 = 0;
  if (!v8)
  {
    *a4 = 1;
    return result;
  }
  v12 = result;
  v13 = *(_QWORD *)(a5 + 8);
  if (v13)
  {
    v15 = a3 + 16;
    v16 = a2 + 16;
    do
    {
      v17 = *(_QWORD *)(v13 + 24);
      if (!v17 || *(_BYTE *)(v17 + 16) != 92 || *(_DWORD *)(v17 + 72) != 1)
        goto LABEL_16;
      v18 = **(_DWORD **)(v17 + 64);
      if (v18 == 1)
      {
        v20 = *(unsigned int *)(a3 + 8);
        if (v20 >= *(unsigned int *)(a3 + 12))
        {
          v27 = v15;
          v29 = v16;
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a3, v15, v20 + 1, 8);
          v15 = v27;
          v16 = v29;
          v20 = *(unsigned int *)(a3 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * v20) = v17;
        ++*(_DWORD *)(a3 + 8);
        goto LABEL_17;
      }
      if (!v18)
      {
        v19 = *(unsigned int *)(a2 + 8);
        if (v19 >= *(unsigned int *)(a2 + 12))
        {
          v26 = v15;
          v28 = v16;
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v16, v19 + 1, 8);
          v15 = v26;
          v16 = v28;
          v19 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v19) = v17;
        ++*(_DWORD *)(a2 + 8);
      }
      else
      {
LABEL_16:
        *a4 = 1;
      }
LABEL_17:
      v13 = *(_QWORD *)(v13 + 8);
    }
    while (v13);
  }
  v21 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v21)
  {
    v22 = *(uint64_t **)a2;
    v23 = 8 * v21;
    do
    {
      v24 = (uint64_t *)(v7 + 24);
      if (*(_DWORD *)(v7 + 32) >= 0x41u)
        v24 = *(uint64_t **)(v7 + 24);
      v25 = *v22++;
      result = sub_1C4F81714(v12, a4, v25, *v24, (const llvm::Value *)a5, a6);
      v23 -= 8;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_1C4F81714(uint64_t result, _BYTE *a2, uint64_t a3, uint64_t a4, const llvm::Value *a5, llvm::DominatorTree *a6)
{
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  int v14;
  unint64_t v15;
  _QWORD *v16;

  v6 = *(_QWORD *)(a3 + 8);
  if (v6)
  {
    v11 = result;
    v12 = result + 16;
    do
    {
      v13 = *(unsigned __int8 **)(v6 + 24);
      result = llvm::DominatorTree::dominates(a6, a5, (const llvm::Instruction *)v13);
      if ((_DWORD)result)
      {
        v14 = v13[16];
        if (v14 == 33 || v14 == 84)
        {
          v15 = *(unsigned int *)(v11 + 8);
          if (v15 >= *(unsigned int *)(v11 + 12))
          {
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v11, v12, v15 + 1, 16);
            v15 = *(unsigned int *)(v11 + 8);
          }
          v16 = (_QWORD *)(*(_QWORD *)v11 + 16 * v15);
          *v16 = a4;
          v16[1] = v13;
          ++*(_DWORD *)(v11 + 8);
        }
        else if (v14 == 77)
        {
          result = sub_1C4F81714(v11, a2, v13, a4, a5, a6);
        }
        else if (a2)
        {
          *a2 = 1;
        }
      }
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6);
  }
  return result;
}

llvm *llvm::getPointerAtOffset(llvm *this, unint64_t a2, unint64_t a3, llvm::Module *a4, llvm::Constant *a5)
{
  llvm *v6;
  llvm::StructType *v7;
  BOOL v8;
  llvm::DataLayout *v12;
  int v13;
  int v14;
  llvm **v15;
  uint64_t PointerAtOffset;
  BOOL v17;
  llvm::StructLayout *StructLayout;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  char *v24;
  unint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  char v33;
  const char *v34;
  unint64_t v35;
  int v36;
  char *v37;
  unint64_t v38;
  char v39;
  _QWORD *v40;

  v6 = this;
  v7 = *(llvm::StructType **)this;
  if (*(_BYTE *)(*(_QWORD *)this + 8) != 15)
  {
    v12 = (llvm::DataLayout *)(a3 + 272);
    do
    {
      v13 = *((unsigned __int8 *)v6 + 16);
      if (v13 == 8)
      {
        v28 = *((_QWORD *)v7 + 3);
        sub_1C4768AD0((uint64_t)v12, v28);
        v30 = v29;
        v32 = v31 == 1;
        llvm::DataLayout::getAlignment((uint64_t)v12, v28);
        if (v32)
        {
          v39 = v33;
          v33 = v39;
        }
        v35 = ((1 << v33) + ((unint64_t)(v30 + 7) >> 3) - 1) & -(1 << v33);
        v36 = *((_DWORD *)v6 + 5);
        if ((v36 & 0x7FFFFFFu) <= (a2 / v35))
          return 0;
        if ((v36 & 0x40000000) != 0)
          v37 = (char *)*((_QWORD *)v6 - 1);
        else
          v37 = (char *)v6 - 32 * (v36 & 0x7FFFFFF);
        v6 = *(llvm **)&v37[32 * (a2 / v35)];
        a2 %= v35;
      }
      else if (v13 == 9)
      {
        StructLayout = llvm::DataLayout::getStructLayout(v12, v7);
        if (*(_QWORD *)StructLayout <= a2)
          return 0;
        v19 = (char *)StructLayout + 16;
        v20 = (char *)StructLayout + 16;
        v21 = *((_DWORD *)StructLayout + 3) & 0x7FFFFFFF;
        if ((_DWORD)v21)
        {
          v20 = (char *)StructLayout + 16;
          do
          {
            v22 = v21 >> 1;
            v23 = (unint64_t *)&v20[8 * (v21 >> 1)];
            v25 = *v23;
            v24 = (char *)(v23 + 1);
            v21 += ~(v21 >> 1);
            if (v25 > a2)
              v21 = v22;
            else
              v20 = v24;
          }
          while (v21);
        }
        v26 = *((_DWORD *)v6 + 5);
        if ((v26 & 0x40000000) != 0)
          v27 = (char *)*((_QWORD *)v6 - 1);
        else
          v27 = (char *)v6 - 32 * (v26 & 0x7FFFFFF);
        v38 = (unint64_t)(v20 - v19 - 8) >> 3;
        v6 = *(llvm **)&v27[32 * v38];
        a2 -= *(_QWORD *)&v19[8 * v38];
      }
      else
      {
        if (!a2 && v13 == 16)
        {
          v40 = (_QWORD *)((char *)v6 + 24);
          if (*((_DWORD *)v6 + 8) >= 0x41u)
            v40 = (_QWORD *)*v40;
          v8 = *v40 == 0;
          goto LABEL_3;
        }
        if (v13 != 5)
          return 0;
        v14 = *((unsigned __int16 *)v6 + 9);
        if (v14 == 15)
        {
          v15 = (llvm **)((char *)v6 - 32 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF));
          v6 = *v15;
          PointerAtOffset = llvm::getPointerAtOffset(v15[4], 0, a3, 0, a5);
          if (PointerAtOffset)
            v17 = *(_BYTE *)(PointerAtOffset + 16) == 5;
          else
            v17 = 0;
          if (v17 && *(_WORD *)(PointerAtOffset + 18) == 34)
            PointerAtOffset = *(_QWORD *)(PointerAtOffset - 32 * (*(_DWORD *)(PointerAtOffset + 20) & 0x7FFFFFF));
          if ((llvm::Module *)PointerAtOffset != a4)
            return 0;
        }
        else
        {
          if (v14 != 47 && v14 != 38)
            return 0;
          v6 = (llvm *)*((_QWORD *)v6 - 4 * (*((_DWORD *)v6 + 5) & 0x7FFFFFF));
        }
      }
      v7 = *(llvm::StructType **)v6;
    }
    while (*(_BYTE *)(*(_QWORD *)v6 + 8) != 15);
  }
  v8 = a2 == 0;
LABEL_3:
  if (v8)
    return v6;
  else
    return 0;
}

void llvm::replaceRelativePointerUsersWithZero(llvm *this, llvm::Function *a2)
{
  uint64_t i;
  uint64_t v3;
  BOOL v4;
  uint64_t j;
  uint64_t v6;
  BOOL v7;
  llvm::Value **v8;

  for (i = *((_QWORD *)this + 1); i; i = *(_QWORD *)(i + 8))
  {
    v3 = *(_QWORD *)(i + 24);
    if (v3)
      v4 = *(_BYTE *)(v3 + 16) == 5;
    else
      v4 = 0;
    if (v4 && *(_WORD *)(v3 + 18) == 47)
    {
      for (j = *(_QWORD *)(v3 + 8); j; j = *(_QWORD *)(j + 8))
      {
        v6 = *(_QWORD *)(j + 24);
        if (v6)
          v7 = *(_BYTE *)(v6 + 16) == 5;
        else
          v7 = 0;
        if (v7 && *(_WORD *)(v6 + 18) == 15)
        {
          v8 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v6, 0, 0);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v6, (llvm::Value *)v8, 0);
        }
      }
    }
  }
}

uint64_t llvm::ScopedNoAliasAAResult::alias(llvm::ScopedNoAliasAAResult *a1, uint64_t a2, uint64_t a3)
{
  const llvm::MDNode *v3;
  const llvm::MDNode *v4;
  uint64_t result;

  if (!byte_1ED82EC88)
    return 1;
  v3 = *(const llvm::MDNode **)(a2 + 40);
  v4 = *(const llvm::MDNode **)(a3 + 32);
  result = llvm::ScopedNoAliasAAResult::mayAliasInScopes(a1, *(const llvm::MDNode **)(a2 + 32), *(const llvm::MDNode **)(a3 + 40));
  if ((_DWORD)result)
    return llvm::ScopedNoAliasAAResult::mayAliasInScopes((llvm::ScopedNoAliasAAResult *)result, v4, v3);
  return result;
}

uint64_t llvm::ScopedNoAliasAAResult::mayAliasInScopes(llvm::ScopedNoAliasAAResult *this, const llvm::MDNode *a2, const llvm::MDNode *a3)
{
  uint64_t v3;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  _BYTE *v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  _BYTE v27[128];
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  _BYTE v32[128];
  unint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  int v36;
  _BYTE v37[128];

  v3 = 1;
  if (a2 && a3)
  {
    v6 = (unint64_t *)v37;
    v33 = (unint64_t *)v37;
    v34 = (unint64_t *)v37;
    v35 = 16;
    v36 = 0;
    v7 = *((unsigned int *)a3 + 2);
    if ((_DWORD)v7)
    {
      LODWORD(v8) = 0;
      v9 = 16;
      v10 = (unint64_t *)v37;
      v11 = -8 * v7;
      do
      {
        v12 = *(unsigned __int8 **)((char *)a3 + v11);
        if (*v12 - 4 <= 0x1E)
        {
          v13 = *((unsigned int *)v12 + 2);
          if (v13 >= 2)
          {
            v14 = *(unsigned __int8 **)&v12[-8 * v13 + 8];
            if (v14)
            {
              if (*v14 - 4 <= 0x1E)
              {
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v33, (uint64_t)v14);
                v6 = v33;
                v10 = v34;
                v9 = v35;
                LODWORD(v8) = HIDWORD(v35);
              }
            }
          }
        }
        v11 += 8;
      }
      while (v11);
    }
    else
    {
      LODWORD(v8) = 0;
      v9 = 16;
      v10 = (unint64_t *)v37;
    }
    if (v10 == v6)
      v8 = v8;
    else
      v8 = v9;
    v15 = v10;
    if ((_DWORD)v8)
    {
      v16 = 0;
      while (v10[v16] >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (v8 == ++v16)
          goto LABEL_36;
      }
      v15 = &v10[v16];
    }
    v17 = &v10[v8];
    if (v15 == v17)
    {
LABEL_36:
      v3 = 1;
    }
    else
    {
      v18 = (_BYTE *)*v15;
LABEL_24:
      v28 = v32;
      v29 = v32;
      v30 = 16;
      v31 = 0;
      sub_1C4F824CC(a2, v18, (llvm::SmallPtrSetImplBase *)&v28);
      if (HIDWORD(v30) == v31)
      {
        v19 = 5;
      }
      else
      {
        v23 = v27;
        v24 = v27;
        v25 = 16;
        v26 = 0;
        sub_1C4F824CC(a3, v18, (llvm::SmallPtrSetImplBase *)&v23);
        v19 = sub_1C4F82580((uint64_t)&v28, (uint64_t)&v23);
        if (v24 != v23)
          free(v24);
      }
      if (v29 != v28)
        free(v29);
      if (v19 != 5 && v19)
      {
        v3 = 0;
      }
      else
      {
        v20 = v15 + 1;
        while (v20 != v17)
        {
          v21 = *v20++;
          v18 = (_BYTE *)v21;
          if (v21 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v15 = v20 - 1;
            goto LABEL_24;
          }
        }
        v3 = 1;
      }
      v6 = v33;
      v10 = v34;
    }
    if (v10 != v6)
      free(v10);
  }
  return v3;
}

uint64_t llvm::ScopedNoAliasAAResult::getModRefInfo(uint64_t ****a1, uint64_t ***a2, uint64_t a3)
{
  const llvm::MDNode *v5;
  const llvm::MDNode *v6;
  uint64_t ****mayAliasInScopes;
  const llvm::MDNode *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  uint64_t ***v15;
  uint64_t v16;
  const llvm::MDNode **v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  uint64_t ***v24;
  uint64_t v25;
  const llvm::MDNode **v26;
  uint64_t v27;
  uint64_t ****v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  uint64_t ****v32;
  int v33;
  BOOL v34;
  unsigned int v35;
  uint64_t ****v36;
  uint64_t v37;
  uint64_t ****v38;
  uint64_t v39;
  uint64_t ***v40;

  if (!byte_1ED82EC88)
    return 7;
  v5 = *(const llvm::MDNode **)(a3 + 32);
  if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
    goto LABEL_3;
  v10 = ***a2;
  v40 = a2;
  v11 = *(_DWORD *)(v10 + 2496);
  if (v11)
  {
    v12 = *(_QWORD *)(v10 + 2480);
    v13 = v11 - 1;
    v14 = v13 & ((a2 >> 4) ^ (a2 >> 9));
    a1 = (uint64_t ****)(v12 + 40 * v14);
    v15 = *a1;
    if (*a1 == a2)
      goto LABEL_12;
    v28 = 0;
    v29 = 1;
    while (v15 != (uint64_t ***)-4096)
    {
      if (v28)
        v30 = 0;
      else
        v30 = v15 == (uint64_t ***)-8192;
      if (v30)
        v28 = a1;
      v31 = v14 + v29++;
      v14 = v31 & v13;
      a1 = (uint64_t ****)(v12 + 40 * v14);
      v15 = *a1;
      if (*a1 == a2)
        goto LABEL_12;
    }
    if (v28)
      v36 = v28;
    else
      v36 = a1;
  }
  else
  {
    v36 = 0;
  }
  a1 = (uint64_t ****)sub_1C541AB24(v10 + 2480, (uint64_t)&v40, (uint64_t *)&v40, v36);
  v37 = (uint64_t)v40;
  a1[3] = 0;
  a1[4] = 0;
  *a1 = (uint64_t ***)v37;
  a1[1] = (uint64_t ***)(a1 + 3);
  a1[2] = (uint64_t ***)0x100000000;
LABEL_12:
  v16 = *((unsigned int *)a1 + 4);
  if (!(_DWORD)v16)
  {
LABEL_3:
    v6 = 0;
    goto LABEL_4;
  }
  v17 = (const llvm::MDNode **)(a1[1] + 1);
  v18 = 16 * v16;
  while (*((_DWORD *)v17 - 2) != 8)
  {
    v6 = 0;
    v17 += 2;
    v18 -= 16;
    if (!v18)
      goto LABEL_4;
  }
  v6 = *v17;
LABEL_4:
  mayAliasInScopes = (uint64_t ****)llvm::ScopedNoAliasAAResult::mayAliasInScopes((llvm::ScopedNoAliasAAResult *)a1, v5, v6);
  if (!(_DWORD)mayAliasInScopes)
    return 4;
  if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
    goto LABEL_6;
  v19 = ***a2;
  v40 = a2;
  v20 = *(_DWORD *)(v19 + 2496);
  if (v20)
  {
    v21 = *(_QWORD *)(v19 + 2480);
    v22 = v20 - 1;
    v23 = v22 & ((a2 >> 4) ^ (a2 >> 9));
    mayAliasInScopes = (uint64_t ****)(v21 + 40 * v23);
    v24 = *mayAliasInScopes;
    if (*mayAliasInScopes == a2)
      goto LABEL_19;
    v32 = 0;
    v33 = 1;
    while (v24 != (uint64_t ***)-4096)
    {
      if (v32)
        v34 = 0;
      else
        v34 = v24 == (uint64_t ***)-8192;
      if (v34)
        v32 = mayAliasInScopes;
      v35 = v23 + v33++;
      v23 = v35 & v22;
      mayAliasInScopes = (uint64_t ****)(v21 + 40 * v23);
      v24 = *mayAliasInScopes;
      if (*mayAliasInScopes == a2)
        goto LABEL_19;
    }
    if (v32)
      v38 = v32;
    else
      v38 = mayAliasInScopes;
  }
  else
  {
    v38 = 0;
  }
  mayAliasInScopes = (uint64_t ****)sub_1C541AB24(v19 + 2480, (uint64_t)&v40, (uint64_t *)&v40, v38);
  v39 = (uint64_t)v40;
  mayAliasInScopes[3] = 0;
  mayAliasInScopes[4] = 0;
  *mayAliasInScopes = (uint64_t ***)v39;
  mayAliasInScopes[1] = (uint64_t ***)(mayAliasInScopes + 3);
  mayAliasInScopes[2] = (uint64_t ***)0x100000000;
LABEL_19:
  v25 = *((unsigned int *)mayAliasInScopes + 4);
  if ((_DWORD)v25)
  {
    v26 = (const llvm::MDNode **)(mayAliasInScopes[1] + 1);
    v27 = 16 * v25;
    while (*((_DWORD *)v26 - 2) != 7)
    {
      v8 = 0;
      v26 += 2;
      v27 -= 16;
      if (!v27)
        goto LABEL_7;
    }
    v8 = *v26;
    goto LABEL_7;
  }
LABEL_6:
  v8 = 0;
LABEL_7:
  if (llvm::ScopedNoAliasAAResult::mayAliasInScopes((llvm::ScopedNoAliasAAResult *)mayAliasInScopes, v8, *(const llvm::MDNode **)(a3 + 40)))return 7;
  else
    return 4;
}

uint64_t llvm::ScopedNoAliasAAResult::getModRefInfo(uint64_t ****a1, uint64_t ***a2, uint64_t ***a3)
{
  const llvm::MDNode *v5;
  const llvm::MDNode *v6;
  uint64_t ****mayAliasInScopes;
  const llvm::MDNode *v8;
  const llvm::MDNode *v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t ***v16;
  uint64_t v17;
  const llvm::MDNode **v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t ***v25;
  uint64_t v26;
  const llvm::MDNode **v27;
  uint64_t v28;
  uint64_t ****v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  uint64_t ****v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t ***v42;
  uint64_t v43;
  const llvm::MDNode **v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t ***v51;
  uint64_t v52;
  const llvm::MDNode **v53;
  uint64_t v54;
  uint64_t ****v55;
  int v56;
  BOOL v57;
  unsigned int v58;
  uint64_t ****v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  uint64_t ****v63;
  uint64_t v64;
  uint64_t ****v65;
  uint64_t v66;
  uint64_t ****v67;
  uint64_t v68;
  uint64_t ****v69;
  uint64_t v70;
  uint64_t ***v71;

  if (!byte_1ED82EC88)
    return 7;
  if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
    goto LABEL_3;
  v37 = ***a2;
  v71 = a2;
  v38 = *(_DWORD *)(v37 + 2496);
  if (v38)
  {
    v39 = *(_QWORD *)(v37 + 2480);
    v40 = v38 - 1;
    v41 = v40 & ((a2 >> 4) ^ (a2 >> 9));
    a1 = (uint64_t ****)(v39 + 40 * v41);
    v42 = *a1;
    if (*a1 == a2)
      goto LABEL_48;
    v55 = 0;
    v56 = 1;
    while (v42 != (uint64_t ***)-4096)
    {
      if (v55)
        v57 = 0;
      else
        v57 = v42 == (uint64_t ***)-8192;
      if (v57)
        v55 = a1;
      v58 = v41 + v56++;
      v41 = v58 & v40;
      a1 = (uint64_t ****)(v39 + 40 * v41);
      v42 = *a1;
      if (*a1 == a2)
        goto LABEL_48;
    }
    if (v55)
      v67 = v55;
    else
      v67 = a1;
  }
  else
  {
    v67 = 0;
  }
  a1 = (uint64_t ****)sub_1C541AB24(v37 + 2480, (uint64_t)&v71, (uint64_t *)&v71, v67);
  v68 = (uint64_t)v71;
  a1[3] = 0;
  a1[4] = 0;
  *a1 = (uint64_t ***)v68;
  a1[1] = (uint64_t ***)(a1 + 3);
  a1[2] = (uint64_t ***)0x100000000;
LABEL_48:
  v43 = *((unsigned int *)a1 + 4);
  if (!(_DWORD)v43)
  {
LABEL_3:
    v5 = 0;
    goto LABEL_4;
  }
  v44 = (const llvm::MDNode **)(a1[1] + 1);
  v45 = 16 * v43;
  while (*((_DWORD *)v44 - 2) != 7)
  {
    v5 = 0;
    v44 += 2;
    v45 -= 16;
    if (!v45)
      goto LABEL_4;
  }
  v5 = *v44;
LABEL_4:
  if ((*((_BYTE *)a3 + 23) & 0x20) == 0)
  {
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v11 = ***a3;
  v71 = a3;
  v12 = *(_DWORD *)(v11 + 2496);
  if (v12)
  {
    v13 = *(_QWORD *)(v11 + 2480);
    v14 = v12 - 1;
    v15 = v14 & ((a3 >> 4) ^ (a3 >> 9));
    a1 = (uint64_t ****)(v13 + 40 * v15);
    v16 = *a1;
    if (*a1 == a3)
      goto LABEL_16;
    v29 = 0;
    v30 = 1;
    while (v16 != (uint64_t ***)-4096)
    {
      if (v29)
        v31 = 0;
      else
        v31 = v16 == (uint64_t ***)-8192;
      if (v31)
        v29 = a1;
      v32 = v15 + v30++;
      v15 = v32 & v14;
      a1 = (uint64_t ****)(v13 + 40 * v15);
      v16 = *a1;
      if (*a1 == a3)
        goto LABEL_16;
    }
    if (v29)
      v63 = v29;
    else
      v63 = a1;
  }
  else
  {
    v63 = 0;
  }
  a1 = (uint64_t ****)sub_1C541AB24(v11 + 2480, (uint64_t)&v71, (uint64_t *)&v71, v63);
  v64 = (uint64_t)v71;
  a1[3] = 0;
  a1[4] = 0;
  *a1 = (uint64_t ***)v64;
  a1[1] = (uint64_t ***)(a1 + 3);
  a1[2] = (uint64_t ***)0x100000000;
LABEL_16:
  v17 = *((unsigned int *)a1 + 4);
  if (!(_DWORD)v17)
    goto LABEL_5;
  v18 = (const llvm::MDNode **)(a1[1] + 1);
  v19 = 16 * v17;
  while (*((_DWORD *)v18 - 2) != 8)
  {
    v6 = 0;
    v18 += 2;
    v19 -= 16;
    if (!v19)
      goto LABEL_6;
  }
  v6 = *v18;
LABEL_6:
  mayAliasInScopes = (uint64_t ****)llvm::ScopedNoAliasAAResult::mayAliasInScopes((llvm::ScopedNoAliasAAResult *)a1, v5, v6);
  if (!(_DWORD)mayAliasInScopes)
    return 4;
  if ((*((_BYTE *)a3 + 23) & 0x20) == 0)
    goto LABEL_8;
  v20 = ***a3;
  v71 = a3;
  v21 = *(_DWORD *)(v20 + 2496);
  if (v21)
  {
    v22 = *(_QWORD *)(v20 + 2480);
    v23 = v21 - 1;
    v24 = v23 & ((a3 >> 4) ^ (a3 >> 9));
    mayAliasInScopes = (uint64_t ****)(v22 + 40 * v24);
    v25 = *mayAliasInScopes;
    if (*mayAliasInScopes == a3)
      goto LABEL_23;
    v33 = 0;
    v34 = 1;
    while (v25 != (uint64_t ***)-4096)
    {
      if (v33)
        v35 = 0;
      else
        v35 = v25 == (uint64_t ***)-8192;
      if (v35)
        v33 = mayAliasInScopes;
      v36 = v24 + v34++;
      v24 = v36 & v23;
      mayAliasInScopes = (uint64_t ****)(v22 + 40 * v24);
      v25 = *mayAliasInScopes;
      if (*mayAliasInScopes == a3)
        goto LABEL_23;
    }
    if (v33)
      v65 = v33;
    else
      v65 = mayAliasInScopes;
  }
  else
  {
    v65 = 0;
  }
  mayAliasInScopes = (uint64_t ****)sub_1C541AB24(v20 + 2480, (uint64_t)&v71, (uint64_t *)&v71, v65);
  v66 = (uint64_t)v71;
  mayAliasInScopes[3] = 0;
  mayAliasInScopes[4] = 0;
  *mayAliasInScopes = (uint64_t ***)v66;
  mayAliasInScopes[1] = (uint64_t ***)(mayAliasInScopes + 3);
  mayAliasInScopes[2] = (uint64_t ***)0x100000000;
LABEL_23:
  v26 = *((unsigned int *)mayAliasInScopes + 4);
  if (!(_DWORD)v26)
  {
LABEL_8:
    v8 = 0;
    goto LABEL_9;
  }
  v27 = (const llvm::MDNode **)(mayAliasInScopes[1] + 1);
  v28 = 16 * v26;
  while (*((_DWORD *)v27 - 2) != 7)
  {
    v8 = 0;
    v27 += 2;
    v28 -= 16;
    if (!v28)
      goto LABEL_9;
  }
  v8 = *v27;
LABEL_9:
  if ((*((_BYTE *)a2 + 23) & 0x20) == 0)
    goto LABEL_10;
  v46 = ***a2;
  v71 = a2;
  v47 = *(_DWORD *)(v46 + 2496);
  if (v47)
  {
    v48 = *(_QWORD *)(v46 + 2480);
    v49 = v47 - 1;
    v50 = v49 & ((a2 >> 4) ^ (a2 >> 9));
    mayAliasInScopes = (uint64_t ****)(v48 + 40 * v50);
    v51 = *mayAliasInScopes;
    if (*mayAliasInScopes == a2)
      goto LABEL_55;
    v59 = 0;
    v60 = 1;
    while (v51 != (uint64_t ***)-4096)
    {
      if (v59)
        v61 = 0;
      else
        v61 = v51 == (uint64_t ***)-8192;
      if (v61)
        v59 = mayAliasInScopes;
      v62 = v50 + v60++;
      v50 = v62 & v49;
      mayAliasInScopes = (uint64_t ****)(v48 + 40 * v50);
      v51 = *mayAliasInScopes;
      if (*mayAliasInScopes == a2)
        goto LABEL_55;
    }
    if (v59)
      v69 = v59;
    else
      v69 = mayAliasInScopes;
  }
  else
  {
    v69 = 0;
  }
  mayAliasInScopes = (uint64_t ****)sub_1C541AB24(v46 + 2480, (uint64_t)&v71, (uint64_t *)&v71, v69);
  v70 = (uint64_t)v71;
  mayAliasInScopes[3] = 0;
  mayAliasInScopes[4] = 0;
  *mayAliasInScopes = (uint64_t ***)v70;
  mayAliasInScopes[1] = (uint64_t ***)(mayAliasInScopes + 3);
  mayAliasInScopes[2] = (uint64_t ***)0x100000000;
LABEL_55:
  v52 = *((unsigned int *)mayAliasInScopes + 4);
  if ((_DWORD)v52)
  {
    v53 = (const llvm::MDNode **)(mayAliasInScopes[1] + 1);
    v54 = 16 * v52;
    while (*((_DWORD *)v53 - 2) != 8)
    {
      v9 = 0;
      v53 += 2;
      v54 -= 16;
      if (!v54)
        goto LABEL_11;
    }
    v9 = *v53;
    goto LABEL_11;
  }
LABEL_10:
  v9 = 0;
LABEL_11:
  if (llvm::ScopedNoAliasAAResult::mayAliasInScopes((llvm::ScopedNoAliasAAResult *)mayAliasInScopes, v8, v9))return 7;
  else
    return 4;
}

_QWORD *sub_1C4F824CC(_QWORD *result, _BYTE *a2, llvm::SmallPtrSetImplBase *this)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  _BYTE *v10;

  v3 = *((unsigned int *)result + 2);
  if ((_DWORD)v3)
  {
    v6 = result;
    v7 = -1 * v3;
    do
    {
      v8 = (unsigned __int8 *)v6[v7];
      if (*v8 - 4 <= 0x1E)
      {
        v9 = *((unsigned int *)v8 + 2);
        if (v9 >= 2)
        {
          v10 = *(_BYTE **)&v8[-8 * v9 + 8];
          if (v10)
          {
            switch(*v10)
            {
              case 4:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 0xA:
              case 0xB:
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x14:
              case 0x15:
              case 0x16:
              case 0x17:
              case 0x18:
              case 0x19:
              case 0x1A:
              case 0x1B:
              case 0x1C:
              case 0x1D:
              case 0x1E:
              case 0x1F:
              case 0x20:
              case 0x21:
              case 0x22:
                break;
              default:
                goto LABEL_5;
            }
          }
        }
        else
        {
LABEL_5:
          v10 = 0;
        }
        if (v10 == a2)
          result = sub_1C4774094(this, (uint64_t)v8);
      }
      ++v7;
    }
    while (v7 * 8);
  }
  return result;
}

uint64_t sub_1C4F82580(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t *j;
  _QWORD *v13;
  uint64_t v14;
  unsigned int *v15;

  LODWORD(v2) = *(_DWORD *)(a1 + 20);
  if ((int)v2 - *(_DWORD *)(a1 + 24) > (*(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24)))
    return 0;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5 == *(_QWORD *)a1)
    v2 = v2;
  else
    v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2)
  {
    v6 = 8 * v2;
    for (i = *(uint64_t **)(a1 + 8); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v6 -= 8;
      if (!v6)
        return 1;
    }
  }
  else
  {
    i = *(uint64_t **)(a1 + 8);
  }
  v8 = (uint64_t *)(v5 + 8 * v2);
  if (i == v8)
    return 1;
  v9 = sub_1C477672C(a2, *i);
  v10 = *(_QWORD *)(a2 + 8);
  v11 = (unsigned int *)(v10 == *(_QWORD *)a2 ? a2 + 20 : a2 + 16);
  if (v9 == (_QWORD *)(v10 + 8 * *v11))
    return 0;
  for (j = i + 1; ; ++j)
  {
    v3 = j == v8;
    if (j == v8)
      break;
    if ((unint64_t)*j < 0xFFFFFFFFFFFFFFFELL)
    {
      v13 = sub_1C477672C(a2, *j);
      v14 = *(_QWORD *)(a2 + 8);
      v15 = (unsigned int *)(v14 == *(_QWORD *)a2 ? a2 + 20 : a2 + 16);
      if (v13 == (_QWORD *)(v14 + 8 * *v15))
        break;
    }
  }
  return v3;
}

void llvm::ScopedNoAliasAA::run(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_1C4F8269C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Scoped NoAlias Alias Analysis";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "scoped-noalias-aa";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &llvm::ScopedNoAliasAAWrapperPass::ID;
  *(_WORD *)(v2 + 40) = 256;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::ScopedNoAliasAAWrapperPass>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::ScopedNoAliasAAWrapperPass::doInitialization(llvm::ScopedNoAliasAAWrapperPass *this, llvm::Module *a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)operator new();
  *v3 = 0;
  v4 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v3;
  if (v4)
    MEMORY[0x1CAA32FC0](v4, 0x20C4093837F09);
  return 0;
}

uint64_t llvm::ScopedNoAliasAAWrapperPass::doFinalization(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x20C4093837F09);
  return 0;
}

uint64_t sub_1C4F827D0()
{
  int v1;
  char v2;
  char *v3;

  v2 = 1;
  v3 = &v2;
  v1 = 1;
  sub_1C61BCD3C((uint64_t)&unk_1ED82EC08, "enable-scoped-noalias", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82EC08, &dword_1C475E000);
}

uint64_t llvm::canTrackArgumentsInterprocedurally(llvm *this, llvm::Function *a2)
{
  if ((*((_DWORD *)this + 8) & 0xFu) - 7 <= 1)
    return llvm::Function::hasAddressTaken(this, 0, 0, 1, 0, 0) ^ 1;
  else
    return 0;
}

BOOL llvm::canTrackReturnsInterprocedurally(llvm *this, llvm::Function *a2)
{
  int v3;
  _BOOL8 result;
  llvm::GlobalValue *Section;
  uint64_t v6;
  llvm::Module *v7;
  uint64_t v8;

  v3 = *((unsigned __int8 *)this + 16);
  if (this && v3 == 3)
  {
    if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
      return 0;
  }
  else if (!*((_BYTE *)this + 16)
         && *((llvm **)this + 9) == (llvm *)((char *)this + 72)
         && (*((_BYTE *)this + 34) & 0x80) == 0)
  {
    return 0;
  }
  result = 0;
  if (((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x7D5) != 0)
  {
    if (v3 == 3)
    {
      Section = llvm::GlobalValue::getSection(this);
      if (v6 == 12
        && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
        && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
      {
        return 0;
      }
    }
    if ((*((_DWORD *)this + 8) & 0xFu) - 5 < 4 || (result = 0, ((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x614) == 0))
    {
      v7 = (llvm::Module *)*((_QWORD *)this + 5);
      if (v7 && llvm::Module::getSemanticInterposition(v7) && (*((_BYTE *)this + 33) & 0x40) == 0)
        return 0;
      v8 = *((_QWORD *)this + 14);
      return !v8 || (*(_BYTE *)(v8 + 14) & 2) == 0;
    }
  }
  return result;
}

uint64_t llvm::canTrackGlobalVariableInterprocedurally(llvm *this, llvm::GlobalVariable *a2)
{
  int v3;
  llvm::GlobalValue *Section;
  uint64_t v5;
  llvm::Module *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t *v9;
  int v10;
  llvm *v11;
  uint64_t v12;

  if ((*((_BYTE *)this + 80) & 1) != 0)
    return 0;
  v3 = *((_DWORD *)this + 8);
  if ((v3 & 0xFu) - 7 > 1)
    return 0;
  if (*((_BYTE *)this + 16))
  {
    if (*((_BYTE *)this + 16) == 3)
    {
      if ((*((_DWORD *)this + 5) & 0x7FFFFFF) == 0)
        return 0;
      Section = llvm::GlobalValue::getSection(this);
      if (v5 == 12
        && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
        && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
      {
        return 0;
      }
    }
  }
  else if ((v3 & 0x800000) == 0 && *((llvm **)this + 9) == (llvm *)((char *)this + 72))
  {
    return 0;
  }
  if ((*((_DWORD *)this + 8) & 0xFu) - 5 >= 4)
  {
    result = 0;
    if (((1 << (*((_DWORD *)this + 8) & 0xF)) & 0x614) != 0)
      return result;
  }
  v6 = (llvm::Module *)*((_QWORD *)this + 5);
  if (v6 && llvm::Module::getSemanticInterposition(v6) && (*((_BYTE *)this + 33) & 0x40) == 0
    || (*((_BYTE *)this + 80) & 2) != 0)
  {
    return 0;
  }
  v7 = *((_QWORD *)this + 1);
  if (!v7)
    return 1;
  result = 1;
  do
  {
    v9 = *(uint64_t **)(v7 + 24);
    v10 = *((unsigned __int8 *)v9 + 16);
    if (v9 && v10 == 61)
    {
      v11 = (llvm *)*(v9 - 8);
      if (v11 == this || (*((_WORD *)v9 + 9) & 1) != 0)
        return 0;
      v12 = *(_QWORD *)v11;
    }
    else
    {
      if (v10 != 60 || (*((_WORD *)v9 + 9) & 1) != 0)
        return 0;
      v12 = *v9;
    }
    if (v12 != *((_QWORD *)this + 3))
      return 0;
    v7 = *(_QWORD *)(v7 + 8);
  }
  while (v7);
  return result;
}

void llvm::computeKnownBits(llvm *this, int8x8_t *a2, llvm::KnownBits *a3, const llvm::DataLayout *a4, const llvm::DataLayout *a5, llvm::AssumptionCache *a6, const llvm::Instruction *a7, const llvm::DominatorTree *a8, llvm::OptimizationRemarkEmitter *a9, BOOL a10)
{
  const llvm::DataLayout *v10[5];
  char v11;

  if (!a6 || !*((_QWORD *)a6 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a6 = this, !*((_QWORD *)this + 5)))
      a6 = 0;
  }
  v10[0] = a3;
  v10[1] = a5;
  v10[2] = a6;
  v10[3] = a7;
  v10[4] = a8;
  v11 = (char)a9;
  sub_1C4F82B7C((uint64_t)this, a2, a4, v10);
}

void sub_1C4F82B7C(uint64_t a1, int8x8_t *a2, unsigned int a3, const llvm::DataLayout **a4)
{
  int v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v13;
  unint64_t v14;
  int v15;

  v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
  if (v5 == 19)
  {
    v6 = a2[1].u32[0];
    if (v6 > 0x40)
      bzero(*(void **)a2, ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
    else
      *a2 = 0;
    v9 = a2[3].u32[0];
    if (v9 > 0x40)
      bzero(*(void **)&a2[2], ((unint64_t)(v9 + 63) >> 3) & 0x3FFFFFF8);
    else
      a2[2] = 0;
    return;
  }
  if (v5 != 18)
  {
    v8 = 1;
    v15 = 1;
LABEL_12:
    v14 = v8;
    sub_1C4F82D44(a1, (llvm::APInt *)&v14, a2, a3, a4);
    return;
  }
  v7 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  v15 = v7;
  if (v7 <= 0x40)
  {
    if (v7)
      v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
    else
      v8 = 0;
    goto LABEL_12;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v14, -1, 1);
  v13 = v15;
  sub_1C4F82D44(a1, (llvm::APInt *)&v14, a2, a3, a4);
  if (v13 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
}

void llvm::computeKnownBits(llvm *this, const llvm::Value *a2, int8x8_t *a3, llvm::KnownBits *a4, const llvm::DataLayout *a5, const llvm::DataLayout *a6, llvm::AssumptionCache *a7, const llvm::Instruction *a8, const llvm::DominatorTree *a9, llvm::OptimizationRemarkEmitter *a10, BOOL a11)
{
  const llvm::DataLayout *v11[5];
  char v12;

  if (!a7 || !*((_QWORD *)a7 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a7 = this, !*((_QWORD *)this + 5)))
      a7 = 0;
  }
  v11[0] = a4;
  v11[1] = a6;
  v11[2] = a7;
  v11[3] = a8;
  v11[4] = a9;
  v12 = (char)a10;
  sub_1C4F82D44((uint64_t)this, a2, a3, a5, v11);
}

void sub_1C4F82D44(uint64_t a1, llvm::APInt *this, int8x8_t *a3, unsigned int a4, const llvm::DataLayout **a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int8x8_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  int8x8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  int8x8_t *v26;
  int8x8_t *v27;
  uint64_t v28;
  unint64_t v29;
  int8x8_t *v30;
  int v31;
  llvm::Type *v32;
  llvm::APInt *v33;
  llvm::UndefValue *AggregateElement;
  llvm::UndefValue *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  int8x8_t *v53;
  int8x8_t *v54;
  uint64_t v55;
  unint64_t v56;
  int8x8_t *v57;
  int v58;
  unsigned int i;
  llvm::APInt *v60;
  unsigned int v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unsigned int v66;
  size_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  llvm::Module *v81;
  uint64_t v82;
  unsigned __int8 v83;
  int8x8_t v84;
  void *v85;
  int v86;
  void *v87;
  unsigned int v88;
  uint64_t v89;
  void *__src;
  uint64_t v91;

  v10 = *((_DWORD *)this + 2);
  if (v10 > 0x40)
  {
    if (llvm::APInt::countLeadingZerosSlowCase(this) == v10)
      goto LABEL_6;
  }
  else if (!*(_QWORD *)this)
  {
LABEL_6:
    v11 = a3[1].u32[0];
    if (v11 > 0x40)
      bzero(*(void **)a3, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    else
      *a3 = 0;
    v12 = a3[3].u32[0];
    if (v12 > 0x40)
      bzero(*(void **)&a3[2], ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8);
    else
LABEL_10:
      a3[2] = 0;
    return;
  }
  if (*(_BYTE *)(*(_QWORD *)a1 + 8) == 19)
    goto LABEL_6;
  v89 = 0;
  __src = &v89;
  v91 = 0;
  if (sub_1C4D89F84((uint64_t)&__src, (unsigned __int8 *)a1))
  {
    v13 = v89;
    v14 = *(unsigned int *)(v89 + 8);
    LODWORD(v91) = v14;
    if (v14 > 0x40)
    {
      __src = (void *)operator new[]();
      memcpy(__src, *(const void **)v13, ((unint64_t)(v14 + 63) >> 3) & 0x3FFFFFF8);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&__src);
      LODWORD(v14) = v91;
      v16 = (int8x8_t)__src;
      v17 = *(unsigned int *)(v13 + 8);
      if (v17 > 0x40)
      {
        v18 = (void *)operator new[]();
        memcpy(v18, *(const void **)v13, ((unint64_t)(v17 + 63) >> 3) & 0x3FFFFFF8);
LABEL_18:
        if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
          ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
        *a3 = v16;
        a3[1].i32[0] = v14;
        if (a3[3].i32[0] >= 0x41u)
        {
          v84 = a3[2];
          if (v84)
            MEMORY[0x1CAA32F9C](*(_QWORD *)&v84, 0x1000C8000313F17);
        }
        a3[2] = (int8x8_t)v18;
        a3[3].i32[0] = v17;
        return;
      }
    }
    else
    {
      v15 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v14;
      if (!(_DWORD)v14)
        v15 = 0;
      v16 = (int8x8_t)(v15 & ~*(_QWORD *)v89);
      LODWORD(v17) = v14;
    }
    v18 = *(void **)v13;
    goto LABEL_18;
  }
  switch(*(_BYTE *)(a1 + 16))
  {
    case 0xA:
      v24 = a3[1].u32[0];
      if (v24 > 0x40)
      {
        memset(*(void **)a3, 255, ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8);
        LODWORD(v24) = a3[1].i32[0];
        if ((_DWORD)v24)
        {
LABEL_32:
          v25 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v24;
          if (v24 < 0x41)
          {
LABEL_33:
            v26 = a3;
            goto LABEL_34;
          }
          v26 = (int8x8_t *)(*(_QWORD *)a3 + 8 * ((((unint64_t)v24 + 63) >> 6) - 1));
LABEL_34:
          *(_QWORD *)v26 &= v25;
          v27 = a3 + 2;
          v28 = a3[3].u32[0];
          if (v28 > 0x40)
          {
            memset(*(void **)&a3[2], 255, ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(v28) = a3[3].i32[0];
            if ((_DWORD)v28)
            {
LABEL_36:
              v29 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
              if (v28 >= 0x41)
              {
                v30 = (int8x8_t *)(*(_QWORD *)v27
                                 + 8 * ((((unint64_t)v28 + 63) >> 6) - 1));
                goto LABEL_38;
              }
LABEL_37:
              v30 = a3 + 2;
LABEL_38:
              *(_QWORD *)v30 &= v29;
              v31 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
              if (!v31)
                return;
              v32 = 0;
              while (1)
              {
                if (*((_DWORD *)this + 2) >= 0x41u)
                  v33 = (llvm::APInt *)(*(_QWORD *)this + 8 * (v32 >> 6));
                else
                  v33 = this;
                if (((*(_QWORD *)v33 >> (char)v32) & 1) != 0)
                {
                  AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a1, v32);
                  if (!AggregateElement || (v35 = AggregateElement, *((_BYTE *)AggregateElement + 16) != 16))
                  {
                    v82 = a3[1].u32[0];
                    if (v82 > 0x40)
                      bzero(*(void **)a3, ((unint64_t)(v82 + 63) >> 3) & 0x3FFFFFF8);
                    else
                      *a3 = 0;
                    v22 = a3[3].u32[0];
                    if (v22 > 0x40)
                    {
                      v23 = (_QWORD *)*v27;
                      goto LABEL_29;
                    }
                    *v27 = 0;
                    return;
                  }
                  v36 = *((unsigned int *)AggregateElement + 8);
                  v86 = v36;
                  if (v36 > 0x40)
                  {
                    v40 = ((unint64_t)(v36 + 63) >> 3) & 0x3FFFFFF8;
                    v85 = (void *)operator new[]();
                    memcpy(v85, *((const void **)v35 + 3), v40);
                    llvm::APInt::flipAllBitsSlowCase((uint64_t)&v85);
                    LODWORD(v36) = v86;
                    v39 = (unint64_t)v85;
                  }
                  else
                  {
                    v37 = ~*((_QWORD *)AggregateElement + 3);
                    v38 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v36;
                    if (!(_DWORD)v36)
                      v38 = 0;
                    v39 = v38 & v37;
                    v85 = (void *)(v38 & v37);
                  }
                  v86 = 0;
                  v41 = a3[1].u32[0];
                  if (v41 > 0x40)
                  {
                    v42 = (_QWORD *)*a3;
                    v43 = (unint64_t)(v41 + 63) >> 6;
                    v44 = (uint64_t *)v39;
                    do
                    {
                      v45 = *v44++;
                      *v42++ &= v45;
                      --v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    *(_QWORD *)a3 &= v39;
                  }
                  if (v36 >= 0x41 && v39)
                    MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
                  v46 = a3[3].u32[0];
                  if (v46 > 0x40)
                  {
                    v47 = (_QWORD *)*v27;
                    v48 = (uint64_t *)*((_QWORD *)v35 + 3);
                    v49 = (unint64_t)(v46 + 63) >> 6;
                    do
                    {
                      v50 = *v48++;
                      *v47++ &= v50;
                      --v49;
                    }
                    while (v49);
                  }
                  else
                  {
                    *(_QWORD *)v27 &= *((_QWORD *)v35 + 3);
                  }
                }
                v32 = (llvm::Type *)((_DWORD)v32 + 1);
                if ((_DWORD)v32 == v31)
                  return;
              }
            }
          }
          else
          {
            *v27 = (int8x8_t)-1;
            if ((_DWORD)v28)
              goto LABEL_36;
          }
          v29 = 0;
          goto LABEL_37;
        }
      }
      else
      {
        *a3 = (int8x8_t)-1;
        if ((_DWORD)v24)
          goto LABEL_32;
      }
      v25 = 0;
      goto LABEL_33;
    case 0xD:
    case 0x13:
      v19 = a3[1].u32[0];
      if (v19 <= 0x40)
      {
        *a3 = (int8x8_t)-1;
        if ((_DWORD)v19)
          goto LABEL_25;
LABEL_127:
        v20 = 0;
        goto LABEL_26;
      }
      memset(*(void **)a3, 255, ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
      LODWORD(v19) = a3[1].i32[0];
      if (!(_DWORD)v19)
        goto LABEL_127;
LABEL_25:
      v20 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v19;
      if (v19 < 0x41)
      {
LABEL_26:
        v21 = a3;
        goto LABEL_27;
      }
      v21 = (int8x8_t *)(*(_QWORD *)a3 + 8 * ((((unint64_t)v19 + 63) >> 6) - 1));
LABEL_27:
      *(_QWORD *)v21 &= v20;
      v22 = a3[3].u32[0];
      if (v22 <= 0x40)
        goto LABEL_10;
      v23 = (_QWORD *)a3[2];
LABEL_29:
      bzero(v23, ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8);
      return;
    case 0xF:
      v51 = a3[1].u32[0];
      if (v51 > 0x40)
      {
        memset(*(void **)a3, 255, ((unint64_t)(v51 + 63) >> 3) & 0x3FFFFFF8);
        LODWORD(v51) = a3[1].i32[0];
        if ((_DWORD)v51)
        {
LABEL_66:
          v52 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v51;
          if (v51 >= 0x41)
          {
            v53 = (int8x8_t *)(*(_QWORD *)a3
                             + 8 * ((((unint64_t)v51 + 63) >> 6) - 1));
LABEL_68:
            *(_QWORD *)v53 &= v52;
            v54 = a3 + 2;
            v55 = a3[3].u32[0];
            if (v55 > 0x40)
            {
              memset(*(void **)&a3[2], 255, ((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8);
              LODWORD(v55) = a3[3].i32[0];
              if ((_DWORD)v55)
              {
LABEL_70:
                v56 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v55;
                if (v55 >= 0x41)
                {
                  v57 = (int8x8_t *)(*(_QWORD *)v54
                                   + 8 * ((((unint64_t)v55 + 63) >> 6) - 1));
LABEL_72:
                  *(_QWORD *)v57 &= v56;
                  v58 = *(_DWORD *)(*(_QWORD *)a1 + 32);
                  if (v58)
                  {
                    for (i = 0; i != v58; ++i)
                    {
                      if (*((_DWORD *)this + 2) >= 0x41u)
                        v60 = (llvm::APInt *)(*(_QWORD *)this + 8 * (i >> 6));
                      else
                        v60 = this;
                      if (((*(_QWORD *)v60 >> i) & 1) != 0)
                      {
                        llvm::ConstantDataSequential::getElementAsAPInt((llvm::ConstantDataSequential *)a1);
                        v61 = v91;
                        v88 = v91;
                        if (v91 > 0x40)
                        {
                          v67 = (((unint64_t)v91 + 63) >> 3) & 0x3FFFFFF8;
                          v87 = (void *)operator new[]();
                          v62 = (unint64_t)__src;
                          memcpy(v87, __src, v67);
                          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v87);
                          v66 = v88;
                          v65 = (unint64_t)v87;
                        }
                        else
                        {
                          v62 = (unint64_t)__src;
                          v63 = ~(unint64_t)__src;
                          v64 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v91;
                          if (!(_DWORD)v91)
                            v64 = 0;
                          v65 = v64 & v63;
                          v87 = (void *)(v64 & v63);
                          v66 = v91;
                        }
                        v88 = 0;
                        v68 = a3[1].u32[0];
                        if (v68 > 0x40)
                        {
                          v69 = (_QWORD *)*a3;
                          v70 = (unint64_t)(v68 + 63) >> 6;
                          v71 = (uint64_t *)v65;
                          do
                          {
                            v72 = *v71++;
                            *v69++ &= v72;
                            --v70;
                          }
                          while (v70);
                        }
                        else
                        {
                          *(_QWORD *)a3 &= v65;
                        }
                        if (v66 >= 0x41 && v65)
                          MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
                        v73 = a3[3].u32[0];
                        if (v73 > 0x40)
                        {
                          v74 = (_QWORD *)*v54;
                          v75 = (unint64_t)(v73 + 63) >> 6;
                          v76 = (uint64_t *)v62;
                          do
                          {
                            v77 = *v76++;
                            *v74++ &= v77;
                            --v75;
                          }
                          while (v75);
                        }
                        else
                        {
                          *(_QWORD *)v54 &= v62;
                        }
                        if (v61 >= 0x41 && v62)
                          MEMORY[0x1CAA32F9C](v62, 0x1000C8000313F17);
                      }
                    }
                  }
                  return;
                }
LABEL_71:
                v57 = a3 + 2;
                goto LABEL_72;
              }
            }
            else
            {
              *v54 = (int8x8_t)-1;
              if ((_DWORD)v55)
                goto LABEL_70;
            }
            v56 = 0;
            goto LABEL_71;
          }
LABEL_67:
          v53 = a3;
          goto LABEL_68;
        }
      }
      else
      {
        *a3 = (int8x8_t)-1;
        if ((_DWORD)v51)
          goto LABEL_66;
      }
      v52 = 0;
      goto LABEL_67;
    default:
      v78 = a3[1].u32[0];
      if (v78 > 0x40)
        bzero(*(void **)a3, ((unint64_t)(v78 + 63) >> 3) & 0x3FFFFFF8);
      else
        *a3 = 0;
      v79 = a3[3].u32[0];
      if (v79 > 0x40)
        bzero(*(void **)&a3[2], ((unint64_t)(v79 + 63) >> 3) & 0x3FFFFFF8);
      else
        a3[2] = 0;
      if (a4 != 6)
      {
        v80 = *(unsigned __int8 *)(a1 + 16);
        if (v80 - 11 >= 2)
        {
          if (v80 == 1)
          {
            if ((*(_DWORD *)(a1 + 32) & 0xFu) - 5 < 4 || ((1 << (*(_DWORD *)(a1 + 32) & 0xF)) & 0x614) == 0)
            {
              v81 = *(llvm::Module **)(a1 + 40);
              if (!v81 || !llvm::Module::getSemanticInterposition(v81) || (*(_BYTE *)(a1 + 33) & 0x40) != 0)
                sub_1C4F82B7C(*(_QWORD *)(a1 - 32), a3, a4 + 1, a5);
            }
          }
          else
          {
            if (v80 > 0x1B || v80 == 5)
              sub_1C4F95DFC((llvm::UndefValue *)a1, this, a3, a4, (uint64_t)a5);
            if (*(_BYTE *)(*(_QWORD *)a1 + 8) == 15)
            {
              llvm::Value::getPointerAlignment((llvm::Value *)a1, *a5);
              sub_1C4912E54(a3, 0, v83);
            }
            sub_1C4F9B07C((llvm::APInt *)a1, (uint64_t)a3, a4, (__int128 *)a5);
          }
        }
      }
      return;
  }
}

void llvm::computeKnownBits(llvm *this@<X0>, const llvm::Value *a2@<X1>, const llvm::DataLayout *a3@<X2>, llvm::AssumptionCache *a4@<X4>, const llvm::Instruction *a5@<X5>, const llvm::DominatorTree *a6@<X6>, llvm::OptimizationRemarkEmitter *a7@<X7>, uint64_t a8@<X3>, _DWORD *a9@<X8>, BOOL a10)
{
  uint64_t v10[5];
  char v11;

  if (!a4 || !*((_QWORD *)a4 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a4 = this, !*((_QWORD *)this + 5)))
      a4 = 0;
  }
  v10[0] = (uint64_t)a2;
  v10[1] = a8;
  v10[2] = (uint64_t)a4;
  v10[3] = (uint64_t)a5;
  v10[4] = (uint64_t)a6;
  v11 = (char)a7;
  sub_1C4F83784((uint64_t)this, a3, v10, a9);
}

void sub_1C4F83784(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t *a3@<X2>, _DWORD *a4@<X8>)
{
  uint64_t v8;
  int v9;
  llvm::Type *v10;
  unsigned int PrimitiveSizeInBits;

  v8 = *(_QWORD *)a1;
  v9 = *(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE;
  v10 = *(llvm::Type **)a1;
  if (v9 == 18)
    v10 = **(llvm::Type ***)(v8 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v10);
  if (!PrimitiveSizeInBits)
    PrimitiveSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits(*a3, v8);
  a4[2] = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a4, 0, 0);
    a4[6] = PrimitiveSizeInBits;
    llvm::APInt::initSlowCase((llvm::APInt *)(a4 + 4), 0, 0);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    a4[6] = PrimitiveSizeInBits;
    *((_QWORD *)a4 + 2) = 0;
  }
  sub_1C4F82B7C(a1, (int8x8_t *)a4, a2, (const llvm::DataLayout **)a3);
}

uint64_t llvm::computeKnownBits@<X0>(llvm *this@<X0>, const llvm::Value *a2@<X1>, const llvm::APInt *a3@<X2>, llvm::AssumptionCache *a4@<X5>, const llvm::Instruction *a5@<X6>, const llvm::DominatorTree *a6@<X7>, uint64_t a7@<X4>, _DWORD *a8@<X8>, llvm::OptimizationRemarkEmitter *a9, BOOL a10)
{
  uint64_t v12[5];
  char v13;

  if (!a4 || !*((_QWORD *)a4 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a4 = this, !*((_QWORD *)this + 5)))
      a4 = 0;
  }
  v12[0] = (uint64_t)a3;
  v12[1] = a7;
  v12[2] = (uint64_t)a4;
  v12[3] = (uint64_t)a5;
  v12[4] = (uint64_t)a6;
  v13 = (char)a9;
  return sub_1C4F838B8((uint64_t *)this, a2, v12, a8);
}

uint64_t sub_1C4F838B8@<X0>(uint64_t *a1@<X0>, llvm::APInt *a2@<X1>, uint64_t *a3@<X3>, _DWORD *a4@<X8>)
{
  int v6;
  uint64_t v8;
  int v9;
  llvm::Type *v10;
  unsigned int PrimitiveSizeInBits;

  v6 = (int)a1;
  v8 = *a1;
  v9 = *(_DWORD *)(*a1 + 8) & 0xFE;
  v10 = (llvm::Type *)*a1;
  if (v9 == 18)
    v10 = **(llvm::Type ***)(v8 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v10);
  if (!PrimitiveSizeInBits)
    PrimitiveSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits(*a3, v8);
  a4[2] = PrimitiveSizeInBits;
  if (PrimitiveSizeInBits > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)a4, 0, 0);
    a4[6] = PrimitiveSizeInBits;
    llvm::APInt::initSlowCase((llvm::APInt *)(a4 + 4), 0, 0);
  }
  else
  {
    *(_QWORD *)a4 = 0;
    a4[6] = PrimitiveSizeInBits;
    *((_QWORD *)a4 + 2) = 0;
  }
  return sub_1C4F82D44(v6, a2);
}

BOOL llvm::haveNoCommonBitsSet(llvm *this, const llvm::Value *a2, void **a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  char v7;
  int v14;
  int v15;
  void **v16;
  int v17;
  void **v18;
  void **v19;
  const llvm::DataLayout *v20;
  char *v21;
  int v22;
  void **v23;
  const llvm::DataLayout *v24;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  llvm *v29;
  unsigned int v30;
  _BOOL8 v31;
  void **v32;
  void **v33;
  uint64_t v35;
  size_t v36;
  char *v37;
  uint64_t v38;
  int8x8_t v39;
  int8x8_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  void *__src;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  void **p_src;
  const llvm::DataLayout *v49;
  llvm::AssumptionCache *v50;
  const llvm::Instruction *v51;
  uint64_t v52;
  char v53;

  v7 = (char)a7;
  __src = 0;
  p_src = &__src;
  v14 = *((unsigned __int8 *)this + 16);
  if (v14 == 5)
  {
    if (*((_WORD *)this + 9) != 28
      || (sub_1C4D9EC28(&p_src, 30, *((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))) & 1) == 0
      && !sub_1C4D9EC28(&p_src, 30, ((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4]))
    {
      goto LABEL_13;
    }
  }
  else if (v14 != 56
         || (sub_1C4D9EC28(&p_src, 30, *((_QWORD *)this - 8)) & 1) == 0
         && (sub_1C4D9EC28(&p_src, 30, *((_QWORD *)this - 4)) & 1) == 0)
  {
LABEL_13:
    v15 = *((unsigned __int8 *)a2 + 16);
    goto LABEL_14;
  }
  v15 = *((unsigned __int8 *)a2 + 16);
  if (v15 == 5)
  {
    if (*((_WORD *)a2 + 9) != 28)
      goto LABEL_14;
    v32 = (void **)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
    if (__src == *v32)
      return 1;
    v16 = v32 + 4;
  }
  else
  {
    if (v15 != 56)
      goto LABEL_14;
    if (__src == *((void **)a2 - 8))
      return 1;
    v16 = (void **)((char *)a2 - 32);
  }
  if (__src == *v16)
    return 1;
LABEL_14:
  p_src = &__src;
  if (v15 == 5)
  {
    if (*((_WORD *)a2 + 9) != 28
      || (sub_1C4D9EC28(&p_src, 30, *((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))) & 1) == 0
      && !sub_1C4D9EC28(&p_src, 30, ((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4]))
    {
      goto LABEL_26;
    }
  }
  else if (v15 != 56
         || (sub_1C4D9EC28(&p_src, 30, *((_QWORD *)a2 - 8)) & 1) == 0
         && (sub_1C4D9EC28(&p_src, 30, *((_QWORD *)a2 - 4)) & 1) == 0)
  {
LABEL_26:
    v17 = *((unsigned __int8 *)this + 16);
    goto LABEL_27;
  }
  v17 = *((unsigned __int8 *)this + 16);
  if (v17 == 5)
  {
    if (*((_WORD *)this + 9) != 28)
      goto LABEL_27;
    v33 = (void **)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    if (__src == *v33)
      return 1;
    v18 = v33 + 4;
  }
  else
  {
    if (v17 != 56)
      goto LABEL_27;
    if (__src == *((void **)this - 8))
      return 1;
    v18 = (void **)((char *)this - 32);
  }
  if (__src == *v18)
    return 1;
LABEL_27:
  if (v17 == 5)
  {
    if (*((_WORD *)this + 9) != 28)
      goto LABEL_36;
    v21 = (char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF);
    v19 = *(void ***)v21;
    if (!*(_QWORD *)v21)
      goto LABEL_36;
    v20 = (const llvm::DataLayout *)*((_QWORD *)v21 + 4);
    if (!v20)
      goto LABEL_36;
  }
  else
  {
    if (v17 != 56)
      goto LABEL_36;
    v19 = (void **)*((_QWORD *)this - 8);
    if (!v19)
      goto LABEL_36;
    v20 = (const llvm::DataLayout *)*((_QWORD *)this - 4);
    if (!v20)
      goto LABEL_36;
  }
  p_src = v19;
  v49 = v20;
  if ((sub_1C4FA44A0(&p_src, (uint64_t)a2) & 1) != 0)
    return 1;
LABEL_36:
  v22 = *((unsigned __int8 *)a2 + 16);
  if (v22 != 5)
  {
    if (v22 != 56)
      goto LABEL_45;
    v23 = (void **)*((_QWORD *)a2 - 8);
    if (!v23)
      goto LABEL_45;
    v24 = (const llvm::DataLayout *)*((_QWORD *)a2 - 4);
    if (!v24)
      goto LABEL_45;
    goto LABEL_44;
  }
  if (*((_WORD *)a2 + 9) == 28)
  {
    v25 = (char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF);
    v23 = *(void ***)v25;
    if (*(_QWORD *)v25)
    {
      v24 = (const llvm::DataLayout *)*((_QWORD *)v25 + 4);
      if (v24)
      {
LABEL_44:
        p_src = v23;
        v49 = v24;
        if ((sub_1C4FA44A0(&p_src, (uint64_t)this) & 1) == 0)
          goto LABEL_45;
        return 1;
      }
    }
  }
LABEL_45:
  v26 = *(_QWORD *)this;
  v27 = *(_DWORD *)(*(_QWORD *)this + 8);
  if ((v27 & 0xFE) == 0x12)
  {
    v26 = **(_QWORD **)(v26 + 16);
    v27 = *(_DWORD *)(v26 + 8);
  }
  v28 = v27 >> 8;
  v45 = v27 >> 8;
  if (v27 >> 8 > 0x40)
  {
    v35 = v26;
    llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
    v47 = v28;
    llvm::APInt::initSlowCase((llvm::APInt *)&v46, 0, 0);
    v28 = *(_DWORD *)(v35 + 8) >> 8;
    v41 = v28;
    if (v28 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v40, 0, 0);
      v43 = v28;
      llvm::APInt::initSlowCase((llvm::APInt *)&v42, 0, 0);
      if (!a5)
        goto LABEL_78;
      goto LABEL_50;
    }
  }
  else
  {
    v47 = v27 >> 8;
    __src = 0;
    v46 = 0;
    v41 = v27 >> 8;
  }
  v43 = v28;
  v40 = 0;
  v42 = 0;
  if (!a5)
  {
LABEL_78:
    if (*((unsigned __int8 *)this + 16) < 0x1Cu || (v29 = this, !*((_QWORD *)this + 5)))
      v29 = 0;
    goto LABEL_51;
  }
LABEL_50:
  v29 = a5;
  if (!*((_QWORD *)a5 + 5))
    goto LABEL_78;
LABEL_51:
  p_src = a3;
  v49 = a4;
  v50 = v29;
  v51 = a6;
  v52 = 0;
  v53 = v7;
  sub_1C4F82B7C((uint64_t)this, (int8x8_t *)&__src, 0, (const llvm::DataLayout **)&p_src);
  if (!a5 || !*((_QWORD *)a5 + 5))
  {
    if (*((unsigned __int8 *)a2 + 16) < 0x1Cu || (a5 = a2, !*((_QWORD *)a2 + 5)))
      a5 = 0;
  }
  p_src = a3;
  v49 = a4;
  v50 = a5;
  v51 = a6;
  v52 = 0;
  v53 = v7;
  sub_1C4F82B7C((uint64_t)a2, &v40, 0, (const llvm::DataLayout **)&p_src);
  v30 = v45;
  if (v45 >= 0x41)
  {
    v36 = (((unint64_t)v45 + 63) >> 3) & 0x3FFFFFF8;
    v37 = (char *)operator new[]();
    memcpy(v37, __src, v36);
    v38 = 0;
    v39 = v40;
    do
    {
      *(_QWORD *)&v37[v38] |= *(_QWORD *)(*(_QWORD *)&v39 + v38);
      v38 += 8;
    }
    while (v36 != v38);
    LODWORD(v49) = v30;
    p_src = (void **)v37;
    v31 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&p_src) == v30;
    MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  }
  else if (v45)
  {
    v31 = ((unint64_t)__src | *(_QWORD *)&v40) == 0xFFFFFFFFFFFFFFFFLL >> -(char)v45;
  }
  else
  {
    v31 = 1;
  }
  if (v43 >= 0x41 && v42)
    MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
  if (v41 >= 0x41 && *(_QWORD *)&v40)
    MEMORY[0x1CAA32F9C](*(_QWORD *)&v40, 0x1000C8000313F17);
  if (v47 >= 0x41 && v46)
    MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
  if (v45 >= 0x41 && __src)
    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
  return v31;
}

uint64_t llvm::isKnownToBeAPowerOfTwo(llvm *this, const llvm::Value *a2, const llvm::DataLayout *a3, int a4, uint64_t a5, llvm::AssumptionCache *a6, const llvm::Instruction *a7, const llvm::DominatorTree *a8, BOOL a9)
{
  _QWORD v10[5];
  char v11;

  if (!a6 || !*((_QWORD *)a6 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a6 = this, !*((_QWORD *)this + 5)))
      a6 = 0;
  }
  v10[0] = a2;
  v10[1] = a5;
  v10[2] = a6;
  v10[3] = a7;
  v10[4] = 0;
  v11 = (char)a8;
  return sub_1C4F83FEC((unsigned __int8 *)this, (uint64_t)a3, a4, (uint64_t)v10);
}

uint64_t sub_1C4F83FEC(unsigned __int8 *SplatValue, uint64_t a2, int a3, uint64_t a4)
{
  int8x8_t *v7;
  unsigned int v8;
  uint64_t v9;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  llvm::UndefValue *AggregateElement;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int8x8_t v20;
  uint8x8_t v21;
  int8x8_t v22;
  llvm::APFloatBase *v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  int8x8_t *v29;
  int8x8_t v30;
  uint8x8_t v31;
  int v32;
  llvm::Type *v33;
  char v34;
  int8x8_t *v35;
  int v36;
  uint64_t v37;
  uint8x8_t v38;
  int v39;
  unint64_t v40;
  int8x8_t *v41;
  int8x8_t v42;
  uint8x8_t v43;
  int v44;
  int v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x8_t v51;
  unint64_t v52;
  int8x8_t *v53;
  int8x8_t v54;
  uint8x8_t v55;
  int8x8_t v56;
  int8x8_t *v57;
  int v58;
  _QWORD *v59;
  _QWORD *v60;
  int8x8_t v61;
  int8x8_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  _QWORD *v66;
  _QWORD *v67;
  llvm::Type *v68;
  unsigned int PrimitiveSizeInBits;
  unsigned int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  size_t v74;
  char *v75;
  uint64_t *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint8x8_t v80;
  int8x8_t *v81;
  int8x8_t *v82;
  int8x8_t v83;
  int8x8_t *v84;
  int8x8_t *v85;
  int8x8_t *v86;
  uint64_t v87;
  int v88;
  uint8x8_t v89;
  unsigned int v90;
  int v91;
  int v92;
  int64_t v93;
  BOOL v94;
  unint64_t v95;
  unsigned int v96;
  int v97;
  int v98;
  int64_t v99;
  unint64_t v100;
  unsigned int v101;
  int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  unsigned int v106;
  __int32 v107;
  int8x8_t *v108;
  char *v110;
  unsigned int v111;
  unint64_t v112;
  int8x8_t v113;
  uint64_t v114;
  unsigned int v115;
  void *__src;
  int8x8_t v117;
  uint64_t v118;
  unsigned int v119;

  v7 = (int8x8_t *)SplatValue;
  if (!(_DWORD)a2)
    goto LABEL_29;
  v8 = SplatValue[16];
  if (SplatValue && v8 == 16)
    goto LABEL_4;
  v9 = *(_QWORD *)SplatValue;
  if (v8 > 0x14 || v9 == 0 || (*(_DWORD *)(*(_QWORD *)SplatValue + 8) & 0xFE) != 18)
    goto LABEL_29;
  SplatValue = (unsigned __int8 *)llvm::Constant::getSplatValue((llvm::Constant *)SplatValue, 0);
  if (SplatValue && SplatValue[16] == 16)
  {
LABEL_4:
    if (sub_1C4FA290C((llvm::APInt *)(SplatValue + 24)))
      return 1;
  }
  else if (*(_BYTE *)(v9 + 8) == 18)
  {
    v12 = *(_DWORD *)(v9 + 32);
    if (v12)
    {
      v13 = 0;
      LOBYTE(v14) = 0;
      v15 = -v12;
LABEL_19:
      ++v13;
      while (1)
      {
        AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v7, (llvm::Type *)(v13 - 1));
        if (!AggregateElement)
          break;
        v17 = *((unsigned __int8 *)AggregateElement + 16);
        if ((v17 - 11) >= 2)
        {
          if (v17 != 16 || !sub_1C4FA290C((llvm::UndefValue *)((char *)AggregateElement + 24)))
            break;
          v14 = 1;
          if (v15 + v13)
            goto LABEL_19;
          return v14;
        }
        ++v13;
        if (v15 + v13 == 1)
        {
          if ((v14 & 1) != 0)
            return 1;
          break;
        }
      }
    }
  }
LABEL_29:
  v18 = v7[2].u8[0];
  if (v7 && v18 == 16)
  {
    v19 = v7[4].u32[0];
    if (v19 <= 0x40)
    {
      v20 = v7[3];
      goto LABEL_33;
    }
    v27 = 0;
    v28 = (unint64_t)(v19 + 63) >> 6;
    v29 = (int8x8_t *)v7[3];
    do
    {
      v30 = *v29++;
      v31 = (uint8x8_t)vcnt_s8(v30);
      v31.i16[0] = vaddlv_u8(v31);
      v27 += v31.i32[0];
      --v28;
    }
    while (v28);
LABEL_49:
    if (v27 == 1)
      return 1;
    goto LABEL_66;
  }
  v22 = *v7;
  if (v18 > 0x14 || *(_QWORD *)&v22 == 0 || (*(_DWORD *)(*(_QWORD *)v7 + 8) & 0xFE) != 18)
    goto LABEL_66;
  v25 = llvm::Constant::getSplatValue((llvm::Constant *)v7, 0);
  if (!v25 || *((_BYTE *)v25 + 16) != 16)
  {
    if (*(_BYTE *)(*(_QWORD *)&v22 + 8) == 18)
    {
      v32 = *(_DWORD *)(*(_QWORD *)&v22 + 32);
      if (v32)
      {
        v33 = 0;
        v34 = 0;
        while (1)
        {
          v35 = (int8x8_t *)llvm::Constant::getAggregateElement((llvm::Constant *)v7, v33);
          if (!v35)
            break;
          v36 = v35[2].u8[0];
          if ((v36 - 11) >= 2)
          {
            if (v36 != 16)
              goto LABEL_66;
            v37 = v35[4].u32[0];
            if (v37 > 0x40)
            {
              v39 = 0;
              v40 = (unint64_t)(v37 + 63) >> 6;
              v41 = (int8x8_t *)v35[3];
              do
              {
                v42 = *v41++;
                v43 = (uint8x8_t)vcnt_s8(v42);
                v43.i16[0] = vaddlv_u8(v43);
                v39 += v43.i32[0];
                --v40;
              }
              while (v40);
              if (v39 != 1)
                goto LABEL_66;
            }
            else
            {
              v38 = (uint8x8_t)vcnt_s8(v35[3]);
              v38.i16[0] = vaddlv_u8(v38);
              if (v38.u32[0] != 1)
                goto LABEL_66;
            }
            v34 = 1;
          }
          v33 = (llvm::Type *)((_DWORD)v33 + 1);
          if ((_DWORD)v33 == v32)
          {
            if ((v34 & 1) != 0)
              return 1;
            goto LABEL_66;
          }
        }
      }
    }
    goto LABEL_66;
  }
  v26 = *((unsigned int *)v25 + 8);
  if (v26 > 0x40)
  {
    v27 = 0;
    v52 = (unint64_t)(v26 + 63) >> 6;
    v53 = (int8x8_t *)*((_QWORD *)v25 + 3);
    do
    {
      v54 = *v53++;
      v55 = (uint8x8_t)vcnt_s8(v54);
      v55.i16[0] = vaddlv_u8(v55);
      v27 += v55.i32[0];
      --v52;
    }
    while (v52);
    goto LABEL_49;
  }
  v20 = *(int8x8_t *)((char *)v25 + 24);
LABEL_33:
  v21 = (uint8x8_t)vcnt_s8(v20);
  v21.i16[0] = vaddlv_u8(v21);
  if (v21.u32[0] == 1)
    return 1;
LABEL_66:
  v44 = v7[2].u8[0];
  if (v44 == 5)
  {
    if (v7[2].i16[1] == 25
      && (sub_1C4D89E3C((uint64_t)&__src, *(llvm::Constant **)&v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)]) & 1) != 0)
    {
      return 1;
    }
  }
  else if (v44 == 53 && (sub_1C4D89CC8((uint64_t)&__src, *(llvm::Constant **)&v7[-8]) & 1) != 0)
  {
    return 1;
  }
  v45 = v7[2].u8[0];
  if (v45 == 5)
  {
    if (v7[2].i16[1] == 26
      && (sub_1C4E71378((uint64_t)&__src, *(unint64_t ***)&v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)]) & 1) != 0)
    {
      return 1;
    }
  }
  else if (v45 == 54 && (sub_1C4E7119C((uint64_t)&__src, *(unsigned __int8 **)&v7[-8]) & 1) != 0)
  {
    return 1;
  }
  if (a3 == 6)
    return 0;
  v46 = (a3 + 1);
  v47 = v7[2].u8[0];
  if (!(_DWORD)a2)
  {
    if (v7[2].u8[0] <= 0x42u)
    {
      if (v47 == 5)
      {
        v48 = v7[2].u16[1];
LABEL_119:
        if (v48 != 13)
          goto LABEL_240;
        v57 = &v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)];
        v50 = *v57;
        if (!*(_QWORD *)v57)
          goto LABEL_240;
        v51 = v57[4];
        if (!*(_QWORD *)&v51)
          goto LABEL_240;
        goto LABEL_122;
      }
LABEL_99:
      if (v47 != 41)
        goto LABEL_235;
      v50 = v7[-8];
      if (v50)
      {
        v51 = v7[-4];
        if (v51)
        {
LABEL_122:
          if ((a2 & 1) == 0 && (!*(_BYTE *)(a4 + 40) || (v7[2].i8[1] & 6) == 0))
            goto LABEL_235;
          v58 = *(unsigned __int8 *)(*(_QWORD *)&v50 + 16);
          if (v58 == 56)
          {
            if (*(_QWORD *)&v51 != *(_QWORD *)(*(_QWORD *)&v50 - 64))
            {
              v60 = (_QWORD *)(*(_QWORD *)&v50 - 32);
LABEL_144:
              if (*(_QWORD *)&v51 != *v60)
                goto LABEL_146;
            }
          }
          else
          {
            if (v58 != 5 || *(_WORD *)(*(_QWORD *)&v50 + 18) != 28)
              goto LABEL_146;
            v59 = (_QWORD *)(*(_QWORD *)&v50 - 32 * (*(_DWORD *)(*(_QWORD *)&v50 + 20) & 0x7FFFFFF));
            if (*(_QWORD *)&v51 != *v59)
            {
              v60 = v59 + 4;
              goto LABEL_144;
            }
          }
          if ((sub_1C4F83FEC(*(_QWORD *)&v51, a2, v46, a4) & 1) != 0)
            return 1;
LABEL_146:
          v65 = *(unsigned __int8 *)(*(_QWORD *)&v51 + 16);
          if (v65 == 56)
          {
            if (*(_QWORD *)&v50 == *(_QWORD *)(*(_QWORD *)&v51 - 64))
              goto LABEL_154;
            v67 = (_QWORD *)(*(_QWORD *)&v51 - 32);
          }
          else
          {
            if (v65 != 5 || *(_WORD *)(*(_QWORD *)&v51 + 18) != 28)
            {
LABEL_155:
              v68 = (llvm::Type *)*v7;
              if ((*(_DWORD *)(*(_QWORD *)v7 + 8) & 0xFE) == 0x12)
                v68 = (llvm::Type *)**((_QWORD **)v68 + 2);
              PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v68);
              v70 = PrimitiveSizeInBits;
              v117.i32[0] = PrimitiveSizeInBits;
              if (PrimitiveSizeInBits > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
                v119 = v70;
                llvm::APInt::initSlowCase((llvm::APInt *)&v118, 0, 0);
                sub_1C4F82B7C(*(_QWORD *)&v50, &__src, v46, a4);
                v113.i32[0] = v70;
                llvm::APInt::initSlowCase((llvm::APInt *)&v112, 0, 0);
                v115 = v70;
                llvm::APInt::initSlowCase((llvm::APInt *)&v114, 0, 0);
              }
              else
              {
                v119 = PrimitiveSizeInBits;
                __src = 0;
                v118 = 0;
                sub_1C4F82B7C(*(_QWORD *)&v50, &__src, v46, a4);
                v113.i32[0] = v70;
                v112 = 0;
                v115 = v70;
                v114 = 0;
              }
              sub_1C4F82B7C(*(_QWORD *)&v51, &v112, v46, a4);
              v71 = v117.u32[0];
              if (v117.i32[0] >= 0x41u)
              {
                v74 = (((unint64_t)v117.u32[0] + 63) >> 3) & 0x3FFFFFF8;
                v75 = (char *)operator new[]();
                memcpy(v75, __src, v74);
                v76 = (uint64_t *)v112;
                v77 = (unint64_t)(v71 + 63) >> 6;
                v78 = v75;
                do
                {
                  v79 = *v76++;
                  *v78++ &= v79;
                  --v77;
                }
                while (v77);
                v111 = v71;
                v110 = v75;
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&v110);
                v73 = (unint64_t)v110;
                if (v111 > 0x40)
                {
                  v87 = 0;
                  v88 = 0;
                  do
                  {
                    v89 = (uint8x8_t)vcnt_s8(*(int8x8_t *)&v110[v87]);
                    v89.i16[0] = vaddlv_u8(v89);
                    v88 += v89.i32[0];
                    v87 += 8;
                  }
                  while (((((unint64_t)v111 + 63) >> 3) & 0x3FFFFFF8) != v87);
                  if (v110)
                    MEMORY[0x1CAA32F9C](v110, 0x1000C8000313F17);
                  if (v88 != 1)
                    goto LABEL_228;
                  goto LABEL_194;
                }
              }
              else
              {
                if (v117.i32[0])
                  v72 = 0xFFFFFFFFFFFFFFFFLL >> -v117.i8[0];
                else
                  v72 = 0;
                v73 = v72 & ~(v112 & (unint64_t)__src);
              }
              v80 = (uint8x8_t)vcnt_s8((int8x8_t)v73);
              v80.i16[0] = vaddlv_u8(v80);
              if (v80.u32[0] != 1)
                goto LABEL_228;
LABEL_194:
              v90 = v115;
              if ((a2 & 1) == 0)
              {
                if (v115 > 0x40)
                {
                  v92 = 0;
                  v93 = ((unint64_t)v115 + 63) >> 6;
                  do
                  {
                    v94 = v93-- < 1;
                    if (v94)
                      break;
                    v95 = *(_QWORD *)(v114 + 8 * v93);
                    v92 += __clz(v95);
                  }
                  while (!v95);
                  v96 = v115 | 0xFFFFFFC0;
                  if ((v115 & 0x3F) == 0)
                    v96 = 0;
                  if (v92 + v96 != v115)
                    goto LABEL_195;
                }
                else if (v114)
                {
                  v91 = 0;
LABEL_230:
                  if (v113.i32[0] >= 0x41u && v112)
                    MEMORY[0x1CAA32F9C](v112, 0x1000C8000313F17);
                  if (v119 >= 0x41 && v118)
                    MEMORY[0x1CAA32F9C](v118, 0x1000C8000313F17);
                  if (v117.i32[0] >= 0x41u && __src)
                    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                  if (!v91)
                    return 1;
                  v47 = v7[2].u8[0];
LABEL_235:
                  if (v47 < 0x1C)
                  {
                    if (v47 != 5)
                      return 0;
                    goto LABEL_240;
                  }
                  goto LABEL_236;
                }
                if (v119 > 0x40)
                {
                  v98 = 0;
                  v99 = ((unint64_t)v119 + 63) >> 6;
                  do
                  {
                    v94 = v99-- < 1;
                    if (v94)
                      break;
                    v100 = *(_QWORD *)(v118 + 8 * v99);
                    v98 += __clz(v100);
                  }
                  while (!v100);
                  v91 = 0;
                  v101 = v119 | 0xFFFFFFC0;
                  if ((v119 & 0x3F) == 0)
                    v101 = 0;
                  if (v98 + v101 != v119)
                    goto LABEL_229;
                  goto LABEL_228;
                }
                if (!v118)
                {
LABEL_228:
                  v91 = 1;
                  v90 = v115;
                  goto LABEL_229;
                }
              }
LABEL_195:
              v91 = 0;
LABEL_229:
              if (v90 >= 0x41 && v114)
                MEMORY[0x1CAA32F9C](v114, 0x1000C8000313F17);
              goto LABEL_230;
            }
            v66 = (_QWORD *)(*(_QWORD *)&v51 - 32 * (*(_DWORD *)(*(_QWORD *)&v51 + 20) & 0x7FFFFFF));
            if (*(_QWORD *)&v50 == *v66)
              goto LABEL_154;
            v67 = v66 + 4;
          }
          if (*(_QWORD *)&v50 != *v67)
            goto LABEL_155;
LABEL_154:
          if ((sub_1C4F83FEC(*(_QWORD *)&v50, a2, v46, a4) & 1) == 0)
            goto LABEL_155;
          return 1;
        }
      }
      v47 = 41;
      goto LABEL_236;
    }
    if (v47 == 85)
      goto LABEL_112;
    if (v47 != 84)
      goto LABEL_96;
    goto LABEL_114;
  }
  if (v7[2].u8[0] <= 0x37u)
  {
    if (v7[2].u8[0] > 0x34u)
    {
      if (v47 == 53)
      {
        v49 = v7[-8];
        if (v49)
          goto LABEL_139;
        v47 = 53;
        goto LABEL_236;
      }
      if (v47 == 54)
      {
        v49 = v7[-8];
        if (v49)
          goto LABEL_139;
        v47 = 54;
        goto LABEL_236;
      }
      goto LABEL_235;
    }
    if (v47 == 5)
    {
      v48 = v7[2].u16[1];
      if (v48 != 28)
      {
        if (v48 == 26 || v48 == 25)
        {
          v49 = v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)];
          if (!*(_QWORD *)&v49)
          {
LABEL_240:
            v103 = v7[2].u16[1];
            if (v103 > 0x1B || ((1 << v103) & 0xC180000) == 0)
              goto LABEL_254;
            v102 = 0;
            v47 = 5;
            if ((v7[2].i8[1] & 2) == 0)
              goto LABEL_248;
LABEL_243:
            if (v47 == 54)
            {
LABEL_261:
              v107 = v7[2].i32[1];
              if ((v107 & 0x40000000) != 0)
                v108 = (int8x8_t *)v7[-1];
              else
                v108 = &v7[-4 * (v107 & 0x7FFFFFF)];
              v49 = *v108;
              goto LABEL_265;
            }
            if (v47 == 5)
            {
              v103 = v7[2].u16[1];
              if (v103 == 26)
                goto LABEL_261;
            }
            else
            {
LABEL_248:
              if (v102)
              {
                v104 = v47 - 47;
                if (v104 >= 9 || ((0x183u >> v104) & 1) == 0)
                  return 0;
                v105 = byte_1C85F6DDF[(char)v104];
                goto LABEL_257;
              }
              if (v47 != 5)
                return 0;
              v103 = v7[2].u16[1];
            }
LABEL_254:
            v106 = v103 - 19;
            if (v106 >= 9 || ((0x183u >> v106) & 1) == 0)
              return 0;
            v105 = 5;
LABEL_257:
            if ((v7[2].i8[1] & 2) == 0 || v105 != 47 && (v105 != 5 || v7[2].i16[1] != 19))
              return 0;
            goto LABEL_261;
          }
LABEL_139:
          v64 = 1;
          return sub_1C4F83FEC(*(_QWORD *)&v49, v64, v46, a4);
        }
        goto LABEL_119;
      }
      v81 = &v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)];
      v61 = *v81;
      if (!*(_QWORD *)v81)
        goto LABEL_240;
      v62 = v81[4];
      if (!*(_QWORD *)&v62)
        goto LABEL_240;
LABEL_132:
      v14 = 1;
      if ((sub_1C4F83FEC(*(_QWORD *)&v61, 1, v46, a4) & 1) != 0
        || (sub_1C4F83FEC(*(_QWORD *)&v62, 1, v46, a4) & 1) != 0)
      {
        return v14;
      }
      v117 = v62;
      LODWORD(v63) = *(unsigned __int8 *)(*(_QWORD *)&v61 + 16);
      if ((_DWORD)v63 == 5)
      {
        LODWORD(v63) = *(unsigned __int16 *)(*(_QWORD *)&v61 + 18);
        if ((_DWORD)v63 != 15
          || !sub_1C4E71060((uint64_t)&__src, *(llvm::Constant **)(*(_QWORD *)&v61- 32 * (*(_DWORD *)(*(_QWORD *)&v61 + 20) & 0x7FFFFFF))))
        {
          goto LABEL_212;
        }
        v63 = *(_QWORD *)(*(_QWORD *)&v61 - 32 * (*(_DWORD *)(*(_QWORD *)&v61 + 20) & 0x7FFFFFF) + 32);
      }
      else
      {
        if ((_DWORD)v63 != 43
          || !sub_1C4D8AC3C((uint64_t)&__src, *(llvm::Constant **)(*(_QWORD *)&v61 - 64)))
        {
          goto LABEL_212;
        }
        v63 = *(_QWORD *)(*(_QWORD *)&v61 - 32);
      }
      if (*(_QWORD *)&v117 == v63)
        return v14;
LABEL_212:
      v113 = v61;
      v97 = *(unsigned __int8 *)(*(_QWORD *)&v62 + 16);
      if (v97 == 43)
      {
        if (!sub_1C4D8AC3C((uint64_t)&v112, *(llvm::Constant **)(*(_QWORD *)&v62 - 64))
          || *(_QWORD *)&v113 != *(_QWORD *)(*(_QWORD *)&v62 - 32))
        {
          return 0;
        }
      }
      else
      {
        if (v97 == 5)
          LOBYTE(v63) = *(_WORD *)(*(_QWORD *)&v62 + 18) == 15
                     && sub_1C4E71060((uint64_t)&v112, *(llvm::Constant **)(*(_QWORD *)&v62- 32 * (*(_DWORD *)(*(_QWORD *)&v62 + 20) & 0x7FFFFFF)))&& *(_QWORD *)&v113 == *(_QWORD *)(*(_QWORD *)&v62- 32 * (*(_DWORD *)(*(_QWORD *)&v62 + 20) & 0x7FFFFFF)+ 32);
        return (v97 == 5) & v63;
      }
      return v14;
    }
    goto LABEL_99;
  }
  if (v7[2].u8[0] > 0x53u)
  {
    if (v47 != 84)
    {
      if (v47 != 85)
        goto LABEL_235;
LABEL_112:
      if (!sub_1C4F83FEC(*(_QWORD *)&v7[-8], a2, v46, a4))
        return 0;
      goto LABEL_113;
    }
LABEL_114:
    v56 = v7[-4];
    if (*(_QWORD *)&v56
      && !*(_BYTE *)(*(_QWORD *)&v56 + 16)
      && *(_QWORD *)(*(_QWORD *)&v56 + 24) == *(_QWORD *)&v7[9])
    {
      if ((*(_BYTE *)(*(_QWORD *)&v56 + 33) & 0x20) != 0 && *(_DWORD *)(*(_QWORD *)&v56 + 36) == 274)
      {
        v82 = &v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)];
        if (*v82)
        {
          v83 = v82[4];
          if (v83)
            goto LABEL_187;
        }
      }
      if ((*(_BYTE *)(*(_QWORD *)&v56 + 33) & 0x20) != 0
        && *(_DWORD *)(*(_QWORD *)&v56 + 36) == 275
        && (v84 = &v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)], *(_QWORD *)v84)
        && (v83 = v84[4], *(_QWORD *)&v83)
        || (*(_BYTE *)(*(_QWORD *)&v56 + 33) & 0x20) != 0
        && *(_DWORD *)(*(_QWORD *)&v56 + 36) == 305
        && (v85 = &v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)], *(_QWORD *)v85)
        && (v83 = v85[4], *(_QWORD *)&v83)
        || (*(_BYTE *)(*(_QWORD *)&v56 + 33) & 0x20) != 0
        && *(_DWORD *)(*(_QWORD *)&v56 + 36) == 306
        && (v86 = &v7[-4 * (v7[2].i32[1] & 0x7FFFFFF)], *(_QWORD *)v86)
        && (v83 = v86[4], *(_QWORD *)&v83))
      {
LABEL_187:
        if (!((uint64_t (*)(void))sub_1C4F83FEC)())
          return 0;
        v49 = v83;
        goto LABEL_265;
      }
    }
    v47 = 84;
    goto LABEL_236;
  }
  if (v47 != 56)
  {
LABEL_96:
    if (v47 != 67)
      goto LABEL_235;
LABEL_113:
    v49 = v7[-4];
LABEL_265:
    v64 = a2;
    return sub_1C4F83FEC(*(_QWORD *)&v49, v64, v46, a4);
  }
  v61 = v7[-8];
  if (v61)
  {
    v62 = v7[-4];
    if (v62)
      goto LABEL_132;
  }
  v47 = 56;
LABEL_236:
  v14 = 0;
  if (v47 <= 0x37 && ((1 << v47) & 0xC1800000000000) != 0)
  {
    v102 = 1;
    goto LABEL_243;
  }
  return v14;
}

uint64_t llvm::isKnownNonZero(llvm *this, const llvm::Value *a2, const llvm::DataLayout *a3, uint64_t a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  _QWORD v8[5];
  char v9;

  if (!a5 || !*((_QWORD *)a5 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a5 = this, !*((_QWORD *)this + 5)))
      a5 = 0;
  }
  v8[0] = a2;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  v8[4] = 0;
  v9 = (char)a7;
  return sub_1C4F84D74((uint64_t)this, (uint64_t)a3, (uint64_t)v8);
}

uint64_t sub_1C4F84D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v5;
  unint64_t v6;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;

  v3 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
  if (v3 == 19)
    return 0;
  if (v3 != 18)
  {
    v6 = 1;
    v13 = 1;
LABEL_8:
    v12 = v6;
    return sub_1C4F9F590(a1, &v12, a2, a3);
  }
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  v13 = v5;
  if (v5 <= 0x40)
  {
    if (v5)
      v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    else
      v6 = 0;
    goto LABEL_8;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v12, -1, 1);
  v10 = v13;
  v11 = sub_1C4F9F590(a1, &v12, a2, a3);
  if (v10 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  return v11;
}

uint64_t llvm::isKnownPositive(llvm *this, const llvm::Value *a2, const llvm::DataLayout *a3, uint64_t a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  char v7;
  llvm *v9;
  unsigned int v14;
  llvm *v16;
  unsigned int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  const llvm::Value *v29;
  uint64_t v30;
  llvm *v31;
  const llvm::Instruction *v32;
  uint64_t v33;
  char v34;

  v7 = (char)a7;
  v9 = a5;
  v14 = *((unsigned __int8 *)this + 16);
  if (this && v14 == 16)
    return sub_1C49591DC((llvm *)((char *)this + 24));
  if (!a5 || (v16 = a5, !*((_QWORD *)a5 + 5)))
  {
    if (!this || v14 < 0x1C || (v16 = this, !*((_QWORD *)this + 5)))
      v16 = 0;
  }
  v29 = a2;
  v30 = a4;
  v31 = v16;
  v32 = a6;
  v33 = 0;
  v34 = (char)a7;
  sub_1C4F83784((uint64_t)this, a3, (uint64_t *)&v29, &v25);
  v17 = v26;
  v18 = (uint64_t *)(v25 + 8 * ((v26 - 1) >> 6));
  if (v26 < 0x41)
    v18 = &v25;
  v19 = 1 << (v26 - 1);
  v20 = *v18;
  if (v28 >= 0x41 && v27)
  {
    v22 = v20;
    v23 = 1 << (v26 - 1);
    MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
    v20 = v22;
    v19 = v23;
    v17 = v26;
  }
  v21 = v19 & v20;
  if (v17 >= 0x41 && v25)
  {
    v24 = v21;
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
    v21 = v24;
  }
  if (!v21)
    return 0;
  if (!v9 || !*((_QWORD *)v9 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (v9 = this, !*((_QWORD *)this + 5)))
      v9 = 0;
  }
  v29 = a2;
  v30 = a4;
  v31 = v9;
  v32 = a6;
  v33 = 0;
  v34 = v7;
  return sub_1C4F84D74((uint64_t)this, (uint64_t)a3, (uint64_t)&v29);
}

unint64_t llvm::isKnownNegative(llvm *this, const llvm::Value *a2, const llvm::DataLayout *a3, uint64_t a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  unint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20[5];
  char v21;

  if (!a5 || !*((_QWORD *)a5 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a5 = this, !*((_QWORD *)this + 5)))
      a5 = 0;
  }
  v20[0] = (uint64_t)a2;
  v20[1] = a4;
  v20[2] = (uint64_t)a5;
  v20[3] = (uint64_t)a6;
  v20[4] = 0;
  v21 = (char)a7;
  sub_1C4F83784((uint64_t)this, a3, v20, &v16);
  v7 = (unint64_t *)&v18;
  v8 = v19 - 1;
  if (v19 >= 0x41)
    v7 = (unint64_t *)(v18 + 8 * (v8 >> 6));
  v9 = *v7;
  if (v19 >= 0x41 && v18 != 0)
  {
    v12 = v9;
    v14 = v19 - 1;
    MEMORY[0x1CAA32F9C]();
    v9 = v12;
    LOBYTE(v8) = v14;
  }
  if (v17 >= 0x41 && v16)
  {
    v13 = v9;
    v15 = v8;
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
    v9 = v13;
    LOBYTE(v8) = v15;
  }
  return (v9 >> v8) & 1;
}

uint64_t llvm::isKnownNonEqual(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  _QWORD v8[5];
  char v9;

  if (!a5 || !*((_QWORD *)a5 + 5))
  {
    if (!a2 || *((unsigned __int8 *)a2 + 16) < 0x1Cu || (a5 = a2, !*((_QWORD *)a2 + 5)))
    {
      if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a5 = this, !*((_QWORD *)this + 5)))
        a5 = 0;
    }
  }
  v8[0] = a3;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  v8[4] = 0;
  v9 = (char)a7;
  return sub_1C4F851B8((uint64_t)this, a2, 0, (uint64_t)v8);
}

uint64_t sub_1C4F851B8(uint64_t a1, _QWORD *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  unsigned int v20;
  BOOL v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  BOOL v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v54;
  char v55;
  char v56;
  int v57;
  uint64_t v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v69;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _QWORD v74[2];
  const void **v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unsigned int v80;
  _QWORD v81[21];

  if ((_QWORD *)a1 == a2)
    return 0;
  v81[19] = v4;
  v81[20] = v5;
  v8 = a2;
  v9 = a1;
  while (1)
  {
    result = 0;
    if (a3 > 5 || *(_QWORD *)v9 != *v8)
      return result;
    v11 = *(unsigned __int8 *)(v9 + 16);
    v12 = v11 > 0x1B || v11 == 5;
    v13 = v12;
    if (v12)
      v14 = v9;
    else
      v14 = 0;
    v15 = *((unsigned __int8 *)v8 + 16);
    v16 = v15 > 0x1B || v15 == 5;
    v17 = v16;
    if (v16)
      v18 = (uint64_t)v8;
    else
      v18 = 0;
    if (v13 != 1 || v17 == 0)
      goto LABEL_107;
    v20 = *(unsigned __int8 *)(v14 + 16);
    v21 = v14 && v20 > 0x1B;
    v22 = v21 ? v20 - 28 : *(unsigned __int16 *)(v14 + 18);
    v23 = *(unsigned __int8 *)(v18 + 16);
    v24 = v18 && v23 > 0x1B;
    v25 = v24 ? v23 - 28 : *(unsigned __int16 *)(v18 + 18);
    if (v22 != v25)
      goto LABEL_107;
    sub_1C4FA29B0((_QWORD *)v14, v18, (uint64_t)&v77);
    if (!(_BYTE)v79)
    {
      if (*(_BYTE *)(v9 + 16) != 83 || *(_QWORD *)(v9 + 40) != v8[5])
        goto LABEL_107;
      v77 = (uint64_t)v81;
      v78 = v81;
      v79 = 8;
      v80 = 0;
      v26 = *(_DWORD *)(v9 + 20);
      if ((v26 & 0x40000000) != 0)
      {
        v28 = *(_QWORD *)(v9 - 8);
        v27 = v26 & 0x7FFFFFF;
      }
      else
      {
        v27 = v26 & 0x7FFFFFF;
        v28 = v9 - 32 * v27;
      }
      if (!v27)
      {
LABEL_102:
        v56 = 1;
        goto LABEL_104;
      }
      v29 = 0;
      v30 = (uint64_t *)(v28 + 32 * *(unsigned int *)(v9 + 60));
      v31 = &v30[v27];
      while (2)
      {
        v32 = *v30;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v77, *v30);
        if (v33)
        {
          v34 = *(_DWORD *)(v9 + 20);
          v35 = v34 & 0x7FFFFFF;
          if ((v34 & 0x7FFFFFF) != 0)
          {
            v36 = 0;
            while (1)
            {
              v37 = v9 - 32 * v35;
              if ((v34 & 0x40000000) != 0)
                v37 = *(_QWORD *)(v9 - 8);
              if (*(_QWORD *)(v37 + 32 * *(unsigned int *)(v9 + 60) + 8 * v36) == v32)
                break;
              if (v35 == ++v36)
                goto LABEL_58;
            }
          }
          else
          {
LABEL_58:
            LODWORD(v36) = -1;
          }
          if ((v34 & 0x40000000) != 0)
            v38 = *(_QWORD *)(v9 - 8);
          else
            v38 = v9 - 32 * v35;
          v39 = *((_DWORD *)v8 + 5);
          v40 = v39 & 0x7FFFFFF;
          if ((v39 & 0x7FFFFFF) != 0)
          {
            v41 = 0;
            while (1)
            {
              v42 = (char *)&v8[-4 * v40];
              if ((v39 & 0x40000000) != 0)
                v42 = (char *)*(v8 - 1);
              if (*(_QWORD *)&v42[32 * *((unsigned int *)v8 + 15) + 8 * v41] == v32)
                break;
              if (v40 == ++v41)
                goto LABEL_67;
            }
          }
          else
          {
LABEL_67:
            LODWORD(v41) = -1;
          }
          if ((v39 & 0x40000000) != 0)
            v43 = (char *)*(v8 - 1);
          else
            v43 = (char *)&v8[-4 * v40];
          v44 = *(unsigned __int8 **)(v38 + 32 * v36);
          v45 = *(unsigned __int8 **)&v43[32 * v41];
          v75 = 0;
          v76 = 0;
          v71 = (unint64_t)&v76;
          if (sub_1C4D89F84((uint64_t)&v71, v44)
            && (v74[0] = &v75, v74[1] = 0, sub_1C4D89F84((uint64_t)v74, v45)))
          {
            v46 = *(unsigned int *)(v76 + 8);
            if (v46 > 0x40)
              v47 = memcmp(*(const void **)v76, *v75, ((unint64_t)(v46 + 63) >> 3) & 0x3FFFFFF8) == 0;
            else
              v47 = *(_QWORD *)v76 == (_QWORD)*v75;
            v54 = v47;
            v55 = v29 | ~(_BYTE)v54;
            if (v54)
              v52 = 1;
            else
              v52 = 3;
            if ((v55 & 1) != 0)
            {
LABEL_84:
              if (v52 != 3 && v52 != 0)
              {
LABEL_103:
                v56 = 0;
LABEL_104:
                if (v78 != (_QWORD *)v77)
                  free(v78);
                if ((v56 & 1) != 0)
                  return 1;
LABEL_107:
                if ((sub_1C4FA2DA8(v9, (uint64_t)v8, a3, a4) & 1) != 0
                  || (sub_1C4FA2DA8((uint64_t)v8, v9, a3, a4) & 1) != 0
                  || (sub_1C4FA2DF4(v9, (uint64_t)v8, a3, a4) & 1) != 0
                  || (sub_1C4FA2DF4((uint64_t)v8, v9, a3, a4) & 1) != 0
                  || (sub_1C4FA2F64(v9, (uint64_t)v8, a3, a4) & 1) != 0
                  || (sub_1C4FA2F64((uint64_t)v8, v9, a3, a4) & 1) != 0)
                {
                  return 1;
                }
                if ((*(_DWORD *)(*(_QWORD *)v9 + 8) & 0xFE) == 0x12)
                  v57 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v9 + 16) + 8);
                else
                  v57 = *(_DWORD *)(*(_QWORD *)v9 + 8);
                if (v57 == 13)
                {
                  sub_1C4F83784(v9, a3, (uint64_t *)a4, &v77);
                  sub_1C4F83784((uint64_t)v8, a3, (uint64_t *)a4, &v71);
                  if (v78 > 0x40)
                  {
                    v60 = 0;
                    v58 = v72;
                    while ((*(_QWORD *)(v72 + v60) & *(_QWORD *)(v77 + v60)) == 0)
                    {
                      v60 += 8;
                      if (((((unint64_t)v78 + 63) >> 3) & 0x3FFFFFF8) == v60)
                        goto LABEL_125;
                    }
LABEL_121:
                    v59 = 0;
                  }
                  else
                  {
                    v58 = v72;
                    if (((unint64_t)v72 & v77) != 0)
                      goto LABEL_121;
LABEL_125:
                    if (DWORD2(v71) > 0x40)
                    {
                      v61 = (uint64_t *)v71;
                      v62 = (uint64_t *)v79;
                      v63 = (((unint64_t)DWORD2(v71) + 63) >> 6) - 1;
                      do
                      {
                        v65 = *v61++;
                        v64 = v65;
                        v66 = *v62++;
                        v67 = v66 & v64;
                        v59 = (v66 & v64) == 0;
                        v69 = v63-- != 0;
                      }
                      while (!v67 && v69);
                    }
                    else
                    {
                      v59 = (v79 & (unint64_t)v71) == 0;
                    }
                  }
                  if (DWORD2(v72) >= 0x41 && v58 != 0)
                    MEMORY[0x1CAA32F9C]();
                  if (DWORD2(v71) >= 0x41 && (_QWORD)v71)
                    MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
                  if (v80 >= 0x41 && v79)
                    MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
                  if (v78 >= 0x41)
                  {
                    if (v77)
                      MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
                  }
                  if (!v59)
                    return 1;
                }
                return 0;
              }
              goto LABEL_89;
            }
          }
          else if ((v29 & 1) != 0)
          {
            goto LABEL_103;
          }
          v48 = *(_OWORD *)(a4 + 16);
          v71 = *(_OWORD *)a4;
          v72 = v48;
          v73 = *(_OWORD *)(a4 + 32);
          v49 = *(_QWORD *)(v32 + 40);
          if (v49 == v32 + 40)
          {
            v50 = 0;
          }
          else
          {
            if (v49)
              v50 = v49 - 24;
            else
              v50 = 0;
            if (*(unsigned __int8 *)(v50 + 16) - 29 >= 0xB)
              v50 = 0;
          }
          *(_QWORD *)&v72 = v50;
          v51 = sub_1C4F851B8(v44, v45, a3 + 1, &v71);
          v29 |= v51;
          v52 = v51 ^ 1;
          goto LABEL_84;
        }
LABEL_89:
        if (++v30 == v31)
          goto LABEL_102;
        continue;
      }
    }
    v9 = v77;
    v8 = v78;
    ++a3;
    if ((_QWORD *)v77 == v78)
      return 0;
  }
}

BOOL llvm::MaskedValueIsZero(llvm *this, const llvm::Value *a2, const llvm::APInt *a3, const llvm::DataLayout *a4, const llvm::DataLayout *a5, llvm::AssumptionCache *a6, const llvm::Instruction *a7, const llvm::DominatorTree *a8, BOOL a9)
{
  unsigned int v9;
  unsigned int v11;
  uint64_t v12;
  _BOOL8 v13;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v24;
  unsigned int v25;
  llvm *v26;
  const llvm::DataLayout *v27[5];
  char v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;

  v9 = a4;
  if (!a6 || !*((_QWORD *)a6 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a6 = this, !*((_QWORD *)this + 5)))
      a6 = 0;
  }
  v27[0] = a3;
  v27[1] = a5;
  v27[2] = a6;
  v27[3] = a7;
  v27[4] = 0;
  v28 = (char)a8;
  v11 = *((_DWORD *)a2 + 2);
  v30 = v11;
  if (v11 > 0x40)
  {
    v26 = this;
    v25 = v11;
    llvm::APInt::initSlowCase((llvm::APInt *)&v29, 0, 0);
    v32 = v25;
    llvm::APInt::initSlowCase((llvm::APInt *)&v31, 0, 0);
    this = v26;
  }
  else
  {
    v32 = v11;
    v29 = 0;
    v31 = 0;
  }
  sub_1C4F82B7C((uint64_t)this, (int8x8_t *)&v29, v9, v27);
  v12 = *((unsigned int *)a2 + 2);
  if (v12 > 0x40)
  {
    v15 = (unint64_t)(v12 + 63) >> 6;
    v16 = *(uint64_t **)a2;
    v17 = (uint64_t *)v29;
    v18 = v15 - 1;
    do
    {
      v20 = *v16++;
      v19 = v20;
      v21 = *v17++;
      v22 = v19 & ~v21;
      v13 = v22 == 0;
      v24 = v18-- != 0;
    }
    while (!v22 && v24);
  }
  else
  {
    v13 = (*(_QWORD *)a2 & ~v29) == 0;
  }
  if (v32 >= 0x41 && v31)
    MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
  if (v30 >= 0x41 && v29)
    MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
  return v13;
}

uint64_t llvm::ComputeNumSignBits(llvm *this, const llvm::Value *a2, const llvm::DataLayout *a3, uint64_t a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  _QWORD v8[5];
  char v9;

  if (!a5 || !*((_QWORD *)a5 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a5 = this, !*((_QWORD *)this + 5)))
      a5 = 0;
  }
  v8[0] = a2;
  v8[1] = a4;
  v8[2] = a5;
  v8[3] = a6;
  v8[4] = 0;
  v9 = (char)a7;
  return sub_1C4F85990(this, a3, (uint64_t)v8);
}

uint64_t sub_1C4F85990(llvm::Constant *a1, unsigned int a2, uint64_t a3)
{
  int v3;
  unsigned int v5;
  unint64_t v6;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;

  v3 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
  if (v3 == 19)
    return 1;
  if (v3 != 18)
  {
    v6 = 1;
    v13 = 1;
LABEL_8:
    v12 = v6;
    return sub_1C4F947E8(a1, (llvm::APInt *)&v12, a2, a3);
  }
  v5 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  v13 = v5;
  if (v5 <= 0x40)
  {
    if (v5)
      v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    else
      v6 = 0;
    goto LABEL_8;
  }
  llvm::APInt::initSlowCase((llvm::APInt *)&v12, -1, 1);
  v10 = v13;
  v11 = sub_1C4F947E8(a1, (llvm::APInt *)&v12, a2, a3);
  if (v10 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  return v11;
}

uint64_t llvm::ComputeMaxSignificantBits(llvm *this, const llvm::Value *a2, const llvm::DataLayout *a3, uint64_t a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  int v8;
  llvm::Type *v9;
  _QWORD v11[5];
  char v12;

  if (!a5 || !*((_QWORD *)a5 + 5))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (a5 = this, !*((_QWORD *)this + 5)))
      a5 = 0;
  }
  v11[0] = a2;
  v11[1] = a4;
  v11[2] = a5;
  v11[3] = a6;
  v11[4] = 0;
  v12 = 1;
  v8 = sub_1C4F85990(this, a3, (uint64_t)v11);
  v9 = *(llvm::Type **)this;
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
    v9 = (llvm::Type *)**((_QWORD **)v9 + 2);
  return llvm::Type::getPrimitiveSizeInBits(v9) - v8 + 1;
}

uint64_t llvm::computeKnownBitsFromRangeMetadata(uint64_t this, void **a2, llvm::KnownBits *a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  void **v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  int v56;
  uint64_t v57;
  void *v58;
  size_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  void *v63;
  size_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  unint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  _QWORD *v74;
  size_t v75;
  _QWORD *v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  uint64_t v82;
  void *v83;
  size_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  void *v88;
  size_t v89;
  unint64_t v90;
  _QWORD *v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  _QWORD *v99;
  size_t v100;
  _QWORD *v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  _QWORD *v118;
  void *v119;
  unsigned int v120;
  _QWORD *v121;
  _QWORD *v122;
  void *v123;
  unsigned int v124;
  int v125;
  int v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  int v135;
  int v136;
  void *v137;
  unsigned int v138;
  void *__src;
  unsigned int v140;
  void *v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int v148;

  v4 = this;
  v5 = *((unsigned int *)a2 + 2);
  v6 = *(_DWORD *)(this + 8);
  if (v5 > 0x40)
  {
    this = (uint64_t)memset(*a2, 255, ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8);
    v7 = *((_DWORD *)a2 + 2);
  }
  else
  {
    *a2 = (void *)-1;
    v7 = v5;
  }
  v8 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v7;
  if (v7 - 1 < 0x40)
    goto LABEL_4;
  if (!v7)
  {
    v8 = 0;
    goto LABEL_4;
  }
  if (v7 < 0x41)
  {
LABEL_4:
    v9 = a2;
    goto LABEL_5;
  }
  v9 = (void **)((char *)*a2 + 8 * (((unint64_t)v7 + 63) >> 6) - 8);
LABEL_5:
  *v9 = (void *)((unint64_t)*v9 & v8);
  v10 = a2 + 2;
  v11 = *((unsigned int *)a2 + 6);
  if (v11 > 0x40)
  {
    this = (uint64_t)memset(a2[2], 255, ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
    LODWORD(v11) = *((_DWORD *)a2 + 6);
  }
  else
  {
    *v10 = -1;
  }
  v12 = v6 >> 1;
  v13 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v11;
  if ((v11 - 1) <= 0x3F)
  {
    *v10 &= v13;
    if (v6 < 2)
      return this;
    v14 = 0;
    if (v12 <= 1)
      v15 = 1;
    else
      v15 = v12;
    while (1)
    {
      v16 = (_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8) + 16 * v14);
      v17 = *(_QWORD *)(*v16 + 128);
      v18 = *(_QWORD *)(v16[1] + 128);
      v19 = *(unsigned int *)(v17 + 32);
      if (v19 > 0x40)
      {
        v113 = v18;
        v117 = v10;
        v55 = ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8;
        v56 = *(_DWORD *)(v17 + 32);
        v57 = v17;
        v127 = v14;
        v58 = (void *)operator new[]();
        v59 = v55;
        v10 = v117;
        memcpy(v58, *(const void **)(v57 + 24), v59);
        v18 = v113;
        LODWORD(v19) = v56;
        v20 = (uint64_t)v58;
        v14 = v127;
      }
      else
      {
        v20 = *(_QWORD *)(v17 + 24);
      }
      v21 = *(unsigned int *)(v18 + 32);
      if (v21 > 0x40)
      {
        v114 = v20;
        v118 = v10;
        v60 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
        v111 = v19;
        v61 = v18;
        v62 = *(_DWORD *)(v18 + 32);
        v128 = v14;
        v63 = (void *)operator new[]();
        v64 = v60;
        v10 = v118;
        memcpy(v63, *(const void **)(v61 + 24), v64);
        LODWORD(v21) = v62;
        LODWORD(v19) = v111;
        v20 = v114;
        v22 = (uint64_t)v63;
        v14 = v128;
      }
      else
      {
        v22 = *(_QWORD *)(v18 + 24);
      }
      v146 = v19;
      v145 = v20;
      v148 = v21;
      v147 = v22;
      llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)&v145, (llvm::APInt *)&v141);
      llvm::ConstantRange::getUnsignedMin((llvm::APInt *)&v145, (llvm::APInt *)&__src);
      v23 = v140;
      if (v140 <= 0x40)
        break;
      llvm::APInt::xorAssignSlowCase((uint64_t)&__src, (uint64_t **)&v141);
      v23 = v140;
      v144 = v140;
      v119 = __src;
      v143 = (uint64_t)__src;
      v140 = 0;
      if (v144 <= 0x40)
      {
        v24 = (unint64_t)__src;
        goto LABEL_19;
      }
      v135 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v143);
      if (v119)
      {
        MEMORY[0x1CAA32F9C](v119, 0x1000C8000313F17);
        if (v140 >= 0x41)
        {
          if (__src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        }
      }
      v25 = v135;
LABEL_20:
      if (v142 >= 0x41 && v141)
      {
        v129 = v25;
        MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
        v25 = v129;
      }
      v144 = v5;
      if (v5 > 0x40)
      {
        v125 = v25;
        llvm::APInt::initSlowCase((llvm::APInt *)&v143, 0, 0);
        v25 = v125;
        v26 = v144;
      }
      else
      {
        v143 = 0;
        v26 = v5;
      }
      sub_1C4912E54(&v143, v26 - v25, v26);
      llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)&v145, (llvm::APInt *)&__src);
      if (v140 >= v5)
      {
        if (v140 > v5)
        {
          llvm::APInt::trunc((llvm::APInt *)&__src, v5, (llvm::APInt *)&v141);
        }
        else
        {
          v142 = v140;
          if (v140 > 0x40)
          {
            v141 = (void *)operator new[]();
            memcpy(v141, __src, (((unint64_t)v142 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v141 = __src;
          }
        }
      }
      else
      {
        llvm::APInt::zext((llvm::APInt *)&__src, v5, (uint64_t)&v141);
      }
      if (v140 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      v27 = v142;
      if (v142 > 0x40)
      {
        v120 = v142;
        v130 = v14;
        v65 = v142 + 63;
        v66 = (_QWORD *)operator new[]();
        memcpy(v66, v141, (v65 >> 3) & 0x3FFFFFF8);
        v67 = (uint64_t *)v143;
        v68 = v65 >> 6;
        v28 = (unint64_t)v66;
        do
        {
          v69 = *v67++;
          *v66++ &= v69;
          --v68;
        }
        while (v68);
        v27 = v120;
        v14 = v130;
      }
      else
      {
        v28 = v143 & (unint64_t)v141;
      }
      v29 = *((unsigned int *)a2 + 6);
      if (v29 > 0x40)
      {
        v70 = (_QWORD *)*v10;
        v71 = (unint64_t)(v29 + 63) >> 6;
        v72 = (uint64_t *)v28;
        do
        {
          v73 = *v72++;
          *v70++ &= v73;
          --v71;
        }
        while (v71);
      }
      else
      {
        *v10 &= v28;
      }
      if (v27 >= 0x41 && v28)
        MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
      LODWORD(v30) = v142;
      v138 = v142;
      if (v142 <= 0x40)
      {
        v31 = ~(unint64_t)v141;
        v32 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v142;
        if (!v142)
          v32 = 0;
        this = v32 & v31;
        v137 = (void *)(v32 & v31);
        v138 = 0;
        goto LABEL_35;
      }
      v74 = v10;
      v75 = (((unint64_t)v142 + 63) >> 3) & 0x3FFFFFF8;
      v137 = (void *)operator new[]();
      memcpy(v137, v141, v75);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v137);
      v30 = v138;
      this = (uint64_t)v137;
      v138 = 0;
      if (v30 <= 0x40)
      {
        v10 = v74;
LABEL_35:
        this &= v143;
        goto LABEL_36;
      }
      v105 = (uint64_t *)v143;
      v106 = (unint64_t)(v30 + 63) >> 6;
      v107 = v137;
      do
      {
        v108 = *v105++;
        *v107++ &= v108;
        --v106;
      }
      while (v106);
      v10 = v74;
LABEL_36:
      v33 = *((unsigned int *)a2 + 2);
      if (v33 > 0x40)
      {
        v76 = *a2;
        v77 = (unint64_t)(v33 + 63) >> 6;
        v78 = (uint64_t *)this;
        do
        {
          v79 = *v78++;
          *v76++ &= v79;
          --v77;
        }
        while (v77);
      }
      else
      {
        *a2 = (void *)((unint64_t)*a2 & this);
      }
      if (v30 >= 0x41 && this)
        this = MEMORY[0x1CAA32F9C](this, 0x1000C8000313F17);
      if (v142 >= 0x41)
      {
        this = (uint64_t)v141;
        if (v141)
          this = MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
      }
      if (v144 >= 0x41)
      {
        this = v143;
        if (v143)
          this = MEMORY[0x1CAA32F9C](v143, 0x1000C8000313F17);
      }
      if (v148 >= 0x41)
      {
        this = v147;
        if (v147)
          this = MEMORY[0x1CAA32F9C](v147, 0x1000C8000313F17);
      }
      if (v146 >= 0x41)
      {
        this = v145;
        if (v145)
          this = MEMORY[0x1CAA32F9C](v145, 0x1000C8000313F17);
      }
      if (++v14 == v15)
        return this;
    }
    v24 = (unint64_t)__src ^ (unint64_t)v141;
LABEL_19:
    v25 = v23 + __clz(v24) - 64;
    goto LABEL_20;
  }
  if (!(_DWORD)v11)
  {
    v13 = 0;
    goto LABEL_57;
  }
  if (v11 < 0x41)
  {
LABEL_57:
    v34 = a2 + 2;
    goto LABEL_58;
  }
  v34 = (_QWORD *)(*v10 + 8 * ((((unint64_t)v11 + 63) >> 6) - 1));
LABEL_58:
  *v34 &= v13;
  if (v6 >= 2)
  {
    v35 = 0;
    if (v12 <= 1)
      v36 = 1;
    else
      v36 = v12;
    while (1)
    {
      v37 = (_QWORD *)(v4 - 8 * *(unsigned int *)(v4 + 8) + 16 * v35);
      v38 = *(_QWORD *)(*v37 + 128);
      v39 = *(_QWORD *)(v37[1] + 128);
      v40 = *(unsigned int *)(v38 + 32);
      if (v40 > 0x40)
      {
        v115 = v39;
        v121 = v10;
        v80 = ((unint64_t)(v40 + 63) >> 3) & 0x3FFFFFF8;
        v81 = *(_DWORD *)(v38 + 32);
        v82 = v38;
        v131 = v35;
        v83 = (void *)operator new[]();
        v84 = v80;
        v10 = v121;
        memcpy(v83, *(const void **)(v82 + 24), v84);
        v39 = v115;
        LODWORD(v40) = v81;
        v41 = (uint64_t)v83;
        v35 = v131;
      }
      else
      {
        v41 = *(_QWORD *)(v38 + 24);
      }
      v42 = *(unsigned int *)(v39 + 32);
      if (v42 > 0x40)
      {
        v116 = v41;
        v122 = v10;
        v85 = ((unint64_t)(v42 + 63) >> 3) & 0x3FFFFFF8;
        v112 = v40;
        v86 = v39;
        v87 = *(_DWORD *)(v39 + 32);
        v132 = v35;
        v88 = (void *)operator new[]();
        v89 = v85;
        v10 = v122;
        memcpy(v88, *(const void **)(v86 + 24), v89);
        LODWORD(v42) = v87;
        LODWORD(v40) = v112;
        v41 = v116;
        v43 = (uint64_t)v88;
        v35 = v132;
      }
      else
      {
        v43 = *(_QWORD *)(v39 + 24);
      }
      v146 = v40;
      v145 = v41;
      v148 = v42;
      v147 = v43;
      llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)&v145, (llvm::APInt *)&v141);
      llvm::ConstantRange::getUnsignedMin((llvm::APInt *)&v145, (llvm::APInt *)&__src);
      v44 = v140;
      if (v140 <= 0x40)
        break;
      llvm::APInt::xorAssignSlowCase((uint64_t)&__src, (uint64_t **)&v141);
      v44 = v140;
      v144 = v140;
      v123 = __src;
      v143 = (uint64_t)__src;
      v140 = 0;
      if (v144 < 0x41)
      {
        v45 = (unint64_t)__src;
        goto LABEL_68;
      }
      v136 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v143);
      if (v123)
      {
        MEMORY[0x1CAA32F9C](v123, 0x1000C8000313F17);
        if (v140 >= 0x41)
        {
          if (__src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        }
      }
      v46 = v136;
LABEL_69:
      if (v142 >= 0x41 && v141)
      {
        v133 = v46;
        MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
        v46 = v133;
      }
      v144 = v5;
      if (v5 > 0x40)
      {
        v126 = v46;
        llvm::APInt::initSlowCase((llvm::APInt *)&v143, 0, 0);
        v46 = v126;
        v47 = v144;
      }
      else
      {
        v143 = 0;
        v47 = v5;
      }
      sub_1C4912E54(&v143, v47 - v46, v47);
      llvm::ConstantRange::getUnsignedMax((llvm::ConstantRange *)&v145, (llvm::APInt *)&__src);
      if (v140 >= v5)
      {
        if (v140 > v5)
        {
          llvm::APInt::trunc((llvm::APInt *)&__src, v5, (llvm::APInt *)&v141);
        }
        else
        {
          v142 = v140;
          if (v140 > 0x40)
          {
            v141 = (void *)operator new[]();
            memcpy(v141, __src, (((unint64_t)v142 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v141 = __src;
          }
        }
      }
      else
      {
        llvm::APInt::zext((llvm::APInt *)&__src, v5, (uint64_t)&v141);
      }
      if (v140 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      v48 = v142;
      if (v142 > 0x40)
      {
        v124 = v142;
        v134 = v35;
        v90 = v142 + 63;
        v91 = (_QWORD *)operator new[]();
        memcpy(v91, v141, (v90 >> 3) & 0x3FFFFFF8);
        v92 = (uint64_t *)v143;
        v93 = v90 >> 6;
        v49 = (unint64_t)v91;
        do
        {
          v94 = *v92++;
          *v91++ &= v94;
          --v93;
        }
        while (v93);
        v48 = v124;
        v35 = v134;
      }
      else
      {
        v49 = v143 & (unint64_t)v141;
      }
      v50 = *((unsigned int *)a2 + 6);
      if (v50 > 0x40)
      {
        v95 = (_QWORD *)*v10;
        v96 = (unint64_t)(v50 + 63) >> 6;
        v97 = (uint64_t *)v49;
        do
        {
          v98 = *v97++;
          *v95++ &= v98;
          --v96;
        }
        while (v96);
      }
      else
      {
        *v10 &= v49;
      }
      if (v48 >= 0x41 && v49)
        MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
      LODWORD(v51) = v142;
      v138 = v142;
      if (v142 <= 0x40)
      {
        v52 = ~(unint64_t)v141;
        v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v142;
        if (!v142)
          v53 = 0;
        this = v53 & v52;
        v137 = (void *)(v53 & v52);
        v138 = 0;
        goto LABEL_84;
      }
      v99 = v10;
      v100 = (((unint64_t)v142 + 63) >> 3) & 0x3FFFFFF8;
      v137 = (void *)operator new[]();
      memcpy(v137, v141, v100);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v137);
      v51 = v138;
      this = (uint64_t)v137;
      v138 = 0;
      if (v51 < 0x41)
      {
        v10 = v99;
LABEL_84:
        this &= v143;
        goto LABEL_85;
      }
      v109 = 0;
      v110 = v143;
      do
      {
        *(_QWORD *)(this + v109) &= *(_QWORD *)(v110 + v109);
        v109 += 8;
      }
      while ((((unint64_t)(v51 + 63) >> 3) & 0x3FFFFFF8) != v109);
      v10 = v99;
LABEL_85:
      v54 = *((unsigned int *)a2 + 2);
      if (v54 > 0x40)
      {
        v101 = *a2;
        v102 = (unint64_t)(v54 + 63) >> 6;
        v103 = (uint64_t *)this;
        do
        {
          v104 = *v103++;
          *v101++ &= v104;
          --v102;
        }
        while (v102);
      }
      else
      {
        *a2 = (void *)((unint64_t)*a2 & this);
      }
      if (v51 >= 0x41 && this)
        this = MEMORY[0x1CAA32F9C](this, 0x1000C8000313F17);
      if (v142 >= 0x41)
      {
        this = (uint64_t)v141;
        if (v141)
          this = MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
      }
      if (v144 >= 0x41)
      {
        this = v143;
        if (v143)
          this = MEMORY[0x1CAA32F9C](v143, 0x1000C8000313F17);
      }
      if (v148 >= 0x41)
      {
        this = v147;
        if (v147)
          this = MEMORY[0x1CAA32F9C](v147, 0x1000C8000313F17);
      }
      if (v146 >= 0x41)
      {
        this = v145;
        if (v145)
          this = MEMORY[0x1CAA32F9C](v145, 0x1000C8000313F17);
      }
      if (++v35 == v36)
        return this;
    }
    v45 = (unint64_t)__src ^ (unint64_t)v141;
LABEL_68:
    v46 = v44 + __clz(v45) - 64;
    goto LABEL_69;
  }
  return this;
}

uint64_t llvm::isAssumeLikeIntrinsic(uint64_t a1)
{
  uint64_t v1;

  if (*(_BYTE *)(a1 + 16) == 84
    && (v1 = *(_QWORD *)(a1 - 32)) != 0
    && !*(_BYTE *)(v1 + 16)
    && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
    && (*(_BYTE *)(v1 + 33) & 0x20) != 0)
  {
    return sub_1C4E36790(a1);
  }
  else
  {
    return 0;
  }
}

uint64_t llvm::isValidAssumeForContext(llvm *this, const llvm::Instruction *a2, const llvm::Instruction *a3, const llvm::DominatorTree *a4)
{
  uint64_t v6;
  llvm::BasicBlock *v7;
  int v8;
  int v9;
  uint64_t v10;
  const llvm::Instruction **v11;
  uint64_t v12;
  const llvm::Instruction **v13;
  uint64_t v14;
  unsigned int v16;
  uint64_t v17;
  char v18;
  uint64_t i;
  char *v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  int v37;
  uint64_t v39;
  int v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  _BYTE v46[128];
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  int v50;
  _BYTE v51[256];
  _QWORD *v52;
  uint64_t v53;
  _QWORD v54[18];

  v54[16] = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 5);
  v7 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  if ((llvm::BasicBlock *)v6 != v7)
  {
    if (a3)
    {
      if (llvm::DominatorTree::dominates(a3, this, a2))
        return 1;
    }
    else if (v6 == llvm::BasicBlock::getSinglePredecessor(v7))
    {
      return 1;
    }
    return 0;
  }
  v8 = *(__int16 *)(v6 + 18);
  if ((v8 & 0x80000000) == 0)
  {
    v39 = *(_QWORD *)(v6 + 48);
    if (v39 != v6 + 40)
    {
      v40 = 0;
      do
      {
        v41 = v39 - 24;
        if (!v39)
          v41 = 0;
        *(_DWORD *)(v41 + 56) = v40++;
        v39 = *(_QWORD *)(v39 + 8);
      }
      while (v39 != v6 + 40);
    }
    *(_WORD *)(v6 + 18) = v8 | 0x8000;
  }
  if (*((_DWORD *)this + 14) < *((_DWORD *)a2 + 14))
    return 1;
  if (this == a2
    || !llvm::isGuaranteedToTransferExecutionToSuccessor((uint64_t)a2 + 24, (uint64_t)this + 24, 15))
  {
    return 0;
  }
  v52 = v54;
  v54[0] = this;
  v53 = 0x1000000001;
  v47 = v51;
  v48 = v51;
  v49 = 32;
  v50 = 0;
  v42 = v46;
  v43 = v46;
  v44 = 16;
  v45 = 0;
  v9 = *((_DWORD *)this + 5);
  if ((v9 & 0x40000000) != 0)
  {
    v11 = (const llvm::Instruction **)*((_QWORD *)this - 1);
    v10 = v9 & 0x7FFFFFF;
    if (v10)
    {
LABEL_11:
      v12 = 32 * v10;
      v13 = v11;
      while (*v13 != a2)
      {
        v13 += 4;
        v12 -= 32;
        if (!v12)
        {
          v13 = &v11[4 * v10];
          goto LABEL_21;
        }
      }
      goto LABEL_21;
    }
  }
  else
  {
    v10 = v9 & 0x7FFFFFF;
    v11 = (const llvm::Instruction **)((char *)this - 32 * v10);
    if (v10)
      goto LABEL_11;
  }
  v13 = v11;
LABEL_21:
  if (v10 != ((char *)v13 - (char *)v11) >> 5)
  {
    v14 = 0;
    goto LABEL_77;
  }
  v16 = 1;
  while (1)
  {
    v17 = v52[v16 - 1];
    LODWORD(v53) = v16 - 1;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v47, v17);
    if (!v18)
      goto LABEL_49;
    for (i = *(_QWORD *)(v17 + 8); i; i = *(_QWORD *)(i + 8))
    {
      v20 = (char *)sub_1C477672C((uint64_t)&v42, *(_QWORD *)(i + 24));
      v21 = v43 == v42 ? (uint64_t *)((char *)&v44 + 4) : &v44;
      if (v20 == &v43[8 * *(unsigned int *)v21])
        goto LABEL_49;
    }
    if ((const llvm::Instruction *)v17 == a2)
      break;
    if ((llvm *)v17 == this)
      goto LABEL_40;
    v22 = *(unsigned __int8 *)(v17 + 16);
    if (v22 >= 0x1C)
    {
      v23 = v22 - 33;
      if (v23 <= 0x37)
      {
        if (((1 << v23) & 0x808001D0000010) != 0)
          goto LABEL_49;
        if (((1 << v23) & 0x8000000000041) != 0)
        {
          v28 = *(_QWORD *)(v17 + 64);
          if (!v28 || (*(_BYTE *)(v28 + 17) & 0x30) == 0)
          {
            v29 = *(_DWORD *)(v17 + 20);
            if (v29 < 0)
            {
              v30 = v17 - 32 * (v29 & 0x7FFFFFF);
              v33 = *(_QWORD *)(v30 - 8);
              v31 = v30 - 8;
              v32 = v33;
              if (v33)
              {
                v34 = -v32;
                do
                {
                  v35 = *(_DWORD *)(*(_QWORD *)(v31 + v34) + 8);
                  v36 = v35 > 7;
                  v37 = (1 << v35) & 0x83;
                  if (v36 || v37 == 0)
                    goto LABEL_49;
                  v34 += 16;
                }
                while (v34);
              }
            }
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v17, 45) & 1) == 0
              && !llvm::CallBase::hasFnAttrOnCalledFunction(v17, 44))
            {
              goto LABEL_49;
            }
          }
        }
        else if (v23 == 27 && (*(_WORD *)(v17 + 18) & 0x301) != 0)
        {
          goto LABEL_49;
        }
      }
      if ((llvm::Instruction::mayThrow((llvm::Instruction *)v17) & 1) == 0
        && llvm::Instruction::willReturn((llvm::Instruction *)v17)
        && *(unsigned __int8 *)(v17 + 16) - 29 >= 0xB)
      {
LABEL_40:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v42, v17);
        if (v17)
          v24 = *(unsigned __int8 *)(v17 + 16) - 21 >= 7;
        else
          v24 = 0;
        if (v24)
        {
          v25 = *(_DWORD *)(v17 + 20);
          if ((v25 & 0x40000000) != 0)
          {
            v27 = *(char **)(v17 - 8);
            v26 = v25 & 0x7FFFFFF;
          }
          else
          {
            v26 = v25 & 0x7FFFFFF;
            v27 = (char *)(v17 - 32 * v26);
          }
          sub_1C4DA9878((unsigned int *)&v52, (uint64_t)&v52[v53], v27, &v27[32 * v26]);
        }
      }
    }
LABEL_49:
    v16 = v53;
    if (!(_DWORD)v53)
    {
      v14 = 1;
      goto LABEL_75;
    }
  }
  v14 = 0;
LABEL_75:
  if (v43 != v42)
    free(v43);
LABEL_77:
  if (v48 != v47)
    free(v48);
  if (v52 != v54)
    free(v52);
  return v14;
}

uint64_t llvm::isGuaranteedToTransferExecutionToSuccessor(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  const llvm::Value *v7;
  uint64_t result;
  int v9;
  uint64_t v10;
  int v11;
  llvm::Value **v12;

  if (a1 != a2)
  {
    v5 = a1;
    while (1)
    {
      if (v5)
        v6 = v5 - 24;
      else
        v6 = 0;
      if (!sub_1C4D99D08(v6))
      {
        if (!--a3)
          return 0;
        result = 0;
        v9 = *(unsigned __int8 *)(v6 + 16);
        if (v9 == 29 || v9 == 35)
          return result;
        if (v9 == 80)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v6 + 40) + 56);
          v11 = *(_DWORD *)(v10 + 20);
          if ((v11 & 0x40000000) != 0)
            v12 = *(llvm::Value ***)(v10 - 8);
          else
            v12 = (llvm::Value **)(v10 - 32 * (v11 & 0x7FFFFFF));
          if (llvm::classifyEHPersonality(*v12, v7) != 10)
            return 0;
        }
        else
        {
          if ((llvm::Instruction::mayThrow((llvm::Instruction *)v6) & 1) != 0)
            return 0;
          result = llvm::Instruction::willReturn((llvm::Instruction *)v6);
          if (!(_DWORD)result)
            return result;
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == a2)
        return 1;
    }
  }
  return 1;
}

uint64_t llvm::getIntrinsicForCallSite(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  int v17;
  int v19;

  v2 = *(_QWORD *)(a1 - 32);
  if (!v2 || *(_BYTE *)(v2 + 16) || *(_QWORD *)(v2 + 24) != *(_QWORD *)(a1 + 72))
    return 0;
  v5 = *(_DWORD *)(v2 + 32);
  if ((v5 & 0x2000) != 0)
    return *(unsigned int *)(v2 + 36);
  result = 0;
  v19 = 0;
  if (a2)
  {
    if ((v5 & 0xFu) - 7 >= 2)
    {
      result = sub_1C4ECD910(a2, a1, &v19);
      if ((_DWORD)result)
      {
        v6 = *(_QWORD *)(a1 + 64);
        if (v6)
        {
          if ((*(_BYTE *)(v6 + 17) & 0x30) != 0)
            goto LABEL_15;
        }
        v7 = *(_DWORD *)(a1 + 20);
        if (v7 < 0)
        {
          v10 = a1 - 32 * (v7 & 0x7FFFFFF);
          v13 = *(_QWORD *)(v10 - 8);
          v11 = v10 - 8;
          v12 = v13;
          if (v13)
          {
            v14 = -v12;
            do
            {
              v15 = *(_DWORD *)(*(_QWORD *)(v11 + v14) + 8);
              v16 = v15 > 7;
              v17 = (1 << v15) & 0x83;
              if (v16 || v17 == 0)
                return 0;
              v14 += 16;
            }
            while (v14);
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) != 0
          || (result = llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44), (_DWORD)result))
        {
LABEL_15:
          if (v19 <= 306)
          {
            if (v19 > 202)
            {
              switch(v19)
              {
                case 203:
                case 210:
                case 211:
                  return 75;
                case 204:
                case 205:
                case 206:
                case 212:
                case 213:
                case 214:
                case 218:
                case 219:
                case 220:
                case 221:
                case 222:
                case 223:
                case 224:
                case 225:
                case 226:
                case 227:
                case 228:
                case 229:
                case 230:
                case 231:
                case 232:
                case 233:
                case 237:
                case 238:
                case 239:
                  return 0;
                case 207:
                case 208:
                case 209:
                  return 76;
                case 215:
                case 216:
                case 217:
                  return 139;
                case 234:
                case 235:
                case 236:
                  return 140;
                case 240:
                case 241:
                case 242:
                  return 193;
                case 243:
                case 244:
                case 245:
                  return 202;
                default:
                  if ((v19 - 301) < 3)
                    return 176;
                  if (v19 == 300)
                    return 175;
                  return 0;
              }
            }
            v9 = v19 + 78;
            if ((v19 - 178) <= 0xF)
            {
              if (((1 << v9) & 7) != 0)
                return 14;
              if (((1 << v9) & 0x380) != 0)
                return 19;
              if (((1 << v9) & 0x8C00) != 0)
                return 51;
            }
            return 0;
          }
          if (v19 <= 369)
          {
            v8 = v19 - 57;
            if ((v19 - 313) <= 0x24)
            {
              if (((1 << v8) & 0x1C00000) != 0)
                return 203;
              if (((1 << v8) & 0x1C00000000) != 0)
                return 238;
              if (((1 << v8) & 3) != 0)
                return 175;
            }
            if ((v19 - 307) < 3)
              return 177;
            return 0;
          }
          result = 273;
          switch(v19)
          {
            case 370:
            case 371:
            case 372:
              result = 258;
              break;
            case 373:
            case 380:
            case 381:
            case 382:
            case 383:
            case 386:
            case 387:
            case 388:
            case 390:
            case 391:
            case 392:
              return 0;
            case 374:
            case 378:
            case 379:
              result = 259;
              break;
            case 375:
            case 376:
            case 377:
              result = 260;
              break;
            case 384:
            case 385:
            case 389:
              return result;
            case 393:
            case 394:
            case 395:
              result = 280;
              break;
            default:
              if ((v19 - 445) >= 3)
                return 0;
              result = 296;
              break;
          }
        }
      }
    }
  }
  return result;
}

uint64_t llvm::CannotBeNegativeZero(uint64_t a1, uint64_t *a2, int a3)
{
  unsigned int v6;
  char v7;
  uint64_t result;
  BOOL v10;
  int v11;
  int v12;
  uint64_t v13;
  unsigned __int16 RoundingMode;
  char v15;

  v6 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v6 == 17)
  {
    if (*(_UNKNOWN **)(a1 + 32) == &unk_1C866F1C0)
      v7 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 28);
    else
      v7 = *(_BYTE *)(a1 + 52);
    if ((v7 & 7) == 3)
      return (v7 & 8) == 0;
    return 1;
  }
  if (a3 == 6)
    return 0;
  result = 0;
  v10 = v6 < 0x1C && v6 != 5;
  if (!a1 || v10)
    return result;
  if (v6 == 5)
  {
    if (*(_WORD *)(a1 + 18) == 14
      && sub_1C4FA4864((uint64_t)&v15, *(llvm::Constant **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32)))
    {
      return 1;
    }
  }
  else if (v6 == 42 && sub_1C4E7BA90((uint64_t)&v15, *(llvm::Constant **)(a1 - 32)))
  {
    return 1;
  }
  v11 = *(unsigned __int8 *)(a1 + 16);
  if ((v11 - 71) < 2)
    return 1;
  if (v11 != 84)
    return 0;
  v12 = llvm::getIntrinsicForCallSite(a1, a2);
  result = 0;
  v13 = 1;
  if (v12 > 117)
  {
    if (v12 == 118 || v12 == 139)
      return v13;
    if (v12 != 280)
      return result;
    return llvm::CannotBeNegativeZero(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)), a2, (a3 + 1));
  }
  switch(v12)
  {
    case 13:
      return llvm::CannotBeNegativeZero(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)), a2, (a3 + 1));
    case 115:
      return v13;
    case 116:
      RoundingMode = llvm::ConstrainedFPIntrinsic::getRoundingMode((llvm::ConstrainedFPIntrinsic *)a1);
      v13 = 0;
      if (RoundingMode < 0x100u || RoundingMode != 1)
        return v13;
      return llvm::CannotBeNegativeZero(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)), a2, (a3 + 1));
  }
  return result;
}

uint64_t llvm::ValueIsKnownClamped(llvm *this, const llvm::Value *a2, unsigned int a3)
{
  const llvm::Value *v3;
  llvm *v4;
  unsigned int v5;
  _BOOL4 v6;
  int v7;
  BOOL v8;
  _BOOL4 v9;
  uint64_t result;
  int v11;
  llvm **v12;
  int v13;
  llvm *v14;
  int v15;
  llvm **v16;
  uint64_t v17;
  int v18;
  int v19;
  char *v20;
  int v21;
  char *v22;
  void **v23;
  char *v24;
  llvm::detail::DoubleAPFloat *v25;
  int v26;
  int v27;
  llvm::detail::DoubleAPFloat *v28;
  unsigned int v29;
  uint64_t v31;
  uint64_t v32;
  const llvm::APInt *v33;
  uint64_t v34;
  int v35;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  const llvm::APInt *v40;
  uint64_t v41;
  int v42;
  char v43;
  _BYTE v44[8];
  uint64_t v45;
  const llvm::APInt *v46;
  int v47;
  char v48;
  uint64_t v49;

  LODWORD(v3) = (_DWORD)a2;
  v4 = this;
  v49 = *MEMORY[0x1E0C80C00];
  v5 = *((unsigned __int8 *)this + 16);
  v6 = this == 0;
  if (!this)
    goto LABEL_3;
LABEL_2:
  if (v5 != 17)
  {
    while (1)
    {
LABEL_3:
      if ((_DWORD)v3 == 6)
        return 0;
      v7 = v5 - 28;
      v8 = v5 >= 0x1C || v5 == 5;
      v9 = !v8;
      if (v6 || v9)
        return 0;
      if (v5 <= 0x1B)
        v7 = *((unsigned __int16 *)v4 + 9);
      result = 0;
      if (v7 <= 55)
        break;
      if (v7 == 56)
      {
        if (v5 != 84)
          return 0;
        v17 = *((_QWORD *)v4 - 4);
        if (!v17
          || *(_BYTE *)(v17 + 16)
          || *(_QWORD *)(v17 + 24) != *((_QWORD *)v4 + 9)
          || (*(_BYTE *)(v17 + 33) & 0x20) == 0)
        {
          return 0;
        }
        v18 = *(_DWORD *)(v17 + 36);
        if (v18 <= 201)
        {
          if (v18 == 139)
          {
LABEL_15:
            v11 = *((_DWORD *)v4 + 5);
            if ((v11 & 0x40000000) != 0)
              v12 = (llvm **)*((_QWORD *)v4 - 1);
            else
              v12 = (llvm **)((char *)v4 - 32 * (v11 & 0x7FFFFFF));
            LODWORD(v3) = (_DWORD)v3 + 1;
            goto LABEL_47;
          }
          if (v18 != 193)
            return 0;
        }
        else
        {
          result = 1;
          if (v18 <= 1846)
          {
            if (v18 != 202)
            {
              if (v18 == 1830)
                return result;
              return 0;
            }
          }
          else if (v18 != 1847)
          {
            if ((v18 - 2095) <= 0x24 && ((1 << (v18 - 47)) & 0x1000000003) != 0
              || v18 == 1851)
            {
              return result;
            }
            return 0;
          }
        }
        goto LABEL_24;
      }
      if (v7 != 57)
        return result;
      v13 = *((_DWORD *)v4 + 5);
      v14 = (v13 & 0x40000000) != 0 ? (llvm *)*((_QWORD *)v4 - 1) : (llvm *)((char *)v4 - 32 * (v13 & 0x7FFFFFF));
      v3 = (const llvm::Value *)((_DWORD)v3 + 1);
      result = llvm::ValueIsKnownClamped(*((llvm **)v14 + 4), v3, a3);
      if (!(_DWORD)result)
        return result;
      v21 = *((_DWORD *)v4 + 5);
      if ((v21 & 0x40000000) != 0)
        v22 = (char *)*((_QWORD *)v4 - 1);
      else
        v22 = (char *)v4 - 32 * (v21 & 0x7FFFFFF);
      v12 = (llvm **)(v22 + 64);
LABEL_47:
      v4 = *v12;
      v5 = *((unsigned __int8 *)*v12 + 16);
      v6 = v4 == 0;
      if (v4)
        goto LABEL_2;
    }
    if ((v7 - 45) < 2)
      goto LABEL_15;
    if (v7 != 18)
      return result;
LABEL_24:
    v15 = *((_DWORD *)v4 + 5);
    if ((v15 & 0x40000000) != 0)
      v16 = (llvm **)*((_QWORD *)v4 - 1);
    else
      v16 = (llvm **)((char *)v4 - 32 * (v15 & 0x7FFFFFF));
    v3 = (const llvm::Value *)((_DWORD)v3 + 1);
    result = llvm::ValueIsKnownClamped(*v16, v3, a3);
    if (!(_DWORD)result)
      return result;
    v19 = *((_DWORD *)v4 + 5);
    if ((v19 & 0x40000000) != 0)
      v20 = (char *)*((_QWORD *)v4 - 1);
    else
      v20 = (char *)v4 - 32 * (v19 & 0x7FFFFFF);
    v12 = (llvm **)(v20 + 32);
    goto LABEL_47;
  }
  v23 = (void **)((char *)v4 + 32);
  if (*((_UNKNOWN **)v4 + 4) == &unk_1C866F1C0)
    v24 = (char *)*((_QWORD *)v4 + 5);
  else
    v24 = (char *)v4 + 24;
  if ((v24[28] & 8) != 0)
    return 0;
  LODWORD(v34) = 32;
  v33 = 0;
  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v39, &v33);
  v45 = v39;
  v46 = v40;
  v47 = v41;
  v48 = BYTE4(v41) & 0xF;
  v38 = 32;
  v37 = 1065353216;
  llvm::detail::IEEEFloat::initFromFloatAPInt((llvm::detail::IEEEFloat *)&v33, (const llvm::APInt **)&v37);
  v40 = v33;
  v41 = v34;
  v42 = v35;
  v43 = v36 & 0xF;
  LOBYTE(v33) = 0;
  llvm::APFloat::convert((uint64_t)v44, *v23, 1, &v33);
  llvm::APFloat::convert((uint64_t)&v39, *v23, 1, &v33);
  v25 = (llvm *)((char *)v4 + 32);
  if (*v23 == &unk_1C866F1C0)
    v26 = llvm::detail::DoubleAPFloat::compare(v25, (const llvm::detail::DoubleAPFloat *)&v45);
  else
    llvm::detail::IEEEFloat::compare(v25, (const llvm::detail::IEEEFloat *)&v45);
  v27 = v26;
  v28 = (llvm *)((char *)v4 + 32);
  if (*v23 == &unk_1C866F1C0)
    v29 = llvm::detail::DoubleAPFloat::compare(v28, (const llvm::detail::DoubleAPFloat *)&v40);
  else
    llvm::detail::IEEEFloat::compare(v28, (const llvm::detail::IEEEFloat *)&v40);
  result = (v27 - 1) < 2 && v29 < 2;
  if (v40 == (const llvm::APInt *)&unk_1C866F1C0)
  {
    v32 = result;
    sub_1C4773C74(&v41);
  }
  else
  {
    if ((*((_DWORD *)v40 + 2) - 64) > 0xFFFFFF7F || !v41)
      goto LABEL_71;
    v32 = result;
    MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
  }
  result = v32;
LABEL_71:
  if ((_UNKNOWN *)v45 == &unk_1C866F1C0)
  {
    v31 = result;
    sub_1C4773C74((uint64_t *)&v46);
    return v31;
  }
  if ((*(_DWORD *)(v45 + 8) - 64) <= 0xFFFFFF7F && v46)
  {
    v31 = result;
    MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
    return v31;
  }
  return result;
}

uint64_t llvm::CannotBeOrderedLessThanZero(unsigned __int8 *a1, uint64_t *a2)
{
  return sub_1C4F876C8(a1, a2, 0, 0);
}

uint64_t sub_1C4F876C8(unsigned __int8 *a1, uint64_t *a2, uint64_t a3, int a4)
{
  llvm::Constant *v7;
  unsigned int v8;
  _BOOL4 v9;
  int v11;
  BOOL v12;
  _BOOL4 v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  llvm::Constant **v19;
  int v20;
  _QWORD *v21;
  int v22;
  char *v23;
  int v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  int v30;
  char *v31;
  int v32;
  char *v33;
  int v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  char v38;
  int v39;
  llvm::Type *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  int v44;
  unsigned __int8 **v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  _QWORD v48[3];
  int v49;
  char v50;
  uint64_t *v51;

  v7 = (llvm::Constant *)a1;
  v51 = a2;
  v8 = a1[16];
  v9 = a1 == 0;
  if (!a1)
    goto LABEL_3;
LABEL_2:
  if (v8 == 17)
  {
    if (*((_UNKNOWN **)v7 + 4) == &unk_1C866F1C0)
      v38 = *(_BYTE *)(*((_QWORD *)v7 + 5) + 28);
    else
      v38 = *((_BYTE *)v7 + 52);
    result = (v38 & 8) == 0;
    if ((v38 & 8) != 0 && (a3 & 1) == 0)
      return (v38 & 7) == 3;
    return result;
  }
LABEL_3:
  while (v9 || v8 > 0x14 || !*(_QWORD *)v7 || *(_BYTE *)(*(_QWORD *)v7 + 8) != 18)
  {
    if (a4 == 6)
      return 0;
    v11 = v8 - 28;
    v12 = v8 >= 0x1C || v8 == 5;
    v13 = !v12;
    if (v9 || v13)
      return 0;
    if (v8 <= 0x1B)
      v11 = *((unsigned __int16 *)v7 + 9);
    result = 0;
    if (v11 <= 44)
    {
      if (v11 <= 20)
      {
        if (v11 == 14)
          goto LABEL_57;
        if (v11 != 18)
          return result;
      }
      else if (v11 != 21)
      {
        if (v11 != 24)
        {
          if (v11 == 43)
            return 1;
          return result;
        }
LABEL_57:
        v28 = *((_DWORD *)v7 + 5);
        if ((v28 & 0x40000000) != 0)
          v29 = (_QWORD *)*((_QWORD *)v7 - 1);
        else
          v29 = (_QWORD *)((char *)v7 - 32 * (v28 & 0x7FFFFFF));
        if (!sub_1C4F876C8(*v29, a2, a3, (a4 + 1)))
          return 0;
LABEL_61:
        v30 = *((_DWORD *)v7 + 5);
        if ((v30 & 0x40000000) != 0)
          v31 = (char *)*((_QWORD *)v7 - 1);
        else
          v31 = (char *)v7 - 32 * (v30 & 0x7FFFFFF);
        v19 = (llvm::Constant **)(v31 + 32);
        goto LABEL_89;
      }
      v20 = *((_DWORD *)v7 + 5);
      if ((v20 & 0x40000000) != 0)
        v21 = (_QWORD *)*((_QWORD *)v7 - 1);
      else
        v21 = (_QWORD *)((char *)v7 - 32 * (v20 & 0x7FFFFFF));
      if (*v21 == v21[4] && (!(_DWORD)a3 || (*((_BYTE *)v7 + 17) & 4) != 0))
        return 1;
      goto LABEL_57;
    }
    if (v11 > 56)
    {
      if (v11 == 57)
      {
        v22 = *((_DWORD *)v7 + 5);
        if ((v22 & 0x40000000) != 0)
          v23 = (char *)*((_QWORD *)v7 - 1);
        else
          v23 = (char *)v7 - 32 * (v22 & 0x7FFFFFF);
        if (!sub_1C4F876C8(*((_QWORD *)v23 + 4), a2, a3, (a4 + 1)))
          return 0;
        v24 = *((_DWORD *)v7 + 5);
        if ((v24 & 0x40000000) == 0)
        {
          v25 = v24 & 0x7FFFFFF;
          goto LABEL_78;
        }
        goto LABEL_79;
      }
      if (v11 != 61)
        return result;
LABEL_34:
      v17 = *((_DWORD *)v7 + 5);
      if ((v17 & 0x40000000) != 0)
        goto LABEL_88;
      v18 = v17 & 0x7FFFFFF;
      goto LABEL_36;
    }
    if ((v11 - 45) < 2)
      goto LABEL_34;
    if (v11 != 56)
      return result;
    v15 = llvm::getIntrinsicForCallSite((uint64_t)v7, a2);
    result = 0;
    v16 = 1;
    if (v15 <= 200)
    {
      if (v15 > 191)
      {
        if (v15 != 192)
        {
          if (v15 != 193)
            return result;
          v50 = a3;
          v49 = a4;
          v44 = *((_DWORD *)v7 + 5);
          if ((v44 & 0x40000000) != 0)
            v45 = (unsigned __int8 **)*((_QWORD *)v7 - 1);
          else
            v45 = (unsigned __int8 **)((char *)v7 - 32 * (v44 & 0x7FFFFFF));
          v46 = *v45;
          v47 = v45[4];
          v48[0] = &v50;
          v48[1] = &v51;
          v48[2] = &v49;
          if ((sub_1C4FA30BC((uint64_t)v48, v46) & 1) == 0)
            return (uint64_t)sub_1C4FA30BC((uint64_t)v48, v47);
          return 1;
        }
        v34 = *((_DWORD *)v7 + 5);
        if ((v34 & 0x40000000) != 0)
          v35 = (_QWORD *)*((_QWORD *)v7 - 1);
        else
          v35 = (_QWORD *)((char *)v7 - 32 * (v34 & 0x7FFFFFF));
        if ((sub_1C4F876C8(*v35, a2, a3, (a4 + 1)) & 1) != 0)
          return 1;
        goto LABEL_61;
      }
      if ((v15 - 142) >= 2)
      {
        if ((v15 - 75) < 2 || v15 == 139)
          return v16;
        return result;
      }
      v26 = *((_DWORD *)v7 + 5);
      if ((v26 & 0x40000000) != 0)
        v27 = (_QWORD *)*((_QWORD *)v7 - 1);
      else
        v27 = (_QWORD *)((char *)v7 - 32 * (v26 & 0x7FFFFFF));
      if (*v27 != v27[4] || (_DWORD)a3 && (*((_BYTE *)v7 + 17) & 4) == 0)
        return 0;
      if ((v26 & 0x40000000) == 0)
      {
        v25 = v26 & 0x7FFFFFF;
LABEL_78:
        v36 = (char *)v7 - 32 * v25;
LABEL_80:
        v19 = (llvm::Constant **)(v36 + 64);
        goto LABEL_89;
      }
LABEL_79:
      v36 = (char *)*((_QWORD *)v7 - 1);
      goto LABEL_80;
    }
    if (v15 <= 238)
    {
      if ((v15 - 201) >= 2)
        return result;
      goto LABEL_57;
    }
    if (v15 > 1846)
    {
      if (v15 != 1847)
      {
        if ((v15 - 2092) <= 0x27 && ((1 << (v15 - 44)) & 0x8000000019) != 0
          || v15 == 1851)
        {
          return v16;
        }
        return result;
      }
      goto LABEL_57;
    }
    if (v15 > 260)
    {
      switch(v15)
      {
        case 261:
          return v16;
        case 280:
          if ((_DWORD)a3)
          {
            if ((*((_BYTE *)v7 + 17) & 4) == 0)
              return 0;
            if ((*((_BYTE *)v7 + 17) & 0x10) == 0)
              return llvm::CannotBeNegativeZero(*((_QWORD *)v7 - 4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)), a2, 0);
          }
          return 1;
        case 1830:
          return v16;
      }
      return result;
    }
    if (v15 != 239)
      return result;
    v32 = *((_DWORD *)v7 + 5);
    if ((v32 & 0x40000000) != 0)
      v33 = (char *)*((_QWORD *)v7 - 1);
    else
      v33 = (char *)v7 - 32 * (v32 & 0x7FFFFFF);
    v37 = *((_QWORD *)v33 + 4);
    if (v37 && *(_BYTE *)(v37 + 16) == 16 && *(_DWORD *)(v37 + 32) <= 0x40u && (*(_BYTE *)(v37 + 24) & 1) == 0)
      return 1;
    if ((v32 & 0x40000000) != 0)
    {
LABEL_88:
      v19 = (llvm::Constant **)*((_QWORD *)v7 - 1);
      goto LABEL_89;
    }
    v18 = v32 & 0x7FFFFFF;
LABEL_36:
    v19 = (llvm::Constant **)((char *)v7 - 32 * v18);
LABEL_89:
    ++a4;
    v7 = *v19;
    v51 = a2;
    v8 = *((unsigned __int8 *)v7 + 16);
    v9 = v7 == 0;
    if (v7)
      goto LABEL_2;
  }
  v39 = *(_DWORD *)(*(_QWORD *)v7 + 32);
  if (!v39)
    return 1;
  v40 = 0;
  do
  {
    result = (uint64_t)llvm::Constant::getAggregateElement(v7, v40);
    if (!result)
      break;
    if (*(_BYTE *)(result + 16) != 17)
      return 0;
    v41 = result + 24;
    v42 = *(void **)(result + 32);
    v43 = result + 24;
    if (v42 == &unk_1C866F1C0)
      v43 = *(_QWORD *)(result + 40);
    if ((*(_BYTE *)(v43 + 28) & 8) != 0)
    {
      if ((a3 & 1) != 0)
        return 0;
      if (v42 == &unk_1C866F1C0)
        v41 = *(_QWORD *)(result + 40);
      if ((*(_BYTE *)(v41 + 28) & 7) != 3)
        return 0;
    }
    v40 = (llvm::Type *)((_DWORD)v40 + 1);
    result = 1;
  }
  while (v39 != (_DWORD)v40);
  return result;
}

uint64_t llvm::SignBitMustBeZero(unsigned __int8 *a1, uint64_t *a2)
{
  return sub_1C4F876C8(a1, a2, 1, 0);
}

BOOL llvm::isKnownNeverInfinity(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t i;
  _BOOL4 v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t **v13;
  _BOOL8 v14;
  uint64_t v15;
  int v16;
  llvm::Type *v17;
  llvm::UndefValue *AggregateElement;
  int v19;
  llvm::UndefValue *v20;
  uint64_t v21;
  uint64_t v22;
  int PrimitiveSizeInBits;
  int v24;
  int v25;
  const llvm::detail::IEEEFloat *v26;
  llvm::detail *v27;
  _BYTE v29[8];
  _DWORD *v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  for (i = (a3 + 1); ; i = (i + 1))
  {
    v6 = sub_1C4774A9C(a1);
    if (a1 && v6 && (*(_BYTE *)(a1 + 17) & 8) != 0)
      return 1;
    v7 = *(unsigned __int8 *)(a1 + 16);
    if (a1 && v7 == 17)
    {
      if (*(_UNKNOWN **)(a1 + 32) == &unk_1C866F1C0)
        v21 = *(_QWORD *)(a1 + 40);
      else
        v21 = a1 + 24;
      return (*(_BYTE *)(v21 + 28) & 7) != 0;
    }
    if ((_DWORD)i == 7)
      return 0;
    if (!a1 || v7 < 0x1C)
      goto LABEL_22;
    if (v7 != 85)
      break;
    v8 = *(_DWORD *)(a1 + 20);
    if ((v8 & 0x40000000) != 0)
      v9 = *(_QWORD *)(a1 - 8);
    else
      v9 = a1 - 32 * (v8 & 0x7FFFFFF);
    if (!llvm::isKnownNeverInfinity(*(_QWORD *)(v9 + 32), a2, i))
      return 0;
    v10 = *(_DWORD *)(a1 + 20);
    if ((v10 & 0x40000000) != 0)
      v11 = *(_QWORD *)(a1 - 8);
    else
      v11 = a1 - 32 * (v10 & 0x7FFFFFF);
    a1 = *(_QWORD *)(v11 + 64);
  }
  if (v7 - 71 >= 2)
  {
LABEL_22:
    v14 = 0;
    if (v7 <= 0x14)
    {
      v15 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
      {
        if (*(_BYTE *)(v15 + 8) == 18)
        {
          v16 = *(_DWORD *)(v15 + 32);
          if (v16)
          {
            v17 = 0;
            v14 = 1;
            while (1)
            {
              AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a1, v17);
              if (!AggregateElement)
                break;
              v19 = *((unsigned __int8 *)AggregateElement + 16);
              if ((v19 - 11) >= 2)
              {
                if (v19 != 17)
                  break;
                v20 = *((_UNKNOWN **)AggregateElement + 4) == &unk_1C866F1C0
                    ? (llvm::UndefValue *)*((_QWORD *)AggregateElement + 5)
                    : (llvm::UndefValue *)((char *)AggregateElement + 24);
                if ((*((_BYTE *)v20 + 28) & 7) == 0)
                  break;
              }
              v17 = (llvm::Type *)((_DWORD)v17 + 1);
              if (v16 == (_DWORD)v17)
                return v14;
            }
            return 0;
          }
          return 1;
        }
      }
    }
  }
  else
  {
    v12 = *(_DWORD *)(a1 + 20);
    if ((v12 & 0x40000000) != 0)
      v13 = *(uint64_t ***)(a1 - 8);
    else
      v13 = (uint64_t **)(a1 - 32 * (v12 & 0x7FFFFFF));
    v22 = **v13;
    if ((*(_DWORD *)(v22 + 8) & 0xFE) == 0x12)
      v22 = **(_QWORD **)(v22 + 16);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v22);
    v24 = *(_DWORD *)(*(_QWORD *)a1 + 8);
    if ((v24 & 0xFE) == 0x12)
      v24 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 16) + 8);
    if (v24 != 2)
      __asm { BR              X11 }
    v30 = &unk_1C866F184;
    v33 = 3;
    v32 = -127;
    v31 = 0;
    v25 = PrimitiveSizeInBits - (v7 == 72);
    sub_1C47A8F18((uint64_t)v29, 0);
    if (v30 == (_DWORD *)&unk_1C866F1C0)
      v27 = (llvm::detail *)(v31 + 8);
    else
      v27 = (llvm::detail *)&v30;
    v14 = (int)llvm::detail::ilogb(v27, v26) >= v25;
    if (v30 == (_DWORD *)&unk_1C866F1C0)
    {
      sub_1C4773C74(&v31);
    }
    else if ((v30[2] - 64) <= 0xFFFFFF7F && v31)
    {
      MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
    }
  }
  return v14;
}

void sub_1C4F87FC8()
{
  JUMPOUT(0x1C4F87E10);
}

void sub_1C4F87FD4(llvm::APFloatBase *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  if (llvm::APFloatBase::x87DoubleExtended(a1) == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat((uint64_t *)va, (uint64_t)&unk_1C866F1C0);
    JUMPOUT(0x1C4F87FACLL);
  }
  JUMPOUT(0x1C4F87E18);
}

uint64_t llvm::isKnownNeverNaN(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v3;
  _BOOL4 v6;
  unsigned int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  llvm::Type *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  uint64_t *v31;
  int v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;

  LODWORD(v3) = a3;
  while (1)
  {
    v6 = sub_1C4774A9C(a1);
    if (a1 && v6 && (*(_BYTE *)(a1 + 17) & 4) != 0)
      return 1;
    v7 = *(unsigned __int8 *)(a1 + 16);
    if (a1 && v7 == 17)
    {
      if (*(_UNKNOWN **)(a1 + 32) == &unk_1C866F1C0)
        v17 = *(_QWORD *)(a1 + 40);
      else
        v17 = a1 + 24;
      return (*(_BYTE *)(v17 + 28) & 7) != 1;
    }
    if ((_DWORD)v3 == 6)
      return 0;
    if (a1 && v7 >= 0x1C)
    {
      switch(*(_BYTE *)(a1 + 16))
      {
        case 'G':
        case 'H':
          return 1;
        case 'I':
        case 'J':
          v8 = *(_DWORD *)(a1 + 20);
          if ((v8 & 0x40000000) == 0)
            goto LABEL_33;
          v9 = *(uint64_t **)(a1 - 8);
          goto LABEL_34;
        case 'K':
        case 'L':
        case 'M':
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
        case 'R':
        case 'S':
          goto LABEL_49;
        case 'T':
          goto LABEL_14;
        case 'U':
          v13 = *(_DWORD *)(a1 + 20);
          if ((v13 & 0x40000000) != 0)
            v14 = *(_QWORD *)(a1 - 8);
          else
            v14 = a1 - 32 * (v13 & 0x7FFFFFF);
          v3 = (v3 + 1);
          result = llvm::isKnownNeverNaN(*(_QWORD *)(v14 + 32), a2, v3);
          if (!(_DWORD)result)
            return result;
          v15 = *(_DWORD *)(a1 + 20);
          if ((v15 & 0x40000000) != 0)
            v16 = *(_QWORD *)(a1 - 8);
          else
            v16 = a1 - 32 * (v15 & 0x7FFFFFF);
          v9 = (uint64_t *)(v16 + 64);
          break;
        default:
          result = 0;
          switch(*(_BYTE *)(a1 + 16))
          {
            case '*':
            case ',':
              v18 = *(_DWORD *)(a1 + 20);
              if ((v18 & 0x40000000) != 0)
                v19 = *(_QWORD **)(a1 - 8);
              else
                v19 = (_QWORD *)(a1 - 32 * (v18 & 0x7FFFFFF));
              v25 = (v3 + 1);
              result = llvm::isKnownNeverNaN(*v19, a2, v25);
              if (!(_DWORD)result)
                return result;
              v26 = *(_DWORD *)(a1 + 20);
              v27 = (v26 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v26 & 0x7FFFFFF);
              result = llvm::isKnownNeverNaN(*(_QWORD *)(v27 + 32), a2, v25);
              if (!(_DWORD)result)
                return result;
              v30 = *(_DWORD *)(a1 + 20);
              if ((v30 & 0x40000000) != 0)
                v31 = *(uint64_t **)(a1 - 8);
              else
                v31 = (uint64_t *)(a1 - 32 * (v30 & 0x7FFFFFF));
              if (llvm::isKnownNeverInfinity(*v31, (uint64_t)a2, v25))
                return 1;
LABEL_93:
              v36 = *(_DWORD *)(a1 + 20);
              if ((v36 & 0x40000000) != 0)
                v37 = *(_QWORD *)(a1 - 8);
              else
                v37 = a1 - 32 * (v36 & 0x7FFFFFF);
              result = llvm::isKnownNeverInfinity(*(_QWORD *)(v37 + 32), (uint64_t)a2, v25);
              break;
            case '.':
              v28 = *(_DWORD *)(a1 + 20);
              if ((v28 & 0x40000000) != 0)
                v29 = *(_QWORD **)(a1 - 8);
              else
                v29 = (_QWORD *)(a1 - 32 * (v28 & 0x7FFFFFF));
              v25 = (v3 + 1);
              result = llvm::isKnownNeverNaN(*v29, a2, v25);
              if ((_DWORD)result)
              {
                v32 = *(_DWORD *)(a1 + 20);
                v33 = (v32 & 0x40000000) != 0 ? *(uint64_t **)(a1 - 8) : (uint64_t *)(a1 - 32 * (v32 & 0x7FFFFFF));
                result = llvm::isKnownNeverInfinity(*v33, (uint64_t)a2, v25);
                if ((_DWORD)result)
                {
                  v34 = *(_DWORD *)(a1 + 20);
                  v35 = (v34 & 0x40000000) != 0 ? *(_QWORD *)(a1 - 8) : a1 - 32 * (v34 & 0x7FFFFFF);
                  result = llvm::isKnownNeverNaN(*(_QWORD *)(v35 + 32), a2, v25);
                  if ((_DWORD)result)
                    goto LABEL_93;
                }
              }
              return result;
            case '1':
            case '4':
              return result;
            default:
              goto LABEL_49;
          }
          return result;
      }
      goto LABEL_35;
    }
    if (v7 != 84)
      break;
LABEL_14:
    v10 = *(_QWORD *)(a1 - 32);
    if (!v10
      || *(_BYTE *)(v10 + 16)
      || *(_QWORD *)(v10 + 24) != *(_QWORD *)(a1 + 72)
      || (*(_BYTE *)(v10 + 33) & 0x20) == 0)
    {
      break;
    }
    result = 0;
    v12 = *(_DWORD *)(v10 + 36);
    if (v12 <= 192)
    {
      if (((v12 - 13) > 0x3F || ((1 << (v12 - 13)) & 0xC000000000000043) == 0)
        && (v12 - 139) >= 2)
      {
        return result;
      }
      goto LABEL_32;
    }
    if (v12 > 257)
    {
      if ((v12 - 258) >= 3 && v12 != 296)
      {
        if (v12 == 280)
        {
          result = llvm::isKnownNeverNaN(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)), a2, (v3 + 1));
          if ((_DWORD)result)
            return sub_1C4F876C8(*(unsigned __int8 **)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)), a2, 0, 0);
        }
        return result;
      }
      goto LABEL_32;
    }
    if (v12 != 193 && v12 != 202)
    {
      if (v12 != 203)
        return result;
LABEL_32:
      v8 = *(_DWORD *)(a1 + 20);
LABEL_33:
      v9 = (uint64_t *)(a1 - 32 * (v8 & 0x7FFFFFF));
LABEL_34:
      LODWORD(v3) = v3 + 1;
      goto LABEL_35;
    }
    v3 = (v3 + 1);
    if ((llvm::isKnownNeverNaN(*(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF)), a2, v3) & 1) != 0)
      return 1;
    v9 = (uint64_t *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32);
LABEL_35:
    a1 = *v9;
  }
LABEL_49:
  result = 0;
  if (v7 <= 0x14)
  {
    v20 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if (*(_BYTE *)(v20 + 8) == 18)
      {
        v21 = *(_DWORD *)(v20 + 32);
        if (!v21)
          return 1;
        v22 = 0;
        while (1)
        {
          result = (uint64_t)llvm::Constant::getAggregateElement((llvm::Constant *)a1, v22);
          if (!result)
            break;
          v23 = *(unsigned __int8 *)(result + 16);
          if ((v23 - 11) >= 2)
          {
            if (v23 != 17)
              return 0;
            v24 = *(_UNKNOWN **)(result + 32) == &unk_1C866F1C0 ? *(_QWORD *)(result + 40) : result + 24;
            if ((*(_BYTE *)(v24 + 28) & 7) == 1)
              return 0;
          }
          v22 = (llvm::Type *)((_DWORD)v22 + 1);
          if (v21 == (_DWORD)v22)
            return 1;
        }
      }
    }
  }
  return result;
}

llvm::Value **llvm::isBytewiseValue(llvm *this, llvm::Value *a2, const llvm::DataLayout *a3)
{
  llvm *v3;
  uint64_t v4;
  llvm::ValueHandleBase *v5;
  llvm::ConstantInt *v7;
  llvm::UndefValue *v8;
  uint64_t v9;
  const llvm::DataLayout *v10;
  int v11;
  int v12;
  llvm::Constant *v13;
  int v14;
  llvm::ConstantExpr *v15;
  unint64_t v16;
  uint64_t IntegerCast;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  unsigned __int8 *v22;
  const llvm::APInt *v23;
  uint64_t v24;
  int v25;
  int v26;
  llvm::UndefValue *v27;
  llvm *ElementAsConstant;
  const llvm::DataLayout *v29;
  uint64_t isBytewiseValue;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  llvm::UndefValue *v35;
  int v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;

  v3 = this;
  v4 = *(_QWORD *)this;
  if (*(_DWORD *)(*(_QWORD *)this + 8) == 2061)
    return (llvm::Value **)this;
  while (1)
  {
    v7 = *(llvm::ConstantInt **)v4;
    v8 = llvm::UndefValue::get((llvm::UndefValue *)(**(_QWORD **)v4 + 1912), a2);
    if (*((unsigned __int8 *)v3 + 16) - 11 < 2)
      return (llvm::Value **)v8;
    sub_1C4768AD0((uint64_t)a2, *(_QWORD *)v3);
    if ((unint64_t)(v9 + 7) < 8)
      return (llvm::Value **)v8;
    if (*((unsigned __int8 *)v3 + 16) > 0x14u)
      return 0;
    if (llvm::Constant::isNullValue(v3))
      return llvm::Constant::getNullValue((llvm::Constant *)(*(_QWORD *)v7 + 1912), a2);
    v11 = *((unsigned __int8 *)v3 + 16);
    if (v11 == 5)
    {
      if (*((_WORD *)v3 + 9) != 48)
        return 0;
      v5 = 0;
      if (!*(_QWORD *)v3 || *(_DWORD *)(*(_QWORD *)v3 + 8) != 15)
        return (llvm::Value **)v5;
      v14 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(a2, *(_DWORD *)(*(_QWORD *)v3 + 8) >> 8) + 4);
      v15 = (llvm::ConstantExpr *)*((_QWORD *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF));
      LODWORD(v39) = v14;
      if (v14 <= 63)
      {
        if (v14 <= 31)
        {
          switch(v14)
          {
            case 16:
              v16 = *(_QWORD *)v7 + 1936;
              goto LABEL_28;
            case 8:
              v16 = *(_QWORD *)v7 + 1912;
              goto LABEL_28;
            case 1:
              v16 = *(_QWORD *)v7 + 1888;
              goto LABEL_28;
          }
        }
        else if (v14 == 32)
        {
          v16 = *(_QWORD *)v7 + 1960;
          goto LABEL_28;
        }
      }
      else
      {
        if (v14 == 64)
        {
          v16 = *(_QWORD *)v7 + 1984;
LABEL_28:
          IntegerCast = llvm::ConstantExpr::getIntegerCast(v15, (llvm::Type ***)v16, 0);
          goto LABEL_29;
        }
        if (v14 == 128)
        {
          v16 = *(_QWORD *)v7 + 2008;
          goto LABEL_28;
        }
      }
      v18 = sub_1C5270984(*(_QWORD *)v7 + 2168, &v39);
      v16 = *((_QWORD *)v18 + 1);
      if (!v16)
      {
        v19 = v18;
        v16 = sub_1C484358C(*(_QWORD *)v7 + 2040, 24, 3);
        v20 = v39;
        *(_QWORD *)v16 = v7;
        *(_QWORD *)(v16 + 16) = 0;
        *(_QWORD *)(v16 + 8) = (v20 << 8) | 0xDu;
        *((_QWORD *)v19 + 1) = v16;
      }
      goto LABEL_28;
    }
    if (v11 != 17)
      break;
    v12 = *(unsigned __int8 *)(*(_QWORD *)v3 + 8);
    if (v12 == 3)
    {
      v13 = (llvm::Constant *)(*(_QWORD *)v7 + 1984);
    }
    else if (v12 == 2)
    {
      v13 = (llvm::Constant *)(*(_QWORD *)v7 + 1960);
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)v3 + 8))
        return 0;
      v13 = (llvm::Constant *)(*(_QWORD *)v7 + 1936);
    }
    if (*(llvm::Constant **)v3 != v13)
    {
      IntegerCast = (uint64_t)sub_1C537D3B8((llvm *)0x31, (uint64_t)v3, v13, 0);
LABEL_29:
      v3 = (llvm *)IntegerCast;
    }
    v4 = *(_QWORD *)v3;
    v5 = v3;
    if (*(_DWORD *)(*(_QWORD *)v3 + 8) == 2061)
      return (llvm::Value **)v5;
  }
  if (v11 != 16)
  {
    if ((v11 & 0xFE) == 0xE)
    {
      v25 = *(_DWORD *)(*(_QWORD *)v3 + 32);
      if (v25)
      {
        v26 = 0;
        v27 = v8;
        while (1)
        {
          ElementAsConstant = llvm::ConstantDataSequential::getElementAsConstant(v3);
          isBytewiseValue = llvm::isBytewiseValue(ElementAsConstant, a2, v29);
          if (v27 == (llvm::UndefValue *)isBytewiseValue)
          {
            isBytewiseValue = (uint64_t)v27;
            if (!v27)
              return 0;
          }
          else
          {
            v5 = 0;
            if (!v27 || !isBytewiseValue)
              return (llvm::Value **)v5;
            if (v8 != v27)
            {
              v31 = v8 == (llvm::UndefValue *)isBytewiseValue;
              isBytewiseValue = (uint64_t)v27;
              if (!v31)
                return 0;
            }
          }
          ++v26;
          v27 = (llvm::UndefValue *)isBytewiseValue;
          v5 = (llvm::ValueHandleBase *)isBytewiseValue;
          if (v25 == v26)
            return (llvm::Value **)v5;
        }
      }
    }
    else
    {
      if ((v11 - 8) > 2)
        return 0;
      v32 = *((_DWORD *)v3 + 5) & 0x7FFFFFF;
      if ((_DWORD)v32)
      {
        v33 = 0;
        v34 = 32 * v32;
        v35 = v8;
        while (1)
        {
          v36 = *((_DWORD *)v3 + 5);
          if ((v36 & 0x40000000) != 0)
            v37 = (char *)*((_QWORD *)v3 - 1);
          else
            v37 = (char *)v3 - 32 * (v36 & 0x7FFFFFF);
          v38 = llvm::isBytewiseValue(*(llvm **)&v37[v33], a2, v10);
          if (v35 == (llvm::UndefValue *)v38)
          {
            v38 = (uint64_t)v35;
            if (!v35)
              return 0;
          }
          else
          {
            v5 = 0;
            if (!v35 || !v38)
              return (llvm::Value **)v5;
            if (v8 != v35)
            {
              v31 = v8 == (llvm::UndefValue *)v38;
              v38 = (uint64_t)v35;
              if (!v31)
                return 0;
            }
          }
          v33 += 32;
          v35 = (llvm::UndefValue *)v38;
          v5 = (llvm::ValueHandleBase *)v38;
          if (v34 == v33)
            return (llvm::Value **)v5;
        }
      }
    }
    return (llvm::Value **)v8;
  }
  if ((*((_BYTE *)v3 + 32) & 7) == 0)
  {
    v22 = (unsigned __int8 *)v3 + 24;
    if (llvm::APInt::isSplat((llvm *)((char *)v3 + 24), 8u))
    {
      if (*((_DWORD *)v3 + 8) >= 0x41u)
        v22 = *(unsigned __int8 **)v22;
      v24 = *v22;
      v40 = 8;
      v39 = v24;
      v5 = llvm::ConstantInt::get(v7, (llvm::LLVMContext *)&v39, v23);
      if (v40 >= 0x41)
      {
        if (v39)
          MEMORY[0x1CAA32F9C](v39, 0x1000C8000313F17);
      }
      return (llvm::Value **)v5;
    }
  }
  return 0;
}

uint64_t llvm::FindInsertedValue(uint64_t a1, llvm::Type *a2, uint64_t a3, llvm::Instruction *a4)
{
  uint64_t v4;
  uint64_t v6;
  llvm::Type *v7;
  unsigned int v8;
  llvm::UndefValue *AggregateElement;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t *v16;
  llvm::UndefValue *v17;
  uint64_t v18;
  llvm::Type *v19;
  unint64_t v20;
  int v21;
  llvm::UndefValue *v22;
  llvm::UndefValue **v23;
  llvm::Type **v24;
  unint64_t v25;
  unsigned int v26;
  char *InsertedValue;
  unsigned int v29;
  unint64_t v30;
  unsigned int v31;
  unint64_t v32;
  const void *v33;
  unint64_t v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[6];

  v4 = a1;
  v40[5] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return a1;
  v6 = a3;
  v7 = a2;
  while (1)
  {
    while (1)
    {
      v8 = *(unsigned __int8 *)(v4 + 16);
      if (!v4 || v8 > 0x14)
        break;
      AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v4, (llvm::Type *)*(unsigned int *)v7);
      if (!AggregateElement)
        return 0;
      v4 = (uint64_t)AggregateElement;
      v7 = (llvm::Type *)((char *)v7 + 4);
      v10 = (uint64_t)AggregateElement;
      if (!--v6)
        return v10;
    }
    if (!v4 || v8 != 93)
    {
      v10 = 0;
      if (!v4 || v8 != 92)
        return v10;
      v29 = *(_DWORD *)(v4 + 72);
      v30 = v29 + v6;
      v38 = v40;
      v39 = 0x500000000;
      if (v30 < 6)
      {
        v31 = 0;
        v32 = 5;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v30, 4);
        v29 = *(_DWORD *)(v4 + 72);
        v31 = v39;
        v32 = HIDWORD(v39);
      }
      v33 = *(const void **)(v4 + 64);
      v34 = v29 + (unint64_t)v31;
      if (v34 > v32)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v34, 4);
        v31 = v39;
        if (!v29)
          goto LABEL_53;
      }
      else if (!v29)
      {
LABEL_53:
        v35 = v31 + v29;
        LODWORD(v39) = v35;
        v36 = 4 * v6;
        v37 = v35 + (v36 >> 2);
        if (v37 > HIDWORD(v39))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, v37, 4);
          v35 = v39;
        }
        memcpy((char *)v38 + 4 * v35, v7, v36);
        LODWORD(v39) = v39 + ((unint64_t)v36 >> 2);
        InsertedValue = (char *)llvm::FindInsertedValue(*(_QWORD *)(v4 - 32), v38, v39, a4);
        goto LABEL_42;
      }
      memcpy((char *)v38 + 4 * v31, v33, 4 * v29);
      v31 = v39;
      goto LABEL_53;
    }
    v11 = *(unsigned int *)(v4 + 72);
    if ((_DWORD)v11)
      break;
    v15 = (unsigned int *)v7;
LABEL_17:
    v16 = (uint64_t *)(v4 - 32);
    v6 = ((llvm::Type *)((char *)v7 + 4 * v6) - (llvm::Type *)v15) >> 2;
    v7 = (llvm::Type *)v15;
LABEL_19:
    v4 = *v16;
    v10 = *v16;
    if (!v6)
      return v10;
  }
  v12 = 0;
  v13 = 4 * v11;
  v14 = (unsigned int *)((char *)v7 + 4 * v6);
  while (4 * v6 != v12)
  {
    if (*(_DWORD *)((char *)v7 + v12) != *(_DWORD *)(*(_QWORD *)(v4 + 64) + v12))
    {
      v16 = (uint64_t *)(v4 - 64);
      goto LABEL_19;
    }
    v12 += 4;
    if (v13 == v12)
    {
      v15 = (unsigned int *)((char *)v7 + v12);
      goto LABEL_17;
    }
  }
  if (!a4)
    return 0;
  v17 = *(llvm::UndefValue **)v4;
  if (v14 == (unsigned int *)v7)
  {
    v22 = *(llvm::UndefValue **)v4;
    goto LABEL_37;
  }
  v18 = 4 * ((4 * v6) >> 2);
  v19 = v7;
  while (2)
  {
    v20 = *(unsigned int *)v19;
    v21 = *((unsigned __int8 *)v17 + 8);
    if (v17 && v21 == 17)
    {
      if (*((_QWORD *)v17 + 4) <= v20)
        break;
      v23 = (llvm::UndefValue **)((char *)v17 + 24);
      goto LABEL_30;
    }
    v22 = 0;
    if (!v17 || v21 != 16)
      goto LABEL_37;
    if (v20 < *((_DWORD *)v17 + 3))
    {
      v23 = (llvm::UndefValue **)(*((_QWORD *)v17 + 2) + 8 * v20);
LABEL_30:
      v17 = *v23;
      v19 = (llvm::Type *)((char *)v19 + 4);
      v22 = v17;
      v18 -= 4;
      if (!v18)
        goto LABEL_37;
      continue;
    }
    break;
  }
  v22 = 0;
LABEL_37:
  v24 = (llvm::Type **)llvm::UndefValue::get(v22, a2);
  v38 = v40;
  v39 = 0xA00000000;
  v25 = ((char *)v14 - (char *)v7) & 0xFFFFFFFFFFFFFFFCLL;
  if (v25 >= 0x29)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v38, (uint64_t)v40, (uint64_t)v25 >> 2, 4);
    v26 = v39;
  }
  else
  {
    v26 = 0;
  }
  if (v14 != (unsigned int *)v7)
  {
    memcpy((char *)v38 + 4 * v26, v7, ((char *)v14 - (char *)v7) & 0xFFFFFFFFFFFFFFFCLL);
    v26 = v39;
  }
  LODWORD(v39) = v26 + (v25 >> 2);
  InsertedValue = sub_1C4FA33AC(v4, v24, (uint64_t)v22, (uint64_t)&v38, v39, a4);
LABEL_42:
  v10 = (uint64_t)InsertedValue;
  if (v38 != v40)
    free(v38);
  return v10;
}

BOOL llvm::isGEPBasedOnPointerToString(llvm *this, const llvm::GEPOperator *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;
  int v7;
  unsigned int v8;
  llvm *v10;
  uint64_t v11;
  llvm::APInt *v14;
  unsigned int v15;

  v2 = *((_DWORD *)this + 5);
  if ((v2 & 0x7FFFFFF) != 3)
    return 0;
  v3 = 24;
  if (*((_BYTE *)this + 16) == 62)
    v3 = 64;
  v4 = *(_QWORD *)((char *)this + v3);
  if (!v4 || *(_BYTE *)(v4 + 8) != 17)
    return 0;
  v6 = *(_DWORD *)(*(_QWORD *)(v4 + 24) + 8);
  v7 = v6;
  v8 = v6 >> 8;
  if (v7 != 13 || v8 != (_DWORD)a2)
    return 0;
  v10 = (v2 & 0x40000000) != 0 ? (llvm *)*((_QWORD *)this - 1) : (llvm *)((char *)this - 96);
  v11 = *((_QWORD *)v10 + 4);
  if (!v11 || *(_BYTE *)(v11 + 16) != 16)
    return 0;
  v14 = (llvm::APInt *)(v11 + 24);
  v15 = *(_DWORD *)(v11 + 32);
  if (v15 > 0x40)
    return llvm::APInt::countLeadingZerosSlowCase(v14) == v15;
  else
    return *(_QWORD *)v14 == 0;
}

uint64_t llvm::getConstantDataArrayInfo(llvm::Value *a1, _QWORD *a2, const llvm::GEPOperator *a3, unint64_t a4)
{
  llvm::Value *v7;
  llvm::Value *v8;
  int v9;
  uint64_t result;
  int v11;
  char *v12;
  uint64_t v13;
  BOOL v14;
  _QWORD *v15;
  llvm::Value **v16;
  llvm::GlobalValue *Section;
  uint64_t v18;
  llvm::Module *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;

  while (1)
  {
    v7 = llvm::Value::stripPointerCasts(a1);
    v8 = v7;
    v9 = *((unsigned __int8 *)v7 + 16);
    if (v9 != 5)
      break;
    if (*((_WORD *)v7 + 9) != 34)
      return 0;
LABEL_5:
    result = llvm::isGEPBasedOnPointerToString(v7, a3);
    if (!(_DWORD)result)
      return result;
    v11 = *((_DWORD *)v8 + 5);
    if ((v11 & 0x40000000) != 0)
      v12 = (char *)*((_QWORD *)v8 - 1);
    else
      v12 = (char *)v8 - 32 * (v11 & 0x7FFFFFF);
    v13 = *((_QWORD *)v12 + 8);
    if (v13)
      v14 = *(_BYTE *)(v13 + 16) == 16;
    else
      v14 = 0;
    if (!v14)
      return 0;
    v15 = (_QWORD *)(v13 + 24);
    if (*(_DWORD *)(v13 + 32) >= 0x41u)
      v15 = (_QWORD *)*v15;
    if ((v11 & 0x40000000) != 0)
      v16 = (llvm::Value **)*((_QWORD *)v8 - 1);
    else
      v16 = (llvm::Value **)((char *)v8 - 32 * (v11 & 0x7FFFFFF));
    a1 = *v16;
    a4 += *v15;
  }
  if (v9 == 62)
    goto LABEL_5;
  if (v9 != 3 || (*((_BYTE *)v7 + 80) & 1) == 0 || (*((_DWORD *)v7 + 5) & 0x7FFFFFF) == 0)
    return 0;
  Section = llvm::GlobalValue::getSection(v7);
  if (v18 == 12
    && *(_QWORD *)Section == *(_QWORD *)"llvm.ptrauth"
    && *((_DWORD *)Section + 2) == (unint64_t)*(unsigned int *)"auth")
  {
    return 0;
  }
  if ((*((_DWORD *)v8 + 8) & 0xFu) - 5 >= 4)
  {
    result = 0;
    if (((1 << (*((_DWORD *)v8 + 8) & 0xF)) & 0x614) != 0)
      return result;
  }
  v19 = (llvm::Module *)*((_QWORD *)v8 + 5);
  if (v19)
  {
    if (llvm::Module::getSemanticInterposition(v19) && (*((_BYTE *)v8 + 33) & 0x40) == 0)
      return 0;
  }
  if ((*((_BYTE *)v8 + 80) & 2) != 0)
    return 0;
  result = llvm::Constant::isNullValue(*((llvm::Constant **)v8 - 4));
  if ((_DWORD)result)
  {
    v20 = *((_QWORD *)v8 + 3);
    if (!v20 || *(_BYTE *)(v20 + 8) != 17)
    {
      sub_1C4768AD0(*((_QWORD *)v8 + 5) + 272, v20);
      v26 = ((unint64_t)(v25 + 7) >> 3) / (a3 >> 3);
      v27 = v26 > a4;
      v28 = v26 - a4;
      if (v27)
      {
        *a2 = 0;
        a2[1] = 0;
        result = 1;
        a2[2] = v28;
        return result;
      }
      return 0;
    }
    v21 = 0;
LABEL_35:
    result = 0;
    if (*(_DWORD *)(*(_QWORD *)(v20 + 24) + 8) == 13
      && *(_DWORD *)(*(_QWORD *)(v20 + 24) + 8) >> 8 == (_DWORD)a3)
    {
      v22 = *(_QWORD *)(v20 + 32);
      v23 = v22 >= a4;
      v24 = v22 - a4;
      if (v23)
      {
        *a2 = v21;
        a2[1] = a4;
        result = 1;
        a2[2] = v24;
        return result;
      }
      return 0;
    }
  }
  else
  {
    v21 = *((_QWORD *)v8 - 4);
    if (v21 && *(_BYTE *)(v21 + 16) == 14)
    {
      v20 = *(_QWORD *)v21;
      goto LABEL_35;
    }
  }
  return result;
}

uint64_t llvm::getConstantStringInfo(llvm *this, const llvm::Value *a2, llvm::StringRef *a3, int a4)
{
  uint64_t result;
  uint64_t RawDataValues;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  size_t v12;
  void *v13;
  unint64_t v14;
  llvm::ConstantDataSequential *v15;
  unint64_t v16;
  uint64_t v17;

  result = llvm::getConstantDataArrayInfo(this, &v15, (const llvm::GEPOperator *)8, (unint64_t)a3);
  if ((_DWORD)result)
  {
    if (v15)
    {
      RawDataValues = llvm::ConstantDataSequential::getRawDataValues(v15);
      v9 = v16;
      if (v8 >= v16)
        v10 = v16;
      else
        v10 = v8;
      v11 = RawDataValues + v10;
      v12 = v8 - v10;
      *(_QWORD *)a2 = RawDataValues + v10;
      *((_QWORD *)a2 + 1) = v8 - v10;
      if (a4)
      {
        if (v8 > v9 && (v13 = memchr((void *)(RawDataValues + v10), 0, v12)) != 0)
          v14 = (unint64_t)v13 - v11;
        else
          v14 = -1;
        if (v12 < v14)
          v14 = v12;
        *((_QWORD *)a2 + 1) = v14;
      }
      return 1;
    }
    if (a4)
    {
      *(_QWORD *)a2 = 0;
      *((_QWORD *)a2 + 1) = 0;
      return 1;
    }
    if (v17 == 1)
    {
      result = 1;
      *(_QWORD *)a2 = &unk_1C869AA51;
      *((_QWORD *)a2 + 1) = 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1C4F89050(llvm::Value *a1, llvm::SmallPtrSetImplBase *a2, const llvm::GEPOperator *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  char v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int ConstantDataArrayInfo;
  llvm::ConstantDataSequential *v19;
  int v20;
  int v21;
  uint64_t v22;
  llvm::ConstantDataSequential *v23;
  int v24;

  v5 = (unsigned __int8 *)llvm::Value::stripPointerCasts(a1);
  v6 = v5;
  v7 = v5[16];
  if (v5 && v7 == 83)
  {
    sub_1C4774094(a2, (uint64_t)v5);
    if (v8)
    {
      v9 = *((_DWORD *)v6 + 5);
      if ((v9 & 0x40000000) != 0)
      {
        v11 = (unsigned __int8 *)*((_QWORD *)v6 - 1);
        v10 = v9 & 0x7FFFFFF;
        if (v10)
          goto LABEL_6;
      }
      else
      {
        v10 = v9 & 0x7FFFFFF;
        v11 = &v6[-32 * v10];
        if (v10)
        {
LABEL_6:
          v12 = 32 * v10;
          v13 = -1;
          while (1)
          {
            result = sub_1C4F89050(*(_QWORD *)v11, a2, a3);
            if (result == -1)
            {
              result = v13;
            }
            else
            {
              if (!result)
                return result;
              if (v13 != -1 && result != v13)
                return 0;
            }
            v11 += 32;
            v13 = result;
            v12 -= 32;
            if (!v12)
              return result;
          }
        }
      }
    }
    return -1;
  }
  else if (v5 && v7 == 85)
  {
    result = sub_1C4F89050(*((_QWORD *)v5 - 8), a2, a3);
    if (result)
    {
      v15 = result;
      v16 = sub_1C4F89050(*((_QWORD *)v6 - 4), a2, a3);
      if (v15 == v16)
        v17 = v15;
      else
        v17 = 0;
      if (v16 == -1)
        v17 = v15;
      if (v15 == -1)
        v17 = v16;
      if (v16)
        return v17;
      else
        return 0;
    }
  }
  else
  {
    ConstantDataArrayInfo = llvm::getConstantDataArrayInfo((llvm::Value *)v5, &v23, a3, 0);
    result = 0;
    if (ConstantDataArrayInfo)
    {
      v19 = v23;
      if (v23)
      {
        v20 = v24;
        if (v24)
        {
          v21 = 0;
          while (1)
          {
            llvm::ConstantDataSequential::getElementAsInteger(v19);
            if (!v22)
              break;
            if (v20 == ++v21)
            {
              v21 = v20;
              return (v21 + 1);
            }
          }
        }
        else
        {
          v21 = 0;
        }
        return (v21 + 1);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

uint64_t llvm::getArgumentAliasingToReturnedPointer(llvm *this, const llvm::CallBase *a2)
{
  char v2;
  uint64_t v4;
  uint64_t result;
  int v6;
  uint64_t v7;
  int v8;

  v2 = (char)a2;
  v8 = 0;
  if (llvm::AttributeList::hasAttrSomewhere((uint64_t *)this + 8, 46, &v8)
    || (v4 = *((_QWORD *)this - 4)) != 0
    && !*(_BYTE *)(v4 + 16)
    && *(_QWORD *)(v4 + 24) == *((_QWORD *)this + 9)
    && (v7 = *(_QWORD *)(v4 + 112), llvm::AttributeList::hasAttrSomewhere(&v7, 46, &v8)))
  {
    result = *((_QWORD *)this + 4 * (v8 - 1) + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    if (result)
      return result;
    v4 = *((_QWORD *)this - 4);
  }
  if (!v4 || *(_BYTE *)(v4 + 16) || *(_QWORD *)(v4 + 24) != *((_QWORD *)this + 9))
    return 0;
  result = 0;
  v6 = *(_DWORD *)(v4 + 36);
  if (v6 > 289)
  {
    if (v6 != 290 && v6 != 442 && v6 != 1260)
      return result;
    return *((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  }
  if (v6 == 166)
    return *((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  if (v6 == 252)
  {
    if ((v2 & 1) != 0)
      return 0;
    return *((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
  }
  return result;
}

uint64_t llvm::isIntrinsicReturningPointerAliasingArgumentWithoutCapturing(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = *(_QWORD *)(a1 - 32);
  if (!v2 || *(_BYTE *)(v2 + 16) || *(_QWORD *)(v2 + 24) != *(_QWORD *)(a1 + 72))
    return 0;
  v3 = *(_DWORD *)(v2 + 36);
  result = 1;
  if (v3 <= 289)
  {
    if (v3 == 166)
      return result;
    if (v3 == 252)
      return a2 ^ 1u;
    return 0;
  }
  if (v3 != 290 && v3 != 442 && v3 != 1260)
    return 0;
  return result;
}

llvm *llvm::getUnderlyingObject(llvm *this, const llvm::Value *a2)
{
  uint64_t v2;
  llvm *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  llvm **v9;
  int v10;
  llvm **v11;
  llvm::Module *v12;
  llvm *result;
  int v14;
  llvm **v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  llvm *v21;
  uint64_t v22;
  int v23;

  v3 = this;
  if (*(_BYTE *)(*(_QWORD *)this + 8) == 15)
  {
    v4 = 0;
    v5 = (_DWORD)a2 - 1;
    while (1)
    {
      v6 = *((unsigned __int8 *)v3 + 16);
      if (v6 == 62)
      {
LABEL_7:
        v8 = *((_DWORD *)v3 + 5);
        if ((v8 & 0x40000000) != 0)
          v9 = (llvm **)*((_QWORD *)v3 - 1);
        else
          v9 = (llvm **)((char *)v3 - 32 * (v8 & 0x7FFFFFF));
LABEL_21:
        v3 = *v9;
        goto LABEL_52;
      }
      if (v6 == 5)
      {
        v7 = *((unsigned __int16 *)v3 + 9);
        if (v7 == 49)
          goto LABEL_12;
        if (v7 == 34)
          goto LABEL_7;
      }
      else
      {
        v7 = v6 - 28;
        if (v6 < 0x1C)
          goto LABEL_14;
        if (v6 == 77)
          goto LABEL_12;
      }
      if (v7 == 50)
      {
LABEL_12:
        v10 = *((_DWORD *)v3 + 5);
        if ((v10 & 0x40000000) != 0)
          v11 = (llvm **)*((_QWORD *)v3 - 1);
        else
          v11 = (llvm **)((char *)v3 - 32 * (v10 & 0x7FFFFFF));
        v3 = *v11;
        result = *v11;
        if (*(_BYTE *)(*(_QWORD *)*v11 + 8) != 15)
          return result;
        goto LABEL_52;
      }
LABEL_14:
      if (v6 == 83)
      {
        v14 = *((_DWORD *)v3 + 5);
        if ((v14 & 0x7FFFFFF) != 1)
          goto LABEL_48;
        if ((v14 & 0x40000000) != 0)
          v15 = (llvm **)*((_QWORD *)v3 - 1);
        else
          v15 = (llvm **)((char *)v3 - 32);
        v3 = *v15;
        v20 = 4;
      }
      else
      {
        if (v6 == 1)
        {
          if ((*((_DWORD *)v3 + 8) & 0xFu) - 5 >= 4 && ((1 << (*((_DWORD *)v3 + 8) & 0xF)) & 0x614) != 0)
            return v3;
          v12 = (llvm::Module *)*((_QWORD *)v3 + 5);
          if (v12)
          {
            if (llvm::Module::getSemanticInterposition(v12) && (*((_BYTE *)v3 + 33) & 0x40) == 0)
              return v3;
          }
          v9 = (llvm **)((char *)v3 - 32);
          goto LABEL_21;
        }
        if (v6 < 0x1C || (v16 = v6 - 33, v16 > 0x33) || ((1 << v16) & 0x8000000000041) == 0)
        {
LABEL_48:
          v20 = 0;
          v2 = (uint64_t)v3;
          goto LABEL_49;
        }
        v23 = 0;
        if (!llvm::AttributeList::hasAttrSomewhere((uint64_t *)v3 + 8, 46, &v23)
          && ((v17 = *((_QWORD *)v3 - 4)) == 0
           || *(_BYTE *)(v17 + 16)
           || *(_QWORD *)(v17 + 24) != *((_QWORD *)v3 + 9)
           || (v22 = *(_QWORD *)(v17 + 112), !llvm::AttributeList::hasAttrSomewhere(&v22, 46, &v23)))
          || (v21 = (llvm *)*((_QWORD *)v3 + 4 * (v23 - 1) + -4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF))) == 0)
        {
          v18 = *((_QWORD *)v3 - 4);
          if (!v18 || *(_BYTE *)(v18 + 16) || *(_QWORD *)(v18 + 24) != *((_QWORD *)v3 + 9))
            goto LABEL_48;
          v19 = *(_DWORD *)(v18 + 36);
          if (v19 > 289)
          {
            if (v19 != 290 && v19 != 1260 && v19 != 442)
              goto LABEL_48;
          }
          else if (v19 != 166 && v19 != 252)
          {
            goto LABEL_48;
          }
          v21 = (llvm *)*((_QWORD *)v3 - 4 * (*((_DWORD *)v3 + 5) & 0x7FFFFFF));
          if (!v21)
            goto LABEL_48;
        }
        v20 = 4;
        v3 = v21;
      }
LABEL_49:
      if (v20 <= 1)
        v20 = 1;
      result = (llvm *)v2;
      if (v20 != 4)
        return result;
LABEL_52:
      ++v4;
      result = v3;
      if (v5 < v4)
        return result;
    }
  }
  return v3;
}

void llvm::getUnderlyingObjects(uint64_t a1, uint64_t a2, uint64_t *a3, llvm::Value *a4)
{
  uint64_t v7;
  unsigned int v8;
  llvm *v9;
  llvm *UnderlyingObject;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char *v43;
  int v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  char *v49;
  _BYTE *v50;
  _BYTE *v51;
  uint64_t v52;
  int v53;
  _BYTE v54[32];
  void *v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD v58[5];

  v58[4] = *MEMORY[0x1E0C80C00];
  v50 = v54;
  v51 = v54;
  v52 = 4;
  v53 = 0;
  v55 = v58;
  v57 = 4;
  v58[0] = a1;
  v7 = a2 + 16;
  v8 = 1;
  do
  {
    while (1)
    {
      v9 = (llvm *)*((_QWORD *)v55 + v8 - 1);
      v56 = v8 - 1;
      UnderlyingObject = llvm::getUnderlyingObject(v9, a4);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v50, (uint64_t)UnderlyingObject);
      if (v11)
        break;
LABEL_62:
      v8 = v56;
      if (!v56)
        goto LABEL_63;
    }
    v12 = *((unsigned __int8 *)UnderlyingObject + 16);
    if (!UnderlyingObject || v12 != 85)
    {
      if (!UnderlyingObject || v12 != 83)
      {
        v31 = *(unsigned int *)(a2 + 8);
        if (v31 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v7, v31 + 1, 8);
          v31 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v31) = UnderlyingObject;
        ++*(_DWORD *)(a2 + 8);
        goto LABEL_62;
      }
      if (!a3)
        goto LABEL_58;
      v17 = *((_DWORD *)a3 + 4);
      if (!v17)
        goto LABEL_58;
      v18 = *((_QWORD *)UnderlyingObject + 5);
      v19 = *a3;
      v20 = v17 - 1;
      v21 = ((v18 >> 4) ^ (v18 >> 9)) & v20;
      v22 = *(_QWORD *)(*a3 + 16 * v21);
      v23 = v21;
      if (v18 != v22)
      {
        v24 = 1;
        v25 = *(_QWORD *)(*a3 + 16 * (((v18 >> 4) ^ (v18 >> 9)) & v20));
        LODWORD(v23) = ((v18 >> 4) ^ (v18 >> 9)) & v20;
        while (v25 != -4096)
        {
          v26 = v23 + v24++;
          v23 = v26 & v20;
          v25 = *(_QWORD *)(v19 + 16 * v23);
          if (v18 == v25)
            goto LABEL_19;
        }
        goto LABEL_58;
      }
LABEL_19:
      v27 = *(_QWORD *)(v19 + 16 * v23 + 8);
      if (v27 && **(_QWORD **)(v27 + 32) == v18)
      {
        if (v18 == v22)
        {
LABEL_25:
          v30 = *(_QWORD *)(v19 + 16 * v21 + 8);
        }
        else
        {
          v28 = 1;
          while (v22 != -4096)
          {
            v29 = v21 + v28++;
            v21 = v29 & v20;
            v22 = *(_QWORD *)(v19 + 16 * v21);
            if (v18 == v22)
              goto LABEL_25;
          }
          v30 = 0;
        }
        v32 = *((_DWORD *)UnderlyingObject + 5);
        if ((v32 & 0x7FFFFFF) == 2)
        {
          if ((v32 & 0x40000000) != 0)
            v33 = (uint64_t *)*((_QWORD *)UnderlyingObject - 1);
          else
            v33 = (uint64_t *)((char *)UnderlyingObject - 64);
          v34 = *v33;
          if (*(unsigned __int8 *)(v34 + 16) <= 0x1Bu)
            v34 = 0;
          if (v34)
          {
            v35 = *(_QWORD *)(v34 + 40);
            v36 = ((v35 >> 4) ^ (v35 >> 9)) & v20;
            v37 = *(_QWORD *)(v19 + 16 * v36);
            v38 = v36;
            if (v35 == v37)
            {
LABEL_41:
              v42 = *(_QWORD *)(v19 + 16 * v38 + 8);
            }
            else
            {
              v39 = 1;
              v40 = *(_QWORD *)(v19 + 16 * (((v35 >> 4) ^ (v35 >> 9)) & v20));
              LODWORD(v38) = ((v35 >> 4) ^ (v35 >> 9)) & v20;
              while (v40 != -4096)
              {
                v41 = v38 + v39++;
                v38 = v41 & v20;
                v40 = *(_QWORD *)(v19 + 16 * v38);
                if (v35 == v40)
                  goto LABEL_41;
              }
              v42 = 0;
            }
            if (v42 == v30)
            {
LABEL_49:
              if (v35 == v37)
              {
LABEL_53:
                v46 = *(_QWORD *)(v19 + 16 * v36 + 8);
              }
              else
              {
                v44 = 1;
                while (v37 != -4096)
                {
                  v45 = v36 + v44++;
                  v36 = v45 & v20;
                  v37 = *(_QWORD *)(v19 + 16 * v36);
                  if (v35 == v37)
                    goto LABEL_53;
                }
                v46 = 0;
              }
              if (v46 == v30 && *(_BYTE *)(v34 + 16) == 60 && !llvm::Loop::isLoopInvariant(v30, *(_QWORD *)(v34 - 32)))
                goto LABEL_62;
              goto LABEL_58;
            }
          }
          if ((v32 & 0x40000000) != 0)
            v43 = (char *)*((_QWORD *)UnderlyingObject - 1);
          else
            v43 = (char *)UnderlyingObject - 64;
          v34 = *((_QWORD *)v43 + 4);
          if (*(unsigned __int8 *)(v34 + 16) >= 0x1Cu)
          {
            v35 = *(_QWORD *)(v34 + 40);
            v36 = ((v35 >> 4) ^ (v35 >> 9)) & v20;
            v37 = *(_QWORD *)(v19 + 16 * v36);
            goto LABEL_49;
          }
        }
      }
LABEL_58:
      v47 = *((_DWORD *)UnderlyingObject + 5);
      if ((v47 & 0x40000000) != 0)
      {
        v49 = (char *)*((_QWORD *)UnderlyingObject - 1);
        v48 = v47 & 0x7FFFFFF;
      }
      else
      {
        v48 = v47 & 0x7FFFFFF;
        v49 = (char *)UnderlyingObject - 32 * v48;
      }
      sub_1C4DA9878((unsigned int *)&v55, (uint64_t)v55 + 8 * v56, v49, &v49[32 * v48]);
      goto LABEL_62;
    }
    v13 = *((_QWORD *)UnderlyingObject - 8);
    v14 = v56;
    if (v56 >= (unint64_t)v57)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, (uint64_t)v58, v56 + 1, 8);
      v14 = v56;
    }
    *((_QWORD *)v55 + v14) = v13;
    v15 = v56 + 1;
    v56 = v15;
    v16 = *((_QWORD *)UnderlyingObject - 4);
    if (v15 >= v57)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v55, (uint64_t)v58, v15 + 1, 8);
      LODWORD(v15) = v56;
    }
    *((_QWORD *)v55 + v15) = v16;
    v8 = v56 + 1;
    v56 = v8;
  }
  while (v8);
LABEL_63:
  if (v55 != v58)
    free(v55);
  if (v51 != v50)
    free(v51);
}

uint64_t llvm::getUnderlyingObjectsForCodeGen(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  const llvm::Value *v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  _BOOL4 v27;
  BOOL v28;
  int v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD **v32;
  uint64_t v33;
  char v34;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  _BYTE v40[128];
  void *v41;
  uint64_t v42;
  _BYTE v43[32];
  _QWORD *v44;
  unsigned int v45;
  unsigned int v46;
  _QWORD v47[5];

  v47[4] = *MEMORY[0x1E0C80C00];
  v36 = v40;
  v37 = v40;
  v38 = 16;
  v39 = 0;
  v44 = v47;
  v46 = 4;
  v47[0] = a1;
  v3 = a2 + 16;
  v4 = 1;
  do
  {
    v5 = v44[v4 - 1];
    v45 = v4 - 1;
    v41 = v43;
    v42 = 0x400000000;
    llvm::getUnderlyingObjects(v5, (uint64_t)&v41, 0, (llvm::Value *)6);
    if (!(_DWORD)v42)
    {
LABEL_67:
      v33 = 1;
      goto LABEL_69;
    }
    v6 = (uint64_t *)v41;
    v7 = (uint64_t *)((char *)v41 + 8 * v42);
    while (1)
    {
      v8 = *v6;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v36, *v6);
      if ((_BYTE)v9)
        break;
LABEL_64:
      if (++v6 == v7)
        goto LABEL_67;
    }
    v10 = *(unsigned __int8 *)(v8 + 16);
    if (v8)
      v11 = v10 > 0x1B;
    else
      v11 = 0;
    if (v11)
    {
      v12 = v10 - 28;
    }
    else
    {
      if (!v8 || v10 != 5)
        goto LABEL_59;
      v12 = *(unsigned __int16 *)(v8 + 18);
    }
    if (v12 == 48)
    {
      v13 = *(_DWORD *)(v8 + 20);
      if ((v13 & 0x40000000) != 0)
        v14 = *(_QWORD *)(v8 - 8);
      else
        v14 = v8 - 32 * (v13 & 0x7FFFFFF);
      v15 = *(_QWORD *)v14;
      v16 = *(unsigned __int8 *)(*(_QWORD *)v14 + 16);
      v17 = v16 < 0x1C;
      v18 = v16 != 5 && v16 < 0x1C;
      if (v15 && !v18)
      {
        while (1)
        {
          if (v17)
            v19 = *(unsigned __int16 *)(v15 + 18);
          else
            v19 = v16 - 28;
          if (v19 == 47)
          {
            v29 = *(_DWORD *)(v15 + 20);
            if ((v29 & 0x40000000) != 0)
              v30 = *(uint64_t **)(v15 - 8);
            else
              v30 = (uint64_t *)(v15 - 32 * (v29 & 0x7FFFFFF));
            v15 = *v30;
            goto LABEL_56;
          }
          if (v19 != 13)
            goto LABEL_56;
          v20 = *(_DWORD *)(v15 + 20);
          if ((v20 & 0x40000000) == 0)
            break;
          v24 = *(uint64_t **)(v15 - 8);
          v21 = v24[4];
          v22 = *(unsigned __int8 *)(v21 + 16);
          if (v22 != 16)
            goto LABEL_31;
LABEL_44:
          v15 = *v24;
          v16 = *(unsigned __int8 *)(*v24 + 16);
          v17 = v16 < 0x1C;
          v27 = v16 != 5 && v16 < 0x1C;
          if (v15)
            v28 = !v27;
          else
            v28 = 0;
          if (!v28)
            goto LABEL_56;
        }
        v21 = *(_QWORD *)(v15 - 32 * (v20 & 0x7FFFFFF) + 32);
        v22 = *(unsigned __int8 *)(v21 + 16);
        if (v22 == 16)
        {
          v23 = -(uint64_t)(v20 & 0x7FFFFFF);
LABEL_42:
          v24 = (uint64_t *)(v15 + 32 * v23);
          goto LABEL_44;
        }
LABEL_31:
        if (v22 <= 0x1B)
        {
          if (v22 == 5)
          {
            v25 = *(unsigned __int16 *)(v21 + 18);
            goto LABEL_35;
          }
          goto LABEL_36;
        }
        v25 = v22 - 28;
LABEL_35:
        if (v25 != 17)
        {
LABEL_36:
          if ((v20 & 0x40000000) != 0)
            v26 = *(_QWORD *)(v15 - 8);
          else
            v26 = v15 - 32 * (v20 & 0x7FFFFFF);
          if (*(_BYTE *)(*(_QWORD *)(v26 + 32) + 16) != 83)
            goto LABEL_56;
        }
        if ((v20 & 0x40000000) != 0)
        {
          v24 = *(uint64_t **)(v15 - 8);
          goto LABEL_44;
        }
        v23 = -(uint64_t)(v20 & 0x7FFFFFF);
        goto LABEL_42;
      }
LABEL_56:
      if (*(_BYTE *)(*(_QWORD *)v15 + 8) == 15)
      {
        v31 = v45;
        v32 = &v44;
        if (v45 >= (unint64_t)v46)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v47, v45 + 1, 8);
          v31 = v45;
        }
LABEL_63:
        (*v32)[v31] = v15;
        ++*((_DWORD *)v32 + 2);
        goto LABEL_64;
      }
    }
LABEL_59:
    if (llvm::isIdentifiedObject((llvm *)v8, v9))
    {
      v31 = *(unsigned int *)(a2 + 8);
      if (v31 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v3, v31 + 1, 8);
        v31 = *(unsigned int *)(a2 + 8);
      }
      v32 = (_QWORD **)a2;
      v15 = v8;
      goto LABEL_63;
    }
    v33 = 0;
    *(_DWORD *)(a2 + 8) = 0;
LABEL_69:
    if (v41 != v43)
      free(v41);
    v4 = v45;
    if (v45)
      v34 = v33;
    else
      v34 = 0;
  }
  while ((v34 & 1) != 0);
  if (v44 != v47)
    free(v44);
  if (v37 != v36)
    free(v37);
  return v33;
}

uint64_t llvm::findAllocaForValue(llvm *this, llvm::Value *a2)
{
  int v2;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  int v30;
  _BYTE v31[32];
  uint64_t v32;
  int v33;
  void *v34;
  uint64_t v35;
  _QWORD v36[5];

  v2 = (int)a2;
  v36[4] = *MEMORY[0x1E0C80C00];
  v27 = v31;
  v28 = v31;
  v29 = 4;
  v30 = 0;
  v34 = v36;
  v35 = 0x400000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v27, (uint64_t)this);
  LODWORD(v4) = v35;
  if (v5)
  {
    if (v35 >= HIDWORD(v35))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v35 + 1, 8);
      LODWORD(v4) = v35;
    }
    *((_QWORD *)v34 + v4) = this;
    LODWORD(v4) = v35 + 1;
  }
  v6 = 0;
  while (1)
  {
    v7 = v34;
    v8 = *((_QWORD *)v34 + v4 - 1);
    LODWORD(v4) = v4 - 1;
    LODWORD(v35) = v4;
    v9 = *(unsigned __int8 *)(v8 + 16);
    if (v8 && v9 == 59)
    {
      if (v6)
      {
        v20 = v6 == v8;
        v6 = v8;
        if (!v20)
          goto LABEL_59;
      }
      else
      {
        v6 = v8;
      }
      goto LABEL_36;
    }
    if (v9 >= 0x1C && v9 - 79 >= 0xFFFFFFF3)
    {
      v14 = *(_QWORD *)(v8 - 32);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v27, v14);
      v4 = v35;
      if (v15)
        goto LABEL_33;
      goto LABEL_36;
    }
    if (v9 == 62)
    {
      if (v2 && !llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v8))
        goto LABEL_59;
      v14 = *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF));
LABEL_32:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v27, v14);
      v4 = v35;
      if (v19)
      {
LABEL_33:
        if (v4 >= HIDWORD(v35))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v4 + 1, 8);
          LODWORD(v4) = v35;
        }
        *((_QWORD *)v34 + v4) = v14;
        LODWORD(v4) = v35 + 1;
        LODWORD(v35) = v35 + 1;
        goto LABEL_36;
      }
      goto LABEL_36;
    }
    if (v9 == 85)
    {
      v16 = *(_QWORD *)(v8 - 64);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v27, v16);
      if (v17)
      {
        v18 = v35;
        if (v35 >= (unint64_t)HIDWORD(v35))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v35 + 1, 8);
          v18 = v35;
        }
        *((_QWORD *)v34 + v18) = v16;
        LODWORD(v35) = v35 + 1;
      }
      v14 = *(_QWORD *)(v8 - 32);
      goto LABEL_32;
    }
    if (v9 != 83)
      break;
    v11 = *(_DWORD *)(v8 + 20);
    if ((v11 & 0x40000000) != 0)
    {
      v13 = *(uint64_t **)(v8 - 8);
      v12 = v11 & 0x7FFFFFF;
      if (v12)
      {
LABEL_52:
        v22 = 32 * v12;
        do
        {
          v23 = *v13;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v27, *v13);
          if (v24)
          {
            v25 = v35;
            if (v35 >= (unint64_t)HIDWORD(v35))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v35 + 1, 8);
              v25 = v35;
            }
            *((_QWORD *)v34 + v25) = v23;
            LODWORD(v35) = v35 + 1;
          }
          v13 += 4;
          v22 -= 32;
        }
        while (v22);
        LODWORD(v4) = v35;
      }
    }
    else
    {
      v12 = v11 & 0x7FFFFFF;
      v13 = (uint64_t *)(v8 - 32 * v12);
      if (v12)
        goto LABEL_52;
    }
LABEL_36:
    if (!(_DWORD)v4)
    {
      v7 = v34;
      goto LABEL_60;
    }
  }
  if (v9 >= 0x1C)
  {
    v20 = v9 - 33 > 0x33 || ((1 << (v9 - 33)) & 0x8000000000041) == 0;
    if (!v20)
    {
      v33 = 0;
      if (llvm::AttributeList::hasAttrSomewhere((uint64_t *)(v8 + 64), 46, &v33)
        || (v21 = *(_QWORD *)(v8 - 32)) != 0
        && !*(_BYTE *)(v21 + 16)
        && *(_QWORD *)(v21 + 24) == *(_QWORD *)(v8 + 72)
        && (v32 = *(_QWORD *)(v21 + 112), llvm::AttributeList::hasAttrSomewhere(&v32, 46, &v33)))
      {
        v14 = *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32 * (v33 - 1));
        if (v14)
          goto LABEL_32;
      }
    }
  }
LABEL_59:
  v6 = 0;
LABEL_60:
  if (v7 != v36)
    free(v7);
  if (v28 != v27)
    free(v28);
  return v6;
}

BOOL sub_1C4F8A194(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 1;
  while (1)
  {
    v4 = *(_QWORD *)(v2 + 24);
    if (*(_BYTE *)(v4 + 16) != 84)
      break;
    v5 = *(_QWORD *)(v4 - 32);
    if (!v5 || *(_BYTE *)(v5 + 16) || *(_QWORD *)(v5 + 24) != *(_QWORD *)(v4 + 72) || (*(_BYTE *)(v5 + 33) & 0x20) == 0)
      break;
    if (!llvm::Instruction::isLifetimeStartOrEnd(*(llvm::Instruction **)(v2 + 24)))
    {
      if (!a2)
        return 0;
      if (!sub_1C4D9F8B4(v4))
      {
        result = sub_1C509DDB0(v4);
        if (!result)
          return result;
      }
    }
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 1;
  }
  return 0;
}

BOOL llvm::onlyUsedByLifetimeMarkersOrDroppableInsts(llvm *this, const llvm::Value *a2)
{
  return sub_1C4F8A194((uint64_t)this, 1);
}

uint64_t llvm::mustSuppressSpeculation(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  if ((*(_WORD *)(a1 + 18) & 0x301) == 0)
  {
    v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 112);
    if (!v1)
      return 0;
    v2 = *(unsigned __int8 *)(v1 + 18);
    if ((v2 & 0x44444444) == 0)
      return (v2 >> 3) & 1;
  }
  return 1;
}

uint64_t llvm::isSafeToSpeculativelyExecute(uint64_t a1, unint64_t *a2, unsigned __int8 *a3, llvm::DataLayout *a4)
{
  uint64_t result;
  unsigned int v6;
  BOOL v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  char v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  llvm::APInt *v31;
  unsigned int v32;
  unsigned __int8 *v33;
  llvm::APInt *v34;
  unsigned int v35;
  llvm::APInt *v36;
  int v37;
  unsigned __int8 **v38;
  unsigned __int8 *v39;
  unsigned int v40;
  BOOL v41;
  int v42;
  char v43;
  llvm::APInt *v44;
  llvm::APInt *v45;
  llvm::APInt **v46;
  llvm::APInt **v47;
  uint64_t v48;
  int v49;
  _BYTE v50[32];

  result = 0;
  v6 = *(unsigned __int8 *)(a1 + 16);
  v8 = v6 < 0x1C && v6 != 5;
  if (a1 && !v8)
  {
    v12 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = 32 * v12;
      do
      {
        v15 = *(_DWORD *)(a1 + 20);
        if ((v15 & 0x40000000) != 0)
          v16 = *(_QWORD *)(a1 - 8);
        else
          v16 = a1 - 32 * (v15 & 0x7FFFFFF);
        v17 = *(_QWORD *)(v16 + v13);
        if (v17)
          v18 = *(unsigned __int8 *)(v17 + 16) > 0x14u;
        else
          v18 = 1;
        if (!v18)
        {
          v46 = (llvm::APInt **)v50;
          v47 = (llvm::APInt **)v50;
          v48 = 4;
          v49 = 0;
          v19 = sub_1C53774DC(v17, (llvm::SmallPtrSetImplBase *)&v46);
          if (v47 == v46)
          {
            if ((v19 & 1) != 0)
              return 0;
          }
          else
          {
            v43 = v19;
            free(v47);
            if ((v43 & 1) != 0)
              return 0;
          }
        }
        v13 += 32;
      }
      while (v14 != v13);
      v6 = *(unsigned __int8 *)(a1 + 16);
    }
    if (v6 > 0x1B)
      v20 = v6 - 28;
    else
      v20 = *(unsigned __int16 *)(a1 + 18);
    result = 1;
    switch(v20)
    {
      case 1u:
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
      case 7u:
      case 8u:
      case 9u:
      case 0xAu:
      case 0xBu:
      case 0x1Fu:
      case 0x21u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x33u:
      case 0x34u:
      case 0x37u:
      case 0x3Cu:
      case 0x42u:
        return 0;
      case 0x13u:
      case 0x16u:
        v45 = 0;
        v21 = *(_DWORD *)(a1 + 20);
        if ((v21 & 0x40000000) != 0)
          v22 = *(_QWORD *)(a1 - 8);
        else
          v22 = a1 - 32 * (v21 & 0x7FFFFFF);
        v30 = *(unsigned __int8 **)(v22 + 32);
        v46 = &v45;
        v47 = 0;
        result = (uint64_t)sub_1C4D89F84((uint64_t)&v46, v30);
        if (!(_DWORD)result)
          return result;
        v31 = v45;
        v32 = *((_DWORD *)v45 + 2);
        if (v32 < 0x41)
          return *(_QWORD *)v31 != 0;
        if (v32 - llvm::APInt::countLeadingZerosSlowCase(v45) > 0x40)
          return 1;
        v31 = *(llvm::APInt **)v31;
        return *(_QWORD *)v31 != 0;
      case 0x14u:
      case 0x17u:
        v44 = 0;
        v45 = 0;
        v23 = *(_DWORD *)(a1 + 20);
        if ((v23 & 0x40000000) != 0)
          v24 = *(_QWORD *)(a1 - 8);
        else
          v24 = a1 - 32 * (v23 & 0x7FFFFFF);
        v33 = *(unsigned __int8 **)(v24 + 32);
        v46 = &v44;
        v47 = 0;
        result = (uint64_t)sub_1C4D89F84((uint64_t)&v46, v33);
        if (!(_DWORD)result)
          return result;
        v34 = v44;
        v35 = *((_DWORD *)v44 + 2);
        v36 = v44;
        if (v35 < 0x41)
          goto LABEL_54;
        if (v35 - llvm::APInt::countLeadingZerosSlowCase(v44) > 0x40)
          goto LABEL_59;
        v36 = *(llvm::APInt **)v34;
LABEL_54:
        if (!*(_QWORD *)v36)
          return 0;
        if (!v35)
          goto LABEL_60;
        if (v35 > 0x40)
        {
LABEL_59:
          if (llvm::APInt::countTrailingOnesSlowCase(v34) != v35)
            return 1;
        }
        else if (*(_QWORD *)v34 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v35)
        {
          return 1;
        }
LABEL_60:
        v37 = *(_DWORD *)(a1 + 20);
        if ((v37 & 0x40000000) != 0)
          v38 = *(unsigned __int8 ***)(a1 - 8);
        else
          v38 = (unsigned __int8 **)(a1 - 32 * (v37 & 0x7FFFFFF));
        v39 = *v38;
        v46 = &v45;
        v47 = 0;
        result = (uint64_t)sub_1C4D89F84((uint64_t)&v46, v39);
        if (!(_DWORD)result)
          return result;
        v40 = *((_DWORD *)v45 + 2);
        if (v40 > 0x40)
        {
          if (((*(_QWORD *)(*(_QWORD *)v45 + 8 * ((v40 - 1) >> 6)) >> (v40 - 1)) & 1) == 0)
          {
            v42 = 0;
            return v42 ^ 1u;
          }
          v41 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v45) == v40 - 1;
        }
        else
        {
          v41 = *(_QWORD *)v45 == 1 << (v40 - 1);
        }
        v42 = v41;
        return v42 ^ 1u;
      case 0x20u:
        v27 = *(unsigned __int16 *)(a1 + 18);
        if ((v27 & 0x301) != 0)
          return 0;
        v28 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
        v29 = *(_QWORD *)(v28 + 112);
        if (v29)
        {
          if ((*(_BYTE *)(v29 + 18) & 0x4C) != 0)
            return 0;
        }
        return llvm::isDereferenceableAndAlignedPointer(*(uint64_t **)(a1 - 32), *(_QWORD *)a1, (v27 >> 1) & 0x3F, (const llvm::DataLayout *)(*(_QWORD *)(v28 + 40) + 272), a2, a3, a4);
      case 0x38u:
        v25 = *(_QWORD *)(a1 - 32);
        if (!v25)
          return 0;
        if (*(_BYTE *)(v25 + 16))
          return 0;
        if (*(_QWORD *)(v25 + 24) != *(_QWORD *)(a1 + 72))
          return 0;
        v26 = *(_QWORD *)(v25 + 112);
        if (!v26)
          return 0;
        return *(_BYTE *)(v26 + 19) & 1;
      default:
        return result;
    }
  }
  return result;
}

uint64_t llvm::mayHaveNonDefUseDependency(llvm *this, const llvm::Instruction *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  const llvm::Value *v6;
  int v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  llvm::Value **v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  BOOL v23;
  int v24;
  __int32 v26;

  v3 = *((unsigned __int8 *)this + 16);
  v4 = (v3 - 33);
  if (v4 > 0x37)
    goto LABEL_5;
  if (((1 << (v3 - 33)) & 0x8000000000041) != 0)
  {
    v10 = *((_QWORD *)this + 8);
    if (!v10 || (*(_BYTE *)(v10 + 20) & 4) == 0 && (*(_BYTE *)(v10 + 17) & 0x10) == 0)
    {
      v26 = 7;
      if (sub_1C53E4BBC((uint64_t)this, &v26, 1uLL))
      {
        v16 = *((_QWORD *)this - 4);
        if (!v16
          || *(_BYTE *)(v16 + 16)
          || *(_QWORD *)(v16 + 24) != *((_QWORD *)this + 9)
          || *(_DWORD *)(v16 + 36) != 7)
        {
          return 1;
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 66) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
      {
        return 1;
      }
    }
LABEL_22:
    v3 = *((unsigned __int8 *)this + 16);
    goto LABEL_5;
  }
  if (((1 << (v3 - 33)) & 0x808001C8000010) != 0)
    return 1;
  if (v4 == 28)
  {
    if ((*((_WORD *)this + 9) & 0x301) != 0)
      return 1;
    goto LABEL_22;
  }
LABEL_5:
  v5 = (v3 - 33);
  if (v5 > 0x37)
    goto LABEL_9;
  if (((1 << v5) & 0x8000000000041) != 0)
  {
    v11 = *((_QWORD *)this + 8);
    if (!v11 || (*(_BYTE *)(v11 + 17) & 0x30) == 0)
    {
      v12 = *((_DWORD *)this + 5);
      if (v12 < 0)
      {
        v17 = (char *)this - 32 * (v12 & 0x7FFFFFF);
        v20 = *((_QWORD *)v17 - 1);
        v18 = v17 - 8;
        v19 = v20;
        if (v20)
        {
          v21 = -v19;
          do
          {
            v22 = *(_DWORD *)(*(_QWORD *)&v18[v21] + 8);
            v23 = v22 > 7;
            v24 = (1 << v22) & 0x83;
            if (v23 || v24 == 0)
              return 1;
            v21 += 16;
          }
          while (v21);
        }
      }
      if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 45) & 1) == 0
        && !llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)this, 44))
      {
        return 1;
      }
    }
  }
  else
  {
    if (v5 != 27)
    {
      if (((1 << v5) & 0x808001D0000010) == 0)
        goto LABEL_9;
      return 1;
    }
    if ((*((_WORD *)this + 9) & 0x301) != 0)
      return 1;
  }
LABEL_9:
  if (!llvm::isSafeToSpeculativelyExecute((uint64_t)this, 0, 0, 0))
    return 1;
  v7 = 0;
  v8 = *((unsigned __int8 *)this + 16);
  if (v8 != 29 && v8 != 35)
  {
    if (v8 == 80)
    {
      v13 = *(_QWORD *)(*((_QWORD *)this + 5) + 56);
      v14 = *(_DWORD *)(v13 + 20);
      if ((v14 & 0x40000000) != 0)
        v15 = *(llvm::Value ***)(v13 - 8);
      else
        v15 = (llvm::Value **)(v13 - 32 * (v14 & 0x7FFFFFF));
      v7 = llvm::classifyEHPersonality(*v15, v6) == 10;
    }
    else if ((llvm::Instruction::mayThrow(this) & 1) != 0)
    {
      v7 = 0;
    }
    else
    {
      v7 = llvm::Instruction::willReturn(this);
    }
  }
  return v7 ^ 1u;
}

uint64_t llvm::isGuaranteedToTransferExecutionToSuccessor(llvm *this, const llvm::Instruction *a2)
{
  uint64_t result;
  int v4;
  uint64_t v5;
  int v6;
  llvm::Value **v7;

  result = 0;
  v4 = *((unsigned __int8 *)this + 16);
  if (v4 != 29 && v4 != 35)
  {
    if (v4 == 80)
    {
      v5 = *(_QWORD *)(*((_QWORD *)this + 5) + 56);
      v6 = *(_DWORD *)(v5 + 20);
      if ((v6 & 0x40000000) != 0)
        v7 = *(llvm::Value ***)(v5 - 8);
      else
        v7 = (llvm::Value **)(v5 - 32 * (v6 & 0x7FFFFFF));
      return llvm::classifyEHPersonality(*v7, a2) == 10;
    }
    else if ((llvm::Instruction::mayThrow(this) & 1) != 0)
    {
      return 0;
    }
    else
    {
      return llvm::Instruction::willReturn(this);
    }
  }
  return result;
}

uint64_t llvm::computeOverflowForUnsignedMul(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  char v7;
  llvm::AssumptionCache *v9;
  llvm *v13;
  uint64_t MayOverflow;
  const void *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  const void *v28;
  const llvm::DataLayout *v29;
  llvm *v30;
  const llvm::Instruction *v31;
  uint64_t v32;
  char v33;

  v7 = (char)a7;
  v9 = a5;
  if (!a5 || (v13 = a5, !*((_QWORD *)a5 + 5)))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (v13 = this, !*((_QWORD *)this + 5)))
      v13 = 0;
  }
  v28 = a3;
  v29 = a4;
  v30 = v13;
  v31 = a6;
  v32 = 0;
  v33 = (char)a7;
  sub_1C4F83784((uint64_t)this, 0, (uint64_t *)&v28, &v24);
  if (!v9 || !*((_QWORD *)v9 + 5))
  {
    if (!a2 || *((unsigned __int8 *)a2 + 16) < 0x1Cu || (v9 = a2, !*((_QWORD *)a2 + 5)))
      v9 = 0;
  }
  v28 = a3;
  v29 = a4;
  v30 = v9;
  v31 = a6;
  v32 = 0;
  v33 = v7;
  sub_1C4F83784((uint64_t)a2, 0, (uint64_t *)&v28, &v20);
  llvm::ConstantRange::fromKnownBits((llvm::ConstantRange *)&v24, 0, (uint64_t)&v28);
  llvm::ConstantRange::fromKnownBits((llvm::ConstantRange *)&v20, 0, (uint64_t)&v16);
  MayOverflow = llvm::ConstantRange::unsignedMulMayOverflow(&v28, &v16);
  if (v19 >= 0x41 && v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  if (v17 >= 0x41 && v16)
    MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  if (v31 >= 0x41 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
  if (v29 >= 0x41 && v28)
    MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  if (v23 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  if (v21 >= 0x41 && v20)
    MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  if (v27 >= 0x41 && v26)
    MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  return MayOverflow;
}

uint64_t llvm::computeOverflowForSignedMul(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  char v7;
  uint64_t v14;
  int PrimitiveSizeInBits;
  llvm *v16;
  int v17;
  llvm::AssumptionCache *v18;
  unsigned int v19;
  llvm *v21;
  unsigned int v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  const llvm::Value *v34;
  const llvm::DataLayout *v35;
  llvm::AssumptionCache *v36;
  const llvm::Instruction *v37;
  uint64_t v38;
  char v39;

  v7 = (char)a7;
  v14 = *(_QWORD *)this;
  if ((*(_DWORD *)(v14 + 8) & 0xFE) == 0x12)
    v14 = **(_QWORD **)(v14 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v14);
  if (!a5 || (v16 = a5, !*((_QWORD *)a5 + 5)))
  {
    if (*((unsigned __int8 *)this + 16) < 0x1Cu || (v16 = this, !*((_QWORD *)this + 5)))
      v16 = 0;
  }
  v34 = a3;
  v35 = a4;
  v36 = v16;
  v37 = a6;
  v38 = 0;
  v39 = 1;
  v17 = sub_1C4F85990(this, 0, (uint64_t)&v34);
  if (!a5 || (v18 = a5, !*((_QWORD *)a5 + 5)))
  {
    if (!a2 || *((unsigned __int8 *)a2 + 16) < 0x1Cu || (v18 = a2, !*((_QWORD *)a2 + 5)))
      v18 = 0;
  }
  v34 = a3;
  v35 = a4;
  v36 = v18;
  v37 = a6;
  v38 = 0;
  v39 = 1;
  v19 = sub_1C4F85990(a2, 0, (uint64_t)&v34) + v17;
  if (v19 <= PrimitiveSizeInBits + 1)
  {
    if (v19 != PrimitiveSizeInBits + 1)
      return 2;
    if (!a5 || (v21 = a5, !*((_QWORD *)a5 + 5)))
    {
      if (*((unsigned __int8 *)this + 16) < 0x1Cu || (v21 = this, !*((_QWORD *)this + 5)))
        v21 = 0;
    }
    v34 = a3;
    v35 = a4;
    v36 = v21;
    v37 = a6;
    v38 = 0;
    v39 = v7;
    sub_1C4F83784((uint64_t)this, 0, (uint64_t *)&v34, &v30);
    if (!a5 || !*((_QWORD *)a5 + 5))
    {
      if (!a2 || *((unsigned __int8 *)a2 + 16) < 0x1Cu || (a5 = a2, !*((_QWORD *)a2 + 5)))
        a5 = 0;
    }
    v34 = a3;
    v35 = a4;
    v36 = a5;
    v37 = a6;
    v38 = 0;
    v39 = v7;
    sub_1C4F83784((uint64_t)a2, 0, (uint64_t *)&v34, &v26);
    v22 = v31 - 1;
    v23 = &v30;
    if (v31 >= 0x41)
      v23 = (uint64_t *)(v30 + 8 * (v22 >> 6));
    if ((((unint64_t)*v23 >> v22) & 1) == 0)
    {
      v24 = v27;
      v25 = (uint64_t *)(v26 + 8 * ((v27 - 1) >> 6));
      if (v27 < 0x41)
        v25 = &v26;
      if ((((unint64_t)*v25 >> (v27 - 1)) & 1) == 0)
      {
        if (v29 >= 0x41 && v28)
        {
          MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
          v24 = v27;
        }
        if (v24 >= 0x41 && v26)
          MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
        if (v33 >= 0x41 && v32)
          MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
        if (v31 >= 0x41 && v30)
          MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
        return 2;
      }
    }
    if (v29 >= 0x41 && v28)
      MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
    if (v27 >= 0x41 && v26)
      MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
    if (v33 >= 0x41 && v32)
      MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
    if (v31 >= 0x41)
    {
      if (v30)
        MEMORY[0x1CAA32F9C](v30, 0x1000C8000313F17);
    }
  }
  return 3;
}

uint64_t llvm::computeOverflowForUnsignedAdd(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  uint64_t MayOverflow;
  const void *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  const void *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;

  sub_1C4F8B098((uint64_t)this, 0, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, (uint64_t)&v19);
  sub_1C4F8B098((uint64_t)a2, 0, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, (uint64_t)&v15);
  MayOverflow = llvm::ConstantRange::unsignedAddMayOverflow(&v19, &v15);
  if (v18 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  if (v16 >= 0x41 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  if (v22 >= 0x41 && v21)
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  return MayOverflow;
}

uint64_t sub_1C4F8B098@<X0>(uint64_t a1@<X0>, const llvm::KnownBits *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, const llvm::Value *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  if (!a5 || !*(_QWORD *)(a5 + 40))
  {
    if (!a1 || *(unsigned __int8 *)(a1 + 16) < 0x1Cu || (a5 = a1, !*(_QWORD *)(a1 + 40)))
      a5 = 0;
  }
  v22 = a3;
  v23 = a4;
  v24 = a5;
  v25 = a6;
  v26 = 0;
  v27 = (char)a7;
  sub_1C4F83784(a1, 0, &v22, &v18);
  llvm::ConstantRange::fromKnownBits((llvm::ConstantRange *)&v18, a2, (uint64_t)&v22);
  llvm::computeConstantRange((llvm *)a1, a7, 0, 0, 0, 1, 0, &v14);
  if ((_DWORD)a2)
    v12 = 2;
  else
    v12 = 1;
  result = llvm::ConstantRange::intersectWith((uint64_t)&v22, (llvm::ConstantRange *)&v14, v12, a8);
  if (v17 >= 0x41)
  {
    result = v16;
    if (v16)
      result = MEMORY[0x1CAA32F9C](v16, 0x1000C8000313F17);
  }
  if (v15 >= 0x41)
  {
    result = v14;
    if (v14)
      result = MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  }
  if (v25 >= 0x41)
  {
    result = v24;
    if (v24)
      result = MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  }
  if (v23 >= 0x41)
  {
    result = v22;
    if (v22)
      result = MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  }
  if (v21 >= 0x41)
  {
    result = v20;
    if (v20)
      result = MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  }
  if (v19 >= 0x41)
  {
    result = v18;
    if (v18)
      return MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  }
  return result;
}

uint64_t llvm::computeOverflowForUnsignedSub(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  uint64_t v13;
  uint64_t *v14;
  char v15;
  uint64_t MayOverflow;
  unsigned __int16 isImpliedCondition;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  _BYTE v23[12];
  uint64_t v24;
  unsigned int v25;

  *(_DWORD *)v23 = 312;
  *(_QWORD *)&v23[4] = 0;
  if (!a5
    || *((_BYTE *)a5 + 16) != 84
    || (v13 = *((_QWORD *)a5 - 4)) == 0
    || *(_BYTE *)(v13 + 16)
    || *(_QWORD *)(v13 + 24) != *((_QWORD *)a5 + 9)
    || *(_DWORD *)(v13 + 36) != *(_DWORD *)v23
    || (v14 = (uint64_t *)sub_1C4F904E0((uint64_t)a5)) == 0
    || ((isImpliedCondition = llvm::isImpliedCondition(v14, 35, (uint64_t)this, (uint64_t)a2, a3, v15 & 1, 0),
         (_BYTE)isImpliedCondition)
      ? (MayOverflow = 3)
      : (MayOverflow = 0),
        isImpliedCondition <= 0xFFu))
  {
    sub_1C4F8B098((uint64_t)this, 0, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (const llvm::Value *)1, (uint64_t)v23);
    sub_1C4F8B098((uint64_t)a2, 0, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (const llvm::Value *)1, (uint64_t)&v19);
    MayOverflow = llvm::ConstantRange::unsignedSubMayOverflow((const void **)v23, (const llvm::ConstantRange *)&v19);
    if (v22 >= 0x41 && v21)
      MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
    if (v20 >= 0x41 && v19)
      MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
    if (v25 >= 0x41 && v24)
      MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
    if (*(_DWORD *)&v23[8] >= 0x41u && *(_QWORD *)v23)
      MEMORY[0x1CAA32F9C](*(_QWORD *)v23, 0x1000C8000313F17);
  }
  return MayOverflow;
}

uint64_t llvm::isImpliedByDomCondition(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5)
{
  uint64_t *v9;
  char v10;
  int v11;

  v9 = (uint64_t *)sub_1C4F904E0(a4);
  if (v9)
  {
    LOWORD(v9) = llvm::isImpliedCondition(v9, a1, a2, a3, a5, v10 & 1, 0);
    v11 = BYTE1(v9);
  }
  else
  {
    v11 = 0;
  }
  return v9 | (v11 << 8);
}

uint64_t llvm::computeOverflowForSignedSub(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  llvm *v13;
  llvm::AssumptionCache *v14;
  uint64_t MayOverflow;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  const void *v21;
  const llvm::DataLayout *v22;
  llvm *v23;
  const llvm::Instruction *v24;
  uint64_t v25;
  char v26;

  if (!a5 || (v13 = a5, !*((_QWORD *)a5 + 5)))
  {
    if (!this || *((unsigned __int8 *)this + 16) < 0x1Cu || (v13 = this, !*((_QWORD *)this + 5)))
      v13 = 0;
  }
  v21 = a3;
  v22 = a4;
  v23 = v13;
  v24 = a6;
  v25 = 0;
  v26 = 1;
  if (sub_1C4F85990(this, 0, (uint64_t)&v21) < 2)
    goto LABEL_8;
  if (!a5 || (v14 = a5, !*((_QWORD *)a5 + 5)))
  {
    if (!a2 || *((unsigned __int8 *)a2 + 16) < 0x1Cu || (v14 = a2, !*((_QWORD *)a2 + 5)))
      v14 = 0;
  }
  v21 = a3;
  v22 = a4;
  v23 = v14;
  v24 = a6;
  v25 = 0;
  v26 = 1;
  if (sub_1C4F85990(a2, 0, (uint64_t)&v21) > 1)
    return 3;
LABEL_8:
  sub_1C4F8B098((uint64_t)this, (const llvm::KnownBits *)1, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (const llvm::Value *)1, (uint64_t)&v21);
  sub_1C4F8B098((uint64_t)a2, (const llvm::KnownBits *)1, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, (const llvm::Value *)1, (uint64_t)&v17);
  MayOverflow = llvm::ConstantRange::signedSubMayOverflow(&v21, (const llvm::ConstantRange *)&v17);
  if (v20 >= 0x41 && v19)
    MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  if (v18 >= 0x41 && v17)
    MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
  if (v24 >= 0x41 && v23)
    MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
  if (v22 >= 0x41 && v21)
    MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
  return MayOverflow;
}

uint64_t llvm::isOverflowIntrinsicNoWrap(uint64_t a1, llvm::DominatorTree *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  const llvm::Use *v16;
  _QWORD v18[2];
  void *v19;
  uint64_t v20;
  _BYTE v21[16];
  void *v22;
  uint64_t v23;
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  v22 = v24;
  v23 = 0x200000000;
  v19 = v21;
  v20 = 0x200000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    while (1)
    {
      v4 = 0;
      v5 = *(_QWORD *)(v2 + 24);
      if (!v5 || *(_BYTE *)(v5 + 16) != 92)
        break;
      if (**(_DWORD **)(v5 + 64))
      {
        for (i = *(_QWORD *)(v5 + 8); i; i = *(_QWORD *)(i + 8))
        {
          v8 = *(_QWORD *)(i + 24);
          if (v8)
            v9 = *(_BYTE *)(v8 + 16) == 30;
          else
            v9 = 0;
          if (v9)
          {
            v10 = v23;
            if (v23 >= (unint64_t)HIDWORD(v23))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v23 + 1, 8);
              v10 = v23;
            }
            *((_QWORD *)v22 + v10) = v8;
            LODWORD(v23) = v23 + 1;
          }
        }
      }
      else
      {
        v7 = v20;
        if (v20 >= (unint64_t)HIDWORD(v20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v19, (uint64_t)v21, v20 + 1, 8);
          v7 = v20;
        }
        *((_QWORD *)v19 + v7) = v5;
        LODWORD(v20) = v20 + 1;
      }
      v2 = *(_QWORD *)(v2 + 8);
      if (!v2)
      {
        if (!(_DWORD)v23)
          goto LABEL_31;
        v11 = (char *)v22;
        v12 = (char *)v22 + 8 * v23;
        while (1)
        {
          v13 = *(_QWORD *)(*(_QWORD *)v11 - 64);
          v18[0] = *(_QWORD *)(*(_QWORD *)v11 + 40);
          v18[1] = v13;
          if (llvm::BasicBlockEdge::isSingleEdge((llvm::BasicBlockEdge *)v18))
            break;
LABEL_30:
          v11 += 8;
          if (v11 == v12)
            goto LABEL_31;
        }
        if ((_DWORD)v20)
        {
          v14 = (char *)v19;
          v15 = (char *)v19 + 8 * v20;
          do
          {
            v16 = *(const llvm::Use **)v14;
            if (!llvm::DominatorTree::dominates(a2, (const llvm::BasicBlockEdge *)v18, *(const llvm::BasicBlock **)(*(_QWORD *)v14 + 40)))
            {
              while (1)
              {
                v16 = (const llvm::Use *)*((_QWORD *)v16 + 1);
                if (!v16)
                  break;
                if (!llvm::DominatorTree::dominates(a2, (const llvm::BasicBlockEdge *)v18, v16))
                  goto LABEL_30;
              }
            }
            v14 += 8;
          }
          while (v14 != v15);
        }
        v4 = 1;
        break;
      }
    }
  }
  else
  {
LABEL_31:
    v4 = 0;
  }
  if (v19 != v21)
    free(v19);
  if (v22 != v24)
    free(v22);
  return v4;
}

uint64_t llvm::canCreateUndefOrPoison(llvm *this, const llvm::Operator *a2)
{
  return sub_1C4F8B92C(this, 0, (int)a2);
}

uint64_t sub_1C4F8B92C(llvm::Operator *this, char a2, int a3)
{
  char v3;
  char v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  unsigned int v10;
  int v11;
  int v13;
  char *v14;
  llvm::Operator *v16;
  int v17;
  char *v18;
  unsigned __int8 *v19;
  BOOL v20;
  char v21;
  int v22;
  BOOL v23;
  unsigned __int8 **v24;
  unsigned __int8 **v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  __int32 *v30;
  size_t v31;
  __int32 *v32;
  __int32 *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  BOOL v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned int v40;
  int v41;
  llvm::Type *v42;
  llvm::UndefValue *AggregateElement;
  uint64_t v44;
  unsigned int v45;
  unsigned __int8 **v46;
  unsigned __int8 *v47;
  unint64_t *v48;
  unint64_t v49;
  unsigned int v50;
  int v51;
  void *v52;
  uint64_t v53;
  unsigned __int8 *v54;
  _QWORD v55[4];

  v55[3] = *MEMORY[0x1E0C80C00];
  if (a3 && llvm::Operator::hasPoisonGeneratingFlags(this))
  {
LABEL_3:
    v6 = 1;
    return v6 & 1;
  }
  v7 = *((unsigned __int8 *)this + 16);
  if (this)
    v8 = v7 >= 0x1C;
  else
    v8 = 0;
  v9 = !v8;
  v10 = v7 - 28;
  v11 = v7 - 28;
  if (v9 == 1)
    v11 = *((unsigned __int16 *)this + 9);
  if (v11 <= 33)
  {
    if (v11 <= 21)
    {
      if (v11 == 5 || v11 == 11)
      {
LABEL_56:
        v6 = sub_1C4D91DD8((uint64_t)this, 36) ^ 1;
        return v6 & 1;
      }
      if (v11 != 12)
      {
LABEL_27:
        if (v7 == 5)
          v16 = this;
        else
          v16 = 0;
        if ((v7 < 0x1C || v7 - 66 >= 0xD) && (!v16 || *((unsigned __int16 *)v16 + 9) - 38 >= 0xD))
        {
          v6 = (v11 - 31) < 0xFFFFFFEE;
          return v6 & 1;
        }
      }
    }
    else
    {
      if ((v11 - 25) < 3)
      {
        v13 = *((_DWORD *)this + 5);
        if ((v13 & 0x40000000) != 0)
          v14 = (char *)*((_QWORD *)this - 1);
        else
          v14 = (char *)this - 32 * (v13 & 0x7FFFFFF);
        v19 = (unsigned __int8 *)*((_QWORD *)v14 + 4);
        if (v19)
          v20 = v19[16] > 0x14u;
        else
          v20 = 1;
        v21 = v20;
        if (!v20)
        {
          v52 = &v54;
          v53 = 0x400000000;
          v22 = *(unsigned __int8 *)(*(_QWORD *)v19 + 8);
          if (*(_QWORD *)v19)
            v23 = v22 == 18;
          else
            v23 = 0;
          if (v23)
          {
            v41 = *(_DWORD *)(*(_QWORD *)v19 + 32);
            if (v41)
            {
              v42 = 0;
              do
              {
                AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v19, v42);
                v44 = v53;
                if (v53 >= (unint64_t)HIDWORD(v53))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)&v54, v53 + 1, 8);
                  v44 = v53;
                }
                *((_QWORD *)v52 + v44) = AggregateElement;
                v45 = v53 + 1;
                LODWORD(v53) = v53 + 1;
                v42 = (llvm::Type *)((_DWORD)v42 + 1);
              }
              while (v41 != (_DWORD)v42);
              v25 = (unsigned __int8 **)v52;
              if (!v45)
              {
LABEL_98:
                v3 = 0;
LABEL_100:
                if (v25 != &v54)
                  free(v25);
                goto LABEL_103;
              }
              v24 = (unsigned __int8 **)((char *)v52 + 8 * v45);
LABEL_90:
              v46 = v25;
              while (1)
              {
                v47 = *v46;
                if (!*v46 || v47[16] != 16)
                  break;
                v48 = (unint64_t *)(v47 + 24);
                v49 = *(unsigned int *)(*(_QWORD *)v47 + 8);
                v50 = *((_DWORD *)v47 + 8);
                if (v50 >= 0x41)
                {
                  if (v50 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v47 + 24)) > 0x40)
                    break;
                  v48 = (unint64_t *)*v48;
                }
                if (*v48 >= v49 >> 8)
                  break;
                if (++v46 == v24)
                  goto LABEL_98;
              }
              v3 = 1;
              goto LABEL_100;
            }
            v3 = 0;
          }
          else
          {
            v3 = 1;
            if (v22 != 19)
            {
              v54 = v19;
              LODWORD(v53) = 1;
              v24 = (unsigned __int8 **)v55;
              v25 = &v54;
              goto LABEL_90;
            }
          }
        }
LABEL_103:
        v6 = v21 | v3;
        return v6 & 1;
      }
      if ((v11 - 22) >= 2)
        goto LABEL_27;
    }
LABEL_14:
    v6 = 0;
    return v6 & 1;
  }
  v6 = 1;
  switch(v11)
  {
    case '"':
    case '5':
    case '6':
    case '7':
    case '9':
    case '@':
    case 'A':
    case 'C':
      goto LABEL_14;
    case ')':
    case '*':
      return v6 & 1;
    case '8':
      if (v7 != 84)
        goto LABEL_56;
      v26 = *((_QWORD *)this - 4);
      if (!v26
        || *(_BYTE *)(v26 + 16)
        || *(_QWORD *)(v26 + 24) != *((_QWORD *)this + 9)
        || (*(_BYTE *)(v26 + 33) & 0x20) == 0)
      {
        goto LABEL_56;
      }
      v6 = 0;
      v51 = *(_DWORD *)(v26 + 36);
      if (((v51 - 263) > 0x31 || ((1 << (v51 - 7)) & 0x2404000208001) == 0)
        && v51 != 53)
      {
        goto LABEL_56;
      }
      return v6 & 1;
    case '=':
    case '>':
      v17 = *((_DWORD *)this + 5);
      if ((v17 & 0x40000000) != 0)
        v18 = (char *)*((_QWORD *)this - 1);
      else
        v18 = (char *)this - 32 * (v17 & 0x7FFFFFF);
      if (v9)
        v10 = *((unsigned __int16 *)this + 9);
      v34 = 1;
      if (v10 == 62)
        v34 = 2;
      if ((v17 & 0x40000000) != 0)
        v35 = (char *)*((_QWORD *)this - 1);
      else
        v35 = (char *)this - 32 * (v17 & 0x7FFFFFF);
      v36 = *(_QWORD *)&v35[32 * v34];
      if (v36)
        v37 = *(_BYTE *)(v36 + 16) == 16;
      else
        v37 = 0;
      if (!v37)
        goto LABEL_3;
      v38 = (unint64_t *)(v36 + 24);
      v39 = *(unsigned int *)(**(_QWORD **)v18 + 32);
      v40 = *(_DWORD *)(v36 + 32);
      if (v40 < 0x41)
        goto LABEL_82;
      if (v40 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v36 + 24)) > 0x40)
        goto LABEL_3;
      v38 = (unint64_t *)*v38;
LABEL_82:
      v6 = *v38 >= v39;
      break;
    case '?':
      if ((a2 & 1) != 0)
        goto LABEL_14;
      v27 = v7 == 5;
      v28 = 72;
      if (v7 == 5)
        v28 = 32;
      v29 = 64;
      if (v27)
        v29 = 24;
      v30 = *(__int32 **)((char *)this + v29);
      v31 = *(unsigned int *)((char *)this + v28);
      v32 = wmemchr(v30, -1, v31);
      if (v32)
        v33 = v32;
      else
        v33 = &v30[v31];
      v6 = v31 != v33 - v30;
      return v6 & 1;
    default:
      goto LABEL_27;
  }
  return v6 & 1;
}

uint64_t llvm::canCreatePoison(llvm *this, const llvm::Operator *a2)
{
  return sub_1C4F8B92C(this, 1, (int)a2);
}

uint64_t llvm::impliesPoison(llvm *this, const llvm::Value *a2, const llvm::Value *a3)
{
  return sub_1C4F8BD90((uint64_t)this, (uint64_t)a2, 0);
}

uint64_t sub_1C4F8BD90(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  if ((sub_1C4F8BE80((uint64_t ***)a1, 0, 0, 0, 0, 0) & 1) != 0 || sub_1C4FA3558(a1, a2, 0))
    return 1;
  if (a3 > 1)
    return 0;
  result = 0;
  if (a1 && *(unsigned __int8 *)(a1 + 16) >= 0x1Cu)
  {
    if ((sub_1C4F8B92C((llvm::Operator *)a1, 1, 1) & 1) != 0)
      return 0;
    v7 = *(_DWORD *)(a1 + 20);
    if ((v7 & 0x40000000) != 0)
    {
      v9 = *(uint64_t **)(a1 - 8);
      v8 = v7 & 0x7FFFFFF;
    }
    else
    {
      v8 = v7 & 0x7FFFFFF;
      v9 = (uint64_t *)(a1 - 32 * v8);
    }
    if (!v8)
      return 1;
    v10 = a3 + 1;
    v11 = 32 * v8 - 32;
    do
    {
      v12 = *v9;
      v9 += 4;
      result = sub_1C4F8BD90(v12, a2, v10);
      if ((_DWORD)result)
        v13 = v11 == 0;
      else
        v13 = 1;
      v11 -= 32;
    }
    while (!v13);
  }
  return result;
}

uint64_t llvm::isGuaranteedNotToBeUndefOrPoison(uint64_t ***this, const llvm::Value *a2, llvm::AssumptionCache *a3, const llvm::Instruction *a4, const llvm::DominatorTree *a5)
{
  return sub_1C4F8BE80(this, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, 0);
}

uint64_t sub_1C4F8BE80(uint64_t ***a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned int v10;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t ***v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t **v38;
  uint64_t ***v39;
  uint64_t (*v40)(uint64_t, llvm::UndefValue *);
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  uint64_t ****v46;
  uint64_t ***v47;
  uint64_t ****v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t ***v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t *v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  int v70;
  uint64_t v71;
  uint64_t ****v72;
  uint64_t v73;
  uint64_t ****v74;
  uint64_t v75;
  int v76;
  uint64_t v77[3];
  _QWORD v78[2];
  uint64_t v79;
  _QWORD v80[11];

  if (a5 > 5)
    return 0;
  v80[9] = v6;
  v80[10] = v7;
  v10 = *((unsigned __int8 *)a1 + 16);
  if (v10 == 23)
    return 0;
  if (v10 == 21)
  {
    v16 = a1[3][14];
    if (v16)
    {
      v17 = *((_DWORD *)a1 + 8) + 2;
      if (v17 < *((_DWORD *)v16 + 2))
      {
        v18 = v16[v17 + 5];
        if (v18)
        {
          if ((*(_BYTE *)(v18 + 16) & 0x10) != 0)
            return 1;
        }
      }
    }
  }
  else if (v10 <= 0x14)
  {
    if (v10 - 11 <= 1)
    {
      if (v10 == 12)
        return 0;
      else
        return a6;
    }
    if (v10 < 0x14 && ((0xB0009u >> v10) & 1) != 0)
      return 1;
    if (v10 != 5 && ((_DWORD)(*a1)[1] & 0xFE) == 0x12)
    {
      if ((_DWORD)a6)
        v40 = (uint64_t (*)(uint64_t, llvm::UndefValue *))sub_1C5381FF8;
      else
        v40 = (uint64_t (*)(uint64_t, llvm::UndefValue *))sub_1C5381FE4;
      if ((sub_1C5375B0C((llvm::Constant *)a1, v40, (uint64_t)v77) & 1) == 0)
        return !llvm::Constant::containsConstantExpression((llvm::Constant *)a1);
      return 0;
    }
  }
  v19 = *((unsigned __int8 *)llvm::Value::stripPointerCastsSameRepresentation((llvm::Value *)a1) + 16);
  if (v19 < 0x3C && ((0x800000000080009uLL >> v19) & 1) != 0)
    return 1;
  v20 = *((unsigned __int8 *)a1 + 16);
  if (v20 > 0x1B || v20 == 5)
  {
    if (v20 == 95)
      return 1;
    if (v20 >= 0x1C)
    {
      if (v20 - 33 <= 0x33 && ((1 << (v20 - 33)) & 0x8000000000041) != 0)
      {
        if ((sub_1C4D91DD8((uint64_t)a1, 36) & 1) != 0)
          return 1;
        v20 = *((unsigned __int8 *)a1 + 16);
      }
      if (v20 == 83)
      {
        v29 = *((_DWORD *)a1 + 5);
        v30 = v29 & 0x7FFFFFF;
        if ((v29 & 0x7FFFFFF) == 0)
          return 1;
        v31 = 0;
        v32 = a5 + 1;
        while (1)
        {
          v33 = *((_DWORD *)a1 + 5);
          if ((v33 & 0x40000000) != 0)
            v34 = (uint64_t ***)*(a1 - 1);
          else
            v34 = &a1[-4 * (v33 & 0x7FFFFFF)];
          v35 = (&v34[4 * *((unsigned int *)a1 + 15)])[v31];
          v36 = (uint64_t **)v35[5];
          if (v36 == v35 + 5)
          {
            v38 = 0;
            if ((v33 & 0x40000000) == 0)
              goto LABEL_50;
          }
          else
          {
            if (v36)
              v37 = v36 - 3;
            else
              v37 = 0;
            if (*((unsigned __int8 *)v37 + 16) - 29 >= 0xB)
              v38 = 0;
            else
              v38 = v37;
            if ((v33 & 0x40000000) == 0)
            {
LABEL_50:
              v39 = &a1[-4 * (v33 & 0x7FFFFFF)];
              goto LABEL_53;
            }
          }
          v39 = (uint64_t ***)*(a1 - 1);
LABEL_53:
          if ((sub_1C4F8BE80(v39[4 * v31], a2, v38, a4, v32, a6) & 1) == 0)
            goto LABEL_63;
          ++v31;
          result = 1;
          if (v31 == v30)
            return result;
        }
      }
    }
    if ((sub_1C4F8B92C((llvm::Operator *)a1, 0, 1) & 1) == 0)
    {
      v55 = *((_DWORD *)a1 + 5);
      if ((v55 & 0x40000000) != 0)
      {
        v57 = (uint64_t ***)*(a1 - 1);
        v56 = v55 & 0x7FFFFFF;
      }
      else
      {
        v56 = v55 & 0x7FFFFFF;
        v57 = &a1[-4 * v56];
      }
      if (!v56)
        return 1;
      v58 = a5 + 1;
      v59 = 32 * v56;
      while ((sub_1C4F8BE80(*v57, a2, a3, a4, v58, a6) & 1) != 0)
      {
        v57 += 4;
        result = 1;
        v59 -= 32;
        if (!v59)
          return result;
      }
    }
LABEL_63:
    if (*((_BYTE *)a1 + 16) != 60 || (*((_BYTE *)a1 + 23) & 0x20) == 0)
      goto LABEL_15;
    v41 = ***a1;
    v77[0] = (uint64_t)a1;
    v42 = *(_DWORD *)(v41 + 2496);
    if (v42)
    {
      v43 = *(_QWORD *)(v41 + 2480);
      v44 = v42 - 1;
      v45 = v44 & ((a1 >> 4) ^ (a1 >> 9));
      v46 = (uint64_t ****)(v43 + 40 * v45);
      v47 = *v46;
      if (*v46 == a1)
        goto LABEL_75;
      v48 = 0;
      v49 = 1;
      while (v47 != (uint64_t ***)-4096)
      {
        if (v48)
          v50 = 0;
        else
          v50 = v47 == (uint64_t ***)-8192;
        if (v50)
          v48 = v46;
        v51 = v45 + v49++;
        v45 = v51 & v44;
        v46 = (uint64_t ****)(v43 + 40 * v45);
        v47 = *v46;
        if (*v46 == a1)
          goto LABEL_75;
      }
      if (v48)
        v74 = v48;
      else
        v74 = v46;
    }
    else
    {
      v74 = 0;
    }
    v46 = (uint64_t ****)sub_1C541AB24(v41 + 2480, (uint64_t)v77, v77, v74);
    v75 = v77[0];
    v46[3] = 0;
    v46[4] = 0;
    *v46 = (uint64_t ***)v75;
    v46[1] = (uint64_t ***)(v46 + 3);
    v46[2] = (uint64_t ***)0x100000000;
LABEL_75:
    v52 = *((unsigned int *)v46 + 4);
    if ((_DWORD)v52)
    {
      v53 = v46[1] + 1;
      v54 = 16 * v52;
      while (*((_DWORD *)v53 - 2) != 29)
      {
        v53 += 2;
        v54 -= 16;
        if (!v54)
          goto LABEL_15;
      }
      if (*v53)
        return 1;
    }
  }
LABEL_15:
  if ((sub_1C4F8CF08((uint64_t)a1, a6, 0) & 1) != 0)
    return 1;
  if (!a3)
    return 0;
  result = 0;
  if (!a4)
    return result;
  v21 = *(_QWORD *)(a3 + 40);
  if (!v21)
    return result;
  v22 = *(_QWORD *)(a4 + 24);
  v23 = *(unsigned int *)(a4 + 40);
  if (!(_DWORD)v23)
    goto LABEL_91;
  LODWORD(v24) = (v23 - 1) & ((v21 >> 4) ^ (v21 >> 9));
  v25 = (uint64_t *)(v22 + 16 * v24);
  v26 = *v25;
  if (v21 != *v25)
  {
    v27 = 1;
    while (v26 != -4096)
    {
      v28 = v24 + v27++;
      v24 = v28 & (v23 - 1);
      v26 = *(_QWORD *)(v22 + 16 * v24);
      if (v21 == v26)
      {
        v25 = (uint64_t *)(v22 + 16 * v24);
        goto LABEL_92;
      }
    }
LABEL_91:
    v25 = (uint64_t *)(v22 + 16 * v23);
  }
LABEL_92:
  if (v25 == (uint64_t *)(v22 + 16 * v23))
    return 0;
  v60 = v25[1];
  if (!v60)
    return 0;
  v61 = *(_QWORD **)(v60 + 8);
  if (!v61)
  {
LABEL_124:
    v76 = 36;
    v79 = a4;
    v80[0] = a3;
    v78[0] = v80;
    v78[1] = &v79;
    llvm::getKnowledgeForValue((uint64_t)a1, &v76, 1, a2, (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t))sub_1C4D9B788, (uint64_t)v78, (uint64_t)v77);
    return LODWORD(v77[0]) != 0;
  }
  while (1)
  {
    v62 = *(_QWORD *)(*v61 + 40);
    if (v62 == *v61 + 40)
      goto LABEL_123;
    v63 = v62 ? v62 - 24 : 0;
    v64 = *(unsigned __int8 *)(v63 + 16);
    if ((v64 - 29) > 0xA)
      goto LABEL_123;
    if (v64 != 30)
      break;
    if ((*(_DWORD *)(v63 + 20) & 0x7FFFFFF) == 3)
    {
      v65 = (uint64_t *)(v63 - 96);
      goto LABEL_107;
    }
LABEL_123:
    v61 = (_QWORD *)v61[1];
    if (!v61)
      goto LABEL_124;
  }
  if (*(_BYTE *)(v62 - 8) != 31)
    goto LABEL_123;
  v66 = *(_DWORD *)(v62 - 4);
  if ((v66 & 0x40000000) != 0)
    v65 = *(uint64_t **)(v62 - 32);
  else
    v65 = (uint64_t *)(v62 - 24 - 32 * (v66 & 0x7FFFFFF));
LABEL_107:
  v67 = *v65;
  if (!v67)
    goto LABEL_123;
  if ((uint64_t ***)v67 == a1)
    return 1;
  if (!(_DWORD)a6)
    goto LABEL_123;
  v68 = *(unsigned __int8 *)(v67 + 16);
  if (v68 <= 0x1B && v68 != 5)
    goto LABEL_123;
  v70 = *(_DWORD *)(v67 + 20);
  if ((v70 & 0x40000000) != 0)
  {
    v72 = *(uint64_t *****)(v67 - 8);
    v71 = v70 & 0x7FFFFFF;
  }
  else
  {
    v71 = v70 & 0x7FFFFFF;
    v72 = (uint64_t ****)(v67 - 32 * v71);
  }
  if (!v71)
    goto LABEL_123;
  v73 = 32 * v71;
  while (*v72 != a1 || !llvm::propagatesPoison((uint64_t)v72))
  {
    v72 += 4;
    v73 -= 32;
    if (!v73)
      goto LABEL_123;
  }
  return 1;
}

uint64_t llvm::isGuaranteedNotToBePoison(uint64_t ***this, const llvm::Value *a2, llvm::AssumptionCache *a3, const llvm::Instruction *a4, const llvm::DominatorTree *a5)
{
  return sub_1C4F8BE80(this, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5, 1);
}

uint64_t sub_1C4F8C45C(uint64_t a1, uint64_t a2, llvm::APInt *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t MayOverflow;
  _BOOL4 v18;
  int isAllNegative;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  const void *v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  const void *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;

  if (a3 && (*((_BYTE *)a3 + 17) & 4) != 0)
    return 3;
  if (!a6 || (v14 = a6, !*(_QWORD *)(a6 + 40)))
  {
    if (!a1 || *(unsigned __int8 *)(a1 + 16) < 0x1Cu || (v14 = a1, !*(_QWORD *)(a1 + 40)))
      v14 = 0;
  }
  *(_QWORD *)&v37 = a4;
  *((_QWORD *)&v37 + 1) = a5;
  v38 = v14;
  v39 = a7;
  v40 = 0;
  v41 = 1;
  if (sub_1C4F85990((llvm::Constant *)a1, 0, (uint64_t)&v37) >= 2)
  {
    if (!a6 || (v15 = a6, !*(_QWORD *)(a6 + 40)))
    {
      if (!a2 || *(unsigned __int8 *)(a2 + 16) < 0x1Cu || (v15 = a2, !*(_QWORD *)(a2 + 40)))
        v15 = 0;
    }
    *(_QWORD *)&v37 = a4;
    *((_QWORD *)&v37 + 1) = a5;
    v38 = v15;
    v39 = a7;
    v40 = 0;
    v41 = 1;
    if (sub_1C4F85990((llvm::Constant *)a2, 0, (uint64_t)&v37) > 1)
      return 3;
  }
  sub_1C4F8B098(a1, (const llvm::KnownBits *)1, a4, a5, a6, a7, (const llvm::Value *)1, (uint64_t)&v33);
  sub_1C4F8B098(a2, (const llvm::KnownBits *)1, a4, a5, a6, a7, (const llvm::Value *)1, (uint64_t)&v29);
  MayOverflow = llvm::ConstantRange::signedAddMayOverflow(&v33, &v29);
  v16 = MayOverflow;
  if (a3 && (_DWORD)MayOverflow == 2)
  {
    v18 = llvm::ConstantRange::isAllNonNegative((llvm::ConstantRange *)&v33)
       || llvm::ConstantRange::isAllNonNegative((llvm::ConstantRange *)&v29);
    if ((llvm::ConstantRange::isAllNegative((llvm::ConstantRange *)&v33) & 1) != 0)
    {
      isAllNegative = 1;
    }
    else
    {
      isAllNegative = llvm::ConstantRange::isAllNegative((llvm::ConstantRange *)&v29);
      if ((v18 | isAllNegative) != 1)
      {
LABEL_39:
        v16 = 2;
        goto LABEL_40;
      }
    }
    v26 = v34;
    if (v34 > 0x40)
    {
      v24 = v34;
      llvm::APInt::initSlowCase((llvm::APInt *)&v25, 0, 0);
      v28 = v24;
      llvm::APInt::initSlowCase((llvm::APInt *)&v27, 0, 0);
    }
    else
    {
      v28 = v34;
      v25 = 0;
      v27 = 0;
    }
    *(_QWORD *)&v37 = a4;
    *((_QWORD *)&v37 + 1) = a5;
    v38 = a6;
    v39 = a7;
    v40 = 0;
    v41 = 1;
    sub_1C4F9B07C(a3, (uint64_t)&v25, 0, &v37);
    v20 = v26;
    v21 = (uint64_t *)(v25 + 8 * ((v26 - 1) >> 6));
    if (v26 < 0x41)
      v21 = &v25;
    if ((((unint64_t)*v21 >> (v26 - 1)) & v18 & 1) != 0)
      goto LABEL_54;
    v22 = (uint64_t *)(v27 + 8 * ((v28 - 1) >> 6));
    if (v28 < 0x41)
      v22 = &v27;
    if ((((unint64_t)*v22 >> (v28 - 1)) & isAllNegative & 1) != 0)
    {
LABEL_54:
      if (v28 >= 0x41 && v27)
      {
        MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
        v20 = v26;
      }
      if (v20 >= 0x41 && v25)
        MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
      v16 = 3;
      goto LABEL_40;
    }
    if (v28 >= 0x41 && v27)
    {
      MEMORY[0x1CAA32F9C]();
      v20 = v26;
    }
    if (v20 >= 0x41 && v25)
      MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
    goto LABEL_39;
  }
LABEL_40:
  if (v32 >= 0x41 && v31)
    MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
  if (v30 >= 0x41 && v29)
    MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
  if (v36 >= 0x41 && v35)
    MEMORY[0x1CAA32F9C](v35, 0x1000C8000313F17);
  if (v34 >= 0x41 && v33)
    MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
  return v16;
}

uint64_t llvm::computeOverflowForSignedAdd(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, llvm::AssumptionCache *a5, const llvm::Instruction *a6, const llvm::DominatorTree *a7)
{
  return sub_1C4F8C45C((uint64_t)this, (uint64_t)a2, 0, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6);
}

uint64_t llvm::isGuaranteedToExecuteForEveryIteration(llvm *this, const llvm::Instruction *a2, const llvm::Loop *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  llvm::Value **v12;

  v3 = *((_QWORD *)this + 5);
  if (v3 == **((_QWORD **)a2 + 4))
  {
    v5 = v3 + 40;
    v6 = *(_QWORD *)(v3 + 48);
    if (v6 != v3 + 40)
    {
      while (1)
      {
        v8 = v6 ? v6 - 24 : 0;
        if ((llvm *)v8 == this)
          break;
        LOBYTE(v3) = 0;
        v9 = *(unsigned __int8 *)(v8 + 16);
        if (v9 == 29 || v9 == 35)
          return v3 & 1;
        if (v9 == 80)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(v8 + 40) + 56);
          v11 = *(_DWORD *)(v10 + 20);
          if ((v11 & 0x40000000) != 0)
            v12 = *(llvm::Value ***)(v10 - 8);
          else
            v12 = (llvm::Value **)(v10 - 32 * (v11 & 0x7FFFFFF));
          if (llvm::classifyEHPersonality(*v12, a2) != 10)
            goto LABEL_2;
        }
        else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v8) & 1) != 0
               || !llvm::Instruction::willReturn((llvm::Instruction *)v8))
        {
          goto LABEL_2;
        }
        v6 = *(_QWORD *)(v6 + 8);
        if (v6 == v5)
          return v3 & 1;
      }
      LOBYTE(v3) = 1;
    }
  }
  else
  {
LABEL_2:
    LOBYTE(v3) = 0;
  }
  return v3 & 1;
}

BOOL llvm::propagatesPoison(uint64_t a1)
{
  uint64_t v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  _BOOL8 result;
  BOOL v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  BOOL v14;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(unsigned __int8 *)(v2 + 16);
  if (v2)
    v4 = v3 > 0x1B;
  else
    v4 = 0;
  if (v4)
    v5 = v3 - 28;
  else
    v5 = *(unsigned __int16 *)(v2 + 18);
  result = 0;
  switch(v5)
  {
    case '5':
    case '6':
      return 1;
    case '7':
    case 'C':
      return result;
    case '8':
      if (v3 != 84)
        return 0;
      v10 = *(_QWORD *)(v2 - 32);
      if (!v10
        || *(_BYTE *)(v10 + 16)
        || *(_QWORD *)(v10 + 24) != *(_QWORD *)(v2 + 72)
        || (*(_BYTE *)(v10 + 33) & 0x20) == 0)
      {
        return 0;
      }
      v13 = *(_DWORD *)(v10 + 36);
      result = 1;
      v14 = (v13 - 263) > 0x31 || ((1 << (v13 - 7)) & 0x2404000208001) == 0;
      if (v14 && v13 != 53)
        return 0;
      return result;
    case '9':
      v11 = *(_DWORD *)(v2 + 20);
      if ((v11 & 0x40000000) != 0)
        v12 = *(_QWORD *)(v2 - 8);
      else
        v12 = v2 - 32 * (v11 & 0x7FFFFFF);
      return ((a1 - v12) & 0x1FFFFFFFE0) == 0;
    case ':':
    case ';':
    case '<':
    case '=':
    case '>':
    case '?':
    case '@':
    case 'A':
    case 'B':
      goto LABEL_12;
    default:
      if (v5 == 5)
        return result;
      if (v5 == 34)
        return 1;
LABEL_12:
      v8 = v3 > 0x1B && v3 - 41 < 0x12;
      result = 1;
      if (v3 != 40 && !v8)
        return v3 > 0x1B && v3 - 66 < 0xD;
      return result;
  }
}

uint64_t llvm::getGuaranteedWellDefinedOps(uint64_t result, llvm::SmallPtrSetImplBase *this, int a3)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v11;
  uint64_t i;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v4 = result;
  switch(*(_BYTE *)(result + 16))
  {
    case 0x1D:
      v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 56) + 112);
      if (v6)
      {
        if (*(_DWORD *)(v6 + 8) >= 2u)
        {
          v7 = *(_QWORD *)(v6 + 48);
          if (v7)
          {
            if ((*(_BYTE *)(v7 + 16) & 0x10) != 0)
              goto LABEL_35;
          }
        }
      }
      break;
    case 0x1E:
      if (a3 && (*(_DWORD *)(result + 20) & 0x7FFFFFF) == 3)
      {
LABEL_33:
        v5 = (uint64_t *)(result - 96);
        goto LABEL_40;
      }
      break;
    case 0x1F:
      if (a3)
      {
LABEL_35:
        v19 = *(_DWORD *)(result + 20);
        if ((v19 & 0x40000000) != 0)
          v5 = *(uint64_t **)(result - 8);
        else
          v5 = (uint64_t *)(result - 32 * (v19 & 0x7FFFFFF));
LABEL_40:
        result = (uint64_t)sub_1C4774094(this, *v5);
      }
      break;
    case 0x20:
      return result;
    case 0x21:
LABEL_11:
      v8 = *(_QWORD *)(result - 32);
      v9 = *(unsigned __int8 *)(v8 + 16);
      if (v9 >= 0x15 && v9 != 24)
        result = (uint64_t)sub_1C4774094(this, v8);
      v11 = 0;
      for (i = v4; ; i += 32)
      {
        v13 = *(unsigned __int8 *)(v4 + 16);
        if (v13 == 84)
          v14 = 0;
        else
          v14 = v13 == 39 ? (*(_DWORD *)(v4 + 80) + 1) : 2;
        v15 = *(_DWORD *)(v4 + 20);
        if (v15 < 0 && (v18 = v15 & 0x7FFFFFF, (*(_QWORD *)(v4 - 8 - 32 * v18) & 0xFFFFFFFF0) != 0))
        {
          v17 = -v18;
          v16 = *(_DWORD *)(v4 - 32 * v18 - 12) - *(_DWORD *)(v4 - 32 * v18 - *(_QWORD *)(v4 - 32 * v18 - 8));
        }
        else
        {
          v16 = 0;
          v17 = -(uint64_t)(v15 & 0x7FFFFFF);
        }
        if (v11 >= ((-32 - 32 * v14 + 32 * (unint64_t)-v16 - 32 * v17) >> 5))
          break;
        if ((llvm::CallBase::paramHasAttr(v4, v11, 36) & 1) != 0
          || (result = llvm::CallBase::paramHasAttr(v4, v11, 76), (_DWORD)result))
        {
          result = (uint64_t)sub_1C4774094(this, *(_QWORD *)(i - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF)));
        }
        ++v11;
      }
      break;
    default:
      switch(*(_BYTE *)(result + 16))
      {
        case '<':
        case '=':
          v5 = (uint64_t *)(result - 32);
          goto LABEL_40;
        case '>':
        case '?':
          return result;
        case '@':
          goto LABEL_33;
        case 'A':
          v5 = (uint64_t *)(result - 64);
          goto LABEL_40;
        default:
          if (*(_BYTE *)(result + 16) == 84)
            goto LABEL_11;
          break;
      }
      break;
  }
  return result;
}

_QWORD *llvm::getGuaranteedNonPoisonOps(uint64_t a1, llvm::SmallPtrSetImplBase *a2, int a3)
{
  _QWORD *result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;

  result = (_QWORD *)llvm::getGuaranteedWellDefinedOps(a1, a2, a3);
  v6 = *(unsigned __int8 *)(a1 + 16);
  if (v6 <= 0x33)
  {
    if (((1 << v6) & 0xD800000000000) != 0)
    {
      v7 = *(_DWORD *)(a1 + 20);
      if ((v7 & 0x40000000) != 0)
        v8 = *(_QWORD *)(a1 - 8);
      else
        v8 = a1 - 32 * (v7 & 0x7FFFFFF);
      v10 = (uint64_t *)(v8 + 32);
      return sub_1C4774094(a2, *v10);
    }
    if (v6 == 30)
    {
      if (byte_1ED82ED50 && (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) == 3)
      {
        v10 = (uint64_t *)(a1 - 96);
        return sub_1C4774094(a2, *v10);
      }
    }
    else if (v6 == 31 && byte_1ED82ED50)
    {
      v9 = *(_DWORD *)(a1 + 20);
      if ((v9 & 0x40000000) != 0)
        v10 = *(uint64_t **)(a1 - 8);
      else
        v10 = (uint64_t *)(a1 - 32 * (v9 & 0x7FFFFFF));
      return sub_1C4774094(a2, *v10);
    }
  }
  return result;
}

BOOL llvm::mustTriggerUB(uint64_t a1, _QWORD *a2, int a3)
{
  _BYTE *v4;
  _BYTE *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  _BOOL8 v14;
  uint64_t *i;
  _QWORD *v17;
  uint64_t v18;
  unsigned int *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];

  v20 = v24;
  v21 = v24;
  v22 = 4;
  v23 = 0;
  llvm::getGuaranteedNonPoisonOps(a1, (llvm::SmallPtrSetImplBase *)&v20, a3);
  v5 = v20;
  v4 = v21;
  if (v21 == v20)
    v6 = (uint64_t *)((char *)&v22 + 4);
  else
    v6 = &v22;
  v7 = *(unsigned int *)v6;
  v8 = (uint64_t *)v21;
  if ((_DWORD)v7)
  {
    v9 = 0;
    while (*(_QWORD *)&v21[v9] >= 0xFFFFFFFFFFFFFFFELL)
    {
      v9 += 8;
      if (8 * v7 == v9)
        goto LABEL_17;
    }
    v8 = (uint64_t *)&v21[v9];
  }
  v10 = (uint64_t *)&v21[8 * v7];
  if (v8 == v10)
  {
LABEL_17:
    v14 = 0;
  }
  else
  {
    v11 = sub_1C477672C((uint64_t)a2, *v8);
    v12 = a2[1];
    if (v12 == *a2)
      v13 = (unsigned int *)a2 + 5;
    else
      v13 = (unsigned int *)(a2 + 2);
    if (v11 == (_QWORD *)(v12 + 8 * *v13))
    {
      for (i = v8 + 1; ; ++i)
      {
        v14 = i != v10;
        if (i == v10)
          break;
        if ((unint64_t)*i < 0xFFFFFFFFFFFFFFFELL)
        {
          v17 = sub_1C477672C((uint64_t)a2, *i);
          v18 = a2[1];
          v19 = v18 == *a2 ? (unsigned int *)((char *)a2 + 20) : (unsigned int *)(a2 + 2);
          if (v17 != (_QWORD *)(v18 + 8 * *v19))
            break;
        }
      }
    }
    else
    {
      v14 = 1;
    }
    v5 = v20;
    v4 = v21;
  }
  if (v4 != v5)
    free(v4);
  return v14;
}

uint64_t llvm::programUndefinedIfUndefOrPoison(llvm *this, const llvm::Instruction *a2)
{
  return sub_1C4F8CF08((uint64_t)this, 0, (int)a2);
}

uint64_t sub_1C4F8CF08(uint64_t a1, char a2, int a3)
{
  uint64_t v4;
  unsigned int v5;
  llvm::BasicBlock *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  int v15;
  uint64_t v16;
  char *v17;
  const llvm::Value *v18;
  uint64_t *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  llvm::Value **v25;
  int v26;
  uint64_t v27;
  const llvm::Value *v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t SingleSuccessor;
  char v37;
  _QWORD *i;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  llvm::Value **v43;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  _BYTE v49[32];
  char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  _BYTE v54[136];

  v4 = a1;
  v5 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v5 >= 0x1C)
  {
    v6 = *(llvm::BasicBlock **)(a1 + 40);
    v7 = (_QWORD *)(a1 + 32);
  }
  else
  {
    v8 = 0;
    if (!a1 || v5 != 21)
      return v8;
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80);
    v6 = (llvm::BasicBlock *)(v9 - 24);
    if (v9)
      v10 = v9 - 24;
    else
      v10 = 0;
    v7 = (_QWORD *)(v10 + 48);
  }
  v11 = (_QWORD *)*v7;
  v12 = (_QWORD *)((char *)v6 + 40);
  if ((a2 & 1) == 0)
  {
    if (v11 == v12)
    {
      v14 = 0;
LABEL_88:
      v21 = 2;
      return (v21 != 2) & v14;
    }
    v14 = 0;
    v15 = 32;
    while (1)
    {
      if (v11)
        v16 = (uint64_t)(v11 - 3);
      else
        v16 = 0;
      if (sub_1C4D99D08(v16))
        goto LABEL_42;
      if (!--v15)
        goto LABEL_88;
      v50 = v54;
      v51 = v54;
      v52 = 4;
      v53 = 0;
      llvm::getGuaranteedWellDefinedOps(v16, (llvm::SmallPtrSetImplBase *)&v50, 0);
      v17 = (char *)sub_1C477672C((uint64_t)&v50, v4);
      if (v51 == v50)
        v19 = (uint64_t *)((char *)&v52 + 4);
      else
        v19 = &v52;
      if (v17 != &v51[8 * *(unsigned int *)v19])
      {
        v20 = 0;
        v21 = 1;
        v14 = 1;
        goto LABEL_39;
      }
      v20 = 0;
      v22 = *(unsigned __int8 *)(v16 + 16);
      v21 = 2;
      if (v22 != 29 && v22 != 35)
      {
        if (v22 == 80)
        {
          v23 = *(_QWORD *)(*(_QWORD *)(v16 + 40) + 56);
          v24 = *(_DWORD *)(v23 + 20);
          if ((v24 & 0x40000000) != 0)
            v25 = *(llvm::Value ***)(v23 - 8);
          else
            v25 = (llvm::Value **)(v23 - 32 * (v24 & 0x7FFFFFF));
          if (llvm::classifyEHPersonality(*v25, v18) == 10)
          {
LABEL_33:
            v21 = 0;
            v20 = 1;
            goto LABEL_39;
          }
        }
        else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v16) & 1) == 0
               && llvm::Instruction::willReturn((llvm::Instruction *)v16))
        {
          goto LABEL_33;
        }
        v20 = 0;
      }
LABEL_39:
      if (v51 != v50)
        free(v51);
      if (!v20)
        return (v21 != 2) & v14;
LABEL_42:
      v11 = (_QWORD *)v11[1];
      if (v11 == v12)
        goto LABEL_88;
    }
  }
  v50 = v54;
  v51 = v54;
  v52 = 16;
  v53 = 0;
  v45 = v49;
  v46 = v49;
  v47 = 4;
  v48 = 0;
  v13 = a1;
LABEL_12:
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v50, v13);
  while (1)
  {
    v4 = *(_QWORD *)(v4 + 8);
    if (!v4)
      break;
    if (llvm::propagatesPoison(v4))
    {
      v13 = *(_QWORD *)(v4 + 24);
      goto LABEL_12;
    }
  }
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v45, (uint64_t)v6);
  v26 = 32;
  while (1)
  {
    while (v11 == v12)
    {
      SingleSuccessor = llvm::BasicBlock::getSingleSuccessor(v6);
      if (!SingleSuccessor)
        goto LABEL_86;
      v6 = (llvm::BasicBlock *)SingleSuccessor;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v45, SingleSuccessor);
      if (!v37)
        goto LABEL_86;
      v12 = (_QWORD *)((char *)v6 + 40);
      for (i = (_QWORD *)*((_QWORD *)v6 + 6); i != v12; i = (_QWORD *)i[1])
      {
        v39 = i - 3;
        if (i)
          v40 = i - 3;
        else
          v40 = 0;
        if (*((_BYTE *)v40 + 16) != 83)
          goto LABEL_81;
      }
      v39 = 0;
LABEL_81:
      v11 = v39 + 3;
    }
    if (v11)
      v27 = (uint64_t)(v11 - 3);
    else
      v27 = 0;
    if (sub_1C4D99D08(v27))
      goto LABEL_70;
    if (!--v26)
      goto LABEL_86;
    if (llvm::mustTriggerUB(v27, &v50, a3))
      break;
    v8 = 0;
    v29 = *(unsigned __int8 *)(v27 + 16);
    if (v29 == 29 || v29 == 35)
      goto LABEL_91;
    if (v29 == 80)
    {
      v41 = *(_QWORD *)(*(_QWORD *)(v27 + 40) + 56);
      v42 = *(_DWORD *)(v41 + 20);
      if ((v42 & 0x40000000) != 0)
        v43 = *(llvm::Value ***)(v41 - 8);
      else
        v43 = (llvm::Value **)(v41 - 32 * (v42 & 0x7FFFFFF));
      if (llvm::classifyEHPersonality(*v43, v28) != 10)
      {
LABEL_86:
        v8 = 0;
        goto LABEL_91;
      }
    }
    else if ((llvm::Instruction::mayThrow((llvm::Instruction *)v27) & 1) != 0
           || !llvm::Instruction::willReturn((llvm::Instruction *)v27))
    {
      goto LABEL_86;
    }
    v30 = *(_DWORD *)(v27 + 20);
    if ((v30 & 0x40000000) != 0)
    {
      v32 = *(uint64_t **)(v27 - 8);
      v31 = v30 & 0x7FFFFFF;
      if (!v31)
        goto LABEL_70;
    }
    else
    {
      v31 = v30 & 0x7FFFFFF;
      v32 = (uint64_t *)(v27 - 32 * v31);
      if (!v31)
        goto LABEL_70;
    }
    v33 = 32 * v31;
    while (1)
    {
      v34 = (char *)sub_1C477672C((uint64_t)&v50, *v32);
      v35 = v51 == v50 ? (uint64_t *)((char *)&v52 + 4) : &v52;
      if (v34 != &v51[8 * *(unsigned int *)v35] && llvm::propagatesPoison((uint64_t)v32))
        break;
      v32 += 4;
      v33 -= 32;
      if (!v33)
        goto LABEL_70;
    }
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v50, v27);
LABEL_70:
    v11 = (_QWORD *)v11[1];
  }
  v8 = 1;
LABEL_91:
  if (v46 != v45)
    free(v46);
  if (v51 != v50)
    free(v51);
  return v8;
}

uint64_t llvm::programUndefinedIfPoison(llvm *this, const llvm::Instruction *a2)
{
  return sub_1C4F8CF08((uint64_t)this, 1, (int)a2);
}

BOOL llvm::isKnownNegation(llvm *this, const llvm::Value *a2, const llvm::Value *a3)
{
  BOOL v3;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  unsigned int v12;
  int v13;
  llvm *v14;
  int v15;
  llvm *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  int v21;
  _BOOL8 result;
  unsigned int v23;
  unint64_t v24;
  int v25;
  int v27;
  llvm *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unint64_t v37;
  int v38;
  const llvm::Value *v39;
  uint64_t v40;
  llvm *v41;
  _BYTE v42[8];
  llvm *v43;

  if ((a3 & 1) == 0)
  {
    v43 = a2;
    v13 = *((unsigned __int8 *)this + 16);
    if (v13 == 5)
    {
      if (*((_WORD *)this + 9) != 15
        || !sub_1C4E71060((uint64_t)v42, *((llvm::Constant **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))))
      {
        goto LABEL_18;
      }
      v14 = (llvm *)((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
    }
    else
    {
      if (v13 != 43 || !sub_1C4D8AC3C((uint64_t)v42, *((llvm::Constant **)this - 8)))
        goto LABEL_18;
      v14 = (llvm *)*((_QWORD *)this - 4);
    }
    if (v43 == v14)
      return 1;
LABEL_18:
    v43 = this;
    v15 = *((unsigned __int8 *)a2 + 16);
    if (v15 == 5)
    {
      if (*((_WORD *)a2 + 9) == 15
        && sub_1C4E71060((uint64_t)v42, *((llvm::Constant **)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))))
      {
        v16 = (llvm *)((_QWORD *)a2 - 4 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF))[4];
LABEL_25:
        if (v43 == v16)
          return 1;
      }
    }
    else if (v15 == 43 && sub_1C4D8AC3C((uint64_t)v42, *((llvm::Constant **)a2 - 8)))
    {
      v16 = (llvm *)*((_QWORD *)a2 - 4);
      goto LABEL_25;
    }
    v17 = *((unsigned __int8 *)this + 16);
    if (v17 == 5)
    {
      if (*((_WORD *)this + 9) != 15)
        return 0;
      v20 = (uint64_t *)((char *)this - 32 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      v18 = *v20;
      if (!*v20)
        return 0;
      v19 = v20[4];
      if (!v19)
        return 0;
    }
    else
    {
      if (v17 != 43)
        return 0;
      v18 = *((_QWORD *)this - 8);
      if (!v18)
        return 0;
      v19 = *((_QWORD *)this - 4);
      if (!v19)
        return 0;
    }
    v21 = *((unsigned __int8 *)a2 + 16);
    if (v21 != 43)
    {
      if (v21 == 5)
      {
        v3 = 0;
        if (*((_WORD *)a2 + 9) == 15)
        {
          v29 = (_QWORD *)((char *)a2 - 32 * (*((_DWORD *)a2 + 5) & 0x7FFFFFF));
          if (v19 == *v29 && v18 == v29[4])
            v3 = 1;
        }
      }
      return (v21 == 5) & v3;
    }
    return v19 == *((_QWORD *)a2 - 8) && v18 == *((_QWORD *)a2 - 4);
  }
  v41 = a2;
  if ((sub_1C4FA498C((uint64_t)&v40, (uint64_t)this) & 1) != 0)
    return 1;
  v41 = this;
  if ((sub_1C4FA498C((uint64_t)&v40, (uint64_t)a2) & 1) != 0)
    return 1;
  v6 = *((unsigned __int8 *)this + 16);
  if (v6 < 0x1C)
  {
    if (v6 != 5)
      return 0;
    v12 = *((unsigned __int16 *)this + 9);
    HIDWORD(v24) = v12 - 13;
    LODWORD(v24) = v12 - 13;
    v23 = v24 >> 1;
    v9 = v23 > 6;
    v25 = (1 << v23) & 0x47;
    if (v9 || v25 == 0)
      return 0;
  }
  else
  {
    HIDWORD(v8) = v6 - 41;
    LODWORD(v8) = v6 - 41;
    v7 = v8 >> 1;
    v9 = v7 > 6;
    v10 = (1 << v7) & 0x47;
    if (v9 || v10 == 0)
      return 0;
    v12 = v6 - 28;
  }
  if (v12 != 15 || (*((_BYTE *)this + 17) & 4) == 0)
    return 0;
  v27 = *((_DWORD *)this + 5);
  v28 = (v27 & 0x40000000) != 0 ? (llvm *)*((_QWORD *)this - 1) : (llvm *)((char *)this - 32 * (v27 & 0x7FFFFFF));
  v30 = *(_QWORD *)v28;
  if (!*(_QWORD *)v28)
    return 0;
  v31 = *((_QWORD *)v28 + 4);
  if (!v31)
    return 0;
  v32 = *((unsigned __int8 *)a2 + 16);
  if (v32 < 0x1C)
  {
    if (v32 == 5)
    {
      result = 0;
      v35 = *((unsigned __int16 *)a2 + 9);
      HIDWORD(v37) = v35 - 13;
      LODWORD(v37) = v35 - 13;
      v36 = v37 >> 1;
      if (v36 <= 6 && ((1 << v36) & 0x47) != 0)
        goto LABEL_63;
      return result;
    }
    return 0;
  }
  result = 0;
  HIDWORD(v34) = v32 - 41;
  LODWORD(v34) = v32 - 41;
  v33 = v34 >> 1;
  if (v33 <= 6 && ((1 << v33) & 0x47) != 0)
  {
    v35 = v32 - 28;
LABEL_63:
    if (v35 == 15 && (*((_BYTE *)a2 + 17) & 4) != 0)
    {
      v38 = *((_DWORD *)a2 + 5);
      v39 = (v38 & 0x40000000) != 0
          ? (const llvm::Value *)*((_QWORD *)a2 - 1)
          : (const llvm::Value *)((char *)a2 - 32 * (v38 & 0x7FFFFFF));
      if (*(_QWORD *)v39 == v31)
        return *((_QWORD *)v39 + 4) == v30;
    }
    return 0;
  }
  return result;
}

unint64_t llvm::matchSelectPattern(uint64_t a1, uint64_t a2, _QWORD *a3, llvm::Type *a4, unsigned int a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  unint64_t matched;

  if (a5 <= 5)
  {
    v5 = 0;
    if (a1)
    {
      v6 = 0;
      if (*(_BYTE *)(a1 + 16) == 85)
      {
        v5 = 0;
        v7 = *(_QWORD *)(a1 - 96);
        if (v7)
        {
          v8 = *(unsigned __int8 *)(v7 + 16);
          v9 = v8 >= 0x1C && v8 - 83 >= 0xFFFFFFFE;
          v6 = 0;
          if (v9)
          {
            matched = llvm::matchDecomposedSelectPattern(*(_QWORD *)(a1 - 96), *(llvm::ConstantExpr **)(a1 - 64), *(llvm::ConstantExpr **)(a1 - 32), a2, a3, a4, a5);
            v6 = matched & 0xFFFFFFFF00000000;
            v5 = matched;
          }
        }
        else
        {
          v6 = 0;
        }
      }
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
  return v6 | v5;
}

unint64_t llvm::matchDecomposedSelectPattern(uint64_t a1, llvm::ConstantExpr *a2, llvm::ConstantExpr *a3, uint64_t a4, _QWORD *a5, llvm::Type *a6, int a7)
{
  __int16 v13;
  llvm *v14;
  llvm::Constant *v15;
  _BOOL4 v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  uint64_t *v24;
  uint64_t v25;
  llvm::Constant *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unsigned __int8 v30;
  unsigned int v31;
  uint64_t *v32;
  llvm::Value *v33;
  char v34;
  uint64_t v35;
  llvm *v36;
  char v37;
  llvm::Value *v38;
  uint64_t *v39;
  llvm *v40;
  llvm::Constant *v41;
  _BYTE v43[5];
  int v44;
  uint64_t v45;
  std::string __dst;

  v13 = *(_WORD *)(a1 + 18);
  v14 = *(llvm **)(a1 - 64);
  v15 = *(llvm::Constant **)(a1 - 32);
  v16 = sub_1C4774A9C(a1);
  if (v16)
  {
    if (*(unsigned __int8 *)(a1 + 17) >> 1 == 127)
      LOBYTE(v17) = -1;
    else
      v17 = *(unsigned __int8 *)(a1 + 17) >> 1;
  }
  else
  {
    LOBYTE(v17) = 0;
  }
  v18 = *(_WORD *)(a1 + 18) & 0x3F;
  if (v18 - 32 >= 0xA)
  {
    v21 = v18 > 0xE;
    v22 = (1 << v18) & 0x4242;
    if (!v21 && v22 != 0)
      goto LABEL_8;
LABEL_14:
    v24 = (uint64_t *)(v13 & 0x3F);
    if (v16 && (v25 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56)) != 0)
    {
      v44 = a7;
      v26 = v15;
      v27 = a4;
      v28 = (uint64_t *)(v13 & 0x3F);
      v29 = *(_QWORD *)(v25 + 40);
      if (*(char *)(v29 + 239) < 0)
        sub_1C47EBC30(&__dst, *(void **)(v29 + 216), *(_QWORD *)(v29 + 224));
      else
        __dst = *(std::string *)(v29 + 216);
      if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
      {
        v31 = -2;
      }
      else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
      {
        v31 = -1;
      }
      else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
      {
        v31 = 0;
      }
      else
      {
        v31 = -29;
      }
      v24 = v28;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__dst.__r_.__value_.__l.__data_);
        v24 = v28;
      }
      v30 = v31 < 0xFFFFFFFE;
      a4 = v27;
      v15 = v26;
      a7 = v44;
      if (!a6)
        goto LABEL_41;
    }
    else
    {
      v30 = 1;
      if (!a6)
        goto LABEL_41;
    }
    if (*(_QWORD *)v14 != *(_QWORD *)a2)
    {
      v45 = a4;
      v32 = v24;
      v33 = (llvm::Value *)sub_1C4F8DA3C(a1, (uint64_t)a2, a3, a6);
      if (v33)
      {
        if ((*(_DWORD *)a6 - 41) >= 2)
          v34 = v17;
        else
          v34 = v17 | 8;
        v19 = sub_1C4F8DBE8(v32, v34, v14, v15, *((llvm **)a2 - 4), v33, v45, a5, a7, v30);
        goto LABEL_43;
      }
      v35 = sub_1C4F8DA3C(a1, (uint64_t)a3, a2, a6);
      v24 = v32;
      a4 = v45;
      if (v35)
      {
        v36 = (llvm *)v35;
        if ((*(_DWORD *)a6 - 41) >= 2)
          v37 = v17;
        else
          v37 = v17 | 8;
        v38 = (llvm::Value *)*((_QWORD *)a3 - 4);
        v43[4] = v30;
        *(_DWORD *)v43 = a7;
        v39 = v24;
        v40 = v14;
        v41 = v15;
        goto LABEL_42;
      }
    }
LABEL_41:
    v37 = v17;
    v43[4] = v30;
    *(_DWORD *)v43 = a7;
    v39 = v24;
    v40 = v14;
    v41 = v15;
    v36 = a2;
    v38 = a3;
LABEL_42:
    v19 = sub_1C4F8DBE8(v39, v37, v40, v41, v36, v38, a4, a5, *(int *)v43, v43[4]);
LABEL_43:
    v20 = v19 & 0xFFFFFFFF00000000;
    return v20 | v19;
  }
  if ((*(_WORD *)(a1 + 18) & 0x3E) != 0x20)
    goto LABEL_14;
LABEL_8:
  LODWORD(v19) = 0;
  v20 = 0;
  return v20 | v19;
}

uint64_t sub_1C4F8DA3C(uint64_t a1, uint64_t a2, llvm::ConstantExpr *this, llvm::Type *a4)
{
  uint64_t v4;
  unsigned int v6;
  int v7;
  llvm::Type ***v11;
  unsigned int v12;
  uint64_t v14;
  uint64_t IntegerCast;
  uint64_t v16;

  v4 = 0;
  if (!a2)
    return v4;
  v6 = *(unsigned __int8 *)(a2 + 16);
  v7 = v6 - 28;
  if (v6 < 0x1C || v6 - 79 < 0xFFFFFFF3)
    return v4;
  *(_DWORD *)a4 = v7;
  v11 = **(llvm::Type *****)(a2 - 32);
  v12 = *((unsigned __int8 *)this + 16);
  if (this)
  {
    if (v12 >= 0x1C && v12 - 79 >= 0xFFFFFFF3)
    {
      if (v6 == v12)
      {
        if (v11 == **((llvm::Type *****)this - 4))
          return *((_QWORD *)this - 4);
        else
          return 0;
      }
      return 0;
    }
  }
  v4 = 0;
  if (!this || v12 > 0x14)
    return v4;
  switch(v6)
  {
    case 'B':
      v14 = *(_QWORD *)(a1 - 32);
      if (v14 && *(unsigned __int8 *)(v14 + 16) <= 0x14u && *(llvm::Type ****)v14 == v11)
        goto LABEL_37;
      IntegerCast = llvm::ConstantExpr::getIntegerCast(this, v11, (llvm::Type *)((*(_WORD *)(a1 + 18) & 0x3Eu) - 38 < 4));
      break;
    case 'C':
      if ((*(_WORD *)(a1 + 18) & 0x3Eu) - 34 > 3)
        return 0;
      IntegerCast = (uint64_t)sub_1C537D3B8((llvm *)0x26, (uint64_t)this, (llvm::Constant *)v11, 0);
      break;
    case 'D':
      if ((*(_WORD *)(a1 + 18) & 0x3Eu) - 38 > 3)
        return 0;
      v16 = 38;
      goto LABEL_34;
    case 'E':
      v16 = 43;
      goto LABEL_34;
    case 'F':
      v16 = 44;
      goto LABEL_34;
    case 'G':
      v16 = 41;
      goto LABEL_34;
    case 'H':
      v16 = 42;
      goto LABEL_34;
    case 'I':
      v16 = 46;
      goto LABEL_34;
    case 'J':
      v16 = 45;
LABEL_34:
      IntegerCast = (uint64_t)llvm::ConstantFoldCastInstruction((llvm *)v16, (uint64_t)this, (llvm::Constant *)v11, a4);
      break;
    default:
      return 0;
  }
  v14 = IntegerCast;
  if (!IntegerCast)
    return 0;
  v7 = *(_DWORD *)a4;
LABEL_37:
  if ((llvm::ConstantExpr *)llvm::ConstantExpr::getCast(v7) == this)
    return v14;
  else
    return 0;
}

uint64_t sub_1C4F8DBE8(uint64_t *a1, char a2, llvm *a3, llvm::Constant *a4, llvm *this, llvm::Value *a6, uint64_t a7, _QWORD *a8, int a9, unsigned __int8 a10)
{
  uint64_t *v17;
  llvm *v18;
  unsigned int v19;
  unint64_t v20;
  BOOL v21;
  int v22;
  BOOL v23;
  uint64_t v24;
  llvm *v25;
  llvm::Value *v26;
  _BOOL4 v27;
  _BOOL4 v28;
  uint64_t v29;
  uint64_t v30;
  llvm *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Constant *v39;
  char v40;
  char v41;
  char v42;
  char v43;
  uint64_t v44;
  char v45;
  llvm::Constant *v46;
  uint64_t v47;
  llvm::Constant *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  unsigned __int8 *v65;
  int v68;
  BOOL v69;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  unsigned __int8 *v77;
  unsigned __int8 *v78;
  int v81;
  BOOL v82;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  int v94;
  BOOL v95;
  unsigned int matched;
  unsigned int v98;
  uint64_t v99;
  BOOL v100;
  llvm::APInt **v101;
  llvm::APInt *v102;
  unsigned int v103;
  uint64_t v104;
  llvm::APInt *v105;
  llvm::APInt *v106;
  llvm::APInt *v107;
  int v108;
  unsigned int v109;
  unsigned __int8 v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  void *v114;
  char v115;
  char v116;
  int v117;
  unsigned int v118;
  BOOL v119;
  int v120;
  void *v121;
  char v122;
  char v123;
  int v124;
  void *v125;
  char v126;
  char v127;
  int v128;
  unsigned int v129;
  uint64_t v131;
  llvm::APInt *v133;
  uint64_t v134;
  uint64_t v136;
  int v137;
  llvm::APInt **v138;
  llvm::APInt *v139;
  char v140;
  llvm::APInt **v141;
  llvm::APInt *v142;
  char v143;
  llvm::APInt *v145;
  uint64_t v146;
  uint64_t v147;
  llvm::APInt **v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  llvm::APInt **v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  llvm::APInt **v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  llvm::APInt **v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  int v164;
  int v165;
  llvm::APInt **v166;
  char v167;
  uint64_t v168;
  llvm::Constant **v169;
  uint64_t v170;
  llvm::APInt **v171;
  char v172;
  void **v173;
  int v174;
  int v175;
  llvm::APInt **v176;
  char v177;
  uint64_t v178;
  llvm::Constant **v179;
  uint64_t v180;
  llvm::APInt **v181;
  char v182;
  uint64_t v183;
  int v184;
  int v185;
  llvm::APInt **v186;
  char v187;
  uint64_t v188;
  llvm::Constant **v189;
  uint64_t v190;
  llvm::APInt **v191;
  llvm::APInt **v192;
  llvm::APInt *v193;
  char v194;
  llvm::Constant **v195;
  llvm::APInt **v196;
  llvm::APInt *v197;
  int v198;
  int v199;
  llvm::APInt *v200;
  llvm::APInt **v201;
  uint64_t v202;
  llvm::APInt *v203;
  llvm::Constant **v204;
  llvm::APInt **v205;
  uint64_t v206;
  llvm::APInt **v207;
  uint64_t v208;
  unsigned __int8 *v209;
  unsigned __int8 *v210;
  unsigned __int8 *v211;
  unsigned __int8 *v212;
  int v213;
  uint64_t v214;
  unsigned __int8 *v215;
  unsigned __int8 *v216;
  unsigned __int8 *v217;
  unsigned __int8 *v218;
  int v219;
  uint64_t v220;
  unsigned __int8 *v221;
  unsigned __int8 *v222;
  unsigned __int8 *v223;
  unsigned __int8 *v224;
  int v225;
  uint64_t v226;
  unsigned __int8 *v227;
  unsigned __int8 *v228;
  unsigned __int8 *v229;
  unsigned __int8 *v230;
  int v231;
  unsigned __int8 v232;
  llvm::detail::DoubleAPFloat *v233;
  const llvm::detail::DoubleAPFloat *v234;
  unsigned __int8 v235;
  llvm::detail::IEEEFloat *v236;
  const llvm::detail::IEEEFloat *v237;
  int v238;
  char v240;
  llvm::APInt ***v241;
  char v242;
  llvm::APInt ***v243;
  char v244;
  llvm::APInt ***v245;
  int v246;
  llvm *v247;
  llvm *v248;
  llvm::Constant *v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int v252;
  unsigned int v253;
  int v254;
  llvm *v255;
  llvm *v256;
  llvm::Constant *v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  char v262;
  llvm::APInt ***v263;
  unint64_t v264;
  unint64_t v265;
  unint64_t v266;
  unint64_t v267;
  unint64_t v268;
  unint64_t v269;
  int v270;
  llvm *v271;
  llvm *v272;
  llvm::Constant *v273;
  uint64_t v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  int v278;
  llvm *v279;
  llvm *v280;
  llvm::Constant *v281;
  uint64_t v282;
  unint64_t v283;
  unint64_t v284;
  unint64_t v285;
  int v286;
  llvm::APInt *v288;
  llvm::APInt *v289;
  llvm::APInt *v290;
  llvm::APInt *v291;
  llvm::APInt *v292;
  llvm::APInt *v293;
  llvm::APInt *v294;
  llvm::APInt *v295;
  llvm::APInt *v296;
  llvm::APInt *v297;
  llvm::APInt *v298;
  llvm::APInt *v299;
  llvm::APInt *v300;
  llvm::APInt *v301;
  llvm::APInt *v302;
  char v303;
  llvm::APInt **v304;
  llvm::APInt **v305;
  llvm::APInt **v306;
  llvm::APInt **v307;
  llvm::APInt **v308;
  llvm::APInt **v309;
  llvm::APInt **v310;
  llvm::APInt **v311;
  llvm::APInt **v312;
  llvm::APInt **v313;
  llvm::APInt **v314;
  llvm::APInt **v315;
  llvm::APInt **v316;
  llvm::APInt **v317;
  llvm::APInt **v318;
  llvm::APInt **v319;
  llvm::APInt **v320;
  uint64_t v321;
  llvm *v322;
  llvm::APInt **v323;
  uint64_t v324;
  llvm::APInt **v325;
  uint64_t v326;
  llvm::APInt *v327;
  uint64_t v328;
  llvm::APInt *v329;
  llvm::APInt *v330;

  v17 = a1;
  if (a1 <= 0xF)
  {
    if (sub_1C4E5C310((uint64_t)&v325, this)
      && !sub_1C4E5C310((uint64_t)&v330, a6)
      && (v18 = this,
          (sub_1C5375B0C(this, (uint64_t (*)(uint64_t, llvm::UndefValue *))sub_1C5381FE4, (uint64_t)&v319) & 1) == 0)
      || sub_1C4E5C310((uint64_t)&v325, a6)
      && !sub_1C4E5C310((uint64_t)&v330, this)
      && (v18 = a6,
          (sub_1C5375B0C(a6, (uint64_t (*)(uint64_t, llvm::UndefValue *))sub_1C5381FE4, (uint64_t)&v319) & 1) == 0))
    {
      if (v18)
      {
        if (sub_1C4E5C310((uint64_t)&v319, a3))
          a3 = v18;
        if (sub_1C4E5C310((uint64_t)&v319, a4))
          a4 = v18;
      }
    }
  }
  *(_QWORD *)a7 = a3;
  *a8 = a4;
  HIDWORD(v20) = (_DWORD)v17 - 3;
  LODWORD(v20) = (_DWORD)v17 - 3;
  v19 = v20 >> 1;
  v21 = v19 > 5;
  v22 = (1 << v19) & 0x33;
  v23 = v21 || v22 == 0;
  if (!v23
    && (a2 & 8) == 0
    && (sub_1C4FA370C((unsigned __int8 *)a3) & 1) == 0
    && !sub_1C4FA370C((unsigned __int8 *)a4))
  {
    goto LABEL_532;
  }
  LODWORD(v24) = a10;
  v303 = a2;
  v25 = this;
  v26 = a6;
  v27 = sub_1C4FA3894((unsigned __int8 *)a3, a2);
  v28 = sub_1C4FA3894((unsigned __int8 *)a4, a2);
  if (v27 && v28 && (a10 & 1) != 0)
  {
    v29 = 3;
    goto LABEL_38;
  }
  if (((_DWORD)v17 - 1) > 6)
  {
    if (v27)
    {
      if (a10)
        v29 = 2;
      else
        v29 = 1;
      goto LABEL_38;
    }
    if (!v28)
      goto LABEL_532;
    goto LABEL_37;
  }
  if (v27)
  {
LABEL_37:
    v29 = 1;
    goto LABEL_38;
  }
  if (!v28)
    goto LABEL_532;
  if (a10)
    v29 = 2;
  else
    v29 = 1;
LABEL_38:
  v30 = (uint64_t)v26;
  v31 = v25;
  while (2)
  {
    if (a4 == v31 && a3 == (llvm *)v30)
    {
      v17 = (uint64_t *)dword_1C85F6E70[(int)v17];
      if ((_DWORD)v24)
      {
        if ((_DWORD)v29 == 1)
        {
          v29 = 2;
        }
        else if ((_DWORD)v29 == 2)
        {
          v29 = 1;
        }
        else
        {
          v29 = v29;
        }
      }
      a4 = (llvm::Constant *)v30;
      a3 = v31;
    }
    if (a3 != v31 || a4 != (llvm::Constant *)v30)
    {
      if (!llvm::isKnownNegation(v31, (const llvm::Value *)v30, 0))
        goto LABEL_105;
      v24 = v30;
      v319 = (llvm::APInt **)a3;
      v320 = (llvm::APInt **)a3;
      if (a3 == v31 || sub_1C4FA3A38(&v320, (uint64_t)v31))
      {
        *(_QWORD *)a7 = v31;
        *a8 = v30;
        v326 = v30;
        v34 = *((unsigned __int8 *)a3 + 16);
        if (v34 == 5)
        {
          if (*((_WORD *)a3 + 9) == 15
            && sub_1C4E71060((uint64_t)&v325, *((llvm::Constant **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))))
          {
            v35 = ((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
LABEL_74:
            if (v326 == v35)
            {
              v38 = *(_QWORD *)a7;
              *(_QWORD *)a7 = *a8;
              *a8 = v38;
            }
          }
        }
        else if (v34 == 43 && sub_1C4D8AC3C((uint64_t)&v325, *((llvm::Constant **)a3 - 8)))
        {
          v35 = *((_QWORD *)a3 - 4);
          goto LABEL_74;
        }
        v39 = a4;
        switch((_DWORD)v17)
        {
          case '(':
            v42 = sub_1C4D8AC3C((uint64_t)&v329, a4);
            if ((v42 & 1) != 0)
              goto LABEL_100;
            v43 = sub_1C4D89CC8((uint64_t)&v329 + 1, a4);
LABEL_99:
            a4 = v39;
            if ((v43 & 1) != 0)
              goto LABEL_100;
            break;
          case '\'':
            v41 = sub_1C4D8AC3C((uint64_t)&v329, a4);
            if ((v41 & 1) != 0)
              goto LABEL_103;
            v40 = sub_1C4D89CC8((uint64_t)&v329 + 1, a4);
LABEL_85:
            if ((v40 & 1) == 0)
              break;
LABEL_103:
            v33 = 7;
            goto LABEL_533;
          case '&':
            if ((sub_1C4D8AC3C((uint64_t)&v330, a4) & 1) != 0)
              goto LABEL_103;
            v40 = sub_1C4D9ED34((uint64_t)&v330 + 1, a4);
            goto LABEL_85;
        }
LABEL_104:
        v30 = v24;
LABEL_105:
        *(_QWORD *)a7 = v31;
        *a8 = v30;
        a7 = v30;
        v46 = v31;
        LODWORD(a8) = (_DWORD)v17;
        if (a4 != v31)
        {
          a7 = (uint64_t)v31;
          v46 = (llvm::Constant *)v30;
          a8 = v17;
          switch((int)v17)
          {
            case ' ':
            case '!':
              break;
            case '"':
              LODWORD(a8) = 36;
              goto LABEL_128;
            case '#':
              LODWORD(a8) = 37;
              goto LABEL_128;
            case '$':
              LODWORD(a8) = 34;
              goto LABEL_128;
            case '%':
              LODWORD(a8) = 35;
              goto LABEL_128;
            case '&':
              LODWORD(a8) = 40;
              goto LABEL_128;
            case '\'':
              LODWORD(a8) = 41;
              goto LABEL_128;
            case '(':
              LODWORD(a8) = 38;
              goto LABEL_128;
            case ')':
              LODWORD(a8) = 39;
LABEL_128:
              a7 = (uint64_t)v31;
              v46 = (llvm::Constant *)v30;
              break;
            default:
              if ((_DWORD)v29 != 3
                || (v303 & 8) == 0
                && (sub_1C4FA370C((unsigned __int8 *)a3) & 1) == 0
                && !sub_1C4FA370C((unsigned __int8 *)a4))
              {
                goto LABEL_532;
              }
              if (a4 == (llvm::Constant *)v30)
              {
                v48 = (llvm::Constant *)v30;
                v30 = 14;
                v47 = (uint64_t)v31;
                switch((int)v17)
                {
                  case 0:
                    LODWORD(v30) = 15;
                    goto LABEL_457;
                  case 1:
                    goto LABEL_458;
                  case 2:
                    LODWORD(v30) = 13;
                    goto LABEL_457;
                  case 3:
                    LODWORD(v30) = 12;
                    goto LABEL_457;
                  case 4:
                    LODWORD(v30) = 11;
                    goto LABEL_457;
                  case 5:
                    LODWORD(v30) = 10;
                    goto LABEL_457;
                  case 6:
                    LODWORD(v30) = 9;
                    goto LABEL_457;
                  case 7:
                    LODWORD(v30) = 8;
                    goto LABEL_457;
                  case 8:
                    LODWORD(v30) = 7;
                    goto LABEL_457;
                  case 9:
                    LODWORD(v30) = 6;
                    goto LABEL_457;
                  case 10:
                    LODWORD(v30) = 5;
                    goto LABEL_457;
                  case 11:
                    LODWORD(v30) = 4;
                    goto LABEL_457;
                  case 12:
                    LODWORD(v30) = 3;
                    goto LABEL_457;
                  case 13:
                    LODWORD(v30) = 2;
                    goto LABEL_457;
                  case 14:
                    LODWORD(v30) = 1;
                    goto LABEL_457;
                  case 15:
                    LODWORD(v30) = 0;
LABEL_457:
                    v47 = (uint64_t)v31;
                    goto LABEL_458;
                  default:
                    v29 = 0;
                    continue;
                }
              }
              v47 = v30;
              v48 = v31;
              LODWORD(v30) = (_DWORD)v17;
LABEL_458:
              *(_QWORD *)v31 = v48;
              *v17 = v47;
              v325 = 0;
              if (v48 != a4)
                goto LABEL_532;
              v319 = (llvm::APInt **)&v325;
              v320 = 0;
              if (!sub_1C4E7A604((uint64_t)&v319, (unsigned __int8 *)a4))
                goto LABEL_532;
              v207 = v325;
              if (v325[1] == (llvm::APInt *)&unk_1C866F1C0)
                v207 = (llvm::APInt **)v325[2];
              if ((*((_BYTE *)v207 + 28) & 7u) < 2)
                goto LABEL_532;
              v330 = 0;
              if (v30 > 0xD)
                goto LABEL_532;
              if (((1 << v30) & 0xC0C) == 0)
              {
                if (((1 << v30) & 0x3030) == 0)
                  goto LABEL_532;
                v319 = (llvm::APInt **)a3;
                v320 = &v330;
                v321 = 0;
                v322 = a3;
                v323 = &v330;
                v324 = 0;
                if (*(_BYTE *)(v47 + 16) != 85)
                  goto LABEL_532;
                v208 = *(_QWORD *)(v47 - 96);
                if (!v208 || *(_BYTE *)(v208 + 16) != 82)
                  goto LABEL_489;
                v209 = *(unsigned __int8 **)(v47 - 64);
                v210 = *(unsigned __int8 **)(v47 - 32);
                v211 = *(unsigned __int8 **)(v208 - 64);
                v212 = *(unsigned __int8 **)(v208 - 32);
                if ((v209 != v211 || v210 != v212) && (v209 != v212 || v210 != v211))
                  goto LABEL_489;
                v213 = *(_WORD *)(v208 + 18) & 0x3E;
                if (v209 == v211)
                {
                  if (v213 != 4)
                    goto LABEL_489;
                }
                else if (v213 != 10)
                {
                  goto LABEL_489;
                }
                if (a3 == (llvm *)v211)
                {
                  v235 = sub_1C4E7A604((uint64_t)&v320, v212);
                  if ((v235 & 1) != 0)
                  {
LABEL_525:
                    v236 = (llvm::detail::IEEEFloat *)(v325 + 1);
                    v237 = (llvm::APInt *)((char *)v330 + 8);
                    if (v325[1] != (llvm::APInt *)&unk_1C866F1C0)
                    {
                      llvm::detail::IEEEFloat::compare(v236, v237);
                      if (v238)
                        goto LABEL_532;
                      goto LABEL_528;
                    }
                    if (!llvm::detail::DoubleAPFloat::compare(v236, v237))
                    {
LABEL_528:
                      v32 = 3;
                      v33 = 6;
                      return v33 | (v32 << 32);
                    }
                    goto LABEL_532;
                  }
                  if (*(_BYTE *)(v47 + 16) != 85)
                    goto LABEL_532;
                }
LABEL_489:
                v220 = *(_QWORD *)(v47 - 96);
                if (!v220 || *(_BYTE *)(v220 + 16) != 82)
                  goto LABEL_532;
                v221 = *(unsigned __int8 **)(v47 - 64);
                v222 = *(unsigned __int8 **)(v47 - 32);
                v223 = *(unsigned __int8 **)(v220 - 64);
                v224 = *(unsigned __int8 **)(v220 - 32);
                if ((v221 != v223 || v222 != v224) && (v221 != v224 || v222 != v223))
                  goto LABEL_532;
                v225 = *(_WORD *)(v220 + 18) & 0x3E;
                if (v221 == v223)
                {
                  if (v225 != 12)
                    goto LABEL_532;
                }
                else if (v225 != 2)
                {
                  goto LABEL_532;
                }
                if (v322 != (llvm *)v223 || !sub_1C4E7A604((uint64_t)&v323, v224))
                  goto LABEL_532;
                goto LABEL_525;
              }
              v319 = (llvm::APInt **)a3;
              v320 = &v330;
              v321 = 0;
              v322 = a3;
              v323 = &v330;
              v324 = 0;
              if (*(_BYTE *)(v47 + 16) != 85)
                goto LABEL_532;
              v214 = *(_QWORD *)(v47 - 96);
              if (!v214 || *(_BYTE *)(v214 + 16) != 82)
                goto LABEL_501;
              v215 = *(unsigned __int8 **)(v47 - 64);
              v216 = *(unsigned __int8 **)(v47 - 32);
              v217 = *(unsigned __int8 **)(v214 - 64);
              v218 = *(unsigned __int8 **)(v214 - 32);
              if ((v215 != v217 || v216 != v218) && (v215 != v218 || v216 != v217))
                goto LABEL_501;
              v219 = *(_WORD *)(v214 + 18) & 0x3E;
              if (v215 == v217)
              {
                if (v219 != 2)
                  goto LABEL_501;
              }
              else if (v219 != 12)
              {
                goto LABEL_501;
              }
              if (a3 == (llvm *)v217)
              {
                v232 = sub_1C4E7A604((uint64_t)&v320, v218);
                if ((v232 & 1) != 0)
                  goto LABEL_519;
                if (*(_BYTE *)(v47 + 16) != 85)
                  goto LABEL_532;
              }
LABEL_501:
              v226 = *(_QWORD *)(v47 - 96);
              if (!v226 || *(_BYTE *)(v226 + 16) != 82)
                goto LABEL_532;
              v227 = *(unsigned __int8 **)(v47 - 64);
              v228 = *(unsigned __int8 **)(v47 - 32);
              v229 = *(unsigned __int8 **)(v226 - 64);
              v230 = *(unsigned __int8 **)(v226 - 32);
              if ((v227 != v229 || v228 != v230) && (v227 != v230 || v228 != v229))
                goto LABEL_532;
              v231 = *(_WORD *)(v226 + 18) & 0x3E;
              if (v227 == v229)
              {
                if (v231 != 10)
                  goto LABEL_532;
              }
              else if (v231 != 4)
              {
                goto LABEL_532;
              }
              if (v322 != (llvm *)v229 || !sub_1C4E7A604((uint64_t)&v323, v230))
                goto LABEL_532;
LABEL_519:
              v233 = (llvm::detail::DoubleAPFloat *)(v325 + 1);
              v234 = (llvm::APInt *)((char *)v330 + 8);
              if (v325[1] == (llvm::APInt *)&unk_1C866F1C0)
                v286 = llvm::detail::DoubleAPFloat::compare(v233, v234);
              else
                llvm::detail::IEEEFloat::compare(v233, v234);
              if (v286 == 2)
              {
                v32 = 3;
                v33 = 5;
                return v33 | (v32 << 32);
              }
              goto LABEL_532;
          }
        }
        v325 = 0;
        if (v46 != a4)
          goto LABEL_240;
        v319 = (llvm::APInt **)&v325;
        v320 = 0;
        if (!sub_1C4D89F84((uint64_t)&v319, (unsigned __int8 *)a4))
          goto LABEL_240;
        v330 = 0;
        v319 = (llvm::APInt **)a3;
        v320 = &v330;
        v321 = 0;
        v49 = *(unsigned __int8 *)(a7 + 16);
        if (v49 == 85)
        {
          v52 = *(_QWORD *)(a7 - 96);
          if (!v52 || *(_BYTE *)(v52 + 16) != 81)
            goto LABEL_153;
          v53 = *(unsigned __int8 **)(a7 - 64);
          v54 = *(unsigned __int8 **)(a7 - 32);
          v55 = *(unsigned __int8 **)(v52 - 64);
          v56 = *(unsigned __int8 **)(v52 - 32);
          if ((v53 != v55 || v54 != v56) && (v53 != v56 || v54 != v55))
            goto LABEL_153;
          v57 = *(_WORD *)(v52 + 18) & 0x3E;
          if (v53 == v55)
          {
            if (v57 != 40)
              goto LABEL_153;
          }
          else if (v57 != 38)
          {
            goto LABEL_153;
          }
          if (a3 != (llvm *)v55)
            goto LABEL_153;
          if (!sub_1C4D89F84((uint64_t)&v320, v56))
            goto LABEL_153;
        }
        else
        {
          if (v49 != 84)
            goto LABEL_153;
          v50 = *(_QWORD *)(a7 - 32);
          if (!v50)
            goto LABEL_153;
          if (*(_BYTE *)(v50 + 16))
            goto LABEL_153;
          if (*(_QWORD *)(v50 + 24) != *(_QWORD *)(a7 + 72))
            goto LABEL_153;
          if ((*(_BYTE *)(v50 + 33) & 0x20) == 0)
            goto LABEL_153;
          if (*(_DWORD *)(v50 + 36) != 275)
            goto LABEL_153;
          v51 = a7 - 32 * (*(_DWORD *)(a7 + 20) & 0x7FFFFFF);
          if (a3 != *(llvm **)v51
            || (sub_1C4D89F84((uint64_t)&v320, *(unsigned __int8 **)(v51 + 32)) & 1) == 0)
          {
            goto LABEL_153;
          }
        }
        v145 = v330;
        v146 = *((unsigned int *)v325 + 2);
        if (v146 > 0x40)
        {
          v254 = (int)v17;
          v255 = v31;
          v256 = a3;
          v257 = a4;
          v258 = v30;
          v259 = *((_QWORD *)*v325 + ((v146 - 1) >> 6)) & (1 << (v146 - 1));
          v260 = *((_DWORD *)v330 + 2);
          v261 = v260 - 1;
          if (v260 >= 0x41)
            v145 = (llvm::APInt *)(*(_QWORD *)v330 + 8 * (v261 >> 6));
          if ((v259 != 0) == ((*(_QWORD *)v145 >> v261) & 1))
          {
            v267 = ((unint64_t)(v146 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              v30 = v258;
              a4 = v257;
              a3 = v256;
              v31 = v255;
              LODWORD(v17) = v254;
              if (!v267)
                goto LABEL_153;
              v268 = *(_QWORD *)((char *)*v325 + v267 - 8);
              v269 = *(_QWORD *)(*(_QWORD *)v330 - 8 + v267);
              v267 -= 8;
            }
            while (v268 == v269);
            v30 = v258;
            a4 = v257;
            a3 = v256;
            v31 = v255;
            LODWORD(v17) = v254;
            if (v268 > v269)
              goto LABEL_153;
          }
          else if (!v259)
          {
            goto LABEL_153;
          }
        }
        else if ((uint64_t)((_QWORD)*v325 << -(char)v146) >> -(char)v146 >= (uint64_t)(*(_QWORD *)v330 << -(char)v146) >> -(char)v146)
        {
          goto LABEL_153;
        }
        if ((_DWORD)a8 == 40)
        {
          v33 = 3;
          goto LABEL_533;
        }
LABEL_153:
        v319 = (llvm::APInt **)a3;
        v320 = &v330;
        v321 = 0;
        v58 = *(unsigned __int8 *)(a7 + 16);
        if (v58 == 85)
        {
          v61 = *(_QWORD *)(a7 - 96);
          if (!v61 || *(_BYTE *)(v61 + 16) != 81)
            goto LABEL_182;
          v62 = *(unsigned __int8 **)(a7 - 64);
          v63 = *(unsigned __int8 **)(a7 - 32);
          v64 = *(unsigned __int8 **)(v61 - 64);
          v65 = *(unsigned __int8 **)(v61 - 32);
          if ((v62 != v64 || v63 != v65) && (v62 != v65 || v63 != v64))
            goto LABEL_182;
          v68 = *(_WORD *)(v61 + 18) & 0x3E;
          v69 = v62 == v64 ? v68 == 38 : v68 == 40;
          if (!v69 || a3 != (llvm *)v64)
            goto LABEL_182;
          if (!sub_1C4D89F84((uint64_t)&v320, v65))
            goto LABEL_182;
        }
        else
        {
          if (v58 != 84)
            goto LABEL_182;
          v59 = *(_QWORD *)(a7 - 32);
          if (!v59)
            goto LABEL_182;
          if (*(_BYTE *)(v59 + 16))
            goto LABEL_182;
          if (*(_QWORD *)(v59 + 24) != *(_QWORD *)(a7 + 72))
            goto LABEL_182;
          if ((*(_BYTE *)(v59 + 33) & 0x20) == 0)
            goto LABEL_182;
          if (*(_DWORD *)(v59 + 36) != 274)
            goto LABEL_182;
          v60 = a7 - 32 * (*(_DWORD *)(a7 + 20) & 0x7FFFFFF);
          if (a3 != *(llvm **)v60
            || (sub_1C4D89F84((uint64_t)&v320, *(unsigned __int8 **)(v60 + 32)) & 1) == 0)
          {
            goto LABEL_182;
          }
        }
        v133 = v330;
        v134 = *((unsigned int *)v325 + 2);
        if (v134 > 0x40)
        {
          v246 = (int)v17;
          v247 = v31;
          v248 = a3;
          v249 = a4;
          v250 = v30;
          v251 = *((_QWORD *)*v325 + ((v134 - 1) >> 6)) & (1 << (v134 - 1));
          v252 = *((_DWORD *)v330 + 2);
          v253 = v252 - 1;
          if (v252 >= 0x41)
            v133 = (llvm::APInt *)(*(_QWORD *)v330 + 8 * (v253 >> 6));
          if ((v251 != 0) == ((*(_QWORD *)v133 >> v253) & 1))
          {
            v264 = ((unint64_t)(v134 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              v30 = v250;
              a4 = v249;
              a3 = v248;
              v31 = v247;
              LODWORD(v17) = v246;
              if (!v264)
                goto LABEL_182;
              v265 = *(_QWORD *)((char *)*v325 + v264 - 8);
              v266 = *(_QWORD *)(*(_QWORD *)v330 - 8 + v264);
              v264 -= 8;
            }
            while (v265 == v266);
            v30 = v250;
            a4 = v249;
            a3 = v248;
            v31 = v247;
            LODWORD(v17) = v246;
            if (v265 <= v266)
              goto LABEL_182;
          }
          else if (v251)
          {
            goto LABEL_182;
          }
        }
        else if ((uint64_t)((_QWORD)*v325 << -(char)v134) >> -(char)v134 <= (uint64_t)(*(_QWORD *)v330 << -(char)v134) >> -(char)v134)
        {
          goto LABEL_182;
        }
        if ((_DWORD)a8 == 38)
        {
          v33 = 1;
          goto LABEL_533;
        }
LABEL_182:
        v319 = (llvm::APInt **)a3;
        v320 = &v330;
        v321 = 0;
        v71 = *(unsigned __int8 *)(a7 + 16);
        if (v71 == 85)
        {
          v74 = *(_QWORD *)(a7 - 96);
          if (!v74 || *(_BYTE *)(v74 + 16) != 81)
            goto LABEL_211;
          v75 = *(unsigned __int8 **)(a7 - 64);
          v76 = *(unsigned __int8 **)(a7 - 32);
          v77 = *(unsigned __int8 **)(v74 - 64);
          v78 = *(unsigned __int8 **)(v74 - 32);
          if ((v75 != v77 || v76 != v78) && (v75 != v78 || v76 != v77))
            goto LABEL_211;
          v81 = *(_WORD *)(v74 + 18) & 0x3E;
          v82 = v75 == v77 ? v81 == 36 : v81 == 34;
          if (!v82 || a3 != (llvm *)v77)
            goto LABEL_211;
          if (!sub_1C4D89F84((uint64_t)&v320, v78))
            goto LABEL_211;
        }
        else
        {
          if (v71 != 84)
            goto LABEL_211;
          v72 = *(_QWORD *)(a7 - 32);
          if (!v72)
            goto LABEL_211;
          if (*(_BYTE *)(v72 + 16))
            goto LABEL_211;
          if (*(_QWORD *)(v72 + 24) != *(_QWORD *)(a7 + 72))
            goto LABEL_211;
          if ((*(_BYTE *)(v72 + 33) & 0x20) == 0)
            goto LABEL_211;
          if (*(_DWORD *)(v72 + 36) != 306)
            goto LABEL_211;
          v73 = a7 - 32 * (*(_DWORD *)(a7 + 20) & 0x7FFFFFF);
          if (a3 != *(llvm **)v73
            || (sub_1C4D89F84((uint64_t)&v320, *(unsigned __int8 **)(v73 + 32)) & 1) == 0)
          {
            goto LABEL_211;
          }
        }
        v136 = *((unsigned int *)v325 + 2);
        if (v136 <= 0x40)
        {
          if ((unint64_t)*v325 >= *(_QWORD *)v330)
            goto LABEL_211;
        }
        else
        {
          v278 = (int)v17;
          v279 = v31;
          v280 = a3;
          v281 = a4;
          v282 = v30;
          v283 = ((unint64_t)(v136 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            v30 = v282;
            a4 = v281;
            a3 = v280;
            v31 = v279;
            LODWORD(v17) = v278;
            if (!v283)
              goto LABEL_211;
            v284 = *(_QWORD *)((char *)*v325 + v283 - 8);
            v285 = *(_QWORD *)(*(_QWORD *)v330 - 8 + v283);
            v283 -= 8;
          }
          while (v284 == v285);
          v30 = v282;
          a4 = v281;
          a3 = v280;
          v31 = v279;
          LODWORD(v17) = v278;
          if (v284 > v285)
            goto LABEL_211;
        }
        if ((_DWORD)a8 == 36)
        {
          v33 = 4;
          goto LABEL_533;
        }
LABEL_211:
        v319 = (llvm::APInt **)a3;
        v320 = &v330;
        v321 = 0;
        v84 = *(unsigned __int8 *)(a7 + 16);
        if (v84 == 85)
        {
          v87 = *(_QWORD *)(a7 - 96);
          if (!v87 || *(_BYTE *)(v87 + 16) != 81)
            goto LABEL_240;
          v88 = *(unsigned __int8 **)(a7 - 64);
          v89 = *(unsigned __int8 **)(a7 - 32);
          v90 = *(unsigned __int8 **)(v87 - 64);
          v91 = *(unsigned __int8 **)(v87 - 32);
          if ((v88 != v90 || v89 != v91) && (v88 != v91 || v89 != v90))
            goto LABEL_240;
          v94 = *(_WORD *)(v87 + 18) & 0x3E;
          v95 = v88 == v90 ? v94 == 34 : v94 == 36;
          if (!v95 || a3 != (llvm *)v90)
            goto LABEL_240;
          if (!sub_1C4D89F84((uint64_t)&v320, v91))
            goto LABEL_240;
        }
        else
        {
          if (v84 != 84)
            goto LABEL_240;
          v85 = *(_QWORD *)(a7 - 32);
          if (!v85)
            goto LABEL_240;
          if (*(_BYTE *)(v85 + 16))
            goto LABEL_240;
          if (*(_QWORD *)(v85 + 24) != *(_QWORD *)(a7 + 72))
            goto LABEL_240;
          if ((*(_BYTE *)(v85 + 33) & 0x20) == 0)
            goto LABEL_240;
          if (*(_DWORD *)(v85 + 36) != 305)
            goto LABEL_240;
          v86 = a7 - 32 * (*(_DWORD *)(a7 + 20) & 0x7FFFFFF);
          if (a3 != *(llvm **)v86
            || (sub_1C4D89F84((uint64_t)&v320, *(unsigned __int8 **)(v86 + 32)) & 1) == 0)
          {
            goto LABEL_240;
          }
        }
        v131 = *((unsigned int *)v325 + 2);
        if (v131 <= 0x40)
        {
          if ((unint64_t)*v325 > *(_QWORD *)v330)
            goto LABEL_349;
        }
        else
        {
          v270 = (int)v17;
          v271 = v31;
          v272 = a3;
          v273 = a4;
          v274 = v30;
          v275 = ((unint64_t)(v131 + 63) >> 3) & 0x3FFFFFF8;
          do
          {
            v30 = v274;
            a4 = v273;
            a3 = v272;
            v31 = v271;
            LODWORD(v17) = v270;
            if (!v275)
              goto LABEL_240;
            v276 = *(_QWORD *)((char *)*v325 + v275 - 8);
            v277 = *(_QWORD *)(*(_QWORD *)v330 - 8 + v275);
            v275 -= 8;
          }
          while (v276 == v277);
          v30 = v274;
          a4 = v273;
          a3 = v272;
          v31 = v271;
          LODWORD(v17) = v270;
          if (v276 > v277)
          {
LABEL_349:
            if ((_DWORD)a8 == 34)
            {
              v33 = 2;
              goto LABEL_533;
            }
          }
        }
LABEL_240:
        v330 = 0;
        v329 = 0;
        matched = llvm::matchSelectPattern(v31, &v330, &v329, 0, (a9 + 1));
        v98 = matched;
        if (matched <= 8 && ((1 << matched) & 0x181) != 0)
          goto LABEL_274;
        v327 = 0;
        v328 = 0;
        v99 = v30;
        if (matched != llvm::matchSelectPattern(v30, &v328, &v327, 0, (a9 + 1)))
        {
LABEL_273:
          v30 = v99;
          goto LABEL_274;
        }
        switch(v98)
        {
          case 1u:
            v100 = (v17 & 0xFFFFFFFE) == 38;
            goto LABEL_246;
          case 2u:
            if ((v17 & 0xFFFFFFFE) == 0x22)
              v101 = (llvm::APInt **)a3;
            else
              v101 = (llvm::APInt **)a4;
            if ((v17 & 0xFFFFFFFE) == 0x22)
              v102 = a4;
            else
              v102 = a3;
            v103 = (_DWORD)v17 - 34;
            goto LABEL_268;
          case 3u:
            v100 = (v17 & 0xFFFFFFFE) == 40;
LABEL_246:
            if (v100)
              v101 = (llvm::APInt **)a3;
            else
              v101 = (llvm::APInt **)a4;
            if (v100)
              v102 = a4;
            else
              v102 = a3;
            v103 = (_DWORD)v17 - 38;
LABEL_268:
            if (v103 < 4)
              goto LABEL_269;
            goto LABEL_273;
          case 4u:
            if ((v17 & 0xFFFFFFFE) == 0x24)
              v101 = (llvm::APInt **)a3;
            else
              v101 = (llvm::APInt **)a4;
            if ((v17 & 0xFFFFFFFE) == 0x24)
              v102 = a4;
            else
              v102 = a3;
            if (((_DWORD)v17 - 34) > 3)
              goto LABEL_273;
LABEL_269:
            v105 = v327;
            v104 = v328;
            v106 = v329;
            v107 = v330;
            if (v327 != v329)
              goto LABEL_270;
            if (v102 == v330 && v101 == (llvm::APInt **)v328)
              goto LABEL_336;
            v319 = (llvm::APInt **)v102;
            v113 = *(unsigned __int8 *)(v328 + 16);
            if (v113 == 5)
            {
              if (*(_WORD *)(v328 + 18) != 30)
                goto LABEL_270;
              v147 = *(_DWORD *)(v328 + 20) & 0x7FFFFFF;
              v148 = (llvm::APInt **)(v328 - 32 * v147);
              if (v102 == *v148)
              {
                v294 = v329;
                v310 = v101;
                v162 = sub_1C4D9EED4((uint64_t)&v320, v148[4]);
                v106 = v294;
                v101 = v310;
                if ((v162 & 1) != 0)
                  goto LABEL_398;
                v150 = v319;
                v149 = -(uint64_t)(*(_DWORD *)(v104 + 20) & 0x7FFFFFF);
              }
              else
              {
                v149 = -v147;
                v150 = v102;
              }
              v163 = v104 + 32 * v149;
              if (v150 != *(void **)(v163 + 32))
                goto LABEL_270;
              v295 = v106;
              v311 = v101;
              v164 = sub_1C4D9EED4((uint64_t)&v320, *(llvm::Constant **)v163);
              v106 = v295;
              v101 = v311;
              if (!v164)
                goto LABEL_270;
            }
            else
            {
              if (v113 != 58)
                goto LABEL_270;
              v114 = v102;
              if (v102 == *(llvm::APInt **)(v328 - 64))
              {
                v288 = v329;
                v304 = v101;
                v115 = sub_1C4D9ED34((uint64_t)&v320, *(llvm::Constant **)(v328 - 32));
                v106 = v288;
                v101 = v304;
                if ((v115 & 1) != 0)
                  goto LABEL_398;
                v114 = v319;
              }
              if (v114 != *(void **)(v104 - 32))
                goto LABEL_270;
              v289 = v106;
              v305 = v101;
              v116 = sub_1C4D9ED34((uint64_t)&v320, *(llvm::Constant **)(v104 - 64));
              v106 = v289;
              v101 = v305;
              if ((v116 & 1) == 0)
                goto LABEL_270;
            }
LABEL_398:
            v325 = v101;
            v165 = *((unsigned __int8 *)v107 + 16);
            if (v165 != 5)
            {
              if (v165 != 58)
                goto LABEL_270;
              v296 = v106;
              v312 = v101;
              v166 = v101;
              if (v101 == *((llvm::APInt ***)v107 - 8))
              {
                if ((sub_1C4D9ED34((uint64_t)&v326, *((llvm::Constant **)v107 - 4)) & 1) != 0)
                  goto LABEL_336;
                v166 = v325;
              }
              v106 = v296;
              v101 = v312;
              if (v166 != *((llvm::APInt ***)v107 - 4))
                goto LABEL_270;
              v167 = sub_1C4D9ED34((uint64_t)&v326, *((llvm::Constant **)v107 - 8));
              goto LABEL_539;
            }
            if (*((_WORD *)v107 + 9) == 30)
            {
              v296 = v106;
              v312 = v101;
              v168 = *((_DWORD *)v107 + 5) & 0x7FFFFFF;
              v169 = (llvm::Constant **)((char *)v107 - 32 * v168);
              if (v101 == (llvm::APInt **)*v169)
              {
                v240 = sub_1C4D9EED4((uint64_t)&v326, v169[4]);
                if ((v240 & 1) != 0)
                  goto LABEL_336;
                v171 = v325;
                v170 = -(uint64_t)(*((_DWORD *)v107 + 5) & 0x7FFFFFF);
              }
              else
              {
                v170 = -v168;
                v171 = v101;
              }
              v241 = (llvm::APInt ***)((char *)v107 + 32 * v170);
              v106 = v296;
              v101 = v312;
              if (v171 == v241[4])
              {
                v167 = sub_1C4D9EED4((uint64_t)&v326, (llvm::Constant *)*v241);
LABEL_539:
                v106 = v296;
                v101 = v312;
                if ((v167 & 1) != 0)
                  goto LABEL_336;
              }
            }
LABEL_270:
            if ((llvm::APInt *)v104 != v106)
              goto LABEL_271;
            if (v102 == v107 && v101 == (llvm::APInt **)v105)
              goto LABEL_336;
            v319 = (llvm::APInt **)v102;
            v120 = *((unsigned __int8 *)v105 + 16);
            if (v120 == 5)
            {
              if (*((_WORD *)v105 + 9) != 30)
                goto LABEL_271;
              v151 = *((_DWORD *)v105 + 5) & 0x7FFFFFF;
              v152 = (llvm::APInt **)((char *)v105 - 32 * v151);
              if (v102 == *v152)
              {
                v297 = v106;
                v313 = v101;
                v172 = sub_1C4D9EED4((uint64_t)&v320, v152[4]);
                v106 = v297;
                v101 = v313;
                if ((v172 & 1) != 0)
                  goto LABEL_413;
                v154 = v319;
                v153 = -(uint64_t)(*((_DWORD *)v105 + 5) & 0x7FFFFFF);
              }
              else
              {
                v153 = -v151;
                v154 = v102;
              }
              v173 = (void **)((char *)v105 + 32 * v153);
              if (v154 != v173[4])
                goto LABEL_271;
              v298 = v106;
              v314 = v101;
              v174 = sub_1C4D9EED4((uint64_t)&v320, (llvm::Constant *)*v173);
              v106 = v298;
              v101 = v314;
              if (!v174)
                goto LABEL_271;
            }
            else
            {
              if (v120 != 58)
                goto LABEL_271;
              v121 = v102;
              if (v102 == *((llvm::APInt **)v105 - 8))
              {
                v290 = v106;
                v306 = v101;
                v122 = sub_1C4D9ED34((uint64_t)&v320, *((llvm::Constant **)v105 - 4));
                v106 = v290;
                v101 = v306;
                if ((v122 & 1) != 0)
                  goto LABEL_413;
                v121 = v319;
              }
              if (v121 != *((void **)v105 - 4))
                goto LABEL_271;
              v291 = v106;
              v307 = v101;
              v123 = sub_1C4D9ED34((uint64_t)&v320, *((llvm::Constant **)v105 - 8));
              v106 = v291;
              v101 = v307;
              if ((v123 & 1) == 0)
                goto LABEL_271;
            }
LABEL_413:
            v325 = v101;
            v175 = *((unsigned __int8 *)v107 + 16);
            if (v175 == 5)
            {
              if (*((_WORD *)v107 + 9) != 30)
                goto LABEL_271;
              v299 = v106;
              v315 = v101;
              v178 = *((_DWORD *)v107 + 5) & 0x7FFFFFF;
              v179 = (llvm::Constant **)((char *)v107 - 32 * v178);
              if (v101 == (llvm::APInt **)*v179)
              {
                v242 = sub_1C4D9EED4((uint64_t)&v326, v179[4]);
                if ((v242 & 1) != 0)
                  goto LABEL_336;
                v181 = v325;
                v180 = -(uint64_t)(*((_DWORD *)v107 + 5) & 0x7FFFFFF);
              }
              else
              {
                v180 = -v178;
                v181 = v101;
              }
              v243 = (llvm::APInt ***)((char *)v107 + 32 * v180);
              v106 = v299;
              v101 = v315;
              if (v181 != v243[4])
              {
LABEL_271:
                if (v105 != v107)
                  goto LABEL_272;
                if (v102 == v106 && v101 == (llvm::APInt **)v104)
                  goto LABEL_336;
                v319 = (llvm::APInt **)v102;
                v124 = *(unsigned __int8 *)(v104 + 16);
                if (v124 == 5)
                {
                  if (*(_WORD *)(v104 + 18) != 30)
                    goto LABEL_272;
                  v155 = *(_DWORD *)(v104 + 20) & 0x7FFFFFF;
                  v156 = (llvm::APInt **)(v104 - 32 * v155);
                  if (v102 == *v156)
                  {
                    v300 = v106;
                    v316 = v101;
                    v182 = sub_1C4D9EED4((uint64_t)&v320, v156[4]);
                    v106 = v300;
                    v101 = v316;
                    if ((v182 & 1) != 0)
                      goto LABEL_428;
                    v158 = v319;
                    v157 = -(uint64_t)(*(_DWORD *)(v104 + 20) & 0x7FFFFFF);
                  }
                  else
                  {
                    v157 = -v155;
                    v158 = v102;
                  }
                  v183 = v104 + 32 * v157;
                  if (v158 != *(void **)(v183 + 32))
                    goto LABEL_272;
                  v301 = v106;
                  v317 = v101;
                  v184 = sub_1C4D9EED4((uint64_t)&v320, *(llvm::Constant **)v183);
                  v106 = v301;
                  v101 = v317;
                  if (!v184)
                    goto LABEL_272;
                }
                else
                {
                  if (v124 != 58)
                    goto LABEL_272;
                  v125 = v102;
                  if (v102 == *(llvm::APInt **)(v104 - 64))
                  {
                    v292 = v106;
                    v308 = v101;
                    v126 = sub_1C4D9ED34((uint64_t)&v320, *(llvm::Constant **)(v104 - 32));
                    v106 = v292;
                    v101 = v308;
                    if ((v126 & 1) != 0)
                      goto LABEL_428;
                    v125 = v319;
                  }
                  if (v125 != *(void **)(v104 - 32))
                    goto LABEL_272;
                  v293 = v106;
                  v309 = v101;
                  v127 = sub_1C4D9ED34((uint64_t)&v320, *(llvm::Constant **)(v104 - 64));
                  v106 = v293;
                  v101 = v309;
                  if ((v127 & 1) == 0)
                    goto LABEL_272;
                }
LABEL_428:
                v325 = v101;
                v185 = *((unsigned __int8 *)v106 + 16);
                if (v185 == 5)
                {
                  if (*((_WORD *)v106 + 9) != 30)
                    goto LABEL_272;
                  v188 = *((_DWORD *)v106 + 5) & 0x7FFFFFF;
                  v302 = v106;
                  v318 = v101;
                  v189 = (llvm::Constant **)((char *)v106 - 32 * v188);
                  if (v101 == (llvm::APInt **)*v189)
                  {
                    v244 = sub_1C4D9EED4((uint64_t)&v326, v189[4]);
                    if ((v244 & 1) != 0)
                      goto LABEL_336;
                    v191 = v325;
                    v190 = -(uint64_t)(*((_DWORD *)v302 + 5) & 0x7FFFFFF);
                  }
                  else
                  {
                    v190 = -v188;
                    v191 = v101;
                  }
                  v106 = v302;
                  v101 = v318;
                  v245 = (llvm::APInt ***)((char *)v302 + 32 * v190);
                  if (v191 != v245[4])
                  {
LABEL_272:
                    if ((llvm::APInt *)v104 != v107)
                      goto LABEL_273;
                    if (v102 == v106 && v101 == (llvm::APInt **)v105)
                    {
LABEL_336:
                      v33 = v98;
                      v30 = v99;
                      if (v98)
                        goto LABEL_533;
LABEL_274:
                      if (sub_1C4FA3AA0((unsigned __int8 *)v31) == (llvm::Value **)a3
                        && sub_1C4FA3AA0((unsigned __int8 *)v30) == (llvm::Value **)a4)
                      {
                        v108 = (_DWORD)v17 - 34;
                        if (((_DWORD)v17 - 34) < 7 && ((0x55u >> v108) & 1) != 0)
                        {
                          v32 = 0;
                          v33 = qword_1C85F6DE8[v108];
                          return v33 | (v32 << 32);
                        }
                      }
                      if (sub_1C4FA3AA0((unsigned __int8 *)v30) == (llvm::Value **)a3
                        && sub_1C4FA3AA0((unsigned __int8 *)v31) == (llvm::Value **)a4)
                      {
                        if (((_DWORD)v17 - 34) < 7)
                        {
                          v32 = 0;
                          v33 = qword_1C85F6E20[(int)v17 - 34];
                          return v33 | (v32 << 32);
                        }
                        goto LABEL_532;
                      }
                      if ((_DWORD)v17 == 40 || (_DWORD)v17 == 38)
                      {
                        v330 = 0;
                        v319 = &v330;
                        v320 = 0;
                        v109 = sub_1C4D89F84((uint64_t)&v319, (unsigned __int8 *)a4);
                        v33 = 0;
                        if (!v109)
                          goto LABEL_533;
                        v329 = 0;
                        if (a3 != v31
                          || (v319 = &v329,
                              v320 = 0,
                              (sub_1C4D89F84((uint64_t)&v319, (unsigned __int8 *)v30) & 1) == 0))
                        {
                          if (a3 != (llvm *)v30)
                            goto LABEL_532;
                          v325 = &v329;
                          v326 = 0;
                          v110 = sub_1C4D89F84((uint64_t)&v325, (unsigned __int8 *)v31);
                          v33 = 0;
                          if ((v110 & 1) == 0)
                            goto LABEL_533;
                        }
                        if ((_DWORD)v17 == 38)
                        {
                          v112 = *((_DWORD *)v330 + 2);
                          if (v112)
                          {
                            if (v112 <= 0x40)
                            {
                              v33 = 0;
                              if (*(_QWORD *)v330 != 0xFFFFFFFFFFFFFFFFLL >> -(char)v112)
                                goto LABEL_533;
                            }
                            else
                            {
                              v128 = llvm::APInt::countTrailingOnesSlowCase(v330);
                              if (v128 != v112)
                                goto LABEL_532;
                            }
                          }
                          v129 = *((_DWORD *)v329 + 2);
                          if (v129 > 0x40)
                          {
                            if (((*(_QWORD *)(*(_QWORD *)v329 + 8 * ((v129 - 1) >> 6)) >> (v129 - 1)) & 1) == 0
                              || llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v329) != v129 - 1)
                            {
                              goto LABEL_532;
                            }
                          }
                          else if (*(_QWORD *)v329 != 1 << (v129 - 1))
                          {
                            goto LABEL_532;
                          }
                          v119 = a3 == (llvm *)v30;
                        }
                        else
                        {
                          v111 = *((_DWORD *)v330 + 2);
                          if (v111 <= 0x40)
                          {
                            if (*(_QWORD *)v330)
                              goto LABEL_532;
                          }
                          else
                          {
                            v117 = llvm::APInt::countLeadingZerosSlowCase(v330);
                            if (v117 != v111)
                              goto LABEL_532;
                          }
                          v118 = *((_DWORD *)v329 + 2);
                          if (v118 > 0x40)
                          {
                            if (((*(_QWORD *)(*(_QWORD *)v329 + 8 * ((v118 - 1) >> 6)) >> (v118 - 1)) & 1) != 0
                              || llvm::APInt::countTrailingOnesSlowCase(v329) != v118 - 1)
                            {
                              goto LABEL_532;
                            }
                          }
                          else if (*(_QWORD *)v329 != ~(-1 << (v118 - 1)))
                          {
                            goto LABEL_532;
                          }
                          v119 = a3 == v31;
                        }
                        v33 = 2;
                        if (v119)
                          v33 = 4;
                        goto LABEL_533;
                      }
LABEL_532:
                      v33 = 0;
                      goto LABEL_533;
                    }
                    v319 = (llvm::APInt **)v102;
                    v137 = *((unsigned __int8 *)v105 + 16);
                    if (v137 == 5)
                    {
                      if (*((_WORD *)v105 + 9) != 30)
                        goto LABEL_273;
                      v159 = *((_DWORD *)v105 + 5) & 0x7FFFFFF;
                      v160 = (llvm::APInt **)((char *)v105 - 32 * v159);
                      if (v102 == *v160)
                      {
                        v192 = v101;
                        v193 = v106;
                        v194 = sub_1C4D9EED4((uint64_t)&v320, v160[4]);
                        v106 = v193;
                        v101 = v192;
                        if ((v194 & 1) != 0)
                          goto LABEL_444;
                        v102 = (llvm::APInt *)v319;
                        v161 = -(uint64_t)(*((_DWORD *)v105 + 5) & 0x7FFFFFF);
                      }
                      else
                      {
                        v161 = -v159;
                      }
                      v195 = (llvm::Constant **)((char *)v105 + 32 * v161);
                      if (v102 != v195[4])
                        goto LABEL_273;
                      v196 = v101;
                      v197 = v106;
                      v198 = sub_1C4D9EED4((uint64_t)&v320, *v195);
                      v106 = v197;
                      v101 = v196;
                      if (!v198)
                        goto LABEL_273;
                    }
                    else
                    {
                      if (v137 != 58)
                        goto LABEL_273;
                      if (v102 == *((llvm::APInt **)v105 - 8))
                      {
                        v138 = v101;
                        v139 = v106;
                        v140 = sub_1C4D9ED34((uint64_t)&v320, *((llvm::Constant **)v105 - 4));
                        v106 = v139;
                        v101 = v138;
                        if ((v140 & 1) != 0)
                          goto LABEL_444;
                        v102 = (llvm::APInt *)v319;
                      }
                      if (v102 != *((llvm::APInt **)v105 - 4))
                        goto LABEL_273;
                      v141 = v101;
                      v142 = v106;
                      v143 = sub_1C4D9ED34((uint64_t)&v320, *((llvm::Constant **)v105 - 8));
                      v106 = v142;
                      v101 = v141;
                      if ((v143 & 1) == 0)
                        goto LABEL_273;
                    }
LABEL_444:
                    v325 = v101;
                    v199 = *((unsigned __int8 *)v106 + 16);
                    if (v199 == 5)
                    {
                      if (*((_WORD *)v106 + 9) != 30)
                        goto LABEL_273;
                      v202 = *((_DWORD *)v106 + 5) & 0x7FFFFFF;
                      v203 = v106;
                      v204 = (llvm::Constant **)((char *)v106 - 32 * v202);
                      if (v101 == (llvm::APInt **)*v204)
                      {
                        v262 = sub_1C4D9EED4((uint64_t)&v326, v204[4]);
                        if ((v262 & 1) != 0)
                          goto LABEL_336;
                        v205 = v325;
                        v206 = -(uint64_t)(*((_DWORD *)v203 + 5) & 0x7FFFFFF);
                      }
                      else
                      {
                        v205 = v101;
                        v206 = -v202;
                      }
                      v263 = (llvm::APInt ***)((char *)v203 + 32 * v206);
                      if (v205 != v263[4] || (sub_1C4D9EED4((uint64_t)&v326, (llvm::Constant *)*v263) & 1) == 0)
                        goto LABEL_273;
                    }
                    else
                    {
                      if (v199 != 58)
                        goto LABEL_273;
                      v200 = v106;
                      v201 = v101;
                      if (v101 == *((llvm::APInt ***)v106 - 8))
                      {
                        if ((sub_1C4D9ED34((uint64_t)&v326, *((llvm::Constant **)v106 - 4)) & 1) != 0)
                          goto LABEL_336;
                        v201 = v325;
                      }
                      if (v201 != *((llvm::APInt ***)v200 - 4)
                        || (sub_1C4D9ED34((uint64_t)&v326, *((llvm::Constant **)v200 - 8)) & 1) == 0)
                      {
                        goto LABEL_273;
                      }
                    }
                    goto LABEL_336;
                  }
                  v187 = sub_1C4D9EED4((uint64_t)&v326, (llvm::Constant *)*v245);
                }
                else
                {
                  if (v185 != 58)
                    goto LABEL_272;
                  v302 = v106;
                  v318 = v101;
                  v186 = v101;
                  if (v101 == *((llvm::APInt ***)v106 - 8))
                  {
                    if ((sub_1C4D9ED34((uint64_t)&v326, *((llvm::Constant **)v106 - 4)) & 1) != 0)
                      goto LABEL_336;
                    v186 = v325;
                  }
                  v106 = v302;
                  v101 = v318;
                  if (v186 != *((llvm::APInt ***)v302 - 4))
                    goto LABEL_272;
                  v187 = sub_1C4D9ED34((uint64_t)&v326, *((llvm::Constant **)v302 - 8));
                }
                v106 = v302;
                v101 = v318;
                if ((v187 & 1) != 0)
                  goto LABEL_336;
                goto LABEL_272;
              }
              v177 = sub_1C4D9EED4((uint64_t)&v326, (llvm::Constant *)*v243);
            }
            else
            {
              if (v175 != 58)
                goto LABEL_271;
              v299 = v106;
              v315 = v101;
              v176 = v101;
              if (v101 == *((llvm::APInt ***)v107 - 8))
              {
                if ((sub_1C4D9ED34((uint64_t)&v326, *((llvm::Constant **)v107 - 4)) & 1) != 0)
                  goto LABEL_336;
                v176 = v325;
              }
              v106 = v299;
              v101 = v315;
              if (v176 != *((llvm::APInt ***)v107 - 4))
                goto LABEL_271;
              v177 = sub_1C4D9ED34((uint64_t)&v326, *((llvm::Constant **)v107 - 8));
            }
            v106 = v299;
            v101 = v315;
            if ((v177 & 1) != 0)
              goto LABEL_336;
            goto LABEL_271;
          default:
            goto LABEL_273;
        }
      }
      if (v319 != (llvm::APInt **)v30 && !sub_1C4FA3A38(&v320, v30))
        goto LABEL_104;
      *(_QWORD *)a7 = v30;
      *a8 = v31;
      v326 = (uint64_t)v31;
      v36 = *((unsigned __int8 *)a3 + 16);
      if (v36 == 5)
      {
        if (*((_WORD *)a3 + 9) == 15
          && sub_1C4E71060((uint64_t)&v325, *((llvm::Constant **)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))))
        {
          v37 = ((_QWORD *)a3 - 4 * (*((_DWORD *)a3 + 5) & 0x7FFFFFF))[4];
LABEL_92:
          if (v326 == v37)
          {
            v44 = *(_QWORD *)a7;
            *(_QWORD *)a7 = *a8;
            *a8 = v44;
          }
        }
      }
      else if (v36 == 43 && sub_1C4D8AC3C((uint64_t)&v325, *((llvm::Constant **)a3 - 8)))
      {
        v37 = *((_QWORD *)a3 - 4);
        goto LABEL_92;
      }
      if ((_DWORD)v17 == 40)
      {
        v45 = sub_1C4D8AC3C((uint64_t)&v329, a4);
        if ((v45 & 1) == 0 && !sub_1C4D89CC8((uint64_t)&v329 + 1, a4))
          goto LABEL_104;
        goto LABEL_103;
      }
      if ((_DWORD)v17 == 38)
      {
        v39 = a4;
        if ((sub_1C4D8AC3C((uint64_t)&v330, a4) & 1) != 0)
        {
LABEL_100:
          v33 = 8;
LABEL_533:
          v32 = 0;
          return v33 | (v32 << 32);
        }
        v43 = sub_1C4D9ED34((uint64_t)&v330 + 1, a4);
        goto LABEL_99;
      }
      goto LABEL_104;
    }
    break;
  }
  v32 = 0;
  v33 = 0;
  switch((int)v17)
  {
    case 2:
    case 3:
    case 10:
    case 11:
      v33 = 6;
      goto LABEL_60;
    case 4:
    case 5:
    case 12:
    case 13:
      v33 = 5;
LABEL_60:
      v32 = v29;
      break;
    case 34:
    case 35:
      v32 = 0;
      v33 = 4;
      break;
    case 36:
    case 37:
      v32 = 0;
      v33 = 2;
      break;
    case 38:
    case 39:
      v32 = 0;
      v33 = 3;
      break;
    case 40:
    case 41:
      v32 = 0;
      v33 = 1;
      break;
    default:
      return v33 | (v32 << 32);
  }
  return v33 | (v32 << 32);
}

uint64_t llvm::getMinMaxPred(int a1, int a2)
{
  uint64_t result;
  int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;

  if (a1 == 2)
    return 36;
  v3 = a1 - 1;
  result = 40;
  switch(v3)
  {
    case 0:
      return result;
    case 2:
      result = 38;
      break;
    case 3:
      result = 34;
      break;
    case 4:
      v4 = a2 == 0;
      v5 = 12;
      v6 = 4;
      goto LABEL_7;
    default:
      v4 = a2 == 0;
      v5 = 10;
      v6 = 2;
LABEL_7:
      if (v4)
        result = v5;
      else
        result = v6;
      break;
  }
  return result;
}

uint64_t llvm::getInverseMinMaxFlavor(int a1)
{
  if ((a1 - 1) > 2)
    return 2;
  else
    return dword_1C85F6E64[a1 - 1];
}

uint64_t llvm::getInverseMinMaxIntrinsic(llvm *this)
{
  int v1;
  unsigned int v2;

  if ((_DWORD)this == 275)
    v1 = 274;
  else
    v1 = 306;
  if ((_DWORD)this == 274)
    v2 = 275;
  else
    v2 = v1;
  if ((_DWORD)this == 306)
    return 305;
  else
    return v2;
}

uint64_t llvm::getInverseMinMaxPred(int a1)
{
  if ((a1 - 1) > 2)
    return 36;
  else
    return dword_1C85F6E58[a1 - 1];
}

void llvm::getMinMaxLimit(int a1@<W0>, unsigned int a2@<W1>, llvm::APInt *a3@<X8>)
{
  unint64_t v3;
  unsigned int v4;
  unint64_t v5;
  llvm::APInt *v6;
  uint64_t v7;
  int v8;
  llvm::APInt *v10;
  llvm::APInt *v12;

  switch(a1)
  {
    case 4:
      *((_DWORD *)a3 + 2) = a2;
      if (a2 <= 0x40)
      {
        v3 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
        if (!a2)
          v3 = 0;
LABEL_5:
        *(_QWORD *)a3 = v3;
        return;
      }
      v6 = a3;
      v7 = -1;
      v8 = 1;
      break;
    case 1:
      *((_DWORD *)a3 + 2) = a2;
      if (a2 > 0x40)
      {
        v10 = a3;
        llvm::APInt::initSlowCase(a3, 0, 0);
        a3 = v10;
        v4 = a2 - 1;
        if (*((_DWORD *)v10 + 2) >= 0x41u)
          a3 = (llvm::APInt *)(*(_QWORD *)v10 + 8 * (v4 >> 6));
      }
      else
      {
        *(_QWORD *)a3 = 0;
        LOBYTE(v4) = a2 - 1;
      }
      v3 = (1 << v4) | *(_QWORD *)a3;
      goto LABEL_5;
    case 3:
      *((_DWORD *)a3 + 2) = a2;
      if (a2 > 0x40)
      {
        v12 = a3;
        llvm::APInt::initSlowCase(a3, -1, 1);
        a3 = v12;
        LODWORD(v5) = a2 - 1;
        if (*((_DWORD *)v12 + 2) >= 0x41u)
          a3 = (llvm::APInt *)(*(_QWORD *)v12 + 8 * (v5 >> 6));
      }
      else
      {
        v5 = 0xFFFFFFFFFFFFFFFFLL >> -(char)a2;
        if (!a2)
          v5 = 0;
        *(_QWORD *)a3 = v5;
        LOBYTE(v5) = a2 - 1;
      }
      v3 = *(_QWORD *)a3 & ~(1 << v5);
      goto LABEL_5;
    default:
      *((_DWORD *)a3 + 2) = a2;
      if (a2 <= 0x40)
      {
        *(_QWORD *)a3 = 0;
        return;
      }
      v6 = a3;
      v7 = 0;
      v8 = 0;
      break;
  }
  llvm::APInt::initSlowCase(v6, v7, v8);
}

uint64_t llvm::canConvertToMinOrMaxIntrinsic(uint64_t *a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unsigned int matched;
  BOOL v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  v3 = 0;
  v4 = 8 * a2;
  v5 = 1;
  while (1)
  {
    v6 = *a1;
    v14 = 0;
    v15 = 0;
    matched = llvm::matchSelectPattern(v6, (uint64_t)&v15, &v14, 0, 0);
    v8 = matched > 8 || ((1 << matched) & 0x181) == 0;
    if (!v8 || matched - 7 > 0xFFFFFFFD)
      break;
    v9 = (*(_DWORD *)(*(_QWORD *)v6 + 8) & 0xFE) == 0x12
       ? *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v6 + 16) + 8)
       : *(_DWORD *)(*(_QWORD *)v6 + 8);
    if (v9 != 13 || v3 && v3 != matched)
      break;
    if (*(_BYTE *)(v6 + 16) == 85)
    {
      v10 = *(_DWORD *)(v6 + 20);
      if ((v10 & 0x40000000) != 0)
        v11 = *(_QWORD *)(v6 - 8);
      else
        v11 = v6 - 32 * (v10 & 0x7FFFFFF);
      v12 = *(_QWORD *)(*(_QWORD *)v11 + 8);
      if (v12)
        LOBYTE(v12) = *(_QWORD *)(v12 + 8) == 0;
    }
    else
    {
      LOBYTE(v12) = 0;
    }
    if (v5)
      v5 = v12;
    else
      v5 = 0;
    ++a1;
    v3 = matched;
    v4 -= 8;
    if (!v4)
      __asm { BR              X11 }
  }
  return 0;
}

void sub_1C4F8FD08()
{
  JUMPOUT(0x1C4F8FCE8);
}

void sub_1C4F8FD10()
{
  JUMPOUT(0x1C4F8FCE8);
}

uint64_t llvm::matchSimpleRecurrence(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  int v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  int v16;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v4 = *(_DWORD *)(a1 + 20);
  if ((v4 & 0x7FFFFFF) != 2)
    return 0;
  v5 = 0;
  v6 = 0;
  v7 = 1;
  while (1)
  {
    v8 = v5;
    v9 = a1 - 64;
    if ((v4 & 0x40000000) != 0)
      v9 = *(_QWORD *)(a1 - 8);
    v10 = *(_QWORD *)(v9 + 32 * v6);
    v11 = *(unsigned __int8 *)(v10 + 16);
    v12 = v11 - 28;
    v13 = v11 >= 0x1C || v11 == 5;
    v14 = !v13;
    if (v10 && !v14)
    {
      if (v11 <= 0x1B)
        v12 = *(unsigned __int16 *)(v10 + 18);
      v15 = v12 > 0x1D;
      v16 = (1 << v12) & 0x3E06A000;
      if (!v15 && v16 != 0)
      {
        v18 = *(_DWORD *)(v10 + 20);
        if ((v18 & 0x40000000) != 0)
          v19 = *(uint64_t **)(v10 - 8);
        else
          v19 = (uint64_t *)(v10 - 32 * (v18 & 0x7FFFFFF));
        v20 = *v19;
        v21 = v19[4];
        if (v20 == a1)
          goto LABEL_27;
        if (v21 == a1)
          break;
      }
    }
    v7 = 0;
    v5 = 1;
    v6 = 1;
    if ((v8 & 1) != 0)
      return 0;
  }
  v21 = v20;
LABEL_27:
  v23 = *(_QWORD *)(v9 + 32 * v7);
  *a2 = v10;
  *a3 = v23;
  *a4 = v21;
  return 1;
}

uint64_t llvm::matchSimpleRecurrence(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v9 = 0;
  v5 = *(_QWORD *)(a1 - 64);
  if (*(_BYTE *)(v5 + 16) == 83)
    v6 = v5;
  else
    v6 = 0;
  *a2 = v6;
  if (!v6)
  {
    v5 = *(_QWORD *)(a1 - 32);
    v7 = *(_BYTE *)(v5 + 16) == 83 ? *(_QWORD *)(a1 - 32) : 0;
    *a2 = v7;
    if (!v7)
      return 0;
  }
  result = llvm::matchSimpleRecurrence(v5, &v9, a3, a4);
  if ((_DWORD)result)
    return v9 == a1;
  return result;
}

uint64_t llvm::isImpliedCondition(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, const llvm::DataLayout *a5, uint64_t a6, int a7)
{
  uint64_t v7;
  uint64_t v8;
  int isImpliedFalseByMatchingCmp;
  __int16 isImpliedCondition;
  uint64_t v12;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v24;
  unsigned int v27;
  BOOL v28;
  int v29;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  _QWORD *v37;
  int v38;
  int64_t v39;
  unint64_t v40;
  int v41;
  _QWORD *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int64_t v52;
  unint64_t v53;
  int v54;
  void *v55;
  unsigned int v56;
  void *v57;
  unsigned int v58;
  void *__s1;
  unsigned int v60;
  void *__s2;
  unsigned int v62;
  void **p_s1;
  void **v64;
  uint64_t v65;
  unsigned int v66;
  void **v67;
  void **v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;

  if (a7 == 6)
  {
    isImpliedFalseByMatchingCmp = 0;
    LOBYTE(isImpliedCondition) = 0;
    return isImpliedCondition | (isImpliedFalseByMatchingCmp << 8);
  }
  v71 = v7;
  v72 = v8;
  v12 = a2;
  if ((*(_DWORD *)(*(_QWORD *)a3 + 8) & 0xFE) == 0x12 || (*(_DWORD *)(*a1 + 8) & 0xFE) == 18)
    goto LABEL_8;
  v19 = *((unsigned __int8 *)a1 + 16);
  if (v19 == 81)
  {
    v20 = *(a1 - 8);
    v21 = *(a1 - 4);
    v22 = *((_WORD *)a1 + 9) & 0x3FLL;
    if ((a6 & 1) == 0)
      v22 = dword_1C85F6F18[v22];
    v24 = v20 == a4 && v21 == a3;
    if (v21 == a4 && v20 == a3 || v24)
    {
      if (v24)
        LODWORD(v12) = dword_1C85F6E70[(int)a2];
      if ((llvm::CmpInst::isImpliedTrueByMatchingCmp(v22, v12) & 1) != 0)
        goto LABEL_30;
      isImpliedFalseByMatchingCmp = llvm::CmpInst::isImpliedFalseByMatchingCmp(v22, v12);
LABEL_9:
      LOBYTE(isImpliedCondition) = 0;
      return isImpliedCondition | (isImpliedFalseByMatchingCmp << 8);
    }
    if (v20 == a3 && *(_BYTE *)(v21 + 16) == 16 && *(_BYTE *)(a4 + 16) == 16)
    {
      llvm::ConstantRange::makeExactICmpRegion(&v67, v22, v21 + 24);
      llvm::ConstantRange::makeExactICmpRegion(&p_s1, v12, a4 + 24);
      llvm::ConstantRange::intersectWith((uint64_t)&v67, (llvm::ConstantRange *)&p_s1, 0, (uint64_t)&__s1);
      llvm::ConstantRange::difference((llvm::ConstantRange *)&v67, (const llvm::ConstantRange *)&p_s1, (uint64_t)&v55);
      v31 = v60;
      if (v60 >= 0x41)
      {
        v37 = __s1;
        if (memcmp(__s1, __s2, (((unint64_t)v60 + 63) >> 3) & 0x3FFFFFF8))
          goto LABEL_44;
        v38 = 0;
        v39 = (unint64_t)(v31 + 63) >> 6;
        do
        {
          v28 = v39-- < 1;
          if (v28)
            break;
          v40 = v37[v39];
          v38 += __clz(v40);
        }
        while (!v40);
        v41 = v31 | 0xFFFFFFC0;
        if ((v31 & 0x3F) == 0)
          v41 = 0;
        if (v38 + v41 != (_DWORD)v31)
        {
LABEL_44:
          v32 = v56;
          if (v56 > 0x40)
          {
            v42 = v55;
            if (memcmp(v55, v57, (((unint64_t)v56 + 63) >> 3) & 0x3FFFFFF8))
            {
              v34 = 0;
LABEL_49:
              isImpliedFalseByMatchingCmp = v34;
              goto LABEL_74;
            }
            v51 = 0;
            v52 = (unint64_t)(v32 + 63) >> 6;
            do
            {
              v28 = v52-- < 1;
              if (v28)
                break;
              v53 = v42[v52];
              v51 += __clz(v53);
            }
            while (!v53);
            v54 = v32 | 0xFFFFFFC0;
            if ((v32 & 0x3F) == 0)
              v54 = 0;
            v33 = v51 + v54 == (_DWORD)v32;
          }
          else
          {
            v33 = ((unint64_t)v57 | (unint64_t)v55) == 0;
          }
          v34 = v33;
          goto LABEL_49;
        }
      }
      else if ((unint64_t)__s2 | (unint64_t)__s1)
      {
        goto LABEL_44;
      }
      LOBYTE(v34) = 0;
      isImpliedFalseByMatchingCmp = 1;
LABEL_74:
      if (v58 >= 0x41 && v57)
      {
        v43 = isImpliedFalseByMatchingCmp;
        MEMORY[0x1CAA32F9C](v57, 0x1000C8000313F17);
        isImpliedFalseByMatchingCmp = v43;
      }
      if (v56 >= 0x41 && v55)
      {
        v44 = isImpliedFalseByMatchingCmp;
        MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
        isImpliedFalseByMatchingCmp = v44;
      }
      if (v62 >= 0x41 && __s2)
      {
        v45 = isImpliedFalseByMatchingCmp;
        MEMORY[0x1CAA32F9C](__s2, 0x1000C8000313F17);
        isImpliedFalseByMatchingCmp = v45;
      }
      if (v60 >= 0x41 && __s1)
      {
        v46 = isImpliedFalseByMatchingCmp;
        MEMORY[0x1CAA32F9C](__s1, 0x1000C8000313F17);
        isImpliedFalseByMatchingCmp = v46;
      }
      if (v66 >= 0x41 && v65)
      {
        v47 = isImpliedFalseByMatchingCmp;
        MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
        isImpliedFalseByMatchingCmp = v47;
      }
      if (v64 >= 0x41 && p_s1)
      {
        v48 = isImpliedFalseByMatchingCmp;
        MEMORY[0x1CAA32F9C](p_s1, 0x1000C8000313F17);
        isImpliedFalseByMatchingCmp = v48;
      }
      if (v70 >= 0x41 && v69)
      {
        v49 = isImpliedFalseByMatchingCmp;
        MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
        isImpliedFalseByMatchingCmp = v49;
      }
      if (v68 >= 0x41 && v67)
      {
        v50 = isImpliedFalseByMatchingCmp;
        MEMORY[0x1CAA32F9C](v67, 0x1000C8000313F17);
        isImpliedFalseByMatchingCmp = v50;
      }
      if (isImpliedFalseByMatchingCmp)
        LOBYTE(isImpliedCondition) = v34;
      else
        LOBYTE(isImpliedCondition) = 0;
      return isImpliedCondition | (isImpliedFalseByMatchingCmp << 8);
    }
    if ((_DWORD)v22 == (_DWORD)a2)
    {
      if ((a2 - 36) < 2)
      {
        if (sub_1C4FA3BD8(0x25u, a3, v20, a5, a7))
        {
          v35 = 37;
LABEL_64:
          if ((sub_1C4FA3BD8(v35, v21, a4, a5, a7) & 1) != 0)
          {
LABEL_30:
            isImpliedFalseByMatchingCmp = 1;
            LOBYTE(isImpliedCondition) = 1;
            return isImpliedCondition | (isImpliedFalseByMatchingCmp << 8);
          }
        }
      }
      else if ((a2 - 40) <= 1 && sub_1C4FA3BD8(0x29u, a3, v20, a5, a7))
      {
        v35 = 41;
        goto LABEL_64;
      }
    }
LABEL_8:
    isImpliedFalseByMatchingCmp = 0;
    goto LABEL_9;
  }
  if (v19 < 0x1C)
    goto LABEL_8;
  v27 = v19 - 56;
  v28 = v27 > 0x1D;
  v29 = (1 << v27) & 0x20000003;
  if (v28 || v29 == 0)
    goto LABEL_8;
  __s1 = 0;
  v55 = 0;
  if ((a6 & 1) != 0)
  {
    p_s1 = &__s1;
    v64 = &v55;
    isImpliedFalseByMatchingCmp = sub_1C4FA438C(&p_s1, a1);
    if (!isImpliedFalseByMatchingCmp)
      goto LABEL_9;
  }
  else
  {
    v67 = &__s1;
    v68 = &v55;
    if ((sub_1C4FA4278(&v67, a1) & 1) == 0)
    {
      LOBYTE(isImpliedCondition) = 0;
      isImpliedFalseByMatchingCmp = 0;
      return isImpliedCondition | (isImpliedFalseByMatchingCmp << 8);
    }
  }
  v36 = (a7 + 1);
  isImpliedCondition = llvm::isImpliedCondition(__s1, v12, a3, a4, a5, a6, v36);
  isImpliedFalseByMatchingCmp = HIBYTE(isImpliedCondition);
  if (!HIBYTE(isImpliedCondition))
  {
    isImpliedCondition = llvm::isImpliedCondition(v55, v12, a3, a4, a5, a6, v36);
    isImpliedFalseByMatchingCmp = HIBYTE(isImpliedCondition);
    if (!HIBYTE(isImpliedCondition))
      LOBYTE(isImpliedCondition) = 0;
  }
  return isImpliedCondition | (isImpliedFalseByMatchingCmp << 8);
}

uint64_t llvm::isImpliedCondition(llvm *this, const llvm::Value *a2, const llvm::Value *a3, const llvm::DataLayout *a4, int a5)
{
  uint64_t *v5;
  int v6;

  if (this == a2)
  {
    v6 = 1;
    LOBYTE(this) = (_BYTE)a4;
  }
  else
  {
    v5 = (uint64_t *)this;
    LOBYTE(this) = 0;
    if (a2)
    {
      v6 = 0;
      if (*((_BYTE *)a2 + 16) == 81)
      {
        LOWORD(this) = llvm::isImpliedCondition(v5, *((_WORD *)a2 + 9) & 0x3F, *((_QWORD *)a2 - 8), *((_QWORD *)a2 - 4), a3, (uint64_t)a4, a5);
        v6 = BYTE1(this);
      }
    }
    else
    {
      v6 = 0;
    }
  }
  return this | (v6 << 8);
}

uint64_t llvm::isImpliedByDomCondition(llvm *this, const llvm::Value *a2, const llvm::Instruction *a3, const llvm::DataLayout *a4)
{
  llvm *v6;
  char v7;
  int v8;

  v6 = (llvm *)sub_1C4F904E0((uint64_t)a2);
  if (v6)
  {
    LOWORD(v6) = llvm::isImpliedCondition(v6, this, a3, (const llvm::DataLayout *)(v7 & 1), 0);
    v8 = BYTE1(v6);
  }
  else
  {
    v8 = 0;
  }
  return v6 | (v8 << 8);
}

uint64_t sub_1C4F904E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    if (!*(_QWORD *)(result + 40))
      return 0;
    result = llvm::BasicBlock::getSinglePredecessor(*(llvm::BasicBlock **)(result + 40));
    if (result)
    {
      v1 = *(_QWORD *)(result + 40);
      if (v1 == result + 40)
        return 0;
      result = 0;
      v2 = v1 - 24;
      if (!v1)
        v2 = 0;
      v3 = *(unsigned __int8 *)(v2 + 16) - 40;
      if (v3 < 0xFFFFFFF5)
        v2 = 0;
      if (v1)
      {
        if (*(_BYTE *)(v2 + 16) == 30 && v3 >= 0xFFFFFFF5)
        {
          if ((*(_DWORD *)(v2 + 20) & 0x7FFFFFF) != 3)
            return 0;
          result = *(_QWORD *)(v2 - 96);
          if (result)
          {
            v5 = *(_QWORD *)(v2 - 32);
            if (!v5)
              return 0;
            v6 = *(_QWORD *)(v2 - 64);
            if (!v6 || v5 == v6)
              return 0;
          }
        }
      }
    }
  }
  return result;
}

void llvm::computeConstantRange(llvm *this@<X0>, const llvm::Value *a2@<X1>, llvm::AssumptionCache *a3@<X4>, const llvm::Instruction *a4@<X5>, const llvm::DominatorTree *a5@<X6>, _BOOL4 a6@<W2>, uint64_t a7@<X3>, _QWORD *a8@<X8>)
{
  llvm::Type *v10;
  unsigned int PrimitiveSizeInBits;
  unint64_t v12;
  void *v13;
  int v14;
  int v19;
  const void **v20;
  uint64_t v21;
  void *v22;
  llvm::Type *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unint64_t **v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  size_t v37;
  void *v38;
  int matched;
  llvm::Type *v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  llvm::Type *v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  uint64_t **v51;
  unsigned __int8 *v52;
  uint64_t v53;
  void *v54;
  void **v55;
  llvm::APInt *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned __int8 *v59;
  const void **v60;
  unsigned int v61;
  unsigned int v62;
  void *v63;
  unsigned int v64;
  unsigned __int8 *v65;
  const llvm::Instruction *v66;
  const llvm::APInt *v67;
  unsigned int v68;
  void *v69;
  unsigned __int8 *v70;
  uint64_t ***v71;
  unsigned int v72;
  uint64_t **v73;
  void *v74;
  unsigned int v75;
  unsigned int v76;
  void *v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unint64_t **v80;
  unsigned int v81;
  unsigned int v82;
  void **v83;
  unsigned int v84;
  uint64_t ***v85;
  void *v86;
  void *v87;
  unsigned __int8 *v88;
  const void **v89;
  unsigned int v90;
  unsigned __int8 *v91;
  uint64_t v92;
  int v93;
  unsigned __int8 *v94;
  unsigned int v95;
  void *v96;
  unsigned __int8 *v97;
  uint64_t v98;
  int v99;
  unsigned __int8 *v100;
  unint64_t *v101;
  uint64_t v102;
  BOOL v103;
  unsigned int v104;
  void **v105;
  unsigned int v106;
  unint64_t v107;
  unsigned __int8 *v108;
  const void **v109;
  unsigned int v110;
  unint64_t v111;
  unsigned int v112;
  void **v113;
  unint64_t **v114;
  uint64_t v115;
  void *v116;
  const void *v117;
  unsigned int v118;
  void **v119;
  uint64_t v120;
  unint64_t **v121;
  unsigned int v122;
  unsigned int v123;
  unint64_t v124;
  int v125;
  int v126;
  unsigned int v127;
  int v128;
  unint64_t v129;
  unsigned int v130;
  void *v131;
  unsigned int v132;
  char v133;
  unsigned int v134;
  unsigned int v135;
  unint64_t v136;
  unsigned int v137;
  unint64_t v138;
  unsigned int v139;
  unint64_t v140;
  unint64_t v141;
  unsigned int v142;
  unsigned int v143;
  unsigned int v144;
  void **p_src;
  unsigned int v146;
  unint64_t v147;
  void **v148;
  unint64_t v149;
  _QWORD *v150;
  unsigned __int8 *v151;
  unint64_t **v152;
  unsigned int v153;
  BOOL v154;
  char v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unint64_t *v159;
  uint64_t v160;
  unsigned int v161;
  uint64_t v162;
  unsigned int v163;
  unint64_t *v164;
  char v165;
  uint64_t v166;
  unint64_t v167;
  void *v168;
  const void **v169;
  unsigned int v170;
  size_t v171;
  unint64_t v172;
  void **v173;
  uint64_t ***v174;
  void *v175;
  unsigned int v176;
  void *v177;
  int v178;
  int64_t v179;
  BOOL v180;
  unint64_t v181;
  unsigned int v182;
  unsigned int v183;
  void *v184;
  unint64_t v185;
  unsigned int v186;
  unint64_t v187;
  unsigned int v188;
  unsigned int v189;
  unint64_t v190;
  unint64_t *v191;
  const llvm::Instruction *v192;
  unsigned int v193;
  char v194;
  uint64_t v195;
  unint64_t v196;
  unsigned __int8 *v197;
  unsigned __int8 *v198;
  void *v199;
  _QWORD *v200;
  unsigned int v201;
  void *v202;
  unsigned int v203;
  unsigned int v204;
  unsigned __int8 *v205;
  unsigned __int8 *v206;
  int v207;
  const void **v208;
  unsigned int v209;
  unsigned __int8 *v210;
  unsigned __int8 *v211;
  unsigned int v212;
  unsigned int v213;
  void **v214;
  unsigned int v215;
  unint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  unint64_t v219;
  void **v220;
  const llvm::DominatorTree *v221;
  uint64_t v222;
  int v223;
  uint64_t v224;
  int v225;
  unsigned int v226;
  llvm **v227;
  llvm *v228;
  llvm **v229;
  int v230;
  BOOL v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  unsigned int v239;
  unsigned int v240;
  llvm *v241;
  int v242;
  unsigned int v243;
  llvm **v244;
  llvm *v245;
  uint64_t v246;
  uint64_t v247;
  llvm **v248;
  llvm::AssumptionCache *v249;
  llvm *v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t v253;
  unsigned int v254;
  const void **v255;
  unsigned int v256;
  unint64_t v257;
  unsigned __int8 *v258;
  unsigned __int8 *v259;
  _QWORD *v260;
  unsigned int v261;
  unsigned int v262;
  unsigned int v263;
  void **v264;
  unsigned int v265;
  unint64_t v266;
  void **v267;
  unint64_t v268;
  unint64_t v269;
  void *v270;
  unsigned __int8 *v271;
  uint64_t **v272;
  unsigned int v273;
  unsigned int v274;
  _QWORD *v275;
  unsigned int v276;
  void **v277;
  unsigned int v278;
  uint64_t **v279;
  unsigned int v280;
  void **v281;
  unint64_t v282;
  int v283;
  unint64_t v284;
  void *v285;
  unsigned int v286;
  void *v287;
  unsigned int v288;
  void **v289;
  const void **v290;
  void **v291;
  uint64_t v292;
  unsigned int v293;
  void *v294;
  unsigned int v295;
  unsigned int v296;
  void *v297;
  void *v298;
  unsigned __int8 *v299;
  _QWORD *v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  void **v304;
  unsigned int v305;
  unint64_t v306;
  unint64_t v307;
  unsigned int v308;
  void **v309;
  _QWORD *v310;
  unint64_t v311;
  void **v312;
  unsigned int v313;
  unint64_t v314;
  void **v315;
  unint64_t v316;
  unsigned int v317;
  unint64_t v318;
  unint64_t v319;
  unint64_t v320;
  uint64_t v321;
  unint64_t *v322;
  unsigned int v323;
  void **v324;
  unsigned int v325;
  unint64_t v326;
  void **v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  void *v331;
  char v332;
  uint64_t v333;
  void **v334;
  uint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  unint64_t *v338;
  unint64_t v339;
  unint64_t v340;
  unint64_t v341;
  _BOOL4 v342;
  unint64_t v343;
  unsigned int v344;
  void *v345;
  unint64_t v346;
  unsigned int v347;
  void *v348;
  uint64_t v349;
  unint64_t *v350;
  unint64_t v351;
  unint64_t *v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  _BOOL4 v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t *v359;
  unint64_t v360;
  unint64_t *v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t v364;
  _BOOL4 v365;
  uint64_t v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t *v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  _BOOL4 v373;
  unint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  unint64_t v377;
  unint64_t *v378;
  unint64_t v379;
  uint64_t v380;
  unint64_t v381;
  _BOOL4 v382;
  uint64_t v383;
  uint64_t *v384;
  unint64_t *v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t v388;
  _BOOL4 v389;
  uint64_t v390;
  unint64_t *v391;
  uint64_t *v392;
  unint64_t v393;
  unint64_t v394;
  uint64_t v395;
  unint64_t v396;
  _BOOL4 v397;
  uint64_t v398;
  uint64_t *v399;
  unint64_t *v400;
  unint64_t v401;
  uint64_t v402;
  unint64_t v403;
  _BOOL4 v404;
  uint64_t v405;
  unint64_t *v406;
  uint64_t *v407;
  unint64_t v408;
  unint64_t v409;
  uint64_t v410;
  unint64_t v411;
  _BOOL4 v412;
  uint64_t v413;
  unsigned int v414;
  unint64_t v415;
  uint64_t v416;
  llvm::APInt *v417;
  void *__n;
  const llvm::Instruction *v419;
  llvm::DominatorTree *v420;
  unint64_t v421;
  void *v422;
  uint64_t v423;
  void *v424;
  void *v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  void *__src;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  int v433[2];
  void *v434;
  int v435[2];
  unsigned int v436;
  unint64_t v437;
  unsigned int v438;
  unint64_t v439;
  unsigned int v440;
  uint64_t v441;
  void *v442;
  unsigned int v443;
  unint64_t **v444[2];

  if ((_DWORD)a5 == 6)
  {
    v10 = *(llvm::Type **)this;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
      v10 = (llvm::Type *)**((_QWORD **)v10 + 2);
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v10);
    *((_DWORD *)a8 + 2) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)a8, -1, 1);
      v293 = *((_DWORD *)a8 + 2);
      *((_DWORD *)a8 + 6) = v293;
      if (v293 > 0x40)
      {
        v294 = (void *)operator new[]();
        a8[2] = v294;
        memcpy(v294, (const void *)*a8, (((unint64_t)*((unsigned int *)a8 + 6) + 63) >> 3) & 0x3FFFFFF8);
        return;
      }
    }
    else
    {
      v12 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
      if (!PrimitiveSizeInBits)
        v12 = 0;
      *a8 = v12;
      *((_DWORD *)a8 + 6) = PrimitiveSizeInBits;
    }
    v13 = (void *)*a8;
    goto LABEL_39;
  }
  v14 = (int)a5;
  v19 = (int)a2;
  v441 = 0;
  __src = &v441;
  v430 = 0;
  if (sub_1C4D89F84((uint64_t)&__src, (unsigned __int8 *)this))
  {
    v20 = (const void **)v441;
    v21 = *(unsigned int *)(v441 + 8);
    if (v21 > 0x40)
    {
      v37 = ((unint64_t)(v21 + 63) >> 3) & 0x3FFFFFF8;
      v38 = (void *)operator new[]();
      memcpy(v38, *v20, v37);
      *((_DWORD *)a8 + 2) = v21;
      *a8 = v38;
      LODWORD(v430) = v21;
      v22 = (void *)operator new[]();
      memcpy(v22, (const void *)*a8, v37);
    }
    else
    {
      v22 = *(void **)v441;
      *((_DWORD *)a8 + 2) = v21;
      *a8 = v22;
      LODWORD(v430) = v21;
    }
    __src = v22;
    llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
    *((_DWORD *)a8 + 6) = v430;
    v13 = __src;
LABEL_39:
    a8[2] = v13;
    return;
  }
  v23 = *(llvm::Type **)this;
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
    v23 = (llvm::Type *)**((_QWORD **)v23 + 2);
  v24 = llvm::Type::getPrimitiveSizeInBits(v23);
  v25 = v24;
  v440 = v24;
  if (v24 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v439, 0, 0);
    v438 = v25;
    llvm::APInt::initSlowCase((llvm::APInt *)&v437, 0, 0);
  }
  else
  {
    v439 = 0;
    v438 = v24;
    v437 = 0;
  }
  v26 = *((unsigned __int8 *)this + 16);
  if (v26 >= 0x1C && v26 - 59 >= 0xFFFFFFEE)
  {
    v420 = a3;
    v27 = v440;
    v444[0] = 0;
    switch(v26)
    {
      case ')':
        v28 = (unsigned __int8 *)*((_QWORD *)this - 4);
        __src = v444;
        v430 = 0;
        if (!sub_1C4D89F84((uint64_t)&__src, v28))
          goto LABEL_484;
        v29 = v444[0];
        v30 = *((_DWORD *)v444[0] + 2);
        if (v30 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v444[0]) == v30 || !a6)
            goto LABEL_484;
        }
        else if (!*v444[0] || !a6)
        {
          goto LABEL_484;
        }
        v127 = *((unsigned __int8 *)this + 17);
        v128 = (v127 >> 1) & 1;
        if (v19)
          v128 = (v127 & 6) == 2;
        if (v128 == 1)
        {
          if (v440 <= 0x40)
          {
            v95 = *((_DWORD *)v29 + 2);
            if (v95 <= 0x40)
            {
              v96 = *v29;
              goto LABEL_122;
            }
          }
          if (&v439 != (unint64_t *)v29)
          {
            llvm::APInt::reallocate((uint64_t)&v439, *((_DWORD *)v29 + 2));
            v115 = v440;
            if (v440 > 0x40)
            {
              v116 = (void *)v439;
              v117 = *v29;
              goto LABEL_190;
            }
            v331 = *v29;
            goto LABEL_747;
          }
        }
        else if ((v127 & 4) != 0)
        {
          v142 = *((_DWORD *)v29 + 2);
          v143 = v142 - 1;
          if (v142 >= 0x41)
            v29 = (unint64_t **)&(*v29)[v143 >> 6];
          if ((((unint64_t)*v29 >> v143) & 1) != 0)
          {
            LODWORD(v430) = v27;
            if (v27 > 0x40)
            {
              p_src = &__src;
              llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
              v146 = v430;
              v144 = v27 - 1;
              if (v430 >= 0x41)
                p_src = (void **)((char *)__src + 8 * (v144 >> 6));
            }
            else
            {
              __src = 0;
              LOBYTE(v144) = v27 - 1;
              p_src = &__src;
              v146 = v27;
            }
            *p_src = (void *)((1 << v144) | (unint64_t)*p_src);
            if (v440 >= 0x41 && v439)
              MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
            v439 = (unint64_t)__src;
            v440 = v146;
            LODWORD(v426) = v27;
            if (v27 > 0x40)
            {
              v148 = &v425;
              llvm::APInt::initSlowCase((llvm::APInt *)&v425, -1, 1);
              LODWORD(v147) = v27 - 1;
              if (v426 >= 0x41)
                v148 = (void **)((char *)v425 + 8 * (v147 >> 6));
              LODWORD(v27) = v426;
            }
            else
            {
              if ((_DWORD)v27)
                v147 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
              else
                v147 = 0;
              v425 = (void *)v147;
              LOBYTE(v147) = v27 - 1;
              v148 = &v425;
            }
            *v148 = (void *)((unint64_t)*v148 & ~(1 << v147));
            if (v27 >= 0x41)
            {
              v358 = 0;
              v150 = v425;
              v359 = (uint64_t *)*v444[0];
              v360 = ((unint64_t)v27 + 63) >> 6;
              v361 = (unint64_t *)v425;
              v362 = v360;
              do
              {
                v363 = *v359++;
                v364 = v363 + *v361;
                v365 = v364 + 1 <= *v361;
                if (v358)
                {
                  ++v364;
                  v358 = v365;
                }
                else
                {
                  v358 = v364 < *v361;
                }
                *v361++ = v364;
                --v362;
              }
              while (v362);
              v150[(v360 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
            }
            else
            {
              if ((_DWORD)v27)
                v149 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
              else
                v149 = 0;
              v150 = (_QWORD *)(v149 & ((unint64_t)v425 + (unint64_t)*v444[0]));
              v425 = v150;
            }
            LODWORD(v430) = v27;
            __src = v150;
            LODWORD(v426) = 0;
            goto LABEL_422;
          }
          LODWORD(v430) = v27;
          if (v27 > 0x40)
          {
            v214 = &__src;
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
            v215 = v430;
            v213 = v27 - 1;
            if (v430 >= 0x41)
              v214 = (void **)((char *)__src + 8 * (v213 >> 6));
          }
          else
          {
            __src = 0;
            LOBYTE(v213) = v27 - 1;
            v214 = &__src;
            v215 = v27;
          }
          *v214 = (void *)((1 << v213) | (unint64_t)*v214);
          if (v215 >= 0x41)
          {
            v375 = 0;
            v218 = __src;
            v376 = (uint64_t *)*v444[0];
            v377 = ((unint64_t)v215 + 63) >> 6;
            v378 = (unint64_t *)__src;
            v379 = v377;
            do
            {
              v380 = *v376++;
              v381 = v380 + *v378;
              v382 = v381 + 1 <= *v378;
              if (v375)
              {
                ++v381;
                v375 = v382;
              }
              else
              {
                v375 = v381 < *v378;
              }
              *v378++ = v381;
              --v379;
            }
            while (v379);
            v218[(v377 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v215;
          }
          else
          {
            v216 = (unint64_t)__src + (unint64_t)*v444[0];
            if (v215)
              v217 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v215;
            else
              v217 = 0;
            v218 = (_QWORD *)(v217 & v216);
            __src = (void *)(v217 & v216);
          }
          LODWORD(v430) = 0;
          if (v440 > 0x40 && v439)
            MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
          v439 = (unint64_t)v218;
          v440 = v215;
          LODWORD(v426) = v27;
          if (v27 > 0x40)
          {
            v220 = &v425;
            llvm::APInt::initSlowCase((llvm::APInt *)&v425, -1, 1);
            LODWORD(v219) = v27 - 1;
            if (v426 >= 0x41)
              v220 = (void **)((char *)v425 + 8 * (v219 >> 6));
          }
          else
          {
            if ((_DWORD)v27)
              v219 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
            else
              v219 = 0;
            v425 = (void *)v219;
            LOBYTE(v219) = v27 - 1;
            v220 = &v425;
          }
          *v220 = (void *)((unint64_t)*v220 & ~(1 << v219));
          llvm::APInt::operator+=((uint64_t)&v425, 1uLL);
          v201 = v426;
          v202 = v425;
          LODWORD(v426) = 0;
          if (v438 > 0x40 && v437)
          {
            MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
            v132 = v426;
            v437 = (unint64_t)v202;
            v438 = v201;
            goto LABEL_234;
          }
          goto LABEL_483;
        }
        goto LABEL_484;
      case '/':
        v65 = (unsigned __int8 *)*((_QWORD *)this - 4);
        __src = v444;
        v430 = 0;
        if (!sub_1C4D89F84((uint64_t)&__src, v65))
          goto LABEL_219;
        v66 = a4;
        v67 = (const llvm::APInt *)v444[0];
        v68 = *((_DWORD *)v444[0] + 2);
        if (v68 > 0x40)
        {
          v103 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v444[0]) == v68;
          a4 = v66;
          if (!v103)
            goto LABEL_78;
        }
        else
        {
          a4 = v66;
          if (*v444[0])
          {
LABEL_78:
            LODWORD(v426) = v27;
            if (v27 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v425, -1, 1);
              v67 = (const llvm::APInt *)v444[0];
            }
            else
            {
              if ((_DWORD)v27)
                v69 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v27);
              else
                v69 = 0;
              v425 = v69;
            }
            llvm::APInt::udiv((llvm::APInt *)&v425, v67, (llvm::APInt *)&__src);
LABEL_96:
            llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
            v76 = v430;
            v77 = __src;
            LODWORD(v430) = 0;
            if (v438 > 0x40 && v437)
            {
              MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
              v78 = v430;
              v437 = (unint64_t)v77;
              v438 = v76;
LABEL_229:
              if (v78 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            }
            else
            {
              v437 = (unint64_t)__src;
              v438 = v76;
            }
LABEL_233:
            v132 = v426;
LABEL_234:
            if (v132 < 0x41 || !v425)
              goto LABEL_484;
LABEL_452:
            MEMORY[0x1CAA32F9C]();
            goto LABEL_484;
          }
        }
LABEL_219:
        v97 = (unsigned __int8 *)*((_QWORD *)this - 8);
        goto LABEL_220;
      case '0':
        v52 = (unsigned __int8 *)*((_QWORD *)this - 4);
        __src = v444;
        v430 = 0;
        if (sub_1C4D89F84((uint64_t)&__src, v52))
        {
          LODWORD(v430) = v27;
          if (v27 >= 0x41)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
            v332 = v27 - 1;
            v333 = (v27 - 1) >> 6;
            if (v430 >= 0x41)
              v334 = (void **)((char *)__src + 8 * v333);
            else
              v334 = &__src;
            v53 = 1 << v332;
            *v334 = (void *)((unint64_t)*v334 | (1 << v332));
            LODWORD(v426) = v27;
            v55 = &v425;
            llvm::APInt::initSlowCase((llvm::APInt *)&v425, -1, 1);
            if (v426 >= 0x41)
              v55 = (void **)((char *)v425 + 8 * v333);
          }
          else
          {
            v53 = 1 << (v27 - 1);
            __src = (void *)v53;
            LODWORD(v426) = v27;
            if ((_DWORD)v27)
              v54 = (void *)(0xFFFFFFFFFFFFFFFFLL >> ((v27 - 1) & 0x3F ^ 0x3F));
            else
              v54 = 0;
            v425 = v54;
            v55 = &v425;
          }
          *v55 = (void *)((unint64_t)*v55 & ~v53);
          v56 = (llvm::APInt *)v444[0];
          v57 = *((_DWORD *)v444[0] + 2);
          if (v57)
          {
            if (v57 > 0x40)
            {
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v444[0]) != v57)
              {
                v58 = llvm::APInt::countLeadingZerosSlowCase(v56);
LABEL_383:
                if (v58 >= (int)v27 - 1)
                  goto LABEL_446;
                llvm::APInt::sdiv((llvm::APInt *)&__src, (const void **)v56, (llvm::APInt *)&v421);
                if (v440 >= 0x41 && v439)
                  MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
                v439 = v421;
                v440 = v422;
                llvm::APInt::sdiv((llvm::APInt *)&v425, (const void **)v444[0], (llvm::APInt *)&v421);
                if (v438 >= 0x41 && v437)
                  MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
                v187 = v421;
                v437 = v421;
                v188 = v422;
                v438 = v422;
                v189 = v440;
                if (v440 > 0x40)
                {
                  v190 = v439;
                  v321 = *(_QWORD *)(v439 + 8 * ((v440 - 1) >> 6)) & (1 << (v440 - 1));
                  v322 = (unint64_t *)(v421 + 8 * (((_DWORD)v422 - 1) >> 6));
                  if (v422 < 0x41)
                    v322 = &v437;
                  if ((v321 != 0) == ((*v322 >> (v422 - 1)) & 1))
                  {
                    v328 = (((unint64_t)v440 + 63) >> 3) & 0x3FFFFFF8;
                    do
                    {
                      if (!v328)
                        goto LABEL_392;
                      v329 = *(_QWORD *)(v439 - 8 + v328);
                      v330 = *(_QWORD *)(v421 - 8 + v328);
                      v328 -= 8;
                    }
                    while (v329 == v330);
                    if (v329 <= v330)
                    {
LABEL_392:
                      LODWORD(v422) = v188;
                      if (v188 > 0x40)
                      {
                        v421 = operator new[]();
                        memcpy((void *)v421, (const void *)v437, (((unint64_t)v422 + 63) >> 3) & 0x3FFFFFF8);
                      }
                      else
                      {
                        v421 = v187;
                      }
                      llvm::APInt::operator+=((uint64_t)&v421, 1uLL);
                      v139 = v422;
                      v140 = v421;
                      LODWORD(v422) = 0;
                      if (v438 > 0x40 && v437)
                      {
                        MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
                        v437 = v140;
                        v438 = v139;
                        if (v422 < 0x41)
                          goto LABEL_446;
                        v141 = v421;
                        if (!v421)
                          goto LABEL_446;
                        goto LABEL_275;
                      }
                      goto LABEL_445;
                    }
                  }
                  else if (v321)
                  {
                    goto LABEL_392;
                  }
                }
                else
                {
                  v190 = v439;
                  if ((uint64_t)(v439 << -(char)v440) >> -(char)v440 <= (uint64_t)(v421 << -(char)v440) >> -(char)v440)
                    goto LABEL_392;
                }
                v439 = v421;
                v440 = v422;
                v437 = v190;
                v187 = v190;
                v188 = v189;
                v438 = v189;
                goto LABEL_392;
              }
            }
            else if (*v444[0] != (unint64_t *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v57))
            {
              v58 = v57 + __clz((unint64_t)*v444[0]) - 64;
              goto LABEL_383;
            }
          }
          LODWORD(v422) = v430;
          if (v430 > 0x40)
          {
            v421 = operator new[]();
            memcpy((void *)v421, __src, (((unint64_t)v422 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v421 = (unint64_t)__src;
          }
          llvm::APInt::operator+=((uint64_t)&v421, 1uLL);
          v137 = v422;
          v138 = v421;
          LODWORD(v422) = 0;
          if (v440 > 0x40 && v439)
          {
            MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
            v439 = v138;
            v440 = v137;
            if (v422 >= 0x41 && v421)
              MEMORY[0x1CAA32F9C](v421, 0x1000C8000313F17);
          }
          else
          {
            v439 = v421;
            v440 = v137;
          }
          v443 = v426;
          if (v426 > 0x40)
          {
            v442 = (void *)operator new[]();
            memcpy(v442, v425, (((unint64_t)v443 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v442 = v425;
          }
          llvm::APInt::operator+=((uint64_t)&v442, 1uLL);
          v139 = v443;
          v140 = (unint64_t)v442;
          v443 = 0;
          if (v438 > 0x40 && v437)
          {
            MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
            v437 = v140;
            v438 = v139;
            if (v443 < 0x41 || (v141 = (unint64_t)v442) == 0)
            {
LABEL_446:
              if (v426 >= 0x41 && v425)
                MEMORY[0x1CAA32F9C](v425, 0x1000C8000313F17);
              goto LABEL_449;
            }
LABEL_275:
            MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
            goto LABEL_446;
          }
LABEL_445:
          v437 = v140;
          v438 = v139;
          goto LABEL_446;
        }
        v108 = (unsigned __int8 *)*((_QWORD *)this - 8);
        __src = v444;
        v430 = 0;
        if (!sub_1C4D89F84((uint64_t)&__src, v108))
          goto LABEL_484;
        v109 = (const void **)v444[0];
        v110 = *((_DWORD *)v444[0] + 2);
        if (v110 > 0x40)
        {
          if ((((*v444[0])[(v110 - 1) >> 6] >> (v110 - 1)) & 1) != 0
            && llvm::APInt::countTrailingZerosSlowCase(v444[0]) == v110 - 1)
          {
            goto LABEL_940;
          }
        }
        else
        {
          v111 = (unint64_t)*v444[0];
          if (*v444[0] == (unint64_t *)(1 << (v110 - 1)))
          {
            if (v440 <= 0x40)
            {
              v439 = (unint64_t)*v444[0];
              v440 = v110;
              LODWORD(v430) = v110;
LABEL_943:
              if (v110 != 1)
              {
                v168 = (void *)(v111 >> 1);
                goto LABEL_420;
              }
              __src = 0;
              goto LABEL_422;
            }
LABEL_940:
            if (&v439 != (unint64_t *)v109)
            {
              llvm::APInt::reallocate((uint64_t)&v439, v110);
              v110 = v440;
              if (v440 <= 0x40)
              {
                v111 = (unint64_t)*v109;
                v439 = (unint64_t)*v109;
                LODWORD(v430) = v440;
                goto LABEL_943;
              }
              memcpy((void *)v439, *v109, (((unint64_t)v440 + 63) >> 3) & 0x3FFFFFF8);
            }
            v110 = v440;
            LODWORD(v430) = v440;
            if (v440 > 0x40)
            {
              v111 = operator new[]();
              __src = (void *)v111;
              v110 = v430;
              v415 = v430 + 63;
              memcpy((void *)v111, (const void *)v439, (v415 >> 3) & 0x3FFFFFF8);
              if (v110 > 0x40)
              {
                llvm::APInt::tcShiftRight((llvm::APInt *)v111, (unint64_t *)(v415 >> 6), 1u);
                goto LABEL_422;
              }
            }
            else
            {
              v111 = v439;
            }
            goto LABEL_943;
          }
        }
        sub_1C4DA6CE8(v109, (uint64_t)&__src);
        llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
        v344 = v430;
        v345 = __src;
        LODWORD(v430) = 0;
        if (v438 > 0x40 && v437)
        {
          MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
          v437 = (unint64_t)v345;
          v438 = v344;
          if (v430 >= 0x41 && __src)
          {
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            v344 = v438;
          }
        }
        else
        {
          v437 = (unint64_t)__src;
          v438 = v344;
        }
        LODWORD(v422) = v344;
        if (v344 <= 0x40)
        {
          if (v344)
            v346 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v344;
          else
            v346 = 0;
          v421 = v346 & ~v437;
        }
        else
        {
          v421 = operator new[]();
          memcpy((void *)v421, (const void *)v437, (((unint64_t)v422 + 63) >> 3) & 0x3FFFFFF8);
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v421);
        }
        llvm::APInt::operator++((uint64_t)&v421);
        LODWORD(v426) = (_DWORD)v422;
        v425 = (void *)v421;
        LODWORD(v422) = 0;
        llvm::APInt::operator+=((uint64_t)&v425, 1uLL);
        v347 = v426;
        v348 = v425;
        LODWORD(v426) = 0;
        if (v440 > 0x40 && v439)
        {
          MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
          v439 = (unint64_t)v348;
          v440 = v347;
          if (v426 >= 0x41 && v425)
            MEMORY[0x1CAA32F9C](v425, 0x1000C8000313F17);
        }
        else
        {
          v439 = (unint64_t)v425;
          v440 = v347;
        }
        if (v422 < 0x41 || !v421)
          goto LABEL_484;
        goto LABEL_452;
      case '2':
        v88 = (unsigned __int8 *)*((_QWORD *)this - 4);
        __src = v444;
        v430 = 0;
        if (!sub_1C4D89F84((uint64_t)&__src, v88))
          goto LABEL_484;
        v89 = (const void **)v444[0];
        if (v438 <= 0x40)
        {
          v90 = *((_DWORD *)v444[0] + 2);
          if (v90 <= 0x40)
          {
            v437 = (unint64_t)*v444[0];
            goto LABEL_166;
          }
        }
        if (&v437 == (unint64_t *)v444[0])
          goto LABEL_484;
        llvm::APInt::reallocate((uint64_t)&v437, *((_DWORD *)v444[0] + 2));
        v115 = v438;
        if (v438 > 0x40)
        {
          v116 = (void *)v437;
          goto LABEL_189;
        }
        v437 = (unint64_t)*v89;
        goto LABEL_484;
      case '3':
        v91 = (unsigned __int8 *)*((_QWORD *)this - 4);
        __src = v444;
        v430 = 0;
        if (!sub_1C4D89F84((uint64_t)&__src, v91))
          goto LABEL_484;
        sub_1C4DA6CE8((const void **)v444[0], (uint64_t)&__src);
        if (v438 >= 0x41 && v437)
          MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
        v92 = (uint64_t)__src;
        v437 = (unint64_t)__src;
        v93 = v430;
        v438 = v430;
        LODWORD(v426) = v430;
        if (v430 >= 0x41
          && (v92 = operator new[](),
              v425 = (void *)v92,
              v93 = v426,
              memcpy((void *)v92, (const void *)v437, (((unint64_t)v426 + 63) >> 3) & 0x3FFFFFF8),
              v426 > 0x40))
        {
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v425);
        }
        else
        {
          if (v93)
            v129 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v93;
          else
            v129 = 0;
          v425 = (void *)(v129 & ~v92);
        }
        llvm::APInt::operator++((uint64_t)&v425);
        LODWORD(v430) = v426;
        __src = v425;
        LODWORD(v426) = 0;
        llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
        v130 = v430;
        v131 = __src;
        LODWORD(v430) = 0;
        if (v440 > 0x40 && v439)
        {
          MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
          v78 = v430;
          v439 = (unint64_t)v131;
          v440 = v130;
          goto LABEL_229;
        }
        v439 = (unint64_t)__src;
        v440 = v130;
        goto LABEL_233;
      case '5':
        v59 = (unsigned __int8 *)*((_QWORD *)this - 8);
        __src = v444;
        v430 = 0;
        if (!sub_1C4D89F84((uint64_t)&__src, v59))
          goto LABEL_484;
        if (a6 && (*((_BYTE *)this + 17) & 2) != 0)
        {
          v60 = (const void **)v444[0];
          v61 = v440;
          if (v440 <= 0x40)
          {
            v62 = *((_DWORD *)v444[0] + 2);
            if (v62 < 0x41)
            {
              v439 = (unint64_t)*v444[0];
              v63 = (void *)v439;
              v440 = v62;
              v64 = v62 + __clz(v439) - 64;
              LODWORD(v430) = v62;
LABEL_257:
              __src = v63;
              goto LABEL_366;
            }
          }
          if (&v439 != (unint64_t *)v444[0])
          {
            llvm::APInt::reallocate((uint64_t)&v439, *((_DWORD *)v444[0] + 2));
            v61 = v440;
            if (v440 <= 0x40)
            {
              v63 = (void *)*v60;
              v439 = (unint64_t)*v60;
LABEL_256:
              v64 = v61 + __clz((unint64_t)v63) - 64;
              LODWORD(v430) = v61;
              goto LABEL_257;
            }
            memcpy((void *)v439, *v60, (((unint64_t)v440 + 63) >> 3) & 0x3FFFFFF8);
            v61 = v440;
          }
          if (v61 > 0x40)
          {
            v178 = 0;
            v179 = ((unint64_t)v61 + 63) >> 6;
            do
            {
              v180 = v179-- < 1;
              if (v180)
                break;
              v181 = *(_QWORD *)(v439 + 8 * v179);
              v178 += __clz(v181);
            }
            while (!v181);
            v182 = v61 | 0xFFFFFFC0;
            if ((v61 & 0x3F) == 0)
              v182 = 0;
            v64 = v178 + v182;
            LODWORD(v430) = v61;
            __src = (void *)operator new[]();
            memcpy(__src, (const void *)v439, (((unint64_t)v430 + 63) >> 3) & 0x3FFFFFF8);
LABEL_366:
            sub_1C4888094((uint64_t)&__src, v64);
            llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
            v183 = v430;
            v184 = __src;
            LODWORD(v430) = 0;
            if (v438 >= 0x41 && v437)
              MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
            v437 = (unint64_t)v184;
            v438 = v183;
LABEL_449:
            v203 = v430;
LABEL_450:
            if (v203 < 0x41 || !__src)
              goto LABEL_484;
            goto LABEL_452;
          }
          v63 = (void *)v439;
          goto LABEL_256;
        }
        if ((*((_BYTE *)this + 17) & 4) == 0)
          goto LABEL_484;
        v121 = v444[0];
        v122 = *((_DWORD *)v444[0] + 2);
        v123 = v122 - 1;
        if (v122 > 0x40)
        {
          if ((((*v444[0])[v123 >> 6] >> v123) & 1) != 0)
          {
            v126 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)v444[0]);
            LODWORD(v430) = v122;
            __src = (void *)operator new[]();
            memcpy(__src, *v121, (((unint64_t)v430 + 63) >> 3) & 0x3FFFFFF8);
LABEL_412:
            sub_1C4888094((uint64_t)&__src, v126 - 1);
            goto LABEL_413;
          }
          v212 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v444[0]) - 1;
        }
        else
        {
          v124 = (unint64_t)*v444[0];
          if ((((unint64_t)*v444[0] >> v123) & 1) != 0)
          {
            v125 = __clz(~(v124 << -(char)v122));
            if (v122)
              v126 = v125;
            else
              v126 = 0;
            LODWORD(v430) = *((_DWORD *)v444[0] + 2);
            __src = *v444[0];
            goto LABEL_412;
          }
          v212 = v122 + __clz(v124) - 65;
          if (v440 < 0x41)
          {
            v439 = (unint64_t)*v444[0];
            v440 = v122;
LABEL_463:
            LODWORD(v430) = *((_DWORD *)v121 + 2);
            if (v430 > 0x40)
            {
              __src = (void *)operator new[]();
              memcpy(__src, *v121, (((unint64_t)v430 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              __src = *v121;
            }
            sub_1C4888094((uint64_t)&__src, v212);
            goto LABEL_422;
          }
        }
        if (&v439 != (unint64_t *)v121)
        {
          llvm::APInt::reallocate((uint64_t)&v439, v122);
          if (v440 <= 0x40)
            v439 = (unint64_t)*v121;
          else
            memcpy((void *)v439, *v121, (((unint64_t)v440 + 63) >> 3) & 0x3FFFFFF8);
        }
        v121 = v444[0];
        goto LABEL_463;
      case '6':
        v70 = (unsigned __int8 *)*((_QWORD *)this - 4);
        __src = v444;
        v430 = 0;
        if (!sub_1C4D89F84((uint64_t)&__src, v70))
          goto LABEL_150;
        v71 = (uint64_t ***)v444[0];
        v72 = *((_DWORD *)v444[0] + 2);
        v73 = (uint64_t **)v444[0];
        if (v72 < 0x41)
          goto LABEL_87;
        if (v72 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v444[0]) <= 0x40)
        {
          v73 = *v71;
LABEL_87:
          if ((unint64_t)*v73 < v27)
          {
            LODWORD(v426) = v27;
            if (v27 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v425, -1, 1);
              v71 = (uint64_t ***)v444[0];
              v27 = v426;
              LODWORD(v430) = v426;
              if (v426 > 0x40)
              {
                __src = (void *)operator new[]();
                v27 = v430;
                memcpy(__src, v425, (((unint64_t)v430 + 63) >> 3) & 0x3FFFFFF8);
LABEL_93:
                v75 = sub_1C47EE5B8(v71, v27);
                if (v430 > 0x40)
                {
                  llvm::APInt::tcShiftRight((llvm::APInt *)__src, (unint64_t *)(((unint64_t)v430 + 63) >> 6), v75);
                }
                else if ((_DWORD)v430 == v75)
                {
                  __src = 0;
                }
                else
                {
                  __src = (void *)((unint64_t)__src >> v75);
                }
                goto LABEL_96;
              }
              v74 = v425;
            }
            else
            {
              if ((_DWORD)v27)
                v74 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v27);
              else
                v74 = 0;
              v425 = v74;
              LODWORD(v430) = v27;
            }
            __src = v74;
            goto LABEL_93;
          }
        }
LABEL_150:
        v100 = (unsigned __int8 *)*((_QWORD *)this - 8);
        __src = v444;
        v430 = 0;
        if (!sub_1C4D89F84((uint64_t)&__src, v100))
          goto LABEL_484;
        v101 = (unint64_t *)v444[0];
        v102 = *((unsigned int *)v444[0] + 2);
        if (v102 > 0x40)
          v103 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v444[0]) == (_DWORD)v102;
        else
          v103 = *v444[0] == 0;
        v133 = v103;
        if ((v133 & 1) == 0
          && a6
          && (v134 = *((unsigned __int8 *)this + 16), v134 <= 0x37)
          && ((1 << v134) & 0xC1800000000000) != 0
          && (*((_BYTE *)this + 17) & 2) != 0)
        {
          if (v102 <= 0x40)
          {
            v186 = __clz(__rbit64(*v101));
            if (v102 >= v186)
              v135 = v186;
            else
              v135 = v102;
            goto LABEL_247;
          }
          v135 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v101);
        }
        else
        {
          v135 = v27 - 1;
          if (v102 <= 0x40)
          {
LABEL_247:
            if ((_DWORD)v102 == v135)
              v136 = 0;
            else
              v136 = *v101 >> v135;
            goto LABEL_249;
          }
        }
        LODWORD(v419) = (_DWORD)a4;
        __n = (void *)(((unint64_t)(v102 + 63) >> 3) & 0x3FFFFFF8);
        v136 = operator new[]();
        memcpy((void *)v136, (const void *)*v101, (size_t)__n);
        llvm::APInt::tcShiftRight((llvm::APInt *)v136, (unint64_t *)((unint64_t)(v102 + 63) >> 6), v135);
LABEL_249:
        if (v440 >= 0x41 && v439)
          MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
        v439 = v136;
        v440 = v102;
LABEL_417:
        v114 = v444[0];
LABEL_418:
        LODWORD(v430) = *((_DWORD *)v114 + 2);
        if (v430 > 0x40)
        {
          __src = (void *)operator new[]();
          memcpy(__src, *v114, (((unint64_t)v430 + 63) >> 3) & 0x3FFFFFF8);
LABEL_422:
          llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
          v201 = v430;
          v202 = __src;
          LODWORD(v430) = 0;
          if (v438 <= 0x40 || !v437)
          {
LABEL_483:
            v437 = (unint64_t)v202;
            v438 = v201;
            goto LABEL_484;
          }
          MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
          v203 = v430;
          v437 = (unint64_t)v202;
          v438 = v201;
          goto LABEL_450;
        }
        v168 = *v114;
LABEL_420:
        __src = v168;
        goto LABEL_422;
      case '7':
        v79 = (unsigned __int8 *)*((_QWORD *)this - 4);
        __src = v444;
        v430 = 0;
        if (!sub_1C4D89F84((uint64_t)&__src, v79))
          goto LABEL_295;
        v419 = a4;
        v80 = v444[0];
        v81 = *((_DWORD *)v444[0] + 2);
        if (v81 < 0x41)
          goto LABEL_103;
        if (v81 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v444[0]) > 0x40)
        {
          a4 = v419;
        }
        else
        {
          v80 = (unint64_t **)*v80;
LABEL_103:
          a4 = v419;
          if ((unint64_t)*v80 < v27)
          {
            LODWORD(v426) = v27;
            if (v27 > 0x40)
            {
              v83 = &v425;
              llvm::APInt::initSlowCase((llvm::APInt *)&v425, 0, 0);
              v82 = v27 - 1;
              if (v426 >= 0x41)
                v83 = (void **)((char *)v425 + 8 * (v82 >> 6));
              a4 = v419;
              v84 = v426;
            }
            else
            {
              v425 = 0;
              LOBYTE(v82) = v27 - 1;
              v83 = &v425;
              v84 = v27;
            }
            *v83 = (void *)((1 << v82) | (unint64_t)*v83);
            v85 = (uint64_t ***)v444[0];
            LODWORD(v430) = v84;
            LODWORD(__n) = v84;
            if (v84 > 0x40)
            {
              v171 = (((unint64_t)v84 + 63) >> 3) & 0x3FFFFFF8;
              v417 = (llvm::APInt *)v444[0];
              v87 = (void *)operator new[]();
              v86 = v425;
              memcpy(v87, v425, v171);
              v85 = (uint64_t ***)v417;
            }
            else
            {
              v86 = v425;
              v87 = v425;
            }
            __src = v87;
            llvm::APInt::ashrInPlace((llvm::APInt *)&__src, v85);
            if (v440 >= 0x41 && v439)
              MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
            v439 = (unint64_t)__src;
            v440 = v430;
            if (__n >= 0x41 && v86)
              MEMORY[0x1CAA32F9C](v86, 0x1000C8000313F17);
            LODWORD(v426) = v27;
            if (v27 > 0x40)
            {
              v173 = &v425;
              llvm::APInt::initSlowCase((llvm::APInt *)&v425, -1, 1);
              LODWORD(v172) = v27 - 1;
              if (v426 >= 0x41)
                v173 = (void **)((char *)v425 + 8 * (v172 >> 6));
              LODWORD(v27) = v426;
              a4 = v419;
            }
            else
            {
              if ((_DWORD)v27)
                v172 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v27;
              else
                v172 = 0;
              v425 = (void *)v172;
              LOBYTE(v172) = v27 - 1;
              v173 = &v425;
            }
            *v173 = (void *)((unint64_t)*v173 & ~(1 << v172));
            v174 = (uint64_t ***)v444[0];
            LODWORD(v430) = v27;
            if (v27 > 0x40)
            {
              __src = (void *)operator new[]();
              v175 = v425;
              memcpy(__src, v425, (((unint64_t)v430 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v175 = v425;
              __src = v425;
            }
            llvm::APInt::ashrInPlace((llvm::APInt *)&__src, v174);
            llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
            v176 = v430;
            v177 = __src;
            LODWORD(v430) = 0;
            if (v438 > 0x40 && v437)
            {
              MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
              v437 = (unint64_t)v177;
              v438 = v176;
              if (v430 >= 0x41 && __src)
                MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
            }
            else
            {
              v437 = (unint64_t)__src;
              v438 = v176;
            }
            if (v27 < 0x41 || !v175)
              goto LABEL_484;
            goto LABEL_452;
          }
        }
LABEL_295:
        v151 = (unsigned __int8 *)*((_QWORD *)this - 8);
        __src = v444;
        v430 = 0;
        if (!sub_1C4D89F84((uint64_t)&__src, v151))
          goto LABEL_484;
        v152 = v444[0];
        v153 = *((_DWORD *)v444[0] + 2);
        if (v153 <= 0x40)
          v154 = *v444[0] == 0;
        else
          v154 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v444[0]) == v153;
        v155 = v154;
        if ((v155 & 1) == 0
          && a6
          && (v156 = *((unsigned __int8 *)this + 16), v156 <= 0x37)
          && ((1 << v156) & 0xC1800000000000) != 0
          && (*((_BYTE *)this + 17) & 2) != 0)
        {
          if (v153 <= 0x40)
          {
            v204 = __clz(__rbit64((unint64_t)*v152));
            if (v153 >= v204)
              v157 = v204;
            else
              v157 = v153;
            LOBYTE(v158) = v153 - 1;
            v159 = (unint64_t *)v152;
LABEL_309:
            if (((*v159 >> v158) & 1) != 0)
            {
              if (v153 > 0x40 || v440 > 0x40)
              {
                if (&v439 != (unint64_t *)v152)
                {
                  llvm::APInt::reallocate((uint64_t)&v439, v153);
                  if (v440 <= 0x40)
                    v439 = (unint64_t)*v152;
                  else
                    memcpy((void *)v439, *v152, (((unint64_t)v440 + 63) >> 3) & 0x3FFFFFF8);
                }
                v152 = v444[0];
              }
              else
              {
                v439 = (unint64_t)*v152;
                v440 = v153;
              }
              v161 = *((_DWORD *)v152 + 2);
              LODWORD(v430) = v161;
              if (v161 > 0x40)
              {
                v162 = operator new[]();
                __src = (void *)v162;
                v164 = *v152;
                v163 = v430;
                memcpy((void *)v162, v164, (((unint64_t)v430 + 63) >> 3) & 0x3FFFFFF8);
                if (v163 > 0x40)
                {
                  llvm::APInt::ashrSlowCase((unsigned int *)&__src, v157);
                  goto LABEL_422;
                }
              }
              else
              {
                v162 = (uint64_t)*v152;
                v163 = v161;
              }
              if (v163 == v157)
                v165 = 63;
              else
                v165 = v157;
              v166 = v162 << -(char)v163 >> -(char)v163 >> v165;
              if (v163)
                v167 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v163;
              else
                v167 = 0;
              v168 = (void *)(v167 & v166);
              goto LABEL_420;
            }
            LODWORD(v430) = v153;
            if (v153 > 0x40)
            {
              v160 = operator new[]();
              __src = (void *)v160;
              v191 = *v152;
              v192 = a4;
              v193 = v430;
              memcpy((void *)v160, v191, (((unint64_t)v430 + 63) >> 3) & 0x3FFFFFF8);
              v153 = v193;
              v180 = v193 > 0x40;
              a4 = v192;
              if (v180)
              {
                llvm::APInt::ashrSlowCase((unsigned int *)&__src, v157);
LABEL_413:
                if (v440 >= 0x41 && v439)
                  MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
                v439 = (unint64_t)__src;
                v440 = v430;
                goto LABEL_417;
              }
            }
            else
            {
              v160 = (uint64_t)*v152;
            }
            if (v153 == v157)
              v194 = 63;
            else
              v194 = v157;
            v195 = v160 << -(char)v153 >> -(char)v153 >> v194;
            if (v153)
              v196 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v153;
            else
              v196 = 0;
            __src = (void *)(v196 & v195);
            goto LABEL_413;
          }
          v157 = llvm::APInt::countTrailingZerosSlowCase(v152);
          v158 = v153 - 1;
        }
        else
        {
          v157 = v27 - 1;
          v158 = v153 - 1;
          v159 = (unint64_t *)v152;
          if (v153 < 0x41)
            goto LABEL_309;
        }
        v159 = &(*v152)[v158 >> 6];
        goto LABEL_309;
      case '8':
        v97 = (unsigned __int8 *)*((_QWORD *)this - 4);
LABEL_220:
        __src = v444;
        v430 = 0;
        if (!sub_1C4D89F84((uint64_t)&__src, v97))
          goto LABEL_484;
        goto LABEL_417;
      case '9':
        v94 = (unsigned __int8 *)*((_QWORD *)this - 4);
        __src = v444;
        v430 = 0;
        if (!sub_1C4D89F84((uint64_t)&__src, v94))
          goto LABEL_484;
        v89 = (const void **)v444[0];
        if (v440 <= 0x40)
        {
          v95 = *((_DWORD *)v444[0] + 2);
          if (v95 <= 0x40)
            goto LABEL_121;
        }
        if (&v439 == (unint64_t *)v444[0])
          goto LABEL_484;
        llvm::APInt::reallocate((uint64_t)&v439, *((_DWORD *)v444[0] + 2));
        v115 = v440;
        if (v440 <= 0x40)
        {
          v331 = (void *)*v89;
LABEL_747:
          v439 = (unint64_t)v331;
        }
        else
        {
          v116 = (void *)v439;
LABEL_189:
          v117 = *v89;
LABEL_190:
          memcpy(v116, v117, ((unint64_t)(v115 + 63) >> 3) & 0x3FFFFFF8);
        }
        goto LABEL_484;
      default:
        goto LABEL_484;
    }
  }
  if (v26 == 85)
  {
    v420 = a3;
    __src = 0;
    v425 = 0;
    matched = llvm::matchSelectPattern((uint64_t)this, (uint64_t)&__src, &v425, 0, 0);
    if (!matched)
    {
LABEL_484:
      a3 = v420;
      goto LABEL_485;
    }
    v40 = *(llvm::Type **)this;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
      v40 = (llvm::Type *)**((_QWORD **)v40 + 2);
    v41 = (unsigned __int8 *)v425;
    v42 = (unsigned __int8 *)__src;
    v43 = llvm::Type::getPrimitiveSizeInBits(v40);
    v44 = v43;
    if (matched == 8)
    {
      LODWORD(v430) = v43;
      if (v43 > 0x40)
      {
        v105 = &__src;
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
        v106 = v430;
        v104 = v44 - 1;
        if (v430 >= 0x41)
          v105 = (void **)((char *)__src + 8 * (v104 >> 6));
      }
      else
      {
        __src = 0;
        LOBYTE(v104) = v43 - 1;
        v105 = &__src;
        v106 = v43;
      }
      *v105 = (void *)((1 << v104) | (unint64_t)*v105);
      if (v440 >= 0x41 && v439)
        MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
      v439 = (unint64_t)__src;
      v440 = v106;
      LODWORD(v430) = v44;
      if (v44 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
      }
      else
      {
        if (v44)
          v107 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
        else
          LOBYTE(v107) = 0;
        __src = (void *)(v107 & 1);
      }
      if (v438 >= 0x41 && v437)
        MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
      v437 = (unint64_t)__src;
      v90 = v430;
LABEL_166:
      v438 = v90;
      goto LABEL_484;
    }
    if (matched != 7)
    {
      LODWORD(v419) = (_DWORD)a4;
      v421 = 0;
      __src = &v421;
      v430 = 0;
      if ((sub_1C4D89F84((uint64_t)&__src, v42) & 1) != 0
        || (v425 = &v421, v426 = 0, (sub_1C4D89F84((uint64_t)&v425, v41) & 1) != 0))
      {
        switch(matched)
        {
          case 1:
            LODWORD(v430) = v44;
            if (v44 > 0x40)
            {
              v113 = &__src;
              llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
              v112 = v44 - 1;
              if (v430 >= 0x41)
                v113 = (void **)((char *)__src + 8 * (v112 >> 6));
              v44 = v430;
            }
            else
            {
              __src = 0;
              LOBYTE(v112) = v44 - 1;
              v113 = &__src;
            }
            *v113 = (void *)((1 << v112) | (unint64_t)*v113);
            if (v440 >= 0x41 && v439)
              MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
            v439 = (unint64_t)__src;
            v440 = v44;
            goto LABEL_182;
          case 2:
LABEL_182:
            v114 = (unint64_t **)v421;
            goto LABEL_418;
          case 3:
            v169 = (const void **)v421;
            if (v440 > 0x40 || (v170 = *(_DWORD *)(v421 + 8), v170 > 0x40))
            {
              if (&v439 != (unint64_t *)v421)
              {
                llvm::APInt::reallocate((uint64_t)&v439, *(_DWORD *)(v421 + 8));
                if (v440 <= 0x40)
                  v439 = (unint64_t)*v169;
                else
                  memcpy((void *)v439, *v169, (((unint64_t)v440 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
            else
            {
              v439 = *(_QWORD *)v421;
              v440 = v170;
            }
            LODWORD(v430) = v44;
            if (v44 <= 0x40)
              goto LABEL_372;
            v119 = &__src;
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
            LODWORD(v185) = v44 - 1;
            if (v430 >= 0x41)
              v119 = (void **)((char *)__src + 8 * (v185 >> 6));
            goto LABEL_375;
          case 4:
            v89 = (const void **)v421;
            if (v440 <= 0x40 && (v95 = *(_DWORD *)(v421 + 8), v95 <= 0x40))
            {
LABEL_121:
              v96 = (void *)*v89;
LABEL_122:
              v439 = (unint64_t)v96;
              v440 = v95;
            }
            else if (&v439 != (unint64_t *)v421)
            {
              llvm::APInt::reallocate((uint64_t)&v439, *(_DWORD *)(v421 + 8));
              if (v440 <= 0x40)
                v439 = (unint64_t)*v89;
              else
                memcpy((void *)v439, *v89, (((unint64_t)v440 + 63) >> 3) & 0x3FFFFFF8);
            }
            goto LABEL_484;
          default:
            goto LABEL_484;
        }
      }
      goto LABEL_484;
    }
    LODWORD(v430) = v43;
    if (v43 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
    else
      __src = 0;
    if (v440 >= 0x41 && v439)
      MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
    v439 = (unint64_t)__src;
    v440 = v430;
    v430 = (uint64_t)v42;
    v45 = v41[16];
    if (v45 == 5)
    {
      if (*((_WORD *)v41 + 9) != 15
        || !sub_1C4E71060((uint64_t)&__src, *(llvm::Constant **)&v41[-32 * (*((_DWORD *)v41 + 5) & 0x7FFFFFF)]))
      {
        goto LABEL_198;
      }
      v46 = *(_QWORD *)&v41[-32 * (*((_DWORD *)v41 + 5) & 0x7FFFFFF) + 32];
    }
    else
    {
      if (v45 != 43 || !sub_1C4D8AC3C((uint64_t)&__src, *((llvm::Constant **)v41 - 8)))
        goto LABEL_198;
      v46 = *((_QWORD *)v41 - 4);
    }
    if (v430 == v46 && a6 && (v41[17] & 4) != 0)
    {
      LODWORD(v430) = v44;
      if (v44 <= 0x40)
      {
LABEL_372:
        if (v44)
          v185 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v44;
        else
          v185 = 0;
        __src = (void *)v185;
        LOBYTE(v185) = v44 - 1;
        v119 = &__src;
      }
      else
      {
        v119 = &__src;
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
        LODWORD(v185) = v44 - 1;
        if (v430 >= 0x41)
          v119 = (void **)((char *)__src + 8 * (v185 >> 6));
      }
LABEL_375:
      v120 = (unint64_t)*v119 & ~(1 << v185);
      goto LABEL_201;
    }
LABEL_198:
    LODWORD(v430) = v44;
    if (v44 > 0x40)
    {
      v119 = &__src;
      llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
      v118 = v44 - 1;
      if (v430 >= 0x41)
        v119 = (void **)((char *)__src + 8 * (v118 >> 6));
    }
    else
    {
      __src = 0;
      LOBYTE(v118) = v44 - 1;
      v119 = &__src;
    }
    v120 = (1 << v118) | (unint64_t)*v119;
LABEL_201:
    *v119 = (void *)v120;
    goto LABEL_422;
  }
  if (v26 == 84)
  {
    v31 = *((_QWORD *)this - 4);
    if (!v31
      || *(_BYTE *)(v31 + 16)
      || *(_QWORD *)(v31 + 24) != *((_QWORD *)this + 9)
      || (*(_BYTE *)(v31 + 33) & 0x20) == 0)
    {
      goto LABEL_485;
    }
    v32 = v440;
    v421 = 0;
    v33 = *(_DWORD *)(v31 + 36);
    if (v33 <= 282)
    {
      if (v33 <= 261)
      {
        if ((v33 - 52) < 3)
        {
          v34 = v440 + 1;
          v35 = v438;
          if (v438 > 0x40)
          {
            *(_QWORD *)v437 = v34;
            bzero((void *)(v437 + 8), (((unint64_t)(v35 + 63) >> 3) - 8) & 0xFFFFFFF8);
          }
          else
          {
            if (v438)
              v36 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v438;
            else
              v36 = 0;
            v437 = v36 & v34;
          }
          goto LABEL_485;
        }
        if (v33 != 1)
          goto LABEL_485;
        if (!sub_1C4D89CC8((uint64_t)&__src, ((llvm::Constant **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4]))
        {
          LODWORD(v430) = v32;
          if (v32 > 0x40)
          {
            v291 = &__src;
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
            v295 = v32 - 1;
            if (v430 >= 0x41)
              v291 = (void **)((char *)__src + 8 * (v295 >> 6));
          }
          else
          {
            __src = 0;
            LOBYTE(v295) = v32 - 1;
            v291 = &__src;
          }
          v292 = (1 << v295) | (unint64_t)*v291;
          goto LABEL_655;
        }
        LODWORD(v430) = v32;
        if (v32 <= 0x40)
        {
          if (!v32)
          {
LABEL_585:
            v257 = 0;
LABEL_646:
            __src = (void *)v257;
            LOBYTE(v257) = v32 - 1;
            v291 = &__src;
LABEL_647:
            v292 = (unint64_t)*v291 & ~(1 << v257);
LABEL_655:
            *v291 = (void *)v292;
            goto LABEL_656;
          }
LABEL_645:
          v257 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
          goto LABEL_646;
        }
        goto LABEL_833;
      }
      if ((v33 - 274) < 2)
      {
LABEL_432:
        v205 = (unsigned __int8 *)*((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
        __src = &v421;
        v430 = 0;
        if ((sub_1C4D89F84((uint64_t)&__src, v205) & 1) == 0)
        {
          v206 = (unsigned __int8 *)((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
          v425 = &v421;
          v426 = 0;
          if ((sub_1C4D89F84((uint64_t)&v425, v206) & 1) == 0)
            goto LABEL_485;
        }
        v207 = *(_DWORD *)(*((_QWORD *)this - 4) + 36);
        if (v207 <= 304)
        {
          if (v207 == 274)
          {
            v208 = (const void **)v421;
            if (v440 > 0x40 || (v209 = *(_DWORD *)(v421 + 8), v209 > 0x40))
            {
              if (&v439 != (unint64_t *)v421)
              {
                llvm::APInt::reallocate((uint64_t)&v439, *(_DWORD *)(v421 + 8));
                if (v440 <= 0x40)
                  v439 = (unint64_t)*v208;
                else
                  memcpy((void *)v439, *v208, (((unint64_t)v440 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
            else
            {
              v439 = *(_QWORD *)v421;
              v440 = v209;
            }
            goto LABEL_643;
          }
          LODWORD(v430) = v32;
          if (v32 > 0x40)
          {
            v289 = &__src;
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
            v288 = v32 - 1;
            if (v430 >= 0x41)
              v289 = (void **)((char *)__src + 8 * (v288 >> 6));
            v32 = v430;
          }
          else
          {
            __src = 0;
            LOBYTE(v288) = v32 - 1;
            v289 = &__src;
          }
          *v289 = (void *)((1 << v288) | (unint64_t)*v289);
          if (v440 >= 0x41 && v439)
            MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
          v439 = (unint64_t)__src;
          v440 = v32;
          goto LABEL_639;
        }
        if (v207 == 305)
          goto LABEL_574;
LABEL_639:
        v290 = (const void **)v421;
        LODWORD(v430) = *(_DWORD *)(v421 + 8);
        if (v430 > 0x40)
        {
          __src = (void *)operator new[]();
          memcpy(__src, *v290, (((unint64_t)v430 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          __src = *(void **)v421;
        }
LABEL_656:
        llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
        v296 = v430;
        v297 = __src;
        LODWORD(v430) = 0;
        if (v438 > 0x40 && v437)
        {
          MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
          v437 = (unint64_t)v297;
          v438 = v296;
          if (v430 < 0x41)
            goto LABEL_485;
          v298 = __src;
          if (!__src)
            goto LABEL_485;
          goto LABEL_696;
        }
LABEL_688:
        v437 = (unint64_t)v297;
        v438 = v296;
        goto LABEL_485;
      }
      if (v33 != 262)
        goto LABEL_485;
      v258 = (unsigned __int8 *)*((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      __src = &v421;
      v430 = 0;
      if ((sub_1C4D89F84((uint64_t)&__src, v258) & 1) == 0)
      {
        v259 = (unsigned __int8 *)((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
        v425 = &v421;
        v426 = 0;
        if ((sub_1C4D89F84((uint64_t)&v425, v259) & 1) == 0)
          goto LABEL_485;
      }
      v260 = (_QWORD *)v421;
      v261 = *(_DWORD *)(v421 + 8);
      v262 = v261 - 1;
      if (v261 >= 0x41)
        v260 = (_QWORD *)(*(_QWORD *)v421 + 8 * (v262 >> 6));
      if (((*v260 >> v262) & 1) != 0)
      {
        LODWORD(v430) = v32;
        if (v32 > 0x40)
        {
          v264 = &__src;
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
          v265 = v430;
          v263 = v32 - 1;
          if (v430 >= 0x41)
            v264 = (void **)((char *)__src + 8 * (v263 >> 6));
        }
        else
        {
          __src = 0;
          LOBYTE(v263) = v32 - 1;
          v264 = &__src;
          v265 = v32;
        }
        *v264 = (void *)((1 << v263) | (unint64_t)*v264);
        if (v440 >= 0x41 && v439)
          MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
        v439 = (unint64_t)__src;
        v440 = v265;
        LODWORD(v426) = v32;
        if (v32 > 0x40)
        {
          v267 = &v425;
          llvm::APInt::initSlowCase((llvm::APInt *)&v425, -1, 1);
          LODWORD(v266) = v32 - 1;
          if (v426 >= 0x41)
            v267 = (void **)((char *)v425 + 8 * (v266 >> 6));
          v32 = v426;
        }
        else
        {
          if (v32)
            v266 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
          else
            v266 = 0;
          v425 = (void *)v266;
          LOBYTE(v266) = v32 - 1;
          v267 = &v425;
        }
        *v267 = (void *)((unint64_t)*v267 & ~(1 << v266));
        if (v32 < 0x41)
        {
          v268 = (unint64_t)v425 + *(_QWORD *)v421;
          if (v32)
          {
LABEL_603:
            v269 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
LABEL_604:
            v270 = (void *)(v269 & v268);
            v425 = v270;
LABEL_605:
            LODWORD(v430) = v32;
            __src = v270;
            LODWORD(v426) = 0;
            goto LABEL_656;
          }
LABEL_738:
          v269 = 0;
          goto LABEL_604;
        }
        v383 = 0;
        v270 = v425;
        v384 = *(uint64_t **)v421;
        v351 = ((unint64_t)v32 + 63) >> 6;
        v385 = (unint64_t *)v425;
        v386 = v351;
        do
        {
          v387 = *v384++;
          v388 = v387 + *v385;
          v389 = v388 + 1 <= *v385;
          if (v383)
          {
            ++v388;
            v383 = v389;
          }
          else
          {
            v383 = v388 < *v385;
          }
          *v385++ = v388;
          --v386;
        }
        while (v386);
LABEL_828:
        *((_QWORD *)v270 + (v351 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
        goto LABEL_605;
      }
      LODWORD(v430) = v32;
      if (v32 > 0x40)
      {
        v309 = &__src;
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
        v305 = v430;
        v308 = v32 - 1;
        if (v430 >= 0x41)
          v309 = (void **)((char *)__src + 8 * (v308 >> 6));
      }
      else
      {
        __src = 0;
        LOBYTE(v308) = v32 - 1;
        v309 = &__src;
        v305 = v32;
      }
      *v309 = (void *)((1 << v308) | (unint64_t)*v309);
      if (v305 < 0x41)
      {
        v306 = (unint64_t)__src + *(_QWORD *)v421;
        if (v305)
          goto LABEL_676;
        goto LABEL_669;
      }
      v398 = 0;
      v310 = __src;
      v399 = *(uint64_t **)v421;
      v337 = ((unint64_t)v305 + 63) >> 6;
      v400 = (unint64_t *)__src;
      v401 = v337;
      do
      {
        v402 = *v399++;
        v403 = v402 + *v400;
        v404 = v403 + 1 <= *v400;
        if (v398)
        {
          ++v403;
          v398 = v404;
        }
        else
        {
          v398 = v403 < *v400;
        }
        *v400++ = v403;
        --v401;
      }
      while (v401);
      goto LABEL_795;
    }
    if (v33 <= 304)
    {
      if (v33 != 283)
      {
        if (v33 != 300)
          goto LABEL_485;
        v210 = (unsigned __int8 *)*((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
        __src = &v421;
        v430 = 0;
        if ((sub_1C4D89F84((uint64_t)&__src, v210) & 1) == 0)
        {
          v211 = (unsigned __int8 *)((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
          v425 = &v421;
          v426 = 0;
          if ((sub_1C4D89F84((uint64_t)&v425, v211) & 1) == 0)
            goto LABEL_485;
        }
LABEL_574:
        v255 = (const void **)v421;
        if (v440 > 0x40 || (v256 = *(_DWORD *)(v421 + 8), v256 > 0x40))
        {
          if (&v439 != (unint64_t *)v421)
          {
            llvm::APInt::reallocate((uint64_t)&v439, *(_DWORD *)(v421 + 8));
            if (v440 <= 0x40)
              v439 = (unint64_t)*v255;
            else
              memcpy((void *)v439, *v255, (((unint64_t)v440 + 63) >> 3) & 0x3FFFFFF8);
          }
        }
        else
        {
          v439 = *(_QWORD *)v421;
          v440 = v256;
        }
        goto LABEL_485;
      }
      v271 = (unsigned __int8 *)*((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      __src = &v421;
      v430 = 0;
      if (sub_1C4D89F84((uint64_t)&__src, v271))
      {
        v272 = (uint64_t **)v421;
        v273 = *(_DWORD *)(v421 + 8);
        v274 = v273 - 1;
        v275 = (_QWORD *)v421;
        if (v273 >= 0x41)
          v275 = (_QWORD *)(*(_QWORD *)v421 + 8 * (v274 >> 6));
        if (((*v275 >> v274) & 1) == 0)
        {
          LODWORD(v430) = v32;
          if (v32 > 0x40)
          {
            v315 = &__src;
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
            LODWORD(v314) = v32 - 1;
            if (v430 >= 0x41)
              v315 = (void **)((char *)__src + 8 * (v314 >> 6));
          }
          else
          {
            if (v32)
              v314 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
            else
              v314 = 0;
            __src = (void *)v314;
            LOBYTE(v314) = v32 - 1;
            v315 = &__src;
          }
          *v315 = (void *)((unint64_t)*v315 & ~(1 << v314));
          if (v430 > 0x40)
          {
            llvm::APInt::flipAllBitsSlowCase((uint64_t)&__src);
          }
          else
          {
            if ((_DWORD)v430)
              v316 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v430;
            else
              v316 = 0;
            __src = (void *)(v316 & ~(unint64_t)__src);
          }
          llvm::APInt::operator++((uint64_t)&__src);
          v317 = v430;
          if (v430 >= 0x41)
          {
            v405 = 0;
            v406 = (unint64_t *)__src;
            v407 = *v272;
            v408 = ((unint64_t)v430 + 63) >> 6;
            v409 = v408;
            do
            {
              v410 = *v407++;
              v411 = v410 + *v406;
              v412 = v411 + 1 <= *v406;
              if (v405)
              {
                ++v411;
                v405 = v412;
              }
              else
              {
                v405 = v411 < *v406;
              }
              *v406++ = v411;
              --v409;
            }
            while (v409);
            *((_QWORD *)__src + (v408 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v317;
            v317 = v430;
            v320 = (unint64_t)__src;
          }
          else
          {
            v318 = (unint64_t)*v272 + (_QWORD)__src;
            if ((_DWORD)v430)
              v319 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v430;
            else
              v319 = 0;
            v320 = v319 & v318;
            __src = (void *)(v319 & v318);
          }
          LODWORD(v430) = 0;
          if (v440 > 0x40 && v439)
          {
            MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
            v439 = v320;
            v440 = v317;
            if (v430 >= 0x41 && __src)
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          }
          else
          {
            v439 = v320;
            v440 = v317;
          }
LABEL_643:
          LODWORD(v430) = v32;
          if (v32 <= 0x40)
          {
            if (!v32)
              goto LABEL_585;
            goto LABEL_645;
          }
LABEL_833:
          v291 = &__src;
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, -1, 1);
          LODWORD(v257) = v32 - 1;
          if (v430 >= 0x41)
            v291 = (void **)((char *)__src + 8 * (v257 >> 6));
          goto LABEL_647;
        }
        LODWORD(v430) = v32;
        if (v32 > 0x40)
        {
          v277 = &__src;
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
          v278 = v430;
          v276 = v32 - 1;
          if (v430 >= 0x41)
            v277 = (void **)((char *)__src + 8 * (v276 >> 6));
        }
        else
        {
          __src = 0;
          LOBYTE(v276) = v32 - 1;
          v277 = &__src;
          v278 = v32;
        }
        *v277 = (void *)((1 << v276) | (unint64_t)*v277);
        if (v440 >= 0x41 && v439)
          MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
        v439 = (unint64_t)__src;
        v440 = v278;
        v279 = (uint64_t **)v421;
        LODWORD(v426) = v32;
        if (v32 > 0x40)
        {
          v281 = &v425;
          llvm::APInt::initSlowCase((llvm::APInt *)&v425, 0, 0);
          v280 = v32 - 1;
          if (v426 >= 0x41)
            v281 = (void **)((char *)v425 + 8 * (v280 >> 6));
        }
        else
        {
          v425 = 0;
          LOBYTE(v280) = v32 - 1;
          v281 = &v425;
        }
        *v281 = (void *)((1 << v280) | (unint64_t)*v281);
        if (v426 > 0x40)
        {
          llvm::APInt::flipAllBitsSlowCase((uint64_t)&v425);
        }
        else
        {
          if ((_DWORD)v426)
            v282 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v426;
          else
            v282 = 0;
          v425 = (void *)(v282 & ~(unint64_t)v425);
        }
        llvm::APInt::operator++((uint64_t)&v425);
        v283 = v426;
        if (v426 >= 0x41)
        {
          v390 = 0;
          v391 = (unint64_t *)v425;
          v392 = *v279;
          v393 = ((unint64_t)v426 + 63) >> 6;
          v394 = v393;
          do
          {
            v395 = *v392++;
            v396 = v395 + *v391;
            v397 = v396 + 1 <= *v391;
            if (v390)
            {
              ++v396;
              v390 = v397;
            }
            else
            {
              v390 = v396 < *v391;
            }
            *v391++ = v396;
            --v394;
          }
          while (v394);
          *((_QWORD *)v425 + (v393 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v283;
          v283 = v426;
          v285 = v425;
        }
        else
        {
          if ((_DWORD)v426)
            v284 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v426;
          else
            v284 = 0;
          v285 = (void *)(v284 & ((unint64_t)*v279 + (_QWORD)v425));
          v425 = v285;
        }
        LODWORD(v430) = v283;
        __src = v285;
        LODWORD(v426) = 0;
        llvm::APInt::operator+=((uint64_t)&__src, 1uLL);
        v286 = v430;
        v287 = __src;
        LODWORD(v430) = 0;
        if (v438 > 0x40 && v437)
        {
          MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
          v437 = (unint64_t)v287;
          v438 = v286;
          if (v430 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        }
        else
        {
          v437 = (unint64_t)__src;
          v438 = v286;
        }
        v313 = v426;
LABEL_694:
        if (v313 < 0x41)
          goto LABEL_485;
        v298 = v425;
        if (!v425)
          goto LABEL_485;
LABEL_696:
        MEMORY[0x1CAA32F9C](v298, 0x1000C8000313F17);
        goto LABEL_485;
      }
      v299 = (unsigned __int8 *)((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
      __src = &v421;
      v430 = 0;
      if (!sub_1C4D89F84((uint64_t)&__src, v299))
        goto LABEL_485;
      v300 = (_QWORD *)v421;
      v301 = *(_DWORD *)(v421 + 8);
      v302 = v301 - 1;
      if (v301 >= 0x41)
        v300 = (_QWORD *)(*(_QWORD *)v421 + 8 * (v302 >> 6));
      if (((*v300 >> v302) & 1) != 0)
      {
        LODWORD(v430) = v32;
        if (v32 > 0x40)
        {
          v304 = &__src;
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
          v305 = v430;
          v303 = v32 - 1;
          if (v430 >= 0x41)
            v304 = (void **)((char *)__src + 8 * (v303 >> 6));
        }
        else
        {
          __src = 0;
          LOBYTE(v303) = v32 - 1;
          v304 = &__src;
          v305 = v32;
        }
        *v304 = (void *)((1 << v303) | (unint64_t)*v304);
        if (v305 < 0x41)
        {
          v306 = (unint64_t)__src - *(_QWORD *)v421;
          if (v305)
          {
LABEL_676:
            v307 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v305;
            goto LABEL_677;
          }
LABEL_669:
          v307 = 0;
LABEL_677:
          v310 = (_QWORD *)(v307 & v306);
          __src = (void *)(v307 & v306);
          goto LABEL_678;
        }
        v335 = 0;
        v310 = __src;
        v336 = *(unint64_t **)v421;
        v337 = ((unint64_t)v305 + 63) >> 6;
        v338 = (unint64_t *)__src;
        v339 = v337;
        do
        {
          v340 = *v336++;
          v341 = *v338 - v340;
          v342 = *v338 < v340;
          v343 = *v338 + ~v340;
          if (v335)
          {
            v335 = v343 >= *v338;
          }
          else
          {
            v343 = v341;
            v335 = v342;
          }
          *v338++ = v343;
          --v339;
        }
        while (v339);
LABEL_795:
        v310[(v337 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v305;
LABEL_678:
        LODWORD(v430) = 0;
        if (v440 > 0x40 && v439)
          MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
        v439 = (unint64_t)v310;
        v440 = v305;
        LODWORD(v426) = v32;
        if (v32 > 0x40)
        {
          v312 = &v425;
          llvm::APInt::initSlowCase((llvm::APInt *)&v425, -1, 1);
          LODWORD(v311) = v32 - 1;
          if (v426 >= 0x41)
            v312 = (void **)((char *)v425 + 8 * (v311 >> 6));
        }
        else
        {
          if (v32)
            v311 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
          else
            v311 = 0;
          v425 = (void *)v311;
          LOBYTE(v311) = v32 - 1;
          v312 = &v425;
        }
        *v312 = (void *)((unint64_t)*v312 & ~(1 << v311));
        llvm::APInt::operator+=((uint64_t)&v425, 1uLL);
        v296 = v426;
        v297 = v425;
        LODWORD(v426) = 0;
        if (v438 <= 0x40 || !v437)
          goto LABEL_688;
        MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
        v313 = v426;
        v437 = (unint64_t)v297;
        v438 = v296;
        goto LABEL_694;
      }
      LODWORD(v430) = v32;
      if (v32 > 0x40)
      {
        v324 = &__src;
        llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
        v325 = v430;
        v323 = v32 - 1;
        if (v430 >= 0x41)
          v324 = (void **)((char *)__src + 8 * (v323 >> 6));
      }
      else
      {
        __src = 0;
        LOBYTE(v323) = v32 - 1;
        v324 = &__src;
        v325 = v32;
      }
      *v324 = (void *)((1 << v323) | (unint64_t)*v324);
      if (v440 >= 0x41 && v439)
        MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
      v439 = (unint64_t)__src;
      v440 = v325;
      LODWORD(v426) = v32;
      if (v32 > 0x40)
      {
        v327 = &v425;
        llvm::APInt::initSlowCase((llvm::APInt *)&v425, -1, 1);
        LODWORD(v326) = v32 - 1;
        if (v426 >= 0x41)
          v327 = (void **)((char *)v425 + 8 * (v326 >> 6));
        v32 = v426;
      }
      else
      {
        if (v32)
          v326 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
        else
          v326 = 0;
        v425 = (void *)v326;
        LOBYTE(v326) = v32 - 1;
        v327 = &v425;
      }
      *v327 = (void *)((unint64_t)*v327 & ~(1 << v326));
      v200 = (_QWORD *)v421;
      if (v32 >= 0x41)
      {
        v349 = 0;
        v270 = v425;
        v350 = *(unint64_t **)v421;
        v351 = ((unint64_t)v32 + 63) >> 6;
        v352 = (unint64_t *)v425;
        v353 = v351;
        do
        {
          v354 = *v350++;
          v355 = *v352 - v354;
          v356 = *v352 < v354;
          v357 = *v352 + ~v354;
          if (v349)
          {
            v349 = v357 >= *v352;
          }
          else
          {
            v357 = v355;
            v349 = v356;
          }
          *v352++ = v357;
          --v353;
        }
        while (v353);
        goto LABEL_828;
      }
    }
    else
    {
      if ((v33 - 305) < 2)
        goto LABEL_432;
      if (v33 != 311)
        goto LABEL_485;
      v197 = (unsigned __int8 *)*((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
      __src = &v421;
      v430 = 0;
      if (sub_1C4D89F84((uint64_t)&__src, v197))
        goto LABEL_639;
      v198 = (unsigned __int8 *)((_QWORD *)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))[4];
      __src = &v421;
      v430 = 0;
      if (!sub_1C4D89F84((uint64_t)&__src, v198))
        goto LABEL_485;
      LODWORD(v426) = v32;
      if (v32 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v425, -1, 1);
        v32 = v426;
        v200 = (_QWORD *)v421;
        if (v426 >= 0x41)
        {
          v366 = 0;
          v270 = v425;
          v367 = *(unint64_t **)v421;
          v368 = ((unint64_t)v426 + 63) >> 6;
          v369 = (unint64_t *)v425;
          v370 = v368;
          do
          {
            v371 = *v367++;
            v372 = *v369 - v371;
            v373 = *v369 < v371;
            v374 = *v369 + ~v371;
            if (v366)
            {
              v366 = v374 >= *v369;
            }
            else
            {
              v374 = v372;
              v366 = v373;
            }
            *v369++ = v374;
            --v370;
          }
          while (v370);
          *((_QWORD *)v270 + (v368 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v32;
          goto LABEL_605;
        }
      }
      else
      {
        if (v32)
          v199 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v32);
        else
          v199 = 0;
        v425 = v199;
        v200 = (_QWORD *)v421;
      }
    }
    v268 = (unint64_t)v425 - *v200;
    if (v32)
      goto LABEL_603;
    goto LABEL_738;
  }
  if (v26 - 69 <= 1)
  {
    v47 = *(llvm::Type **)this;
    if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12)
      v47 = (llvm::Type *)**((_QWORD **)v47 + 2);
    v48 = llvm::Type::getPrimitiveSizeInBits(v47);
    v49 = v48;
    v50 = *((_DWORD *)this + 5);
    if ((v50 & 0x40000000) != 0)
      v51 = (uint64_t **)*((_QWORD *)this - 1);
    else
      v51 = (uint64_t **)((char *)this - 32 * (v50 & 0x7FFFFFF));
    v98 = **v51;
    if ((*(_DWORD *)(v98 + 8) & 0xFE) == 0x12)
      v99 = *(unsigned __int8 *)(**(_QWORD **)(v98 + 16) + 8);
    else
      v99 = *(_DWORD *)(v98 + 8);
    if (!v99)
    {
      if (v26 == 70 && v48 >= 0x11)
      {
        LODWORD(v430) = v48;
        if (v48 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, -65504, 0);
        else
          __src = (void *)((0xFFFFFFFFFFFFFFFFLL >> -(char)v48) & 0xFFFFFFFFFFFF0020);
        if (v440 >= 0x41 && v439)
          MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
        v439 = (unint64_t)__src;
        v440 = v430;
        LODWORD(v430) = v49;
        if (v49 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 65505, 0);
        else
          __src = (void *)((0xFFFFFFFFFFFFFFFFLL >> -(char)v49) & 0xFFE1);
        if (v438 >= 0x41 && v437)
          MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
        v437 = (unint64_t)__src;
        v438 = v430;
        v26 = *((unsigned __int8 *)this + 16);
      }
      if (v26 == 69 && v49 >= 0x10)
      {
        LODWORD(v430) = v49;
        if (v49 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&__src, 65505, 0);
        else
          __src = (void *)((0xFFFFFFFFFFFFFFFFLL >> -(char)v49) & 0xFFE1);
        if (v438 >= 0x41 && v437)
          MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
        v437 = (unint64_t)__src;
        v438 = v430;
      }
    }
  }
LABEL_485:
  v436 = v440;
  if (v440 > 0x40)
  {
    *(_QWORD *)v435 = operator new[]();
    memcpy(*(void **)v435, (const void *)v439, (((unint64_t)v436 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)v435 = v439;
  }
  LODWORD(v434) = v438;
  if (v438 > 0x40)
  {
    *(_QWORD *)v433 = operator new[]();
    memcpy(*(void **)v433, (const void *)v437, (((unint64_t)v434 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)v433 = v437;
  }
  sub_1C4E8FBB0((uint64_t)v435, (uint64_t *)v433, (llvm::APInt *)a8);
  if (v434 >= 0x41 && *(_QWORD *)v433)
    MEMORY[0x1CAA32F9C](*(_QWORD *)v433, 0x1000C8000313F17);
  if (v436 >= 0x41 && *(_QWORD *)v435)
    MEMORY[0x1CAA32F9C](*(_QWORD *)v435, 0x1000C8000313F17);
  if (*((unsigned __int8 *)this + 16) < 0x1Cu || !a6 || (*((_BYTE *)this + 23) & 0x20) == 0)
    goto LABEL_521;
  v222 = ***(_QWORD ***)this;
  __src = this;
  v223 = *(_DWORD *)(v222 + 2496);
  if (v223)
  {
    v224 = *(_QWORD *)(v222 + 2480);
    v225 = v223 - 1;
    v226 = v225 & ((this >> 4) ^ (this >> 9));
    v227 = (llvm **)(v224 + 40 * v226);
    v228 = *v227;
    if (*v227 == this)
      goto LABEL_510;
    v229 = 0;
    v230 = 1;
    while (v228 != (llvm *)-4096)
    {
      if (v229)
        v231 = 0;
      else
        v231 = v228 == (llvm *)-8192;
      if (v231)
        v229 = v227;
      v232 = v226 + v230++;
      v226 = v232 & v225;
      v227 = (llvm **)(v224 + 40 * v226);
      v228 = *v227;
      if (*v227 == this)
        goto LABEL_510;
    }
    if (v229)
      v244 = v229;
    else
      v244 = v227;
  }
  else
  {
    v244 = 0;
  }
  v227 = (llvm **)sub_1C541AB24(v222 + 2480, (uint64_t)&__src, (uint64_t *)&__src, v244);
  v245 = (llvm *)__src;
  v227[3] = 0;
  v227[4] = 0;
  *v227 = v245;
  v227[1] = (llvm *)(v227 + 3);
  v227[2] = (llvm *)0x100000000;
LABEL_510:
  v233 = *((unsigned int *)v227 + 4);
  if ((_DWORD)v233)
  {
    v234 = (uint64_t *)((char *)v227[1] + 8);
    v235 = 16 * v233;
    while (*((_DWORD *)v234 - 2) != 4)
    {
      v234 += 2;
      v235 -= 16;
      if (!v235)
        goto LABEL_521;
    }
    if (*v234)
    {
      llvm::getConstantRangeFromMetadata(*v234, (uint64_t)&v425);
      llvm::ConstantRange::intersectWith((uint64_t)a8, (llvm::ConstantRange *)&v425, 0, (uint64_t)&__src);
      if (*((_DWORD *)a8 + 2) >= 0x41u && *a8)
        MEMORY[0x1CAA32F9C](*a8, 0x1000C8000313F17);
      *a8 = __src;
      *((_DWORD *)a8 + 2) = v430;
      LODWORD(v430) = 0;
      if (*((_DWORD *)a8 + 6) >= 0x41u && (v413 = a8[2]) != 0)
      {
        MEMORY[0x1CAA32F9C](v413, 0x1000C8000313F17);
        v414 = v430;
        a8[2] = v431;
        *((_DWORD *)a8 + 6) = v432;
        LODWORD(v432) = 0;
        if (v414 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      }
      else
      {
        a8[2] = v431;
        *((_DWORD *)a8 + 6) = v432;
        LODWORD(v432) = 0;
      }
      if (v428 >= 0x41 && v427)
        MEMORY[0x1CAA32F9C](v427, 0x1000C8000313F17);
      if (v426 >= 0x41 && v425)
        MEMORY[0x1CAA32F9C](v425, 0x1000C8000313F17);
    }
  }
LABEL_521:
  if (a7 && a3)
  {
    if (!*(_BYTE *)(a7 + 184))
      llvm::AssumptionCache::scanFunction((llvm::AssumptionCache *)a7);
    v236 = *(_QWORD *)(a7 + 160);
    v237 = *(_DWORD *)(a7 + 176);
    if (v237)
    {
      v239 = v237 - 1;
      v240 = (v237 - 1) & ((this >> 4) ^ (this >> 9));
      v238 = v236 + 88 * v240;
      v241 = *(llvm **)(v238 + 24);
      if (v241 == this)
        goto LABEL_527;
      v242 = 1;
      while (v241 != (llvm *)-4096)
      {
        v243 = v240 + v242++;
        v240 = v243 & v239;
        v238 = v236 + 88 * (v243 & v239);
        v241 = *(llvm **)(v238 + 24);
        if (v241 == this)
          goto LABEL_527;
      }
    }
    v238 = v236 + 88 * v237;
LABEL_527:
    if (v238 != v236 + 88 * v237)
    {
      v246 = *(unsigned int *)(v238 + 48);
      if ((_DWORD)v246)
      {
        LODWORD(v420) = v14 + 1;
        v247 = 32 * v246;
        v248 = (llvm **)(*(_QWORD *)(v238 + 40) + 16);
        do
        {
          v249 = a3;
          v250 = *v248;
          if (*v248)
          {
            if (llvm::isValidAssumeForContext(*v248, a3, a4, v221))
            {
              v252 = *((_QWORD *)v250 - 4 * (*((_DWORD *)v250 + 5) & 0x7FFFFFF));
              if (v252)
              {
                if (*(_BYTE *)(v252 + 16) == 81 && *(llvm **)(v252 - 64) == this)
                {
                  llvm::computeConstantRange((uint64_t *)&__src, *(llvm **)(v252 - 32), 0, a6, a7, v250, a4, (const llvm::DominatorTree *)v420, v251);
                  llvm::ConstantRange::makeAllowedICmpRegion(*(_WORD *)(v252 + 18) & 0x3F, (uint64_t)&__src, (uint64_t)&v421, v416, (uint64_t)v417, __n, (int)v419, v420, v421, v422, v423, v424, (int)v425, v426, v427, v428, (int)__src, v430, v431,
                    v432,
                    v433[0],
                    v434,
                    v435[0]);
                  llvm::ConstantRange::intersectWith((uint64_t)a8, (llvm::ConstantRange *)&v421, 0, (uint64_t)&v425);
                  if (*((_DWORD *)a8 + 2) >= 0x41u && *a8)
                    MEMORY[0x1CAA32F9C](*a8, 0x1000C8000313F17);
                  *a8 = v425;
                  *((_DWORD *)a8 + 2) = v426;
                  LODWORD(v426) = 0;
                  if (*((_DWORD *)a8 + 6) >= 0x41u && (v253 = a8[2]) != 0)
                  {
                    MEMORY[0x1CAA32F9C](v253, 0x1000C8000313F17);
                    v254 = v426;
                    a8[2] = v427;
                    *((_DWORD *)a8 + 6) = v428;
                    LODWORD(v428) = 0;
                    if (v254 >= 0x41 && v425)
                      MEMORY[0x1CAA32F9C](v425, 0x1000C8000313F17);
                  }
                  else
                  {
                    a8[2] = v427;
                    *((_DWORD *)a8 + 6) = v428;
                    LODWORD(v428) = 0;
                  }
                  if (v424 >= 0x41 && v423)
                    MEMORY[0x1CAA32F9C](v423, 0x1000C8000313F17);
                  if (v422 >= 0x41 && v421)
                    MEMORY[0x1CAA32F9C](v421, 0x1000C8000313F17);
                  if (v432 >= 0x41 && v431)
                    MEMORY[0x1CAA32F9C](v431, 0x1000C8000313F17);
                  if (v430 >= 0x41 && __src)
                    MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
                }
              }
            }
          }
          v248 += 4;
          v247 -= 32;
          a3 = v249;
        }
        while (v247);
      }
    }
  }
  if (v438 >= 0x41 && v437)
    MEMORY[0x1CAA32F9C](v437, 0x1000C8000313F17);
  if (v440 >= 0x41 && v439)
    MEMORY[0x1CAA32F9C](v439, 0x1000C8000313F17);
}

uint64_t sub_1C4F9459C(uint64_t a1, unsigned int a2, llvm::DataLayout *this)
{
  unsigned int v4;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t *v18;
  unsigned int v19;
  unint64_t v20;
  llvm::StructLayout *StructLayout;
  llvm::UndefValue *AggregateElement;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  llvm::UndefValue **v34;
  uint64_t v35;

  v4 = a2;
  v6 = *(_BYTE *)(a1 + 16) != 62 || a1 == 0;
  v7 = 64;
  if (v6)
    v7 = 24;
  v8 = *(_QWORD *)(a1 + v7);
  v9 = *(_DWORD *)(a1 + 20);
  if ((v9 & 0x40000000) != 0)
    v10 = *(_QWORD *)(a1 - 8);
  else
    v10 = a1 - 32 * (v9 & 0x7FFFFFF);
  v34 = (llvm::UndefValue **)(v10 + 32);
  v35 = v8 | 4;
  v11 = a2 - 1;
  if (a2 != 1)
  {
    do
    {
      sub_1C4774E38((uint64_t)&v34);
      --v11;
    }
    while (v11);
    v9 = *(_DWORD *)(a1 + 20);
  }
  v12 = v9 & 0x7FFFFFF;
  if ((v9 & 0x7FFFFFF) != v4)
  {
    v13 = 0;
    while (1)
    {
      v14 = *(_DWORD *)(a1 + 20);
      if ((v14 & 0x40000000) != 0)
        v15 = *(_QWORD *)(a1 - 8);
      else
        v15 = a1 - 32 * (v14 & 0x7FFFFFF);
      v16 = *(_QWORD *)(v15 + 32 * v4);
      if (v16)
        v17 = *(_BYTE *)(v16 + 16) == 16;
      else
        v17 = 0;
      if (!v17)
        return 0;
      v18 = (uint64_t *)(v16 + 24);
      v19 = *(_DWORD *)(v16 + 32);
      if (v19 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v16 + 24)) == v19)
          goto LABEL_44;
      }
      else if (!*v18)
      {
        goto LABEL_44;
      }
      v20 = v35 & 0xFFFFFFFFFFFFFFF8;
      if ((v35 & 4) != 0 || !v20)
      {
        if ((v35 & 4) == 0 || !v20)
        {
          AggregateElement = *v34;
          if (!*v34 || *((_BYTE *)AggregateElement + 16) != 16)
            AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
          v25 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
          v23 = (unsigned int *)((char *)AggregateElement + 24);
          v24 = v25;
          if (v23[2] < 0x41)
            v24 = v23;
          v20 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 8 * *v24);
        }
        sub_1C4768AD0((uint64_t)this, v20);
        v27 = v26;
        v29 = v28 == 1;
        llvm::DataLayout::getAlignment((uint64_t)this, v20);
        if (v29)
          return 0;
        v31 = *(_DWORD *)(v16 + 32);
        if (v31 > 0x40)
          v32 = *(_QWORD *)*v18;
        else
          v32 = *v18 << -(char)v31 >> -(char)v31;
        v13 += v32 * (((1 << v30) + ((unint64_t)(v27 + 7) >> 3) - 1) & -(1 << v30));
      }
      else
      {
        StructLayout = llvm::DataLayout::getStructLayout(this, (llvm::StructType *)(v35 & 0xFFFFFFFFFFFFFFF8));
        if (*(_DWORD *)(v16 + 32) >= 0x41u)
          v18 = (uint64_t *)*v18;
        v13 += *((_QWORD *)StructLayout + *(unsigned int *)v18 + 2);
      }
LABEL_44:
      ++v4;
      sub_1C4774E38((uint64_t)&v34);
      if (v12 == v4)
        return v13;
    }
  }
  return 0;
}

uint64_t sub_1C4F947E8(llvm::Constant *a1, llvm::APInt *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  int v6;
  const llvm::DataLayout *v10;
  uint64_t PointerTypeSizeInBits;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  unsigned int v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  char *v37;
  int v38;
  uint64_t **v39;
  int v40;
  _QWORD *v41;
  int v42;
  char *v43;
  int v44;
  _QWORD *v45;
  int v46;
  char *v47;
  int v48;
  _QWORD *v49;
  int v50;
  char *v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  int v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  llvm::APInt *v62;
  llvm::APInt *v63;
  unsigned int *v64;
  int matched;
  void *v66;
  int v67;
  unsigned int v68;
  int v69;
  _QWORD *v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unsigned __int8 **v80;
  int v81;
  int v82;
  int v83;
  llvm::Constant *v84;
  unsigned __int8 *v85;
  int v86;
  _QWORD *v87;
  int v88;
  char *v89;
  unsigned __int8 *v90;
  int v91;
  _QWORD *v92;
  int v93;
  char *v94;
  unsigned __int8 *v95;
  unsigned int v96;
  unsigned __int8 *v97;
  llvm::APInt *v98;
  unsigned int v99;
  unint64_t v100;
  uint64_t v102;
  int v103;
  _QWORD *v104;
  unsigned __int8 *v105;
  int v106;
  uint64_t *v107;
  unsigned __int8 *v108;
  int v109;
  char *v110;
  int v111;
  unsigned int v112;
  BOOL v113;
  int v114;
  unsigned int v115;
  llvm::APInt *v116;
  unsigned int v117;
  unint64_t v118;
  unsigned int v119;
  int v120;
  unsigned int v121;
  int v122;
  llvm::APInt *v123;
  llvm::APInt *v124;
  int v125;
  int64_t v126;
  BOOL v127;
  unint64_t v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  int64_t v132;
  unint64_t v133;
  int v134;
  unsigned int v135;
  _BOOL4 v136;
  char *v137;
  unsigned int v138;
  _BOOL4 v139;
  char *v140;
  size_t v141;
  _QWORD *v142;
  size_t v143;
  _QWORD *v144;
  void **v145;
  int v146;
  char *v147;
  unsigned int v148;
  unsigned int v149;
  void **v150;
  int v151;
  _QWORD *v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int v155;
  unsigned int v156;
  int v157;
  llvm::Constant *v158;
  int v159;
  uint64_t v160;
  unsigned int v161;
  unsigned int v162;
  uint64_t v163;
  int v164;
  char *v165;
  unsigned int v166;
  int v167;
  llvm::Type *v168;
  llvm::APInt *v169;
  llvm::UndefValue *AggregateElement;
  unsigned int v171;
  unsigned int v172;
  unsigned int v173;
  int v174;
  char *v175;
  unsigned int v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  unint64_t v189;
  void *__src[2];
  _OWORD v191[2];
  llvm::APInt *v192;
  llvm::APInt *v193;
  llvm::APInt *v194;
  uint64_t v195;

  v5 = *(_QWORD *)a1;
  v6 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
  if (v6 == 19)
    return 1;
  if ((v6 & 0xFE) == 0x12)
  {
    v5 = **(_QWORD **)(v5 + 16);
    v6 = *(unsigned __int8 *)(v5 + 8);
  }
  v10 = *(const llvm::DataLayout **)a4;
  if (v6 == 15)
  {
    PointerTypeSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits((uint64_t)v10, v5);
  }
  else
  {
    sub_1C4768AD0((uint64_t)v10, v5);
    PointerTypeSizeInBits = v13;
    if ((_DWORD)v12 == 1)
  }
  if (a3 == 6)
    return 1;
  v15 = *((unsigned __int8 *)a1 + 16);
  if (v15 > 0x1B || v15 == 5)
  {
    if (v15 > 0x1B)
      v17 = v15 - 28;
    else
      v17 = *((unsigned __int16 *)a1 + 9);
    v16 = 1;
    switch(v17)
    {
      case 0xDu:
        v40 = *((_DWORD *)a1 + 5);
        if ((v40 & 0x40000000) != 0)
          v41 = (_QWORD *)*((_QWORD *)a1 - 1);
        else
          v41 = (_QWORD *)((char *)a1 - 32 * (v40 & 0x7FFFFFF));
        v73 = sub_1C4F85990(*v41, a3 + 1, a4);
        if ((_DWORD)v73 == 1)
          goto LABEL_285;
        v74 = v73;
        v75 = *((_DWORD *)a1 + 5);
        if ((v75 & 0x40000000) != 0)
          v76 = (char *)*((_QWORD *)a1 - 1);
        else
          v76 = (char *)a1 - 32 * (v75 & 0x7FFFFFF);
        v105 = (unsigned __int8 *)*((_QWORD *)v76 + 4);
        if (!v105 || v105[16] > 0x14u || !llvm::Constant::isAllOnesValue((llvm::Constant *)v105))
          goto LABEL_243;
        LODWORD(__src[1]) = PointerTypeSizeInBits;
        if (PointerTypeSizeInBits > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
          DWORD2(v191[0]) = PointerTypeSizeInBits;
          llvm::APInt::initSlowCase((llvm::APInt *)v191, 0, 0);
        }
        else
        {
          DWORD2(v191[0]) = PointerTypeSizeInBits;
          __src[0] = 0;
          *(_QWORD *)&v191[0] = 0;
        }
        v106 = *((_DWORD *)a1 + 5);
        if ((v106 & 0x40000000) != 0)
          v107 = (uint64_t *)*((_QWORD *)a1 - 1);
        else
          v107 = (uint64_t *)((char *)a1 - 32 * (v106 & 0x7FFFFFF));
        sub_1C4F82B7C(*v107, (int8x8_t *)__src, a3 + 1, (const llvm::DataLayout **)a4);
        v135 = __src[1];
        if (LODWORD(__src[1]) > 0x40)
        {
          v141 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
          v142 = (_QWORD *)operator new[]();
          memcpy(v142, __src[0], v141);
          *v142 |= 1uLL;
          LODWORD(v195) = v135;
          v194 = (llvm::APInt *)v142;
          LODWORD(v141) = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v194);
          MEMORY[0x1CAA32F9C](v142, 0x1000C8000313F17);
          if ((_DWORD)v141 != v135)
          {
            v135 = __src[1];
            v137 = (char *)__src[0];
LABEL_237:
            v145 = (void **)&v137[8 * ((v135 - 1) >> 6)];
            if (v135 < 0x41)
              v145 = __src;
            v136 = (((unint64_t)*v145 >> (v135 - 1)) & 1) == 0;
            v14 = v74;
LABEL_240:
            if (DWORD2(v191[0]) >= 0x41 && *(_QWORD *)&v191[0])
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v191[0], 0x1000C8000313F17);
            if (LODWORD(__src[1]) >= 0x41 && __src[0])
              MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
            if (!v136)
              return v14;
LABEL_243:
            v146 = *((_DWORD *)a1 + 5);
            if ((v146 & 0x40000000) != 0)
              v147 = (char *)*((_QWORD *)a1 - 1);
            else
              v147 = (char *)a1 - 32 * (v146 & 0x7FFFFFF);
            v148 = sub_1C4F85990(*((_QWORD *)v147 + 4), a3 + 1, a4);
            if (v148 != 1)
            {
              if (v148 >= v74)
                v149 = v74;
              else
                v149 = v148;
              return v149 - 1;
            }
            goto LABEL_285;
          }
        }
        else if (LODWORD(__src[1]))
        {
          v136 = 0;
          v137 = (char *)__src[0];
          v14 = PointerTypeSizeInBits;
          if ((((unint64_t)__src[0] | 1) & (0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))) == 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))
            goto LABEL_240;
          goto LABEL_237;
        }
        v136 = 0;
        v14 = PointerTypeSizeInBits;
        goto LABEL_240;
      case 0xEu:
      case 0x10u:
      case 0x12u:
      case 0x13u:
      case 0x15u:
      case 0x16u:
      case 0x18u:
      case 0x1Au:
        goto LABEL_286;
      case 0xFu:
        v42 = *((_DWORD *)a1 + 5);
        if ((v42 & 0x40000000) != 0)
          v43 = (char *)*((_QWORD *)a1 - 1);
        else
          v43 = (char *)a1 - 32 * (v42 & 0x7FFFFFF);
        v77 = sub_1C4F85990(*((_QWORD *)v43 + 4), a3 + 1, a4);
        if ((_DWORD)v77 == 1)
          goto LABEL_285;
        v78 = v77;
        v79 = *((_DWORD *)a1 + 5);
        if ((v79 & 0x40000000) != 0)
          v80 = (unsigned __int8 **)*((_QWORD *)a1 - 1);
        else
          v80 = (unsigned __int8 **)((char *)a1 - 32 * (v79 & 0x7FFFFFF));
        v108 = *v80;
        if (!*v80 || v108[16] > 0x14u || !llvm::Constant::isNullValue((llvm::Constant *)v108))
          goto LABEL_257;
        LODWORD(__src[1]) = PointerTypeSizeInBits;
        if (PointerTypeSizeInBits > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
          DWORD2(v191[0]) = PointerTypeSizeInBits;
          llvm::APInt::initSlowCase((llvm::APInt *)v191, 0, 0);
        }
        else
        {
          DWORD2(v191[0]) = PointerTypeSizeInBits;
          __src[0] = 0;
          *(_QWORD *)&v191[0] = 0;
        }
        v109 = *((_DWORD *)a1 + 5);
        if ((v109 & 0x40000000) != 0)
          v110 = (char *)*((_QWORD *)a1 - 1);
        else
          v110 = (char *)a1 - 32 * (v109 & 0x7FFFFFF);
        sub_1C4F82B7C(*((_QWORD *)v110 + 4), (int8x8_t *)__src, a3 + 1, (const llvm::DataLayout **)a4);
        v138 = __src[1];
        if (LODWORD(__src[1]) > 0x40)
        {
          v143 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
          v144 = (_QWORD *)operator new[]();
          memcpy(v144, __src[0], v143);
          *v144 |= 1uLL;
          LODWORD(v195) = v138;
          v194 = (llvm::APInt *)v144;
          LODWORD(v143) = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v194);
          MEMORY[0x1CAA32F9C](v144, 0x1000C8000313F17);
          if ((_DWORD)v143 != v138)
          {
            v138 = __src[1];
            v140 = (char *)__src[0];
LABEL_251:
            v150 = (void **)&v140[8 * ((v138 - 1) >> 6)];
            if (v138 < 0x41)
              v150 = __src;
            v139 = (((unint64_t)*v150 >> (v138 - 1)) & 1) == 0;
            v14 = v78;
LABEL_254:
            if (DWORD2(v191[0]) >= 0x41 && *(_QWORD *)&v191[0])
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v191[0], 0x1000C8000313F17);
            if (LODWORD(__src[1]) >= 0x41 && __src[0])
              MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
            if (!v139)
              return v14;
LABEL_257:
            v151 = *((_DWORD *)a1 + 5);
            if ((v151 & 0x40000000) != 0)
              v152 = (_QWORD *)*((_QWORD *)a1 - 1);
            else
              v152 = (_QWORD *)((char *)a1 - 32 * (v151 & 0x7FFFFFF));
            v153 = sub_1C4F85990(*v152, a3 + 1, a4);
            if (v153 != 1)
            {
              if (v78 >= v153)
                v149 = v153;
              else
                v149 = v78;
              return v149 - 1;
            }
LABEL_285:
            v16 = 1;
LABEL_286:
            v15 = *((unsigned __int8 *)a1 + 16);
            goto LABEL_287;
          }
        }
        else if (LODWORD(__src[1]))
        {
          v139 = 0;
          v140 = (char *)__src[0];
          v14 = PointerTypeSizeInBits;
          if ((((unint64_t)__src[0] | 1) & (0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))) == 0xFFFFFFFFFFFFFFFFLL >> -LOBYTE(__src[1]))
            goto LABEL_254;
          goto LABEL_251;
        }
        v139 = 0;
        v14 = PointerTypeSizeInBits;
        goto LABEL_254;
      case 0x11u:
        v44 = *((_DWORD *)a1 + 5);
        if ((v44 & 0x40000000) != 0)
          v45 = (_QWORD *)*((_QWORD *)a1 - 1);
        else
          v45 = (_QWORD *)((char *)a1 - 32 * (v44 & 0x7FFFFFF));
        v81 = sub_1C4F85990(*v45, a3 + 1, a4);
        if (v81 == 1)
          goto LABEL_286;
        v82 = v81;
        v83 = *((_DWORD *)a1 + 5);
        v84 = (v83 & 0x40000000) != 0
            ? (llvm::Constant *)*((_QWORD *)a1 - 1)
            : (llvm::Constant *)((char *)a1 - 32 * (v83 & 0x7FFFFFF));
        v111 = sub_1C4F85990(*((_QWORD *)v84 + 4), a3 + 1, a4);
        if (v111 == 1)
          goto LABEL_286;
        v112 = 2 * PointerTypeSizeInBits - (v82 + v111) + 2;
        v113 = PointerTypeSizeInBits >= v112;
        v114 = PointerTypeSizeInBits - v112;
        if (v113)
          return (v114 + 1);
        else
          return 1;
      case 0x14u:
        v194 = 0;
        v46 = *((_DWORD *)a1 + 5);
        if ((v46 & 0x40000000) != 0)
          v47 = (char *)*((_QWORD *)a1 - 1);
        else
          v47 = (char *)a1 - 32 * (v46 & 0x7FFFFFF);
        v85 = (unsigned __int8 *)*((_QWORD *)v47 + 4);
        __src[0] = &v194;
        __src[1] = 0;
        if (!sub_1C4D89F84((uint64_t)__src, v85) || !sub_1C49591DC(v194))
          goto LABEL_286;
        v86 = *((_DWORD *)a1 + 5);
        if ((v86 & 0x40000000) != 0)
          v87 = (_QWORD *)*((_QWORD *)a1 - 1);
        else
          v87 = (_QWORD *)((char *)a1 - 32 * (v86 & 0x7FFFFFF));
        v120 = sub_1C4F85990(*v87, a3 + 1, a4);
        v121 = *((_DWORD *)v194 + 2);
        if (v121 > 0x40)
          v122 = llvm::APInt::countLeadingZerosSlowCase(v194);
        else
          v122 = v121 + __clz(*(_QWORD *)v194) - 64;
        v119 = v121 + v120 + ~v122;
        goto LABEL_184;
      case 0x17u:
        v48 = *((_DWORD *)a1 + 5);
        if ((v48 & 0x40000000) != 0)
          v49 = (_QWORD *)*((_QWORD *)a1 - 1);
        else
          v49 = (_QWORD *)((char *)a1 - 32 * (v48 & 0x7FFFFFF));
        v14 = sub_1C4F85990(*v49, a3 + 1, a4);
        v194 = 0;
        v88 = *((_DWORD *)a1 + 5);
        if ((v88 & 0x40000000) != 0)
          v89 = (char *)*((_QWORD *)a1 - 1);
        else
          v89 = (char *)a1 - 32 * (v88 & 0x7FFFFFF);
        v95 = (unsigned __int8 *)*((_QWORD *)v89 + 4);
        __src[0] = &v194;
        __src[1] = 0;
        if (sub_1C4D89F84((uint64_t)__src, v95) && sub_1C49591DC(v194))
        {
          v96 = PointerTypeSizeInBits - sub_1C4F95A34((uint64_t)v194);
          if (v14 <= v96)
            return v96;
          else
            return v14;
        }
        return v14;
      case 0x19u:
        v194 = 0;
        v50 = *((_DWORD *)a1 + 5);
        if ((v50 & 0x40000000) != 0)
          v51 = (char *)*((_QWORD *)a1 - 1);
        else
          v51 = (char *)a1 - 32 * (v50 & 0x7FFFFFF);
        v90 = (unsigned __int8 *)*((_QWORD *)v51 + 4);
        __src[0] = &v194;
        __src[1] = 0;
        if (!sub_1C4D89F84((uint64_t)__src, v90))
          goto LABEL_285;
        v91 = *((_DWORD *)a1 + 5);
        if ((v91 & 0x40000000) != 0)
          v92 = (_QWORD *)*((_QWORD *)a1 - 1);
        else
          v92 = (_QWORD *)((char *)a1 - 32 * (v91 & 0x7FFFFFF));
        v115 = sub_1C4F85990(*v92, a3 + 1, a4);
        v116 = v194;
        v117 = *((_DWORD *)v194 + 2);
        if (v117 >= 0x41)
        {
          if (v117 - llvm::APInt::countLeadingZerosSlowCase(v194) >= 0x41)
            goto LABEL_285;
          v118 = **(_QWORD **)v116;
        }
        else
        {
          v118 = *(_QWORD *)v194;
        }
        if (v118 >= PointerTypeSizeInBits || v118 >= v115)
          goto LABEL_285;
        return v115 - v118;
      case 0x1Bu:
        v52 = *((_DWORD *)a1 + 5);
        if ((v52 & 0x40000000) != 0)
          v53 = (_QWORD *)*((_QWORD *)a1 - 1);
        else
          v53 = (_QWORD *)((char *)a1 - 32 * (v52 & 0x7FFFFFF));
        v14 = sub_1C4F85990(*v53, a3 + 1, a4);
        v194 = 0;
        v93 = *((_DWORD *)a1 + 5);
        if ((v93 & 0x40000000) != 0)
          v94 = (char *)*((_QWORD *)a1 - 1);
        else
          v94 = (char *)a1 - 32 * (v93 & 0x7FFFFFF);
        v97 = (unsigned __int8 *)*((_QWORD *)v94 + 4);
        __src[0] = &v194;
        __src[1] = 0;
        if (!sub_1C4D89F84((uint64_t)__src, v97))
          return v14;
        v98 = v194;
        v99 = *((_DWORD *)v194 + 2);
        if (v99 >= 0x41)
        {
          if (v99 - llvm::APInt::countLeadingZerosSlowCase(v194) >= 0x41)
            goto LABEL_285;
          v100 = **(_QWORD **)v98;
        }
        else
        {
          v100 = *(_QWORD *)v194;
        }
        if (v100 >= PointerTypeSizeInBits)
          goto LABEL_285;
        v119 = v14 + v100;
LABEL_184:
        if (v119 >= PointerTypeSizeInBits)
          return PointerTypeSizeInBits;
        else
          return v119;
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
        v18 = *((_DWORD *)a1 + 5);
        if ((v18 & 0x40000000) != 0)
          v19 = (_QWORD *)*((_QWORD *)a1 - 1);
        else
          v19 = (_QWORD *)((char *)a1 - 32 * (v18 & 0x7FFFFFF));
        v34 = sub_1C4F85990(*v19, a3 + 1, a4);
        if (v34 != 1)
        {
          v35 = v34;
          v36 = *((_DWORD *)a1 + 5);
          if ((v36 & 0x40000000) != 0)
            v37 = (char *)*((_QWORD *)a1 - 1);
          else
            v37 = (char *)a1 - 32 * (v36 & 0x7FFFFFF);
          v72 = sub_1C4F85990(*((_QWORD *)v37 + 4), a3 + 1, a4);
          if (v72 >= v35)
            v16 = v35;
          else
            v16 = v72;
        }
        goto LABEL_286;
      default:
        switch(v17)
        {
          case '7':
            v20 = *((_DWORD *)a1 + 5) & 0x7FFFFFF;
            if ((v20 - 5) < 0xFFFFFFFC)
              goto LABEL_286;
            v21 = *(_OWORD *)(a4 + 16);
            *(_OWORD *)__src = *(_OWORD *)a4;
            v191[0] = v21;
            v191[1] = *(_OWORD *)(a4 + 32);
            if ((_DWORD)PointerTypeSizeInBits == 1)
              return 1;
            v22 = 0;
            v23 = 0;
            v24 = a3 + 1;
            v25 = v20 - 1;
            do
            {
              v26 = *((_DWORD *)a1 + 5);
              if ((v26 & 0x40000000) != 0)
                v27 = (char *)*((_QWORD *)a1 - 1);
              else
                v27 = (char *)a1 - 32 * (v26 & 0x7FFFFFF);
              v28 = *(_QWORD *)&v27[32 * *((unsigned int *)a1 + 15) + 8 * v23];
              v29 = *(_QWORD *)(v28 + 40);
              if (v29 == v28 + 40)
              {
                v30 = 0;
              }
              else
              {
                if (v29)
                  v30 = v29 - 24;
                else
                  v30 = 0;
                if (*(unsigned __int8 *)(v30 + 16) - 29 >= 0xB)
                  v30 = 0;
              }
              *(_QWORD *)&v191[0] = v30;
              if ((v26 & 0x40000000) != 0)
                v31 = (char *)*((_QWORD *)a1 - 1);
              else
                v31 = (char *)a1 - 32 * (v26 & 0x7FFFFFF);
              v32 = sub_1C4F85990(*(_QWORD *)&v31[v22], v24, __src);
              if (v32 < PointerTypeSizeInBits)
                LODWORD(PointerTypeSizeInBits) = v32;
              v33 = v25 == v23;
              if (v25 == v23)
                break;
              ++v23;
              v22 += 32;
            }
            while ((_DWORD)PointerTypeSizeInBits != 1);
            if (v33)
              return PointerTypeSizeInBits;
            else
              return 1;
          case '8':
            if (v15 != 84)
              goto LABEL_286;
            v54 = *((_QWORD *)a1 - 4);
            if (!v54
              || *(_BYTE *)(v54 + 16)
              || *(_QWORD *)(v54 + 24) != *((_QWORD *)a1 + 9)
              || (*(_BYTE *)(v54 + 33) & 0x20) == 0)
            {
              goto LABEL_286;
            }
            v55 = *(_DWORD *)(v54 + 36);
            if ((v55 - 274) >= 2)
            {
              if (v55 != 1)
                goto LABEL_286;
              v157 = *((_DWORD *)a1 + 5);
              v158 = (v157 & 0x40000000) != 0
                   ? (llvm::Constant *)*((_QWORD *)a1 - 1)
                   : (llvm::Constant *)((char *)a1 - 32 * (v157 & 0x7FFFFFF));
              v159 = sub_1C4F85990(*(_QWORD *)v158, a3 + 1, a4);
              v14 = (v159 - 1);
              if (v159 == 1)
                goto LABEL_286;
              return v14;
            }
            v192 = 0;
            v193 = 0;
            if (v55 == 274)
              v56 = 275;
            else
              v56 = 274;
            v57 = (_QWORD *)((char *)a1 - 32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
            v58 = *v57;
            if (*(_BYTE *)(*v57 + 16) != 84)
              goto LABEL_285;
            v59 = *(_QWORD *)(v58 - 32);
            if (!v59)
              goto LABEL_285;
            if (*(_BYTE *)(v59 + 16))
              goto LABEL_285;
            if (*(_QWORD *)(v59 + 24) != *(_QWORD *)(v58 + 72))
              goto LABEL_285;
            if ((*(_BYTE *)(v59 + 33) & 0x20) == 0)
              goto LABEL_285;
            if (*(_DWORD *)(v59 + 36) != v56)
              goto LABEL_285;
            v60 = (unsigned __int8 *)v57[4];
            __src[0] = &v193;
            __src[1] = 0;
            if (!sub_1C4D89F84((uint64_t)__src, v60))
              goto LABEL_285;
            v61 = *(unsigned __int8 **)(v58 - 32 * (*(_DWORD *)(v58 + 20) & 0x7FFFFFF) + 32);
            v194 = (llvm::APInt *)&v192;
            v195 = 0;
            if ((sub_1C4D89F84((uint64_t)&v194, v61) & 1) == 0)
              goto LABEL_285;
            v63 = v192;
            v62 = v193;
            if (*(_DWORD *)(*((_QWORD *)a1 - 4) + 36) == 275)
            {
              v192 = v193;
              v193 = v63;
              v64 = (unsigned int *)v63;
            }
            else
            {
              v64 = (unsigned int *)v193;
              v62 = v192;
            }
            v181 = v64[2];
            if (v181 <= 0x40)
            {
              if ((uint64_t)(*(_QWORD *)v64 << -(char)v181) >> -(char)v181 <= (uint64_t)(*(_QWORD *)v62 << -(char)v181) >> -(char)v181)
                goto LABEL_268;
              goto LABEL_285;
            }
            v182 = *(_QWORD *)(*(_QWORD *)v64 + 8 * ((v181 - 1) >> 6)) & (1 << (v181
                                                                                                - 1));
            v183 = *((_DWORD *)v62 + 2);
            v184 = v183 - 1;
            v185 = *(_QWORD *)v62;
            if (v183 >= 0x41)
              v62 = (llvm::APInt *)(*(_QWORD *)v62 + 8 * (v184 >> 6));
            if ((v182 != 0) != ((*(_QWORD *)v62 >> v184) & 1))
            {
              if (!v182)
                goto LABEL_285;
              goto LABEL_268;
            }
            v186 = v185 - 8;
            v187 = ((unint64_t)(v181 + 63) >> 3) & 0x3FFFFFF8;
            do
            {
              if (!v187)
                goto LABEL_268;
              v188 = *(_QWORD *)(*(_QWORD *)v64 - 8 + v187);
              v189 = *(_QWORD *)(v186 + v187);
              v187 -= 8;
            }
            while (v188 == v189);
            if (v188 > v189)
              goto LABEL_285;
            goto LABEL_268;
          case '9':
            v192 = 0;
            v193 = 0;
            __src[0] = 0;
            v194 = 0;
            matched = llvm::matchSelectPattern((uint64_t)a1, (uint64_t)__src, &v194, 0, 0);
            if ((matched & 0xFFFFFFFD) != 1)
              goto LABEL_281;
            v66 = __src[0];
            __src[0] = &v193;
            __src[1] = 0;
            if (!sub_1C4D89F84((uint64_t)__src, (unsigned __int8 *)v194))
              goto LABEL_281;
            __src[0] = 0;
            v194 = 0;
            v67 = llvm::matchSelectPattern((uint64_t)v66, (uint64_t)__src, &v194, 0, 0);
            v68 = (matched - 1) > 2 ? 2 : dword_1C85F6E64[matched - 1];
            if (v68 != v67)
              goto LABEL_281;
            __src[0] = &v192;
            __src[1] = 0;
            if (!sub_1C4D89F84((uint64_t)__src, (unsigned __int8 *)v194))
              goto LABEL_281;
            v64 = (unsigned int *)v192;
            v123 = v193;
            if (matched == 1)
            {
              v192 = v193;
              v193 = (llvm::APInt *)v64;
              v124 = v123;
            }
            else
            {
              v124 = v192;
              v64 = (unsigned int *)v193;
            }
            v154 = v64[2];
            if (v154 <= 0x40)
            {
              if ((uint64_t)(*(_QWORD *)v64 << -(char)v154) >> -(char)v154 <= (uint64_t)(*(_QWORD *)v124 << -(char)v154) >> -(char)v154)
                goto LABEL_268;
LABEL_281:
              v164 = *((_DWORD *)a1 + 5);
              if ((v164 & 0x40000000) != 0)
                v165 = (char *)*((_QWORD *)a1 - 1);
              else
                v165 = (char *)a1 - 32 * (v164 & 0x7FFFFFF);
              v166 = sub_1C4F85990(*((_QWORD *)v165 + 4), a3 + 1, a4);
              if (v166 != 1)
              {
                v173 = v166;
                v174 = *((_DWORD *)a1 + 5);
                if ((v174 & 0x40000000) != 0)
                  v175 = (char *)*((_QWORD *)a1 - 1);
                else
                  v175 = (char *)a1 - 32 * (v174 & 0x7FFFFFF);
                v176 = sub_1C4F85990(*((_QWORD *)v175 + 8), a3 + 1, a4);
                if (v176 >= v173)
                  return v173;
                else
                  return v176;
              }
              goto LABEL_285;
            }
            v160 = *(_QWORD *)(*(_QWORD *)v64 + 8 * ((v154 - 1) >> 6)) & (1 << (v154
                                                                                                - 1));
            v161 = *((_DWORD *)v124 + 2);
            v162 = v161 - 1;
            v163 = *(_QWORD *)v124;
            if (v161 >= 0x41)
              v124 = (llvm::APInt *)(*(_QWORD *)v124 + 8 * (v162 >> 6));
            if ((v160 != 0) == ((*(_QWORD *)v124 >> v162) & 1))
            {
              v177 = v163 - 8;
              v178 = ((unint64_t)(v154 + 63) >> 3) & 0x3FFFFFF8;
              do
              {
                if (!v178)
                  goto LABEL_268;
                v179 = *(_QWORD *)(*(_QWORD *)v64 - 8 + v178);
                v180 = *(_QWORD *)(v177 + v178);
                v178 -= 8;
              }
              while (v179 == v180);
              if (v179 > v180)
                goto LABEL_281;
            }
            else if (!v160)
            {
              goto LABEL_281;
            }
LABEL_268:
            v155 = sub_1C4959174((llvm::APInt *)v64);
            v156 = sub_1C4959174(v192);
            if (v156 >= v155)
              return v155;
            else
              return v156;
          case ':':
          case ';':
          case '<':
          case '>':
            goto LABEL_286;
          case '=':
            v69 = *((_DWORD *)a1 + 5);
            if ((v69 & 0x40000000) != 0)
              v70 = (_QWORD *)*((_QWORD *)a1 - 1);
            else
              v70 = (_QWORD *)((char *)a1 - 32 * (v69 & 0x7FFFFFF));
            return sub_1C4F85990(*v70, a3 + 1, a4);
          case '?':
            v14 = 1;
            if (v15 != 91)
              return v14;
            LODWORD(__src[1]) = 1;
            __src[0] = 0;
            LODWORD(v195) = 1;
            v194 = 0;
            v71 = 1;
            if (!sub_1C4F95B08((uint64_t)a1, a2, __src, (void **)&v194))
              goto LABEL_207;
            if (LODWORD(__src[1]) > 0x40)
            {
              v125 = 0;
              v126 = ((unint64_t)LODWORD(__src[1]) + 63) >> 6;
              do
              {
                v127 = v126-- < 1;
                if (v127)
                  break;
                v128 = *((_QWORD *)__src[0] + v126);
                v125 += __clz(v128);
              }
              while (!v128);
              v129 = LODWORD(__src[1]) | 0xFFFFFFC0;
              if (((uint64_t)__src[1] & 0x3F) == 0)
                v129 = 0;
              if (v125 + v129 != LODWORD(__src[1]))
              {
LABEL_94:
                v14 = sub_1C4F947E8(*((_QWORD *)a1 - 8), __src, a3 + 1, a4);
                if ((_DWORD)v14 == 1)
                {
                  v71 = 2;
                  goto LABEL_207;
                }
LABEL_199:
                if (v195 > 0x40)
                {
                  v131 = 0;
                  v132 = ((unint64_t)v195 + 63) >> 6;
                  do
                  {
                    v127 = v132-- < 1;
                    if (v127)
                      break;
                    v133 = *((_QWORD *)v194 + v132);
                    v131 += __clz(v133);
                  }
                  while (!v133);
                  v134 = v195 | 0xFFFFFFC0;
                  if ((v195 & 0x3F) == 0)
                    v134 = 0;
                  if (v131 + v134 == (_DWORD)v195)
                    goto LABEL_204;
                }
                else if (!v194)
                {
LABEL_204:
                  if ((_DWORD)v14 == 1)
                    v71 = 2;
                  else
                    v71 = 1;
LABEL_207:
                  if (v195 >= 0x41 && v194)
                    MEMORY[0x1CAA32F9C](v194, 0x1000C8000313F17);
                  if (LODWORD(__src[1]) >= 0x41 && __src[0])
                    MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
                  if (v71 != 2)
                    return v14;
                  goto LABEL_285;
                }
                v130 = sub_1C4F947E8(*((_QWORD *)a1 - 4), &v194, a3 + 1, a4);
                if (v130 >= v14)
                  v14 = v14;
                else
                  v14 = v130;
                goto LABEL_204;
              }
            }
            else if (__src[0])
            {
              goto LABEL_94;
            }
            v14 = 0xFFFFFFFFLL;
            goto LABEL_199;
          default:
            if (v17 != 40)
              goto LABEL_286;
            v38 = *((_DWORD *)a1 + 5);
            if ((v38 & 0x40000000) != 0)
              v39 = (uint64_t **)*((_QWORD *)a1 - 1);
            else
              v39 = (uint64_t **)((char *)a1 - 32 * (v38 & 0x7FFFFFF));
            v102 = **v39;
            if ((*(_DWORD *)(v102 + 8) & 0xFE) == 0x12)
              v102 = **(_QWORD **)(v102 + 16);
            v103 = PointerTypeSizeInBits - llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v102);
            if ((v38 & 0x40000000) != 0)
              v104 = (_QWORD *)*((_QWORD *)a1 - 1);
            else
              v104 = (_QWORD *)((char *)a1 - 32 * (v38 & 0x7FFFFFF));
            return v103 + sub_1C4F85990(*v104, a3 + 1, a4);
        }
    }
  }
  v16 = 1;
LABEL_287:
  if (v15 > 0x14 || *(_BYTE *)(*(_QWORD *)a1 + 8) != 18)
    goto LABEL_302;
  v167 = *(_DWORD *)(*(_QWORD *)a1 + 32);
  v14 = PointerTypeSizeInBits;
  if (v167)
  {
    v168 = 0;
    v14 = PointerTypeSizeInBits;
    do
    {
      if (*((_DWORD *)a2 + 2) >= 0x41u)
        v169 = (llvm::APInt *)(*(_QWORD *)a2 + 8 * (v168 >> 6));
      else
        v169 = a2;
      if (((*(_QWORD *)v169 >> (char)v168) & 1) != 0)
      {
        AggregateElement = llvm::Constant::getAggregateElement(a1, v168);
        if (!AggregateElement || *((_BYTE *)AggregateElement + 16) != 16)
          goto LABEL_302;
        v171 = sub_1C4959174((llvm::UndefValue *)((char *)AggregateElement + 24));
        if (v171 >= v14)
          v14 = v14;
        else
          v14 = v171;
      }
      v168 = (llvm::Type *)((_DWORD)v168 + 1);
    }
    while (v167 != (_DWORD)v168);
  }
  if (!(_DWORD)v14)
  {
LABEL_302:
    LODWORD(__src[1]) = PointerTypeSizeInBits;
    if (PointerTypeSizeInBits > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
      DWORD2(v191[0]) = PointerTypeSizeInBits;
      llvm::APInt::initSlowCase((llvm::APInt *)v191, 0, 0);
    }
    else
    {
      DWORD2(v191[0]) = PointerTypeSizeInBits;
      __src[0] = 0;
      *(_QWORD *)&v191[0] = 0;
    }
    sub_1C4F82D44((uint64_t)a1, a2, (int8x8_t *)__src, a3, (const llvm::DataLayout **)a4);
    v172 = sub_1C4F95D4C((unint64_t *)__src);
    if (v16 <= v172)
      v14 = v172;
    else
      v14 = v16;
    if (DWORD2(v191[0]) >= 0x41 && *(_QWORD *)&v191[0])
      MEMORY[0x1CAA32F9C](*(_QWORD *)&v191[0], 0x1000C8000313F17);
    if (LODWORD(__src[1]) >= 0x41)
    {
      if (__src[0])
        MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
    }
  }
  return v14;
}

uint64_t sub_1C4F95A34(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  unsigned int v3;
  int v4;
  size_t v6;
  int v8;
  unint64_t v9;
  unsigned int v10;

  v1 = *(unsigned int *)(a1 + 8);
  v10 = v1;
  if (v1 > 0x40)
  {
    v6 = ((unint64_t)(v1 + 63) >> 3) & 0x3FFFFFF8;
    v2 = (void *)operator new[]();
    memcpy(v2, *(const void **)a1, v6);
  }
  else
  {
    v2 = *(void **)a1;
  }
  v9 = (unint64_t)v2;
  llvm::APInt::operator--((uint64_t)&v9);
  v3 = v10;
  if (v10 > 0x40)
  {
    v8 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&v9);
    if (v9)
      MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
    v4 = v8;
  }
  else
  {
    v4 = v10 + __clz(v9) - 64;
  }
  return v3 - v4;
}

uint64_t sub_1C4F95B08(uint64_t a1, llvm::APInt *this, void **a3, void **a4)
{
  signed int v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  _DWORD *v15;
  uint64_t v16;
  void **v17;
  uint64_t i;
  llvm::APInt *v19;
  signed int v20;
  unsigned int v21;
  void **v22;
  char *v23;
  uint64_t v24;
  char *v25;
  unsigned int v26;

  if (*(_BYTE *)(*(_QWORD *)a1 + 8) == 19)
    return 0;
  v9 = *(_DWORD *)(**(_QWORD **)(a1 - 64) + 32);
  v10 = *(unsigned int *)(*(_QWORD *)a1 + 32);
  v26 = v9;
  if (v9 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v25, 0, 0);
  else
    v25 = 0;
  if (*((_DWORD *)a4 + 2) >= 0x41u && *a4)
    MEMORY[0x1CAA32F9C](*a4, 0x1000C8000313F17);
  v11 = v25;
  *a4 = v25;
  v12 = v26;
  *((_DWORD *)a4 + 2) = v26;
  if (*((_DWORD *)a3 + 2) > 0x40u || v12 > 0x40)
  {
    if (a3 != a4)
    {
      llvm::APInt::reallocate((uint64_t)a3, v12);
      v24 = *((unsigned int *)a3 + 2);
      if (v24 <= 0x40)
        *a3 = *a4;
      else
        memcpy(*a3, *a4, ((unint64_t)(v24 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    *a3 = v11;
    *((_DWORD *)a3 + 2) = *((_DWORD *)a4 + 2);
  }
  v13 = *((_DWORD *)this + 2);
  if (v13 <= 0x40)
  {
    if (!*(_QWORD *)this)
      return 1;
    goto LABEL_16;
  }
  if (llvm::APInt::countLeadingZerosSlowCase(this) != v13)
  {
LABEL_16:
    v14 = *(unsigned int *)(a1 + 72);
    if (!(_DWORD)v14)
    {
LABEL_20:
      if (*((_DWORD *)a3 + 2) >= 0x41u)
        v17 = (void **)*a3;
      else
        v17 = a3;
      *v17 = (void *)((unint64_t)*v17 | 1);
      return 1;
    }
    v15 = *(_DWORD **)(a1 + 64);
    v16 = 4 * v14;
    while (!*v15)
    {
      ++v15;
      v16 -= 4;
      if (!v16)
        goto LABEL_20;
    }
    if (!(_DWORD)v10)
      return 1;
    for (i = 0; v10 != i; ++i)
    {
      if (*((_DWORD *)this + 2) >= 0x41u)
        v19 = (llvm::APInt *)(*(_QWORD *)this + 8 * (i >> 6));
      else
        v19 = this;
      if (((*(_QWORD *)v19 >> i) & 1) == 0)
        continue;
      v20 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * i);
      if (v20 == -1)
        return 0;
      v21 = v20 % v9;
      if (v20 >= v9)
      {
        v22 = a4;
        if (*((_DWORD *)a4 + 2) >= 0x41u)
        {
          v23 = (char *)*a4;
          goto LABEL_37;
        }
      }
      else
      {
        v22 = a3;
        if (*((_DWORD *)a3 + 2) >= 0x41u)
        {
          v23 = (char *)*a3;
LABEL_37:
          v22 = (void **)&v23[8 * (v21 >> 6)];
        }
      }
      *v22 = (void *)((unint64_t)*v22 | (1 << v21));
    }
  }
  return 1;
}

unint64_t sub_1C4F95D4C(unint64_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t *v4;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;

  v1 = *((_DWORD *)a1 + 2);
  v2 = v1 - 1;
  if (v1 <= 0x40)
  {
    if (((*a1 >> v2) & 1) != 0)
    {
      if (v1)
        return __clz(~(*a1 << -(char)v1));
      return 0;
    }
LABEL_8:
    v4 = a1 + 2;
    v5 = *((_DWORD *)a1 + 6);
    v6 = v5 - 1;
    if (v5 > 0x40)
    {
      if (((*(_QWORD *)(*v4 + 8 * (v6 >> 6)) >> v6) & 1) != 0)
        return llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)(a1 + 2));
    }
    else
    {
      v7 = *v4;
      if (((v7 >> v6) & 1) != 0)
      {
        if (v5)
          return __clz(~(v7 << -(char)v5));
        return 0;
      }
    }
    return 1;
  }
  if (((*(_QWORD *)(*a1 + 8 * (v2 >> 6)) >> v2) & 1) == 0)
    goto LABEL_8;
  return llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)a1);
}

void sub_1C4F95DFC(llvm::UndefValue *a1, llvm::APInt *this, int8x8_t *a3, unsigned int a4, uint64_t a5)
{
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t **v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  llvm::UndefValue **v20;
  llvm::UndefValue *v21;
  llvm::UndefValue **v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unsigned int PointerTypeSizeInBits;
  const char *v33;
  unsigned int v34;
  const void **v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void *v41;
  int v42;
  _QWORD ***v43;
  int v44;
  uint64_t **v45;
  int v46;
  uint64_t *v47;
  llvm::Type *v48;
  llvm::APInt *v49;
  unsigned int v50;
  __int128 v51;
  unsigned int v52;
  int v53;
  uint64_t *v54;
  int v55;
  _QWORD ***v56;
  int v57;
  uint64_t **v58;
  int v59;
  int v60;
  _QWORD *v61;
  int v62;
  _QWORD ***v63;
  int v64;
  uint64_t ****v65;
  unsigned int matched;
  unsigned int v67;
  void *v68;
  unint64_t v69;
  int v70;
  _QWORD ***v71;
  int v72;
  _QWORD *v73;
  int v74;
  _QWORD *v75;
  unsigned int v76;
  int8x8_t *v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  llvm::UndefValue **v84;
  llvm::UndefValue *v85;
  llvm::UndefValue **v86;
  int v87;
  BOOL v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  int v93;
  int v94;
  int v95;
  unsigned __int8 **v96;
  int v97;
  int v98;
  unsigned __int8 **v99;
  int v100;
  _QWORD *v101;
  const void **v102;
  uint64_t v103;
  unint64_t v104;
  int8x8_t *v105;
  uint64_t v106;
  unint64_t v107;
  int8x8_t *v108;
  int v109;
  uint64_t *v110;
  int v111;
  int v112;
  _QWORD *v113;
  uint64_t v114;
  unsigned int v115;
  int8x8_t *v116;
  __int32 v117;
  void *v118;
  unsigned int v119;
  unint64_t v120;
  int v121;
  _QWORD *v122;
  __int32 v123;
  void *v124;
  unsigned int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  void *v131;
  llvm::APInt *v132;
  unsigned int v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  unsigned int v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int v147;
  int v148;
  _QWORD ***v149;
  int v150;
  _QWORD *v151;
  uint64_t v152;
  unint64_t *v153;
  uint64_t v154;
  int8x8_t *v155;
  int8x8_t *v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  int v162;
  uint64_t *v163;
  int v164;
  _QWORD ***v165;
  int v166;
  _QWORD ***v167;
  unsigned __int8 *v168;
  unsigned int v169;
  int v170;
  unsigned __int8 *v171;
  unsigned int v172;
  unsigned int v173;
  BOOL v174;
  uint64_t v175;
  unint64_t v176;
  int v177;
  int v178;
  _QWORD ***v179;
  unsigned int v180;
  llvm::APInt *v181;
  unsigned int v182;
  unsigned int v183;
  unint64_t v184;
  const void *v185;
  unsigned int v186;
  uint64_t v187;
  unsigned int v188;
  unsigned int v189;
  int v190;
  _QWORD ***v191;
  llvm::APFloatBase *SplatValue;
  llvm::Constant *v193;
  unint64_t v194;
  unsigned int *v195;
  uint64_t v196;
  llvm::StructLayout *StructLayout;
  llvm::UndefValue *AggregateElement;
  unsigned int *v199;
  unsigned int *v200;
  unsigned int *v201;
  unsigned int v202;
  llvm::Type *v204;
  unsigned int PrimitiveSizeInBits;
  unsigned int v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  int v210;
  BOOL v211;
  char v212;
  char v213;
  unint64_t v214;
  uint64_t v215;
  unsigned int v216;
  unsigned int v217;
  unsigned int v218;
  void *v219;
  unint64_t v220;
  void *v221;
  uint8x8_t v222;
  __int32 v223;
  uint8x8_t v224;
  unint64_t v225;
  char v226;
  unint64_t v227;
  unint64_t v228;
  int8x8_t *v229;
  int8x8_t v230;
  uint8x8_t v231;
  uint64_t v232;
  int v233;
  unint64_t v234;
  int8x8_t *v235;
  int8x8_t v236;
  uint8x8_t v237;
  unint64_t v238;
  uint64_t v239;
  unint64_t v240;
  llvm::APInt *v241;
  unsigned int v242;
  const void *v243;
  unsigned int v244;
  size_t v245;
  size_t v246;
  size_t v247;
  uint64_t v248;
  unint64_t *v249;
  llvm::APInt *v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  unint64_t v254;
  _BOOL4 v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t *v260;
  unsigned int v261;
  unint64_t *v262;
  int8x8_t *v263;
  uint64_t v264;
  unint64_t v265;
  int8x8_t *v266;
  uint64_t v267;
  unint64_t v268;
  int8x8_t *v269;
  unint64_t *v270;
  uint64_t v271;
  llvm::APInt *v272;
  uint64_t v273;
  unsigned int v274;
  unsigned int v275;
  uint64_t v276;
  void *v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  void *v281;
  int v282;
  int64_t v283;
  uint64_t v284;
  BOOL v285;
  unint64_t v286;
  unsigned int v287;
  size_t v288;
  int v289;
  void *v290;
  int v291;
  _QWORD *v292;
  uint64_t v293;
  int v294;
  _QWORD ***v295;
  uint64_t v296;
  void *v297;
  uint64_t v298;
  void *v299;
  int v300;
  void *v301;
  int v302;
  uint64_t *v303;
  int v304;
  uint64_t ****v305;
  uint64_t ***v306;
  uint64_t ***v307;
  uint64_t *v308;
  uint64_t v309;
  int8x8_t *v310;
  uint64_t v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  void *v315;
  uint64_t v316;
  uint64_t v317;
  int v318;
  int v319;
  _QWORD *v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  int64_t v325;
  unint64_t v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  uint64_t v330;
  int v331;
  int64_t v332;
  void *v333;
  unint64_t v334;
  unsigned int v335;
  uint64_t v336;
  void *v337;
  uint64_t v338;
  void *v339;
  unsigned int v340;
  unsigned int v341;
  unsigned int v342;
  int v343;
  unsigned int v344;
  unsigned int v345;
  unsigned int v346;
  llvm::APInt *v347;
  uint64_t v348;
  unsigned int v349;
  unsigned int v350;
  void *v351;
  int v352;
  uint64_t *v353;
  uint64_t v354;
  unsigned int v355;
  unsigned int v356;
  int v357;
  int64_t v358;
  unint64_t v359;
  int v360;
  uint64_t v361;
  void *v362;
  int8x8_t *v363;
  uint64_t v364;
  void *v365;
  llvm::UndefValue **v366;
  llvm::UndefValue *v367;
  uint64_t v368;
  _QWORD *v369;
  int v370;
  _QWORD *v371;
  int v372;
  int v373;
  llvm::UndefValue **v374;
  llvm::UndefValue *v375;
  uint64_t v376;
  unsigned int v377;
  int8x8_t *v378;
  int v379;
  __int128 v380;
  int v381;
  _QWORD *v382;
  _BOOL4 v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  unsigned __int8 *v387;
  unsigned int v388;
  _QWORD ***v389;
  _QWORD **v390;
  _QWORD **v391;
  unsigned __int8 *v392;
  unsigned __int8 *v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  unsigned int v397;
  unint64_t v398;
  int8x8_t *v399;
  unint64_t *v400;
  unint64_t *v401;
  char v402;
  unint64_t **v403;
  BOOL v404;
  unint64_t **v405;
  int8x8_t *v406;
  unint64_t **v407;
  unint64_t *v408;
  int8x8_t *v409;
  unsigned int v410;
  unsigned int v411;
  int8x8_t v412;
  unsigned int v413;
  int8x8_t *v414;
  unint64_t *v415;
  unsigned int v416;
  int v417;
  uint64_t v418;
  unsigned int v419;
  llvm::APInt *v420;
  unsigned int v421;
  llvm::UndefValue **v422;
  llvm::UndefValue *v423;
  int v424;
  uint64_t v425;
  llvm::UndefValue *v426;
  _QWORD ***v427;
  int v428;
  _QWORD *v429;
  int v430;
  _QWORD *v431;
  int v432;
  _QWORD *v433;
  _QWORD **v434;
  _QWORD *v435;
  uint64_t *v436;
  uint64_t v437;
  uint64_t v438;
  unint64_t v439;
  uint64_t v440;
  uint64_t v441;
  unint64_t v442;
  unint64_t v443;
  __int128 v444;
  uint64_t v445;
  uint64_t v446;
  unint64_t v447;
  int v448;
  int v449;
  _QWORD *v450;
  int v451;
  _QWORD ***v452;
  int v453;
  _QWORD *v454;
  int v455;
  _QWORD *v456;
  int v457;
  _QWORD ***v458;
  llvm::APInt *v459;
  unsigned int v460;
  unsigned int v461;
  unsigned int v462;
  int v463;
  _QWORD *v464;
  int v465;
  _QWORD *v466;
  int v467;
  _QWORD *v468;
  unsigned __int8 *v469;
  unsigned int v470;
  unsigned int v471;
  int v472;
  _QWORD *v473;
  int v474;
  _QWORD *v475;
  uint64_t ****v476;
  uint64_t *v477;
  int v478;
  _QWORD ***v479;
  int v480;
  _QWORD ***v481;
  const llvm::KnownBits *v482;
  int v483;
  _QWORD ***v484;
  const llvm::KnownBits *v485;
  unsigned int v486;
  unsigned int v487;
  unsigned int v488;
  int8x8_t *v489;
  const llvm::APInt *v490;
  unsigned int v491;
  int v492;
  int64_t v493;
  unint64_t v494;
  unsigned int v495;
  llvm::ValueHandleBase *v496;
  uint64_t *v497;
  uint64_t v498;
  llvm::ValueHandleBase *v499;
  unsigned int v500;
  uint8x8_t v501;
  __int32 v502;
  unint64_t v503;
  int8x8_t *v504;
  int8x8_t v505;
  uint8x8_t v506;
  uint64_t v507;
  _QWORD *v508;
  uint64_t *v509;
  unint64_t v510;
  uint64_t v511;
  uint64_t v512;
  _QWORD *v513;
  uint64_t *v514;
  unint64_t v515;
  uint64_t v516;
  char v517;
  uint64_t v518;
  _QWORD *v519;
  uint64_t *v520;
  unint64_t v521;
  uint64_t v522;
  uint64_t v523;
  _QWORD *v524;
  uint64_t *v525;
  unint64_t v526;
  uint64_t v527;
  uint64_t v528;
  int v529;
  _QWORD ***v530;
  unsigned int v531;
  __int32 v532;
  unint64_t v533;
  void *v534;
  size_t v535;
  __int32 v536;
  unint64_t v537;
  void *v538;
  int8x8_t v539;
  const llvm::APInt *v540;
  unsigned int v541;
  unsigned int v542;
  llvm::ValueHandleBase *v543;
  uint64_t *v544;
  uint64_t v545;
  llvm::ValueHandleBase *v546;
  int v547;
  _QWORD ***v548;
  int8x8_t v549;
  uint64_t v550;
  unint64_t v551;
  int8x8_t *v552;
  uint64_t v553;
  unint64_t v554;
  int8x8_t *v555;
  uint64_t v556;
  int v557;
  _QWORD ***v558;
  llvm::UndefValue *v559;
  __int128 v560;
  _QWORD **v561;
  _QWORD **v562;
  unsigned __int8 *v563;
  uint64_t v564;
  void *v565;
  uint64_t v566;
  llvm::APInt *v567;
  unint64_t v568;
  uint64_t *v569;
  unint64_t v570;
  _QWORD *v571;
  uint64_t v572;
  void *v573;
  const void **v574;
  uint64_t *v575;
  unint64_t v576;
  _QWORD *v577;
  uint64_t v578;
  unsigned int v579;
  int8x8_t v580;
  size_t v581;
  _QWORD *v582;
  uint64_t *v583;
  unint64_t v584;
  uint64_t v585;
  _QWORD *v586;
  uint64_t *v587;
  unint64_t v588;
  uint64_t v589;
  size_t v590;
  int8x8_t v591;
  unint64_t v592;
  unint64_t v593;
  uint64_t *v594;
  _QWORD *v595;
  uint64_t v596;
  unint64_t v597;
  unint64_t v598;
  uint64_t *v599;
  _QWORD *v600;
  uint64_t v601;
  uint64_t v602;
  unint64_t v603;
  unint64_t v604;
  unint64_t v605;
  unint64_t v606;
  unint64_t v607;
  llvm::ConstantInt *v608;
  unsigned int v609;
  char v610;
  llvm::ConstantInt *v611;
  unsigned int v612;
  char v613;
  int8x8_t v614;
  unsigned int v615;
  _QWORD **v616;
  uint64_t v617;
  _QWORD *v618;
  uint64_t *v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  _QWORD *v623;
  uint64_t *v624;
  unint64_t v625;
  uint64_t v626;
  unsigned int v627;
  size_t v628;
  _QWORD *v629;
  uint64_t *v630;
  unint64_t v631;
  uint64_t v632;
  _QWORD *v633;
  uint64_t *v634;
  unint64_t v635;
  uint64_t v636;
  uint64_t *v637;
  unint64_t v638;
  _QWORD *v639;
  uint64_t v640;
  uint64_t *v641;
  unint64_t v642;
  _QWORD *v643;
  uint64_t v644;
  uint64_t *v645;
  unint64_t v646;
  _QWORD *v647;
  uint64_t v648;
  uint64_t *v649;
  unint64_t v650;
  _QWORD *v651;
  uint64_t v652;
  uint64_t *v653;
  unint64_t v654;
  _QWORD *v655;
  uint64_t v656;
  uint64_t *v657;
  unint64_t v658;
  _QWORD *v659;
  uint64_t v660;
  uint64_t v661;
  size_t __n;
  int v663;
  unsigned int v664;
  llvm::APInt *v665;
  llvm::APInt *v666;
  unsigned int v667;
  llvm::APInt *v668;
  void *v669;
  unsigned int v670;
  void *v671;
  unsigned int v672;
  void *v673[2];
  void *__src[2];
  __int128 v675;
  void *v676;
  unsigned int v677;
  void *v678;
  unsigned int v679;
  void *v680;
  unsigned int v681;
  void *v682;
  unsigned int v683;
  llvm::APInt *v684;
  unsigned int v685;
  void *v686;
  __int32 v687;
  unint64_t v688;
  unsigned int v689;
  unint64_t v690;
  unsigned int v691;
  unint64_t *v692;
  unsigned int v693;
  llvm::UndefValue **v694;
  uint64_t v695;
  uint64_t v696;
  unsigned int v697;
  unint64_t v698;
  unsigned int v699;
  unint64_t v700;
  unsigned int v701;
  void *v702;
  unsigned int v703;

  v10 = a3[1].u32[0];
  v699 = v10;
  if (v10 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v698, 0, 0);
    v701 = v10;
    llvm::APInt::initSlowCase((llvm::APInt *)&v700, 0, 0);
  }
  else
  {
    v701 = v10;
    v698 = 0;
    v700 = 0;
  }
  v11 = *((unsigned __int8 *)a1 + 16);
  if (a1 && v11 > 0x1B)
    v12 = v11 - 28;
  else
    v12 = *((unsigned __int16 *)a1 + 9);
  switch(v12)
  {
    case 5u:
    case 0x38u:
      if (!*(_BYTE *)(a5 + 40) || (*((_BYTE *)a1 + 23) & 0x20) == 0)
        goto LABEL_568;
      v15 = ***(_QWORD ***)a1;
      v673[0] = a1;
      v16 = *(_DWORD *)(v15 + 2496);
      if (!v16)
      {
        v366 = 0;
LABEL_692:
        v20 = (llvm::UndefValue **)sub_1C541AB24(v15 + 2480, (uint64_t)v673, (uint64_t *)v673, v366);
        v367 = (llvm::UndefValue *)v673[0];
        v20[3] = 0;
        v20[4] = 0;
        *v20 = v367;
        v20[1] = (llvm::UndefValue *)(v20 + 3);
        v20[2] = (llvm::UndefValue *)0x100000000;
        goto LABEL_22;
      }
      v17 = *(_QWORD *)(v15 + 2480);
      v18 = v16 - 1;
      v19 = v18 & ((a1 >> 4) ^ (a1 >> 9));
      v20 = (llvm::UndefValue **)(v17 + 40 * v19);
      v21 = *v20;
      if (*v20 == a1)
        goto LABEL_22;
      v22 = 0;
      v23 = 1;
      do
      {
        if (v21 == (llvm::UndefValue *)-4096)
        {
          if (v22)
            v366 = v22;
          else
            v366 = v20;
          goto LABEL_692;
        }
        if (v22)
          v24 = 0;
        else
          v24 = v21 == (llvm::UndefValue *)-8192;
        if (v24)
          v22 = v20;
        v25 = v19 + v23++;
        v19 = v25 & v18;
        v20 = (llvm::UndefValue **)(v17 + 40 * v19);
        v21 = *v20;
      }
      while (*v20 != a1);
LABEL_22:
      v26 = *((unsigned int *)v20 + 4);
      if ((_DWORD)v26)
      {
        v27 = (uint64_t *)((char *)v20[1] + 8);
        v28 = 16 * v26;
        while (*((_DWORD *)v27 - 2) != 4)
        {
          v27 += 2;
          v28 -= 16;
          if (!v28)
            goto LABEL_568;
        }
        if (*v27)
          llvm::computeKnownBitsFromRangeMetadata(*v27, (void **)a3, (llvm::KnownBits *)a3);
      }
LABEL_568:
      LODWORD(v690) = 0;
      if (llvm::AttributeList::hasAttrSomewhere((uint64_t *)a1 + 8, 46, (int *)&v690)
        || (v316 = *((_QWORD *)a1 - 4)) != 0
        && !*(_BYTE *)(v316 + 16)
        && *(_QWORD *)(v316 + 24) == *((_QWORD *)a1 + 9)
        && (v673[0] = *(void **)(v316 + 112), llvm::AttributeList::hasAttrSomewhere((uint64_t *)v673, 46, (int *)&v690)))
      {
        v616 = (_QWORD **)*((_QWORD *)a1 + 4 * (v690 - 1) + -4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF));
        if (v616)
        {
          sub_1C4F82B7C(v616, &v698, a4 + 1, a5);
          v617 = a3[1].u32[0];
          if (v617 > 0x40)
          {
            v618 = (_QWORD *)*a3;
            v619 = (uint64_t *)v698;
            v620 = (unint64_t)(v617 + 63) >> 6;
            do
            {
              v621 = *v619++;
              *v618++ |= v621;
              --v620;
            }
            while (v620);
          }
          else
          {
            *(_QWORD *)a3 |= v698;
          }
          v622 = a3[3].u32[0];
          if (v622 > 0x40)
          {
            v623 = (_QWORD *)a3[2];
            v624 = (uint64_t *)v700;
            v625 = (unint64_t)(v622 + 63) >> 6;
            do
            {
              v626 = *v624++;
              *v623++ |= v626;
              --v625;
            }
            while (v625);
          }
          else
          {
            *(_QWORD *)&a3[2] |= v700;
          }
        }
      }
      if (*((_BYTE *)a1 + 16) != 84)
        goto LABEL_1187;
      v317 = *((_QWORD *)a1 - 4);
      if (!v317
        || *(_BYTE *)(v317 + 16)
        || *(_QWORD *)(v317 + 24) != *((_QWORD *)a1 + 9)
        || (*(_BYTE *)(v317 + 33) & 0x20) == 0)
      {
        goto LABEL_1187;
      }
      v318 = *(_DWORD *)(v317 + 36);
      if (v318 <= 274)
      {
        if (v318 <= 53)
        {
          if (v318 > 8)
          {
            if (v318 != 9)
            {
              if (v318 != 52)
              {
                if (v318 == 53)
                {
                  v319 = *((_DWORD *)a1 + 5);
                  if ((v319 & 0x40000000) != 0)
                    v320 = (_QWORD *)*((_QWORD *)a1 - 1);
                  else
                    v320 = (_QWORD *)((char *)a1 - 32 * (v319 & 0x7FFFFFF));
                  sub_1C4F82B7C(*v320, &v698, a4 + 1, a5);
                  if (v699 > 0x40)
                  {
                    v502 = 0;
                    v503 = ((unint64_t)v699 + 63) >> 6;
                    v504 = (int8x8_t *)v698;
                    do
                    {
                      v505 = *v504++;
                      v506 = (uint8x8_t)vcnt_s8(v505);
                      v506.i16[0] = vaddlv_u8(v506);
                      v502 += v506.i32[0];
                      --v503;
                    }
                    while (v503);
                  }
                  else
                  {
                    v501 = (uint8x8_t)vcnt_s8((int8x8_t)v698);
                    v501.i16[0] = vaddlv_u8(v501);
                    v502 = v501.i32[0];
                  }
                  v500 = v699 - v502;
                  goto LABEL_1072;
                }
                goto LABEL_1187;
              }
              v463 = *((_DWORD *)a1 + 5);
              if ((v463 & 0x40000000) != 0)
                v464 = (_QWORD *)*((_QWORD *)a1 - 1);
              else
                v464 = (_QWORD *)((char *)a1 - 32 * (v463 & 0x7FFFFFF));
              sub_1C4F82B7C(*v464, &v698, a4 + 1, a5);
              if (v701 > 0x40)
              {
                v492 = 0;
                v493 = ((unint64_t)v701 + 63) >> 6;
                do
                {
                  v285 = v493-- < 1;
                  if (v285)
                    break;
                  v494 = *(_QWORD *)(v700 + 8 * v493);
                  v492 += __clz(v494);
                }
                while (!v494);
                if ((v701 & 0x3F) != 0)
                  v495 = v701 | 0xFFFFFFC0;
                else
                  v495 = 0;
                v491 = v492 + v495;
              }
              else
              {
                v491 = v701 + __clz(v700) - 64;
              }
              v496 = (llvm::ValueHandleBase *)((_QWORD *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF))[4];
              v497 = **(uint64_t ***)a1;
              v498 = *v497;
              v499 = *(llvm::ValueHandleBase **)(*v497 + 1560);
              if (!v499)
              {
                v608 = *(llvm::ConstantInt **)(v498 + 1888);
                v609 = *(_DWORD *)(v498 + 1896);
                LODWORD(v673[1]) = v609 >> 8;
                if (v609 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)v673, 1, 0);
                }
                else
                {
                  if (v609 <= 0xFF)
                    v610 = 0;
                  else
                    v610 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v609);
                  v673[0] = (void *)(v610 & 1);
                }
                v499 = llvm::ConstantInt::get(v608, (llvm::LLVMContext *)v673, v490);
                if (LODWORD(v673[1]) >= 0x41 && v673[0])
                  MEMORY[0x1CAA32F9C](v673[0], 0x1000C8000313F17);
                *(_QWORD *)(v498 + 1560) = v499;
              }
              v500 = v10 - 1;
              if ((int)v10 - 1 >= v491)
                v500 = v491;
              if (v496 != v499)
                v500 = v491;
LABEL_1072:
              v78 = 32 - __clz(v500);
LABEL_1073:
              v76 = a3[1].u32[0];
LABEL_551:
              v77 = a3;
LABEL_552:
              sub_1C4912E54(v77, v78, v76);
              goto LABEL_1187;
            }
            v465 = *((_DWORD *)a1 + 5);
            if ((v465 & 0x40000000) != 0)
              v466 = (_QWORD *)*((_QWORD *)a1 - 1);
            else
              v466 = (_QWORD *)((char *)a1 - 32 * (v465 & 0x7FFFFFF));
            sub_1C4F82D44(*v466, this);
            llvm::APInt::byteSwap((llvm::APInt *)&v698, (llvm::APInt *)v673);
            v507 = a3[1].u32[0];
            if (v507 > 0x40)
            {
              v508 = (_QWORD *)*a3;
              v509 = (uint64_t *)v673[0];
              v510 = (unint64_t)(v507 + 63) >> 6;
              do
              {
                v511 = *v509++;
                *v508++ |= v511;
                --v510;
              }
              while (v510);
            }
            else
            {
              *(_QWORD *)a3 |= (unint64_t)v673[0];
            }
            if (LODWORD(v673[1]) >= 0x41 && v673[0])
              MEMORY[0x1CAA32F9C](v673[0], 0x1000C8000313F17);
            llvm::APInt::byteSwap((llvm::APInt *)&v700, (llvm::APInt *)v673);
            v512 = a3[3].u32[0];
            if (v512 > 0x40)
            {
              v513 = (_QWORD *)a3[2];
              v514 = (uint64_t *)v673[0];
              v515 = (unint64_t)(v512 + 63) >> 6;
              do
              {
                v516 = *v514++;
                *v513++ |= v516;
                --v515;
              }
              while (v515);
              goto LABEL_631;
            }
LABEL_1024:
            *(_QWORD *)&a3[2] |= (unint64_t)v673[0];
            goto LABEL_631;
          }
          if (v318 != 1)
          {
            if (v318 != 8)
              goto LABEL_1187;
            v432 = *((_DWORD *)a1 + 5);
            if ((v432 & 0x40000000) != 0)
              v433 = (_QWORD *)*((_QWORD *)a1 - 1);
            else
              v433 = (_QWORD *)((char *)a1 - 32 * (v432 & 0x7FFFFFF));
            sub_1C4F82D44(*v433, this);
            llvm::APInt::reverseBits((llvm::APInt *)&v698, (llvm::APInt *)v673);
            v518 = a3[1].u32[0];
            if (v518 > 0x40)
            {
              v519 = (_QWORD *)*a3;
              v520 = (uint64_t *)v673[0];
              v521 = (unint64_t)(v518 + 63) >> 6;
              do
              {
                v522 = *v520++;
                *v519++ |= v522;
                --v521;
              }
              while (v521);
            }
            else
            {
              *(_QWORD *)a3 |= (unint64_t)v673[0];
            }
            if (LODWORD(v673[1]) >= 0x41 && v673[0])
              MEMORY[0x1CAA32F9C](v673[0], 0x1000C8000313F17);
            llvm::APInt::reverseBits((llvm::APInt *)&v700, (llvm::APInt *)v673);
            v523 = a3[3].u32[0];
            if (v523 <= 0x40)
              goto LABEL_1024;
            v524 = (_QWORD *)a3[2];
            v525 = (uint64_t *)v673[0];
            v526 = (unint64_t)(v523 + 63) >> 6;
            do
            {
              v527 = *v525++;
              *v524++ |= v527;
              --v526;
            }
            while (v526);
LABEL_631:
            v340 = v673[1];
LABEL_632:
            if (v340 < 0x41)
              goto LABEL_1187;
LABEL_1185:
            if (!v673[0])
              goto LABEL_1187;
LABEL_1186:
            MEMORY[0x1CAA32F9C]();
            goto LABEL_1187;
          }
          v467 = *((_DWORD *)a1 + 5);
          if ((v467 & 0x40000000) != 0)
            v468 = (_QWORD *)*((_QWORD *)a1 - 1);
          else
            v468 = (_QWORD *)((char *)a1 - 32 * (v467 & 0x7FFFFFF));
          sub_1C4F82B7C(*v468, &v698, a4 + 1, a5);
          v517 = sub_1C4D89CC8((uint64_t)v673, ((llvm::Constant **)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF))[4]);
          llvm::KnownBits::abs((llvm::KnownBits *)&v698, v517, v673);
LABEL_237:
          if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
            ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
          *a3 = (int8x8_t)v673[0];
          a3[1].i32[0] = (__int32)v673[1];
          LODWORD(v673[1]) = 0;
          if (a3[3].i32[0] >= 0x41u)
          {
            v580 = a3[2];
            if (v580)
            {
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v580, 0x1000C8000313F17);
              v340 = v673[1];
              a3[2] = (int8x8_t)__src[0];
              a3[3].i32[0] = (__int32)__src[1];
              LODWORD(__src[1]) = 0;
              goto LABEL_632;
            }
          }
LABEL_239:
          a3[2] = (int8x8_t)__src[0];
          a3[3].i32[0] = (__int32)__src[1];
          goto LABEL_1187;
        }
        if ((v318 - 148) >= 2)
        {
          if (v318 == 54)
          {
            v474 = *((_DWORD *)a1 + 5);
            if ((v474 & 0x40000000) != 0)
              v475 = (_QWORD *)*((_QWORD *)a1 - 1);
            else
              v475 = (_QWORD *)((char *)a1 - 32 * (v474 & 0x7FFFFFF));
            sub_1C4F82B7C(*v475, &v698, a4 + 1, a5);
            if (v701 > 0x40)
            {
              v542 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)&v700);
            }
            else
            {
              v541 = __clz(__rbit64(v700));
              if (v701 >= v541)
                v542 = v541;
              else
                v542 = v701;
            }
            v543 = (llvm::ValueHandleBase *)((_QWORD *)a1 - 4 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF))[4];
            v544 = **(uint64_t ***)a1;
            v545 = *v544;
            v546 = *(llvm::ValueHandleBase **)(*v544 + 1560);
            if (!v546)
            {
              v611 = *(llvm::ConstantInt **)(v545 + 1888);
              v612 = *(_DWORD *)(v545 + 1896);
              LODWORD(v673[1]) = v612 >> 8;
              if (v612 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)v673, 1, 0);
              }
              else
              {
                if (v612 <= 0xFF)
                  v613 = 0;
                else
                  v613 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v612);
                v673[0] = (void *)(v613 & 1);
              }
              v546 = llvm::ConstantInt::get(v611, (llvm::LLVMContext *)v673, v540);
              if (LODWORD(v673[1]) >= 0x41 && v673[0])
                MEMORY[0x1CAA32F9C](v673[0], 0x1000C8000313F17);
              *(_QWORD *)(v545 + 1560) = v546;
            }
            v500 = v10 - 1;
            if ((int)v10 - 1 >= v542)
              v500 = v542;
            if (v543 != v546)
              v500 = v542;
            goto LABEL_1072;
          }
          if (v318 != 274)
            goto LABEL_1187;
          v428 = *((_DWORD *)a1 + 5);
          if ((v428 & 0x40000000) != 0)
            v429 = (_QWORD *)*((_QWORD *)a1 - 1);
          else
            v429 = (_QWORD *)((char *)a1 - 32 * (v428 & 0x7FFFFFF));
          sub_1C4F82B7C(*v429, a3, a4 + 1, a5);
          v547 = *((_DWORD *)a1 + 5);
          if ((v547 & 0x40000000) != 0)
            v548 = (_QWORD ***)*((_QWORD *)a1 - 1);
          else
            v548 = (_QWORD ***)((char *)a1 - 32 * (v547 & 0x7FFFFFF));
          sub_1C4F82B7C(v548[4], &v698, a4 + 1, a5);
          llvm::KnownBits::smax((llvm::KnownBits *)a3, (const llvm::KnownBits *)&v698, (uint64_t)v673);
          goto LABEL_1079;
        }
        v684 = 0;
        v451 = *((_DWORD *)a1 + 5);
        if ((v451 & 0x40000000) != 0)
          v452 = (_QWORD ***)*((_QWORD *)a1 - 1);
        else
          v452 = (_QWORD ***)((char *)a1 - 32 * (v451 & 0x7FFFFFF));
        v469 = (unsigned __int8 *)v452[8];
        v673[0] = &v684;
        v673[1] = 0;
        if (!sub_1C4D89F84((uint64_t)v673, v469))
          goto LABEL_1187;
        v470 = llvm::APInt::urem((uint64_t **)v684, v10);
        if (*(_DWORD *)(*((_QWORD *)a1 - 4) + 36) == 149)
          v471 = v10 - v470;
        else
          v471 = v470;
        LODWORD(v673[1]) = v10;
        if (v10 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)v673, 0, 0);
          LODWORD(__src[1]) = v10;
          llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
        }
        else
        {
          LODWORD(__src[1]) = v10;
          v673[0] = 0;
          __src[0] = 0;
        }
        v472 = *((_DWORD *)a1 + 5);
        if ((v472 & 0x40000000) != 0)
          v473 = (_QWORD *)*((_QWORD *)a1 - 1);
        else
          v473 = (_QWORD *)((char *)a1 - 32 * (v472 & 0x7FFFFFF));
        v528 = a4 + 1;
        sub_1C4F82B7C(*v473, &v698, v528, a5);
        v529 = *((_DWORD *)a1 + 5);
        if ((v529 & 0x40000000) != 0)
          v530 = (_QWORD ***)*((_QWORD *)a1 - 1);
        else
          v530 = (_QWORD ***)((char *)a1 - 32 * (v529 & 0x7FFFFFF));
        sub_1C4F82B7C(v530[4], v673, v528, a5);
        v691 = v699;
        if (v699 > 0x40)
        {
          v690 = operator new[]();
          memcpy((void *)v690, (const void *)v698, (((unint64_t)v691 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v690 = v698;
        }
        sub_1C4888094((uint64_t)&v690, v471);
        v531 = v10 - v471;
        v532 = (__int32)v673[1];
        if (LODWORD(v673[1]) > 0x40)
        {
          v592 = LODWORD(v673[1]) + 63;
          v534 = (void *)operator new[]();
          memcpy(v534, v673[0], (v592 >> 3) & 0x3FFFFFF8);
          v593 = v592 >> 6;
          llvm::APInt::tcShiftRight((llvm::APInt *)v534, (unint64_t *)(v592 >> 6), v531);
          v594 = (uint64_t *)v690;
          v595 = v534;
          do
          {
            v596 = *v594++;
            *v595++ |= v596;
            --v593;
          }
          while (v593);
        }
        else
        {
          v533 = (unint64_t)v673[0] >> v531;
          if (LODWORD(v673[1]) == v531)
            v533 = 0;
          v534 = (void *)(v533 | v690);
        }
        if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
          ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
        *a3 = (int8x8_t)v534;
        a3[1].i32[0] = v532;
        if (v691 >= 0x41 && v690)
          MEMORY[0x1CAA32F9C](v690, 0x1000C8000313F17);
        v691 = v701;
        if (v701 > 0x40)
        {
          v535 = (((unint64_t)v701 + 63) >> 3) & 0x3FFFFFF8;
          v690 = operator new[]();
          memcpy((void *)v690, (const void *)v700, v535);
        }
        else
        {
          v690 = v700;
        }
        sub_1C4888094((uint64_t)&v690, v471);
        v536 = (__int32)__src[1];
        if (LODWORD(__src[1]) > 0x40)
        {
          v597 = LODWORD(__src[1]) + 63;
          v538 = (void *)operator new[]();
          memcpy(v538, __src[0], (v597 >> 3) & 0x3FFFFFF8);
          v598 = v597 >> 6;
          llvm::APInt::tcShiftRight((llvm::APInt *)v538, (unint64_t *)(v597 >> 6), v531);
          v599 = (uint64_t *)v690;
          v600 = v538;
          do
          {
            v601 = *v599++;
            *v600++ |= v601;
            --v598;
          }
          while (v598);
        }
        else
        {
          v537 = (unint64_t)__src[0] >> v531;
          if (LODWORD(__src[1]) == v531)
            v537 = 0;
          v538 = (void *)(v537 | v690);
        }
        if (a3[3].i32[0] >= 0x41u)
        {
          v539 = a3[2];
          if (v539)
            MEMORY[0x1CAA32F9C](*(_QWORD *)&v539, 0x1000C8000313F17);
        }
        a3[2] = (int8x8_t)v538;
        a3[3].i32[0] = v536;
        if (v691 >= 0x41 && v690)
          MEMORY[0x1CAA32F9C](v690, 0x1000C8000313F17);
        if (LODWORD(__src[1]) < 0x41)
          goto LABEL_631;
        v333 = __src[0];
        if (!__src[0])
          goto LABEL_631;
LABEL_630:
        MEMORY[0x1CAA32F9C](v333, 0x1000C8000313F17);
        goto LABEL_631;
      }
      if (v318 <= 310)
      {
        if (v318 > 304)
        {
          if (v318 == 305)
          {
            v455 = *((_DWORD *)a1 + 5);
            if ((v455 & 0x40000000) != 0)
              v456 = (_QWORD *)*((_QWORD *)a1 - 1);
            else
              v456 = (_QWORD *)((char *)a1 - 32 * (v455 & 0x7FFFFFF));
            sub_1C4F82B7C(*v456, a3, a4 + 1, a5);
            v480 = *((_DWORD *)a1 + 5);
            if ((v480 & 0x40000000) != 0)
              v481 = (_QWORD ***)*((_QWORD *)a1 - 1);
            else
              v481 = (_QWORD ***)((char *)a1 - 32 * (v480 & 0x7FFFFFF));
            sub_1C4F82B7C(v481[4], &v698, a4 + 1, a5);
            llvm::KnownBits::umax((const void **)a3, (const void **)&v698, v482, (uint64_t)v673);
          }
          else
          {
            if (v318 != 306)
              goto LABEL_1187;
            v430 = *((_DWORD *)a1 + 5);
            if ((v430 & 0x40000000) != 0)
              v431 = (_QWORD *)*((_QWORD *)a1 - 1);
            else
              v431 = (_QWORD *)((char *)a1 - 32 * (v430 & 0x7FFFFFF));
            sub_1C4F82B7C(*v431, a3, a4 + 1, a5);
            v483 = *((_DWORD *)a1 + 5);
            if ((v483 & 0x40000000) != 0)
              v484 = (_QWORD ***)*((_QWORD *)a1 - 1);
            else
              v484 = (_QWORD ***)((char *)a1 - 32 * (v483 & 0x7FFFFFF));
            sub_1C4F82B7C(v484[4], &v698, a4 + 1, a5);
            llvm::KnownBits::umin((const void **)a3, (const void **)&v698, v485, (uint64_t)v673);
          }
          goto LABEL_237;
        }
        if (v318 == 275)
        {
          v453 = *((_DWORD *)a1 + 5);
          if ((v453 & 0x40000000) != 0)
            v454 = (_QWORD *)*((_QWORD *)a1 - 1);
          else
            v454 = (_QWORD *)((char *)a1 - 32 * (v453 & 0x7FFFFFF));
          sub_1C4F82B7C(*v454, a3, a4 + 1, a5);
          v478 = *((_DWORD *)a1 + 5);
          if ((v478 & 0x40000000) != 0)
            v479 = (_QWORD ***)*((_QWORD *)a1 - 1);
          else
            v479 = (_QWORD ***)((char *)a1 - 32 * (v478 & 0x7FFFFFF));
          sub_1C4F82B7C(v479[4], &v698, a4 + 1, a5);
          llvm::KnownBits::smin((llvm::KnownBits *)a3, (const llvm::KnownBits *)&v698, (uint64_t)v673);
LABEL_1079:
          if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
            ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
          *a3 = (int8x8_t)v673[0];
          a3[1].i32[0] = (__int32)v673[1];
          if (a3[3].i32[0] >= 0x41u)
          {
            v549 = a3[2];
            if (v549)
              MEMORY[0x1CAA32F9C](*(_QWORD *)&v549, 0x1000C8000313F17);
          }
          goto LABEL_239;
        }
        if (v318 != 300)
          goto LABEL_1187;
LABEL_896:
        v449 = *((_DWORD *)a1 + 5);
        if ((v449 & 0x40000000) != 0)
          v450 = (_QWORD *)*((_QWORD *)a1 - 1);
        else
          v450 = (_QWORD *)((char *)a1 - 32 * (v449 & 0x7FFFFFF));
        sub_1C4F82B7C(*v450, a3, a4 + 1, a5);
        v457 = *((_DWORD *)a1 + 5);
        if ((v457 & 0x40000000) != 0)
          v458 = (_QWORD ***)*((_QWORD *)a1 - 1);
        else
          v458 = (_QWORD ***)((char *)a1 - 32 * (v457 & 0x7FFFFFF));
        sub_1C4F82B7C(v458[4], &v698, a4 + 1, a5);
        if (v318 == 300)
        {
          v459 = (llvm::APInt *)&a3[2];
          v460 = a3[3].u32[0];
          if (v460 > 0x40)
          {
            v461 = llvm::APInt::countLeadingOnesSlowCase(v459);
          }
          else if (v460)
          {
            v461 = __clz(~(*(_QWORD *)v459 << -(char)v460));
          }
          else
          {
            v461 = 0;
          }
          v486 = v701;
          if (v701 <= 0x40)
          {
            if (!v701)
            {
LABEL_955:
              v487 = 0;
              goto LABEL_961;
            }
            goto LABEL_959;
          }
        }
        else
        {
          v462 = a3[1].u32[0];
          if (v462 > 0x40)
          {
            v461 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)a3);
          }
          else if (v462)
          {
            v461 = __clz(~(*(_QWORD *)a3 << -(char)v462));
          }
          else
          {
            v461 = 0;
          }
          v486 = v701;
          if (v701 <= 0x40)
          {
            if (!v701)
              goto LABEL_955;
LABEL_959:
            v487 = __clz(~(v700 << -(char)v486));
            goto LABEL_961;
          }
        }
        v487 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v700);
LABEL_961:
        if (v461 <= v487)
          v488 = v487;
        else
          v488 = v461;
        v670 = v699;
        if (v699 > 0x40)
        {
          v628 = (((unint64_t)v699 + 63) >> 3) & 0x3FFFFFF8;
          v669 = (void *)operator new[]();
          memcpy(v669, (const void *)v698, v628);
          v486 = v701;
        }
        else
        {
          v669 = (void *)v698;
        }
        v672 = v486;
        if (v486 > 0x40)
        {
          v671 = (void *)operator new[]();
          memcpy(v671, (const void *)v700, (((unint64_t)v486 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v671 = (void *)v700;
        }
        llvm::KnownBits::computeForAddSub(v318 == 300, 0, (uint64_t)a3, (uint64_t)&v669, (uint64_t)v673);
        if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
          ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
        *a3 = (int8x8_t)v673[0];
        a3[1].i32[0] = (__int32)v673[1];
        LODWORD(v673[1]) = 0;
        v489 = a3 + 2;
        if (a3[3].i32[0] >= 0x41u && *(_QWORD *)v489)
        {
          ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*v489, 0x1000C8000313F17);
          v627 = v673[1];
          a3[2] = (int8x8_t)__src[0];
          a3[3].i32[0] = (__int32)__src[1];
          LODWORD(__src[1]) = 0;
          if (v627 >= 0x41 && v673[0])
            MEMORY[0x1CAA32F9C](v673[0], 0x1000C8000313F17);
        }
        else
        {
          a3[2] = (int8x8_t)__src[0];
          a3[3].i32[0] = (__int32)__src[1];
          LODWORD(__src[1]) = 0;
        }
        if (v672 >= 0x41 && v671)
          MEMORY[0x1CAA32F9C](v671, 0x1000C8000313F17);
        if (v670 >= 0x41 && v669)
          MEMORY[0x1CAA32F9C](v669, 0x1000C8000313F17);
        if (v318 == 300)
        {
          sub_1C4912E54(&a3[2], a3[3].i32[0] - v488, a3[3].u32[0]);
          v280 = a3[1].u32[0];
          if (v280 > 0x40)
          {
            v281 = (void *)*a3;
            goto LABEL_488;
          }
          *a3 = 0;
        }
        else
        {
          sub_1C4912E54(a3, a3[1].i32[0] - v488, a3[1].u32[0]);
          v280 = a3[3].u32[0];
          if (v280 > 0x40)
          {
            v281 = (void *)*v489;
            goto LABEL_488;
          }
          *v489 = 0;
        }
        goto LABEL_1187;
      }
      if (v318 > 9410)
      {
        if (v318 == 9411 || v318 == 9413)
        {
          if (v10 >= 0x20)
          {
            v76 = a3[1].u32[0];
            v77 = a3;
            v78 = 31;
            goto LABEL_552;
          }
        }
        else if (v318 == 12309)
        {
          v76 = a3[1].u32[0];
          v77 = a3;
          v78 = 32;
          goto LABEL_552;
        }
        goto LABEL_1187;
      }
      if (v318 == 311)
        goto LABEL_896;
      if (v318 != 382)
        goto LABEL_1187;
      v434 = (_QWORD **)*((_QWORD *)a1 + 5);
      if (!v434)
        goto LABEL_1187;
      v435 = v434[7];
      if (!v435)
        goto LABEL_1187;
      v438 = v435[14];
      v436 = v435 + 14;
      v437 = v438;
      if (!v438 || (*(_BYTE *)(v437 + 22) & 1) == 0)
        goto LABEL_1187;
      v442 = *(_QWORD *)(llvm::AttributeList::getAttributeAtIndex(v436, -1, 80) + 16);
      v439 = HIDWORD(v442);
      v24 = v442 == 0;
      v440 = (_DWORD)v442 != 0;
      v441 = v442 & 0xFFFFFF00;
      v442 = v442;
      LODWORD(v673[0]) = v439;
      if (v24)
        v442 = 0;
      *(void **)((char *)v673 + 4) = (void *)(v442 | v441 | (v440 << 32));
      *((_QWORD *)&v444 + 1) = v440;
      *(void **)&v444 = v673[0];
      v443 = v444 >> 32;
      if (!HIDWORD(v443))
        goto LABEL_1187;
      if ((_DWORD)v439 != (_DWORD)v443)
      {
        v78 = 32 - __clz(v443);
        if (v78 >= v10)
          goto LABEL_1187;
        goto LABEL_1073;
      }
      v445 = v443;
      v446 = a3[3].u32[0];
      if (v446 > 0x40)
      {
        **(_QWORD **)&a3[2] = v443;
        bzero((void *)(*(_QWORD *)&a3[2] + 8), (((unint64_t)(v446 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        if ((_DWORD)v446)
          v447 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v446;
        else
          LODWORD(v447) = 0;
        a3[2] = (int8x8_t)(v447 & v443);
      }
      v602 = a3[1].u32[0];
      if (v602 > 0x40)
      {
        **(_QWORD **)a3 = v445;
        bzero((void *)(*(_QWORD *)a3 + 8), (((unint64_t)(v602 + 63) >> 3) - 8) & 0xFFFFFFF8);
        LODWORD(v602) = a3[1].i32[0];
        if (v602 > 0x40)
        {
          llvm::APInt::flipAllBitsSlowCase((uint64_t)a3);
          goto LABEL_1187;
        }
        v605 = (unint64_t)*a3;
        v603 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v602;
      }
      else
      {
        v603 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v602;
        if ((_DWORD)v602)
          v604 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v602;
        else
          v604 = 0;
        v605 = v604 & v445;
      }
      v606 = ~v605;
      if ((_DWORD)v602)
        v607 = v603;
      else
        v607 = 0;
      v323 = v607 & v606;
LABEL_893:
      *a3 = (int8x8_t)v323;
LABEL_1187:
      if (v701 >= 0x41 && v700)
        MEMORY[0x1CAA32F9C](v700, 0x1000C8000313F17);
      if (v699 >= 0x41)
      {
        if (v698)
          MEMORY[0x1CAA32F9C](v698, 0x1000C8000313F17);
      }
      return;
    case 0xDu:
      if (*(_BYTE *)(a5 + 40))
        v59 = (*((unsigned __int8 *)a1 + 17) >> 2) & 1;
      else
        v59 = 0;
      v291 = *((_DWORD *)a1 + 5);
      if ((v291 & 0x40000000) != 0)
        v292 = (_QWORD *)*((_QWORD *)a1 - 1);
      else
        v292 = (_QWORD *)((char *)a1 - 32 * (v291 & 0x7FFFFFF));
      sub_1C4F9F2D4(1, *v292, v292[4], v59, this, a3, (uint64_t)&v698, a4, a5);
      goto LABEL_1187;
    case 0xFu:
      if (*(_BYTE *)(a5 + 40))
        v93 = (*((unsigned __int8 *)a1 + 17) >> 2) & 1;
      else
        v93 = 0;
      v302 = *((_DWORD *)a1 + 5);
      if ((v302 & 0x40000000) != 0)
        v303 = (uint64_t *)*((_QWORD *)a1 - 1);
      else
        v303 = (uint64_t *)((char *)a1 - 32 * (v302 & 0x7FFFFFF));
      v139 = *v303;
      v140 = v303[4];
      v661 = a5;
      v141 = 0;
      goto LABEL_537;
    case 0x11u:
      if (*(_BYTE *)(a5 + 40))
        v94 = (*((unsigned __int8 *)a1 + 17) >> 2) & 1;
      else
        v94 = 0;
      v304 = *((_DWORD *)a1 + 5);
      if ((v304 & 0x40000000) != 0)
        v305 = (uint64_t ****)*((_QWORD *)a1 - 1);
      else
        v305 = (uint64_t ****)((char *)a1 - 32 * (v304 & 0x7FFFFFF));
      v306 = *v305;
      v307 = v305[4];
      goto LABEL_543;
    case 0x13u:
      v60 = *((_DWORD *)a1 + 5);
      if ((v60 & 0x40000000) != 0)
        v61 = (_QWORD *)*((_QWORD *)a1 - 1);
      else
        v61 = (_QWORD *)((char *)a1 - 32 * (v60 & 0x7FFFFFF));
      sub_1C4F82B7C(*v61, a3, a4 + 1, a5);
      v148 = *((_DWORD *)a1 + 5);
      if ((v148 & 0x40000000) != 0)
        v149 = (_QWORD ***)*((_QWORD *)a1 - 1);
      else
        v149 = (_QWORD ***)((char *)a1 - 32 * (v148 & 0x7FFFFFF));
      sub_1C4F82B7C(v149[4], &v698, a4 + 1, a5);
      llvm::KnownBits::udiv((llvm::KnownBits *)a3, (const llvm::KnownBits *)&v698, (unsigned int *)v673);
      goto LABEL_237;
    case 0x16u:
      v72 = *((_DWORD *)a1 + 5);
      if ((v72 & 0x40000000) != 0)
        v73 = (_QWORD *)*((_QWORD *)a1 - 1);
      else
        v73 = (_QWORD *)((char *)a1 - 32 * (v72 & 0x7FFFFFF));
      sub_1C4F82B7C(*v73, a3, a4 + 1, a5);
      v164 = *((_DWORD *)a1 + 5);
      if ((v164 & 0x40000000) != 0)
        v165 = (_QWORD ***)*((_QWORD *)a1 - 1);
      else
        v165 = (_QWORD ***)((char *)a1 - 32 * (v164 & 0x7FFFFFF));
      sub_1C4F82B7C(v165[4], &v698, a4 + 1, a5);
      llvm::KnownBits::urem((llvm::KnownBits *)a3, (int8x8_t *)&v698, (unsigned int *)v673);
      goto LABEL_237;
    case 0x17u:
      v74 = *((_DWORD *)a1 + 5);
      if ((v74 & 0x40000000) != 0)
        v75 = (_QWORD *)*((_QWORD *)a1 - 1);
      else
        v75 = (_QWORD *)((char *)a1 - 32 * (v74 & 0x7FFFFFF));
      sub_1C4F82B7C(*v75, a3, a4 + 1, a5);
      v166 = *((_DWORD *)a1 + 5);
      if ((v166 & 0x40000000) != 0)
        v167 = (_QWORD ***)*((_QWORD *)a1 - 1);
      else
        v167 = (_QWORD ***)((char *)a1 - 32 * (v166 & 0x7FFFFFF));
      sub_1C4F82B7C(v167[4], &v698, a4 + 1, a5);
      llvm::KnownBits::srem((llvm::KnownBits *)a3, (int8x8_t *)&v698, (unsigned int *)v673);
      goto LABEL_237;
    case 0x19u:
      LOBYTE(v97) = *(_BYTE *)(a5 + 40);
      if ((_BYTE)v97)
        v97 = (*((unsigned __int8 *)a1 + 17) >> 2) & 1;
      LOBYTE(v684) = v97;
      sub_1C4F9E82C((uint64_t)a1, this, a3, (uint64_t)&v698, a4, a5, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, int8x8_t *))sub_1C4FA1B3C, (uint64_t)&v684);
      v690 = 0;
      v98 = *((_DWORD *)a1 + 5);
      if ((v98 & 0x40000000) != 0)
        v99 = (unsigned __int8 **)*((_QWORD *)a1 - 1);
      else
        v99 = (unsigned __int8 **)((char *)a1 - 32 * (v98 & 0x7FFFFFF));
      v171 = *v99;
      v673[0] = &v690;
      v673[1] = 0;
      if (!sub_1C4D89F84((uint64_t)v673, v171))
        goto LABEL_1187;
      v172 = *(_DWORD *)(v690 + 8);
      if (v172 > 0x40)
      {
        v76 = llvm::APInt::countTrailingZerosSlowCase((unint64_t **)v690);
      }
      else
      {
        v173 = __clz(__rbit64(*(_QWORD *)v690));
        if (v172 >= v173)
          v76 = v173;
        else
          v76 = *(_DWORD *)(v690 + 8);
      }
LABEL_86:
      v77 = a3;
      v78 = 0;
      goto LABEL_552;
    case 0x1Au:
      sub_1C4F9E82C((uint64_t)a1, this, a3, (uint64_t)&v698, a4, a5, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, int8x8_t *))sub_1C4FA1C2C, (uint64_t)&v684);
      v690 = 0;
      v95 = *((_DWORD *)a1 + 5);
      if ((v95 & 0x40000000) != 0)
        v96 = (unsigned __int8 **)*((_QWORD *)a1 - 1);
      else
        v96 = (unsigned __int8 **)((char *)a1 - 32 * (v95 & 0x7FFFFFF));
      v168 = *v96;
      v673[0] = &v690;
      v673[1] = 0;
      if (!sub_1C4D89F84((uint64_t)v673, v168))
        goto LABEL_1187;
      v169 = *(_DWORD *)(v690 + 8);
      if (v169 > 0x40)
        v170 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v690);
      else
        v170 = v169 + __clz(*(_QWORD *)v690) - 64;
      v76 = a3[1].u32[0];
      v78 = v76 - v170;
      goto LABEL_551;
    case 0x1Bu:
      sub_1C4F9E82C((uint64_t)a1, this, a3, (uint64_t)&v698, a4, a5, (void (*)(uint64_t *__return_ptr, uint64_t, uint64_t, int8x8_t *))sub_1C4FA1C38, (uint64_t)v673);
      goto LABEL_1187;
    case 0x1Cu:
      v62 = *((_DWORD *)a1 + 5);
      if ((v62 & 0x40000000) != 0)
        v63 = (_QWORD ***)*((_QWORD *)a1 - 1);
      else
        v63 = (_QWORD ***)((char *)a1 - 32 * (v62 & 0x7FFFFFF));
      sub_1C4F82D44((int)v63[4], this);
      v150 = *((_DWORD *)a1 + 5);
      if ((v150 & 0x40000000) != 0)
        v151 = (_QWORD *)*((_QWORD *)a1 - 1);
      else
        v151 = (_QWORD *)((char *)a1 - 32 * (v150 & 0x7FFFFFF));
      sub_1C4F82D44(*v151, this);
      v152 = a3[1].u32[0];
      if (v152 > 0x40)
      {
        v582 = (_QWORD *)*a3;
        v583 = (uint64_t *)v698;
        v584 = (unint64_t)(v152 + 63) >> 6;
        do
        {
          v585 = *v583++;
          *v582++ |= v585;
          --v584;
        }
        while (v584);
      }
      else
      {
        *(_QWORD *)a3 |= v698;
      }
      v153 = (unint64_t *)&a3[2];
      v154 = a3[3].u32[0];
      if (v154 > 0x40)
      {
        v586 = (_QWORD *)*v153;
        v587 = (uint64_t *)v700;
        v588 = (unint64_t)(v154 + 63) >> 6;
        do
        {
          v589 = *v587++;
          *v586++ &= v589;
          --v588;
        }
        while (v588);
      }
      else
      {
        *v153 &= v700;
      }
      if (v152 >= 0x41)
        v155 = (int8x8_t *)*a3;
      else
        v155 = a3;
      if ((v155->i8[0] & 1) != 0)
        goto LABEL_1187;
      v156 = (int8x8_t *)*v153;
      if (v154 < 0x41)
        v156 = a3 + 2;
      if ((v156->i8[0] & 1) != 0)
        goto LABEL_1187;
      if (!a1)
        goto LABEL_1187;
      v157 = *((unsigned __int8 *)a1 + 16);
      if (v157 < 0x1C || v157 - 59 < 0xFFFFFFEE)
        goto LABEL_1187;
      v158 = *((_QWORD *)a1 - 8);
      v159 = *((_QWORD *)a1 - 4);
      if (v158)
      {
        v160 = *(unsigned __int8 *)(v159 + 16);
        if (v160 == 5)
        {
          if (*(_WORD *)(v159 + 18) == 13)
          {
            v369 = (_QWORD *)(v159 - 32 * (*(_DWORD *)(v159 + 20) & 0x7FFFFFF));
            if (v158 == *v369)
            {
              v161 = v369[4];
              if (v161)
                goto LABEL_881;
            }
          }
        }
        else if (v160 == 41 && v158 == *(_QWORD *)(v159 - 64))
        {
          v161 = *(_QWORD *)(v159 - 32);
          if (v161)
            goto LABEL_881;
        }
      }
      else if (!v159)
      {
        goto LABEL_1187;
      }
      v370 = *(unsigned __int8 *)(v158 + 16);
      if (v370 == 5)
      {
        if (*(_WORD *)(v158 + 18) != 13)
          goto LABEL_1187;
        v371 = (_QWORD *)(v158 - 32 * (*(_DWORD *)(v158 + 20) & 0x7FFFFFF));
        if (v159 != *v371)
          goto LABEL_1187;
        v161 = v371[4];
        if (!v161)
          goto LABEL_1187;
      }
      else
      {
        if (v370 != 41)
          goto LABEL_1187;
        if (v159 != *(_QWORD *)(v158 - 64))
          goto LABEL_1187;
        v161 = *(_QWORD *)(v158 - 32);
        if (!v161)
          goto LABEL_1187;
      }
LABEL_881:
      if (v699 > 0x40)
        bzero((void *)v698, (((unint64_t)v699 + 63) >> 3) & 0x3FFFFFF8);
      else
        v698 = 0;
      if (v701 > 0x40)
        bzero((void *)v700, (((unint64_t)v701 + 63) >> 3) & 0x3FFFFFF8);
      else
        v700 = 0;
      sub_1C4F82D44(v161, this);
      if (v701 > 0x40)
        v448 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v700);
      else
        v448 = __clz(__rbit64(~v700));
      if (v448)
      {
        if (a3[1].i32[0] <= 0x40u)
        {
          v323 = *(_QWORD *)a3 | 1;
          goto LABEL_893;
        }
        **(_QWORD **)a3 |= 1uLL;
      }
      goto LABEL_1187;
    case 0x1Du:
      v55 = *((_DWORD *)a1 + 5);
      if ((v55 & 0x40000000) != 0)
        v56 = (_QWORD ***)*((_QWORD *)a1 - 1);
      else
        v56 = (_QWORD ***)((char *)a1 - 32 * (v55 & 0x7FFFFFF));
      sub_1C4F82D44((int)v56[4], this);
      v142 = *((_DWORD *)a1 + 5);
      if ((v142 & 0x40000000) != 0)
        v143 = (_QWORD *)*((_QWORD *)a1 - 1);
      else
        v143 = (_QWORD *)((char *)a1 - 32 * (v142 & 0x7FFFFFF));
      sub_1C4F82D44(*v143, this);
      v144 = a3[1].u32[0];
      if (v144 > 0x40)
      {
        v629 = (_QWORD *)*a3;
        v630 = (uint64_t *)v698;
        v631 = (unint64_t)(v144 + 63) >> 6;
        do
        {
          v632 = *v630++;
          *v629++ &= v632;
          --v631;
        }
        while (v631);
      }
      else
      {
        *(_QWORD *)a3 &= v698;
      }
      v145 = a3[3].u32[0];
      if (v145 > 0x40)
      {
        v633 = (_QWORD *)a3[2];
        v634 = (uint64_t *)v700;
        v635 = (unint64_t)(v145 + 63) >> 6;
        do
        {
          v636 = *v634++;
          *v633++ |= v636;
          --v635;
        }
        while (v635);
      }
      else
      {
        *(_QWORD *)&a3[2] |= v700;
      }
      goto LABEL_1187;
    case 0x1Eu:
      v42 = *((_DWORD *)a1 + 5);
      if ((v42 & 0x40000000) != 0)
        v43 = (_QWORD ***)*((_QWORD *)a1 - 1);
      else
        v43 = (_QWORD ***)((char *)a1 - 32 * (v42 & 0x7FFFFFF));
      sub_1C4F82D44((int)v43[4], this);
      v112 = *((_DWORD *)a1 + 5);
      if ((v112 & 0x40000000) != 0)
        v113 = (_QWORD *)*((_QWORD *)a1 - 1);
      else
        v113 = (_QWORD *)((char *)a1 - 32 * (v112 & 0x7FFFFFF));
      sub_1C4F82D44(*v113, this);
      llvm::KnownBits::operator^=((const void **)a3, &v698);
      goto LABEL_1187;
    case 0x1Fu:
      v76 = __clz(1 << *((_WORD *)a1 + 9)) ^ 0x3F;
      goto LABEL_86;
    case 0x20u:
      if (!*(_BYTE *)(a5 + 40) || (*((_BYTE *)a1 + 23) & 0x20) == 0)
        goto LABEL_1187;
      v79 = ***(_QWORD ***)a1;
      v673[0] = a1;
      v80 = *(_DWORD *)(v79 + 2496);
      if (v80)
      {
        v81 = *(_QWORD *)(v79 + 2480);
        v82 = v80 - 1;
        v83 = v82 & ((a1 >> 4) ^ (a1 >> 9));
        v84 = (llvm::UndefValue **)(v81 + 40 * v83);
        v85 = *v84;
        if (*v84 == a1)
          goto LABEL_99;
        v86 = 0;
        v87 = 1;
        while (v85 != (llvm::UndefValue *)-4096)
        {
          if (v86)
            v88 = 0;
          else
            v88 = v85 == (llvm::UndefValue *)-8192;
          if (v88)
            v86 = v84;
          v89 = v83 + v87++;
          v83 = v89 & v82;
          v84 = (llvm::UndefValue **)(v81 + 40 * v83);
          v85 = *v84;
          if (*v84 == a1)
          {
LABEL_99:
            v90 = *((unsigned int *)v84 + 4);
            if ((_DWORD)v90)
            {
              v91 = (uint64_t *)((char *)v84[1] + 8);
              v92 = 16 * v90;
              while (*((_DWORD *)v91 - 2) != 4)
              {
                v91 += 2;
                v92 -= 16;
                if (!v92)
                  goto LABEL_1187;
              }
              if (*v91)
                llvm::computeKnownBitsFromRangeMetadata(*v91, (void **)a3, (llvm::KnownBits *)a3);
            }
            goto LABEL_1187;
          }
        }
        if (v86)
          v374 = v86;
        else
          v374 = v84;
      }
      else
      {
        v374 = 0;
      }
      v84 = (llvm::UndefValue **)sub_1C541AB24(v79 + 2480, (uint64_t)v673, (uint64_t *)v673, v374);
      v375 = (llvm::UndefValue *)v673[0];
      v84[3] = 0;
      v84[4] = 0;
      *v84 = v375;
      v84[1] = (llvm::UndefValue *)(v84 + 3);
      v84[2] = (llvm::UndefValue *)0x100000000;
      goto LABEL_99;
    case 0x22u:
      v100 = *((_DWORD *)a1 + 5);
      if ((v100 & 0x40000000) != 0)
        v101 = (_QWORD *)*((_QWORD *)a1 - 1);
      else
        v101 = (_QWORD *)((char *)a1 - 32 * (v100 & 0x7FFFFFF));
      v664 = a4 + 1;
      sub_1C4F82B7C(*v101, a3, a4 + 1, a5);
      v697 = v10;
      if (v10 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v696, 0, 1);
      else
        v696 = 0;
      v174 = *((_BYTE *)a1 + 16) != 62 || a1 == 0;
      v175 = 64;
      if (v174)
        v175 = 24;
      v176 = *(_QWORD *)((char *)a1 + v175);
      v177 = *((_DWORD *)a1 + 5);
      if ((v177 & 0x40000000) != 0)
      {
        v179 = (_QWORD ***)*((_QWORD *)a1 - 1);
        v178 = v177 & 0x7FFFFFF;
      }
      else
      {
        v178 = v177 & 0x7FFFFFF;
        v179 = (_QWORD ***)((char *)a1 - 32 * (v177 & 0x7FFFFFF));
      }
      v694 = (llvm::UndefValue **)(v179 + 4);
      v695 = v176 | 4;
      if (v178 == 1)
        goto LABEL_262;
      v666 = (llvm::APInt *)&a3[2];
      v187 = 1;
      v663 = v178;
      while (1)
      {
        v188 = a3[1].u32[0];
        if (v188 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a3) != v188)
            goto LABEL_276;
        }
        else if (*a3)
        {
          goto LABEL_276;
        }
        v189 = a3[3].u32[0];
        if (v189 > 0x40)
        {
          if (llvm::APInt::countLeadingZerosSlowCase(v666) == v189)
            goto LABEL_262;
        }
        else if (!*(_QWORD *)v666)
        {
          goto LABEL_262;
        }
LABEL_276:
        v190 = *((_DWORD *)a1 + 5);
        if ((v190 & 0x40000000) != 0)
          v191 = (_QWORD ***)*((_QWORD *)a1 - 1);
        else
          v191 = (_QWORD ***)((char *)a1 - 32 * (v190 & 0x7FFFFFF));
        SplatValue = (llvm::APFloatBase *)v191[4 * v187];
        if (*((unsigned __int8 *)SplatValue + 16) >= 0x15u)
          v193 = 0;
        else
          v193 = (llvm::Constant *)v191[4 * v187];
        if (!v193 || (llvm::Constant::isZeroValue(v193) & 1) == 0)
        {
          v194 = v695 & 0xFFFFFFFFFFFFFFF8;
          if ((v695 & 4) != 0 || !v194)
          {
            if ((v695 & 4) == 0 || !v194)
            {
              AggregateElement = *v694;
              if (!*v694 || *((_BYTE *)AggregateElement + 16) != 16)
                AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
              v201 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
              v199 = (unsigned int *)((char *)AggregateElement + 24);
              v200 = v201;
              if (v199[2] < 0x41)
                v200 = v199;
              v194 = *(_QWORD *)(*(_QWORD *)(v194 + 16) + 8 * *v200);
            }
            v202 = *(unsigned __int8 *)(v194 + 8);
            if (v202 > 0x11)
              goto LABEL_301;
            if (((1 << v202) & 0xAC7F) == 0)
            {
              if (((1 << v202) & 0x30000) == 0)
              {
LABEL_301:
                if ((v202 & 0xFE) != 0x12 && v202 != 21)
                {
LABEL_693:
                  v368 = a3[1].u32[0];
                  if (v368 > 0x40)
                    bzero(*(void **)a3, ((unint64_t)(v368 + 63) >> 3) & 0x3FFFFFF8);
                  else
                    *a3 = 0;
                  v376 = a3[3].u32[0];
                  if (v376 > 0x40)
                    bzero(*(void **)v666, ((unint64_t)(v376 + 63) >> 3) & 0x3FFFFFF8);
                  else
                    *(_QWORD *)v666 = 0;
LABEL_262:
                  v180 = a3[1].u32[0];
                  if (v180 <= 0x40)
                  {
                    if (!*(_QWORD *)a3)
                      goto LABEL_264;
LABEL_266:
                    v183 = v697;
                    if (v697 <= 0x40)
                    {
                      if (!v696)
                        goto LABEL_1187;
                      if (v697)
                        v184 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v697;
                      else
                        v184 = 0;
                      v185 = (const void *)(v184 & ~v696);
                      v186 = v697;
LABEL_496:
                      v289 = 1;
                      v290 = (void *)v696;
                      goto LABEL_497;
                    }
                    v282 = 0;
                    v283 = ((unint64_t)v697 + 63) >> 6;
                    v284 = v696;
                    do
                    {
                      v285 = v283-- < 1;
                      if (v285)
                        break;
                      v286 = *(_QWORD *)(v696 + 8 * v283);
                      v282 += __clz(v286);
                    }
                    while (!v286);
                    v287 = v697 | 0xFFFFFFC0;
                    if ((v697 & 0x3F) == 0)
                      v287 = 0;
                    if (v282 + v287 != v697)
                    {
                      LODWORD(v673[1]) = v697;
                      v288 = (((unint64_t)v697 + 63) >> 3) & 0x3FFFFFF8;
                      v673[0] = (void *)operator new[]();
                      memcpy(v673[0], (const void *)v696, v288);
                      llvm::APInt::flipAllBitsSlowCase((uint64_t)v673);
                      v183 = v673[1];
                      v185 = v673[0];
                      v186 = v697;
                      LODWORD(v673[1]) = 0;
                      if (v697 <= 0x40)
                        goto LABEL_496;
                      v590 = (((unint64_t)v697 + 63) >> 3) & 0x3FFFFFF8;
                      v290 = (void *)operator new[]();
                      memcpy(v290, (const void *)v696, v590);
                      if (LODWORD(v673[1]) >= 0x41 && v185)
                        MEMORY[0x1CAA32F9C](v185, 0x1000C8000313F17);
                      v289 = 0;
LABEL_497:
                      v677 = v183;
                      if (v183 > 0x40)
                      {
                        v676 = (void *)operator new[]();
                        memcpy(v676, v185, (((unint64_t)v677 + 63) >> 3) & 0x3FFFFFF8);
                      }
                      else
                      {
                        v676 = (void *)v185;
                      }
                      v679 = v186;
                      if (v289)
                      {
                        v678 = v290;
                      }
                      else
                      {
                        v678 = (void *)operator new[]();
                        memcpy(v678, v290, (((unint64_t)v679 + 63) >> 3) & 0x3FFFFFF8);
                      }
                      llvm::KnownBits::computeForAddSub(1, 0, (uint64_t)a3, (uint64_t)&v676, (uint64_t)v673);
                      if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
                        ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
                      *a3 = (int8x8_t)v673[0];
                      a3[1].i32[0] = (__int32)v673[1];
                      LODWORD(v673[1]) = 0;
                      if (a3[3].i32[0] >= 0x41u && (v614 = a3[2], *(_QWORD *)&v614))
                      {
                        MEMORY[0x1CAA32F9C](*(_QWORD *)&v614, 0x1000C8000313F17);
                        v615 = v673[1];
                        a3[2] = (int8x8_t)__src[0];
                        a3[3].i32[0] = (__int32)__src[1];
                        LODWORD(__src[1]) = 0;
                        if (v615 >= 0x41 && v673[0])
                          MEMORY[0x1CAA32F9C](v673[0], 0x1000C8000313F17);
                      }
                      else
                      {
                        a3[2] = (int8x8_t)__src[0];
                        a3[3].i32[0] = (__int32)__src[1];
                        LODWORD(__src[1]) = 0;
                      }
                      if (v679 >= 0x41 && v678)
                        MEMORY[0x1CAA32F9C](v678, 0x1000C8000313F17);
                      if (v677 >= 0x41 && v676)
                        MEMORY[0x1CAA32F9C](v676, 0x1000C8000313F17);
                      if (v186 >= 0x41 && v290)
                        MEMORY[0x1CAA32F9C](v290, 0x1000C8000313F17);
                      if (v183 >= 0x41 && v185)
                        MEMORY[0x1CAA32F9C](v185, 0x1000C8000313F17);
LABEL_508:
                      if (v697 < 0x41)
                        goto LABEL_1187;
                      v284 = v696;
                    }
                    if (!v284)
                      goto LABEL_1187;
                    goto LABEL_1186;
                  }
                  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a3) != v180)
                    goto LABEL_266;
LABEL_264:
                  v181 = (llvm::APInt *)&a3[2];
                  v182 = a3[3].u32[0];
                  if (v182 > 0x40)
                  {
                    if (llvm::APInt::countLeadingZerosSlowCase(v181) != v182)
                      goto LABEL_266;
                  }
                  else if (*(_QWORD *)v181)
                  {
                    goto LABEL_266;
                  }
                  goto LABEL_508;
                }
              }
              if ((llvm::Type::isSizedDerivedType(v194, 0) & 1) == 0)
                goto LABEL_693;
            }
            v204 = *(llvm::Type **)SplatValue;
            if ((*(_DWORD *)(*(_QWORD *)SplatValue + 8) & 0xFE) == 0x12)
              v204 = (llvm::Type *)**((_QWORD **)v204 + 2);
            PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v204);
            v206 = PrimitiveSizeInBits;
            LODWORD(v673[1]) = PrimitiveSizeInBits;
            if (PrimitiveSizeInBits > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)v673, 0, 0);
              LODWORD(__src[1]) = v206;
              llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
            }
            else
            {
              LODWORD(__src[1]) = PrimitiveSizeInBits;
              v673[0] = 0;
              __src[0] = 0;
            }
            sub_1C4F82B7C(SplatValue, v673, v664, a5);
            v207 = *(_QWORD *)a5;
            sub_1C4768AD0(*(_QWORD *)a5, v194);
            v209 = v208;
            v211 = v210 == 1;
            llvm::DataLayout::getAlignment(v207, v194);
            v213 = v212;
            v691 = v206;
            if (v206 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v690, 0, 0);
              v693 = v206;
              llvm::APInt::initSlowCase((llvm::APInt *)&v692, 0, 0);
            }
            else
            {
              v693 = v206;
              v690 = 0;
              v692 = 0;
            }
            v214 = (1 << v213) + ((unint64_t)(v209 + 7) >> 3) - 1;
            v215 = v214 & -(1 << v213);
            if (v211)
            {
              v216 = __clz(__rbit64(v215));
              if (v214 >> v213)
                v217 = v216;
              else
                v217 = 64;
              sub_1C4912E54(&v690, 0, v217);
              goto LABEL_318;
            }
            if (LODWORD(v673[1]) > 0x40)
            {
              v223 = 0;
              v228 = ((unint64_t)LODWORD(v673[1]) + 63) >> 6;
              v229 = (int8x8_t *)v673[0];
              do
              {
                v230 = *v229++;
                v231 = (uint8x8_t)vcnt_s8(v230);
                v231.i16[0] = vaddlv_u8(v231);
                v223 += v231.i32[0];
                --v228;
              }
              while (v228);
            }
            else
            {
              v222 = (uint8x8_t)vcnt_s8((int8x8_t)v673[0]);
              v222.i16[0] = vaddlv_u8(v222);
              v223 = v222.i32[0];
            }
            if (LODWORD(__src[1]) <= 0x40)
            {
              v224 = (uint8x8_t)vcnt_s8((int8x8_t)__src[0]);
              v224.i16[0] = vaddlv_u8(v224);
              if (v223 + v224.i32[0] == LODWORD(v673[1]))
              {
                v703 = __src[1];
                v702 = __src[0];
                goto LABEL_344;
              }
LABEL_385:
              v703 = v206;
              if (v206 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v702, v215, 0);
                v242 = v703;
                v685 = v703;
                if (v703 <= 0x40)
                {
                  v239 = (uint64_t)v702;
                  v206 = v703;
                  if (v703)
                    goto LABEL_389;
                  goto LABEL_432;
                }
                v245 = (((unint64_t)v703 + 63) >> 3) & 0x3FFFFFF8;
                v684 = (llvm::APInt *)operator new[]();
                v243 = v702;
                __n = v245;
                memcpy(v684, v702, v245);
                llvm::APInt::flipAllBitsSlowCase((uint64_t)&v684);
                v206 = v685;
                v241 = v684;
                v239 = operator new[]();
                memcpy((void *)v239, v243, __n);
              }
              else
              {
                if (v206)
                  v238 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v206;
                else
                  v238 = 0;
                v239 = v238 & v215;
                v702 = (void *)(v238 & v215);
                if (v206)
                {
LABEL_389:
                  v240 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v206;
                  goto LABEL_390;
                }
LABEL_432:
                v240 = 0;
LABEL_390:
                v241 = (llvm::APInt *)(v240 & ~v239);
                v242 = v206;
                v243 = (const void *)v239;
              }
              if (v691 >= 0x41 && v690)
                MEMORY[0x1CAA32F9C](v690, 0x1000C8000313F17);
              v690 = (unint64_t)v241;
              v691 = v206;
              if (v693 >= 0x41 && v692)
                MEMORY[0x1CAA32F9C](v692, 0x1000C8000313F17);
              v692 = (unint64_t *)v239;
              v693 = v242;
              if (v242 >= 0x41 && v243)
                MEMORY[0x1CAA32F9C](v243, 0x1000C8000313F17);
LABEL_318:
              llvm::KnownBits::mul((const void **)v673, (const void **)&v690, 0, (uint64_t *)&v684);
              if (LODWORD(v673[1]) >= 0x41 && v673[0])
                MEMORY[0x1CAA32F9C](v673[0], 0x1000C8000313F17);
              v673[0] = v684;
              LODWORD(v673[1]) = v685;
              v685 = 0;
              if (LODWORD(__src[1]) >= 0x41 && __src[0])
              {
                MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
                __src[0] = v686;
                LODWORD(__src[1]) = v687;
                v687 = 0;
                if (v685 >= 0x41 && v684)
                  MEMORY[0x1CAA32F9C](v684, 0x1000C8000313F17);
              }
              else
              {
                __src[0] = v686;
                LODWORD(__src[1]) = v687;
              }
              v218 = v673[1];
              if (LODWORD(v673[1]) < v10)
              {
                llvm::APInt::sext((llvm::APInt *)v673, v10, (llvm::APInt *)&v684);
                llvm::APInt::sext((llvm::APInt *)__src, v10, (llvm::APInt *)&v702);
              }
              else
              {
                if (LODWORD(v673[1]) <= v10)
                {
                  if (LODWORD(v673[1]) > 0x40)
                  {
                    v246 = (((unint64_t)LODWORD(v673[1]) + 63) >> 3) & 0x3FFFFFF8;
                    v219 = (void *)operator new[]();
                    memcpy(v219, v673[0], v246);
                  }
                  else
                  {
                    v219 = v673[0];
                  }
                  v220 = LODWORD(__src[1]);
                  if (LODWORD(__src[1]) > 0x40)
                  {
                    v247 = (((unint64_t)LODWORD(__src[1]) + 63) >> 3) & 0x3FFFFFF8;
                    v221 = (void *)operator new[]();
                    memcpy(v221, __src[0], v247);
                  }
                  else
                  {
                    v221 = __src[0];
                  }
LABEL_327:
                  if (LODWORD(v673[1]) >= 0x41 && v673[0])
                    MEMORY[0x1CAA32F9C](v673[0], 0x1000C8000313F17);
                  v673[0] = v219;
                  LODWORD(v673[1]) = v218;
                  if (LODWORD(__src[1]) >= 0x41 && __src[0])
                  {
                    MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
                    v218 = v673[1];
                  }
                  __src[0] = v221;
                  LODWORD(__src[1]) = v220;
                  v681 = v218;
                  if (v218 > 0x40)
                  {
                    v680 = (void *)operator new[]();
                    memcpy(v680, v673[0], (((unint64_t)v681 + 63) >> 3) & 0x3FFFFFF8);
                    v220 = LODWORD(__src[1]);
                  }
                  else
                  {
                    v680 = v673[0];
                  }
                  v178 = v663;
                  v683 = v220;
                  if (v220 > 0x40)
                  {
                    v682 = (void *)operator new[]();
                    memcpy(v682, __src[0], (((unint64_t)v683 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    v682 = __src[0];
                  }
                  llvm::KnownBits::computeForAddSub(1, 0, (uint64_t)a3, (uint64_t)&v680, (uint64_t)&v684);
                  if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
                    ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
                  *a3 = (int8x8_t)v684;
                  a3[1].i32[0] = v685;
                  v685 = 0;
                  if (a3[3].i32[0] >= 0x41u && *(_QWORD *)v666)
                  {
                    MEMORY[0x1CAA32F9C](*(_QWORD *)v666, 0x1000C8000313F17);
                    v244 = v685;
                    a3[2] = (int8x8_t)v686;
                    a3[3].i32[0] = v687;
                    v687 = 0;
                    if (v244 >= 0x41 && v684)
                      MEMORY[0x1CAA32F9C](v684, 0x1000C8000313F17);
                  }
                  else
                  {
                    a3[2] = (int8x8_t)v686;
                    a3[3].i32[0] = v687;
                    v687 = 0;
                  }
                  if (v683 >= 0x41 && v682)
                    MEMORY[0x1CAA32F9C](v682, 0x1000C8000313F17);
                  if (v681 >= 0x41 && v680)
                    MEMORY[0x1CAA32F9C](v680, 0x1000C8000313F17);
LABEL_368:
                  if (v693 >= 0x41 && v692)
                    MEMORY[0x1CAA32F9C](v692, 0x1000C8000313F17);
                  if (v691 >= 0x41 && v690)
                    MEMORY[0x1CAA32F9C](v690, 0x1000C8000313F17);
                  if (LODWORD(__src[1]) >= 0x41 && __src[0])
                    MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
                  if (LODWORD(v673[1]) >= 0x41 && v673[0])
                    MEMORY[0x1CAA32F9C](v673[0], 0x1000C8000313F17);
                  goto LABEL_372;
                }
                llvm::APInt::trunc((llvm::APInt *)v673, v10, (llvm::APInt *)&v684);
                llvm::APInt::trunc((llvm::APInt *)__src, v10, (llvm::APInt *)&v702);
              }
              v218 = v685;
              v219 = v684;
              v220 = v703;
              v221 = v702;
              goto LABEL_327;
            }
            v232 = v214 & -(1 << v213);
            v233 = 0;
            v234 = ((unint64_t)LODWORD(__src[1]) + 63) >> 6;
            v235 = (int8x8_t *)__src[0];
            do
            {
              v236 = *v235++;
              v237 = (uint8x8_t)vcnt_s8(v236);
              v237.i16[0] = vaddlv_u8(v237);
              v233 += v237.i32[0];
              --v234;
            }
            while (v234);
            if (v233 + v223 != LODWORD(v673[1]))
              goto LABEL_385;
            v703 = __src[1];
            v702 = (void *)operator new[]();
            memcpy(v702, __src[0], (((unint64_t)v703 + 63) >> 3) & 0x3FFFFFF8);
            v215 = v232;
LABEL_344:
            v689 = v206;
            if (v206 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v688, v215, 0);
            }
            else
            {
              if (v206)
                v225 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v206;
              else
                v225 = 0;
              v688 = v225 & v215;
            }
            v178 = v663;
            llvm::APInt::operator*((uint64_t)&v702, &v688, (uint64_t)&v684);
            if (v703 >= 0x41 && v702)
              MEMORY[0x1CAA32F9C](v702, 0x1000C8000313F17);
            v702 = v684;
            v703 = v685;
            if (v685 < v10)
            {
              llvm::APInt::sext((llvm::APInt *)&v702, v10, (llvm::APInt *)&v684);
            }
            else if (v685 > v10)
            {
              llvm::APInt::trunc((llvm::APInt *)&v702, v10, (llvm::APInt *)&v684);
            }
            else if (v685 > 0x40)
            {
              v684 = (llvm::APInt *)operator new[]();
              memcpy(v684, v702, (((unint64_t)v685 + 63) >> 3) & 0x3FFFFFF8);
            }
            v226 = v697;
            if (v697 >= 0x41)
            {
              v248 = 0;
              v249 = (unint64_t *)v696;
              v250 = v684;
              v251 = ((unint64_t)v697 + 63) >> 6;
              v252 = v251;
              do
              {
                v253 = *(_QWORD *)v250;
                v250 = (llvm::APInt *)((char *)v250 + 8);
                v254 = v253 + *v249;
                v255 = v254 + 1 <= *v249;
                if (v248)
                {
                  ++v254;
                  v248 = v255;
                }
                else
                {
                  v248 = v254 < *v249;
                }
                *v249++ = v254;
                --v252;
              }
              while (v252);
              *(_QWORD *)(v696 + 8 * (v251 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v226;
              v178 = v663;
            }
            else
            {
              if (v697)
                v227 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v697;
              else
                v227 = 0;
              v696 = v227 & ((unint64_t)v684 + v696);
            }
            if (v685 >= 0x41 && v684)
              MEMORY[0x1CAA32F9C](v684, 0x1000C8000313F17);
            if (v689 >= 0x41 && v688)
              MEMORY[0x1CAA32F9C](v688, 0x1000C8000313F17);
            if (v703 >= 0x41 && v702)
              MEMORY[0x1CAA32F9C](v702, 0x1000C8000313F17);
            goto LABEL_368;
          }
          if ((*(_DWORD *)(*(_QWORD *)v193 + 8) & 0xFE) == 0x12)
            SplatValue = llvm::Constant::getSplatValue(v193, 0);
          v195 = (unsigned int *)((char *)SplatValue + 24);
          if (*((_DWORD *)SplatValue + 8) >= 0x41u)
            v195 = *(unsigned int **)v195;
          v196 = *v195;
          StructLayout = llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)a5, (llvm::StructType *)v194);
          llvm::APInt::operator+=((uint64_t)&v696, *((_QWORD *)StructLayout + v196 + 2));
        }
LABEL_372:
        ++v187;
        sub_1C4774E38((uint64_t)&v694);
        if (v178 == (_DWORD)v187)
          goto LABEL_262;
      }
    case 0x26u:
    case 0x27u:
    case 0x2Fu:
    case 0x30u:
      v13 = *((_DWORD *)a1 + 5);
      if ((v13 & 0x40000000) != 0)
        v14 = (uint64_t **)*((_QWORD *)a1 - 1);
      else
        v14 = (uint64_t **)((char *)a1 - 32 * (v13 & 0x7FFFFFF));
      v29 = **v14;
      if ((*(_DWORD *)(v29 + 8) & 0xFE) == 0x12)
      {
        v29 = **(_QWORD **)(v29 + 16);
        v30 = *(unsigned __int8 *)(v29 + 8);
      }
      else
      {
        v30 = *(_DWORD *)(v29 + 8);
      }
      v31 = *(_QWORD *)a5;
      if (v30 == 15)
      {
        PointerTypeSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits(v31, v29);
      }
      else
      {
        sub_1C4768AD0(v31, v29);
        PointerTypeSizeInBits = v34;
        if ((_DWORD)v33 == 1)
      }
      sub_1C4F9E728((llvm::APInt *)a3, PointerTypeSizeInBits, v673);
      if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
        ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
      *a3 = (int8x8_t)v673[0];
      a3[1].i32[0] = (__int32)v673[1];
      LODWORD(v673[1]) = 0;
      v35 = (const void **)&a3[2];
      if (a3[3].i32[0] >= 0x41u && *v35)
      {
        MEMORY[0x1CAA32F9C](*v35, 0x1000C8000313F17);
        v579 = v673[1];
        a3[2] = (int8x8_t)__src[0];
        a3[3].i32[0] = (__int32)__src[1];
        LODWORD(__src[1]) = 0;
        if (v579 >= 0x41 && v673[0])
          MEMORY[0x1CAA32F9C](v673[0], 0x1000C8000313F17);
      }
      else
      {
        a3[2] = (int8x8_t)__src[0];
        a3[3].i32[0] = (__int32)__src[1];
      }
      v36 = *((_DWORD *)a1 + 5);
      if ((v36 & 0x40000000) != 0)
        v37 = (_QWORD *)*((_QWORD *)a1 - 1);
      else
        v37 = (_QWORD *)((char *)a1 - 32 * (v36 & 0x7FFFFFF));
      sub_1C4F82B7C(*v37, a3, a4 + 1, a5);
      v38 = a3[1].u32[0];
      if (v38 < v10)
      {
        llvm::APInt::zext((llvm::APInt *)a3, v10, (uint64_t)v673);
        sub_1C4912E54(v673, v38, v673[1]);
        v111 = (int)v673[1];
        if (LODWORD(v673[1]) > 0x40)
        {
          v581 = (((unint64_t)LODWORD(v673[1]) + 63) >> 3) & 0x3FFFFFF8;
          v39 = (void *)operator new[]();
          memcpy(v39, v673[0], v581);
        }
        else
        {
          v39 = v673[0];
        }
        llvm::APInt::zext((llvm::APInt *)&a3[2], v10, (uint64_t)&v690);
        LODWORD(v40) = v691;
        v41 = (void *)v690;
        v691 = 0;
        if (LODWORD(v673[1]) >= 0x41 && v673[0])
          MEMORY[0x1CAA32F9C](v673[0], 0x1000C8000313F17);
        LODWORD(v38) = v111;
      }
      else if (v38 > v10)
      {
        llvm::APInt::trunc((llvm::APInt *)a3, v10, (llvm::APInt *)v673);
        llvm::APInt::trunc((llvm::APInt *)&a3[2], v10, (llvm::APInt *)&v690);
        LODWORD(v38) = v673[1];
        v39 = v673[0];
        LODWORD(v40) = v691;
        v41 = (void *)v690;
      }
      else
      {
        if (v38 > 0x40)
        {
          v39 = (void *)operator new[]();
          memcpy(v39, *(const void **)a3, ((unint64_t)(v38 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v39 = (void *)*a3;
        }
        v40 = a3[3].u32[0];
        if (v40 > 0x40)
        {
          v41 = (void *)operator new[]();
          memcpy(v41, *v35, ((unint64_t)(v40 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v41 = (void *)*v35;
        }
      }
      if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
        ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
      *a3 = (int8x8_t)v39;
      a3[1].i32[0] = v38;
      if (a3[3].i32[0] >= 0x41u && *v35)
        MEMORY[0x1CAA32F9C](*v35, 0x1000C8000313F17);
      a3[2] = (int8x8_t)v41;
      a3[3].i32[0] = v40;
      goto LABEL_1187;
    case 0x28u:
      v44 = *((_DWORD *)a1 + 5);
      if ((v44 & 0x40000000) != 0)
        v45 = (uint64_t **)*((_QWORD *)a1 - 1);
      else
        v45 = (uint64_t **)((char *)a1 - 32 * (v44 & 0x7FFFFFF));
      v114 = **v45;
      if ((*(_DWORD *)(v114 + 8) & 0xFE) == 0x12)
        v114 = **(_QWORD **)(v114 + 16);
      v115 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v114);
      llvm::APInt::trunc((llvm::APInt *)a3, v115, (llvm::APInt *)v673);
      v116 = a3 + 2;
      llvm::APInt::trunc((llvm::APInt *)&a3[2], v115, (llvm::APInt *)&v690);
      v117 = (__int32)v673[1];
      v118 = v673[0];
      v119 = v691;
      v120 = v690;
      if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
        ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
      *a3 = (int8x8_t)v118;
      a3[1].i32[0] = v117;
      if (a3[3].i32[0] >= 0x41u && *(_QWORD *)v116)
        ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*v116, 0x1000C8000313F17);
      a3[2] = (int8x8_t)v120;
      a3[3].i32[0] = v119;
      v121 = *((_DWORD *)a1 + 5);
      if ((v121 & 0x40000000) != 0)
        v122 = (_QWORD *)*((_QWORD *)a1 - 1);
      else
        v122 = (_QWORD *)((char *)a1 - 32 * (v121 & 0x7FFFFFF));
      sub_1C4F82B7C(*v122, a3, a4 + 1, a5);
      llvm::APInt::sext((llvm::APInt *)a3, v10, (llvm::APInt *)v673);
      llvm::APInt::sext((llvm::APInt *)&a3[2], v10, (llvm::APInt *)&v690);
      v123 = (__int32)v673[1];
      v124 = v673[0];
      v125 = v691;
      v126 = v690;
      if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
        ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
      *a3 = (int8x8_t)v124;
      a3[1].i32[0] = v123;
      if (a3[3].i32[0] >= 0x41u && *(_QWORD *)v116)
        ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*v116, 0x1000C8000313F17);
      a3[2] = (int8x8_t)v126;
      a3[3].i32[0] = v125;
      goto LABEL_1187;
    case 0x31u:
      v57 = *((_DWORD *)a1 + 5);
      if ((v57 & 0x40000000) != 0)
        v58 = (uint64_t **)*((_QWORD *)a1 - 1);
      else
        v58 = (uint64_t **)((char *)a1 - 32 * (v57 & 0x7FFFFFF));
      v146 = **v58;
      if ((*(_DWORD *)(v146 + 8) & 0xFD) == 0xD && (*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) != 0x12)
      {
        if ((v57 & 0x40000000) != 0)
          v308 = (uint64_t *)*((_QWORD *)a1 - 1);
        else
          v308 = (uint64_t *)((char *)a1 - 32 * (v57 & 0x7FFFFFF));
        v309 = *v308;
        v311 = a4 + 1;
        v310 = a3;
LABEL_588:
        sub_1C4F82B7C(v309, v310, v311, a5);
      }
      else if (*(_DWORD *)(v146 + 8) == 18 && *(_BYTE *)(*(_QWORD *)(v146 + 24) + 8) == 13)
      {
        v147 = (*(_DWORD *)(*(_QWORD *)a1 + 8) & 0xFE) == 0x12
             ? *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)a1 + 16) + 8)
             : *(_DWORD *)(*(_QWORD *)a1 + 8);
        if (v147 == 13)
        {
          v341 = llvm::Type::getPrimitiveSizeInBits(**(llvm::Type ***)(v146 + 16));
          v342 = v10 / v341;
          v667 = v341;
          if (!(v10 % v341))
          {
            v343 = *((_DWORD *)this + 2);
            v691 = v342 * v343;
            if (v342 * v343 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v690, 0, 0);
            else
              v690 = 0;
            if (v343)
            {
              v344 = 0;
              v345 = *((_DWORD *)this + 2);
              v346 = v691;
              do
              {
                v347 = (llvm::APInt *)(*(_QWORD *)this + 8 * (v344 >> 6));
                if (v345 < 0x41)
                  v347 = this;
                if (((*(_QWORD *)v347 >> v344) & 1) != 0)
                {
                  v348 = 1 << (v344 * v342);
                  if (v346 > 0x40)
                    *(_QWORD *)(v690 + 8 * ((v344 * v342) >> 6)) |= v348;
                  else
                    v690 |= v348;
                }
                ++v344;
              }
              while (v343 != v344);
            }
            LODWORD(v673[1]) = v667;
            if (v667 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)v673, 0, 0);
              LODWORD(__src[1]) = v667;
              llvm::APInt::initSlowCase((llvm::APInt *)__src, 0, 0);
            }
            else
            {
              LODWORD(__src[1]) = v667;
              v673[0] = 0;
              __src[0] = 0;
            }
            if (v10 >= v667)
            {
              v349 = 0;
              v350 = v691;
              v351 = (void *)v690;
              do
              {
                v352 = *((_DWORD *)a1 + 5);
                if ((v352 & 0x40000000) != 0)
                  v353 = (uint64_t *)*((_QWORD *)a1 - 1);
                else
                  v353 = (uint64_t *)((char *)a1 - 32 * (v352 & 0x7FFFFFF));
                v354 = *v353;
                v685 = v350;
                if (v350 > 0x40)
                {
                  v684 = (llvm::APInt *)operator new[]();
                  memcpy(v684, v351, (((unint64_t)v685 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v684 = (llvm::APInt *)v351;
                }
                sub_1C4888094((uint64_t)&v684, v349);
                sub_1C4F82D44(v354, (llvm::APInt *)&v684);
                if (v685 >= 0x41 && v684)
                  MEMORY[0x1CAA32F9C](v684, 0x1000C8000313F17);
                if (**(_BYTE **)a5)
                  v355 = v342 + ~v349;
                else
                  v355 = v349;
                v356 = v355 * v667;
                llvm::APInt::insertBits((void **)a3, (const llvm::APInt *)v673, v355 * v667);
                llvm::APInt::insertBits((void **)&a3[2], (const llvm::APInt *)__src, v356);
                ++v349;
              }
              while (v342 != v349);
            }
            if (LODWORD(__src[1]) >= 0x41 && __src[0])
              MEMORY[0x1CAA32F9C](__src[0], 0x1000C8000313F17);
            if (LODWORD(v673[1]) >= 0x41 && v673[0])
              MEMORY[0x1CAA32F9C](v673[0], 0x1000C8000313F17);
            if (v691 >= 0x41 && v690)
              goto LABEL_1186;
          }
        }
      }
      goto LABEL_1187;
    case 0x37u:
      v684 = 0;
      v702 = 0;
      v696 = 0;
      if (!llvm::matchSimpleRecurrence((uint64_t)a1, &v684, &v702, &v696))
        goto LABEL_822;
      v49 = v684;
      v50 = *((unsigned __int8 *)v684 + 16);
      if (v50 - 53 > 2 || *((llvm::UndefValue **)v684 - 8) != a1)
        goto LABEL_737;
      v51 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)v673 = *(_OWORD *)a5;
      *(_OWORD *)__src = v51;
      v675 = *(_OWORD *)(a5 + 32);
      __src[0] = a1;
      sub_1C4F82D44((int)v702, this);
      switch(v50)
      {
        case '7':
          if (v699 > 0x40)
          {
            v373 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v698);
          }
          else if (v699)
          {
            v373 = __clz(~(v698 << -(char)v699));
          }
          else
          {
            v373 = 0;
          }
          sub_1C4912E54(a3, a3[1].i32[0] - v373, a3[1].u32[0]);
          if (v701 > 0x40)
          {
            v379 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v700);
          }
          else if (v701)
          {
            v379 = __clz(~(v700 << -(char)v701));
          }
          else
          {
            v379 = 0;
          }
          v52 = a3[3].u32[0];
          v377 = v52 - v379;
          v378 = a3 + 2;
          break;
        case '6':
          if (v699 > 0x40)
          {
            v372 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&v698);
          }
          else if (v699)
          {
            v372 = __clz(~(v698 << -(char)v699));
          }
          else
          {
            v372 = 0;
          }
          v52 = a3[1].u32[0];
          v377 = v52 - v372;
          v378 = a3;
          break;
        case '5':
          if (v699 > 0x40)
            v52 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v698);
          else
            v52 = __clz(__rbit64(~v698));
          v378 = a3;
          v377 = 0;
          break;
        default:
          goto LABEL_737;
      }
      sub_1C4912E54(v378, v377, v52);
LABEL_737:
      if (v50 > 0x39 || ((1 << v50) & 0x3002A0000000000) == 0)
        goto LABEL_822;
      v380 = *(_OWORD *)(a5 + 16);
      *(_OWORD *)v673 = *(_OWORD *)a5;
      *(_OWORD *)__src = v380;
      v675 = *(_OWORD *)(a5 + 32);
      v381 = *((_DWORD *)a1 + 5);
      if ((v381 & 0x40000000) != 0)
        v382 = (_QWORD *)*((_QWORD *)a1 - 1);
      else
        v382 = (_QWORD *)((char *)a1 - 32 * (v381 & 0x7FFFFFF));
      v383 = *v382 != (_QWORD)v702;
      v384 = *((unsigned int *)a1 + 15);
      v385 = v382[4 * v384 + (*v382 != (_QWORD)v702)];
      v386 = *(_QWORD *)(v385 + 40);
      if (v386 == v385 + 40)
      {
        v387 = 0;
      }
      else
      {
        if (v386)
          v387 = (unsigned __int8 *)(v386 - 24);
        else
          v387 = 0;
        if (v387[16] - 29 >= 0xB)
          v387 = 0;
      }
      v388 = !v383;
      if ((v381 & 0x40000000) != 0)
        v389 = (_QWORD ***)*((_QWORD *)a1 - 1);
      else
        v389 = (_QWORD ***)((char *)a1 - 32 * (v381 & 0x7FFFFFF));
      v390 = (&v389[4 * v384])[v388];
      v391 = (_QWORD **)v390[5];
      if (v391 == v390 + 5)
      {
        v393 = 0;
      }
      else
      {
        if (v391)
          v392 = (unsigned __int8 *)(v391 - 3);
        else
          v392 = 0;
        if (v392[16] - 29 >= 0xB)
          v393 = 0;
        else
          v393 = v392;
      }
      __src[0] = v387;
      sub_1C4F82B7C(v702, &v698, a4 + 1, v673);
      v691 = v10;
      if (v10 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v690, 0, 0);
        v693 = v10;
        llvm::APInt::initSlowCase((llvm::APInt *)&v692, 0, 0);
      }
      else
      {
        v693 = v10;
        v690 = 0;
        v692 = 0;
      }
      __src[0] = v393;
      sub_1C4F82B7C(v696, &v690, a4 + 1, v673);
      if (v699 > 0x40)
        v394 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v698);
      else
        v394 = __clz(__rbit64(~v698));
      if (v691 > 0x40)
        v395 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v690);
      else
        v395 = __clz(__rbit64(~v690));
      if (v395 >= v394)
        v396 = v394;
      else
        v396 = v395;
      sub_1C4912E54(a3, 0, v396);
      HIDWORD(v398) = *((unsigned __int8 *)v49 + 16) - 41;
      LODWORD(v398) = HIDWORD(v398);
      v397 = v398 >> 1;
      if (v397 > 6 || ((1 << v397) & 0x47) == 0 || !*(_BYTE *)(a5 + 40) || (*((_BYTE *)v49 + 17) & 4) == 0)
        goto LABEL_819;
      switch(v50)
      {
        case '-':
          v413 = v699 - 1;
          v414 = (int8x8_t *)&v698;
          if (v699 >= 0x41)
            v414 = (int8x8_t *)(v698 + 8 * (v413 >> 6));
          if (((*(unint64_t *)v414 >> v413) & 1) == 0)
            goto LABEL_819;
          v415 = &v690;
          if (v691 >= 0x41)
            v415 = (unint64_t *)(v690 + 8 * ((v691 - 1) >> 6));
          if (((*v415 >> (v691 - 1)) & 1) == 0)
            goto LABEL_819;
          break;
        case '+':
          if (*((llvm::UndefValue **)v49 - 8) != a1)
            goto LABEL_819;
          v406 = (int8x8_t *)&v698;
          if (v699 >= 0x41)
            v406 = (int8x8_t *)(v698 + 8 * ((v699 - 1) >> 6));
          if (((*(unint64_t *)v406 >> (v699 - 1)) & 1) == 0)
            goto LABEL_797;
          v407 = &v692;
          if (v693 >= 0x41)
            v407 = (unint64_t **)&v692[(v693 - 1) >> 6];
          if ((((unint64_t)*v407 >> (v693 - 1)) & 1) == 0)
          {
LABEL_797:
            if (v701 >= 0x41)
              v408 = (unint64_t *)(v700 + 8 * ((v701 - 1) >> 6));
            else
              v408 = &v700;
            if (((*v408 >> (v701 - 1)) & 1) == 0)
              goto LABEL_819;
            v402 = v691 - 1;
            v403 = (unint64_t **)(v690 + 8 * ((v691 - 1) >> 6));
            v404 = v691 >= 0x41;
            v405 = (unint64_t **)&v690;
            goto LABEL_802;
          }
          break;
        case ')':
          v399 = (int8x8_t *)&v698;
          if (v699 >= 0x41)
            v399 = (int8x8_t *)(v698 + 8 * ((v699 - 1) >> 6));
          if (((*(unint64_t *)v399 >> (v699 - 1)) & 1) == 0)
            goto LABEL_785;
          v400 = &v690;
          if (v691 >= 0x41)
            v400 = (unint64_t *)(v690 + 8 * ((v691 - 1) >> 6));
          if (((*v400 >> (v691 - 1)) & 1) == 0)
          {
LABEL_785:
            if (v701 >= 0x41)
              v401 = (unint64_t *)(v700 + 8 * ((v701 - 1) >> 6));
            else
              v401 = &v700;
            if (((*v401 >> (v701 - 1)) & 1) == 0)
              goto LABEL_819;
            v402 = v693 - 1;
            v403 = (unint64_t **)&v692[(v693 - 1) >> 6];
            v404 = v693 >= 0x41;
            v405 = &v692;
LABEL_802:
            if (v404)
              v405 = v403;
            if ((((unint64_t)*v405 >> v402) & 1) != 0)
            {
              v409 = a3 + 2;
              v410 = a3[3].u32[0];
              v411 = v410 - 1;
              if (v410 >= 0x41)
              {
                v412 = *v409;
LABEL_817:
                v409 = (int8x8_t *)(*(_QWORD *)&v412 + 8 * (v411 >> 6));
                goto LABEL_818;
              }
              goto LABEL_818;
            }
LABEL_819:
            if (v693 >= 0x41 && v692)
              MEMORY[0x1CAA32F9C](v692, 0x1000C8000313F17);
            if (v691 >= 0x41 && v690)
              MEMORY[0x1CAA32F9C](v690, 0x1000C8000313F17);
            if (((1 << v50) & 0x3002A0000000000) != 0)
              goto LABEL_1187;
LABEL_822:
            if (a4 > 4)
              goto LABEL_1187;
            v417 = *((_DWORD *)a1 + 5);
            v418 = v417 & 0x7FFFFFF;
            if ((v417 & 0x7FFFFFF) == 0)
              goto LABEL_1187;
            v419 = a3[1].u32[0];
            if (v419 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a3) != v419)
                goto LABEL_1187;
            }
            else if (*a3)
            {
              goto LABEL_1187;
            }
            v420 = (llvm::APInt *)&a3[2];
            v421 = a3[3].u32[0];
            if (v421 > 0x40)
            {
              if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&a3[2]) != v421)
                goto LABEL_1187;
            }
            else if (*(_QWORD *)v420)
            {
              goto LABEL_1187;
            }
            if ((v417 & 0x40000000) != 0)
              v422 = (llvm::UndefValue **)*((_QWORD *)a1 - 1);
            else
              v422 = (llvm::UndefValue **)((char *)a1 - 32 * v418);
            v423 = *v422;
            v424 = v418 - 1;
            if ((_DWORD)v418 != 1)
            {
              v425 = 4;
              do
              {
                if ((v417 & 0x40000000) != 0)
                  v426 = *(llvm::UndefValue **)(*((_QWORD *)a1 - 1) + v425 * 8);
                else
                  v426 = *(llvm::UndefValue **)((char *)a1 + v425 * 8 + -32 * v418);
                if (v426 != v423 && v426 != a1)
                {
                  if (v423 != a1)
                    goto LABEL_1086;
                  v427 = (_QWORD ***)((char *)a1 - 32 * v418);
                  if ((v417 & 0x40000000) != 0)
                    v427 = (_QWORD ***)*((_QWORD *)a1 - 1);
                  v423 = (llvm::UndefValue *)v427[v425];
                }
                v425 += 4;
                --v424;
              }
              while (v424);
            }
            if (v423 == a1)
            {
              v423 = llvm::UndefValue::get(*(llvm::UndefValue **)a1, v48);
              if (!v423)
                goto LABEL_1086;
            }
            else if (!v423)
            {
              goto LABEL_1086;
            }
            if (*((unsigned __int8 *)v423 + 16) - 11 < 2)
              goto LABEL_1187;
LABEL_1086:
            v550 = a3[1].u32[0];
            if (v550 > 0x40)
            {
              memset(*(void **)a3, 255, ((unint64_t)(v550 + 63) >> 3) & 0x3FFFFFF8);
              LODWORD(v550) = a3[1].i32[0];
              if ((_DWORD)v550)
              {
LABEL_1088:
                v551 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v550;
                if (v550 >= 0x41)
                {
                  v552 = (int8x8_t *)(*(_QWORD *)a3
                                    + 8 * ((((unint64_t)v550 + 63) >> 6) - 1));
LABEL_1090:
                  *(_QWORD *)v552 &= v551;
                  v553 = a3[3].u32[0];
                  if (v553 > 0x40)
                  {
                    memset(*(void **)&a3[2], 255, ((unint64_t)(v553 + 63) >> 3) & 0x3FFFFFF8);
                    LODWORD(v553) = a3[3].i32[0];
                    if ((_DWORD)v553)
                    {
LABEL_1092:
                      v554 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v553;
                      if (v553 >= 0x41)
                      {
                        v555 = (int8x8_t *)(*(_QWORD *)v420
                                          + 8 * ((((unint64_t)v553 + 63) >> 6) - 1));
                        goto LABEL_1094;
                      }
LABEL_1093:
                      v555 = a3 + 2;
LABEL_1094:
                      *(_QWORD *)v555 &= v554;
                      v668 = (llvm::APInt *)(*((_DWORD *)a1 + 5) & 0x7FFFFFF);
                      if (!(_DWORD)v668)
                        goto LABEL_1187;
                      v556 = 0;
                      while (1)
                      {
                        v557 = *((_DWORD *)a1 + 5);
                        if ((v557 & 0x40000000) != 0)
                          v558 = (_QWORD ***)*((_QWORD *)a1 - 1);
                        else
                          v558 = (_QWORD ***)((char *)a1 - 32 * (v557 & 0x7FFFFFF));
                        v559 = (llvm::UndefValue *)v558[4 * v556];
                        if (v559 == a1)
                          goto LABEL_1123;
                        v560 = *(_OWORD *)(a5 + 16);
                        *(_OWORD *)v673 = *(_OWORD *)a5;
                        *(_OWORD *)__src = v560;
                        v675 = *(_OWORD *)(a5 + 32);
                        v561 = (&v558[4 * *((unsigned int *)a1 + 15)])[v556];
                        v562 = (_QWORD **)v561[5];
                        if (v562 == v561 + 5)
                        {
                          v563 = 0;
                        }
                        else
                        {
                          if (v562)
                            v563 = (unsigned __int8 *)(v562 - 3);
                          else
                            v563 = 0;
                          if (v563[16] - 29 >= 0xB)
                            v563 = 0;
                        }
                        __src[0] = v563;
                        v691 = v10;
                        if (v10 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)&v690, 0, 0);
                          v693 = v10;
                          llvm::APInt::initSlowCase((llvm::APInt *)&v692, 0, 0);
                        }
                        else
                        {
                          v693 = v10;
                          v690 = 0;
                          v692 = 0;
                        }
                        if (v699 >= 0x41 && v698)
                          MEMORY[0x1CAA32F9C](v698, 0x1000C8000313F17);
                        v698 = v690;
                        v699 = v691;
                        v691 = 0;
                        if (v701 >= 0x41 && v700)
                          MEMORY[0x1CAA32F9C](v700, 0x1000C8000313F17);
                        v700 = (unint64_t)v692;
                        v701 = v693;
                        sub_1C4F82B7C(v559, &v698, 5, v673);
                        v564 = a3[1].u32[0];
                        if (v564 > 0x40)
                        {
                          v565 = (void *)operator new[]();
                          memcpy(v565, *(const void **)a3, ((unint64_t)(v564 + 63) >> 3) & 0x3FFFFFF8);
                          v569 = (uint64_t *)v698;
                          v570 = (unint64_t)(v564 + 63) >> 6;
                          v571 = v565;
                          do
                          {
                            v572 = *v569++;
                            *v571++ &= v572;
                            --v570;
                          }
                          while (v570);
                        }
                        else
                        {
                          v565 = (void *)(v698 & *(_QWORD *)a3);
                        }
                        v566 = a3[3].u32[0];
                        if (v566 > 0x40)
                        {
                          v573 = (void *)operator new[]();
                          v574 = (const void **)v420;
                          v568 = (unint64_t)v573;
                          v567 = (llvm::APInt *)v574;
                          memcpy(v573, *v574, ((unint64_t)(v566 + 63) >> 3) & 0x3FFFFFF8);
                          v575 = (uint64_t *)v700;
                          v576 = (unint64_t)(v566 + 63) >> 6;
                          v577 = (_QWORD *)v568;
                          do
                          {
                            v578 = *v575++;
                            *v577++ &= v578;
                            --v576;
                          }
                          while (v576);
                        }
                        else
                        {
                          v567 = v420;
                          v568 = v700 & *(_QWORD *)v420;
                        }
                        if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
                          ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
                        *a3 = (int8x8_t)v565;
                        a3[1].i32[0] = v564;
                        if (a3[3].i32[0] >= 0x41u && *(_QWORD *)v567)
                        {
                          MEMORY[0x1CAA32F9C](*(_QWORD *)v567, 0x1000C8000313F17);
                          LODWORD(v564) = a3[1].i32[0];
                        }
                        a3[2] = (int8x8_t)v568;
                        a3[3].i32[0] = v566;
                        if (v564 > 0x40)
                        {
                          if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a3) == (_DWORD)v564)
                          {
LABEL_1120:
                            if (v566 > 0x40)
                            {
                              if (llvm::APInt::countLeadingZerosSlowCase(v567) == (_DWORD)v566)
                                goto LABEL_1187;
                            }
                            else if (!v568)
                            {
                              goto LABEL_1187;
                            }
                          }
                        }
                        else if (!*(_QWORD *)a3)
                        {
                          goto LABEL_1120;
                        }
                        v420 = v567;
LABEL_1123:
                        if ((llvm::APInt *)++v556 == v668)
                          goto LABEL_1187;
                      }
                    }
                  }
                  else
                  {
                    *(_QWORD *)v420 = -1;
                    if ((_DWORD)v553)
                      goto LABEL_1092;
                  }
                  v554 = 0;
                  goto LABEL_1093;
                }
LABEL_1089:
                v552 = a3;
                goto LABEL_1090;
              }
            }
            else
            {
              *a3 = (int8x8_t)-1;
              if ((_DWORD)v550)
                goto LABEL_1088;
            }
            v551 = 0;
            goto LABEL_1089;
          }
          break;
        default:
          goto LABEL_819;
      }
      v416 = a3[1].u32[0];
      v411 = v416 - 1;
      if (v416 >= 0x41)
      {
        v412 = *a3;
        goto LABEL_817;
      }
      v409 = a3;
LABEL_818:
      *(_QWORD *)v409 |= 1 << v411;
      goto LABEL_819;
    case 0x39u:
      v673[0] = 0;
      v690 = 0;
      matched = llvm::matchSelectPattern((uint64_t)a1, (uint64_t)v673, &v690, 0, 0);
      v67 = matched;
      v68 = v673[0];
      v69 = v690;
      if (matched > 8 || ((1 << matched) & 0x181) == 0)
      {
        sub_1C4F82B7C(v690, a3, a4 + 1, a5);
        sub_1C4F82B7C(v68, &v698, a4 + 1, a5);
        __asm { BR              X10 }
      }
      v70 = *((_DWORD *)a1 + 5);
      if ((v70 & 0x40000000) != 0)
        v71 = (_QWORD ***)*((_QWORD *)a1 - 1);
      else
        v71 = (_QWORD ***)((char *)a1 - 32 * (v70 & 0x7FFFFFF));
      v293 = a4 + 1;
      sub_1C4F82B7C(v71[8], a3, v293, a5);
      v294 = *((_DWORD *)a1 + 5);
      if ((v294 & 0x40000000) != 0)
        v295 = (_QWORD ***)*((_QWORD *)a1 - 1);
      else
        v295 = (_QWORD ***)((char *)a1 - 32 * (v294 & 0x7FFFFFF));
      sub_1C4F82B7C(v295[4], &v698, v293, a5);
      v296 = a3[1].u32[0];
      if (v296 > 0x40)
      {
        v297 = (void *)operator new[]();
        memcpy(v297, *(const void **)a3, ((unint64_t)(v296 + 63) >> 3) & 0x3FFFFFF8);
        v637 = (uint64_t *)v698;
        v638 = (unint64_t)(v296 + 63) >> 6;
        v639 = v297;
        do
        {
          v640 = *v637++;
          *v639++ &= v640;
          --v638;
        }
        while (v638);
      }
      else
      {
        v297 = (void *)(v698 & *(_QWORD *)a3);
      }
      v298 = a3[3].u32[0];
      if (v298 > 0x40)
      {
        v299 = (void *)operator new[]();
        memcpy(v299, *(const void **)&a3[2], ((unint64_t)(v298 + 63) >> 3) & 0x3FFFFFF8);
        v641 = (uint64_t *)v700;
        v642 = (unint64_t)(v298 + 63) >> 6;
        v643 = v299;
        do
        {
          v644 = *v641++;
          *v643++ &= v644;
          --v642;
        }
        while (v642);
      }
      else
      {
        v299 = (void *)(v700 & *(_QWORD *)&a3[2]);
      }
      if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
        ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
      *a3 = (int8x8_t)v297;
      a3[1].i32[0] = v296;
      if (a3[3].i32[0] >= 0x41u)
      {
        v591 = a3[2];
        if (v591)
          MEMORY[0x1CAA32F9C](*(_QWORD *)&v591, 0x1000C8000313F17);
      }
      a3[2] = (int8x8_t)v299;
      a3[3].i32[0] = v298;
      if (v67 != 7)
        goto LABEL_1187;
      v673[1] = v68;
      v300 = *(unsigned __int8 *)(v69 + 16);
      if (v300 == 5)
      {
        if (*(_WORD *)(v69 + 18) != 15
          || !sub_1C4E71060((uint64_t)v673, *(llvm::Constant **)(v69 - 32 * (*(_DWORD *)(v69 + 20) & 0x7FFFFFF))))
        {
          goto LABEL_1187;
        }
        v301 = *(void **)(v69 - 32 * (*(_DWORD *)(v69 + 20) & 0x7FFFFFF) + 32);
      }
      else
      {
        if (v300 != 43 || !sub_1C4D8AC3C((uint64_t)v673, *(llvm::Constant **)(v69 - 64)))
          goto LABEL_1187;
        v301 = *(void **)(v69 - 32);
      }
      if (v673[1] == v301 && *(_BYTE *)(a5 + 40) && (*(_BYTE *)(v69 + 17) & 4) != 0)
      {
        v321 = a3[1].u32[0];
        v322 = 1 << (v321 - 1);
        if (v321 <= 0x40)
        {
          v323 = *(_QWORD *)a3 | v322;
          goto LABEL_893;
        }
        *(_QWORD *)(*(_QWORD *)a3 + 8 * ((v321 - 1) >> 6)) |= v322;
      }
      goto LABEL_1187;
    case 0x3Du:
      v46 = *((_DWORD *)a1 + 5);
      if ((v46 & 0x40000000) != 0)
        v47 = (uint64_t *)*((_QWORD *)a1 - 1);
      else
        v47 = (uint64_t *)((char *)a1 - 32 * (v46 & 0x7FFFFFF));
      v127 = *v47;
      v128 = v47[4];
      if (*(_BYTE *)(v128 + 16) == 16)
        v129 = v128;
      else
        v129 = 0;
      if (*(_BYTE *)(*(_QWORD *)v127 + 8) == 19)
        goto LABEL_482;
      v130 = *(unsigned int *)(*(_QWORD *)v127 + 32);
      LODWORD(v673[1]) = v130;
      if (v130 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)v673, -1, 1);
        if (!v129)
          goto LABEL_1183;
      }
      else
      {
        v131 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v130);
        if (!(_DWORD)v130)
          v131 = 0;
        v673[0] = v131;
        if (!v129)
          goto LABEL_1183;
      }
      v132 = (llvm::APInt *)(v129 + 24);
      v133 = *(_DWORD *)(v129 + 32);
      if (v133 >= 0x41)
      {
        if (v133 - llvm::APInt::countLeadingZerosSlowCase(v132) >= 0x41)
          goto LABEL_1183;
        v134 = **(_QWORD ***)v132;
      }
      else
      {
        v134 = *(_QWORD **)v132;
      }
      if ((unint64_t)v134 < v130)
      {
        v691 = v130;
        if (v130 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v690, 0, 0);
          LODWORD(v130) = v691;
          v314 = 1 << (char)v134;
          if (v691 > 0x40)
          {
            v315 = (void *)v690;
            *(_QWORD *)(v690 + 8 * (v134 >> 6)) |= v314;
LABEL_562:
            if (LODWORD(v673[1]) >= 0x41 && v673[0])
              MEMORY[0x1CAA32F9C](v673[0], 0x1000C8000313F17);
            v673[0] = v315;
            LODWORD(v673[1]) = v130;
LABEL_1184:
            sub_1C4F82D44(v127, (llvm::APInt *)v673);
            if (v130 < 0x41)
              goto LABEL_1187;
            goto LABEL_1185;
          }
          v313 = v690;
        }
        else
        {
          v313 = 0;
          v314 = 1 << (char)v134;
        }
        v315 = (void *)(v313 | v314);
        goto LABEL_562;
      }
LABEL_1183:
      LODWORD(v130) = v673[1];
      goto LABEL_1184;
    case 0x3Eu:
      v109 = *((_DWORD *)a1 + 5);
      if ((v109 & 0x40000000) != 0)
        v110 = (uint64_t *)*((_QWORD *)a1 - 1);
      else
        v110 = (uint64_t *)((char *)a1 - 32 * (v109 & 0x7FFFFFF));
      v256 = v110[8];
      if (!v256 || *(_BYTE *)(v256 + 16) != 16)
        goto LABEL_482;
      v257 = *v110;
      v258 = v110[4];
      v259 = *((unsigned int *)this + 2);
      v260 = (unint64_t *)(v256 + 24);
      v261 = *(_DWORD *)(v256 + 32);
      v262 = (unint64_t *)(v256 + 24);
      if (v261 < 0x41)
        goto LABEL_460;
      if (v261 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v256 + 24)) > 0x40)
        goto LABEL_482;
      v262 = (unint64_t *)*v260;
LABEL_460:
      if (*v262 >= v259)
      {
LABEL_482:
        v279 = a3[1].u32[0];
        if (v279 > 0x40)
          bzero(*(void **)a3, ((unint64_t)(v279 + 63) >> 3) & 0x3FFFFFF8);
        else
          *a3 = 0;
        v280 = a3[3].u32[0];
        if (v280 > 0x40)
        {
          v281 = (void *)a3[2];
LABEL_488:
          bzero(v281, ((unint64_t)(v280 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          a3[2] = 0;
        }
        goto LABEL_1187;
      }
      v263 = a3 + 2;
      v264 = a3[3].u32[0];
      v665 = (llvm::APInt *)&a3[2];
      if (v264 > 0x40)
      {
        memset(*(void **)&a3[2], 255, ((unint64_t)(v264 + 63) >> 3) & 0x3FFFFFF8);
        v263 = a3 + 2;
        LODWORD(v264) = a3[3].i32[0];
        if ((_DWORD)v264)
        {
LABEL_463:
          v265 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v264;
          if (v264 < 0x41)
          {
LABEL_464:
            v266 = v263;
            goto LABEL_465;
          }
          v266 = (int8x8_t *)(*(_QWORD *)v263
                            + 8 * ((((unint64_t)v264 + 63) >> 6) - 1));
LABEL_465:
          *(_QWORD *)v266 &= v265;
          v267 = a3[1].u32[0];
          if (v267 > 0x40)
          {
            memset(*(void **)a3, 255, ((unint64_t)(v267 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(v267) = a3[1].i32[0];
            if ((_DWORD)v267)
            {
LABEL_467:
              v268 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v267;
              if (v267 >= 0x41)
              {
                v269 = (int8x8_t *)(*(_QWORD *)a3
                                  + 8 * ((((unint64_t)v267 + 63) >> 6) - 1));
LABEL_469:
                *(_QWORD *)v269 &= v268;
                if (*(_DWORD *)(v256 + 32) >= 0x41u)
                  v260 = (unint64_t *)*v260;
                v270 = (unint64_t *)*v260;
                v271 = *v260 >> 6;
                if (*((_DWORD *)this + 2) >= 0x41u)
                  v272 = (llvm::APInt *)(*(_QWORD *)this + 8 * v271);
                else
                  v272 = this;
                v273 = 1 << (char)v270;
                if ((*(_QWORD *)v272 & (1 << (char)v270)) != 0)
                {
                  sub_1C4F82B7C(v258, a3, a4 + 1, a5);
                  v274 = a3[1].u32[0];
                  if (v274 > 0x40)
                  {
                    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a3) == v274)
                    {
LABEL_477:
                      v275 = a3[3].u32[0];
                      if (v275 > 0x40)
                      {
                        if (llvm::APInt::countLeadingZerosSlowCase(v665) == v275)
                          goto LABEL_1187;
                      }
                      else if (!*(_QWORD *)v665)
                      {
                        goto LABEL_1187;
                      }
                    }
                  }
                  else if (!*(_QWORD *)a3)
                  {
                    goto LABEL_477;
                  }
                }
                v276 = *((unsigned int *)this + 2);
                LODWORD(v673[1]) = v276;
                if (v276 > 0x40)
                {
                  v277 = (void *)operator new[]();
                  v673[0] = v277;
                  memcpy(v277, *(const void **)this, ((unint64_t)(v276 + 63) >> 3) & 0x3FFFFFF8);
                  v357 = 0;
                  *((_QWORD *)v277 + v271) &= ~v273;
                  v358 = (unint64_t)(v276 + 63) >> 6;
                  v278 = v257;
                  do
                  {
                    v285 = v358-- < 1;
                    if (v285)
                      break;
                    v359 = *((_QWORD *)v277 + v358);
                    v357 += __clz(v359);
                  }
                  while (!v359);
                  v360 = v276 | 0xFFFFFFC0;
                  if ((v276 & 0x3F) == 0)
                    v360 = 0;
                  if (v357 + v360 == (_DWORD)v276)
                    goto LABEL_1186;
                }
                else
                {
                  v277 = (void *)(*(_QWORD *)this & ~v273);
                  v673[0] = v277;
                  v278 = v257;
                  if (!v277)
                    goto LABEL_1187;
                }
                sub_1C4F82D44(v278, (llvm::APInt *)v673);
                v361 = a3[1].u32[0];
                if (v361 > 0x40)
                {
                  v362 = (void *)operator new[]();
                  memcpy(v362, *(const void **)a3, ((unint64_t)(v361 + 63) >> 3) & 0x3FFFFFF8);
                  v653 = (uint64_t *)v698;
                  v654 = (unint64_t)(v361 + 63) >> 6;
                  v655 = v362;
                  do
                  {
                    v656 = *v653++;
                    *v655++ &= v656;
                    --v654;
                  }
                  while (v654);
                }
                else
                {
                  v362 = (void *)(v698 & *(_QWORD *)a3);
                }
                v363 = a3 + 2;
                v364 = a3[3].u32[0];
                if (v364 > 0x40)
                {
                  v365 = (void *)operator new[]();
                  memcpy(v365, *(const void **)v665, ((unint64_t)(v364 + 63) >> 3) & 0x3FFFFFF8);
                  v657 = (uint64_t *)v700;
                  v658 = (unint64_t)(v364 + 63) >> 6;
                  v659 = v365;
                  do
                  {
                    v660 = *v657++;
                    *v659++ &= v660;
                    --v658;
                  }
                  while (v658);
                  v363 = a3 + 2;
                }
                else
                {
                  v365 = (void *)(v700 & *(_QWORD *)v665);
                }
                if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
                {
                  ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
                  v363 = a3 + 2;
                }
                *a3 = (int8x8_t)v362;
                a3[1].i32[0] = v361;
                if (a3[3].i32[0] >= 0x41u && *(_QWORD *)v363)
                  ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*v363, 0x1000C8000313F17);
                a3[2] = (int8x8_t)v365;
                a3[3].i32[0] = v364;
                if (v276 < 0x41 || !v277)
                  goto LABEL_1187;
                goto LABEL_1186;
              }
LABEL_468:
              v269 = a3;
              goto LABEL_469;
            }
          }
          else
          {
            *a3 = (int8x8_t)-1;
            if ((_DWORD)v267)
              goto LABEL_467;
          }
          v268 = 0;
          goto LABEL_468;
        }
      }
      else
      {
        *v263 = (int8x8_t)-1;
        if ((_DWORD)v264)
          goto LABEL_463;
      }
      v265 = 0;
      goto LABEL_464;
    case 0x3Fu:
      if (!a1 || v11 != 91)
        goto LABEL_482;
      LODWORD(v673[1]) = 1;
      v673[0] = 0;
      v691 = 1;
      v690 = 0;
      if ((sub_1C4F95B08((uint64_t)a1, this, v673, (void **)&v690) & 1) == 0)
      {
        v312 = a3[1].u32[0];
        if (v312 > 0x40)
          bzero(*(void **)a3, ((unint64_t)(v312 + 63) >> 3) & 0x3FFFFFF8);
        else
          *a3 = 0;
        v330 = a3[3].u32[0];
        if (v330 > 0x40)
          bzero(*(void **)&a3[2], ((unint64_t)(v330 + 63) >> 3) & 0x3FFFFFF8);
        else
          a3[2] = 0;
        goto LABEL_627;
      }
      v102 = (const void **)&a3[2];
      v103 = a3[3].u32[0];
      if (v103 > 0x40)
      {
        memset(*(void **)&a3[2], 255, ((unint64_t)(v103 + 63) >> 3) & 0x3FFFFFF8);
        LODWORD(v103) = a3[3].i32[0];
        if ((_DWORD)v103)
        {
LABEL_121:
          v104 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v103;
          if (v103 < 0x41)
          {
LABEL_122:
            v105 = a3 + 2;
            goto LABEL_123;
          }
          v105 = (int8x8_t *)((char *)*v102 + 8 * (((unint64_t)v103 + 63) >> 6) - 8);
LABEL_123:
          *(_QWORD *)v105 &= v104;
          v106 = a3[1].u32[0];
          if (v106 > 0x40)
          {
            memset(*(void **)a3, 255, ((unint64_t)(v106 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(v106) = a3[1].i32[0];
            if ((_DWORD)v106)
            {
LABEL_125:
              v107 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v106;
              if (v106 >= 0x41)
              {
                v108 = (int8x8_t *)(*(_QWORD *)a3
                                  + 8 * ((((unint64_t)v106 + 63) >> 6) - 1));
LABEL_127:
                *(_QWORD *)v108 &= v107;
                if (LODWORD(v673[1]) > 0x40)
                {
                  v324 = 0;
                  v325 = ((unint64_t)LODWORD(v673[1]) + 63) >> 6;
                  do
                  {
                    v285 = v325-- < 1;
                    if (v285)
                      break;
                    v326 = *((_QWORD *)v673[0] + v325);
                    v324 += __clz(v326);
                  }
                  while (!v326);
                  v327 = LODWORD(v673[1]) | 0xFFFFFFC0;
                  if (((uint64_t)v673[1] & 0x3F) == 0)
                    v327 = 0;
                  if (v324 + v327 == LODWORD(v673[1]))
                    goto LABEL_607;
                }
                else if (!v673[0])
                {
                  goto LABEL_607;
                }
                sub_1C4F82D44(*((_QWORD *)a1 - 8), (llvm::APInt *)v673);
                v328 = a3[1].u32[0];
                if (v328 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a3) != v328)
                    goto LABEL_607;
                }
                else if (*a3)
                {
LABEL_607:
                  if (v691 > 0x40)
                  {
                    v331 = 0;
                    v332 = ((unint64_t)v691 + 63) >> 6;
                    v333 = (void *)v690;
                    do
                    {
                      v285 = v332-- < 1;
                      if (v285)
                        break;
                      v334 = *(_QWORD *)(v690 + 8 * v332);
                      v331 += __clz(v334);
                    }
                    while (!v334);
                    v335 = v691 | 0xFFFFFFC0;
                    if ((v691 & 0x3F) == 0)
                      v335 = 0;
                    if (v331 + v335 == v691)
                      goto LABEL_629;
                  }
                  else if (!v690)
                  {
                    goto LABEL_631;
                  }
                  sub_1C4F82D44(*((_QWORD *)a1 - 4), (llvm::APInt *)&v690);
                  v336 = a3[1].u32[0];
                  if (v336 > 0x40)
                  {
                    v337 = (void *)operator new[]();
                    memcpy(v337, *(const void **)a3, ((unint64_t)(v336 + 63) >> 3) & 0x3FFFFFF8);
                    v645 = (uint64_t *)v698;
                    v646 = (unint64_t)(v336 + 63) >> 6;
                    v647 = v337;
                    do
                    {
                      v648 = *v645++;
                      *v647++ &= v648;
                      --v646;
                    }
                    while (v646);
                  }
                  else
                  {
                    v337 = (void *)(v698 & *(_QWORD *)a3);
                  }
                  v338 = a3[3].u32[0];
                  if (v338 > 0x40)
                  {
                    v339 = (void *)operator new[]();
                    memcpy(v339, *v102, ((unint64_t)(v338 + 63) >> 3) & 0x3FFFFFF8);
                    v649 = (uint64_t *)v700;
                    v650 = (unint64_t)(v338 + 63) >> 6;
                    v651 = v339;
                    do
                    {
                      v652 = *v649++;
                      *v651++ &= v652;
                      --v650;
                    }
                    while (v650);
                  }
                  else
                  {
                    v339 = (void *)(v700 & (unint64_t)*v102);
                  }
                  if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
                    ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
                  *a3 = (int8x8_t)v337;
                  a3[1].i32[0] = v336;
                  if (a3[3].i32[0] >= 0x41u && *v102)
                    MEMORY[0x1CAA32F9C](*v102, 0x1000C8000313F17);
                  a3[2] = (int8x8_t)v339;
                  a3[3].i32[0] = v338;
LABEL_627:
                  if (v691 < 0x41)
                    goto LABEL_631;
                  v333 = (void *)v690;
LABEL_629:
                  if (!v333)
                    goto LABEL_631;
                  goto LABEL_630;
                }
                v329 = a3[3].u32[0];
                if (v329 > 0x40)
                {
                  if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)&a3[2]) == v329)
                    goto LABEL_627;
                }
                else if (!*v102)
                {
                  goto LABEL_627;
                }
                goto LABEL_607;
              }
LABEL_126:
              v108 = a3;
              goto LABEL_127;
            }
          }
          else
          {
            *a3 = (int8x8_t)-1;
            if ((_DWORD)v106)
              goto LABEL_125;
          }
          v107 = 0;
          goto LABEL_126;
        }
      }
      else
      {
        *v102 = (const void *)-1;
        if ((_DWORD)v103)
          goto LABEL_121;
      }
      v104 = 0;
      goto LABEL_122;
    case 0x40u:
      v53 = *((_DWORD *)a1 + 5);
      if ((v53 & 0x40000000) != 0)
        v54 = (uint64_t *)*((_QWORD *)a1 - 1);
      else
        v54 = (uint64_t *)((char *)a1 - 32 * (v53 & 0x7FFFFFF));
      v135 = *v54;
      if (*(_BYTE *)(v135 + 16) != 84)
        goto LABEL_1187;
      v136 = *(_QWORD *)(v135 - 32);
      if (!v136)
        goto LABEL_1187;
      if (*(_BYTE *)(v136 + 16))
        goto LABEL_1187;
      if (*(_QWORD *)(v136 + 24) != *(_QWORD *)(v135 + 72))
        goto LABEL_1187;
      if ((*(_BYTE *)(v136 + 33) & 0x20) == 0)
        goto LABEL_1187;
      if (*((_DWORD *)a1 + 18) != 1)
        goto LABEL_1187;
      if (**((_DWORD **)a1 + 8))
        goto LABEL_1187;
      v137 = *(_DWORD *)(v136 + 36) - 263;
      if (v137 > 0x31)
        goto LABEL_1187;
      if (((1 << v137) & 0x4000000001) != 0)
      {
        v477 = (uint64_t *)(v135 - 32 * (*(_DWORD *)(v135 + 20) & 0x7FFFFFF));
        v139 = *v477;
        v140 = v477[4];
        v661 = a5;
        v141 = 1;
      }
      else
      {
        if (((1 << v137) & 0x400000008000) != 0)
        {
          v476 = (uint64_t ****)(v135 - 32 * (*(_DWORD *)(v135 + 20) & 0x7FFFFFF));
          v306 = *v476;
          v307 = v476[4];
          v94 = 0;
LABEL_543:
          sub_1C4F9E380(v306, v307, v94, this, (uint64_t)a3, (uint64_t)&v698, a4, (uint64_t *)a5);
          goto LABEL_1187;
        }
        if (((1 << v137) & 0x2000000200000) == 0)
          goto LABEL_1187;
        v138 = (uint64_t *)(v135 - 32 * (*(_DWORD *)(v135 + 20) & 0x7FFFFFF));
        v139 = *v138;
        v140 = v138[4];
        v661 = a5;
        v141 = 0;
      }
      v93 = 0;
LABEL_537:
      sub_1C4F9F2D4(v141, v139, v140, v93, this, a3, (uint64_t)&v698, a4, v661);
      goto LABEL_1187;
    case 0x43u:
      v64 = *((_DWORD *)a1 + 5);
      if ((v64 & 0x40000000) != 0)
        v65 = (uint64_t ****)*((_QWORD *)a1 - 1);
      else
        v65 = (uint64_t ****)((char *)a1 - 32 * (v64 & 0x7FFFFFF));
      if (!sub_1C4F8BE80(*v65, *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), a4 + 1, 1))goto LABEL_1187;
      v162 = *((_DWORD *)a1 + 5);
      if ((v162 & 0x40000000) != 0)
        v163 = (uint64_t *)*((_QWORD *)a1 - 1);
      else
        v163 = (uint64_t *)((char *)a1 - 32 * (v162 & 0x7FFFFFF));
      v309 = *v163;
      v310 = a3;
      v311 = a4 + 1;
      goto LABEL_588;
    default:
      goto LABEL_1187;
  }
}

void sub_1C4F9B07C(llvm::APInt *a1, uint64_t a2, int a3, __int128 *a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  llvm::OptimizationRemarkEmitter *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  llvm::APInt *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  void **v32;
  char *v33;
  unint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  llvm *v39;
  uint64_t v40;
  int v41;
  llvm::APInt *v42;
  uint64_t v43;
  llvm::APInt **v44;
  uint64_t v45;
  llvm::APInt *v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  int v53;
  int v54;
  char v55;
  int v56;
  unsigned int v57;
  llvm::APInt **v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  _QWORD *v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  void **v67;
  unsigned int v68;
  uint64_t v69;
  _QWORD *v70;
  llvm::APInt *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  const llvm::DominatorTree *v76;
  char v77;
  uint64_t v78;
  int v79;
  unsigned __int8 *v80;
  uint64_t v81;
  unint64_t v82;
  int v83;
  const llvm::DominatorTree *v84;
  uint64_t v85;
  int v86;
  unsigned __int8 *v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  const llvm::DominatorTree *v91;
  char v92;
  uint64_t v93;
  int v94;
  unsigned __int8 *v95;
  uint64_t v96;
  unint64_t v97;
  int v98;
  const llvm::DominatorTree *v99;
  uint64_t v100;
  int v101;
  unsigned __int8 *v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  const llvm::DominatorTree *v106;
  char v107;
  uint64_t v108;
  int v109;
  _QWORD *v110;
  uint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  llvm::APInt *v116;
  unint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  uint64_t v120;
  unint64_t v121;
  int v122;
  const llvm::DominatorTree *v123;
  uint64_t v124;
  int v125;
  unsigned __int8 *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  const llvm::DominatorTree *v132;
  size_t v133;
  uint64_t *v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  size_t v145;
  uint64_t *v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  unint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  unsigned int v155;
  llvm::APInt **v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  unint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  unint64_t v165;
  _QWORD *v166;
  unsigned int v167;
  void **p_src;
  unsigned int v169;
  uint64_t v170;
  _QWORD *v171;
  size_t v172;
  uint64_t *v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  size_t v182;
  uint64_t *v183;
  unint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  unint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  size_t v192;
  uint64_t *v193;
  unint64_t v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  unint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  size_t v202;
  uint64_t *v203;
  unint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  unint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  unsigned int v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  unsigned __int8 *v216;
  int v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  size_t v221;
  uint64_t *v222;
  unint64_t v223;
  _QWORD *v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  size_t v231;
  uint64_t *v232;
  unint64_t v233;
  _QWORD *v234;
  uint64_t v235;
  uint64_t v236;
  _QWORD *v237;
  unint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned __int8 *v243;
  int v244;
  const llvm::DominatorTree *v245;
  uint64_t v246;
  int v247;
  unsigned __int8 *v248;
  int v249;
  const llvm::DominatorTree *v250;
  uint64_t v251;
  int v252;
  unsigned __int8 *v253;
  unsigned int v254;
  int v255;
  uint64_t v256;
  int v257;
  unsigned __int8 *v258;
  unsigned int v259;
  size_t v260;
  uint64_t *v261;
  unint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  unint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  size_t v272;
  uint64_t *v273;
  unint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  uint64_t v277;
  _QWORD *v278;
  unint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t v282;
  unint64_t v283;
  size_t v284;
  uint64_t *v285;
  unint64_t v286;
  _QWORD *v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  unint64_t v291;
  uint64_t *v292;
  uint64_t v293;
  size_t v294;
  uint64_t *v295;
  unint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  unint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  size_t v304;
  uint64_t *v305;
  unint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  uint64_t v309;
  _QWORD *v310;
  unint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  unint64_t v315;
  size_t v316;
  uint64_t *v317;
  unint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  unint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  size_t v328;
  uint64_t *v329;
  unint64_t v330;
  _QWORD *v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  unint64_t v335;
  uint64_t *v336;
  uint64_t v337;
  size_t v338;
  uint64_t *v339;
  unint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  uint64_t v343;
  _QWORD *v344;
  unint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  _QWORD *v349;
  uint64_t *v350;
  unint64_t v351;
  uint64_t v352;
  unsigned int v353;
  uint64_t v354;
  _QWORD *v355;
  uint64_t *v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t *v361;
  unint64_t v362;
  uint64_t v363;
  unsigned int v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t *v367;
  unint64_t v368;
  uint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  llvm::APInt *v372;
  unint64_t v373;
  uint64_t v374;
  uint64_t v375;
  unint64_t v376;
  _QWORD *v377;
  uint64_t *v378;
  unint64_t v379;
  uint64_t v380;
  uint64_t v381;
  _QWORD *v382;
  uint64_t *v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  _QWORD *v387;
  llvm::APInt *v388;
  unint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  unint64_t v395;
  _QWORD *v396;
  uint64_t v397;
  void **v398;
  unsigned int v399;
  uint64_t v400;
  unsigned int v401;
  uint64_t v402;
  unsigned int v403;
  unint64_t v404;
  unsigned int v405;
  unint64_t v406;
  unsigned int v407;
  unsigned int v408[3];
  int v409;
  uint64_t v410;
  unsigned __int8 *v411;
  void *__src;
  uint64_t v413;
  llvm::APInt *v414;
  unsigned int *v415;
  unsigned __int8 **v416;
  unsigned __int8 **v417;
  void *v418;
  unsigned int v419;
  uint64_t v420;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  const char *v424;
  uint64_t v425;
  char v426;
  char v427;
  void *v428;
  uint64_t v429;
  _BYTE v430[260];
  int v431;
  uint64_t v432;
  uint64_t v433;

  v433 = *MEMORY[0x1E0C80C00];
  v4 = *((_QWORD *)a4 + 1);
  if (!v4)
    return;
  v6 = *((_QWORD *)a4 + 2);
  if (!v6)
    return;
  v10 = *(unsigned int *)(a2 + 8);
  if (*(_BYTE *)(*(_QWORD *)a1 + 8) == 15)
  {
    LODWORD(v411) = 74;
    v11 = *((_QWORD *)a4 + 3);
    v404 = v6;
    v400 = v11;
    __src = &v404;
    v413 = (uint64_t)&v400;
    llvm::getKnowledgeForValue((uint64_t)a1, &v411, 1, v4, (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t))sub_1C4D9B788, (uint64_t)&__src, (uint64_t)&v421);
    if ((_DWORD)v421)
    {
      v12 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v421 + 8));
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] == 1)
        sub_1C4912E54((_QWORD *)a2, 0, 63 - __clz(*((unint64_t *)&v421 + 1)));
    }
    v4 = *((_QWORD *)a4 + 1);
  }
  if (!*(_BYTE *)(v4 + 184))
    llvm::AssumptionCache::scanFunction((llvm::AssumptionCache *)v4);
  v13 = *(_QWORD *)(v4 + 160);
  v14 = *(_DWORD *)(v4 + 176);
  if (v14)
  {
    v22 = v14 - 1;
    v23 = (v14 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v15 = v13 + 88 * v23;
    v24 = *(llvm::APInt **)(v15 + 24);
    if (v24 == a1)
      goto LABEL_12;
    v25 = 1;
    while (v24 != (llvm::APInt *)-4096)
    {
      v26 = v23 + v25++;
      v23 = v26 & v22;
      v15 = v13 + 88 * (v26 & v22);
      v24 = *(llvm::APInt **)(v15 + 24);
      if (v24 == a1)
        goto LABEL_12;
    }
  }
  v15 = v13 + 88 * v14;
LABEL_12:
  if (v15 != v13 + 88 * v14)
  {
    v36 = *(unsigned int *)(v15 + 48);
    if ((_DWORD)v36)
    {
      v37 = *(_QWORD *)(v15 + 40);
      v38 = v37 + 32 * v36;
      v399 = a3 + 1;
      v398 = (void **)(a2 + 16);
      while (1)
      {
        v39 = *(llvm **)(v37 + 16);
        if (!v39)
          goto LABEL_500;
        v40 = *((_QWORD *)v39 - 4 * (*((_DWORD *)v39 + 5) & 0x7FFFFFF));
        if ((llvm::APInt *)v40 == a1
          && llvm::isValidAssumeForContext(*(llvm **)(v37 + 16), *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), (const llvm::DominatorTree *)a4))
        {
          v391 = *(unsigned int *)(a2 + 8);
          if (v391 > 0x40)
            bzero(*(void **)a2, ((unint64_t)(v391 + 63) >> 3) & 0x3FFFFFF8);
          else
            *(_QWORD *)a2 = 0;
          v392 = *(unsigned int *)(a2 + 24);
          if (v392 > 0x40)
          {
            memset(*(void **)(a2 + 16), 255, ((unint64_t)(v392 + 63) >> 3) & 0x3FFFFFF8);
            LODWORD(v392) = *(_DWORD *)(a2 + 24);
            if ((_DWORD)v392)
              goto LABEL_685;
          }
          else
          {
            *v398 = (void *)-1;
            if ((_DWORD)v392)
            {
LABEL_685:
              v393 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v392;
              if (v392 >= 0x41)
                v398 = (void **)((char *)*v398 + 8 * (((unint64_t)v392 + 63) >> 6)
                                               - 8);
LABEL_687:
              *v398 = (void *)((unint64_t)*v398 & v393);
              return;
            }
          }
          v393 = 0;
          goto LABEL_687;
        }
        *(_QWORD *)&v421 = a1;
        v41 = *(unsigned __int8 *)(v40 + 16);
        if (v41 == 5)
        {
          if (*(_WORD *)(v40 + 18) != 30)
            goto LABEL_74;
          v43 = *(_DWORD *)(v40 + 20) & 0x7FFFFFF;
          v44 = (llvm::APInt **)(v40 - 32 * v43);
          if (*v44 != a1)
          {
            v45 = -v43;
            v46 = a1;
LABEL_71:
            v47 = v40 + 32 * v45;
            if (v46 != *(llvm::APInt **)(v47 + 32)
              || !sub_1C4D9EED4((uint64_t)&v421 + 8, *(llvm::Constant **)v47))
            {
              goto LABEL_74;
            }
            goto LABEL_73;
          }
          if ((sub_1C4D9EED4((uint64_t)&v421 + 8, v44[4]) & 1) == 0)
          {
            v46 = (llvm::APInt *)v421;
            v45 = -(uint64_t)(*(_DWORD *)(v40 + 20) & 0x7FFFFFF);
            goto LABEL_71;
          }
        }
        else
        {
          if (v41 != 58)
            goto LABEL_74;
          v42 = a1;
          if (*(llvm::APInt **)(v40 - 64) != a1)
            goto LABEL_63;
          if ((sub_1C4D9ED34((uint64_t)&v421 + 8, *(llvm::Constant **)(v40 - 32)) & 1) == 0)
          {
            v42 = (llvm::APInt *)v421;
LABEL_63:
            if (v42 != *(llvm::APInt **)(v40 - 32)
              || (sub_1C4D9ED34((uint64_t)&v421 + 8, *(llvm::Constant **)(v40 - 64)) & 1) == 0)
            {
              goto LABEL_74;
            }
          }
        }
LABEL_73:
        if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), (const llvm::DominatorTree *)a4))
        {
          v394 = *(unsigned int *)(a2 + 8);
          if (v394 <= 0x40)
          {
            *(_QWORD *)a2 = -1;
            if ((_DWORD)v394)
              goto LABEL_690;
LABEL_698:
            v395 = 0;
            goto LABEL_691;
          }
          memset(*(void **)a2, 255, ((unint64_t)(v394 + 63) >> 3) & 0x3FFFFFF8);
          LODWORD(v394) = *(_DWORD *)(a2 + 8);
          if (!(_DWORD)v394)
            goto LABEL_698;
LABEL_690:
          v395 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v394;
          if (v394 >= 0x41)
            v396 = (_QWORD *)(*(_QWORD *)a2
                            + 8 * ((((unint64_t)v394 + 63) >> 6) - 1));
          else
LABEL_691:
            v396 = (_QWORD *)a2;
          *v396 &= v395;
          v397 = *(unsigned int *)(a2 + 24);
          if (v397 > 0x40)
            bzero(*v398, ((unint64_t)(v397 + 63) >> 3) & 0x3FFFFFF8);
          else
            *v398 = 0;
          return;
        }
LABEL_74:
        if (*(_BYTE *)(v40 + 16) != 81)
          goto LABEL_500;
        v48 = a4[1];
        v421 = *a4;
        v422 = v48;
        v423 = a4[2];
        *((_QWORD *)&v421 + 1) = 0;
        v410 = 0;
        v411 = 0;
        v409 = 0;
        *(_QWORD *)v408 = 0;
        switch(*(_WORD *)(v40 + 18) & 0x3F)
        {
          case ' ':
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = (unsigned int *)&v411;
            v49 = *(_QWORD *)(v40 - 64);
            if ((llvm::APInt *)v49 == a1 || (sub_1C4E75A04(&v414, v49) & 1) != 0)
            {
              v50 = *(_QWORD *)(v40 - 32);
              if (v50)
              {
                *(_QWORD *)v415 = v50;
                v51 = *(_WORD *)(v40 + 18) & 0x3F;
                goto LABEL_145;
              }
              v72 = 0;
            }
            else
            {
              v72 = *(_QWORD *)(v40 - 32);
            }
            if (v413 != v72 && !sub_1C4E75A04(&v414, v72))
              goto LABEL_150;
            v73 = *(_QWORD *)(v40 - 64);
            if (!v73)
              goto LABEL_150;
            *(_QWORD *)v415 = v73;
            v51 = dword_1C85F6E70[*(_WORD *)(v40 + 18) & 0x3F];
LABEL_145:
            *(_DWORD *)__src = v51;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), (const llvm::DominatorTree *)a4))
            {
              sub_1C4F83784(&v404, v411, v399, &v421);
              sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
              if (v407 >= 0x41 && v406)
                MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
              if (v405 >= 0x41 && v404)
                MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
              v74 = *(unsigned int *)(a2 + 8);
              if (v74 > 0x40)
              {
                v110 = *(_QWORD **)a2;
                v111 = (uint64_t *)__src;
                v112 = (unint64_t)(v74 + 63) >> 6;
                do
                {
                  v113 = *v111++;
                  *v110++ |= v113;
                  --v112;
                }
                while (v112);
              }
              else
              {
                *(_QWORD *)a2 |= (unint64_t)__src;
              }
              v114 = *(unsigned int *)(a2 + 24);
              if (v114 > 0x40)
              {
                v115 = *v398;
                v116 = v414;
                v117 = (unint64_t)(v114 + 63) >> 6;
                do
                {
                  v118 = *(_QWORD *)v116;
                  v116 = (llvm::APInt *)((char *)v116 + 8);
                  *v115++ |= v118;
                  --v117;
                }
                while (v117);
              }
              else
              {
                *v398 = (void *)((unint64_t)*v398 | (unint64_t)v414);
              }
              if (v415 >= 0x41 && v414)
                MEMORY[0x1CAA32F9C](v414, 0x1000C8000313F17);
              if (v413 < 0x41 || !__src)
                goto LABEL_500;
LABEL_214:
              MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
              goto LABEL_500;
            }
LABEL_150:
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = (unsigned int *)&v410;
            v416 = &v411;
            v75 = sub_1C4FA1C44((uint64_t)&v413, *(_QWORD *)(v40 - 64), (char)&v411);
            v78 = *(_QWORD *)(v40 - 32);
            if (v75 && v78)
            {
              *v416 = (unsigned __int8 *)v78;
              v79 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1C4FA1C44((uint64_t)&v413, v78, v77))
                goto LABEL_163;
              v80 = *(unsigned __int8 **)(v40 - 64);
              if (!v80)
                goto LABEL_163;
              *v416 = v80;
              v79 = dword_1C85F6E70[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v79;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v76))
            {
              sub_1C4F83784(&v404, v411, v399, &v421);
              sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
              if (v407 >= 0x41 && v406)
                MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
              if (v405 >= 0x41 && v404)
                MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
              sub_1C4F83784(&v400, v410, v399, &v421);
              sub_1C4F9E728((llvm::APInt *)&v400, v10, &v404);
              if (v403 >= 0x41 && v402)
                MEMORY[0x1CAA32F9C](v402, 0x1000C8000313F17);
              if (v401 >= 0x41 && v400)
                MEMORY[0x1CAA32F9C](v400, 0x1000C8000313F17);
              v81 = v413;
              if (v413 > 0x40)
              {
                v133 = (((unint64_t)v413 + 63) >> 3) & 0x3FFFFFF8;
                v82 = operator new[]();
                memcpy((void *)v82, __src, v133);
                v134 = (uint64_t *)v406;
                v135 = (unint64_t)(v81 + 63) >> 6;
                v136 = (_QWORD *)v82;
                do
                {
                  v137 = *v134++;
                  *v136++ &= v137;
                  --v135;
                }
                while (v135);
              }
              else
              {
                v82 = v406 & (unint64_t)__src;
              }
              v138 = *(unsigned int *)(a2 + 8);
              if (v138 > 0x40)
              {
                v139 = *(_QWORD **)a2;
                v140 = (unint64_t)(v138 + 63) >> 6;
                v141 = (uint64_t *)v82;
                do
                {
                  v142 = *v141++;
                  *v139++ |= v142;
                  --v140;
                }
                while (v140);
              }
              else
              {
                *(_QWORD *)a2 |= v82;
              }
              if (v81 >= 0x41 && v82)
                MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
              v143 = v415;
              if (v415 > 0x40)
              {
                v145 = (((unint64_t)v415 + 63) >> 3) & 0x3FFFFFF8;
                v144 = operator new[]();
                memcpy((void *)v144, v414, v145);
                v146 = (uint64_t *)v406;
                v147 = (unint64_t)(v143 + 63) >> 6;
                v148 = (_QWORD *)v144;
                do
                {
                  v149 = *v146++;
                  *v148++ &= v149;
                  --v147;
                }
                while (v147);
              }
              else
              {
                v144 = v406 & (unint64_t)v414;
              }
              v150 = *(unsigned int *)(a2 + 24);
              if (v150 <= 0x40)
                goto LABEL_490;
              v151 = *v398;
              v152 = (unint64_t)(v150 + 63) >> 6;
              v153 = (uint64_t *)v144;
              do
              {
                v154 = *v153++;
                *v151++ |= v154;
                --v152;
              }
              while (v152);
              goto LABEL_491;
            }
LABEL_163:
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = (unsigned int *)&v410;
            v417 = &v411;
            v83 = sub_1C4FA1D98((uint64_t)&v413, *(_QWORD *)(v40 - 64));
            v85 = *(_QWORD *)(v40 - 32);
            if (v83 && v85)
            {
              *v417 = (unsigned __int8 *)v85;
              v86 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1C4FA1D98((uint64_t)&v413, v85))
                goto LABEL_176;
              v87 = *(unsigned __int8 **)(v40 - 64);
              if (!v87)
                goto LABEL_176;
              *v417 = v87;
              v86 = dword_1C85F6E70[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v86;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v84))
            {
              sub_1C4F83784(&v404, v411, v399, &v421);
              sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
              if (v407 >= 0x41 && v406)
                MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
              if (v405 >= 0x41 && v404)
                MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
              sub_1C4F83784(&v400, v410, v399, &v421);
              sub_1C4F9E728((llvm::APInt *)&v400, v10, &v404);
              if (v403 >= 0x41 && v402)
                MEMORY[0x1CAA32F9C](v402, 0x1000C8000313F17);
              if (v401 >= 0x41 && v400)
                MEMORY[0x1CAA32F9C](v400, 0x1000C8000313F17);
              v88 = v415;
              if (v415 > 0x40)
              {
                v172 = (((unint64_t)v415 + 63) >> 3) & 0x3FFFFFF8;
                v89 = operator new[]();
                memcpy((void *)v89, v414, v172);
                v173 = (uint64_t *)v406;
                v174 = (unint64_t)(v88 + 63) >> 6;
                v175 = (_QWORD *)v89;
                do
                {
                  v176 = *v173++;
                  *v175++ &= v176;
                  --v174;
                }
                while (v174);
              }
              else
              {
                v89 = v406 & (unint64_t)v414;
              }
              v177 = *(unsigned int *)(a2 + 8);
              if (v177 > 0x40)
              {
                v178 = *(_QWORD **)a2;
                v179 = (unint64_t)(v177 + 63) >> 6;
                v180 = (uint64_t *)v89;
                do
                {
                  v181 = *v180++;
                  *v178++ |= v181;
                  --v179;
                }
                while (v179);
              }
              else
              {
                *(_QWORD *)a2 |= v89;
              }
              if (v88 >= 0x41 && v89)
                MEMORY[0x1CAA32F9C](v89, 0x1000C8000313F17);
              v143 = v413;
              if (v413 > 0x40)
              {
                v182 = (((unint64_t)v413 + 63) >> 3) & 0x3FFFFFF8;
                v144 = operator new[]();
                memcpy((void *)v144, __src, v182);
                v183 = (uint64_t *)v406;
                v184 = (unint64_t)(v143 + 63) >> 6;
                v185 = (_QWORD *)v144;
                do
                {
                  v186 = *v183++;
                  *v185++ &= v186;
                  --v184;
                }
                while (v184);
              }
              else
              {
                v144 = v406 & (unint64_t)__src;
              }
              v187 = *(unsigned int *)(a2 + 24);
              if (v187 <= 0x40)
                goto LABEL_490;
              v188 = *v398;
              v189 = (unint64_t)(v187 + 63) >> 6;
              v190 = (uint64_t *)v144;
              do
              {
                v191 = *v190++;
                *v188++ |= v191;
                --v189;
              }
              while (v189);
              goto LABEL_491;
            }
LABEL_176:
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = (unsigned int *)&v410;
            v416 = &v411;
            v90 = sub_1C4FA1E9C((uint64_t)&v413, *(_QWORD *)(v40 - 64), (char)&v411);
            v93 = *(_QWORD *)(v40 - 32);
            if (v90 && v93)
            {
              *v416 = (unsigned __int8 *)v93;
              v94 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1C4FA1E9C((uint64_t)&v413, v93, v92))
                goto LABEL_189;
              v95 = *(unsigned __int8 **)(v40 - 64);
              if (!v95)
                goto LABEL_189;
              *v416 = v95;
              v94 = dword_1C85F6E70[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v94;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v91))
            {
              sub_1C4F83784(&v404, v411, v399, &v421);
              sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
              if (v407 >= 0x41 && v406)
                MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
              if (v405 >= 0x41 && v404)
                MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
              sub_1C4F83784(&v400, v410, v399, &v421);
              sub_1C4F9E728((llvm::APInt *)&v400, v10, &v404);
              if (v403 >= 0x41 && v402)
                MEMORY[0x1CAA32F9C](v402, 0x1000C8000313F17);
              if (v401 >= 0x41 && v400)
                MEMORY[0x1CAA32F9C](v400, 0x1000C8000313F17);
              v96 = v413;
              if (v413 > 0x40)
              {
                v192 = (((unint64_t)v413 + 63) >> 3) & 0x3FFFFFF8;
                v97 = operator new[]();
                memcpy((void *)v97, __src, v192);
                v193 = (uint64_t *)v404;
                v194 = (unint64_t)(v96 + 63) >> 6;
                v195 = (_QWORD *)v97;
                do
                {
                  v196 = *v193++;
                  *v195++ &= v196;
                  --v194;
                }
                while (v194);
              }
              else
              {
                v97 = v404 & (unint64_t)__src;
              }
              v197 = *(unsigned int *)(a2 + 8);
              if (v197 > 0x40)
              {
                v198 = *(_QWORD **)a2;
                v199 = (unint64_t)(v197 + 63) >> 6;
                v200 = (uint64_t *)v97;
                do
                {
                  v201 = *v200++;
                  *v198++ |= v201;
                  --v199;
                }
                while (v199);
              }
              else
              {
                *(_QWORD *)a2 |= v97;
              }
              if (v96 >= 0x41 && v97)
                MEMORY[0x1CAA32F9C](v97, 0x1000C8000313F17);
              v143 = v415;
              if (v415 > 0x40)
              {
                v202 = (((unint64_t)v415 + 63) >> 3) & 0x3FFFFFF8;
                v144 = operator new[]();
                memcpy((void *)v144, v414, v202);
                v203 = (uint64_t *)v404;
                v204 = (unint64_t)(v143 + 63) >> 6;
                v205 = (_QWORD *)v144;
                do
                {
                  v206 = *v203++;
                  *v205++ &= v206;
                  --v204;
                }
                while (v204);
              }
              else
              {
                v144 = v404 & (unint64_t)v414;
              }
              v207 = *(unsigned int *)(a2 + 24);
              if (v207 <= 0x40)
                goto LABEL_490;
              v208 = *v398;
              v209 = (unint64_t)(v207 + 63) >> 6;
              v210 = (uint64_t *)v144;
              do
              {
                v211 = *v210++;
                *v208++ |= v211;
                --v209;
              }
              while (v209);
              goto LABEL_491;
            }
LABEL_189:
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = (unsigned int *)&v410;
            v417 = &v411;
            v98 = sub_1C4FA1FF0((uint64_t)&v413, *(_QWORD *)(v40 - 64));
            v100 = *(_QWORD *)(v40 - 32);
            if (v98 && v100)
            {
              *v417 = (unsigned __int8 *)v100;
              v101 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1C4FA1FF0((uint64_t)&v413, v100))
                goto LABEL_202;
              v102 = *(unsigned __int8 **)(v40 - 64);
              if (!v102)
                goto LABEL_202;
              *v417 = v102;
              v101 = dword_1C85F6E70[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v101;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v99))
            {
              sub_1C4F83784(&v404, v411, v399, &v421);
              sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
              if (v407 >= 0x41 && v406)
                MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
              if (v405 >= 0x41 && v404)
                MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
              sub_1C4F83784(&v400, v410, v399, &v421);
              sub_1C4F9E728((llvm::APInt *)&v400, v10, &v404);
              if (v403 >= 0x41 && v402)
                MEMORY[0x1CAA32F9C](v402, 0x1000C8000313F17);
              if (v401 >= 0x41 && v400)
                MEMORY[0x1CAA32F9C](v400, 0x1000C8000313F17);
              v103 = v415;
              if (v415 > 0x40)
              {
                v221 = (((unint64_t)v415 + 63) >> 3) & 0x3FFFFFF8;
                v104 = operator new[]();
                memcpy((void *)v104, v414, v221);
                v222 = (uint64_t *)v404;
                v223 = (unint64_t)(v103 + 63) >> 6;
                v224 = (_QWORD *)v104;
                do
                {
                  v225 = *v222++;
                  *v224++ &= v225;
                  --v223;
                }
                while (v223);
              }
              else
              {
                v104 = v404 & (unint64_t)v414;
              }
              v226 = *(unsigned int *)(a2 + 8);
              if (v226 > 0x40)
              {
                v227 = *(_QWORD **)a2;
                v228 = (unint64_t)(v226 + 63) >> 6;
                v229 = (uint64_t *)v104;
                do
                {
                  v230 = *v229++;
                  *v227++ |= v230;
                  --v228;
                }
                while (v228);
              }
              else
              {
                *(_QWORD *)a2 |= v104;
              }
              if (v103 >= 0x41 && v104)
                MEMORY[0x1CAA32F9C](v104, 0x1000C8000313F17);
              v143 = v413;
              if (v413 > 0x40)
              {
                v231 = (((unint64_t)v413 + 63) >> 3) & 0x3FFFFFF8;
                v144 = operator new[]();
                memcpy((void *)v144, __src, v231);
                v232 = (uint64_t *)v404;
                v233 = (unint64_t)(v143 + 63) >> 6;
                v234 = (_QWORD *)v144;
                do
                {
                  v235 = *v232++;
                  *v234++ &= v235;
                  --v233;
                }
                while (v233);
              }
              else
              {
                v144 = v404 & (unint64_t)__src;
              }
              v236 = *(unsigned int *)(a2 + 24);
              if (v236 <= 0x40)
                goto LABEL_490;
              v237 = *v398;
              v238 = (unint64_t)(v236 + 63) >> 6;
              v239 = (uint64_t *)v144;
              do
              {
                v240 = *v239++;
                *v237++ |= v240;
                --v238;
              }
              while (v238);
              goto LABEL_491;
            }
LABEL_202:
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = (unsigned int *)&v410;
            v416 = &v411;
            v105 = sub_1C4FA20F4((uint64_t)&v413, *(_QWORD *)(v40 - 64), (char)&v411);
            v108 = *(_QWORD *)(v40 - 32);
            if (v105 && v108)
            {
              *v416 = (unsigned __int8 *)v108;
              v109 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1C4FA20F4((uint64_t)&v413, v108, v107))
                goto LABEL_225;
              v119 = *(unsigned __int8 **)(v40 - 64);
              if (!v119)
                goto LABEL_225;
              *v416 = v119;
              v109 = dword_1C85F6E70[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v109;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v106))
            {
              sub_1C4F83784(&v404, v411, v399, &v421);
              sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
              if (v407 >= 0x41 && v406)
                MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
              if (v405 >= 0x41 && v404)
                MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
              sub_1C4F83784(&v400, v410, v399, &v421);
              sub_1C4F9E728((llvm::APInt *)&v400, v10, &v404);
              if (v403 >= 0x41 && v402)
                MEMORY[0x1CAA32F9C](v402, 0x1000C8000313F17);
              if (v401 >= 0x41 && v400)
                MEMORY[0x1CAA32F9C](v400, 0x1000C8000313F17);
              v120 = v413;
              if (v413 > 0x40)
              {
                v260 = (((unint64_t)v413 + 63) >> 3) & 0x3FFFFFF8;
                v121 = operator new[]();
                memcpy((void *)v121, __src, v260);
                v261 = (uint64_t *)v404;
                v262 = (unint64_t)(v120 + 63) >> 6;
                v263 = (_QWORD *)v121;
                do
                {
                  v264 = *v261++;
                  *v263++ &= v264;
                  --v262;
                }
                while (v262);
              }
              else
              {
                v121 = v404 & (unint64_t)__src;
              }
              v265 = *(unsigned int *)(a2 + 8);
              if (v265 > 0x40)
              {
                v266 = *(_QWORD **)a2;
                v267 = (unint64_t)(v265 + 63) >> 6;
                v268 = (uint64_t *)v121;
                do
                {
                  v269 = *v268++;
                  *v266++ |= v269;
                  --v267;
                }
                while (v267);
              }
              else
              {
                *(_QWORD *)a2 |= v121;
              }
              if (v120 >= 0x41 && v121)
                MEMORY[0x1CAA32F9C](v121, 0x1000C8000313F17);
              v270 = v415;
              if (v415 > 0x40)
              {
                v272 = (((unint64_t)v415 + 63) >> 3) & 0x3FFFFFF8;
                v271 = operator new[]();
                memcpy((void *)v271, v414, v272);
                v273 = (uint64_t *)v404;
                v274 = (unint64_t)(v270 + 63) >> 6;
                v275 = (_QWORD *)v271;
                do
                {
                  v276 = *v273++;
                  *v275++ &= v276;
                  --v274;
                }
                while (v274);
              }
              else
              {
                v271 = v404 & (unint64_t)v414;
              }
              v277 = *(unsigned int *)(a2 + 24);
              if (v277 > 0x40)
              {
                v278 = *v398;
                v279 = (unint64_t)(v277 + 63) >> 6;
                v280 = (uint64_t *)v271;
                do
                {
                  v281 = *v280++;
                  *v278++ |= v281;
                  --v279;
                }
                while (v279);
              }
              else
              {
                *v398 = (void *)((unint64_t)*v398 | v271);
              }
              if (v270 >= 0x41 && v271)
                MEMORY[0x1CAA32F9C](v271, 0x1000C8000313F17);
              v282 = v415;
              if (v415 > 0x40)
              {
                v284 = (((unint64_t)v415 + 63) >> 3) & 0x3FFFFFF8;
                v283 = operator new[]();
                memcpy((void *)v283, v414, v284);
                v285 = (uint64_t *)v406;
                v286 = (unint64_t)(v282 + 63) >> 6;
                v287 = (_QWORD *)v283;
                do
                {
                  v288 = *v285++;
                  *v287++ &= v288;
                  --v286;
                }
                while (v286);
              }
              else
              {
                v283 = v406 & (unint64_t)v414;
              }
              v289 = *(unsigned int *)(a2 + 8);
              if (v289 > 0x40)
              {
                v290 = *(_QWORD **)a2;
                v291 = (unint64_t)(v289 + 63) >> 6;
                v292 = (uint64_t *)v283;
                do
                {
                  v293 = *v292++;
                  *v290++ |= v293;
                  --v291;
                }
                while (v291);
              }
              else
              {
                *(_QWORD *)a2 |= v283;
              }
              if (v282 >= 0x41 && v283)
                MEMORY[0x1CAA32F9C](v283, 0x1000C8000313F17);
              v143 = v413;
              if (v413 > 0x40)
              {
                v294 = (((unint64_t)v413 + 63) >> 3) & 0x3FFFFFF8;
                v144 = operator new[]();
                memcpy((void *)v144, __src, v294);
                v295 = (uint64_t *)v406;
                v296 = (unint64_t)(v143 + 63) >> 6;
                v297 = (_QWORD *)v144;
                do
                {
                  v298 = *v295++;
                  *v297++ &= v298;
                  --v296;
                }
                while (v296);
              }
              else
              {
                v144 = v406 & (unint64_t)__src;
              }
              v299 = *(unsigned int *)(a2 + 24);
              if (v299 <= 0x40)
                goto LABEL_490;
              v300 = *v398;
              v301 = (unint64_t)(v299 + 63) >> 6;
              v302 = (uint64_t *)v144;
              do
              {
                v303 = *v302++;
                *v300++ |= v303;
                --v301;
              }
              while (v301);
              goto LABEL_491;
            }
LABEL_225:
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = (unsigned int *)&v410;
            v417 = &v411;
            v122 = sub_1C4FA2248((uint64_t)&v413, *(_QWORD *)(v40 - 64));
            v124 = *(_QWORD *)(v40 - 32);
            if (v122 && v124)
            {
              *v417 = (unsigned __int8 *)v124;
              v125 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1C4FA2248((uint64_t)&v413, v124))
                goto LABEL_238;
              v126 = *(unsigned __int8 **)(v40 - 64);
              if (!v126)
                goto LABEL_238;
              *v417 = v126;
              v125 = dword_1C85F6E70[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v125;
            if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v123))
            {
              sub_1C4F83784(&v404, v411, v399, &v421);
              sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
              if (v407 >= 0x41 && v406)
                MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
              if (v405 >= 0x41 && v404)
                MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
              sub_1C4F83784(&v400, v410, v399, &v421);
              sub_1C4F9E728((llvm::APInt *)&v400, v10, &v404);
              if (v403 >= 0x41 && v402)
                MEMORY[0x1CAA32F9C](v402, 0x1000C8000313F17);
              if (v401 >= 0x41 && v400)
                MEMORY[0x1CAA32F9C](v400, 0x1000C8000313F17);
              v127 = v415;
              if (v415 > 0x40)
              {
                v304 = (((unint64_t)v415 + 63) >> 3) & 0x3FFFFFF8;
                v128 = operator new[]();
                memcpy((void *)v128, v414, v304);
                v305 = (uint64_t *)v404;
                v306 = (unint64_t)(v127 + 63) >> 6;
                v307 = (_QWORD *)v128;
                do
                {
                  v308 = *v305++;
                  *v307++ &= v308;
                  --v306;
                }
                while (v306);
              }
              else
              {
                v128 = v404 & (unint64_t)v414;
              }
              v309 = *(unsigned int *)(a2 + 8);
              if (v309 > 0x40)
              {
                v310 = *(_QWORD **)a2;
                v311 = (unint64_t)(v309 + 63) >> 6;
                v312 = (uint64_t *)v128;
                do
                {
                  v313 = *v312++;
                  *v310++ |= v313;
                  --v311;
                }
                while (v311);
              }
              else
              {
                *(_QWORD *)a2 |= v128;
              }
              if (v127 >= 0x41 && v128)
                MEMORY[0x1CAA32F9C](v128, 0x1000C8000313F17);
              v314 = v413;
              if (v413 > 0x40)
              {
                v316 = (((unint64_t)v413 + 63) >> 3) & 0x3FFFFFF8;
                v315 = operator new[]();
                memcpy((void *)v315, __src, v316);
                v317 = (uint64_t *)v404;
                v318 = (unint64_t)(v314 + 63) >> 6;
                v319 = (_QWORD *)v315;
                do
                {
                  v320 = *v317++;
                  *v319++ &= v320;
                  --v318;
                }
                while (v318);
              }
              else
              {
                v315 = v404 & (unint64_t)__src;
              }
              v321 = *(unsigned int *)(a2 + 24);
              if (v321 > 0x40)
              {
                v322 = *v398;
                v323 = (unint64_t)(v321 + 63) >> 6;
                v324 = (uint64_t *)v315;
                do
                {
                  v325 = *v324++;
                  *v322++ |= v325;
                  --v323;
                }
                while (v323);
              }
              else
              {
                *v398 = (void *)((unint64_t)*v398 | v315);
              }
              if (v314 >= 0x41 && v315)
                MEMORY[0x1CAA32F9C](v315, 0x1000C8000313F17);
              v326 = v413;
              if (v413 > 0x40)
              {
                v328 = (((unint64_t)v413 + 63) >> 3) & 0x3FFFFFF8;
                v327 = operator new[]();
                memcpy((void *)v327, __src, v328);
                v329 = (uint64_t *)v406;
                v330 = (unint64_t)(v326 + 63) >> 6;
                v331 = (_QWORD *)v327;
                do
                {
                  v332 = *v329++;
                  *v331++ &= v332;
                  --v330;
                }
                while (v330);
              }
              else
              {
                v327 = v406 & (unint64_t)__src;
              }
              v333 = *(unsigned int *)(a2 + 8);
              if (v333 > 0x40)
              {
                v334 = *(_QWORD **)a2;
                v335 = (unint64_t)(v333 + 63) >> 6;
                v336 = (uint64_t *)v327;
                do
                {
                  v337 = *v336++;
                  *v334++ |= v337;
                  --v335;
                }
                while (v335);
              }
              else
              {
                *(_QWORD *)a2 |= v327;
              }
              if (v326 >= 0x41 && v327)
                MEMORY[0x1CAA32F9C](v327, 0x1000C8000313F17);
              v143 = v415;
              if (v415 > 0x40)
              {
                v338 = (((unint64_t)v415 + 63) >> 3) & 0x3FFFFFF8;
                v144 = operator new[]();
                memcpy((void *)v144, v414, v338);
                v339 = (uint64_t *)v406;
                v340 = (unint64_t)(v143 + 63) >> 6;
                v341 = (_QWORD *)v144;
                do
                {
                  v342 = *v339++;
                  *v341++ &= v342;
                  --v340;
                }
                while (v340);
              }
              else
              {
                v144 = v406 & (unint64_t)v414;
              }
              v343 = *(unsigned int *)(a2 + 24);
              if (v343 > 0x40)
              {
                v344 = *v398;
                v345 = (unint64_t)(v343 + 63) >> 6;
                v346 = (uint64_t *)v144;
                do
                {
                  v347 = *v346++;
                  *v344++ |= v347;
                  --v345;
                }
                while (v345);
              }
              else
              {
LABEL_490:
                *v398 = (void *)((unint64_t)*v398 | v144);
              }
LABEL_491:
              if (v143 >= 0x41 && v144)
                MEMORY[0x1CAA32F9C](v144, 0x1000C8000313F17);
              if (v407 >= 0x41 && v406)
                MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
              goto LABEL_495;
            }
LABEL_238:
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = v408;
            v416 = &v411;
            v129 = *(_QWORD *)(v40 - 64);
            v130 = *(unsigned __int8 *)(v129 + 16);
            if (v130 != 5)
            {
              if (v130 != 53)
                goto LABEL_339;
              v131 = *(_QWORD *)(v129 - 64);
              if ((llvm::APInt *)v131 != a1 && !sub_1C4E75A04(&v414, v131))
                goto LABEL_339;
              if ((sub_1C4E7B154((_QWORD **)&v415, *(_QWORD *)(v129 - 32)) & 1) == 0)
                goto LABEL_339;
LABEL_337:
              v216 = *(unsigned __int8 **)(v40 - 32);
              if (v216)
              {
                *v416 = v216;
                v217 = *(_WORD *)(v40 + 18) & 0x3F;
                goto LABEL_369;
              }
              goto LABEL_339;
            }
            if (*(_WORD *)(v129 + 18) != 25)
              goto LABEL_339;
            v214 = *(_DWORD *)(v129 + 20) & 0x7FFFFFF;
            v215 = *(_QWORD *)(v129 - 32 * v214);
            if ((llvm::APInt *)v215 != a1)
            {
              if (!sub_1C4E75A04(&v414, v215))
                goto LABEL_339;
              v214 = *(_DWORD *)(v129 + 20) & 0x7FFFFFF;
            }
            if (sub_1C4E7B154((_QWORD **)&v415, *(_QWORD *)(v129 - 32 * v214 + 32)))
              goto LABEL_337;
LABEL_339:
            v218 = *(_QWORD *)(v40 - 32);
            v219 = *(unsigned __int8 *)(v218 + 16);
            if (v219 != 5)
            {
              if (v219 != 53)
                goto LABEL_376;
              v220 = *(_QWORD *)(v218 - 64);
              if (v413 != v220 && !sub_1C4E75A04(&v414, v220))
                goto LABEL_376;
              if ((sub_1C4E7B154((_QWORD **)&v415, *(_QWORD *)(v218 - 32)) & 1) == 0)
                goto LABEL_376;
LABEL_367:
              v243 = *(unsigned __int8 **)(v40 - 64);
              if (!v243)
                goto LABEL_376;
              *v416 = v243;
              v217 = dword_1C85F6E70[*(_WORD *)(v40 + 18) & 0x3F];
LABEL_369:
              *(_DWORD *)__src = v217;
              if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v132)&& *(_QWORD *)v408 < v10)
              {
                sub_1C4F83784(&v404, v411, v399, &v421);
                sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
                if (v407 >= 0x41 && v406)
                  MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
                if (v405 >= 0x41 && v404)
                  MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
                if (v413 > 0x40)
                {
                  llvm::APInt::tcShiftRight((llvm::APInt *)__src, (unint64_t *)(((unint64_t)v413 + 63) >> 6), v408[0]);
                }
                else if ((_DWORD)v413 == v408[0])
                {
                  __src = 0;
                }
                else
                {
                  __src = (void *)((unint64_t)__src >> SLOBYTE(v408[0]));
                }
                v381 = *(unsigned int *)(a2 + 8);
                if (v381 > 0x40)
                {
                  v382 = *(_QWORD **)a2;
                  v383 = (uint64_t *)__src;
                  v384 = (unint64_t)(v381 + 63) >> 6;
                  do
                  {
                    v385 = *v383++;
                    *v382++ |= v385;
                    --v384;
                  }
                  while (v384);
                }
                else
                {
                  *(_QWORD *)a2 |= (unint64_t)__src;
                }
                if (v415 > 0x40)
                {
                  llvm::APInt::tcShiftRight(v414, (unint64_t *)(((unint64_t)v415 + 63) >> 6), v408[0]);
                }
                else if ((_DWORD)v415 == v408[0])
                {
                  v414 = 0;
                }
                else
                {
                  v414 = (llvm::APInt *)((unint64_t)v414 >> SLOBYTE(v408[0]));
                }
                v386 = *(unsigned int *)(a2 + 24);
                if (v386 <= 0x40)
                {
                  v376 = (unint64_t)v414;
                  goto LABEL_567;
                }
                v387 = *v398;
                v388 = v414;
                v389 = (unint64_t)(v386 + 63) >> 6;
                do
                {
                  v390 = *(_QWORD *)v388;
                  v388 = (llvm::APInt *)((char *)v388 + 8);
                  *v387++ |= v390;
                  --v389;
                }
                while (v389);
                goto LABEL_496;
              }
              goto LABEL_376;
            }
            if (*(_WORD *)(v218 + 18) != 25)
              goto LABEL_376;
            v241 = *(_DWORD *)(v218 + 20) & 0x7FFFFFF;
            v242 = *(_QWORD *)(v218 - 32 * v241);
            if (v413 != v242)
            {
              if (!sub_1C4E75A04(&v414, v242))
                goto LABEL_376;
              v241 = *(_DWORD *)(v218 + 20) & 0x7FFFFFF;
            }
            if (sub_1C4E7B154((_QWORD **)&v415, *(_QWORD *)(v218 - 32 * v241 + 32)))
              goto LABEL_367;
LABEL_376:
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = v408;
            v417 = &v411;
            v244 = sub_1C4FA234C((uint64_t)&v413, *(_QWORD *)(v40 - 64));
            v246 = *(_QWORD *)(v40 - 32);
            if (v244 && v246)
            {
              *v417 = (unsigned __int8 *)v246;
              v247 = *(_WORD *)(v40 + 18) & 0x3F;
            }
            else
            {
              if (!sub_1C4FA234C((uint64_t)&v413, v246) || (v248 = *(unsigned __int8 **)(v40 - 64)) == 0)
              {
LABEL_389:
                __src = &v409;
                v413 = (uint64_t)a1;
                v414 = a1;
                v415 = v408;
                v416 = &v411;
                v249 = sub_1C4FA2690(&v413, *(_QWORD *)(v40 - 64));
                v251 = *(_QWORD *)(v40 - 32);
                if (v249 && v251)
                {
                  *v416 = (unsigned __int8 *)v251;
                  v252 = *(_WORD *)(v40 + 18) & 0x3F;
LABEL_395:
                  *(_DWORD *)__src = v252;
                  if (llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v250)&& *(_QWORD *)v408 < v10)
                  {
                    sub_1C4F83784(&v404, v411, v399, &v421);
                    sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
                    if (v407 >= 0x41 && v406)
                      MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
                    if (v405 >= 0x41 && v404)
                      MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
                    v254 = v408[0];
                    v405 = v413;
                    if (v413 > 0x40)
                    {
                      v404 = operator new[]();
                      memcpy((void *)v404, __src, (((unint64_t)v405 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v404 = (unint64_t)__src;
                    }
                    sub_1C4888094((uint64_t)&v404, v254);
                    v348 = *(unsigned int *)(a2 + 8);
                    if (v348 > 0x40)
                    {
                      v349 = *(_QWORD **)a2;
                      v350 = (uint64_t *)v404;
                      v351 = (unint64_t)(v348 + 63) >> 6;
                      do
                      {
                        v352 = *v350++;
                        *v349++ |= v352;
                        --v351;
                      }
                      while (v351);
                    }
                    else
                    {
                      *(_QWORD *)a2 |= v404;
                    }
                    if (v405 >= 0x41 && v404)
                      MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
                    v353 = v408[0];
                    v405 = v415;
                    if (v415 > 0x40)
                    {
                      v404 = operator new[]();
                      memcpy((void *)v404, v414, (((unint64_t)v405 + 63) >> 3) & 0x3FFFFFF8);
                    }
                    else
                    {
                      v404 = (unint64_t)v414;
                    }
                    sub_1C4888094((uint64_t)&v404, v353);
                    v354 = *(unsigned int *)(a2 + 24);
                    if (v354 > 0x40)
                    {
                      v355 = *v398;
                      v356 = (uint64_t *)v404;
                      v357 = (unint64_t)(v354 + 63) >> 6;
                      do
                      {
                        v358 = *v356++;
                        *v355++ |= v358;
                        --v357;
                      }
                      while (v357);
                      goto LABEL_495;
                    }
                    goto LABEL_535;
                  }
                }
                else if (sub_1C4FA2690(&v413, v251))
                {
                  v253 = *(unsigned __int8 **)(v40 - 64);
                  if (v253)
                  {
                    *v416 = v253;
                    v252 = dword_1C85F6E70[*(_WORD *)(v40 + 18) & 0x3F];
                    goto LABEL_395;
                  }
                }
                __src = &v409;
                v413 = (uint64_t)a1;
                v414 = a1;
                v415 = v408;
                v417 = &v411;
                v255 = sub_1C4FA2794(&v413, *(_QWORD *)(v40 - 64));
                v256 = *(_QWORD *)(v40 - 32);
                if (v255 && v256)
                {
                  *v417 = (unsigned __int8 *)v256;
                  v257 = *(_WORD *)(v40 + 18) & 0x3F;
                }
                else
                {
                  if (!sub_1C4FA2794(&v413, v256))
                    goto LABEL_500;
                  v258 = *(unsigned __int8 **)(v40 - 64);
                  if (!v258)
                    goto LABEL_500;
                  *v417 = v258;
                  v257 = dword_1C85F6E70[*(_WORD *)(v40 + 18) & 0x3F];
                }
                *(_DWORD *)__src = v257;
                if (!llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), (const llvm::DominatorTree *)a4)|| *(_QWORD *)v408 >= v10)
                {
                  goto LABEL_500;
                }
                sub_1C4F83784(&v404, v411, v399, &v421);
                sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
                if (v407 >= 0x41 && v406)
                  MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
                if (v405 >= 0x41 && v404)
                  MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
                v259 = v408[0];
                v405 = v415;
                if (v415 > 0x40)
                {
                  v404 = operator new[]();
                  memcpy((void *)v404, v414, (((unint64_t)v405 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v404 = (unint64_t)v414;
                }
                sub_1C4888094((uint64_t)&v404, v259);
                v359 = *(unsigned int *)(a2 + 8);
                if (v359 > 0x40)
                {
                  v360 = *(_QWORD **)a2;
                  v361 = (uint64_t *)v404;
                  v362 = (unint64_t)(v359 + 63) >> 6;
                  do
                  {
                    v363 = *v361++;
                    *v360++ |= v363;
                    --v362;
                  }
                  while (v362);
                }
                else
                {
                  *(_QWORD *)a2 |= v404;
                }
                if (v405 >= 0x41 && v404)
                  MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
                v364 = v408[0];
                v405 = v413;
                if (v413 > 0x40)
                {
                  v404 = operator new[]();
                  memcpy((void *)v404, __src, (((unint64_t)v405 + 63) >> 3) & 0x3FFFFFF8);
                }
                else
                {
                  v404 = (unint64_t)__src;
                }
                sub_1C4888094((uint64_t)&v404, v364);
                v365 = *(unsigned int *)(a2 + 24);
                if (v365 > 0x40)
                {
                  v366 = *v398;
                  v367 = (uint64_t *)v404;
                  v368 = (unint64_t)(v365 + 63) >> 6;
                  do
                  {
                    v369 = *v367++;
                    *v366++ |= v369;
                    --v368;
                  }
                  while (v368);
LABEL_495:
                  if (v405 >= 0x41 && v404)
                    MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
                  goto LABEL_496;
                }
LABEL_535:
                *v398 = (void *)((unint64_t)*v398 | v404);
                goto LABEL_495;
              }
              *v417 = v248;
              v247 = dword_1C85F6E70[*(_WORD *)(v40 + 18) & 0x3F];
            }
            *(_DWORD *)__src = v247;
            if (!llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), v245)|| *(_QWORD *)v408 >= v10)
            {
              goto LABEL_389;
            }
            sub_1C4F83784(&v404, v411, v399, &v421);
            sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
            if (v407 >= 0x41 && v406)
              MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
            if (v405 >= 0x41 && v404)
              MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
            if (v415 > 0x40)
            {
              llvm::APInt::tcShiftRight(v414, (unint64_t *)(((unint64_t)v415 + 63) >> 6), v408[0]);
            }
            else if ((_DWORD)v415 == v408[0])
            {
              v414 = 0;
            }
            else
            {
              v414 = (llvm::APInt *)((unint64_t)v414 >> SLOBYTE(v408[0]));
            }
            v370 = *(unsigned int *)(a2 + 8);
            if (v370 > 0x40)
            {
              v371 = *(_QWORD **)a2;
              v372 = v414;
              v373 = (unint64_t)(v370 + 63) >> 6;
              do
              {
                v374 = *(_QWORD *)v372;
                v372 = (llvm::APInt *)((char *)v372 + 8);
                *v371++ |= v374;
                --v373;
              }
              while (v373);
            }
            else
            {
              *(_QWORD *)a2 |= (unint64_t)v414;
            }
            if (v413 > 0x40)
            {
              llvm::APInt::tcShiftRight((llvm::APInt *)__src, (unint64_t *)(((unint64_t)v413 + 63) >> 6), v408[0]);
            }
            else if ((_DWORD)v413 == v408[0])
            {
              __src = 0;
            }
            else
            {
              __src = (void *)((unint64_t)__src >> SLOBYTE(v408[0]));
            }
            v375 = *(unsigned int *)(a2 + 24);
            if (v375 <= 0x40)
            {
              v376 = (unint64_t)__src;
LABEL_567:
              *v398 = (void *)((unint64_t)*v398 | v376);
              goto LABEL_496;
            }
            v377 = *v398;
            v378 = (uint64_t *)__src;
            v379 = (unint64_t)(v375 + 63) >> 6;
            do
            {
              v380 = *v378++;
              *v377++ |= v380;
              --v379;
            }
            while (v379);
LABEL_496:
            v57 = v415;
LABEL_497:
            if (v57 >= 0x41)
            {
LABEL_579:
              v71 = v414;
              if (v414)
LABEL_580:
                MEMORY[0x1CAA32F9C](v71, 0x1000C8000313F17);
            }
LABEL_498:
            v66 = v413;
LABEL_499:
            if (v66 < 0x41)
              goto LABEL_500;
LABEL_577:
            if (__src)
              goto LABEL_214;
LABEL_500:
            v37 += 32;
            if (v37 == v38)
              goto LABEL_13;
            break;
          case '$':
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = (unsigned int *)&v411;
            if (!sub_1C4FA2898((uint64_t)&__src, v40)
              || !llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), (const llvm::DominatorTree *)a4))
            {
              goto LABEL_500;
            }
            sub_1C4F83784(&v404, v411, v399, &v421);
            sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
            if (v407 >= 0x41 && v406)
              MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
            if (v405 >= 0x41 && v404)
              MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
            v53 = v413;
            if (!(_DWORD)v413)
              goto LABEL_273;
            if (v413 > 0x40)
            {
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__src) == v53)
              {
LABEL_273:
                v161 = *(unsigned int *)(a2 + 8);
                if (v161 <= 0x40)
                {
                  *(_QWORD *)a2 = -1;
                  if ((_DWORD)v161)
                    goto LABEL_275;
LABEL_572:
                  v162 = 0;
                  goto LABEL_276;
                }
                memset(*(void **)a2, 255, ((unint64_t)(v161 + 63) >> 3) & 0x3FFFFFF8);
                LODWORD(v161) = *(_DWORD *)(a2 + 8);
                if (!(_DWORD)v161)
                  goto LABEL_572;
LABEL_275:
                v162 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v161;
                if (v161 >= 0x41)
                  v163 = (_QWORD *)(*(_QWORD *)a2
                                  + 8 * ((((unint64_t)v161 + 63) >> 6) - 1));
                else
LABEL_276:
                  v163 = (_QWORD *)a2;
                *v163 &= v162;
                v164 = *(unsigned int *)(a2 + 24);
                if (v164 <= 0x40)
                {
                  *v398 = (void *)-1;
                  if ((_DWORD)v164)
                    goto LABEL_279;
LABEL_575:
                  v165 = 0;
                  goto LABEL_280;
                }
                memset(*(void **)(a2 + 16), 255, ((unint64_t)(v164 + 63) >> 3) & 0x3FFFFFF8);
                LODWORD(v164) = *(_DWORD *)(a2 + 24);
                if (!(_DWORD)v164)
                  goto LABEL_575;
LABEL_279:
                v165 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v164;
                if (v164 >= 0x41)
                  v166 = (char *)*v398 + 8 * (((unint64_t)v164 + 63) >> 6) - 8;
                else
LABEL_280:
                  v166 = (_QWORD *)(a2 + 16);
                *v166 &= v165;
                goto LABEL_496;
              }
            }
            else if (__src == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v413))
            {
              goto LABEL_273;
            }
            v54 = sub_1C4F83FEC(v411, 0, v399, (uint64_t)&v421);
            v55 = v413;
            if (v54)
            {
              if (v413 > 0x40)
              {
                v56 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&__src);
              }
              else if ((_DWORD)v413)
              {
                v56 = __clz(~((_QWORD)__src << -(char)v413));
              }
              else
              {
                v56 = 0;
              }
              v212 = *(_DWORD *)(a2 + 8);
              v213 = v212 + ~v56;
            }
            else
            {
              if (v413 > 0x40)
              {
LABEL_329:
                v64 = llvm::APInt::countLeadingOnesSlowCase((llvm::APInt *)&__src);
              }
              else if ((_DWORD)v413)
              {
LABEL_116:
                v64 = __clz(~((_QWORD)__src << -v55));
              }
              else
              {
LABEL_328:
                v64 = 0;
              }
              v212 = *(_DWORD *)(a2 + 8);
              v213 = v212 - v64;
            }
            sub_1C4912E54((_QWORD *)a2, v213, v212);
            goto LABEL_496;
          case '%':
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = (unsigned int *)&v411;
            if (!sub_1C4FA2898((uint64_t)&__src, v40)
              || !llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), (const llvm::DominatorTree *)a4))
            {
              goto LABEL_500;
            }
            sub_1C4F83784(&v404, v411, v399, &v421);
            sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
            if (v407 >= 0x41 && v406)
              MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
            if (v405 >= 0x41 && v404)
              MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
            v55 = v413;
            if (v413 > 0x40)
              goto LABEL_329;
            if ((_DWORD)v413)
              goto LABEL_116;
            goto LABEL_328;
          case '&':
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = (unsigned int *)&v411;
            if (!sub_1C4FA2898((uint64_t)&__src, v40)
              || !llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), (const llvm::DominatorTree *)a4))
            {
              goto LABEL_500;
            }
            sub_1C4F83784(&v404, v411, v399, &v421);
            sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
            if (v407 >= 0x41 && v406)
              MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
            if (v405 >= 0x41 && v404)
              MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
            v65 = v415;
            if (!(_DWORD)v415)
              goto LABEL_286;
            if (v415 > 0x40)
            {
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&v414) == v65)
                goto LABEL_286;
            }
            else if (v414 == (llvm::APInt *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v415))
            {
              goto LABEL_286;
            }
            v167 = v413 - 1;
            p_src = &__src;
            if (v413 >= 0x41)
              p_src = (void **)((char *)__src + 8 * (v167 >> 6));
            if ((((unint64_t)*p_src >> v167) & 1) != 0)
            {
LABEL_286:
              v169 = *(_DWORD *)(a2 + 8);
              v170 = 1 << (v169 - 1);
              if (v169 >= 0x41)
                v171 = (_QWORD *)(*(_QWORD *)a2 + 8 * ((v169 - 1) >> 6));
              else
                v171 = (_QWORD *)a2;
              *v171 |= v170;
            }
            if (v65 >= 0x41)
              goto LABEL_579;
            goto LABEL_498;
          case '\'':
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = (unsigned int *)&v411;
            if (!sub_1C4FA2898((uint64_t)&__src, v40)
              || !llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), (const llvm::DominatorTree *)a4))
            {
              goto LABEL_500;
            }
            sub_1C4F83784(&v404, v411, v399, &v421);
            sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
            if (v407 >= 0x41 && v406)
              MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
            if (v405 >= 0x41 && v404)
              MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
            v66 = v413;
            v67 = (void **)((char *)__src + 8 * ((v413 - 1) >> 6));
            if (v413 < 0x41)
              v67 = &__src;
            if ((((unint64_t)*v67 >> (v413 - 1)) & 1) != 0)
            {
              v68 = *(_DWORD *)(a2 + 8);
              v69 = 1 << (v68 - 1);
              if (v68 >= 0x41)
                v70 = (_QWORD *)(*(_QWORD *)a2 + 8 * ((v68 - 1) >> 6));
              else
                v70 = (_QWORD *)a2;
              *v70 |= v69;
            }
            if (v415 < 0x41)
              goto LABEL_499;
            v71 = v414;
            if (!v414)
              goto LABEL_499;
            goto LABEL_580;
          case '(':
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = (unsigned int *)&v411;
            if (!sub_1C4FA2898((uint64_t)&__src, v40)
              || !llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), (const llvm::DominatorTree *)a4))
            {
              goto LABEL_500;
            }
            sub_1C4F83784(&v404, v411, v399, &v421);
            sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
            if (v407 >= 0x41 && v406)
              MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
            if (v405 >= 0x41 && v404)
              MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
            v52 = v413;
            if (!(_DWORD)v413)
              goto LABEL_265;
            if (v413 > 0x40)
            {
              if (llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)&__src) == v52)
                goto LABEL_265;
            }
            else if (__src == (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v413))
            {
              goto LABEL_265;
            }
            v155 = v415;
            v156 = (llvm::APInt **)((char *)v414 + 8 * (((_DWORD)v415 - 1) >> 6));
            if (v415 < 0x41)
              v156 = &v414;
            if ((((unint64_t)*v156 >> (v415 - 1)) & 1) != 0)
            {
LABEL_265:
              v157 = *(_DWORD *)(a2 + 24);
              v158 = 1 << (v157 - 1);
              v159 = *(_QWORD *)(a2 + 16) + 8 * ((v157 - 1) >> 6);
              v62 = v157 >= 0x41;
              v160 = (_QWORD *)(a2 + 16);
              if (v62)
                v160 = (_QWORD *)v159;
              *v160 |= v158;
              v155 = v415;
            }
            if (v155 >= 0x41 && v414)
            {
              MEMORY[0x1CAA32F9C](v414, 0x1000C8000313F17);
              v52 = v413;
            }
            if (v52 >= 0x41)
              goto LABEL_577;
            goto LABEL_500;
          case ')':
            __src = &v409;
            v413 = (uint64_t)a1;
            v414 = a1;
            v415 = (unsigned int *)&v411;
            if (!sub_1C4FA2898((uint64_t)&__src, v40)
              || !llvm::isValidAssumeForContext(v39, *((const llvm::Instruction **)a4 + 2), *((const llvm::Instruction **)a4 + 3), (const llvm::DominatorTree *)a4))
            {
              goto LABEL_500;
            }
            sub_1C4F83784(&v404, v411, v399, &v421);
            sub_1C4F9E728((llvm::APInt *)&v404, v10, &__src);
            if (v407 >= 0x41 && v406)
              MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
            if (v405 >= 0x41 && v404)
              MEMORY[0x1CAA32F9C](v404, 0x1000C8000313F17);
            v57 = v415;
            v58 = (llvm::APInt **)((char *)v414 + 8 * (((_DWORD)v415 - 1) >> 6));
            if (v415 < 0x41)
              v58 = &v414;
            if ((((unint64_t)*v58 >> (v415 - 1)) & 1) != 0)
            {
              v59 = *(_DWORD *)(a2 + 24);
              v60 = 1 << (v59 - 1);
              v61 = *(_QWORD *)(a2 + 16) + 8 * ((v59 - 1) >> 6);
              v62 = v59 >= 0x41;
              v63 = (_QWORD *)(a2 + 16);
              if (v62)
                v63 = (_QWORD *)v61;
              *v63 |= v60;
            }
            goto LABEL_497;
          default:
            goto LABEL_500;
        }
      }
    }
  }
LABEL_13:
  v16 = *(unsigned int *)(a2 + 8);
  if (v16 > 0x40)
  {
    v17 = 0;
    v18 = *(void **)a2;
    while ((*(_QWORD *)(*(_QWORD *)(a2 + 16) + v17) & *(_QWORD *)((_BYTE *)v18 + v17)) == 0)
    {
      v17 += 8;
      if ((((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8) == v17)
        return;
    }
    bzero(v18, ((unint64_t)(v16 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    if ((*(_QWORD *)(a2 + 16) & *(_QWORD *)a2) == 0)
      return;
    *(_QWORD *)a2 = 0;
  }
  v19 = *(unsigned int *)(a2 + 24);
  if (v19 > 0x40)
    bzero(*(void **)(a2 + 16), ((unint64_t)(v19 + 63) >> 3) & 0x3FFFFFF8);
  else
    *(_QWORD *)(a2 + 16) = 0;
  v20 = (llvm::OptimizationRemarkEmitter *)*((_QWORD *)a4 + 4);
  if (v20)
  {
    v21 = ****(_QWORD ****)v20;
    if (*(_QWORD *)(v21 + 128)
      || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(v21 + 72) + 48))(*(_QWORD *)(v21 + 72)))
    {
      v27 = *((_QWORD *)a4 + 2);
      v28 = *(_QWORD *)(*(_QWORD *)(v27 + 40) + 56);
      llvm::DiagnosticLocation::DiagnosticLocation((uint64_t)&v422 + 8, (const llvm::DebugLoc *)(v27 + 48));
      v29 = *(_QWORD *)(v27 + 40);
      DWORD2(v421) = 11;
      BYTE12(v421) = 2;
      *(_QWORD *)&v422 = v28;
      *((_QWORD *)&v423 + 1) = "value-tracking";
      v424 = "BadAssumption";
      v425 = 13;
      v426 = 0;
      v427 = 0;
      v428 = v430;
      v429 = 0x400000000;
      v430[256] = 0;
      v431 = -1;
      v432 = v29;
      *(_QWORD *)&v421 = &off_1E814E570;
      __src = "Detected conflicting code assumptions. Program may have undefined behavior, or compiler may have internal error.";
      v413 = 112;
      sub_1C53B17B4((uint64_t)&v428, (const void **)&__src);
      sub_1C61998EC((uint64_t)&__src, (uint64_t)&v421);
      __src = &off_1E814E570;
      *(_QWORD *)&v421 = &off_1E814E790;
      v30 = (char *)v428;
      if ((_DWORD)v429)
      {
        v31 = (unint64_t)v429 << 6;
        do
        {
          v32 = (void **)&v30[v31];
          if (v30[v31 - 17] < 0)
            operator delete(*(v32 - 5));
          if (*((char *)v32 - 41) < 0)
            operator delete(*(v32 - 8));
          v31 -= 64;
        }
        while (v31);
        v30 = (char *)v428;
      }
      if (v30 != v430)
        free(v30);
      llvm::OptimizationRemarkEmitter::emit(v20, (llvm::DiagnosticInfoOptimizationBase *)&__src);
      __src = &off_1E814E790;
      v33 = (char *)v418;
      if (v419)
      {
        v34 = (unint64_t)v419 << 6;
        do
        {
          v35 = (void **)&v33[v34];
          if (v33[v34 - 17] < 0)
            operator delete(*(v35 - 5));
          if (*((char *)v35 - 41) < 0)
            operator delete(*(v35 - 8));
          v34 -= 64;
        }
        while (v34);
        v33 = (char *)v418;
      }
      if (v33 != (char *)&v420)
        free(v33);
    }
  }
}

uint64_t *sub_1C4F9E380(uint64_t ***a1, uint64_t ***a2, int a3, llvm::APInt *this, uint64_t a5, uint64_t a6, int a7, uint64_t *a8)
{
  unsigned int v15;
  int v16;
  unsigned int v17;
  char v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  unsigned int v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  BOOL v40;
  BOOL v41;
  uint64_t v42;
  int v43;
  int v44;
  BOOL v45;
  int v46;
  int v47;
  const llvm::KnownBits *v48;
  uint64_t *result;
  uint64_t *v50;
  int v51;
  unsigned int v52;
  char v53;
  _QWORD *v54;
  unsigned int v55;
  char v56;
  _QWORD *v57;
  unsigned int v58;
  unsigned int v59;
  uint64_t *v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  uint64_t v67;
  int v68;

  v15 = a7 + 1;
  sub_1C4F82D44((int)a2, this);
  sub_1C4F82D44((int)a1, this);
  if (!a3)
  {
    v16 = 0;
    v20 = 0;
    goto LABEL_46;
  }
  if (a1 == a2)
  {
    v16 = 0;
    v20 = 1;
    goto LABEL_46;
  }
  v16 = 0;
  v17 = *(_DWORD *)(a5 + 8);
  v18 = v17 - 1;
  if (v17 >= 0x41)
    v19 = (_QWORD *)(*(_QWORD *)a5 + 8 * ((v17 - 1) >> 6));
  else
    v19 = (_QWORD *)a5;
  v20 = 1;
  v21 = (1 << v18) & *v19;
  v22 = v21 != 0;
  v23 = *(_DWORD *)(a6 + 8);
  v24 = v23 - 1;
  if (v23 >= 0x41)
    v25 = (uint64_t *)(*(_QWORD *)a6 + 8 * ((v23 - 1) >> 6));
  else
    v25 = (uint64_t *)a6;
  v26 = 1 << v24;
  v27 = *v25;
  v28 = *(_DWORD *)(a5 + 24);
  v29 = v28 - 1;
  v30 = *(_QWORD *)(a5 + 16);
  if (v28 >= 0x41)
    v31 = (_QWORD *)(v30 + 8 * (v29 >> 6));
  else
    v31 = (_QWORD *)(a5 + 16);
  v32 = *(_DWORD *)(a6 + 24);
  v33 = v32 - 1;
  v34 = *(_QWORD *)(a6 + 16);
  v35 = (_QWORD *)(v34 + 8 * ((v32 - 1) >> 6));
  if (v32 < 0x41)
    v35 = (_QWORD *)(a6 + 16);
  v36 = v26 & v27;
  v37 = (1 << v29) & *v31;
  if (!v36)
    v22 = 0;
  v38 = (1 << v33) & *v35;
  if (v38)
    v39 = v37 == 0;
  else
    v39 = 1;
  if (v39 && !v22)
  {
    if (v37)
      v40 = v36 == 0;
    else
      v40 = 1;
    if (v40)
    {
      v16 = 0;
      v20 = 0;
    }
    else
    {
      if (v32 > 0x40)
      {
        v63 = (1 << v33) & *v35;
        v64 = v21;
        v42 = *(_QWORD *)(a5 + 16);
        v43 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a6 + 16));
        v38 = v63;
        v21 = v64;
        v30 = v42;
        v41 = v43 == v32;
      }
      else
      {
        v41 = v34 == 0;
      }
      v44 = v41;
      v20 = 0;
      v16 = v44 ^ 1;
      if (((v44 ^ 1) & 1) != 0)
        goto LABEL_46;
    }
    if (v38 && v21)
    {
      if (v28 > 0x40)
        v45 = llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a5 + 16)) == v28;
      else
        v45 = v30 == 0;
      v46 = v45;
      v20 = 0;
      v16 = v46 ^ 1;
    }
  }
LABEL_46:
  v47 = v16;
  if (a1 == a2)
    v48 = (const llvm::KnownBits *)sub_1C4F8BE80(a1, a8[1], a8[2], a8[3], v15, 0);
  else
    v48 = 0;
  result = llvm::KnownBits::mul((const void **)a5, (const void **)a6, v48, (uint64_t *)&v65);
  if (*(_DWORD *)(a5 + 8) >= 0x41u)
  {
    result = *(uint64_t **)a5;
    if (*(_QWORD *)a5)
      result = (uint64_t *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
  }
  *(_QWORD *)a5 = v65;
  *(_DWORD *)(a5 + 8) = v66;
  v66 = 0;
  v50 = (uint64_t *)(a5 + 16);
  v51 = v47;
  if (*(_DWORD *)(a5 + 24) >= 0x41u && (result = (uint64_t *)*v50) != 0)
  {
    result = (uint64_t *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    v51 = v47;
    v62 = v66;
    *(_QWORD *)(a5 + 16) = v67;
    *(_DWORD *)(a5 + 24) = v68;
    v68 = 0;
    if (v62 >= 0x41)
    {
      result = v65;
      if (v65)
      {
        result = (uint64_t *)MEMORY[0x1CAA32F9C](v65, 0x1000C8000313F17);
        v51 = v47;
      }
    }
  }
  else
  {
    *(_QWORD *)(a5 + 16) = v67;
    *(_DWORD *)(a5 + 24) = v68;
  }
  if (v20)
  {
    v52 = *(_DWORD *)(a5 + 24);
    v53 = v52 - 1;
    v54 = (_QWORD *)(v52 >= 0x41 ? *(_QWORD *)(a5 + 16) + 8 * ((v52 - 1) >> 6) : a5 + 16);
    if (((*v54 >> v53) & 1) == 0)
    {
      v61 = *(_DWORD *)(a5 + 8);
      v59 = v61 - 1;
      if (v61 >= 0x41)
      {
        v60 = *(uint64_t **)a5;
        goto LABEL_67;
      }
      v50 = (uint64_t *)a5;
LABEL_68:
      *v50 |= 1 << v59;
      return result;
    }
  }
  if (v51)
  {
    v55 = *(_DWORD *)(a5 + 8);
    v56 = v55 - 1;
    v57 = (_QWORD *)(v55 >= 0x41 ? *(_QWORD *)a5 + 8 * ((v55 - 1) >> 6) : a5);
    if (((*v57 >> v56) & 1) == 0)
    {
      v58 = *(_DWORD *)(a5 + 24);
      v59 = v58 - 1;
      if (v58 >= 0x41)
      {
        v60 = (uint64_t *)*v50;
LABEL_67:
        v50 = &v60[v59 >> 6];
        goto LABEL_68;
      }
      goto LABEL_68;
    }
  }
  return result;
}

void sub_1C4F9E728(llvm::APInt *this@<X0>, unsigned int a2@<W1>, _DWORD *a3@<X8>)
{
  unsigned int v6;
  llvm::APInt *v7;
  const void **v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;

  v6 = *((_DWORD *)this + 2);
  if (v6 < a2)
  {
    llvm::APInt::zext(this, a2, (uint64_t)&v12);
    llvm::APInt::zext((llvm::APInt *)((char *)this + 16), a2, (uint64_t)&v10);
LABEL_3:
    a3[2] = v13;
    *(_QWORD *)a3 = v12;
    a3[6] = v11;
    *((_QWORD *)a3 + 2) = v10;
    return;
  }
  if (v6 > a2)
  {
    llvm::APInt::trunc(this, a2, (llvm::APInt *)&v12);
    llvm::APInt::trunc((llvm::APInt *)((char *)this + 16), a2, (llvm::APInt *)&v10);
    goto LABEL_3;
  }
  a3[2] = v6;
  if (v6 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)a3, (const void **)this);
  else
    *(_QWORD *)a3 = *(_QWORD *)this;
  v7 = (llvm::APInt *)(a3 + 4);
  v8 = (const void **)((char *)this + 16);
  v9 = *((_DWORD *)this + 6);
  a3[6] = v9;
  if (v9 > 0x40)
    llvm::APInt::initSlowCase(v7, v8);
  else
    *(_QWORD *)v7 = *v8;
}

void sub_1C4F9E82C(uint64_t a1, llvm::APInt *this, int8x8_t *a3, uint64_t a4, int a5, uint64_t a6, void (*a7)(uint64_t *__return_ptr, uint64_t, uint64_t, int8x8_t *), uint64_t a8)
{
  int v13;
  _QWORD *v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  void **v20;
  uint64_t v21;
  void **v22;
  int8x8_t *v23;
  unsigned int v24;
  void **v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  int8x8_t v29;
  uint8x8_t v30;
  __int32 v31;
  uint64_t v32;
  uint8x8_t v33;
  __int32 v34;
  __int32 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  unint64_t v41;
  int8x8_t *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int8x8_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  int v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  int8x8_t *v75;
  uint64_t v76;
  void *v77;
  unint64_t v78;
  int8x8_t *v79;
  int v80;
  uint64_t v81;
  unint64_t v82;
  int8x8_t *v83;
  int8x8_t v84;
  uint8x8_t v85;
  unint64_t v86;
  int8x8_t *v87;
  int8x8_t v88;
  uint8x8_t v89;
  int v90;
  int64_t v91;
  unint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  llvm::APInt *v99;
  uint64_t v100;
  char v101;
  const void **v102;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  unsigned int v110;
  int8x8_t v111;
  unsigned int v112;

  v13 = *(_DWORD *)(a1 + 20);
  if ((v13 & 0x40000000) != 0)
    v14 = *(_QWORD **)(a1 - 8);
  else
    v14 = (_QWORD *)(a1 - 32 * (v13 & 0x7FFFFFF));
  v15 = a3[1].u32[0];
  v16 = a5 + 1;
  sub_1C4F82D44(*v14, this);
  v17 = *(_DWORD *)(a1 + 20);
  if ((v17 & 0x40000000) != 0)
    v18 = *(_QWORD *)(a1 - 8);
  else
    v18 = a1 - 32 * (v17 & 0x7FFFFFF);
  sub_1C4F82D44(*(_QWORD *)(v18 + 32), this);
  v19 = a3[1].u32[0];
  v20 = (void **)a3;
  if (v19 < 0x40)
    goto LABEL_8;
  if (v19 != 64)
  {
    v20 = (void **)*a3;
LABEL_8:
    v21 = (uint64_t)*v20;
    v110 = 64;
    v109 = v21;
    goto LABEL_17;
  }
  sub_1C5DD14E0((uint64_t)&v109, (uint64_t)a3);
  if (v110 >= 0x41)
    v22 = (void **)v109;
  else
    v22 = (void **)&v109;
  v21 = (uint64_t)*v22;
  if (v110 >= 0x41 && v109)
    MEMORY[0x1CAA32F9C]();
LABEL_17:
  v23 = a3 + 2;
  v24 = a3[3].u32[0];
  v25 = (void **)&a3[2];
  v98 = a1;
  v99 = this;
  v97 = v16;
  if (v24 < 0x40)
  {
LABEL_18:
    v26 = (uint64_t)*v25;
    v110 = 64;
    v109 = v26;
    goto LABEL_27;
  }
  if (v24 != 64)
  {
    v25 = (void **)*v23;
    goto LABEL_18;
  }
  sub_1C5DD14E0((uint64_t)&v109, (uint64_t)&a3[2]);
  if (v110 >= 0x41)
    v27 = (void **)v109;
  else
    v27 = (void **)&v109;
  v26 = (uint64_t)*v27;
  if (v110 >= 0x41 && v109)
    MEMORY[0x1CAA32F9C]();
LABEL_27:
  v28 = a3[1].u32[0];
  if (v28 > 0x40)
  {
    v31 = 0;
    v82 = (unint64_t)(v28 + 63) >> 6;
    v29 = *a3;
    v83 = (int8x8_t *)*a3;
    do
    {
      v84 = *v83++;
      v85 = (uint8x8_t)vcnt_s8(v84);
      v85.i16[0] = vaddlv_u8(v85);
      v31 += v85.i32[0];
      --v82;
    }
    while (v82);
  }
  else
  {
    v29 = *a3;
    v30 = (uint8x8_t)vcnt_s8(*a3);
    v30.i16[0] = vaddlv_u8(v30);
    v31 = v30.i32[0];
  }
  v32 = a3[3].u32[0];
  if (v32 > 0x40)
  {
    v34 = 0;
    v86 = (unint64_t)(v32 + 63) >> 6;
    v87 = (int8x8_t *)*v23;
    do
    {
      v88 = *v87++;
      v89 = (uint8x8_t)vcnt_s8(v88);
      v89.i16[0] = vaddlv_u8(v89);
      v34 += v89.i32[0];
      --v86;
    }
    while (v86);
  }
  else
  {
    v33 = (uint8x8_t)vcnt_s8(*v23);
    v33.i16[0] = vaddlv_u8(v33);
    v34 = v33.i32[0];
  }
  v35 = v34 + v31;
  v110 = a3[1].u32[0];
  if (v28 <= 0x40)
  {
    v36 = ~*(_QWORD *)&v29;
    v37 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v28;
    if (!(_DWORD)v28)
      v37 = 0;
    v38 = v37 & v36;
    goto LABEL_35;
  }
  v109 = operator new[]();
  memcpy((void *)v109, *(const void **)a3, ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8);
  llvm::APInt::flipAllBitsSlowCase((uint64_t)&v109);
  v38 = v109;
  if (v110 < 0x41)
  {
LABEL_35:
    v39 = v38 >= v15;
    goto LABEL_36;
  }
  v90 = 0;
  v91 = ((unint64_t)v110 + 63) >> 6;
  do
  {
    if (v91-- < 1)
      break;
    v93 = *(_QWORD *)(v109 + 8 * v91);
    v90 += __clz(v93);
  }
  while (!v93);
  v94 = v110 | 0xFFFFFFC0;
  if ((v110 & 0x3F) == 0)
    v94 = 0;
  v39 = v110 - v90 - v94 >= 0x41 || *(_QWORD *)v109 >= v15;
  if (v109)
    MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
LABEL_36:
  if (v35 == (_DWORD)v28)
  {
    a7(&v109, a8, a4, a3);
    if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
      ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
    *a3 = (int8x8_t)v109;
    a3[1].i32[0] = v110;
    v110 = 0;
    if (a3[3].i32[0] >= 0x41u && *(_QWORD *)v23)
    {
      ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*v23, 0x1000C8000313F17);
      v95 = v110;
      a3[2] = v111;
      a3[3].i32[0] = v112;
      v112 = 0;
      if (v95 >= 0x41)
      {
        if (v109)
          MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
      }
    }
    else
    {
      a3[2] = v111;
      a3[3].i32[0] = v112;
    }
    v40 = a3[1].u32[0];
    if (v40 > 0x40)
    {
      v44 = 0;
      v45 = (void *)*a3;
      while ((*(_QWORD *)(*(_QWORD *)&a3[2] + v44) & *(_QWORD *)((_BYTE *)v45 + v44)) == 0)
      {
        v44 += 8;
        if ((((unint64_t)(v40 + 63) >> 3) & 0x3FFFFFF8) == v44)
          return;
      }
      memset(v45, 255, ((unint64_t)(v40 + 63) >> 3) & 0x3FFFFFF8);
      LODWORD(v40) = a3[1].i32[0];
      if ((_DWORD)v40)
        goto LABEL_43;
    }
    else
    {
      if ((*(_QWORD *)&a3[2] & *(_QWORD *)a3) == 0)
        return;
      *a3 = (int8x8_t)-1;
      if ((_DWORD)v40)
      {
LABEL_43:
        v41 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v40;
        if (v40 >= 0x41)
        {
          v42 = (int8x8_t *)(*(_QWORD *)a3 + 8 * ((((unint64_t)v40 + 63) >> 6) - 1));
          goto LABEL_45;
        }
LABEL_44:
        v42 = a3;
LABEL_45:
        *(_QWORD *)v42 &= v41;
LABEL_58:
        v46 = a3[3].u32[0];
        if (v46 <= 0x40)
        {
          *v23 = 0;
          return;
        }
        v47 = (void *)*v23;
LABEL_61:
        bzero(v47, ((unint64_t)(v46 + 63) >> 3) & 0x3FFFFFF8);
        return;
      }
    }
    v41 = 0;
    goto LABEL_44;
  }
  v43 = a3[1].u32[0];
  if (v39)
  {
    if (v43 > 0x40)
      bzero(*(void **)a3, ((unint64_t)(v43 + 63) >> 3) & 0x3FFFFFF8);
    else
      *a3 = 0;
    goto LABEL_58;
  }
  if (v43 > 0x40)
    bzero(*(void **)a3, ((unint64_t)(v43 + 63) >> 3) & 0x3FFFFFF8);
  else
    *a3 = 0;
  v48 = a3[3].u32[0];
  if (v48 <= 0x40)
  {
    *v23 = 0;
    if ((_DWORD)v15)
      goto LABEL_66;
LABEL_69:
    if (!v21)
    {
      v51 = -1;
      goto LABEL_71;
    }
LABEL_72:
    v101 = 0;
    goto LABEL_73;
  }
  bzero(*(void **)v23, ((unint64_t)(v48 + 63) >> 3) & 0x3FFFFFF8);
  if (!(_DWORD)v15)
    goto LABEL_69;
LABEL_66:
  v49 = (v15 - 1) | ((v15 - 1) >> 1) | (((v15 - 1) | ((v15 - 1) >> 1)) >> 2);
  v50 = v49 | (v49 >> 4) | ((v49 | (v49 >> 4)) >> 8);
  v51 = v50 | (v50 >> 16) | ((v50 | (v50 >> 16)) >> 32);
  if ((v51 & v21) != 0)
    goto LABEL_72;
LABEL_71:
  if ((v51 & v26) != 0)
    goto LABEL_72;
  v80 = *(_DWORD *)(v98 + 20);
  if ((v80 & 0x40000000) != 0)
    v81 = *(_QWORD *)(v98 - 8);
  else
    v81 = v98 - 32 * (v80 & 0x7FFFFFF);
  if (!sub_1C4F9F590(*(unsigned __int8 **)(v81 + 32), (uint64_t)v99, v97, a6))
    return;
  v101 = 1;
LABEL_73:
  v52 = a3[1].u32[0];
  if (v52 <= 0x40)
  {
    *a3 = (int8x8_t)-1;
    if ((_DWORD)v52)
      goto LABEL_75;
LABEL_146:
    v53 = 0;
    goto LABEL_76;
  }
  memset(*(void **)a3, 255, ((unint64_t)(v52 + 63) >> 3) & 0x3FFFFFF8);
  LODWORD(v52) = a3[1].i32[0];
  if (!(_DWORD)v52)
    goto LABEL_146;
LABEL_75:
  v53 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v52;
  if (v52 >= 0x41)
  {
    v54 = (int8x8_t *)(*(_QWORD *)a3 + 8 * ((((unint64_t)v52 + 63) >> 6) - 1));
    goto LABEL_77;
  }
LABEL_76:
  v54 = a3;
LABEL_77:
  *(_QWORD *)v54 &= v53;
  v55 = a3[3].u32[0];
  if (v55 > 0x40)
  {
    memset(*(void **)&a3[2], 255, ((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8);
    LODWORD(v55) = a3[3].i32[0];
  }
  else
  {
    *v23 = (int8x8_t)-1;
  }
  v102 = (const void **)&a3[2];
  v100 = a4;
  v96 = a6;
  if ((_DWORD)v55)
  {
    v56 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v55;
    if (v55 >= 0x41)
      v23 = (int8x8_t *)(*(_QWORD *)v23 + 8 * ((((unint64_t)v55 + 63) >> 6) - 1));
  }
  else
  {
    v56 = 0;
  }
  *(_QWORD *)v23 &= v56;
  if ((_DWORD)v15)
  {
    v57 = 0;
    v58 = ~v21;
    v59 = v101;
    do
    {
      if ((v57 & ~v58) == 0 && (v57 | v26) == v57)
      {
        if (v57)
          goto LABEL_87;
        if (!v101)
        {
          v64 = *(_DWORD *)(v98 + 20);
          if ((v64 & 0x40000000) != 0)
            v65 = *(_QWORD *)(v98 - 8);
          else
            v65 = v98 - 32 * (v64 & 0x7FFFFFF);
          v59 = sub_1C4F9F590(*(unsigned __int8 **)(v65 + 32), (uint64_t)v99, v97, v96);
        }
        v101 = 1;
        if (!v59)
        {
          v59 = 0;
LABEL_87:
          v106 = 32;
          v105 = v57 ^ 0xFFFFFFFFLL;
          v108 = 32;
          v107 = v57;
          a7(&v109, a8, v100, (int8x8_t *)&v105);
          v60 = a3[1].u32[0];
          if (v60 > 0x40)
          {
            v61 = (void *)operator new[]();
            memcpy(v61, *(const void **)a3, ((unint64_t)(v60 + 63) >> 3) & 0x3FFFFFF8);
            v66 = (uint64_t *)v109;
            v67 = (unint64_t)(v60 + 63) >> 6;
            v68 = v61;
            do
            {
              v69 = *v66++;
              *v68++ &= v69;
              --v67;
            }
            while (v67);
          }
          else
          {
            v61 = (void *)(v109 & *(_QWORD *)a3);
          }
          v62 = a3[3].u32[0];
          if (v62 > 0x40)
          {
            v63 = (void *)operator new[]();
            memcpy(v63, *v102, ((unint64_t)(v62 + 63) >> 3) & 0x3FFFFFF8);
            v70 = (uint64_t *)v111;
            v71 = (unint64_t)(v62 + 63) >> 6;
            v72 = v63;
            do
            {
              v73 = *v70++;
              *v72++ &= v73;
              --v71;
            }
            while (v71);
          }
          else
          {
            v63 = (void *)(*(_QWORD *)&v111 & (unint64_t)*v102);
          }
          if (a3[1].i32[0] >= 0x41u && *(_QWORD *)a3)
            ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32F9C])(*a3, 0x1000C8000313F17);
          *a3 = (int8x8_t)v61;
          a3[1].i32[0] = v60;
          if (a3[3].i32[0] >= 0x41u && *v102)
            MEMORY[0x1CAA32F9C](*v102, 0x1000C8000313F17);
          a3[2] = (int8x8_t)v63;
          a3[3].i32[0] = v62;
          if (v112 >= 0x41 && *(_QWORD *)&v111)
            MEMORY[0x1CAA32F9C](*(_QWORD *)&v111, 0x1000C8000313F17);
          if (v110 >= 0x41 && v109)
            MEMORY[0x1CAA32F9C](v109, 0x1000C8000313F17);
          if (v108 >= 0x41 && v107)
            MEMORY[0x1CAA32F9C](v107, 0x1000C8000313F17);
          if (v106 >= 0x41 && v105)
            MEMORY[0x1CAA32F9C](v105, 0x1000C8000313F17);
          goto LABEL_106;
        }
        v59 = 1;
      }
LABEL_106:
      ++v57;
    }
    while (v57 != v15);
  }
  v74 = a3[1].u32[0];
  if (v74 > 0x40)
  {
    v76 = 0;
    v77 = (void *)*a3;
    v75 = a3 + 2;
    while ((*(_QWORD *)(*(_QWORD *)&a3[2] + v76) & *(_QWORD *)((_BYTE *)v77 + v76)) == 0)
    {
      v76 += 8;
      if ((((unint64_t)(v74 + 63) >> 3) & 0x3FFFFFF8) == v76)
        return;
    }
    memset(v77, 255, ((unint64_t)(v74 + 63) >> 3) & 0x3FFFFFF8);
    LODWORD(v74) = a3[1].i32[0];
LABEL_133:
    if ((_DWORD)v74)
    {
      v78 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v74;
      if (v74 >= 0x41)
      {
        v79 = (int8x8_t *)(*(_QWORD *)a3 + 8 * ((((unint64_t)v74 + 63) >> 6) - 1));
        goto LABEL_136;
      }
    }
    else
    {
      v78 = 0;
    }
    v79 = a3;
LABEL_136:
    *(_QWORD *)v79 &= v78;
    v46 = a3[3].u32[0];
    if (v46 <= 0x40)
    {
      *v75 = 0;
      return;
    }
    v47 = (void *)*v75;
    goto LABEL_61;
  }
  v75 = a3 + 2;
  if ((*(_QWORD *)&a3[2] & *(_QWORD *)a3) != 0)
  {
    *a3 = (int8x8_t)-1;
    goto LABEL_133;
  }
}

llvm::APInt *sub_1C4F9F2D4(int a1, int a2, int a3, int a4, llvm::APInt *this, _DWORD *a6, uint64_t a7, int a8, uint64_t a9)
{
  llvm::APInt *result;
  BOOL v16;
  int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  size_t v23;
  size_t v24;
  int v25;
  int v26;
  llvm::APInt *v27;
  unsigned int v28;
  llvm::APInt *v29;
  unsigned int v30;
  llvm::APInt *v31;
  unsigned int v32;
  uint64_t v33;
  int v34;

  sub_1C4F82D44(a3, this);
  if (a6[2] > 0x40u)
  {
    v25 = a6[2];
    if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)a6) == v25)
    {
LABEL_3:
      result = (llvm::APInt *)(a6 + 4);
      if (a6[6] > 0x40u)
      {
        v26 = a6[6];
        result = (llvm::APInt *)llvm::APInt::countLeadingZerosSlowCase(result);
        v16 = (_DWORD)result == v26;
      }
      else
      {
        v16 = *(_QWORD *)result == 0;
      }
      v17 = v16;
      if (v17 && !a4)
        return result;
    }
  }
  else if (!*(_QWORD *)a6)
  {
    goto LABEL_3;
  }
  sub_1C4F82D44(a2, this);
  v18 = a6[2];
  v28 = v18;
  if (v18 > 0x40)
  {
    v23 = ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8;
    v19 = (void *)operator new[]();
    memcpy(v19, *(const void **)a6, v23);
  }
  else
  {
    v19 = *(void **)a6;
  }
  v27 = (llvm::APInt *)v19;
  v20 = a6[6];
  v30 = v20;
  if (v20 > 0x40)
  {
    v24 = ((unint64_t)(v20 + 63) >> 3) & 0x3FFFFFF8;
    v21 = (void *)operator new[]();
    memcpy(v21, *((const void **)a6 + 2), v24);
  }
  else
  {
    v21 = (void *)*((_QWORD *)a6 + 2);
  }
  v29 = (llvm::APInt *)v21;
  result = (llvm::APInt *)llvm::KnownBits::computeForAddSub(a1, a4, a7, (uint64_t)&v27, (uint64_t)&v31);
  if (a6[2] >= 0x41u)
  {
    result = *(llvm::APInt **)a6;
    if (*(_QWORD *)a6)
      result = (llvm::APInt *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
  }
  *(_QWORD *)a6 = v31;
  a6[2] = v32;
  v32 = 0;
  if (a6[6] >= 0x41u && (result = (llvm::APInt *)*((_QWORD *)a6 + 2)) != 0)
  {
    result = (llvm::APInt *)MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
    v22 = v32;
    *((_QWORD *)a6 + 2) = v33;
    a6[6] = v34;
    v34 = 0;
    if (v22 >= 0x41)
    {
      result = v31;
      if (v31)
        result = (llvm::APInt *)MEMORY[0x1CAA32F9C](v31, 0x1000C8000313F17);
    }
  }
  else
  {
    *((_QWORD *)a6 + 2) = v33;
    a6[6] = v34;
    v34 = 0;
  }
  if (v30 >= 0x41)
  {
    result = v29;
    if (v29)
      result = (llvm::APInt *)MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
  }
  if (v28 >= 0x41)
  {
    result = v27;
    if (v27)
      return (llvm::APInt *)MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
  }
  return result;
}

uint64_t sub_1C4F9F590(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  BOOL v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned __int8 **v16;
  unsigned __int8 *v17;
  unsigned __int8 **v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t **v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t **v36;
  int v37;
  llvm::Type *v38;
  _QWORD *v39;
  llvm::UndefValue *AggregateElement;
  llvm::UndefValue *v41;
  unsigned int v42;
  int v43;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  void *v58;
  _BOOL4 v59;
  int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t **v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  unsigned __int8 *v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  unsigned __int8 **v86;
  unsigned __int8 *v87;
  unsigned __int8 **v88;
  int v89;
  BOOL v90;
  unsigned int v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v98;
  int v99;
  unsigned __int8 **v100;
  unsigned __int8 *v101;
  const llvm::BasicBlock **v102;
  llvm::DominatorTree *v103;
  int v104;
  llvm::APInt *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v116;
  int v117;
  unsigned __int8 *v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  BOOL v124;
  unsigned int v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  char v130;
  const llvm::Value *v131;
  unsigned int v132;
  BOOL v133;
  int v134;
  unsigned __int8 *v135;
  BOOL v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  BOOL v141;
  uint64_t v142;
  llvm::APInt **v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unsigned int v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  int v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  _QWORD *v161;
  int v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  int v170;
  llvm::Type *v171;
  unsigned int PrimitiveSizeInBits;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  unsigned __int8 *v178;
  uint64_t v179;
  int v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t v184;
  int v185;
  unsigned __int8 *v186;
  uint64_t v187;
  unsigned int v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  unsigned __int8 *v192;
  uint64_t *v193;
  uint64_t v194;
  __int128 *v195;
  uint64_t v196;
  unsigned int v197;
  unint64_t v198;
  char v199;
  unsigned int v200;
  int v201;
  uint64_t **v202;
  uint64_t *v203;
  uint64_t *v204;
  void **v205;
  char *v206;
  int v207;
  unsigned __int8 *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  unsigned __int8 *v217;
  int v218;
  unsigned __int8 *v219;
  __int128 *v220;
  unsigned int v221;
  int v222;
  unint64_t *v223;
  unsigned int v224;
  unsigned __int8 *v225;
  unsigned int v226;
  unsigned __int8 *v227;
  unsigned int v228;
  char v229;
  void *v230;
  llvm::UndefValue **v231;
  unsigned __int8 *v232;
  unint64_t v233;
  llvm::UndefValue *v234;
  unsigned int *v235;
  uint64_t v236;
  uint64_t v237;
  llvm::UndefValue *v238;
  int v239;
  BOOL v240;
  unsigned int *v241;
  unsigned int *v242;
  unsigned int *v243;
  uint64_t v244;
  unint64_t v245;
  char v246;
  uint64_t v247;
  BOOL v248;
  unsigned int v249;
  char v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t *v256;
  uint64_t v257;
  _QWORD *v258;
  int v259;
  unsigned __int8 *v260;
  unsigned __int8 **v261;
  unsigned __int8 *v262;
  unint64_t v263;
  llvm::APInt *v264;
  unsigned int v265;
  _QWORD *v266;
  unint64_t v267;
  uint64_t *v268;
  unsigned __int8 *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  _BOOL4 v273;
  uint64_t ***v274;
  uint64_t v275;
  uint64_t v276;
  llvm **v277;
  llvm *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  void *v284;
  uint64_t v285;
  const llvm::DominatorTree *v286;
  uint64_t *v287;
  unsigned __int8 *v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  BOOL v294;
  unsigned int v295;
  void **v296;
  unsigned int v297;
  void **v298;
  unsigned int v299;
  uint64_t *v300;
  uint64_t v301;
  uint64_t v302;
  unint64_t v303;
  void *v304;
  llvm::APInt *v305;
  unsigned int v306;
  _QWORD *v307;
  unsigned int v308;
  int v309;
  int64_t v310;
  unint64_t v311;
  int v312;
  unsigned int v313;
  int v314;
  int64_t v315;
  unint64_t v316;
  unsigned int v317;
  unint64_t v318;
  uint64_t v319;
  void *v320;
  unsigned int v321;
  llvm::APInt *v322;
  unsigned int v323;
  unsigned int v324;
  uint64_t v325;
  llvm::APInt *v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  __int128 v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  unsigned __int8 *v334;
  uint64_t v335;
  unsigned __int8 *i;
  unsigned __int8 *v337;
  int v338;
  unsigned __int8 *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unsigned int v344;
  unint64_t v345;
  BOOL v346;
  uint64_t v347;
  uint64_t v348;
  llvm::APInt *v349;
  llvm::APInt *v350;
  unsigned __int8 *v351;
  llvm::APInt **v352;
  llvm::APInt *v353;
  unsigned __int8 *v354;
  void *v355[2];
  __int128 v356;
  _OWORD v357[2];
  void *v358;
  uint64_t v359;
  unint64_t v360;
  unsigned int v361;
  uint64_t v362;

  v362 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*(_QWORD *)a1 + 8) == 19)
    return 0;
  if (a1[16] > 0x14u)
    goto LABEL_5;
  if ((llvm::Constant::isNullValue((llvm::Constant *)a1) & 1) != 0)
    return 0;
  v32 = a1[16];
  if (v32 == 16)
    return 1;
  if (v32 != 5
    || *((unsigned __int16 *)a1 + 9) - 47 > 1
    || (sub_1C4768AD0(*(_QWORD *)a4, **(_QWORD **)&a1[-32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)]),
        v34 = v33,
        sub_1C4768AD0(*(_QWORD *)a4, *(_QWORD *)a1),
        v34 > v35))
  {
    v36 = *(uint64_t ***)a1;
    if (*(_QWORD *)a1 && *((_BYTE *)v36 + 8) == 18)
    {
      v37 = *((_DWORD *)v36 + 8);
      if (v37)
      {
        v38 = 0;
        v4 = 1;
        while (1)
        {
          v39 = (_QWORD *)(*(_DWORD *)(a2 + 8) >= 0x41u ? *(_QWORD *)a2 + 8 * (v38 >> 6) : a2);
          if (((*v39 >> (char)v38) & 1) != 0)
          {
            AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a1, v38);
            if (!AggregateElement)
              break;
            v41 = AggregateElement;
            if ((llvm::Constant::isNullValue(AggregateElement) & 1) != 0)
              break;
            v42 = *((unsigned __int8 *)v41 + 16);
            v136 = v42 > 0x10;
            v43 = (1 << v42) & 0x11800;
            if (v136 || v43 == 0)
              break;
          }
          v38 = (llvm::Type *)((_DWORD)v38 + 1);
          if (v37 == (_DWORD)v38)
            return v4;
        }
        return 0;
      }
      return 1;
    }
    v45 = a1[16];
    if (v45 > 3)
      return 0;
    if ((v45 == 1 || !llvm::Value::getMetadata((llvm::Value *)a1, 21))
      && (llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)a1) & 1) == 0
      && *(_DWORD *)(*(_QWORD *)a1 + 8) < 0x100u)
    {
      return 1;
    }
LABEL_5:
    v10 = a1[16] < 0x1Cu || *(_BYTE *)(a4 + 40) == 0;
    v349 = (llvm::APInt *)a2;
    if (v10 || (a1[23] & 0x20) == 0)
      goto LABEL_24;
    v11 = ***(_QWORD ***)a1;
    v355[0] = a1;
    v12 = *(_DWORD *)(v11 + 2496);
    if (v12)
    {
      v13 = *(_QWORD *)(v11 + 2480);
      v14 = v12 - 1;
      v15 = v14 & ((a1 >> 4) ^ (a1 >> 9));
      v16 = (unsigned __int8 **)(v13 + 40 * v15);
      v17 = *v16;
      if (*v16 == a1)
      {
LABEL_20:
        v22 = *((unsigned int *)v16 + 4);
        if ((_DWORD)v22)
        {
          v23 = v16[1] + 8;
          v24 = 16 * v22;
          while (*((_DWORD *)v23 - 2) != 4)
          {
            v23 += 2;
            v24 -= 16;
            if (!v24)
              goto LABEL_24;
          }
          v46 = *v23;
          if (*v23)
          {
            v47 = *(_DWORD *)(*(_QWORD *)a1 + 8);
            if (*(_QWORD *)a1 && *(_DWORD *)(*(_QWORD *)a1 + 8) == 13)
            {
              LODWORD(v359) = v47 >> 8;
              if (v47 >> 8 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v358, 0, 0);
              else
                v358 = 0;
              v347 = a4;
              v49 = *(unsigned int *)(v46 + 8);
              if (v49 < 2)
              {
                v346 = 0;
              }
              else
              {
                v50 = 0;
                v343 = v46;
                v345 = v49 >> 1;
                v346 = 1;
                v51 = v46;
                do
                {
                  v52 = (_QWORD *)(v51 - 8 * *(unsigned int *)(v46 + 8));
                  v53 = *(_QWORD *)(*v52 + 128);
                  v54 = *(_QWORD *)(v52[1] + 128);
                  v55 = *(unsigned int *)(v53 + 32);
                  if (v55 > 0x40)
                  {
                    v56 = (void *)operator new[]();
                    memcpy(v56, *(const void **)(v53 + 24), ((unint64_t)(v55 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    v56 = *(void **)(v53 + 24);
                  }
                  v57 = *(unsigned int *)(v54 + 32);
                  if (v57 > 0x40)
                  {
                    v58 = (void *)operator new[]();
                    v46 = v343;
                    memcpy(v58, *(const void **)(v54 + 24), ((unint64_t)(v57 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    v58 = *(void **)(v54 + 24);
                  }
                  LODWORD(v355[1]) = v55;
                  v355[0] = v56;
                  DWORD2(v356) = v57;
                  *(_QWORD *)&v356 = v58;
                  v59 = llvm::ConstantRange::contains((llvm::ConstantRange *)v355, (const llvm::APInt *)&v358);
                  if (v57 >= 0x41 && v58 != 0)
                  {
                    MEMORY[0x1CAA32F9C](v58, 0x1000C8000313F17);
                    LODWORD(v55) = v355[1];
                  }
                  if (v55 >= 0x41 && v355[0])
                    MEMORY[0x1CAA32F9C](v355[0], 0x1000C8000313F17);
                  if (v59)
                    break;
                  v346 = ++v50 < v345;
                  v51 += 16;
                }
                while (v345 != v50);
              }
              if (v359 >= 0x41 && v358)
                MEMORY[0x1CAA32F9C](v358, 0x1000C8000313F17);
              a4 = v347;
              if (!v346)
                return 1;
            }
          }
        }
LABEL_24:
        v25 = *(_QWORD *)(a4 + 8);
        if (!v25)
          goto LABEL_101;
        v26 = *(_QWORD *)(a4 + 16);
        if (!v26)
          goto LABEL_101;
        v27 = *(uint64_t ***)a1;
        if (*(_BYTE *)(*(_QWORD *)a1 + 8) != 15)
        {
LABEL_96:
          if (!*(_BYTE *)(v25 + 184))
            llvm::AssumptionCache::scanFunction((llvm::AssumptionCache *)v25);
          v62 = *(_QWORD *)(v25 + 160);
          v63 = *(_DWORD *)(v25 + 176);
          if (v63)
          {
            v71 = v63 - 1;
            v72 = (v63 - 1) & ((a1 >> 4) ^ (a1 >> 9));
            v64 = v62 + 88 * v72;
            v73 = *(unsigned __int8 **)(v64 + 24);
            if (v73 == a1)
              goto LABEL_100;
            v74 = 1;
            while (v73 != (unsigned __int8 *)-4096)
            {
              v75 = v72 + v74++;
              v72 = v75 & v71;
              v64 = v62 + 88 * (v75 & v71);
              v73 = *(unsigned __int8 **)(v64 + 24);
              if (v73 == a1)
                goto LABEL_100;
            }
          }
          v64 = v62 + 88 * v63;
LABEL_100:
          if (v64 != v62 + 88 * v63)
          {
            v275 = *(unsigned int *)(v64 + 48);
            if ((_DWORD)v275)
            {
              v276 = 32 * v275;
              v277 = (llvm **)(*(_QWORD *)(v64 + 40) + 16);
              while (1)
              {
                v278 = *v277;
                if (!*v277)
                  goto LABEL_570;
                v279 = a4;
                v358 = 0;
                LODWORD(v351) = 0;
                v280 = *((_QWORD *)v278 - 4 * (*((_DWORD *)v278 + 5) & 0x7FFFFFF));
                v355[0] = &v351;
                v355[1] = a1;
                *(_QWORD *)&v356 = a1;
                *((_QWORD *)&v356 + 1) = &v358;
                if (!v280 || *(_BYTE *)(v280 + 16) != 81)
                  goto LABEL_633;
                v281 = *(_QWORD *)(v280 - 64);
                if ((unsigned __int8 *)v281 != a1 && (sub_1C4E75A04(&v356, v281) & 1) == 0)
                  break;
                v282 = *(_QWORD *)(v280 - 32);
                if (!v282)
                {
                  v284 = 0;
                  goto LABEL_564;
                }
                **((_QWORD **)&v356 + 1) = v282;
                v283 = *(_WORD *)(v280 + 18) & 0x3F;
LABEL_568:
                *(_DWORD *)v355[0] = v283;
                a4 = v279;
                if (sub_1C4FA19C4(v351, (unsigned __int8 *)v358)
                  && llvm::isValidAssumeForContext(v278, *(const llvm::Instruction **)(v279 + 16), *(const llvm::Instruction **)(v279 + 24), v286))
                {
                  return 1;
                }
LABEL_570:
                v277 += 4;
                v276 -= 32;
                if (!v276)
                  goto LABEL_101;
              }
              v284 = *(void **)(v280 - 32);
LABEL_564:
              if (v355[1] != v284 && !sub_1C4E75A04(&v356, (uint64_t)v284)
                || (v285 = *(_QWORD *)(v280 - 64)) == 0)
              {
LABEL_633:
                a4 = v279;
                goto LABEL_101;
              }
              **((_QWORD **)&v356 + 1) = v285;
              v283 = dword_1C85F6E70[*(_WORD *)(v280 + 18) & 0x3F];
              goto LABEL_568;
            }
          }
LABEL_101:
          if (a3 > 5)
            return 0;
          v65 = (a3 + 1);
          v66 = *(uint64_t ***)a1;
          if (!*(_QWORD *)a1 || *((_BYTE *)v66 + 8) != 15)
            goto LABEL_176;
          v67 = a1[16];
          if (v67 != 21)
          {
            if (v67 == 59)
            {
              if (!*(_DWORD *)(*(_QWORD *)a4 + 4))
                return 1;
              goto LABEL_176;
            }
LABEL_125:
            if (v67 != 60)
            {
LABEL_146:
              if (v67 < 0x1C)
                goto LABEL_176;
              v95 = v67 - 33;
              v136 = v95 > 0x33;
              v96 = (1 << v95) & 0x8000000000041;
              if (v136 || v96 == 0)
                goto LABEL_176;
              if (llvm::CallBase::isReturnNonNull((llvm::CallBase *)a1))
                return 1;
              LODWORD(v358) = 0;
              if (llvm::AttributeList::hasAttrSomewhere((uint64_t *)a1 + 8, 46, (int *)&v358)
                || (v98 = *((_QWORD *)a1 - 4)) != 0
                && !*(_BYTE *)(v98 + 16)
                && *(_QWORD *)(v98 + 24) == *((_QWORD *)a1 + 9)
                && (v355[0] = *(void **)(v98 + 112),
                    llvm::AttributeList::hasAttrSomewhere((uint64_t *)v355, 46, (int *)&v358)))
              {
                v176 = *(_QWORD *)&a1[32 * ((_DWORD)v358 - 1) + -32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
                if (v176)
                  return sub_1C4F84D74(v176, v65, a4);
                v98 = *((_QWORD *)a1 - 4);
                if (!v98)
                  goto LABEL_176;
              }
              else if (!v98)
              {
                goto LABEL_176;
              }
              if (*(_BYTE *)(v98 + 16) || *(_QWORD *)(v98 + 24) != *((_QWORD *)a1 + 9))
                goto LABEL_176;
              v99 = *(_DWORD *)(v98 + 36);
              if (v99 > 441)
              {
                if (v99 != 1260 && v99 != 442)
                  goto LABEL_176;
              }
              else if (v99 != 166 && v99 != 290)
              {
                goto LABEL_176;
              }
              v176 = *(_QWORD *)&a1[-32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
              if (v176)
                return sub_1C4F84D74(v176, v65, a4);
LABEL_176:
              v102 = *(const llvm::BasicBlock ***)(a4 + 16);
              v103 = *(llvm::DominatorTree **)(a4 + 24);
              v104 = a1[16];
              if (v104 < 0x15 || v102 == 0 || v103 == 0)
              {
                v107 = v349;
              }
              else
              {
                v109 = *((_QWORD *)a1 + 1);
                v107 = v349;
                if (v109)
                {
                  v344 = v65;
                  v110 = 0;
                  v348 = a4;
                  while (v110 < dword_1ED7F4850)
                  {
                    v111 = *(_QWORD *)(v109 + 24);
                    v112 = *(unsigned __int8 *)(v111 + 16);
                    if (v112 >= 0x1C)
                    {
                      v113 = v112 - 33;
                      v136 = v113 > 0x33;
                      v114 = (1 << v113) & 0x8000000000041;
                      if (!v136 && v114 != 0)
                      {
                        v116 = *(_QWORD *)(v111 - 32);
                        if (v116)
                        {
                          if (!*(_BYTE *)(v116 + 16) && *(_QWORD *)(v116 + 24) == *(_QWORD *)(v111 + 72))
                          {
                            if ((*(_WORD *)(v116 + 18) & 1) == 0)
                            {
                              v145 = *(_QWORD *)(v116 + 88);
                              goto LABEL_285;
                            }
                            llvm::Function::BuildLazyArguments(*(llvm::Function **)(v111 - 32));
                            v145 = *(_QWORD *)(v116 + 88);
                            if ((*(_WORD *)(v116 + 18) & 1) != 0)
                            {
                              llvm::Function::BuildLazyArguments((llvm::Function *)v116);
                              v146 = *(_QWORD *)(v116 + 88);
                            }
                            else
                            {
LABEL_285:
                              v146 = v145;
                            }
                            v147 = v146 + 40 * *(_QWORD *)(v116 + 96);
                            while (v145 != v147)
                            {
                              v148 = *(unsigned int *)(v145 + 32);
                              if (*(unsigned __int8 **)(v111 - 32 * (*(_DWORD *)(v111 + 20) & 0x7FFFFFF) + 32 * v148) == a1)
                              {
                                v149 = *(_DWORD *)(*(_QWORD *)v145 + 8);
                                if (v149 == 15)
                                {
                                  v150 = *(_QWORD *)(v145 + 24);
                                  v151 = *(_QWORD *)(v150 + 112);
                                  if (v151)
                                  {
                                    v152 = v148 + 2;
                                    if (v152 < *(_DWORD *)(v151 + 8))
                                    {
                                      v153 = *(_QWORD *)(v151 + 8 * v152 + 40);
                                      if (v153)
                                      {
                                        v154 = *(char *)(v153 + 16);
                                        if (v154 < 0 && (v154 & 0x10) != 0)
                                          goto LABEL_311;
                                        if ((*(_BYTE *)(v153 + 21) & 0x10) != 0)
                                        {
                                          v155 = (_QWORD *)(v153 + 48);
                                          v156 = 8 * *(unsigned int *)(v153 + 8) - 8 * *(unsigned int *)(v153 + 32);
                                          if (v156)
                                          {
                                            v157 = v156 >> 3;
                                            do
                                            {
                                              v158 = v157 >> 1;
                                              v159 = &v155[v157 >> 1];
                                              v160 = *v159;
                                              if (*v159)
                                                LODWORD(v160) = *(_DWORD *)(v160 + 12);
                                              v161 = v159 + 1;
                                              v157 += ~v158;
                                              if ((int)v160 < 76)
                                                v155 = v161;
                                              else
                                                v157 = v158;
                                            }
                                            while (v157);
                                          }
                                          if (*(_QWORD *)(*v155 + 16))
                                          {
                                            if ((v149 & 0xFE) != 0x12)
                                            {
                                              if (v150)
                                                goto LABEL_307;
                                              goto LABEL_308;
                                            }
                                            v149 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v145 + 16) + 8);
                                            if (!v150)
                                              goto LABEL_308;
LABEL_307:
                                            if ((*(_BYTE *)(v151 + 17) & 1) == 0)
                                            {
LABEL_308:
                                              if (v149 <= 0xFF)
                                              {
LABEL_311:
                                                if (llvm::DominatorTree::dominates(v103, (const llvm::Value *)v111, (const llvm::Instruction *)v102))
                                                {
                                                  return 1;
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              v145 += 40;
                              continue;
                            }
                          }
                        }
                      }
                    }
                    v117 = *(unsigned __int8 *)(v111 + 16);
                    if ((v117 - 62) >= 0xFFFFFFFE)
                      v118 = *(unsigned __int8 **)(v111 - 32);
                    else
                      v118 = 0;
                    if (v118 == a1)
                    {
                      v119 = *(_DWORD *)(*(_QWORD *)a1 + 8);
                      if ((v119 & 0xFE) == 0x12)
                        v119 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a1 + 16) + 8);
                      v120 = *(_QWORD *)(*(_QWORD *)(v111 + 40) + 56);
                      if ((!v120 || (v121 = *(_QWORD *)(v120 + 112)) == 0 || (*(_BYTE *)(v121 + 17) & 1) == 0)
                        && v119 <= 0xFF)
                      {
                        if (llvm::DominatorTree::dominates(v103, (const llvm::Value *)v111, (const llvm::Instruction *)v102))
                        {
                          return 1;
                        }
                        v117 = *(unsigned __int8 *)(v111 + 16);
                      }
                    }
                    if (v117 == 81)
                    {
                      v122 = *(unsigned __int8 **)(v111 - 64);
                      v123 = *(unsigned __int8 **)(v111 - 32);
                      if (v122 == a1 && v123)
                      {
                        v125 = *(_WORD *)(v111 + 18) & 0x3F;
                        v126 = sub_1C4FA19C4(v125, *(unsigned __int8 **)(v111 - 32));
                        if ((v126 & 1) != 0 || sub_1C4FA19C4(dword_1C85F6F18[v125], v123))
                        {
                          v358 = &v360;
                          v359 = 0x400000000;
                          v355[0] = v357;
                          v355[1] = v357;
                          *(_QWORD *)&v356 = 4;
                          DWORD2(v356) = 0;
                          v127 = *(_QWORD *)(v111 + 8);
                          if (v127)
                          {
                            while (1)
                            {
                              v128 = *(_QWORD *)(v127 + 24);
                              sub_1C4774094((llvm::SmallPtrSetImplBase *)v355, v128);
                              v129 = v359;
                              if (v130)
                              {
                                if (v359 >= HIDWORD(v359))
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v358, (uint64_t)&v360, v359 + 1, 8);
                                  v129 = v359;
                                }
                                *((_QWORD *)v358 + v129) = v128;
                                v129 = v359 + 1;
                                LODWORD(v359) = v359 + 1;
                              }
                              if (v129)
                                break;
LABEL_272:
                              v127 = *(_QWORD *)(v127 + 8);
                              if (!v127)
                                goto LABEL_275;
                            }
                            while (2)
                            {
                              v131 = (const llvm::Value *)*((_QWORD *)v358 + v129 - 1);
                              LODWORD(v359) = v129 - 1;
                              v132 = *((unsigned __int8 *)v131 + 16);
                              if (v126)
                              {
                                if (v131)
                                  v133 = v132 >= 0x1C;
                                else
                                  v133 = 0;
                                if (!v133)
                                  goto LABEL_257;
                                v134 = *(_DWORD *)(*(_QWORD *)v131 + 8);
                                if ((v134 & 0xFE) == 0x12)
                                  v134 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v131 + 16) + 8);
                                if (v134 != 269)
                                  goto LABEL_257;
                                if (v132 == 56)
                                {
LABEL_246:
                                  while (1)
                                  {
                                    v131 = (const llvm::Value *)*((_QWORD *)v131 + 1);
                                    if (!v131)
                                      break;
                                    v137 = *((_QWORD *)v131 + 3);
                                    sub_1C4774094((llvm::SmallPtrSetImplBase *)v355, v137);
                                    if (v138)
                                    {
                                      v139 = v359;
                                      if (v359 >= (unint64_t)HIDWORD(v359))
                                      {
                                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v358, (uint64_t)&v360, v359 + 1, 8);
                                        v139 = v359;
                                      }
                                      *((_QWORD *)v358 + v139) = v137;
                                      LODWORD(v359) = v359 + 1;
                                    }
                                  }
                                }
                                else
                                {
                                  if (v132 != 85)
                                    goto LABEL_257;
                                  v135 = (unsigned __int8 *)*((_QWORD *)v131 - 4);
                                  if (v135)
                                    v136 = v135[16] > 0x14u;
                                  else
                                    v136 = 1;
                                  if (!v136)
                                  {
                                    if ((llvm::Constant::isNullValue((llvm::Constant *)v135) & 1) != 0)
                                      goto LABEL_246;
                                    v132 = *((unsigned __int8 *)v131 + 16);
LABEL_257:
                                    if (v131)
                                      v141 = v132 == 30;
                                    else
                                      v141 = 0;
                                    if (!v141)
                                    {
                                      if (v131)
                                      {
                                        if (v132 == 84)
                                        {
                                          v142 = *((_QWORD *)v131 - 4);
                                          if (v142)
                                          {
                                            if (!*(_BYTE *)(v142 + 16)
                                              && *(_QWORD *)(v142 + 24) == *((_QWORD *)v131 + 9)
                                              && *(_DWORD *)(v142 + 36) == 125
                                              && llvm::DominatorTree::dominates(v103, v131, (const llvm::Instruction *)v102))
                                            {
                                              goto LABEL_274;
                                            }
                                          }
                                        }
                                      }
                                      goto LABEL_271;
                                    }
LABEL_269:
                                    v143 = (llvm::APInt **)*((_QWORD *)v131 + 4 * v126 - 8);
                                    v351 = (unsigned __int8 *)*((_QWORD *)v131 + 5);
                                    v352 = v143;
                                    if (llvm::BasicBlockEdge::isSingleEdge((llvm::BasicBlockEdge *)&v351)
                                      && llvm::DominatorTree::dominates(v103, (const llvm::BasicBlockEdge *)&v351, v102[5]))
                                    {
LABEL_274:
                                      v144 = 0;
                                      goto LABEL_276;
                                    }
                                  }
                                }
                              }
                              else if (v132 == 30 && v131 != 0)
                              {
                                goto LABEL_269;
                              }
LABEL_271:
                              v129 = v359;
                              if (!(_DWORD)v359)
                                goto LABEL_272;
                              continue;
                            }
                          }
LABEL_275:
                          v144 = 1;
LABEL_276:
                          if (v355[1] != v355[0])
                            free(v355[1]);
                          if (v358 != &v360)
                            free(v358);
                          if (!v144)
                            return 1;
                        }
                      }
                      else
                      {
                        if (v122)
                          v124 = v123 == a1;
                        else
                          v124 = 0;
                        if (v124)
                          __asm { BR              X8 }
                      }
                    }
                    ++v110;
                    v109 = *(_QWORD *)(v109 + 8);
                    a4 = v348;
                    if (!v109)
                      break;
                  }
                  v104 = a1[16];
                  v107 = v349;
                  v65 = v344;
                }
              }
              if (*(_BYTE *)(*(_QWORD *)a1 + 8) != 15)
                goto LABEL_326;
              if (v104 > 75)
              {
                if (v104 == 76)
                {
                  sub_1C4768AD0(*(_QWORD *)a4, **((_QWORD **)a1 - 4));
                  v164 = v163;
                  sub_1C4768AD0(*(_QWORD *)a4, *(_QWORD *)a1);
                  if (v164 <= v165)
                    goto LABEL_339;
                  v104 = a1[16];
LABEL_326:
                  if (v104 != 75)
                    goto LABEL_328;
                  sub_1C4768AD0(*(_QWORD *)a4, **((_QWORD **)a1 - 4));
                  v167 = v166;
                  sub_1C4768AD0(*(_QWORD *)a4, *(_QWORD *)a1);
                  if (v167 > v168)
                    goto LABEL_328;
LABEL_339:
                  v176 = *((_QWORD *)a1 - 4);
                  return sub_1C4F84D74(v176, v65, a4);
                }
                if (v104 != 77)
                  goto LABEL_326;
              }
              else
              {
                if (v104 != 5)
                {
                  if (v104 == 62)
                  {
                    v108 = *(_QWORD *)(*((_QWORD *)a1 + 5) + 56);
                    goto LABEL_360;
                  }
                  goto LABEL_326;
                }
                v162 = *((unsigned __int16 *)a1 + 9);
                if (v162 == 34)
                {
                  v108 = 0;
LABEL_360:
                  if ((a1[17] & 2) != 0)
                  {
                    v185 = *((_DWORD *)a1 + 5);
                    if ((v185 & 0x40000000) != 0)
                      v186 = (unsigned __int8 *)*((_QWORD *)a1 - 1);
                    else
                      v186 = &a1[-32 * (v185 & 0x7FFFFFF)];
                    v187 = **(_QWORD **)v186;
                    v188 = *(_DWORD *)(v187 + 8);
                    if ((v188 & 0xFE) == 0x12)
                      v188 = *(_DWORD *)(**(_QWORD **)(v187 + 16) + 8);
                    if (v108)
                    {
                      v189 = *(_QWORD *)(v108 + 112);
                      if (v189)
                      {
                        v4 = 0;
                        if ((*(_BYTE *)(v189 + 17) & 1) != 0 || v188 > 0xFF)
                          return v4;
LABEL_420:
                        if ((v185 & 0x40000000) != 0)
                          v212 = (uint64_t *)*((_QWORD *)a1 - 1);
                        else
                          v212 = (uint64_t *)&a1[-32 * (v185 & 0x7FFFFFF)];
                        if ((sub_1C4F84D74(*v212, v65, a4) & 1) == 0)
                        {
                          v213 = 24;
                          if (a1[16] == 62)
                            v213 = 64;
                          v214 = *(_QWORD *)&a1[v213];
                          v215 = *((_DWORD *)a1 + 5);
                          if ((v215 & 0x40000000) != 0)
                          {
                            v217 = (unsigned __int8 *)*((_QWORD *)a1 - 1);
                            v216 = v215 & 0x7FFFFFF;
                          }
                          else
                          {
                            v216 = v215 & 0x7FFFFFF;
                            v217 = &a1[-32 * v216];
                          }
                          v230 = (void *)(v214 | 4);
                          v231 = (llvm::UndefValue **)(v217 + 32);
                          v355[0] = v217 + 32;
                          v355[1] = v230;
                          if (v216 != 1)
                          {
                            v232 = &v217[32 * v216];
                            while (1)
                            {
                              v233 = (unint64_t)v355[1] & 0xFFFFFFFFFFFFFFF8;
                              if (((uint64_t)v355[1] & 4) != 0 || !v233)
                              {
                                v237 = *(_QWORD *)a4;
                                if (((uint64_t)v355[1] & 4) == 0 || !v233)
                                {
                                  v238 = *v231;
                                  v239 = *((unsigned __int8 *)*v231 + 16);
                                  if (v238)
                                    v240 = v239 == 16;
                                  else
                                    v240 = 0;
                                  if (!v240)
                                    v238 = llvm::Constant::getAggregateElement(v238, 0);
                                  v243 = (unsigned int *)*((_QWORD *)v238 + 3);
                                  v241 = (unsigned int *)((char *)v238 + 24);
                                  v242 = v243;
                                  if (v241[2] < 0x41)
                                    v242 = v241;
                                  v233 = *(_QWORD *)(*(_QWORD *)(v233 + 16) + 8 * *v242);
                                }
                                sub_1C4768AD0(v237, v233);
                                v245 = (unint64_t)(v244 + 7) >> 3;
                                llvm::DataLayout::getAlignment(v237, v233);
                                if ((v245 + ~(-1 << v246)) >> v246)
                                {
                                  v247 = *(_QWORD *)v355[0];
                                  if (*(_QWORD *)v355[0])
                                    v248 = *(_BYTE *)(*(_QWORD *)v355[0] + 16) == 16;
                                  else
                                    v248 = 0;
                                  if (v248)
                                  {
                                    v249 = *(_DWORD *)(v247 + 32);
                                    if (v249 > 0x40)
                                    {
                                      if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v247 + 24)) != v249)
                                        return 1;
                                    }
                                    else if (*(_QWORD *)(v247 + 24))
                                    {
                                      return 1;
                                    }
                                  }
                                  else if (v65 <= 5)
                                  {
                                    v250 = sub_1C4F84D74(v247, (v65 + 1), a4);
                                    LODWORD(v65) = v65 + 1;
                                    if ((v250 & 1) != 0)
                                      return 1;
                                  }
                                  else
                                  {
                                    LODWORD(v65) = v65 + 1;
                                  }
                                }
                              }
                              else
                              {
                                v234 = *v231;
                                v235 = (unsigned int *)((char *)*v231 + 24);
                                if (*((_DWORD *)v234 + 8) >= 0x41u)
                                  v235 = *(unsigned int **)v235;
                                v236 = *v235;
                                if (*((_QWORD *)llvm::DataLayout::getStructLayout(*(llvm::DataLayout **)a4, (llvm::StructType *)((unint64_t)v355[1] & 0xFFFFFFFFFFFFFFF8))+ v236+ 2))return 1;
                              }
                              sub_1C4774E38((uint64_t)v355);
                              v231 = (llvm::UndefValue **)v355[0];
                              if (v355[0] == v232)
                                return 0;
                            }
                          }
                          return 0;
                        }
                        return 1;
                      }
                    }
                    if (v188 <= 0xFF)
                      goto LABEL_420;
                  }
                  return 0;
                }
                if (v162 != 49)
                {
LABEL_328:
                  v169 = *(_QWORD *)a1;
                  v170 = *(_DWORD *)(*(_QWORD *)a1 + 8);
                  if ((v170 & 0xFE) == 0x12)
                  {
                    v169 = **(_QWORD **)(v169 + 16);
                    v170 = *(_DWORD *)(v169 + 8);
                  }
                  v171 = (llvm::Type *)v169;
                  if ((v170 & 0xFE) == 0x12)
                    v171 = **(llvm::Type ***)(v169 + 16);
                  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v171);
                  if (!PrimitiveSizeInBits)
                    PrimitiveSizeInBits = llvm::DataLayout::getPointerTypeSizeInBits(*(_QWORD *)a4, v169);
                  v173 = a1[16];
                  if (v173 == 5)
                  {
                    v177 = *((unsigned __int16 *)a1 + 9);
                    if (v177 == 29)
                    {
                      v178 = &a1[-32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
                      v174 = *(_QWORD *)v178;
                      if (*(_QWORD *)v178)
                      {
                        v175 = *((_QWORD *)v178 + 4);
                        if (v175)
                        {
LABEL_343:
                          if ((sub_1C4F9F590(v174, v107, v65, a4) & 1) != 0)
                            return 1;
                          v179 = v175;
                          return sub_1C4F9F590(v179, v107, v65, a4);
                        }
                      }
                      goto LABEL_396;
                    }
                    if (v177 != 25)
                    {
                      if ((v177 & 0xFFFE) != 0x1A
                        || (v192 = &a1[-32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)], (v193 = *(uint64_t **)v192) == 0)
                        || (v194 = *((_QWORD *)v192 + 4)) == 0)
                      {
                        v200 = v177 - 19;
                        v107 = v349;
                        if (v200 > 8 || ((0x183u >> v200) & 1) == 0)
                          goto LABEL_396;
                        v229 = 1;
LABEL_447:
                        if ((a1[17] & 2) == 0)
                          goto LABEL_448;
                        if ((v229 & 1) != 0)
                        {
                          if (v173 == 45)
                            goto LABEL_523;
                          if (v173 == 41)
                          {
LABEL_526:
                            v203 = (uint64_t *)*((_QWORD *)a1 - 8);
                            if (!v203)
                              goto LABEL_641;
                            v204 = (uint64_t *)*((_QWORD *)a1 - 4);
                            if (!v204)
                              goto LABEL_641;
                            goto LABEL_400;
                          }
                          if (v173 != 5)
                            goto LABEL_641;
                          if (*((unsigned __int16 *)a1 + 9) - 19 > 1
                            || (v179 = *(_QWORD *)&a1[-32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)]) == 0)
                          {
LABEL_396:
                            v201 = *((unsigned __int16 *)a1 + 9);
                            if (v201 == 17)
                            {
                              v208 = &a1[-32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
                              v209 = *(_QWORD *)v208;
                              if (!*(_QWORD *)v208)
                                goto LABEL_641;
                              v210 = *((_QWORD *)v208 + 4);
                              if (!v210)
                                goto LABEL_641;
LABEL_413:
                              if (!*(_BYTE *)(a4 + 40)
                                || (a1[17] & 6) == 0
                                || !sub_1C4F9F590(v209, v107, v65, a4))
                              {
                                goto LABEL_641;
                              }
                              v211 = v210;
                              goto LABEL_417;
                            }
                            if (v201 != 13)
                              goto LABEL_641;
                            v202 = (uint64_t **)&a1[-32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
                            v203 = *v202;
                            if (!*v202)
                              goto LABEL_641;
                            v204 = v202[4];
                            if (!v204)
                              goto LABEL_641;
LABEL_400:
                            sub_1C4F838B8(v203, v107, (uint64_t *)a4, v355);
                            sub_1C4F838B8(v204, v107, (uint64_t *)a4, &v358);
                            if (LODWORD(v355[1]) >= 0x41)
                              v205 = (void **)((char *)v355[0] + 8 * ((LODWORD(v355[1]) - 1) >> 6));
                            else
                              v205 = v355;
                            if ((((unint64_t)*v205 >> (LOBYTE(v355[1]) - 1)) & 1) != 0)
                            {
                              v206 = v359 >= 0x41
                                   ? (char *)v358 + 8 * ((v359 - 1) >> 6)
                                   : (char *)&v358;
                              if (((*(_QWORD *)v206 >> (v359 - 1)) & 1) != 0
                                && ((sub_1C4F9F590(v203, v107, v65, a4) & 1) != 0
                                 || (sub_1C4F9F590(v204, v107, v65, a4) & 1) != 0))
                              {
                                LOBYTE(v207) = 0;
                                goto LABEL_592;
                              }
                            }
                            v220 = &v356;
                            v221 = DWORD2(v356) - 1;
                            if (DWORD2(v356) >= 0x41)
                              v220 = (__int128 *)(v356 + 8 * (v221 >> 6));
                            v222 = v65;
                            if (((*(_QWORD *)v220 >> v221) & 1) == 0)
                              goto LABEL_583;
                            v223 = &v360;
                            v224 = v361 - 1;
                            if (v361 >= 0x41)
                              v223 = (unint64_t *)(v360 + 8 * (v224 >> 6));
                            if (((*v223 >> v224) & 1) == 0)
                              goto LABEL_583;
                            LODWORD(v352) = PrimitiveSizeInBits;
                            if (PrimitiveSizeInBits > 0x40)
                            {
                              v227 = (unsigned __int8 *)&v351;
                              llvm::APInt::initSlowCase((llvm::APInt *)&v351, -1, 1);
                              v228 = v352;
                              v226 = PrimitiveSizeInBits - 1;
                              if (v352 >= 0x41)
                                v227 = &v351[8 * (v226 >> 6)];
                              v107 = v349;
                              v222 = v65;
                            }
                            else
                            {
                              if (PrimitiveSizeInBits)
                                v225 = (unsigned __int8 *)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
                              else
                                v225 = 0;
                              v351 = v225;
                              LOBYTE(v226) = PrimitiveSizeInBits - 1;
                              v227 = (unsigned __int8 *)&v351;
                              v228 = PrimitiveSizeInBits;
                            }
                            *(_QWORD *)v227 &= ~(1 << v226);
                            if (DWORD2(v356) > 0x40)
                            {
                              v267 = ((unint64_t)DWORD2(v356) + 63) >> 6;
                              v268 = (uint64_t *)v356;
                              v269 = v351;
                              while (1)
                              {
                                v271 = *v268++;
                                v270 = v271;
                                v272 = *(_QWORD *)v269;
                                v269 += 8;
                                if ((v272 & v270) != 0)
                                  break;
                                if (!--v267)
                                  goto LABEL_544;
                              }
                            }
                            else if (((unint64_t)v351 & (unint64_t)v356) == 0)
                            {
LABEL_544:
                              if (v361 > 0x40)
                              {
                                v287 = (uint64_t *)v360;
                                v288 = v351;
                                v289 = (((unint64_t)v361 + 63) >> 6) - 1;
                                do
                                {
                                  v291 = *v287++;
                                  v290 = v291;
                                  v292 = *(_QWORD *)v288;
                                  v288 += 8;
                                  v293 = v292 & v290;
                                  v273 = (v292 & v290) != 0;
                                  if (v293)
                                    v294 = 1;
                                  else
                                    v294 = v289 == 0;
                                  --v289;
                                }
                                while (!v294);
                              }
                              else
                              {
                                v273 = ((unint64_t)v351 & v360) != 0;
                              }
                              v207 = !v273;
LABEL_579:
                              if (v228 >= 0x41 && v351)
                                MEMORY[0x1CAA32F9C](v351, 0x1000C8000313F17);
                              if (!v207)
                              {
LABEL_592:
                                if (v361 >= 0x41 && v360)
                                  MEMORY[0x1CAA32F9C](v360, 0x1000C8000313F17);
                                if (v359 >= 0x41 && v358)
                                  MEMORY[0x1CAA32F9C](v358, 0x1000C8000313F17);
                                if (DWORD2(v356) >= 0x41 && (_QWORD)v356)
                                  MEMORY[0x1CAA32F9C](v356, 0x1000C8000313F17);
                                if (LODWORD(v355[1]) >= 0x41 && v355[0])
                                  MEMORY[0x1CAA32F9C](v355[0], 0x1000C8000313F17);
                                if ((v207 & 1) == 0)
                                  return 1;
                                goto LABEL_641;
                              }
LABEL_583:
                              v295 = LODWORD(v355[1]) - 1;
                              v296 = v355;
                              if (LODWORD(v355[1]) >= 0x41)
                                v296 = (void **)((char *)v355[0] + 8 * (v295 >> 6));
                              if ((((unint64_t)*v296 >> v295) & 1) == 0
                                || (LOBYTE(v207) = 0, (sub_1C4F83FEC((unsigned __int8 *)v204, 0, v222, a4) & 1) == 0))
                              {
                                v297 = v359 - 1;
                                v298 = &v358;
                                if (v359 >= 0x41)
                                  v298 = (void **)((char *)v358 + 8 * (v297 >> 6));
                                if ((((unint64_t)*v298 >> v297) & 1) == 0
                                  || (LOBYTE(v207) = 0, (sub_1C4F83FEC((unsigned __int8 *)v203, 0, v222, a4) & 1) == 0))
                                {
                                  LOBYTE(v207) = 1;
                                }
                              }
                              goto LABEL_592;
                            }
                            v207 = 0;
                            goto LABEL_579;
                          }
                        }
                        else if (v173 - 47 > 1
                               || ((v259 = *((_DWORD *)a1 + 5), (v259 & 0x40000000) != 0)
                                 ? (v260 = (unsigned __int8 *)*((_QWORD *)a1 - 1))
                                 : (v260 = &a1[-32 * (v259 & 0x7FFFFFF)]),
                                   (v179 = *(_QWORD *)v260) == 0))
                        {
LABEL_448:
                          if (v173 != 5)
                          {
                            if (v173 != 45)
                            {
                              if (v173 != 41)
                                goto LABEL_641;
                              goto LABEL_526;
                            }
LABEL_523:
                            v209 = *((_QWORD *)a1 - 8);
                            if (!v209)
                              goto LABEL_641;
                            v210 = *((_QWORD *)a1 - 4);
                            if (!v210)
                              goto LABEL_641;
                            goto LABEL_413;
                          }
                          goto LABEL_396;
                        }
                        return sub_1C4F9F590(v179, v107, v65, a4);
                      }
LABEL_389:
                      if ((a1[17] & 2) == 0)
                      {
                        sub_1C4F838B8(v193, v349, (uint64_t *)a4, v355);
                        v195 = &v356;
                        v196 = DWORD2(v356);
                        v197 = DWORD2(v356) - 1;
                        v198 = v356;
                        if (DWORD2(v356) >= 0x41)
                          v195 = (__int128 *)(v356 + 8 * (v197 >> 6));
                        if (((*(_QWORD *)v195 >> v197) & 1) != 0)
                          goto LABEL_393;
                        if (*(_BYTE *)(v194 + 16) != 16)
                          goto LABEL_636;
                        v263 = PrimitiveSizeInBits - 1;
                        v264 = (llvm::APInt *)(v194 + 24);
                        v265 = *(_DWORD *)(v194 + 32);
                        if (v265 >= 0x41)
                        {
                          if (v265 - llvm::APInt::countLeadingZerosSlowCase(v264) > 0x40)
                          {
LABEL_622:
                            if (v196 > 0x40)
                            {
                              v309 = 0;
                              v310 = (unint64_t)(v196 + 63) >> 6;
                              do
                              {
                                v136 = v310-- < 1;
                                if (v136)
                                  break;
                                v311 = *(_QWORD *)(v198 + 8 * v310);
                                v309 += __clz(v311);
                              }
                              while (!v311);
                              v312 = v196 | 0xFFFFFFC0;
                              if ((v196 & 0x3F) == 0)
                                v312 = 0;
                              v308 = v309 + v312;
                            }
                            else
                            {
                              v308 = v196 + __clz(v198) - 64;
                            }
                            if (PrimitiveSizeInBits - v263 > v308)
                            {
LABEL_393:
                              v199 = 0;
LABEL_637:
                              v4 = 1;
                              v107 = v349;
LABEL_638:
                              if (v196 >= 0x41 && (_QWORD)v356)
                                MEMORY[0x1CAA32F9C](v356, 0x1000C8000313F17);
                              if (LODWORD(v355[1]) >= 0x41 && v355[0])
                                MEMORY[0x1CAA32F9C](v355[0], 0x1000C8000313F17);
                              if ((v199 & 1) == 0)
                                return v4;
                              goto LABEL_641;
                            }
                            if (LODWORD(v355[1]) > 0x40)
                              v313 = llvm::APInt::countTrailingOnesSlowCase((llvm::APInt *)v355);
                            else
                              v313 = __clz(__rbit64(~(uint64_t)v355[0]));
                            if (v263 <= v313)
                            {
                              v107 = v349;
                              v4 = sub_1C4F9F590(v193, v349, v65, a4);
                              v199 = 0;
                              LODWORD(v196) = DWORD2(v356);
                              goto LABEL_638;
                            }
LABEL_636:
                            v199 = 1;
                            goto LABEL_637;
                          }
                          v266 = **(_QWORD ***)v264;
                        }
                        else
                        {
                          v266 = *(_QWORD **)v264;
                        }
                        if ((unint64_t)v266 <= v263)
                          v263 = (unint64_t)v266;
                        goto LABEL_622;
                      }
                      v176 = (uint64_t)v193;
                      return sub_1C4F84D74(v176, v65, a4);
                    }
                    v183 = (uint64_t *)&a1[-32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)];
                    v184 = *v183;
                    if (!*v183 || !v183[4])
                      goto LABEL_396;
                  }
                  else
                  {
                    if (v173 == 57)
                    {
                      v174 = *((_QWORD *)a1 - 8);
                      if (!v174)
                        goto LABEL_641;
                      v175 = *((_QWORD *)a1 - 4);
                      if (!v175)
                        goto LABEL_641;
                      goto LABEL_343;
                    }
                    if (v173 - 67 <= 1)
                      goto LABEL_347;
                    if (v173 != 53)
                    {
                      if (v173 < 0x1C)
                        goto LABEL_641;
                      if ((v173 & 0xFE) != 0x36
                        || ((v218 = *((_DWORD *)a1 + 5), (v218 & 0x40000000) != 0)
                          ? (v219 = (unsigned __int8 *)*((_QWORD *)a1 - 1))
                          : (v219 = &a1[-32 * (v218 & 0x7FFFFFF)]),
                            (v193 = *(uint64_t **)v219) == 0 || (v194 = *((_QWORD *)v219 + 4)) == 0))
                      {
                        if (a1[16] <= 0x52u)
                        {
                          v229 = 0;
                          v107 = v349;
                          if (a1[16] > 0x35u)
                          {
                            if (v173 - 54 >= 2)
                              goto LABEL_641;
                          }
                          else if (v173 - 47 >= 2)
                          {
                            if (v173 != 41)
                            {
                              if (v173 != 45)
                                goto LABEL_641;
                              goto LABEL_523;
                            }
                            goto LABEL_526;
                          }
                          goto LABEL_447;
                        }
                        v107 = v349;
                        if (a1[16] <= 0x58u)
                        {
                          if (v173 != 83)
                          {
                            if (v173 != 85 || !sub_1C4F9F590(*((_QWORD *)a1 - 8), v349, v65, a4))
                              goto LABEL_641;
                            v211 = *((_QWORD *)a1 - 4);
LABEL_417:
                            if ((sub_1C4F9F590(v211, v107, v65, a4) & 1) != 0)
                              return 1;
LABEL_641:
                            LODWORD(v355[1]) = PrimitiveSizeInBits;
                            if (PrimitiveSizeInBits > 0x40)
                            {
                              llvm::APInt::initSlowCase((llvm::APInt *)v355, 0, 0);
                              DWORD2(v356) = PrimitiveSizeInBits;
                              llvm::APInt::initSlowCase((llvm::APInt *)&v356, 0, 0);
                            }
                            else
                            {
                              DWORD2(v356) = PrimitiveSizeInBits;
                              v355[0] = 0;
                              *(_QWORD *)&v356 = 0;
                            }
                            sub_1C4F82D44((int)a1, v107);
                            if (DWORD2(v356) < 0x41)
                            {
                              v4 = v356 != 0;
                              goto LABEL_654;
                            }
                            v314 = 0;
                            v315 = ((unint64_t)DWORD2(v356) + 63) >> 6;
                            do
                            {
                              v136 = v315-- < 1;
                              if (v136)
                                break;
                              v316 = *(_QWORD *)(v356 + 8 * v315);
                              v314 += __clz(v316);
                            }
                            while (!v316);
                            v317 = DWORD2(v356) | 0xFFFFFFC0;
                            if ((BYTE8(v356) & 0x3F) == 0)
                              v317 = 0;
                            if (DWORD2(v356) - v314 - v317 > 0x40)
                            {
                              v4 = 1;
                              if (!(_QWORD)v356)
                                goto LABEL_654;
                            }
                            else
                            {
                              v4 = *(_QWORD *)v356 != 0;
                            }
                            MEMORY[0x1CAA32F9C](v356, 0x1000C8000313F17);
LABEL_654:
                            if (LODWORD(v355[1]) < 0x41)
                              return v4;
LABEL_743:
                            if (v355[0])
                              MEMORY[0x1CAA32F9C](v355[0], 0x1000C8000313F17);
                            return v4;
                          }
                          if (*(_BYTE *)(a4 + 40))
                          {
                            v358 = 0;
                            v350 = 0;
                            v351 = 0;
                            v353 = 0;
                            v354 = 0;
                            if (llvm::matchSimpleRecurrence((uint64_t)a1, &v358, &v351, &v354))
                            {
                              v355[0] = &v353;
                              v355[1] = 0;
                              if (sub_1C4D89F84((uint64_t)v355, v351))
                              {
                                v299 = *((_DWORD *)v353 + 2);
                                if (v299 > 0x40)
                                {
                                  if (llvm::APInt::countLeadingZerosSlowCase(v353) == v299)
                                    goto LABEL_698;
                                }
                                else if (!*(_QWORD *)v353)
                                {
                                  goto LABEL_698;
                                }
                                v321 = *((unsigned __int8 *)v358 + 16);
                                if (v321 > 0x35)
                                {
                                  if (v321 - 54 < 2 && (*((_BYTE *)v358 + 17) & 2) != 0)
                                    return 1;
                                }
                                else if (v321 == 41)
                                {
                                  if ((*((_BYTE *)v358 + 17) & 2) != 0)
                                    return 1;
                                  if ((*((_BYTE *)v358 + 17) & 4) != 0)
                                  {
                                    v355[0] = &v350;
                                    v355[1] = 0;
                                    if (sub_1C4D89F84((uint64_t)v355, v354))
                                    {
                                      v322 = v353;
                                      v323 = *((_DWORD *)v353 + 2);
                                      v324 = v323 - 1;
                                      if (v323 >= 0x41)
                                        v322 = (llvm::APInt *)(*(_QWORD *)v353 + 8 * (v324 >> 6));
                                      v325 = *(_QWORD *)v322 & (1 << v324);
                                      v326 = v350;
                                      v327 = *((_DWORD *)v350 + 2);
                                      v328 = v327 - 1;
                                      if (v327 >= 0x41)
                                        v326 = (llvm::APInt *)(*(_QWORD *)v350 + 8 * (v328 >> 6));
                                      if ((((v325 == 0) ^ (*(_QWORD *)v326 >> v328)) & 1) != 0)
                                        return 1;
                                    }
                                  }
                                }
                                else if (v321 == 45)
                                {
                                  if ((*((_BYTE *)v358 + 17) & 6) != 0)
                                  {
                                    v355[0] = &v350;
                                    v355[1] = 0;
                                    if (sub_1C4D89F84((uint64_t)v355, v354))
                                    {
                                      v329 = *((_DWORD *)v350 + 2);
                                      if (v329 > 0x40)
                                      {
                                        if (llvm::APInt::countLeadingZerosSlowCase(v350) != v329)
                                          return 1;
                                      }
                                      else if (*(_QWORD *)v350)
                                      {
                                        return 1;
                                      }
                                    }
                                  }
                                }
                                else if (v321 == 53
                                       && ((*((_BYTE *)v358 + 17) & 2) != 0 || (*((_BYTE *)v358 + 17) & 4) != 0))
                                {
                                  return 1;
                                }
                              }
                            }
                          }
LABEL_698:
                          v330 = *(_OWORD *)(a4 + 16);
                          *(_OWORD *)v355 = *(_OWORD *)a4;
                          v356 = v330;
                          v357[0] = *(_OWORD *)(a4 + 32);
                          if (v65 <= 5)
                            v331 = 5;
                          else
                            v331 = v65;
                          v332 = *((_DWORD *)a1 + 5);
                          if ((v332 & 0x40000000) != 0)
                          {
                            v334 = (unsigned __int8 *)*((_QWORD *)a1 - 1);
                            v333 = v332 & 0x7FFFFFF;
                          }
                          else
                          {
                            v333 = v332 & 0x7FFFFFF;
                            v334 = &a1[-32 * v333];
                          }
                          if (v333)
                          {
                            v335 = 32 * v333;
                            for (i = v334; ; i += 32)
                            {
                              v337 = *(unsigned __int8 **)v334;
                              if (*(unsigned __int8 **)v334 != a1)
                              {
                                v338 = *((_DWORD *)a1 + 5);
                                v339 = (v338 & 0x40000000) != 0
                                     ? (unsigned __int8 *)*((_QWORD *)a1 - 1)
                                     : &a1[-32 * (v338 & 0x7FFFFFF)];
                                v340 = *(_QWORD *)&v339[32 * *((unsigned int *)a1 + 15)
                                                      + 8 * ((unint64_t)(i - v339) >> 5)];
                                v341 = *(_QWORD *)(v340 + 40);
                                if (v341 == v340 + 40)
                                {
                                  v342 = 0;
                                }
                                else
                                {
                                  if (v341)
                                    v342 = v341 - 24;
                                  else
                                    v342 = 0;
                                  if (*(unsigned __int8 *)(v342 + 16) - 29 >= 0xB)
                                    v342 = 0;
                                }
                                *(_QWORD *)&v356 = v342;
                                if (!sub_1C4F9F590(v337, v349, v331, v355))
                                  break;
                              }
                              v334 += 32;
                              v335 -= 32;
                              if (!v335)
                                return 1;
                            }
                            return 0;
                          }
                          return 1;
                        }
                        if (v173 != 89)
                        {
                          if (v173 == 95)
                          {
                            v274 = (uint64_t ***)*((_QWORD *)a1 - 4);
                            if (sub_1C4F84D74((uint64_t)v274, v65, a4))
                            {
                              v4 = 1;
                              if ((sub_1C4F8BE80(v274, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 24), v65, 1) & 1) != 0)return v4;
                            }
                          }
                          goto LABEL_641;
                        }
                        v300 = (uint64_t *)*((_QWORD *)a1 - 8);
                        if (*(_BYTE *)(*((_QWORD *)a1 - 4) + 16) == 16)
                          v301 = *((_QWORD *)a1 - 4);
                        else
                          v301 = 0;
                        v302 = *v300;
                        if (!*v300 || *(_BYTE *)(v302 + 8) != 18)
                          goto LABEL_641;
                        v303 = *(unsigned int *)(v302 + 32);
                        LODWORD(v355[1]) = v303;
                        if (v303 > 0x40)
                        {
                          llvm::APInt::initSlowCase((llvm::APInt *)v355, -1, 1);
                          if (!v301)
                            goto LABEL_741;
                        }
                        else
                        {
                          if ((_DWORD)v303)
                            v304 = (void *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v303);
                          else
                            v304 = 0;
                          v355[0] = v304;
                          if (!v301)
                            goto LABEL_741;
                        }
                        v305 = (llvm::APInt *)(v301 + 24);
                        v306 = *(_DWORD *)(v301 + 32);
                        if (v306 >= 0x41)
                        {
                          if (v306 - llvm::APInt::countLeadingZerosSlowCase(v305) >= 0x41)
                            goto LABEL_741;
                          v307 = **(_QWORD ***)v305;
                        }
                        else
                        {
                          v307 = *(_QWORD **)v305;
                        }
                        if ((unint64_t)v307 < v303)
                        {
                          LODWORD(v359) = v303;
                          if (v303 > 0x40)
                          {
                            llvm::APInt::initSlowCase((llvm::APInt *)&v358, 0, 0);
                            LODWORD(v303) = v359;
                            v319 = 1 << (char)v307;
                            if (v359 > 0x40)
                            {
                              v320 = v358;
                              *((_QWORD *)v358 + (v307 >> 6)) |= v319;
LABEL_664:
                              if (LODWORD(v355[1]) >= 0x41 && v355[0])
                                MEMORY[0x1CAA32F9C](v355[0], 0x1000C8000313F17);
                              v355[0] = v320;
                              LODWORD(v355[1]) = v303;
LABEL_742:
                              v4 = sub_1C4F9F590(v300, v355, v65, a4);
                              if (v303 < 0x41)
                                return v4;
                              goto LABEL_743;
                            }
                            v318 = (unint64_t)v358;
                          }
                          else
                          {
                            v318 = 0;
                            v319 = 1 << (char)v307;
                          }
                          v320 = (void *)(v318 | v319);
                          goto LABEL_664;
                        }
LABEL_741:
                        LODWORD(v303) = v355[1];
                        goto LABEL_742;
                      }
                      goto LABEL_389;
                    }
                    v184 = *((_QWORD *)a1 - 8);
                    if (!v184 || !*((_QWORD *)a1 - 4))
                      goto LABEL_641;
                  }
                  if (!*(_BYTE *)(a4 + 40) || (a1[17] & 2) == 0)
                  {
                    LODWORD(v355[1]) = PrimitiveSizeInBits;
                    if (PrimitiveSizeInBits > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)v355, 0, 0);
                      DWORD2(v356) = PrimitiveSizeInBits;
                      llvm::APInt::initSlowCase((llvm::APInt *)&v356, 0, 0);
                    }
                    else
                    {
                      DWORD2(v356) = PrimitiveSizeInBits;
                      v355[0] = 0;
                      *(_QWORD *)&v356 = 0;
                    }
                    sub_1C4F82D44(v184, v107);
                    if (DWORD2(v356) >= 0x41)
                      v190 = (uint64_t *)v356;
                    else
                      v190 = (uint64_t *)&v356;
                    v191 = *v190;
                    if (DWORD2(v356) >= 0x41 && (_QWORD)v356)
                      MEMORY[0x1CAA32F9C]();
                    if (LODWORD(v355[1]) >= 0x41 && v355[0])
                      MEMORY[0x1CAA32F9C](v355[0], 0x1000C8000313F17);
                    if ((v191 & 1) != 0)
                      return 1;
                    goto LABEL_641;
                  }
                  v176 = v184;
                  return sub_1C4F84D74(v176, v65, a4);
                }
              }
LABEL_347:
              v181 = *((_DWORD *)a1 + 5);
              if ((v181 & 0x40000000) != 0)
                v182 = (uint64_t *)*((_QWORD *)a1 - 1);
              else
                v182 = (uint64_t *)&a1[-32 * (v181 & 0x7FFFFFF)];
              v176 = *v182;
              return sub_1C4F84D74(v176, v65, a4);
            }
            if (!*(_BYTE *)(a4 + 40))
              goto LABEL_176;
            v80 = *((_DWORD *)a1 + 5);
            if (*((_QWORD *)a1 + 6))
            {
              if ((v80 & 0x20000000) == 0)
              {
LABEL_145:
                v67 = a1[16];
                goto LABEL_146;
              }
            }
            else if ((v80 & 0x20000000) == 0)
            {
              goto LABEL_176;
            }
            v81 = **v66;
            v355[0] = a1;
            v82 = *(_DWORD *)(v81 + 2496);
            if (v82)
            {
              v83 = *(_QWORD *)(v81 + 2480);
              v84 = v82 - 1;
              v85 = v84 & ((a1 >> 4) ^ (a1 >> 9));
              v86 = (unsigned __int8 **)(v83 + 40 * v85);
              v87 = *v86;
              if (*v86 == a1)
              {
LABEL_141:
                v92 = *((unsigned int *)v86 + 4);
                if ((_DWORD)v92)
                {
                  v93 = v86[1] + 8;
                  v94 = 16 * v92;
                  while (*((_DWORD *)v93 - 2) != 11)
                  {
                    v93 += 2;
                    v94 -= 16;
                    if (!v94)
                      goto LABEL_145;
                  }
                  if (*v93)
                    return 1;
                }
                goto LABEL_145;
              }
              v88 = 0;
              v89 = 1;
              while (v87 != (unsigned __int8 *)-4096)
              {
                if (v88)
                  v90 = 0;
                else
                  v90 = v87 == (unsigned __int8 *)-8192;
                if (v90)
                  v88 = v86;
                v91 = v85 + v89++;
                v85 = v91 & v84;
                v86 = (unsigned __int8 **)(v83 + 40 * v85);
                v87 = *v86;
                if (*v86 == a1)
                  goto LABEL_141;
              }
              if (v88)
                v261 = v88;
              else
                v261 = v86;
            }
            else
            {
              v261 = 0;
            }
            v86 = (unsigned __int8 **)sub_1C541AB24(v81 + 2480, (uint64_t)v355, (uint64_t *)v355, v261);
            v262 = (unsigned __int8 *)v355[0];
            v86[3] = 0;
            v86[4] = 0;
            *v86 = v262;
            v86[1] = (unsigned __int8 *)(v86 + 3);
            v86[2] = (unsigned __int8 *)0x100000000;
            goto LABEL_141;
          }
          if (llvm::Argument::hasPassPointeeByValueCopyAttr((llvm::Argument *)a1))
          {
            v68 = *((_QWORD *)a1 + 3);
            v69 = *((_DWORD *)v66 + 2);
            if (v68 && (v70 = *(_QWORD *)(v68 + 112)) != 0)
            {
              if ((*(_BYTE *)(v70 + 17) & 1) == 0 && v69 <= 0xFF)
                return 1;
            }
            else if (v69 < 0x100)
            {
              return 1;
            }
          }
          v66 = *(uint64_t ***)a1;
          v76 = *(_DWORD *)(*(_QWORD *)a1 + 8);
          if (v76 != 15)
            goto LABEL_124;
          v77 = *((_QWORD *)a1 + 3);
          v78 = *(_QWORD *)(v77 + 112);
          if (!v78)
            goto LABEL_124;
          v79 = *((_DWORD *)a1 + 8) + 2;
          if (v79 >= *(_DWORD *)(v78 + 8))
            goto LABEL_124;
          v251 = *(_QWORD *)(v78 + 8 * v79 + 40);
          if (!v251)
            goto LABEL_124;
          if (*(char *)(v251 + 16) < 0)
            return 1;
          if ((*(_BYTE *)(v251 + 21) & 0x10) == 0)
            goto LABEL_124;
          v252 = (_QWORD *)(v251 + 48);
          v253 = 8 * *(unsigned int *)(v251 + 8) - 8 * *(unsigned int *)(v251 + 32);
          if (v253)
          {
            v254 = v253 >> 3;
            do
            {
              v255 = v254 >> 1;
              v256 = &v252[v254 >> 1];
              v257 = *v256;
              if (*v256)
                LODWORD(v257) = *(_DWORD *)(v257 + 12);
              v258 = v256 + 1;
              v254 += ~v255;
              if ((int)v257 < 76)
                v252 = v258;
              else
                v254 = v255;
            }
            while (v254);
          }
          if (!*(_QWORD *)(*v252 + 16))
          {
LABEL_124:
            v67 = a1[16];
            goto LABEL_125;
          }
          if ((v76 & 0xFE) == 0x12)
          {
            v76 = *(_DWORD *)(*v66[2] + 8);
            if (v77)
              goto LABEL_509;
          }
          else if (v77)
          {
LABEL_509:
            v65 = (a3 + 1);
            if ((*(_BYTE *)(v78 + 17) & 1) == 0 && v76 <= 0xFF)
              return 1;
            goto LABEL_124;
          }
          v65 = (a3 + 1);
          if (v76 < 0x100)
            return 1;
          goto LABEL_124;
        }
        v355[0] = &v356;
        LODWORD(v356) = 39;
        v355[1] = (void *)0x200000001;
        v28 = *(_QWORD *)(*(_QWORD *)(v26 + 40) + 56);
        v29 = *((_DWORD *)v27 + 2);
        if ((v29 & 0xFE) == 0x12)
          v29 = *(_DWORD *)(*v27[2] + 8);
        if (v28 && (v30 = *(_QWORD *)(v28 + 112)) != 0)
        {
          v31 = 1;
          if ((*(_BYTE *)(v30 + 17) & 1) != 0 || v29 > 0xFF)
            goto LABEL_91;
        }
        else if (v29 > 0xFF)
        {
          v31 = 1;
          goto LABEL_91;
        }
        v31 = 2;
        DWORD1(v356) = 76;
        LODWORD(v355[1]) = 2;
LABEL_91:
        v353 = *(llvm::APInt **)(a4 + 24);
        v354 = (unsigned __int8 *)v26;
        v351 = (unsigned __int8 *)&v354;
        v352 = &v353;
        llvm::getKnowledgeForValue((uint64_t)a1, &v356, v31, v25, (uint64_t (*)(uint64_t, __int128 *, uint64_t, uint64_t))sub_1C4D9B788, (uint64_t)&v351, (uint64_t)&v358);
        v61 = (int)v358;
        if (v355[0] != &v356)
          free(v355[0]);
        if (v61)
          return 1;
        v25 = *(_QWORD *)(a4 + 8);
        goto LABEL_96;
      }
      v18 = 0;
      v19 = 1;
      while (v17 != (unsigned __int8 *)-4096)
      {
        if (v18)
          v20 = 0;
        else
          v20 = v17 == (unsigned __int8 *)-8192;
        if (v20)
          v18 = v16;
        v21 = v15 + v19++;
        v15 = v21 & v14;
        v16 = (unsigned __int8 **)(v13 + 40 * v15);
        v17 = *v16;
        if (*v16 == a1)
          goto LABEL_20;
      }
      if (v18)
        v100 = v18;
      else
        v100 = v16;
    }
    else
    {
      v100 = 0;
    }
    v16 = (unsigned __int8 **)sub_1C541AB24(v11 + 2480, (uint64_t)v355, (uint64_t *)v355, v100);
    v101 = (unsigned __int8 *)v355[0];
    v16[3] = 0;
    v16[4] = 0;
    *v16 = v101;
    v16[1] = (unsigned __int8 *)(v16 + 3);
    v16[2] = (unsigned __int8 *)0x100000000;
    goto LABEL_20;
  }
  return sub_1C4F84D74(*(_QWORD *)&a1[-32 * (*((_DWORD *)a1 + 5) & 0x7FFFFFF)], a3, a4);
}

uint64_t sub_1C4FA19C4(uint64_t a1, unsigned __int8 *a2)
{
  _BOOL8 v4;
  _BOOL4 v5;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  if ((_DWORD)a1 == 34)
    return 1;
  if ((_DWORD)a1 == 33)
  {
    v4 = 0;
    if (a2 && a2[16] <= 0x14u)
    {
      if ((llvm::Constant::isNullValue((llvm::Constant *)a2) & 1) == 0)
        return sub_1C4E71060((uint64_t)&v10, (llvm::Constant *)a2);
      return 1;
    }
  }
  else
  {
    v14 = 0;
    v10 = &v14;
    v11 = 0;
    if (sub_1C4D89F84((uint64_t)&v10, a2))
    {
      llvm::ConstantRange::makeExactICmpRegion(&v10, a1, v14);
      v9 = *(_DWORD *)(v14 + 8);
      if (v9 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v8, 0, 0);
        v7 = v9;
        v5 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v10, (const llvm::APInt *)&v8);
        if (v7 >= 0x41 && v8)
          MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
      }
      else
      {
        v8 = 0;
        v5 = llvm::ConstantRange::contains((llvm::ConstantRange *)&v10, (const llvm::APInt *)&v8);
      }
      if (v13 >= 0x41 && v12)
        MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
      v4 = !v5;
      if (v11 >= 0x41 && v10)
        MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

int8x8_t *sub_1C4FA1B3C@<X0>(llvm::KnownBits *this@<X1>, int8x8_t *a2@<X2>, _BYTE *a3@<X0>, uint64_t a4@<X8>)
{
  int8x8_t *result;
  unsigned int v8;
  char v9;
  llvm::KnownBits *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;

  result = llvm::KnownBits::shl(this, a2, (llvm::KnownBits *)a4);
  if (*a3)
  {
    v8 = *((_DWORD *)this + 2);
    v9 = v8 - 1;
    if (v8 >= 0x41)
      v10 = (llvm::KnownBits *)(*(_QWORD *)this + 8 * ((v8 - 1) >> 6));
    else
      v10 = this;
    if (((*(_QWORD *)v10 >> v9) & 1) != 0)
    {
      v11 = *(_DWORD *)(a4 + 8);
      v12 = 1 << (v11 - 1);
      if (v11 >= 0x41)
        v13 = (_QWORD *)(*(_QWORD *)a4 + 8 * ((v11 - 1) >> 6));
      else
        v13 = (_QWORD *)a4;
      *v13 |= v12;
    }
    v15 = *((_QWORD *)this + 2);
    v14 = (char *)this + 16;
    v16 = *((_DWORD *)v14 + 2);
    v17 = (_QWORD *)(v15 + 8 * ((v16 - 1) >> 6));
    if (v16 < 0x41)
      v17 = v14;
    if (((*v17 >> (v16 - 1)) & 1) != 0)
    {
      v19 = *(_QWORD *)(a4 + 16);
      v18 = a4 + 16;
      v20 = *(_DWORD *)(v18 + 8);
      v21 = (_QWORD *)(v19 + 8 * ((v20 - 1) >> 6));
      if (v20 < 0x41)
        v21 = (_QWORD *)v18;
      *v21 |= 1 << (v20 - 1);
    }
  }
  return result;
}

_QWORD *sub_1C4FA1C2C@<X0>(llvm::KnownBits *this@<X1>, int8x8_t *a2@<X2>, llvm::KnownBits *a3@<X8>)
{
  return llvm::KnownBits::lshr(this, a2, a3);
}

void sub_1C4FA1C38(llvm::KnownBits *this@<X1>, int8x8_t *a2@<X2>, unint64_t *a3@<X8>)
{
  llvm::KnownBits::ashr(this, a2, a3);
}

uint64_t sub_1C4FA1C44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 56)
  {
    if (v5 != 5)
      return (v5 == 5) & a3;
    if (*(_WORD *)(a2 + 18) != 28)
      goto LABEL_25;
    v9 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    v10 = *(_QWORD *)(a2 - 32 * v9);
    if (*(_QWORD *)a1 == v10)
    {
      v12 = -v9;
    }
    else
    {
      v11 = sub_1C4E75A04((_QWORD *)(a1 + 8), v10);
      v12 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      if ((v11 & 1) == 0)
      {
        v13 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
LABEL_20:
        if (*(_QWORD *)a1 != v13)
        {
          if (!sub_1C4E75A04((_QWORD *)(a1 + 8), v13))
            goto LABEL_25;
          v12 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        }
        v15 = *(_QWORD *)(a2 + 32 * v12);
        if (v15)
          goto LABEL_24;
LABEL_25:
        a3 = 0;
        return (v5 == 5) & a3;
      }
    }
    v15 = *(_QWORD *)(a2 + 32 * v12 + 32);
    if (v15)
    {
LABEL_24:
      **(_QWORD **)(a1 + 16) = v15;
      a3 = 1;
      return (v5 == 5) & a3;
    }
    v13 = 0;
    goto LABEL_20;
  }
  v6 = *(_QWORD *)(a2 - 64);
  if (*(_QWORD *)a1 == v6 || (sub_1C4E75A04((_QWORD *)(a1 + 8), v6) & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 - 32);
    if (v7)
    {
LABEL_15:
      **(_QWORD **)(a1 + 16) = v7;
      return 1;
    }
    v8 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a2 - 32);
  }
  if (*(_QWORD *)a1 == v8 || (result = sub_1C4E75A04((_QWORD *)(a1 + 8), v8), (_DWORD)result))
  {
    v7 = *(_QWORD *)(a2 - 64);
    if (v7)
      goto LABEL_15;
    return 0;
  }
  return result;
}

uint64_t sub_1C4FA1D98(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 == 58)
    {
      if (!sub_1C4FA1C44(a1, *(_QWORD *)(a2 - 64), 58)
        || (sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 32)) & 1) == 0)
      {
        result = sub_1C4FA1C44(a1, *(_QWORD *)(a2 - 32), v5);
        if ((_DWORD)result)
          return sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 64));
        return result;
      }
      return 1;
    }
    return 0;
  }
  if (*(_WORD *)(a2 + 18) != 30)
    return 0;
  v7 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  if (sub_1C4FA1C44(a1, *v7, (char)v7)
    && (sub_1C4D9EED4(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
  {
    return 1;
  }
  v8 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  result = sub_1C4FA1C44(a1, *(_QWORD *)(v8 + 32), v8);
  if ((_DWORD)result)
    return sub_1C4D9EED4(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  return result;
}

uint64_t sub_1C4FA1E9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 57)
  {
    if (v5 != 5)
      return (v5 == 5) & a3;
    if (*(_WORD *)(a2 + 18) != 29)
      goto LABEL_25;
    v9 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    v10 = *(_QWORD *)(a2 - 32 * v9);
    if (*(_QWORD *)a1 == v10)
    {
      v12 = -v9;
    }
    else
    {
      v11 = sub_1C4E75A04((_QWORD *)(a1 + 8), v10);
      v12 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      if ((v11 & 1) == 0)
      {
        v13 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
LABEL_20:
        if (*(_QWORD *)a1 != v13)
        {
          if (!sub_1C4E75A04((_QWORD *)(a1 + 8), v13))
            goto LABEL_25;
          v12 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        }
        v15 = *(_QWORD *)(a2 + 32 * v12);
        if (v15)
          goto LABEL_24;
LABEL_25:
        a3 = 0;
        return (v5 == 5) & a3;
      }
    }
    v15 = *(_QWORD *)(a2 + 32 * v12 + 32);
    if (v15)
    {
LABEL_24:
      **(_QWORD **)(a1 + 16) = v15;
      a3 = 1;
      return (v5 == 5) & a3;
    }
    v13 = 0;
    goto LABEL_20;
  }
  v6 = *(_QWORD *)(a2 - 64);
  if (*(_QWORD *)a1 == v6 || (sub_1C4E75A04((_QWORD *)(a1 + 8), v6) & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 - 32);
    if (v7)
    {
LABEL_15:
      **(_QWORD **)(a1 + 16) = v7;
      return 1;
    }
    v8 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a2 - 32);
  }
  if (*(_QWORD *)a1 == v8 || (result = sub_1C4E75A04((_QWORD *)(a1 + 8), v8), (_DWORD)result))
  {
    v7 = *(_QWORD *)(a2 - 64);
    if (v7)
      goto LABEL_15;
    return 0;
  }
  return result;
}

uint64_t sub_1C4FA1FF0(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 == 58)
    {
      if (!sub_1C4FA1E9C(a1, *(_QWORD *)(a2 - 64), 58)
        || (sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 32)) & 1) == 0)
      {
        result = sub_1C4FA1E9C(a1, *(_QWORD *)(a2 - 32), v5);
        if ((_DWORD)result)
          return sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 64));
        return result;
      }
      return 1;
    }
    return 0;
  }
  if (*(_WORD *)(a2 + 18) != 30)
    return 0;
  v7 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  if (sub_1C4FA1E9C(a1, *v7, (char)v7)
    && (sub_1C4D9EED4(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
  {
    return 1;
  }
  v8 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  result = sub_1C4FA1E9C(a1, *(_QWORD *)(v8 + 32), v8);
  if ((_DWORD)result)
    return sub_1C4D9EED4(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  return result;
}

uint64_t sub_1C4FA20F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W8>)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v5 = *(unsigned __int8 *)(a2 + 16);
  if (v5 != 58)
  {
    if (v5 != 5)
      return (v5 == 5) & a3;
    if (*(_WORD *)(a2 + 18) != 30)
      goto LABEL_25;
    v9 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    v10 = *(_QWORD *)(a2 - 32 * v9);
    if (*(_QWORD *)a1 == v10)
    {
      v12 = -v9;
    }
    else
    {
      v11 = sub_1C4E75A04((_QWORD *)(a1 + 8), v10);
      v12 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      if ((v11 & 1) == 0)
      {
        v13 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
LABEL_20:
        if (*(_QWORD *)a1 != v13)
        {
          if (!sub_1C4E75A04((_QWORD *)(a1 + 8), v13))
            goto LABEL_25;
          v12 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
        }
        v15 = *(_QWORD *)(a2 + 32 * v12);
        if (v15)
          goto LABEL_24;
LABEL_25:
        a3 = 0;
        return (v5 == 5) & a3;
      }
    }
    v15 = *(_QWORD *)(a2 + 32 * v12 + 32);
    if (v15)
    {
LABEL_24:
      **(_QWORD **)(a1 + 16) = v15;
      a3 = 1;
      return (v5 == 5) & a3;
    }
    v13 = 0;
    goto LABEL_20;
  }
  v6 = *(_QWORD *)(a2 - 64);
  if (*(_QWORD *)a1 == v6 || (sub_1C4E75A04((_QWORD *)(a1 + 8), v6) & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 - 32);
    if (v7)
    {
LABEL_15:
      **(_QWORD **)(a1 + 16) = v7;
      return 1;
    }
    v8 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a2 - 32);
  }
  if (*(_QWORD *)a1 == v8 || (result = sub_1C4E75A04((_QWORD *)(a1 + 8), v8), (_DWORD)result))
  {
    v7 = *(_QWORD *)(a2 - 64);
    if (v7)
      goto LABEL_15;
    return 0;
  }
  return result;
}

uint64_t sub_1C4FA2248(uint64_t a1, uint64_t a2)
{
  int v4;
  char v5;
  uint64_t result;
  uint64_t *v7;
  uint64_t v8;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 == 58)
    {
      if (!sub_1C4FA20F4(a1, *(_QWORD *)(a2 - 64), 58)
        || (sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 32)) & 1) == 0)
      {
        result = sub_1C4FA20F4(a1, *(_QWORD *)(a2 - 32), v5);
        if ((_DWORD)result)
          return sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 64));
        return result;
      }
      return 1;
    }
    return 0;
  }
  if (*(_WORD *)(a2 + 18) != 30)
    return 0;
  v7 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  if (sub_1C4FA20F4(a1, *v7, (char)v7)
    && (sub_1C4D9EED4(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
  {
    return 1;
  }
  v8 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
  result = sub_1C4FA20F4(a1, *(_QWORD *)(v8 + 32), v8);
  if ((_DWORD)result)
    return sub_1C4D9EED4(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  return result;
}

uint64_t sub_1C4FA234C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 == 5)
  {
    if (*(_WORD *)(a2 + 18) != 30)
      return 0;
    v8 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    v9 = *(unsigned __int8 *)(v8 + 16);
    if (v9 == 5)
    {
      if (*(_WORD *)(v8 + 18) != 25)
        goto LABEL_41;
      v19 = *(_DWORD *)(v8 + 20) & 0x7FFFFFF;
      v20 = *(_QWORD *)(v8 - 32 * v19);
      if (*(_QWORD *)a1 != v20)
      {
        if (!sub_1C4E75A04((_QWORD *)(a1 + 8), v20))
          goto LABEL_41;
        v19 = *(_DWORD *)(v8 + 20) & 0x7FFFFFF;
      }
      if (!sub_1C4E7B154((_QWORD **)(a1 + 16), *(_QWORD *)(v8 - 32 * v19 + 32)))
      {
LABEL_41:
        v21 = *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
        v22 = *(unsigned __int8 *)(v21 + 16);
        if (v22 == 5)
        {
          if (*(_WORD *)(v21 + 18) != 25)
            return 0;
          v24 = *(_DWORD *)(v21 + 20) & 0x7FFFFFF;
          v25 = *(_QWORD *)(v21 - 32 * v24);
          if (*(_QWORD *)a1 != v25)
          {
            result = sub_1C4E75A04((_QWORD *)(a1 + 8), v25);
            if (!(_DWORD)result)
              return result;
            v24 = *(_DWORD *)(v21 + 20) & 0x7FFFFFF;
          }
          result = sub_1C4E7B154((_QWORD **)(a1 + 16), *(_QWORD *)(v21 - 32 * v24 + 32));
          if (!(_DWORD)result)
            return result;
        }
        else
        {
          if (v22 != 53)
            return 0;
          v23 = *(_QWORD *)(v21 - 64);
          if (*(_QWORD *)a1 != v23)
          {
            result = sub_1C4E75A04((_QWORD *)(a1 + 8), v23);
            if (!(_DWORD)result)
              return result;
          }
          if ((sub_1C4E7B154((_QWORD **)(a1 + 16), *(_QWORD *)(v21 - 32)) & 1) == 0)
            return 0;
        }
        return sub_1C4D9EED4(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
      }
    }
    else
    {
      if (v9 != 53)
        goto LABEL_41;
      v10 = *(_QWORD *)(v8 - 64);
      if (*(_QWORD *)a1 != v10 && !sub_1C4E75A04((_QWORD *)(a1 + 8), v10))
        goto LABEL_41;
      if ((sub_1C4E7B154((_QWORD **)(a1 + 16), *(_QWORD *)(v8 - 32)) & 1) == 0)
        goto LABEL_41;
    }
    if ((sub_1C4D9EED4(a1 + 24, *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
      return 1;
    goto LABEL_41;
  }
  if (v4 != 58)
    return 0;
  v5 = *(_QWORD *)(a2 - 64);
  v6 = *(unsigned __int8 *)(v5 + 16);
  if (v6 != 5)
  {
    if (v6 != 53)
      goto LABEL_22;
    v7 = *(_QWORD *)(v5 - 64);
    if (*(_QWORD *)a1 != v7 && !sub_1C4E75A04((_QWORD *)(a1 + 8), v7))
      goto LABEL_22;
    if ((sub_1C4E7B154((_QWORD **)(a1 + 16), *(_QWORD *)(v5 - 32)) & 1) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
  if (*(_WORD *)(v5 + 18) != 25)
    goto LABEL_22;
  v11 = *(_DWORD *)(v5 + 20) & 0x7FFFFFF;
  v12 = *(_QWORD *)(v5 - 32 * v11);
  if (*(_QWORD *)a1 != v12)
  {
    if (!sub_1C4E75A04((_QWORD *)(a1 + 8), v12))
      goto LABEL_22;
    v11 = *(_DWORD *)(v5 + 20) & 0x7FFFFFF;
  }
  if (sub_1C4E7B154((_QWORD **)(a1 + 16), *(_QWORD *)(v5 - 32 * v11 + 32)))
  {
LABEL_21:
    if ((sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 32)) & 1) == 0)
      goto LABEL_22;
    return 1;
  }
LABEL_22:
  v13 = *(_QWORD *)(a2 - 32);
  v14 = *(unsigned __int8 *)(v13 + 16);
  if (v14 == 5)
  {
    if (*(_WORD *)(v13 + 18) == 25)
    {
      v17 = *(_DWORD *)(v13 + 20) & 0x7FFFFFF;
      v18 = *(_QWORD *)(v13 - 32 * v17);
      if (*(_QWORD *)a1 != v18)
      {
        result = sub_1C4E75A04((_QWORD *)(a1 + 8), v18);
        if (!(_DWORD)result)
          return result;
        v17 = *(_DWORD *)(v13 + 20) & 0x7FFFFFF;
      }
      result = sub_1C4E7B154((_QWORD **)(a1 + 16), *(_QWORD *)(v13 - 32 * v17 + 32));
      if ((_DWORD)result)
        return sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 64));
      return result;
    }
    return 0;
  }
  if (v14 != 53)
    return 0;
  v15 = *(_QWORD *)(v13 - 64);
  if (*(_QWORD *)a1 == v15 || (result = sub_1C4E75A04((_QWORD *)(a1 + 8), v15), (_DWORD)result))
  {
    if ((sub_1C4E7B154((_QWORD **)(a1 + 16), *(_QWORD *)(v13 - 32)) & 1) == 0)
      return 0;
    return sub_1C4D9ED34(a1 + 24, *(llvm::Constant **)(a2 - 64));
  }
  return result;
}

uint64_t sub_1C4FA2690(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD **v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v4 < 0x1C)
  {
    if (v4 != 5 || (*(_WORD *)(a2 + 18) & 0xFFFE) != 0x1A)
      return 0;
    v7 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    v8 = *(_QWORD *)(a2 - 32 * v7);
    if (*a1 != v8)
    {
      if (!sub_1C4E75A04(a1 + 1, v8))
        return 0;
      v7 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    }
    v9 = (_QWORD **)(a1 + 2);
    v10 = *(_QWORD *)(a2 - 32 * v7 + 32);
    return sub_1C4E7B154(v9, v10);
  }
  if ((v4 & 0xFE) == 0x36)
  {
    v5 = *(_DWORD *)(a2 + 20);
    if ((v5 & 0x40000000) != 0)
      v6 = *(uint64_t **)(a2 - 8);
    else
      v6 = (uint64_t *)(a2 - 32 * (v5 & 0x7FFFFFF));
    if (*a1 == *v6)
      goto LABEL_17;
    if (sub_1C4E75A04(a1 + 1, *v6))
    {
      v5 = *(_DWORD *)(a2 + 20);
LABEL_17:
      v9 = (_QWORD **)(a1 + 2);
      if ((v5 & 0x40000000) != 0)
        v11 = *(_QWORD *)(a2 - 8);
      else
        v11 = a2 - 32 * (v5 & 0x7FFFFFF);
      v10 = *(_QWORD *)(v11 + 32);
      return sub_1C4E7B154(v9, v10);
    }
  }
  return 0;
}

uint64_t sub_1C4FA2794(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 == 58)
    {
      if (!sub_1C4FA2690(a1, *(_QWORD *)(a2 - 64))
        || (sub_1C4D9ED34((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 32)) & 1) == 0)
      {
        result = sub_1C4FA2690(a1, *(_QWORD *)(a2 - 32));
        if ((_DWORD)result)
          return sub_1C4D9ED34((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 64));
        return result;
      }
      return 1;
    }
    return 0;
  }
  if (*(_WORD *)(a2 + 18) != 30)
    return 0;
  if (sub_1C4FA2690(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)))
    && (sub_1C4D9EED4((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
  {
    return 1;
  }
  result = sub_1C4FA2690(a1, *(_QWORD *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32));
  if ((_DWORD)result)
    return sub_1C4D9EED4((uint64_t)(a1 + 3), *(llvm::Constant **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)));
  return result;
}

uint64_t sub_1C4FA2898(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a2 - 64);
  if (*(_QWORD *)(a1 + 8) == v4 || (result = sub_1C4E75A04((_QWORD *)(a1 + 16), v4), (_DWORD)result))
  {
    v6 = *(_QWORD *)(a2 - 32);
    if (v6)
    {
      **(_QWORD **)(a1 + 24) = v6;
      **(_DWORD **)a1 = *(_WORD *)(a2 + 18) & 0x3F;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_1C4FA290C(llvm::APInt *a1)
{
  unsigned int v1;
  uint64_t v3;
  int v4;
  unint64_t v5;
  int8x8_t *v6;
  int8x8_t v7;
  uint8x8_t v8;

  v1 = *((_DWORD *)a1 + 2);
  if (v1 > 0x40)
  {
    v3 = *((unsigned int *)a1 + 2);
    if (llvm::APInt::countLeadingZerosSlowCase(a1) == v1)
    {
      return 1;
    }
    else
    {
      v4 = 0;
      v5 = (unint64_t)(v3 + 63) >> 6;
      v6 = *(int8x8_t **)a1;
      do
      {
        v7 = *v6++;
        v8 = (uint8x8_t)vcnt_s8(v7);
        v8.i16[0] = vaddlv_u8(v8);
        v4 += v8.i32[0];
        --v5;
      }
      while (v5);
      return v4 == 1;
    }
  }
  else
  {
    return !*(_QWORD *)a1 || (*(_QWORD *)a1 & (*(_QWORD *)a1 - 1)) == 0;
  }
}

_QWORD *sub_1C4FA29B0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  unsigned int v6;
  BOOL v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  uint64_t *v14;
  int v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t **v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t *v48;
  _QWORD v49[2];
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = result;
  v6 = *((unsigned __int8 *)result + 16);
  if (result)
    v7 = v6 >= 0x1C;
  else
    v7 = 0;
  v8 = !v7;
  v9 = v6 - 28;
  v10 = v9;
  if (v8 == 1)
    v10 = *((unsigned __int16 *)result + 9);
  if (a2 && (v11 = *(unsigned __int8 *)(a2 + 16), v11 > 0x1B))
    v12 = v11 - 28;
  else
    v12 = *(unsigned __int16 *)(a2 + 18);
  if (v10 == v12)
  {
    if (v8)
      v9 = *((unsigned __int16 *)result + 9);
    switch(v9)
    {
      case 0xDu:
      case 0xFu:
        v13 = *((_DWORD *)result + 5);
        if ((v13 & 0x40000000) != 0)
          v14 = (uint64_t *)*(result - 1);
        else
          v14 = &result[-4 * (v13 & 0x7FFFFFF)];
        v22 = *v14;
        v23 = *(_DWORD *)(a2 + 20);
        if ((v23 & 0x40000000) != 0)
          v24 = *(_QWORD **)(a2 - 8);
        else
          v24 = (_QWORD *)(a2 - 32 * (v23 & 0x7FFFFFF));
        if (v22 == *v24)
        {
          if ((v13 & 0x40000000) != 0)
            v30 = (_QWORD *)*(result - 1);
          else
            v30 = &result[-4 * (v13 & 0x7FFFFFF)];
          v38 = v30[4];
          if ((v23 & 0x40000000) != 0)
            v39 = *(_QWORD *)(a2 - 8);
          else
            v39 = a2 - 32 * (v23 & 0x7FFFFFF);
          v40 = *(_QWORD *)(v39 + 32);
          goto LABEL_89;
        }
        if ((v13 & 0x40000000) != 0)
          v25 = (_QWORD *)*(result - 1);
        else
          v25 = &result[-4 * (v13 & 0x7FFFFFF)];
        v31 = v25[4];
        if ((v23 & 0x40000000) != 0)
          v32 = *(_QWORD *)(a2 - 8);
        else
          v32 = a2 - 32 * (v23 & 0x7FFFFFF);
        if (v31 == *(_QWORD *)(v32 + 32))
        {
          if ((v13 & 0x40000000) != 0)
            v33 = (uint64_t *)*(result - 1);
          else
            v33 = &result[-4 * (v13 & 0x7FFFFFF)];
          v38 = *v33;
          if ((v23 & 0x40000000) != 0)
            v41 = *(uint64_t **)(a2 - 8);
          else
            v41 = (uint64_t *)(a2 - 32 * (v23 & 0x7FFFFFF));
          v40 = *v41;
LABEL_89:
          *(_QWORD *)a3 = v38;
          *(_QWORD *)(a3 + 8) = v40;
          goto LABEL_111;
        }
        break;
      case 0xEu:
      case 0x10u:
      case 0x12u:
      case 0x13u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x18u:
        break;
      case 0x11u:
        if (((*((_BYTE *)result + 17) & 2) == 0 || (*(_BYTE *)(a2 + 17) & 2) == 0)
          && ((*((_BYTE *)result + 17) & 4) == 0 || (*(_BYTE *)(a2 + 17) & 4) == 0))
        {
          break;
        }
        v19 = *((_DWORD *)result + 5);
        v20 = (v19 & 0x40000000) != 0 ? (_QWORD *)*(result - 1) : &result[-4 * (v19 & 0x7FFFFFF)];
        v42 = v20[4];
        v43 = *(_DWORD *)(a2 + 20);
        v44 = (v43 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v43 & 0x7FFFFFF);
        if (v42 != *(_QWORD *)(v44 + 32))
          break;
        v45 = (v19 & 0x40000000) != 0 ? (_QWORD *)*(result - 1) : &result[-4 * (v19 & 0x7FFFFFF)];
        v46 = v45[4];
        if (*(_BYTE *)(v46 + 16) != 16)
          break;
        result = (_QWORD *)(v46 + 24);
        v47 = *(_DWORD *)(v46 + 32);
        if (v47 > 0x40)
        {
          result = (_QWORD *)llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)result);
          if ((_DWORD)result == v47)
            break;
        }
        else if (!*result)
        {
          break;
        }
        if ((v19 & 0x40000000) != 0)
          v48 = (uint64_t *)*(v4 - 1);
        else
          v48 = &v4[-4 * (v19 & 0x7FFFFFF)];
        v17 = *v48;
        if ((v43 & 0x40000000) != 0)
          goto LABEL_108;
        v36 = v43 & 0x7FFFFFF;
        goto LABEL_78;
      case 0x19u:
        if (((*((_BYTE *)result + 17) & 2) == 0 || (*(_BYTE *)(a2 + 17) & 2) == 0)
          && ((*((_BYTE *)result + 17) & 4) == 0 || (*(_BYTE *)(a2 + 17) & 4) == 0))
        {
          break;
        }
        goto LABEL_43;
      case 0x1Au:
      case 0x1Bu:
        if ((*((_BYTE *)result + 17) & 2) == 0 || (*(_BYTE *)(a2 + 17) & 2) == 0)
          break;
LABEL_43:
        v15 = *((_DWORD *)result + 5);
        if ((v15 & 0x40000000) != 0)
          v21 = (_QWORD *)*(result - 1);
        else
          v21 = &result[-4 * (v15 & 0x7FFFFFF)];
        v26 = v21[4];
        v27 = *(_DWORD *)(a2 + 20);
        if ((v27 & 0x40000000) != 0)
          v34 = *(_QWORD *)(a2 - 8);
        else
          v34 = a2 - 32 * (v27 & 0x7FFFFFF);
        v29 = *(_QWORD *)(v34 + 32);
        goto LABEL_71;
      default:
        if (v9 - 39 >= 2)
        {
          if (v9 != 55)
            break;
          v56 = 0;
          v55 = 0;
          v52 = 0;
          v53 = 0;
          if (result[5] != *(_QWORD *)(a2 + 40))
            break;
          result = (_QWORD *)llvm::matchSimpleRecurrence((uint64_t)result, &v56, &v55, &v54);
          if (!(_DWORD)result)
            break;
          result = (_QWORD *)llvm::matchSimpleRecurrence(a2, &v53, &v52, &v51);
          if (!(_DWORD)result)
            break;
          result = sub_1C4FA29B0(v49, v56, v53);
          if (!v50 || (_QWORD *)v49[0] != v4 || v49[1] != a2)
            break;
          v17 = v55;
          v18 = v52;
        }
        else
        {
          v15 = *((_DWORD *)result + 5);
          if ((v15 & 0x40000000) != 0)
            v16 = (uint64_t **)*(result - 1);
          else
            v16 = (uint64_t **)&result[-4 * (v15 & 0x7FFFFFF)];
          v26 = **v16;
          v27 = *(_DWORD *)(a2 + 20);
          if ((v27 & 0x40000000) != 0)
            v28 = *(uint64_t ***)(a2 - 8);
          else
            v28 = (uint64_t **)(a2 - 32 * (v27 & 0x7FFFFFF));
          v29 = **v28;
LABEL_71:
          if (v26 != v29)
            break;
          if ((v15 & 0x40000000) != 0)
            v35 = (uint64_t *)*(result - 1);
          else
            v35 = &result[-4 * (v15 & 0x7FFFFFF)];
          v17 = *v35;
          if ((v27 & 0x40000000) != 0)
          {
LABEL_108:
            v37 = *(uint64_t **)(a2 - 8);
          }
          else
          {
            v36 = v27 & 0x7FFFFFF;
LABEL_78:
            v37 = (uint64_t *)(a2 - 32 * v36);
          }
          v18 = *v37;
        }
        *(_QWORD *)a3 = v17;
        *(_QWORD *)(a3 + 8) = v18;
LABEL_111:
        *(_BYTE *)(a3 + 16) = 1;
        return result;
    }
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 16) = 0;
  return result;
}

uint64_t sub_1C4FA2DA8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;

  v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 != 41 || a1 == 0 || v4 < 0x1C || v4 - 59 < 0xFFFFFFEE)
    return 0;
  v8 = *(_QWORD *)(a1 - 64);
  v9 = *(_QWORD *)(a1 - 32);
  if (v8 != a2)
  {
    if (v9 != a2)
      return 0;
    v9 = v8;
  }
  return sub_1C4F84D74(v9, (a3 + 1), a4);
}

llvm::APFloatBase *sub_1C4FA2DF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  BOOL v11;
  int v12;
  int v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  uint64_t v19;
  llvm::APFloatBase *result;
  unsigned int v21;
  int v22;
  llvm::APInt **v23;
  uint64_t v24;
  llvm::APInt *v25;

  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 < 0x1C)
  {
    if (v8 != 5)
      return 0;
    v14 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v16) = v14 - 13;
    LODWORD(v16) = v14 - 13;
    v15 = v16 >> 1;
    v11 = v15 > 6;
    v17 = (1 << v15) & 0x47;
    if (v11 || v17 == 0)
      return 0;
    v24 = 0;
    v25 = 0;
    v23 = &v25;
    if (v14 != 17)
      return 0;
    v19 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    if (*(_QWORD *)v19 != a1)
      return 0;
    result = sub_1C4D8A004((uint64_t)&v23, *(llvm::Constant **)(v19 + 32));
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    HIDWORD(v10) = v8 - 41;
    LODWORD(v10) = v8 - 41;
    v9 = v10 >> 1;
    v11 = v9 > 6;
    v12 = (1 << v9) & 0x47;
    if (v11 || v12 == 0)
      return 0;
    v24 = 0;
    v25 = 0;
    v23 = &v25;
    if (v8 != 45
      || *(_QWORD *)(a2 - 64) != a1
      || (sub_1C4D89F84((uint64_t)&v23, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
    {
      return 0;
    }
  }
  if ((*(_BYTE *)(a2 + 17) & 6) == 0)
    return 0;
  v21 = *((_DWORD *)v25 + 2);
  if (v21 <= 0x40)
  {
    if (*(_QWORD *)v25 < 2uLL)
      return 0;
    return (llvm::APFloatBase *)sub_1C4F84D74(a1, (a3 + 1), a4);
  }
  v22 = llvm::APInt::countLeadingZerosSlowCase(v25);
  result = 0;
  if (v22 != v21 && v22 != v21 - 1)
    return (llvm::APFloatBase *)sub_1C4F84D74(a1, (a3 + 1), a4);
  return result;
}

llvm::APFloatBase *sub_1C4FA2F64(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  BOOL v11;
  int v12;
  int v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  uint64_t v19;
  llvm::APFloatBase *result;
  unsigned int v21;
  llvm::APInt **v22;
  uint64_t v23;
  llvm::APInt *v24;

  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 < 0x1C)
  {
    if (v8 != 5)
      return 0;
    v14 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v16) = v14 - 13;
    LODWORD(v16) = v14 - 13;
    v15 = v16 >> 1;
    v11 = v15 > 6;
    v17 = (1 << v15) & 0x47;
    if (v11 || v17 == 0)
      return 0;
    v23 = 0;
    v24 = 0;
    v22 = &v24;
    if (v14 != 25)
      return 0;
    v19 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
    if (*(_QWORD *)v19 != a1)
      return 0;
    result = sub_1C4D8A004((uint64_t)&v22, *(llvm::Constant **)(v19 + 32));
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    HIDWORD(v10) = v8 - 41;
    LODWORD(v10) = v8 - 41;
    v9 = v10 >> 1;
    v11 = v9 > 6;
    v12 = (1 << v9) & 0x47;
    if (v11 || v12 == 0)
      return 0;
    v23 = 0;
    v24 = 0;
    v22 = &v24;
    if (v8 != 53
      || *(_QWORD *)(a2 - 64) != a1
      || (sub_1C4D89F84((uint64_t)&v22, *(unsigned __int8 **)(a2 - 32)) & 1) == 0)
    {
      return 0;
    }
  }
  if ((*(_BYTE *)(a2 + 17) & 6) != 0)
  {
    v21 = *((_DWORD *)v24 + 2);
    if (v21 > 0x40)
    {
      if (llvm::APInt::countLeadingZerosSlowCase(v24) != v21)
        return (llvm::APFloatBase *)sub_1C4F84D74(a1, (a3 + 1), a4);
    }
    else if (*(_QWORD *)v24)
    {
      return (llvm::APFloatBase *)sub_1C4F84D74(a1, (a3 + 1), a4);
    }
  }
  return 0;
}

llvm::APFloatBase *sub_1C4FA30BC(uint64_t a1, unsigned __int8 *a2)
{
  llvm::APFloatBase *result;
  llvm::detail::DoubleAPFloat *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  int v10;
  llvm::APFloatBase *v11;
  int isKnownNeverNaN;
  _QWORD *v14;
  llvm::detail::DoubleAPFloat *v15;
  llvm::detail::DoubleAPFloat *v16;
  llvm::detail::DoubleAPFloat *v17;
  llvm::detail::DoubleAPFloat *v18;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!**(_BYTE **)a1)
  {
    isKnownNeverNaN = llvm::isKnownNeverNaN(a2, **(_QWORD **)(a1 + 8), 0);
    result = 0;
    if (isKnownNeverNaN)
      return (llvm::APFloatBase *)sub_1C4F876C8(a2, **(_QWORD **)(a1 + 8), 0, (**(_DWORD **)(a1 + 16) + 1));
    return result;
  }
  v19[1] = 0;
  v20 = 0;
  v19[0] = &v20;
  result = sub_1C4E7A604((uint64_t)v19, a2);
  if (!(_DWORD)result)
    return result;
  v4 = (llvm::detail::DoubleAPFloat *)(v20 + 8);
  v5 = *(_QWORD *)(v20 + 8);
  if ((_UNKNOWN *)v5 == &unk_1C866F1C0)
  {
    v15 = (llvm::detail::DoubleAPFloat *)(v20 + 8);
    llvm::detail::DoubleAPFloat::DoubleAPFloat(&v21, (uint64_t)&unk_1C866F1C0);
    v4 = v15;
    v5 = v21;
  }
  else
  {
    v21 = *(_QWORD *)(v20 + 8);
    v6 = (*(_DWORD *)(v5 + 8) + 64);
    if (v6 >= 0x80)
    {
      v16 = (llvm::detail::DoubleAPFloat *)(v20 + 8);
      v6 = operator new[]();
      v4 = v16;
      v22 = (_QWORD *)v6;
      v5 = v21;
      v7 = v24 & 0xF0 | 3;
    }
    else
    {
      v7 = 3;
    }
    v24 = v7;
    v23 = *(_DWORD *)(v5 + 4) - 1;
    v8 = *(_DWORD *)(v5 + 8);
    if ((v8 - 64) < 0xFFFFFF80)
    {
      *(_QWORD *)v6 = 0;
      v17 = v4;
      bzero((void *)(v6 + 8), 8 * (((v8 + 64) >> 6) - 2) + 8);
      v4 = v17;
    }
    else
    {
      v22 = 0;
    }
  }
  if ((_UNKNOWN *)v5 == &unk_1C866F1C0)
  {
    v18 = v4;
    llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)&v21, 0);
LABEL_24:
    v4 = v18;
    goto LABEL_11;
  }
  v24 = v24 & 0xF0 | 3;
  v23 = *(_DWORD *)(v5 + 4) - 1;
  v9 = *(_DWORD *)(v5 + 8);
  if ((v9 - 64) < 0xFFFFFF80)
  {
    v14 = v22;
    *v22 = 0;
    v18 = v4;
    bzero(v14 + 1, 8 * (((v9 + 64) >> 6) - 2) + 8);
    goto LABEL_24;
  }
  v22 = 0;
LABEL_11:
  if (*(_UNKNOWN **)v4 == &unk_1C866F1C0)
    v10 = llvm::detail::DoubleAPFloat::compare(v4, (const llvm::detail::DoubleAPFloat *)&v21);
  else
    llvm::detail::IEEEFloat::compare(v4, (const llvm::detail::IEEEFloat *)&v21);
  result = (llvm::APFloatBase *)(v10 == 2);
  if ((_UNKNOWN *)v21 == &unk_1C866F1C0)
  {
    v11 = result;
    sub_1C4773C74((uint64_t *)&v22);
    return v11;
  }
  if ((*(_DWORD *)(v21 + 8) - 64) <= 0xFFFFFF7F && v22)
  {
    v11 = result;
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
    return v11;
  }
  return result;
}

char *sub_1C4FA33AC(uint64_t a1, llvm::Type **a2, uint64_t a3, uint64_t a4, uint64_t a5, llvm::Instruction *a6)
{
  llvm::Type **v9;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  char *result;
  llvm::Type **v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t InsertedValue;
  uint64_t v21;
  void *v22;
  const char *v23;
  __int16 v24;

  v9 = a2;
  if (a3 && *(_BYTE *)(a3 + 8) == 16)
  {
    v12 = *(unsigned int *)(a3 + 12);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = *(_DWORD *)(a4 + 8);
      v15 = (char *)a2;
      while (1)
      {
        if (v14 >= *(_DWORD *)(a4 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v14 + 1, 4);
          v14 = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v14) = v13;
        ++*(_DWORD *)(a4 + 8);
        result = (char *)sub_1C4FA33AC(a1, v15, *(_QWORD *)(*(_QWORD *)(a3 + 16) + 8 * v13), a4, a5, a6);
        v14 = *(_DWORD *)(a4 + 8) - 1;
        *(_DWORD *)(a4 + 8) = v14;
        if (!result)
          break;
        ++v13;
        v15 = result;
        if (v12 == v13)
          return result;
      }
      if (v15 != (char *)v9)
      {
        do
        {
          v17 = (llvm::Type **)*((_QWORD *)v15 - 8);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v15 + 5) + 40, (uint64_t ***)v15);
          v18 = *((_QWORD *)v15 + 3);
          v19 = (_QWORD *)*((_QWORD *)v15 + 4);
          *v19 = v18;
          *(_QWORD *)(v18 + 8) = v19;
          *((_QWORD *)v15 + 3) = 0;
          *((_QWORD *)v15 + 4) = 0;
          llvm::Value::deleteValue((llvm::Value *)v15);
          v15 = (char *)v17;
        }
        while (v17 != v9);
      }
      v9 = 0;
    }
    else
    {
      result = (char *)a2;
      if (a2)
        return result;
    }
  }
  InsertedValue = llvm::FindInsertedValue(a1, *(_QWORD *)a4, *(unsigned int *)(a4 + 8), 0);
  result = 0;
  if (InsertedValue)
  {
    v21 = *(unsigned int *)(a4 + 8) - (unint64_t)a5;
    v22 = (void *)(*(_QWORD *)a4 + 4 * a5);
    v23 = "tmp";
    v24 = 259;
    return sub_1C61BD4C4(v9, InsertedValue, v22, v21, (uint64_t)&v23, a6);
  }
  return result;
}

BOOL sub_1C4FA3558(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _BOOL8 result;
  unsigned int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 == a2)
    return 1;
  if (a3 > 1)
    return 0;
  result = 0;
  if (!a2)
    return result;
  v6 = *(unsigned __int8 *)(a2 + 16);
  if (v6 < 0x1C)
    return result;
  v7 = *(_DWORD *)(a2 + 20);
  if ((v7 & 0x40000000) == 0)
  {
    v8 = v7 & 0x7FFFFFF;
    v9 = (_QWORD *)(a2 - 32 * v8);
    if (!v8)
      goto LABEL_16;
LABEL_11:
    v10 = a3 + 1;
    v11 = 32 * v8;
    while (!llvm::propagatesPoison((uint64_t)v9) || (sub_1C4FA3558(a1, *v9, v10) & 1) == 0)
    {
      v9 += 4;
      v11 -= 32;
      if (!v11)
      {
        v6 = *(unsigned __int8 *)(a2 + 16);
        goto LABEL_16;
      }
    }
    return 1;
  }
  v9 = *(_QWORD **)(a2 - 8);
  v8 = v7 & 0x7FFFFFF;
  if (v8)
    goto LABEL_11;
LABEL_16:
  if (v6 != 92)
    return 0;
  v12 = *(_QWORD *)(a2 - 32);
  v13 = sub_1C4E8FD48(v12);
  result = 0;
  if (v12 && v13)
  {
    if (a1 && *(_BYTE *)(a1 + 16) == 92 && v12 == *(_QWORD *)(a1 - 32))
      return 1;
    v14 = *(_DWORD *)(v12 + 20);
    v15 = v14 & 0x7FFFFFF;
    v16 = (_QWORD *)(v12 - 32 * v15);
    v17 = *(unsigned __int8 *)(v12 + 16);
    if (v17 == 84)
    {
      v18 = 0;
    }
    else if (v17 == 39)
    {
      v18 = (*(_DWORD *)(v12 + 80) + 1);
    }
    else
    {
      v18 = 2;
    }
    if (v14 < 0 && (v22 = *(v16 - 1), (v22 & 0xFFFFFFFF0) != 0))
      v19 = (*((_DWORD *)v16 - 3) - *(_DWORD *)((char *)v16 - v22));
    else
      v19 = 0;
    v20 = v12 - 32 * v18 - 32 * v19 - 32;
    if (v16 != (_QWORD *)v20)
    {
      v21 = 32 * v15 - 32 * v18 - 32 * v19 - 32;
      while (*v16 != a1)
      {
        v16 += 4;
        v21 -= 32;
        if (!v21)
        {
          v16 = (_QWORD *)(v12 - 32 * v18 - 32 * v19 - 32);
          break;
        }
      }
    }
    return v16 != (_QWORD *)v20;
  }
  return result;
}

uint64_t sub_1C4FA370C(unsigned __int8 *a1)
{
  int v2;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v6;
  char *v7;
  int v8;
  uint64_t result;
  int v12;
  _BOOL4 v13;
  char v14;
  uint64_t v15;
  uint64_t v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v2 = a1[16];
  if (!a1 || v2 != 17)
  {
    if (v2 != 15 || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 8) > 6u)
      return 0;
    v4 = *(_DWORD *)(*(_QWORD *)a1 + 32);
    if (!v4)
      return 1;
    v5 = 0;
    v6 = v4 - 1;
    while (1)
    {
      llvm::ConstantDataSequential::getElementAsAPFloat((llvm::ConstantDataSequential *)a1);
      if ((_UNKNOWN *)v15 == &unk_1C866F1C0)
        v7 = (char *)v16[0];
      else
        v7 = &v14;
      v8 = v7[28] & 7;
      result = v8 != 3;
      if ((_UNKNOWN *)v15 == &unk_1C866F1C0)
      {
        v12 = v8;
        v13 = v8 != 3;
        sub_1C4773C74(v16);
      }
      else
      {
        if ((*(_DWORD *)(v15 + 8) - 64) > 0xFFFFFF7F || v16[0] == 0)
          goto LABEL_18;
        v12 = v8;
        v13 = v8 != 3;
        MEMORY[0x1CAA32F9C](v16[0], 0x1000C8000313F17);
      }
      v8 = v12;
      result = v13;
LABEL_18:
      if (v8 == 3 || v6 == v5++)
        return result;
    }
  }
  if (*((_UNKNOWN **)a1 + 4) == &unk_1C866F1C0)
    v3 = (unsigned __int8 *)*((_QWORD *)a1 + 5);
  else
    v3 = a1 + 24;
  return (v3[28] & 7) != 3;
}

BOOL sub_1C4FA3894(unsigned __int8 *a1, char a2)
{
  int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  char *v8;
  char v9;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  if ((a2 & 2) != 0)
    return 1;
  v3 = a1[16];
  if (!a1 || v3 != 17)
  {
    if (!a1 || v3 != 15)
      return v3 == 13;
    if (*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 8) > 6u)
      return 0;
    v5 = *(_DWORD *)(*(_QWORD *)a1 + 32);
    if (v5)
    {
      v6 = 0;
      v7 = 0;
      while (1)
      {
        llvm::ConstantDataSequential::getElementAsAPFloat((llvm::ConstantDataSequential *)a1);
        if ((_UNKNOWN *)v14 == &unk_1C866F1C0)
          v8 = (char *)v15[0];
        else
          v8 = &v13;
        v9 = v8[28];
        if ((_UNKNOWN *)v14 == &unk_1C866F1C0)
        {
          v12 = v9;
          sub_1C4773C74(v15);
        }
        else
        {
          if ((*(_DWORD *)(v14 + 8) - 64) > 0xFFFFFF7F || v15[0] == 0)
            goto LABEL_20;
          v12 = v9;
          MEMORY[0x1CAA32F9C]();
        }
        v9 = v12;
LABEL_20:
        if ((v9 & 7) != 1)
        {
          v6 = ++v7 >= v5;
          if (v5 != v7)
            continue;
        }
        return v6;
      }
    }
    return 1;
  }
  if (*((_UNKNOWN **)a1 + 4) == &unk_1C866F1C0)
    v4 = (unsigned __int8 *)*((_QWORD *)a1 + 5);
  else
    v4 = a1 + 24;
  return (v4[28] & 7) != 1;
}

uint64_t sub_1C4FA3A38(_QWORD *a1, uint64_t a2)
{
  _BOOL4 v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  _QWORD *v9;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 40)
    {
      v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(_QWORD **)(a2 - 8);
      else
        v9 = (_QWORD *)(a2 - 32 * (v8 & 0x7FFFFFF));
      v2 = *a1 == *v9;
    }
    else
    {
      v2 = 0;
    }
  }
  return (v7 ^ 1) & v2;
}

llvm::Value **sub_1C4FA3AA0(unsigned __int8 *a1)
{
  llvm::Value **v2;
  const llvm::APInt *v3;
  llvm::ConstantInt **v4;
  const void **v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  size_t v9;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = 0;
  v14 = &v16;
  if (sub_1C4D9EC28(&v14, 30, (uint64_t)a1))
    return (llvm::Value **)v16;
  v13 = 0;
  v14 = &v13;
  v15 = 0;
  v2 = 0;
  if (sub_1C4D89F84((uint64_t)&v14, a1))
  {
    v4 = *(llvm::ConstantInt ***)a1;
    v5 = (const void **)v13;
    v6 = *(unsigned int *)(v13 + 8);
    v12 = v6;
    if (v6 > 0x40)
    {
      v9 = ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8;
      v11 = (void *)operator new[]();
      memcpy(v11, *v5, v9);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v11);
      LODWORD(v6) = v12;
      v8 = (uint64_t *)v11;
    }
    else
    {
      v7 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
      if (!(_DWORD)v6)
        v7 = 0;
      v8 = (uint64_t *)(v7 & ~*(_QWORD *)v13);
    }
    LODWORD(v15) = v6;
    v14 = v8;
    v2 = llvm::ConstantInt::get(v4, (llvm::Type *)&v14, v3);
    if (v15 >= 0x41 && v14)
      MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  }
  return v2;
}

uint64_t sub_1C4FA3BD8(unsigned int a1, uint64_t a2, uint64_t a3, const llvm::DataLayout *a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  int v27;
  uint64_t *v28;
  _QWORD *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  int8x8_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int8x8_t v59;
  uint64_t *v60;
  uint64_t v61;
  unsigned int v62;
  const llvm::DataLayout *v63;
  int8x8_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;

  result = 0;
  if (a1 > 0x29 || ((1 << a1) & 0x2A90000AA00) == 0)
    return result;
  v69 = v5;
  v70 = v6;
  if (a2 == a3)
    return 1;
  if (a1 != 37)
  {
    if (a1 == 41)
    {
      v59 = 0;
      v63 = (const llvm::DataLayout *)a2;
      v64 = &v59;
      v65 = 0;
      v11 = *(unsigned __int8 *)(a3 + 16);
      if (v11 < 0x1C)
      {
        if (v11 != 5)
          return 0;
        v14 = *(unsigned __int16 *)(a3 + 18);
        HIDWORD(v18) = v14 - 13;
        LODWORD(v18) = v14 - 13;
        v17 = v18 >> 1;
        if (v17 > 6 || ((1 << v17) & 0x47) == 0)
          return 0;
      }
      else
      {
        HIDWORD(v13) = v11 - 41;
        LODWORD(v13) = v11 - 41;
        v12 = v13 >> 1;
        if (v12 > 6 || ((1 << v12) & 0x47) == 0)
          return 0;
        v14 = v11 - 28;
      }
      if (v14 == 13 && (*(_BYTE *)(a3 + 17) & 4) != 0)
      {
        v19 = *(_DWORD *)(a3 + 20);
        v20 = (v19 & 0x40000000) != 0 ? *(_QWORD *)(a3 - 8) : a3 - 32 * (v19 & 0x7FFFFFF);
        if (*(_QWORD *)v20 == a2)
        {
          result = (uint64_t)sub_1C4D89F84((uint64_t)&v64, *(unsigned __int8 **)(v20 + 32));
          if ((_DWORD)result)
          {
            v29 = (_QWORD *)v59;
            v30 = *(_DWORD *)(*(_QWORD *)&v59 + 8);
            v31 = v30 - 1;
            if (v30 >= 0x41)
              v29 = (_QWORD *)(**(_QWORD **)&v59 + 8 * (v31 >> 6));
            return ((*v29 >> v31) & 1) == 0;
          }
          return result;
        }
      }
    }
    return 0;
  }
  v58 = 0;
  v63 = (const llvm::DataLayout *)a2;
  v64 = (int8x8_t *)&v58;
  v65 = 0;
  if ((sub_1C4FA41C4(&v63, a3) & 1) != 0)
    return 1;
  v56 = 0;
  v57 = 0;
  v55 = 0;
  v63 = (const llvm::DataLayout *)&v57;
  v64 = (int8x8_t *)&v56;
  v65 = 0;
  v21 = *(unsigned __int8 *)(a2 + 16);
  if (v21 < 0x1C)
  {
    if (v21 != 5)
      goto LABEL_47;
    v24 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v26) = v24 - 13;
    LODWORD(v26) = v24 - 13;
    v25 = v26 >> 1;
    if (v25 > 6 || ((1 << v25) & 0x47) == 0)
      goto LABEL_47;
  }
  else
  {
    HIDWORD(v23) = v21 - 41;
    LODWORD(v23) = v21 - 41;
    v22 = v23 >> 1;
    if (v22 > 6 || ((1 << v22) & 0x47) == 0)
      goto LABEL_47;
    v24 = v21 - 28;
  }
  if (v24 != 13 || (*(_BYTE *)(a2 + 17) & 2) == 0)
    goto LABEL_47;
  v27 = *(_DWORD *)(a2 + 20);
  v28 = (v27 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v27 & 0x7FFFFFF));
  v32 = *v28;
  if (!v32
    || ((v57 = v32, v33 = *(_DWORD *)(a2 + 20), (v33 & 0x40000000) != 0)
      ? (v34 = *(_QWORD *)(a2 - 8))
      : (v34 = a2 - 32 * (v33 & 0x7FFFFFF)),
        !sub_1C4D89F84((uint64_t)&v64, *(unsigned __int8 **)(v34 + 32))
     || (v59 = (int8x8_t)v57, v60 = &v55, v61 = 0, (sub_1C4FA41C4(&v59, a3) & 1) == 0)))
  {
LABEL_47:
    v63 = (const llvm::DataLayout *)&v57;
    v64 = (int8x8_t *)&v56;
    v65 = 0;
    v37 = *(unsigned __int8 *)(a2 + 16);
    if (v37 == 5)
    {
      if (*(_WORD *)(a2 + 18) != 29)
        return 0;
      v38 = a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
      if (!*(_QWORD *)v38)
        return 0;
      v57 = *(_QWORD *)v38;
      if ((sub_1C4D8A004((uint64_t)&v64, *(llvm::Constant **)(v38 + 32)) & 1) == 0)
        return 0;
    }
    else
    {
      if (v37 != 57)
        return 0;
      if (!*(_QWORD *)(a2 - 64))
        return 0;
      v57 = *(_QWORD *)(a2 - 64);
      if (!sub_1C4D89F84((uint64_t)&v64, *(unsigned __int8 **)(a2 - 32)))
        return 0;
    }
    v59 = (int8x8_t)v57;
    v60 = &v55;
    v61 = 0;
    v39 = *(unsigned __int8 *)(a3 + 16);
    if (v39 == 5)
    {
      if (*(_WORD *)(a3 + 18) != 29)
        return 0;
      v40 = a3 - 32 * (*(_DWORD *)(a3 + 20) & 0x7FFFFFF);
      if (v57 != *(_QWORD *)v40
        || (sub_1C4D8A004((uint64_t)&v60, *(llvm::Constant **)(v40 + 32)) & 1) == 0)
      {
        return 0;
      }
    }
    else if (v39 != 57
           || v57 != *(_QWORD *)(a3 - 64)
           || !sub_1C4D89F84((uint64_t)&v60, *(unsigned __int8 **)(a3 - 32)))
    {
      return 0;
    }
    v41 = *(_DWORD *)(v56 + 8);
    LODWORD(v60) = v41;
    if (v41 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v59, 0, 0);
      v62 = v41;
      llvm::APInt::initSlowCase((llvm::APInt *)&v61, 0, 0);
    }
    else
    {
      v62 = v41;
      v59 = 0;
      v61 = 0;
    }
    if (!v57 || *(unsigned __int8 *)(v57 + 16) < 0x1Cu || (v42 = v57, !*(_QWORD *)(v57 + 40)))
      v42 = 0;
    v63 = a4;
    v64 = 0;
    v66 = 0;
    v67 = 0;
    v65 = v42;
    v68 = 1;
    sub_1C4F82B7C(v57, &v59, a5 + 1, &v63);
    v43 = *(unsigned int *)(v56 + 8);
    if (v43 > 0x40)
    {
      v45 = 0;
      v44 = v59;
      while ((*(_QWORD *)(*(_QWORD *)v56 + v45) & ~*(_QWORD *)(*(_QWORD *)&v59 + v45)) == 0)
      {
        v45 += 8;
        if ((((unint64_t)(v43 + 63) >> 3) & 0x3FFFFFF8) == v45)
          goto LABEL_78;
      }
    }
    else
    {
      v44 = v59;
      if ((*(_QWORD *)v56 & ~*(_QWORD *)&v59) == 0)
      {
LABEL_78:
        v46 = *(unsigned int *)(v55 + 8);
        if (v46 > 0x40)
        {
          v47 = (unint64_t)(v46 + 63) >> 6;
          v48 = *(uint64_t **)v55;
          while (1)
          {
            v50 = *v48++;
            v49 = v50;
            v51 = **(_QWORD **)&v44;
            *(_QWORD *)&v44 += 8;
            if ((v49 & ~v51) != 0)
              break;
            if (!--v47)
              goto LABEL_80;
          }
        }
        else if ((*(_QWORD *)v55 & ~*(_QWORD *)&v44) == 0)
        {
LABEL_80:
          if (v62 >= 0x41 && v61)
            MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
          if (v60 >= 0x41 && *(_QWORD *)&v59)
            MEMORY[0x1CAA32F9C](*(_QWORD *)&v59, 0x1000C8000313F17);
          goto LABEL_43;
        }
      }
    }
    if (v62 >= 0x41 && v61)
      MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
    if (v60 >= 0x41 && *(_QWORD *)&v59)
      MEMORY[0x1CAA32F9C](*(_QWORD *)&v59, 0x1000C8000313F17);
    return 0;
  }
LABEL_43:
  v35 = *(unsigned int *)(v56 + 8);
  if (v35 > 0x40)
  {
    v52 = ((unint64_t)(v35 + 63) >> 3) & 0x3FFFFFF8;
    do
    {
      if (!v52)
      {
        v36 = 0;
        return v36 < 1;
      }
      v53 = *(_QWORD *)(*(_QWORD *)v56 - 8 + v52);
      v54 = *(_QWORD *)(*(_QWORD *)v55 - 8 + v52);
      v52 -= 8;
    }
    while (v53 == v54);
    if (v53 > v54)
      v36 = 1;
    else
      v36 = -1;
  }
  else
  {
    v36 = *(_QWORD *)v56 > *(_QWORD *)v55;
    if (*(_QWORD *)v56 < *(_QWORD *)v55)
      v36 = -1;
  }
  return v36 < 1;
}

llvm::APFloatBase *sub_1C4FA41C4(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  int v11;
  int v13;
  uint64_t v14;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 < 0x1C)
  {
    if (v2 != 5)
      return 0;
    v8 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v10) = v8 - 13;
    LODWORD(v10) = v8 - 13;
    v9 = v10 >> 1;
    v5 = v9 > 6;
    v11 = (1 << v9) & 0x47;
    if (v5 || v11 == 0)
      return 0;
  }
  else
  {
    HIDWORD(v4) = v2 - 41;
    LODWORD(v4) = v2 - 41;
    v3 = v4 >> 1;
    v5 = v3 > 6;
    v6 = (1 << v3) & 0x47;
    if (v5 || v6 == 0)
      return 0;
    v8 = v2 - 28;
  }
  if (v8 != 13 || (*(_BYTE *)(a2 + 17) & 2) == 0)
    return 0;
  v13 = *(_DWORD *)(a2 + 20);
  v14 = (v13 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v13 & 0x7FFFFFF);
  if (*a1 != *(_QWORD *)v14)
    return 0;
  return sub_1C4D89F84((uint64_t)(a1 + 1), *(unsigned __int8 **)(v14 + 32));
}

uint64_t sub_1C4FA4278(_QWORD **a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t *v7;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a2)
    return 0;
  v3 = *a2;
  v4 = *(_DWORD *)(*a2 + 8);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**(_QWORD **)(v3 + 16) + 8);
  if (v4 != 269)
    return 0;
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 == 85)
  {
    v9 = 0;
    v10 = (unsigned __int8 *)*(a2 - 8);
    if (!v10 || v10[16] > 0x14u)
      return v9 & v3;
    v11 = *(a2 - 12);
    v12 = *(a2 - 4);
    if (llvm::Constant::isOneValue((llvm::Constant *)v10))
    {
      if (v11 && (**a1 = v11, v12))
      {
        *a1[1] = v12;
        v9 = 1;
        LODWORD(v3) = 1;
      }
      else
      {
        LODWORD(v3) = 0;
        v9 = 1;
      }
      return v9 & v3;
    }
LABEL_16:
    v9 = 0;
    return v9 & v3;
  }
  if (v5 != 57)
    goto LABEL_16;
  v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 0x40000000) != 0)
    v7 = (uint64_t *)*(a2 - 1);
  else
    v7 = &a2[-4 * (v6 & 0x7FFFFFF)];
  v13 = *v7;
  if (*v7)
  {
    v14 = v7[4];
    **a1 = v13;
    if (v14)
    {
      *a1[1] = v14;
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1C4FA438C(_QWORD **a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t *v7;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a2)
    return 0;
  v3 = *a2;
  v4 = *(_DWORD *)(*a2 + 8);
  if ((v4 & 0xFE) == 0x12)
    v4 = *(_DWORD *)(**(_QWORD **)(v3 + 16) + 8);
  if (v4 != 269)
    return 0;
  v5 = *((unsigned __int8 *)a2 + 16);
  if (v5 == 85)
  {
    v9 = 0;
    v10 = (unsigned __int8 *)*(a2 - 4);
    if (!v10 || v10[16] > 0x14u)
      return v9 & v3;
    v11 = *(a2 - 12);
    v12 = *(a2 - 8);
    if (llvm::Constant::isNullValue((llvm::Constant *)v10))
    {
      if (v11 && (**a1 = v11, v12))
      {
        *a1[1] = v12;
        v9 = 1;
        LODWORD(v3) = 1;
      }
      else
      {
        LODWORD(v3) = 0;
        v9 = 1;
      }
      return v9 & v3;
    }
LABEL_16:
    v9 = 0;
    return v9 & v3;
  }
  if (v5 != 56)
    goto LABEL_16;
  v6 = *((_DWORD *)a2 + 5);
  if ((v6 & 0x40000000) != 0)
    v7 = (uint64_t *)*(a2 - 1);
  else
    v7 = &a2[-4 * (v6 & 0x7FFFFFF)];
  v13 = *v7;
  if (*v7)
  {
    v14 = v7[4];
    **a1 = v13;
    if (v14)
    {
      *a1[1] = v14;
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1C4FA44A0(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Constant **v11;
  llvm::Constant *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 != 5)
  {
    if (v4 != 58)
      return 0;
    v5 = *(_QWORD *)(a2 - 64);
    v6 = *(unsigned __int8 *)(v5 + 16);
    if (v6 == 5)
    {
      if (*(_WORD *)(v5 + 18) != 29)
        goto LABEL_28;
      v16 = (uint64_t *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF));
      v7 = *v16;
      if (*a1 == *v16)
      {
        v17 = v16[4];
        if (a1[1] == v17)
          goto LABEL_27;
      }
      else
      {
        v17 = v16[4];
      }
      if (*a1 != v17)
        goto LABEL_28;
    }
    else
    {
      if (v6 != 57)
        goto LABEL_28;
      v7 = *(_QWORD *)(v5 - 64);
      if (*a1 == v7)
      {
        v8 = *(_QWORD *)(v5 - 32);
        if (a1[1] == v8)
          goto LABEL_27;
      }
      else
      {
        v8 = *(_QWORD *)(v5 - 32);
      }
      if (*a1 != v8)
        goto LABEL_28;
    }
    if (a1[1] != v7)
      goto LABEL_28;
LABEL_27:
    if ((sub_1C4D9ED34((uint64_t)(a1 + 2), *(llvm::Constant **)(a2 - 32)) & 1) == 0)
    {
LABEL_28:
      v20 = *(_QWORD *)(a2 - 32);
      v21 = *(unsigned __int8 *)(v20 + 16);
      if (v21 != 5)
      {
        if (v21 != 57)
          return 0;
        v22 = *(_QWORD *)(v20 - 64);
        if (*a1 != v22)
        {
          v23 = *(_QWORD *)(v20 - 32);
          goto LABEL_36;
        }
        v23 = *(_QWORD *)(v20 - 32);
        if (a1[1] != v23)
        {
LABEL_36:
          if (*a1 == v23)
          {
LABEL_40:
            if (a1[1] == v22)
              return sub_1C4D9ED34((uint64_t)(a1 + 2), *(llvm::Constant **)(a2 - 64));
          }
          return 0;
        }
        return sub_1C4D9ED34((uint64_t)(a1 + 2), *(llvm::Constant **)(a2 - 64));
      }
      if (*(_WORD *)(v20 + 18) != 29)
        return 0;
      v24 = (uint64_t *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF));
      v22 = *v24;
      if (*a1 == *v24)
      {
        v25 = v24[4];
        if (a1[1] == v25)
          return sub_1C4D9ED34((uint64_t)(a1 + 2), *(llvm::Constant **)(a2 - 64));
      }
      else
      {
        v25 = v24[4];
      }
      if (*a1 == v25)
        goto LABEL_40;
      return 0;
    }
    return 1;
  }
  if (*(_WORD *)(a2 + 18) != 30)
    return 0;
  v9 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
  v10 = -v9;
  v11 = (llvm::Constant **)(a2 - 32 * v9);
  v12 = *v11;
  v13 = *((unsigned __int8 *)*v11 + 16);
  if (v13 == 5)
  {
    if (*((_WORD *)v12 + 9) != 29)
      goto LABEL_48;
    v18 = (uint64_t *)((char *)v12 - 32 * (*((_DWORD *)v12 + 5) & 0x7FFFFFF));
    v14 = *v18;
    if (*a1 == *v18)
    {
      v19 = v18[4];
      if (a1[1] == v19)
        goto LABEL_45;
    }
    else
    {
      v19 = v18[4];
    }
    if (*a1 != v19)
      goto LABEL_48;
LABEL_44:
    if (a1[1] != v14)
      goto LABEL_48;
    goto LABEL_45;
  }
  if (v13 != 57)
    goto LABEL_48;
  v14 = *((_QWORD *)v12 - 8);
  if (*a1 != v14)
  {
    v15 = *((_QWORD *)v12 - 4);
    goto LABEL_22;
  }
  v15 = *((_QWORD *)v12 - 4);
  if (a1[1] != v15)
  {
LABEL_22:
    if (*a1 != v15)
      goto LABEL_48;
    goto LABEL_44;
  }
LABEL_45:
  if ((sub_1C4D9EED4((uint64_t)(a1 + 2), v11[4]) & 1) != 0)
    return 1;
  v10 = -(uint64_t)(*(_DWORD *)(a2 + 20) & 0x7FFFFFF);
LABEL_48:
  v27 = a2 + 32 * v10;
  v28 = *(_QWORD *)(v27 + 32);
  v29 = *(unsigned __int8 *)(v28 + 16);
  if (v29 == 5)
  {
    if (*(_WORD *)(v28 + 18) != 29)
      return 0;
    v32 = (uint64_t *)(v28 - 32 * (*(_DWORD *)(v28 + 20) & 0x7FFFFFF));
    v30 = *v32;
    if (*a1 == *v32)
    {
      v33 = v32[4];
      if (a1[1] == v33)
        return sub_1C4D9EED4((uint64_t)(a1 + 2), *(llvm::Constant **)v27);
    }
    else
    {
      v33 = v32[4];
    }
    if (*a1 != v33)
      return 0;
  }
  else
  {
    if (v29 != 57)
      return 0;
    v30 = *(_QWORD *)(v28 - 64);
    if (*a1 == v30)
    {
      v31 = *(_QWORD *)(v28 - 32);
      if (a1[1] == v31)
        return sub_1C4D9EED4((uint64_t)(a1 + 2), *(llvm::Constant **)v27);
    }
    else
    {
      v31 = *(_QWORD *)(v28 - 32);
    }
    if (*a1 != v31)
      return 0;
  }
  if (a1[1] != v30)
    return 0;
  return sub_1C4D9EED4((uint64_t)(a1 + 2), *(llvm::Constant **)v27);
}

uint64_t sub_1C4FA47D4(int **a1, uint64_t a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  BOOL v6;
  char v7;

  result = 0;
  if (a2 && *(_BYTE *)(a2 + 16) == 81)
  {
    v5 = *(unsigned __int8 **)(a2 - 32);
    if (v5)
      v6 = v5[16] > 0x14u;
    else
      v6 = 1;
    if (!v6
      && ((llvm::Constant::isNullValue(*(llvm::Constant **)(a2 - 32)) & 1) != 0
       || (sub_1C4E71060((uint64_t)&v7, (llvm::Constant *)v5) & 1) != 0))
    {
      **a1 = *(_WORD *)(a2 + 18) & 0x3F;
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL sub_1C4FA4864(uint64_t a1, llvm::Constant *a2)
{
  llvm::APFloatBase *SplatValue;
  char *v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  int v8;
  llvm::Type *v9;
  llvm::UndefValue *AggregateElement;
  int v11;
  char *v12;

  if (!a2 || *((_BYTE *)a2 + 16) != 17)
  {
    v6 = *(_QWORD *)a2;
    if (*(_QWORD *)a2)
      v7 = (*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 18;
    else
      v7 = 0;
    if (v7)
    {
      SplatValue = llvm::Constant::getSplatValue(a2, 0);
      if (SplatValue && *((_BYTE *)SplatValue + 16) == 17)
        goto LABEL_4;
      if (*(_BYTE *)(v6 + 8) == 18)
      {
        v8 = *(_DWORD *)(v6 + 32);
        if (v8)
        {
          v9 = 0;
          v5 = 0;
          while (1)
          {
            AggregateElement = llvm::Constant::getAggregateElement(a2, v9);
            if (!AggregateElement)
              break;
            v11 = *((unsigned __int8 *)AggregateElement + 16);
            if ((v11 - 11) >= 2)
            {
              if (v11 != 17)
                break;
              v12 = (char *)AggregateElement + 24;
              if (*((_UNKNOWN **)AggregateElement + 4) == &unk_1C866F1C0)
                v12 = (char *)*((_QWORD *)AggregateElement + 5);
              if ((v12[28] & 0xF) != 3)
                break;
              v5 = 1;
            }
            v9 = (llvm::Type *)((_DWORD)v9 + 1);
            if (v8 == (_DWORD)v9)
              return v5;
          }
        }
      }
    }
    return 0;
  }
  SplatValue = a2;
LABEL_4:
  v4 = (char *)SplatValue + 24;
  if (*((_UNKNOWN **)SplatValue + 4) == &unk_1C866F1C0)
    v4 = (char *)*((_QWORD *)SplatValue + 5);
  return (v4[28] & 0xF) == 3;
}

uint64_t sub_1C4FA498C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  BOOL v7;
  int v8;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  int v13;
  uint64_t result;
  int v16;
  llvm::Constant **v17;
  int v18;
  uint64_t v19;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (v4 < 0x1C)
  {
    if (v4 != 5)
      return 0;
    v10 = *(unsigned __int16 *)(a2 + 18);
    HIDWORD(v12) = v10 - 13;
    LODWORD(v12) = v10 - 13;
    v11 = v12 >> 1;
    v7 = v11 > 6;
    v13 = (1 << v11) & 0x47;
    if (v7 || v13 == 0)
      return 0;
  }
  else
  {
    HIDWORD(v6) = v4 - 41;
    LODWORD(v6) = v4 - 41;
    v5 = v6 >> 1;
    v7 = v5 > 6;
    v8 = (1 << v5) & 0x47;
    if (v7 || v8 == 0)
      return 0;
    v10 = v4 - 28;
  }
  if (v10 != 15 || (*(_BYTE *)(a2 + 17) & 4) == 0)
    return 0;
  v16 = *(_DWORD *)(a2 + 20);
  if ((v16 & 0x40000000) != 0)
    v17 = *(llvm::Constant ***)(a2 - 8);
  else
    v17 = (llvm::Constant **)(a2 - 32 * (v16 & 0x7FFFFFF));
  result = sub_1C4D8AC3C(a1, *v17);
  if ((_DWORD)result)
  {
    v18 = *(_DWORD *)(a2 + 20);
    if ((v18 & 0x40000000) != 0)
      v19 = *(_QWORD *)(a2 - 8);
    else
      v19 = a2 - 32 * (v18 & 0x7FFFFFF);
    return *(_QWORD *)(a1 + 8) == *(_QWORD *)(v19 + 32);
  }
  return result;
}

uint64_t sub_1C4FA4A7C()
{
  int v1;
  int *v2;
  int v3;

  v3 = 1;
  v1 = 20;
  v2 = &v1;
  sub_1C61BD588(&v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED7F47D0, &dword_1C475E000);
  v3 = 1;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C617ACEC((uint64_t)&unk_1ED82ECD0, "branch-on-poison-as-ub", &v3, (_BYTE **)&v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82ECD0, &dword_1C475E000);
}

BOOL llvm::hasVectorInstrinsicScalarOpd(llvm *this, int a2)
{
  if (this <= 0x36 && ((1 << (char)this) & 0x50000000000002) != 0)
    return a2 == 1;
  if (((_DWORD)this - 276) > 0x20 || ((1 << (this - 20)) & 0x180000003) == 0)
  {
    if ((_DWORD)this != 239)
      return 0;
    return a2 == 1;
  }
  return a2 == 2;
}

BOOL llvm::hasVectorInstrinsicOverloadedScalarOpd(llvm *this, int a2)
{
  return (_DWORD)this == 239 && a2 == 1;
}

llvm *llvm::getVectorIntrinsicIDForCall(uint64_t a1, uint64_t *a2)
{
  llvm *v2;
  llvm *v3;

  v2 = (llvm *)llvm::getIntrinsicForCallSite(a1, a2);
  v3 = v2;
  if ((_DWORD)v2 && (llvm::isTriviallyVectorizable(v2) & 1) == 0)
  {
    if ((int)v3 <= 125)
    {
      if ((_DWORD)v3 == 7)
        return v3;
      return 0;
    }
    if ((((_DWORD)v3 - 126) > 0x2A || ((1 << (v3 - 126)) & 0x60000000001) == 0)
      && (_DWORD)v3 != 244
      && (_DWORD)v3 != 272)
    {
      return 0;
    }
  }
  return v3;
}

unint64_t llvm::getGEPInductionOperand(llvm *this, const llvm::GetElementPtrInst *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  _BOOL8 v9;
  char v10;
  uint64_t v11;
  unsigned __int8 *v12;
  BOOL v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  llvm::UndefValue *AggregateElement;
  BOOL v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  char v29;
  llvm::UndefValue **v31;
  uint64_t v32;

  v3 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 56) + 40) + 272;
  v4 = (*((_DWORD *)this + 5) & 0x7FFFFFFu) - 1;
  v5 = *((_QWORD *)this + 9);
  sub_1C4768AD0(v3, v5);
  v7 = (unint64_t)(v6 + 7) >> 3;
  v9 = v8 == 1;
  llvm::DataLayout::getAlignment(v3, v5);
  v11 = ((1 << v10) + v7 - 1) & -(1 << v10);
  do
  {
    if (v4 < 2)
      break;
    v12 = (unsigned __int8 *)*((_QWORD *)this + 4 * v4 + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF));
    v13 = !v12 || v12[16] > 0x14u;
    if (v13
      || (llvm::Constant::isNullValue(*((llvm::Constant **)this
                                      + 4 * v4
                                      + -4 * (*((_DWORD *)this + 5) & 0x7FFFFFF))) & 1) == 0
      && (sub_1C4E71060((uint64_t)&v31, (llvm::Constant *)v12) & 1) == 0)
    {
      break;
    }
    v14 = 24;
    if (*((_BYTE *)this + 16) == 62)
      v14 = 64;
    v15 = *((_DWORD *)this + 5);
    if ((v15 & 0x40000000) != 0)
      v16 = (char *)*((_QWORD *)this - 1);
    else
      v16 = (char *)this - 32 * (v15 & 0x7FFFFFF);
    v17 = *(_QWORD *)((char *)this + v14) | 4;
    v31 = (llvm::UndefValue **)(v16 + 32);
    v32 = v17;
    if ((_DWORD)v4 != 2)
    {
      v18 = (v4 - 2) + 1;
      do
      {
        sub_1C4774E38((uint64_t)&v31);
        --v18;
      }
      while (v18 > 1);
      v17 = v32;
    }
    v19 = v17 & 0xFFFFFFFFFFFFFFF8;
    if ((v17 & 4) == 0 || !v19)
    {
      AggregateElement = *v31;
      if (*v31)
        v21 = *((_BYTE *)*v31 + 16) == 16;
      else
        v21 = 0;
      if (!v21)
        AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
      v24 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
      v22 = (unsigned int *)((char *)AggregateElement + 24);
      v23 = v24;
      if (v22[2] < 0x41)
        v23 = v22;
      v19 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 8 * *v23);
    }
    sub_1C4768AD0(v3, v19);
    v26 = (unint64_t)(v25 + 7) >> 3;
    v28 = v27 == 1;
    llvm::DataLayout::getAlignment(v3, v19);
    v4 = (__PAIR64__(v4, ((((1 << v29) + v26 - 1) & -(1 << v29)) != v11) | (v9 ^ v28)) - 1) >> 32;
  }
  while ((((1 << v29) + v26 - 1) & -(1 << v29)) == v11 && v9 == v28);
  return v4;
}

llvm *llvm::stripGetElementPtr(llvm *this, llvm::Value *a2, llvm::ScalarEvolution *a3, llvm::Loop *a4)
{
  llvm *v4;
  unsigned int GEPInductionOperand;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  const llvm::SCEV *SCEVIter;
  uint64_t v21;

  v4 = this;
  if (this && *((_BYTE *)this + 16) == 62)
  {
    GEPInductionOperand = llvm::getGEPInductionOperand(this, a2);
    v8 = *((_DWORD *)v4 + 5);
    v9 = GEPInductionOperand;
    v10 = v8 & 0x7FFFFFF;
    if ((v8 & 0x7FFFFFF) != 0)
    {
      v11 = 0;
      while (v11 == v9)
      {
LABEL_17:
        if (++v11 == v10)
        {
          v21 = *((_DWORD *)v4 + 5) & 0x7FFFFFF;
          return (llvm *)*((_QWORD *)v4 + 4 * v9 + -4 * v21);
        }
      }
      v12 = *((_QWORD *)v4 + 4 * v11 + -4 * (*((_DWORD *)v4 + 5) & 0x7FFFFFF));
      v13 = *((_QWORD *)a2 + 13);
      v14 = *((_DWORD *)a2 + 30);
      if (v14)
      {
        v15 = ((v12 >> 4) ^ (v12 >> 9)) & (v14 - 1);
        v16 = v13 + 48 * v15;
        v17 = *(_QWORD *)(v16 + 24);
        if (v17 == v12)
        {
LABEL_13:
          if (v16 == v13 + 48 * v14 || (SCEVIter = *(const llvm::SCEV **)(v16 + 40)) == 0)
            SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter(a2, v12);
          if (llvm::ScalarEvolution::getLoopDisposition(a2, SCEVIter, a3) != 1)
            return v4;
          goto LABEL_17;
        }
        v18 = 1;
        while (v17 != -4096)
        {
          v19 = v15 + v18++;
          v15 = v19 & (v14 - 1);
          v16 = v13 + 48 * v15;
          v17 = *(_QWORD *)(v16 + 24);
          if (v17 == v12)
            goto LABEL_13;
        }
      }
      v16 = v13 + 48 * v14;
      goto LABEL_13;
    }
    v21 = 0;
    return (llvm *)*((_QWORD *)v4 + 4 * v9 + -4 * v21);
  }
  return v4;
}

uint64_t llvm::getUniqueCastUse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  BOOL v7;
  BOOL v8;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = 0;
    while (1)
    {
      result = *(_QWORD *)(v3 + 24);
      v6 = *(unsigned __int8 *)(result + 16);
      if (result)
        v7 = v6 >= 0x1C;
      else
        v7 = 0;
      v8 = v7 && v6 - 79 >= 0xFFFFFFF3;
      if (v8 && *(_QWORD *)result == a3)
      {
        if (v4)
          return 0;
      }
      else
      {
        result = v4;
      }
      v3 = *(_QWORD *)(v3 + 8);
      v4 = result;
      if (!v3)
        return result;
    }
  }
  return 0;
}

uint64_t llvm::getStrideFromPointer(llvm *this, llvm::Value *a2, llvm::ScalarEvolution *a3, llvm::Loop *a4)
{
  llvm *ElementPtr;
  llvm *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  llvm *v15;
  int v16;
  unsigned int v17;
  uint64_t SCEVIter;
  int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  BOOL v35;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  unsigned int v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  _QWORD v44[4];

  v44[3] = *MEMORY[0x1E0C80C00];
  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x10
    || *(_QWORD *)this == 0
    || *(_DWORD *)(*(_QWORD *)this + 8) != 15)
  {
    return 0;
  }
  ElementPtr = llvm::stripGetElementPtr(this, a2, a3, a4);
  v10 = ElementPtr;
  v11 = *((_QWORD *)a2 + 13);
  v12 = *((_DWORD *)a2 + 30);
  if (!v12)
    goto LABEL_15;
  v13 = ((ElementPtr >> 4) ^ (ElementPtr >> 9)) & (v12 - 1);
  v14 = v11 + 48 * v13;
  v15 = *(llvm **)(v14 + 24);
  if (v15 != ElementPtr)
  {
    v16 = 1;
    while (v15 != (llvm *)-4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v14 = v11 + 48 * v13;
      v15 = *(llvm **)(v14 + 24);
      if (v15 == ElementPtr)
        goto LABEL_16;
    }
LABEL_15:
    v14 = v11 + 48 * v12;
  }
LABEL_16:
  if (v14 == v11 + 48 * v12 || (SCEVIter = *(_QWORD *)(v14 + 40)) == 0)
    SCEVIter = llvm::ScalarEvolution::createSCEVIter(a2, (unint64_t)v10);
  v19 = *(unsigned __int16 *)(SCEVIter + 24);
  if (v10 != this && (v19 - 1) <= 2)
  {
    do
    {
      SCEVIter = *(_QWORD *)(SCEVIter + 32);
      v19 = *(unsigned __int16 *)(SCEVIter + 24);
      if (SCEVIter)
        v20 = (v19 - 1) >= 3;
      else
        v20 = 1;
    }
    while (!v20);
  }
  if (v19 != 7)
    return 0;
  v21 = *(_QWORD *)(SCEVIter + 40);
  if (v21 == 2)
  {
    v22 = *(_QWORD *)(*(_QWORD *)(SCEVIter + 32) + 8);
  }
  else
  {
    v37 = *(_QWORD *)(SCEVIter + 32);
    v41 = SCEVIter;
    v42 = v44;
    v43 = 0x300000000;
    v38 = v21;
    v39 = 8 * v21 - 8;
    if (v39 >= 0x19)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, (uint64_t)v39 >> 3, 8);
      v40 = v43;
    }
    else
    {
      v40 = 0;
    }
    if (v38 != 1)
    {
      memcpy((char *)v42 + 8 * v40, (const void *)(v37 + 8), v39);
      v40 = v43;
    }
    LODWORD(v43) = v40 + (v39 >> 3);
    v22 = sub_1C618AB20((uint64_t *)a2, (uint64_t)&v42, *(uint64_t ***)(v41 + 48));
    if (v42 != v44)
      free(v42);
  }
  if (!v22)
    return 0;
  if (v10 != this || *(_WORD *)(v22 + 24) != 5)
    goto LABEL_36;
  v23 = *(_QWORD **)(v22 + 32);
  if (*(_WORD *)(*v23 + 24))
    return 0;
  v24 = *(_QWORD *)(*v23 + 32);
  v25 = *(_DWORD *)(v24 + 32);
  if (v25 > 0x40)
    return 0;
  v26 = 0;
  if ((uint64_t)(*(_QWORD *)(v24 + 24) << -(char)v25) >> -(char)v25 == 1)
  {
    v22 = v23[1];
LABEL_36:
    v27 = *(unsigned __int16 *)(v22 + 24);
    if (v22)
      v28 = (v27 - 4) >= 0xFFFFFFFD;
    else
      v28 = 0;
    if (v28)
    {
      v30 = v22 + 32;
      v22 = *(_QWORD *)(v22 + 32);
      v29 = *(_QWORD *)(v30 + 8);
      v27 = *(unsigned __int16 *)(v22 + 24);
    }
    else
    {
      v29 = 0;
    }
    if (v27 != 14)
      return 0;
    v26 = *(_QWORD *)(v22 - 8);
    if (!llvm::Loop::isLoopInvariant((uint64_t)a3, v26))
      return 0;
    if (v29)
    {
      v31 = *(_QWORD *)(v26 + 8);
      if (v31)
      {
        v32 = 0;
        while (1)
        {
          v26 = *(_QWORD *)(v31 + 24);
          v33 = *(unsigned __int8 *)(v26 + 16);
          if (v26)
            v34 = v33 >= 0x1C;
          else
            v34 = 0;
          v35 = v34 && v33 - 79 >= 0xFFFFFFF3;
          if (v35 && *(_QWORD *)v26 == v29)
          {
            if (v32)
              return 0;
          }
          else
          {
            v26 = v32;
          }
          v31 = *(_QWORD *)(v31 + 8);
          v32 = v26;
          if (!v31)
            return v26;
        }
      }
      return 0;
    }
  }
  return v26;
}

llvm::APFloatBase *llvm::findScalarElement(llvm *this, llvm::Value *a2)
{
  llvm::Type *v2;
  llvm *v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  llvm::UndefValue *AggregateElement;
  int v13;
  BOOL v14;
  llvm::Type *v15;
  llvm::APFloatBase *result;

  v2 = a2;
  do
  {
    while (1)
    {
      v4 = this;
      v5 = *(_QWORD *)this;
      v6 = *(unsigned __int8 *)(*(_QWORD *)this + 8);
      if (*(_QWORD *)this)
        v7 = v6 == 18;
      else
        v7 = 0;
      if (v7 && *(_DWORD *)(v5 + 32) <= v2)
        return llvm::UndefValue::get(*(llvm::UndefValue **)(v5 + 24), a2);
      v8 = *((unsigned __int8 *)this + 16);
      if (v8 <= 0x14)
        return llvm::Constant::getAggregateElement(this, v2);
      if (v8 == 41)
        break;
      if (v8 == 90)
      {
        v9 = *((_QWORD *)this - 4);
        if (*(_BYTE *)(v9 + 16) != 16)
          return 0;
        v10 = (_QWORD *)(v9 + 24);
        if (*(_DWORD *)(v9 + 32) >= 0x41u)
          v10 = (_QWORD *)*v10;
        if ((_DWORD)v2 == *(_DWORD *)v10)
          return (llvm::APFloatBase *)*((_QWORD *)this - 8);
        this = (llvm *)*((_QWORD *)this - 12);
        if (this == v4)
          return 0;
      }
      else
      {
        if (v8 != 91 || v6 != 18)
          goto LABEL_29;
        v2 = (llvm::Type *)*(unsigned int *)(*((_QWORD *)this + 8) + 4 * v2);
        if ((v2 & 0x80000000) != 0)
          return llvm::UndefValue::get(*(llvm::UndefValue **)(v5 + 24), a2);
        this = (llvm *)*((_QWORD *)this - 8);
        v13 = *(_DWORD *)(*(_QWORD *)this + 32);
        v14 = __OFSUB__((_DWORD)v2, v13);
        v15 = (llvm::Type *)((_DWORD)v2 - v13);
        if ((int)v15 < 0 == v14)
        {
          this = (llvm *)*((_QWORD *)v4 - 4);
          v2 = v15;
        }
      }
    }
    this = (llvm *)*((_QWORD *)this - 8);
    if (!this)
      break;
    v11 = (unsigned __int8 *)*((_QWORD *)v4 - 4);
    if (!v11)
      break;
    if (v11[16] > 0x14u)
      break;
    AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v11, v2);
    if (!AggregateElement)
      break;
  }
  while ((llvm::Constant::isNullValue(AggregateElement) & 1) != 0);
  v6 = *(unsigned __int8 *)(v5 + 8);
LABEL_29:
  if (v6 != 19)
    return 0;
  result = llvm::getSplatValue(v4, a2);
  if (!result || *(_DWORD *)(v5 + 32) <= v2)
    return 0;
  return result;
}

llvm::APFloatBase *llvm::getSplatValue(llvm *this, const llvm::Value *a2)
{
  _BYTE v3[8];
  uint64_t *v4;
  uint64_t v5;

  if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) == 0x12 && *((unsigned __int8 *)this + 16) <= 0x14u)
    return llvm::Constant::getSplatValue(this, 0);
  v5 = 0;
  v4 = &v5;
  if (sub_1C4FA9BD4((uint64_t)v3, (uint64_t)this))
    return (llvm::APFloatBase *)v5;
  else
    return 0;
}

uint64_t llvm::getSplatIndex(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (a2)
  {
    v2 = 4 * a2;
    v3 = 0xFFFFFFFFLL;
    while (1)
    {
      v4 = *a1;
      if ((v4 & 0x80000000) != 0)
      {
        v4 = v3;
      }
      else if ((_DWORD)v3 != -1 && (_DWORD)v3 != (_DWORD)v4)
      {
        return 0xFFFFFFFFLL;
      }
      ++a1;
      v3 = v4;
      v2 -= 4;
      if (!v2)
        return v4;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t llvm::isSplatValue(const void **this, const llvm::Value *a2, int a3, unsigned int a4)
{
  unsigned int v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  BOOL v10;
  llvm *v11;
  unsigned int v12;
  llvm **v13;
  unsigned int v14;
  unsigned int v15;
  _QWORD *v16[3];
  uint64_t v17;
  llvm *v18;
  llvm *v19;

  v6 = *((unsigned __int8 *)this + 16);
  if ((*((_DWORD *)*this + 2) & 0xFE) == 0x12)
  {
    if (v6 - 11 < 2)
      return 1;
    if (v6 <= 0x14)
      return llvm::Constant::getSplatValue((llvm::Constant *)this, 0) != 0;
  }
  if (v6 != 91)
  {
    if (a3 == 6)
      return 0;
    v9 = a3 + 1;
    v18 = 0;
    v19 = 0;
    v17 = 0;
    v10 = v6 < 0x1C || v6 - 41 > 0x11;
    if (!v10 && (v11 = (llvm *)*(this - 8)) != 0 && (v19 = (llvm *)*(this - 8), *(this - 4)))
    {
      v18 = (llvm *)*(this - 4);
      if ((llvm::isSplatValue(v11, a2, a3 + 1, a4) & 1) == 0)
        return 0;
      v13 = &v18;
    }
    else
    {
      v16[0] = &v19;
      v16[1] = &v18;
      v16[2] = &v17;
      result = sub_1C4FA9CBC(v16, (uint64_t)this);
      if (!(_DWORD)result)
        return result;
      result = llvm::isSplatValue(v19, a2, v9, v14);
      if (!(_DWORD)result)
        return result;
      result = llvm::isSplatValue(v18, a2, v9, v15);
      if (!(_DWORD)result)
        return result;
      v13 = (llvm **)&v17;
    }
    return llvm::isSplatValue(*v13, a2, v9, v12);
  }
  v8 = *((unsigned int *)this + 18);
  if (!(_DWORD)v8 || (_DWORD)v8 != 1 && memcmp((char *)this[8] + 4, this[8], 4 * v8 - 4))
    return 0;
  if ((_DWORD)a2 == -1)
    return 1;
  return *((_DWORD *)this[8] + a2) == (_DWORD)a2;
}

void *llvm::narrowShuffleMaskElts(void *result, char *__src, uint64_t a3, uint64_t a4)
{
  char *v6;
  unsigned int v7;
  unint64_t v8;
  int v9;
  unsigned int v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  int v15;

  v6 = __src;
  if ((_DWORD)result == 1)
  {
    v7 = 0;
    *(_DWORD *)(a4 + 8) = 0;
    v8 = (4 * a3) >> 2;
    if (v8 > *(unsigned int *)(a4 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v8, 4);
      v7 = *(_DWORD *)(a4 + 8);
    }
    if (a3)
    {
      result = memcpy((void *)(*(_QWORD *)a4 + 4 * v7), v6, 4 * a3);
      v7 = *(_DWORD *)(a4 + 8);
    }
    *(_DWORD *)(a4 + 8) = v7 + ((unint64_t)(4 * a3) >> 2);
  }
  else
  {
    *(_DWORD *)(a4 + 8) = 0;
    if (a3)
    {
      v9 = (int)result;
      v10 = 0;
      v11 = &__src[4 * a3];
      do
      {
        if (v9)
        {
          v12 = *(_DWORD *)v6;
          v13 = v9;
          v14 = *(_DWORD *)v6 * v9;
          do
          {
            if (v12 >= 0)
              v15 = v14;
            else
              v15 = v12;
            if (v10 >= *(_DWORD *)(a4 + 12))
            {
              result = llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v10 + 1, 4);
              v10 = *(_DWORD *)(a4 + 8);
            }
            *(_DWORD *)(*(_QWORD *)a4 + 4 * v10) = v15;
            v10 = *(_DWORD *)(a4 + 8) + 1;
            *(_DWORD *)(a4 + 8) = v10;
            ++v14;
            --v13;
          }
          while (v13);
        }
        v6 += 4;
      }
      while (v6 != v11);
    }
  }
  return result;
}

uint64_t llvm::widenShuffleMaskElts(int a1, char *__src, unint64_t a3, uint64_t a4)
{
  unint64_t v5;
  unsigned int v7;
  unint64_t v8;
  uint64_t result;
  int v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;

  v5 = a3;
  if (a1 == 1)
  {
    v7 = 0;
    *(_DWORD *)(a4 + 8) = 0;
    v8 = (uint64_t)(4 * a3) >> 2;
    if (v8 > *(unsigned int *)(a4 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v8, 4);
      v7 = *(_DWORD *)(a4 + 8);
    }
    if (v5)
    {
      memcpy((void *)(*(_QWORD *)a4 + 4 * v7), __src, 4 * v5);
      v7 = *(_DWORD *)(a4 + 8);
    }
    *(_DWORD *)(a4 + 8) = v7 + ((4 * v5) >> 2);
    return 1;
  }
  v11 = (int)a3 / a1;
  if ((int)a3 % a1)
    return 0;
  *(_DWORD *)(a4 + 8) = 0;
  if (*(unsigned int *)(a4 + 12) < (unint64_t)v11)
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v11, 4);
  while (1)
  {
    v12 = v5 >= a1 ? a1 : v5;
    v13 = *(_DWORD *)__src;
    if ((*(_DWORD *)__src & 0x80000000) == 0)
      break;
    if (v12 != 1 && (!v12 || memcmp(__src + 4, __src, 4 * v12 - 4)))
      return 0;
    v15 = *(unsigned int *)(a4 + 8);
    if (v15 >= *(unsigned int *)(a4 + 12))
    {
LABEL_27:
      llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v15 + 1, 4);
      v15 = *(unsigned int *)(a4 + 8);
    }
LABEL_21:
    *(_DWORD *)(*(_QWORD *)a4 + 4 * v15) = v13;
    ++*(_DWORD *)(a4 + 8);
    __src += 4 * a1;
    result = 1;
    v5 -= a1;
    if (!v5)
      return result;
  }
  if (v13 % a1)
    return 0;
  if (a1 < 2)
  {
LABEL_20:
    v15 = *(unsigned int *)(a4 + 8);
    v13 /= a1;
    if (v15 >= *(unsigned int *)(a4 + 12))
      goto LABEL_27;
    goto LABEL_21;
  }
  v14 = 1;
  while (v13 + (_DWORD)v14 == *(_DWORD *)&__src[4 * v14])
  {
    if (a1 == ++v14)
      goto LABEL_20;
  }
  return 0;
}

void llvm::processShuffleMasks(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned int a5, void (*a6)(uint64_t), uint64_t a7, uint64_t a8, unint64_t a9, unint64_t a10, _BYTE *a11, uint64_t a12)
{
  uint64_t v15;
  int v16;
  unsigned int v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  void **v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  int v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int *v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int *v65;
  uint64_t v66;
  int v67;
  int v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  unint64_t v74;
  char *v75;
  unint64_t v77;
  uint64_t v78;
  unsigned int v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  _BYTE *v86;
  void *v87;
  uint64_t v88;
  _BYTE v89[64];
  void *v90;
  uint64_t v91;
  _QWORD v92[2];
  _QWORD v93[10];

  v84 = a3;
  v93[8] = *MEMORY[0x1E0C80C00];
  v85 = a4;
  v87 = v89;
  v88 = 0x100000000;
  v90 = v92;
  v91 = 0x100000000;
  if (a4 > 1)
  {
    sub_1C61BE874((uint64_t)&v90, v85, (uint64_t)&v87);
    v73 = (char *)v87;
    if ((_DWORD)v88)
    {
      v74 = (unint64_t)v88 << 6;
      do
      {
        v75 = *(char **)&v73[v74 - 64];
        if (&v73[v74 - 48] != v75)
          free(v75);
        v74 -= 64;
      }
      while (v74);
      v73 = (char *)v87;
    }
    if (v73 != v89)
      free(v73);
  }
  else
  {
    if (a4)
    {
      v92[0] = v93;
      v92[1] = 0x100000000;
    }
    LODWORD(v91) = a4;
  }
  v81 = a4;
  if (a4)
  {
    v15 = 0;
    v82 = v84;
    v83 = a2 / v81;
    v86 = v89;
    if (v83 <= 1)
      v16 = 1;
    else
      v16 = a2 / v81;
    v77 = (unint64_t)v84 << 6;
    v78 = -(uint64_t)v84;
    v17 = a2 / v84;
    do
    {
      v18 = (char *)v90 + 80 * v15;
      v87 = v86;
      v88 = 0xC00000000;
      if (*((_DWORD *)v18 + 3) < v84)
      {
        sub_1C61BEA64((uint64_t)v90 + 80 * v15, v82, (uint64_t)&v87);
        v22 = v85;
      }
      else
      {
        v19 = *((unsigned int *)v18 + 2);
        if (v19 >= v82)
          v20 = v82;
        else
          v20 = *((unsigned int *)v18 + 2);
        if (v20)
        {
          v21 = *(_QWORD *)v18;
          do
          {
            sub_1C614CA14(v21, (uint64_t)&v87);
            v21 += 64;
            --v20;
          }
          while (v20);
          v19 = *((unsigned int *)v18 + 2);
        }
        if (v82 <= v19)
        {
          v22 = v85;
          if (v82 < v19)
          {
            v26 = (void **)(*(_QWORD *)v18 + (v19 << 6) - 64);
            v27 = v77 - (v19 << 6);
            do
            {
              if (v26 + 2 != *v26)
                free(*v26);
              v26 -= 8;
              v27 += 64;
            }
            while (v27);
          }
        }
        else
        {
          v22 = v85;
          if (v82 != v19)
          {
            v23 = (_QWORD *)(*(_QWORD *)v18 + (v19 << 6));
            v24 = v78 + v19;
            do
            {
              *v23 = v23 + 2;
              v23[1] = 0xC00000000;
              if ((_DWORD)v88)
                sub_1C614CA14((uint64_t)v23, (uint64_t)&v87);
              v23 += 8;
            }
            while (!__CFADD__(v24++, 1));
          }
        }
        *((_DWORD *)v18 + 2) = v84;
      }
      if (v87 != v86)
        free(v87);
      if (a2 >= v81)
      {
        v28 = 0;
        v29 = v83 * v15;
        do
        {
          v30 = v28 + v29;
          if ((_DWORD)v28 + v29 == a2)
            break;
          v31 = *(_DWORD *)(a1 + 4 * v30);
          if ((int)v31 < (int)a2 && v31 != -1)
          {
            v33 = (int)(v31 / v17);
            v34 = *(_QWORD *)v18;
            v35 = *(_QWORD *)v18 + (v33 << 6);
            if (!*(_DWORD *)(v35 + 8))
            {
              v36 = v30;
              sub_1C4893E04((char *)v35, v83, -1);
              v31 = *(_DWORD *)(a1 + 4 * v36);
              v22 = v85;
              v34 = *(_QWORD *)v18;
            }
            *(_DWORD *)(*(_QWORD *)(v34 + (v33 << 6)) + 4 * v28) = v31 % v17;
          }
          ++v28;
        }
        while (v16 != (_DWORD)v28);
      }
      ++v15;
    }
    while (v15 != v22);
  }
  v37 = v85;
  if (a5)
  {
    v38 = 0;
    v83 = a10;
    v82 = a9;
    v84 = a5;
    v86 = a11;
    do
    {
      v39 = (char *)v90 + 80 * v38;
      v40 = *((unsigned int *)v39 + 2);
      if (!(_DWORD)v40)
        goto LABEL_60;
      v41 = 0;
      v42 = *(_QWORD *)v39;
      v43 = *(_QWORD *)v39 + (v40 << 6);
      v44 = v40 << 6;
      v45 = (int *)(*(_QWORD *)v39 + 8);
      v46 = v44;
      do
      {
        v47 = *v45;
        v45 += 16;
        if (v47)
          ++v41;
        v46 -= 64;
      }
      while (v46);
      if (v41)
      {
        if (v41 == 1)
        {
          while (1)
          {
            v48 = *(unsigned int *)(v42 + 8);
            if ((_DWORD)v48)
              break;
            v42 += 64;
            v44 -= 64;
            if (!v44)
            {
              v48 = *(unsigned int *)(v43 + 8);
              goto LABEL_96;
            }
          }
          v43 = v42;
LABEL_96:
          ((void (*)(unint64_t, _QWORD, uint64_t, unint64_t))v82)(v83, *(_QWORD *)v43, v48, (unint64_t)(v43 - *(_QWORD *)v39) >> 6);
          goto LABEL_97;
        }
        if (v81)
        {
          v49 = 0;
          v50 = 0;
          v51 = 0;
          v52 = 0;
          v53 = 0;
          v54 = 0xFFFFFFFFLL;
          v55 = 0xFFFFFFFFLL;
          while (1)
          {
            v56 = *(_QWORD *)v39 + (v49 << 6);
            if (*(_DWORD *)(v56 + 8))
            {
              v57 = *(int **)v56;
              if ((_DWORD)v55 != (_DWORD)v54)
              {
                if ((int)v50 <= 0)
                {
                  ((void (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t))v86)(a12, v51, v50, v55, v49);
                }
                else
                {
                  v59 = v51;
                  v60 = v50;
                  do
                  {
                    v62 = *v57++;
                    v61 = v62;
                    if (v62 != -1)
                      *v59 = v61 + v50;
                    ++v59;
                    --v60;
                  }
                  while (v60);
                  ((void (*)(uint64_t, int *, uint64_t, uint64_t, uint64_t))v86)(a12, v51, v50, v55, v49);
                  v63 = 0;
                  do
                  {
                    if (v51[v63] != -1)
                      v51[v63] = v63;
                    ++v63;
                  }
                  while (v50 != v63);
                }
                *(_DWORD *)(v56 + 8) = 0;
                v53 = v51;
                v52 = v50;
                v58 = v55;
                goto LABEL_79;
              }
              v51 = *(int **)v56;
              v50 = *(unsigned int *)(v56 + 8);
              v55 = v49;
            }
            v58 = v54;
LABEL_79:
            ++v49;
            v54 = v58;
            if (v49 == v37)
            {
              if ((_DWORD)v55 != (_DWORD)v58 && (v58 & 0x80000000) == 0)
              {
                if (v52 < 1)
                {
                  ((void (*)(uint64_t, int *))v86)(a12, v53);
                  *(_DWORD *)(*(_QWORD *)v39 + ((uint64_t)(int)v55 << 6) + 8) = 0;
                }
                else
                {
                  v64 = v52;
                  v65 = v53;
                  v66 = v52;
                  do
                  {
                    v68 = *v51++;
                    v67 = v68;
                    if (v68 != -1)
                      *v65 = v67 + v52;
                    ++v65;
                    --v66;
                  }
                  while (v66);
                  ((void (*)(uint64_t, int *))v86)(a12, v53);
                  v69 = 0;
                  *(_DWORD *)(*(_QWORD *)v39 + ((uint64_t)(int)v55 << 6) + 8) = 0;
                  do
                  {
                    if (v53[v69] != -1)
                      v53[v69] = v69;
                    ++v69;
                  }
                  while (v64 != v69);
                }
              }
              v49 = 0;
              v50 = 0;
              v51 = 0;
              v52 = 0;
              v53 = 0;
              v54 = 0xFFFFFFFFLL;
              v55 = 0xFFFFFFFFLL;
              if ((v58 & 0x80000000) != 0)
                break;
            }
          }
        }
      }
      else
      {
LABEL_60:
        a6(a7);
      }
LABEL_97:
      ++v38;
    }
    while (v38 != v84);
  }
  v70 = v90;
  if ((_DWORD)v91)
  {
    v71 = 80 * v91;
    v72 = (char *)v90 - 80;
    do
    {
      sub_1C61BE804((char **)&v72[v71]);
      v71 -= 80;
    }
    while (v71);
    v70 = v90;
  }
  if (v70 != v92)
    free(v70);
}

void llvm::computeMinimumValueSizes(uint64_t a1@<X0>, uint64_t a2@<X1>, llvm::DemandedBits *a3@<X2>, _QWORD *a4@<X3>, _OWORD *a5@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  int v18;
  _QWORD **v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t **v28;
  char *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  BOOL v35;
  int v36;
  BOOL v37;
  char *v38;
  uint64_t *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t **v47;
  uint64_t **v48;
  _OWORD *v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t **v59;
  uint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint8x8_t v65;
  unint64_t v66;
  unint64_t v67;
  _BYTE *v68;
  llvm::Type *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t *v73;
  int v74;
  uint64_t **v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t *v80;
  unsigned int v81;
  uint64_t *v82;
  __int128 v83;
  int v84;
  _BYTE v85[24];
  char *v86;
  char *v87;
  uint64_t v88;
  int v89;
  _BYTE v90[32];
  __int128 v91;
  unsigned int v92;
  char *v93;
  char *v94;
  uint64_t v95;
  int v96;
  _BYTE v97[128];
  char *v98;
  char *v99;
  uint64_t v100;
  int v101;
  _BYTE v102[32];
  uint64_t *v103;
  __int128 v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD v107[18];

  v5 = a5;
  v107[16] = *MEMORY[0x1E0C80C00];
  v6 = 0uLL;
  v104 = 0u;
  v103 = (uint64_t *)&v104;
  v105 = v107;
  v106 = 0x1000000000;
  v98 = v102;
  v99 = v102;
  v100 = 4;
  v101 = 0;
  v93 = v97;
  v94 = v97;
  v95 = 16;
  v96 = 0;
  v92 = 0;
  v91 = 0u;
  v86 = v90;
  v87 = v90;
  v88 = 4;
  v89 = 0;
  v84 = 0;
  v83 = 0u;
  memset(v85, 0, sizeof(v85));
  if (!a2)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
LABEL_72:
    *(_QWORD *)v5 = v9;
    v83 = 0uLL;
    *((_QWORD *)v5 + 1) = v10;
    *((_DWORD *)v5 + 4) = v8;
    v84 = 0;
    *(_OWORD *)((char *)v5 + 24) = v6;
    *((_QWORD *)v5 + 5) = v7;
    memset(v85, 0, sizeof(v85));
    goto LABEL_138;
  }
  v12 = a1;
  v13 = 0;
  v14 = a1 + 8 * a2;
  do
  {
    v15 = *(_QWORD *)v12 + 40;
    for (i = *(_QWORD *)(*(_QWORD *)v12 + 48); i != v15; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v17 = i - 24;
      else
        v17 = 0;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v86, v17);
      if (a4 && *(unsigned __int8 *)(v17 + 16) - 67 <= 1)
      {
        v18 = *(_DWORD *)(v17 + 20);
        if ((v18 & 0x40000000) != 0)
          v19 = *(_QWORD ***)(v17 - 8);
        else
          v19 = (_QWORD **)(v17 - 32 * (v18 & 0x7FFFFFF));
        v13 |= (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)*a4 + 480))(*a4, **v19) ^ 1;
      }
      v20 = *(unsigned __int8 *)(v17 + 16);
      if (v20 == 81 || v20 == 66)
      {
        v21 = *(_QWORD *)v17;
        if ((*(_DWORD *)(*(_QWORD *)v17 + 8) & 0xFE) != 0x12)
        {
          v22 = *(_DWORD *)(v17 + 20);
          if ((v22 & 0x40000000) != 0)
            v23 = *(uint64_t ***)(v17 - 8);
          else
            v23 = (uint64_t **)(v17 - 32 * (v22 & 0x7FFFFFF));
          v24 = **v23;
          if ((*(_DWORD *)(v24 + 8) & 0xFE) == 0x12)
            v24 = **(_QWORD **)(v24 + 16);
          if (llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v24) <= 0x40
            && (!a4
             || v20 != 66
             || ((*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a4 + 480))(*a4, v21) & 1) == 0))
          {
            v25 = v106;
            if (v106 >= (unint64_t)HIDWORD(v106))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, (uint64_t)v107, v106 + 1, 8);
              v25 = v106;
            }
            v105[v25] = v17;
            LODWORD(v106) = v106 + 1;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v98, v17);
          }
        }
      }
    }
    v12 += 8;
  }
  while (v12 != v14);
  v26 = v106;
  if (!(_DWORD)v106 || !((a4 == 0) | v13 & 1))
  {
    v10 = *((_QWORD *)&v83 + 1);
    v9 = v83;
    v8 = v84;
    v6 = *(_OWORD *)v85;
    v7 = *(_QWORD *)&v85[16];
    v5 = a5;
    goto LABEL_72;
  }
  do
  {
    v27 = v105[v26 - 1];
    LODWORD(v106) = v26 - 1;
    v82 = 0;
    v28 = sub_1C4F5394C(&v103, v27, (uint64_t *)v27);
    v82 = *(uint64_t **)(sub_1C61BEB54((uint64_t)(v28 + 4)) + 16);
    v29 = (char *)sub_1C477672C((uint64_t)&v93, v27);
    if (v94 == v93)
      v30 = (uint64_t *)((char *)&v95 + 4);
    else
      v30 = &v95;
    if (v29 != &v94[8 * *(unsigned int *)v30])
      goto LABEL_50;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v93, v27);
    if (*(unsigned __int8 *)(v27 + 16) < 0x1Cu)
      goto LABEL_50;
    llvm::DemandedBits::getDemandedBits(a3, (llvm::Instruction *)v27, (llvm::APInt *)&v80);
    if (v81 >= 0x41)
    {
      if (v80)
        MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
      a5[1] = 0u;
      a5[2] = 0u;
      *a5 = 0u;
      goto LABEL_138;
    }
    llvm::DemandedBits::getDemandedBits(a3, (llvm::Instruction *)v27, (llvm::APInt *)&v80);
    if (v81 >= 0x41)
      v31 = v80;
    else
      v31 = (uint64_t *)&v80;
    v32 = *v31;
    if (v81 >= 0x41 && v80)
      MEMORY[0x1CAA32F9C]();
    v33 = sub_1C61BEB98((uint64_t *)&v91, &v82);
    v33[1] |= v32;
    v80 = (uint64_t *)v27;
    sub_1C61BEB98((uint64_t *)&v91, &v80)[1] = v32;
    v34 = *(unsigned __int8 *)(v27 + 16) - 60;
    v35 = v34 > 8;
    v36 = (1 << v34) & 0x181;
    v37 = v35 || v36 == 0;
    if (!v37)
      goto LABEL_50;
    v38 = (char *)sub_1C477672C((uint64_t)&v86, v27);
    v39 = v87 == v86 ? (uint64_t *)((char *)&v88 + 4) : &v88;
    if (v38 == &v87[8 * *(unsigned int *)v39])
      goto LABEL_50;
    v40 = *(unsigned __int8 *)(v27 + 16);
    if ((v40 - 75) < 3 || *(_BYTE *)(*(_QWORD *)v27 + 8) != 13)
    {
      sub_1C61BEB98((uint64_t *)&v91, &v82)[1] = -1;
LABEL_50:
      v26 = v106;
      continue;
    }
    if (v40 == 83 || sub_1C61BEB98((uint64_t *)&v91, &v82)[1] == -1)
      goto LABEL_50;
    v41 = *(_DWORD *)(v27 + 20);
    if ((v41 & 0x40000000) != 0)
    {
      v43 = *(uint64_t **)(v27 - 8);
      v42 = v41 & 0x7FFFFFF;
    }
    else
    {
      v42 = v41 & 0x7FFFFFF;
      v43 = (uint64_t *)(v27 - 32 * v42);
    }
    if (!v42)
      goto LABEL_50;
    v44 = 32 * v42;
    do
    {
      v45 = *v43;
      v80 = (uint64_t *)*v43;
      sub_1C61BD764(&v103, v82, (unint64_t *)&v80);
      v46 = v106;
      if (v106 >= (unint64_t)HIDWORD(v106))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v105, (uint64_t)v107, v106 + 1, 8);
        v46 = v106;
      }
      v105[v46] = v45;
      v26 = v106 + 1;
      LODWORD(v106) = v106 + 1;
      v43 += 4;
      v44 -= 32;
    }
    while (v44);
  }
  while (v26);
  v47 = (uint64_t **)(v91 + 16 * v92);
  if (DWORD2(v91))
  {
    v49 = a5;
    if (v92)
    {
      v50 = 16 * v92;
      v48 = (uint64_t **)v91;
      while (((unint64_t)*v48 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v48 += 2;
        v50 -= 16;
        if (!v50)
        {
          v48 = (uint64_t **)(v91 + 16 * v92);
          break;
        }
      }
    }
    else
    {
      v48 = (uint64_t **)v91;
    }
  }
  else
  {
    v48 = (uint64_t **)(v91 + 16 * v92);
    v49 = a5;
  }
  v51 = (uint64_t **)(v91 + 16 * v92);
  if (v48 != v51)
  {
    while (1)
    {
      v52 = (*v48)[1];
      if (v52)
        break;
LABEL_96:
      v59 = v48 + 2;
      v48 = v47;
      if (v59 != v47)
      {
        v48 = v59;
        while (((unint64_t)*v48 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v48 += 2;
          if (v48 == v47)
          {
            v48 = v47;
            break;
          }
        }
      }
      if (v48 == v51)
        goto LABEL_102;
    }
    while (2)
    {
      v53 = *(_QWORD *)(v52 + 24);
      if (*(_BYTE *)(*(_QWORD *)v53 + 8) == 13)
      {
        if (v92)
        {
          v54 = (v92 - 1) & ((v53 >> 4) ^ (v53 >> 9));
          v55 = *(_QWORD *)(v91 + 16 * v54);
          if (v53 == v55)
            goto LABEL_89;
          v56 = 1;
          while (v55 != -4096)
          {
            v57 = v54 + v56++;
            v54 = v57 & (v92 - 1);
            v55 = *(_QWORD *)(v91 + 16 * v54);
            if (v53 == v55)
              goto LABEL_89;
          }
        }
        v58 = (_QWORD *)sub_1C61BD720(&v103, *v48);
        sub_1C61BEB98((uint64_t *)&v91, v58)[1] = -1;
      }
LABEL_89:
      v52 = *(_QWORD *)(v52 + 8);
      if (!v52)
        goto LABEL_96;
      continue;
    }
  }
LABEL_102:
  v60 = v103;
  if (v103 != (uint64_t *)&v104)
  {
    do
    {
      v61 = (unint64_t)(v60 + 4);
      if ((v60[5] & 1) != 0)
      {
        v62 = 0;
        v63 = (unint64_t)(v60 + 4);
        do
        {
          v80 = *(uint64_t **)(v63 + 16);
          v62 |= sub_1C61BEB98((uint64_t *)&v91, &v80)[1];
          v63 = *(_QWORD *)(v63 + 8) & 0xFFFFFFFFFFFFFFFELL;
        }
        while (v63);
      }
      else
      {
        v62 = 0;
      }
      v64 = 64 - __clz(v62);
      if (!v62 || (v65 = (uint8x8_t)vcnt_s8((int8x8_t)v64), v65.i16[0] = vaddlv_u8(v65), v65.u32[0] >= 2uLL))
      {
        v66 = v64 | (v64 >> 1) | ((v64 | (v64 >> 1)) >> 2);
        v64 = (v66 | (v66 >> 4)) + 1;
      }
      if ((v60[5] & 1) != 0)
      {
        v67 = (unint64_t)(v60 + 4);
        while (1)
        {
          v68 = *(_BYTE **)(v67 + 16);
          if (v68[16] == 83)
          {
            v69 = *(llvm::Type **)v68;
            if ((*(_DWORD *)(*(_QWORD *)v68 + 8) & 0xFE) == 0x12)
              v69 = (llvm::Type *)**((_QWORD **)v69 + 2);
            if (v64 < llvm::Type::getPrimitiveSizeInBits(v69))
              break;
          }
          v67 = *(_QWORD *)(v67 + 8) & 0xFFFFFFFFFFFFFFFELL;
          if (!v67)
          {
            do
            {
              v70 = *(_QWORD *)(v61 + 16);
              if (*(unsigned __int8 *)(v70 + 16) >= 0x1Cu)
              {
                v71 = *(_QWORD *)v70;
                v72 = (char *)sub_1C477672C((uint64_t)&v98, *(_QWORD *)(v61 + 16));
                if (v99 == v98)
                  v73 = (uint64_t *)((char *)&v100 + 4);
                else
                  v73 = &v100;
                if (v72 != &v99[8 * *(unsigned int *)v73])
                {
                  v74 = *(_DWORD *)(v70 + 20);
                  if ((v74 & 0x40000000) != 0)
                    v75 = *(uint64_t ***)(v70 - 8);
                  else
                    v75 = (uint64_t **)(v70 - 32 * (v74 & 0x7FFFFFF));
                  v71 = **v75;
                }
                if ((*(_DWORD *)(v71 + 8) & 0xFE) == 0x12)
                  v71 = **(_QWORD **)(v71 + 16);
                if (v64 < llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v71))
                {
                  v80 = (uint64_t *)v70;
                  *(_QWORD *)sub_1C6194570((uint64_t)&v83, (uint64_t *)&v80) = v64;
                }
              }
              v61 = *(_QWORD *)(v61 + 8) & 0xFFFFFFFFFFFFFFFELL;
            }
            while (v61);
            break;
          }
        }
      }
      v76 = (uint64_t *)v60[1];
      if (v76)
      {
        do
        {
          v77 = v76;
          v76 = (uint64_t *)*v76;
        }
        while (v76);
      }
      else
      {
        do
        {
          v77 = (uint64_t *)v60[2];
          v37 = *v77 == (_QWORD)v60;
          v60 = v77;
        }
        while (!v37);
      }
      v60 = v77;
    }
    while (v77 != (uint64_t *)&v104);
  }
  *v49 = v83;
  v83 = 0uLL;
  *((_DWORD *)v49 + 4) = v84;
  v84 = 0;
  *(_OWORD *)((char *)v49 + 24) = *(_OWORD *)v85;
  *((_QWORD *)v49 + 5) = *(_QWORD *)&v85[16];
  memset(v85, 0, sizeof(v85));
LABEL_138:
  sub_1C6176BF8(&v83);
  if (v87 != v86)
    free(v87);
  MEMORY[0x1CAA32FB4](v91, 8);
  if (v94 != v93)
    free(v94);
  if (v99 != v98)
    free(v99);
  if (v105 != v107)
    free(v105);
  sub_1C6143384((_QWORD *)v104);
}

llvm *llvm::uniteAccessGroups(llvm *this, llvm::MDNode *a2, llvm::MDNode *a3)
{
  llvm::MDNode *Impl;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  int64x2_t v9;
  int64x2_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];

  Impl = a2;
  v13[4] = *MEMORY[0x1E0C80C00];
  if (this)
  {
    if (!a2 || this == a2)
    {
      return this;
    }
    else
    {
      v8 = 1;
      v9 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
      v10 = v9;
      v11 = v13;
      v12 = 0x400000000;
      sub_1C4FA6A08((uint64_t)&v8, (uint64_t)this);
      sub_1C4FA6A08((uint64_t)&v8, (uint64_t)Impl);
      if ((_DWORD)v12)
      {
        if ((_DWORD)v12 == 1)
        {
          Impl = *(llvm::MDNode **)v11;
        }
        else
        {
          v5 = *((_QWORD *)this + 2);
          v6 = (uint64_t *)(v5 & 0xFFFFFFFFFFFFFFF8);
          if ((v5 & 4) != 0)
            v6 = (uint64_t *)*v6;
          Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v6, v11, v12, 0, 1);
        }
      }
      else
      {
        Impl = 0;
      }
      if (v11 != v13)
        free(v11);
      if ((v8 & 1) == 0)
        MEMORY[0x1CAA32FB4](v9.i64[0], 8);
    }
  }
  return Impl;
}

BOOL sub_1C4FA6A08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;

  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v4)
  {
    v5 = -8 * v4;
    do
    {
      v7 = *(_QWORD *)(a2 + v5);
      result = sub_1C4FA9FAC(a1, &v7);
      v5 += 8;
    }
    while (v5);
  }
  else
  {
    v7 = a2;
    return sub_1C4FA9FAC(a1, &v7);
  }
  return result;
}

unsigned __int8 **llvm::propagateMetadata(unsigned __int8 **a1, _QWORD ****a2, uint64_t a3)
{
  unsigned int v4;
  _QWORD ****v5;
  uint64_t ***v6;
  _QWORD *v7;
  uint64_t MostGenericFPMath;
  llvm::MDNode *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned __int8 **v12;
  int v13;
  llvm::MDNode *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  llvm::MDNode **v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD ****v30;
  unsigned __int8 *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  llvm::MDNode **v39;
  uint64_t v40;
  llvm::MDNode *v41;
  BOOL v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  _QWORD *v48;
  unsigned __int8 *v49;
  _QWORD *v50;
  unsigned __int8 *v51;
  _QWORD *v52;
  unsigned int v53;
  uint64_t v54;
  unsigned __int8 *v55;
  void *v56[2];
  _QWORD v57[9];

  v57[8] = *MEMORY[0x1E0C80C00];
  if (!a3)
    return a1;
  v4 = a3;
  v5 = a2;
  v6 = *a2;
  v7 = v57;
  v56[0] = v57;
  v56[1] = (void *)0x400000000;
  llvm::Value::getAllMetadata(v6, (uint64_t)v56);
  v10 = 0;
  v11 = (v6 >> 4) ^ (v6 >> 9);
  v12 = a1 + 6;
  v54 = v4;
  do
  {
    v13 = dword_1C85F6FCC[v10];
    v14 = (llvm::MDNode *)v6[6];
    if (!v14 && (*((_BYTE *)v6 + 23) & 0x20) == 0)
      goto LABEL_5;
    if (!v13)
      goto LABEL_37;
    if ((*((_BYTE *)v6 + 23) & 0x20) == 0)
      goto LABEL_5;
    v15 = ***v6;
    v55 = (unsigned __int8 *)v6;
    v16 = *(_DWORD *)(v15 + 2496);
    if (!v16)
    {
      v48 = 0;
LABEL_79:
      MostGenericFPMath = (uint64_t)sub_1C541AB24(v15 + 2480, (uint64_t)&v55, (uint64_t *)&v55, v48);
      v49 = v55;
      *(_QWORD *)(MostGenericFPMath + 32) = 0;
      *(_QWORD *)(MostGenericFPMath + 24) = 0;
      *(_QWORD *)MostGenericFPMath = v49;
      *(_QWORD *)(MostGenericFPMath + 8) = MostGenericFPMath + 24;
      *(_QWORD *)(MostGenericFPMath + 16) = 0x100000000;
      goto LABEL_16;
    }
    v17 = *(_QWORD *)(v15 + 2480);
    v18 = v16 - 1;
    v19 = v18 & v11;
    MostGenericFPMath = v17 + 40 * (v18 & v11);
    v20 = *(_QWORD *)MostGenericFPMath;
    if (*(uint64_t ****)MostGenericFPMath != v6)
    {
      v25 = 0;
      v26 = 1;
      while (v20 != -4096)
      {
        if (v25)
          v27 = 0;
        else
          v27 = v20 == -8192;
        if (v27)
          v25 = (_QWORD *)MostGenericFPMath;
        v28 = v19 + v26++;
        v19 = v28 & v18;
        MostGenericFPMath = v17 + 40 * v19;
        v20 = *(_QWORD *)MostGenericFPMath;
        if (*(uint64_t ****)MostGenericFPMath == v6)
          goto LABEL_16;
      }
      if (v25)
        v48 = v25;
      else
        v48 = (_QWORD *)MostGenericFPMath;
      goto LABEL_79;
    }
LABEL_16:
    v21 = *(unsigned int *)(MostGenericFPMath + 16);
    if (!(_DWORD)v21)
      goto LABEL_5;
    v22 = (llvm::MDNode **)(*(_QWORD *)(MostGenericFPMath + 8) + 8);
    v23 = 16 * v21;
    while (*((_DWORD *)v22 - 2) != v13)
    {
      v22 += 2;
      v23 -= 16;
      if (!v23)
        goto LABEL_5;
    }
    v14 = *v22;
LABEL_37:
    v52 = v7;
    if (v54 != 1 && v14)
    {
      v29 = 1;
      v53 = v11;
      while (2)
      {
        v30 = v5;
        v31 = (unsigned __int8 *)v5[v29];
        if (!*((_QWORD *)v31 + 6) && (v31[23] & 0x20) == 0 || (v31[23] & 0x20) == 0)
          goto LABEL_50;
        v32 = ***(_QWORD ***)v31;
        v55 = v31;
        v33 = *(_DWORD *)(v32 + 2496);
        if (v33)
        {
          v34 = *(_QWORD *)(v32 + 2480);
          v35 = v33 - 1;
          v36 = v35 & ((v31 >> 4) ^ (v31 >> 9));
          MostGenericFPMath = v34 + 40 * v36;
          v37 = *(_QWORD *)MostGenericFPMath;
          if (*(unsigned __int8 **)MostGenericFPMath == v31)
            goto LABEL_45;
          v43 = 0;
          v44 = 1;
          while (v37 != -4096)
          {
            if (v43)
              v45 = 0;
            else
              v45 = v37 == -8192;
            if (v45)
              v43 = MostGenericFPMath;
            v46 = v36 + v44++;
            v36 = v46 & v35;
            MostGenericFPMath = v34 + 40 * v36;
            v37 = *(_QWORD *)MostGenericFPMath;
            if (*(unsigned __int8 **)MostGenericFPMath == v31)
              goto LABEL_45;
          }
          v50 = (_QWORD *)(v43 ? v43 : MostGenericFPMath);
        }
        else
        {
          v50 = 0;
        }
        MostGenericFPMath = (uint64_t)sub_1C541AB24(v32 + 2480, (uint64_t)&v55, (uint64_t *)&v55, v50);
        v51 = v55;
        *(_QWORD *)(MostGenericFPMath + 32) = 0;
        *(_QWORD *)(MostGenericFPMath + 24) = 0;
        *(_QWORD *)MostGenericFPMath = v51;
        *(_QWORD *)(MostGenericFPMath + 8) = MostGenericFPMath + 24;
        *(_QWORD *)(MostGenericFPMath + 16) = 0x100000000;
LABEL_45:
        v38 = *(unsigned int *)(MostGenericFPMath + 16);
        if ((_DWORD)v38)
        {
          v39 = (llvm::MDNode **)(*(_QWORD *)(MostGenericFPMath + 8) + 8);
          v40 = 16 * v38;
          while (*((_DWORD *)v39 - 2) != v13)
          {
            v41 = 0;
            v39 += 2;
            v40 -= 16;
            if (!v40)
              goto LABEL_51;
          }
          v41 = *v39;
        }
        else
        {
LABEL_50:
          v41 = 0;
        }
LABEL_51:
        switch(v13)
        {
          case 1:
            v55 = 0;
            MostGenericFPMath = sub_1C4F7FD38((uint64_t)v14, (uint64_t)v41, (uint64_t *)&v55);
            v14 = (llvm::MDNode *)v55;
            goto LABEL_55;
          case 2:
          case 4:
          case 5:
            __break(1u);
            goto LABEL_87;
          case 3:
            MostGenericFPMath = (uint64_t)llvm::MDNode::getMostGenericFPMath(v14, v41, v9);
            goto LABEL_54;
          case 6:
          case 8:
          case 9:
            MostGenericFPMath = llvm::MDNode::intersect(v14, v41, v9);
            goto LABEL_54;
          case 7:
            MostGenericFPMath = llvm::MDNode::getMostGenericAliasScope(v14, v41, v9);
            goto LABEL_54;
          default:
            MostGenericFPMath = llvm::intersectAccessGroups((llvm *)a1, (const llvm::Instruction *)v31, v9);
LABEL_54:
            v14 = (llvm::MDNode *)MostGenericFPMath;
LABEL_55:
            v5 = v30;
            ++v29;
            if (v14)
              v42 = v29 == v54;
            else
              v42 = 1;
            v11 = v53;
            if (!v42)
              continue;
            goto LABEL_70;
        }
      }
    }
LABEL_70:
    v7 = v52;
    if (v14)
    {
      if (v13)
        goto LABEL_11;
      v55 = (unsigned __int8 *)v14;
      MostGenericFPMath = llvm::MetadataTracking::track((uint64_t)&v55, (unsigned __int8 *)v14, 2);
      goto LABEL_22;
    }
LABEL_5:
    if (!*v12 && (*((_BYTE *)a1 + 23) & 0x20) == 0)
      goto LABEL_7;
    if (v13)
    {
      v14 = 0;
LABEL_11:
      llvm::Value::setMetadata((llvm::Value *)a1, v13, v14);
      goto LABEL_7;
    }
    v55 = 0;
LABEL_22:
    if (&v55 == v12)
    {
      if (v55)
        MostGenericFPMath = llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
    }
    else
    {
      if (*v12)
        MostGenericFPMath = llvm::MetadataTracking::untrack((uint64_t)(a1 + 6), *v12);
      v24 = v55;
      *v12 = v55;
      if (v24)
        MostGenericFPMath = llvm::MetadataTracking::retrack((uint64_t)&v55, v24, (uint64_t)(a1 + 6));
    }
LABEL_7:
    ++v10;
  }
  while (v10 != 7);
  MostGenericFPMath = (uint64_t)v56[0];
  if (v56[0] != v7)
LABEL_87:
    free((void *)MostGenericFPMath);
  return a1;
}

_DWORD *llvm::createUnaryMask@<X0>(_DWORD *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a4 + 16;
  *(_QWORD *)a4 = a4 + 16;
  *(_QWORD *)(a4 + 8) = 0x1000000000;
  if (a2)
  {
    v5 = 0;
    v6 = 4 * a2;
    do
    {
      v7 = *result;
      if (*result >= a3)
        v8 = a3;
      else
        v8 = 0;
      if (v5 >= *(_DWORD *)(a4 + 12))
      {
        v14 = v6;
        v13 = result;
        v15 = v4;
        v12 = a3;
        v11 = a4;
        v9 = *result;
        v10 = v8;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v4, v5 + 1, 4);
        v7 = v9;
        v8 = v10;
        v6 = v14;
        v4 = v15;
        a4 = v11;
        result = v13;
        a3 = v12;
        v5 = *(_DWORD *)(v11 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v5) = v7 - v8;
      v5 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v5;
      ++result;
      v6 -= 4;
    }
    while (v6);
  }
  return result;
}

unsigned int *sub_1C4FA6FB8(unsigned int *result, _BYTE *a2, _BYTE *a3)
{
  unsigned int *v3;
  size_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = result;
  v4 = a3 - a2;
  v5 = result[2];
  v6 = v5 + ((a3 - a2) >> 3);
  if (v6 > result[3])
  {
    v7 = a3;
    v8 = a2;
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6, 8);
    a3 = v7;
    a2 = v8;
    LODWORD(v5) = v3[2];
  }
  if (a2 != a3)
  {
    result = (unsigned int *)memcpy((void *)(*(_QWORD *)v3 + 8 * v5), a2, v4);
    LODWORD(v5) = v3[2];
  }
  v3[2] = v5 + (v4 >> 3);
  return result;
}

uint64_t llvm::maskIsAllZeroOrUndef(llvm *this, llvm::Value *a2)
{
  uint64_t result;
  int v4;
  llvm::Type *v5;
  uint64_t v6;

  result = 0;
  if (this && *((unsigned __int8 *)this + 16) <= 0x14u)
  {
    if ((llvm::Constant::isNullValue(this) & 1) != 0 || *((unsigned __int8 *)this + 16) - 11 < 2)
      return 1;
    if (*(_BYTE *)(*(_QWORD *)this + 8) == 19)
      return 0;
    v4 = *(_DWORD *)(*(_QWORD *)this + 32);
    if (!v4)
    {
      return 1;
    }
    else
    {
      v5 = 0;
      do
      {
        result = (uint64_t)llvm::Constant::getAggregateElement(this, v5);
        if (!result)
          break;
        v6 = result;
        if ((llvm::Constant::isNullValue((llvm::Constant *)result) & 1) == 0
          && *(unsigned __int8 *)(v6 + 16) - 11 > 1)
        {
          return 0;
        }
        v5 = (llvm::Type *)((_DWORD)v5 + 1);
        result = 1;
      }
      while (v4 != (_DWORD)v5);
    }
  }
  return result;
}

uint64_t llvm::maskIsAllOneOrUndef(llvm *this, llvm::Value *a2)
{
  uint64_t result;
  int v4;
  llvm::Type *v5;
  uint64_t v6;

  result = 0;
  if (this && *((unsigned __int8 *)this + 16) <= 0x14u)
  {
    if (llvm::Constant::isAllOnesValue(this) || *((unsigned __int8 *)this + 16) - 11 < 2)
      return 1;
    if (*(_BYTE *)(*(_QWORD *)this + 8) == 19)
      return 0;
    v4 = *(_DWORD *)(*(_QWORD *)this + 32);
    if (!v4)
    {
      return 1;
    }
    else
    {
      v5 = 0;
      do
      {
        result = (uint64_t)llvm::Constant::getAggregateElement(this, v5);
        if (!result)
          break;
        v6 = result;
        if (!llvm::Constant::isAllOnesValue((llvm::Constant *)result)
          && *(unsigned __int8 *)(v6 + 16) - 11 > 1)
        {
          return 0;
        }
        v5 = (llvm::Type *)((_DWORD)v5 + 1);
        result = 1;
      }
      while (v4 != (_DWORD)v5);
    }
  }
  return result;
}

void llvm::possiblyDemandedEltsInMask(llvm *this@<X0>, llvm::APInt *a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned int v5;
  unint64_t v6;
  int v7;
  BOOL v8;
  llvm::Type *v9;
  unsigned int v10;
  llvm::UndefValue *AggregateElement;
  llvm::APInt *v12;

  v3 = (unsigned __int8 *)this;
  v5 = *(_DWORD *)(*(_QWORD *)this + 32);
  *((_DWORD *)a2 + 2) = v5;
  if (v5 > 0x40)
  {
    llvm::APInt::initSlowCase(a2, -1, 1);
  }
  else
  {
    v6 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v5;
    if (!v5)
      v6 = 0;
    *(_QWORD *)a2 = v6;
  }
  v7 = v3[16];
  if (v7 != 10)
    v3 = 0;
  if (v5)
    v8 = v7 == 10;
  else
    v8 = 0;
  if (v8)
  {
    v9 = 0;
    v10 = *((_DWORD *)a2 + 2);
    do
    {
      AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v3, v9);
      if (llvm::Constant::isNullValue(AggregateElement))
      {
        v12 = (llvm::APInt *)(*(_QWORD *)a2 + 8 * (v9 >> 6));
        if (v10 < 0x41)
          v12 = a2;
        *(_QWORD *)v12 &= ~(1 << (char)v9);
      }
      v9 = (llvm::Type *)((_DWORD)v9 + 1);
    }
    while (v5 != (_DWORD)v9);
  }
}

BOOL llvm::InterleavedAccessInfo::isStrided(llvm::InterleavedAccessInfo *this)
{
  unsigned int v1;

  if ((int)this >= 0)
    v1 = this;
  else
    v1 = -(int)this;
  return v1 > 1 && v1 <= dword_1ED7F4910;
}

uint64_t llvm::InterleavedAccessInfo::collectConstStrideAccesses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  llvm::Value *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  const char *v20;
  char v21;
  char v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t PtrStride;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v32;
  char *v35;
  char *v36;
  uint64_t v37;
  char v38[8];
  uint64_t v39;
  void *__p;
  _QWORD *v41;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(*(_QWORD *)(**(_QWORD **)(v4 + 32) + 56) + 40);
  sub_1C4DFE414((uint64_t)v38, v4);
  v32 = a1;
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)v38, *(llvm::LoopInfo **)(a1 + 24));
  v6 = v41;
  v35 = (char *)__p;
  if (v41 != __p)
  {
    v7 = v5 + 272;
    while (1)
    {
      v8 = *(v6 - 1);
      v36 = (char *)(v6 - 1);
      v9 = v8 + 40;
      for (i = *(_QWORD *)(v8 + 48); i != v9; i = *(_QWORD *)(i + 8))
      {
        v11 = (uint64_t *)(i - 24);
        if (i)
          v12 = i - 24;
        else
          v12 = 0;
        v13 = *(unsigned __int8 *)(v12 + 16);
        if (i && v13 == 60)
        {
          v14 = *(llvm::Value **)(v12 - 32);
          if (!v14)
            continue;
        }
        else
        {
          if (!i)
            continue;
          if (v13 != 61)
            continue;
          v14 = *(llvm::Value **)(v12 - 32);
          if (!v14)
            continue;
          v11 = *(uint64_t **)(v12 - 64);
        }
        v15 = *v11;
        sub_1C4768AD0(v7, *v11);
        v17 = v16;
        v19 = v18 == 1;
        llvm::DataLayout::getAlignment(v7, v15);
        v22 = v21;
        if (v19)
        sub_1C4768AD0(v7, v15);
        v25 = v24;
        if ((_DWORD)v23 == 1)
        v26 = ((1 << v22) + ((unint64_t)(v17 + 7) >> 3) - 1) & -(1 << v22);
        if (8 * v26 == v25)
        {
          PtrStride = llvm::getPtrStride(*(int8x16_t **)v32, v15, v14, *(_QWORD *)(v32 + 8), a3, 1, 0);
          v28 = llvm::replaceSymbolicStrideSCEV(*(int8x16_t **)v32, a3, v14);
          v29 = __clz(1 << ((unint64_t)*(unsigned __int16 *)(v12 + 18) >> 1)) ^ 0x3F;
          v37 = v12;
          v30 = sub_1C61BE2B0(a2, &v37);
          *(_QWORD *)v30 = PtrStride;
          *(_QWORD *)(v30 + 8) = v28;
          *(_QWORD *)(v30 + 16) = v26;
          *(_BYTE *)(v30 + 24) = v29;
        }
      }
      v6 = v36;
      if (v36 == v35)
      {
        v6 = __p;
        break;
      }
    }
  }
  if (v6)
  {
    v41 = v6;
    operator delete(v6);
  }
  return MEMORY[0x1CAA32FB4](v39, 8);
}

_QWORD *llvm::InterleavedAccessInfo::analyzeInterleaving(llvm::InterleavedAccessInfo *this, int a2)
{
  llvm::InterleavedAccessInfo *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _DWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t LoopLatch;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;
  uint64_t v32;
  int v33;
  char hasFnAttrOnCalledFunction;
  char v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  int v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  char v95;
  int v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  char v106;
  signed int v107;
  unint64_t v108;
  signed int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int *v113;
  int v114;
  int v115;
  int v116;
  unsigned int *v117;
  signed int v118;
  unint64_t v119;
  unsigned int v120;
  _DWORD *v121;
  _DWORD *v122;
  int v123;
  unsigned int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  char v130;
  _DWORD *v131;
  int v132;
  BOOL v133;
  unsigned int v134;
  _QWORD *v135;
  uint64_t v136;
  unsigned int v137;
  int v138;
  BOOL v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t *v157;
  uint64_t i;
  uint64_t v159;
  uint64_t v160;
  int v161;
  llvm::Value *v162;
  uint64_t v163;
  int v164;
  llvm::Value *v165;
  uint64_t *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  llvm::Value *v171;
  int v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  llvm::Value *v177;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t v189;
  llvm::InterleavedAccessInfo *v190;
  uint64_t *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  _QWORD v195[2];
  int v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  int64x2_t v205;
  int64x2_t v206;
  void *v207;
  uint64_t v208;
  _BYTE v209[32];
  uint64_t v210;
  int64x2_t v211;
  int64x2_t v212;
  uint64_t *v213;
  uint64_t v214;
  _QWORD v215[6];

  v2 = this;
  v215[4] = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 4) + 64;
  v195[0] = 0;
  v195[1] = 0;
  v196 = 0;
  v198 = 0;
  v199 = 0;
  v197 = 0;
  v179 = v3;
  llvm::InterleavedAccessInfo::collectConstStrideAccesses((uint64_t)this, (uint64_t)v195, v3);
  if (v197 == v198)
    return sub_1C6176BF8(v195);
  sub_1C61BE390(v2);
  v210 = 1;
  v211 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v212 = v211;
  v213 = v215;
  v214 = 0x400000000;
  v204 = 1;
  v205 = v211;
  v206 = v211;
  v207 = v209;
  v208 = 0x400000000;
  v5 = v197;
  v4 = v198;
  if (v198 == v197)
    goto LABEL_304;
  v187 = (uint64_t *)((char *)v2 + 48);
  v6 = &unk_1ED7F4000;
  v7 = v198;
  v190 = v2;
  v191 = v197;
  while (1)
  {
    v8 = 0;
    v10 = *(v7 - 5);
    v9 = *(v7 - 4);
    v11 = v7 - 5;
    v184 = v11[2];
    v185 = v11[3];
    v12 = *((_BYTE *)v11 + 32);
    v194 = 0;
    v186 = v9;
    if ((int)v9 >= 0)
      v13 = v9;
    else
      v13 = -(int)v9;
    v14 = v13 < 2 || v13 > v6[580];
    v192 = v4;
    if (!v14)
    {
      v15 = *(_QWORD *)(v10 + 40);
      v16 = *((_QWORD *)v2 + 2);
      LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*((_QWORD *)v2 + 1));
      if (!llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v16, v15, LoopLatch) && !a2)
      {
        v8 = 0;
LABEL_14:
        v5 = v191;
        v4 = v192;
        v6 = &unk_1ED7F4000;
        goto LABEL_15;
      }
      v200 = 0;
      v201 = (char *)v10;
      if ((sub_1C61252B8(v187, &v201, &v200) & 1) == 0 || (v8 = *(_QWORD *)(v200 + 8), (v194 = v8) == 0))
      {
        v8 = sub_1C61BE430((uint64_t)v2, v10, v186, v12);
        v194 = v8;
      }
      v141 = &v204;
      v142 = *(unsigned __int8 *)(v10 + 16) - 33;
      if (v142 > 0x37)
        goto LABEL_279;
      if (((1 << (*(_BYTE *)(v10 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v147 = *(_QWORD *)(v10 + 64);
        if (v147 && (*(_BYTE *)(v147 + 17) & 0x30) != 0)
          goto LABEL_265;
        v148 = *(_DWORD *)(v10 + 20);
        if (v148 < 0)
        {
          v150 = v10 - 32 * (v148 & 0x7FFFFFF);
          v153 = *(_QWORD *)(v150 - 8);
          v151 = v150 - 8;
          v152 = v153;
          if (v153)
          {
            v154 = -v152;
            do
            {
              v155 = *(_DWORD *)(*(_QWORD *)(v151 + v154) + 8);
              if (v155 >= 2 && v155 != 7)
                goto LABEL_278;
              v154 += 16;
            }
            while (v154);
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v10, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(v10, 44) & 1) != 0)
        {
          goto LABEL_265;
        }
      }
      else
      {
        if (v142 != 27)
        {
          if (((1 << (*(_BYTE *)(v10 + 16) - 33)) & 0x808001D0000010) != 0)
            goto LABEL_278;
LABEL_279:
          sub_1C61ABE04((uint64_t)v141, &v194);
          goto LABEL_14;
        }
        if ((*(_WORD *)(v10 + 18) & 0x301) == 0)
        {
LABEL_265:
          v141 = &v204;
          goto LABEL_279;
        }
      }
LABEL_278:
      v141 = &v210;
      goto LABEL_279;
    }
LABEL_15:
    if (v11 == v5)
      break;
    v188 = v11;
    v189 = v10;
    v183 = (unsigned int *)v8;
    v180 = v10 - 8;
    v181 = v8 + 8;
    while (1)
    {
      v193 = 0;
      v19 = *(v11 - 5);
      v11 -= 5;
      v18 = v19;
      v193 = v19;
      v20 = v11[2];
      v21 = v11[3];
      v22 = *((unsigned __int8 *)v11 + 32);
      v23 = *v11;
      v24 = v11[1];
      v25 = *(unsigned __int8 *)(*v11 + 16) - 33;
      if (v25 > 0x37)
        goto LABEL_21;
      v27 = *(v4 - 5);
      v26 = *(v4 - 4);
      if (((1 << (*(_BYTE *)(*v11 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v32 = *(_QWORD *)(v23 + 64);
        if (v32 && (*(_BYTE *)(v32 + 17) & 0x30) != 0)
          goto LABEL_21;
        v33 = *(_DWORD *)(v23 + 20);
        if (v33 < 0
          && (v55 = v23 - 32 * (v33 & 0x7FFFFFF), v58 = *(_QWORD *)(v55 - 8), v56 = v55 - 8, (v57 = v58) != 0))
        {
          v59 = -v57;
          while (1)
          {
            v60 = *(_DWORD *)(*(_QWORD *)(v56 + v59) + 8);
            v14 = v60 > 7;
            v61 = (1 << v60) & 0x83;
            v62 = v14 || v61 == 0;
            v5 = v191;
            v4 = v192;
            v6 = (_DWORD *)&unk_1ED7F4000;
            if (v62)
              break;
            v59 += 16;
            if (!v59)
              goto LABEL_38;
          }
        }
        else
        {
LABEL_38:
          hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(*v11, 45);
          v5 = v191;
          v4 = v192;
          v6 = (_DWORD *)&unk_1ED7F4000;
          if ((hasFnAttrOnCalledFunction & 1) != 0)
            goto LABEL_21;
          v35 = llvm::CallBase::hasFnAttrOnCalledFunction(v23, 44);
          v5 = v191;
          v4 = v192;
          v6 = (_DWORD *)&unk_1ED7F4000;
          if ((v35 & 1) != 0)
            goto LABEL_21;
        }
      }
      else if (v25 == 27)
      {
        if ((*(_WORD *)(v23 + 18) & 0x301) == 0)
          goto LABEL_21;
      }
      else if (((1 << (*(_BYTE *)(*v11 + 16) - 33)) & 0x808001D0000010) == 0)
      {
        goto LABEL_21;
      }
      v36 = (int)v24 >= 0 ? v24 : -(int)v24;
      if ((v37 = v6[580], v36 >= 2) && v36 <= v37
        || ((int)v26 >= 0 ? (v38 = v26) : (v38 = -(int)v26), v38 >= 2 && v38 <= v37))
      {
        v39 = *((_QWORD *)v190 + 4);
        if (!v39 || !*(_BYTE *)(*(_QWORD *)(v39 + 16) + 216))
          break;
        v201 = 0;
        if (sub_1C61A45F4(*((_QWORD *)v190 + 17), *((_DWORD *)v190 + 38), v23, &v201))
        {
          v40 = v201;
          v41 = *((_QWORD *)v190 + 17);
          v42 = *((_DWORD *)v190 + 38);
        }
        else
        {
          v41 = *((_QWORD *)v190 + 17);
          v42 = *((_DWORD *)v190 + 38);
          v40 = (void *)(v41 + 56 * v42);
        }
        v5 = v191;
        v4 = v192;
        v6 = (_DWORD *)&unk_1ED7F4000;
        if ((void *)(v41 + 56 * v42) != v40)
        {
          sub_1C61BE788((uint64_t)&v201, v41, v42, v23);
          v50 = (char *)sub_1C477672C((uint64_t)&v201, v27);
          v51 = v202;
          if (v202 == v201)
            v52 = (unsigned int *)&v203 + 1;
          else
            v52 = (unsigned int *)&v203;
          v53 = *v52;
          if (v202 != v201)
            free(v202);
          v5 = v191;
          v4 = v192;
          v6 = (_DWORD *)&unk_1ED7F4000;
          if (v50 != &v51[8 * v53])
            break;
        }
      }
LABEL_21:
      if ((int)v24 >= 0)
        v28 = v24;
      else
        v28 = -(int)v24;
      if (v13 < 2)
        goto LABEL_33;
      v29 = v6[580];
      v30 = v28 < 2 || v28 > v29;
      if (v30 || v13 > v29)
        goto LABEL_33;
      v200 = 0;
      v201 = (char *)v18;
      if (sub_1C61252B8(v187, &v201, &v200))
      {
        v44 = v200;
        v45 = *((_QWORD *)v190 + 6);
        v46 = *((unsigned int *)v190 + 16);
      }
      else
      {
        v45 = *((_QWORD *)v190 + 6);
        v46 = *((unsigned int *)v190 + 16);
        v44 = v45 + 16 * v46;
      }
      v5 = v191;
      v4 = v192;
      v6 = (_DWORD *)&unk_1ED7F4000;
      if (v44 != v45 + 16 * v46)
        goto LABEL_33;
      v47 = 0;
      v48 = *(unsigned __int8 *)(v18 + 16) - 33;
      if (v48 > 0x37)
        goto LABEL_98;
      if (((1 << (*(_BYTE *)(v18 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v54 = *(_QWORD *)(v18 + 64);
        v49 = v189;
        if (v54 && ((*(_BYTE *)(v54 + 20) & 4) != 0 || (*(_BYTE *)(v54 + 17) & 0x10) != 0))
        {
          v47 = 0;
          goto LABEL_99;
        }
        LODWORD(v201) = 7;
        if (!sub_1C53E4BBC(v18, (__int32 *)&v201, 1uLL))
          goto LABEL_78;
        v63 = *(_QWORD *)(v18 - 32);
        if (v63 && !*(_BYTE *)(v63 + 16) && *(_QWORD *)(v63 + 24) == *(_QWORD *)(v18 + 72))
        {
          v49 = v189;
          if (*(_DWORD *)(v63 + 36) == 7)
          {
LABEL_78:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v18, 66) & 1) != 0)
              v47 = 0;
            else
              v47 = llvm::CallBase::hasFnAttrOnCalledFunction(v18, 44) ^ 1;
          }
          else
          {
            v47 = 1;
          }
          v5 = v191;
          v4 = v192;
          v6 = (_DWORD *)&unk_1ED7F4000;
          goto LABEL_99;
        }
        v47 = 1;
        v5 = v191;
        v4 = v192;
        v6 = (_DWORD *)&unk_1ED7F4000;
LABEL_98:
        v49 = v189;
        goto LABEL_99;
      }
      v49 = v189;
      if (((1 << (*(_BYTE *)(v18 + 16) - 33)) & 0x808001C8000010) != 0)
      {
        v47 = 1;
      }
      else if (v48 == 28)
      {
        v47 = (*(_WORD *)(v18 + 18) & 0x301) != 0;
      }
LABEL_99:
      v64 = *(unsigned __int8 *)(v49 + 16) - 33;
      if (v64 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(v49 + 16) - 33)) & 0x8000000000041) != 0)
        {
          v68 = *(_QWORD *)(v49 + 64);
          if (!v68 || (*(_BYTE *)(v68 + 20) & 4) == 0 && (*(_BYTE *)(v68 + 17) & 0x10) == 0)
          {
            LODWORD(v201) = 7;
            if (sub_1C53E4BBC(v49, (__int32 *)&v201, 1uLL))
            {
              v74 = *(_QWORD *)(v49 - 32);
              if (!v74 || *(_BYTE *)(v74 + 16) || *(_QWORD *)(v74 + 24) != *(_QWORD *)(v189 + 72))
              {
                v5 = v191;
                v4 = v192;
                v6 = (_DWORD *)&unk_1ED7F4000;
LABEL_130:
                if ((v47 & 1) == 0)
                  goto LABEL_33;
                goto LABEL_104;
              }
              v5 = v191;
              v4 = v192;
              v6 = (_DWORD *)&unk_1ED7F4000;
              v49 = v189;
              if (*(_DWORD *)(v74 + 36) != 7)
                goto LABEL_130;
            }
            v69 = llvm::CallBase::hasFnAttrOnCalledFunction(v49, 66);
            v5 = v191;
            v4 = v192;
            v6 = (_DWORD *)&unk_1ED7F4000;
            if ((v69 & 1) == 0)
            {
              v70 = llvm::CallBase::hasFnAttrOnCalledFunction(v49, 44);
              v5 = v191;
              v4 = v192;
              v6 = (_DWORD *)&unk_1ED7F4000;
              v71 = v70 ^ 1;
              goto LABEL_114;
            }
          }
        }
        else
        {
          if (((1 << (*(_BYTE *)(v49 + 16) - 33)) & 0x808001C8000010) != 0)
            goto LABEL_130;
          if (v64 == 28)
          {
            v71 = (*(_WORD *)(v49 + 18) & 0x301) != 0;
LABEL_114:
            if (v47 != v71)
              goto LABEL_33;
            goto LABEL_104;
          }
        }
      }
      if ((v47 & 1) != 0)
        goto LABEL_33;
LABEL_104:
      v65 = 0;
      v66 = *(unsigned __int8 *)(v18 + 16) - 33;
      if (v66 > 0x37)
        goto LABEL_141;
      if (((1 << (*(_BYTE *)(v18 + 16) - 33)) & 0x8000000000041) != 0)
      {
        v72 = *(_QWORD *)(v18 + 64);
        v67 = v189;
        if (v72 && (*(_BYTE *)(v72 + 17) & 0x30) != 0)
        {
          v65 = 0;
          goto LABEL_142;
        }
        v73 = *(_DWORD *)(v18 + 20);
        if (v73 < 0)
        {
          v75 = v18 - 32 * (v73 & 0x7FFFFFF);
          v78 = *(_QWORD *)(v75 - 8);
          v76 = v75 - 8;
          v77 = v78;
          if (v78)
          {
            v79 = -v77;
            while (1)
            {
              v80 = *(_DWORD *)(*(_QWORD *)(v76 + v79) + 8);
              v14 = v80 > 7;
              v81 = (1 << v80) & 0x83;
              if (v14 || v81 == 0)
                break;
              v79 += 16;
              v67 = v189;
              if (!v79)
                goto LABEL_119;
            }
            v65 = 1;
            v5 = v191;
            v4 = v192;
            v6 = (_DWORD *)&unk_1ED7F4000;
LABEL_141:
            v67 = v189;
            goto LABEL_142;
          }
        }
LABEL_119:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(v18, 45) & 1) != 0)
          v65 = 0;
        else
          v65 = llvm::CallBase::hasFnAttrOnCalledFunction(v18, 44) ^ 1;
        v5 = v191;
        v4 = v192;
        v6 = (_DWORD *)&unk_1ED7F4000;
      }
      else
      {
        v67 = v189;
        if (v66 == 27)
          v65 = (*(_WORD *)(v18 + 18) & 0x301) != 0;
        else
          v65 = ((1 << (*(_BYTE *)(v18 + 16) - 33)) & 0x808001D0000010) != 0;
      }
LABEL_142:
      v83 = *(unsigned __int8 *)(v67 + 16) - 33;
      if (v83 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(v67 + 16) - 33)) & 0x8000000000041) != 0)
        {
          v93 = *(_QWORD *)(v67 + 64);
          if (!v93 || (*(_BYTE *)(v93 + 17) & 0x30) == 0)
          {
            v94 = *(_DWORD *)(v67 + 20);
            if (v94 < 0)
            {
              v135 = (_QWORD *)(v180 - 32 * (v94 & 0x7FFFFFF));
              if (*v135)
              {
                v136 = -*v135;
                while (1)
                {
                  v137 = *(_DWORD *)(*(_QWORD *)((char *)v135 + v136) + 8);
                  v14 = v137 > 7;
                  v138 = (1 << v137) & 0x83;
                  v139 = v14 || v138 == 0;
                  v5 = v191;
                  v4 = v192;
                  v6 = (_DWORD *)&unk_1ED7F4000;
                  if (v139)
                    break;
                  v136 += 16;
                  if (!v136)
                    goto LABEL_164;
                }
LABEL_236:
                if ((v65 & 1) == 0)
                  goto LABEL_33;
                goto LABEL_147;
              }
            }
LABEL_164:
            v95 = llvm::CallBase::hasFnAttrOnCalledFunction(v67, 45);
            v5 = v191;
            v4 = v192;
            v6 = (_DWORD *)&unk_1ED7F4000;
            if ((v95 & 1) == 0)
            {
              v96 = llvm::CallBase::hasFnAttrOnCalledFunction(v67, 44);
              v5 = v191;
              v4 = v192;
              v6 = (_DWORD *)&unk_1ED7F4000;
              v97 = v96 ^ 1;
              goto LABEL_167;
            }
          }
        }
        else
        {
          if (v83 == 27)
          {
            v97 = (*(_WORD *)(v67 + 18) & 0x301) != 0;
LABEL_167:
            if (v65 != v97)
              goto LABEL_33;
            goto LABEL_147;
          }
          if (((1 << (*(_BYTE *)(v67 + 16) - 33)) & 0x808001D0000010) != 0)
            goto LABEL_236;
        }
      }
      if ((v65 & 1) != 0)
        goto LABEL_33;
LABEL_147:
      if (v24 != v186 || v21 != v185)
        goto LABEL_33;
      v84 = **(_QWORD **)(v18 - 32);
      v85 = *(_DWORD *)(v84 + 8);
      if ((v85 & 0xFE) == 0x12)
        v85 = *(_DWORD *)(**(_QWORD **)(v84 + 16) + 8);
      v86 = **(_QWORD **)(v189 - 32);
      v87 = *(_DWORD *)(v86 + 8);
      if ((v87 & 0xFE) == 0x12)
        v87 = *(_DWORD *)(**(_QWORD **)(v86 + 16) + 8);
      if ((v87 ^ v85) > 0xFF)
        goto LABEL_33;
      llvm::ScalarEvolution::getMinusSCEV(*(_QWORD *)(*(_QWORD *)v190 + 88), v20, v184);
      v5 = v191;
      v4 = v192;
      v6 = (_DWORD *)&unk_1ED7F4000;
      if (!v88 || *(_WORD *)(v88 + 24) != 0)
        goto LABEL_33;
      v90 = *(_QWORD *)(v88 + 32);
      v91 = *(_DWORD *)(v90 + 32);
      v92 = v91 > 0x40 ? **(_QWORD **)(v90 + 24) : (uint64_t)(*(_QWORD *)(v90 + 24) << -(char)v91) >> -(char)v91;
      v98 = v92 / v185;
      if (v92 % v185)
        goto LABEL_33;
      v99 = *(_QWORD *)(v18 + 40);
      v100 = *(_QWORD *)(v189 + 40);
      v101 = *((_QWORD *)v190 + 2);
      v102 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*((_QWORD *)v190 + 1));
      if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v101, v99, v102))
      {
        v103 = *((_QWORD *)v190 + 2);
        v104 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(*((_QWORD *)v190 + 1));
        v105 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v103, v100, v104);
        v106 = a2;
        if (v99 != v100)
          v106 = 0;
        v5 = v191;
        v4 = v192;
        v6 = (_DWORD *)&unk_1ED7F4000;
        if (!v105 && (v106 & 1) == 0)
          goto LABEL_33;
      }
      else
      {
        v5 = v191;
        v4 = v192;
        v6 = (_DWORD *)&unk_1ED7F4000;
        if (!a2 || v99 != v100)
          goto LABEL_33;
      }
      v107 = sub_1C4FA892C((uint64_t)v183, v189) + v98;
      v108 = sub_1C4FAA3C4(v107, v183[8], (void (*)(uint64_t **__return_ptr, char *, uint64_t *, char *))llvm::APInt::sadd_ov, 0);
      v5 = v191;
      v4 = v192;
      v6 = (_DWORD *)&unk_1ED7F4000;
      if (!HIDWORD(v108))
        goto LABEL_33;
      v109 = v108;
      LODWORD(v201) = v108;
      if ((v108 - 0x7FFFFFFF) < 2)
        goto LABEL_33;
      v110 = *((_QWORD *)v183 + 1);
      v111 = v183[6];
      if ((_DWORD)v111)
      {
        LODWORD(v112) = (v111 - 1) & (37 * v108);
        v113 = (int *)(v110 + 16 * v112);
        v114 = *v113;
        if (*v113 == (_DWORD)v108)
          goto LABEL_188;
        v115 = 1;
        while (1)
        {
          v5 = v191;
          v4 = v192;
          v6 = (_DWORD *)&unk_1ED7F4000;
          if (v114 == 0x7FFFFFFF)
            break;
          v116 = v112 + v115++;
          v112 = v116 & (v111 - 1);
          v114 = *(_DWORD *)(v110 + 16 * v112);
          if (v114 == (_DWORD)v108)
          {
            v113 = (int *)(v110 + 16 * v112);
            v5 = v191;
            v4 = v192;
            goto LABEL_188;
          }
        }
      }
      v113 = (int *)(v110 + 16 * v111);
LABEL_188:
      if ((int *)(v110 + 16 * v111) != v113)
        goto LABEL_33;
      v117 = v183;
      v118 = v183[9];
      if (v118 >= v109)
      {
        if ((int)v183[8] > v109)
        {
          v119 = sub_1C4FAA3C4(v118, v109, (void (*)(uint64_t **__return_ptr, char *, uint64_t *, char *))llvm::APInt::ssub_ov, 0);
          v5 = v191;
          v4 = v192;
          v6 = (_DWORD *)&unk_1ED7F4000;
          if (!HIDWORD(v119) || *v183 <= (uint64_t)(int)v119)
            goto LABEL_33;
          v117 = v183;
          v183[8] = v109;
          v110 = *((_QWORD *)v183 + 1);
          LODWORD(v111) = v183[6];
        }
      }
      else
      {
        if ((int)*v183 <= v107)
          goto LABEL_33;
        v117 = v183;
        v183[9] = v109;
      }
      v120 = *((unsigned __int8 *)v117 + 5);
      if (v120 >= v22)
        LOBYTE(v120) = v22;
      *((_BYTE *)v117 + 5) = v120;
      if (!(_DWORD)v111)
      {
        v121 = 0;
LABEL_200:
        v122 = sub_1C4FA9848(v181, &v201, v121);
        *v122 = v109;
        *((_QWORD *)v122 + 1) = 0;
        goto LABEL_202;
      }
      v123 = v111 - 1;
      v124 = v123 & (37 * v109);
      v122 = (_DWORD *)(v110 + 16 * v124);
      v125 = *v122;
      if (*v122 != v109)
      {
        v131 = 0;
        v132 = 1;
        while (v125 != 0x7FFFFFFF)
        {
          if (v131)
            v133 = 0;
          else
            v133 = v125 == 0x80000000;
          if (v133)
            v131 = v122;
          v134 = v124 + v132++;
          v124 = v134 & v123;
          v122 = (_DWORD *)(v110 + 16 * v124);
          v125 = *v122;
          v117 = v183;
          if (*v122 == v109)
            goto LABEL_202;
        }
        if (v131)
          v121 = v131;
        else
          v121 = v122;
        v117 = v183;
        goto LABEL_200;
      }
LABEL_202:
      *((_QWORD *)v122 + 1) = v18;
      sub_1C6180A54((uint64_t)v187, &v193)[1] = v117;
      v4 = v192;
      v126 = v193;
      v127 = *(unsigned __int8 *)(v193 + 16) - 33;
      v5 = v191;
      v6 = (_DWORD *)&unk_1ED7F4000;
      if (v127 <= 0x37)
      {
        if (((1 << (*(_BYTE *)(v193 + 16) - 33)) & 0x8000000000041) == 0)
        {
          if (((1 << (*(_BYTE *)(v193 + 16) - 33)) & 0x808001C8000010) == 0
            && (v127 != 28 || (*(_WORD *)(v193 + 18) & 0x301) == 0))
          {
            goto LABEL_33;
          }
          goto LABEL_214;
        }
        v128 = *(_QWORD *)(v193 + 64);
        if (v128 && ((*(_BYTE *)(v128 + 20) & 4) != 0 || (*(_BYTE *)(v128 + 17) & 0x10) != 0))
          goto LABEL_33;
        LODWORD(v201) = 7;
        if (sub_1C53E4BBC(v193, (__int32 *)&v201, 1uLL))
        {
          v140 = *(_QWORD *)(v126 - 32);
          if (v140 && !*(_BYTE *)(v140 + 16) && *(_QWORD *)(v140 + 24) == *(_QWORD *)(v126 + 72))
          {
            v5 = v191;
            v4 = v192;
            v6 = (_DWORD *)&unk_1ED7F4000;
            if (*(_DWORD *)(v140 + 36) == 7)
              goto LABEL_212;
          }
          else
          {
            v5 = v191;
            v4 = v192;
            v6 = (_DWORD *)&unk_1ED7F4000;
          }
        }
        else
        {
LABEL_212:
          v129 = llvm::CallBase::hasFnAttrOnCalledFunction(v126, 66);
          v5 = v191;
          v4 = v192;
          v6 = (_DWORD *)&unk_1ED7F4000;
          if ((v129 & 1) != 0)
            goto LABEL_33;
          v130 = llvm::CallBase::hasFnAttrOnCalledFunction(v126, 44);
          v5 = v191;
          v4 = v192;
          v6 = (_DWORD *)&unk_1ED7F4000;
          if ((v130 & 1) != 0)
            goto LABEL_33;
        }
LABEL_214:
        *((_QWORD *)v183 + 5) = v126;
      }
LABEL_33:
      if (v11 == v5)
        goto LABEL_257;
    }
    v200 = 0;
    v201 = (char *)v18;
    if (sub_1C61252B8(v187, &v201, &v200))
    {
      v143 = v200;
      v144 = (uint64_t)v190;
      v145 = *((_QWORD *)v190 + 6);
      v146 = *((unsigned int *)v190 + 16);
    }
    else
    {
      v144 = (uint64_t)v190;
      v145 = *((_QWORD *)v190 + 6);
      v146 = *((unsigned int *)v190 + 16);
      v143 = v145 + 16 * v146;
    }
    v5 = v191;
    v6 = (_DWORD *)&unk_1ED7F4000;
    if (v143 != v145 + 16 * v146)
    {
      v200 = 0;
      v201 = (char *)v18;
      v149 = 0;
      if (sub_1C61252B8(v187, &v201, &v200))
        v149 = *(_QWORD *)(v200 + 8);
      v201 = (char *)v149;
      sub_1C61BE50C((uint64_t)&v210, (uint64_t *)&v201);
      sub_1C4FA8804(v144, v149);
      v5 = v191;
      v6 = (_DWORD *)&unk_1ED7F4000;
    }
LABEL_257:
    v7 = v188;
    v4 = v188;
    v2 = v190;
  }
  if ((_DWORD)v208)
  {
    v157 = (uint64_t *)v207;
    for (i = 8 * v208; i; i -= 8)
    {
      v159 = *v157;
      if (*(_DWORD *)(*v157 + 16) != *(_DWORD *)*v157)
      {
        LODWORD(v201) = *(_DWORD *)(v159 + 32);
        v160 = sub_1C4FA9B60((uint64_t *)(v159 + 8), &v201);
        v161 = *(unsigned __int8 *)(v160 + 16);
        if (v160 && v161 == 60)
        {
          v162 = *(llvm::Value **)(v160 - 32);
        }
        else
        {
          v162 = 0;
          if (v160 && v161 == 61)
            v162 = *(llvm::Value **)(v160 - 32);
          v160 = *(_QWORD *)(v160 - 64);
        }
        if (!llvm::getPtrStride(*(int8x16_t **)v2, *(_QWORD *)v160, v162, *((_QWORD *)v2 + 1), v179, 0, 1))
          goto LABEL_302;
        LODWORD(v201) = *(_DWORD *)v159 + *(_DWORD *)(v159 + 32) - 1;
        if (sub_1C4FA9B60((uint64_t *)(v159 + 8), &v201))
        {
          LODWORD(v201) = *(_DWORD *)v159 + *(_DWORD *)(v159 + 32) - 1;
          v163 = sub_1C4FA9B60((uint64_t *)(v159 + 8), &v201);
          v164 = *(unsigned __int8 *)(v163 + 16);
          if (v163 && v164 == 60)
          {
            v165 = *(llvm::Value **)(v163 - 32);
          }
          else
          {
            v165 = 0;
            if (v163 && v164 == 61)
              v165 = *(llvm::Value **)(v163 - 32);
            v163 = *(_QWORD *)(v163 - 64);
          }
          if (llvm::getPtrStride(*(int8x16_t **)v2, *(_QWORD *)v163, v165, *((_QWORD *)v2 + 1), v179, 0, 1))
            goto LABEL_303;
LABEL_302:
          sub_1C4FA8804((uint64_t)v2, v159);
          goto LABEL_303;
        }
        if (*(_BYTE *)(v159 + 4))
          goto LABEL_302;
        *((_BYTE *)v2 + 40) = 1;
      }
LABEL_303:
      ++v157;
    }
  }
LABEL_304:
  if ((_DWORD)v214)
  {
    v166 = v213;
    v167 = (char *)&v213[v214];
    do
    {
      v168 = *v166;
      if (*(_DWORD *)(*v166 + 16) != *(_DWORD *)*v166)
      {
        if ((a2 & 1) == 0)
          goto LABEL_327;
        LODWORD(v201) = *(_DWORD *)(v168 + 32);
        v169 = sub_1C4FA9B60((uint64_t *)(v168 + 8), &v201);
        v170 = *(unsigned __int8 *)(v169 + 16);
        if (v169 && v170 == 60)
        {
          v171 = *(llvm::Value **)(v169 - 32);
        }
        else
        {
          v171 = 0;
          if (v169 && v170 == 61)
            v171 = *(llvm::Value **)(v169 - 32);
          v169 = *(_QWORD *)(v169 - 64);
        }
        if (llvm::getPtrStride(*(int8x16_t **)v2, *(_QWORD *)v169, v171, *((_QWORD *)v2 + 1), v179, 0, 1))
        {
          v172 = *(_DWORD *)v168 - 1;
          while (1)
          {
            v173 = v172 - 1;
            if (v172 < 1)
              break;
            LODWORD(v201) = v172 + *(_DWORD *)(v168 + 32);
            v174 = sub_1C4FA9B60((uint64_t *)(v168 + 8), &v201);
            v172 = v173;
            if (v174)
            {
              LODWORD(v201) = *(_DWORD *)(v168 + 32) + v173 + 1;
              v175 = sub_1C4FA9B60((uint64_t *)(v168 + 8), &v201);
              v176 = *(unsigned __int8 *)(v175 + 16);
              if (v175 && v176 == 60)
              {
                v177 = *(llvm::Value **)(v175 - 32);
              }
              else
              {
                v177 = 0;
                if (v175 && v176 == 61)
                  v177 = *(llvm::Value **)(v175 - 32);
                v175 = *(_QWORD *)(v175 - 64);
              }
              if (llvm::getPtrStride(*(int8x16_t **)v2, *(_QWORD *)v175, v177, *((_QWORD *)v2 + 1), v179, 0, 1))
                break;
              goto LABEL_327;
            }
          }
        }
        else
        {
LABEL_327:
          sub_1C4FA8804((uint64_t)v2, v168);
        }
      }
      ++v166;
    }
    while (v166 != (uint64_t *)v167);
  }
  if (v207 != v209)
    free(v207);
  if ((v204 & 1) == 0)
    MEMORY[0x1CAA32FB4](v205.i64[0], 8);
  if (v213 != v215)
    free(v213);
  if ((v210 & 1) == 0)
    MEMORY[0x1CAA32FB4](v211.i64[0], 8);
  return sub_1C6176BF8(v195);
}

uint64_t sub_1C4FA8804(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v10;
  _QWORD *v11;

  if (*(_DWORD *)a2)
  {
    v4 = 0;
    do
    {
      v10 = v4 + *(_DWORD *)(a2 + 32);
      v5 = sub_1C4FA9B60((uint64_t *)(a2 + 8), &v10);
      if (v5)
      {
        v11 = 0;
        if (sub_1C6144BDC(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 64), v5, &v11))
        {
          *v11 = -8192;
          *(int32x2_t *)(a1 + 56) = vadd_s32(*(int32x2_t *)(a1 + 56), (int32x2_t)0x1FFFFFFFFLL);
        }
      }
      ++v4;
    }
    while (v4 < *(_DWORD *)a2);
  }
  v6 = sub_1C477672C(a1 + 72, a2);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = 88;
  if (v7 == *(_QWORD *)(a1 + 72))
    v8 = 92;
  if (v6 != (_QWORD *)(v7 + 8 * *(unsigned int *)(a1 + v8)))
  {
    *v6 = -2;
    ++*(_DWORD *)(a1 + 96);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a2 + 8), 8);
  return MEMORY[0x1CAA32FC0](a2, 0x1020C40BF128421);
}

int *sub_1C4FA892C(uint64_t a1, uint64_t a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  int *v6;
  int *v7;
  int v8;

  v2 = *(int **)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 24);
  v4 = &v2[4 * v3];
  if (*(_DWORD *)(a1 + 16))
  {
    if ((_DWORD)v3)
    {
      v5 = 16 * v3;
      v6 = *(int **)(a1 + 8);
      while ((*v6 - 0x7FFFFFFF) <= 1)
      {
        v6 += 4;
        v5 -= 16;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = *(int **)(a1 + 8);
    }
  }
  else
  {
LABEL_6:
    v6 = &v2[4 * v3];
  }
  v7 = &v2[4 * v3];
  if (v6 != v7)
  {
    while (*((_QWORD *)v6 + 1) != a2)
    {
      v2 = v6 + 4;
      while (v2 != v4)
      {
        v8 = *v2;
        v2 += 4;
        if ((v8 - 0x7FFFFFFF) >= 2)
        {
          v6 = v2 - 4;
          goto LABEL_15;
        }
      }
      v6 = v4;
LABEL_15:
      if (v6 == v7)
        return v2;
    }
    return (int *)(*v6 - *(_DWORD *)(a1 + 32));
  }
  return v2;
}

uint64_t llvm::InterleavedAccessInfo::invalidateGroupsRequiringScalarEpilogue(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t **v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;

  if (*(_BYTE *)(this + 40))
  {
    v1 = this;
    v2 = *(_QWORD *)(this + 80);
    if (v2 == *(_QWORD *)(this + 72))
      v3 = (unsigned int *)(this + 92);
    else
      v3 = (unsigned int *)(this + 88);
    v4 = *v3;
    if ((_DWORD)v4)
    {
      v5 = 8 * v4;
      v6 = *(unint64_t **)(this + 80);
      while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v6;
        v5 -= 8;
        if (!v5)
          goto LABEL_9;
      }
    }
    else
    {
      v6 = *(unint64_t **)(this + 80);
    }
    v7 = (unint64_t *)(v2 + 8 * v4);
    while (v6 != v7)
    {
      v8 = (uint64_t **)v6;
      v9 = v6 + 1;
      while (v9 != v7)
      {
        v10 = *v9++;
        if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v6 = v9 - 1;
          goto LABEL_19;
        }
      }
      v6 = v7;
LABEL_19:
      v11 = *v8;
      v12 = *(_DWORD *)*v8 + *((_DWORD *)*v8 + 8) - 1;
      this = sub_1C4FA9B60(v11 + 1, &v12);
      if (!this)
        this = sub_1C4FA8804(v1, (uint64_t)v11);
    }
LABEL_9:
    *(_BYTE *)(v1 + 40) = 0;
  }
  return this;
}

void llvm::InterleaveGroup<llvm::Instruction>::addMetadata(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  _QWORD ****v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x400000000;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int *)(a1 + 24);
  v5 = (int *)(v3 + 16 * v4);
  if (*(_DWORD *)(a1 + 16))
  {
    if ((_DWORD)v4)
    {
      v6 = 16 * v4;
      v7 = *(int **)(a1 + 8);
      while ((*v7 - 0x7FFFFFFF) <= 1)
      {
        v7 += 4;
        v6 -= 16;
        if (!v6)
          goto LABEL_6;
      }
    }
    else
    {
      v7 = *(int **)(a1 + 8);
    }
  }
  else
  {
LABEL_6:
    v7 = (int *)(v3 + 16 * v4);
  }
  v8 = (int *)(v3 + 16 * v4);
  if (v7 == v8)
  {
    v9 = 0;
    v13 = (_QWORD ****)v16;
  }
  else
  {
    LODWORD(v9) = 0;
    do
    {
      v10 = *((_QWORD *)v7 + 1);
      if (v9 >= HIDWORD(v15))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v9 + 1, 8);
        LODWORD(v9) = v15;
      }
      *((_QWORD *)v14 + v9) = v10;
      v9 = (v15 + 1);
      LODWORD(v15) = v15 + 1;
      v11 = v7 + 4;
      while (v11 != v5)
      {
        v12 = *v11;
        v11 += 4;
        if ((v12 - 0x7FFFFFFF) >= 2)
        {
          v7 = v11 - 4;
          goto LABEL_17;
        }
      }
      v7 = v5;
LABEL_17:
      ;
    }
    while (v7 != v8);
    v13 = (_QWORD ****)v14;
  }
  llvm::propagateMetadata(a2, v13, v9);
  if (v14 != v16)
    free(v14);
}

void llvm::VFABI::mangleTLIVectorName(const void *a1@<X0>, size_t a2@<X1>, const void *a3@<X2>, size_t a4@<X3>, int a5@<W4>, unint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  llvm::raw_ostream *v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  _BYTE *v19;
  llvm::raw_ostream *v20;
  void *v21;
  _BYTE *v22;
  _BYTE *v23;
  size_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD v29[2];
  uint64_t v30;
  unint64_t v31;
  _QWORD v32[3];
  int v33;
  uint64_t v34;
  void *v35;
  __int128 v36;
  _QWORD v37[34];

  v37[32] = *MEMORY[0x1E0C80C00];
  v14 = v32;
  v35 = v37;
  v36 = xmmword_1C64638F0;
  sub_1C613932C((uint64_t)v29, (uint64_t)&v35);
  if (v31 - v32[0] > 3)
  {
    *(_DWORD *)v32[0] = 1447516767;
    v16 = v32[0] + 4;
    v32[0] += 4;
    v15 = (llvm::raw_ostream *)v29;
    v17 = v32;
  }
  else
  {
    v15 = llvm::raw_ostream::write((llvm::raw_ostream *)v29, "_ZGV", 4uLL);
    v17 = (_QWORD *)((char *)v15 + 32);
    v16 = *((_QWORD *)v15 + 4);
  }
  if ((unint64_t)(*((_QWORD *)v15 + 3) - v16) > 5)
  {
    *(_WORD *)(v16 + 4) = 24397;
    *(_DWORD *)v16 = 1447840863;
    *v17 += 6;
  }
  else
  {
    v15 = llvm::raw_ostream::write(v15, "_LLVM_", 6uLL);
  }
  v18 = (_BYTE *)*((_QWORD *)v15 + 4);
  if (*((_BYTE **)v15 + 3) == v18)
  {
    llvm::raw_ostream::write(v15, "N", 1uLL);
  }
  else
  {
    *v18 = 78;
    ++*((_QWORD *)v15 + 4);
  }
  if (HIDWORD(a6) == 1)
  {
    v19 = (_BYTE *)v32[0];
    if (v32[0] >= v31)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)v29, 120);
      if (!a5)
        goto LABEL_19;
    }
    else
    {
      ++v32[0];
      *v19 = 120;
      if (!a5)
        goto LABEL_19;
    }
  }
  else
  {
    sub_1C5E21910((llvm::raw_ostream *)v29, a6, 0, 0, 0);
    if (!a5)
      goto LABEL_19;
  }
  do
  {
    if (v31 == v32[0])
      llvm::raw_ostream::write((llvm::raw_ostream *)v29, "v", 1uLL);
    else
      *(_BYTE *)v32[0]++ = 118;
    --a5;
  }
  while (a5);
LABEL_19:
  if (v31 == v32[0])
  {
    v20 = llvm::raw_ostream::write((llvm::raw_ostream *)v29, "_", 1uLL);
    v14 = (_QWORD *)((char *)v20 + 32);
    v21 = (void *)*((_QWORD *)v20 + 4);
  }
  else
  {
    *(_BYTE *)v32[0] = 95;
    v21 = (void *)++v32[0];
    v20 = (llvm::raw_ostream *)v29;
  }
  if (a4 <= *((_QWORD *)v20 + 3) - (_QWORD)v21)
  {
    if (a4)
    {
      memcpy(v21, a3, a4);
      *v14 += a4;
    }
  }
  else
  {
    v20 = llvm::raw_ostream::write(v20, (const char *)a3, a4);
  }
  v22 = (_BYTE *)*((_QWORD *)v20 + 4);
  if (*((_BYTE **)v20 + 3) == v22)
  {
    v20 = llvm::raw_ostream::write(v20, "(", 1uLL);
    v23 = (_BYTE *)*((_QWORD *)v20 + 4);
  }
  else
  {
    *v22 = 40;
    v23 = (_BYTE *)(*((_QWORD *)v20 + 4) + 1);
    *((_QWORD *)v20 + 4) = v23;
  }
  if (a2 <= *((_QWORD *)v20 + 3) - (_QWORD)v23)
  {
    if (a2)
    {
      memcpy(v23, a1, a2);
      v23 = (_BYTE *)(*((_QWORD *)v20 + 4) + a2);
      *((_QWORD *)v20 + 4) = v23;
    }
  }
  else
  {
    v20 = llvm::raw_ostream::write(v20, (const char *)a1, a2);
    v23 = (_BYTE *)*((_QWORD *)v20 + 4);
  }
  if (*((_BYTE **)v20 + 3) == v23)
  {
    llvm::raw_ostream::write(v20, ")", 1uLL);
  }
  else
  {
    *v23 = 41;
    ++*((_QWORD *)v20 + 4);
  }
  v24 = *(_QWORD *)(v34 + 8);
  if (v24 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v25 = *(const void **)v34;
  if (v24 >= 0x17)
  {
    v26 = (v24 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v24 | 7) != 0x17)
      v26 = v24 | 7;
    v27 = v26 + 1;
    v28 = operator new(v26 + 1);
    a7[1] = v24;
    a7[2] = v27 | 0x8000000000000000;
    *a7 = v28;
    a7 = v28;
  }
  else
  {
    *((_BYTE *)a7 + 23) = v24;
    if (!v24)
      goto LABEL_41;
  }
  memmove(a7, v25, v24);
LABEL_41:
  *((_BYTE *)a7 + v24) = 0;
  v29[0] = off_1E81A6E70;
  if (v33 == 1 && v30)
    MEMORY[0x1CAA32F9C](v30, 0x1000C8077774924);
  if (v35 != v37)
    free(v35);
}

void llvm::VFABI::getVectorVariantNames(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  const void *v28;
  size_t v29;
  int i;
  unsigned int v31;
  uint64_t v32;
  const void *v33;
  BOOL v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  const void **v47;
  size_t v48;
  const void *v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  void *__dst[2];
  unint64_t v60;
  _QWORD v61[2];
  int v62;
  char *v63;
  char *v64;
  char *v65;
  __int128 v66;
  void *v67;
  uint64_t v68;
  _QWORD v69[18];

  v2 = a2;
  v69[16] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 64);
  if (!v4 || !*(_DWORD *)(v4 + 8) || (v5 = *(_QWORD *)(v4 + 40)) == 0 || (v6 = *(_DWORD *)(v5 + 40)) == 0)
  {
LABEL_27:
    v20 = llvm::CallBase::getFnAttrOnCalledFunction<llvm::StringRef>(a1, "vector-function-abi-variant", 0x1BuLL);
    if (v20)
      goto LABEL_28;
    return;
  }
  v8 = *(_QWORD *)(v5 + 24);
  v9 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v56 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v56 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v56;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v10 = __ROR8__(qword_1ED7EAC80 ^ 0x54AC860665EEB7E3, 30);
  v11 = 0x9DDFEA08EB382D69
      * ((qword_1ED7EAC80 - 0x64CD130D9C3B577) ^ ((0x9DDFEA08EB382D69
                                                   * ((v10 - 0x4EDB291E9D31B372) ^ (qword_1ED7EAC80
                                                                                    - 0x64CD130D9C3B577))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v10 - 0x4EDB291E9D31B372) ^ (qword_1ED7EAC80 - 0x64CD130D9C3B577))));
  v12 = -348639895 * ((v11 >> 47) ^ v11);
  v13 = 1;
  v2 = a2;
  while (1)
  {
    v14 = v12 & (v6 - 1);
    v15 = v8 + 24 * v14;
    v16 = *(_QWORD **)v15;
    if (*(_QWORD *)v15 == -1)
    {
      if ("vector-function-abi-variant" == (char *)-1)
        goto LABEL_26;
      goto LABEL_9;
    }
    if (v16 != (_QWORD *)-2)
      break;
    if ("vector-function-abi-variant" == (char *)-2)
      goto LABEL_26;
LABEL_9:
    if (v16 == (_QWORD *)-1)
      goto LABEL_27;
    v12 = v13 + v14;
    ++v13;
  }
  if (*(_QWORD *)(v15 + 8) != 27)
    goto LABEL_9;
  v17 = *v16 == 0x662D726F74636576 && v16[1] == 0x2D6E6F6974636E75;
  v18 = v17 && v16[2] == 0x697261762D696261;
  if (!v18 || *(_QWORD *)((char *)v16 + 19) != 0x746E61697261762DLL)
    goto LABEL_9;
LABEL_26:
  v20 = *(_QWORD *)(v15 + 16);
  if (!v20)
    goto LABEL_27;
LABEL_28:
  v21 = *(unsigned int *)(v20 + 16);
  *(_QWORD *)&v66 = v20 + *(unsigned int *)(v20 + 12) + 25;
  *((_QWORD *)&v66 + 1) = v21;
  if ((_DWORD)v21)
  {
    v67 = v69;
    v68 = 0x800000000;
    llvm::StringRef::split(&v66, (uint64_t)&v67, ",", 1uLL, -1, 1);
    v22 = (char *)v67;
    v61[0] = 0;
    v61[1] = 0;
    v62 = 0;
    v64 = 0;
    v65 = 0;
    v63 = 0;
    if ((_DWORD)v68)
    {
      v57 = v2;
      v58 = (char *)v67 + 16 * v68;
      do
      {
        v23 = v62;
        if (v62)
        {
          v24 = v61[0];
          v25 = sub_1C5E3DF4C(*(_QWORD **)v22, *(_QWORD *)v22 + *((_QWORD *)v22 + 1));
          v26 = 0;
          v27 = v23 - 1;
          v28 = *(const void **)v22;
          v29 = *((_QWORD *)v22 + 1);
          for (i = 1; ; ++i)
          {
            v31 = v25 & v27;
            v32 = v24 + 16 * (v25 & v27);
            v33 = *(const void **)v32;
            if (*(_QWORD *)v32 == -1)
            {
              if (v28 == (const void *)-1)
                goto LABEL_70;
            }
            else if (v33 == (const void *)-2)
            {
              if (v28 == (const void *)-2)
                goto LABEL_70;
            }
            else if (v29 == *(_QWORD *)(v32 + 8) && (!v29 || !memcmp(v28, *(const void **)v32, v29)))
            {
              goto LABEL_70;
            }
            if (v33 == (const void *)-1)
              break;
            if (v26)
              v34 = 0;
            else
              v34 = v33 == (const void *)-2;
            if (v34)
              v26 = v24 + 16 * v31;
            v25 = i + v31;
          }
          if (v26)
            v35 = v26;
          else
            v35 = v24 + 16 * v31;
        }
        else
        {
          v35 = 0;
        }
        *(_OWORD *)sub_1C4FAA5F8((unint64_t)v61, (uint64_t)v22, (uint64_t)v22, v35) = *(_OWORD *)v22;
        v36 = v64;
        if (v64 >= v65)
        {
          v38 = v63;
          v39 = (v64 - v63) >> 4;
          v40 = v39 + 1;
          if ((unint64_t)(v39 + 1) >> 60)
LABEL_91:
            abort();
          v41 = v65 - v63;
          if ((v65 - v63) >> 3 > v40)
            v40 = v41 >> 3;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
            v42 = 0xFFFFFFFFFFFFFFFLL;
          else
            v42 = v40;
          if (v42)
          {
            if (v42 >> 60)
              sub_1C4764EE4();
            v43 = (char *)operator new(16 * v42);
          }
          else
          {
            v43 = 0;
          }
          v44 = &v43[16 * v39];
          *(_OWORD *)v44 = *(_OWORD *)v22;
          v45 = v44;
          if (v36 != v38)
          {
            do
            {
              *((_OWORD *)v45 - 1) = *((_OWORD *)v36 - 1);
              v45 -= 16;
              v36 -= 16;
            }
            while (v36 != v38);
            v36 = v63;
          }
          v37 = v44 + 16;
          v63 = v45;
          v64 = v44 + 16;
          v65 = &v43[16 * v42];
          if (v36)
            operator delete(v36);
        }
        else
        {
          *(_OWORD *)v64 = *(_OWORD *)v22;
          v37 = v36 + 16;
        }
        v64 = v37;
LABEL_70:
        v22 += 16;
      }
      while (v22 != v58);
      v47 = (const void **)v63;
      v46 = v64;
      if (v63 != v64)
      {
        while (2)
        {
          v48 = (size_t)v47[1];
          if (v48 >= 0x7FFFFFFFFFFFFFF8)
            goto LABEL_91;
          v49 = *v47;
          if (v48 >= 0x17)
          {
            v51 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v48 | 7) != 0x17)
              v51 = v48 | 7;
            v52 = v51 + 1;
            v50 = (void **)operator new(v51 + 1);
            __dst[1] = (void *)v48;
            v60 = v52 | 0x8000000000000000;
            __dst[0] = v50;
          }
          else
          {
            HIBYTE(v60) = v47[1];
            v50 = __dst;
            if (!v48)
            {
LABEL_82:
              *((_BYTE *)v50 + v48) = 0;
              v53 = sub_1C4E01890(v57, (unint64_t)__dst, 1);
              v54 = *(_QWORD *)v57 + 24 * *(unsigned int *)(v57 + 8);
              v55 = *(_OWORD *)v53;
              *(_QWORD *)(v54 + 16) = *(_QWORD *)(v53 + 16);
              *(_OWORD *)v54 = v55;
              *(_QWORD *)(v53 + 8) = 0;
              *(_QWORD *)(v53 + 16) = 0;
              *(_QWORD *)v53 = 0;
              ++*(_DWORD *)(v57 + 8);
              if (SHIBYTE(v60) < 0)
                operator delete(__dst[0]);
              v47 += 2;
              if (v47 == (const void **)v46)
              {
                v46 = v63;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        memmove(v50, v49, v48);
        goto LABEL_82;
      }
LABEL_86:
      if (v46)
      {
        v64 = v46;
        operator delete(v46);
      }
    }
    MEMORY[0x1CAA32FB4](v61[0], 8);
    if (v67 != v69)
      free(v67);
  }
}

BOOL llvm::VFShape::hasValidParameterList(llvm::VFShape *this)
{
  unint64_t v1;
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  int *i;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int *v10;
  uint64_t v11;
  int v12;

  v1 = *((unsigned int *)this + 4);
  if ((_DWORD)v1)
  {
    v2 = 0;
    v3 = 0;
    v4 = *((_QWORD *)this + 1);
    for (i = (int *)(v4 + 20); ; i += 4)
    {
      v6 = v4 + 16 * v2;
      v7 = *(_DWORD *)(v6 + 4);
      if ((v7 - 1) < 4)
      {
        if (!*(_DWORD *)(v6 + 8))
          return v3;
      }
      else if ((v7 - 5) >= 4)
      {
        v10 = i;
        v11 = v2;
        if (v7 == 10)
        {
          while (++v11 < v1)
          {
            v12 = *v10;
            v10 += 4;
            if (v12 == 10)
              return v3;
          }
        }
      }
      else
      {
        v8 = *(int *)(v4 + 16 * v2 + 8);
        if ((int)v8 >= (int)v1)
          return v3;
        if (v2 == v8 || *(_DWORD *)(v4 + 16 * v8 + 4) != 9)
          return v3;
      }
      v3 = ++v2 >= v1;
      if (v2 == v1)
        return v3;
    }
  }
  return 1;
}

_QWORD *sub_1C4FA96C8(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61BE6B8(a1, v4, &v4[7 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

_DWORD *sub_1C4FA978C(uint64_t a1, _DWORD *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _DWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_1C4FA9848(a1, a2, v12);
    *v6 = *a2;
    *((_QWORD *)v6 + 1) = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_DWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != 0x7FFFFFFF)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == 0x80000000;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_DWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

_DWORD *sub_1C4FA9848(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
    sub_1C4FA99D8((uint64_t *)a1, v6);
    v16 = *(_DWORD *)(a1 + 16);
    if (v16)
    {
      v17 = v16 - 1;
      v18 = (37 * *a2) & v17;
      a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v18);
      v19 = *a3;
      if (*a2 == *a3)
        goto LABEL_3;
      v12 = 0;
      v20 = 1;
      while (v19 != 0x7FFFFFFF)
      {
        if (v12)
          v21 = 0;
        else
          v21 = v19 == 0x80000000;
        if (v21)
          v12 = a3;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v18);
        v19 = *a3;
        if (*a2 == *a3)
          goto LABEL_3;
      }
      goto LABEL_29;
    }
LABEL_28:
    a3 = 0;
    goto LABEL_3;
  }
  sub_1C4FA99D8((uint64_t *)a1, 2 * v6);
  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_28;
  v9 = v8 - 1;
  v10 = (37 * *a2) & v9;
  a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v10);
  v11 = *a3;
  if (*a2 == *a3)
    goto LABEL_3;
  v12 = 0;
  v13 = 1;
  while (v11 != 0x7FFFFFFF)
  {
    if (v12)
      v14 = 0;
    else
      v14 = v11 == 0x80000000;
    if (v14)
      v12 = a3;
    v15 = v10 + v13++;
    v10 = v15 & v9;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v10);
    v11 = *a3;
    if (*a2 == *a3)
      goto LABEL_3;
  }
LABEL_29:
  if (v12)
    a3 = v12;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != 0x7FFFFFFF)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_DWORD *sub_1C4FA99D8(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = 0x7FFFFFFF;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      do
      {
        v13 = *v12;
        if ((*v12 - 0x7FFFFFFF) >= 2)
        {
          v14 = *((_DWORD *)a1 + 4) - 1;
          v15 = v14 & (37 * v13);
          v16 = *a1 + 16 * v15;
          v17 = *(_DWORD *)v16;
          if (v13 != *(_DWORD *)v16)
          {
            v18 = 0;
            v19 = 1;
            while (v17 != 0x7FFFFFFF)
            {
              if (v18)
                v20 = 0;
              else
                v20 = v17 == 0x80000000;
              if (v20)
                v18 = v16;
              v21 = v15 + v19++;
              v15 = v21 & v14;
              v16 = *a1 + 16 * (v21 & v14);
              v17 = *(_DWORD *)v16;
              if (v13 == *(_DWORD *)v16)
                goto LABEL_12;
            }
            if (v18)
              v16 = v18;
          }
LABEL_12:
          *(_DWORD *)v16 = v13;
          *(_QWORD *)(v16 + 8) = *((_QWORD *)v12 + 1);
          ++*((_DWORD *)a1 + 2);
        }
        v12 += 4;
      }
      while (v12 != &v4[4 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v22 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v22)
  {
    v23 = 16 * v22;
    do
    {
      *result = 0x7FFFFFFF;
      result += 4;
      v23 -= 16;
    }
    while (v23);
  }
  return result;
}

uint64_t sub_1C4FA9B60(uint64_t *a1, _DWORD *a2)
{
  int v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  int v8;
  int v9;

  v2 = *((_DWORD *)a1 + 4);
  if (v2)
  {
    v3 = *a1;
    v4 = v2 - 1;
    v5 = (37 * *a2) & (v2 - 1);
    v6 = *(_DWORD *)(*a1 + 16 * ((37 * *a2) & v4));
    if (*a2 == v6)
      return *(_QWORD *)(v3 + 16 * v5 + 8);
    v8 = 1;
    while (v6 != 0x7FFFFFFF)
    {
      v9 = v5 + v8++;
      v5 = v9 & v4;
      v6 = *(_DWORD *)(v3 + 16 * v5);
      if (*a2 == v6)
        return *(_QWORD *)(v3 + 16 * v5 + 8);
    }
  }
  return 0;
}

uint64_t sub_1C4FA9BD4(uint64_t a1, uint64_t a2)
{
  int v2;
  BOOL v3;
  int v4;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  int v9;
  BOOL v10;

  v2 = 91;
  if (a2)
    v3 = *(_BYTE *)(a2 + 16) == 91;
  else
    v3 = 0;
  v4 = v3;
  if (v3)
  {
    if (sub_1C4FA9C5C(a1, *(_QWORD *)(a2 - 64)))
    {
      v6 = *(unsigned int *)(a2 + 72);
      if ((_DWORD)v6)
      {
        v7 = *(int **)(a2 + 64);
        v8 = 4 * v6 - 4;
        do
        {
          v9 = *v7++;
          v2 = (v9 + 1) < 2;
          v10 = (v9 + 1) > 1 || v8 == 0;
          v8 -= 4;
        }
        while (!v10);
      }
      else
      {
        v2 = 1;
      }
    }
    else
    {
      v2 = 0;
    }
  }
  return v4 & v2;
}

uint64_t sub_1C4FA9C5C(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  if (*(_BYTE *)(a2 + 16) != 90)
    return 0;
  v2 = *(_DWORD *)(a2 + 20);
  v3 = (v2 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v2 & 0x7FFFFFF);
  v4 = *(_QWORD *)(v3 + 32);
  if (!v4)
    return 0;
  **(_QWORD **)(a1 + 8) = v4;
  v5 = a1 + 16;
  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(_QWORD *)(a2 - 8);
  else
    v7 = a2 - 32 * (v6 & 0x7FFFFFF);
  return sub_1C4D8AC3C(v5, *(llvm::Constant **)(v7 + 64));
}

uint64_t sub_1C4FA9CBC(_QWORD **a1, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_BYTE *)(a2 + 16) != 85)
    return 0;
  v2 = *(_DWORD *)(a2 + 20);
  v3 = (v2 & 0x40000000) != 0 ? *(uint64_t **)(a2 - 8) : (uint64_t *)(a2 - 32 * (v2 & 0x7FFFFFF));
  v4 = *v3;
  if (!v4)
    return 0;
  **a1 = v4;
  v5 = *(_DWORD *)(a2 + 20);
  v6 = (v5 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v5 & 0x7FFFFFF);
  v7 = *(_QWORD *)(v6 + 32);
  if (!v7)
    return 0;
  *a1[1] = v7;
  v8 = *(_DWORD *)(a2 + 20);
  v9 = (v8 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v8 & 0x7FFFFFF);
  v10 = *(_QWORD *)(v9 + 64);
  if (!v10)
    return 0;
  *a1[2] = v10;
  return 1;
}

uint64_t sub_1C4FA9D50(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v9 = 0;
        v10 = *(_QWORD *)a2;
        v11 = *(_QWORD *)a1;
        do
        {
          sub_1C614CA14(v11 + v9, v10 + v9);
          v9 += 64;
        }
        while (v4 << 6 != v9);
        v5 = *(unsigned int *)(a1 + 8);
        v12 = *(_QWORD *)a1;
        v13 = v11 + v9;
      }
      else
      {
        v12 = *(_QWORD *)a1;
        v13 = *(_QWORD *)a1;
      }
      v14 = v12 + (v5 << 6);
      while (v14 != v13)
      {
        v16 = *(void **)(v14 - 64);
        v14 -= 64;
        v15 = v16;
        if ((void *)(v14 + 16) != v16)
          free(v15);
      }
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      if ((_DWORD)v5)
      {
        v17 = *(_QWORD *)a1;
        v18 = v5 << 6;
        do
        {
          v19 = *(void **)(v17 + v18 - 64);
          if ((void *)(v17 + v18 - 48) != v19)
            free(v19);
          v18 -= 64;
        }
        while (v18);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C61BE948(a1, v4);
    }
    else if ((_DWORD)v5)
    {
      v6 = *(_QWORD *)a2;
      v7 = *(_QWORD *)a1;
      v8 = v5 << 6;
      do
      {
        sub_1C614CA14(v7, v6);
        v6 += 64;
        v7 += 64;
        v8 -= 64;
      }
      while (v8);
LABEL_24:
      v20 = *(unsigned int *)(a2 + 8);
      if (v5 != v20)
      {
        v22 = *(_QWORD *)a2;
        v23 = *(_QWORD *)a1;
        v24 = v5 << 6;
        v25 = v20 << 6;
        do
        {
          v26 = (_QWORD *)(v23 + v24);
          *v26 = v23 + v24 + 16;
          v26[1] = 0xC00000000;
          if (*(_DWORD *)(v22 + v24 + 8))
            sub_1C614CA14((uint64_t)v26, v22 + v24);
          v23 += 64;
          v25 -= 64;
          v22 += 64;
        }
        while (v24 != v25);
      }
LABEL_25:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v5 = 0;
    goto LABEL_24;
  }
  return a1;
}

_QWORD *sub_1C4FA9EF4(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C61BECA4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

BOOL sub_1C4FA9FAC(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unsigned __int8 v9;

  sub_1C4FAA038(a1, a2, (uint64_t)&v8);
  v4 = v9;
  if (v9)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, a1 + 56, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

_QWORD *sub_1C4FAA038@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v7 = a1 + 8;
  v6 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v8 = 4;
    v9 = a1 + 8;
  }
  else
  {
    v8 = *(_DWORD *)(a1 + 16);
    if (!v8)
    {
      v21 = 0;
      goto LABEL_19;
    }
    v9 = *(_QWORD *)(a1 + 8);
  }
  v10 = v8 - 1;
  v11 = ((*a2 >> 4) ^ (*a2 >> 9)) & v10;
  result = (_QWORD *)(v9 + 8 * v11);
  v13 = *result;
  if (*a2 == *result)
  {
LABEL_13:
    if ((v6 & 1) != 0)
    {
      v18 = 4;
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 8);
      v18 = *(unsigned int *)(a1 + 16);
    }
    v19 = 0;
    v20 = v7 + 8 * v18;
    goto LABEL_22;
  }
  v14 = 0;
  v15 = 1;
  while (v13 != -4096)
  {
    if (v14)
      v16 = 0;
    else
      v16 = v13 == -8192;
    if (v16)
      v14 = result;
    v17 = v11 + v15++;
    v11 = v17 & v10;
    result = (_QWORD *)(v9 + 8 * v11);
    v13 = *result;
    if (*a2 == *result)
      goto LABEL_13;
  }
  if (v14)
    v21 = v14;
  else
    v21 = result;
LABEL_19:
  result = sub_1C4FAA200(a1, (uint64_t)a2, a2, v21);
  *result = *a2;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v22 = 4;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    v22 = *(unsigned int *)(a1 + 16);
  }
  v20 = v7 + 8 * v22;
  v19 = 1;
LABEL_22:
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v20;
  *(_BYTE *)(a3 + 16) = v19;
  return result;
}

uint64_t sub_1C4FAA158(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4FAA200(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C4E4C6E4(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 4;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 8 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 8 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C4E4C6E4(a1, v8);
      v20 = 0;
      sub_1C4FAA158(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

uint64_t sub_1C4FAA374(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v4;
  _QWORD *v5;

  v5 = 0;
  result = sub_1C6154170((uint64_t)a1, a2, &v5);
  if ((_DWORD)result)
  {
    *v5 = -8192;
    v4 = a1[1] + 1;
    *a1 -= 2;
    a1[1] = v4;
  }
  return result;
}

uint64_t sub_1C4FAA3C4(unsigned int a1, unsigned int a2, void (*a3)(uint64_t **__return_ptr, char *, uint64_t *, char *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  unsigned int v10;
  char v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;

  v15 = 32;
  v14 = a1;
  v13 = 32;
  v12 = a2;
  v11 = 0;
  a3(&v9, (char *)&v14 + (a4 >> 1), &v12, &v11);
  if (v11)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
  }
  else
  {
    if (v10 > 0x40)
      v7 = *v9;
    else
      v7 = (uint64_t)((_QWORD)v9 << -(char)v10) >> -(char)v10;
    v6 = v7 & 0xFFFFFF00;
    v4 = v7;
    v5 = 0x100000000;
  }
  if (v10 >= 0x41 && v9)
    MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
  if (v13 >= 0x41 && v12)
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  if (v15 >= 0x41 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8000313F17);
  return v5 | v4 | v6;
}

uint64_t sub_1C4FAA4F0(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  const void *v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  const void *v14;
  size_t v15;
  uint64_t result;
  BOOL v17;

  v4 = *((_DWORD *)a1 + 4);
  if (v4)
  {
    v6 = *a1;
    v7 = sub_1C5E3DF4C(*(_QWORD **)a2, *(_QWORD *)a2 + *(_QWORD *)(a2 + 8));
    v8 = 0;
    v9 = v4 - 1;
    v10 = *(const void **)a2;
    for (i = 1; ; ++i)
    {
      v12 = v7 & v9;
      v13 = v6 + 16 * (v7 & v9);
      v14 = *(const void **)v13;
      if (*(_QWORD *)v13 == -1)
      {
        if (v10 == (const void *)-1)
          goto LABEL_11;
      }
      else if (v14 == (const void *)-2)
      {
        if (v10 == (const void *)-2)
          goto LABEL_11;
      }
      else
      {
        v15 = *(_QWORD *)(a2 + 8);
        if (v15 == *(_QWORD *)(v13 + 8) && (!v15 || !memcmp(v10, *(const void **)v13, v15)))
        {
LABEL_11:
          result = 1;
          goto LABEL_12;
        }
      }
      if (v14 == (const void *)-1)
        break;
      if (v8)
        v17 = 0;
      else
        v17 = v14 == (const void *)-2;
      if (v17)
        v8 = v6 + 16 * v12;
      v7 = i + v12;
    }
    result = 0;
    if (v8)
      v13 = v8;
  }
  else
  {
    v13 = 0;
    result = 0;
  }
LABEL_12:
  *a3 = v13;
  return result;
}

uint64_t sub_1C4FAA5F8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  const void *v15;
  int i;
  unsigned int v17;
  const void *v18;
  size_t v19;
  BOOL v20;
  uint64_t v21;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C4FAA790(a1, 2 * v7);
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = *(_QWORD *)a1;
      v12 = sub_1C5E3DF4C(*(_QWORD **)a3, *(_QWORD *)a3 + *(_QWORD *)(a3 + 8));
      v13 = 0;
      v14 = v10 - 1;
      v15 = *(const void **)a3;
      for (i = 1; ; ++i)
      {
        v17 = v12 & v14;
        a4 = v11 + 16 * (v12 & v14);
        v18 = *(const void **)a4;
        if (*(_QWORD *)a4 == -1)
        {
          if (v15 == (const void *)-1)
            goto LABEL_4;
        }
        else if (v18 == (const void *)-2)
        {
          if (v15 == (const void *)-2)
            goto LABEL_4;
        }
        else
        {
          v19 = *(_QWORD *)(a3 + 8);
          if (v19 == *(_QWORD *)(a4 + 8) && (!v19 || !memcmp(v15, *(const void **)a4, v19)))
            goto LABEL_4;
        }
        if (v18 == (const void *)-1)
          break;
        if (v13)
          v20 = 0;
        else
          v20 = v18 == (const void *)-2;
        if (v20)
          v13 = v11 + 16 * v17;
        v12 = i + v17;
      }
      if (v13)
        a4 = v13;
    }
    else
    {
      a4 = 0;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1C4FAA790(a1, v7);
    v21 = 0;
    sub_1C4FAA4F0((uint64_t *)a1, a3, &v21);
    a4 = v21;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *sub_1C4FAA790(unint64_t a1, int a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C4FAA84C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result++ = xmmword_1C85F6FF0;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1C4FAA84C(unint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  const void *v12;
  size_t v13;
  int i;
  unsigned int v15;
  uint64_t v16;
  const void *v17;
  BOOL v18;
  int v19;
  unint64_t *v20;

  v3 = a2;
  v4 = result;
  *(_QWORD *)(result + 8) = 0;
  v5 = *(unsigned int *)(result + 16);
  if ((_DWORD)v5)
  {
    v6 = *(_OWORD **)result;
    v7 = 16 * v5;
    do
    {
      *v6++ = xmmword_1C85F6FF0;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v20 = a3;
    do
    {
      result = *v3;
      if (*v3 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v8 = *(_QWORD *)v4;
        v9 = *(_DWORD *)(v4 + 16);
        result = sub_1C5E3DF4C((_QWORD *)result, result + v3[1]);
        v10 = 0;
        v11 = v9 - 1;
        v12 = (const void *)*v3;
        v13 = v3[1];
        for (i = 1; ; i = v19 + 1)
        {
          v19 = i;
          v15 = result & v11;
          v16 = v8 + 16 * (result & v11);
          v17 = *(const void **)v16;
          if (*(_QWORD *)v16 == -1)
          {
            if (v12 == (const void *)-1)
              goto LABEL_26;
          }
          else if (v17 == (const void *)-2)
          {
            if (v12 == (const void *)-2)
              goto LABEL_26;
          }
          else if (v13 == *(_QWORD *)(v16 + 8))
          {
            if (!v13)
              goto LABEL_26;
            result = memcmp(v12, *(const void **)v16, v13);
            if (!(_DWORD)result)
              goto LABEL_26;
          }
          if (v17 == (const void *)-1)
            break;
          if (v10)
            v18 = 0;
          else
            v18 = v17 == (const void *)-2;
          if (v18)
            v10 = v8 + 16 * v15;
          result = v19 + v15;
        }
        if (v10)
          v16 = v10;
LABEL_26:
        *(_OWORD *)v16 = *(_OWORD *)v3;
        ++*(_DWORD *)(v4 + 8);
        a3 = v20;
      }
      v3 += 2;
    }
    while (v3 != a3);
  }
  return result;
}

uint64_t sub_1C4FAA9A8()
{
  int v1;
  int *v2;
  __int128 v3;
  int v4;

  v4 = 1;
  *(_QWORD *)&v3 = "Maximum factor for an interleaved access group (default = 8)";
  *((_QWORD *)&v3 + 1) = 60;
  v1 = 8;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED7F4890, "max-interleave-group-factor", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED7F4890, &dword_1C475E000);
}

void llvm::VFABI::tryDemangleForVFABI(unsigned __int8 *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  size_t v17;
  int v18;
  unsigned int v19;
  size_t v20;
  unint64_t v21;
  unsigned __int8 *v22;
  int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  int v28;
  size_t v29;
  int v30;
  unsigned __int8 *v31;
  char *v32;
  size_t v33;
  unint64_t v34;
  char *v35;
  size_t v36;
  int v37;
  int v38;
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  uint8x8_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  size_t v48;
  unsigned __int8 *v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t first_not_of;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  size_t v60;
  size_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  __int128 *v77;
  uint64_t v78;
  uint64_t v79;
  size_t __len;
  size_t v81;
  unsigned int v82;
  int v83;
  int v84;
  int v85;
  unsigned __int8 *v86;
  size_t v87;
  unint64_t v88;
  void *v89;
  uint64_t v90;
  _BYTE v91[128];
  __int128 v92;
  unint64_t v93;
  __int128 v94;
  unint64_t v95;
  int v96;
  unint64_t v97;
  void *v98;
  uint64_t v99;
  _BYTE v100[128];
  char *v101;
  uint64_t v102;
  _QWORD v103[18];

  v103[16] = *MEMORY[0x1E0C80C00];
  if (a2 < 4 || *(_DWORD *)a1 != 1447516767 || a2 < 5)
    goto LABEL_84;
  if (a2 - 4 >= 6 && (*((_DWORD *)a1 + 1) == 1447840863 ? (v8 = *((unsigned __int16 *)a1 + 4) == 24397) : (v8 = 0), v8))
  {
    v10 = 6;
    v11 = -10;
    v12 = 10;
  }
  else
  {
    v9 = a1[4];
    switch(a1[4])
    {
      case 'b':
        v10 = 2;
        break;
      case 'c':
        v10 = 3;
        break;
      case 'd':
        v10 = 4;
        break;
      case 'e':
        v10 = 5;
        break;
      default:
        if (v9 == 110)
        {
          v10 = 0;
        }
        else if (v9 == 115)
        {
          v10 = 1;
        }
        else
        {
          v10 = 7;
        }
        break;
    }
    v11 = -5;
    v12 = 5;
  }
  v13 = a2 + v11;
  if (!v13)
    goto LABEL_84;
  v14 = &a1[v12];
  v15 = a1[v12];
  if ((v15 - 77) >= 2)
    goto LABEL_84;
  v16 = v14 + 1;
  v86 = v14 + 1;
  v17 = v13 - 1;
  if (v13 == 1)
    goto LABEL_84;
  v18 = *v16;
  if (v18 == 120)
  {
    v19 = 0;
    v20 = v13 - 2;
    v86 = v14 + 2;
    v87 = v20;
    goto LABEL_44;
  }
  v21 = 0;
  v22 = &v14[v13];
  v20 = v13 - 1;
  while (1)
  {
    v23 = *v16;
    if ((v23 - 48) < 0xA)
    {
      v24 = -48;
      goto LABEL_29;
    }
    if ((v23 - 97) < 0x1A)
    {
      v24 = -87;
      goto LABEL_29;
    }
    if ((v23 - 65) > 0x19)
      break;
    v24 = -55;
LABEL_29:
    v25 = v24 + v23;
    if (v25 > 9)
      break;
    v26 = 10 * v21 + v25;
    if (v21 > v26 / 0xA)
      goto LABEL_84;
    ++v16;
    v21 = v26;
    if (!--v20)
      goto LABEL_38;
  }
  v26 = v21;
  v22 = v16;
LABEL_38:
  if (v17 == v20 || ((v86 = v22, v87 = v20, v26 >= 0x100000000) ? (v19 = 0) : (v19 = v26), HIDWORD(v26) || !v19))
  {
LABEL_84:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 208) = 0;
    return;
  }
LABEL_44:
  v82 = v19;
  v83 = v15;
  v84 = v18;
  v85 = v10;
  v27 = 0;
  v101 = (char *)v103;
  v102 = 0x800000000;
LABEL_45:
  LODWORD(v88) = 0;
  LODWORD(v97) = 0;
  if (v20)
  {
    v28 = *v86;
    if (v28 == 117)
    {
      v29 = v20 - 1;
      ++v86;
      v87 = v20 - 1;
      LODWORD(v88) = 9;
      if (v20 == 1)
        goto LABEL_76;
      goto LABEL_63;
    }
    if (v28 == 118)
    {
      v29 = v20 - 1;
      ++v86;
      v87 = v20 - 1;
      LODWORD(v88) = 0;
      if (v20 == 1)
        goto LABEL_76;
LABEL_63:
      v31 = v86;
      if (*v86 != 97)
      {
LABEL_76:
        v41 = 0;
        goto LABEL_81;
      }
      v32 = (char *)(v86 + 1);
      v33 = v29 - 1;
      ++v86;
      v87 = v29 - 1;
      if (v29 == 1)
        goto LABEL_134;
      v34 = 0;
      v35 = (char *)&v31[v29];
      v36 = v33;
      while (1)
      {
        v37 = *v32;
        if ((v37 - 48) >= 0xA)
        {
          if ((v37 - 97) >= 0x1A)
          {
            if ((v37 - 65) > 0x19)
            {
LABEL_77:
              v40 = v34;
              v35 = v32;
LABEL_78:
              if (v33 == v36)
                goto LABEL_134;
              v86 = (unsigned __int8 *)v35;
              v87 = v36;
              v42 = (uint8x8_t)vcnt_s8((int8x8_t)v40);
              v42.i16[0] = vaddlv_u8(v42);
              if (v42.u32[0] != 1)
                goto LABEL_134;
              v41 = __clz(v40) ^ 0x3F;
LABEL_81:
              v43 = v97;
              v44 = v88;
              v45 = v102;
              if (v102 >= (unint64_t)HIDWORD(v102))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)v103, v102 + 1, 16);
                v45 = v102;
              }
              v46 = &v101[16 * v45];
              *(_QWORD *)v46 = v27 | (unint64_t)(v44 << 32);
              *((_QWORD *)v46 + 1) = v43 | (v41 << 32);
              v27 = v102 + 1;
              LODWORD(v102) = v102 + 1;
              v20 = v87;
              goto LABEL_45;
            }
            v38 = -55;
          }
          else
          {
            v38 = -87;
          }
        }
        else
        {
          v38 = -48;
        }
        v39 = v38 + v37;
        if (v39 > 9)
          goto LABEL_77;
        v40 = 10 * v34 + v39;
        if (v34 > v40 / 0xA)
          goto LABEL_134;
        ++v32;
        v34 = v40;
        if (!--v36)
          goto LABEL_78;
      }
    }
  }
  v30 = sub_1C4FAB508((const void **)&v86, &v88, &v97, "ls", 2uLL);
  if (v30 == 1)
  {
    v30 = sub_1C4FAB508((const void **)&v86, &v88, &v97, "Rs", 2uLL);
    if (v30 == 1)
    {
      v30 = sub_1C4FAB508((const void **)&v86, &v88, &v97, "Ls", 2uLL);
      if (v30 == 1)
        v30 = sub_1C4FAB508((const void **)&v86, &v88, &v97, "Us", 2uLL);
    }
  }
  if (v30 == 1)
  {
    if (!sub_1C4FAB5A8((const void **)&v86, &v88, &v97, "l", 1uLL)
      || !sub_1C4FAB5A8((const void **)&v86, &v88, &v97, "R", 1uLL)
      || !sub_1C4FAB5A8((const void **)&v86, &v88, &v97, "L", 1uLL))
    {
LABEL_60:
      v29 = v87;
      if (!v87)
        goto LABEL_76;
      goto LABEL_63;
    }
    v30 = sub_1C4FAB5A8((const void **)&v86, &v88, &v97, "U", 1uLL);
  }
  if (!v30)
    goto LABEL_60;
  if (v30 == 2)
    goto LABEL_134;
  v47 = v102;
  if (!(_DWORD)v102)
    goto LABEL_134;
  v48 = v87;
  if (!v87)
    goto LABEL_134;
  v49 = v86;
  if (*v86 != 95)
    goto LABEL_134;
  v50 = (char *)(v86 + 1);
  v51 = v87 - 1;
  ++v86;
  --v87;
  if (v48 == 1)
  {
LABEL_94:
    v52 = -1;
  }
  else
  {
    v52 = 0;
    while (v50[v52] != 40)
    {
      if (v51 == ++v52)
        goto LABEL_94;
    }
  }
  v53 = v51 >= v52 ? v52 : v48 - 1;
  if (!v53)
    goto LABEL_134;
  __len = v53;
  first_not_of = llvm::StringRef::find_first_not_of(&v86, v49 + 1, v53, 0);
  v55 = first_not_of >= v51 ? v48 - 1 : first_not_of;
  v56 = &v50[v55];
  v57 = v51 - v55;
  v86 = (unsigned __int8 *)v56;
  v87 = v57;
  v58 = a1;
  v81 = a2;
  if (v51 > first_not_of)
  {
    v58 = a1;
    v81 = a2;
    if (*v56 == 40)
    {
      v59 = (unsigned __int8 *)(v56 + 1);
      v60 = v57 - 1;
      v86 = v59;
      v87 = v57 - 1;
      if (v57 == 1)
        goto LABEL_134;
      v58 = v59;
      if (v49[v48 - 1] != 41)
        goto LABEL_134;
      v61 = v57 - 2;
      if (v60 < v61)
        v61 = v60;
      v87 = v61;
      v81 = v61;
      if (!v61)
        goto LABEL_134;
    }
  }
  if (v85 == 6 && v81 == a2 && !memcmp(v58, a1, a2))
    goto LABEL_134;
  if (v83 == 77)
  {
    v62 = v47 | 0xA00000000;
    if (v47 >= HIDWORD(v102))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)v103, v47 + 1, 16);
      v47 = v102;
    }
    v63 = (uint64_t *)&v101[16 * v47];
    *v63 = v62;
    v63[1] = 0;
    LODWORD(v102) = v102 + 1;
  }
  if (v84 != 120)
    goto LABEL_132;
  v64 = sub_1C4FB7E80(*(uint64_t **)(a3 + 112), v58, v81);
  if (!v64 || *(_BYTE *)(v64 + 16))
    goto LABEL_134;
  v65 = *(_QWORD *)(v64 + 24);
  v66 = *(uint64_t **)(v65 + 16);
  v67 = *v66;
  if (*v66)
    v68 = (*(_DWORD *)(*v66 + 8) & 0xFE) == 18;
  else
    v68 = 0;
  if (v68)
    goto LABEL_131;
  v69 = 8 * *(unsigned int *)(v65 + 12) - 8;
  if (!v69)
  {
    v82 = 1;
    goto LABEL_133;
  }
  v70 = v66 + 1;
  v71 = 8 * (v69 >> 3);
  do
  {
    v67 = *v70;
    if (*v70 && (*(_DWORD *)(*v70 + 8) & 0xFE) == 18)
      break;
    ++v70;
    v82 = 1;
    v71 -= 8;
  }
  while (v71);
LABEL_131:
  v82 = *(_DWORD *)(v67 + 32);
LABEL_132:
  if (!v82)
  {
LABEL_134:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 208) = 0;
    goto LABEL_135;
  }
LABEL_133:
  v73 = sub_1C4FB7E80(*(uint64_t **)(a3 + 112), v58, v81);
  if (!v73 || *(_BYTE *)(v73 + 16))
    goto LABEL_134;
  v97 = v82 | ((unint64_t)(v84 == 120) << 32);
  v98 = v100;
  v99 = 0x800000000;
  if ((_DWORD)v102)
  {
    sub_1C619EBD0((uint64_t)&v98, (uint64_t)&v101);
    v88 = v97;
    v89 = v91;
    v90 = 0x800000000;
    if ((_DWORD)v99)
      sub_1C619EBD0((uint64_t)&v89, (uint64_t)&v98);
  }
  else
  {
    v88 = v82 | ((unint64_t)(v84 == 120) << 32);
    v89 = v91;
    v90 = 0x800000000;
  }
  if (__len > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_161;
  if (__len >= 0x17)
  {
    v75 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v75 = __len | 7;
    v76 = v75 + 1;
    v74 = (__int128 *)operator new(v75 + 1);
    *((_QWORD *)&v92 + 1) = __len;
    v93 = v76 | 0x8000000000000000;
    *(_QWORD *)&v92 = v74;
  }
  else
  {
    HIBYTE(v93) = __len;
    v74 = &v92;
  }
  memmove(v74, v50, __len);
  *((_BYTE *)v74 + __len) = 0;
  if (v81 > 0x7FFFFFFFFFFFFFF7)
LABEL_161:
    abort();
  if (v81 >= 0x17)
  {
    v78 = (v81 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v81 | 7) != 0x17)
      v78 = v81 | 7;
    v79 = v78 + 1;
    v77 = (__int128 *)operator new(v78 + 1);
    *((_QWORD *)&v94 + 1) = v81;
    v95 = v79 | 0x8000000000000000;
    *(_QWORD *)&v94 = v77;
  }
  else
  {
    HIBYTE(v95) = v81;
    v77 = &v94;
  }
  memmove(v77, v58, v81);
  *((_BYTE *)v77 + v81) = 0;
  v96 = v85;
  *(_QWORD *)a4 = v88;
  *(_QWORD *)(a4 + 8) = a4 + 24;
  *(_QWORD *)(a4 + 16) = 0x800000000;
  if ((_DWORD)v90)
  {
    sub_1C619EAB4(a4 + 8, (uint64_t)&v89);
    v85 = v96;
  }
  *(_OWORD *)(a4 + 152) = v92;
  *(_QWORD *)(a4 + 168) = v93;
  v93 = 0;
  v92 = 0uLL;
  *(_OWORD *)(a4 + 176) = v94;
  *(_QWORD *)(a4 + 192) = v95;
  v94 = 0uLL;
  v95 = 0;
  *(_DWORD *)(a4 + 200) = v85;
  *(_BYTE *)(a4 + 208) = 1;
  if (v89 != v91)
    free(v89);
  if (v98 != v100)
    free(v98);
LABEL_135:
  if (v101 != (char *)v103)
    free(v101);
}

uint64_t llvm::VFABI::getVFParamKindFromString(_WORD *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;

  if (a2 == 2)
  {
    switch(*a1)
    {
      case 0x736C:
        v3 = 0x100000005;
        goto LABEL_26;
      case 0x734C:
        v3 = 0x100000006;
        goto LABEL_26;
      case 0x7352:
        v3 = 0x100000007;
        goto LABEL_26;
      case 0x7355:
        v3 = 0x100000008;
        goto LABEL_26;
    }
LABEL_12:
    v3 = 0;
    goto LABEL_26;
  }
  if (a2 != 1)
    goto LABEL_12;
  v2 = *(unsigned __int8 *)a1;
  if (v2 <= 0x54)
  {
    if (v2 == 76)
    {
      v3 = 0x100000003;
    }
    else
    {
      if (v2 != 82)
        goto LABEL_21;
      v3 = 0x100000002;
    }
  }
  else
  {
    switch(v2)
    {
      case 'U':
        v3 = 0x100000004;
        break;
      case 'l':
        v3 = 0x100000001;
        break;
      case 'v':
        v3 = 0x100000000;
        break;
      default:
LABEL_21:
        if (v2 == 117)
          v3 = 0x100000009;
        else
          v3 = 0;
        break;
    }
  }
LABEL_26:
  if ((v3 & 0x300000000) != 0)
    return v3;
  else
    return 11;
}

uint64_t sub_1C4FAB508(const void **a1, _DWORD *a2, _DWORD *a3, _WORD *a4, size_t __n)
{
  uint64_t *v10;
  char v11;
  uint64_t result;
  unint64_t v13;

  if (!sub_1C49CDD20(a1, a4, __n))
    return 1;
  *a2 = llvm::VFABI::getVFParamKindFromString(a4, __n);
  v13 = 0;
  llvm::consumeSignedInteger((llvm *)a1, (llvm::StringRef *)0xA, &v13, v10);
  if ((v11 & 1) != 0 || v13 != (int)v13)
    return 2;
  result = 0;
  *a3 = v13;
  return result;
}

uint64_t sub_1C4FAB5A8(const void **a1, _DWORD *a2, _DWORD *a3, _WORD *a4, size_t __n)
{
  int v10;
  int v11;
  uint64_t *v12;
  char v13;
  int v14;
  uint64_t result;
  unint64_t v16;

  if (!sub_1C49CDD20(a1, a4, __n))
    return 1;
  *a2 = llvm::VFABI::getVFParamKindFromString(a4, __n);
  v10 = 1;
  v11 = sub_1C49CDD20(a1, "n", 1uLL);
  v16 = 0;
  llvm::consumeSignedInteger((llvm *)a1, (llvm::StringRef *)0xA, &v16, v12);
  if ((v13 & 1) != 0 || (v14 = v16, v16 != (int)v16))
  {
    *a3 = 1;
  }
  else
  {
    *a3 = v16;
    v10 = v14;
  }
  result = 0;
  if (v11)
    *a3 = -v10;
  return result;
}

uint64_t sub_1C4FAB674(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  int v7;
  void **v8;
  __int128 v9;
  void **v10;
  __int128 v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = a1 + 16;
  v5 = (__int128 *)(a2 + 16);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)v4);
  v6 = *v5;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)v5 + 2);
  *(_OWORD *)v4 = v6;
  *(_BYTE *)(a2 + 39) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v7 = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = v7;
  v8 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*v8);
  v9 = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_OWORD *)v8 = v9;
  *(_BYTE *)(a2 + 79) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  v10 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*v10);
  v11 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)v10 = v11;
  *(_BYTE *)(a2 + 103) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  sub_1C6184574(a1 + 104, (__n128 *)(a2 + 104));
  sub_1C4FACD18(a1 + 128, a2 + 128);
  return a1;
}

uint64_t llvm::LLLexer::Warning(uint64_t a1, char *a2, llvm::Twine *a3)
{
  return llvm::SourceMgr::PrintMessage(*(llvm **)(a1 + 32), a2, 1, a3, 0, 0, 0, 0, 1u);
}

unint64_t llvm::LLLexer::atoull(llvm::LLLexer *this, const char *a2, const char *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 == a3)
    return 0;
  v10 = v3;
  v11 = v4;
  v5 = 0;
  while (1)
  {
    v6 = *a2 + 10 * v5 - 48;
    if (v6 < v5)
      break;
    ++a2;
    v5 = v6;
    if (a2 == a3)
      return v6;
  }
  v8 = "constant bigger than 64 bits detected!";
  v9 = 259;
  sub_1C4FAB818((uint64_t)this, (llvm::Twine *)&v8);
  return 0;
}

void sub_1C4FAB818(uint64_t a1, llvm::Twine *a2)
{
  uint64_t v3;
  void **v4;
  __int128 v5;
  int v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;
  void *__p[2];
  uint64_t v22;
  char *v23[23];

  v23[22] = *(char **)MEMORY[0x1E0C80C00];
  llvm::SourceMgr::GetMessage(*(uint64_t **)(a1 + 32), *(char **)(a1 + 48), 0, a2, 0, 0, 0, 0, (uint64_t)&v12);
  v3 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)v3 = v12;
  v4 = (void **)(v3 + 16);
  if (*(char *)(v3 + 39) < 0)
    operator delete(*v4);
  v5 = v13;
  *(_QWORD *)(v3 + 32) = v14;
  *(_OWORD *)v4 = v5;
  HIBYTE(v14) = 0;
  LOBYTE(v13) = 0;
  v6 = v16;
  *(_QWORD *)(v3 + 40) = v15;
  *(_DWORD *)(v3 + 48) = v6;
  v7 = (void **)(v3 + 56);
  if (*(char *)(v3 + 79) < 0)
    operator delete(*v7);
  v8 = v17;
  *(_QWORD *)(v3 + 72) = v18;
  *(_OWORD *)v7 = v8;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  v9 = (void **)(v3 + 80);
  if (*(char *)(v3 + 103) < 0)
    operator delete(*v9);
  v10 = *(_OWORD *)v19;
  *(_QWORD *)(v3 + 96) = v20;
  *(_OWORD *)v9 = v10;
  HIBYTE(v20) = 0;
  LOBYTE(v19[0]) = 0;
  v11 = *(void **)(v3 + 104);
  if (v11)
  {
    *(_QWORD *)(v3 + 112) = v11;
    operator delete(v11);
    *(_QWORD *)(v3 + 104) = 0;
    *(_QWORD *)(v3 + 112) = 0;
    *(_QWORD *)(v3 + 120) = 0;
  }
  *(_OWORD *)(v3 + 104) = *(_OWORD *)__p;
  *(_QWORD *)(v3 + 120) = v22;
  __p[0] = 0;
  __p[1] = 0;
  v22 = 0;
  sub_1C4FACD18(v3 + 128, (uint64_t)v23);
  sub_1C4FAD100(v23);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20) < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v18) < 0)
    operator delete((void *)v17);
  if (SHIBYTE(v14) < 0)
    operator delete((void *)v13);
}

uint64_t llvm::LLLexer::LLLexer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  char v11;
  const llvm::APInt *v12;
  int v13;

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v13 = 64;
  v12 = 0;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v9, &v12);
  v7 = v9[1];
  *(_QWORD *)(a1 + 112) = v9[0];
  *(_QWORD *)(a1 + 120) = v7;
  *(_DWORD *)(a1 + 128) = v10;
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a1 + 132) & 0xF0 | v11 & 0xF;
  *(_DWORD *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)a1 = *(_QWORD *)(a1 + 8);
  return a1;
}

{
  uint64_t v7;
  _QWORD v9[2];
  int v10;
  char v11;
  const llvm::APInt *v12;
  int v13;

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a4;
  *(_QWORD *)(a1 + 40) = a6;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v13 = 64;
  v12 = 0;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v9, &v12);
  v7 = v9[1];
  *(_QWORD *)(a1 + 112) = v9[0];
  *(_QWORD *)(a1 + 120) = v7;
  *(_DWORD *)(a1 + 128) = v10;
  *(_BYTE *)(a1 + 132) = *(_BYTE *)(a1 + 132) & 0xF0 | v11 & 0xF;
  *(_DWORD *)(a1 + 144) = 1;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 148) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)a1 = *(_QWORD *)(a1 + 8);
  return a1;
}

uint64_t llvm::LLLexer::getNextChar(llvm::LLLexer *this)
{
  _BYTE *v1;
  uint64_t v2;

  v1 = (_BYTE *)(*(_QWORD *)this)++;
  v2 = *v1;
  if (!*v1)
  {
    if (v1 == (_BYTE *)(*((_QWORD *)this + 1) + *((_QWORD *)this + 2)))
    {
      *(_QWORD *)this = v1;
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t llvm::LLLexer::LexToken(llvm::LLLexer *this)
{
  std::string::value_type *v2;
  std::string::value_type *v3;
  uint64_t v4;
  std::string::value_type *v5;
  int v6;
  uint64_t result;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  std::string::value_type *v17;

  v2 = *(std::string::value_type **)this;
  while (1)
  {
    v3 = v2;
    *((_QWORD *)this + 6) = v2++;
    *(_QWORD *)this = v2;
    v4 = *v3;
    if (*v3 > 0x7Au)
      break;
    switch(*v3)
    {
      case 9:
      case 10:
      case 13:
      case 32:
        continue;
      case 11:
      case 12:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
      case 24:
      case 25:
      case 26:
      case 27:
      case 28:
      case 29:
      case 30:
      case 31:
      case 38:
      case 39:
      case 47:
      case 63:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 92:
        goto LABEL_21;
      case 33:
        return llvm::LLLexer::LexExclaim(this);
      case 34:
        return llvm::LLLexer::LexQuote(this);
      case 35:
        v16 = 435;
        return llvm::LLLexer::LexUIntID((unsigned __int8 **)this, v16);
      case 36:
        return llvm::LLLexer::LexDollar(this);
      case 37:
        v10 = 440;
        v11 = 434;
        return llvm::LLLexer::LexVar(this, v10, v11);
      case 40:
        return 12;
      case 41:
        return 13;
      case 42:
        return 5;
      case 43:
        return llvm::LLLexer::LexPositive(this);
      case 44:
        return 4;
      case 45:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
        return llvm::LLLexer::LexDigitOrNegative(this);
      case 46:
        v12 = *v2;
        if (v12 == 58)
          goto LABEL_47;
        v13 = MEMORY[0x1E0C80978];
        while (1)
        {
          v14 = (v12 & 0x80) != 0 ? __maskrune(v12, 0x500uLL) : *(_DWORD *)(v13 + 4 * v12 + 60) & 0x500;
          if (!v14 && (v12 - 36 > 0x3B || ((1 << (v12 - 36)) & 0x800000000000601) == 0))
            break;
          v15 = *++v2;
          v12 = v15;
          if (v15 == 58)
          {
            v3 = (std::string::value_type *)*((_QWORD *)this + 6);
LABEL_47:
            *(_QWORD *)this = v2 + 1;
            sub_1C4FAD170((std::string *)((char *)this + 64), v3, v2, v2 - v3);
            return 437;
          }
        }
        v17 = *(std::string::value_type **)this;
        if (**(_BYTE **)this == 46 && v17[1] == 46)
        {
          *(_QWORD *)this = v17 + 2;
          return 2;
        }
        return 1;
      case 58:
        return 16;
      case 59:
        break;
      case 60:
        return 10;
      case 61:
        return 3;
      case 62:
        return 11;
      case 64:
        v10 = 438;
        v11 = 433;
        return llvm::LLLexer::LexVar(this, v10, v11);
      case 91:
        return 6;
      case 93:
        return 7;
      case 94:
        v16 = 436;
        return llvm::LLLexer::LexUIntID((unsigned __int8 **)this, v16);
      default:
        if (*v3)
          goto LABEL_21;
        if (v3 != (std::string::value_type *)(*((_QWORD *)this + 1) + *((_QWORD *)this + 2)))
          continue;
        result = 0;
        *(_QWORD *)this = v3;
        return result;
    }
    while (1)
    {
      v5 = v2;
      v6 = *v2;
      if (v6 == 10 || v6 == 13)
        break;
      ++v2;
      *(_QWORD *)this = v5 + 1;
      if (!*v5 && v5 == (std::string::value_type *)(*((_QWORD *)this + 1) + *((_QWORD *)this + 2)))
      {
        *(_QWORD *)this = v5;
        break;
      }
    }
    v2 = v5;
  }
  switch((_DWORD)v4)
  {
    case '{':
      return 8;
    case '|':
      return 15;
    case '}':
      return 9;
  }
LABEL_21:
  if ((v4 & 0x80) != 0)
    v9 = __maskrune(*v3, 0x100uLL);
  else
    v9 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x100;
  if ((_DWORD)v4 == 95 || v9)
    return llvm::LLLexer::LexIdentifier(this);
  else
    return 1;
}

uint64_t llvm::LLLexer::LexAt(llvm::LLLexer *this)
{
  return llvm::LLLexer::LexVar(this, 438, 433);
}

uint64_t llvm::LLLexer::LexDollar(llvm::LLLexer *this)
{
  std::string::value_type *v2;
  unsigned int v3;
  std::string::value_type *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v8;
  std::string::value_type *v9;
  uint64_t v10;
  _QWORD *v11;
  char v12;
  int v13;
  size_t v14;
  size_t v15;
  _BYTE *v16;
  const char *v18;
  const char *v19;
  __int16 v20;

  v2 = (std::string::value_type *)*((_QWORD *)this + 6);
  v3 = *v2;
  if (v3 == 58)
  {
    v4 = (std::string::value_type *)*((_QWORD *)this + 6);
LABEL_12:
    *(_QWORD *)this = v2 + 1;
    sub_1C4FAD170((std::string *)((char *)this + 64), v4, v2, v2 - v4);
    return 437;
  }
  v5 = MEMORY[0x1E0C80978];
  while ((v3 & 0x80) == 0)
  {
    if ((*(_DWORD *)(v5 + 4 * v3 + 60) & 0x500) == 0)
      goto LABEL_8;
LABEL_10:
    v6 = *++v2;
    v3 = v6;
    if (v6 == 58)
    {
      v4 = (std::string::value_type *)*((_QWORD *)this + 6);
      goto LABEL_12;
    }
  }
  if (__maskrune(v3, 0x500uLL))
    goto LABEL_10;
LABEL_8:
  if (v3 - 36 <= 0x3B && ((1 << (v3 - 36)) & 0x800000000000601) != 0)
    goto LABEL_10;
  v8 = *(_QWORD *)this;
  if (**(_BYTE **)this != 34)
  {
    if (llvm::LLLexer::ReadVarName(this))
      return 439;
    else
      return 1;
  }
  v9 = (std::string::value_type *)(v8 + 1);
  v10 = 1 - v8;
  while (2)
  {
    *(_QWORD *)this = v9 + 1;
    if (!*v9)
    {
      if (v9 == (std::string::value_type *)(*((_QWORD *)this + 1) + *((_QWORD *)this + 2)))
      {
        *(_QWORD *)this = v9;
        v18 = "end of file in COMDAT variable name";
        goto LABEL_34;
      }
      goto LABEL_20;
    }
    if (*v9 != 34)
    {
LABEL_20:
      --v10;
      ++v9;
      continue;
    }
    break;
  }
  v11 = (_QWORD *)((char *)this + 64);
  sub_1C4FAD170((std::string *)((char *)this + 64), (std::string::value_type *)(*((_QWORD *)this + 6) + 2), v9, -v10 - *((_QWORD *)this + 6));
  sub_1C4FAC798((std::string *)((char *)this + 64));
  v12 = *((_BYTE *)this + 87);
  v13 = v12;
  v14 = v12 & 0x7F;
  if (v13 >= 0)
    v15 = v14;
  else
    v15 = *((_QWORD *)this + 9);
  if (!v15)
    return 439;
  if (v13 < 0)
    v11 = (_QWORD *)*v11;
  v16 = memchr(v11, 0, v15);
  if (!v16 || v16 - (_BYTE *)v11 == -1)
    return 439;
  v18 = "Null bytes are not allowed in names";
LABEL_34:
  v19 = v18;
  v20 = 259;
  sub_1C4FAB818((uint64_t)this, (llvm::Twine *)&v19);
  return 1;
}

uint64_t llvm::LLLexer::LexPercent(llvm::LLLexer *this)
{
  return llvm::LLLexer::LexVar(this, 440, 434);
}

uint64_t llvm::LLLexer::LexQuote(llvm::LLLexer *this)
{
  uint64_t result;
  char v3;
  int v4;
  size_t v5;
  size_t v6;
  llvm::LLLexer *v7;
  _BYTE *v8;
  const char *v10;
  __int16 v11;

  result = llvm::LLLexer::ReadString((uint64_t)this, 442);
  if (result >= 2 && **(_BYTE **)this == 58)
  {
    ++*(_QWORD *)this;
    v3 = *((_BYTE *)this + 87);
    v4 = v3;
    v5 = v3 & 0x7F;
    if (v4 >= 0)
      v6 = v5;
    else
      v6 = *((_QWORD *)this + 9);
    if (!v6)
      return 437;
    v7 = v4 >= 0 ? (llvm::LLLexer *)((char *)this + 64) : (llvm::LLLexer *)*((_QWORD *)this + 8);
    v8 = memchr(v7, 0, v6);
    if (!v8 || v8 - (_BYTE *)v7 == -1)
    {
      return 437;
    }
    else
    {
      v10 = "Null bytes are not allowed in names";
      v11 = 259;
      sub_1C4FAB818((uint64_t)this, (llvm::Twine *)&v10);
      return 1;
    }
  }
  return result;
}

unsigned __int8 **llvm::LLLexer::SkipLineComment(unsigned __int8 **this)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  int v3;

  v1 = *this;
  while (1)
  {
    v2 = v1;
    v3 = *v1;
    if (v3 == 10 || v3 == 13)
      break;
    v1 = v2 + 1;
    *this = v2 + 1;
    if (!*v2 && v2 == &this[2][(_QWORD)this[1]])
    {
      *this = v2;
      return this;
    }
  }
  return this;
}

uint64_t llvm::LLLexer::LexCaret(unsigned __int8 **this)
{
  return llvm::LLLexer::LexUIntID(this, 436);
}

uint64_t llvm::LLLexer::LexHash(unsigned __int8 **this)
{
  return llvm::LLLexer::LexUIntID(this, 435);
}

uint64_t llvm::LLLexer::LexDigitOrNegative(llvm::LLLexer *this)
{
  std::string::value_type *v2;
  uint64_t v3;
  uint64_t v4;
  std::string::value_type *v5;
  unsigned int v6;
  int v7;
  unsigned int v8;
  std::string::value_type *v9;
  std::string *v10;
  unsigned __int8 *v11;
  unsigned int v12;
  int v13;
  unint64_t v15;
  unint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v2 = (std::string::value_type *)*((_QWORD *)this + 6);
  v3 = *v2;
  v4 = MEMORY[0x1E0C80978];
  v5 = *(std::string::value_type **)this;
  v6 = **(unsigned __int8 **)this;
  v7 = *(_DWORD *)(MEMORY[0x1E0C80978] + 60 + 4 * **(unsigned __int8 **)this);
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 60 + 4 * v3) & 0x400) == 0)
  {
    if ((v7 & 0x400) == 0)
    {
      if (v6 != 58)
      {
        while (1)
        {
          if ((v6 & 0x80) != 0)
          {
            if (__maskrune(v6, 0x500uLL))
              goto LABEL_10;
          }
          else if ((*(_DWORD *)(v4 + 4 * v6 + 60) & 0x500) != 0)
          {
            goto LABEL_10;
          }
          if (v6 - 36 > 0x3B || ((1 << (v6 - 36)) & 0x800000000000601) == 0)
            return 1;
LABEL_10:
          v8 = *++v5;
          v6 = v8;
          if (v8 == 58)
          {
            v2 = (std::string::value_type *)*((_QWORD *)this + 6);
            break;
          }
        }
      }
      v9 = v5 + 1;
      v10 = (std::string *)((char *)this + 64);
LABEL_44:
      sub_1C4FAD170(v10, v2, v5, v5 - v2);
      *(_QWORD *)this = v9;
      return 437;
    }
    goto LABEL_14;
  }
  if ((v7 & 0x400) != 0)
  {
LABEL_14:
    v11 = (unsigned __int8 *)(v5 + 1);
    do
    {
      *(_QWORD *)this = v11;
      v12 = *v11++;
      v6 = v12;
      v7 = *(_DWORD *)(v4 + 4 * v12 + 60);
    }
    while ((v7 & 0x400) != 0);
    LODWORD(v3) = *v2;
    v5 = (std::string::value_type *)(v11 - 1);
  }
  if ((v3 & 0x80) == 0)
  {
    v13 = *(_DWORD *)(v4 + 4 * v3 + 60) & 0x400;
    if (v6 == 58 && v13 != 0)
    {
      if (v2 == v5)
      {
        LODWORD(v15) = 0;
        v20 = (uint64_t)(v2 + 1);
      }
      else
      {
        v15 = 0;
        while (1)
        {
          v16 = v15;
          v15 = *v2 + 10 * v15 - 48;
          if (v15 < v16)
            break;
          if (++v2 == v5)
          {
            *(_QWORD *)this = v5 + 1;
            if (HIDWORD(v15))
            {
              v30 = "invalid value number (too large)!";
              v33 = 259;
              sub_1C4FAB818((uint64_t)this, (llvm::Twine *)&v30);
            }
            goto LABEL_48;
          }
        }
        v30 = "constant bigger than 64 bits detected!";
        v33 = 259;
        sub_1C4FAB818((uint64_t)this, (llvm::Twine *)&v30);
        LODWORD(v15) = 0;
        v20 = *(_QWORD *)this + 1;
      }
      *(_QWORD *)this = v20;
LABEL_48:
      *((_DWORD *)this + 22) = v15;
      return 432;
    }
  }
  if ((v6 & 0x80) != 0)
  {
    if (__maskrune(v6, 0x500uLL))
      goto LABEL_35;
  }
  else if ((v7 & 0x500) != 0)
  {
    goto LABEL_35;
  }
  if (v6 - 36 <= 0x3B && ((1 << (v6 - 36)) & 0x800000000000601) != 0
    || (v21 = *(_QWORD *)this, v22 = **(unsigned __int8 **)this, v22 == 58))
  {
LABEL_35:
    v5 = *(std::string::value_type **)this;
    v17 = **(unsigned __int8 **)this;
    if (v17 == 58)
    {
LABEL_43:
      v9 = v5 + 1;
      v10 = (std::string *)((char *)this + 64);
      v2 = (std::string::value_type *)*((_QWORD *)this + 6);
      goto LABEL_44;
    }
    while (1)
    {
      if ((v17 & 0x80) != 0)
      {
        if (__maskrune(v17, 0x500uLL))
          goto LABEL_42;
      }
      else if ((*(_DWORD *)(v4 + 4 * v17 + 60) & 0x500) != 0)
      {
        goto LABEL_42;
      }
      if (v17 - 36 > 0x3B || ((1 << (v17 - 36)) & 0x800000000000601) == 0)
      {
        v21 = *(_QWORD *)this;
        v22 = **(unsigned __int8 **)this;
        break;
      }
LABEL_42:
      v18 = *++v5;
      v17 = v18;
      if (v18 == 58)
        goto LABEL_43;
    }
  }
  if (v22 == 46)
  {
    v23 = (unsigned __int8 *)(v21 + 2);
    do
    {
      *(_QWORD *)this = v23 - 1;
      v24 = *(v23++ - 1);
    }
    while ((*(_DWORD *)(v4 + 4 * v24 + 60) & 0x400) != 0);
    v25 = v23 - 2;
    if ((v24 | 0x20) == 0x65)
    {
      v26 = *(v23 - 1);
      if ((*(_DWORD *)(v4 + 4 * v26 + 60) & 0x400) != 0
        || ((_DWORD)v26 == 43 || (_DWORD)v26 == 45) && (*(_DWORD *)(v4 + 4 * *v23 + 60) & 0x400) != 0)
      {
        do
        {
          *(_QWORD *)this = v23;
          v27 = *v23++;
        }
        while ((*(_DWORD *)(v4 + 4 * v27 + 60) & 0x400) != 0);
        v25 = v23 - 1;
      }
    }
    llvm::APFloat::APFloat((uint64_t)&v30, &unk_1C866F198, *((unsigned __int8 **)this + 6), (unint64_t)&v25[-*((_QWORD *)this + 6)]);
    sub_1C48552C0((uint64_t)this + 112, (uint64_t)&v31);
    if ((_UNKNOWN *)v31 == &unk_1C866F1C0)
    {
      sub_1C4773C74(&v32);
    }
    else if ((*(_DWORD *)(v31 + 8) - 64) <= 0xFFFFFF7F && v32)
    {
      MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
    }
    return 456;
  }
  else
  {
    v28 = (char *)*((_QWORD *)this + 6);
    if (*v28 == 48 && v28[1] == 120)
    {
      return llvm::LLLexer::Lex0x(this);
    }
    else
    {
      llvm::APSInt::APSInt((uint64_t *)&v30, v28, v21 - (_QWORD)v28);
      if (*((_DWORD *)this + 36) >= 0x41u)
      {
        v29 = *((_QWORD *)this + 17);
        if (v29)
          MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
      }
      *((_QWORD *)this + 17) = v30;
      *((_DWORD *)this + 36) = v31;
      *((_BYTE *)this + 148) = BYTE4(v31);
      return 457;
    }
  }
}

uint64_t llvm::LLLexer::LexVar(llvm::LLLexer *this, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::string::value_type *v6;
  uint64_t i;
  _QWORD *v8;
  char v9;
  int v10;
  size_t v11;
  size_t v12;
  _BYTE *v13;
  const char *v15;
  const char *v18;
  __int16 v19;

  v5 = *(_QWORD *)this;
  if (**(_BYTE **)this == 34)
  {
    v6 = (std::string::value_type *)(v5 + 1);
    for (i = 1 - v5; ; --i)
    {
      *(_QWORD *)this = v6 + 1;
      if (*v6)
      {
        if (*v6 == 34)
        {
          v8 = (_QWORD *)((char *)this + 64);
          sub_1C4FAD170((std::string *)((char *)this + 64), (std::string::value_type *)(*((_QWORD *)this + 6) + 2), v6, -i - *((_QWORD *)this + 6));
          sub_1C4FAC798((std::string *)((char *)this + 64));
          v9 = *((_BYTE *)this + 87);
          v10 = v9;
          v11 = v9 & 0x7F;
          if (v10 >= 0)
            v12 = v11;
          else
            v12 = *((_QWORD *)this + 9);
          if (v12)
          {
            if (v10 < 0)
              v8 = (_QWORD *)*v8;
            v13 = memchr(v8, 0, v12);
            if (v13 && v13 - (_BYTE *)v8 != -1)
            {
              v15 = "Null bytes are not allowed in names";
LABEL_20:
              v18 = v15;
              v19 = 259;
              sub_1C4FAB818((uint64_t)this, (llvm::Twine *)&v18);
              return 1;
            }
          }
          return a2;
        }
      }
      else if (v6 == (std::string::value_type *)(*((_QWORD *)this + 1) + *((_QWORD *)this + 2)))
      {
        *(_QWORD *)this = v6;
        v15 = "end of file in global variable name";
        goto LABEL_20;
      }
      ++v6;
    }
  }
  if ((llvm::LLLexer::ReadVarName(this) & 1) != 0)
    return a2;
  return llvm::LLLexer::LexUIntID((unsigned __int8 **)this, a3);
}

void sub_1C4FAC798(std::string *a1)
{
  unsigned __int8 v1;
  int v2;
  std::string::size_type size;
  std::string::size_type v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v1 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v2 = (char)v1;
  size = v1 & 0x7F;
  if (v2 < 0)
    size = a1->__r_.__value_.__l.__size_;
  if (size)
  {
    v4 = 0;
    if (v2 >= 0)
      v5 = (unsigned __int8 *)a1;
    else
      v5 = (unsigned __int8 *)a1->__r_.__value_.__r.__words[0];
    v6 = &v5[size];
    v7 = MEMORY[0x1E0C80978];
    v8 = v5;
    do
    {
      v9 = *v8;
      if (v9 == 92)
      {
        if (v8 < v6 - 1 && v8[1] == 92)
        {
          v5[v4] = 92;
          v8 += 2;
        }
        else if (v8 < v6 - 2
               && (v10 = v8[1], (*(_DWORD *)(v7 + 4 * v10 + 60) & 0x10000) != 0)
               && (v11 = v8[2], (*(_DWORD *)(v7 + 4 * v11 + 60) & 0x10000) != 0))
        {
          v5[v4] = word_1C85F7092[v11] + 16 * word_1C85F7092[v10];
          v8 += 3;
        }
        else
        {
          ++v8;
          v5[v4] = 92;
        }
      }
      else
      {
        ++v8;
        v5[v4] = v9;
      }
      ++v4;
    }
    while (v8 != v6);
    std::string::resize(a1, v4, 0);
  }
}

uint64_t llvm::LLLexer::Lex0x(llvm::LLLexer *this)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  const llvm::APInt *v12;
  uint64_t v13;
  const llvm::APInt *v14;
  const llvm::APInt *v15;
  int v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 6);
  v3 = v2 + 2;
  *(_QWORD *)this = v2 + 2;
  v4 = *(unsigned __int8 *)(v2 + 2);
  if (v4 - 75 < 3 || v4 == 82 || v4 == 72)
  {
    *(_QWORD *)this = v2 + 3;
    v5 = *(char *)(v2 + 2);
    v4 = *(unsigned __int8 *)(v2 + 3);
    v6 = 3;
  }
  else
  {
    v5 = 74;
    v6 = 2;
  }
  v7 = MEMORY[0x1E0C80978];
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v4 + 60) & 0x10000) != 0)
  {
    do
    {
      v9 = v6++;
      v10 = (unsigned __int8 *)(v2 + v9 + 1);
      *(_QWORD *)this = v10;
    }
    while ((*(_DWORD *)(v7 + 4 * *v10 + 60) & 0x10000) != 0);
    if (v5 != 74)
      __asm { BR              X13 }
    if (v6 != 2)
    {
      v11 = 0;
      v12 = 0;
      v13 = v9 - 1;
      while (1)
      {
        v14 = (const llvm::APInt *)(16 * (_QWORD)v12 + word_1C85F7092[*(unsigned __int8 *)(v3 + v11)]);
        if (v14 < v12)
          break;
        ++v11;
        v12 = v14;
        if (v13 == v11)
          goto LABEL_18;
      }
      v17 = "constant bigger than 64 bits detected!";
      v20 = 259;
      sub_1C4FAB818((uint64_t)this, (llvm::Twine *)&v17);
    }
    v14 = 0;
LABEL_18:
    v16 = 64;
    v15 = v14;
    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v18, &v15);
    sub_1C48552C0((uint64_t)this + 112, (uint64_t)&v18);
    if ((_UNKNOWN *)v18 == &unk_1C866F1C0)
    {
      sub_1C4773C74(&v19);
    }
    else if ((*(_DWORD *)(v18 + 8) - 64) <= 0xFFFFFF7F)
    {
      if (v19)
        MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
    }
    return 456;
  }
  else
  {
    *(_QWORD *)this = v2 + 1;
    return 1;
  }
}

uint64_t sub_1C4FACD18(uint64_t a1, uint64_t a2)
{
  char *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *i;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  if (a1 != a2)
  {
    v4 = *(char **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      sub_1C4FACF00((char **)a1, (char **)a2);
      return a1;
    }
    v5 = *(unsigned int *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= v5)
    {
      v7 = *(char **)a1;
      if ((_DWORD)v5)
      {
        sub_1C4FACF88((uint64_t)v4, (uint64_t)&v4[40 * v5], (uint64_t)v7);
        v9 = v8;
        v7 = *(char **)a1;
        LODWORD(v6) = *(_DWORD *)(a1 + 8);
      }
      else
      {
        v9 = *(char **)a1;
      }
      for (i = &v7[40 * v6]; i != v9; i -= 40)
      {
        if (*(i - 1) < 0)
          operator delete(*((void **)i - 3));
      }
      *(_DWORD *)(a1 + 8) = v5;
      v11 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v11)
      {
        v12 = *(char **)a2;
        v13 = 40 * v11;
        do
        {
          if (v12[v13 - 1] < 0)
            operator delete(*(void **)&v12[v13 - 24]);
          v13 -= 40;
        }
        while (v13);
      }
      goto LABEL_38;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      if ((_DWORD)v6)
      {
        v14 = *(char **)a1;
        v15 = 40 * v6;
        do
        {
          if (v14[v15 - 1] < 0)
            operator delete(*(void **)&v14[v15 - 24]);
          v15 -= 40;
        }
        while (v15);
      }
      *(_DWORD *)(a1 + 8) = 0;
      sub_1C61C5314(a1, v5);
    }
    else if ((_DWORD)v6)
    {
      sub_1C4FACF88((uint64_t)v4, (uint64_t)&v4[40 * v6], *(_QWORD *)a1);
LABEL_29:
      v16 = *(char **)a2;
      v17 = *(unsigned int *)(a2 + 8);
      if (v6 != v17)
      {
        v18 = &v16[40 * v17];
        v19 = *(_QWORD *)a1 + 40 * v6;
        v20 = &v16[40 * v6];
        do
        {
          *(_OWORD *)v19 = *(_OWORD *)v20;
          v21 = *((_OWORD *)v20 + 1);
          *(_QWORD *)(v19 + 32) = *((_QWORD *)v20 + 4);
          *(_OWORD *)(v19 + 16) = v21;
          *((_QWORD *)v20 + 3) = 0;
          *((_QWORD *)v20 + 4) = 0;
          *((_QWORD *)v20 + 2) = 0;
          v20 += 40;
          v19 += 40;
        }
        while (v20 != v18);
        v16 = *(char **)a2;
      }
      *(_DWORD *)(a1 + 8) = v5;
      v22 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v22)
      {
        v23 = 40 * v22;
        do
        {
          if (v16[v23 - 1] < 0)
            operator delete(*(void **)&v16[v23 - 24]);
          v23 -= 40;
        }
        while (v23);
      }
LABEL_38:
      *(_DWORD *)(a2 + 8) = 0;
      return a1;
    }
    v6 = 0;
    goto LABEL_29;
  }
  return a1;
}

double sub_1C4FACF00(char **a1, char **a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  v4 = *a1;
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = 40 * v5;
    do
    {
      if (v4[v6 - 1] < 0)
        operator delete(*(void **)&v4[v6 - 24]);
      v6 -= 40;
    }
    while (v6);
    v4 = *a1;
  }
  if (v4 != (char *)(a1 + 2))
    free(v4);
  *a1 = *a2;
  result = *((double *)a2 + 1);
  *((double *)a1 + 1) = result;
  *a2 = (char *)(a2 + 2);
  a2[1] = 0;
  return result;
}

uint64_t sub_1C4FACF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void **v6;
  __int128 v7;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      *(_OWORD *)a3 = *(_OWORD *)v4;
      v6 = (void **)(a3 + 16);
      if (*(char *)(a3 + 39) < 0)
        operator delete(*v6);
      v7 = *(_OWORD *)(v4 + 16);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(v4 + 32);
      *(_OWORD *)v6 = v7;
      *(_BYTE *)(v4 + 39) = 0;
      *(_BYTE *)(v4 + 16) = 0;
      a3 += 40;
      v4 += 40;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

void sub_1C4FAD00C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 40 * v2;
    do
    {
      *(_OWORD *)a2 = *(_OWORD *)v3;
      v5 = *(_OWORD *)(v3 + 16);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v3 + 32);
      *(_OWORD *)(a2 + 16) = v5;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 32) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      v3 += 40;
      a2 += 40;
    }
    while (v3 != v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = *a1;
      v8 = 40 * v6;
      do
      {
        if (*(char *)(v7 + v8 - 1) < 0)
          operator delete(*(void **)(v7 + v8 - 24));
        v8 -= 40;
      }
      while (v8);
    }
  }
}

uint64_t sub_1C4FAD098(uint64_t a1)
{
  void *v2;

  sub_1C4FAD100((char **)(a1 + 128));
  v2 = *(void **)(a1 + 104);
  if (v2)
  {
    *(_QWORD *)(a1 + 112) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

char **sub_1C4FAD100(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 40 * v3;
    do
    {
      if (v2[v4 - 1] < 0)
        operator delete(*(void **)&v2[v4 - 24]);
      v4 -= 40;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C4FAD170(std::string *this, std::string::value_type *a2, std::string::value_type *a3, std::string::size_type a4)
{
  std::string *v8;
  std::string::size_type size;
  std::string::size_type v10;
  unint64_t v11;
  unint64_t v12;
  std::string::value_type v13;

  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v8 = this;
    if (a4 <= 0x16)
      goto LABEL_11;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v10 = 22;
    goto LABEL_6;
  }
  v11 = this->__r_.__value_.__r.__words[2];
  v10 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  if (v10 < a4)
  {
    size = this->__r_.__value_.__l.__size_;
LABEL_6:
    std::string::__grow_by(this, v10, a4 - v10, size, 0, size, 0);
    this->__r_.__value_.__l.__size_ = 0;
    LOBYTE(v12) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    goto LABEL_8;
  }
  v12 = HIBYTE(v11);
LABEL_8:
  v8 = this;
  if ((v12 & 0x80) != 0)
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_11:
  while (a2 != a3)
  {
    v13 = *a2++;
    v8->__r_.__value_.__s.__data_[0] = v13;
    v8 = (std::string *)((char *)v8 + 1);
  }
  v8->__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    this->__r_.__value_.__l.__size_ = a4;
  else
    *((_BYTE *)&this->__r_.__value_.__s + 23) = a4 & 0x7F;
}

uint64_t llvm::LLParser::Run(uint64_t a1, char *a2, void (*a3)(void **__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;
  unsigned int v15;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  unint64_t v28;
  void *__p[2];
  char v30;
  char v31;
  __int16 v32;

  if ((llvm::LLVMContextImpl::hasOpaquePointersValue(**(llvm::LLVMContextImpl ***)a1) & 1) == 0)
  {
    while (1)
    {
      v15 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 8));
      *(_DWORD *)(a1 + 64) = v15;
      if (v15 <= 5 && ((1 << v15) & 0x23) != 0)
        break;
      v17 = *(_QWORD *)(a1 + 104);
      if (v17)
      {
        if (*(_BYTE *)(v17 + 8) == 15)
          break;
      }
    }
  }
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  if (*(_BYTE *)(**(_QWORD **)a1 + 2664))
  {
    v18 = *(char **)(a1 + 216);
    __p[0] = "Can't read textual IR with a Context that discards named Values";
    v32 = 259;
    return llvm::LLLexer::Error(a1 + 168, v18, (llvm::Twine *)__p);
  }
  if (!*(_QWORD *)(a1 + 328))
    goto LABEL_4;
  if ((llvm::LLParser::parseTargetDefinitions((llvm::LLParser *)a1) & 1) == 0)
  {
    v19 = *(_QWORD *)(a1 + 328);
    v22 = *(_QWORD *)(v19 + 216);
    v20 = v19 + 216;
    v21 = v22;
    v23 = *(_BYTE *)(v20 + 23);
    if (v23 >= 0)
      v24 = v20;
    else
      v24 = v21;
    v25 = *(_QWORD *)(v20 + 8);
    if (v23 >= 0)
      v26 = v23 & 0x7F;
    else
      v26 = v25;
    a3(__p, a4, v24, v26);
    if (v31)
    {
      if (v30 >= 0)
        v27 = __p;
      else
        v27 = (void **)__p[0];
      if (v30 >= 0)
        v28 = v30 & 0x7F;
      else
        v28 = (unint64_t)__p[1];
      llvm::DataLayout::reset(*(_QWORD *)(a1 + 328) + 272, v27, v28);
      if (v31 && v30 < 0)
        operator delete(__p[0]);
    }
LABEL_4:
    if ((llvm::LLParser::parseTopLevelEntities((llvm::LLParser *)a1) & 1) == 0
      && (llvm::LLParser::validateEndOfModule((llvm::LLParser *)a1, a2, v8, v9, v10, v11, v12, v13) & 1) == 0)
    {
      return llvm::LLParser::validateEndOfIndex((llvm::LLParser *)a1);
    }
  }
  return 1;
}

uint64_t llvm::LLParser::validateEndOfModule(llvm::LLParser *this, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::string *a7, uint64_t a8)
{
  char *v9;
  char **v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  char *v14;
  unsigned int v15;
  char **v16;
  unsigned int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  BOOL v25;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  std::string::size_type v38;
  uint64_t v39;
  char *v40;
  char *v41;
  std::string::size_type v42;
  uint64_t v43;
  char *v44;
  char *v45;
  std::string::size_type v46;
  uint64_t v47;
  char *v48;
  char *v49;
  std::string::size_type v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t Attribute;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t **i;
  uint64_t v75;
  uint64_t *v76;
  uint64_t *v77;
  BOOL v78;
  llvm::LLParser *v79;
  uint64_t v80;
  llvm::LLParser *v81;
  llvm::LLParser *v82;
  uint64_t v83;
  void ***v84;
  void ***v85;
  llvm::Value *v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  llvm::Value **v92;
  llvm::Value *v93;
  llvm::Value **v94;
  int v95;
  BOOL v96;
  unsigned int v97;
  uint64_t v98;
  llvm **v99;
  uint64_t v100;
  llvm *v101;
  llvm *v102;
  llvm::Value **v103;
  void **v104;
  llvm *v105;
  _QWORD *v106;
  _QWORD *v107;
  char v108;
  _QWORD *v109;
  uint64_t ***v110;
  _QWORD *v111;
  _QWORD *v112;
  llvm::Intrinsic *v113;
  llvm::Value *v114;
  llvm::Module *v115;
  uint64_t v116;
  uint64_t v117;
  __int16 v119;
  char *v120;
  std::string *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *j;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  BOOL v135;
  char *v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t **v141;
  uint64_t **v142;
  unsigned int v143;
  _DWORD *v144;
  uint64_t v145;
  uint64_t *v146;
  char *v147;
  char *v148;
  char v149;
  char *v150;
  size_t v151;
  size_t v152;
  std::string v153;
  void *__p[2];
  uint64_t v155;
  uint64_t v156;
  __int16 v157;
  void **v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  __int16 v162;
  uint64_t v163;

  v163 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 41))
    return 0;
  v149 = (char)a2;
  v9 = (char *)*((_QWORD *)this + 139);
  v150 = (char *)this + 1120;
  if (v9 != (char *)this + 1120)
  {
    v10 = (char **)((char *)this + 1144);
    do
    {
      v158 = *(void ***)this;
      v159 = &v161;
      v160 = 0x800000000;
      v11 = *((_QWORD *)v9 + 4);
      v12 = (unsigned int *)*((_QWORD *)v9 + 5);
      v13 = (unsigned int *)*((_QWORD *)v9 + 6);
      while (v12 != v13)
      {
        v14 = *v10;
        if (*v10)
        {
          v15 = *v12;
          v16 = (char **)((char *)this + 1144);
          do
          {
            v17 = *((_DWORD *)v14 + 8);
            v18 = v17 >= v15;
            if (v17 >= v15)
              v19 = (char **)v14;
            else
              v19 = (char **)(v14 + 8);
            if (v18)
              v16 = (char **)v14;
            v14 = *v19;
          }
          while (*v19);
          if (v16 != v10 && v15 >= *((_DWORD *)v16 + 8))
          {
            v20 = *((unsigned int *)v16 + 14);
            if ((_DWORD)v20)
            {
              v21 = (uint64_t *)v16[6];
              v22 = 8 * v20;
              do
              {
                v23 = *v21++;
                llvm::AttrBuilder::addAttribute((uint64_t)&v158, v23);
                v22 -= 8;
              }
              while (v22);
            }
          }
        }
        ++v12;
      }
      v24 = *(unsigned __int8 *)(v11 + 16);
      if (*(_BYTE *)(v11 + 16))
        v25 = 1;
      else
        v25 = v11 == 0;
      if (v25)
      {
        if (v24 != 84 || v11 == 0)
        {
          if (v24 != 33 || v11 == 0)
          {
            if (v24 != 39 || v11 == 0)
            {
              v29 = 0;
              v30 = 0;
              if (v24 == 3)
                v31 = v11;
              else
                v31 = 0;
              v32 = *(_QWORD *)(v31 + 72);
              __p[0] = **((void ***)this + 41);
              __p[1] = &v156;
              v155 = 0x800000000;
              if (v32)
              {
                v29 = (char *)(v32 + 48);
                v30 = (char *)(v32 + 48 + 8 * *(unsigned int *)(v32 + 8));
              }
              sub_1C53321EC((unsigned int *)&__p[1], (uint64_t)&v156, v29, v30);
              if ((_DWORD)v160)
              {
                v33 = (uint64_t *)v159;
                v34 = 8 * v160;
                do
                {
                  v35 = *v33++;
                  llvm::AttrBuilder::addAttribute((uint64_t)__p, v35);
                  v34 -= 8;
                }
                while (v34);
              }
              *(_QWORD *)(v31 + 72) = llvm::AttributeSetNode::getSorted(*(uint64_t **)this, (uint64_t *)__p[1], v155);
              goto LABEL_50;
            }
            v50 = *(_QWORD *)(v11 + 64);
            v153.__r_.__value_.__r.__words[0] = v50;
            if (v50 && *(_DWORD *)(v50 + 8))
            {
              v51 = *(_QWORD *)(v50 + 40);
              __p[0] = **((void ***)this + 41);
              __p[1] = &v156;
              v155 = 0x800000000;
              if (v51)
              {
                v52 = (char *)(v51 + 48);
                v53 = (char *)(v51 + 48 + 8 * *(unsigned int *)(v51 + 8));
              }
              else
              {
                v52 = 0;
                v53 = 0;
              }
            }
            else
            {
              v52 = 0;
              v53 = 0;
              __p[0] = **((void ***)this + 41);
              __p[1] = &v156;
              v155 = 0x800000000;
            }
            sub_1C53321EC((unsigned int *)&__p[1], (uint64_t)&v156, v52, v53);
            v153.__r_.__value_.__r.__words[0] = llvm::AttributeList::removeAttributesAtIndex((llvm::AttributeList *)&v153, *(llvm::LLVMContext **)this, -1);
            if ((_DWORD)v160)
            {
              v65 = (uint64_t *)v159;
              v66 = 8 * v160;
              do
              {
                v67 = *v65++;
                llvm::AttrBuilder::addAttribute((uint64_t)__p, v67);
                v66 -= 8;
              }
              while (v66);
            }
          }
          else
          {
            v46 = *(_QWORD *)(v11 + 64);
            v153.__r_.__value_.__r.__words[0] = v46;
            if (v46 && *(_DWORD *)(v46 + 8))
            {
              v47 = *(_QWORD *)(v46 + 40);
              __p[0] = **((void ***)this + 41);
              __p[1] = &v156;
              v155 = 0x800000000;
              if (v47)
              {
                v48 = (char *)(v47 + 48);
                v49 = (char *)(v47 + 48 + 8 * *(unsigned int *)(v47 + 8));
              }
              else
              {
                v48 = 0;
                v49 = 0;
              }
            }
            else
            {
              v48 = 0;
              v49 = 0;
              __p[0] = **((void ***)this + 41);
              __p[1] = &v156;
              v155 = 0x800000000;
            }
            sub_1C53321EC((unsigned int *)&__p[1], (uint64_t)&v156, v48, v49);
            v153.__r_.__value_.__r.__words[0] = llvm::AttributeList::removeAttributesAtIndex((llvm::AttributeList *)&v153, *(llvm::LLVMContext **)this, -1);
            if ((_DWORD)v160)
            {
              v62 = (uint64_t *)v159;
              v63 = 8 * v160;
              do
              {
                v64 = *v62++;
                llvm::AttrBuilder::addAttribute((uint64_t)__p, v64);
                v63 -= 8;
              }
              while (v63);
            }
          }
        }
        else
        {
          v42 = *(_QWORD *)(v11 + 64);
          v153.__r_.__value_.__r.__words[0] = v42;
          if (v42 && *(_DWORD *)(v42 + 8))
          {
            v43 = *(_QWORD *)(v42 + 40);
            __p[0] = **((void ***)this + 41);
            __p[1] = &v156;
            v155 = 0x800000000;
            if (v43)
            {
              v44 = (char *)(v43 + 48);
              v45 = (char *)(v43 + 48 + 8 * *(unsigned int *)(v43 + 8));
            }
            else
            {
              v44 = 0;
              v45 = 0;
            }
          }
          else
          {
            v44 = 0;
            v45 = 0;
            __p[0] = **((void ***)this + 41);
            __p[1] = &v156;
            v155 = 0x800000000;
          }
          sub_1C53321EC((unsigned int *)&__p[1], (uint64_t)&v156, v44, v45);
          v153.__r_.__value_.__r.__words[0] = llvm::AttributeList::removeAttributesAtIndex((llvm::AttributeList *)&v153, *(llvm::LLVMContext **)this, -1);
          if ((_DWORD)v160)
          {
            v59 = (uint64_t *)v159;
            v60 = 8 * v160;
            do
            {
              v61 = *v59++;
              llvm::AttrBuilder::addAttribute((uint64_t)__p, v61);
              v60 -= 8;
            }
            while (v60);
          }
        }
        v153.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v153, *(llvm::LLVMContext **)this, -1, (const llvm::AttrBuilder *)__p);
        *(_QWORD *)(v11 + 64) = v153.__r_.__value_.__r.__words[0];
      }
      else
      {
        v38 = *(_QWORD *)(v11 + 112);
        v153.__r_.__value_.__r.__words[0] = v38;
        if (v38 && *(_DWORD *)(v38 + 8))
        {
          v39 = *(_QWORD *)(v38 + 40);
          __p[0] = **((void ***)this + 41);
          __p[1] = &v156;
          v155 = 0x800000000;
          if (v39)
          {
            v40 = (char *)(v39 + 48);
            v41 = (char *)(v39 + 48 + 8 * *(unsigned int *)(v39 + 8));
          }
          else
          {
            v40 = 0;
            v41 = 0;
          }
        }
        else
        {
          v40 = 0;
          v41 = 0;
          __p[0] = **((void ***)this + 41);
          __p[1] = &v156;
          v155 = 0x800000000;
        }
        sub_1C53321EC((unsigned int *)&__p[1], (uint64_t)&v156, v40, v41);
        v153.__r_.__value_.__r.__words[0] = llvm::AttributeList::removeAttributesAtIndex((llvm::AttributeList *)&v153, *(llvm::LLVMContext **)this, -1);
        if ((_DWORD)v160)
        {
          v54 = (uint64_t *)v159;
          v55 = 8 * v160;
          do
          {
            v56 = *v54++;
            llvm::AttrBuilder::addAttribute((uint64_t)__p, v56);
            v55 -= 8;
          }
          while (v55);
        }
        Attribute = llvm::AttrBuilder::getAttribute((uint64_t)__p, 74);
        if (Attribute)
        {
          v58 = *(_QWORD *)(Attribute + 16);
          if (v58)
          {
            *(_DWORD *)(v11 + 32) = (((__clz(v58) << 16) ^ 0x3F0000) + 0x10000) | *(_DWORD *)(v11 + 32) & 0xFFC0FFFF;
            llvm::AttrBuilder::removeAttribute((uint64_t)__p, 74);
          }
        }
        v153.__r_.__value_.__r.__words[0] = llvm::AttributeList::addAttributesAtIndex((llvm::AttributeList *)&v153, *(llvm::LLVMContext **)this, -1, (const llvm::AttrBuilder *)__p);
        *(_QWORD *)(v11 + 112) = v153.__r_.__value_.__r.__words[0];
      }
LABEL_50:
      if (__p[1] != &v156)
        free(__p[1]);
      if (v159 != &v161)
        free(v159);
      v36 = (char *)*((_QWORD *)v9 + 1);
      if (v36)
      {
        do
        {
          v37 = v36;
          v36 = *(char **)v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          v37 = (char *)*((_QWORD *)v9 + 2);
          v25 = *(_QWORD *)v37 == (_QWORD)v9;
          v9 = v37;
        }
        while (!v25);
      }
      v9 = v37;
    }
    while (v37 != v150);
  }
  if (*((_QWORD *)this + 137))
  {
    a2 = *(char **)(*((_QWORD *)this + 135) + 40);
    v158 = (void **)"expected function name in blockaddress";
    v119 = 259;
LABEL_219:
    v162 = v119;
    return llvm::LLLexer::Error((uint64_t)this + 168, a2, (llvm::Twine *)&v158);
  }
  v68 = (char *)*((_QWORD *)this + 114);
  v69 = (char *)this + 920;
  if (v68 != (char *)this + 920)
  {
    while (1)
    {
      a2 = (char *)*((_QWORD *)v68 + 6);
      if (a2)
        break;
      v70 = (char *)*((_QWORD *)v68 + 1);
      if (v70)
      {
        do
        {
          v71 = v70;
          v70 = *(char **)v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          v71 = (char *)*((_QWORD *)v68 + 2);
          v25 = *(_QWORD *)v71 == (_QWORD)v68;
          v68 = v71;
        }
        while (!v25);
      }
      v68 = v71;
      if (v71 == v69)
        goto LABEL_113;
    }
    v124 = *((unsigned int *)v68 + 8);
    v125 = "use of undefined type '%";
    goto LABEL_216;
  }
LABEL_113:
  v72 = *((unsigned int *)this + 222);
  if ((_DWORD)v72)
  {
    for (i = (uint64_t **)*((_QWORD *)this + 110); !*i || *i + 1 == 0; ++i)
      ;
  }
  else
  {
    i = (uint64_t **)*((_QWORD *)this + 110);
  }
  v75 = *((_QWORD *)this + 110) + 8 * v72;
  if (i != (uint64_t **)v75)
  {
    v76 = *i;
    while (1)
    {
      a2 = (char *)v76[2];
      if (a2)
        break;
      do
      {
        v77 = i[1];
        ++i;
        v76 = v77;
        if (v77)
          v78 = v76 + 1 == 0;
        else
          v78 = 1;
      }
      while (v78);
      if (i == (uint64_t **)v75)
        goto LABEL_130;
    }
    v130 = *v76;
    v157 = 1283;
    __p[0] = "use of undefined type named '";
    v155 = (uint64_t)(v76 + 3);
    v156 = v130;
    goto LABEL_218;
  }
LABEL_130:
  if (*((_QWORD *)this + 134))
  {
    v120 = *(char **)(*((_QWORD *)this + 132) + 56);
LABEL_201:
    std::operator+<char>();
    v121 = std::string::append(&v153, "'");
    v122 = v121->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
    v155 = v122;
    v121->__r_.__value_.__l.__size_ = 0;
    v121->__r_.__value_.__r.__words[2] = 0;
    v121->__r_.__value_.__r.__words[0] = 0;
    v162 = 260;
    v158 = __p;
    v117 = llvm::LLLexer::Error((uint64_t)this + 168, v120, (llvm::Twine *)&v158);
    if (SHIBYTE(v155) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v153.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v153.__r_.__value_.__l.__data_);
    return v117;
  }
  if (*((_QWORD *)this + 125))
  {
    v120 = *(char **)(*((_QWORD *)this + 123) + 64);
    goto LABEL_201;
  }
  if (*((_QWORD *)this + 128))
  {
    v123 = *((_QWORD *)this + 126);
    a2 = *(char **)(v123 + 48);
    v124 = *(unsigned int *)(v123 + 32);
    v125 = "use of undefined value '@";
LABEL_216:
    __p[0] = (void *)v125;
    v155 = v124;
    v157 = 2051;
LABEL_218:
    v158 = __p;
    v160 = (uint64_t)"'";
    v119 = 770;
    goto LABEL_219;
  }
  if (*((_QWORD *)this + 122))
  {
    v126 = *((_QWORD *)this + 120);
    a2 = *(char **)(v126 + 48);
    v124 = *(unsigned int *)(v126 + 32);
    v125 = "use of undefined metadata '!";
    goto LABEL_216;
  }
  v79 = (llvm::LLParser *)*((_QWORD *)this + 117);
  if (v79 != (llvm::LLParser *)((char *)this + 944))
  {
    do
    {
      v80 = *((_QWORD *)v79 + 5);
      if (v80 && ((*(_BYTE *)(v80 + 1) & 0x7F) == 2 || *(_DWORD *)(v80 + 12)))
        llvm::MDNode::resolveCycles((unsigned __int8 *)v80);
      v81 = (llvm::LLParser *)*((_QWORD *)v79 + 1);
      if (v81)
      {
        do
        {
          v82 = v81;
          v81 = *(llvm::LLParser **)v81;
        }
        while (v81);
      }
      else
      {
        do
        {
          v82 = (llvm::LLParser *)*((_QWORD *)v79 + 2);
          v25 = *(_QWORD *)v82 == (_QWORD)v79;
          v79 = v82;
        }
        while (!v25);
      }
      v79 = v82;
    }
    while (v82 != (llvm::LLParser *)((char *)this + 944));
  }
  v83 = *((unsigned int *)this + 90);
  if ((_DWORD)v83)
  {
    v84 = (void ***)*((_QWORD *)this + 44);
    v85 = &v84[v83];
    do
    {
      v86 = (llvm::Value *)*v84;
      if ((*((_BYTE *)*v84 + 23) & 0x20) == 0)
        goto LABEL_163;
      v87 = ***(_QWORD ***)v86;
      v158 = *v84;
      v88 = *(_DWORD *)(v87 + 2496);
      if (v88)
      {
        v89 = *(_QWORD *)(v87 + 2480);
        v90 = v88 - 1;
        v91 = v90 & ((v86 >> 4) ^ (v86 >> 9));
        v92 = (llvm::Value **)(v89 + 40 * v91);
        v93 = *v92;
        if (*v92 == v86)
          goto LABEL_158;
        v94 = 0;
        v95 = 1;
        while (v93 != (llvm::Value *)-4096)
        {
          if (v94)
            v96 = 0;
          else
            v96 = v93 == (llvm::Value *)-8192;
          if (v96)
            v94 = v92;
          v97 = v91 + v95++;
          v91 = v97 & v90;
          v92 = (llvm::Value **)(v89 + 40 * v91);
          v93 = *v92;
          if (*v92 == v86)
            goto LABEL_158;
        }
        if (v94)
          v103 = v94;
        else
          v103 = v92;
      }
      else
      {
        v103 = 0;
      }
      v92 = (llvm::Value **)sub_1C541AB24(v87 + 2480, (uint64_t)&v158, (uint64_t *)&v158, v103);
      v104 = v158;
      v92[4] = 0;
      v92[3] = 0;
      *v92 = (llvm::Value *)v104;
      v92[1] = (llvm::Value *)(v92 + 3);
      v92[2] = (llvm::Value *)0x100000000;
LABEL_158:
      v98 = *((unsigned int *)v92 + 4);
      if ((_DWORD)v98)
      {
        v99 = (llvm **)((char *)v92[1] + 8);
        v100 = 16 * v98;
        while (*((_DWORD *)v99 - 2) != 1)
        {
          v101 = 0;
          v99 += 2;
          v100 -= 16;
          if (!v100)
            goto LABEL_164;
        }
        v101 = *v99;
        goto LABEL_164;
      }
LABEL_163:
      v101 = 0;
LABEL_164:
      v102 = llvm::UpgradeTBAANode(v101, (llvm::MDNode *)a2);
      if (v101 != v102)
      {
        a3 = (uint64_t)v102;
        if (v102 || *((_QWORD *)v86 + 6) || (*((_BYTE *)v86 + 23) & 0x20) != 0)
          llvm::Value::setMetadata(v86, 1, v102);
      }
      ++v84;
    }
    while (v84 != v85);
  }
  v105 = (llvm *)*((_QWORD *)this + 41);
  v106 = (_QWORD *)((char *)v105 + 24);
  v107 = (_QWORD *)*((_QWORD *)v105 + 4);
  if (v107 == (_QWORD *)((char *)v105 + 24))
  {
    v108 = v149;
  }
  else
  {
    v108 = v149;
    do
    {
      v109 = (_QWORD *)v107[1];
      if (v107)
        v110 = (uint64_t ***)(v107 - 7);
      else
        v110 = 0;
      llvm::UpgradeCallsToIntrinsic(v110, (llvm::Function *)a2, a3, a4, a5, a6, a7, a8);
      v107 = v109;
    }
    while (v109 != v106);
    v105 = (llvm *)*((_QWORD *)this + 41);
    v107 = (_QWORD *)*((_QWORD *)v105 + 4);
  }
  v111 = (_QWORD *)((char *)v105 + 24);
  if (v107 != (_QWORD *)((char *)v105 + 24))
  {
    do
    {
      v112 = (_QWORD *)v107[1];
      if (v107)
        v113 = (llvm::Intrinsic *)(v107 - 7);
      else
        v113 = 0;
      v114 = (llvm::Value *)llvm::Intrinsic::remangleIntrinsicFunction(v113, (llvm::Function *)a2);
      if ((_BYTE)a2)
      {
        llvm::Value::doRAUW(v113, v114, (llvm::Value *)1);
        llvm::Function::eraseFromParent(v113);
      }
      v107 = v112;
    }
    while (v112 != v111);
    v105 = (llvm *)*((_QWORD *)this + 41);
  }
  if ((v108 & 1) != 0)
  {
    llvm::UpgradeDebugInfo(v105, (llvm::Module *)a2);
    v105 = (llvm *)*((_QWORD *)this + 41);
  }
  llvm::UpgradeModuleFlags((uint64_t **)v105, (llvm::Module *)a2);
  llvm::UpgradeSectionAttributes(*((llvm **)this + 41), v115);
  v116 = *((_QWORD *)this + 43);
  if (!v116)
    return 0;
  sub_1C6184574(v116, (__n128 *)((char *)this + 1032));
  sub_1C61CE348(*((_QWORD *)this + 43) + 24, (_QWORD *)this + 117);
  v127 = *((unsigned int *)this + 222);
  if ((_DWORD)v127)
  {
    for (j = (uint64_t *)*((_QWORD *)this + 110); !*j || *j == -8; ++j)
      ;
  }
  else
  {
    j = (uint64_t *)*((_QWORD *)this + 110);
  }
  v131 = *((_QWORD *)this + 110) + 8 * v127;
  if (j != (uint64_t *)v131)
  {
    v132 = *j;
    do
    {
      v133 = *((_QWORD *)this + 43) + 48;
      v151 = *(_QWORD *)v132;
      v152 = *(_QWORD *)(v132 + 8);
      sub_1C61CE3B0(v133, (unsigned __int8 *)(v132 + 24), v151, &v152);
      do
      {
        v134 = j[1];
        ++j;
        v132 = v134;
        if (v134)
          v135 = v132 == -8;
        else
          v135 = 1;
      }
      while (v135);
    }
    while (j != (uint64_t *)v131);
  }
  v136 = (char *)*((_QWORD *)this + 114);
  if (v136 == v69)
    return 0;
  do
  {
    v137 = *((_QWORD *)this + 43);
    v138 = *((_DWORD *)v136 + 8);
    v139 = *((_QWORD *)v136 + 5);
    v141 = (uint64_t **)(v137 + 88);
    v140 = *(uint64_t **)(v137 + 88);
    if (v140)
    {
      while (1)
      {
        while (1)
        {
          v142 = (uint64_t **)v140;
          v143 = *((_DWORD *)v140 + 8);
          if (v143 <= v138)
            break;
          v140 = *v142;
          v141 = v142;
          if (!*v142)
            goto LABEL_238;
        }
        if (v143 >= v138)
          break;
        v140 = v142[1];
        if (!v140)
        {
          v141 = v142 + 1;
          goto LABEL_238;
        }
      }
    }
    else
    {
      v142 = (uint64_t **)(v137 + 88);
LABEL_238:
      v144 = operator new(0x30uLL);
      v144[8] = v138;
      *((_QWORD *)v144 + 5) = v139;
      *(_QWORD *)v144 = 0;
      *((_QWORD *)v144 + 1) = 0;
      *((_QWORD *)v144 + 2) = v142;
      *v141 = (uint64_t *)v144;
      v145 = **(_QWORD **)(v137 + 80);
      if (v145)
      {
        *(_QWORD *)(v137 + 80) = v145;
        v146 = *v141;
      }
      else
      {
        v146 = (uint64_t *)v144;
      }
      sub_1C4768E74(*(uint64_t **)(v137 + 88), v146);
      ++*(_QWORD *)(v137 + 96);
    }
    v147 = (char *)*((_QWORD *)v136 + 1);
    if (v147)
    {
      do
      {
        v148 = v147;
        v147 = *(char **)v147;
      }
      while (v147);
    }
    else
    {
      do
      {
        v148 = (char *)*((_QWORD *)v136 + 2);
        v25 = *(_QWORD *)v148 == (_QWORD)v136;
        v136 = v148;
      }
      while (!v25);
    }
    v117 = 0;
    v136 = v148;
  }
  while (v148 != v69);
  return v117;
}

void llvm::LLParser::restoreParsingState(uint64_t a1, char **a2)
{
  _QWORD *v4;
  char *v5;
  char *v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char **v14;
  _BYTE *v15;
  unint64_t v16;
  char *v17;
  void *v18;
  char *v19;
  _QWORD **v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  char *v26;
  uint64_t ***v27;
  uint64_t *v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t **v31;
  _QWORD *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *i;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL v41;
  char *v42;
  char *v43;
  uint64_t **v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t **v47;
  uint64_t **v48;
  uint64_t *v49;
  unsigned int v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  char *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  _QWORD *v64;
  char *v65;
  size_t v66;
  __int128 v67;
  uint64_t v68[3];

  if (!a2)
    return;
  v4 = (_QWORD *)(a1 + 1032);
  if ((char **)(a1 + 1032) != a2)
  {
    v5 = *a2;
    v6 = a2[1];
    v7 = v6 - *a2;
    v8 = v7 >> 3;
    v9 = *(_QWORD *)(a1 + 1048);
    v10 = *(char **)(a1 + 1032);
    if (v7 >> 3 > (unint64_t)((v9 - (uint64_t)v10) >> 3))
    {
      if (v10)
      {
        *(_QWORD *)(a1 + 1040) = v10;
        operator delete(v10);
        v9 = 0;
        *v4 = 0;
        v4[1] = 0;
        v4[2] = 0;
      }
      if (v7 < 0)
        goto LABEL_113;
      v11 = v9 >> 2;
      if (v9 >> 2 <= v8)
        v11 = v7 >> 3;
      v12 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v11;
      if (v12 >> 61)
LABEL_113:
        abort();
      v13 = (char *)operator new(8 * v12);
      v10 = v13;
      *(_QWORD *)(a1 + 1032) = v13;
      v14 = (char **)(a1 + 1040);
      *(_QWORD *)(a1 + 1040) = v13;
      *(_QWORD *)(a1 + 1048) = &v13[8 * v12];
      if (v6 != v5)
        memcpy(v13, v5, v7);
      goto LABEL_23;
    }
    v14 = (char **)(a1 + 1040);
    v15 = *(_BYTE **)(a1 + 1040);
    v16 = (v15 - v10) >> 3;
    if (v16 >= v8)
    {
      if (v6 == v5)
      {
LABEL_23:
        *v14 = &v10[v7];
        goto LABEL_24;
      }
      v18 = *(void **)(a1 + 1032);
      v19 = *a2;
    }
    else
    {
      v17 = &v5[8 * v16];
      if (v15 != v10)
      {
        memmove(*(void **)(a1 + 1032), *a2, v15 - v10);
        v10 = *v14;
      }
      v7 = v6 - v17;
      if (v6 == v17)
        goto LABEL_23;
      v18 = v10;
      v19 = v17;
    }
    memmove(v18, v19, v7);
    goto LABEL_23;
  }
LABEL_24:
  v20 = (_QWORD **)(a1 + 936);
  if ((char **)(a1 + 936) != a2 + 3)
  {
    v21 = a2[3];
    v22 = (char *)(a2 + 4);
    if (*(_QWORD *)(a1 + 952)
      && ((v23 = *(_QWORD *)(a1 + 936),
           v24 = (uint64_t **)(a1 + 944),
           *(_QWORD *)(a1 + 936) = a1 + 944,
           *(_QWORD *)(*(_QWORD *)(a1 + 944) + 16) = 0,
           *(_QWORD *)(a1 + 952) = 0,
           *(_QWORD *)(a1 + 944) = 0,
           *(_QWORD *)(v23 + 8))
        ? (v25 = *(_QWORD *)(v23 + 8))
        : (v25 = v23),
          v25))
    {
      v56 = sub_1C4FCE18C(v25);
      if (v21 == v22)
      {
        v57 = (_QWORD *)v25;
        v26 = v21;
      }
      else
      {
        do
        {
          v57 = v56;
          *(_DWORD *)(v25 + 32) = *((_DWORD *)v21 + 8);
          if (v21 != (char *)v25)
          {
            v59 = *(unsigned __int8 **)(v25 + 40);
            if (v59)
              llvm::MetadataTracking::untrack(v25 + 40, v59);
            v60 = (unsigned __int8 *)*((_QWORD *)v21 + 5);
            *(_QWORD *)(v25 + 40) = v60;
            if (v60)
              llvm::MetadataTracking::track(v25 + 40, v60, 2);
          }
          v61 = *v24;
          v62 = (uint64_t *)(a1 + 944);
          v63 = (uint64_t *)(a1 + 944);
          if (*v24)
          {
            do
            {
              while (1)
              {
                v62 = v61;
                if (*(_DWORD *)(v25 + 32) >= *((_DWORD *)v61 + 8))
                  break;
                v61 = (uint64_t *)*v61;
                v63 = v62;
                if (!*v62)
                  goto LABEL_100;
              }
              v61 = (uint64_t *)v61[1];
            }
            while (v61);
            v63 = v62 + 1;
          }
LABEL_100:
          *(_QWORD *)v25 = 0;
          *(_QWORD *)(v25 + 8) = 0;
          *(_QWORD *)(v25 + 16) = v62;
          *v63 = v25;
          v64 = (_QWORD *)**v20;
          if (v64)
          {
            *v20 = v64;
            v25 = *v63;
          }
          sub_1C4768E74(*(uint64_t **)(a1 + 944), (uint64_t *)v25);
          ++*(_QWORD *)(a1 + 952);
          if (v56)
            v56 = sub_1C4FCE18C((uint64_t)v56);
          else
            v56 = 0;
          v65 = (char *)*((_QWORD *)v21 + 1);
          if (v65)
          {
            do
            {
              v26 = v65;
              v65 = *(char **)v65;
            }
            while (v65);
          }
          else
          {
            do
            {
              v26 = (char *)*((_QWORD *)v21 + 2);
              v37 = *(_QWORD *)v26 == (_QWORD)v21;
              v21 = v26;
            }
            while (!v37);
          }
          if (!v57)
            break;
          v21 = v26;
          v25 = (uint64_t)v57;
        }
        while (v26 != v22);
      }
      sub_1C61CE1A4(a1 + 936, v57);
      if (v56)
      {
        do
        {
          v58 = v56;
          v56 = (_QWORD *)v56[2];
        }
        while (v56);
        sub_1C61CE1A4(a1 + 936, v58);
      }
    }
    else
    {
      v26 = v21;
    }
    if (v26 != v22)
    {
      v27 = (uint64_t ***)(a1 + 944);
      do
      {
        sub_1C61CE1F4((uint64_t)v68, a1 + 936, *((_DWORD *)v26 + 8), *((unsigned __int8 **)v26 + 5));
        v28 = (uint64_t *)v68[0];
        v29 = *v27;
        v30 = (uint64_t **)(a1 + 944);
        v31 = (uint64_t **)(a1 + 944);
        if (*v27)
        {
          do
          {
            while (1)
            {
              v30 = v29;
              if (*(_DWORD *)(v68[0] + 32) >= *((_DWORD *)v29 + 8))
                break;
              v29 = (uint64_t **)*v29;
              v31 = v30;
              if (!*v30)
                goto LABEL_39;
            }
            v29 = (uint64_t **)v29[1];
          }
          while (v29);
          v31 = v30 + 1;
        }
LABEL_39:
        *(_QWORD *)v68[0] = 0;
        v28[1] = 0;
        v28[2] = (uint64_t)v30;
        *v31 = v28;
        v32 = (_QWORD *)**v20;
        if (v32)
        {
          *v20 = v32;
          v28 = *v31;
        }
        sub_1C4768E74(*(uint64_t **)(a1 + 944), v28);
        ++*(_QWORD *)(a1 + 952);
        v33 = (char *)*((_QWORD *)v26 + 1);
        if (v33)
        {
          do
          {
            v34 = v33;
            v33 = *(char **)v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            v34 = (char *)*((_QWORD *)v26 + 2);
            v37 = *(_QWORD *)v34 == (_QWORD)v26;
            v26 = v34;
          }
          while (!v37);
        }
        v26 = v34;
      }
      while (v34 != v22);
    }
  }
  v35 = *((unsigned int *)a2 + 14);
  if ((_DWORD)v35)
  {
    for (i = a2[6]; ; i += 8)
    {
      v37 = !*(_QWORD *)i || *(_QWORD *)i == -8;
      if (!v37)
        break;
    }
  }
  else
  {
    i = a2[6];
  }
  v38 = (uint64_t)&a2[6][8 * v35];
  if (i != (char *)v38)
  {
    v39 = *(_QWORD *)i;
    do
    {
      v66 = *(_QWORD *)v39;
      v67 = *(unint64_t *)(v39 + 8);
      sub_1C61CE250(a1 + 880, (unsigned __int8 *)(v39 + 16), v66, &v67);
      do
      {
        v40 = *((_QWORD *)i + 1);
        i += 8;
        v39 = v40;
        if (v40)
          v41 = v39 == -8;
        else
          v41 = 1;
      }
      while (v41);
    }
    while (i != (char *)v38);
  }
  v42 = a2[10];
  v43 = (char *)(a2 + 11);
  if (v42 != v43)
  {
    v44 = (uint64_t **)(a1 + 920);
    do
    {
      v45 = *((_QWORD *)v42 + 5);
      v46 = *((_DWORD *)v42 + 8);
      v47 = (uint64_t **)(a1 + 920);
      v48 = (uint64_t **)(a1 + 920);
      v49 = *v44;
      if (*v44)
      {
        while (1)
        {
          while (1)
          {
            v48 = (uint64_t **)v49;
            v50 = *((_DWORD *)v49 + 8);
            if (v50 <= v46)
              break;
            v49 = *v48;
            v47 = v48;
            if (!*v48)
              goto LABEL_73;
          }
          if (v50 >= v46)
            break;
          v49 = v48[1];
          if (!v49)
          {
            v47 = v48 + 1;
            goto LABEL_73;
          }
        }
      }
      else
      {
LABEL_73:
        v51 = operator new(0x38uLL);
        v51[8] = v46;
        *((_QWORD *)v51 + 5) = v45;
        *((_QWORD *)v51 + 6) = 0;
        *(_QWORD *)v51 = 0;
        *((_QWORD *)v51 + 1) = 0;
        *((_QWORD *)v51 + 2) = v48;
        *v47 = (uint64_t *)v51;
        v52 = **(_QWORD **)(a1 + 912);
        if (v52)
        {
          *(_QWORD *)(a1 + 912) = v52;
          v53 = *v47;
        }
        else
        {
          v53 = (uint64_t *)v51;
        }
        sub_1C4768E74(*(uint64_t **)(a1 + 920), v53);
        ++*(_QWORD *)(a1 + 928);
      }
      v54 = (char *)*((_QWORD *)v42 + 1);
      if (v54)
      {
        do
        {
          v55 = v54;
          v54 = *(char **)v54;
        }
        while (v54);
      }
      else
      {
        do
        {
          v55 = (char *)*((_QWORD *)v42 + 2);
          v37 = *(_QWORD *)v55 == (_QWORD)v42;
          v42 = v55;
        }
        while (!v37);
      }
      v42 = v55;
    }
    while (v55 != v43);
  }
}

uint64_t llvm::LLParser::parseTypeAtBeginning(uint64_t a1, llvm::Type **a2, _DWORD *a3, char **a4)
{
  uint64_t v7;
  uint64_t result;
  const char *v9;
  __int16 v10;

  llvm::LLParser::restoreParsingState(a1, a4);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *a3 = 0;
  v7 = *(_QWORD *)(a1 + 216);
  *a2 = 0;
  v9 = "expected type";
  v10 = 259;
  result = llvm::LLParser::parseType((llvm::LLParser *)a1, a2, (const llvm::Twine *)&v9, 0);
  if ((result & 1) == 0)
    *a3 = *(_DWORD *)(a1 + 216) - v7;
  return result;
}

uint64_t llvm::LLParser::parseTargetDefinition(llvm::LLParser *this)
{
  llvm::LLLexer *v2;
  int v3;
  std::string *v4;
  unint64_t v5;
  uint64_t v6;
  std::string *p_p;
  size_t size;
  const char *v10;
  __int16 v11;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v2 = (llvm::LLParser *)((char *)this + 168);
  v3 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  *((_DWORD *)this + 56) = v3;
  if (v3 == 63)
  {
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v2);
    if ((llvm::LLParser::parseToken((uint64_t)this, 3, "expected '=' after target triple") & 1) == 0
      && (llvm::LLParser::parseStringConstant((uint64_t)this, &__p) & 1) == 0)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __p.__r_.__value_.__l.__size_;
      sub_1C4D828E4(*((_QWORD *)this + 41), p_p, size);
      goto LABEL_26;
    }
LABEL_13:
    v6 = 1;
    goto LABEL_15;
  }
  if (v3 != 67)
  {
    v10 = "unknown target property";
    v11 = 259;
    v6 = llvm::LLLexer::Error((uint64_t)v2, *((char **)this + 27), (llvm::Twine *)&v10);
    goto LABEL_15;
  }
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v2);
  if ((llvm::LLParser::parseToken((uint64_t)this, 3, "expected '=' after target datalayout") & 1) != 0
    || (llvm::LLParser::parseStringConstant((uint64_t)this, &__p) & 1) != 0)
  {
    goto LABEL_13;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &__p;
  else
    v4 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    v5 = __p.__r_.__value_.__l.__size_;
  llvm::DataLayout::reset(*((_QWORD *)this + 41) + 272, v4, v5);
LABEL_26:
  v6 = 0;
LABEL_15:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

uint64_t llvm::LLParser::parseModuleAsm(llvm::LLParser *this)
{
  uint64_t v2;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  memset(&__p, 0, sizeof(__p));
  if ((llvm::LLParser::parseToken((uint64_t)this, 97, "expected 'module asm'") & 1) != 0
    || (llvm::LLParser::parseStringConstant((uint64_t)this, &__p) & 1) != 0)
  {
    v2 = 1;
  }
  else
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    LLVMAppendModuleInlineAsm_0(*((_QWORD *)this + 41), (const std::string::value_type *)p_p, size);
    v2 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v2;
}

uint64_t llvm::LLParser::parseNamedType(llvm::LLParser *this)
{
  llvm::LLLexer *v2;
  char *v3;
  uint64_t v4;
  unsigned __int8 *v6;
  size_t v7;
  char *v8;
  size_t **v9;
  llvm::Type *v10;
  unsigned __int8 *v11;
  size_t v12;
  size_t **v13;
  size_t *v14;
  const char *v15;
  __int16 v16;
  llvm::Type *v17;
  void *__p[2];
  uint64_t v19;

  v2 = (llvm::LLParser *)((char *)this + 168);
  if (*((char *)this + 255) < 0)
  {
    sub_1C47EBC30(__p, *((void **)this + 29), *((_QWORD *)this + 30));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)((char *)this + 232);
    v19 = *((_QWORD *)this + 31);
  }
  v3 = (char *)*((_QWORD *)this + 27);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v2);
  if ((llvm::LLParser::parseToken((uint64_t)this, 3, "expected '=' after name") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 242, "expected 'type' after name") & 1) != 0
    || ((v17 = 0, v19 >= 0) ? (v6 = (unsigned __int8 *)__p) : (v6 = (unsigned __int8 *)__p[0]),
        v19 >= 0 ? (v7 = HIBYTE(v19) & 0x7F) : (v7 = (size_t)__p[1]),
        v8 = (char *)this + 880,
        v9 = sub_1C61CE4A4((uint64_t)this + 880, v6, v7),
        (llvm::LLParser::parseStructDefinition(this, v3, v6, v7, *v9 + 1, &v17) & 1) != 0))
  {
    v4 = 1;
  }
  else
  {
    v10 = v17;
    if (*((_BYTE *)v17 + 8) == 16)
    {
      v4 = 0;
    }
    else
    {
      if (v19 >= 0)
        v11 = (unsigned __int8 *)__p;
      else
        v11 = (unsigned __int8 *)__p[0];
      if (v19 >= 0)
        v12 = HIBYTE(v19) & 0x7F;
      else
        v12 = (size_t)__p[1];
      v13 = sub_1C61CE4A4((uint64_t)v8, v11, v12);
      v14 = *v13;
      if ((*v13)[1])
      {
        v15 = "non-struct types may not be recursive";
        v16 = 259;
        v4 = llvm::LLLexer::Error((uint64_t)v2, v3, (llvm::Twine *)&v15);
      }
      else
      {
        v4 = 0;
        v14[1] = (size_t)v10;
        v14[2] = 0;
      }
    }
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  return v4;
}

uint64_t llvm::LLParser::parseUnnamedGlobal(llvm::LLParser *this)
{
  uint64_t v2;
  uint64_t v3;
  llvm::LLLexer *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  int v9;
  char v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16[4];
  uint64_t v17;
  __int16 v18;
  unsigned int v19[4];
  const char *v20;
  __int16 v21;
  void *v22[2];
  uint64_t v23;

  v2 = *((_QWORD *)this + 130);
  v3 = *((_QWORD *)this + 129);
  v22[0] = 0;
  v22[1] = 0;
  v23 = 0;
  v4 = (llvm::LLParser *)((char *)this + 168);
  v5 = (char *)*((_QWORD *)this + 27);
  if (*((_DWORD *)this + 56) == 433)
  {
    v6 = v2 - v3;
    if (*((_DWORD *)this + 64) != (v6 >> 3))
    {
      *(_QWORD *)v16 = "variable expected to be numbered '%";
      v17 = (v6 >> 3);
      v18 = 2051;
      *(_QWORD *)v19 = v16;
      v20 = "'";
      v21 = 770;
      return llvm::LLLexer::Error((uint64_t)this + 168, v5, (llvm::Twine *)v19);
    }
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
    if ((llvm::LLParser::parseToken((uint64_t)this, 3, "expected '=' after name") & 1) != 0)
      return 1;
  }
  v15 = 0;
  v19[0] = 0;
  v16[0] = 0;
  v14 = 0;
  v13 = 0;
  v12 = 0;
  if ((llvm::LLParser::parseOptionalLinkage(this, v19, &v15, v16, &v14, &v13) & 1) == 0
    && (llvm::LLParser::parseOptionalThreadLocal((uint64_t)this, &v12) & 1) == 0)
  {
    v9 = *((_DWORD *)this + 56);
    if (v9 == 41)
    {
      v10 = 2;
    }
    else
    {
      if (v9 != 42)
      {
        v10 = 0;
        goto LABEL_18;
      }
      v10 = 1;
    }
    v9 = llvm::LLLexer::LexToken(v4);
    *((_DWORD *)this + 56) = v9;
LABEL_18:
    if ((v9 & 0xFFFFFFFE) == 0x5E)
      v11 = llvm::LLParser::parseAliasOrIFunc((uint64_t)this, (uint64_t)v22, v5, v19[0], v16[0], v14, v13, v12, v10);
    else
      v11 = llvm::LLParser::parseGlobal((uint64_t)this, (char *)v22, v5, v19[0], v15, v16[0], v14, v13, v12, SHIWORD(v12), v10);
    v7 = v11;
    goto LABEL_7;
  }
  v7 = 1;
LABEL_7:
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
  return v7;
}

uint64_t llvm::LLParser::parseNamedGlobal(llvm::LLParser *this)
{
  llvm::LLLexer *v2;
  char *v3;
  uint64_t v4;
  int v6;
  char v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  unsigned int v11[2];
  unsigned int v12;
  BOOL v13;
  void *__p[2];
  uint64_t v15;

  v2 = (llvm::LLParser *)((char *)this + 168);
  v3 = (char *)*((_QWORD *)this + 27);
  if (*((char *)this + 255) < 0)
  {
    sub_1C47EBC30(__p, *((void **)this + 29), *((_QWORD *)this + 30));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)((char *)this + 232);
    v15 = *((_QWORD *)this + 31);
  }
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v2);
  v13 = 0;
  v12 = 0;
  *(_QWORD *)v11 = 0;
  v10 = 0;
  v9 = 0;
  if ((llvm::LLParser::parseToken((uint64_t)this, 3, "expected '=' in global variable") & 1) == 0
    && (llvm::LLParser::parseOptionalLinkage(this, &v12, &v13, &v11[1], v11, &v10) & 1) == 0
    && (llvm::LLParser::parseOptionalThreadLocal((uint64_t)this, &v9) & 1) == 0)
  {
    v6 = *((_DWORD *)this + 56);
    if (v6 == 41)
    {
      v7 = 2;
    }
    else
    {
      if (v6 != 42)
      {
        v7 = 0;
        goto LABEL_17;
      }
      v7 = 1;
    }
    v6 = llvm::LLLexer::LexToken(v2);
    *((_DWORD *)this + 56) = v6;
LABEL_17:
    if ((v6 & 0xFFFFFFFE) == 0x5E)
      v8 = llvm::LLParser::parseAliasOrIFunc((uint64_t)this, (uint64_t)__p, v3, v12, v11[1], v11[0], v10, v9, v7);
    else
      v8 = llvm::LLParser::parseGlobal((uint64_t)this, (char *)__p, v3, v12, v13, v11[1], v11[0], v10, v9, SHIWORD(v9), v7);
    v4 = v8;
    goto LABEL_6;
  }
  v4 = 1;
LABEL_6:
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  return v4;
}

uint64_t llvm::LLParser::parseComdat(llvm::LLParser *this)
{
  llvm::LLLexer *v2;
  char *v3;
  uint64_t v4;
  unsigned int v6;
  unsigned __int8 *p_dst;
  size_t v8;
  uint64_t v9;
  int v10;
  size_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  size_t *inserted;
  const char *v28;
  unsigned __int8 *v29;
  size_t v30;
  uint64_t *v31;
  BOOL v32;
  std::string *v33;
  std::string::size_type v34;
  unsigned int v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  std::string v39;
  void *__p[2];
  std::string::size_type v41;
  _QWORD v42[4];
  __int16 v43;
  __int128 __dst;
  uint64_t v45;

  v2 = (llvm::LLParser *)((char *)this + 168);
  if (*((char *)this + 255) < 0)
  {
    sub_1C47EBC30(&__dst, *((void **)this + 29), *((_QWORD *)this + 30));
  }
  else
  {
    __dst = *(_OWORD *)((char *)this + 232);
    v45 = *((_QWORD *)this + 31);
  }
  v3 = (char *)*((_QWORD *)this + 27);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v2);
  if ((llvm::LLParser::parseToken((uint64_t)this, 3, "expected '=' here") & 1) != 0)
  {
    v4 = 1;
    goto LABEL_6;
  }
  if (llvm::LLParser::parseToken((uint64_t)this, 244, "expected comdat keyword"))
  {
    v28 = "expected comdat type";
LABEL_41:
    v42[0] = v28;
    v43 = 259;
    v4 = llvm::LLLexer::Error((uint64_t)v2, *((char **)this + 27), (llvm::Twine *)v42);
    goto LABEL_6;
  }
  v6 = *((_DWORD *)this + 56) - 245;
  if (v6 >= 5)
  {
    v28 = "unknown selection kind";
    goto LABEL_41;
  }
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v2);
  p_dst = (unsigned __int8 *)&__dst;
  if (v45 < 0)
    p_dst = (unsigned __int8 *)__dst;
  v37 = p_dst;
  v38 = *((_QWORD *)this + 41);
  if (v45 >= 0)
    v8 = HIBYTE(v45) & 0x7F;
  else
    v8 = *((_QWORD *)&__dst + 1);
  v9 = *(unsigned int *)(*((_QWORD *)this + 41) + 128);
  v35 = v6;
  if (!(_DWORD)v9)
  {
    v21 = 0;
    v14 = *(_QWORD *)(v38 + 120);
LABEL_35:
    v20 = (_QWORD *)(v14 + 8 * v21);
    goto LABEL_36;
  }
  v10 = 0;
  if (v8)
  {
    v11 = v8;
    do
    {
      v12 = *p_dst++;
      v10 = 33 * v10 + v12;
      --v11;
    }
    while (v11);
  }
  v13 = v9 - 1;
  v14 = *(_QWORD *)(v38 + 120);
  v36 = *(unsigned int *)(*((_QWORD *)this + 41) + 128);
  v15 = v14 + 8 * v9 + 8;
  v16 = 1;
  v17 = v10;
  while (1)
  {
    v18 = v17 & v13;
    v19 = *(_QWORD **)(v14 + 8 * v18);
    if (v19 != (_QWORD *)-8)
    {
      if (!v19)
        goto LABEL_34;
      if (*(_DWORD *)(v15 + 4 * v18) == v10
        && v8 == *v19
        && (!v8 || !memcmp(v37, (char *)v19 + *(unsigned int *)(v38 + 140), v8)))
      {
        break;
      }
    }
    v17 = v16 + v18;
    ++v16;
  }
  if ((_DWORD)v18 == -1)
  {
LABEL_34:
    v21 = v36;
    goto LABEL_35;
  }
  v20 = (_QWORD *)(v14 + 8 * (int)v18);
  v21 = v36;
  if ((int)v18 == v36)
    goto LABEL_36;
  v22 = (uint64_t **)((char *)this + 1056);
  v23 = (uint64_t *)sub_1C61CE594((uint64_t)this + 1056, &__dst);
  if ((uint64_t *)((char *)this + 1064) != v23)
  {
    v24 = v23;
    v25 = (uint64_t *)v23[1];
    if (v25)
    {
      do
      {
        v26 = v25;
        v25 = (uint64_t *)*v25;
      }
      while (v25);
    }
    else
    {
      v31 = v23;
      do
      {
        v26 = (uint64_t *)v31[2];
        v32 = *v26 == (_QWORD)v31;
        v31 = v26;
      }
      while (!v32);
    }
    if (*v22 == v23)
      *v22 = v26;
    --*((_QWORD *)this + 134);
    sub_1C485B6E0(*((uint64_t **)this + 133), v23);
    if (*((char *)v24 + 55) < 0)
      operator delete((void *)v24[4]);
    operator delete(v24);
    v14 = *(_QWORD *)(v38 + 120);
    v21 = *(unsigned int *)(v38 + 128);
LABEL_36:
    if (v20 == (_QWORD *)(v14 + 8 * v21))
    {
      if (v45 >= 0)
        v29 = (unsigned __int8 *)&__dst;
      else
        v29 = (unsigned __int8 *)__dst;
      if (v45 >= 0)
        v30 = HIBYTE(v45) & 0x7F;
      else
        v30 = *((_QWORD *)&__dst + 1);
      inserted = llvm::Module::getOrInsertComdat(*((_QWORD *)this + 41), v29, v30);
    }
    else
    {
      inserted = (size_t *)(*v20 + 8);
    }
    v4 = 0;
    *((_DWORD *)inserted + 2) = v35;
    goto LABEL_6;
  }
  std::operator+<char>();
  v33 = std::string::append(&v39, "'");
  v34 = v33->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
  v41 = v34;
  v33->__r_.__value_.__l.__size_ = 0;
  v33->__r_.__value_.__r.__words[2] = 0;
  v33->__r_.__value_.__r.__words[0] = 0;
  v43 = 260;
  v42[0] = __p;
  v4 = llvm::LLLexer::Error((uint64_t)v2, v3, (llvm::Twine *)v42);
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
LABEL_6:
  if (SHIBYTE(v45) < 0)
    operator delete((void *)__dst);
  return v4;
}

uint64_t llvm::LLParser::parseStandaloneMetadata(llvm::LLParser *this)
{
  llvm::LLLexer *v2;
  int v4;
  const char *v5;
  int v6;
  char *v7;
  uint64_t *v8;
  unsigned int v9;
  BOOL v10;
  char **v11;
  uint64_t *v12;
  unsigned int v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t v17;
  const char *v18;
  __int16 v19;
  llvm::Metadata *v20;
  unsigned int v21;

  v2 = (llvm::LLParser *)((char *)this + 168);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  v21 = 0;
  if ((llvm::LLParser::parseUInt32(this, &v21) & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 3, "expected '=' here") & 1) != 0)
  {
    return 1;
  }
  v4 = *((_DWORD *)this + 56);
  if (v4 == 455)
  {
    v5 = "unexpected type in metadata definition";
    goto LABEL_7;
  }
  v6 = *((_DWORD *)this + 56);
  if (v4 == 348)
  {
    v6 = llvm::LLLexer::LexToken(v2);
    *((_DWORD *)this + 56) = v6;
  }
  v20 = 0;
  if (v6 != 441)
  {
    if ((llvm::LLParser::parseToken((uint64_t)this, 14, "Expected '!' here") & 1) == 0
      && (llvm::LLParser::parseMDTuple((uint64_t **)this, &v20, v4 == 348) & 1) == 0)
    {
      goto LABEL_12;
    }
    return 1;
  }
  if ((llvm::LLParser::parseSpecializedMDNode((char **)this, &v20, v4 == 348) & 1) != 0)
    return 1;
LABEL_12:
  v7 = (char *)*((_QWORD *)this + 121);
  if (v7)
  {
    v8 = (uint64_t *)((char *)this + 968);
    do
    {
      v9 = *((_DWORD *)v7 + 8);
      v10 = v9 >= v21;
      if (v9 >= v21)
        v11 = (char **)v7;
      else
        v11 = (char **)(v7 + 8);
      if (v10)
        v8 = (uint64_t *)v7;
      v7 = *v11;
    }
    while (*v11);
    if (v8 != (uint64_t *)((char *)this + 968) && v21 >= *((_DWORD *)v8 + 8))
    {
      v15 = (uint64_t **)((char *)this + 960);
      v16 = v8;
      v17 = *(_QWORD *)(v8[5] + 16);
      if ((v17 & 4) != 0)
        llvm::ReplaceableMetadataImpl::replaceAllUsesWith((llvm::ReplaceableMetadataImpl *)(v17 & 0xFFFFFFFFFFFFFFF8), v20);
      sub_1C61CE65C(v15, v16);
      return 0;
    }
  }
  v12 = (uint64_t *)*((_QWORD *)this + 118);
  if (!v12)
  {
LABEL_28:
    v14 = sub_1C4FCE2AC((uint64_t **)this + 117, v21, &v21);
    sub_1C4FCE378((unsigned __int8 **)v14 + 5, (unsigned __int8 *)v20);
    return 0;
  }
  while (1)
  {
    v13 = *((_DWORD *)v12 + 8);
    if (v21 >= v13)
      break;
LABEL_27:
    v12 = (uint64_t *)*v12;
    if (!v12)
      goto LABEL_28;
  }
  if (v13 < v21)
  {
    ++v12;
    goto LABEL_27;
  }
  v5 = "Metadata id is already used";
LABEL_7:
  v18 = v5;
  v19 = 259;
  return llvm::LLLexer::Error((uint64_t)v2, *((char **)this + 27), (llvm::Twine *)&v18);
}

uint64_t llvm::LLParser::parseNamedMetadata(llvm::LLParser *this)
{
  llvm::LLLexer *v2;
  _OWORD *v3;
  uint64_t v4;
  unsigned __int8 *v6;
  size_t v7;
  uint64_t inserted;
  int v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  size_t v13;
  const void *v15;
  size_t v16;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  llvm::MDNode **v21;
  uint64_t v22;
  unsigned __int8 *v23[4];
  __int16 v24;
  llvm::MDNode *v25;
  void *__p[2];
  uint64_t v27;

  v2 = (llvm::LLParser *)((char *)this + 168);
  v3 = (_OWORD *)((char *)this + 232);
  if (*((char *)this + 255) < 0)
  {
    sub_1C47EBC30(__p, *((void **)this + 29), *((_QWORD *)this + 30));
  }
  else
  {
    *(_OWORD *)__p = *v3;
    v27 = *((_QWORD *)this + 31);
  }
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v2);
  if ((llvm::LLParser::parseToken((uint64_t)this, 3, "expected '=' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 14, "Expected '!' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 8, "Expected '{' here") & 1) != 0)
  {
LABEL_5:
    v4 = 1;
    goto LABEL_6;
  }
  if (v27 >= 0)
    v6 = (unsigned __int8 *)__p;
  else
    v6 = (unsigned __int8 *)__p[0];
  if (v27 >= 0)
    v7 = HIBYTE(v27) & 0x7F;
  else
    v7 = (size_t)__p[1];
  inserted = llvm::Module::getOrInsertNamedMetadata(*((_QWORD *)this + 41), v6, v7);
  v9 = *((_DWORD *)this + 56);
  if (v9 == 9)
  {
LABEL_54:
    v22 = llvm::LLParser::parseToken((uint64_t)this, 9, "expected end of metadata node");
    goto LABEL_56;
  }
  while (1)
  {
    v25 = 0;
    if (v9 != 441)
      goto LABEL_45;
    v10 = *((unsigned __int8 *)this + 255);
    v11 = (v10 & 0x80u) == 0 ? v10 & 0x7F : *((_QWORD *)this + 30);
    if (v11 != 12)
      break;
    v12 = v3;
    if ((v10 & 0x80) != 0)
    {
      v12 = *(const void **)v3;
      v10 = *((_QWORD *)this + 30);
    }
    if (v10 >= 0xC)
      v13 = 12;
    else
      v13 = v10;
    if (!memcmp(v12, "DIExpression", v13) && v10 == 12)
    {
      if ((llvm::LLParser::parseDIExpression(this, &v25, 0) & 1) != 0)
        goto LABEL_5;
      goto LABEL_47;
    }
LABEL_45:
    if ((llvm::LLParser::parseToken((uint64_t)this, 14, "Expected '!' here") & 1) != 0
      || llvm::LLParser::parseMDNodeID(this, &v25))
    {
      goto LABEL_5;
    }
LABEL_47:
    v18 = (unsigned __int8 *)v25;
    v23[0] = (unsigned __int8 *)v25;
    v19 = *(_QWORD *)(inserted + 48);
    v20 = *(unsigned int *)(v19 + 8);
    if (v20 >= *(_DWORD *)(v19 + 12))
    {
      sub_1C5419FD8(*(_QWORD *)(inserted + 48), v23);
    }
    else
    {
      v21 = (llvm::MDNode **)(*(_QWORD *)v19 + 8 * v20);
      *v21 = v25;
      if (v18)
      {
        llvm::MetadataTracking::track((uint64_t)v21, v18, 2);
        LODWORD(v20) = *(_DWORD *)(v19 + 8);
      }
      *(_DWORD *)(v19 + 8) = v20 + 1;
    }
    if (*((_DWORD *)this + 56) != 4)
      goto LABEL_54;
    v9 = llvm::LLLexer::LexToken(v2);
    *((_DWORD *)this + 56) = v9;
  }
  if (v11 != 9)
    goto LABEL_45;
  v15 = v3;
  if ((v10 & 0x80) != 0)
  {
    v15 = *(const void **)v3;
    v10 = *((_QWORD *)this + 30);
  }
  v16 = v10 >= 9 ? 9 : v10;
  if (memcmp(v15, "DIArgList", v16) || v10 != 9)
    goto LABEL_45;
  v23[0] = "found DIArgList outside of function";
  v24 = 259;
  v22 = llvm::LLLexer::Error((uint64_t)v2, *((char **)this + 27), (llvm::Twine *)v23);
LABEL_56:
  v4 = v22;
LABEL_6:
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
  return v4;
}

uint64_t llvm::LLParser::parseUseListOrderBB(llvm::LLParser *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const char *v18;
  const llvm::APInt *v19;
  int v20;
  __int16 v21;
  void *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 __p;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  char v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;
  char v40;
  uint64_t v41;
  char v42;
  int v43;
  char *v44;
  unsigned int v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 168;
  v3 = (char *)*((_QWORD *)this + 27);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  v43 = 0;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0;
  v50 = 0;
  v44 = 0;
  v4 = 1;
  v51 = 1;
  v52 = 0;
  LODWORD(v23) = 64;
  v22 = 0;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v26, (const llvm::APInt **)&v22);
  v53 = v26;
  v54 = v27;
  v55 = v28;
  v56 = v29 & 0xF;
  v57 = 0;
  v58 = 0;
  LODWORD(v26) = 0;
  v30 = 0u;
  v31 = 0u;
  __p = 0u;
  v33 = 0;
  v34 = 0;
  v27 = 0;
  v35 = 1;
  v36 = 0;
  v20 = 64;
  v19 = 0;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v22, &v19);
  v37 = v22;
  v38 = v23;
  v39 = v24;
  v40 = v25 & 0xF;
  v41 = 0;
  v42 = 0;
  v22 = &v24;
  v23 = 0x1000000000;
  if ((llvm::LLParser::parseValID((uint64_t **)this, (uint64_t)&v43, 0, 0) & 1) == 0
    && (llvm::LLParser::parseToken((uint64_t)this, 4, "expected comma in uselistorder_bb directive") & 1) == 0
    && (llvm::LLParser::parseValID((uint64_t **)this, (uint64_t)&v26, 0, 0) & 1) == 0
    && (llvm::LLParser::parseToken((uint64_t)this, 4, "expected comma in uselistorder_bb directive") & 1) == 0
    && (llvm::LLParser::parseUseListOrderIndexes((uint64_t)this, (uint64_t)&v22) & 1) == 0)
  {
    if (v43 == 1)
    {
      v11 = *((_QWORD *)this + 129);
      if (v45 >= (unint64_t)((*((_QWORD *)this + 130) - v11) >> 3))
        goto LABEL_58;
      v10 = *(_QWORD *)(v11 + 8 * v45);
    }
    else
    {
      if (v43 != 3)
        goto LABEL_59;
      if (v47 >= 0)
        v8 = (unsigned __int8 *)&v46 + 8;
      else
        v8 = (unsigned __int8 *)*((_QWORD *)&v46 + 1);
      if (v47 >= 0)
        v9 = HIBYTE(v47) & 0x7F;
      else
        v9 = v47;
      v10 = sub_1C4FB7E80(*(uint64_t **)(*((_QWORD *)this + 41) + 112), v8, v9);
    }
    if (v10)
    {
      if (!*(_BYTE *)(v10 + 16))
      {
        if (*(_QWORD *)(v10 + 72) == v10 + 72 && (*(_BYTE *)(v10 + 34) & 0x80) == 0)
        {
          v17 = v44;
          v18 = "invalid declaration in uselistorder_bb";
        }
        else if ((_DWORD)v26 == 2)
        {
          v12 = *(uint64_t **)(v10 + 104);
          if (v31 >= 0)
            v13 = (unsigned __int8 *)&v30 + 8;
          else
            v13 = (unsigned __int8 *)*((_QWORD *)&v30 + 1);
          if (v31 >= 0)
            v14 = HIBYTE(v31) & 0x7F;
          else
            v14 = v31;
          v15 = sub_1C4FB7E80(v12, v13, v14);
          if (v15)
          {
            if (*(_BYTE *)(v15 + 16) == 22)
            {
              v16 = llvm::LLParser::sortUseListOrder((uint64_t)this, v15, (uint64_t)v22, v23, v3);
LABEL_65:
              v4 = v16;
              goto LABEL_2;
            }
            v17 = (char *)v27;
            v18 = "expected basic block in uselistorder_bb";
          }
          else
          {
            v17 = (char *)v27;
            v18 = "invalid basic block in uselistorder_bb";
          }
        }
        else
        {
          v17 = (char *)v27;
          if ((_DWORD)v26)
            v18 = "expected basic block name in uselistorder_bb";
          else
            v18 = "invalid numeric label in uselistorder_bb";
        }
LABEL_64:
        v19 = (const llvm::APInt *)v18;
        v21 = 259;
        v16 = llvm::LLLexer::Error((uint64_t)v2, v17, (llvm::Twine *)&v19);
        goto LABEL_65;
      }
LABEL_59:
      v17 = v44;
      v18 = "expected function name in uselistorder_bb";
      goto LABEL_64;
    }
LABEL_58:
    v17 = v44;
    v18 = "invalid function forward reference in uselistorder_bb";
    goto LABEL_64;
  }
LABEL_2:
  if (v22 != &v24)
    free(v22);
  v5 = v41;
  v41 = 0;
  if (v5)
    MEMORY[0x1CAA32F9C](v5, 0x20C8093837F09);
  if (v37 == (_DWORD *)&unk_1C866F1C0)
  {
    sub_1C4773C74(&v38);
  }
  else if ((v37[2] - 64) <= 0xFFFFFF7F && v38)
  {
    MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
  }
  if (v35 >= 0x41 && v34)
    MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
  if (SHIBYTE(v33) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v31) < 0)
    operator delete(*((void **)&v30 + 1));
  v6 = v57;
  v57 = 0;
  if (v6)
    MEMORY[0x1CAA32F9C](v6, 0x20C8093837F09);
  if ((_UNKNOWN *)v53 == &unk_1C866F1C0)
  {
    sub_1C4773C74(&v54);
  }
  else if ((*(_DWORD *)(v53 + 8) - 64) <= 0xFFFFFF7F && v54)
  {
    MEMORY[0x1CAA32F9C](v54, 0x1000C8000313F17);
  }
  if (v51 >= 0x41 && v50)
    MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
  if (SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  if (SHIBYTE(v47) < 0)
    operator delete(*((void **)&v46 + 1));
  return v4;
}

void LLVMAppendModuleInlineAsm_0(uint64_t a1, const std::string::value_type *a2, std::string::size_type a3)
{
  std::string *v4;
  uint64_t v5;
  std::string *v6;

  v4 = (std::string *)(a1 + 88);
  std::string::append((std::string *)(a1 + 88), a2, a3);
  if (*(char *)(a1 + 111) < 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    if (!v5)
      return;
    v6 = (std::string *)v4->__r_.__value_.__r.__words[0];
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 111);
    if (!*(_BYTE *)(a1 + 111))
      return;
    v6 = v4;
  }
  if (v6->__r_.__value_.__s.__data_[v5 - 1] != 10)
    std::string::push_back(v4, 10);
}

double LLVMSetSourceFileName_0(uint64_t a1, void *__src, size_t __len)
{
  __int128 *p_dst;
  size_t v7;
  size_t v8;
  void **v9;
  double result;
  __int128 __dst;
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    p_dst = (__int128 *)operator new(v7 + 1);
    *((_QWORD *)&__dst + 1) = __len;
    v12 = v8 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  *((_BYTE *)p_dst + __len) = 0;
  v9 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0)
    operator delete(*v9);
  result = *(double *)&__dst;
  *(_OWORD *)v9 = __dst;
  *(_QWORD *)(a1 + 208) = v12;
  return result;
}

uint64_t llvm::LLParser::parseStructDefinition(llvm::LLParser *a1, char *a2, unsigned __int8 *a3, size_t a4, unint64_t *a5, llvm::Type **a6)
{
  BOOL v8;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[16];
  __int16 v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*a5)
    v8 = a5[1] == 0;
  else
    v8 = 0;
  if (v8)
  {
    v21 = "redefinition of type";
    v24 = 259;
    v17 = (uint64_t)a1 + 168;
    return llvm::LLLexer::Error(v17, a2, (llvm::Twine *)&v21);
  }
  v13 = *((_DWORD *)a1 + 56);
  if (v13 == 243)
  {
    *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)a1 + 168));
    a5[1] = 0;
    v14 = *a5;
    if (!*a5)
    {
      v14 = llvm::StructType::create(*(_QWORD **)a1, a3, a4);
      *a5 = v14;
    }
    v15 = 0;
    *a6 = (llvm::Type *)v14;
    return v15;
  }
  v19 = *((_DWORD *)a1 + 56);
  if (v13 == 10)
  {
    v19 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)a1 + 168));
    *((_DWORD *)a1 + 56) = v19;
  }
  if (v19 == 8)
  {
    a5[1] = 0;
    v20 = *a5;
    if (!*a5)
    {
      v20 = llvm::StructType::create(*(_QWORD **)a1, a3, a4);
      *a5 = v20;
    }
    v21 = v23;
    v22 = 0x800000000;
    if ((llvm::LLParser::parseStructBody((uint64_t)a1, (uint64_t)&v21) & 1) != 0
      || v13 == 10 && (llvm::LLParser::parseToken((uint64_t)a1, 11, "expected '>' in packed struct") & 1) != 0)
    {
      v15 = 1;
    }
    else
    {
      llvm::StructType::setBody(v20, (uint64_t)v21, v22, v13 == 10);
      v15 = 0;
      *a6 = (llvm::Type *)v20;
    }
    if (v21 != v23)
      free(v21);
    return v15;
  }
  if (*a5)
  {
    v17 = (uint64_t)a1 + 168;
    v21 = "forward references to non-struct type";
    v24 = 259;
    return llvm::LLLexer::Error(v17, a2, (llvm::Twine *)&v21);
  }
  *a6 = 0;
  if (v13 != 10)
  {
    v21 = "expected type";
    v24 = 259;
    return llvm::LLParser::parseType(a1, a6, (const llvm::Twine *)&v21, 0);
  }
  return llvm::LLParser::parseArrayVectorType(a1, a6, 1);
}

uint64_t llvm::LLParser::parseMetadataAttachment(llvm::LLParser *this, unsigned int *a2, llvm::MDNode **a3)
{
  llvm::LLLexer *v6;
  unsigned __int8 *v7;
  size_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v12;

  v6 = (llvm::LLParser *)((char *)this + 168);
  if (*((char *)this + 255) < 0)
  {
    sub_1C47EBC30(__p, *((void **)this + 29), *((_QWORD *)this + 30));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)((char *)this + 232);
    v12 = *((_QWORD *)this + 31);
  }
  if (v12 >= 0)
    v7 = (unsigned __int8 *)__p;
  else
    v7 = (unsigned __int8 *)__p[0];
  if (v12 >= 0)
    v8 = HIBYTE(v12) & 0x7F;
  else
    v8 = (size_t)__p[1];
  *a2 = llvm::LLVMContext::getMDKindID(**((uint64_t ***)this + 41), v7, v8);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v6);
  v9 = llvm::LLParser::parseMDNode((char **)this, a3);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  return v9;
}

uint64_t llvm::LLParser::parseFunctionHeader(llvm::LLParser *this, llvm::Function **a2, int a3)
{
  char *v6;
  uint64_t v7;
  char *v9;
  char *v10;
  char *v11;
  llvm::Type *v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  int v22;
  __int16 v23;
  int v24;
  std::string *v25;
  size_t v26;
  int v27;
  uint64_t Attribute;
  unint64_t v29;
  unsigned int v30;
  llvm::ValueAsMetadata *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t Sorted;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::PointerType *v48;
  llvm::Type *v49;
  llvm::Type *v50;
  std::string::size_type size;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  unsigned int v56;
  BOOL v57;
  char **v58;
  uint64_t v59;
  uint64_t *v60;
  llvm::Function *v61;
  std::string::size_type v62;
  llvm::Function **v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  llvm::Function **v72;
  char *v73;
  llvm::Function *v74;
  char v75;
  int v76;
  unsigned int v77;
  llvm::Function *v78;
  char v79;
  int v80;
  unsigned int v81;
  llvm::Function *v82;
  int v83;
  llvm::Function *v84;
  std::string *v85;
  size_t v86;
  int v87;
  llvm::Function *v88;
  llvm::Function *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  llvm::Function **v95;
  llvm::Function *v96;
  std::string *v97;
  size_t v98;
  llvm::Function *v99;
  __int16 v100;
  uint64_t v101;
  uint64_t v102;
  llvm::Function *v103;
  llvm::Constant *v104;
  __int16 v105;
  __int16 v106;
  llvm::Function *v107;
  __int16 v108;
  uint64_t **v109;
  llvm::Function *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t ***v113;
  char *v114;
  uint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t ****v121;
  uint64_t ***v122;
  int v123;
  int v124;
  uint64_t ***v125;
  char *v126;
  size_t v127;
  size_t v128;
  char *v129;
  char *v130;
  char *v131;
  char *v132;
  char v133;
  int v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  llvm::Function **v138;
  int v139;
  BOOL v140;
  unsigned int v141;
  llvm::Function **v142;
  uint64_t *v143;
  uint64_t v144;
  llvm::Type *v145;
  std::string::size_type v146;
  int v147;
  char *v148;
  std::string *v149;
  void **v150;
  uint64_t v151;
  char *v152;
  void *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  _QWORD *v157;
  uint64_t v158;
  std::string *p_str;
  unint64_t v160;
  uint64_t v161;
  std::string *v162;
  unint64_t v163;
  void *v164;
  char *v165;
  char *v166;
  std::string *v167;
  std::string::size_type v168;
  void **v169;
  std::string::size_type v170;
  std::string *v171;
  std::string::size_type v172;
  std::string *v173;
  std::string::size_type v174;
  void **v175;
  std::string::size_type v176;
  std::string *v177;
  std::string::size_type v178;
  std::string *v179;
  void **v180;
  std::string *v181;
  void **v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  llvm::ValueAsMetadata *v187;
  llvm::Type **v188;
  char *v189;
  char v190;
  int v191;
  llvm::Function **v192;
  char *v193;
  llvm::LLParser *v194;
  void *__dst[2];
  uint64_t v196;
  std::string v197;
  __int16 v198;
  std::string v199;
  __int16 v200;
  std::string v201;
  __int16 v202;
  std::string v203;
  __int16 v204;
  void *v205[2];
  void **v206;
  __int16 v207;
  void *v208[2];
  char v209;
  void *v210[2];
  char v211;
  std::string v212;
  llvm::Comdat *v213;
  llvm::Constant *v214;
  llvm::Constant *v215;
  llvm::Constant *v216;
  unsigned int v217[8];
  unsigned __int16 v218;
  std::string v219;
  std::string v220;
  char *v221;
  void *__src;
  char *v223;
  uint64_t v224;
  unsigned __int8 v225;
  std::string __str;
  llvm::Type *v227;
  BOOL v228;
  unsigned int v229;
  BOOL v230;
  unsigned int v231;
  unsigned int v232[2];
  uint64_t *v233[2];
  uint64_t *v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  char v241;
  _DWORD *v242;
  void *v243;
  int v244;
  char v245;
  uint64_t v246;
  char v247;
  void *v248;
  size_t __n;
  _BYTE v250[64];
  uint64_t v251;
  void *v252;
  uint64_t v253;
  _BYTE v254[64];
  char *v255;
  uint64_t v256;
  const char *v257;
  __int16 v258;
  uint64_t v259;
  uint64_t *v260;
  uint64_t v261;
  _QWORD v262[11];

  v262[8] = *MEMORY[0x1E0C80C00];
  v6 = (char *)*((_QWORD *)this + 27);
  *(_QWORD *)v232 = 0;
  v231 = 0;
  v230 = 0;
  v259 = **((_QWORD **)this + 41);
  v260 = v262;
  v261 = 0x800000000;
  v228 = 0;
  v227 = 0;
  if ((llvm::LLParser::parseOptionalLinkage(this, &v232[1], &v228, v232, &v231, &v230) & 1) != 0
    || (v229 = 0, (llvm::LLParser::parseOptionalCallingConv(this, &v229) & 1) != 0)
    || (llvm::LLParser::parseOptionalParamOrReturnAttrs(this, (llvm::AttrBuilder *)&v259, 0) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_3;
  }
  v9 = (char *)*((_QWORD *)this + 27);
  v255 = "expected type";
  v258 = 259;
  v7 = 1;
  if ((llvm::LLParser::parseType(this, &v227, (const llvm::Twine *)&v255, 1) & 1) == 0)
  {
    v10 = (char *)this + 168;
    if (v232[1] <= 0xA)
    {
      if (((1 << SLOBYTE(v232[1])) & 0x1BE) != 0)
      {
        if ((a3 & 1) == 0)
        {
          v11 = "invalid linkage for function declaration";
          goto LABEL_53;
        }
        if (v232[1] >= 7 && v232[0])
        {
          v11 = "symbol with local linkage must have default visibility";
LABEL_53:
          v255 = v11;
          v258 = 259;
          v17 = (char *)this + 168;
          v18 = v6;
          goto LABEL_54;
        }
      }
      else if (v232[1] == 9)
      {
        if (a3)
        {
          v11 = "invalid linkage for function definition";
          goto LABEL_53;
        }
      }
      else if (((1 << SLOBYTE(v232[1])) & 0x440) != 0)
      {
        v11 = "invalid function linkage type";
        goto LABEL_53;
      }
    }
    v12 = v227;
    v13 = *((unsigned __int8 *)v227 + 8);
    if (v13 == 8 || v13 == 14 || v13 == 9)
    {
      v255 = "invalid function return type";
      v258 = 259;
      v17 = (char *)this + 168;
      v18 = v9;
LABEL_54:
      v7 = llvm::LLLexer::Error((uint64_t)v17, v18, (llvm::Twine *)&v255);
      goto LABEL_3;
    }
    v14 = (char *)*((_QWORD *)this + 27);
    memset(&__str, 0, sizeof(__str));
    v15 = *((_DWORD *)this + 56);
    if (v15 == 433)
    {
      if ((uint64_t)(*((_QWORD *)this + 130) - *((_QWORD *)this + 129)) >> 3 == *((_DWORD *)this + 64))
        goto LABEL_26;
      v251 = (uint64_t)(*((_QWORD *)this + 130) - *((_QWORD *)this + 129)) >> 3;
      v233[0] = (uint64_t *)"function expected to be numbered '%";
      v234 = &v251;
      WORD4(v235) = 2563;
      v255 = (char *)v233;
      v257 = "'";
      v23 = 770;
    }
    else
    {
      if (v15 == 438)
      {
        std::string::operator=(&__str, (const std::string *)((char *)this + 232));
LABEL_26:
        v16 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
        *((_DWORD *)this + 56) = v16;
        if (v16 == 12)
        {
          v255 = (char *)&v257;
          v256 = 0x800000000;
          v225 = 0;
          v251 = **((_QWORD **)this + 41);
          v252 = v254;
          v253 = 0x800000000;
          v223 = 0;
          __src = 0;
          v224 = 0;
          v221 = 0;
          memset(&v220, 0, sizeof(v220));
          memset(&v219, 0, sizeof(v219));
          v218 = 0;
          memset(v217, 0, 28);
          v215 = 0;
          v216 = 0;
          v213 = 0;
          v214 = 0;
          if ((llvm::LLParser::parseArgumentList((uint64_t)this, (uint64_t)&v255, &v225) & 1) != 0)
          {
LABEL_28:
            v7 = 1;
LABEL_29:
            if (SHIBYTE(v217[6]) < 0)
              operator delete(*(void **)&v217[1]);
            if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v219.__r_.__value_.__l.__data_);
            if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v220.__r_.__value_.__l.__data_);
            if (__src)
              operator delete(__src);
            if (v252 != v254)
              free(v252);
            sub_1C4FCE9E8(&v255);
            goto LABEL_40;
          }
          v189 = v14;
          v192 = a2;
          v190 = a3;
          v194 = this;
          v21 = *((_DWORD *)this + 56);
          if (v21 == 41)
          {
            v22 = 128;
          }
          else
          {
            if (v21 != 42)
            {
              v191 = 0;
              goto LABEL_58;
            }
            v22 = 64;
          }
          v191 = v22;
          *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
LABEL_58:
          if ((llvm::LLParser::parseOptionalAddrSpace(this, v217, *(_DWORD *)(*((_QWORD *)this + 41) + 284)) & 1) != 0
            || (llvm::LLParser::parseFnAttributeValuePairs((uint64_t)this, (uint64_t)&v251, (uint64_t)&__src, 0, &v221) & 1) != 0)
          {
            goto LABEL_28;
          }
          v24 = *((_DWORD *)this + 56);
          if (v24 == 92)
          {
            *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
            if ((llvm::LLParser::parseStringConstant((uint64_t)this, &v220) & 1) != 0)
              goto LABEL_28;
            v24 = *((_DWORD *)this + 56);
          }
          if (v24 == 93)
          {
            *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
            if ((llvm::LLParser::parseStringConstant((uint64_t)this, &v219) & 1) != 0)
              goto LABEL_28;
          }
          v25 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__str
              : (std::string *)__str.__r_.__value_.__r.__words[0];
          v26 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F
              : __str.__r_.__value_.__l.__size_;
          if ((llvm::LLParser::parseOptionalComdat((uint64_t)this, v25, v26, (uint64_t *)&v213) & 1) != 0
            || (llvm::LLParser::parseOptionalAlignment((uint64_t)this, &v218, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
          v27 = *((_DWORD *)this + 56);
          if (v27 == 101)
          {
            *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
            if ((llvm::LLParser::parseStringConstant((uint64_t)this, (std::string *)&v217[1]) & 1) != 0)
              goto LABEL_28;
            v27 = *((_DWORD *)this + 56);
          }
          if (v27 == 102)
          {
            *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
            if ((llvm::LLParser::parseGlobalTypeAndValue(this, &v216) & 1) != 0)
              goto LABEL_28;
            v27 = *((_DWORD *)this + 56);
          }
          if (v27 == 103)
          {
            *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
            if ((llvm::LLParser::parseGlobalTypeAndValue(this, &v215) & 1) != 0)
              goto LABEL_28;
            v27 = *((_DWORD *)this + 56);
          }
          if (v27 == 315)
          {
            *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
            if ((llvm::LLParser::parseGlobalTypeAndValue(this, &v214) & 1) != 0)
              goto LABEL_28;
          }
          if (llvm::AttrBuilder::getAttribute((uint64_t)&v251, 4))
          {
            v233[0] = (uint64_t *)"'builtin' attribute not valid on function";
            WORD4(v235) = 259;
            v7 = llvm::LLLexer::Error((uint64_t)this + 168, v221, (llvm::Twine *)v233);
            goto LABEL_29;
          }
          Attribute = llvm::AttrBuilder::getAttribute((uint64_t)&v251, 74);
          if (Attribute)
          {
            v29 = *(_QWORD *)(Attribute + 16);
            if (v29)
            {
              v218 = __clz(v29) ^ 0x3F | 0x100;
              llvm::AttrBuilder::removeAttribute((uint64_t)&v251, 74);
            }
          }
          v248 = v250;
          __n = 0x800000000;
          v187 = (llvm::ValueAsMetadata *)v256;
          if ((_DWORD)v256)
          {
            v30 = 0;
            v31 = 0;
            v32 = 0;
            v193 = 0;
            v33 = 0;
            do
            {
              v34 = &v255[48 * (_QWORD)v31 + 8];
              if (v33 >= v32)
              {
                v35 = (v33 - v193) >> 3;
                v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 61)
                  goto LABEL_336;
                if ((v32 - v193) >> 2 > v36)
                  v36 = (v32 - v193) >> 2;
                if ((unint64_t)(v32 - v193) >= 0x7FFFFFFFFFFFFFF8)
                  v37 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v37 = v36;
                if (v37)
                {
                  if (v37 >> 61)
                    goto LABEL_337;
                  v38 = (char *)operator new(8 * v37);
                }
                else
                {
                  v38 = 0;
                }
                v39 = &v38[8 * v35];
                *(_QWORD *)v39 = *(_QWORD *)v34;
                v40 = v39 + 8;
                while (v33 != v193)
                {
                  v41 = *((_QWORD *)v33 - 1);
                  v33 -= 8;
                  *((_QWORD *)v39 - 1) = v41;
                  v39 -= 8;
                }
                v32 = &v38[8 * v37];
                if (v193)
                {
                  operator delete(v193);
                  v30 = __n;
                }
                v193 = v39;
                v33 = v40;
              }
              else
              {
                *(_QWORD *)v33 = *(_QWORD *)v34;
                v33 += 8;
              }
              v42 = *(_QWORD *)&v255[48 * (_QWORD)v31 + 16];
              if (v30 >= HIDWORD(__n))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v248, (uint64_t)v250, v30 + 1, 8);
                v30 = __n;
              }
              *((_QWORD *)v248 + v30) = v42;
              v30 = __n + 1;
              LODWORD(__n) = __n + 1;
              v31 = (llvm::ValueAsMetadata *)((char *)v31 + 1);
            }
            while (v31 != v187);
            v12 = v227;
          }
          else
          {
            v33 = 0;
            v193 = 0;
          }
          v43 = *(uint64_t **)v194;
          Sorted = llvm::AttributeSetNode::getSorted(*(uint64_t **)v194, (uint64_t *)v252, v253);
          v45 = llvm::AttributeSetNode::getSorted(*(uint64_t **)v194, v260, v261);
          v46 = llvm::AttributeList::get(v43, Sorted, v45, v248, __n);
          v47 = v46;
          if (v46)
          {
            if (*(_DWORD *)(v46 + 8) >= 3u)
            {
              v154 = *(_QWORD *)(v46 + 56);
              if (v154)
              {
                if ((*(_BYTE *)(v154 + 21) & 2) != 0 && *((_BYTE *)v12 + 8) != 7)
                {
                  v233[0] = (uint64_t *)"functions with 'sret' argument must return void";
                  WORD4(v235) = 259;
                  v155 = (uint64_t)v10;
                  v156 = v9;
LABEL_334:
                  v7 = llvm::LLLexer::Error(v155, v156, (llvm::Twine *)v233);
                  goto LABEL_223;
                }
              }
            }
          }
          v48 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)v12, (uint64_t *)v193, (v33 - v193) >> 3, v225);
          v49 = (llvm::Type *)v217[0];
          v50 = (llvm::Type *)llvm::PointerType::get(v48, (llvm::Type *)v217[0]);
          *v192 = 0;
          size = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = __str.__r_.__value_.__l.__size_;
          if (!size)
          {
            v52 = (char *)*((_QWORD *)v194 + 127);
            if (!v52)
              goto LABEL_123;
            v53 = *((_QWORD *)v194 + 130) - *((_QWORD *)v194 + 129);
            v54 = (unint64_t)v53 >> 3;
            v55 = (char *)v194 + 1016;
            do
            {
              v56 = *((_DWORD *)v52 + 8);
              v57 = v56 >= v54;
              if (v56 >= v54)
                v58 = (char **)v52;
              else
                v58 = (char **)(v52 + 8);
              if (v57)
                v55 = v52;
              v52 = *v58;
            }
            while (*v58);
            if (v55 == (char *)v194 + 1016 || *((_DWORD *)v55 + 8) > v54)
            {
LABEL_123:
              v188 = 0;
              goto LABEL_124;
            }
            v188 = (llvm::Type **)*((_QWORD *)v55 + 5);
            if (*v188 == v50)
            {
              sub_1C49C7D1C((uint64_t **)v194 + 126, (uint64_t *)v55);
              operator delete(v55);
              goto LABEL_124;
            }
            v208[0] = (void *)(v53 >> 3);
            v197.__r_.__value_.__r.__words[0] = (std::string::size_type)"type of definition and forward reference of '@";
            v197.__r_.__value_.__r.__words[2] = (std::string::size_type)v208;
            v198 = 2563;
            v199.__r_.__value_.__r.__words[0] = (std::string::size_type)&v197;
            v199.__r_.__value_.__r.__words[2] = (std::string::size_type)"' disagree: expected '";
            v200 = 770;
            sub_1C4FB7C44((uint64_t)&v212, v50);
            v201.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199;
            v201.__r_.__value_.__r.__words[2] = (std::string::size_type)&v212;
            v202 = 1026;
            v203.__r_.__value_.__r.__words[0] = (std::string::size_type)&v201;
            v203.__r_.__value_.__r.__words[2] = (std::string::size_type)"' but was '";
            v204 = 770;
            sub_1C4FB7C44((uint64_t)v210, *v188);
            v205[0] = &v203;
            v206 = v210;
            v207 = 1026;
            v233[0] = (uint64_t *)v205;
            v234 = (uint64_t *)"'";
            WORD4(v235) = 770;
            v7 = llvm::LLLexer::Error((uint64_t)v10, v189, (llvm::Twine *)v233);
            if ((v211 & 0x80000000) == 0)
            {
LABEL_328:
              if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_223;
              v153 = (void *)v212.__r_.__value_.__r.__words[0];
              goto LABEL_282;
            }
            v164 = v210[0];
LABEL_300:
            operator delete(v164);
            goto LABEL_328;
          }
          v144 = sub_1C61CE594((uint64_t)v194 + 984, &__str);
          if ((llvm::LLParser *)((char *)v194 + 992) != (llvm::LLParser *)v144)
          {
            v188 = *(llvm::Type ***)(v144 + 56);
            v145 = *v188;
            if (*((_QWORD *)*v188 + 3) && *(_BYTE *)(**((_QWORD **)v145 + 2) + 8) != 14)
            {
              v156 = *(char **)(v144 + 64);
              v233[0] = (uint64_t *)"invalid forward reference to function as global value!";
              WORD4(v235) = 259;
              v155 = (uint64_t)v10;
              goto LABEL_334;
            }
            if (v145 != v50)
            {
              v166 = *(char **)(v144 + 64);
              std::operator+<char>();
              v167 = std::string::append(&v212, "' with wrong type: expected '");
              v168 = v167->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v197.__r_.__value_.__l.__data_ = *(_OWORD *)&v167->__r_.__value_.__l.__data_;
              v197.__r_.__value_.__r.__words[2] = v168;
              v167->__r_.__value_.__l.__size_ = 0;
              v167->__r_.__value_.__r.__words[2] = 0;
              v167->__r_.__value_.__r.__words[0] = 0;
              sub_1C4FB7C44((uint64_t)v210, v50);
              if (v211 >= 0)
                v169 = v210;
              else
                v169 = (void **)v210[0];
              if (v211 >= 0)
                v170 = v211 & 0x7F;
              else
                v170 = (std::string::size_type)v210[1];
              v171 = std::string::append(&v197, (const std::string::value_type *)v169, v170);
              v172 = v171->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v199.__r_.__value_.__l.__data_ = *(_OWORD *)&v171->__r_.__value_.__l.__data_;
              v199.__r_.__value_.__r.__words[2] = v172;
              v171->__r_.__value_.__l.__size_ = 0;
              v171->__r_.__value_.__r.__words[2] = 0;
              v171->__r_.__value_.__r.__words[0] = 0;
              v173 = std::string::append(&v199, "' but was '");
              v174 = v173->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v201.__r_.__value_.__l.__data_ = *(_OWORD *)&v173->__r_.__value_.__l.__data_;
              v201.__r_.__value_.__r.__words[2] = v174;
              v173->__r_.__value_.__l.__size_ = 0;
              v173->__r_.__value_.__r.__words[2] = 0;
              v173->__r_.__value_.__r.__words[0] = 0;
              sub_1C4FB7C44((uint64_t)v208, *v188);
              if (v209 >= 0)
                v175 = v208;
              else
                v175 = (void **)v208[0];
              if (v209 >= 0)
                v176 = v209 & 0x7F;
              else
                v176 = (std::string::size_type)v208[1];
              v177 = std::string::append(&v201, (const std::string::value_type *)v175, v176);
              v178 = v177->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v203.__r_.__value_.__l.__data_ = *(_OWORD *)&v177->__r_.__value_.__l.__data_;
              v203.__r_.__value_.__r.__words[2] = v178;
              v177->__r_.__value_.__l.__size_ = 0;
              v177->__r_.__value_.__r.__words[2] = 0;
              v177->__r_.__value_.__r.__words[0] = 0;
              v179 = std::string::append(&v203, "'");
              v180 = (void **)v179->__r_.__value_.__r.__words[2];
              *(_OWORD *)v205 = *(_OWORD *)&v179->__r_.__value_.__l.__data_;
              v206 = v180;
              v179->__r_.__value_.__l.__size_ = 0;
              v179->__r_.__value_.__r.__words[2] = 0;
              v179->__r_.__value_.__r.__words[0] = 0;
              WORD4(v235) = 260;
              v233[0] = (uint64_t *)v205;
              v7 = llvm::LLLexer::Error((uint64_t)v10, v166, (llvm::Twine *)v233);
              if (SHIBYTE(v206) < 0)
                operator delete(v205[0]);
              if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v203.__r_.__value_.__l.__data_);
              if (v209 < 0)
                operator delete(v208[0]);
              if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v201.__r_.__value_.__l.__data_);
              if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v199.__r_.__value_.__l.__data_);
              if (v211 < 0)
                operator delete(v210[0]);
              if ((SHIBYTE(v197.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_328;
              v164 = (void *)v197.__r_.__value_.__r.__words[0];
              goto LABEL_300;
            }
            sub_1C4FCE3CC((_QWORD *)v194 + 123, v144);
LABEL_124:
            WORD4(v235) = 260;
            v233[0] = (uint64_t *)&__str;
            v59 = *((_QWORD *)v194 + 41);
            v60 = (uint64_t *)operator new(0x80uLL);
            v61 = (llvm::Function *)(v60 + 1);
            *((_DWORD *)v60 + 7) = *((_DWORD *)v60 + 7) & 0x38000000 | 0x40000000;
            *v60 = 0;
            llvm::Function::Function(v60 + 1, v48, 0, v49, (uint64_t)v233, v59);
            *v192 = v61;
            v62 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v62 = __str.__r_.__value_.__l.__size_;
            if (!v62)
            {
              v63 = (llvm::Function **)*((_QWORD *)v194 + 130);
              v64 = *((_QWORD *)v194 + 131);
              if ((unint64_t)v63 >= v64)
              {
                v66 = (_QWORD *)*((_QWORD *)v194 + 129);
                v67 = v63 - (llvm::Function **)v66;
                v68 = v67 + 1;
                if ((unint64_t)(v67 + 1) >> 61)
LABEL_336:
                  abort();
                v69 = v64 - (_QWORD)v66;
                if (v69 >> 2 > v68)
                  v68 = v69 >> 2;
                if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
                  v70 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v70 = v68;
                if (v70)
                {
                  if (v70 >> 61)
LABEL_337:
                    sub_1C4764EE4();
                  v71 = (char *)operator new(8 * v70);
                }
                else
                {
                  v71 = 0;
                }
                v72 = (llvm::Function **)&v71[8 * v67];
                v73 = &v71[8 * v70];
                *v72 = v61;
                v65 = v72 + 1;
                if (v63 != v66)
                {
                  do
                  {
                    v74 = *--v63;
                    *--v72 = v74;
                  }
                  while (v63 != v66);
                  v63 = (llvm::Function **)*((_QWORD *)v194 + 129);
                }
                *((_QWORD *)v194 + 129) = v72;
                *((_QWORD *)v194 + 130) = v65;
                *((_QWORD *)v194 + 131) = v73;
                if (v63)
                  operator delete(v63);
              }
              else
              {
                *v63 = v61;
                v65 = v63 + 1;
              }
              *((_QWORD *)v194 + 130) = v65;
              v61 = *v192;
            }
            v75 = v232[1];
            v76 = *((_DWORD *)v61 + 8);
            if (v232[1] - 7 < 2)
              v76 &= 0xFFFFFFCF;
            v77 = v76 & 0xFFFFFFF0 | v232[1] & 0xF;
            *((_DWORD *)v61 + 8) = v77;
            if ((v75 & 0xFu) - 7 >= 2)
            {
              if ((v76 & 0x30) == 0 || (llvm::GlobalValue::hasExternalWeakLinkage(v61) & 1) != 0)
              {
LABEL_153:
                if (v230)
                  *((_DWORD *)*v192 + 8) |= 0x4000u;
                v78 = *v192;
                v79 = v232[0];
                v80 = *((_DWORD *)*v192 + 8) & 0xF;
                v81 = *((_DWORD *)*v192 + 8) & 0xFFFFFFCF | (16 * (v232[0] & 3));
                *((_DWORD *)*v192 + 8) = v81;
                if ((v80 - 7) >= 2)
                {
                  if (!(16 * (v79 & 3)) || (llvm::GlobalValue::hasExternalWeakLinkage(v78) & 1) != 0)
                    goto LABEL_157;
                  v81 = *((_DWORD *)v78 + 8);
                }
                *((_DWORD *)v78 + 8) = v81 | 0x4000;
LABEL_157:
                *((_DWORD *)*v192 + 8) = *((_DWORD *)*v192 + 8) & 0xFFFFFCFF | ((v231 & 3) << 8);
                v82 = *v192;
                *((_WORD *)v82 + 9) = *((_WORD *)*v192 + 9) & 0xC00F | (16 * v229);
                *((_QWORD *)v82 + 14) = v47;
                *((_DWORD *)*v192 + 8) = *((_DWORD *)*v192 + 8) & 0xFFFFFF3F | v191;
                if (v218 >= 0x100u)
                  v83 = (v218 << 16) + 0x10000;
                else
                  v83 = 0;
                *((_DWORD *)*v192 + 8) = v83 | *((_DWORD *)*v192 + 8) & 0xFFC0FFFF;
                v84 = *v192;
                if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v85 = &v220;
                else
                  v85 = (std::string *)v220.__r_.__value_.__r.__words[0];
                if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v86 = *((_BYTE *)&v220.__r_.__value_.__s + 23) & 0x7F;
                else
                  v86 = v220.__r_.__value_.__l.__size_;
                v87 = *((_DWORD *)v84 + 8);
                if ((v87 & 0x400000) == 0 && !v86)
                  goto LABEL_173;
                if (v86)
                {
                  v85 = (std::string *)llvm::UniqueStringSaver::save(***(_QWORD ***)v84 + 2136, v85, v86);
                  v89 = v88;
                }
                else
                {
                  v89 = 0;
                }
                v90 = ***(_QWORD ***)v84;
                v233[0] = (uint64_t *)v84;
                v91 = *(_DWORD *)(v90 + 2520);
                if (v91)
                {
                  v92 = *(_QWORD *)(v90 + 2504);
                  v93 = v91 - 1;
                  v94 = v93 & ((v84 >> 4) ^ (v84 >> 9));
                  v95 = (llvm::Function **)(v92 + 24 * v94);
                  v96 = *v95;
                  if (*v95 == v84)
                  {
LABEL_172:
                    v95[1] = (llvm::Function *)v85;
                    v95[2] = v89;
                    *((_DWORD *)v84 + 8) = *((_DWORD *)v84 + 8) & 0xFFBFFFFF | ((v89 != 0) << 22);
                    v84 = *v192;
                    v87 = *((_DWORD *)*v192 + 8);
LABEL_173:
                    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v97 = &v219;
                    else
                      v97 = (std::string *)v219.__r_.__value_.__r.__words[0];
                    if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v98 = *((_BYTE *)&v219.__r_.__value_.__s + 23) & 0x7F;
                    else
                      v98 = v219.__r_.__value_.__l.__size_;
                    if ((v87 & 0x8000) != 0 || v98)
                    {
                      if (v98)
                      {
                        v97 = (std::string *)llvm::UniqueStringSaver::save(***(_QWORD ***)v84 + 2136, v97, v98);
                        v183 = v184;
                      }
                      else
                      {
                        v183 = 0;
                      }
                      v185 = ***(_QWORD ***)v84 + 2528;
                      v233[0] = (uint64_t *)v84;
                      v186 = sub_1C617A140(v185, (uint64_t *)v233);
                      v186[1] = v97;
                      v186[2] = v183;
                      *((_DWORD *)v84 + 8) = *((_DWORD *)v84 + 8) & 0xFFFF7FFF | ((v183 != 0) << 15);
                      v84 = *v192;
                    }
                    llvm::GlobalObject::setComdat(v84, v213);
                    v99 = *v192;
                    v100 = v214 != 0;
                    sub_1C53D1F60(*v192, (uint64_t)v214);
                    *((_WORD *)v99 + 9) = *((_WORD *)v99 + 9) & 0xFFF7 | (8 * v100);
                    v101 = HIBYTE(v217[6]) & 0x7F;
                    if ((v217[6] & 0x80000000) != 0)
                      v101 = *(_QWORD *)&v217[3];
                    if (v101)
                    {
                      v102 = (uint64_t)*v192;
                      if (SHIBYTE(v217[6]) < 0)
                      {
                        sub_1C47EBC30(__dst, *(void **)&v217[1], *(unint64_t *)&v217[3]);
                      }
                      else
                      {
                        *(_OWORD *)__dst = *(_OWORD *)&v217[1];
                        v196 = *(_QWORD *)&v217[5];
                      }
                      llvm::Function::setGC(v102, (uint64_t)__dst);
                      if (SHIBYTE(v196) < 0)
                        operator delete(__dst[0]);
                    }
                    v103 = *v192;
                    v104 = v216;
                    sub_1C53D2064(*v192, (uint64_t)v216);
                    v105 = *((_WORD *)v103 + 9);
                    if (v104)
                      v106 = v105 | 2;
                    else
                      v106 = v105 & 0xFFFD;
                    *((_WORD *)v103 + 9) = v106;
                    v107 = *v192;
                    v108 = v215 != 0;
                    sub_1C53D2170(*v192, (uint64_t)v215);
                    *((_WORD *)v107 + 9) = *((_WORD *)v107 + 9) & 0xFFFB | (4 * v108);
                    v233[0] = (uint64_t *)*v192;
                    v109 = sub_1C4FCE454((uint64_t **)v194 + 139, (unint64_t)v233[0], v233);
                    sub_1C4FCE520(v109 + 5, (char *)__src, v223, (v223 - (_BYTE *)__src) >> 2);
                    v110 = *v192;
                    if ((*((_WORD *)*v192 + 9) & 1) != 0)
                      llvm::Function::BuildLazyArguments(*v192);
                    v111 = v256;
                    if ((_DWORD)v256)
                    {
                      v112 = 0;
                      v113 = (uint64_t ***)*((_QWORD *)v110 + 11);
                      v114 = v255;
                      while (1)
                      {
                        v116 = (unint64_t)&v114[48 * v112];
                        v115 = (uint64_t *)(v116 + 24);
                        LODWORD(v116) = *(char *)(v116 + 47);
                        if ((v116 & 0x80000000) != 0)
                          v116 = v115[1];
                        else
                          v116 = v116;
                        if (!v116)
                          goto LABEL_216;
                        WORD4(v235) = 260;
                        v233[0] = v115;
                        llvm::Value::setName(v113, (uint64_t)v233);
                        if ((*((_BYTE *)v113 + 23) & 0x10) != 0)
                          break;
                        v127 = 0;
                        v126 = &byte_1C871356D;
LABEL_208:
                        v114 = v255;
                        v129 = &v255[48 * v112];
                        v132 = (char *)*((_QWORD *)v129 + 3);
                        v131 = v129 + 24;
                        v130 = v132;
                        v133 = v131[23];
                        v134 = v133;
                        if (v133 >= 0)
                          v135 = v131;
                        else
                          v135 = v130;
                        v136 = *((_QWORD *)v131 + 1);
                        v137 = v133 & 0x7F;
                        if (v134 >= 0)
                          v136 = v137;
                        if (v127 != v136 || v127 && memcmp(v126, v135, v127))
                        {
                          v148 = *(char **)&v114[48 * v112];
                          std::operator+<char>();
                          v149 = std::string::append(&v203, "'");
                          v150 = (void **)v149->__r_.__value_.__r.__words[2];
                          *(_OWORD *)v205 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
                          v206 = v150;
                          v149->__r_.__value_.__l.__size_ = 0;
                          v149->__r_.__value_.__r.__words[2] = 0;
                          v149->__r_.__value_.__r.__words[0] = 0;
                          WORD4(v235) = 260;
                          v233[0] = (uint64_t *)v205;
                          v151 = (uint64_t)v10;
                          v152 = v148;
                          goto LABEL_260;
                        }
LABEL_216:
                        ++v112;
                        v113 += 5;
                        if (v112 == v111)
                          goto LABEL_219;
                      }
                      v117 = ***v113;
                      v118 = *(_QWORD *)(v117 + 152);
                      v119 = *(unsigned int *)(v117 + 168);
                      if ((_DWORD)v119)
                      {
                        LODWORD(v120) = (v119 - 1) & ((v113 >> 4) ^ (v113 >> 9));
                        v121 = (uint64_t ****)(v118 + 16 * v120);
                        v122 = *v121;
                        if (*v121 == v113)
                        {
LABEL_207:
                          v125 = v121[1];
                          v128 = (size_t)*v125;
                          v126 = (char *)(v125 + 2);
                          v127 = v128;
                          goto LABEL_208;
                        }
                        v123 = 1;
                        while (v122 != (uint64_t ***)-4096)
                        {
                          v124 = v120 + v123++;
                          v120 = v124 & (v119 - 1);
                          v122 = *(uint64_t ****)(v118 + 16 * v120);
                          if (v122 == v113)
                          {
                            v121 = (uint64_t ****)(v118 + 16 * v120);
                            goto LABEL_207;
                          }
                        }
                      }
                      v121 = (uint64_t ****)(v118 + 16 * v119);
                      goto LABEL_207;
                    }
LABEL_219:
                    if (v188)
                    {
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v188, *v192, (llvm::Value *)1);
                      llvm::GlobalValue::eraseFromParent((llvm::GlobalValue *)v188);
                    }
                    if ((v190 & 1) != 0)
                    {
                      v7 = 0;
LABEL_223:
                      if (v248 != v250)
                        free(v248);
                      if (v193)
                        operator delete(v193);
                      goto LABEL_29;
                    }
                    LODWORD(v233[0]) = 0;
                    v235 = 0u;
                    v236 = 0u;
                    v237 = 0u;
                    v239 = 0;
                    v233[1] = 0;
                    v238 = 0;
                    v240 = 1;
                    v241 = 0;
                    LODWORD(v203.__r_.__value_.__r.__words[1]) = 64;
                    v203.__r_.__value_.__r.__words[0] = 0;
                    llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v205, (const llvm::APInt **)&v203);
                    v242 = v205[0];
                    v243 = v205[1];
                    v244 = (int)v206;
                    v245 = v245 & 0xF0 | BYTE4(v206) & 0xF;
                    v246 = 0;
                    v247 = 0;
                    v146 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v146 = __str.__r_.__value_.__l.__size_;
                    if (v146)
                    {
                      LODWORD(v233[0]) = 3;
                      std::string::operator=((std::string *)((char *)&v235 + 8), &__str);
                    }
                    else
                    {
                      v147 = ((*((_QWORD *)v194 + 130) - *((_QWORD *)v194 + 129)) >> 3) - 1;
                      LODWORD(v233[0]) = 1;
                      LODWORD(v234) = v147;
                    }
                    v157 = sub_1C61CEACC((uint64_t)v194 + 1080, (uint64_t)v233);
                    if ((_QWORD *)((char *)v194 + 1088) == v157)
                    {
                      v7 = 0;
                    }
                    else
                    {
                      v165 = (char *)v157[5];
                      v205[0] = "cannot take blockaddress inside a declaration";
                      v207 = 259;
                      v7 = llvm::LLLexer::Error((uint64_t)v10, v165, (llvm::Twine *)v205);
                    }
                    v158 = v246;
                    v246 = 0;
                    if (v158)
                      MEMORY[0x1CAA32F9C](v158, 0x20C8093837F09);
                    if (v242 == (_DWORD *)&unk_1C866F1C0)
                    {
                      sub_1C4773C74((uint64_t *)&v243);
                    }
                    else if ((v242[2] - 64) <= 0xFFFFFF7F && v243)
                    {
                      MEMORY[0x1CAA32F9C](v243, 0x1000C8000313F17);
                    }
                    if (v240 >= 0x41 && v239)
                      MEMORY[0x1CAA32F9C](v239, 0x1000C8000313F17);
                    if (SHIBYTE(v238) < 0)
                      operator delete((void *)v237);
                    if ((SHIBYTE(v236) & 0x80000000) == 0)
                      goto LABEL_223;
                    v153 = (void *)*((_QWORD *)&v235 + 1);
LABEL_282:
                    operator delete(v153);
                    goto LABEL_223;
                  }
                  v138 = 0;
                  v139 = 1;
                  while (v96 != (llvm::Function *)-4096)
                  {
                    if (v138)
                      v140 = 0;
                    else
                      v140 = v96 == (llvm::Function *)-8192;
                    if (v140)
                      v138 = v95;
                    v141 = v94 + v139++;
                    v94 = v141 & v93;
                    v95 = (llvm::Function **)(v92 + 24 * v94);
                    v96 = *v95;
                    if (*v95 == v84)
                      goto LABEL_172;
                  }
                  if (v138)
                    v142 = v138;
                  else
                    v142 = v95;
                }
                else
                {
                  v142 = 0;
                }
                v95 = (llvm::Function **)sub_1C53D65B8(v90 + 2504, (uint64_t)v233, (uint64_t *)v233, v142);
                v143 = v233[0];
                v95[1] = 0;
                v95[2] = 0;
                *v95 = (llvm::Function *)v143;
                goto LABEL_172;
              }
              v77 = *((_DWORD *)v61 + 8);
            }
            *((_DWORD *)v61 + 8) = v77 | 0x4000;
            goto LABEL_153;
          }
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_str = &__str;
          else
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v160 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
          else
            v160 = __str.__r_.__value_.__l.__size_;
          v161 = sub_1C4FB7E80(*(uint64_t **)(*((_QWORD *)v194 + 41) + 112), (unsigned __int8 *)p_str, v160);
          if (!v161 || *(_BYTE *)(v161 + 16))
          {
            *v192 = 0;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v162 = &__str;
            else
              v162 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v163 = *((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x7F;
            else
              v163 = __str.__r_.__value_.__l.__size_;
            v188 = 0;
            if (!sub_1C4FB7E80(*(uint64_t **)(*((_QWORD *)v194 + 41) + 112), (unsigned __int8 *)v162, v163))
              goto LABEL_124;
          }
          else
          {
            *v192 = (llvm::Function *)v161;
          }
          std::operator+<char>();
          v181 = std::string::append(&v203, "'");
          v182 = (void **)v181->__r_.__value_.__r.__words[2];
          *(_OWORD *)v205 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
          v206 = v182;
          v181->__r_.__value_.__l.__size_ = 0;
          v181->__r_.__value_.__r.__words[2] = 0;
          v181->__r_.__value_.__r.__words[0] = 0;
          WORD4(v235) = 260;
          v233[0] = (uint64_t *)v205;
          v151 = (uint64_t)v10;
          v152 = v189;
LABEL_260:
          v7 = llvm::LLLexer::Error(v151, v152, (llvm::Twine *)v233);
          if (SHIBYTE(v206) < 0)
            operator delete(v205[0]);
          if ((SHIBYTE(v203.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_223;
          v153 = (void *)v203.__r_.__value_.__r.__words[0];
          goto LABEL_282;
        }
        v255 = "expected '(' in function argument list";
        v258 = 259;
        v19 = (char *)*((_QWORD *)this + 27);
        v20 = (char *)this + 168;
LABEL_51:
        v7 = llvm::LLLexer::Error((uint64_t)v20, v19, (llvm::Twine *)&v255);
LABEL_40:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        goto LABEL_3;
      }
      v255 = "expected function name";
      v23 = 259;
    }
    v258 = v23;
    v20 = (char *)this + 168;
    v19 = v14;
    goto LABEL_51;
  }
LABEL_3:
  if (v260 != v262)
    free(v260);
  return v7;
}

BOOL llvm::LLParser::parseOptionalFunctionMetadata(llvm::LLParser *this, llvm::Function *a2)
{
  int v4;

  do
    v4 = *((_DWORD *)this + 56);
  while (v4 == 441 && !llvm::LLParser::parseGlobalObjectMetadataAttachment(this, a2));
  return v4 == 441;
}

uint64_t llvm::LLParser::parseOptionalUnnamedAddr(uint64_t a1, int *a2)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(a1 + 224);
  if (v3 == 41)
  {
    v4 = 2;
  }
  else
  {
    if (v3 != 42)
    {
      v4 = 0;
      goto LABEL_7;
    }
    v4 = 1;
  }
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
LABEL_7:
  *a2 = v4;
  return 0;
}

uint64_t llvm::LLParser::parseGlobal(uint64_t a1, char *a2, char *a3, int a4, int a5, int a6, char a7, int a8, char a9, __int16 a10, char a11)
{
  char v16;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v24;
  llvm::Type *v25;
  unsigned int v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  BOOL v34;
  uint64_t *v35;
  _DWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  const char *v50;
  llvm::GlobalValue **v51;
  _QWORD *v52;
  llvm::GlobalValue *v53;
  int v54;
  unsigned int v55;
  llvm::ValueAsMetadata *v56;
  int v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned int v61;
  const char *v62;
  int v63;
  char v64;
  BOOL v65;
  uint64_t *v66;
  size_t v67;
  size_t v68;
  const char *v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t **v77;
  uint64_t *v78;
  uint64_t v79;
  char *v80;
  char v81;
  BOOL v82;
  unsigned __int8 *v83;
  size_t v84;
  size_t v85;
  int v86;
  char v87;
  BOOL v88;
  _BYTE *v89;
  size_t v90;
  size_t v91;
  uint64_t **v92;
  int v93;
  BOOL v94;
  unsigned int v95;
  uint64_t **v96;
  const char *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  char *v104;
  uint64_t **v105;
  uint64_t v106;
  char v107;
  char v108;
  BOOL v109;
  unsigned __int8 *v110;
  unint64_t v111;
  unint64_t v112;
  std::string *v113;
  std::string::size_type v114;
  char hasExternalWeakLinkage;
  uint64_t v116;
  unint64_t v117;
  llvm::Type *v118;
  llvm::ValueAsMetadata *v119;
  llvm::GlobalValue *v120;
  char *v121;
  llvm::LLLexer *v122;
  uint64_t *v123;
  std::string v124;
  void *__p[2];
  std::string::size_type v126;
  llvm::Constant *v127;
  llvm::Type *v128;
  BOOL v129;
  unsigned int v130;
  const char *v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  if ((a4 - 9) >= 0xFFFFFFFE && a6 != 0)
  {
    v131 = "symbol with local linkage must have default visibility";
    v135 = 259;
    v21 = a1 + 168;
    v22 = a3;
    return llvm::LLLexer::Error(v21, v22, (llvm::Twine *)&v131);
  }
  v16 = a6;
  v130 = 0;
  v129 = 0;
  v128 = 0;
  if ((llvm::LLParser::parseOptionalAddrSpace((llvm::LLParser *)a1, &v130, 0) & 1) != 0)
    return 1;
  v24 = *(_DWORD *)(a1 + 224);
  if (v24 == 43)
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  if ((llvm::LLParser::parseGlobalType((llvm::LLParser *)a1, &v129) & 1) != 0)
    return 1;
  v121 = *(char **)(a1 + 216);
  v131 = "expected type";
  v135 = 259;
  if ((llvm::LLParser::parseType((llvm::LLParser *)a1, &v128, (const llvm::Twine *)&v131, 0) & 1) != 0)
    return 1;
  v127 = 0;
  if ((!a5 || a4 && a4 != 9) && (llvm::LLParser::parseGlobalValue((llvm::LLParser *)a1, v128, &v127) & 1) != 0)
    return 1;
  v122 = (llvm::LLLexer *)(a1 + 168);
  v25 = v128;
  v26 = *((unsigned __int8 *)v128 + 8);
  if (v26 == 14 || v26 <= 0xC && ((1 << v26) & 0x1380) != 0 || v26 == 11)
  {
    v50 = "invalid type for global variable";
LABEL_157:
    v131 = v50;
    v135 = 259;
    v22 = v121;
    v21 = a1 + 168;
    return llvm::LLLexer::Error(v21, v22, (llvm::Twine *)&v131);
  }
  v27 = a2[23];
  v28 = v27;
  v29 = v27 & 0x7F;
  if (v28 < 0)
    v29 = *((_QWORD *)a2 + 1);
  if (v29)
  {
    v106 = sub_1C61CE594(a1 + 984, a2);
    if (a1 + 992 == v106)
    {
      v108 = a2[23];
      v109 = v108 < 0;
      if (v108 >= 0)
        v110 = (unsigned __int8 *)a2;
      else
        v110 = *(unsigned __int8 **)a2;
      v111 = v108 & 0x7F;
      if (v109)
        v112 = *((_QWORD *)a2 + 1);
      else
        v112 = v111;
      if (sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(a1 + 328) + 112), v110, v112))
      {
        std::operator+<char>();
        v113 = std::string::append(&v124, "'");
        v114 = v113->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
        v126 = v114;
        v113->__r_.__value_.__l.__size_ = 0;
        v113->__r_.__value_.__r.__words[2] = 0;
        v113->__r_.__value_.__r.__words[0] = 0;
        v135 = 260;
        v131 = (const char *)__p;
        v20 = llvm::LLLexer::Error((uint64_t)v122, a3, (llvm::Twine *)&v131);
        if (SHIBYTE(v126) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v124.__r_.__value_.__l.__data_);
        return v20;
      }
      goto LABEL_36;
    }
    v119 = *(llvm::ValueAsMetadata **)(v106 + 56);
    sub_1C4FCE3CC((_QWORD *)(a1 + 984), v106);
  }
  else
  {
    v30 = *(_QWORD *)(a1 + 1016);
    if (!v30)
      goto LABEL_36;
    v31 = (*(_QWORD *)(a1 + 1040) - *(_QWORD *)(a1 + 1032)) >> 3;
    v32 = a1 + 1016;
    do
    {
      v33 = *(_DWORD *)(v30 + 32);
      v34 = v33 >= v31;
      if (v33 >= v31)
        v35 = (uint64_t *)v30;
      else
        v35 = (uint64_t *)(v30 + 8);
      if (v34)
        v32 = v30;
      v30 = *v35;
    }
    while (*v35);
    if (v32 == a1 + 1016 || *(_DWORD *)(v32 + 32) > v31)
    {
LABEL_36:
      v119 = 0;
      goto LABEL_37;
    }
    v119 = *(llvm::ValueAsMetadata **)(v32 + 40);
    sub_1C49C7D1C((uint64_t **)(a1 + 1008), (uint64_t *)v32);
    operator delete((void *)v32);
  }
LABEL_37:
  v36 = operator new(0x78uLL);
  v36[13] = v36[13] & 0x38000000 | 1;
  *(_QWORD *)v36 = 0;
  *((_QWORD *)v36 + 1) = 0;
  *((_QWORD *)v36 + 2) = 0;
  *((_QWORD *)v36 + 3) = v36 + 8;
  v37 = *(_QWORD *)(a1 + 328);
  v135 = 260;
  v131 = a2;
  v118 = (llvm::Type *)v130;
  v38 = llvm::GlobalVariable::GlobalVariable((uint64_t)(v36 + 8), v37, v25, 0, 0, 0, (uint64_t)&v131, 0, 0, v130 | 0x100000000, 0);
  v39 = a2[23];
  v40 = v39;
  v41 = v39 & 0x7F;
  if (v40 < 0)
    v41 = *((_QWORD *)a2 + 1);
  v120 = (llvm::GlobalValue *)v38;
  if (!v41)
  {
    v42 = *(uint64_t **)(a1 + 1040);
    v43 = *(_QWORD *)(a1 + 1048);
    if ((unint64_t)v42 >= v43)
    {
      v45 = *(_QWORD **)(a1 + 1032);
      v116 = v42 - v45;
      v46 = v116 + 1;
      if ((unint64_t)(v116 + 1) >> 61)
        abort();
      v47 = v43 - (_QWORD)v45;
      if (v47 >> 2 > v46)
        v46 = v47 >> 2;
      v34 = (unint64_t)v47 >= 0x7FFFFFFFFFFFFFF8;
      v48 = 0x1FFFFFFFFFFFFFFFLL;
      if (!v34)
        v48 = v46;
      v117 = v48;
      if (v48)
      {
        if (v48 >> 61)
          sub_1C4764EE4();
        v49 = (char *)operator new(8 * v48);
      }
      else
      {
        v49 = 0;
      }
      v51 = (llvm::GlobalValue **)&v49[8 * v116];
      *v51 = v120;
      v52 = v51 + 1;
      if (v42 != v45)
      {
        do
        {
          v53 = (llvm::GlobalValue *)*--v42;
          *--v51 = v53;
        }
        while (v42 != v45);
        v42 = *(uint64_t **)(a1 + 1032);
      }
      *(_QWORD *)(a1 + 1032) = v51;
      v44 = v52;
      *(_QWORD *)(a1 + 1040) = v52;
      *(_QWORD *)(a1 + 1048) = &v49[8 * v117];
      if (v42)
        operator delete(v42);
      v38 = (uint64_t)v120;
    }
    else
    {
      *v42 = v38;
      v44 = v42 + 1;
    }
    *(_QWORD *)(a1 + 1040) = v44;
  }
  if (v127)
    llvm::GlobalVariable::setInitializer(v38, v127);
  *((_BYTE *)v36 + 112) = v36[28] & 0xFE | v129;
  v54 = v36[16];
  if ((a4 - 7) < 2)
    v54 &= 0xFFFFFFCF;
  v55 = v54 & 0xFFFFFFF0 | a4 & 0xF;
  v36[16] = v55;
  if ((a4 & 0xFu) - 7 < 2)
  {
    v56 = v119;
LABEL_155:
    v55 |= 0x4000u;
    goto LABEL_66;
  }
  v56 = v119;
  if ((v54 & 0x30) != 0)
  {
    hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v120);
    v55 = v36[16];
    if ((hasExternalWeakLinkage & 1) == 0)
      goto LABEL_155;
  }
LABEL_66:
  if (a8)
    v55 |= 0x4000u;
  v57 = v55 & 0xF;
  v58 = v55 & 0xFFFFFFCF | (16 * (v16 & 3));
  v36[16] = v58;
  if ((v57 - 7) < 2
    || 16 * (v16 & 3) && (v107 = llvm::GlobalValue::hasExternalWeakLinkage(v120), v58 = v36[16], (v107 & 1) == 0))
  {
    v58 |= 0x4000u;
  }
  *((_BYTE *)v36 + 112) = v36[28] & 0xFD | (2 * (v24 == 43));
  v36[16] = ((a7 & 3) << 8) & 0xE33F | ((a9 & 7) << 10) | ((a11 & 3) << 6) | v58 & 0xFFFFE03F;
  v59 = (uint64_t *)v120;
  if (!v56)
    goto LABEL_73;
  v60 = *(_QWORD *)v56;
  if (v60 != llvm::PointerType::get(v128, v118))
  {
    v50 = "forward reference and definition of global have different types";
    goto LABEL_157;
  }
  llvm::Value::doRAUW(v56, v120, (llvm::Value *)1);
  llvm::GlobalValue::eraseFromParent(v56);
LABEL_73:
  if (*(_DWORD *)(a1 + 224) != 4)
  {
LABEL_142:
    v131 = **(const char ***)(a1 + 328);
    v132 = &v134;
    v133 = 0x800000000;
    __p[0] = 0;
    __p[1] = 0;
    v126 = 0;
    v20 = llvm::LLParser::parseFnAttributeValuePairs(a1, (uint64_t)&v131, (uint64_t)__p, 0, &v124.__r_.__value_.__l.__data_);
    v103 = (char *)__p[0];
    if ((v20 & 1) == 0)
    {
      v104 = (char *)__p[1];
      if ((_DWORD)v133 || __p[0] != __p[1])
      {
        *((_QWORD *)v36 + 13) = llvm::AttributeSetNode::getSorted(*(uint64_t **)a1, (uint64_t *)v132, v133);
        v123 = v59;
        v105 = sub_1C4FCE454((uint64_t **)(a1 + 1112), (unint64_t)v59, &v123);
        sub_1C4FCE520(v105 + 5, v103, v104, (v104 - v103) >> 2);
      }
    }
    if (v103)
      operator delete(v103);
    if (v132 != &v134)
      free(v132);
    return v20;
  }
  v61 = (v120 >> 4) ^ (v120 >> 9);
  v62 = "expected global section string";
  while (1)
  {
    v63 = llvm::LLLexer::LexToken(v122);
    *(_DWORD *)(a1 + 224) = v63;
    if (v63 <= 92)
    {
      if (v63 == 90)
      {
        LOWORD(v131) = 0;
        if (llvm::LLParser::parseOptionalAlignment(a1, &v131, 0))
          return 1;
        if ((unsigned __int16)v131 >= 0x100u)
          v86 = (v131 << 16) + 0x10000;
        else
          v86 = 0;
        v36[16] = v86 | v36[16] & 0xFFC0FFFF;
        goto LABEL_103;
      }
      if (v63 != 92)
        break;
      *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v122);
      v64 = *(_BYTE *)(a1 + 255);
      v65 = v64 < 0;
      if (v64 >= 0)
        v66 = (uint64_t *)(a1 + 232);
      else
        v66 = *(uint64_t **)(a1 + 232);
      v67 = v64 & 0x7F;
      if (v65)
        v68 = *(_QWORD *)(a1 + 240);
      else
        v68 = v67;
      if ((*((_BYTE *)v36 + 66) & 0x40) == 0 && !v68)
        goto LABEL_91;
      v69 = v62;
      if (v68)
      {
        v66 = (uint64_t *)llvm::UniqueStringSaver::save(**(_QWORD **)*v59 + 2136, v66, v68);
        v71 = v70;
      }
      else
      {
        v71 = 0;
      }
      v72 = **(_QWORD **)*v59;
      v131 = (const char *)v59;
      v73 = *(_DWORD *)(v72 + 2520);
      if (v73)
      {
        v74 = *(_QWORD *)(v72 + 2504);
        v75 = v73 - 1;
        v76 = v75 & v61;
        v77 = (uint64_t **)(v74 + 24 * (v75 & v61));
        v78 = *v77;
        if (*v77 == v59)
        {
LABEL_90:
          v77[1] = v66;
          v77[2] = v71;
          v36[16] = v36[16] & 0xFFBFFFFF | ((v71 != 0) << 22);
          v62 = v69;
LABEL_91:
          v79 = a1;
          v80 = (char *)v62;
          goto LABEL_119;
        }
        v92 = 0;
        v93 = 1;
        while (v78 != (uint64_t *)-4096)
        {
          if (v92)
            v94 = 0;
          else
            v94 = v78 == (uint64_t *)-8192;
          if (v94)
            v92 = v77;
          v95 = v76 + v93++;
          v76 = v95 & v75;
          v77 = (uint64_t **)(v74 + 24 * v76);
          v78 = *v77;
          v59 = (uint64_t *)v120;
          if (*v77 == (uint64_t *)v120)
            goto LABEL_90;
        }
        if (v92)
          v96 = v92;
        else
          v96 = v77;
      }
      else
      {
        v96 = 0;
      }
      v77 = (uint64_t **)sub_1C53D65B8(v72 + 2504, (uint64_t)&v131, (uint64_t *)&v131, v96);
      v97 = v131;
      v77[1] = 0;
      v77[2] = 0;
      *v77 = (uint64_t *)v97;
      v59 = (uint64_t *)v120;
      goto LABEL_90;
    }
    if (v63 == 93)
    {
      *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v122);
      v87 = *(_BYTE *)(a1 + 255);
      v88 = v87 < 0;
      if (v87 >= 0)
        v89 = (_BYTE *)(a1 + 232);
      else
        v89 = *(_BYTE **)(a1 + 232);
      v90 = v87 & 0x7F;
      if (v88)
        v91 = *(_QWORD *)(a1 + 240);
      else
        v91 = v90;
      if ((*((_BYTE *)v36 + 65) & 0x80) != 0 || v91)
      {
        v98 = v62;
        if (v91)
        {
          v89 = llvm::UniqueStringSaver::save(***(_QWORD ***)v120 + 2136, v89, v91);
          v99 = v100;
        }
        else
        {
          v99 = 0;
        }
        v101 = ***((_QWORD ***)v36 + 4) + 2528;
        v59 = (uint64_t *)v120;
        v131 = (const char *)v120;
        v102 = sub_1C617A140(v101, (uint64_t *)&v131);
        v102[1] = v89;
        v102[2] = v99;
        v36[16] = v36[16] & 0xFFFF7FFF | ((v99 != 0) << 15);
        v62 = v98;
      }
      v79 = a1;
      v80 = "expected partition string";
LABEL_119:
      if ((llvm::LLParser::parseToken(v79, 442, v80) & 1) != 0)
        return 1;
      goto LABEL_103;
    }
    if (v63 != 441)
      break;
    if ((llvm::LLParser::parseGlobalObjectMetadataAttachment((llvm::LLParser *)a1, (llvm::GlobalObject *)v59) & 1) != 0)
      return 1;
LABEL_103:
    if (*(_DWORD *)(a1 + 224) != 4)
      goto LABEL_142;
  }
  __p[0] = 0;
  v81 = a2[23];
  v82 = v81 < 0;
  if (v81 >= 0)
    v83 = (unsigned __int8 *)a2;
  else
    v83 = *(unsigned __int8 **)a2;
  v84 = v81 & 0x7F;
  if (v82)
    v85 = *((_QWORD *)a2 + 1);
  else
    v85 = v84;
  if ((llvm::LLParser::parseOptionalComdat(a1, v83, v85, (uint64_t *)__p) & 1) != 0)
    return 1;
  if (__p[0])
  {
    llvm::GlobalObject::setComdat((llvm::GlobalObject *)v59, (llvm::Comdat *)__p[0]);
    goto LABEL_103;
  }
  v131 = "unknown global variable property!";
  v135 = 259;
  v22 = *(char **)(a1 + 216);
  v21 = a1 + 168;
  return llvm::LLLexer::Error(v21, v22, (llvm::Twine *)&v131);
}

uint64_t llvm::LLParser::parseAliasOrIFunc(uint64_t a1, uint64_t a2, char *a3, unsigned int a4, int a5, char a6, int a7, char a8, char a9)
{
  llvm::LLLexer *v17;
  int v18;
  llvm::LLLexer *v19;
  const char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unsigned int v26;
  uint64_t v27;
  llvm::GlobalValue *v28;
  uint64_t v29;
  llvm::Constant *v30;
  uint64_t v31;
  llvm::Type *v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  BOOL v44;
  unsigned __int8 *v45;
  unint64_t v46;
  unint64_t v47;
  llvm::Type *v48;
  llvm::Value *v49;
  uint64_t v50;
  llvm::GlobalValue *v51;
  int v52;
  unsigned int v53;
  unsigned int v54;
  int v55;
  char v56;
  BOOL v57;
  _BYTE *v58;
  size_t v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char v65;
  int v66;
  uint64_t v67;
  llvm::GlobalValue **v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  std::string *v78;
  std::string::size_type v79;
  llvm::GlobalValue **v80;
  llvm::GlobalValue *v81;
  uint64_t v82;
  uint64_t *v83;
  llvm::GlobalValue *v84;
  llvm::ValueSymbolTable *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  llvm::Value *v89;
  int v90;
  uint64_t v91;
  char *v92;
  _QWORD **v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  llvm::ValueSymbolTable *v97;
  uint64_t v98;
  uint64_t v99;
  char hasExternalWeakLinkage;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  _QWORD *v110;
  unsigned int v111;
  char *v112;
  char *v113;
  llvm::ValueAsMetadata *v114;
  uint64_t v115;
  std::string v116;
  llvm::GlobalValue *v117[2];
  std::string::size_type v118;
  __int16 v119;
  llvm::Constant *v120;
  llvm::Type *v121;
  uint64_t v122[3];
  __int128 v123;
  __int128 v124;
  __int128 __p;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  char v129;
  llvm::GlobalValue *v130;
  llvm::GlobalValue *v131;
  int v132;
  char v133;
  llvm::Constant *v134;
  uint64_t v135;
  char v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v17 = (llvm::LLLexer *)(a1 + 168);
  v18 = *(_DWORD *)(a1 + 224);
  v19 = (llvm::LLLexer *)(a1 + 168);
  if (v18 == 94)
  {
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v19);
    if (a4 > 8 || ((1 << a4) & 0x1BD) == 0)
    {
      v20 = "invalid linkage type for alias";
      goto LABEL_9;
    }
    if (!a5)
      goto LABEL_11;
  }
  else
  {
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v19);
    if (!a5)
      goto LABEL_11;
  }
  if (a4 - 9 >= 0xFFFFFFFE)
  {
    v20 = "symbol with local linkage must have default visibility";
LABEL_9:
    v122[0] = (uint64_t)v20;
    WORD4(v123) = 259;
    v21 = (uint64_t)v17;
    v22 = a3;
    return llvm::LLLexer::Error(v21, v22, (llvm::Twine *)v122);
  }
LABEL_11:
  v115 = a2;
  v24 = *(char **)(a1 + 216);
  v121 = 0;
  v122[0] = (uint64_t)"expected type";
  WORD4(v123) = 259;
  if ((llvm::LLParser::parseType((llvm::LLParser *)a1, &v121, (const llvm::Twine *)v122, 0) & 1) != 0
    || (llvm::LLParser::parseToken(a1, 4, "expected comma after alias or ifunc's type") & 1) != 0)
  {
    return 1;
  }
  v120 = 0;
  v112 = v24;
  v113 = *(char **)(a1 + 216);
  v26 = *(_DWORD *)(a1 + 224) - 308;
  if (v26 > 0x1E || (v23 = 1, ((1 << v26) & 0x4000000D) == 0))
  {
    if ((llvm::LLParser::parseGlobalTypeAndValue((llvm::LLParser *)a1, &v120) & 1) == 0)
    {
      v30 = v120;
      goto LABEL_43;
    }
    return 1;
  }
  LODWORD(v122[0]) = 0;
  v122[1] = 0;
  v123 = 0u;
  v124 = 0u;
  __p = 0u;
  v126 = 0;
  v127 = 0;
  v128 = 1;
  v129 = 0;
  LODWORD(v116.__r_.__value_.__r.__words[1]) = 64;
  v116.__r_.__value_.__r.__words[0] = 0;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v117, (const llvm::APInt **)&v116);
  v130 = v117[0];
  v131 = v117[1];
  v132 = v118;
  v133 = v133 & 0xF0 | BYTE4(v118) & 0xF;
  v135 = 0;
  v136 = 0;
  if ((llvm::LLParser::parseValID((uint64_t **)a1, (uint64_t)v122, 0, 0) & 1) != 0)
    goto LABEL_19;
  if (LODWORD(v122[0]) != 12)
  {
    v117[0] = (llvm::GlobalValue *)"invalid aliasee";
    v119 = 259;
    v23 = llvm::LLLexer::Error((uint64_t)v17, v113, (llvm::Twine *)v117);
LABEL_19:
    v27 = v135;
    v135 = 0;
    if (v27)
      MEMORY[0x1CAA32F9C](v27, 0x20C8093837F09);
    if (v130 == (llvm::GlobalValue *)&unk_1C866F1C0)
    {
      sub_1C4773C74((uint64_t *)&v131);
    }
    else if ((*((_DWORD *)v130 + 2) - 64) <= 0xFFFFFF7F && v131)
    {
      MEMORY[0x1CAA32F9C](v131, 0x1000C8000313F17);
    }
    if (v128 >= 0x41 && v127)
      MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
    if (SHIBYTE(v126) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v124) < 0)
    {
      v28 = (llvm::GlobalValue *)*((_QWORD *)&v123 + 1);
LABEL_30:
      operator delete(v28);
      return v23;
    }
    return v23;
  }
  v30 = v134;
  v29 = v135;
  v120 = v134;
  v135 = 0;
  if (v29)
    MEMORY[0x1CAA32F9C](v29, 0x20C8093837F09);
  if (v130 == (llvm::GlobalValue *)&unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v131);
  }
  else if ((*((_DWORD *)v130 + 2) - 64) <= 0xFFFFFF7F && v131)
  {
    MEMORY[0x1CAA32F9C](v131, 0x1000C8000313F17);
  }
  if (v128 >= 0x41 && v127)
    MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
  if (SHIBYTE(v126) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v124) < 0)
    operator delete(*((void **)&v123 + 1));
LABEL_43:
  v31 = *(_QWORD *)v30;
  if (!*(_QWORD *)v30 || *(_DWORD *)(v31 + 8) != 15)
  {
    v122[0] = (uint64_t)"An alias or ifunc must have pointer type";
    WORD4(v123) = 259;
    v21 = (uint64_t)v17;
    v22 = v113;
    return llvm::LLLexer::Error(v21, v22, (llvm::Twine *)v122);
  }
  if (v18 != 94)
  {
    if (!*(_QWORD *)(v31 + 24) || *(_BYTE *)(**(_QWORD **)(v31 + 16) + 8) == 14)
      goto LABEL_56;
    v122[0] = (uint64_t)"explicit pointee type should be a function type";
    WORD4(v123) = 259;
    v21 = (uint64_t)v17;
    v22 = v112;
    return llvm::LLLexer::Error(v21, v22, (llvm::Twine *)v122);
  }
  v32 = *(llvm::Type **)(v31 + 24);
  if (v32 && v32 != v121)
  {
    sub_1C4FB6A84((uint64_t)v117, v121, **(llvm::Type ***)(v31 + 16));
    WORD4(v123) = 260;
    v122[0] = (uint64_t)v117;
    v23 = llvm::LLLexer::Error((uint64_t)v17, v112, (llvm::Twine *)v122);
    if ((SHIBYTE(v118) & 0x80000000) == 0)
      return v23;
    v28 = v117[0];
    goto LABEL_30;
  }
LABEL_56:
  v111 = *(_DWORD *)(v31 + 8);
  v33 = *(_BYTE *)(v115 + 23);
  v34 = v33;
  v35 = v33 & 0x7F;
  if (v34 < 0)
    v35 = *(_QWORD *)(v115 + 8);
  if (!v35)
  {
    v36 = *(_QWORD *)(a1 + 1016);
    if (v36)
    {
      v37 = (*(_QWORD *)(a1 + 1040) - *(_QWORD *)(a1 + 1032)) >> 3;
      v38 = a1 + 1016;
      do
      {
        v39 = *(_DWORD *)(v36 + 32);
        v40 = v39 >= v37;
        if (v39 >= v37)
          v41 = (uint64_t *)v36;
        else
          v41 = (uint64_t *)(v36 + 8);
        if (v40)
          v38 = v36;
        v36 = *v41;
      }
      while (*v41);
      if (v38 != a1 + 1016 && *(_DWORD *)(v38 + 32) <= v37)
      {
        v114 = *(llvm::ValueAsMetadata **)(v38 + 40);
        sub_1C49C7D1C((uint64_t **)(a1 + 1008), (uint64_t *)v38);
        operator delete((void *)v38);
        goto LABEL_80;
      }
    }
    goto LABEL_79;
  }
  v110 = (_QWORD *)(a1 + 984);
  v42 = sub_1C61CE594(a1 + 984, (_QWORD *)v115);
  if (a1 + 992 != v42)
  {
    v114 = *(llvm::ValueAsMetadata **)(v42 + 56);
    v71 = sub_1C61CE594((uint64_t)v110, (_QWORD *)v115);
    if (a1 + 992 != v71)
      sub_1C4FCE3CC(v110, v71);
LABEL_80:
    v48 = (llvm::Type *)(v111 >> 8);
    v117[0] = 0;
    WORD4(v123) = 260;
    v122[0] = v115;
    if (v18 == 94)
    {
      v49 = (llvm::Value *)llvm::GlobalAlias::create(v121, v48, a4, (uint64_t)v122, (uint64_t)v30, 0);
      sub_1C4FB6C64(v117, v49);
      v50 = 0;
      v51 = v117[0];
    }
    else
    {
      v50 = llvm::GlobalIFunc::create(v121, v48, a4, (uint64_t)v122, (uint64_t)v30, 0);
      v51 = (llvm::GlobalValue *)v50;
    }
    v52 = *((_DWORD *)v51 + 8);
    v53 = v52 & 0xFFFFE3CF | ((a8 & 7) << 10) | (16 * (a5 & 3));
    *((_DWORD *)v51 + 8) = v53;
    if ((v52 & 0xFu) - 7 < 2
      || 16 * (a5 & 3)
      && (hasExternalWeakLinkage = llvm::GlobalValue::hasExternalWeakLinkage(v51),
          v53 = *((_DWORD *)v51 + 8),
          (hasExternalWeakLinkage & 1) == 0))
    {
      v53 |= 0x4000u;
    }
    v54 = ((a6 & 3) << 8) | ((a9 & 3) << 6) | v53 & 0xFFFFFC3F;
    if (a7)
      v54 |= 0x4000u;
    *((_DWORD *)v51 + 8) = v54;
    while (*(_DWORD *)(a1 + 224) == 4)
    {
      v55 = llvm::LLLexer::LexToken(v17);
      *(_DWORD *)(a1 + 224) = v55;
      if (v55 != 93)
      {
        v122[0] = (uint64_t)"unknown alias or ifunc property!";
        WORD4(v123) = 259;
        v101 = *(char **)(a1 + 216);
        v102 = (uint64_t)v17;
LABEL_162:
        v23 = llvm::LLLexer::Error(v102, v101, (llvm::Twine *)v122);
LABEL_140:
        if (v50)
        {
          v88 = *(_QWORD *)(v50 + 48);
          if (v88)
            llvm::Comdat::removeUser(v88, v50);
          *(_QWORD *)(v50 + 48) = 0;
          llvm::Constant::removeDeadConstantUsers(v50);
          llvm::Value::~Value((llvm::Value *)v50, v89);
          v90 = *(_DWORD *)(v50 + 20);
          if ((v90 & 0x40000000) != 0)
          {
            v105 = *(char **)(v50 - 8);
            v104 = (char *)(v50 - 8);
            v103 = v105;
            v106 = v90 & 0x7FFFFFF;
            if ((_DWORD)v106)
            {
              v107 = 32 * v106;
              do
              {
                v108 = &v103[v107];
                if (*(_QWORD *)&v103[v107 - 32])
                {
                  **((_QWORD **)v108 - 2) = *((_QWORD *)v108 - 3);
                  v109 = *((_QWORD *)v108 - 3);
                  if (v109)
                    *(_QWORD *)(v109 + 16) = *((_QWORD *)v108 - 2);
                }
                v107 -= 32;
              }
              while (v107);
            }
            operator delete(v103);
            v92 = v104;
          }
          else
          {
            v91 = v90 & 0x7FFFFFF;
            v92 = (char *)(v50 - 32 * v91);
            if ((_DWORD)v91)
            {
              v93 = (_QWORD **)(v50 - 16);
              v94 = -32 * v91;
              do
              {
                if (*(v93 - 2))
                {
                  **v93 = *(v93 - 1);
                  v95 = (uint64_t)*(v93 - 1);
                  if (v95)
                    *(_QWORD *)(v95 + 16) = *v93;
                }
                v93 -= 4;
                v94 += 32;
              }
              while (v94);
            }
            if (v90 < 0)
              v92 = &v92[-*((_QWORD *)v92 - 1) - 8];
          }
          operator delete(v92);
        }
        goto LABEL_157;
      }
      *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v17);
      v56 = *(_BYTE *)(a1 + 255);
      v57 = v56 < 0;
      if (v56 >= 0)
        v58 = (_BYTE *)(a1 + 232);
      else
        v58 = *(_BYTE **)(a1 + 232);
      v59 = v56 & 0x7F;
      if (v57)
        v60 = *(_QWORD *)(a1 + 240);
      else
        v60 = v59;
      if ((*((_BYTE *)v51 + 33) & 0x80) != 0 || v60)
      {
        if (v60)
        {
          v58 = llvm::UniqueStringSaver::save(***(_QWORD ***)v51 + 2136, v58, v60);
          v61 = v62;
        }
        else
        {
          v61 = 0;
        }
        v63 = ***(_QWORD ***)v51 + 2528;
        v122[0] = (uint64_t)v51;
        v64 = sub_1C617A140(v63, v122);
        v64[1] = v58;
        v64[2] = v61;
        *((_DWORD *)v51 + 8) = *((_DWORD *)v51 + 8) & 0xFFFF7FFF | ((v61 != 0) << 15);
      }
      if ((llvm::LLParser::parseToken(a1, 442, "expected partition string") & 1) != 0)
      {
        v23 = 1;
        goto LABEL_140;
      }
    }
    v65 = *(_BYTE *)(v115 + 23);
    v66 = v65;
    v67 = v65 & 0x7F;
    if (v66 < 0)
      v67 = *(_QWORD *)(v115 + 8);
    if (!v67)
    {
      v68 = *(llvm::GlobalValue ***)(a1 + 1040);
      v69 = *(_QWORD *)(a1 + 1048);
      if ((unint64_t)v68 >= v69)
      {
        v72 = *(_QWORD **)(a1 + 1032);
        v73 = v68 - (llvm::GlobalValue **)v72;
        v74 = v73 + 1;
        if ((unint64_t)(v73 + 1) >> 61)
          abort();
        v75 = v69 - (_QWORD)v72;
        if (v75 >> 2 > v74)
          v74 = v75 >> 2;
        if ((unint64_t)v75 >= 0x7FFFFFFFFFFFFFF8)
          v76 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v76 = v74;
        if (v76)
        {
          if (v76 >> 61)
            sub_1C4764EE4();
          v77 = (char *)operator new(8 * v76);
        }
        else
        {
          v77 = 0;
        }
        v80 = (llvm::GlobalValue **)&v77[8 * v73];
        *v80 = v51;
        v70 = v80 + 1;
        if (v68 != v72)
        {
          do
          {
            v81 = *--v68;
            *--v80 = v81;
          }
          while (v68 != v72);
          v68 = *(llvm::GlobalValue ***)(a1 + 1032);
        }
        *(_QWORD *)(a1 + 1032) = v80;
        *(_QWORD *)(a1 + 1040) = v70;
        *(_QWORD *)(a1 + 1048) = &v77[8 * v76];
        if (v68)
          operator delete(v68);
      }
      else
      {
        *v68 = v51;
        v70 = v68 + 1;
      }
      *(_QWORD *)(a1 + 1040) = v70;
    }
    if (v114)
    {
      if (*(_QWORD *)v114 != *(_QWORD *)v51)
      {
        v122[0] = (uint64_t)"forward reference and definition of alias have different types";
        WORD4(v123) = 259;
        v102 = (uint64_t)v17;
        v101 = v112;
        goto LABEL_162;
      }
      llvm::Value::doRAUW(v114, v51, (llvm::Value *)1);
      llvm::GlobalValue::eraseFromParent(v114);
    }
    v82 = *(_QWORD *)(a1 + 328);
    if (v18 == 94)
    {
      v83 = (uint64_t *)(v82 + 40);
      v84 = v117[0];
      v117[0] = 0;
      *((_QWORD *)v84 + 5) = v82;
      if ((*((_BYTE *)v84 + 23) & 0x10) != 0)
      {
        v85 = *(llvm::ValueSymbolTable **)(v82 + 112);
        if (v85)
          llvm::ValueSymbolTable::reinsertValue(v85, v84);
      }
      v23 = 0;
      v86 = *v83;
      *((_QWORD *)v84 + 6) = *v83;
      *((_QWORD *)v84 + 7) = v83;
      v87 = (char *)v84 + 48;
      *(_QWORD *)(v86 + 8) = v87;
      *v83 = (uint64_t)v87;
      goto LABEL_140;
    }
    v96 = (uint64_t *)(v82 + 56);
    *(_QWORD *)(v50 + 40) = v82;
    if ((*(_BYTE *)(v50 + 23) & 0x10) != 0)
    {
      v97 = *(llvm::ValueSymbolTable **)(v82 + 112);
      if (v97)
        llvm::ValueSymbolTable::reinsertValue(v97, (llvm::Value *)v50);
    }
    v23 = 0;
    v98 = *v96;
    *(_QWORD *)(v50 + 56) = *v96;
    *(_QWORD *)(v50 + 64) = v96;
    v99 = v50 + 56;
    *(_QWORD *)(v98 + 8) = v99;
    *v96 = v99;
LABEL_157:
    sub_1C4FB6C64(v117, 0);
    return v23;
  }
  v43 = *(_BYTE *)(v115 + 23);
  v44 = v43 < 0;
  if (v43 >= 0)
    v45 = (unsigned __int8 *)v115;
  else
    v45 = *(unsigned __int8 **)v115;
  v46 = v43 & 0x7F;
  if (v44)
    v47 = *(_QWORD *)(v115 + 8);
  else
    v47 = v46;
  if (!sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(a1 + 328) + 112), v45, v47))
  {
LABEL_79:
    v114 = 0;
    goto LABEL_80;
  }
  std::operator+<char>();
  v78 = std::string::append(&v116, "'");
  v79 = v78->__r_.__value_.__r.__words[2];
  *(_OWORD *)v117 = *(_OWORD *)&v78->__r_.__value_.__l.__data_;
  v118 = v79;
  v78->__r_.__value_.__l.__size_ = 0;
  v78->__r_.__value_.__r.__words[2] = 0;
  v78->__r_.__value_.__r.__words[0] = 0;
  WORD4(v123) = 260;
  v122[0] = (uint64_t)v117;
  v23 = llvm::LLLexer::Error((uint64_t)v17, a3, (llvm::Twine *)v122);
  if (SHIBYTE(v118) < 0)
    operator delete(v117[0]);
  if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
  {
    v28 = (llvm::GlobalValue *)v116.__r_.__value_.__r.__words[0];
    goto LABEL_30;
  }
  return v23;
}

uint64_t llvm::LLParser::parseMDString(uint64_t **this, llvm::MDString **a2)
{
  uint64_t v4;
  std::string *p_p;
  size_t size;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  v4 = llvm::LLParser::parseStringConstant((uint64_t)this, &__p);
  if ((v4 & 1) == 0)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    *a2 = (llvm::MDString *)llvm::MDString::get(*this, (unsigned __int8 *)p_p, size);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

uint64_t llvm::LLParser::parseMDNodeID(llvm::LLParser *this, llvm::MDNode **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int i;
  unsigned int v8;
  char *v9;
  char *v10;
  unsigned int v11;
  uint64_t **v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  llvm::MDNode *Impl;
  llvm::MDNode *v17;
  llvm::MDNode *v18;
  uint64_t **v19;
  unsigned int v21;

  v4 = *((_QWORD *)this + 27);
  v21 = 0;
  v5 = llvm::LLParser::parseUInt32(this, &v21);
  if ((v5 & 1) == 0)
  {
    v6 = (uint64_t *)*((_QWORD *)this + 118);
    for (i = v21; v6; v6 = (uint64_t *)*v6)
    {
      v8 = *((_DWORD *)v6 + 8);
      if (v21 >= v8)
      {
        if (v8 >= v21)
        {
          *a2 = (llvm::MDNode *)sub_1C4FCE2AC((uint64_t **)this + 117, v21, &v21)[5];
          return v5;
        }
        ++v6;
      }
    }
    v9 = (char *)*((_QWORD *)this + 121);
    if (v9)
    {
      while (1)
      {
        while (1)
        {
          v10 = v9;
          v11 = *((_DWORD *)v9 + 8);
          if (v11 <= v21)
            break;
          v9 = *(char **)v10;
          v12 = (uint64_t **)v10;
          if (!*(_QWORD *)v10)
            goto LABEL_15;
        }
        if (v11 >= v21)
          break;
        v9 = (char *)*((_QWORD *)v10 + 1);
        if (!v9)
        {
          v12 = (uint64_t **)(v10 + 8);
          goto LABEL_15;
        }
      }
    }
    else
    {
      v12 = (uint64_t **)((char *)this + 968);
      v10 = (char *)this + 968;
LABEL_15:
      v13 = v10;
      v10 = (char *)operator new(0x38uLL);
      *((_DWORD *)v10 + 8) = i;
      *(_QWORD *)v10 = 0;
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 5) = 0;
      *((_QWORD *)v10 + 6) = 0;
      *((_QWORD *)v10 + 2) = v13;
      *v12 = (uint64_t *)v10;
      v14 = **((_QWORD **)this + 120);
      v15 = (uint64_t *)v10;
      if (v14)
      {
        *((_QWORD *)this + 120) = v14;
        v15 = *v12;
      }
      sub_1C4768E74(*((uint64_t **)this + 121), v15);
      ++*((_QWORD *)this + 122);
    }
    Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(*(uint64_t **)this, 0, 0, 2, 1);
    v18 = (llvm::MDNode *)*((_QWORD *)v10 + 5);
    *((_QWORD *)v10 + 5) = Impl;
    if (v18)
    {
      llvm::MDNode::deleteTemporary(v18, v17);
      Impl = (llvm::MDNode *)*((_QWORD *)v10 + 5);
    }
    *((_QWORD *)v10 + 6) = v4;
    *a2 = Impl;
    v19 = sub_1C4FCE2AC((uint64_t **)this + 117, i, &v21);
    sub_1C4FCE378((unsigned __int8 **)v19 + 5, (unsigned __int8 *)*a2);
  }
  return v5;
}

uint64_t llvm::LLParser::parseUInt32(llvm::LLParser *this, unsigned int *a2)
{
  llvm::LLLexer *v3;
  unint64_t **v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  uint64_t result;
  const char *v10;
  const char *v11;
  __int16 v12;

  v3 = (llvm::LLParser *)((char *)this + 168);
  if (*((_DWORD *)this + 56) == 457 && *((_BYTE *)this + 316))
  {
    v5 = (unint64_t **)((char *)this + 304);
    v6 = *((_DWORD *)this + 78);
    if (v6 >= 0x41)
    {
      if (v6 - llvm::APInt::countLeadingZerosSlowCase((llvm::LLParser *)((char *)this + 304)) > 0x40)
      {
LABEL_11:
        v10 = "expected 32-bit integer (too large)";
        goto LABEL_12;
      }
      v7 = **v5;
    }
    else
    {
      v7 = (unint64_t)*v5;
    }
    if (v7 <= 0x100000000 && !HIDWORD(v7))
    {
      *a2 = v7;
      v8 = llvm::LLLexer::LexToken(v3);
      result = 0;
      *((_DWORD *)this + 56) = v8;
      return result;
    }
    goto LABEL_11;
  }
  v10 = "expected integer";
LABEL_12:
  v11 = v10;
  v12 = 259;
  return llvm::LLLexer::Error((uint64_t)v3, *((char **)this + 27), (llvm::Twine *)&v11);
}

BOOL sub_1C4FB2CFC(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  size_t v10;
  _BOOL4 v11;

  v4 = strlen(__s);
  v5 = *((unsigned __int8 *)a1 + 23);
  v6 = a1[1];
  if ((v5 & 0x80u) == 0)
    v7 = v5 & 0x7F;
  else
    v7 = a1[1];
  if (v4 != v7)
    return 0;
  v8 = v4;
  if ((v5 & 0x80) != 0)
  {
    if (v4 == -1)
      goto LABEL_17;
    a1 = (_QWORD *)*a1;
    v5 = v6;
  }
  else if (v4 == -1)
  {
LABEL_17:
    abort();
  }
  if (v5 >= v4)
    v10 = v4;
  else
    v10 = v5;
  v11 = memcmp(a1, __s, v10) == 0;
  return v5 == v8 && v11;
}

uint64_t llvm::LLParser::parseDIExpression(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t v7;
  int v9;
  char v10;
  BOOL v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int AttributeEncoding;
  char v16;
  BOOL v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  const char *v29;
  _QWORD v30[4];
  __int16 v31;
  const char *v32;
  const char *v33;
  __int16 v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[9];

  v37[8] = *MEMORY[0x1E0C80C00];
  v6 = (llvm::LLParser *)((char *)this + 168);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v35 = v37;
  v36 = 0x800000000;
  v9 = *((_DWORD *)this + 56);
  if (v9 == 13)
  {
LABEL_5:
    if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    {
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *a2 = llvm::DIExpression::getImpl(*(_QWORD **)this, v35, v36, a3, 1);
    }
    goto LABEL_42;
  }
  while (1)
  {
    if (v9 == 444)
    {
      v16 = *((_BYTE *)this + 255);
      v17 = v16 < 0;
      if (v16 >= 0)
        v18 = (char *)this + 232;
      else
        v18 = (char *)*((_QWORD *)this + 29);
      v19 = v16 & 0x7F;
      if (v17)
        v20 = *((_QWORD *)this + 30);
      else
        v20 = v19;
      AttributeEncoding = llvm::dwarf::getAttributeEncoding((uint64_t)v18, v20);
      if (!AttributeEncoding)
      {
        v29 = "invalid DWARF attribute encoding '";
        goto LABEL_40;
      }
      goto LABEL_25;
    }
    if (v9 != 457)
    {
      if (v9 != 450)
        goto LABEL_38;
      v10 = *((_BYTE *)this + 255);
      v11 = v10 < 0;
      if (v10 >= 0)
        v12 = (char *)this + 232;
      else
        v12 = (char *)*((_QWORD *)this + 29);
      v13 = v10 & 0x7F;
      if (v11)
        v14 = *((_QWORD *)this + 30);
      else
        v14 = v13;
      AttributeEncoding = llvm::dwarf::getOperationEncoding((uint64_t)v12, v14);
      if (!AttributeEncoding)
      {
        v29 = "invalid DWARF op '";
LABEL_40:
        v30[0] = v29;
        v30[2] = (char *)this + 232;
        v31 = 1027;
        v32 = (const char *)v30;
        v33 = "'";
        v28 = 770;
        goto LABEL_41;
      }
LABEL_25:
      v21 = AttributeEncoding;
      *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v6);
      v22 = v36;
      if (v36 >= (unint64_t)HIDWORD(v36))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, (uint64_t)v37, v36 + 1, 8);
        v22 = v36;
      }
      *((_QWORD *)v35 + v22) = v21;
      LODWORD(v36) = v36 + 1;
      v23 = *((_DWORD *)this + 56);
      goto LABEL_35;
    }
    if (!*((_BYTE *)this + 316))
    {
LABEL_38:
      v32 = "expected unsigned integer";
      v28 = 259;
      goto LABEL_41;
    }
    v24 = *((_DWORD *)this + 78);
    v25 = (uint64_t *)((char *)this + 304);
    if (v24 >= 0x41)
      break;
LABEL_32:
    v26 = *v25;
    v27 = v36;
    if (v36 >= (unint64_t)HIDWORD(v36))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v35, (uint64_t)v37, v36 + 1, 8);
      v27 = v36;
    }
    *((_QWORD *)v35 + v27) = v26;
    LODWORD(v36) = v36 + 1;
    v23 = llvm::LLLexer::LexToken(v6);
    *((_DWORD *)this + 56) = v23;
LABEL_35:
    if (v23 != 4)
      goto LABEL_5;
    v9 = llvm::LLLexer::LexToken(v6);
    *((_DWORD *)this + 56) = v9;
  }
  if (v24 - llvm::APInt::countLeadingZerosSlowCase((llvm::LLParser *)((char *)this + 304)) < 0x41)
  {
    v25 = (uint64_t *)*((_QWORD *)this + 38);
    goto LABEL_32;
  }
  v30[0] = -1;
  v32 = "element too large, limit is ";
  v33 = (const char *)v30;
  v28 = 3075;
LABEL_41:
  v34 = v28;
  v7 = llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)&v32);
LABEL_42:
  if (v35 != v37)
    free(v35);
  return v7;
}

uint64_t llvm::LLParser::parseGVEntry(llvm::LLParser *this, unsigned int a2)
{
  llvm::LLLexer *v4;
  uint64_t v5;
  int v7;
  char *v8;
  const char *v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char v13;
  void *v14;
  std::string v15;
  std::string __p;
  std::string __dst;
  uint64_t v18;
  std::string v19;
  const char *v20;
  __int16 v21;
  unint64_t v22;
  std::string v23;

  v4 = (llvm::LLParser *)((char *)this + 168);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
  {
    return 1;
  }
  memset(&v23, 0, sizeof(v23));
  v22 = 0;
  v7 = *((_DWORD *)this + 56);
  if (v7 == 354)
  {
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v4);
    if ((llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0
      || (llvm::LLParser::parseUInt64((char **)this, &v22) & 1) != 0)
    {
      goto LABEL_12;
    }
  }
  else
  {
    if (v7 != 355)
    {
      v8 = (char *)*((_QWORD *)this + 27);
      v9 = "expected name or guid tag";
LABEL_14:
      v20 = v9;
      v21 = 259;
      v10 = llvm::LLLexer::Error((uint64_t)v4, v8, (llvm::Twine *)&v20);
LABEL_15:
      v5 = v10;
      goto LABEL_16;
    }
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v4);
    if ((llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0
      || (llvm::LLParser::parseStringConstant((uint64_t)this, &v23) & 1) != 0)
    {
      goto LABEL_12;
    }
  }
  if (*((_DWORD *)this + 56) == 4)
  {
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v4);
    if ((llvm::LLParser::parseToken((uint64_t)this, 356, "expected 'summaries' here") & 1) == 0
      && (llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) == 0
      && (llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) == 0)
    {
      v11 = *((_DWORD *)this + 56);
      v12 = v22;
      while (1)
      {
        switch(v11)
        {
          case 94:
            if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
              sub_1C47EBC30(&v15, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
            else
              v15 = v23;
            v13 = llvm::LLParser::parseAliasSummary((uint64_t)this, (uint64_t)&v15, v12, a2);
            if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
            {
              v14 = (void *)v15.__r_.__value_.__r.__words[0];
              goto LABEL_41;
            }
            break;
          case 387:
            if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
              sub_1C47EBC30(&__p, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
            else
              __p = v23;
            v13 = llvm::LLParser::parseVariableSummary((uint64_t)this, (uint64_t)&__p, v12, a2);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              v14 = (void *)__p.__r_.__value_.__r.__words[0];
              goto LABEL_41;
            }
            break;
          case 365:
            if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
              sub_1C47EBC30(&__dst, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
            else
              __dst = v23;
            v13 = llvm::LLParser::parseFunctionSummary((uint64_t)this, (uint64_t)&__dst, v12, a2);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            {
              v14 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_41:
              operator delete(v14);
            }
            break;
          default:
            v8 = (char *)*((_QWORD *)this + 27);
            v9 = "expected summary type";
            goto LABEL_14;
        }
        if ((v13 & 1) != 0)
          break;
        if (*((_DWORD *)this + 56) != 4)
        {
          if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
            break;
          v10 = llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here");
          goto LABEL_15;
        }
        v11 = llvm::LLLexer::LexToken(v4);
        *((_DWORD *)this + 56) = v11;
      }
    }
  }
  else if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) == 0)
  {
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      sub_1C47EBC30(&v19, v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
    else
      v19 = v23;
    v18 = 0;
    llvm::LLParser::addGlobalValueToIndex((uint64_t)this, &v19, v22, 0, a2, &v18);
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    v5 = 0;
    goto LABEL_16;
  }
LABEL_12:
  v5 = 1;
LABEL_16:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  return v5;
}

uint64_t llvm::LLParser::parseModuleEntry(llvm::LLParser *this, unsigned int a2)
{
  uint64_t v4;
  uint64_t v6;
  std::string *p_p;
  size_t size;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t **v13;
  unsigned int v14;
  uint64_t **v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19[4];
  unsigned int v20;
  std::string __p;
  std::string *v22;
  size_t v23;
  uint64_t v24;
  __int128 v25;
  unsigned int v26;

  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  memset(&__p, 0, sizeof(__p));
  if ((llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 351, "expected 'path' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseStringConstant((uint64_t)this, &__p) & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 352, "expected 'hash' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0
    || (llvm::LLParser::parseUInt32(this, v19) & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' here") & 1) != 0
    || (llvm::LLParser::parseUInt32(this, &v19[1]) & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' here") & 1) != 0
    || (llvm::LLParser::parseUInt32(this, &v19[2]) & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' here") & 1) != 0
    || (llvm::LLParser::parseUInt32(this, &v19[3]) & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' here") & 1) != 0
    || (llvm::LLParser::parseUInt32(this, &v20) & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
  {
    v4 = 1;
  }
  else
  {
    v6 = *((_QWORD *)this + 42);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    v25 = *(_OWORD *)v19;
    v26 = v20;
    v22 = p_p;
    v23 = size;
    v24 = a2;
    v9 = sub_1C61CDF18(v6 + 24, (unsigned __int8 *)p_p, size, &v24);
    v10 = *v9 + 40;
    v11 = *(uint64_t **)*v9;
    v12 = (char *)*((_QWORD *)this + 158);
    if (v12)
    {
      while (1)
      {
        while (1)
        {
          v13 = (uint64_t **)v12;
          v14 = *((_DWORD *)v12 + 8);
          if (v14 <= a2)
            break;
          v12 = (char *)*v13;
          v15 = v13;
          if (!*v13)
            goto LABEL_39;
        }
        if (v14 >= a2)
          break;
        v12 = (char *)v13[1];
        if (!v12)
        {
          v15 = v13 + 1;
          goto LABEL_39;
        }
      }
    }
    else
    {
      v15 = (uint64_t **)((char *)this + 1264);
      v13 = (uint64_t **)((char *)this + 1264);
LABEL_39:
      v16 = (char *)v13;
      v13 = (uint64_t **)operator new(0x38uLL);
      *((_DWORD *)v13 + 8) = a2;
      *v13 = 0;
      v13[1] = 0;
      v13[5] = 0;
      v13[6] = 0;
      v13[2] = (uint64_t *)v16;
      *v15 = (uint64_t *)v13;
      v17 = **((_QWORD **)this + 157);
      v18 = (uint64_t *)v13;
      if (v17)
      {
        *((_QWORD *)this + 157) = v17;
        v18 = *v15;
      }
      sub_1C4768E74(*((uint64_t **)this + 158), v18);
      ++*((_QWORD *)this + 159);
    }
    v4 = 0;
    v13[5] = (uint64_t *)v10;
    v13[6] = v11;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

uint64_t llvm::LLParser::parseTypeIdEntry(llvm::LLParser *this, unsigned int a2)
{
  uint64_t v4;
  int *v6;
  size_t v7;
  uint64_t *v8;
  char *v9;
  uint64_t **v10;
  char *v11;
  char *v12;
  unsigned int v13;
  BOOL v14;
  char **v15;
  _QWORD *v16;
  _QWORD *i;
  _QWORD *v18;
  _QWORD *v19;
  int *p_p;
  size_t size;
  std::string __p;
  int v23[4];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  memset(&__p, 0, sizeof(__p));
  if ((llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 355, "expected 'name' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseStringConstant((uint64_t)this, &__p) & 1) != 0
    || ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v6 = (int *)&__p)
      : (v6 = (int *)__p.__r_.__value_.__r.__words[0]),
        (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v7 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F)
      : (v7 = __p.__r_.__value_.__l.__size_),
        (v8 = sub_1C4FC90EC(*((_QWORD *)this + 42), v6, v7),
         (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' here") & 1) != 0)
     || (llvm::LLParser::parseTypeIdSummary((uint64_t)this, (uint64_t)v8) & 1) != 0
     || (llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0))
  {
    v4 = 1;
  }
  else
  {
    v9 = (char *)*((_QWORD *)this + 155);
    if (v9)
    {
      v10 = (uint64_t **)((char *)this + 1232);
      v11 = (char *)this + 1240;
      v12 = (char *)this + 1240;
      do
      {
        v13 = *((_DWORD *)v9 + 8);
        v14 = v13 >= a2;
        if (v13 >= a2)
          v15 = (char **)v9;
        else
          v15 = (char **)(v9 + 8);
        if (v14)
          v12 = v9;
        v9 = *v15;
      }
      while (*v15);
      if (v12 != v11 && *((_DWORD *)v12 + 8) <= a2)
      {
        v16 = (_QWORD *)*((_QWORD *)v12 + 5);
        for (i = (_QWORD *)*((_QWORD *)v12 + 6); v16 != i; *v18 = *(_QWORD *)v23)
        {
          v19 = (_QWORD *)*v16;
          v16 += 2;
          v18 = v19;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = (int *)&__p;
          else
            p_p = (int *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
          else
            size = __p.__r_.__value_.__l.__size_;
          v24 = xmmword_1C85F4BB0;
          v25 = 0;
          llvm::MD5::update((int *)&v24, p_p, size);
          llvm::MD5::final((int *)&v24, v23);
        }
        sub_1C61CEB80(v10, (uint64_t *)v12);
      }
    }
    v4 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

uint64_t llvm::LLParser::parseTypeIdCompatibleVtableEntry(llvm::LLParser *this, unsigned int a2)
{
  llvm::LLLexer *v4;
  uint64_t v5;
  std::string *v7;
  size_t v8;
  unint64_t **v9;
  llvm::LLParser *i;
  uint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  unint64_t *v36;
  unint64_t *v37;
  unint64_t *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t *v50;
  char *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  BOOL v55;
  char *v56;
  uint64_t **v57;
  char *v58;
  char *v59;
  unsigned int v60;
  BOOL v61;
  char **v62;
  uint64_t **v63;
  uint64_t **j;
  uint64_t *v65;
  uint64_t *v66;
  int *v67;
  size_t size;
  _QWORD *v69;
  unint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t **v73;
  unint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t *v80;
  _QWORD *v81[2];
  std::string v82;

  v4 = (llvm::LLParser *)((char *)this + 168);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  memset(&v82, 0, sizeof(v82));
  if ((llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 355, "expected 'name' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseStringConstant((uint64_t)this, &v82) & 1) != 0
    || ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v7 = &v82)
      : (v7 = (std::string *)v82.__r_.__value_.__r.__words[0]),
        (v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v8 = *((_BYTE *)&v82.__r_.__value_.__s + 23) & 0x7F)
      : (v8 = v82.__r_.__value_.__l.__size_),
        (v9 = (unint64_t **)sub_1C4EEC3B4(*((_QWORD *)this + 42), v7, v8),
         (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' here") & 1) != 0)
     || (llvm::LLParser::parseToken((uint64_t)this, 403, "expected 'summary' here") & 1) != 0
     || (llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0
     || (llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0))
  {
    v5 = 1;
  }
  else
  {
    v81[0] = 0;
    v81[1] = 0;
    v80 = (uint64_t *)v81;
    v74 = 0;
    for (i = this; ; i = this)
    {
      if ((llvm::LLParser::parseToken((uint64_t)i, 12, "expected '(' here") & 1) != 0)
        goto LABEL_96;
      if ((llvm::LLParser::parseToken((uint64_t)this, 399, "expected 'offset' here") & 1) != 0)
        goto LABEL_96;
      if ((llvm::LLParser::parseToken((uint64_t)this, 16, "expected ':' here") & 1) != 0)
        goto LABEL_96;
      if ((llvm::LLParser::parseUInt64((char **)this, &v74) & 1) != 0)
        goto LABEL_96;
      if ((llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' here") & 1) != 0)
        goto LABEL_96;
      v11 = *((_QWORD *)this + 27);
      v79 = 0;
      v78 = 0;
      if (llvm::LLParser::parseGVReference(this, (llvm::ValueInfo *)&v78, &v79))
        goto LABEL_96;
      v12 = v78;
      if ((~v78 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        v13 = sub_1C4FD085C(&v80, v79, &v79);
        v14 = v13;
        v72 = (unint64_t)((char *)v9[1] - (char *)*v9) >> 4;
        v16 = v13[6];
        v15 = v13[7];
        if (v16 >= v15)
        {
          v18 = v13[5];
          v19 = ((char *)v16 - (char *)v18) >> 4;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 60)
            goto LABEL_119;
          v21 = (char *)v15 - (char *)v18;
          if (v21 >> 3 > v20)
            v20 = v21 >> 3;
          v61 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0;
          v22 = 0xFFFFFFFFFFFFFFFLL;
          if (!v61)
            v22 = v20;
          v70 = v22;
          if (v22)
          {
            if (v22 >> 60)
              goto LABEL_120;
            v23 = (char *)operator new(16 * v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = &v23[16 * v19];
          *(_DWORD *)v24 = v72;
          *((_QWORD *)v24 + 1) = v11;
          v25 = (uint64_t *)v24;
          if (v16 != v18)
          {
            do
            {
              *((_OWORD *)v25 - 1) = *((_OWORD *)v16 - 1);
              v25 -= 2;
              v16 -= 2;
            }
            while (v16 != v18);
            v16 = v14[5];
          }
          v17 = (uint64_t *)(v24 + 16);
          v14[5] = v25;
          v14[6] = (uint64_t *)(v24 + 16);
          v14[7] = (uint64_t *)&v23[16 * v70];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_DWORD *)v16 = v72;
          v16[1] = v11;
          v17 = v16 + 2;
        }
        v14[6] = v17;
      }
      v26 = v74;
      v28 = v9[1];
      v27 = (unint64_t)v9[2];
      if ((unint64_t)v28 >= v27)
      {
        v30 = *v9;
        v31 = ((char *)v28 - (char *)*v9) >> 4;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 60)
LABEL_119:
          abort();
        v33 = v27 - (_QWORD)v30;
        if (v33 >> 3 > v32)
          v32 = v33 >> 3;
        v34 = (unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v32;
        if (v34)
        {
          if (v34 >> 60)
LABEL_120:
            sub_1C4764EE4();
          v35 = (char *)operator new(16 * v34);
        }
        else
        {
          v35 = 0;
        }
        v36 = (unint64_t *)&v35[16 * v31];
        *v36 = v26;
        v36[1] = v12;
        v37 = v36;
        if (v28 != v30)
        {
          do
          {
            *((_OWORD *)v37 - 1) = *((_OWORD *)v28 - 1);
            v37 -= 2;
            v28 -= 2;
          }
          while (v28 != v30);
          v28 = *v9;
        }
        v38 = (unint64_t *)&v35[16 * v34];
        v29 = v36 + 2;
        *v9 = v37;
        v9[1] = v36 + 2;
        v9[2] = v38;
        if (v28)
          operator delete(v28);
      }
      else
      {
        *v28 = v74;
        v28[1] = v12;
        v29 = v28 + 2;
      }
      v9[1] = v29;
      if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' in call") & 1) != 0)
        goto LABEL_96;
      if (*((_DWORD *)this + 56) != 4)
        break;
      *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v4);
      v74 = 0;
    }
    v71 = v80;
    if (v80 != (uint64_t *)v81)
    {
      do
      {
        LODWORD(v74) = *((_DWORD *)v71 + 8);
        v76 = 0;
        v77 = 0;
        v75 = 0;
        sub_1C4EECB34(&v75, (_BYTE *)v71[5], (_BYTE *)v71[6], (v71[6] - v71[5]) >> 4);
        v73 = sub_1C4FD085C((uint64_t **)this + 145, v74, &v74);
        v39 = v75;
        v69 = v76;
        if (v75 != v76)
        {
          v40 = v73[6];
          do
          {
            v41 = v39[1];
            v42 = (uint64_t)&(*v9)[2 * *(unsigned int *)v39 + 1];
            v43 = v73[7];
            if (v40 >= v43)
            {
              v44 = v73[5];
              v45 = ((char *)v40 - (char *)v44) >> 4;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 60)
                goto LABEL_119;
              v47 = (char *)v43 - (char *)v44;
              if (v47 >> 3 > v46)
                v46 = v47 >> 3;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFF0)
                v48 = 0xFFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48 >> 60)
                goto LABEL_120;
              v49 = (char *)operator new(16 * v48);
              v50 = (uint64_t *)&v49[16 * v45];
              *v50 = v42;
              v50[1] = v41;
              if (v40 == v44)
              {
                v52 = (uint64_t *)&v49[16 * v45];
              }
              else
              {
                v51 = &v49[16 * v45];
                do
                {
                  v52 = (uint64_t *)(v51 - 16);
                  *((_OWORD *)v51 - 1) = *((_OWORD *)v40 - 1);
                  v40 -= 2;
                  v51 -= 16;
                }
                while (v40 != v44);
              }
              v40 = v50 + 2;
              v73[5] = v52;
              v73[6] = v50 + 2;
              v73[7] = (uint64_t *)&v49[16 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *v40 = v42;
              v40[1] = v41;
              v40 += 2;
            }
            v73[6] = v40;
            v39 += 2;
          }
          while (v39 != v69);
          v39 = v75;
        }
        if (v39)
          operator delete(v39);
        v53 = (uint64_t *)v71[1];
        if (v53)
        {
          do
          {
            v54 = v53;
            v53 = (uint64_t *)*v53;
          }
          while (v53);
        }
        else
        {
          do
          {
            v54 = (uint64_t *)v71[2];
            v55 = *v54 == (_QWORD)v71;
            v71 = v54;
          }
          while (!v55);
        }
        v71 = v54;
      }
      while (v54 != (uint64_t *)v81);
    }
    if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0
      || (llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    {
LABEL_96:
      v5 = 1;
      goto LABEL_97;
    }
    v56 = (char *)*((_QWORD *)this + 155);
    if (v56)
    {
      v57 = (uint64_t **)((char *)this + 1232);
      v58 = (char *)this + 1240;
      v59 = (char *)this + 1240;
      do
      {
        v60 = *((_DWORD *)v56 + 8);
        v61 = v60 >= a2;
        if (v60 >= a2)
          v62 = (char **)v56;
        else
          v62 = (char **)(v56 + 8);
        if (v61)
          v59 = v56;
        v56 = *v62;
      }
      while (*v62);
      if (v59 != v58 && *((_DWORD *)v59 + 8) <= a2)
      {
        v63 = (uint64_t **)*((_QWORD *)v59 + 5);
        for (j = (uint64_t **)*((_QWORD *)v59 + 6); v63 != j; *v65 = sub_1C4FC938C(v67, size))
        {
          v66 = *v63;
          v63 += 2;
          v65 = v66;
          if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = (int *)&v82;
          else
            v67 = (int *)v82.__r_.__value_.__r.__words[0];
          if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&v82.__r_.__value_.__s + 23) & 0x7F;
          else
            size = v82.__r_.__value_.__l.__size_;
        }
        sub_1C61CEB80(v57, (uint64_t *)v59);
      }
    }
    v5 = 0;
LABEL_97:
    sub_1C61CEBB4(v81[0]);
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  return v5;
}

uint64_t llvm::LLParser::parseValID(uint64_t **a1, uint64_t a2, const llvm::APInt *a3, llvm::Type *a4)
{
  llvm::LLLexer *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  llvm::ValueHandleBase *v11;
  llvm::ConstantInt *v12;
  char v14;
  llvm::GlobalValue *v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  char *v25;
  llvm::Type *v26;
  uint64_t v27;
  char *v28;
  llvm *v29;
  int v30;
  int v31;
  unsigned int v32;
  unint64_t v33;
  BOOL v34;
  int v35;
  BOOL v36;
  BOOL v37;
  int v38;
  char v39;
  int v41;
  int v42;
  llvm::Type **v43;
  llvm::Type *v44;
  uint64_t FCmp;
  const void **v46;
  void **v47;
  int v49;
  int v50;
  char *v51;
  std::string *v52;
  llvm *v53;
  llvm::Constant *v54;
  llvm::Type *v55;
  uint64_t v56;
  llvm::Type *v57;
  int v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  llvm::Type *v65;
  unint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v70;
  uint64_t v71;
  llvm::ConstantExpr *v72;
  llvm::Type *v73;
  unsigned int v74;
  llvm::DSOLocalEquivalent *v75;
  size_t v76;
  void *v77;
  uint64_t v78;
  int v79;
  int v80;
  llvm::PoisonValue *v82;
  uint64_t v83;
  std::string::size_type v84;
  llvm::Type *v85;
  char *v86;
  llvm::Constant *v87;
  llvm::Type *v88;
  uint64_t v89;
  llvm::Type *v90;
  int v91;
  char *v92;
  const char *v93;
  uint64_t v94;
  llvm::FixedVectorType ***v95;
  unsigned __int8 *v96;
  unsigned int v97;
  unsigned int v100;
  unsigned int v101;
  uint64_t Impl;
  _QWORD **v103;
  uint64_t v104;
  char *v105;
  unsigned __int8 *v106;
  unint64_t v107;
  llvm::ConstantInt *v108;
  unsigned int v109;
  char v110;
  llvm::Value *v111;
  const llvm::Value *v112;
  llvm::Type *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned __int8 *v117;
  uint64_t v118;
  BOOL v119;
  int v120;
  llvm::Type *v121;
  uint64_t v122;
  llvm::Type *v123;
  unint64_t v124;
  int v125;
  llvm::Type **v126;
  std::string *v127;
  std::string::size_type v128;
  void *v129;
  llvm::Type *v130;
  llvm::Type *v131;
  uint64_t ElementInstruction;
  uint64_t v133;
  BOOL v134;
  llvm::Value *v135;
  uint64_t v136;
  uint64_t **v137;
  uint64_t v138;
  int v139;
  unint64_t v140;
  unsigned int v141;
  llvm::Type **v142;
  uint64_t v143;
  llvm::GetElementPtrInst *TypeAtIndex;
  llvm::Type *v145;
  char v146;
  uint64_t *v147;
  std::string::size_type v148;
  _QWORD **v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  llvm::Constant *v153;
  llvm::Constant *v154;
  uint64_t v155;
  char *v156;
  uint64_t *v157;
  uint64_t v158;
  char *v159;
  const char *v160;
  char v161;
  char *v162;
  const char *v163;
  void *Value;
  char *v165;
  char *v166;
  unsigned int v167;
  unsigned __int8 *v168;
  unint64_t v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  _DWORD *v176;
  char v177;
  _QWORD **v178;
  uint64_t v179;
  char *v180;
  char *v181;
  char *v182;
  std::string *v183;
  std::string::size_type v184;
  std::string *v185;
  std::string::size_type v186;
  std::string *v187;
  std::string::size_type size;
  std::string *v189;
  std::string::size_type v190;
  std::string *v191;
  uint64_t v192;
  _DWORD *v193;
  uint64_t v194;
  llvm::PointerType *v195;
  unsigned __int8 *v196;
  uint64_t v197;
  int data;
  uint64_t BB;
  llvm::BasicBlock *v200;
  unint64_t v201;
  uint64_t v202;
  llvm::Function *v203;
  char *v204;
  std::string *v205;
  std::string::size_type v206;
  std::string *v207;
  uint64_t v208;
  char *v209;
  std::string *v210;
  std::string::size_type v211;
  std::string *v212;
  std::string::size_type v213;
  llvm::Type **v214;
  std::string::size_type v215;
  std::string *v216;
  std::string::size_type v217;
  std::string *v218;
  std::string::size_type v219;
  llvm::Type *v220[2];
  char v221;
  llvm::Constant *v222;
  std::string v223;
  llvm::Constant *v224;
  std::string v225;
  std::string v226;
  llvm::Type *v227[2];
  uint64_t v228;
  __int128 v229;
  __int128 v230;
  void *v231;
  char v232;
  uint64_t v233;
  unsigned int v234;
  uint64_t v235;
  uint64_t v236[3];
  uint64_t v237;
  uint64_t v238;
  void *__src;
  llvm::Type *v240;
  uint64_t v241;
  __int128 v242;
  __int128 v243;
  __int128 __p;
  uint64_t v245;
  uint64_t v246;
  unsigned int v247;
  char v248;
  llvm::Type *v249;
  llvm::Type *v250;
  int v251;
  char v252;
  uint64_t v253;
  char v254;
  std::string v255;
  std::string v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  uint64_t v260;
  uint64_t v261;
  unsigned int v262;
  char v263;
  _DWORD *v264;
  llvm::Type *v265;
  int v266;
  char v267;
  uint64_t v268;
  char v269;
  std::string v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  char v277;
  _DWORD *v278;
  llvm::Type *v279;
  int v280;
  char v281;
  uint64_t v282;
  char v283;
  uint64_t v284;

  v284 = *MEMORY[0x1E0C80C00];
  v6 = (llvm::LLLexer *)(a1 + 21);
  *(_QWORD *)(a2 + 8) = a1[27];
  v7 = *((_DWORD *)a1 + 56);
  if (v7 > 275)
  {
    if (v7 > 432)
    {
      switch(v7)
      {
        case 433:
          *(_DWORD *)(a2 + 16) = *((_DWORD *)a1 + 64);
          v8 = 1;
          goto LABEL_92;
        case 434:
          v8 = 0;
          *(_DWORD *)(a2 + 16) = *((_DWORD *)a1 + 64);
          goto LABEL_92;
        case 435:
        case 436:
        case 437:
        case 439:
          goto LABEL_210;
        case 438:
          std::string::operator=((std::string *)(a2 + 32), (const std::string *)(a1 + 29));
          v8 = 3;
          goto LABEL_92;
        case 440:
          std::string::operator=((std::string *)(a2 + 32), (const std::string *)(a1 + 29));
          v8 = 2;
          goto LABEL_92;
        default:
          if (v7 == 456)
          {
            sub_1C4DF91B8((llvm::detail::IEEEFloat *)(a2 + 104), (uint64_t)(a1 + 35));
            v8 = 5;
          }
          else
          {
            if (v7 != 457)
              goto LABEL_210;
            if (*(_DWORD *)(a2 + 88) > 0x40u || *((_DWORD *)a1 + 78) > 0x40u)
            {
              v46 = (const void **)(a1 + 38);
              v47 = (void **)(a2 + 80);
              if ((uint64_t **)(a2 + 80) != a1 + 38)
              {
                llvm::APInt::reallocate(a2 + 80, *((_DWORD *)a1 + 78));
                v104 = *(unsigned int *)(a2 + 88);
                if (v104 <= 0x40)
                  *v47 = (void *)*v46;
                else
                  memcpy(*v47, *v46, ((unint64_t)(v104 + 63) >> 3) & 0x3FFFFFF8);
              }
            }
            else
            {
              *(_QWORD *)(a2 + 80) = a1[38];
              *(_DWORD *)(a2 + 88) = *((_DWORD *)a1 + 78);
            }
            *(_BYTE *)(a2 + 92) = *((_BYTE *)a1 + 316);
            v8 = 4;
          }
          break;
      }
      goto LABEL_92;
    }
    switch(v7)
    {
      case 276:
        v72 = (llvm::ConstantExpr *)*((unsigned int *)a1 + 64);
        v270.__r_.__value_.__r.__words[0] = 0;
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        if ((llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in unary constantexpr") & 1) != 0)
          goto LABEL_96;
        v227[0] = 0;
        __src = "expected type";
        WORD4(v242) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, v227, (const llvm::Twine *)&__src, 0) & 1) != 0
          || (llvm::LLParser::parseGlobalValue((llvm::LLParser *)a1, v227[0], (llvm::Constant **)&v270) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in unary constantexpr") & 1) != 0)
        {
          goto LABEL_96;
        }
        if ((*(_DWORD *)(*(_QWORD *)v270.__r_.__value_.__l.__data_ + 8) & 0xFE) == 0x12)
          v74 = *(unsigned __int8 *)(**(_QWORD **)(*(_QWORD *)v270.__r_.__value_.__l.__data_ + 16) + 8);
        else
          v74 = *(_DWORD *)(*(_QWORD *)v270.__r_.__value_.__l.__data_ + 8);
        if (v74 >= 7)
          goto LABEL_469;
        FCmp = llvm::ConstantExpr::get(v72, (unsigned __int8 *)v270.__r_.__value_.__l.__data_, 0, 0, v73);
        goto LABEL_393;
      case 277:
      case 278:
      case 279:
      case 280:
      case 281:
      case 282:
      case 283:
      case 284:
      case 285:
      case 286:
      case 287:
      case 288:
      case 289:
      case 290:
      case 291:
        v29 = (llvm *)*((unsigned int *)a1 + 64);
        v270.__r_.__value_.__r.__words[0] = 0;
        v256.__r_.__value_.__r.__words[0] = 0;
        v30 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        v31 = v30;
        *((_DWORD *)a1 + 56) = v30;
        HIDWORD(v33) = (_DWORD)v29 - 13;
        LODWORD(v33) = (_DWORD)v29 - 13;
        v32 = v33 >> 1;
        v34 = v32 > 6;
        v35 = (1 << v32) & 0x47;
        v36 = v34 || v35 == 0;
        if (v36)
        {
          v39 = 0;
          if (v29 > 0x1B)
          {
            v41 = 0;
            v37 = 0;
          }
          else
          {
            v41 = 0;
            v37 = 0;
            if (((1 << (char)v29) & 0xC180000) != 0)
            {
              if (v30 == 87)
              {
                v41 = 0;
                v37 = 0;
                *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken(v6);
                v39 = 1;
              }
              else
              {
                v39 = 0;
                v41 = 0;
                v37 = 0;
              }
            }
          }
        }
        else
        {
          v37 = v30 == 85;
          if (v30 == 85)
          {
            v30 = llvm::LLLexer::LexToken(v6);
            *((_DWORD *)a1 + 56) = v30;
          }
          if (v30 == 86)
          {
            v38 = llvm::LLLexer::LexToken(v6);
            *((_DWORD *)a1 + 56) = v38;
            if (v38 == 85)
              *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken(v6);
            v39 = 0;
            v37 = v31 == 85 || v38 == 85;
            v41 = 1;
          }
          else
          {
            v39 = 0;
            v41 = 0;
          }
        }
        if ((llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in binary constantexpr") & 1) != 0)
          goto LABEL_96;
        v227[0] = 0;
        __src = "expected type";
        WORD4(v242) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, v227, (const llvm::Twine *)&__src, 0) & 1) != 0)
          goto LABEL_96;
        if ((llvm::LLParser::parseGlobalValue((llvm::LLParser *)a1, v227[0], (llvm::Constant **)&v270) & 1) != 0)
          goto LABEL_96;
        if ((llvm::LLParser::parseToken((uint64_t)a1, 4, "expected comma in binary constantexpr") & 1) != 0)
          goto LABEL_96;
        v227[0] = 0;
        __src = "expected type";
        WORD4(v242) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, v227, (const llvm::Twine *)&__src, 0) & 1) != 0
          || (llvm::LLParser::parseGlobalValue((llvm::LLParser *)a1, v227[0], (llvm::Constant **)&v256) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in binary constantexpr") & 1) != 0)
        {
          goto LABEL_96;
        }
        v88 = (llvm::Type *)v270.__r_.__value_.__r.__words[0];
        v89 = *(_QWORD *)v270.__r_.__value_.__l.__data_;
        v90 = (llvm::Type *)v256.__r_.__value_.__r.__words[0];
        if (*(_QWORD *)v270.__r_.__value_.__l.__data_ != *(_QWORD *)v256.__r_.__value_.__l.__data_)
          goto LABEL_500;
        if (((1 << (char)v29) & 0xEDAA000) != 0)
        {
          if ((*(_DWORD *)(v89 + 8) & 0xFE) == 0x12)
            v91 = *(unsigned __int8 *)(**(_QWORD **)(v89 + 16) + 8);
          else
            v91 = *(_DWORD *)(v89 + 8);
          if (v91 != 13)
          {
            v86 = *(char **)(a2 + 8);
            v105 = "constexpr requires integer operands";
            goto LABEL_244;
          }
        }
        else
        {
          if ((*(_DWORD *)(v89 + 8) & 0xFE) == 0x12)
            v167 = *(unsigned __int8 *)(**(_QWORD **)(v89 + 16) + 8);
          else
            v167 = *(_DWORD *)(v89 + 8);
          if (v167 >= 7)
          {
LABEL_469:
            v86 = *(char **)(a2 + 8);
            v105 = "constexpr requires fp operands";
            goto LABEL_244;
          }
        }
        if (v41)
          v177 = v37 | 2;
        else
          v177 = v37;
        FCmp = (uint64_t)llvm::ConstantFoldBinaryInstruction(v29, (llvm::Constant *)v270.__r_.__value_.__l.__data_, (llvm::Constant *)v256.__r_.__value_.__l.__data_, v87);
        if (FCmp)
          goto LABEL_393;
        v178 = *(_QWORD ***)v88;
        if (!*(_QWORD *)v88)
          goto LABEL_576;
        v227[0] = v88;
        v227[1] = v90;
        v179 = **v178 + 1512;
        LOBYTE(__src) = (_BYTE)v29;
        BYTE1(__src) = v177 | v39;
        goto LABEL_468;
      case 292:
      case 293:
      case 294:
        v53 = (llvm *)*((unsigned int *)a1 + 64);
        v270.__r_.__value_.__r.__words[0] = 0;
        v256.__r_.__value_.__r.__words[0] = 0;
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        if ((llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in logical constantexpr") & 1) != 0)
          goto LABEL_96;
        v227[0] = 0;
        __src = "expected type";
        WORD4(v242) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, v227, (const llvm::Twine *)&__src, 0) & 1) != 0)
          goto LABEL_96;
        if ((llvm::LLParser::parseGlobalValue((llvm::LLParser *)a1, v227[0], (llvm::Constant **)&v270) & 1) != 0)
          goto LABEL_96;
        if ((llvm::LLParser::parseToken((uint64_t)a1, 4, "expected comma in logical constantexpr") & 1) != 0)
          goto LABEL_96;
        v227[0] = 0;
        __src = "expected type";
        WORD4(v242) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, v227, (const llvm::Twine *)&__src, 0) & 1) != 0
          || (llvm::LLParser::parseGlobalValue((llvm::LLParser *)a1, v227[0], (llvm::Constant **)&v256) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in logical constantexpr") & 1) != 0)
        {
          goto LABEL_96;
        }
        v55 = (llvm::Type *)v270.__r_.__value_.__r.__words[0];
        v56 = *(_QWORD *)v270.__r_.__value_.__l.__data_;
        v57 = (llvm::Type *)v256.__r_.__value_.__r.__words[0];
        if (*(_QWORD *)v270.__r_.__value_.__l.__data_ != *(_QWORD *)v256.__r_.__value_.__l.__data_)
        {
LABEL_500:
          v86 = *(char **)(a2 + 8);
          v105 = "operands of constexpr must have same type";
          goto LABEL_244;
        }
        if ((*(_DWORD *)(v56 + 8) & 0xFE) == 0x12)
          v58 = *(unsigned __int8 *)(**(_QWORD **)(v56 + 16) + 8);
        else
          v58 = *(_DWORD *)(v56 + 8);
        if (v58 != 13)
        {
          v86 = *(char **)(a2 + 8);
          v105 = "constexpr requires integer or integer vector operands";
          goto LABEL_244;
        }
        FCmp = (uint64_t)llvm::ConstantFoldBinaryInstruction(v53, (llvm::Constant *)v270.__r_.__value_.__l.__data_, (llvm::Constant *)v256.__r_.__value_.__l.__data_, v54);
        if (!FCmp)
        {
          v178 = *(_QWORD ***)v55;
          if (*(_QWORD *)v55)
          {
            v227[0] = v55;
            v227[1] = v57;
            v179 = **v178 + 1512;
            LOWORD(__src) = v53;
LABEL_468:
            WORD1(__src) = 0;
            v240 = (llvm::Type *)v227;
            v241 = 2;
            v242 = 0u;
            v243 = 0u;
            *(_QWORD *)&__p = 0;
            FCmp = sub_1C537D4FC(v179, (uint64_t)v178, (unsigned __int8 *)&__src);
          }
          else
          {
LABEL_576:
            FCmp = 0;
          }
        }
        goto LABEL_393;
      case 295:
      case 296:
        LODWORD(v226.__r_.__value_.__l.__data_) = 0;
        v59 = *((_DWORD *)a1 + 64);
        v270.__r_.__value_.__r.__words[0] = 0;
        v256.__r_.__value_.__r.__words[0] = 0;
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        if ((llvm::LLParser::parseCmpPredicate((llvm::LLParser *)a1, (unsigned int *)&v226, v59) & 1) != 0)
          goto LABEL_96;
        if ((llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in compare constantexpr") & 1) != 0)
          goto LABEL_96;
        v227[0] = 0;
        __src = "expected type";
        WORD4(v242) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, v227, (const llvm::Twine *)&__src, 0) & 1) != 0)
          goto LABEL_96;
        if ((llvm::LLParser::parseGlobalValue((llvm::LLParser *)a1, v227[0], (llvm::Constant **)&v270) & 1) != 0)
          goto LABEL_96;
        if ((llvm::LLParser::parseToken((uint64_t)a1, 4, "expected comma in compare constantexpr") & 1) != 0)
          goto LABEL_96;
        v227[0] = 0;
        __src = "expected type";
        WORD4(v242) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, v227, (const llvm::Twine *)&__src, 0) & 1) != 0
          || (llvm::LLParser::parseGlobalValue((llvm::LLParser *)a1, v227[0], (llvm::Constant **)&v256) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in compare constantexpr") & 1) != 0)
        {
          goto LABEL_96;
        }
        v60 = *(_QWORD *)v270.__r_.__value_.__l.__data_;
        if (*(_QWORD *)v270.__r_.__value_.__l.__data_ == *(_QWORD *)v256.__r_.__value_.__l.__data_)
        {
          v61 = *(_DWORD *)(v60 + 8);
          v62 = *(_DWORD *)(v60 + 8) & 0xFE;
          if (v59 == 54)
          {
            if (v62 == 18)
              v61 = *(unsigned __int8 *)(**(_QWORD **)(v60 + 16) + 8);
            if (v61 < 7)
            {
              FCmp = llvm::ConstantExpr::getFCmp((llvm::ConstantExpr *)LOWORD(v226.__r_.__value_.__l.__data_), (uint64_t ***)v270.__r_.__value_.__l.__data_, (llvm::Constant *)v256.__r_.__value_.__l.__data_, 0);
              goto LABEL_393;
            }
            v86 = *(char **)(a2 + 8);
            v105 = "fcmp requires floating point operands";
          }
          else
          {
            if (v62 == 18)
              v61 = *(unsigned __int8 *)(**(_QWORD **)(v60 + 16) + 8);
            if (v61 == 13 || v61 == 15)
            {
              FCmp = (uint64_t)llvm::ConstantExpr::getICmp((llvm::ConstantExpr *)LOWORD(v226.__r_.__value_.__l.__data_), (unsigned __int8 *)v270.__r_.__value_.__l.__data_, (llvm::Constant *)v256.__r_.__value_.__l.__data_, 0);
              goto LABEL_393;
            }
            v86 = *(char **)(a2 + 8);
            v105 = "icmp requires pointer or integer operands";
          }
        }
        else
        {
          v86 = *(char **)(a2 + 8);
          v105 = "compare operands must have the same type";
        }
        goto LABEL_244;
      case 299:
      case 300:
      case 301:
      case 302:
      case 303:
      case 304:
      case 305:
      case 306:
      case 307:
      case 308:
      case 309:
      case 310:
      case 311:
        v42 = *((_DWORD *)a1 + 64);
        v220[0] = 0;
        v224 = 0;
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        if ((llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' after constantexpr cast") & 1) != 0)
          goto LABEL_96;
        v227[0] = 0;
        __src = "expected type";
        WORD4(v242) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, v227, (const llvm::Twine *)&__src, 0) & 1) != 0)
          goto LABEL_96;
        if ((llvm::LLParser::parseGlobalValue((llvm::LLParser *)a1, v227[0], &v224) & 1) != 0)
          goto LABEL_96;
        if ((llvm::LLParser::parseToken((uint64_t)a1, 55, "expected 'to' in constantexpr cast") & 1) != 0)
          goto LABEL_96;
        __src = "expected type";
        WORD4(v242) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, v220, (const llvm::Twine *)&__src, 0) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' at end of constantexpr cast") & 1) != 0)
        {
          goto LABEL_96;
        }
        v43 = (llvm::Type **)v224;
        v44 = v220[0];
        if (llvm::CastInst::castIsValid(v42, *(llvm::Type **)v224, (uint64_t)v220[0]))
        {
          FCmp = llvm::ConstantExpr::getCast(v42);
LABEL_393:
          v14 = 0;
          *(_QWORD *)(a2 + 128) = FCmp;
          *(_DWORD *)a2 = 12;
        }
        else
        {
          v182 = *(char **)(a2 + 8);
          sub_1C4FB7C44((uint64_t)&v225, *v43);
          v183 = std::string::insert(&v225, 0, "invalid cast opcode for cast from '");
          v184 = v183->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v226.__r_.__value_.__l.__data_ = *(_OWORD *)&v183->__r_.__value_.__l.__data_;
          v226.__r_.__value_.__r.__words[2] = v184;
          v183->__r_.__value_.__l.__size_ = 0;
          v183->__r_.__value_.__r.__words[2] = 0;
          v183->__r_.__value_.__r.__words[0] = 0;
          v185 = std::string::append(&v226, "' to '");
          v186 = v185->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v256.__r_.__value_.__l.__data_ = *(_OWORD *)&v185->__r_.__value_.__l.__data_;
          v256.__r_.__value_.__r.__words[2] = v186;
          v185->__r_.__value_.__l.__size_ = 0;
          v185->__r_.__value_.__r.__words[2] = 0;
          v185->__r_.__value_.__r.__words[0] = 0;
          sub_1C4FB7C44((uint64_t)&v223, v44);
          if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v187 = &v223;
          else
            v187 = (std::string *)v223.__r_.__value_.__r.__words[0];
          if ((v223.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&v223.__r_.__value_.__s + 23) & 0x7F;
          else
            size = v223.__r_.__value_.__l.__size_;
          v189 = std::string::append(&v256, (const std::string::value_type *)v187, size);
          v190 = v189->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v270.__r_.__value_.__l.__data_ = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
          v270.__r_.__value_.__r.__words[2] = v190;
          v189->__r_.__value_.__l.__size_ = 0;
          v189->__r_.__value_.__r.__words[2] = 0;
          v189->__r_.__value_.__r.__words[0] = 0;
          v191 = std::string::append(&v270, "'");
          v192 = v191->__r_.__value_.__r.__words[2];
          *(_OWORD *)v227 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
          v228 = v192;
          v191->__r_.__value_.__l.__size_ = 0;
          v191->__r_.__value_.__r.__words[2] = 0;
          v191->__r_.__value_.__r.__words[0] = 0;
          WORD4(v242) = 260;
          __src = v227;
          v14 = llvm::LLLexer::Error((uint64_t)v6, v182, (llvm::Twine *)&__src);
          if (SHIBYTE(v228) < 0)
            operator delete(v227[0]);
          if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v270.__r_.__value_.__l.__data_);
          if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v223.__r_.__value_.__l.__data_);
          if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v256.__r_.__value_.__l.__data_);
          if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v226.__r_.__value_.__l.__data_);
          if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
          {
            v17 = (void *)v225.__r_.__value_.__r.__words[0];
            goto LABEL_30;
          }
        }
        return v14 & 1;
      case 312:
      case 338:
      case 339:
      case 340:
      case 341:
        v49 = *((_DWORD *)a1 + 64);
        __src = &v241;
        v240 = (llvm::Type *)0x1000000000;
        v256.__r_.__value_.__r.__words[0] = 0;
        v50 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        *((_DWORD *)a1 + 56) = v50;
        if (v49 == 34)
        {
          v14 = v50 == 88;
          if (v50 == 88)
            *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken(v6);
          if ((llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in constantexpr") & 1) != 0)
            goto LABEL_121;
          v51 = (char *)a1[27];
          v227[0] = (llvm::Type *)"expected type";
          WORD4(v229) = 259;
          if ((llvm::LLParser::parseType((llvm::LLParser *)a1, (llvm::Type **)&v256, (const llvm::Twine *)v227, 0) & 1) != 0
            || (llvm::LLParser::parseToken((uint64_t)a1, 4, "expected comma after getelementptr's type") & 1) != 0)
          {
            goto LABEL_121;
          }
          v52 = &v226;
        }
        else
        {
          if ((llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in constantexpr") & 1) != 0)
            goto LABEL_121;
          v14 = 0;
          v52 = 0;
          v51 = (char *)a1[27];
        }
        v226.__r_.__value_.__s.__data_[0] = 0;
        v226.__r_.__value_.__s.__data_[4] = 0;
        if ((llvm::LLParser::parseGlobalValueVector(a1, (uint64_t)&__src, (uint64_t)v52) & 1) == 0
          && (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in constantexpr") & 1) == 0)
        {
          switch(v49)
          {
            case '"':
              if ((_DWORD)v240)
              {
                v114 = (char *)__src;
                v115 = **(_QWORD **)__src;
                if ((*(_DWORD *)(v115 + 8) & 0xFE) == 0x12)
                {
                  v116 = **(_QWORD **)(v115 + 16);
                  if (*(_BYTE *)(v116 + 8) == 15)
                  {
                    v117 = (unsigned __int8 *)v256.__r_.__value_.__r.__words[0];
                    v118 = *(_QWORD *)(v116 + 24);
                    if (v118)
                      v119 = v118 == v256.__r_.__value_.__r.__words[0];
                    else
                      v119 = 1;
                    if (!v119)
                    {
                      v115 = **(_QWORD **)(v115 + 16);
                      goto LABEL_387;
                    }
                    v120 = *(_DWORD *)(v115 + 32);
                    goto LABEL_326;
                  }
                }
                else if (*(_DWORD *)(v115 + 8) == 15)
                {
                  v117 = (unsigned __int8 *)v256.__r_.__value_.__r.__words[0];
                  v133 = *(_QWORD *)(v115 + 24);
                  if (v133)
                    v134 = v133 == v256.__r_.__value_.__r.__words[0];
                  else
                    v134 = 1;
                  if (!v134)
                  {
LABEL_387:
                    sub_1C4FB6A84((uint64_t)&v270, (llvm::Type *)v117, **(llvm::Type ***)(v115 + 16));
                    WORD4(v229) = 260;
                    v227[0] = (llvm::Type *)&v270;
                    v14 = llvm::LLLexer::Error((uint64_t)v6, v51, (llvm::Twine *)v227);
                    if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v270.__r_.__value_.__l.__data_);
                    goto LABEL_122;
                  }
                  v120 = 0;
LABEL_326:
                  v135 = (llvm::Value *)((char *)__src + 8);
                  if ((_DWORD)v240 != 1)
                  {
                    v136 = 8 * v240 - 8;
                    v137 = (uint64_t **)((char *)__src + 8);
                    do
                    {
                      v138 = **v137;
                      if ((*(_DWORD *)(v138 + 8) & 0xFE) == 0x12)
                      {
                        if (*(_BYTE *)(**(_QWORD **)(v138 + 16) + 8) != 13)
                          goto LABEL_389;
                        v139 = *(_DWORD *)(v138 + 32);
                        if (v120)
                        {
                          v36 = v139 == v120;
                          v120 = v139;
                          if (!v36)
                          {
                            v162 = *(char **)(a2 + 8);
                            v163 = "getelementptr vector index has a wrong number of elements";
                            goto LABEL_375;
                          }
                        }
                        else
                        {
                          v120 = v139;
                        }
                      }
                      else if (*(_DWORD *)(v138 + 8) != 13)
                      {
LABEL_389:
                        v162 = *(char **)(a2 + 8);
                        v163 = "getelementptr index must be an integer";
                        goto LABEL_375;
                      }
                      ++v137;
                      v136 -= 8;
                    }
                    while (v136);
                  }
                  v140 = (8 * (unint64_t)v240 - 8) >> 3;
                  v227[0] = (llvm::Type *)((char *)&v229 + 8);
                  v227[1] = (llvm::Type *)((char *)&v229 + 8);
                  v228 = 4;
                  LODWORD(v229) = 0;
                  if (8 * v240 == 8)
                  {
                    if (!v117)
                    {
LABEL_394:
                      v159 = *(char **)(a2 + 8);
                      v160 = "invalid getelementptr indices";
                      goto LABEL_395;
                    }
                    goto LABEL_349;
                  }
                  v141 = v117[8];
                  if (v141 <= 0x11)
                  {
                    if (((1 << v141) & 0xAC7F) != 0)
                      goto LABEL_342;
                    if (((1 << v141) & 0x30000) != 0)
                      goto LABEL_341;
                  }
                  if ((v141 & 0xFE) == 0x12 || v141 == 21)
                  {
LABEL_341:
                    if ((llvm::Type::isSizedDerivedType((uint64_t)v117, (llvm::SmallPtrSetImplBase *)v227) & 1) != 0)
                    {
LABEL_342:
                      v142 = (llvm::Type **)(v114 + 16);
                      v143 = 8 * v140 - 8;
                      TypeAtIndex = (llvm::GetElementPtrInst *)v117;
                      while (v143)
                      {
                        v145 = *v142++;
                        TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v145, v111);
                        v143 -= 8;
                        if (!TypeAtIndex)
                          goto LABEL_394;
                      }
LABEL_349:
                      if (!v226.__r_.__value_.__s.__data_[4])
                      {
LABEL_352:
                        *(_QWORD *)(a2 + 128) = llvm::ConstantExpr::getGetElementPtr((llvm::GetElementPtrInst *)v117, *(uint64_t **)__src, v135, v140, v14, (uint64_t)v226.__r_.__value_.__l.__data_, 0);
                        v146 = 1;
                        goto LABEL_353;
                      }
                      if (LODWORD(v226.__r_.__value_.__l.__data_))
                      {
                        --LODWORD(v226.__r_.__value_.__l.__data_);
                        goto LABEL_352;
                      }
                      v159 = *(char **)(a2 + 8);
                      v160 = "inrange keyword may not appear on pointer operand";
LABEL_395:
                      v270.__r_.__value_.__r.__words[0] = (std::string::size_type)v160;
                      WORD4(v271) = 259;
                      v14 = llvm::LLLexer::Error((uint64_t)v6, v159, (llvm::Twine *)&v270);
                      v146 = 0;
LABEL_353:
                      if (v227[1] != v227[0])
                        free(v227[1]);
                      if ((v146 & 1) == 0)
                      {
LABEL_122:
                        v26 = (llvm::Type *)__src;
                        if (__src == &v241)
                          return v14 & 1;
                        goto LABEL_62;
                      }
LABEL_373:
                      v14 = 0;
                      *(_DWORD *)a2 = 12;
                      goto LABEL_122;
                    }
                  }
                  v159 = *(char **)(a2 + 8);
                  v160 = "base element of getelementptr must be sized";
                  goto LABEL_395;
                }
              }
              v162 = *(char **)(a2 + 8);
              v163 = "base of getelementptr must be a pointer";
              break;
            case '?':
              if ((_DWORD)v240 == 3)
              {
                if ((llvm::ShuffleVectorInst::isValidOperands(*(llvm::ShuffleVectorInst **)__src, *((const llvm::Value **)__src + 1), *((const llvm::Value **)__src + 2), v112) & 1) != 0)
                {
                  v227[0] = (llvm::Type *)&v228;
                  v227[1] = (llvm::Type *)0x1000000000;
                  llvm::ShuffleVectorInst::getShuffleMask(*((llvm::ConstantDataSequential **)__src + 2), (uint64_t)v227);
                  *(_QWORD *)(a2 + 128) = llvm::ConstantExpr::getShuffleVector(*(llvm **)__src, *((llvm **)__src + 1), (int *)v227[0], LODWORD(v227[1]), 0);
                  if ((uint64_t *)v227[0] != &v228)
                    free(v227[0]);
                  goto LABEL_373;
                }
                v162 = *(char **)(a2 + 8);
                v163 = "invalid operands to shufflevector";
              }
              else
              {
                v162 = *(char **)(a2 + 8);
                v163 = "expected three operands to shufflevector";
              }
              break;
            case '=':
              if ((_DWORD)v240 == 2)
              {
                v147 = *(uint64_t **)__src;
                if ((*(_DWORD *)(**(_QWORD **)__src + 8) & 0xFE) == 0x12)
                {
                  v148 = *((_QWORD *)__src + 1);
                  if (*(_BYTE *)(*(_QWORD *)v148 + 8) == 13)
                  {
                    ElementInstruction = (uint64_t)llvm::ConstantFoldExtractElementInstruction(*(llvm **)__src, *((llvm::Constant **)__src + 1), v111);
                    if (!ElementInstruction)
                    {
                      v149 = (_QWORD **)*v147;
                      v150 = *(_QWORD *)(*v147 + 24);
                      if (v150)
                      {
                        v270.__r_.__value_.__r.__words[0] = (std::string::size_type)v147;
                        v270.__r_.__value_.__l.__size_ = v148;
                        v151 = **v149 + 1512;
                        LODWORD(v227[0]) = 61;
                        v227[1] = (llvm::Type *)&v270;
                        v228 = 2;
                        v229 = 0u;
                        v230 = 0u;
                        v231 = 0;
                        ElementInstruction = sub_1C537D4FC(v151, v150, (unsigned __int8 *)v227);
                      }
                      else
                      {
                        ElementInstruction = 0;
                      }
                    }
                    goto LABEL_372;
                  }
                }
                v162 = *(char **)(a2 + 8);
                v163 = "invalid extractelement operands";
              }
              else
              {
                v162 = *(char **)(a2 + 8);
                v163 = "expected two operands to extractelement";
              }
              break;
            case '9':
              if ((_DWORD)v240 == 3)
              {
                v130 = (llvm::Type *)llvm::SelectInst::areInvalidOperands(*(uint64_t **)__src, *((uint64_t **)__src + 1), *((_QWORD **)__src + 2));
                if (!v130)
                {
                  ElementInstruction = (uint64_t)llvm::ConstantExpr::getSelect(*(llvm::ConstantExpr **)__src, *((llvm::PoisonValue ***)__src + 1), *((llvm::PoisonValue ***)__src + 2), 0, v131);
LABEL_372:
                  *(_QWORD *)(a2 + 128) = ElementInstruction;
                  goto LABEL_373;
                }
                v162 = *(char **)(a2 + 8);
                v161 = 1;
                BYTE9(v229) = 1;
                if (*(_BYTE *)v130)
                {
                  v227[0] = v130;
                  v161 = 3;
                }
                BYTE8(v229) = v161;
LABEL_376:
                v14 = llvm::LLLexer::Error((uint64_t)v6, v162, (llvm::Twine *)v227);
                goto LABEL_122;
              }
              v162 = *(char **)(a2 + 8);
              v163 = "expected three operands to select";
              break;
            default:
              if ((_DWORD)v240 == 3)
              {
                v152 = **(_QWORD **)__src;
                if ((*(_DWORD *)(v152 + 8) & 0xFE) == 0x12)
                {
                  v153 = (llvm::Constant *)*((_QWORD *)__src + 1);
                  if (*(_QWORD *)v153 == *(_QWORD *)(v152 + 24))
                  {
                    v154 = (llvm::Constant *)*((_QWORD *)__src + 2);
                    if (*(_BYTE *)(*(_QWORD *)v154 + 8) == 13)
                    {
                      ElementInstruction = (uint64_t)llvm::ConstantExpr::getInsertElement(*(llvm::ConstantExpr **)__src, v153, v154, 0, v113);
                      goto LABEL_372;
                    }
                  }
                }
                v162 = *(char **)(a2 + 8);
                v163 = "invalid insertelement operands";
              }
              else
              {
                v162 = *(char **)(a2 + 8);
                v163 = "expected three operands to insertelement";
              }
              break;
          }
LABEL_375:
          v227[0] = (llvm::Type *)v163;
          WORD4(v229) = 259;
          goto LABEL_376;
        }
LABEL_121:
        v14 = 1;
        goto LABEL_122;
      case 342:
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        v256.__r_.__value_.__r.__words[0] = 0;
        v18 = &v228;
        v227[0] = (llvm::Type *)&v228;
        v227[1] = (llvm::Type *)0x400000000;
        if ((llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in extractvalue constantexpr") & 1) != 0)
          goto LABEL_188;
        v270.__r_.__value_.__r.__words[0] = 0;
        __src = "expected type";
        WORD4(v242) = 259;
        if ((llvm::LLParser::parseType((llvm::LLParser *)a1, (llvm::Type **)&v270, (const llvm::Twine *)&__src, 0) & 1) != 0
          || (llvm::LLParser::parseGlobalValue((llvm::LLParser *)a1, (llvm::Type *)v270.__r_.__value_.__l.__data_, (llvm::Constant **)&v256) & 1) != 0|| (sub_1C61C8C08((uint64_t)a1, (uint64_t)v227) & 1) != 0|| (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in extractvalue constantexpr") & 1) != 0)
        {
          goto LABEL_188;
        }
        v63 = *(_QWORD *)v256.__r_.__value_.__l.__data_;
        if ((*(_DWORD *)(*(_QWORD *)v256.__r_.__value_.__l.__data_ + 8) & 0xFE) == 0x10)
        {
          if (!LODWORD(v227[1]))
            goto LABEL_408;
          v64 = 4 * LODWORD(v227[1]);
          v65 = v227[0];
          do
          {
            v66 = *(unsigned int *)v65;
            v67 = *(unsigned __int8 *)(v63 + 8);
            if (v63 && v67 == 17)
            {
              if (*(_QWORD *)(v63 + 32) <= v66)
                goto LABEL_501;
              v68 = (uint64_t *)(v63 + 24);
            }
            else
            {
              if (!v63 || v67 != 16 || v66 >= *(_DWORD *)(v63 + 12))
                goto LABEL_501;
              v68 = (uint64_t *)(*(_QWORD *)(v63 + 16) + 8 * v66);
            }
            v63 = *v68;
            v65 = (llvm::Type *)((char *)v65 + 4);
            v64 -= 4;
          }
          while (v64);
          if (v63)
          {
LABEL_408:
            Value = llvm::ConstantExpr::getExtractValue((llvm::UndefValue *)v256.__r_.__value_.__l.__data_, (unsigned int *)v227[0], LODWORD(v227[1]), 0);
            goto LABEL_409;
          }
LABEL_501:
          v180 = *(char **)(a2 + 8);
          v181 = "invalid indices for extractvalue";
        }
        else
        {
          v180 = *(char **)(a2 + 8);
          v181 = "extractvalue operand must be aggregate type";
        }
        goto LABEL_502;
      case 343:
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        v224 = 0;
        v222 = 0;
        v18 = &v228;
        v227[0] = (llvm::Type *)&v228;
        v227[1] = (llvm::Type *)0x400000000;
        if ((llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in insertvalue constantexpr") & 1) != 0
          || (v270.__r_.__value_.__r.__words[0] = 0,
              __src = "expected type",
              WORD4(v242) = 259,
              (llvm::LLParser::parseType((llvm::LLParser *)a1, (llvm::Type **)&v270, (const llvm::Twine *)&__src, 0) & 1) != 0)
          || (llvm::LLParser::parseGlobalValue((llvm::LLParser *)a1, (llvm::Type *)v270.__r_.__value_.__l.__data_, &v224) & 1) != 0|| (llvm::LLParser::parseToken((uint64_t)a1, 4, "expected comma in insertvalue constantexpr") & 1) != 0|| (v270.__r_.__value_.__r.__words[0] = 0, __src = "expected type", WORD4(v242) = 259, (llvm::LLParser::parseType((llvm::LLParser *)a1, (llvm::Type **)&v270, (const llvm::Twine *)&__src, 0) & 1) != 0)|| (llvm::LLParser::parseGlobalValue((llvm::LLParser *)a1, (llvm::Type *)v270.__r_.__value_.__l.__data_, &v222) & 1) != 0|| (sub_1C61C8C08((uint64_t)a1, (uint64_t)v227) & 1) != 0|| (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in insertvalue constantexpr") & 1) != 0)
        {
LABEL_188:
          v14 = 1;
          goto LABEL_189;
        }
        v121 = *(llvm::Type **)v224;
        if ((*(_DWORD *)(*(_QWORD *)v224 + 8) & 0xFE) != 0x10)
        {
          v180 = *(char **)(a2 + 8);
          v181 = "insertvalue operand must be aggregate type";
          goto LABEL_502;
        }
        if (!LODWORD(v227[1]))
          goto LABEL_536;
        v122 = 4 * LODWORD(v227[1]);
        v123 = v227[0];
        do
        {
          v124 = *(unsigned int *)v123;
          v125 = *((unsigned __int8 *)v121 + 8);
          if (v121 && v125 == 17)
          {
            if (*((_QWORD *)v121 + 4) <= v124)
              goto LABEL_562;
            v126 = (llvm::Type **)((char *)v121 + 24);
          }
          else
          {
            if (!v121 || v125 != 16 || v124 >= *((_DWORD *)v121 + 3))
              goto LABEL_562;
            v126 = (llvm::Type **)(*((_QWORD *)v121 + 2) + 8 * v124);
          }
          v121 = *v126;
          v123 = (llvm::Type *)((char *)v123 + 4);
          v122 -= 4;
        }
        while (v122);
        if (v121)
        {
LABEL_536:
          if (v121 == *(llvm::Type **)v222)
          {
            Value = llvm::ConstantExpr::getInsertValue(v224, (uint64_t *)v222, (_DWORD *)v227[0], LODWORD(v227[1]), 0);
LABEL_409:
            v14 = 0;
            *(_QWORD *)(a2 + 128) = Value;
            *(_DWORD *)a2 = 12;
          }
          else
          {
            v209 = *(char **)(a2 + 8);
            sub_1C4FB7C44((uint64_t)&v223, *(llvm::Type **)v222);
            v210 = std::string::insert(&v223, 0, "insertvalue operand and field disagree in type: '");
            v211 = v210->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v225.__r_.__value_.__l.__data_ = *(_OWORD *)&v210->__r_.__value_.__l.__data_;
            v225.__r_.__value_.__r.__words[2] = v211;
            v210->__r_.__value_.__l.__size_ = 0;
            v210->__r_.__value_.__r.__words[2] = 0;
            v210->__r_.__value_.__r.__words[0] = 0;
            v212 = std::string::append(&v225, "' instead of '");
            v213 = v212->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v226.__r_.__value_.__l.__data_ = *(_OWORD *)&v212->__r_.__value_.__l.__data_;
            v226.__r_.__value_.__r.__words[2] = v213;
            v212->__r_.__value_.__l.__size_ = 0;
            v212->__r_.__value_.__r.__words[2] = 0;
            v212->__r_.__value_.__r.__words[0] = 0;
            sub_1C4FB7C44((uint64_t)v220, v121);
            if (v221 >= 0)
              v214 = v220;
            else
              v214 = (llvm::Type **)v220[0];
            if (v221 >= 0)
              v215 = v221 & 0x7F;
            else
              v215 = (std::string::size_type)v220[1];
            v216 = std::string::append(&v226, (const std::string::value_type *)v214, v215);
            v217 = v216->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v256.__r_.__value_.__l.__data_ = *(_OWORD *)&v216->__r_.__value_.__l.__data_;
            v256.__r_.__value_.__r.__words[2] = v217;
            v216->__r_.__value_.__l.__size_ = 0;
            v216->__r_.__value_.__r.__words[2] = 0;
            v216->__r_.__value_.__r.__words[0] = 0;
            v218 = std::string::append(&v256, "'");
            v219 = v218->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v270.__r_.__value_.__l.__data_ = *(_OWORD *)&v218->__r_.__value_.__l.__data_;
            v270.__r_.__value_.__r.__words[2] = v219;
            v218->__r_.__value_.__l.__size_ = 0;
            v218->__r_.__value_.__r.__words[2] = 0;
            v218->__r_.__value_.__r.__words[0] = 0;
            WORD4(v242) = 260;
            __src = &v270;
            v14 = llvm::LLLexer::Error((uint64_t)v6, v209, (llvm::Twine *)&__src);
            if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v270.__r_.__value_.__l.__data_);
            if (SHIBYTE(v256.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v256.__r_.__value_.__l.__data_);
            if (v221 < 0)
              operator delete(v220[0]);
            if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v226.__r_.__value_.__l.__data_);
            if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v225.__r_.__value_.__l.__data_);
            if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v223.__r_.__value_.__l.__data_);
          }
          goto LABEL_189;
        }
LABEL_562:
        v180 = *(char **)(a2 + 8);
        v181 = "invalid indices for insertvalue";
LABEL_502:
        __src = v181;
        WORD4(v242) = 259;
        v14 = llvm::LLLexer::Error((uint64_t)v6, v180, (llvm::Twine *)&__src);
LABEL_189:
        v26 = v227[0];
        goto LABEL_61;
      case 344:
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        LODWORD(v270.__r_.__value_.__l.__data_) = 0;
        v271 = 0u;
        v272 = 0u;
        v273 = 0u;
        v275 = 0;
        v270.__r_.__value_.__l.__size_ = 0;
        v274 = 0;
        v14 = 1;
        v276 = 1;
        v277 = 0;
        LODWORD(v227[1]) = 64;
        v227[0] = 0;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&__src, v227);
        v278 = __src;
        v279 = v240;
        v280 = v241;
        v281 = v281 & 0xF0 | BYTE4(v241) & 0xF;
        v282 = 0;
        v283 = 0;
        LODWORD(v256.__r_.__value_.__l.__data_) = 0;
        v257 = 0u;
        v258 = 0u;
        v259 = 0u;
        v261 = 0;
        v256.__r_.__value_.__l.__size_ = 0;
        v260 = 0;
        v262 = 1;
        v263 = 0;
        LODWORD(v227[1]) = 64;
        v227[0] = 0;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&__src, v227);
        v264 = __src;
        v265 = v240;
        v266 = v241;
        v267 = v267 & 0xF0 | BYTE4(v241) & 0xF;
        v268 = 0;
        v269 = 0;
        if ((llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' in block address expression") & 1) != 0
          || (llvm::LLParser::parseValID(a1, &v270, a3, 0) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)a1, 4, "expected comma in block address expression") & 1) != 0)
        {
          goto LABEL_159;
        }
        if ((llvm::LLParser::parseValID(a1, &v256, a3, 0) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' in block address expression") & 1) != 0)
        {
          v14 = 1;
          goto LABEL_159;
        }
        if (((uint64_t)v270.__r_.__value_.__l.__data_ & 0xFFFFFFFD) != 1)
          goto LABEL_474;
        if (((uint64_t)v256.__r_.__value_.__l.__data_ & 0xFFFFFFFD) != 0)
        {
          v165 = (char *)v256.__r_.__value_.__l.__size_;
          v166 = "expected basic block name in blockaddress";
LABEL_475:
          __src = v166;
          WORD4(v242) = 259;
          v14 = llvm::LLLexer::Error((uint64_t)v6, v165, (llvm::Twine *)&__src);
          goto LABEL_159;
        }
        if (LODWORD(v270.__r_.__value_.__l.__data_) == 1)
        {
          v157 = a1[129];
          if (LODWORD(v270.__r_.__value_.__r.__words[2]) >= (unint64_t)(a1[130] - v157))
            goto LABEL_430;
          v158 = v157[LODWORD(v270.__r_.__value_.__r.__words[2])];
        }
        else
        {
          if (sub_1C4FCEB18((uint64_t **)a1[124], (const void **)&v271 + 1))
            goto LABEL_430;
          if (v272 >= 0)
            v168 = (unsigned __int8 *)&v271 + 8;
          else
            v168 = (unsigned __int8 *)*((_QWORD *)&v271 + 1);
          if (v272 >= 0)
            v169 = HIBYTE(v272) & 0x7F;
          else
            v169 = v272;
          v158 = sub_1C4FB7E80((uint64_t *)a1[41][14], v168, v169);
        }
        if (!v158)
        {
LABEL_430:
          *(_OWORD *)&v226.__r_.__value_.__r.__words[1] = 0uLL;
          v226.__r_.__value_.__r.__words[0] = (std::string::size_type)&v226.__r_.__value_.__l.__size_;
          sub_1C4FCD600((uint64_t)&__src, (uint64_t)&v270);
          v255 = v226;
          if (v226.__r_.__value_.__r.__words[2])
          {
            *(_QWORD *)(v226.__r_.__value_.__l.__size_ + 16) = &v255.__r_.__value_.__l.__size_;
            v226.__r_.__value_.__r.__words[0] = (std::string::size_type)&v226.__r_.__value_.__l.__size_;
            *(_OWORD *)&v226.__r_.__value_.__r.__words[1] = 0uLL;
          }
          else
          {
            v255.__r_.__value_.__r.__words[0] = (std::string::size_type)&v255.__r_.__value_.__l.__size_;
          }
          v170 = sub_1C61CE8FC((uint64_t)(a1 + 135), (uint64_t)&__src, &__src) + 23;
          sub_1C4FCD600((uint64_t)v227, (uint64_t)&v256);
          v238 = 0;
          v171 = sub_1C61CEA24((uint64_t)v170, (uint64_t)v227, (uint64_t)v227);
          v172 = v237;
          v237 = 0;
          if (v172)
            MEMORY[0x1CAA32F9C](v172, 0x20C8093837F09);
          if ((_UNKNOWN *)v235 == &unk_1C866F1C0)
          {
            sub_1C4773C74(v236);
          }
          else if ((*(_DWORD *)(v235 + 8) - 64) <= 0xFFFFFF7F && v236[0])
          {
            MEMORY[0x1CAA32F9C](v236[0], 0x1000C8000313F17);
          }
          if (v234 >= 0x41 && v233)
            MEMORY[0x1CAA32F9C](v233, 0x1000C8000313F17);
          if (v232 < 0)
            operator delete(v231);
          if (SHIBYTE(v230) < 0)
            operator delete(*((void **)&v229 + 1));
          sub_1C61CE8B4((uint64_t)&v255, (_QWORD *)v255.__r_.__value_.__l.__size_);
          v173 = v253;
          v253 = 0;
          if (v173)
            MEMORY[0x1CAA32F9C](v173, 0x20C8093837F09);
          if (v249 == (llvm::Type *)&unk_1C866F1C0)
          {
            sub_1C4773C74((uint64_t *)&v250);
          }
          else if ((*((_DWORD *)v249 + 2) - 64) <= 0xFFFFFF7F && v250)
          {
            MEMORY[0x1CAA32F9C](v250, 0x1000C8000313F17);
          }
          if (v247 >= 0x41 && v246)
            MEMORY[0x1CAA32F9C](v246, 0x1000C8000313F17);
          if (SHIBYTE(v245) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v243) < 0)
            operator delete(*((void **)&v242 + 1));
          sub_1C61CE8B4((uint64_t)&v226, (_QWORD *)v226.__r_.__value_.__l.__size_);
          v174 = v171[23];
          if (v174)
            goto LABEL_506;
          if (a4)
          {
            v175 = *((_DWORD *)a4 + 2);
            if (v175 != 15)
            {
              v204 = *(char **)(a2 + 8);
              sub_1C4FB7C44((uint64_t)&v225, a4);
              v205 = std::string::insert(&v225, 0, "type of blockaddress must be a pointer and not '");
              v206 = v205->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v226.__r_.__value_.__l.__data_ = *(_OWORD *)&v205->__r_.__value_.__l.__data_;
              v226.__r_.__value_.__r.__words[2] = v206;
              v205->__r_.__value_.__l.__size_ = 0;
              v205->__r_.__value_.__r.__words[2] = 0;
              v205->__r_.__value_.__r.__words[0] = 0;
              v207 = std::string::append(&v226, "'");
              v208 = v207->__r_.__value_.__r.__words[2];
              *(_OWORD *)v227 = *(_OWORD *)&v207->__r_.__value_.__l.__data_;
              v228 = v208;
              v207->__r_.__value_.__l.__size_ = 0;
              v207->__r_.__value_.__r.__words[2] = 0;
              v207->__r_.__value_.__r.__words[0] = 0;
              WORD4(v242) = 260;
              __src = v227;
              v14 = llvm::LLLexer::Error((uint64_t)v6, v204, (llvm::Twine *)&__src);
              if (SHIBYTE(v228) < 0)
                operator delete(v227[0]);
              if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v226.__r_.__value_.__l.__data_);
              if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v225.__r_.__value_.__l.__data_);
LABEL_159:
              v70 = v268;
              v268 = 0;
              if (v70)
                MEMORY[0x1CAA32F9C](v70, 0x20C8093837F09);
              if (v264 == (_DWORD *)&unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v265);
              }
              else if ((v264[2] - 64) <= 0xFFFFFF7F && v265)
              {
                MEMORY[0x1CAA32F9C](v265, 0x1000C8000313F17);
              }
              if (v262 >= 0x41 && v261)
                MEMORY[0x1CAA32F9C](v261, 0x1000C8000313F17);
              if (SHIBYTE(v260) < 0)
                operator delete((void *)v259);
              if (SHIBYTE(v258) < 0)
                operator delete(*((void **)&v257 + 1));
              v71 = v282;
              v282 = 0;
              if (v71)
                MEMORY[0x1CAA32F9C](v71, 0x20C8093837F09);
              if (v278 == (_DWORD *)&unk_1C866F1C0)
              {
                sub_1C4773C74((uint64_t *)&v279);
              }
              else if ((v278[2] - 64) <= 0xFFFFFF7F && v279)
              {
                MEMORY[0x1CAA32F9C](v279, 0x1000C8000313F17);
              }
              if (v276 >= 0x41 && v275)
                MEMORY[0x1CAA32F9C](v275, 0x1000C8000313F17);
              if (SHIBYTE(v274) < 0)
                operator delete((void *)v273);
              if (SHIBYTE(v272) < 0)
              {
                v17 = (void *)*((_QWORD *)&v271 + 1);
LABEL_30:
                operator delete(v17);
              }
              return v14 & 1;
            }
            if ((v175 & 0xFE) != 0x12)
              goto LABEL_505;
            v176 = (_DWORD *)((char *)a4 + 16);
          }
          else
          {
            v176 = (_DWORD *)((char *)a3 + 8);
          }
          v175 = *(_DWORD *)(**(_QWORD **)v176 + 8);
LABEL_505:
          v193 = operator new(0x78uLL);
          v193[13] = v193[13] & 0x38000000 | 1;
          *(_QWORD *)v193 = 0;
          *((_QWORD *)v193 + 1) = 0;
          *((_QWORD *)v193 + 2) = 0;
          *((_QWORD *)v193 + 3) = v193 + 8;
          v194 = (uint64_t)a1[41];
          v195 = (llvm::PointerType *)(**a1 + 1912);
          WORD4(v242) = 257;
          v174 = llvm::GlobalVariable::GlobalVariable((uint64_t)(v193 + 8), v194, v195, 0, 7, 0, (uint64_t)&__src, 0, 0, (v175 >> 8) | 0x100000000, 0);
          v171[23] = v174;
LABEL_506:
          v14 = 0;
          *(_QWORD *)(a2 + 128) = v174;
          *(_DWORD *)a2 = 12;
          goto LABEL_159;
        }
        if (*(_BYTE *)(v158 + 16))
        {
LABEL_474:
          v165 = (char *)v270.__r_.__value_.__l.__size_;
          v166 = "expected function name in blockaddress";
          goto LABEL_475;
        }
        if (*(_QWORD *)(v158 + 72) == v158 + 72 && (*(_BYTE *)(v158 + 34) & 0x80) == 0)
        {
          v165 = (char *)v270.__r_.__value_.__l.__size_;
          v166 = "cannot take blockaddress inside a declaration";
          goto LABEL_475;
        }
        v196 = (unsigned __int8 *)&v257 + 8;
        v197 = (uint64_t)a1[138];
        if (v197)
        {
          data = (int)v256.__r_.__value_.__l.__data_;
          if (v158 == *(_QWORD *)(v197 + 8))
          {
            if (LODWORD(v256.__r_.__value_.__l.__data_))
              BB = llvm::LLParser::PerFunctionState::getBB(v197, (char *)&v257 + 8, (char *)v256.__r_.__value_.__l.__size_);
            else
              BB = (uint64_t)llvm::LLParser::PerFunctionState::getBB(v197, v256.__r_.__value_.__r.__words[2], (char *)v256.__r_.__value_.__l.__size_);
            v203 = (llvm::Function *)BB;
            if (!BB)
              goto LABEL_519;
            goto LABEL_523;
          }
        }
        else
        {
          data = (int)v256.__r_.__value_.__l.__data_;
        }
        if (!data)
        {
          v165 = (char *)v256.__r_.__value_.__l.__size_;
          v166 = "cannot take address of numeric label after the function is defined";
          goto LABEL_475;
        }
        if (v258 >= 0)
        {
          v201 = HIBYTE(v258) & 0x7F;
        }
        else
        {
          v196 = (unsigned __int8 *)*((_QWORD *)&v257 + 1);
          v201 = v258;
        }
        v202 = sub_1C4FB7E80(*(uint64_t **)(v158 + 104), v196, v201);
        if (!v202 || (v203 = (llvm::Function *)v202, *(_BYTE *)(v202 + 16) != 22))
        {
LABEL_519:
          v165 = (char *)v256.__r_.__value_.__l.__size_;
          v166 = "referenced value is not a basic block";
          goto LABEL_475;
        }
LABEL_523:
        v174 = (uint64_t)llvm::BlockAddress::get((llvm::BlockAddress *)v158, v203, v200);
        goto LABEL_506;
      case 345:
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        LODWORD(__src) = 0;
        v242 = 0u;
        v243 = 0u;
        __p = 0u;
        v245 = 0;
        v246 = 0;
        v240 = 0;
        v14 = 1;
        v247 = 1;
        v248 = 0;
        LODWORD(v270.__r_.__value_.__r.__words[1]) = 64;
        v270.__r_.__value_.__r.__words[0] = 0;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v227, (const llvm::APInt **)&v270);
        v249 = v227[0];
        v250 = v227[1];
        v251 = v228;
        v252 = BYTE4(v228) & 0xF;
        v253 = 0;
        v254 = 0;
        if ((llvm::LLParser::parseValID(a1, &__src, a3, 0) & 1) != 0)
          goto LABEL_19;
        if ((__src & 0xFFFFFFFD) == 1)
        {
          if ((_DWORD)__src == 1)
          {
            v75 = (llvm::DSOLocalEquivalent *)a1[129][v241];
          }
          else
          {
            sub_1C4FCEB18((uint64_t **)a1[124], (const void **)&v242 + 1);
            if (v243 >= 0)
              v106 = (unsigned __int8 *)&v242 + 8;
            else
              v106 = (unsigned __int8 *)*((_QWORD *)&v242 + 1);
            if (v243 >= 0)
              v107 = HIBYTE(v243) & 0x7F;
            else
              v107 = v243;
            v75 = (llvm::DSOLocalEquivalent *)sub_1C4FB7E80((uint64_t *)a1[41][14], v106, v107);
          }
          if (*(_BYTE *)(*((_QWORD *)v75 + 3) + 8) == 14)
          {
            v14 = 0;
            *(_QWORD *)(a2 + 128) = llvm::DSOLocalEquivalent::get(v75, v15);
            *(_DWORD *)a2 = 12;
            goto LABEL_19;
          }
          v92 = (char *)v240;
          v93 = "expected a function, alias to function, or ifunc in dso_local_equivalent";
        }
        else
        {
          v92 = (char *)v240;
          v93 = "expected global value name in dso_local_equivalent";
        }
        v227[0] = (llvm::Type *)v93;
        WORD4(v229) = 259;
        v14 = llvm::LLLexer::Error((uint64_t)v6, v92, (llvm::Twine *)v227);
LABEL_19:
        v16 = v253;
        v253 = 0;
        if (v16)
          MEMORY[0x1CAA32F9C](v16, 0x20C8093837F09);
        if (v249 == (llvm::Type *)&unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v250);
        }
        else if ((*((_DWORD *)v249 + 2) - 64) <= 0xFFFFFF7F && v250)
        {
          MEMORY[0x1CAA32F9C](v250, 0x1000C8000313F17);
        }
        if (v247 >= 0x41 && v246)
          MEMORY[0x1CAA32F9C](v246, 0x1000C8000313F17);
        if (SHIBYTE(v245) < 0)
          operator delete((void *)__p);
        if ((SHIBYTE(v243) & 0x80000000) == 0)
          return v14 & 1;
        v17 = (void *)*((_QWORD *)&v242 + 1);
        goto LABEL_30;
      case 346:
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
        if ((llvm::LLParser::parseValID(a1, a2, a3, 0) & 1) != 0)
        {
LABEL_96:
          v14 = 1;
          return v14 & 1;
        }
        if ((*(_DWORD *)a2 | 2) == 3)
        {
          v14 = 0;
          *(_BYTE *)(a2 + 144) = 1;
          return v14 & 1;
        }
        v86 = *(char **)(a2 + 8);
        v105 = "expected global value name in no_cfi";
LABEL_244:
        __src = v105;
        WORD4(v242) = 259;
        goto LABEL_245;
      default:
        goto LABEL_210;
    }
  }
  if (v7 > 49)
  {
    v9 = v7 - 50;
    v8 = 6;
    switch(v9)
    {
      case 0:
        v8 = 8;
        goto LABEL_92;
      case 1:
        v8 = 7;
        goto LABEL_92;
      case 2:
        v8 = 10;
        goto LABEL_92;
      case 3:
        goto LABEL_92;
      case 4:
        v8 = 9;
        goto LABEL_92;
      default:
        goto LABEL_210;
    }
  }
  if (v7 > 9)
  {
    if (v7 != 10)
    {
      if (v7 == 19)
      {
        v27 = **a1;
        v11 = *(llvm::ValueHandleBase **)(v27 + 1560);
        if (!v11)
        {
          v108 = *(llvm::ConstantInt **)(v27 + 1888);
          v109 = *(_DWORD *)(v27 + 1896);
          LODWORD(v240) = v109 >> 8;
          if (v109 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 1, 0);
          }
          else
          {
            if (v109 <= 0xFF)
              v110 = 0;
            else
              v110 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v109);
            __src = (void *)(v110 & 1);
          }
          v11 = llvm::ConstantInt::get(v108, (llvm::LLVMContext *)&__src, a3);
          if (v240 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          *(_QWORD *)(v27 + 1560) = v11;
        }
        goto LABEL_56;
      }
      if (v7 == 20)
      {
        v10 = **a1;
        v11 = *(llvm::ValueHandleBase **)(v10 + 1568);
        if (!v11)
        {
          v12 = *(llvm::ConstantInt **)(v10 + 1888);
          LODWORD(v240) = *(_DWORD *)(v10 + 1896) >> 8;
          if (v240 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&__src, 0, 0);
          else
            __src = 0;
          v11 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&__src, a3);
          if (v240 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          *(_QWORD *)(v10 + 1568) = v11;
        }
LABEL_56:
        *(_QWORD *)(a2 + 128) = v11;
        v8 = 12;
LABEL_92:
        *(_DWORD *)a2 = v8;
        v14 = 0;
        *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken(v6);
        return v14 & 1;
      }
      goto LABEL_210;
    }
    v24 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
    *((_DWORD *)a1 + 56) = v24;
    if (v24 == 8)
      *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken(v6);
    __src = &v241;
    v240 = (llvm::Type *)0x1000000000;
    v25 = (char *)a1[27];
    if ((llvm::LLParser::parseGlobalValueVector(a1, (uint64_t)&__src, 0) & 1) != 0)
      goto LABEL_52;
    if (v24 == 8)
    {
      if ((llvm::LLParser::parseToken((uint64_t)a1, 9, "expected end of packed struct") & 1) == 0
        && (llvm::LLParser::parseToken((uint64_t)a1, 11, "expected end of constant") & 1) == 0)
      {
        v76 = 8 * v240;
        v77 = (void *)operator new[]();
        bzero(v77, v76);
        v78 = *(_QWORD *)(a2 + 136);
        *(_QWORD *)(a2 + 136) = v77;
        if (v78)
        {
          MEMORY[0x1CAA32F9C](v78, 0x20C8093837F09);
          v77 = *(void **)(a2 + 136);
        }
        memcpy(v77, __src, 8 * v240);
        v14 = 0;
        *(_DWORD *)(a2 + 16) = (_DWORD)v240;
        v79 = 15;
LABEL_239:
        *(_DWORD *)a2 = v79;
        goto LABEL_53;
      }
LABEL_52:
      v14 = 1;
      goto LABEL_53;
    }
    if ((llvm::LLParser::parseToken((uint64_t)a1, 11, "expected end of constant") & 1) != 0)
      goto LABEL_52;
    v94 = v240;
    if ((_DWORD)v240)
    {
      v95 = (llvm::FixedVectorType ***)__src;
      v96 = **(unsigned __int8 ***)__src;
      v97 = v96[8];
      if (v97 < 7 || v97 == 13 || v97 == 15)
      {
        if ((_DWORD)v240 == 1)
        {
LABEL_236:
          Impl = (uint64_t)llvm::ConstantVector::getImpl((llvm::FixedVectorType ***)__src, (llvm::Type *)v240);
          if (!Impl)
          {
            llvm::FixedVectorType::get(**v95, (llvm::Type *)v94);
            Impl = sub_1C537B3A4(**v103 + 1288, (uint64_t)v103, v95, v94);
          }
          v14 = 0;
          *(_QWORD *)(a2 + 128) = Impl;
          v79 = 12;
          goto LABEL_239;
        }
        v100 = 1;
        while (1)
        {
          v101 = v100;
          if (**((unsigned __int8 ***)__src + v100) != v96)
            break;
          ++v100;
          if ((_DWORD)v240 == v101 + 1)
            goto LABEL_236;
        }
        v256.__r_.__value_.__r.__words[0] = (std::string::size_type)"vector element #";
        v256.__r_.__value_.__r.__words[2] = v100;
        WORD4(v257) = 2051;
        v270.__r_.__value_.__r.__words[0] = (std::string::size_type)&v256;
        v270.__r_.__value_.__r.__words[2] = (std::string::size_type)" is not of type '";
        WORD4(v271) = 770;
        sub_1C4FB7C44((uint64_t)&v226, (llvm::Type *)v96);
        v227[0] = (llvm::Type *)&v270;
        v228 = (uint64_t)&v226;
        WORD4(v229) = 1026;
        v14 = llvm::LLLexer::Error((uint64_t)v6, v25, (llvm::Twine *)v227);
        if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v226.__r_.__value_.__l.__data_);
LABEL_53:
        v26 = (llvm::Type *)__src;
        if (__src == &v241)
          return v14 & 1;
        goto LABEL_62;
      }
      v227[0] = (llvm::Type *)"vector elements must have integer, pointer or floating point type";
      WORD4(v229) = 259;
      v155 = (uint64_t)v6;
      v156 = v25;
    }
    else
    {
      v156 = *(char **)(a2 + 8);
      v227[0] = (llvm::Type *)"constant vector must not be empty";
      WORD4(v229) = 259;
      v155 = (uint64_t)v6;
    }
    v14 = llvm::LLLexer::Error(v155, v156, (llvm::Twine *)v227);
    goto LABEL_53;
  }
  if (v7 != 6)
  {
    if (v7 != 8)
    {
LABEL_210:
      __src = "expected value token";
      WORD4(v242) = 259;
      v86 = (char *)a1[27];
LABEL_245:
      v14 = llvm::LLLexer::Error((uint64_t)v6, v86, (llvm::Twine *)&__src);
      return v14 & 1;
    }
    *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
    v18 = &v241;
    __src = &v241;
    v240 = (llvm::Type *)0x1000000000;
    if ((llvm::LLParser::parseGlobalValueVector(a1, (uint64_t)&__src, 0) & 1) == 0
      && (llvm::LLParser::parseToken((uint64_t)a1, 9, "expected end of struct constant") & 1) == 0)
    {
      v19 = 8 * v240;
      v20 = (void *)operator new[]();
      bzero(v20, v19);
      v21 = *(_QWORD *)(a2 + 136);
      *(_QWORD *)(a2 + 136) = v20;
      if (v21)
      {
        MEMORY[0x1CAA32F9C](v21, 0x20C8093837F09);
        v20 = *(void **)(a2 + 136);
      }
      v22 = v240;
      *(_DWORD *)(a2 + 16) = (_DWORD)v240;
      memcpy(v20, __src, 8 * v22);
      v14 = 0;
      v23 = 14;
      goto LABEL_267;
    }
    goto LABEL_59;
  }
  *((_DWORD *)a1 + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 21));
  v18 = &v241;
  __src = &v241;
  v240 = (llvm::Type *)0x1000000000;
  v28 = (char *)a1[27];
  if ((llvm::LLParser::parseGlobalValueVector(a1, (uint64_t)&__src, 0) & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)a1, 7, "expected end of array constant") & 1) != 0)
  {
LABEL_59:
    v14 = 1;
    goto LABEL_60;
  }
  if (!(_DWORD)v240)
  {
    v14 = 0;
    v23 = 11;
LABEL_267:
    *(_DWORD *)a2 = v23;
    goto LABEL_60;
  }
  v80 = *(unsigned __int8 *)(**(_QWORD **)__src + 8);
  if (v80 == 14 || v80 == 7)
  {
    sub_1C4FB7C44((uint64_t)&v256, **(llvm::Type ***)__src);
    v127 = std::string::insert(&v256, 0, "invalid array element type: ");
    v128 = v127->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v270.__r_.__value_.__l.__data_ = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
    v270.__r_.__value_.__r.__words[2] = v128;
    v127->__r_.__value_.__l.__size_ = 0;
    v127->__r_.__value_.__r.__words[2] = 0;
    v127->__r_.__value_.__r.__words[0] = 0;
    WORD4(v229) = 260;
    v227[0] = (llvm::Type *)&v270;
    v14 = llvm::LLLexer::Error((uint64_t)v6, v28, (llvm::Twine *)v227);
    if (SHIBYTE(v270.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v270.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v256.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_60;
    v129 = (void *)v256.__r_.__value_.__r.__words[0];
    goto LABEL_317;
  }
  llvm::ArrayType::get(**(llvm::ArrayType ***)__src, (llvm::Type *)v240);
  v83 = v240;
  if (!(_DWORD)v240)
  {
    v83 = 0;
LABEL_266:
    v14 = 0;
    *(_QWORD *)(a2 + 128) = llvm::ConstantArray::get(v82, (llvm::Type *)__src, v83);
    v23 = 12;
    goto LABEL_267;
  }
  v84 = 0;
  v85 = **(llvm::Type ***)__src;
  while (**((llvm::Type ***)__src + v84) == v85)
  {
    if (v240 == ++v84)
      goto LABEL_266;
  }
  v256.__r_.__value_.__r.__words[0] = (std::string::size_type)"array element #";
  v256.__r_.__value_.__r.__words[2] = v84;
  WORD4(v257) = 2051;
  v270.__r_.__value_.__r.__words[0] = (std::string::size_type)&v256;
  v270.__r_.__value_.__r.__words[2] = (std::string::size_type)" is not of type '";
  WORD4(v271) = 770;
  sub_1C4FB7C44((uint64_t)&v226, v85);
  v227[0] = (llvm::Type *)&v270;
  v228 = (uint64_t)&v226;
  WORD4(v229) = 1026;
  v14 = llvm::LLLexer::Error((uint64_t)v6, v28, (llvm::Twine *)v227);
  if (SHIBYTE(v226.__r_.__value_.__r.__words[2]) < 0)
  {
    v129 = (void *)v226.__r_.__value_.__r.__words[0];
LABEL_317:
    operator delete(v129);
  }
LABEL_60:
  v26 = (llvm::Type *)__src;
LABEL_61:
  if (v26 != (llvm::Type *)v18)
LABEL_62:
    free(v26);
  return v14 & 1;
}

void sub_1C4FB6A84(uint64_t a1, llvm::Type *a2, llvm::Type *a3)
{
  llvm::raw_ostream *v6;
  llvm::raw_ostream *v7;
  _WORD *v8;
  _DWORD *v9;
  _BYTE *v10;
  __int128 v11;
  void (**v12)(llvm::raw_ostream *__hidden);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *v21[2];
  uint64_t v22;

  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  v13 = 0;
  v17 = 0;
  v18 = 0;
  v12 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v20 = v21;
  v19 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  v6 = llvm::raw_ostream::write((llvm::raw_ostream *)&v12, "explicit pointee type doesn't match operand's pointee type", 0x3AuLL);
  v7 = v6;
  v8 = (_WORD *)*((_QWORD *)v6 + 4);
  if (*((_QWORD *)v6 + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 10272;
    *((_QWORD *)v6 + 4) += 2;
  }
  else
  {
    v7 = llvm::raw_ostream::write(v6, " (", 2uLL);
  }
  llvm::Type::print(a2, v7, 0, 0);
  v9 = (_DWORD *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v9 > 3uLL)
  {
    *v9 = 544437792;
    *((_QWORD *)v7 + 4) += 4;
  }
  else
  {
    v7 = llvm::raw_ostream::write(v7, " vs ", 4uLL);
  }
  llvm::Type::print(a3, v7, 0, 0);
  v10 = (_BYTE *)*((_QWORD *)v7 + 4);
  if (*((_BYTE **)v7 + 3) == v10)
  {
    llvm::raw_ostream::write(v7, ")", 1uLL);
  }
  else
  {
    *v10 = 41;
    ++*((_QWORD *)v7 + 4);
  }
  if (*((char *)v20 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a1, *v20, (unint64_t)v20[1]);
  }
  else
  {
    v11 = *(_OWORD *)v20;
    *(_QWORD *)(a1 + 16) = v20[2];
    *(_OWORD *)a1 = v11;
  }
  v12 = off_1E81A6E70;
  if (v19 == 1 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_1C4FB6C64(llvm::Value **a1, llvm::Value *a2)
{
  llvm::Value *v2;
  llvm::Value *v3;
  int v4;
  uint64_t v5;
  char *v6;
  _QWORD **v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;

  v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    llvm::Constant::removeDeadConstantUsers((uint64_t)v2);
    llvm::Value::~Value(v2, v3);
    v4 = *((_DWORD *)v2 + 5);
    if ((v4 & 0x40000000) != 0)
    {
      v12 = (char *)*((_QWORD *)v2 - 1);
      v11 = (char *)v2 - 8;
      v10 = v12;
      v13 = v4 & 0x7FFFFFF;
      if ((_DWORD)v13)
      {
        v14 = 32 * v13;
        do
        {
          v15 = &v10[v14];
          if (*(_QWORD *)&v10[v14 - 32])
          {
            **((_QWORD **)v15 - 2) = *((_QWORD *)v15 - 3);
            v16 = *((_QWORD *)v15 - 3);
            if (v16)
              *(_QWORD *)(v16 + 16) = *((_QWORD *)v15 - 2);
          }
          v14 -= 32;
        }
        while (v14);
      }
      operator delete(v10);
      v6 = v11;
    }
    else
    {
      v5 = v4 & 0x7FFFFFF;
      v6 = (char *)v2 - 32 * v5;
      if ((_DWORD)v5)
      {
        v7 = (_QWORD **)((char *)v2 - 16);
        v8 = -32 * v5;
        do
        {
          if (*(v7 - 2))
          {
            **v7 = *(v7 - 1);
            v9 = (uint64_t)*(v7 - 1);
            if (v9)
              *(_QWORD *)(v9 + 16) = *v7;
          }
          v7 -= 4;
          v8 += 32;
        }
        while (v8);
      }
      if (v4 < 0)
        v6 = &v6[-*((_QWORD *)v6 - 1) - 8];
    }
    operator delete(v6);
  }
}

uint64_t llvm::LLParser::parseGlobalValue(llvm::LLParser *this, llvm::Type *a2, llvm::Constant **a3)
{
  uint64_t v6;
  llvm::Constant *v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;
  char v12;
  __int16 v13;
  const llvm::APInt *v14;
  int v15;
  int v16;
  char *v17;
  void *v18[2];
  __int128 v19;
  void *__p[2];
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  v16 = 0;
  v17 = 0;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  *(_OWORD *)__p = 0u;
  v21 = 0;
  v22 = 0;
  v6 = 1;
  v23 = 1;
  v24 = 0;
  v15 = 64;
  v14 = 0;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v10, &v14);
  v25 = v10[0];
  v26 = v10[1];
  v27 = v11;
  v28 = v12 & 0xF;
  v29 = 0;
  v30 = 0;
  v14 = 0;
  if ((llvm::LLParser::parseValID(this, &v16, 0, a2) & 1) == 0)
  {
    v6 = llvm::LLParser::convertValIDToValue((uint64_t)this, (uint64_t)a2, (uint64_t)&v16);
    v7 = v14;
    if (v14)
    {
      if (*((unsigned __int8 *)v14 + 16) >= 0x15u)
        v7 = 0;
      *a3 = v7;
      if (!v7)
      {
        v10[0] = "global values must be constants";
        v13 = 259;
        v6 = llvm::LLLexer::Error((uint64_t)this + 168, v17, (llvm::Twine *)v10);
      }
    }
  }
  v8 = v29;
  v29 = 0;
  if (v8)
    MEMORY[0x1CAA32F9C](v8, 0x20C8093837F09);
  if ((_UNKNOWN *)v25 == &unk_1C866F1C0)
  {
    sub_1C4773C74(&v26);
  }
  else if ((*(_DWORD *)(v25 + 8) - 64) <= 0xFFFFFF7F && v26)
  {
    MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  }
  if (v23 >= 0x41 && v22)
    MEMORY[0x1CAA32F9C](v22, 0x1000C8000313F17);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[1]);
  return v6;
}

uint64_t llvm::LLParser::parseOptionalComdat(uint64_t a1, const void *a2, size_t a3, uint64_t *a4)
{
  llvm::LLLexer *v9;
  uint64_t v10;
  int v11;
  int v12;
  const char *v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  void *__dst[2];
  unint64_t v18;
  __int16 v19;

  *a4 = 0;
  if (*(_DWORD *)(a1 + 224) == 244)
  {
    v9 = (llvm::LLLexer *)(a1 + 168);
    v10 = *(_QWORD *)(a1 + 216);
    v11 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    *(_DWORD *)(a1 + 224) = v11;
    if (v11 == 12)
    {
      v12 = llvm::LLLexer::LexToken(v9);
      *(_DWORD *)(a1 + 224) = v12;
      if (v12 == 439)
      {
        *a4 = llvm::LLParser::getComdat(a1, a1 + 232, *(_QWORD *)(a1 + 216));
        *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v9);
        return (llvm::LLParser::parseToken(a1, 13, "expected ')' after comdat var") & 1) != 0;
      }
      v13 = "expected comdat variable";
    }
    else
    {
      if (a3)
      {
        if (a3 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (a3 >= 0x17)
        {
          v15 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((a3 | 7) != 0x17)
            v15 = a3 | 7;
          v16 = v15 + 1;
          v14 = (void **)operator new(v15 + 1);
          __dst[1] = (void *)a3;
          v18 = v16 | 0x8000000000000000;
          __dst[0] = v14;
        }
        else
        {
          HIBYTE(v18) = a3;
          v14 = __dst;
        }
        memmove(v14, a2, a3);
        *((_BYTE *)v14 + a3) = 0;
        *a4 = llvm::LLParser::getComdat(a1, (uint64_t)__dst, v10);
        if (SHIBYTE(v18) < 0)
          operator delete(__dst[0]);
        return 0;
      }
      v13 = "comdat cannot be unnamed";
    }
    __dst[0] = (void *)v13;
    v19 = 259;
    return llvm::LLLexer::Error((uint64_t)v9, *(char **)(a1 + 216), (llvm::Twine *)__dst);
  }
  return 0;
}

uint64_t llvm::LLParser::parseFnAttributeValuePairs(uint64_t a1, uint64_t a2, uint64_t a3, int a4, char **a5)
{
  int v10;
  llvm::LLLexer *v11;
  int v12;
  char *v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  unint64_t v26;
  int v27;
  char *v28;
  char *v30;
  int v31;
  unint64_t v32;
  llvm::LLLexer *v33;
  _QWORD v34[4];
  __int16 v35;

  v10 = 0;
  *(_DWORD *)(a2 + 16) = 0;
  v11 = (llvm::LLLexer *)(a1 + 168);
  while (1)
  {
    while (1)
    {
      while (1)
      {
        v12 = *(_DWORD *)(a1 + 224);
        if (v12 != 442)
          break;
        if ((llvm::LLParser::parseStringAttribute((llvm::LLParser *)a1, (uint64_t **)a2) & 1) != 0)
        {
LABEL_36:
          LOBYTE(v10) = 1;
          return v10 & 1;
        }
      }
      if (v12 == 9)
        return v10 & 1;
      if (v12 != 435)
        break;
      if (a4)
      {
        v28 = *(char **)(a1 + 216);
        v34[0] = "cannot have an attribute group reference in an attribute group";
        v35 = 259;
        v10 |= llvm::LLLexer::Error((uint64_t)v11, v28, (llvm::Twine *)v34);
      }
      else
      {
        v33 = v11;
        v16 = *(_DWORD *)(a1 + 256);
        v18 = *(_DWORD **)(a3 + 8);
        v17 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v18 >= v17)
        {
          v20 = *(_DWORD **)a3;
          v21 = ((uint64_t)v18 - *(_QWORD *)a3) >> 2;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 62)
            abort();
          v23 = v17 - (_QWORD)v20;
          if (v23 >> 1 > v22)
            v22 = v23 >> 1;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
            v22 = 0x3FFFFFFFFFFFFFFFLL;
          v32 = v22;
          if (v22)
          {
            v31 = *(_DWORD *)(a1 + 256);
            if (v22 >> 62)
              sub_1C4764EE4();
            v24 = (char *)operator new(4 * v22);
            v16 = v31;
          }
          else
          {
            v24 = 0;
          }
          v25 = &v24[4 * v21];
          *(_DWORD *)v25 = v16;
          v19 = v25 + 4;
          if (v18 == v20)
          {
            v26 = v32;
          }
          else
          {
            v26 = v32;
            do
            {
              v27 = *--v18;
              *((_DWORD *)v25 - 1) = v27;
              v25 -= 4;
            }
            while (v18 != v20);
          }
          *(_QWORD *)a3 = v25;
          *(_QWORD *)(a3 + 8) = v19;
          *(_QWORD *)(a3 + 16) = &v24[4 * v26];
          if (v20)
            operator delete(v20);
        }
        else
        {
          *v18 = v16;
          v19 = v18 + 1;
        }
        *(_QWORD *)(a3 + 8) = v19;
        v11 = v33;
      }
      *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v11);
    }
    v13 = *(char **)(a1 + 216);
    if (v12 == 170)
      *a5 = v13;
    v14 = sub_1C4FB772C(v12);
    if (!v14)
      break;
    v15 = v14;
    if ((llvm::LLParser::parseEnumAttribute((int *)a1, v14, (uint64_t **)a2, a4) & 1) != 0)
      goto LABEL_36;
    if (v15 != 74 && (byte_1C85FC5EE[v15 - 1] & 1) == 0)
    {
      v34[0] = "this attribute does not apply to functions";
      v35 = 259;
      v10 |= llvm::LLLexer::Error((uint64_t)v11, v13, (llvm::Twine *)v34);
    }
  }
  if (a4)
  {
    v30 = *(char **)(a1 + 216);
    v34[0] = "unterminated attribute group";
    v35 = 259;
    LOBYTE(v10) = llvm::LLLexer::Error((uint64_t)v11, v30, (llvm::Twine *)v34);
  }
  return v10 & 1;
}

uint64_t llvm::LLParser::parseEnumAttribute(int *a1, int a2, uint64_t **a3, int a4)
{
  uint64_t v6;
  uint64_t result;
  __int16 v8;
  unint64_t v9;
  __int16 v10;
  unint64_t v11;
  unsigned int v12;

  if ((a2 - 68) <= 5)
    return llvm::LLParser::parseRequiredTypeAttr((uint64_t)a1, a3, a1[56], a2);
  switch(a2)
  {
    case 'J':
      LOWORD(v12) = 0;
      if (a4)
      {
        LODWORD(v11) = 0;
        a1[56] = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
        if ((llvm::LLParser::parseToken((uint64_t)a1, 3, "expected '=' here") & 1) == 0
          && (llvm::LLParser::parseUInt32((llvm::LLParser *)a1, (unsigned int *)&v11) & 1) == 0)
        {
          v8 = (63 - __clz(v11)) | 0x100;
LABEL_30:
          llvm::AttrBuilder::addAlignmentAttr((uint64_t)a3, v8);
          goto LABEL_31;
        }
LABEL_33:
        v6 = 1;
      }
      else
      {
        v6 = 1;
        if ((llvm::LLParser::parseOptionalAlignment((uint64_t)a1, &v12, 1) & 1) == 0)
        {
          v8 = v12;
          goto LABEL_30;
        }
      }
LABEL_4:
      result = v6;
      break;
    case 'K':
      v12 = 0;
      LOBYTE(v11) = 0;
      BYTE4(v11) = 0;
      v6 = llvm::LLParser::parseAllocSizeArguments((uint64_t)a1, &v12, (uint64_t)&v11);
      if ((v6 & 1) == 0)
        llvm::AttrBuilder::addAllocSizeAttr(a3, v12, (unsigned int *)&v11);
      goto LABEL_4;
    case 'L':
      v11 = 0;
      v6 = llvm::LLParser::parseOptionalDerefAttrBytes((uint64_t)a1, 175, &v11);
      if ((v6 & 1) == 0)
        llvm::AttrBuilder::addDereferenceableAttr((llvm::AttrBuilder *)a3, v11);
      goto LABEL_4;
    case 'M':
      v11 = 0;
      v6 = llvm::LLParser::parseOptionalDerefAttrBytes((uint64_t)a1, 176, &v11);
      if ((v6 & 1) == 0)
        llvm::AttrBuilder::addDereferenceableOrNullAttr(a3, v11);
      goto LABEL_4;
    case 'N':
      LODWORD(v11) = 0;
      if (a4)
      {
        a1[56] = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
        if ((llvm::LLParser::parseToken((uint64_t)a1, 3, "expected '=' here") & 1) != 0
          || (llvm::LLParser::parseUInt32((llvm::LLParser *)a1, (unsigned int *)&v11) & 1) != 0)
        {
          goto LABEL_33;
        }
      }
      else if ((llvm::LLParser::parseOptionalStackAlignment((llvm::LLParser *)a1, (unsigned int *)&v11) & 1) != 0)
      {
        goto LABEL_33;
      }
      v9 = __clz(v11) ^ 0x13F;
      if ((_DWORD)v11)
        v10 = v9;
      else
        v10 = 0;
      llvm::AttrBuilder::addStackAlignmentAttr(a3, v10);
LABEL_31:
      v6 = 0;
      goto LABEL_4;
    case 'O':
      LODWORD(v11) = 0;
      v6 = llvm::LLParser::parseOptionalUWTableKind((uint64_t)a1, (int *)&v11);
      if ((v6 & 1) == 0)
        llvm::AttrBuilder::addUWTableAttr(a3, v11);
      goto LABEL_4;
    case 'P':
      LODWORD(v11) = 0;
      v12 = 0;
      v6 = llvm::LLParser::parseVScaleRangeArguments((llvm::LLParser *)a1, (unsigned int *)&v11, &v12);
      if ((v6 & 1) == 0)
        llvm::AttrBuilder::addVScaleRangeAttr(a3, v11, v12 | ((unint64_t)(v12 != 0) << 32));
      goto LABEL_4;
    default:
      llvm::AttrBuilder::addAttribute((unsigned int *)a3, a2);
      v6 = 0;
      a1[56] = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
      goto LABEL_4;
  }
  return result;
}

uint64_t llvm::LLParser::parseStringAttribute(llvm::LLParser *this, uint64_t **a2)
{
  llvm::LLLexer *v4;
  int v5;
  std::string::size_type size;
  std::string::size_type v7;
  char v8;
  unsigned __int8 *v9;
  size_t v10;
  BOOL v11;
  std::string *p_p;
  size_t v13;
  size_t v14;
  unsigned int *v15;
  uint64_t v16;
  std::string __p;
  void *__dst[2];
  uint64_t v20;

  v4 = (llvm::LLParser *)((char *)this + 168);
  if (*((char *)this + 255) < 0)
  {
    sub_1C47EBC30(__dst, *((void **)this + 29), *((_QWORD *)this + 30));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)((char *)this + 232);
    v20 = *((_QWORD *)this + 31);
  }
  v5 = llvm::LLLexer::LexToken(v4);
  *((_DWORD *)this + 56) = v5;
  memset(&__p, 0, sizeof(__p));
  if (v5 == 3)
  {
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v4);
    if ((llvm::LLParser::parseStringConstant((uint64_t)this, &__p) & 1) != 0)
    {
      v16 = 1;
      goto LABEL_19;
    }
    v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    size = __p.__r_.__value_.__l.__size_;
    v7 = __p.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = 0;
    v7 = 0;
    v8 = 0;
  }
  if (v20 >= 0)
    v9 = (unsigned __int8 *)__dst;
  else
    v9 = (unsigned __int8 *)__dst[0];
  if (v20 >= 0)
    v10 = HIBYTE(v20) & 0x7F;
  else
    v10 = (size_t)__dst[1];
  v11 = v8 < 0;
  if (v8 >= 0)
    p_p = &__p;
  else
    p_p = (std::string *)v7;
  v13 = v8 & 0x7F;
  if (v11)
    v14 = size;
  else
    v14 = v13;
  v15 = llvm::Attribute::get(*a2, v9, v10, (unsigned __int8 *)p_p, v14);
  sub_1C532EADC((uint64_t)(a2 + 1), v9, v10, (uint64_t)v15);
  v16 = 0;
LABEL_19:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
  return v16;
}

uint64_t sub_1C4FB772C(int a1)
{
  int v1;
  uint64_t result;

  v1 = a1 - 90;
  result = 1;
  switch(v1)
  {
    case 0:
      result = 74;
      break;
    case 9:
      result = 78;
      break;
    case 73:
      return result;
    case 74:
      result = 75;
      break;
    case 75:
      result = 2;
      break;
    case 76:
      result = 3;
      break;
    case 77:
      result = 50;
      break;
    case 78:
      result = 51;
      break;
    case 79:
      result = 52;
      break;
    case 80:
      result = 4;
      break;
    case 81:
      result = 69;
      break;
    case 82:
      result = 71;
      break;
    case 83:
      result = 5;
      break;
    case 84:
      result = 6;
      break;
    case 85:
      result = 76;
      break;
    case 86:
      result = 77;
      break;
    case 87:
      result = 7;
      break;
    case 88:
      result = 70;
      break;
    case 89:
      result = 11;
      break;
    case 90:
      result = 12;
      break;
    case 91:
      result = 13;
      break;
    case 92:
      result = 10;
      break;
    case 93:
      result = 14;
      break;
    case 94:
      result = 15;
      break;
    case 95:
      result = 17;
      break;
    case 96:
      result = 18;
      break;
    case 97:
      result = 19;
      break;
    case 98:
      result = 36;
      break;
    case 99:
      result = 20;
      break;
    case 100:
      result = 21;
      break;
    case 101:
      result = 22;
      break;
    case 102:
      result = 24;
      break;
    case 103:
      result = 25;
      break;
    case 104:
      result = 26;
      break;
    case 105:
      result = 27;
      break;
    case 106:
      result = 30;
      break;
    case 107:
      result = 38;
      break;
    case 108:
      result = 28;
      break;
    case 109:
      result = 39;
      break;
    case 110:
      result = 29;
      break;
    case 111:
      result = 31;
      break;
    case 112:
      result = 32;
      break;
    case 113:
      result = 35;
      break;
    case 114:
      result = 23;
      break;
    case 115:
      result = 37;
      break;
    case 116:
      result = 33;
      break;
    case 117:
      result = 34;
      break;
    case 118:
      result = 40;
      break;
    case 119:
      result = 41;
      break;
    case 120:
      result = 43;
      break;
    case 121:
      result = 42;
      break;
    case 122:
      result = 72;
      break;
    case 123:
      result = 44;
      break;
    case 124:
      result = 45;
      break;
    case 125:
      result = 46;
      break;
    case 126:
      result = 47;
      break;
    case 127:
      result = 48;
      break;
    case 128:
      result = 56;
      break;
    case 129:
      result = 58;
      break;
    case 130:
      result = 59;
      break;
    case 131:
      result = 60;
      break;
    case 132:
      result = 49;
      break;
    case 133:
      result = 55;
      break;
    case 134:
      result = 73;
      break;
    case 135:
      result = 54;
      break;
    case 136:
      result = 53;
      break;
    case 137:
      result = 57;
      break;
    case 138:
      result = 61;
      break;
    case 139:
      result = 63;
      break;
    case 140:
      result = 64;
      break;
    case 141:
      result = 62;
      break;
    case 142:
      result = 79;
      break;
    case 143:
      result = 80;
      break;
    case 144:
      result = 65;
      break;
    case 145:
      result = 66;
      break;
    case 146:
      result = 67;
      break;
    case 147:
      result = 9;
      break;
    case 148:
      result = 68;
      break;
    case 149:
      result = 16;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

llvm::Type **llvm::LLParser::checkValidVariableType(uint64_t a1, char *a2, uint64_t a3, llvm::Type *a4, llvm::Type **a5)
{
  llvm::Type *v6;
  int v10;
  const char *v11;
  char v12;
  int v13;
  char v14;
  const char *v15;
  char v16;
  void **v17;
  uint64_t v18;
  char v19;
  char v20;
  void **v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  _QWORD v27[4];
  __int16 v28;
  _QWORD v29[4];
  __int16 v30;
  _QWORD v31[4];
  __int16 v32;
  _QWORD v33[4];
  __int16 v34;
  _QWORD v35[2];
  void **v36;
  uint64_t v37;
  __int16 v38;
  _QWORD v39[2];
  const char *v40;
  char v41;
  char v42;

  v6 = *a5;
  if (*a5 != a4)
  {
    if (*((_BYTE *)a4 + 8) == 8)
    {
      v10 = *(unsigned __int8 *)(a3 + 32);
      if (*(_BYTE *)(a3 + 32))
      {
        if (v10 == 1)
        {
          v11 = "'";
          v35[0] = "'";
          v38 = 259;
          v12 = 3;
        }
        else
        {
          v17 = *(void ***)a3;
          v18 = *(_QWORD *)(a3 + 8);
          v12 = 2;
          if (*(_BYTE *)(a3 + 33) != 1)
          {
            LOBYTE(v10) = 2;
            v17 = (void **)a3;
          }
          v35[0] = "'";
          v36 = v17;
          v37 = v18;
          LOBYTE(v38) = 3;
          HIBYTE(v38) = v10;
          v11 = (const char *)v35;
        }
        v39[0] = v11;
        v40 = "' is not a basic block";
        v16 = 3;
      }
      else
      {
        v12 = 0;
        v38 = 256;
        v16 = 1;
      }
      v41 = v12;
      v42 = v16;
      llvm::LLLexer::Error(a1 + 168, a2, (llvm::Twine *)v39);
    }
    else
    {
      v13 = *(unsigned __int8 *)(a3 + 32);
      if (*(_BYTE *)(a3 + 32))
      {
        if (v13 == 1)
        {
          v27[0] = "'";
          v28 = 259;
          v14 = 3;
          v15 = "'";
        }
        else
        {
          v21 = *(void ***)a3;
          v22 = *(_QWORD *)(a3 + 8);
          v14 = 2;
          if (*(_BYTE *)(a3 + 33) != 1)
          {
            LOBYTE(v13) = 2;
            v21 = (void **)a3;
          }
          v27[0] = "'";
          v27[2] = v21;
          v27[3] = v22;
          LOBYTE(v28) = 3;
          HIBYTE(v28) = v13;
          v15 = (const char *)v27;
        }
        v29[0] = v15;
        v29[2] = "' defined with type '";
        LOBYTE(v30) = v14;
        v20 = 3;
        HIBYTE(v30) = 3;
        sub_1C4FB7C44((uint64_t)v25, v6);
        v31[0] = v29;
        v31[2] = v25;
        v32 = 1026;
        v33[0] = v31;
        v33[2] = "' but expected '";
        v34 = 770;
        sub_1C4FB7C44((uint64_t)__p, a4);
        v35[0] = v33;
        v36 = __p;
        v38 = 1026;
        v19 = 2;
        v39[0] = v35;
        v40 = "'";
      }
      else
      {
        v28 = 256;
        v30 = 256;
        sub_1C4FB7C44((uint64_t)v25, v6);
        v32 = 256;
        v34 = 256;
        sub_1C4FB7C44((uint64_t)__p, a4);
        v19 = 0;
        v38 = 256;
        v20 = 1;
      }
      v41 = v19;
      v42 = v20;
      llvm::LLLexer::Error(a1 + 168, a2, (llvm::Twine *)v39);
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(v25[0]);
    }
    return 0;
  }
  return a5;
}

void sub_1C4FB7C44(uint64_t a1, llvm::Type *this)
{
  __int128 v3;
  void (**v4)(llvm::raw_ostream *__hidden);
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  void **v12;
  void *v13[2];
  uint64_t v14;

  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v5 = 0;
  v9 = 0;
  v10 = 0;
  v4 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
  v12 = v13;
  v11 = 0;
  v7 = 0;
  v8 = 0;
  v6 = 0;
  llvm::Type::print(this, (llvm::raw_ostream *)&v4, 0, 0);
  if (*((char *)v12 + 23) < 0)
  {
    sub_1C47EBC30((_BYTE *)a1, *v12, (unint64_t)v12[1]);
  }
  else
  {
    v3 = *(_OWORD *)v12;
    *(_QWORD *)(a1 + 16) = v12[2];
    *(_OWORD *)a1 = v3;
  }
  v4 = off_1E81A6E70;
  if (v11 == 1 && v6)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8077774924);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
}

void *llvm::LLParser::getGlobalVal(uint64_t a1, void *a2, llvm::Type *a3, char *a4)
{
  const void **v7;
  uint64_t *v8;
  char v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  llvm::Type **v14;
  void *v15;
  uint64_t v17;
  uint64_t *v18;
  void *__p;
  char v20;
  uint64_t v21[4];
  __int16 v22;

  if (a3 && *((_BYTE *)a3 + 8) == 15)
  {
    v7 = (const void **)a2;
    v8 = *(uint64_t **)(*(_QWORD *)(a1 + 328) + 112);
    v9 = *((_BYTE *)a2 + 23);
    v10 = v9 < 0;
    v11 = *((_QWORD *)a2 + 1);
    if (v9 < 0)
      a2 = *(void **)a2;
    v12 = v9 & 0x7F;
    if (v10)
      v13 = v11;
    else
      v13 = v12;
    v14 = (llvm::Type **)sub_1C4FB7E80(v8, (unsigned __int8 *)a2, v13);
    if (v14 || (v17 = sub_1C61CE594(a1 + 984, v7), a1 + 992 != v17) && (v14 = *(llvm::Type ***)(v17 + 56)) != 0)
    {
      std::operator+<char>();
      v22 = 260;
      v21[0] = (uint64_t)&__p;
      v15 = llvm::LLParser::checkValidVariableType(a1, a4, (uint64_t)v21, a3, v14);
      if (v20 < 0)
        operator delete(__p);
    }
    else
    {
      v15 = sub_1C4FB7FA4(*(_QWORD ***)(a1 + 328), (uint64_t)a3);
      v21[0] = (uint64_t)v7;
      v18 = sub_1C61CE704(a1 + 984, v7, v21);
      v18[7] = (uint64_t)v15;
      v18[8] = (uint64_t)a4;
    }
  }
  else
  {
    v21[0] = (uint64_t)"global variable reference must have pointer type";
    v22 = 259;
    llvm::LLLexer::Error(a1 + 168, a4, (llvm::Twine *)v21);
    return 0;
  }
  return v15;
}

uint64_t sub_1C4FB7E80(uint64_t *a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  size_t v6;
  uint64_t v7;
  int v9;
  size_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *((unsigned int *)a1 + 8);
  if (v3 <= 1)
    v4 = 1;
  else
    v4 = v3;
  if (a3 < v4)
    v4 = a3;
  if (a3 <= v3)
    v4 = a3;
  if ((v3 & 0x80000000) == 0)
    v6 = v4;
  else
    v6 = a3;
  v7 = *((unsigned int *)a1 + 2);
  if (!(_DWORD)v7)
    return 0;
  v9 = 0;
  if (v6)
  {
    v10 = v6;
    v11 = a2;
    do
    {
      v12 = *v11++;
      v9 = 33 * v9 + v12;
      --v10;
    }
    while (v10);
  }
  v13 = *a1;
  v14 = *a1 + 8 * v7 + 8;
  v15 = 1;
  v16 = v9;
  while (1)
  {
    v17 = v16 & (v7 - 1);
    v18 = *(_QWORD **)(v13 + 8 * v17);
    if (v18 != (_QWORD *)-8)
    {
      if (!v18)
        return 0;
      if (*(_DWORD *)(v14 + 4 * v17) == v9
        && v6 == *v18
        && (!v6 || !memcmp(a2, (char *)v18 + *((unsigned int *)a1 + 5), v6)))
      {
        break;
      }
    }
    v16 = v15 + v17;
    ++v15;
  }
  if ((_DWORD)v17 == -1 || (int)v17 == v7)
    return 0;
  else
    return *(_QWORD *)(*(_QWORD *)(v13 + 8 * (int)v17) + 8);
}

uint64_t *sub_1C4FB7FA4(_QWORD **a1, uint64_t a2)
{
  llvm::PointerType *v4;
  BOOL v5;
  _DWORD *v6;
  _DWORD *v8;
  llvm::PointerType *v9;
  llvm::Type *v10;
  void *v11;
  _BYTE v12[32];
  __int16 v13;

  if (*(_QWORD *)(a2 + 24))
  {
    v4 = **(llvm::PointerType ***)(a2 + 16);
    if (v4)
      v5 = *((_BYTE *)v4 + 8) == 14;
    else
      v5 = 0;
    if (v5)
    {
      v10 = (llvm::Type *)(*(_DWORD *)(a2 + 8) >> 8);
      v13 = 257;
      v11 = operator new(0x80uLL);
      *((_DWORD *)v11 + 7) = *((_DWORD *)v11 + 7) & 0x38000000 | 0x40000000;
      *(_QWORD *)v11 = 0;
      return llvm::Function::Function((uint64_t *)v11 + 1, v4, 9, v10, (uint64_t)v12, (uint64_t)a1);
    }
    else
    {
      v6 = operator new(0x78uLL);
      v6[13] = v6[13] & 0x38000000 | 1;
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = 0;
      *((_QWORD *)v6 + 3) = v6 + 8;
      v13 = 257;
      return (uint64_t *)llvm::GlobalVariable::GlobalVariable((uint64_t)(v6 + 8), (uint64_t)a1, v4, 0, 9, 0, (uint64_t)v12, 0, 0, ((unint64_t)*(unsigned int *)(a2 + 8) >> 8) | 0x100000000, 0);
    }
  }
  else
  {
    v8 = operator new(0x78uLL);
    v8[13] = v8[13] & 0x38000000 | 1;
    *(_QWORD *)v8 = 0;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *((_QWORD *)v8 + 3) = v8 + 8;
    v9 = (llvm::PointerType *)(**a1 + 1912);
    v13 = 257;
    return (uint64_t *)llvm::GlobalVariable::GlobalVariable((uint64_t)(v8 + 8), (uint64_t)a1, v9, 0, 9, 0, (uint64_t)v12, 0, 0, ((unint64_t)*(unsigned int *)(a2 + 8) >> 8) | 0x100000000, 0);
  }
}

llvm::Type **llvm::LLParser::getGlobalVal(uint64_t a1, unsigned int a2, llvm::Type *a3, char *a4)
{
  uint64_t v7;
  llvm::Type **v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  _QWORD v23[4];
  __int16 v24;

  if (a3 && *((_BYTE *)a3 + 8) == 15)
  {
    v7 = *(_QWORD *)(a1 + 1032);
    if (a2 < (unint64_t)((*(_QWORD *)(a1 + 1040) - v7) >> 3))
    {
      v8 = *(llvm::Type ***)(v7 + 8 * a2);
      if (v8)
        goto LABEL_5;
    }
    v10 = (uint64_t **)(a1 + 1016);
    v11 = *(_QWORD *)(a1 + 1016);
    if (!v11)
      goto LABEL_18;
    v12 = a1 + 1016;
    do
    {
      v13 = *(_DWORD *)(v11 + 32);
      v14 = v13 >= a2;
      if (v13 >= a2)
        v15 = (uint64_t *)v11;
      else
        v15 = (uint64_t *)(v11 + 8);
      if (v14)
        v12 = v11;
      v11 = *v15;
    }
    while (*v15);
    if ((uint64_t **)v12 != v10 && *(_DWORD *)(v12 + 32) <= a2 && (v8 = *(llvm::Type ***)(v12 + 40)) != 0)
    {
LABEL_5:
      v23[0] = "@";
      v23[2] = a2;
      v24 = 2051;
      return llvm::LLParser::checkValidVariableType(a1, a4, (uint64_t)v23, a3, v8);
    }
    else
    {
LABEL_18:
      v9 = sub_1C4FB7FA4(*(_QWORD ***)(a1 + 328), (uint64_t)a3);
      v16 = *(uint64_t **)(a1 + 1016);
      v17 = (uint64_t **)(a1 + 1016);
      if (v16)
      {
        while (1)
        {
          while (1)
          {
            v17 = (uint64_t **)v16;
            v18 = *((_DWORD *)v16 + 8);
            if (v18 <= a2)
              break;
            v16 = *v17;
            v10 = v17;
            if (!*v17)
              goto LABEL_25;
          }
          if (v18 >= a2)
            break;
          v16 = v17[1];
          if (!v16)
          {
            v10 = v17 + 1;
            goto LABEL_25;
          }
        }
      }
      else
      {
LABEL_25:
        v19 = (uint64_t *)v17;
        v17 = (uint64_t **)operator new(0x38uLL);
        *((_DWORD *)v17 + 8) = a2;
        *v17 = 0;
        v17[1] = 0;
        v17[5] = 0;
        v17[6] = 0;
        v17[2] = v19;
        *v10 = (uint64_t *)v17;
        v20 = **(_QWORD **)(a1 + 1008);
        v21 = (uint64_t *)v17;
        if (v20)
        {
          *(_QWORD *)(a1 + 1008) = v20;
          v21 = *v10;
        }
        sub_1C4768E74(*(uint64_t **)(a1 + 1016), v21);
        ++*(_QWORD *)(a1 + 1024);
      }
      v17[5] = v9;
      v17[6] = (uint64_t *)a4;
    }
  }
  else
  {
    v23[0] = "global variable reference must have pointer type";
    v24 = 259;
    llvm::LLLexer::Error(a1 + 168, a4, (llvm::Twine *)v23);
    return 0;
  }
  return (llvm::Type **)v9;
}

uint64_t llvm::LLParser::parseUInt64(char **this, unint64_t *a2)
{
  llvm::LLLexer *v3;
  unint64_t *v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  uint64_t result;
  const char *v10;
  __int16 v11;

  v3 = (llvm::LLLexer *)(this + 21);
  if (*((_DWORD *)this + 56) != 457 || !*((_BYTE *)this + 316))
  {
    v10 = "expected integer";
    v11 = 259;
    return llvm::LLLexer::Error((uint64_t)(this + 21), this[27], (llvm::Twine *)&v10);
  }
  v5 = (unint64_t *)(this + 38);
  v6 = *((_DWORD *)this + 78);
  if (v6 < 0x41)
    goto LABEL_7;
  if (v6 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(this + 38)) <= 0x40)
  {
    v5 = (unint64_t *)*v5;
LABEL_7:
    v7 = *v5;
    goto LABEL_8;
  }
  v7 = -1;
LABEL_8:
  *a2 = v7;
  v8 = llvm::LLLexer::LexToken(v3);
  result = 0;
  *((_DWORD *)this + 56) = v8;
  return result;
}

uint64_t llvm::LLParser::parseOptionalParamOrReturnAttrs(llvm::LLParser *this, llvm::AttrBuilder *a2, int a3)
{
  int v6;
  char *v7;
  int v8;
  char *v9;
  int v10;
  int v11;
  const char *v13;
  __int16 v14;

  v6 = 0;
  *((_DWORD *)a2 + 4) = 0;
  v7 = (char *)this + 168;
  while (1)
  {
    while (1)
    {
      v8 = *((_DWORD *)this + 56);
      if (v8 != 442)
        break;
      if ((llvm::LLParser::parseStringAttribute(this, (uint64_t **)a2) & 1) != 0)
        goto LABEL_13;
    }
    v9 = (char *)*((_QWORD *)this + 27);
    v10 = sub_1C4FB772C(v8);
    if (!v10)
      return v6 & 1;
    v11 = v10;
    if ((llvm::LLParser::parseEnumAttribute((int *)this, v10, (uint64_t **)a2, 0) & 1) != 0)
      break;
    if (a3)
    {
      if ((byte_1C85FC5EE[v11 - 1] & 2) == 0)
      {
        v13 = "this attribute does not apply to parameters";
        goto LABEL_12;
      }
    }
    else if ((byte_1C85FC5EE[v11 - 1] & 4) == 0)
    {
      v13 = "this attribute does not apply to return values";
LABEL_12:
      v14 = 259;
      v6 |= llvm::LLLexer::Error((uint64_t)v7, v9, (llvm::Twine *)&v13);
    }
  }
LABEL_13:
  LOBYTE(v6) = 1;
  return v6 & 1;
}

uint64_t sub_1C4FB8490(int a1, _BYTE *a2)
{
  int v2;
  uint64_t result;

  *a2 = 1;
  v2 = a1 - 27;
  if ((a1 - 27) < 0x13 && ((0x6067Fu >> v2) & 1) != 0)
    return dword_1C85F760C[v2];
  result = 0;
  *a2 = 0;
  return result;
}

uint64_t llvm::LLParser::parseOptionalVisibility(uint64_t this, unsigned int *a2)
{
  unsigned int v2;
  uint64_t v3;

  v2 = *(_DWORD *)(this + 224) - 38;
  if (v2 >= 3)
  {
    *a2 = 0;
  }
  else
  {
    v3 = this;
    *a2 = v2;
    this = llvm::LLLexer::LexToken((llvm::LLLexer *)(this + 168));
    *(_DWORD *)(v3 + 224) = this;
  }
  return this;
}

uint64_t llvm::LLParser::parseOptionalDLLStorageClass(uint64_t this, unsigned int *a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v2 = this;
  v3 = *(_DWORD *)(this + 224);
  if (v3 == 34)
  {
    v4 = 1;
    goto LABEL_5;
  }
  if (v3 == 35)
  {
    v4 = 2;
LABEL_5:
    *a2 = v4;
    this = llvm::LLLexer::LexToken((llvm::LLLexer *)(this + 168));
    *(_DWORD *)(v2 + 224) = this;
    return this;
  }
  *a2 = 0;
  return this;
}

uint64_t llvm::LLParser::parseInstructionMetadata(char **this, llvm::Instruction *a2)
{
  llvm::LLLexer *v3;
  unsigned __int8 **v5;
  unsigned int v6;
  unint64_t v7;
  int v8;
  unsigned __int8 *v9;
  llvm::MDNode *v11;
  unsigned int v12;
  unsigned __int8 *v13[4];
  __int16 v14;

  v3 = (llvm::LLLexer *)(this + 21);
  if (*((_DWORD *)this + 56) == 441)
  {
    v5 = (unsigned __int8 **)((char *)a2 + 48);
    while (1)
    {
      v12 = 0;
      v11 = 0;
      if ((llvm::LLParser::parseMetadataAttachment((llvm::LLParser *)this, &v12, &v11) & 1) != 0)
        return 1;
      v6 = v12;
      if (v11)
        break;
      if (*v5 || (*((_BYTE *)a2 + 23) & 0x20) != 0)
      {
        if (!v12)
        {
          v13[0] = 0;
          goto LABEL_19;
        }
LABEL_10:
        llvm::Value::setMetadata(a2, v12, v11);
      }
      if (v6 == 1)
      {
        v7 = *((unsigned int *)this + 90);
        if (v7 >= *((unsigned int *)this + 91))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(this + 44), (uint64_t)(this + 46), v7 + 1, 8);
          v7 = *((unsigned int *)this + 90);
        }
        *(_QWORD *)&this[44][8 * v7] = a2;
        ++*((_DWORD *)this + 90);
      }
LABEL_15:
      if (*((_DWORD *)this + 56) != 4)
        return 0;
      v8 = llvm::LLLexer::LexToken(v3);
      *((_DWORD *)this + 56) = v8;
      if (v8 != 441)
        goto LABEL_28;
    }
    if (!v12)
    {
      v13[0] = (unsigned __int8 *)v11;
      llvm::MetadataTracking::track((uint64_t)v13, (unsigned __int8 *)v11, 2);
LABEL_19:
      if (v13 == v5)
      {
        if (v13[0])
          llvm::MetadataTracking::untrack((uint64_t)v13, v13[0]);
      }
      else
      {
        if (*v5)
          llvm::MetadataTracking::untrack((uint64_t)v5, *v5);
        v9 = v13[0];
        *v5 = v13[0];
        if (v9)
          llvm::MetadataTracking::retrack((uint64_t)v13, v9, (uint64_t)v5);
      }
      goto LABEL_15;
    }
    goto LABEL_10;
  }
LABEL_28:
  v13[0] = "expected metadata after comma";
  v14 = 259;
  return llvm::LLLexer::Error((uint64_t)v3, this[27], (llvm::Twine *)v13);
}

uint64_t llvm::LLParser::parseScopeAndOrdering(uint64_t **a1, int a2, unsigned __int8 *a3, _DWORD *a4)
{
  if (!a2)
    return 0;
  if ((llvm::LLParser::parseScope(a1, a3) & 1) != 0)
    return 1;
  return llvm::LLParser::parseOrdering((uint64_t)a1, a4);
}

uint64_t llvm::LLParser::parseScope(uint64_t **this, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  llvm::LLLexer *v5;
  int v6;
  char *v7;
  std::string *p_p;
  size_t size;
  uint64_t v10;
  llvm::StringMapImpl *v11;
  int v12;
  char *v13;
  uint64_t v14;
  char *v15;
  std::string __p;
  _QWORD v17[2];
  char v18[16];
  __int16 v19;

  *a2 = 1;
  if (*((_DWORD *)this + 56) != 76)
  {
LABEL_2:
    LOBYTE(v2) = 0;
    return v2 & 1;
  }
  v2 = a2;
  v5 = (llvm::LLLexer *)(this + 21);
  v6 = llvm::LLLexer::LexToken((llvm::LLLexer *)(this + 21));
  *((_DWORD *)this + 56) = v6;
  if (v6 != 12)
  {
    v13 = (char *)this[27];
    v17[0] = "Expected '(' in syncscope";
    v19 = 259;
    LOBYTE(v2) = llvm::LLLexer::Error((uint64_t)v5, v13, (llvm::Twine *)v17);
    return v2 & 1;
  }
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v5);
  memset(&__p, 0, sizeof(__p));
  v7 = (char *)this[27];
  if ((llvm::LLParser::parseStringConstant((uint64_t)this, &__p) & 1) != 0)
  {
    v17[0] = "Expected synchronization scope name";
    v19 = 259;
    v14 = (uint64_t)v5;
    v15 = v7;
  }
  else
  {
    if (*((_DWORD *)this + 56) == 13)
    {
      *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v5);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __p.__r_.__value_.__l.__size_;
      v10 = **this;
      v11 = (llvm::StringMapImpl *)(v10 + 2608);
      LODWORD(v10) = *(_DWORD *)(v10 + 2620);
      v17[0] = p_p;
      v17[1] = size;
      v18[0] = v10;
      *v2 = *(_BYTE *)(*sub_1C53FF564(v11, (unsigned __int8 *)p_p, size, v18) + 8);
      v12 = 1;
      goto LABEL_14;
    }
    v15 = (char *)this[27];
    v17[0] = "Expected ')' in syncscope";
    v19 = 259;
    v14 = (uint64_t)v5;
  }
  LOBYTE(v2) = llvm::LLLexer::Error(v14, v15, (llvm::Twine *)v17);
  v12 = 0;
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12)
    goto LABEL_2;
  return v2 & 1;
}

uint64_t llvm::LLParser::parseIndexList(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  llvm::LLLexer *v4;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t result;
  const char *v12;
  unsigned int v13[8];
  __int16 v14;

  *a3 = 0;
  v4 = (llvm::LLLexer *)(a1 + 168);
  if (*(_DWORD *)(a1 + 224) == 4)
  {
    v7 = a2 + 16;
    while (1)
    {
      v8 = llvm::LLLexer::LexToken(v4);
      *(_DWORD *)(a1 + 224) = v8;
      if (v8 == 441)
        break;
      v13[0] = 0;
      if (llvm::LLParser::parseUInt32((llvm::LLParser *)a1, v13))
        return 1;
      v9 = v13[0];
      v10 = *(unsigned int *)(a2 + 8);
      if (v10 >= *(unsigned int *)(a2 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v7, v10 + 1, 4);
        v10 = *(unsigned int *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v10) = v9;
      ++*(_DWORD *)(a2 + 8);
      if (*(_DWORD *)(a1 + 224) != 4)
        return 0;
    }
    if (*(_DWORD *)(a2 + 8))
    {
      result = 0;
      *a3 = 1;
      return result;
    }
    v12 = "expected index";
  }
  else
  {
    v12 = "expected ',' as start of index list";
  }
  *(_QWORD *)v13 = v12;
  v14 = 259;
  return llvm::LLLexer::Error((uint64_t)v4, *(char **)(a1 + 216), (llvm::Twine *)v13);
}

uint64_t llvm::LLParser::parseTargetExtType(llvm::LLParser *this, llvm::Type **a2)
{
  llvm::LLLexer *v4;
  uint64_t v5;
  BOOL v7;
  int v8;
  BOOL v9;
  unsigned int v10;
  uint64_t v11;
  llvm::Type *v12;
  uint64_t v13;
  _QWORD *v14;
  std::string *p_p;
  size_t size;
  llvm::Type *v17;
  std::string __p;
  unsigned int v19[8];
  __int16 v20;
  void *v21;
  uint64_t v22;
  _BYTE v23[48];
  void *v24;
  uint64_t v25;
  _QWORD v26[7];

  v26[6] = *MEMORY[0x1E0C80C00];
  v4 = (llvm::LLParser *)((char *)this + 168);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  memset(&__p, 0, sizeof(__p));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' in target extension type") & 1) != 0
    || (llvm::LLParser::parseStringConstant((uint64_t)this, &__p) & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v24 = v26;
    v25 = 0x600000000;
    v21 = v23;
    v22 = 0xC00000000;
    if (*((_DWORD *)this + 56) == 4)
    {
      v7 = 0;
      do
      {
        v8 = llvm::LLLexer::LexToken(v4);
        *((_DWORD *)this + 56) = v8;
        v9 = v8 == 457;
        if (v8 == 457)
        {
          v19[0] = 0;
          if ((llvm::LLParser::parseUInt32(this, v19) & 1) != 0)
            goto LABEL_22;
          v10 = v19[0];
          v11 = v22;
          if (v22 >= (unint64_t)HIDWORD(v22))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v21, (uint64_t)v23, v22 + 1, 4);
            v11 = v22;
          }
          *((_DWORD *)v21 + v11) = v10;
          LODWORD(v22) = v22 + 1;
        }
        else
        {
          if (v7)
          {
            *(_QWORD *)v19 = "expected uint32 param";
            v20 = 259;
            v5 = llvm::LLLexer::Error((uint64_t)v4, *((char **)this + 27), (llvm::Twine *)v19);
            goto LABEL_23;
          }
          v17 = 0;
          *(_QWORD *)v19 = "expected type";
          v20 = 259;
          if ((llvm::LLParser::parseType(this, &v17, (const llvm::Twine *)v19, 1) & 1) != 0)
            goto LABEL_22;
          v12 = v17;
          v13 = v25;
          if (v25 >= (unint64_t)HIDWORD(v25))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v24, (uint64_t)v26, v25 + 1, 8);
            v13 = v25;
          }
          *((_QWORD *)v24 + v13) = v12;
          LODWORD(v25) = v25 + 1;
        }
        v7 = v9;
      }
      while (*((_DWORD *)this + 56) == 4);
    }
    if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' in target extension type") & 1) != 0)
    {
LABEL_22:
      v5 = 1;
    }
    else
    {
      v14 = *(_QWORD **)this;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __p.__r_.__value_.__l.__size_;
      v5 = 0;
      *a2 = (llvm::Type *)llvm::TargetExtType::get(v14, p_p, size, (uint64_t *)v24, v25, (int *)v21, v22);
    }
LABEL_23:
    if (v21 != v23)
      free(v21);
    if (v24 != v26)
      free(v24);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

uint64_t llvm::LLParser::parseParameterList(uint64_t a1, uint64_t a2, llvm::LLParser::PerFunctionState *a3, int a4, int a5)
{
  uint64_t result;
  int v11;
  llvm::Metadata *v12;
  llvm::Type *v13;
  char v14;
  llvm::Value *v15;
  llvm::Metadata *Sorted;
  uint64_t v17;
  unint64_t v18;
  llvm::Metadata **v19;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  BOOL v23;
  char *v24;
  llvm::LLLexer *v25;
  int v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;
  llvm::Metadata *v30[3];
  llvm::Value *v31;
  llvm::Type *v32;
  const char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if ((llvm::LLParser::parseToken(a1, 12, "expected '(' in call") & 1) != 0)
    return 1;
  v29 = a2 + 16;
  while (1)
  {
    v11 = *(_DWORD *)(a1 + 224);
    if (v11 == 13)
    {
      v25 = (llvm::LLLexer *)(a1 + 168);
      if (!a4 || !a5)
      {
        v26 = llvm::LLLexer::LexToken(v25);
        result = 0;
        *(_DWORD *)(a1 + 224) = v26;
        return result;
      }
      v33 = "expected '...' at end of argument list for musttail call in varargs function";
      v27 = 259;
      goto LABEL_38;
    }
    if (*(_DWORD *)(a2 + 8))
    {
      if ((llvm::LLParser::parseToken(a1, 4, "expected ',' in argument list") & 1) != 0)
        return 1;
      v11 = *(_DWORD *)(a1 + 224);
    }
    if (v11 == 2)
      break;
    v31 = 0;
    v32 = 0;
    v12 = *(llvm::Metadata **)(a1 + 216);
    v33 = "expected type";
    v37 = 259;
    if (llvm::LLParser::parseType((llvm::LLParser *)a1, &v32, (const llvm::Twine *)&v33, 0))
      return 1;
    v33 = **(const char ***)(a1 + 328);
    v34 = &v36;
    v35 = 0x800000000;
    v13 = v32;
    if (*((_BYTE *)v32 + 8) == 9)
    {
      v30[0] = 0;
      if ((llvm::LLParser::parseMetadata((llvm::LLParser *)a1, v30, a3) & 1) == 0)
      {
        v15 = (llvm::Value *)llvm::MetadataAsValue::get(*(uint64_t **)a1, (unsigned __int8 *)v30[0]);
        v31 = v15;
        goto LABEL_21;
      }
    }
    else if ((llvm::LLParser::parseOptionalParamOrReturnAttrs((llvm::LLParser *)a1, (llvm::AttrBuilder *)&v33, 1) & 1) == 0
           && (llvm::LLParser::parseValue((uint64_t **)a1, v13, &v31, a3) & 1) == 0)
    {
      v15 = v31;
LABEL_21:
      Sorted = (llvm::Metadata *)llvm::AttributeSetNode::getSorted(**(uint64_t ***)v15, (uint64_t *)v34, v35);
      v30[0] = v12;
      v30[1] = v15;
      v30[2] = Sorted;
      v17 = *(unsigned int *)(a2 + 8);
      v18 = *(_QWORD *)a2;
      if (v17 >= *(_DWORD *)(a2 + 12))
      {
        v22 = v17 + 1;
        v23 = v18 + 24 * v17 > (unint64_t)v30;
        if (v18 > (unint64_t)v30 || !v23)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v29, v22, 24);
          v18 = *(_QWORD *)a2;
          goto LABEL_22;
        }
        v24 = (char *)v30 - v18;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v29, v22, 24);
        v18 = *(_QWORD *)a2;
        v19 = (llvm::Metadata **)&v24[*(_QWORD *)a2];
      }
      else
      {
LABEL_22:
        v19 = v30;
      }
      v20 = v18 + 24 * *(unsigned int *)(a2 + 8);
      v21 = *(_OWORD *)v19;
      *(_QWORD *)(v20 + 16) = v19[2];
      *(_OWORD *)v20 = v21;
      ++*(_DWORD *)(a2 + 8);
      v14 = 1;
      goto LABEL_13;
    }
    v14 = 0;
LABEL_13:
    if (v34 != &v36)
      free(v34);
    result = 1;
    if ((v14 & 1) == 0)
      return result;
  }
  v25 = (llvm::LLLexer *)(a1 + 168);
  if ((a4 & 1) != 0)
  {
    if ((a5 & 1) != 0)
    {
      *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v25);
      return llvm::LLParser::parseToken(a1, 13, "expected ')' at end of argument list");
    }
    v28 = "musttail call in non-varargs function";
  }
  else
  {
    v28 = "non-musttail call";
  }
  v33 = "unexpected ellipsis in argument list for ";
  v35 = (uint64_t)v28;
  v27 = 771;
LABEL_38:
  v37 = v27;
  return llvm::LLLexer::Error((uint64_t)v25, *(char **)(a1 + 216), (llvm::Twine *)&v33);
}

uint64_t llvm::LLParser::parseMetadataAsValue(llvm::LLParser *a1, uint64_t *a2, llvm::LLParser::PerFunctionState *a3)
{
  uint64_t v5;
  llvm::Metadata *v7;

  v7 = 0;
  v5 = llvm::LLParser::parseMetadata(a1, &v7, a3);
  if ((v5 & 1) == 0)
    *a2 = llvm::MetadataAsValue::get(*(uint64_t **)a1, (unsigned __int8 *)v7);
  return v5;
}

uint64_t llvm::LLParser::parseOptionalOperandBundles(uint64_t a1, uint64_t a2, llvm::LLParser::PerFunctionState *a3)
{
  llvm::LLLexer *v6;
  char *v7;
  int v8;
  int v9;
  uint64_t result;
  char v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  char *v23;
  llvm::Value **v24;
  unint64_t v25;
  llvm::Value *v26;
  char *v27;
  unsigned int v28;
  uint64_t v29;
  std::string::size_type v30;
  char v31;
  char *v32;
  _QWORD *v33;
  char *v34;
  unint64_t v35;
  char *v36;
  char *v37;
  std::string::size_type v38;
  char v39;
  int v40;
  unint64_t v41;
  char *v42;
  _QWORD *v43;
  llvm::Value *v44;
  std::string __p;
  llvm::Type *v46;
  _BYTE v47[30];
  __int16 v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 224) != 6)
    return 0;
  v6 = (llvm::LLLexer *)(a1 + 168);
  v7 = *(char **)(a1 + 216);
  v8 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *(_DWORD *)(a1 + 224) = v8;
  if (v8 == 7)
  {
LABEL_3:
    if (*(_DWORD *)(a2 + 8))
    {
      v9 = llvm::LLLexer::LexToken(v6);
      result = 0;
      *(_DWORD *)(a1 + 224) = v9;
    }
    else
    {
      *(_QWORD *)v47 = "operand bundle set must not be empty";
      v48 = 259;
      return llvm::LLLexer::Error((uint64_t)v6, v7, (llvm::Twine *)v47);
    }
  }
  else
  {
    while (!*(_DWORD *)(a2 + 8) || (llvm::LLParser::parseToken(a1, 4, "expected ',' in input list") & 1) == 0)
    {
      memset(&__p, 0, sizeof(__p));
      if ((llvm::LLParser::parseStringConstant(a1, &__p) & 1) != 0
        || (llvm::LLParser::parseToken(a1, 12, "expected '(' in operand bundle") & 1) != 0)
      {
        v11 = 0;
      }
      else if (*(_DWORD *)(a1 + 224) == 13)
      {
        v12 = 0;
        v13 = 0;
        v14 = 0;
LABEL_43:
        v28 = *(_DWORD *)(a2 + 8);
        if (v28 >= *(_DWORD *)(a2 + 12))
        {
          v46 = 0;
          v32 = v12;
          v33 = v13;
          v34 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a2, 0, 48, (unint64_t *)&v46);
          v35 = v14;
          v36 = v34;
          v37 = &v34[48 * *(unsigned int *)(a2 + 8)];
          *(_QWORD *)v47 = __p.__r_.__value_.__l.__size_;
          v38 = __p.__r_.__value_.__r.__words[0];
          *(_QWORD *)&v47[7] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
          v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          memset(&__p, 0, sizeof(__p));
          *(_QWORD *)v37 = v38;
          *(_QWORD *)(v37 + 15) = *(_QWORD *)&v47[7];
          *((_QWORD *)v37 + 1) = *(_QWORD *)v47;
          v37[23] = v39;
          *((_QWORD *)v37 + 3) = v32;
          *((_QWORD *)v37 + 4) = v33;
          *((_QWORD *)v37 + 5) = v35;
          sub_1C4FCE92C((uint64_t *)a2, (uint64_t)v34);
          v40 = (int)v46;
          if (*(_QWORD *)a2 != a2 + 16)
            free(*(void **)a2);
          *(_QWORD *)a2 = v36;
          ++*(_DWORD *)(a2 + 8);
          *(_DWORD *)(a2 + 12) = v40;
        }
        else
        {
          v29 = *(_QWORD *)a2 + 48 * v28;
          *(_QWORD *)v47 = __p.__r_.__value_.__l.__size_;
          v30 = __p.__r_.__value_.__r.__words[0];
          *(_QWORD *)&v47[7] = *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 7);
          v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          memset(&__p, 0, sizeof(__p));
          *(_QWORD *)v29 = v30;
          *(_QWORD *)(v29 + 15) = *(_QWORD *)&v47[7];
          *(_QWORD *)(v29 + 8) = *(_QWORD *)v47;
          *(_BYTE *)(v29 + 23) = v31;
          *(_QWORD *)(v29 + 24) = v12;
          *(_QWORD *)(v29 + 32) = 0;
          *(_QWORD *)(v29 + 32) = v13;
          *(_QWORD *)(v29 + 40) = 0;
          *(_QWORD *)(v29 + 40) = v14;
          ++*(_DWORD *)(a2 + 8);
        }
        *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v6);
        v11 = 1;
      }
      else
      {
        v12 = 0;
        v15 = 0;
        v14 = 0;
        while (1)
        {
          v42 = v12;
          if (v12 != v15 && (llvm::LLParser::parseToken(a1, 4, "expected ',' in input list") & 1) != 0)
            break;
          v46 = 0;
          *(_QWORD *)v47 = "expected type";
          v44 = 0;
          v48 = 259;
          if ((llvm::LLParser::parseType((llvm::LLParser *)a1, &v46, (const llvm::Twine *)v47, 0) & 1) != 0
            || (llvm::LLParser::parseValue((uint64_t **)a1, v46, &v44, a3) & 1) != 0)
          {
            break;
          }
          v12 = v42;
          if ((unint64_t)v15 >= v14)
          {
            v16 = v14;
            v17 = (v15 - v42) >> 3;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 61)
              abort();
            v19 = v16 - (_QWORD)v42;
            v20 = (uint64_t)(v16 - (_QWORD)v42) >> 2;
            if (v20 > v18)
              v18 = v20;
            v21 = v19 >= 0x7FFFFFFFFFFFFFF8;
            v22 = 0x1FFFFFFFFFFFFFFFLL;
            if (!v21)
              v22 = v18;
            v41 = v22;
            if (v22)
            {
              if (v22 >> 61)
                sub_1C4764EE4();
              v23 = (char *)operator new(8 * v22);
              v12 = v42;
            }
            else
            {
              v23 = 0;
            }
            v24 = (llvm::Value **)&v23[8 * v17];
            *v24 = v44;
            v13 = v24 + 1;
            if (v12 == v15)
            {
              v25 = v41;
            }
            else
            {
              v25 = v41;
              do
              {
                v26 = (llvm::Value *)*((_QWORD *)v15 - 1);
                v15 -= 8;
                *--v24 = v26;
              }
              while (v15 != v12);
            }
            v27 = &v23[8 * v25];
            if (v12)
            {
              v43 = v13;
              operator delete(v12);
              v13 = v43;
            }
            v12 = (char *)v24;
            v14 = (unint64_t)v27;
          }
          else
          {
            *(_QWORD *)v15 = v44;
            v13 = v15 + 8;
          }
          v15 = (char *)v13;
          if (*(_DWORD *)(a1 + 224) == 13)
            goto LABEL_43;
        }
        if (v42)
          operator delete(v42);
        v11 = 0;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v11 & 1) == 0)
        break;
      if (*(_DWORD *)(a1 + 224) == 7)
        goto LABEL_3;
    }
    return 1;
  }
  return result;
}

uint64_t llvm::LLParser::parseArgumentList(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  llvm::LLLexer *v6;
  int v7;
  llvm::Type *v8;
  char *v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  char *v15;
  int v16;
  int v17;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  char *v22;
  const char *v23;
  __int16 v24;
  _QWORD v25[2];
  uint64_t v26;
  __int16 v27;
  std::string v28;
  llvm::Type *v29;
  char *v30;
  uint64_t v31[2];
  const char *v32;
  __int16 v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[10];

  v37[8] = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  v6 = (llvm::LLLexer *)(a1 + 168);
  v7 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *(_DWORD *)(a1 + 224) = v7;
  if (v7 == 13)
    goto LABEL_4;
  if (v7 == 2)
  {
    *a3 = 1;
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v6);
LABEL_4:
    LOBYTE(v8) = llvm::LLParser::parseToken(a1, 13, "expected ')' at end of argument list");
    return v8 & 1;
  }
  v9 = *(char **)(a1 + 216);
  v29 = 0;
  v30 = v9;
  v34 = **(_QWORD **)(a1 + 328);
  v35 = v37;
  v36 = 0x800000000;
  memset(&v28, 0, sizeof(v28));
  v31[0] = (uint64_t)"expected type";
  v33 = 259;
  if ((llvm::LLParser::parseType((llvm::LLParser *)a1, &v29, (const llvm::Twine *)v31, 0) & 1) != 0)
  {
LABEL_6:
    v10 = 0;
    LOBYTE(v8) = 1;
    goto LABEL_36;
  }
  LOBYTE(v8) = 1;
  if ((llvm::LLParser::parseOptionalParamOrReturnAttrs((llvm::LLParser *)a1, (llvm::AttrBuilder *)&v34, 1) & 1) != 0)
    goto LABEL_8;
  v8 = v29;
  v11 = *((unsigned __int8 *)v29 + 8);
  if (v11 == 7)
  {
    v19 = "argument can not have void type";
    goto LABEL_44;
  }
  v12 = *(_DWORD *)(a1 + 224);
  if (v12 == 434)
  {
    if (*(_DWORD *)(a1 + 256))
    {
      v25[0] = "argument expected to be numbered '%";
      v26 = 0;
      v27 = 2051;
      v31[0] = (uint64_t)v25;
      v32 = "'";
      v20 = 770;
      goto LABEL_45;
    }
    v13 = 1;
  }
  else
  {
    if (v12 != 440)
    {
      v13 = 0;
      goto LABEL_17;
    }
    std::string::operator=(&v28, (const std::string *)(a1 + 232));
    v13 = 0;
  }
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v6);
  v11 = *((_DWORD *)v8 + 2);
LABEL_17:
  if (v11 == 14 || v11 == 7)
  {
    v19 = "invalid type for function argument";
LABEL_44:
    v31[0] = (uint64_t)v19;
    v20 = 259;
LABEL_45:
    v33 = v20;
    v21 = (uint64_t)v6;
    v22 = v9;
    goto LABEL_46;
  }
  v31[0] = llvm::AttributeSetNode::getSorted(*(uint64_t **)v8, (uint64_t *)v35, v36);
  sub_1C4FB98DC(a2, &v30, (uint64_t *)&v29, v31, (__int128 *)&v28);
  if (*(_DWORD *)(a1 + 224) != 4)
  {
    v10 = 1;
    goto LABEL_36;
  }
  while (1)
  {
    v14 = llvm::LLLexer::LexToken(v6);
    *(_DWORD *)(a1 + 224) = v14;
    if (v14 == 2)
    {
      *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v6);
      v10 = 1;
      *a3 = 1;
      goto LABEL_36;
    }
    v15 = *(char **)(a1 + 216);
    v30 = v15;
    v31[0] = (uint64_t)"expected type";
    v33 = 259;
    if ((llvm::LLParser::parseType((llvm::LLParser *)a1, &v29, (const llvm::Twine *)v31, 0) & 1) != 0)
      goto LABEL_6;
    LOBYTE(v8) = 1;
    if ((llvm::LLParser::parseOptionalParamOrReturnAttrs((llvm::LLParser *)a1, (llvm::AttrBuilder *)&v34, 1) & 1) != 0)
      goto LABEL_8;
    v8 = v29;
    if (*((_BYTE *)v29 + 8) == 7)
    {
      v23 = "argument can not have void type";
      goto LABEL_50;
    }
    v16 = *(_DWORD *)(a1 + 224);
    if (v16 == 434)
      break;
    if (v16 != 440)
      goto LABEL_29;
    std::string::operator=(&v28, (const std::string *)(a1 + 232));
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v6);
LABEL_30:
    v17 = *((unsigned __int8 *)v8 + 8);
    if (v17 == 14 || v17 == 7)
    {
      v23 = "invalid type for function argument";
LABEL_50:
      v31[0] = (uint64_t)v23;
      v24 = 259;
      goto LABEL_51;
    }
    v31[0] = llvm::AttributeSetNode::getSorted(*(uint64_t **)v8, (uint64_t *)v35, v36);
    sub_1C4FB98DC(a2, &v30, (uint64_t *)&v29, v31, (__int128 *)&v28);
    v10 = 1;
    LOBYTE(v8) = 1;
    if (*(_DWORD *)(a1 + 224) != 4)
      goto LABEL_36;
  }
  if (*(_DWORD *)(a1 + 256) == v13)
  {
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v6);
LABEL_29:
    ++v13;
    MEMORY[0x1CAA32ABC](&v28, "");
    goto LABEL_30;
  }
  v25[0] = "argument expected to be numbered '%";
  v26 = v13;
  v27 = 2051;
  v31[0] = (uint64_t)v25;
  v32 = "'";
  v24 = 770;
LABEL_51:
  v33 = v24;
  v21 = (uint64_t)v6;
  v22 = v15;
LABEL_46:
  LOBYTE(v8) = llvm::LLLexer::Error(v21, v22, (llvm::Twine *)v31);
LABEL_8:
  v10 = 0;
LABEL_36:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (v35 != v37)
    free(v35);
  if (v10)
    goto LABEL_4;
  return v8 & 1;
}

void sub_1C4FB98DC(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4, __int128 *a5)
{
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  __int128 v15;
  int v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  __int128 v22;
  char *v23;
  int v24;
  char *v25;
  char *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;

  v10 = *(_DWORD *)(a1 + 8);
  if (v10 >= *(_DWORD *)(a1 + 12))
  {
    v32 = 0;
    v17 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 48, &v32);
    v18 = &v17[48 * *(unsigned int *)(a1 + 8)];
    v19 = *a3;
    v20 = *a4;
    *(_QWORD *)v18 = *a2;
    *((_QWORD *)v18 + 1) = v19;
    *((_QWORD *)v18 + 2) = v20;
    v21 = v18 + 24;
    if (*((char *)a5 + 23) < 0)
    {
      sub_1C47EBC30(v21, *(void **)a5, *((_QWORD *)a5 + 1));
    }
    else
    {
      v22 = *a5;
      *((_QWORD *)v18 + 5) = *((_QWORD *)a5 + 2);
      *(_OWORD *)v21 = v22;
    }
    v23 = *(char **)a1;
    v24 = *(_DWORD *)(a1 + 8);
    if (v24)
    {
      v25 = &v23[48 * v24];
      v26 = v17;
      do
      {
        v27 = *(_OWORD *)v23;
        *((_QWORD *)v26 + 2) = *((_QWORD *)v23 + 2);
        *(_OWORD *)v26 = v27;
        v28 = *(_OWORD *)(v23 + 24);
        *((_QWORD *)v26 + 5) = *((_QWORD *)v23 + 5);
        *(_OWORD *)(v26 + 24) = v28;
        *((_QWORD *)v23 + 4) = 0;
        *((_QWORD *)v23 + 5) = 0;
        *((_QWORD *)v23 + 3) = 0;
        v23 += 48;
        v26 += 48;
      }
      while (v23 != v25);
      v23 = *(char **)a1;
      v29 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v29)
      {
        v30 = 48 * v29;
        do
        {
          if (v23[v30 - 1] < 0)
            operator delete(*(void **)&v23[v30 - 24]);
          v30 -= 48;
        }
        while (v30);
        v23 = *(char **)a1;
      }
    }
    v31 = v32;
    if (v23 != (char *)(a1 + 16))
      free(v23);
    *(_QWORD *)a1 = v17;
    v16 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 12) = v31;
  }
  else
  {
    v11 = (_QWORD *)(*(_QWORD *)a1 + 48 * v10);
    v12 = *a3;
    v13 = *a4;
    *v11 = *a2;
    v11[1] = v12;
    v11[2] = v13;
    v14 = v11 + 3;
    if (*((char *)a5 + 23) < 0)
    {
      sub_1C47EBC30(v14, *(void **)a5, *((_QWORD *)a5 + 1));
    }
    else
    {
      v15 = *a5;
      v11[5] = *((_QWORD *)a5 + 2);
      *(_OWORD *)v14 = v15;
    }
    v16 = *(_DWORD *)(a1 + 8) + 1;
  }
  *(_DWORD *)(a1 + 8) = v16;
}

void llvm::LLParser::PerFunctionState::~PerFunctionState(llvm::LLParser::PerFunctionState *this, llvm::Type *a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  llvm::UndefValue *v6;
  char *v7;
  char *v8;
  BOOL v9;
  llvm::LLParser::PerFunctionState *v10;
  uint64_t v11;
  llvm::UndefValue *v12;
  llvm::LLParser::PerFunctionState *v13;
  llvm::LLParser::PerFunctionState *v14;
  void *v15;

  v3 = (char *)*((_QWORD *)this + 2);
  v4 = (char *)this + 24;
  if (v3 != (char *)this + 24)
  {
    do
    {
      v5 = *((_QWORD *)v3 + 7);
      if (*(_BYTE *)(v5 + 16) != 22)
      {
        v6 = llvm::UndefValue::get(*(llvm::UndefValue **)v5, a2);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v5, v6, (llvm::Value *)1);
        llvm::Value::deleteValue(*((llvm::Value **)v3 + 7));
      }
      v7 = (char *)*((_QWORD *)v3 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v3 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v3;
          v3 = v8;
        }
        while (!v9);
      }
      v3 = v8;
    }
    while (v8 != v4);
  }
  v10 = (llvm::LLParser::PerFunctionState *)*((_QWORD *)this + 5);
  if (v10 != (llvm::LLParser::PerFunctionState *)((char *)this + 48))
  {
    do
    {
      v11 = *((_QWORD *)v10 + 5);
      if (*(_BYTE *)(v11 + 16) != 22)
      {
        v12 = llvm::UndefValue::get(*(llvm::UndefValue **)v11, a2);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v11, v12, (llvm::Value *)1);
        llvm::Value::deleteValue(*((llvm::Value **)v10 + 5));
      }
      v13 = (llvm::LLParser::PerFunctionState *)*((_QWORD *)v10 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(llvm::LLParser::PerFunctionState **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (llvm::LLParser::PerFunctionState *)*((_QWORD *)v10 + 2);
          v9 = *(_QWORD *)v14 == (_QWORD)v10;
          v10 = v14;
        }
        while (!v9);
      }
      v10 = v14;
    }
    while (v14 != (llvm::LLParser::PerFunctionState *)((char *)this + 48));
  }
  v15 = (void *)*((_QWORD *)this + 8);
  if (v15)
  {
    *((_QWORD *)this + 9) = v15;
    operator delete(v15);
  }
  sub_1C6143384(*((_QWORD **)this + 6));
  sub_1C4FCEA58(*((char **)this + 3));
}

uint64_t llvm::LLParser::PerFunctionState::finishFunction(llvm::LLParser::PerFunctionState *this)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  std::string *v5;
  std::string::size_type v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::string::size_type v10;
  void *__p[2];
  std::string::size_type v12;
  __int16 v13;
  std::string v14;
  _QWORD v15[4];
  __int16 v16;

  if (*((_QWORD *)this + 4))
  {
    v3 = *(_QWORD *)this;
    v4 = *(char **)(*((_QWORD *)this + 2) + 64);
    std::operator+<char>();
    v5 = std::string::append(&v14, "'");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v12 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v16 = 260;
    v15[0] = __p;
    v1 = llvm::LLLexer::Error(v3 + 168, v4, (llvm::Twine *)v15);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  else if (*((_QWORD *)this + 7))
  {
    v7 = *(_QWORD *)this;
    v8 = *((_QWORD *)this + 5);
    v9 = *(char **)(v8 + 48);
    v10 = *(unsigned int *)(v8 + 32);
    __p[0] = "use of undefined value '%";
    v12 = v10;
    v13 = 2051;
    v15[0] = __p;
    v15[2] = "'";
    v16 = 770;
    return llvm::LLLexer::Error(v7 + 168, v9, (llvm::Twine *)v15);
  }
  else
  {
    return 0;
  }
  return v1;
}

uint64_t llvm::LLParser::PerFunctionState::getVal(uint64_t *a1, void *a2, unsigned __int8 *a3, char *a4)
{
  const void **v6;
  uint64_t *v8;
  char v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  llvm::Type **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  void *__p;
  char v30;
  uint64_t v31[4];
  __int16 v32;

  v6 = (const void **)a2;
  v8 = *(uint64_t **)(a1[1] + 104);
  v9 = *((_BYTE *)a2 + 23);
  v10 = v9 < 0;
  v11 = *((_QWORD *)a2 + 1);
  if (v9 < 0)
    a2 = *(void **)a2;
  v12 = v9 & 0x7F;
  if (v10)
    v13 = v11;
  else
    v13 = v12;
  v14 = (llvm::Type **)sub_1C4FB7E80(v8, (unsigned __int8 *)a2, v13);
  if (!v14)
  {
    v18 = (uint64_t)(a1 + 2);
    v19 = sub_1C61CE594((uint64_t)(a1 + 2), v6);
    if (a1 + 3 == (uint64_t *)v19 || (v14 = *(llvm::Type ***)(v19 + 56)) == 0)
    {
      v20 = a3[8];
      if (v20 != 14)
      {
        if (v20 == 8)
        {
          v22 = a1[1];
          v23 = **(_QWORD ***)v22;
          v32 = 260;
          v31[0] = (uint64_t)v6;
          v16 = operator new();
          *(_QWORD *)v16 = *v23 + 1600;
          *(_QWORD *)(v16 + 8) = 0;
          v24 = *(_DWORD *)(v16 + 20) & 0xC0000000;
          *(_DWORD *)(v16 + 16) = 22;
          *(_DWORD *)(v16 + 20) = v24;
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 32) = 0;
          *(_QWORD *)(v16 + 40) = v16 + 40;
          *(_QWORD *)(v16 + 48) = v16 + 40;
          *(_QWORD *)(v16 + 56) = 0;
          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v22 + 72, (_QWORD *)v16);
          v25 = *(_QWORD *)(v22 + 72);
          *(_QWORD *)(v16 + 32) = v22 + 72;
          *(_QWORD *)(v16 + 24) = v25;
          *(_QWORD *)(v25 + 8) = v16 + 24;
          *(_QWORD *)(v22 + 72) = v16 + 24;
          v26 = v16;
        }
        else
        {
          if (v20 == 7)
            goto LABEL_15;
          v26 = operator new();
          v16 = v26;
          v32 = 260;
          v31[0] = (uint64_t)v6;
          *(_QWORD *)v26 = a3;
          *(_QWORD *)(v26 + 8) = 0;
          v27 = *(_DWORD *)(v26 + 20) & 0xC0000000;
          *(_DWORD *)(v26 + 16) = 21;
          *(_DWORD *)(v26 + 20) = v27;
          *(_QWORD *)(v26 + 24) = 0;
          *(_DWORD *)(v26 + 32) = 0;
        }
        llvm::Value::setName((uint64_t ***)v26, (uint64_t)v31);
        v31[0] = (uint64_t)v6;
        v28 = sub_1C61CE704(v18, v6, v31);
        v28[7] = v16;
        v28[8] = (uint64_t)a4;
        return v16;
      }
LABEL_15:
      v21 = *a1;
      v31[0] = (uint64_t)"invalid use of a non-first-class type";
      v32 = 259;
      llvm::LLLexer::Error(v21 + 168, a4, (llvm::Twine *)v31);
      return 0;
    }
  }
  v15 = *a1;
  std::operator+<char>();
  v32 = 260;
  v31[0] = (uint64_t)&__p;
  v16 = (uint64_t)llvm::LLParser::checkValidVariableType(v15, a4, (uint64_t)v31, (llvm::Type *)a3, v14);
  if (v30 < 0)
    operator delete(__p);
  return v16;
}

uint64_t llvm::LLParser::PerFunctionState::setInstName(uint64_t **a1, unint64_t a2, uint64_t a3, char *a4, llvm::Value *a5)
{
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  int v14;
  uint64_t v15;
  llvm::Value **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  BOOL v22;
  uint64_t *v23;
  llvm::Value *v24;
  llvm::Type *v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  llvm::Value **v34;
  llvm::Value *v35;
  uint64_t *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  llvm::Value *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::Value **v46;
  llvm::Value *v47;
  int v48;
  int v49;
  uint64_t *v50;
  std::string *v51;
  std::string::size_type v52;
  std::string *v53;
  std::string *v54;
  void *v55;
  llvm::Value *v56;
  char *v57;
  size_t v58;
  size_t v59;
  char v60;
  BOOL v61;
  const void *v62;
  uint64_t v63;
  uint64_t *v64;
  std::string *v65;
  std::string *v66;
  std::string v67;
  std::string v68;
  void *__p[2];
  std::string *v70;
  __int16 v71;
  _QWORD v72[4];
  __int16 v73;

  if (*(_BYTE *)(*(_QWORD *)a5 + 8) == 7)
  {
    if ((_DWORD)a2 == -1)
    {
      v8 = *(_BYTE *)(a3 + 23);
      v9 = v8;
      v10 = v8 & 0x7F;
      if (v9 < 0)
        v10 = *(_QWORD *)(a3 + 8);
      if (!v10)
        return 0;
    }
    v37 = *a1;
    v72[0] = "instructions returning void cannot have a name";
    v38 = 259;
LABEL_57:
    v73 = v38;
    return llvm::LLLexer::Error((uint64_t)(v37 + 21), a4, (llvm::Twine *)v72);
  }
  v13 = *(_BYTE *)(a3 + 23);
  v14 = v13;
  v15 = v13 & 0x7F;
  if (v14 < 0)
    v15 = *(_QWORD *)(a3 + 8);
  if (!v15)
  {
    v16 = (llvm::Value **)a1[9];
    v17 = (char *)v16 - (char *)a1[8];
    if ((_DWORD)a2 == -1)
      a2 = (unint64_t)v17 >> 3;
    v18 = v17 >> 3;
    if (v18 != a2)
    {
      v37 = *a1;
      v68.__r_.__value_.__r.__words[0] = v18;
      __p[0] = "instruction expected to be numbered '%";
      v70 = &v68;
      v71 = 2563;
      v72[0] = __p;
      v72[2] = "'";
      v38 = 770;
      goto LABEL_57;
    }
    v19 = a1[6];
    if (!v19)
      goto LABEL_26;
    v20 = (uint64_t *)(a1 + 6);
    do
    {
      v21 = *((_DWORD *)v19 + 8);
      v22 = v21 >= a2;
      if (v21 >= a2)
        v23 = v19;
      else
        v23 = v19 + 1;
      if (v22)
        v20 = v19;
      v19 = (uint64_t *)*v23;
    }
    while (*v23);
    if (v20 == (uint64_t *)(a1 + 6) || a2 < *((_DWORD *)v20 + 8))
      goto LABEL_26;
    v24 = (llvm::Value *)v20[5];
    v25 = *(llvm::Type **)v24;
    if (*(_QWORD *)v24 == *(_QWORD *)a5)
    {
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v20[5], a5, (llvm::Value *)1);
      llvm::Value::deleteValue(v24);
      sub_1C49C7D1C(a1 + 5, v20);
      operator delete(v20);
      v16 = (llvm::Value **)a1[9];
LABEL_26:
      v26 = (unint64_t)a1[10];
      if ((unint64_t)v16 >= v26)
      {
        v28 = a1[8];
        v29 = ((char *)v16 - (char *)v28) >> 3;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 61)
          abort();
        v31 = v26 - (_QWORD)v28;
        if (v31 >> 2 > v30)
          v30 = v31 >> 2;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
          v32 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v32 = v30;
        if (v32)
        {
          if (v32 >> 61)
            sub_1C4764EE4();
          v33 = (char *)operator new(8 * v32);
        }
        else
        {
          v33 = 0;
        }
        v34 = (llvm::Value **)&v33[8 * v29];
        *v34 = a5;
        v27 = (uint64_t *)(v34 + 1);
        if (v16 != (llvm::Value **)v28)
        {
          do
          {
            v35 = *--v16;
            *--v34 = v35;
          }
          while (v16 != (llvm::Value **)v28);
          v16 = (llvm::Value **)a1[8];
        }
        a1[8] = (uint64_t *)v34;
        a1[9] = v27;
        a1[10] = (uint64_t *)&v33[8 * v32];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v16 = a5;
        v27 = (uint64_t *)(v16 + 1);
      }
      v11 = 0;
      a1[9] = v27;
      return v11;
    }
LABEL_58:
    v50 = *a1;
    sub_1C4FB7C44((uint64_t)&v67, v25);
    v51 = std::string::insert(&v67, 0, "instruction forward referenced with type '");
    v52 = v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v68.__r_.__value_.__r.__words[2] = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    v53 = std::string::append(&v68, "'");
    v54 = (std::string *)v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v70 = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    v73 = 260;
    v72[0] = __p;
    v11 = llvm::LLLexer::Error((uint64_t)(v50 + 21), a4, (llvm::Twine *)v72);
    if (SHIBYTE(v70) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    {
      v55 = (void *)v67.__r_.__value_.__r.__words[0];
LABEL_78:
      operator delete(v55);
      return v11;
    }
    return v11;
  }
  v39 = sub_1C61CE594((uint64_t)(a1 + 2), (_QWORD *)a3);
  if (a1 + 3 != (uint64_t **)v39)
  {
    v40 = v39;
    v41 = *(llvm::Value **)(v39 + 56);
    v25 = *(llvm::Type **)v41;
    if (*(_QWORD *)v41 != *(_QWORD *)a5)
      goto LABEL_58;
    llvm::Value::doRAUW(*(llvm::ValueAsMetadata **)(v39 + 56), a5, (llvm::Value *)1);
    llvm::Value::deleteValue(v41);
    sub_1C4FCE3CC(a1 + 2, v40);
  }
  v73 = 260;
  v72[0] = a3;
  llvm::Value::setName((uint64_t ***)a5, (uint64_t)v72);
  if ((*((_BYTE *)a5 + 23) & 0x10) != 0)
  {
    v42 = ***(_QWORD ***)a5;
    v43 = *(_QWORD *)(v42 + 152);
    v44 = *(unsigned int *)(v42 + 168);
    if ((_DWORD)v44)
    {
      LODWORD(v45) = (v44 - 1) & ((a5 >> 4) ^ (a5 >> 9));
      v46 = (llvm::Value **)(v43 + 16 * v45);
      v47 = *v46;
      if (*v46 == a5)
      {
LABEL_65:
        v56 = v46[1];
        v59 = *(_QWORD *)v56;
        v57 = (char *)v56 + 16;
        v58 = v59;
        goto LABEL_66;
      }
      v48 = 1;
      while (v47 != (llvm::Value *)-4096)
      {
        v49 = v45 + v48++;
        v45 = v49 & (v44 - 1);
        v47 = *(llvm::Value **)(v43 + 16 * v45);
        if (v47 == a5)
        {
          v46 = (llvm::Value **)(v43 + 16 * v45);
          goto LABEL_65;
        }
      }
    }
    v46 = (llvm::Value **)(v43 + 16 * v44);
    goto LABEL_65;
  }
  v58 = 0;
  v57 = &byte_1C871356D;
LABEL_66:
  v60 = *(_BYTE *)(a3 + 23);
  v61 = v60 < 0;
  if (v60 >= 0)
    v62 = (const void *)a3;
  else
    v62 = *(const void **)a3;
  v63 = v60 & 0x7F;
  if (v61)
    v63 = *(_QWORD *)(a3 + 8);
  if (v58 == v63 && (!v58 || !memcmp(v57, v62, v58)))
    return 0;
  v64 = *a1;
  std::operator+<char>();
  v65 = std::string::append(&v68, "'");
  v66 = (std::string *)v65->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
  v70 = v66;
  v65->__r_.__value_.__l.__size_ = 0;
  v65->__r_.__value_.__r.__words[2] = 0;
  v65->__r_.__value_.__r.__words[0] = 0;
  v73 = 260;
  v72[0] = __p;
  v11 = llvm::LLLexer::Error((uint64_t)(v64 + 21), a4, (llvm::Twine *)v72);
  if (SHIBYTE(v70) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
  {
    v55 = (void *)v68.__r_.__value_.__r.__words[0];
    goto LABEL_78;
  }
  return v11;
}

uint64_t llvm::LLParser::PerFunctionState::defineBB(uint64_t *a1, uint64_t a2, int a3, char *a4)
{
  char v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t BB;
  uint64_t v12;
  std::string *v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  std::string v34;
  void *__p[2];
  std::string *v36;
  __int16 v37;
  _QWORD v38[2];
  const char *v39;
  __int16 v40;

  v7 = *(_BYTE *)(a2 + 23);
  v8 = v7;
  v9 = v7 & 0x7F;
  if (v8 < 0)
    v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    BB = llvm::LLParser::PerFunctionState::getBB((uint64_t)a1, (void *)a2, a4);
    if (BB)
      goto LABEL_14;
    v12 = *a1;
    std::operator+<char>();
    v13 = std::string::append(&v34, "'");
    v14 = (std::string *)v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v36 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v40 = 260;
    v38[0] = __p;
    llvm::LLLexer::Error(v12 + 168, a4, (llvm::Twine *)v38);
    if (SHIBYTE(v36) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    return 0;
  }
  if (a3 == -1)
  {
    v10 = a1[9] - a1[8];
    goto LABEL_12;
  }
  v10 = a1[9] - a1[8];
  v15 = v10 >> 3;
  if (v10 >> 3 != a3)
  {
    v24 = *a1;
    v34.__r_.__value_.__r.__words[0] = v15;
    __p[0] = "label expected to be numbered '";
    v36 = &v34;
    v37 = 2563;
    v38[0] = __p;
    v39 = "'";
    v40 = 770;
    llvm::LLLexer::Error(v24 + 168, a4, (llvm::Twine *)v38);
    return 0;
  }
LABEL_12:
  BB = (uint64_t)llvm::LLParser::PerFunctionState::getBB((uint64_t)a1, (unint64_t)v10 >> 3, a4);
  if (!BB)
  {
    v16 = *a1;
    v34.__r_.__value_.__r.__words[0] = (a1[9] - a1[8]) >> 3;
    __p[0] = "unable to create block numbered '";
    v36 = &v34;
    v37 = 2563;
    v38[0] = __p;
    v39 = "'";
    v40 = 770;
    llvm::LLLexer::Error(v16 + 168, a4, (llvm::Twine *)v38);
    return BB;
  }
LABEL_14:
  sub_1C4FCEAA0(a1[1] + 72, (uint64_t *)(a1[1] + 72), a1[1] + 72, (uint64_t *)(BB + 24));
  v17 = *(_BYTE *)(a2 + 23);
  v18 = v17;
  v19 = v17 & 0x7F;
  if (v18 < 0)
    v19 = *(_QWORD *)(a2 + 8);
  if (v19)
  {
    v23 = sub_1C61CE594((uint64_t)(a1 + 2), (_QWORD *)a2);
    if (a1 + 3 != (uint64_t *)v23)
      sub_1C4FCE3CC(a1 + 2, v23);
  }
  else
  {
    sub_1C61CE844((uint64_t)(a1 + 5), (unint64_t)(a1[9] - a1[8]) >> 3);
    v21 = (uint64_t *)a1[9];
    v20 = a1[10];
    if ((unint64_t)v21 >= v20)
    {
      v25 = (_QWORD *)a1[8];
      v26 = v21 - v25;
      v27 = v26 + 1;
      if ((unint64_t)(v26 + 1) >> 61)
        abort();
      v28 = v20 - (_QWORD)v25;
      if (v28 >> 2 > v27)
        v27 = v28 >> 2;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v29 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29)
      {
        if (v29 >> 61)
          sub_1C4764EE4();
        v30 = (char *)operator new(8 * v29);
      }
      else
      {
        v30 = 0;
      }
      v31 = (uint64_t *)&v30[8 * v26];
      *v31 = BB;
      v22 = v31 + 1;
      if (v21 != v25)
      {
        do
        {
          v32 = *--v21;
          *--v31 = v32;
        }
        while (v21 != v25);
        v21 = (uint64_t *)a1[8];
      }
      a1[8] = (uint64_t)v31;
      a1[9] = (uint64_t)v22;
      a1[10] = (uint64_t)&v30[8 * v29];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v21 = BB;
      v22 = v21 + 1;
    }
    a1[9] = (uint64_t)v22;
  }
  return BB;
}

uint64_t llvm::LLParser::parseGlobalValueVector(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  int v7;
  llvm::Constant *v8;
  unint64_t v9;
  llvm::Constant *v11;
  llvm::Type *v12;
  const char *v13;
  __int16 v14;

  v6 = a1[56];
  if ((v6 - 7) < 7 && ((0x55u >> (v6 - 7)) & 1) != 0)
    return 0;
  if (!a3)
    goto LABEL_8;
LABEL_4:
  if (!*(_BYTE *)(a3 + 4) && v6 == 89)
  {
    a1[56] = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
    v7 = *(unsigned __int8 *)(a3 + 4);
    *(_DWORD *)a3 = *(_DWORD *)(a2 + 8);
    if (!v7)
      *(_BYTE *)(a3 + 4) = 1;
  }
LABEL_8:
  while (1)
  {
    v11 = 0;
    v12 = 0;
    v13 = "expected type";
    v14 = 259;
    if (llvm::LLParser::parseType((llvm::LLParser *)a1, &v12, (const llvm::Twine *)&v13, 0)
      || (llvm::LLParser::parseGlobalValue((llvm::LLParser *)a1, v12, &v11) & 1) != 0)
    {
      return 1;
    }
    v8 = v11;
    v9 = *(unsigned int *)(a2 + 8);
    if (v9 >= *(unsigned int *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v9 + 1, 8);
      v9 = *(unsigned int *)(a2 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = v8;
    ++*(_DWORD *)(a2 + 8);
    if (a1[56] != 4)
      return 0;
    v6 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
    a1[56] = v6;
    if (a3)
      goto LABEL_4;
  }
}

uint64_t llvm::LLParser::convertValIDToValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  const char *v5;
  __int16 v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 8) != 14)
    __asm { BR              X12 }
  v3 = *(char **)(a3 + 8);
  v5 = "functions are not values, refer to them as pointers";
  v6 = 259;
  return llvm::LLLexer::Error(a1 + 168, v3, (llvm::Twine *)&v5);
}

uint64_t llvm::LLParser::parseMDNodeVector(_DWORD *a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;
  unint64_t v7;
  llvm::Metadata *v8;
  unint64_t v9;
  llvm::Metadata *v10;

  if ((llvm::LLParser::parseToken((uint64_t)a1, 8, "expected '{' here") & 1) != 0)
    return 1;
  v5 = a1[56];
  if (v5 == 9)
  {
    v6 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
    result = 0;
    a1[56] = v6;
  }
  else
  {
    while (1)
    {
      if (v5 == 53)
      {
        a1[56] = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
        v7 = *(unsigned int *)(a2 + 8);
        if (v7 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v7 + 1, 8);
          v7 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = 0;
      }
      else
      {
        v10 = 0;
        if ((llvm::LLParser::parseMetadata((llvm::LLParser *)a1, &v10, 0) & 1) != 0)
          return 1;
        v8 = v10;
        v9 = *(unsigned int *)(a2 + 8);
        if (v9 >= *(unsigned int *)(a2 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v9 + 1, 8);
          v9 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v9) = v8;
      }
      ++*(_DWORD *)(a2 + 8);
      if (a1[56] != 4)
        break;
      v5 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
      a1[56] = v5;
    }
    return llvm::LLParser::parseToken((uint64_t)a1, 9, "expected end of metadata node");
  }
  return result;
}

uint64_t llvm::LLParser::parseDIGlobalVariableExpression(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  uint64_t *v15;
  llvm::LLParser *v16;
  const char *v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  int v22;
  char *v23;
  llvm::MDNode *Impl;
  const char *v25;
  llvm::MDNode **v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  _QWORD v31[4];
  __int16 v32;
  _QWORD v33[4];
  __int16 v34;

  v29 = 0;
  v30 = 256;
  v27 = 0;
  v28 = 256;
  v6 = (llvm::LLParser *)((char *)this + 168);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v26 = a2;
  v8 = *((_DWORD *)this + 56);
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      if ((v10 & 0x80u) == 0)
        v11 = v10 & 0x7F;
      else
        v11 = *((_QWORD *)this + 30);
      if (v11 == 4)
      {
        v19 = (char *)this + 232;
        if ((v10 & 0x80) != 0)
        {
          v19 = *v9;
          v10 = *((_QWORD *)this + 30);
        }
        if (v10 >= 4)
          v20 = 4;
        else
          v20 = v10;
        if (memcmp(v19, "expr", v20) || v10 != 4)
        {
LABEL_36:
          v31[0] = "invalid field '";
          v31[2] = (char *)this + 232;
          v32 = 1027;
          v33[0] = v31;
          v33[2] = "'";
          v34 = 770;
          if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v33) & 1) != 0)
            return 1;
          goto LABEL_33;
        }
        v15 = &v27;
        v16 = this;
        v17 = "expr";
        v18 = 4;
      }
      else
      {
        if (v11 != 3)
          goto LABEL_36;
        v12 = (char *)this + 232;
        if ((v10 & 0x80) != 0)
        {
          v12 = *v9;
          v10 = *((_QWORD *)this + 30);
        }
        v13 = v10 >= 3 ? 3 : v10;
        if (memcmp(v12, "var", v13) || v10 != 3)
          goto LABEL_36;
        v15 = &v29;
        v16 = this;
        v17 = "var";
        v18 = 3;
      }
      if ((sub_1C4FCEE94((uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v15) & 1) != 0)
        return 1;
LABEL_33:
      if (*((_DWORD *)this + 56) != 4)
        goto LABEL_39;
      v22 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v22;
      if (v22 != 437)
        goto LABEL_43;
    }
  }
  if (v8 != 13)
  {
LABEL_43:
    v33[0] = "expected field label here";
    v34 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v33) & 1) != 0)
      return 1;
  }
LABEL_39:
  v23 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if ((_BYTE)v30)
  {
    if ((_BYTE)v28)
    {
      Impl = llvm::DIGlobalVariableExpression::getImpl(*(_QWORD **)this, v29, v27, a3, 1);
      result = 0;
      *v26 = Impl;
      return result;
    }
    v25 = "missing required field 'expr'";
  }
  else
  {
    v25 = "missing required field 'var'";
  }
  v33[0] = v25;
  v34 = 259;
  return llvm::LLLexer::Error((uint64_t)v6, v23, (llvm::Twine *)v33);
}

uint64_t llvm::LLParser::parseGenericDINode(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t v7;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v15;
  size_t v16;
  char v18;
  char *v19;
  size_t v20;
  const char *v22;
  int v23;
  char *v24;
  int v26;
  llvm::MDNode **v27;
  unsigned __int8 *v28;
  __int16 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[32];
  char v36;
  void *v37[2];
  _QWORD v38[2];
  __int16 v39;
  char *v40;
  uint64_t v41;
  _QWORD v42[2];
  __int16 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v30 = 0;
  v31 = 0;
  v32 = 0xFFFFLL;
  v28 = 0;
  v29 = 256;
  v33 = v35;
  v34 = 0x400000000;
  v36 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
  {
    v7 = 1;
    goto LABEL_67;
  }
  v26 = a3;
  v27 = a2;
  v8 = *((_DWORD *)this + 56);
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = (v10 & 0x80u) == 0 ? v10 & 0x7F : *((_QWORD *)this + 30);
      if (v11 == 8)
        break;
      if (v11 == 6)
      {
        v19 = (char *)this + 232;
        if ((v10 & 0x80) != 0)
        {
          v19 = *v9;
          v10 = *((_QWORD *)this + 30);
        }
        if (v10 >= 6)
          v20 = 6;
        else
          v20 = v10;
        if (memcmp(v19, "header", v20) || v10 != 6)
          goto LABEL_51;
        if ((sub_1C4FCF3D8((uint64_t)this, (uint64_t)"header", 6, (uint64_t)&v28) & 1) != 0)
          goto LABEL_66;
      }
      else
      {
        if (v11 != 3)
          goto LABEL_51;
        v12 = (char *)this + 232;
        if ((v10 & 0x80) != 0)
        {
          v12 = *v9;
          v10 = *((_QWORD *)this + 30);
        }
        v13 = v10 >= 3 ? 3 : v10;
        if (memcmp(v12, "tag", v13) || v10 != 3)
          goto LABEL_51;
        if ((sub_1C4FCF23C((uint64_t)this, (uint64_t)&v30) & 1) != 0)
          goto LABEL_66;
      }
LABEL_53:
      if (*((_DWORD *)this + 56) != 4)
        goto LABEL_62;
      v23 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v23;
      if (v23 != 437)
        goto LABEL_65;
    }
    v15 = (char *)this + 232;
    if ((v10 & 0x80) != 0)
    {
      v15 = *v9;
      v10 = *((_QWORD *)this + 30);
    }
    if (v10 >= 8)
      v16 = 8;
    else
      v16 = v10;
    if (!memcmp(v15, "operands", v16) && v10 == 8)
    {
      if (!v36)
      {
        *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v6);
        v40 = (char *)v42;
        v41 = 0x400000000;
        v18 = llvm::LLParser::parseMDNodeVector(this, (uint64_t)&v40);
        if ((v18 & 1) == 0)
        {
          v37[0] = v38;
          v37[1] = (void *)0x400000000;
          if ((_DWORD)v41)
            sub_1C614D378((uint64_t)v37, (uint64_t)&v40);
          v36 = 1;
          sub_1C614D378((uint64_t)&v33, (uint64_t)v37);
          if (v37[0] != v38)
            free(v37[0]);
        }
        if (v40 != (char *)v42)
          free(v40);
        if ((v18 & 1) != 0)
          goto LABEL_66;
        goto LABEL_53;
      }
      v39 = 1283;
      v37[0] = "field '";
      v38[0] = "operands";
      v38[1] = 8;
      v40 = (char *)v37;
      v22 = "' cannot be specified more than once";
    }
    else
    {
LABEL_51:
      v37[0] = "invalid field '";
      v38[0] = (char *)this + 232;
      v39 = 1027;
      v40 = (char *)v37;
      v22 = "'";
    }
    v42[0] = v22;
    v43 = 770;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)&v40) & 1) != 0)
      goto LABEL_66;
    goto LABEL_53;
  }
  if (v8 != 13)
  {
LABEL_65:
    v40 = "expected field label here";
    v43 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)&v40) & 1) != 0)
      goto LABEL_66;
  }
LABEL_62:
  v24 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
  {
LABEL_66:
    v7 = 1;
    goto LABEL_67;
  }
  if (v31)
  {
    v7 = 0;
    *v27 = llvm::GenericDINode::getImpl(*(uint64_t **)this, v30, v28, v33, v34, v26, 1);
  }
  else
  {
    v40 = "missing required field 'tag'";
    v43 = 259;
    v7 = llvm::LLLexer::Error((uint64_t)v6, v24, (llvm::Twine *)&v40);
  }
LABEL_67:
  if (v33 != v35)
    free(v33);
  return v7;
}

uint64_t llvm::LLParser::parseDISubrange(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  __int128 *v16;
  llvm::LLParser *v17;
  const char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  size_t v22;
  char *v24;
  size_t v25;
  char *v26;
  size_t v27;
  int v29;
  const llvm::APInt *v30;
  llvm::ValueHandleBase *Signed;
  llvm::Value *v32;
  _QWORD *v33;
  llvm::ValueHandleBase *v34;
  llvm::Value *v35;
  _QWORD *v36;
  llvm::ValueHandleBase *v37;
  llvm::Value *v38;
  _QWORD *v39;
  llvm::ValueHandleBase *v40;
  llvm::Value *v41;
  _QWORD *v42;
  llvm::MDNode *Impl;
  int v44;
  llvm::IntegerType *v45;
  char v46;
  __int128 v47;
  __int128 v48;
  char v49;
  int v50;
  llvm::IntegerType *v51;
  char v52;
  __int128 v53;
  __int128 v54;
  char v55;
  int v56;
  llvm::IntegerType *v57;
  char v58;
  __int128 v59;
  __int128 v60;
  char v61;
  int v62;
  llvm::IntegerType *v63;
  char v64;
  __int128 v65;
  _QWORD *v66;
  uint64_t v67;
  char v68;
  int v69;
  _QWORD v70[4];
  __int16 v71;
  _QWORD v72[4];
  __int16 v73;

  v63 = (llvm::IntegerType *)-1;
  v64 = 0;
  v65 = xmmword_1C85F76A0;
  v69 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v57 = 0;
  v58 = 0;
  v59 = xmmword_1C85F76B0;
  v60 = xmmword_1C64638F0;
  v61 = 0;
  v62 = 0;
  v51 = 0;
  v52 = 0;
  v53 = xmmword_1C85F76B0;
  v54 = xmmword_1C64638F0;
  v55 = 0;
  v56 = 0;
  v45 = 0;
  v46 = 0;
  v47 = xmmword_1C85F76B0;
  v48 = xmmword_1C64638F0;
  v49 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v50 = 0;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v44 = a3;
  v8 = *((_DWORD *)this + 56);
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = *((_QWORD *)this + 30);
      if ((v10 & 0x80u) == 0)
        v12 = v10 & 0x7F;
      else
        v12 = *((_QWORD *)this + 30);
      switch(v12)
      {
        case 0xAuLL:
          v20 = *((unsigned __int8 *)this + 255);
          v21 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v21 = *v9;
            v20 = *((_QWORD *)this + 30);
          }
          if (v20 >= 0xA)
            v22 = 10;
          else
            v22 = v20;
          if (!memcmp(v21, "lowerBound", v22) && v20 == 10)
          {
            v16 = (__int128 *)&v57;
            v17 = this;
            v18 = "lowerBound";
          }
          else
          {
            v24 = (char *)this + 232;
            if ((v10 & 0x80) != 0)
            {
              v24 = *v9;
              v10 = v11;
            }
            if (v10 >= 0xA)
              v25 = 10;
            else
              v25 = v10;
            if (memcmp(v24, "upperBound", v25) || v10 != 10)
            {
LABEL_56:
              v70[0] = "invalid field '";
              v70[2] = (char *)this + 232;
              v71 = 1027;
              v72[0] = v70;
              v72[2] = "'";
              v73 = 770;
              if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v72) & 1) != 0)
                return 1;
              goto LABEL_53;
            }
            v16 = (__int128 *)&v51;
            v17 = this;
            v18 = "upperBound";
          }
          v19 = 10;
          break;
        case 6uLL:
          v26 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v26 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 6)
            v27 = 6;
          else
            v27 = v10;
          if (memcmp(v26, "stride", v27) || v10 != 6)
            goto LABEL_56;
          v16 = (__int128 *)&v45;
          v17 = this;
          v18 = "stride";
          v19 = 6;
          break;
        case 5uLL:
          v13 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v13 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          v14 = v10 >= 5 ? 5 : v10;
          if (memcmp(v13, "count", v14) || v10 != 5)
            goto LABEL_56;
          v16 = (__int128 *)&v63;
          v17 = this;
          v18 = "count";
          v19 = 5;
          break;
        default:
          goto LABEL_56;
      }
      if ((sub_1C4FCF570((uint64_t)v17, (uint64_t)v18, v19, v16) & 1) != 0)
        return 1;
LABEL_53:
      if (*((_DWORD *)this + 56) != 4)
        goto LABEL_59;
      v29 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v29;
      if (v29 != 437)
        goto LABEL_63;
    }
  }
  if (v8 != 13)
  {
LABEL_63:
    v72[0] = "expected field label here";
    v73 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v72) & 1) != 0)
      return 1;
  }
LABEL_59:
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if (v69 == 2)
  {
    v33 = v66;
  }
  else if (v69 == 1)
  {
    Signed = llvm::ConstantInt::getSigned((llvm::ConstantInt **)(**(_QWORD **)this + 1984), (uint64_t)v63, v30);
    v33 = llvm::ValueAsMetadata::get(Signed, v32);
  }
  else
  {
    v33 = 0;
  }
  if (v62 == 2)
  {
    v36 = (_QWORD *)v60;
  }
  else if (v62 == 1)
  {
    v34 = llvm::ConstantInt::getSigned((llvm::ConstantInt **)(**(_QWORD **)this + 1984), (uint64_t)v57, v30);
    v36 = llvm::ValueAsMetadata::get(v34, v35);
  }
  else
  {
    v36 = 0;
  }
  if (v56 == 2)
  {
    v39 = (_QWORD *)v54;
  }
  else if (v56 == 1)
  {
    v37 = llvm::ConstantInt::getSigned((llvm::ConstantInt **)(**(_QWORD **)this + 1984), (uint64_t)v51, v30);
    v39 = llvm::ValueAsMetadata::get(v37, v38);
  }
  else
  {
    v39 = 0;
  }
  if (v50 == 2)
  {
    v42 = (_QWORD *)v48;
  }
  else if (v50 == 1)
  {
    v40 = llvm::ConstantInt::getSigned((llvm::ConstantInt **)(**(_QWORD **)this + 1984), (uint64_t)v45, v30);
    v42 = llvm::ValueAsMetadata::get(v40, v41);
  }
  else
  {
    v42 = 0;
  }
  Impl = llvm::DISubrange::getImpl(*(_QWORD **)this, (uint64_t)v33, (uint64_t)v36, (uint64_t)v39, (uint64_t)v42, v44, 1);
  result = 0;
  *a2 = Impl;
  return result;
}

uint64_t llvm::LLParser::parseDIEnumerator(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t v7;
  int v8;
  void *v9;
  void *v10;
  int v11;
  char **v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  size_t v18;
  char *v20;
  size_t v21;
  char *v23;
  size_t v24;
  int v26;
  int v27;
  const char *v28;
  __int16 v29;
  int v30;
  char *v31;
  int v32;
  char *v33;
  unint64_t v34;
  unint64_t v36;
  _QWORD *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  char *v41;
  llvm::MDNode **v42;
  int v43;
  int v44;
  char *v45;
  void *v46;
  unsigned int v47;
  void *v48;
  unsigned int v49;
  char *v50;
  unsigned int v51;
  __int16 v52;
  void *v53;
  __int16 v54;
  _QWORD v55[2];
  const char *v56;
  uint64_t v57;
  __int16 v58;
  const char *v59;
  unsigned int v60;
  char v61;
  const char *v62;
  __int16 v63;

  v53 = 0;
  v54 = 256;
  v52 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if (llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here"))
    return 1;
  v43 = a3;
  v42 = a2;
  v8 = *((_DWORD *)this + 56);
  if (v8 == 437)
  {
    v9 = 0;
    v44 = 0;
    v45 = 0;
    v10 = 0;
    v11 = 0;
    v12 = (char **)((char *)this + 232);
    LODWORD(v13) = 1;
    v14 = 1;
    while (1)
    {
      v15 = *((unsigned __int8 *)this + 255);
      if ((v15 & 0x80u) == 0)
        v16 = v15 & 0x7F;
      else
        v16 = *((_QWORD *)this + 30);
      switch(v16)
      {
        case 0xAuLL:
          v20 = (char *)this + 232;
          if ((v15 & 0x80) != 0)
          {
            v20 = *v12;
            v15 = *((_QWORD *)this + 30);
          }
          if (v15 >= 0xA)
            v21 = 10;
          else
            v21 = v15;
          if (memcmp(v20, "isUnsigned", v21) || v15 != 10)
            goto LABEL_54;
          if ((sub_1C4FCEF48((uint64_t)this, (uint64_t)"isUnsigned", 10, (char *)&v52) & 1) != 0)
            goto LABEL_75;
          break;
        case 5uLL:
          v23 = (char *)this + 232;
          if ((v15 & 0x80) != 0)
          {
            v23 = *v12;
            v15 = *((_QWORD *)this + 30);
          }
          if (v15 >= 5)
            v24 = 5;
          else
            v24 = v15;
          if (memcmp(v23, "value", v24) || v15 != 5)
          {
LABEL_54:
            v55[0] = "invalid field '";
            v56 = (char *)this + 232;
            v58 = 1027;
            v59 = (const char *)v55;
            v28 = "'";
            goto LABEL_55;
          }
          if (v11)
          {
            v58 = 1283;
            v55[0] = "field '";
            v56 = "value";
            v57 = 5;
            v59 = (const char *)v55;
            v28 = "' cannot be specified more than once";
LABEL_55:
            v62 = v28;
            v29 = 770;
          }
          else
          {
            v26 = llvm::LLLexer::LexToken(v6);
            *((_DWORD *)this + 56) = v26;
            if (v26 == 457)
            {
              v13 = *((unsigned int *)this + 78);
              if (v13 > 0x40)
              {
                v9 = (void *)operator new[]();
                memcpy(v9, *((const void **)this + 38), ((unint64_t)(v13 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v9 = (void *)*((_QWORD *)this + 38);
              }
              v44 = *((unsigned __int8 *)this + 316);
              if (v14 >= 0x41 && v10)
                MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
              v27 = llvm::LLLexer::LexToken(v6);
              *((_DWORD *)this + 56) = v27;
              v11 = 1;
              v45 = (char *)v9;
              v10 = v9;
              v14 = v13;
              goto LABEL_58;
            }
            v59 = "expected integer";
            v29 = 259;
          }
          v63 = v29;
          if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)&v59) & 1) != 0)
            goto LABEL_75;
          break;
        case 4uLL:
          v17 = (char *)this + 232;
          if ((v15 & 0x80) != 0)
          {
            v17 = *v12;
            v15 = *((_QWORD *)this + 30);
          }
          v18 = v15 >= 4 ? 4 : v15;
          if (memcmp(v17, "name", v18) || v15 != 4)
            goto LABEL_54;
          if ((sub_1C4FCF3D8((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v53) & 1) != 0)
            goto LABEL_75;
          break;
        default:
          goto LABEL_54;
      }
      v27 = *((_DWORD *)this + 56);
LABEL_58:
      if (v27 != 4)
        goto LABEL_64;
      v30 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v30;
      if (v30 != 437)
        goto LABEL_74;
    }
  }
  v9 = 0;
  v44 = 0;
  v45 = 0;
  v11 = 0;
  LODWORD(v13) = 1;
  v14 = 1;
  if (v8 != 13)
  {
LABEL_74:
    v59 = "expected field label here";
    v63 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)&v59) & 1) != 0)
      goto LABEL_75;
  }
LABEL_64:
  v31 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) == 0)
  {
    if ((_BYTE)v54)
    {
      if (v11)
      {
        v32 = v52;
        v33 = v45;
        if (!(_BYTE)v52 || v44)
          goto LABEL_72;
        v34 = (unint64_t)v9;
        if (v14 >= 0x41)
          v34 = *((_QWORD *)v9 + ((v14 - 1) >> 6));
        if ((v34 & (1 << (v14 - 1))) == 0)
        {
LABEL_72:
          v60 = v14;
          if (v14 > 0x40)
          {
            v33 = (char *)operator new[]();
            v59 = v33;
            memcpy(v33, v9, (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v59 = v45;
          }
          v61 = v44;
          if (!v32 && v44)
          {
            v36 = (unint64_t)v9;
            if (v13 >= 0x41)
              v36 = *((_QWORD *)v9 + ((v13 - 1) >> 6));
            if ((v36 & (1 << (v13 - 1))) != 0)
            {
              llvm::APInt::zext((llvm::APInt *)&v59, v14 + 1, (uint64_t)&v50);
              if (v60 >= 0x41 && v59)
                MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
              v33 = v50;
              v59 = v50;
              v14 = v51;
              v60 = v51;
              v51 = 0;
            }
          }
          v37 = *(_QWORD **)this;
          if (v43)
          {
            v49 = v14;
            if (v14 > 0x40)
            {
              v48 = (void *)operator new[]();
              memcpy(v48, v59, (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v48 = v33;
            }
            *v42 = llvm::DIEnumerator::getImpl(v37, (uint64_t)&v48, v32 != 0, v53, 1, 1);
            if (v49 < 0x41)
              goto LABEL_104;
            v38 = v48;
            if (!v48)
              goto LABEL_104;
          }
          else
          {
            v47 = v14;
            if (v14 > 0x40)
            {
              v46 = (void *)operator new[]();
              memcpy(v46, v59, (((unint64_t)v14 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v46 = v33;
            }
            *v42 = llvm::DIEnumerator::getImpl(v37, (uint64_t)&v46, v32 != 0, v53, 0, 1);
            if (v47 < 0x41)
              goto LABEL_104;
            v38 = v46;
            if (!v46)
              goto LABEL_104;
          }
          MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
LABEL_104:
          if (v60 >= 0x41 && v59)
            MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
          v7 = 0;
          goto LABEL_77;
        }
        v59 = "unsigned enumerator with negative value";
        v63 = 259;
        v41 = (char *)*((_QWORD *)this + 27);
        v40 = (uint64_t)v6;
        goto LABEL_111;
      }
      v39 = "missing required field 'value'";
    }
    else
    {
      v39 = "missing required field 'name'";
    }
    v59 = v39;
    v63 = 259;
    v40 = (uint64_t)v6;
    v41 = v31;
LABEL_111:
    v7 = llvm::LLLexer::Error(v40, v41, (llvm::Twine *)&v59);
    goto LABEL_76;
  }
LABEL_75:
  v7 = 1;
LABEL_76:
  LODWORD(v13) = v14;
LABEL_77:
  if (v13 >= 0x41 && v9)
    MEMORY[0x1CAA32F9C](v9, 0x1000C8000313F17);
  return v7;
}

uint64_t llvm::LLParser::parseDIDerivedType(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  unint64_t v16;
  char *v17;
  size_t v18;
  unint64_t v20;
  char *v21;
  size_t v22;
  char v23;
  unint64_t v24;
  char *v25;
  size_t v26;
  unint64_t v28;
  char *v29;
  size_t v30;
  uint64_t *v31;
  llvm::LLParser *v32;
  const char *v33;
  uint64_t v34;
  char *v35;
  size_t v36;
  char *v38;
  size_t v39;
  uint64_t *v41;
  llvm::LLParser *v42;
  const char *v43;
  uint64_t v44;
  char *v45;
  size_t v46;
  char *v48;
  size_t v49;
  char *v51;
  size_t v52;
  unint64_t v54;
  char *v55;
  size_t v56;
  char *v58;
  size_t v59;
  char *v60;
  llvm::LLParser *v61;
  const char *v62;
  uint64_t v63;
  char *v64;
  size_t v65;
  char *v67;
  size_t v68;
  char *v70;
  size_t v71;
  unint64_t v73;
  char *v74;
  size_t v75;
  char *v76;
  size_t v77;
  char *v78;
  size_t v79;
  int v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t Impl;
  const char *v85;
  llvm::MDNode **v86;
  int v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  __int16 v101;
  int v102;
  char v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  uint64_t v124;
  char v125;
  uint64_t v126;
  _QWORD v127[4];
  __int16 v128;
  _QWORD v129[4];
  __int16 v130;

  v124 = 0;
  v125 = 0;
  v126 = 0xFFFFLL;
  v122 = 0;
  v123 = 256;
  v121 = 256;
  v117 = 0;
  v118 = 0;
  v119 = 0xFFFFFFFFLL;
  v120 = 0;
  v115 = 0;
  v116 = 256;
  v114 = 256;
  v111 = 0;
  v112 = -1;
  v113 = 0;
  v108 = 0;
  v109 = 0xFFFFFFFFLL;
  v110 = 0;
  v104 = 0;
  v105 = 0;
  v106 = -1;
  v107 = 0;
  v102 = 0;
  v103 = 0;
  v99 = 0xFFFFFFFFLL;
  v100 = 0;
  v101 = 256;
  v97 = 0xFFFFFFFFLL;
  v98 = 0;
  v96 = 256;
  v92 = 0;
  v93 = 0;
  v94 = 7;
  v95 = 0;
  v91 = 0;
  v88 = 0;
  v89 = 0;
  v90 = 0xFFFFLL;
  v87 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v86 = a2;
  v8 = *((_DWORD *)this + 56);
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (2)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = *((_QWORD *)this + 30);
      if ((v10 & 0x80u) == 0)
        v12 = v10 & 0x7F;
      else
        v12 = *((_QWORD *)this + 30);
      switch(v12)
      {
        case 3uLL:
          v13 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v13 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 3)
            v14 = 3;
          else
            v14 = v10;
          if (memcmp(v13, "tag", v14) || v10 != 3)
            goto LABEL_197;
          if ((sub_1C4FCF23C((uint64_t)this, (uint64_t)&v124) & 1) != 0)
            return 1;
          goto LABEL_198;
        case 4uLL:
          v16 = *((unsigned __int8 *)this + 255);
          v17 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v17 = *v9;
            v16 = *((_QWORD *)this + 30);
          }
          if (v16 >= 4)
            v18 = 4;
          else
            v18 = v16;
          if (!memcmp(v17, "name", v18) && v16 == 4)
          {
            v23 = sub_1C4FCF3D8((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v122);
            goto LABEL_169;
          }
          v20 = v10;
          v21 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v21 = *v9;
            v20 = v11;
          }
          if (v20 >= 4)
            v22 = 4;
          else
            v22 = v20;
          if (!memcmp(v21, "file", v22) && v20 == 4)
          {
            v23 = sub_1C4FCEE94((uint64_t)this, (uint64_t)"file", 4, (uint64_t)&v120);
            goto LABEL_169;
          }
          v73 = v10;
          v74 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v74 = *v9;
            v73 = v11;
          }
          if (v73 >= 4)
            v75 = 4;
          else
            v75 = v73;
          if (!memcmp(v74, "line", v75) && v73 == 4)
          {
            if ((sub_1C4FCED30((uint64_t)this, (uint64_t)"line", 4, (uint64_t)&v117) & 1) != 0)
              return 1;
            goto LABEL_198;
          }
          v78 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v78 = *v9;
            v10 = v11;
          }
          if (v10 >= 4)
            v79 = 4;
          else
            v79 = v10;
          if (!memcmp(v78, "size", v79) && v10 == 4)
          {
            v31 = &v110;
            v32 = this;
            v33 = "size";
            v34 = 4;
            goto LABEL_138;
          }
          goto LABEL_197;
        case 5uLL:
          v24 = *((unsigned __int8 *)this + 255);
          v25 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v25 = *v9;
            v24 = *((_QWORD *)this + 30);
          }
          if (v24 >= 5)
            v26 = 5;
          else
            v26 = v24;
          if (!memcmp(v25, "scope", v26) && v24 == 5)
          {
            v41 = &v115;
            v42 = this;
            v43 = "scope";
            v44 = 5;
LABEL_166:
            if ((sub_1C4FCEE94((uint64_t)v42, (uint64_t)v43, v44, (uint64_t)v41) & 1) != 0)
              return 1;
          }
          else
          {
            v28 = v10;
            v29 = (char *)this + 232;
            if ((v10 & 0x80) != 0)
            {
              v29 = *v9;
              v28 = v11;
            }
            if (v28 >= 5)
              v30 = 5;
            else
              v30 = v28;
            if (!memcmp(v29, "align", v30) && v28 == 5)
            {
              v31 = &v107;
              v32 = this;
              v33 = "align";
              v34 = 5;
LABEL_138:
              if ((sub_1C4FCED30((uint64_t)v32, (uint64_t)v33, v34, (uint64_t)v31) & 1) != 0)
                return 1;
            }
            else
            {
              v76 = (char *)this + 232;
              if ((v10 & 0x80) != 0)
              {
                v76 = *v9;
                v10 = v11;
              }
              if (v10 >= 5)
                v77 = 5;
              else
                v77 = v10;
              if (memcmp(v76, "flags", v77) || v10 != 5)
                goto LABEL_197;
              if ((sub_1C4FCFD6C((uint64_t)this, (uint64_t)&v102) & 1) != 0)
                return 1;
            }
          }
          goto LABEL_198;
        case 6uLL:
          v35 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v35 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 6)
            v36 = 6;
          else
            v36 = v10;
          if (memcmp(v35, "offset", v36) || v10 != 6)
            goto LABEL_197;
          v31 = &v104;
          v32 = this;
          v33 = "offset";
          v34 = 6;
          goto LABEL_138;
        case 8uLL:
          v38 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v38 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 8)
            v39 = 8;
          else
            v39 = v10;
          if (memcmp(v38, "baseType", v39) || v10 != 8)
            goto LABEL_197;
          v41 = &v113;
          v42 = this;
          v43 = "baseType";
          v44 = 8;
          goto LABEL_166;
        case 9uLL:
          v45 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v45 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 9)
            v46 = 9;
          else
            v46 = v10;
          if (memcmp(v45, "extraData", v46) || v10 != 9)
            goto LABEL_197;
          v41 = &v100;
          v42 = this;
          v43 = "extraData";
          v44 = 9;
          goto LABEL_166;
        case 0xAuLL:
          v48 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v48 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 0xA)
            v49 = 10;
          else
            v49 = v10;
          if (memcmp(v48, "ptrAuthKey", v49) || v10 != 10)
            goto LABEL_197;
          v31 = &v92;
          v32 = this;
          v33 = "ptrAuthKey";
          v34 = 10;
          goto LABEL_138;
        case 0xBuLL:
          v51 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v51 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 0xB)
            v52 = 11;
          else
            v52 = v10;
          if (memcmp(v51, "annotations", v52) || v10 != 11)
            goto LABEL_197;
          v41 = &v95;
          v42 = this;
          v43 = "annotations";
          v44 = 11;
          goto LABEL_166;
        case 0x11uLL:
          v54 = *((unsigned __int8 *)this + 255);
          v55 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v55 = *v9;
            v54 = *((_QWORD *)this + 30);
          }
          if (v54 >= 0x11)
            v56 = 17;
          else
            v56 = v54;
          if (!memcmp(v55, "dwarfAddressSpace", v56) && v54 == 17)
          {
            v23 = sub_1C4FCED30((uint64_t)this, (uint64_t)"dwarfAddressSpace", 17, (uint64_t)&v97);
LABEL_169:
            if ((v23 & 1) != 0)
              return 1;
          }
          else
          {
            v58 = (char *)this + 232;
            if ((v10 & 0x80) != 0)
            {
              v58 = *v9;
              v10 = v11;
            }
            if (v10 >= 0x11)
              v59 = 17;
            else
              v59 = v10;
            if (!memcmp(v58, "ptrAuthIsaPointer", v59) && v10 == 17)
            {
              v60 = (char *)&v87 + 2;
              v61 = this;
              v62 = "ptrAuthIsaPointer";
              v63 = 17;
LABEL_162:
              if ((sub_1C4FCEF48((uint64_t)v61, (uint64_t)v62, v63, v60) & 1) != 0)
                return 1;
            }
            else
            {
LABEL_197:
              v127[0] = "invalid field '";
              v127[2] = (char *)this + 232;
              v128 = 1027;
              v129[0] = v127;
              v129[2] = "'";
              v130 = 770;
              if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v129) & 1) != 0)
                return 1;
            }
          }
LABEL_198:
          if (*((_DWORD *)this + 56) != 4)
            goto LABEL_202;
          v80 = llvm::LLLexer::LexToken(v6);
          *((_DWORD *)this + 56) = v80;
          if (v80 != 437)
            goto LABEL_211;
          continue;
        case 0x19uLL:
          v64 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v64 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 0x19)
            v65 = 25;
          else
            v65 = v10;
          if (memcmp(v64, "ptrAuthExtraDiscriminator", v65) || v10 != 25)
            goto LABEL_197;
          v31 = &v88;
          v32 = this;
          v33 = "ptrAuthExtraDiscriminator";
          v34 = 25;
          goto LABEL_138;
        case 0x1DuLL:
          v67 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v67 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 0x1D)
            v68 = 29;
          else
            v68 = v10;
          if (memcmp(v67, "ptrAuthIsAddressDiscriminated", v68) || v10 != 29)
            goto LABEL_197;
          v60 = (char *)&v91;
          v61 = this;
          v62 = "ptrAuthIsAddressDiscriminated";
          v63 = 29;
          goto LABEL_162;
        case 0x1EuLL:
          v70 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v70 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 0x1E)
            v71 = 30;
          else
            v71 = v10;
          if (memcmp(v70, "ptrAuthAuthenticatesNullValues", v71) || v10 != 30)
            goto LABEL_197;
          v60 = (char *)&v87;
          v61 = this;
          v62 = "ptrAuthAuthenticatesNullValues";
          v63 = 30;
          goto LABEL_162;
        default:
          goto LABEL_197;
      }
    }
  }
  if (v8 != 13)
  {
LABEL_211:
    v129[0] = "expected field label here";
    v130 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v129) & 1) != 0)
      return 1;
  }
LABEL_202:
  v81 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if (!v125)
  {
    v85 = "missing required field 'tag'";
LABEL_215:
    v129[0] = v85;
    v130 = 259;
    return llvm::LLLexer::Error((uint64_t)v6, v81, (llvm::Twine *)v129);
  }
  if (!(_BYTE)v114)
  {
    v85 = "missing required field 'baseType'";
    goto LABEL_215;
  }
  v82 = v92;
  if (v92)
    v82 = v92 & 0xF | (16 * v91) | (32 * (_DWORD)v88) & 0xE0 | (BYTE2(v87) << 21) | (32 * (_DWORD)v88) & 0x1FFF00 | (v87 << 22) | 0x100000000;
  if (v97 == 0xFFFFFFFFLL)
    v83 = 0;
  else
    v83 = v97 | 0x100000000;
  Impl = llvm::DIDerivedType::getImpl(*(uint64_t **)this, v124, v122, v120, v117, v115, v113, v110, v107, v104, v83, v82, v102, v100, v95, a3, 1);
  result = 0;
  *v86 = (llvm::MDNode *)Impl;
  return result;
}

uint64_t llvm::LLParser::parseDICompositeType(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  unint64_t v16;
  char *v17;
  size_t v18;
  unint64_t v20;
  char *v21;
  size_t v22;
  uint64_t *v23;
  llvm::LLParser *v24;
  const char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  size_t v29;
  unint64_t v31;
  char *v32;
  size_t v33;
  char v34;
  char *v35;
  size_t v36;
  uint64_t *v38;
  llvm::LLParser *v39;
  const char *v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  size_t v44;
  char *v46;
  size_t v47;
  char *v48;
  size_t v49;
  unint64_t v51;
  char *v52;
  size_t v53;
  char *v55;
  size_t v56;
  unint64_t v57;
  char *v58;
  size_t v59;
  char *v61;
  size_t v62;
  unint64_t v63;
  char *v64;
  size_t v65;
  char *v67;
  size_t v68;
  char *v69;
  size_t v70;
  char *v72;
  size_t v73;
  char v75;
  int v76;
  unint64_t v77;
  char *v78;
  size_t v79;
  char *v80;
  size_t v81;
  unint64_t v82;
  char *v83;
  size_t v84;
  char *v85;
  size_t v86;
  char *v87;
  const llvm::APInt *v88;
  llvm::ValueHandleBase *Signed;
  llvm::Value *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  unsigned int v112;
  uint64_t Impl;
  llvm::MDNode *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  llvm::MDNode **v122;
  uint64_t v123;
  __int16 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  char v128;
  int v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  unint64_t v136;
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  __int16 v148;
  unsigned int v149;
  char v150;
  uint64_t v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  __int16 v161;
  uint64_t v162;
  __int16 v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  uint64_t v167;
  __int16 v168;
  uint64_t v169;
  __int16 v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  _QWORD v174[4];
  __int16 v175;
  _QWORD v176[4];
  __int16 v177;

  v171 = 0;
  v172 = 0;
  v173 = 0xFFFFLL;
  v169 = 0;
  v170 = 256;
  v168 = 256;
  v164 = 0;
  v165 = 0;
  v166 = 0xFFFFFFFFLL;
  v167 = 0;
  v162 = 0;
  v163 = 256;
  v161 = 256;
  v156 = 0xFFFFFFFFLL;
  v157 = 0;
  v158 = 0;
  v159 = -1;
  v160 = 0;
  v153 = -1;
  v154 = 0;
  v155 = 0;
  v151 = 0;
  v152 = 0;
  v149 = 0;
  v150 = 0;
  v146 = 0xFFFFLL;
  v147 = 0;
  v148 = 256;
  v144 = 0;
  v145 = 0;
  v142 = 0;
  v143 = 256;
  v140 = 0;
  v141 = 256;
  v138 = 0;
  v139 = 256;
  v136 = 0;
  v137 = 256;
  v134 = 0;
  v135 = 256;
  v132 = 0;
  v133 = 256;
  v130 = 0;
  v131 = 256;
  *(_QWORD *)&v125 = 0;
  BYTE8(v125) = 0;
  v126 = xmmword_1C85F76B0;
  v127 = xmmword_1C64638F0;
  v128 = 0;
  v129 = 0;
  v123 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v124 = 256;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v8 = *((_DWORD *)this + 56);
  v122 = a2;
  v121 = a3;
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = *((_QWORD *)this + 30);
      if ((v10 & 0x80u) == 0)
        v12 = v10 & 0x7F;
      else
        v12 = *((_QWORD *)this + 30);
      switch(v12)
      {
        case 3uLL:
          v13 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v13 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 3)
            v14 = 3;
          else
            v14 = v10;
          if (memcmp(v13, "tag", v14) || v10 != 3)
            goto LABEL_221;
          if ((sub_1C4FCF23C((uint64_t)this, (uint64_t)&v171) & 1) != 0)
            return 1;
          goto LABEL_183;
        case 4uLL:
          v16 = *((unsigned __int8 *)this + 255);
          v17 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v17 = *v9;
            v16 = *((_QWORD *)this + 30);
          }
          if (v16 >= 4)
            v18 = 4;
          else
            v18 = v16;
          if (!memcmp(v17, "name", v18) && v16 == 4)
          {
            v34 = sub_1C4FCF3D8((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v169);
LABEL_170:
            if ((v34 & 1) != 0)
              return 1;
          }
          else
          {
            v20 = v10;
            v21 = (char *)this + 232;
            if ((v10 & 0x80) != 0)
            {
              v21 = *v9;
              v20 = v11;
            }
            if (v20 >= 4)
              v22 = 4;
            else
              v22 = v20;
            if (!memcmp(v21, "file", v22) && v20 == 4)
            {
              v23 = &v167;
              v24 = this;
              v25 = "file";
              v26 = 4;
LABEL_182:
              if ((sub_1C4FCEE94((uint64_t)v24, (uint64_t)v25, v26, (uint64_t)v23) & 1) != 0)
                return 1;
            }
            else
            {
              v77 = v10;
              v78 = (char *)this + 232;
              if ((v10 & 0x80) != 0)
              {
                v78 = *v9;
                v77 = v11;
              }
              if (v77 >= 4)
                v79 = 4;
              else
                v79 = v77;
              if (!memcmp(v78, "line", v79) && v77 == 4)
              {
                if ((sub_1C4FCED30((uint64_t)this, (uint64_t)"line", 4, (uint64_t)&v164) & 1) != 0)
                  return 1;
              }
              else
              {
                v82 = v10;
                v83 = (char *)this + 232;
                if ((v10 & 0x80) != 0)
                {
                  v83 = *v9;
                  v82 = v11;
                }
                if (v82 >= 4)
                  v84 = 4;
                else
                  v84 = v82;
                if (!memcmp(v83, "size", v84) && v82 == 4)
                {
                  v38 = &v157;
                  v39 = this;
                  v40 = "size";
                  v41 = 4;
LABEL_66:
                  if ((sub_1C4FCED30((uint64_t)v39, (uint64_t)v40, v41, (uint64_t)v38) & 1) != 0)
                    return 1;
                }
                else
                {
                  v85 = (char *)this + 232;
                  if ((v10 & 0x80) != 0)
                  {
                    v85 = *v9;
                    v10 = v11;
                  }
                  if (v10 >= 4)
                    v86 = 4;
                  else
                    v86 = v10;
                  if (memcmp(v85, "rank", v86) || v10 != 4)
                    goto LABEL_221;
                  if ((sub_1C4FCF570((uint64_t)this, (uint64_t)"rank", 4, &v125) & 1) != 0)
                    return 1;
                }
              }
            }
          }
          goto LABEL_183;
        case 5uLL:
          v27 = *((unsigned __int8 *)this + 255);
          v28 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v28 = *v9;
            v27 = *((_QWORD *)this + 30);
          }
          if (v27 >= 5)
            v29 = 5;
          else
            v29 = v27;
          if (!memcmp(v28, "scope", v29) && v27 == 5)
          {
            v75 = sub_1C4FCEE94((uint64_t)this, (uint64_t)"scope", 5, (uint64_t)&v162);
            goto LABEL_178;
          }
          v31 = v10;
          v32 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v32 = *v9;
            v31 = v11;
          }
          if (v31 >= 5)
            v33 = 5;
          else
            v33 = v31;
          if (!memcmp(v32, "align", v33) && v31 == 5)
          {
            v34 = sub_1C4FCED30((uint64_t)this, (uint64_t)"align", 5, (uint64_t)&v154);
            goto LABEL_170;
          }
          v80 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v80 = *v9;
            v10 = v11;
          }
          if (v10 >= 5)
            v81 = 5;
          else
            v81 = v10;
          if (memcmp(v80, "flags", v81) || v10 != 5)
            goto LABEL_221;
          if ((sub_1C4FCFD6C((uint64_t)this, (uint64_t)&v149) & 1) != 0)
            return 1;
          goto LABEL_183;
        case 6uLL:
          v35 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v35 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 6)
            v36 = 6;
          else
            v36 = v10;
          if (memcmp(v35, "offset", v36) || v10 != 6)
            goto LABEL_221;
          v38 = &v151;
          v39 = this;
          v40 = "offset";
          v41 = 6;
          goto LABEL_66;
        case 8uLL:
          v42 = *((unsigned __int8 *)this + 255);
          v43 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v43 = *v9;
            v42 = *((_QWORD *)this + 30);
          }
          if (v42 >= 8)
            v44 = 8;
          else
            v44 = v42;
          if (!memcmp(v43, "baseType", v44) && v42 == 8)
          {
            v23 = &v160;
            v24 = this;
            v25 = "baseType";
            goto LABEL_174;
          }
          v46 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v46 = *v9;
            v10 = v11;
          }
          if (v10 >= 8)
            v47 = 8;
          else
            v47 = v10;
          if (!memcmp(v46, "elements", v47) && v10 == 8)
          {
            v23 = &v147;
            v24 = this;
            v25 = "elements";
LABEL_174:
            v26 = 8;
            goto LABEL_182;
          }
LABEL_221:
          v174[0] = "invalid field '";
          v174[2] = (char *)this + 232;
          v175 = 1027;
          v176[0] = v174;
          v176[2] = "'";
          v177 = 770;
          if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v176) & 1) != 0)
            return 1;
LABEL_183:
          if (*((_DWORD *)this + 56) != 4)
            goto LABEL_224;
          v76 = llvm::LLLexer::LexToken(v6);
          *((_DWORD *)this + 56) = v76;
          if (v76 != 437)
            goto LABEL_229;
          break;
        case 9uLL:
          v48 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v48 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 9)
            v49 = 9;
          else
            v49 = v10;
          if (memcmp(v48, "allocated", v49) || v10 != 9)
            goto LABEL_221;
          v23 = &v130;
          v24 = this;
          v25 = "allocated";
          v26 = 9;
          goto LABEL_182;
        case 0xAuLL:
          v51 = *((unsigned __int8 *)this + 255);
          v52 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v52 = *v9;
            v51 = *((_QWORD *)this + 30);
          }
          if (v51 >= 0xA)
            v53 = 10;
          else
            v53 = v51;
          if (!memcmp(v52, "identifier", v53) && v51 == 10)
          {
            if ((sub_1C4FCF3D8((uint64_t)this, (uint64_t)"identifier", 10, (uint64_t)&v138) & 1) != 0)
              return 1;
            goto LABEL_183;
          }
          v55 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v55 = *v9;
            v10 = v11;
          }
          if (v10 >= 0xA)
            v56 = 10;
          else
            v56 = v10;
          if (!memcmp(v55, "associated", v56) && v10 == 10)
          {
            v23 = &v132;
            v24 = this;
            v25 = "associated";
            v26 = 10;
            goto LABEL_182;
          }
          goto LABEL_221;
        case 0xBuLL:
          v57 = *((unsigned __int8 *)this + 255);
          v58 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v58 = *v9;
            v57 = *((_QWORD *)this + 30);
          }
          if (v57 >= 0xB)
            v59 = 11;
          else
            v59 = v57;
          if (!memcmp(v58, "runtimeLang", v59) && v57 == 11)
          {
            v75 = sub_1C4FCFF2C((uint64_t)this, (uint64_t)"runtimeLang", 11, (uint64_t)&v144);
LABEL_178:
            if ((v75 & 1) != 0)
              return 1;
            goto LABEL_183;
          }
          v61 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v61 = *v9;
            v10 = v11;
          }
          if (v10 >= 0xB)
            v62 = 11;
          else
            v62 = v10;
          if (!memcmp(v61, "annotations", v62) && v10 == 11)
          {
            v23 = &v123;
            v24 = this;
            v25 = "annotations";
            v26 = 11;
            goto LABEL_182;
          }
          goto LABEL_221;
        case 0xCuLL:
          v63 = *((unsigned __int8 *)this + 255);
          v64 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v64 = *v9;
            v63 = *((_QWORD *)this + 30);
          }
          if (v63 >= 0xC)
            v65 = 12;
          else
            v65 = v63;
          if (!memcmp(v64, "vtableHolder", v65) && v63 == 12)
          {
            v23 = &v142;
            v24 = this;
            v25 = "vtableHolder";
            goto LABEL_181;
          }
          v67 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v67 = *v9;
            v10 = v11;
          }
          if (v10 >= 0xC)
            v68 = 12;
          else
            v68 = v10;
          if (!memcmp(v67, "dataLocation", v68) && v10 == 12)
          {
            v23 = &v134;
            v24 = this;
            v25 = "dataLocation";
LABEL_181:
            v26 = 12;
            goto LABEL_182;
          }
          goto LABEL_221;
        case 0xDuLL:
          v69 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v69 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 0xD)
            v70 = 13;
          else
            v70 = v10;
          if (memcmp(v69, "discriminator", v70) || v10 != 13)
            goto LABEL_221;
          v23 = (uint64_t *)&v136;
          v24 = this;
          v25 = "discriminator";
          v26 = 13;
          goto LABEL_182;
        case 0xEuLL:
          v72 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v72 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 0xE)
            v73 = 14;
          else
            v73 = v10;
          if (memcmp(v72, "templateParams", v73) || v10 != 14)
            goto LABEL_221;
          v23 = &v140;
          v24 = this;
          v25 = "templateParams";
          v26 = 14;
          goto LABEL_182;
        default:
          goto LABEL_221;
      }
    }
  }
  if (v8 != 13)
  {
LABEL_229:
    v176[0] = "expected field label here";
    v177 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v176) & 1) != 0)
      return 1;
  }
LABEL_224:
  v87 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if (v172)
  {
    if (v129 == 2)
    {
      v91 = (_QWORD *)v127;
    }
    else if (v129 == 1)
    {
      Signed = llvm::ConstantInt::getSigned((llvm::ConstantInt **)(**(_QWORD **)this + 1984), v125, v88);
      v91 = llvm::ValueAsMetadata::get(Signed, v90);
    }
    else
    {
      v91 = 0;
    }
    v92 = v138;
    v93 = v169;
    v94 = v167;
    v95 = v162;
    v96 = v160;
    v97 = v149;
    v98 = v147;
    v99 = v142;
    v100 = v140;
    v101 = v136;
    v102 = v134;
    v103 = v132;
    v104 = v130;
    v105 = v123;
    if (!v138)
      goto LABEL_235;
    v119 = v140;
    v120 = v147;
    v106 = v162;
    v115 = v123;
    v116 = v130;
    v107 = v142;
    v117 = v132;
    v118 = v138;
    v108 = v160;
    v109 = v136;
    v110 = v91;
    v111 = v134;
    v112 = v149;
    Impl = llvm::DICompositeType::buildODRType(*(uint64_t **)this, v138, v171, v169, v167, v164, v162, v160, v157, v154, v151, v149, v147, v144, v142, v140, v136, v134, v132,
             v130,
             (uint64_t)v91,
             v123);
    v99 = v107;
    v97 = v112;
    v102 = v111;
    v91 = v110;
    v101 = v109;
    v105 = v115;
    v104 = v116;
    v96 = v108;
    v103 = v117;
    v92 = v118;
    v95 = v106;
    v100 = v119;
    v98 = v120;
    if (!Impl)
LABEL_235:
      Impl = llvm::DICompositeType::getImpl(*(uint64_t **)this, v171, v93, v94, v164, v95, v96, v157, v154, v151, v97, v98, v144, v99, v100, v92, v101, v102, v103,
               v104,
               (uint64_t)v91,
               v105,
               v121,
               1);
    v114 = (llvm::MDNode *)Impl;
    result = 0;
    *v122 = v114;
  }
  else
  {
    v176[0] = "missing required field 'tag'";
    v177 = 259;
    return llvm::LLLexer::Error((uint64_t)v6, v87, (llvm::Twine *)v176);
  }
  return result;
}

uint64_t llvm::LLParser::parseDISubroutineType(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  size_t v15;
  char *v17;
  size_t v18;
  char *v19;
  size_t v20;
  int v22;
  char v23;
  BOOL v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int CallingConvention;
  int v29;
  __int16 v30;
  const char *v31;
  __int16 v32;
  int v33;
  char *v34;
  char *Impl;
  int v36;
  llvm::MDNode **v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  int v43;
  char v44;
  _QWORD v45[4];
  __int16 v46;
  _QWORD v47[2];
  const char *v48;
  uint64_t v49;
  __int16 v50;
  _QWORD v51[4];
  __int16 v52;

  v43 = 0;
  v44 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 255;
  v38 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v39 = 256;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v8 = *((_DWORD *)this + 56);
  v37 = a2;
  v36 = a3;
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = *((_QWORD *)this + 30);
      v12 = (v10 & 0x80u) == 0 ? v10 & 0x7F : *((_QWORD *)this + 30);
      if (v12 != 2)
        break;
      v19 = (char *)this + 232;
      if ((v10 & 0x80) != 0)
      {
        v19 = *v9;
        v10 = *((_QWORD *)this + 30);
      }
      if (v10 >= 2)
        v20 = 2;
      else
        v20 = v10;
      if (memcmp(v19, "cc", v20) || v10 != 2)
        goto LABEL_53;
      if (v41)
      {
        v50 = 1283;
        v47[0] = "field '";
        v48 = "cc";
        v49 = 2;
        v51[0] = v47;
        v31 = "' cannot be specified more than once";
LABEL_56:
        v51[2] = v31;
        v32 = 770;
LABEL_57:
        v52 = v32;
        if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v51) & 1) != 0)
          return 1;
        goto LABEL_58;
      }
      v22 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v22;
      if (v22 != 447)
      {
        if (v22 != 457)
        {
          v51[0] = "expected DWARF calling convention";
          v32 = 259;
          goto LABEL_57;
        }
        if ((sub_1C4FCF034((uint64_t)this, (uint64_t)"cc", 2, (uint64_t)&v40) & 1) != 0)
          return 1;
LABEL_58:
        v29 = *((_DWORD *)this + 56);
        goto LABEL_59;
      }
      v23 = *((_BYTE *)this + 255);
      v24 = v23 < 0;
      if (v23 >= 0)
        v25 = (char *)this + 232;
      else
        v25 = (char *)*((_QWORD *)this + 29);
      v26 = v23 & 0x7F;
      if (v24)
        v27 = *((_QWORD *)this + 30);
      else
        v27 = v26;
      CallingConvention = llvm::dwarf::getCallingConvention((uint64_t)v25, v27);
      if (!CallingConvention)
      {
        v45[0] = "invalid DWARF calling convention";
        v45[2] = " '";
        v46 = 771;
        v47[0] = v45;
        v48 = (char *)this + 232;
        v30 = 1026;
        goto LABEL_54;
      }
      v41 = 1;
      v40 = CallingConvention;
      v29 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v29;
LABEL_59:
      if (v29 != 4)
        goto LABEL_65;
      v33 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v33;
      if (v33 != 437)
        goto LABEL_68;
    }
    if (v12 == 5)
    {
      v13 = *((unsigned __int8 *)this + 255);
      v14 = (char *)this + 232;
      if ((v10 & 0x80) != 0)
      {
        v14 = *v9;
        v13 = *((_QWORD *)this + 30);
      }
      if (v13 >= 5)
        v15 = 5;
      else
        v15 = v13;
      if (!memcmp(v14, "flags", v15) && v13 == 5)
      {
        if ((sub_1C4FCFD6C((uint64_t)this, (uint64_t)&v43) & 1) != 0)
          return 1;
        goto LABEL_58;
      }
      v17 = (char *)this + 232;
      if ((v10 & 0x80) != 0)
      {
        v17 = *v9;
        v10 = v11;
      }
      v18 = v10 >= 5 ? 5 : v10;
      if (!memcmp(v17, "types", v18) && v10 == 5)
      {
        if ((sub_1C4FCEE94((uint64_t)this, (uint64_t)"types", 5, (uint64_t)&v38) & 1) != 0)
          return 1;
        goto LABEL_58;
      }
    }
LABEL_53:
    v47[0] = "invalid field '";
    v48 = (char *)this + 232;
    v30 = 1027;
LABEL_54:
    v50 = v30;
    v51[0] = v47;
    v31 = "'";
    goto LABEL_56;
  }
  if (v8 != 13)
  {
LABEL_68:
    v51[0] = "expected field label here";
    v52 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v51) & 1) != 0)
      return 1;
  }
LABEL_65:
  v34 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if ((_BYTE)v39)
  {
    Impl = llvm::DISubroutineType::getImpl(*(_QWORD **)this, v43, v40, v38, v36, 1);
    result = 0;
    *v37 = (llvm::MDNode *)Impl;
  }
  else
  {
    v51[0] = "missing required field 'types'";
    v52 = 259;
    return llvm::LLLexer::Error((uint64_t)v6, v34, (llvm::Twine *)v51);
  }
  return result;
}

uint64_t llvm::LLParser::parseDICompileUnit(llvm::LLParser *this, llvm::MDNode **a2, char a3)
{
  uint64_t v5;
  llvm::LLLexer *v6;
  int v7;
  char **v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  uint64_t *v15;
  llvm::LLParser *v16;
  const char *v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  uint64_t *v22;
  llvm::LLParser *v23;
  const char *v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  size_t v28;
  unint64_t v30;
  char *v31;
  size_t v32;
  uint64_t *v33;
  llvm::LLParser *v34;
  const char *v35;
  uint64_t v36;
  char *v37;
  size_t v38;
  unint64_t v40;
  char *v41;
  size_t v42;
  unint64_t v44;
  char *v45;
  size_t v46;
  char v47;
  unint64_t v48;
  char *v49;
  size_t v50;
  char *v52;
  size_t v53;
  char *v54;
  size_t v55;
  char *v57;
  llvm::LLParser *v58;
  const char *v59;
  uint64_t v60;
  char *v61;
  size_t v62;
  int v64;
  uint64_t *v65;
  llvm::LLParser *v66;
  const char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  size_t v71;
  char *v73;
  size_t v74;
  int v75;
  char *v76;
  size_t v77;
  uint64_t *v79;
  llvm::LLParser *v80;
  const char *v81;
  uint64_t v82;
  char *v83;
  size_t v84;
  char *v86;
  unint64_t v87;
  size_t v88;
  char *v90;
  size_t v91;
  char *v92;
  size_t v93;
  char v95;
  BOOL v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t EmissionKind;
  char *v101;
  size_t v102;
  char *v103;
  size_t v104;
  __int16 v105;
  const char *v106;
  __int16 v107;
  int v108;
  int v109;
  char v110;
  BOOL v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t NameTableKind;
  uint64_t v116;
  const char *v117;
  const char *v118;
  llvm::LLLexer *v119;
  char *v120;
  char *v121;
  const char *v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  __int16 v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  __int16 v134;
  __int16 v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  uint64_t v147;
  __int16 v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  __int16 v158;
  __int16 v159;
  uint64_t v160;
  __int16 v161;
  uint64_t v162;
  __int16 v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  _QWORD v167[4];
  __int16 v168;
  _QWORD v169[2];
  const char *v170;
  uint64_t v171;
  __int16 v172;
  _QWORD v173[4];
  __int16 v174;

  if ((a3 & 1) == 0)
  {
    v119 = (llvm::LLParser *)((char *)this + 168);
    v173[0] = "missing 'distinct', required for !DICompileUnit";
    v174 = 259;
    v120 = (char *)*((_QWORD *)this + 27);
    return llvm::LLLexer::Error((uint64_t)v119, v120, (llvm::Twine *)v173);
  }
  v164 = 0;
  v165 = 0;
  v166 = 0xFFFFLL;
  v162 = 0;
  v163 = 0;
  v160 = 0;
  v161 = 256;
  v159 = 0;
  v158 = 256;
  v154 = 0;
  v155 = 0;
  v156 = 0xFFFFFFFFLL;
  v157 = 0;
  v153 = 256;
  v149 = 0;
  v150 = 0;
  v151 = 3;
  v152 = 0;
  v147 = 0;
  v148 = 256;
  v145 = 0;
  v146 = 256;
  v143 = 0;
  v144 = 256;
  v141 = 0;
  v142 = 256;
  v140 = 256;
  v136 = 0;
  v137 = 0;
  v138 = -1;
  v139 = 0;
  v5 = 1;
  v135 = 1;
  v134 = 0;
  v131 = 0;
  v132 = 0;
  v133 = 2;
  v130 = 0;
  v128 = 0;
  v129 = 256;
  v126 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v127 = 256;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) == 0)
  {
    v7 = *((_DWORD *)this + 56);
    if (v7 == 437)
    {
      v8 = (char **)((char *)this + 232);
      while (1)
      {
        v9 = *((unsigned __int8 *)this + 255);
        v10 = *((_QWORD *)this + 30);
        if ((v9 & 0x80u) == 0)
          v11 = v9 & 0x7F;
        else
          v11 = *((_QWORD *)this + 30);
        switch(v11)
        {
          case 3uLL:
            v12 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v12 = *v8;
              v9 = *((_QWORD *)this + 30);
            }
            if (v9 >= 3)
              v13 = 3;
            else
              v13 = v9;
            if (memcmp(v12, "sdk", v13) || v9 != 3)
              goto LABEL_232;
            v15 = &v126;
            v16 = this;
            v17 = "sdk";
            v18 = 3;
            goto LABEL_230;
          case 4uLL:
            v19 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v19 = *v8;
              v9 = *((_QWORD *)this + 30);
            }
            if (v9 >= 4)
              v20 = 4;
            else
              v20 = v9;
            if (memcmp(v19, "file", v20) || v9 != 4)
              goto LABEL_232;
            v22 = &v162;
            v23 = this;
            v24 = "file";
            v25 = 4;
            goto LABEL_202;
          case 5uLL:
            v26 = *((unsigned __int8 *)this + 255);
            v27 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v27 = *v8;
              v26 = *((_QWORD *)this + 30);
            }
            if (v26 >= 5)
              v28 = 5;
            else
              v28 = v26;
            if (!memcmp(v27, "flags", v28) && v26 == 5)
            {
              v47 = sub_1C4FCF3D8((uint64_t)this, (uint64_t)"flags", 5, (uint64_t)&v157);
LABEL_197:
              if ((v47 & 1) != 0)
                return 1;
              goto LABEL_236;
            }
            v30 = v9;
            v31 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v31 = *v8;
              v30 = v10;
            }
            if (v30 >= 5)
              v32 = 5;
            else
              v32 = v30;
            if (!memcmp(v31, "enums", v32) && v30 == 5)
            {
              v33 = &v147;
              v34 = this;
              v35 = "enums";
              v36 = 5;
LABEL_76:
              v47 = sub_1C4FCEE94((uint64_t)v34, (uint64_t)v35, v36, (uint64_t)v33);
              goto LABEL_197;
            }
            v101 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v101 = *v8;
              v9 = v10;
            }
            if (v9 >= 5)
              v102 = 5;
            else
              v102 = v9;
            if (memcmp(v101, "dwoId", v102) || v9 != 5)
              goto LABEL_232;
            v79 = &v136;
            v80 = this;
            v81 = "dwoId";
            v82 = 5;
LABEL_152:
            if ((sub_1C4FCED30((uint64_t)v80, (uint64_t)v81, v82, (uint64_t)v79) & 1) != 0)
              return 1;
LABEL_236:
            v108 = *((_DWORD *)this + 56);
LABEL_237:
            if (v108 != 4)
              goto LABEL_261;
            v109 = llvm::LLLexer::LexToken(v6);
            *((_DWORD *)this + 56) = v109;
            if (v109 != 437)
              goto LABEL_265;
            break;
          case 6uLL:
            v37 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v37 = *v8;
              v9 = *((_QWORD *)this + 30);
            }
            if (v9 >= 6)
              v38 = 6;
            else
              v38 = v9;
            if (memcmp(v37, "macros", v38) || v9 != 6)
              goto LABEL_232;
            v22 = &v139;
            v23 = this;
            v24 = "macros";
            v25 = 6;
            goto LABEL_202;
          case 7uLL:
            v40 = *((unsigned __int8 *)this + 255);
            v41 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v41 = *v8;
              v40 = *((_QWORD *)this + 30);
            }
            if (v40 >= 7)
              v42 = 7;
            else
              v42 = v40;
            if (!memcmp(v41, "globals", v42) && v40 == 7)
            {
              v47 = sub_1C4FCEE94((uint64_t)this, (uint64_t)"globals", 7, (uint64_t)&v143);
              goto LABEL_197;
            }
            v44 = v9;
            v45 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v45 = *v8;
              v44 = v10;
            }
            if (v44 >= 7)
              v46 = 7;
            else
              v46 = v44;
            if (!memcmp(v45, "imports", v46) && v44 == 7)
            {
              v33 = &v141;
              v34 = this;
              v35 = "imports";
              v36 = 7;
              goto LABEL_76;
            }
            v103 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v103 = *v8;
              v9 = v10;
            }
            if (v9 >= 7)
              v104 = 7;
            else
              v104 = v9;
            if (memcmp(v103, "sysroot", v104) || v9 != 7)
              goto LABEL_232;
            v15 = &v128;
            v16 = this;
            v17 = "sysroot";
            v18 = 7;
            goto LABEL_230;
          case 8uLL:
            v48 = *((unsigned __int8 *)this + 255);
            v49 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v49 = *v8;
              v48 = *((_QWORD *)this + 30);
            }
            if (v48 >= 8)
              v50 = 8;
            else
              v50 = v48;
            if (!memcmp(v49, "language", v50) && v48 == 8)
            {
              if ((sub_1C4FCFF2C((uint64_t)this, (uint64_t)"language", 8, (uint64_t)&v164) & 1) != 0)
                return 1;
            }
            else
            {
              v52 = (char *)this + 232;
              if ((v9 & 0x80) != 0)
              {
                v52 = *v8;
                v9 = v10;
              }
              if (v9 >= 8)
                v53 = 8;
              else
                v53 = v9;
              if (memcmp(v52, "producer", v53) || v9 != 8)
                goto LABEL_232;
              v15 = &v160;
              v16 = this;
              v17 = "producer";
              v18 = 8;
LABEL_230:
              if ((sub_1C4FCF3D8((uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v15) & 1) != 0)
                return 1;
            }
            goto LABEL_236;
          case 0xBuLL:
            v54 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v54 = *v8;
              v9 = *((_QWORD *)this + 30);
            }
            if (v9 >= 0xB)
              v55 = 11;
            else
              v55 = v9;
            if (memcmp(v54, "isOptimized", v55) || v9 != 11)
              goto LABEL_232;
            v57 = (char *)&v159;
            v58 = this;
            v59 = "isOptimized";
            v60 = 11;
            goto LABEL_193;
          case 0xCuLL:
            v61 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v61 = *v8;
              v9 = *((_QWORD *)this + 30);
            }
            if (v9 >= 0xC)
              v62 = 12;
            else
              v62 = v9;
            if (memcmp(v61, "emissionKind", v62) || v9 != 12)
              goto LABEL_232;
            if (v150)
            {
              v172 = 1283;
              v169[0] = "field '";
              v170 = "emissionKind";
              v116 = 12;
              goto LABEL_251;
            }
            v64 = llvm::LLLexer::LexToken(v6);
            *((_DWORD *)this + 56) = v64;
            if (v64 != 448)
            {
              if (v64 == 457)
              {
                v65 = &v149;
                v66 = this;
                v67 = "emissionKind";
                v68 = 12;
                goto LABEL_139;
              }
              v117 = "expected emission kind";
              goto LABEL_255;
            }
            v95 = *((_BYTE *)this + 255);
            v96 = v95 < 0;
            if (v95 >= 0)
              v97 = (int *)((char *)this + 232);
            else
              v97 = (int *)*((_QWORD *)this + 29);
            v98 = v95 & 0x7F;
            if (v96)
              v99 = *((_QWORD *)this + 30);
            else
              v99 = v98;
            EmissionKind = llvm::DICompileUnit::getEmissionKind(v97, v99);
            if ((EmissionKind & 0xFF00000000) != 0)
            {
              v150 = 1;
              v149 = EmissionKind;
              goto LABEL_248;
            }
            v118 = "invalid emission kind";
            goto LABEL_257;
          case 0xDuLL:
            v69 = *((unsigned __int8 *)this + 255);
            v70 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v70 = *v8;
              v69 = *((_QWORD *)this + 30);
            }
            if (v69 >= 0xD)
              v71 = 13;
            else
              v71 = v69;
            if (!memcmp(v70, "retainedTypes", v71) && v69 == 13)
            {
              v22 = &v145;
              v23 = this;
              v24 = "retainedTypes";
              v25 = 13;
LABEL_202:
              if ((sub_1C4FCEE94((uint64_t)v23, (uint64_t)v24, v25, (uint64_t)v22) & 1) != 0)
                return 1;
              goto LABEL_236;
            }
            v73 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v73 = *v8;
              v9 = v10;
            }
            if (v9 >= 0xD)
              v74 = 13;
            else
              v74 = v9;
            if (memcmp(v73, "nameTableKind", v74) || v9 != 13)
              goto LABEL_232;
            if (v132)
            {
              v172 = 1283;
              v169[0] = "field '";
              v170 = "nameTableKind";
              v116 = 13;
LABEL_251:
              v171 = v116;
              v173[0] = v169;
              v106 = "' cannot be specified more than once";
              goto LABEL_234;
            }
            v75 = llvm::LLLexer::LexToken(v6);
            *((_DWORD *)this + 56) = v75;
            if (v75 != 449)
            {
              if (v75 == 457)
              {
                v65 = &v131;
                v66 = this;
                v67 = "nameTableKind";
                v68 = 13;
LABEL_139:
                if ((sub_1C4FCF034((uint64_t)v66, (uint64_t)v67, v68, (uint64_t)v65) & 1) != 0)
                  return 1;
                goto LABEL_236;
              }
              v117 = "expected nameTable kind";
LABEL_255:
              v173[0] = v117;
              v107 = 259;
              goto LABEL_235;
            }
            v110 = *((_BYTE *)this + 255);
            v111 = v110 < 0;
            if (v110 >= 0)
              v112 = (char *)this + 232;
            else
              v112 = (char *)*((_QWORD *)this + 29);
            v113 = v110 & 0x7F;
            if (v111)
              v114 = *((_QWORD *)this + 30);
            else
              v114 = v113;
            NameTableKind = llvm::DICompileUnit::getNameTableKind((uint64_t)v112, v114);
            if ((NameTableKind & 0xFF00000000) != 0)
            {
              v132 = 1;
              v131 = NameTableKind;
LABEL_248:
              v108 = llvm::LLLexer::LexToken(v6);
              *((_DWORD *)this + 56) = v108;
              goto LABEL_237;
            }
            v118 = "invalid nameTable kind";
LABEL_257:
            v167[0] = v118;
            v167[2] = " '";
            v168 = 771;
            v169[0] = v167;
            v170 = (char *)this + 232;
            v105 = 1026;
            goto LABEL_233;
          case 0xEuLL:
            v76 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v76 = *v8;
              v9 = *((_QWORD *)this + 30);
            }
            if (v9 >= 0xE)
              v77 = 14;
            else
              v77 = v9;
            if (memcmp(v76, "runtimeVersion", v77) || v9 != 14)
              goto LABEL_232;
            v79 = &v154;
            v80 = this;
            v81 = "runtimeVersion";
            v82 = 14;
            goto LABEL_152;
          case 0x11uLL:
            v83 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v83 = *v8;
              v9 = *((_QWORD *)this + 30);
            }
            if (v9 >= 0x11)
              v84 = 17;
            else
              v84 = v9;
            if (memcmp(v83, "rangesBaseAddress", v84) || v9 != 17)
              goto LABEL_232;
            v57 = (char *)&v130;
            v58 = this;
            v59 = "rangesBaseAddress";
            v60 = 17;
            goto LABEL_193;
          case 0x12uLL:
            v86 = (char *)this + 232;
            v87 = *((unsigned __int8 *)this + 255);
            if ((v9 & 0x80) != 0)
            {
              v86 = *v8;
              v87 = *((_QWORD *)this + 30);
            }
            if (v87 >= 0x12)
              v88 = 18;
            else
              v88 = v87;
            if (!memcmp(v86, "splitDebugFilename", v88) && v87 == 18)
            {
              v6 = (llvm::LLParser *)((char *)this + 168);
              if ((sub_1C4FCF3D8((uint64_t)this, (uint64_t)"splitDebugFilename", 18, (uint64_t)&v152) & 1) != 0)
                return 1;
            }
            else
            {
              v90 = (char *)this + 232;
              if ((v9 & 0x80) != 0)
              {
                v90 = *v8;
                v9 = v10;
              }
              if (v9 >= 0x12)
                v91 = 18;
              else
                v91 = v9;
              v6 = (llvm::LLParser *)((char *)this + 168);
              if (!memcmp(v90, "splitDebugInlining", v91) && v9 == 18)
              {
                v57 = (char *)&v135;
                v58 = this;
                v59 = "splitDebugInlining";
                v60 = 18;
LABEL_193:
                if ((sub_1C4FCEF48((uint64_t)v58, (uint64_t)v59, v60, v57) & 1) != 0)
                  return 1;
              }
              else
              {
LABEL_232:
                v169[0] = "invalid field '";
                v170 = (char *)this + 232;
                v105 = 1027;
LABEL_233:
                v172 = v105;
                v173[0] = v169;
                v106 = "'";
LABEL_234:
                v173[2] = v106;
                v107 = 770;
LABEL_235:
                v174 = v107;
                if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v173) & 1) != 0)
                  return 1;
              }
            }
            goto LABEL_236;
          case 0x15uLL:
            v92 = (char *)this + 232;
            if ((v9 & 0x80) != 0)
            {
              v92 = *v8;
              v9 = *((_QWORD *)this + 30);
            }
            if (v9 >= 0x15)
              v93 = 21;
            else
              v93 = v9;
            if (memcmp(v92, "debugInfoForProfiling", v93) || v9 != 21)
              goto LABEL_232;
            v57 = (char *)&v134;
            v58 = this;
            v59 = "debugInfoForProfiling";
            v60 = 21;
            goto LABEL_193;
          default:
            goto LABEL_232;
        }
      }
    }
    if (v7 != 13)
    {
LABEL_265:
      v173[0] = "expected field label here";
      v174 = 259;
      if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v173) & 1) != 0)
        return 1;
    }
LABEL_261:
    v121 = (char *)*((_QWORD *)this + 27);
    if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) == 0)
    {
      if (v165)
      {
        if ((_BYTE)v163)
        {
          *(_QWORD *)&v125 = v143;
          *((_QWORD *)&v125 + 1) = v141;
          *(_QWORD *)&v124 = v147;
          *((_QWORD *)&v124 + 1) = v145;
          v5 = 0;
          *a2 = (llvm::MDNode *)llvm::DICompileUnit::getImpl(*(_QWORD *)this, v164, v162, v160, v159, v157, v154, v152, v149, v124, v125, v139, v136, v135, v134, v131, v130, v128, v126,
                                  1);
          return v5;
        }
        v123 = "missing required field 'file'";
      }
      else
      {
        v123 = "missing required field 'language'";
      }
      v173[0] = v123;
      v174 = 259;
      v119 = v6;
      v120 = v121;
      return llvm::LLLexer::Error((uint64_t)v119, v120, (llvm::Twine *)v173);
    }
    return 1;
  }
  return v5;
}

uint64_t llvm::LLParser::parseDISubprogram(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  char *v6;
  llvm::LLLexer *v7;
  uint64_t v8;
  int v9;
  int v10;
  char **v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v19;
  char *v20;
  size_t v21;
  uint64_t *v22;
  llvm::LLParser *v23;
  const char *v24;
  unint64_t v25;
  char *v26;
  size_t v27;
  char *v29;
  size_t v30;
  unint64_t v31;
  char *v32;
  size_t v33;
  char *v35;
  size_t v36;
  int v37;
  unsigned int v38;
  int v39;
  char v40;
  BOOL v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int Flag;
  __int16 v46;
  char *v47;
  size_t v48;
  uint64_t *v50;
  llvm::LLParser *v51;
  const char *v52;
  uint64_t v53;
  char *v54;
  size_t v55;
  int v57;
  unint64_t v58;
  char *v59;
  size_t v60;
  unint64_t v62;
  char *v63;
  size_t v64;
  char *v65;
  llvm::LLParser *v66;
  const char *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  size_t v71;
  char *v73;
  size_t v74;
  char *v75;
  size_t v76;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  size_t v81;
  unint64_t v83;
  char *v84;
  size_t v85;
  uint64_t *v86;
  llvm::LLParser *v87;
  const char *v88;
  uint64_t v89;
  char v90;
  BOOL v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int Virtuality;
  int v96;
  unint64_t v97;
  char *v98;
  size_t v99;
  unint64_t v100;
  char *v101;
  size_t v102;
  unint64_t v103;
  char *v104;
  size_t v105;
  unint64_t v106;
  char *v107;
  size_t v108;
  unint64_t v109;
  char *v110;
  size_t v111;
  char *v112;
  size_t v113;
  char *v114;
  size_t v115;
  char *v116;
  size_t v117;
  int v118;
  __int16 v119;
  const char *v120;
  __int16 v121;
  uint64_t v122;
  char *v124;
  int v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  __int16 v129;
  uint64_t v130;
  __int16 v131;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  __int16 v140;
  unsigned int v141;
  char v142;
  uint64_t v143;
  char v144;
  __int128 v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  uint64_t v151;
  uint64_t v152;
  __int16 v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  __int16 v157;
  __int16 v158;
  void *v159;
  __int16 v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  void *v164;
  __int16 v165;
  void *v166;
  __int16 v167;
  uint64_t v168;
  __int16 v169;
  void *v170;
  __int16 v171;
  _QWORD v172[4];
  __int16 v173;
  _QWORD v174[2];
  const char *v175;
  uint64_t v176;
  __int16 v177;
  unsigned int v178[4];
  const char *v179;
  __int16 v180;

  v6 = (char *)*((_QWORD *)this + 27);
  v170 = 0;
  v7 = (llvm::LLParser *)((char *)this + 168);
  v171 = 256;
  v168 = 0;
  v169 = 256;
  v166 = 0;
  v167 = 256;
  v165 = 256;
  v161 = 0;
  v162 = 0;
  v163 = 0xFFFFFFFFLL;
  v164 = 0;
  v159 = 0;
  v160 = 256;
  v158 = 0;
  v8 = 1;
  v157 = 1;
  v154 = 0;
  v155 = 0;
  v156 = 0xFFFFFFFFLL;
  v153 = 256;
  v148 = 0xFFFFFFFFLL;
  v149 = 0;
  v150 = 0;
  v151 = 2;
  v152 = 0;
  v146 = 0;
  v147 = 0;
  v143 = 0;
  v144 = 0;
  v145 = xmmword_1C85F76C0;
  v141 = 0;
  v142 = 0;
  v140 = 0;
  v138 = 0;
  v139 = 256;
  v136 = 0;
  v137 = 256;
  v134 = 0;
  v135 = 256;
  v132 = 0;
  v133 = 256;
  v130 = 0;
  v131 = 256;
  v128 = 0;
  v129 = 256;
  v126 = 0;
  v127 = 256;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) == 0)
  {
    v9 = *((_DWORD *)this + 56);
    v124 = v6;
    if (v9 == 437)
    {
      v10 = 0;
      v125 = 0;
      v11 = (char **)((char *)this + 232);
      while (1)
      {
        v12 = *((unsigned __int8 *)this + 255);
        v13 = *((_QWORD *)this + 30);
        if ((v12 & 0x80u) == 0)
          v14 = v12 & 0x7F;
        else
          v14 = *((_QWORD *)this + 30);
        switch(v14)
        {
          case 4uLL:
            v15 = *((unsigned __int8 *)this + 255);
            v16 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v16 = *v11;
              v15 = *((_QWORD *)this + 30);
            }
            if (v15 >= 4)
              v17 = 4;
            else
              v17 = v15;
            if (!memcmp(v16, "name", v17) && v15 == 4)
            {
              if ((sub_1C4FCF3D8((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v168) & 1) == 0)
                goto LABEL_261;
              return 1;
            }
            v19 = v12;
            v20 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v20 = *v11;
              v19 = v13;
            }
            if (v19 >= 4)
              v21 = 4;
            else
              v21 = v19;
            if (!memcmp(v20, "file", v21) && v19 == 4)
            {
              v22 = (uint64_t *)&v164;
              v23 = this;
              v24 = "file";
LABEL_250:
              v78 = 4;
              goto LABEL_260;
            }
            v97 = v12;
            v98 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v98 = *v11;
              v97 = v13;
            }
            if (v97 >= 4)
              v99 = 4;
            else
              v99 = v97;
            if (!memcmp(v98, "line", v99) && v97 == 4)
            {
              v50 = &v161;
              v51 = this;
              v52 = "line";
              v53 = 4;
              goto LABEL_92;
            }
            v106 = v12;
            v107 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v107 = *v11;
              v106 = v13;
            }
            if (v106 >= 4)
              v108 = 4;
            else
              v108 = v106;
            if (!memcmp(v107, "type", v108) && v106 == 4)
            {
              v22 = (uint64_t *)&v159;
              v23 = this;
              v24 = "type";
              goto LABEL_250;
            }
            v114 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v114 = *v11;
              v12 = v13;
            }
            if (v12 >= 4)
              v115 = 4;
            else
              v115 = v12;
            if (!memcmp(v114, "unit", v115) && v12 == 4)
            {
              v22 = &v138;
              v23 = this;
              v24 = "unit";
              goto LABEL_250;
            }
            goto LABEL_265;
          case 5uLL:
            v25 = *((unsigned __int8 *)this + 255);
            v26 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v26 = *v11;
              v25 = *((_QWORD *)this + 30);
            }
            if (v25 >= 5)
              v27 = 5;
            else
              v27 = v25;
            if (!memcmp(v26, "scope", v27) && v25 == 5)
            {
              v22 = (uint64_t *)&v170;
              v23 = this;
              v24 = "scope";
              v78 = 5;
LABEL_260:
              if ((sub_1C4FCEE94((uint64_t)v23, (uint64_t)v24, v78, (uint64_t)v22) & 1) != 0)
                return 1;
              goto LABEL_261;
            }
            v29 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v29 = *v11;
              v12 = v13;
            }
            if (v12 >= 5)
              v30 = 5;
            else
              v30 = v12;
            if (!memcmp(v29, "flags", v30) && v12 == 5)
            {
              if ((sub_1C4FCFD6C((uint64_t)this, (uint64_t)&v141) & 1) == 0)
                goto LABEL_261;
              return 1;
            }
            goto LABEL_265;
          case 7uLL:
            v31 = *((unsigned __int8 *)this + 255);
            v32 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v32 = *v11;
              v31 = *((_QWORD *)this + 30);
            }
            if (v31 >= 7)
              v33 = 7;
            else
              v33 = v31;
            if (!memcmp(v32, "isLocal", v33) && v31 == 7)
            {
              v65 = (char *)&v158;
              v66 = this;
              v67 = "isLocal";
              v68 = 7;
LABEL_182:
              if ((sub_1C4FCEF48((uint64_t)v66, (uint64_t)v67, v68, v65) & 1) != 0)
                return 1;
            }
            else
            {
              v35 = (char *)this + 232;
              if ((v12 & 0x80) != 0)
              {
                v35 = *v11;
                v12 = v13;
              }
              if (v12 >= 7)
                v36 = 7;
              else
                v36 = v12;
              if (!memcmp(v35, "spFlags", v36) && v12 == 7)
              {
                if (v125)
                {
                  v177 = 1283;
                  v174[0] = "field '";
                  v175 = "spFlags";
                  v176 = 7;
                  *(_QWORD *)v178 = v174;
                  v179 = "' cannot be specified more than once";
                  v180 = 770;
                  v125 = 1;
                  if ((llvm::LLLexer::Error((uint64_t)v7, *((char **)this + 27), (llvm::Twine *)v178) & 1) != 0)
                    return 1;
                  goto LABEL_261;
                }
                v10 = 0;
                while (2)
                {
                  v37 = llvm::LLLexer::LexToken(v7);
                  *((_DWORD *)this + 56) = v37;
                  if (v37 == 452)
                  {
                    v40 = *((_BYTE *)this + 255);
                    v41 = v40 < 0;
                    if (v40 >= 0)
                      v42 = (char *)this + 232;
                    else
                      v42 = (char *)*((_QWORD *)this + 29);
                    v43 = v40 & 0x7F;
                    if (v41)
                      v44 = *((_QWORD *)this + 30);
                    else
                      v44 = v43;
                    Flag = llvm::DISubprogram::getFlag((uint64_t)v42, v44);
                    if (!Flag)
                    {
                      v174[0] = "invalid subprogram debug info flag '";
                      v175 = (char *)this + 232;
                      v177 = 1027;
                      *(_QWORD *)v178 = v174;
                      v179 = "'";
                      v46 = 770;
                      goto LABEL_79;
                    }
                    v38 = Flag;
                    v39 = llvm::LLLexer::LexToken(v7);
                    *((_DWORD *)this + 56) = v39;
                  }
                  else
                  {
                    if (v37 == 457 && *((_BYTE *)this + 316))
                    {
                      v178[0] = 0;
                      if ((llvm::LLParser::parseUInt32(this, v178) & 1) != 0)
                        return 1;
                      v38 = v178[0];
                      goto LABEL_66;
                    }
                    *(_QWORD *)v178 = "expected debug info flag";
                    v46 = 259;
LABEL_79:
                    v180 = v46;
                    if ((llvm::LLLexer::Error((uint64_t)v7, *((char **)this + 27), (llvm::Twine *)v178) & 1) != 0)
                      return 1;
                    v38 = 0;
LABEL_66:
                    v39 = *((_DWORD *)this + 56);
                  }
                  v10 |= v38;
                  if (v39 != 15)
                  {
                    v125 = 1;
                    goto LABEL_261;
                  }
                  continue;
                }
              }
LABEL_265:
              v174[0] = "invalid field '";
              v175 = (char *)this + 232;
              v119 = 1027;
LABEL_266:
              v177 = v119;
              *(_QWORD *)v178 = v174;
              v120 = "'";
LABEL_267:
              v179 = v120;
              v121 = 770;
LABEL_268:
              v180 = v121;
              if ((llvm::LLLexer::Error((uint64_t)v7, *((char **)this + 27), (llvm::Twine *)v178) & 1) != 0)
                return 1;
            }
LABEL_261:
            v96 = *((_DWORD *)this + 56);
LABEL_262:
            if (v96 != 4)
              goto LABEL_284;
            v118 = llvm::LLLexer::LexToken(v7);
            *((_DWORD *)this + 56) = v118;
            if (v118 != 437)
              goto LABEL_281;
            break;
          case 9uLL:
            v47 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v47 = *v11;
              v12 = *((_QWORD *)this + 30);
            }
            if (v12 >= 9)
              v48 = 9;
            else
              v48 = v12;
            if (memcmp(v47, "scopeLine", v48) || v12 != 9)
              goto LABEL_265;
            v50 = &v154;
            v51 = this;
            v52 = "scopeLine";
            v53 = 9;
LABEL_92:
            if ((sub_1C4FCED30((uint64_t)v51, (uint64_t)v52, v53, (uint64_t)v50) & 1) != 0)
              return 1;
            goto LABEL_261;
          case 0xAuLL:
            v54 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v54 = *v11;
              v12 = *((_QWORD *)this + 30);
            }
            if (v12 >= 0xA)
              v55 = 10;
            else
              v55 = v12;
            if (memcmp(v54, "virtuality", v55) || v12 != 10)
              goto LABEL_265;
            if (v150)
            {
              v177 = 1283;
              v174[0] = "field '";
              v175 = "virtuality";
              v122 = 10;
              goto LABEL_276;
            }
            v57 = llvm::LLLexer::LexToken(v7);
            *((_DWORD *)this + 56) = v57;
            if (v57 == 445)
            {
              v90 = *((_BYTE *)this + 255);
              v91 = v90 < 0;
              if (v90 >= 0)
                v92 = (char *)this + 232;
              else
                v92 = (char *)*((_QWORD *)this + 29);
              v93 = v90 & 0x7F;
              if (v91)
                v94 = *((_QWORD *)this + 30);
              else
                v94 = v93;
              Virtuality = llvm::dwarf::getVirtuality((uint64_t)v92, v94);
              if (Virtuality != -1)
              {
                v150 = 1;
                v149 = Virtuality;
                v96 = llvm::LLLexer::LexToken(v7);
                *((_DWORD *)this + 56) = v96;
                goto LABEL_262;
              }
              v172[0] = "invalid DWARF virtuality code";
              v172[2] = " '";
              v173 = 771;
              v174[0] = v172;
              v175 = (char *)this + 232;
              v119 = 1026;
              goto LABEL_266;
            }
            if (v57 != 457)
            {
              *(_QWORD *)v178 = "expected DWARF virtuality code";
              v121 = 259;
              goto LABEL_268;
            }
            if ((sub_1C4FCF034((uint64_t)this, (uint64_t)"virtuality", 10, (uint64_t)&v149) & 1) != 0)
              return 1;
            goto LABEL_261;
          case 0xBuLL:
            v58 = *((unsigned __int8 *)this + 255);
            v59 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v59 = *v11;
              v58 = *((_QWORD *)this + 30);
            }
            if (v58 >= 0xB)
              v60 = 11;
            else
              v60 = v58;
            if (!memcmp(v59, "linkageName", v60) && v58 == 11)
            {
              v86 = (uint64_t *)&v166;
              v87 = this;
              v88 = "linkageName";
              v89 = 11;
              goto LABEL_179;
            }
            v62 = v12;
            v63 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v63 = *v11;
              v62 = v13;
            }
            if (v62 >= 0xB)
              v64 = 11;
            else
              v64 = v62;
            if (!memcmp(v63, "isOptimized", v64) && v62 == 11)
            {
              v65 = (char *)&v140;
              v66 = this;
              v67 = "isOptimized";
              v68 = 11;
              goto LABEL_182;
            }
            v100 = v12;
            v101 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v101 = *v11;
              v100 = v13;
            }
            if (v100 >= 0xB)
              v102 = 11;
            else
              v102 = v100;
            if (!memcmp(v101, "declaration", v102) && v100 == 11)
            {
              v22 = &v134;
              v23 = this;
              v24 = "declaration";
LABEL_259:
              v78 = 11;
              goto LABEL_260;
            }
            v109 = v12;
            v110 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v110 = *v11;
              v109 = v13;
            }
            if (v109 >= 0xB)
              v111 = 11;
            else
              v111 = v109;
            if (!memcmp(v110, "thrownTypes", v111) && v109 == 11)
            {
              v22 = &v130;
              v23 = this;
              v24 = "thrownTypes";
              goto LABEL_259;
            }
            v116 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v116 = *v11;
              v12 = v13;
            }
            if (v12 >= 0xB)
              v117 = 11;
            else
              v117 = v12;
            if (!memcmp(v116, "annotations", v117) && v12 == 11)
            {
              v22 = &v128;
              v23 = this;
              v24 = "annotations";
              goto LABEL_259;
            }
            goto LABEL_265;
          case 0xCuLL:
            v69 = *((unsigned __int8 *)this + 255);
            v70 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v70 = *v11;
              v69 = *((_QWORD *)this + 30);
            }
            if (v69 >= 0xC)
              v71 = 12;
            else
              v71 = v69;
            if (!memcmp(v70, "isDefinition", v71) && v69 == 12)
            {
              v65 = (char *)&v157;
              v66 = this;
              v67 = "isDefinition";
              v68 = 12;
              goto LABEL_182;
            }
            v73 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v73 = *v11;
              v12 = v13;
            }
            if (v12 >= 0xC)
              v74 = 12;
            else
              v74 = v12;
            if (memcmp(v73, "virtualIndex", v74) || v12 != 12)
              goto LABEL_265;
            if ((sub_1C4FCED30((uint64_t)this, (uint64_t)"virtualIndex", 12, (uint64_t)&v146) & 1) != 0)
              return 1;
            goto LABEL_261;
          case 0xDuLL:
            v75 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v75 = *v11;
              v12 = *((_QWORD *)this + 30);
            }
            if (v12 >= 0xD)
              v76 = 13;
            else
              v76 = v12;
            if (memcmp(v75, "retainedNodes", v76) || v12 != 13)
              goto LABEL_265;
            v22 = &v132;
            v23 = this;
            v24 = "retainedNodes";
            v78 = 13;
            goto LABEL_260;
          case 0xEuLL:
            v79 = *((unsigned __int8 *)this + 255);
            v80 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v80 = *v11;
              v79 = *((_QWORD *)this + 30);
            }
            if (v79 >= 0xE)
              v81 = 14;
            else
              v81 = v79;
            if (!memcmp(v80, "containingType", v81) && v79 == 14)
            {
              v22 = &v152;
              v23 = this;
              v24 = "containingType";
LABEL_185:
              v78 = 14;
              goto LABEL_260;
            }
            v83 = v12;
            v84 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v84 = *v11;
              v83 = v13;
            }
            if (v83 >= 0xE)
              v85 = 14;
            else
              v85 = v83;
            if (!memcmp(v84, "thisAdjustment", v85) && v83 == 14)
            {
              if (!v144)
              {
                *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v7);
                if ((sub_1C4FCF67C((uint64_t)this, (uint64_t)"thisAdjustment", 14, (uint64_t)&v143) & 1) != 0)
                  return 1;
                goto LABEL_261;
              }
              v177 = 1283;
              v174[0] = "field '";
              v175 = "thisAdjustment";
              v122 = 14;
LABEL_276:
              v176 = v122;
              *(_QWORD *)v178 = v174;
              v120 = "' cannot be specified more than once";
              goto LABEL_267;
            }
            v103 = v12;
            v104 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v104 = *v11;
              v103 = v13;
            }
            if (v103 >= 0xE)
              v105 = 14;
            else
              v105 = v103;
            if (!memcmp(v104, "templateParams", v105) && v103 == 14)
            {
              v22 = &v136;
              v23 = this;
              v24 = "templateParams";
              goto LABEL_185;
            }
            v112 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v112 = *v11;
              v12 = v13;
            }
            if (v12 >= 0xE)
              v113 = 14;
            else
              v113 = v12;
            if (!memcmp(v112, "targetFuncName", v113) && v12 == 14)
            {
              v86 = &v126;
              v87 = this;
              v88 = "targetFuncName";
              v89 = 14;
LABEL_179:
              if ((sub_1C4FCF3D8((uint64_t)v87, (uint64_t)v88, v89, (uint64_t)v86) & 1) != 0)
                return 1;
              goto LABEL_261;
            }
            goto LABEL_265;
          default:
            goto LABEL_265;
        }
      }
    }
    if (v9 == 13)
    {
      if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
        return v8;
      v10 = 8;
    }
    else
    {
      v125 = 0;
      v10 = 0;
LABEL_281:
      *(_QWORD *)v178 = "expected field label here";
      v180 = 259;
      if ((llvm::LLLexer::Error((uint64_t)v7, *((char **)this + 27), (llvm::Twine *)v178) & 1) != 0)
        return 1;
LABEL_284:
      if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
        return 1;
      v6 = v124;
      if (!v125)
        v10 = v149 & 3 | (8 * (v157 != 0)) | (4 * ((_BYTE)v158 != 0)) | (16
                                                                                        * (v140 != 0));
    }
    if ((v10 & 8) != 0 && (a3 & 1) == 0)
    {
      *(_QWORD *)v178 = "missing 'distinct', required for !DISubprogram that is a Definition";
      v180 = 259;
      return llvm::LLLexer::Error((uint64_t)v7, v6, (llvm::Twine *)v178);
    }
    else
    {
      v8 = 0;
      *a2 = (llvm::MDNode *)llvm::DISubprogram::getImpl(*(_QWORD **)this, v170, v168, v166, v164, v161, v159, v154, v152, __SPAIR64__(v143, v146), __SPAIR64__(v10, v141), v138, v136, v134, v132, v130, v128, v126, a3,
                              1);
    }
  }
  return v8;
}

uint64_t llvm::LLParser::parseDILexicalBlock(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  uint64_t *v16;
  llvm::LLParser *v17;
  const char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  size_t v22;
  char *v24;
  size_t v25;
  char *v26;
  size_t v27;
  int v29;
  char *v30;
  llvm::MDNode *Impl;
  int v32;
  llvm::MDNode **v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  _QWORD v44[4];
  __int16 v45;
  _QWORD v46[4];
  __int16 v47;

  v42 = 0;
  v43 = 0;
  v41 = 256;
  v38 = 0;
  v39 = 0xFFFFFFFFLL;
  v40 = 0;
  v34 = 0;
  v36 = 0xFFFFLL;
  v37 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v35 = 0;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v8 = *((_DWORD *)this + 56);
  v33 = a2;
  v32 = a3;
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = *((_QWORD *)this + 30);
      if ((v10 & 0x80u) == 0)
        v12 = v10 & 0x7F;
      else
        v12 = *((_QWORD *)this + 30);
      switch(v12)
      {
        case 4uLL:
          v20 = *((unsigned __int8 *)this + 255);
          v21 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v21 = *v9;
            v20 = *((_QWORD *)this + 30);
          }
          if (v20 >= 4)
            v22 = 4;
          else
            v22 = v20;
          if (!memcmp(v21, "file", v22) && v20 == 4)
          {
            v16 = &v40;
            v17 = this;
            v18 = "file";
            v19 = 4;
LABEL_53:
            if ((sub_1C4FCEE94((uint64_t)v17, (uint64_t)v18, v19, (uint64_t)v16) & 1) != 0)
              return 1;
            break;
          }
          v24 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v24 = *v9;
            v10 = v11;
          }
          if (v10 >= 4)
            v25 = 4;
          else
            v25 = v10;
          if (memcmp(v24, "line", v25) || v10 != 4)
          {
LABEL_57:
            v44[0] = "invalid field '";
            v44[2] = (char *)this + 232;
            v45 = 1027;
            v46[0] = v44;
            v46[2] = "'";
            v47 = 770;
            if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v46) & 1) != 0)
              return 1;
            break;
          }
          if ((sub_1C4FCED30((uint64_t)this, (uint64_t)"line", 4, (uint64_t)&v37) & 1) != 0)
            return 1;
          break;
        case 6uLL:
          v26 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v26 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 6)
            v27 = 6;
          else
            v27 = v10;
          if (memcmp(v26, "column", v27) || v10 != 6)
            goto LABEL_57;
          if ((sub_1C4FCEDE4((uint64_t)this, (uint64_t)&v34) & 1) != 0)
            return 1;
          break;
        case 5uLL:
          v13 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v13 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          v14 = v10 >= 5 ? 5 : v10;
          if (memcmp(v13, "scope", v14) || v10 != 5)
            goto LABEL_57;
          v16 = &v42;
          v17 = this;
          v18 = "scope";
          v19 = 5;
          goto LABEL_53;
        default:
          goto LABEL_57;
      }
      if (*((_DWORD *)this + 56) != 4)
        goto LABEL_60;
      v29 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v29;
      if (v29 != 437)
        goto LABEL_63;
    }
  }
  if (v8 != 13)
  {
LABEL_63:
    v46[0] = "expected field label here";
    v47 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v46) & 1) != 0)
      return 1;
  }
LABEL_60:
  v30 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if ((_BYTE)v43)
  {
    Impl = llvm::DILexicalBlock::getImpl(*(_QWORD **)this, v42, v40, v37, v34, v32, 1);
    result = 0;
    *v33 = Impl;
  }
  else
  {
    v46[0] = "missing required field 'scope'";
    v47 = 259;
    return llvm::LLLexer::Error((uint64_t)v6, v30, (llvm::Twine *)v46);
  }
  return result;
}

uint64_t llvm::LLParser::parseDILexicalBlockFile(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  uint64_t *v15;
  llvm::LLParser *v16;
  const char *v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  char *v22;
  size_t v23;
  int v25;
  char *v26;
  llvm::MDNode *Impl;
  const char *v28;
  llvm::MDNode **v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  _QWORD v37[4];
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;

  v35 = 0;
  v36 = 0;
  v34 = 256;
  v30 = 0;
  v31 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v32 = 0xFFFFFFFFLL;
  v33 = 0;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v29 = a2;
  v8 = *((_DWORD *)this + 56);
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = (v10 & 0x80u) == 0 ? v10 & 0x7F : *((_QWORD *)this + 30);
      if (v11 == 4)
        break;
      if (v11 != 13)
      {
        if (v11 != 5)
          goto LABEL_47;
        v12 = (char *)this + 232;
        if ((v10 & 0x80) != 0)
        {
          v12 = *v9;
          v10 = *((_QWORD *)this + 30);
        }
        v13 = v10 >= 5 ? 5 : v10;
        if (memcmp(v12, "scope", v13) || v10 != 5)
          goto LABEL_47;
        v15 = &v35;
        v16 = this;
        v17 = "scope";
        v18 = 5;
LABEL_33:
        if ((sub_1C4FCEE94((uint64_t)v16, (uint64_t)v17, v18, (uint64_t)v15) & 1) != 0)
          return 1;
        goto LABEL_48;
      }
      v22 = (char *)this + 232;
      if ((v10 & 0x80) != 0)
      {
        v22 = *v9;
        v10 = *((_QWORD *)this + 30);
      }
      if (v10 >= 0xD)
        v23 = 13;
      else
        v23 = v10;
      if (memcmp(v22, "discriminator", v23) || v10 != 13)
        goto LABEL_47;
      if ((sub_1C4FCED30((uint64_t)this, (uint64_t)"discriminator", 13, (uint64_t)&v30) & 1) != 0)
        return 1;
LABEL_48:
      if (*((_DWORD *)this + 56) != 4)
        goto LABEL_52;
      v25 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v25;
      if (v25 != 437)
        goto LABEL_56;
    }
    v19 = (char *)this + 232;
    if ((v10 & 0x80) != 0)
    {
      v19 = *v9;
      v10 = *((_QWORD *)this + 30);
    }
    if (v10 >= 4)
      v20 = 4;
    else
      v20 = v10;
    if (memcmp(v19, "file", v20) || v10 != 4)
    {
LABEL_47:
      v37[0] = "invalid field '";
      v37[2] = (char *)this + 232;
      v38 = 1027;
      v39[0] = v37;
      v39[2] = "'";
      v40 = 770;
      if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v39) & 1) != 0)
        return 1;
      goto LABEL_48;
    }
    v15 = &v33;
    v16 = this;
    v17 = "file";
    v18 = 4;
    goto LABEL_33;
  }
  if (v8 != 13)
  {
LABEL_56:
    v39[0] = "expected field label here";
    v40 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v39) & 1) != 0)
      return 1;
  }
LABEL_52:
  v26 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if ((_BYTE)v36)
  {
    if (v31)
    {
      Impl = llvm::DILexicalBlockFile::getImpl(*(_QWORD **)this, v35, v33, v30, a3, 1);
      result = 0;
      *v29 = Impl;
      return result;
    }
    v28 = "missing required field 'discriminator'";
  }
  else
  {
    v28 = "missing required field 'scope'";
  }
  v39[0] = v28;
  v40 = 259;
  return llvm::LLLexer::Error((uint64_t)v6, v26, (llvm::Twine *)v39);
}

uint64_t llvm::LLParser::parseDINamespace(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v15;
  size_t v16;
  char *v18;
  size_t v19;
  int v21;
  char *v22;
  llvm::MDNode *Impl;
  llvm::MDNode **v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;
  _QWORD v32[4];
  __int16 v33;

  v28 = 0;
  v29 = 256;
  v26 = 0;
  v27 = 256;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v25 = 0;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v8 = *((_DWORD *)this + 56);
  v24 = a2;
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      if ((v10 & 0x80u) == 0)
        v11 = v10 & 0x7F;
      else
        v11 = *((_QWORD *)this + 30);
      switch(v11)
      {
        case 4uLL:
          v15 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v15 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 4)
            v16 = 4;
          else
            v16 = v10;
          if (memcmp(v15, "name", v16) || v10 != 4)
          {
LABEL_47:
            v30[0] = "invalid field '";
            v30[2] = (char *)this + 232;
            v31 = 1027;
            v32[0] = v30;
            v32[2] = "'";
            v33 = 770;
            if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v32) & 1) != 0)
              return 1;
            break;
          }
          if ((sub_1C4FCF3D8((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v26) & 1) != 0)
            return 1;
          break;
        case 0xDuLL:
          v18 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v18 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 0xD)
            v19 = 13;
          else
            v19 = v10;
          if (memcmp(v18, "exportSymbols", v19) || v10 != 13)
            goto LABEL_47;
          if ((sub_1C4FCEF48((uint64_t)this, (uint64_t)"exportSymbols", 13, (char *)&v25) & 1) != 0)
            return 1;
          break;
        case 5uLL:
          v12 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v12 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          v13 = v10 >= 5 ? 5 : v10;
          if (memcmp(v12, "scope", v13) || v10 != 5)
            goto LABEL_47;
          if ((sub_1C4FCEE94((uint64_t)this, (uint64_t)"scope", 5, (uint64_t)&v28) & 1) != 0)
            return 1;
          break;
        default:
          goto LABEL_47;
      }
      if (*((_DWORD *)this + 56) != 4)
        goto LABEL_52;
      v21 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v21;
      if (v21 != 437)
        goto LABEL_55;
    }
  }
  if (v8 != 13)
  {
LABEL_55:
    v32[0] = "expected field label here";
    v33 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v32) & 1) != 0)
      return 1;
  }
LABEL_52:
  v22 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if ((_BYTE)v29)
  {
    Impl = llvm::DINamespace::getImpl(*(_QWORD **)this, v28, v26, v25, a3, 1);
    result = 0;
    *v24 = Impl;
  }
  else
  {
    v32[0] = "missing required field 'scope'";
    v33 = 259;
    return llvm::LLLexer::Error((uint64_t)v6, v22, (llvm::Twine *)v32);
  }
  return result;
}

uint64_t llvm::LLParser::parseDIModule(llvm::LLParser *this, llvm::MDNode **a2, uint64_t a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  const char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  const char *v15;
  unint64_t v16;
  char *v17;
  size_t v18;
  unint64_t v20;
  char *v21;
  size_t v22;
  char v23;
  char *v24;
  size_t v25;
  char *v27;
  size_t v28;
  char *v30;
  size_t v31;
  uint64_t *v33;
  llvm::LLParser *v34;
  const char *v35;
  uint64_t v36;
  char *v37;
  size_t v38;
  char *v40;
  size_t v41;
  char *v43;
  size_t v44;
  int v45;
  char *v46;
  llvm::MDNode *Impl;
  const char *v48;
  int v49;
  llvm::MDNode **v50;
  llvm::LLLexer *v51;
  __int16 v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  _QWORD v68[4];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;

  v66 = 0;
  v67 = 256;
  v64 = 0;
  v65 = 256;
  v62 = 0;
  v63 = 256;
  v60 = 0;
  v61 = 256;
  v58 = 0;
  v59 = 256;
  v57 = 256;
  v53 = 0;
  v54 = 0;
  v55 = 0xFFFFFFFFLL;
  v56 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v52 = 0;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v49 = a3;
  v50 = a2;
  v8 = *((_DWORD *)this + 56);
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    v10 = "isDecl";
    v51 = v6;
    while (2)
    {
      v11 = *((unsigned __int8 *)this + 255);
      v12 = *((_QWORD *)this + 30);
      if ((v11 & 0x80u) == 0)
        v13 = v11 & 0x7F;
      else
        v13 = *((_QWORD *)this + 30);
      switch(v13)
      {
        case 4uLL:
          v14 = a3;
          v15 = v10;
          v16 = *((unsigned __int8 *)this + 255);
          v17 = (char *)this + 232;
          if ((v11 & 0x80) != 0)
          {
            v17 = *v9;
            v16 = *((_QWORD *)this + 30);
          }
          if (v16 >= 4)
            v18 = 4;
          else
            v18 = v16;
          if (!memcmp(v17, "name", v18) && v16 == 4)
          {
            v23 = sub_1C4FCF3D8((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v64);
          }
          else
          {
            v20 = v11;
            v21 = (char *)this + 232;
            if ((v11 & 0x80) != 0)
            {
              v21 = *v9;
              v20 = v12;
            }
            if (v20 >= 4)
              v22 = 4;
            else
              v22 = v20;
            if (memcmp(v21, "file", v22) || v20 != 4)
            {
              v43 = (char *)this + 232;
              if ((v11 & 0x80) != 0)
              {
                v43 = *v9;
                v11 = v12;
              }
              if (v11 >= 4)
                v44 = 4;
              else
                v44 = v11;
              v10 = v15;
              a3 = v14;
              v6 = v51;
              if (memcmp(v43, "line", v44) || v11 != 4)
                goto LABEL_97;
              if ((sub_1C4FCED30((uint64_t)this, (uint64_t)"line", 4, (uint64_t)&v53) & 1) == 0)
                goto LABEL_98;
              return 1;
            }
            v23 = sub_1C4FCEE94((uint64_t)this, (uint64_t)"file", 4, (uint64_t)&v56);
          }
          v10 = v15;
          a3 = v14;
          v6 = v51;
          if ((v23 & 1) == 0)
            goto LABEL_98;
          return 1;
        case 5uLL:
          v24 = (char *)this + 232;
          if ((v11 & 0x80) != 0)
          {
            v24 = *v9;
            v11 = *((_QWORD *)this + 30);
          }
          if (v11 >= 5)
            v25 = 5;
          else
            v25 = v11;
          if (memcmp(v24, "scope", v25) || v11 != 5)
            goto LABEL_97;
          if ((sub_1C4FCEE94((uint64_t)this, (uint64_t)"scope", 5, (uint64_t)&v66) & 1) != 0)
            return 1;
          goto LABEL_98;
        case 6uLL:
          v27 = (char *)this + 232;
          if ((v11 & 0x80) != 0)
          {
            v27 = *v9;
            v11 = *((_QWORD *)this + 30);
          }
          if (v11 >= 6)
            v28 = 6;
          else
            v28 = v11;
          if (memcmp(v27, v10, v28) || v11 != 6)
            goto LABEL_97;
          if ((sub_1C4FCEF48((uint64_t)this, (uint64_t)v10, 6, (char *)&v52) & 1) != 0)
            return 1;
          goto LABEL_98;
        case 8uLL:
          v30 = (char *)this + 232;
          if ((v11 & 0x80) != 0)
          {
            v30 = *v9;
            v11 = *((_QWORD *)this + 30);
          }
          if (v11 >= 8)
            v31 = 8;
          else
            v31 = v11;
          if (memcmp(v30, "apinotes", v31) || v11 != 8)
            goto LABEL_97;
          v33 = &v58;
          v34 = this;
          v35 = "apinotes";
          v36 = 8;
          goto LABEL_83;
        case 0xBuLL:
          v37 = (char *)this + 232;
          if ((v11 & 0x80) != 0)
          {
            v37 = *v9;
            v11 = *((_QWORD *)this + 30);
          }
          if (v11 >= 0xB)
            v38 = 11;
          else
            v38 = v11;
          if (memcmp(v37, "includePath", v38) || v11 != 11)
            goto LABEL_97;
          v33 = &v60;
          v34 = this;
          v35 = "includePath";
          v36 = 11;
          goto LABEL_83;
        case 0xCuLL:
          v40 = (char *)this + 232;
          if ((v11 & 0x80) != 0)
          {
            v40 = *v9;
            v11 = *((_QWORD *)this + 30);
          }
          if (v11 >= 0xC)
            v41 = 12;
          else
            v41 = v11;
          if (memcmp(v40, "configMacros", v41) || v11 != 12)
            goto LABEL_97;
          v33 = &v62;
          v34 = this;
          v35 = "configMacros";
          v36 = 12;
LABEL_83:
          if ((sub_1C4FCF3D8((uint64_t)v34, (uint64_t)v35, v36, (uint64_t)v33) & 1) != 0)
            return 1;
          goto LABEL_98;
        default:
LABEL_97:
          v68[0] = "invalid field '";
          v68[2] = (char *)this + 232;
          v69 = 1027;
          v70[0] = v68;
          v70[2] = "'";
          v71 = 770;
          if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v70) & 1) != 0)
            return 1;
LABEL_98:
          if (*((_DWORD *)this + 56) != 4)
            goto LABEL_102;
          v45 = llvm::LLLexer::LexToken(v6);
          *((_DWORD *)this + 56) = v45;
          if (v45 != 437)
            goto LABEL_106;
          continue;
      }
    }
  }
  if (v8 != 13)
  {
LABEL_106:
    v70[0] = "expected field label here";
    v71 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v70) & 1) != 0)
      return 1;
  }
LABEL_102:
  v46 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if ((_BYTE)v67)
  {
    if ((_BYTE)v65)
    {
      Impl = llvm::DIModule::getImpl(*(_QWORD **)this, v56, v66, v64, v62, v60, v58, v53, v52, v49, 1);
      result = 0;
      *v50 = Impl;
      return result;
    }
    v48 = "missing required field 'name'";
  }
  else
  {
    v48 = "missing required field 'scope'";
  }
  v70[0] = v48;
  v71 = 259;
  return llvm::LLLexer::Error((uint64_t)v6, v46, (llvm::Twine *)v70);
}

uint64_t llvm::LLParser::parseDITemplateTypeParameter(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  size_t v15;
  char *v17;
  size_t v18;
  char *v19;
  size_t v20;
  int v22;
  char *v23;
  llvm::MDNode *Impl;
  int v25;
  llvm::MDNode **v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  _QWORD v32[4];
  __int16 v33;
  _QWORD v34[4];
  __int16 v35;

  v30 = 0;
  v31 = 256;
  v28 = 0;
  v29 = 256;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v27 = 0;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v8 = *((_DWORD *)this + 56);
  v26 = a2;
  v25 = a3;
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = *((_QWORD *)this + 30);
      if ((v10 & 0x80u) == 0)
        v12 = v10 & 0x7F;
      else
        v12 = *((_QWORD *)this + 30);
      if (v12 == 9)
      {
        v19 = (char *)this + 232;
        if ((v10 & 0x80) != 0)
        {
          v19 = *v9;
          v10 = *((_QWORD *)this + 30);
        }
        if (v10 >= 9)
          v20 = 9;
        else
          v20 = v10;
        if (memcmp(v19, "defaulted", v20) || v10 != 9)
        {
LABEL_42:
          v32[0] = "invalid field '";
          v32[2] = (char *)this + 232;
          v33 = 1027;
          v34[0] = v32;
          v34[2] = "'";
          v35 = 770;
          if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v34) & 1) != 0)
            return 1;
          goto LABEL_43;
        }
        if ((sub_1C4FCEF48((uint64_t)this, (uint64_t)"defaulted", 9, (char *)&v27) & 1) != 0)
          return 1;
      }
      else
      {
        if (v12 != 4)
          goto LABEL_42;
        v13 = *((unsigned __int8 *)this + 255);
        v14 = (char *)this + 232;
        if ((v10 & 0x80) != 0)
        {
          v14 = *v9;
          v13 = *((_QWORD *)this + 30);
        }
        if (v13 >= 4)
          v15 = 4;
        else
          v15 = v13;
        if (!memcmp(v14, "name", v15) && v13 == 4)
        {
          if ((sub_1C4FCF3D8((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v30) & 1) != 0)
            return 1;
        }
        else
        {
          v17 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v17 = *v9;
            v10 = v11;
          }
          if (v10 >= 4)
            v18 = 4;
          else
            v18 = v10;
          if (memcmp(v17, "type", v18) || v10 != 4)
            goto LABEL_42;
          if ((sub_1C4FCEE94((uint64_t)this, (uint64_t)"type", 4, (uint64_t)&v28) & 1) != 0)
            return 1;
        }
      }
LABEL_43:
      if (*((_DWORD *)this + 56) != 4)
        goto LABEL_47;
      v22 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v22;
      if (v22 != 437)
        goto LABEL_50;
    }
  }
  if (v8 != 13)
  {
LABEL_50:
    v34[0] = "expected field label here";
    v35 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v34) & 1) != 0)
      return 1;
  }
LABEL_47:
  v23 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if ((_BYTE)v29)
  {
    Impl = llvm::DITemplateTypeParameter::getImpl(*(_QWORD **)this, v30, v28, v27, v25, 1);
    result = 0;
    *v26 = Impl;
  }
  else
  {
    v34[0] = "missing required field 'type'";
    v35 = 259;
    return llvm::LLLexer::Error((uint64_t)v6, v23, (llvm::Twine *)v34);
  }
  return result;
}

uint64_t llvm::LLParser::parseDITemplateValueParameter(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  unint64_t v16;
  char *v17;
  size_t v18;
  char *v20;
  size_t v21;
  uint64_t *v22;
  llvm::LLParser *v23;
  const char *v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  char *v29;
  size_t v30;
  int v32;
  char *v33;
  llvm::MDNode *Impl;
  int v35;
  uint64_t v36;
  __int16 v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  _QWORD v46[4];
  __int16 v47;
  _QWORD v48[4];
  __int16 v49;

  v43 = 48;
  v44 = 0;
  v45 = 0xFFFFLL;
  v41 = 0;
  v42 = 256;
  v39 = 0;
  v40 = 256;
  v38 = 0;
  v37 = 256;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v36 = 0;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v8 = *((_DWORD *)this + 56);
  v35 = a3;
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (2)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = *((_QWORD *)this + 30);
      if ((v10 & 0x80u) == 0)
        v12 = v10 & 0x7F;
      else
        v12 = *((_QWORD *)this + 30);
      switch(v12)
      {
        case 3uLL:
          v13 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v13 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 3)
            v14 = 3;
          else
            v14 = v10;
          if (memcmp(v13, "tag", v14) || v10 != 3)
            goto LABEL_65;
          if ((sub_1C4FCF23C((uint64_t)this, (uint64_t)&v43) & 1) != 0)
            return 1;
          goto LABEL_66;
        case 4uLL:
          v16 = *((unsigned __int8 *)this + 255);
          v17 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v17 = *v9;
            v16 = *((_QWORD *)this + 30);
          }
          if (v16 >= 4)
            v18 = 4;
          else
            v18 = v16;
          if (!memcmp(v17, "name", v18) && v16 == 4)
          {
            if ((sub_1C4FCF3D8((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v41) & 1) != 0)
              return 1;
          }
          else
          {
            v20 = (char *)this + 232;
            if ((v10 & 0x80) != 0)
            {
              v20 = *v9;
              v10 = v11;
            }
            if (v10 >= 4)
              v21 = 4;
            else
              v21 = v10;
            if (!memcmp(v20, "type", v21) && v10 == 4)
            {
              v22 = &v39;
              v23 = this;
              v24 = "type";
              v25 = 4;
LABEL_49:
              if ((sub_1C4FCEE94((uint64_t)v23, (uint64_t)v24, v25, (uint64_t)v22) & 1) != 0)
                return 1;
            }
            else
            {
LABEL_65:
              v46[0] = "invalid field '";
              v46[2] = (char *)this + 232;
              v47 = 1027;
              v48[0] = v46;
              v48[2] = "'";
              v49 = 770;
              if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v48) & 1) != 0)
                return 1;
            }
          }
LABEL_66:
          if (*((_DWORD *)this + 56) != 4)
            goto LABEL_70;
          v32 = llvm::LLLexer::LexToken(v6);
          *((_DWORD *)this + 56) = v32;
          if (v32 != 437)
            goto LABEL_73;
          continue;
        case 5uLL:
          v26 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v26 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 5)
            v27 = 5;
          else
            v27 = v10;
          if (memcmp(v26, "value", v27) || v10 != 5)
            goto LABEL_65;
          v22 = &v36;
          v23 = this;
          v24 = "value";
          v25 = 5;
          goto LABEL_49;
        case 9uLL:
          v29 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v29 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 9)
            v30 = 9;
          else
            v30 = v10;
          if (memcmp(v29, "defaulted", v30) || v10 != 9)
            goto LABEL_65;
          if ((sub_1C4FCEF48((uint64_t)this, (uint64_t)"defaulted", 9, (char *)&v38) & 1) != 0)
            return 1;
          goto LABEL_66;
        default:
          goto LABEL_65;
      }
    }
  }
  if (v8 != 13)
  {
LABEL_73:
    v48[0] = "expected field label here";
    v49 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v48) & 1) != 0)
      return 1;
  }
LABEL_70:
  v33 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if ((_BYTE)v37)
  {
    Impl = llvm::DITemplateValueParameter::getImpl(*(_QWORD **)this, v43, v41, v39, v38, v36, v35, 1);
    result = 0;
    *a2 = Impl;
  }
  else
  {
    v48[0] = "missing required field 'value'";
    v49 = 259;
    return llvm::LLLexer::Error((uint64_t)v6, v33, (llvm::Twine *)v48);
  }
  return result;
}

uint64_t llvm::LLParser::parseDIGlobalVariable(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  uint64_t v6;
  llvm::LLLexer *v7;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  size_t v15;
  unint64_t v17;
  char *v18;
  size_t v19;
  uint64_t *v20;
  llvm::LLParser *v21;
  const char *v22;
  unint64_t v23;
  char *v24;
  size_t v25;
  char *v27;
  size_t v28;
  char *v29;
  size_t v30;
  char *v32;
  llvm::LLParser *v33;
  const char *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  size_t v38;
  unint64_t v40;
  char *v41;
  size_t v42;
  char *v43;
  size_t v44;
  char *v46;
  size_t v47;
  uint64_t v49;
  char v50;
  unint64_t v51;
  char *v52;
  size_t v53;
  char *v54;
  size_t v55;
  char *v56;
  size_t v57;
  int v58;
  char *v59;
  int v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  __int16 v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  _QWORD v86[4];
  __int16 v87;
  _QWORD v88[4];
  __int16 v89;

  v84 = 0;
  v85 = 0;
  v82 = 0;
  v83 = 256;
  v80 = 0;
  v81 = 256;
  v79 = 256;
  v75 = 0;
  v76 = 0;
  v77 = 0xFFFFFFFFLL;
  v78 = 0;
  v73 = 0;
  v74 = 256;
  v72 = 0;
  v6 = 1;
  v71 = 1;
  v69 = 0;
  v70 = 256;
  v66 = 0xFFFFFFFFLL;
  v67 = 0;
  v68 = 256;
  v64 = 0;
  v65 = 0;
  v62 = 0;
  v7 = (llvm::LLParser *)((char *)this + 168);
  v63 = 256;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return v6;
  v8 = *((_DWORD *)this + 56);
  v61 = a3;
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = *((_QWORD *)this + 30);
      if ((v10 & 0x80u) == 0)
        v12 = v10 & 0x7F;
      else
        v12 = *((_QWORD *)this + 30);
      switch(v12)
      {
        case 4uLL:
          v13 = *((unsigned __int8 *)this + 255);
          v14 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v14 = *v9;
            v13 = *((_QWORD *)this + 30);
          }
          if (v13 >= 4)
            v15 = 4;
          else
            v15 = v13;
          if (!memcmp(v14, "name", v15) && v13 == 4)
          {
            v50 = sub_1C4FCF3D8((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v84);
            goto LABEL_97;
          }
          v17 = v10;
          v18 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v18 = *v9;
            v17 = v11;
          }
          if (v17 >= 4)
            v19 = 4;
          else
            v19 = v17;
          if (!memcmp(v18, "file", v19) && v17 == 4)
          {
            v20 = &v78;
            v21 = this;
            v22 = "file";
LABEL_127:
            v49 = 4;
            goto LABEL_128;
          }
          v51 = v10;
          v52 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v52 = *v9;
            v51 = v11;
          }
          if (v51 >= 4)
            v53 = 4;
          else
            v53 = v51;
          if (!memcmp(v52, "line", v53) && v51 == 4)
          {
            if ((sub_1C4FCED30((uint64_t)this, (uint64_t)"line", 4, (uint64_t)&v75) & 1) == 0)
              goto LABEL_129;
            return 1;
          }
          v56 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v56 = *v9;
            v10 = v11;
          }
          if (v10 >= 4)
            v57 = 4;
          else
            v57 = v10;
          if (!memcmp(v56, "type", v57) && v10 == 4)
          {
            v20 = &v73;
            v21 = this;
            v22 = "type";
            goto LABEL_127;
          }
LABEL_132:
          v86[0] = "invalid field '";
          v86[2] = (char *)this + 232;
          v87 = 1027;
          v88[0] = v86;
          v88[2] = "'";
          v89 = 770;
          if ((llvm::LLLexer::Error((uint64_t)v7, *((char **)this + 27), (llvm::Twine *)v88) & 1) != 0)
            return 1;
LABEL_129:
          if (*((_DWORD *)this + 56) != 4)
            goto LABEL_135;
          v58 = llvm::LLLexer::LexToken(v7);
          *((_DWORD *)this + 56) = v58;
          if (v58 != 437)
            goto LABEL_138;
          break;
        case 5uLL:
          v23 = *((unsigned __int8 *)this + 255);
          v24 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v24 = *v9;
            v23 = *((_QWORD *)this + 30);
          }
          if (v23 >= 5)
            v25 = 5;
          else
            v25 = v23;
          if (!memcmp(v24, "scope", v25) && v23 == 5)
          {
            v50 = sub_1C4FCEE94((uint64_t)this, (uint64_t)"scope", 5, (uint64_t)&v82);
LABEL_97:
            if ((v50 & 1) != 0)
              return 1;
          }
          else
          {
            v27 = (char *)this + 232;
            if ((v10 & 0x80) != 0)
            {
              v27 = *v9;
              v10 = v11;
            }
            if (v10 >= 5)
              v28 = 5;
            else
              v28 = v10;
            if (memcmp(v27, "align", v28) || v10 != 5)
              goto LABEL_132;
            if ((sub_1C4FCED30((uint64_t)this, (uint64_t)"align", 5, (uint64_t)&v64) & 1) != 0)
              return 1;
          }
          goto LABEL_129;
        case 7uLL:
          v29 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v29 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 7)
            v30 = 7;
          else
            v30 = v10;
          if (memcmp(v29, "isLocal", v30) || v10 != 7)
            goto LABEL_132;
          v32 = (char *)&v72;
          v33 = this;
          v34 = "isLocal";
          v35 = 7;
          goto LABEL_82;
        case 0xBuLL:
          v36 = *((unsigned __int8 *)this + 255);
          v37 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v37 = *v9;
            v36 = *((_QWORD *)this + 30);
          }
          if (v36 >= 0xB)
            v38 = 11;
          else
            v38 = v36;
          if (!memcmp(v37, "linkageName", v38) && v36 == 11)
          {
            if ((sub_1C4FCF3D8((uint64_t)this, (uint64_t)"linkageName", 11, (uint64_t)&v80) & 1) != 0)
              return 1;
          }
          else
          {
            v40 = v10;
            v41 = (char *)this + 232;
            if ((v10 & 0x80) != 0)
            {
              v41 = *v9;
              v40 = v11;
            }
            if (v40 >= 0xB)
              v42 = 11;
            else
              v42 = v40;
            if (!memcmp(v41, "declaration", v42) && v40 == 11)
            {
              v20 = &v67;
              v21 = this;
              v22 = "declaration";
            }
            else
            {
              v54 = (char *)this + 232;
              if ((v10 & 0x80) != 0)
              {
                v54 = *v9;
                v10 = v11;
              }
              if (v10 >= 0xB)
                v55 = 11;
              else
                v55 = v10;
              if (memcmp(v54, "annotations", v55) || v10 != 11)
                goto LABEL_132;
              v20 = &v62;
              v21 = this;
              v22 = "annotations";
            }
            v49 = 11;
LABEL_128:
            if ((sub_1C4FCEE94((uint64_t)v21, (uint64_t)v22, v49, (uint64_t)v20) & 1) != 0)
              return 1;
          }
          goto LABEL_129;
        case 0xCuLL:
          v43 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v43 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 0xC)
            v44 = 12;
          else
            v44 = v10;
          if (memcmp(v43, "isDefinition", v44) || v10 != 12)
            goto LABEL_132;
          v32 = (char *)&v71;
          v33 = this;
          v34 = "isDefinition";
          v35 = 12;
LABEL_82:
          if ((sub_1C4FCEF48((uint64_t)v33, (uint64_t)v34, v35, v32) & 1) != 0)
            return 1;
          goto LABEL_129;
        case 0xEuLL:
          v46 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v46 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 0xE)
            v47 = 14;
          else
            v47 = v10;
          if (memcmp(v46, "templateParams", v47) || v10 != 14)
            goto LABEL_132;
          v20 = &v69;
          v21 = this;
          v22 = "templateParams";
          v49 = 14;
          goto LABEL_128;
        default:
          goto LABEL_132;
      }
    }
  }
  if (v8 != 13)
  {
LABEL_138:
    v88[0] = "expected field label here";
    v89 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v7, *((char **)this + 27), (llvm::Twine *)v88) & 1) != 0)
      return 1;
  }
LABEL_135:
  v59 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if ((_BYTE)v85)
  {
    v6 = 0;
    *a2 = llvm::DIGlobalVariable::getImpl(*(_QWORD **)this, v82, v84, v80, v78, v75, v73, v72, v71, v67, v69, v64, v62, v61, 1);
  }
  else
  {
    v88[0] = "missing required field 'name'";
    v89 = 259;
    return llvm::LLLexer::Error((uint64_t)v7, v59, (llvm::Twine *)v88);
  }
  return v6;
}

uint64_t llvm::LLParser::parseDILocalVariable(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  uint64_t *v16;
  llvm::LLParser *v17;
  const char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  size_t v22;
  unint64_t v24;
  char *v25;
  size_t v26;
  uint64_t *v27;
  llvm::LLParser *v28;
  const char *v29;
  unint64_t v30;
  char *v31;
  size_t v32;
  unint64_t v34;
  char *v35;
  size_t v36;
  char v37;
  char *v38;
  size_t v39;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  size_t v44;
  char *v45;
  size_t v46;
  char *v47;
  size_t v48;
  int v49;
  char *v50;
  llvm::MDNode *Impl;
  llvm::MDNode **v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  _QWORD v74[4];
  __int16 v75;
  _QWORD v76[4];
  __int16 v77;

  v72 = 0;
  v73 = 0;
  v71 = 256;
  v67 = 0;
  v68 = 0;
  v69 = 0xFFFFLL;
  v70 = 0;
  v66 = 256;
  v62 = 0;
  v63 = 0;
  v64 = 0xFFFFFFFFLL;
  v65 = 0;
  v60 = 0;
  v61 = 256;
  v58 = 0;
  v59 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0xFFFFFFFFLL;
  v53 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v54 = 256;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v8 = *((_DWORD *)this + 56);
  v52 = a2;
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (2)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = *((_QWORD *)this + 30);
      if ((v10 & 0x80u) == 0)
        v12 = v10 & 0x7F;
      else
        v12 = *((_QWORD *)this + 30);
      switch(v12)
      {
        case 3uLL:
          v13 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v13 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 3)
            v14 = 3;
          else
            v14 = v10;
          if (memcmp(v13, "arg", v14) || v10 != 3)
            goto LABEL_101;
          v16 = &v67;
          v17 = this;
          v18 = "arg";
          v19 = 3;
          goto LABEL_86;
        case 4uLL:
          v20 = *((unsigned __int8 *)this + 255);
          v21 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v21 = *v9;
            v20 = *((_QWORD *)this + 30);
          }
          if (v20 >= 4)
            v22 = 4;
          else
            v22 = v20;
          if (!memcmp(v21, "name", v22) && v20 == 4)
          {
            v37 = sub_1C4FCF3D8((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v70);
LABEL_67:
            if ((v37 & 1) != 0)
              return 1;
          }
          else
          {
            v24 = v10;
            v25 = (char *)this + 232;
            if ((v10 & 0x80) != 0)
            {
              v25 = *v9;
              v24 = v11;
            }
            if (v24 >= 4)
              v26 = 4;
            else
              v26 = v24;
            if (!memcmp(v25, "file", v26) && v24 == 4)
            {
              v27 = &v65;
              v28 = this;
              v29 = "file";
            }
            else
            {
              v42 = v10;
              v43 = (char *)this + 232;
              if ((v10 & 0x80) != 0)
              {
                v43 = *v9;
                v42 = v11;
              }
              if (v42 >= 4)
                v44 = 4;
              else
                v44 = v42;
              if (!memcmp(v43, "line", v44) && v42 == 4)
              {
                if ((sub_1C4FCED30((uint64_t)this, (uint64_t)"line", 4, (uint64_t)&v62) & 1) != 0)
                  return 1;
                goto LABEL_98;
              }
              v47 = (char *)this + 232;
              if ((v10 & 0x80) != 0)
              {
                v47 = *v9;
                v10 = v11;
              }
              if (v10 >= 4)
                v48 = 4;
              else
                v48 = v10;
              if (memcmp(v47, "type", v48) || v10 != 4)
              {
LABEL_101:
                v74[0] = "invalid field '";
                v74[2] = (char *)this + 232;
                v75 = 1027;
                v76[0] = v74;
                v76[2] = "'";
                v77 = 770;
                if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v76) & 1) != 0)
                  return 1;
                goto LABEL_98;
              }
              v27 = &v60;
              v28 = this;
              v29 = "type";
            }
            v41 = 4;
LABEL_97:
            if ((sub_1C4FCEE94((uint64_t)v28, (uint64_t)v29, v41, (uint64_t)v27) & 1) != 0)
              return 1;
          }
LABEL_98:
          if (*((_DWORD *)this + 56) != 4)
            goto LABEL_104;
          v49 = llvm::LLLexer::LexToken(v6);
          *((_DWORD *)this + 56) = v49;
          if (v49 != 437)
            goto LABEL_107;
          continue;
        case 5uLL:
          v30 = *((unsigned __int8 *)this + 255);
          v31 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v31 = *v9;
            v30 = *((_QWORD *)this + 30);
          }
          if (v30 >= 5)
            v32 = 5;
          else
            v32 = v30;
          if (!memcmp(v31, "scope", v32) && v30 == 5)
          {
            v37 = sub_1C4FCEE94((uint64_t)this, (uint64_t)"scope", 5, (uint64_t)&v72);
            goto LABEL_67;
          }
          v34 = v10;
          v35 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v35 = *v9;
            v34 = v11;
          }
          if (v34 >= 5)
            v36 = 5;
          else
            v36 = v34;
          if (!memcmp(v35, "flags", v36) && v34 == 5)
          {
            v37 = sub_1C4FCFD6C((uint64_t)this, (uint64_t)&v58);
            goto LABEL_67;
          }
          v45 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v45 = *v9;
            v10 = v11;
          }
          if (v10 >= 5)
            v46 = 5;
          else
            v46 = v10;
          if (memcmp(v45, "align", v46) || v10 != 5)
            goto LABEL_101;
          v16 = &v55;
          v17 = this;
          v18 = "align";
          v19 = 5;
LABEL_86:
          if ((sub_1C4FCED30((uint64_t)v17, (uint64_t)v18, v19, (uint64_t)v16) & 1) != 0)
            return 1;
          goto LABEL_98;
        case 0xBuLL:
          v38 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v38 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 0xB)
            v39 = 11;
          else
            v39 = v10;
          if (memcmp(v38, "annotations", v39) || v10 != 11)
            goto LABEL_101;
          v27 = &v53;
          v28 = this;
          v29 = "annotations";
          v41 = 11;
          goto LABEL_97;
        default:
          goto LABEL_101;
      }
    }
  }
  if (v8 != 13)
  {
LABEL_107:
    v76[0] = "expected field label here";
    v77 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v76) & 1) != 0)
      return 1;
  }
LABEL_104:
  v50 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if ((_BYTE)v73)
  {
    Impl = llvm::DILocalVariable::getImpl(*(_QWORD **)this, v72, v70, v65, v62, v60, v67, v58, v55, v53, a3, 1);
    result = 0;
    *v52 = Impl;
  }
  else
  {
    v76[0] = "missing required field 'scope'";
    v77 = 259;
    return llvm::LLLexer::Error((uint64_t)v6, v50, (llvm::Twine *)v76);
  }
  return result;
}

uint64_t llvm::LLParser::parseDILabel(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  uint64_t *v16;
  llvm::LLParser *v17;
  const char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  size_t v22;
  unint64_t v24;
  char *v25;
  size_t v26;
  char *v27;
  size_t v28;
  int v29;
  char *v30;
  llvm::MDNode *Impl;
  const char *v32;
  int v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  _QWORD v43[4];
  __int16 v44;
  _QWORD v45[4];
  __int16 v46;

  v41 = 0;
  v42 = 0;
  v39 = 0;
  v40 = 256;
  v38 = 256;
  v34 = 0;
  v36 = 0xFFFFFFFFLL;
  v37 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v35 = 0;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v33 = a3;
  v8 = *((_DWORD *)this + 56);
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = *((_QWORD *)this + 30);
      v12 = (v10 & 0x80u) == 0 ? v10 & 0x7F : *((_QWORD *)this + 30);
      if (v12 != 4)
        break;
      v20 = *((unsigned __int8 *)this + 255);
      v21 = (char *)this + 232;
      if ((v10 & 0x80) != 0)
      {
        v21 = *v9;
        v20 = *((_QWORD *)this + 30);
      }
      if (v20 >= 4)
        v22 = 4;
      else
        v22 = v20;
      if (!memcmp(v21, "name", v22) && v20 == 4)
      {
        if ((sub_1C4FCF3D8((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v39) & 1) != 0)
          return 1;
        goto LABEL_52;
      }
      v24 = v10;
      v25 = (char *)this + 232;
      if ((v10 & 0x80) != 0)
      {
        v25 = *v9;
        v24 = v11;
      }
      if (v24 >= 4)
        v26 = 4;
      else
        v26 = v24;
      if (!memcmp(v25, "file", v26) && v24 == 4)
      {
        v16 = &v37;
        v17 = this;
        v18 = "file";
        v19 = 4;
LABEL_38:
        if ((sub_1C4FCEE94((uint64_t)v17, (uint64_t)v18, v19, (uint64_t)v16) & 1) != 0)
          return 1;
        goto LABEL_52;
      }
      v27 = (char *)this + 232;
      if ((v10 & 0x80) != 0)
      {
        v27 = *v9;
        v10 = v11;
      }
      if (v10 >= 4)
        v28 = 4;
      else
        v28 = v10;
      if (memcmp(v27, "line", v28) || v10 != 4)
      {
LABEL_51:
        v43[0] = "invalid field '";
        v43[2] = (char *)this + 232;
        v44 = 1027;
        v45[0] = v43;
        v45[2] = "'";
        v46 = 770;
        if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v45) & 1) != 0)
          return 1;
        goto LABEL_52;
      }
      if ((sub_1C4FCED30((uint64_t)this, (uint64_t)"line", 4, (uint64_t)&v34) & 1) != 0)
        return 1;
LABEL_52:
      if (*((_DWORD *)this + 56) != 4)
        goto LABEL_56;
      v29 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v29;
      if (v29 != 437)
        goto LABEL_62;
    }
    if (v12 != 5)
      goto LABEL_51;
    v13 = (char *)this + 232;
    if ((v10 & 0x80) != 0)
    {
      v13 = *v9;
      v10 = *((_QWORD *)this + 30);
    }
    v14 = v10 >= 5 ? 5 : v10;
    if (memcmp(v13, "scope", v14) || v10 != 5)
      goto LABEL_51;
    v16 = &v41;
    v17 = this;
    v18 = "scope";
    v19 = 5;
    goto LABEL_38;
  }
  if (v8 != 13)
  {
LABEL_62:
    v45[0] = "expected field label here";
    v46 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v45) & 1) != 0)
      return 1;
  }
LABEL_56:
  v30 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if ((_BYTE)v42)
  {
    if ((_BYTE)v40)
    {
      if ((_BYTE)v38)
      {
        if (v35)
        {
          Impl = llvm::DILabel::getImpl(*(_QWORD **)this, v41, v39, v37, v34, v33, 1);
          result = 0;
          *a2 = Impl;
          return result;
        }
        v32 = "missing required field 'line'";
      }
      else
      {
        v32 = "missing required field 'file'";
      }
    }
    else
    {
      v32 = "missing required field 'name'";
    }
  }
  else
  {
    v32 = "missing required field 'scope'";
  }
  v45[0] = v32;
  v46 = 259;
  return llvm::LLLexer::Error((uint64_t)v6, v30, (llvm::Twine *)v45);
}

uint64_t llvm::LLParser::parseDIObjCProperty(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  size_t v15;
  unint64_t v17;
  char *v18;
  size_t v19;
  uint64_t *v20;
  llvm::LLParser *v21;
  const char *v22;
  char *v23;
  size_t v24;
  unint64_t v26;
  char *v27;
  size_t v28;
  char *v30;
  size_t v31;
  uint64_t *v32;
  llvm::LLParser *v33;
  const char *v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  size_t v38;
  char *v39;
  size_t v40;
  int v41;
  char v42;
  unsigned int *Impl;
  int v44;
  llvm::MDNode **v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  _QWORD v62[4];
  __int16 v63;
  _QWORD v64[4];
  __int16 v65;

  v60 = 0;
  v61 = 256;
  v59 = 256;
  v55 = 0;
  v56 = 0;
  v57 = 0xFFFFFFFFLL;
  v58 = 0;
  v53 = 0;
  v54 = 256;
  v50 = 0xFFFFFFFFLL;
  v51 = 0;
  v52 = 256;
  v48 = 0;
  v49 = 0;
  v46 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v47 = 256;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v44 = a3;
  v45 = a2;
  v8 = *((_DWORD *)this + 56);
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = *((_QWORD *)this + 30);
      if ((v10 & 0x80u) == 0)
        v12 = v10 & 0x7F;
      else
        v12 = *((_QWORD *)this + 30);
      switch(v12)
      {
        case 0xAuLL:
          v23 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v23 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 0xA)
            v24 = 10;
          else
            v24 = v10;
          if (memcmp(v23, "attributes", v24) || v10 != 10)
          {
LABEL_82:
            v62[0] = "invalid field '";
            v62[2] = (char *)this + 232;
            v63 = 1027;
            v64[0] = v62;
            v64[2] = "'";
            v65 = 770;
            if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v64) & 1) != 0)
              return 1;
            break;
          }
          if ((sub_1C4FCED30((uint64_t)this, (uint64_t)"attributes", 10, (uint64_t)&v48) & 1) != 0)
            return 1;
          break;
        case 6uLL:
          v26 = *((unsigned __int8 *)this + 255);
          v27 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v27 = *v9;
            v26 = *((_QWORD *)this + 30);
          }
          if (v26 >= 6)
            v28 = 6;
          else
            v28 = v26;
          if (!memcmp(v27, "setter", v28) && v26 == 6)
          {
            v32 = &v53;
            v33 = this;
            v34 = "setter";
          }
          else
          {
            v30 = (char *)this + 232;
            if ((v10 & 0x80) != 0)
            {
              v30 = *v9;
              v10 = v11;
            }
            if (v10 >= 6)
              v31 = 6;
            else
              v31 = v10;
            if (memcmp(v30, "getter", v31) || v10 != 6)
              goto LABEL_82;
            v32 = &v51;
            v33 = this;
            v34 = "getter";
          }
          v35 = 6;
          goto LABEL_61;
        case 4uLL:
          v13 = *((unsigned __int8 *)this + 255);
          v14 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v14 = *v9;
            v13 = *((_QWORD *)this + 30);
          }
          if (v13 >= 4)
            v15 = 4;
          else
            v15 = v13;
          if (!memcmp(v14, "name", v15) && v13 == 4)
          {
            v32 = &v60;
            v33 = this;
            v34 = "name";
            v35 = 4;
LABEL_61:
            if ((sub_1C4FCF3D8((uint64_t)v33, (uint64_t)v34, v35, (uint64_t)v32) & 1) != 0)
              return 1;
            break;
          }
          v17 = v10;
          v18 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v18 = *v9;
            v17 = v11;
          }
          if (v17 >= 4)
            v19 = 4;
          else
            v19 = v17;
          if (!memcmp(v18, "file", v19) && v17 == 4)
          {
            v20 = &v58;
            v21 = this;
            v22 = "file";
LABEL_80:
            if ((sub_1C4FCEE94((uint64_t)v21, (uint64_t)v22, 4, (uint64_t)v20) & 1) != 0)
              return 1;
            break;
          }
          v36 = v10;
          v37 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v37 = *v9;
            v36 = v11;
          }
          if (v36 >= 4)
            v38 = 4;
          else
            v38 = v36;
          if (memcmp(v37, "line", v38) || v36 != 4)
          {
            v39 = (char *)this + 232;
            if ((v10 & 0x80) != 0)
            {
              v39 = *v9;
              v10 = v11;
            }
            if (v10 >= 4)
              v40 = 4;
            else
              v40 = v10;
            if (memcmp(v39, "type", v40) || v10 != 4)
              goto LABEL_82;
            v20 = &v46;
            v21 = this;
            v22 = "type";
            goto LABEL_80;
          }
          if ((sub_1C4FCED30((uint64_t)this, (uint64_t)"line", 4, (uint64_t)&v55) & 1) != 0)
            return 1;
          break;
        default:
          goto LABEL_82;
      }
      if (*((_DWORD *)this + 56) != 4)
        goto LABEL_87;
      v41 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v41;
      if (v41 != 437)
        goto LABEL_89;
    }
  }
  if (v8 != 13)
  {
LABEL_89:
    v64[0] = "expected field label here";
    v65 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v64) & 1) != 0)
      return 1;
  }
LABEL_87:
  v42 = llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here");
  result = 1;
  if ((v42 & 1) == 0)
  {
    Impl = llvm::DIObjCProperty::getImpl(*(_QWORD **)this, v60, v58, v55, v53, v51, v48, v46, v44, 1);
    result = 0;
    *v45 = (llvm::MDNode *)Impl;
  }
  return result;
}

uint64_t llvm::LLParser::parseDIImportedEntity(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  uint64_t v3;
  llvm::LLLexer *v7;
  uint64_t result;
  int v9;
  char **v10;
  const char *v11;
  const char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v19;
  const char *v20;
  const char *v21;
  unint64_t v22;
  char *v23;
  size_t v24;
  unint64_t v26;
  char *v27;
  size_t v28;
  char v29;
  char *v30;
  size_t v31;
  uint64_t *v33;
  llvm::LLParser *v34;
  const char *v35;
  uint64_t v36;
  char *v37;
  size_t v38;
  char *v40;
  size_t v41;
  char *v43;
  size_t v44;
  int v45;
  char *v46;
  llvm::MDNode *Impl;
  const char *v48;
  int v49;
  llvm::MDNode **v50;
  llvm::LLLexer *v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  _QWORD v68[4];
  __int16 v69;
  _QWORD v70[4];
  __int16 v71;

  v65 = 0;
  v66 = 0;
  v67 = 0xFFFFLL;
  v63 = 0;
  v64 = 256;
  v61 = 0;
  v62 = 256;
  v60 = 256;
  v56 = 0;
  v57 = 0;
  v58 = 0xFFFFFFFFLL;
  v59 = 0;
  v54 = 0;
  v55 = 256;
  v52 = 0;
  v7 = (llvm::LLParser *)((char *)this + 168);
  v53 = 256;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v49 = a3;
  v50 = a2;
  v9 = *((_DWORD *)this + 56);
  if (v9 == 437)
  {
    v10 = (char **)((char *)this + 232);
    v11 = "scope";
    v12 = "entity";
    v51 = v7;
    while (1)
    {
      v13 = *((unsigned __int8 *)this + 255);
      v14 = *((_QWORD *)this + 30);
      if ((v13 & 0x80u) == 0)
        v15 = v13 & 0x7F;
      else
        v15 = *((_QWORD *)this + 30);
      switch(v15)
      {
        case 3uLL:
          v16 = (char *)this + 232;
          if ((v13 & 0x80) != 0)
          {
            v16 = *v10;
            v13 = *((_QWORD *)this + 30);
          }
          if (v13 >= 3)
            v17 = 3;
          else
            v17 = v13;
          if (memcmp(v16, "tag", v17) || v13 != 3)
            goto LABEL_85;
          if ((sub_1C4FCF23C((uint64_t)this, (uint64_t)&v65) & 1) != 0)
            return 1;
          goto LABEL_86;
        case 4uLL:
          v19 = v3;
          v20 = v12;
          v21 = v11;
          v22 = *((unsigned __int8 *)this + 255);
          v23 = (char *)this + 232;
          if ((v13 & 0x80) != 0)
          {
            v23 = *v10;
            v22 = *((_QWORD *)this + 30);
          }
          if (v22 >= 4)
            v24 = 4;
          else
            v24 = v22;
          if (!memcmp(v23, "file", v24) && v22 == 4)
          {
            v29 = sub_1C4FCEE94((uint64_t)this, (uint64_t)"file", 4, (uint64_t)&v59);
LABEL_74:
            v11 = v21;
            v12 = v20;
            v3 = v19;
            v7 = v51;
            if ((v29 & 1) != 0)
              return 1;
            goto LABEL_86;
          }
          v26 = v13;
          v27 = (char *)this + 232;
          if ((v13 & 0x80) != 0)
          {
            v27 = *v10;
            v26 = v14;
          }
          if (v26 >= 4)
            v28 = 4;
          else
            v28 = v26;
          if (!memcmp(v27, "line", v28) && v26 == 4)
          {
            v29 = sub_1C4FCED30((uint64_t)this, (uint64_t)"line", 4, (uint64_t)&v56);
            goto LABEL_74;
          }
          v43 = (char *)this + 232;
          if ((v13 & 0x80) != 0)
          {
            v43 = *v10;
            v13 = v14;
          }
          if (v13 >= 4)
            v44 = 4;
          else
            v44 = v13;
          v11 = v21;
          v12 = v20;
          v3 = v19;
          v7 = v51;
          if (!memcmp(v43, "name", v44) && v13 == 4)
          {
            if ((sub_1C4FCF3D8((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v54) & 1) != 0)
              return 1;
          }
          else
          {
LABEL_85:
            v68[0] = "invalid field '";
            v68[2] = (char *)this + 232;
            v69 = 1027;
            v70[0] = v68;
            v70[2] = "'";
            v71 = 770;
            if ((llvm::LLLexer::Error((uint64_t)v7, *((char **)this + 27), (llvm::Twine *)v70) & 1) != 0)
              return 1;
          }
LABEL_86:
          if (*((_DWORD *)this + 56) != 4)
            goto LABEL_90;
          v45 = llvm::LLLexer::LexToken(v7);
          *((_DWORD *)this + 56) = v45;
          if (v45 != 437)
            goto LABEL_94;
          break;
        case 5uLL:
          v30 = (char *)this + 232;
          if ((v13 & 0x80) != 0)
          {
            v30 = *v10;
            v13 = *((_QWORD *)this + 30);
          }
          if (v13 >= 5)
            v31 = 5;
          else
            v31 = v13;
          if (memcmp(v30, v11, v31) || v13 != 5)
            goto LABEL_85;
          v33 = &v63;
          v34 = this;
          v35 = v11;
          v36 = 5;
          goto LABEL_71;
        case 6uLL:
          v37 = (char *)this + 232;
          if ((v13 & 0x80) != 0)
          {
            v37 = *v10;
            v13 = *((_QWORD *)this + 30);
          }
          if (v13 >= 6)
            v38 = 6;
          else
            v38 = v13;
          if (memcmp(v37, v12, v38) || v13 != 6)
            goto LABEL_85;
          v33 = &v61;
          v34 = this;
          v35 = v12;
          v36 = 6;
          goto LABEL_71;
        case 8uLL:
          v40 = (char *)this + 232;
          if ((v13 & 0x80) != 0)
          {
            v40 = *v10;
            v13 = *((_QWORD *)this + 30);
          }
          if (v13 >= 8)
            v41 = 8;
          else
            v41 = v13;
          if (memcmp(v40, "elements", v41) || v13 != 8)
            goto LABEL_85;
          v33 = &v52;
          v34 = this;
          v35 = "elements";
          v36 = 8;
LABEL_71:
          if ((sub_1C4FCEE94((uint64_t)v34, (uint64_t)v35, v36, (uint64_t)v33) & 1) != 0)
            return 1;
          goto LABEL_86;
        default:
          goto LABEL_85;
      }
    }
  }
  if (v9 != 13)
  {
LABEL_94:
    v70[0] = "expected field label here";
    v71 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v7, *((char **)this + 27), (llvm::Twine *)v70) & 1) != 0)
      return 1;
  }
LABEL_90:
  v46 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if (v66)
  {
    if ((_BYTE)v64)
    {
      Impl = llvm::DIImportedEntity::getImpl(*(_QWORD **)this, v65, v63, v61, v59, v56, v54, v52, v49, 1);
      result = 0;
      *v50 = Impl;
      return result;
    }
    v48 = "missing required field 'scope'";
  }
  else
  {
    v48 = "missing required field 'tag'";
  }
  v70[0] = v48;
  v71 = 259;
  return llvm::LLLexer::Error((uint64_t)v7, v46, (llvm::Twine *)v70);
}

uint64_t llvm::LLParser::parseDIMacroFile(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  size_t v15;
  unint64_t v17;
  char *v18;
  size_t v19;
  char *v20;
  size_t v21;
  unint64_t *v23;
  llvm::LLParser *v24;
  const char *v25;
  uint64_t v26;
  char *v27;
  size_t v28;
  int v29;
  char *v30;
  llvm::MDNode *Impl;
  int v32;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  __int16 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD v43[4];
  __int16 v44;
  _QWORD v45[4];
  __int16 v46;

  v40 = 3;
  v41 = 0;
  v42 = 255;
  v37 = 0;
  v38 = 0;
  v39 = 0xFFFFFFFFLL;
  v35 = 0;
  v36 = 256;
  v34 = 256;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v33 = 0;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v8 = *((_DWORD *)this + 56);
  v32 = a3;
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = *((_QWORD *)this + 30);
      v12 = (v10 & 0x80u) == 0 ? v10 & 0x7F : *((_QWORD *)this + 30);
      if (v12 == 5)
        break;
      if (v12 != 4)
        goto LABEL_53;
      v13 = *((unsigned __int8 *)this + 255);
      v14 = (char *)this + 232;
      if ((v10 & 0x80) != 0)
      {
        v14 = *v9;
        v13 = *((_QWORD *)this + 30);
      }
      if (v13 >= 4)
        v15 = 4;
      else
        v15 = v13;
      if (!memcmp(v14, "type", v15) && v13 == 4)
      {
        if ((sub_1C4FD00C8((uint64_t)this, (uint64_t)&v40) & 1) != 0)
          return 1;
      }
      else
      {
        v17 = v10;
        v18 = (char *)this + 232;
        if ((v10 & 0x80) != 0)
        {
          v18 = *v9;
          v17 = v11;
        }
        if (v17 >= 4)
          v19 = 4;
        else
          v19 = v17;
        if (memcmp(v18, "line", v19) || v17 != 4)
        {
          v27 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v27 = *v9;
            v10 = v11;
          }
          if (v10 >= 4)
            v28 = 4;
          else
            v28 = v10;
          if (memcmp(v27, "file", v28) || v10 != 4)
            goto LABEL_53;
          v23 = &v35;
          v24 = this;
          v25 = "file";
          v26 = 4;
LABEL_49:
          if ((sub_1C4FCEE94((uint64_t)v24, (uint64_t)v25, v26, (uint64_t)v23) & 1) != 0)
            return 1;
          goto LABEL_50;
        }
        if ((sub_1C4FCED30((uint64_t)this, (uint64_t)"line", 4, (uint64_t)&v37) & 1) != 0)
          return 1;
      }
LABEL_50:
      if (*((_DWORD *)this + 56) != 4)
        goto LABEL_56;
      v29 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v29;
      if (v29 != 437)
        goto LABEL_59;
    }
    v20 = (char *)this + 232;
    if ((v10 & 0x80) != 0)
    {
      v20 = *v9;
      v10 = *((_QWORD *)this + 30);
    }
    if (v10 >= 5)
      v21 = 5;
    else
      v21 = v10;
    if (memcmp(v20, "nodes", v21) || v10 != 5)
    {
LABEL_53:
      v43[0] = "invalid field '";
      v43[2] = (char *)this + 232;
      v44 = 1027;
      v45[0] = v43;
      v45[2] = "'";
      v46 = 770;
      if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v45) & 1) != 0)
        return 1;
      goto LABEL_50;
    }
    v23 = &v33;
    v24 = this;
    v25 = "nodes";
    v26 = 5;
    goto LABEL_49;
  }
  if (v8 != 13)
  {
LABEL_59:
    v45[0] = "expected field label here";
    v46 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v45) & 1) != 0)
      return 1;
  }
LABEL_56:
  v30 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if ((_BYTE)v36)
  {
    Impl = llvm::DIMacroFile::getImpl(*(_QWORD **)this, v40, v37, v35, v33, v32, 1);
    result = 0;
    *a2 = Impl;
  }
  else
  {
    v45[0] = "missing required field 'file'";
    v46 = 259;
    return llvm::LLLexer::Error((uint64_t)v6, v30, (llvm::Twine *)v45);
  }
  return result;
}

uint64_t llvm::LLParser::parseDICommonBlock(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  uint64_t *v16;
  llvm::LLParser *v17;
  const char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  size_t v22;
  unint64_t v24;
  char *v25;
  size_t v26;
  char *v27;
  size_t v28;
  int v30;
  char *v31;
  size_t v32;
  char *v33;
  llvm::MDNode *Impl;
  int v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  _QWORD v47[4];
  __int16 v48;
  _QWORD v49[4];
  __int16 v50;

  v45 = 0;
  v46 = 256;
  v43 = 0;
  v44 = 256;
  v41 = 0;
  v42 = 256;
  v40 = 256;
  v36 = 0;
  v38 = 0xFFFFFFFFLL;
  v39 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v37 = 0;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v8 = *((_DWORD *)this + 56);
  v35 = a3;
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = *((_QWORD *)this + 30);
      v12 = (v10 & 0x80u) == 0 ? v10 & 0x7F : *((_QWORD *)this + 30);
      if (v12 != 4)
        break;
      v20 = *((unsigned __int8 *)this + 255);
      v21 = (char *)this + 232;
      if ((v10 & 0x80) != 0)
      {
        v21 = *v9;
        v20 = *((_QWORD *)this + 30);
      }
      if (v20 >= 4)
        v22 = 4;
      else
        v22 = v20;
      if (!memcmp(v21, "name", v22) && v20 == 4)
      {
        if ((sub_1C4FCF3D8((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v41) & 1) != 0)
          return 1;
        goto LABEL_51;
      }
      v24 = v10;
      v25 = (char *)this + 232;
      if ((v10 & 0x80) != 0)
      {
        v25 = *v9;
        v24 = v11;
      }
      if (v24 >= 4)
        v26 = 4;
      else
        v26 = v24;
      if (!memcmp(v25, "file", v26) && v24 == 4)
      {
        v16 = &v39;
        v17 = this;
        v18 = "file";
        v19 = 4;
LABEL_50:
        if ((sub_1C4FCEE94((uint64_t)v17, (uint64_t)v18, v19, (uint64_t)v16) & 1) != 0)
          return 1;
        goto LABEL_51;
      }
      v31 = (char *)this + 232;
      if ((v10 & 0x80) != 0)
      {
        v31 = *v9;
        v10 = v11;
      }
      if (v10 >= 4)
        v32 = 4;
      else
        v32 = v10;
      if (memcmp(v31, "line", v32) || v10 != 4)
      {
LABEL_65:
        v47[0] = "invalid field '";
        v47[2] = (char *)this + 232;
        v48 = 1027;
        v49[0] = v47;
        v49[2] = "'";
        v50 = 770;
        if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v49) & 1) != 0)
          return 1;
        goto LABEL_51;
      }
      if ((sub_1C4FCED30((uint64_t)this, (uint64_t)"line", 4, (uint64_t)&v36) & 1) != 0)
        return 1;
LABEL_51:
      if (*((_DWORD *)this + 56) != 4)
        goto LABEL_68;
      v30 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v30;
      if (v30 != 437)
        goto LABEL_71;
    }
    if (v12 == 11)
    {
      v27 = (char *)this + 232;
      if ((v10 & 0x80) != 0)
      {
        v27 = *v9;
        v10 = *((_QWORD *)this + 30);
      }
      if (v10 >= 0xB)
        v28 = 11;
      else
        v28 = v10;
      if (memcmp(v27, "declaration", v28) || v10 != 11)
        goto LABEL_65;
      v16 = &v43;
      v17 = this;
      v18 = "declaration";
      v19 = 11;
    }
    else
    {
      if (v12 != 5)
        goto LABEL_65;
      v13 = (char *)this + 232;
      if ((v10 & 0x80) != 0)
      {
        v13 = *v9;
        v10 = *((_QWORD *)this + 30);
      }
      v14 = v10 >= 5 ? 5 : v10;
      if (memcmp(v13, "scope", v14) || v10 != 5)
        goto LABEL_65;
      v16 = &v45;
      v17 = this;
      v18 = "scope";
      v19 = 5;
    }
    goto LABEL_50;
  }
  if (v8 != 13)
  {
LABEL_71:
    v49[0] = "expected field label here";
    v50 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v49) & 1) != 0)
      return 1;
  }
LABEL_68:
  v33 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if ((_BYTE)v46)
  {
    Impl = llvm::DICommonBlock::getImpl(*(_QWORD **)this, v45, v43, v41, v39, v36, v35, 1);
    result = 0;
    *a2 = Impl;
  }
  else
  {
    v49[0] = "missing required field 'scope'";
    v50 = 259;
    return llvm::LLLexer::Error((uint64_t)v6, v33, (llvm::Twine *)v49);
  }
  return result;
}

uint64_t llvm::LLParser::parseDIArgList(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  return llvm::LLParser::parseDIArgList(this, a2, a3, 0);
}

uint64_t llvm::LLParser::parseDIStringType(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  const char *v10;
  const char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  size_t v16;
  char *v18;
  size_t v19;
  uint64_t *v21;
  llvm::LLParser *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  unint64_t v27;
  char *v28;
  size_t v29;
  char *v31;
  size_t v32;
  uint64_t *v33;
  llvm::LLParser *v34;
  const char *v35;
  uint64_t v36;
  char *v37;
  size_t v38;
  char *v40;
  size_t v41;
  char *v43;
  size_t v44;
  char *v46;
  size_t v47;
  int v49;
  char v50;
  llvm::MDNode *Impl;
  llvm::MDNode **v52;
  llvm::LLLexer *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  _QWORD v74[4];
  __int16 v75;
  _QWORD v76[4];
  __int16 v77;

  v71 = 18;
  v72 = 0;
  v73 = 0xFFFFLL;
  v69 = 0;
  v70 = 256;
  v67 = 0;
  v68 = 256;
  v65 = 0;
  v66 = 256;
  v64 = 256;
  v61 = 0;
  v62 = -1;
  v63 = 0;
  v58 = 0;
  v59 = 0xFFFFFFFFLL;
  v60 = 0;
  v54 = 0;
  v56 = 255;
  v57 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v55 = 0;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v52 = a2;
  v8 = *((_DWORD *)this + 56);
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    v10 = "stringLengthExpression";
    v11 = "stringLocationExpression";
    v53 = v6;
    while (2)
    {
      v12 = *((unsigned __int8 *)this + 255);
      v13 = *((_QWORD *)this + 30);
      if ((v12 & 0x80u) == 0)
        v14 = v12 & 0x7F;
      else
        v14 = *((_QWORD *)this + 30);
      switch(v14)
      {
        case 3uLL:
          v15 = (char *)this + 232;
          if ((v12 & 0x80) != 0)
          {
            v15 = *v9;
            v12 = *((_QWORD *)this + 30);
          }
          if (v12 >= 3)
            v16 = 3;
          else
            v16 = v12;
          if (memcmp(v15, "tag", v16) || v12 != 3)
            goto LABEL_105;
          if ((sub_1C4FCF23C((uint64_t)this, (uint64_t)&v71) & 1) != 0)
            return 1;
          goto LABEL_100;
        case 4uLL:
          v25 = v11;
          v26 = v10;
          v27 = *((unsigned __int8 *)this + 255);
          v28 = (char *)this + 232;
          if ((v12 & 0x80) != 0)
          {
            v28 = *v9;
            v27 = *((_QWORD *)this + 30);
          }
          if (v27 >= 4)
            v29 = 4;
          else
            v29 = v27;
          if (!memcmp(v28, "name", v29) && v27 == 4)
          {
            v10 = v26;
            v11 = v25;
            v6 = v53;
            if ((sub_1C4FCF3D8((uint64_t)this, (uint64_t)"name", 4, (uint64_t)&v69) & 1) != 0)
              return 1;
          }
          else
          {
            v31 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v31 = *v9;
              v12 = v13;
            }
            if (v12 >= 4)
              v32 = 4;
            else
              v32 = v12;
            v10 = v26;
            v11 = v25;
            v6 = v53;
            if (!memcmp(v31, "size", v32) && v12 == 4)
            {
              v33 = &v60;
              v34 = this;
              v35 = "size";
              v36 = 4;
LABEL_63:
              if ((sub_1C4FCED30((uint64_t)v34, (uint64_t)v35, v36, (uint64_t)v33) & 1) != 0)
                return 1;
            }
            else
            {
LABEL_105:
              v74[0] = "invalid field '";
              v74[2] = (char *)this + 232;
              v75 = 1027;
              v76[0] = v74;
              v76[2] = "'";
              v77 = 770;
              if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v76) & 1) != 0)
                return 1;
            }
          }
LABEL_100:
          if (*((_DWORD *)this + 56) != 4)
            goto LABEL_108;
          v49 = llvm::LLLexer::LexToken(v6);
          *((_DWORD *)this + 56) = v49;
          if (v49 != 437)
            goto LABEL_110;
          continue;
        case 5uLL:
          v37 = (char *)this + 232;
          if ((v12 & 0x80) != 0)
          {
            v37 = *v9;
            v12 = *((_QWORD *)this + 30);
          }
          if (v12 >= 5)
            v38 = 5;
          else
            v38 = v12;
          if (memcmp(v37, "align", v38) || v12 != 5)
            goto LABEL_105;
          v33 = &v57;
          v34 = this;
          v35 = "align";
          v36 = 5;
          goto LABEL_63;
        case 6uLL:
        case 7uLL:
        case 9uLL:
        case 0xAuLL:
        case 0xBuLL:
          goto LABEL_105;
        case 8uLL:
          v40 = (char *)this + 232;
          if ((v12 & 0x80) != 0)
          {
            v40 = *v9;
            v12 = *((_QWORD *)this + 30);
          }
          if (v12 >= 8)
            v41 = 8;
          else
            v41 = v12;
          if (memcmp(v40, "encoding", v41) || v12 != 8)
            goto LABEL_105;
          if ((sub_1C4FCFBD4((uint64_t)this, (uint64_t)&v54) & 1) != 0)
            return 1;
          goto LABEL_100;
        case 0xCuLL:
          v43 = (char *)this + 232;
          if ((v12 & 0x80) != 0)
          {
            v43 = *v9;
            v12 = *((_QWORD *)this + 30);
          }
          if (v12 >= 0xC)
            v44 = 12;
          else
            v44 = v12;
          if (memcmp(v43, "stringLength", v44) || v12 != 12)
            goto LABEL_105;
          v21 = &v67;
          v22 = this;
          v23 = "stringLength";
          v24 = 12;
          goto LABEL_99;
        default:
          if (v14 == 22)
          {
            v46 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v46 = *v9;
              v12 = *((_QWORD *)this + 30);
            }
            if (v12 >= 0x16)
              v47 = 22;
            else
              v47 = v12;
            if (memcmp(v46, v10, v47) || v12 != 22)
              goto LABEL_105;
            v21 = &v65;
            v22 = this;
            v23 = v10;
            v24 = 22;
          }
          else
          {
            if (v14 != 24)
              goto LABEL_105;
            v18 = (char *)this + 232;
            if ((v12 & 0x80) != 0)
            {
              v18 = *v9;
              v12 = *((_QWORD *)this + 30);
            }
            v19 = v12 >= 0x18 ? 24 : v12;
            if (memcmp(v18, v11, v19) || v12 != 24)
              goto LABEL_105;
            v21 = &v63;
            v22 = this;
            v23 = v11;
            v24 = 24;
          }
LABEL_99:
          if ((sub_1C4FCEE94((uint64_t)v22, (uint64_t)v23, v24, (uint64_t)v21) & 1) != 0)
            return 1;
          goto LABEL_100;
      }
    }
  }
  if (v8 != 13)
  {
LABEL_110:
    v76[0] = "expected field label here";
    v77 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)v76) & 1) != 0)
      return 1;
  }
LABEL_108:
  v50 = llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here");
  result = 1;
  if ((v50 & 1) == 0)
  {
    Impl = llvm::DIStringType::getImpl(*(_QWORD **)this, v71, v69, v67, v65, v63, v60, v57, v54, a3, 1);
    result = 0;
    *v52 = Impl;
  }
  return result;
}

uint64_t llvm::LLParser::parseDIGenericSubrange(llvm::LLParser *this, llvm::MDNode **a2, int a3)
{
  llvm::LLLexer *v6;
  uint64_t result;
  int v8;
  char **v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  size_t v14;
  __int128 *v16;
  llvm::LLParser *v17;
  const char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  size_t v22;
  char *v24;
  size_t v25;
  char *v26;
  size_t v27;
  int v29;
  int v30;
  _QWORD *v31;
  llvm::MDNode *Impl;
  _QWORD *v33;
  llvm::MDNode *v34;
  _QWORD *v35;
  llvm::MDNode *v36;
  _QWORD *v37;
  llvm::MDNode *v38;
  llvm::MDNode *v39;
  int v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  char v45;
  int v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  char v51;
  int v52;
  uint64_t v53;
  char v54;
  __int128 v55;
  __int128 v56;
  char v57;
  int v58;
  uint64_t v59;
  char v60;
  __int128 v61;
  __int128 v62;
  char v63;
  int v64;
  _QWORD v65[4];
  __int16 v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  __int16 v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v59 = 0;
  v60 = 0;
  v61 = xmmword_1C85F76B0;
  v62 = xmmword_1C64638F0;
  v63 = 0;
  v64 = 0;
  v53 = 0;
  v54 = 0;
  v55 = xmmword_1C85F76B0;
  v56 = xmmword_1C64638F0;
  v57 = 0;
  v58 = 0;
  v47 = 0;
  v48 = 0;
  v49 = xmmword_1C85F76B0;
  v50 = xmmword_1C64638F0;
  v51 = 0;
  v52 = 0;
  v41 = 0;
  v42 = 0;
  v43 = xmmword_1C85F76B0;
  v44 = xmmword_1C64638F0;
  v45 = 0;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v46 = 0;
  *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  if ((llvm::LLParser::parseToken((uint64_t)this, 12, "expected '(' here") & 1) != 0)
    return 1;
  v40 = a3;
  v8 = *((_DWORD *)this + 56);
  if (v8 == 437)
  {
    v9 = (char **)((char *)this + 232);
    while (1)
    {
      v10 = *((unsigned __int8 *)this + 255);
      v11 = *((_QWORD *)this + 30);
      if ((v10 & 0x80u) == 0)
        v12 = v10 & 0x7F;
      else
        v12 = *((_QWORD *)this + 30);
      switch(v12)
      {
        case 0xAuLL:
          v20 = *((unsigned __int8 *)this + 255);
          v21 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v21 = *v9;
            v20 = *((_QWORD *)this + 30);
          }
          if (v20 >= 0xA)
            v22 = 10;
          else
            v22 = v20;
          if (!memcmp(v21, "lowerBound", v22) && v20 == 10)
          {
            v16 = (__int128 *)&v53;
            v17 = this;
            v18 = "lowerBound";
          }
          else
          {
            v24 = (char *)this + 232;
            if ((v10 & 0x80) != 0)
            {
              v24 = *v9;
              v10 = v11;
            }
            if (v10 >= 0xA)
              v25 = 10;
            else
              v25 = v10;
            if (memcmp(v24, "upperBound", v25) || v10 != 10)
            {
LABEL_56:
              v65[0] = "invalid field '";
              v65[2] = (char *)this + 232;
              v66 = 1027;
              v67 = (uint64_t)v65;
              v69 = "'";
              v70 = 770;
              if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)&v67) & 1) != 0)
                return 1;
              goto LABEL_53;
            }
            v16 = (__int128 *)&v47;
            v17 = this;
            v18 = "upperBound";
          }
          v19 = 10;
          break;
        case 6uLL:
          v26 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v26 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          if (v10 >= 6)
            v27 = 6;
          else
            v27 = v10;
          if (memcmp(v26, "stride", v27) || v10 != 6)
            goto LABEL_56;
          v16 = (__int128 *)&v41;
          v17 = this;
          v18 = "stride";
          v19 = 6;
          break;
        case 5uLL:
          v13 = (char *)this + 232;
          if ((v10 & 0x80) != 0)
          {
            v13 = *v9;
            v10 = *((_QWORD *)this + 30);
          }
          v14 = v10 >= 5 ? 5 : v10;
          if (memcmp(v13, "count", v14) || v10 != 5)
            goto LABEL_56;
          v16 = (__int128 *)&v59;
          v17 = this;
          v18 = "count";
          v19 = 5;
          break;
        default:
          goto LABEL_56;
      }
      if ((sub_1C4FCF570((uint64_t)v17, (uint64_t)v18, v19, v16) & 1) != 0)
        return 1;
LABEL_53:
      if (*((_DWORD *)this + 56) != 4)
        goto LABEL_59;
      v29 = llvm::LLLexer::LexToken(v6);
      *((_DWORD *)this + 56) = v29;
      if (v29 != 437)
        goto LABEL_63;
    }
  }
  if (v8 != 13)
  {
LABEL_63:
    v67 = (uint64_t)"expected field label here";
    v70 = 259;
    if ((llvm::LLLexer::Error((uint64_t)v6, *((char **)this + 27), (llvm::Twine *)&v67) & 1) != 0)
      return 1;
  }
LABEL_59:
  if ((llvm::LLParser::parseToken((uint64_t)this, 13, "expected ')' here") & 1) != 0)
    return 1;
  if (v64 == 2)
  {
    Impl = (llvm::MDNode *)v62;
    v30 = v40;
  }
  else
  {
    v30 = v40;
    if (v64 == 1)
    {
      v31 = *(_QWORD **)this;
      v67 = 17;
      v68 = v59;
      Impl = llvm::DIExpression::getImpl(v31, &v67, 2, 0, 1);
    }
    else
    {
      Impl = 0;
    }
  }
  if (v58 == 2)
  {
    v34 = (llvm::MDNode *)v56;
  }
  else if (v58 == 1)
  {
    v33 = *(_QWORD **)this;
    v67 = 17;
    v68 = v53;
    v34 = llvm::DIExpression::getImpl(v33, &v67, 2, 0, 1);
  }
  else
  {
    v34 = 0;
  }
  if (v52 == 2)
  {
    v36 = (llvm::MDNode *)v50;
  }
  else if (v52 == 1)
  {
    v35 = *(_QWORD **)this;
    v67 = 17;
    v68 = v47;
    v36 = llvm::DIExpression::getImpl(v35, &v67, 2, 0, 1);
  }
  else
  {
    v36 = 0;
  }
  if (v46 == 2)
  {
    v38 = (llvm::MDNode *)v44;
  }
  else if (v46 == 1)
  {
    v37 = *(_QWORD **)this;
    v67 = 17;
    v68 = v41;
    v38 = llvm::DIExpression::getImpl(v37, &v67, 2, 0, 1);
  }
  else
  {
    v38 = 0;
  }
  v39 = llvm::DIGenericSubrange::getImpl(*(_QWORD **)this, (uint64_t)Impl, (uint64_t)v34, (uint64_t)v36, (uint64_t)v38, v30, 1);
  result = 0;
  *a2 = v39;
  return result;
}

uint64_t llvm::LLParser::PerFunctionState::resolveForwardRefBlockAddresses(llvm::LLParser::PerFunctionState *this)
{
  int v2;
  uint64_t ***v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t ****v8;
  uint64_t ***v9;
  int v10;
  int v11;
  unint64_t *v12;
  size_t v13;
  const void *v14;
  unint64_t v15;
  __int128 *p_dst;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  llvm::Type **v24;
  llvm::Function *v25;
  llvm::BasicBlock *v26;
  llvm::Type **v27;
  uint64_t v28;
  char *v29;
  llvm::Type **v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  char *v38;
  __int128 __dst;
  void *v40;
  __int16 v41;
  const llvm::APInt *v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  void *__p[4];
  void *v48[2];
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  char v52;
  __int128 v53;
  int v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v44 = 0;
  v45 = 0;
  memset(__p, 0, sizeof(__p));
  *(_OWORD *)v48 = 0u;
  v49 = 0;
  v50 = 0;
  v51 = 1;
  v52 = 0;
  v43 = 64;
  v42 = 0;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&__dst, &v42);
  v53 = __dst;
  v54 = (int)v40;
  v55 = BYTE4(v40) & 0xF;
  v56 = 0;
  v57 = 0;
  v2 = *((_DWORD *)this + 22);
  if (v2 != -1)
  {
    v44 = 1;
    v46 = v2;
    goto LABEL_22;
  }
  v44 = 3;
  v3 = (uint64_t ***)*((_QWORD *)this + 1);
  if ((*((_BYTE *)v3 + 23) & 0x10) == 0)
  {
    v13 = 0;
    HIBYTE(v40) = 0;
    p_dst = &__dst;
    goto LABEL_19;
  }
  v4 = ***v3;
  v5 = *(_QWORD *)(v4 + 152);
  v6 = *(unsigned int *)(v4 + 168);
  if (!(_DWORD)v6)
    goto LABEL_10;
  LODWORD(v7) = (v6 - 1) & ((v3 >> 4) ^ (v3 >> 9));
  v8 = (uint64_t ****)(v5 + 16 * v7);
  v9 = *v8;
  if (*v8 != v3)
  {
    v10 = 1;
    while (v9 != (uint64_t ***)-4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & (v6 - 1);
      v9 = *(uint64_t ****)(v5 + 16 * v7);
      if (v9 == v3)
      {
        v8 = (uint64_t ****)(v5 + 16 * v7);
        goto LABEL_11;
      }
    }
LABEL_10:
    v8 = (uint64_t ****)(v5 + 16 * v6);
  }
LABEL_11:
  v12 = (unint64_t *)v8[1];
  v15 = *v12;
  v14 = v12 + 2;
  v13 = v15;
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v13 >= 0x17)
  {
    v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v17 = v13 | 7;
    v18 = v17 + 1;
    p_dst = (__int128 *)operator new(v17 + 1);
    *((_QWORD *)&__dst + 1) = v13;
    v40 = (void *)(v18 | 0x8000000000000000);
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v40) = v13;
    p_dst = &__dst;
    if (!v13)
      goto LABEL_19;
  }
  memmove(p_dst, v14, v13);
LABEL_19:
  *((_BYTE *)p_dst + v13) = 0;
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  *(_OWORD *)&__p[1] = __dst;
  __p[3] = v40;
LABEL_22:
  v19 = *(_QWORD *)this;
  v20 = sub_1C61CEACC(*(_QWORD *)this + 1080, (uint64_t)&v44);
  if ((_QWORD *)(v19 + 1088) == v20)
  {
LABEL_37:
    v34 = 0;
    goto LABEL_39;
  }
  v21 = (uint64_t)v20;
  v22 = (_QWORD *)v20[23];
  v23 = v20 + 24;
  if (v22 == v20 + 24)
  {
LABEL_36:
    sub_1C61CEB44((uint64_t **)(v19 + 1080), v21);
    goto LABEL_37;
  }
  while (1)
  {
    v24 = (llvm::Type **)v22[23];
    v25 = *((_DWORD *)v22 + 8) == 2
        ? (llvm::Function *)llvm::LLParser::PerFunctionState::getBB((uint64_t)this, v22 + 8, (char *)v22[5])
        : (llvm::Function *)llvm::LLParser::PerFunctionState::getBB((uint64_t)this, *((_DWORD *)v22 + 12), (char *)v22[5]);
    if (!v25)
      break;
    v27 = (llvm::Type **)llvm::BlockAddress::get(*((llvm::BlockAddress **)this + 1), v25, v26);
    v28 = *(_QWORD *)this;
    v29 = (char *)v22[5];
    v41 = 260;
    *(_QWORD *)&__dst = v22 + 8;
    v30 = llvm::LLParser::checkValidVariableType(v28, v29, (uint64_t)&__dst, *v24, v27);
    if (!v30)
    {
      v34 = 1;
      goto LABEL_39;
    }
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v24, (llvm::Value *)v30, (llvm::Value *)1);
    llvm::GlobalValue::eraseFromParent((llvm::GlobalValue *)v24);
    v31 = (_QWORD *)v22[1];
    if (v31)
    {
      do
      {
        v32 = v31;
        v31 = (_QWORD *)*v31;
      }
      while (v31);
    }
    else
    {
      do
      {
        v32 = (_QWORD *)v22[2];
        v33 = *v32 == (_QWORD)v22;
        v22 = v32;
      }
      while (!v33);
    }
    v22 = v32;
    if (v32 == v23)
    {
      v19 = *(_QWORD *)this;
      goto LABEL_36;
    }
  }
  v37 = *(_QWORD *)this;
  v38 = (char *)v22[5];
  *(_QWORD *)&__dst = "referenced value is not a basic block";
  v41 = 259;
  v34 = llvm::LLLexer::Error(v37 + 168, v38, (llvm::Twine *)&__dst);
LABEL_39:
  v35 = v56;
  v56 = 0;
  if (v35)
    MEMORY[0x1CAA32F9C](v35, 0x20C8093837F09);
  if ((_UNKNOWN *)v53 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)&v53 + 1);
  }
  else if ((*(_DWORD *)(v53 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v53 + 1))
  {
    MEMORY[0x1CAA32F9C](*((_QWORD *)&v53 + 1), 0x1000C8000313F17);
  }
  if (v51 >= 0x41 && v50)
    MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
  if (SHIBYTE(v49) < 0)
    operator delete(v48[0]);
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  return v34;
}

uint64_t llvm::LLParser::parseBasicBlock(llvm::LLParser *this, llvm::LLParser::PerFunctionState *a2)
{
  llvm::LLLexer *v4;
  char *v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  llvm::BasicBlock *v13;
  int v14;
  unint64_t v15;
  int v16;
  llvm::Instruction *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  llvm::ValueSymbolTable *v21;
  uint64_t v22;
  llvm::ValueSymbolTable *v23;
  uint64_t v24;
  llvm::Instruction *v26;
  std::string v27;
  std::string v28;

  memset(&v28, 0, sizeof(v28));
  v4 = (llvm::LLParser *)((char *)this + 168);
  v5 = (char *)*((_QWORD *)this + 27);
  v6 = *((_DWORD *)this + 56);
  if (v6 == 432)
  {
    v8 = *((_DWORD *)this + 64);
    v7 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  }
  else
  {
    if (v6 != 437)
    {
      v8 = -1;
      goto LABEL_7;
    }
    std::string::operator=(&v28, (const std::string *)((char *)this + 232));
    v7 = llvm::LLLexer::LexToken(v4);
    v8 = -1;
  }
  *((_DWORD *)this + 56) = v7;
LABEL_7:
  v9 = llvm::LLParser::PerFunctionState::defineBB((uint64_t *)a2, (uint64_t)&v28, v8, v5);
  if (!v9)
  {
    v24 = 1;
    goto LABEL_37;
  }
  v10 = v9;
  memset(&v27, 0, sizeof(v27));
  v11 = (uint64_t *)(v9 + 40);
  v26 = 0;
  while (1)
  {
    v12 = (char *)*((_QWORD *)this + 27);
    MEMORY[0x1CAA32ABC](&v27, "");
    v14 = *((_DWORD *)this + 56);
    if (v14 == 440)
    {
      std::string::operator=(&v27, (const std::string *)((char *)this + 232));
      *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v4);
      if ((llvm::LLParser::parseToken((uint64_t)this, 3, "expected '=' after instruction name") & 1) != 0)
        break;
LABEL_11:
      v15 = 0xFFFFFFFFLL;
      goto LABEL_12;
    }
    if (v14 != 434)
      goto LABEL_11;
    v15 = *((unsigned int *)this + 64);
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v4);
    if ((llvm::LLParser::parseToken((uint64_t)this, 3, "expected '=' after instruction id") & 1) != 0)
      break;
LABEL_12:
    v16 = llvm::LLParser::parseInstruction(this, &v26, v13, a2);
    if (v16)
    {
      if (v16 != 2)
        break;
      v17 = v26;
      *((_QWORD *)v26 + 5) = v10;
      *(_WORD *)(v10 + 18) &= ~0x8000u;
      if ((*((_BYTE *)v17 + 23) & 0x10) != 0)
      {
        v20 = *(_QWORD *)(v10 + 56);
        if (v20)
        {
          v21 = *(llvm::ValueSymbolTable **)(v20 + 104);
          if (v21)
            llvm::ValueSymbolTable::reinsertValue(v21, v17);
        }
      }
      v18 = *v11;
      *((_QWORD *)v17 + 4) = v11;
      *((_QWORD *)v17 + 3) = v18;
      *(_QWORD *)(v18 + 8) = (char *)v17 + 24;
      *v11 = (uint64_t)v17 + 24;
    }
    else
    {
      v17 = v26;
      *((_QWORD *)v26 + 5) = v10;
      *(_WORD *)(v10 + 18) &= ~0x8000u;
      if ((*((_BYTE *)v17 + 23) & 0x10) != 0)
      {
        v22 = *(_QWORD *)(v10 + 56);
        if (v22)
        {
          v23 = *(llvm::ValueSymbolTable **)(v22 + 104);
          if (v23)
            llvm::ValueSymbolTable::reinsertValue(v23, v17);
        }
      }
      v19 = *v11;
      *((_QWORD *)v17 + 3) = *v11;
      *((_QWORD *)v17 + 4) = v11;
      *(_QWORD *)(v19 + 8) = (char *)v17 + 24;
      *v11 = (uint64_t)v17 + 24;
      if (*((_DWORD *)this + 56) != 4)
        goto LABEL_20;
      *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v4);
    }
    if ((llvm::LLParser::parseInstructionMetadata((char **)this, v17) & 1) != 0)
      break;
LABEL_20:
    if ((llvm::LLParser::PerFunctionState::setInstName((uint64_t **)a2, v15, (uint64_t)&v27, v12, v17) & 1) != 0)
      break;
    if (*((unsigned __int8 *)v17 + 16) - 29 <= 0xA)
    {
      v24 = 0;
      goto LABEL_35;
    }
  }
  v24 = 1;
LABEL_35:
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
LABEL_37:
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  return v24;
}

unint64_t llvm::LLParser::parseInstruction(llvm::LLParser *this, llvm::Instruction **a2, llvm::BasicBlock *a3, llvm::LLParser::PerFunctionState *a4)
{
  llvm::LLLexer *v5;
  int v6;
  char *v9;
  int v10;
  int v11;
  llvm::BasicBlock *v12;
  int v13;
  llvm::LLParser *v15;
  uint64_t *v16;
  const llvm::APInt *v17;
  int v18;
  char *v19;
  llvm::LLLexer *v20;
  char *v21;
  uint64_t v22;
  int v24;
  llvm::Instruction *v25;
  char v26;
  int v27;
  int v28;
  int v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  __int16 v33;

  v5 = (llvm::LLParser *)((char *)this + 168);
  v6 = *((_DWORD *)this + 56);
  if (!v6)
  {
    v32 = "found end of file when expecting more instructions";
    v33 = 259;
    v19 = (char *)*((_QWORD *)this + 27);
    v20 = (llvm::LLParser *)((char *)this + 168);
    return llvm::LLLexer::Error((uint64_t)v20, v19, (llvm::Twine *)&v32);
  }
  v9 = (char *)*((_QWORD *)this + 27);
  v10 = *((_DWORD *)this + 64);
  v11 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  *((_DWORD *)this + 56) = v11;
  if (v6 <= 275)
  {
    switch(v6)
    {
      case ';':
        v15 = this;
        v16 = (uint64_t *)a2;
        v17 = a4;
        v18 = 1;
        return llvm::LLParser::parseCall((uint64_t)v15, v16, v17, v18);
      case '<':
        v15 = this;
        v16 = (uint64_t *)a2;
        v17 = a4;
        v18 = 2;
        return llvm::LLParser::parseCall((uint64_t)v15, v16, v17, v18);
      case '=':
        v15 = this;
        v16 = (uint64_t *)a2;
        v17 = a4;
        v18 = 3;
        return llvm::LLParser::parseCall((uint64_t)v15, v16, v17, v18);
    }
LABEL_77:
    v30 = "expected instruction opcode";
LABEL_78:
    v32 = v30;
    v33 = 259;
    v20 = v5;
    v19 = v9;
    return llvm::LLLexer::Error((uint64_t)v20, v19, (llvm::Twine *)&v32);
  }
  v13 = v11;
  switch(v6)
  {
    case 276:
      v24 = sub_1C61CAA2C((uint64_t)this);
      v22 = 1;
      if ((llvm::LLParser::parseUnaryOp(this, a2, a4, v10, 1) & 1) != 0)
        return v22;
      goto LABEL_31;
    case 277:
    case 279:
    case 281:
    case 289:
      v27 = v11;
      if (v11 == 85)
      {
        v27 = llvm::LLLexer::LexToken(v5);
        *((_DWORD *)this + 56) = v27;
      }
      v28 = v27;
      if (v27 == 86)
      {
        v28 = llvm::LLLexer::LexToken(v5);
        *((_DWORD *)this + 56) = v28;
      }
      if (v13 == 85)
        goto LABEL_40;
      if (v28 == 85)
      {
        *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v5);
LABEL_40:
        if ((llvm::LLParser::parseArithmetic(this, a2, a4, v10, 0) & 1) != 0)
          return 1;
        *((_BYTE *)*a2 + 17) |= 2u;
        if (v27 != 86)
          return 0;
        goto LABEL_76;
      }
      v31 = llvm::LLParser::parseArithmetic(this, a2, a4, v10, 0);
      v22 = v31;
      if (v27 == 86 && (v31 & 1) == 0)
      {
LABEL_76:
        v22 = 0;
        v25 = *a2;
        v26 = *((_BYTE *)*a2 + 17) | 4;
        goto LABEL_82;
      }
      break;
    case 278:
    case 280:
    case 282:
    case 285:
    case 288:
      v24 = sub_1C61CAA2C((uint64_t)this);
      v22 = 1;
      if ((llvm::LLParser::parseArithmetic(this, a2, a4, v10, 1) & 1) != 0)
        return v22;
      goto LABEL_31;
    case 283:
    case 284:
    case 290:
    case 291:
      if (v11 != 87)
        return llvm::LLParser::parseArithmetic(this, a2, a4, v10, 0);
      *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v5);
      if ((llvm::LLParser::parseArithmetic(this, a2, a4, v10, 0) & 1) != 0)
        return 1;
      v22 = 0;
      v25 = *a2;
      v26 = *((_BYTE *)*a2 + 17) | 2;
      goto LABEL_82;
    case 286:
    case 287:
      return llvm::LLParser::parseArithmetic(this, a2, a4, v10, 0);
    case 292:
    case 293:
    case 294:
      return llvm::LLParser::parseLogical(this, a2, a4, v10);
    case 295:
      return llvm::LLParser::parseCompare((char **)this, a2, a4, v10);
    case 296:
      v24 = sub_1C61CAA2C((uint64_t)this);
      if ((llvm::LLParser::parseCompare((char **)this, a2, a4, v10) & 1) != 0)
        return 1;
LABEL_31:
      if (!v24)
        return 0;
      v22 = 0;
      v25 = *a2;
      v26 = *((_BYTE *)*a2 + 17) | (2 * v24);
      goto LABEL_82;
    case 297:
      v29 = sub_1C61CAA2C((uint64_t)this);
      v22 = llvm::LLParser::parsePHI(this, a2, a4);
      if ((_DWORD)v22)
        return v22;
      if (!v29)
        return 0;
      if (sub_1C4774A9C((uint64_t)*a2))
        goto LABEL_81;
      v30 = "fast-math-flags specified for phi without floating-point scalar or vector return type";
      goto LABEL_78;
    case 298:
      v15 = this;
      v16 = (uint64_t *)a2;
      v17 = a4;
      v18 = 0;
      return llvm::LLParser::parseCall((uint64_t)v15, v16, v17, v18);
    case 299:
    case 300:
    case 301:
    case 302:
    case 303:
    case 304:
    case 305:
    case 306:
    case 307:
    case 308:
    case 309:
    case 310:
    case 311:
      return llvm::LLParser::parseCast(this, a2, a4, v10);
    case 312:
      v29 = sub_1C61CAA2C((uint64_t)this);
      if ((llvm::LLParser::parseSelect(this, a2, a4) & 1) != 0)
        return 1;
      if (!v29)
        return 0;
      if (!sub_1C4774A9C((uint64_t)*a2))
      {
        v30 = "fast-math-flags specified for select without floating-point scalar or vector return type";
        goto LABEL_78;
      }
LABEL_81:
      v22 = 0;
      v25 = *a2;
      v26 = *((_BYTE *)*a2 + 17) | (2 * v29);
LABEL_82:
      *((_BYTE *)v25 + 17) = v26;
      return v22;
    case 313:
      return llvm::LLParser::parseVAArg((uint64_t **)this, a2, a4);
    case 314:
      return llvm::LLParser::parseLandingPad((char **)this, a2, a4);
    case 319:
      return llvm::LLParser::parseRet(this, a2, v12, a4);
    case 320:
      return llvm::LLParser::parseBr(this, a2, a4);
    case 321:
      return llvm::LLParser::parseSwitch(this, a2, a4);
    case 322:
      return llvm::LLParser::parseIndirectBr(this, a2, a4);
    case 323:
      return llvm::LLParser::parseInvoke(this, a2, a4);
    case 324:
      return llvm::LLParser::parseResume((uint64_t **)this, a2, a4);
    case 325:
      v21 = (char *)operator new(0x40uLL);
      v22 = 0;
      *(_QWORD *)v21 = **(_QWORD **)this + 1576;
      *((_QWORD *)v21 + 1) = 0;
      v21[16] = 35;
      *(_OWORD *)(v21 + 17) = 0u;
      *(_OWORD *)(v21 + 33) = 0u;
      *(_OWORD *)(v21 + 44) = 0u;
      *a2 = (llvm::Instruction *)v21;
      return v22;
    case 326:
      return llvm::LLParser::parseCleanupRet((llvm::Type **)this, a2, a4);
    case 327:
      return llvm::LLParser::parseCatchSwitch(this, a2, a4);
    case 328:
      return llvm::LLParser::parseCatchRet((llvm::Type **)this, a2, a4);
    case 329:
      return llvm::LLParser::parseCatchPad(this, a2, a4);
    case 330:
      return llvm::LLParser::parseCleanupPad(this, a2, a4);
    case 331:
      return llvm::LLParser::parseCallBr(this, a2, a4);
    case 332:
      return llvm::LLParser::parseAlloc(this, a2, a4);
    case 333:
      return llvm::LLParser::parseLoad(this, a2, a4);
    case 334:
      return llvm::LLParser::parseStore(this, a2, a4);
    case 335:
      return llvm::LLParser::parseFence(this, a2, v12);
    case 336:
      return llvm::LLParser::parseCmpXchg(this, a2, a4);
    case 337:
      return llvm::LLParser::parseAtomicRMW(this, a2, a4);
    case 338:
      return llvm::LLParser::parseGetElementPtr(this, a2, a4);
    case 339:
      return llvm::LLParser::parseExtractElement(this, a2, a4);
    case 340:
      return llvm::LLParser::parseInsertElement(this, a2, a4);
    case 341:
      return llvm::LLParser::parseShuffleVector(this, a2, a4);
    case 342:
      return llvm::LLParser::parseExtractValue(this, a2, a4);
    case 343:
      return llvm::LLParser::parseInsertValue(this, a2, a4);
    case 347:
      return llvm::LLParser::parseFreeze((uint64_t **)this, a2, a4);
    default:
      goto LABEL_77;
  }
  return v22;
}

uint64_t llvm::LLParser::parseRet(llvm::LLParser *this, llvm::Instruction **a2, llvm::BasicBlock *a3, llvm::LLParser::PerFunctionState *a4)
{
  char *v7;
  uint64_t v8;
  llvm::Type *v9;
  _QWORD *v10;
  char *v11;
  llvm::Value *v13;
  llvm::LLVMContext *v14;
  _DWORD *v15;
  llvm::Instruction *v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  llvm::Value *v21;
  std::string v22;
  std::string v23;
  void *__p[2];
  std::string::size_type v25;
  llvm::Type *v26;
  _QWORD v27[4];
  __int16 v28;

  v7 = (char *)*((_QWORD *)this + 27);
  v26 = 0;
  v27[0] = "expected type";
  v28 = 259;
  v8 = 1;
  if ((llvm::LLParser::parseType(this, &v26, (const llvm::Twine *)v27, 1) & 1) == 0)
  {
    v9 = **(llvm::Type ***)(*(_QWORD *)(*((_QWORD *)a4 + 1) + 24) + 16);
    if (*((_BYTE *)v26 + 8) == 7)
    {
      if (*((_BYTE *)v9 + 8) == 7)
      {
        v10 = *(_QWORD **)this;
        v11 = (char *)operator new(0x40uLL);
        v8 = 0;
        *(_QWORD *)v11 = *v10 + 1576;
        *((_QWORD *)v11 + 1) = 0;
        v11[16] = 29;
        *(_OWORD *)(v11 + 44) = 0u;
        *(_OWORD *)(v11 + 33) = 0u;
        *(_OWORD *)(v11 + 17) = 0u;
        *a2 = (llvm::Instruction *)v11;
        return v8;
      }
    }
    else
    {
      v21 = 0;
      if ((llvm::LLParser::parseValue((uint64_t **)this, v26, &v21, a4) & 1) != 0)
        return 1;
      v13 = v21;
      if (v9 == *(llvm::Type **)v21)
      {
        v14 = *(llvm::LLVMContext **)this;
        v15 = operator new(0x60uLL);
        v15[13] = v15[13] & 0x38000000 | 1;
        v16 = (llvm::Instruction *)(v15 + 8);
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = 0;
        *((_QWORD *)v15 + 3) = v15 + 8;
        llvm::ReturnInst::ReturnInst((llvm::ReturnInst *)(v15 + 8), v14, v13, 0);
        v8 = 0;
        *a2 = v16;
        return v8;
      }
    }
    sub_1C4FB7C44((uint64_t)&v22, v9);
    v17 = std::string::insert(&v22, 0, "value doesn't match function result type '");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v23.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v23, "'");
    v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v25 = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v28 = 260;
    v27[0] = __p;
    v8 = llvm::LLLexer::Error((uint64_t)this + 168, v7, (llvm::Twine *)v27);
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
  }
  return v8;
}

uint64_t llvm::LLParser::parseBr(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  char *v6;
  uint64_t v7;
  llvm::Value *v8;
  BOOL v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  llvm::BasicBlock *v14;
  llvm::BasicBlock *v15;
  _DWORD *v16;
  uint64_t v17;
  llvm::BranchInst *v18;
  _QWORD *v19;
  llvm::Instruction *v20;
  llvm::Value *v21[4];
  __int16 v22;
  llvm::Value *v23;
  llvm::Value *v24;
  char *v25;
  char *v26;

  v24 = 0;
  v25 = 0;
  v6 = (char *)*((_QWORD *)this + 27);
  v26 = v6;
  if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v24, a3) & 1) != 0)
    return 1;
  v8 = v24;
  if (v24)
    v9 = *((_BYTE *)v24 + 16) == 22;
  else
    v9 = 0;
  if (v9)
  {
    v10 = (char *)operator new(0x60uLL);
    *((_DWORD *)v10 + 13) = *((_DWORD *)v10 + 13) & 0x38000000 | 1;
    *(_QWORD *)v10 = 0;
    *((_QWORD *)v10 + 2) = 0;
    *((_QWORD *)v10 + 1) = 0;
    *((_QWORD *)v10 + 4) = ***(_QWORD ***)v8 + 1576;
    *((_QWORD *)v10 + 3) = v10 + 32;
    *((_QWORD *)v10 + 5) = 0;
    v10[48] = 30;
    v10[49] = 0;
    *((_WORD *)v10 + 25) = 0;
    *((_DWORD *)v10 + 13) = 1;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *((_DWORD *)v10 + 22) = 0;
    v11 = (_QWORD *)((char *)v8 + 8);
    v12 = *((_QWORD *)v8 + 1);
    *(_QWORD *)v10 = v8;
    *((_QWORD *)v10 + 1) = v12;
    if (v12)
      *(_QWORD *)(v12 + 16) = v10 + 8;
    v7 = 0;
    *((_QWORD *)v10 + 2) = v11;
    *v11 = v10;
    *a2 = (llvm::Instruction *)(v10 + 32);
  }
  else
  {
    if (*(_QWORD *)v24 != **(_QWORD **)this + 1888)
    {
      v21[0] = (llvm::Value *)"branch condition must have 'i1' type";
      v22 = 259;
      return llvm::LLLexer::Error((uint64_t)this + 168, v6, (llvm::Twine *)v21);
    }
    if ((llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' after branch condition") & 1) != 0)
      return 1;
    v21[0] = 0;
    if ((llvm::LLParser::parseTypeAndBasicBlock((uint64_t)this, v21, &v26, a3) & 1) != 0)
      return 1;
    if ((llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' after true destination") & 1) != 0)
      return 1;
    v23 = 0;
    if ((llvm::LLParser::parseTypeAndBasicBlock((uint64_t)this, &v23, &v25, a3) & 1) != 0)
      return 1;
    v14 = v21[0];
    v15 = v23;
    v16 = operator new(0xA0uLL);
    v17 = 0;
    v18 = (llvm::BranchInst *)(v16 + 24);
    v16[29] = v16[29] & 0x38000000 | 3;
    do
    {
      v19 = &v16[v17];
      *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      v19[3] = v18;
      v17 += 8;
    }
    while (v17 != 24);
    v20 = llvm::BranchInst::BranchInst(v18, v14, v15, v8, 0);
    v7 = 0;
    *a2 = v20;
  }
  return v7;
}

uint64_t llvm::LLParser::parseSwitch(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  char *v6;
  uint64_t v7;
  llvm::Value *v9;
  llvm::Value *v10;
  int v11;
  char *v12;
  llvm::Instruction *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  llvm::Value *v17;
  char v18;
  llvm::Value *v19;
  uint64_t v20;
  llvm::Value **v21;
  char *v22;
  char *v23;
  char *v24[4];
  __int16 v25;
  llvm::Value *v26;
  llvm::Value *v27;
  _BYTE *v28;
  _BYTE *v29;
  uint64_t v30;
  int v31;
  _BYTE v32[256];
  llvm::Value *v33;
  llvm::Value *v34;
  char *v35;
  void *v36;
  uint64_t v37;
  _WORD v38[256];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v34 = 0;
  v35 = 0;
  v6 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v34, a3) & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' after switch condition") & 1) != 0)
    return 1;
  v33 = 0;
  if ((llvm::LLParser::parseTypeAndBasicBlock((uint64_t)this, &v33, &v35, a3) & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 6, "expected '[' with switch table") & 1) != 0)
  {
    return 1;
  }
  v9 = v34;
  if (*(_BYTE *)(*(_QWORD *)v34 + 8) == 13)
  {
    v28 = v32;
    v29 = v32;
    v30 = 32;
    v31 = 0;
    v36 = v38;
    v37 = 0x2000000000;
    if (*((_DWORD *)this + 56) == 7)
    {
LABEL_9:
      *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
      v10 = v33;
      v11 = v37;
      v12 = (char *)operator new(0x48uLL);
      *(_QWORD *)v12 = 0;
      *((_QWORD *)v12 + 1) = ***(_QWORD ***)v9 + 1576;
      *((_QWORD *)v12 + 2) = 0;
      v13 = (llvm::Instruction *)(v12 + 8);
      v12[24] = 31;
      v12[25] = 0;
      *((_WORD *)v12 + 13) = 0;
      *((_DWORD *)v12 + 7) = 0x40000000;
      *((_OWORD *)v12 + 2) = 0u;
      *((_OWORD *)v12 + 3) = 0u;
      *((_DWORD *)v12 + 16) = 0;
      llvm::SwitchInst::init((uint64_t)(v12 + 8), (uint64_t)v9, (uint64_t)v10, 2 * v11 + 2);
      if ((_DWORD)v37)
      {
        v14 = 0;
        v15 = 16 * v37;
        do
        {
          llvm::SwitchInst::addCase(v13, *(llvm::ConstantInt **)((char *)v36 + v14), *(llvm::BasicBlock **)((char *)v36 + v14 + 8));
          v14 += 16;
        }
        while (v15 != v14);
      }
      v7 = 0;
      *a2 = v13;
    }
    else
    {
      while (1)
      {
        v26 = 0;
        v27 = 0;
        v16 = (char *)*((_QWORD *)this + 27);
        if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v27, a3) & 1) != 0
          || (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' after case value") & 1) != 0
          || (v24[0] = 0, (llvm::LLParser::parseTypeAndBasicBlock((uint64_t)this, &v26, v24, a3) & 1) != 0))
        {
          v7 = 1;
          goto LABEL_23;
        }
        v17 = v27;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v28, (uint64_t)v27);
        if (!v18)
        {
          v22 = (char *)this + 168;
          v23 = "duplicate case value in switch";
          goto LABEL_30;
        }
        if (*((_BYTE *)v17 + 16) != 16)
          break;
        v19 = v26;
        v20 = v37;
        if (v37 >= (unint64_t)HIDWORD(v37))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v36, (uint64_t)v38, v37 + 1, 16);
          v20 = v37;
        }
        v21 = (llvm::Value **)((char *)v36 + 16 * v20);
        *v21 = v17;
        v21[1] = v19;
        LODWORD(v37) = v37 + 1;
        if (*((_DWORD *)this + 56) == 7)
          goto LABEL_9;
      }
      v22 = (char *)this + 168;
      v23 = "case value is not a constant integer";
LABEL_30:
      v24[0] = v23;
      v25 = 259;
      v7 = llvm::LLLexer::Error((uint64_t)v22, v16, (llvm::Twine *)v24);
    }
LABEL_23:
    if (v36 != v38)
      free(v36);
    if (v29 != v28)
      free(v29);
  }
  else
  {
    v36 = "switch condition must have integer type";
    v38[8] = 259;
    return llvm::LLLexer::Error((uint64_t)this + 168, v6, (llvm::Twine *)&v36);
  }
  return v7;
}

uint64_t llvm::LLParser::parseIndirectBr(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  char *v6;
  uint64_t v7;
  int v9;
  _DWORD *v10;
  llvm::IndirectBrInst *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::Value *v14;
  unsigned int v15;
  llvm::Value *v16;
  uint64_t v17;
  llvm::Value *v18;
  llvm::Value *v19;
  llvm::Value *v20;
  char *v21;
  void *v22;
  uint64_t v23;
  _WORD v24[64];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v6 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v20, a3) & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' after indirectbr address") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 6, "expected '[' with indirectbr") & 1) != 0)
  {
    return 1;
  }
  if (*(_BYTE *)(*(_QWORD *)v20 + 8) != 15)
  {
    v22 = "indirectbr address must have pointer type";
    v24[8] = 259;
    return llvm::LLLexer::Error((uint64_t)this + 168, v6, (llvm::Twine *)&v22);
  }
  v18 = v20;
  v22 = v24;
  v23 = 0x1000000000;
  if (*((_DWORD *)this + 56) != 7)
  {
    v19 = 0;
    v21 = 0;
    if ((llvm::LLParser::parseTypeAndBasicBlock((uint64_t)this, &v19, &v21, a3) & 1) != 0)
      goto LABEL_15;
    v14 = v19;
    v15 = v23;
    if (v23 >= HIDWORD(v23))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v23 + 1, 8);
      v15 = v23;
    }
    *((_QWORD *)v22 + v15) = v14;
    while (1)
    {
      LODWORD(v23) = v23 + 1;
      if (*((_DWORD *)this + 56) != 4)
        break;
      *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
      v21 = 0;
      if ((llvm::LLParser::parseTypeAndBasicBlock((uint64_t)this, &v19, &v21, a3) & 1) != 0)
        goto LABEL_15;
      v16 = v19;
      v17 = v23;
      if (v23 >= (unint64_t)HIDWORD(v23))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, (uint64_t)v24, v23 + 1, 8);
        v17 = v23;
      }
      *((_QWORD *)v22 + v17) = v16;
    }
  }
  if ((llvm::LLParser::parseToken((uint64_t)this, 7, "expected ']' at end of block list") & 1) == 0)
  {
    v9 = v23;
    v10 = operator new(0x48uLL);
    v11 = (llvm::IndirectBrInst *)(v10 + 2);
    v10[7] = v10[7] & 0x38000000 | 0x40000000;
    *(_QWORD *)v10 = 0;
    llvm::IndirectBrInst::IndirectBrInst((llvm::IndirectBrInst *)(v10 + 2), v18, v9, 0);
    if ((_DWORD)v23)
    {
      v12 = 0;
      v13 = 8 * v23;
      do
      {
        llvm::IndirectBrInst::addDestination(v11, *(llvm::BasicBlock **)((char *)v22 + v12));
        v12 += 8;
      }
      while (v13 != v12);
    }
    v7 = 0;
    *a2 = v11;
    goto LABEL_16;
  }
LABEL_15:
  v7 = 1;
LABEL_16:
  if (v22 != v24)
    free(v22);
  return v7;
}

unint64_t llvm::LLParser::parseInvoke(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  char *v6;
  unint64_t Sorted;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  llvm::PointerType *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v26;
  uint64_t v27;
  llvm::Type **v28;
  llvm::Type **v29;
  uint64_t Attribute;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t **v35;
  uint64_t v36;
  uint64_t v37;
  llvm::Type *v38;
  llvm::Type *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  char *v47;
  char *v48;
  std::string *v49;
  std::string::size_type v50;
  std::string *v51;
  std::string::size_type v52;
  char v53;
  char *v54;
  uint64_t v55;
  llvm::PointerType *v56;
  llvm::PointerType *v57;
  unint64_t v58;
  char *v59;
  int v60;
  std::string v61;
  std::string v62;
  void *v63[2];
  std::string::size_type v64;
  uint64_t *v65[4];
  __int16 v66;
  uint64_t v67;
  llvm::Value *v68;
  llvm::Value *v69;
  llvm::Type *v70;
  unsigned int v71;
  unsigned int v72;
  char *v73;
  void *v74;
  char *v75;
  uint64_t v76;
  void *__src;
  size_t __n;
  _BYTE v79[64];
  void *v80;
  uint64_t v81;
  _BYTE v82[16];
  __int16 v83;
  void *v84;
  uint64_t v85;
  _BYTE v86[96];
  void *v87;
  uint64_t v88;
  int v89;
  char v90;
  int v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 __p;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  char v99;
  _DWORD *v100;
  uint64_t v101;
  int v102;
  char v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  _BYTE v109[64];
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  _QWORD v113[11];

  v113[8] = *MEMORY[0x1E0C80C00];
  v6 = (char *)*((_QWORD *)this + 27);
  v110 = **((_QWORD **)this + 41);
  v111 = v113;
  v112 = 0x800000000;
  v106 = v110;
  v107 = v109;
  v108 = 0x800000000;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v73 = 0;
  v72 = 0;
  v70 = 0;
  v91 = 0;
  v93 = 0u;
  v94 = 0u;
  __p = 0u;
  v97 = 0;
  v92 = 0;
  v96 = 0;
  LOBYTE(Sorted) = 1;
  v98 = 1;
  v99 = 0;
  LODWORD(v85) = 64;
  v84 = 0;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v87, (const llvm::APInt **)&v84);
  v100 = v87;
  v101 = v88;
  v102 = v89;
  v103 = v90 & 0xF;
  v104 = 0;
  v105 = 0;
  v87 = &v89;
  v88 = 0x1000000000;
  v84 = v86;
  v85 = 0x200000000;
  if ((llvm::LLParser::parseOptionalCallingConv(this, &v72) & 1) != 0)
    goto LABEL_3;
  if ((llvm::LLParser::parseOptionalParamOrReturnAttrs(this, (llvm::AttrBuilder *)&v110, 0) & 1) != 0)
    goto LABEL_3;
  v71 = 0;
  if ((llvm::LLParser::parseOptionalAddrSpace(this, &v71, *(_DWORD *)(*((_QWORD *)this + 41) + 284)) & 1) != 0)
    goto LABEL_3;
  v59 = (char *)*((_QWORD *)this + 27);
  v80 = "expected type";
  v83 = 259;
  if ((llvm::LLParser::parseType(this, &v70, (const llvm::Twine *)&v80, 1) & 1) != 0)
    goto LABEL_3;
  if ((llvm::LLParser::parseValID((uint64_t **)this, (uint64_t)&v91, a3, 0) & 1) != 0)
    goto LABEL_3;
  if ((llvm::LLParser::parseParameterList((uint64_t)this, (uint64_t)&v87, a3, 0, 0) & 1) != 0)
    goto LABEL_3;
  if ((llvm::LLParser::parseFnAttributeValuePairs((uint64_t)this, (uint64_t)&v106, (uint64_t)&v74, 0, &v73) & 1) != 0)
    goto LABEL_3;
  if ((llvm::LLParser::parseOptionalOperandBundles((uint64_t)this, (uint64_t)&v84, a3) & 1) != 0)
    goto LABEL_3;
  if ((llvm::LLParser::parseToken((uint64_t)this, 55, "expected 'to' in invoke") & 1) != 0)
    goto LABEL_3;
  v69 = 0;
  v80 = 0;
  if ((llvm::LLParser::parseTypeAndBasicBlock((uint64_t)this, &v69, (char **)&v80, a3) & 1) != 0)
    goto LABEL_3;
  if ((llvm::LLParser::parseToken((uint64_t)this, 65, "expected 'unwind' in invoke") & 1) != 0)
    goto LABEL_3;
  v68 = 0;
  v80 = 0;
  if ((llvm::LLParser::parseTypeAndBasicBlock((uint64_t)this, &v68, (char **)&v80, a3) & 1) != 0)
    goto LABEL_3;
  v54 = (char *)this + 168;
  v14 = *((unsigned __int8 *)v70 + 8);
  v56 = v70;
  if (!v70 || v14 != 14)
  {
    v55 = v88;
    if ((_DWORD)v88)
    {
      v15 = 0;
      v57 = 0;
      v16 = 0;
      Sorted = 0;
      do
      {
        v17 = **((_QWORD **)v87 + 3 * v15 + 1);
        if (Sorted >= (unint64_t)v57)
        {
          v18 = (uint64_t)(Sorted - (_QWORD)v16) >> 3;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 61)
            abort();
          if ((v57 - v16) >> 2 > v19)
            v19 = (v57 - v16) >> 2;
          if ((unint64_t)(v57 - v16) >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          v58 = v19;
          if (v19)
          {
            if (v19 >> 61)
              sub_1C4764EE4();
            v20 = (char *)operator new(8 * v19);
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[8 * v18];
          *(_QWORD *)v21 = v17;
          v22 = v21 + 8;
          while ((llvm::PointerType *)Sorted != v16)
          {
            v23 = *(_QWORD *)(Sorted - 8);
            Sorted -= 8;
            *((_QWORD *)v21 - 1) = v23;
            v21 -= 8;
          }
          v57 = (llvm::PointerType *)&v20[8 * v58];
          if (v16)
            operator delete(v16);
          v16 = (llvm::PointerType *)v21;
          Sorted = (unint64_t)v22;
        }
        else
        {
          *(_QWORD *)Sorted = v17;
          Sorted += 8;
        }
        ++v15;
      }
      while (v15 != v55);
      v56 = v70;
      v14 = *((unsigned __int8 *)v70 + 8);
    }
    else
    {
      Sorted = 0;
      v16 = 0;
    }
    if (v14 == 8 || v14 == 14 || v14 == 9)
    {
      v80 = "Invalid result type for LLVM function";
      v83 = 259;
      LOBYTE(Sorted) = llvm::LLLexer::Error((uint64_t)v54, v59, (llvm::Twine *)&v80);
      v60 = 0;
      v56 = 0;
      if (!v16)
      {
LABEL_80:
        if (!v60)
          goto LABEL_3;
        goto LABEL_81;
      }
    }
    else
    {
      v56 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)v56, (uint64_t *)v16, (uint64_t)(Sorted - (_QWORD)v16) >> 3, 0);
      v60 = 1;
      if (!v16)
        goto LABEL_80;
    }
    operator delete(v16);
    goto LABEL_80;
  }
LABEL_81:
  *(_QWORD *)&v93 = v56;
  v67 = 0;
  v26 = llvm::PointerType::get(v56, (llvm::Type *)v71);
  if ((llvm::LLParser::convertValIDToValue((uint64_t)this, v26, (uint64_t)&v91) & 1) != 0)
  {
    LOBYTE(Sorted) = 1;
  }
  else
  {
    v80 = v82;
    v81 = 0x800000000;
    __src = v79;
    __n = 0x800000000;
    v27 = *((_QWORD *)v56 + 2);
    v28 = (llvm::Type **)(v27 + 8);
    v29 = (llvm::Type **)(v27 + 8 * *((unsigned int *)v56 + 3));
    if ((_DWORD)v88)
    {
      v36 = 0;
      v37 = 24 * v88;
      do
      {
        if (v28 == v29)
        {
          v40 = (char *)v87;
          if (*((_DWORD *)v56 + 2) <= 0xFFu)
          {
            v47 = *(char **)((char *)v87 + v36);
            v65[0] = (uint64_t *)"too many arguments specified";
            v66 = 259;
            v46 = (char *)this + 168;
            goto LABEL_105;
          }
          v28 = v29;
        }
        else
        {
          v39 = *v28++;
          v38 = v39;
          v40 = (char *)v87;
          if (v39 && v38 != **(llvm::Type ***)((char *)v87 + v36 + 8))
          {
            v48 = *(char **)((char *)v87 + v36);
            sub_1C4FB7C44((uint64_t)&v61, v38);
            v49 = std::string::insert(&v61, 0, "argument is not of expected type '");
            v50 = v49->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
            v62.__r_.__value_.__r.__words[2] = v50;
            v49->__r_.__value_.__l.__size_ = 0;
            v49->__r_.__value_.__r.__words[2] = 0;
            v49->__r_.__value_.__r.__words[0] = 0;
            v51 = std::string::append(&v62, "'");
            v52 = v51->__r_.__value_.__r.__words[2];
            *(_OWORD *)v63 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
            v64 = v52;
            v51->__r_.__value_.__l.__size_ = 0;
            v51->__r_.__value_.__r.__words[2] = 0;
            v51->__r_.__value_.__r.__words[0] = 0;
            v66 = 260;
            v65[0] = (uint64_t *)v63;
            v53 = llvm::LLLexer::Error((uint64_t)v54, v48, (llvm::Twine *)v65);
            LOBYTE(Sorted) = v53;
            if (SHIBYTE(v64) < 0)
              operator delete(v63[0]);
            if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v62.__r_.__value_.__l.__data_);
            if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v61.__r_.__value_.__l.__data_);
            goto LABEL_106;
          }
        }
        v41 = *(_QWORD *)&v40[v36 + 8];
        v42 = v81;
        if (v81 >= (unint64_t)HIDWORD(v81))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v80, (uint64_t)v82, v81 + 1, 8);
          v42 = v81;
        }
        *((_QWORD *)v80 + v42) = v41;
        LODWORD(v81) = v81 + 1;
        v43 = *(_QWORD *)((char *)v87 + v36 + 16);
        v44 = __n;
        if (__n >= (unint64_t)HIDWORD(__n))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v79, __n + 1, 8);
          v44 = __n;
        }
        *((_QWORD *)__src + v44) = v43;
        LODWORD(__n) = __n + 1;
        v36 += 24;
      }
      while (v37 != v36);
    }
    if (v28 == v29)
    {
      Attribute = llvm::AttrBuilder::getAttribute((uint64_t)&v106, 74);
      if (!Attribute || !*(_QWORD *)(Attribute + 16))
      {
        v31 = *(uint64_t **)this;
        Sorted = llvm::AttributeSetNode::getSorted(*(uint64_t **)this, (uint64_t *)v107, v108);
        v32 = llvm::AttributeSetNode::getSorted(*(uint64_t **)this, v111, v112);
        v33 = llvm::AttributeList::get(v31, Sorted, v32, __src, __n);
        v66 = 257;
        v34 = sub_1C61CC1B8((uint64_t)v56, v67, (uint64_t)v69, (uint64_t)v68, (uint64_t *)v80, v81, (uint64_t)v84, v85, (uint64_t)v65, 0);
        *((_WORD *)v34 + 9) = *((_WORD *)v34 + 9) & 0xF003 | (4 * v72);
        *((_QWORD *)v34 + 8) = v33;
        v65[0] = (uint64_t *)v34;
        v35 = sub_1C4FCE454((uint64_t **)this + 139, (unint64_t)v34, v65);
        sub_1C4FCE520(v35 + 5, (char *)v74, v75, (v75 - (_BYTE *)v74) >> 2);
        LOBYTE(Sorted) = 0;
        *a2 = (llvm::Instruction *)v34;
        goto LABEL_106;
      }
      v45 = "invoke instructions may not have an alignment";
    }
    else
    {
      v45 = "not enough parameters specified for call";
    }
    v65[0] = (uint64_t *)v45;
    v66 = 259;
    v46 = (char *)this + 168;
    v47 = v6;
LABEL_105:
    LOBYTE(Sorted) = llvm::LLLexer::Error((uint64_t)v46, v47, (llvm::Twine *)v65);
LABEL_106:
    if (__src != v79)
      free(__src);
    if (v80 != v82)
      free(v80);
  }
LABEL_3:
  v8 = (char *)v84;
  if ((_DWORD)v85)
  {
    v9 = 48 * v85;
    do
    {
      v10 = &v8[v9];
      v11 = *(void **)&v8[v9 - 24];
      if (v11)
      {
        *((_QWORD *)v10 - 2) = v11;
        operator delete(v11);
      }
      if (*(v10 - 25) < 0)
        operator delete(*((void **)v10 - 6));
      v9 -= 48;
    }
    while (v9);
    v8 = (char *)v84;
  }
  if (v8 != v86)
    free(v8);
  if (v87 != &v89)
    free(v87);
  v12 = v104;
  v104 = 0;
  if (v12)
    MEMORY[0x1CAA32F9C](v12, 0x20C8093837F09);
  if (v100 == (_DWORD *)&unk_1C866F1C0)
  {
    sub_1C4773C74(&v101);
  }
  else if ((v100[2] - 64) <= 0xFFFFFF7F && v101)
  {
    MEMORY[0x1CAA32F9C](v101, 0x1000C8000313F17);
  }
  if (v98 >= 0x41 && v97)
    MEMORY[0x1CAA32F9C](v97, 0x1000C8000313F17);
  if (SHIBYTE(v96) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v94) < 0)
    operator delete(*((void **)&v93 + 1));
  if (v74)
    operator delete(v74);
  if (v107 != v109)
    free(v107);
  if (v111 != v113)
    free(v111);
  return Sorted & 1;
}

uint64_t llvm::LLParser::parseCallBr(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  llvm::LLParser *v14;
  int v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  void *v23;
  unsigned int v24;
  void *v25;
  uint64_t v26;
  int v29;
  uint64_t v30;
  uint64_t v31;
  llvm::Type **v32;
  uint64_t Attribute;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t Sorted;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t **v41;
  uint64_t v42;
  llvm::Type *v43;
  llvm::Type *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  std::string::size_type v57;
  llvm::LLLexer *v58;
  char *v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  llvm::PointerType *v64;
  llvm::PointerType *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  llvm::Type **v71;
  std::string v72;
  std::string v73;
  void *v74[2];
  std::string::size_type v75;
  uint64_t *v76[4];
  __int16 v77;
  uint64_t v78;
  llvm::Value *v79;
  llvm::Type *v80;
  unsigned int v81;
  char *v82;
  void *v83;
  char *v84;
  uint64_t v85;
  void *__src;
  size_t __n;
  _BYTE v88[64];
  void *v89;
  uint64_t v90;
  _WORD v91[32];
  void *v92;
  uint64_t v93;
  _WORD v94[64];
  void *v95;
  uint64_t v96;
  _BYTE v97[96];
  void *v98;
  uint64_t v99;
  int v100;
  char v101;
  int v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 __p;
  uint64_t v107;
  uint64_t v108;
  unsigned int v109;
  char v110;
  _DWORD *v111;
  uint64_t v112;
  int v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  _BYTE v120[64];
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  _QWORD v124[11];

  v124[8] = *MEMORY[0x1E0C80C00];
  v6 = (char *)*((_QWORD *)this + 27);
  v121 = **((_QWORD **)this + 41);
  v122 = v124;
  v123 = 0x800000000;
  v117 = v121;
  v118 = v120;
  v119 = 0x800000000;
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v82 = 0;
  v81 = 0;
  v80 = 0;
  v102 = 0;
  v104 = 0u;
  v105 = 0u;
  __p = 0u;
  v108 = 0;
  v103 = 0;
  v107 = 0;
  v7 = 1;
  v109 = 1;
  v110 = 0;
  LODWORD(v93) = 64;
  v92 = 0;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v98, (const llvm::APInt **)&v92);
  v111 = v98;
  v112 = v99;
  v113 = v100;
  v114 = v101 & 0xF;
  v115 = 0;
  v116 = 0;
  v98 = &v100;
  v99 = 0x1000000000;
  v95 = v97;
  v96 = 0x200000000;
  if ((llvm::LLParser::parseOptionalCallingConv(this, &v81) & 1) != 0)
    goto LABEL_3;
  if ((llvm::LLParser::parseOptionalParamOrReturnAttrs(this, (llvm::AttrBuilder *)&v121, 0) & 1) != 0)
    goto LABEL_3;
  v70 = (char *)*((_QWORD *)this + 27);
  v92 = "expected type";
  v94[8] = 259;
  if ((llvm::LLParser::parseType(this, &v80, (const llvm::Twine *)&v92, 1) & 1) != 0
    || (llvm::LLParser::parseValID((uint64_t **)this, (uint64_t)&v102, a3, 0) & 1) != 0
    || (llvm::LLParser::parseParameterList((uint64_t)this, (uint64_t)&v98, a3, 0, 0) & 1) != 0
    || (llvm::LLParser::parseFnAttributeValuePairs((uint64_t)this, (uint64_t)&v117, (uint64_t)&v83, 0, &v82) & 1) != 0
    || (llvm::LLParser::parseOptionalOperandBundles((uint64_t)this, (uint64_t)&v95, a3) & 1) != 0)
  {
    goto LABEL_3;
  }
  v69 = v6;
  v14 = this;
  if ((llvm::LLParser::parseToken((uint64_t)this, 55, "expected 'to' in callbr") & 1) != 0
    || (v79 = 0, v92 = 0, (llvm::LLParser::parseTypeAndBasicBlock((uint64_t)this, &v79, (char **)&v92, a3) & 1) != 0)
    || (llvm::LLParser::parseToken((uint64_t)this, 6, "expected '[' in callbr") & 1) != 0)
  {
    v7 = 1;
    goto LABEL_3;
  }
  v58 = (llvm::LLParser *)((char *)this + 168);
  v92 = v94;
  v93 = 0x1000000000;
  if (*((_DWORD *)this + 56) != 7)
  {
    __src = 0;
    v89 = 0;
    if ((llvm::LLParser::parseTypeAndBasicBlock((uint64_t)this, (llvm::Value **)&__src, (char **)&v89, a3) & 1) != 0)
      goto LABEL_89;
    v23 = __src;
    v24 = v93;
    if (v93 >= HIDWORD(v93))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, v93 + 1, 8);
      v24 = v93;
    }
    *((_QWORD *)v92 + v24) = v23;
    while (1)
    {
      LODWORD(v93) = v93 + 1;
      if (*((_DWORD *)v14 + 56) != 4)
        break;
      *((_DWORD *)v14 + 56) = llvm::LLLexer::LexToken(v58);
      v89 = 0;
      if ((llvm::LLParser::parseTypeAndBasicBlock((uint64_t)v14, (llvm::Value **)&__src, (char **)&v89, a3) & 1) != 0)
        goto LABEL_89;
      v25 = __src;
      v26 = v93;
      if (v93 >= (unint64_t)HIDWORD(v93))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v92, (uint64_t)v94, v93 + 1, 8);
        v26 = v93;
      }
      *((_QWORD *)v92 + v26) = v25;
    }
  }
  if ((llvm::LLParser::parseToken((uint64_t)v14, 7, "expected ']' at end of block list") & 1) == 0)
  {
    v15 = *((unsigned __int8 *)v80 + 8);
    v64 = v80;
    if (!v80 || v15 != 14)
    {
      v60 = v99;
      if ((_DWORD)v99)
      {
        v62 = 0;
        v65 = 0;
        v66 = 0;
        v67 = 0;
        do
        {
          v61 = **((_QWORD **)v98 + 3 * (_QWORD)v65 + 1);
          if (v67 >= v62)
          {
            v17 = (v67 - v66) >> 3;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 61)
              abort();
            if ((v62 - v66) >> 2 > v18)
              v18 = (v62 - v66) >> 2;
            if ((unint64_t)(v62 - v66) >= 0x7FFFFFFFFFFFFFF8)
              v18 = 0x1FFFFFFFFFFFFFFFLL;
            v63 = v18;
            if (v18)
            {
              if (v18 >> 61)
                sub_1C4764EE4();
              v19 = (char *)operator new(8 * v18);
            }
            else
            {
              v19 = 0;
            }
            v20 = &v19[8 * v17];
            *(_QWORD *)v20 = v61;
            v59 = v20 + 8;
            v21 = v66;
            v22 = v67;
            while (v22 != v21)
            {
              v22 = v67 - 8;
              *((_QWORD *)v20 - 1) = *((_QWORD *)v67 - 1);
              v20 -= 8;
              v21 = v66;
              v67 -= 8;
            }
            v62 = &v19[8 * v63];
            if (v66)
              operator delete(v66);
            v66 = v20;
            v16 = v59;
          }
          else
          {
            *(_QWORD *)v67 = v61;
            v16 = v67 + 8;
          }
          v67 = v16;
          v65 = (llvm::PointerType *)((char *)v65 + 1);
        }
        while (v65 != (llvm::PointerType *)v60);
        v64 = v80;
        v15 = *((unsigned __int8 *)v80 + 8);
      }
      else
      {
        v66 = 0;
        v67 = 0;
      }
      if (v15 == 8 || v15 == 14 || v15 == 9)
      {
        v89 = "Invalid result type for LLVM function";
        v91[8] = 259;
        v7 = llvm::LLLexer::Error((uint64_t)v58, v70, (llvm::Twine *)&v89);
        v29 = 0;
        v64 = 0;
      }
      else
      {
        v64 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)v64, (uint64_t *)v66, (v67 - v66) >> 3, 0);
        v29 = 1;
        v7 = 1;
      }
      if (v66)
        operator delete(v66);
      if (!v29)
        goto LABEL_90;
    }
    *(_QWORD *)&v104 = v64;
    v78 = 0;
    v30 = llvm::PointerType::get(v64, 0);
    if ((llvm::LLParser::convertValIDToValue((uint64_t)v14, v30, (uint64_t)&v102) & 1) == 0)
    {
      v89 = v91;
      v90 = 0x800000000;
      __src = v88;
      __n = 0x800000000;
      v31 = *((_QWORD *)v64 + 2);
      v32 = (llvm::Type **)(v31 + 8);
      v71 = (llvm::Type **)(v31 + 8 * *((unsigned int *)v64 + 3));
      if ((_DWORD)v99)
      {
        v42 = 0;
        v68 = 24 * v99;
        do
        {
          if (v32 == v71)
          {
            v45 = (char *)v98;
            if (*((_DWORD *)v64 + 2) <= 0xFFu)
            {
              v52 = *(char **)((char *)v98 + v42);
              v76[0] = (uint64_t *)"too many arguments specified";
              v77 = 259;
              v51 = (uint64_t)v58;
              goto LABEL_116;
            }
            v32 = v71;
          }
          else
          {
            v44 = *v32++;
            v43 = v44;
            v45 = (char *)v98;
            if (v44 && v43 != **(llvm::Type ***)((char *)v98 + v42 + 8))
            {
              v53 = *(char **)((char *)v98 + v42);
              sub_1C4FB7C44((uint64_t)&v72, v43);
              v54 = std::string::insert(&v72, 0, "argument is not of expected type '");
              v55 = v54->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v73.__r_.__value_.__l.__data_ = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
              v73.__r_.__value_.__r.__words[2] = v55;
              v54->__r_.__value_.__l.__size_ = 0;
              v54->__r_.__value_.__r.__words[2] = 0;
              v54->__r_.__value_.__r.__words[0] = 0;
              v56 = std::string::append(&v73, "'");
              v57 = v56->__r_.__value_.__r.__words[2];
              *(_OWORD *)v74 = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
              v75 = v57;
              v56->__r_.__value_.__l.__size_ = 0;
              v56->__r_.__value_.__r.__words[2] = 0;
              v56->__r_.__value_.__r.__words[0] = 0;
              v77 = 260;
              v76[0] = (uint64_t *)v74;
              v7 = llvm::LLLexer::Error((uint64_t)v58, v53, (llvm::Twine *)v76);
              if (SHIBYTE(v75) < 0)
                operator delete(v74[0]);
              if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v73.__r_.__value_.__l.__data_);
              if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v72.__r_.__value_.__l.__data_);
              goto LABEL_117;
            }
          }
          v46 = *(_QWORD *)&v45[v42 + 8];
          v47 = v90;
          if (v90 >= (unint64_t)HIDWORD(v90))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, (uint64_t)v91, v90 + 1, 8);
            v47 = v90;
          }
          *((_QWORD *)v89 + v47) = v46;
          LODWORD(v90) = v90 + 1;
          v48 = *(_QWORD *)((char *)v98 + v42 + 16);
          v49 = __n;
          if (__n >= (unint64_t)HIDWORD(__n))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v88, __n + 1, 8);
            v49 = __n;
          }
          *((_QWORD *)__src + v49) = v48;
          LODWORD(__n) = __n + 1;
          v42 += 24;
        }
        while (v68 != v42);
      }
      if (v32 == v71)
      {
        Attribute = llvm::AttrBuilder::getAttribute((uint64_t)&v117, 74);
        if (!Attribute || !*(_QWORD *)(Attribute + 16))
        {
          v34 = (uint64_t **)v14;
          v35 = *(uint64_t **)v14;
          Sorted = llvm::AttributeSetNode::getSorted(*(uint64_t **)v14, (uint64_t *)v118, v119);
          v37 = llvm::AttributeSetNode::getSorted(*v34, v122, v123);
          v38 = llvm::AttributeList::get(v35, Sorted, v37, __src, __n);
          v77 = 257;
          v40 = sub_1C61CC41C((uint64_t)v64, v78, (uint64_t)v79, (uint64_t)v92, v93, (uint64_t *)v89, v90, v39, (uint64_t)v95, v96, (uint64_t)v76, 0);
          *((_WORD *)v40 + 9) = *((_WORD *)v40 + 9) & 0xF003 | (4 * v81);
          *((_QWORD *)v40 + 8) = v38;
          v76[0] = (uint64_t *)v40;
          v41 = sub_1C4FCE454(v34 + 139, (unint64_t)v40, v76);
          sub_1C4FCE520(v41 + 5, (char *)v83, v84, (v84 - (_BYTE *)v83) >> 2);
          v7 = 0;
          *a2 = (llvm::Instruction *)v40;
          goto LABEL_117;
        }
        v50 = "callbr instructions may not have an alignment";
      }
      else
      {
        v50 = "not enough parameters specified for call";
      }
      v76[0] = (uint64_t *)v50;
      v77 = 259;
      v51 = (uint64_t)v58;
      v52 = v69;
LABEL_116:
      v7 = llvm::LLLexer::Error(v51, v52, (llvm::Twine *)v76);
LABEL_117:
      if (__src != v88)
        free(__src);
      if (v89 != v91)
        free(v89);
      goto LABEL_90;
    }
  }
LABEL_89:
  v7 = 1;
LABEL_90:
  if (v92 != v94)
    free(v92);
LABEL_3:
  v8 = (char *)v95;
  if ((_DWORD)v96)
  {
    v9 = 48 * v96;
    do
    {
      v10 = &v8[v9];
      v11 = *(void **)&v8[v9 - 24];
      if (v11)
      {
        *((_QWORD *)v10 - 2) = v11;
        operator delete(v11);
      }
      if (*(v10 - 25) < 0)
        operator delete(*((void **)v10 - 6));
      v9 -= 48;
    }
    while (v9);
    v8 = (char *)v95;
  }
  if (v8 != v97)
    free(v8);
  if (v98 != &v100)
    free(v98);
  v12 = v115;
  v115 = 0;
  if (v12)
    MEMORY[0x1CAA32F9C](v12, 0x20C8093837F09);
  if (v111 == (_DWORD *)&unk_1C866F1C0)
  {
    sub_1C4773C74(&v112);
  }
  else if ((v111[2] - 64) <= 0xFFFFFF7F && v112)
  {
    MEMORY[0x1CAA32F9C](v112, 0x1000C8000313F17);
  }
  if (v109 >= 0x41 && v108)
    MEMORY[0x1CAA32F9C](v108, 0x1000C8000313F17);
  if (SHIBYTE(v107) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v105) < 0)
    operator delete(*((void **)&v104 + 1));
  if (v83)
    operator delete(v83);
  if (v118 != v120)
    free(v118);
  if (v122 != v124)
    free(v122);
  return v7;
}

uint64_t llvm::LLParser::parseCast(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3, int a4)
{
  char *v7;
  uint64_t v8;
  llvm::Type *v10;
  llvm::Type **v11;
  llvm::Instruction *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  void **v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  void *v23[2];
  char v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  void *__p[2];
  std::string::size_type v30;
  llvm::Type *v31;
  llvm::Value *v32;
  _QWORD v33[4];
  __int16 v34;

  v31 = 0;
  v32 = 0;
  v7 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v32, a3) & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken((uint64_t)this, 55, "expected 'to' after cast value") & 1) != 0)
    return 1;
  v33[0] = "expected type";
  v34 = 259;
  if ((llvm::LLParser::parseType(this, &v31, (const llvm::Twine *)v33, 0) & 1) != 0)
    return 1;
  v10 = v31;
  v11 = (llvm::Type **)v32;
  if (llvm::CastInst::castIsValid(a4, *(llvm::Type **)v32, (uint64_t)v31))
  {
    v34 = 257;
    llvm::CastInst::Create(a4);
    v8 = 0;
    *a2 = v12;
  }
  else
  {
    llvm::CastInst::castIsValid(a4, *v11, (uint64_t)v10);
    sub_1C4FB7C44((uint64_t)&v25, *v11);
    v13 = std::string::insert(&v25, 0, "invalid cast opcode for cast from '");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v26, "' to '");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    sub_1C4FB7C44((uint64_t)v23, v10);
    if (v24 >= 0)
      v17 = v23;
    else
      v17 = (void **)v23[0];
    if (v24 >= 0)
      v18 = v24 & 0x7F;
    else
      v18 = (std::string::size_type)v23[1];
    v19 = std::string::append(&v27, (const std::string::value_type *)v17, v18);
    v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v28, "'");
    v22 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v30 = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    v34 = 260;
    v33[0] = __p;
    v8 = llvm::LLLexer::Error((uint64_t)this + 168, v7, (llvm::Twine *)v33);
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (v24 < 0)
      operator delete(v23[0]);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
  }
  return v8;
}

uint64_t llvm::LLParser::parsePHI(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  char *v6;
  unsigned __int8 *v8;
  llvm::Type *v9;
  llvm::LLParser *v10;
  uint64_t **v11;
  llvm::LLParser::PerFunctionState *v12;
  uint64_t v13;
  llvm::Value *v14;
  llvm::Value *v15;
  uint64_t v16;
  llvm::Value **v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  _QWORD *v22;
  llvm::PHINode *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  __int16 v30;
  llvm::Value *v31;
  llvm::Value *v32;
  llvm::Type *v33;
  void *v34;
  uint64_t v35;
  _WORD v36[128];
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = (char *)*((_QWORD *)this + 27);
  v33 = 0;
  v34 = "expected type";
  v36[8] = 259;
  if ((llvm::LLParser::parseType(this, &v33, (const llvm::Twine *)&v34, 0) & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken((uint64_t)this, 6, "expected '[' in phi value list") & 1) != 0)
    return 1;
  v32 = 0;
  v8 = (unsigned __int8 *)v33;
  if ((llvm::LLParser::parseValue((uint64_t **)this, v33, &v32, a3) & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' after insertelement value") & 1) != 0)
    return 1;
  v31 = 0;
  v9 = (llvm::Type *)(**(_QWORD **)this + 1600);
  v10 = this;
  v11 = (uint64_t **)this;
  v12 = a3;
  if ((llvm::LLParser::parseValue(v11, v9, &v31, a3) & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)v10, 7, "expected ']' in phi value list") & 1) != 0)
  {
    return 1;
  }
  v34 = v36;
  v35 = 0x1000000000;
  v13 = (uint64_t)v10 + 168;
  while (1)
  {
    v15 = v31;
    v14 = v32;
    v16 = v35;
    if (v35 >= (unint64_t)HIDWORD(v35))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v34, (uint64_t)v36, v35 + 1, 16);
      v16 = v35;
    }
    v17 = (llvm::Value **)((char *)v34 + 16 * v16);
    *v17 = v14;
    v17[1] = v15;
    LODWORD(v35) = v35 + 1;
    if (*((_DWORD *)v10 + 56) != 4)
      break;
    v18 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)v10 + 168));
    *((_DWORD *)v10 + 56) = v18;
    if (v18 == 441)
    {
      v19 = 2;
      goto LABEL_20;
    }
    if ((llvm::LLParser::parseToken((uint64_t)v10, 6, "expected '[' in phi value list") & 1) != 0
      || (llvm::LLParser::parseValue((uint64_t **)v10, (llvm::Type *)v8, &v32, v12) & 1) != 0
      || (llvm::LLParser::parseToken((uint64_t)v10, 4, "expected ',' after insertelement value") & 1) != 0
      || (llvm::LLParser::parseValue((uint64_t **)v10, (llvm::Type *)(**(_QWORD **)v10 + 1600), &v31, v12) & 1) != 0
      || (llvm::LLParser::parseToken((uint64_t)v10, 7, "expected ']' in phi value list") & 1) != 0)
    {
      v19 = 1;
      goto LABEL_29;
    }
  }
  v19 = 0;
LABEL_20:
  v20 = v8[8];
  if (v20 == 14 || v20 == 7)
  {
    v29[0] = "phi node must have first class type";
    v30 = 259;
    v19 = llvm::LLLexer::Error(v13, v6, (llvm::Twine *)v29);
  }
  else
  {
    v21 = v35;
    v30 = 257;
    v22 = operator new(0x48uLL);
    v22[1] = v8;
    v23 = (llvm::PHINode *)(v22 + 1);
    *v22 = 0;
    v22[2] = 0;
    v22[3] = 0x4000000000000053;
    *((_OWORD *)v22 + 2) = 0u;
    *((_OWORD *)v22 + 3) = 0u;
    *((_DWORD *)v22 + 16) = 0;
    *((_DWORD *)v22 + 17) = v21;
    llvm::Value::setName((uint64_t ***)v22 + 1, (uint64_t)v29);
    v24 = *((unsigned int *)v22 + 17);
    v25 = operator new(40 * v24);
    *v22 = v25;
    if ((_DWORD)v24)
    {
      v26 = &v25[4 * v24];
      do
      {
        *v25 = 0;
        v25[1] = 0;
        v25[2] = 0;
        v25[3] = v23;
        v25 += 4;
      }
      while (v25 != v26);
    }
    if ((_DWORD)v35)
    {
      v27 = 0;
      v28 = 16 * v35;
      do
      {
        sub_1C477667C(v23, *(_QWORD *)((char *)v34 + v27), *(_QWORD *)((char *)v34 + v27 + 8));
        v27 += 16;
      }
      while (v28 != v27);
    }
    *a2 = v23;
  }
LABEL_29:
  if (v34 != v36)
    free(v34);
  return v19;
}

uint64_t llvm::LLParser::parseLandingPad(char **this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  llvm::Instruction *v6;
  uint64_t v7;
  llvm::LandingPadInst *v9;
  int v10;
  int v11;
  char *v12;
  llvm::Type *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  char *v19;
  _QWORD **v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  llvm::UndefValue *v30;
  llvm::Value *v31;
  llvm::Constant *v32;
  llvm::Type *v33;
  _QWORD v34[4];
  __int16 v35;

  v33 = 0;
  v34[0] = "expected type";
  v35 = 259;
  if ((llvm::LLParser::parseType((llvm::LLParser *)this, &v33, (const llvm::Twine *)v34, 0) & 1) != 0)
    return 1;
  v35 = 257;
  v9 = llvm::LandingPadInst::Create(v33, 0, (const llvm::Twine *)v34, 0, v6);
  v10 = *((_DWORD *)this + 56);
  v11 = v10;
  if (v10 == 316)
  {
    v11 = llvm::LLLexer::LexToken((llvm::LLLexer *)(this + 21));
    *((_DWORD *)this + 56) = v11;
  }
  *((_WORD *)v9 + 9) = *((_WORD *)v9 + 9) & 0xFFFE | (v10 == 316);
  if ((v11 - 317) > 1)
  {
LABEL_17:
    v7 = 0;
    *a2 = v9;
    return v7;
  }
  while (1)
  {
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLLexer *)(this + 21));
    v32 = 0;
    v12 = this[27];
    if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v32, a3) & 1) != 0)
    {
      v7 = 1;
      if (!v9)
        return v7;
      goto LABEL_19;
    }
    v14 = (unsigned __int8 *)v32;
    v15 = *(unsigned __int8 *)(*(_QWORD *)v32 + 8);
    if (v11 == 317)
    {
      if (v15 != 17)
        goto LABEL_12;
      v34[0] = "'catch' clause has an invalid type";
    }
    else
    {
      if (v15 == 17)
        goto LABEL_12;
      v34[0] = "'filter' clause has an invalid type";
    }
    v35 = 259;
    llvm::LLLexer::Error((uint64_t)(this + 21), v12, (llvm::Twine *)v34);
LABEL_12:
    if (v14[16] >= 0x15u)
      break;
    llvm::LandingPadInst::addClause(v9, (llvm::Constant *)v14);
    v11 = *((_DWORD *)this + 56);
    if ((v11 - 317) >= 2)
      goto LABEL_17;
  }
  v34[0] = "clause argument must be a constant";
  v35 = 259;
  v7 = llvm::LLLexer::Error((uint64_t)(this + 21), v12, (llvm::Twine *)v34);
  if (!v9)
    return v7;
LABEL_19:
  if ((*((_BYTE *)v9 + 23) & 8) != 0)
  {
    v30 = llvm::UndefValue::get(*(llvm::UndefValue **)v9, v13);
    llvm::ValueAsMetadata::handleRAUW((uint64_t *)v9, v30, v31);
  }
  v16 = (unsigned __int8 *)*((_QWORD *)v9 + 6);
  if (v16)
    llvm::MetadataTracking::untrack((uint64_t)v9 + 48, v16);
  llvm::Value::~Value(v9, (llvm::Value *)v16);
  v17 = *((_DWORD *)v9 + 5);
  if ((v17 & 0x40000000) != 0)
  {
    v25 = (char *)*((_QWORD *)v9 - 1);
    v24 = (char *)v9 - 8;
    v23 = v25;
    v26 = v17 & 0x7FFFFFF;
    if ((_DWORD)v26)
    {
      v27 = 32 * v26;
      do
      {
        v28 = &v23[v27];
        if (*(_QWORD *)&v23[v27 - 32])
        {
          **((_QWORD **)v28 - 2) = *((_QWORD *)v28 - 3);
          v29 = *((_QWORD *)v28 - 3);
          if (v29)
            *(_QWORD *)(v29 + 16) = *((_QWORD *)v28 - 2);
        }
        v27 -= 32;
      }
      while (v27);
    }
    operator delete(v23);
    v19 = v24;
  }
  else
  {
    v18 = v17 & 0x7FFFFFF;
    v19 = (char *)v9 - 32 * v18;
    if ((_DWORD)v18)
    {
      v20 = (_QWORD **)((char *)v9 - 16);
      v21 = -32 * v18;
      do
      {
        if (*(v20 - 2))
        {
          **v20 = *(v20 - 1);
          v22 = (uint64_t)*(v20 - 1);
          if (v22)
            *(_QWORD *)(v22 + 16) = *v20;
        }
        v20 -= 4;
        v21 += 32;
      }
      while (v21);
    }
    if (v17 < 0)
      v19 = &v19[-*((_QWORD *)v19 - 1) - 8];
  }
  operator delete(v19);
  return v7;
}

uint64_t llvm::LLParser::parseCall(uint64_t a1, uint64_t *a2, const llvm::APInt *a3, int a4)
{
  char *v7;
  int v8;
  char v9;
  int v10;
  llvm::PointerType *v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *i;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  void *v29;
  uint64_t v30;
  uint64_t v34;
  uint64_t v35;
  llvm::Type **v36;
  uint64_t v37;
  uint64_t v38;
  llvm::Type **v39;
  llvm::Type *v40;
  llvm::Type *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t Attribute;
  uint64_t *v48;
  uint64_t Sorted;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  int v57;
  int v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t **v62;
  const char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  std::string *v67;
  std::string::size_type v68;
  std::string *v69;
  std::string::size_type v70;
  char v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  llvm::PointerType *v91;
  llvm::PointerType *v92;
  llvm::PointerType *v93;
  llvm::Type **v94;
  llvm::Type **v95;
  uint64_t v96;
  char *v97;
  int v98;
  llvm::Type **v99;
  uint64_t v100;
  _QWORD *v101;
  int v102;
  std::string v104;
  std::string v105;
  void *v106[2];
  std::string::size_type v107;
  uint64_t *v108[4];
  __int16 v109;
  uint64_t v110;
  llvm::Type *v111;
  unsigned int v112;
  unsigned int v113[3];
  void *v114;
  char *v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  _BYTE v119[64];
  void *__src;
  size_t __n;
  _BYTE v122[16];
  __int16 v123;
  void *v124;
  uint64_t v125;
  _BYTE v126[96];
  void *v127;
  uint64_t v128;
  int v129;
  char v130;
  int v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  __int128 __p;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  char v139;
  _DWORD *v140;
  uint64_t v141;
  int v142;
  char v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  _BYTE v149[64];
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  _QWORD v153[11];

  v153[8] = *MEMORY[0x1E0C80C00];
  v150 = **(_QWORD **)(a1 + 328);
  v151 = v153;
  v152 = 0x800000000;
  v146 = v150;
  v147 = v149;
  v148 = 0x800000000;
  v114 = 0;
  v115 = 0;
  v116 = 0;
  *(_QWORD *)&v113[1] = 0;
  v111 = 0;
  v131 = 0;
  v133 = 0u;
  v134 = 0u;
  __p = 0u;
  v137 = 0;
  v132 = 0;
  v136 = 0;
  v138 = 1;
  v139 = 0;
  LODWORD(v125) = 64;
  v124 = 0;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v127, (const llvm::APInt **)&v124);
  v140 = v127;
  v141 = v128;
  v142 = v129;
  v143 = v130 & 0xF;
  v144 = 0;
  v145 = 0;
  v127 = &v129;
  v128 = 0x1000000000;
  v124 = v126;
  v125 = 0x200000000;
  v7 = *(char **)(a1 + 216);
  if (a4 && (llvm::LLParser::parseToken(a1, 298, "expected 'tail call', 'musttail call', or 'notail call'") & 1) != 0)
    goto LABEL_34;
  v112 = 0;
  v8 = sub_1C61CAA2C(a1);
  if ((llvm::LLParser::parseOptionalCallingConv((llvm::LLParser *)a1, &v112) & 1) != 0)
    goto LABEL_34;
  if ((llvm::LLParser::parseOptionalParamOrReturnAttrs((llvm::LLParser *)a1, (llvm::AttrBuilder *)&v150, 0) & 1) != 0)
    goto LABEL_34;
  v113[0] = 0;
  if ((llvm::LLParser::parseOptionalAddrSpace((llvm::LLParser *)a1, v113, *(_DWORD *)(*(_QWORD *)(a1 + 328) + 284)) & 1) != 0)
    goto LABEL_34;
  v102 = v8;
  v97 = *(char **)(a1 + 216);
  __src = "expected type";
  v123 = 259;
  v9 = 1;
  if ((llvm::LLParser::parseType((llvm::LLParser *)a1, &v111, (const llvm::Twine *)&__src, 1) & 1) != 0
    || (llvm::LLParser::parseValID((uint64_t **)a1, (uint64_t)&v131, a3, 0) & 1) != 0
    || (llvm::LLParser::parseParameterList(a1, (uint64_t)&v127, a3, a4 == 2, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a3 + 1) + 24) + 8) > 0xFFu) & 1) != 0|| (llvm::LLParser::parseFnAttributeValuePairs(a1, (uint64_t)&v146, (uint64_t)&v114, 0, (char **)&v113[1]) & 1) != 0|| (llvm::LLParser::parseOptionalOperandBundles(a1, (uint64_t)&v124, a3) & 1) != 0)
  {
    goto LABEL_35;
  }
  v79 = a1 + 168;
  v10 = *((unsigned __int8 *)v111 + 8);
  v91 = v111;
  if (v111 && v10 == 14)
    goto LABEL_76;
  v93 = (llvm::PointerType *)v128;
  if ((_DWORD)v128)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    do
    {
      if ((unint64_t)v14 >= v12)
      {
        v15 = (v14 - v13) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          abort();
        v17 = v12 - (_QWORD)v13;
        v18 = (uint64_t)(v12 - (_QWORD)v13) >> 2;
        if (v18 > v16)
          v16 = v18;
        v19 = v17 >= 0x7FFFFFFFFFFFFFF8;
        v20 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v19)
          v20 = v16;
        v85 = v14;
        v87 = v13;
        v92 = v11;
        v82 = **((_QWORD **)v127 + 3 * (_QWORD)v11 + 1);
        v84 = v20;
        if (v20)
        {
          if (v20 >> 61)
            sub_1C4764EE4();
          v21 = (char *)operator new(8 * v20);
        }
        else
        {
          v21 = 0;
        }
        v22 = &v21[8 * v15];
        *(_QWORD *)v22 = v82;
        v80 = v22 + 8;
        for (i = v85; i != v87; i -= 8)
        {
          v24 = *((_QWORD *)i - 1);
          *((_QWORD *)v22 - 1) = v24;
          v22 -= 8;
        }
        v86 = &v21[8 * v84];
        if (v87)
          operator delete(v87);
        v13 = v22;
        v14 = v80;
        v11 = v92;
        v12 = (unint64_t)v86;
      }
      else
      {
        *(_QWORD *)v14 = **((_QWORD **)v127 + 3 * (_QWORD)v11 + 1);
        v14 += 8;
      }
      v11 = (llvm::PointerType *)((char *)v11 + 1);
    }
    while (v11 != v93);
    v25 = (uint64_t *)v13;
    v91 = v111;
    v10 = *((unsigned __int8 *)v111 + 8);
  }
  else
  {
    v14 = 0;
    v25 = 0;
  }
  if (v10 != 8 && v10 != 14 && v10 != 9)
  {
    v91 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)v91, v25, (v14 - (char *)v25) >> 3, 0);
    v98 = 1;
    if (!v25)
      goto LABEL_75;
    goto LABEL_74;
  }
  __src = "Invalid result type for LLVM function";
  v123 = 259;
  LOBYTE(v93) = llvm::LLLexer::Error(v79, v97, (llvm::Twine *)&__src);
  v98 = 0;
  v91 = 0;
  if (v25)
LABEL_74:
    operator delete(v25);
LABEL_75:
  v9 = (char)v93;
  if (!v98)
    goto LABEL_35;
LABEL_76:
  *(_QWORD *)&v133 = v91;
  v110 = 0;
  v34 = llvm::PointerType::get(v91, (llvm::Type *)v113[0]);
  if ((llvm::LLParser::convertValIDToValue(a1, v34, (uint64_t)&v131) & 1) != 0)
  {
LABEL_34:
    v9 = 1;
    goto LABEL_35;
  }
  __src = v122;
  __n = 0x800000000;
  v117 = v119;
  v118 = 0x800000000;
  v35 = *((_QWORD *)v91 + 2);
  v36 = (llvm::Type **)(v35 + 8);
  v99 = (llvm::Type **)(v35 + 8 * *((unsigned int *)v91 + 3));
  if ((_DWORD)v128)
  {
    v37 = 0;
    v38 = 24 * v128;
    v39 = (llvm::Type **)(v35 + 8 * *((unsigned int *)v91 + 3));
    while (1)
    {
      if (v36 == v39)
      {
        v42 = (char *)v127;
        if (*((_DWORD *)v91 + 2) <= 0xFFu)
        {
          v65 = *(char **)((char *)v127 + v37);
          v108[0] = (uint64_t *)"too many arguments specified";
          v109 = 259;
          v64 = a1 + 168;
          goto LABEL_123;
        }
        v36 = v39;
      }
      else
      {
        v41 = *v36++;
        v40 = v41;
        v42 = (char *)v127;
        if (v41 && v40 != **(llvm::Type ***)((char *)v127 + v37 + 8))
        {
          v66 = *(char **)((char *)v127 + v37);
          sub_1C4FB7C44((uint64_t)&v104, v40);
          v67 = std::string::insert(&v104, 0, "argument is not of expected type '");
          v68 = v67->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
          v105.__r_.__value_.__r.__words[2] = v68;
          v67->__r_.__value_.__l.__size_ = 0;
          v67->__r_.__value_.__r.__words[2] = 0;
          v67->__r_.__value_.__r.__words[0] = 0;
          v69 = std::string::append(&v105, "'");
          v70 = v69->__r_.__value_.__r.__words[2];
          *(_OWORD *)v106 = *(_OWORD *)&v69->__r_.__value_.__l.__data_;
          v107 = v70;
          v69->__r_.__value_.__l.__size_ = 0;
          v69->__r_.__value_.__r.__words[2] = 0;
          v69->__r_.__value_.__r.__words[0] = 0;
          v109 = 260;
          v108[0] = (uint64_t *)v106;
          v71 = llvm::LLLexer::Error(v79, v66, (llvm::Twine *)v108);
          v9 = v71;
          if (SHIBYTE(v107) < 0)
            operator delete(v106[0]);
          if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v105.__r_.__value_.__l.__data_);
          if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v104.__r_.__value_.__l.__data_);
          goto LABEL_113;
        }
      }
      v43 = *(_QWORD *)&v42[v37 + 8];
      v44 = v118;
      if (v118 >= (unint64_t)HIDWORD(v118))
      {
        v94 = v36;
        v88 = v38;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v117, (uint64_t)v119, v118 + 1, 8);
        v38 = v88;
        v36 = v94;
        v39 = v99;
        v44 = v118;
      }
      *((_QWORD *)v117 + v44) = v43;
      LODWORD(v118) = v118 + 1;
      v45 = *(_QWORD *)((char *)v127 + v37 + 16);
      v46 = __n;
      if (__n >= (unint64_t)HIDWORD(__n))
      {
        v95 = v36;
        v89 = v38;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v122, __n + 1, 8);
        v38 = v89;
        v36 = v95;
        v39 = v99;
        v46 = __n;
      }
      *((_QWORD *)__src + v46) = v45;
      LODWORD(__n) = __n + 1;
      v37 += 24;
      if (v38 == v37)
        goto LABEL_92;
    }
  }
  v39 = (llvm::Type **)(v35 + 8 * *((unsigned int *)v91 + 3));
LABEL_92:
  if (v36 == v39)
  {
    Attribute = llvm::AttrBuilder::getAttribute((uint64_t)&v146, 74);
    if (Attribute && *(_QWORD *)(Attribute + 16))
    {
      v63 = "call instructions may not have an alignment";
    }
    else
    {
      v48 = *(uint64_t **)a1;
      Sorted = llvm::AttributeSetNode::getSorted(*(uint64_t **)a1, (uint64_t *)v147, v148);
      v50 = llvm::AttributeSetNode::getSorted(*(uint64_t **)a1, v151, v152);
      v77 = llvm::AttributeList::get(v48, Sorted, v50, __src, __n);
      v96 = v118;
      v100 = v110;
      v81 = (uint64_t *)v117;
      v83 = (char *)v124;
      v109 = 257;
      v90 = v125;
      v51 = 0;
      if ((_DWORD)v125)
      {
        v72 = 48 * v125;
        v73 = (char *)v124 + 32;
        do
        {
          v51 += (*v73 - *(v73 - 1)) >> 3;
          v73 += 6;
          v72 -= 48;
        }
        while (v72);
      }
      v52 = (v51 + v118 + 1);
      v78 = (16 * v125);
      if ((_DWORD)v78)
        v53 = (16 * (_DWORD)v125) | 8u;
      else
        v53 = 0;
      v54 = (char *)operator new(v53 + 32 * v52 + 80);
      v55 = &v54[v53];
      v56 = (uint64_t)&v54[32 * v52 + v53];
      *(_DWORD *)(v56 + 20) = v52 & 0x7FFFFFF | (((_DWORD)v78 != 0) << 31) | *(_DWORD *)(v56 + 20) & 0x38000000;
      if ((_DWORD)v52)
      {
        do
        {
          *(_QWORD *)v55 = 0;
          *((_QWORD *)v55 + 1) = 0;
          *((_QWORD *)v55 + 2) = 0;
          *((_QWORD *)v55 + 3) = v56;
          v55 += 32;
        }
        while (v55 != (char *)v56);
      }
      if ((_DWORD)v78)
        *(_QWORD *)&v54[v78] = v78;
      v57 = v90;
      if ((_DWORD)v90)
      {
        v57 = 0;
        v74 = 48 * v90;
        v75 = v83 + 32;
        do
        {
          v57 += (*v75 - *(v75 - 1)) >> 3;
          v75 += 6;
          v74 -= 48;
        }
        while (v74);
      }
      v58 = v57 + v96 + 1;
      *(_QWORD *)v56 = **((_QWORD **)v91 + 2);
      *(_QWORD *)(v56 + 8) = 0;
      v59 = *(_DWORD *)(v56 + 20) & 0xC0000000 | v58 & 0x7FFFFFF;
      *(_DWORD *)(v56 + 16) = 84;
      *(_DWORD *)(v56 + 20) = v59;
      *(_OWORD *)(v56 + 24) = 0u;
      *(_OWORD *)(v56 + 40) = 0u;
      *(_DWORD *)(v56 + 56) = 0;
      *(_QWORD *)(v56 + 64) = 0;
      *(_QWORD *)(v56 + 72) = v91;
      sub_1C5382FD4((uint64_t)v106, v81, &v81[v96], v56 - 32 * (v58 & 0x7FFFFFF));
      v60 = (_QWORD *)(v56 - 32);
      if (*(_QWORD *)(v56 - 32))
      {
        **(_QWORD **)(v56 - 16) = *(_QWORD *)(v56 - 24);
        v76 = *(_QWORD *)(v56 - 24);
        if (v76)
          *(_QWORD *)(v76 + 16) = *(_QWORD *)(v56 - 16);
      }
      *v60 = v100;
      if (v100)
      {
        v61 = *(_QWORD *)(v100 + 8);
        v101 = (_QWORD *)(v100 + 8);
        *(_QWORD *)(v56 - 24) = v61;
        if (v61)
          *(_QWORD *)(v61 + 16) = v56 - 24;
        *(_QWORD *)(v56 - 16) = v101;
        *v101 = v60;
      }
      llvm::CallBase::populateBundleOperandInfos(v56, (uint64_t)v83, v90, v96);
      llvm::Value::setName((uint64_t ***)v56, (uint64_t)v108);
      *(_WORD *)(v56 + 18) = *(_WORD *)(v56 + 18) & 0xF000 | a4 & 0xF003 | (4 * v112);
      if (!v102)
        goto LABEL_112;
      if (sub_1C4774A9C(v56))
      {
        *(_BYTE *)(v56 + 17) |= 2 * (_BYTE)v102;
LABEL_112:
        *(_QWORD *)(v56 + 64) = v77;
        v108[0] = (uint64_t *)v56;
        v62 = sub_1C4FCE454((uint64_t **)(a1 + 1112), v56, v108);
        sub_1C4FCE520(v62 + 5, (char *)v114, v115, (v115 - (_BYTE *)v114) >> 2);
        v9 = 0;
        *a2 = v56;
        goto LABEL_113;
      }
      llvm::Value::deleteValue((llvm::Value *)v56);
      v63 = "fast-math-flags specified for call without floating-point scalar or vector return type";
    }
  }
  else
  {
    v63 = "not enough parameters specified for call";
  }
  v108[0] = (uint64_t *)v63;
  v109 = 259;
  v64 = a1 + 168;
  v65 = v7;
LABEL_123:
  v9 = llvm::LLLexer::Error(v64, v65, (llvm::Twine *)v108);
LABEL_113:
  if (v117 != v119)
    free(v117);
  if (__src != v122)
    free(__src);
LABEL_35:
  v26 = (char *)v124;
  if ((_DWORD)v125)
  {
    v27 = 48 * v125;
    do
    {
      v28 = &v26[v27];
      v29 = *(void **)&v26[v27 - 24];
      if (v29)
      {
        *((_QWORD *)v28 - 2) = v29;
        operator delete(v29);
      }
      if (*(v28 - 25) < 0)
        operator delete(*((void **)v28 - 6));
      v27 -= 48;
    }
    while (v27);
    v26 = (char *)v124;
  }
  if (v26 != v126)
    free(v26);
  if (v127 != &v129)
    free(v127);
  v30 = v144;
  v144 = 0;
  if (v30)
    MEMORY[0x1CAA32F9C](v30, 0x20C8093837F09);
  if (v140 == (_DWORD *)&unk_1C866F1C0)
  {
    sub_1C4773C74(&v141);
  }
  else if ((v140[2] - 64) <= 0xFFFFFF7F && v141)
  {
    MEMORY[0x1CAA32F9C](v141, 0x1000C8000313F17);
  }
  if (v138 >= 0x41 && v137)
    MEMORY[0x1CAA32F9C](v137, 0x1000C8000313F17);
  if (SHIBYTE(v136) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v134) < 0)
    operator delete(*((void **)&v133 + 1));
  if (v114)
    operator delete(v114);
  if (v147 != v149)
    free(v147);
  if (v151 != v153)
    free(v151);
  return v9 & 1;
}

uint64_t llvm::LLParser::parseLoad(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  llvm::LLLexer *v6;
  int v7;
  int v8;
  char *v9;
  uint64_t v10;
  char *v12;
  llvm::Value *v13;
  uint64_t v14;
  llvm::Type *v15;
  unsigned int v16;
  __int16 v17;
  llvm::Type *v18;
  char v19;
  char v20;
  _DWORD *v21;
  llvm::Instruction *v22;
  const char *v23;
  void *__p[2];
  char v25;
  __int16 v26;
  void **v27;
  void **v28;
  uint64_t v29;
  int v30;
  _WORD v31[16];
  llvm::Type *v32;
  unsigned __int8 v33;
  int v34;
  unsigned __int8 v35;
  __int16 v36;
  llvm::Value *v37;

  v36 = 0;
  v35 = 0;
  v34 = 0;
  v33 = 1;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v7 = *((_DWORD *)this + 56);
  v8 = v7;
  if (v7 == 69)
  {
    v8 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
    *((_DWORD *)this + 56) = v8;
  }
  if (v8 == 68)
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v6);
  v32 = 0;
  v9 = (char *)*((_QWORD *)this + 27);
  v27 = (void **)"expected type";
  v31[0] = 259;
  if ((llvm::LLParser::parseType(this, &v32, (const llvm::Twine *)&v27, 0) & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken((uint64_t)this, 4, "expected comma after load's type") & 1) != 0)
    return 1;
  v37 = 0;
  v12 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v37, a3) & 1) != 0
    || v7 == 69
    && ((llvm::LLParser::parseScope((uint64_t **)this, &v33) & 1) != 0
     || (llvm::LLParser::parseOrdering((uint64_t)this, &v34) & 1) != 0))
  {
    return 1;
  }
  if ((llvm::LLParser::parseOptionalCommaAlign((uint64_t)this, &v36, &v35) & 1) != 0)
    return 1;
  v13 = v37;
  v14 = *(_QWORD *)v37;
  if (*(_BYTE *)(*(_QWORD *)v37 + 8) != 15 || (v15 = v32, v16 = *((unsigned __int8 *)v32 + 8), v16 == 14) || v16 == 7)
  {
    v23 = "load operand must be a pointer to a first class type";
LABEL_35:
    v27 = (void **)v23;
    v31[0] = 259;
    return llvm::LLLexer::Error((uint64_t)v6, v12, (llvm::Twine *)&v27);
  }
  if (v7 == 69 && !HIBYTE(v36))
  {
    v23 = "atomic load must have explicit non-zero alignment";
    goto LABEL_35;
  }
  v17 = v34;
  if ((v34 - 5) <= 1)
  {
    v23 = "atomic load cannot use Release ordering";
    goto LABEL_35;
  }
  v18 = *(llvm::Type **)(v14 + 24);
  if (!v18 || v18 == v32)
  {
    v27 = (void **)v31;
    v28 = (void **)v31;
    v29 = 4;
    v30 = 0;
    if (HIBYTE(v36))
    {
      v19 = v36;
LABEL_29:
      v21 = operator new(0x60uLL);
      v22 = (llvm::Instruction *)(v21 + 8);
      v21[13] = v21[13] & 0x38000000 | 1;
      *(_QWORD *)v21 = 0;
      *((_QWORD *)v21 + 1) = 0;
      *((_QWORD *)v21 + 2) = 0;
      *((_QWORD *)v21 + 3) = v21 + 8;
      v26 = 257;
      llvm::LoadInst::LoadInst((uint64_t)(v21 + 8), (uint64_t)v15, (uint64_t)v13, (uint64_t)__p, v8 == 68, v19, v17, v33, 0);
      *a2 = v22;
      v10 = 2 * v35;
      goto LABEL_30;
    }
    if (v16 <= 0x11)
    {
      if (((1 << v16) & 0xAC7F) != 0)
      {
LABEL_28:
        llvm::DataLayout::getAlignment(*((_QWORD *)this + 41) + 272, (uint64_t)v15);
        v19 = v20;
        goto LABEL_29;
      }
      if (((1 << v16) & 0x30000) != 0)
        goto LABEL_27;
    }
    if ((v16 & 0xFE) == 0x12 || v16 == 21)
    {
LABEL_27:
      if ((llvm::Type::isSizedDerivedType((uint64_t)v32, (llvm::SmallPtrSetImplBase *)&v27) & 1) != 0)
        goto LABEL_28;
    }
    __p[0] = "loading unsized types is not allowed";
    v26 = 259;
    v10 = llvm::LLLexer::Error((uint64_t)v6, v9, (llvm::Twine *)__p);
LABEL_30:
    if (v28 != v27)
      free(v28);
    return v10;
  }
  sub_1C4FB6A84((uint64_t)__p, v32, **(llvm::Type ***)(v14 + 16));
  v31[0] = 260;
  v27 = __p;
  v10 = llvm::LLLexer::Error((uint64_t)v6, v9, (llvm::Twine *)&v27);
  if (v25 < 0)
    operator delete(__p[0]);
  return v10;
}

uint64_t llvm::LLParser::parseStore(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  llvm::LLLexer *v6;
  int v7;
  int v8;
  char *v9;
  uint64_t v10;
  char *v12;
  llvm::Value *v13;
  llvm::Value *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v18;
  __int16 v19;
  char v20;
  char v21;
  _DWORD *v22;
  llvm::Instruction *v23;
  const char *v24;
  uint64_t v25;
  char *v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  _WORD v33[19];
  unsigned __int8 v34;
  int v35;
  unsigned __int8 v36;
  __int16 v37;
  llvm::Value *v38;
  llvm::Value *v39;

  v37 = 0;
  v36 = 0;
  v35 = 0;
  v34 = 1;
  v6 = (llvm::LLParser *)((char *)this + 168);
  v7 = *((_DWORD *)this + 56);
  v8 = v7;
  if (v7 == 69)
  {
    v8 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
    *((_DWORD *)this + 56) = v8;
  }
  if (v8 == 68)
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken(v6);
  v39 = 0;
  v9 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v39, a3) & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' after store operand") & 1) != 0)
    return 1;
  v38 = 0;
  v12 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v38, a3) & 1) != 0
    || v7 == 69
    && ((llvm::LLParser::parseScope((uint64_t **)this, &v34) & 1) != 0
     || (llvm::LLParser::parseOrdering((uint64_t)this, &v35) & 1) != 0))
  {
    return 1;
  }
  if ((llvm::LLParser::parseOptionalCommaAlign((uint64_t)this, &v37, &v36) & 1) != 0)
    return 1;
  v13 = v38;
  if (*(_BYTE *)(*(_QWORD *)v38 + 8) != 15)
  {
    v29 = "store operand must be a pointer";
    v33[0] = 259;
    v25 = (uint64_t)v6;
    v26 = v12;
    return llvm::LLLexer::Error(v25, v26, (llvm::Twine *)&v29);
  }
  v14 = v39;
  v15 = *(_QWORD *)v39;
  v16 = *(unsigned __int8 *)(*(_QWORD *)v39 + 8);
  if (v16 == 14 || v16 == 7)
  {
    v24 = "store operand must be a first class value";
LABEL_40:
    v29 = v24;
    v33[0] = 259;
    v25 = (uint64_t)v6;
    v26 = v9;
    return llvm::LLLexer::Error(v25, v26, (llvm::Twine *)&v29);
  }
  v18 = *(_QWORD *)(*(_QWORD *)v38 + 24);
  if (v18 && v18 != v15)
  {
    v24 = "stored value and pointer type do not match";
    goto LABEL_40;
  }
  if (v7 == 69 && !HIBYTE(v37))
  {
    v24 = "atomic store must have explicit non-zero alignment";
    goto LABEL_40;
  }
  v19 = v35;
  if ((v35 & 0xFFFFFFFD) == 4)
  {
    v24 = "atomic store cannot use Acquire ordering";
    goto LABEL_40;
  }
  v29 = (const char *)v33;
  v30 = (char *)v33;
  v31 = 4;
  v32 = 0;
  if (HIBYTE(v37))
  {
    v20 = v37;
LABEL_32:
    v22 = operator new(0x80uLL);
    v22[21] = v22[21] & 0x38000000 | 2;
    v23 = (llvm::Instruction *)(v22 + 16);
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = 0;
    *((_QWORD *)v22 + 3) = v22 + 16;
    *((_QWORD *)v22 + 4) = 0;
    *((_QWORD *)v22 + 5) = 0;
    *((_QWORD *)v22 + 6) = 0;
    *((_QWORD *)v22 + 7) = v22 + 16;
    llvm::StoreInst::StoreInst((uint64_t)(v22 + 16), (uint64_t)v14, (uint64_t)v13, v8 == 68, v20, v19, v34, 0);
    *a2 = v23;
    v10 = 2 * v36;
    goto LABEL_33;
  }
  if (v16 <= 0x11)
  {
    if (((1 << v16) & 0xAC7F) != 0)
    {
LABEL_31:
      llvm::DataLayout::getAlignment(*((_QWORD *)this + 41) + 272, v15);
      v20 = v21;
      goto LABEL_32;
    }
    if (((1 << v16) & 0x30000) != 0)
      goto LABEL_47;
  }
  if ((v16 & 0xFE) == 0x12 || v16 == 21)
  {
LABEL_47:
    if (llvm::Type::isSizedDerivedType(v15, (llvm::SmallPtrSetImplBase *)&v29))
    {
      v15 = *(_QWORD *)v14;
      goto LABEL_31;
    }
  }
  v27 = "storing unsized types is not allowed";
  v28 = 259;
  v10 = llvm::LLLexer::Error((uint64_t)v6, v9, (llvm::Twine *)&v27);
LABEL_33:
  if (v30 != v29)
    free(v30);
  return v10;
}

uint64_t llvm::LLParser::parseCmpXchg(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  int v6;
  int v7;
  char *v8;
  char *v10;
  char *v11;
  __int16 v12;
  __int16 v13;
  uint64_t ***v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  int v19;
  const char *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int16 v28;
  unsigned __int8 v29;
  llvm::Instruction *v30;
  const char *v31;
  const char *v32;
  char *v33;
  char *v34;
  llvm::Value *v35;
  const char *v36;
  __int16 v37;
  __int16 v38;
  unsigned __int8 v39;
  unsigned int v40;
  unsigned int v41;
  unsigned __int8 v42;
  llvm::Value *v43;
  llvm::Value *v44;
  llvm::Value *v45;

  v42 = 0;
  v40 = 0;
  v41 = 0;
  v39 = 1;
  v38 = 0;
  v6 = *((_DWORD *)this + 56);
  v7 = v6;
  if (v6 == 31)
  {
    v7 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
    *((_DWORD *)this + 56) = v7;
  }
  if (v7 == 68)
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  v45 = 0;
  v8 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v45, a3) & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' after cmpxchg address") & 1) != 0)
    return 1;
  v44 = 0;
  v10 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v44, a3) & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken((uint64_t)this, 4, "expected ',' after cmpxchg cmp operand") & 1) != 0)
    return 1;
  v43 = 0;
  v11 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v43, a3) & 1) != 0
    || (llvm::LLParser::parseScope((uint64_t **)this, &v39) & 1) != 0
    || (llvm::LLParser::parseOrdering((uint64_t)this, &v41) & 1) != 0
    || (llvm::LLParser::parseOrdering((uint64_t)this, &v40) & 1) != 0
    || (llvm::LLParser::parseOptionalCommaAlign((uint64_t)this, &v38, &v42) & 1) != 0)
  {
    return 1;
  }
  v12 = v41;
  if (v41 <= 1)
  {
    v31 = "invalid cmpxchg success ordering";
    goto LABEL_36;
  }
  v13 = v40;
  if (v40 <= 6 && ((1 << v40) & 0x63) != 0)
  {
    v31 = "invalid cmpxchg failure ordering";
LABEL_36:
    v36 = v31;
    v37 = 259;
    v33 = (char *)this + 168;
    v34 = (char *)*((_QWORD *)this + 27);
    return llvm::LLLexer::Error((uint64_t)v33, v34, (llvm::Twine *)&v36);
  }
  v35 = v45;
  if (*(_BYTE *)(*(_QWORD *)v45 + 8) != 15)
  {
    v36 = "cmpxchg operand must be a pointer";
    v37 = 259;
    v33 = (char *)this + 168;
    v34 = v8;
    return llvm::LLLexer::Error((uint64_t)v33, v34, (llvm::Twine *)&v36);
  }
  v14 = (uint64_t ***)v44;
  v15 = *(_QWORD *)v44;
  v16 = *(_QWORD *)(*(_QWORD *)v45 + 24);
  if (v16 && v16 != v15)
  {
    v36 = "compare value and pointer type do not match";
    v37 = 259;
    v33 = (char *)this + 168;
    v34 = v10;
    return llvm::LLLexer::Error((uint64_t)v33, v34, (llvm::Twine *)&v36);
  }
  v17 = v43;
  v18 = *(_QWORD *)v43;
  if (v16 && v16 != v18)
  {
    v32 = "new value and pointer type do not match";
    goto LABEL_41;
  }
  if (v15 != v18)
  {
    v32 = "compare value and new value type do not match";
    goto LABEL_41;
  }
  v19 = *(unsigned __int8 *)(v15 + 8);
  if (v19 == 14 || v19 == 7)
  {
    v32 = "cmpxchg operand must be a first class value";
LABEL_41:
    v36 = v32;
    v37 = 259;
    v33 = (char *)this + 168;
    v34 = v11;
    return llvm::LLLexer::Error((uint64_t)v33, v34, (llvm::Twine *)&v36);
  }
  sub_1C4768AD0(*(_QWORD *)(*((_QWORD *)a3 + 1) + 40) + 272, v15);
  v22 = (unint64_t)(v21 + 7) >> 3;
  if ((_DWORD)v20 == 1)
  v23 = __clz(v22);
  v24 = operator new(0xA0uLL);
  v25 = 0;
  v26 = (uint64_t)(v24 + 24);
  v24[29] = v24[29] & 0x38000000 | 3;
  do
  {
    v27 = &v24[v25];
    *v27 = 0;
    v27[1] = 0;
    v27[2] = 0;
    v27[3] = v26;
    v25 += 8;
  }
  while (v25 != 24);
  v28 = v7 == 68;
  v29 = 63 - v23;
  if (HIBYTE(v38))
    v29 = v38;
  v30 = (llvm::Instruction *)llvm::AtomicCmpXchgInst::AtomicCmpXchgInst(v26, (uint64_t)v35, v14, (uint64_t)v17, v29, v12, v13, v39, 0);
  *((_WORD *)v24 + 57) = v28 | (2 * (v6 == 31)) | *((_WORD *)v24 + 57) & 0xFFFC;
  *a2 = v30;
  return 2 * v42;
}

uint64_t llvm::LLParser::parseGetElementPtr(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  int v6;
  char *v7;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  llvm::Type *v15;
  BOOL v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  llvm::Value *v21;
  uint64_t v22;
  char *v23;
  llvm::Value *v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  llvm::Type **v33;
  uint64_t v34;
  llvm::GetElementPtrInst *TypeAtIndex;
  llvm::Type *v36;
  llvm::Value *v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  _QWORD *v41;
  _QWORD *v42;
  llvm::Value *v43;
  uint64_t v44;
  int v45;
  llvm::Type **v46;
  uint64_t v47;
  llvm::Type *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t v52;
  uint64_t ***v53;
  _QWORD *v54;
  const char *v56;
  char *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  char *v62;
  int v63;
  uint64_t *v64;
  _QWORD v65[4];
  __int16 v66;
  void *__p;
  _WORD *v68;
  uint64_t v69;
  int v70;
  _WORD v71[16];
  llvm::Type *v72;
  llvm::Value *v73;
  llvm::Value *v74;
  char v75;
  void *p_p;
  uint64_t v77;
  _BYTE v78[16];
  __int16 v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v73 = 0;
  v74 = 0;
  v6 = *((_DWORD *)this + 56);
  if (v6 == 88)
    *((_DWORD *)this + 56) = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
  v72 = 0;
  v7 = (char *)*((_QWORD *)this + 27);
  p_p = "expected type";
  v79 = 259;
  if ((llvm::LLParser::parseType(this, &v72, (const llvm::Twine *)&p_p, 0) & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken((uint64_t)this, 4, "expected comma after getelementptr's type") & 1) != 0)
    return 1;
  v10 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v74, a3) & 1) != 0)
    return 1;
  v64 = (uint64_t *)v74;
  v11 = *(_QWORD *)v74;
  if ((*(_DWORD *)(*(_QWORD *)v74 + 8) & 0xFE) == 0x12)
  {
    v12 = **(_QWORD **)(v11 + 16);
    v13 = *(unsigned __int8 *)(v12 + 8);
  }
  else
  {
    v13 = *(_DWORD *)(*(_QWORD *)v74 + 8);
    v12 = *(_QWORD *)v74;
  }
  if (v13 != 15)
  {
    p_p = "base of getelementptr must be a pointer";
    v79 = 259;
    return llvm::LLLexer::Error((uint64_t)this + 168, v10, (llvm::Twine *)&p_p);
  }
  v62 = v10;
  v14 = (unsigned __int8 *)v72;
  v15 = *(llvm::Type **)(v12 + 24);
  if (v15)
    v16 = v15 == v72;
  else
    v16 = 1;
  if (!v16)
  {
    sub_1C4FB6A84((uint64_t)&__p, v72, **(llvm::Type ***)(v12 + 16));
    v79 = 260;
    p_p = &__p;
    v8 = llvm::LLLexer::Error((uint64_t)this + 168, v7, (llvm::Twine *)&p_p);
    if (SHIBYTE(v69) < 0)
      operator delete(__p);
    return v8;
  }
  v17 = v78;
  p_p = v78;
  v77 = 0x1000000000;
  if ((*(_DWORD *)(v11 + 8) & 0xFE) == 0x12)
    v18 = *(unsigned int *)(v11 + 32) | ((unint64_t)(*(_DWORD *)(v11 + 8) == 19) << 32);
  else
    v18 = 0;
  if (*((_DWORD *)this + 56) == 4)
  {
    v63 = v18;
    v19 = HIDWORD(v18);
    while (1)
    {
      v20 = llvm::LLLexer::LexToken((llvm::LLParser *)((char *)this + 168));
      *((_DWORD *)this + 56) = v20;
      if (v20 == 441)
        break;
      v22 = (uint64_t)v17;
      v23 = (char *)*((_QWORD *)this + 27);
      if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v73, a3) & 1) != 0)
      {
        v8 = 1;
        goto LABEL_82;
      }
      v24 = v73;
      v25 = *(_QWORD *)v73;
      v26 = *(_DWORD *)(*(_QWORD *)v73 + 8);
      if ((*(_DWORD *)(*(_QWORD *)v73 + 8) & 0xFE) == 0x12)
      {
        if (*(_BYTE *)(**(_QWORD **)(v25 + 16) + 8) != 13)
          goto LABEL_84;
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v26 == 19;
        if (v63 | v19)
        {
          if (v63 != v27 || (_DWORD)v19 != v28)
          {
            v57 = "getelementptr vector index has a wrong number of elements";
            goto LABEL_85;
          }
        }
        else
        {
          v63 = v27;
          LODWORD(v19) = v28;
        }
      }
      else if (v26 != 13)
      {
LABEL_84:
        v57 = "getelementptr index must be an integer";
LABEL_85:
        __p = v57;
        v71[0] = 259;
        v8 = llvm::LLLexer::Error((uint64_t)this + 168, v23, (llvm::Twine *)&__p);
LABEL_82:
        v17 = (_BYTE *)v22;
        goto LABEL_65;
      }
      v30 = v77;
      v17 = (_BYTE *)v22;
      if (v77 >= (unint64_t)HIDWORD(v77))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&p_p, v22, v77 + 1, 8);
        v30 = v77;
      }
      *((_QWORD *)p_p + v30) = v24;
      v31 = v77 + 1;
      LODWORD(v77) = v77 + 1;
      if (*((_DWORD *)this + 56) != 4)
      {
        v8 = 0;
        goto LABEL_41;
      }
    }
    v8 = 2;
    v31 = v77;
LABEL_41:
    __p = v71;
    v68 = v71;
    v69 = 4;
    v70 = 0;
    if (!v31)
      goto LABEL_48;
    v32 = v14[8];
    if (v32 <= 0x11)
    {
      if (((1 << v32) & 0xAC7F) != 0)
      {
LABEL_44:
        v33 = (llvm::Type **)((char *)p_p + 8);
        v34 = 8 * v31 - 8;
        TypeAtIndex = (llvm::GetElementPtrInst *)v14;
        while (v34)
        {
          v36 = *v33++;
          TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v36, v21);
          v34 -= 8;
          if (!TypeAtIndex)
            goto LABEL_79;
        }
        v31 = v77;
        goto LABEL_51;
      }
      if (((1 << v32) & 0x30000) != 0)
        goto LABEL_76;
    }
    if ((v32 & 0xFE) == 0x12 || v32 == 21)
    {
LABEL_76:
      if ((llvm::Type::isSizedDerivedType((uint64_t)v14, (llvm::SmallPtrSetImplBase *)&__p) & 1) != 0)
      {
        v31 = v77;
        if (!(_DWORD)v77)
          goto LABEL_51;
        goto LABEL_44;
      }
    }
    v56 = "base element of getelementptr must be sized";
LABEL_80:
    v65[0] = v56;
    v66 = 259;
    v8 = llvm::LLLexer::Error((uint64_t)this + 168, v62, (llvm::Twine *)v65);
    goto LABEL_63;
  }
  v8 = 0;
  __p = v71;
  v68 = v71;
  v69 = 4;
  v70 = 0;
LABEL_48:
  if (!v14)
  {
LABEL_79:
    v56 = "invalid getelementptr indices";
    goto LABEL_80;
  }
  v31 = 0;
LABEL_51:
  v37 = (llvm::Value *)p_p;
  v38 = v31;
  v39 = v31 + 1;
  v40 = v31 == -1;
  v66 = 257;
  v41 = operator new(32 * v39 + 80);
  v42 = &v41[4 * v39];
  *((_DWORD *)v42 + 5) = *((_DWORD *)v42 + 5) & 0x38000000 | v39 & 0x7FFFFFF;
  if (!v40)
  {
    do
    {
      *v41 = 0;
      v41[1] = 0;
      v41[2] = 0;
      v41[3] = v42;
      v41 += 4;
    }
    while (v41 != v42);
  }
  sub_1C4774650((llvm::GetElementPtrInst *)v14, v64, v37, v38);
  *v42 = v44;
  v42[1] = 0;
  v45 = *((_DWORD *)v42 + 5) & 0xC0000000 | v39 & 0x7FFFFFF;
  *((_DWORD *)v42 + 4) = 62;
  *((_DWORD *)v42 + 5) = v45;
  *(_OWORD *)(v42 + 3) = 0u;
  *(_OWORD *)(v42 + 5) = 0u;
  *((_DWORD *)v42 + 14) = 0;
  v42[8] = v14;
  if ((_DWORD)v38)
  {
    v46 = (llvm::Type **)((char *)v37 + 8);
    v47 = 8 * v38 - 8;
    v17 = v78;
    do
    {
      if (!v47)
        break;
      v48 = *v46++;
      v14 = (unsigned __int8 *)llvm::GetElementPtrInst::getTypeAtIndex((llvm::GetElementPtrInst *)v14, v48, v43);
      v47 -= 8;
    }
    while (v14);
    v49 = *((_DWORD *)v42 + 5) & 0x7FFFFFF;
  }
  else
  {
    v49 = 1;
    v17 = v78;
  }
  v42[9] = v14;
  v50 = -v49;
  v51 = (uint64_t **)&v42[-4 * v49];
  if (*v51)
  {
    v58 = &v42[4 * v50];
    v60 = (_QWORD *)v58[2];
    v59 = v58 + 2;
    *v60 = *(v59 - 1);
    v61 = *(v59 - 1);
    if (v61)
      *(_QWORD *)(v61 + 16) = *v59;
  }
  *v51 = v64;
  v53 = (uint64_t ***)(v64 + 1);
  v52 = v64[1];
  v54 = &v42[4 * v50];
  v54[1] = v52;
  if (v52)
    *(_QWORD *)(v52 + 16) = v54 + 1;
  v54[2] = v53;
  *v53 = v51;
  sub_1C5382FD4((uint64_t)&v75, (uint64_t *)v37, (uint64_t *)v37 + v38, (uint64_t)&v42[-4 * (*((_DWORD *)v42 + 5) & 0x7FFFFFF) + 4]);
  llvm::Value::setName((uint64_t ***)v42, (uint64_t)v65);
  *a2 = (llvm::Instruction *)v42;
  if (v6 == 88)
    *((_BYTE *)v42 + 17) |= 2u;
LABEL_63:
  if (v68 != __p)
    free(v68);
LABEL_65:
  if (p_p != v17)
    free(p_p);
  return v8;
}

uint64_t llvm::LLParser::parseInsertValue(llvm::LLParser *this, llvm::Instruction **a2, llvm::LLParser::PerFunctionState *a3)
{
  char *v6;
  uint64_t v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  int v14;
  uint64_t *v15;
  const char *v16;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  void **v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  void *v27[2];
  char v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  void *__p[2];
  std::string::size_type v34;
  _QWORD v35[4];
  __int16 v36;
  unsigned __int8 v37;
  llvm::Value *v38;
  llvm::Value *v39;
  unsigned int *v40;
  uint64_t v41;
  _QWORD v42[3];

  v42[2] = *MEMORY[0x1E0C80C00];
  v39 = 0;
  v40 = (unsigned int *)v42;
  v41 = 0x400000000;
  v6 = (char *)*((_QWORD *)this + 27);
  if ((llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v39, a3) & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)this, 4, "expected comma after insertvalue operand") & 1) != 0
    || (v38 = 0,
        v9 = (char *)*((_QWORD *)this + 27),
        (llvm::LLParser::parseTypeAndValue((uint64_t **)this, &v38, a3) & 1) != 0)
    || (v37 = 0, (llvm::LLParser::parseIndexList((uint64_t)this, (uint64_t)&v40, &v37) & 1) != 0))
  {
    v7 = 1;
    goto LABEL_3;
  }
  v10 = *(_QWORD *)v39;
  if ((*(_DWORD *)(*(_QWORD *)v39 + 8) & 0xFE) != 0x10)
  {
    v16 = "insertvalue operand must be aggregate type";
LABEL_25:
    v35[0] = v16;
    v36 = 259;
    v7 = llvm::LLLexer::Error((uint64_t)this + 168, v6, (llvm::Twine *)v35);
    goto LABEL_3;
  }
  if ((_DWORD)v41)
  {
    v11 = 4 * v41;
    v12 = v40;
    do
    {
      v13 = *v12;
      v14 = *(unsigned __int8 *)(v10 + 8);
      if (v10 && v14 == 17)
      {
        if (*(_QWORD *)(v10 + 32) <= v13)
          goto LABEL_24;
        v15 = (uint64_t *)(v10 + 24);
      }
      else
      {
        if (!v10 || v14 != 16 || v13 >= *(_DWORD *)(v10 + 12))
          goto LABEL_24;
        v15 = (uint64_t *)(*(_QWORD *)(v10 + 16) + 8 * v13);
      }
      v10 = *v15;
      ++v12;
      v11 -= 4;
    }
    while (v11);
    if (v10)
      goto LABEL_26;
LABEL_24:
    v16 = "invalid indices for insertvalue";
    goto LABEL_25;
  }
LABEL_26:
  if (v10 == *(_QWORD *)v38)
  {
    v36 = 257;
    *a2 = (llvm::Instruction *)sub_1C61BD4C4((llvm::Type **)v39, (uint64_t)v38, v40, v41, (uint64_t)v35, 0);
    v7 = 2 * v37;
  }
  else
  {
    sub_1C4FB7C44((uint64_t)&v29, *(llvm::Type **)v38);
    v17 = std::string::insert(&v29, 0, "insertvalue operand and field disagree in type: '");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v30.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v30.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v19 = std::string::append(&v30, "' instead of '");
    v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    sub_1C4FB7C44((uint64_t)v27, (llvm::Type *)v10);
    if (v28 >= 0)
      v21 = v27;
    else
      v21 = (void **)v27[0];
    if (v28 >= 0)
      v22 = v28 & 0x7F;
    else
      v22 = (std::string::size_type)v27[1];
    v23 = std::string::append(&v31, (const std::string::value_type *)v21, v22);
    v24 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&v32, "'");
    v26 = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v34 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v36 = 260;
    v35[0] = __p;
    v7 = llvm::LLLexer::Error((uint64_t)this + 168, v9, (llvm::Twine *)v35);
    if (SHIBYTE(v34) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (v28 < 0)
      operator delete(v27[0]);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
LABEL_3:
  if (v40 != (unsigned int *)v42)
    free(v40);
  return v7;
}

llvm::Value *sub_1C4FC8748(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char *v12;
  char *v13;
  uint64_t v14;
  llvm::Value *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  llvm::ValueSymbolTable *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v12 = (char *)operator new(0xA0uLL);
  v13 = v12;
  v14 = 0;
  v15 = (llvm::Value *)(v12 + 96);
  *((_DWORD *)v12 + 29) = *((_DWORD *)v12 + 29) & 0x38000000 | 3;
  do
  {
    v16 = &v12[v14];
    *(_QWORD *)v16 = 0;
    *((_QWORD *)v16 + 1) = 0;
    *((_QWORD *)v16 + 2) = 0;
    *((_QWORD *)v16 + 3) = v15;
    v14 += 32;
  }
  while (v14 != 96);
  v17 = *a2;
  *(_OWORD *)(v12 + 120) = 0u;
  v18 = v12 + 120;
  *((_QWORD *)v12 + 12) = v17;
  *((_QWORD *)v12 + 13) = 0;
  v19 = *((_DWORD *)v12 + 29) & 0xC0000000 | 3;
  *((_DWORD *)v12 + 28) = 85;
  *((_DWORD *)v12 + 29) = v19;
  *(_OWORD *)(v12 + 136) = 0u;
  *((_DWORD *)v12 + 38) = 0;
  if (a5)
  {
    v31 = *(_QWORD *)(a5 + 40);
    v32 = (uint64_t *)(a5 + 24);
    *((_QWORD *)v12 + 17) = v31;
    *(_WORD *)(v31 + 18) &= ~0x8000u;
    if ((v12[119] & 0x10) != 0)
    {
      v34 = *(_QWORD *)(v31 + 56);
      if (v34)
      {
        v35 = *(llvm::ValueSymbolTable **)(v34 + 104);
        if (v35)
          llvm::ValueSymbolTable::reinsertValue(v35, v15);
      }
    }
    v33 = *v32;
    *((_QWORD *)v13 + 15) = *v32;
    *((_QWORD *)v13 + 16) = v32;
    *(_QWORD *)(v33 + 8) = v18;
    *v32 = (uint64_t)v18;
  }
  if (*(_QWORD *)v13)
  {
    **((_QWORD **)v13 + 2) = *((_QWORD *)v13 + 1);
    v36 = *((_QWORD *)v13 + 1);
    if (v36)
      *(_QWORD *)(v36 + 16) = *((_QWORD *)v13 + 2);
  }
  *(_QWORD *)v13 = a1;
  if (a1)
  {
    v22 = *(_QWORD *)(a1 + 8);
    v21 = (_QWORD *)(a1 + 8);
    v20 = v22;
    *((_QWORD *)v13 + 1) = v22;
    if (v22)
      *(_QWORD *)(v20 + 16) = v13 + 8;
    *((_QWORD *)v13 + 2) = v21;
    *v21 = v13;
  }
  if (*((_QWORD *)v13 + 4))
  {
    **((_QWORD **)v13 + 6) = *((_QWORD *)v13 + 5);
    v37 = *((_QWORD *)v13 + 5);
    if (v37)
      *(_QWORD *)(v37 + 16) = *((_QWORD *)v13 + 6);
  }
  v24 = a2 + 1;
  v23 = a2[1];
  *((_QWORD *)v13 + 5) = v23;
  *((_QWORD *)v13 + 4) = a2;
  if (v23)
    *(_QWORD *)(v23 + 16) = v13 + 40;
  v25 = v13 + 64;
  v26 = *((_QWORD *)v13 + 8);
  *((_QWORD *)v13 + 6) = v24;
  *v24 = v13 + 32;
  if (v26)
  {
    **((_QWORD **)v13 + 10) = *((_QWORD *)v13 + 9);
    v38 = *((_QWORD *)v13 + 9);
    if (v38)
      *(_QWORD *)(v38 + 16) = *((_QWORD *)v13 + 10);
  }
  *v25 = a3;
  if (a3)
  {
    v29 = *(_QWORD *)(a3 + 8);
    v28 = (_QWORD *)(a3 + 8);
    v27 = v29;
    *((_QWORD *)v13 + 9) = v29;
    if (v29)
      *(_QWORD *)(v27 + 16) = v13 + 72;
    *((_QWORD *)v13 + 10) = v28;
    *v28 = v25;
  }
  llvm::Value::setName((uint64_t ***)v15, a4);
  if (a6)
    llvm::Instruction::copyMetadata((uint64_t)v15, a6, 0, 0);
  return v15;
}

llvm::Value *sub_1C4FC8964(uint64_t *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v10;
  char *v11;
  llvm::Value *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  llvm::ValueSymbolTable *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v10 = (char *)operator new(0x80uLL);
  v11 = v10;
  v12 = (llvm::Value *)(v10 + 32);
  *((_DWORD *)v10 + 13) = *((_DWORD *)v10 + 13) & 0x38000000 | 1;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 2) = 0;
  *((_QWORD *)v10 + 3) = v10 + 32;
  v13 = *a1;
  if (!a3)
  {
    v18 = *a1;
    goto LABEL_10;
  }
  v14 = 4 * a3;
  v15 = a2;
  while (1)
  {
    v16 = *v15;
    v17 = *(unsigned __int8 *)(v13 + 8);
    if (!v13 || v17 != 17)
      break;
    if (*(_QWORD *)(v13 + 32) <= v16)
      goto LABEL_29;
    v19 = (uint64_t *)(v13 + 24);
LABEL_9:
    v13 = *v19;
    ++v15;
    v18 = v13;
    v14 -= 4;
    if (!v14)
      goto LABEL_10;
  }
  v18 = 0;
  if (!v13 || v17 != 16)
    goto LABEL_10;
  if (v16 < *(_DWORD *)(v13 + 12))
  {
    v19 = (uint64_t *)(*(_QWORD *)(v13 + 16) + 8 * v16);
    goto LABEL_9;
  }
LABEL_29:
  v18 = 0;
LABEL_10:
  *(_OWORD *)(v10 + 56) = 0u;
  v20 = v10 + 56;
  *((_QWORD *)v10 + 4) = v18;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 6) = 0x10000005CLL;
  *(_OWORD *)(v10 + 72) = 0u;
  *((_DWORD *)v10 + 22) = 0;
  if (a5)
  {
    v27 = *(_QWORD *)(a5 + 40);
    v28 = (uint64_t *)(a5 + 24);
    *((_QWORD *)v10 + 9) = v27;
    *(_WORD *)(v27 + 18) &= ~0x8000u;
    if ((v10[55] & 0x10) != 0
      && (v30 = *(_QWORD *)(v27 + 56)) != 0
      && (v31 = *(llvm::ValueSymbolTable **)(v30 + 104)) != 0)
    {
      llvm::ValueSymbolTable::reinsertValue(v31, v12);
      v32 = *(_QWORD *)v11;
      v33 = *v28;
      *((_QWORD *)v11 + 7) = *v28;
      *((_QWORD *)v11 + 8) = v28;
      *(_QWORD *)(v33 + 8) = v20;
      *v28 = (uint64_t)v20;
      if (v32)
      {
        **((_QWORD **)v11 + 2) = *((_QWORD *)v11 + 1);
        v34 = *((_QWORD *)v11 + 1);
        if (v34)
          *(_QWORD *)(v34 + 16) = *((_QWORD *)v11 + 2);
      }
    }
    else
    {
      v29 = *v28;
      *((_QWORD *)v11 + 7) = *v28;
      *((_QWORD *)v11 + 8) = v28;
      *(_QWORD *)(v29 + 8) = v20;
      *v28 = (uint64_t)v20;
    }
  }
  *(_QWORD *)v11 = a1;
  v23 = a1[1];
  v22 = a1 + 1;
  v21 = v23;
  *((_QWORD *)v11 + 1) = v23;
  if (v23)
    *(_QWORD *)(v21 + 16) = v11 + 8;
  *((_QWORD *)v11 + 2) = v22;
  *((_QWORD *)v11 + 12) = v11 + 112;
  *v22 = v11;
  *((_QWORD *)v11 + 13) = 0x400000000;
  v24 = 4 * a3;
  if ((unint64_t)(4 * a3) >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v11 + 96), (uint64_t)(v11 + 112), v24 >> 2, 4);
    v25 = *((_DWORD *)v11 + 26);
  }
  else
  {
    v25 = 0;
  }
  if (a3)
  {
    memcpy((void *)(*((_QWORD *)v11 + 12) + 4 * v25), a2, 4 * a3);
    v25 = *((_DWORD *)v11 + 26);
  }
  *((_DWORD *)v11 + 26) = v25 + ((unint64_t)v24 >> 2);
  llvm::Value::setName((uint64_t ***)v12, a4);
  return v12;
}

uint64_t llvm::LLParser::sortUseListOrder(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, char *a5)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t i;
  unsigned int v11;
  unint64_t v12;
  int v13;
  int v14;
  _QWORD *v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  __int16 v48;
  _QWORD v49[2];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
  {
    v45 = (uint64_t)"value has no uses";
    v48 = 259;
    return llvm::LLLexer::Error(a1 + 168, a5, (llvm::Twine *)&v45);
  }
  v45 = 1;
  for (i = 8; i != 264; i += 16)
    *(uint64_t *)((char *)&v45 + i) = -4096;
  v11 = 0;
  do
  {
    v12 = v11 + 1;
    if (a4 < v12)
      break;
    v13 = *(_DWORD *)(a3 + 4 * v11);
    v49[0] = v6;
    if ((v45 & 1) != 0)
    {
      v14 = 16;
      v15 = &v46;
    }
    else
    {
      v14 = v47;
      if (!v47)
      {
        v24 = 0;
LABEL_22:
        v18 = sub_1C4FD0314((uint64_t)&v45, (uint64_t)v49, v49, v24);
        *v18 = v49[0];
        *((_DWORD *)v18 + 2) = 0;
        goto LABEL_23;
      }
      v15 = v46;
    }
    v16 = v14 - 1;
    v17 = v16 & ((v6 >> 4) ^ (v6 >> 9));
    v18 = &v15[2 * v17];
    v19 = *v18;
    if (v6 != *v18)
    {
      v20 = 0;
      v21 = 1;
      while (v19 != -4096)
      {
        if (v20)
          v22 = 0;
        else
          v22 = v19 == -8192;
        if (v22)
          v20 = v18;
        v23 = v17 + v21++;
        v17 = v23 & v16;
        v18 = &v15[2 * v17];
        v19 = *v18;
        if (v6 == *v18)
          goto LABEL_23;
      }
      if (v20)
        v24 = v20;
      else
        v24 = v18;
      goto LABEL_22;
    }
LABEL_23:
    *((_DWORD *)v18 + 2) = v13;
    v6 = *(_QWORD *)(v6 + 8);
    v11 = v12;
  }
  while (v6);
  if (v12 <= 1)
  {
    v49[0] = "value only has one use";
    WORD4(v51) = 259;
    v40 = a1 + 168;
    v41 = a5;
    goto LABEL_66;
  }
  if (a4 >= v12 && a4 == (unint64_t)v45 >> 1)
  {
    v26 = *v5;
    if (!*v5)
      goto LABEL_56;
    v27 = *(_QWORD *)(v26 + 8);
    if (!v27)
      goto LABEL_56;
    v64 = 0u;
    v63 = 0u;
    v62 = 0u;
    v61 = 0u;
    v60 = 0u;
    v59 = 0u;
    v58 = 0u;
    v57 = 0u;
    v56 = 0u;
    v55 = 0u;
    v54 = 0u;
    v53 = 0u;
    v52 = 0u;
    v51 = 0u;
    v50 = 0u;
    v65 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    v49[0] = v26;
    v28 = *(_QWORD *)(v27 + 8);
    if (v28)
    {
      v29 = 1;
      do
      {
        v30 = v27;
        v27 = v28;
        v31 = v29;
        *(_QWORD *)(v30 + 8) = 0;
        if (v29)
        {
          v32 = 0;
          while (1)
          {
            v33 = v49[v32];
            if (!v33)
              break;
            v30 = sub_1C4FD0718(v33, v30, (int *)&v45);
            v49[v32++] = 0;
            if (v31 == v32)
            {
              LODWORD(v32) = v31;
              break;
            }
          }
        }
        else
        {
          LODWORD(v32) = 0;
        }
        if ((_DWORD)v32 == (_DWORD)v31)
          v29 = v31 + 1;
        else
          v29 = v31;
        v49[v32] = v30;
        v28 = *(_QWORD *)(v27 + 8);
      }
      while (v28);
      *v5 = v27;
      if (!v29)
      {
        do
        {
LABEL_55:
          v37 = *(_QWORD *)(v27 + 8);
          v36 = (uint64_t *)(v27 + 8);
          v36[1] = (uint64_t)v5;
          v5 = v36;
          v27 = v37;
        }
        while (v37);
LABEL_56:
        v38 = 0;
        goto LABEL_57;
      }
    }
    else
    {
      *v5 = v27;
      v29 = 1;
    }
    v34 = v29;
    v35 = v49;
    do
    {
      if (*v35)
      {
        v27 = sub_1C4FD0718(*v35, v27, (int *)&v45);
        *v5 = v27;
      }
      ++v35;
      --v34;
    }
    while (v34);
    if (!v27)
      goto LABEL_56;
    goto LABEL_55;
  }
  v42 = *v5;
  if (*v5)
  {
    LODWORD(v43) = 0;
    v41 = a5;
    do
    {
      v43 = (v43 + 1);
      v42 = *(_QWORD *)(v42 + 8);
    }
    while (v42);
  }
  else
  {
    v43 = 0;
    v41 = a5;
  }
  v49[0] = "wrong number of indexes, expected ";
  *((_QWORD *)&v50 + 1) = v43;
  WORD4(v51) = 2051;
  v40 = a1 + 168;
LABEL_66:
  v38 = llvm::LLLexer::Error(v40, v41, (llvm::Twine *)v49);
LABEL_57:
  if ((v45 & 1) == 0)
    MEMORY[0x1CAA32FB4](v46, 8);
  return v38;
}

uint64_t llvm::LLParser::parseUseListOrderIndexes(uint64_t a1, uint64_t a2)
{
  char *v4;
  int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  _BOOL4 v12;
  char *v13;
  uint64_t v14;
  unsigned int v15;
  const char *v16;
  unsigned int v17[8];
  __int16 v18;

  v4 = *(char **)(a1 + 216);
  if ((llvm::LLParser::parseToken(a1, 8, "expected '{' here") & 1) != 0)
    return 1;
  if (*(_DWORD *)(a1 + 224) == 9)
  {
    *(_QWORD *)v17 = "expected non-empty list of uselistorder indexes";
    v18 = 259;
    v13 = *(char **)(a1 + 216);
    v14 = a1 + 168;
    return llvm::LLLexer::Error(v14, v13, (llvm::Twine *)v17);
  }
  v17[0] = 0;
  if ((llvm::LLParser::parseUInt32((llvm::LLParser *)a1, v17) & 1) != 0)
    return 1;
  v6 = 0;
  v7 = 0;
  v8 = 1;
  while (1)
  {
    v9 = v17[0];
    if (v7 <= v17[0])
      v7 = v17[0];
    v10 = *(unsigned int *)(a2 + 8);
    v11 = v17[0] - v10;
    v12 = v17[0] == v10;
    if (v10 >= *(_DWORD *)(a2 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v10 + 1, 4);
      LODWORD(v10) = *(_DWORD *)(a2 + 8);
    }
    v6 += v11;
    *(_DWORD *)(*(_QWORD *)a2 + 4 * v10) = v9;
    v8 &= v12;
    ++*(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(a1 + 224) != 4)
      break;
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    v17[0] = 0;
    if ((llvm::LLParser::parseUInt32((llvm::LLParser *)a1, v17) & 1) != 0)
      return 1;
  }
  if ((llvm::LLParser::parseToken(a1, 9, "expected '}' here") & 1) != 0)
    return 1;
  v15 = *(_DWORD *)(a2 + 8);
  if (v15 <= 1)
  {
    v16 = "expected >= 2 uselistorder indexes";
LABEL_24:
    *(_QWORD *)v17 = v16;
    v18 = 259;
    v14 = a1 + 168;
    v13 = v4;
    return llvm::LLLexer::Error(v14, v13, (llvm::Twine *)v17);
  }
  if (v6 || v15 <= v7)
  {
    v16 = "expected distinct uselistorder indexes in range [0, size)";
    goto LABEL_24;
  }
  if (v8)
  {
    v16 = "expected uselistorder indexes to change the order";
    goto LABEL_24;
  }
  return 0;
}

uint64_t *sub_1C4FC90EC(uint64_t a1, int *a2, size_t a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  char v10;
  const void *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  void *v16;
  __int128 *p_dst;
  uint64_t v18;
  uint64_t v19;
  _OWORD v21[2];
  __int128 *v22;
  __int128 v23;
  __int128 __dst;
  unint64_t v25;
  void *v26[2];
  unint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char *v36[11];

  v36[10] = *(char **)MEMORY[0x1E0C80C00];
  v33 = xmmword_1C85F4BB0;
  v5 = a1 + 56;
  v34 = 0;
  llvm::MD5::update((int *)&v33, a2, a3);
  llvm::MD5::final((int *)&v33, (int *)v26);
  *(void **)&v33 = v26[0];
  v6 = sub_1C4FCD918(v5, (unint64_t *)&v33);
  if (v6 == v7)
  {
LABEL_17:
    v33 = xmmword_1C85F4BB0;
    v34 = 0;
    llvm::MD5::update((int *)&v33, a2, a3);
    llvm::MD5::final((int *)&v33, (int *)v26);
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v16 = v26[0];
    if (a3 >= 0x17)
    {
      v18 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a3 | 7) != 0x17)
        v18 = a3 | 7;
      v19 = v18 + 1;
      p_dst = (__int128 *)operator new(v18 + 1);
      *((_QWORD *)&__dst + 1) = a3;
      v25 = v19 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v25) = a3;
      p_dst = &__dst;
      if (!a3)
        goto LABEL_25;
    }
    memmove(p_dst, a2, a3);
LABEL_25:
    *((_BYTE *)p_dst + a3) = 0;
    LODWORD(v21[0]) = 5;
    memset((char *)v21 + 4, 0, 28);
    *(_OWORD *)v26 = __dst;
    v28 = v21[0];
    v23 = 0u;
    v22 = &v23;
    v27 = v25;
    v29 = v21[1];
    v32 = 0u;
    v30 = 0;
    v31 = &v32;
    *(_QWORD *)&v33 = v16;
    sub_1C4FCDAFC((char *)&v33 + 8, (__int128 *)v26);
    v8 = sub_1C4FCD9B0(v5, (uint64_t)&v33);
    sub_1C4EEC720((uint64_t)v36, v36[1]);
    if (v35 < 0)
      operator delete(*((void **)&v33 + 1));
    sub_1C4EEC720((uint64_t)&v31, (char *)v32);
    if (SHIBYTE(v27) < 0)
      operator delete(v26[0]);
    sub_1C4EEC720((uint64_t)&v22, (char *)v23);
    return v8 + 8;
  }
  v8 = v6;
  v9 = v7;
  while (1)
  {
    v10 = *((_BYTE *)v8 + 63);
    if (v10 >= 0)
      v11 = v8 + 5;
    else
      v11 = (const void *)v8[5];
    v12 = v8[6];
    if (v10 >= 0)
      v12 = v10 & 0x7F;
    if (v12 == a3 && (!a3 || !memcmp(v11, a2, a3)))
      return v8 + 8;
    v13 = (uint64_t *)v8[1];
    if (v13)
    {
      do
      {
        v14 = v13;
        v13 = (uint64_t *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        v14 = (uint64_t *)v8[2];
        v15 = *v14 == (_QWORD)v8;
        v8 = v14;
      }
      while (!v15);
    }
    v8 = v14;
    if (v14 == v9)
      goto LABEL_17;
  }
}

uint64_t sub_1C4FC938C(int *__src, size_t __n)
{
  int v3[4];
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v4 = xmmword_1C85F4BB0;
  v5 = 0;
  llvm::MD5::update((int *)&v4, __src, __n);
  llvm::MD5::final((int *)&v4, v3);
  return *(_QWORD *)v3;
}

uint64_t llvm::LLParser::parseTypeTestResolution(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  char **v8;
  unint64_t *v9;
  char *v10;
  const char *v11;
  unsigned int v12[8];
  __int16 v13;

  if ((llvm::LLParser::parseToken(a1, 404, "expected 'typeTestRes' here") & 1) != 0
    || (llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken(a1, 12, "expected '(' here") & 1) != 0
    || (llvm::LLParser::parseToken(a1, 405, "expected 'kind' here") & 1) != 0
    || (llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0)
  {
    return 1;
  }
  v5 = *(_DWORD *)(a1 + 224);
  switch(v5)
  {
    case 406:
      v6 = 0;
      goto LABEL_16;
    case 407:
      v6 = 1;
      goto LABEL_16;
    case 408:
      v6 = 2;
      goto LABEL_16;
    case 409:
      v6 = 3;
      goto LABEL_16;
    case 410:
      v6 = 4;
      goto LABEL_16;
    default:
      if (v5 != 383)
      {
        v10 = *(char **)(a1 + 216);
        v11 = "unexpected TypeTestResolution kind";
LABEL_35:
        *(_QWORD *)v12 = v11;
        v13 = 259;
        return llvm::LLLexer::Error(a1 + 168, v10, (llvm::Twine *)v12);
      }
      v6 = 5;
LABEL_16:
      *(_DWORD *)a2 = v6;
      *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
      if ((llvm::LLParser::parseToken(a1, 4, "expected ',' here") & 1) != 0
        || (llvm::LLParser::parseToken(a1, 411, "expected 'sizeM1BitWidth' here") & 1) != 0
        || (llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0
        || (llvm::LLParser::parseUInt32((llvm::LLParser *)a1, (unsigned int *)(a2 + 4)) & 1) != 0)
      {
        return 1;
      }
      if (*(_DWORD *)(a1 + 224) == 4)
      {
        while (2)
        {
          v7 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
          *(_DWORD *)(a1 + 224) = v7;
          switch(v7)
          {
            case 412:
              *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
              if ((llvm::LLParser::parseToken(a1, 16, "expected ':'") & 1) != 0)
                return 1;
              v8 = (char **)a1;
              v9 = (unint64_t *)(a2 + 8);
              goto LABEL_31;
            case 413:
              *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
              if ((llvm::LLParser::parseToken(a1, 16, "expected ':'") & 1) != 0)
                return 1;
              v8 = (char **)a1;
              v9 = (unint64_t *)(a2 + 16);
              goto LABEL_31;
            case 414:
              v12[0] = 0;
              *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
              if ((llvm::LLParser::parseToken(a1, 16, "expected ':'") & 1) != 0
                || llvm::LLParser::parseUInt32((llvm::LLParser *)a1, v12))
              {
                return 1;
              }
              *(_BYTE *)(a2 + 24) = v12[0];
              goto LABEL_32;
            case 415:
              *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
              if ((llvm::LLParser::parseToken(a1, 16, "expected ':'") & 1) != 0)
                return 1;
              v8 = (char **)a1;
              v9 = (unint64_t *)(a2 + 32);
LABEL_31:
              if ((llvm::LLParser::parseUInt64(v8, v9) & 1) != 0)
                return 1;
LABEL_32:
              if (*(_DWORD *)(a1 + 224) != 4)
                break;
              continue;
            default:
              v10 = *(char **)(a1 + 216);
              v11 = "expected optional TypeTestResolution field";
              goto LABEL_35;
          }
          break;
        }
      }
      result = llvm::LLParser::parseToken(a1, 13, "expected ')' here");
      break;
  }
  return result;
}

uint64_t llvm::LLParser::parseOptionalWpdResolutions(uint64_t a1, uint64_t **a2)
{
  _QWORD *v5;
  int v6;
  char *v7;
  _QWORD **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD **v12;
  char **v13;
  char *v14;
  __int128 v15;
  char *v16;
  char **v17;
  char **v18;
  char *v19;
  char *v20;
  char *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD **v28;
  _QWORD *v29;
  _QWORD *v30;
  __int128 v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  BOOL v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t **v46;
  _QWORD **v47;
  int v48;
  std::string __p;
  _QWORD **v50;
  _QWORD *v51[2];
  unint64_t v52;
  unint64_t *v53;

  if ((llvm::LLParser::parseToken(a1, 417, "expected 'wpdResolutions' here") & 1) != 0
    || (llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken(a1, 12, "expected '(' here") & 1) != 0)
  {
    return 1;
  }
  v5 = &v50;
  while (1)
  {
    v52 = 0;
    v48 = 0;
    memset(&__p, 0, sizeof(__p));
    v51[0] = 0;
    v51[1] = 0;
    v50 = v51;
    v6 = 0;
    if ((llvm::LLParser::parseToken(a1, 12, "expected '(' here") & 1) != 0)
      goto LABEL_13;
    if ((llvm::LLParser::parseToken(a1, 399, "expected 'offset' here") & 1) != 0
      || (llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0
      || (llvm::LLParser::parseUInt64((char **)a1, &v52) & 1) != 0
      || (llvm::LLParser::parseToken(a1, 4, "expected ',' here") & 1) != 0
      || (llvm::LLParser::parseWpdRes(a1, (uint64_t)&v48) & 1) != 0)
    {
      v6 = 0;
      goto LABEL_13;
    }
    v45 = v5;
    if ((llvm::LLParser::parseToken(a1, 13, "expected ')' here") & 1) != 0)
    {
      v6 = 0;
LABEL_29:
      v5 = v45;
      goto LABEL_13;
    }
    v53 = &v52;
    v7 = sub_1C4FD092C(a2, &v52, (uint64_t)&std::piecewise_construct, &v53);
    *((_DWORD *)v7 + 10) = v48;
    std::string::operator=((std::string *)v7 + 2, &__p);
    if (v7 + 40 == (char *)&v48)
      goto LABEL_28;
    v47 = (_QWORD **)(v7 + 72);
    v8 = v50;
    if (!*((_QWORD *)v7 + 11))
      goto LABEL_26;
    v9 = *((_QWORD *)v7 + 10);
    v10 = *((_QWORD *)v7 + 9);
    *((_QWORD *)v7 + 9) = v7 + 80;
    *(_QWORD *)(v9 + 16) = 0;
    *((_QWORD *)v7 + 10) = 0;
    *((_QWORD *)v7 + 11) = 0;
    v46 = (uint64_t **)(v7 + 80);
    v11 = *(_QWORD *)(v10 + 8) ? *(_QWORD *)(v10 + 8) : v10;
    if (v11)
    {
      v29 = sub_1C4FCE18C(v11);
      if (v8 == v51)
      {
        v30 = (_QWORD *)v11;
        v12 = v51;
      }
      else
      {
        do
        {
          v30 = v29;
          if ((_QWORD **)v11 != v8)
            sub_1C4DE4490((_QWORD *)(v11 + 32), (char *)v8[4], (char *)v8[5], v8[5] - v8[4]);
          v31 = *(_OWORD *)(v8 + 7);
          *(_QWORD *)(v11 + 72) = v8[9];
          *(_OWORD *)(v11 + 56) = v31;
          v32 = (uint64_t *)(v7 + 80);
          v33 = *v46;
          v34 = (uint64_t *)(v7 + 80);
          if (*v46)
          {
            do
            {
              while (1)
              {
                v34 = v33;
                v35 = v33[4];
                v36 = v34[5];
                if (v35 == v36)
                  break;
                v37 = v35 + 8;
                v38 = *(unint64_t **)(v11 + 32);
                while (v38 != *(unint64_t **)(v11 + 40))
                {
                  v39 = *v38;
                  v40 = *(_QWORD *)(v37 - 8);
                  if (*v38 < v40)
                    break;
                  ++v38;
                  v41 = v40 < v39 || v37 == v36;
                  v37 += 8;
                  if (v41)
                    goto LABEL_67;
                }
                v33 = (uint64_t *)*v34;
                v32 = v34;
                if (!*v34)
                  goto LABEL_70;
              }
LABEL_67:
              v33 = (uint64_t *)v34[1];
            }
            while (v33);
            v32 = v34 + 1;
          }
LABEL_70:
          *(_QWORD *)v11 = 0;
          *(_QWORD *)(v11 + 8) = 0;
          *(_QWORD *)(v11 + 16) = v34;
          *v32 = v11;
          v42 = (_QWORD *)**v47;
          if (v42)
          {
            *v47 = v42;
            v11 = *v32;
          }
          sub_1C4768E74(*((uint64_t **)v7 + 10), (uint64_t *)v11);
          ++*((_QWORD *)v7 + 11);
          if (v29)
            v29 = sub_1C4FCE18C((uint64_t)v29);
          else
            v29 = 0;
          v43 = v8[1];
          if (v43)
          {
            do
            {
              v12 = (_QWORD **)v43;
              v43 = (_QWORD *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              v12 = (_QWORD **)v8[2];
              v25 = *v12 == v8;
              v8 = v12;
            }
            while (!v25);
          }
          if (!v30)
            break;
          v8 = v12;
          v11 = (uint64_t)v30;
        }
        while (v12 != v51);
      }
      sub_1C61A89D0((uint64_t)v47, v30);
      if (v29)
      {
        do
        {
          v44 = v29;
          v29 = (_QWORD *)v29[2];
        }
        while (v29);
        sub_1C61A89D0((uint64_t)v47, v44);
      }
    }
    else
    {
LABEL_26:
      v12 = v8;
    }
    if (v12 == v51)
    {
LABEL_28:
      v6 = 1;
      goto LABEL_29;
    }
    v13 = (char **)(v7 + 80);
    v5 = v45;
    do
    {
      v14 = (char *)operator new(0x50uLL);
      *((_QWORD *)v14 + 5) = 0;
      *((_QWORD *)v14 + 6) = 0;
      *((_QWORD *)v14 + 4) = 0;
      sub_1C4DFE394((_QWORD *)v14 + 4, v12[4], (uint64_t)v12[5], v12[5] - v12[4]);
      v15 = *(_OWORD *)(v12 + 7);
      *((_QWORD *)v14 + 9) = v12[9];
      *(_OWORD *)(v14 + 56) = v15;
      v16 = *v13;
      v17 = (char **)(v7 + 80);
      v18 = (char **)(v7 + 80);
      if (*v13)
      {
        do
        {
          while (1)
          {
            v17 = (char **)v16;
            v19 = (char *)*((_QWORD *)v16 + 4);
            v20 = v17[5];
            if (v19 == v20)
              break;
            v21 = v19 + 8;
            v22 = (unint64_t *)*((_QWORD *)v14 + 4);
            while (v22 != *((unint64_t **)v14 + 5))
            {
              v23 = *v22;
              v24 = *((_QWORD *)v21 - 1);
              if (*v22 < v24)
                break;
              ++v22;
              v25 = v24 < v23 || v21 == v20;
              v21 += 8;
              if (v25)
                goto LABEL_41;
            }
            v16 = *v17;
            v18 = v17;
            if (!*v17)
              goto LABEL_44;
          }
LABEL_41:
          v16 = v17[1];
        }
        while (v16);
        v18 = v17 + 1;
      }
LABEL_44:
      *(_QWORD *)v14 = 0;
      *((_QWORD *)v14 + 1) = 0;
      *((_QWORD *)v14 + 2) = v17;
      *v18 = v14;
      v26 = (_QWORD *)**v47;
      if (v26)
      {
        *v47 = v26;
        v14 = *v18;
      }
      sub_1C4768E74(*((uint64_t **)v7 + 10), (uint64_t *)v14);
      ++*((_QWORD *)v7 + 11);
      v27 = v12[1];
      if (v27)
      {
        do
        {
          v28 = (_QWORD **)v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD **)v12[2];
          v25 = *v28 == v12;
          v12 = v28;
        }
        while (!v25);
      }
      v6 = 1;
      v12 = v28;
    }
    while (v28 != v51);
LABEL_13:
    sub_1C61A89D0((uint64_t)v5, v51[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (!v6)
      return 1;
    if (*(_DWORD *)(a1 + 224) != 4)
      return llvm::LLParser::parseToken(a1, 13, "expected ')' here");
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  }
}

uint64_t llvm::LLParser::parseArgs(uint64_t a1, uint64_t a2)
{
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  unint64_t *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;

  if ((llvm::LLParser::parseToken(a1, 400, "expected 'args' here") & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken(a1, 12, "expected '(' here") & 1) != 0)
    return 1;
  v16 = 0;
  if ((llvm::LLParser::parseUInt64((char **)a1, &v16) & 1) != 0)
    return 1;
  while (1)
  {
    v6 = *(unint64_t **)(a2 + 8);
    v5 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v6 >= v5)
    {
      v7 = *(unint64_t **)a2;
      v8 = ((uint64_t)v6 - *(_QWORD *)a2) >> 3;
      v9 = v8 + 1;
      if ((unint64_t)(v8 + 1) >> 61)
        abort();
      v10 = v5 - (_QWORD)v7;
      if (v10 >> 2 > v9)
        v9 = v10 >> 2;
      v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v9;
      if (v11)
      {
        if (v11 >> 61)
          sub_1C4764EE4();
        v12 = (char *)operator new(8 * v11);
      }
      else
      {
        v12 = 0;
      }
      v13 = (unint64_t *)&v12[8 * v8];
      *v13 = v16;
      v14 = v13 + 1;
      while (v6 != v7)
      {
        v15 = *--v6;
        *--v13 = v15;
      }
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      *(_QWORD *)(a2 + 16) = &v12[8 * v11];
      if (v7)
        operator delete(v7);
      *(_QWORD *)(a2 + 8) = v14;
    }
    else
    {
      *v6 = v16;
      *(_QWORD *)(a2 + 8) = v6 + 1;
    }
    if (*(_DWORD *)(a1 + 224) != 4)
      break;
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    v16 = 0;
    if ((llvm::LLParser::parseUInt64((char **)a1, &v16) & 1) != 0)
      return 1;
  }
  return llvm::LLParser::parseToken(a1, 13, "expected ')' here");
}

void llvm::LLParser::addGlobalValueToIndex(uint64_t a1, _BYTE *a2, unint64_t a3, int a4, unsigned int a5, uint64_t *a6)
{
  uint64_t v9;
  unsigned int v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v17;
  llvm::GlobalValue *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  BOOL v27;
  void *v28;
  size_t v29;
  size_t v30;
  int *p_p;
  size_t size;
  unint64_t v33;
  uint64_t v34;
  char v35;
  int v36;
  const void *v37;
  size_t v38;
  size_t v39;
  _BYTE *v40;
  _BYTE *v41;
  const void *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t *v76;
  char *v77;
  unint64_t v78;
  unint64_t **v79;
  unint64_t **v80;
  unint64_t *v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  std::string __p;
  unint64_t v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v9 = *(_QWORD *)(a1 + 336);
    v10 = *(unsigned __int8 *)(v9 + 133);
    v11 = sub_1C4EEA81C(v9, a3);
  }
  else
  {
    v12 = a2;
    v13 = *(_QWORD *)(a1 + 328);
    if (v13)
    {
      v14 = a2[23];
      v15 = v14 < 0;
      if (v14 < 0)
        a2 = *(_BYTE **)a2;
      v16 = v14 & 0x7F;
      if (v15)
        v17 = v12[1];
      else
        v17 = v16;
      v18 = (llvm::GlobalValue *)sub_1C4FB7E80(*(uint64_t **)(v13 + 112), a2, v17);
      v19 = *(_QWORD *)(a1 + 336);
      v20 = sub_1C4EE9DE0(v18);
      v11 = sub_1C4EEA81C(v19, v20);
      *((_QWORD *)v11 + 1) = v18;
      v10 = *(unsigned __int8 *)(v19 + 133);
    }
    else
    {
      v21 = a2[23];
      v22 = (v21 & 0x80u) != 0;
      if ((v21 & 0x80u) == 0)
        v23 = a2;
      else
        v23 = *(_BYTE **)a2;
      v24 = v21 & 0x7F;
      if (v22)
        v25 = *((_QWORD *)a2 + 1);
      else
        v25 = v24;
      v26 = *(_BYTE *)(a1 + 1311);
      v27 = v26 < 0;
      if (v26 >= 0)
        v28 = (void *)(a1 + 1288);
      else
        v28 = *(void **)(a1 + 1288);
      v29 = v26 & 0x7F;
      if (v27)
        v30 = *(_QWORD *)(a1 + 1296);
      else
        v30 = v29;
      llvm::GlobalValue::getGlobalIdentifier(v28, v30, v23, v25, a4, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = (int *)&__p;
      else
        p_p = (int *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __p.__r_.__value_.__l.__size_;
      v90 = xmmword_1C85F4BB0;
      v91 = 0;
      llvm::MD5::update((int *)&v90, p_p, size);
      llvm::MD5::final((int *)&v90, (int *)&v89);
      v33 = v89;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v34 = *(_QWORD *)(a1 + 336);
      v35 = *((_BYTE *)v12 + 23);
      v36 = v35;
      v37 = (const void *)*v12;
      v38 = v35 & 0x7F;
      if (v36 >= 0)
        v39 = v38;
      else
        v39 = v12[1];
      v40 = (_BYTE *)sub_1C484358C(*(_QWORD *)(v34 + 192), v39 + 1, 0);
      v41 = v40;
      if (v39)
      {
        if (v36 >= 0)
          v42 = v12;
        else
          v42 = v37;
        memcpy(v40, v42, v39);
      }
      v41[v39] = 0;
      v11 = sub_1C4EEA81C(v34, v33);
      *((_QWORD *)v11 + 1) = v41;
      *((_QWORD *)v11 + 2) = v39;
      v10 = *(unsigned __int8 *)(v34 + 133);
    }
  }
  v43 = (unint64_t)v11 & 0xFFFFFFFFFFFFFFF8 | v10;
  v44 = *(_QWORD *)(a1 + 1168);
  if (v44)
  {
    v45 = a1 + 1168;
    do
    {
      v46 = *(_DWORD *)(v44 + 32);
      v47 = v46 >= a5;
      if (v46 >= a5)
        v48 = (uint64_t *)v44;
      else
        v48 = (uint64_t *)(v44 + 8);
      if (v47)
        v45 = v44;
      v44 = *v48;
    }
    while (*v48);
    if (v45 != a1 + 1168 && *(_DWORD *)(v45 + 32) <= a5)
    {
      v79 = *(unint64_t ***)(v45 + 40);
      v80 = *(unint64_t ***)(v45 + 48);
      while (v79 != v80)
      {
        v81 = *v79;
        v79 += 2;
        *v81 = *v81 & 6 | v43;
      }
      sub_1C61CEB80((uint64_t **)(a1 + 1160), (uint64_t *)v45);
    }
  }
  v49 = *(_QWORD *)(a1 + 1192);
  if (v49)
  {
    v50 = a1 + 1192;
    do
    {
      v51 = *(_DWORD *)(v49 + 32);
      v52 = v51 >= a5;
      if (v51 >= a5)
        v53 = (uint64_t *)v49;
      else
        v53 = (uint64_t *)(v49 + 8);
      if (v52)
        v50 = v49;
      v49 = *v53;
    }
    while (*v53);
    if (v50 != a1 + 1192 && *(_DWORD *)(v50 + 32) <= a5)
    {
      v82 = *(uint64_t **)(v50 + 40);
      v83 = *(uint64_t **)(v50 + 48);
      while (v82 != v83)
      {
        v84 = *v82;
        v82 += 2;
        v85 = *a6;
        *(_QWORD *)(v84 + 64) = v43;
        *(_QWORD *)(v84 + 72) = v85;
      }
      sub_1C61CEB80((uint64_t **)(a1 + 1184), (uint64_t *)v50);
    }
  }
  v54 = *a6;
  if (*a6)
  {
    v55 = *(_QWORD *)(a1 + 336);
    *a6 = 0;
    v87 = v54;
    sub_1C4EEBD40(v55, v43, &v87);
    v56 = v87;
    v87 = 0;
    if (v56)
      (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  }
  v57 = a5;
  v58 = *(unint64_t **)(a1 + 1216);
  v59 = *(unint64_t **)(a1 + 1208);
  v60 = v58 - v59;
  if (v60 == a5)
  {
    v61 = *(_QWORD *)(a1 + 1224);
    if ((unint64_t)v58 < v61)
    {
      *v58 = v43;
      v62 = v58 + 1;
LABEL_90:
      *(_QWORD *)(a1 + 1216) = v62;
      return;
    }
    v72 = v61 - (_QWORD)v59;
    if (v72 >> 2 <= (unint64_t)a5 + 1)
      v73 = a5 + 1;
    else
      v73 = v72 >> 2;
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
      v74 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v74 = v73;
    if (!(v74 >> 61))
    {
      v75 = (char *)operator new(8 * v74);
      v76 = (unint64_t *)&v75[8 * v57];
      v77 = &v75[8 * v74];
      *v76 = v43;
      v62 = v76 + 1;
      while (v58 != v59)
      {
        v78 = *--v58;
        *--v76 = v78;
      }
      *(_QWORD *)(a1 + 1208) = v76;
      *(_QWORD *)(a1 + 1216) = v62;
      *(_QWORD *)(a1 + 1224) = v77;
      if (v59)
        operator delete(v59);
      goto LABEL_90;
    }
LABEL_107:
    sub_1C4764EE4();
  }
  if (v60 < a5)
  {
    v63 = a5 + 1;
    v64 = v63 - v60;
    if (v63 <= v60)
    {
      if (v63 < v60)
        *(_QWORD *)(a1 + 1216) = &v59[v63];
    }
    else
    {
      v65 = *(_QWORD *)(a1 + 1224);
      if (v64 <= (v65 - (uint64_t)v58) >> 3)
      {
        bzero(*(void **)(a1 + 1216), 8 * v64);
        *(_QWORD *)(a1 + 1216) = &v58[v64];
      }
      else
      {
        v66 = v65 - (_QWORD)v59;
        if (v66 >> 2 > v63)
          v63 = v66 >> 2;
        v47 = (unint64_t)v66 >= 0x7FFFFFFFFFFFFFF8;
        v67 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v47)
          v67 = v63;
        if (v67 >> 61)
          goto LABEL_107;
        v86 = v67;
        v68 = (char *)operator new(8 * v67);
        v69 = &v68[8 * v60];
        bzero(v69, 8 * v64);
        v70 = &v68[8 * v64 + (char *)v58 - (char *)v59];
        while (v58 != v59)
        {
          v71 = *--v58;
          *((_QWORD *)v69 - 1) = v71;
          v69 -= 8;
        }
        *(_QWORD *)(a1 + 1208) = v69;
        *(_QWORD *)(a1 + 1216) = v70;
        *(_QWORD *)(a1 + 1224) = &v68[8 * v86];
        if (v59)
          operator delete(v59);
      }
      v59 = *(unint64_t **)(a1 + 1208);
    }
  }
  v59[v57] = v43;
}

uint64_t llvm::LLParser::parseFunctionSummary(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  llvm::LLLexer *v8;
  uint64_t v9;
  char v10;
  int v11;
  void **v13;
  void **v14;
  char *v15;
  void **v16;
  void *__dst[2];
  uint64_t v18;
  int v19;
  void **v20[4];
  __int16 v21;
  int v22;
  void *__p;
  void *v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28[3];
  _OWORD v29[3];
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  __n128 v36;

  v8 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  v36 = 0uLL;
  LOWORD(v35) = 0;
  v34 = 0;
  v32 = 0uLL;
  v33 = 0;
  v31 = 0;
  v30 = 0u;
  memset(v29, 0, sizeof(v29));
  memset(v28, 0, sizeof(v28));
  v26 = 0uLL;
  v27 = 0;
  __p = 0;
  v24 = 0;
  v25 = 0;
  v22 = 0;
  if (llvm::LLParser::parseToken(a1, 16, "expected ':' here"))
  {
    v9 = 1;
  }
  else
  {
    if ((llvm::LLParser::parseToken(a1, 12, "expected '(' here") & 1) != 0
      || (llvm::LLParser::parseModuleReference((llvm::LLParser *)a1, &v36), (v10 & 1) != 0)
      || (llvm::LLParser::parseToken(a1, 4, "expected ',' here") & 1) != 0
      || (llvm::LLParser::parseGVFlags(a1, &v35) & 1) != 0
      || (llvm::LLParser::parseToken(a1, 4, "expected ',' here") & 1) != 0
      || (llvm::LLParser::parseToken(a1, 366, "expected 'insts' here") & 1) != 0
      || (llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0
      || (llvm::LLParser::parseUInt32((llvm::LLParser *)a1, &v34) & 1) != 0)
    {
LABEL_29:
      v9 = 1;
    }
    else
    {
      while (*(_DWORD *)(a1 + 224) == 4)
      {
        v11 = llvm::LLLexer::LexToken(v8);
        *(_DWORD *)(a1 + 224) = v11;
        if (v11 <= 379)
        {
          if (v11 == 378)
          {
            if ((llvm::LLParser::parseOptionalCalls(a1, &v32) & 1) != 0)
              goto LABEL_29;
          }
          else
          {
            if (v11 != 367)
            {
LABEL_45:
              v15 = *(char **)(a1 + 216);
              v20[0] = (void **)"expected optional function summary field";
              v21 = 259;
              v9 = llvm::LLLexer::Error((uint64_t)v8, v15, (llvm::Twine *)v20);
              goto LABEL_30;
            }
            if ((llvm::LLParser::parseOptionalFFlags(a1, &v22) & 1) != 0)
              goto LABEL_29;
          }
        }
        else
        {
          switch(v11)
          {
            case 380:
              if ((llvm::LLParser::parseOptionalParamAccesses((_DWORD *)a1, (uint64_t *)&v26) & 1) != 0)
                goto LABEL_29;
              break;
            case 391:
              if ((llvm::LLParser::parseOptionalRefs(a1, (char **)&__p) & 1) != 0)
                goto LABEL_29;
              break;
            case 392:
              if ((llvm::LLParser::parseOptionalTypeIdInfo(a1, (unint64_t **)v28) & 1) != 0)
                goto LABEL_29;
              break;
            default:
              goto LABEL_45;
          }
        }
      }
      if ((llvm::LLParser::parseToken(a1, 13, "expected ')' here") & 1) != 0)
        goto LABEL_29;
      v19 = 0;
      sub_1C4EEA558(&v35, (int *)&v34, &v22, &v19, (uint64_t)&__p, &v32, v28, (uint64_t)&v28[1] + 8, (uint64_t *)v20, (uint64_t)v29, (uint64_t)&v29[1] + 8, (uint64_t)&v30, &v26);
      v13 = v20[0];
      *(__n128 *)(v20[0] + 3) = v36;
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1C47EBC30(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
        v13 = v20[0];
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)a2;
        v18 = *(_QWORD *)(a2 + 16);
      }
      v20[0] = 0;
      v16 = v13;
      llvm::LLParser::addGlobalValueToIndex(a1, __dst, a3, v35 & 0xF, a4, (uint64_t *)&v16);
      if (v16)
        (*((void (**)(void **))*v16 + 1))(v16);
      if (SHIBYTE(v18) < 0)
        operator delete(__dst[0]);
      v14 = v20[0];
      v20[0] = 0;
      if (v14)
        (*((void (**)(void **))*v14 + 1))(v14);
      v9 = 0;
    }
LABEL_30:
    if (__p)
    {
      v24 = __p;
      operator delete(__p);
    }
  }
  v20[0] = (void **)&v26;
  sub_1C4EEB7D8(v20);
  sub_1C61A8534((uint64_t)v28);
  if ((_QWORD)v32)
  {
    *((_QWORD *)&v32 + 1) = v32;
    operator delete((void *)v32);
  }
  return v9;
}

uint64_t llvm::LLParser::parseVariableSummary(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  llvm::LLLexer *v8;
  uint64_t v9;
  char v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  void *__dst[2];
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  const char *v24;
  __int16 v25;
  void *__p[2];
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  int v30;
  int v31;
  __n128 v32;

  v8 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  v32 = 0uLL;
  LOWORD(v31) = 0;
  LOBYTE(v30) = 0;
  v28 = 0uLL;
  v29 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v27 = 0;
  if ((llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken(a1, 12, "expected '(' here") & 1) != 0)
  {
    v9 = 1;
  }
  else
  {
    llvm::LLParser::parseModuleReference((llvm::LLParser *)a1, &v32);
    if ((v11 & 1) != 0
      || (llvm::LLParser::parseToken(a1, 4, "expected ',' here") & 1) != 0
      || (llvm::LLParser::parseGVFlags(a1, &v31) & 1) != 0
      || (llvm::LLParser::parseToken(a1, 4, "expected ',' here") & 1) != 0
      || (llvm::LLParser::parseGVarFlags(a1, &v30) & 1) != 0)
    {
LABEL_8:
      v9 = 1;
    }
    else
    {
      while (*(_DWORD *)(a1 + 224) == 4)
      {
        v12 = llvm::LLLexer::LexToken(v8);
        *(_DWORD *)(a1 + 224) = v12;
        if (v12 == 391)
        {
          if ((llvm::LLParser::parseOptionalRefs(a1, (char **)&v28) & 1) != 0)
            goto LABEL_8;
        }
        else
        {
          if (v12 != 388)
          {
            v18 = *(char **)(a1 + 216);
            v24 = "expected optional variable summary field";
            v25 = 259;
            v9 = llvm::LLLexer::Error((uint64_t)v8, v18, (llvm::Twine *)&v24);
            goto LABEL_9;
          }
          if ((llvm::LLParser::parseOptionalVTableFuncs(a1, (char **)__p) & 1) != 0)
            goto LABEL_8;
        }
      }
      if ((llvm::LLParser::parseToken(a1, 13, "expected ')' here") & 1) != 0)
        goto LABEL_8;
      v13 = operator new();
      v14 = v30;
      v15 = v31;
      v16 = v29;
      v17 = v28;
      v29 = 0;
      v28 = 0uLL;
      *(_DWORD *)(v13 + 8) = 2;
      *(_DWORD *)(v13 + 12) = v15;
      *(_QWORD *)(v13 + 16) = 0;
      *(_OWORD *)(v13 + 40) = v17;
      *(_QWORD *)v13 = &unk_1E8139E20;
      *(_QWORD *)(v13 + 56) = v16;
      *(_QWORD *)(v13 + 64) = 0;
      *(_DWORD *)(v13 + 72) = v14;
      *(__n128 *)(v13 + 24) = v32;
      *(_OWORD *)v22 = *(_OWORD *)__p;
      v23 = v27;
      __p[0] = 0;
      __p[1] = 0;
      v27 = 0;
      sub_1C4EEBF94(v13, (uint64_t)v22);
      if (v22[0])
      {
        v22[1] = v22[0];
        operator delete(v22[0]);
      }
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1C47EBC30(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)a2;
        v21 = *(_QWORD *)(a2 + 16);
      }
      v19 = v13;
      llvm::LLParser::addGlobalValueToIndex(a1, __dst, a3, v15 & 0xF, a4, &v19);
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      if (SHIBYTE(v21) < 0)
        operator delete(__dst[0]);
      v9 = 0;
    }
LABEL_9:
    if (__p[0])
      operator delete(__p[0]);
  }
  if ((_QWORD)v28)
    operator delete((void *)v28);
  return v9;
}

uint64_t llvm::LLParser::parseAliasSummary(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4)
{
  uint64_t v8;
  char v10;
  uint64_t v11;
  int v12;
  __n128 v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int *v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t **v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  void *__p[2];
  uint64_t v38;
  unsigned int v39;
  int v40[2];
  int v41;
  __n128 v42;

  v8 = *(_QWORD *)(a1 + 216);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  v42 = 0uLL;
  LOWORD(v41) = 0;
  if ((llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken(a1, 12, "expected '(' here") & 1) != 0)
    return 1;
  llvm::LLParser::parseModuleReference((llvm::LLParser *)a1, &v42);
  if ((v10 & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken(a1, 4, "expected ',' here") & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseGVFlags(a1, &v41) & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken(a1, 4, "expected ',' here") & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken(a1, 390, "expected 'aliasee' here") & 1) != 0)
    return 1;
  if ((llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0)
    return 1;
  *(_QWORD *)v40 = 0;
  v39 = 0;
  if ((llvm::LLParser::parseGVReference((llvm::LLParser *)a1, (llvm::ValueInfo *)v40, &v39) & 1) != 0
    || (llvm::LLParser::parseToken(a1, 13, "expected ')' here") & 1) != 0)
  {
    return 1;
  }
  v11 = operator new();
  v12 = v41;
  *(_DWORD *)(v11 + 8) = 0;
  *(_DWORD *)(v11 + 12) = v12;
  v35 = v12;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_QWORD *)v11 = &unk_1E8139E40;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  v13 = v42;
  *(__n128 *)(v11 + 24) = v42;
  v14 = *(_QWORD *)v40;
  if ((~*(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v33 = sub_1C61CD658(*(_QWORD *)(a1 + 336), *(uint64_t *)v40, (void *)v13.n128_u64[0], v13.n128_u64[1]);
    *(_QWORD *)(v11 + 64) = v14;
    *(_QWORD *)(v11 + 72) = v33;
  }
  else
  {
    v15 = v39;
    v16 = *(unsigned int **)(a1 + 1192);
    if (v16)
    {
      while (1)
      {
        while (1)
        {
          v17 = v16;
          v18 = v16[8];
          if (v18 <= v39)
            break;
          v16 = (unsigned int *)*v17;
          v19 = (uint64_t **)v17;
          if (!*v17)
            goto LABEL_21;
        }
        if (v18 >= v39)
          break;
        v16 = (unsigned int *)v17[1];
        if (!v16)
        {
          v19 = (uint64_t **)(v17 + 1);
          goto LABEL_21;
        }
      }
    }
    else
    {
      v19 = (uint64_t **)(a1 + 1192);
      v17 = (_QWORD *)(a1 + 1192);
LABEL_21:
      v20 = v17;
      v17 = operator new(0x40uLL);
      *((_DWORD *)v17 + 8) = v15;
      *v17 = 0;
      v17[1] = 0;
      v17[6] = 0;
      v17[7] = 0;
      v17[5] = 0;
      v17[2] = v20;
      *v19 = v17;
      v21 = **(_QWORD **)(a1 + 1184);
      v22 = v17;
      if (v21)
      {
        *(_QWORD *)(a1 + 1184) = v21;
        v22 = *v19;
      }
      sub_1C4768E74(*(uint64_t **)(a1 + 1192), v22);
      ++*(_QWORD *)(a1 + 1200);
    }
    v24 = (uint64_t *)v17[6];
    v23 = v17[7];
    if ((unint64_t)v24 >= v23)
    {
      v26 = (uint64_t *)v17[5];
      v34 = ((char *)v24 - (char *)v26) >> 4;
      v27 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 60)
        abort();
      v28 = v23 - (_QWORD)v26;
      if (v28 >> 3 > v27)
        v27 = v28 >> 3;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
        v29 = 0xFFFFFFFFFFFFFFFLL;
      else
        v29 = v27;
      if (v29 >> 60)
        sub_1C4764EE4();
      v30 = (char *)operator new(16 * v29);
      v31 = (uint64_t *)&v30[16 * v34];
      *v31 = v11;
      v31[1] = v8;
      v25 = v31 + 2;
      if (v24 == v26)
      {
        v32 = (uint64_t *)&v30[16 * v34];
      }
      else
      {
        do
        {
          v32 = v31 - 2;
          *((_OWORD *)v31 - 1) = *((_OWORD *)v24 - 1);
          v24 -= 2;
          v31 -= 2;
        }
        while (v24 != v26);
      }
      v17[5] = v32;
      v17[6] = v25;
      v17[7] = &v30[16 * v29];
      if (v26)
        operator delete(v26);
    }
    else
    {
      *v24 = v11;
      v24[1] = v8;
      v25 = v24 + 2;
    }
    v17[6] = v25;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C47EBC30(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v38 = *(_QWORD *)(a2 + 16);
  }
  v36 = v11;
  llvm::LLParser::addGlobalValueToIndex(a1, __p, a3, v35 & 0xF, a4, &v36);
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  if (SHIBYTE(v38) < 0)
    operator delete(__p[0]);
  return 0;
}

uint64_t llvm::LLParser::parseOptionalCalls(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  llvm::LLLexer *v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  unsigned int v24;
  unint64_t v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char **v36;
  uint64_t *v37;
  uint64_t **v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  uint64_t *v52;
  char *v53;
  char *v54;
  uint64_t *v55;
  uint64_t *v56;
  BOOL v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unsigned int v64;
  char v65;
  unsigned int v66;
  uint64_t *v67;
  _QWORD *v68[2];

  v3 = a1;
  v4 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  if ((llvm::LLParser::parseToken(v3, 16, "expected ':' in calls") & 1) != 0
    || (llvm::LLParser::parseToken(v3, 12, "expected '(' in calls") & 1) != 0)
  {
    return 1;
  }
  v68[0] = 0;
  v68[1] = 0;
  v67 = (uint64_t *)v68;
  v60 = 0;
  if ((llvm::LLParser::parseToken(v3, 12, "expected '(' in call") & 1) == 0)
  {
    v58 = v3;
    v59 = a2;
    do
    {
      if ((llvm::LLParser::parseToken(v3, 379, "expected 'callee' in call") & 1) != 0)
        break;
      if ((llvm::LLParser::parseToken(v3, 16, "expected ':'") & 1) != 0)
        break;
      v7 = *(_QWORD *)(v3 + 216);
      v66 = 0;
      if (llvm::LLParser::parseGVReference((llvm::LLParser *)v3, (llvm::ValueInfo *)&v60, &v66))
        break;
      v65 = 0;
      v64 = 0;
      if (*(_DWORD *)(v3 + 224) == 4)
      {
        v8 = llvm::LLLexer::LexToken(v4);
        *(_DWORD *)(v3 + 224) = v8;
        if (v8 == 382)
        {
          *(_DWORD *)(v3 + 224) = llvm::LLLexer::LexToken(v4);
          if ((llvm::LLParser::parseToken(v3, 16, "expected ':'") & 1) != 0
            || (llvm::LLParser::parseHotness(v3, &v65) & 1) != 0)
          {
            break;
          }
        }
        else if ((llvm::LLParser::parseToken(v3, 386, "expected relbf") & 1) != 0
               || (llvm::LLParser::parseToken(v3, 16, "expected ':'") & 1) != 0
               || (llvm::LLParser::parseUInt32((llvm::LLParser *)v3, &v64) & 1) != 0)
        {
          break;
        }
      }
      v9 = v60;
      if ((~v60 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        v10 = sub_1C4FD085C(&v67, v66, &v66);
        v11 = v10;
        v12 = (a2[1] - *a2) >> 4;
        v14 = v10[6];
        v13 = v10[7];
        if (v14 >= v13)
        {
          v16 = v10[5];
          v17 = ((char *)v14 - (char *)v16) >> 4;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60)
            goto LABEL_93;
          v19 = (char *)v13 - (char *)v16;
          if (v19 >> 3 > v18)
            v18 = v19 >> 3;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
            v20 = 0xFFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            if (v20 >> 60)
              goto LABEL_94;
            v21 = (char *)operator new(16 * v20);
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[16 * v17];
          *(_DWORD *)v22 = v12;
          *((_QWORD *)v22 + 1) = v7;
          v23 = (uint64_t *)v22;
          if (v14 == v16)
          {
            v3 = v58;
          }
          else
          {
            v3 = v58;
            do
            {
              *((_OWORD *)v23 - 1) = *((_OWORD *)v14 - 1);
              v23 -= 2;
              v14 -= 2;
            }
            while (v14 != v16);
            v14 = v11[5];
          }
          v15 = (uint64_t *)(v22 + 16);
          v11[5] = v23;
          v11[6] = (uint64_t *)(v22 + 16);
          v11[7] = (uint64_t *)&v21[16 * v20];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v14 = v12;
          v14[1] = v7;
          v15 = v14 + 2;
          v3 = v58;
        }
        v11[6] = v15;
        a2 = v59;
      }
      v24 = v65 & 7 | (8 * v64);
      v26 = (_DWORD *)a2[1];
      v25 = a2[2];
      if ((unint64_t)v26 >= v25)
      {
        v28 = (_DWORD *)*a2;
        v29 = ((uint64_t)v26 - *a2) >> 4;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60)
LABEL_93:
          abort();
        v31 = v25 - (_QWORD)v28;
        if (v31 >> 3 > v30)
          v30 = v31 >> 3;
        v32 = (unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v30;
        if (v32)
        {
          if (v32 >> 60)
LABEL_94:
            sub_1C4764EE4();
          v33 = (char *)operator new(16 * v32);
        }
        else
        {
          v33 = 0;
        }
        v34 = &v33[16 * v29];
        *(_QWORD *)v34 = v9;
        *((_DWORD *)v34 + 2) = v24;
        v35 = v34;
        if (v26 == v28)
        {
          v36 = (char **)a2;
        }
        else
        {
          do
          {
            *((_OWORD *)v35 - 1) = *((_OWORD *)v26 - 1);
            v35 -= 16;
            v26 -= 4;
          }
          while (v26 != v28);
          v26 = (_DWORD *)*a2;
          v36 = (char **)a2;
        }
        v27 = v34 + 16;
        *v36 = v35;
        v36[1] = v34 + 16;
        v36[2] = &v33[16 * v32];
        if (v26)
          operator delete(v26);
      }
      else
      {
        *(_QWORD *)v26 = v9;
        v26[2] = v24;
        v27 = v26 + 4;
      }
      v59[1] = v27;
      a2 = v59;
      if ((llvm::LLParser::parseToken(v3, 13, "expected ')' in call") & 1) != 0)
        break;
      if (*(_DWORD *)(v3 + 224) != 4)
      {
        v37 = v67;
        if (v67 != (uint64_t *)v68)
        {
          do
          {
            LODWORD(v60) = *((_DWORD *)v37 + 8);
            v62 = 0;
            v63 = 0;
            v61 = 0;
            sub_1C4EECB34(&v61, (_BYTE *)v37[5], (_BYTE *)v37[6], (v37[6] - v37[5]) >> 4);
            v38 = sub_1C4FD085C((uint64_t **)(v58 + 1160), v60, &v60);
            v40 = v61;
            v39 = v62;
            if (v61 != v62)
            {
              v41 = v38;
              v42 = v38[6];
              do
              {
                v43 = v40[1];
                v44 = *a2 + 16 * *(unsigned int *)v40;
                v45 = (unint64_t)v41[7];
                if ((unint64_t)v42 >= v45)
                {
                  v46 = v41[5];
                  v47 = ((char *)v42 - (char *)v46) >> 4;
                  v48 = v47 + 1;
                  if ((unint64_t)(v47 + 1) >> 60)
                    goto LABEL_93;
                  v49 = v45 - (_QWORD)v46;
                  if (v49 >> 3 > v48)
                    v48 = v49 >> 3;
                  if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
                    v50 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v50 = v48;
                  if (v50 >> 60)
                    goto LABEL_94;
                  v51 = (char *)operator new(16 * v50);
                  v52 = (uint64_t *)&v51[16 * v47];
                  *v52 = v44;
                  v52[1] = v43;
                  if (v42 == v46)
                  {
                    v54 = &v51[16 * v47];
                    a2 = v59;
                  }
                  else
                  {
                    v53 = &v51[16 * v47];
                    a2 = v59;
                    do
                    {
                      v54 = v53 - 16;
                      *((_OWORD *)v53 - 1) = *((_OWORD *)v42 - 1);
                      v42 -= 2;
                      v53 -= 16;
                    }
                    while (v42 != v46);
                  }
                  v42 = v52 + 2;
                  v41[5] = (uint64_t *)v54;
                  v41[6] = v52 + 2;
                  v41[7] = (uint64_t *)&v51[16 * v50];
                  if (v46)
                    operator delete(v46);
                }
                else
                {
                  *v42 = v44;
                  v42[1] = v43;
                  v42 += 2;
                }
                v41[6] = v42;
                v40 += 2;
              }
              while (v40 != v39);
              v40 = v61;
            }
            if (v40)
              operator delete(v40);
            v55 = (uint64_t *)v37[1];
            if (v55)
            {
              do
              {
                v56 = v55;
                v55 = (uint64_t *)*v55;
              }
              while (v55);
            }
            else
            {
              do
              {
                v56 = (uint64_t *)v37[2];
                v57 = *v56 == (_QWORD)v37;
                v37 = v56;
              }
              while (!v57);
            }
            v37 = v56;
          }
          while (v56 != (uint64_t *)v68);
        }
        v5 = llvm::LLParser::parseToken(v58, 13, "expected ')' in calls");
        goto LABEL_7;
      }
      *(_DWORD *)(v3 + 224) = llvm::LLLexer::LexToken(v4);
      v60 = 0;
    }
    while ((llvm::LLParser::parseToken(v3, 12, "expected '(' in call") & 1) == 0);
  }
  v5 = 1;
LABEL_7:
  sub_1C61CEBB4(v68[0]);
  return v5;
}

uint64_t llvm::LLParser::parseOptionalRefs(uint64_t a1, char **a2)
{
  llvm::LLLexer *v4;
  uint64_t v5;
  _QWORD *v7;
  char v8;
  void *v9;
  char *v10;
  unint64_t v11;
  __int128 v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t i;
  __int128 v22;
  _QWORD *v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t **v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t *v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t **v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t **v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char **v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t *v70;
  char *v71;
  char *v72;
  uint64_t *v73;
  uint64_t *v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  __int128 v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t *v82;
  _QWORD *v83[2];

  v4 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  if ((llvm::LLParser::parseToken(a1, 16, "expected ':' in refs") & 1) != 0
    || (llvm::LLParser::parseToken(a1, 12, "expected '(' in refs") & 1) != 0)
  {
    return 1;
  }
  v7 = *(_QWORD **)(a1 + 216);
  *(_QWORD *)&v79 = 0;
  v80 = v7;
  v76 = a1;
  v8 = llvm::LLParser::parseGVReference((llvm::LLParser *)a1, (llvm::ValueInfo *)&v79, (unsigned int *)&v79 + 2);
  v9 = 0;
  if ((v8 & 1) != 0)
  {
LABEL_26:
    v5 = 1;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v9 = 0;
    while (1)
    {
      if (v11 >= (unint64_t)v10)
      {
        v13 = v9;
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - (_QWORD)v9) >> 3);
        v15 = v14 + 1;
        if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_101:
          abort();
        v16 = v13;
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (_BYTE *)v13) >> 3);
        if (2 * v17 > v15)
          v15 = 2 * v17;
        v18 = v17 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v15;
        if (v18)
        {
          if (v18 > 0xAAAAAAAAAAAAAAALL)
LABEL_102:
            sub_1C4764EE4();
          v19 = (char *)operator new(24 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = &v19[24 * v14];
        *(_OWORD *)v20 = v79;
        *((_QWORD *)v20 + 2) = v80;
        for (i = (uint64_t)v20; (void *)v11 != v16; v11 -= 24)
        {
          v22 = *(_OWORD *)(v11 - 24);
          *(_QWORD *)(i - 8) = *(_QWORD *)(v11 - 8);
          *(_OWORD *)(i - 24) = v22;
          i -= 24;
        }
        v10 = &v19[24 * v18];
        v11 = (unint64_t)(v20 + 24);
        if (v16)
          operator delete(v16);
        v77 = i;
      }
      else
      {
        v77 = (uint64_t)v9;
        v12 = v79;
        *(_QWORD *)(v11 + 16) = v80;
        *(_OWORD *)v11 = v12;
        v11 += 24;
      }
      if (*(_DWORD *)(v76 + 224) != 4)
        break;
      *(_DWORD *)(v76 + 224) = llvm::LLLexer::LexToken(v4);
      v23 = *(_QWORD **)(v76 + 216);
      *(_QWORD *)&v79 = 0;
      v80 = v23;
      v24 = llvm::LLParser::parseGVReference((llvm::LLParser *)v76, (llvm::ValueInfo *)&v79, (unsigned int *)&v79 + 2);
      v9 = (void *)v77;
      if ((v24 & 1) != 0)
        goto LABEL_26;
    }
    v25 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v77) >> 3));
    if (v11 == v77)
      v26 = 0;
    else
      v26 = v25;
    sub_1C4FD0B14(v77, v11, v26, 1);
    v83[0] = 0;
    v83[1] = 0;
    v82 = (uint64_t *)v83;
    if (v11 != v77)
    {
      v27 = v77;
      do
      {
        if ((~*(_QWORD *)v27 & 0xFFFFFFFFFFFFFFF8) == 0)
        {
          v28 = sub_1C4FD085C(&v82, *(_DWORD *)(v27 + 8), (_DWORD *)(v27 + 8));
          v29 = v28;
          v30 = (unint64_t)(a2[1] - *a2) >> 3;
          v31 = *(_QWORD *)(v27 + 16);
          v33 = v28[6];
          v32 = v28[7];
          if (v33 >= v32)
          {
            v35 = v28[5];
            v36 = ((char *)v33 - (char *)v35) >> 4;
            v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 60)
              goto LABEL_101;
            v38 = (char *)v32 - (char *)v35;
            if (v38 >> 3 > v37)
              v37 = v38 >> 3;
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
              v39 = 0xFFFFFFFFFFFFFFFLL;
            else
              v39 = v37;
            if (v39)
            {
              if (v39 >> 60)
                goto LABEL_102;
              v40 = (char *)operator new(16 * v39);
            }
            else
            {
              v40 = 0;
            }
            v41 = &v40[16 * v36];
            *(_DWORD *)v41 = v30;
            *((_QWORD *)v41 + 1) = v31;
            v42 = (uint64_t *)v41;
            if (v33 != v35)
            {
              do
              {
                *((_OWORD *)v42 - 1) = *((_OWORD *)v33 - 1);
                v42 -= 2;
                v33 -= 2;
              }
              while (v33 != v35);
              v33 = v29[5];
            }
            v34 = (uint64_t *)(v41 + 16);
            v29[5] = v42;
            v29[6] = (uint64_t *)(v41 + 16);
            v29[7] = (uint64_t *)&v40[16 * v39];
            if (v33)
              operator delete(v33);
          }
          else
          {
            *(_DWORD *)v33 = v30;
            v33[1] = v31;
            v34 = v33 + 2;
          }
          v29[6] = v34;
        }
        v44 = a2[1];
        v43 = (unint64_t)a2[2];
        if ((unint64_t)v44 >= v43)
        {
          v46 = *a2;
          v47 = (v44 - *a2) >> 3;
          v48 = v47 + 1;
          if ((unint64_t)(v47 + 1) >> 61)
            goto LABEL_101;
          v49 = v43 - (_QWORD)v46;
          if (v49 >> 2 > v48)
            v48 = v49 >> 2;
          if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
            v50 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v50 = v48;
          if (v50)
          {
            if (v50 >> 61)
              goto LABEL_102;
            v51 = (char *)operator new(8 * v50);
          }
          else
          {
            v51 = 0;
          }
          v52 = &v51[8 * v47];
          *(_QWORD *)v52 = *(_QWORD *)v27;
          v45 = v52 + 8;
          while (v44 != v46)
          {
            v53 = *((_QWORD *)v44 - 1);
            v44 -= 8;
            *((_QWORD *)v52 - 1) = v53;
            v52 -= 8;
          }
          *a2 = v52;
          a2[1] = v45;
          a2[2] = &v51[8 * v50];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *(_QWORD *)v44 = *(_QWORD *)v27;
          v45 = v44 + 8;
        }
        a2[1] = v45;
        v27 += 24;
      }
      while (v27 != v11);
      v54 = v82;
      if (v82 != (uint64_t *)v83)
      {
        do
        {
          LODWORD(v79) = *((_DWORD *)v54 + 8);
          v80 = 0;
          v81 = 0;
          *((_QWORD *)&v79 + 1) = 0;
          sub_1C4EECB34((_QWORD *)&v79 + 1, (_BYTE *)v54[5], (_BYTE *)v54[6], (v54[6] - v54[5]) >> 4);
          v55 = sub_1C4FD085C((uint64_t **)(v76 + 1160), v79, &v79);
          v57 = (_QWORD *)*((_QWORD *)&v79 + 1);
          v56 = v80;
          if (*((_QWORD **)&v79 + 1) != v80)
          {
            v58 = v55;
            v78 = v54;
            v59 = v55[6];
            do
            {
              v60 = v57[1];
              v61 = (uint64_t)&(*a2)[8 * *(unsigned int *)v57];
              v62 = (unint64_t)v58[7];
              if ((unint64_t)v59 >= v62)
              {
                v63 = a2;
                v64 = v58[5];
                v65 = ((char *)v59 - (char *)v64) >> 4;
                v66 = v65 + 1;
                if ((unint64_t)(v65 + 1) >> 60)
                  goto LABEL_101;
                v67 = v62 - (_QWORD)v64;
                if (v67 >> 3 > v66)
                  v66 = v67 >> 3;
                if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
                  v68 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v68 = v66;
                if (v68 >> 60)
                  goto LABEL_102;
                v69 = (char *)operator new(16 * v68);
                v70 = (uint64_t *)&v69[16 * v65];
                *v70 = v61;
                v70[1] = v60;
                if (v59 == v64)
                {
                  v72 = &v69[16 * v65];
                  a2 = v63;
                }
                else
                {
                  v71 = &v69[16 * v65];
                  a2 = v63;
                  do
                  {
                    v72 = v71 - 16;
                    *((_OWORD *)v71 - 1) = *((_OWORD *)v59 - 1);
                    v59 -= 2;
                    v71 -= 16;
                  }
                  while (v59 != v64);
                }
                v59 = v70 + 2;
                v58[5] = (uint64_t *)v72;
                v58[6] = v70 + 2;
                v58[7] = (uint64_t *)&v69[16 * v68];
                if (v64)
                  operator delete(v64);
              }
              else
              {
                *v59 = v61;
                v59[1] = v60;
                v59 += 2;
              }
              v58[6] = v59;
              v57 += 2;
            }
            while (v57 != v56);
            v57 = (_QWORD *)*((_QWORD *)&v79 + 1);
            v54 = v78;
          }
          if (v57)
            operator delete(v57);
          v73 = (uint64_t *)v54[1];
          if (v73)
          {
            do
            {
              v74 = v73;
              v73 = (uint64_t *)*v73;
            }
            while (v73);
          }
          else
          {
            do
            {
              v74 = (uint64_t *)v54[2];
              v75 = *v74 == (_QWORD)v54;
              v54 = v74;
            }
            while (!v75);
          }
          v54 = v74;
        }
        while (v74 != (uint64_t *)v83);
      }
    }
    v5 = llvm::LLParser::parseToken(v76, 13, "expected ')' in refs");
    sub_1C61CEBB4(v83[0]);
    v9 = (void *)v77;
  }
  if (v9)
    operator delete(v9);
  return v5;
}

uint64_t llvm::LLParser::parseOptionalParamAccesses(_DWORD *a1, uint64_t *a2)
{
  llvm::LLLexer *v4;
  uint64_t v5;
  uint64_t *v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t **v30;
  uint64_t *v31;
  char *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  __int128 v52;
  uint64_t v53;
  void *__p[3];
  void **v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v4 = (llvm::LLLexer *)(a1 + 42);
  a1[56] = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
  if ((llvm::LLParser::parseToken((uint64_t)a1, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' here") & 1) != 0)
  {
    return 1;
  }
  v7 = a2 + 2;
  memset(__p, 0, sizeof(__p));
  while (1)
  {
    v49 = 64;
    v48 = xmmword_1C640F7C0;
    v51 = 64;
    v50 = -1;
    v53 = 0;
    v52 = 0uLL;
    v8 = llvm::LLParser::parseParamAccess(a1, (unint64_t *)&v48, (uint64_t)__p);
    if ((v8 & 1) == 0)
    {
      v10 = a2[1];
      v9 = a2[2];
      if (v10 >= v9)
      {
        v12 = (uint64_t)v7;
        v13 = *a2;
        v14 = (uint64_t)(v10 - *a2) >> 6;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 58)
LABEL_57:
          abort();
        v16 = v9 - v13;
        if (v16 >> 5 > v15)
          v15 = v16 >> 5;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFC0)
          v17 = 0x3FFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        v45 = v12;
        v58 = v12;
        if (v17 >> 58)
LABEL_58:
          sub_1C4764EE4();
        v18 = (char *)operator new(v17 << 6);
        v19 = (uint64_t)&v18[64 * v14];
        *(_DWORD *)(v19 + 16) = v49;
        *(_OWORD *)v19 = v48;
        v44 = &v18[64 * v17];
        *(_DWORD *)(v19 + 32) = v51;
        *(_QWORD *)(v19 + 24) = v50;
        v49 = 0;
        v51 = 0;
        *(_OWORD *)(v19 + 40) = v52;
        *(_QWORD *)(v19 + 56) = v53;
        v11 = v19 + 64;
        v53 = 0;
        v52 = 0uLL;
        sub_1C4F6F404(v45, v10, v10, v13, v13, v19, v19);
        v20 = *(_OWORD *)a2;
        *a2 = v21;
        a2[1] = v11;
        v56 = v20;
        v22 = a2[2];
        a2[2] = (uint64_t)v44;
        v57 = v22;
        v55 = (void **)v20;
        sub_1C61B7D3C((uint64_t)&v55);
        v7 = (uint64_t *)v45;
      }
      else
      {
        *(_QWORD *)v10 = v48;
        *(_DWORD *)(v10 + 16) = v49;
        *(_QWORD *)(v10 + 8) = *((_QWORD *)&v48 + 1);
        *(_DWORD *)(v10 + 32) = v51;
        *(_QWORD *)(v10 + 24) = v50;
        v49 = 0;
        v51 = 0;
        *(_QWORD *)(v10 + 48) = 0;
        *(_QWORD *)(v10 + 56) = 0;
        *(_QWORD *)(v10 + 40) = 0;
        *(_OWORD *)(v10 + 40) = v52;
        *(_QWORD *)(v10 + 56) = v53;
        v11 = v10 + 64;
        v52 = 0uLL;
        v53 = 0;
      }
      a2[1] = v11;
    }
    v55 = (void **)&v52;
    sub_1C4EEB714(&v55);
    if (v51 >= 0x41 && v50)
      MEMORY[0x1CAA32F9C](v50, 0x1000C8000313F17);
    if (v49 >= 0x41 && *((_QWORD *)&v48 + 1))
      MEMORY[0x1CAA32F9C](*((_QWORD *)&v48 + 1), 0x1000C8000313F17);
    if ((v8 & 1) != 0)
      goto LABEL_28;
    if (a1[56] != 4)
      break;
    a1[56] = llvm::LLLexer::LexToken(v4);
  }
  if ((llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' here") & 1) != 0)
  {
LABEL_28:
    v5 = 1;
    goto LABEL_29;
  }
  v23 = *a2;
  v46 = a2[1];
  if (*a2 == v46)
  {
    v5 = 0;
  }
  else
  {
    v24 = (unsigned int *)__p[0];
    v25 = (uint64_t **)(a1 + 290);
    do
    {
      v27 = *(_QWORD *)(v23 + 40);
      v26 = *(_QWORD *)(v23 + 48);
      v47 = v23;
      while (v27 != v26)
      {
        v28 = v27 + 8;
        if ((~*(_QWORD *)(v27 + 8) & 0xFFFFFFFFFFFFFFF8) == 0)
        {
          v29 = sub_1C4FD085C(v25, *v24, v24);
          v30 = v29;
          v32 = (char *)v29[6];
          v31 = v29[7];
          if (v32 >= (char *)v31)
          {
            v34 = v29[5];
            v35 = (v32 - (char *)v34) >> 4;
            v36 = v35 + 1;
            if ((unint64_t)(v35 + 1) >> 60)
              goto LABEL_57;
            v37 = (char *)v31 - (char *)v34;
            if (v37 >> 3 > v36)
              v36 = v37 >> 3;
            if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
              v38 = 0xFFFFFFFFFFFFFFFLL;
            else
              v38 = v36;
            if (v38 >> 60)
              goto LABEL_58;
            v39 = (char *)operator new(16 * v38);
            v40 = &v39[16 * v35];
            *(_QWORD *)v40 = v28;
            *((_QWORD *)v40 + 1) = *((_QWORD *)v24 + 1);
            if (v32 == (char *)v34)
            {
              v42 = &v39[16 * v35];
            }
            else
            {
              v41 = &v39[16 * v35];
              do
              {
                v42 = v41 - 16;
                *((_OWORD *)v41 - 1) = *((_OWORD *)v32 - 1);
                v32 -= 16;
                v41 -= 16;
              }
              while (v32 != (char *)v34);
            }
            v43 = (uint64_t *)&v39[16 * v38];
            v33 = (uint64_t *)(v40 + 16);
            v30[5] = (uint64_t *)v42;
            v30[6] = (uint64_t *)(v40 + 16);
            v30[7] = v43;
            if (v34)
              operator delete(v34);
          }
          else
          {
            *(_QWORD *)v32 = v28;
            *((_QWORD *)v32 + 1) = *((_QWORD *)v24 + 1);
            v33 = (uint64_t *)(v32 + 16);
          }
          v30[6] = v33;
        }
        v24 += 4;
        v27 += 48;
      }
      v5 = 0;
      v23 = v47 + 64;
    }
    while (v47 + 64 != v46);
  }
LABEL_29:
  if (__p[0])
    operator delete(__p[0]);
  return v5;
}

uint64_t llvm::LLParser::parseOptionalVTableFuncs(uint64_t a1, char **a2)
{
  uint64_t v3;
  llvm::LLLexer *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char **v35;
  uint64_t *v36;
  uint64_t **v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t *v55;
  BOOL v56;
  uint64_t v57;
  char **v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  uint64_t *v65;
  _QWORD *v66[2];

  v3 = a1;
  v4 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  if ((llvm::LLParser::parseToken(v3, 16, "expected ':' in vTableFuncs") & 1) != 0
    || (llvm::LLParser::parseToken(v3, 12, "expected '(' in vTableFuncs") & 1) != 0)
  {
    return 1;
  }
  v66[0] = 0;
  v66[1] = 0;
  v65 = (uint64_t *)v66;
  v59 = 0;
  if ((llvm::LLParser::parseToken(v3, 12, "expected '(' in vTableFunc") & 1) == 0)
  {
    v58 = a2;
    v57 = v3;
    do
    {
      if ((llvm::LLParser::parseToken(v3, 389, "expected 'callee' in vTableFunc") & 1) != 0)
        break;
      if ((llvm::LLParser::parseToken(v3, 16, "expected ':'") & 1) != 0)
        break;
      v7 = *(_QWORD *)(v3 + 216);
      v64 = 0;
      if (llvm::LLParser::parseGVReference((llvm::LLParser *)v3, (llvm::ValueInfo *)&v59, &v64))
        break;
      v63 = 0;
      if ((llvm::LLParser::parseToken(v3, 4, "expected comma") & 1) != 0
        || (llvm::LLParser::parseToken(v3, 399, "expected offset") & 1) != 0
        || (llvm::LLParser::parseToken(v3, 16, "expected ':'") & 1) != 0
        || (llvm::LLParser::parseUInt64((char **)v3, &v63) & 1) != 0)
      {
        break;
      }
      v8 = v59;
      if ((~v59 & 0xFFFFFFFFFFFFFFF8) == 0)
      {
        v9 = sub_1C4FD085C(&v65, v64, &v64);
        v10 = v9;
        v11 = (unint64_t)(a2[1] - *a2) >> 4;
        v13 = v9[6];
        v12 = v9[7];
        if (v13 >= v12)
        {
          v15 = v9[5];
          v16 = ((char *)v13 - (char *)v15) >> 4;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60)
            goto LABEL_89;
          v18 = (char *)v12 - (char *)v15;
          if (v18 >> 3 > v17)
            v17 = v18 >> 3;
          if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
            v19 = 0xFFFFFFFFFFFFFFFLL;
          else
            v19 = v17;
          if (v19)
          {
            if (v19 >> 60)
              goto LABEL_90;
            v20 = (char *)operator new(16 * v19);
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[16 * v16];
          *(_DWORD *)v21 = v11;
          *((_QWORD *)v21 + 1) = v7;
          v22 = (uint64_t *)v21;
          if (v13 != v15)
          {
            do
            {
              *((_OWORD *)v22 - 1) = *((_OWORD *)v13 - 1);
              v22 -= 2;
              v13 -= 2;
            }
            while (v13 != v15);
            v13 = v10[5];
          }
          v14 = (uint64_t *)(v21 + 16);
          v10[5] = v22;
          v10[6] = (uint64_t *)(v21 + 16);
          v10[7] = (uint64_t *)&v20[16 * v19];
          if (v13)
            operator delete(v13);
          a2 = v58;
        }
        else
        {
          *(_DWORD *)v13 = v11;
          v13[1] = v7;
          v14 = v13 + 2;
        }
        v10[6] = v14;
      }
      v23 = v63;
      v25 = a2[1];
      v24 = (unint64_t)a2[2];
      if ((unint64_t)v25 >= v24)
      {
        v27 = *a2;
        v28 = (v25 - *a2) >> 4;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 60)
LABEL_89:
          abort();
        v30 = v24 - (_QWORD)v27;
        if (v30 >> 3 > v29)
          v29 = v30 >> 3;
        v31 = (unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v29;
        if (v31)
        {
          if (v31 >> 60)
LABEL_90:
            sub_1C4764EE4();
          v32 = (char *)operator new(16 * v31);
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[16 * v28];
        *(_QWORD *)v33 = v8;
        *((_QWORD *)v33 + 1) = v23;
        v34 = v33;
        if (v25 == v27)
        {
          v35 = v58;
          v3 = v57;
        }
        else
        {
          v3 = v57;
          do
          {
            *((_OWORD *)v34 - 1) = *((_OWORD *)v25 - 1);
            v34 -= 16;
            v25 -= 16;
          }
          while (v25 != v27);
          v35 = v58;
          v25 = *v58;
        }
        v26 = v33 + 16;
        *v35 = v34;
        v35[1] = v33 + 16;
        v35[2] = &v32[16 * v31];
        a2 = v35;
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_QWORD *)v25 = v8;
        *((_QWORD *)v25 + 1) = v23;
        v26 = v25 + 16;
        v3 = v57;
      }
      a2[1] = v26;
      if ((llvm::LLParser::parseToken(v3, 13, "expected ')' in vTableFunc") & 1) != 0)
        break;
      if (*(_DWORD *)(v3 + 224) != 4)
      {
        v36 = v65;
        if (v65 != (uint64_t *)v66)
        {
          do
          {
            LODWORD(v59) = *((_DWORD *)v36 + 8);
            v61 = 0;
            v62 = 0;
            v60 = 0;
            sub_1C4EECB34(&v60, (_BYTE *)v36[5], (_BYTE *)v36[6], (v36[6] - v36[5]) >> 4);
            v37 = sub_1C4FD085C((uint64_t **)(v57 + 1160), v59, &v59);
            v39 = v60;
            v38 = v61;
            if (v60 != v61)
            {
              v40 = v37;
              v41 = v37[6];
              do
              {
                v42 = v39[1];
                v43 = (uint64_t)&(*a2)[16 * *(unsigned int *)v39];
                v44 = (unint64_t)v40[7];
                if ((unint64_t)v41 >= v44)
                {
                  v45 = v40[5];
                  v46 = ((char *)v41 - (char *)v45) >> 4;
                  v47 = v46 + 1;
                  if ((unint64_t)(v46 + 1) >> 60)
                    goto LABEL_89;
                  v48 = v44 - (_QWORD)v45;
                  if (v48 >> 3 > v47)
                    v47 = v48 >> 3;
                  if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFF0)
                    v49 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v49 = v47;
                  if (v49 >> 60)
                    goto LABEL_90;
                  v50 = (char *)operator new(16 * v49);
                  v51 = (uint64_t *)&v50[16 * v46];
                  *v51 = v43;
                  v51[1] = v42;
                  if (v41 == v45)
                  {
                    v53 = &v50[16 * v46];
                    a2 = v58;
                  }
                  else
                  {
                    v52 = &v50[16 * v46];
                    a2 = v58;
                    do
                    {
                      v53 = v52 - 16;
                      *((_OWORD *)v52 - 1) = *((_OWORD *)v41 - 1);
                      v41 -= 2;
                      v52 -= 16;
                    }
                    while (v41 != v45);
                  }
                  v41 = v51 + 2;
                  v40[5] = (uint64_t *)v53;
                  v40[6] = v51 + 2;
                  v40[7] = (uint64_t *)&v50[16 * v49];
                  if (v45)
                    operator delete(v45);
                }
                else
                {
                  *v41 = v43;
                  v41[1] = v42;
                  v41 += 2;
                }
                v40[6] = v41;
                v39 += 2;
              }
              while (v39 != v38);
              v39 = v60;
            }
            if (v39)
              operator delete(v39);
            v54 = (uint64_t *)v36[1];
            if (v54)
            {
              do
              {
                v55 = v54;
                v54 = (uint64_t *)*v54;
              }
              while (v54);
            }
            else
            {
              do
              {
                v55 = (uint64_t *)v36[2];
                v56 = *v55 == (_QWORD)v36;
                v36 = v55;
              }
              while (!v56);
            }
            v36 = v55;
          }
          while (v55 != (uint64_t *)v66);
        }
        v5 = llvm::LLParser::parseToken(v57, 13, "expected ')' in vTableFuncs");
        goto LABEL_7;
      }
      *(_DWORD *)(v3 + 224) = llvm::LLLexer::LexToken(v4);
      v59 = 0;
    }
    while ((llvm::LLParser::parseToken(v3, 12, "expected '(' in vTableFunc") & 1) == 0);
  }
  v5 = 1;
LABEL_7:
  sub_1C61CEBB4(v66[0]);
  return v5;
}

uint64_t sub_1C4FCC224(uint64_t a1, void **this)
{
  llvm::LLLexer *v3;
  const void **v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  const char *v14;
  int v15;
  __int16 v16;

  v3 = (llvm::LLLexer *)(a1 + 168);
  if (*(_DWORD *)(a1 + 224) != 457)
  {
    v14 = "expected integer";
    v16 = 259;
    return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)&v14);
  }
  if (*((_DWORD *)this + 2) > 0x40u || *(_DWORD *)(a1 + 312) > 0x40u)
  {
    v5 = (const void **)(a1 + 304);
    if ((void **)(a1 + 304) != this)
    {
      llvm::APInt::reallocate((uint64_t)this, *(_DWORD *)(a1 + 312));
      v10 = *((unsigned int *)this + 2);
      if (v10 <= 0x40)
        *this = (void *)*v5;
      else
        memcpy(*this, *v5, ((unint64_t)(v10 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    *this = *(void **)(a1 + 304);
    *((_DWORD *)this + 2) = *(_DWORD *)(a1 + 312);
  }
  v6 = *(unsigned __int8 *)(a1 + 316);
  *((_BYTE *)this + 12) = v6;
  v7 = *((_DWORD *)this + 2);
  if (v6)
  {
    if (v7 <= 0x3F)
    {
      v8 = (uint64_t)*this;
      goto LABEL_9;
    }
  }
  else if (v7 <= 0x3F)
  {
    v8 = (uint64_t)((_QWORD)*this << -(char)v7) >> -(char)v7;
    goto LABEL_9;
  }
  if (v7 == 64)
  {
    sub_1C5DD14E0((uint64_t)&v14, (uint64_t)this);
    goto LABEL_17;
  }
  v8 = *(_QWORD *)*this;
LABEL_9:
  v15 = 64;
  v14 = (const char *)v8;
LABEL_17:
  v11 = v15;
  v12 = (char *)v14;
  if (*((_DWORD *)this + 2) >= 0x41u)
  {
    if (*this)
      MEMORY[0x1CAA32F9C](*this, 0x1000C8000313F17);
  }
  *this = v12;
  *((_DWORD *)this + 2) = v11;
  *((_BYTE *)this + 12) = 0;
  v13 = llvm::LLLexer::LexToken(v3);
  result = 0;
  *(_DWORD *)(a1 + 224) = v13;
  return result;
}

uint64_t sub_1C4FCC3C8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)(result + 8) >= 0x41u && *(_QWORD *)result)
  {
    v3 = a2;
    v5 = result;
    MEMORY[0x1CAA32F9C](*(_QWORD *)result, 0x1000C8000313F17);
    a2 = v3;
    result = v5;
  }
  *(_QWORD *)result = *(_QWORD *)a2;
  *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  if (*(_DWORD *)(result + 24) >= 0x41u)
  {
    v2 = *(_QWORD *)(result + 16);
    if (v2)
    {
      v4 = a2;
      v6 = result;
      MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
      a2 = v4;
      result = v6;
    }
  }
  *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
  *(_DWORD *)(result + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 24) = 0;
  return result;
}

uint64_t llvm::LLParser::parseParamAccess(_DWORD *a1, unint64_t *a2, uint64_t a3)
{
  char v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  void **v20;
  unsigned int v21;
  char *v22;
  unsigned int v23;
  unsigned int *v24;
  void **v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  __int128 v39;
  void *__src;
  unsigned int v41;
  void *v42;
  unsigned int v43;

  if ((llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' here") & 1) == 0
    && (llvm::LLParser::parseParamNo((char **)a1, a2) & 1) == 0
    && (llvm::LLParser::parseToken((uint64_t)a1, 4, "expected ',' here") & 1) == 0
    && (llvm::LLParser::parseParamAccessOffset((llvm::LLParser *)a1, (llvm::ConstantRange *)(a2 + 1)) & 1) == 0)
  {
    if (a1[56] != 4)
      return llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' here");
    a1[56] = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
    if ((llvm::LLParser::parseToken((uint64_t)a1, 378, "expected 'calls' here") & 1) == 0
      && (llvm::LLParser::parseToken((uint64_t)a1, 16, "expected ':' here") & 1) == 0
      && (llvm::LLParser::parseToken((uint64_t)a1, 12, "expected '(' here") & 1) == 0)
    {
      while (1)
      {
        v39 = 0uLL;
        v41 = 64;
        __src = (void *)-1;
        v43 = 64;
        v42 = (void *)-1;
        v7 = llvm::LLParser::parseParamAccessCall((llvm::LLParser *)a1, (unint64_t *)&v39, a3);
        if ((v7 & 1) == 0)
        {
          v9 = a2[6];
          v8 = a2[7];
          if (v9 >= v8)
          {
            v13 = a2[5];
            v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v13) >> 4);
            v15 = v14 + 1;
            if (v14 + 1 > 0x555555555555555)
              abort();
            v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v13) >> 4);
            if (2 * v16 > v15)
              v15 = 2 * v16;
            if (v16 >= 0x2AAAAAAAAAAAAAALL)
              v17 = 0x555555555555555;
            else
              v17 = v15;
            if (v17)
            {
              if (v17 > 0x555555555555555)
                sub_1C4764EE4();
              v18 = (char *)operator new(48 * v17);
            }
            else
            {
              v18 = 0;
            }
            v19 = &v18[48 * v14];
            *(_OWORD *)v19 = v39;
            v20 = (void **)(v19 + 16);
            v21 = v41;
            *((_DWORD *)v19 + 6) = v41;
            if (v21 > 0x40)
            {
              v37 = (void *)operator new[]();
              *v20 = v37;
              memcpy(v37, __src, (((unint64_t)*((unsigned int *)v19 + 6) + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              *v20 = __src;
            }
            v22 = &v18[48 * v14];
            v23 = v43;
            *((_DWORD *)v22 + 10) = v43;
            v24 = (unsigned int *)(v22 + 40);
            v25 = (void **)(v24 - 2);
            if (v23 > 0x40)
            {
              v38 = (void *)operator new[]();
              *v25 = v38;
              memcpy(v38, v42, (((unint64_t)*v24 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              *v25 = v42;
            }
            v26 = &v18[48 * v17];
            v12 = (unint64_t)(v19 + 48);
            v27 = (char *)a2[5];
            v28 = (char *)a2[6];
            if (v28 == v27)
            {
              a2[5] = (unint64_t)v19;
              a2[6] = v12;
              a2[7] = (unint64_t)v26;
            }
            else
            {
              v29 = 0;
              do
              {
                v30 = &v19[v29];
                v31 = &v28[v29];
                *((_OWORD *)v30 - 3) = *(_OWORD *)&v28[v29 - 48];
                *((_DWORD *)v30 - 6) = *(_DWORD *)&v28[v29 - 24];
                *((_QWORD *)v30 - 4) = *(_QWORD *)&v28[v29 - 32];
                *((_DWORD *)v31 - 6) = 0;
                *((_DWORD *)v30 - 2) = *(_DWORD *)&v28[v29 - 8];
                *((_QWORD *)v30 - 2) = *(_QWORD *)&v28[v29 - 16];
                *((_DWORD *)v31 - 2) = 0;
                v29 -= 48;
              }
              while (&v28[v29] != v27);
              v28 = (char *)a2[5];
              v32 = (char *)a2[6];
              a2[5] = (unint64_t)&v19[v29];
              a2[6] = v12;
              a2[7] = (unint64_t)v26;
              while (v32 != v28)
              {
                if (*((_DWORD *)v32 - 2) >= 0x41u)
                {
                  v33 = *((_QWORD *)v32 - 2);
                  if (v33)
                    MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
                }
                if (*((_DWORD *)v32 - 6) >= 0x41u)
                {
                  v34 = *((_QWORD *)v32 - 4);
                  if (v34)
                    MEMORY[0x1CAA32F9C](v34, 0x1000C8000313F17);
                }
                v32 -= 48;
              }
            }
            if (v28)
              operator delete(v28);
          }
          else
          {
            *(_OWORD *)v9 = v39;
            v10 = v41;
            *(_DWORD *)(v9 + 24) = v41;
            if (v10 > 0x40)
            {
              v35 = (void *)operator new[]();
              *(_QWORD *)(v9 + 16) = v35;
              memcpy(v35, __src, (((unint64_t)*(unsigned int *)(v9 + 24) + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              *(_QWORD *)(v9 + 16) = __src;
            }
            v11 = v43;
            *(_DWORD *)(v9 + 40) = v43;
            if (v11 > 0x40)
            {
              v36 = (void *)operator new[]();
              *(_QWORD *)(v9 + 32) = v36;
              memcpy(v36, v42, (((unint64_t)*(unsigned int *)(v9 + 40) + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              *(_QWORD *)(v9 + 32) = v42;
            }
            v12 = v9 + 48;
          }
          a2[6] = v12;
        }
        if (v43 >= 0x41 && v42)
          MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
        if (v41 >= 0x41)
        {
          if (__src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        }
        if ((v7 & 1) != 0)
          break;
        if (a1[56] != 4)
        {
          if ((llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' here") & 1) != 0)
            return 1;
          return llvm::LLParser::parseToken((uint64_t)a1, 13, "expected ')' here");
        }
        a1[56] = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
      }
    }
  }
  return 1;
}

uint64_t llvm::LLParser::parseTypeTests(uint64_t a1, unint64_t **a2)
{
  llvm::LLLexer *v4;
  uint64_t v5;
  int i;
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t **v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t *v49;
  char *v50;
  char *v51;
  uint64_t *v52;
  uint64_t *v53;
  BOOL v54;
  uint64_t v55;
  uint64_t **v56;
  unint64_t **v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t *v63;
  _QWORD *v64[2];

  v4 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  if ((llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken(a1, 12, "expected '(' in typeIdInfo") & 1) != 0)
  {
    return 1;
  }
  v64[0] = 0;
  v64[1] = 0;
  v57 = a2;
  v63 = (uint64_t *)v64;
  for (i = *(_DWORD *)(a1 + 224); ; *(_DWORD *)(a1 + 224) = i)
  {
    v58 = 0;
    if (i == 436)
    {
      v62 = *(_DWORD *)(a1 + 256);
      v8 = *(_QWORD *)(a1 + 216);
      v9 = sub_1C4FD085C(&v63, v62, &v62);
      v10 = v9;
      v11 = (unint64_t)((char *)a2[1] - (char *)*a2) >> 3;
      v13 = v9[6];
      v12 = v9[7];
      if (v13 >= v12)
      {
        v15 = v9[5];
        v16 = ((char *)v13 - (char *)v15) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          goto LABEL_81;
        v18 = (char *)v12 - (char *)v15;
        if (v18 >> 3 > v17)
          v17 = v18 >> 3;
        v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v17;
        if (v19)
        {
          if (v19 >> 60)
            goto LABEL_82;
          v20 = (char *)operator new(16 * v19);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[16 * v16];
        *(_DWORD *)v21 = v11;
        *((_QWORD *)v21 + 1) = v8;
        v22 = (uint64_t *)v21;
        if (v13 == v15)
        {
          a2 = v57;
        }
        else
        {
          a2 = v57;
          do
          {
            *((_OWORD *)v22 - 1) = *((_OWORD *)v13 - 1);
            v22 -= 2;
            v13 -= 2;
          }
          while (v13 != v15);
          v13 = v10[5];
        }
        v14 = (uint64_t *)(v21 + 16);
        v10[5] = v22;
        v10[6] = (uint64_t *)(v21 + 16);
        v10[7] = (uint64_t *)&v20[16 * v19];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_DWORD *)v13 = v11;
        v13[1] = v8;
        v14 = v13 + 2;
        a2 = v57;
      }
      v10[6] = v14;
      *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v4);
    }
    else if ((llvm::LLParser::parseUInt64((char **)a1, &v58) & 1) != 0)
    {
      v5 = 1;
      goto LABEL_80;
    }
    v24 = a2[1];
    v23 = (unint64_t)a2[2];
    if ((unint64_t)v24 >= v23)
    {
      v26 = *a2;
      v27 = v24 - *a2;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 61)
LABEL_81:
        abort();
      v29 = v23 - (_QWORD)v26;
      if (v29 >> 2 > v28)
        v28 = v29 >> 2;
      v30 = (unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v28;
      if (v30)
      {
        if (v30 >> 61)
LABEL_82:
          sub_1C4764EE4();
        v31 = (char *)operator new(8 * v30);
      }
      else
      {
        v31 = 0;
      }
      v32 = (unint64_t *)&v31[8 * v27];
      *v32 = v58;
      v25 = v32 + 1;
      while (v24 != v26)
      {
        v33 = *--v24;
        *--v32 = v33;
      }
      *a2 = v32;
      a2[1] = v25;
      a2[2] = (unint64_t *)&v31[8 * v30];
      if (v26)
        operator delete(v26);
    }
    else
    {
      *v24 = v58;
      v25 = v24 + 1;
    }
    a2[1] = v25;
    if (*(_DWORD *)(a1 + 224) != 4)
      break;
    i = llvm::LLLexer::LexToken(v4);
  }
  v55 = a1;
  v34 = v63;
  if (v63 != (uint64_t *)v64)
  {
    v56 = (uint64_t **)(a1 + 1232);
    do
    {
      LODWORD(v58) = *((_DWORD *)v34 + 8);
      v60 = 0;
      v61 = 0;
      v59 = 0;
      sub_1C4EECB34(&v59, (_BYTE *)v34[5], (_BYTE *)v34[6], (v34[6] - v34[5]) >> 4);
      v35 = sub_1C4FD085C(v56, v58, &v58);
      v37 = v59;
      v36 = v60;
      if (v59 != v60)
      {
        v38 = v35;
        v39 = v35[6];
        do
        {
          v40 = v37[1];
          v41 = (uint64_t)&(*a2)[*(unsigned int *)v37];
          v42 = (unint64_t)v38[7];
          if ((unint64_t)v39 >= v42)
          {
            v43 = v38[5];
            v44 = ((char *)v39 - (char *)v43) >> 4;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 60)
              goto LABEL_81;
            v46 = v42 - (_QWORD)v43;
            if (v46 >> 3 > v45)
              v45 = v46 >> 3;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF0)
              v47 = 0xFFFFFFFFFFFFFFFLL;
            else
              v47 = v45;
            if (v47 >> 60)
              goto LABEL_82;
            v48 = (char *)operator new(16 * v47);
            v49 = (uint64_t *)&v48[16 * v44];
            *v49 = v41;
            v49[1] = v40;
            if (v39 == v43)
            {
              v51 = &v48[16 * v44];
            }
            else
            {
              v50 = &v48[16 * v44];
              do
              {
                v51 = v50 - 16;
                *((_OWORD *)v50 - 1) = *((_OWORD *)v39 - 1);
                v39 -= 2;
                v50 -= 16;
              }
              while (v39 != v43);
            }
            v39 = v49 + 2;
            v38[5] = (uint64_t *)v51;
            v38[6] = v49 + 2;
            v38[7] = (uint64_t *)&v48[16 * v47];
            if (v43)
              operator delete(v43);
            a2 = v57;
          }
          else
          {
            *v39 = v41;
            v39[1] = v40;
            v39 += 2;
          }
          v38[6] = v39;
          v37 += 2;
        }
        while (v37 != v36);
        v37 = v59;
      }
      if (v37)
        operator delete(v37);
      v52 = (uint64_t *)v34[1];
      if (v52)
      {
        do
        {
          v53 = v52;
          v52 = (uint64_t *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (uint64_t *)v34[2];
          v54 = *v53 == (_QWORD)v34;
          v34 = v53;
        }
        while (!v54);
      }
      v34 = v53;
    }
    while (v53 != (uint64_t *)v64);
  }
  v5 = llvm::LLParser::parseToken(v55, 13, "expected ')' in typeIdInfo");
LABEL_80:
  sub_1C61CEBB4(v64[0]);
  return v5;
}

uint64_t llvm::LLParser::parseVFuncIdList(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  llvm::LLLexer *v5;
  uint64_t v6;
  unint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char **v19;
  uint64_t *v20;
  uint64_t **v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  uint64_t *v38;
  uint64_t *v39;
  BOOL v40;
  uint64_t **v41;
  _QWORD *v42;
  __int128 v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t *v46;
  _QWORD *v47[2];

  v5 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  if ((llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) != 0
    || (llvm::LLParser::parseToken(a1, 12, "expected '(' here") & 1) != 0)
  {
    return 1;
  }
  v47[0] = 0;
  v47[1] = 0;
  v46 = (uint64_t *)v47;
  if ((llvm::LLParser::parseVFuncId(a1, (unint64_t *)&v43, &v46, (a3[1] - *a3) >> 4) & 1) != 0)
    goto LABEL_28;
  v42 = a3;
  while (1)
  {
    v9 = (_OWORD *)a3[1];
    v8 = a3[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = (_OWORD *)*a3;
      v12 = ((uint64_t)v9 - *a3) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
LABEL_61:
        abort();
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v13;
      if (v15)
      {
        if (v15 >> 60)
LABEL_62:
          sub_1C4764EE4();
        v16 = (char *)operator new(16 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[16 * v12];
      *(_OWORD *)v17 = v43;
      v18 = v17;
      if (v9 != v11)
      {
        do
        {
          *((_OWORD *)v18 - 1) = *(v9 - 1);
          v18 -= 16;
          --v9;
        }
        while (v9 != v11);
        v9 = (_OWORD *)*a3;
      }
      v19 = (char **)a3;
      v10 = v17 + 16;
      *v19 = v18;
      v19[1] = v17 + 16;
      v19[2] = &v16[16 * v15];
      if (v9)
        operator delete(v9);
    }
    else
    {
      *v9 = v43;
      v10 = v9 + 1;
    }
    v42[1] = v10;
    a3 = v42;
    if (*(_DWORD *)(a1 + 224) != 4)
      break;
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v5);
    if ((llvm::LLParser::parseVFuncId(a1, (unint64_t *)&v43, &v46, (v42[1] - *v42) >> 4) & 1) != 0)
      goto LABEL_28;
  }
  if ((llvm::LLParser::parseToken(a1, 13, "expected ')' here") & 1) != 0)
  {
LABEL_28:
    v6 = 1;
  }
  else
  {
    v20 = v46;
    if (v46 != (uint64_t *)v47)
    {
      v41 = (uint64_t **)(a1 + 1232);
      do
      {
        LODWORD(v43) = *((_DWORD *)v20 + 8);
        v44 = 0;
        v45 = 0;
        *((_QWORD *)&v43 + 1) = 0;
        sub_1C4EECB34((_QWORD *)&v43 + 1, (_BYTE *)v20[5], (_BYTE *)v20[6], (v20[6] - v20[5]) >> 4);
        v21 = sub_1C4FD085C(v41, v43, &v43);
        v22 = (_QWORD *)*((_QWORD *)&v43 + 1);
        v23 = v44;
        if (*((_QWORD **)&v43 + 1) != v44)
        {
          v24 = v21;
          v25 = v21[6];
          do
          {
            v26 = v22[1];
            v27 = *a3 + 16 * *(unsigned int *)v22;
            v28 = (unint64_t)v24[7];
            if ((unint64_t)v25 >= v28)
            {
              v29 = v24[5];
              v30 = ((char *)v25 - (char *)v29) >> 4;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 60)
                goto LABEL_61;
              v32 = v28 - (_QWORD)v29;
              if (v32 >> 3 > v31)
                v31 = v32 >> 3;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
                v33 = 0xFFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33 >> 60)
                goto LABEL_62;
              v34 = (char *)operator new(16 * v33);
              v35 = (uint64_t *)&v34[16 * v30];
              *v35 = v27;
              v35[1] = v26;
              if (v25 == v29)
              {
                v37 = &v34[16 * v30];
                a3 = v42;
              }
              else
              {
                v36 = &v34[16 * v30];
                a3 = v42;
                do
                {
                  v37 = v36 - 16;
                  *((_OWORD *)v36 - 1) = *((_OWORD *)v25 - 1);
                  v25 -= 2;
                  v36 -= 16;
                }
                while (v25 != v29);
              }
              v25 = v35 + 2;
              v24[5] = (uint64_t *)v37;
              v24[6] = v35 + 2;
              v24[7] = (uint64_t *)&v34[16 * v33];
              if (v29)
                operator delete(v29);
            }
            else
            {
              *v25 = v27;
              v25[1] = v26;
              v25 += 2;
            }
            v24[6] = v25;
            v22 += 2;
          }
          while (v22 != v23);
          v22 = (_QWORD *)*((_QWORD *)&v43 + 1);
        }
        if (v22)
          operator delete(v22);
        v38 = (uint64_t *)v20[1];
        if (v38)
        {
          do
          {
            v39 = v38;
            v38 = (uint64_t *)*v38;
          }
          while (v38);
        }
        else
        {
          do
          {
            v39 = (uint64_t *)v20[2];
            v40 = *v39 == (_QWORD)v20;
            v20 = v39;
          }
          while (!v40);
        }
        v20 = v39;
      }
      while (v39 != (uint64_t *)v47);
    }
    v6 = 0;
  }
  sub_1C61CEBB4(v47[0]);
  return v6;
}

uint64_t llvm::LLParser::parseConstVCallList(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  llvm::LLLexer *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t **v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  char *v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  BOOL v31;
  uint64_t **v32;
  uint64_t *v33;
  __int128 v34;
  void *__p;
  _BYTE *v36;
  uint64_t v37;
  uint64_t *v38;
  _QWORD *v39[2];

  v5 = (llvm::LLLexer *)(a1 + 168);
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  if ((llvm::LLParser::parseToken(a1, 16, "expected ':' here") & 1) == 0
    && (llvm::LLParser::parseToken(a1, 12, "expected '(' here") & 1) == 0)
  {
    v39[0] = 0;
    v39[1] = 0;
    v37 = 0;
    v38 = (uint64_t *)v39;
    __p = 0;
    v36 = 0;
    if ((llvm::LLParser::parseConstVCall(a1, (unint64_t *)&v34, &v38, -858993459 * ((unint64_t)(a3[1] - *a3) >> 3)) & 1) != 0)
    {
LABEL_13:
      if (__p)
      {
        v36 = __p;
        operator delete(__p);
      }
    }
    else
    {
      while (1)
      {
        v8 = a3[1];
        if (v8 >= a3[2])
        {
          v9 = sub_1C4EEB46C(a3, (uint64_t)&v34);
        }
        else
        {
          *(_OWORD *)v8 = v34;
          *(_QWORD *)(v8 + 24) = 0;
          *(_QWORD *)(v8 + 32) = 0;
          *(_QWORD *)(v8 + 16) = 0;
          sub_1C4DFE394((_QWORD *)(v8 + 16), __p, (uint64_t)v36, (v36 - (_BYTE *)__p) >> 3);
          v9 = v8 + 40;
        }
        a3[1] = v9;
        if (__p)
        {
          v36 = __p;
          operator delete(__p);
        }
        if (*(_DWORD *)(a1 + 224) != 4)
          break;
        *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken(v5);
        __p = 0;
        v36 = 0;
        v37 = 0;
        if ((llvm::LLParser::parseConstVCall(a1, (unint64_t *)&v34, &v38, -858993459 * ((unint64_t)(a3[1] - *a3) >> 3)) & 1) != 0)goto LABEL_13;
      }
      if ((llvm::LLParser::parseToken(a1, 13, "expected ')' here") & 1) == 0)
      {
        v10 = v38;
        if (v38 != (uint64_t *)v39)
        {
          v32 = (uint64_t **)(a1 + 1232);
          do
          {
            LODWORD(v34) = *((_DWORD *)v10 + 8);
            __p = 0;
            v36 = 0;
            *((_QWORD *)&v34 + 1) = 0;
            sub_1C4EECB34((_QWORD *)&v34 + 1, (_BYTE *)v10[5], (_BYTE *)v10[6], (v10[6] - v10[5]) >> 4);
            v11 = sub_1C4FD085C(v32, v34, &v34);
            v12 = (_QWORD *)*((_QWORD *)&v34 + 1);
            v13 = __p;
            if (*((void **)&v34 + 1) != __p)
            {
              v14 = v11;
              v33 = v10;
              v15 = v11[6];
              do
              {
                v16 = v12[1];
                v17 = *a3 + 40 * *(unsigned int *)v12;
                v18 = (unint64_t)v14[7];
                if ((unint64_t)v15 >= v18)
                {
                  v19 = a3;
                  v20 = v14[5];
                  v21 = ((char *)v15 - (char *)v20) >> 4;
                  v22 = v21 + 1;
                  if ((unint64_t)(v21 + 1) >> 60)
                    abort();
                  v23 = v18 - (_QWORD)v20;
                  if (v23 >> 3 > v22)
                    v22 = v23 >> 3;
                  if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
                    v24 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v24 = v22;
                  if (v24 >> 60)
                    sub_1C4764EE4();
                  v25 = (char *)operator new(16 * v24);
                  v26 = (uint64_t *)&v25[16 * v21];
                  *v26 = v17;
                  v26[1] = v16;
                  if (v15 == v20)
                  {
                    v28 = &v25[16 * v21];
                    a3 = v19;
                  }
                  else
                  {
                    v27 = &v25[16 * v21];
                    a3 = v19;
                    do
                    {
                      v28 = v27 - 16;
                      *((_OWORD *)v27 - 1) = *((_OWORD *)v15 - 1);
                      v15 -= 2;
                      v27 -= 16;
                    }
                    while (v15 != v20);
                  }
                  v15 = v26 + 2;
                  v14[5] = (uint64_t *)v28;
                  v14[6] = v26 + 2;
                  v14[7] = (uint64_t *)&v25[16 * v24];
                  if (v20)
                    operator delete(v20);
                }
                else
                {
                  *v15 = v17;
                  v15[1] = v16;
                  v15 += 2;
                }
                v14[6] = v15;
                v12 += 2;
              }
              while (v12 != v13);
              v12 = (_QWORD *)*((_QWORD *)&v34 + 1);
              v10 = v33;
            }
            if (v12)
              operator delete(v12);
            v29 = (uint64_t *)v10[1];
            if (v29)
            {
              do
              {
                v30 = v29;
                v29 = (uint64_t *)*v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                v30 = (uint64_t *)v10[2];
                v31 = *v30 == (_QWORD)v10;
                v10 = v30;
              }
              while (!v31);
            }
            v10 = v30;
          }
          while (v30 != (uint64_t *)v39);
        }
        v6 = 0;
        goto LABEL_17;
      }
    }
    v6 = 1;
LABEL_17:
    sub_1C61CEBB4(v39[0]);
    return v6;
  }
  return 1;
}

uint64_t sub_1C4FCD4F0(_DWORD *a1, unsigned int *a2)
{
  a1[56] = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 42));
  if ((llvm::LLParser::parseToken((uint64_t)a1, 16, "expected ':'") & 1) != 0)
    return 1;
  else
    return llvm::LLParser::parseFlag((llvm::LLParser *)a1, a2);
}

uint64_t sub_1C4FCD54C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v2)
    MEMORY[0x1CAA32F9C](v2, 0x20C8093837F09);
  if (*(_UNKNOWN **)(a1 + 104) == &unk_1C866F1C0)
    sub_1C4773C74((uint64_t *)(a1 + 112));
  else
    llvm::detail::IEEEFloat::~IEEEFloat((llvm::detail::IEEEFloat *)(a1 + 104));
  if (*(_DWORD *)(a1 + 88) >= 0x41u)
  {
    v3 = *(_QWORD *)(a1 + 80);
    if (v3)
      MEMORY[0x1CAA32F9C](v3, 0x1000C8000313F17);
  }
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

uint64_t sub_1C4FCD600(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;
  unsigned int v8;
  void *v9;
  llvm::detail::DoubleAPFloat *v10;
  uint64_t v11;
  char v12;
  char v13;
  int v14;
  _BOOL4 v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = a1 + 32;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_1C47EBC30((_BYTE *)v4, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)v4 = v5;
  }
  v6 = (_BYTE *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_1C47EBC30(v6, *(void **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)v6 = v7;
  }
  v8 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 88) = v8;
  if (v8 > 0x40)
  {
    v9 = (void *)operator new[]();
    *(_QWORD *)(a1 + 80) = v9;
    memcpy(v9, *(const void **)(a2 + 80), (((unint64_t)*(unsigned int *)(a1 + 88) + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  }
  *(_BYTE *)(a1 + 92) = *(_BYTE *)(a2 + 92);
  v10 = (llvm::detail::DoubleAPFloat *)(a1 + 104);
  v11 = *(_QWORD *)(a2 + 104);
  if ((_UNKNOWN *)v11 == &unk_1C866F1C0)
  {
    llvm::detail::DoubleAPFloat::DoubleAPFloat(v10, (const llvm::detail::DoubleAPFloat *)(a2 + 104));
  }
  else
  {
    *(_QWORD *)v10 = v11;
    if ((*(_DWORD *)(v11 + 8) + 64) >= 0x80)
      *(_QWORD *)(a1 + 112) = operator new[]();
    v12 = *(_BYTE *)(a1 + 124) & 0xF7 | *(_BYTE *)(a2 + 124) & 8;
    *(_BYTE *)(a1 + 124) = v12;
    v13 = *(_BYTE *)(a2 + 124);
    v14 = v13 & 7;
    *(_BYTE *)(a1 + 124) = v12 & 0xF8 | v13 & 7;
    *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
    v16 = (v13 & 6) != 0 && v14 != 3;
    if (v14 == 1 || v16)
    {
      v17 = *(unsigned int *)(*(_QWORD *)(a1 + 104) + 8);
      v18 = (_QWORD *)(a1 + 112);
      if ((v17 - 64) <= 0xFFFFFF7F)
        v18 = (_QWORD *)*v18;
      v19 = (uint64_t *)(a2 + 112);
      if ((*(_DWORD *)(*(_QWORD *)(a2 + 104) + 8) - 64) < 0xFFFFFF80)
        v19 = *(uint64_t **)(a2 + 112);
      if (v17 <= 0xFFFFFFBF)
      {
        v20 = (unint64_t)(v17 + 64) >> 6;
        do
        {
          v21 = *v19++;
          *v18++ = v21;
          --v20;
        }
        while (v20);
      }
    }
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t sub_1C4FCD80C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::ValueSymbolTable *v17;
  uint64_t v18;

  v7 = (_QWORD *)(a1 - 32);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a3 + 28;
  *(_BYTE *)(a1 + 17) = 0;
  *(_WORD *)(a1 + 18) = 0;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a1 + 20) & 0xC0000000 | 1;
  *(_OWORD *)(a1 + 24) = 0u;
  v8 = a1 + 24;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 56) = 0;
  if (a5)
  {
    v13 = *(_QWORD *)(a5 + 40);
    v14 = (uint64_t *)(a5 + 24);
    *(_QWORD *)(a1 + 40) = v13;
    *(_WORD *)(v13 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(a1 + 23) & 0x10) != 0)
    {
      v16 = *(_QWORD *)(v13 + 56);
      if (v16)
      {
        v17 = *(llvm::ValueSymbolTable **)(v16 + 104);
        if (v17)
          llvm::ValueSymbolTable::reinsertValue(v17, (llvm::Value *)a1);
      }
    }
    v15 = *v14;
    *(_QWORD *)(a1 + 24) = *v14;
    *(_QWORD *)(a1 + 32) = v14;
    *(_QWORD *)(v15 + 8) = v8;
    *v14 = v8;
  }
  if (*v7)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v18 = *(_QWORD *)(a1 - 24);
    if (v18)
      *(_QWORD *)(v18 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v7 = a4;
  if (a4)
  {
    v11 = *(_QWORD *)(a4 + 8);
    v10 = (_QWORD *)(a4 + 8);
    v9 = v11;
    *(_QWORD *)(a1 - 24) = v11;
    if (v11)
      *(_QWORD *)(v9 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v10;
    *v10 = v7;
  }
  return a1;
}

_QWORD *sub_1C4FCD918(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *a2;
  while (1)
  {
    v5 = v3[4];
    if (v4 >= v5)
      break;
    v2 = v3;
LABEL_7:
    v3 = (_QWORD *)*v3;
    if (!v3)
      return v2;
  }
  if (v5 < v4)
  {
    ++v3;
    goto LABEL_7;
  }
  v7 = (_QWORD *)*v3;
  result = v3;
  if (*v3)
  {
    result = v3;
    do
    {
      v8 = v7[4];
      v9 = v8 >= v4;
      if (v8 >= v4)
        v10 = v7;
      else
        v10 = v7 + 1;
      if (v9)
        result = v7;
      v7 = (_QWORD *)*v10;
    }
    while (*v10);
  }
  v11 = (_QWORD *)v3[1];
  if (v11)
  {
    do
    {
      if (v4 >= v11[4])
        v12 = v11 + 1;
      else
        v12 = v11;
      v11 = (_QWORD *)*v12;
    }
    while (*v12);
  }
  return result;
}

uint64_t *sub_1C4FCD9B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v9;

  sub_1C4FCDA5C(a1, a2, (uint64_t)&v9);
  v3 = v9;
  v4 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    do
    {
      while (1)
      {
        v4 = (uint64_t **)v5;
        if (v9[4] >= (unint64_t)v5[4])
          break;
        v5 = (uint64_t *)*v5;
        v6 = v4;
        if (!*v4)
          goto LABEL_8;
      }
      v5 = (uint64_t *)v5[1];
    }
    while (v5);
    v6 = v4 + 1;
  }
  else
  {
    v6 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  *v9 = 0;
  v3[1] = 0;
  v3[2] = (uint64_t)v4;
  *v6 = v3;
  v7 = **(_QWORD **)a1;
  if (v7)
  {
    *(_QWORD *)a1 = v7;
    v3 = *v6;
  }
  sub_1C4768E74(*(uint64_t **)(a1 + 8), v3);
  ++*(_QWORD *)(a1 + 16);
  return v9;
}

char *sub_1C4FCDA5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *result;
  __int128 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  v5 = a1 + 8;
  result = (char *)operator new(0x80uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  *((_QWORD *)result + 4) = *(_QWORD *)a2;
  *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)result + 7) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v7 = *(_OWORD *)(a2 + 48);
  *((_OWORD *)result + 4) = *(_OWORD *)(a2 + 32);
  *((_OWORD *)result + 5) = v7;
  v8 = *(_QWORD *)(a2 + 72);
  v9 = (_QWORD *)(a2 + 80);
  v10 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)result + 12) = *(_QWORD *)(a2 + 64);
  *((_QWORD *)result + 13) = v8;
  *((_QWORD *)result + 14) = v10;
  v11 = result + 112;
  v12 = *(_QWORD *)(a2 + 88);
  *((_QWORD *)result + 15) = v12;
  if (v12)
  {
    *(_QWORD *)(v10 + 16) = v11;
    *(_QWORD *)(a2 + 72) = v9;
    *v9 = 0;
    *(_QWORD *)(a2 + 88) = 0;
  }
  else
  {
    *((_QWORD *)result + 13) = v11;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

char *sub_1C4FCDAFC(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1C47EBC30(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *(__int128 *)((char *)a2 + 24);
  v6 = *(__int128 *)((char *)a2 + 40);
  *((_QWORD *)__dst + 7) = *((_QWORD *)a2 + 7);
  *(_OWORD *)(__dst + 40) = v6;
  *(_OWORD *)(__dst + 24) = v5;
  sub_1C4FCDB6C((uint64_t)(__dst + 64), (_QWORD *)a2 + 8);
  return __dst;
}

uint64_t sub_1C4FCDB6C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      sub_1C61CE020((_QWORD **)a1, v3, v5 + 4, v5 + 4);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

_QWORD *sub_1C4FCDC00(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  unint64_t v20;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = a2[4], *a5 < v7))
  {
    v8 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (_QWORD *)*a2;
      do
      {
        v10 = v9;
        v9 = (_QWORD *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (_QWORD *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (v10[4] < *a5)
      goto LABEL_17;
    v16 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = v16;
          v17 = v16[4];
          if (v15 >= v17)
            break;
          v16 = (_QWORD *)*a4;
          v5 = a4;
          if (!*a4)
            goto LABEL_34;
        }
        if (v17 >= v15)
          break;
        v5 = a4 + 1;
        v16 = (_QWORD *)a4[1];
      }
      while (v16);
LABEL_25:
      *a3 = a4;
      return v5;
    }
    goto LABEL_42;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (_QWORD *)a2[1];
    do
    {
      a4 = v12;
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  else
  {
    v18 = a2;
    do
    {
      a4 = (_QWORD *)v18[2];
      v14 = *a4 == (_QWORD)v18;
      v18 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= a4[4])
  {
    v19 = (_QWORD *)*v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          a4 = v19;
          v20 = v19[4];
          if (v6 >= v20)
            break;
          v19 = (_QWORD *)*a4;
          v5 = a4;
          if (!*a4)
            goto LABEL_34;
        }
        if (v20 >= v6)
          break;
        v5 = a4 + 1;
        v19 = (_QWORD *)a4[1];
      }
      while (v19);
      goto LABEL_25;
    }
LABEL_42:
    *a3 = v5;
    return v5;
  }
  if (v11)
  {
LABEL_34:
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_DWORD *sub_1C4FCDD9C(_DWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  __int128 v5;

  *a1 = *(_DWORD *)a2;
  v4 = a1 + 2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1C47EBC30(v4, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v4 + 2) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)v4 = v5;
  }
  sub_1C4FCDDFC((uint64_t)(a1 + 8), (_QWORD *)(a2 + 32));
  return a1;
}

uint64_t sub_1C4FCDDFC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t **v4;
  unint64_t **v5;
  unint64_t *v6;
  unint64_t **v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = (unint64_t **)(a2 + 1);
  v5 = (unint64_t **)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      sub_1C61CE0D8((_QWORD **)a1, v3, v5 + 4, (uint64_t)(v5 + 4));
      v6 = v5[1];
      if (v6)
      {
        do
        {
          v7 = (unint64_t **)v6;
          v6 = (unint64_t *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (unint64_t **)v5[2];
          v8 = *v7 == (unint64_t *)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

_QWORD *sub_1C4FCDE90(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t **a5)
{
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;

  if (a1 + 1 == a2)
  {
LABEL_21:
    v18 = *a2;
    if ((_QWORD *)*a1 == a2)
    {
      v20 = a2;
LABEL_27:
      if (v18)
      {
        *a3 = v20;
        return v20 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v18)
    {
      v19 = (_QWORD *)*a2;
      do
      {
        v20 = v19;
        v19 = (_QWORD *)v19[1];
      }
      while (v19);
    }
    else
    {
      v23 = a2;
      do
      {
        v20 = (_QWORD *)v23[2];
        v13 = *v20 == (_QWORD)v23;
        v23 = v20;
      }
      while (v13);
    }
    v24 = a5[1];
    if (*a5 != v24)
    {
      v25 = (unint64_t *)v20[4];
      v26 = (uint64_t)(*a5 + 1);
      while (v25 != (unint64_t *)v20[5])
      {
        v27 = *v25;
        v28 = *(_QWORD *)(v26 - 8);
        if (*v25 < v28)
          break;
        ++v25;
        v29 = v28 < v27 || v26 == (_QWORD)v24;
        v26 += 8;
        if (v29)
          return sub_1C4FCE06C((uint64_t)a1, a3, a5);
      }
      goto LABEL_27;
    }
    return sub_1C4FCE06C((uint64_t)a1, a3, a5);
  }
  v5 = *a5;
  v6 = a5[1];
  v7 = (unint64_t *)a2[4];
  v8 = (unint64_t *)a2[5];
  if (v7 != v8)
  {
    v9 = v7 + 1;
    v10 = *a5;
    while (v10 != v6)
    {
      v11 = *v10;
      v12 = *(v9 - 1);
      if (*v10 < v12)
        break;
      ++v10;
      v13 = v12 < v11 || v9++ == v8;
      if (v13)
        goto LABEL_11;
    }
    goto LABEL_21;
  }
LABEL_11:
  if (v5 == v6)
  {
LABEL_20:
    *a3 = a2;
    *a4 = a2;
  }
  else
  {
    v14 = v5 + 1;
    while (v7 != v8)
    {
      v15 = *v7;
      v16 = *(v14 - 1);
      if (*v7 < v16)
        break;
      ++v7;
      if (v16 < v15 || v14++ == v6)
        goto LABEL_20;
    }
    v21 = a2[1];
    if (v21)
    {
      v22 = (_QWORD *)a2[1];
      do
      {
        a4 = v22;
        v22 = (_QWORD *)*v22;
      }
      while (v22);
    }
    else
    {
      v30 = a2;
      do
      {
        a4 = (_QWORD *)v30[2];
        v13 = *a4 == (_QWORD)v30;
        v30 = a4;
      }
      while (!v13);
    }
    if (a4 != a1 + 1)
    {
      v32 = a4[4];
      v31 = a4[5];
      if (v32 == v31)
        return sub_1C4FCE06C((uint64_t)a1, a3, a5);
      v33 = v32 + 8;
      while (v5 != v6)
      {
        v34 = *v5;
        v35 = *(_QWORD *)(v33 - 8);
        if (*v5 < v35)
          break;
        ++v5;
        v36 = v35 < v34 || v33 == v31;
        v33 += 8;
        if (v36)
          return sub_1C4FCE06C((uint64_t)a1, a3, a5);
      }
    }
    if (v21)
    {
      *a3 = a4;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
  }
  return a4;
}

_QWORD *sub_1C4FCE06C(uint64_t a1, _QWORD *a2, unint64_t **a3)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t *v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;

  v5 = *(_QWORD **)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = a3[1];
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (unint64_t *)v4[4];
        v9 = (unint64_t *)v7[5];
        if (v8 != v9)
          break;
LABEL_12:
        if (*a3 != v6)
        {
          v15 = (uint64_t)(*a3 + 1);
          while (v8 != v9)
          {
            v16 = *v8;
            v17 = *(_QWORD *)(v15 - 8);
            if (*v8 < v17)
              break;
            ++v8;
            v18 = v17 < v16 || v15 == (_QWORD)v6;
            v15 += 8;
            if (v18)
              goto LABEL_27;
          }
          result = v7 + 1;
          v4 = (_QWORD *)v7[1];
          if (v4)
            continue;
        }
        goto LABEL_27;
      }
      v10 = v8 + 1;
      v11 = *a3;
      while (v11 != v6)
      {
        v12 = *v11;
        v13 = *(v10 - 1);
        if (*v11 < v13)
          break;
        ++v11;
        if (v13 < v12 || v10++ == v9)
          goto LABEL_12;
      }
      v4 = (_QWORD *)*v7;
      result = v7;
    }
    while (*v7);
  }
  else
  {
    v7 = result;
  }
LABEL_27:
  *a2 = v7;
  return result;
}

uint64_t sub_1C4FCE12C(const void **a1, uint64_t a2)
{
  const void *v3;
  size_t v4;
  size_t v5;
  const void **v6;
  size_t v7;
  uint64_t result;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*((char *)a1 + 23) < 0)
  {
    v6 = a1;
    a1 = (const void **)*a1;
    v5 = (size_t)v6[1];
  }
  else
  {
    v5 = *((unsigned __int8 *)a1 + 23);
  }
  if (v4 >= v5)
    v7 = v5;
  else
    v7 = *(_QWORD *)(a2 + 8);
  LODWORD(result) = memcmp(a1, v3, v7);
  if (v5 < v4)
    v9 = -1;
  else
    v9 = v4 < v5;
  if ((_DWORD)result)
    return result;
  else
    return v9;
}

_QWORD *sub_1C4FCE18C(uint64_t a1)
{
  _QWORD *result;
  _QWORD *v3;
  _QWORD *v4;

  result = *(_QWORD **)(a1 + 16);
  if (result)
  {
    v3 = (_QWORD *)*result;
    if (*result == a1)
    {
      *result = 0;
      while (1)
      {
        v4 = (_QWORD *)result[1];
        if (!v4)
          break;
        do
        {
          result = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; v3 = (_QWORD *)result[1])
      {
        do
        {
          result = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t **sub_1C4FCE1E0(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x38uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *v7 = 0;
    v7[1] = 0;
    v7[5] = 0;
    v7[6] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t **sub_1C4FCE2AC(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

unsigned __int8 **sub_1C4FCE378(unsigned __int8 **result, unsigned __int8 *a2)
{
  unsigned __int8 **v3;

  v3 = result;
  if (*result)
    result = (unsigned __int8 **)llvm::MetadataTracking::untrack((uint64_t)result, *result);
  *v3 = a2;
  if (a2)
    return (unsigned __int8 **)llvm::MetadataTracking::track((uint64_t)v3, a2, 2);
  return result;
}

void sub_1C4FCE3CC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t *v7;

  v3 = *(_QWORD **)(a2 + 8);
  if (v3)
  {
    do
    {
      v4 = v3;
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  else
  {
    v5 = (_QWORD *)a2;
    do
    {
      v4 = (_QWORD *)v5[2];
      v6 = *v4 == (_QWORD)v5;
      v5 = v4;
    }
    while (!v6);
  }
  if (*a1 == a2)
    *a1 = v4;
  v7 = (uint64_t *)a1[1];
  --a1[2];
  sub_1C485B6E0(v7, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  operator delete((void *)a2);
}

uint64_t **sub_1C4FCE454(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    v10 = *a3;
    *v7 = 0;
    v7[1] = 0;
    v7[4] = v10;
    v7[5] = 0;
    v7[6] = 0;
    v7[7] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v11 = (uint64_t *)**a1;
    v12 = (uint64_t *)v7;
    if (v11)
    {
      *a1 = v11;
      v12 = *v6;
    }
    sub_1C4768E74(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

_QWORD *sub_1C4FCE520(_QWORD *result, char *__src, char *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  void **v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  void *v17;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      goto LABEL_23;
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 62)
LABEL_23:
      abort();
    result = operator new(4 * v11);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + 4 * v11;
    v12 = a3 - v6;
    if (v12)
      result = memcpy(result, v6, v12);
    v13 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  v13 = (void **)(result + 1);
  v14 = (_BYTE *)result[1];
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
  {
    v12 = a3 - __src;
    if (a3 == __src)
      goto LABEL_22;
    v17 = (void *)*result;
LABEL_21:
    result = memmove(v17, __src, v12);
    goto LABEL_22;
  }
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = memmove((void *)*result, __src, v14 - v9);
    v9 = (char *)*v13;
  }
  v12 = a3 - v16;
  if (v12)
  {
    v17 = v9;
    __src = v16;
    goto LABEL_21;
  }
LABEL_22:
  *v13 = &v9[v12];
  return result;
}

uint64_t *sub_1C4FCE65C(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v12;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 8);
LABEL_9:
    sub_1C61CE690((uint64_t)&v12, a1, a3, a4);
    v9 = v12;
    *v12 = 0;
    v9[1] = 0;
    v9[2] = (uint64_t)v7;
    *v6 = v9;
    v10 = **(_QWORD **)a1;
    if (v10)
    {
      *(_QWORD *)a1 = v10;
      v9 = *v6;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v9);
    ++*(_QWORD *)(a1 + 16);
    return v12;
  }
  return (uint64_t *)v7;
}

uint64_t sub_1C4FCE718(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v4 = a2 + 16;
    v3 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v11 = a2;
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v3 = *(const void **)v11;
      }
      *(_QWORD *)a1 = v3;
      v13 = v11;
      v14 = *(_QWORD *)(v11 + 8);
      v6 = (_DWORD *)(v11 + 8);
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
      goto LABEL_10;
    }
    v6 = (_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *(const void **)a2, 8 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v16 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 8);
      a2 = v16;
    }
    else if ((_DWORD)v7)
    {
      v15 = *(unsigned int *)(a1 + 8);
      v17 = a2;
      memmove(*(void **)a1, v3, 8 * v7);
      v8 = v15;
      a2 = v17;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (const void *)(*(_QWORD *)a2 + 8 * v8), *(_QWORD *)a2 + 8 * v9 - (*(_QWORD *)a2 + 8 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

_BYTE *sub_1C4FCE84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;

  v5 = a2 + 8;
  v6 = operator new(0x48uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  result = v6 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    result = sub_1C47EBC30(result, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a3;
    v6[6] = *(_QWORD *)(a3 + 16);
  }
  v6[7] = 0;
  v6[8] = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

_BYTE *sub_1C4FCE8BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;

  v5 = a2 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v5;
  result = v6 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    result = sub_1C47EBC30(result, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  return result;
}

void sub_1C4FCE92C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  __int128 *v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  __int128 *v9;
  void *v10;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = (__int128 *)*a1;
    v4 = *a1 + 48 * v2;
    do
    {
      v5 = *v3;
      *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
      *(_OWORD *)a2 = v5;
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_OWORD *)(a2 + 24) = *(__int128 *)((char *)v3 + 24);
      *(_QWORD *)(a2 + 40) = *((_QWORD *)v3 + 5);
      *((_QWORD *)v3 + 3) = 0;
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      v3 += 3;
      a2 += 48;
    }
    while (v3 != (__int128 *)v4);
    v6 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v6)
    {
      v7 = (__int128 *)*a1;
      v8 = 3 * v6;
      do
      {
        v9 = &v7[v8];
        v10 = (void *)*((_QWORD *)&v7[v8 - 1] - 1);
        if (v10)
        {
          *((_QWORD *)v9 - 2) = v10;
          operator delete(v10);
        }
        if (*((char *)v9 - 25) < 0)
          operator delete(*((void **)v9 - 6));
        v8 -= 3;
      }
      while (v8 * 16);
    }
  }
}

char **sub_1C4FCE9E8(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 48 * v3;
    do
    {
      if (v2[v4 - 1] < 0)
        operator delete(*(void **)&v2[v4 - 24]);
      v4 -= 48;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void sub_1C4FCEA58(char *a1)
{
  if (a1)
  {
    sub_1C4FCEA58(*(_QWORD *)a1);
    sub_1C4FCEA58(*((_QWORD *)a1 + 1));
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

void sub_1C4FCEAA0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a2 != a4)
  {
    v6 = (uint64_t *)a4[1];
    if (v6 != a2)
    {
      llvm::SymbolTableListTraits<llvm::BasicBlock>::transferNodesFromList(a1, a3, (uint64_t)a4, a4[1]);
      if (v6 != a4)
      {
        v7 = *v6;
        v8 = *a4;
        *(_QWORD *)(v8 + 8) = v6;
        *v6 = v8;
        v9 = *a2;
        *(_QWORD *)(v7 + 8) = a2;
        *a4 = v9;
        *(_QWORD *)(v9 + 8) = a4;
        *a2 = v7;
      }
    }
  }
}

uint64_t sub_1C4FCEB18(uint64_t **a1, const void **a2)
{
  uint64_t **v2;
  int v3;
  size_t v4;
  const void *v5;
  uint64_t v6;
  size_t v7;
  uint64_t *v8;
  size_t v9;
  size_t v10;
  size_t v11;
  int v12;
  BOOL v13;
  size_t v14;
  int v15;
  _BOOL4 v16;

  if (a1)
  {
    v2 = a1;
    v3 = *((char *)a2 + 23);
    if (v3 >= 0)
      v4 = *((unsigned __int8 *)a2 + 23);
    else
      v4 = (size_t)a2[1];
    if (v3 >= 0)
      v5 = a2;
    else
      v5 = *a2;
    v6 = 1;
    do
    {
      v7 = *((unsigned __int8 *)v2 + 55);
      if ((v7 & 0x80u) == 0)
        v8 = (uint64_t *)(v2 + 4);
      else
        v8 = v2[4];
      v9 = (size_t)v2[5];
      if ((v7 & 0x80u) == 0)
        v10 = v7 & 0x7F;
      else
        v10 = (size_t)v2[5];
      if (v10 >= v4)
        v11 = v4;
      else
        v11 = v10;
      v12 = memcmp(v5, v8, v11);
      v13 = v4 < v10;
      if (v12)
        v13 = v12 < 0;
      if (!v13)
      {
        if ((v7 & 0x80u) != 0)
          v7 = v9;
        if (v4 >= v7)
          v14 = v7;
        else
          v14 = v4;
        v15 = memcmp(v8, v5, v14);
        v16 = v7 < v4;
        if (v15)
          v16 = v15 < 0;
        if (!v16)
          return v6;
        ++v2;
      }
      v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  return 0;
}

_QWORD *sub_1C4FCEC0C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!sub_1C4FCEC9C(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_1C4FCEC9C(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

BOOL sub_1C4FCEC9C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;
  const void *v9;
  size_t v10;
  uint64_t v11;
  size_t v12;
  int v13;

  if (*(_DWORD *)a1 <= 1u)
    return *(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 16);
  v3 = a2 + 32;
  v4 = *(_BYTE *)(a2 + 55);
  if (v4 >= 0)
    v5 = (const void *)(a2 + 32);
  else
    v5 = *(const void **)(a2 + 32);
  v6 = *(_QWORD *)(v3 + 8);
  if (v4 >= 0)
    v7 = v4 & 0x7F;
  else
    v7 = v6;
  v8 = *(char *)(a1 + 55);
  if (v8 < 0)
  {
    v11 = a1 + 32;
    v9 = *(const void **)(a1 + 32);
    v10 = *(_QWORD *)(v11 + 8);
  }
  else
  {
    v9 = (const void *)(a1 + 32);
    v10 = v8;
  }
  if (v7 >= v10)
    v12 = v10;
  else
    v12 = v7;
  v13 = memcmp(v9, v5, v12);
  if (v13)
    return v13 < 0;
  else
    return v10 < v7;
}

uint64_t sub_1C4FCED30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  if (*(_BYTE *)(a4 + 8))
  {
    v10 = 1283;
    v9[0] = "field '";
    v9[2] = a2;
    v9[3] = a3;
    v11[0] = v9;
    v11[2] = "' cannot be specified more than once";
    v12 = 770;
    return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v11);
  }
  else
  {
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    return sub_1C4FCF034(a1, a2, a3, a4);
  }
}

uint64_t sub_1C4FCEDE4(uint64_t a1, uint64_t a2)
{
  _QWORD v5[4];
  __int16 v6;
  _QWORD v7[4];
  __int16 v8;

  if (*(_BYTE *)(a2 + 8))
  {
    v6 = 1283;
    v5[0] = "field '";
    v5[2] = "column";
    v5[3] = 6;
    v7[0] = v5;
    v7[2] = "' cannot be specified more than once";
    v8 = 770;
    return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v7);
  }
  else
  {
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    return sub_1C4FCF034(a1, (uint64_t)"column", 6, a2);
  }
}

uint64_t sub_1C4FCEE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  if (*(_BYTE *)(a4 + 8))
  {
    v10 = 1283;
    v9[0] = "field '";
    v9[2] = a2;
    v9[3] = a3;
    v11[0] = v9;
    v11[2] = "' cannot be specified more than once";
    v12 = 770;
    return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v11);
  }
  else
  {
    *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    return sub_1C4FCF170(a1, a2, a3, a4);
  }
}

uint64_t sub_1C4FCEF48(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  int v6;
  char v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;

  if (a4[1])
  {
    v13 = 1283;
    v12[0] = "field '";
    v12[2] = a2;
    v12[3] = a3;
    v14[0] = v12;
    v14[2] = "' cannot be specified more than once";
    v15 = 770;
    v10 = a1 + 168;
    v11 = *(char **)(a1 + 216);
    return llvm::LLLexer::Error(v10, v11, (llvm::Twine *)v14);
  }
  v6 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *(_DWORD *)(a1 + 224) = v6;
  v7 = 1;
  if (v6 != 19)
  {
    if (v6 == 20)
    {
      v7 = 0;
      goto LABEL_5;
    }
    v14[0] = "expected 'true' or 'false'";
    v15 = 259;
    v11 = *(char **)(a1 + 216);
    v10 = a1 + 168;
    return llvm::LLLexer::Error(v10, v11, (llvm::Twine *)v14);
  }
LABEL_5:
  a4[1] = 1;
  *a4 = v7;
  v8 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  result = 0;
  *(_DWORD *)(a1 + 224) = v8;
  return result;
}

uint64_t sub_1C4FCF034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::LLLexer *v5;
  _QWORD **v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  _QWORD *v13;
  int v14;
  uint64_t result;
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;

  v5 = (llvm::LLLexer *)(a1 + 168);
  if (*(_DWORD *)(a1 + 224) != 457 || !*(_BYTE *)(a1 + 316))
  {
    v21[0] = "expected unsigned integer";
    v16 = 259;
LABEL_12:
    v22 = v16;
    return llvm::LLLexer::Error((uint64_t)v5, *(char **)(a1 + 216), (llvm::Twine *)v21);
  }
  v9 = (_QWORD **)(a1 + 304);
  v10 = a4 + 16;
  v11 = *(_QWORD *)(a4 + 16);
  v12 = *(_DWORD *)(a1 + 312);
  if (v12 >= 0x41)
  {
    if (v12 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(a1 + 304)) > 0x40)
    {
LABEL_11:
      v18 = 1283;
      v17[0] = "value for '";
      v17[2] = a2;
      v17[3] = a3;
      v19[0] = v17;
      v19[2] = "' too large, limit is ";
      v20 = 770;
      v21[0] = v19;
      v21[2] = v10;
      v16 = 3074;
      goto LABEL_12;
    }
    v13 = (_QWORD *)**v9;
  }
  else
  {
    v13 = *v9;
  }
  if ((unint64_t)v13 > v11)
    goto LABEL_11;
  *(_BYTE *)(a4 + 8) = 1;
  *(_QWORD *)a4 = v13;
  v14 = llvm::LLLexer::LexToken(v5);
  result = 0;
  *(_DWORD *)(a1 + 224) = v14;
  return result;
}

uint64_t sub_1C4FCF170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::LLLexer *v6;
  int v7;
  uint64_t result;
  llvm::Metadata *v9;
  _QWORD v10[4];
  __int16 v11;
  llvm::Metadata *v12[4];
  __int16 v13;

  if (*(_DWORD *)(a1 + 224) == 53)
  {
    v6 = (llvm::LLLexer *)(a1 + 168);
    if (*(_BYTE *)(a4 + 9))
    {
      v7 = llvm::LLLexer::LexToken(v6);
      result = 0;
      *(_DWORD *)(a1 + 224) = v7;
      *(_BYTE *)(a4 + 8) = 1;
      *(_QWORD *)a4 = 0;
    }
    else
    {
      v11 = 1283;
      v10[0] = "'";
      v10[2] = a2;
      v10[3] = a3;
      v12[0] = (llvm::Metadata *)v10;
      v12[2] = (llvm::Metadata *)"' cannot be null";
      v13 = 770;
      return llvm::LLLexer::Error((uint64_t)v6, *(char **)(a1 + 216), (llvm::Twine *)v12);
    }
  }
  else
  {
    v12[0] = 0;
    result = llvm::LLParser::parseMetadata((llvm::LLParser *)a1, v12, 0);
    if ((result & 1) == 0)
    {
      v9 = v12[0];
      *(_BYTE *)(a4 + 8) = 1;
      *(_QWORD *)a4 = v9;
    }
  }
  return result;
}

uint64_t sub_1C4FCF23C(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  char v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int Tag;
  int v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[2];
  const char *v19;
  uint64_t v20;
  __int16 v21;
  const char *v22;
  const char *v23;
  __int16 v24;

  if (*(_BYTE *)(a2 + 8))
  {
    v21 = 1283;
    v18[0] = "field '";
    v19 = "tag";
    v20 = 3;
    v22 = (const char *)v18;
    v23 = "' cannot be specified more than once";
    v24 = 770;
    v13 = a1 + 168;
    v14 = *(char **)(a1 + 216);
  }
  else
  {
    v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    *(_DWORD *)(a1 + 224) = v4;
    if (v4 == 443)
    {
      v6 = *(_BYTE *)(a1 + 255);
      v7 = v6;
      if (v6 >= 0)
        v8 = (char *)(a1 + 232);
      else
        v8 = *(char **)(a1 + 232);
      v9 = v6 & 0x7F;
      if (v7 >= 0)
        v10 = v9;
      else
        v10 = *(_QWORD *)(a1 + 240);
      Tag = llvm::dwarf::getTag(v8, v10);
      if (Tag != -1)
      {
        *(_BYTE *)(a2 + 8) = 1;
        *(_QWORD *)a2 = Tag;
        v12 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
        result = 0;
        *(_DWORD *)(a1 + 224) = v12;
        return result;
      }
      v16[0] = "invalid DWARF tag";
      v16[2] = " '";
      v17 = 771;
      v18[0] = v16;
      v19 = (const char *)(a1 + 232);
      v21 = 1026;
      v22 = (const char *)v18;
      v23 = "'";
      v15 = 770;
    }
    else
    {
      if (v4 == 457)
        return sub_1C4FCF034(a1, (uint64_t)"tag", 3, a2);
      v22 = "expected DWARF tag";
      v15 = 259;
    }
    v24 = v15;
    v14 = *(char **)(a1 + 216);
    v13 = a1 + 168;
  }
  return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
}

uint64_t sub_1C4FCF3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  std::string::size_type size;
  size_t v11;
  std::string::size_type v12;
  size_t v13;
  std::string *v14;
  _QWORD *v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  _QWORD v21[2];
  const char *v22;
  __int16 v23;
  std::string v24;

  if (*(_BYTE *)(a4 + 8))
  {
    v20 = 1283;
    v17[0] = "field '";
    v18 = a2;
    v19 = a3;
    v21[0] = v17;
    v22 = "' cannot be specified more than once";
    v23 = 770;
    return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v21);
  }
  *(_DWORD *)(a1 + 224) = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  v8 = *(char **)(a1 + 216);
  memset(&v24, 0, sizeof(v24));
  if ((llvm::LLParser::parseStringConstant(a1, &v24) & 1) != 0)
  {
    v9 = 1;
    goto LABEL_21;
  }
  if (*(_BYTE *)(a4 + 9))
  {
    size = v24.__r_.__value_.__l.__size_;
    v11 = *((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x7F;
LABEL_11:
    if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v13 = v11;
    else
      v13 = size;
    if (v13)
    {
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v24;
      else
        v14 = (std::string *)v24.__r_.__value_.__r.__words[0];
      v15 = llvm::MDString::get(*(uint64_t **)a1, (unsigned __int8 *)v14, v13);
    }
    else
    {
      v15 = 0;
    }
    v9 = 0;
    *(_BYTE *)(a4 + 8) = 1;
    *(_QWORD *)a4 = v15;
    goto LABEL_21;
  }
  size = v24.__r_.__value_.__l.__size_;
  v11 = *((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x7F;
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v12 = *((_BYTE *)&v24.__r_.__value_.__s + 23) & 0x7F;
  else
    v12 = v24.__r_.__value_.__l.__size_;
  if (v12)
    goto LABEL_11;
  v20 = 1283;
  v17[0] = "'";
  v18 = a2;
  v19 = a3;
  v21[0] = v17;
  v22 = "' cannot be empty";
  v23 = 770;
  v9 = llvm::LLLexer::Error(a1 + 168, v8, (llvm::Twine *)v21);
LABEL_21:
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v9;
}

uint64_t sub_1C4FCF570(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  int v8;
  __int128 v9;
  uint64_t result;
  __int128 v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  __int128 v17;
  __int128 v18;
  __int16 v19;

  if (*((_BYTE *)a4 + 48))
  {
    v16 = 1283;
    v15[0] = "field '";
    v15[2] = a2;
    v15[3] = a3;
    *(_QWORD *)&v17 = v15;
    *(_QWORD *)&v18 = "' cannot be specified more than once";
    v19 = 770;
    return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)&v17);
  }
  v8 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  *(_DWORD *)(a1 + 224) = v8;
  if (v8 == 457)
  {
    v9 = a4[1];
    v17 = *a4;
    v18 = v9;
    result = sub_1C4FCF67C(a1, a2, a3, (uint64_t)&v17);
    if ((result & 1) != 0)
      return result;
    v11 = v18;
    *a4 = v17;
    a4[1] = v11;
    v12 = 1;
    *((_BYTE *)a4 + 48) = 1;
  }
  else
  {
    v17 = a4[2];
    result = sub_1C4FCF170(a1, a2, a3, (uint64_t)&v17);
    if ((result & 1) != 0)
      return result;
    v14 = WORD4(v17);
    v13 = v17;
    *((_BYTE *)a4 + 48) = 1;
    *((_QWORD *)a4 + 4) = v13;
    *((_WORD *)a4 + 20) = v14;
    v12 = 2;
  }
  *((_DWORD *)a4 + 13) = v12;
  return result;
}

uint64_t sub_1C4FCF67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::LLLexer *v5;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  __int16 v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;

  v5 = (llvm::LLLexer *)(a1 + 168);
  if (*(_DWORD *)(a1 + 224) != 457)
  {
    v23[0] = "expected signed integer";
    v15 = 259;
LABEL_17:
    v24 = v15;
    return llvm::LLLexer::Error((uint64_t)v5, *(char **)(a1 + 216), (llvm::Twine *)v23);
  }
  v9 = (uint64_t *)(a1 + 304);
  v10 = a4 + 16;
  if (sub_1C4FCF7FC(a1 + 304, *(_QWORD *)(a4 + 16)))
  {
    v20 = 1283;
    v17 = "value for '";
    v18 = a2;
    v19 = a3;
    v16 = "' too small, limit is ";
LABEL_16:
    v21[0] = &v17;
    v21[2] = v16;
    v22 = 770;
    v23[0] = v21;
    v23[2] = v10;
    v15 = 3330;
    goto LABEL_17;
  }
  v10 = a4 + 24;
  if (sub_1C4FCF868(a1 + 304, *(_QWORD *)(a4 + 24)))
  {
    v20 = 1283;
    v17 = "value for '";
    v18 = a2;
    v19 = a3;
    v16 = "' too large, limit is ";
    goto LABEL_16;
  }
  v11 = *(_DWORD *)(a1 + 312);
  if (*(_BYTE *)(a1 + 316))
  {
    if (v11 >= 0x41)
      v9 = (uint64_t *)*v9;
    v12 = *v9;
  }
  else if (v11 > 0x40)
  {
    v12 = *(_QWORD *)*v9;
  }
  else
  {
    v12 = *v9 << -(char)v11 >> -(char)v11;
  }
  *(_BYTE *)(a4 + 8) = 1;
  *(_QWORD *)a4 = v12;
  v13 = llvm::LLLexer::LexToken(v5);
  result = 0;
  *(_DWORD *)(a1 + 224) = v13;
  return result;
}

uint64_t sub_1C4FCF7FC(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  char v7;

  v6 = 64;
  v5 = a2;
  v7 = 0;
  v2 = sub_1C4FCF8D8(a1, (uint64_t)&v5);
  if (v6 >= 0x41 && v5)
  {
    v4 = v2;
    MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
    v2 = v4;
  }
  return v2 >> 31;
}

BOOL sub_1C4FCF868(uint64_t a1, uint64_t a2)
{
  int v2;
  int v4;
  uint64_t v5;
  unsigned int v6;
  char v7;

  v6 = 64;
  v5 = a2;
  v7 = 0;
  v2 = sub_1C4FCF8D8(a1, (uint64_t)&v5);
  if (v6 >= 0x41 && v5)
  {
    v4 = v2;
    MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
    v2 = v4;
  }
  return v2 > 0;
}

uint64_t sub_1C4FCF8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t *v11;
  uint64_t *v12;
  char v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unsigned int v29;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_DWORD *)(a2 + 8);
  if ((_DWORD)v4 == v5 && (*(_BYTE *)(a1 + 12) == 0) == (*(_BYTE *)(a2 + 12) == 0))
  {
    if (!*(_BYTE *)(a1 + 12))
    {
      if (v4 <= 0x40)
      {
        v6 = (uint64_t)(*(_QWORD *)a1 << -(char)v4) >> -(char)v4;
        v7 = (uint64_t)(*(_QWORD *)a2 << -(char)v4) >> -(char)v4;
        v18 = v6 < v7;
        v8 = v6 > v7;
        if (v18)
          return 0xFFFFFFFFLL;
        else
          return v8;
      }
      v19 = (v4 - 1) >> 6;
      v20 = 1 << (v4 - 1);
      if (((*(_QWORD *)(*(_QWORD *)a1 + 8 * v19) & v20) != 0) != ((*(_QWORD *)(*(_QWORD *)a2 + 8 * v19) & v20) != 0))
      {
        if ((*(_QWORD *)(*(_QWORD *)a1 + 8 * v19) & v20) != 0)
          return 0xFFFFFFFFLL;
        else
          return 1;
      }
      v21 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
      while (v21)
      {
        v22 = *(_QWORD *)(*(_QWORD *)a1 - 8 + v21);
        v23 = *(_QWORD *)(*(_QWORD *)a2 - 8 + v21);
        v21 -= 8;
        v18 = v22 > v23;
        if (v22 != v23)
          goto LABEL_38;
      }
      return 0;
    }
    if (v4 > 0x40)
    {
      v15 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
      while (v15)
      {
        v16 = *(_QWORD *)(*(_QWORD *)a1 - 8 + v15);
        v17 = *(_QWORD *)(*(_QWORD *)a2 - 8 + v15);
        v15 -= 8;
        v18 = v16 > v17;
        if (v16 != v17)
          goto LABEL_38;
      }
      return 0;
    }
    goto LABEL_23;
  }
  if (v4 > v5)
  {
    sub_1C4FCFB60((llvm::APInt *)a2, v4, (uint64_t)&v28);
    v12 = &v28;
    v11 = (uint64_t *)a1;
  }
  else
  {
    if (v5 <= v4)
    {
      if (*(_BYTE *)(a1 + 12))
      {
        if (!*(_BYTE *)(a2 + 12))
        {
          v13 = v5 - 1;
          v14 = (_QWORD *)(v5 >= 0x41 ? *(_QWORD *)a2 + 8 * ((v5 - 1) >> 6) : a2);
          if (((*v14 >> v13) & 1) != 0)
            return 1;
        }
      }
      else
      {
        v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * ((v4 - 1) >> 6));
        if (v4 < 0x41)
          v27 = (_QWORD *)a1;
        if (((*v27 >> (v4 - 1)) & 1) != 0)
          return 0xFFFFFFFFLL;
      }
      if (v4 > 0x40)
      {
        v24 = ((unint64_t)(v4 + 63) >> 3) & 0x3FFFFFF8;
        while (v24)
        {
          v25 = *(_QWORD *)(*(_QWORD *)a1 - 8 + v24);
          v26 = *(_QWORD *)(*(_QWORD *)a2 - 8 + v24);
          v24 -= 8;
          v18 = v25 > v26;
          if (v25 != v26)
          {
LABEL_38:
            if (v18)
              return 1;
            else
              return 0xFFFFFFFFLL;
          }
        }
        return 0;
      }
LABEL_23:
      if (*(_QWORD *)a1 < *(_QWORD *)a2)
        return 0xFFFFFFFFLL;
      else
        return *(_QWORD *)a1 > *(_QWORD *)a2;
    }
    sub_1C4FCFB60((llvm::APInt *)a1, *(_DWORD *)(a2 + 8), (uint64_t)&v28);
    v11 = &v28;
    v12 = (uint64_t *)a2;
  }
  v9 = sub_1C4FCF8D8(v11, v12);
  if (v29 >= 0x41 && v28)
    MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  return v9;
}

void sub_1C4FCFB60(llvm::APInt *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  _BYTE *v5;
  char v6;
  uint64_t v7;
  _BYTE v8[16];
  _BYTE v9[16];

  if (*((_BYTE *)this + 12))
  {
    v5 = v9;
    llvm::APInt::zext(this, a2, (uint64_t)v9);
  }
  else
  {
    v5 = v8;
    llvm::APInt::sext(this, a2, (llvm::APInt *)v8);
  }
  v6 = *((_BYTE *)this + 12);
  v7 = *(_QWORD *)v5;
  *(_DWORD *)(a3 + 8) = *((_DWORD *)v5 + 2);
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 12) = v6;
}

uint64_t sub_1C4FCFBD4(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int AttributeEncoding;
  int v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[2];
  const char *v19;
  uint64_t v20;
  __int16 v21;
  const char *v22;
  const char *v23;
  __int16 v24;

  if (*(_BYTE *)(a2 + 8))
  {
    v21 = 1283;
    v18[0] = "field '";
    v19 = "encoding";
    v20 = 8;
    v22 = (const char *)v18;
    v23 = "' cannot be specified more than once";
    v24 = 770;
    v13 = a1 + 168;
    v14 = *(char **)(a1 + 216);
  }
  else
  {
    v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    *(_DWORD *)(a1 + 224) = v4;
    if (v4 == 444)
    {
      v6 = *(_BYTE *)(a1 + 255);
      v7 = v6;
      if (v6 >= 0)
        v8 = a1 + 232;
      else
        v8 = *(_QWORD *)(a1 + 232);
      v9 = v6 & 0x7F;
      if (v7 >= 0)
        v10 = v9;
      else
        v10 = *(_QWORD *)(a1 + 240);
      AttributeEncoding = llvm::dwarf::getAttributeEncoding(v8, v10);
      if (AttributeEncoding)
      {
        *(_BYTE *)(a2 + 8) = 1;
        *(_QWORD *)a2 = AttributeEncoding;
        v12 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
        result = 0;
        *(_DWORD *)(a1 + 224) = v12;
        return result;
      }
      v16[0] = "invalid DWARF type attribute encoding";
      v16[2] = " '";
      v17 = 771;
      v18[0] = v16;
      v19 = (const char *)(a1 + 232);
      v21 = 1026;
      v22 = (const char *)v18;
      v23 = "'";
      v15 = 770;
    }
    else
    {
      if (v4 == 457)
        return sub_1C4FCF034(a1, (uint64_t)"encoding", 8, a2);
      v22 = "expected DWARF type attribute encoding";
      v15 = 259;
    }
    v24 = v15;
    v14 = *(char **)(a1 + 216);
    v13 = a1 + 168;
  }
  return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
}

uint64_t sub_1C4FCFD6C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  unsigned int v6;
  int v7;
  char v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int Flag;
  uint64_t result;
  _QWORD v15[2];
  const char *v16;
  uint64_t v17;
  __int16 v18;
  unsigned int v19[4];
  const char *v20;
  __int16 v21;

  if (*(_BYTE *)(a2 + 4))
  {
    v18 = 1283;
    v15[0] = "field '";
    v16 = "flags";
    v17 = 5;
    *(_QWORD *)v19 = v15;
    v20 = "' cannot be specified more than once";
    v21 = 770;
    return llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v19);
  }
  v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  v5 = 0;
  while (1)
  {
    *(_DWORD *)(a1 + 224) = v4;
    if (v4 != 451)
    {
      if (v4 != 457 || !*(_BYTE *)(a1 + 316))
      {
        *(_QWORD *)v19 = "expected debug info flag";
        v21 = 259;
        goto LABEL_21;
      }
      v19[0] = 0;
      if ((llvm::LLParser::parseUInt32((llvm::LLParser *)a1, v19) & 1) != 0)
        return 1;
      v6 = v19[0];
LABEL_8:
      v7 = *(_DWORD *)(a1 + 224);
      goto LABEL_17;
    }
    v8 = *(_BYTE *)(a1 + 255);
    v9 = v8 < 0;
    v10 = v8 >= 0 ? a1 + 232 : *(_QWORD *)(a1 + 232);
    v11 = v8 & 0x7F;
    v12 = v9 ? *(_QWORD *)(a1 + 240) : v11;
    Flag = llvm::DINode::getFlag(v10, v12);
    if (!Flag)
      break;
    v6 = Flag;
    v7 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    *(_DWORD *)(a1 + 224) = v7;
LABEL_17:
    v5 |= v6;
    if (v7 != 15)
    {
      result = 0;
      *(_BYTE *)(a2 + 4) = 1;
      *(_DWORD *)a2 = v5;
      return result;
    }
    v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
  }
  v15[0] = "invalid debug info flag '";
  v16 = (const char *)(a1 + 232);
  v18 = 1027;
  *(_QWORD *)v19 = v15;
  v20 = "'";
  v21 = 770;
LABEL_21:
  if ((llvm::LLLexer::Error(a1 + 168, *(char **)(a1 + 216), (llvm::Twine *)v19) & 1) == 0)
  {
    v6 = 0;
    goto LABEL_8;
  }
  return 1;
}

uint64_t sub_1C4FCFF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  uint64_t result;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int Language;
  int v16;
  uint64_t v17;
  char *v18;
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  const char *v26;
  const char *v27;
  __int16 v28;

  if (*(_BYTE *)(a4 + 8))
  {
    v25 = 1283;
    v22[0] = "field '";
    v23 = a2;
    v24 = a3;
    v26 = (const char *)v22;
    v27 = "' cannot be specified more than once";
    v28 = 770;
    v17 = a1 + 168;
    v18 = *(char **)(a1 + 216);
  }
  else
  {
    v8 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    *(_DWORD *)(a1 + 224) = v8;
    if (v8 == 446)
    {
      v10 = *(_BYTE *)(a1 + 255);
      v11 = v10;
      if (v10 >= 0)
        v12 = a1 + 232;
      else
        v12 = *(_QWORD *)(a1 + 232);
      v13 = v10 & 0x7F;
      if (v11 >= 0)
        v14 = v13;
      else
        v14 = *(_QWORD *)(a1 + 240);
      Language = llvm::dwarf::getLanguage(v12, v14);
      if (Language)
      {
        *(_BYTE *)(a4 + 8) = 1;
        *(_QWORD *)a4 = Language;
        v16 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
        result = 0;
        *(_DWORD *)(a1 + 224) = v16;
        return result;
      }
      v20[0] = "invalid DWARF language";
      v20[2] = " '";
      v21 = 771;
      v22[0] = v20;
      v23 = a1 + 232;
      v25 = 1026;
      v26 = (const char *)v22;
      v27 = "'";
      v19 = 770;
    }
    else
    {
      if (v8 == 457)
        return sub_1C4FCF034(a1, a2, a3, a4);
      v26 = "expected DWARF language";
      v19 = 259;
    }
    v28 = v19;
    v18 = *(char **)(a1 + 216);
    v17 = a1 + 168;
  }
  return llvm::LLLexer::Error(v17, v18, (llvm::Twine *)&v26);
}

uint64_t sub_1C4FD00C8(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  char v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int Macinfo;
  int v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[2];
  const char *v19;
  uint64_t v20;
  __int16 v21;
  const char *v22;
  const char *v23;
  __int16 v24;

  if (*(_BYTE *)(a2 + 8))
  {
    v21 = 1283;
    v18[0] = "field '";
    v19 = "type";
    v20 = 4;
    v22 = (const char *)v18;
    v23 = "' cannot be specified more than once";
    v24 = 770;
    v13 = a1 + 168;
    v14 = *(char **)(a1 + 216);
  }
  else
  {
    v4 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
    *(_DWORD *)(a1 + 224) = v4;
    if (v4 == 453)
    {
      v6 = *(_BYTE *)(a1 + 255);
      v7 = v6;
      if (v6 >= 0)
        v8 = a1 + 232;
      else
        v8 = *(_QWORD *)(a1 + 232);
      v9 = v6 & 0x7F;
      if (v7 >= 0)
        v10 = v9;
      else
        v10 = *(_QWORD *)(a1 + 240);
      Macinfo = llvm::dwarf::getMacinfo(v8, v10);
      if (Macinfo != -1)
      {
        *(_BYTE *)(a2 + 8) = 1;
        *(_QWORD *)a2 = Macinfo;
        v12 = llvm::LLLexer::LexToken((llvm::LLLexer *)(a1 + 168));
        result = 0;
        *(_DWORD *)(a1 + 224) = v12;
        return result;
      }
      v16[0] = "invalid DWARF macinfo type";
      v16[2] = " '";
      v17 = 771;
      v18[0] = v16;
      v19 = (const char *)(a1 + 232);
      v21 = 1026;
      v22 = (const char *)v18;
      v23 = "'";
      v15 = 770;
    }
    else
    {
      if (v4 == 457)
        return sub_1C4FCF034(a1, (uint64_t)"type", 4, a2);
      v22 = "expected DWARF macinfo type";
      v15 = 259;
    }
    v24 = v15;
    v14 = *(char **)(a1 + 216);
    v13 = a1 + 168;
  }
  return llvm::LLLexer::Error(v13, v14, (llvm::Twine *)&v22);
}

uint64_t sub_1C4FD0264(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_6;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_6;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_6:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C4FD0314(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 16;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C4FD0488(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 16;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 16 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 16 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C4FD0488(a1, v8);
      v20 = 0;
      sub_1C4FD0264(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C4FD0488(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[33];

  v14[32] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C4FD060C((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C4FD060C((int *)a1, v14, v9);
}

int *sub_1C4FD060C(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 66;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v9 = 16;
        v8 = result + 2;
      }
      else
      {
        v8 = (int *)*((_QWORD *)result + 1);
        v9 = result[4];
      }
      v10 = v9 - 1;
      v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = (uint64_t *)&v8[4 * v11];
      v13 = *v12;
      if (v7 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)&v8[4 * (v17 & v10)];
          v13 = *v12;
          if (v7 == *v12)
            goto LABEL_10;
        }
        if (v14)
          v12 = v14;
      }
LABEL_10:
      *v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C4FD0718(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t *v3;
  int v4;
  int v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v21;

  v21 = 0;
  v3 = &v21;
  while (a2)
  {
    v4 = *a3;
    if ((*a3 & 1) != 0)
    {
      v5 = 16;
      v6 = a3 + 2;
    }
    else
    {
      v5 = a3[4];
      if (!v5)
        goto LABEL_20;
      v6 = (int *)*((_QWORD *)a3 + 1);
    }
    v7 = v5 - 1;
    v8 = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v9 = *(_QWORD *)&v6[4 * v8];
    if (a2 == v9)
    {
LABEL_10:
      v12 = v6[4 * v8 + 2];
      if ((v4 & 1) == 0)
        goto LABEL_11;
    }
    else
    {
      v10 = 1;
      while (v9 != -4096)
      {
        v11 = v8 + v10++;
        v8 = v11 & v7;
        v9 = *(_QWORD *)&v6[4 * v8];
        if (a2 == v9)
          goto LABEL_10;
      }
      v12 = 0;
      if ((v4 & 1) == 0)
      {
LABEL_11:
        v13 = a3[4];
        if (!v13)
          goto LABEL_20;
        v14 = (int *)*((_QWORD *)a3 + 1);
        goto LABEL_13;
      }
    }
    v13 = 16;
    v14 = a3 + 2;
LABEL_13:
    v15 = v13 - 1;
    v16 = (v13 - 1) & ((a1 >> 4) ^ (a1 >> 9));
    v17 = *(_QWORD *)&v14[4 * v16];
    if (a1 != v17)
    {
      v18 = 1;
      while (v17 != -4096)
      {
        v19 = v16 + v18++;
        v16 = v19 & v15;
        v17 = *(_QWORD *)&v14[4 * v16];
        if (a1 == v17)
          goto LABEL_17;
      }
      goto LABEL_20;
    }
LABEL_17:
    if (v12 >= v14[4 * v16 + 2])
    {
LABEL_20:
      *v3 = a1;
      v3 = (uint64_t *)(a1 + 8);
      a1 = *(_QWORD *)(a1 + 8);
      if (!a1)
        goto LABEL_26;
    }
    else
    {
      *v3 = a2;
      v3 = (uint64_t *)(a2 + 8);
      a2 = *(_QWORD *)(a2 + 8);
      if (!a1)
        goto LABEL_26;
    }
  }
  a2 = a1;
LABEL_26:
  *v3 = a2;
  return v21;
}

uint64_t **sub_1C4FD085C(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *v7 = 0;
    v7[1] = 0;
    v7[6] = 0;
    v7[7] = 0;
    v7[5] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    sub_1C4768E74(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

char *sub_1C4FD092C(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  char *v6;
  uint64_t **v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;

  v7 = a1 + 1;
  v6 = (char *)a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = v6;
        v10 = *((_QWORD *)v6 + 4);
        if (v8 >= v10)
          break;
        v6 = *(char **)v9;
        v7 = (uint64_t **)v9;
        if (!*(_QWORD *)v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = (char *)*((_QWORD *)v9 + 1);
      if (!v6)
      {
        v7 = (uint64_t **)(v9 + 8);
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = (char *)(a1 + 1);
LABEL_10:
    v11 = v9;
    v9 = (char *)operator new(0x60uLL);
    *((_QWORD *)v9 + 4) = **a4;
    *(_OWORD *)(v9 + 72) = 0u;
    *((_QWORD *)v9 + 11) = 0;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *((_QWORD *)v9 + 9) = v9 + 80;
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    *((_QWORD *)v9 + 2) = v11;
    *v7 = (uint64_t *)v9;
    v12 = (uint64_t *)**a1;
    v13 = (uint64_t *)v9;
    if (v12)
    {
      *a1 = v12;
      v13 = *v7;
    }
    sub_1C4768E74(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v9;
}

char *sub_1C4FD0A28(char **a1, int a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v12;
  char *v13;
  char *v14;
  char *v15;

  v3 = *a1;
  v4 = a1[1];
  v5 = (v4 - *a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    abort();
  v8 = a1[2] - v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9 >> 60)
    sub_1C4764EE4();
  v12 = (char *)operator new(16 * v9);
  v13 = &v12[16 * v5];
  *(_DWORD *)v13 = a2;
  *((_QWORD *)v13 + 1) = a3;
  v14 = v13 + 16;
  if (v4 == v3)
  {
    v15 = &v12[16 * v5];
  }
  else
  {
    do
    {
      v15 = v13 - 16;
      *((_OWORD *)v13 - 1) = *((_OWORD *)v4 - 1);
      v4 -= 16;
      v13 -= 16;
    }
    while (v4 != v3);
  }
  *a1 = v15;
  a1[1] = v14;
  a1[2] = &v12[16 * v9];
  if (v3)
    operator delete(v3);
  return v14;
}

void sub_1C4FD0B14(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  __int128 v26;
  int v27;
  int v28;
  __int128 v29;
  BOOL v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  __int128 v35;
  int v36;
  int v37;
  __int128 v38;
  unint64_t v39;
  int v40;
  __int128 v41;
  __int128 *v42;
  __int128 *v43;
  __int128 *v44;
  unint64_t v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  unint64_t v54;
  BOOL v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  int64_t v65;
  int64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  __int128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

__int128 *sub_1C4FD1438(__int128 *result, __int128 *a2, __int128 *a3)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_DWORD *)a2 & 6;
  v4 = *(_DWORD *)a3 & 6;
  if (v3 >= (*(_DWORD *)result & 6u))
  {
    if (v4 < v3)
    {
      v8 = *((_QWORD *)a2 + 2);
      v9 = *a2;
      v10 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v10;
      *a3 = v9;
      *((_QWORD *)a3 + 2) = v8;
      if ((*(_DWORD *)a2 & 6u) < (*(_DWORD *)result & 6u))
      {
        v11 = *((_QWORD *)result + 2);
        v12 = *result;
        v13 = *((_QWORD *)a2 + 2);
        *result = *a2;
        *((_QWORD *)result + 2) = v13;
        *a2 = v12;
        *((_QWORD *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *((_QWORD *)result + 2);
      v15 = *result;
      v16 = *((_QWORD *)a2 + 2);
      *result = *a2;
      *((_QWORD *)result + 2) = v16;
      *a2 = v15;
      *((_QWORD *)a2 + 2) = v14;
      if ((*(_DWORD *)a3 & 6u) >= (*(_DWORD *)a2 & 6u))
        return result;
      v5 = *((_QWORD *)a2 + 2);
      v6 = *a2;
      v17 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v17;
    }
    else
    {
      v5 = *((_QWORD *)result + 2);
      v6 = *result;
      v7 = *((_QWORD *)a3 + 2);
      *result = *a3;
      *((_QWORD *)result + 2) = v7;
    }
    *a3 = v6;
    *((_QWORD *)a3 + 2) = v5;
  }
  return result;
}

BOOL sub_1C4FD1544(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      if ((*(_DWORD *)(a2 - 24) & 6u) < (*(_DWORD *)a1 & 6u))
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v9;
        *v6 = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      sub_1C4FD1438((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1C4FD17F0(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      v19 = (__int128 *)(a1 + 24);
      v20 = (__int128 *)(a1 + 48);
      v21 = (__int128 *)(a1 + 72);
      sub_1C4FD17F0(a1, a1 + 24, a1 + 48, a1 + 72);
      v23 = *(_DWORD *)(a2 - 24);
      v22 = a2 - 24;
      if ((v23 & 6u) < (*(_DWORD *)(a1 + 72) & 6u))
      {
        v24 = *(_QWORD *)(a1 + 88);
        v25 = *v21;
        v26 = *(_QWORD *)(v22 + 16);
        *v21 = *(_OWORD *)v22;
        *(_QWORD *)(a1 + 88) = v26;
        *(_OWORD *)v22 = v25;
        *(_QWORD *)(v22 + 16) = v24;
        if ((*(_DWORD *)v21 & 6u) < (*(_DWORD *)v20 & 6u))
        {
          v27 = *(_QWORD *)(a1 + 64);
          v28 = *v20;
          *v20 = *v21;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v21 = v28;
          *(_QWORD *)(a1 + 88) = v27;
          if ((*(_DWORD *)v20 & 6u) < (*(_DWORD *)v19 & 6u))
          {
            v29 = *(_QWORD *)(a1 + 40);
            v30 = *v19;
            *v19 = *v20;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v20 = v30;
            *(_QWORD *)(a1 + 64) = v29;
            if ((*(_DWORD *)(a1 + 24) & 6u) < (*(_DWORD *)a1 & 6u))
            {
              v31 = *(_QWORD *)(a1 + 16);
              v32 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v19;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v19 = v32;
              *(_QWORD *)(a1 + 40) = v31;
            }
          }
        }
      }
      return 1;
    default:
      v10 = (_DWORD *)(a1 + 48);
      sub_1C4FD1438((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(_QWORD *)v11;
    v15 = *(_QWORD *)v11 & 6;
    if (v15 < (*v10 & 6u))
    {
      v33 = *(_OWORD *)(v11 + 8);
      v16 = v12;
      while (1)
      {
        v17 = a1 + v16;
        *(_OWORD *)(v17 + 72) = *(_OWORD *)(a1 + v16 + 48);
        *(_QWORD *)(v17 + 88) = *(_QWORD *)(a1 + v16 + 64);
        if (v16 == -48)
          break;
        v16 -= 24;
        if (v15 >= (*(_DWORD *)(v17 + 24) & 6u))
        {
          v18 = a1 + v16 + 72;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(_QWORD *)v18 = v14;
      *(_OWORD *)(v18 + 8) = v33;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (_DWORD *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

__n128 sub_1C4FD17F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1C4FD1438((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if ((*(_DWORD *)a4 & 6u) < (*(_DWORD *)a3 & 6u))
  {
    v9 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v10 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v9;
    if ((*(_DWORD *)a3 & 6u) < (*(_DWORD *)a2 & 6u))
    {
      v11 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v12 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v11;
      if ((*(_DWORD *)a2 & 6u) < (*(_DWORD *)a1 & 6u))
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

uint64_t llvm::parseAssemblyInto(_OWORD *a1, llvm::LLVMContextImpl ***a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void **__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a7)
{
  __int128 v7;
  _OWORD v9[2];

  v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  return sub_1C4FD1908((uint64_t)v9, a2, a3, a4, a5, (char *)1, a6, a7);
}

uint64_t sub_1C4FD1908(uint64_t a1, llvm::LLVMContextImpl ***a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, void (*a7)(void **__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a8)
{
  __int128 v16;
  uint64_t v17;
  llvm::LLVMContextImpl **v18;
  uint64_t v19;
  llvm::Value *v20;
  llvm::LLVMContextImpl *v22;
  char *v23;
  _OWORD v24[2];
  char *v25;
  _OWORD v26[4];
  uint64_t v27;
  _BYTE v28[1312];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v27 = 0;
  memset(v26, 0, sizeof(v26));
  v16 = *(_OWORD *)(a1 + 16);
  v24[0] = *(_OWORD *)a1;
  v24[1] = v16;
  llvm::MemoryBuffer::getMemBuffer((uint64_t *)v24, &v25);
  v23 = v25;
  sub_1C6175188((uint64_t)v26, (uint64_t *)&v23, 0);
  v17 = (uint64_t)v23;
  v23 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = &v22;
  llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v22);
  if (a2)
    v18 = *a2;
  sub_1C4FD2DBC((uint64_t)v28, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), (uint64_t)v26, a4, (uint64_t)a2, a3, (uint64_t)v18, a5);
  v19 = llvm::LLParser::Run((uint64_t)v28, a6, a7, a8);
  sub_1C4FD2F30((uint64_t)v28);
  llvm::LLVMContext::~LLVMContext(&v22, v20);
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v26);
  return v19;
}

void llvm::parseAssemblyFile(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, llvm::LLVMContextImpl ****a6@<X8>)
{
  char v12;
  _QWORD *v13;
  std::string *v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  std::string *v18;
  std::string::size_type v19;
  std::string::size_type size;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void **v28;
  void **v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[4];
  std::string v36;
  std::string v37;
  std::error_code v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  uint64_t v42;
  int v43;
  __int128 v44;
  unint64_t v45;
  __int128 v46;
  _QWORD v47[4];
  char *v48[2];
  uint64_t v49;
  std::error_code v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  LOWORD(v41) = 261;
  *(_QWORD *)&v39 = a1;
  *((_QWORD *)&v39 + 1) = a2;
  llvm::MemoryBuffer::getFileOrSTDIN((const char ***)&v39, 0, 1, (uint64_t)&v50);
  v12 = v51;
  if ((v51 & 1) == 0)
  {
    std::system_category();
    v13 = *(_QWORD **)&v50.__val_;
LABEL_50:
    v31 = v13[1];
    v32 = v13[2] - v31;
    v33 = (*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
    v35[0] = v31;
    v35[1] = v32;
    v35[2] = v33;
    v35[3] = v34;
    llvm::parseAssembly((uint64_t)v35, a3, a4, a5, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))sub_1C4FD3118, (uint64_t)&v39, a6);
    if ((v12 & 1) != 0)
      return;
    goto LABEL_46;
  }
  v13 = *(_QWORD **)&v50.__val_;
  v38 = v50;
  if (!v50.__val_)
    goto LABEL_50;
  std::error_code::message(&v36, &v38);
  v14 = std::string::insert(&v36, 0, "Could not open input file: ");
  v37 = *v14;
  v15 = v37.__r_.__value_.__r.__words[2];
  v14->__r_.__value_.__r.__words[0] = 0;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v16 = HIBYTE(v15);
  v17 = (v16 & 0x80u) != 0;
  if ((v16 & 0x80u) == 0)
    v18 = &v37;
  else
    v18 = (std::string *)v37.__r_.__value_.__r.__words[0];
  v19 = v16 & 0x7F;
  if (v17)
    size = v37.__r_.__value_.__l.__size_;
  else
    size = v19;
  v39 = 0uLL;
  if (a2 > 0x7FFFFFFFFFFFFFF7)
LABEL_52:
    abort();
  if (a2 >= 0x17)
  {
    v22 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v22 = a2 | 7;
    v23 = v22 + 1;
    v21 = (__int128 *)operator new(v22 + 1);
    *((_QWORD *)&v40 + 1) = a2;
    v41 = v23 | 0x8000000000000000;
    *(_QWORD *)&v40 = v21;
    goto LABEL_16;
  }
  HIBYTE(v41) = a2;
  v21 = &v40;
  if (a2)
LABEL_16:
    memmove(v21, a1, a2);
  *((_BYTE *)v21 + a2) = 0;
  v42 = -1;
  v43 = 0;
  if (size > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_52;
  if (size >= 0x17)
  {
    v25 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v25 = size | 7;
    v26 = v25 + 1;
    v24 = (__int128 *)operator new(v25 + 1);
    *((_QWORD *)&v44 + 1) = size;
    v45 = v26 | 0x8000000000000000;
    *(_QWORD *)&v44 = v24;
    goto LABEL_24;
  }
  HIBYTE(v45) = size;
  v24 = &v44;
  if (size)
LABEL_24:
    memmove(v24, v18, size);
  *((_BYTE *)v24 + size) = 0;
  memset(v47, 0, sizeof(v47));
  v46 = 0u;
  v48[0] = (char *)&v49;
  v48[1] = (char *)0x400000000;
  *(_OWORD *)a3 = v39;
  v27 = (void **)(a3 + 16);
  if (*(char *)(a3 + 39) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v40;
  *(_QWORD *)(a3 + 32) = v41;
  HIBYTE(v41) = 0;
  LOBYTE(v40) = 0;
  *(_QWORD *)(a3 + 40) = v42;
  *(_DWORD *)(a3 + 48) = v43;
  v28 = (void **)(a3 + 56);
  if (*(char *)(a3 + 79) < 0)
    operator delete(*v28);
  *(_OWORD *)v28 = v44;
  *(_QWORD *)(a3 + 72) = v45;
  HIBYTE(v45) = 0;
  LOBYTE(v44) = 0;
  v29 = (void **)(a3 + 80);
  if (*(char *)(a3 + 103) < 0)
    operator delete(*v29);
  *(_OWORD *)v29 = v46;
  *(_QWORD *)(a3 + 96) = v47[0];
  HIBYTE(v47[0]) = 0;
  LOBYTE(v46) = 0;
  v30 = *(void **)(a3 + 104);
  if (v30)
  {
    *(_QWORD *)(a3 + 112) = v30;
    operator delete(v30);
  }
  *(_OWORD *)(a3 + 104) = *(_OWORD *)&v47[1];
  *(_QWORD *)(a3 + 120) = v47[3];
  memset(&v47[1], 0, 24);
  sub_1C4FACD18(a3 + 128, (uint64_t)v48);
  sub_1C4FAD100(v48);
  if (v47[1])
  {
    v47[2] = v47[1];
    operator delete((void *)v47[1]);
  }
  if (SHIBYTE(v47[0]) < 0)
    operator delete((void *)v46);
  if (SHIBYTE(v45) < 0)
    operator delete((void *)v44);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  *a6 = 0;
  if ((v51 & 1) == 0)
  {
LABEL_46:
    if (*(_QWORD *)&v50.__val_)
      (*(void (**)(_QWORD))(**(_QWORD **)&v50.__val_ + 8))(*(_QWORD *)&v50.__val_);
  }
}

uint64_t llvm::parseAssemblyWithIndex@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, llvm::LLVMContextImpl ****a5@<X8>)
{
  __int128 v5;
  char v7;
  _OWORD v8[2];

  v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  return sub_1C4FD1E84(a5, (uint64_t)v8, a2, a3, a4, (char *)1, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))sub_1C4FD3124, (uint64_t)&v7);
}

uint64_t sub_1C4FD1E84(llvm::LLVMContextImpl ****a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char *a6, void (*a7)(void **__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a8)
{
  size_t v15;
  const void *v16;
  llvm::LLVMContextImpl ***v17;
  uint64_t v18;
  __int128 v19;
  uint64_t result;
  uint64_t v21;
  _OWORD v23[2];

  v16 = *(const void **)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  v17 = (llvm::LLVMContextImpl ***)operator new();
  llvm::Module::Module((uint64_t)v17, v16, v15, a4);
  v18 = operator new();
  sub_1C61A7328(v18, 1, 0);
  v19 = *(_OWORD *)(a2 + 16);
  v23[0] = *(_OWORD *)a2;
  v23[1] = v19;
  result = sub_1C4FD1908((uint64_t)v23, v17, v18, a3, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v21 = sub_1C61A8910(v18);
    MEMORY[0x1CAA32FC0](v21, 0x10B0C4007EAB999);
    llvm::Module::~Module((llvm::Module *)v17);
    result = MEMORY[0x1CAA32FC0]();
    v17 = 0;
    v18 = 0;
  }
  *a1 = v17;
  a1[1] = (llvm::LLVMContextImpl ***)v18;
  return result;
}

void llvm::parseAssemblyFileWithIndex(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(void **__return_ptr, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  sub_1C4FD1FF4(a9, a1, a2, a3, a4, a5, (char *)1, a8, a6, a7);
}

void sub_1C4FD1FF4(uint64_t a1, const void *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, void (*a9)(void **__return_ptr, uint64_t, uint64_t, uint64_t), uint64_t a10)
{
  char v17;
  _QWORD *v18;
  std::string *v19;
  unint64_t v20;
  unint64_t v21;
  BOOL v22;
  std::string *v23;
  std::string::size_type v24;
  std::string::size_type size;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  void **v37;
  void **v38;
  void *v39;
  _QWORD v40[4];
  std::string v41;
  std::string v42;
  std::error_code v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  __int128 v49;
  unint64_t v50;
  __int128 v51;
  _QWORD v52[4];
  char *v53[2];
  uint64_t v54;
  std::error_code v55;
  char v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  LOWORD(v46) = 261;
  *(_QWORD *)&v44 = a2;
  *((_QWORD *)&v44 + 1) = a3;
  llvm::MemoryBuffer::getFileOrSTDIN((const char ***)&v44, 1, 1, (uint64_t)&v55);
  v17 = v56;
  if ((v56 & 1) == 0)
  {
    std::system_category();
    v18 = *(_QWORD **)&v55.__val_;
    goto LABEL_14;
  }
  v18 = *(_QWORD **)&v55.__val_;
  v43 = v55;
  if (!v55.__val_)
  {
LABEL_14:
    v27 = v18[1];
    v28 = v18[2] - v27;
    v29 = (*(uint64_t (**)(_QWORD *))(*v18 + 16))(v18);
    v40[0] = v27;
    v40[1] = v28;
    v40[2] = v29;
    v40[3] = v30;
    sub_1C4FD1E84((llvm::LLVMContextImpl ****)a1, (uint64_t)v40, a4, a5, a6, a7, a9, a10);
    if ((v17 & 1) != 0)
      return;
    goto LABEL_49;
  }
  std::error_code::message(&v41, &v43);
  v19 = std::string::insert(&v41, 0, "Could not open input file: ");
  v42 = *v19;
  v20 = v42.__r_.__value_.__r.__words[2];
  v19->__r_.__value_.__r.__words[0] = 0;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v21 = HIBYTE(v20);
  v22 = (v21 & 0x80u) != 0;
  if ((v21 & 0x80u) == 0)
    v23 = &v42;
  else
    v23 = (std::string *)v42.__r_.__value_.__r.__words[0];
  v24 = v21 & 0x7F;
  if (v22)
    size = v42.__r_.__value_.__l.__size_;
  else
    size = v24;
  v44 = 0uLL;
  if (a3 > 0x7FFFFFFFFFFFFFF7)
LABEL_52:
    abort();
  if (a3 >= 0x17)
  {
    v31 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v31 = a3 | 7;
    v32 = v31 + 1;
    v26 = (__int128 *)operator new(v31 + 1);
    *((_QWORD *)&v45 + 1) = a3;
    v46 = v32 | 0x8000000000000000;
    *(_QWORD *)&v45 = v26;
    goto LABEL_19;
  }
  HIBYTE(v46) = a3;
  v26 = &v45;
  if (a3)
LABEL_19:
    memmove(v26, a2, a3);
  *((_BYTE *)v26 + a3) = 0;
  v47 = -1;
  v48 = 0;
  if (size > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_52;
  if (size >= 0x17)
  {
    v34 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v34 = size | 7;
    v35 = v34 + 1;
    v33 = (__int128 *)operator new(v34 + 1);
    *((_QWORD *)&v49 + 1) = size;
    v50 = v35 | 0x8000000000000000;
    *(_QWORD *)&v49 = v33;
    goto LABEL_27;
  }
  HIBYTE(v50) = size;
  v33 = &v49;
  if (size)
LABEL_27:
    memmove(v33, v23, size);
  *((_BYTE *)v33 + size) = 0;
  memset(v52, 0, sizeof(v52));
  v51 = 0u;
  v53[0] = (char *)&v54;
  v53[1] = (char *)0x400000000;
  *(_OWORD *)a4 = v44;
  v36 = (void **)(a4 + 16);
  if (*(char *)(a4 + 39) < 0)
    operator delete(*v36);
  *(_OWORD *)v36 = v45;
  *(_QWORD *)(a4 + 32) = v46;
  HIBYTE(v46) = 0;
  LOBYTE(v45) = 0;
  *(_QWORD *)(a4 + 40) = v47;
  *(_DWORD *)(a4 + 48) = v48;
  v37 = (void **)(a4 + 56);
  if (*(char *)(a4 + 79) < 0)
    operator delete(*v37);
  *(_OWORD *)v37 = v49;
  *(_QWORD *)(a4 + 72) = v50;
  HIBYTE(v50) = 0;
  LOBYTE(v49) = 0;
  v38 = (void **)(a4 + 80);
  if (*(char *)(a4 + 103) < 0)
    operator delete(*v38);
  *(_OWORD *)v38 = v51;
  *(_QWORD *)(a4 + 96) = v52[0];
  HIBYTE(v52[0]) = 0;
  LOBYTE(v51) = 0;
  v39 = *(void **)(a4 + 104);
  if (v39)
  {
    *(_QWORD *)(a4 + 112) = v39;
    operator delete(v39);
  }
  *(_OWORD *)(a4 + 104) = *(_OWORD *)&v52[1];
  *(_QWORD *)(a4 + 120) = v52[3];
  memset(&v52[1], 0, 24);
  sub_1C4FACD18(a4 + 128, (uint64_t)v53);
  sub_1C4FAD100(v53);
  if (v52[1])
  {
    v52[2] = v52[1];
    operator delete((void *)v52[1]);
  }
  if (SHIBYTE(v52[0]) < 0)
    operator delete((void *)v51);
  if (SHIBYTE(v50) < 0)
    operator delete((void *)v49);
  if (SHIBYTE(v46) < 0)
    operator delete((void *)v45);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if ((v56 & 1) == 0)
  {
LABEL_49:
    if (*(_QWORD *)&v55.__val_)
      (*(void (**)(_QWORD))(**(_QWORD **)&v55.__val_ + 8))(*(_QWORD *)&v55.__val_);
  }
}

void llvm::parseAssemblyFileWithIndexNoUpgradeDebugInfo(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(void **__return_ptr, uint64_t, uint64_t, uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  sub_1C4FD1FF4(a9, a1, a2, a3, a4, a5, 0, a8, a6, a7);
}

uint64_t llvm::parseAssemblyString@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, llvm::LLVMContextImpl ****a6@<X8>)
{
  char v7;
  _QWORD v8[4];

  v8[0] = a1;
  v8[1] = a2;
  v8[2] = "<string>";
  v8[3] = 8;
  return llvm::parseAssembly((uint64_t)v8, a3, a4, a5, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))sub_1C4FD3118, (uint64_t)&v7, a6);
}

void llvm::parseSummaryIndexAssembly(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  llvm::Value *v11;
  uint64_t v12;
  char v13;
  llvm::LLVMContextImpl *v14;
  char *v15;
  uint64_t v16[2];
  __int128 v17;
  char *v18;
  _OWORD v19[4];
  uint64_t v20;
  _BYTE v21[1312];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v6 = operator new();
  sub_1C61A7328(v6, 0, 0);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v17 = *(_OWORD *)(a1 + 16);
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v16[0] = v7;
  v16[1] = v8;
  llvm::MemoryBuffer::getMemBuffer(v16, &v18);
  v15 = v18;
  sub_1C6175188((uint64_t)v19, (uint64_t *)&v15, 0);
  v9 = (uint64_t)v15;
  v15 = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v14);
  sub_1C4FD2DBC((uint64_t)v21, v7, v8, (uint64_t)v19, a2, 0, v6, (uint64_t)&v14, 0);
  v10 = llvm::LLParser::Run((uint64_t)v21, (char *)1, (void (*)(void **__return_ptr, uint64_t, uint64_t, uint64_t))sub_1C4FD2DB0, (uint64_t)&v13);
  sub_1C4FD2F30((uint64_t)v21);
  llvm::LLVMContext::~LLVMContext(&v14, v11);
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v19);
  if (v10)
  {
    v12 = sub_1C61A8910(v6);
    MEMORY[0x1CAA32FC0](v12, 0x10B0C4007EAB999);
    v6 = 0;
  }
  *a3 = v6;
}

void llvm::parseSummaryIndexAssemblyFile(const void *a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char v8;
  _QWORD *v9;
  std::string *v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  std::string *v14;
  std::string::size_type v15;
  std::string::size_type size;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  void **v28;
  void **v29;
  void *v30;
  _QWORD v31[4];
  std::string v32;
  std::string v33;
  std::error_code v34;
  __int128 v35;
  __int128 v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  unint64_t v41;
  __int128 v42;
  _QWORD v43[4];
  char *v44[2];
  uint64_t v45;
  std::error_code v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  LOWORD(v37) = 261;
  *(_QWORD *)&v35 = a1;
  *((_QWORD *)&v35 + 1) = a2;
  llvm::MemoryBuffer::getFileOrSTDIN((const char ***)&v35, 0, 1, (uint64_t)&v46);
  v8 = v47;
  if ((v47 & 1) == 0)
  {
    std::system_category();
    v9 = *(_QWORD **)&v46.__val_;
    goto LABEL_14;
  }
  v9 = *(_QWORD **)&v46.__val_;
  v34 = v46;
  if (!v46.__val_)
  {
LABEL_14:
    v18 = v9[1];
    v19 = v9[2] - v18;
    v20 = (*(uint64_t (**)(_QWORD *))(*v9 + 16))(v9);
    v31[0] = v18;
    v31[1] = v19;
    v31[2] = v20;
    v31[3] = v21;
    llvm::parseSummaryIndexAssembly((uint64_t)v31, a3, a4);
    if ((v8 & 1) != 0)
      return;
    goto LABEL_49;
  }
  std::error_code::message(&v32, &v34);
  v10 = std::string::insert(&v32, 0, "Could not open input file: ");
  v33 = *v10;
  v11 = v33.__r_.__value_.__r.__words[2];
  v10->__r_.__value_.__r.__words[0] = 0;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v12 = HIBYTE(v11);
  v13 = (v12 & 0x80u) != 0;
  if ((v12 & 0x80u) == 0)
    v14 = &v33;
  else
    v14 = (std::string *)v33.__r_.__value_.__r.__words[0];
  v15 = v12 & 0x7F;
  if (v13)
    size = v33.__r_.__value_.__l.__size_;
  else
    size = v15;
  v35 = 0uLL;
  if (a2 > 0x7FFFFFFFFFFFFFF7)
LABEL_52:
    abort();
  if (a2 >= 0x17)
  {
    v22 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v22 = a2 | 7;
    v23 = v22 + 1;
    v17 = (__int128 *)operator new(v22 + 1);
    *((_QWORD *)&v36 + 1) = a2;
    v37 = v23 | 0x8000000000000000;
    *(_QWORD *)&v36 = v17;
    goto LABEL_19;
  }
  HIBYTE(v37) = a2;
  v17 = &v36;
  if (a2)
LABEL_19:
    memmove(v17, a1, a2);
  *((_BYTE *)v17 + a2) = 0;
  v38 = -1;
  v39 = 0;
  if (size > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_52;
  if (size >= 0x17)
  {
    v25 = (size & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((size | 7) != 0x17)
      v25 = size | 7;
    v26 = v25 + 1;
    v24 = (__int128 *)operator new(v25 + 1);
    *((_QWORD *)&v40 + 1) = size;
    v41 = v26 | 0x8000000000000000;
    *(_QWORD *)&v40 = v24;
    goto LABEL_27;
  }
  HIBYTE(v41) = size;
  v24 = &v40;
  if (size)
LABEL_27:
    memmove(v24, v14, size);
  *((_BYTE *)v24 + size) = 0;
  memset(v43, 0, sizeof(v43));
  v42 = 0u;
  v44[0] = (char *)&v45;
  v44[1] = (char *)0x400000000;
  *(_OWORD *)a3 = v35;
  v27 = (void **)(a3 + 16);
  if (*(char *)(a3 + 39) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = v36;
  *(_QWORD *)(a3 + 32) = v37;
  HIBYTE(v37) = 0;
  LOBYTE(v36) = 0;
  *(_QWORD *)(a3 + 40) = v38;
  *(_DWORD *)(a3 + 48) = v39;
  v28 = (void **)(a3 + 56);
  if (*(char *)(a3 + 79) < 0)
    operator delete(*v28);
  *(_OWORD *)v28 = v40;
  *(_QWORD *)(a3 + 72) = v41;
  HIBYTE(v41) = 0;
  LOBYTE(v40) = 0;
  v29 = (void **)(a3 + 80);
  if (*(char *)(a3 + 103) < 0)
    operator delete(*v29);
  *(_OWORD *)v29 = v42;
  *(_QWORD *)(a3 + 96) = v43[0];
  HIBYTE(v43[0]) = 0;
  LOBYTE(v42) = 0;
  v30 = *(void **)(a3 + 104);
  if (v30)
  {
    *(_QWORD *)(a3 + 112) = v30;
    operator delete(v30);
  }
  *(_OWORD *)(a3 + 104) = *(_OWORD *)&v43[1];
  *(_QWORD *)(a3 + 120) = v43[3];
  memset(&v43[1], 0, 24);
  sub_1C4FACD18(a3 + 128, (uint64_t)v44);
  sub_1C4FAD100(v44);
  if (v43[1])
  {
    v43[2] = v43[1];
    operator delete((void *)v43[1]);
  }
  if (SHIBYTE(v43[0]) < 0)
    operator delete((void *)v42);
  if (SHIBYTE(v41) < 0)
    operator delete((void *)v40);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  *a4 = 0;
  if ((v47 & 1) == 0)
  {
LABEL_49:
    if (*(_QWORD *)&v46.__val_)
      (*(void (**)(_QWORD))(**(_QWORD **)&v46.__val_ + 8))(*(_QWORD *)&v46.__val_);
  }
}

const void ***llvm::parseType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char **a5)
{
  const void ***result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void **v12;
  void **v13;
  void **v14;
  void *v15;
  const void ***v16[4];
  __int16 v17;
  char *v18;
  _OWORD v19[4];
  uint64_t v20;
  unsigned int v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 __p;
  uint64_t v32;
  char *v33[23];

  v33[22] = *(char **)MEMORY[0x1E0C80C00];
  v21 = 0;
  result = llvm::parseTypeAtBeginning(a1, a2, &v21, a3, a4, a5);
  if (result)
  {
    v9 = v21;
    if (a2 != v21)
    {
      v20 = 0;
      memset(v19, 0, sizeof(v19));
      LOWORD(v24) = 261;
      *(_QWORD *)&v22 = "";
      *((_QWORD *)&v22 + 1) = 0;
      v16[0] = (const void ***)&v22;
      v10 = sub_1C5E1F380(24, v16);
      *(_QWORD *)v10 = &off_1E81A17B0;
      *((_QWORD *)v10 + 1) = a1;
      *((_QWORD *)v10 + 2) = a1 + a2;
      v18 = v10;
      sub_1C6175188((uint64_t)v19, (uint64_t *)&v18, 0);
      v11 = (uint64_t)v18;
      v18 = 0;
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v16[0] = (const void ***)"expected end of string";
      v17 = 259;
      llvm::SourceMgr::GetMessage((uint64_t *)v19, (char *)(a1 + v9), 0, (llvm::Twine *)v16, 0, 0, 0, 0, (uint64_t)&v22);
      *(_OWORD *)a3 = v22;
      v12 = (void **)(a3 + 16);
      if (*(char *)(a3 + 39) < 0)
        operator delete(*v12);
      *(_OWORD *)v12 = v23;
      *(_QWORD *)(a3 + 32) = v24;
      HIBYTE(v24) = 0;
      LOBYTE(v23) = 0;
      *(_QWORD *)(a3 + 40) = v25;
      *(_DWORD *)(a3 + 48) = v26;
      v13 = (void **)(a3 + 56);
      if (*(char *)(a3 + 79) < 0)
        operator delete(*v13);
      *(_OWORD *)v13 = v27;
      *(_QWORD *)(a3 + 72) = v28;
      HIBYTE(v28) = 0;
      LOBYTE(v27) = 0;
      v14 = (void **)(a3 + 80);
      if (*(char *)(a3 + 103) < 0)
        operator delete(*v14);
      *(_OWORD *)v14 = v29;
      *(_QWORD *)(a3 + 96) = v30;
      HIBYTE(v30) = 0;
      LOBYTE(v29) = 0;
      v15 = *(void **)(a3 + 104);
      if (v15)
      {
        *(_QWORD *)(a3 + 112) = v15;
        operator delete(v15);
      }
      *(_OWORD *)(a3 + 104) = __p;
      *(_QWORD *)(a3 + 120) = v32;
      v32 = 0;
      __p = 0uLL;
      sub_1C4FACD18(a3 + 128, (uint64_t)v33);
      sub_1C4FAD100(v33);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (SHIBYTE(v30) < 0)
        operator delete((void *)v29);
      if (SHIBYTE(v28) < 0)
        operator delete((void *)v27);
      if (SHIBYTE(v24) < 0)
        operator delete((void *)v23);
      llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v19);
      return 0;
    }
  }
  return result;
}

const void ***llvm::parseTypeAtBeginning(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t *a5, char **a6)
{
  char *v12;
  uint64_t v13;
  int v14;
  const void ***v15;
  char *v17;
  _OWORD v18[4];
  uint64_t v19;
  const void ***v20;
  _QWORD v21[4];
  __int16 v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  memset(v18, 0, sizeof(v18));
  v22 = 261;
  v21[0] = "";
  v21[1] = 0;
  v20 = (const void ***)v21;
  v12 = sub_1C5E1F380(24, &v20);
  *(_QWORD *)v12 = &off_1E81A17B0;
  *((_QWORD *)v12 + 1) = a1;
  *((_QWORD *)v12 + 2) = a1 + a2;
  v17 = v12;
  sub_1C6175188((uint64_t)v18, (uint64_t *)&v17, 0);
  v13 = (uint64_t)v17;
  v17 = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v20 = 0;
  sub_1C4FD2DBC((uint64_t)v21, a1, a2, (uint64_t)v18, a4, (uint64_t)a5, 0, *a5, 0);
  v14 = llvm::LLParser::parseTypeAtBeginning((uint64_t)v21, (llvm::Type **)&v20, a3, a6);
  sub_1C4FD2F30((uint64_t)v21);
  if (v14)
    v15 = 0;
  else
    v15 = v20;
  llvm::SourceMgr::~SourceMgr((llvm::SourceMgr *)v18);
  return v15;
}

void sub_1C4FD2DB0(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t sub_1C4FD2DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(_QWORD *)a1 = a8;
  llvm::LLLexer::LLLexer(a1 + 8, a2, a3, a4, a5, a8);
  llvm::LLLexer::LLLexer(a1 + 168, a2, a3, a4, a5, a8);
  *(_QWORD *)(a1 + 328) = a6;
  *(_QWORD *)(a1 + 336) = a7;
  *(_QWORD *)(a1 + 344) = a9;
  *(_QWORD *)(a1 + 352) = a1 + 368;
  *(_QWORD *)(a1 + 360) = 0x4000000000;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_QWORD *)(a1 + 896) = 0x1800000000;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_QWORD *)(a1 + 912) = a1 + 920;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_QWORD *)(a1 + 936) = a1 + 944;
  *(_QWORD *)(a1 + 960) = a1 + 968;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_QWORD *)(a1 + 984) = a1 + 992;
  *(_OWORD *)(a1 + 1016) = 0u;
  *(_QWORD *)(a1 + 1008) = a1 + 1016;
  *(_QWORD *)(a1 + 1048) = 0;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1064) = 0u;
  *(_QWORD *)(a1 + 1056) = a1 + 1064;
  *(_OWORD *)(a1 + 1088) = 0u;
  *(_QWORD *)(a1 + 1080) = a1 + 1088;
  *(_QWORD *)(a1 + 1104) = 0;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(_QWORD *)(a1 + 1112) = a1 + 1120;
  *(_OWORD *)(a1 + 1144) = 0u;
  *(_QWORD *)(a1 + 1136) = a1 + 1144;
  *(_OWORD *)(a1 + 1168) = 0u;
  *(_QWORD *)(a1 + 1160) = a1 + 1168;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(_QWORD *)(a1 + 1184) = a1 + 1192;
  *(_OWORD *)(a1 + 1208) = 0u;
  *(_QWORD *)(a1 + 1224) = 0;
  *(_OWORD *)(a1 + 1240) = 0u;
  *(_QWORD *)(a1 + 1232) = a1 + 1240;
  *(_OWORD *)(a1 + 1264) = 0u;
  *(_QWORD *)(a1 + 1256) = a1 + 1264;
  *(_QWORD *)(a1 + 1304) = 0;
  *(_OWORD *)(a1 + 1288) = 0u;
  return a1;
}

uint64_t sub_1C4FD2F30(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  if (*(char *)(a1 + 1311) < 0)
    operator delete(*(void **)(a1 + 1288));
  sub_1C6143384(*(_QWORD **)(a1 + 1264));
  sub_1C61CEBB4(*(_QWORD **)(a1 + 1240));
  v2 = *(void **)(a1 + 1208);
  if (v2)
  {
    *(_QWORD *)(a1 + 1216) = v2;
    operator delete(v2);
  }
  sub_1C61CEBB4(*(_QWORD **)(a1 + 1192));
  sub_1C61CEBB4(*(_QWORD **)(a1 + 1168));
  sub_1C61CEEE8(*(_QWORD **)(a1 + 1144));
  sub_1C61CEBB4(*(_QWORD **)(a1 + 1120));
  sub_1C61CEF34(*(_QWORD **)(a1 + 1088));
  sub_1C4FCEA58(*(char **)(a1 + 1064));
  v3 = *(void **)(a1 + 1032);
  if (v3)
  {
    *(_QWORD *)(a1 + 1040) = v3;
    operator delete(v3);
  }
  sub_1C6143384(*(_QWORD **)(a1 + 1016));
  sub_1C4FCEA58(*(char **)(a1 + 992));
  sub_1C61CEF84(*(_QWORD **)(a1 + 968));
  sub_1C61CE1A4(a1 + 936, *(_QWORD **)(a1 + 944));
  sub_1C6143384(*(_QWORD **)(a1 + 920));
  sub_1C61A8A20(a1 + 880);
  v4 = *(void **)(a1 + 352);
  if (v4 != (void *)(a1 + 368))
    free(v4);
  if (*(_DWORD *)(a1 + 312) >= 0x41u)
  {
    v5 = *(_QWORD *)(a1 + 304);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  v6 = *(_QWORD *)(a1 + 280);
  if ((_UNKNOWN *)v6 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)(a1 + 288));
  }
  else if ((*(_DWORD *)(v6 + 8) - 64) <= 0xFFFFFF7F)
  {
    v10 = *(_QWORD *)(a1 + 288);
    if (v10)
      MEMORY[0x1CAA32F9C](v10, 0x1000C8000313F17);
  }
  if (*(char *)(a1 + 255) < 0)
    operator delete(*(void **)(a1 + 232));
  if (*(_DWORD *)(a1 + 152) >= 0x41u)
  {
    v7 = *(_QWORD *)(a1 + 144);
    if (v7)
      MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  }
  v8 = *(_QWORD *)(a1 + 120);
  if ((_UNKNOWN *)v8 == &unk_1C866F1C0)
  {
    sub_1C4773C74((uint64_t *)(a1 + 128));
  }
  else if ((*(_DWORD *)(v8 + 8) - 64) <= 0xFFFFFF7F)
  {
    v11 = *(_QWORD *)(a1 + 128);
    if (v11)
      MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
  }
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  return a1;
}

void sub_1C4FD3118(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void sub_1C4FD3124(_BYTE *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(_BYTE *a1, uint64_t a2, int a3, uint64_t (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  int v5;
  uint64_t (*v11)(_QWORD, _QWORD);

  v5 = *(unsigned __int8 *)(*(_QWORD *)a2 + 8);
  if ((v5 - 9) > 0xFFFFFFFD)
    return 0;
  if (v5 != a3)
  {
    if (v5 != 5 || *a1 != 0)
      return 0;
    v11 = a4;
    llvm::msgpack::DocNode::fromString(a2, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)"", 0);
    a4 = v11;
    if (*(unsigned __int8 *)(*(_QWORD *)a2 + 8) != a3)
      return 0;
  }
  if (a4)
    return a4(a5, a2);
  return 1;
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyInteger(llvm::AMDGPU::HSAMD::V3::MetadataVerifier *this, llvm::msgpack::DocNode *a2)
{
  int v4;
  uint64_t result;

  if ((llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)a2, 1, 0, 0) & 1) != 0)
    return 1;
  v4 = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)a2, 0, 0, 0);
  result = 0;
  if (v4)
    return 1;
  return result;
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyArray(uint64_t a1, _QWORD *a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, char a6)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  if (*(_BYTE *)(*a2 + 8) != 7)
    return 0;
  v8 = (uint64_t *)a2[1];
  if (a6)
  {
    v9 = *v8;
    v10 = v8[1];
    if (0xAAAAAAAAAAAAAAABLL * ((v10 - *v8) >> 3) != a5)
      return 0;
  }
  else
  {
    v9 = *v8;
    v10 = v8[1];
  }
  if (v9 == v10)
    return 1;
  do
  {
    result = a3(a4, v9);
    if (!(_DWORD)result)
      break;
    v9 += 24;
  }
  while (v9 != v10);
  return result;
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyEntry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t (*a6)(uint64_t, _QWORD *), uint64_t a7)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v14[3];

  v10 = *(_QWORD *)(a2 + 8);
  v14[0] = **(_QWORD **)a2 + 176;
  v14[1] = a3;
  v14[2] = a4;
  v11 = sub_1C4FE31DC(v10, v14);
  if ((_QWORD *)(*(_QWORD *)(a2 + 8) + 8) == v11)
    return a5 ^ 1u;
  else
    return a6(a7, v11 + 7);
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalarEntry(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t (*a7)(_QWORD, _QWORD), uint64_t a8)
{
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17[3];

  v14 = *(_QWORD *)(a2 + 8);
  v17[0] = **(_QWORD **)a2 + 176;
  v17[1] = a3;
  v17[2] = a4;
  v15 = sub_1C4FE31DC(v14, v17);
  if ((_QWORD *)(*(_QWORD *)(a2 + 8) + 8) == v15)
    return a5 ^ 1u;
  else
    return llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(a1, (uint64_t)(v15 + 7), a6, a7, a8);
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyIntegerEntry(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *v10;
  uint64_t v11[3];

  v10 = a1;
  v7 = *(_QWORD *)(a2 + 8);
  v11[0] = **(_QWORD **)a2 + 176;
  v11[1] = a3;
  v11[2] = a4;
  v8 = sub_1C4FE31DC(v7, v11);
  if ((_QWORD *)(*(_QWORD *)(a2 + 8) + 8) == v8)
    return a5 ^ 1u;
  else
    return sub_1C4FD42D4(&v10, (uint64_t)(v8 + 7));
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyKernelArgs(llvm::AMDGPU::HSAMD::V3::MetadataVerifier *this, llvm::msgpack::DocNode *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _BYTE *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 8)
    return 0;
  v31 = **(_QWORD **)a2 + 176;
  v32 = ".name";
  v33 = 5;
  v4 = sub_1C4FE31DC(*((_QWORD *)a2 + 1), &v31);
  v5 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v5 + 8) != v4)
  {
    result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v4 + 7), 5, 0, 0);
    if (!(_DWORD)result)
      return result;
    v5 = *((_QWORD *)a2 + 1);
  }
  v31 = **(_QWORD **)a2 + 176;
  v32 = ".type_name";
  v33 = 10;
  v7 = sub_1C4FE31DC(v5, &v31);
  v8 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v8 + 8) != v7)
  {
    result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v7 + 7), 5, 0, 0);
    if (!(_DWORD)result)
      return result;
    v8 = *((_QWORD *)a2 + 1);
  }
  v30 = this;
  v31 = **(_QWORD **)a2 + 176;
  v32 = ".size";
  v33 = 5;
  v9 = sub_1C4FE31DC(v8, &v31);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v9)
    return 0;
  result = sub_1C4FD42D4(&v30, (uint64_t)(v9 + 7));
  if (!(_DWORD)result)
    return result;
  v30 = this;
  v10 = *((_QWORD *)a2 + 1);
  v31 = **(_QWORD **)a2 + 176;
  v32 = ".offset";
  v33 = 7;
  v11 = sub_1C4FE31DC(v10, &v31);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v11)
    return 0;
  result = sub_1C4FD42D4(&v30, (uint64_t)(v11 + 7));
  if (!(_DWORD)result)
    return result;
  v12 = *((_QWORD *)a2 + 1);
  v31 = **(_QWORD **)a2 + 176;
  v32 = ".value_kind";
  v33 = 11;
  v13 = sub_1C4FE31DC(v12, &v31);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v13)
    return 0;
  result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v13 + 7), 5, (uint64_t (*)(_QWORD, _QWORD))sub_1C4FD4334, (uint64_t)&v30);
  if (!(_DWORD)result)
    return result;
  v30 = this;
  v14 = *((_QWORD *)a2 + 1);
  v31 = **(_QWORD **)a2 + 176;
  v32 = ".pointee_align";
  v33 = 14;
  v15 = sub_1C4FE31DC(v14, &v31);
  v16 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v16 + 8) != v15)
  {
    result = sub_1C4FD42D4(&v30, (uint64_t)(v15 + 7));
    if (!(_DWORD)result)
      return result;
    v16 = *((_QWORD *)a2 + 1);
  }
  v31 = **(_QWORD **)a2 + 176;
  v32 = ".address_space";
  v33 = 14;
  v17 = sub_1C4FE31DC(v16, &v31);
  v18 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v18 + 8) != v17)
  {
    result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v17 + 7), 5, (uint64_t (*)(_QWORD, _QWORD))sub_1C4FD4BDC, (uint64_t)&v30);
    if (!(_DWORD)result)
      return result;
    v18 = *((_QWORD *)a2 + 1);
  }
  v31 = **(_QWORD **)a2 + 176;
  v32 = ".access";
  v33 = 7;
  v19 = sub_1C4FE31DC(v18, &v31);
  v20 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v20 + 8) != v19)
  {
    result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v19 + 7), 5, (uint64_t (*)(_QWORD, _QWORD))sub_1C4FD4D30, (uint64_t)&v30);
    if (!(_DWORD)result)
      return result;
    v20 = *((_QWORD *)a2 + 1);
  }
  v31 = **(_QWORD **)a2 + 176;
  v32 = ".actual_access";
  v33 = 14;
  v21 = sub_1C4FE31DC(v20, &v31);
  v22 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v22 + 8) != v21)
  {
    result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v21 + 7), 5, (uint64_t (*)(_QWORD, _QWORD))sub_1C4FD4E18, (uint64_t)&v30);
    if (!(_DWORD)result)
      return result;
    v22 = *((_QWORD *)a2 + 1);
  }
  v31 = **(_QWORD **)a2 + 176;
  v32 = ".is_const";
  v33 = 9;
  v23 = sub_1C4FE31DC(v22, &v31);
  v24 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v24 + 8) != v23)
  {
    result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v23 + 7), 3, 0, 0);
    if (!(_DWORD)result)
      return result;
    v24 = *((_QWORD *)a2 + 1);
  }
  v31 = **(_QWORD **)a2 + 176;
  v32 = ".is_restrict";
  v33 = 12;
  v25 = sub_1C4FE31DC(v24, &v31);
  v26 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v26 + 8) != v25)
  {
    result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v25 + 7), 3, 0, 0);
    if (!(_DWORD)result)
      return result;
    v26 = *((_QWORD *)a2 + 1);
  }
  v31 = **(_QWORD **)a2 + 176;
  v32 = ".is_volatile";
  v33 = 12;
  v27 = sub_1C4FE31DC(v26, &v31);
  v28 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v28 + 8) != v27)
  {
    result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v27 + 7), 3, 0, 0);
    if (!(_DWORD)result)
      return result;
    v28 = *((_QWORD *)a2 + 1);
  }
  v31 = **(_QWORD **)a2 + 176;
  v32 = ".is_pipe";
  v33 = 8;
  v29 = sub_1C4FE31DC(v28, &v31);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v29)
    return 1;
  else
    return llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v29 + 7), 3, 0, 0);
}

uint64_t llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyKernel(llvm::AMDGPU::HSAMD::V3::MetadataVerifier *this, llvm::msgpack::DocNode *a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  llvm::msgpack::DocNode **v18;
  llvm::msgpack::DocNode *v19;
  llvm::msgpack::DocNode *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  _BYTE *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 8)
    return 0;
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".name";
  v57 = 5;
  v4 = sub_1C4FE31DC(*((_QWORD *)a2 + 1), &v55);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v4)
    return 0;
  result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v4 + 7), 5, 0, 0);
  if (!(_DWORD)result)
    return result;
  v6 = *((_QWORD *)a2 + 1);
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".symbol";
  v57 = 7;
  v7 = sub_1C4FE31DC(v6, &v55);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v7)
    return 0;
  result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v7 + 7), 5, 0, 0);
  if (!(_DWORD)result)
    return result;
  v8 = *((_QWORD *)a2 + 1);
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".language";
  v57 = 9;
  v9 = sub_1C4FE31DC(v8, &v55);
  v10 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v10 + 8) != v9)
  {
    result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v9 + 7), 5, (uint64_t (*)(_QWORD, _QWORD))sub_1C4FD4F00, (uint64_t)&v54);
    if (!(_DWORD)result)
      return result;
    v10 = *((_QWORD *)a2 + 1);
  }
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".language_version";
  v57 = 17;
  v11 = sub_1C4FE31DC(v10, &v55);
  v12 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v12 + 8) != v11)
  {
    if (*(_BYTE *)(v11[7] + 8) != 7)
      return 0;
    v13 = (uint64_t *)v11[8];
    v14 = *v13;
    v15 = v13[1];
    if (v15 - *v13 != 48)
      return 0;
    if (v14 != v15)
    {
      while (1)
      {
        if ((llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v14, 1, 0, 0) & 1) == 0)
        {
          result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v14, 0, 0, 0);
          if (!(_DWORD)result)
            return result;
        }
        v14 += 24;
        if (v14 == v15)
        {
          v12 = *((_QWORD *)a2 + 1);
          break;
        }
      }
    }
  }
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".args";
  v57 = 5;
  v16 = sub_1C4FE31DC(v12, &v55);
  v17 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v17 + 8) != v16)
  {
    if (*(_BYTE *)(v16[7] + 8) != 7)
      return 0;
    v18 = (llvm::msgpack::DocNode **)v16[8];
    v19 = *v18;
    v20 = v18[1];
    if (*v18 != v20)
    {
      while ((llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyKernelArgs(this, v19) & 1) != 0)
      {
        v19 = (llvm::msgpack::DocNode *)((char *)v19 + 24);
        if (v19 == v20)
        {
          v17 = *((_QWORD *)a2 + 1);
          goto LABEL_23;
        }
      }
      return 0;
    }
  }
LABEL_23:
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".reqd_workgroup_size";
  v57 = 20;
  v21 = sub_1C4FE31DC(v17, &v55);
  v22 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v22 + 8) != v21)
  {
    if (*(_BYTE *)(v21[7] + 8) != 7)
      return 0;
    v23 = (uint64_t *)v21[8];
    v24 = *v23;
    v25 = v23[1];
    if (v25 - *v23 != 72)
      return 0;
    if (v24 != v25)
    {
      while (1)
      {
        if ((llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v24, 1, 0, 0) & 1) == 0)
        {
          result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v24, 0, 0, 0);
          if (!(_DWORD)result)
            return result;
        }
        v24 += 24;
        if (v24 == v25)
        {
          v22 = *((_QWORD *)a2 + 1);
          break;
        }
      }
    }
  }
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".workgroup_size_hint";
  v57 = 20;
  v26 = sub_1C4FE31DC(v22, &v55);
  v27 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v27 + 8) == v26)
    goto LABEL_39;
  if (*(_BYTE *)(v26[7] + 8) != 7)
    return 0;
  v28 = (uint64_t *)v26[8];
  v29 = *v28;
  v30 = v28[1];
  if (v30 - *v28 != 72)
    return 0;
  if (v29 != v30)
  {
    while (1)
    {
      if ((llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v29, 1, 0, 0) & 1) == 0)
      {
        result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, v29, 0, 0, 0);
        if (!(_DWORD)result)
          return result;
      }
      v29 += 24;
      if (v29 == v30)
      {
        v27 = *((_QWORD *)a2 + 1);
        break;
      }
    }
  }
LABEL_39:
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".vec_type_hint";
  v57 = 14;
  v31 = sub_1C4FE31DC(v27, &v55);
  v32 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v32 + 8) != v31)
  {
    result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v31 + 7), 5, 0, 0);
    if (!(_DWORD)result)
      return result;
    v32 = *((_QWORD *)a2 + 1);
  }
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".device_enqueue_symbol";
  v57 = 22;
  v33 = sub_1C4FE31DC(v32, &v55);
  v34 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v34 + 8) != v33)
  {
    result = llvm::AMDGPU::HSAMD::V3::MetadataVerifier::verifyScalar(this, (uint64_t)(v33 + 7), 5, 0, 0);
    if (!(_DWORD)result)
      return result;
    v34 = *((_QWORD *)a2 + 1);
  }
  v54 = this;
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".kernarg_segment_size";
  v57 = 21;
  v35 = sub_1C4FE31DC(v34, &v55);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v35)
    return 0;
  result = sub_1C4FD42D4(&v54, (uint64_t)(v35 + 7));
  if (!(_DWORD)result)
    return result;
  v54 = this;
  v36 = *((_QWORD *)a2 + 1);
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".group_segment_fixed_size";
  v57 = 25;
  v37 = sub_1C4FE31DC(v36, &v55);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v37)
    return 0;
  result = sub_1C4FD42D4(&v54, (uint64_t)(v37 + 7));
  if (!(_DWORD)result)
    return result;
  v54 = this;
  v38 = *((_QWORD *)a2 + 1);
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".private_segment_fixed_size";
  v57 = 27;
  v39 = sub_1C4FE31DC(v38, &v55);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v39)
    return 0;
  result = sub_1C4FD42D4(&v54, (uint64_t)(v39 + 7));
  if (!(_DWORD)result)
    return result;
  v54 = this;
  v40 = *((_QWORD *)a2 + 1);
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".kernarg_segment_align";
  v57 = 22;
  v41 = sub_1C4FE31DC(v40, &v55);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v41)
    return 0;
  result = sub_1C4FD42D4(&v54, (uint64_t)(v41 + 7));
  if (!(_DWORD)result)
    return result;
  v54 = this;
  v42 = *((_QWORD *)a2 + 1);
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".wavefront_size";
  v57 = 15;
  v43 = sub_1C4FE31DC(v42, &v55);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v43)
    return 0;
  result = sub_1C4FD42D4(&v54, (uint64_t)(v43 + 7));
  if (!(_DWORD)result)
    return result;
  v54 = this;
  v44 = *((_QWORD *)a2 + 1);
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".sgpr_count";
  v57 = 11;
  v45 = sub_1C4FE31DC(v44, &v55);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v45)
    return 0;
  result = sub_1C4FD42D4(&v54, (uint64_t)(v45 + 7));
  if (!(_DWORD)result)
    return result;
  v54 = this;
  v46 = *((_QWORD *)a2 + 1);
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".vgpr_count";
  v57 = 11;
  v47 = sub_1C4FE31DC(v46, &v55);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v47)
    return 0;
  result = sub_1C4FD42D4(&v54, (uint64_t)(v47 + 7));
  if (!(_DWORD)result)
    return result;
  v54 = this;
  v48 = *((_QWORD *)a2 + 1);
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".max_flat_workgroup_size";
  v57 = 24;
  v49 = sub_1C4FE31DC(v48, &v55);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v49)
    return 0;
  result = sub_1C4FD42D4(&v54, (uint64_t)(v49 + 7));
  if (!(_DWORD)result)
    return result;
  v54 = this;
  v50 = *((_QWORD *)a2 + 1);
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".sgpr_spill_count";
  v57 = 17;
  v51 = sub_1C4FE31DC(v50, &v55);
  v52 = *((_QWORD *)a2 + 1);
  if ((_QWORD *)(v52 + 8) != v51)
  {
    result = sub_1C4FD42D4(&v54, (uint64_t)(v51 + 7));
    if (!(_DWORD)result)
      return result;
    v52 = *((_QWORD *)a2 + 1);
  }
  v54 = this;
  v55 = **(_QWORD **)a2 + 176;
  v56 = ".vgpr_spill_count";
  v57 = 17;
  v53 = sub_1C4FE31DC(v52, &v55);
  if ((_QWORD *)(*((_QWORD *)a2 + 1) + 8) == v53)
    return 1;
  else
    return sub_1C4FD42D4(&v54, (uint64_t)(v53 + 7));
}

