BOOL llvm::TargetInstrInfo::fixCommutedOpIndices(llvm::TargetInstrInfo *this, unsigned int *a2, unsigned int *a3, unsigned int a4)
{
  int v4;
  int v5;
  _BOOL4 v8;

  v4 = *(_DWORD *)this;
  v5 = *a2;
  if (*(_DWORD *)this == -1 && v5 == -1)
  {
    *(_DWORD *)this = (_DWORD)a3;
LABEL_20:
    *a2 = a4;
    return 1;
  }
  if (v4 == -1)
  {
    if (v5 != (_DWORD)a3)
    {
      if (v5 == a4)
      {
        *(_DWORD *)this = (_DWORD)a3;
        return 1;
      }
      return 0;
    }
    *(_DWORD *)this = a4;
    return 1;
  }
  if (v5 == -1)
  {
    if (v4 != (_DWORD)a3)
    {
      if (v4 == a4)
      {
        *a2 = a3;
        return 1;
      }
      return 0;
    }
    goto LABEL_20;
  }
  v8 = v4 == a4 && v5 == (_DWORD)a3;
  return v4 == (_DWORD)a3 && v5 == a4 || v8;
}

uint64_t llvm::TargetInstrInfo::isUnpredicatedTerminator(llvm::TargetInstrInfo *this, const llvm::MachineInstr *a2)
{
  uint64_t v2;
  uint64_t v4;
  const llvm::MachineInstr *v7;
  const llvm::MachineInstr *v8;
  const llvm::MachineInstr *v9;
  const llvm::MachineInstr *i;
  uint64_t v11;

  v2 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8);
  if ((*((_WORD *)a2 + 22) & 0xC) == 0 || (*((_WORD *)a2 + 22) & 4) != 0)
  {
    if ((v2 & 0x200) != 0)
    {
      v4 = v2 & 0x400000;
      if ((*(_QWORD *)(*((_QWORD *)a2 + 2) + 8) & 0x500) != 0x400 && v4 != 0)
        return (*(unsigned int (**)(llvm::TargetInstrInfo *))(*(_QWORD *)this + 768))(this) ^ 1;
      return 1;
    }
    return 0;
  }
  if ((v2 & 0x200) == 0)
  {
    v7 = a2;
    while ((*((_WORD *)v7 + 22) & 8) != 0)
    {
      v7 = (const llvm::MachineInstr *)*((_QWORD *)v7 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v7 + 2) + 9) & 2) != 0)
        goto LABEL_17;
    }
    return 0;
  }
LABEL_17:
  if ((v2 & 0x400) != 0)
  {
LABEL_21:
    if ((v2 & 0x100) == 0)
    {
      v9 = a2;
      while ((*((_WORD *)v9 + 22) & 8) != 0)
      {
        v9 = (const llvm::MachineInstr *)*((_QWORD *)v9 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v9 + 2) + 9) & 1) != 0)
          goto LABEL_25;
      }
      return 1;
    }
  }
  else
  {
    v8 = a2;
    while ((*((_WORD *)v8 + 22) & 8) != 0)
    {
      v8 = (const llvm::MachineInstr *)*((_QWORD *)v8 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v8 + 2) + 9) & 4) != 0)
        goto LABEL_21;
    }
  }
LABEL_25:
  for (i = a2; ; i = (const llvm::MachineInstr *)*((_QWORD *)i + 1))
  {
    v11 = *((_QWORD *)i + 2);
    if ((*(_BYTE *)(v11 + 10) & 0x40) == 0 && *(_WORD *)v11 != 20)
      break;
    if ((*((_WORD *)i + 22) & 8) == 0)
      return (*(unsigned int (**)(llvm::TargetInstrInfo *))(*(_QWORD *)this + 768))(this) ^ 1;
  }
  return 1;
}

uint64_t llvm::TargetInstrInfo::PredicateInstruction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a2 + 16);
  if ((*(_WORD *)(a2 + 44) & 0xC) != 0 && (*(_WORD *)(a2 + 44) & 4) == 0)
  {
    v16 = *(_QWORD *)(a2 + 16);
    v17 = a2;
    while ((*(_BYTE *)(v16 + 10) & 0x40) != 0 || *(_WORD *)v16 == 20)
    {
      if ((*(_WORD *)(v17 + 44) & 8) == 0)
        goto LABEL_6;
      v17 = *(_QWORD *)(v17 + 8);
      v16 = *(_QWORD *)(v17 + 16);
    }
  }
  else if ((*(_BYTE *)(v5 + 10) & 0x40) != 0)
  {
LABEL_6:
    v7 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 32 * v7;
      for (i = 2; (*(_BYTE *)(*(_QWORD *)(v5 + 40) + i) & 2) == 0; i += 6)
      {
LABEL_17:
        v8 += 32;
        if (v11 == v8)
          return v9 & 1;
      }
      v13 = *(_QWORD *)(a2 + 32);
      v14 = v13 + v8;
      v15 = *(unsigned __int8 *)(v13 + v8);
      if (v15 == 4)
      {
        *(_QWORD *)(v14 + 16) = *(_QWORD *)(a3 + 32 * v10 + 16);
      }
      else if (v15 == 1)
      {
        *(_QWORD *)(v13 + v8 + 16) = *(_QWORD *)(a3 + 32 * v10 + 16);
      }
      else
      {
        if (*(_BYTE *)(v13 + v8))
        {
LABEL_16:
          ++v10;
          goto LABEL_17;
        }
        llvm::MachineOperand::setReg(v14, *(_DWORD *)(a3 + 32 * v10 + 4));
      }
      v9 = 1;
      goto LABEL_16;
    }
  }
  v9 = 0;
  return v9 & 1;
}

BOOL llvm::TargetInstrInfo::hasStoreToStackSlot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  int *v14;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v20;
  int v21;

  v3 = *(_DWORD *)(a3 + 8);
  v6 = *(_QWORD *)(a2 + 48);
  v4 = (_QWORD *)(a2 + 48);
  v5 = v6;
  if (v6 < 8)
  {
    v7 = 0;
LABEL_18:
    v4 = 0;
    v5 = 0;
    goto LABEL_6;
  }
  if ((v5 & 7) != 0)
  {
    v13 = (v5 & 0xFFFFFFFFFFFFFFF8) != 0 && (v5 & 7) == 3;
    v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if (!v13)
      v7 = 0;
  }
  else
  {
    v7 = (unint64_t)v4;
    v5 &= 0xFFFFFFFFFFFFFFF8;
    *v4 = v5;
    if (!v5)
    {
      v7 = (unint64_t)v4;
      v4 = 0;
      goto LABEL_6;
    }
  }
  if ((v5 & 7) != 0)
  {
    v14 = (int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 7) == 3 && v14 != 0)
    {
      v16 = *v14;
      v4 = v14 + 2;
      v5 = v16;
      goto LABEL_6;
    }
    goto LABEL_18;
  }
  *v4 = v5 & 0xFFFFFFFFFFFFFFF8;
  v5 = 1;
LABEL_6:
  v8 = &v4[v5];
  while ((_QWORD *)v7 != v8)
  {
    v9 = *(_QWORD **)v7;
    if ((*(_WORD *)(*(_QWORD *)v7 + 32) & 2) != 0 && (*v9 & 4) != 0)
    {
      v11 = *v9 & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        if (*(_DWORD *)(v11 + 8) == 4)
        {
          v12 = *(unsigned int *)(a3 + 8);
          if (v12 >= *(unsigned int *)(a3 + 12))
          {
            v21 = v3;
            v20 = a3;
            v18 = *(_QWORD **)v7;
            v19 = v7;
            v17 = v8;
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v12 + 1, 8);
            v8 = v17;
            v9 = v18;
            v7 = v19;
            v3 = v21;
            a3 = v20;
            v12 = *(unsigned int *)(v20 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v12) = v9;
          ++*(_DWORD *)(a3 + 8);
        }
      }
    }
    v7 += 8;
  }
  return *(_DWORD *)(a3 + 8) != v3;
}

uint64_t llvm::TargetInstrInfo::reMaterialize(int a1, uint64_t a2, unint64_t *a3, unsigned int a4, uint64_t a5, llvm::MachineInstr *a6, _QWORD *a7)
{
  llvm::MachineFunction *v13;
  unint64_t v14;
  llvm::MachineInstr *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;

  v13 = *(llvm::MachineFunction **)(a2 + 32);
  v14 = *((_QWORD *)v13 + 28);
  if (v14)
    *((_QWORD *)v13 + 28) = *(_QWORD *)v14;
  else
    v14 = sub_1C484358C((uint64_t)v13 + 128, 72, 3);
  v15 = llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v14, v13, a6);
  llvm::MachineInstr::substituteRegister((uint64_t)v15, *(_DWORD *)(*(_QWORD *)(v14 + 32) + 4), a4, a5, a7);
  v16 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v14 + 24) = v16;
  v17 = *(_QWORD *)(v16 + 32);
  v18 = *(unsigned int *)(v14 + 40);
  if ((_DWORD)v18)
  {
    v21 = *(_QWORD *)(v14 + 32);
    v22 = *(_QWORD *)(v17 + 40);
    v23 = 32 * v18;
    do
    {
      if (!*(_BYTE *)v21)
      {
        v24 = *(unsigned int *)(v21 + 4);
        if ((int)v24 >= 0)
          v25 = (uint64_t *)(*(_QWORD *)(v22 + 272) + 8 * v24);
        else
          v25 = (uint64_t *)(*(_QWORD *)(v22 + 24) + 16 * (v24 & 0x7FFFFFFF) + 8);
        v26 = *v25;
        if (*v25)
        {
          v27 = *(_QWORD *)(v26 + 16);
          *(_QWORD *)(v26 + 16) = v21;
          *(_QWORD *)(v21 + 16) = v27;
          if ((*(_BYTE *)(v21 + 3) & 1) != 0)
          {
            *(_QWORD *)(v21 + 24) = v26;
          }
          else
          {
            *(_QWORD *)(v21 + 24) = 0;
            v25 = (uint64_t *)(v27 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v21 + 16) = v21;
          *(_QWORD *)(v21 + 24) = 0;
        }
        *v25 = v21;
      }
      v21 += 32;
      v23 -= 32;
    }
    while (v23);
  }
  result = *(_QWORD *)(v17 + 728);
  if (result)
    result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)result + 24))(result, v14);
  v20 = *a3 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v14 = v20 | *(_QWORD *)v14 & 7;
  *(_QWORD *)(v14 + 8) = a3;
  *(_QWORD *)(v20 + 8) = v14;
  *a3 = *a3 & 7 | v14;
  return result;
}

const llvm::MachineInstr *llvm::TargetInstrInfo::duplicate(uint64_t a1, uint64_t a2, unint64_t *a3, const llvm::MachineInstr *a4)
{
  return llvm::MachineFunction::cloneMachineInstrBundle(*(llvm::MachineFunction **)(a2 + 32), a2, a3, a4);
}

unint64_t llvm::TargetInstrInfo::foldMemoryOperand(_QWORD *a1, uint64_t a2, __int32 *a3, size_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v13;
  uint64_t v14;
  __int32 *v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int32 *v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  BOOL v28;
  unsigned int v29;
  BOOL v30;
  unsigned int v31;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  uint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  BOOL v43;
  int v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  __int16 v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  int v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  int v72;
  int v73;
  int *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *FixedStack;
  uint64_t v81;
  int v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t LiveSubranges;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 *v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v99;
  uint64_t v102;

  v13 = 0;
  if (a4)
  {
    v14 = 4 * a4;
    v15 = a3;
    do
    {
      v16 = *v15++;
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 32) + 32 * v16 + 3) & 1) != 0)
        v17 = 2;
      else
        v17 = 1;
      v13 |= v17;
      v14 -= 4;
    }
    while (v14);
  }
  v99 = *(_QWORD *)(a2 + 24);
  v18 = *(_QWORD *)(v99 + 32);
  v19 = *(_QWORD *)(v18 + 56);
  v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v18 + 16) + 176))(*(_QWORD *)(v18 + 16));
  v21 = v20;
  if ((v13 & 2) != 0)
  {
    v22 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 40 * (*(_DWORD *)(v19 + 32) + a5) + 8);
  }
  else
  {
    v22 = 0;
    if (a4)
    {
      v23 = 4 * a4;
      v24 = a3;
      do
      {
        v25 = ((unint64_t)*(unsigned int *)(*(_QWORD *)(a2 + 32) + 32 * *v24) >> 8) & 0xFFF;
        v26 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 40 * (*(_DWORD *)(v19 + 32) + a5) + 8);
        if ((_DWORD)v25)
        {
          v27 = *(unsigned __int16 *)(*(_QWORD *)(v20 + 96) + 4 * v25 + 2);
          v28 = (_DWORD)v27 && (v27 & 7) == 0;
          v26 = *(_QWORD *)(*(_QWORD *)(v19 + 8) + 40 * (*(_DWORD *)(v19 + 32) + a5) + 8);
          if (v28)
            v26 = v27 >> 3;
        }
        if (v22 <= v26)
          v22 = v26;
        ++v24;
        v23 -= 4;
      }
      while (v23);
    }
  }
  v29 = **(unsigned __int16 **)(a2 + 16);
  v30 = v29 > 0x1F;
  v31 = (1 << v29) & 0x8A000000;
  if (!v30 && v31 != 0)
  {
    v33 = sub_1C52B2D84(v18, a2, a3, a4, a5, a1);
    if (!v33)
    {
LABEL_27:
      v34 = 0;
      if (a4 != 1)
        return v34;
      if (**(_WORD **)(a2 + 16) != 19 || *(_DWORD *)(a2 + 40) != 2)
        return v34;
      v36 = *a3;
      v37 = *(_QWORD *)(a2 + 32);
      if ((*(_DWORD *)(v37 + 32 * v36) & 0xFFF00) != 0)
        return 0;
      v38 = (_DWORD *)(v37 + 32 * (1 - v36));
      if ((*v38 & 0xFFF00) != 0)
        return 0;
      v44 = *(_DWORD *)(v37 + 32 * v36 + 4);
      v45 = v38[1];
      v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 40);
      v47 = v44 & 0x7FFFFFFF;
      v48 = *(_QWORD *)(v46 + 24);
      v49 = (_QWORD *)(*(_QWORD *)(v48 + 16 * v47) & 0xFFFFFFFFFFFFFFF8);
      if ((v45 - 1) > 0x3FFFFFFE)
      {
        v58 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(v48 + 16 * (v45 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) + 24);
        if (((*(_DWORD *)(v49[1] + ((v58 >> 3) & 0x1FFCLL)) >> v58) & 1) == 0)
          return 0;
      }
      else if (v38[1] >> 3 >= *(unsigned __int16 *)(*v49 + 22)
             || ((*(unsigned __int8 *)(*(_QWORD *)(*v49 + 8) + (v45 >> 3)) >> (v45 & 7)) & 1) == 0)
      {
        return 0;
      }
      v59 = *(_WORD *)(a2 + 44);
      v60 = a2;
      if ((v59 & 4) != 0)
      {
        v60 = a2;
        do
          v60 = *(_QWORD *)v60 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v60 + 44) & 4) != 0);
      }
      v61 = *(_QWORD *)(a6 + 288);
      v62 = a2;
      if ((v59 & 8) != 0)
      {
        v62 = a2;
        do
          v62 = *(_QWORD *)(v62 + 8);
        while ((*(_WORD *)(v62 + 44) & 8) != 0);
      }
      v63 = *(_QWORD *)(v62 + 8);
      if (v60 != v63)
      {
        while (1)
        {
          v64 = **(unsigned __int16 **)(v60 + 16);
          v30 = v64 > 0x17;
          v65 = (1 << v64) & 0x83E000;
          if (v30 || v65 == 0)
            break;
          v60 = *(_QWORD *)(v60 + 8);
          if (v60 == v63)
          {
            v60 = *(_QWORD *)(v62 + 8);
            break;
          }
        }
      }
      v67 = *(_QWORD *)(v61 + 368);
      v68 = *(unsigned int *)(v61 + 384);
      if ((_DWORD)v68)
      {
        LODWORD(v69) = ((v60 >> 4) ^ (v60 >> 9)) & (v68 - 1);
        v70 = (uint64_t *)(v67 + 16 * v69);
        v71 = *v70;
        if (v60 == *v70)
          goto LABEL_88;
        v72 = 1;
        while (v71 != -4096)
        {
          v73 = v69 + v72++;
          v69 = v73 & (v68 - 1);
          v71 = *(_QWORD *)(v67 + 16 * v69);
          if (v60 == v71)
          {
            v70 = (uint64_t *)(v67 + 16 * v69);
            goto LABEL_88;
          }
        }
      }
      v70 = (uint64_t *)(v67 + 16 * v68);
LABEL_88:
      v102 = v70[1];
      LiveSubranges = -1;
      if (a8 && (v45 & 0x80000000) != 0)
      {
        LiveSubranges = llvm::LiveIntervals::getLiveSubranges(a6, a8, v46, &v102);
        LODWORD(v45) = v38[1];
      }
      if (v13 == 2)
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD *, uint64_t, uint64_t))(*a1 + 456))(a1, v99, a2, v45, (*v38 >> 26) & ~HIBYTE(*v38) & 1, a5, v49, v21, LiveSubranges);
      else
        (*(void (**)(_QWORD *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD *, uint64_t, uint64_t))(*a1 + 472))(a1, v99, a2, v45, a5, v49, v21, LiveSubranges);
      v34 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (!v34 || (*(_BYTE *)v34 & 4) == 0)
      {
        while ((*(_WORD *)(v34 + 44) & 4) != 0)
          v34 = *(_QWORD *)v34 & 0xFFFFFFFFFFFFFFF8;
      }
      return v34;
    }
    v34 = v33;
    v50 = *(_QWORD *)(v99 + 40);
    *(_QWORD *)(v33 + 24) = v50;
    v51 = *(_QWORD *)(v50 + 32);
    v52 = *(unsigned int *)(v33 + 40);
    if ((_DWORD)v52)
    {
      v87 = *(_QWORD *)(v33 + 32);
      v88 = *(_QWORD *)(v51 + 40);
      v89 = 32 * v52;
      do
      {
        if (!*(_BYTE *)v87)
        {
          v90 = *(unsigned int *)(v87 + 4);
          if ((int)v90 >= 0)
            v91 = (uint64_t *)(*(_QWORD *)(v88 + 272) + 8 * v90);
          else
            v91 = (uint64_t *)(*(_QWORD *)(v88 + 24) + 16 * (v90 & 0x7FFFFFFF) + 8);
          v92 = *v91;
          if (*v91)
          {
            v93 = *(_QWORD *)(v92 + 16);
            *(_QWORD *)(v92 + 16) = v87;
            *(_QWORD *)(v87 + 16) = v93;
            if ((*(_BYTE *)(v87 + 3) & 1) != 0)
            {
              *(_QWORD *)(v87 + 24) = v92;
            }
            else
            {
              *(_QWORD *)(v87 + 24) = 0;
              v91 = (uint64_t *)(v93 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v87 + 16) = v87;
            *(_QWORD *)(v87 + 24) = 0;
          }
          *v91 = v87;
        }
        v87 += 32;
        v89 -= 32;
      }
      while (v89);
    }
    v53 = *(_QWORD *)(v51 + 728);
    if (v53)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v53 + 24))(v53, v34);
    v54 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v34 = v54 | *(_QWORD *)v34 & 7;
    *(_QWORD *)(v34 + 8) = a2;
    *(_QWORD *)(v54 + 8) = v34;
    *(_QWORD *)a2 = *(_QWORD *)a2 & 7 | v34;
LABEL_55:
    v55 = (unint64_t *)(a2 + 48);
    v56 = *(_QWORD *)(a2 + 48);
    if (v56 >= 8)
    {
      if ((v56 & 7) == 0)
      {
        *v55 = v56 & 0xFFFFFFFFFFFFFFF8;
        v57 = 1;
        goto LABEL_77;
      }
      if ((*(_QWORD *)(a2 + 48) & 7) == 3)
      {
        v74 = (int *)(v56 & 0xFFFFFFFFFFFFFFF8);
        if ((v56 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v75 = *v74;
          v55 = (unint64_t *)(v74 + 2);
          v57 = v75;
          if ((_DWORD)v75)
          {
LABEL_77:
            v76 = *(_QWORD *)(v34 + 48);
            if (v76 >= 8)
            {
              v94 = *(_QWORD *)(v34 + 48) & 7;
              v95 = (unsigned __int8 *)(v76 & 0xFFFFFFFFFFFFFFF8);
              if (v94 == 1 && v95)
              {
                v77 = 0;
                v79 = 0;
                v78 = (uint64_t)v95;
                goto LABEL_80;
              }
              if (v94 != 3 || !v95)
              {
                v78 = 0;
                v79 = 0;
                if (v95)
                  v96 = v94 == 2;
                else
                  v96 = 0;
                if (v96)
                  v77 = (uint64_t)v95;
                else
                  v77 = 0;
                goto LABEL_80;
              }
              v97 = v95[4];
              if (v95[4])
                v78 = *(_QWORD *)&v95[8 * *(int *)v95 + 8];
              else
                v78 = 0;
              if (v95[5])
                v77 = *(_QWORD *)&v95[8 * *(int *)v95 + 8 + 8 * v97];
              else
                v77 = 0;
              if (v95[6])
              {
                v79 = *(_QWORD *)&v95[8 * *(int *)v95 + 8 + 8 * v95[5] + 8 * v97];
                goto LABEL_80;
              }
            }
            else
            {
              v77 = 0;
              v78 = 0;
            }
            v79 = 0;
LABEL_80:
            llvm::MachineInstr::setExtraInfo(v34, v18, v55, v57, v78, v77, v79);
LABEL_82:
            FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v18 + 432), a5);
            v81 = (unint64_t)FixedStack | 4;
            if (FixedStack)
              v82 = *((_DWORD *)FixedStack + 3);
            else
              v82 = 0;
            v83 = *(_BYTE *)(*(_QWORD *)(v19 + 8) + 40 * (*(_DWORD *)(v19 + 32) + a5) + 16);
            v84 = sub_1C484358C(v18 + 128, 80, 3);
            *(_QWORD *)v84 = v81;
            *(_QWORD *)(v84 + 8) = 0;
            v85 = ((unint64_t)(v22 & 0x1FFFFFFF) << 6) | 1;
            *(_DWORD *)(v84 + 16) = v82;
            if (v22 == -1)
              v85 = 0;
            *(_BYTE *)(v84 + 20) = 0;
            *(_QWORD *)(v84 + 24) = v85;
            *(_WORD *)(v84 + 32) = v13;
            *(_BYTE *)(v84 + 34) = v83;
            *(_OWORD *)(v84 + 40) = 0u;
            *(_OWORD *)(v84 + 56) = 0u;
            *(_QWORD *)(v84 + 72) = 0;
            *(_WORD *)(v84 + 36) = 1;
            llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v34, (llvm::MachineFunction *)v18, (llvm::MachineMemOperand *)v84);
            llvm::MachineInstr::cloneInstrSymbols((const llvm::MachineInstr *)v34, (llvm::MachineFunction *)v18, (const llvm::MachineInstr *)a2);
            return v34;
          }
        }
      }
    }
    llvm::MachineInstr::dropMemRefs(v34, (llvm::MachineFunction *)v18);
    goto LABEL_82;
  }
  v40 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, __int32 *, size_t, uint64_t, _QWORD, uint64_t, uint64_t))(*a1 + 592))(a1, v18, a2, a3, a4, a2, a5, a6, a7);
  if (!v40)
    goto LABEL_27;
  v34 = v40;
  v41 = *(_QWORD *)(v40 + 48);
  if (v41 < 8)
    goto LABEL_55;
  if ((v41 & 7) == 0)
  {
    *(_QWORD *)(v40 + 48) = v41 & 0xFFFFFFFFFFFFFFF8;
    return v34;
  }
  v42 = (_DWORD *)(v41 & 0xFFFFFFFFFFFFFFF8);
  v43 = (*(_QWORD *)(v40 + 48) & 7) != 3 || v42 == 0;
  if (v43 || !*v42)
    goto LABEL_55;
  return v34;
}

unint64_t sub_1C52B2D84(uint64_t a1, uint64_t a2, __int32 *a3, size_t a4, int a5, _QWORD *a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int32 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  unsigned int TiedOperandIdx;
  __int32 *v42;
  __int32 *v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  unint64_t v49;
  unsigned int v51;
  uint64_t v54;
  unsigned __int8 *v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;

  v10 = (*(uint64_t (**)(_QWORD *))(*a6 + 496))(a6);
  v11 = HIDWORD(v10);
  v12 = *(unsigned int *)(a2 + 40);
  if (a4)
  {
    v13 = 4 * a4;
    v14 = a3;
    while (1)
    {
      v15 = *v14;
      v16 = v15;
      if (v15 >= v10)
      {
        v16 = v12;
        if (v15 < HIDWORD(v10))
          return 0;
      }
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 32) + 32 * v15 + 2) & 0xF0) != 0)
        return 0;
      ++v14;
      v12 = v16;
      v13 -= 4;
      if (!v13)
        goto LABEL_10;
    }
  }
  else
  {
    LODWORD(v16) = *(_DWORD *)(a2 + 40);
LABEL_10:
    v18 = **(unsigned __int16 **)(a2 + 16);
    v19 = a6[1];
    v20 = *(unsigned __int8 **)(a2 + 56);
    v55 = v20;
    if (v20)
      llvm::MetadataTracking::track((uint64_t)&v55, v20, 2);
    v17 = *(_QWORD *)(a1 + 224);
    if (v17)
      *(_QWORD *)(a1 + 224) = *(_QWORD *)v17;
    else
      v17 = sub_1C484358C(a1 + 128, 72, 3);
    v21 = v19 + 48 * v18;
    v22 = v55;
    v56 = v55;
    if (v55)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v55, v55, (uint64_t)&v56);
      v55 = 0;
      v22 = v56;
    }
    *(_QWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = 0;
    *(_QWORD *)(v17 + 16) = v21;
    *(_QWORD *)(v17 + 56) = v22;
    *(_OWORD *)(v17 + 24) = 0u;
    *(_OWORD *)(v17 + 40) = 0u;
    if (v22)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v56, v22, v17 + 56);
      v56 = 0;
      v21 = *(_QWORD *)(v17 + 16);
    }
    v23 = 0;
    *(_DWORD *)(v17 + 64) = 0;
    v24 = *(_QWORD *)(v21 + 32);
    if (v24)
    {
      v23 = -1;
      do
        ++v23;
      while (*(_WORD *)(v24 + 2 * v23));
    }
    v25 = v23 + *(unsigned __int16 *)(v21 + 2);
    v26 = *(_QWORD *)(v21 + 24);
    if (v26)
    {
      v27 = -1;
      do
        ++v27;
      while (*(_WORD *)(v26 + 2 * v27));
    }
    else
    {
      v27 = 0;
    }
    v28 = v25 + v27;
    if ((_DWORD)v28)
    {
      v29 = 64 - __clz(v28 - 1);
      *(_BYTE *)(v17 + 47) = v29;
      v30 = v29;
      if (*(_DWORD *)(a1 + 240) > v29
        && (v31 = *(_QWORD *)(a1 + 232), (v32 = *(_QWORD **)(v31 + 8 * v30)) != 0))
      {
        *(_QWORD *)(v31 + 8 * v30) = *v32;
      }
      else
      {
        v32 = (_QWORD *)sub_1C484358C(a1 + 128, 32 << v30, 3);
      }
      *(_QWORD *)(v17 + 32) = v32;
      if (v56)
        llvm::MetadataTracking::untrack((uint64_t)&v56, v56);
    }
    if (v55)
      llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
    v33 = 32 * v11;
    if ((_DWORD)v11)
    {
      v34 = 0;
      do
      {
        if (32 * v16 != v34)
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, (llvm::MachineFunction *)a1, (const llvm::MachineOperand *)(*(_QWORD *)(a2 + 32) + v34));
        v34 += 32;
      }
      while (v33 != v34);
    }
    v35 = *(_DWORD *)(a2 + 40);
    if (v35 > v11)
    {
      v51 = v16;
      do
      {
        v36 = *(_QWORD *)(a2 + 32);
        v37 = *(_DWORD *)(v36 + v33);
        v38 = v37 & 0x10000FF;
        v39 = v37 & 0xF00000;
        if (v38)
          v40 = 1;
        else
          v40 = v39 == 0;
        TiedOperandIdx = v35;
        if (!v40)
          TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)a2, v11);
        v42 = wmemchr(a3, v11, a4);
        v43 = &a3[a4];
        if (v42)
          v43 = v42;
        if (a4 == v43 - a3)
        {
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, (llvm::MachineFunction *)a1, (const llvm::MachineOperand *)(v36 + v33));
          if (TiedOperandIdx < v35)
          {
            v44 = (__PAIR64__(TiedOperandIdx, v51) - TiedOperandIdx) >> 32;
            v45 = *(_DWORD *)(v17 + 40);
            v46 = *(_QWORD *)(v17 + 32);
            v47 = (unsigned int *)(v46 + 32 * (v45 - 1));
            v48 = *v47 & 0xFF0FFFFF | (((((v44 << 20) + 0x100000) >> 20) & 0xF) << 20);
            if (v44 > 0xE)
              v48 = *v47 | 0xF00000;
            *v47 = v48;
            if (v45 >= 0xF)
              v45 = 15;
            v49 = 32 * ((__PAIR64__(TiedOperandIdx, v51) - TiedOperandIdx) >> 32);
            *(_DWORD *)(v46 + v49) = *(_DWORD *)(v46 + v49) & 0xFF0FFFFF | (v45 << 20);
          }
        }
        else
        {
          v54 = 0;
          if (((*(uint64_t (**)(_QWORD *, unint64_t, _QWORD, char *, uint64_t *, uint64_t))(*a6 + 136))(a6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24) + 16* (*(_DWORD *)(v36 + v33 + 4) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (*(_DWORD *)(v36 + v33) >> 8) & 0xFFF, (char *)&v54 + 4, &v54, a1) & 1) == 0)llvm::report_fatal_error((llvm *)"cannot spill patchpoint subregister operand", (const char *)1);
          LODWORD(v56) = 1;
          v57 = 0;
          v58 = 1;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, (llvm::MachineFunction *)a1, (const llvm::MachineOperand *)&v56);
          LODWORD(v56) = 1;
          v57 = 0;
          v58 = HIDWORD(v54);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, (llvm::MachineFunction *)a1, (const llvm::MachineOperand *)&v56);
          LODWORD(v56) = 5;
          v57 = 0;
          LODWORD(v58) = a5;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, (llvm::MachineFunction *)a1, (const llvm::MachineOperand *)&v56);
          LODWORD(v56) = 1;
          v57 = 0;
          v58 = v54;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, (llvm::MachineFunction *)a1, (const llvm::MachineOperand *)&v56);
        }
        v11 = (v11 + 1);
        v33 += 32;
      }
      while (v35 != (_DWORD)v11);
    }
  }
  return v17;
}

BOOL llvm::TargetInstrInfo::hasReassociableSibling(llvm::TargetInstrInfo *this, const llvm::MachineInstr *a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t UniqueVRegDef;
  uint64_t v9;
  int v10;
  BOOL v11;

  v6 = *((_QWORD *)a2 + 3);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + 40);
  UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(v7, *(_DWORD *)(*((_QWORD *)a2 + 4) + 36));
  v9 = llvm::MachineRegisterInfo::getUniqueVRegDef(v7, *(_DWORD *)(*((_QWORD *)a2 + 4) + 68));
  v10 = **((unsigned __int16 **)a2 + 2);
  if (**(unsigned __int16 **)(UniqueVRegDef + 16) == v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = **(unsigned __int16 **)(v9 + 16) == v10;
    if (**(unsigned __int16 **)(v9 + 16) == v10)
      UniqueVRegDef = v9;
  }
  *a3 = v11;
  return **(unsigned __int16 **)(UniqueVRegDef + 16) == v10
      && (*(unsigned int (**)(llvm::TargetInstrInfo *, uint64_t))(*(_QWORD *)this + 536))(this, UniqueVRegDef)&& (*(unsigned int (**)(llvm::TargetInstrInfo *, uint64_t, uint64_t))(*(_QWORD *)this + 544))(this, UniqueVRegDef, v6)&& llvm::MachineRegisterInfo::hasOneNonDBGUse(v7, *(_DWORD *)(*(_QWORD *)(UniqueVRegDef + 32) + 4));
}

BOOL llvm::TargetInstrInfo::isReassociationCandidate(llvm::TargetInstrInfo *this, const llvm::MachineInstr *a2, BOOL *a3)
{
  return (*(unsigned int (**)(llvm::TargetInstrInfo *))(*(_QWORD *)this + 536))(this)
      && (*(unsigned int (**)(llvm::TargetInstrInfo *, const llvm::MachineInstr *, _QWORD))(*(_QWORD *)this + 544))(this, a2, *((_QWORD *)a2 + 3))&& llvm::TargetInstrInfo::hasReassociableSibling(this, a2, a3);
}

void *llvm::TargetInstrInfo::reassociateOps(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  _QWORD *v12;
  const llvm::TargetInstrInfo *v13;
  const llvm::TargetRegisterInfo *v14;
  uint64_t RegClassConstraint;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  int v21;
  _DWORD *v22;
  int v23;
  unsigned int IncompleteVirtualRegister;
  uint64_t v25;
  int v26;
  int v27;
  unsigned int v28;
  _DWORD *v29;
  int v30;
  _DWORD *v31;
  int v32;
  BOOL v33;
  unsigned int v34;
  _DWORD *v35;
  _DWORD *v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  unsigned __int8 **v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  llvm::MachineFunction **v46;
  llvm::MachineFunction *v47;
  uint64_t v48;
  uint64_t v49;
  llvm::MachineFunction *v50;
  llvm::MachineFunction **v51;
  llvm::MachineInstr *v52;
  llvm::MachineFunction *v53;
  llvm::MachineFunction *v54;
  void *result;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  _DWORD *v63;
  const llvm::TargetInstrInfo *v64;
  llvm::MachineFunction *v66;
  int v69;
  int v70;
  llvm::MachineFunction *v71[2];
  llvm::MachineFunction *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v11 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  v12 = *(_QWORD **)(v11 + 40);
  v13 = (const llvm::TargetInstrInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 16) + 104))(*(_QWORD *)(v11 + 16));
  v66 = (llvm::MachineFunction *)v11;
  v14 = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v11 + 16) + 176))(*(_QWORD *)(v11 + 16));
  v64 = v13;
  RegClassConstraint = llvm::MachineInstr::getRegClassConstraint((llvm::MachineInstr *)a2, 0, v13, v14);
  v16 = (unsigned int *)((char *)&unk_1C85FB978 + 16 * a4);
  v17 = *(_QWORD *)(a3 + 32);
  v18 = *(_QWORD *)(a2 + 32);
  v19 = (_DWORD *)(v17 + 32 * *v16);
  v20 = v19[1];
  v21 = *(_DWORD *)(v18 + 32 * v16[1] + 4);
  v22 = (_DWORD *)(v17 + 32 * v16[2]);
  v69 = v22[1];
  v63 = (_DWORD *)(v18 + 32 * v16[3]);
  v70 = v63[1];
  v23 = *(_DWORD *)(v18 + 4);
  if (v20 < 0)
    sub_1C51A3F30(v12, v20, *(_QWORD *)(v12[3] + 16 * (v20 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, RegClassConstraint, 0);
  if (v21 < 0)
    sub_1C51A3F30(v12, v21, *(_QWORD *)(v12[3] + 16 * (v21 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, RegClassConstraint, 0);
  if (v69 < 0)
    sub_1C51A3F30(v12, v69, *(_QWORD *)(v12[3] + 16 * (v69 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, RegClassConstraint, 0);
  if (v70 < 0)
    sub_1C51A3F30(v12, v70, *(_QWORD *)(v12[3] + 16 * (v70 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, RegClassConstraint, 0);
  if (v23 < 0)
    sub_1C51A3F30(v12, v23, *(_QWORD *)(v12[3] + 16 * (v23 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, RegClassConstraint, 0);
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister((uint64_t)v12, "", 0);
  *(_QWORD *)(v12[3] + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = RegClassConstraint & 0xFFFFFFFFFFFFFFFBLL;
  v25 = v12[1];
  if (v25)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v25 + 24))(v25, IncompleteVirtualRegister);
  v72 = (llvm::MachineFunction *)IncompleteVirtualRegister;
  v26 = *(_DWORD *)(a7 + 16);
  if (v26)
  {
    v27 = v26 - 1;
    v28 = v27 & (37 * IncompleteVirtualRegister);
    v29 = (_DWORD *)(*(_QWORD *)a7 + 8 * v28);
    v30 = *v29;
    if (IncompleteVirtualRegister == *v29)
      goto LABEL_28;
    v31 = 0;
    v32 = 1;
    while (v30 != -1)
    {
      if (v31)
        v33 = 0;
      else
        v33 = v30 == -2;
      if (v33)
        v31 = v29;
      v34 = v28 + v32++;
      v28 = v34 & v27;
      v29 = (_DWORD *)(*(_QWORD *)a7 + 8 * v28);
      v30 = *v29;
      if (IncompleteVirtualRegister == *v29)
        goto LABEL_28;
    }
    if (v31)
      v35 = v31;
    else
      v35 = v29;
  }
  else
  {
    v35 = 0;
  }
  v36 = sub_1C476C0AC(a7, (uint64_t)&v72, &v72, v35);
  *(_QWORD *)v36 = v72;
LABEL_28:
  v37 = **(unsigned __int16 **)(a2 + 16);
  v62 = (*v19 >> 26) & ~HIBYTE(*v19) & 1;
  v38 = (*v22 >> 26) & ~HIBYTE(*v22) & 1;
  v39 = v20;
  v40 = (*v63 >> 26) & ~HIBYTE(*v63) & 1;
  v41 = (unsigned __int8 **)(a3 + 56);
  v42 = a2;
  v43 = a3;
  v44 = 3 * v37;
  v72 = sub_1C62175DC(v66, v41, *((_QWORD *)v64 + 1) + 48 * v37, IncompleteVirtualRegister);
  v73 = v45;
  v46 = sub_1C47BF4F4(&v72, v69, 8 * v38, 0);
  v47 = sub_1C47BF4F4(v46, v70, 8 * v40, 0)[1];
  *((_WORD *)v47 + 22) = *((_WORD *)v47 + 22) & 0xC | *(_WORD *)(v43 + 44) & 0xFFF3;
  v48 = *((_QWORD *)v64 + 1) + 16 * v44;
  v49 = v43;
  v71[0] = sub_1C62175DC(v66, (unsigned __int8 **)(v42 + 56), v48, v23);
  v71[1] = v50;
  v51 = sub_1C47BF4F4(v71, v39, 8 * v62, 0);
  v52 = v51[1];
  v53 = *v51;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  LODWORD(v72) = 0x4000000;
  HIDWORD(v72) = IncompleteVirtualRegister;
  llvm::MachineInstr::addOperand(v52, v53, (const llvm::MachineOperand *)&v72);
  v54 = v51[1];
  *((_WORD *)v54 + 22) = *((_WORD *)v54 + 22) & 0xC | *(_WORD *)(v42 + 44) & 0xFFF3;
  result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, llvm::MachineFunction *, llvm::MachineFunction *))(*(_QWORD *)a1 + 568))(a1, v42, v49, v47, v54);
  v56 = *(unsigned int *)(a5 + 8);
  if (v56 >= *(_DWORD *)(a5 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v56 + 1, 8);
    LODWORD(v56) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v56) = v47;
  v57 = *(_DWORD *)(a5 + 12);
  v58 = (*(_DWORD *)(a5 + 8) + 1);
  *(_DWORD *)(a5 + 8) = v58;
  if (v58 >= v57)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v58 + 1, 8);
    LODWORD(v58) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v58) = v54;
  ++*(_DWORD *)(a5 + 8);
  v59 = *(unsigned int *)(a6 + 8);
  if (v59 >= *(_DWORD *)(a6 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v59 + 1, 8);
    LODWORD(v59) = *(_DWORD *)(a6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a6 + 8 * v59) = v49;
  v60 = *(_DWORD *)(a6 + 12);
  v61 = (*(_DWORD *)(a6 + 8) + 1);
  *(_DWORD *)(a6 + 8) = v61;
  if (v61 >= v60)
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v61 + 1, 8);
    LODWORD(v61) = *(_DWORD *)(a6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a6 + 8 * v61) = v42;
  ++*(_DWORD *)(a6 + 8);
  return result;
}

void *llvm::TargetInstrInfo::genAlternativeCodeSequence(uint64_t a1, uint64_t a2, signed int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t UniqueVRegDef;

  UniqueVRegDef = llvm::MachineRegisterInfo::getUniqueVRegDef(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 32) + 40), *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * qword_1C85FB9B8[a3] + 4));
  return llvm::TargetInstrInfo::reassociateOps(a1, a2, UniqueVRegDef, a3, a4, a5, a6);
}

uint64_t llvm::TargetInstrInfo::isReallyTriviallyReMaterializableGeneric(llvm::TargetInstrInfo *this, const llvm::MachineInstr *a2, llvm::AAResults *a3)
{
  _DWORD *v4;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  BOOL v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL hasUnmodeledSideEffects;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *i;
  int v22;
  unsigned int v23;
  const llvm::MachineInstr *v24;
  const llvm::MachineInstr *v25;
  const llvm::MachineInstr *v26;
  const llvm::MachineInstr *v27;
  int v28;

  if (!*((_DWORD *)a2 + 10))
    return 0;
  v4 = (_DWORD *)*((_QWORD *)a2 + 4);
  if (*v4)
    return 0;
  v8 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
  v9 = *(_QWORD **)(v8 + 40);
  v10 = v4[1];
  if ((*v4 & 0xFFF00) != 0
    && v10 < 0
    && (llvm::MachineInstr::readsWritesVirtualRegister((uint64_t)a2, v4[1], 0) & 1) != 0)
  {
    return 0;
  }
  v28 = 0;
  if ((*(unsigned int (**)(llvm::TargetInstrInfo *, const llvm::MachineInstr *, int *))(*(_QWORD *)this
                                                                                                  + 64))(this, a2, &v28))
  {
    v11 = *(_QWORD *)(v8 + 56);
    if (!*(_BYTE *)(v11 + 654))
    {
      if (*(_BYTE *)(*(_QWORD *)(v11 + 8) + 40 * (*(_DWORD *)(v11 + 32) + v28) + 17))
        return 1;
    }
  }
  v12 = *((_WORD *)a2 + 22);
  v13 = (v12 & 0xC) == 0 || (v12 & 4) != 0;
  v14 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v15 = *((_QWORD *)v14 + 1);
  if (v13)
  {
    if ((v15 & 0x800000) != 0)
      return 0;
  }
  else
  {
    if ((v15 & 0x800000) != 0)
      return 0;
    v24 = a2;
    result = 0;
    while ((*((_WORD *)v24 + 22) & 8) != 0)
    {
      v24 = (const llvm::MachineInstr *)*((_QWORD *)v24 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v24 + 2) + 10) & 0x80) != 0)
        return result;
    }
  }
  v16 = *v14 - 1;
  if (v16 <= 1 && (*(_BYTE *)(*((_QWORD *)a2 + 4) + 48) & 0x10) != 0)
    return 0;
  if (v13)
  {
    if ((v15 & 0x100000) != 0)
      return 0;
    if ((v15 & 0x200000) == 0)
      goto LABEL_19;
    goto LABEL_55;
  }
  if ((v15 & 0x100000) != 0)
    return 0;
  v25 = a2;
  result = 0;
  while ((*((_WORD *)v25 + 22) & 8) != 0)
  {
    v25 = (const llvm::MachineInstr *)*((_QWORD *)v25 + 1);
    if ((*(_BYTE *)(*((_QWORD *)v25 + 2) + 10) & 0x10) != 0)
      return result;
  }
  if ((v15 & 0x200000) != 0)
  {
LABEL_55:
    if ((*((_WORD *)a2 + 22) & 0x4000) != 0)
      goto LABEL_19;
    return 0;
  }
  v26 = a2;
  while ((*((_WORD *)v26 + 22) & 8) != 0)
  {
    v26 = (const llvm::MachineInstr *)*((_QWORD *)v26 + 1);
    if ((*(_BYTE *)(*((_QWORD *)v26 + 2) + 10) & 0x20) != 0)
      goto LABEL_55;
  }
LABEL_19:
  hasUnmodeledSideEffects = llvm::MachineInstr::hasUnmodeledSideEffects(a2);
  result = 0;
  if (!hasUnmodeledSideEffects && v16 >= 2)
  {
    if (v13)
    {
      if ((v15 & 0x80000) == 0)
        goto LABEL_24;
    }
    else if ((v15 & 0x80000) == 0)
    {
      v27 = a2;
      while ((*((_WORD *)v27 + 22) & 8) != 0)
      {
        v27 = (const llvm::MachineInstr *)*((_QWORD *)v27 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v27 + 2) + 10) & 8) != 0)
          goto LABEL_23;
      }
      goto LABEL_24;
    }
LABEL_23:
    result = llvm::MachineInstr::isDereferenceableInvariantLoad(a2, a3);
    if ((_DWORD)result)
    {
LABEL_24:
      v18 = *((unsigned int *)a2 + 10);
      if ((_DWORD)v18)
      {
        v19 = *((_QWORD *)a2 + 4);
        v20 = 32 * v18;
        for (i = (unsigned int *)(v19 + 4); ; i += 8)
        {
          v22 = *(i - 1);
          if (!(_BYTE)v22)
          {
            v23 = *i;
            if (*i)
            {
              if (v23 >> 30)
              {
                result = 0;
                if ((v22 & 0x1000000) == 0 || v23 != v10)
                  return result;
              }
              else if ((v22 & 0x1000000) != 0 || !llvm::MachineRegisterInfo::isConstantPhysReg(v9, v23))
              {
                return 0;
              }
            }
          }
          v20 -= 32;
          if (!v20)
            return 1;
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t llvm::TargetInstrInfo::getSPAdjust(llvm::TargetInstrInfo *this, const llvm::MachineInstr *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t result;
  int v11;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 3) + 32) + 16);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v6 = *((_DWORD *)this + 16);
  v7 = *((_DWORD *)this + 17);
  v8 = **((unsigned __int16 **)a2 + 2);
  if (v6 != v8 && v7 != v8)
    return 0;
  v11 = *(_DWORD *)(v5 + 8);
  v12 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 16);
  if ((v12 & 0x80000000) != 0)
    result = -(((1 << *(_BYTE *)(v5 + 12)) + -*(_DWORD *)(*((_QWORD *)a2 + 4) + 16) - 1) & -(1 << *(_BYTE *)(v5 + 12)));
  else
    result = ((1 << *(_BYTE *)(v5 + 12)) + v12 - 1) & -(1 << *(_BYTE *)(v5 + 12));
  if (v11 == 1)
  {
    if (v7 == v8)
      return -(int)result;
  }
  else if (v6 == v8)
  {
    return -(int)result;
  }
  return result;
}

BOOL llvm::TargetInstrInfo::isSchedulingBoundary(llvm::TargetInstrInfo *this, const llvm::MachineInstr *a2, const llvm::MachineBasicBlock *a3, const llvm::MachineFunction *a4)
{
  unsigned __int16 *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _BOOL8 result;
  const llvm::MachineInstr *v12;

  v6 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
  v7 = *((_QWORD *)v6 + 1);
  if ((*((_WORD *)a2 + 22) & 0xC) != 0 && (*((_WORD *)a2 + 22) & 4) == 0)
  {
    if ((v7 & 0x200) != 0)
      return 1;
    v12 = a2;
    result = 1;
    while ((*((_WORD *)v12 + 22) & 8) != 0)
    {
      v12 = (const llvm::MachineInstr *)*((_QWORD *)v12 + 1);
      if ((*(_BYTE *)(*((_QWORD *)v12 + 2) + 9) & 2) != 0)
        return result;
    }
  }
  else if ((v7 & 0x200) != 0)
  {
    return 1;
  }
  if (*v6 - 2 >= 5)
  {
    v9 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a4 + 2) + 120))(*((_QWORD *)a4 + 2));
    v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a4 + 2) + 176))(*((_QWORD *)a4 + 2));
    return llvm::MachineInstr::findRegisterDefOperandIdx((uint64_t)a2, *(_DWORD *)(v9 + 88), 0, 1, v10) != -1;
  }
  return 1;
}

BOOL llvm::TargetInstrInfo::usePreRAHazardRecognizer(llvm::TargetInstrInfo *this)
{
  return byte_1ED800470 == 0;
}

uint64_t llvm::TargetInstrInfo::CreateTargetMIHazardRecognizer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = operator new();
  return llvm::ScoreboardHazardRecognizer::ScoreboardHazardRecognizer(v5, a2, a3, (uint64_t)"machine-scheduler");
}

uint64_t llvm::TargetInstrInfo::getMemOperandWithOffset(llvm::TargetInstrInfo *this, const llvm::MachineInstr *a2, const llvm::MachineOperand **a3, uint64_t *a4, BOOL *a5, const llvm::TargetRegisterInfo *a6)
{
  unsigned int v7;
  uint64_t v8;
  _QWORD *v9;
  int v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  v12 = v14;
  v13 = 0x400000000;
  v11 = 0;
  v7 = (*(uint64_t (**)(llvm::TargetInstrInfo *, const llvm::MachineInstr *, void **, uint64_t *, BOOL *, int *, const llvm::TargetRegisterInfo *))(*(_QWORD *)this + 680))(this, a2, &v12, a4, a5, &v11, a6);
  if ((_DWORD)v13 == 1)
    v8 = v7;
  else
    v8 = 0;
  v9 = v12;
  if ((_DWORD)v8 == 1)
    *a3 = *(const llvm::MachineOperand **)v12;
  if (v9 != v14)
    free(v9);
  return v8;
}

uint64_t llvm::TargetInstrInfo::getInstrLatency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  int *v11;
  int *v12;
  int v13;
  unsigned int v14;

  if (!a2)
    return 1;
  v3 = *(_QWORD *)(a2 + 96);
  if (!v3)
    return 1;
  v4 = *(__int16 *)(a3 + 24);
  if ((v4 & 0x80000000) == 0)
    return 1;
  v6 = v3 + 10 * *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 48 * (unsigned __int16)~(_WORD)v4 + 6);
  v7 = *(unsigned __int16 *)(v6 + 2);
  v8 = *(unsigned __int16 *)(v6 + 4);
  if (v7 == v8)
    return 0;
  v9 = 0;
  LODWORD(result) = 0;
  v10 = *(_QWORD *)(a2 + 72);
  v11 = (int *)(v10 + 24 * v8);
  v12 = (int *)(v10 + 24 * v7);
  do
  {
    v13 = *v12;
    v14 = *v12 + v9;
    if (result <= v14)
      result = v14;
    else
      result = result;
    if (v12[4] >= 0)
      v13 = v12[4];
    v9 += v13;
    v12 += 6;
  }
  while (v12 != v11);
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t result;
  unsigned __int16 *v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  int *v13;
  int *v14;
  int v15;
  unsigned int v16;

  if (!a2)
  {
    v8 = *(unsigned __int16 **)(a3 + 16);
    if (*v8 - 1 > 1 || (*(_BYTE *)(*(_QWORD *)(a3 + 32) + 48) & 8) == 0)
    {
      v9 = *((_QWORD *)v8 + 1);
      if ((*(_WORD *)(a3 + 44) & 0xC) != 0 && (*(_WORD *)(a3 + 44) & 4) == 0)
      {
        if ((v9 & 0x80000) == 0)
        {
          while ((*(_WORD *)(a3 + 44) & 8) != 0)
          {
            a3 = *(_QWORD *)(a3 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(a3 + 16) + 10) & 8) != 0)
              return 2;
          }
          return 1;
        }
      }
      else if ((v9 & 0x80000) == 0)
      {
        return 1;
      }
    }
    return 2;
  }
  v3 = *(_QWORD *)(a2 + 96);
  if (!v3)
    return 1;
  v4 = v3 + 10 * *(unsigned __int16 *)(*(_QWORD *)(a3 + 16) + 6);
  v5 = *(unsigned __int16 *)(v4 + 2);
  v6 = *(unsigned __int16 *)(v4 + 4);
  if (v5 == v6)
    return 0;
  v11 = 0;
  LODWORD(result) = 0;
  v12 = *(_QWORD *)(a2 + 72);
  v13 = (int *)(v12 + 24 * v6);
  v14 = (int *)(v12 + 24 * v5);
  do
  {
    v15 = *v14;
    v16 = *v14 + v11;
    if (result <= v16)
      result = v16;
    else
      result = result;
    if (v14[4] >= 0)
      v15 = v14[4];
    v11 += v15;
    v14 += 6;
  }
  while (v14 != v13);
  return result;
}

uint64_t llvm::TargetInstrInfo::defaultDefLatency(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v4;
  int v5;
  uint64_t v8;
  __int16 v9;

  v4 = *(unsigned __int16 **)(a3 + 16);
  v5 = *v4;
  if ((v5 - 9) <= 0x3C && ((1 << (v5 - 9)) & 0x1000000000000605) != 0 || v5 == 0)
    return 0;
  v8 = *((_QWORD *)v4 + 1);
  if ((v8 & 0x10) != 0)
    return 0;
  if ((v5 - 1) <= 1 && (*(_BYTE *)(*(_QWORD *)(a3 + 32) + 48) & 8) != 0)
    return *(unsigned int *)(a2 + 12);
  v9 = *(_WORD *)(a3 + 44);
  if ((v9 & 0xC) != 0 && (v9 & 4) == 0)
  {
    if ((v8 & 0x80000) != 0)
      return *(unsigned int *)(a2 + 12);
    while ((*(_WORD *)(a3 + 44) & 8) != 0)
    {
      a3 = *(_QWORD *)(a3 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(a3 + 16) + 10) & 8) != 0)
        return *(unsigned int *)(a2 + 12);
    }
  }
  else if ((v8 & 0x80000) != 0)
  {
    return *(unsigned int *)(a2 + 12);
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 984))(a1))
    return *(unsigned int *)(a2 + 16);
  else
    return 1;
}

void llvm::TargetInstrInfo::describeLoadedValue(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  const llvm::TargetRegisterInfo *v9;
  llvm::MDNode *Impl;
  uint64_t v11;
  __int128 v12;
  char v13;
  unint64_t v14;
  _DWORD *v15;
  llvm::TargetInstrInfo *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  int v24;
  llvm::MDNode *v25;
  int v26;
  int v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unint64_t *v31;
  uint64_t v32;
  const char *v33;
  unint64_t v34;
  llvm::MDNode *v35;
  __int128 v36;
  const llvm::MachineOperand *v37;
  uint64_t v38;
  unsigned __int8 v39[8];
  char v40;
  uint64_t v41;
  _OWORD *v42;
  char v43;
  BOOL v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[9];

  v48[8] = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 32);
  v9 = (const llvm::TargetRegisterInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 176))(*(_QWORD *)(v8 + 16));
  Impl = llvm::DIExpression::getImpl(***(_QWORD ****)v8, 0, 0, 0, 1);
  v45 = 0;
  if (**(_WORD **)(a2 + 16) == 19)
  {
    v41 = *(_QWORD *)(a2 + 32);
    v11 = v41;
    v42 = (_OWORD *)(v41 + 32);
    v43 = 1;
LABEL_5:
    if (*(_DWORD *)(v11 + 4) != a3)
    {
      v13 = 0;
      *(_BYTE *)a4 = 0;
      goto LABEL_9;
    }
    v12 = v42[1];
    *(_OWORD *)a4 = *v42;
    *(_OWORD *)(a4 + 16) = v12;
    *(_QWORD *)(a4 + 32) = Impl;
LABEL_7:
    v13 = 1;
LABEL_9:
    *(_BYTE *)(a4 + 40) = v13;
    return;
  }
  v44 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 416))(&v41, a1, a2);
  if (v43)
  {
    v11 = v41;
    goto LABEL_5;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 432))(&v38, a1, a2, a3);
  if (v40)
  {
    v24 = v38;
    v25 = llvm::DIExpression::prepend(Impl, 0, *(uint64_t *)v39);
    *(_DWORD *)a4 = 0;
    *(_DWORD *)(a4 + 4) = v24;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    *(_QWORD *)(a4 + 24) = 0;
    *(_QWORD *)(a4 + 32) = v25;
    goto LABEL_7;
  }
  v14 = *(_QWORD *)(a2 + 48);
  if (v14 < 8)
  {
LABEL_30:
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 40) = 0;
    return;
  }
  if ((v14 & 7) != 0)
  {
    if ((*(_QWORD *)(a2 + 48) & 7) != 3)
      goto LABEL_30;
    v15 = (_DWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
    if (!v15 || *v15 != 1)
      goto LABEL_30;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v14 & 0xFFFFFFFFFFFFFFF8;
  }
  v16 = (llvm::TargetInstrInfo *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 16) + 104))(*(_QWORD *)(v8 + 16));
  v17 = *(_QWORD *)(v8 + 56);
  v18 = *(_QWORD *)(a2 + 48);
  if ((v18 & 7) != 0)
  {
    v19 = *(_QWORD **)((v18 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(a2 + 48) = v18 & 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *v19;
  if ((*v19 & 4) == 0)
    goto LABEL_30;
  if ((v20 & 0xFFFFFFFFFFFFFFF8) == 0)
    goto LABEL_30;
  if ((*(unsigned int (**)(unint64_t, uint64_t))(*(_QWORD *)(v20 & 0xFFFFFFFFFFFFFFF8) + 40))(v20 & 0xFFFFFFFFFFFFFFF8, v17))
  {
    goto LABEL_30;
  }
  v37 = 0;
  if ((llvm::TargetInstrInfo::getMemOperandWithOffset(v16, (const llvm::MachineInstr *)a2, &v37, &v45, &v44, v9) & 1) == 0
    || v44)
  {
    goto LABEL_30;
  }
  v21 = *(_QWORD *)(a2 + 16);
  v22 = *(unsigned __int8 *)(v21 + 4);
  if ((*(_BYTE *)(v21 + 8) & 2) == 0 || (v26 = *(_DWORD *)(a2 + 40), v26 == v22))
  {
    v23 = v22;
  }
  else
  {
    v27 = v26 - 1;
    v23 = v22;
    do
    {
      v28 = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v22);
      if ((v28 & 0x10000FF) != 0x1000000)
        break;
      v23 += (v28 & 0x2000000) == 0;
      if (v27 == v22)
        break;
      ++v22;
    }
    while ((v28 & 0x2000000) == 0);
  }
  if (v23 != 1)
    goto LABEL_30;
  v46 = v48;
  v47 = 0x800000000;
  llvm::DIExpression::appendOffset((uint64_t)&v46, v45);
  v29 = v47;
  if (v47 >= HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v47 + 1, 8);
    v29 = v47;
  }
  *((_QWORD *)v46 + v29) = 148;
  v30 = v47 + 1;
  LODWORD(v47) = v47 + 1;
  v32 = v19[3];
  v31 = v19 + 3;
  if ((v32 & 0xFFFFFFFFFFFFFFF9) != 0)
  {
    v34 = (unint64_t)(sub_1C4825F50(v31) + 7) >> 3;
    if ((_DWORD)v33 == 1)
    v30 = v47;
  }
  else
  {
    v34 = -1;
  }
  if (v30 >= HIDWORD(v47))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v30 + 1, 8);
    v30 = v47;
  }
  *((_QWORD *)v46 + v30) = v34;
  LODWORD(v47) = v47 + 1;
  v35 = llvm::DIExpression::prependOpcodes(Impl, (unsigned int *)&v46, 0, 0);
  v36 = *((_OWORD *)v37 + 1);
  *(_OWORD *)a4 = *(_OWORD *)v37;
  *(_OWORD *)(a4 + 16) = v36;
  *(_QWORD *)(a4 + 32) = v35;
  *(_BYTE *)(a4 + 40) = 1;
  if (v46 != v48)
    free(v46);
}

uint64_t llvm::TargetInstrInfo::getRegSequenceInputs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;

  if (**(_WORD **)(a2 + 16) != 18)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 608))(a1);
  v4 = *(_DWORD *)(a2 + 40);
  if (v4 != 1)
  {
    v5 = 1;
    do
    {
      v6 = *(_QWORD *)(a2 + 32);
      v7 = v5;
      v8 = *(_DWORD *)(v6 + 32 * v5);
      if ((v8 & 0x10000000) == 0)
      {
        v9 = *(unsigned int *)(v6 + 32 * v7 + 4);
        v10 = *(_QWORD *)(v6 + 32 * (v7 + 1) + 16);
        v11 = *(unsigned int *)(a4 + 8);
        if (v11 >= *(unsigned int *)(a4 + 12))
        {
          v21 = v4;
          v19 = a4;
          v20 = a2;
          v17 = v10;
          v18 = v7;
          v15 = v9;
          v16 = v8;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v11 + 1, 12);
          v9 = v15;
          v8 = v16;
          LODWORD(v10) = v17;
          LODWORD(v7) = v18;
          v4 = v21;
          a4 = v19;
          a2 = v20;
          LODWORD(v11) = *(_DWORD *)(v19 + 8);
        }
        v12 = v9 | ((unint64_t)((v8 >> 8) & 0xFFF) << 32);
        v13 = *(_QWORD *)a4 + 12 * v11;
        *(_QWORD *)v13 = v12;
        *(_DWORD *)(v13 + 8) = v10;
        ++*(_DWORD *)(a4 + 8);
      }
      v5 = v7 + 2;
    }
    while (v4 != (_DWORD)v7 + 2);
  }
  return 1;
}

void llvm::TargetInstrInfo::createMIROperandComment(llvm::TargetInstrInfo *this@<X0>, const llvm::MachineInstr *a2@<X1>, const llvm::MachineOperand *a3@<X2>, const llvm::TargetRegisterInfo *a4@<X4>, unsigned int a5@<W3>, uint64_t a6@<X8>)
{
  const void **v9;
  const void **v10;
  char v11;
  size_t v12;
  const void *v13;
  char *v14;
  int InlineAsmFlagIdx;
  __int128 v16;
  const void **v17;
  const void **v18;
  void (**v19)(llvm::raw_ostream *__hidden);
  int v20;
  uint64_t v21;
  _BYTE *v22;
  void *__dst;
  char v24;
  uint64_t v25;
  int v26;
  void **v27;
  void *v28[2];
  uint64_t v29;

  if (**((unsigned __int16 **)a2 + 2) - 1 < 2)
  {
    v28[0] = 0;
    v28[1] = 0;
    v29 = 0;
    v20 = 0;
    v24 = 0;
    v25 = 0;
    v19 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v27 = v28;
    v26 = 0;
    v22 = 0;
    __dst = 0;
    v21 = 0;
    if (a5 == 1)
    {
      sub_1C62179B8((uint64_t)&v17, *((_DWORD *)a3 + 4));
      v9 = v17;
      v10 = v18;
      if (v17 != v18)
      {
        v11 = 1;
        do
        {
          v13 = *v9;
          v12 = (size_t)v9[1];
          v14 = (char *)__dst;
          if ((v11 & 1) == 0)
          {
            if (v22 == __dst)
            {
              llvm::raw_ostream::write((llvm::raw_ostream *)&v19, " ", 1uLL);
              v14 = (char *)__dst;
            }
            else
            {
              *(_BYTE *)__dst = 32;
              v14 = (char *)__dst + 1;
              __dst = (char *)__dst + 1;
            }
          }
          if (v12 <= v22 - v14)
          {
            if (v12)
            {
              memcpy(v14, v13, v12);
              __dst = (char *)__dst + v12;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v19, (const char *)v13, v12);
          }
          v11 = 0;
          v9 += 2;
        }
        while (v9 != v10);
        v9 = v17;
      }
      if (v9)
      {
        v18 = v9;
        operator delete(v9);
      }
      if (*((char *)v27 + 23) < 0)
      {
        sub_1C47EBC30((_BYTE *)a6, *v27, (unint64_t)v27[1]);
      }
      else
      {
        v16 = *(_OWORD *)v27;
        *(_QWORD *)(a6 + 16) = v27[2];
        *(_OWORD *)a6 = v16;
      }
    }
    else
    {
      InlineAsmFlagIdx = llvm::MachineInstr::findInlineAsmFlagIdx(a2, a5, 0);
      if ((InlineAsmFlagIdx & 0x80000000) == 0 && InlineAsmFlagIdx == a5)
        __asm { BR              X10 }
      *(_BYTE *)(a6 + 23) = 0;
      *(_BYTE *)a6 = 0;
    }
    v19 = off_1E81A6E70;
    if (v26 == 1 && v21)
      MEMORY[0x1CAA32F9C](v21, 0x1000C8077774924);
    if (SHIBYTE(v29) < 0)
      operator delete(v28[0]);
  }
  else
  {
    *(_BYTE *)(a6 + 23) = 0;
    *(_BYTE *)a6 = 0;
  }
}

uint64_t sub_1C52B4A1C()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  v4 = 1;
  v2 = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable hazard detection during preRA scheduling";
  v1.n128_u64[1] = 48;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED8003F0, "disable-sched-hazard", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8003F0, &dword_1C475E000);
}

void llvm::TargetLoweringBase::InitLibcalls(llvm::TargetLoweringBase *this, const llvm::Triple *a2)
{
  _QWORD *v4;
  int v5;
  unsigned int v6;
  const char *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  _QWORD v12[2];
  _QWORD v13[2];

  v4 = (_QWORD *)((char *)this + 174048);
  *((_QWORD *)this + 21756) = "__ashlhi3";
  *((_QWORD *)this + 21757) = "__ashlsi3";
  *((_QWORD *)this + 21758) = "__ashldi3";
  *((_QWORD *)this + 21759) = "__ashlti3";
  *((_QWORD *)this + 21760) = "__lshrhi3";
  *((_QWORD *)this + 21761) = "__lshrsi3";
  *((_QWORD *)this + 21762) = "__lshrdi3";
  *((_QWORD *)this + 21763) = "__lshrti3";
  *((_QWORD *)this + 21764) = "__ashrhi3";
  *((_QWORD *)this + 21765) = "__ashrsi3";
  *((_QWORD *)this + 21766) = "__ashrdi3";
  *((_QWORD *)this + 21767) = "__ashrti3";
  *((_QWORD *)this + 21768) = "__mulqi3";
  *((_QWORD *)this + 21769) = "__mulhi3";
  *((_QWORD *)this + 21770) = "__mulsi3";
  *((_QWORD *)this + 21771) = "__muldi3";
  *((_QWORD *)this + 21772) = "__multi3";
  *((_QWORD *)this + 21773) = 0;
  *((_QWORD *)this + 21774) = "__mulosi4";
  *((_QWORD *)this + 21775) = "__mulodi4";
  *((_QWORD *)this + 21776) = "__muloti4";
  *((_QWORD *)this + 21777) = "__divqi3";
  *((_QWORD *)this + 21778) = "__divhi3";
  *((_QWORD *)this + 21779) = "__divsi3";
  *((_QWORD *)this + 21780) = "__divdi3";
  *((_QWORD *)this + 21781) = "__divti3";
  *((_QWORD *)this + 21782) = "__divei4";
  *((_QWORD *)this + 21783) = "__udivqi3";
  *((_QWORD *)this + 21784) = "__udivhi3";
  *((_QWORD *)this + 21785) = "__udivsi3";
  *((_QWORD *)this + 21786) = "__udivdi3";
  *((_QWORD *)this + 21787) = "__udivti3";
  *((_QWORD *)this + 21788) = "__udivei4";
  *((_QWORD *)this + 21789) = "__modqi3";
  *((_QWORD *)this + 21790) = "__modhi3";
  *((_QWORD *)this + 21791) = "__modsi3";
  *((_QWORD *)this + 21792) = "__moddi3";
  *((_QWORD *)this + 21793) = "__modti3";
  *((_QWORD *)this + 21794) = "__modei4";
  *((_QWORD *)this + 21795) = "__umodqi3";
  *((_QWORD *)this + 21796) = "__umodhi3";
  *((_QWORD *)this + 21797) = "__umodsi3";
  *((_QWORD *)this + 21798) = "__umoddi3";
  *((_QWORD *)this + 21799) = "__umodti3";
  *((_QWORD *)this + 21800) = "__umodei4";
  *(_OWORD *)((char *)this + 174472) = 0u;
  *(_OWORD *)((char *)this + 174488) = 0u;
  *(_OWORD *)((char *)this + 174440) = 0u;
  *(_OWORD *)((char *)this + 174456) = 0u;
  *(_OWORD *)((char *)this + 174408) = 0u;
  *(_OWORD *)((char *)this + 174424) = 0u;
  *((_QWORD *)this + 21813) = "__negsi2";
  *((_QWORD *)this + 21814) = "__negdi2";
  *((_QWORD *)this + 21815) = "__clzsi2";
  *((_QWORD *)this + 21816) = "__clzdi2";
  *((_QWORD *)this + 21817) = "__clzti2";
  *((_QWORD *)this + 21818) = "__addsf3";
  *((_QWORD *)this + 21819) = "__adddf3";
  *((_QWORD *)this + 21820) = "__addxf3";
  *((_QWORD *)this + 21821) = "__addtf3";
  *((_QWORD *)this + 21822) = "__gcc_qadd";
  *((_QWORD *)this + 21823) = "__subsf3";
  *((_QWORD *)this + 21824) = "__subdf3";
  *((_QWORD *)this + 21825) = "__subxf3";
  *((_QWORD *)this + 21826) = "__subtf3";
  *((_QWORD *)this + 21827) = "__gcc_qsub";
  *((_QWORD *)this + 21828) = "__mulsf3";
  *((_QWORD *)this + 21829) = "__muldf3";
  *((_QWORD *)this + 21830) = "__mulxf3";
  *((_QWORD *)this + 21831) = "__multf3";
  *((_QWORD *)this + 21832) = "__gcc_qmul";
  *((_QWORD *)this + 21833) = "__divsf3";
  *((_QWORD *)this + 21834) = "__divdf3";
  *((_QWORD *)this + 21835) = "__divxf3";
  *((_QWORD *)this + 21836) = "__divtf3";
  *((_QWORD *)this + 21837) = "__gcc_qdiv";
  *((_QWORD *)this + 21838) = "fmodf";
  *((_QWORD *)this + 21839) = "fmod";
  *((_QWORD *)this + 21840) = "fmodl";
  *((_QWORD *)this + 21841) = "fmodl";
  *((_QWORD *)this + 21842) = "fmodl";
  *((_QWORD *)this + 21843) = "fmaf";
  *((_QWORD *)this + 21844) = "fma";
  *((_QWORD *)this + 21845) = "fmal";
  *((_QWORD *)this + 21846) = "fmal";
  *((_QWORD *)this + 21847) = "fmal";
  *((_QWORD *)this + 21848) = "__powisf2";
  *((_QWORD *)this + 21849) = "__powidf2";
  *((_QWORD *)this + 21850) = "__powixf2";
  *((_QWORD *)this + 21851) = "__powitf2";
  *((_QWORD *)this + 21852) = "__powitf2";
  *((_QWORD *)this + 21853) = "sqrtf";
  *((_QWORD *)this + 21854) = "sqrt";
  *((_QWORD *)this + 21855) = "sqrtl";
  *((_QWORD *)this + 21856) = "sqrtl";
  *((_QWORD *)this + 21857) = "sqrtl";
  *((_QWORD *)this + 21858) = "cbrtf";
  *((_QWORD *)this + 21859) = "cbrt";
  *((_QWORD *)this + 21860) = "cbrtl";
  *((_QWORD *)this + 21861) = "cbrtl";
  *((_QWORD *)this + 21862) = "cbrtl";
  *((_QWORD *)this + 21863) = "logf";
  *((_QWORD *)this + 21864) = "log";
  *((_QWORD *)this + 21865) = "logl";
  *((_QWORD *)this + 21866) = "logl";
  *((_QWORD *)this + 21867) = "logl";
  *((_QWORD *)this + 21868) = "__logf_finite";
  *((_QWORD *)this + 21869) = "__log_finite";
  *((_QWORD *)this + 21870) = "__logl_finite";
  *((_QWORD *)this + 21871) = "__logl_finite";
  *((_QWORD *)this + 21872) = "__logl_finite";
  *((_QWORD *)this + 21873) = "log2f";
  *((_QWORD *)this + 21874) = "log2";
  *((_QWORD *)this + 21875) = "log2l";
  *((_QWORD *)this + 21876) = "log2l";
  *((_QWORD *)this + 21877) = "log2l";
  *((_QWORD *)this + 21878) = "__log2f_finite";
  *((_QWORD *)this + 21879) = "__log2_finite";
  *((_QWORD *)this + 21880) = "__log2l_finite";
  *((_QWORD *)this + 21881) = "__log2l_finite";
  *((_QWORD *)this + 21882) = "__log2l_finite";
  *((_QWORD *)this + 21883) = "log10f";
  *((_QWORD *)this + 21884) = "log10";
  *((_QWORD *)this + 21885) = "log10l";
  *((_QWORD *)this + 21886) = "log10l";
  *((_QWORD *)this + 21887) = "log10l";
  *((_QWORD *)this + 21888) = "__log10f_finite";
  *((_QWORD *)this + 21889) = "__log10_finite";
  *((_QWORD *)this + 21890) = "__log10l_finite";
  *((_QWORD *)this + 21891) = "__log10l_finite";
  *((_QWORD *)this + 21892) = "__log10l_finite";
  *((_QWORD *)this + 21893) = "expf";
  *((_QWORD *)this + 21894) = "exp";
  *((_QWORD *)this + 21895) = "expl";
  *((_QWORD *)this + 21896) = "expl";
  *((_QWORD *)this + 21897) = "expl";
  *((_QWORD *)this + 21898) = "__expf_finite";
  *((_QWORD *)this + 21899) = "__exp_finite";
  *((_QWORD *)this + 21900) = "__expl_finite";
  *((_QWORD *)this + 21901) = "__expl_finite";
  *((_QWORD *)this + 21902) = "__expl_finite";
  *((_QWORD *)this + 21903) = "exp2f";
  *((_QWORD *)this + 21904) = "exp2";
  *((_QWORD *)this + 21905) = "exp2l";
  *((_QWORD *)this + 21906) = "exp2l";
  *((_QWORD *)this + 21907) = "exp2l";
  *((_QWORD *)this + 21908) = "__exp2f_finite";
  *((_QWORD *)this + 21909) = "__exp2_finite";
  *((_QWORD *)this + 21910) = "__exp2l_finite";
  *((_QWORD *)this + 21911) = "__exp2l_finite";
  *((_QWORD *)this + 21912) = "__exp2l_finite";
  *((_QWORD *)this + 21913) = "sinf";
  *((_QWORD *)this + 21914) = "sin";
  *((_QWORD *)this + 21915) = "sinl";
  *((_QWORD *)this + 21916) = "sinl";
  *((_QWORD *)this + 21917) = "sinl";
  *((_QWORD *)this + 21918) = "cosf";
  *((_QWORD *)this + 21919) = "cos";
  *((_QWORD *)this + 21920) = "cosl";
  *((_QWORD *)this + 21921) = "cosl";
  *((_QWORD *)this + 21922) = "cosl";
  *((_QWORD *)this + 21929) = 0;
  *(_OWORD *)((char *)this + 175400) = 0u;
  *(_OWORD *)((char *)this + 175416) = 0u;
  *(_OWORD *)((char *)this + 175384) = 0u;
  *((_QWORD *)this + 21930) = "powf";
  *((_QWORD *)this + 21931) = "pow";
  *((_QWORD *)this + 21932) = "powl";
  *((_QWORD *)this + 21933) = "powl";
  *((_QWORD *)this + 21934) = "powl";
  *((_QWORD *)this + 21935) = "__powf_finite";
  *((_QWORD *)this + 21936) = "__pow_finite";
  *((_QWORD *)this + 21937) = "__powl_finite";
  *((_QWORD *)this + 21938) = "__powl_finite";
  *((_QWORD *)this + 21939) = "__powl_finite";
  *((_QWORD *)this + 21940) = "ceilf";
  *((_QWORD *)this + 21941) = "ceil";
  *((_QWORD *)this + 21942) = "ceill";
  *((_QWORD *)this + 21943) = "ceill";
  *((_QWORD *)this + 21944) = "ceill";
  *((_QWORD *)this + 21945) = "truncf";
  *((_QWORD *)this + 21946) = "trunc";
  *((_QWORD *)this + 21947) = "truncl";
  *((_QWORD *)this + 21948) = "truncl";
  *((_QWORD *)this + 21949) = "truncl";
  *((_QWORD *)this + 21950) = "rintf";
  *((_QWORD *)this + 21951) = "rint";
  *((_QWORD *)this + 21952) = "rintl";
  *((_QWORD *)this + 21953) = "rintl";
  *((_QWORD *)this + 21954) = "rintl";
  *((_QWORD *)this + 21955) = "nearbyintf";
  *((_QWORD *)this + 21956) = "nearbyint";
  *((_QWORD *)this + 21957) = "nearbyintl";
  *((_QWORD *)this + 21958) = "nearbyintl";
  *((_QWORD *)this + 21959) = "nearbyintl";
  *((_QWORD *)this + 21960) = "roundf";
  *((_QWORD *)this + 21961) = "round";
  *((_QWORD *)this + 21962) = "roundl";
  *((_QWORD *)this + 21963) = "roundl";
  *((_QWORD *)this + 21964) = "roundl";
  *((_QWORD *)this + 21965) = "roundevenf";
  *((_QWORD *)this + 21966) = "roundeven";
  *((_QWORD *)this + 21967) = "roundevenl";
  *((_QWORD *)this + 21968) = "roundevenl";
  *((_QWORD *)this + 21969) = "roundevenl";
  *((_QWORD *)this + 21970) = "floorf";
  *((_QWORD *)this + 21971) = "floor";
  *((_QWORD *)this + 21972) = "floorl";
  *((_QWORD *)this + 21973) = "floorl";
  *((_QWORD *)this + 21974) = "floorl";
  *((_QWORD *)this + 21975) = "copysignf";
  *((_QWORD *)this + 21976) = "copysign";
  *((_QWORD *)this + 21977) = "copysignl";
  *((_QWORD *)this + 21978) = "copysignl";
  *((_QWORD *)this + 21979) = "copysignl";
  *((_QWORD *)this + 21980) = "fminf";
  *((_QWORD *)this + 21981) = "fmin";
  *((_QWORD *)this + 21982) = "fminl";
  *((_QWORD *)this + 21983) = "fminl";
  *((_QWORD *)this + 21984) = "fminl";
  *((_QWORD *)this + 21985) = "fmaxf";
  *((_QWORD *)this + 21986) = "fmax";
  *((_QWORD *)this + 21987) = "fmaxl";
  *((_QWORD *)this + 21988) = "fmaxl";
  *((_QWORD *)this + 21989) = "fmaxl";
  *((_QWORD *)this + 21990) = "lroundf";
  *((_QWORD *)this + 21991) = "lround";
  *((_QWORD *)this + 21992) = "lroundl";
  *((_QWORD *)this + 21993) = "lroundl";
  *((_QWORD *)this + 21994) = "lroundl";
  *((_QWORD *)this + 21995) = "llroundf";
  *((_QWORD *)this + 21996) = "llround";
  *((_QWORD *)this + 21997) = "llroundl";
  *((_QWORD *)this + 21998) = "llroundl";
  *((_QWORD *)this + 21999) = "llroundl";
  *((_QWORD *)this + 22000) = "lrintf";
  *((_QWORD *)this + 22001) = "lrint";
  *((_QWORD *)this + 22002) = "lrintl";
  *((_QWORD *)this + 22003) = "lrintl";
  *((_QWORD *)this + 22004) = "lrintl";
  *((_QWORD *)this + 22005) = "llrintf";
  *((_QWORD *)this + 22006) = "llrint";
  *((_QWORD *)this + 22007) = "llrintl";
  *((_QWORD *)this + 22008) = "llrintl";
  *((_QWORD *)this + 22009) = "llrintl";
  *((_QWORD *)this + 22010) = "__gcc_stoq";
  *((_QWORD *)this + 22011) = "__gcc_dtoq";
  *((_QWORD *)this + 22012) = "__extendxftf2";
  *((_QWORD *)this + 22013) = "__extenddftf2";
  *((_QWORD *)this + 22014) = "__extendsftf2";
  *((_QWORD *)this + 22015) = "__extendhftf2";
  *((_QWORD *)this + 22016) = "__extendhfxf2";
  *((_QWORD *)this + 22017) = "__extendsfdf2";
  *((_QWORD *)this + 22018) = "__extendhfdf2";
  *((_QWORD *)this + 22019) = "__gnu_h2f_ieee";
  *((_QWORD *)this + 22020) = "__gnu_f2h_ieee";
  *((_QWORD *)this + 22021) = "__truncdfhf2";
  *((_QWORD *)this + 22022) = "__truncxfhf2";
  *((_QWORD *)this + 22023) = "__trunctfhf2";
  *((_QWORD *)this + 22024) = "__trunctfhf2";
  *((_QWORD *)this + 22025) = "__truncdfsf2";
  *((_QWORD *)this + 22026) = "__truncxfsf2";
  *((_QWORD *)this + 22027) = "__trunctfsf2";
  *((_QWORD *)this + 22028) = "__gcc_qtos";
  *((_QWORD *)this + 22029) = "__truncxfdf2";
  *((_QWORD *)this + 22030) = "__trunctfdf2";
  *((_QWORD *)this + 22031) = "__gcc_qtod";
  *((_QWORD *)this + 22032) = "__trunctfxf2";
  *((_QWORD *)this + 22033) = "__fixhfsi";
  *((_QWORD *)this + 22034) = "__fixhfdi";
  *((_QWORD *)this + 22035) = "__fixhfti";
  *((_QWORD *)this + 22036) = "__fixsfsi";
  *((_QWORD *)this + 22037) = "__fixsfdi";
  *((_QWORD *)this + 22038) = "__fixsfti";
  *((_QWORD *)this + 22039) = "__fixdfsi";
  *((_QWORD *)this + 22040) = "__fixdfdi";
  *((_QWORD *)this + 22041) = "__fixdfti";
  *((_QWORD *)this + 22042) = "__fixxfsi";
  *((_QWORD *)this + 22043) = "__fixxfdi";
  *((_QWORD *)this + 22044) = "__fixxfti";
  *((_QWORD *)this + 22045) = "__fixtfsi";
  *((_QWORD *)this + 22046) = "__fixtfdi";
  *((_QWORD *)this + 22047) = "__fixtfti";
  *((_QWORD *)this + 22048) = "__gcc_qtou";
  *((_QWORD *)this + 22049) = "__fixtfdi";
  *((_QWORD *)this + 22050) = "__fixtfti";
  *((_QWORD *)this + 22051) = "__fixunshfsi";
  *((_QWORD *)this + 22052) = "__fixunshfdi";
  *((_QWORD *)this + 22053) = "__fixunshfti";
  *((_QWORD *)this + 22054) = "__fixunssfsi";
  *((_QWORD *)this + 22055) = "__fixunssfdi";
  *((_QWORD *)this + 22056) = "__fixunssfti";
  *((_QWORD *)this + 22057) = "__fixunsdfsi";
  *((_QWORD *)this + 22058) = "__fixunsdfdi";
  *((_QWORD *)this + 22059) = "__fixunsdfti";
  *((_QWORD *)this + 22060) = "__fixunsxfsi";
  *((_QWORD *)this + 22061) = "__fixunsxfdi";
  *((_QWORD *)this + 22062) = "__fixunsxfti";
  *((_QWORD *)this + 22063) = "__fixunstfsi";
  *((_QWORD *)this + 22064) = "__fixunstfdi";
  *((_QWORD *)this + 22065) = "__fixunstfti";
  *((_QWORD *)this + 22066) = "__fixunstfsi";
  *((_QWORD *)this + 22067) = "__fixunstfdi";
  *((_QWORD *)this + 22068) = "__fixunstfti";
  *((_QWORD *)this + 22069) = "__floatsihf";
  *((_QWORD *)this + 22070) = "__floatsisf";
  *((_QWORD *)this + 22071) = "__floatsidf";
  *((_QWORD *)this + 22072) = "__floatsixf";
  *((_QWORD *)this + 22073) = "__floatsitf";
  *((_QWORD *)this + 22074) = "__gcc_itoq";
  *((_QWORD *)this + 22075) = "__floatdihf";
  *((_QWORD *)this + 22076) = "__floatdisf";
  *((_QWORD *)this + 22077) = "__floatdidf";
  *((_QWORD *)this + 22078) = "__floatdixf";
  *((_QWORD *)this + 22079) = "__floatditf";
  *((_QWORD *)this + 22080) = "__floatditf";
  *((_QWORD *)this + 22081) = "__floattihf";
  *((_QWORD *)this + 22082) = "__floattisf";
  *((_QWORD *)this + 22083) = "__floattidf";
  *((_QWORD *)this + 22084) = "__floattixf";
  *((_QWORD *)this + 22085) = "__floattitf";
  *((_QWORD *)this + 22086) = "__floattitf";
  *((_QWORD *)this + 22087) = "__floatunsihf";
  *((_QWORD *)this + 22088) = "__floatunsisf";
  *((_QWORD *)this + 22089) = "__floatunsidf";
  *((_QWORD *)this + 22090) = "__floatunsixf";
  *((_QWORD *)this + 22091) = "__floatunsitf";
  *((_QWORD *)this + 22092) = "__gcc_utoq";
  *((_QWORD *)this + 22093) = "__floatundihf";
  *((_QWORD *)this + 22094) = "__floatundisf";
  *((_QWORD *)this + 22095) = "__floatundidf";
  *((_QWORD *)this + 22096) = "__floatundixf";
  *((_QWORD *)this + 22097) = "__floatunditf";
  *((_QWORD *)this + 22098) = "__floatunditf";
  *((_QWORD *)this + 22099) = "__floatuntihf";
  *((_QWORD *)this + 22100) = "__floatuntisf";
  *((_QWORD *)this + 22101) = "__floatuntidf";
  *((_QWORD *)this + 22102) = "__floatuntixf";
  *((_QWORD *)this + 22103) = "__floatuntitf";
  *((_QWORD *)this + 22104) = "__floatuntitf";
  *((_QWORD *)this + 22105) = "__extendkftf2";
  *((_QWORD *)this + 22106) = "__trunctfkf2";
  *((_QWORD *)this + 22107) = "__eqsf2";
  *((_QWORD *)this + 22108) = "__eqdf2";
  *((_QWORD *)this + 22109) = "__eqtf2";
  *((_QWORD *)this + 22110) = "__gcc_qeq";
  *((_QWORD *)this + 22111) = "__nesf2";
  *((_QWORD *)this + 22112) = "__nedf2";
  *((_QWORD *)this + 22113) = "__netf2";
  *((_QWORD *)this + 22114) = "__gcc_qne";
  *((_QWORD *)this + 22115) = "__gesf2";
  *((_QWORD *)this + 22116) = "__gedf2";
  *((_QWORD *)this + 22117) = "__getf2";
  *((_QWORD *)this + 22118) = "__gcc_qge";
  *((_QWORD *)this + 22119) = "__ltsf2";
  *((_QWORD *)this + 22120) = "__ltdf2";
  *((_QWORD *)this + 22121) = "__lttf2";
  *((_QWORD *)this + 22122) = "__gcc_qlt";
  *((_QWORD *)this + 22123) = "__lesf2";
  *((_QWORD *)this + 22124) = "__ledf2";
  *((_QWORD *)this + 22125) = "__letf2";
  *((_QWORD *)this + 22126) = "__gcc_qle";
  *((_QWORD *)this + 22127) = "__gtsf2";
  *((_QWORD *)this + 22128) = "__gtdf2";
  *((_QWORD *)this + 22129) = "__gttf2";
  *((_QWORD *)this + 22130) = "__gcc_qgt";
  *((_QWORD *)this + 22131) = "__unordsf2";
  *((_QWORD *)this + 22132) = "__unorddf2";
  *((_QWORD *)this + 22133) = "__unordtf2";
  *((_QWORD *)this + 22134) = "__gcc_qunord";
  *((_QWORD *)this + 22135) = "memcpy";
  *((_QWORD *)this + 22136) = "memmove";
  *((_QWORD *)this + 22137) = "memset";
  *((_QWORD *)this + 22138) = 0;
  *((_QWORD *)this + 22139) = "__llvm_memcpy_element_unordered_atomic_1";
  *((_QWORD *)this + 22140) = "__llvm_memcpy_element_unordered_atomic_2";
  *((_QWORD *)this + 22141) = "__llvm_memcpy_element_unordered_atomic_4";
  *((_QWORD *)this + 22142) = "__llvm_memcpy_element_unordered_atomic_8";
  *((_QWORD *)this + 22143) = "__llvm_memcpy_element_unordered_atomic_16";
  *((_QWORD *)this + 22144) = "__llvm_memmove_element_unordered_atomic_1";
  *((_QWORD *)this + 22145) = "__llvm_memmove_element_unordered_atomic_2";
  *((_QWORD *)this + 22146) = "__llvm_memmove_element_unordered_atomic_4";
  *((_QWORD *)this + 22147) = "__llvm_memmove_element_unordered_atomic_8";
  *((_QWORD *)this + 22148) = "__llvm_memmove_element_unordered_atomic_16";
  *((_QWORD *)this + 22149) = "__llvm_memset_element_unordered_atomic_1";
  *((_QWORD *)this + 22150) = "__llvm_memset_element_unordered_atomic_2";
  *((_QWORD *)this + 22151) = "__llvm_memset_element_unordered_atomic_4";
  *((_QWORD *)this + 22152) = "__llvm_memset_element_unordered_atomic_8";
  *((_QWORD *)this + 22153) = "__llvm_memset_element_unordered_atomic_16";
  *((_QWORD *)this + 22154) = "_Unwind_Resume";
  *((_QWORD *)this + 22155) = "__cxa_end_cleanup";
  *((_QWORD *)this + 22156) = "__sync_val_compare_and_swap_1";
  *((_QWORD *)this + 22157) = "__sync_val_compare_and_swap_2";
  *((_QWORD *)this + 22158) = "__sync_val_compare_and_swap_4";
  *((_QWORD *)this + 22159) = "__sync_val_compare_and_swap_8";
  *((_QWORD *)this + 22160) = "__sync_val_compare_and_swap_16";
  *((_QWORD *)this + 22161) = "__sync_lock_test_and_set_1";
  *((_QWORD *)this + 22162) = "__sync_lock_test_and_set_2";
  *((_QWORD *)this + 22163) = "__sync_lock_test_and_set_4";
  *((_QWORD *)this + 22164) = "__sync_lock_test_and_set_8";
  *((_QWORD *)this + 22165) = "__sync_lock_test_and_set_16";
  *((_QWORD *)this + 22166) = "__sync_fetch_and_add_1";
  *((_QWORD *)this + 22167) = "__sync_fetch_and_add_2";
  *((_QWORD *)this + 22168) = "__sync_fetch_and_add_4";
  *((_QWORD *)this + 22169) = "__sync_fetch_and_add_8";
  *((_QWORD *)this + 22170) = "__sync_fetch_and_add_16";
  *((_QWORD *)this + 22171) = "__sync_fetch_and_sub_1";
  *((_QWORD *)this + 22172) = "__sync_fetch_and_sub_2";
  *((_QWORD *)this + 22173) = "__sync_fetch_and_sub_4";
  *((_QWORD *)this + 22174) = "__sync_fetch_and_sub_8";
  *((_QWORD *)this + 22175) = "__sync_fetch_and_sub_16";
  *((_QWORD *)this + 22176) = "__sync_fetch_and_and_1";
  *((_QWORD *)this + 22177) = "__sync_fetch_and_and_2";
  *((_QWORD *)this + 22178) = "__sync_fetch_and_and_4";
  *((_QWORD *)this + 22179) = "__sync_fetch_and_and_8";
  *((_QWORD *)this + 22180) = "__sync_fetch_and_and_16";
  *((_QWORD *)this + 22181) = "__sync_fetch_and_or_1";
  *((_QWORD *)this + 22182) = "__sync_fetch_and_or_2";
  *((_QWORD *)this + 22183) = "__sync_fetch_and_or_4";
  *((_QWORD *)this + 22184) = "__sync_fetch_and_or_8";
  *((_QWORD *)this + 22185) = "__sync_fetch_and_or_16";
  *((_QWORD *)this + 22186) = "__sync_fetch_and_xor_1";
  *((_QWORD *)this + 22187) = "__sync_fetch_and_xor_2";
  *((_QWORD *)this + 22188) = "__sync_fetch_and_xor_4";
  *((_QWORD *)this + 22189) = "__sync_fetch_and_xor_8";
  *((_QWORD *)this + 22190) = "__sync_fetch_and_xor_16";
  *((_QWORD *)this + 22191) = "__sync_fetch_and_nand_1";
  *((_QWORD *)this + 22192) = "__sync_fetch_and_nand_2";
  *((_QWORD *)this + 22193) = "__sync_fetch_and_nand_4";
  *((_QWORD *)this + 22194) = "__sync_fetch_and_nand_8";
  *((_QWORD *)this + 22195) = "__sync_fetch_and_nand_16";
  *((_QWORD *)this + 22196) = "__sync_fetch_and_max_1";
  *((_QWORD *)this + 22197) = "__sync_fetch_and_max_2";
  *((_QWORD *)this + 22198) = "__sync_fetch_and_max_4";
  *((_QWORD *)this + 22199) = "__sync_fetch_and_max_8";
  *((_QWORD *)this + 22200) = "__sync_fetch_and_max_16";
  *((_QWORD *)this + 22201) = "__sync_fetch_and_umax_1";
  *((_QWORD *)this + 22202) = "__sync_fetch_and_umax_2";
  *((_QWORD *)this + 22203) = "__sync_fetch_and_umax_4";
  *((_QWORD *)this + 22204) = "__sync_fetch_and_umax_8";
  *((_QWORD *)this + 22205) = "__sync_fetch_and_umax_16";
  *((_QWORD *)this + 22206) = "__sync_fetch_and_min_1";
  *((_QWORD *)this + 22207) = "__sync_fetch_and_min_2";
  *((_QWORD *)this + 22208) = "__sync_fetch_and_min_4";
  *((_QWORD *)this + 22209) = "__sync_fetch_and_min_8";
  *((_QWORD *)this + 22210) = "__sync_fetch_and_min_16";
  *((_QWORD *)this + 22211) = "__sync_fetch_and_umin_1";
  *((_QWORD *)this + 22212) = "__sync_fetch_and_umin_2";
  *((_QWORD *)this + 22213) = "__sync_fetch_and_umin_4";
  *((_QWORD *)this + 22214) = "__sync_fetch_and_umin_8";
  *((_QWORD *)this + 22215) = "__sync_fetch_and_umin_16";
  *((_QWORD *)this + 22216) = "__atomic_load";
  *((_QWORD *)this + 22217) = "__atomic_load_1";
  *((_QWORD *)this + 22218) = "__atomic_load_2";
  *((_QWORD *)this + 22219) = "__atomic_load_4";
  *((_QWORD *)this + 22220) = "__atomic_load_8";
  *((_QWORD *)this + 22221) = "__atomic_load_16";
  *((_QWORD *)this + 22222) = "__atomic_store";
  *((_QWORD *)this + 22223) = "__atomic_store_1";
  *((_QWORD *)this + 22224) = "__atomic_store_2";
  *((_QWORD *)this + 22225) = "__atomic_store_4";
  *((_QWORD *)this + 22226) = "__atomic_store_8";
  *((_QWORD *)this + 22227) = "__atomic_store_16";
  *((_QWORD *)this + 22228) = "__atomic_exchange";
  *((_QWORD *)this + 22229) = "__atomic_exchange_1";
  *((_QWORD *)this + 22230) = "__atomic_exchange_2";
  *((_QWORD *)this + 22231) = "__atomic_exchange_4";
  *((_QWORD *)this + 22232) = "__atomic_exchange_8";
  *((_QWORD *)this + 22233) = "__atomic_exchange_16";
  *((_QWORD *)this + 22234) = "__atomic_compare_exchange";
  *((_QWORD *)this + 22235) = "__atomic_compare_exchange_1";
  *((_QWORD *)this + 22236) = "__atomic_compare_exchange_2";
  *((_QWORD *)this + 22237) = "__atomic_compare_exchange_4";
  *((_QWORD *)this + 22238) = "__atomic_compare_exchange_8";
  *((_QWORD *)this + 22239) = "__atomic_compare_exchange_16";
  *((_QWORD *)this + 22240) = "__atomic_fetch_add_1";
  *((_QWORD *)this + 22241) = "__atomic_fetch_add_2";
  *((_QWORD *)this + 22242) = "__atomic_fetch_add_4";
  *((_QWORD *)this + 22243) = "__atomic_fetch_add_8";
  *((_QWORD *)this + 22244) = "__atomic_fetch_add_16";
  *((_QWORD *)this + 22245) = "__atomic_fetch_sub_1";
  *((_QWORD *)this + 22246) = "__atomic_fetch_sub_2";
  *((_QWORD *)this + 22247) = "__atomic_fetch_sub_4";
  *((_QWORD *)this + 22248) = "__atomic_fetch_sub_8";
  *((_QWORD *)this + 22249) = "__atomic_fetch_sub_16";
  *((_QWORD *)this + 22250) = "__atomic_fetch_and_1";
  *((_QWORD *)this + 22251) = "__atomic_fetch_and_2";
  *((_QWORD *)this + 22252) = "__atomic_fetch_and_4";
  *((_QWORD *)this + 22253) = "__atomic_fetch_and_8";
  *((_QWORD *)this + 22254) = "__atomic_fetch_and_16";
  *((_QWORD *)this + 22255) = "__atomic_fetch_or_1";
  *((_QWORD *)this + 22256) = "__atomic_fetch_or_2";
  *((_QWORD *)this + 22257) = "__atomic_fetch_or_4";
  *((_QWORD *)this + 22258) = "__atomic_fetch_or_8";
  *((_QWORD *)this + 22259) = "__atomic_fetch_or_16";
  *((_QWORD *)this + 22260) = "__atomic_fetch_xor_1";
  *((_QWORD *)this + 22261) = "__atomic_fetch_xor_2";
  *((_QWORD *)this + 22262) = "__atomic_fetch_xor_4";
  *((_QWORD *)this + 22263) = "__atomic_fetch_xor_8";
  *((_QWORD *)this + 22264) = "__atomic_fetch_xor_16";
  *((_QWORD *)this + 22265) = "__atomic_fetch_nand_1";
  *((_QWORD *)this + 22266) = "__atomic_fetch_nand_2";
  *((_QWORD *)this + 22267) = "__atomic_fetch_nand_4";
  *((_QWORD *)this + 22268) = "__atomic_fetch_nand_8";
  *((_QWORD *)this + 22269) = "__atomic_fetch_nand_16";
  bzero((char *)this + 178160, 0x3C0uLL);
  v4[634] = "__stack_chk_fail";
  v4[635] = "__llvm_deoptimize";
  bzero((char *)this + 181700, 0x9F4uLL);
  v4[637] = 0;
  v4[636] = 0;
  v5 = *((_DWORD *)a2 + 6);
  if ((v5 - 21) <= 3)
  {
    v4[65] = "__addkf3";
    v4[70] = "__subkf3";
    v4[75] = "__mulkf3";
    v4[80] = "__divkf3";
    v4[95] = "__powikf2";
    v4[258] = "__extendsfkf2";
    v4[257] = "__extenddfkf2";
    v4[271] = "__trunckfsf2";
    v4[274] = "__trunckfdf2";
    v4[289] = "__fixkfsi";
    v4[290] = "__fixkfdi";
    v4[291] = "__fixkfti";
    v4[307] = "__fixunskfsi";
    v4[308] = "__fixunskfdi";
    v4[309] = "__fixunskfti";
    v4[317] = "__floatsikf";
    v4[323] = "__floatdikf";
    v4[329] = "__floattikf";
    v4[335] = "__floatunsikf";
    v4[341] = "__floatundikf";
    v4[347] = "__floatuntikf";
    v4[353] = "__eqkf2";
    v4[357] = "__nekf2";
    v4[361] = "__gekf2";
    v4[365] = "__ltkf2";
    v4[369] = "__lekf2";
    v4[373] = "__gtkf2";
    v4[377] = "__unordkf2";
  }
  v6 = *((_DWORD *)a2 + 9);
  if (v6 > 0x21 || ((1 << v6) & 0x3F0000888) == 0)
  {
    v4[263] = "__gnu_h2f_ieee";
    v4[264] = "__gnu_f2h_ieee";
    goto LABEL_18;
  }
  v4[263] = "__extendhfsf2";
  v4[264] = "__truncsfhf2";
  if ((v5 - 41) < 2)
  {
    if ((v6 & 0xFFFFFFF7) == 3 && (llvm::Triple::isMacOSXVersionLT(a2, 0xAu, 6, 0) & 1) == 0)
    {
      v7 = "__bzero";
LABEL_8:
      v4[382] = v7;
    }
  }
  else
  {
    v7 = "bzero";
    if (v5 == 3 || v5 == 5)
      goto LABEL_8;
  }
  if (*((_DWORD *)a2 + 6) == 41)
    goto LABEL_18;
  v8 = *((_DWORD *)a2 + 9);
  if ((v8 & 0xFFFFFFF7) == 3)
  {
    if ((llvm::Triple::isMacOSXVersionLT(a2, 0xAu, 9, 0) & 1) != 0
      || sub_1C5E4EA90(*((_DWORD *)a2 + 6)) != 64)
    {
      goto LABEL_18;
    }
  }
  else if (v8 == 28 || v8 == 7)
  {
    v13[0] = llvm::Triple::getOSVersion(a2);
    v13[1] = v9;
    v12[0] = 7;
    v12[1] = 0;
    if ((sub_1C4F7A4D8(v13, v12) & 1) != 0)
      goto LABEL_18;
  }
  v4[172] = "__sincosf_stret";
  v4[173] = "__sincos_stret";
  if (*((_DWORD *)a2 + 7) == 22)
    *(_QWORD *)((char *)v4 + 8340) = 0x4400000044;
LABEL_18:
  v10 = *((_DWORD *)a2 + 10);
  if ((v10 - 1) < 6)
    goto LABEL_22;
  v11 = *((_DWORD *)a2 + 9);
  if (v11 == 6)
    goto LABEL_22;
  if (v10 == 11)
  {
    if ((sub_1C4F7A460((int *)a2, 9u) & 1) != 0)
    {
LABEL_23:
      v11 = *((_DWORD *)a2 + 9);
      goto LABEL_24;
    }
LABEL_22:
    v4[167] = "sincosf";
    v4[168] = "sincos";
    v4[169] = "sincosl";
    v4[170] = "sincosl";
    v4[171] = "sincosl";
    goto LABEL_23;
  }
LABEL_24:
  if (*((_DWORD *)a2 + 6) == 42 && *((_DWORD *)a2 + 8) == 3 && v11 == 25)
  {
    v4[167] = "sincosf";
    v4[168] = "sincos";
  }
  else if (v11 == 13)
  {
    v4[634] = 0;
  }
}

uint64_t llvm::RTLIB::getFPEXT(char a1, uint64_t a2, char a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  if (a1 == 11)
  {
    if (a3 == 14)
      v5 = 255;
    else
      v5 = 637;
    if (a3 == 13)
      return 257;
    else
      return v5;
  }
  else
  {
    if (a1 == 10)
    {
      LOBYTE(v3) = a3 - 11;
      if ((a3 - 11) < 4u)
      {
        v3 = (char)v3;
        v4 = (unsigned int *)&unk_1C85FBEE0;
        return v4[v3];
      }
    }
    else if (a1 == 9)
    {
      LOBYTE(v3) = a3 - 10;
      if ((a3 - 10) < 4u)
      {
        v3 = (char)v3;
        v4 = (unsigned int *)&unk_1C85FBED0;
        return v4[v3];
      }
    }
    else if (a1 == 12 && a3 == 13)
    {
      return 256;
    }
    return 637;
  }
}

uint64_t llvm::RTLIB::getFPROUND(char a1, uint64_t a2, char a3)
{
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;

  switch(a3)
  {
    case 11:
      v5 = (a1 - 12);
      if (v5 < 3)
        return v5 + 273;
      break;
    case 10:
      v6 = (a1 - 11);
      if (v6 < 4)
        return v6 + 269;
      break;
    case 9:
      v3 = (a1 - 10);
      if (v3 < 5)
        return v3 + 264;
      break;
    default:
      if (a3 == 12 && a1 == 13)
        return 276;
      break;
  }
  return 637;
}

llvm::TargetLoweringBase *llvm::TargetLoweringBase::TargetLoweringBase(llvm::TargetLoweringBase *this, const llvm::TargetMachine *a2)
{
  char *v3;
  _QWORD *v4;
  __int128 v5;
  __int128 v6;

  *(_QWORD *)this = &off_1E814B8C0;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 22) = 0;
  v3 = (char *)this + 184288;
  *(_OWORD *)((char *)this + 1886) = 0u;
  *(_OWORD *)((char *)this + 1902) = 0u;
  v4 = (_QWORD *)((char *)this + 174024);
  *(_OWORD *)((char *)this + 1918) = 0u;
  *(_OWORD *)((char *)this + 1934) = 0u;
  *(_OWORD *)((char *)this + 1950) = 0u;
  *(_OWORD *)((char *)this + 1966) = 0u;
  *(_OWORD *)((char *)this + 1982) = 0u;
  *(_OWORD *)((char *)this + 1998) = 0u;
  *(_OWORD *)((char *)this + 2014) = 0u;
  *(_OWORD *)((char *)this + 2030) = 0u;
  *(_OWORD *)((char *)this + 2046) = 0u;
  *(_DWORD *)((char *)this + 2061) = 0;
  *(_OWORD *)((char *)this + 3683) = 0u;
  *(_OWORD *)((char *)this + 3699) = 0u;
  *(_OWORD *)((char *)this + 3715) = 0u;
  *(_OWORD *)((char *)this + 3731) = 0u;
  *(_OWORD *)((char *)this + 3747) = 0u;
  *(_OWORD *)((char *)this + 3763) = 0u;
  *(_OWORD *)((char *)this + 3779) = 0u;
  *(_OWORD *)((char *)this + 3795) = 0u;
  *(_OWORD *)((char *)this + 3811) = 0u;
  *(_OWORD *)((char *)this + 3827) = 0u;
  *(_OWORD *)((char *)this + 3843) = 0u;
  *(_DWORD *)((char *)this + 3858) = 0;
  *(_DWORD *)((char *)this + 173971) = 0;
  *(_OWORD *)((char *)this + 173940) = 0u;
  *(_OWORD *)((char *)this + 173956) = 0u;
  *(_OWORD *)((char *)this + 173908) = 0u;
  *(_OWORD *)((char *)this + 173924) = 0u;
  *(_OWORD *)((char *)this + 173876) = 0u;
  *(_OWORD *)((char *)this + 173892) = 0u;
  *(_OWORD *)((char *)this + 173844) = 0u;
  *(_OWORD *)((char *)this + 173860) = 0u;
  *(_OWORD *)((char *)this + 173812) = 0u;
  *(_OWORD *)((char *)this + 173828) = 0u;
  *(_OWORD *)((char *)this + 173796) = 0u;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_DWORD *)this + 17) = 0;
  *((_QWORD *)this + 21755) = 0;
  *((_QWORD *)this + 21754) = 0;
  *((_QWORD *)this + 21753) = (char *)this + 174032;
  *((_DWORD *)this + 46067) = 0;
  llvm::TargetLoweringBase::initActions(this);
  *((_OWORD *)this + 11517) = xmmword_1C85FBE70;
  v4[1280] = 4;
  v4[1279] = 0x800000004;
  *((_WORD *)this + 8) = 0;
  *((_BYTE *)this + 48) = byte_1ED800530;
  *(_WORD *)v3 = 0;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 52) = xmmword_1C85FBE80;
  v4[1278] = 0x800000012;
  v3[2] = byte_1ED8008F0;
  *((_QWORD *)this + 9) = 0x40000000000;
  *((_DWORD *)this + 20) = 0;
  *((_BYTE *)this + 84) = 0;
  bzero((char *)this + 174048, 0x13F0uLL);
  llvm::TargetLoweringBase::InitLibcalls(this, (const llvm::Triple *)(*((_QWORD *)this + 1) + 448));
  memset_pattern16((char *)this + 179152, &unk_1C85FBEB0, 0x9F4uLL);
  *(_QWORD *)&v5 = 0x1100000011;
  *((_QWORD *)&v5 + 1) = 0x1100000011;
  *(_OWORD *)((char *)this + 180556) = v5;
  *(_QWORD *)&v5 = 0x1600000016;
  *((_QWORD *)&v5 + 1) = 0x1600000016;
  *(_OWORD *)((char *)this + 180572) = v5;
  *(_QWORD *)&v6 = 0x1300000013;
  *((_QWORD *)&v6 + 1) = 0x1300000013;
  *(_OWORD *)((char *)this + 180588) = v6;
  *(_QWORD *)&v6 = 0x1400000014;
  *((_QWORD *)&v6 + 1) = 0x1400000014;
  *(_OWORD *)((char *)this + 180604) = v6;
  *(_QWORD *)&v6 = 0x1500000015;
  *((_QWORD *)&v6 + 1) = 0x1500000015;
  *(_OWORD *)((char *)this + 180620) = v6;
  *(_QWORD *)&v6 = 0x1200000012;
  *((_QWORD *)&v6 + 1) = 0x1200000012;
  *(_OWORD *)((char *)this + 180636) = v6;
  *(_OWORD *)((char *)this + 180652) = v5;
  return this;
}

int *llvm::TargetLoweringBase::initActions(llvm::TargetLoweringBase *this)
{
  char *v2;
  char *v3;
  uint64_t i;
  int v5;
  char v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  int *result;
  __int128 v11;
  uint64_t v12;
  uint64_t j;
  uint64_t k;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t m;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned __int8 v26;
  unint64_t v27;
  __int128 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 4536;
  v3 = (char *)this + 3862;
  bzero((char *)this + 169796, 0x6FEuLL);
  bzero((char *)this + 171588, 0x8A0uLL);
  bzero((char *)this + 96, 0x598uLL);
  *((_BYTE *)this + 174023) = 0;
  *(_OWORD *)((char *)this + 173991) = 0u;
  *(_OWORD *)((char *)this + 174007) = 0u;
  *(_OWORD *)((char *)this + 173975) = 0u;
  bzero(v3, 0x2882DuLL);
  for (i = 8; i != 15; ++i)
  {
    v26 = i;
    v5 = sub_1C47A8C74(&v26);
    if (v5 > 31)
    {
      switch(v5)
      {
        case 128:
          v6 = 7;
          goto LABEL_5;
        case 32:
          v6 = 5;
          goto LABEL_5;
        case 64:
          v6 = 6;
          goto LABEL_5;
      }
    }
    else
    {
      switch(v5)
      {
        case 16:
          v6 = 4;
LABEL_5:
          v7 = v26;
          *((_BYTE *)this + 390 * v26 + 4156) = 1;
          v27 = ((unint64_t)v7 << 32) | 0x126;
          *(_QWORD *)&v28 = &v27;
          sub_1C6218EFC((uint64_t)this + 174024, 0x126u, v7, (_QWORD **)&v28)[36] = v6;
          continue;
        case 1:
          v6 = 2;
          goto LABEL_5;
        case 8:
          v6 = 3;
          goto LABEL_5;
      }
    }
  }
  v8 = 0;
  v9 = 1;
  result = dword_1C85FBC88;
  *(_QWORD *)&v11 = 0x202020202020202;
  *((_QWORD *)&v11 + 1) = 0x202020202020202;
  do
  {
    v12 = 0;
    *(_QWORD *)((char *)this + 10 * v8 + 169808) = 0x2222222222222222;
    *((_BYTE *)this + 390 * v9 + 4155) = 2;
    do
      *((_BYTE *)this + 390 * v9 + dword_1C85FBBF0[v12++] + 3862) = 2;
    while (v12 != 32);
    for (j = 0; j != 6; ++j)
      *((_BYTE *)this + 390 * v9 + dword_1C85FBC70[j] + 3862) = 2;
    for (k = 0; k != 5; ++k)
      *((_BYTE *)this + 390 * v9 + dword_1C85FBC88[k] + 3862) = 2;
    v15 = 0;
    v28 = xmmword_1C85FBE90;
    do
    {
      *((_BYTE *)this + 390 * v9 + *(unsigned int *)((char *)&v28 + v15) + 3862) = 2;
      v15 += 4;
    }
    while (v15 != 16);
    v16 = 0;
    v28 = xmmword_1C85FBEA0;
    do
    {
      *((_BYTE *)this + 390 * v9 + *(unsigned int *)((char *)&v28 + v16) + 3862) = 2;
      v16 += 4;
    }
    while (v16 != 16);
    v17 = 0;
    v18 = (char *)this + 390 * v9;
    *(_WORD *)(v18 + 4027) = 514;
    *((_DWORD *)v18 + 1012) = 33686018;
    *(_QWORD *)&v28 = 0xF0000000EFLL;
    DWORD2(v28) = 228;
    do
    {
      *((_BYTE *)this + 390 * v9 + *(unsigned int *)((char *)&v28 + v17) + 3862) = 2;
      v17 += 4;
    }
    while (v17 != 12);
    if (v9 - 15 <= 0x9B)
    {
      for (m = 0; m != 6; ++m)
        *((_BYTE *)this + 390 * v9 + dword_1C85FBC9C[m] + 3862) = 2;
    }
    v20 = 0;
    v21 = (char *)this + 390 * v9 + 3862;
    v21[316] = 2;
    *(_OWORD *)(v21 + 101) = v11;
    *(_OWORD *)(v21 + 117) = v11;
    *(_QWORD *)(v21 + 132) = 0x202020202020202;
    do
      *((_BYTE *)this + 390 * v9 + dword_1C85FBCB4[v20++] + 3862) = 2;
    while (v20 != 15);
    *((_BYTE *)this + 390 * v9++ + 4016) = 2;
    ++v8;
  }
  while (v9 != 179);
  v22 = 0;
  v2[3] = 2;
  v2[1946] = 2;
  LODWORD(v28) = 202050057;
  BYTE4(v28) = 13;
  do
    *((_BYTE *)this + 390 * *((unsigned __int8 *)&v28 + v22++) + 3874) = 2;
  while (v22 != 5);
  v23 = 0;
  LOWORD(v28) = 2826;
  BYTE2(v28) = 13;
  do
  {
    v24 = 0;
    v25 = *((unsigned __int8 *)&v28 + v23);
    do
      *((_BYTE *)this + 390 * v25 + dword_1C85FBCF0[v24++] + 3862) = 2;
    while (v24 != 15);
    ++v23;
  }
  while (v23 != 3);
  *(_WORD *)v2 = 514;
  v2[2] = 2;
  return result;
}

uint64_t llvm::TargetLoweringBase::isFreeAddrSpaceCast(llvm::TargetLoweringBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 64))(*((_QWORD *)this + 1));
}

unint64_t llvm::TargetLoweringBase::getTypeConversion@<X0>(unint64_t result@<X0>, llvm::EVT *a2@<X1>, _BOOL8 a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  unsigned int ExtendedSizeInBits;
  const char *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8x8_t v18;
  const char *v19;
  unint64_t v20;
  llvm::LLVMContext *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  unint64_t v27;
  unsigned __int8 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  BOOL v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  unsigned int v46;
  const char *v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  _QWORD v53[2];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _BOOL8 v58;
  uint64_t v59;

  v6 = result;
  v58 = a3;
  v59 = a4;
  if (!a3)
  {
    if ((*(_DWORD *)(a4 + 8) & 0xFE) != 0x12)
    {
      ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v58);
      v14 = ExtendedSizeInBits;
      if (v13 != 1 && (ExtendedSizeInBits & 0xFFFFFFF8) == 0)
        goto LABEL_12;
      if (v13 == 1)
      if (v14 < 8 || (v18 = (uint8x8_t)vcnt_s8((int8x8_t)v14), v18.i16[0] = vaddlv_u8(v18), v18.i32[0] > 1u))
      {
LABEL_12:
        v15 = sub_1C52B70A4((unsigned __int8 *)&v58, a2);
        v17 = v16;
        result = (unint64_t)llvm::TargetLoweringBase::getTypeConversion(&v56, v6, a2, v15, v16);
        if (v56 == 1)
        {
          *(_OWORD *)a5 = v56;
          *(_QWORD *)(a5 + 16) = v57;
        }
        else
        {
          *(_BYTE *)a5 = 1;
          *(_QWORD *)(a5 + 8) = v15;
          *(_QWORD *)(a5 + 16) = v17;
        }
        return result;
      }
      result = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v58);
      v20 = result;
      if ((_DWORD)v19 == 1)
      v21 = (llvm::LLVMContext *)(v20 >> 1);
      if ((int)(v20 >> 1) <= 31)
      {
        switch((_DWORD)v21)
        {
          case 1:
            v22 = 0;
            v23 = 0;
            v24 = 2;
            goto LABEL_25;
          case 0x10:
            v22 = 0;
            v23 = 0;
            v24 = 4;
            goto LABEL_25;
          case 8:
            v22 = 0;
            v23 = 0;
            v24 = 3;
            goto LABEL_25;
        }
      }
      else
      {
        switch((_DWORD)v21)
        {
          case 0x20:
            v22 = 0;
            v23 = 0;
            v24 = 5;
LABEL_25:
            *(_BYTE *)a5 = 2;
            *(_QWORD *)(a5 + 8) = v24 | v22;
            *(_QWORD *)(a5 + 16) = v23;
            return result;
          case 0x40:
            v22 = 0;
            v23 = 0;
            v24 = 6;
            goto LABEL_25;
          case 0x80:
            v22 = 0;
            v23 = 0;
            v24 = 7;
            goto LABEL_25;
        }
      }
      result = llvm::EVT::getExtendedIntegerVT(a2, v21);
      v22 = result & 0xFFFFFFFFFFFFFF00;
      v24 = result;
      goto LABEL_25;
    }
    v26 = sub_1C52B71D4((unsigned __int8 *)&v58);
    v27 = HIDWORD(v26);
    if (v58)
    {
      result = sub_1C47F37A0((unsigned __int8 *)&v58);
      v28 = result;
      v29 = 0;
      v30 = 0;
    }
    else
    {
      result = llvm::EVT::getEVT(*(llvm::EVT **)(v59 + 24), 0, v25);
      v30 = v36;
      v29 = result & 0xFFFFFFFFFFFFFF00;
      v28 = result;
    }
    v31 = v29 | v28;
    *(_QWORD *)&v55 = v31;
    *((_QWORD *)&v55 + 1) = v30;
    if (HIDWORD(v26) != 1 && v26 == 1)
    {
      v32 = 5;
      goto LABEL_31;
    }
    if (v28)
    {
      if ((v28 - 120) >= 0x20u
        && (v28 - 2) >= 6u
        && (v28 - 15) >= 0x3Cu)
      {
        goto LABEL_36;
      }
    }
    else
    {
      if ((*(_DWORD *)(v30 + 8) & 0xFE) == 0x12)
        v38 = *(unsigned __int8 *)(**(_QWORD **)(v30 + 16) + 8);
      else
        v38 = *(_DWORD *)(v30 + 8);
      if (v38 != 13)
      {
LABEL_36:
        v33 = v6 + 173796;
        while ((_BYTE)v55)
        {
          v34 = v26 | ((unint64_t)v26 >> 1) | ((v26 | ((unint64_t)v26 >> 1)) >> 2);
          v35 = v34 | (v34 >> 4) | ((v34 | (v34 >> 4)) >> 8);
          v26 = (v35 | (v35 >> 16)) + 1;
          result = (_DWORD)v27 == 1 ? sub_1C47AC5FC(v55, v26) : sub_1C47AC934(v55, v26);
          if (!(_BYTE)result)
            break;
          if (!*(_BYTE *)(v33 + result))
          {
            *(_BYTE *)a5 = 7;
            *(_BYTE *)(a5 + 8) = result;
            goto LABEL_5;
          }
        }
        v37 = sub_1C52B71D4((unsigned __int8 *)&v58);
        if ((v37 & (v37 - 1)) == 0)
        {
          result = sub_1C52B71D4((unsigned __int8 *)&v58);
          if (result != 0x100000001)
          {
            v44 = v55;
            v45 = sub_1C52B71D4((unsigned __int8 *)&v58);
            result = sub_1C47AC578(a2, v44, *((uint64_t *)&v44 + 1), (llvm::Type *)((v45 >> 1) | ((unint64_t)(HIDWORD(v45) == 1) << 32)));
            goto LABEL_7;
          }
          v32 = 10;
LABEL_31:
          *(_BYTE *)a5 = v32;
          *(_OWORD *)(a5 + 8) = v55;
          return result;
        }
        result = sub_1C62183CC((uint64_t)&v58, a2);
LABEL_56:
        v11 = 7;
        goto LABEL_8;
      }
    }
    v39 = sub_1C52B71D4((unsigned __int8 *)&v58);
    if ((v39 & (v39 - 1)) == 0)
    {
      llvm::TargetLoweringBase::getTypeConversion(&v56, v6, a2, v31, v30);
      if (v56 == 2)
      {
        result = sub_1C52B71D4((unsigned __int8 *)&v58);
        if (HIDWORD(result) == 1)
        {
          *(_OWORD *)(a5 + 8) = v55;
          v41 = 10;
        }
        else
        {
          result = sub_1C52B7018((uint64_t)&v58, a2, v40);
          *(_QWORD *)(a5 + 8) = result;
          *(_QWORD *)(a5 + 16) = v52;
          v41 = 6;
        }
        *(_BYTE *)a5 = v41;
        return result;
      }
      v54 = v55;
      while (1)
      {
        if (v28)
          v46 = sub_1C47A8C74((unsigned __int8 *)&v55);
        else
          v46 = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v55);
        v48 = v46;
        if ((_DWORD)v47 == 1)
        v53[0] = sub_1C4815B1C(a2, (llvm::LLVMContext *)(v48 + 1));
        v53[1] = v49;
        *(_QWORD *)&v55 = sub_1C52B70A4((unsigned __int8 *)v53, a2);
        *((_QWORD *)&v55 + 1) = v50;
        if (!(_BYTE)v55)
        {
          v55 = v54;
          goto LABEL_36;
        }
        v51 = (v26 & 0xFFFFFFFF00000000) == 0x100000000 ? sub_1C47AC5FC(v55, v26) : sub_1C47AC934(v55, v26);
        if (v51 && !*(_BYTE *)(v6 + 173796 + v51))
          break;
        v28 = v55;
      }
      result = sub_1C47AC578(a2, v55, *((uint64_t *)&v55 + 1), (llvm::Type *)v26);
      v11 = 1;
LABEL_8:
      *(_BYTE *)a5 = v11;
      *(_QWORD *)(a5 + 8) = result;
      *(_QWORD *)(a5 + 16) = v10;
      return result;
    }
    v42 = v26 | ((unint64_t)v26 >> 1) | ((v26 | ((unint64_t)v26 >> 1)) >> 2);
    v43 = v42 | (v42 >> 4) | ((v42 | (v42 >> 4)) >> 8);
    result = sub_1C47AC578(a2, v31, v30, (llvm::Type *)((((v43 >> 16) | v43) + 1) | ((unint64_t)(HIDWORD(v26) == 1) << 32)));
    goto LABEL_56;
  }
  LOBYTE(v55) = a3;
  v8 = *(unsigned __int8 *)(result + a3 + 173796);
  if (v8 == 6)
  {
    LOBYTE(v56) = a3;
    *((_QWORD *)&v56 + 1) = 0;
    result = sub_1C52B7018((uint64_t)&v56, a2, a3);
LABEL_7:
    v11 = 6;
    goto LABEL_8;
  }
  if (v8 == 5)
  {
    result = sub_1C47F37A0((unsigned __int8 *)&v55);
    *(_BYTE *)a5 = 5;
    *(_BYTE *)(a5 + 8) = result;
  }
  else
  {
    v9 = *(_BYTE *)(result + a3 + 3683);
    *(_BYTE *)a5 = v8;
    *(_BYTE *)(a5 + 8) = v9;
  }
LABEL_5:
  *(_QWORD *)(a5 + 16) = 0;
  return result;
}

unint64_t sub_1C52B7018(uint64_t a1, llvm::LLVMContext *a2, BOOL a3)
{
  unint64_t EVT;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  if (*(_BYTE *)a1)
  {
    LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)a1);
    v6 = 0;
    v7 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*(_QWORD *)(a1 + 8) + 24), 0, a3);
    v7 = v11;
    v6 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  v8 = v6 | EVT;
  v9 = sub_1C52B71D4((unsigned __int8 *)a1);
  return sub_1C47AC578(a2, v8, v7, (llvm::Type *)((v9 >> 1) | ((unint64_t)(HIDWORD(v9) == 1) << 32)));
}

uint64_t sub_1C52B70A4(unsigned __int8 *a1, llvm::EVT *a2)
{
  unsigned int ExtendedSizeInBits;
  const char *v4;
  llvm::LLVMContext *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t ExtendedIntegerVT;
  unsigned int v10;

  if (*a1)
    ExtendedSizeInBits = sub_1C47A8C74(a1);
  else
    ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)a1);
  if ((_DWORD)v4 == 1)
  {
    v10 = ExtendedSizeInBits;
    ExtendedSizeInBits = v10;
  }
  if (ExtendedSizeInBits < 9)
    return 3;
  v6 = (llvm::LLVMContext *)(1 << -__clz(ExtendedSizeInBits - 1));
  if ((int)v6 <= 31)
  {
    switch((_DWORD)v6)
    {
      case 1:
        v7 = 0;
        v8 = 2;
        return v8 | v7;
      case 0x10:
        v7 = 0;
        v8 = 4;
        return v8 | v7;
      case 8:
        v7 = 0;
        v8 = 3;
        return v8 | v7;
    }
LABEL_21:
    ExtendedIntegerVT = llvm::EVT::getExtendedIntegerVT(a2, v6);
    v7 = ExtendedIntegerVT & 0xFFFFFFFFFFFFFF00;
    v8 = ExtendedIntegerVT;
    return v8 | v7;
  }
  if ((_DWORD)v6 != 32)
  {
    if ((_DWORD)v6 == 64)
    {
      v7 = 0;
      v8 = 6;
      return v8 | v7;
    }
    if ((_DWORD)v6 == 128)
    {
      v7 = 0;
      v8 = 7;
      return v8 | v7;
    }
    goto LABEL_21;
  }
  v7 = 0;
  v8 = 5;
  return v8 | v7;
}

uint64_t sub_1C52B71D4(unsigned __int8 *a1)
{
  unsigned int v2;
  _BOOL4 v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (*a1)
  {
    v2 = sub_1C47F381C(a1);
    v3 = *a1 - 120 < 0x33;
  }
  else
  {
    v4 = *((_QWORD *)a1 + 1);
    v2 = *(_DWORD *)(v4 + 32);
    v3 = *(unsigned __int8 *)(v4 + 8) == 19;
  }
  v5 = !v3;
  v6 = 0x100000000;
  if (v5)
    v6 = 0;
  return v6 | v2;
}

uint64_t llvm::TargetLoweringBase::isLegalRC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned __int8 *v5;
  unsigned int v6;

  v3 = *(unsigned __int8 **)(*(_QWORD *)(a2 + 264)
                           + 24
                           * (*(unsigned __int16 *)(*(_QWORD *)a3 + 24)
                            + *(_DWORD *)(a2 + 272)
                            * ((*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 3))
                           + 16);
  v4 = *v3;
  if (v4 == 1)
    return 0;
  v5 = v3 + 1;
  while (!v4 || !*(_QWORD *)(a1 + 8 * v4 + 96))
  {
    v6 = *v5++;
    v4 = v6;
    if (v6 == 1)
      return 0;
  }
  return 1;
}

llvm::MachineBasicBlock *llvm::TargetLoweringBase::emitPatchPoint(llvm::TargetLoweringBase *this, llvm::MachineInstr *a2, llvm::MachineBasicBlock *a3)
{
  llvm::MachineBasicBlock *v3;
  uint64_t v4;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const llvm::MachineOperand *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  unsigned int TiedOperandIdx;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t *FixedStack;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  llvm::MachineInstr *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;

  v3 = a3;
  v4 = *((unsigned int *)a2 + 10);
  if ((_DWORD)v4)
  {
    v6 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = *(_QWORD *)(*((_QWORD *)a2 + 3) + 32);
    v8 = *(_QWORD *)(v7 + 56);
    v9 = 32 * v4;
    while (*v6 != 5)
    {
      v6 += 32;
      v9 -= 32;
      if (!v9)
        return v3;
    }
    v10 = *((_QWORD *)a2 + 2);
    v11 = (unsigned __int8 *)*((_QWORD *)a2 + 7);
    v50 = v11;
    if (v11)
      llvm::MetadataTracking::track((uint64_t)&v50, v11, 2);
    v12 = *(_QWORD *)(v7 + 224);
    if (v12)
      *(_QWORD *)(v7 + 224) = *(_QWORD *)v12;
    else
      v12 = sub_1C484358C(v7 + 128, 72, 3);
    v47 = v50;
    if (v50)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v50, v50, (uint64_t)&v47);
      v50 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v12, (llvm::MachineFunction *)v7, v10, &v47, 0);
    if (v47)
      llvm::MetadataTracking::untrack((uint64_t)&v47, v47);
    if (v50)
      llvm::MetadataTracking::untrack((uint64_t)&v50, v50);
    llvm::MachineInstr::cloneMemRefs((const llvm::MachineInstr *)v12, (llvm::MachineFunction *)v7, a2);
    if (*((_DWORD *)a2 + 10))
    {
      v13 = 0;
      v14 = 0;
      v46 = v8;
      do
      {
        v15 = (const llvm::MachineOperand *)(*((_QWORD *)a2 + 4) + v13);
        if (*(_DWORD *)v15 == 5)
        {
          v17 = *((_DWORD *)v15 + 4);
          if (*(_BYTE *)(*(_QWORD *)(v8 + 8) + 40 * (*(_DWORD *)(v8 + 32) + v17) + 19))
          {
            LODWORD(v47) = 1;
            v48 = 0;
            v49 = 1;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, (llvm::MachineFunction *)v7, (const llvm::MachineOperand *)&v47);
            v18 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 40 * (*(_DWORD *)(v8 + 32) + v17) + 8);
            LODWORD(v47) = 1;
            v48 = 0;
            v49 = v18;
          }
          else
          {
            LODWORD(v47) = 1;
            v48 = 0;
            v49 = 0;
          }
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, (llvm::MachineFunction *)v7, (const llvm::MachineOperand *)&v47);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, (llvm::MachineFunction *)v7, v15);
          LODWORD(v47) = 1;
          v48 = 0;
          v49 = 0;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, (llvm::MachineFunction *)v7, (const llvm::MachineOperand *)&v47);
          v8 = v46;
          if (**((_WORD **)a2 + 2) != 31)
          {
            FixedStack = llvm::PseudoSourceValueManager::getFixedStack(*(uint64_t ***)(v7 + 432), v17);
            if (FixedStack)
              v25 = *((_DWORD *)FixedStack + 3);
            else
              v25 = 0;
            v26 = (unint64_t)FixedStack | 4;
            v27 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v7 + 40) + 504) + 4);
            v28 = *(_BYTE *)(*(_QWORD *)(v46 + 8) + 40 * (*(_DWORD *)(v46 + 32) + v17) + 16);
            v29 = sub_1C484358C(v7 + 128, 80, 3);
            *(_QWORD *)v29 = v26;
            *(_QWORD *)(v29 + 8) = 0;
            *(_DWORD *)(v29 + 16) = v25;
            *(_BYTE *)(v29 + 20) = 0;
            *(_QWORD *)(v29 + 24) = (8 * v27 + 56) & 0x7FFFFFFC0 | 1;
            *(_WORD *)(v29 + 32) = 1;
            *(_BYTE *)(v29 + 34) = v28;
            *(_OWORD *)(v29 + 40) = 0u;
            *(_OWORD *)(v29 + 56) = 0u;
            *(_QWORD *)(v29 + 72) = 0;
            *(_WORD *)(v29 + 36) = 1;
            llvm::MachineInstr::addMemOperand((llvm::MachineInstr *)v12, (llvm::MachineFunction *)v7, (llvm::MachineMemOperand *)v29);
          }
        }
        else
        {
          if (*(_DWORD *)v15)
            v16 = 1;
          else
            v16 = (*(_DWORD *)v15 & 0xF00000) == 0;
          if (v16)
          {
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, (llvm::MachineFunction *)v7, (const llvm::MachineOperand *)(*((_QWORD *)a2 + 4) + v13));
          }
          else
          {
            TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx(a2, v14);
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v12, (llvm::MachineFunction *)v7, v15);
            if (v14 > TiedOperandIdx)
            {
              v20 = *(_DWORD *)(v12 + 40);
              v21 = *(_QWORD *)(v12 + 32);
              v22 = (unsigned int *)(v21 + 32 * (v20 - 1));
              v23 = *v22 & 0xFF0FFFFF | (((((TiedOperandIdx << 20) + 0x100000) >> 20) & 0xF) << 20);
              if (TiedOperandIdx > 0xE)
                v23 = *v22 | 0xF00000;
              *v22 = v23;
              if (v20 >= 0xF)
                v20 = 15;
              *(_DWORD *)(v21 + 32 * TiedOperandIdx) = *(_DWORD *)(v21 + 32 * TiedOperandIdx) & 0xFF0FFFFF | (v20 << 20);
            }
          }
        }
        ++v14;
        v13 += 32;
      }
      while (v14 < *((unsigned int *)a2 + 10));
    }
    v3 = a3;
    v30 = *((_QWORD *)a3 + 5);
    *(_QWORD *)(v12 + 24) = v30;
    v31 = *(_QWORD *)(v30 + 32);
    v32 = *(unsigned int *)(v12 + 40);
    if ((_DWORD)v32)
    {
      v38 = *(_QWORD *)(v12 + 32);
      v39 = *(_QWORD *)(v31 + 40);
      v40 = 32 * v32;
      do
      {
        if (!*(_BYTE *)v38)
        {
          v41 = *(unsigned int *)(v38 + 4);
          if ((int)v41 >= 0)
            v42 = (uint64_t *)(*(_QWORD *)(v39 + 272) + 8 * v41);
          else
            v42 = (uint64_t *)(*(_QWORD *)(v39 + 24) + 16 * (v41 & 0x7FFFFFFF) + 8);
          v43 = *v42;
          if (*v42)
          {
            v44 = *(_QWORD *)(v43 + 16);
            *(_QWORD *)(v43 + 16) = v38;
            *(_QWORD *)(v38 + 16) = v44;
            if ((*(_BYTE *)(v38 + 3) & 1) != 0)
            {
              *(_QWORD *)(v38 + 24) = v43;
            }
            else
            {
              *(_QWORD *)(v38 + 24) = 0;
              v42 = (uint64_t *)(v44 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v38 + 16) = v38;
            *(_QWORD *)(v38 + 24) = 0;
          }
          *v42 = v38;
        }
        v38 += 32;
        v40 -= 32;
      }
      while (v40);
    }
    v33 = *(_QWORD *)(v31 + 728);
    if (v33)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v33 + 24))(v33, v12);
    v34 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v12 = v34 | *(_QWORD *)v12 & 7;
    *(_QWORD *)(v12 + 8) = a2;
    *(_QWORD *)(v34 + 8) = v12;
    v35 = *(_QWORD *)a2 & 7 | v12;
    *(_QWORD *)a2 = v35;
    v36 = a2;
    if ((v35 & 4) == 0)
    {
      v36 = a2;
      if ((*((_WORD *)a2 + 22) & 8) != 0)
      {
        v36 = a2;
        do
          v36 = (llvm::MachineInstr *)*((_QWORD *)v36 + 1);
        while ((*((_WORD *)v36 + 22) & 8) != 0);
      }
    }
    sub_1C487FE80(*((_QWORD *)a2 + 3) + 40, (uint64_t)a2, *((_QWORD *)v36 + 1));
  }
  return v3;
}

_QWORD *llvm::TargetLoweringBase::findRepresentativeClass(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  _QWORD *v3;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned __int16 *v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _BYTE *i;
  uint64_t v28;
  void *v30[2];
  _BYTE v31[48];
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD **)(a1 + 8 * a3 + 96);
  if (v3)
  {
    v6 = (*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 3;
    v30[0] = v31;
    v30[1] = (void *)0x600000000;
    sub_1C4765AA4((char *)v30, (v6 + 63) >> 6, 0);
    v32 = v6;
    v7 = (_WORD *)v3[2];
    if (*v7)
    {
      v8 = 4 * ((((*(_QWORD *)(a2 + 248) - *(_QWORD *)(a2 + 240)) >> 3) + 31) >> 5);
      v9 = (unsigned int *)(v3[1] + v8);
      v10 = v7 + 1;
      do
      {
        sub_1C4914230((uint64_t)v30, v9, 0xFFFFFFFF);
        v11 = *v10++;
        v9 = (unsigned int *)((char *)v9 + v8);
      }
      while (v11);
      LODWORD(v6) = v32;
    }
    v12 = v30[0];
    if ((_DWORD)v6)
    {
      v13 = 0;
      v14 = ((_DWORD)v6 - 1) & 0xFFFFFFC0;
      v15 = (uint64_t *)v30[0];
      while (1)
      {
        v17 = *v15++;
        v16 = v17;
        v18 = v14 + v13 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v6;
        v19 = v18 & v16;
        if (v19)
          break;
        v13 -= 64;
        if (v14 + v13 == -64)
          goto LABEL_26;
      }
      v20 = __clz(__rbit64(v19));
      if (v20 + 1 != (_DWORD)v13)
      {
        v21 = v20 - v13;
        do
        {
          v22 = *(_QWORD *)(a2 + 240);
          v23 = *(_QWORD **)(v22 + 8 * v21);
          v24 = *(_QWORD *)(a2 + 264);
          v25 = *(_DWORD *)(a2 + 272) * ((unint64_t)(*(_QWORD *)(a2 + 248) - v22) >> 3);
          v26 = v25 + *(unsigned __int16 *)(*v23 + 24);
          if (*(_DWORD *)(v24 + 24 * v26 + 4) >> 3 > *(_DWORD *)(v24
                                                                  + 24
                                                                  * (v25
                                                                   + *(unsigned __int16 *)(*v3 + 24))
                                                                  + 4) >> 3)
          {
            for (i = *(_BYTE **)(v24 + 24 * v26 + 16); ; ++i)
            {
              v28 = *i;
              if (*i)
              {
                if ((_DWORD)v28 == 1)
                  goto LABEL_24;
                if (*(_QWORD *)(a1 + 8 * v28 + 96))
                  break;
              }
            }
            v3 = v23;
          }
LABEL_24:
          v21 = sub_1C476BA0C(v30, v21 + 1, v32, 1u);
        }
        while (v21 != -1);
        v12 = v30[0];
      }
    }
LABEL_26:
    if (v12 != v31)
      free(v12);
  }
  return v3;
}

uint64_t llvm::TargetLoweringBase::computeRegisterProperties(llvm::TargetLoweringBase *this, const llvm::TargetRegisterInfo *a2)
{
  char *v4;
  uint64_t i;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  __int16 v15;
  char v16;
  char v17;
  char v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  unint64_t j;
  unsigned int v25;
  unsigned int v26;
  int v27;
  int8x8_t v28;
  int v29;
  unsigned int v30;
  int v31;
  char v32;
  unsigned int v33;
  int8x8_t v34;
  uint8x8_t v35;
  unsigned int v36;
  int v37;
  _BOOL4 v38;
  unsigned __int8 v39;
  BOOL v40;
  int v41;
  unint64_t v42;
  int v43;
  unsigned __int8 v44;
  char v45;
  unint64_t v46;
  int v47;
  unsigned __int8 v48;
  BOOL v49;
  uint8x8_t v50;
  int v51;
  unsigned __int8 v52;
  char v53;
  unsigned __int8 v54;
  char *v55;
  unsigned __int8 v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  uint8x8_t v60;
  unint64_t v61;
  unint64_t v62;
  int v63;
  int v64;
  uint64_t ExtendedSizeInBits;
  int v66;
  unint64_t v67;
  int v68;
  unint64_t v69;
  int v70;
  unsigned __int8 v71;
  unsigned __int8 v72;
  uint64_t v73;
  unsigned __int8 *v74;
  char *v75;
  char v76;
  char v77;
  char *v78;
  char *v79;
  uint64_t k;
  uint64_t result;
  char v82;
  const llvm::TargetRegisterInfo *v83;
  char *v84;
  int v85;
  unsigned int v86;
  unsigned __int8 v87;
  unsigned __int8 v88;
  unsigned __int8 v89[8];
  uint64_t v90;
  unsigned __int8 v91;
  unsigned __int8 v92;
  unsigned __int8 v93;
  _QWORD v94[2];

  v4 = (char *)this + 173805;
  memset_pattern16((char *)this + 1528, &unk_1C85FBEC0, 0x166uLL);
  for (i = 0; i != 179; ++i)
  {
    v6 = (char *)this + i;
    v6[3683] = i;
    v6[1886] = i;
  }
  *((_WORD *)this + 937) = 0;
  LODWORD(v7) = 7;
  do
  {
    v8 = *((_QWORD *)this + v7 + 12);
    v7 = (v7 - 1);
  }
  while (!v8);
  v9 = (v7 + 2);
  v10 = (v7 + 1);
  if (v9 <= 7)
  {
    v11 = v7 + 1;
    do
    {
      *((_WORD *)this + v9 + 764) = 2 * *((_WORD *)this + v11 + 764);
      v12 = (char *)this + v9;
      v12[1886] = v7 + 1;
      v12[3683] = v11;
      *((_BYTE *)this + v9++ + 173796) = 2;
      ++v11;
    }
    while ((_DWORD)v9 != 8);
  }
  if (v7 >= 2)
  {
    do
    {
      if (!(_BYTE)v7 || (v13 = v7, !*((_QWORD *)this + v7 + 12)))
      {
        v14 = (char *)this + v7;
        v14[3683] = v10;
        v14[1886] = v10;
        *((_BYTE *)this + v7 + 173796) = 1;
        v13 = v10;
      }
      --v7;
      v10 = v13;
    }
    while ((v7 & 0xFFFFFFFE) != 0);
  }
  if (!*((_QWORD *)this + 26))
  {
    if (*((_QWORD *)this + 23))
    {
      v15 = 2 * *((_WORD *)this + 775);
      v16 = 4;
      v17 = 11;
      v18 = 11;
    }
    else
    {
      v15 = *((_WORD *)this + 771);
      v17 = *((_BYTE *)this + 1893);
      v16 = 3;
      v18 = 7;
    }
    *((_WORD *)this + 778) = v15;
    *((_BYTE *)this + 1900) = v17;
    *((_BYTE *)this + 3697) = v18;
    v4[5] = v16;
  }
  if (!*((_QWORD *)this + 25))
  {
    *((_WORD *)this + 777) = *((_WORD *)this + 771);
    *((_BYTE *)this + 1899) = *((_BYTE *)this + 1893);
    *((_BYTE *)this + 3696) = 7;
    v4[4] = 3;
  }
  if (!*((_QWORD *)this + 23))
  {
    *((_WORD *)this + 775) = *((_WORD *)this + 770);
    *((_BYTE *)this + 1897) = *((_BYTE *)this + 1892);
    *((_BYTE *)this + 3694) = 6;
    v4[2] = 3;
  }
  if (!*((_QWORD *)this + 22))
  {
    *((_WORD *)this + 774) = *((_WORD *)this + 769);
    *((_BYTE *)this + 1896) = *((_BYTE *)this + 1891);
    *((_BYTE *)this + 3693) = 5;
    v4[1] = 3;
  }
  v83 = a2;
  if (!*((_QWORD *)this + 21))
  {
    v19 = (*(uint64_t (**)(llvm::TargetLoweringBase *))(*(_QWORD *)this + 128))(this);
    v20 = 1548;
    if (v19)
      v20 = 1536;
    v21 = 1896;
    if (v19)
    {
      v21 = 1890;
      v22 = 9;
    }
    else
    {
      v22 = 8;
    }
    *((_WORD *)this + 773) = *(_WORD *)((char *)this + v20);
    *((_BYTE *)this + 1895) = *((_BYTE *)this + v21);
    *((_BYTE *)this + 3692) = 10;
    *v4 = v22;
  }
  v84 = (char *)this + 173796;
  v23 = 16;
  for (j = 15; j != 171; ++j)
  {
    v88 = j;
    if (*((_QWORD *)this + j + 12))
      goto LABEL_112;
    v87 = sub_1C47F37A0(&v88);
    v25 = sub_1C47F381C(&v88);
    v26 = v88 - 120;
    v27 = (*(uint64_t (**)(llvm::TargetLoweringBase *))(*(_QWORD *)this + 120))(this);
    v29 = v27;
    if ((v27 - 5) >= 2)
    {
      v41 = v27;
      if (v27 != 7)
      {
        v42 = v26 >= 0x33 ? 74 : 151;
        if (j < v42)
        {
          v43 = j;
          while (1)
          {
            v44 = v43++ - 14;
            v89[0] = v43;
            v45 = v43;
            if (v44 <= 0x9Bu)
              v45 = sub_1C47F37A0(v89);
            LOBYTE(v94[0]) = v45;
            v46 = sub_1C47A8C74((unsigned __int8 *)v94);
            if (v46 > sub_1C47A8C74(&v87))
            {
              v47 = sub_1C47F381C(v89);
              v48 = v89[0];
              if (v47 == v25)
              {
                v49 = v26 < 0x33 == (v89[0] + 85) < 0xCDu || v89[0] == 0;
                if (!v49 && *((_QWORD *)this + v89[0] + 12))
                  break;
              }
            }
            if ((_DWORD)v42 == v43)
              goto LABEL_67;
          }
          v78 = (char *)this + j;
          v78[3683] = v89[0];
          v78[1886] = v48;
          v76 = 1;
          *((_WORD *)this + j + 764) = 1;
          v73 = v88;
          v75 = (char *)this + 173796;
          goto LABEL_111;
        }
      }
LABEL_67:
      v28.i32[0] = v25;
      v50 = (uint8x8_t)vcnt_s8(v28);
      v50.i16[0] = vaddlv_u8(v50);
      if (v50.i32[0] == 1)
      {
        v29 = v41;
        if (j <= 0xA9)
        {
          v51 = v23;
          while (1)
          {
            LOBYTE(v94[0]) = v51;
            v52 = sub_1C47F37A0((unsigned __int8 *)v94);
            if (v87 == v52
              && v26 < 0x33 == LOBYTE(v94[0]) - 120 < 0x33
              && sub_1C47F381C((unsigned __int8 *)v94) > v25)
            {
              v53 = v94[0];
              if (LOBYTE(v94[0]))
              {
                if (*((_QWORD *)this + LOBYTE(v94[0]) + 12))
                  break;
              }
            }
            if (++v51 == 171)
              goto LABEL_34;
          }
          v79 = (char *)this + j;
          v79[3683] = v94[0];
          v79[1886] = v53;
          *((_WORD *)this + j + 764) = 1;
          v73 = v88;
          goto LABEL_108;
        }
      }
      else
      {
        v54 = sub_1C52B8130(&v88);
        v29 = v41;
        if (v54 && *((_QWORD *)this + v54 + 12))
        {
          v55 = (char *)this + j;
          v55[3683] = v54;
          v84[v88] = 7;
          v55[1886] = v54;
          *((_WORD *)this + j + 764) = 1;
          goto LABEL_112;
        }
      }
    }
LABEL_34:
    v85 = v29;
    v86 = v25;
    v93 = v88;
    v30 = sub_1C47F381C(&v93);
    v31 = v93;
    v32 = sub_1C47F37A0(&v93);
    v33 = v31 - 120;
    v34.i32[0] = v30;
    v35 = (uint8x8_t)vcnt_s8(v34);
    v35.i16[0] = vaddlv_u8(v35);
    if (v35.i32[0] == 1)
      v36 = v30;
    else
      v36 = 1;
    if (v35.i32[0] == 1)
      v37 = 1;
    else
      v37 = v30;
    v38 = v33 < 0x33 && v35.i32[0] == 1;
    if (v36 >= 2)
    {
      while (1)
      {
        v39 = v38 ? sub_1C47AC5FC(v32, v30) : sub_1C47AC934(v32, v30);
        if (v39 && *((_QWORD *)this + v39 + 12))
          break;
        v36 = v30 >> 1;
        v37 *= 2;
        v40 = v30 > 3;
        v30 >>= 1;
        if (!v40)
          goto LABEL_81;
      }
      v36 = v30;
    }
LABEL_81:
    if (v38)
      v56 = sub_1C47AC5FC(v32, v36);
    else
      v56 = sub_1C47AC934(v32, v36);
    v57 = v86;
    v92 = v56;
    if (!v56 || !*((_QWORD *)this + v56 + 12))
    {
      v92 = v32;
      v56 = v32;
    }
    if ((v56 - 15) <= 0x9Bu)
      v56 = sub_1C47F37A0(&v92);
    LOBYTE(v94[0]) = v56;
    v58 = sub_1C47A8C74((unsigned __int8 *)v94);
    LODWORD(v59) = v58;
    v60 = (uint8x8_t)vcnt_s8((int8x8_t)v58);
    v60.i16[0] = vaddlv_u8(v60);
    if (v60.i32[0] != 1)
    {
      v61 = v58 | ((unint64_t)v58 >> 1) | ((v58 | ((unint64_t)v58 >> 1)) >> 2);
      v62 = v61 | (v61 >> 4) | ((v61 | (v61 >> 4)) >> 8);
      v59 = (v62 | (v62 >> 16)) + 1;
    }
    v63 = v92;
    v64 = *((unsigned __int8 *)this + v92 + 1886);
    v91 = v64;
    v89[0] = v64;
    v90 = 0;
    if (v64 != v92)
    {
      v94[0] = v92;
      v94[1] = 0;
      if (v64)
        ExtendedSizeInBits = sub_1C47A8C74(v89);
      else
        ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v89);
      v67 = ExtendedSizeInBits;
      v68 = v66;
      if (v63)
        v69 = sub_1C47A8C74((unsigned __int8 *)v94);
      else
        v69 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v94);
      if (v68 == 1 && v70 != 1 || v67 >= v69)
      {
        v57 = v86;
      }
      else
      {
        v71 = v91;
        v57 = v86;
        if ((v91 - 15) <= 0x9Bu)
          v71 = sub_1C47F37A0(&v91);
        LOBYTE(v94[0]) = v71;
        v37 *= (v59 / (unint64_t)sub_1C47A8C74((unsigned __int8 *)v94));
      }
    }
    *((_WORD *)this + j + 764) = v37;
    *((_BYTE *)this + j + 1886) = v64;
    v72 = sub_1C52B8130(&v88);
    v73 = v88;
    v74 = (unsigned __int8 *)this + j + 3683;
    if (v88 != v72)
    {
      *v74 = v72;
LABEL_108:
      v75 = (char *)this + 173796;
      v76 = 7;
      goto LABEL_111;
    }
    *v74 = 1;
    if (v85 == 6)
      goto LABEL_110;
    if (v85 == 5)
    {
      v73 = v72;
      v75 = (char *)this + 173796;
      v76 = 5;
LABEL_111:
      v75[v73] = v76;
      goto LABEL_112;
    }
    if (v57 >= 2)
    {
LABEL_110:
      v73 = v72;
      v75 = (char *)this + 173796;
      v76 = 6;
      goto LABEL_111;
    }
    if (v26 >= 0x33)
      v77 = 5;
    else
      v77 = 10;
    v84[v72] = v77;
LABEL_112:
    ++v23;
  }
  for (k = 0; k != 179; ++k)
  {
    result = (*(uint64_t (**)(llvm::TargetLoweringBase *, const llvm::TargetRegisterInfo *, uint64_t))(*(_QWORD *)this + 1048))(this, v83, k);
    *((_QWORD *)this + k + 259) = result;
    *((_BYTE *)this + k + 3504) = v82;
  }
  return result;
}

unint64_t sub_1C52B8130(unsigned __int8 *a1)
{
  int v2;
  int v4;
  unsigned int v5;
  int v6;
  char v7;

  v2 = sub_1C47F381C(a1);
  if ((v2 & (v2 - 1)) == 0)
    return *a1;
  v4 = sub_1C47F381C(a1);
  v5 = *a1 - 120;
  v6 = 1 << -__clz(v4 - 1);
  v7 = sub_1C47F37A0(a1);
  if (v5 <= 0x32)
    return sub_1C47AC5FC(v7, v6);
  else
    return sub_1C47AC934(v7, v6);
}

uint64_t llvm::TargetLoweringBase::getVectorTypeBreakdown(unint64_t a1, llvm::EVT *a2, uint64_t a3, uint64_t a4, _QWORD *a5, unsigned int *a6, unsigned __int8 *a7)
{
  uint64_t v12;
  BOOL v13;
  unsigned __int8 v16;
  uint64_t v17;
  unint64_t EVT;
  int8x8_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint8x8_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  uint64_t ExtendedSizeInBits;
  int v37;
  unint64_t v38;
  int v39;
  unint64_t v40;
  int v41;
  unint64_t v42;
  _BOOL8 v43;
  unint64_t v44;
  uint8x8_t v45;
  unint64_t v46;
  unint64_t v47;
  const char *v48;
  unint64_t v49;
  unsigned __int8 v51[8];
  uint64_t v52;
  unsigned __int8 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  __int128 v57;

  *(_QWORD *)&v55 = a3;
  *((_QWORD *)&v55 + 1) = a4;
  v12 = sub_1C52B71D4((unsigned __int8 *)&v55);
  llvm::TargetLoweringBase::getTypeConversion(a1, a2, v55, *((uint64_t *)&v55 + 1), (uint64_t)&v56);
  if ((HIDWORD(v12) == 1 || (_DWORD)v12 != 1) && (v56 == 7 || v56 == 1))
  {
    llvm::TargetLoweringBase::getTypeConversion(a1, a2, v55, *((uint64_t *)&v55 + 1), (uint64_t)&v56);
    v16 = v57;
    if ((_BYTE)v57)
    {
      if (*(_QWORD *)(a1 + 8 * v57 + 96))
      {
        *(_OWORD *)a5 = v57;
        *a7 = v16;
        v17 = 1;
        *a6 = 1;
        return v17;
      }
    }
  }
  if ((_BYTE)v55)
  {
    LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v55);
    v20 = 0;
    v21 = 0;
  }
  else
  {
    EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v55 + 1) + 24), 0, v13);
    v21 = v22;
    v20 = EVT & 0xFFFFFFFFFFFFFF00;
  }
  if (HIDWORD(v12) == 1)
  {
    v54 = v55;
    v30 = *((_QWORD *)&v55 + 1);
    do
    {
      llvm::TargetLoweringBase::getTypeConversion(a1, a2, v54, v30, (uint64_t)&v56);
      *(_DWORD *)((char *)&v54 + 1) = *(_DWORD *)((char *)&v57 + 1);
      DWORD1(v54) = DWORD1(v57);
      v30 = *((_QWORD *)&v57 + 1);
      LOBYTE(v54) = v57;
      *((_QWORD *)&v54 + 1) = *((_QWORD *)&v57 + 1);
    }
    while ((_BYTE)v56);
    if ((_BYTE)v57)
    {
      if (v57 - 15 < 0x9C)
      {
LABEL_35:
        v31 = sub_1C52B71D4((unsigned __int8 *)&v55);
        v32 = sub_1C52B71D4((unsigned __int8 *)&v54);
        *a6 = (v31 + (unint64_t)v32 - 1) / v32;
        *(_OWORD *)a5 = v54;
        *a7 = sub_1C47A8BD8(a1, a2, *a5, a5[1]);
        return *a6;
      }
    }
    else if ((*(_DWORD *)(*((_QWORD *)&v57 + 1) + 8) & 0xFE) == 0x12)
    {
      goto LABEL_35;
    }
    llvm::report_fatal_error((llvm *)"Don't know how to legalize this scalable vector type", (const char *)1);
  }
  v23 = v20 | EVT;
  v19.i32[0] = v12;
  v24 = (uint8x8_t)vcnt_s8(v19);
  v24.i16[0] = vaddlv_u8(v24);
  if (v24.i32[0] == 1)
    v25 = v12;
  else
    v25 = 1;
  if (v24.i32[0] == 1)
    v26 = HIDWORD(v12);
  else
    v26 = 0;
  if (v24.i32[0] == 1)
    v17 = 1;
  else
    v17 = v12;
  if (v25 >= 2)
  {
    while (1)
    {
      v27 = sub_1C47AC578(a2, v23, v21, (llvm::Type *)(v12 | (unint64_t)(v26 << 32)));
      if (v27)
      {
        if (*(_QWORD *)(a1 + 8 * v27 + 96))
          break;
      }
      v26 = 0;
      v28 = 0;
      v25 = v12 >> 1;
      v17 = (2 * v17);
      v29 = v12 > 3;
      LODWORD(v12) = v12 >> 1;
      if (!v29)
        goto LABEL_40;
    }
    v25 = v12;
  }
  v28 = v26;
LABEL_40:
  *a6 = v17;
  v33 = sub_1C47AC578(a2, v23, v21, (llvm::Type *)(v25 | (unint64_t)(v28 << 32)));
  *(_QWORD *)&v54 = v33;
  *((_QWORD *)&v54 + 1) = v34;
  if ((_BYTE)v33 && *(_QWORD *)(a1 + 8 * v33 + 96))
  {
    v23 = v33;
    v21 = v34;
  }
  else
  {
    *(_QWORD *)&v54 = v23;
    *((_QWORD *)&v54 + 1) = v21;
  }
  *(_OWORD *)a5 = v54;
  v35 = sub_1C47A8BD8(a1, a2, v23, v21);
  v53 = v35;
  *a7 = v35;
  v51[0] = v35;
  v52 = 0;
  if (v35 == v23)
  {
    if ((_BYTE)v23 || !v21)
      return v17;
    v56 = v23;
    *(_QWORD *)&v57 = v21;
    goto LABEL_48;
  }
  v56 = v23;
  *(_QWORD *)&v57 = v21;
  if (!v35)
  {
LABEL_48:
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v51);
    goto LABEL_51;
  }
  ExtendedSizeInBits = sub_1C47A8C74(v51);
LABEL_51:
  v38 = ExtendedSizeInBits;
  v39 = v37;
  if ((_BYTE)v23)
    v40 = sub_1C47A8C74((unsigned __int8 *)&v56);
  else
    v40 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v56);
  if ((v39 != 1 || v41 == 1) && v38 < v40)
  {
    if ((_BYTE)v23)
      v42 = sub_1C47A8C74((unsigned __int8 *)&v54);
    else
      v42 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v54);
    v44 = v42;
    v45 = (uint8x8_t)vcnt_s8((int8x8_t)v42);
    v45.i16[0] = vaddlv_u8(v45);
    if (v45.i32[0] != 1)
    {
      v46 = v42 | (v42 >> 1) | ((v42 | (v42 >> 1)) >> 2);
      v47 = v46 | (v46 >> 4) | ((v46 | (v46 >> 4)) >> 8);
      v44 = (v47 | (v47 >> 16) | ((v47 | (v47 >> 16)) >> 32)) + 1;
      v43 = v43;
    }
    if (v43)
    v49 = sub_1C47A8C74(&v53);
    if ((_DWORD)v48 == 1)
    return v17 * (v44 / v49);
  }
  return v17;
}

BOOL llvm::TargetLoweringBase::isSuitableForJumpTable(llvm::TargetLoweringBase *this, const llvm::SwitchInst *a2, uint64_t a3, unint64_t a4, llvm::ProfileSummaryInfo *a5, uint64_t **a6)
{
  llvm::BasicBlock *v8;
  uint64_t v9;
  _BOOL4 shouldOptimizeForSize;
  int *v12;

  v8 = (llvm::BasicBlock *)*((_QWORD *)a2 + 5);
  v9 = *(_QWORD *)(*((_QWORD *)v8 + 7) + 112);
  if (v9 && ((*(_BYTE *)(v9 + 17) & 4) != 0 || *(char *)(v9 + 13) < 0))
    goto LABEL_8;
  shouldOptimizeForSize = llvm::shouldOptimizeForSize(v8, (uint64_t)a5, a6);
  if (!shouldOptimizeForSize && dword_1ED8006B0 < a4)
    return 0;
  if (shouldOptimizeForSize)
LABEL_8:
    v12 = &dword_1ED800830;
  else
    v12 = &dword_1ED800770;
  return 100 * a3 >= *v12 * a4;
}

uint64_t llvm::TargetLoweringBase::getMinimumJumpTableDensity(llvm::TargetLoweringBase *this, int a2)
{
  uint64_t v2;

  v2 = 72;
  if (a2)
    v2 = 96;
  return LODWORD(qword_1ED8004B0[v2 + 16]);
}

uint64_t llvm::TargetLoweringBase::getMaximumJumpTableSize(llvm::TargetLoweringBase *this)
{
  return dword_1ED8006B0;
}

void llvm::GetReturnInfo(unsigned int a1, _QWORD *a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, llvm::DataLayout *a6)
{
  uint64_t i;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ExtendedSizeInBits;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  unint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  char v34;
  int v35;
  int v36;
  __int128 v37;
  void *v38;
  uint64_t v39;
  _QWORD v40[10];

  v40[8] = *MEMORY[0x1E0C80C00];
  v38 = v40;
  v39 = 0x400000000;
  llvm::ComputeValueVTs((uint64_t)a5, a6, (uint64_t)a2, (uint64_t)&v38, 0, 0, 0);
  v29 = v39;
  if ((_DWORD)v39)
  {
    for (i = 0; i != v29; ++i)
    {
      v37 = *((_OWORD *)v38 + i);
      if (!a3)
        goto LABEL_5;
      if (*(_DWORD *)(a3 + 8) < 2u)
        goto LABEL_5;
      v20 = *(_QWORD *)(a3 + 48);
      if (!v20 || (*(_BYTE *)(v20 + 18) & 1) == 0 && (*(_BYTE *)(v20 + 20) & 8) == 0)
        goto LABEL_5;
      if ((_BYTE)v37)
      {
        if (v37 - 120 >= 0x20
          && v37 - 2 >= 6
          && v37 - 15 >= 0x3C)
        {
          goto LABEL_5;
        }
        v21 = a5[1891];
        if (v37 == (_DWORD)v21)
          goto LABEL_5;
        v31 = a5[1891];
        v32 = 0;
        ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v37);
      }
      else
      {
        if ((*(_DWORD *)(*((_QWORD *)&v37 + 1) + 8) & 0xFE) == 0x12)
          v24 = *(unsigned __int8 *)(**(_QWORD **)(*((_QWORD *)&v37 + 1) + 16) + 8);
        else
          v24 = *(_DWORD *)(*((_QWORD *)&v37 + 1) + 8);
        if (v24 != 13)
          goto LABEL_5;
        v21 = a5[1891];
        v31 = v21;
        v32 = 0;
        ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v37);
      }
      v25 = ExtendedSizeInBits;
      v26 = v23;
      if (v21)
        v27 = sub_1C47A8C74((unsigned __int8 *)&v31);
      else
        v27 = (unint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v31);
      if ((v26 != 1 || v28 == 1) && v25 < v27)
      {
        LOBYTE(v37) = v21;
        *((_QWORD *)&v37 + 1) = 0;
      }
LABEL_5:
      v11 = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a5 + 600))(a5, *a2, a1, v37, *((_QWORD *)&v37 + 1));
      v12 = (*(uint64_t (**)(unsigned __int8 *, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a5 + 592))(a5, *a2, a1, v37, *((_QWORD *)&v37 + 1));
      if (!a3 || *(_DWORD *)(a3 + 8) < 2u)
      {
        v13 = 0;
        LODWORD(v14) = 0;
        goto LABEL_8;
      }
      v14 = *(_QWORD *)(a3 + 48);
      if (!v14)
      {
        v13 = 0;
LABEL_8:
        v14 = v14;
        if (v11)
          goto LABEL_9;
        continue;
      }
      v13 = *(_BYTE *)(v14 + 13) & 4;
      if ((*(_BYTE *)(v14 + 18) & 1) == 0)
      {
        LODWORD(v14) = (*(unsigned __int8 *)(v14 + 20) >> 3) & 1;
        goto LABEL_8;
      }
      v14 = 2;
      if (v11)
      {
LABEL_9:
        v15 = v14 | v13;
        do
        {
          v31 = v15;
          LODWORD(v32) = 0;
          v34 = 1;
          v35 = 0;
          v36 = 0;
          BYTE4(v32) = v12;
          v33 = v37;
          v16 = (_OWORD *)sub_1C52B9D4C(a4, (unint64_t)&v31, 1);
          v17 = (_OWORD *)(*(_QWORD *)a4 + 48 * *(unsigned int *)(a4 + 8));
          v19 = v16[1];
          v18 = v16[2];
          *v17 = *v16;
          v17[1] = v19;
          v17[2] = v18;
          ++*(_DWORD *)(a4 + 8);
          --v11;
        }
        while (v11);
      }
    }
  }
  if (v38 != v40)
    free(v38);
}

uint64_t llvm::TargetLoweringBase::InstructionOpcodeToISD(llvm::TargetLoweringBase *this, int a2)
{
  return dword_1C85FBD60[a2 - 1];
}

uint64_t llvm::TargetLoweringBase::getTypeLegalizationCost@<X0>(llvm::TargetLoweringBase *this@<X0>, const llvm::DataLayout *a2@<X1>, llvm::EVT **a3@<X2>, uint64_t a4@<X8>)
{
  llvm::EVT *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  char v14[8];
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v6 = *a3;
  v7 = sub_1C47A7FD0((uint64_t)this, (uint64_t)a2, (uint64_t)a3, 0);
  v9 = v8;
  *(_QWORD *)&v17 = 1;
  DWORD2(v17) = 0;
  while (1)
  {
    v10 = v7;
    result = llvm::TargetLoweringBase::getTypeConversion((unint64_t)this, v6, v7, v9, (uint64_t)v14);
    if (!v14[0])
    {
LABEL_12:
      v13 = v17;
      goto LABEL_16;
    }
    if (v14[0] == 10)
      break;
    if ((v14[0] & 0xFB) == 2)
    {
      v18 = 2;
      v19 = 0;
      result = sub_1C4848B64((uint64_t)&v17, (uint64_t)&v18);
    }
    v7 = v15;
    if (v10 == v15)
    {
      if (v10)
        goto LABEL_12;
      v12 = v16;
      if (v9 == v16)
        goto LABEL_12;
    }
    else
    {
      v12 = v16;
    }
    v9 = v12;
  }
  if (!v10)
    LOBYTE(v10) = 6;
  v13 = xmmword_1C64632D0;
LABEL_16:
  *(_OWORD *)a4 = v13;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

BOOL llvm::TargetLoweringBase::isLegalAddressingMode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _BOOL8 result;
  uint64_t v6;

  v3 = *(_QWORD *)(a3 + 8);
  if ((unint64_t)(v3 + 0xFFFF) > 0x1FFFD || *(_QWORD *)a3 != 0)
    return 0;
  v6 = *(_QWORD *)(a3 + 24);
  if (!v6)
    return 1;
  if (v6 != 2)
    return v6 == 1 && (!v3 || !*(_BYTE *)(a3 + 16));
  result = 0;
  if (!v3 && !*(_BYTE *)(a3 + 16))
    return 1;
  return result;
}

llvm::UndefValue *llvm::TargetLoweringBase::getIRStackGuard(llvm::TargetLoweringBase *this, llvm::IRBuilderBase *a2)
{
  llvm::UndefValue *v2;
  uint64_t v4;
  llvm::PointerType *v5;
  llvm::UndefValue *inserted;
  int v7;
  unsigned int v8;

  if (*(_DWORD *)(*((_QWORD *)this + 1) + 484) != 13)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 6) + 56) + 40);
  v5 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**(_QWORD **)v4 + 1912), 0);
  inserted = llvm::Module::getOrInsertGlobal(v4, "__guard_local", 0xDuLL, v5);
  v2 = inserted;
  if (inserted && *((_BYTE *)inserted + 16) == 3)
  {
    v7 = *((_DWORD *)inserted + 8);
    v8 = v7 & 0xFFFFFFCF | 0x10;
    *((_DWORD *)inserted + 8) = v8;
    if ((v7 & 0xFu) - 7 >= 2)
    {
      if ((llvm::GlobalValue::hasExternalWeakLinkage(inserted) & 1) != 0)
        return v2;
      v8 = *((_DWORD *)v2 + 8);
    }
    *((_DWORD *)v2 + 8) = v8 | 0x4000;
  }
  return v2;
}

uint64_t llvm::TargetLoweringBase::setMinimumJumpTableEntries(llvm::TargetLoweringBase *this, int a2)
{
  llvm::TargetLoweringBase *v3;
  unsigned int v4;
  int v5;

  v5 = a2;
  dword_1ED8005F0 = a2;
  if (qword_1ED800628)
    return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)qword_1ED800628 + 48))(qword_1ED800628, &v5);
  sub_1C485C2F0();
  return llvm::TargetLoweringBase::setMaximumJumpTableSize(v3, v4);
}

uint64_t llvm::TargetLoweringBase::setMaximumJumpTableSize(llvm::TargetLoweringBase *this, int a2)
{
  int v3;

  v3 = a2;
  dword_1ED8006B0 = a2;
  if (qword_1ED8006E8)
    return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)qword_1ED8006E8 + 48))(qword_1ED8006E8, &v3);
  sub_1C485C2F0();
  return sub_1C52B8C34();
}

uint64_t sub_1C52B8C34(int a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5)
{
  int v10;
  std::string::size_type v11;
  uint64_t v13;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  size_t v21;
  int v22;
  size_t v23;
  size_t v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  size_t v28;
  std::string *v29;
  std::string::size_type v30;
  std::string *v31;
  std::string::size_type v32;
  char v34;
  size_t v35;
  std::string __p;
  std::string v37;
  _QWORD v38[2];
  void *v39;
  uint64_t v40;
  _QWORD v41[10];

  v41[8] = *MEMORY[0x1E0C80C00];
  v38[0] = a4;
  v38[1] = a5;
  if (!a5)
    return 0xFFFFFFFFLL;
  v39 = v41;
  v40 = 0x400000000;
  llvm::StringRef::split((char *)v38, (uint64_t)&v39, 44, -1, 1);
  if ((_DWORD)v40 != 1)
    goto LABEL_24;
  v37.__r_.__value_.__r.__words[0] = 0;
  v10 = sub_1C52B9AAC((_BYTE *)a4, a5, &v37, &__p);
  v11 = v37.__r_.__value_.__r.__words[0];
  if (a5 < v37.__r_.__value_.__r.__words[0])
    v11 = a5;
  if (!v10)
    v11 = a5;
  switch(v11)
  {
    case 7uLL:
      if (*(_DWORD *)a4 != 1634100580 || *(_DWORD *)(a4 + 3) != 1953264993)
        goto LABEL_24;
      v13 = 0xFFFFFFFFLL;
      break;
    case 4uLL:
      if (*(_DWORD *)a4 != 1701736302)
      {
LABEL_24:
        sub_1C52B9B58(&v37, a1, a2, a3);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          sub_1C47EBC30(&__p, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
        else
          __p = v37;
        size = __p.__r_.__value_.__l.__size_;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v17 = size - 1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          __p.__r_.__value_.__l.__size_ = v17;
        else
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v17 & 0x7F;
        p_p->__r_.__value_.__s.__data_[v17] = 0;
        if ((_DWORD)v40)
        {
          v18 = (char *)v39;
          v19 = (char *)v39 + 16 * v40;
          while (1)
          {
            v20 = *(_BYTE **)v18;
            v21 = *((_QWORD *)v18 + 1);
            v35 = 0;
            v22 = sub_1C52B9AAC(v20, v21, &v35, &v34);
            v23 = v35;
            if (v21 < v35)
              v23 = v21;
            if (v22)
              v24 = v23;
            else
              v24 = v21;
            v25 = *v20;
            if (v24)
              v26 = v25 == 33;
            else
              v26 = 0;
            v27 = v26;
            if (v26)
              ++v20;
            v28 = v24 - v27;
            if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v29 = &v37;
            else
              v29 = (std::string *)v37.__r_.__value_.__r.__words[0];
            v30 = *((_BYTE *)&v37.__r_.__value_.__s + 23) & 0x7F;
            if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v30 = v37.__r_.__value_.__l.__size_;
            if (v28 == v30 && (v24 == v27 || !memcmp(v20, v29, v24 - v27)))
              break;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v31 = &__p;
            else
              v31 = (std::string *)__p.__r_.__value_.__r.__words[0];
            v32 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v32 = __p.__r_.__value_.__l.__size_;
            if (v28 == v32 && (v24 == v27 || !memcmp(v20, v31, v24 - v27)))
              break;
            v18 += 16;
            if (v18 == v19)
            {
              v13 = 0xFFFFFFFFLL;
              goto LABEL_69;
            }
          }
          v13 = v25 != 33;
        }
        else
        {
          v13 = 0xFFFFFFFFLL;
        }
LABEL_69:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v37.__r_.__value_.__l.__data_);
        break;
      }
      v13 = 0;
      break;
    case 3uLL:
      if (*(_WORD *)a4 != 27745 || *(_BYTE *)(a4 + 2) != 108)
        goto LABEL_24;
      v13 = 1;
      break;
    default:
      goto LABEL_24;
  }
  if (v39 != v41)
    free(v39);
  return v13;
}

uint64_t sub_1C52B8F60(int a1, uint64_t a2, uint64_t a3, unsigned __int16 *a4, size_t a5)
{
  std::string::size_type v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  std::string::size_type size;
  std::string *p_p;
  std::string::size_type v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  size_t v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  unsigned __int8 v28;
  size_t v29;
  std::string __p;
  std::string v31;
  _QWORD v32[2];
  void *v33;
  uint64_t v34;
  _QWORD v35[9];

  v35[8] = *MEMORY[0x1E0C80C00];
  v32[0] = a4;
  v32[1] = a5;
  if (!a5)
    return 0xFFFFFFFFLL;
  v33 = v35;
  v34 = 0x400000000;
  llvm::StringRef::split((char *)v32, (uint64_t)&v33, 44, -1, 1);
  if ((_DWORD)v34 != 1)
    goto LABEL_16;
  v31.__r_.__value_.__r.__words[0] = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  if (sub_1C52B9AAC(a4, a5, &v31, &__p))
  {
    v10 = v31.__r_.__value_.__r.__words[0];
    if (a5 < v31.__r_.__value_.__r.__words[0])
      v10 = a5;
    if (v10 == 7)
    {
      v11 = *(_DWORD *)((char *)a4 + 3);
      v12 = *(_DWORD *)a4 == 1634100580;
      v13 = 1953264993;
    }
    else
    {
      if (v10 != 3)
      {
LABEL_16:
        sub_1C52B9B58(&v31, a1, a2, a3);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          sub_1C47EBC30(&__p, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
        else
          __p = v31;
        size = __p.__r_.__value_.__l.__size_;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v18 = size - 1;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          __p.__r_.__value_.__l.__size_ = v18;
        else
          *((_BYTE *)&__p.__r_.__value_.__s + 23) = v18 & 0x7F;
        p_p->__r_.__value_.__s.__data_[v18] = 0;
        if ((_DWORD)v34)
        {
          v19 = (char *)v33;
          v20 = (char *)v33 + 16 * v34;
          while (1)
          {
            v21 = *(_BYTE **)v19;
            v22 = *((_QWORD *)v19 + 1);
            v29 = 0;
            v28 = 0;
            if (sub_1C52B9AAC(v21, v22, &v29, &v28))
            {
              if (v22 >= v29)
                v22 = v29;
              if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v23 = &v31;
              else
                v23 = (std::string *)v31.__r_.__value_.__r.__words[0];
              v24 = *((_BYTE *)&v31.__r_.__value_.__s + 23) & 0x7F;
              if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v24 = v31.__r_.__value_.__l.__size_;
              if (v22 == v24 && (!v22 || !memcmp(v21, v23, v22)))
                break;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v25 = &__p;
              else
                v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
              v26 = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v26 = __p.__r_.__value_.__l.__size_;
              if (v22 == v26 && (!v22 || !memcmp(v21, v25, v22)))
                break;
            }
            v19 += 16;
            if (v19 == v20)
              goto LABEL_48;
          }
          v14 = v28;
        }
        else
        {
LABEL_48:
          v14 = 0xFFFFFFFFLL;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
        goto LABEL_54;
      }
      v11 = *((unsigned __int8 *)a4 + 2);
      v12 = *a4 == 27745;
      v13 = 108;
    }
    if (!v12 || v11 != v13)
      goto LABEL_16;
    v14 = __p.__r_.__value_.__s.__data_[0];
  }
  else
  {
    v14 = 0xFFFFFFFFLL;
  }
LABEL_54:
  if (v33 != v35)
    free(v33);
  return v14;
}

void llvm::TargetLoweringBase::finalizeLowering(llvm::TargetLoweringBase *this, llvm::MachineRegisterInfo **a2)
{
  llvm::MachineRegisterInfo::freezeReservedRegs(a2[5], (const llvm::MachineFunction *)a2);
}

uint64_t llvm::TargetLoweringBase::getLoadMemOperandFlags(llvm::TargetLoweringBase *this, uint64_t ***a2, const llvm::DataLayout *a3)
{
  __int16 v6;
  uint64_t **v7;
  int v8;
  _BOOL4 v9;
  int v10;
  int v11;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  const llvm::LoadInst **v18;
  const llvm::LoadInst *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  const llvm::LoadInst **v28;
  const llvm::LoadInst *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  const llvm::LoadInst **v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  const llvm::LoadInst **v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t v41;
  const llvm::LoadInst **v42;
  const llvm::LoadInst *v43;
  const llvm::LoadInst **v44;
  const llvm::LoadInst *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  const llvm::LoadInst **v53;
  const llvm::LoadInst *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  const llvm::LoadInst **v58;
  int v59;
  BOOL v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unsigned int v66;
  const llvm::LoadInst **v67;
  const llvm::LoadInst *v68;
  _QWORD *v69;
  uint64_t v70;
  const llvm::LoadInst **v71;
  int v72;
  BOOL v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  const llvm::LoadInst **v77;
  const llvm::LoadInst *v78;
  const llvm::LoadInst **v79;
  const llvm::LoadInst *v80;
  int v81;
  const llvm::LoadInst *v82;

  v6 = *((_WORD *)a2 + 9);
  v7 = a2[6];
  v8 = *((_DWORD *)a2 + 5);
  if ((v6 & 1) != 0)
  {
    if (v7)
    {
      if ((v8 & 0x20000000) == 0)
      {
        LODWORD(v46) = 0;
LABEL_99:
        v8 = *((_DWORD *)a2 + 5);
LABEL_66:
        if ((v8 & 0x20000000) == 0)
          goto LABEL_67;
        v48 = ***a2;
        v82 = (const llvm::LoadInst *)a2;
        v49 = *(_DWORD *)(v48 + 2496);
        if (v49)
        {
          v50 = *(_QWORD *)(v48 + 2480);
          v51 = v49 - 1;
          v52 = v51 & ((a2 >> 4) ^ (a2 >> 9));
          v53 = (const llvm::LoadInst **)(v50 + 40 * v52);
          v54 = *v53;
          if (*v53 == (const llvm::LoadInst *)a2)
            goto LABEL_75;
          v58 = 0;
          v59 = 1;
          while (v54 != (const llvm::LoadInst *)-4096)
          {
            if (v58)
              v60 = 0;
            else
              v60 = v54 == (const llvm::LoadInst *)-8192;
            if (v60)
              v58 = v53;
            v61 = v52 + v59++;
            v52 = v61 & v51;
            v53 = (const llvm::LoadInst **)(v50 + 40 * v52);
            v54 = *v53;
            if (*v53 == (const llvm::LoadInst *)a2)
              goto LABEL_75;
          }
          v81 = v46;
          if (v58)
            v79 = v58;
          else
            v79 = v53;
        }
        else
        {
          v81 = v46;
          v79 = 0;
        }
        v53 = (const llvm::LoadInst **)sub_1C541AB24(v48 + 2480, (uint64_t)&v82, (uint64_t *)&v82, v79);
        v80 = v82;
        v53[3] = 0;
        v53[4] = 0;
        *v53 = v80;
        v53[1] = (const llvm::LoadInst *)(v53 + 3);
        v53[2] = (const llvm::LoadInst *)0x100000000;
        LODWORD(v46) = v81;
LABEL_75:
        v55 = *((unsigned int *)v53 + 4);
        if ((_DWORD)v55)
        {
          v56 = (_QWORD *)((char *)v53[1] + 8);
          v57 = 16 * v55;
          while (*((_DWORD *)v56 - 2) != 6)
          {
            v56 += 2;
            v57 -= 16;
            if (!v57)
              goto LABEL_67;
          }
          v75 = *v56;
          if ((v6 & 1) != 0)
            v76 = 5;
          else
            v76 = 1;
          if ((_DWORD)v46)
            v10 = v76 | 8;
          else
            v10 = v76;
          if (v75)
            goto LABEL_54;
          goto LABEL_9;
        }
LABEL_67:
        if ((v6 & 1) != 0)
          v47 = 5;
        else
          v47 = 1;
        if ((_DWORD)v46)
          v10 = v47 | 8;
        else
          v10 = v47;
        goto LABEL_9;
      }
    }
    else if ((v8 & 0x20000000) == 0)
    {
      LODWORD(v46) = 0;
      goto LABEL_66;
    }
    v62 = ***a2;
    v82 = (const llvm::LoadInst *)a2;
    v63 = *(_DWORD *)(v62 + 2496);
    if (v63)
    {
      v64 = *(_QWORD *)(v62 + 2480);
      v65 = v63 - 1;
      v66 = v65 & ((a2 >> 4) ^ (a2 >> 9));
      v67 = (const llvm::LoadInst **)(v64 + 40 * v66);
      v68 = *v67;
      if (*v67 == (const llvm::LoadInst *)a2)
        goto LABEL_95;
      v71 = 0;
      v72 = 1;
      while (v68 != (const llvm::LoadInst *)-4096)
      {
        if (v71)
          v73 = 0;
        else
          v73 = v68 == (const llvm::LoadInst *)-8192;
        if (v73)
          v71 = v67;
        v74 = v66 + v72++;
        v66 = v74 & v65;
        v67 = (const llvm::LoadInst **)(v64 + 40 * v66);
        v68 = *v67;
        if (*v67 == (const llvm::LoadInst *)a2)
          goto LABEL_95;
      }
      if (v71)
        v77 = v71;
      else
        v77 = v67;
    }
    else
    {
      v77 = 0;
    }
    v67 = (const llvm::LoadInst **)sub_1C541AB24(v62 + 2480, (uint64_t)&v82, (uint64_t *)&v82, v77);
    v78 = v82;
    v67[3] = 0;
    v67[4] = 0;
    *v67 = v78;
    v67[1] = (const llvm::LoadInst *)(v67 + 3);
    v67[2] = (const llvm::LoadInst *)0x100000000;
LABEL_95:
    v46 = *((unsigned int *)v67 + 4);
    if ((_DWORD)v46)
    {
      v69 = (_QWORD *)((char *)v67[1] + 8);
      v70 = 16 * v46;
      while (*((_DWORD *)v69 - 2) != 9)
      {
        LODWORD(v46) = 0;
        v69 += 2;
        v70 -= 16;
        if (!v70)
          goto LABEL_99;
      }
      LODWORD(v46) = *v69 != 0;
    }
    goto LABEL_99;
  }
  if (v7)
  {
    if ((v8 & 0x20000000) == 0)
    {
LABEL_21:
      v9 = 0;
      goto LABEL_22;
    }
  }
  else if ((v8 & 0x20000000) == 0)
  {
    v9 = 0;
    goto LABEL_5;
  }
  v13 = ***a2;
  v82 = (const llvm::LoadInst *)a2;
  v14 = *(_DWORD *)(v13 + 2496);
  if (v14)
  {
    v15 = *(_QWORD *)(v13 + 2480);
    v16 = v14 - 1;
    v17 = v16 & ((a2 >> 4) ^ (a2 >> 9));
    v18 = (const llvm::LoadInst **)(v15 + 40 * v17);
    v19 = *v18;
    if (*v18 == (const llvm::LoadInst *)a2)
      goto LABEL_16;
    v33 = 0;
    v34 = 1;
    while (v19 != (const llvm::LoadInst *)-4096)
    {
      if (v33)
        v35 = 0;
      else
        v35 = v19 == (const llvm::LoadInst *)-8192;
      if (v35)
        v33 = v18;
      v36 = v17 + v34++;
      v17 = v36 & v16;
      v18 = (const llvm::LoadInst **)(v15 + 40 * v17);
      v19 = *v18;
      if (*v18 == (const llvm::LoadInst *)a2)
        goto LABEL_16;
    }
    if (v33)
      v42 = v33;
    else
      v42 = v18;
  }
  else
  {
    v42 = 0;
  }
  v18 = (const llvm::LoadInst **)sub_1C541AB24(v13 + 2480, (uint64_t)&v82, (uint64_t *)&v82, v42);
  v43 = v82;
  v18[3] = 0;
  v18[4] = 0;
  *v18 = v43;
  v18[1] = (const llvm::LoadInst *)(v18 + 3);
  v18[2] = (const llvm::LoadInst *)0x100000000;
LABEL_16:
  v20 = *((unsigned int *)v18 + 4);
  if (!(_DWORD)v20)
    goto LABEL_21;
  v21 = (_QWORD *)((char *)v18[1] + 8);
  v22 = 16 * v20;
  while (*((_DWORD *)v21 - 2) != 9)
  {
    v9 = 0;
    v21 += 2;
    v22 -= 16;
    if (!v22)
      goto LABEL_22;
  }
  v9 = *v21 != 0;
LABEL_22:
  v8 = *((_DWORD *)a2 + 5);
  if (!a2[6])
  {
LABEL_5:
    if ((v8 & 0x20000000) == 0)
      goto LABEL_6;
    goto LABEL_24;
  }
  if ((v8 & 0x20000000) == 0)
    goto LABEL_6;
LABEL_24:
  v23 = ***a2;
  v82 = (const llvm::LoadInst *)a2;
  v24 = *(_DWORD *)(v23 + 2496);
  if (v24)
  {
    v25 = *(_QWORD *)(v23 + 2480);
    v26 = v24 - 1;
    v27 = v26 & ((a2 >> 4) ^ (a2 >> 9));
    v28 = (const llvm::LoadInst **)(v25 + 40 * v27);
    v29 = *v28;
    if (*v28 == (const llvm::LoadInst *)a2)
      goto LABEL_26;
    v37 = 0;
    v38 = 1;
    while (v29 != (const llvm::LoadInst *)-4096)
    {
      if (v37)
        v39 = 0;
      else
        v39 = v29 == (const llvm::LoadInst *)-8192;
      if (v39)
        v37 = v28;
      v40 = v27 + v38++;
      v27 = v40 & v26;
      v28 = (const llvm::LoadInst **)(v25 + 40 * v27);
      v29 = *v28;
      if (*v28 == (const llvm::LoadInst *)a2)
        goto LABEL_26;
    }
    if (v37)
      v44 = v37;
    else
      v44 = v28;
  }
  else
  {
    v44 = 0;
  }
  v28 = (const llvm::LoadInst **)sub_1C541AB24(v23 + 2480, (uint64_t)&v82, (uint64_t *)&v82, v44);
  v45 = v82;
  v28[3] = 0;
  v28[4] = 0;
  *v28 = v45;
  v28[1] = (const llvm::LoadInst *)(v28 + 3);
  v28[2] = (const llvm::LoadInst *)0x100000000;
LABEL_26:
  v30 = *((unsigned int *)v28 + 4);
  if (!(_DWORD)v30)
  {
LABEL_6:
    if (v9)
      v10 = 9;
    else
      v10 = 1;
    goto LABEL_9;
  }
  v31 = (_QWORD *)((char *)v28[1] + 8);
  v32 = 16 * v30;
  while (*((_DWORD *)v31 - 2) != 6)
  {
    v31 += 2;
    v32 -= 16;
    if (!v32)
      goto LABEL_6;
  }
  v41 = *v31;
  if (v9)
    v10 = 9;
  else
    v10 = 1;
  if (v41)
LABEL_54:
    v10 |= 0x20u;
LABEL_9:
  if (llvm::isDereferenceableAndAlignedPointer((uint64_t *)*(a2 - 4), (uint64_t)*a2, 0, a3, 0, 0, 0))
    v11 = v10 | 0x10;
  else
    v11 = v10;
  return (*(unsigned int (**)(llvm::TargetLoweringBase *, uint64_t ***))(*(_QWORD *)this + 88))(this, a2) | v11;
}

uint64_t llvm::TargetLoweringBase::getStoreMemOperandFlags(llvm::TargetLoweringBase *this, const llvm::StoreInst *a2, const llvm::DataLayout *a3)
{
  const llvm::StoreInst *v5;
  int v6;
  int v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  const llvm::StoreInst **v14;
  const llvm::StoreInst *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  const llvm::StoreInst **v19;
  int v20;
  BOOL v21;
  unsigned int v22;
  const llvm::StoreInst **v23;
  const llvm::StoreInst *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  const llvm::StoreInst **v30;
  const llvm::StoreInst *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  const llvm::StoreInst **v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  char v41;
  const llvm::StoreInst **v42;
  const llvm::StoreInst *v43;

  LOWORD(v5) = *((_WORD *)a2 + 9);
  v6 = *((_DWORD *)a2 + 5);
  if ((v5 & 1) == 0)
  {
    if ((v6 & 0x20000000) == 0)
    {
LABEL_3:
      v7 = 2;
      return (*(unsigned int (**)(llvm::TargetLoweringBase *, const llvm::StoreInst *, const llvm::DataLayout *))(*(_QWORD *)this + 88))(this, a2, a3) | v7;
    }
    v9 = ***(_QWORD ***)a2;
    v43 = a2;
    v10 = *(_DWORD *)(v9 + 2496);
    if (v10)
    {
      v11 = *(_QWORD *)(v9 + 2480);
      v12 = v10 - 1;
      v13 = v12 & ((a2 >> 4) ^ (a2 >> 9));
      v14 = (const llvm::StoreInst **)(v11 + 40 * v13);
      v15 = *v14;
      if (*v14 == a2)
      {
LABEL_7:
        v16 = *((unsigned int *)v14 + 4);
        if ((_DWORD)v16)
        {
          v17 = (_QWORD *)((char *)v14[1] + 8);
          v18 = 16 * v16;
          while (*((_DWORD *)v17 - 2) != 9)
          {
            v17 += 2;
            v18 -= 16;
            if (!v18)
              goto LABEL_3;
          }
          if (*v17)
          {
            v7 = 10;
            return (*(unsigned int (**)(llvm::TargetLoweringBase *, const llvm::StoreInst *, const llvm::DataLayout *))(*(_QWORD *)this + 88))(this, a2, a3) | v7;
          }
        }
        goto LABEL_3;
      }
      v19 = 0;
      v20 = 1;
      while (v15 != (const llvm::StoreInst *)-4096)
      {
        if (v19)
          v21 = 0;
        else
          v21 = v15 == (const llvm::StoreInst *)-8192;
        if (v21)
          v19 = v14;
        v22 = v13 + v20++;
        v13 = v22 & v12;
        v14 = (const llvm::StoreInst **)(v11 + 40 * v13);
        v15 = *v14;
        if (*v14 == a2)
          goto LABEL_7;
      }
      if (v19)
        v23 = v19;
      else
        v23 = v14;
    }
    else
    {
      v23 = 0;
    }
    v14 = (const llvm::StoreInst **)sub_1C541AB24(v9 + 2480, (uint64_t)&v43, (uint64_t *)&v43, v23);
    v24 = v43;
    v14[3] = 0;
    v14[4] = 0;
    *v14 = v24;
    v14[1] = (const llvm::StoreInst *)(v14 + 3);
    v14[2] = (const llvm::StoreInst *)0x100000000;
    goto LABEL_7;
  }
  if ((v6 & 0x20000000) == 0)
    goto LABEL_28;
  v25 = ***(_QWORD ***)a2;
  v43 = a2;
  v26 = *(_DWORD *)(v25 + 2496);
  if (v26)
  {
    v27 = *(_QWORD *)(v25 + 2480);
    v28 = v26 - 1;
    v29 = v28 & ((a2 >> 4) ^ (a2 >> 9));
    v30 = (const llvm::StoreInst **)(v27 + 40 * v29);
    v31 = *v30;
    if (*v30 == a2)
      goto LABEL_33;
    v35 = 0;
    v36 = 1;
    while (v31 != (const llvm::StoreInst *)-4096)
    {
      if (v35)
        v37 = 0;
      else
        v37 = v31 == (const llvm::StoreInst *)-8192;
      if (v37)
        v35 = v30;
      v38 = v29 + v36++;
      v29 = v38 & v28;
      v30 = (const llvm::StoreInst **)(v27 + 40 * v29);
      v31 = *v30;
      if (*v30 == a2)
        goto LABEL_33;
    }
    v41 = (char)v5;
    if (v35)
      v42 = v35;
    else
      v42 = v30;
  }
  else
  {
    v41 = (char)v5;
    v42 = 0;
  }
  v30 = (const llvm::StoreInst **)sub_1C541AB24(v25 + 2480, (uint64_t)&v43, (uint64_t *)&v43, v42);
  v5 = v43;
  v30[3] = 0;
  v30[4] = 0;
  *v30 = v5;
  v30[1] = (const llvm::StoreInst *)(v30 + 3);
  v30[2] = (const llvm::StoreInst *)0x100000000;
  LOBYTE(v5) = v41;
LABEL_33:
  v32 = *((unsigned int *)v30 + 4);
  if (!(_DWORD)v32)
  {
LABEL_28:
    if ((v5 & 1) != 0)
      v7 = 6;
    else
      v7 = 2;
    return (*(unsigned int (**)(llvm::TargetLoweringBase *, const llvm::StoreInst *, const llvm::DataLayout *))(*(_QWORD *)this + 88))(this, a2, a3) | v7;
  }
  v33 = (_QWORD *)((char *)v30[1] + 8);
  v34 = 16 * v32;
  while (*((_DWORD *)v33 - 2) != 9)
  {
    v33 += 2;
    v34 -= 16;
    if (!v34)
      goto LABEL_28;
  }
  v39 = *v33;
  if ((v5 & 1) != 0)
    v7 = 6;
  else
    v7 = 2;
  if ((v5 & 1) != 0)
    v40 = 14;
  else
    v40 = 10;
  if (v39)
    v7 = v40;
  return (*(unsigned int (**)(llvm::TargetLoweringBase *, const llvm::StoreInst *, const llvm::DataLayout *))(*(_QWORD *)this + 88))(this, a2, a3) | v7;
}

uint64_t llvm::TargetLoweringBase::getAtomicMemOperandFlags(uint64_t a1, uint64_t a2)
{
  int v2;

  if ((*(_WORD *)(a2 + 18) & 1) != 0)
    v2 = 7;
  else
    v2 = 3;
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1) | v2;
}

uint64_t *sub_1C52B9A50(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned __int8 a4)
{
  uint64_t *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  unsigned int v8;
  unsigned int v9;

  v6 = *(uint64_t **)(a1 + 8);
  result = (uint64_t *)(a1 + 8);
  v5 = v6;
  if (v6)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a3)
          break;
LABEL_3:
        v5 = (uint64_t *)*v7;
        result = v7;
        if (!*v7)
          goto LABEL_11;
      }
      if (v8 >= a3)
      {
        v9 = *((unsigned __int8 *)v7 + 32);
        if (v9 > a4)
          goto LABEL_3;
        if (v9 >= a4)
          goto LABEL_11;
      }
      result = v7 + 1;
      v5 = (uint64_t *)v7[1];
      if (!v5)
        goto LABEL_11;
    }
  }
  v7 = result;
LABEL_11:
  *a2 = v7;
  return result;
}

uint64_t sub_1C52B9AAC(_BYTE *a1, size_t __n, _QWORD *a3, _BYTE *a4)
{
  _BYTE *v8;
  int64_t v9;
  size_t v10;
  unsigned int v11;
  uint64_t result;

  if (__n && (v8 = memchr(a1, 58, __n)) != 0)
  {
    v9 = v8 - a1;
    *a3 = v8 - a1;
    if (v8 - a1 == -1)
    {
      return 0;
    }
    else
    {
      if (__n >= v9 + 1)
        v10 = v9 + 1;
      else
        v10 = __n;
      if (__n - v10 != 1 || (v11 = a1[v10] - 48, v11 > 9))
        llvm::report_fatal_error((llvm *)"Invalid refinement step for -recip.", (const char *)1);
      *a4 = v11;
      return 1;
    }
  }
  else
  {
    result = 0;
    *a3 = -1;
  }
  return result;
}

std::string *sub_1C52B9B58(std::string *this, int a2, uint64_t a3, uint64_t a4)
{
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  BOOL v12;
  const std::string::value_type *v13;
  _QWORD v15[2];

  v15[0] = a3;
  v15[1] = a4;
  if ((_BYTE)a3)
  {
    v7 = a3 - 15;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 4 * (v7 < 0x9C);
    if (v7 >= 0x9C)
      goto LABEL_3;
  }
  else
  {
    v5 = (*(_DWORD *)(a4 + 8) & 0xFE) == 18;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 4 * v5;
    if (!v5)
    {
LABEL_3:
      v6 = 0;
      goto LABEL_6;
    }
  }
  LODWORD(this->__r_.__value_.__l.__data_) = 761488758;
  v6 = 4;
LABEL_6:
  this->__r_.__value_.__s.__data_[v6] = 0;
  if (a2)
    v8 = "sqrt";
  else
    v8 = "div";
  std::string::append(this, v8);
  if (sub_1C6131264((unsigned __int8 *)v15, v9, v10) == 11)
  {
    v13 = "d";
  }
  else if (sub_1C6131264((unsigned __int8 *)v15, v11, v12) == 9)
  {
    v13 = "h";
  }
  else
  {
    v13 = "f";
  }
  return std::string::append(this, v13);
}

__n128 sub_1C52B9C44(char **a1, __n128 *a2, _WORD *a3)
{
  char *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)qword_1ED8004B0, "jump-is-expensive", 0x11uLL);
  v6 = *a1;
  byte_1ED800530 = **a1;
  byte_1ED800541 = 1;
  byte_1ED800540 = *v6;
  result = *a2;
  xmmword_1ED8004D0 = (__int128)*a2;
  word_1ED8004BA = (32 * (*a3 & 3)) | word_1ED8004BA & 0xFF9F;
  return result;
}

__n128 sub_1C52B9CC8(int **a1, _WORD *a2, __n128 *a3)
{
  int *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED800630, "max-jump-table-size", 0x13uLL);
  v6 = *a1;
  dword_1ED8006B0 = **a1;
  byte_1ED8006C4 = 1;
  dword_1ED8006C0 = *v6;
  word_1ED80063A = (32 * (*a2 & 3)) | word_1ED80063A & 0xFF9F;
  result = *a3;
  xmmword_1ED800650 = (__int128)*a3;
  return result;
}

unint64_t sub_1C52B9D4C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 48 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 48);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 48);
    }
  }
  return v3;
}

uint64_t sub_1C52B9DC4()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  LOBYTE(v1) = 0;
  v3 = &v1;
  v4.n128_u64[0] = (unint64_t)"Do not create extra branches to split comparison logic.";
  v4.n128_u64[1] = 55;
  v2 = 1;
  sub_1C6218FA8((char **)&v3, &v4, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED8004B0, &dword_1C475E000);
  v1 = 1;
  v2 = 4;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Set minimum number of entries to use a jump table.";
  v4.n128_u64[1] = 50;
  sub_1C621904C(&v3, &v1, (__int128 *)&v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED800570, &dword_1C475E000);
  v1 = 1;
  v2 = -1;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Set maximum size of jump tables.";
  v4.n128_u64[1] = 32;
  sub_1C6219128(&v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED800630, &dword_1C475E000);
  v1 = 1;
  v2 = 10;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Minimum density for building a jump table in a normal function";
  v4.n128_u64[1] = 62;
  sub_1C4DB1928((uint64_t)&unk_1ED8006F0, "jump-table-density", &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8006F0, &dword_1C475E000);
  v1 = 1;
  v2 = 40;
  v3 = &v2;
  v4.n128_u64[0] = (unint64_t)"Minimum density for building a jump table in an optsize function";
  v4.n128_u64[1] = 64;
  sub_1C4DB1928((uint64_t)&unk_1ED8007B0, "optsize-jump-table-density", &v3, &v1, &v4);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8007B0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Don't mutate strict-float node to a legalize node";
  v4.n128_u64[1] = 49;
  LOBYTE(v1) = 0;
  v3 = &v1;
  v2 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED800870, "disable-strictnode-mutation", &v4, (_BYTE **)&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED800870, &dword_1C475E000);
}

llvm::TargetLoweringObjectFileELF *llvm::TargetLoweringObjectFileELF::TargetLoweringObjectFileELF(llvm::TargetLoweringObjectFileELF *this)
{
  *((_BYTE *)this + 912) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  bzero((char *)this + 24, 0x329uLL);
  *((_BYTE *)this + 864) = 0;
  *((_QWORD *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_QWORD *)this + 115) = 0;
  *((_OWORD *)this + 58) = 0u;
  *((_BYTE *)this + 944) = 0;
  *(_WORD *)((char *)this + 945) = 257;
  *(_OWORD *)((char *)this + 948) = 0u;
  *((_QWORD *)this + 121) = 0;
  *((_OWORD *)this + 61) = 0u;
  *(_QWORD *)this = &off_1E814BEF8;
  *((_BYTE *)this + 992) = 0;
  *((_DWORD *)this + 249) = 1;
  *((_QWORD *)this + 125) = (char *)this + 1032;
  *((_QWORD *)this + 126) = (char *)this + 1032;
  *((_QWORD *)this + 127) = 2;
  *((_DWORD *)this + 256) = 0;
  *((_WORD *)this + 524) = 0;
  *((_BYTE *)this + 947) = 1;
  return this;
}

{
  *((_BYTE *)this + 912) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  bzero((char *)this + 24, 0x329uLL);
  *((_BYTE *)this + 864) = 0;
  *((_QWORD *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_QWORD *)this + 115) = 0;
  *((_OWORD *)this + 58) = 0u;
  *((_BYTE *)this + 944) = 0;
  *(_WORD *)((char *)this + 945) = 257;
  *(_OWORD *)((char *)this + 948) = 0u;
  *((_QWORD *)this + 121) = 0;
  *((_OWORD *)this + 61) = 0u;
  *(_QWORD *)this = &off_1E814BEF8;
  *((_BYTE *)this + 992) = 0;
  *((_DWORD *)this + 249) = 1;
  *((_QWORD *)this + 125) = (char *)this + 1032;
  *((_QWORD *)this + 126) = (char *)this + 1032;
  *((_QWORD *)this + 127) = 2;
  *((_DWORD *)this + 256) = 0;
  *((_WORD *)this + 524) = 0;
  *((_BYTE *)this + 947) = 1;
  return this;
}

unint64_t llvm::TargetLoweringObjectFileELF::Initialize(llvm::TargetLoweringObjectFileELF *this, llvm::MCContext *a2, const llvm::TargetMachine *a3)
{
  int v6;
  unint64_t result;
  BOOL v8;
  int v9;
  int v10;
  _QWORD *v11;
  int v12;
  int v13;
  _BOOL4 v15;
  int v16;

  llvm::TargetLoweringObjectFile::Initialize(this, a2, a3);
  v6 = *((_DWORD *)a3 + 137);
  result = llvm::TargetLoweringObjectFileELF::InitializeELF(this, *((_BYTE *)a3 + 1032) & 1);
  switch(*((_DWORD *)a3 + 118))
  {
    case 1:
    case 2:
    case 0x27:
    case 0x28:
      if (*(_DWORD *)(*((_QWORD *)a2 + 19) + 412) != 3)
        goto LABEL_3;
      return result;
    case 3:
    case 4:
    case 5:
      if (!*((_BYTE *)this + 832))
        goto LABEL_15;
      v11 = (_QWORD *)((char *)this + 948);
      if (*((_DWORD *)a3 + 122) == 7)
        goto LABEL_30;
      *v11 = 0x1C0000009CLL;
      v9 = 156;
      goto LABEL_31;
    case 0xC:
      *(_QWORD *)((char *)this + 948) = 0;
      *((_DWORD *)this + 239) = 0;
      if (!*((_BYTE *)this + 832))
        return result;
      *(_QWORD *)((char *)this + 948) = 0x1000000090;
      v9 = 144;
      goto LABEL_31;
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x13:
      *((_DWORD *)this + 237) = 128;
      *((_DWORD *)this + 239) = 155;
      if (*((_DWORD *)a3 + 121) == 5)
        *(_QWORD *)((char *)this + 948) = 0x1B0000009BLL;
      return result;
    case 0x15:
    case 0x16:
    case 0x29:
LABEL_3:
      v8 = *((_BYTE *)this + 832) == 0;
      if (*((_BYTE *)this + 832))
        v9 = 155;
      else
        v9 = 0;
      *((_DWORD *)this + 237) = v9;
      if (v8)
        v10 = 0;
      else
        v10 = 27;
      goto LABEL_9;
    case 0x17:
    case 0x18:
      *((_DWORD *)this + 237) = 148;
      *((_QWORD *)this + 119) = 0x9400000014;
      return result;
    case 0x1F:
    case 0x20:
      *(_OWORD *)((char *)this + 948) = xmmword_1C85FBF30;
      return result;
    case 0x21:
    case 0x23:
      if (*((_BYTE *)this + 832))
        v12 = 27;
      else
        v12 = 0;
      if (*((_BYTE *)this + 832))
        v13 = 155;
      else
        v13 = 0;
      *((_DWORD *)this + 238) = v12;
      *((_DWORD *)this + 237) = v13;
      *((_DWORD *)this + 239) = v13;
      *((_DWORD *)this + 240) = 3;
      return result;
    case 0x22:
      *((_DWORD *)this + 238) = 27;
      if (*((_BYTE *)this + 832))
      {
        v9 = 155;
        *((_DWORD *)this + 237) = 155;
        goto LABEL_31;
      }
      *((_DWORD *)this + 237) = 0;
      goto LABEL_48;
    case 0x24:
      v11 = (_QWORD *)((char *)this + 948);
      if (*((_BYTE *)this + 832))
      {
LABEL_30:
        *v11 = 0x1B0000009BLL;
        v9 = 155;
LABEL_31:
        *((_DWORD *)this + 239) = v9;
      }
      else
      {
        *v11 = 0;
LABEL_48:
        *((_DWORD *)this + 239) = 0;
      }
      return result;
    case 0x2A:
      v15 = v6 == 1 || v6 == 3;
      if (*((_BYTE *)this + 832))
      {
        if (v15)
          v9 = 155;
        else
          v9 = 156;
        *((_DWORD *)this + 237) = v9;
        if (v6 == 1)
          v10 = 27;
        else
          v10 = 28;
LABEL_9:
        *((_DWORD *)this + 238) = v10;
      }
      else
      {
        if (v15)
          v16 = 3;
        else
          v16 = 0;
        *((_DWORD *)this + 237) = v16;
        if (v6 == 1)
          v9 = 3;
        else
          v9 = 0;
        *((_DWORD *)this + 238) = v9;
      }
      goto LABEL_31;
    case 0x3E:
LABEL_15:
      *((_DWORD *)this + 237) = 0;
      *((_QWORD *)this + 119) = 0;
      return result;
    default:
      return result;
  }
}

unint64_t llvm::TargetLoweringObjectFileELF::InitializeELF(llvm::TargetLoweringObjectFileELF *this, char a2)
{
  uint64_t v3;
  unint64_t result;
  _QWORD v5[4];
  __int16 v6;
  unsigned __int8 v7[32];
  __int16 v8;

  *((_BYTE *)this + 992) = a2;
  v3 = *((_QWORD *)this + 105);
  if ((a2 & 1) != 0)
  {
    v5[0] = ".init_array";
    v6 = 259;
    v8 = 257;
    *((_QWORD *)this + 121) = llvm::MCContext::getELFSection(v3, (llvm::Twine *)v5, 14, 3, 0, v7, 0, -1, 0);
    v5[0] = ".fini_array";
    v6 = 259;
    v8 = 257;
    result = llvm::MCContext::getELFSection(v3, (llvm::Twine *)v5, 15, 3, 0, v7, 0, -1, 0);
  }
  else
  {
    v5[0] = ".ctors";
    v6 = 259;
    v8 = 257;
    *((_QWORD *)this + 121) = llvm::MCContext::getELFSection(v3, (llvm::Twine *)v5, 1, 3, 0, v7, 0, -1, 0);
    v5[0] = ".dtors";
    v6 = 259;
    v8 = 257;
    result = llvm::MCContext::getELFSection(v3, (llvm::Twine *)v5, 1, 3, 0, v7, 0, -1, 0);
  }
  *((_QWORD *)this + 122) = result;
  return result;
}

void llvm::TargetLoweringObjectFileELF::getModuleMetadata(llvm::TargetLoweringObjectFileELF *this, llvm::Module *a2)
{
  uint64_t *v3;
  llvm::SmallPtrSetImplBase *v4;
  uint64_t v5;
  unsigned int v6;
  void *v8;
  uint64_t v9;
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  v8 = v10;
  v9 = 0x400000000;
  llvm::collectUsedGlobalVariables((uint64_t)a2, (uint64_t)&v8, 0);
  v3 = (uint64_t *)v8;
  if ((_DWORD)v9)
  {
    v4 = (llvm::TargetLoweringObjectFileELF *)((char *)this + 1000);
    v5 = 8 * v9;
    do
    {
      v6 = *(unsigned __int8 *)(*v3 + 16);
      if (v6 <= 3 && v6 != 1)
        sub_1C4774094(v4, *v3);
      ++v3;
      v5 -= 8;
    }
    while (v5);
    v3 = (uint64_t *)v8;
  }
  if (v3 != v10)
    free(v3);
}

void llvm::TargetLoweringObjectFileELF::emitModuleMetadata(llvm::TargetLoweringObjectFileELF *this, llvm::MCStreamer *a2, llvm::Module *a3)
{
  uint64_t v6;
  uint64_t NamedMetadata;
  uint64_t v8;
  unint64_t ELFSection;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t PseudoProbeDescSection;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t Symbol;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  __int16 v47;
  _QWORD v48[4];
  __int16 v49;

  v6 = *((_QWORD *)this + 105);
  v48[0] = "llvm.linker.options";
  v49 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)a3, (uint64_t)v48);
  if (NamedMetadata)
  {
    v8 = NamedMetadata;
    v46[0] = ".linker-options";
    v47 = 259;
    v49 = 257;
    ELFSection = llvm::MCContext::getELFSection(v6, (llvm::Twine *)v46, 1879002113, 0x80000000, 0, (unsigned __int8 *)v48, 0, -1, 0);
    (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, ELFSection, 0);
    v10 = *(unsigned int *)(*(_QWORD *)(v8 + 48) + 8);
    if ((_DWORD)v10)
    {
      for (i = 0; i != v10; ++i)
      {
        v12 = *(_QWORD *)(**(_QWORD **)(v8 + 48) + 8 * i);
        if (*(_DWORD *)(v12 + 8) != 2)
          llvm::report_fatal_error((llvm *)"invalid llvm.linker.options", (const char *)1);
        v13 = -16;
        do
        {
          (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD))(*(_QWORD *)a2 + 488))(a2, *(_QWORD *)(*(_QWORD *)(v12 + v13) + 8) + 24, **(_QWORD **)(*(_QWORD *)(v12 + v13) + 8));
          (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 1);
          v13 += 8;
        }
        while (v13);
      }
    }
  }
  v48[0] = "llvm.dependent-libraries";
  v49 = 259;
  v14 = llvm::Module::getNamedMetadata((uint64_t)a3, (uint64_t)v48);
  if (v14)
  {
    v15 = v14;
    v46[0] = ".deplibs";
    v47 = 259;
    v49 = 257;
    v16 = llvm::MCContext::getELFSection(v6, (llvm::Twine *)v46, 1879002116, 48, 1, (unsigned __int8 *)v48, 0, -1, 0);
    (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, v16, 0);
    v17 = *(unsigned int *)(*(_QWORD *)(v15 + 48) + 8);
    if ((_DWORD)v17)
    {
      v18 = 0;
      v19 = 8 * v17;
      do
      {
        v20 = *(_QWORD *)(**(_QWORD **)(v15 + 48) + v18);
        v21 = *(_QWORD **)(*(_QWORD *)(v20 - 8 * *(unsigned int *)(v20 + 8)) + 8);
        (*(void (**)(llvm::MCStreamer *, _QWORD *, _QWORD))(*(_QWORD *)a2 + 488))(a2, v21 + 3, *v21);
        (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, 0, 1);
        v18 += 8;
      }
      while (v19 != v18);
    }
  }
  v48[0] = "llvm.pseudo_probe_desc";
  v49 = 259;
  v22 = llvm::Module::getNamedMetadata((uint64_t)a3, (uint64_t)v48);
  if (v22)
  {
    v23 = v22;
    v24 = *(unsigned int *)(*(_QWORD *)(v22 + 48) + 8);
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 8 * v24;
      do
      {
        v27 = *(_QWORD *)(**(_QWORD **)(v23 + 48) + v25);
        v28 = (_QWORD *)(v27 - 8 * *(unsigned int *)(v27 + 8));
        if (*(_BYTE *)*v28 == 1)
        {
          if (*(_BYTE *)(*(_QWORD *)(*v28 + 128) + 16) == 16)
            v29 = *(_QWORD *)(*v28 + 128);
          else
            v29 = 0;
        }
        else
        {
          v29 = 0;
        }
        v30 = v28[1];
        if (*(_BYTE *)v30 == 1)
        {
          v31 = *(_QWORD *)(v30 + 128);
          if (*(_BYTE *)(v31 + 16) == 16)
            v32 = v31;
          else
            v32 = 0;
        }
        else
        {
          v32 = 0;
        }
        v33 = v28[2];
        if ((*(_BYTE *)(*((_QWORD *)this + 123) + 1040) & 2) != 0)
        {
          v36 = *(uint64_t **)(v33 + 8);
          v37 = *v36;
          v35 = (uint64_t)(v36 + 3);
          v34 = v37;
        }
        else
        {
          v34 = 0;
          v35 = 0;
        }
        PseudoProbeDescSection = llvm::MCObjectFileInfo::getPseudoProbeDescSection(*(_QWORD *)(v6 + 168), v35, v34);
        (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, PseudoProbeDescSection, 0);
        v39 = (_QWORD *)(v29 + 24);
        if (*(_DWORD *)(v29 + 32) >= 0x41u)
          v39 = (_QWORD *)*v39;
        (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *v39, 8);
        v40 = (_QWORD *)(v32 + 24);
        if (*(_DWORD *)(v32 + 32) >= 0x41u)
          v40 = (_QWORD *)*v40;
        (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, *v40, 8);
        llvm::MCStreamer::emitULEB128IntValue(a2, **(_QWORD **)(v33 + 8), 0);
        (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD))(*(_QWORD *)a2 + 488))(a2, *(_QWORD *)(v33 + 8) + 24, **(_QWORD **)(v33 + 8));
        v25 += 8;
      }
      while (v26 != v25);
    }
  }
  v44 = 0;
  v45 = 0;
  v43 = 0;
  sub_1C52BAA20((uint64_t)a3, (_DWORD *)&v45 + 1, (int *)&v45, &v43);
  if (v44)
  {
    v47 = 261;
    v46[0] = v43;
    v46[1] = v44;
    v49 = 257;
    v41 = llvm::MCContext::getELFSection(v6, (llvm::Twine *)v46, 1, 2, 0, (unsigned __int8 *)v48, 0, -1, 0);
    (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, v41, 0);
    v49 = 261;
    v48[0] = "OBJC_IMAGE_INFO";
    v48[1] = 15;
    Symbol = llvm::MCContext::getOrCreateSymbol(v6, (uint64_t)v48);
    (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, Symbol, 0);
    (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, HIDWORD(v45), 4);
    (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, v45, 4);
    (*(void (**)(llvm::MCStreamer *))(*(_QWORD *)a2 + 152))(a2);
  }
  llvm::TargetLoweringObjectFile::emitCGProfileMetadata(this, a2, a3);
}

void sub_1C52BAA20(uint64_t a1, _DWORD *a2, int *a3, _QWORD *a4)
{
  uint64_t NamedMetadata;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v61;
  uint64_t v62;
  int v63;
  _QWORD v64[4];
  __int16 v65;
  void *v66;
  uint64_t v67;
  _QWORD v68[26];

  v68[24] = *MEMORY[0x1E0C80C00];
  v66 = v68;
  v67 = 0x800000000;
  v64[0] = "llvm.module.flags";
  v65 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a1, (uint64_t)v64);
  if (NamedMetadata)
  {
    v7 = NamedMetadata;
    v8 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = 8 * v8;
      do
      {
        v11 = *(_QWORD *)(**(_QWORD **)(v7 + 48) + v9);
        v63 = 0;
        v61 = 0;
        v62 = 0;
        if (llvm::Module::isValidModuleFlag(v11, &v63, &v62, &v61))
        {
          LODWORD(v64[0]) = v63;
          v64[1] = v62;
          v64[2] = v61;
          v12 = sub_1C4926708((uint64_t)&v66, (unint64_t)v64, 1);
          v13 = (char *)v66 + 24 * v67;
          v14 = *(_OWORD *)v12;
          *((_QWORD *)v13 + 2) = *(_QWORD *)(v12 + 16);
          *(_OWORD *)v13 = v14;
          LODWORD(v67) = v67 + 1;
        }
        v9 += 8;
      }
      while (v10 != v9);
    }
  }
  v15 = v66;
  if ((_DWORD)v67)
  {
    v16 = 24 * v67;
    v17 = (char *)v66 + 16;
    do
    {
      if (*((_DWORD *)v17 - 4) != 3)
      {
        v18 = *(uint64_t **)(*((_QWORD *)v17 - 1) + 8);
        v21 = *v18;
        v19 = v18 + 3;
        v20 = v21;
        switch(v21)
        {
          case 17:
            if (*v19 == 0x4241207466697753 && v19[1] == 0x6F69737265562049 && *((_BYTE *)v19 + 16) == 110)
            {
              v24 = *(_QWORD *)(*(_QWORD *)v17 + 128);
              v25 = (_QWORD *)(v24 + 24);
              if (*(_DWORD *)(v24 + 32) >= 0x41u)
                v25 = (_QWORD *)*v25;
              v26 = *a3 | (*(_DWORD *)v25 << 8);
              goto LABEL_117;
            }
            break;
          case 18:
          case 20:
          case 21:
          case 22:
          case 23:
          case 25:
          case 26:
          case 27:
          case 29:
            break;
          case 19:
            if (*v19 == 0x76697463656A624FLL
              && v19[1] == 0x4F20434720432D65
              && *(_QWORD *)((char *)v19 + 11) == 0x796C6E4F20434720)
            {
              goto LABEL_114;
            }
            if (*v19 == 0x614D207466697753
              && v19[1] == 0x7372655620726F6ALL
              && *(_QWORD *)((char *)v19 + 11) == 0x6E6F697372655620)
            {
              v58 = *(_QWORD *)(*(_QWORD *)v17 + 128);
              v59 = (_QWORD *)(v58 + 24);
              if (*(_DWORD *)(v58 + 32) >= 0x41u)
                v59 = (_QWORD *)*v59;
              v26 = *a3 | (*(_DWORD *)v59 << 24);
              goto LABEL_117;
            }
            if (*v19 == 0x694D207466697753
              && v19[1] == 0x7372655620726F6ELL
              && *(_QWORD *)((char *)v19 + 11) == 0x6E6F697372655620)
            {
              v33 = *(_QWORD *)(*(_QWORD *)v17 + 128);
              v34 = (_QWORD *)(v33 + 24);
              if (*(_DWORD *)(v33 + 32) >= 0x41u)
                v34 = (_QWORD *)*v34;
              v26 = *a3 | (*(_DWORD *)v34 << 16);
              goto LABEL_117;
            }
            break;
          case 24:
            if (*v19 == 0x76697463656A624FLL && v19[1] == 0x5320734920432D65 && v19[2] == 0x646574616C756D69)
              goto LABEL_114;
            break;
          case 28:
            if (*v19 == 0x76697463656A624FLL
              && v19[1] == 0x73616C4320432D65
              && v19[2] == 0x7265706F72502073
              && *((_DWORD *)v19 + 6) == 1936025972)
            {
              goto LABEL_114;
            }
            break;
          case 30:
            if (*v19 == 0x76697463656A624FLL
              && v19[1] == 0x67616D4920432D65
              && v19[2] == 0x56206F666E492065
              && *(_QWORD *)((char *)v19 + 22) == 0x6E6F697372655620)
            {
              v56 = *(_QWORD *)(*(_QWORD *)v17 + 128);
              v57 = (_QWORD *)(v56 + 24);
              if (*(_DWORD *)(v56 + 32) >= 0x41u)
                v57 = (_QWORD *)*v57;
              *a2 = *v57;
            }
            else
            {
              if (*v19 == 0x76697463656A624FLL
                && v19[1] == 0x6272614720432D65
                && v19[2] == 0x6C6C6F4320656761
                && *(_QWORD *)((char *)v19 + 22) == 0x6E6F697463656C6CLL)
              {
                goto LABEL_114;
              }
              if (*v19 == 0x76697463656A624FLL
                && v19[1] == 0x67616D4920432D65
                && v19[2] == 0x53206F666E492065
                && *(_QWORD *)((char *)v19 + 22) == 0x6E6F697463655320)
              {
                v49 = *(uint64_t **)(*(_QWORD *)v17 + 8);
                v50 = *v49;
                *a4 = v49 + 3;
                a4[1] = v50;
              }
            }
            break;
          case 31:
            if (*v19 == 0x76697463656A624FLL
              && v19[1] == 0x67616D4920432D65
              && v19[2] == 0x2074666977532065
              && *(_QWORD *)((char *)v19 + 23) == 0x6E6F697372655620)
            {
              goto LABEL_114;
            }
            break;
          default:
            if (v20 == 43 && !memcmp(v19, "Objective-C Enforce ClassRO Pointer Signing", 0x2BuLL))
            {
LABEL_114:
              v54 = *(_QWORD *)(*(_QWORD *)v17 + 128);
              v55 = (_QWORD *)(v54 + 24);
              if (*(_DWORD *)(v54 + 32) >= 0x41u)
                v55 = (_QWORD *)*v55;
              v26 = *a3 | *(_DWORD *)v55;
LABEL_117:
              *a3 = v26;
            }
            break;
        }
      }
      v17 += 24;
      v16 -= 24;
    }
    while (v16);
  }
  if (v15 != v68)
    free(v15);
}

unint64_t llvm::TargetLoweringObjectFileELF::getCFIPersonalitySymbol(llvm::TargetLoweringObjectFileELF *this, const llvm::GlobalValue *a2, const llvm::TargetMachine *a3, llvm::MachineModuleInfo *a4)
{
  int v4;
  uint64_t v6;
  _BYTE *Symbol;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;

  v4 = *((_DWORD *)this + 237);
  if ((v4 & 0x80) != 0)
  {
    v6 = *((_QWORD *)this + 105);
    Symbol = (_BYTE *)llvm::TargetMachine::getSymbol(a3, a2);
    if ((*Symbol & 4) != 0)
    {
      v10 = (uint64_t *)*((_QWORD *)Symbol - 1);
      v11 = *v10;
      v8 = v10 + 2;
      v9 = v11;
    }
    else
    {
      v8 = 0;
      v9 = 0;
    }
    v12[0] = "DW.ref.";
    v12[1] = 7;
    v12[2] = v8;
    v12[3] = v9;
    v13 = 1285;
    return llvm::MCContext::getOrCreateSymbol(v6, (uint64_t)v12);
  }
  else
  {
    if ((v4 & 0x70) != 0)
      llvm::report_fatal_error((llvm *)"We do not support this DWARF encoding yet!", (const char *)1);
    return llvm::TargetMachine::getSymbol(a3, a2);
  }
}

void llvm::TargetLoweringObjectFileELF::emitPersonalityValue(llvm::TargetLoweringObjectFileELF *this, llvm::MCStreamer *a2, const llvm::DataLayout *a3, const llvm::MCSymbol *a4)
{
  size_t *v8;
  size_t v9;
  const void *v10;
  size_t v11;
  unint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  _BYTE *Symbol;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t ELFNamedSection;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26[4];
  __int16 v27;
  _QWORD v28[4];
  __int16 v29;
  void *v30;
  __int128 v31;
  _DWORD v32[16];
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v30 = v32;
  qmemcpy(v32, "DW.ref.", 7);
  v31 = xmmword_1C85FBF40;
  if ((*(_BYTE *)a4 & 4) != 0)
  {
    v8 = (size_t *)*((_QWORD *)a4 - 1);
    v11 = *v8;
    v10 = v8 + 2;
    v9 = v11;
    v12 = v11 + 7;
    if (v11 + 7 >= 0x41)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v30, v32, v12, 1);
      v14 = v30;
      v13 = v31;
      goto LABEL_5;
    }
    v13 = 7;
    if (v9)
    {
      v14 = v32;
LABEL_5:
      memcpy((char *)v14 + v13, v10, v9);
      v15 = v30;
      v13 = v31;
      goto LABEL_6;
    }
  }
  else
  {
    v9 = 0;
    v13 = 7;
  }
  v15 = v32;
LABEL_6:
  *(_QWORD *)&v31 = v13 + v9;
  v16 = *((_QWORD *)this + 105);
  v29 = 261;
  v28[0] = v15;
  v28[1] = v13 + v9;
  Symbol = (_BYTE *)llvm::MCContext::getOrCreateSymbol(v16, (uint64_t)v28);
  (*(void (**)(llvm::MCStreamer *, _BYTE *, uint64_t))(*(_QWORD *)a2 + 304))(a2, Symbol, 12);
  (*(void (**)(llvm::MCStreamer *, _BYTE *, uint64_t))(*(_QWORD *)a2 + 304))(a2, Symbol, 23);
  v18 = *((_QWORD *)this + 105);
  v28[0] = ".data";
  v29 = 259;
  if ((*Symbol & 4) != 0)
  {
    v21 = (uint64_t *)*((_QWORD *)Symbol - 1);
    v22 = *v21;
    v19 = (uint64_t)(v21 + 2);
    v20 = v22;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  v27 = 261;
  v26[0] = v19;
  v26[1] = v20;
  ELFNamedSection = llvm::MCContext::getELFNamedSection(v18, (uint64_t)v28, v26, 1, 515, 0);
  v24 = ((unint64_t)*(unsigned int *)(*((_QWORD *)a3 + 29) + 4) + 7) >> 3;
  (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, ELFNamedSection, 0);
  (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a2 + 632))(a2, 1 << **((_BYTE **)a3 + 29), 0, 1, 0);
  (*(void (**)(llvm::MCStreamer *, _BYTE *, uint64_t))(*(_QWORD *)a2 + 304))(a2, Symbol, 4);
  v25 = sub_1C484358C(*((_QWORD *)this + 105) + 192, 24, 3);
  *(_BYTE *)v25 = 1;
  *(_DWORD *)(v25 + 1) = *(unsigned __int8 *)(v25 + 4) << 24;
  *(_QWORD *)(v25 + 8) = 0;
  *(_QWORD *)(v25 + 16) = v24;
  (*(void (**)(llvm::MCStreamer *, _BYTE *, unint64_t))(*(_QWORD *)a2 + 424))(a2, Symbol, v25);
  (*(void (**)(llvm::MCStreamer *, _BYTE *, _QWORD))(*(_QWORD *)a2 + 192))(a2, Symbol, 0);
  llvm::MCStreamer::emitSymbolValue(a2, a4, v24, 0);
  if (v30 != v32)
    free(v30);
}

unint64_t llvm::TargetLoweringObjectFileELF::getTTypeGlobalReference(llvm::TargetLoweringObjectFileELF *this, const llvm::GlobalValue *a2, char a3, const llvm::TargetMachine *a4, llvm::MachineModuleInfo *a5, llvm::MCStreamer *a6)
{
  uint64_t v13;
  unint64_t SymbolWithGlobalValueBase;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  unint64_t v19;

  if ((a3 & 0x80) == 0)
    return llvm::TargetLoweringObjectFile::getTTypeGlobalReference(this, a2, a3, a4, a5, a6);
  v13 = *((_QWORD *)a5 + 259);
  if (!v13)
  {
    v13 = operator new();
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    *(_QWORD *)v13 = &off_1E8145810;
    *(_DWORD *)(v13 + 24) = 0;
    *((_QWORD *)a5 + 259) = v13;
  }
  SymbolWithGlobalValueBase = llvm::TargetLoweringObjectFile::getSymbolWithGlobalValueBase((uint64_t)this, a2, ".DW.stub", 8, (uint64_t)a4);
  v19 = SymbolWithGlobalValueBase;
  v15 = sub_1C617C470(v13 + 8, (uint64_t *)&v19);
  if (v15[1] <= 7uLL)
    v15[1] = llvm::TargetMachine::getSymbol(a4, a2) & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                            * ((*((_DWORD *)a2 + 8) & 0xFu) - 9 < 0xFFFFFFFE));
  v16 = *((_QWORD *)this + 105);
  v17 = sub_1C484358C(v16 + 192, 24, 3);
  v18 = *(unsigned __int8 *)(*(_QWORD *)(v16 + 152) + 18) << 16;
  *(_BYTE *)v17 = 2;
  *(_DWORD *)(v17 + 1) = v18 | (*(unsigned __int8 *)(v17 + 4) << 24);
  *(_QWORD *)(v17 + 8) = 0;
  *(_QWORD *)(v17 + 16) = SymbolWithGlobalValueBase;
  return llvm::TargetLoweringObjectFile::getTTypeReference((uint64_t)this, v17, a3 & 0x7F, (uint64_t)a6);
}

unint64_t llvm::TargetLoweringObjectFileELF::getExplicitSectionGlobal(_QWORD *a1, uint64_t **a2, unsigned __int8 a3, llvm::TargetMachine *a4)
{
  uint64_t v8;
  llvm::Mangler *v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  v8 = a1[105];
  v9 = (llvm::Mangler *)a1[117];
  v10 = (_DWORD *)a1 + 249;
  v11 = sub_1C477672C((uint64_t)(a1 + 125), (uint64_t)a2);
  v12 = a1[126];
  v13 = 1016;
  if (v12 == a1[125])
    v13 = 1020;
  return sub_1C52BB57C(a2, a3, a4, v8, v9, v10, v11 != (_QWORD *)(v12 + 8 * *(unsigned int *)((char *)a1 + v13)), 0);
}

unint64_t sub_1C52BB57C(uint64_t **a1, unsigned __int8 a2, llvm::TargetMachine *a3, uint64_t a4, llvm::Mangler *a5, _DWORD *a6, int a7, int a8)
{
  uint64_t **v12;
  std::string::size_type v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t ***v19;
  uint64_t **v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  int i;
  unsigned int v32;
  uint64_t v33;
  _QWORD *v34;
  BOOL v35;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  unsigned __int8 v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  _QWORD *v48;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  uint64_t ***v52;
  int v53;
  BOOL v54;
  unsigned int v55;
  uint64_t ***v56;
  std::string::size_type v57;
  char v58;
  std::string *v59;
  std::string::size_type size;
  int v61;
  void *v62;
  std::string *v63;
  std::string::size_type v64;
  BOOL v65;
  char v66;
  unsigned __int8 v68;
  int v69;
  int v70;
  unsigned int v71;
  int v72;
  unsigned int v73;
  int v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  std::string::size_type v80;
  const char *v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  uint64_t ***v90;
  uint64_t **v91;
  uint64_t ***v92;
  int v93;
  BOOL v94;
  unsigned int v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _DWORD *v99;
  uint64_t v100;
  int isELFGenericMergeableSection;
  uint64_t ELFUniqueIDForEntsize;
  uint64_t v103;
  int v104;
  _BYTE *v105;
  int v106;
  unint64_t ELFSection;
  unint64_t v108;
  uint64_t v109;
  int v111;
  int v112;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t ***v121;
  uint64_t **v122;
  int v123;
  int v124;
  int v125;
  uint64_t *v126;
  _DWORD *v127;
  uint64_t ***v128;
  std::string::size_type v129;
  uint64_t **v132;
  char *v133;
  uint64_t *v134;
  uint64_t *v135;
  uint64_t *v136;
  uint64_t v137;
  int v139;
  BOOL v140;
  int v141;
  char v143;
  char v144;
  BOOL v146;
  BOOL v148;
  BOOL v153;
  BOOL v155;
  BOOL v158;
  _BOOL4 isELFImplicitMergeableSectionNamePrefix;
  std::string::size_type v161;
  uint64_t *v162;
  const char *v163;
  uint64_t v164;
  uint64_t Attribute;
  unint64_t v168;
  unint64_t v169;
  char v173;
  uint64_t v175;
  uint64_t v176;
  void *__p[2];
  uint64_t v178;
  _QWORD v179[4];
  __int16 v180;
  _QWORD v181[4];
  __int16 v182;
  _QWORD v183[4];
  __int16 v184;
  _QWORD v185[4];
  __int16 v186;
  _QWORD v187[4];
  __int16 v188;
  _QWORD v189[4];
  __int16 v190;
  _QWORD v191[4];
  __int16 v192;
  uint64_t v193[4];
  __int16 v194;
  uint64_t (**v195)(llvm::DiagnosticInfo *__hidden);
  int v196;
  char v197;
  std::string *v198;
  std::string v199;
  __int16 v200;
  std::string v201;
  uint64_t v202;
  __int16 v203;
  uint64_t v204;

  v204 = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a1 + 34) & 0x40) == 0)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_6;
  }
  v14 = *(_QWORD *)**a1;
  v201.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
  v15 = *(_DWORD *)(v14 + 2520);
  if (!v15)
  {
    v56 = 0;
LABEL_69:
    v19 = (uint64_t ***)sub_1C53D65B8(v14 + 2504, (uint64_t)&v201, (uint64_t *)&v201, v56);
    v57 = v201.__r_.__value_.__r.__words[0];
    v19[1] = 0;
    v19[2] = 0;
    *v19 = (uint64_t **)v57;
    goto LABEL_5;
  }
  v16 = *(_QWORD *)(v14 + 2504);
  v17 = v15 - 1;
  v18 = v17 & ((a1 >> 4) ^ (a1 >> 9));
  v19 = (uint64_t ***)(v16 + 24 * v18);
  v20 = *v19;
  if (*v19 != a1)
  {
    v52 = 0;
    v53 = 1;
    while (v20 != (uint64_t **)-4096)
    {
      if (v52)
        v54 = 0;
      else
        v54 = v20 == (uint64_t **)-8192;
      if (v54)
        v52 = v19;
      v55 = v18 + v53++;
      v18 = v55 & v17;
      v19 = (uint64_t ***)(v16 + 24 * v18);
      v20 = *v19;
      if (*v19 == a1)
        goto LABEL_5;
    }
    if (v52)
      v56 = v52;
    else
      v56 = v19;
    goto LABEL_69;
  }
LABEL_5:
  v12 = v19[1];
  v13 = (std::string::size_type)v19[2];
LABEL_6:
  v21 = *((unsigned __int8 *)a1 + 16);
  if (v21 != 3)
    goto LABEL_10;
  if (sub_1C50C8520((uint64_t)a1))
  {
    v22 = (uint64_t)a1[9];
    v193[0] = v22;
    if (v22)
    {
      v201.__r_.__value_.__r.__words[0] = (std::string::size_type)"bss-section";
      v201.__r_.__value_.__l.__size_ = 11;
      v162 = (uint64_t *)(v22 + 24);
      v199.__r_.__value_.__r.__words[0] = 0;
      if (sub_1C5331A1C((uint64_t *)(v22 + 24), (uint64_t)&v201, &v199) && a2 - 15 <= 2)
      {
        v163 = "bss-section";
        v164 = 11;
      }
      else
      {
        v201.__r_.__value_.__r.__words[0] = (std::string::size_type)"rodata-section";
        v201.__r_.__value_.__l.__size_ = 14;
        v199.__r_.__value_.__r.__words[0] = 0;
        if (sub_1C5331A1C(v162, (uint64_t)&v201, &v199) && ((a2 & 0xFC) == 8 || (a2 & 0xFC) == 4))
        {
          v163 = "rodata-section";
          v164 = 14;
        }
        else
        {
          v201.__r_.__value_.__r.__words[0] = (std::string::size_type)"relro-section";
          v201.__r_.__value_.__l.__size_ = 13;
          v199.__r_.__value_.__r.__words[0] = 0;
          if (sub_1C5331A1C(v162, (uint64_t)&v201, &v199) && a2 == 20)
          {
            v163 = "relro-section";
            v164 = 13;
          }
          else
          {
            v201.__r_.__value_.__r.__words[0] = (std::string::size_type)"data-section";
            v201.__r_.__value_.__l.__size_ = 12;
            v199.__r_.__value_.__r.__words[0] = 0;
            if (!sub_1C5331A1C(v162, (uint64_t)&v201, &v199) || a2 != 19)
              goto LABEL_9;
            v163 = "data-section";
            v164 = 12;
          }
        }
      }
      Attribute = llvm::AttributeSet::getAttribute(v193, (uint64_t)v163, v164);
      if (Attribute)
      {
        v13 = *(unsigned int *)(Attribute + 16);
        v12 = (uint64_t **)(Attribute + *(unsigned int *)(Attribute + 12) + 25);
      }
      else
      {
        v12 = 0;
        v13 = 0;
      }
    }
  }
LABEL_9:
  v21 = *((unsigned __int8 *)a1 + 16);
LABEL_10:
  v176 = a4;
  if (v21)
    goto LABEL_72;
  v23 = a1[14];
  if (!v23)
    goto LABEL_72;
  if (!*((_DWORD *)v23 + 2))
    goto LABEL_72;
  v24 = v23[5];
  if (!v24)
    goto LABEL_72;
  v25 = *(_DWORD *)(v24 + 40);
  if (!v25)
    goto LABEL_72;
  v26 = *(_QWORD *)(v24 + 24);
  v27 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v168 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v168 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v168;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v28 = __ROR8__(qword_1ED7EAC80 ^ 0xF54B982192FEA167, 30);
  v29 = 0x9DDFEA08EB382D69
      * ((qword_1ED7EAC80 + 0x18EB4DAABB32FA18) ^ ((0x9DDFEA08EB382D69
                                                    * ((v28 - 0x1A1B69534B932F1) ^ (qword_1ED7EAC80
                                                                                    + 0x18EB4DAABB32FA18))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v28 - 0x1A1B69534B932F1) ^ (qword_1ED7EAC80 + 0x18EB4DAABB32FA18))));
  v30 = -348639895 * ((v29 >> 47) ^ v29);
  for (i = 1; ; ++i)
  {
    v32 = v30 & (v25 - 1);
    v33 = v26 + 24 * v32;
    v34 = *(_QWORD **)v33;
    if (*(_QWORD *)v33 == -1)
    {
      if ("implicit-section-name" == (char *)-1)
        goto LABEL_33;
      goto LABEL_19;
    }
    if (v34 != (_QWORD *)-2)
      break;
    if ("implicit-section-name" == (char *)-2)
      goto LABEL_33;
LABEL_19:
    if (v34 == (_QWORD *)-1)
      goto LABEL_72;
    v30 = i + v32;
  }
  if (*(_QWORD *)(v33 + 8) != 21)
    goto LABEL_19;
  v35 = *v34 == 0x746963696C706D69 && v34[1] == 0x6E6F69746365732DLL;
  if (!v35 || *(_QWORD *)((char *)v34 + 13) != 0x656D616E2D6E6F69)
    goto LABEL_19;
LABEL_33:
  v37 = a1[14];
  if (!v37 || !*((_DWORD *)v37 + 2) || (v38 = v37[5]) == 0 || (v39 = *(_DWORD *)(v38 + 40)) == 0)
  {
    v12 = 0;
    v13 = 0;
    goto LABEL_72;
  }
  v40 = *(_QWORD *)(v38 + 24);
  v41 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v41 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v169 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v169 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v169;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v42 = __ROR8__(qword_1ED7EAC80 ^ 0xF54B982192FEA167, 30);
  v43 = 0x9DDFEA08EB382D69
      * ((qword_1ED7EAC80 + 0x18EB4DAABB32FA18) ^ ((0x9DDFEA08EB382D69
                                                    * ((v42 - 0x1A1B69534B932F1) ^ (qword_1ED7EAC80
                                                                                    + 0x18EB4DAABB32FA18))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v42 - 0x1A1B69534B932F1) ^ (qword_1ED7EAC80 + 0x18EB4DAABB32FA18))));
  v44 = -348639895 * ((v43 >> 47) ^ v43);
  v45 = 1;
  while (2)
  {
    v46 = v44 & (v39 - 1);
    v47 = v40 + 24 * v46;
    v48 = *(_QWORD **)v47;
    if (*(_QWORD *)v47 == -1)
    {
      if ("implicit-section-name" == (char *)-1)
        break;
      goto LABEL_41;
    }
    if (v48 == (_QWORD *)-2)
    {
      if ("implicit-section-name" == (char *)-2)
        break;
      goto LABEL_41;
    }
    if (*(_QWORD *)(v47 + 8) != 21
      || (*v48 == 0x746963696C706D69 ? (v49 = v48[1] == 0x6E6F69746365732DLL) : (v49 = 0),
          v49 ? (v50 = *(_QWORD *)((char *)v48 + 13) == 0x656D616E2D6E6F69) : (v50 = 0),
          !v50))
    {
LABEL_41:
      if (v48 == (_QWORD *)-1)
        goto LABEL_70;
      v44 = v45 + v46;
      ++v45;
      continue;
    }
    break;
  }
  v51 = *(_QWORD *)(v47 + 16);
  if (v51)
  {
    v13 = *(unsigned int *)(v51 + 16);
    v12 = (uint64_t **)(v51 + *(unsigned int *)(v51 + 12) + 25);
    goto LABEL_72;
  }
LABEL_70:
  v12 = 0;
  v13 = 0;
LABEL_72:
  memset(&v201, 0, sizeof(v201));
  std::string::append(&v201, "__llvm_covmap");
  v58 = HIBYTE(v201.__r_.__value_.__r.__words[2]);
  if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = &v201;
  else
    v59 = (std::string *)v201.__r_.__value_.__r.__words[0];
  size = *((_BYTE *)&v201.__r_.__value_.__s + 23) & 0x7F;
  if ((v201.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v201.__r_.__value_.__l.__size_;
  if (v13 == size && (!v13 || !memcmp(v12, v59, v13)))
  {
    v66 = 1;
    if ((v58 & 0x80) == 0)
      goto LABEL_115;
LABEL_94:
    operator delete(v201.__r_.__value_.__l.__data_);
    if ((v66 & 1) != 0)
      goto LABEL_116;
    goto LABEL_95;
  }
  memset(&v199, 0, sizeof(v199));
  std::string::append(&v199, "__llvm_covfun");
  v61 = SHIBYTE(v199.__r_.__value_.__r.__words[2]);
  v62 = (void *)v199.__r_.__value_.__r.__words[0];
  if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v63 = &v199;
  else
    v63 = (std::string *)v199.__r_.__value_.__r.__words[0];
  v64 = *((_BYTE *)&v199.__r_.__value_.__s + 23) & 0x7F;
  if ((v199.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v64 = v199.__r_.__value_.__l.__size_;
  if (v13 == v64 && (!v13 || !memcmp(v12, v63, v13)))
  {
    v66 = 1;
    if (v61 < 0)
      goto LABEL_113;
  }
  else if (v13 == 8)
  {
    v65 = *v12 == (uint64_t *)0x646D636D766C6C2ELL;
LABEL_109:
    v66 = v65;
    if (v61 < 0)
      goto LABEL_113;
  }
  else
  {
    if (v13 == 7)
    {
      v65 = *(_DWORD *)v12 == 1986817070 && *(_DWORD *)((char *)v12 + 3) == 1667394934;
      goto LABEL_109;
    }
    v66 = 0;
    if (v61 < 0)
LABEL_113:
      operator delete(v62);
  }
  if ((*((_BYTE *)&v201.__r_.__value_.__s + 23) & 0x80) != 0)
    goto LABEL_94;
LABEL_115:
  if ((v66 & 1) != 0)
  {
LABEL_116:
    a2 = 0;
    goto LABEL_117;
  }
LABEL_95:
  if (v13 >= 0x10)
  {
    if (*v12 == (uint64_t *)0x666F2E6D766C6C2ELL && v12[1] == (uint64_t *)0x676E6964616F6C66)
    {
      a2 = 1;
      goto LABEL_117;
    }
  }
  else if (!v13)
  {
    goto LABEL_117;
  }
  if (*(_BYTE *)v12 != 46)
    goto LABEL_117;
  if (v13 == 4)
  {
    if (*(_DWORD *)v12 != 1936941614)
      goto LABEL_117;
    goto LABEL_335;
  }
  if (v13 < 5)
    goto LABEL_117;
  if (*(_DWORD *)v12 == 1936941614 && *((_BYTE *)v12 + 4) == 46)
    goto LABEL_335;
  if (v13 < 0x10)
  {
    if (v13 == 5)
    {
      if (*(_DWORD *)v12 != 1935831854 || *((_BYTE *)v12 + 4) != 115)
      {
        if (*(_DWORD *)v12 != 1935832110 || *((_BYTE *)v12 + 4) != 115)
          goto LABEL_117;
LABEL_295:
        a2 = 12;
        goto LABEL_117;
      }
LABEL_335:
      a2 = 15;
      goto LABEL_117;
    }
    if (*(_DWORD *)v12 == 1935831854 && *((_WORD *)v12 + 2) == 11891)
      goto LABEL_335;
    if (v13 == 6)
    {
      v139 = *((unsigned __int16 *)v12 + 2);
      v140 = *(_DWORD *)v12 == 1633973294;
      v141 = 24948;
      goto LABEL_268;
    }
LABEL_267:
    v139 = *(_DWORD *)((char *)v12 + 3);
    v140 = *(_DWORD *)v12 == 1633973294;
    v141 = 778138721;
LABEL_268:
    if (!v140 || v139 != v141)
    {
      v143 = 1;
      goto LABEL_273;
    }
LABEL_363:
    a2 = 13;
    goto LABEL_117;
  }
  if (*v12 == (uint64_t *)0x6E696C2E756E672ELL && v12[1] == (uint64_t *)0x2E622E65636E6F6BLL)
    goto LABEL_335;
  if (v13 < 0x11)
  {
    if (*(_DWORD *)v12 == 1935831854 && *((_WORD *)v12 + 2) == 11891)
      goto LABEL_335;
    goto LABEL_267;
  }
  if (*v12 == (uint64_t *)0x696C2E6D766C6C2ELL
    && v12[1] == (uint64_t *)0x622E65636E6F6B6ELL
    && *((_BYTE *)v12 + 16) == 46)
  {
    goto LABEL_335;
  }
  if (*(_DWORD *)v12 == 1935831854 && *((_WORD *)v12 + 2) == 11891)
    goto LABEL_335;
  v153 = *v12 == (uint64_t *)0x6E696C2E756E672ELL && v12[1] == (uint64_t *)0x62732E65636E6F6BLL;
  if (v153 && *((_BYTE *)v12 + 16) == 46)
    goto LABEL_335;
  if (v13 >= 0x12)
  {
    v155 = *v12 == (uint64_t *)0x696C2E6D766C6C2ELL && v12[1] == (uint64_t *)0x732E65636E6F6B6ELL;
    if (v155 && *((_WORD *)v12 + 8) == 11874)
      goto LABEL_335;
  }
  if (*(_DWORD *)v12 == 1633973294 && *(_DWORD *)((char *)v12 + 3) == 778138721)
    goto LABEL_363;
  v158 = *v12 == (uint64_t *)0x6E696C2E756E672ELL && v12[1] == (uint64_t *)0x64742E65636E6F6BLL;
  if (v158 && *((_BYTE *)v12 + 16) == 46)
    goto LABEL_363;
  if (v13 >= 0x12)
  {
    if (*v12 == (uint64_t *)0x696C2E6D766C6C2ELL
      && v12[1] == (uint64_t *)0x742E65636E6F6B6ELL
      && *((_WORD *)v12 + 8) == 11876)
    {
      goto LABEL_363;
    }
    v143 = 0;
    v144 = 0;
  }
  else
  {
    v143 = 0;
LABEL_273:
    v144 = 1;
  }
  if (*(_DWORD *)v12 == 1935832110 && *((_WORD *)v12 + 2) == 11891)
    goto LABEL_295;
  if ((v143 & 1) == 0)
  {
    v146 = *v12 == (uint64_t *)0x6E696C2E756E672ELL && v12[1] == (uint64_t *)0x62742E65636E6F6BLL;
    if (v146 && *((_BYTE *)v12 + 16) == 46)
      goto LABEL_295;
  }
  if ((v144 & 1) == 0)
  {
    v148 = *v12 == (uint64_t *)0x696C2E6D766C6C2ELL && v12[1] == (uint64_t *)0x742E65636E6F6B6ELL;
    if (v148 && *((_WORD *)v12 + 8) == 11874)
      goto LABEL_295;
  }
LABEL_117:
  v68 = a2;
  v69 = 2 * (a2 > 1u);
  if (a2 == 1)
    v69 = 0x80000000;
  if ((a2 & 0xFE) == 2)
    v69 |= 4u;
  if (a2 == 3)
    v70 = v69 | 0x20000000;
  else
    v70 = v69;
  v71 = (a2 - 12);
  v72 = v70 | (v71 < 9);
  if (v71 < 3)
    v72 |= 0x400u;
  v73 = (a2 - 5);
  if ((a2 & 0xFC) == 8 || v73 < 3)
    v72 |= 0x10u;
  if (v73 >= 3)
    v75 = v72;
  else
    v75 = v72 | 0x20;
  if (v13 == 24)
  {
    v76 = 0x2E7377696674315FLL;
    v77 = bswap64((unint64_t)*v12);
    if (v77 == 0x2E7377696674315FLL
      && (v76 = 0x6175746F6C696E6BLL, v77 = bswap64((unint64_t)v12[1]), v77 == 0x6175746F6C696E6BLL)
      && (v76 = 0x5F656E7472696573, v77 = bswap64((unint64_t)v12[2]), v77 == 0x5F656E7472696573))
    {
      v78 = 0;
    }
    else
    {
      v78 = v77 < v76 ? -1 : 1;
    }
    if (!v78)
      v75 |= 0x80000000;
  }
  v79 = sub_1C52BD12C((uint64_t)a1);
  if (v79)
  {
    v81 = (const char *)(*(_QWORD *)v79 + 72);
    v80 = **(_QWORD **)v79;
    v173 = *(_DWORD *)(v79 + 8) == 0;
    v75 |= 0x200u;
  }
  else
  {
    v80 = 0;
    v173 = 0;
    v81 = "";
  }
  v82 = a8;
  if ((v68 - 5) >= 6u)
    v83 = 32 * (v68 == 11);
  else
    v83 = dword_1C85FC010[(char)(v68 - 5)];
  v175 = (uint64_t)v12;
  if (v82)
  {
LABEL_151:
    v84 = (*a6)++;
    goto LABEL_184;
  }
  if ((*((_BYTE *)a1 + 23) & 0x20) != 0)
  {
    v85 = *(_QWORD *)**a1;
    v201.__r_.__value_.__r.__words[0] = (std::string::size_type)a1;
    v86 = *(_DWORD *)(v85 + 2496);
    if (!v86)
    {
      v128 = 0;
      goto LABEL_237;
    }
    v87 = *(_QWORD *)(v85 + 2480);
    v88 = v86 - 1;
    v89 = v88 & ((a1 >> 4) ^ (a1 >> 9));
    v90 = (uint64_t ***)(v87 + 40 * v89);
    v91 = *v90;
    if (*v90 != a1)
    {
      v92 = 0;
      v93 = 1;
      while (v91 != (uint64_t **)-4096)
      {
        if (v92)
          v94 = 0;
        else
          v94 = v91 == (uint64_t **)-8192;
        if (v94)
          v92 = v90;
        v95 = v89 + v93++;
        v89 = v95 & v88;
        v90 = (uint64_t ***)(v87 + 40 * v89);
        v91 = *v90;
        if (*v90 == a1)
          goto LABEL_163;
      }
      if (v92)
        v128 = v92;
      else
        v128 = v90;
LABEL_237:
      v90 = (uint64_t ***)sub_1C541AB24(v85 + 2480, (uint64_t)&v201, (uint64_t *)&v201, v128);
      v129 = v201.__r_.__value_.__r.__words[0];
      v90[3] = 0;
      v90[4] = 0;
      *v90 = (uint64_t **)v129;
      v90[1] = (uint64_t **)(v90 + 3);
      v90[2] = (uint64_t **)0x100000000;
    }
LABEL_163:
    v96 = *((unsigned int *)v90 + 4);
    if ((_DWORD)v96)
    {
      v97 = v90[1] + 1;
      v98 = 16 * v96;
      while (*((_DWORD *)v97 - 2) != 22)
      {
        v97 += 2;
        v98 -= 16;
        if (!v98)
          goto LABEL_167;
      }
      if (*v97)
      {
        v75 |= 0x80u;
        goto LABEL_151;
      }
    }
  }
LABEL_167:
  if (a7)
  {
    if (*((_DWORD *)a3 + 121) == 14)
    {
      v75 |= 0x100000u;
      v99 = a6;
    }
    else
    {
      v103 = *(_QWORD *)(a4 + 152);
      v99 = a6;
      if (*(_BYTE *)(v103 + 464)
        || (v125 = *(_DWORD *)(v103 + 456), v125 >= 2) && (v125 != 2 || *(int *)(v103 + 460) >= 36))
      {
        v75 |= 0x200000u;
      }
    }
    v84 = (*v99)++;
    goto LABEL_184;
  }
  v100 = *(_QWORD *)(a4 + 152);
  if (!*(_BYTE *)(v100 + 464))
  {
    v104 = *(_DWORD *)(v100 + 456);
    if (v104 < 2 || v104 == 2 && *(int *)(v100 + 460) <= 34)
    {
      v83 = 0;
      v75 &= ~0x10u;
LABEL_183:
      v84 = -1;
      goto LABEL_184;
    }
  }
  isELFGenericMergeableSection = llvm::MCContext::isELFGenericMergeableSection(a4, v12, v13);
  if ((v75 & 0x10) == 0 && !isELFGenericMergeableSection)
    goto LABEL_183;
  ELFUniqueIDForEntsize = llvm::MCContext::getELFUniqueIDForEntsize(a4, v12, v13, v75, v83);
  if ((ELFUniqueIDForEntsize & 0xFF00000000) != 0)
  {
    v84 = ELFUniqueIDForEntsize;
    goto LABEL_184;
  }
  sub_1C52C26D8((uint64_t)&v201, (uint64_t)a1, v68, a5, v83, 0);
  if ((v75 & 0x10) == 0)
  {
    v126 = (uint64_t *)v201.__r_.__value_.__r.__words[0];
    goto LABEL_230;
  }
  isELFImplicitMergeableSectionNamePrefix = llvm::MCContext::isELFImplicitMergeableSectionNamePrefix(a4, v12, v13);
  v126 = (uint64_t *)v201.__r_.__value_.__r.__words[0];
  if (!isELFImplicitMergeableSectionNamePrefix || v13 < v201.__r_.__value_.__l.__size_)
  {
LABEL_230:
    v127 = a6;
    goto LABEL_231;
  }
  if (v201.__r_.__value_.__l.__size_)
  {
    v161 = v201.__r_.__value_.__r.__words[0];
    if (!memcmp(v12, v201.__r_.__value_.__l.__data_, v201.__r_.__value_.__l.__size_))
    {
      v84 = -1;
      v126 = (uint64_t *)v161;
    }
    else
    {
      v127 = a6;
      v126 = (uint64_t *)v161;
LABEL_231:
      v84 = (*v127)++;
    }
  }
  else
  {
    v84 = -1;
  }
  if (v126 != &v202)
    free(v126);
LABEL_184:
  v105 = (_BYTE *)sub_1C52C240C((uint64_t)a1, a3);
  v203 = 261;
  v201.__r_.__value_.__r.__words[0] = v175;
  v201.__r_.__value_.__l.__size_ = v13;
  v106 = sub_1C52C259C(v175, v13, v68);
  v200 = 261;
  v199.__r_.__value_.__r.__words[0] = (std::string::size_type)v81;
  v199.__r_.__value_.__l.__size_ = v80;
  ELFSection = llvm::MCContext::getELFSection(v176, (llvm::Twine *)&v201, v106, v75, v83, (unsigned __int8 *)&v199, v173, v84, v105);
  v108 = ELFSection;
  v109 = *(_QWORD *)(v176 + 152);
  if (!*(_BYTE *)(v109 + 464))
  {
    v111 = *(_DWORD *)(v109 + 456);
    if ((v111 < 2 || v111 == 2 && *(int *)(v109 + 460) <= 34) && (*(_BYTE *)(ELFSection + 228) & 0x10) != 0)
    {
      v112 = (v68 - 5) >= 6u ? 32 * (v68 == 11) : dword_1C85FC010[(char)(v68 - 5)];
      if (*(_DWORD *)(ELFSection + 236) != v112)
      {
        v116 = **a1;
        if ((*((_BYTE *)a1 + 23) & 0x10) != 0)
        {
          v117 = *(_QWORD *)(*(_QWORD *)v116 + 152);
          v118 = *(unsigned int *)(*(_QWORD *)v116 + 168);
          v119 = v175;
          if (!(_DWORD)v118)
            goto LABEL_249;
          LODWORD(v120) = (v118 - 1) & ((a1 >> 4) ^ (a1 >> 9));
          v121 = (uint64_t ***)(v117 + 16 * v120);
          v122 = *v121;
          if (*v121 != a1)
          {
            v123 = 1;
            while (v122 != (uint64_t **)-4096)
            {
              v124 = v120 + v123++;
              v120 = v124 & (v118 - 1);
              v122 = *(uint64_t ***)(v117 + 16 * v120);
              if (v122 == a1)
              {
                v121 = (uint64_t ***)(v117 + 16 * v120);
                goto LABEL_250;
              }
            }
LABEL_249:
            v121 = (uint64_t ***)(v117 + 16 * v118);
          }
LABEL_250:
          v132 = v121[1];
          v135 = *v132;
          v133 = (char *)(v132 + 2);
          v134 = v135;
        }
        else
        {
          v134 = 0;
          v133 = &byte_1C871356D;
          v119 = v175;
        }
        v180 = 1283;
        v179[0] = "Symbol '";
        v179[2] = v133;
        v179[3] = v134;
        v181[0] = v179;
        v181[2] = "' from module '";
        v182 = 770;
        v136 = a1[5];
        if (v136)
        {
          if (*((char *)v136 + 215) < 0)
          {
            sub_1C47EBC30(__p, (void *)v136[24], v136[25]);
          }
          else
          {
            *(_OWORD *)__p = *((_OWORD *)v136 + 12);
            v178 = v136[26];
          }
        }
        else
        {
          HIBYTE(v178) = 7;
          strcpy((char *)__p, "unknown");
        }
        v183[0] = v181;
        v183[2] = __p;
        v184 = 1026;
        v185[0] = v183;
        v185[2] = "' required a section with entry-size=";
        v186 = 770;
        if ((v68 - 5) >= 6u)
          v137 = 32 * (v68 == 11);
        else
          v137 = qword_1C85FBFE0[(char)(v68 - 5)];
        v187[0] = v185;
        v187[2] = v137;
        v188 = 2050;
        v189[0] = v187;
        v189[2] = " but was placed in section '";
        v190 = 770;
        v191[0] = v189;
        v191[2] = v119;
        v191[3] = v13;
        v192 = 1282;
        v193[0] = (uint64_t)v191;
        v193[2] = (uint64_t)"' with entry-size=";
        v194 = 770;
        v199.__r_.__value_.__r.__words[2] = *(unsigned int *)(v108 + 236);
        v200 = 2050;
        v201.__r_.__value_.__r.__words[0] = (std::string::size_type)&v199;
        v201.__r_.__value_.__r.__words[2] = (std::string::size_type)": Explicit assignment by pragma or attribute of an i"
                                                                    "ncompatible symbol to this section?";
        v203 = 770;
        v196 = 4;
        v197 = 0;
        v195 = &off_1E814C558;
        v198 = &v201;
        v199.__r_.__value_.__r.__words[0] = (std::string::size_type)v193;
        llvm::LLVMContext::diagnose(v116, (const llvm::DiagnosticInfo *)&v195);
        if (SHIBYTE(v178) < 0)
          operator delete(__p[0]);
      }
    }
  }
  return v108;
}

unint64_t llvm::TargetLoweringObjectFileELF::SelectSectionForGlobal(uint64_t a1, uint64_t a2, unsigned __int8 a3, llvm::TargetMachine *a4)
{
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  int v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  llvm::Mangler *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v7 = 0;
  v8 = 2 * (a3 > 1u);
  if (a3 == 1)
    v8 = 0x80000000;
  if ((a3 & 0xFE) == 2)
    v8 |= 4u;
  if (a3 == 3)
    v8 |= 0x20000000u;
  v9 = (a3 - 12);
  v10 = v8 | (v9 < 9);
  if (v9 < 3)
    v10 |= 0x400u;
  v11 = (a3 - 5);
  if ((a3 & 0xFC) == 8 || v11 < 3)
    v10 |= 0x10u;
  if (v11 >= 3)
    v13 = v10;
  else
    v13 = v10 | 0x20;
  if ((v13 & 0x10) == 0 && a3 != 18)
  {
    v14 = *((_DWORD *)a4 + 260);
    if ((a3 & 0xFE) == 2)
      v7 = (v14 >> 1) & 1;
    else
      v7 = (v14 >> 2) & 1;
  }
  if (*(_QWORD *)(a2 + 48))
    v15 = 1;
  else
    v15 = v7;
  v16 = *(_QWORD *)(a1 + 840);
  v18 = *(llvm::Mangler **)(a1 + 936);
  v19 = sub_1C477672C(a1 + 1000, a2);
  v20 = *(_QWORD *)(a1 + 1008);
  v21 = 1016;
  if (v20 == *(_QWORD *)(a1 + 1000))
    v21 = 1020;
  return sub_1C52BC980(v16, a2, a3, v18, a4, v19 != (_QWORD *)(v20 + 8 * *(unsigned int *)(a1 + v21)), v15, v13, (_DWORD *)(a1 + 996));
}

unint64_t sub_1C52BC980(uint64_t a1, uint64_t a2, unsigned __int8 a3, llvm::Mangler *a4, llvm::TargetMachine *a5, int a6, int a7, int a8, _DWORD *a9)
{
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v22;

  v17 = (_BYTE *)sub_1C52C240C(a2, a5);
  if (v17)
    v18 = a8 | 0x80;
  else
    v18 = a8;
  if (v17)
    v19 = 1;
  else
    v19 = a7;
  if (a6)
  {
    if (*((_DWORD *)a5 + 121) == 14)
    {
      v18 |= 0x100000u;
LABEL_12:
      v19 = 1;
      return sub_1C52BCD7C(a1, a2, a3, a4, (uint64_t)a5, v19, v18, a9, v17);
    }
    v20 = *(_QWORD *)(a1 + 152);
    if (*(_BYTE *)(v20 + 464) || (v22 = *(_DWORD *)(v20 + 456), v22 >= 2) && (v22 != 2 || *(int *)(v20 + 460) >= 36))
    {
      v18 |= 0x200000u;
      goto LABEL_12;
    }
  }
  return sub_1C52BCD7C(a1, a2, a3, a4, (uint64_t)a5, v19, v18, a9, v17);
}

unint64_t llvm::TargetLoweringObjectFileELF::getUniqueSectionForFunction(llvm::TargetLoweringObjectFileELF *this, uint64_t **a2, const llvm::TargetMachine *a3)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  int i;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v20;
  llvm::Mangler *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  llvm::Mangler *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  if ((*((_BYTE *)a2 + 34) & 0x40) != 0)
  {
LABEL_24:
    v20 = *((_QWORD *)this + 105);
    v21 = (llvm::Mangler *)*((_QWORD *)this + 117);
    v22 = sub_1C477672C((uint64_t)this + 1000, (uint64_t)a2);
    v23 = *((_QWORD *)this + 126);
    v24 = 1016;
    if (v23 == *((_QWORD *)this + 125))
      v24 = 1020;
    return sub_1C52BB57C(a2, 2u, a3, v20, v21, (_DWORD *)this + 249, v22 != (_QWORD *)(v23 + 8 * *(unsigned int *)((char *)this + v24)), 1);
  }
  else
  {
    v6 = a2[14];
    if (v6)
    {
      if (*((_DWORD *)v6 + 2))
      {
        v7 = v6[5];
        if (v7)
        {
          v8 = *(_DWORD *)(v7 + 40);
          if (v8)
          {
            v9 = *(_QWORD *)(v7 + 24);
            v10 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
            {
              v31 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v31 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v31;
              __cxa_guard_release(&qword_1ED7EAC88);
            }
            v11 = __ROR8__(qword_1ED7EAC80 ^ 0xF54B982192FEA167, 30);
            v12 = 0x9DDFEA08EB382D69
                * ((qword_1ED7EAC80 + 0x18EB4DAABB32FA18) ^ ((0x9DDFEA08EB382D69
                                                              * ((v11 - 0x1A1B69534B932F1) ^ (qword_1ED7EAC80
                                                                                              + 0x18EB4DAABB32FA18))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v11 - 0x1A1B69534B932F1) ^ (qword_1ED7EAC80 + 0x18EB4DAABB32FA18))));
            v13 = -348639895 * ((v12 >> 47) ^ v12);
            for (i = 1; ; ++i)
            {
              v15 = v13 & (v8 - 1);
              v16 = v9 + 24 * v15;
              v17 = *(_QWORD **)v16;
              if (*(_QWORD *)v16 == -1)
              {
                if ("implicit-section-name" == (char *)-1)
                  goto LABEL_24;
              }
              else if (v17 == (_QWORD *)-2)
              {
                if ("implicit-section-name" == (char *)-2)
                  goto LABEL_24;
              }
              else if (*(_QWORD *)(v16 + 8) == 21)
              {
                v18 = *v17 == 0x746963696C706D69 && v17[1] == 0x6E6F69746365732DLL;
                if (v18 && *(_QWORD *)((char *)v17 + 13) == 0x656D616E2D6E6F69)
                  goto LABEL_24;
              }
              if (v17 == (_QWORD *)-1)
                break;
              v13 = i + v15;
            }
          }
        }
      }
    }
    v26 = *((_QWORD *)this + 105);
    v27 = (llvm::Mangler *)*((_QWORD *)this + 117);
    v28 = sub_1C477672C((uint64_t)this + 1000, (uint64_t)a2);
    v29 = *((_QWORD *)this + 126);
    v30 = 1016;
    if (v29 == *((_QWORD *)this + 125))
      v30 = 1020;
    return sub_1C52BC980(v26, (uint64_t)a2, 2u, v27, a3, v28 != (_QWORD *)(v29 + 8 * *(unsigned int *)((char *)this + v30)), 1, 6, (_DWORD *)this + 249);
  }
}

unint64_t llvm::TargetLoweringObjectFileELF::getSectionForJumpTable(llvm::TargetLoweringObjectFileELF *this, const llvm::Function *a2, const llvm::TargetMachine *a3)
{
  if ((*((_BYTE *)a3 + 1040) & 2) != 0 || *((_QWORD *)a2 + 6))
    return sub_1C52BCD7C(*((_QWORD *)this + 105), (uint64_t)a2, 4u, *((llvm::Mangler **)this + 117), (uint64_t)a3, 1, 2, (_DWORD *)this + 249, 0);
  else
    return *((_QWORD *)this + 6);
}

unint64_t sub_1C52BCD7C(uint64_t a1, uint64_t a2, unsigned __int8 a3, llvm::Mangler *a4, uint64_t a5, int a6, int a7, _DWORD *a8, _BYTE *a9)
{
  uint64_t v15;
  const char *v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unint64_t ELFSection;
  uint64_t v24;
  char v25;
  _QWORD v27[4];
  __int16 v28;
  _QWORD v29[4];
  __int16 v30;
  void *v31;
  unint64_t v32;
  _QWORD v33[18];

  v33[16] = *MEMORY[0x1E0C80C00];
  v15 = sub_1C52BD12C(a2);
  if (v15)
  {
    a7 |= 0x200u;
    v16 = (const char *)(*(_QWORD *)v15 + 72);
    v24 = **(_QWORD **)v15;
    v25 = *(_DWORD *)(v15 + 8) == 0;
  }
  else
  {
    v24 = 0;
    v25 = 0;
    v16 = "";
  }
  if ((a3 - 5) >= 6u)
    v17 = 32 * (a3 == 11);
  else
    v17 = dword_1C85FC010[(char)(a3 - 5)];
  if (a6)
  {
    if ((*(_BYTE *)(a5 + 1040) & 0x20) != 0)
    {
      v19 = -1;
      v18 = 1;
    }
    else
    {
      v18 = 0;
      v19 = (*a8)++;
    }
  }
  else
  {
    v18 = 0;
    v19 = -1;
  }
  sub_1C52C26D8((uint64_t)&v31, a2, a3, a4, v17, v18);
  if (a3 == 3)
    v19 = 0;
  v30 = 261;
  v29[0] = v31;
  v29[1] = v32;
  v20 = sub_1C52C259C((uint64_t)v31, v32, a3);
  v28 = 261;
  v27[0] = v16;
  v27[1] = v24;
  ELFSection = llvm::MCContext::getELFSection(a1, (llvm::Twine *)v29, v20, a7, v17, (unsigned __int8 *)v27, v25, v19, a9);
  if (v31 != v33)
    free(v31);
  return ELFSection;
}

unint64_t llvm::TargetLoweringObjectFileELF::getSectionForLSDA(llvm::TargetLoweringObjectFileELF *this, const llvm::Function *a2, const llvm::MCSymbol *a3, const llvm::TargetMachine *a4)
{
  uint64_t v4;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const llvm::Function *v25;
  int v26;
  int v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD v34[4];
  __int16 v35;
  _QWORD v36[4];
  __int16 v37;
  _QWORD v38[4];
  __int16 v39;

  v4 = *((_QWORD *)this + 7);
  if (v4 && (*((_QWORD *)a2 + 6) || (*((_BYTE *)a4 + 1040) & 2) != 0))
  {
    v9 = *(_DWORD *)(v4 + 228);
    v10 = sub_1C52BD12C((uint64_t)a2);
    if (v10)
    {
      v9 |= 0x200u;
      v11 = *(_QWORD *)v10 + 72;
      v12 = **(_QWORD **)v10;
      v13 = *(_DWORD *)(v10 + 8) == 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
    }
    v14 = *((_DWORD *)a4 + 260);
    v15 = *((_QWORD *)this + 105);
    if ((v14 & 2) != 0
      && (v16 = *(_QWORD *)(v15 + 152), *(_BYTE *)(v16 + 464))
      && (v17 = *(_DWORD *)(v16 + 456), v17 >= 2))
    {
      if (v17 == 2)
      {
        if (*(int *)(v16 + 460) <= 35)
          a3 = 0;
        else
          v9 |= 0x80u;
      }
      else
      {
        v9 |= 0x80u;
      }
    }
    else
    {
      a3 = 0;
    }
    v19 = *(_QWORD *)(v4 + 200);
    v18 = *(_QWORD *)(v4 + 208);
    if ((v14 & 0x20) == 0)
    {
      v39 = 261;
      v38[0] = v19;
      v38[1] = v18;
LABEL_28:
      v32 = *(_DWORD *)(v4 + 224);
      v35 = 261;
      v34[0] = v11;
      v34[1] = v12;
      return llvm::MCContext::getELFSection(v15, (llvm::Twine *)v38, v32, v9, 0, (unsigned __int8 *)v34, v13, -1, a3);
    }
    v37 = 773;
    v36[0] = v19;
    v36[1] = v18;
    v36[2] = ".";
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v30 = 0;
      v29 = &byte_1C871356D;
      goto LABEL_27;
    }
    v20 = ***(_QWORD ***)a2;
    v21 = *(_QWORD *)(v20 + 152);
    v22 = *(unsigned int *)(v20 + 168);
    if ((_DWORD)v22)
    {
      LODWORD(v23) = (v22 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v24 = v21 + 16 * v23;
      v25 = *(const llvm::Function **)v24;
      if (*(const llvm::Function **)v24 == a2)
      {
LABEL_26:
        v28 = *(_QWORD **)(v24 + 8);
        v31 = *v28;
        v29 = (char *)(v28 + 2);
        v30 = v31;
LABEL_27:
        v38[0] = v36;
        v38[2] = v29;
        v38[3] = v30;
        v39 = 1282;
        goto LABEL_28;
      }
      v26 = 1;
      while (v25 != (const llvm::Function *)-4096)
      {
        v27 = v23 + v26++;
        v23 = v27 & (v22 - 1);
        v25 = *(const llvm::Function **)(v21 + 16 * v23);
        if (v25 == a2)
        {
          v24 = v21 + 16 * v23;
          goto LABEL_26;
        }
      }
    }
    v24 = v21 + 16 * v22;
    goto LABEL_26;
  }
  return v4;
}

uint64_t sub_1C52BD12C(uint64_t a1)
{
  uint64_t result;
  int v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  __int16 v7;
  uint64_t v8[4];
  __int16 v9;
  _BYTE v10[40];

  result = llvm::GlobalValue::getComdat(a1);
  if (result)
  {
    v2 = *(_DWORD *)(result + 8);
    if (v2)
      v3 = v2 == 3;
    else
      v3 = 1;
    if (!v3)
    {
      v4 = *(_QWORD *)result + 72;
      v5 = **(_QWORD **)result;
      v9 = 1283;
      v8[0] = (uint64_t)"ELF COMDATs only support SelectionKind::Any and SelectionKind::NoDeduplicate, '";
      v8[2] = v4;
      v8[3] = v5;
      v6 = "' cannot be lowered.";
      v7 = 259;
      sub_1C6131AAC(v8, (uint64_t *)&v6, (uint64_t)v10);
      llvm::report_fatal_error((uint64_t)v10, 1);
    }
  }
  return result;
}

uint64_t llvm::TargetLoweringObjectFileELF::shouldPutJumpTableInFunctionSection(llvm::TargetLoweringObjectFileELF *this, BOOL a2, const Function *a3)
{
  return 0;
}

uint64_t llvm::TargetLoweringObjectFileELF::getSectionForConstant(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;

  switch(a3)
  {
    case 8:
      v3 = a1[62];
      if (!v3)
        goto LABEL_12;
      break;
    case 9:
      v3 = a1[63];
      if (!v3)
        goto LABEL_12;
      break;
    case 10:
      v3 = a1[64];
      if (!v3)
        goto LABEL_12;
      break;
    case 11:
      v3 = a1[65];
      if (!v3)
        goto LABEL_12;
      break;
    default:
      if ((a3 & 0xFC) == 8 || (a3 & 0xFC) == 4)
LABEL_12:
        v4 = a1 + 6;
      else
        v4 = a1 + 61;
      v3 = *v4;
      break;
  }
  return v3;
}

unint64_t llvm::TargetLoweringObjectFileELF::getSectionForMachineBasicBlock(llvm::TargetLoweringObjectFileELF *this, const llvm::Function *a2, const llvm::MachineBasicBlock *a3, const llvm::TargetMachine *a4)
{
  int v7;
  int v8;
  uint64_t v12;
  size_t v13;
  const void *v14;
  uint64_t v15;
  size_t v16;
  int v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t ***v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ****v29;
  uint64_t ***v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t ***v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ****v39;
  uint64_t ***v40;
  int v41;
  int v42;
  _BYTE *Symbol;
  char *v44;
  size_t v45;
  uint64_t ***v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  size_t v51;
  size_t *v52;
  size_t v53;
  const void *v54;
  size_t v55;
  unint64_t v56;
  size_t **v57;
  size_t v58;
  const void *v59;
  __int128 *p_dst;
  char v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t ELFSection;
  void **v68;
  __int16 v69;
  __int128 __dst;
  unint64_t v71;
  __int16 v72;
  void *__p[2];
  unint64_t v74;
  void *v75;
  __int128 v76;
  uint64_t v77;
  char v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v75 = &v77;
  v76 = xmmword_1C85F20B0;
  v8 = *((_DWORD *)a3 + 48);
  v7 = *((_DWORD *)a3 + 49);
  if ((_DWORD)llvm::MBBSectionID::ColdSectionID == v8 && HIDWORD(llvm::MBBSectionID::ColdSectionID) == v7)
  {
    if (qword_1ED82EFA0 >= 0)
      v18 = &qword_1ED82EF90;
    else
      v18 = (uint64_t *)qword_1ED82EF90;
    if (qword_1ED82EFA0 >= 0)
      v19 = HIBYTE(qword_1ED82EFA0) & 0x7F;
    else
      v19 = qword_1ED82EF98;
    if (v19 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v75, &v77, v19, 1);
      v22 = (uint64_t *)v75;
      v20 = v76;
    }
    else
    {
      v20 = 0;
      v21 = 0;
      v22 = &v77;
      if (!v19)
        goto LABEL_23;
    }
    memcpy((char *)v22 + v20, v18, v19);
    v21 = v76;
LABEL_23:
    v23 = v21 + v19;
    *(_QWORD *)&v76 = v21 + v19;
    v24 = (uint64_t ***)**((_QWORD **)a3 + 4);
    if ((*((_BYTE *)v24 + 23) & 0x10) == 0)
    {
      v45 = 0;
      v44 = &byte_1C871356D;
      goto LABEL_46;
    }
    v25 = ***v24;
    v26 = *(_QWORD *)(v25 + 152);
    v27 = *(unsigned int *)(v25 + 168);
    if ((_DWORD)v27)
    {
      LODWORD(v28) = (v27 - 1) & ((v24 >> 4) ^ (v24 >> 9));
      v29 = (uint64_t ****)(v26 + 16 * v28);
      v30 = *v29;
      if (*v29 == v24)
      {
LABEL_45:
        v46 = v29[1];
        v47 = (size_t)*v46;
        v44 = (char *)(v46 + 2);
        v45 = v47;
LABEL_46:
        v48 = v45 + v23;
        v49 = *((_QWORD *)&v76 + 1);
        goto LABEL_47;
      }
      v31 = 1;
      while (v30 != (uint64_t ***)-4096)
      {
        v32 = v28 + v31++;
        v28 = v32 & (v27 - 1);
        v30 = *(uint64_t ****)(v26 + 16 * v28);
        if (v30 == v24)
        {
          v29 = (uint64_t ****)(v26 + 16 * v28);
          goto LABEL_45;
        }
      }
    }
    v29 = (uint64_t ****)(v26 + 16 * v27);
    goto LABEL_45;
  }
  if ((_DWORD)llvm::MBBSectionID::ExceptionSectionID == v8 && HIDWORD(llvm::MBBSectionID::ExceptionSectionID) == v7)
  {
    v78 = 46;
    v77 = *(_QWORD *)".text.eh.";
    v33 = 9;
    *(_QWORD *)&v76 = 9;
    v34 = (uint64_t ***)**((_QWORD **)a3 + 4);
    if ((*((_BYTE *)v34 + 23) & 0x10) == 0)
    {
      v53 = 0;
      goto LABEL_57;
    }
    v35 = ***v34;
    v36 = *(_QWORD *)(v35 + 152);
    v37 = *(unsigned int *)(v35 + 168);
    if ((_DWORD)v37)
    {
      LODWORD(v38) = (v37 - 1) & ((v34 >> 4) ^ (v34 >> 9));
      v39 = (uint64_t ****)(v36 + 16 * v38);
      v40 = *v39;
      if (*v39 == v34)
        goto LABEL_54;
      v41 = 1;
      while (v40 != (uint64_t ***)-4096)
      {
        v42 = v38 + v41++;
        v38 = v42 & (v37 - 1);
        v40 = *(uint64_t ****)(v36 + 16 * v38);
        if (v40 == v34)
        {
          v39 = (uint64_t ****)(v36 + 16 * v38);
          goto LABEL_54;
        }
      }
    }
    v39 = (uint64_t ****)(v36 + 16 * v37);
LABEL_54:
    v52 = (size_t *)v39[1];
    v55 = *v52;
    v54 = v52 + 2;
    v53 = v55;
    v56 = v55 + 9;
    if (v55 + 9 >= 0x81)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v75, &v77, v56, 1);
      v33 = v76;
    }
    else
    {
      v33 = 9;
      if (!v53)
      {
LABEL_57:
        v16 = v33 + v53;
        goto LABEL_58;
      }
    }
    memcpy((char *)v75 + v33, v54, v53);
    v33 = v76;
    goto LABEL_57;
  }
  v12 = *(_QWORD *)(*((_QWORD *)a3 + 4) + 80);
  v14 = *(const void **)(v12 + 200);
  v13 = *(_QWORD *)(v12 + 208);
  if (v13 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v75, &v77, *(_QWORD *)(v12 + 208), 1);
    v15 = v76;
    goto LABEL_11;
  }
  v15 = 0;
  if (v13)
  {
LABEL_11:
    memcpy((char *)v75 + v15, v14, v13);
    v15 = v76;
  }
  v16 = v15 + v13;
  *(_QWORD *)&v76 = v16;
  if ((*((_BYTE *)a4 + 1040) & 0x40) == 0)
  {
    v17 = *((_DWORD *)this + 249);
    *((_DWORD *)this + 249) = v17 + 1;
    goto LABEL_59;
  }
  if (!v16 || *((char *)v75 + v16 - 1) != 46)
  {
    if (*((_QWORD *)&v76 + 1) < v16 + 1)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v75, &v77, v16 + 1, 1);
      v16 = v76;
    }
    *((_BYTE *)v75 + v16) = 46;
    *(_QWORD *)&v76 = v76 + 1;
  }
  Symbol = (_BYTE *)llvm::MachineBasicBlock::getSymbol(a3);
  if ((*Symbol & 4) != 0)
  {
    v50 = (_QWORD *)*((_QWORD *)Symbol - 1);
    v51 = *v50;
    v44 = (char *)(v50 + 2);
    v45 = v51;
  }
  else
  {
    v44 = 0;
    v45 = 0;
  }
  v49 = *((_QWORD *)&v76 + 1);
  v23 = v76;
  v48 = v76 + v45;
LABEL_47:
  if (v49 < v48)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v75, &v77, v48, 1);
    v23 = v76;
    if (!v45)
      goto LABEL_50;
    goto LABEL_49;
  }
  if (v45)
  {
LABEL_49:
    memcpy((char *)v75 + v23, v44, v45);
    v23 = v76;
  }
LABEL_50:
  v16 = v23 + v45;
LABEL_58:
  *(_QWORD *)&v76 = v16;
  v17 = -1;
LABEL_59:
  __p[0] = 0;
  __p[1] = 0;
  v74 = 0;
  v57 = (size_t **)*((_QWORD *)a2 + 6);
  if (!v57)
  {
    v61 = 0;
    v62 = 6;
    goto LABEL_72;
  }
  v59 = *v57 + 9;
  v58 = **v57;
  if (v58 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v58 >= 0x17)
  {
    v63 = (v58 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v58 | 7) != 0x17)
      v63 = v58 | 7;
    v64 = v63 + 1;
    p_dst = (__int128 *)operator new(v63 + 1);
    *((_QWORD *)&__dst + 1) = v58;
    v71 = v64 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v71) = **v57;
    p_dst = &__dst;
    if (!v58)
      goto LABEL_69;
  }
  memmove(p_dst, v59, v58);
LABEL_69:
  *((_BYTE *)p_dst + v58) = 0;
  if (SHIBYTE(v74) < 0)
    operator delete(__p[0]);
  *(_OWORD *)__p = __dst;
  v74 = v71;
  v16 = v76;
  v61 = *((_QWORD *)a2 + 6) != 0;
  v62 = 518;
LABEL_72:
  v65 = *((_QWORD *)this + 105);
  v72 = 261;
  *(_QWORD *)&__dst = v75;
  *((_QWORD *)&__dst + 1) = v16;
  v69 = 260;
  v68 = __p;
  ELFSection = llvm::MCContext::getELFSection(v65, (llvm::Twine *)&__dst, 1, v62, 0, (unsigned __int8 *)&v68, v61, v17, 0);
  if (SHIBYTE(v74) < 0)
    operator delete(__p[0]);
  if (v75 != &v77)
    free(v75);
  return ELFSection;
}

unint64_t llvm::TargetLoweringObjectFileELF::getStaticCtorSection(llvm::TargetLoweringObjectFileELF *this, unsigned int a2, const llvm::MCSymbol *a3)
{
  return sub_1C52BD798(*((_QWORD *)this + 105), *((unsigned __int8 *)this + 992), 1, a2, a3);
}

unint64_t sub_1C52BD798(uint64_t a1, int a2, int a3, unsigned int a4, _BYTE *a5)
{
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  int v11;
  _QWORD *v12;
  const char *v13;
  const char *v14;
  char *v15;
  unint64_t v16;
  BOOL v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  unint64_t ELFSection;
  void *__p;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  int v29;
  std::string *v30;
  std::string v31;
  uint64_t (**v32)(llvm::format_object_base *__hidden);
  const char *v33;
  _QWORD v34[2];
  __int16 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  memset(&v31, 0, sizeof(v31));
  if (a5)
  {
    if ((*a5 & 4) != 0)
    {
      v12 = (_QWORD *)*((_QWORD *)a5 - 1);
      v13 = (const char *)*v12;
      v7 = (const char *)(v12 + 2);
      v8 = v13;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    v9 = 515;
    if (a2)
    {
LABEL_13:
      if (a3)
        v14 = ".init_array";
      else
        v14 = ".fini_array";
      if (a3)
        v11 = 14;
      else
        v11 = 15;
      MEMORY[0x1CAA32ABC](&v31, v14);
      if (a4 != 0xFFFF)
      {
        std::string::push_back(&v31, 46);
        if (a4)
        {
          v15 = (char *)v34 + 5;
          v16 = a4;
          do
          {
            *--v15 = (v16 % 0xA) | 0x30;
            v17 = v16 > 9;
            v16 /= 0xAuLL;
          }
          while (v17);
        }
        else
        {
          v15 = (char *)v34 + 4;
          BYTE4(v34[0]) = 48;
        }
        sub_1C4E61270(&__p, v15, (char *)v34 + 5, (char *)v34 + 5 - v15);
        v18 = v24 >= 0 ? (const std::string::value_type *)&__p : (const std::string::value_type *)__p;
        v19 = v24 >= 0 ? HIBYTE(v24) & 0x7F : v23;
        std::string::append(&v31, v18, v19);
        if (SHIBYTE(v24) < 0)
          operator delete(__p);
      }
      goto LABEL_33;
    }
  }
  else
  {
    v8 = 0;
    v7 = "";
    v9 = 3;
    if (a2)
      goto LABEL_13;
  }
  if (a3)
    v10 = ".ctors";
  else
    v10 = ".dtors";
  MEMORY[0x1CAA32ABC](&v31, v10);
  if (a4 != 0xFFFF)
  {
    LODWORD(v23) = 0;
    v27 = 0;
    v28 = 0;
    __p = &unk_1E81A7208;
    v30 = &v31;
    v29 = 0;
    v25 = 0;
    v26 = 0;
    v24 = 0;
    v32 = &off_1E8132728;
    v33 = ".%05u";
    v34[0] = 0xFFFF - a4;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&__p, (uint64_t)&v32);
    __p = off_1E81A6E70;
    if (v29 == 1)
    {
      if (v24)
        MEMORY[0x1CAA32F9C](v24, 0x1000C8077774924);
    }
  }
  v11 = 1;
LABEL_33:
  LOWORD(v26) = 260;
  __p = &v31;
  v35 = 261;
  v32 = (uint64_t (**)(llvm::format_object_base *__hidden))v7;
  v33 = v8;
  ELFSection = llvm::MCContext::getELFSection(a1, (llvm::Twine *)&__p, v11, v9, 0, (unsigned __int8 *)&v32, 1, -1, 0);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  return ELFSection;
}

unint64_t llvm::TargetLoweringObjectFileELF::getStaticDtorSection(llvm::TargetLoweringObjectFileELF *this, unsigned int a2, const llvm::MCSymbol *a3)
{
  return sub_1C52BD798(*((_QWORD *)this + 105), *((unsigned __int8 *)this + 992), 0, a2, a3);
}

unint64_t llvm::TargetLoweringObjectFileELF::lowerRelativeReference(llvm::TargetLoweringObjectFileELF *this, const llvm::GlobalValue *a2, const llvm::GlobalValue *a3, const llvm::TargetMachine *a4)
{
  int v4;
  unsigned int v8;
  unsigned int v9;
  unint64_t result;
  unint64_t Symbol;
  int v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;

  v4 = *((_DWORD *)a2 + 8);
  if ((v4 & 0xC0) != 0x80 || *(_BYTE *)(*((_QWORD *)a2 + 3) + 8) != 14)
    return 0;
  v8 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  if (v8 > 0xFF)
    return 0;
  v9 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  if ((v9 & 0xFE) == 0x12)
    v9 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a3 + 16) + 8);
  result = 0;
  if ((v4 & 0x1C00) == 0 && v9 <= 0xFF)
  {
    if ((*((_BYTE *)a3 + 33) & 0x1C) == 0)
    {
      Symbol = llvm::TargetMachine::getSymbol(a4, a2);
      v12 = *((unsigned __int16 *)this + 524);
      v13 = *((_QWORD *)this + 105);
      v14 = sub_1C484358C(v13 + 192, 24, 3);
      v15 = v12 | (*(unsigned __int8 *)(*(_QWORD *)(v13 + 152) + 18) << 16);
      *(_BYTE *)v14 = 2;
      *(_DWORD *)(v14 + 1) = v15 | (*(unsigned __int8 *)(v14 + 4) << 24);
      *(_QWORD *)(v14 + 8) = 0;
      *(_QWORD *)(v14 + 16) = Symbol;
      v16 = llvm::TargetMachine::getSymbol(a4, a3);
      v17 = *((_QWORD *)this + 105);
      v18 = sub_1C484358C(v17 + 192, 24, 3);
      v19 = *(unsigned __int8 *)(*(_QWORD *)(v17 + 152) + 18) << 16;
      *(_BYTE *)v18 = 2;
      *(_DWORD *)(v18 + 1) = v19 | (*(unsigned __int8 *)(v18 + 4) << 24);
      *(_QWORD *)(v18 + 8) = 0;
      *(_QWORD *)(v18 + 16) = v16;
      result = sub_1C484358C(*((_QWORD *)this + 105) + 192, 32, 3);
      *(_BYTE *)result = 0;
      *(_DWORD *)(result + 1) = (*(unsigned __int8 *)(result + 4) << 24) | 0x12;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = v14;
      *(_QWORD *)(result + 24) = v18;
      return result;
    }
    return 0;
  }
  return result;
}

unint64_t llvm::TargetLoweringObjectFileELF::lowerDSOLocalEquivalent(llvm::TargetLoweringObjectFileELF *this, const llvm::DSOLocalEquivalent *a2, const llvm::TargetMachine *a3)
{
  const llvm::GlobalValue *v5;
  int v6;
  unint64_t Symbol;
  int v8;
  uint64_t v9;
  unint64_t result;
  int v11;
  int v12;
  uint64_t v13;

  v5 = (const llvm::GlobalValue *)*((_QWORD *)a2 - 4);
  v6 = *((_DWORD *)v5 + 8);
  if ((v6 & 0x4000) != 0
    || (*((_DWORD *)v5 + 8) & 0xFu) - 7 < 2
    || (v6 & 0x30) != 0 && (llvm::GlobalValue::hasExternalWeakLinkage(*((llvm::GlobalValue **)a2 - 4)) & 1) == 0)
  {
    Symbol = llvm::TargetMachine::getSymbol(a3, v5);
    v13 = *((_QWORD *)this + 105);
    result = sub_1C484358C(v13 + 192, 24, 3);
    v12 = *(unsigned __int8 *)(*(_QWORD *)(v13 + 152) + 18) << 16;
    *(_BYTE *)result = 2;
    v11 = *(unsigned __int8 *)(result + 4) << 24;
  }
  else
  {
    Symbol = llvm::TargetMachine::getSymbol(a3, v5);
    v8 = *((unsigned __int16 *)this + 524);
    v9 = *((_QWORD *)this + 105);
    result = sub_1C484358C(v9 + 192, 24, 3);
    v11 = v8 | (*(unsigned __int8 *)(*(_QWORD *)(v9 + 152) + 18) << 16);
    *(_BYTE *)result = 2;
    v12 = *(unsigned __int8 *)(result + 4) << 24;
  }
  *(_DWORD *)(result + 1) = v11 | v12;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = Symbol;
  return result;
}

unint64_t llvm::TargetLoweringObjectFileELF::getSectionForCommandLines(llvm::TargetLoweringObjectFileELF *this)
{
  uint64_t v1;
  const char *v3;
  __int16 v4;
  unsigned __int8 v5[32];
  __int16 v6;

  v1 = *((_QWORD *)this + 105);
  v3 = ".GCC.command.line";
  v4 = 259;
  v6 = 257;
  return llvm::MCContext::getELFSection(v1, (llvm::Twine *)&v3, 1, 48, 1, v5, 0, -1, 0);
}

llvm::TargetLoweringObjectFileMachO *llvm::TargetLoweringObjectFileMachO::TargetLoweringObjectFileMachO(llvm::TargetLoweringObjectFileMachO *this)
{
  *((_BYTE *)this + 912) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  bzero((char *)this + 24, 0x329uLL);
  *((_BYTE *)this + 864) = 0;
  *((_QWORD *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_QWORD *)this + 115) = 0;
  *((_OWORD *)this + 58) = 0u;
  *((_BYTE *)this + 946) = 1;
  *(_OWORD *)((char *)this + 947) = 0u;
  *((_BYTE *)this + 963) = 0;
  *((_QWORD *)this + 121) = 0;
  *((_OWORD *)this + 61) = 0u;
  *(_QWORD *)this = &off_1E814C008;
  *((_WORD *)this + 472) = 257;
  return this;
}

{
  *((_BYTE *)this + 912) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  bzero((char *)this + 24, 0x329uLL);
  *((_BYTE *)this + 864) = 0;
  *((_QWORD *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_QWORD *)this + 115) = 0;
  *((_OWORD *)this + 58) = 0u;
  *((_BYTE *)this + 946) = 1;
  *(_OWORD *)((char *)this + 947) = 0u;
  *((_BYTE *)this + 963) = 0;
  *((_QWORD *)this + 121) = 0;
  *((_OWORD *)this + 61) = 0u;
  *(_QWORD *)this = &off_1E814C008;
  *((_WORD *)this + 472) = 257;
  return this;
}

double llvm::TargetLoweringObjectFileMachO::Initialize(llvm::TargetLoweringObjectFileMachO *this, llvm::MCContext *a2, const llvm::TargetMachine *a3)
{
  size_t MachOSection;
  double result;

  llvm::TargetLoweringObjectFile::Initialize(this, a2, a3);
  if (*((_DWORD *)a3 + 136))
  {
    *((_QWORD *)this + 121) = llvm::MCContext::getMachOSection((uint64_t)a2, (uint64_t)"__DATA", 6uLL, (uint64_t)"__mod_init_func", 15, 9, 0, 19, 0);
    MachOSection = llvm::MCContext::getMachOSection((uint64_t)a2, (uint64_t)"__DATA", 6uLL, (uint64_t)"__mod_term_func", 15, 10, 0, 19, 0);
  }
  else
  {
    *((_QWORD *)this + 121) = llvm::MCContext::getMachOSection((uint64_t)a2, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__constructor", 13, 0, 0, 19, 0);
    MachOSection = llvm::MCContext::getMachOSection((uint64_t)a2, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__destructor", 12, 0, 0, 19, 0);
  }
  *((_QWORD *)this + 122) = MachOSection;
  *((_DWORD *)this + 237) = 155;
  *(_QWORD *)&result = 0x9B00000010;
  *((_QWORD *)this + 119) = 0x9B00000010;
  return result;
}

void llvm::TargetLoweringObjectFileMachO::emitModuleMetadata(llvm::TargetLoweringObjectFileMachO *this, llvm::MCStreamer *a2, llvm::Module *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  size_t v9;
  const void *v10;
  unint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  size_t MachOSection;
  uint64_t v28;
  unint64_t Symbol;
  uint64_t v32;
  uint64_t NamedMetadata;
  const char *v34;
  __int16 v35;
  char *v36;
  std::string v37;
  std::string *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  uint64_t v42[4];
  __int16 v43;
  uint64_t v44[5];
  void *__dst[2];
  unint64_t v46;
  char *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  _BYTE v59[16];
  __int16 v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v57 = "llvm.linker.options";
  v60 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)a3, (uint64_t)&v57);
  if (NamedMetadata)
  {
    v32 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v32)
    {
      v4 = 0;
      while (1)
      {
        v5 = *(_QWORD *)(**(_QWORD **)(NamedMetadata + 48) + 8 * v4);
        v57 = v59;
        v58 = 0x400000000;
        v6 = *(unsigned int *)(v5 + 8);
        if ((_DWORD)v6)
          break;
        v19 = 0;
        v18 = v59;
LABEL_19:
        (*(void (**)(llvm::MCStreamer *, char *, uint64_t))(*(_QWORD *)a2 + 216))(a2, v18, v19);
        sub_1C4E01820(&v57);
        if (++v4 == v32)
          goto LABEL_20;
      }
      v7 = -8 * v6;
      while (1)
      {
        v8 = *(unint64_t **)(*(_QWORD *)(v5 + v7) + 8);
        v11 = *v8;
        v10 = v8 + 3;
        v9 = v11;
        if (v11 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v9 >= 0x17)
        {
          v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17)
            v13 = v9 | 7;
          v14 = v13 + 1;
          v12 = (void **)operator new(v13 + 1);
          __dst[1] = (void *)v9;
          v46 = v14 | 0x8000000000000000;
          __dst[0] = v12;
        }
        else
        {
          HIBYTE(v46) = v9;
          v12 = __dst;
          if (!v9)
            goto LABEL_14;
        }
        memmove(v12, v10, v9);
LABEL_14:
        *((_BYTE *)v12 + v9) = 0;
        v15 = sub_1C4E01890((uint64_t)&v57, (unint64_t)__dst, 1);
        v16 = &v57[24 * v58];
        v17 = *(_OWORD *)v15;
        *((_QWORD *)v16 + 2) = *(_QWORD *)(v15 + 16);
        *(_OWORD *)v16 = v17;
        *(_QWORD *)(v15 + 8) = 0;
        *(_QWORD *)(v15 + 16) = 0;
        *(_QWORD *)v15 = 0;
        LODWORD(v58) = v58 + 1;
        if (SHIBYTE(v46) < 0)
          operator delete(__dst[0]);
        v7 += 8;
        if (!v7)
        {
          v18 = v57;
          v19 = v58;
          goto LABEL_19;
        }
      }
    }
  }
LABEL_20:
  v57 = "llvm.dyld.libs";
  v60 = 259;
  v20 = llvm::Module::getNamedMetadata((uint64_t)a3, (uint64_t)&v57);
  if (v20)
  {
    v21 = v20;
    v22 = *(unsigned int *)(*(_QWORD *)(v20 + 48) + 8);
    if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = 8 * v22;
      do
      {
        v25 = *(_QWORD *)(**(_QWORD **)(v21 + 48) + v23);
        v26 = *(_QWORD **)(*(_QWORD *)(v25 - 8 * *(unsigned int *)(v25 + 8)) + 8);
        (*(void (**)(llvm::MCStreamer *, _QWORD *, _QWORD))(*(_QWORD *)a2 + 224))(a2, v26 + 3, *v26);
        v23 += 8;
      }
      while (v24 != v23);
    }
  }
  v55 = 0;
  v56 = 0;
  v54 = 0;
  sub_1C52BAA20((uint64_t)a3, (_DWORD *)&v56 + 1, (int *)&v56, &v54);
  llvm::TargetLoweringObjectFile::emitCGProfileMetadata(this, a2, a3);
  if (v55)
  {
    v52 = 0;
    v53 = 0;
    v50 = 0;
    v51 = 0;
    v49 = 0;
    v48 = 0;
    llvm::MCSectionMachO::ParseSectionSpecifier(v54, v55, &v52, &v50, (int *)&v49 + 1, &v48, &v49, &v47);
    if (v47)
    {
      v43 = 1283;
      v42[0] = (uint64_t)"Invalid section specifier '";
      v42[2] = v50;
      v42[3] = v51;
      v40 = "': ";
      v41 = 259;
      sub_1C6131AAC(v42, (uint64_t *)&v40, (uint64_t)v44);
      v36 = v47;
      v47 = 0;
      sub_1C61D2548(&v36, &v37);
      v39 = 260;
      v38 = &v37;
      sub_1C6131AAC(v44, (uint64_t *)&v38, (uint64_t)__dst);
      v34 = ".";
      v35 = 259;
      sub_1C6131AAC((uint64_t *)__dst, (uint64_t *)&v34, (uint64_t)&v57);
      llvm::report_fatal_error((uint64_t)&v57, 1);
    }
    MachOSection = llvm::MCContext::getMachOSection(*((_QWORD *)this + 105), v52, v53, v50, v51, SHIDWORD(v49), v49, 19, 0);
    (*(void (**)(llvm::MCStreamer *, size_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, MachOSection, 0);
    v28 = *((_QWORD *)this + 105);
    v60 = 261;
    v57 = "L_OBJC_IMAGE_INFO";
    v58 = 17;
    Symbol = llvm::MCContext::getOrCreateSymbol(v28, (uint64_t)&v57);
    (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, Symbol, 0);
    (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, HIDWORD(v56), 4);
    (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, v56, 4);
    (*(void (**)(llvm::MCStreamer *))(*(_QWORD *)a2 + 152))(a2);
  }
}

size_t llvm::TargetLoweringObjectFileMachO::getExplicitSectionGlobal(uint64_t a1, llvm::GlobalObject *this, int a3)
{
  llvm::GlobalObject *SectionImpl;
  uint64_t v7;
  uint64_t v8;
  size_t result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned __int8 v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  int i;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  BOOL v24;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  int v50;
  uint64_t v51;
  const char *v52;
  __int16 v53;
  char *v54;
  std::string v55;
  std::string *v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  uint64_t v60[4];
  __int16 v61;
  const char *v62;
  __int16 v63;
  uint64_t v64[4];
  __int16 v65;
  uint64_t v66[5];
  uint64_t v67[5];
  uint64_t v68[4];
  __int16 v69;
  uint64_t v70[4];
  __int16 v71;
  _BYTE v72[40];
  char *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;

  if ((*((_BYTE *)this + 34) & 0x40) != 0)
  {
    SectionImpl = llvm::GlobalObject::getSectionImpl(this);
    v7 = v8;
  }
  else
  {
    SectionImpl = 0;
    v7 = 0;
  }
  if (*((_BYTE *)this + 16))
    goto LABEL_5;
  v10 = *((_QWORD *)this + 14);
  if (!v10)
    goto LABEL_5;
  if (!*(_DWORD *)(v10 + 8))
    goto LABEL_5;
  v11 = *(_QWORD *)(v10 + 40);
  if (!v11)
    goto LABEL_5;
  v12 = *(_DWORD *)(v11 + 40);
  if (!v12)
    goto LABEL_5;
  v13 = *(_QWORD *)(v11 + 24);
  v14 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v15 = &unk_1ED7EA000;
  if ((v14 & 1) == 0)
  {
    v51 = v13;
    v50 = v12;
    v46 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v12 = v50;
    v13 = v51;
    v15 = &unk_1ED7EA000;
    if (v46)
    {
      v47 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v47 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v47;
      __cxa_guard_release(&qword_1ED7EAC88);
      v12 = v50;
      v13 = v51;
      v15 = (_QWORD *)&unk_1ED7EA000;
    }
  }
  v16 = v15[400];
  v17 = __ROR8__(v16 ^ 0xF54B982192FEA167, 30);
  v18 = 0x9DDFEA08EB382D69
      * ((v16 + 0x18EB4DAABB32FA18) ^ ((0x9DDFEA08EB382D69
                                        * ((v17 - 0x1A1B69534B932F1) ^ (v16 + 0x18EB4DAABB32FA18))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v17 - 0x1A1B69534B932F1) ^ (v16 + 0x18EB4DAABB32FA18))));
  v19 = -348639895 * ((v18 >> 47) ^ v18);
  for (i = 1; ; ++i)
  {
    v21 = v19 & (v12 - 1);
    v22 = v13 + 24 * v21;
    v23 = *(_QWORD **)v22;
    if (*(_QWORD *)v22 == -1)
    {
      if ("implicit-section-name" == (char *)-1)
        goto LABEL_31;
      goto LABEL_17;
    }
    if (v23 != (_QWORD *)-2)
      break;
    if ("implicit-section-name" == (char *)-2)
      goto LABEL_31;
LABEL_17:
    if (v23 == (_QWORD *)-1)
      goto LABEL_5;
    v19 = i + v21;
  }
  if (*(_QWORD *)(v22 + 8) != 21)
    goto LABEL_17;
  v24 = *v23 == 0x746963696C706D69 && v23[1] == 0x6E6F69746365732DLL;
  if (!v24 || *(_QWORD *)((char *)v23 + 13) != 0x656D616E2D6E6F69)
    goto LABEL_17;
LABEL_31:
  v26 = *((_QWORD *)this + 14);
  if (!v26)
    goto LABEL_58;
  if (!*(_DWORD *)(v26 + 8))
    goto LABEL_58;
  v27 = *(_QWORD *)(v26 + 40);
  if (!v27)
    goto LABEL_58;
  v28 = *(_DWORD *)(v27 + 40);
  if (!v28)
    goto LABEL_58;
  v29 = *(_QWORD *)(v27 + 24);
  v30 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v30 & 1) == 0)
  {
    v48 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v15 = &unk_1ED7EA000;
    if (v48)
    {
      v49 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v49 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v49;
      __cxa_guard_release(&qword_1ED7EAC88);
      v15 = (_QWORD *)&unk_1ED7EA000;
    }
  }
  v31 = v15[400];
  v32 = __ROR8__(v31 ^ 0xF54B982192FEA167, 30);
  v33 = 0x9DDFEA08EB382D69
      * ((v31 + 0x18EB4DAABB32FA18) ^ ((0x9DDFEA08EB382D69
                                        * ((v32 - 0x1A1B69534B932F1) ^ (v31 + 0x18EB4DAABB32FA18))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v32 - 0x1A1B69534B932F1) ^ (v31 + 0x18EB4DAABB32FA18))));
  v34 = -348639895 * ((v33 >> 47) ^ v33);
  v35 = 1;
  while (2)
  {
    v36 = v34 & (v28 - 1);
    v37 = v29 + 24 * v36;
    v38 = *(_QWORD **)v37;
    if (*(_QWORD *)v37 == -1)
    {
      if ("implicit-section-name" == (char *)-1)
        break;
      goto LABEL_39;
    }
    if (v38 == (_QWORD *)-2)
    {
      if ("implicit-section-name" == (char *)-2)
        break;
      goto LABEL_39;
    }
    if (*(_QWORD *)(v37 + 8) != 21
      || (*v38 == 0x746963696C706D69 ? (v39 = v38[1] == 0x6E6F69746365732DLL) : (v39 = 0),
          v39 ? (v40 = *(_QWORD *)((char *)v38 + 13) == 0x656D616E2D6E6F69) : (v40 = 0),
          !v40))
    {
LABEL_39:
      if (v38 == (_QWORD *)-1)
        goto LABEL_58;
      v34 = v35 + v36;
      ++v35;
      continue;
    }
    break;
  }
  v41 = *(_QWORD *)(v37 + 16);
  if (v41)
  {
    v7 = *(unsigned int *)(v41 + 16);
    SectionImpl = (llvm::GlobalObject *)(v41 + *(unsigned int *)(v41 + 12) + 25);
    goto LABEL_5;
  }
LABEL_58:
  SectionImpl = 0;
  v7 = 0;
LABEL_5:
  v78 = 0;
  v79 = 0;
  v76 = 0;
  v77 = 0;
  v75 = 0;
  v74 = 0;
  sub_1C52BEA20((uint64_t)this);
  llvm::MCSectionMachO::ParseSectionSpecifier((uint64_t)SectionImpl, v7, &v78, &v76, (int *)&v75 + 1, &v74, &v75, &v73);
  if (v73)
  {
    v65 = 1283;
    v64[0] = (uint64_t)"Global variable '";
    v64[2] = (uint64_t)llvm::Value::getName(this);
    v64[3] = v44;
    v62 = "' has an invalid section specifier '";
    v63 = 259;
    sub_1C6131AAC(v64, (uint64_t *)&v62, (uint64_t)v66);
    v61 = 261;
    v60[0] = sub_1C52BE93C((uint64_t)this);
    v60[1] = v45;
    sub_1C6131AAC(v66, v60, (uint64_t)v67);
    v58 = "': ";
    v59 = 259;
    sub_1C6131AAC(v67, (uint64_t *)&v58, (uint64_t)v68);
    v54 = v73;
    v73 = 0;
    sub_1C61D2548(&v54, &v55);
    v57 = 260;
    v56 = &v55;
    sub_1C6131AAC(v68, (uint64_t *)&v56, (uint64_t)v70);
    v52 = ".";
    v53 = 259;
    v43 = (uint64_t *)&v52;
LABEL_61:
    sub_1C6131AAC(v70, v43, (uint64_t)v72);
    llvm::report_fatal_error((uint64_t)v72, 1);
  }
  result = llvm::MCContext::getMachOSection(*(_QWORD *)(a1 + 840), v78, v79, v76, v77, SHIDWORD(v75), v75, a3, 0);
  if (v74)
  {
    if (*(_DWORD *)(result + 240) != HIDWORD(v75))
    {
LABEL_59:
      v71 = 1283;
      v70[0] = (uint64_t)"Global variable '";
      v70[2] = (uint64_t)llvm::Value::getName(this);
      v70[3] = v42;
      v68[0] = (uint64_t)"' section type or attributes does not match previous section specifier";
      v69 = 259;
      v43 = v68;
      goto LABEL_61;
    }
  }
  else
  {
    HIDWORD(v75) = *(_DWORD *)(result + 240);
  }
  if (*(_DWORD *)(result + 244) != (_DWORD)v75)
    goto LABEL_59;
  return result;
}

uint64_t sub_1C52BE93C(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if ((*(_BYTE *)(a1 + 34) & 0x40) == 0)
    return 0;
  v1 = ***(_QWORD ***)a1;
  v15 = a1;
  v2 = *(_DWORD *)(v1 + 2520);
  if (!v2)
  {
    v13 = 0;
LABEL_18:
    v6 = sub_1C53D65B8(v1 + 2504, (uint64_t)&v15, &v15, v13);
    v14 = v15;
    v6[1] = 0;
    v6[2] = 0;
    *v6 = v14;
    return v6[1];
  }
  v3 = *(_QWORD *)(v1 + 2504);
  v4 = v2 - 1;
  v5 = (v2 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v6 = (_QWORD *)(v3 + 24 * v5);
  v7 = *v6;
  if (*v6 != a1)
  {
    v9 = 0;
    v10 = 1;
    while (v7 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v7 == -8192;
      if (v11)
        v9 = v6;
      v12 = v5 + v10++;
      v5 = v12 & v4;
      v6 = (_QWORD *)(v3 + 24 * (v12 & v4));
      v7 = *v6;
      if (*v6 == a1)
        return v6[1];
    }
    if (v9)
      v13 = v9;
    else
      v13 = v6;
    goto LABEL_18;
  }
  return v6[1];
}

uint64_t **sub_1C52BEA20(uint64_t a1)
{
  uint64_t **result;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[4];
  __int16 v7;
  _BYTE v8[40];

  result = (uint64_t **)llvm::GlobalValue::getComdat(a1);
  if (result)
  {
    v2 = (uint64_t)(*result + 9);
    v3 = **result;
    v7 = 1283;
    v6[0] = (uint64_t)"MachO doesn't support COMDATs, '";
    v6[2] = v2;
    v6[3] = v3;
    v4 = "' cannot be lowered.";
    v5 = 259;
    sub_1C6131AAC(v6, (uint64_t *)&v4, (uint64_t)v8);
    llvm::report_fatal_error((uint64_t)v8, 1);
  }
  return result;
}

uint64_t llvm::TargetLoweringObjectFileMachO::SelectSectionForGlobal(uint64_t a1, uint64_t a2, char a3)
{
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v12;

  sub_1C52BEA20(a2);
  if ((a3 & 0xFD) == 0xC)
  {
    v8 = a1 + 424;
    return *(_QWORD *)v8;
  }
  if (a3 == 13)
  {
    v8 = a1 + 416;
    return *(_QWORD *)v8;
  }
  v6 = *(_DWORD *)(a2 + 32) & 0xF;
  if ((a3 & 0xFE) == 2)
  {
    v7 = v6 > 0xA || ((1 << v6) & 0x63C) == 0;
    v8 = a1 + 560;
    v9 = a1 + 24;
  }
  else
  {
    if (v6 > 0xA || ((1 << v6) & 0x63C) == 0)
    {
      if (a3 == 5)
      {
        if (llvm::DataLayout::getPreferredAlign((llvm::DataLayout *)(*(_QWORD *)(a2 + 40) + 272), (const llvm::GlobalVariable *)a2) <= 4u)
        {
          v8 = a1 + 544;
          return *(_QWORD *)v8;
        }
      }
      else if (a3 == 6)
      {
        if (v6
          && llvm::DataLayout::getPreferredAlign((llvm::DataLayout *)(*(_QWORD *)(a2 + 40) + 272), (const llvm::GlobalVariable *)a2) <= 4u)
        {
          v8 = a1 + 552;
          return *(_QWORD *)v8;
        }
      }
      else
      {
        v12 = a3 & 0xFC;
        if (v6 == 8 && v12 == 8)
        {
          switch(a3)
          {
            case 10:
              v8 = a1 + 632;
              return *(_QWORD *)v8;
            case 9:
              v8 = a1 + 624;
              return *(_QWORD *)v8;
            case 8:
              v8 = a1 + 616;
              return *(_QWORD *)v8;
          }
        }
        else if (v12 != 4 && v12 != 8)
        {
          switch(a3)
          {
            case 20:
              v8 = a1 + 576;
              break;
            case 16:
              v8 = a1 + 608;
              break;
            case 17:
              v8 = a1 + 600;
              break;
            default:
              v8 = a1 + 32;
              break;
          }
          return *(_QWORD *)v8;
        }
      }
      v8 = a1 + 48;
      return *(_QWORD *)v8;
    }
    if ((a3 & 0xFC) == 8 || (a3 & 0xFC) == 4)
    {
      v8 = a1 + 568;
      return *(_QWORD *)v8;
    }
    v7 = a3 == 20;
    v8 = a1 + 584;
    v9 = a1 + 592;
  }
  if (v7)
    v8 = v9;
  return *(_QWORD *)v8;
}

void llvm::TargetLoweringObjectFileMachO::getNameWithPrefix(uint64_t a1, uint64_t a2, const llvm::GlobalValue *a3, const llvm::GlobalObject *a4)
{
  llvm::TargetLoweringObjectFile *v8;
  const llvm::TargetMachine *v9;
  unsigned int KindForGlobal;
  uint64_t v11;
  int v12;
  llvm::Mangler *v13;
  uint64_t (**v14)();
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v14 = 0;
  v15 = 0;
  LODWORD(v16) = 0;
  v8 = (llvm::TargetLoweringObjectFile *)sub_1C53D5A28((uint64_t)a3, (uint64_t)&v14);
  MEMORY[0x1CAA32FB4](v14, 8);
  if (v8)
  {
    KindForGlobal = llvm::TargetLoweringObjectFile::getKindForGlobal(v8, a4, v9);
    v11 = llvm::TargetLoweringObjectFile::SectionForGlobal(a1, (uint64_t)v8, KindForGlobal, (uint64_t)a4);
    v12 = (*(uint64_t (**)(_QWORD *, uint64_t))(**((_QWORD **)a4 + 70) + 24))(*((_QWORD **)a4 + 70), v11);
  }
  else
  {
    v12 = 1;
  }
  v13 = *(llvm::Mangler **)(a1 + 936);
  LODWORD(v15) = 0;
  v19 = 0;
  v20 = 0;
  v14 = &off_1E81A7280;
  v22 = a2;
  v21 = 0;
  v17 = 0;
  v18 = 0;
  v16 = 0;
  llvm::Mangler::getNameWithPrefix(v13, (llvm::raw_ostream *)&v14, a3, v12);
  v14 = (uint64_t (**)())off_1E81A6E70;
  if (v21 == 1)
  {
    if (v16)
      MEMORY[0x1CAA32F9C](v16, 0x1000C8077774924);
  }
}

unint64_t llvm::TargetLoweringObjectFileCOFF::getExplicitSectionGlobal(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  int v8;
  llvm::GlobalObject *SectionImpl;
  size_t v10;
  size_t v11;
  unsigned int v12;
  void *v13;
  char *v14;
  _BYTE *Symbol;
  _QWORD *v16;
  void *v17;

  v8 = sub_1C52BEEA0(a3, a4[118]);
  if ((*(_BYTE *)(a2 + 34) & 0x40) != 0)
  {
    SectionImpl = llvm::GlobalObject::getSectionImpl((llvm::GlobalObject *)a2);
    v10 = v11;
  }
  else
  {
    SectionImpl = 0;
    v10 = 0;
  }
  if (!*(_QWORD *)(a2 + 48))
    goto LABEL_8;
  v12 = sub_1C52BEF48(a2);
  if (v12 == 5)
    a2 = sub_1C52BEFBC(a2);
  if ((*(_DWORD *)(a2 + 32) & 0xF) != 8)
  {
    Symbol = (_BYTE *)llvm::TargetMachine::getSymbol((llvm::TargetMachine *)a4, (const llvm::GlobalValue *)a2);
    if ((*Symbol & 4) != 0)
    {
      v16 = (_QWORD *)*((_QWORD *)Symbol - 1);
      v17 = (void *)*v16;
      v14 = (char *)(v16 + 2);
      v13 = v17;
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    v8 |= 0x1000u;
  }
  else
  {
LABEL_8:
    v13 = 0;
    v12 = 0;
    v14 = "";
  }
  return llvm::MCContext::getCOFFSection(*(_QWORD *)(a1 + 840), SectionImpl, v10, v8, a3, v14, v13, v12, 0xFFFFFFFF, 0);
}

uint64_t sub_1C52BEEA0(char a1, int a2)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;

  if (!a1)
    return 0x2000000;
  if (a1 == 1)
    return 33556480;
  if ((a1 & 0xFE) == 2)
  {
    if (a2 == 39)
      return 1610743840;
    else
      return 1610612768;
  }
  else
  {
    v3 = (a1 - 12);
    v4 = a1 & 0xFC;
    if (v3 >= 9)
      v5 = 0;
    else
      v5 = -1073741760;
    if (a1 == 20)
      v6 = 1073741888;
    else
      v6 = v5;
    if (v4 == 8)
      v6 = 1073741888;
    if (v4 == 4)
      v7 = 1073741888;
    else
      v7 = v6;
    if (v3 >= 3)
      v8 = v7;
    else
      v8 = -1073741760;
    if ((a1 - 15) >= 3u)
      return v8;
    else
      return 3221225600;
  }
}

uint64_t sub_1C52BEF48(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  llvm::GlobalAlias *AliaseeObject;
  uint64_t v5;

  result = llvm::GlobalValue::getComdat(a1);
  if (result)
  {
    v3 = result;
    AliaseeObject = (llvm::GlobalAlias *)sub_1C52BEFBC(a1);
    if (*((_BYTE *)AliaseeObject + 16) == 1)
      AliaseeObject = (llvm::GlobalAlias *)llvm::GlobalAlias::getAliaseeObject(AliaseeObject);
    if (AliaseeObject == (llvm::GlobalAlias *)a1)
    {
      v5 = *(int *)(v3 + 8);
      if (v5 > 4)
        return 0;
      else
        return dword_1C85FC068[v5];
    }
    else
    {
      return 5;
    }
  }
  return result;
}

uint64_t sub_1C52BEFBC(uint64_t a1)
{
  unint64_t **Comdat;
  unsigned __int8 *v3;
  unint64_t v4;
  uint64_t AliaseeObject;
  uint64_t v6;
  int v7;
  unint64_t **v8;
  const char *v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  unsigned __int8 *v14;
  unint64_t v15;
  __int16 v16;
  _BYTE v17[40];

  Comdat = (unint64_t **)llvm::GlobalValue::getComdat(a1);
  v3 = (unsigned __int8 *)(*Comdat + 9);
  v4 = **Comdat;
  AliaseeObject = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(a1 + 40) + 112), v3, v4);
  if (!AliaseeObject)
  {
    v16 = 1283;
    v13 = "Associative COMDAT symbol '";
    v14 = v3;
    v15 = v4;
    v10 = "' does not exist.";
    goto LABEL_11;
  }
  v6 = AliaseeObject;
  v7 = *(unsigned __int8 *)(AliaseeObject + 16);
  if (v7 == 2
    || v7 == 1 && (AliaseeObject = llvm::GlobalAlias::getAliaseeObject((llvm::GlobalAlias *)AliaseeObject)) == 0)
  {
    v8 = 0;
  }
  else
  {
    v8 = *(unint64_t ***)(AliaseeObject + 48);
  }
  if (v8 != Comdat)
  {
    v16 = 1283;
    v13 = "Associative COMDAT symbol '";
    v14 = v3;
    v15 = v4;
    v10 = "' is not a key for its COMDAT.";
LABEL_11:
    v11 = v10;
    v12 = 259;
    sub_1C6131AAC((uint64_t *)&v13, (uint64_t *)&v11, (uint64_t)v17);
    llvm::report_fatal_error((uint64_t)v17, 1);
  }
  return v6;
}

unint64_t llvm::TargetLoweringObjectFileCOFF::SelectSectionForGlobal(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  int v7;
  int v8;
  int v9;
  const char *v11;
  size_t v12;
  unsigned int v13;
  int v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  const llvm::GlobalValue *v22;
  int v23;
  unsigned int v24;
  unint64_t COFFSection;
  _BYTE *Symbol;
  _QWORD *v27;
  void *v28;
  _QWORD *v29;
  void *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const llvm::GlobalValue **v37;
  const llvm::GlobalValue *v38;
  int v39;
  int v40;
  size_t *v41;
  const void *v42;
  size_t v43;
  size_t v44;
  const void *v46;
  size_t v47;
  char v48;
  void *v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  char v53;
  uint64_t v54;
  int v55;
  void **v56;
  void *v57;
  size_t v58;
  uint64_t v59;
  _QWORD v60[34];

  v60[32] = *MEMORY[0x1E0C80C00];
  v7 = a3 & 0xFE;
  if (v7 == 2)
    v8 = 2;
  else
    v8 = 4;
  v9 = a4[260] & v8;
  if (a3 != 18 && v9 || *(_QWORD *)(a2 + 48))
  {
    if (v7 == 2)
    {
      v11 = ".text";
      v12 = 5;
    }
    else
    {
      v13 = a3 - 15;
      v14 = a3 & 0xFC;
      if (a3 == 20)
        v15 = ".rdata";
      else
        v15 = ".data";
      v16 = 5;
      if (a3 == 20)
        v16 = 6;
      if (v14 == 8)
      {
        v15 = ".rdata";
        v16 = 6;
      }
      if (v14 == 4)
      {
        v15 = ".rdata";
        v17 = 6;
      }
      else
      {
        v17 = v16;
      }
      if (a3 - 12 >= 3)
      {
        v18 = v17;
      }
      else
      {
        v15 = ".tls$";
        v18 = 5;
      }
      if (v13 >= 3)
        v11 = v15;
      else
        v11 = ".bss";
      if (v13 >= 3)
        v12 = v18;
      else
        v12 = 4;
    }
    v57 = v60;
    v59 = 256;
    memcpy(v60, v11, v12);
    v58 = v12;
    v19 = sub_1C52BEEA0(a3, a4[118]);
    v20 = sub_1C52BEF48(a2);
    if (v20 <= 1)
      v21 = 1;
    else
      v21 = v20;
    v22 = (const llvm::GlobalValue *)a2;
    if (*(_QWORD *)(a2 + 48))
      v22 = (const llvm::GlobalValue *)sub_1C52BEFBC(a2);
    v23 = v19 | 0x1000;
    if (v9)
    {
      v24 = *(_DWORD *)(a1 + 992);
      *(_DWORD *)(a1 + 992) = v24 + 1;
    }
    else
    {
      v24 = -1;
    }
    if ((*((_DWORD *)v22 + 8) & 0xF) == 8)
    {
      v49 = &v51;
      v50 = xmmword_1C64638F0;
      llvm::Mangler::getNameWithPrefix(*(llvm::Mangler **)(a1 + 936), (uint64_t)&v49, (const llvm::GlobalValue *)a2, 1);
      COFFSection = llvm::MCContext::getCOFFSection(*(_QWORD *)(a1 + 840), v57, v58, v23, a3, v49, (void *)v50, v21, v24, 0);
      if (v49 != &v51)
        free(v49);
      goto LABEL_73;
    }
    Symbol = (_BYTE *)llvm::TargetMachine::getSymbol((llvm::TargetMachine *)a4, v22);
    if ((*Symbol & 4) != 0)
    {
      v29 = (_QWORD *)*((_QWORD *)Symbol - 1);
      v30 = (void *)*v29;
      v27 = v29 + 2;
      v28 = v30;
    }
    else
    {
      v27 = 0;
      v28 = 0;
    }
    if (!*(_BYTE *)(a2 + 16))
    {
      llvm::Function::getSectionPrefix((uint64_t ***)a2, (uint64_t)&v46);
      if (v48)
      {
        LODWORD(v50) = 0;
        v53 = 0;
        v54 = 0;
        v49 = &off_1E81A7280;
        v56 = &v57;
        v55 = 0;
        v51 = 0;
        v52 = 0;
        *((_QWORD *)&v50 + 1) = 0;
        llvm::raw_ostream::write((llvm::raw_ostream *)&v49, 36);
        v31 = v47;
        if (v47 <= v51 - (uint64_t)v52)
        {
          if (v47)
          {
            memcpy(v52, v46, v47);
            v52 += v31;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v49, (const char *)v46, v47);
        }
        v49 = off_1E81A6E70;
        if (v55 == 1 && *((_QWORD *)&v50 + 1))
          MEMORY[0x1CAA32F9C](*((_QWORD *)&v50 + 1), 0x1000C8077774924);
      }
    }
    v32 = *(_QWORD *)(a1 + 840);
    if (*(_DWORD *)(v32 + 60) != 15 || *(_DWORD *)(v32 + 64) != 1)
    {
LABEL_72:
      COFFSection = llvm::MCContext::getCOFFSection(v32, v57, v58, v23, a3, v27, v28, v21, v24, 0);
LABEL_73:
      if (v57 != v60)
        free(v57);
      return COFFSection;
    }
    LODWORD(v50) = 0;
    v53 = 0;
    v54 = 0;
    v49 = &off_1E81A7280;
    v56 = &v57;
    v55 = 0;
    v51 = 0;
    v52 = 0;
    *((_QWORD *)&v50 + 1) = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v49, 36);
    if ((*((_BYTE *)v22 + 23) & 0x10) == 0)
    {
LABEL_70:
      v49 = off_1E81A6E70;
      if (v55 == 1 && *((_QWORD *)&v50 + 1))
        MEMORY[0x1CAA32F9C](*((_QWORD *)&v50 + 1), 0x1000C8077774924);
      v32 = *(_QWORD *)(a1 + 840);
      goto LABEL_72;
    }
    v33 = ***(_QWORD ***)v22;
    v34 = *(_QWORD *)(v33 + 152);
    v35 = *(unsigned int *)(v33 + 168);
    if ((_DWORD)v35)
    {
      LODWORD(v36) = (v35 - 1) & ((v22 >> 4) ^ (v22 >> 9));
      v37 = (const llvm::GlobalValue **)(v34 + 16 * v36);
      v38 = *v37;
      if (*v37 == v22)
        goto LABEL_66;
      v39 = 1;
      while (v38 != (const llvm::GlobalValue *)-4096)
      {
        v40 = v36 + v39++;
        v36 = v40 & (v35 - 1);
        v38 = *(const llvm::GlobalValue **)(v34 + 16 * v36);
        if (v38 == v22)
        {
          v37 = (const llvm::GlobalValue **)(v34 + 16 * v36);
          goto LABEL_66;
        }
      }
    }
    v37 = (const llvm::GlobalValue **)(v34 + 16 * v35);
LABEL_66:
    v41 = (size_t *)v37[1];
    v44 = *v41;
    v42 = v41 + 2;
    v43 = v44;
    if (v44 <= v51 - (uint64_t)v52)
    {
      if (v43)
      {
        memcpy(v52, v42, v43);
        v52 += v43;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v49, (const char *)v42, v43);
    }
    goto LABEL_70;
  }
  if (v7 == 2)
    return *(_QWORD *)(a1 + 24);
  if (a3 - 12 <= 2)
    return *(_QWORD *)(a1 + 416);
  if ((a3 & 0xFC) != 4 && (a3 & 0xFC) != 8)
  {
    if (a3 - 15 < 4)
      return *(_QWORD *)(a1 + 40);
    if (a3 != 20)
      return *(_QWORD *)(a1 + 32);
  }
  return *(_QWORD *)(a1 + 48);
}

void llvm::TargetLoweringObjectFileCOFF::getNameWithPrefix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;

  if ((*(_DWORD *)(a3 + 32) & 0xF) != 8)
    goto LABEL_5;
  if (*(_BYTE *)(a3 + 16) != 3)
  {
    if (*(_BYTE *)(a3 + 16) || (*(_BYTE *)(a4 + 1040) & 2) == 0)
      goto LABEL_5;
LABEL_8:
    v4 = 1;
    goto LABEL_6;
  }
  if ((*(_BYTE *)(a4 + 1040) & 4) != 0)
    goto LABEL_8;
LABEL_5:
  v4 = 0;
LABEL_6:
  llvm::Mangler::getNameWithPrefix(*(llvm::Mangler **)(a1 + 936), a2, (const llvm::GlobalValue *)a3, v4);
}

unint64_t llvm::TargetLoweringObjectFileCOFF::getSectionForJumpTable(llvm::TargetLoweringObjectFileCOFF *this, const llvm::Function *a2, const llvm::TargetMachine *a3)
{
  _BYTE *Symbol;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  unsigned int v10;

  if ((*((_BYTE *)a3 + 1040) & 2) == 0 && !*((_QWORD *)a2 + 6) || (*((_DWORD *)a2 + 8) & 0xF) == 8)
    return *((_QWORD *)this + 6);
  Symbol = (_BYTE *)llvm::TargetMachine::getSymbol(a3, a2);
  if ((*Symbol & 4) != 0)
  {
    v8 = (_QWORD *)*((_QWORD *)Symbol - 1);
    v9 = (void *)*v8;
    v6 = v8 + 2;
    v7 = v9;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v10 = *((_DWORD *)this + 248);
  *((_DWORD *)this + 248) = v10 + 1;
  return llvm::MCContext::getCOFFSection(*((_QWORD *)this + 105), ".rdata", 6uLL, 1073745984, 4, v6, v7, 5u, v10, 0);
}

void llvm::TargetLoweringObjectFileCOFF::emitModuleMetadata(llvm::TargetLoweringObjectFileCOFF *this, llvm::MCStreamer *a2, llvm::Module *a3)
{
  uint64_t v6;
  unint64_t COFFSection;
  unint64_t Symbol;
  _QWORD v9[4];
  __int16 v10;
  const void *v11;
  size_t v12;
  uint64_t v13;

  llvm::TargetLoweringObjectFileCOFF::emitLinkerDirectives(this, a2, a3);
  v13 = 0;
  v11 = 0;
  v12 = 0;
  sub_1C52BAA20((uint64_t)a3, (_DWORD *)&v13 + 1, (int *)&v13, &v11);
  if (v12)
  {
    v6 = *((_QWORD *)this + 105);
    COFFSection = llvm::MCContext::getCOFFSection(v6, v11, v12, 1073741888, 4, &unk_1C873AB3D, 0, 0, 0xFFFFFFFF, 0);
    (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 168))(a2, COFFSection, 0);
    v10 = 261;
    v9[0] = "OBJC_IMAGE_INFO";
    v9[1] = 15;
    Symbol = llvm::MCContext::getOrCreateSymbol(v6, (uint64_t)v9);
    (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a2 + 192))(a2, Symbol, 0);
    (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, HIDWORD(v13), 4);
    (*(void (**)(llvm::MCStreamer *, _QWORD, uint64_t))(*(_QWORD *)a2 + 512))(a2, v13, 4);
    (*(void (**)(llvm::MCStreamer *))(*(_QWORD *)a2 + 152))(a2);
  }
  llvm::TargetLoweringObjectFile::emitCGProfileMetadata(this, a2, a3);
}

void llvm::TargetLoweringObjectFileCOFF::emitLinkerDirectives(llvm::TargetLoweringObjectFileCOFF *this, llvm::MCStreamer *a2, llvm::Module *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  size_t v9;
  const void *v10;
  unint64_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type size;
  void **v19;
  void **v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  llvm::raw_ostream *v27;
  llvm::Mangler *v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  _BYTE **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  llvm::Value **v38;
  uint64_t v39;
  llvm::Value *v40;
  llvm::Mangler *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  _BYTE **v45;
  uint64_t v46;
  uint64_t v49;
  uint64_t NamedMetadata;
  uint64_t v51;
  std::string v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  int v57;
  _BYTE **v58;
  void **__dst;
  std::string::size_type v60;
  int64_t v61;
  char *v62;
  void **v63;
  char *v64;
  char *v65;
  char *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;

  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)"llvm.linker.options";
  LOWORD(v54) = 259;
  NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)a3, (uint64_t)&v52);
  if (NamedMetadata)
  {
    (*(void (**)(llvm::MCStreamer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 168))(a2, *((_QWORD *)this + 83), 0);
    v49 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v49)
    {
      v4 = 0;
      while (1)
      {
        v51 = v4;
        v5 = *(_QWORD *)(**(_QWORD **)(NamedMetadata + 48) + 8 * v4);
        v6 = *(unsigned int *)(v5 + 8);
        if ((_DWORD)v6)
          break;
LABEL_31:
        v4 = v51 + 1;
        if (v51 + 1 == v49)
          goto LABEL_32;
      }
      v7 = -8 * v6;
      while (1)
      {
        *((_BYTE *)&v52.__r_.__value_.__s + 23) = 1;
        LOWORD(v52.__r_.__value_.__l.__data_) = 32;
        v8 = *(unint64_t **)(*(_QWORD *)(v5 + v7) + 8);
        v11 = *v8;
        v10 = v8 + 3;
        v9 = v11;
        if (v11 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v9 >= 0x17)
        {
          v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v9 | 7) != 0x17)
            v13 = v9 | 7;
          v14 = v13 + 1;
          p_dst = (void **)operator new(v13 + 1);
          v60 = v9;
          v61 = v14 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          HIBYTE(v61) = v9;
          p_dst = (void **)&__dst;
          if (!v9)
            goto LABEL_14;
        }
        memmove(p_dst, v10, v9);
LABEL_14:
        *((_BYTE *)p_dst + v9) = 0;
        if (v61 >= 0)
          v15 = (const std::string::value_type *)&__dst;
        else
          v15 = (const std::string::value_type *)__dst;
        if (v61 >= 0)
          v16 = HIBYTE(v61) & 0x7F;
        else
          v16 = v60;
        std::string::append(&v52, v15, v16);
        if (SHIBYTE(v61) < 0)
          operator delete(__dst);
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v17 = &v52;
        else
          v17 = (std::string *)v52.__r_.__value_.__r.__words[0];
        if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&v52.__r_.__value_.__s + 23) & 0x7F;
        else
          size = v52.__r_.__value_.__l.__size_;
        (*(void (**)(llvm::MCStreamer *, std::string *, std::string::size_type))(*(_QWORD *)a2 + 488))(a2, v17, size);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v52.__r_.__value_.__l.__data_);
        v7 += 8;
        if (!v7)
          goto LABEL_31;
      }
    }
  }
LABEL_32:
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v19 = (void **)((char *)a3 + 24);
  v20 = (void **)*((_QWORD *)a3 + 4);
  v21 = (char *)a3 + 8;
  v22 = (char *)*((_QWORD *)a3 + 2);
  v23 = (char *)a3 + 40;
  v24 = (char *)*((_QWORD *)a3 + 6);
  v25 = (char *)a3 + 56;
  v26 = (char *)*((_QWORD *)a3 + 8);
  __dst = v20;
  v60 = (std::string::size_type)v22;
  v61 = (int64_t)v24;
  v62 = v26;
  v63 = (void **)((char *)a3 + 24);
  v64 = (char *)a3 + 8;
  v65 = (char *)a3 + 40;
  v66 = (char *)a3 + 56;
  while (v20 != v19 || v22 != v21 || v24 != v23 || v26 != v25 || v63 != v19 || v64 != v21 || v65 != v23 || v66 != v25)
  {
    v27 = (llvm::raw_ostream *)sub_1C52C3168((uint64_t)&__dst);
    LODWORD(v52.__r_.__value_.__r.__words[1]) = 0;
    v55 = 0;
    v56 = 0;
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
    v58 = &v67;
    v57 = 0;
    v53 = 0;
    v54 = 0;
    v52.__r_.__value_.__r.__words[2] = 0;
    llvm::emitLinkerFlagsForGlobalCOFF((llvm *)&v52, v27, (const llvm::GlobalValue *)(*((_QWORD *)this + 105) + 24), *((const llvm::Triple **)this + 117), v28);
    v29 = v54 - v52.__r_.__value_.__r.__words[2];
    if (v54 != v52.__r_.__value_.__r.__words[2])
    {
      v54 = v52.__r_.__value_.__r.__words[2];
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v52, (const char *)v52.__r_.__value_.__r.__words[2], v29);
    }
    v30 = HIBYTE(v69);
    v31 = HIBYTE(v69) & 0x7F;
    if (v69 < 0)
      v31 = v68;
    if (v31)
    {
      (*(void (**)(llvm::MCStreamer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 168))(a2, *((_QWORD *)this + 83), 0);
      if (v69 >= 0)
        v32 = &v67;
      else
        v32 = (_BYTE **)v67;
      if (v69 >= 0)
        v33 = HIBYTE(v69) & 0x7F;
      else
        v33 = v68;
      (*(void (**)(llvm::MCStreamer *, _BYTE **, uint64_t))(*(_QWORD *)a2 + 488))(a2, v32, v33);
      v30 = HIBYTE(v69);
    }
    if (v30 < 0)
    {
      *v67 = 0;
      v68 = 0;
    }
    else
    {
      LOBYTE(v67) = 0;
      HIBYTE(v69) = 0;
    }
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
    if (v57 == 1)
    {
      if (v52.__r_.__value_.__r.__words[2])
        MEMORY[0x1CAA32F9C](v52.__r_.__value_.__r.__words[2], 0x1000C8077774924, v29);
    }
    sub_1C52C300C((uint64_t)&__dst);
    v20 = __dst;
    v22 = (char *)v60;
    v24 = (char *)v61;
    v26 = v62;
  }
  v34 = sub_1C4FB7E80(*((uint64_t **)a3 + 14), "llvm.used", 9uLL);
  if (v34)
  {
    if (*(_BYTE *)(v34 + 16) == 3)
    {
      v35 = *(_QWORD *)(v34 - 32);
      if (v35)
      {
        v36 = *(_DWORD *)(v35 + 20);
        if ((v36 & 0x40000000) != 0)
        {
          v38 = *(llvm::Value ***)(v35 - 8);
          v37 = v36 & 0x7FFFFFF;
        }
        else
        {
          v37 = v36 & 0x7FFFFFF;
          v38 = (llvm::Value **)(v35 - 32 * v37);
        }
        if (v37)
        {
          v39 = 32 * v37;
          do
          {
            v40 = llvm::Value::stripPointerCasts(*v38);
            if ((*((_DWORD *)v40 + 8) & 0xFu) - 7 >= 2)
            {
              LODWORD(v52.__r_.__value_.__r.__words[1]) = 0;
              v55 = 0;
              v56 = 0;
              v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
              v58 = &v67;
              v57 = 0;
              v53 = 0;
              v54 = 0;
              v52.__r_.__value_.__r.__words[2] = 0;
              llvm::emitLinkerFlagsForUsedCOFF((llvm *)&v52, v40, (const llvm::GlobalValue *)(*((_QWORD *)this + 105) + 24), *((const llvm::Triple **)this + 117), v41);
              v42 = v54 - v52.__r_.__value_.__r.__words[2];
              if (v54 != v52.__r_.__value_.__r.__words[2])
              {
                v54 = v52.__r_.__value_.__r.__words[2];
                llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v52, (const char *)v52.__r_.__value_.__r.__words[2], v42);
              }
              v43 = HIBYTE(v69);
              v44 = HIBYTE(v69) & 0x7F;
              if (v69 < 0)
                v44 = v68;
              if (v44)
              {
                (*(void (**)(llvm::MCStreamer *, _QWORD, _QWORD))(*(_QWORD *)a2 + 168))(a2, *((_QWORD *)this + 83), 0);
                if (v69 >= 0)
                  v45 = &v67;
                else
                  v45 = (_BYTE **)v67;
                if (v69 >= 0)
                  v46 = HIBYTE(v69) & 0x7F;
                else
                  v46 = v68;
                (*(void (**)(llvm::MCStreamer *, _BYTE **, uint64_t))(*(_QWORD *)a2 + 488))(a2, v45, v46);
                v43 = HIBYTE(v69);
              }
              if (v43 < 0)
              {
                *v67 = 0;
                v68 = 0;
              }
              else
              {
                LOBYTE(v67) = 0;
                HIBYTE(v69) = 0;
              }
              v52.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
              if (v57 == 1 && v52.__r_.__value_.__r.__words[2])
                MEMORY[0x1CAA32F9C](v52.__r_.__value_.__r.__words[2], 0x1000C8077774924, v42);
            }
            v38 += 4;
            v39 -= 32;
          }
          while (v39);
        }
      }
    }
  }
  if (SHIBYTE(v69) < 0)
    operator delete(v67);
}

unint64_t llvm::TargetLoweringObjectFileCOFF::Initialize(llvm::TargetLoweringObjectFileCOFF *this, llvm::MCContext *a2, const llvm::TargetMachine *a3)
{
  int v6;
  _BOOL4 v8;
  unint64_t result;

  llvm::TargetLoweringObjectFile::Initialize(this, a2, a3);
  *((_QWORD *)this + 125) = a3;
  v6 = *((_DWORD *)a3 + 122);
  v8 = (v6 & 0xFFFFFFEF) == 0 || v6 == 17;
  if (*((_DWORD *)a3 + 121) != 15 || !v8)
  {
    *((_QWORD *)this + 121) = llvm::MCContext::getCOFFSection((uint64_t)a2, ".ctors", 6uLL, -1073741760, 19, &unk_1C873AB3D, 0, 0, 0xFFFFFFFF, 0);
    result = llvm::MCContext::getCOFFSection((uint64_t)a2, ".dtors", 6uLL, -1073741760, 19, &unk_1C873AB3D, 0, 0, 0xFFFFFFFF, 0);
  }
  else
  {
    *((_QWORD *)this + 121) = llvm::MCContext::getCOFFSection((uint64_t)a2, ".CRT$XCU", 8uLL, 1073741888, 4, &unk_1C873AB3D, 0, 0, 0xFFFFFFFF, 0);
    result = llvm::MCContext::getCOFFSection((uint64_t)a2, ".CRT$XTX", 8uLL, 1073741888, 4, &unk_1C873AB3D, 0, 0, 0xFFFFFFFF, 0);
  }
  *((_QWORD *)this + 122) = result;
  return result;
}

llvm::MCSectionCOFF *llvm::TargetLoweringObjectFileCOFF::getStaticCtorSection(llvm::MCContext **this, unsigned int a2, const llvm::MCSymbol *a3)
{
  return sub_1C52BFECC(this[105], *((_DWORD *)this[105] + 15), *((_DWORD *)this[105] + 16), 1, a2, a3, this[121]);
}

llvm::MCSectionCOFF *sub_1C52BFECC(llvm::MCContext *a1, int a2, int a3, int a4, unsigned int a5, const llvm::MCSymbol *a6, llvm::MCSectionCOFF *a7)
{
  _BOOL4 v12;
  const char *v14;
  char v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  char v19;
  BOOL v20;
  void **v21;
  size_t v22;
  size_t v23;
  llvm::MCSectionCOFF *v24;
  llvm::MCSectionCOFF *AssociativeCOFFSection;
  llvm::MCSectionCOFF *COFFSection;
  uint64_t (**v27)(llvm::format_object_base *__hidden);
  const char *v28;
  uint64_t v29;
  uint64_t (**v30)();
  int v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char v35;
  uint64_t v36;
  int v37;
  void **v38;
  _QWORD *v39;
  __int128 v40;
  _QWORD v41[4];

  v41[3] = *MEMORY[0x1E0C80C00];
  v12 = (a3 & 0xFFFFFFEF) == 0 || a3 == 17;
  if (a2 == 15 && v12)
  {
    if (a5 == 0xFFFF)
      return llvm::MCContext::getAssociativeCOFFSection(a1, a7, a6, 0);
    v39 = v41;
    v40 = xmmword_1C85FBF50;
    v31 = 0;
    v35 = 0;
    v36 = 0;
    v30 = &off_1E81A7280;
    v38 = (void **)&v39;
    v37 = 0;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v30, ".CRT$X", 6uLL);
    if (a4)
      v17 = "C";
    else
      v17 = "T";
    if (v33 == v34)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v30, v17, 1uLL);
      v18 = v34;
    }
    else
    {
      *v34 = *v17;
      v18 = ++v34;
    }
    if (a5 >= 0xC8)
      v19 = 84;
    else
      v19 = 65;
    if (v18 >= v33)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v30, v19);
    }
    else
    {
      v34 = v18 + 1;
      *v18 = v19;
    }
    v27 = &off_1E8132728;
    v28 = "%05u";
    v29 = a5;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v30, (uint64_t)&v27);
    COFFSection = (llvm::MCSectionCOFF *)llvm::MCContext::getCOFFSection((uint64_t)a1, v39, v40, 1073741888, 4, &unk_1C873AB3D, 0, 0, 0xFFFFFFFF, 0);
    AssociativeCOFFSection = llvm::MCContext::getAssociativeCOFFSection(a1, COFFSection, a6, 0);
    v30 = (uint64_t (**)())off_1E81A6E70;
    if (v37 == 1 && v32)
      MEMORY[0x1CAA32F9C](v32, 0x1000C8077774924);
    if (v39 != v41)
      free(v39);
  }
  else
  {
    v14 = ".ctors";
    if (!a4)
      v14 = ".dtors";
    v15 = 6;
    HIBYTE(v40) = 6;
    LODWORD(v39) = *(_DWORD *)v14;
    WORD2(v39) = *((_WORD *)v14 + 2);
    BYTE6(v39) = 0;
    v16 = 0xFFFFLL;
    if (a5 != 0xFFFF)
    {
      v31 = 0;
      v35 = 0;
      v36 = 0;
      v30 = (uint64_t (**)())&unk_1E81A7208;
      v38 = (void **)&v39;
      v37 = 0;
      v33 = 0;
      v34 = 0;
      v32 = 0;
      v27 = &off_1E8132728;
      v28 = ".%05u";
      v29 = 0xFFFF - a5;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v30, (uint64_t)&v27);
      v30 = (uint64_t (**)())off_1E81A6E70;
      if (v37 == 1 && v32)
        MEMORY[0x1CAA32F9C](v32, 0x1000C8077774924);
      v15 = HIBYTE(v40);
      v16 = v40;
    }
    v20 = v15 < 0;
    if (v15 >= 0)
      v21 = (void **)&v39;
    else
      v21 = (void **)v39;
    v22 = v15 & 0x7F;
    if (v20)
      v23 = v16;
    else
      v23 = v22;
    v24 = (llvm::MCSectionCOFF *)llvm::MCContext::getCOFFSection((uint64_t)a1, v21, v23, -1073741760, 19, &unk_1C873AB3D, 0, 0, 0xFFFFFFFF, 0);
    AssociativeCOFFSection = llvm::MCContext::getAssociativeCOFFSection(a1, v24, a6, 0);
    if (SHIBYTE(v40) < 0)
      operator delete(v39);
  }
  return AssociativeCOFFSection;
}

llvm::MCSectionCOFF *llvm::TargetLoweringObjectFileCOFF::getStaticDtorSection(llvm::MCContext **this, unsigned int a2, const llvm::MCSymbol *a3)
{
  return sub_1C52BFECC(this[105], *((_DWORD *)this[105] + 15), *((_DWORD *)this[105] + 16), 0, a2, a3, this[122]);
}

unint64_t llvm::TargetLoweringObjectFileCOFF::lowerRelativeReference(llvm::TargetLoweringObjectFileCOFF *this, const llvm::GlobalValue *a2, const llvm::GlobalValue *a3, const llvm::TargetMachine *a4)
{
  int v7;
  BOOL v9;
  unsigned int v10;
  uint64_t **v11;
  unsigned int v12;
  unint64_t result;
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const llvm::GlobalValue *v21;
  int v22;
  int v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t Symbol;
  uint64_t v30;
  int v31;

  v7 = *((_DWORD *)a4 + 122);
  v9 = v7 == 18 || v7 == 1;
  if (*((_DWORD *)a4 + 121) == 15 && v9)
    return 0;
  v10 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v10 & 0xFE) == 0x12)
    v10 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  if (v10 > 0xFF)
    return 0;
  v11 = *(uint64_t ***)a3;
  v12 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  if ((v12 & 0xFE) == 0x12)
    v12 = *(_DWORD *)(*v11[2] + 8);
  if (v12 > 0xFF)
    return 0;
  result = 0;
  v14 = *((unsigned __int8 *)a2 + 16);
  if (v14 > 3 || v14 == 1)
    return result;
  if (*((_BYTE *)a3 + 16) != 3)
    return 0;
  if ((*((_BYTE *)a2 + 33) & 0x1C) != 0)
    return 0;
  if ((*((_DWORD *)a3 + 8) & 0x1C00) != 0)
    return 0;
  v15 = *((_DWORD *)a3 + 5);
  if ((v15 & 0x10000000) == 0)
    return 0;
  v16 = **v11;
  v17 = *(_QWORD *)(v16 + 152);
  v18 = *(unsigned int *)(v16 + 168);
  if ((_DWORD)v18)
  {
    LODWORD(v19) = (v18 - 1) & ((a3 >> 4) ^ (a3 >> 9));
    v20 = v17 + 16 * v19;
    v21 = *(const llvm::GlobalValue **)v20;
    if (*(const llvm::GlobalValue **)v20 == a3)
      goto LABEL_28;
    v22 = 1;
    while (v21 != (const llvm::GlobalValue *)-4096)
    {
      v23 = v19 + v22++;
      v19 = v23 & (v18 - 1);
      v21 = *(const llvm::GlobalValue **)(v17 + 16 * v19);
      if (v21 == a3)
      {
        v20 = v17 + 16 * v19;
        goto LABEL_28;
      }
    }
  }
  v20 = v17 + 16 * v18;
LABEL_28:
  v24 = *(_QWORD **)(v20 + 8);
  if (*v24 != 11)
    return 0;
  v25 = 0x5F5F496D61676542;
  v26 = bswap64(v24[2]);
  if (v26 == 0x5F5F496D61676542
    && (v25 = 0x6D61676542617365, v26 = bswap64(*(_QWORD *)((char *)v24 + 19)), v26 == 0x6D61676542617365))
  {
    v27 = 0;
  }
  else
  {
    v27 = v26 < v25 ? -1 : 1;
  }
  if (v15 & 0x7FFFFFF | *((_DWORD *)a3 + 8) & 0xF | v27)
    return 0;
  llvm::GlobalValue::getSection(a3);
  if (v28)
    return 0;
  Symbol = llvm::TargetMachine::getSymbol(a4, a2);
  v30 = *((_QWORD *)this + 105);
  result = sub_1C484358C(v30 + 192, 24, 3);
  if (*(_BYTE *)(*(_QWORD *)(v30 + 152) + 18))
    v31 = 65651;
  else
    v31 = 115;
  *(_BYTE *)result = 2;
  *(_DWORD *)(result + 1) = v31 | (*(unsigned __int8 *)(result + 4) << 24);
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = Symbol;
  return result;
}

unint64_t llvm::TargetLoweringObjectFileCOFF::getSectionForConstant(_QWORD *a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, char *a5)
{
  unint64_t COFFSection;
  int v7;
  std::string *v9;
  void *v10;
  char v11;
  char v12;
  std::string *v13;
  std::string *v14;
  void *v15;
  std::string *v16;
  void *v17;
  void **p_p;
  std::string v20;
  void *__p;
  __int128 v22;
  _QWORD v23[3];

  COFFSection = a3;
  v23[2] = *MEMORY[0x1E0C80C00];
  v7 = a3 & 0xFC;
  if (a4 && v7 == 8)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1[105] + 152) + 22))
    {
      __p = 0;
      v22 = 0uLL;
      switch((char)a3)
      {
        case 8:
          if (*a5 > 2u)
            goto LABEL_21;
          sub_1C52C0818(&v20, a4);
          v9 = std::string::insert(&v20, 0, "__real@");
          v10 = (void *)v9->__r_.__value_.__r.__words[0];
          v23[0] = v9->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v9->__r_.__value_.__r.__words[1] + 7);
          v11 = HIBYTE(v9->__r_.__value_.__r.__words[2]);
          v9->__r_.__value_.__l.__size_ = 0;
          v9->__r_.__value_.__r.__words[2] = 0;
          v9->__r_.__value_.__r.__words[0] = 0;
          __p = v10;
          *(_QWORD *)&v22 = v23[0];
          *(_QWORD *)((char *)&v22 + 7) = *(_QWORD *)((char *)v23 + 7);
          HIBYTE(v22) = v11;
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v20.__r_.__value_.__l.__data_);
          v12 = 2;
          goto LABEL_25;
        case 9:
          if (*a5 > 3u)
            goto LABEL_21;
          sub_1C52C0818(&v20, a4);
          v13 = std::string::insert(&v20, 0, "__real@");
          v10 = (void *)v13->__r_.__value_.__r.__words[0];
          v23[0] = v13->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
          v11 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
          v13->__r_.__value_.__l.__size_ = 0;
          v13->__r_.__value_.__r.__words[2] = 0;
          v13->__r_.__value_.__r.__words[0] = 0;
          __p = v10;
          *(_QWORD *)&v22 = v23[0];
          *(_QWORD *)((char *)&v22 + 7) = *(_QWORD *)((char *)v23 + 7);
          HIBYTE(v22) = v11;
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v20.__r_.__value_.__l.__data_);
          v12 = 3;
          goto LABEL_25;
        case 10:
          if (*a5 > 4u)
            goto LABEL_21;
          sub_1C52C0818(&v20, a4);
          v14 = std::string::insert(&v20, 0, "__xmm@");
          v10 = (void *)v14->__r_.__value_.__r.__words[0];
          v23[0] = v14->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v14->__r_.__value_.__r.__words[1] + 7);
          v11 = HIBYTE(v14->__r_.__value_.__r.__words[2]);
          v14->__r_.__value_.__l.__size_ = 0;
          v14->__r_.__value_.__r.__words[2] = 0;
          v14->__r_.__value_.__r.__words[0] = 0;
          __p = v10;
          *(_QWORD *)&v22 = v23[0];
          *(_QWORD *)((char *)&v22 + 7) = *(_QWORD *)((char *)v23 + 7);
          HIBYTE(v22) = v11;
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v20.__r_.__value_.__l.__data_);
          v12 = 4;
          goto LABEL_25;
        case 11:
          if (*a5 > 5u)
            goto LABEL_21;
          sub_1C52C0818(&v20, a4);
          v16 = std::string::insert(&v20, 0, "__ymm@");
          v10 = (void *)v16->__r_.__value_.__r.__words[0];
          v23[0] = v16->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v23 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
          v11 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          __p = v10;
          *(_QWORD *)&v22 = v23[0];
          *(_QWORD *)((char *)&v22 + 7) = *(_QWORD *)((char *)v23 + 7);
          HIBYTE(v22) = v11;
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v20.__r_.__value_.__l.__data_);
          v12 = 5;
LABEL_25:
          *a5 = v12;
          v15 = (void *)v22;
          break;
        default:
LABEL_21:
          v15 = 0;
          v10 = 0;
          v11 = 0;
          break;
      }
      if (v11 >= 0)
        v17 = (void *)(v11 & 0x7F);
      else
        v17 = v15;
      if (v17)
      {
        if (v11 >= 0)
          p_p = &__p;
        else
          p_p = (void **)v10;
        COFFSection = llvm::MCContext::getCOFFSection(a1[105], ".rdata", 6uLL, 1073745984, COFFSection, p_p, v17, 2u, 0xFFFFFFFF, 0);
        if ((HIBYTE(v22) & 0x80) != 0)
          goto LABEL_34;
      }
      else if (v11 < 0)
      {
LABEL_34:
        operator delete(__p);
      }
      if (v17)
        return COFFSection;
    }
  }
  else if (v7 != 8 && v7 != 4)
  {
    return a1[4];
  }
  COFFSection = a1[6];
  if (!COFFSection)
    return a1[4];
  return COFFSection;
}

void sub_1C52C0818(std::string *a1, unsigned __int8 *a2)
{
  llvm::Type *v3;
  int v4;
  const char *v5;
  unsigned int PrimitiveSizeInBits;
  llvm::detail::DoubleAPFloat *v8;
  int v9;
  unint64_t v10;
  llvm::UndefValue *AggregateElement;
  const std::string::value_type *p_p;
  std::string::size_type v13;
  void *__p;
  std::string::size_type v15;
  char v16;

  v3 = *(llvm::Type **)a2;
  v4 = a2[16];
  if ((v4 - 11) <= 1)
  {
    PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v3);
    if ((_DWORD)v5 == 1)
    LODWORD(v15) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&__p, 0, 0);
    else
      __p = 0;
    goto LABEL_10;
  }
  if (v4 == 16)
  {
    sub_1C52C2D78((uint64_t)a1, (uint64_t)(a2 + 24));
    return;
  }
  if (v4 == 17)
  {
    v8 = (llvm::detail::DoubleAPFloat *)(a2 + 32);
    if (*((_UNKNOWN **)a2 + 4) == &unk_1C866F1C0)
      llvm::detail::DoubleAPFloat::bitcastToAPInt(v8, (unsigned int *)&__p);
    else
      llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v8, (unsigned int *)&__p);
LABEL_10:
    sub_1C52C2D78((uint64_t)a1, (uint64_t)&__p);
    if (v15 >= 0x41)
    {
      if (__p)
        MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
    }
    return;
  }
  v9 = *((_DWORD *)v3 + 8);
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (v9)
  {
    v10 = (v9 - 1);
    do
    {
      AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)a2, (llvm::Type *)v10);
      sub_1C52C0818(&__p, AggregateElement);
      if (v16 >= 0)
        p_p = (const std::string::value_type *)&__p;
      else
        p_p = (const std::string::value_type *)__p;
      if (v16 >= 0)
        v13 = v16 & 0x7F;
      else
        v13 = v15;
      std::string::append(a1, p_p, v13);
      if (v16 < 0)
        operator delete(__p);
      v10 = (v10 - 1);
    }
    while ((_DWORD)v10 != -1);
  }
}

unint64_t llvm::TargetLoweringObjectFileWasm::getExplicitSectionGlobal(_QWORD *a1, llvm::GlobalObject *this, unsigned int a3)
{
  int v3;
  uint64_t v6;
  llvm::GlobalObject *v7;
  llvm::GlobalObject *SectionImpl;
  uint64_t v10;
  uint64_t **v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;

  v3 = a3;
  if (!*((_BYTE *)this + 16))
    return (*(uint64_t (**)(_QWORD *, llvm::GlobalObject *, _QWORD))(*a1 + 248))(a1, this, a3);
  if ((*((_BYTE *)this + 34) & 0x40) != 0)
  {
    SectionImpl = llvm::GlobalObject::getSectionImpl(this);
    v7 = SectionImpl;
    v6 = v10;
    if (v10 == 7)
    {
      if (*(_DWORD *)SectionImpl != 1986817070 || *(_DWORD *)((char *)SectionImpl + 3) != 1667394934)
      {
        v6 = 7;
        goto LABEL_15;
      }
    }
    else
    {
      if (v10 != 8)
        goto LABEL_15;
      if (*(_QWORD *)SectionImpl != 0x646D636D766C6C2ELL)
      {
        v6 = 8;
        goto LABEL_15;
      }
    }
    v3 = 0;
    goto LABEL_15;
  }
  v6 = 0;
  v7 = 0;
LABEL_15:
  v12 = (uint64_t **)sub_1C52C0B24((uint64_t)this);
  if (v12)
  {
    v13 = (const char *)(*v12 + 9);
    v14 = **v12;
  }
  else
  {
    v14 = 0;
    v13 = "";
  }
  v15 = a1[105];
  v19 = 261;
  v18[0] = v7;
  v18[1] = v6;
  v17 = 261;
  v16[0] = v13;
  v16[1] = v14;
  return llvm::MCContext::getWasmSection(v15, (llvm::Twine *)v18, v3, (v3 - 5 < 3) | (2 * (v3 - 12 < 3)), (unsigned __int8 *)v16, -1);
}

uint64_t sub_1C52C0B24(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  __int16 v5;
  uint64_t v6[4];
  __int16 v7;
  _BYTE v8[40];

  result = llvm::GlobalValue::getComdat(a1);
  if (result)
  {
    if (*(_DWORD *)(result + 8))
    {
      v2 = *(_QWORD *)result + 72;
      v3 = **(_QWORD **)result;
      v7 = 1283;
      v6[0] = (uint64_t)"WebAssembly COMDATs only support SelectionKind::Any, '";
      v6[2] = v2;
      v6[3] = v3;
      v4 = "' cannot be lowered.";
      v5 = 259;
      sub_1C6131AAC(v6, (uint64_t *)&v4, (uint64_t)v8);
      llvm::report_fatal_error((uint64_t)v8, 1);
    }
  }
  return result;
}

unint64_t llvm::TargetLoweringObjectFileWasm::SelectSectionForGlobal(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  int v5;
  int v9;
  _BOOL4 v11;
  size_t **v12;
  size_t v13;
  const char *v14;
  const char *v15;
  size_t v16;
  int v17;
  size_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  unint64_t WasmSection;
  llvm::Mangler *v24;
  uint64_t v25;
  const char *v26;
  size_t v27;
  char v28;
  __int16 v29;
  uint64_t (**v30)();
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  uint64_t v36;
  int v37;
  void **v38;
  void *v39;
  size_t v40;
  unint64_t v41;
  _QWORD v42[18];

  v42[16] = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (a3 == 18)
    llvm::report_fatal_error((llvm *)"mergable sections not supported yet on wasm", (const char *)1);
  if ((a3 & 0xFE) == 2)
    v9 = 2;
  else
    v9 = 4;
  v11 = (*(_DWORD *)(a4 + 1040) & v9) != 0 || *(_QWORD *)(a2 + 48) != 0;
  v24 = *(llvm::Mangler **)(a1 + 936);
  v25 = *(_QWORD *)(a1 + 840);
  v12 = (size_t **)sub_1C52C0B24(a2);
  if (v12)
  {
    v14 = (const char *)(*v12 + 9);
    v13 = **v12;
  }
  else
  {
    v13 = 0;
    v14 = "";
  }
  if ((v5 & 0xFE) == 2)
  {
    v15 = ".text";
LABEL_16:
    v16 = 5;
    goto LABEL_31;
  }
  v15 = ".rodata";
  v16 = 7;
  if ((v5 & 0xFC) != 4 && (v5 & 0xFC) != 8)
  {
    if ((v5 - 15) < 3)
    {
      v15 = ".bss";
      v16 = 4;
      goto LABEL_31;
    }
    if (v5 == 13)
    {
      v15 = ".tdata";
      v16 = 6;
      goto LABEL_31;
    }
    if ((v5 & 0xFFFFFFFD) == 0xC)
    {
      v15 = ".tbss";
      goto LABEL_16;
    }
    if (v5 == 19)
      v15 = ".data";
    else
      v15 = ".data.rel.ro";
    if (v5 == 19)
      v16 = 5;
    else
      v16 = 12;
  }
LABEL_31:
  v17 = *(_DWORD *)(a4 + 1040);
  v39 = v42;
  v41 = 128;
  memcpy(v42, v15, v16);
  v40 = v16;
  if (!*(_BYTE *)(a2 + 16))
  {
    llvm::Function::getSectionPrefix((uint64_t ***)a2, (uint64_t)&v26);
    if (v28)
    {
      LODWORD(v31) = 0;
      v35 = 0;
      v36 = 0;
      v30 = &off_1E81A7280;
      v38 = &v39;
      v37 = 0;
      v33 = 0;
      v34 = 0;
      v32 = 0;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v30, 46);
      v18 = v27;
      if (v27 <= v33 - (uint64_t)v34)
      {
        if (v27)
        {
          memcpy(v34, v26, v27);
          v34 += v18;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v30, v26, v27);
      }
      v30 = (uint64_t (**)())off_1E81A6E70;
      if (v37 == 1 && v32)
        MEMORY[0x1CAA32F9C](v32, 0x1000C8077774924);
    }
  }
  if ((v11 & ((v17 & 0x20) >> 5)) == 1)
  {
    v19 = v40;
    if (v40 + 1 > v41)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v39, v42, v40 + 1, 1);
      v19 = v40;
    }
    *((_BYTE *)v39 + v19) = 46;
    ++v40;
    llvm::Mangler::getNameWithPrefix(v24, (uint64_t)&v39, (const llvm::GlobalValue *)a2, 0);
    v20 = -1;
    goto LABEL_42;
  }
  v20 = -1;
  if (!v11)
  {
LABEL_42:
    v21 = v25;
    goto LABEL_46;
  }
  v21 = v25;
  if ((v17 & 0x20) == 0)
  {
    v20 = *(_DWORD *)(a1 + 992);
    *(_DWORD *)(a1 + 992) = v20 + 1;
  }
LABEL_46:
  LOWORD(v34) = 261;
  v30 = (uint64_t (**)())v39;
  v31 = v40;
  v29 = 261;
  v26 = v14;
  v27 = v13;
  WasmSection = llvm::MCContext::getWasmSection(v21, (llvm::Twine *)&v30, a3, ((v5 - 5) < 3) | (2 * ((v5 - 12) < 3)), (unsigned __int8 *)&v26, v20);
  if (v39 != v42)
    free(v39);
  return WasmSection;
}

uint64_t llvm::TargetLoweringObjectFileWasm::shouldPutJumpTableInFunctionSection(llvm::TargetLoweringObjectFileWasm *this, BOOL a2, const Function *a3)
{
  return 0;
}

unint64_t llvm::TargetLoweringObjectFileWasm::lowerRelativeReference(llvm::TargetLoweringObjectFileWasm *this, const llvm::GlobalValue *a2, const llvm::GlobalValue *a3, const llvm::TargetMachine *a4)
{
  int v4;
  unsigned int v8;
  unsigned int v9;
  unint64_t result;
  unint64_t Symbol;
  uint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;

  v4 = *((_DWORD *)a2 + 8);
  if ((v4 & 0xC0) != 0x80 || *(_BYTE *)(*((_QWORD *)a2 + 3) + 8) != 14)
    return 0;
  v8 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a2 + 16) + 8);
  if (v8 > 0xFF)
    return 0;
  v9 = *(_DWORD *)(*(_QWORD *)a3 + 8);
  if ((v9 & 0xFE) == 0x12)
    v9 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)a3 + 16) + 8);
  result = 0;
  if ((v4 & 0x1C00) == 0 && v9 <= 0xFF)
  {
    if ((*((_BYTE *)a3 + 33) & 0x1C) == 0)
    {
      Symbol = llvm::TargetMachine::getSymbol(a4, a2);
      v12 = *((_QWORD *)this + 105);
      v13 = sub_1C484358C(v12 + 192, 24, 3);
      v14 = *(unsigned __int8 *)(*(_QWORD *)(v12 + 152) + 18) << 16;
      *(_BYTE *)v13 = 2;
      *(_DWORD *)(v13 + 1) = v14 | (*(unsigned __int8 *)(v13 + 4) << 24);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = Symbol;
      v15 = llvm::TargetMachine::getSymbol(a4, a3);
      v16 = *((_QWORD *)this + 105);
      v17 = sub_1C484358C(v16 + 192, 24, 3);
      v18 = *(unsigned __int8 *)(*(_QWORD *)(v16 + 152) + 18) << 16;
      *(_BYTE *)v17 = 2;
      *(_DWORD *)(v17 + 1) = v18 | (*(unsigned __int8 *)(v17 + 4) << 24);
      *(_QWORD *)(v17 + 8) = 0;
      *(_QWORD *)(v17 + 16) = v15;
      result = sub_1C484358C(*((_QWORD *)this + 105) + 192, 32, 3);
      *(_BYTE *)result = 0;
      *(_DWORD *)(result + 1) = (*(unsigned __int8 *)(result + 4) << 24) | 0x12;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = v13;
      *(_QWORD *)(result + 24) = v17;
      return result;
    }
    return 0;
  }
  return result;
}

unint64_t llvm::TargetLoweringObjectFileWasm::InitializeWasm(llvm::TargetLoweringObjectFileWasm *this)
{
  uint64_t v2;
  unint64_t result;
  const char *v4;
  __int16 v5;
  unsigned __int8 v6[32];
  __int16 v7;

  v2 = *((_QWORD *)this + 105);
  v4 = ".init_array";
  v5 = 259;
  v7 = 257;
  result = llvm::MCContext::getWasmSection(v2, (llvm::Twine *)&v4, 19, 0, v6, -1);
  *((_QWORD *)this + 121) = result;
  *((_DWORD *)this + 239) = 0;
  return result;
}

unint64_t llvm::TargetLoweringObjectFileWasm::getStaticCtorSection(llvm::TargetLoweringObjectFileWasm *this, int a2, const llvm::MCSymbol *a3)
{
  unint64_t WasmSection;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  BOOL v7;
  std::string *v8;
  std::string::size_type v9;
  std::string v11;
  void *__p[2];
  std::string::size_type v13;
  void **v14;
  __int16 v15;
  unsigned __int8 v16[20];
  char v17;
  char v18[11];
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a2 == 0xFFFF)
    return *((_QWORD *)this + 121);
  LODWORD(v4) = a2;
  v5 = *((_QWORD *)this + 105);
  if (a2)
  {
    v6 = v18;
    v4 = v4;
    do
    {
      *--v6 = (v4 % 0xA) | 0x30;
      v7 = v4 > 9;
      v4 /= 0xAuLL;
    }
    while (v7);
  }
  else
  {
    v6 = &v17;
    v17 = 48;
  }
  sub_1C4E61270(&v11, v6, v18, v18 - v6);
  v8 = std::string::insert(&v11, 0, ".init_array.");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v13 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v15 = 260;
  v14 = __p;
  v19 = 257;
  WasmSection = llvm::MCContext::getWasmSection(v5, (llvm::Twine *)&v14, 19, 0, v16, -1);
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return WasmSection;
}

void llvm::TargetLoweringObjectFileWasm::getStaticDtorSection(llvm::TargetLoweringObjectFileWasm *this, unsigned int a2, const llvm::MCSymbol *a3)
{
  llvm::report_fatal_error((llvm *)"@llvm.global_dtors should have been lowered already", (const char *)1);
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::ShouldSetSSPCanaryBitInTB(llvm::TargetLoweringObjectFileXCOFF *this, const llvm::MachineFunction *a2)
{
  uint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(*(_QWORD *)this + 112);
  if (!v2)
    return 0;
  v3 = *(unsigned __int8 *)(v2 + 19);
  if ((v3 & 0x14) != 0)
    return 1;
  else
    return (v3 >> 3) & 1;
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::getTargetSymbol(llvm::TargetLoweringObjectFileXCOFF *this, const llvm::GlobalValue *a2, const llvm::TargetMachine *a3)
{
  int v6;
  BOOL v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int KindForGlobal;
  int v13;
  unsigned int v14;
  llvm::TargetLoweringObjectFileXCOFF *v15;
  const llvm::GlobalValue *v16;
  _QWORD v17[2];
  uint64_t v18;

  v6 = *((unsigned __int8 *)a2 + 16);
  if (*((_BYTE *)a2 + 16))
    v7 = v6 == 2;
  else
    v7 = 1;
  if (!v7)
  {
    if (v6 != 3)
      return 0;
    v8 = *((_QWORD *)a2 + 9);
    if (v8)
    {
      v17[0] = "toc-data";
      v17[1] = 8;
      v18 = 0;
      if (sub_1C5331A1C((uint64_t *)(v8 + 24), (uint64_t)v17, &v18))
      {
        v15 = this;
        v16 = a2;
        v14 = 19;
        goto LABEL_23;
      }
    }
  }
  v9 = *((_DWORD *)a2 + 8);
  if ((v9 & 0xF) == 1)
  {
LABEL_8:
    v10 = (*(uint64_t (**)(llvm::TargetLoweringObjectFileXCOFF *, const llvm::GlobalValue *, const llvm::TargetMachine *))(*(_QWORD *)this + 224))(this, a2, a3);
    return *(_QWORD *)(v10 + 232);
  }
  if (*((_BYTE *)a2 + 16))
  {
    if (*((_BYTE *)a2 + 16) == 3 && (*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
      goto LABEL_8;
  }
  else if ((v9 & 0x800000) == 0
         && *((const llvm::GlobalValue **)a2 + 9) == (const llvm::GlobalValue *)((char *)a2 + 72))
  {
    goto LABEL_8;
  }
  KindForGlobal = llvm::TargetLoweringObjectFile::getKindForGlobal(a2, a3, a3);
  if ((KindForGlobal & 0xFE) == 2)
  {
    v10 = (*(uint64_t (**)(llvm::TargetLoweringObjectFileXCOFF *, const llvm::GlobalValue *, const llvm::TargetMachine *))(*(_QWORD *)this + 208))(this, a2, a3);
    return *(_QWORD *)(v10 + 232);
  }
  v13 = *((_DWORD *)a2 + 8);
  if ((v13 & 0xF) == 0xA
    || (((v13 & 0x400000) == 0) & (*((unsigned __int8 *)a3 + 1040) >> 2)) != 0
    || KindForGlobal == 16
    || KindForGlobal == 14)
  {
    v14 = KindForGlobal;
    v15 = this;
    v16 = a2;
LABEL_23:
    v10 = llvm::TargetLoweringObjectFile::SectionForGlobal((uint64_t)v15, (uint64_t)v16, v14, (uint64_t)a3);
    return *(_QWORD *)(v10 + 232);
  }
  return 0;
}

unint64_t llvm::TargetLoweringObjectFileXCOFF::getExplicitSectionGlobal(uint64_t a1, llvm::GlobalObject *this, int a3)
{
  __int16 v6;
  llvm::GlobalObject *SectionImpl;
  size_t v8;
  size_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];
  uint64_t v14;

  if ((*((_BYTE *)this + 34) & 0x40) == 0)
  {
    v11 = "#pragma clang section is not yet supported";
LABEL_16:
    llvm::report_fatal_error((llvm *)v11, (const char *)1);
  }
  v6 = 257;
  SectionImpl = llvm::GlobalObject::getSectionImpl(this);
  v9 = v8;
  if (*((_BYTE *)this + 16) == 3)
  {
    v10 = *((_QWORD *)this + 9);
    if (v10)
    {
      v13[0] = "toc-data";
      v13[1] = 8;
      v14 = 0;
      if ((sub_1C5331A1C((uint64_t *)(v10 + 24), (uint64_t)v13, &v14) & 1) != 0)
      {
        v6 = 272;
        return llvm::MCContext::getXCOFFSection(*(_QWORD *)(a1 + 840), SectionImpl, v9, a3, v6, 1, 0, 0);
      }
    }
  }
  if ((a3 & 0xFE) == 2)
  {
    v6 = 256;
    return llvm::MCContext::getXCOFFSection(*(_QWORD *)(a1 + 840), SectionImpl, v9, a3, v6, 1, 0, 0);
  }
  if ((a3 - 15) < 6u && ((0x37u >> (a3 - 15)) & 1) != 0)
  {
    v6 = 261;
    return llvm::MCContext::getXCOFFSection(*(_QWORD *)(a1 + 840), SectionImpl, v9, a3, v6, 1, 0, 0);
  }
  if ((a3 & 0xFC) != 4 && (a3 & 0xFC) != 8)
  {
    v11 = "XCOFF other section types not yet implemented.";
    goto LABEL_16;
  }
  return llvm::MCContext::getXCOFFSection(*(_QWORD *)(a1 + 840), SectionImpl, v9, a3, v6, 1, 0, 0);
}

unint64_t llvm::TargetLoweringObjectFileXCOFF::getSectionForExternalReference(llvm::TargetLoweringObjectFileXCOFF *this, const llvm::GlobalObject *a2, const llvm::TargetMachine *a3)
{
  __int16 v5;
  __int16 v6;
  unint64_t XCOFFSection;
  void *v9;
  __int128 v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = xmmword_1C85F20B0;
  (*(void (**)(llvm::TargetLoweringObjectFileXCOFF *, void **, const llvm::GlobalObject *, const llvm::TargetMachine *))(*(_QWORD *)this + 80))(this, &v9, a2, a3);
  if (*((_BYTE *)a2 + 16))
    v5 = 4;
  else
    v5 = 10;
  if ((*((_DWORD *)a2 + 8) & 0x1C00) != 0)
    v6 = 21;
  else
    v6 = v5;
  XCOFFSection = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), v9, v10, 0, v6, 0, 0, 0);
  if (v9 != v11)
    free(v9);
  return XCOFFSection;
}

unint64_t llvm::TargetLoweringObjectFileXCOFF::SelectSectionForGlobal(_QWORD *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  BOOL v9;
  __int16 v10;
  __int16 v11;
  unint64_t XCOFFSection;
  void *v13;
  char PreferredAlign;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  int v26;
  void *v27;
  std::string *v28;
  unint64_t v29;
  std::string::size_type v30;
  std::string::size_type v31;
  _BOOL4 v32;
  uint64_t v33;
  void *v34;
  std::string::size_type v35;
  __int16 v36;
  int v37;
  uint64_t v38;
  void *v39;
  std::string::size_type size;
  int v41;
  __int16 v42;
  int v43;
  void *__p[2];
  uint64_t v45;
  std::string v46;
  std::string v47;
  std::string v48;
  _QWORD v49[17];

  v49[16] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    if (*(_BYTE *)(a2 + 16) == 3)
    {
      v8 = *(_QWORD *)(a2 + 72);
      if (v8)
      {
        v48.__r_.__value_.__r.__words[0] = (std::string::size_type)"toc-data";
        v48.__r_.__value_.__l.__size_ = 8;
        __p[0] = 0;
        if (sub_1C5331A1C((uint64_t *)(v8 + 24), (uint64_t)&v48, __p))
        {
          v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
          *(_OWORD *)&v48.__r_.__value_.__r.__words[1] = xmmword_1C85F20B0;
          (*(void (**)(_QWORD *, std::string *, uint64_t, uint64_t))(*a1 + 80))(a1, &v48, a2, a4);
          v38 = a1[105];
          size = v48.__r_.__value_.__l.__size_;
          v39 = (void *)v48.__r_.__value_.__r.__words[0];
          v41 = a3;
          v42 = 272;
          v43 = 1;
LABEL_74:
          XCOFFSection = llvm::MCContext::getXCOFFSection(v38, v39, size, v41, v42, v43, 0, 0);
          v13 = (void *)v48.__r_.__value_.__r.__words[0];
          if (v48.__r_.__value_.__l.__data_ == (std::string::pointer)v49)
            return XCOFFSection;
          goto LABEL_16;
        }
      }
    }
  }
  if (a3 == 16
    || ((*(_DWORD *)(a2 + 32) & 0xF) != 0xA ? (v9 = a3 == 14) : (v9 = 1), v9))
  {
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    *(_OWORD *)&v48.__r_.__value_.__r.__words[1] = xmmword_1C85F20B0;
    (*(void (**)(_QWORD *, std::string *, uint64_t, uint64_t))(*a1 + 80))(a1, &v48, a2, a4);
    v10 = 773;
    if (a3 != 18)
      v10 = 789;
    if (a3 == 16)
      v11 = 777;
    else
      v11 = v10;
    XCOFFSection = llvm::MCContext::getXCOFFSection(a1[105], v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_, a3, v11, 0, 0, 0);
    v13 = (void *)v48.__r_.__value_.__r.__words[0];
    if (v48.__r_.__value_.__l.__data_ != (std::string::pointer)v49)
LABEL_16:
      free(v13);
  }
  else
  {
    if ((a3 - 5) <= 2u)
    {
      PreferredAlign = llvm::DataLayout::getPreferredAlign((llvm::DataLayout *)(*(_QWORD *)(a2 + 40) + 272), (const llvm::GlobalVariable *)a2);
      v46.__r_.__value_.__s.__data_[20] = 0x343231u >> (8 * (a3 - 5));
      sub_1C4E61270(&v47, &v46.__r_.__value_.__s.__data_[20], &v46.__r_.__value_.__s.__data_[21], (char *)&v46.__r_.__value_.__r.__words[2] + 5 - ((char *)&v46.__r_.__value_.__r.__words[2] + 4));
      v16 = std::string::insert(&v47, 0, ".rodata.str");
      v17 = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v48.__r_.__value_.__r.__words[2] = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      v18 = std::string::append(&v48, ".");
      v19 = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v45 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v48.__r_.__value_.__l.__data_);
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v47.__r_.__value_.__l.__data_);
      v20 = 0;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
      *(_OWORD *)&v48.__r_.__value_.__r.__words[1] = xmmword_1C85F20B0;
      v21 = 1 << PreferredAlign;
      do
      {
        v47.__r_.__value_.__s.__data_[v20-- + 20] = (v21 % 0xA) | 0x30;
        v22 = v21 > 9;
        v21 /= 0xAuLL;
      }
      while (v22);
      sub_1C4E61270(&v46, &v47.__r_.__value_.__s.__data_[v20 + 21], &v47.__r_.__value_.__s.__data_[21], -v20);
      if (v45 >= 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      if (v45 >= 0)
        v24 = HIBYTE(v45) & 0x7F;
      else
        v24 = (std::string::size_type)__p[1];
      v25 = std::string::insert(&v46, 0, (const std::string::value_type *)v23, v24);
      v47 = *v25;
      v25->__r_.__value_.__r.__words[0] = 0;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v26 = SHIBYTE(v47.__r_.__value_.__r.__words[2]);
      v27 = (void *)v47.__r_.__value_.__r.__words[0];
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v28 = &v47;
      else
        v28 = (std::string *)v47.__r_.__value_.__r.__words[0];
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = *((_BYTE *)&v47.__r_.__value_.__s + 23) & 0x7F;
      else
        v29 = v47.__r_.__value_.__l.__size_;
      v48.__r_.__value_.__l.__size_ = 0;
      if (v48.__r_.__value_.__r.__words[2] < v29)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v48, v49, v29, 1);
        v30 = v48.__r_.__value_.__l.__size_;
      }
      else
      {
        v30 = 0;
        v31 = 0;
        if (!v29)
        {
LABEL_44:
          v48.__r_.__value_.__l.__size_ = v31 + v29;
          if (v26 < 0)
            operator delete(v27);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v46.__r_.__value_.__l.__data_);
          if ((*(_BYTE *)(a4 + 1040) & 4) != 0)
          {
            (*(void (**)(_QWORD *, std::string *, uint64_t, uint64_t))(*a1 + 80))(a1, &v48, a2, a4);
            v32 = (*(_BYTE *)(a4 + 1040) & 4) == 0;
          }
          else
          {
            v32 = 1;
          }
          XCOFFSection = llvm::MCContext::getXCOFFSection(a1[105], v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_, a3, 257, v32, 0, 0);
          if (v48.__r_.__value_.__l.__data_ != (std::string::pointer)v49)
            free(v48.__r_.__value_.__l.__data_);
          if (SHIBYTE(v45) < 0)
            operator delete(__p[0]);
          return XCOFFSection;
        }
      }
      memcpy((void *)(v48.__r_.__value_.__r.__words[0] + v30), v28, v29);
      v31 = v48.__r_.__value_.__l.__size_;
      goto LABEL_44;
    }
    if ((a3 & 0xFE) != 2)
    {
      if (a3 <= 0x14u && ((1 << a3) & 0x1B8000) != 0)
      {
        if ((*(_BYTE *)(a4 + 1040) & 4) == 0)
          return a1[4];
        v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
        *(_OWORD *)&v48.__r_.__value_.__r.__words[1] = xmmword_1C85F20B0;
        (*(void (**)(_QWORD *, std::string *, uint64_t, uint64_t))(*a1 + 80))(a1, &v48, a2, a4);
        v33 = a1[105];
        v35 = v48.__r_.__value_.__l.__size_;
        v34 = (void *)v48.__r_.__value_.__r.__words[0];
        v36 = 261;
        v37 = 19;
      }
      else
      {
        if ((a3 & 0xFC) != 8 && (a3 & 0xFC) != 4)
        {
          if ((a3 - 12) > 2u)
            llvm::report_fatal_error((llvm *)"XCOFF other section types not yet implemented.", (const char *)1);
          if ((*(_BYTE *)(a4 + 1040) & 4) == 0)
            return a1[52];
          v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
          *(_OWORD *)&v48.__r_.__value_.__r.__words[1] = xmmword_1C85F20B0;
          (*(void (**)(_QWORD *, std::string *, uint64_t, uint64_t))(*a1 + 80))(a1, &v48, a2, a4);
          v38 = a1[105];
          size = v48.__r_.__value_.__l.__size_;
          v39 = (void *)v48.__r_.__value_.__r.__words[0];
          v41 = a3;
          v42 = 276;
          v43 = 0;
          goto LABEL_74;
        }
        if ((*(_BYTE *)(a4 + 1040) & 4) == 0)
          return a1[6];
        v48.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
        *(_OWORD *)&v48.__r_.__value_.__r.__words[1] = xmmword_1C85F20B0;
        (*(void (**)(_QWORD *, std::string *, uint64_t, uint64_t))(*a1 + 80))(a1, &v48, a2, a4);
        v33 = a1[105];
        v35 = v48.__r_.__value_.__l.__size_;
        v34 = (void *)v48.__r_.__value_.__r.__words[0];
        v37 = 4;
        v36 = 257;
      }
      XCOFFSection = llvm::MCContext::getXCOFFSection(v33, v34, v35, v37, v36, 0, 0, 0);
      v13 = (void *)v48.__r_.__value_.__r.__words[0];
      if (v48.__r_.__value_.__l.__data_ == (std::string::pointer)v49)
        return XCOFFSection;
      goto LABEL_16;
    }
    if ((*(_BYTE *)(a4 + 1040) & 2) != 0)
      return *(_QWORD *)((*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 240))(a1, a2, a4) + 40);
    else
      return a1[3];
  }
  return XCOFFSection;
}

unint64_t llvm::TargetLoweringObjectFileXCOFF::getSectionForJumpTable(llvm::TargetLoweringObjectFileXCOFF *this, const llvm::Function *a2, const llvm::TargetMachine *a3)
{
  unint64_t XCOFFSection;
  void *v6;
  __int128 v7;
  _QWORD v8[17];

  v8[16] = *MEMORY[0x1E0C80C00];
  if ((*((_BYTE *)a3 + 1040) & 2) == 0)
    return *((_QWORD *)this + 6);
  v6 = v8;
  qmemcpy(v8, ".rodata.jmp..", 13);
  v7 = xmmword_1C85FBF60;
  (*(void (**)(llvm::TargetLoweringObjectFileXCOFF *, void **, const llvm::Function *, const llvm::TargetMachine *))(*(_QWORD *)this + 80))(this, &v6, a2, a3);
  XCOFFSection = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), v6, v7, 4, 257, 0, 0, 0);
  if (v6 != v8)
    free(v6);
  return XCOFFSection;
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::shouldPutJumpTableInFunctionSection(llvm::TargetLoweringObjectFileXCOFF *this, BOOL a2, const Function *a3)
{
  return 0;
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::getSectionForConstant(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a5;
  if (v5 >= 5)
    llvm::report_fatal_error((llvm *)"Alignments greater than 16 not yet supported.", (const char *)1);
  v6 = a1 + 48;
  if (v5 == 3)
    v6 = a1 + 736;
  if (v5 == 4)
    v7 = a1 + 744;
  else
    v7 = v6;
  return *(_QWORD *)v7;
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::Initialize(llvm::TargetLoweringObjectFileXCOFF *this, llvm::MCContext *a2, const llvm::TargetMachine *a3)
{
  uint64_t result;
  int v6;

  llvm::TargetLoweringObjectFile::Initialize(this, a2, a3);
  result = sub_1C5E4EA90(*((_DWORD *)a3 + 118));
  if ((_DWORD)result == 32)
    v6 = 187;
  else
    v6 = 188;
  *((_DWORD *)this + 239) = v6;
  *(_QWORD *)((char *)this + 948) = 0;
  *((_DWORD *)this + 240) = 3;
  return result;
}

void llvm::TargetLoweringObjectFileXCOFF::getStaticCtorSection(llvm::TargetLoweringObjectFileXCOFF *this, unsigned int a2, const llvm::MCSymbol *a3)
{
  llvm::report_fatal_error((llvm *)"no static constructor section on AIX", (const char *)1);
}

void llvm::TargetLoweringObjectFileXCOFF::getStaticDtorSection(llvm::TargetLoweringObjectFileXCOFF *this, unsigned int a2, const llvm::MCSymbol *a3)
{
  llvm::report_fatal_error((llvm *)"no static destructor section on AIX", (const char *)1);
}

uint64_t llvm::TargetLoweringObjectFileXCOFF::lowerRelativeReference()
{
  return 0;
}

void llvm::TargetLoweringObjectFileXCOFF::getStorageClassForGlobal(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1C52C1E78()
{
  return 111;
}

void sub_1C52C1E8C()
{
  llvm::report_fatal_error((llvm *)"There is no mapping that implements AppendingLinkage for XCOFF.", (const char *)1);
}

unint64_t llvm::TargetLoweringObjectFileXCOFF::getFunctionEntryPointSymbol(llvm::TargetLoweringObjectFileXCOFF *this, const llvm::GlobalValue *a2, const llvm::TargetMachine *a3)
{
  uint64_t v6;
  __int16 v7;
  unint64_t Symbol;
  uint64_t v9;
  _QWORD v11[4];
  __int16 v12;
  void *v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v15[0] = 46;
  v14 = xmmword_1C85FBF70;
  (*(void (**)(llvm::TargetLoweringObjectFileXCOFF *, void **, const llvm::GlobalValue *, const llvm::TargetMachine *))(*(_QWORD *)this + 80))(this, &v13, a2, a3);
  if ((*((_BYTE *)a3 + 1040) & 2) == 0 || (llvm::GlobalValue::getSection(a2), v6))
  {
    if (!*((_BYTE *)a2 + 16)
      && *((const llvm::GlobalValue **)a2 + 9) == (const llvm::GlobalValue *)((char *)a2 + 72)
      && (*((_BYTE *)a2 + 34) & 0x80) == 0)
    {
      goto LABEL_6;
    }
LABEL_11:
    v9 = *((_QWORD *)this + 105);
    v12 = 261;
    v11[0] = v13;
    v11[1] = v14;
    Symbol = llvm::MCContext::getOrCreateSymbol(v9, (uint64_t)v11);
    goto LABEL_12;
  }
  if (*((_BYTE *)a2 + 16))
    goto LABEL_11;
LABEL_6:
  v7 = 256;
  if (*((const llvm::GlobalValue **)a2 + 9) == (const llvm::GlobalValue *)((char *)a2 + 72)
    && (*((_DWORD *)a2 + 8) & 0x800000) == 0)
  {
    v7 = 0;
  }
  Symbol = *(_QWORD *)(llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), v13, v14, 2, v7, 0, 0, 0) + 232);
LABEL_12:
  if (v13 != v15)
    free(v13);
  return Symbol;
}

unint64_t llvm::TargetLoweringObjectFileXCOFF::getSectionForFunctionDescriptor(llvm::TargetLoweringObjectFileXCOFF *this, const llvm::Function *a2, const llvm::TargetMachine *a3)
{
  unint64_t XCOFFSection;
  void *v6;
  __int128 v7;
  _QWORD v8[17];

  v8[16] = *MEMORY[0x1E0C80C00];
  v6 = v8;
  v7 = xmmword_1C85F20B0;
  (*(void (**)(llvm::TargetLoweringObjectFileXCOFF *, void **, const llvm::Function *, const llvm::TargetMachine *))(*(_QWORD *)this + 80))(this, &v6, a2, a3);
  XCOFFSection = llvm::MCContext::getXCOFFSection(*((_QWORD *)this + 105), v6, v7, 19, 266, 0, 0, 0);
  if (v6 != v8)
    free(v6);
  return XCOFFSection;
}

unint64_t llvm::TargetLoweringObjectFileXCOFF::getSectionForTOCEntry(llvm::TargetLoweringObjectFileXCOFF *this, const llvm::MCSymbol *a2, const llvm::TargetMachine *a3)
{
  uint64_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  size_t v11;
  __int16 v12;

  v4 = *((_QWORD *)this + 105);
  v5 = *((_QWORD *)a2 + 8);
  if (v5)
  {
    v6 = (void *)*((_QWORD *)a2 + 7);
  }
  else
  {
    if ((*(_BYTE *)a2 & 4) != 0)
    {
      v9 = (uint64_t *)*((_QWORD *)a2 - 1);
      v10 = *v9;
      v7 = (uint64_t)(v9 + 2);
      v8 = v10;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    v6 = (void *)sub_1C52C2F08(v7, v8);
    v5 = v11;
  }
  if (*((_DWORD *)a3 + 137) == 4)
    v12 = 278;
  else
    v12 = 259;
  return llvm::MCContext::getXCOFFSection(v4, v6, v5, 19, v12, 0, 0, 0);
}

llvm::TargetLoweringObjectFileGOFF *llvm::TargetLoweringObjectFileGOFF::TargetLoweringObjectFileGOFF(llvm::TargetLoweringObjectFileGOFF *this)
{
  *((_BYTE *)this + 912) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  bzero((char *)this + 24, 0x329uLL);
  *((_BYTE *)this + 864) = 0;
  *((_QWORD *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_QWORD *)this + 115) = 0;
  *((_OWORD *)this + 58) = 0u;
  *((_BYTE *)this + 944) = 0;
  *(_WORD *)((char *)this + 945) = 257;
  *(_OWORD *)((char *)this + 947) = 0u;
  *((_BYTE *)this + 963) = 0;
  *((_QWORD *)this + 121) = 0;
  *((_OWORD *)this + 61) = 0u;
  *(_QWORD *)this = &off_1E814C118;
  return this;
}

{
  *((_BYTE *)this + 912) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  bzero((char *)this + 24, 0x329uLL);
  *((_BYTE *)this + 864) = 0;
  *((_QWORD *)this + 107) = 0;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_QWORD *)this + 115) = 0;
  *((_OWORD *)this + 58) = 0u;
  *((_BYTE *)this + 944) = 0;
  *(_WORD *)((char *)this + 945) = 257;
  *(_OWORD *)((char *)this + 947) = 0u;
  *((_BYTE *)this + 963) = 0;
  *((_QWORD *)this + 121) = 0;
  *((_OWORD *)this + 61) = 0u;
  *(_QWORD *)this = &off_1E814C118;
  return this;
}

uint64_t llvm::TargetLoweringObjectFileGOFF::getExplicitSectionGlobal(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 248))(a1, a2, a3);
}

void llvm::TargetLoweringObjectFileGOFF::SelectSectionForGlobal(uint64_t a1, const llvm::GlobalValue *a2, unsigned __int8 a3, llvm::TargetMachine *a4)
{
  int v5;
  _BYTE *Symbol;
  void *v7;
  size_t v8;
  size_t *v9;
  size_t v10;

  v5 = a3;
  Symbol = (_BYTE *)llvm::TargetMachine::getSymbol(a4, a2);
  if ((v5 - 15) <= 2)
  {
    if ((*Symbol & 4) != 0)
    {
      v9 = (size_t *)*((_QWORD *)Symbol - 1);
      v10 = *v9;
      v7 = v9 + 2;
      v8 = v10;
    }
    else
    {
      v7 = 0;
      v8 = 0;
    }
    llvm::MCContext::getGOFFSection(*(_QWORD *)(a1 + 840), v7, v8, 15);
  }
}

void sub_1C52C22C4(llvm::TargetLoweringObjectFile *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E814BEF8;
  v2 = (void *)*((_QWORD *)this + 126);
  if (v2 != *((void **)this + 125))
    free(v2);
  llvm::TargetLoweringObjectFile::~TargetLoweringObjectFile(this);
}

void sub_1C52C2304(llvm::TargetLoweringObjectFile *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E814BEF8;
  v2 = (void *)*((_QWORD *)this + 126);
  if (v2 != *((void **)this + 125))
    free(v2);
  llvm::TargetLoweringObjectFile::~TargetLoweringObjectFile(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C52C2358()
{
  return 0;
}

uint64_t sub_1C52C2364()
{
  return 0;
}

void sub_1C52C2370(llvm::TargetLoweringObjectFile *a1)
{
  llvm::TargetLoweringObjectFile::~TargetLoweringObjectFile(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C52C2398(llvm::TargetLoweringObjectFile *a1)
{
  llvm::TargetLoweringObjectFile::~TargetLoweringObjectFile(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C52C23C0(llvm::TargetLoweringObjectFile *a1)
{
  llvm::TargetLoweringObjectFile::~TargetLoweringObjectFile(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C52C23E8(llvm::TargetLoweringObjectFile *a1)
{
  llvm::TargetLoweringObjectFile::~TargetLoweringObjectFile(a1);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C52C240C(uint64_t a1, llvm::TargetMachine *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t result;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  if ((*(_BYTE *)(a1 + 23) & 0x20) == 0)
    return 0;
  v3 = ***(_QWORD ***)a1;
  v24 = a1;
  v4 = *(_DWORD *)(v3 + 2496);
  if (!v4)
  {
    v22 = 0;
LABEL_29:
    v8 = sub_1C541AB24(v3 + 2480, (uint64_t)&v24, &v24, v22);
    v23 = v24;
    v8[3] = 0;
    v8[4] = 0;
    *v8 = v23;
    v8[1] = v8 + 3;
    v8[2] = 0x100000000;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(v3 + 2480);
  v6 = v4 - 1;
  v7 = (v4 - 1) & ((a1 >> 4) ^ (a1 >> 9));
  v8 = (_QWORD *)(v5 + 40 * v7);
  v9 = *v8;
  if (*v8 != a1)
  {
    v10 = 0;
    v11 = 1;
    while (v9 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == -8192;
      if (v12)
        v10 = v8;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      v8 = (_QWORD *)(v5 + 40 * (v13 & v6));
      v9 = *v8;
      if (*v8 == a1)
        goto LABEL_12;
    }
    if (v10)
      v22 = v10;
    else
      v22 = v8;
    goto LABEL_29;
  }
LABEL_12:
  v14 = *((unsigned int *)v8 + 4);
  if (!(_DWORD)v14)
    return 0;
  v15 = (_QWORD *)(v8[1] + 8);
  v16 = 16 * v14;
  while (*((_DWORD *)v15 - 2) != 22)
  {
    result = 0;
    v15 += 2;
    v16 -= 16;
    if (!v16)
      return result;
  }
  v18 = *v15;
  if (!v18)
    return 0;
  v19 = *(unsigned __int8 **)(v18 - 8 * *(unsigned int *)(v18 + 8));
  if (!v19)
    return 0;
  if (*v19 - 3 <= 0xFFFFFFFD)
    llvm::report_fatal_error((llvm *)"MD_associated operand is not ValueAsMetadata", (const char *)1);
  v20 = (unsigned __int8 *)*((_QWORD *)v19 + 16);
  if (!v20 || v20[16] > 3u)
    return 0;
  result = llvm::TargetMachine::getSymbol(a2, (const llvm::GlobalValue *)v20);
  if ((*(_DWORD *)(result + 8) & 0x1C0) != 0x80)
    return 0;
  return result;
}

uint64_t sub_1C52C259C(uint64_t a1, unint64_t a2, unsigned __int8 a3)
{
  BOOL v4;
  BOOL v5;
  BOOL v6;
  unsigned int v7;

  if (a2 < 5)
    goto LABEL_20;
  if (*(_DWORD *)a1 == 1953459758 && *(_BYTE *)(a1 + 4) == 101)
    return 7;
  if (a2 < 0xB)
    goto LABEL_20;
  v4 = *(_QWORD *)a1 == 0x72615F74696E692ELL && *(_QWORD *)(a1 + 3) == 0x79617272615F7469;
  if (v4 && (a2 < 0xC || *(_BYTE *)(a1 + 11) == 46))
    return 14;
  v5 = *(_QWORD *)a1 == 0x72615F696E69662ELL && *(_QWORD *)(a1 + 3) == 0x79617272615F696ELL;
  if (v5 && (a2 < 0xC || *(_BYTE *)(a1 + 11) == 46))
    return 15;
  if (a2 >= 0xE)
  {
    v6 = *(_QWORD *)a1 == 0x74696E696572702ELL && *(_QWORD *)(a1 + 6) == 0x79617272615F7469;
    if (v6 && (a2 < 0xF || *(_BYTE *)(a1 + 14) == 46))
      return 16;
  }
LABEL_20:
  if ((a3 & 0xFD) == 0xC)
    v7 = 8;
  else
    v7 = 1;
  if (a3 - 15 >= 3)
    return v7;
  else
    return 8;
}

void sub_1C52C26D8(uint64_t a1, uint64_t a2, unsigned __int8 a3, llvm::Mangler *a4, unsigned int a5, int a6)
{
  _QWORD *v11;
  char PreferredAlign;
  char *v13;
  unint64_t v14;
  BOOL v15;
  int v16;
  char *v17;
  unint64_t v18;
  const char *v19;
  size_t v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v26;
  void **v27;
  std::string::size_type v28;
  std::string *v29;
  int v30;
  void *v31;
  std::string *v32;
  unint64_t size;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  size_t v37;
  uint64_t v38;
  std::string::size_type v39;
  uint64_t v40;
  uint64_t v41;
  std::string v42;
  std::string v43;
  void *__p[2];
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v11 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = a1 + 24;
  *(_OWORD *)(a1 + 8) = xmmword_1C85F20B0;
  if (a3 - 5 > 2)
  {
    v16 = a3 & 0xFC;
    if (v16 == 8)
    {
      *(_DWORD *)(a1 + 31) = 1953719086;
      *v11 = *(_QWORD *)".rodata.cst";
      *(_QWORD *)(a1 + 8) = 11;
      if (a5)
      {
        v17 = &v43.__r_.__value_.__s.__data_[21];
        v18 = a5;
        do
        {
          *--v17 = (v18 % 0xA) | 0x30;
          v15 = v18 > 9;
          v18 /= 0xAuLL;
        }
        while (v15);
      }
      else
      {
        v17 = &v43.__r_.__value_.__s.__data_[20];
        v43.__r_.__value_.__s.__data_[20] = 48;
      }
      sub_1C4E61270(__p, v17, &v43.__r_.__value_.__s.__data_[21], (char *)&v43.__r_.__value_.__r.__words[2] + 5 - v17);
      if (v45 >= 0)
        v36 = __p;
      else
        v36 = (void **)__p[0];
      if (v45 >= 0)
        v37 = HIBYTE(v45) & 0x7F;
      else
        v37 = (size_t)__p[1];
      v38 = *(_QWORD *)(a1 + 8);
      if (*(_QWORD *)(a1 + 16) < v38 + v37)
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, v11, v38 + v37, 1);
        v38 = *(_QWORD *)(a1 + 8);
        if (!v37)
          goto LABEL_54;
      }
      else if (!v37)
      {
LABEL_54:
        *(_QWORD *)(a1 + 8) = v38 + v37;
        goto LABEL_55;
      }
      memcpy((void *)(*(_QWORD *)a1 + v38), v36, v37);
      v38 = *(_QWORD *)(a1 + 8);
      goto LABEL_54;
    }
    if ((a3 & 0xFE) == 2)
    {
      v19 = ".text";
LABEL_13:
      v20 = 5;
      goto LABEL_70;
    }
    v19 = ".rodata";
    v20 = 7;
    if (v16 != 4 && v16 != 8)
    {
      if (a3 - 15 >= 3)
      {
        if (a3 == 13)
        {
          v19 = ".tdata";
          v20 = 6;
        }
        else
        {
          if ((a3 & 0xFD) == 0xC)
          {
            v19 = ".tbss";
            goto LABEL_13;
          }
          if (a3 == 19)
            v19 = ".data";
          else
            v19 = ".data.rel.ro";
          if (a3 == 19)
            v20 = 5;
          else
            v20 = 12;
        }
      }
      else
      {
        v19 = ".bss";
        v20 = 4;
      }
    }
LABEL_70:
    memcpy((void *)(a1 + 24), v19, v20);
    *(_QWORD *)(a1 + 8) = v20;
    if (!a2)
      goto LABEL_75;
    goto LABEL_71;
  }
  PreferredAlign = llvm::DataLayout::getPreferredAlign((llvm::DataLayout *)(*(_QWORD *)(a2 + 40) + 272), (const llvm::GlobalVariable *)a2);
  if (a5)
  {
    v13 = (char *)&v45 + 5;
    v14 = a5;
    do
    {
      *--v13 = (v14 % 0xA) | 0x30;
      v15 = v14 > 9;
      v14 /= 0xAuLL;
    }
    while (v15);
  }
  else
  {
    v13 = (char *)&v45 + 4;
    BYTE4(v45) = 48;
  }
  sub_1C4E61270(&v42, v13, (char *)&v45 + 5, (char *)&v45 + 5 - v13);
  v21 = std::string::insert(&v42, 0, ".rodata.str");
  v22 = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v43.__r_.__value_.__r.__words[2] = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  v23 = std::string::append(&v43, ".");
  v24 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v45 = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  v25 = 0;
  v26 = 1 << PreferredAlign;
  do
  {
    v43.__r_.__value_.__s.__data_[v25-- + 20] = (v26 % 0xA) | 0x30;
    v15 = v26 > 9;
    v26 /= 0xAuLL;
  }
  while (v15);
  sub_1C4E61270(&v42, &v43.__r_.__value_.__s.__data_[v25 + 21], &v43.__r_.__value_.__s.__data_[21], -v25);
  if (v45 >= 0)
    v27 = __p;
  else
    v27 = (void **)__p[0];
  if (v45 >= 0)
    v28 = HIBYTE(v45) & 0x7F;
  else
    v28 = (std::string::size_type)__p[1];
  v29 = std::string::insert(&v42, 0, (const std::string::value_type *)v27, v28);
  v43 = *v29;
  v29->__r_.__value_.__r.__words[0] = 0;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v30 = SHIBYTE(v43.__r_.__value_.__r.__words[2]);
  v31 = (void *)v43.__r_.__value_.__r.__words[0];
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v32 = &v43;
  else
    v32 = (std::string *)v43.__r_.__value_.__r.__words[0];
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&v43.__r_.__value_.__s + 23) & 0x7F;
  else
    size = v43.__r_.__value_.__l.__size_;
  *(_QWORD *)(a1 + 8) = 0;
  if (*(_QWORD *)(a1 + 16) < size)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, v11, size, 1);
    v34 = *(_QWORD *)(a1 + 8);
    goto LABEL_35;
  }
  v34 = 0;
  v35 = 0;
  if (size)
  {
LABEL_35:
    memcpy((void *)(*(_QWORD *)a1 + v34), v32, size);
    v35 = *(_QWORD *)(a1 + 8);
  }
  *(_QWORD *)(a1 + 8) = v35 + size;
  if (v30 < 0)
    operator delete(v31);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
LABEL_55:
  if (SHIBYTE(v45) < 0)
  {
    operator delete(__p[0]);
    if (!a2)
    {
LABEL_75:
      if (!a6)
        return;
      goto LABEL_83;
    }
  }
  else if (!a2)
  {
    goto LABEL_75;
  }
LABEL_71:
  if (*(_BYTE *)(a2 + 16))
    goto LABEL_75;
  llvm::Function::getSectionPrefix((uint64_t ***)a2, (uint64_t)&v43);
  if (!v43.__r_.__value_.__s.__data_[16])
  {
    if ((a6 & 1) == 0)
      return;
    goto LABEL_83;
  }
  LODWORD(__p[1]) = 0;
  v48 = 0;
  v49 = 0;
  __p[0] = &off_1E81A7280;
  v51 = a1;
  v50 = 0;
  v46 = 0;
  v47 = 0;
  v45 = 0;
  llvm::raw_ostream::write((llvm::raw_ostream *)__p, 46);
  v39 = v43.__r_.__value_.__l.__size_;
  if (v43.__r_.__value_.__l.__size_ <= v46 - (uint64_t)v47)
  {
    if (v43.__r_.__value_.__l.__size_)
    {
      memcpy(v47, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
      v47 += v39;
    }
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)__p, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  }
  __p[0] = off_1E81A6E70;
  if (v50 == 1 && v45)
    MEMORY[0x1CAA32F9C](v45, 0x1000C8077774924);
  if ((a6 & 1) != 0)
  {
LABEL_83:
    v40 = *(_QWORD *)(a1 + 8);
    if ((unint64_t)(v40 + 1) > *(_QWORD *)(a1 + 16))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, v11, v40 + 1, 1);
      v40 = *(_QWORD *)(a1 + 8);
    }
    *(_BYTE *)(*(_QWORD *)a1 + v40) = 46;
    ++*(_QWORD *)(a1 + 8);
    LODWORD(__p[1]) = 0;
    v48 = 0;
    v49 = 0;
    __p[0] = &off_1E81A7280;
    v51 = a1;
    v50 = 0;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    llvm::Mangler::getNameWithPrefix(a4, (llvm::raw_ostream *)__p, (const llvm::GlobalValue *)a2, 0);
    __p[0] = off_1E81A6E70;
    if (v50 == 1)
    {
      if (v45)
        MEMORY[0x1CAA32F9C](v45, 0x1000C8077774924);
    }
    return;
  }
  v41 = *(_QWORD *)(a1 + 8);
  if ((unint64_t)(v41 + 1) > *(_QWORD *)(a1 + 16))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1, v11, v41 + 1, 1);
    v41 = *(_QWORD *)(a1 + 8);
  }
  *(_BYTE *)(*(_QWORD *)a1 + v41) = 46;
  ++*(_QWORD *)(a1 + 8);
}

void sub_1C52C2D4C()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C52C2D60(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, *(_QWORD *)(a1 + 16));
}

std::string *sub_1C52C2D78(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  size_t v4;
  void *v5;
  void *v6;
  size_t v7;
  size_t v8;
  char v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *__src;
  size_t __len[2];
  _QWORD v19[6];

  v19[5] = *MEMORY[0x1E0C80C00];
  v3 = *(_DWORD *)(a2 + 8);
  __src = v19;
  *(_OWORD *)__len = xmmword_1C64638D0;
  llvm::APInt::toString(a2, &__src, 0x10u, 0, 0);
  v4 = __len[0];
  if (__len[0] >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = __src;
  if (__len[0] >= 0x17)
  {
    v7 = (__len[0] & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len[0] | 7) != 0x17)
      v7 = __len[0] | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v8 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
    goto LABEL_8;
  }
  *(_BYTE *)(a1 + 23) = __len[0];
  v6 = (void *)a1;
  if (v4)
LABEL_8:
    memmove(v6, v5, v4);
  *((_BYTE *)v6 + v4) = 0;
  if (__src != v19)
    free(__src);
  v9 = *(_BYTE *)(a1 + 23);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v9 >= 0)
    v12 = (_BYTE *)a1;
  else
    v12 = *(_BYTE **)a1;
  v13 = v9 & 0x7F;
  if (v10 >= 0)
    v14 = v13;
  else
    v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    do
    {
      *v12 = __tolower((char)*v12);
      ++v12;
      --v14;
    }
    while (v14);
    LOBYTE(v10) = *(_BYTE *)(a1 + 23);
    v11 = *(_QWORD *)(a1 + 8);
    LODWORD(v13) = v10 & 0x7F;
  }
  if ((v10 & 0x80u) == 0)
    v15 = v13;
  else
    v15 = v11;
  return std::string::insert((std::string *)a1, 0, ((v3 >> 2) & 0x3FFFFFFE) - v15, 48);
}

uint64_t sub_1C52C2F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4[2];
  char v5;

  v4[0] = a1;
  v4[1] = a2;
  if (*(_BYTE *)(a2 + a1 - 1) == 93)
  {
    v5 = 91;
    llvm::StringRef::rfind(v4, &v5, 1uLL);
  }
  return a1;
}

_QWORD *sub_1C52C2F74(_QWORD *result, _BYTE *a2, _BYTE *a3)
{
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;

  v3 = result;
  v4 = a3 - a2;
  v5 = result[1];
  v6 = v5 + a3 - a2;
  if (result[2] >= v6 && a2 != a3)
    goto LABEL_3;
  if (result[2] < v6)
  {
    v7 = a3;
    v8 = a2;
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)result, result + 3, v6, 1);
    a3 = v7;
    a2 = v8;
    v5 = v3[1];
  }
  if (a2 != a3)
  {
LABEL_3:
    result = memcpy((void *)(*v3 + v5), a2, v4);
    v5 = v3[1];
  }
  v3[1] = v5 + v4;
  return result;
}

uint64_t sub_1C52C300C(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  BOOL v7;
  _QWORD v8[9];

  v2 = 0;
  v8[8] = *MEMORY[0x1E0C80C00];
  v8[1] = 0;
  v8[3] = 0;
  v8[5] = 0;
  v8[0] = sub_1C52C30D8;
  v8[2] = sub_1C52C30FC;
  v8[4] = sub_1C52C3120;
  v8[6] = sub_1C52C3144;
  v8[7] = 0;
  do
  {
    v3 = (uint64_t (*)(_QWORD *))v8[v2];
    v4 = v8[v2 + 1];
    v5 = (_QWORD *)(a1 + (v4 >> 1));
    if ((v4 & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v5 + v3);
    result = v3(v5);
    if ((result & 1) != 0)
      break;
    v7 = v2 == 6;
    v2 += 2;
  }
  while (!v7);
  return result;
}

BOOL sub_1C52C30D8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *a1;
  v2 = a1[4];
  if (*a1 != v2)
    *a1 = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL sub_1C52C30FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 40);
  if (v1 != v2)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL sub_1C52C3120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 48);
  if (v1 != v2)
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

BOOL sub_1C52C3144(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 56);
  if (v1 != v2)
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(v1 + 8);
  return v1 != v2;
}

uint64_t sub_1C52C3168(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *);
  uint64_t v4;
  _QWORD *v5;
  uint64_t result;
  BOOL v7;
  _QWORD v8[9];

  v2 = 0;
  v8[8] = *MEMORY[0x1E0C80C00];
  v8[1] = 0;
  v8[3] = 0;
  v8[5] = 0;
  v8[0] = sub_1C52C3234;
  v8[2] = sub_1C52C3250;
  v8[4] = sub_1C52C326C;
  v8[6] = sub_1C52C3288;
  v8[7] = 0;
  do
  {
    v3 = (uint64_t (*)(_QWORD *))v8[v2];
    v4 = v8[v2 + 1];
    v5 = (_QWORD *)(a1 + (v4 >> 1));
    if ((v4 & 1) != 0)
      v3 = *(uint64_t (**)(_QWORD *))(*v5 + v3);
    result = v3(v5);
    if (result)
      break;
    v7 = v2 == 6;
    v2 += 2;
  }
  while (!v7);
  return result;
}

uint64_t sub_1C52C3234(_QWORD *a1)
{
  if (*a1 == a1[4] || *a1 == 0)
    return 0;
  else
    return *a1 - 56;
}

uint64_t sub_1C52C3250(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 == *(_QWORD *)(a1 + 40) || v1 == 0)
    return 0;
  else
    return v1 - 56;
}

uint64_t sub_1C52C326C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 == *(_QWORD *)(a1 + 48) || v1 == 0)
    return 0;
  else
    return v1 - 48;
}

uint64_t sub_1C52C3288(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1 == *(_QWORD *)(a1 + 56) || v1 == 0)
    return 0;
  else
    return v1 - 56;
}

BOOL llvm::TargetOptions::DisableFramePointerElim(llvm::TargetOptions *this, const llvm::MachineFunction *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int8 v23;
  unint64_t v24;
  unsigned int v25;
  int v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  BOOL v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  int v38;
  unint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  int v46;

  v3 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 112))(*((_QWORD *)a2 + 2));
  if (((*(uint64_t (**)(uint64_t, const llvm::MachineFunction *))(*(_QWORD *)v3 + 192))(v3, a2) & 1) != 0)
    return 1;
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD *)(*(_QWORD *)a2 + 112);
  if (!v5)
    return 0;
  if (!*(_DWORD *)(v5 + 8))
    return 0;
  v6 = *(_QWORD *)(v5 + 40);
  if (!v6)
    return 0;
  v7 = *(_DWORD *)(v6 + 40);
  if (!v7)
    return 0;
  v8 = *(_QWORD *)(v6 + 24);
  v9 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v10 = &unk_1ED7EA000;
  if ((v9 & 1) == 0)
  {
    v42 = v8;
    v43 = *(_QWORD **)a2;
    v45 = v7;
    v38 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v7 = v45;
    v8 = v42;
    v4 = v43;
    v10 = &unk_1ED7EA000;
    if (v38)
    {
      v39 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v39 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v39;
      __cxa_guard_release(&qword_1ED7EAC88);
      v7 = v45;
      v8 = v42;
      v4 = v43;
      v10 = (_QWORD *)&unk_1ED7EA000;
    }
  }
  v11 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v10[400] ^ 0xEEA3BE4ECE12391DLL)) ^ ((0x9DDFEA08EB382D69
                                                                      * (v10[400] ^ 0xEEA3BE4ECE12391DLL)) >> 47) ^ 0x81D3932BA3734B7BLL);
  v12 = (-348639895 * ((v11 >> 47) ^ v11)) ^ 0x696F702D;
  for (i = 1; ; ++i)
  {
    v14 = v12 & (v7 - 1);
    v15 = v8 + 24 * v14;
    v16 = *(_QWORD **)v15;
    if (*(_QWORD *)v15 == -1)
    {
      if ("frame-pointer" == (char *)-1)
        goto LABEL_19;
      goto LABEL_10;
    }
    if (v16 != (_QWORD *)-2)
      break;
    if ("frame-pointer" == (char *)-2)
      goto LABEL_19;
LABEL_10:
    if (v16 == (_QWORD *)-1)
      return 0;
    v12 = i + v14;
  }
  if (*(_QWORD *)(v15 + 8) != 13)
    goto LABEL_10;
  if (*v16 != 0x6F702D656D617266 || *(_QWORD *)((char *)v16 + 5) != 0x7265746E696F702DLL)
    goto LABEL_10;
LABEL_19:
  v19 = v4[14];
  if (!v19)
    return 0;
  if (!*(_DWORD *)(v19 + 8))
    return 0;
  v20 = *(_QWORD *)(v19 + 40);
  if (!v20)
    return 0;
  v21 = *(_DWORD *)(v20 + 40);
  if (!v21)
    return 0;
  v22 = *(_QWORD *)(v20 + 24);
  v23 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v23 & 1) == 0)
  {
    v44 = v22;
    v46 = v21;
    v40 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v21 = v46;
    v22 = v44;
    v10 = &unk_1ED7EA000;
    if (v40)
    {
      v41 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v41 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v41;
      __cxa_guard_release(&qword_1ED7EAC88);
      v21 = v46;
      v22 = v44;
      v10 = (_QWORD *)&unk_1ED7EA000;
    }
  }
  v24 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v10[400] ^ 0xEEA3BE4ECE12391DLL)) ^ ((0x9DDFEA08EB382D69
                                                                      * (v10[400] ^ 0xEEA3BE4ECE12391DLL)) >> 47) ^ 0x81D3932BA3734B7BLL);
  v25 = (-348639895 * ((v24 >> 47) ^ v24)) ^ 0x696F702D;
  v26 = v21 - 1;
  v27 = 1;
  while (2)
  {
    v28 = v25 & v26;
    v29 = v22 + 24 * v28;
    v30 = *(_QWORD **)v29;
    if (*(_QWORD *)v29 == -1)
    {
      if ("frame-pointer" == (char *)-1)
        break;
      goto LABEL_27;
    }
    if (v30 == (_QWORD *)-2)
    {
      if ("frame-pointer" == (char *)-2)
        break;
      goto LABEL_27;
    }
    if (*(_QWORD *)(v29 + 8) != 13
      || (*v30 == 0x6F702D656D617266 ? (v31 = *(_QWORD *)((char *)v30 + 5) == 0x7265746E696F702DLL) : (v31 = 0), !v31))
    {
LABEL_27:
      if (v30 == (_QWORD *)-1)
        return 0;
      v25 = v27 + v28;
      ++v27;
      continue;
    }
    break;
  }
  v32 = *(_QWORD *)(v29 + 16);
  if (!v32)
    return 0;
  v33 = *(_DWORD *)(v32 + 16);
  v34 = v32 + *(unsigned int *)(v32 + 12) + 24;
  if (v33 == 3)
  {
    v35 = *(unsigned __int16 *)(v34 + 1);
    v36 = *(unsigned __int8 *)(v34 + 3);
    return v35 == 27745 && v36 == 108;
  }
  else
  {
    if (v33 != 8 || *(_QWORD *)(v34 + 1) != 0x6661656C2D6E6F6ELL)
      return 0;
    return *(_BYTE *)(*((_QWORD *)a2 + 7) + 62) != 0;
  }
}

uint64_t llvm::TargetOptions::LessPreciseFPMAD(llvm::TargetOptions *this)
{
  if ((*((_WORD *)this + 6) & 1) != 0)
    return 1;
  else
    return *(_BYTE *)this & 1;
}

BOOL llvm::TargetOptions::HonorSignDependentRoundingFPMath(llvm::TargetOptions *this)
{
  return (*((_WORD *)this + 6) & 0x81) == 128;
}

uint64_t llvm::TargetOptions::ShouldEmitDebugEntryValues(llvm::TargetOptions *this)
{
  unsigned int v1;

  v1 = *((unsigned __int16 *)this + 28);
  if ((v1 & 2) == 0 || *((_DWORD *)this + 27) == 3)
    return (v1 >> 2) & 1;
  else
    return 1;
}

void llvm::initializeTargetPassConfigPass(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED830340);
  if (v1 != -1)
  {
    v4[0] = sub_1C52C37B4;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED830340, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C52C37B4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Target Pass Configuration";
  *(_QWORD *)(v2 + 8) = 25;
  *(_QWORD *)(v2 + 16) = "targetpassconfig";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &llvm::TargetPassConfig::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::TargetPassConfig>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

void llvm::TargetPassConfig::~TargetPassConfig(llvm::TargetPassConfig *this)
{
  _QWORD *v2;
  _QWORD *v3;

  *(_QWORD *)this = &off_1E814C5C8;
  v2 = (_QWORD *)*((_QWORD *)this + 15);
  if (v2)
  {
    v3 = (_QWORD *)v2[3];
    if (v3 != v2 + 5)
      free(v3);
    MEMORY[0x1CAA32FB4](*v2, 8);
    MEMORY[0x1CAA32FC0](v2, 0x10A0C4029F7AB55);
  }
  llvm::Pass::~Pass(this);
}

{
  llvm::TargetPassConfig::~TargetPassConfig(this);
  JUMPOUT(0x1CAA32FC0);
}

unint64_t sub_1C52C38B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t result;
  unint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  int v16;
  _QWORD v17[4];
  __int16 v18;
  uint64_t v19[2];

  v3 = a3;
  v19[0] = a2;
  v19[1] = a3;
  LOBYTE(v17[0]) = 44;
  result = llvm::StringRef::find(v19, (char *)v17, 1uLL, 0);
  if (result == -1)
  {
    v16 = 0;
  }
  else
  {
    if (v3 >= result)
      v7 = result;
    else
      v7 = v3;
    if (v3 <= result + 1)
    {
      v16 = 0;
    }
    else
    {
      v8 = 0;
      v9 = (unsigned __int8 *)(a2 + result + 1);
      v10 = result - v3 + 1;
      do
      {
        v11 = *v9;
        if ((v11 - 48) >= 0xA)
        {
          if ((v11 - 97) >= 0x1A)
          {
            if ((v11 - 65) > 0x19)
              goto LABEL_25;
            v12 = -55;
          }
          else
          {
            v12 = -87;
          }
        }
        else
        {
          v12 = -48;
        }
        v13 = v12 + v11;
        if (v13 > 9)
          goto LABEL_25;
        v14 = 10 * v8 + v13;
        if (v8 > v14 / 0xA)
          goto LABEL_25;
        ++v9;
        v8 = v14;
      }
      while (!__CFADD__(v10++, 1));
      v16 = 0;
      if (v14 < 0x100000000)
        v16 = v14;
      if (HIDWORD(v14))
      {
LABEL_25:
        v18 = 1283;
        v17[0] = "invalid pass instance specifier ";
        v17[2] = a2;
        v17[3] = v3;
        llvm::report_fatal_error((uint64_t)v17, 1);
      }
    }
    v3 = v7;
  }
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = v16;
  return result;
}

const char *sub_1C52C3A04(uint64_t a1, size_t a2)
{
  uint64_t PassInfo;
  const char *v8;
  __int16 v9;
  uint64_t v10[4];
  __int16 v11;
  uint64_t v12[4];
  __int16 v13;
  uint64_t v14[5];
  _BYTE v15[40];

  if (!a2)
    return 0;
  if (a2 == 11 && *(_QWORD *)a1 == 0x6E6972702D6D7361 && *(_QWORD *)(a1 + 3) == 0x7265746E6972702DLL)
    return "asm-printer";
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  PassInfo = llvm::PassRegistry::getPassInfo(qword_1ED830BC0[0], (unsigned __int8 *)a1, a2);
  if (!PassInfo)
  {
    v13 = 263;
    LOBYTE(v12[0]) = 34;
    v11 = 261;
    v10[0] = a1;
    v10[1] = a2;
    sub_1C6131AAC(v12, v10, (uint64_t)v14);
    v8 = "\" pass is not registered.";
    v9 = 259;
    sub_1C6131AAC(v14, (uint64_t *)&v8, (uint64_t)v15);
    llvm::report_fatal_error((uint64_t)v15, 1);
  }
  return *(const char **)(PassInfo + 32);
}

void llvm::getCGPassBuilderOption(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 36) = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 15) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 25) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 44) = 0;
  if (word_1ED801F30)
  {
    *(_BYTE *)(a1 + 42) = dword_1ED801FA8 != 0;
    *(_BYTE *)(a1 + 43) = 1;
  }
  if (word_1ED802E78)
  {
    *(_DWORD *)(a1 + 32) = dword_1ED802EF0;
    *(_BYTE *)(a1 + 36) = 1;
  }
  if (word_1ED801FF0)
  {
    *(_BYTE *)(a1 + 44) = dword_1ED802068 != 0;
    *(_BYTE *)(a1 + 45) = 1;
  }
  if (word_1ED800970)
  {
    *(_BYTE *)(a1 + 2) = byte_1ED8009E8;
    *(_BYTE *)(a1 + 3) = 1;
  }
  if (word_1ED801270)
  {
    *(_BYTE *)a1 = dword_1ED8012E8 != 0;
    *(_BYTE *)(a1 + 1) = 1;
  }
  if (word_1ED830288)
  {
    *(_BYTE *)(a1 + 40) = dword_1ED830300 != 0;
    *(_BYTE *)(a1 + 41) = 1;
  }
  *(_BYTE *)(a1 + 9) = byte_1ED8024E8;
  *(_BYTE *)(a1 + 7) = byte_1ED800E68;
  *(_BYTE *)(a1 + 6) = byte_1ED8019A8;
  *(_DWORD *)(a1 + 20) = dword_1ED802C98;
  *(_BYTE *)(a1 + 8) = byte_1ED802428;
  *(_DWORD *)(a1 + 28) = dword_1ED803148;
  *(_BYTE *)(a1 + 13) = byte_1ED801A68;
  *(_BYTE *)(a1 + 10) = byte_1ED8015E8;
  *(_BYTE *)(a1 + 15) = byte_1ED8016A8;
  *(_BYTE *)(a1 + 11) = byte_1ED801768;
  *(_BYTE *)(a1 + 14) = byte_1ED8018E8;
  *(_BYTE *)(a1 + 12) = byte_1ED801B28;
  *(_BYTE *)(a1 + 16) = byte_1ED801BE8;
  *(_BYTE *)(a1 + 17) = byte_1ED801CA8;
}

void llvm::registerCodeGenCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  int v47;
  char *v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int v60;
  const char *v61;
  char *v62;
  unint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  const char *v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  uint64_t v72[4];
  __int16 v73;
  uint64_t v74[4];
  __int16 v75;
  uint64_t v76[5];
  uint64_t v77[5];
  unint64_t v78;
  uint64_t v79;
  int v80;

  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v78 = 0;
    v36 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 32, &v78);
    v37 = v36;
    v38 = *(unsigned int *)(a1 + 8);
    v36[4 * v38 + 3] = (char *)&off_1EF8EB2A0 + 2;
    v39 = *(_QWORD **)a1;
    if ((_DWORD)v38)
    {
      v40 = 32 * v38;
      v41 = v36;
      do
      {
        v41[3] = 0;
        v42 = v39[3];
        v41[3] = v42;
        if (v39[3] >= 8uLL)
        {
          if ((v42 & 2) != 0 && (v42 & 4) != 0)
          {
            (*(void (**)(_QWORD *, _QWORD *))((v42 & 0xFFFFFFFFFFFFFFF8) + 8))(v41, v39);
          }
          else
          {
            v43 = *(_OWORD *)v39;
            v41[2] = v39[2];
            *(_OWORD *)v41 = v43;
          }
          v39[3] = 0;
        }
        v39 += 4;
        v41 += 4;
        v40 -= 32;
      }
      while (v40);
      v39 = *(_QWORD **)a1;
      v44 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v44)
      {
        v45 = 32 * v44;
        v46 = (char *)(v39 - 4);
        do
        {
          sub_1C5052E10(&v46[v45]);
          v45 -= 32;
        }
        while (v45);
        v39 = *(_QWORD **)a1;
      }
    }
    v47 = v78;
    if (v39 != (_QWORD *)(a1 + 16))
      free(v39);
    *(_QWORD *)a1 = v37;
    v5 = *(_DWORD *)(a1 + 8) + 1;
    *(_DWORD *)(a1 + 12) = v47;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)a1 + 32 * v4 + 24) = (char *)&off_1EF8EB2A0 + 2;
    v5 = v4 + 1;
  }
  *(_DWORD *)(a1 + 8) = v5;
  if (byte_1ED8029F7 >= 0)
    v6 = byte_1ED8029F7 & 0x7F;
  else
    v6 = qword_1ED8029E8;
  if (byte_1ED8029F7 >= 0)
    v7 = &qword_1ED8029E0;
  else
    v7 = (uint64_t *)qword_1ED8029E0;
  sub_1C52C38B0((uint64_t)&v78, (uint64_t)v7, v6);
  v8 = v78;
  v9 = v79;
  v67 = v80;
  if (byte_1ED80290F >= 0)
    v10 = byte_1ED80290F & 0x7F;
  else
    v10 = qword_1ED802900;
  if (byte_1ED80290F >= 0)
    v11 = &qword_1ED8028F8;
  else
    v11 = (uint64_t *)qword_1ED8028F8;
  sub_1C52C38B0((uint64_t)&v78, (uint64_t)v11, v10);
  v12 = v78;
  v13 = v79;
  v66 = v80;
  if (byte_1ED802BC7 >= 0)
    v14 = byte_1ED802BC7 & 0x7F;
  else
    v14 = qword_1ED802BB8;
  if (byte_1ED802BC7 >= 0)
    v15 = &qword_1ED802BB0;
  else
    v15 = (uint64_t *)qword_1ED802BB0;
  sub_1C52C38B0((uint64_t)&v78, (uint64_t)v15, v14);
  v16 = v78;
  v17 = v79;
  v65 = v80;
  if (byte_1ED802ADF >= 0)
    v18 = byte_1ED802ADF & 0x7F;
  else
    v18 = qword_1ED802AD0;
  if (byte_1ED802ADF >= 0)
    v19 = &qword_1ED802AC8;
  else
    v19 = (uint64_t *)qword_1ED802AC8;
  sub_1C52C38B0((uint64_t)&v78, (uint64_t)v19, v18);
  v20 = v78;
  v21 = v79;
  if (v9 || v13 || v17 || v79)
  {
    v64 = v80;
    (*(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 168))(&v78, a2, v8, v9);
    v23 = v78;
    v22 = v79;
    (*(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 168))(&v78, a2, v12, v13);
    v25 = v78;
    v24 = v79;
    (*(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 168))(&v78, a2, v16, v17);
    v26 = v79;
    v63 = v78;
    (*(void (**)(unint64_t *__return_ptr, uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 168))(&v78, a2, v20, v21);
    v28 = v78;
    v27 = v79;
    if (v22 && v24)
    {
      v74[0] = (uint64_t)"start-before";
      v75 = 259;
      v72[0] = (uint64_t)" and ";
      v73 = 259;
      sub_1C6131AAC(v74, v72, (uint64_t)v76);
      v61 = "start-after";
    }
    else
    {
      v29 = v25;
      if (!v26 || !v79)
      {
        v30 = v23;
        v31 = (v22 | v24) == 0;
        v32 = *(unsigned int *)(a1 + 8);
        if (v32 >= *(_DWORD *)(a1 + 12))
        {
          v78 = 0;
          v62 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, 0, 32, &v78);
          v48 = &v62[32 * *(unsigned int *)(a1 + 8)];
          *((_QWORD *)v48 + 3) = 0;
          v49 = (char *)operator new(0x68uLL, (std::align_val_t)8uLL);
          *(_QWORD *)v48 = v49;
          *(_OWORD *)(v48 + 8) = xmmword_1C85FC080;
          *v49 = v31;
          *(_WORD *)(v49 + 1) = 0;
          *(_QWORD *)(v49 + 4) = 0;
          *(_QWORD *)(v49 + 12) = 0;
          *((_QWORD *)v49 + 3) = v30;
          *((_QWORD *)v49 + 4) = v22;
          *((_QWORD *)v49 + 5) = v29;
          *((_QWORD *)v49 + 6) = v24;
          *((_QWORD *)v49 + 7) = v63;
          *((_QWORD *)v49 + 8) = v26;
          *((_QWORD *)v49 + 9) = v28;
          *((_QWORD *)v49 + 10) = v27;
          *((_DWORD *)v49 + 22) = v66;
          *((_DWORD *)v49 + 23) = v64;
          *((_DWORD *)v49 + 24) = v67;
          *((_DWORD *)v49 + 25) = v65;
          *((_QWORD *)v48 + 3) = off_1EF8EB298;
          v50 = *(_QWORD **)a1;
          v51 = *(unsigned int *)(a1 + 8);
          if ((_DWORD)v51)
          {
            v52 = 32 * v51;
            v53 = v62;
            v54 = v62;
            do
            {
              *((_QWORD *)v53 + 3) = 0;
              v55 = v50[3];
              *((_QWORD *)v53 + 3) = v55;
              if (v50[3] >= 8uLL)
              {
                if ((v55 & 2) != 0 && (v55 & 4) != 0)
                {
                  (*(void (**)(char *, _QWORD *))((v55 & 0xFFFFFFFFFFFFFFF8) + 8))(v53, v50);
                }
                else
                {
                  v56 = *(_OWORD *)v50;
                  *((_QWORD *)v53 + 2) = v50[2];
                  *(_OWORD *)v53 = v56;
                }
                v50[3] = 0;
              }
              v50 += 4;
              v53 += 32;
              v52 -= 32;
            }
            while (v52);
            v50 = *(_QWORD **)a1;
            v57 = *(unsigned int *)(a1 + 8);
            if ((_DWORD)v57)
            {
              v58 = 32 * v57;
              v59 = (char *)(v50 - 4);
              do
              {
                sub_1C5052E10(&v59[v58]);
                v58 -= 32;
              }
              while (v58);
              v50 = *(_QWORD **)a1;
            }
          }
          else
          {
            v54 = v62;
          }
          v60 = v78;
          if (v50 != (_QWORD *)(a1 + 16))
            free(v50);
          *(_QWORD *)a1 = v54;
          v35 = *(_DWORD *)(a1 + 8) + 1;
          *(_DWORD *)(a1 + 12) = v60;
        }
        else
        {
          v33 = *(_QWORD *)a1 + 32 * v32;
          *(_QWORD *)(v33 + 24) = 0;
          v34 = (char *)operator new(0x68uLL, (std::align_val_t)8uLL);
          *(_QWORD *)v33 = v34;
          *(_OWORD *)(v33 + 8) = xmmword_1C85FC080;
          *v34 = v31;
          *(_WORD *)(v34 + 1) = 0;
          *(_QWORD *)(v34 + 4) = 0;
          *(_QWORD *)(v34 + 12) = 0;
          *((_QWORD *)v34 + 3) = v30;
          *((_QWORD *)v34 + 4) = v22;
          *((_QWORD *)v34 + 5) = v29;
          *((_QWORD *)v34 + 6) = v24;
          *((_QWORD *)v34 + 7) = v63;
          *((_QWORD *)v34 + 8) = v26;
          *((_QWORD *)v34 + 9) = v28;
          *((_QWORD *)v34 + 10) = v27;
          *((_DWORD *)v34 + 22) = v66;
          *((_DWORD *)v34 + 23) = v64;
          *((_DWORD *)v34 + 24) = v67;
          *((_DWORD *)v34 + 25) = v65;
          *(_QWORD *)(v33 + 24) = off_1EF8EB298;
          v35 = *(_DWORD *)(a1 + 8) + 1;
        }
        *(_DWORD *)(a1 + 8) = v35;
        return;
      }
      v74[0] = (uint64_t)"stop-before";
      v75 = 259;
      v72[0] = (uint64_t)" and ";
      v73 = 259;
      sub_1C6131AAC(v74, v72, (uint64_t)v76);
      v61 = "stop-after";
    }
    v70 = v61;
    v71 = 259;
    sub_1C6131AAC(v76, (uint64_t *)&v70, (uint64_t)v77);
    v68 = " specified!";
    v69 = 259;
    sub_1C6131AAC(v77, (uint64_t *)&v68, (uint64_t)&v78);
    llvm::report_fatal_error((uint64_t)&v78, 1);
  }
}

uint64_t llvm::TargetPassConfig::getOptLevel(llvm::TargetPassConfig *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 14) + 552);
}

_QWORD *llvm::TargetPassConfig::insertPass(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  char *v15;
  _QWORD v16[3];

  v4 = result[15];
  v5 = *(unsigned int *)(v4 + 32);
  if (v5 >= *(_DWORD *)(v4 + 36))
  {
    v7 = v4 + 24;
    v16[0] = a2;
    v16[1] = a3;
    v16[2] = a4;
    v8 = v5 + 1;
    v9 = *(_QWORD *)(v4 + 24);
    v10 = v9 + 24 * v5 > (unint64_t)v16;
    if (v9 <= (unint64_t)v16 && v10)
    {
      v15 = (char *)v16 - v9;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v4 + 40, v8, 24);
      v11 = *(_QWORD *)(v4 + 24);
      v12 = &v15[v11];
    }
    else
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v4 + 40, v8, 24);
      v11 = *(_QWORD *)(v4 + 24);
      v12 = (char *)v16;
    }
    v13 = v11 + 24 * *(unsigned int *)(v4 + 32);
    v14 = *(_OWORD *)v12;
    *(_QWORD *)(v13 + 16) = *((_QWORD *)v12 + 2);
    *(_OWORD *)v13 = v14;
  }
  else
  {
    v6 = (_QWORD *)(*(_QWORD *)(v4 + 24) + 24 * v5);
    *v6 = a2;
    v6[1] = a3;
    v6[2] = a4;
  }
  ++*(_DWORD *)(v4 + 32);
  return result;
}

void llvm::TargetPassConfig::TargetPassConfig(llvm::TargetPassConfig *this)
{
  llvm::TargetPassConfig::TargetPassConfig(this);
}

{
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = &llvm::TargetPassConfig::ID;
  *((_DWORD *)this + 6) = 4;
  *(_QWORD *)this = &off_1E814C5C8;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_DWORD *)this + 26) = 16777217;
  *((_QWORD *)this + 15) = 0;
  *((_DWORD *)this + 32) = 0x10000;
  llvm::report_fatal_error((llvm *)"Trying to construct TargetPassConfig without a target machine. Scheduling a CodeGen pass without a target triple set?", (const char *)1);
}

BOOL llvm::TargetPassConfig::hasLimitedCodeGenPipeline(llvm::TargetPassConfig *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v1 = qword_1ED8029E8;
  if (byte_1ED8029F7 >= 0)
    v1 = byte_1ED8029F7 & 0x7F;
  if (v1)
    return 1;
  v2 = qword_1ED802900;
  if (byte_1ED80290F >= 0)
    v2 = byte_1ED80290F & 0x7F;
  if (v2)
    return 1;
  v3 = qword_1ED802BB8;
  if (byte_1ED802BC7 >= 0)
    v3 = byte_1ED802BC7 & 0x7F;
  if (v3)
    return 1;
  v5 = qword_1ED802AD0;
  if (byte_1ED802ADF >= 0)
    v5 = byte_1ED802ADF & 0x7F;
  return v5 != 0;
}

std::string *llvm::TargetPassConfig::getLimitedCodeGenPipelineReason@<X0>(llvm::TargetPassConfig *this@<X0>, std::string *a2@<X8>)
{
  std::string *result;
  uint64_t v6;
  char v7;
  uint64_t v8;

  result = (std::string *)llvm::TargetPassConfig::hasLimitedCodeGenPipeline(this);
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if ((_DWORD)result)
  {
    v6 = 0;
    v7 = 1;
    do
    {
      v8 = *(uint64_t *)((char *)&off_1E814C7A8 + v6 * 8);
      if (*(char *)(v8 + 151) < 0)
      {
        if (*(_QWORD *)(v8 + 136))
        {
LABEL_7:
          if ((v7 & 1) == 0)
            std::string::append(a2, (const std::string::value_type *)this);
          result = std::string::append(a2, off_1E814C7C8[v6]);
          v7 = 0;
        }
      }
      else if (*(_BYTE *)(v8 + 151))
      {
        goto LABEL_7;
      }
      ++v6;
    }
    while (v6 != 4);
  }
  return result;
}

const void *llvm::TargetPassConfig::getPassSubstitution(llvm::TargetPassConfig *this, const void *a2)
{
  const void *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  const void *v8;
  uint64_t v9;

  v2 = a2;
  v4 = *((_QWORD *)this + 15);
  v8 = a2;
  v9 = 0;
  v5 = sub_1C52C6AE8((uint64_t *)v4, &v8, &v9);
  v6 = v9;
  if (!v5)
    v6 = *(_QWORD *)v4 + 24 * *(unsigned int *)(v4 + 16);
  if (**((_QWORD **)this + 15) + 24 * *(unsigned int *)(*((_QWORD *)this + 15) + 16) != v6)
    return *(const void **)(v6 + 8);
  return v2;
}

BOOL llvm::TargetPassConfig::isPassSubstitutedOrOverridden(llvm::TargetPassConfig *this, void *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  BOOL v10;
  void *v13;
  uint64_t v14;

  v4 = *((_QWORD *)this + 15);
  v13 = a2;
  v14 = 0;
  v5 = sub_1C52C6AE8((uint64_t *)v4, &v13, &v14);
  v6 = v14;
  if (!v5)
    v6 = *(_QWORD *)v4 + 24 * *(unsigned int *)(v4 + 16);
  if (**((_QWORD **)this + 15) + 24 * *(unsigned int *)(*((_QWORD *)this + 15) + 16) == v6)
    v7 = (uint64_t)a2;
  else
    v7 = *(_QWORD *)(v6 + 8);
  v8 = (void *)sub_1C52C45B0(a2, v7);
  if (v9)
    v10 = 1;
  else
    v10 = v8 == 0;
  return v10 || v8 != a2;
}

uint64_t sub_1C52C45B0(void *a1, uint64_t a2)
{
  int v2;

  if (a1 == &unk_1EF8F6FB8)
  {
    v2 = byte_1ED800AA8;
  }
  else if (a1 == &unk_1EF8F6CCA)
  {
    v2 = byte_1ED800B68;
  }
  else if (a1 == &unk_1EF8F7011)
  {
    v2 = byte_1ED800C28;
  }
  else if (a1 == &unk_1EF8F7012)
  {
    v2 = byte_1ED800CE8;
  }
  else if (a1 == &unk_1EF8F6F21)
  {
    v2 = byte_1ED800DA8;
  }
  else if (a1 == &unk_1EF8F7010)
  {
    v2 = byte_1ED800F28;
  }
  else if (a1 == &unk_1EF8F6ED0)
  {
    v2 = byte_1ED800FE8;
  }
  else if (a1 == &unk_1EF8F6ED2)
  {
    v2 = byte_1ED8010A8;
  }
  else if (a1 == &unk_1EF8F6F52)
  {
    v2 = byte_1ED801168;
  }
  else if (a1 == &unk_1EF8F6F2A)
  {
    v2 = byte_1ED801228;
  }
  else if (a1 == &unk_1EF8F6F51)
  {
    v2 = byte_1ED8013A8;
  }
  else if (a1 == &unk_1EF8F6FA0)
  {
    v2 = byte_1ED801468;
  }
  else if (a1 == &unk_1EF8F6FA1)
  {
    v2 = byte_1ED801528;
  }
  else
  {
    if (a1 != &unk_1EF8F6F29)
      return a2;
    v2 = byte_1ED801828;
  }
  if (v2)
    return 0;
  return a2;
}

void llvm::TargetPassConfig::addPass(llvm::TargetPassConfig *this, llvm::Pass *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  const void *v15;
  size_t v16;
  void *p_p;
  uint64_t v18;
  uint64_t v19;
  const std::string::value_type *v20;
  std::string::size_type v21;
  std::string *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  void *Pass;
  void *__p;
  std::string::size_type v31;
  int64_t v32;
  std::string v33;
  std::string v34;

  v4 = *((_QWORD *)a2 + 2);
  if (*((_QWORD *)this + 5) == v4)
  {
    v6 = *((_DWORD *)this + 18);
    v5 = *((_DWORD *)this + 19);
    *((_DWORD *)this + 19) = v5 + 1;
    if (v5 == v6)
      *((_BYTE *)this + 104) = 1;
  }
  if (*((_QWORD *)this + 7) == v4)
  {
    v8 = *((_DWORD *)this + 22);
    v7 = *((_DWORD *)this + 23);
    *((_DWORD *)this + 23) = v7 + 1;
    if (v7 == v8)
      *((_BYTE *)this + 105) = 1;
  }
  if (!*((_BYTE *)this + 104) || *((_BYTE *)this + 105))
  {
    (*(void (**)(llvm::Pass *))(*(_QWORD *)a2 + 8))(a2);
    goto LABEL_10;
  }
  if (*((_BYTE *)this + 106))
  {
    *((_BYTE *)&v33.__r_.__value_.__s + 23) = 6;
    strcpy((char *)&v33, "After ");
    v13 = (*(uint64_t (**)(llvm::Pass *))(*(_QWORD *)a2 + 16))(a2);
    if (v14 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v15 = (const void *)v13;
    v16 = v14;
    if (v14 >= 0x17)
    {
      v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v14 | 7) != 0x17)
        v18 = v14 | 7;
      v19 = v18 + 1;
      p_p = operator new(v18 + 1);
      v31 = v16;
      v32 = v19 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v32) = v14;
      p_p = &__p;
      if (!v14)
        goto LABEL_29;
    }
    memmove(p_p, v15, v16);
LABEL_29:
    *((_BYTE *)p_p + v16) = 0;
    if (v32 >= 0)
      v20 = (const std::string::value_type *)&__p;
    else
      v20 = (const std::string::value_type *)__p;
    if (v32 >= 0)
      v21 = HIBYTE(v32) & 0x7F;
    else
      v21 = v31;
    v22 = std::string::append(&v33, v20, v21);
    v34 = *v22;
    v22->__r_.__value_.__r.__words[0] = 0;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v32) < 0)
      operator delete(__p);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (*((_BYTE *)this + 107) && (dword_1ED801D68 == 1 || dword_1ED801E28 == 1))
    {
      v23 = *((_QWORD *)this + 4);
      v24 = operator new();
      *(_QWORD *)(v24 + 8) = 0;
      *(_QWORD *)(v24 + 16) = &unk_1EF8F6F39;
      *(_DWORD *)(v24 + 24) = 4;
      *(_QWORD *)v24 = &off_1E81447B8;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 16))(v23, v24);
    }
    (*(void (**)(_QWORD, llvm::Pass *))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), a2);
    llvm::TargetPassConfig::addMachinePostPasses((uint64_t)this, (uint64_t)&v34);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    goto LABEL_45;
  }
  (*(void (**)(_QWORD, llvm::Pass *))(**((_QWORD **)this + 4) + 16))(*((_QWORD *)this + 4), a2);
LABEL_45:
  v25 = *((_QWORD *)this + 15);
  v26 = *(unsigned int *)(v25 + 32);
  if ((_DWORD)v26)
  {
    v27 = 24 * v26;
    v28 = (_BYTE *)(*(_QWORD *)(v25 + 24) + 16);
    do
    {
      if (*((_QWORD *)v28 - 2) == v4)
      {
        Pass = (void *)*((_QWORD *)v28 - 1);
        if (!*v28)
          Pass = (void *)llvm::Pass::createPass(*((llvm::Pass **)v28 - 1), Pass);
        llvm::TargetPassConfig::addPass(this, (llvm::Pass *)Pass);
      }
      v28 += 24;
      v27 -= 24;
    }
    while (v27);
  }
LABEL_10:
  if (*((_QWORD *)this + 8) == v4)
  {
    v10 = *((_DWORD *)this + 24);
    v9 = *((_DWORD *)this + 25);
    *((_DWORD *)this + 25) = v9 + 1;
    if (v9 == v10)
      *((_BYTE *)this + 105) = 1;
  }
  if (*((_QWORD *)this + 6) == v4)
  {
    v12 = *((_DWORD *)this + 20);
    v11 = *((_DWORD *)this + 21);
    *((_DWORD *)this + 21) = v11 + 1;
    if (v11 == v12)
      *((_BYTE *)this + 104) = 1;
  }
  if (*((_BYTE *)this + 105))
  {
    if (!*((_BYTE *)this + 104))
      llvm::report_fatal_error((llvm *)"Cannot stop compilation after pass that is not run", (const char *)1);
  }
}

uint64_t llvm::TargetPassConfig::addMachinePrePasses(uint64_t this, int a2)
{
  uint64_t v3;
  uint64_t v4;

  if (a2 && *(_BYTE *)(this + 107) && (dword_1ED801D68 == 1 || dword_1ED801E28 == 1))
  {
    v3 = *(_QWORD *)(this + 32);
    v4 = operator new();
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = &unk_1EF8F6F39;
    *(_DWORD *)(v4 + 24) = 4;
    *(_QWORD *)v4 = &off_1E81447B8;
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4);
  }
  return this;
}

uint64_t llvm::TargetPassConfig::addMachinePostPasses(uint64_t result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t MachineVerifierPass;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!*(_BYTE *)(result + 107))
    goto LABEL_2;
  if (dword_1ED801E28 == 1)
  {
    v9 = result;
    v10 = a2;
    v2 = (uint64_t *)(result + 32);
    v5 = *(_QWORD *)(result + 32);
    v6 = operator new();
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = &unk_1EF8F6F2B;
    *(_DWORD *)(v6 + 24) = 4;
    *(_QWORD *)v6 = &off_1E8144508;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
  }
  else
  {
    if (dword_1ED801D68 != 1)
      goto LABEL_2;
    v9 = result;
    v10 = a2;
    v2 = (uint64_t *)(result + 32);
  }
  v7 = *v2;
  v8 = operator new();
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)(v8 + 16) = &unk_1EF8F6FA2;
  *(_DWORD *)(v8 + 24) = 4;
  *(_QWORD *)v8 = &off_1E8146A48;
  *(_BYTE *)(v8 + 28) = 1;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v8);
  result = v9;
  a2 = v10;
LABEL_2:
  if (dword_1ED830300 == 1)
  {
    v3 = *(_QWORD *)(result + 32);
    MachineVerifierPass = llvm::createMachineVerifierPass(a2);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, MachineVerifierPass);
  }
  return result;
}

uint64_t llvm::TargetPassConfig::addPass(llvm::TargetPassConfig *this, void *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  llvm::Pass *v8;
  const void *v9;
  llvm::Pass *Pass;
  uint64_t v11;
  void *v13;
  uint64_t v14;

  v4 = *((_QWORD *)this + 15);
  v13 = a2;
  v14 = 0;
  v5 = sub_1C52C6AE8((uint64_t *)v4, &v13, &v14);
  v6 = v14;
  if (!v5)
    v6 = *(_QWORD *)v4 + 24 * *(unsigned int *)(v4 + 16);
  if (**((_QWORD **)this + 15) + 24 * *(unsigned int *)(*((_QWORD *)this + 15) + 16) == v6)
    v7 = (uint64_t)a2;
  else
    v7 = *(_QWORD *)(v6 + 8);
  v8 = (llvm::Pass *)sub_1C52C45B0(a2, v7);
  if (!v8)
    return 0;
  Pass = v8;
  if (!(_BYTE)v9)
    Pass = (llvm::Pass *)llvm::Pass::createPass(v8, v9);
  v11 = *((_QWORD *)Pass + 2);
  llvm::TargetPassConfig::addPass(this, Pass);
  return v11;
}

uint64_t llvm::TargetPassConfig::addVerifyPass(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t MachineVerifierPass;

  if (dword_1ED830300 == 1)
  {
    v2 = *(_QWORD *)(result + 32);
    MachineVerifierPass = llvm::createMachineVerifierPass(a2);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, MachineVerifierPass);
  }
  return result;
}

uint64_t llvm::TargetPassConfig::addDebugifyPass(llvm::TargetPassConfig *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  v2 = operator new();
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = &unk_1EF8F6F39;
  *(_DWORD *)(v2 + 24) = 4;
  *(_QWORD *)v2 = &off_1E81447B8;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
}

uint64_t llvm::TargetPassConfig::addStripDebugPass(llvm::TargetPassConfig *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  v2 = operator new();
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = &unk_1EF8F6FA2;
  *(_DWORD *)(v2 + 24) = 4;
  *(_QWORD *)v2 = &off_1E8146A48;
  *(_BYTE *)(v2 + 28) = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
}

uint64_t llvm::TargetPassConfig::addCheckDebugPass(llvm::TargetPassConfig *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 4);
  v2 = operator new();
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = &unk_1EF8F6F2B;
  *(_DWORD *)(v2 + 24) = 4;
  *(_QWORD *)v2 = &off_1E8144508;
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
}

void llvm::TargetPassConfig::addIRPasses(llvm::TargetPassConfig *this)
{
  llvm::Pass *VerifierPass;
  llvm::Pass *CFLAndersAAWrapperPass;
  llvm::Pass *CFLSteensAAWrapperPass;
  llvm::Pass *TypeBasedAAWrapperPass;
  llvm *v6;
  llvm::Pass *ScopedNoAliasAAWrapperPass;
  llvm *v8;
  llvm::Pass *BasicAAWrapperPass;
  llvm *v10;
  llvm::Pass *CanonicalizeFreezeInLoopsPass;
  llvm *v12;
  llvm::Pass *LoopStrengthReducePass;
  llvm *v14;
  char *v15;
  llvm::Pass *PrintFunctionPass;
  llvm::Pass *MergeICmpsLegacyPass;
  llvm::Pass *ExpandMemCmpPass;
  llvm *v19;
  llvm::Pass *LowerConstantIntrinsicsPass;
  llvm *v21;
  uint64_t v22;
  llvm::Pass *LowerGlobalDtorsLegacyPass;
  llvm::Pass *UnreachableBlockEliminationPass;
  llvm *v25;
  int v26;
  BOOL v27;
  llvm::Pass *ConstantHoistingPass;
  llvm::Pass *ReplaceWithVeclibLegacyPass;
  llvm::Pass *PartiallyInlineLibCallsPass;
  llvm::Pass *ExpandVectorPredicationPass;
  llvm *v32;
  llvm::Pass *ScalarizeMaskedMemIntrinLegacyPass;
  llvm *v34;
  llvm::Pass *ExpandReductionsPass;
  llvm::Pass *TLSVariableHoistPass;
  char *v37;
  __int128 v38;

  if (!*((_BYTE *)this + 129))
  {
    VerifierPass = (llvm::Pass *)llvm::createVerifierPass((llvm *)1);
    llvm::TargetPassConfig::addPass(this, VerifierPass);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 14) + 552))
  {
    switch(dword_1ED803148)
    {
      case 3:
        CFLAndersAAWrapperPass = llvm::createCFLAndersAAWrapperPass(this);
        llvm::TargetPassConfig::addPass(this, CFLAndersAAWrapperPass);
        break;
      case 2:
        CFLSteensAAWrapperPass = llvm::createCFLAndersAAWrapperPass(this);
        goto LABEL_11;
      case 1:
        break;
      default:
LABEL_12:
        TypeBasedAAWrapperPass = llvm::createTypeBasedAAWrapperPass(this);
        llvm::TargetPassConfig::addPass(this, TypeBasedAAWrapperPass);
        ScopedNoAliasAAWrapperPass = llvm::createScopedNoAliasAAWrapperPass(v6);
        llvm::TargetPassConfig::addPass(this, ScopedNoAliasAAWrapperPass);
        BasicAAWrapperPass = llvm::createBasicAAWrapperPass(v8);
        llvm::TargetPassConfig::addPass(this, BasicAAWrapperPass);
        if (!byte_1ED8015E8)
        {
          CanonicalizeFreezeInLoopsPass = (llvm::Pass *)llvm::createCanonicalizeFreezeInLoopsPass(v10);
          llvm::TargetPassConfig::addPass(this, CanonicalizeFreezeInLoopsPass);
          LoopStrengthReducePass = (llvm::Pass *)llvm::createLoopStrengthReducePass(v12);
          llvm::TargetPassConfig::addPass(this, LoopStrengthReducePass);
          if (byte_1ED801B28)
          {
            v14 = llvm::dbgs(v10);
            v15 = (char *)operator new(0x20uLL);
            v37 = v15;
            v38 = xmmword_1C640C680;
            strcpy(v15, "\n\n*** Code after LSR ***\n");
            PrintFunctionPass = (llvm::Pass *)llvm::createPrintFunctionPass((uint64_t)v14, (uint64_t)&v37);
            llvm::TargetPassConfig::addPass(this, PrintFunctionPass);
            operator delete(v15);
          }
        }
        if (!byte_1ED801A68)
        {
          MergeICmpsLegacyPass = (llvm::Pass *)llvm::createMergeICmpsLegacyPass(v10);
          llvm::TargetPassConfig::addPass(this, MergeICmpsLegacyPass);
        }
        ExpandMemCmpPass = (llvm::Pass *)llvm::createExpandMemCmpPass(v10);
        llvm::TargetPassConfig::addPass(this, ExpandMemCmpPass);
        goto LABEL_18;
    }
    CFLSteensAAWrapperPass = llvm::createCFLSteensAAWrapperPass(this);
LABEL_11:
    llvm::TargetPassConfig::addPass(this, CFLSteensAAWrapperPass);
    goto LABEL_12;
  }
LABEL_18:
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6EE8);
  v19 = (llvm *)llvm::TargetPassConfig::addPass(this, &unk_1EF8F6FF3);
  LowerConstantIntrinsicsPass = (llvm::Pass *)llvm::createLowerConstantIntrinsicsPass(v19);
  llvm::TargetPassConfig::addPass(this, LowerConstantIntrinsicsPass);
  v22 = *((_QWORD *)this + 14);
  if (*(_DWORD *)(v22 + 492) == 5 && (*(_BYTE *)(v22 + 1032) & 2) != 0)
  {
    LowerGlobalDtorsLegacyPass = (llvm::Pass *)llvm::createLowerGlobalDtorsLegacyPass(v21);
    llvm::TargetPassConfig::addPass(this, LowerGlobalDtorsLegacyPass);
  }
  UnreachableBlockEliminationPass = (llvm::Pass *)llvm::createUnreachableBlockEliminationPass(v21);
  llvm::TargetPassConfig::addPass(this, UnreachableBlockEliminationPass);
  v26 = *(_DWORD *)(*((_QWORD *)this + 14) + 552);
  if (v26)
    v27 = byte_1ED8016A8 == 0;
  else
    v27 = 0;
  if (v27)
  {
    ConstantHoistingPass = (llvm::Pass *)llvm::createConstantHoistingPass(v25);
    llvm::TargetPassConfig::addPass(this, ConstantHoistingPass);
    v26 = *(_DWORD *)(*((_QWORD *)this + 14) + 552);
  }
  if (v26)
  {
    ReplaceWithVeclibLegacyPass = (llvm::Pass *)llvm::createReplaceWithVeclibLegacyPass(v25);
    llvm::TargetPassConfig::addPass(this, ReplaceWithVeclibLegacyPass);
    if (*(_DWORD *)(*((_QWORD *)this + 14) + 552))
    {
      if (!byte_1ED8018E8)
      {
        PartiallyInlineLibCallsPass = (llvm::Pass *)llvm::createPartiallyInlineLibCallsPass(v25);
        llvm::TargetPassConfig::addPass(this, PartiallyInlineLibCallsPass);
      }
    }
  }
  ExpandVectorPredicationPass = (llvm::Pass *)llvm::createExpandVectorPredicationPass(v25);
  llvm::TargetPassConfig::addPass(this, ExpandVectorPredicationPass);
  ScalarizeMaskedMemIntrinLegacyPass = (llvm::Pass *)llvm::createScalarizeMaskedMemIntrinLegacyPass(v32);
  llvm::TargetPassConfig::addPass(this, ScalarizeMaskedMemIntrinLegacyPass);
  if (!byte_1ED802668)
  {
    ExpandReductionsPass = (llvm::Pass *)llvm::createExpandReductionsPass(v34);
    llvm::TargetPassConfig::addPass(this, ExpandReductionsPass);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 14) + 552))
  {
    TLSVariableHoistPass = (llvm::Pass *)llvm::createTLSVariableHoistPass(v34);
    llvm::TargetPassConfig::addPass(this, TLSVariableHoistPass);
  }
}

void llvm::TargetPassConfig::addISelPrepare(llvm::TargetPassConfig *this)
{
  llvm *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;
  llvm::Pass *SafeStackPass;
  llvm *v7;
  llvm::Pass *StackProtectorPass;
  llvm *v9;
  llvm *v10;
  char *v11;
  llvm::Pass *PrintFunctionPass;
  llvm::Pass *VerifierPass;
  char *v14;
  __int128 v15;

  v2 = (llvm *)(*(uint64_t (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 296))(this);
  if (*((_BYTE *)this + 131))
  {
    v4 = operator new();
    *(_QWORD *)(v4 + 16) = &llvm::DummyCGSCCPass::ID;
    *(_DWORD *)(v4 + 24) = 3;
    *(_QWORD *)v4 = &off_1E7FA79F0;
    *(_QWORD *)(v4 + 8) = 0;
    if (!atomic_load(qword_1ED830BC0))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
    llvm::initializeDummyCGSCCPassPass((llvm *)qword_1ED830BC0[0], v3);
    llvm::TargetPassConfig::addPass(this, (llvm::Pass *)v4);
  }
  SafeStackPass = (llvm::Pass *)llvm::createSafeStackPass(v2);
  llvm::TargetPassConfig::addPass(this, SafeStackPass);
  StackProtectorPass = llvm::createStackProtectorPass(v7);
  llvm::TargetPassConfig::addPass(this, StackProtectorPass);
  if (byte_1ED801BE8)
  {
    v10 = llvm::dbgs(v9);
    v11 = (char *)operator new(0x30uLL);
    v14 = v11;
    v15 = xmmword_1C64632C0;
    strcpy(v11, "\n\n*** Final LLVM Code input to ISel ***\n");
    PrintFunctionPass = (llvm::Pass *)llvm::createPrintFunctionPass((uint64_t)v10, (uint64_t)&v14);
    llvm::TargetPassConfig::addPass(this, PrintFunctionPass);
    operator delete(v11);
  }
  if (!*((_BYTE *)this + 129))
  {
    VerifierPass = (llvm::Pass *)llvm::createVerifierPass((llvm *)1);
    llvm::TargetPassConfig::addPass(this, VerifierPass);
  }
}

uint64_t llvm::TargetPassConfig::addCoreISelPasses(llvm::TargetPassConfig *this)
{
  int v2;
  uint64_t v3;
  __int16 v4;
  _BYTE *v5;
  char v6;
  uint64_t result;
  BOOL v8;
  char v9;
  llvm *v10;
  llvm::Pass *ResetMachineFunctionPass;
  void *__p;
  __int128 v13;

  v2 = dword_1ED801FA8;
  *(_BYTE *)(*((_QWORD *)this + 14) + 592) = *(_BYTE *)(*((_QWORD *)this + 14) + 592) & 0xFD | (2
                                                                                                  * (dword_1ED801FA8 != 2));
  v3 = *((_QWORD *)this + 14);
  if (v2 == 1)
  {
    v4 = *(_WORD *)(v3 + 1020);
LABEL_3:
    *(_WORD *)(v3 + 1020) = v4 | 0x800;
    *(_WORD *)(*((_QWORD *)this + 14) + 1020) &= ~0x1000u;
    goto LABEL_4;
  }
  v4 = *(_WORD *)(v3 + 1020);
  if (dword_1ED802068 == 1 || (dword_1ED802068 != 2 ? (v8 = (v4 & 0x1000) == 0) : (v8 = 1), !v8))
  {
    *(_WORD *)(v3 + 1020) = v4 & 0xF7FF;
    *(_WORD *)(*((_QWORD *)this + 14) + 1020) |= 0x1000u;
    v5 = (char *)this + 107;
    v6 = *((_BYTE *)this + 107);
    if (*(_DWORD *)(*((_QWORD *)this + 14) + 1024) != 1)
      *v5 = 0;
    v9 = *((_BYTE *)this + 106);
    *((_BYTE *)this + 106) = 1;
    if (((*(uint64_t (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 192))(this) & 1) == 0)
    {
      (*(void (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 200))(this);
      if (((*(uint64_t (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 208))(this) & 1) == 0)
      {
        (*(void (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 216))(this);
        if (((*(uint64_t (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 224))(this) & 1) == 0)
        {
          (*(void (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 232))(this);
          if (((*(uint64_t (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 240))(this) & 1) == 0)
          {
            v10 = (llvm *)(*(uint64_t (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 272))(this);
            ResetMachineFunctionPass = (llvm::Pass *)llvm::createResetMachineFunctionPass(v10, *(_DWORD *)(*((_QWORD *)this + 14) + 1024) == 1);
            llvm::TargetPassConfig::addPass(this, ResetMachineFunctionPass);
            if (*(_DWORD *)(*((_QWORD *)this + 14) + 1024) == 1
              || ((*(uint64_t (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 184))(this) & 1) == 0)
            {
              *((_BYTE *)this + 106) = v9;
              goto LABEL_5;
            }
          }
        }
      }
    }
    *((_BYTE *)this + 106) = v9;
LABEL_24:
    result = 1;
    goto LABEL_25;
  }
  if (!*(_DWORD *)(v3 + 552) && (*(_BYTE *)(v3 + 592) & 2) != 0)
    goto LABEL_3;
LABEL_4:
  v5 = (char *)this + 107;
  v6 = *((_BYTE *)this + 107);
  *((_BYTE *)this + 107) = 0;
  if (((*(uint64_t (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 184))(this) & 1) != 0)
    goto LABEL_24;
LABEL_5:
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6EDB);
  __p = operator new(0x20uLL);
  v13 = xmmword_1C85F4390;
  strcpy((char *)__p, "After Instruction Selection");
  llvm::TargetPassConfig::printAndVerify(this, (uint64_t)&__p);
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
  result = 0;
LABEL_25:
  *v5 = v6;
  return result;
}

uint64_t sub_1C52C5580()
{
  return 0;
}

uint64_t llvm::TargetPassConfig::addMachinePasses(llvm::TargetPassConfig *this)
{
  llvm *v2;
  uint64_t v3;
  _BOOL8 isPassSubstitutedOrOverridden;
  _DWORD *v5;
  void *v6;
  llvm *v7;
  llvm *v8;
  llvm *v9;
  const llvm::MemoryBuffer *v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  llvm::Pass *RegUsageInfoPropPass;
  llvm::Pass *MIRAddFSDiscriminatorsPass;
  void *v16;
  llvm::Pass *PrologEpilogInserterPass;
  llvm *v18;
  uint64_t v19;
  llvm::Pass *v20;
  llvm::Pass *RegUsageInfoCollector;
  llvm::Pass *BasicBlockSectionsPass;
  llvm::Pass *CFIFixup;
  llvm::Pass *v24;
  llvm::Pass *MachineOutlinerPass;
  uint64_t v26;
  void *__p[2];
  char v28;
  void *__dst[2];
  uint64_t v30;
  void *__src[2];
  uint64_t v32;

  *((_BYTE *)this + 106) = 1;
  if (*(_DWORD *)(*((_QWORD *)this + 14) + 552))
    v2 = (llvm *)(*(uint64_t (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 304))(this);
  else
    v2 = (llvm *)llvm::TargetPassConfig::addPass(this, &unk_1EF8F6F19);
  if ((*(_BYTE *)(*((_QWORD *)this + 14) + 1042) & 8) != 0)
  {
    RegUsageInfoPropPass = (llvm::Pass *)llvm::createRegUsageInfoPropPass(v2);
    llvm::TargetPassConfig::addPass(this, RegUsageInfoPropPass);
  }
  (*(void (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 344))(this);
  *((_BYTE *)this + 107) = 0;
  if (byte_1ED830650)
  {
    MIRAddFSDiscriminatorsPass = (llvm::Pass *)llvm::createMIRAddFSDiscriminatorsPass(1);
    llvm::TargetPassConfig::addPass(this, MIRAddFSDiscriminatorsPass);
    sub_1C52C5A7C(__src, *((_QWORD *)this + 14));
    v16 = (void *)(HIBYTE(v32) & 0x7F);
    if (v32 < 0)
      v16 = __src[1];
    if (v16 && !byte_1ED8022A8)
    {
      if (SHIBYTE(v32) < 0)
      {
        sub_1C47EBC30(__dst, __src[0], (unint64_t)__src[1]);
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)__src;
        v30 = v32;
      }
      sub_1C52C5B0C(__p, *((_QWORD *)this + 14));
      v26 = 0;
      v24 = (llvm::Pass *)llvm::createMIRProfileLoaderPass((uint64_t)__dst, (uint64_t)__p, 1, &v26);
      llvm::TargetPassConfig::addPass(this, v24);
      if (v28 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v30) < 0)
        operator delete(__dst[0]);
    }
    if (SHIBYTE(v32) < 0)
      operator delete(__src[0]);
  }
  if (dword_1ED8012E8 != 2 && (dword_1ED8012E8 == 1 || *(_DWORD *)(*((_QWORD *)this + 14) + 552)))
    v3 = 46;
  else
    v3 = 45;
  (*(void (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 8 * v3))(this);
  (*(void (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 400))(this);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6FE8);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6EDC);
  if (*(_DWORD *)(*((_QWORD *)this + 14) + 552))
  {
    llvm::TargetPassConfig::addPass(this, &unk_1EF8F6FA1);
    llvm::TargetPassConfig::addPass(this, &unk_1EF8F6FF4);
  }
  isPassSubstitutedOrOverridden = llvm::TargetPassConfig::isPassSubstitutedOrOverridden(this, &unk_1EF8F6FBA);
  if (!isPassSubstitutedOrOverridden)
  {
    PrologEpilogInserterPass = (llvm::Pass *)llvm::createPrologEpilogInserterPass((llvm *)isPassSubstitutedOrOverridden);
    llvm::TargetPassConfig::addPass(this, PrologEpilogInserterPass);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 14) + 552))
    (*(void (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 408))(this);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6ED9);
  (*(void (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 416))(this);
  if (byte_1ED8019A8)
    llvm::TargetPassConfig::addPass(this, &unk_1EF8F6EEA);
  v5 = (_DWORD *)*((_QWORD *)this + 14);
  if (v5[138] && ((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v5 + 136))(v5) & 1) == 0)
  {
    if (byte_1ED802428)
      v6 = &unk_1EF8F6F98;
    else
      v6 = &unk_1EF8F6FB8;
    llvm::TargetPassConfig::addPass(this, v6);
  }
  v7 = (llvm *)(*(uint64_t (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 424))(this);
  if ((_DWORD)v7 && byte_1ED801CA8)
  {
    v18 = llvm::dbgs(v7);
    v19 = operator new();
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = &unk_1EF8F6EE1;
    *(_DWORD *)(v19 + 24) = 2;
    *(_QWORD *)v19 = &off_1E8142808;
    *(_QWORD *)(v19 + 32) = v18;
    llvm::TargetPassConfig::addPass(this, (llvm::Pass *)v19);
  }
  if (*(_DWORD *)(*((_QWORD *)this + 14) + 552))
    (*(void (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 432))(this);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6EDA);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F702A);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6FB4);
  if (byte_1ED830650 && !byte_1ED8021E8)
  {
    v20 = (llvm::Pass *)llvm::createMIRAddFSDiscriminatorsPass(4);
    llvm::TargetPassConfig::addPass(this, v20);
  }
  v8 = (llvm *)(*(uint64_t (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 440))(this);
  if ((*(_BYTE *)(*((_QWORD *)this + 14) + 1042) & 8) != 0)
  {
    RegUsageInfoCollector = (llvm::Pass *)llvm::createRegUsageInfoCollector(v8);
    llvm::TargetPassConfig::addPass(this, RegUsageInfoCollector);
  }
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6EDD);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F7002);
  v9 = (llvm *)llvm::TargetPassConfig::addPass(this, &unk_1EF8F7030);
  v11 = *((_QWORD *)this + 14);
  v12 = *(_DWORD *)(v11 + 1040);
  if ((v12 & 0x200000) != 0
    && *(_DWORD *)(v11 + 552)
    && dword_1ED802C98 != 2
    && ((v12 & 0x800000) != 0 || dword_1ED802C98 == 1))
  {
    MachineOutlinerPass = (llvm::Pass *)llvm::createMachineOutlinerPass((llvm *)(dword_1ED802C98 == 1));
    llvm::TargetPassConfig::addPass(this, MachineOutlinerPass);
    v11 = *((_QWORD *)this + 14);
  }
  if (*(_DWORD *)(v11 + 1044) != 4)
  {
    BasicBlockSectionsPass = (llvm::Pass *)llvm::createBasicBlockSectionsPass(*(llvm **)(v11 + 1048), v10);
LABEL_56:
    llvm::TargetPassConfig::addPass(this, BasicBlockSectionsPass);
    goto LABEL_44;
  }
  if ((*(_BYTE *)(v11 + 1042) & 0x40) != 0 || byte_1ED8025A8)
  {
    BasicBlockSectionsPass = (llvm::Pass *)llvm::createMachineFunctionSplitterPass(v9);
    goto LABEL_56;
  }
LABEL_44:
  if (!byte_1ED801EE8 && (*(_WORD *)(*((_QWORD *)this + 14) + 1064) & 0x400) != 0)
  {
    CFIFixup = (llvm::Pass *)llvm::createCFIFixup(v9);
    llvm::TargetPassConfig::addPass(this, CFIFixup);
  }
  result = (*(uint64_t (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 448))(this);
  *((_BYTE *)this + 106) = 0;
  return result;
}

_QWORD *sub_1C52C5A7C(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;

  v2 = qword_1ED802730;
  v3 = byte_1ED80273F & 0x7F;
  if (byte_1ED80273F < 0)
    v3 = qword_1ED802730;
  if (v3)
  {
    if ((byte_1ED80273F & 0x80000000) == 0)
    {
      v4 = &qword_1ED802728;
LABEL_6:
      *(_OWORD *)result = *(_OWORD *)v4;
      result[2] = v4[2];
      return result;
    }
    v5 = (void *)qword_1ED802728;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 696) || *(_DWORD *)(a2 + 672) != 3)
    {
      *result = 0;
      result[1] = 0;
      result[2] = 0;
      return result;
    }
    if ((*(char *)(a2 + 623) & 0x80000000) == 0)
    {
      v4 = (uint64_t *)(a2 + 600);
      goto LABEL_6;
    }
    v2 = *(_QWORD *)(a2 + 608);
    v5 = *(void **)(a2 + 600);
  }
  return sub_1C47EBC30(result, v5, v2);
}

_QWORD *sub_1C52C5B0C(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  void *v5;

  v2 = qword_1ED802818;
  v3 = byte_1ED802827 & 0x7F;
  if (byte_1ED802827 < 0)
    v3 = qword_1ED802818;
  if (v3)
  {
    if ((byte_1ED802827 & 0x80000000) == 0)
    {
      v4 = &qword_1ED802810;
LABEL_6:
      *(_OWORD *)result = *(_OWORD *)v4;
      result[2] = v4[2];
      return result;
    }
    v5 = (void *)qword_1ED802810;
  }
  else
  {
    if (!*(_BYTE *)(a2 + 696) || *(_DWORD *)(a2 + 672) != 3)
    {
      *result = 0;
      result[1] = 0;
      result[2] = 0;
      return result;
    }
    if ((*(char *)(a2 + 671) & 0x80000000) == 0)
    {
      v4 = (uint64_t *)(a2 + 648);
      goto LABEL_6;
    }
    v2 = *(_QWORD *)(a2 + 656);
    v5 = *(void **)(a2 + 648);
  }
  return sub_1C47EBC30(result, v5, v2);
}

BOOL llvm::TargetPassConfig::getOptimizeRegAlloc(llvm::TargetPassConfig *this)
{
  if (dword_1ED8012E8 == 2)
    return 0;
  if (dword_1ED8012E8 == 1)
    return 1;
  return *(_DWORD *)(*((_QWORD *)this + 14) + 552) != 0;
}

void sub_1C52C5BD8()
{
  if (!off_1ED7EAEA8)
    off_1ED7EAEA8 = (_UNKNOWN *)xmmword_1ED8033A0;
}

BOOL llvm::TargetPassConfig::usingDefaultRegAlloc(llvm::TargetPassConfig *this)
{
  return word_1ED803328 == 0;
}

uint64_t llvm::TargetPassConfig::addOptimizedRegAlloc(llvm::TargetPassConfig *this)
{
  uint64_t result;
  void *__p;
  __int128 v4;

  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6ED1);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6FB9);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F7020);
  llvm::TargetPassConfig::addPass(this, &llvm::LiveVariables::ID);
  llvm::TargetPassConfig::addPass(this, &llvm::MachineLoopInfo::ID);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6FB7);
  if (byte_1ED8024E8)
    llvm::TargetPassConfig::addPass(this, &llvm::LiveIntervals::ID);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F7019);
  if ((*(unsigned int (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 320))(this))
  {
    __p = operator new(0x28uLL);
    v4 = xmmword_1C85FC090;
    strcpy((char *)__p, "After pre Register Coalescer passes");
    llvm::TargetPassConfig::printAndVerify(this, (uint64_t)&__p);
    if (SHIBYTE(v4) < 0)
      operator delete(__p);
  }
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6FE0);
  if ((*(unsigned int (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 328))(this))
  {
    __p = operator new(0x28uLL);
    v4 = xmmword_1C85FC0A0;
    strcpy((char *)__p, "After pre Machine Scheduler passes");
    llvm::TargetPassConfig::printAndVerify(this, (uint64_t)&__p);
    if (SHIBYTE(v4) < 0)
      operator delete(__p);
  }
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6FE9);
  llvm::TargetPassConfig::addPass(this, &unk_1EF8F6F90);
  if ((*(unsigned int (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 336))(this))
  {
    __p = operator new(0x28uLL);
    v4 = xmmword_1C85F43A0;
    strcpy((char *)__p, "After post Machine Scheduling passes");
    llvm::TargetPassConfig::printAndVerify(this, (uint64_t)&__p);
    if (SHIBYTE(v4) < 0)
      operator delete(__p);
  }
  result = (*(uint64_t (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 472))(this);
  if ((_DWORD)result)
  {
    llvm::TargetPassConfig::addPass(this, &unk_1EF8F7010);
    (*(void (**)(llvm::TargetPassConfig *))(*(_QWORD *)this + 392))(this);
    llvm::TargetPassConfig::addPass(this, &unk_1EF8F6F29);
    return llvm::TargetPassConfig::addPass(this, &unk_1EF8F6F51);
  }
  return result;
}

uint64_t llvm::TargetPassConfig::addBlockPlacement(llvm::TargetPassConfig *this)
{
  uint64_t result;
  llvm::Pass *MIRAddFSDiscriminatorsPass;
  uint64_t v4;
  BOOL v5;
  llvm::Pass *v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  void *__dst[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  if (byte_1ED830650)
  {
    MIRAddFSDiscriminatorsPass = (llvm::Pass *)llvm::createMIRAddFSDiscriminatorsPass(2);
    llvm::TargetPassConfig::addPass(this, MIRAddFSDiscriminatorsPass);
    sub_1C52C5A7C(&v12, *((_QWORD *)this + 14));
    v4 = HIBYTE(v13) & 0x7F;
    if (v13 < 0)
      v4 = *((_QWORD *)&v12 + 1);
    if (v4)
      v5 = byte_1ED802368 == 0;
    else
      v5 = 0;
    if (v5)
    {
      if (SHIBYTE(v13) < 0)
      {
        sub_1C47EBC30(__dst, (void *)v12, *((unint64_t *)&v12 + 1));
      }
      else
      {
        *(_OWORD *)__dst = v12;
        v11 = v13;
      }
      sub_1C52C5B0C(__p, *((_QWORD *)this + 14));
      v7 = 0;
      v6 = (llvm::Pass *)llvm::createMIRProfileLoaderPass((uint64_t)__dst, (uint64_t)__p, 2, &v7);
      llvm::TargetPassConfig::addPass(this, v6);
      if (v9 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v11) < 0)
        operator delete(__dst[0]);
    }
    if (SHIBYTE(v13) < 0)
      operator delete((void *)v12);
  }
  result = llvm::TargetPassConfig::addPass(this, &unk_1EF8F6F21);
  if (result)
  {
    if (byte_1ED800E68)
      return llvm::TargetPassConfig::addPass(this, &unk_1EF8F6F22);
  }
  return result;
}

uint64_t sub_1C52C5FB8(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C52C5FCC(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

_QWORD *sub_1C52C5FE0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  *a1 = &unk_1E814C9E8;
  v2 = a1 + 71;
  v3 = (_QWORD *)a1[74];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
LABEL_3:
    (*(void (**)(void))(*v3 + 8 * v4))();
    goto LABEL_4;
  }
  if (v3)
  {
    v4 = 5;
    goto LABEL_3;
  }
LABEL_4:
  a1[19] = &unk_1E814CA50;
  v5 = (_QWORD *)a1[21];
  if (v5 != a1 + 23)
    free(v5);
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C52C6068(uint64_t result)
{
  int v1;

  v1 = *(unsigned __int8 *)(result + 148);
  if (*(_BYTE *)(result + 148))
    v1 = *(_DWORD *)(result + 144);
  *(_DWORD *)(result + 128) = v1;
  return result;
}

BOOL sub_1C52C607C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  size_t v6;
  _BOOL4 v7;
  size_t v8;
  _BOOL4 v9;
  size_t v10;
  _BOOL4 v11;
  size_t v12;
  _BOOL4 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v21[2];

  v5 = *a4;
  *a4 = 0;
  v21[0] = a2;
  v21[1] = a3;
  v6 = *((_QWORD *)a1 + 4);
  if (v6)
    v7 = llvm::StringRef::find(v21, *((char **)a1 + 3), v6, 0) != -1;
  else
    v7 = 0;
  v8 = *((_QWORD *)a1 + 6);
  if (v8)
    v9 = llvm::StringRef::find(v21, *((char **)a1 + 5), v8, 0) != -1;
  else
    v9 = 0;
  v10 = *((_QWORD *)a1 + 8);
  if (v10)
    v11 = llvm::StringRef::find(v21, *((char **)a1 + 7), v10, 0) != -1;
  else
    v11 = 0;
  v12 = *((_QWORD *)a1 + 10);
  if (v12)
    v13 = llvm::StringRef::find(v21, *((char **)a1 + 9), v12, 0) != -1;
  else
    v13 = 0;
  if (a1[2])
  {
    *a1 = a1[1];
    a1[2] = 0;
  }
  if (v9 && (v14 = *((_DWORD *)a1 + 2), *((_DWORD *)a1 + 2) = v14 + 1, v14 == *((_DWORD *)a1 + 22)))
  {
    v15 = 0;
    *(_WORD *)(a1 + 1) = 257;
    if (!v13)
      goto LABEL_23;
  }
  else
  {
    v15 = 1;
    if (!v13)
      goto LABEL_23;
  }
  v16 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = v16 + 1;
  if (v16 == *((_DWORD *)a1 + 23))
  {
    a1[1] = 0;
    if (v15)
      a1[2] = 1;
  }
LABEL_23:
  if (v7)
  {
    v17 = *((_DWORD *)a1 + 1);
    *((_DWORD *)a1 + 1) = v17 + 1;
    if (v17 == *((_DWORD *)a1 + 24))
      *a1 = 1;
  }
  if (v11)
  {
    v18 = *((_DWORD *)a1 + 3);
    *((_DWORD *)a1 + 3) = v18 + 1;
    if (v18 == *((_DWORD *)a1 + 25))
      *a1 = 0;
  }
  v19 = *a1;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v19 != 0;
}

uint64_t sub_1C52C6234(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 152))
    v1 = *(_QWORD *)(result + 144);
  else
    v1 = 0;
  *(_QWORD *)(result + 128) = v1;
  return result;
}

unint64_t sub_1C52C6250(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 56 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C621B268(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C621B268(a1, v5);
    }
  }
  return a2;
}

__n128 sub_1C52C62B8(_WORD *a1, __n128 *a2, _WORD *a3)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED830280, "verify-machineinstrs", 0x14uLL);
  word_1ED83028A = word_1ED83028A & 0xFF9F | (32 * (*a1 & 3));
  result = *a2;
  xmmword_1ED8302A0 = (__int128)*a2;
  word_1ED83028A = word_1ED83028A & 0xFFF8 | *a3 & 7;
  return result;
}

__n128 sub_1C52C6324(_WORD *a1, __n128 *a2, _WORD *a3)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED801CE8, "debugify-and-strip-all-safe", 0x1BuLL);
  word_1ED801CF2 = word_1ED801CF2 & 0xFF9F | (32 * (*a1 & 3));
  result = *a2;
  xmmword_1ED801D08 = (__int128)*a2;
  word_1ED801CF2 = word_1ED801CF2 & 0xFFF8 | *a3 & 7;
  return result;
}

__n128 sub_1C52C6390(_WORD *a1, __n128 *a2, _WORD *a3)
{
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED801DA8, "debugify-check-and-strip-all-safe", 0x21uLL);
  word_1ED801DB2 = word_1ED801DB2 & 0xFF9F | (32 * (*a1 & 3));
  result = *a2;
  xmmword_1ED801DC8 = (__int128)*a2;
  word_1ED801DB2 = word_1ED801DB2 & 0xFFF8 | *a3 & 7;
  return result;
}

void sub_1C52C63FC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a1;
    v3 = a1 + 40 * a2;
    do
    {
      sub_1C621BA88(*(unsigned __int8 **)v2, *(_QWORD *)(v2 + 8), *(_DWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
      v2 += 40;
    }
    while (v2 != v3);
  }
}

unint64_t sub_1C52C6440(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED802CC8 >= HIDWORD(qword_1ED802CC8))
  {
    v3 = qword_1ED802CC8 + 1;
    if (qword_1ED802CC0 <= a1 && qword_1ED802CC0 + 48 * (unint64_t)qword_1ED802CC8 > a1)
    {
      v5 = a1 - qword_1ED802CC0;
      sub_1C621BB3C(v3);
      return qword_1ED802CC0 + v5;
    }
    else
    {
      sub_1C621BB3C(v3);
    }
  }
  return a1;
}

void sub_1C52C64B4(_WORD *a1, __int128 *a2, uint64_t *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED802E70, "global-isel-abort", 0x11uLL);
  word_1ED802E7A = (32 * (*a1 & 3)) | word_1ED802E7A & 0xFF9F;
  xmmword_1ED802E90 = *a2;
  v6 = *((_DWORD *)a3 + 2);
  if (v6)
  {
    v7 = *a3;
    v8 = v7 + 40 * v6;
    do
    {
      sub_1C621BE88(*(unsigned __int8 **)v7, *(_QWORD *)(v7 + 8), *(_DWORD *)(v7 + 16), *(_QWORD *)(v7 + 24), *(_QWORD *)(v7 + 32));
      v7 += 40;
    }
    while (v7 != v8);
  }
}

unint64_t sub_1C52C654C(unint64_t a1)
{
  unint64_t v3;
  unint64_t v5;

  if (qword_1ED802F20 >= HIDWORD(qword_1ED802F20))
  {
    v3 = qword_1ED802F20 + 1;
    if (qword_1ED802F18 <= a1 && qword_1ED802F18 + 48 * (unint64_t)qword_1ED802F20 > a1)
    {
      v5 = a1 - qword_1ED802F18;
      sub_1C621BF3C(v3);
      return qword_1ED802F18 + v5;
    }
    else
    {
      sub_1C621BF3C(v3);
    }
  }
  return a1;
}

void sub_1C52C65C0(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v3 = *a1;
    v4 = *a1 + 40 * v2;
    v5 = a2 + 152;
    do
    {
      sub_1C52C6618(v5, *(unsigned __int8 **)v3, *(_QWORD *)(v3 + 8), (int *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
      v3 += 40;
    }
    while (v3 != v4);
  }
}

void sub_1C52C6618(uint64_t a1, unsigned __int8 *a2, size_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  int v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  char v13;
  _QWORD v14[5];
  int v15;
  char v16;

  v9 = *a4;
  v14[0] = a2;
  v14[1] = a3;
  v14[2] = a5;
  v14[3] = a6;
  v14[4] = &unk_1E814CAA0;
  v16 = 1;
  v15 = v9;
  v10 = sub_1C52C66DC(a1 + 16, (unint64_t)v14, 1);
  v11 = *(_QWORD *)(a1 + 16) + 48 * *(unsigned int *)(a1 + 24);
  v12 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 32) = &unk_1E814CAC0;
  v13 = *(_BYTE *)(v10 + 44);
  *(_DWORD *)(v11 + 40) = *(_DWORD *)(v10 + 40);
  *(_BYTE *)(v11 + 44) = v13;
  *(_QWORD *)(v11 + 32) = &unk_1E814CAA0;
  ++*(_DWORD *)(a1 + 24);
  llvm::cl::AddLiteralOption(*(_QWORD *)(a1 + 8), a2, a3);
}

unint64_t sub_1C52C66DC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 48 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C621C2D8(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C621C2D8(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C52C6744(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, const char **a5, _WORD *a6)
{
  uint64_t v12;

  v12 = sub_1C47AD050(a1, 0, 0);
  *(_QWORD *)(v12 + 128) = 0;
  *(_QWORD *)(v12 + 136) = 0;
  *(_BYTE *)(v12 + 184) = 0;
  *(_QWORD *)(v12 + 168) = 0;
  *(_QWORD *)(v12 + 176) = 0;
  *(_QWORD *)(v12 + 160) = 0;
  *(_QWORD *)(v12 + 144) = 0;
  *(_QWORD *)(v12 + 152) = &unk_1E819E950;
  *(_QWORD *)v12 = &unk_1E819E480;
  *(_QWORD *)(v12 + 192) = &unk_1E819E970;
  *(_QWORD *)(v12 + 200) = &off_1E7FA8CB8;
  *(_QWORD *)(v12 + 224) = v12 + 200;
  llvm::cl::Option::setArgStr(v12, *(unsigned __int8 **)a2, *(_QWORD *)(a2 + 8));
  *(_OWORD *)(a1 + 32) = *a3;
  *(_OWORD *)(a1 + 48) = *a4;
  sub_1C49C7D74(a5, a1);
  *(_WORD *)(a1 + 10) = (32 * (*a6 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t sub_1C52C682C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = *a4;
  *a4 = 0;
  v7[0] = a2;
  v7[1] = a3;
  if ((!byte_1ED800DA8 || llvm::StringRef::find(v7, "MachineBlockPlacementPass", 0x19uLL, 0) == -1)
    && (!byte_1ED800B68 || llvm::StringRef::find(v7, "BranchFolderPass", 0x10uLL, 0) == -1)
    && (!byte_1ED801828 || llvm::StringRef::find(v7, "MachineCopyPropagationPass", 0x1AuLL, 0) == -1)
    && (!byte_1ED8010A8 || llvm::StringRef::find(v7, "EarlyIfConverterPass", 0x14uLL, 0) == -1)
    && (!byte_1ED800CE8 || llvm::StringRef::find(v7, "EarlyTailDuplicatePass", 0x16uLL, 0) == -1)
    && (!byte_1ED801228 || llvm::StringRef::find(v7, "MachineCSEPass", 0xEuLL, 0) == -1)
    && (!byte_1ED800FE8 || llvm::StringRef::find(v7, "DeadMachineInstructionElimPass", 0x1EuLL, 0) == -1)
    && (!byte_1ED801168 || llvm::StringRef::find(v7, "EarlyMachineLICMPass", 0x14uLL, 0) == -1)
    && (!byte_1ED801468 || llvm::StringRef::find(v7, "MachineSinkingPass", 0x12uLL, 0) == -1)
    && (!byte_1ED8013A8 || llvm::StringRef::find(v7, "MachineLICMPass", 0xFuLL, 0) == -1)
    && (!byte_1ED801528 || llvm::StringRef::find(v7, "PostRAMachineSinkingPass", 0x18uLL, 0) == -1)
    && (!byte_1ED800AA8 || llvm::StringRef::find(v7, "PostRASchedulerPass", 0x13uLL, 0) == -1)
    && (!byte_1ED800F28 || llvm::StringRef::find(v7, "StackSlotColoringPass", 0x15uLL, 0) == -1)
    && (!byte_1ED800C28 || llvm::StringRef::find(v7, "TailDuplicatePass", 0x11uLL, 0) == -1))
  {
    v5 = 1;
    if (!v4)
      return v5;
    goto LABEL_30;
  }
  v5 = 0;
  if (v4)
LABEL_30:
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v5;
}

uint64_t sub_1C52C6AE8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 24 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 24 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_7;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C52C6B88(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C621C4A4(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

__n128 sub_1C52C6C4C(_WORD *a1, uint64_t **a2, __n128 *a3)
{
  uint64_t *v6;
  __n128 result;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED803320, "regalloc", 8uLL);
  word_1ED80332A = (32 * (*a1 & 3)) | word_1ED80332A & 0xFF9F;
  v6 = *a2;
  *(_QWORD *)&xmmword_1ED8033A0 = **a2;
  byte_1ED8033B8 = 1;
  qword_1ED8033B0 = *v6;
  result = *a3;
  xmmword_1ED803340 = (__int128)*a3;
  return result;
}

uint64_t sub_1C52C6CD0()
{
  int v1;
  int v2;
  const char *v3;
  __int128 v4;
  __n128 v5;
  __n128 v6;
  const char *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  int v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  v6.n128_u64[0] = (unint64_t)"Enable interprocedural register allocation to reduce load/store at procedure calls.";
  v6.n128_u64[1] = 83;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED800968, "enable-ipra", &v5, &v4, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED800968, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Post Regalloc Scheduler";
  v6.n128_u64[1] = 31;
  sub_1C61B2D38((uint64_t)&unk_1ED800A28, "disable-post-ra", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED800A28, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable branch folding";
  v6.n128_u64[1] = 22;
  sub_1C61B2D38((uint64_t)&unk_1ED800AE8, "disable-branch-fold", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED800AE8, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable tail duplication";
  v6.n128_u64[1] = 24;
  sub_1C61B2D38((uint64_t)&unk_1ED800BA8, "disable-tail-duplicate", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED800BA8, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable pre-register allocation tail duplication";
  v6.n128_u64[1] = 48;
  sub_1C621B31C(&v5, (__int128 *)&v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED800C68, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable probability-driven block placement";
  v6.n128_u64[1] = 42;
  sub_1C621B3DC(&v5, (__int128 *)&v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED800D28, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Collect probability-driven block placement stats";
  v6.n128_u64[1] = 48;
  sub_1C61B2D38((uint64_t)&unk_1ED800DE8, "enable-block-placement-stats", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED800DE8, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Stack Slot Coloring";
  v6.n128_u64[1] = 27;
  sub_1C61B2D38((uint64_t)&unk_1ED800EA8, "disable-ssc", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED800EA8, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Machine Dead Code Elimination";
  v6.n128_u64[1] = 37;
  sub_1C61B2D38((uint64_t)&unk_1ED800F68, "disable-machine-dce", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED800F68, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Early If-conversion";
  v6.n128_u64[1] = 27;
  sub_1C61B2D38((uint64_t)&unk_1ED801028, "disable-early-ifcvt", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED801028, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Machine LICM";
  v6.n128_u64[1] = 20;
  sub_1C61B2D38((uint64_t)&unk_1ED8010E8, "disable-machine-licm", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8010E8, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Machine Common Subexpression Elimination";
  v6.n128_u64[1] = 48;
  sub_1C61B2D38((uint64_t)&unk_1ED8011A8, "disable-machine-cse", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8011A8, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Enable optimized register allocation compilation path.";
  v6.n128_u64[1] = 54;
  sub_1C621B49C(&v5, (__int128 *)&v6);
  __cxa_atexit((void (*)(void *))sub_1C506F830, &qword_1ED801268, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Machine LICM";
  v6.n128_u64[1] = 20;
  sub_1C61B2D38((uint64_t)&unk_1ED801328, "disable-postra-machine-licm", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED801328, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Machine Sinking";
  v6.n128_u64[1] = 23;
  sub_1C61B2D38((uint64_t)&unk_1ED8013E8, "disable-machine-sink", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8013E8, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable PostRA Machine Sinking";
  v6.n128_u64[1] = 30;
  sub_1C61B2D38((uint64_t)&unk_1ED8014A8, "disable-postra-machine-sink", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8014A8, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Loop Strength Reduction Pass";
  v6.n128_u64[1] = 36;
  sub_1C61B2D38((uint64_t)&unk_1ED801568, "disable-lsr", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED801568, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable ConstantHoisting";
  v6.n128_u64[1] = 24;
  sub_1C621B55C(&v5, (__int128 *)&v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED801628, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Codegen Prepare";
  v6.n128_u64[1] = 23;
  sub_1C61B2D38((uint64_t)&unk_1ED8016E8, "disable-cgp", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8016E8, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Copy Propagation pass";
  v6.n128_u64[1] = 29;
  sub_1C61B2D38((uint64_t)&unk_1ED8017A8, "disable-copyprop", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8017A8, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable Partial Libcall Inlining";
  v6.n128_u64[1] = 32;
  sub_1C61B2D38((uint64_t)&unk_1ED801868, "disable-partial-libcall-inlining", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED801868, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"Fold null checks into faulting memory operations";
  v6.n128_u64[1] = 48;
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED801928, "enable-implicit-null-checks", &v6, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED801928, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"Disable MergeICmps Pass";
  v6.n128_u64[1] = 23;
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED8019E8, "disable-mergeicmps", &v6, &v5, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8019E8, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Print LLVM IR produced by the loop-reduce pass";
  v6.n128_u64[1] = 46;
  sub_1C61B2D38((uint64_t)&unk_1ED801AA8, "print-lsr-output", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED801AA8, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Print LLVM IR input to isel pass";
  v6.n128_u64[1] = 32;
  sub_1C61B2D38((uint64_t)&unk_1ED801B68, "print-isel-input", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED801B68, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Dump garbage collector data";
  v6.n128_u64[1] = 27;
  sub_1C621B61C(&v5, (__int128 *)&v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED801C28, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Verify generated machine code";
  v6.n128_u64[1] = 29;
  LODWORD(v4) = 1;
  sub_1C621B6DC(&v5, &v6, &v4);
  __cxa_atexit((void (*)(void *))sub_1C506F830, &qword_1ED830280, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Debugify MIR before and Strip debug after each pass except those known to be unsafe"
                                     " when debug info is present";
  v6.n128_u64[1] = 110;
  LODWORD(v4) = 1;
  sub_1C621B780(&v5, &v6, &v4);
  __cxa_atexit((void (*)(void *))sub_1C506F830, &qword_1ED801CE8, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Debugify MIR before, by checking and stripping the debug info after, each pass exce"
                                     "pt those known to be unsafe when debug info is present";
  v6.n128_u64[1] = 137;
  LODWORD(v4) = 1;
  sub_1C621B824(&v5, &v6, &v4);
  __cxa_atexit((void (*)(void *))sub_1C506F830, &qword_1ED801DA8, &dword_1C475E000);
  v5.n128_u64[0] = (unint64_t)"Enable the machine outliner";
  v5.n128_u64[1] = 27;
  v2 = 1;
  LODWORD(v3) = 1;
  v1 = 0;
  *(_QWORD *)&v4 = &v1;
  v6.n128_u64[0] = (unint64_t)&v7;
  v7 = "always";
  v8 = 6;
  v9 = 1;
  v10 = "Run on all functions guaranteed to be beneficial";
  v11 = 48;
  v12 = "never";
  v13 = 5;
  v14 = 2;
  v15 = "Disable all outlining";
  v16 = 21;
  v17 = "";
  v18 = 0;
  v19 = 1;
  v20 = "";
  v21 = 0;
  v6.n128_u64[1] = 0x400000003;
  sub_1C621B8C8((__int128 *)&v5, &v3, &v2, (int **)&v4, (uint64_t)&v6);
  if ((const char **)v6.n128_u64[0] != &v7)
    free((void *)v6.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C62198E8, &qword_1ED802C18, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Disable the CFI fixup pass";
  v6.n128_u64[1] = 26;
  sub_1C61B2D38((uint64_t)&unk_1ED801E68, "disable-cfi-fixup", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED801E68, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Enable the \"fast\" instruction selector";
  v6.n128_u64[1] = 38;
  sub_1C621BC08(&v5, (__int128 *)&v6);
  __cxa_atexit((void (*)(void *))sub_1C506F830, &qword_1ED801F28, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Enable the \"global\" instruction selector";
  v6.n128_u64[1] = 40;
  sub_1C621BCC8(&v5, (__int128 *)&v6);
  __cxa_atexit((void (*)(void *))sub_1C506F830, &qword_1ED801FE8, &dword_1C475E000);
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  v6.n128_u64[0] = (unint64_t)"Print machine instrs after ISel";
  v6.n128_u64[1] = 31;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8020A8, "print-after-isel", &v5, &v4, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8020A8, &dword_1C475E000);
  LODWORD(v4) = 1;
  v5.n128_u64[0] = (unint64_t)"Enable abort calls when \"global\" instruction selection fails to lower/select an instruction";
  v5.n128_u64[1] = 91;
  v6.n128_u64[0] = (unint64_t)&v7;
  v7 = "0";
  v8 = 1;
  v9 = 0;
  v10 = "Disable the abort";
  v11 = 17;
  v12 = "1";
  v13 = 1;
  v14 = 1;
  v15 = "Enable the abort";
  v16 = 16;
  v17 = "2";
  v18 = 1;
  v19 = 2;
  v20 = "Disable the abort but emit a diagnostic on failure";
  v21 = 50;
  v6.n128_u64[1] = 0x400000003;
  sub_1C621BD88(&v4, (__int128 *)&v5, (uint64_t *)&v6);
  if ((const char **)v6.n128_u64[0] != &v7)
    free((void *)v6.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C62198EC, &qword_1ED802E70, &dword_1C475E000);
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  v6.n128_u64[0] = (unint64_t)"Do not insert FS-AFDO discriminators before emit.";
  v6.n128_u64[1] = 49;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED802168, "fs-no-final-discrim", &v5, &v4, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED802168, &dword_1C475E000);
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  v6.n128_u64[0] = (unint64_t)"Disable MIRProfileLoader before RegAlloc";
  v6.n128_u64[1] = 40;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED802228, "disable-ra-fsprofile-loader", &v5, &v4, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED802228, &dword_1C475E000);
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  v6.n128_u64[0] = (unint64_t)"Disable MIRProfileLoader before BlockPlacement";
  v6.n128_u64[1] = 46;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8022E8, "disable-layout-fsprofile-loader", &v5, &v4, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8022E8, &dword_1C475E000);
  *(_QWORD *)&v4 = "";
  v6.n128_u64[0] = (unint64_t)"filename";
  v6.n128_u64[1] = 8;
  v5.n128_u64[0] = (unint64_t)"Flow Sensitive profile file name.";
  v5.n128_u64[1] = 33;
  LODWORD(v3) = 1;
  sub_1C47AD050((uint64_t)&qword_1ED8026A8, 0, 0);
  qword_1ED802730 = 0;
  qword_1ED802728 = 0;
  unk_1ED802738 = 0;
  qword_1ED802748 = 0;
  qword_1ED802758 = 0;
  qword_1ED802750 = 0;
  byte_1ED802760 = 0;
  qword_1ED802740 = (uint64_t)&unk_1E819E950;
  qword_1ED8026A8 = (uint64_t)&unk_1E819E480;
  qword_1ED802768 = (uint64_t)&unk_1E819E970;
  qword_1ED802770 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED802788 = (uint64_t)&qword_1ED802770;
  sub_1C621C008((const char **)&v4, (__int128 *)&v6, &v5, &v3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8026A8);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED8026A8, &dword_1C475E000);
  *(_QWORD *)&v4 = "";
  v6.n128_u64[0] = (unint64_t)"filename";
  v6.n128_u64[1] = 8;
  v5.n128_u64[0] = (unint64_t)"Flow Sensitive profile remapping file name.";
  v5.n128_u64[1] = 43;
  LODWORD(v3) = 1;
  sub_1C47AD050((uint64_t)&qword_1ED802790, 0, 0);
  qword_1ED802818 = 0;
  qword_1ED802810 = 0;
  unk_1ED802820 = 0;
  qword_1ED802830 = 0;
  qword_1ED802840 = 0;
  qword_1ED802838 = 0;
  byte_1ED802848 = 0;
  qword_1ED802828 = (uint64_t)&unk_1E819E950;
  qword_1ED802790 = (uint64_t)&unk_1E819E480;
  qword_1ED802850 = (uint64_t)&unk_1E819E970;
  qword_1ED802858 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED802870 = (uint64_t)&qword_1ED802858;
  sub_1C621C090((const char **)&v4, (__int128 *)&v6, &v5, &v3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED802790);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED802790, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Run MachineScheduler post regalloc (independent of preRA sched)";
  v6.n128_u64[1] = 63;
  sub_1C61B2D38((uint64_t)&unk_1ED8023A8, "misched-postra", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8023A8, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Run live interval analysis earlier in the pipeline";
  v6.n128_u64[1] = 50;
  sub_1C61B2D38((uint64_t)&unk_1ED802468, "early-live-intervals", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED802468, &dword_1C475E000);
  v2 = 1;
  LODWORD(v3) = 0;
  *(_QWORD *)&v4 = &v3;
  v5.n128_u64[0] = (unint64_t)"Enable the new, experimental CFL alias analysis in CodeGen";
  v5.n128_u64[1] = 58;
  v6.n128_u64[0] = (unint64_t)&v7;
  v7 = "none";
  v8 = 4;
  v9 = 0;
  v10 = "Disable CFL-AA";
  v11 = 14;
  v12 = "steens";
  v13 = 6;
  v14 = 1;
  v15 = "Enable unification-based CFL-AA";
  v16 = 31;
  v17 = "anders";
  v18 = 6;
  v19 = 2;
  v20 = "Enable inclusion-based CFL-AA";
  v21 = 29;
  v22 = "both";
  v23 = 4;
  v24 = 3;
  v25 = "Enable both variants of CFL-AA";
  v26 = 30;
  v6.n128_u64[1] = 0x400000004;
  sub_1C621C118((int **)&v4, &v2, (__int128 *)&v5, (uint64_t *)&v6);
  if ((const char **)v6.n128_u64[0] != &v7)
    free((void *)v6.n128_u64[0]);
  __cxa_atexit((void (*)(void *))sub_1C62198F0, &qword_1ED8030C8, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"start-after";
  v6.n128_u64[1] = 11;
  v5.n128_u64[0] = (unint64_t)"Resume compilation after a specific pass";
  v5.n128_u64[1] = 40;
  *(_QWORD *)&v4 = "pass-name";
  *((_QWORD *)&v4 + 1) = 9;
  v3 = "";
  v2 = 1;
  sub_1C52C6744((uint64_t)&unk_1ED802878, (uint64_t)&v6, &v5, &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &unk_1ED802878, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"start-before";
  v6.n128_u64[1] = 12;
  v5.n128_u64[0] = (unint64_t)"Resume compilation before a specific pass";
  v5.n128_u64[1] = 41;
  *(_QWORD *)&v4 = "pass-name";
  *((_QWORD *)&v4 + 1) = 9;
  v3 = "";
  v2 = 1;
  sub_1C52C6744((uint64_t)&unk_1ED802960, (uint64_t)&v6, &v5, &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &unk_1ED802960, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"stop-after";
  v6.n128_u64[1] = 10;
  v5.n128_u64[0] = (unint64_t)"Stop compilation after a specific pass";
  v5.n128_u64[1] = 38;
  *(_QWORD *)&v4 = "pass-name";
  *((_QWORD *)&v4 + 1) = 9;
  v3 = "";
  v2 = 1;
  sub_1C52C6744((uint64_t)&unk_1ED802A48, (uint64_t)&v6, &v5, &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &unk_1ED802A48, &dword_1C475E000);
  v6.n128_u64[0] = (unint64_t)"stop-before";
  v6.n128_u64[1] = 11;
  v5.n128_u64[0] = (unint64_t)"Stop compilation before a specific pass";
  v5.n128_u64[1] = 39;
  *(_QWORD *)&v4 = "pass-name";
  *((_QWORD *)&v4 + 1) = 9;
  v3 = "";
  v2 = 1;
  sub_1C52C6744((uint64_t)&unk_1ED802B30, (uint64_t)&v6, &v5, &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &unk_1ED802B30, &dword_1C475E000);
  v5.n128_u32[0] = 1;
  v6.n128_u64[0] = (unint64_t)"Split out cold blocks from machine functions based on profile information.";
  v6.n128_u64[1] = 74;
  sub_1C61B2D38((uint64_t)&unk_1ED802528, "enable-split-machine-functions", &v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED802528, &dword_1C475E000);
  LOBYTE(v3) = 0;
  v5.n128_u64[0] = (unint64_t)&v3;
  LODWORD(v4) = 1;
  v6.n128_u64[0] = (unint64_t)"Disable the expand reduction intrinsics pass from running";
  v6.n128_u64[1] = 57;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8025E8, "disable-expand-reductions", &v5, &v4, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8025E8, &dword_1C475E000);
  LODWORD(v3) = 1;
  *(_QWORD *)&v4 = sub_1C52C5580;
  v5.n128_u64[0] = (unint64_t)&v4;
  v6.n128_u64[0] = (unint64_t)"Register allocator to use";
  v6.n128_u64[1] = 25;
  sub_1C621C554(&v3, (uint64_t **)&v5, &v6);
  __cxa_atexit((void (*)(void *))sub_1C621A1AC, &qword_1ED803320, &dword_1C475E000);
  sub_1C620A114((uint64_t)&unk_1ED800938, "default", "pick register allocator based on -O option", (uint64_t)sub_1C52C5580);
  return __cxa_atexit((void (*)(void *))sub_1C5229294, &unk_1ED800938, &dword_1C475E000);
}

uint64_t sub_1C52C7D8C(llvm::TargetInstrInfo *a1, const llvm::MachineInstr *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 2);
  if (*(_WORD *)v2 != 10)
  {
    if ((*(_BYTE *)(v2 + 11) & 0x20) == 0)
      return 0;
    if (((*(uint64_t (**)(llvm::TargetInstrInfo *))(*(_QWORD *)a1 + 32))(a1) & 1) == 0)
      return llvm::TargetInstrInfo::isReallyTriviallyReMaterializableGeneric(a1, a2, 0);
  }
  return 1;
}

uint64_t llvm::TargetRegisterInfo::markSuperRegs(uint64_t result, uint64_t *a2, unsigned int a3)
{
  uint64_t v3;
  unsigned __int16 *v4;
  uint64_t v5;
  int v6;

  v3 = *(_QWORD *)(result + 56);
  if (v3)
  {
    v4 = (unsigned __int16 *)(v3 + 2 * *(unsigned int *)(*(_QWORD *)(result + 8) + 24 * a3 + 8));
    v5 = *a2;
    do
    {
      *(_QWORD *)(v5 + 8 * ((unsigned __int16)a3 >> 6)) |= 1 << a3;
      v6 = *v4++;
      a3 += v6;
    }
    while (v6);
  }
  return result;
}

uint64_t llvm::TargetRegisterInfo::checkAllSuperRegsMarked(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4)
{
  int v8;
  llvm *v9;
  unsigned int v10;
  _QWORD *v11;
  _WORD *v12;
  BOOL v13;
  unsigned __int16 *v14;
  unsigned __int16 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  llvm *v24;
  llvm *v25;
  void *v26;
  _DWORD *v27;
  void *v28;
  _DWORD *v29;
  uint64_t v30;
  void *v32[2];
  _DWORD v33[14];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a1 + 16);
  v32[0] = v33;
  v32[1] = (void *)0x600000000;
  sub_1C4765AA4((char *)v32, (v8 + 63) >> 6, 0);
  v33[12] = v8;
  v9 = (llvm *)sub_1C476B7EC(a2);
  if ((_DWORD)v9 == -1)
  {
    v23 = 1;
  }
  else
  {
    v10 = v9;
    while (1)
    {
      v11 = v32[0];
      if (((*(_QWORD *)((char *)v32[0] + (((unint64_t)v10 >> 3) & 0x1FFFFFF8)) >> v10) & 1) == 0)
      {
        v12 = (_WORD *)(*(_QWORD *)(a1 + 56) + 2 * *(unsigned int *)(*(_QWORD *)(a1 + 8) + 24 * v10 + 8));
        if (*v12)
          break;
      }
LABEL_18:
      v23 = 1;
      v9 = (llvm *)sub_1C476BA0C((_QWORD *)a2, v10 + 1, *(_DWORD *)(a2 + 64), 1u);
      v10 = v9;
      if ((_DWORD)v9 == -1)
        goto LABEL_28;
    }
    v13 = HIWORD(v10) != 0;
    if (HIWORD(v10))
      v14 = &a3[a4];
    else
      v14 = a3;
    v15 = *v12 + v10;
    v16 = *(_QWORD *)a2;
    if (!a4)
      v13 = 1;
    while (1)
    {
      v17 = v15;
      v18 = 1 << v15;
      v19 = v15 >> 6;
      if ((v18 & *(_QWORD *)(v16 + 8 * v19)) == 0)
      {
        v20 = v14;
        if (!v13)
        {
          v21 = 2 * a4;
          v20 = a3;
          while (*v20 != (unsigned __int16)v10)
          {
            ++v20;
            v21 -= 2;
            if (!v21)
            {
              v20 = &a3[a4];
              break;
            }
          }
        }
        if (a4 == v20 - a3)
          break;
      }
      v11[v19] |= v18;
      v22 = (unsigned __int16)v12[1];
      ++v12;
      v15 = v22 + v17;
      if (!v22)
        goto LABEL_18;
    }
    v24 = llvm::dbgs(v9);
    v25 = v24;
    v26 = (void *)*((_QWORD *)v24 + 4);
    if (*((_QWORD *)v24 + 3) - (_QWORD)v26 > 0x15uLL)
    {
      qmemcpy(v26, "Error: Super register ", 22);
      *((_QWORD *)v24 + 4) += 22;
    }
    else
    {
      llvm::raw_ostream::write(v24, "Error: Super register ", 0x16uLL);
    }
    v27 = operator new(0x28uLL);
    *(_QWORD *)v27 = &off_1E814D010;
    v27[2] = v17;
    *((_QWORD *)v27 + 2) = a1;
    v27[6] = 0;
    *((_QWORD *)v27 + 4) = 0;
    sub_1C52C9630((llvm::raw_ostream *)v27, v25);
    v28 = (void *)*((_QWORD *)v25 + 4);
    if (*((_QWORD *)v25 + 3) - (_QWORD)v28 > 0x15uLL)
    {
      qmemcpy(v28, " of reserved register ", 22);
      *((_QWORD *)v25 + 4) += 22;
    }
    else
    {
      llvm::raw_ostream::write(v25, " of reserved register ", 0x16uLL);
    }
    v29 = operator new(0x28uLL);
    *(_QWORD *)v29 = &off_1E814D010;
    v29[2] = v10;
    *((_QWORD *)v29 + 2) = a1;
    v29[6] = 0;
    *((_QWORD *)v29 + 4) = 0;
    sub_1C52C9630((llvm::raw_ostream *)v29, v25);
    v30 = *((_QWORD *)v25 + 4);
    if ((unint64_t)(*((_QWORD *)v25 + 3) - v30) > 0x11)
    {
      *(_WORD *)(v30 + 16) = 2606;
      *(_OWORD *)v30 = *(_OWORD *)" is not reserved.\n";
      *((_QWORD *)v25 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v25, " is not reserved.\n", 0x12uLL);
    }
    operator delete(v29);
    operator delete(v27);
    v23 = 0;
  }
LABEL_28:
  if (v32[0] != v33)
    free(v32[0]);
  return v23;
}

uint64_t llvm::printRegUnit@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = &off_1E814D058;
  a3[1] = result;
  a3[2] = a2;
  a3[3] = a3;
  return result;
}

uint64_t llvm::printVRegOrUnit@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = &off_1E814D0A0;
  a3[1] = result;
  a3[2] = a2;
  a3[3] = a3;
  return result;
}

_DWORD *llvm::printRegClassOrBank@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *result;

  result = operator new(0x20uLL);
  *(_QWORD *)result = &off_1E814D0E8;
  result[2] = a1;
  *((_QWORD *)result + 2) = a2;
  *((_QWORD *)result + 3) = a3;
  *(_QWORD *)(a4 + 24) = result;
  return result;
}

_QWORD *llvm::TargetRegisterInfo::getAllocatableClass(uint64_t a1, _QWORD *a2)
{
  unsigned int *v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  if (!a2 || *(_BYTE *)(*a2 + 31))
    return a2;
  v3 = (unsigned int *)a2[1];
  v4 = *(_QWORD *)(a1 + 240);
  v5 = (unint64_t)(*(_QWORD *)(a1 + 248) - v4) >> 3;
  v6 = *v3;
  if (!*v3)
  {
    v7 = 0;
    while (1)
    {
      v7 += 32;
      if (v7 >= v5)
        return 0;
      v15 = v3[1];
      ++v3;
      v6 = v15;
      if (v15)
        goto LABEL_6;
    }
  }
  v7 = 0;
LABEL_6:
  v8 = __clz(__rbit32(v6));
  v9 = v8 | v7;
  if ((v8 | v7) == (_DWORD)v5)
    return 0;
  v10 = v6 >> v8;
  do
  {
    a2 = *(_QWORD **)(v4 + 8 * v9);
    if (*(_BYTE *)(*a2 + 31))
      break;
    if (v10 <= 1)
    {
      while (1)
      {
        v7 += 32;
        if (v7 >= v5)
          return 0;
        v12 = v3[1];
        ++v3;
        v11 = v12;
        if (v12)
        {
          v13 = v7;
          goto LABEL_15;
        }
      }
    }
    v13 = v9 + 1;
    v11 = v10 >> 1;
LABEL_15:
    a2 = 0;
    v14 = __clz(__rbit32(v11));
    v9 = v14 + v13;
    v10 = v11 >> v14;
  }
  while (v9 != (_DWORD)v5);
  return a2;
}

uint64_t *llvm::TargetRegisterInfo::getMinimalPhysRegClass(uint64_t a1, unsigned int a2, unsigned __int8 a3)
{
  char *v3;
  char *v4;
  uint64_t *v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned __int8 *v15;
  int v16;
  int v17;

  v3 = *(char **)(a1 + 240);
  v4 = *(char **)(a1 + 248);
  if (v3 != v4)
  {
    v5 = 0;
    v6 = a3;
    v7 = a2 - 0x40000000;
    v8 = a2 >> 3;
    v9 = 1 << (a2 & 7);
    v10 = (unint64_t)a2 >> 3;
    v11 = *(uint64_t ***)(a1 + 240);
    while (1)
    {
      v12 = *v11;
      if (v6 != 1)
        break;
      if (v7 >= 0xC0000001)
      {
        v13 = *v12;
LABEL_6:
        if (v10 < *(unsigned __int16 *)(v13 + 22)
          && (v9 & *(_BYTE *)(*(_QWORD *)(v13 + 8) + v8)) != 0
          && (!v5
           || v12 != v5
           && ((*(_DWORD *)(v5[1] + ((*(unsigned __int16 *)(v13 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v13 + 24)) & 1) != 0))
        {
          v5 = *v11;
        }
      }
LABEL_8:
      if (++v11 == (uint64_t **)v4)
        return v5;
    }
    v13 = *v12;
    v15 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 264)
                              + 24
                              * (*(unsigned __int16 *)(*v12 + 24)
                               + *(_DWORD *)(a1 + 272) * ((unint64_t)(v4 - v3) >> 3))
                              + 16);
    do
    {
      v17 = *v15++;
      v16 = v17;
    }
    while (v17 != 1 && v16 != v6);
    if (v16 == 1 || v7 < 0xC0000001)
      goto LABEL_8;
    goto LABEL_6;
  }
  return 0;
}

uint64_t sub_1C52C83D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v4;
  int v5;
  unint64_t v7;

  v4 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 264)
                           + 24
                           * (*(unsigned __int16 *)(*(_QWORD *)a2 + 24)
                            + *(_DWORD *)(a1 + 272)
                            * ((*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 3))
                           + 16);
  while (1)
  {
    v5 = *v4;
    if (v5 == 1)
      break;
    if (v5 != 174)
    {
      llvm::LLT::LLT(&v7, v5);
      ++v4;
      if (v7 != a3)
        continue;
    }
    return 1;
  }
  return 0;
}

char *llvm::TargetRegisterInfo::getAllocatableSet@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, char *a4@<X8>)
{
  int v8;
  char *result;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  uint64_t v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  uint64_t v31;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;

  v8 = *(_DWORD *)(a1 + 16);
  *(_QWORD *)a4 = a4 + 16;
  *((_QWORD *)a4 + 1) = 0x600000000;
  result = sub_1C4765AA4(a4, (v8 + 63) >> 6, 0);
  *((_DWORD *)a4 + 16) = v8;
  if (!a3)
  {
    v13 = *(uint64_t ***)(a1 + 240);
    v14 = *(uint64_t ***)(a1 + 248);
    if (v13 == v14)
      goto LABEL_19;
    while (1)
    {
      v15 = **v13;
      if (*(_BYTE *)(v15 + 31))
      {
        v16 = (uint64_t (*)(uint64_t))(*v13)[6];
        if (v16)
        {
          result = (char *)v16(a2);
          if (v17)
            goto LABEL_12;
        }
        else
        {
          result = *(char **)v15;
          v17 = *(unsigned __int16 *)(v15 + 20);
          if (*(_WORD *)(v15 + 20))
          {
LABEL_12:
            v18 = *(_QWORD **)a4;
            v19 = 2 * v17;
            do
            {
              v20 = *(unsigned __int16 *)result;
              result += 2;
              *(_QWORD *)((char *)v18 + (((unint64_t)v20 >> 3) & 0x1FF8)) |= 1 << v20;
              v19 -= 2;
            }
            while (v19);
          }
        }
      }
      if (++v13 == v14)
        goto LABEL_19;
    }
  }
  v10 = *a3;
  if (*(_BYTE *)(*a3 + 31))
    goto LABEL_3;
  v30 = (unsigned int *)a3[1];
  v31 = *(_QWORD *)(a1 + 240);
  v32 = (unint64_t)(*(_QWORD *)(a1 + 248) - v31) >> 3;
  v33 = *v30;
  if (*v30)
  {
    v34 = 0;
LABEL_31:
    v36 = __clz(__rbit32(v33));
    v37 = v36 | v34;
    if ((v36 | v34) != (_DWORD)v32)
    {
      v38 = v33 >> v36;
      while (1)
      {
        a3 = *(_QWORD **)(v31 + 8 * v37);
        v10 = *a3;
        if (*(_BYTE *)(*a3 + 31))
          break;
        if (v38 <= 1)
        {
          while (1)
          {
            v34 += 32;
            if (v34 >= v32)
              goto LABEL_19;
            v40 = v30[1];
            ++v30;
            v39 = v40;
            if (v40)
            {
              v41 = v34;
              goto LABEL_39;
            }
          }
        }
        v41 = v37 + 1;
        v39 = v38 >> 1;
LABEL_39:
        v42 = __clz(__rbit32(v39));
        v37 = v42 + v41;
        v38 = v39 >> v42;
        if (v37 == (_DWORD)v32)
          goto LABEL_19;
      }
LABEL_3:
      v11 = (uint64_t (*)(uint64_t))a3[6];
      if (v11)
      {
        result = (char *)v11(a2);
        if (!v12)
          goto LABEL_19;
      }
      else
      {
        result = *(char **)v10;
        v12 = *(unsigned __int16 *)(v10 + 20);
        if (!*(_WORD *)(v10 + 20))
          goto LABEL_19;
      }
      v21 = *(_QWORD **)a4;
      v22 = 2 * v12;
      do
      {
        v23 = *(unsigned __int16 *)result;
        result += 2;
        *(_QWORD *)((char *)v21 + (((unint64_t)v23 >> 3) & 0x1FF8)) |= 1 << v23;
        v22 -= 2;
      }
      while (v22);
    }
  }
  else
  {
    v34 = 0;
    while (1)
    {
      v34 += 32;
      if (v34 >= v32)
        break;
      v35 = v30[1];
      ++v30;
      v33 = v35;
      if (v35)
        goto LABEL_31;
    }
  }
LABEL_19:
  v24 = *(_QWORD *)(a2 + 40);
  LODWORD(v25) = *((_DWORD *)a4 + 2);
  v26 = *(_DWORD *)(v24 + 360);
  if (v26 >= v25)
    v25 = v25;
  else
    v25 = v26;
  if ((_DWORD)v25)
  {
    v27 = *(uint64_t **)(v24 + 352);
    v28 = *(_QWORD **)a4;
    do
    {
      v29 = *v27++;
      *v28++ &= ~v29;
      --v25;
    }
    while (v25);
  }
  return result;
}

uint64_t llvm::TargetRegisterInfo::getCommonSubClass(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  _DWORD *v9;
  _DWORD *i;
  unsigned int v11;

  if (a2 == a3)
    return a2;
  result = 0;
  if (a2 && a3)
  {
    v6 = a1 + 240;
    v5 = *(_QWORD *)(a1 + 240);
    v7 = (unint64_t)(*(_QWORD *)(v6 + 8) - v5) >> 3;
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = *(_DWORD **)(a3 + 8);
      for (i = *(_DWORD **)(a2 + 8); ; ++i)
      {
        v11 = *v9 & *i;
        if (v11)
          break;
        ++v9;
        v8 += 32;
        if (v8 >= v7)
          return 0;
      }
      return *(_QWORD *)(v5 + 8 * (__clz(__rbit32(v11)) + v8));
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::TargetRegisterInfo::getMatchingSuperRegClass(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _WORD *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned __int16 *v10;
  int v11;
  unsigned int v12;
  _DWORD *v13;
  unsigned int v14;

  v4 = *(_WORD **)(a3 + 16);
  v5 = (unsigned __int16)*v4;
  if (!*v4)
    return 0;
  v6 = *(_QWORD *)(a1 + 240);
  v7 = (unint64_t)(*(_QWORD *)(a1 + 248) - v6) >> 3;
  v8 = 4 * ((v7 + 31) >> 5);
  v9 = (_DWORD *)(*(_QWORD *)(a3 + 8) + v8);
  v10 = v4 + 1;
  while (v5 != a4)
  {
    v11 = *v10++;
    v5 = v11;
    v9 = (_DWORD *)((char *)v9 + v8);
    if (!v11)
      return 0;
  }
  if (!(_DWORD)v7)
    return 0;
  v12 = 0;
  v13 = *(_DWORD **)(a2 + 8);
  while (1)
  {
    v14 = *v13 & *v9;
    if (v14)
      break;
    ++v13;
    ++v9;
    v12 += 32;
    if (v12 >= v7)
      return 0;
  }
  return *(_QWORD *)(v6 + 8 * (__clz(__rbit32(v14)) + v12));
}

uint64_t *llvm::TargetRegisterInfo::getCommonSuperRegClass(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, _DWORD *a6, _DWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int16 *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t *v37;
  int v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  _DWORD *v50;
  _DWORD *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  int v56;
  unsigned int v57;

  v7 = *(_QWORD *)(a1 + 264);
  v8 = (*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 3;
  v9 = *(_DWORD *)(a1 + 272) * v8;
  v10 = *(_DWORD *)(v7 + 24 * (v9 + *(unsigned __int16 *)(*(_QWORD *)a2 + 24)));
  v11 = *(_DWORD *)(v7 + 24 * (v9 + *(unsigned __int16 *)(*(_QWORD *)a4 + 24)));
  v12 = v10 >= v11;
  if (v10 < v11)
    v13 = v11;
  else
    v13 = v10;
  if (v10 < v11)
    v14 = a2;
  else
    v14 = a4;
  if (v10 < v11)
    v15 = a3;
  else
    v15 = a5;
  if (v10 < v11)
    v16 = a7;
  else
    v16 = a6;
  if (v12)
    v17 = a7;
  else
    v17 = a6;
  v50 = v17;
  v51 = v16;
  if (v12)
    v18 = a3;
  else
    v18 = a5;
  v57 = v18;
  if (v12)
    v19 = a2;
  else
    v19 = a4;
  v20 = *(unsigned __int16 **)(v19 + 16);
  if (v20)
  {
    v22 = 0;
    v23 = 0;
    v24 = *(_QWORD *)(v19 + 8);
    v52 = 4 * ((v8 + 31) >> 5);
    v53 = v14;
    v54 = v15;
    v55 = v13;
    while (1)
    {
      v25 = (_DWORD)v23 ? v23 : v57;
      if (v57)
      {
        v26 = v53;
        if ((_DWORD)v23)
        {
          v27 = (*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)a1 + 208))(a1, v23, v57);
          v15 = v54;
          v13 = v55;
          v25 = v27;
        }
      }
      else
      {
        v26 = v53;
      }
      v28 = *(unsigned __int16 **)(v26 + 16);
      if (v28)
        break;
LABEL_53:
      v48 = *v20++;
      v23 = v48;
      v24 += v52;
      v37 = v22;
      if (!v48)
        return v37;
    }
    v29 = 0;
    v30 = *(_QWORD *)(v26 + 8);
    v31 = 4 * ((((*(_QWORD *)(a1 + 248) - *(_QWORD *)(a1 + 240)) >> 3) + 31) >> 5);
    v56 = v23;
    while (1)
    {
      v32 = *(_QWORD *)(a1 + 240);
      v33 = (unint64_t)(*(_QWORD *)(a1 + 248) - v32) >> 3;
      if ((_DWORD)v33)
      {
        v34 = 0;
        v35 = 0;
        while (1)
        {
          v36 = *(_DWORD *)(v30 + v34) & *(_DWORD *)(v24 + v34);
          if (v36)
            break;
          v35 += 32;
          v34 += 4;
          if (v35 >= v33)
            goto LABEL_52;
        }
        v37 = *(uint64_t **)(v32 + 8 * (__clz(__rbit32(v36)) + v35));
        if (v37
          && *(_DWORD *)(*(_QWORD *)(a1 + 264)
                       + 24 * (*(unsigned __int16 *)(*v37 + 24) + *(_DWORD *)(a1 + 272) * (_DWORD)v33)) >= v13)
        {
          v38 = (_DWORD)v29 ? v29 : v15;
          if ((_DWORD)v15 && (_DWORD)v29)
          {
            v23 = (unint64_t)v20;
            v39 = v22;
            v40 = v25;
            v38 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 208))(a1, v29, v15);
            v25 = v40;
            v22 = v39;
            v20 = (unsigned __int16 *)v23;
            v13 = v55;
            LODWORD(v23) = v56;
            v15 = v54;
          }
          if ((_DWORD)v25 == v38)
          {
            v41 = *(_QWORD *)(a1 + 264);
            v43 = *(_QWORD *)(a1 + 240);
            v42 = *(_QWORD *)(a1 + 248);
            v44 = *v37;
            if (!v22)
            {
              v46 = *(unsigned __int16 *)(v44 + 24);
              v45 = (unint64_t)(v42 - v43) >> 3;
LABEL_51:
              *v51 = v23;
              *v50 = v29;
              v22 = v37;
              if (*(_DWORD *)(v41 + 24 * (v46 + *(_DWORD *)(a1 + 272) * v45)) == v13)
                return v37;
              goto LABEL_52;
            }
            v45 = (unint64_t)(v42 - v43) >> 3;
            v46 = *(unsigned __int16 *)(v44 + 24);
            if (*(_DWORD *)(v41 + 24 * (*(_DWORD *)(a1 + 272) * v45 + v46)) < *(_DWORD *)(v41 + 24 * (*(_DWORD *)(a1 + 272) * (_DWORD)v45 + *(unsigned __int16 *)(*v22 + 24))))
              goto LABEL_51;
          }
        }
      }
LABEL_52:
      v47 = *v28++;
      v29 = v47;
      v30 += v31;
      if (!v47)
        goto LABEL_53;
    }
  }
  return 0;
}

BOOL llvm::TargetRegisterInfo::shouldRewriteCopySrc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t CommonSuperRegClass;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  if (a2 == a4)
    return 1;
  v15 = v5;
  v16 = v6;
  v8 = a2;
  if (a3 && a5)
  {
    CommonSuperRegClass = (uint64_t)llvm::TargetRegisterInfo::getCommonSuperRegClass(a1, a4, a5, a2, a3, &v14, &v13);
  }
  else
  {
    if (a5)
      v11 = a2;
    else
      v11 = a4;
    if (a5)
    {
      v8 = a4;
      v12 = a5;
    }
    else
    {
      v12 = a3;
    }
    if (v12)
      CommonSuperRegClass = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 184))(a1, v8, v11);
    else
      CommonSuperRegClass = llvm::TargetRegisterInfo::getCommonSubClass(a1, v11, v8);
  }
  return CommonSuperRegClass != 0;
}

uint64_t llvm::TargetRegisterInfo::getRegAllocationHints(uint64_t a1, int a2, unsigned __int16 *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v15;
  unsigned int *v16;
  BOOL v17;
  unsigned int v18;
  __int16 v19;
  uint64_t v20;
  unsigned __int16 *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v25;
  unsigned __int16 *v26;
  uint64_t v27;
  unsigned int v28;
  void *v29[2];
  _BYTE v30[128];
  _QWORD *v31;
  _QWORD v32[4];

  v32[2] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a6 + 40);
  v8 = *(_QWORD *)(v7 + 208);
  v29[0] = v30;
  v29[1] = (void *)0x2000000000;
  v32[0] = 0;
  v32[1] = 0;
  v31 = v32;
  v9 = v8 + 40 * (a2 & 0x7FFFFFFF);
  v10 = *(unsigned int *)(v9 + 16);
  if ((_DWORD)v10)
  {
    v15 = *(unsigned int **)(v9 + 8);
    v16 = &v15[v10];
    v17 = *(_DWORD *)(v8 + 40 * (a2 & 0x7FFFFFFF)) != 0;
    v26 = &a3[a4];
    v27 = 2 * a4;
    v25 = a5 + 3;
    do
    {
      if (!v17)
      {
        v18 = *v15;
        v28 = *v15;
        if (a7 && (v18 & 0x80000000) != 0)
          v28 = *(_DWORD *)(*(_QWORD *)(a7 + 280) + 4 * (v18 & 0x7FFFFFFF));
        if ((sub_1C4879438((uint64_t)v29, &v28) & 0x100000000) != 0)
        {
          v19 = v28;
          if (v28 - 1 <= 0x3FFFFFFE
            && ((*(_QWORD *)(*(_QWORD *)(v7 + 352) + (((unint64_t)v28 >> 3) & 0x1FFFFFF8)) >> v28) & 1) == 0)
          {
            if (a4)
            {
              v20 = v27;
              v21 = a3;
              while (v28 != *v21)
              {
                ++v21;
                v20 -= 2;
                if (!v20)
                {
                  v21 = v26;
                  break;
                }
              }
            }
            else
            {
              v21 = a3;
            }
            if (a4 != v21 - a3)
            {
              v22 = a5[1];
              if ((unint64_t)(v22 + 1) > a5[2])
              {
                llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a5, v25, v22 + 1, 2);
                v22 = a5[1];
              }
              *(_WORD *)(*a5 + 2 * v22) = v19;
              ++a5[1];
            }
          }
        }
      }
      v17 = 0;
      ++v15;
    }
    while (v15 != v16);
    v23 = (_QWORD *)v32[0];
  }
  else
  {
    v23 = 0;
  }
  sub_1C47655E8((uint64_t)&v31, v23);
  if (v29[0] != v30)
    free(v29[0]);
  return 0;
}

uint64_t llvm::TargetRegisterInfo::canRealignStack(llvm::TargetRegisterInfo *this, const llvm::MachineFunction *a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  int v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  int v17;
  unint64_t v18;
  int v19;
  uint64_t v20;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 112);
  if (!v2)
    return 1;
  if (!*(_DWORD *)(v2 + 8))
    return 1;
  v3 = *(_QWORD *)(v2 + 40);
  if (!v3)
    return 1;
  v4 = *(_DWORD *)(v3 + 40);
  if (!v4)
    return 1;
  v5 = *(_QWORD *)(v3 + 24);
  v6 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  v7 = &unk_1ED7EA000;
  if ((v6 & 1) == 0)
  {
    v20 = v5;
    v19 = v4;
    v17 = __cxa_guard_acquire(&qword_1ED7EAC88);
    v7 = &unk_1ED7EA000;
    v4 = v19;
    v5 = v20;
    if (v17)
    {
      v18 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v18 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v18;
      __cxa_guard_release(&qword_1ED7EAC88);
      v7 = (_QWORD *)&unk_1ED7EA000;
      v4 = v19;
      v5 = v20;
    }
  }
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7[400] ^ 0x71B0A0613591C43)) ^ ((0x9DDFEA08EB382D69
                                                                   * (v7[400] ^ 0x71B0A0613591C43)) >> 47) ^ 0x6E776B636174732DLL);
  v9 = (-348639895 * ((v8 >> 47) ^ v8)) ^ 0x732D6E67;
  v10 = v4 - 1;
  for (i = 1; ; ++i)
  {
    v12 = v9 & v10;
    v13 = v5 + 24 * v12;
    v14 = *(_QWORD **)v13;
    if (*(_QWORD *)v13 == -1)
    {
      if ("no-realign-stack" == (char *)-1)
        return 0;
      goto LABEL_9;
    }
    if (v14 != (_QWORD *)-2)
      break;
    if ("no-realign-stack" == (char *)-2)
      return 0;
LABEL_9:
    if (v14 == (_QWORD *)-1)
      return 1;
    v9 = i + v12;
  }
  if (*(_QWORD *)(v13 + 8) != 16)
    goto LABEL_9;
  if (*v14 != 0x696C6165722D6F6ELL || v14[1] != 0x6B636174732D6E67)
    goto LABEL_9;
  return 0;
}

uint64_t llvm::TargetRegisterInfo::shouldRealignStack(llvm::TargetRegisterInfo *this, const llvm::MachineFunction *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v10;
  _QWORD *v11;
  unint64_t v12;
  unsigned int v13;
  int v14;
  int i;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v22;
  int v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v3 = *((_QWORD *)a2 + 7);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 112))(*((_QWORD *)a2 + 2));
  v5 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(v5 + 112);
  if (v6)
  {
    if (*(_DWORD *)(v6 + 8))
    {
      v7 = *(_QWORD *)(v6 + 40);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 + 40);
        if (v8)
        {
          v9 = *(_QWORD *)(v7 + 24);
          v10 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          v11 = &unk_1ED7EA000;
          if ((v10 & 1) == 0)
          {
            v26 = v9;
            v27 = v4;
            v25 = v8;
            v22 = __cxa_guard_acquire(&qword_1ED7EAC88);
            v11 = &unk_1ED7EA000;
            v8 = v25;
            v23 = v22;
            v9 = v26;
            v4 = v27;
            if (v23)
            {
              v24 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v24 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v24;
              __cxa_guard_release(&qword_1ED7EAC88);
              v11 = (_QWORD *)&unk_1ED7EA000;
              v8 = v25;
              v9 = v26;
              v4 = v27;
            }
          }
          v12 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (v11[400] ^ 0x4613941DF5A76224)) ^ ((0x9DDFEA08EB382D69
                                                                              * (v11[400] ^ 0x4613941DF5A76224)) >> 47) ^ 0x2776E67696C61657);
          v13 = (-348639895 * ((v12 >> 47) ^ v12)) ^ 0x6165726B;
          v14 = v8 - 1;
          for (i = 1; ; ++i)
          {
            v16 = v13 & v14;
            v17 = (uint64_t *)(v9 + 24 * v16);
            v18 = *v17;
            if (*v17 == -1)
            {
              if ("stackrealign" == (char *)-1)
                return 1;
            }
            else if (v18 == -2)
            {
              if ("stackrealign" == (char *)-2)
                return 1;
            }
            else if (v17[1] == 12 && *(_QWORD *)v18 == 0x6165726B63617473 && *(_DWORD *)(v18 + 8) == 1852270956)
            {
              return 1;
            }
            if (v18 == -1)
              break;
            v13 = i + v16;
          }
        }
      }
    }
  }
  if (*(unsigned __int8 *)(v3 + 60) > *(unsigned __int8 *)(v4 + 12))
    return 1;
  v19 = *(_QWORD *)(v5 + 112);
  if (v19)
    return (*(unsigned __int8 *)(v19 + 21) >> 6) & 1;
  else
    return 0;
}

BOOL llvm::TargetRegisterInfo::regmaskSubsetEqual(llvm::TargetRegisterInfo *this, const unsigned int *a2, const unsigned int *a3)
{
  unsigned int v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v3 = *((_DWORD *)this + 4) + 31;
  if (v3 < 0x20)
    return 1;
  if ((*a2 & ~*a3) != 0)
    return 0;
  v5 = v3 >> 5;
  v6 = 1;
  do
  {
    v7 = v6;
    if (v5 == v6)
      break;
    v8 = a2[v6];
    v9 = a3[v6++];
  }
  while ((v8 & ~v9) == 0);
  return v7 >= v5;
}

uint64_t llvm::TargetRegisterInfo::getRegSizeInBits(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t result;
  const char *v13;
  uint64_t v14;
  unint64_t v15;

  if (a2 - 1 <= 0x3FFFFFFE)
  {
    v4 = 0;
    v5 = *(char **)(a1 + 240);
    v6 = *(char **)(a1 + 248);
    v7 = (unint64_t)a2 >> 3;
    v8 = v5;
    do
    {
      v9 = **(_QWORD **)v8;
      if (v7 < *(unsigned __int16 *)(v9 + 22)
        && ((1 << (a2 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v9 + 8) + v7)) != 0
        && (!v4
         || *(uint64_t **)v8 != v4
         && ((*(_DWORD *)(v4[1] + ((*(unsigned __int16 *)(v9 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v9 + 24)) & 1) != 0))
      {
        v4 = *(uint64_t **)v8;
      }
      v8 += 8;
    }
    while (v8 != v6);
    return *(unsigned int *)(*(_QWORD *)(a1 + 264)
                           + 24
                           * (*(unsigned __int16 *)(*v4 + 24)
                            + *(_DWORD *)(a1 + 272) * ((unint64_t)(v6 - v5) >> 3)));
  }
  v11 = a2 & 0x7FFFFFFF;
  if ((a2 & 0x80000000) == 0 || v11 >= *(unsigned int *)(a3 + 432))
  {
    v15 = 0;
    goto LABEL_18;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(a3 + 424) + 8 * v11);
  if ((v15 & 0xFFFFFFFFFFFFFFF9) == 0)
    goto LABEL_18;
  result = sub_1C4825F50(&v15);
  if ((_DWORD)v13 != 1)
  {
    if ((_DWORD)result)
      return result;
    goto LABEL_18;
  }
  v14 = result;
  result = v14;
  if (!(_DWORD)v14)
  {
LABEL_18:
    v4 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 16 * v11) & 0xFFFFFFFFFFFFFFF8);
    v5 = *(char **)(a1 + 240);
    v6 = *(char **)(a1 + 248);
    return *(unsigned int *)(*(_QWORD *)(a1 + 264)
                           + 24
                           * (*(unsigned __int16 *)(*v4 + 24)
                            + *(_DWORD *)(a1 + 272) * ((unint64_t)(v6 - v5) >> 3)));
  }
  return result;
}

uint64_t llvm::TargetRegisterInfo::getCoveringSubRegIndexes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int8x8_t v14;
  uint64_t v15;
  uint8x8_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  signed int v26;
  uint64_t v27;
  uint8x8_t v28;
  __int32 v29;
  uint8x8_t v30;
  void *v32;
  uint64_t v33;
  _QWORD v34[5];

  v34[4] = *MEMORY[0x1E0C80C00];
  v32 = v34;
  v33 = 0x800000000;
  v5 = *(unsigned int *)(a1 + 104);
  if (v5 < 2)
  {
    v18 = 0;
    goto LABEL_35;
  }
  v10 = 0;
  v11 = 0;
  v12 = ~a4;
  v13 = 1;
  while ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 200))(a1, a3, v13) != a3)
  {
LABEL_12:
    if (v5 == ++v13)
      goto LABEL_16;
  }
  v14 = *(int8x8_t *)(*(_QWORD *)(a1 + 232) + 8 * v13);
  if (*(_QWORD *)&v14 != a4)
  {
    if ((*(_QWORD *)&v14 & v12) == 0)
    {
      v15 = v33;
      if (v33 >= (unint64_t)HIDWORD(v33))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v32, (uint64_t)v34, v33 + 1, 4);
        v15 = v33;
      }
      v16 = (uint8x8_t)vcnt_s8(v14);
      v16.i16[0] = vaddlv_u8(v16);
      *((_DWORD *)v32 + v15) = v13;
      LODWORD(v33) = v33 + 1;
      v17 = v11 >= v16.i32[0];
      if (v11 <= v16.i32[0])
        v11 = v16.i32[0];
      if (!v17)
        v10 = v13;
    }
    goto LABEL_12;
  }
  v10 = v13;
LABEL_16:
  if (v10)
  {
    v19 = *(unsigned int *)(a5 + 8);
    if (v19 >= *(_DWORD *)(a5 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v19 + 1, 4);
      LODWORD(v19) = *(_DWORD *)(a5 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a5 + 4 * v19) = v10;
    v20 = *(_DWORD *)(a5 + 8) + 1;
    *(_DWORD *)(a5 + 8) = v20;
    v21 = *(_QWORD *)(a1 + 232);
    v22 = a4 & ~*(_QWORD *)(v21 + 8 * v10);
    if (v22)
    {
      while ((_DWORD)v33)
      {
        v23 = 0;
        v24 = v32;
        v25 = 4 * v33;
        v26 = 0x80000000;
        while (1)
        {
          v27 = *(_QWORD *)(v21 + 8 * *v24);
          if (v27 == v22)
            break;
          v28 = (uint8x8_t)vcnt_s8((int8x8_t)(v27 & v22));
          v28.i16[0] = vaddlv_u8(v28);
          v29 = v28.i32[0];
          v30 = (uint8x8_t)vcnt_s8((int8x8_t)(v27 & ~v22));
          v30.i16[0] = vaddlv_u8(v30);
          if (v29 - v30.i32[0] > v26)
          {
            v23 = *v24;
            v26 = v29 - v30.i32[0];
          }
          ++v24;
          v25 -= 4;
          if (!v25)
          {
            if (!v23)
              goto LABEL_33;
            goto LABEL_29;
          }
        }
        v23 = *v24;
        if (!*v24)
          goto LABEL_33;
LABEL_29:
        if (v20 >= *(_DWORD *)(a5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v20 + 1, 4);
          v20 = *(_DWORD *)(a5 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a5 + 4 * v20) = v23;
        v20 = *(_DWORD *)(a5 + 8) + 1;
        *(_DWORD *)(a5 + 8) = v20;
        v21 = *(_QWORD *)(a1 + 232);
        v22 &= ~*(_QWORD *)(v21 + 8 * v23);
        if (!v22)
          goto LABEL_34;
      }
      goto LABEL_33;
    }
LABEL_34:
    v18 = 1;
  }
  else
  {
LABEL_33:
    v18 = 0;
  }
LABEL_35:
  if (v32 != v34)
    free(v32);
  return v18;
}

uint64_t llvm::TargetRegisterInfo::lookThruCopyLike(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;

  result = a2;
  do
  {
    if ((result & 0x80000000) != 0)
      v4 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * (result & 0x7FFFFFFF) + 8);
    else
      v4 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * result);
    v5 = *v4;
    if ((*(_BYTE *)(v5 + 3) & 1) == 0)
      v5 = *(_QWORD *)(v5 + 24);
    v6 = *(_QWORD *)(v5 + 8);
    v7 = **(unsigned __int16 **)(v6 + 16);
    if (v7 == 19)
    {
      v8 = 1;
    }
    else
    {
      if (v7 != 11)
        return result;
      v8 = 2;
    }
    result = *(unsigned int *)(*(_QWORD *)(v6 + 32) + 32 * v8 + 4);
  }
  while ((result & 0x80000000) != 0);
  return result;
}

void sub_1C52C95B4()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C52C95C8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E814D010;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C52C9608(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E814D010;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::raw_ostream *sub_1C52C9630(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v3;
  int v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  llvm::raw_ostream *v8;
  int v9;
  uint64_t v10;
  const char *v11;
  llvm::raw_ostream *v12;
  size_t v13;
  _BYTE *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  char v18;
  const char *v19;
  size_t v20;
  _BYTE *v21;
  _BYTE *v22;
  _DWORD *v23;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int v28;
  const void *v29;
  unint64_t v30;
  _BYTE *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::raw_ostream *v37;
  size_t v38;

  v3 = result;
  v4 = *((_DWORD *)result + 2);
  if (!v4)
  {
    v10 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v10) <= 5)
    {
      v11 = "$noreg";
      v12 = this;
      v13 = 6;
LABEL_9:
      result = llvm::raw_ostream::write(v12, v11, v13);
      goto LABEL_35;
    }
    *(_WORD *)(v10 + 4) = 26469;
    *(_DWORD *)v10 = 1919905316;
    v33 = *((_QWORD *)this + 4) + 6;
LABEL_58:
    *((_QWORD *)this + 4) = v33;
    goto LABEL_35;
  }
  if (v4 >= 0x40000000)
  {
    v5 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v5) > 2)
    {
      *(_BYTE *)(v5 + 2) = 35;
      *(_WORD *)v5 = 21331;
      *((_QWORD *)this + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(this, "SS#", 3uLL);
    }
    v6 = *((_DWORD *)v3 + 2) - 0x40000000;
    v7 = v6;
    if (v6 < 0)
    {
      v7 = -(uint64_t)v6;
      v8 = this;
      v9 = 1;
LABEL_34:
      result = sub_1C5E21910(v8, v7, 0, 0, v9);
      goto LABEL_35;
    }
LABEL_33:
    v8 = this;
    v9 = 0;
    goto LABEL_34;
  }
  if (v4 < 0)
  {
    v15 = *((_QWORD *)result + 4);
    if (!v15
      || (v16 = v4 & 0x7FFFFFFF, v16 >= *(_DWORD *)(v15 + 72))
      || ((v17 = *(_QWORD *)(v15 + 64) + 24 * v16, v18 = *(_BYTE *)(v17 + 23), v18 >= 0)
        ? (v19 = (const char *)v17)
        : (v19 = *(const char **)v17),
          v18 >= 0 ? (v20 = v18 & 0x7F) : (v20 = *(_QWORD *)(v17 + 8)),
          !v20))
    {
      v22 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v22 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 37);
      }
      else
      {
        *((_QWORD *)this + 4) = v22 + 1;
        *v22 = 37;
      }
      v7 = *((_DWORD *)v3 + 2) & 0x7FFFFFFF;
      goto LABEL_33;
    }
    v21 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v21 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 37);
    }
    else
    {
      *((_QWORD *)this + 4) = v21 + 1;
      *v21 = 37;
    }
    v32 = (void *)*((_QWORD *)this + 4);
    if (v20 > *((_QWORD *)this + 3) - (_QWORD)v32)
    {
      v12 = this;
      v11 = v19;
      v13 = v20;
      goto LABEL_9;
    }
    result = (llvm::raw_ostream *)memcpy(v32, v19, v20);
    v33 = *((_QWORD *)this + 4) + v20;
    goto LABEL_58;
  }
  if (!*((_QWORD *)result + 2))
  {
    v14 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v14 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 36);
    }
    else
    {
      *((_QWORD *)this + 4) = v14 + 1;
      *v14 = 36;
    }
    v23 = (_DWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v23 > 6uLL)
    {
      *(_DWORD *)((char *)v23 + 3) = 1734701683;
      *v23 = 1937336432;
      *((_QWORD *)this + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(this, "physreg", 7uLL);
    }
    v7 = *((unsigned int *)v3 + 2);
    goto LABEL_33;
  }
  v31 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v31 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 36);
  }
  else
  {
    *((_QWORD *)this + 4) = v31 + 1;
    *v31 = 36;
  }
  v34 = *((_QWORD *)v3 + 2);
  v35 = *(_QWORD *)(v34 + 72);
  v36 = *(unsigned int *)(*(_QWORD *)(v34 + 8) + 24 * *((unsigned int *)v3 + 2));
  v37 = (llvm::raw_ostream *)(v35 + v36);
  if (v35)
    v38 = strlen((const char *)(v35 + v36));
  else
    v38 = 0;
  result = llvm::printLowerCase(v37, v38, this);
LABEL_35:
  if (*((_DWORD *)v3 + 6))
  {
    if (*((_QWORD *)v3 + 2))
    {
      v24 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v24 >= *((_QWORD *)this + 3))
      {
        result = llvm::raw_ostream::write(this, 58);
      }
      else
      {
        *((_QWORD *)this + 4) = v24 + 1;
        *v24 = 58;
      }
      v27 = *(_QWORD *)(*((_QWORD *)v3 + 2) + 224);
      v28 = *((_DWORD *)v3 + 6) - 1;
      v29 = *(const void **)(v27 + 8 * v28);
      if (v29)
      {
        v30 = strlen(*(const char **)(v27 + 8 * v28));
        result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
        if (v30 <= *((_QWORD *)this + 3) - (_QWORD)result)
        {
          if (v30)
          {
            result = (llvm::raw_ostream *)memcpy(result, v29, v30);
            *((_QWORD *)this + 4) += v30;
          }
        }
        else
        {
          return llvm::raw_ostream::write(this, (const char *)v29, v30);
        }
      }
    }
    else
    {
      v25 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v25) > 4)
      {
        *(_BYTE *)(v25 + 4) = 40;
        *(_DWORD *)v25 = 1651864378;
        *((_QWORD *)this + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(this, ":sub(", 5uLL);
      }
      result = sub_1C5E21910(this, *((unsigned int *)v3 + 6), 0, 0, 0);
      v26 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v26 >= *((_QWORD *)this + 3))
      {
        return llvm::raw_ostream::write(this, 41);
      }
      else
      {
        *((_QWORD *)this + 4) = v26 + 1;
        *v26 = 41;
      }
    }
  }
  return result;
}

void sub_1C52C9A5C()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C52C9A70(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E814D058;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C52C9AA8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E814D058;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::raw_ostream *sub_1C52C9AC8(llvm::raw_ostream *result, llvm::raw_ostream *this)
{
  llvm::raw_ostream *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  const char *v13;
  llvm::raw_ostream *v14;
  size_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  unint64_t v20;
  uint64_t v21;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (!v4)
  {
    v12 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v12) <= 4)
    {
      v13 = "Unit~";
      v14 = this;
      v15 = 5;
LABEL_13:
      llvm::raw_ostream::write(v14, v13, v15);
      return sub_1C5E21910(this, *((unsigned int *)v3 + 2), 0, 0, 0);
    }
    *(_BYTE *)(v12 + 4) = 126;
    *(_DWORD *)v12 = 1953066581;
    v21 = *((_QWORD *)this + 4) + 5;
LABEL_23:
    *((_QWORD *)this + 4) = v21;
    return sub_1C5E21910(this, *((unsigned int *)v3 + 2), 0, 0, 0);
  }
  v5 = *((unsigned int *)result + 2);
  if (v5 >= *(_DWORD *)(v4 + 44))
  {
    v16 = (_QWORD *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v16 <= 7uLL)
    {
      v13 = "BadUnit~";
      v14 = this;
      v15 = 8;
      goto LABEL_13;
    }
    *v16 = 0x7E74696E55646142;
    v21 = *((_QWORD *)this + 4) + 8;
    goto LABEL_23;
  }
  v6 = (unsigned __int16 *)(*(_QWORD *)(v4 + 48) + 4 * v5);
  v7 = v6[1];
  v8 = *(_QWORD *)(v4 + 72);
  if (v8)
  {
    v9 = (const char *)(v8 + *(unsigned int *)(*(_QWORD *)(v4 + 8) + 24 * *v6));
    v10 = strlen(v9);
    result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
    if (v10 <= *((_QWORD *)this + 3) - (_QWORD)result)
    {
      if (v10)
      {
        result = (llvm::raw_ostream *)memcpy(result, v9, v10);
        *((_QWORD *)this + 4) += v10;
      }
    }
    else
    {
      result = llvm::raw_ostream::write(this, v9, v10);
    }
  }
  if (v7)
  {
    v11 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v11 >= *((_QWORD *)this + 3))
    {
      result = llvm::raw_ostream::write(this, 126);
    }
    else
    {
      *((_QWORD *)this + 4) = v11 + 1;
      *v11 = 126;
    }
    v17 = *((_QWORD *)v3 + 2);
    v18 = *(_QWORD *)(v17 + 72);
    if (v18)
    {
      v19 = (const char *)(v18 + *(unsigned int *)(*(_QWORD *)(v17 + 8) + 24 * v7));
      v20 = strlen(v19);
      result = (llvm::raw_ostream *)*((_QWORD *)this + 4);
      if (v20 <= *((_QWORD *)this + 3) - (_QWORD)result)
      {
        if (v20)
        {
          result = (llvm::raw_ostream *)memcpy(result, v19, v20);
          *((_QWORD *)this + 4) += v20;
        }
      }
      else
      {
        return llvm::raw_ostream::write(this, v19, v20);
      }
    }
  }
  return result;
}

void sub_1C52C9CE8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C52C9CFC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E814D0A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C52C9D34(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E814D0A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

llvm::raw_ostream *sub_1C52C9D54(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v4;
  uint64_t v5;
  llvm::raw_ostream *result;
  uint64_t (**v7)(void);
  _BYTE *v8;
  _QWORD v9[3];
  llvm::raw_ostream *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(a1 + 8);
  if ((v4 & 0x80000000) != 0)
  {
    v8 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v8 >= *((_QWORD *)this + 3))
    {
      llvm::raw_ostream::write(this, 37);
    }
    else
    {
      *((_QWORD *)this + 4) = v8 + 1;
      *v8 = 37;
    }
    return sub_1C5E21910(this, *(_DWORD *)(a1 + 8) & 0x7FFFFFFF, 0, 0, 0);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 16);
    v9[0] = &off_1E814D058;
    v9[1] = v4;
    v9[2] = v5;
    v10 = (llvm::raw_ostream *)v9;
    sub_1C52C9AC8((llvm::raw_ostream *)v9, this);
    result = v10;
    if (v10 == (llvm::raw_ostream *)v9)
    {
      v7 = (uint64_t (**)(void))(v9[0] + 32);
    }
    else
    {
      if (!v10)
        return result;
      v7 = (uint64_t (**)(void))(*(_QWORD *)v10 + 40);
    }
    return (llvm::raw_ostream *)(*v7)();
  }
}

void sub_1C52C9E74()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C52C9E88(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E814D0E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C52C9EC8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E814D0E8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C52C9EF0(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  BOOL v8;
  _BYTE *v9;
  void **v10;
  size_t v11;
  void *__p[2];
  char v13;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 16 * (*(_DWORD *)(a1 + 8) & 0x7FFFFFFF));
  v4 = (_QWORD *)(v3 & 0xFFFFFFFFFFFFFFF8);
  if ((v3 & 4) != 0 || !v4)
  {
    if (v4)
      v8 = (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 24) + 16 * (*(_DWORD *)(a1 + 8) & 0x7FFFFFFF)) & 4) == 0;
    else
      v8 = 1;
    if (v8)
    {
      v9 = (_BYTE *)*((_QWORD *)this + 4);
      if (*((_BYTE **)this + 3) == v9)
      {
        llvm::raw_ostream::write(this, "_", 1uLL);
      }
      else
      {
        *v9 = 95;
        ++*((_QWORD *)this + 4);
      }
      return;
    }
    v6 = (char *)v4[1];
    if (v6)
      goto LABEL_4;
LABEL_13:
    v7 = 0;
    goto LABEL_14;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 80);
  v6 = (char *)(v5 + *(unsigned int *)(*v4 + 16));
  if (!v5)
    goto LABEL_13;
LABEL_4:
  v7 = strlen(v6);
LABEL_14:
  sub_1C5E3DEA4(__p, v6, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v6[v7], (uint64_t)sub_1C5E3C6A8, v7);
  if (v13 >= 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if (v13 >= 0)
    v11 = v13 & 0x7F;
  else
    v11 = (size_t)__p[1];
  llvm::raw_ostream::write(this, (const char *)v10, v11);
  if (v13 < 0)
    operator delete(__p[0]);
}

uint64_t sub_1C52CA020()
{
  int v1;
  int *v2;
  __int128 v3;
  int v4;

  v4 = 1;
  *(_QWORD *)&v3 = "A threshold of live range size which may cause high compile time cost in global splitting.";
  *((_QWORD *)&v3 + 1) = 90;
  v1 = 5000;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED8035C8, "huge-size-for-split", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED8035C8, &dword_1C475E000);
}

BOOL llvm::TargetSchedModel::hasInstrSchedModel(llvm::TargetSchedModel *this)
{
  return byte_1ED8303C8 && *((_QWORD *)this + 5) != 0;
}

BOOL llvm::TargetSchedModel::hasInstrItineraries(llvm::TargetSchedModel *this)
{
  return byte_1ED830488 && *((_QWORD *)this + 21) != 0;
}

void llvm::TargetSchedModel::init(llvm::TargetSchedModel *this, const llvm::TargetSubtargetInfo *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  *((_QWORD *)this + 22) = a2;
  v3 = *((_QWORD *)a2 + 20);
  v4 = *(_OWORD *)(v3 + 16);
  v5 = *(_OWORD *)(v3 + 32);
  v6 = *(_OWORD *)(v3 + 48);
  *((_QWORD *)this + 8) = *(_QWORD *)(v3 + 64);
  *((_OWORD *)this + 2) = v5;
  *((_OWORD *)this + 3) = v6;
  *((_OWORD *)this + 1) = v4;
  *(_OWORD *)this = *(_OWORD *)v3;
  *((_QWORD *)this + 23) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)a2 + 104))(a2);
  v7 = *((_QWORD *)this + 22);
  v8 = *(__int128 **)(v7 + 160);
  v9 = *(_QWORD *)(v7 + 184);
  v10 = *(__int128 *)((char *)v8 + 56);
  v11 = *(_OWORD *)(v7 + 168);
  v12 = *((_QWORD *)v8 + 6);
  v13 = v8[2];
  v14 = *v8;
  *(_OWORD *)((char *)this + 88) = v8[1];
  *(_OWORD *)((char *)this + 104) = v13;
  *((_QWORD *)this + 15) = v12;
  *(_OWORD *)((char *)this + 72) = v14;
  *((_OWORD *)this + 8) = v10;
  *((_OWORD *)this + 9) = v11;
  *((_QWORD *)this + 20) = v9;
  *((_QWORD *)this + 21) = v10;
  v15 = *((unsigned int *)this + 12);
  v16 = *((_DWORD *)this + 50);
  if (v16 != (_DWORD)v15)
  {
    if (v16 <= v15)
    {
      if (*((_DWORD *)this + 51) < v15)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 192, (uint64_t)this + 208, *((unsigned int *)this + 12), 4);
        v16 = *((_DWORD *)this + 50);
      }
      if (v16 != (_DWORD)v15)
        bzero((void *)(*((_QWORD *)this + 24) + 4 * v16), 4 * (v15 - v16));
    }
    *((_DWORD *)this + 50) = v15;
  }
  v17 = *(unsigned int *)this;
  *((_DWORD *)this + 69) = v17;
  if ((_DWORD)v15)
  {
    v18 = 0;
    v19 = *((_QWORD *)this + 4);
    v20 = v17;
    do
    {
      v21 = *(unsigned int *)(v19 + 32 * v18 + 8);
      if ((_DWORD)v21)
      {
        v22 = v20;
        v23 = *(unsigned int *)(v19 + 32 * v18 + 8);
        do
        {
          v24 = v23;
          v23 = v22 % v23;
          v22 = v24;
        }
        while (v23);
        v25 = v21 * v20 / v24;
        v20 = v25;
        *((_DWORD *)this + 69) = v25;
      }
      ++v18;
    }
    while (v18 != v15);
    *((_DWORD *)this + 68) = v20 / v17;
    v26 = (unsigned int *)*((_QWORD *)this + 24);
    v27 = (unsigned int *)(v19 + 8);
    do
    {
      v29 = *v27;
      v27 += 8;
      v28 = v29;
      if (v29)
        v28 = *((_DWORD *)this + 69) / v28;
      *v26++ = v28;
      --v15;
    }
    while (v15);
  }
  else
  {
    *((_DWORD *)this + 68) = 1;
  }
}

uint64_t llvm::TargetSchedModel::mustBeginGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  unsigned int v7;
  unsigned int v9;
  uint64_t v10;

  if (!byte_1ED8303C8)
    return 0;
  v4 = *(_QWORD *)(a1 + 40);
  if (!v4)
    return 0;
  if (!a3)
  {
    a3 = v4 + 24 * *(unsigned __int16 *)(*(_QWORD *)(a2 + 16) + 6);
    if ((*(_WORD *)(a3 + 8) & 0x1FFF) == 0x1FFE)
    {
      do
      {
        v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 200))(*(_QWORD *)(a1 + 176));
        v10 = *(_QWORD *)(a1 + 40);
      }
      while ((*(_WORD *)(v10 + 24 * v9 + 8) & 0x1FFF) == 0x1FFE);
      a3 = v10 + 24 * v9;
    }
  }
  v5 = *(unsigned __int16 *)(a3 + 8);
  v6 = (~v5 & 0x1FFF) == 0;
  v7 = (v5 >> 13) & 1;
  if (v6)
    return 0;
  else
    return v7;
}

uint64_t llvm::TargetSchedModel::resolveSchedClass(llvm::TargetSchedModel *this, const llvm::MachineInstr *a2)
{
  uint64_t result;
  unsigned int v4;
  uint64_t v5;

  result = *((_QWORD *)this + 5) + 24 * *(unsigned __int16 *)(*((_QWORD *)a2 + 2) + 6);
  if ((*(_WORD *)(result + 8) & 0x1FFF) == 0x1FFE)
  {
    do
    {
      v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 200))(*((_QWORD *)this + 22));
      v5 = *((_QWORD *)this + 5);
    }
    while ((*(_WORD *)(v5 + 24 * v4 + 8) & 0x1FFF) == 0x1FFE);
    return v5 + 24 * v4;
  }
  return result;
}

uint64_t llvm::TargetSchedModel::getNumMicroOps(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unsigned int v8;
  uint64_t v9;
  unsigned __int16 *v10;
  int v11;
  int v14;

  if (byte_1ED830488 && (v5 = *(_QWORD *)(a1 + 168)) != 0)
  {
    v14 = *(__int16 *)(v5 + 10 * *(unsigned __int16 *)(*(_QWORD *)(a2 + 16) + 6));
    if (v14 < 0)
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 184) + 936))(*(_QWORD *)(a1 + 184), a1 + 72, a2);
    else
      return (unsigned __int16)v14;
  }
  else
  {
    if (!byte_1ED8303C8)
      goto LABEL_11;
    v6 = *(_QWORD *)(a1 + 40);
    if (!v6)
      goto LABEL_11;
    if (!a3)
    {
      a3 = v6 + 24 * *(unsigned __int16 *)(*(_QWORD *)(a2 + 16) + 6);
      if ((*(_WORD *)(a3 + 8) & 0x1FFF) == 0x1FFE)
      {
        do
        {
          v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 176) + 200))(*(_QWORD *)(a1 + 176));
          v9 = *(_QWORD *)(a1 + 40);
        }
        while ((*(_WORD *)(v9 + 24 * v8 + 8) & 0x1FFF) == 0x1FFE);
        a3 = v9 + 24 * v8;
      }
    }
    result = *(_WORD *)(a3 + 8) & 0x1FFF;
    if ((_DWORD)result == 0x1FFF)
    {
LABEL_11:
      v10 = *(unsigned __int16 **)(a2 + 16);
      v11 = *v10;
      return ((v11 - 9) > 0x3C || ((1 << (v11 - 9)) & 0x1000000000000605) == 0)
          && v11 != 0
          && (v10[4] & 0x10) == 0;
    }
  }
  return result;
}

uint64_t llvm::TargetSchedModel::computeOperandLatency(llvm::TargetSchedModel *this, const llvm::MachineInstr *a2, uint64_t a3, const llvm::MachineInstr *a4, uint64_t a5)
{
  unsigned int v5;
  unsigned int v7;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  unsigned int v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  int v18;
  __int16 *v19;
  int v20;
  uint64_t v21;
  int v22;
  _WORD *v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  uint64_t v27;
  char v28;
  int v29;
  int v30;
  unsigned int *v33;
  uint64_t v34;
  unsigned int v35;
  int v36;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  uint64_t result;
  unsigned __int16 *v44;
  int v45;
  BOOL v47;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;

  v5 = a5;
  v7 = a3;
  if (byte_1ED8303C8 && (v10 = *((_QWORD *)this + 5)) != 0)
  {
    if (!byte_1ED830488 || (v11 = *((_QWORD *)this + 21)) == 0)
    {
      v12 = (_WORD *)(v10 + 24 * *(unsigned __int16 *)(*((_QWORD *)a2 + 2) + 6));
      if ((v12[4] & 0x1FFF) == 0x1FFE)
      {
        do
        {
          v49 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 200))(*((_QWORD *)this + 22));
          v10 = *((_QWORD *)this + 5);
        }
        while ((*(_WORD *)(v10 + 24 * v49 + 8) & 0x1FFF) == 0x1FFE);
        v12 = (_WORD *)(v10 + 24 * v49);
      }
      v13 = 0;
      if (v7)
      {
        v14 = (unsigned int *)*((_QWORD *)a2 + 4);
        v15 = v7;
        do
        {
          v16 = *v14;
          v14 += 8;
          v17 = HIBYTE(v16) & 1;
          if ((_BYTE)v16)
            v18 = 0;
          else
            v18 = v17;
          v13 += v18;
          --v15;
        }
        while (v15);
      }
      if (v13 < (unsigned __int16)v12[8])
      {
        v19 = (__int16 *)(*(_QWORD *)(*((_QWORD *)this + 22) + 144) + 4 * (v13 + (unsigned __int16)v12[7]));
        v20 = *v19;
        if (v20 < 0)
          v21 = 1000;
        else
          v21 = v20;
        if (a4)
        {
          v22 = (unsigned __int16)v19[1];
          v23 = (_WORD *)(v10 + 24 * *(unsigned __int16 *)(*((_QWORD *)a4 + 2) + 6));
          if ((v23[4] & 0x1FFF) == 0x1FFE)
          {
            do
            {
              v50 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 200))(*((_QWORD *)this + 22));
              v51 = *((_QWORD *)this + 5);
            }
            while ((*(_WORD *)(v51 + 24 * v50 + 8) & 0x1FFF) == 0x1FFE);
            v23 = (_WORD *)(v51 + 24 * v50);
          }
          v24 = (unsigned __int16)v23[10];
          if (v23[10])
          {
            v25 = 0;
            if (v5)
            {
              v26 = (int *)*((_QWORD *)a4 + 4);
              v27 = v5;
              do
              {
                v29 = *v26;
                v26 += 8;
                v28 = v29;
                v30 = v29 & 0x10FFF00;
                if ((v29 & 0x310000FF) == 0 && v30 != 0x1000000 || v28 == 7)
                  ++v25;
                --v27;
              }
              while (v27);
            }
            v33 = (unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 22) + 152) + 12 * (unsigned __int16)v23[9] + 8);
            v34 = 12 * v24;
            while (1)
            {
              v35 = *(v33 - 2);
              if (v35 >= v25)
              {
                if (v35 > v25)
                  goto LABEL_38;
                v36 = *(v33 - 1);
                if (!v36 || v36 == v22)
                  break;
              }
              v33 += 3;
              v34 -= 12;
              if (!v34)
              {
LABEL_38:
                v38 = 0;
                goto LABEL_60;
              }
            }
            v38 = *v33;
LABEL_60:
            if (v21 >= v38 || (int)v38 <= 0)
              return v21 - v38;
            else
              return 0;
          }
        }
        return v21;
      }
      v44 = (unsigned __int16 *)*((_QWORD *)a2 + 2);
      v45 = *v44;
      v47 = (v45 - 9) <= 0x3C && ((1 << (v45 - 9)) & 0x1000000000000605) != 0
         || v45 == 0;
      if (!v47 && (v44[4] & 0x10) == 0)
        return llvm::TargetInstrInfo::defaultDefLatency(*((_QWORD *)this + 23), (uint64_t)this, (uint64_t)a2);
      return 0;
    }
  }
  else
  {
    if (!byte_1ED830488)
      return llvm::TargetInstrInfo::defaultDefLatency(*((_QWORD *)this + 23), (uint64_t)this, (uint64_t)a2);
    v11 = *((_QWORD *)this + 21);
    if (!v11)
      return llvm::TargetInstrInfo::defaultDefLatency(*((_QWORD *)this + 23), (uint64_t)this, (uint64_t)a2);
  }
  if (a4)
  {
    v21 = (*(uint64_t (**)(_QWORD, char *, const llvm::MachineInstr *, uint64_t, const llvm::MachineInstr *, uint64_t))(**((_QWORD **)this + 23) + 952))(*((_QWORD *)this + 23), (char *)this + 72, a2, a3, a4, a5);
    if ((v21 & 0x80000000) == 0)
      return v21;
  }
  else
  {
    v39 = v11 + 10 * *(unsigned __int16 *)(*((_QWORD *)a2 + 2) + 6);
    v40 = *(unsigned __int16 *)(v39 + 8);
    v41 = *(unsigned __int16 *)(v39 + 6) + (_DWORD)a3;
    if (v41 < v40)
    {
      v21 = *(unsigned int *)(*((_QWORD *)this + 19) + 4 * v41);
      if ((v21 & 0x80000000) == 0)
        return v21;
    }
  }
  v42 = (*(uint64_t (**)(_QWORD, char *, const llvm::MachineInstr *, _QWORD))(**((_QWORD **)this + 23) + 960))(*((_QWORD *)this + 23), (char *)this + 72, a2, 0);
  LODWORD(result) = llvm::TargetInstrInfo::defaultDefLatency(*((_QWORD *)this + 23), (uint64_t)this, (uint64_t)a2);
  if (v42 <= result)
    return result;
  else
    return v42;
}

uint64_t llvm::TargetSchedModel::computeInstrLatency(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 *v4;
  int v5;
  int v6;

  v2 = *(unsigned __int16 *)(a2 + 16);
  if (!*(_WORD *)(a2 + 16))
    return 0;
  v3 = result;
  LODWORD(result) = 0;
  v4 = (__int16 *)(*(_QWORD *)(*(_QWORD *)(v3 + 176) + 144) + 4 * *(unsigned __int16 *)(a2 + 14));
  while (1)
  {
    v6 = *v4;
    v4 += 2;
    v5 = v6;
    if (v6 < 0)
      break;
    if ((int)result <= v5)
      result = v5;
    else
      result = result;
    if (!--v2)
    {
      if ((result & 0x80000000) == 0)
        return result;
      return 1000;
    }
  }
  return 1000;
}

uint64_t llvm::TargetSchedModel::computeInstrLatency(llvm::TargetSchedModel *this, unsigned int a2)
{
  uint64_t result;

  LODWORD(result) = llvm::MCSchedModel::computeInstrLatency((uint64_t)this, *((_QWORD *)this + 22), *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8) + 48 * a2 + 6));
  if ((int)result < 0)
    return 1000;
  else
    return result;
}

uint64_t llvm::TargetSchedModel::computeInstrLatency(_QWORD *a1, unsigned int *a2)
{
  uint64_t result;

  if (byte_1ED8303C8 && a1[5])
    LODWORD(result) = llvm::MCSchedModel::computeInstrLatency((uint64_t)a1, (_QWORD *)a1[22], (_QWORD *)(a1[23] + 8), a2);
  else
    LODWORD(result) = llvm::MCSchedModel::computeInstrLatency((uint64_t)a1, a1[22], *(unsigned __int16 *)(*(_QWORD *)(a1[23] + 8) + 48 * *a2 + 6));
  if ((int)result < 0)
    return 1000;
  else
    return result;
}

uint64_t llvm::TargetSchedModel::computeInstrLatency(llvm::TargetSchedModel *this, const llvm::MachineInstr *a2, char a3)
{
  _WORD *v5;
  uint64_t v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t result;
  __int16 *v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;

  if (byte_1ED830488 && *((_QWORD *)this + 21))
    return (*(uint64_t (**)(_QWORD, char *, const llvm::MachineInstr *, _QWORD))(**((_QWORD **)this + 23)
                                                                                         + 960))(*((_QWORD *)this + 23), (char *)this + 72, a2, 0);
  v5 = (_WORD *)*((_QWORD *)a2 + 2);
  if (*v5 == 20)
    return (*(uint64_t (**)(_QWORD, char *, const llvm::MachineInstr *, _QWORD))(**((_QWORD **)this + 23)
                                                                                         + 960))(*((_QWORD *)this + 23), (char *)this + 72, a2, 0);
  if (!byte_1ED8303C8)
  {
    if ((a3 & 1) != 0)
      return llvm::TargetInstrInfo::defaultDefLatency(*((_QWORD *)this + 23), (uint64_t)this, (uint64_t)a2);
    return (*(uint64_t (**)(_QWORD, char *, const llvm::MachineInstr *, _QWORD))(**((_QWORD **)this + 23)
                                                                                         + 960))(*((_QWORD *)this + 23), (char *)this + 72, a2, 0);
  }
  v6 = *((_QWORD *)this + 5);
  if (!v6 && (a3 & 1) == 0)
    return (*(uint64_t (**)(_QWORD, char *, const llvm::MachineInstr *, _QWORD))(**((_QWORD **)this + 23)
                                                                                         + 960))(*((_QWORD *)this + 23), (char *)this + 72, a2, 0);
  if (!v6)
    return llvm::TargetInstrInfo::defaultDefLatency(*((_QWORD *)this + 23), (uint64_t)this, (uint64_t)a2);
  v7 = (_WORD *)(v6 + 24 * (unsigned __int16)v5[3]);
  if ((v7[4] & 0x1FFF) == 0x1FFE)
  {
    do
    {
      v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 200))(*((_QWORD *)this + 22));
      v14 = *((_QWORD *)this + 5);
    }
    while ((*(_WORD *)(v14 + 24 * v13 + 8) & 0x1FFF) == 0x1FFE);
    v7 = (_WORD *)(v14 + 24 * v13);
  }
  if ((~(unsigned __int16)v7[4] & 0x1FFF) == 0)
    return llvm::TargetInstrInfo::defaultDefLatency(*((_QWORD *)this + 23), (uint64_t)this, (uint64_t)a2);
  v8 = (unsigned __int16)v7[8];
  if (!v7[8])
    return 0;
  LODWORD(result) = 0;
  v10 = (__int16 *)(*(_QWORD *)(*((_QWORD *)this + 22) + 144) + 4 * (unsigned __int16)v7[7]);
  while (1)
  {
    v12 = *v10;
    v10 += 2;
    v11 = v12;
    if ((v12 & 0x80000000) != 0)
      break;
    if ((int)result <= (int)v11)
      result = v11;
    else
      result = result;
    if (!--v8)
      goto LABEL_23;
  }
  result = v11;
LABEL_23:
  if ((result & 0x80000000) != 0)
    return 1000;
  return result;
}

uint64_t llvm::TargetSchedModel::computeOutputLatency(llvm::TargetSchedModel *this, const llvm::MachineInstr *a2, unsigned int a3, const llvm::MachineInstr *a4)
{
  uint64_t result;
  unsigned int v5;
  uint64_t MF;
  uint64_t v8;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  uint64_t v11;

  if (*((_DWORD *)this + 1) < 2u)
    return 1;
  v5 = *(_DWORD *)(*((_QWORD *)a2 + 4) + 32 * a3 + 4);
  MF = llvm::MachineInstr::getMF(a2);
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(MF + 16) + 176))(*(_QWORD *)(MF + 16));
  if (llvm::MachineInstr::findRegisterUseOperandIdx((uint64_t)a4, v5, 0, v8) == -1
    && (*(unsigned int (**)(_QWORD, const llvm::MachineInstr *))(**((_QWORD **)this + 23) + 768))(*((_QWORD *)this + 23), a4))
  {
    return llvm::TargetSchedModel::computeInstrLatency(this, a2, 1);
  }
  if (byte_1ED8303C8)
  {
    if (*((_QWORD *)this + 5))
    {
      v9 = (unsigned __int16 *)llvm::TargetSchedModel::resolveSchedClass(this, a2);
      if ((~v9[4] & 0x1FFF) != 0)
      {
        if (v9[6])
        {
          v10 = (unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 22) + 136) + 4 * v9[5]);
          v11 = 4 * v9[6];
          result = 0;
          while (*(_DWORD *)(*((_QWORD *)this + 4) + 32 * *v10 + 16))
          {
            v10 += 2;
            v11 -= 4;
            if (!v11)
              return result;
          }
          return 1;
        }
      }
    }
  }
  return 0;
}

double llvm::TargetSchedModel::computeReciprocalThroughput(llvm::TargetSchedModel *this, const llvm::MachineInstr *a2, double a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;

  if (byte_1ED830488 && *((_QWORD *)this + 21))
    return llvm::MCSchedModel::getReciprocalThroughput(*(unsigned __int16 *)(*((_QWORD *)a2 + 2) + 6), (uint64_t)this + 72);
  if (!byte_1ED8303C8)
    return 0.0;
  v7 = *((_QWORD *)this + 5);
  if (!v7)
    return 0.0;
  v8 = *((_QWORD *)this + 22);
  v9 = *(unsigned __int16 *)(*((_QWORD *)a2 + 2) + 6);
  v10 = (_WORD *)(v7 + 24 * v9);
  if ((v10[4] & 0x1FFF) == 0x1FFE)
  {
    do
    {
      v11 = (*(uint64_t (**)(_QWORD, uint64_t, const llvm::MachineInstr *, llvm::TargetSchedModel *))(**((_QWORD **)this + 22) + 200))(*((_QWORD *)this + 22), v9, a2, this);
      v9 = v11;
      v12 = *((_QWORD *)this + 5);
    }
    while ((*(_WORD *)(v12 + 24 * v11 + 8) & 0x1FFF) == 0x1FFE);
    v10 = (_WORD *)(v12 + 24 * v11);
  }
  return llvm::MCSchedModel::getReciprocalThroughput(v8, v10, a3, a4);
}

double llvm::TargetSchedModel::computeReciprocalThroughput(llvm::TargetSchedModel *this, unsigned int a2, double a3, double a4)
{
  uint64_t v5;

  if (byte_1ED830488 && *((_QWORD *)this + 21))
    return llvm::MCSchedModel::getReciprocalThroughput(*(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8) + 48 * a2 + 6), (uint64_t)this + 72);
  if (byte_1ED8303C8)
  {
    v5 = *((_QWORD *)this + 5);
    if (v5)
    {
      if ((~*(unsigned __int16 *)(v5
                                 + 24
                                 * *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8) + 48 * a2 + 6)
                                 + 8) & 0x1FFE) != 0)
        return llvm::MCSchedModel::getReciprocalThroughput(*((_QWORD *)this + 22), (_WORD *)(v5 + 24 * *(unsigned __int16 *)(*(_QWORD *)(*((_QWORD *)this + 23) + 8) + 48 * a2 + 6)), a3, a4);
    }
  }
  return 0.0;
}

double llvm::TargetSchedModel::computeReciprocalThroughput(llvm::TargetSchedModel *a1, unsigned int *a2, double a3, double a4)
{
  if (byte_1ED8303C8 && *((_QWORD *)a1 + 5))
    return llvm::MCSchedModel::getReciprocalThroughput((uint64_t)a1, *((_QWORD *)a1 + 22), (_QWORD *)(*((_QWORD *)a1 + 23) + 8), a2, a3, a4);
  else
    return llvm::TargetSchedModel::computeReciprocalThroughput(a1, *a2, a3, a4);
}

uint64_t sub_1C52CADD8()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  v4 = 1;
  v2 = 1;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Use TargetSchedModel for latency lookup";
  v1.n128_u64[1] = 39;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED830348, "schedmodel", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED830348, &dword_1C475E000);
  v4 = 1;
  v2 = 1;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Use InstrItineraryData for latency lookup";
  v1.n128_u64[1] = 41;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED830408, "scheditins", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED830408, &dword_1C475E000);
}

_QWORD *llvm::TargetSubtargetInfo::TargetSubtargetInfo(uint64_t a1, __int128 *a2, void *a3, size_t a4, void *a5, size_t a6, const void *a7, size_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _QWORD *result;

  result = (_QWORD *)llvm::MCSubtargetInfo::MCSubtargetInfo(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  *result = &off_1E814D130;
  return result;
}

{
  _QWORD *result;

  result = (_QWORD *)llvm::MCSubtargetInfo::MCSubtargetInfo(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  *result = &off_1E814D130;
  return result;
}

uint64_t llvm::TargetSubtargetInfo::enableJoinGlobalCopies(llvm::TargetSubtargetInfo *this)
{
  return (*(uint64_t (**)(llvm::TargetSubtargetInfo *))(*(_QWORD *)this + 232))(this);
}

uint64_t llvm::TargetSubtargetInfo::enablePostRAScheduler(llvm::TargetSubtargetInfo *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 20) + 24);
}

uint64_t llvm::TargetSubtargetInfo::useAA(llvm::TargetSubtargetInfo *this)
{
  return 0;
}

uint64_t sub_1C52CAF28(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Type Promotion";
  *(_QWORD *)(v2 + 8) = 14;
  *(_QWORD *)(v2 + 16) = "type-promotion";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2F90;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C52CB04C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

double llvm::createTypePromotionPass(llvm *this)
{
  uint64_t v1;
  double result;

  v1 = operator new();
  *(_QWORD *)(v1 + 8) = 0;
  *(_QWORD *)(v1 + 16) = &unk_1EF8F2F90;
  *(_DWORD *)(v1 + 24) = 2;
  *(_QWORD *)v1 = &off_1E814D2F0;
  *(_QWORD *)(v1 + 36) = 0;
  *(_QWORD *)(v1 + 28) = 0;
  *(_QWORD *)(v1 + 48) = v1 + 80;
  *(_QWORD *)(v1 + 56) = v1 + 80;
  *(_QWORD *)(v1 + 64) = 16;
  *(_DWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 208) = v1 + 240;
  *(_QWORD *)(v1 + 216) = v1 + 240;
  *(_QWORD *)(v1 + 224) = 8;
  *(_DWORD *)(v1 + 232) = 0;
  *(_QWORD *)(v1 + 304) = v1 + 336;
  *(_QWORD *)(v1 + 312) = v1 + 336;
  *(_QWORD *)&result = 4;
  *(_QWORD *)(v1 + 320) = 4;
  *(_DWORD *)(v1 + 328) = 0;
  return result;
}

double sub_1C52CB04C()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8F2F90;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E814D2F0;
  *(_QWORD *)(v0 + 36) = 0;
  *(_QWORD *)(v0 + 28) = 0;
  *(_QWORD *)(v0 + 48) = v0 + 80;
  *(_QWORD *)(v0 + 56) = v0 + 80;
  *(_QWORD *)(v0 + 64) = 16;
  *(_DWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 208) = v0 + 240;
  *(_QWORD *)(v0 + 216) = v0 + 240;
  *(_QWORD *)(v0 + 224) = 8;
  *(_DWORD *)(v0 + 232) = 0;
  *(_QWORD *)(v0 + 304) = v0 + 336;
  *(_QWORD *)(v0 + 312) = v0 + 336;
  *(_QWORD *)&result = 4;
  *(_QWORD *)(v0 + 320) = 4;
  *(_DWORD *)(v0 + 328) = 0;
  return result;
}

void sub_1C52CB0E4(llvm::Pass *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E814D2F0;
  v2 = (void *)*((_QWORD *)this + 39);
  if (v2 != *((void **)this + 38))
    free(v2);
  v3 = (void *)*((_QWORD *)this + 27);
  if (v3 != *((void **)this + 26))
    free(v3);
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4 != *((void **)this + 6))
    free(v4);
  llvm::Pass::~Pass(this);
}

void sub_1C52CB144(llvm::Pass *this)
{
  void *v2;
  void *v3;
  void *v4;

  *(_QWORD *)this = &off_1E814D2F0;
  v2 = (void *)*((_QWORD *)this + 39);
  if (v2 != *((void **)this + 38))
    free(v2);
  v3 = (void *)*((_QWORD *)this + 27);
  if (v3 != *((void **)this + 26))
    free(v3);
  v4 = (void *)*((_QWORD *)this + 7);
  if (v4 != *((void **)this + 6))
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C52CB1B8()
{
  return "Type Promotion";
}

void sub_1C52CB1C8(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::TargetTransformInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::TargetPassConfig::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C52CB20C(uint64_t a1, const llvm::Function *a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t AnalysisPass;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *i;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  unint64_t v39;
  llvm::Type *v40;
  unsigned int ExtendedSizeInBits;
  unsigned int v42;
  void *v43;
  void *v44;
  _QWORD *v45;
  char v46;
  char *v47;
  char *v48;
  unsigned int v49;
  uint64_t v50;
  BOOL v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned __int8 *v66;
  unsigned int v67;
  unsigned __int8 *v68;
  int v69;
  unsigned int v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  char v76;
  int v77;
  uint64_t v78;
  unsigned __int8 **v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t m;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  unsigned int v88;
  void *v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  void *v93;
  unsigned __int8 *v94;
  llvm::UndefValue *v95;
  uint64_t v96;
  void **v97;
  _DWORD *v98;
  int v99;
  int v100;
  uint64_t v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  _QWORD *v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  BOOL v110;
  uint64_t v111;
  unint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  int v115;
  _DWORD *v116;
  uint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  _QWORD *v120;
  int v121;
  uint64_t **v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  void **v126;
  void **v127;
  uint64_t *v128;
  _QWORD *v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  BOOL v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t j;
  uint64_t v143;
  llvm::Instruction *v144;
  unsigned int v145;
  BOOL v146;
  uint64_t v147;
  uint64_t *v149;
  void **v150;
  _DWORD *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  unint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  unsigned __int8 *v159;
  int v160;
  _QWORD *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  llvm::UndefValue *v166;
  int v167;
  _DWORD *v168;
  _DWORD *v169;
  uint64_t v170;
  int v171;
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  _DWORD *v176;
  unsigned __int8 **v177;
  unsigned __int8 **v178;
  unsigned __int8 *v179;
  unsigned __int8 *v180;
  unsigned __int8 *v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int PrimitiveSizeInBits;
  const llvm::APInt *v185;
  unint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  llvm::ConstantInt *v189;
  unsigned int v190;
  unsigned int v191;
  unint64_t v192;
  llvm::ValueHandleBase *v193;
  llvm::ValueHandleBase *v194;
  _QWORD *v195;
  unsigned __int8 *v196;
  BOOL v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  unint64_t v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  int v207;
  uint64_t v208;
  uint64_t v209;
  unsigned __int8 *v210;
  _QWORD *v211;
  unsigned __int8 *v212;
  unsigned __int8 *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  _QWORD *v222;
  int v223;
  char *v224;
  unsigned __int8 *v225;
  unsigned __int8 *v226;
  int v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  char **v232;
  uint64_t v233;
  _QWORD *v234;
  int v235;
  unsigned __int8 **v236;
  unsigned __int8 *v237;
  unsigned __int8 *v238;
  int v239;
  char *v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t *v245;
  uint64_t v246;
  llvm::UndefValue **v247;
  uint64_t v248;
  char *v249;
  uint64_t *v250;
  unsigned __int8 *v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t *v256;
  char *v257;
  unint64_t v258;
  int v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  _QWORD **v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  unint64_t *v267;
  unint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void *v272;
  _DWORD *v273;
  int v274;
  void *v275;
  void *v276;
  void *v277;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unsigned int v285;
  int v286;
  unsigned int v287;
  void *v288;
  unsigned int v289;
  int v290;
  unsigned int v291;
  void *v292;
  unsigned int v293;
  int v294;
  unsigned int v295;
  void *v296;
  unsigned int v297;
  int v298;
  unsigned int v299;
  void *v300;
  unsigned int v301;
  int v302;
  unsigned int v303;
  void *v304;
  unsigned int v305;
  int v306;
  unsigned int v307;
  void *v308;
  llvm::ConstantInt *v309;
  llvm::ValueHandleBase *v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  void **v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void **v319;
  unint64_t v320;
  uint64_t k;
  _QWORD *v322;
  char v323;
  uint64_t v324;
  unsigned int v325;
  llvm::Instruction *v326;
  llvm::Instruction *v327;
  llvm::Instruction *v328;
  uint64_t v329;
  _QWORD *v330;
  _QWORD *v331;
  __int128 v332;
  unsigned __int8 *v333;
  __int128 v334;
  uint64_t *v335;
  uint64_t *v336;
  uint64_t *v337;
  _QWORD *v338;
  llvm::UndefValue *v339;
  char *v340;
  char *v341;
  uint64_t v342;
  int v343;
  _BYTE v344[64];
  unint64_t *v345;
  unint64_t *v346;
  uint64_t v347;
  int v348;
  _BYTE v349[32];
  _QWORD v350[2];
  unsigned int v351;
  _BYTE *v352;
  _BYTE *v353;
  uint64_t v354;
  int v355;
  _BYTE v356[64];
  unsigned __int8 *v357;
  void *v358;
  uint64_t v359;
  int v360;
  _BYTE v361[32];
  uint64_t v362[2];
  int v363;
  void *__p;
  char *v365;
  uint64_t v366;
  _QWORD v367[2];
  int v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  _QWORD v372[2];
  int v373;
  void *v374;
  void *v375;
  uint64_t v376;
  _QWORD v377[2];
  int v378;
  void *v379;
  _QWORD *v380;
  uint64_t v381;
  unsigned __int8 *v382;
  unsigned __int8 *v383;
  void **v384;
  __int16 v385;
  unint64_t v386;
  unsigned int v387;
  void *v388;
  uint64_t v389;
  _BYTE v390[32];
  uint64_t v391;
  unsigned __int8 *v392;
  uint64_t v393;
  void **v394;
  _QWORD *v395;
  uint64_t v396;
  int v397;
  __int16 v398;
  char v399;
  uint64_t v400;
  uint64_t v401;
  void *v402;
  _QWORD v403[3];

  v403[1] = *MEMORY[0x1E0C80C00];
  LOBYTE(v5) = 0;
  if ((llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, a2) & 1) == 0 && !byte_1ED803708)
  {
    AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::TargetPassConfig::ID, 1);
    if (!AnalysisPass)
    {
      LOBYTE(v5) = 0;
      return v5 & 1;
    }
    v5 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID);
    if (v5)
    {
      v7 = *(void **)(a1 + 56);
      if (v7 != *(void **)(a1 + 48))
      {
        v279 = *(unsigned int *)(a1 + 64);
        if (v279 >= 0x21 && 4 * (*(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 72)) < v279)
        {
          free(v7);
          v285 = *(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 72);
          v286 = 1 << (33 - __clz(v285 - 1));
          *(_DWORD *)(a1 + 68) = 0;
          *(_DWORD *)(a1 + 72) = 0;
          if (v285 <= 0x10)
            v287 = 32;
          else
            v287 = v286;
          *(_DWORD *)(a1 + 64) = v287;
          v288 = malloc_type_malloc(8 * v287, 0x4065EBACuLL);
          if (!v288)
            goto LABEL_517;
          *(_QWORD *)(a1 + 56) = v288;
          memset(v288, 255, 8 * *(unsigned int *)(a1 + 64));
LABEL_7:
          v8 = *(void **)(a1 + 216);
          if (v8 != *(void **)(a1 + 208))
          {
            v280 = *(unsigned int *)(a1 + 224);
            if (v280 >= 0x21 && 4 * (*(_DWORD *)(a1 + 228) - *(_DWORD *)(a1 + 232)) < v280)
            {
              free(v8);
              v289 = *(_DWORD *)(a1 + 228) - *(_DWORD *)(a1 + 232);
              v290 = 1 << (33 - __clz(v289 - 1));
              *(_DWORD *)(a1 + 228) = 0;
              *(_DWORD *)(a1 + 232) = 0;
              if (v289 <= 0x10)
                v291 = 32;
              else
                v291 = v290;
              *(_DWORD *)(a1 + 224) = v291;
              v292 = malloc_type_malloc(8 * v291, 0x4065EBACuLL);
              if (!v292)
                goto LABEL_517;
              *(_QWORD *)(a1 + 216) = v292;
              memset(v292, 255, 8 * *(unsigned int *)(a1 + 224));
LABEL_9:
              v9 = *(void **)(a1 + 312);
              if (v9 != *(void **)(a1 + 304))
              {
                v281 = *(unsigned int *)(a1 + 320);
                if (v281 >= 0x21
                  && 4 * (*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328)) < v281)
                {
                  free(v9);
                  v293 = *(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328);
                  v294 = 1 << (33 - __clz(v293 - 1));
                  if (v293 <= 0x10)
                    v295 = 32;
                  else
                    v295 = v294;
                  *(_DWORD *)(a1 + 320) = v295;
                  *(_QWORD *)(a1 + 324) = 0;
                  v296 = malloc_type_malloc(8 * v295, 0x4065EBACuLL);
                  if (!v296)
                    goto LABEL_517;
                  *(_QWORD *)(a1 + 312) = v296;
                  memset(v296, 255, 8 * *(unsigned int *)(a1 + 320));
LABEL_11:
                  v10 = *((_QWORD *)a2 + 5);
                  v11 = (*(uint64_t (**)(_QWORD, const llvm::Function *))(**(_QWORD **)(v5 + 112) + 16))(*(_QWORD *)(v5 + 112), a2);
                  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 120))(v11);
                  v13 = **(void ****)(a1 + 8);
                  do
                  {
                    v14 = *v13;
                    v13 += 2;
                  }
                  while (v14 != &llvm::TargetTransformInfoWrapperPass::ID);
                  v15 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::TargetTransformInfoWrapperPass::ID);
                  v333 = 0;
                  *(_QWORD *)&v334 = 0;
                  DWORD2(v334) = 0;
                  v335 = 0;
                  v336 = 0;
                  LODWORD(v337) = 0;
                  v338 = 0;
                  v339 = 0;
                  LODWORD(v340) = 0;
                  v16 = *(_QWORD *)(v15 + 56);
                  if (v16)
                  {
                    v2 = (uint64_t *)&v335;
                    (*(void (**)(void **__return_ptr, uint64_t, const llvm::Function *))(*(_QWORD *)v16 + 48))(&v388, v16, a2);
                    v17 = v388;
                    if (!*(_BYTE *)(v15 + 72))
                    {
                      *(_QWORD *)(v15 + 64) = v388;
                      *(_BYTE *)(v15 + 72) = 1;
                      goto LABEL_17;
                    }
                    v388 = 0;
                    v18 = *(_QWORD *)(v15 + 64);
                    *(_QWORD *)(v15 + 64) = v17;
                    if (!v18
                      || ((*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18), v19 = v388, v388 = 0, !v19))
                    {
LABEL_17:
                      MEMORY[0x1CAA32FB4](0, 8);
                      sub_1C4D8B440(v2);
                      sub_1C4D8B52C((uint64_t *)&v333);
                      *(_DWORD *)(a1 + 40) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v15 + 64) + 696))(*(_QWORD *)(v15 + 64), 0);
                      *(_QWORD *)(a1 + 32) = **((_QWORD **)a2 + 5);
                      v20 = (_QWORD *)((char *)a2 + 72);
                      v21 = (_QWORD *)*((_QWORD *)a2 + 10);
                      if (v21 != v20)
                      {
                        v323 = 0;
                        v329 = v10 + 272;
                        v322 = (_QWORD *)(a1 + 324);
                        v324 = v12;
                        v330 = v20;
                        while (1)
                        {
                          v22 = v21 - 3;
                          if (!v21)
                            v22 = 0;
                          v23 = v22 + 5;
                          for (i = (_QWORD *)v22[6]; i != v23; i = (_QWORD *)i[1])
                          {
                            if (i)
                              v25 = (uint64_t)(i - 3);
                            else
                              v25 = 0;
                            v26 = sub_1C477672C(a1 + 48, v25);
                            v27 = *(_QWORD *)(a1 + 56);
                            if (v27 == *(_QWORD *)(a1 + 48))
                              v28 = 68;
                            else
                              v28 = 64;
                            if (v26 == (_QWORD *)(v27 + 8 * *(unsigned int *)(a1 + v28))
                              && *(_BYTE *)(v25 + 16) == 81
                              && (*(_WORD *)(v25 + 18) & 0x3Eu) - 38 >= 4
                              && *(_BYTE *)(**(_QWORD **)(v25 - 64) + 8) == 13)
                            {
                              v29 = *(_DWORD *)(v25 + 20);
                              if ((v29 & 0x40000000) != 0)
                              {
                                v31 = *(uint64_t ***)(v25 - 8);
                                v30 = v29 & 0x7FFFFFF;
                                if (!v30)
                                  continue;
                              }
                              else
                              {
                                v30 = v29 & 0x7FFFFFF;
                                v31 = (uint64_t **)(v25 - 32 * v30);
                                if (!v30)
                                  continue;
                              }
                              v32 = 32 * v30;
                              while (1)
                              {
                                v33 = *v31;
                                if (*v31 && *((unsigned __int8 *)*v31 + 16) >= 0x1Cu)
                                  break;
                                v31 += 4;
                                v32 -= 32;
                                if (!v32)
                                  goto LABEL_50;
                              }
                              v331 = v21;
                              v35 = sub_1C47A7FD0(v12, v329, *v33, 0);
                              v37 = v35;
                              v38 = v36;
                              if ((_BYTE)v35 && *(_QWORD *)(v12 + 8 * v35 + 96)
                                || (llvm::TargetLoweringBase::getTypeConversion(v12, **(llvm::EVT ***)v25, v35, v36, (uint64_t)&v333), v333 != 1))
                              {
                                v20 = v330;
                                v21 = v331;
                                continue;
                              }
                              llvm::TargetLoweringBase::getTypeConversion(v12, **(llvm::EVT ***)v25, v37, v38, (uint64_t)&v333);
                              v332 = v334;
                              v39 = *(unsigned int *)(a1 + 40);
                              v40 = (_BYTE)v334
                                  ? (llvm::Type *)sub_1C47A8C74((unsigned __int8 *)&v332)
                                  : llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v332);
                              v12 = v324;
                              v20 = v330;
                              v21 = v331;
                              if ((unint64_t)v40 <= v39)
                              {
                                if ((_BYTE)v332)
                                  ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v332);
                                else
                                  ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v332);
                                v42 = ExtendedSizeInBits;
                                v382 = (unsigned __int8 *)v33;
                                v316 = *v33;
                                *(_DWORD *)(a1 + 28) = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)*v33);
                                v43 = *(void **)(a1 + 216);
                                if (v43 == *(void **)(a1 + 208))
                                {
LABEL_57:
                                  *(_DWORD *)(a1 + 228) = 0;
                                  *(_DWORD *)(a1 + 232) = 0;
                                  goto LABEL_58;
                                }
                                v84 = *(unsigned int *)(a1 + 224);
                                if (v84 < 0x21
                                  || 4 * (*(_DWORD *)(a1 + 228) - *(_DWORD *)(a1 + 232)) >= v84)
                                {
                                  memset(v43, 255, 8 * v84);
                                  goto LABEL_57;
                                }
                                free(v43);
                                v86 = *(_DWORD *)(a1 + 228) - *(_DWORD *)(a1 + 232);
                                v87 = 1 << (33 - __clz(v86 - 1));
                                *(_DWORD *)(a1 + 228) = 0;
                                *(_DWORD *)(a1 + 232) = 0;
                                if (v86 <= 0x10)
                                  v88 = 32;
                                else
                                  v88 = v87;
                                *(_DWORD *)(a1 + 224) = v88;
                                v89 = malloc_type_malloc(8 * v88, 0x4065EBACuLL);
                                if (v89)
                                {
                                  *(_QWORD *)(a1 + 216) = v89;
                                  memset(v89, 255, 8 * *(unsigned int *)(a1 + 224));
LABEL_58:
                                  v44 = *(void **)(a1 + 312);
                                  if (v44 == *(void **)(a1 + 304))
                                  {
LABEL_59:
                                    *v322 = 0;
LABEL_60:
                                    if (!sub_1C52CD250(a1, (uint64_t)v382)
                                      || !sub_1C52CD418(a1, v382)
                                      || !sub_1C52CD484((_QWORD *)a1, (uint64_t)v382))
                                    {
                                      continue;
                                    }
                                    v377[1] = 0;
                                    v377[0] = 0;
                                    v378 = 0;
                                    v380 = 0;
                                    v381 = 0;
                                    v379 = 0;
                                    v372[1] = 0;
                                    v372[0] = 0;
                                    v373 = 0;
                                    v375 = 0;
                                    v376 = 0;
                                    v374 = 0;
                                    v367[1] = 0;
                                    v367[0] = 0;
                                    v368 = 0;
                                    v370 = 0;
                                    v371 = 0;
                                    v369 = 0;
                                    v362[1] = 0;
                                    v362[0] = 0;
                                    v363 = 0;
                                    v365 = 0;
                                    v366 = 0;
                                    __p = 0;
                                    sub_1C4D954B8(v377, &v382);
                                    v45 = v380;
                                    v312 = v42;
                                    if (v379 == v380)
                                    {
LABEL_64:
                                      v46 = 0;
                                      v357 = v361;
                                      v358 = v361;
                                      v359 = 4;
                                      v360 = 0;
                                      v47 = (char *)__p;
                                      v48 = v365;
                                      if (__p == v365)
                                        goto LABEL_439;
                                      v49 = 0;
                                      v325 = 0;
                                      while (1)
                                      {
                                        v50 = *(_QWORD *)v47;
                                        if (*(_QWORD *)v47)
                                          v51 = *(unsigned __int8 *)(*(_QWORD *)v47 + 16) >= 0x1Cu;
                                        else
                                          v51 = 0;
                                        if (v51)
                                          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v357, *(_QWORD *)(v50 + 40));
                                        if (!v373)
                                          goto LABEL_88;
                                        v52 = (v373 - 1) & ((v50 >> 4) ^ (v50 >> 9));
                                        v53 = *(_QWORD *)(v372[0] + 8 * v52);
                                        if (v50 != v53)
                                          break;
LABEL_74:
                                        if (!v50 || *(_BYTE *)(v50 + 16) != 21)
                                          goto LABEL_97;
                                        v54 = *(_QWORD *)(*(_QWORD *)(v50 + 24) + 112);
                                        if (v54
                                          && (v55 = (*(_DWORD *)(v50 + 32) + 2),
                                              v55 < *(_DWORD *)(v54 + 8)))
                                        {
                                          v57 = v54 + 40;
                                          v58 = *(_QWORD *)(v57 + 8 * v55);
                                          if (v58 && (*(_BYTE *)(v58 + 20) & 8) != 0)
                                            goto LABEL_97;
                                          v56 = *(_QWORD *)(v57 + 8 * v55);
                                          if (v56)
                                            LODWORD(v56) = *(_BYTE *)(v56 + 18) & 1;
                                        }
                                        else
                                        {
                                          LODWORD(v56) = 0;
                                        }
                                        v49 += v56 ^ 1;
LABEL_97:
                                        v47 += 8;
                                        if (v47 == v48)
                                        {
                                          if (v325 < 2
                                            || HIDWORD(v359) - v360 == 1
                                            && v49 > *(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328))
                                          {
                                            v46 = 0;
                                            goto LABEL_439;
                                          }
                                          v94 = *(unsigned __int8 **)(a1 + 32);
                                          v333 = v94;
                                          *(_QWORD *)&v334 = v316;
                                          DWORD2(v334) = v312;
                                          v335 = v362;
                                          v336 = v372;
                                          v337 = v367;
                                          v338 = (_QWORD *)(a1 + 304);
                                          v339 = 0;
                                          v340 = v344;
                                          v341 = v344;
                                          v342 = 8;
                                          v343 = 0;
                                          v345 = (unint64_t *)v349;
                                          v346 = (unint64_t *)v349;
                                          v347 = 4;
                                          v348 = 0;
                                          v350[0] = 0;
                                          v350[1] = 0;
                                          v351 = 0;
                                          v352 = v356;
                                          v353 = v356;
                                          v354 = 8;
                                          v355 = 0;
                                          LODWORD(v388) = v312;
                                          if (v312 <= 63)
                                          {
                                            if (v312 > 31)
                                            {
                                              if (v312 == 32)
                                              {
                                                v95 = (llvm::UndefValue *)(*(_QWORD *)v94 + 1960);
                                                goto LABEL_175;
                                              }
                                              goto LABEL_455;
                                            }
                                            if (v312 == 16)
                                            {
                                              v95 = (llvm::UndefValue *)(*(_QWORD *)v94 + 1936);
                                            }
                                            else
                                            {
                                              if (v312 != 8)
                                              {
                                                v21 = v331;
                                                if (v312 != 1)
                                                  goto LABEL_455;
                                                v95 = (llvm::UndefValue *)(*(_QWORD *)v94 + 1888);
                                                goto LABEL_175;
                                              }
                                              v95 = (llvm::UndefValue *)(*(_QWORD *)v94 + 1912);
                                            }
                                            v21 = v331;
                                            goto LABEL_175;
                                          }
                                          if (v312 == 64)
                                          {
                                            v95 = (llvm::UndefValue *)(*(_QWORD *)v94 + 1984);
                                            goto LABEL_175;
                                          }
                                          if (v312 == 128)
                                          {
                                            v95 = (llvm::UndefValue *)(*(_QWORD *)v94 + 2008);
                                            goto LABEL_175;
                                          }
LABEL_455:
                                          v273 = sub_1C5270984(*(_QWORD *)v94 + 2168, &v388);
                                          v95 = (llvm::UndefValue *)*((_QWORD *)v273 + 1);
                                          if (!v95)
                                          {
                                            v95 = (llvm::UndefValue *)sub_1C484358C(*(_QWORD *)v94 + 2040, 24, 3);
                                            v274 = (int)v388;
                                            *(_QWORD *)v95 = v94;
                                            *((_QWORD *)v95 + 2) = 0;
                                            *((_QWORD *)v95 + 1) = (v274 << 8) | 0xDu;
                                            *((_QWORD *)v273 + 1) = v95;
                                          }
LABEL_175:
                                          v339 = v95;
                                          v97 = (void **)v337[3];
                                          v96 = v337[4];
                                          v313 = v96;
                                          while (v97 != (void **)v96)
                                          {
                                            v98 = *v97;
                                            v99 = *((unsigned __int8 *)*v97 + 16);
                                            v326 = (llvm::Instruction *)v97;
                                            if (*v97 && v99 == 84)
                                            {
                                              v100 = v98[5];
                                              v101 = v100 & 0x7FFFFFF;
                                              v102 = &v98[-8 * v101];
                                              if (v100 < 0)
                                              {
                                                v125 = *((_QWORD *)v102 - 1);
                                                if ((v125 & 0xFFFFFFFF0) != 0)
                                                  v103 = (*(v102 - 3) - *(_DWORD *)((char *)v102 - v125));
                                                else
                                                  v103 = 0;
                                                v21 = v331;
                                              }
                                              else
                                              {
                                                v103 = 0;
                                              }
                                              if (v102 != &v98[-8 * v103 - 8])
                                              {
                                                v317 = 32 * ~v103;
                                                v104 = -32 * v101;
                                                do
                                                {
                                                  v105 = *(uint64_t **)&v98[(unint64_t)v104 / 4];
                                                  v388 = v98;
                                                  v106 = sub_1C621CDEC((uint64_t)v350, (uint64_t *)&v388);
                                                  v107 = v106;
                                                  v108 = *v105;
                                                  v109 = *((unsigned int *)v106 + 4);
                                                  if (v109 >= *((unsigned int *)v106 + 5))
                                                  {
                                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v106 + 1), (uint64_t)(v106 + 3), v109 + 1, 8);
                                                    v109 = *((unsigned int *)v107 + 4);
                                                  }
                                                  *(_QWORD *)(v107[1] + 8 * v109) = v108;
                                                  ++*((_DWORD *)v107 + 4);
                                                  v104 += 32;
                                                }
                                                while (v317 != v104);
                                              }
                                            }
                                            else
                                            {
                                              if (v98)
                                                v110 = v99 == 31;
                                              else
                                                v110 = 0;
                                              if (v110)
                                              {
                                                v388 = *v97;
                                                v119 = sub_1C621CDEC((uint64_t)v350, (uint64_t *)&v388);
                                                v120 = v119;
                                                v121 = v98[5];
                                                if ((v121 & 0x40000000) != 0)
                                                  v122 = (uint64_t **)*((_QWORD *)v98 - 1);
                                                else
                                                  v122 = (uint64_t **)&v98[-8 * (v121 & 0x7FFFFFF)];
                                                v123 = **v122;
                                                v124 = *((unsigned int *)v119 + 4);
                                                if (v124 >= *((unsigned int *)v119 + 5))
                                                {
                                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v119 + 1), (uint64_t)(v119 + 3), v124 + 1, 8);
                                                  v124 = *((unsigned int *)v120 + 4);
                                                }
                                                *(_QWORD *)(v120[1] + 8 * v124) = v123;
                                                ++*((_DWORD *)v120 + 4);
                                              }
                                              else if ((v98[5] & 0x7FFFFFF) != 0)
                                              {
                                                v111 = 0;
                                                v112 = 0;
                                                do
                                                {
                                                  v388 = v98;
                                                  v113 = sub_1C621CDEC((uint64_t)v350, (uint64_t *)&v388);
                                                  v114 = v113;
                                                  v115 = v98[5];
                                                  if ((v115 & 0x40000000) != 0)
                                                    v116 = (_DWORD *)*((_QWORD *)v98 - 1);
                                                  else
                                                    v116 = &v98[-8 * (v115 & 0x7FFFFFF)];
                                                  v117 = **(_QWORD **)&v116[v111];
                                                  v118 = *((unsigned int *)v113 + 4);
                                                  if (v118 >= *((unsigned int *)v113 + 5))
                                                  {
                                                    v318 = v117;
                                                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v113 + 1), (uint64_t)(v113 + 3), v118 + 1, 8);
                                                    v117 = v318;
                                                    v118 = *((unsigned int *)v114 + 4);
                                                  }
                                                  *(_QWORD *)(v114[1] + 8 * v118) = v117;
                                                  ++*((_DWORD *)v114 + 4);
                                                  ++v112;
                                                  v111 += 8;
                                                }
                                                while (v112 < (v98[5] & 0x7FFFFFFu));
                                              }
                                            }
                                            v97 = (void **)((char *)v326 + 8);
                                            v96 = v313;
                                          }
                                          v126 = (void **)v335[3];
                                          v127 = (void **)v335[4];
                                          while (v126 != v127)
                                          {
                                            v128 = (uint64_t *)*v126;
                                            if (*((_BYTE *)*v126 + 16) == 66)
                                            {
                                              v388 = *v126;
                                              v383 = 0;
                                              if ((sub_1C614F7B0(v336, &v388, &v383) & 1) == 0)
                                              {
                                                v388 = v128;
                                                v129 = sub_1C621CDEC((uint64_t)v350, (uint64_t *)&v388);
                                                v130 = v129;
                                                v131 = *v128;
                                                v132 = *((unsigned int *)v129 + 4);
                                                if (v132 >= *((unsigned int *)v129 + 5))
                                                {
                                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v129 + 1), (uint64_t)(v129 + 3), v132 + 1, 8);
                                                  v132 = *((unsigned int *)v130 + 4);
                                                }
                                                *(_QWORD *)(v130[1] + 8 * v132) = v131;
                                                ++*((_DWORD *)v130 + 4);
                                              }
                                            }
                                            ++v126;
                                          }
                                          v388 = v390;
                                          v389 = 0x200000000;
                                          v393 = (uint64_t)v333;
                                          v394 = &v402;
                                          v395 = v403;
                                          v396 = 0;
                                          v397 = 0;
                                          v398 = 512;
                                          v399 = 7;
                                          v391 = 0;
                                          v392 = 0;
                                          v400 = 0;
                                          v401 = 0;
                                          v402 = &unk_1E8167888;
                                          v403[0] = &unk_1E8167A08;
                                          v383 = (unsigned __int8 *)&v388;
                                          v384 = (void **)&v333;
                                          v133 = v336[3];
                                          v134 = v336[4];
                                          if (v133 != v134)
                                          {
                                            do
                                            {
                                              v135 = *(_QWORD *)v133;
                                              v136 = *(unsigned __int8 *)(*(_QWORD *)v133 + 16);
                                              if (*(_QWORD *)v133)
                                                v137 = v136 >= 0x1C;
                                              else
                                                v137 = 0;
                                              if (v137)
                                              {
                                                v138 = *(_QWORD *)v133;
                                                v144 = *(llvm::Instruction **)v133;
                                              }
                                              else
                                              {
                                                if (v136 == 21)
                                                  v138 = *(_QWORD *)v133;
                                                else
                                                  v138 = 0;
                                                v139 = *(_QWORD *)(*(_QWORD *)(v138 + 24) + 80);
                                                v140 = v139 - 24;
                                                if (!v139)
                                                  v140 = 0;
                                                v141 = v140 + 40;
                                                for (j = *(_QWORD *)(v140 + 48); ; j = *(_QWORD *)(j + 8))
                                                {
                                                  if (j == v141)
                                                    goto LABEL_241;
                                                  v143 = j - 24;
                                                  if (!j)
                                                    v143 = 0;
                                                  if (*(_BYTE *)(v143 + 16) != 83)
                                                    break;
                                                }
                                                v145 = *(unsigned __int8 *)(j - 8) - 38;
                                                v146 = v145 > 0x38;
                                                v147 = (1 << v145) & 0x100060000000001;
                                                if (v146 || v147 == 0)
                                                  v141 = j;
                                                else
                                                  v141 = *(_QWORD *)(j + 8);
LABEL_241:
                                                if (v141)
                                                  v144 = (llvm::Instruction *)(v141 - 24);
                                                else
                                                  v144 = 0;
                                              }
                                              sub_1C52CDC60((uint64_t *)&v383, v138, v144);
                                              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v352, v135);
                                              v133 += 8;
                                            }
                                            while (v133 != v134);
                                            if (v388 != v390)
                                              free(v388);
                                          }
                                          v149 = v335;
                                          v150 = (void **)v335[3];
                                          v319 = (void **)v335[4];
                                          if (v150 == v319)
                                            goto LABEL_288;
                                          while (2)
                                          {
                                            v151 = *v150;
                                            v388 = *v150;
                                            v383 = 0;
                                            if ((sub_1C614F7B0(v336, &v388, &v383) & 1) != 0
                                              || (v388 = v151, v383 = 0, (sub_1C61DB414(v337, &v388, &v383) & 1) != 0))
                                            {
LABEL_256:
                                              if (++v150 == v319)
                                              {
                                                v149 = v335;
LABEL_288:
                                                v388 = v390;
                                                v389 = 0x200000000;
                                                v393 = (uint64_t)v333;
                                                v394 = &v402;
                                                v395 = v403;
                                                v396 = 0;
                                                v397 = 0;
                                                v398 = 512;
                                                v399 = 7;
                                                v391 = 0;
                                                v392 = 0;
                                                v400 = 0;
                                                v401 = 0;
                                                v402 = &unk_1E8167888;
                                                v403[0] = &unk_1E8167A08;
                                                v178 = (unsigned __int8 **)v149[3];
                                                v177 = (unsigned __int8 **)v149[4];
                                                if (v178 != v177)
                                                {
                                                  do
                                                  {
                                                    v179 = *v178;
                                                    if ((*v178)[16] == 66)
                                                    {
                                                      v383 = *v178;
                                                      v386 = 0;
                                                      if ((sub_1C614F7B0(v336, &v383, &v386) & 1) == 0)
                                                      {
                                                        v391 = *((_QWORD *)v179 + 5);
                                                        v392 = v179 + 24;
                                                        v180 = (unsigned __int8 *)*((_QWORD *)v179 + 6);
                                                        v383 = v180;
                                                        if (v180)
                                                        {
                                                          llvm::MetadataTracking::track((uint64_t)&v383, v180, 2);
                                                          v181 = v383;
                                                        }
                                                        else
                                                        {
                                                          v181 = 0;
                                                        }
                                                        sub_1C4774EF4((uint64_t)&v388, 0, (uint64_t)v181);
                                                        if (v383)
                                                          llvm::MetadataTracking::untrack((uint64_t)&v383, v383);
                                                        v182 = **((_QWORD **)v179 - 4);
                                                        v383 = v179;
                                                        v183 = *(_QWORD *)sub_1C621CDEC((uint64_t)v350, (uint64_t *)&v383)[1];
                                                        if ((*(_DWORD *)(v183 + 8) & 0xFE) == 0x12)
                                                          v183 = **(_QWORD **)(v183 + 16);
                                                        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v183);
                                                        v387 = PrimitiveSizeInBits;
                                                        if (PrimitiveSizeInBits > 0x40)
                                                        {
                                                          llvm::APInt::initSlowCase((llvm::APInt *)&v386, -1, 1);
                                                          PrimitiveSizeInBits = v387;
                                                          v186 = v386;
                                                        }
                                                        else
                                                        {
                                                          if (PrimitiveSizeInBits)
                                                            v186 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
                                                          else
                                                            v186 = 0;
                                                          v386 = v186;
                                                        }
                                                        v187 = (uint64_t *)&v386;
                                                        if (PrimitiveSizeInBits >= 0x41)
                                                          v187 = (uint64_t *)v186;
                                                        v188 = *v187;
                                                        v189 = *(llvm::ConstantInt **)v182;
                                                        v190 = *(_DWORD *)(v182 + 8);
                                                        LODWORD(v384) = v190 >> 8;
                                                        v320 = v186;
                                                        v191 = PrimitiveSizeInBits;
                                                        if (v190 >> 8 > 0x40)
                                                        {
                                                          v309 = v189;
                                                          llvm::APInt::initSlowCase((llvm::APInt *)&v383, v188, 0);
                                                          v189 = v309;
                                                        }
                                                        else
                                                        {
                                                          if (v190 <= 0xFF)
                                                            v192 = 0;
                                                          else
                                                            v192 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v190);
                                                          v383 = (unsigned __int8 *)(v192 & v188);
                                                        }
                                                        v193 = llvm::ConstantInt::get(v189, (llvm::LLVMContext *)&v383, v185);
                                                        if (v384 >= 0x41 && v383)
                                                        {
                                                          v310 = v193;
                                                          MEMORY[0x1CAA32F9C](v383, 0x1000C8000313F17);
                                                          v193 = v310;
                                                        }
                                                        if (v191 >= 0x41 && v320)
                                                        {
                                                          v194 = v193;
                                                          MEMORY[0x1CAA32F9C](v320, 0x1000C8000313F17);
                                                          v193 = v194;
                                                        }
                                                        v195 = (_QWORD *)*((_QWORD *)v179 - 4);
                                                        v385 = 257;
                                                        v196 = (unsigned __int8 *)sub_1C4D89BCC((uint64_t)&v388, v195, (uint64_t)v193, (uint64_t)&v383);
                                                        if (v196)
                                                          v197 = v196[16] >= 0x1Cu;
                                                        else
                                                          v197 = 0;
                                                        if (v197)
                                                          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v340, (uint64_t)v196);
                                                        sub_1C52CDDB0((uint64_t)&v333, (uint64_t)v179, v196);
                                                      }
                                                    }
                                                    ++v178;
                                                  }
                                                  while (v178 != v177);
                                                  if (v388 != v390)
                                                    free(v388);
                                                }
                                                v388 = v390;
                                                v389 = 0x200000000;
                                                v393 = (uint64_t)v333;
                                                v394 = &v402;
                                                v395 = v403;
                                                v396 = 0;
                                                v397 = 0;
                                                v398 = 512;
                                                v399 = 7;
                                                v391 = 0;
                                                v392 = 0;
                                                v400 = 0;
                                                v401 = 0;
                                                v402 = &unk_1E8167888;
                                                v403[0] = &unk_1E8167A08;
                                                v383 = (unsigned __int8 *)&v333;
                                                v384 = &v388;
                                                v198 = v337[3];
                                                v315 = v337[4];
                                                if (v198 != v315)
                                                {
                                                  do
                                                  {
                                                    v199 = *(_QWORD *)v198;
                                                    v200 = *(unsigned __int8 *)(*(_QWORD *)v198 + 16);
                                                    v328 = *(llvm::Instruction **)v198;
                                                    if (*(_QWORD *)v198 && v200 == 84)
                                                    {
                                                      v201 = 0;
                                                      v202 = v199 - 32;
                                                      v311 = v199 - 8;
                                                      v203 = 84;
                                                      v204 = *(_QWORD *)v198;
                                                      for (k = v198; ; v198 = k)
                                                      {
                                                        if (v203 == 84)
                                                        {
                                                          v205 = 0;
                                                        }
                                                        else if (v203 == 39)
                                                        {
                                                          v199 = (uint64_t)v328;
                                                          v205 = (*((_DWORD *)v328 + 20) + 1);
                                                          v21 = v331;
                                                        }
                                                        else
                                                        {
                                                          v205 = 2;
                                                          v21 = v331;
                                                          v199 = (uint64_t)v328;
                                                        }
                                                        v206 = *(_DWORD *)(v199 + 20);
                                                        if (v206 < 0
                                                          && (v219 = v206 & 0x7FFFFFF,
                                                              (*(_QWORD *)(v311 - 32 * v219) & 0xFFFFFFFF0) != 0))
                                                        {
                                                          v208 = -v219;
                                                          v207 = *(_DWORD *)(v199 - 32 * v219 - 12)
                                                               - *(_DWORD *)(v199
                                                                           - 32 * v219
                                                                           - *(_QWORD *)(v199 - 32 * v219 - 8));
                                                        }
                                                        else
                                                        {
                                                          v207 = 0;
                                                          v208 = -(uint64_t)(v206 & 0x7FFFFFF);
                                                        }
                                                        if (v201 >= ((v202
                                                                                   - 32 * v205
                                                                                   + 32
                                                                                   * (unint64_t)-v207
                                                                                   - (v199
                                                                                    + 32 * v208)) >> 5))
                                                          break;
                                                        v209 = v202;
                                                        v210 = *(unsigned __int8 **)(v204 + 32 * v208);
                                                        v386 = v199;
                                                        v211 = sub_1C621CDEC((uint64_t)v350, (uint64_t *)&v386);
                                                        v212 = sub_1C52CDF24(&v383, v210, *(_QWORD *)(v211[1] + 8 * v201));
                                                        v199 = (uint64_t)v328;
                                                        if (v212)
                                                        {
                                                          v213 = v212;
                                                          llvm::Instruction::moveBefore((llvm::Instruction *)v212, v328);
                                                          v199 = (uint64_t)v328;
                                                          v214 = v204 - 32 * (*((_DWORD *)v328 + 5) & 0x7FFFFFF);
                                                          if (*(_QWORD *)v214)
                                                          {
                                                            **(_QWORD **)(v214 + 16) = *(_QWORD *)(v214 + 8);
                                                            v215 = *(_QWORD *)(v214 + 8);
                                                            if (v215)
                                                              *(_QWORD *)(v215 + 16) = *(_QWORD *)(v214 + 16);
                                                          }
                                                          *(_QWORD *)v214 = v213;
                                                          v218 = *((_QWORD *)v213 + 1);
                                                          v217 = (uint64_t *)(v213 + 8);
                                                          v216 = v218;
                                                          *(_QWORD *)(v214 + 8) = v218;
                                                          if (v218)
                                                            *(_QWORD *)(v216 + 16) = v214 + 8;
                                                          *(_QWORD *)(v214 + 16) = v217;
                                                          *v217 = v214;
                                                        }
                                                        ++v201;
                                                        v203 = *(_BYTE *)(v199 + 16);
                                                        v204 += 32;
                                                        v202 = v209;
                                                      }
                                                    }
                                                    else if (v200 == 31)
                                                    {
                                                      v386 = *(_QWORD *)v198;
                                                      v234 = sub_1C621CDEC((uint64_t)v350, (uint64_t *)&v386);
                                                      v235 = *((_DWORD *)v328 + 5);
                                                      if ((v235 & 0x40000000) != 0)
                                                        v236 = (unsigned __int8 **)*((_QWORD *)v328 - 1);
                                                      else
                                                        v236 = (unsigned __int8 **)((char *)v328
                                                                                  - 32 * (v235 & 0x7FFFFFF));
                                                      v237 = sub_1C52CDF24(&v383, *v236, *(_QWORD *)v234[1]);
                                                      if (v237)
                                                      {
                                                        v238 = v237;
                                                        llvm::Instruction::moveBefore((llvm::Instruction *)v237, v328);
                                                        v239 = *((_DWORD *)v328 + 5);
                                                        if ((v239 & 0x40000000) != 0)
                                                          v240 = (char *)*((_QWORD *)v328 - 1);
                                                        else
                                                          v240 = (char *)v328 - 32 * (v239 & 0x7FFFFFF);
                                                        if (*(_QWORD *)v240)
                                                        {
                                                          **((_QWORD **)v240 + 2) = *((_QWORD *)v240 + 1);
                                                          v244 = *((_QWORD *)v240 + 1);
                                                          if (v244)
                                                            *(_QWORD *)(v244 + 16) = *((_QWORD *)v240 + 2);
                                                        }
                                                        *(_QWORD *)v240 = v238;
                                                        v243 = *((_QWORD *)v238 + 1);
                                                        v242 = v238 + 8;
                                                        v241 = v243;
                                                        *((_QWORD *)v240 + 1) = v243;
                                                        if (v243)
                                                          *(_QWORD *)(v241 + 16) = v240 + 8;
                                                        *((_QWORD *)v240 + 2) = v242;
                                                        *v242 = v240;
                                                      }
                                                    }
                                                    else if ((*(_DWORD *)(v199 + 20) & 0x7FFFFFF) != 0)
                                                    {
                                                      v220 = 0;
                                                      v221 = 0;
                                                      do
                                                      {
                                                        v386 = v199;
                                                        v222 = sub_1C621CDEC((uint64_t)v350, (uint64_t *)&v386);
                                                        v223 = *((_DWORD *)v328 + 5);
                                                        if ((v223 & 0x40000000) != 0)
                                                          v224 = (char *)*((_QWORD *)v328 - 1);
                                                        else
                                                          v224 = (char *)v328 - 32 * (v223 & 0x7FFFFFF);
                                                        v225 = sub_1C52CDF24(&v383, *(unsigned __int8 **)&v224[v220], *(_QWORD *)(v222[1] + 8 * v221));
                                                        v199 = (uint64_t)v328;
                                                        if (v225)
                                                        {
                                                          v226 = v225;
                                                          llvm::Instruction::moveBefore((llvm::Instruction *)v225, v328);
                                                          v199 = (uint64_t)v328;
                                                          v227 = *((_DWORD *)v328 + 5);
                                                          if ((v227 & 0x40000000) != 0)
                                                            v228 = (char *)*((_QWORD *)v328 - 1);
                                                          else
                                                            v228 = (char *)v328 - 32 * (v227 & 0x7FFFFFF);
                                                          v229 = &v228[v220];
                                                          if (*(_QWORD *)&v228[v220])
                                                          {
                                                            **((_QWORD **)v229 + 2) = *((_QWORD *)v229 + 1);
                                                            v230 = *((_QWORD *)v229 + 1);
                                                            if (v230)
                                                              *(_QWORD *)(v230 + 16) = *((_QWORD *)v229 + 2);
                                                          }
                                                          *(_QWORD *)v229 = v226;
                                                          v233 = *((_QWORD *)v226 + 1);
                                                          v232 = (char **)(v226 + 8);
                                                          v231 = v233;
                                                          *((_QWORD *)v229 + 1) = v233;
                                                          if (v233)
                                                            *(_QWORD *)(v231 + 16) = v229 + 8;
                                                          *(_QWORD *)&v228[v220 + 16] = v232;
                                                          *v232 = v229;
                                                        }
                                                        ++v221;
                                                        v220 += 32;
                                                      }
                                                      while (v221 < (*(_DWORD *)(v199 + 20) & 0x7FFFFFFu));
                                                    }
                                                    v198 += 8;
                                                  }
                                                  while (v198 != v315);
                                                  if (v388 != v390)
                                                    free(v388);
                                                }
                                                v245 = (uint64_t *)v335[3];
                                                v246 = v335[4];
                                                while (2)
                                                {
                                                  if (v245 == (uint64_t *)v246)
                                                  {
                                                    if (v346 == v345)
                                                      v253 = (uint64_t *)((char *)&v347 + 4);
                                                    else
                                                      v253 = &v347;
                                                    v254 = *(unsigned int *)v253;
                                                    if ((_DWORD)v254)
                                                    {
                                                      v255 = 8 * v254;
                                                      v256 = v346;
                                                      while (*v256 >= 0xFFFFFFFFFFFFFFFELL)
                                                      {
                                                        ++v256;
                                                        v255 -= 8;
                                                        if (!v255)
                                                          goto LABEL_425;
                                                      }
                                                    }
                                                    else
                                                    {
                                                      v256 = v346;
                                                    }
                                                    v257 = (char *)&v346[v254];
                                                    if (v256 != (unint64_t *)v257)
                                                    {
                                                      v258 = *v256;
LABEL_412:
                                                      v259 = *(_DWORD *)(v258 + 20);
                                                      if ((v259 & 0x40000000) != 0)
                                                      {
                                                        v261 = *(_QWORD *)(v258 - 8);
                                                        v260 = v259 & 0x7FFFFFF;
                                                        if (v260)
                                                          goto LABEL_414;
                                                      }
                                                      else
                                                      {
                                                        v260 = v259 & 0x7FFFFFF;
                                                        v261 = v258 - 32 * v260;
                                                        if (v260)
                                                        {
LABEL_414:
                                                          v262 = 32 * v260;
                                                          v263 = (_QWORD **)(v261 + 16);
                                                          do
                                                          {
                                                            if (*(v263 - 2))
                                                            {
                                                              **v263 = *(v263 - 1);
                                                              v264 = (uint64_t)*(v263 - 1);
                                                              if (v264)
                                                                *(_QWORD *)(v264 + 16) = *v263;
                                                            }
                                                            *(v263 - 2) = 0;
                                                            v263 += 4;
                                                            v262 -= 32;
                                                          }
                                                          while (v262);
                                                        }
                                                      }
                                                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v258 + 40) + 40, (uint64_t ***)v258);
                                                      v265 = *(_QWORD *)(v258 + 24);
                                                      v266 = *(_QWORD **)(v258 + 32);
                                                      *v266 = v265;
                                                      *(_QWORD *)(v265 + 8) = v266;
                                                      *(_QWORD *)(v258 + 24) = 0;
                                                      *(_QWORD *)(v258 + 32) = 0;
                                                      llvm::Value::deleteValue((llvm::Value *)v258);
                                                      v267 = v256 + 1;
                                                      while (v267 != (unint64_t *)v257)
                                                      {
                                                        v268 = *v267++;
                                                        v258 = v268;
                                                        if (v268 <= 0xFFFFFFFFFFFFFFFDLL)
                                                        {
                                                          v256 = v267 - 1;
                                                          goto LABEL_412;
                                                        }
                                                      }
                                                    }
LABEL_425:
                                                    if (v353 != v352)
                                                      free(v353);
                                                    v269 = v350[0];
                                                    if (v351)
                                                    {
                                                      v270 = 56 * v351;
                                                      v271 = v350[0] + 24;
                                                      do
                                                      {
                                                        if ((*(_QWORD *)(v271 - 24) | 0x1000) != 0xFFFFFFFFFFFFF000)
                                                        {
                                                          v272 = *(void **)(v271 - 16);
                                                          if ((void *)v271 != v272)
                                                            free(v272);
                                                        }
                                                        v271 += 56;
                                                        v270 -= 56;
                                                      }
                                                      while (v270);
                                                      v269 = v350[0];
                                                    }
                                                    MEMORY[0x1CAA32FB4](v269, 8);
                                                    if (v346 != v345)
                                                      free(v346);
                                                    if (v341 != v340)
                                                      free(v341);
                                                    v46 = 1;
LABEL_439:
                                                    if (v358 != v357)
                                                      free(v358);
                                                    v12 = v324;
LABEL_442:
                                                    v20 = v330;
                                                    if (__p)
                                                    {
                                                      v365 = (char *)__p;
                                                      operator delete(__p);
                                                    }
                                                    MEMORY[0x1CAA32FB4](v362[0], 8);
                                                    sub_1C6176BF8(v367);
                                                    if (v374)
                                                    {
                                                      v375 = v374;
                                                      operator delete(v374);
                                                    }
                                                    MEMORY[0x1CAA32FB4](v372[0], 8);
                                                    if (v379)
                                                    {
                                                      v380 = v379;
                                                      operator delete(v379);
                                                    }
                                                    MEMORY[0x1CAA32FB4](v377[0], 8);
                                                    v323 |= v46;
                                                    goto LABEL_50;
                                                  }
                                                  v247 = (llvm::UndefValue **)*v245;
                                                  if (*(_BYTE *)(*v245 + 16) == 67 && *v247 == v339)
                                                  {
                                                    v248 = (uint64_t)*(v247 - 4);
                                                    if (*(llvm::UndefValue **)v248 == *v247)
                                                    {
                                                      v252 = *v245;
                                                      v251 = (unsigned __int8 *)*(v247 - 4);
LABEL_399:
                                                      sub_1C52CDDB0((uint64_t)&v333, v252, v251);
                                                    }
                                                    else
                                                    {
                                                      v249 = (char *)sub_1C477672C((uint64_t)&v340, (uint64_t)*(v247 - 4));
                                                      if (v341 == v340)
                                                        v250 = (uint64_t *)((char *)&v342 + 4);
                                                      else
                                                        v250 = &v342;
                                                      if (v249 != &v341[8 * *(unsigned int *)v250]
                                                        && *(_BYTE *)(v248 + 16) == 66
                                                        && *(_QWORD *)v248 == (_QWORD)v334)
                                                      {
                                                        v251 = *(unsigned __int8 **)(v248 - 32);
                                                        v252 = (uint64_t)v247;
                                                        goto LABEL_399;
                                                      }
                                                    }
                                                  }
                                                  ++v245;
                                                  continue;
                                                }
                                              }
                                              continue;
                                            }
                                            break;
                                          }
                                          v314 = v150;
                                          v152 = v151[5] & 0x7FFFFFF;
                                          v153 = (uint64_t)v151;
                                          if (!(_DWORD)v152)
                                          {
LABEL_253:
                                            v154 = *(unsigned __int8 *)(v153 + 16);
                                            v150 = v314;
                                            if (v154 != 31 && v154 != 81)
                                            {
                                              *(_QWORD *)v153 = v339;
                                              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v352, v153);
                                            }
                                            goto LABEL_256;
                                          }
                                          v155 = 0;
                                          v156 = 32 * v152;
                                          v327 = (llvm::Instruction *)(32 * v152);
                                          while (2)
                                          {
                                            v157 = *(_DWORD *)(v153 + 20);
                                            if ((v157 & 0x40000000) != 0)
                                              v158 = *(_QWORD *)(v153 - 8);
                                            else
                                              v158 = v153 - 32 * (v157 & 0x7FFFFFF);
                                            v159 = *(unsigned __int8 **)(v158 + v155);
                                            if (*(llvm::UndefValue **)v159 != v339
                                              && *(_BYTE *)(*(_QWORD *)v159 + 8) == 13)
                                            {
                                              v160 = v159[16];
                                              if (v160 == 16)
                                              {
                                                v161 = v338;
                                                v162 = sub_1C477672C((uint64_t)v338, (uint64_t)v151);
                                                v163 = v161[1];
                                                v164 = 20;
                                                if (v163 != *v161)
                                                  v164 = 16;
                                                if (v162 == (_QWORD *)(v163
                                                                      + 8 * *(unsigned int *)((char *)v161 + v164)))
                                                  v165 = 39;
                                                else
                                                  v165 = 40;
                                                v166 = sub_1C537D3B8((llvm *)v165, (uint64_t)v159, v339, 0);
                                                v153 = (uint64_t)v151;
                                                v167 = v151[5];
                                                if ((v167 & 0x40000000) != 0)
                                                  v168 = (_DWORD *)*((_QWORD *)v151 - 1);
                                                else
                                                  v168 = &v151[-8 * (v167 & 0x7FFFFFF)];
                                                v169 = &v168[v155 / 4];
                                                v170 = *(_QWORD *)&v168[v155 / 4];
LABEL_277:
                                                v156 = (uint64_t)v327;
                                                if (v170)
                                                {
                                                  **((_QWORD **)v169 + 2) = *((_QWORD *)v169 + 1);
                                                  v172 = *((_QWORD *)v169 + 1);
                                                  if (v172)
                                                    *(_QWORD *)(v172 + 16) = *((_QWORD *)v169 + 2);
                                                }
                                                *(_QWORD *)v169 = v166;
                                                if (v166)
                                                {
                                                  v175 = *((_QWORD *)v166 + 1);
                                                  v173 = (_QWORD *)((char *)v166 + 8);
                                                  v174 = v175;
                                                  v176 = &v168[v155 / 4];
                                                  *((_QWORD *)v176 + 1) = v175;
                                                  if (v175)
                                                    *(_QWORD *)(v174 + 16) = v176 + 2;
                                                  *((_QWORD *)v176 + 2) = v173;
                                                  *v173 = v169;
                                                }
                                              }
                                              else if ((v160 - 11) <= 1)
                                              {
                                                v166 = llvm::UndefValue::get(v339, (llvm::Type *)v153);
                                                v153 = (uint64_t)v151;
                                                v171 = v151[5];
                                                if ((v171 & 0x40000000) != 0)
                                                  v168 = (_DWORD *)*((_QWORD *)v151 - 1);
                                                else
                                                  v168 = &v151[-8 * (v171 & 0x7FFFFFF)];
                                                v169 = &v168[v155 / 4];
                                                v170 = *(_QWORD *)&v168[v155 / 4];
                                                goto LABEL_277;
                                              }
                                            }
                                            v155 += 32;
                                            if (v156 == v155)
                                              goto LABEL_253;
                                            continue;
                                          }
                                        }
                                      }
                                      v59 = 1;
                                      while (v53 != -4096)
                                      {
                                        v60 = v52 + v59++;
                                        v52 = v60 & (v373 - 1);
                                        v53 = *(_QWORD *)(v372[0] + 8 * v52);
                                        if (v50 == v53)
                                          goto LABEL_74;
                                      }
LABEL_88:
                                      if (v368)
                                      {
                                        v61 = (v368 - 1) & ((v50 >> 4) ^ (v50 >> 9));
                                        v62 = *(_QWORD *)(v367[0] + 8 * v61);
                                        if (v50 == v62)
                                        {
                                          v63 = 0;
LABEL_96:
                                          v325 += v63;
                                          goto LABEL_97;
                                        }
                                        v64 = 1;
                                        while (v62 != -4096)
                                        {
                                          v63 = 0;
                                          v65 = v61 + v64++;
                                          v61 = v65 & (v368 - 1);
                                          v62 = *(_QWORD *)(v367[0] + 8 * v61);
                                          if (v50 == v62)
                                            goto LABEL_96;
                                        }
                                      }
                                      v63 = 1;
                                      goto LABEL_96;
                                    }
                                    while (2)
                                    {
                                      v383 = 0;
                                      v66 = (unsigned __int8 *)*(v45 - 1);
                                      sub_1C52CDB34((uint64_t)v377);
                                      v383 = v66;
                                      if (v363)
                                      {
                                        v67 = (v363 - 1) & ((v66 >> 4) ^ (v66 >> 9));
                                        v68 = *(unsigned __int8 **)(v362[0] + 8 * v67);
                                        if (v66 == v68)
                                          goto LABEL_102;
                                        v69 = 1;
                                        while (v68 != (unsigned __int8 *)-4096)
                                        {
                                          v70 = v67 + v69++;
                                          v67 = v70 & (v363 - 1);
                                          v68 = *(unsigned __int8 **)(v362[0] + 8 * v67);
                                          if (v66 == v68)
                                            goto LABEL_102;
                                        }
                                      }
                                      if (v66[16] > 0x1Bu)
                                      {
LABEL_111:
                                        v71 = sub_1C477672C(a1 + 48, (uint64_t)v66);
                                        v72 = *(_QWORD *)(a1 + 56);
                                        if (v72 == *(_QWORD *)(a1 + 48))
                                          v73 = 68;
                                        else
                                          v73 = 64;
                                        if (v71 != (_QWORD *)(v72 + 8 * *(unsigned int *)(a1 + v73)))
                                        {
LABEL_168:
                                          v46 = 0;
                                          goto LABEL_442;
                                        }
                                        sub_1C4D954B8(v362, &v383);
                                        sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 48), (uint64_t)v383);
                                        v74 = v383;
                                        if (sub_1C52CD950(a1, (uint64_t)v383))
                                        {
                                          v333 = v74;
                                          sub_1C509CEFC(v367, &v333);
                                          v74 = v383;
                                        }
                                        if (sub_1C52CD8A4(a1, v74))
                                          sub_1C4D954B8(v372, &v383);
                                        v75 = v383;
                                        if ((sub_1C52CD950(a1, (uint64_t)v383) & 1) == 0)
                                        {
                                          v76 = sub_1C52CD8A4(a1, v75);
                                          v75 = v383;
                                          if ((v76 & 1) == 0 && v383 && v383[16] >= 0x1Cu)
                                          {
                                            v77 = *((_DWORD *)v383 + 5);
                                            if ((v77 & 0x40000000) != 0)
                                            {
                                              v79 = (unsigned __int8 **)*((_QWORD *)v383 - 1);
                                              v78 = v77 & 0x7FFFFFF;
                                            }
                                            else
                                            {
                                              v78 = v77 & 0x7FFFFFF;
                                              v79 = (unsigned __int8 **)&v383[-32 * v78];
                                            }
                                            if (v78)
                                            {
                                              v80 = 32 * v78;
                                              do
                                              {
                                                v81 = *v79;
                                                v357 = v81;
                                                v333 = v81;
                                                v388 = 0;
                                                if ((sub_1C614F7B0(v362, &v333, &v388) & 1) == 0 && v81[16] != 62)
                                                {
                                                  if (!sub_1C52CD250(a1, (uint64_t)v81)
                                                    || sub_1C52CD418(a1, v81)
                                                    && !sub_1C52CD484((_QWORD *)a1, (uint64_t)v81))
                                                  {
                                                    goto LABEL_168;
                                                  }
                                                  sub_1C4D954B8(v377, &v357);
                                                }
                                                v79 += 4;
                                                v80 -= 32;
                                              }
                                              while (v80);
                                              v75 = v383;
                                            }
                                          }
                                        }
                                        if ((sub_1C52CD8A4(a1, v75) & 1) != 0 || sub_1C52CD418(a1, v383))
                                        {
                                          for (m = *((_QWORD *)v383 + 1); m; m = *(_QWORD *)(m + 8))
                                          {
                                            v83 = *(unsigned __int8 **)(m + 24);
                                            v357 = v83;
                                            v333 = v83;
                                            v388 = 0;
                                            if ((sub_1C614F7B0(v362, &v333, &v388) & 1) == 0 && v83[16] != 62)
                                            {
                                              if (!sub_1C52CD250(a1, (uint64_t)v83)
                                                || sub_1C52CD418(a1, v83)
                                                && !sub_1C52CD484((_QWORD *)a1, (uint64_t)v83))
                                              {
                                                goto LABEL_168;
                                              }
                                              sub_1C4D954B8(v377, &v357);
                                            }
                                          }
                                        }
                                      }
                                      else if (sub_1C52CD8A4(a1, v66))
                                      {
                                        v66 = v383;
                                        goto LABEL_111;
                                      }
LABEL_102:
                                      v45 = v380;
                                      if (v379 == v380)
                                        goto LABEL_64;
                                      continue;
                                    }
                                  }
                                  v85 = *(unsigned int *)(a1 + 320);
                                  if (v85 < 0x21
                                    || 4 * (*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328)) >= v85)
                                  {
                                    memset(v44, 255, 8 * v85);
                                    goto LABEL_59;
                                  }
                                  free(v44);
                                  v90 = *(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328);
                                  v91 = 1 << (33 - __clz(v90 - 1));
                                  if (v90 <= 0x10)
                                    v92 = 32;
                                  else
                                    v92 = v91;
                                  *(_DWORD *)(a1 + 320) = v92;
                                  *v322 = 0;
                                  v93 = malloc_type_malloc(8 * v92, 0x4065EBACuLL);
                                  if (v93)
                                  {
                                    *(_QWORD *)(a1 + 312) = v93;
                                    memset(v93, 255, 8 * *(unsigned int *)(a1 + 320));
                                    goto LABEL_60;
                                  }
                                }
LABEL_517:
                                llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
                              }
                            }
LABEL_50:
                            ;
                          }
                          v21 = (_QWORD *)v21[1];
                          if (v21 == v20)
                            goto LABEL_461;
                        }
                      }
                      v323 = 0;
LABEL_461:
                      v275 = *(void **)(a1 + 56);
                      if (v275 != *(void **)(a1 + 48))
                      {
                        v282 = *(unsigned int *)(a1 + 64);
                        if (v282 >= 0x21
                          && 4 * (*(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 72)) < v282)
                        {
                          free(v275);
                          v297 = *(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 72);
                          v298 = 1 << (33 - __clz(v297 - 1));
                          *(_DWORD *)(a1 + 68) = 0;
                          *(_DWORD *)(a1 + 72) = 0;
                          if (v297 <= 0x10)
                            v299 = 32;
                          else
                            v299 = v298;
                          *(_DWORD *)(a1 + 64) = v299;
                          v300 = malloc_type_malloc(8 * v299, 0x4065EBACuLL);
                          if (!v300)
                            goto LABEL_517;
                          *(_QWORD *)(a1 + 56) = v300;
                          memset(v300, 255, 8 * *(unsigned int *)(a1 + 64));
LABEL_463:
                          LOBYTE(v5) = v323;
                          v276 = *(void **)(a1 + 216);
                          if (v276 != *(void **)(a1 + 208))
                          {
                            v283 = *(unsigned int *)(a1 + 224);
                            if (v283 >= 0x21
                              && 4 * (*(_DWORD *)(a1 + 228) - *(_DWORD *)(a1 + 232)) < v283)
                            {
                              free(v276);
                              v301 = *(_DWORD *)(a1 + 228) - *(_DWORD *)(a1 + 232);
                              v302 = 1 << (33 - __clz(v301 - 1));
                              *(_DWORD *)(a1 + 228) = 0;
                              *(_DWORD *)(a1 + 232) = 0;
                              if (v301 <= 0x10)
                                v303 = 32;
                              else
                                v303 = v302;
                              *(_DWORD *)(a1 + 224) = v303;
                              v304 = malloc_type_malloc(8 * v303, 0x4065EBACuLL);
                              if (!v304)
                                goto LABEL_517;
                              *(_QWORD *)(a1 + 216) = v304;
                              memset(v304, 255, 8 * *(unsigned int *)(a1 + 224));
                              goto LABEL_465;
                            }
                            memset(v276, 255, 8 * v283);
                          }
                          *(_DWORD *)(a1 + 228) = 0;
                          *(_DWORD *)(a1 + 232) = 0;
LABEL_465:
                          v277 = *(void **)(a1 + 312);
                          if (v277 == *(void **)(a1 + 304))
                          {
LABEL_466:
                            *(_QWORD *)(a1 + 324) = 0;
                            return v5 & 1;
                          }
                          v284 = *(unsigned int *)(a1 + 320);
                          if (v284 < 0x21
                            || 4 * (*(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328)) >= v284)
                          {
                            memset(v277, 255, 8 * v284);
                            goto LABEL_466;
                          }
                          free(v277);
                          v305 = *(_DWORD *)(a1 + 324) - *(_DWORD *)(a1 + 328);
                          v306 = 1 << (33 - __clz(v305 - 1));
                          if (v305 <= 0x10)
                            v307 = 32;
                          else
                            v307 = v306;
                          *(_DWORD *)(a1 + 320) = v307;
                          *(_QWORD *)(a1 + 324) = 0;
                          v308 = malloc_type_malloc(8 * v307, 0x4065EBACuLL);
                          if (!v308)
                            goto LABEL_517;
                          *(_QWORD *)(a1 + 312) = v308;
                          memset(v308, 255, 8 * *(unsigned int *)(a1 + 320));
                          return v5 & 1;
                        }
                        memset(v275, 255, 8 * v282);
                      }
                      *(_DWORD *)(a1 + 68) = 0;
                      *(_DWORD *)(a1 + 72) = 0;
                      goto LABEL_463;
                    }
                  }
                  else
                  {
                    sub_1C485C2F0();
                  }
                  (*(void (**)(void *))(*(_QWORD *)v19 + 8))(v19);
                  goto LABEL_17;
                }
                memset(v9, 255, 8 * v281);
              }
              *(_QWORD *)(a1 + 324) = 0;
              goto LABEL_11;
            }
            memset(v8, 255, 8 * v280);
          }
          *(_DWORD *)(a1 + 228) = 0;
          *(_DWORD *)(a1 + 232) = 0;
          goto LABEL_9;
        }
        memset(v7, 255, 8 * v279);
      }
      *(_DWORD *)(a1 + 68) = 0;
      *(_DWORD *)(a1 + 72) = 0;
      goto LABEL_7;
    }
  }
  return v5 & 1;
}

uint64_t sub_1C52CD250(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t result;
  int v6;
  llvm::Type ***v7;
  BOOL v8;
  BOOL v9;
  int v10;
  uint64_t **v11;
  llvm::Type *v12;
  _BOOL4 v13;
  unsigned int v14;
  uint64_t v15;
  int v16;

  v4 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v4 >= 0x1C)
  {
    if (*(unsigned __int8 *)(a2 + 16) <= 0x4Cu)
    {
      result = 1;
      switch(*(_BYTE *)(a2 + 16))
      {
        case '<':
        case 'B':
          goto LABEL_22;
        case '=':
        case '>':
          return result;
        case '?':
        case '@':
        case 'A':
          goto LABEL_26;
        case 'C':
          v6 = *(_DWORD *)(a2 + 20);
          if ((v6 & 0x40000000) != 0)
            v7 = *(llvm::Type ****)(a2 - 8);
          else
            v7 = (llvm::Type ***)(a2 - 32 * (v6 & 0x7FFFFFF));
          v12 = **v7;
          return sub_1C52CDAA8(a1, v12);
        default:
          if (v4 - 30 < 2)
            return result;
          if (v4 == 29)
            goto LABEL_22;
          goto LABEL_26;
      }
    }
    switch(*(_BYTE *)(a2 + 16))
    {
      case 'M':
      case 'S':
      case 'U':
        goto LABEL_22;
      case 'Q':
        v10 = *(_DWORD *)(a2 + 20);
        if ((v10 & 0x40000000) != 0)
          v11 = *(uint64_t ***)(a2 - 8);
        else
          v11 = (uint64_t **)(a2 - 32 * (v10 & 0x7FFFFFF));
        v15 = **v11;
        v16 = *(unsigned __int8 *)(v15 + 8);
        if (v16 == 15)
          return 1;
        if ((v16 & 0xFE) == 0x12)
          v15 = **(_QWORD **)(v15 + 16);
        v9 = *(_DWORD *)(a1 + 28) == llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v15);
        break;
      case 'T':
        result = sub_1C52CDAA8(a1, *(llvm::Type **)a2);
        if ((_DWORD)result)
          return sub_1C4D91DD8(a2, 67);
        return result;
      default:
LABEL_26:
        if (v4 - 41 > 0x11)
          return 0;
        v13 = sub_1C52CDAA8(a1, *(llvm::Type **)a2);
        v14 = (0xFFF76u >> (v4 - 48)) & 1;
        if (v4 - 48 >= 0x15)
          v14 = 1;
        if (v13)
          return v14;
        else
          return 0;
    }
    return v9;
  }
  v8 = v4 > 0x14 || v4 == 5;
  if (v8 && v4 != 21)
    return v4 == 22;
LABEL_22:
  v12 = *(llvm::Type **)a2;
  return sub_1C52CDAA8(a1, v12);
}

BOOL sub_1C52CD418(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v5;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 13 || (sub_1C52CD950(a1, (uint64_t)a2) & 1) != 0)
    return 0;
  if ((sub_1C52CD8A4(a1, a2) & 1) != 0)
    return 1;
  v5 = a2[16];
  return v5 > 0x1B && v5 != 81;
}

uint64_t sub_1C52CD484(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  llvm::SmallPtrSetImplBase *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  size_t v25;
  unsigned int v26;
  uint64_t v27;
  char v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::SmallPtrSetImplBase *v33;
  llvm::SmallPtrSetImplBase *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;

  result = 1;
  if (a2 && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
  {
    v5 = (llvm::SmallPtrSetImplBase *)(a1 + 26);
    v6 = sub_1C477672C((uint64_t)(a1 + 26), a2);
    v7 = a1[27];
    v8 = 224;
    if (v7 == a1[26])
      v8 = 228;
    if (v6 != (_QWORD *)(v7 + 8 * *(unsigned int *)((char *)a1 + v8)))
      return 1;
    v9 = *(unsigned __int8 *)(a2 + 16);
    if ((v9 - 48) > 0x14 || ((1 << (v9 - 48)) & 0x100089) == 0)
    {
      HIDWORD(v16) = v9 - 41;
      LODWORD(v16) = v9 - 41;
      v15 = v16 >> 1;
      if (v15 > 6 || ((1 << v15) & 0x47) == 0 || (*(_BYTE *)(a2 + 17) & 2) != 0)
      {
LABEL_18:
        sub_1C4774094(v5, a2);
        return 1;
      }
    }
    v10 = v9 - 28;
    if (((v9 - 28) & 0xFFFFFFFD) != 0xD)
      return 0;
    v11 = *(_QWORD *)(a2 + 8);
    if (!v11)
      return 0;
    if (*(_QWORD *)(v11 + 8))
      return 0;
    v12 = *(_QWORD *)(v11 + 24);
    if (*(_BYTE *)(v12 + 16) != 81)
      return 0;
    v13 = *(_DWORD *)(a2 + 20);
    v14 = (v13 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v13 & 0x7FFFFFF);
    if (*(_BYTE *)(*(_QWORD *)(v14 + 32) + 16) != 16)
      return 0;
    v17 = *(_WORD *)(v12 + 18) & 0x3E;
    if (v17 == 32 || (v17 - 38) < 4)
      return 0;
    v19 = *(_QWORD *)(v12 - 64);
    if (!v19 || *(_BYTE *)(v19 + 16) != 16)
    {
      v19 = *(_QWORD *)(v12 - 32);
      if (!v19 || *(_BYTE *)(v19 + 16) != 16)
        return 0;
    }
    if ((v13 & 0x40000000) != 0)
      v20 = *(_QWORD *)(a2 - 8);
    else
      v20 = a2 - 32 * (v13 & 0x7FFFFFF);
    v21 = *(_QWORD *)(v20 + 32);
    v22 = *(unsigned int *)(v21 + 32);
    v47 = v22;
    if (v22 > 0x40)
    {
      v25 = ((unint64_t)(v22 + 63) >> 3) & 0x3FFFFFF8;
      v23 = operator new[]();
      memcpy((void *)v23, *(const void **)(v21 + 24), v25);
      v46 = v23;
      if (v10 != 15)
        goto LABEL_46;
      v45 = v22;
      v44 = (void *)operator new[]();
      memcpy(v44, (const void *)v23, v25);
      llvm::APInt::flipAllBitsSlowCase((uint64_t)&v44);
    }
    else
    {
      v23 = *(_QWORD *)(v21 + 24);
      v46 = v23;
      if (v10 != 15)
        goto LABEL_46;
      v45 = v22;
      if ((_DWORD)v22)
        v24 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v22;
      else
        v24 = 0;
      v44 = (void *)(v24 & ~v23);
    }
    llvm::APInt::operator++((uint64_t)&v44);
    v26 = v45;
    v27 = (uint64_t)v44;
    v45 = 0;
    if (v22 > 0x40 && v23)
    {
      MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
      v46 = v27;
      v47 = v26;
      if (v45 >= 0x41 && v44)
        MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
    }
    else
    {
      v46 = (uint64_t)v44;
      v47 = v26;
    }
LABEL_46:
    v28 = sub_1C49591DC((llvm::APInt *)&v46);
    if ((v28 & 1) != 0)
      goto LABEL_52;
    v29 = (_QWORD *)(v19 + 24);
    if (v47 > 0x40)
    {
      v36 = *(_QWORD *)(v46 + 8 * ((v47 - 1) >> 6)) & (1 << (v47 - 1));
      v37 = *(_DWORD *)(v19 + 32);
      v38 = v37 - 1;
      v39 = *(_QWORD *)(v19 + 24);
      if (v37 >= 0x41)
        v29 = (_QWORD *)(v39 + 8 * (v38 >> 6));
      if ((v36 != 0) == ((*v29 >> v38) & 1))
      {
        v40 = v39 - 8;
        v41 = (((unint64_t)v47 + 63) >> 3) & 0x3FFFFFF8;
        while (v41)
        {
          v42 = *(_QWORD *)(v46 - 8 + v41);
          v43 = *(_QWORD *)(v40 + v41);
          v41 -= 8;
          if (v42 != v43)
          {
            if (v42 <= v43)
              break;
            goto LABEL_64;
          }
        }
      }
      else if (!v36)
      {
LABEL_64:
        v34 = (llvm::SmallPtrSetImplBase *)(a1 + 38);
        v35 = a2;
        goto LABEL_51;
      }
    }
    else
    {
      v30 = -(uint64_t)v47;
      v31 = v46 << v30 >> v30;
      v32 = (uint64_t)(*v29 << v30) >> v30;
      if (v31 >= v32)
      {
        v33 = (llvm::SmallPtrSetImplBase *)(a1 + 38);
        sub_1C4774094(v33, a2);
        if (v31 > v32)
        {
LABEL_52:
          if (v47 >= 0x41)
          {
            if (v46)
              MEMORY[0x1CAA32F9C](v46, 0x1000C8000313F17);
          }
          if ((v28 & 1) == 0)
            goto LABEL_18;
          return 0;
        }
        goto LABEL_50;
      }
    }
    v33 = (llvm::SmallPtrSetImplBase *)(a1 + 38);
    sub_1C4774094(v33, a2);
LABEL_50:
    v34 = v33;
    v35 = v12;
LABEL_51:
    sub_1C4774094(v34, v35);
    goto LABEL_52;
  }
  return result;
}

uint64_t sub_1C52CD8A4(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v3;
  uint64_t result;

  if (*(_BYTE *)(*(_QWORD *)a2 + 8) != 13)
    return 0;
  v3 = a2[16];
  result = 1;
  if (v3 <= 0x41)
  {
    if (v3 == 21 || v3 == 60)
      return result;
    return 0;
  }
  if (v3 == 66)
    return *(_DWORD *)(a1 + 28) == llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a2);
  if (v3 != 77)
  {
    if (v3 == 84)
      return sub_1C4D91DD8((uint64_t)a2, 67);
    return 0;
  }
  return result;
}

uint64_t sub_1C52CD950(uint64_t a1, uint64_t a2)
{
  int v3;
  llvm::Type **v4;
  llvm::Type *v5;
  llvm::Type *v7;
  int v8;
  llvm::Type ***v9;
  llvm::Type **v10;
  llvm::Type *v11;

  v3 = *(unsigned __int8 *)(a2 + 16);
  if (a2 && v3 == 61)
  {
    v4 = *(llvm::Type ***)(a2 - 64);
LABEL_7:
    v5 = *v4;
    if ((*((_DWORD *)*v4 + 2) & 0xFE) == 0x12)
      v5 = (llvm::Type *)**((_QWORD **)v5 + 2);
    return *(_DWORD *)(a1 + 28) >= llvm::Type::getPrimitiveSizeInBits(v5);
  }
  if (a2 && v3 == 29)
  {
    v4 = *(llvm::Type ***)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
    goto LABEL_7;
  }
  if (a2 && v3 == 67)
  {
    v7 = *(llvm::Type **)a2;
    if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
      v7 = (llvm::Type *)**((_QWORD **)v7 + 2);
    return *(_DWORD *)(a1 + 28) < llvm::Type::getPrimitiveSizeInBits(v7);
  }
  else
  {
    if (a2 && v3 == 31)
    {
      v8 = *(_DWORD *)(a2 + 20);
      if ((v8 & 0x40000000) != 0)
        v9 = *(llvm::Type ****)(a2 - 8);
      else
        v9 = (llvm::Type ***)(a2 - 32 * (v8 & 0x7FFFFFF));
      v10 = *v9;
    }
    else
    {
      if (!a2 || v3 != 81)
        return v3 == 84;
      if ((*(_WORD *)(a2 + 18) & 0x3Eu) - 38 < 4)
        return 1;
      v10 = *(llvm::Type ***)(a2 - 64);
    }
    v11 = *v10;
    if ((*((_DWORD *)*v10 + 2) & 0xFE) == 0x12)
      v11 = (llvm::Type *)**((_QWORD **)v11 + 2);
    return *(_DWORD *)(a1 + 28) > llvm::Type::getPrimitiveSizeInBits(v11);
  }
}

BOOL sub_1C52CDAA8(uint64_t a1, llvm::Type *this)
{
  unsigned int v2;

  v2 = *((_DWORD *)this + 2);
  if (v2 == 7 || v2 == 15)
    return 1;
  if (v2 != 13 || v2 >> 8 == 1 || v2 >> 8 > *(_DWORD *)(a1 + 40))
    return 0;
  if ((v2 & 0xFE) == 0x12)
    this = (llvm::Type *)**((_QWORD **)this + 2);
  return *(_DWORD *)(a1 + 28) >= llvm::Type::getPrimitiveSizeInBits(this);
}

uint64_t sub_1C52CDB34(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v2 = (_QWORD *)(*(_QWORD *)(a1 + 32) - 8);
  v4 = 0;
  result = sub_1C4D959A4((uint64_t *)a1, v2, &v4);
  if ((_DWORD)result)
  {
    *v4 = -8192;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  *(_QWORD *)(a1 + 32) -= 8;
  return result;
}

_QWORD *sub_1C52CDB9C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C621CF14(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

void sub_1C52CDC60(uint64_t *a1, uint64_t a2, llvm::Instruction *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  BOOL v17;
  unsigned __int8 *v18[4];
  __int16 v19;
  unsigned __int8 *v20;

  v7 = *a1;
  v6 = a1[1];
  *(_QWORD *)(v7 + 48) = *((_QWORD *)a3 + 5);
  *(_QWORD *)(v7 + 56) = (char *)a3 + 24;
  v8 = (unsigned __int8 *)*((_QWORD *)a3 + 6);
  v18[0] = v8;
  if (v8)
  {
    llvm::MetadataTracking::track((uint64_t)v18, v8, 2);
    v9 = v18[0];
  }
  else
  {
    v9 = 0;
  }
  sub_1C4774EF4(v7, 0, (uint64_t)v9);
  if (v18[0])
    llvm::MetadataTracking::untrack((uint64_t)v18, v18[0]);
  if (*(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
  {
    v10 = *a1;
    v11 = *(unsigned __int8 **)(a2 + 48);
    v20 = v11;
    if (v11)
    {
      llvm::MetadataTracking::track((uint64_t)&v20, v11, 2);
      v12 = v20;
    }
    else
    {
      v12 = 0;
    }
    sub_1C4774EF4(v10, 0, (uint64_t)v12);
    if (v20)
      llvm::MetadataTracking::untrack((uint64_t)&v20, v20);
  }
  v13 = (uint64_t *)*a1;
  v14 = *(_QWORD *)(v6 + 56);
  v19 = 257;
  v15 = sub_1C4773E38(v13, 39, (unsigned __int8 *)a2, v14, (uint64_t)v18);
  v16 = v15;
  if (v15)
    v17 = v15[16] >= 0x1Cu;
  else
    v17 = 0;
  if (v17)
  {
    if (*(_BYTE *)(a2 + 16) == 21)
      llvm::Instruction::moveBefore((llvm::Instruction *)v15, a3);
    else
      llvm::Instruction::moveAfter((llvm::Instruction *)v15, a3);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(v6 + 64), (uint64_t)v16);
  }
  sub_1C52CDDB0(v6, a2, v16);
}

void sub_1C52CDDB0(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  uint64_t v6;
  char v8;
  uint64_t v9;
  uint64_t v10;
  llvm::User **v11;
  uint64_t v12;
  llvm::User *v13;
  void *v14;
  uint64_t v15;
  _QWORD v16[5];

  v16[4] = *MEMORY[0x1E0C80C00];
  v14 = v16;
  v15 = 0x400000000;
  if (a3[16] <= 0x1Bu)
    v5 = 0;
  else
    v5 = a3;
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
    goto LABEL_19;
  v8 = 1;
  do
  {
    v9 = *(_QWORD *)(v6 + 24);
    if (v5
      && llvm::Instruction::isIdenticalToWhenDefined(*(llvm::Instruction **)(v6 + 24), (const llvm::Instruction *)v5)&& (v5[17] ^ *(unsigned __int8 *)(v9 + 17)) < 2)
    {
      v8 = 0;
    }
    else
    {
      v10 = v15;
      if (v15 >= (unint64_t)HIDWORD(v15))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v14, (uint64_t)v16, v15 + 1, 8);
        v10 = v15;
      }
      *((_QWORD *)v14 + v10) = v9;
      LODWORD(v15) = v15 + 1;
    }
    v6 = *(_QWORD *)(v6 + 8);
  }
  while (v6);
  if ((_DWORD)v15)
  {
    v11 = (llvm::User **)v14;
    v12 = 8 * v15;
    do
    {
      v13 = *v11++;
      llvm::User::replaceUsesOfWith(v13, (llvm::Value *)a2, (llvm::Value *)a3);
      v12 -= 8;
    }
    while (v12);
  }
  if ((v8 & 1) != 0)
  {
LABEL_19:
    if (a2 && *(unsigned __int8 *)(a2 + 16) >= 0x1Cu)
      sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 160), a2);
  }
  if (v14 != v16)
    free(v14);
}

unsigned __int8 *sub_1C52CDF24(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *result;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21[4];
  __int16 v22;
  uint64_t v23;

  if (a2[16] < 0x1Cu || *(_BYTE *)(*(_QWORD *)a2 + 8) != 13)
    return 0;
  v6 = (_QWORD *)*a1;
  v7 = sub_1C477672C(*a1 + 248, (uint64_t)a2);
  v8 = v6[32];
  v9 = 264;
  if (v8 == v6[31])
    v9 = 268;
  if (v7 == (_QWORD *)(v8 + 8 * *(unsigned int *)((char *)v6 + v9)))
  {
    v10 = sub_1C477672C((uint64_t)(v6 + 8), (uint64_t)a2);
    v11 = v6[9];
    v12 = 80;
    if (v11 == v6[8])
      v12 = 84;
    if (v10 == (_QWORD *)(v11 + 8 * *(unsigned int *)((char *)v6 + v12)))
      return 0;
  }
  v14 = (uint64_t *)v6[4];
  v21[0] = a2;
  v23 = 0;
  v15 = sub_1C614F7B0(v14, v21, &v23);
  result = 0;
  if ((v15 & 1) == 0)
  {
    v16 = a1[1];
    *(_QWORD *)(v16 + 48) = *((_QWORD *)a2 + 5);
    *(_QWORD *)(v16 + 56) = a2 + 24;
    v17 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
    v21[0] = v17;
    if (v17)
    {
      llvm::MetadataTracking::track((uint64_t)v21, v17, 2);
      v18 = v21[0];
    }
    else
    {
      v18 = 0;
    }
    sub_1C4774EF4(v16, 0, (uint64_t)v18);
    if (v21[0])
      llvm::MetadataTracking::untrack((uint64_t)v21, v21[0]);
    v19 = (uint64_t *)a1[1];
    v22 = 257;
    v20 = sub_1C4773E38(v19, 38, a2, a3, (uint64_t)v21);
    result = 0;
    if (v20)
    {
      if (v20[16] >= 0x1Cu)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(v6 + 8), (uint64_t)v20);
        return v20;
      }
    }
  }
  return result;
}

uint64_t sub_1C52CE0A8()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  v4 = 1;
  v2 = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable type promotion pass";
  v1.n128_u64[1] = 27;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED803688, "disable-type-promotion", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED803688, &dword_1C475E000);
}

uint64_t sub_1C52CE128(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Two-Address instruction pass";
  *(_QWORD *)(v3 + 8) = 28;
  *(_QWORD *)(v3 + 16) = "twoaddressinstruction";
  *(_QWORD *)(v3 + 24) = 21;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F7019;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C52CE1BC;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C52CE1BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  v0 = operator new();
  v1 = sub_1C4776848(v0, (uint64_t)&unk_1EF8F7019);
  *(_QWORD *)v1 = &off_1E814D398;
  *(_QWORD *)(v1 + 328) = 0;
  *(_QWORD *)(v1 + 336) = 0;
  *(_DWORD *)(v1 + 344) = 0;
  *(_QWORD *)(v1 + 352) = v1 + 384;
  *(_QWORD *)(v1 + 360) = v1 + 384;
  *(_QWORD *)(v1 + 368) = 8;
  *(_DWORD *)(v1 + 376) = 0;
  *(_QWORD *)(v1 + 448) = 0;
  *(_QWORD *)(v1 + 456) = 0;
  *(_DWORD *)(v1 + 464) = 0;
  *(_QWORD *)(v1 + 472) = 0;
  *(_QWORD *)(v1 + 480) = 0;
  *(_DWORD *)(v1 + 488) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED803750);
  if (v3 != -1)
  {
    v7[0] = sub_1C52CE128;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED803750, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C52CE2C4(llvm::Pass *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  *(_QWORD *)a1 = &off_1E814D398;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 59), 4);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 56), 4);
  v2 = (void *)*((_QWORD *)a1 + 45);
  if (v2 != *((void **)a1 + 44))
    free(v2);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 41), 8);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v3 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v3 != (_QWORD *)((char *)a1 + 192))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v4 != (_QWORD *)((char *)a1 + 120))
    free(v4);
  v5 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v5 != (_QWORD *)((char *)a1 + 48))
    free(v5);
  llvm::Pass::~Pass(a1);
}

void sub_1C52CE37C(llvm::Pass *a1)
{
  sub_1C52CE2C4(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C52CE3A0(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 144, (uint64_t)&llvm::LiveVariables::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveVariables::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C52CE46C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  llvm::PMDataManager *v5;
  uint64_t AnalysisPass;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  llvm::FunctionPass *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  int v20;
  int v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  llvm::MachineInstr *v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  unsigned __int8 *v33;
  char v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  const llvm::MachineOperand *v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  llvm::MachineFunction *v45;
  unsigned __int8 *v46;
  unint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t *v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int32x2_t *v68;
  int32x2_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  int v74;
  int v75;
  unsigned int v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  int v81;
  uint64_t v82;
  int v83;
  unsigned int v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  int v88;
  BOOL v89;
  unsigned int v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int *v98;
  unsigned int *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  int v107;
  int v108;
  int v109;
  BOOL v110;
  unsigned int TiedOperandIdx;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _DWORD *v115;
  int v116;
  unsigned int v117;
  char v118;
  unsigned __int8 *v119;
  unsigned int v120;
  unint64_t v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unsigned int v124;
  _QWORD *v125;
  _BYTE **v126;
  unsigned int *v127;
  uint64_t v128;
  uint64_t v129;
  llvm::MachineInstr *v130;
  int32x2_t *v131;
  unsigned int *v132;
  unsigned int *v133;
  unsigned int *v134;
  unsigned int v135;
  unsigned int *v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v144;
  llvm::MachineInstr *v145;
  llvm::MachineInstr *v146;
  llvm::MachineInstr *v147;
  uint64_t v148;
  unint64_t v149;
  unsigned int *v150;
  unsigned int *v151;
  uint64_t v152;
  unsigned int *v153;
  unint64_t v154;
  uint64_t v155;
  llvm::MachineInstr *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  unsigned int v160;
  uint64_t v161;
  unsigned __int8 **v162;
  uint64_t v163;
  llvm::MachineFunction *v164;
  unsigned __int8 *v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;
  uint64_t v171;
  unint64_t v172;
  int v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  unsigned int v178;
  int v179;
  uint64_t v180;
  int v181;
  unsigned int v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  int v186;
  BOOL v187;
  unsigned int v188;
  _QWORD *v189;
  _QWORD *v190;
  char v191;
  uint64_t v192;
  unint64_t v193;
  llvm::MachineInstr *v194;
  __int16 v195;
  llvm::MachineInstr *v196;
  uint64_t v197;
  uint64_t v198;
  llvm::MachineInstr *v199;
  unsigned int v200;
  BOOL v201;
  int v202;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  llvm::MachineInstr **v207;
  llvm::MachineInstr *v208;
  int v209;
  int v210;
  unsigned __int8 *v211;
  uint64_t v212;
  _QWORD *v213;
  unint64_t v214;
  _WORD *v215;
  unsigned __int16 *v216;
  __int16 v217;
  unsigned __int16 v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  unint64_t v222;
  int v223;
  unsigned int *v224;
  unsigned int v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t j;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  int v243;
  unint64_t v244;
  uint64_t v245;
  int *v246;
  uint64_t v247;
  int v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  unsigned int *v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  __int16 v258;
  llvm::MachineInstr *v259;
  unsigned int v260;
  int v261;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  llvm::MachineInstr **v267;
  llvm::MachineInstr *v268;
  int v269;
  int v270;
  llvm::MachineInstr *v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unsigned int v275;
  char v276;
  unsigned int v277;
  _QWORD *v278;
  uint64_t v279;
  unsigned int v280;
  unsigned int v281;
  _QWORD *v282;
  unint64_t v283;
  unint64_t v284;
  uint64_t v285;
  BOOL v286;
  unint64_t v287;
  char v288;
  unsigned int v289;
  _QWORD *v290;
  uint64_t v291;
  unsigned int v292;
  unsigned int v293;
  _QWORD *v294;
  unint64_t v295;
  unint64_t v296;
  uint64_t v297;
  BOOL v298;
  unint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  unint64_t v302;
  llvm::MachineInstr *v303;
  BOOL v304;
  unsigned int *v305;
  unsigned int v306;
  llvm::MachineInstr *v307;
  int v308;
  uint64_t v309;
  int v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v313;
  __int16 v314;
  unint64_t v315;
  llvm::MachineInstr *v316;
  unint64_t v317;
  unsigned int v318;
  int v319;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  uint64_t v326;
  int v327;
  int v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  void *v334;
  uint64_t v335;
  llvm::LiveInterval *v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  int v340;
  int v342;
  uint64_t v343;
  uint64_t v344;
  unint64_t v345;
  unsigned int v346;
  unsigned int v347;
  _QWORD *v348;
  uint64_t v349;
  unsigned int v350;
  unsigned int v351;
  _QWORD *v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;
  BOOL v356;
  unint64_t v357;
  _QWORD *v358;
  uint64_t v359;
  uint64_t v360;
  void *v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  int v365;
  int v367;
  _QWORD *v368;
  unsigned int v369;
  uint64_t v370;
  uint64_t v372;
  _DWORD *v373;
  uint64_t v374;
  uint64_t v375;
  _DWORD *v376;
  uint64_t v377;
  unsigned int v378;
  int v379;
  unsigned int v380;
  void *v381;
  _QWORD *v383;
  uint64_t v384;
  _DWORD *v385;
  uint64_t v386;
  _DWORD *v387;
  llvm::SmallPtrSetImplBase *v388;
  uint64_t v389;
  unsigned int *v390;
  unsigned int *v391;
  char v392;
  unint64_t v393;
  uint64_t v394;
  char v395;
  unsigned int *v396;
  llvm::MachineInstr *v397;
  unsigned int *v398;
  int v399;
  BOOL v400;
  _DWORD *v401;
  int v402;
  unsigned int v403;
  int v404;
  char v405;
  char v406;
  char v407;
  uint64_t v408;
  llvm::FunctionPass *v409;
  llvm::MachineInstr *v410;
  llvm::MachineInstr *v411;
  unsigned int v412;
  _QWORD v413[3];
  unsigned __int8 *v414[3];
  llvm::MachineInstr *v415;
  unsigned __int8 *v416;
  unsigned __int8 *v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  _QWORD *v422;
  unsigned int v423;
  _BYTE *v424;
  uint64_t v425;
  _QWORD v426[4];

  v426[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 248) = a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 264) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 248) + 16) + 176))(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 16));
  *(_QWORD *)(a1 + 272) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 248) + 16) + 192))(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 16));
  v5 = *(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(v5, &llvm::LiveVariables::ID, 1);
  if (AnalysisPass)
  {
    AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::LiveVariables::ID);
    v5 = *(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24);
  }
  *(_QWORD *)(a1 + 288) = AnalysisPass;
  v7 = llvm::PMDataManager::findAnalysisPass(v5, &llvm::LiveIntervals::ID, 1);
  if (v7)
  {
    v7 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v7 + 96))(v7, &llvm::LiveIntervals::ID);
    v5 = *(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24);
  }
  v409 = (llvm::FunctionPass *)a1;
  *(_QWORD *)(a1 + 296) = v7;
  v8 = llvm::PMDataManager::findAnalysisPass(v5, &llvm::AAResultsWrapperPass::ID, 1);
  if (v8
    && (v9 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v8 + 96))(v8, &llvm::AAResultsWrapperPass::ID)) != 0)
  {
    v10 = *(_QWORD *)(v9 + 32);
  }
  else
  {
    v10 = 0;
  }
  *(_QWORD *)(a1 + 304) = v10;
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(v4 + 552);
  if (llvm::FunctionPass::skipFunction((llvm::FunctionPass *)a1, *(const llvm::Function **)a2))
    *(_DWORD *)(a1 + 312) = 0;
  v11 = *(_QWORD **)(**(_QWORD **)(a1 + 280) + 360);
  *v11 &= ~1uLL;
  v12 = *(_QWORD *)(a1 + 248);
  **(_QWORD **)(v12 + 360) |= 0x100uLL;
  v421 = 1;
  for (i = 8; i != 232; i += 56)
    *(_DWORD *)((char *)&v421 + i) = -1;
  v14 = *(_QWORD *)(v12 + 328);
  v384 = v12 + 320;
  if (v14 == v12 + 320)
  {
    v395 = 0;
    goto LABEL_588;
  }
  v395 = 0;
  v401 = (_DWORD *)(a1 + 328);
  v385 = (_DWORD *)(a1 + 472);
  v383 = (_QWORD *)(a1 + 372);
  v388 = (llvm::SmallPtrSetImplBase *)(a1 + 352);
  v387 = (_DWORD *)(a1 + 448);
  do
  {
    v15 = v409;
    *((_QWORD *)v409 + 40) = v14;
    v412 = 0;
    v16 = *((_DWORD *)v409 + 84);
    if (v16 || *((_DWORD *)v409 + 85))
    {
      v17 = *((unsigned int *)v409 + 86);
      if (v17 <= 4 * v16 || v17 < 0x41)
      {
        if ((_DWORD)v17)
        {
          v18 = *(_QWORD **)v401;
          v19 = 16 * v17;
          do
          {
            *v18 = -4096;
            v18 += 2;
            v19 -= 16;
          }
          while (v19);
        }
        v15 = v409;
        *((_QWORD *)v409 + 42) = 0;
      }
      else
      {
        sub_1C476B2A4(v401);
        v15 = v409;
      }
    }
    v20 = *((_DWORD *)v15 + 114);
    if (v20 || *((_DWORD *)v15 + 115))
    {
      v372 = *((unsigned int *)v15 + 116);
      if (v372 > 4 * v20 && v372 >= 0x41)
      {
        sub_1C476BF54(v387);
        v15 = v409;
      }
      else
      {
        if ((_DWORD)v372)
        {
          v373 = *(_DWORD **)v387;
          v374 = 8 * v372;
          do
          {
            *v373 = -1;
            v373 += 2;
            v374 -= 8;
          }
          while (v374);
        }
        v15 = v409;
        *((_QWORD *)v409 + 57) = 0;
      }
    }
    v21 = *((_DWORD *)v15 + 120);
    if (v21 || *((_DWORD *)v15 + 121))
    {
      v375 = *((unsigned int *)v15 + 122);
      if (v375 > 4 * v21 && v375 >= 0x41)
      {
        sub_1C476BF54(v385);
        v15 = v409;
      }
      else
      {
        if ((_DWORD)v375)
        {
          v376 = *(_DWORD **)v385;
          v377 = 8 * v375;
          do
          {
            *v376 = -1;
            v376 += 2;
            v377 -= 8;
          }
          while (v377);
        }
        v15 = v409;
        *((_QWORD *)v409 + 60) = 0;
      }
    }
    v22 = (void *)*((_QWORD *)v15 + 45);
    v386 = v14;
    if (v22 == *((void **)v15 + 44))
      goto LABEL_30;
    v370 = *((unsigned int *)v409 + 92);
    if (v370 < 0x21 || 4 * (*((_DWORD *)v409 + 93) - *((_DWORD *)v409 + 94)) >= v370)
    {
      memset(v22, 255, 8 * v370);
LABEL_30:
      *v383 = 0;
      goto LABEL_31;
    }
    free(v22);
    v378 = *((_DWORD *)v409 + 93) - *((_DWORD *)v409 + 94);
    v379 = 1 << (33 - __clz(v378 - 1));
    if (v378 <= 0x10)
      v380 = 32;
    else
      v380 = v379;
    *((_DWORD *)v409 + 92) = v380;
    *v383 = 0;
    v381 = malloc_type_malloc(8 * v380, 0x4065EBACuLL);
    if (!v381)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *((_QWORD *)v409 + 45) = v381;
    memset(v381, 255, 8 * *((unsigned int *)v409 + 92));
LABEL_31:
    v23 = *((_QWORD *)v409 + 40);
    v24 = *(_QWORD *)(v23 + 56);
    v411 = (llvm::MachineInstr *)v24;
    v389 = v23 + 48;
    if (v24 == v23 + 48)
      goto LABEL_560;
    do
    {
      if (!v24 || (v25 = v24, (*(_BYTE *)v24 & 4) == 0))
      {
        v25 = v24;
        if ((*(_WORD *)(v24 + 44) & 8) != 0)
        {
          v25 = v24;
          do
            v25 = *(_QWORD *)(v25 + 8);
          while ((*(_WORD *)(v25 + 44) & 8) != 0);
        }
      }
      v26 = *(llvm::MachineInstr **)(v25 + 8);
      v410 = v26;
      v27 = **(unsigned __int16 **)(v24 + 16);
      if ((v27 - 13) <= 4)
      {
        v411 = v26;
        v24 = (uint64_t)v26;
        continue;
      }
      if (v27 != 18)
      {
        v33 = (unsigned __int8 *)v24;
        goto LABEL_138;
      }
      v28 = *(_QWORD *)(v24 + 32);
      v399 = *(_DWORD *)(v28 + 4);
      v29 = *(_DWORD *)(v24 + 40);
      v424 = v426;
      v425 = 0x400000000;
      if (*((_QWORD *)v409 + 37))
      {
        LODWORD(v426[0]) = *(_DWORD *)(v28 + 4);
        v30 = 1;
        LODWORD(v425) = 1;
        if (v29 == 1)
          goto LABEL_111;
        v31 = 1;
        do
        {
          v32 = *(_DWORD *)(*(_QWORD *)(v24 + 32) + 32 * v31 + 4);
          if (v30 >= HIDWORD(v425))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v424, (uint64_t)v426, v30 + 1, 4);
            v30 = v425;
          }
          *(_DWORD *)&v424[4 * v30] = v32;
          v30 = v425 + 1;
          LODWORD(v425) = v425 + 1;
          v31 += 2;
        }
        while (v31 < v29);
        v29 = *(_DWORD *)(v24 + 40);
      }
      if (v29 < 2)
      {
LABEL_111:
        v34 = 0;
        v397 = (llvm::MachineInstr *)v24;
        goto LABEL_112;
      }
      v34 = 0;
      v35 = 1;
      v36 = 3;
      v397 = (llvm::MachineInstr *)v24;
      do
      {
        v37 = *(_QWORD *)(v24 + 32);
        v38 = (const llvm::MachineOperand *)(v37 + 32 * v35);
        if ((*(_DWORD *)v38 & 0x10000000) == 0)
        {
          v39 = *((_DWORD *)v38 + 1);
          v407 = v34;
          if (((*(_DWORD *)v38 >> 26) & ~HIBYTE(*(_DWORD *)v38) & 1) != 0)
          {
            v40 = v36;
            while (v40 < v29)
            {
              v41 = v40;
              v42 = *(_DWORD *)(v37 + 32 * v40 + 4);
              v40 += 2;
              if (v42 == v39)
              {
                *(_DWORD *)(v37 + 32 * v41) |= 0x4000000u;
                *(_DWORD *)v38 &= ~0x4000000u;
                goto LABEL_56;
              }
            }
            v405 = 0;
          }
          else
          {
LABEL_56:
            v405 = 1;
          }
          v402 = *(_DWORD *)(v37 + 32 * (v35 + 1) + 16);
          v43 = *(_QWORD *)(v24 + 24);
          v44 = *(_QWORD *)(*((_QWORD *)v409 + 32) + 8) + 912;
          if ((*(_WORD *)(v24 + 44) & 4) != 0)
          {
            v45 = *(llvm::MachineFunction **)(v43 + 32);
            v48 = *(unsigned __int8 **)(v24 + 56);
            v414[0] = v48;
            if (v48)
              llvm::MetadataTracking::track((uint64_t)v414, v48, 2);
            v47 = *((_QWORD *)v45 + 28);
            if (v47)
              *((_QWORD *)v45 + 28) = *(_QWORD *)v47;
            else
              v47 = sub_1C484358C((uint64_t)v45 + 128, 72, 3);
            v417 = v414[0];
            if (v414[0])
            {
              llvm::MetadataTracking::retrack((uint64_t)v414, v414[0], (uint64_t)&v417);
              v414[0] = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v47, v45, v44, &v417, 0);
            if (v417)
              llvm::MetadataTracking::untrack((uint64_t)&v417, v417);
            if (v414[0])
              llvm::MetadataTracking::untrack((uint64_t)v414, v414[0]);
            if (v43 + 48 != v24 && (*(_WORD *)(v24 + 44) & 4) != 0)
              *(_WORD *)(v47 + 44) |= 0xCu;
            sub_1C512CA10((uint64_t *)(v43 + 40), (uint64_t *)v24, v47);
            v52 = v407;
          }
          else
          {
            v45 = *(llvm::MachineFunction **)(v43 + 32);
            v46 = *(unsigned __int8 **)(v24 + 56);
            v414[0] = v46;
            if (v46)
              llvm::MetadataTracking::track((uint64_t)v414, v46, 2);
            v47 = *((_QWORD *)v45 + 28);
            if (v47)
              *((_QWORD *)v45 + 28) = *(_QWORD *)v47;
            else
              v47 = sub_1C484358C((uint64_t)v45 + 128, 72, 3);
            v417 = v414[0];
            if (v414[0])
            {
              llvm::MetadataTracking::retrack((uint64_t)v414, v414[0], (uint64_t)&v417);
              v414[0] = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v47, v45, v44, &v417, 0);
            if (v417)
              llvm::MetadataTracking::untrack((uint64_t)&v417, v417);
            if (v414[0])
              llvm::MetadataTracking::untrack((uint64_t)v414, v414[0]);
            v49 = *(_QWORD *)(v43 + 40);
            *(_QWORD *)(v47 + 24) = v49;
            v50 = *(_QWORD *)(v49 + 32);
            v51 = *(unsigned int *)(v47 + 40);
            v52 = v407;
            if ((_DWORD)v51)
            {
              v57 = *(_QWORD *)(v47 + 32);
              v58 = *(_QWORD *)(v50 + 40);
              v59 = 32 * v51;
              do
              {
                if (!*(_BYTE *)v57)
                {
                  v60 = *(unsigned int *)(v57 + 4);
                  if ((int)v60 >= 0)
                    v61 = (uint64_t *)(*(_QWORD *)(v58 + 272) + 8 * v60);
                  else
                    v61 = (uint64_t *)(*(_QWORD *)(v58 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
                  v62 = *v61;
                  if (*v61)
                  {
                    v63 = *(_QWORD *)(v62 + 16);
                    *(_QWORD *)(v62 + 16) = v57;
                    *(_QWORD *)(v57 + 16) = v63;
                    if ((*(_BYTE *)(v57 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v57 + 24) = v62;
                    }
                    else
                    {
                      *(_QWORD *)(v57 + 24) = 0;
                      v61 = (uint64_t *)(v63 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v57 + 16) = v57;
                    *(_QWORD *)(v57 + 24) = 0;
                  }
                  *v61 = v57;
                }
                v57 += 32;
                v59 -= 32;
              }
              while (v59);
            }
            v53 = *(_QWORD *)(v50 + 728);
            if (v53)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v53 + 24))(v53, v47);
            v54 = *(_QWORD *)v24 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v47 = v54 | *(_QWORD *)v47 & 7;
            *(_QWORD *)(v47 + 8) = v24;
            *(_QWORD *)(v54 + 8) = v47;
            *(_QWORD *)v24 = *(_QWORD *)v24 & 7 | v47;
          }
          v418 = 0;
          v419 = 0;
          v420 = 0;
          HIDWORD(v417) = v399;
          LODWORD(v417) = ((v402 & 0xFFF) << 8) | 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v45, (const llvm::MachineOperand *)&v417);
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v47, v45, v38);
          if ((v52 & 1) == 0)
          {
            **(_DWORD **)(v47 + 32) |= 0x10000000u;
            v397 = (llvm::MachineInstr *)v47;
          }
          v55 = (uint64_t *)*((_QWORD *)v409 + 36);
          v56 = v405;
          if (!v55)
            v56 = 1;
          v34 = 1;
          if ((v56 & 1) == 0 && (v39 - 1) >= 0x3FFFFFFF)
          {
            llvm::LiveVariables::replaceKillInstruction(v55, v39, v24, v47);
            v34 = 1;
          }
        }
        v35 += 2;
        v36 += 2;
      }
      while (v35 < v29);
LABEL_112:
      v33 = (unsigned __int8 *)v397;
      v411 = v397;
      v64 = *(_QWORD *)v24;
      v65 = v24;
      if ((*(_QWORD *)v24 & 4) == 0)
      {
        v65 = v24;
        if ((*(_WORD *)(v24 + 44) & 8) != 0)
        {
          v65 = v24;
          do
            v65 = *(_QWORD *)(v65 + 8);
          while ((*(_WORD *)(v65 + 44) & 8) != 0);
        }
      }
      v66 = *(_QWORD *)(v65 + 8);
      if ((v34 & 1) == 0)
      {
        *(_QWORD *)(v24 + 16) = *(_QWORD *)(*((_QWORD *)v409 + 32) + 8) + 480;
        v76 = *(_DWORD *)(v24 + 40);
        if ((int)(v76 - 1) >= 1)
        {
          do
            llvm::MachineInstr::removeOperand(v24, --v76);
          while (v76 > 1);
        }
        goto LABEL_133;
      }
      v67 = *((_QWORD *)v409 + 37);
      if (v67)
      {
        v68 = *(int32x2_t **)(v67 + 288);
        v69 = v68[46];
        v70 = v68[48].u32[0];
        if (!(_DWORD)v70)
          goto LABEL_127;
        LODWORD(v71) = (v70 - 1) & ((v24 >> 4) ^ (v24 >> 9));
        v72 = (uint64_t *)(*(_QWORD *)&v69 + 16 * v71);
        v73 = *v72;
        if (*v72 != v24)
        {
          v74 = 1;
          while (v73 != -4096)
          {
            v75 = v71 + v74++;
            v71 = v75 & (v70 - 1);
            v73 = *(_QWORD *)(*(_QWORD *)&v69 + 16 * v71);
            if (v73 == v24)
            {
              v72 = (uint64_t *)(*(_QWORD *)&v69 + 16 * v71);
              goto LABEL_128;
            }
          }
LABEL_127:
          v72 = (uint64_t *)(*(_QWORD *)&v69 + 16 * v70);
        }
LABEL_128:
        if (v72 != (uint64_t *)(*(_QWORD *)&v69 + 16 * v70))
        {
          v77 = v72[1] & 0xFFFFFFFFFFFFFFF8;
          *v72 = -8192;
          v68[47] = vadd_s32(v68[47], (int32x2_t)0x1FFFFFFFFLL);
          *(_QWORD *)(v77 + 16) = 0;
        }
      }
      v78 = v24;
      if ((v64 & 4) == 0)
      {
        v78 = v24;
        if ((*(_WORD *)(v24 + 44) & 8) != 0)
        {
          v78 = v24;
          do
            v78 = *(_QWORD *)(v78 + 8);
          while ((*(_WORD *)(v78 + 44) & 8) != 0);
        }
      }
      sub_1C487FE80(*(_QWORD *)(v24 + 24) + 40, v24, *(_QWORD *)(v78 + 8));
LABEL_133:
      v79 = *((_QWORD *)v409 + 37);
      v80 = v424;
      if (v79)
      {
        llvm::LiveIntervals::repairIntervalsInRange(v79, *((_QWORD *)v409 + 40), (unint64_t)v397, v66, v424, v425);
        v80 = v424;
      }
      if (v80 != (_BYTE *)v426)
        free(v80);
      v24 = (uint64_t)v397;
LABEL_138:
      ++v412;
      v417 = v33;
      v418 = v412;
      v81 = *((_DWORD *)v409 + 86);
      if (v81)
      {
        v82 = *((_QWORD *)v409 + 41);
        v83 = v81 - 1;
        v84 = v83 & ((v33 >> 4) ^ (v33 >> 9));
        v85 = (_QWORD *)(v82 + 16 * v84);
        v86 = *v85;
        if (v24 == *v85)
          goto LABEL_153;
        v87 = 0;
        v88 = 1;
        while (v86 != -4096)
        {
          if (v87)
            v89 = 0;
          else
            v89 = v86 == -8192;
          if (v89)
            v87 = v85;
          v90 = v84 + v88++;
          v84 = v90 & v83;
          v85 = (_QWORD *)(v82 + 16 * v84);
          v86 = *v85;
          if (v24 == *v85)
            goto LABEL_153;
        }
        if (v87)
          v91 = v87;
        else
          v91 = v85;
      }
      else
      {
        v91 = 0;
      }
      v92 = sub_1C48BE074((uint64_t)v401, (uint64_t)&v417, (uint64_t *)&v417, v91);
      *v92 = v417;
      *((_DWORD *)v92 + 2) = v418;
LABEL_153:
      v93 = sub_1C477672C((uint64_t)v388, v24);
      v94 = *((_QWORD *)v409 + 45);
      v95 = 368;
      if (v94 == *((_QWORD *)v409 + 44))
        v95 = 372;
      if (v93 != (_QWORD *)(v94 + 8 * *(unsigned int *)((char *)v409 + v95)))
        goto LABEL_171;
      v96 = **(unsigned __int16 **)(v24 + 16);
      if (v96 == 9 || v96 == 11)
      {
        v98 = *(unsigned int **)(v24 + 32);
        v99 = v98 + 17;
        goto LABEL_164;
      }
      if (v96 == 19)
      {
        v98 = *(unsigned int **)(v24 + 32);
        v99 = v98 + 9;
LABEL_164:
        v100 = v98[1];
        v101 = *v99;
        v102 = v101 - 0x40000000;
        if ((v100 - 1) > 0x3FFFFFFE || v102 > 0xC0000000)
        {
          if ((v100 - 1) >= 0x3FFFFFFF && v102 >= 0xC0000001)
          {
            v424 = (_BYTE *)(v100 | (v101 << 32));
            sub_1C52D3F5C((uint64_t)&v417, (uint64_t)v387, (int *)&v424, (_DWORD *)&v424 + 1);
            sub_1C52D3B58((uint64_t)v409, v100);
          }
        }
        else
        {
          v424 = (_BYTE *)(v101 | (v100 << 32));
          sub_1C52D3F5C((uint64_t)&v417, (uint64_t)v385, (int *)&v424, (_DWORD *)&v424 + 1);
        }
        sub_1C4774094(v388, v24);
      }
LABEL_171:
      v103 = *(unsigned int *)(v24 + 40);
      if (!(_DWORD)v103)
        goto LABEL_211;
      v104 = 0;
      v105 = 0;
      v106 = 0;
      do
      {
        v107 = *(_DWORD *)(*(_QWORD *)(v24 + 32) + v104);
        v108 = v107 & 0x10000FF;
        v109 = v107 & 0xF00000;
        if (v108)
          v110 = 1;
        else
          v110 = v109 == 0;
        if (!v110)
        {
          TiedOperandIdx = llvm::MachineInstr::findTiedOperandIdx((llvm::MachineInstr *)v24, v105);
          v112 = *(_QWORD *)(v24 + 32);
          v113 = v112 + v104;
          v114 = TiedOperandIdx;
          v115 = (_DWORD *)(v112 + 32 * TiedOperandIdx);
          v116 = *(_DWORD *)(v113 + 4);
          v117 = v115[1];
          if (v116 != v117)
          {
            if ((*(_BYTE *)(v113 + 3) & 0x10) != 0 && (*v115 & 0xFFF00) == 0)
            {
              if ((v117 & 0x80000000) != 0)
                sub_1C51A3F30(*((_QWORD **)v409 + 35), v117, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v409 + 35) + 24) + 16 * (v117 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v409 + 35) + 24) + 16 * (v116 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0);
              llvm::MachineOperand::setReg(v113, v117);
              *(_DWORD *)v113 &= 0xFFF000FF;
            }
            else
            {
              v417 = 0;
              v118 = sub_1C52D43E0((uint64_t)&v421, v116, &v417);
              v119 = v417;
              if ((v118 & 1) != 0)
              {
                v123 = v417 + 16;
                v121 = *((unsigned int *)v417 + 4);
                v122 = v417 + 8;
                if (v121 >= *((unsigned int *)v417 + 5))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v417 + 8), (uint64_t)(v417 + 24), v121 + 1, 8);
                  v121 = *((unsigned int *)v119 + 4);
                }
              }
              else
              {
                if ((v421 & 1) != 0)
                  v120 = 4;
                else
                  v120 = v423;
                if (4 * (v421 >> 1) + 4 >= 3 * v120)
                {
                  v120 *= 2;
                }
                else if (v120 + ~(v421 >> 1) - HIDWORD(v421) > v120 >> 3)
                {
                  goto LABEL_185;
                }
                sub_1C52D448C((uint64_t)&v421, v120);
                v417 = 0;
                sub_1C52D43E0((uint64_t)&v421, v116, &v417);
                v119 = v417;
LABEL_185:
                LODWORD(v421) = v421 + 2;
                if (*(_DWORD *)v119 != -1)
                  --HIDWORD(v421);
                v121 = 0;
                *(_DWORD *)v119 = v116;
                *((_QWORD *)v119 + 1) = v119 + 24;
                v122 = v119 + 8;
                *((_QWORD *)v119 + 2) = 0x400000000;
                v123 = v119 + 16;
              }
              *(_QWORD *)(*(_QWORD *)v122 + 8 * v121) = v105 | (v114 << 32);
              ++*(_DWORD *)v123;
            }
          }
          v106 = 1;
        }
        ++v105;
        v104 += 32;
      }
      while (v103 != v105);
      if ((v106 & 1) == 0)
      {
LABEL_211:
        sub_1C52D0848((int32x2_t *)v409, v24);
        v24 = (uint64_t)v410;
        v411 = v410;
        continue;
      }
      v124 = v421;
      if ((v421 & 0xFFFFFFFE) == 2)
      {
        v126 = &v424;
        v125 = &v422;
        if ((v421 & 1) != 0)
          goto LABEL_204;
        v125 = v422;
        if (v423)
        {
          v126 = (_BYTE **)&v422[7 * v423];
LABEL_204:
          while (*(_DWORD *)v125 >= 0xFFFFFFFE)
          {
            v125 += 7;
            if (v125 == v126)
            {
              v125 = v126;
              break;
            }
          }
        }
        if (*((_DWORD *)v125 + 4) == 1)
        {
          v127 = (unsigned int *)v125[1];
          v128 = *v127;
          v129 = v127[1];
          if (*(_DWORD *)(*(_QWORD *)(v24 + 32) + 32 * v128 + 4) != *(_DWORD *)(*(_QWORD *)(v24 + 32) + 32 * v129 + 4))
          {
            if ((sub_1C52D0B00((uint64_t)v409, (uint64_t *)&v411, (unint64_t *)&v410, v128, v129, &v412, 0) & 1) != 0)
            {
              sub_1C52D3A5C((uint64_t)&v421);
              v130 = v411;
              v131 = (int32x2_t *)v409;
              goto LABEL_524;
            }
            v124 = v421;
          }
        }
      }
      if (v124 <= 1)
      {
        v132 = (unsigned int *)v422;
        v135 = v423;
        v368 = &v422;
        if (v124)
        {
          v369 = 4;
        }
        else
        {
          v368 = v422;
          v369 = v423;
        }
        v134 = (unsigned int *)&v368[7 * v369];
        v133 = v134;
      }
      else
      {
        v133 = (unsigned int *)&v424;
        v132 = (unsigned int *)&v422;
        if ((v124 & 1) != 0)
        {
LABEL_215:
          v124 &= 1u;
          while (*v132 >= 0xFFFFFFFE)
          {
            v132 += 14;
            if (v132 == v133)
            {
              v132 = v133;
              break;
            }
          }
          v134 = v132;
          v132 = (unsigned int *)v422;
          v135 = v423;
        }
        else
        {
          v132 = (unsigned int *)v422;
          v135 = v423;
          if (v423)
          {
            v133 = (unsigned int *)&v422[7 * v423];
            goto LABEL_215;
          }
          v124 = 0;
          v134 = (unsigned int *)v422;
          v133 = (unsigned int *)v422;
        }
      }
      v89 = v124 == 0;
      v136 = (unsigned int *)&v422;
      if (v89)
      {
        v136 = v132;
        v137 = v135;
      }
      else
      {
        v137 = 4;
      }
      v390 = v133;
      v391 = &v136[14 * v137];
      while (v134 != v391)
      {
        v147 = v411;
        v415 = v411;
        v148 = v134[4];
        v396 = v134;
        if (!(_DWORD)v148)
        {
          v406 = 0;
          v159 = 0;
          v249 = 0;
          v154 = 0;
          v160 = 0;
          v400 = 0;
          goto LABEL_370;
        }
        v149 = 0;
        v150 = (unsigned int *)*((_QWORD *)v134 + 1);
        v151 = &v150[2 * v148];
        v152 = 8 * v148;
        while (1)
        {
          v153 = &v150[v149 / 4];
          if ((*(_BYTE *)(*((_QWORD *)v411 + 4) + 32 * v150[v149 / 4 + 1] + 3) & 0x40) != 0)
            break;
          v149 += 8;
          if (v152 == v149)
          {
            v153 = v151;
            break;
          }
        }
        v406 = 0;
        v154 = 0;
        v400 = v153 != v151;
        v155 = 2;
        if (v153 == v151)
          v155 = 4;
        v394 = v155;
        v392 = 1;
        v398 = v151;
        do
        {
          v156 = v415;
          v157 = *((_QWORD *)v415 + 4);
          v158 = *v150;
          v159 = *(_DWORD *)(v157 + 32 * v150[1] + 4);
          v160 = *(_DWORD *)(v157 + 32 * v158 + 4);
          if (v159 != v160)
            goto LABEL_248;
          do
          {
            v150 += 2;
            if (v150 == v151)
            {
              v160 = v159;
              goto LABEL_361;
            }
            v158 = *v150;
            v159 = *(_DWORD *)(v157 + 32 * v150[1] + 4);
            v160 = *(_DWORD *)(v157 + 32 * v158 + 4);
          }
          while (v159 == v160);
          v392 = 0;
LABEL_248:
          v403 = *(_DWORD *)(v157 + 32 * v158);
          v161 = *((_QWORD *)v415 + 3);
          v162 = (unsigned __int8 **)((char *)v415 + 56);
          v163 = *(_QWORD *)(*((_QWORD *)v409 + 32) + 8) + 912;
          if ((*((_WORD *)v415 + 22) & 4) != 0)
          {
            v170 = v159;
            v164 = sub_1C612596C(*((_QWORD *)v415 + 3), (uint64_t)v415, v162, v163, v159);
            v166 = v244;
          }
          else
          {
            v164 = *(llvm::MachineFunction **)(v161 + 32);
            v165 = *v162;
            v416 = v165;
            if (v165)
              llvm::MetadataTracking::track((uint64_t)&v416, v165, 2);
            v166 = *((_QWORD *)v164 + 28);
            if (v166)
              *((_QWORD *)v164 + 28) = *(_QWORD *)v166;
            else
              v166 = sub_1C484358C((uint64_t)v164 + 128, 72, 3);
            v417 = v416;
            if (v416)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v416, v416, (uint64_t)&v417);
              v416 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v166, v164, v163, &v417, 0);
            if (v417)
              llvm::MetadataTracking::untrack((uint64_t)&v417, v417);
            if (v416)
              llvm::MetadataTracking::untrack((uint64_t)&v416, v416);
            v167 = *(_QWORD *)(v161 + 40);
            *(_QWORD *)(v166 + 24) = v167;
            v168 = *(_QWORD *)(v167 + 32);
            v169 = *(unsigned int *)(v166 + 40);
            v170 = v159;
            if ((_DWORD)v169)
            {
              v232 = *(_QWORD *)(v166 + 32);
              v233 = *(_QWORD *)(v168 + 40);
              v234 = 32 * v169;
              do
              {
                if (!*(_BYTE *)v232)
                {
                  v235 = *(unsigned int *)(v232 + 4);
                  if ((int)v235 >= 0)
                    v236 = (uint64_t *)(*(_QWORD *)(v233 + 272) + 8 * v235);
                  else
                    v236 = (uint64_t *)(*(_QWORD *)(v233 + 24) + 16 * (v235 & 0x7FFFFFFF) + 8);
                  v237 = *v236;
                  if (*v236)
                  {
                    v238 = *(_QWORD *)(v237 + 16);
                    *(_QWORD *)(v237 + 16) = v232;
                    *(_QWORD *)(v232 + 16) = v238;
                    if ((*(_BYTE *)(v232 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v232 + 24) = v237;
                    }
                    else
                    {
                      *(_QWORD *)(v232 + 24) = 0;
                      v236 = (uint64_t *)(v238 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v232 + 16) = v232;
                    *(_QWORD *)(v232 + 24) = 0;
                  }
                  *v236 = v232;
                }
                v232 += 32;
                v234 -= 32;
              }
              while (v234);
            }
            v171 = *(_QWORD *)(v168 + 728);
            if (v171)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v171 + 24))(v171, v166);
            v172 = *(_QWORD *)v156 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v166 = v172 | *(_QWORD *)v166 & 7;
            *(_QWORD *)(v166 + 8) = v156;
            *(_QWORD *)(v172 + 8) = v166;
            *(_QWORD *)v156 = *(_QWORD *)v156 & 7 | v166;
            v418 = 0;
            v419 = 0;
            v420 = 0;
            HIDWORD(v417) = v159;
            LODWORD(v417) = 0x1000000;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v166, v164, (const llvm::MachineOperand *)&v417);
          }
          v418 = 0;
          v173 = (v403 >> 8) & 0xFFF;
          v419 = 0;
          v420 = 0;
          HIDWORD(v417) = v160;
          LODWORD(v417) = v173 << 8;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v166, v164, (const llvm::MachineOperand *)&v417);
          if (v159 >= 0)
            v174 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v409 + 35) + 24) + 16 * (v160 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          else
            v174 = 0;
          v175 = *(_QWORD *)v415;
          v404 = (v403 >> 8) & 0xFFF;
          if (v173)
            v176 = v174;
          else
            v176 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v409 + 35) + 24) + 16 * (v160 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
          v177 = v175 & 0xFFFFFFFFFFFFFFF8;
          if ((v175 & 0xFFFFFFFFFFFFFFF8) == 0 || (*(_BYTE *)v177 & 4) == 0)
          {
            while ((*(_WORD *)(v177 + 44) & 4) != 0)
              v177 = *(_QWORD *)v177 & 0xFFFFFFFFFFFFFFF8;
          }
          v178 = v412;
          v417 = (unsigned __int8 *)v177;
          v418 = v412;
          v179 = *((_DWORD *)v409 + 86);
          if (!v179)
          {
            v189 = 0;
            goto LABEL_289;
          }
          v180 = *((_QWORD *)v409 + 41);
          v181 = v179 - 1;
          v182 = v181 & ((v177 >> 4) ^ (v177 >> 9));
          v183 = (_QWORD *)(v180 + 16 * v182);
          v184 = *v183;
          if (v177 != *v183)
          {
            v185 = 0;
            v186 = 1;
            while (v184 != -4096)
            {
              if (v185)
                v187 = 0;
              else
                v187 = v184 == -8192;
              if (v187)
                v185 = v183;
              v188 = v182 + v186++;
              v182 = v188 & v181;
              v183 = (_QWORD *)(v180 + 16 * v182);
              v184 = *v183;
              if (v177 == *v183)
                goto LABEL_290;
            }
            if (v185)
              v189 = v185;
            else
              v189 = v183;
LABEL_289:
            v190 = sub_1C48BE074((uint64_t)v401, (uint64_t)&v417, (uint64_t *)&v417, v189);
            *v190 = v417;
            *((_DWORD *)v190 + 2) = v418;
          }
LABEL_290:
          v412 = v178 + 1;
          *((_DWORD *)sub_1C5119DE8((uint64_t)v401, (uint64_t *)&v415) + 2) = v178 + 1;
          v192 = *((_QWORD *)v409 + 37);
          if (v192)
          {
            v193 = sub_1C4850BC8(*(_QWORD *)(v192 + 288), v177, 0);
            v194 = v415;
            v195 = *((_WORD *)v415 + 22);
            v196 = v415;
            if ((v195 & 4) != 0)
            {
              do
                v196 = (llvm::MachineInstr *)(*(_QWORD *)v196 & 0xFFFFFFFFFFFFFFF8);
              while ((*((_WORD *)v196 + 22) & 4) != 0);
            }
            v197 = *((_QWORD *)v409 + 37);
            v198 = *(_QWORD *)(v197 + 288);
            if ((v195 & 8) != 0)
            {
              do
                v194 = (llvm::MachineInstr *)*((_QWORD *)v194 + 1);
              while ((*((_WORD *)v194 + 22) & 8) != 0);
            }
            v199 = (llvm::MachineInstr *)*((_QWORD *)v194 + 1);
            if (v196 != v199)
            {
              while (1)
              {
                v200 = **((unsigned __int16 **)v196 + 2);
                v201 = v200 > 0x17;
                v202 = (1 << v200) & 0x83E000;
                if (v201 || v202 == 0)
                  break;
                v196 = (llvm::MachineInstr *)*((_QWORD *)v196 + 1);
                if (v196 == v199)
                {
                  v196 = v199;
                  break;
                }
              }
            }
            v204 = *(_QWORD *)(v198 + 368);
            v205 = *(unsigned int *)(v198 + 384);
            if ((_DWORD)v205)
            {
              LODWORD(v206) = ((v196 >> 4) ^ (v196 >> 9)) & (v205 - 1);
              v207 = (llvm::MachineInstr **)(v204 + 16 * v206);
              v208 = *v207;
              if (v196 != *v207)
              {
                v209 = 1;
                while (v208 != (llvm::MachineInstr *)-4096)
                {
                  v210 = v206 + v209++;
                  v206 = v210 & (v205 - 1);
                  v208 = *(llvm::MachineInstr **)(v204 + 16 * v206);
                  if (v196 == v208)
                  {
                    v207 = (llvm::MachineInstr **)(v204 + 16 * v206);
                    goto LABEL_307;
                  }
                }
                goto LABEL_306;
              }
            }
            else
            {
LABEL_306:
              v207 = (llvm::MachineInstr **)(v204 + 16 * v205);
            }
LABEL_307:
            v154 = v193 & 0xFFFFFFFFFFFFFFF8 | 4;
            v211 = (unsigned __int8 *)((unint64_t)v207[1] & 0xFFFFFFFFFFFFFFF8 | v394);
            if (v159 < 0)
            {
              if ((v170 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v197 + 416)
                || (v226 = *(_QWORD *)(*(_QWORD *)(v197 + 408) + 8 * (v170 & 0x7FFFFFFF))) == 0)
              {
                v226 = sub_1C4851220(*((_QWORD *)v409 + 37), v170);
                v408 = *(_QWORD *)(v197 + 304);
                v239 = *(_QWORD *)(v197 + 248);
                *(_QWORD *)v408 = v239;
                *(_QWORD *)(v408 + 8) = *(_QWORD *)(v239 + 40);
                *(_OWORD *)(v408 + 16) = *(_OWORD *)(v197 + 288);
                *(_QWORD *)(v408 + 32) = v197 + 312;
                llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v408);
                *(_DWORD *)(v408 + 184) = 0;
                v240 = *(_QWORD *)(v197 + 256);
                v89 = *(_BYTE *)(v240 + 16) == 0;
                v241 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v240 + 24)
                                                       + 16 * (*(_DWORD *)(v226 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                          + 34);
                v243 = !v89 && v241 != 0;
                llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v197 + 304), (llvm::LiveInterval *)v226, v243);
                llvm::LiveIntervals::computeDeadValues(v197, v226, 0);
                v197 = *((_QWORD *)v409 + 37);
              }
              v227 = sub_1C484358C(v197 + 312, 16, 3);
              v228 = *(unsigned int *)(v226 + 72);
              *(_DWORD *)v227 = v228;
              *(_QWORD *)(v227 + 8) = v154;
              if (v228 >= *(unsigned int *)(v226 + 76))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v226 + 64, v226 + 80, v228 + 1, 8);
                v228 = *(unsigned int *)(v226 + 72);
              }
              *(_QWORD *)(*(_QWORD *)(v226 + 64) + 8 * v228) = v227;
              ++*(_DWORD *)(v226 + 72);
              v424 = (_BYTE *)v154;
              v425 = (uint64_t)v211;
              v426[0] = v227;
              llvm::LiveRange::addSegment(v226, (uint64_t)&v424);
              for (j = *(_QWORD *)(v226 + 104); j; j = *(_QWORD *)(j + 104))
              {
                v230 = sub_1C484358C(*((_QWORD *)v409 + 37) + 312, 16, 3);
                v231 = *(unsigned int *)(j + 72);
                *(_DWORD *)v230 = v231;
                *(_QWORD *)(v230 + 8) = v154;
                if (v231 >= *(unsigned int *)(j + 76))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(j + 64, j + 80, v231 + 1, 8);
                  v231 = *(unsigned int *)(j + 72);
                }
                *(_QWORD *)(*(_QWORD *)(j + 64) + 8 * v231) = v230;
                ++*(_DWORD *)(j + 72);
                v414[0] = (unsigned __int8 *)v154;
                v414[1] = v211;
                v414[2] = (unsigned __int8 *)v230;
                llvm::LiveRange::addSegment(j, (uint64_t)v414);
              }
            }
            else
            {
              v393 = v176;
              v212 = *((_QWORD *)v409 + 33);
              v191 = 0;
              if (v212)
                v213 = (_QWORD *)(v212 + 8);
              else
                v213 = 0;
              v214 = *(unsigned int *)(*v213 + 24 * v170 + 16);
              v215 = (_WORD *)(v213[6] + ((v214 >> 3) & 0x1FFFFFFE));
              v217 = *v215;
              v216 = v215 + 1;
              v218 = v217 + (v214 & 0xF) * v159;
              do
              {
                v219 = *((_QWORD *)v409 + 37);
                v220 = *(_QWORD *)(*(_QWORD *)(v219 + 680) + 8 * v218);
                if (v220)
                {
                  v221 = sub_1C484358C(v219 + 312, 16, 3);
                  v222 = *(unsigned int *)(v220 + 72);
                  *(_DWORD *)v221 = v222;
                  *(_QWORD *)(v221 + 8) = v154;
                  if (v222 >= *(unsigned int *)(v220 + 76))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v220 + 64, v220 + 80, v222 + 1, 8);
                    v222 = *(unsigned int *)(v220 + 72);
                  }
                  *(_QWORD *)(*(_QWORD *)(v220 + 64) + 8 * v222) = v221;
                  ++*(_DWORD *)(v220 + 72);
                  v413[0] = v154;
                  v413[1] = v211;
                  v413[2] = v221;
                  llvm::LiveRange::addSegment(v220, (uint64_t)v413);
                }
                v223 = *v216++;
                v218 += v223;
              }
              while (v223);
              v170 = v159;
              v176 = v393;
            }
          }
          v224 = (unsigned int *)(*((_QWORD *)v415 + 4) + 32 * v158);
          v225 = *v224;
          if (((v225 >> 26) & ~HIBYTE(v225) & 1) != 0)
          {
            *v224 = v225 & 0xFBFFFFFF;
            v406 = 1;
          }
          if (((v160 & v159 & 0x80000000) != 0) != v191)
            sub_1C51A3F30(*((_QWORD **)v409 + 35), v170, *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v409 + 35) + 24) + 16 * (v170 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, v176, 0);
          llvm::MachineOperand::setReg((uint64_t)v224, v170);
          *v224 &= 0xFFF000FF;
          v150 += 2;
          v151 = v398;
        }
        while (v150 != v398);
        if ((v392 & 1) != 0)
        {
          v147 = v415;
          v133 = v390;
          v249 = v404;
LABEL_370:
          v250 = *((unsigned int *)v147 + 10);
          if ((_DWORD)v250)
          {
            v251 = 0;
            v252 = (unsigned int *)*((_QWORD *)v147 + 4);
            v253 = 32 * v250;
            do
            {
              v254 = *v252;
              if (!*v252 && (v254 & 0x1000000) == 0 && v252[1] == v160)
              {
                v255 = (v254 >> 8) & 0xFFF;
                v256 = v400;
                if ((_DWORD)v255 != v249)
                  v256 = 1;
                if ((v256 & 1) != 0)
                {
                  v251 |= *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v409 + 33) + 232) + 8 * v255);
                }
                else
                {
                  if (((v254 >> 26) & ~BYTE3(v254) & 1) != 0)
                  {
                    *v252 = v254 & 0xFBFFFFFF;
                    v406 = 1;
                  }
                  llvm::MachineOperand::setReg((uint64_t)v252, v159);
                  *v252 &= 0xFFF000FF;
                }
              }
              v252 += 8;
              v253 -= 32;
            }
            while (v253);
          }
          else
          {
            v251 = 0;
          }
          if ((v406 & 1) != 0 && !v251)
          {
            v300 = *((_QWORD *)v409 + 36);
            if (v300)
            {
              v301 = (_QWORD *)(v300 + 248);
              v302 = v160 & 0x7FFFFFFF;
              if (v302 >= *(unsigned int *)(v300 + 256))
                sub_1C61E5C60((uint64_t *)(v300 + 248), v302 + 1, v300 + 264);
              if (sub_1C511F3EC(*v301 + 56 * v302, (uint64_t)v415))
              {
                v303 = (llvm::MachineInstr *)(*(_QWORD *)v415 & 0xFFFFFFFFFFFFFFF8);
                if (!v303 || (*(_BYTE *)v303 & 4) == 0)
                {
                  while ((*((_WORD *)v303 + 22) & 4) != 0)
                    v303 = (llvm::MachineInstr *)(*(_QWORD *)v303 & 0xFFFFFFFFFFFFFFF8);
                }
                sub_1C6208E5C(*((_QWORD *)v409 + 36), v160, v303, 0);
              }
            }
            LODWORD(v417) = v159;
            sub_1C61482A0((uint64_t)v387, (int *)&v417)[1] = v160;
          }
          v257 = *((_QWORD *)v409 + 37);
          if (!v257)
            goto LABEL_461;
          v145 = v415;
          v258 = *((_WORD *)v415 + 22);
          v146 = v415;
          if ((v258 & 4) != 0)
          {
            do
              v146 = (llvm::MachineInstr *)(*(_QWORD *)v146 & 0xFFFFFFFFFFFFFFF8);
            while ((*((_WORD *)v146 + 22) & 4) != 0);
          }
          if ((v258 & 8) != 0)
          {
            do
              v145 = (llvm::MachineInstr *)*((_QWORD *)v145 + 1);
            while ((*((_WORD *)v145 + 22) & 8) != 0);
          }
          v259 = (llvm::MachineInstr *)*((_QWORD *)v145 + 1);
          if (v146 != v259)
          {
            do
            {
              v260 = **((unsigned __int16 **)v146 + 2);
              v201 = v260 > 0x17;
              v261 = (1 << v260) & 0x83E000;
              if (v201 || v261 == 0)
                goto LABEL_397;
              v146 = (llvm::MachineInstr *)*((_QWORD *)v146 + 1);
            }
            while (v146 != v259);
            v146 = v259;
          }
LABEL_397:
          v263 = *(_QWORD *)(v257 + 288);
          v264 = *(_QWORD *)(v263 + 368);
          v265 = *(unsigned int *)(v263 + 384);
          if ((_DWORD)v265)
          {
            LODWORD(v266) = ((v146 >> 4) ^ (v146 >> 9)) & (v265 - 1);
            v267 = (llvm::MachineInstr **)(v264 + 16 * v266);
            v268 = *v267;
            if (v146 != *v267)
            {
              v269 = 1;
              do
              {
                if (v268 == (llvm::MachineInstr *)-4096)
                  goto LABEL_406;
                v270 = v266 + v269++;
                v266 = v270 & (v265 - 1);
                v268 = *(llvm::MachineInstr **)(v264 + 16 * v266);
              }
              while (v146 != v268);
              v267 = (llvm::MachineInstr **)(v264 + 16 * v266);
            }
          }
          else
          {
LABEL_406:
            v267 = (llvm::MachineInstr **)(v264 + 16 * v265);
          }
          v271 = v267[1];
          v272 = v160 & 0x7FFFFFFF;
          if (v272 >= *(unsigned int *)(v257 + 416) || (v138 = *(_QWORD *)(*(_QWORD *)(v257 + 408) + 8 * v272)) == 0)
          {
            v138 = sub_1C4851220(*((_QWORD *)v409 + 37), v160);
            v139 = *(_QWORD *)(v257 + 304);
            v140 = *(_QWORD *)(v257 + 248);
            *(_QWORD *)v139 = v140;
            *(_QWORD *)(v139 + 8) = *(_QWORD *)(v140 + 40);
            *(_OWORD *)(v139 + 16) = *(_OWORD *)(v257 + 288);
            *(_QWORD *)(v139 + 32) = v257 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v139);
            *(_DWORD *)(v139 + 184) = 0;
            v141 = *(_QWORD *)(v257 + 256);
            v89 = *(_BYTE *)(v141 + 16) == 0;
            v142 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v141 + 24)
                                                   + 16 * (*(_DWORD *)(v138 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v144 = !v89 && v142 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v257 + 304), (llvm::LiveInterval *)v138, v144);
            llvm::LiveIntervals::computeDeadValues(v257, v138, 0);
          }
          v273 = *(_QWORD *)(v138 + 104);
          if (v273)
          {
            v274 = v154 & 0xFFFFFFFFFFFFFFF8;
            v275 = (v154 >> 1) & 3;
            v276 = 1;
            while (1)
            {
              v277 = *(_DWORD *)(v273 + 8);
              v278 = *(_QWORD **)v273;
              if (!v277)
                break;
              v279 = v278[3 * v277 - 2];
              v280 = *(_DWORD *)(v274 + 24) | v275;
              v281 = (v279 >> 1) & 3 | *(_DWORD *)((v279 & 0xFFFFFFFFFFFFFFF8) + 24);
              v282 = *(_QWORD **)v273;
              v283 = *(unsigned int *)(v273 + 8);
              if (v280 >= v281)
                goto LABEL_421;
              do
              {
                v284 = v283 >> 1;
                v285 = v282[3 * (v283 >> 1) + 1];
                LODWORD(v285) = (v285 >> 1) & 3 | *(_DWORD *)((v285 & 0xFFFFFFFFFFFFFFF8) + 24);
                v283 -= (v283 >> 1) + 1;
                v286 = v280 >= v285;
                if (v280 >= v285)
                  v287 = v284 + 1;
                else
                  v287 = 0;
                v282 += 3 * v287;
                if (!v286)
                  v283 = v284;
              }
              while (v283);
LABEL_422:
              if (v282 != &v278[3 * v277]
                && ((*v282 >> 1) & 3 | *(_DWORD *)((*v282 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v274 + 24) | v275))
              {
                if ((*(_QWORD *)(v273 + 112) & v251) != 0
                  || (llvm::MachineInstr *)(v282[1] & 0xFFFFFFFFFFFFFFF8) != v271)
                {
                  v288 = 0;
                  goto LABEL_429;
                }
                v282[1] = v154;
              }
              v288 = 1;
LABEL_429:
              v276 &= v288;
              v273 = *(_QWORD *)(v273 + 104);
              if (!v273)
              {
                if ((v276 & 1) != 0)
                  goto LABEL_431;
                goto LABEL_461;
              }
            }
            v277 = 0;
LABEL_421:
            v282 = &v278[3 * v277];
            goto LABEL_422;
          }
LABEL_431:
          v289 = *(_DWORD *)(v138 + 8);
          v290 = *(_QWORD **)v138;
          if (v289)
          {
            v291 = v290[3 * v289 - 2];
            v292 = *(_DWORD *)((v154 & 0xFFFFFFFFFFFFFFF8) + 24) | (v154 >> 1) & 3;
            v293 = (v291 >> 1) & 3 | *(_DWORD *)((v291 & 0xFFFFFFFFFFFFFFF8) + 24);
            v294 = *(_QWORD **)v138;
            v295 = *(unsigned int *)(v138 + 8);
            if (v292 < v293)
            {
              do
              {
                v296 = v295 >> 1;
                v297 = v294[3 * (v295 >> 1) + 1];
                LODWORD(v297) = (v297 >> 1) & 3 | *(_DWORD *)((v297 & 0xFFFFFFFFFFFFFFF8) + 24);
                v295 -= (v295 >> 1) + 1;
                v298 = v292 >= v297;
                if (v292 >= v297)
                  v299 = v296 + 1;
                else
                  v299 = 0;
                v294 += 3 * v299;
                if (!v298)
                  v295 = v296;
              }
              while (v295);
              goto LABEL_453;
            }
          }
          else
          {
            v289 = 0;
          }
          v294 = &v290[3 * v289];
LABEL_453:
          if (v294 != &v290[3 * v289])
          {
            v304 = ((*v294 >> 1) & 3 | *(_DWORD *)((*v294 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)((v154 & 0xFFFFFFFFFFFFFFF8) + 24) | (v154 >> 1) & 3)
                && v251 == 0;
            if (v304 && (llvm::MachineInstr *)(v294[1] & 0xFFFFFFFFFFFFFFF8) == v271)
              v294[1] = v154;
          }
          goto LABEL_461;
        }
LABEL_361:
        v133 = v390;
        if ((v406 & 1) == 0)
          goto LABEL_461;
        v245 = *((unsigned int *)v415 + 10);
        if (!(_DWORD)v245)
          goto LABEL_461;
        v246 = (int *)*((_QWORD *)v415 + 4);
        v247 = 32 * v245;
        while (1)
        {
          v248 = *v246;
          if (!*v246 && (v248 & 0x1000000) == 0 && v246[1] == v160)
            break;
          v246 += 8;
          v247 -= 32;
          if (!v247)
            goto LABEL_461;
        }
        *v246 = v248 | 0x4000000;
LABEL_461:
        v305 = v396 + 14;
        while (v305 != v133)
        {
          v306 = *v305;
          v305 += 14;
          if (v306 <= 0xFFFFFFFD)
          {
            v134 = v305 - 14;
            goto LABEL_466;
          }
        }
        v134 = v133;
LABEL_466:
        ;
      }
      v307 = v411;
      if (**((_WORD **)v411 + 2) == 9)
      {
        v308 = *(_DWORD *)(*((_QWORD *)v411 + 4) + 112);
        llvm::MachineInstr::removeOperand((uint64_t)v411, 3u);
        **((_DWORD **)v307 + 4) = **((_DWORD **)v307 + 4) & 0xFFF000FF | ((v308 & 0xFFF) << 8);
        **((_DWORD **)v307 + 4) = **((_DWORD **)v307 + 4) & 0xEFFFFFFF | (((*(_DWORD *)(*((_QWORD *)v307 + 4) + 32) >> 28) & 1) << 28);
        llvm::MachineInstr::removeOperand((uint64_t)v307, 1u);
        *((_QWORD *)v307 + 2) = *(_QWORD *)(*((_QWORD *)v409 + 32) + 8) + 912;
        v309 = *((_QWORD *)v409 + 37);
        if (v309)
        {
          v310 = *(_DWORD *)(*((_QWORD *)v307 + 4) + 4);
          v311 = v310 & 0x7FFFFFFF;
          if (v311 >= *(unsigned int *)(v309 + 416) || (v312 = *(_QWORD *)(*(_QWORD *)(v309 + 408) + 8 * v311)) == 0)
          {
            v312 = sub_1C4851220(*((_QWORD *)v409 + 37), *(_DWORD *)(*((_QWORD *)v307 + 4) + 4));
            v362 = *(_QWORD *)(v309 + 304);
            v363 = *(_QWORD *)(v309 + 248);
            *(_QWORD *)v362 = v363;
            *(_QWORD *)(v362 + 8) = *(_QWORD *)(v363 + 40);
            *(_OWORD *)(v362 + 16) = *(_OWORD *)(v309 + 288);
            *(_QWORD *)(v362 + 32) = v309 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v362);
            *(_DWORD *)(v362 + 184) = 0;
            v364 = *(_QWORD *)(v309 + 256);
            v89 = *(_BYTE *)(v364 + 16) == 0;
            v365 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v364 + 24)
                                                   + 16 * (*(_DWORD *)(v312 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v367 = !v89 && v365 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v309 + 304), (llvm::LiveInterval *)v312, v367);
            llvm::LiveIntervals::computeDeadValues(v309, v312, 0);
          }
          v313 = *(_QWORD *)(v312 + 104);
          if (v313)
          {
            v314 = *((_WORD *)v307 + 22);
            v315 = (unint64_t)v307;
            if ((v314 & 4) != 0)
            {
              do
                v315 = *(_QWORD *)v315 & 0xFFFFFFFFFFFFFFF8;
              while ((*(_WORD *)(v315 + 44) & 4) != 0);
            }
            v316 = v307;
            if ((v314 & 8) != 0)
            {
              do
                v316 = (llvm::MachineInstr *)*((_QWORD *)v316 + 1);
              while ((*((_WORD *)v316 + 22) & 8) != 0);
            }
            v317 = *((_QWORD *)v316 + 1);
            if (v315 != v317)
            {
              do
              {
                v318 = **(unsigned __int16 **)(v315 + 16);
                v201 = v318 > 0x17;
                v319 = (1 << v318) & 0x83E000;
                if (v201 || v319 == 0)
                  goto LABEL_481;
                v315 = *(_QWORD *)(v315 + 8);
              }
              while (v315 != v317);
              v315 = v317;
            }
LABEL_481:
            v321 = *(_QWORD *)(*((_QWORD *)v409 + 37) + 288);
            v322 = *(_QWORD *)(v321 + 368);
            v323 = *(unsigned int *)(v321 + 384);
            if ((_DWORD)v323)
            {
              LODWORD(v324) = ((v315 >> 4) ^ (v315 >> 9)) & (v323 - 1);
              v325 = (uint64_t *)(v322 + 16 * v324);
              v326 = *v325;
              if (v315 != *v325)
              {
                v327 = 1;
                do
                {
                  if (v326 == -4096)
                    goto LABEL_503;
                  v328 = v324 + v327++;
                  v324 = v328 & (v323 - 1);
                  v326 = *(_QWORD *)(v322 + 16 * v324);
                }
                while (v315 != v326);
                v325 = (uint64_t *)(v322 + 16 * v324);
              }
            }
            else
            {
LABEL_503:
              v325 = (uint64_t *)(v322 + 16 * v323);
            }
            v343 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v409 + 33) + 232)
                             + 8 * (((unint64_t)**((unsigned int **)v307 + 4) >> 8) & 0xFFF));
            v344 = v325[1];
            v345 = v344 & 0xFFFFFFFFFFFFFFF8;
            v346 = (v344 >> 1) & 3;
            while (2)
            {
              if ((*(_QWORD *)(v313 + 112) & v343) != 0)
                goto LABEL_520;
              v347 = *(_DWORD *)(v313 + 8);
              v348 = *(_QWORD **)v313;
              if (v347)
              {
                v349 = v348[3 * v347 - 2];
                v350 = *(_DWORD *)(v345 + 24) | v346;
                v351 = (v349 >> 1) & 3 | *(_DWORD *)((v349 & 0xFFFFFFFFFFFFFFF8) + 24);
                v352 = *(_QWORD **)v313;
                v353 = *(unsigned int *)(v313 + 8);
                if (v350 < v351)
                {
                  do
                  {
                    v354 = v353 >> 1;
                    v355 = v352[3 * (v353 >> 1) + 1];
                    LODWORD(v355) = (v355 >> 1) & 3 | *(_DWORD *)((v355 & 0xFFFFFFFFFFFFFFF8) + 24);
                    v353 -= (v353 >> 1) + 1;
                    v356 = v350 >= v355;
                    if (v350 >= v355)
                      v357 = v354 + 1;
                    else
                      v357 = 0;
                    v352 += 3 * v357;
                    if (!v356)
                      v353 = v354;
                  }
                  while (v353);
LABEL_517:
                  v358 = &v348[3 * v347];
                  if (v352 == v358
                    || ((*v352 >> 1) & 3 | *(_DWORD *)((*v352 & 0xFFFFFFFFFFFFFFF8) + 24)) > (*(_DWORD *)(v345 + 24) | v346))
                  {
                    v352 = v358;
                  }
                  llvm::LiveRange::MergeValueNumberInto(v313, v352[5], v352[2]);
LABEL_520:
                  v313 = *(_QWORD *)(v313 + 104);
                  if (!v313)
                  {
                    llvm::LiveIntervals::shrinkToUses(*((_QWORD **)v409 + 37), v312, 0);
                    goto LABEL_523;
                  }
                  continue;
                }
              }
              else
              {
                v347 = 0;
              }
              break;
            }
            v352 = &v348[3 * v347];
            goto LABEL_517;
          }
          v329 = *((_QWORD *)v409 + 37);
          v330 = *(_QWORD *)(v329 + 408);
          v331 = *(_QWORD *)(v330 + 8 * v311);
          if (v331)
          {
            v332 = *(_QWORD *)(v331 + 104);
            if (v332)
            {
              do
              {
                v359 = *(_QWORD *)(v332 + 96);
                v360 = *(_QWORD *)(v332 + 104);
                *(_QWORD *)(v332 + 96) = 0;
                if (v359)
                {
                  sub_1C47655E8(v359, *(_QWORD **)(v359 + 8));
                  MEMORY[0x1CAA32FC0](v359, 0x1020C4062D53EE8);
                }
                v361 = *(void **)(v332 + 64);
                if (v361 != (void *)(v332 + 80))
                  free(v361);
                if (*(_QWORD *)v332 != v332 + 16)
                  free(*(void **)v332);
                v332 = v360;
              }
              while (v360);
            }
            v333 = *(_QWORD *)(v331 + 96);
            *(_QWORD *)(v331 + 96) = 0;
            *(_QWORD *)(v331 + 104) = 0;
            if (v333)
            {
              sub_1C47655E8(v333, *(_QWORD **)(v333 + 8));
              MEMORY[0x1CAA32FC0](v333, 0x1020C4062D53EE8);
            }
            v334 = *(void **)(v331 + 64);
            if (v334 != (void *)(v331 + 80))
              free(v334);
            if (*(_QWORD *)v331 != v331 + 16)
              free(*(void **)v331);
            MEMORY[0x1CAA32FC0](v331, 0x10A0C408DA535C6);
            v330 = *(_QWORD *)(v329 + 408);
          }
          *(_QWORD *)(v330 + 8 * v311) = 0;
          v335 = *((_QWORD *)v409 + 37);
          v336 = (llvm::LiveInterval *)sub_1C4851220(v335, v310);
          v337 = *(_QWORD *)(v335 + 304);
          v338 = *(_QWORD *)(v335 + 248);
          *(_QWORD *)v337 = v338;
          *(_QWORD *)(v337 + 8) = *(_QWORD *)(v338 + 40);
          *(_OWORD *)(v337 + 16) = *(_OWORD *)(v335 + 288);
          *(_QWORD *)(v337 + 32) = v335 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v337);
          *(_DWORD *)(v337 + 184) = 0;
          v339 = *(_QWORD *)(v335 + 256);
          v89 = *(_BYTE *)(v339 + 16) == 0;
          v340 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v339 + 24) + 16 * (*((_DWORD *)v336 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                    + 34);
          v342 = !v89 && v340 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v335 + 304), v336, v342);
          llvm::LiveIntervals::computeDeadValues(v335, (uint64_t)v336, 0);
        }
      }
LABEL_523:
      sub_1C52D3A5C((uint64_t)&v421);
      v131 = (int32x2_t *)v409;
      v130 = v307;
LABEL_524:
      sub_1C52D0848(v131, (uint64_t)v130);
      v24 = (uint64_t)v410;
      v411 = v410;
      v395 = 1;
    }
    while (v24 != v389);
LABEL_560:
    v14 = *(_QWORD *)(v386 + 8);
  }
  while (v14 != v384);
LABEL_588:
  sub_1C52D4B9C((uint64_t)&v421);
  if ((v421 & 1) == 0)
    MEMORY[0x1CAA32FB4](v422, 8);
  return v395 & 1;
}

void sub_1C52D0848(int32x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  signed int v5;
  unsigned int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t v11;
  int32x2_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int v18;
  _QWORD *v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  BOOL v25;
  int *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[2];

  v33[1] = *MEMORY[0x1E0C80C00];
  if (**(_WORD **)(a2 + 16) == 19)
  {
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_DWORD *)(v4 + 4);
    if (v5 < 1)
      return;
    v6 = sub_1C52D47B8((int *)*(unsigned int *)(v4 + 36), (uint64_t)&a1[56]);
    if (v5 == v6)
      return;
    v7 = v6 && (v6 | v5) >> 30 == 0;
    if (v7 && llvm::MCRegisterInfo::regsOverlap((_QWORD *)(*(_QWORD *)&a1[33] + 8), v5, v6))
      return;
  }
  v8 = *(unsigned int *)(a2 + 40);
  if (!(_DWORD)v8)
    return;
  v9 = *(_QWORD *)(a2 + 32);
  v10 = v9 + 32 * v8;
  v29 = v10;
  do
  {
    if (*(_DWORD *)v9 != 12
      && (*(_DWORD *)v9 || (*(_DWORD *)v9 & 0x1000000) == 0 || *(int *)(v9 + 4) < 1))
    {
      goto LABEL_52;
    }
    v11 = a1[33];
    v31 = v33;
    v32 = 0x200000000;
    v12 = a1[56];
    v13 = a1[58].u32[0];
    v14 = (unsigned int *)(*(_QWORD *)&v12 + 8 * v13);
    if (a1[57].i32[0])
    {
      if (a1[58].i32[0])
      {
        v15 = 8 * v13;
        v16 = (unsigned int *)a1[56];
        while (*v16 >= 0xFFFFFFFE)
        {
          v16 += 2;
          v15 -= 8;
          if (!v15)
            goto LABEL_21;
        }
      }
      else
      {
        v16 = (unsigned int *)a1[56];
      }
    }
    else
    {
LABEL_21:
      v16 = (unsigned int *)(*(_QWORD *)&v12 + 8 * v13);
    }
    v17 = (unsigned int *)(*(_QWORD *)&v12 + 8 * v13);
    if (v16 == v17)
      goto LABEL_52;
    v18 = 0;
    v19 = (_QWORD *)(*(_QWORD *)&v11 + 8);
    do
    {
      v20 = v16[1];
      if ((v20 & 0x80000000) == 0)
      {
        v21 = *v16;
        if (*(_BYTE *)v9)
        {
          if (((*(_DWORD *)(*(_QWORD *)(v9 + 16) + ((v20 >> 3) & 0x1FFFFFFC)) >> v20) & 1) == 0)
            goto LABEL_30;
        }
        else
        {
          v22 = *(_DWORD *)(v9 + 4);
          if ((_DWORD)v20 == v22
            || ((v20 - 1) <= 0x3FFFFFFE ? (v25 = v22 - 1 > 0x3FFFFFFE) : (v25 = 1),
                !v25 && llvm::MCRegisterInfo::regsOverlap(v19, v20, v22)))
          {
LABEL_30:
            if (v18 >= HIDWORD(v32))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v33, v18 + 1, 4);
              v18 = v32;
            }
            *((_DWORD *)v31 + v18) = v21;
            v18 = v32 + 1;
            LODWORD(v32) = v32 + 1;
          }
        }
      }
      v23 = v16 + 2;
      while (v23 != v14)
      {
        v24 = *v23;
        v23 += 2;
        if (v24 <= 0xFFFFFFFD)
        {
          v16 = v23 - 2;
          goto LABEL_38;
        }
      }
      v16 = v14;
LABEL_38:
      ;
    }
    while (v16 != v17);
    v26 = (int *)v31;
    if (v18)
    {
      v27 = 4 * v18;
      do
      {
        v28 = *v26++;
        v30 = v28;
        sub_1C4978224(a1 + 56, &v30);
        v27 -= 4;
      }
      while (v27);
      v26 = (int *)v31;
    }
    v10 = v29;
    if (v26 != (int *)v33)
      free(v26);
LABEL_52:
    v9 += 32;
  }
  while (v9 != v10);
}

uint64_t sub_1C52D0B00(uint64_t a1, uint64_t *a2, unint64_t *a3, unsigned int a4, unsigned int a5, unsigned int *a6, char a7)
{
  uint64_t *v10;
  uint64_t v11;
  llvm::MachineInstr *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int *v22;
  unsigned int v23;
  unsigned int v24;
  char v25;
  _BOOL4 v26;
  int v27;
  int v28;
  uint64_t v29;
  _BOOL4 v30;
  int *v31;
  uint64_t v32;
  _BOOL4 v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  _BOOL4 v38;
  int v39;
  _BOOL4 v40;
  char v41;
  unsigned int v42;
  _BOOL4 v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t result;
  unsigned int v49;
  char v50;
  _BOOL4 v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  llvm::LiveInterval *v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  unsigned int v75;
  _QWORD *v76;
  uint64_t v77;
  unsigned int v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  BOOL v83;
  unint64_t v84;
  unint64_t v85;
  BOOL v86;
  unsigned __int16 *v87;
  int v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  int v97;
  int v98;
  unsigned int v99;
  unsigned int v100;
  unsigned int v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  _BYTE **v110;
  int v111;
  uint64_t v112;
  llvm::LiveInterval *v113;
  uint64_t v114;
  unsigned int v115;
  unint64_t v116;
  uint64_t v117;
  _BYTE *v118;
  _BYTE *v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  int v123;
  unsigned int v124;
  _QWORD *v125;
  _BYTE *v126;
  _QWORD *v127;
  int v128;
  BOOL v129;
  unsigned int v130;
  _QWORD *v131;
  _QWORD *v132;
  unint64_t *i;
  _QWORD *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  unsigned int v140;
  _QWORD *v141;
  uint64_t v142;
  unsigned int v143;
  _QWORD *v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  BOOL v148;
  unint64_t v149;
  uint64_t v150;
  BOOL v151;
  unsigned int v152;
  uint64_t v153;
  unint64_t v154;
  BOOL v155;
  int v156;
  uint64_t v158;
  unsigned int *v159;
  unsigned int *v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  void **v167;
  uint64_t v168;
  int v169;
  uint64_t v170;
  int v171;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  int v178;
  int v179;
  int v180;
  _BOOL4 v181;
  _BOOL4 v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  unsigned __int16 *v186;
  __int16 v187;
  unint64_t v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t IncompleteVirtualRegister;
  uint64_t v200;
  int v201;
  _BYTE **v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  unint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  void *v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  int v221;
  uint64_t v222;
  int v223;
  unsigned int v224;
  _QWORD *v225;
  void *v226;
  _QWORD *v227;
  int v228;
  BOOL v229;
  unsigned int v230;
  _QWORD *v231;
  _QWORD *v232;
  void *v233;
  unsigned int v234;
  _QWORD *v235;
  void *v236;
  _QWORD *v237;
  int v238;
  BOOL v239;
  unsigned int v240;
  _QWORD *v241;
  _QWORD *v242;
  uint64_t RegisterDefOperandIdx;
  uint64_t RegisterUseOperandIdx;
  llvm::MachineInstr *v245;
  unsigned int v246;
  uint64_t v247;
  uint64_t v248;
  llvm::MachineInstr *v249;
  unsigned int v250;
  uint64_t v251;
  unsigned int v252;
  uint64_t v253;
  _DWORD *v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  _QWORD *v262;
  unsigned int v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  int v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  int v273;
  int v274;
  int32x2_t *v275;
  int32x2_t v276;
  uint64_t v277;
  uint64_t v278;
  llvm::MachineInstr **v279;
  llvm::MachineInstr *v280;
  int v281;
  int v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  llvm::MachineInstr *v287;
  int v288;
  uint64_t v289;
  unsigned int v290;
  uint64_t v291;
  llvm::MachineInstr **v292;
  llvm::MachineInstr *v293;
  int v294;
  int v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  unsigned __int16 *v299;
  int v300;
  __int16 v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  unsigned int *v306;
  unsigned int *v307;
  unsigned int v308;
  unsigned int v309;
  unsigned int v310;
  unsigned int *v311;
  uint64_t v312;
  unsigned int v313;
  unsigned int *v314;
  uint64_t v315;
  unsigned int v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  _DWORD *v322;
  unsigned int v323;
  unsigned int v324;
  _QWORD *v325;
  uint64_t v326;
  unsigned int *v327;
  unsigned int v328;
  _QWORD *v329;
  uint64_t v330;
  unsigned int *v331;
  unsigned int v332;
  _DWORD *v333;
  uint64_t v334;
  _DWORD *v335;
  uint64_t v336;
  _DWORD *v337;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t *v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  unsigned int *v356;
  unsigned int v357;
  unsigned int v358;
  llvm::MachineInstr *v359;
  uint64_t v360;
  uint64_t v361;
  _DWORD *v362;
  uint64_t v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  void **v367;
  uint64_t v368;
  uint64_t v369;
  unint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  unint64_t *v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t v377;
  unint64_t v378;
  llvm::LiveIntervals *v379;
  uint64_t v380;
  unint64_t *v381;
  uint64_t v382;
  unint64_t *v383;
  int v384;
  unint64_t v386;
  unsigned int v387;
  _DWORD *v388;
  uint64_t v389;
  unsigned int v390;
  uint64_t v391;
  int v392;
  unint64_t *v393;
  uint64_t v394;
  unint64_t *v395;
  unsigned int v396;
  uint64_t v397;
  unsigned __int16 *v398;
  int v399;
  __int16 v401;
  uint64_t v402;
  uint64_t v403;
  char v404;
  uint64_t v405;
  unsigned int *v406;
  unsigned int *v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  unsigned int *v411;
  uint64_t v412;
  unsigned int v413;
  BOOL v414;
  unsigned int *v415;
  _QWORD *v416;
  uint64_t v417;
  unsigned int v418;
  unsigned int v419;
  unsigned int v420;
  BOOL v421;
  unsigned int *v422;
  uint64_t v423;
  unsigned int v424;
  BOOL v425;
  unsigned int *v426;
  _QWORD *v427;
  uint64_t v428;
  unsigned int v429;
  BOOL v430;
  uint64_t v431;
  unsigned int *v432;
  _QWORD *v433;
  uint64_t v434;
  unsigned int v435;
  unsigned int v436;
  unsigned int v437;
  BOOL v438;
  uint64_t v439;
  uint64_t v440;
  unint64_t *v441;
  unint64_t *v442;
  unint64_t v443;
  unint64_t v444;
  unint64_t *v445;
  unint64_t *v446;
  unint64_t *v447;
  int v448;
  uint64_t v450;
  llvm::LiveIntervals *v452;
  int *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  int v457;
  int v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  int v464;
  int v466;
  uint64_t v467;
  unsigned int v468;
  int v469;
  unsigned int *v470;
  uint64_t *v471;
  llvm::MachineInstr *v472;
  uint64_t v473;
  int v474;
  unsigned int *v475;
  uint64_t *v476;
  unsigned int *v477;
  uint64_t v478;
  unint64_t v479;
  unsigned int v480;
  unsigned int v481;
  unsigned int v482;
  unsigned int v483;
  unsigned int v484;
  unsigned int v485;
  unsigned int v486;
  unsigned int v487;
  unsigned int v488;
  unsigned int v489;
  unsigned int *v490;
  unsigned int v491;
  _DWORD *v492;
  uint64_t v493;
  unsigned int *v494;
  unsigned int *v495;
  unint64_t *v496;
  llvm::MachineInstr *v497;
  char v498;
  unint64_t *v499;
  int v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  unsigned int v504;
  uint64_t v505;
  uint64_t v506;
  unint64_t v507;
  _QWORD *v508;
  _BOOL4 v509;
  _QWORD *v510;
  int *v511;
  unsigned int v512;
  uint64_t v513;
  unsigned int *v514;
  int *v515;
  unsigned int v516;
  unint64_t *v517;
  unsigned int v518;
  unsigned int *v519;
  unsigned int *v520;
  uint64_t *v521;
  uint64_t *v522;
  uint64_t *v523;
  char v524;
  _QWORD *v525;
  _QWORD *v526;
  _DWORD *v527;
  _QWORD *v528;
  unsigned int v529;
  int *v530;
  int v531;
  int *v532;
  unsigned int v534;
  unsigned int v535;
  _BOOL4 v536;
  llvm::MachineInstr *v537;
  BOOL v538;
  int v539;
  void *v540;
  uint64_t v541;
  _BYTE v542[16];
  void *v543;
  uint64_t v544;
  _BYTE *v545;
  _BYTE *v546;
  BOOL v547[8];
  uint64_t v548;
  uint64_t v549;
  unsigned int *v550;
  uint64_t v551;
  uint64_t v552;
  _QWORD *v553;
  uint64_t v554;
  _QWORD v555[3];

  v555[1] = *MEMORY[0x1E0C80C00];
  if (!*(_DWORD *)(a1 + 312))
    return 0;
  v10 = a2;
  v11 = a1;
  v12 = (llvm::MachineInstr *)*a2;
  v13 = *(_QWORD *)(*a2 + 32);
  v14 = a5;
  v15 = (int *)*(unsigned int *)(v13 + 32 * a5 + 4);
  v16 = a4;
  v534 = *(_DWORD *)(v13 + 32 * a4 + 4);
  v536 = sub_1C52D4828(*a2, v534, *(_QWORD *)(a1 + 280), *(_QWORD *)(a1 + 296), 1);
  if ((v15 & 0x80000000) != 0)
    sub_1C52D3B58(v11, v15);
  v17 = *a6;
  LODWORD(v553) = a4;
  v18 = *((_QWORD *)v12 + 2);
  v19 = (uint64_t)v12;
  v537 = v12;
  if ((*(_BYTE *)(v18 + 11) & 2) == 0)
    goto LABEL_66;
  v530 = v15;
  v20 = *((_QWORD *)v12 + 4);
  v21 = (int *)*(unsigned int *)(v20 + 32 * v14 + 4);
  v22 = (int *)*(unsigned int *)(v20 + 32 * v16 + 4);
  v23 = *(unsigned __int16 *)(v18 + 2);
  v24 = *(unsigned __int8 *)(v18 + 4);
  LODWORD(v550) = v24;
  if (v24 >= v23)
  {
    v15 = v530;
    goto LABEL_66;
  }
  v515 = v21;
  v519 = a6;
  v504 = v17;
  v521 = v10;
  v25 = 0;
  v505 = v11 + 448;
  v506 = v11 + 472;
  v26 = v536;
LABEL_7:
  v524 = v25;
  v511 = v22;
  v27 = !v26;
  do
  {
    if (v24 == (_DWORD)v553)
      goto LABEL_47;
    if (*(_BYTE *)(*(_QWORD *)(v19 + 32) + 32 * v24))
      goto LABEL_47;
    v28 = (*(uint64_t (**)(_QWORD, llvm::MachineInstr *, _QWORD **, unsigned int **))(**(_QWORD **)(v11 + 256)
                                                                                              + 200))(*(_QWORD *)(v11 + 256), v537, &v553, &v550);
    v19 = (uint64_t)v537;
    if (!v28)
      goto LABEL_47;
    v29 = *((_QWORD *)v537 + 4) + 32 * v550;
    v22 = (int *)*(unsigned int *)(v29 + 4);
    v30 = sub_1C52D4828((uint64_t)v537, *(_DWORD *)(v29 + 4), *(_QWORD *)(v11 + 280), *(_QWORD *)(v11 + 296), 0);
    v19 = (uint64_t)v537;
    v26 = v30;
    if ((v27 & v30 & 1) != 0)
      goto LABEL_12;
    if (!*(_DWORD *)(v11 + 312))
      goto LABEL_47;
    v33 = sub_1C52D4048((uint64_t)v537, v22, *(_QWORD *)(v11 + 296));
    v19 = (uint64_t)v537;
    if (!v33)
      goto LABEL_47;
    v34 = sub_1C52D47B8(v515, v506);
    if (!v34)
      goto LABEL_41;
    v35 = v34;
    v501 = v11;
    v36 = sub_1C52D47B8(v511, v505);
    v37 = sub_1C52D47B8(v22, v505);
    if (v36)
    {
      if (v36 == v35)
      {
        v38 = 0;
        v39 = 0;
        goto LABEL_25;
      }
      if (!((v36 | v35) >> 30))
      {
        v38 = !llvm::MCRegisterInfo::regsOverlap((_QWORD *)(*(_QWORD *)(v501 + 264) + 8), v36, v35);
        v39 = v38;
        goto LABEL_25;
      }
      v38 = 1;
    }
    else
    {
      v38 = 0;
    }
    v39 = 1;
LABEL_25:
    v19 = (uint64_t)v537;
    if (v37)
    {
      if (v37 == v35)
      {
        v40 = 1;
        v41 = 1;
      }
      else if ((v37 | v35) >> 30)
      {
        v40 = 0;
        v41 = 0;
      }
      else
      {
        v42 = v35;
        v43 = v38;
        v500 = v39;
        v40 = llvm::MCRegisterInfo::regsOverlap((_QWORD *)(*(_QWORD *)(v501 + 264) + 8), v37, v42);
        v39 = v500;
        v38 = v43;
        v19 = (uint64_t)v537;
        v41 = v40;
      }
    }
    else
    {
      v41 = 0;
      v40 = 1;
    }
    if (v36)
      v41 = 0;
    v11 = v501;
    if ((v41 & 1) == 0 && (!v38 || !v40))
    {
      if (v37)
        v44 = 1;
      else
        v44 = v39;
      if (v44 != 1 || !v38 && !v40)
        goto LABEL_47;
LABEL_41:
      LODWORD(v543) = 0;
      if (!sub_1C52D497C(v11, v22, v504, (unsigned int *)&v543))
        goto LABEL_46;
      LODWORD(v540) = 0;
      if (sub_1C52D497C(v11, v511, v504, (unsigned int *)&v540)
        && (v45 = dword_1ED803898, (sub_1C52D4A94(v11, v22, (int)v515, dword_1ED803898) & 1) == 0))
      {
        if (sub_1C52D4A94(v11, v511, (int)v515, v45))
        {
LABEL_46:
          v19 = (uint64_t)v537;
          goto LABEL_47;
        }
        v547[0] = 0;
        if ((*(unsigned int (**)(_QWORD, llvm::MachineInstr *, BOOL *))(**(_QWORD **)(v11 + 256) + 208))(*(_QWORD *)(v11 + 256), v537, v547))
        {
          v19 = (uint64_t)v537;
          if (!v547[0])
            goto LABEL_47;
        }
        else
        {
          v19 = (uint64_t)v537;
          if (!(_DWORD)v540 || !(_DWORD)v543 || v543 <= v540)
            goto LABEL_47;
        }
      }
      else
      {
        v19 = (uint64_t)v537;
      }
    }
LABEL_12:
    v31 = (int *)*(unsigned int *)(*(_QWORD *)(v19 + 32) + 32 * v550 + 4);
    v32 = llvm::TargetInstrInfo::commuteInstruction(*(llvm::TargetInstrInfo **)(v11 + 256), v537, 0, v553, v550);
    v19 = (uint64_t)v537;
    if (v32)
    {
      v46 = sub_1C52D47B8(v31, v505);
      if (v46)
      {
        LODWORD(v543) = *(_DWORD *)(*((_QWORD *)v537 + 4) + 32 * v14 + 4);
        sub_1C61482A0(v505, (int *)&v543)[1] = v46;
      }
      v19 = (uint64_t)v537;
      v47 = *((_QWORD *)v537 + 2);
      v23 = *(unsigned __int16 *)(v47 + 2);
      v24 = (_DWORD)v550 + 1;
      LODWORD(v550) = v24;
      v25 = 1;
      if (v24 >= v23)
      {
        a6 = v519;
        v10 = v521;
        v15 = v530;
        goto LABEL_63;
      }
      goto LABEL_7;
    }
LABEL_47:
    v24 = (_DWORD)v550 + 1;
    LODWORD(v550) = v24;
  }
  while (v24 < v23);
  a6 = v519;
  v10 = v521;
  v15 = v530;
  if ((v524 & 1) != 0)
  {
    v47 = *(_QWORD *)(v19 + 16);
LABEL_63:
    result = 0;
    if ((*(_BYTE *)(v47 + 11) & 4) == 0 || (a7 & 1) != 0)
      return result;
    v49 = *(_DWORD *)(*(_QWORD *)(v19 + 32) + 32 * v16 + 4);
    v50 = 1;
    v51 = sub_1C52D4828(v19, v49, *(_QWORD *)(v11 + 280), *(_QWORD *)(v11 + 296), 1);
    v19 = (uint64_t)v537;
    v536 = v51;
    v52 = v49;
    goto LABEL_119;
  }
LABEL_66:
  if ((a7 & 1) != 0)
    return 0;
  if (!byte_1ED8037D8)
  {
    v50 = 0;
    goto LABEL_84;
  }
  v53 = *(_QWORD *)(v11 + 288);
  v52 = v534;
  if (!v53 && !*(_QWORD *)(v11 + 296))
  {
    v50 = 0;
    goto LABEL_119;
  }
  v54 = a6;
  v55 = *v10;
  v56 = *(_QWORD *)(v11 + 328);
  v57 = *(unsigned int *)(v11 + 344);
  if ((_DWORD)v57)
  {
    LODWORD(v58) = ((v55 >> 4) ^ (v55 >> 9)) & (v57 - 1);
    v59 = (uint64_t *)(v56 + 16 * v58);
    v60 = *v59;
    if (v55 != *v59)
    {
      v61 = 1;
      while (v60 != -4096)
      {
        v62 = v58 + v61++;
        v58 = v62 & (v57 - 1);
        v60 = *(_QWORD *)(v56 + 16 * v58);
        if (v55 == v60)
        {
          v59 = (uint64_t *)(v56 + 16 * v58);
          goto LABEL_77;
        }
      }
      goto LABEL_76;
    }
  }
  else
  {
LABEL_76:
    v59 = (uint64_t *)(v56 + 16 * v57);
  }
LABEL_77:
  if (v59 == (uint64_t *)(v56 + 16 * v57))
    goto LABEL_118;
  v63 = *(_QWORD *)(v11 + 296);
  if (v63)
  {
    if ((v534 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v63 + 416)
      || (v64 = *(llvm::LiveInterval **)(*(_QWORD *)(v63 + 408) + 8 * (v534 & 0x7FFFFFFF))) == 0)
    {
      v64 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(v11 + 296), v534);
      v453 = v15;
      v454 = *(_QWORD *)(v63 + 304);
      v455 = *(_QWORD *)(v63 + 248);
      *(_QWORD *)v454 = v455;
      *(_QWORD *)(v454 + 8) = *(_QWORD *)(v455 + 40);
      *(_OWORD *)(v454 + 16) = *(_OWORD *)(v63 + 288);
      *(_QWORD *)(v454 + 32) = v63 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v454);
      *(_DWORD *)(v454 + 184) = 0;
      v15 = v453;
      v52 = v534;
      v456 = *(_QWORD *)(v63 + 256);
      v86 = *(_BYTE *)(v456 + 16) == 0;
      v457 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v456 + 24) + 16 * (*((_DWORD *)v64 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                + 34);
      v459 = !v86 && v457 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v63 + 304), v64, v459);
      llvm::LiveIntervals::computeDeadValues(v63, (uint64_t)v64, 0);
      v19 = (uint64_t)v537;
      v63 = *(_QWORD *)(v11 + 296);
    }
    v65 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 288) + 392)
                    + 16 * *(unsigned int *)(*(_QWORD *)(v11 + 320) + 24)
                    + 8);
    v66 = (v65 >> 1) & 3;
    v67 = v65 & 0xFFFFFFFFFFFFFFF8;
    if (v66)
      v68 = v67 | (2 * (v66 - 1));
    else
      v68 = *(_QWORD *)v67 | 6;
    v75 = *((_DWORD *)v64 + 2);
    v76 = *(_QWORD **)v64;
    if (v75)
    {
      v77 = v76[3 * v75 - 2];
      v78 = *(_DWORD *)((v68 & 0xFFFFFFFFFFFFFFF8) + 24) | (v68 >> 1) & 3;
      if (v78 < ((v77 >> 1) & 3 | *(_DWORD *)((v77 & 0xFFFFFFFFFFFFFFF8) + 24)))
      {
        v79 = *(_QWORD **)v64;
        v80 = *((unsigned int *)v64 + 2);
        do
        {
          v81 = v80 >> 1;
          v82 = v79[3 * (v80 >> 1) + 1];
          LODWORD(v82) = (v82 >> 1) & 3 | *(_DWORD *)((v82 & 0xFFFFFFFFFFFFFFF8) + 24);
          v80 -= (v80 >> 1) + 1;
          v83 = v78 >= v82;
          if (v78 >= v82)
            v84 = v81 + 1;
          else
            v84 = 0;
          v79 += 3 * v84;
          if (!v83)
            v80 = v81;
        }
        while (v80);
LABEL_105:
        if (v79 == &v76[3 * v75]
          || ((*v79 >> 1) & 3 | *(_DWORD *)((*v79 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((v68 & 0xFFFFFFFFFFFFFFF8) + 24) | (v68 >> 1) & 3))
        {
          v85 = *(v79 - 2);
          if (v85 >= 8)
          {
            v74 = *(_QWORD *)((v85 & 0xFFFFFFFFFFFFFFF8) + 16);
            goto LABEL_109;
          }
        }
        goto LABEL_118;
      }
    }
    else
    {
      v75 = 0;
    }
    v79 = &v76[3 * v75];
    goto LABEL_105;
  }
  v69 = (_QWORD *)(v53 + 248);
  v70 = v534 & 0x7FFFFFFF;
  if (v70 >= *(unsigned int *)(v53 + 256))
  {
    sub_1C61E5C60((uint64_t *)(v53 + 248), v70 + 1, v53 + 264);
    v19 = (uint64_t)v537;
  }
  v71 = *v69 + 56 * v70;
  v72 = *(uint64_t **)(v71 + 32);
  v73 = *(uint64_t **)(v71 + 40);
  if (v72 == v73)
    goto LABEL_118;
  while (1)
  {
    v74 = *v72;
    if (*(_QWORD *)(*v72 + 24) == *(_QWORD *)(v11 + 320))
      break;
    if (++v72 == v73)
      goto LABEL_118;
  }
LABEL_109:
  v86 = !v74 || v55 == v74;
  if (v86 || ((v87 = *(unsigned __int16 **)(v74 + 16), v88 = *v87, v88 != 11) ? (v89 = v88 == 19) : (v89 = 1), v89))
  {
LABEL_118:
    v50 = 0;
    a6 = v54;
    goto LABEL_119;
  }
  if (llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v74))
    goto LABEL_215;
  v150 = *((_QWORD *)v87 + 1);
  v151 = (*(_WORD *)(v74 + 44) & 0xC) != 0 && (*(_WORD *)(v74 + 44) & 4) == 0;
  v19 = (uint64_t)v537;
  if (v151)
  {
    if ((v150 & 0x80) != 0)
      goto LABEL_118;
    v283 = v74;
    while ((*(_WORD *)(v283 + 44) & 8) != 0)
    {
      v283 = *(_QWORD *)(v283 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v283 + 16) + 8) & 0x80) != 0)
        goto LABEL_118;
    }
    if ((v150 & 0x400) != 0)
      goto LABEL_118;
    v284 = v74;
    while ((*(_WORD *)(v284 + 44) & 8) != 0)
    {
      v284 = *(_QWORD *)(v284 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v284 + 16) + 9) & 4) != 0)
        goto LABEL_118;
    }
    if ((v150 & 0x200) != 0)
      goto LABEL_118;
    v285 = v74;
    while ((*(_WORD *)(v285 + 44) & 8) != 0)
    {
      v285 = *(_QWORD *)(v285 + 8);
      if ((*(_BYTE *)(*(_QWORD *)(v285 + 16) + 9) & 2) != 0)
        goto LABEL_118;
    }
  }
  else if ((v150 & 0x680) != 0)
  {
    goto LABEL_118;
  }
  LODWORD(v550) = 0;
  if ((sub_1C52D4348((llvm::MachineInstr *)v74, v52, &v550) & 1) != 0
    || (v547[0] = 1, !llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v55, *(llvm::AAResults **)(v11 + 304), v547))|| (*(unsigned int (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(v11 + 256) + 960))(*(_QWORD *)(v11 + 256), *(_QWORD *)(v11 + 272), v55, 0) > 1)
  {
LABEL_215:
    v50 = 0;
    a6 = v54;
    v19 = (uint64_t)v537;
    goto LABEL_119;
  }
  v543 = &v545;
  v544 = 0x200000000;
  v540 = v542;
  v541 = 0x200000000;
  v553 = v555;
  v554 = 0x200000000;
  v361 = *(unsigned int *)(v55 + 40);
  v532 = v15;
  if (!(_DWORD)v361)
    goto LABEL_635;
  v362 = *(_DWORD **)(v55 + 32);
  v363 = 32 * v361;
  while (2)
  {
    if (!*v362)
    {
      v364 = v362[1];
      if (v364)
      {
        if ((*v362 & 0x1000000) != 0)
        {
          v366 = v554;
          v367 = (void **)&v553;
          if (v554 >= (unint64_t)HIDWORD(v554))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v553, (uint64_t)v555, v554 + 1, 4);
            v366 = v554;
          }
        }
        else
        {
          v365 = v544;
          if (v544 >= (unint64_t)HIDWORD(v544))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v543, (uint64_t)&v545, v544 + 1, 4);
            v365 = v544;
          }
          *((_DWORD *)v543 + v365) = v364;
          LODWORD(v544) = v544 + 1;
          if (v364 == v52)
            goto LABEL_579;
          if (((*v362 >> 26) & ~HIBYTE(*v362) & 1) == 0)
          {
            v368 = *(_QWORD *)(v11 + 296);
            if (!v368 || !sub_1C52D4048(v55, v364, v368))
              goto LABEL_579;
          }
          v366 = v541;
          v367 = &v540;
          if (v541 >= (unint64_t)HIDWORD(v541))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v540, (uint64_t)v542, v541 + 1, 4);
            v366 = v541;
          }
        }
        *((_DWORD *)*v367 + v366) = v364;
        ++*((_DWORD *)v367 + 2);
        v52 = v534;
      }
    }
LABEL_579:
    v362 += 8;
    v363 -= 32;
    if (v363)
      continue;
    break;
  }
  if (!v55)
  {
    v380 = 0;
    v498 = 1;
LABEL_651:
    while ((*(_WORD *)(v380 + 44) & 8) != 0)
      v380 = *(_QWORD *)(v380 + 8);
    goto LABEL_652;
  }
LABEL_635:
  v498 = 0;
  v380 = v55;
  if ((*(_BYTE *)v55 & 4) == 0)
    goto LABEL_651;
LABEL_652:
  v381 = *(unint64_t **)(v380 + 8);
  v382 = *(_QWORD *)(v11 + 320);
  v383 = (unint64_t *)(v382 + 48);
  v523 = v10;
  v499 = v381;
  if (v381 == (unint64_t *)(v382 + 48))
    goto LABEL_680;
  while (1)
  {
    v384 = *(unsigned __int16 *)v381[2];
    if ((v384 - 13) < 5 || v384 == 23)
    {
      if ((*(_BYTE *)v381 & 4) == 0)
      {
        while ((*((_WORD *)v381 + 22) & 8) != 0)
          v381 = (unint64_t *)v381[1];
      }
      v381 = (unint64_t *)v381[1];
      if (v381 != v383)
        continue;
      v384 = *(unsigned __int16 *)v383[2];
    }
    else
    {
      v383 = v381;
    }
    if (v384 != 19)
    {
      v381 = v383;
      goto LABEL_680;
    }
    v503 = v382;
    if (!(_DWORD)v554)
      break;
    v386 = 0;
    v513 = v554;
    v517 = v383;
    v507 = v383[4];
    v387 = *(_DWORD *)(v507 + 36);
    v388 = v553;
    v528 = (_QWORD *)(*(_QWORD *)(v11 + 264) + 8);
    v389 = 4 * v554;
    while (1)
    {
      v390 = v388[v386 / 4];
      if (v390 == v387
        || v387 - 1 <= 0x3FFFFFFE && v390 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v528, v390, v387))
      {
        break;
      }
      v386 += 4;
      if (v389 == v386)
      {
        v381 = v517;
        goto LABEL_679;
      }
    }
    v391 = v513;
    v392 = *(_DWORD *)(v507 + 4);
    if (v513 >= HIDWORD(v554))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v553, (uint64_t)v555, v513 + 1, 4);
      v391 = v554;
      v388 = v553;
    }
    v393 = v517;
    v388[v391] = v392;
    LODWORD(v554) = v554 + 1;
    if ((*(_BYTE *)v517 & 4) == 0)
    {
      while ((*((_WORD *)v393 + 22) & 8) != 0)
        v393 = (unint64_t *)v393[1];
    }
    v381 = (unint64_t *)v393[1];
    v382 = *(_QWORD *)(v11 + 320);
    v383 = (unint64_t *)(v382 + 48);
    if (v381 == (unint64_t *)(v382 + 48))
      goto LABEL_680;
  }
  v381 = v383;
LABEL_679:
  v382 = v503;
LABEL_680:
  v394 = v74;
  if ((*(_BYTE *)v74 & 4) == 0)
  {
    v394 = v74;
    if ((*(_WORD *)(v74 + 44) & 8) != 0)
    {
      v394 = v74;
      do
        v394 = *(_QWORD *)(v394 + 8);
      while ((*(_WORD *)(v394 + 44) & 8) != 0);
    }
  }
  v395 = *(unint64_t **)(v394 + 8);
  if (v381 != v395)
  {
    v396 = 0;
    v397 = (uint64_t)v381;
    v496 = *(unint64_t **)(v394 + 8);
    while (1)
    {
      v398 = *(unsigned __int16 **)(v397 + 16);
      v399 = *v398;
      if ((v399 - 13) < 5 || v399 == 23)
        goto LABEL_691;
      if (v396 > 0xA || llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v397))
        goto LABEL_806;
      v401 = *(_WORD *)(v397 + 44);
      v402 = *((_QWORD *)v398 + 1);
      if ((v401 & 0xC) == 0 || (v401 & 4) != 0)
      {
        if ((v402 & 0x680) != 0)
          goto LABEL_806;
      }
      else
      {
        v403 = v397;
        if ((v402 & 0x80) != 0)
          goto LABEL_806;
        while ((*(_WORD *)(v403 + 44) & 8) != 0)
        {
          v404 = 0;
          v403 = *(_QWORD *)(v403 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v403 + 16) + 8) & 0x80) != 0)
            goto LABEL_822;
        }
        if ((v402 & 0x400) != 0)
          goto LABEL_806;
        v439 = v397;
        while ((*(_WORD *)(v439 + 44) & 8) != 0)
        {
          v404 = 0;
          v439 = *(_QWORD *)(v439 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v439 + 16) + 9) & 4) != 0)
            goto LABEL_822;
        }
        if ((v402 & 0x200) != 0)
          goto LABEL_806;
        v440 = v397;
        while ((*(_WORD *)(v440 + 44) & 8) != 0)
        {
          v404 = 0;
          v440 = *(_QWORD *)(v440 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v440 + 16) + 9) & 2) != 0)
            goto LABEL_822;
        }
      }
      ++v396;
      v405 = *(unsigned int *)(v397 + 40);
      if (!(_DWORD)v405)
      {
        v395 = v496;
        goto LABEL_691;
      }
      v491 = v396;
      v493 = v397;
      v406 = *(unsigned int **)(v397 + 32);
      v407 = &v406[8 * v405];
      v514 = v407;
      do
      {
        v408 = *v406;
        if (*v406)
          goto LABEL_705;
        v409 = v406[1];
        if (!v409)
          goto LABEL_705;
        v410 = v409 >> 30;
        v529 = v406[1];
        v518 = v409 >> 30;
        if ((v408 & 0x1000000) == 0)
        {
          if ((_DWORD)v554)
          {
            v411 = (unsigned int *)v553;
            v508 = (_QWORD *)(*(_QWORD *)(v11 + 264) + 8);
            v412 = 4 * v554;
            do
            {
              v413 = *v411;
              if (*v411 == v409)
                goto LABEL_806;
              if (!v410 && v413 - 1 <= 0x3FFFFFFE)
              {
                v414 = llvm::MCRegisterInfo::regsOverlap(v508, v413, v529);
                v410 = v518;
                v409 = v529;
                if (v414)
                  goto LABEL_806;
              }
              ++v411;
              v412 -= 4;
            }
            while (v412);
          }
          if (((v408 >> 26) & ~HIBYTE(v408) & 1) != 0)
          {
            v407 = v514;
            if (v529 == v534)
              goto LABEL_705;
LABEL_718:
            if ((_DWORD)v544)
            {
              v415 = (unsigned int *)v543;
              v416 = (_QWORD *)(*(_QWORD *)(v11 + 264) + 8);
              v417 = 4 * v544;
              v418 = v529;
              v419 = v518;
              while (1)
              {
                v420 = *v415;
                if (*v415 == v418)
                  break;
                if (!v419 && v420 - 1 <= 0x3FFFFFFE)
                {
                  v421 = llvm::MCRegisterInfo::regsOverlap(v416, v420, v529);
                  v419 = v518;
                  v418 = v529;
                  if (v421)
                    break;
                }
                ++v415;
                v417 -= 4;
                if (!v417)
                  goto LABEL_725;
              }
LABEL_832:
              v404 = 0;
              goto LABEL_822;
            }
LABEL_725:
            v509 = 1;
            goto LABEL_747;
          }
          v431 = *(_QWORD *)(v11 + 296);
          if (v431)
          {
            v509 = sub_1C52D4048(v493, v529, v431);
            if (v529 != v534)
            {
              if (v509)
                goto LABEL_718;
              v509 = 0;
LABEL_747:
              if ((_DWORD)v541)
              {
                v432 = (unsigned int *)v540;
                v433 = (_QWORD *)(*(_QWORD *)(v11 + 264) + 8);
                v434 = 4 * v541;
                v435 = v529;
                v436 = v518;
                do
                {
                  v437 = *v432;
                  if (*v432 == v435)
                    goto LABEL_832;
                  if (!v436 && v437 - 1 <= 0x3FFFFFFE)
                  {
                    v438 = llvm::MCRegisterInfo::regsOverlap(v433, v437, v529);
                    v436 = v518;
                    v435 = v529;
                    if (v438)
                      goto LABEL_832;
                  }
                  ++v432;
                  v434 -= 4;
                }
                while (v434);
              }
            }
          }
          else
          {
            v509 = 0;
            if (v529 != v534)
              goto LABEL_747;
          }
          v407 = v514;
          if (v529 == v534 && !v509)
            goto LABEL_806;
          goto LABEL_705;
        }
        if ((_DWORD)v544)
        {
          v422 = (unsigned int *)v543;
          v510 = (_QWORD *)(*(_QWORD *)(v11 + 264) + 8);
          v423 = 4 * v544;
          while (1)
          {
            v424 = *v422;
            if (*v422 == v409)
              break;
            if (!v410 && v424 - 1 <= 0x3FFFFFFE)
            {
              v425 = llvm::MCRegisterInfo::regsOverlap(v510, v424, v529);
              v410 = v518;
              v409 = v529;
              if (v425)
                break;
            }
            ++v422;
            v423 -= 4;
            if (!v423)
              goto LABEL_733;
          }
LABEL_806:
          v404 = 0;
          goto LABEL_822;
        }
LABEL_733:
        v407 = v514;
        if ((~v408 & 0x5000000) != 0 && (_DWORD)v554)
        {
          v426 = (unsigned int *)v553;
          v427 = (_QWORD *)(*(_QWORD *)(v11 + 264) + 8);
          v428 = 4 * v554;
          do
          {
            v429 = *v426;
            if (*v426 == v409)
              goto LABEL_806;
            if (!v410 && v429 - 1 <= 0x3FFFFFFE)
            {
              v430 = llvm::MCRegisterInfo::regsOverlap(v427, v429, v529);
              v410 = v518;
              v409 = v529;
              if (v430)
                goto LABEL_806;
            }
            ++v426;
            v428 -= 4;
            v407 = v514;
          }
          while (v428);
        }
LABEL_705:
        v406 += 8;
      }
      while (v406 != v407);
      v397 = v493;
      v395 = v496;
      v396 = v491;
      if (!v493)
        goto LABEL_771;
LABEL_691:
      if ((*(_BYTE *)v397 & 4) == 0)
      {
LABEL_771:
        while ((*(_WORD *)(v397 + 44) & 8) != 0)
          v397 = *(_QWORD *)(v397 + 8);
      }
      v397 = *(_QWORD *)(v397 + 8);
      if ((unint64_t *)v397 == v395)
      {
        v382 = *(_QWORD *)(v11 + 320);
        break;
      }
    }
  }
  v441 = *(unint64_t **)(v382 + 56);
  v442 = (unint64_t *)v55;
  if ((unint64_t *)v55 == v441)
    goto LABEL_791;
  v442 = (unint64_t *)v55;
  while (2)
  {
    v443 = *v442 & 0xFFFFFFFFFFFFFFF8;
    if (v443)
    {
      v444 = *v442 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_BYTE *)v443 & 4) != 0)
      {
        if (**(unsigned __int16 **)(v443 + 16) - 13 >= 5)
          goto LABEL_791;
        goto LABEL_789;
      }
    }
    else
    {
      v444 = 0;
    }
    while ((*(_WORD *)(v444 + 44) & 4) != 0)
      v444 = *(_QWORD *)v444 & 0xFFFFFFFFFFFFFFF8;
    if (**(unsigned __int16 **)(v444 + 16) - 13 >= 5)
      goto LABEL_791;
    if (!v443 || (*(_BYTE *)v443 & 4) == 0)
    {
      while ((*(_WORD *)(v443 + 44) & 4) != 0)
        v443 = *(_QWORD *)v443 & 0xFFFFFFFFFFFFFFF8;
    }
LABEL_789:
    v442 = (unint64_t *)v443;
    if ((unint64_t *)v443 != v441)
      continue;
    break;
  }
  v442 = v441;
LABEL_791:
  *a3 = (unint64_t)v381;
  if (*(_QWORD *)(v11 + 296))
  {
    if (v499 != v381)
    {
      v445 = v499;
      do
      {
        if (!v445 || (v446 = v445, (*(_BYTE *)v445 & 4) == 0))
        {
          v446 = v445;
          if ((*((_WORD *)v445 + 22) & 8) != 0)
          {
            v446 = v445;
            do
              v446 = (unint64_t *)v446[1];
            while ((*((_WORD *)v446 + 22) & 8) != 0);
          }
        }
        v447 = (unint64_t *)v446[1];
        sub_1C48532D0(*(unint64_t **)(v11 + 320), v395, *(unint64_t **)(v11 + 320), v445);
        v448 = *(unsigned __int16 *)v445[2];
        if ((v448 - 13) >= 5 && v448 != 23)
          llvm::LiveIntervals::handleMove(*(llvm::LiveIntervals **)(v11 + 296), (llvm::MachineInstr *)v445, 0);
        v395 = v445;
        v445 = v447;
      }
      while (v447 != v381);
    }
    if ((v498 & 1) != 0)
    {
      v450 = 0;
LABEL_812:
      while ((*(_WORD *)(v450 + 44) & 8) != 0)
        v450 = *(_QWORD *)(v450 + 8);
    }
    else
    {
      v450 = v55;
      if ((*(_BYTE *)v55 & 4) == 0)
        goto LABEL_812;
    }
    v381 = *(unint64_t **)(v450 + 8);
  }
  if (v442 != v381 && v395 != v381)
    sub_1C4785D30(v395, v442, v381);
  *v59 = -8192;
  *(int32x2_t *)(v11 + 336) = vadd_s32(*(int32x2_t *)(v11 + 336), (int32x2_t)0x1FFFFFFFFLL);
  v452 = *(llvm::LiveIntervals **)(v11 + 296);
  if (v452)
  {
    llvm::LiveIntervals::handleMove(v452, (llvm::MachineInstr *)v55, 0);
  }
  else
  {
    sub_1C6208DAC(*(_QWORD *)(v11 + 288), v534, v74);
    sub_1C6208E5C(*(_QWORD *)(v11 + 288), v534, (llvm::MachineInstr *)v55, 0);
  }
  v404 = 1;
LABEL_822:
  if (v553 != v555)
    free(v553);
  if (v540 != v542)
    free(v540);
  if (v543 != &v545)
    free(v543);
  if ((v404 & 1) != 0)
    return 1;
  v50 = 0;
  v10 = v523;
  a6 = v54;
  v19 = (uint64_t)v537;
  v15 = v532;
LABEL_84:
  v52 = v534;
LABEL_119:
  if ((*(_BYTE *)(*(_QWORD *)(v19 + 16) + 11) & 4) != 0)
  {
    if (!v536
      || (v99 = sub_1C52D47B8((int *)v52, v11 + 448), v19 = (uint64_t)v537, v99)
      && (v100 = v99, v101 = sub_1C52D47B8(v15, v11 + 472), v19 = (uint64_t)v537, v101)
      && v100 != v101
      && ((v101 | v100) >> 30
       || (v102 = llvm::MCRegisterInfo::regsOverlap((_QWORD *)(*(_QWORD *)(v11 + 264) + 8), v100, v101),
           v19 = (uint64_t)v537,
           !v102)))
    {
      LODWORD(v553) = (_DWORD)v15;
      LODWORD(v550) = v52;
      sub_1C50E2A94(&v543, *v10, *(_QWORD *)(v11 + 320));
      v103 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(v11 + 256) + 192))(*(_QWORD *)(v11 + 256), *v10, *(_QWORD *)(v11 + 288), *(_QWORD *)(v11 + 296));
      if (v103)
      {
        v104 = v103;
        v105 = (_BYTE *)*v10;
        v106 = *(unsigned int *)(*v10 + 64);
        if (!(_DWORD)v106)
        {
          v107 = *(_QWORD *)(v11 + 320);
          goto LABEL_139;
        }
        v152 = *(_DWORD *)(v103 + 64);
        if (!v152)
        {
          v153 = *(_QWORD *)(*(_QWORD *)(v103 + 24) + 32);
          v152 = *(_DWORD *)(v153 + 912) + 1;
          *(_DWORD *)(v153 + 912) = v152;
          *(_DWORD *)(v103 + 64) = v152;
        }
        llvm::MachineFunction::makeDebugValueSubstitution(*(_QWORD *)(v11 + 248), v106, v152, 0);
        v105 = (_BYTE *)*v10;
        v107 = *(_QWORD *)(v11 + 320);
        if (!*v10)
        {
          v108 = 0;
          goto LABEL_140;
        }
LABEL_139:
        v108 = v105;
        if ((*v105 & 4) == 0)
        {
LABEL_140:
          while ((*((_WORD *)v108 + 22) & 8) != 0)
            v108 = (_BYTE *)*((_QWORD *)v108 + 1);
        }
        sub_1C487FE80(v107 + 40, (uint64_t)v105, *((_QWORD *)v108 + 1));
        v109 = v545;
        if (v545 == (char *)v543 + 48)
        {
          v110 = (_BYTE **)((char *)v543 + 56);
        }
        else
        {
          if (!v545 || (*v545 & 4) == 0)
          {
            while ((*((_WORD *)v109 + 22) & 8) != 0)
              v109 = (_BYTE *)*((_QWORD *)v109 + 1);
          }
          v110 = (_BYTE **)(v109 + 8);
        }
        v118 = *v110;
        v119 = v546;
        if (*v110 != v546)
        {
          while (2)
          {
            v120 = *a6;
            *a6 = v120 + 1;
            v540 = v118;
            v541 = v120;
            v121 = *(_DWORD *)(v11 + 344);
            if (!v121)
            {
              v131 = 0;
              goto LABEL_174;
            }
            v122 = *(_QWORD *)(v11 + 328);
            v123 = v121 - 1;
            v124 = v123 & ((v118 >> 4) ^ (v118 >> 9));
            v125 = (_QWORD *)(v122 + 16 * v124);
            v126 = (_BYTE *)*v125;
            if (v118 == (_BYTE *)*v125)
            {
LABEL_169:
              if (v118)
                goto LABEL_175;
            }
            else
            {
              v127 = 0;
              v128 = 1;
              while (v126 != (_BYTE *)-4096)
              {
                if (v127)
                  v129 = 0;
                else
                  v129 = v126 == (_BYTE *)-8192;
                if (v129)
                  v127 = v125;
                v130 = v124 + v128++;
                v124 = v130 & v123;
                v125 = (_QWORD *)(v122 + 16 * v124);
                v126 = (_BYTE *)*v125;
                if (v118 == (_BYTE *)*v125)
                  goto LABEL_169;
              }
              if (v127)
                v131 = v127;
              else
                v131 = v125;
LABEL_174:
              v132 = sub_1C48BE074(v11 + 328, (uint64_t)&v540, (uint64_t *)&v540, v131);
              *v132 = v540;
              *((_DWORD *)v132 + 2) = v541;
              if (v118)
              {
LABEL_175:
                if ((*v118 & 4) != 0)
                  goto LABEL_179;
              }
            }
            while ((*((_WORD *)v118 + 22) & 8) != 0)
              v118 = (_BYTE *)*((_QWORD *)v118 + 1);
LABEL_179:
            v118 = (_BYTE *)*((_QWORD *)v118 + 1);
            if (v118 == v119)
              break;
            continue;
          }
        }
        --*a6;
        *v10 = v104;
        if ((*(_BYTE *)v104 & 4) != 0)
        {
          i = a3;
        }
        else
        {
          for (i = a3; (*(_WORD *)(v104 + 44) & 8) != 0; v104 = *(_QWORD *)(v104 + 8))
            ;
        }
        *i = *(_QWORD *)(v104 + 8);
        sub_1C4978224((int32x2_t *)(v11 + 448), &v553);
        sub_1C4978224((int32x2_t *)(v11 + 472), &v550);
        return 1;
      }
      v19 = (uint64_t)v537;
    }
  }
  if ((v50 & 1) != 0)
    return 0;
  if (!byte_1ED8037D8)
    goto LABEL_293;
  v90 = *(_QWORD *)(v11 + 288);
  if (!v90 && !*(_QWORD *)(v11 + 296))
    goto LABEL_293;
  v91 = *v10;
  v92 = *(_QWORD *)(v11 + 328);
  v93 = *(unsigned int *)(v11 + 344);
  if ((_DWORD)v93)
  {
    LODWORD(v94) = ((v91 >> 4) ^ (v91 >> 9)) & (v93 - 1);
    v95 = (uint64_t *)(v92 + 16 * v94);
    v96 = *v95;
    if (v91 != *v95)
    {
      v97 = 1;
      while (v96 != -4096)
      {
        v98 = v94 + v97++;
        v94 = v98 & (v93 - 1);
        v96 = *(_QWORD *)(v92 + 16 * v94);
        if (v91 == v96)
        {
          v95 = (uint64_t *)(v92 + 16 * v94);
          goto LABEL_150;
        }
      }
      goto LABEL_149;
    }
  }
  else
  {
LABEL_149:
    v95 = (uint64_t *)(v92 + 16 * v93);
  }
LABEL_150:
  if (v95 == (uint64_t *)(v92 + 16 * v93))
    goto LABEL_293;
  v111 = v52;
  v112 = *(_QWORD *)(v11 + 296);
  if (!v112)
  {
    v134 = (_QWORD *)(v90 + 248);
    v135 = v52 & 0x7FFFFFFF;
    if (v135 >= *(unsigned int *)(v90 + 256))
    {
      sub_1C61E5C60((uint64_t *)(v90 + 248), v135 + 1, v90 + 264);
      v111 = v52;
      v19 = (uint64_t)v537;
    }
    v136 = *v134 + 56 * v135;
    v137 = *(uint64_t **)(v136 + 32);
    v138 = *(uint64_t **)(v136 + 40);
    if (v137 == v138)
      goto LABEL_293;
    while (1)
    {
      v139 = *v137;
      if (*(_QWORD *)(*v137 + 24) == *(_QWORD *)(v11 + 320))
        goto LABEL_226;
      if (++v137 == v138)
        goto LABEL_293;
    }
  }
  if ((v52 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v112 + 416)
    || (v113 = *(llvm::LiveInterval **)(*(_QWORD *)(v112 + 408) + 8 * (v52 & 0x7FFFFFFF))) == 0)
  {
    v113 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(v11 + 296), v52);
    v460 = v91;
    v461 = *(_QWORD *)(v112 + 304);
    v462 = *(_QWORD *)(v112 + 248);
    *(_QWORD *)v461 = v462;
    *(_QWORD *)(v461 + 8) = *(_QWORD *)(v462 + 40);
    *(_OWORD *)(v461 + 16) = *(_OWORD *)(v112 + 288);
    *(_QWORD *)(v461 + 32) = v112 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v461);
    *(_DWORD *)(v461 + 184) = 0;
    v91 = v460;
    v463 = *(_QWORD *)(v112 + 256);
    v86 = *(_BYTE *)(v463 + 16) == 0;
    v464 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v463 + 24) + 16 * (*((_DWORD *)v113 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                              + 34);
    v466 = !v86 && v464 != 0;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v112 + 304), v113, v466);
    llvm::LiveIntervals::computeDeadValues(v112, (uint64_t)v113, 0);
    v111 = v52;
    v19 = (uint64_t)v537;
    v112 = *(_QWORD *)(v11 + 296);
  }
  v114 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v112 + 288) + 392)
                   + 16 * *(unsigned int *)(*(_QWORD *)(v11 + 320) + 24)
                   + 8);
  v115 = (v114 >> 1) & 3;
  v116 = v114 & 0xFFFFFFFFFFFFFFF8;
  if (v115)
    v117 = v116 | (2 * (v115 - 1));
  else
    v117 = *(_QWORD *)v116 | 6;
  v140 = *((_DWORD *)v113 + 2);
  v141 = *(_QWORD **)v113;
  if (!v140)
  {
    v140 = 0;
    goto LABEL_221;
  }
  v142 = v141[3 * v140 - 2];
  v143 = *(_DWORD *)((v117 & 0xFFFFFFFFFFFFFFF8) + 24) | (v117 >> 1) & 3;
  if (v143 >= ((v142 >> 1) & 3 | *(_DWORD *)((v142 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_221:
    v144 = &v141[3 * v140];
    goto LABEL_222;
  }
  v144 = *(_QWORD **)v113;
  v145 = *((unsigned int *)v113 + 2);
  do
  {
    v146 = v145 >> 1;
    v147 = v144[3 * (v145 >> 1) + 1];
    LODWORD(v147) = (v147 >> 1) & 3 | *(_DWORD *)((v147 & 0xFFFFFFFFFFFFFFF8) + 24);
    v145 -= (v145 >> 1) + 1;
    v148 = v143 >= v147;
    if (v143 >= v147)
      v149 = v146 + 1;
    else
      v149 = 0;
    v144 += 3 * v149;
    if (!v148)
      v145 = v146;
  }
  while (v145);
LABEL_222:
  if (v144 != &v141[3 * v140]
    && ((*v144 >> 1) & 3 | *(_DWORD *)((*v144 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v117 & 0xFFFFFFFFFFFFFFF8) + 24) | (v117 >> 1) & 3))
  {
    goto LABEL_293;
  }
  v154 = *(v144 - 2);
  if (v154 < 8)
    goto LABEL_293;
  v139 = *(_QWORD *)((v154 & 0xFFFFFFFFFFFFFFF8) + 16);
LABEL_226:
  if (v139)
    v155 = v91 == v139;
  else
    v155 = 1;
  if (v155)
    goto LABEL_293;
  v156 = **(unsigned __int16 **)(v139 + 16);
  if (v156 == 11 || v156 == 19)
    goto LABEL_293;
  v539 = 0;
  v516 = v111;
  if ((sub_1C52D4348((llvm::MachineInstr *)v139, v111, &v539) & 1) != 0
    || (v538 = 1, !llvm::MachineInstr::isSafeToMove((llvm::MachineInstr *)v139, *(llvm::AAResults **)(v11 + 304), &v538)))
  {
    v19 = (uint64_t)v537;
    goto LABEL_293;
  }
  v497 = (llvm::MachineInstr *)v91;
  v535 = v52;
  v522 = v10;
  v543 = &v545;
  v544 = 0x200000000;
  v540 = v542;
  v541 = 0x200000000;
  v553 = v555;
  v554 = 0x200000000;
  v550 = (unsigned int *)&v552;
  v551 = 0x200000000;
  v158 = *(unsigned int *)(v139 + 40);
  v520 = a6;
  v531 = (int)v15;
  if ((_DWORD)v158)
  {
    v159 = *(unsigned int **)(v139 + 32);
    v160 = &v159[8 * v158];
    do
    {
      v161 = *v159;
      if (!*v159)
      {
        v162 = v159[1];
        if ((v161 & 0x1000000) != 0)
        {
          if ((v162 - 1) > 0x3FFFFFFE)
            goto LABEL_239;
          v165 = v554;
          if (v554 >= (unint64_t)HIDWORD(v554))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v553, (uint64_t)v555, v554 + 1, 4);
            v165 = v554;
          }
          *((_DWORD *)v553 + v165) = v162;
          LODWORD(v554) = v554 + 1;
          if ((~*v159 & 0x5000000) == 0)
            goto LABEL_239;
          v166 = v551;
          v167 = (void **)&v550;
          if (v551 >= (unint64_t)HIDWORD(v551))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v550, (uint64_t)&v552, v551 + 1, 4);
            v166 = v551;
          }
          goto LABEL_290;
        }
        if ((_DWORD)v162)
        {
          v163 = *(_QWORD *)(v11 + 280);
          if ((v162 & 0x80000000) != 0)
            v164 = (uint64_t *)(*(_QWORD *)(v163 + 24) + 16 * (v162 & 0x7FFFFFFF) + 8);
          else
            v164 = (uint64_t *)(*(_QWORD *)(v163 + 272) + 8 * v162);
          v168 = *v164;
          if (*v164)
          {
            v169 = *((_DWORD *)v95 + 2);
            if ((*(_BYTE *)(v168 + 3) & 1) != 0
              || (v168 = *(_QWORD *)(v168 + 24)) != 0 && (*(_BYTE *)(v168 + 3) & 1) != 0)
            {
              v170 = *(_QWORD *)(v168 + 8);
LABEL_257:
              if (*(_QWORD *)(v170 + 24) == *(_QWORD *)(v11 + 320))
              {
                v171 = **(unsigned __int16 **)(v170 + 16);
                if (v171 != 11 && v171 != 19)
                {
                  if ((llvm::MachineInstr *)v170 != v497)
                  {
                    v173 = *(_QWORD *)(v11 + 328);
                    v174 = *(unsigned int *)(v11 + 344);
                    if ((_DWORD)v174)
                    {
                      LODWORD(v175) = (v174 - 1) & ((v170 >> 4) ^ (v170 >> 9));
                      v176 = (uint64_t *)(v173 + 16 * v175);
                      v177 = *v176;
                      if (v170 != *v176)
                      {
                        v178 = 1;
                        do
                        {
                          if (v177 == -4096)
                            goto LABEL_269;
                          v179 = v175 + v178++;
                          v175 = v179 & (v174 - 1);
                          v177 = *(_QWORD *)(v173 + 16 * v175);
                        }
                        while (v170 != v177);
                        v176 = (uint64_t *)(v173 + 16 * v175);
                      }
                    }
                    else
                    {
LABEL_269:
                      v176 = (uint64_t *)(v173 + 16 * v174);
                    }
                    if (v176 == (uint64_t *)(v173 + 16 * v174))
                    {
                      LOBYTE(v182) = 0;
                      a6 = v520;
                      LODWORD(v15) = v531;
                      v52 = v535;
                      goto LABEL_639;
                    }
                    v180 = *((_DWORD *)v176 + 2);
                    if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(v11 + 256) + 960))(*(_QWORD *)(v11 + 256), *(_QWORD *)(v11 + 272)) <= v169 - v180)
                    {
                      v170 = *(_QWORD *)(v168 + 8);
                      a6 = v520;
                      goto LABEL_273;
                    }
                  }
                  LOBYTE(v182) = 0;
                  a6 = v520;
LABEL_844:
                  LODWORD(v15) = v531;
                  v52 = v535;
                  goto LABEL_639;
                }
              }
LABEL_273:
              while (1)
              {
                v168 = *(_QWORD *)(v168 + 24);
                if (!v168 || (*(_BYTE *)(v168 + 3) & 1) == 0)
                  break;
                if (*(_QWORD *)(v168 + 8) != v170)
                {
                  v170 = *(_QWORD *)(v168 + 8);
                  goto LABEL_257;
                }
              }
              v161 = *v159;
            }
          }
          if (((v161 >> 26) & ~HIBYTE(v161) & 1) != 0)
          {
            v181 = v162 != v535;
            v182 = 1;
          }
          else
          {
            v183 = *(_QWORD *)(v11 + 296);
            if (v183)
              v182 = sub_1C52D4048(v139, v162, v183);
            else
              v182 = 0;
            v181 = v162 != v535;
            if ((_DWORD)v162 == v535 && !v182)
              goto LABEL_844;
          }
          v184 = v544;
          if (v544 >= (unint64_t)HIDWORD(v544))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v543, (uint64_t)&v545, v544 + 1, 4);
            v184 = v544;
          }
          *((_DWORD *)v543 + v184) = v162;
          LODWORD(v544) = v544 + 1;
          v185 = v181 && v182;
          LODWORD(v15) = v531;
          if (v185 == 1)
          {
            v166 = v541;
            v167 = &v540;
            if (v541 >= (unint64_t)HIDWORD(v541))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v540, (uint64_t)v542, v541 + 1, 4);
              v166 = v541;
            }
LABEL_290:
            *((_DWORD *)*v167 + v166) = v162;
            ++*((_DWORD *)v167 + 2);
          }
        }
      }
LABEL_239:
      v159 += 8;
    }
    while (v159 != v160);
  }
  v297 = *v10;
  if (*v10 != v139)
  {
    v298 = 0;
    v52 = v535;
    while (1)
    {
      v299 = *(unsigned __int16 **)(v297 + 16);
      v300 = *v299;
      if ((v300 - 13) < 5 || v300 == 23)
        goto LABEL_422;
      if (v298 > 0xA || llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v297))
      {
LABEL_637:
        LOBYTE(v182) = 0;
LABEL_638:
        a6 = v520;
        goto LABEL_639;
      }
      v302 = *(_WORD *)(v297 + 44);
      v303 = *((_QWORD *)v299 + 1);
      if ((v302 & 0xC) == 0 || (v302 & 4) != 0)
      {
        if ((v303 & 0x680) != 0)
          goto LABEL_637;
      }
      else
      {
        v304 = v297;
        if ((v303 & 0x80) != 0)
          goto LABEL_637;
        while ((*(_WORD *)(v304 + 44) & 8) != 0)
        {
          v304 = *(_QWORD *)(v304 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v304 + 16) + 8) & 0x80) != 0)
            goto LABEL_637;
        }
        if ((v303 & 0x400) != 0)
          goto LABEL_637;
        v319 = v297;
        while ((*(_WORD *)(v319 + 44) & 8) != 0)
        {
          v319 = *(_QWORD *)(v319 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v319 + 16) + 9) & 4) != 0)
            goto LABEL_637;
        }
        if ((v303 & 0x200) != 0)
          goto LABEL_637;
        v320 = v297;
        while ((*(_WORD *)(v320 + 44) & 8) != 0)
        {
          v320 = *(_QWORD *)(v320 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v320 + 16) + 9) & 2) != 0)
            goto LABEL_637;
        }
      }
      *(_QWORD *)v547 = &v549;
      v548 = 0x200000000;
      v305 = *(unsigned int *)(v297 + 40);
      if (!(_DWORD)v305)
      {
        v182 = 1;
        goto LABEL_511;
      }
      v512 = v298;
      v306 = *(unsigned int **)(v297 + 32);
      v307 = &v306[8 * v305];
      v494 = v307;
      while (1)
      {
        v308 = *v306;
        if (!*v306)
        {
          v309 = v306[1];
          if (v309)
          {
            if ((v308 & 0x1000000) != 0)
            {
              v318 = v548;
              if (v548 >= (unint64_t)HIDWORD(v548))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v547, (uint64_t)&v549, v548 + 1, 4);
                v318 = v548;
              }
              *(_DWORD *)(*(_QWORD *)v547 + 4 * v318) = v309;
              LODWORD(v548) = v548 + 1;
              goto LABEL_436;
            }
            v310 = v309 >> 30;
            if ((_DWORD)v554)
            {
              v311 = (unsigned int *)v553;
              v525 = (_QWORD *)(*(_QWORD *)(v11 + 264) + 8);
              v312 = 4 * v554;
              do
              {
                v313 = *v311;
                if (*v311 == v309
                  || !v310 && v313 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v525, v313, v309))
                {
                  goto LABEL_509;
                }
                ++v311;
                v312 -= 4;
              }
              while (v312);
            }
            if ((_DWORD)v541)
            {
              v314 = (unsigned int *)v540;
              v526 = (_QWORD *)(*(_QWORD *)(v11 + 264) + 8);
              v315 = 4 * v541;
              while (1)
              {
                v316 = *v314;
                if (*v314 == v309
                  || !v310 && v316 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v526, v316, v309))
                {
                  break;
                }
                ++v314;
                v315 -= 4;
                if (!v315)
                  goto LABEL_454;
              }
LABEL_509:
              v182 = 0;
              v10 = v522;
              v52 = v535;
              goto LABEL_510;
            }
LABEL_454:
            v307 = v494;
            v10 = v522;
            v52 = v535;
            if ((llvm::MachineInstr *)v297 != v497 && v309 == v535 && ((v308 >> 26) & ~HIBYTE(v308) & 1) == 0)
              break;
          }
        }
LABEL_436:
        v306 += 8;
        if (v306 == v307)
        {
          v502 = v548;
          if (!(_DWORD)v548)
          {
            v182 = 1;
            goto LABEL_510;
          }
          v321 = 0;
          v322 = *(_DWORD **)v547;
          v492 = *(_DWORD **)v547;
          v495 = (unsigned int *)v543;
          v490 = v550;
          v527 = v553;
          while (1)
          {
            v323 = v322[v321];
            if ((_DWORD)v544)
              break;
            v324 = v323 - 1;
LABEL_485:
            if (v324 <= 0x3FFFFFFE && (_DWORD)v551)
            {
              v329 = (_QWORD *)(*(_QWORD *)(v11 + 264) + 8);
              v330 = 4 * v551;
              v331 = v490;
              do
              {
                v332 = *v331;
                if (*v331 == v323 || v332 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v329, v332, v323))
                  goto LABEL_509;
                ++v331;
                v330 -= 4;
              }
              while (v330);
            }
            v333 = v527;
            if ((_DWORD)v554)
            {
              v334 = 4 * v554;
              v335 = v527;
              while (*v335 != v323)
              {
                ++v335;
                v334 -= 4;
                if (!v334)
                {
                  v335 = &v527[v554];
                  break;
                }
              }
              v333 = v527;
            }
            else
            {
              v335 = v527;
            }
            v336 = v335 - v333;
            v337 = v335 + 1;
            if (v336 != v554 && v337 != &v527[v554])
            {
              v339 = 4 * v554 - 4 * v336 - 4;
              do
              {
                if (*v337 != v323)
                  *v335++ = *v337;
                ++v337;
                v339 -= 4;
              }
              while (v339);
            }
            v10 = v522;
            LODWORD(v554) = (unint64_t)((char *)v335 - (char *)v527) >> 2;
            ++v321;
            v182 = 1;
            v52 = v535;
            v298 = v512;
            v322 = v492;
            if (v321 == v502)
              goto LABEL_511;
          }
          v324 = v323 - 1;
          v325 = (_QWORD *)(*(_QWORD *)(v11 + 264) + 8);
          v326 = 4 * v544;
          v327 = v495;
          while (1)
          {
            v328 = *v327;
            if (*v327 == v323
              || v324 <= 0x3FFFFFFE && v328 - 1 <= 0x3FFFFFFE && llvm::MCRegisterInfo::regsOverlap(v325, v328, v323))
            {
              goto LABEL_509;
            }
            ++v327;
            v326 -= 4;
            if (!v326)
              goto LABEL_485;
          }
        }
      }
      v317 = *(_QWORD *)(v11 + 296);
      if (v317)
      {
        v10 = v522;
        v52 = v535;
        v307 = v494;
        if (!sub_1C52D4048(v297, v309, v317))
        {
          v182 = 0;
LABEL_510:
          v298 = v512;
          goto LABEL_511;
        }
        goto LABEL_436;
      }
      v182 = 0;
      v10 = v522;
      v52 = v535;
      v298 = v512;
LABEL_511:
      if (*(uint64_t **)v547 != &v549)
        free(*(void **)v547);
      LODWORD(v15) = v531;
      if (!v182)
        goto LABEL_638;
      ++v298;
      if (!v297)
        goto LABEL_517;
LABEL_422:
      if ((*(_BYTE *)v297 & 4) == 0)
      {
LABEL_517:
        while ((*(_WORD *)(v297 + 44) & 8) != 0)
          v297 = *(_QWORD *)(v297 + 8);
      }
      v297 = *(_QWORD *)(v297 + 8);
      if (v297 == v139)
      {
        v297 = *v10;
        goto LABEL_586;
      }
    }
  }
  v52 = v535;
LABEL_586:
  v369 = *(_QWORD *)(*(_QWORD *)(v11 + 320) + 56);
  if (v369 != v297)
  {
    while (2)
    {
      v370 = *(_QWORD *)v297 & 0xFFFFFFFFFFFFFFF8;
      if (v370)
      {
        v371 = *(_QWORD *)v297 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_BYTE *)v370 & 4) != 0)
        {
          if (**(unsigned __int16 **)(v370 + 16) - 13 >= 5)
            break;
          goto LABEL_600;
        }
      }
      else
      {
        v371 = 0;
      }
      while ((*(_WORD *)(v371 + 44) & 4) != 0)
        v371 = *(_QWORD *)v371 & 0xFFFFFFFFFFFFFFF8;
      if (**(unsigned __int16 **)(v371 + 16) - 13 >= 5)
        break;
      if (!v370 || (*(_BYTE *)v370 & 4) == 0)
      {
        while ((*(_WORD *)(v370 + 44) & 4) != 0)
          v370 = *(_QWORD *)v370 & 0xFFFFFFFFFFFFFFF8;
      }
LABEL_600:
      v297 = v370;
      if (v370 == v369)
      {
        v297 = *(_QWORD *)(*(_QWORD *)(v11 + 320) + 56);
        break;
      }
      continue;
    }
  }
  v372 = *(_QWORD *)v139;
  v373 = v139;
  if ((*(_QWORD *)v139 & 4) == 0)
  {
    v373 = v139;
    if ((*(_WORD *)(v139 + 44) & 8) != 0)
    {
      v373 = v139;
      do
        v373 = *(_QWORD *)(v373 + 8);
      while ((*(_WORD *)(v373 + 44) & 8) != 0);
    }
  }
  v374 = *(unint64_t **)(v373 + 8);
  v375 = (unint64_t *)v139;
  while (2)
  {
    v376 = v372 & 0xFFFFFFFFFFFFFFF8;
    if ((v372 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v377 = v372 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_BYTE *)v376 & 4) != 0)
      {
        if (**(unsigned __int16 **)(v376 + 16) - 13 >= 5)
          break;
        goto LABEL_620;
      }
    }
    else
    {
      v377 = 0;
    }
    while ((*(_WORD *)(v377 + 44) & 4) != 0)
      v377 = *(_QWORD *)v377 & 0xFFFFFFFFFFFFFFF8;
    if (**(unsigned __int16 **)(v377 + 16) - 13 < 5)
    {
      if (!v376 || (*(_BYTE *)v376 & 4) == 0)
      {
        while ((*(_WORD *)(v376 + 44) & 4) != 0)
          v376 = *(_QWORD *)v376 & 0xFFFFFFFFFFFFFFF8;
      }
LABEL_620:
      v372 = *(_QWORD *)v376;
      v375 = (unint64_t *)v376;
      continue;
    }
    break;
  }
  if ((unint64_t *)v297 != v374 && v375 != v374)
    sub_1C4785D30((unint64_t *)v297, v375, v374);
  v378 = *(_QWORD *)v297 & 0xFFFFFFFFFFFFFFF8;
  if (!v378)
  {
    a6 = v520;
LABEL_630:
    while ((*(_WORD *)(v378 + 44) & 4) != 0)
      v378 = *(_QWORD *)v378 & 0xFFFFFFFFFFFFFFF8;
    goto LABEL_631;
  }
  a6 = v520;
  if ((*(_BYTE *)v378 & 4) == 0)
    goto LABEL_630;
LABEL_631:
  *a3 = v378;
  *v95 = -8192;
  *(int32x2_t *)(v11 + 336) = vadd_s32(*(int32x2_t *)(v11 + 336), (int32x2_t)0x1FFFFFFFFLL);
  v379 = *(llvm::LiveIntervals **)(v11 + 296);
  if (v379)
  {
    llvm::LiveIntervals::handleMove(v379, (llvm::MachineInstr *)v139, 0);
  }
  else
  {
    sub_1C6208DAC(*(_QWORD *)(v11 + 288), v516, v139);
    sub_1C6208E5C(*(_QWORD *)(v11 + 288), v516, v497, 0);
  }
  LOBYTE(v182) = 1;
LABEL_639:
  if (v550 != (unsigned int *)&v552)
    free(v550);
  if (v553 != v555)
    free(v553);
  if (v540 != v542)
    free(v540);
  if (v543 != &v545)
    free(v543);
  v19 = (uint64_t)v537;
  if (v182)
    return 1;
LABEL_293:
  v186 = *(unsigned __int16 **)(v19 + 16);
  if (*v186 - 1 <= 1 && (*(_BYTE *)(*(_QWORD *)(v19 + 32) + 48) & 8) != 0)
  {
    LODWORD(v189) = 1;
    goto LABEL_297;
  }
  v187 = *(_WORD *)(v19 + 44);
  v188 = *((_QWORD *)v186 + 1);
  if ((v187 & 0xC) != 0 && (v187 & 4) == 0)
  {
    v467 = v11;
    v468 = v52;
    v469 = (int)v15;
    v470 = a6;
    v471 = v10;
    if ((v188 & 0x80000) != 0)
    {
      LODWORD(v189) = 1;
      goto LABEL_297;
    }
    v472 = v537;
    while ((*((_WORD *)v472 + 22) & 8) != 0)
    {
      v472 = (llvm::MachineInstr *)*((_QWORD *)v472 + 1);
      LODWORD(v189) = 1;
      v10 = v471;
      a6 = v470;
      LODWORD(v15) = v469;
      v52 = v468;
      v11 = v467;
      if ((*(_BYTE *)(*((_QWORD *)v472 + 2) + 10) & 8) != 0)
        goto LABEL_297;
    }
  }
  else
  {
    v189 = (v188 >> 19) & 1;
LABEL_297:
    if (((v189 ^ 1 | v536) & 1) == 0)
    {
      LODWORD(v550) = 0;
      v190 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, unsigned int **))(**(_QWORD **)(v11 + 256)
                                                                                         + 656))(*(_QWORD *)(v11 + 256), *v186, 1, 0, &v550);
      if (v190)
      {
        v191 = v190;
        v192 = *(_QWORD **)(v11 + 256);
        v193 = v192[1];
        if (*(_BYTE *)(v193 + 48 * v191 + 4) == 1)
        {
          v194 = *(_QWORD *)(v11 + 264);
          v195 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD, uint64_t, _QWORD))(*v192 + 16))(v192, v193 + 48 * v191, v550, v194, *(_QWORD *)(v11 + 248));
          v196 = v195;
          if (!v195 || *(_BYTE *)(*(_QWORD *)v195 + 31))
          {
            v197 = v52;
            goto LABEL_303;
          }
          v473 = v11;
          v197 = v52;
          v474 = (int)v15;
          v475 = a6;
          v476 = v10;
          v477 = *(unsigned int **)(v196 + 8);
          v478 = *(_QWORD *)(v194 + 240);
          v479 = (unint64_t)(*(_QWORD *)(v194 + 248) - v478) >> 3;
          v480 = *v477;
          if (*v477)
          {
            v481 = 0;
LABEL_876:
            v483 = __clz(__rbit32(v480));
            v484 = v483 | v481;
            if ((v483 | v481) == (_DWORD)v479)
              goto LABEL_877;
            v485 = v480 >> v483;
            while (1)
            {
              v196 = *(_QWORD *)(v478 + 8 * v484);
              if (*(_BYTE *)(*(_QWORD *)v196 + 31))
                break;
              if (v485 <= 1)
              {
                while (1)
                {
                  v481 += 32;
                  if (v481 >= v479)
                    goto LABEL_877;
                  v487 = v477[1];
                  ++v477;
                  v486 = v487;
                  if (v487)
                  {
                    v488 = v481;
                    goto LABEL_886;
                  }
                }
              }
              v488 = v484 + 1;
              v486 = v485 >> 1;
LABEL_886:
              v196 = 0;
              v489 = __clz(__rbit32(v486));
              v484 = v489 + v488;
              v485 = v486 >> v489;
              v10 = v476;
              a6 = v475;
              LODWORD(v15) = v474;
              v11 = v473;
              if (v484 == (_DWORD)v479)
                goto LABEL_303;
            }
          }
          else
          {
            v481 = 0;
            while (1)
            {
              v481 += 32;
              if (v481 >= v479)
                break;
              v482 = v477[1];
              ++v477;
              v480 = v482;
              if (v482)
                goto LABEL_876;
            }
LABEL_877:
            v196 = 0;
          }
          v10 = v476;
          a6 = v475;
          LODWORD(v15) = v474;
          v11 = v473;
LABEL_303:
          v198 = *(_QWORD *)(v11 + 280);
          IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v198, "", 0);
          *(_QWORD *)(*(_QWORD *)(v198 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v196 & 0xFFFFFFFFFFFFFFFBLL;
          v200 = *(_QWORD *)(v198 + 8);
          if (v200)
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v200 + 24))(v200, IncompleteVirtualRegister);
          v543 = &v545;
          v544 = 0x200000000;
          v201 = (*(uint64_t (**)(_QWORD, _QWORD, llvm::MachineInstr *, uint64_t, uint64_t, _QWORD, void **))(**(_QWORD **)(v11 + 256) + 640))(*(_QWORD *)(v11 + 256), *(_QWORD *)(v11 + 248), v537, IncompleteVirtualRegister, 1, 0, &v543);
          v202 = (_BYTE **)v543;
          if (v201)
          {
            llvm::MachineInstr::addRegisterKilled(*((llvm::MachineInstr **)v543 + 1), IncompleteVirtualRegister, *(_QWORD *)(v11 + 264), 0);
            v203 = (_QWORD *)*v10;
            v204 = *(_QWORD *)v543;
            v205 = *(_QWORD *)(*(_QWORD *)(v11 + 320) + 40);
            *(_QWORD *)(v204 + 24) = v205;
            v206 = *(_QWORD *)(v205 + 32);
            v207 = *(unsigned int *)(v204 + 40);
            if ((_DWORD)v207)
            {
              v340 = *(_QWORD *)(v204 + 32);
              v341 = *(_QWORD *)(v206 + 40);
              v342 = 32 * v207;
              do
              {
                if (!*(_BYTE *)v340)
                {
                  v343 = *(unsigned int *)(v340 + 4);
                  if ((int)v343 >= 0)
                    v344 = (uint64_t *)(*(_QWORD *)(v341 + 272) + 8 * v343);
                  else
                    v344 = (uint64_t *)(*(_QWORD *)(v341 + 24) + 16 * (v343 & 0x7FFFFFFF) + 8);
                  v345 = *v344;
                  if (*v344)
                  {
                    v346 = *(_QWORD *)(v345 + 16);
                    *(_QWORD *)(v345 + 16) = v340;
                    *(_QWORD *)(v340 + 16) = v346;
                    if ((*(_BYTE *)(v340 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v340 + 24) = v345;
                    }
                    else
                    {
                      *(_QWORD *)(v340 + 24) = 0;
                      v344 = (uint64_t *)(v346 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v340 + 16) = v340;
                    *(_QWORD *)(v340 + 24) = 0;
                  }
                  *v344 = v340;
                }
                v340 += 32;
                v342 -= 32;
              }
              while (v342);
            }
            v208 = *(_QWORD *)(v206 + 728);
            if (v208)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v208 + 24))(v208, v204);
            v209 = *v203 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v204 = v209 | *(_QWORD *)v204 & 7;
            *(_QWORD *)(v204 + 8) = v203;
            *(_QWORD *)(v209 + 8) = v204;
            *v203 = *v203 & 7 | v204;
            v210 = (_QWORD *)*v10;
            v211 = *((_QWORD *)v543 + 1);
            v212 = *(_QWORD *)(*(_QWORD *)(v11 + 320) + 40);
            *(_QWORD *)(v211 + 24) = v212;
            v213 = *(_QWORD *)(v212 + 32);
            v214 = *(unsigned int *)(v211 + 40);
            if ((_DWORD)v214)
            {
              v347 = *(_QWORD *)(v211 + 32);
              v348 = *(_QWORD *)(v213 + 40);
              v349 = 32 * v214;
              do
              {
                if (!*(_BYTE *)v347)
                {
                  v350 = *(unsigned int *)(v347 + 4);
                  if ((int)v350 >= 0)
                    v351 = (uint64_t *)(*(_QWORD *)(v348 + 272) + 8 * v350);
                  else
                    v351 = (uint64_t *)(*(_QWORD *)(v348 + 24) + 16 * (v350 & 0x7FFFFFFF) + 8);
                  v352 = *v351;
                  if (*v351)
                  {
                    v353 = *(_QWORD *)(v352 + 16);
                    *(_QWORD *)(v352 + 16) = v347;
                    *(_QWORD *)(v347 + 16) = v353;
                    if ((*(_BYTE *)(v347 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v347 + 24) = v352;
                    }
                    else
                    {
                      *(_QWORD *)(v347 + 24) = 0;
                      v351 = (uint64_t *)(v353 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v347 + 16) = v347;
                    *(_QWORD *)(v347 + 24) = 0;
                  }
                  *v351 = v347;
                }
                v347 += 32;
                v349 -= 32;
              }
              while (v349);
            }
            v215 = *(_QWORD *)(v213 + 728);
            if (v215)
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v215 + 24))(v215, v211);
            v216 = *v210 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v211 = v216 | *(_QWORD *)v211 & 7;
            *(_QWORD *)(v211 + 8) = v210;
            *(_QWORD *)(v216 + 8) = v211;
            *v210 = *v210 & 7 | v211;
            v217 = v543;
            v218 = *a6;
            v219 = (v218 + 1);
            *a6 = v219;
            v220 = *(void **)v217;
            v540 = *(void **)v217;
            v541 = v218;
            v221 = *(_DWORD *)(v11 + 344);
            if (!v221)
            {
              v231 = 0;
              goto LABEL_326;
            }
            v222 = *(_QWORD *)(v11 + 328);
            v223 = v221 - 1;
            v224 = (v221 - 1) & ((v220 >> 4) ^ (v220 >> 9));
            v225 = (_QWORD *)(v222 + 16 * v224);
            v226 = (void *)*v225;
            if (v220 == (void *)*v225)
            {
              v233 = (void *)*((_QWORD *)v217 + 1);
              v540 = v233;
              v541 = v219;
LABEL_330:
              v234 = v223 & ((v233 >> 4) ^ (v233 >> 9));
              v235 = (_QWORD *)(v222 + 16 * v234);
              v236 = (void *)*v235;
              if (v233 != (void *)*v235)
              {
                v237 = 0;
                v238 = 1;
                while (v236 != (void *)-4096)
                {
                  if (v237)
                    v239 = 0;
                  else
                    v239 = v236 == (void *)-8192;
                  if (v239)
                    v237 = v235;
                  v240 = v234 + v238++;
                  v234 = v240 & v223;
                  v235 = (_QWORD *)(v222 + 16 * v234);
                  v236 = (void *)*v235;
                  if (v233 == (void *)*v235)
                    goto LABEL_344;
                }
                if (v237)
                  v241 = v237;
                else
                  v241 = v235;
                goto LABEL_343;
              }
            }
            else
            {
              v227 = 0;
              v228 = 1;
              while (v226 != (void *)-4096)
              {
                if (v227)
                  v229 = 0;
                else
                  v229 = v226 == (void *)-8192;
                if (v229)
                  v227 = v225;
                v230 = v224 + v228++;
                v224 = v230 & v223;
                v225 = (_QWORD *)(v222 + 16 * v224);
                v226 = (void *)*v225;
                if (v220 == (void *)*v225)
                  goto LABEL_327;
              }
              if (v227)
                v231 = v227;
              else
                v231 = v225;
LABEL_326:
              v232 = sub_1C48BE074(v11 + 328, (uint64_t)&v540, (uint64_t *)&v540, v231);
              *v232 = v540;
              *((_DWORD *)v232 + 2) = v541;
              v217 = v543;
              LODWORD(v219) = *a6;
              v222 = *(_QWORD *)(v11 + 328);
              v221 = *(_DWORD *)(v11 + 344);
LABEL_327:
              v233 = (void *)*((_QWORD *)v217 + 1);
              v540 = v233;
              v541 = v219;
              if (v221)
              {
                v223 = v221 - 1;
                goto LABEL_330;
              }
              v241 = 0;
LABEL_343:
              v242 = sub_1C48BE074(v11 + 328, (uint64_t)&v540, (uint64_t *)&v540, v241);
              *v242 = v540;
              *((_DWORD *)v242 + 2) = v541;
              v217 = v543;
            }
LABEL_344:
            RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(*((_QWORD *)v217 + 1), v15, 0, 0, 0);
            RegisterUseOperandIdx = llvm::MachineInstr::findRegisterUseOperandIdx(*((_QWORD *)v543 + 1), v197, 0, 0);
            v553 = (_QWORD *)*((_QWORD *)v543 + 1);
            sub_1C52D0B00(v11, &v553, v10, RegisterUseOperandIdx, RegisterDefOperandIdx, a6, 1);
            v245 = (llvm::MachineInstr *)*((_QWORD *)v543 + 1);
            v246 = *(_DWORD *)(*((_QWORD *)v245 + 4) + 32 * RegisterUseOperandIdx);
            if (((v246 >> 26) & ~HIBYTE(v246) & 1) != 0)
            {
              v247 = *(_QWORD *)(v11 + 288);
              if (v247)
              {
                v354 = *((unsigned int *)v537 + 10);
                if ((_DWORD)v354)
                {
                  v355 = 32 * v354;
                  v356 = (unsigned int *)(*((_QWORD *)v537 + 4) + 4);
                  do
                  {
                    v357 = *(v356 - 1);
                    if (!(_BYTE)v357)
                    {
                      v358 = *v356;
                      if ((*v356 & 0x80000000) != 0)
                      {
                        if ((v357 & 0x1000000) != 0)
                        {
                          if (sub_1C6208FB4(*(_QWORD *)(v11 + 288), v358, (uint64_t)v537))
                          {
                            if (llvm::MachineInstr::findRegisterDefOperandIdx(*((_QWORD *)v543 + 1), *v356, 1, 0, 0) == -1)v359 = *(llvm::MachineInstr **)v543;
                            else
                              v359 = (llvm::MachineInstr *)*((_QWORD *)v543 + 1);
                            sub_1C6208F08(*(_QWORD *)(v11 + 288), *v356, v359, 0);
                          }
                        }
                        else if (((v357 >> 26) & ~HIBYTE(v357) & 1) != 0)
                        {
                          if (llvm::MachineInstr::findRegisterUseOperandIdx(*(_QWORD *)v543, v358, 1, 0) == -1)v360 = *((_QWORD *)v543 + 1);
                          else
                            v360 = *(_QWORD *)v543;
                          llvm::LiveVariables::replaceKillInstruction(*(uint64_t **)(v11 + 288), *v356, (uint64_t)v537, v360);
                        }
                      }
                    }
                    v356 += 8;
                    v355 -= 32;
                  }
                  while (v355);
                  v247 = *(_QWORD *)(v11 + 288);
                  v245 = (llvm::MachineInstr *)*((_QWORD *)v543 + 1);
                }
                sub_1C6208E5C(v247, IncompleteVirtualRegister, v245, 0);
              }
              v540 = v542;
              v541 = 0x400000000;
              v248 = *(_QWORD *)(v11 + 296);
              v249 = v537;
              v250 = v537 >> 4;
              if (v248)
              {
                v251 = *((unsigned int *)v537 + 10);
                if ((_DWORD)v251)
                {
                  v252 = 0;
                  v253 = 32 * v251;
                  v254 = (_DWORD *)(*((_QWORD *)v537 + 4) + 4);
                  do
                  {
                    if (!*((_BYTE *)v254 - 4))
                    {
                      v255 = *v254;
                      if (v252 >= HIDWORD(v541))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v540, (uint64_t)v542, v252 + 1, 4);
                        v249 = v537;
                        v252 = v541;
                      }
                      *((_DWORD *)v540 + v252) = v255;
                      v252 = v541 + 1;
                      LODWORD(v541) = v541 + 1;
                    }
                    v254 += 8;
                    v253 -= 32;
                  }
                  while (v253);
                  v248 = *(_QWORD *)(v11 + 296);
                }
                v275 = *(int32x2_t **)(v248 + 288);
                v276 = v275[46];
                v277 = v275[48].u32[0];
                if (!(_DWORD)v277)
                  goto LABEL_394;
                LODWORD(v278) = (v277 - 1) & (v250 ^ (v249 >> 9));
                v279 = (llvm::MachineInstr **)(*(_QWORD *)&v276 + 16 * v278);
                v280 = *v279;
                if (*v279 != v249)
                {
                  v281 = 1;
                  while (v280 != (llvm::MachineInstr *)-4096)
                  {
                    v282 = v278 + v281++;
                    v278 = v282 & (v277 - 1);
                    v280 = *(llvm::MachineInstr **)(*(_QWORD *)&v276 + 16 * v278);
                    if (v280 == v249)
                    {
                      v279 = (llvm::MachineInstr **)(*(_QWORD *)&v276 + 16 * v278);
                      goto LABEL_395;
                    }
                  }
LABEL_394:
                  v279 = (llvm::MachineInstr **)(*(_QWORD *)&v276 + 16 * v277);
                }
LABEL_395:
                if (v279 != (llvm::MachineInstr **)(*(_QWORD *)&v276 + 16 * v277))
                {
                  v286 = (unint64_t)v279[1] & 0xFFFFFFFFFFFFFFF8;
                  *v279 = (llvm::MachineInstr *)-8192;
                  v275[47] = vadd_s32(v275[47], (int32x2_t)0x1FFFFFFFFLL);
                  *(_QWORD *)(v286 + 16) = 0;
                }
              }
              v287 = v249;
              if ((*(_BYTE *)v249 & 4) == 0)
              {
                v287 = v249;
                if ((*((_WORD *)v249 + 22) & 8) != 0)
                {
                  v287 = v249;
                  do
                    v287 = (llvm::MachineInstr *)*((_QWORD *)v287 + 1);
                  while ((*((_WORD *)v287 + 22) & 8) != 0);
                }
              }
              sub_1C487FE80(*((_QWORD *)v249 + 3) + 40, (uint64_t)v537, *((_QWORD *)v287 + 1));
              v288 = *(_DWORD *)(v11 + 344);
              if (v288)
              {
                v289 = *(_QWORD *)(v11 + 328);
                v290 = v288 - 1;
                LODWORD(v291) = (v288 - 1) & (v250 ^ (v537 >> 9));
                v292 = (llvm::MachineInstr **)(v289 + 16 * v291);
                v293 = *v292;
                if (v537 == *v292)
                {
LABEL_405:
                  *v292 = (llvm::MachineInstr *)-8192;
                  *(int32x2_t *)(v11 + 336) = vadd_s32(*(int32x2_t *)(v11 + 336), (int32x2_t)0x1FFFFFFFFLL);
                }
                else
                {
                  v294 = 1;
                  while (v293 != (llvm::MachineInstr *)-4096)
                  {
                    v295 = v291 + v294++;
                    v291 = v295 & v290;
                    v293 = *(llvm::MachineInstr **)(v289 + 16 * v291);
                    if (v537 == v293)
                    {
                      v292 = (llvm::MachineInstr **)(v289 + 16 * v291);
                      goto LABEL_405;
                    }
                  }
                }
              }
              v296 = *(_QWORD *)(v11 + 296);
              if (v296)
                llvm::LiveIntervals::repairIntervalsInRange(v296, *(_QWORD *)(v11 + 320), *(_QWORD *)v543, *((_QWORD *)v543 + 1), v540, v541);
              *v10 = *((_QWORD *)v543 + 1);
              if (v540 != v542)
                free(v540);
            }
            else
            {
              v256 = *(_QWORD *)v543;
              v257 = *(_QWORD *)v543;
              if ((**(_BYTE **)v543 & 4) == 0)
              {
                v257 = *(_QWORD *)v543;
                if ((*(_WORD *)(v256 + 44) & 8) != 0)
                {
                  v257 = *(_QWORD *)v543;
                  do
                    v257 = *(_QWORD *)(v257 + 8);
                  while ((*(_WORD *)(v257 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(*(_QWORD *)v543 + 24) + 40, v256, *(_QWORD *)(v257 + 8));
              v258 = *((_QWORD *)v543 + 1);
              v259 = v258;
              if ((*(_BYTE *)v258 & 4) == 0)
              {
                v259 = *((_QWORD *)v543 + 1);
                if ((*(_WORD *)(v258 + 44) & 8) != 0)
                {
                  v259 = *((_QWORD *)v543 + 1);
                  do
                    v259 = *(_QWORD *)(v259 + 8);
                  while ((*(_WORD *)(v259 + 44) & 8) != 0);
                }
              }
              sub_1C487FE80(*(_QWORD *)(v258 + 24) + 40, v258, *(_QWORD *)(v259 + 8));
              v260 = *(_DWORD *)(v11 + 344);
              if (v260)
              {
                v261 = *(_QWORD *)(v11 + 328);
                v262 = v543;
                v263 = v260 - 1;
                LODWORD(v264) = ((*(_QWORD *)v543 >> 4) ^ (*(_QWORD *)v543 >> 9)) & v263;
                v265 = (uint64_t *)(v261 + 16 * v264);
                v266 = *v265;
                if (*(_QWORD *)v543 == *v265)
                {
LABEL_365:
                  *v265 = -8192;
                  *(int32x2_t *)(v11 + 336) = vadd_s32(*(int32x2_t *)(v11 + 336), (int32x2_t)0x1FFFFFFFFLL);
                  v261 = *(_QWORD *)(v11 + 328);
                  v262 = v543;
                }
                else
                {
                  v267 = 1;
                  while (v266 != -4096)
                  {
                    v268 = v264 + v267++;
                    v264 = v268 & v263;
                    v266 = *(_QWORD *)(v261 + 16 * v264);
                    if (*(_QWORD *)v543 == v266)
                    {
                      v265 = (uint64_t *)(v261 + 16 * v264);
                      goto LABEL_365;
                    }
                  }
                }
                v269 = v262[1];
                LODWORD(v270) = ((v269 >> 4) ^ (v269 >> 9)) & v263;
                v271 = (uint64_t *)(v261 + 16 * v270);
                v272 = *v271;
                if (v269 == *v271)
                {
LABEL_371:
                  *v271 = -8192;
                  *(int32x2_t *)(v11 + 336) = vadd_s32(*(int32x2_t *)(v11 + 336), (int32x2_t)0x1FFFFFFFFLL);
                }
                else
                {
                  v273 = 1;
                  while (v272 != -4096)
                  {
                    v274 = v270 + v273++;
                    v270 = v274 & v263;
                    v272 = *(_QWORD *)(v261 + 16 * v270);
                    if (v269 == v272)
                    {
                      v271 = (uint64_t *)(v261 + 16 * v270);
                      goto LABEL_371;
                    }
                  }
                }
              }
              --*a6;
            }
            v202 = (_BYTE **)v543;
          }
          if (v202 != &v545)
            free(v202);
        }
      }
    }
  }
  return 0;
}

void sub_1C52D3A5C(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 > 1u || *(_DWORD *)(a1 + 4))
  {
    if ((v1 & 1) != 0)
    {
      v2 = a1 + 8;
      v3 = a1 + 232;
    }
    else
    {
      v6 = *(_DWORD *)(a1 + 16);
      if (((2 * v1) & 0xFFFFFFFC) < v6)
      {
        if (v6 > 0x40)
        {
          sub_1C621D1F8(a1);
          return;
        }
      }
      else if (!v6)
      {
        v5 = 0;
LABEL_11:
        *(_DWORD *)a1 = v5;
        *(_DWORD *)(a1 + 4) = 0;
        return;
      }
      v2 = *(_QWORD *)(a1 + 8);
      v3 = v2 + 56 * v6;
    }
    do
    {
      if (*(_DWORD *)v2 != -1)
      {
        if (*(_DWORD *)v2 != -2)
        {
          v4 = *(void **)(v2 + 8);
          if ((void *)(v2 + 24) != v4)
          {
            v9 = a1;
            v7 = v3;
            v8 = v2;
            free(v4);
            v3 = v7;
            v2 = v8;
            a1 = v9;
          }
        }
        *(_DWORD *)v2 = -1;
      }
      v2 += 56;
    }
    while (v2 != v3);
    v5 = *(_DWORD *)a1 & 1;
    goto LABEL_11;
  }
}

void sub_1C52D3B58(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  _BOOL4 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  llvm::SmallPtrSetImplBase *v39;
  unsigned int v40;
  int v41;
  _DWORD v42[7];
  unsigned int v43;
  void *v44;
  uint64_t v45;
  _QWORD v46[3];

  v3 = 0;
  v46[2] = *MEMORY[0x1E0C80C00];
  v4 = a2;
  v44 = v46;
  v45 = 0x400000000;
  v39 = (llvm::SmallPtrSetImplBase *)(a1 + 352);
  v37 = a1 + 448;
  v43 = 0;
  while (2)
  {
    v5 = *(_QWORD *)(a1 + 320);
    v6 = *(_QWORD *)(a1 + 280);
    v7 = *(_QWORD *)(a1 + 256);
    v8 = *(_QWORD *)(a1 + 296);
    if ((v4 & 0x80000000) != 0)
      v9 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16 * (v4 & 0x7FFFFFFF) + 8);
    else
      v9 = (uint64_t *)(*(_QWORD *)(v6 + 272) + 8 * v4);
    v10 = *v9;
    if (!*v9)
      goto LABEL_44;
    while ((*(_DWORD *)v10 & 0x81000000) != 0)
    {
      v10 = *(_QWORD *)(v10 + 24);
      if (!v10)
        goto LABEL_44;
    }
    v11 = *(_QWORD *)(v10 + 8);
    if (*(_QWORD *)(v11 + 24) != v5)
    {
LABEL_44:
      v30 = v45;
      goto LABEL_48;
    }
    v12 = 0;
LABEL_11:
    if (sub_1C52D4048(v11, v4, v8))
      v12 = v10;
    while (1)
    {
      v10 = *(_QWORD *)(v10 + 24);
      if (!v10)
        break;
      if ((*(_DWORD *)v10 & 0x81000000) == 0)
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (*(_QWORD *)(v11 + 24) == v5)
          goto LABEL_11;
        goto LABEL_44;
      }
    }
    if (!v12)
      goto LABEL_44;
    v13 = *(_QWORD *)(v12 + 8);
    v43 = 0;
    v14 = **(unsigned __int16 **)(v13 + 16);
    v15 = v14 > 0x13;
    v16 = (1 << v14) & 0x80A00;
    if (!v15 && v16 != 0)
    {
      v43 = *(_DWORD *)(*(_QWORD *)(v13 + 32) + 4);
      v18 = v43 - 1 < 0x3FFFFFFF;
LABEL_23:
      sub_1C4774094(v39, v13);
      if (!v19)
        goto LABEL_44;
      v3 = 1;
      goto LABEL_25;
    }
    if (!sub_1C52D4348((llvm::MachineInstr *)v13, v4, &v43))
    {
      if ((*(_BYTE *)(*(_QWORD *)(v13 + 16) + 11) & 2) == 0)
        goto LABEL_44;
      v42[0] = -1;
      v40 = (unint64_t)(v12 - *(_QWORD *)(v13 + 32)) >> 5;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, _DWORD *, unsigned int *))(*(_QWORD *)v7 + 200))(v7, v13, v42, &v40))goto LABEL_44;
      v29 = *(_QWORD *)(v13 + 32);
      if ((*(_DWORD *)(v29 + 32 * v42[0]) & 0x10000FF) != 0
        || (sub_1C52D4348((llvm::MachineInstr *)v13, *(_DWORD *)(v29 + 32 * v42[0] + 4), &v43) & 1) == 0)
      {
        goto LABEL_44;
      }
    }
    v18 = v43 - 1 < 0x3FFFFFFF;
    if (v3)
      goto LABEL_23;
LABEL_25:
    v20 = *(_QWORD *)(a1 + 328);
    v21 = *(unsigned int *)(a1 + 344);
    if (!(_DWORD)v21)
    {
LABEL_31:
      v23 = (uint64_t *)(v20 + 16 * v21);
      goto LABEL_32;
    }
    LODWORD(v22) = (v21 - 1) & ((v13 >> 4) ^ (v13 >> 9));
    v23 = (uint64_t *)(v20 + 16 * v22);
    v24 = *v23;
    if (v13 != *v23)
    {
      v25 = 1;
      while (v24 != -4096)
      {
        v26 = v22 + v25++;
        v22 = v26 & (v21 - 1);
        v24 = *(_QWORD *)(v20 + 16 * v22);
        if (v13 == v24)
        {
          v23 = (uint64_t *)(v20 + 16 * v22);
          goto LABEL_32;
        }
      }
      goto LABEL_31;
    }
LABEL_32:
    if (v23 != (uint64_t *)(v20 + 16 * v21))
      goto LABEL_44;
    if (!v18)
    {
      sub_1C61482A0(v37, (int *)&v43)[1] = v4;
      v27 = v43;
      v28 = v45;
      if (v45 >= (unint64_t)HIDWORD(v45))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v45 + 1, 4);
        v28 = v45;
      }
      *((_DWORD *)v44 + v28) = v27;
      LODWORD(v45) = v45 + 1;
      v4 = v43;
      continue;
    }
    break;
  }
  v31 = v43;
  v32 = v45;
  if (v45 >= HIDWORD(v45))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v44, (uint64_t)v46, v45 + 1, 4);
    v32 = v45;
  }
  *((_DWORD *)v44 + v32) = v31;
  v30 = v45 + 1;
  LODWORD(v45) = v45 + 1;
LABEL_48:
  v33 = v44;
  if (v30)
  {
    v34 = *((_DWORD *)v44 + v30 - 1);
    v35 = v30 - 1;
    LODWORD(v45) = v35;
    if (v35)
    {
      do
      {
        v36 = *((_DWORD *)v44 + v35 - 1);
        LODWORD(v45) = v35 - 1;
        v40 = v36;
        v41 = v34;
        sub_1C52D3F5C((uint64_t)v42, a1 + 472, (int *)&v40, &v41);
        v35 = v45;
        v34 = v36;
      }
      while ((_DWORD)v45);
    }
    else
    {
      v36 = v34;
    }
    v40 = a2;
    v41 = v36;
    sub_1C52D3F5C((uint64_t)v42, a1 + 472, (int *)&v40, &v41);
    v33 = v44;
  }
  if (v33 != v46)
    free(v33);
}

_DWORD *sub_1C52D3F5C(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _DWORD *result;
  int v12;
  _DWORD *v13;
  int v14;
  _DWORD *v15;
  char v16;
  BOOL v17;
  unsigned int v18;

  v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)a2;
    v10 = (37 * *a3) & (v8 - 1);
    result = (_DWORD *)(*(_QWORD *)a2 + 8 * v10);
    v12 = *result;
    if (*a3 == *result)
    {
LABEL_16:
      v16 = 0;
      goto LABEL_9;
    }
    v13 = 0;
    v14 = 1;
    while (v12 != -1)
    {
      if (v13)
        v17 = 0;
      else
        v17 = v12 == -2;
      if (v17)
        v13 = result;
      v18 = v10 + v14++;
      v10 = v18 & (v8 - 1);
      result = (_DWORD *)(v9 + 8 * v10);
      v12 = *result;
      if (*a3 == *result)
        goto LABEL_16;
    }
    if (v13)
      v15 = v13;
    else
      v15 = result;
  }
  else
  {
    v15 = 0;
  }
  result = sub_1C4979214(a2, (uint64_t)a3, a3, v15);
  *result = *a3;
  result[1] = *a4;
  v9 = *(_QWORD *)a2;
  v8 = *(_DWORD *)(a2 + 16);
  v16 = 1;
LABEL_9:
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9 + 8 * v8;
  *(_BYTE *)(a1 + 16) = v16;
  return result;
}

BOOL sub_1C52D4048(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  unsigned int *v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v44;
  uint64_t v45;
  uint64_t v46;

  if (!a3)
    return llvm::MachineInstr::findRegisterUseOperandIdx(a1, a2, 1, 0) != -1;
  if ((a2 & 0x80000000) == 0)
    return llvm::MachineInstr::findRegisterUseOperandIdx(a1, a2, 1, 0) != -1;
  v3 = *(_QWORD *)(a3 + 288);
  v4 = *(_DWORD *)(v3 + 384);
  if (!v4)
    return llvm::MachineInstr::findRegisterUseOperandIdx(a1, a2, 1, 0) != -1;
  v5 = *(_QWORD *)(v3 + 368);
  v6 = v4 - 1;
  v7 = v6 & ((a1 >> 4) ^ (a1 >> 9));
  v8 = *(_QWORD *)(v5 + 16 * v7);
  if (v8 != a1)
  {
    v9 = 1;
    while (v8 != -4096)
    {
      v10 = v7 + v9++;
      v7 = v10 & v6;
      v8 = *(_QWORD *)(v5 + 16 * v7);
      if (v8 == a1)
        goto LABEL_8;
    }
    return llvm::MachineInstr::findRegisterUseOperandIdx(a1, a2, 1, 0) != -1;
  }
LABEL_8:
  if ((a2 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(a3 + 416)
    || (v11 = *(unsigned int **)(*(_QWORD *)(a3 + 408) + 8 * (a2 & 0x7FFFFFFF))) == 0)
  {
    v45 = a1;
    v46 = a3;
    v11 = (unsigned int *)sub_1C4851220(a3, a2);
    v38 = *(_QWORD *)(v46 + 304);
    v39 = *(_QWORD *)(v46 + 248);
    v40 = *(_QWORD *)(v39 + 40);
    *(_QWORD *)v38 = v39;
    *(_QWORD *)(v38 + 8) = v40;
    *(_OWORD *)(v38 + 16) = *(_OWORD *)(v46 + 288);
    *(_QWORD *)(v38 + 32) = v46 + 312;
    llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v38);
    *(_DWORD *)(v38 + 184) = 0;
    v41 = *(_QWORD *)(v46 + 256);
    v19 = *(_BYTE *)(v41 + 16) == 0;
    v42 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v41 + 24) + 16 * (v11[28] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                             + 34);
    v44 = !v19 && v42 != 0;
    llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v46 + 304), (llvm::LiveInterval *)v11, v44);
    llvm::LiveIntervals::computeDeadValues(v46, (uint64_t)v11, 0);
    a1 = v45;
    a3 = v46;
  }
  if (!v11[18])
    return 0;
  v12 = *(_WORD *)(a1 + 44);
  v13 = a1;
  if ((v12 & 4) != 0)
  {
    v13 = a1;
    do
      v13 = *(_QWORD *)v13 & 0xFFFFFFFFFFFFFFF8;
    while ((*(_WORD *)(v13 + 44) & 4) != 0);
  }
  v14 = *(_QWORD *)(a3 + 288);
  if ((v12 & 8) != 0)
  {
    do
      a1 = *(_QWORD *)(a1 + 8);
    while ((*(_WORD *)(a1 + 44) & 8) != 0);
  }
  v15 = *(_QWORD *)(a1 + 8);
  if (v13 != v15)
  {
    while (1)
    {
      v16 = **(unsigned __int16 **)(v13 + 16);
      v17 = v16 > 0x17;
      v18 = (1 << v16) & 0x83E000;
      v19 = v17 || v18 == 0;
      if (v19)
        break;
      v13 = *(_QWORD *)(v13 + 8);
      if (v13 == v15)
      {
        v13 = *(_QWORD *)(a1 + 8);
        break;
      }
    }
  }
  v20 = *(_QWORD *)(v14 + 368);
  v21 = *(unsigned int *)(v14 + 384);
  if ((_DWORD)v21)
  {
    LODWORD(v22) = ((v13 >> 4) ^ (v13 >> 9)) & (v21 - 1);
    v23 = (uint64_t *)(v20 + 16 * v22);
    v24 = *v23;
    if (v13 == *v23)
      goto LABEL_28;
    v25 = 1;
    while (v24 != -4096)
    {
      v26 = v22 + v25++;
      v22 = v26 & (v21 - 1);
      v24 = *(_QWORD *)(v20 + 16 * v22);
      if (v13 == v24)
      {
        v23 = (uint64_t *)(v20 + 16 * v22);
        goto LABEL_28;
      }
    }
  }
  v23 = (uint64_t *)(v20 + 16 * v21);
LABEL_28:
  v28 = v23[1];
  v29 = v11[2];
  v30 = *(_QWORD *)v11;
  if (!(_DWORD)v29)
  {
    LODWORD(v29) = 0;
    goto LABEL_38;
  }
  v31 = *(_QWORD *)(v30 + 24 * v29 - 16);
  v32 = *(_DWORD *)((v28 & 0xFFFFFFFFFFFFFFF8) + 24) | (v28 >> 1) & 3;
  if (v32 >= ((v31 >> 1) & 3 | *(_DWORD *)((v31 & 0xFFFFFFFFFFFFFFF8) + 24)))
  {
LABEL_38:
    v30 += 24 * v29;
    goto LABEL_39;
  }
  do
  {
    v33 = v29 >> 1;
    v34 = *(_QWORD *)(v30 + 24 * (v29 >> 1) + 8);
    LODWORD(v34) = (v34 >> 1) & 3 | *(_DWORD *)((v34 & 0xFFFFFFFFFFFFFFF8) + 24);
    v29 -= (v29 >> 1) + 1;
    v35 = v32 >= v34;
    if (v32 >= v34)
      v36 = v33 + 1;
    else
      v36 = 0;
    v30 += 24 * v36;
    if (!v35)
      v29 = v33;
  }
  while (v29);
LABEL_39:
  v37 = *(_QWORD *)(v30 + 8);
  if ((v37 & 6) != 0)
    return (v37 & 0xFFFFFFFFFFFFFFF8) == (v28 & 0xFFFFFFFFFFFFFFF8);
  return 0;
}

uint64_t sub_1C52D4348(llvm::MachineInstr *this, int a2, _DWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *i;
  int v6;

  v3 = *((unsigned int *)this + 10);
  if (!(_DWORD)v3)
    return 0;
  v4 = 0;
  for (i = (_DWORD *)(*((_QWORD *)this + 4) + 4); ; i += 8)
  {
    v6 = *(i - 1);
    if ((v6 & 0x10000FF) == 0 && (v6 & 0xF00000) != 0 && *i == a2)
      break;
    if (v3 == ++v4)
      return 0;
  }
  *a3 = *(_DWORD *)(*((_QWORD *)this + 4) + 32 * llvm::MachineInstr::findTiedOperandIdx(this, v4) + 4);
  return 1;
}

uint64_t sub_1C52D43E0(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  _DWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 56 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -1)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 56 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

void sub_1C52D448C(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  void **v13;
  _BYTE v14[224];
  uint64_t v15;

  v2 = a2;
  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(56 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C621D0F4(a1, v7, v7 + 56 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v14;
  do
  {
    v11 = a1 + v9;
    v12 = *(_DWORD *)(a1 + v9 + 8);
    if (v12 <= 0xFFFFFFFD)
    {
      *(_DWORD *)v10 = v12;
      *((_QWORD *)v10 + 1) = v10 + 24;
      v13 = (void **)(v11 + 16);
      *((_QWORD *)v10 + 2) = 0x400000000;
      if (*(_DWORD *)(v11 + 24))
        sub_1C52D4668((uint64_t)(v10 + 8), (uint64_t)v13);
      v10 += 56;
      if ((void *)(a1 + v9 + 32) != *v13)
        free(*v13);
    }
    v9 += 56;
  }
  while (v9 != 224);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(56 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C621D0F4(a1, (uint64_t)v14, (uint64_t)v10);
}

uint64_t sub_1C52D4668(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  _DWORD *v14;

  if (a1 != a2)
  {
    v5 = a2 + 16;
    v4 = *(_DWORD **)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v7 = (_DWORD *)(a2 + 8);
      v8 = *(unsigned int *)(a2 + 8);
      v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if ((_DWORD)v8)
        {
          v11 = &v4[2 * v8];
          v12 = *(_DWORD **)a1;
          do
          {
            *v12 = *v4;
            v12[1] = v4[1];
            v4 += 2;
            v12 += 2;
          }
          while (v4 != v11);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v8)
        {
          if ((_DWORD)v9)
          {
            v13 = &v4[2 * v9];
            v14 = *(_DWORD **)a1;
            do
            {
              *v14 = *v4;
              v14[1] = v4[1];
              v4 += 2;
              v14 += 2;
            }
            while (v4 != v13);
          }
          else
          {
            v9 = 0;
          }
          v10 = v8;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
          v9 = 0;
          v10 = *v7;
        }
        if (v9 != v10)
          memcpy((void *)(*(_QWORD *)a1 + 8 * v9), (const void *)(*(_QWORD *)a2 + 8 * v9), *(_QWORD *)a2 + 8 * v10 - (*(_QWORD *)a2 + 8 * v9));
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      v6 = *(_DWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(_DWORD **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
    }
    *v7 = 0;
  }
  return a1;
}

int *sub_1C52D47B8(int *result, uint64_t a2)
{
  int v3;

  v3 = (int)result;
  if ((result & 0x80000000) != 0)
  {
    while (1)
    {
      result = sub_1C49781B4((uint64_t *)a2, &v3);
      if ((int *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16)) == result)
        return 0;
      LODWORD(result) = result[1];
      v3 = (int)result;
      if ((result & 0x80000000) == 0)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    if (((_DWORD)result - 1) >= 0x3FFFFFFF)
      return 0;
    else
      return (int *)result;
  }
}

BOOL sub_1C52D4828(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t i;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  for (i = a2;
        (unint64_t)(i - 0x40000000) < 0xFFFFFFFFC0000001;
        i = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 32 * v11 + 4))
  {
LABEL_10:
    v10 = sub_1C52D4048(a1, i, a4);
    v11 = v10;
    if ((unint64_t)(i - 0x40000000) > 0xFFFFFFFFC0000000 || !v10)
      return v11;
    if ((i & 0x80000000) != 0)
      v12 = (uint64_t *)(*(_QWORD *)(a3 + 24) + 16 * (i & 0x7FFFFFFF) + 8);
    else
      v12 = (uint64_t *)(*(_QWORD *)(a3 + 272) + 8 * i);
    v13 = *v12;
    if ((*(_BYTE *)(v13 + 3) & 1) == 0)
    {
      v13 = *(_QWORD *)(v13 + 24);
      if ((*(_BYTE *)(v13 + 3) & 1) == 0)
        v13 = 0;
    }
    v14 = *(_QWORD *)(v13 + 24);
    if (v14 && (*(_BYTE *)(v14 + 3) & 1) != 0)
      return 1;
    a1 = *(_QWORD *)(v13 + 8);
    v15 = **(unsigned __int16 **)(a1 + 16);
    if (v15 != 9)
    {
      v11 = 1;
      if (v15 == 19)
        continue;
      if (v15 != 11)
        return v11;
    }
    v11 = 2;
  }
  if ((a5 & 1) != 0)
    return 1;
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 272) + 8 * i);
  if (v9)
  {
    while ((*(_BYTE *)(v9 + 3) & 1) != 0)
    {
      v9 = *(_QWORD *)(v9 + 24);
      if (!v9)
        goto LABEL_10;
    }
    while (1)
    {
      v9 = *(_QWORD *)(v9 + 24);
      if (!v9)
        return 1;
      if ((*(_BYTE *)(v9 + 3) & 1) == 0)
        goto LABEL_10;
    }
  }
  return sub_1C52D4048(a1, i, a4);
}

BOOL sub_1C52D497C(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;

  *a4 = 0;
  v4 = *(_QWORD *)(a1 + 280);
  if ((a2 & 0x80000000) != 0)
    v5 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16 * (a2 & 0x7FFFFFFF) + 8);
  else
    v5 = (uint64_t *)(*(_QWORD *)(v4 + 272) + 8 * a2);
  v6 = *v5;
  if (*v5)
  {
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 320);
    v9 = a3;
    while (1)
    {
      v10 = *(_QWORD *)(v6 + 8);
      if (*(_QWORD *)(v10 + 24) == v8 && **(unsigned __int16 **)(v10 + 16) - 13 >= 2)
        break;
LABEL_22:
      v6 = *(_QWORD *)(v6 + 24);
      if (!v6)
        return v9 >= a3 || v9 <= v7;
    }
    v11 = *(_QWORD *)(a1 + 328);
    v12 = *(unsigned int *)(a1 + 344);
    if ((_DWORD)v12)
    {
      LODWORD(v13) = (v12 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      v14 = (uint64_t *)(v11 + 16 * v13);
      v15 = *v14;
      if (v10 == *v14)
        goto LABEL_15;
      v16 = 1;
      while (v15 != -4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(_QWORD *)(v11 + 16 * v13);
        if (v10 == v15)
        {
          v14 = (uint64_t *)(v11 + 16 * v13);
          goto LABEL_15;
        }
      }
    }
    v14 = (uint64_t *)(v11 + 16 * v12);
LABEL_15:
    if (v14 != (uint64_t *)(v11 + 16 * v12))
    {
      v18 = *((_DWORD *)v14 + 2);
      if ((*(_BYTE *)(v6 + 3) & 1) != 0)
      {
        if (v18 > v7)
        {
          *a4 = v18;
          v7 = v18;
        }
      }
      else if (v18 < v9)
      {
        v9 = *((_DWORD *)v14 + 2);
      }
    }
    goto LABEL_22;
  }
  v7 = 0;
  v9 = a3;
  return v9 >= a3 || v9 <= v7;
}

uint64_t sub_1C52D4A94(uint64_t a1, unsigned int a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a4 >= 1)
  {
    v4 = 0;
    v5 = a2;
    v6 = *(_QWORD *)(a1 + 280);
    do
    {
      v7 = (uint64_t *)((v5 & 0x80000000) != 0
                     ? *(_QWORD *)(v6 + 24) + 16 * (v5 & 0x7FFFFFFF) + 8
                     : *(_QWORD *)(v6 + 272) + 8 * v5);
      v8 = *v7;
      if (!v8)
        break;
      if ((*(_BYTE *)(v8 + 3) & 1) == 0)
      {
        v8 = *(_QWORD *)(v8 + 24);
        if (!v8 || (*(_BYTE *)(v8 + 3) & 1) == 0)
          break;
      }
      v9 = 0;
      v10 = *(_QWORD *)(v8 + 8);
LABEL_11:
      if (*(_QWORD *)(v10 + 24) != *(_QWORD *)(a1 + 320) || **(unsigned __int16 **)(v10 + 16) - 13 < 2)
      {
        v11 = v9;
        goto LABEL_14;
      }
      v11 = v10;
      if (v9)
      {
        v11 = v10;
        if (v9 != v10)
          break;
      }
LABEL_14:
      while (1)
      {
        v8 = *(_QWORD *)(v8 + 24);
        if (!v8 || (*(_BYTE *)(v8 + 3) & 1) == 0)
          break;
        if (*(_QWORD *)(v8 + 8) != v10)
        {
          v10 = *(_QWORD *)(v8 + 8);
          v9 = v11;
          goto LABEL_11;
        }
      }
      if (!v11 || **(_WORD **)(v11 + 16) != 19)
        return 0;
      v5 = *(unsigned int *)(*(_QWORD *)(v11 + 32) + 36);
      if (v5 == a3)
        return 1;
      ++v4;
    }
    while (v4 != a4);
  }
  return 0;
}

void sub_1C52D4B9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v1 = a1 + 8;
    v2 = 4;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v2)
      return;
    v1 = *(_QWORD *)(a1 + 8);
  }
  v3 = 56 * v2;
  v4 = (_QWORD *)(v1 + 24);
  do
  {
    if (*((_DWORD *)v4 - 6) <= 0xFFFFFFFD)
    {
      v5 = (_QWORD *)*(v4 - 2);
      if (v4 != v5)
      {
        v6 = v4;
        v7 = v3;
        free(v5);
        v4 = v6;
        v3 = v7;
      }
    }
    v4 += 7;
    v3 -= 56;
  }
  while (v3);
}

uint64_t sub_1C52D4C14()
{
  __n128 v1;
  int v2;
  int *v3;
  int v4;

  v1.n128_u64[0] = (unint64_t)"Coalesce copies by rescheduling (default=true)";
  v1.n128_u64[1] = 46;
  LOBYTE(v2) = 1;
  v3 = &v2;
  v4 = 1;
  sub_1C6147A00((llvm::cl::Option *)&unk_1ED803758, "twoaddr-reschedule", &v1, (_BYTE **)&v3, &v4);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED803758, &dword_1C475E000);
  v4 = 1;
  v2 = 3;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Maximum number of dataflow edges to traverse when evaluating the benefit of commuting operands";
  v1.n128_u64[1] = 94;
  sub_1C621D2C8(&v4, &v3, (__int128 *)&v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED803818, &dword_1C475E000);
}

uint64_t sub_1C52D4CE4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Remove unreachable blocks from the CFG";
  *(_QWORD *)(v2 + 8) = 38;
  *(_QWORD *)(v2 + 16) = "unreachableblockelim";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2F91;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C52D4F48;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C52D4D74(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F2F91;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E814D460;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8304C8);
  if (v3 != -1)
  {
    v7[0] = sub_1C52D4CE4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8304C8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::UnreachableBlockElimPass::run@<X0>(llvm *a1@<X1>, uint64_t a2@<X8>)
{
  BOOL v3;

  v3 = llvm::EliminateUnreachableBlocks(a1, 0, 0);
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_QWORD *)(a2 + 64) = 2;
  *(_DWORD *)(a2 + 72) = 0;
  if (v3)
    return sub_1C4DDB144(a2, (uint64_t)&llvm::DominatorTreeAnalysis::Key);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C52D4EB8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Remove unreachable machine basic blocks";
  *(_QWORD *)(v2 + 8) = 39;
  *(_QWORD *)(v2 + 16) = "unreachable-mbb-elimination";
  *(_QWORD *)(v2 + 24) = 27;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7020;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C52D4FBC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C52D4F48()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C52D4D74(v0);
}

void sub_1C52D4F74(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C52D4F98(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

BOOL sub_1C52D4FAC(uint64_t a1, llvm *a2)
{
  return llvm::EliminateUnreachableBlocks(a2, 0, 0);
}

_QWORD *sub_1C52D4FBC()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F7020);
  *result = &off_1E814D500;
  return result;
}

void sub_1C52D4FFC(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C52D5090(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C52D511C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  uint64_t v4;

  v4 = (uint64_t)a2 + 112;
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)a2, v4, (uint64_t)&llvm::MachineDominatorTree::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C52D5178(uint64_t a1, uint64_t a2)
{
  llvm::PMDataManager *v3;
  uint64_t AnalysisPass;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  const llvm::MachineInstr *i;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  char v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  int v49;
  int v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t *v56;
  unsigned int v57;
  unsigned int *v58;
  unsigned int v59;
  uint64_t v60;
  llvm::MachineOperand *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  uint64_t v69;
  llvm::MachineFunction *v70;
  unsigned __int8 *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unsigned int v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v96;
  char *__p;
  char *__pa;
  _QWORD *v99;
  int32x2_t *v100;
  int v101;
  _QWORD *v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE v108[64];
  char *v109;
  char *v110;
  uint64_t v111;
  int v112;
  _BYTE v113[64];
  unsigned __int8 *v114;
  unsigned __int8 *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v109 = v113;
  v110 = v113;
  v111 = 8;
  v112 = 0;
  v3 = *(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24);
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(v3, &llvm::MachineDominatorTree::ID, 1);
  if (AnalysisPass)
  {
    v5 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineDominatorTree::ID);
    v3 = *(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24);
  }
  else
  {
    v5 = 0;
  }
  v6 = llvm::PMDataManager::findAnalysisPass(v3, &llvm::MachineLoopInfo::ID, 1);
  if (v6)
    v100 = (int32x2_t *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v6 + 96))(v6, &llvm::MachineLoopInfo::ID);
  else
    v100 = 0;
  v115 = (unsigned __int8 *)a2;
  sub_1C520AEA8((llvm::SmallPtrSetImplBase *)&v109, (uint64_t)&v115, &v104);
  v7 = v105;
  v8 = (_BYTE *)v106;
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v106 - (uint64_t)v105) >> 3);
  v105 = 0;
  v106 = 0;
  v107 = 0;
  sub_1C4D6CDA0(&v105, v7, v8, v9);
  while ((_BYTE *)v106 != v105)
    sub_1C520B4C4((uint64_t)&v104);
  if (v106)
    operator delete((void *)v106);
  if (v7)
    operator delete(v7);
  v10 = *(_QWORD **)(a2 + 328);
  v103 = (_QWORD *)(a2 + 320);
  if (v10 == (_QWORD *)(a2 + 320))
  {
    v41 = 0;
    v11 = 0;
  }
  else
  {
    __p = 0;
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (char *)sub_1C477672C((uint64_t)&v109, (uint64_t)v10);
      if (v110 == v109)
        v14 = (uint64_t *)((char *)&v111 + 4);
      else
        v14 = &v111;
      if (v13 == &v110[8 * *(unsigned int *)v14])
      {
        if (v11 >= v12)
        {
          v16 = __p;
          v17 = (v11 - __p) >> 3;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 61)
            abort();
          if ((v12 - __p) >> 2 > v18)
            v18 = (v12 - __p) >> 2;
          if ((unint64_t)(v12 - __p) >= 0x7FFFFFFFFFFFFFF8)
            v19 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v19 = v18;
          if (v19)
          {
            if (v19 >> 61)
              sub_1C4764EE4();
            v20 = (char *)operator new(8 * v19);
            v16 = __p;
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[8 * v17];
          *(_QWORD *)v21 = v10;
          v15 = v21 + 8;
          while (v11 != v16)
          {
            v22 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *((_QWORD *)v21 - 1) = v22;
            v21 -= 8;
          }
          v12 = &v20[8 * v19];
          if (v16)
            operator delete(v16);
          __p = v21;
        }
        else
        {
          *(_QWORD *)v11 = v10;
          v15 = v11 + 8;
        }
        if (v100)
          llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::removeBlock(v100 + 31, (uint64_t)v10);
        if (v5 && sub_1C49FA70C(v5, (uint64_t)v10))
        {
          llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v5);
          llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::eraseNode(*(int32x2_t **)(v5 + 1320), (uint64_t)v10);
        }
        while (1)
        {
          v32 = (char *)v10[11];
          if (v32 == (char *)v10[12])
            break;
          v23 = *(_QWORD *)v32 + 48;
          v24 = *(_QWORD *)(*(_QWORD *)v32 + 56);
          if (v24 != v23)
          {
            do
            {
              v25 = **(unsigned __int16 **)(v24 + 16);
              if (v25 != 69 && v25 != 0)
                break;
              v27 = *(_DWORD *)(v24 + 40);
              v28 = v27 - 1;
              if ((v27 - 1) >= 2)
              {
                v29 = v27 - 2;
                v30 = 32 * (v27 - 1);
                do
                {
                  v31 = *(_QWORD *)(v24 + 32);
                  if (*(_BYTE *)(v31 + v30) == 4 && *(_QWORD **)(v31 + v30 + 16) == v10)
                  {
                    llvm::MachineInstr::removeOperand(v24, v28);
                    llvm::MachineInstr::removeOperand(v24, v29);
                  }
                  v28 -= 2;
                  v29 -= 2;
                  v30 -= 64;
                }
                while ((v28 & 0xFFFFFFFE) != 0);
              }
              if ((*(_BYTE *)v24 & 4) == 0)
              {
                while ((*(_WORD *)(v24 + 44) & 8) != 0)
                  v24 = *(_QWORD *)(v24 + 8);
              }
              v24 = *(_QWORD *)(v24 + 8);
            }
            while (v24 != v23);
            v32 = (char *)v10[11];
          }
          llvm::MachineBasicBlock::removeSuccessor((uint64_t)v10, v32, 0);
        }
        v11 = v15;
      }
      v10 = (_QWORD *)v10[1];
    }
    while (v10 != v103);
    v33 = __p;
    if (__p == v11)
    {
      v41 = v11;
    }
    else
    {
      do
      {
        v34 = *(uint64_t **)v33;
        v35 = *(_QWORD *)v33 + 48;
        for (i = *(const llvm::MachineInstr **)(*(_QWORD *)v33 + 56);
              i != (const llvm::MachineInstr *)v35;
              i = (const llvm::MachineInstr *)*((_QWORD *)i + 1))
        {
          if (llvm::MachineInstr::shouldUpdateCallSiteInfo(i))
            llvm::MachineFunction::eraseCallSiteInfo((int32x2_t *)v34[4], i);
        }
        v37 = v34[4];
        v38 = v37 + 320;
        *(_QWORD *)(*(_QWORD *)(v37 + 104) + 8 * *((unsigned int *)v34 + 6)) = 0;
        *((_DWORD *)v34 + 6) = -1;
        v39 = *v34;
        v40 = (_QWORD *)v34[1];
        *v40 = *v34;
        *(_QWORD *)(v39 + 8) = v40;
        *v34 = 0;
        v34[1] = 0;
        llvm::ilist_alloc_traits<llvm::MachineBasicBlock>::deleteNode(v38, (llvm::MachineBasicBlock *)v34);
        v33 += 8;
      }
      while (v33 != v11);
      v41 = __p;
    }
  }
  __pa = v41;
  v42 = *(_QWORD **)(a2 + 328);
  if (v42 == v103)
  {
    v43 = 0;
    goto LABEL_163;
  }
  v43 = 0;
  do
  {
    v44 = (uint64_t *)v42[8];
    v45 = (uint64_t *)v42[9];
    v104 = v108;
    v105 = v108;
    v106 = 8;
    LODWORD(v107) = 0;
    while (v44 != v45)
    {
      v46 = *v44++;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v104, v46);
    }
    v47 = v42 + 6;
    v48 = v42[7];
    while ((unint64_t *)v48 != v47)
    {
      v49 = **(unsigned __int16 **)(v48 + 16);
      if (v49 != 69 && v49 != 0)
        break;
      v51 = *(_DWORD *)(v48 + 40);
      v52 = (v51 - 1);
      if (v52 < 2)
        goto LABEL_97;
      v53 = v51 - 2;
      v54 = (32 * v52) | 0x10;
      do
      {
        v55 = sub_1C477672C((uint64_t)&v104, *(_QWORD *)(*(_QWORD *)(v48 + 32) + v54));
        if (v105 == v104)
          v56 = (uint64_t *)((char *)&v106 + 4);
        else
          v56 = &v106;
        if (v55 == (_QWORD *)&v105[8 * *(unsigned int *)v56])
        {
          llvm::MachineInstr::removeOperand(v48, v53 + 1);
          llvm::MachineInstr::removeOperand(v48, v53);
          v43 = 1;
        }
        v57 = v53 - 1;
        v53 -= 2;
        v54 -= 64;
      }
      while (v57 > 1);
      if (*(_DWORD *)(v48 + 40) == 3)
      {
        v58 = *(unsigned int **)(v48 + 32);
        v59 = v58[9];
        v60 = v58[1];
        if (v59 == (_DWORD)v60)
        {
          v43 = 1;
        }
        else
        {
          v61 = (llvm::MachineOperand *)(v58 + 8);
          v101 = (v58[8] >> 8) & 0xFFF;
          if (v101
            || (v62 = *(_QWORD **)(a2 + 40),
                !sub_1C51A3F30(v62, v59, *(_QWORD *)(v62[3] + 16 * (v59 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, *(_QWORD *)(v62[3] + 16 * (v60 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, 0))|| (*((_BYTE *)v61 + 3) & 0x10) != 0)
          {
            v67 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
            v68 = v47;
            if ((unint64_t *)v42[7] != v47)
            {
              v68 = (unint64_t *)v42[7];
              while (!*(_WORD *)v68[2] || *(_WORD *)v68[2] == 69)
              {
                v68 = (unint64_t *)v68[1];
                if (v68 == v47)
                {
                  v68 = v47;
                  break;
                }
              }
            }
            v69 = *(_QWORD *)(v67 + 8);
            v99 = v42;
            v70 = (llvm::MachineFunction *)v42[4];
            v71 = *(unsigned __int8 **)(v48 + 56);
            v114 = v71;
            if (v71)
            {
              v93 = v69;
              llvm::MetadataTracking::track((uint64_t)&v114, v71, 2);
              v69 = v93;
            }
            v72 = *((_QWORD *)v70 + 28);
            if (v72)
            {
              *((_QWORD *)v70 + 28) = *(_QWORD *)v72;
            }
            else
            {
              v73 = v69;
              v74 = sub_1C484358C((uint64_t)v70 + 128, 72, 3);
              v69 = v73;
              v72 = v74;
            }
            v115 = v114;
            if (v114)
            {
              v96 = v69;
              llvm::MetadataTracking::retrack((uint64_t)&v114, v114, (uint64_t)&v115);
              v69 = v96;
              v114 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v72, v70, v69 + 912, &v115, 0);
            if (v115)
              llvm::MetadataTracking::untrack((uint64_t)&v115, v115);
            if (v114)
              llvm::MetadataTracking::untrack((uint64_t)&v114, v114);
            v75 = v99[5];
            *(_QWORD *)(v72 + 24) = v75;
            v76 = *(_QWORD *)(v75 + 32);
            v77 = *(unsigned int *)(v72 + 40);
            if ((_DWORD)v77)
            {
              v86 = *(_QWORD *)(v72 + 32);
              v87 = *(_QWORD *)(v76 + 40);
              v88 = 32 * v77;
              do
              {
                if (!*(_BYTE *)v86)
                {
                  v89 = *(unsigned int *)(v86 + 4);
                  if ((int)v89 >= 0)
                    v90 = (uint64_t *)(*(_QWORD *)(v87 + 272) + 8 * v89);
                  else
                    v90 = (uint64_t *)(*(_QWORD *)(v87 + 24) + 16 * (v89 & 0x7FFFFFFF) + 8);
                  v91 = *v90;
                  if (*v90)
                  {
                    v92 = *(_QWORD *)(v91 + 16);
                    *(_QWORD *)(v91 + 16) = v86;
                    *(_QWORD *)(v86 + 16) = v92;
                    if ((*(_BYTE *)(v86 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v86 + 24) = v91;
                    }
                    else
                    {
                      *(_QWORD *)(v86 + 24) = 0;
                      v90 = (uint64_t *)(v92 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v86 + 16) = v86;
                    *(_QWORD *)(v86 + 24) = 0;
                  }
                  *v90 = v86;
                }
                v86 += 32;
                v88 -= 32;
              }
              while (v88);
            }
            v78 = *(_QWORD *)(v76 + 728);
            if (v78)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v78 + 24))(v78, v72);
            v79 = *v68 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v72 = v79 | *(_QWORD *)v72 & 7;
            *(_QWORD *)(v72 + 8) = v68;
            *(_QWORD *)(v79 + 8) = v72;
            *v68 = *v68 & 7 | v72;
            v116 = 0;
            v117 = 0;
            v118 = 0;
            LODWORD(v115) = 0x1000000;
            HIDWORD(v115) = v60;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v72, v70, (const llvm::MachineOperand *)&v115);
            v115 = (unsigned __int8 *)v70;
            v116 = v72;
            v80 = sub_1C61F5084(v61);
            sub_1C47BF4F4((llvm::MachineFunction **)&v115, v59, v80, v101);
            v42 = v99;
          }
          else
          {
            v63 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v62 + 16) + 176))(*(_QWORD *)(*v62 + 16));
            if ((v60 & 0x80000000) != 0)
              v64 = (uint64_t *)(v62[3] + 16 * (v60 & 0x7FFFFFFF) + 8);
            else
              v64 = (uint64_t *)(v62[34] + 8 * v60);
            v65 = *v64;
            if (*v64)
            {
              do
              {
                v66 = *(_QWORD *)(v65 + 24);
                if (v59 - 1 <= 0x3FFFFFFE)
                  llvm::MachineOperand::substPhysReg((unsigned int *)v65, v59, v63);
                else
                  llvm::MachineOperand::setReg(v65, v59);
                v65 = v66;
              }
              while (v66);
            }
          }
          if ((*(_BYTE *)v48 & 4) != 0 || (v81 = *(_WORD *)(v48 + 44), (v81 & 8) == 0))
          {
            v82 = *(_QWORD *)(v48 + 8);
            v83 = *(_QWORD *)(v48 + 24);
LABEL_139:
            v85 = v48;
            goto LABEL_140;
          }
          v84 = v48;
          do
            v84 = *(_QWORD *)(v84 + 8);
          while ((*(_WORD *)(v84 + 44) & 8) != 0);
          v82 = *(_QWORD *)(v84 + 8);
          v83 = *(_QWORD *)(v48 + 24);
          if ((v81 & 8) == 0)
            goto LABEL_139;
          v85 = v48;
          do
            v85 = *(_QWORD *)(v85 + 8);
          while ((*(_WORD *)(v85 + 44) & 8) != 0);
LABEL_140:
          sub_1C487FE80(v83 + 40, v48, *(_QWORD *)(v85 + 8));
          v43 = 1;
          v48 = v82;
        }
      }
      else
      {
LABEL_97:
        if ((*(_BYTE *)v48 & 4) == 0)
        {
          while ((*(_WORD *)(v48 + 44) & 8) != 0)
            v48 = *(_QWORD *)(v48 + 8);
        }
        v48 = *(_QWORD *)(v48 + 8);
      }
    }
    if (v105 != v104)
      free(v105);
    v42 = (_QWORD *)v42[1];
  }
  while (v42 != v103);
LABEL_163:
  llvm::MachineFunction::RenumberBlocks((llvm::MachineFunction *)a2, 0);
  v94 = __pa;
  if (__pa)
  {
    operator delete(__pa);
    v94 = __pa;
  }
  if (v110 != v109)
  {
    free(v110);
    v94 = __pa;
  }
  return (v94 != v11) | v43 & 1u;
}

uint64_t llvm::EVT::getExtendedIntegerVT(llvm::EVT *this, llvm::LLVMContext *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  int v7;
  int v8;

  v8 = (int)a2;
  if ((int)a2 <= 63)
  {
    if ((int)a2 <= 31)
    {
      if ((_DWORD)a2 == 16 || (_DWORD)a2 == 8 || (_DWORD)a2 == 1)
        return 0;
    }
    else if ((_DWORD)a2 == 32)
    {
      return 0;
    }
  }
  else if ((_DWORD)a2 == 64 || (_DWORD)a2 == 128)
  {
    return 0;
  }
  v4 = sub_1C5270984(*(_QWORD *)this + 2168, &v8);
  if (!*((_QWORD *)v4 + 1))
  {
    v5 = v4;
    v6 = (_QWORD *)sub_1C484358C(*(_QWORD *)this + 2040, 24, 3);
    v7 = v8;
    *v6 = this;
    v6[2] = 0;
    v6[1] = (v7 << 8) | 0xDu;
    *((_QWORD *)v5 + 1) = v6;
  }
  return 0;
}

void llvm::EVT::getTypeForEVT(llvm::EVT *this, llvm::LLVMContext *a2)
{
  llvm::FixedVectorType *Int128Ty;
  uint64_t v3;
  uint64_t **BFloatTy;
  uint64_t v5;
  llvm::PointerType *v6;

  switch(*(_BYTE *)this)
  {
    case 8:
      llvm::Type::getBFloatTy(a2, a2);
      return;
    case 0xB:
      llvm::Type::getDoubleTy(a2, a2);
      return;
    case 0xC:
      llvm::Type::getX86_FP80Ty(a2, a2);
      return;
    case 0xD:
      llvm::Type::getFP128Ty(a2, a2);
      return;
    case 0xE:
      llvm::Type::getPPC_FP128Ty(a2, a2);
      return;
    case 0xF:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1888);
      goto LABEL_21;
    case 0x10:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1888);
      goto LABEL_7;
    case 0x11:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1888);
      goto LABEL_11;
    case 0x12:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1888);
      goto LABEL_3;
    case 0x13:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1888);
      goto LABEL_41;
    case 0x14:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1888);
      goto LABEL_43;
    case 0x15:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1888);
      goto LABEL_45;
    case 0x16:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1888);
      goto LABEL_47;
    case 0x17:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1888);
      goto LABEL_33;
    case 0x18:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1888);
      goto LABEL_35;
    case 0x19:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1888);
      goto LABEL_62;
    case 0x1A:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1912);
      goto LABEL_21;
    case 0x1B:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1912);
      goto LABEL_7;
    case 0x1C:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1912);
      goto LABEL_11;
    case 0x1D:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1912);
      goto LABEL_3;
    case 0x1E:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1912);
      goto LABEL_41;
    case 0x1F:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1912);
      goto LABEL_43;
    case 0x20:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1912);
      goto LABEL_45;
    case 0x21:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1912);
      goto LABEL_47;
    case 0x22:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1912);
      goto LABEL_33;
    case 0x23:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1912);
      goto LABEL_35;
    case 0x24:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1912);
      goto LABEL_62;
    case 0x25:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1936);
      goto LABEL_21;
    case 0x26:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1936);
      goto LABEL_7;
    case 0x27:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1936);
      goto LABEL_9;
    case 0x28:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1936);
      goto LABEL_11;
    case 0x29:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1936);
      goto LABEL_3;
    case 0x2A:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1936);
      goto LABEL_41;
    case 0x2B:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1936);
      goto LABEL_43;
    case 0x2C:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1936);
      goto LABEL_45;
    case 0x2D:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1936);
      goto LABEL_47;
    case 0x2E:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1936);
      goto LABEL_33;
    case 0x2F:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1936);
      goto LABEL_35;
    case 0x30:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_21;
    case 0x31:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_7;
    case 0x32:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_9;
    case 0x33:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_11;
    case 0x34:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_50;
    case 0x35:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_52;
    case 0x36:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_54;
    case 0x37:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_3;
    case 0x38:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_41;
    case 0x39:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_43;
    case 0x3A:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_45;
    case 0x3B:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_47;
    case 0x3C:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_33;
    case 0x3D:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_35;
    case 0x3E:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_62;
    case 0x3F:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1960);
      goto LABEL_64;
    case 0x40:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1984);
      goto LABEL_21;
    case 0x41:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1984);
      goto LABEL_7;
    case 0x42:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1984);
      goto LABEL_9;
    case 0x43:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1984);
      goto LABEL_11;
    case 0x44:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1984);
      goto LABEL_3;
    case 0x45:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1984);
      goto LABEL_41;
    case 0x46:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1984);
      goto LABEL_43;
    case 0x47:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1984);
      goto LABEL_45;
    case 0x48:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1984);
      goto LABEL_47;
    case 0x49:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1984);
      goto LABEL_33;
    case 0x4A:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getInt128Ty(a2, a2);
      goto LABEL_21;
    case 0x4B:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1624);
      goto LABEL_21;
    case 0x4C:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1624);
      goto LABEL_7;
    case 0x4D:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1624);
      goto LABEL_9;
    case 0x4E:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1624);
      goto LABEL_11;
    case 0x4F:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1624);
      goto LABEL_3;
    case 0x50:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1624);
      goto LABEL_41;
    case 0x51:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1624);
      goto LABEL_43;
    case 0x52:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1624);
      goto LABEL_45;
    case 0x53:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1624);
      goto LABEL_47;
    case 0x54:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1624);
      goto LABEL_33;
    case 0x55:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1624);
      goto LABEL_35;
    case 0x56:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_7;
    case 0x57:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_9;
    case 0x58:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_11;
    case 0x59:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_3;
    case 0x5A:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_41;
    case 0x5B:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_43;
    case 0x5C:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_45;
    case 0x5D:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_47;
    case 0x5E:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
      goto LABEL_21;
    case 0x5F:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
      goto LABEL_7;
    case 0x60:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
      goto LABEL_9;
    case 0x61:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
      goto LABEL_11;
    case 0x62:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
LABEL_50:
      v3 = 5;
      goto LABEL_4;
    case 0x63:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
LABEL_52:
      v3 = 6;
      goto LABEL_4;
    case 0x64:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
LABEL_54:
      v3 = 7;
      goto LABEL_4;
    case 0x65:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
      goto LABEL_3;
    case 0x66:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
      goto LABEL_41;
    case 0x67:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
      goto LABEL_43;
    case 0x68:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
      goto LABEL_45;
    case 0x69:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
      goto LABEL_47;
    case 0x6A:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
      goto LABEL_33;
    case 0x6B:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
LABEL_35:
      v3 = 512;
      goto LABEL_4;
    case 0x6C:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
LABEL_62:
      v3 = 1024;
      goto LABEL_4;
    case 0x6D:
      Int128Ty = (llvm::FixedVectorType *)(*(_QWORD *)a2 + 1672);
LABEL_64:
      v3 = 2048;
      goto LABEL_4;
    case 0x6E:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_21:
      v3 = 1;
      goto LABEL_4;
    case 0x6F:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_7:
      v3 = 2;
      goto LABEL_4;
    case 0x70:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_9:
      v3 = 3;
      goto LABEL_4;
    case 0x71:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_11:
      v3 = 4;
      goto LABEL_4;
    case 0x72:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_3:
      v3 = 8;
      goto LABEL_4;
    case 0x73:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_41:
      v3 = 16;
      goto LABEL_4;
    case 0x74:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_43:
      v3 = 32;
      goto LABEL_4;
    case 0x75:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_45:
      v3 = 64;
      goto LABEL_4;
    case 0x76:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_47:
      v3 = 128;
      goto LABEL_4;
    case 0x77:
      Int128Ty = (llvm::FixedVectorType *)llvm::Type::getDoubleTy(a2, a2);
LABEL_33:
      v3 = 256;
LABEL_4:
      llvm::FixedVectorType::get(Int128Ty, (llvm::Type *)v3);
      return;
    case 0x78:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1888);
      goto LABEL_126;
    case 0x79:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1888);
      goto LABEL_128;
    case 0x7A:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1888);
      goto LABEL_130;
    case 0x7B:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1888);
      goto LABEL_132;
    case 0x7C:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1888);
      goto LABEL_124;
    case 0x7D:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1888);
      goto LABEL_114;
    case 0x7E:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1888);
      goto LABEL_89;
    case 0x7F:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1912);
      goto LABEL_126;
    case 0x80:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1912);
      goto LABEL_128;
    case 0x81:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1912);
      goto LABEL_130;
    case 0x82:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1912);
      goto LABEL_132;
    case 0x83:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1912);
      goto LABEL_124;
    case 0x84:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1912);
      goto LABEL_114;
    case 0x85:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1912);
LABEL_89:
      v5 = 64;
      goto LABEL_133;
    case 0x86:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1936);
      goto LABEL_126;
    case 0x87:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1936);
      goto LABEL_128;
    case 0x88:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1936);
      goto LABEL_130;
    case 0x89:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1936);
      goto LABEL_132;
    case 0x8A:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1936);
      goto LABEL_124;
    case 0x8B:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1936);
      goto LABEL_114;
    case 0x8C:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1960);
      goto LABEL_126;
    case 0x8D:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1960);
      goto LABEL_128;
    case 0x8E:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1960);
      goto LABEL_130;
    case 0x8F:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1960);
      goto LABEL_132;
    case 0x90:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1960);
      goto LABEL_124;
    case 0x91:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1960);
      goto LABEL_114;
    case 0x92:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1984);
      goto LABEL_126;
    case 0x93:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1984);
      goto LABEL_128;
    case 0x94:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1984);
      goto LABEL_130;
    case 0x95:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1984);
      goto LABEL_132;
    case 0x96:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1984);
      goto LABEL_124;
    case 0x97:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1984);
      goto LABEL_114;
    case 0x98:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1624);
      goto LABEL_126;
    case 0x99:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1624);
      goto LABEL_128;
    case 0x9A:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1624);
      goto LABEL_130;
    case 0x9B:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1624);
      goto LABEL_132;
    case 0x9C:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1624);
      goto LABEL_124;
    case 0x9D:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1624);
LABEL_114:
      v5 = 32;
      goto LABEL_133;
    case 0x9E:
      BFloatTy = (uint64_t **)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_126;
    case 0x9F:
      BFloatTy = (uint64_t **)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_128;
    case 0xA0:
      BFloatTy = (uint64_t **)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_130;
    case 0xA1:
      BFloatTy = (uint64_t **)llvm::Type::getBFloatTy(a2, a2);
      goto LABEL_132;
    case 0xA2:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1672);
      goto LABEL_126;
    case 0xA3:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1672);
      goto LABEL_128;
    case 0xA4:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1672);
      goto LABEL_130;
    case 0xA5:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1672);
      goto LABEL_132;
    case 0xA6:
      BFloatTy = (uint64_t **)(*(_QWORD *)a2 + 1672);
LABEL_124:
      v5 = 16;
      goto LABEL_133;
    case 0xA7:
      BFloatTy = (uint64_t **)llvm::Type::getDoubleTy(a2, a2);
LABEL_126:
      v5 = 1;
      goto LABEL_133;
    case 0xA8:
      BFloatTy = (uint64_t **)llvm::Type::getDoubleTy(a2, a2);
LABEL_128:
      v5 = 2;
      goto LABEL_133;
    case 0xA9:
      BFloatTy = (uint64_t **)llvm::Type::getDoubleTy(a2, a2);
LABEL_130:
      v5 = 4;
      goto LABEL_133;
    case 0xAA:
      BFloatTy = (uint64_t **)llvm::Type::getDoubleTy(a2, a2);
LABEL_132:
      v5 = 8;
LABEL_133:
      llvm::ScalableVectorType::get(BFloatTy, (llvm::Type *)v5);
      break;
    case 0xAB:
      llvm::Type::getX86_MMXTy(a2, a2);
      break;
    case 0xAD:
      llvm::Type::getVoidTy(a2, a2);
      break;
    case 0xAF:
      llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)a2 + 1912), (llvm::Type *)0x14);
      break;
    case 0xB0:
      v6 = (llvm::PointerType *)llvm::StructType::create(a2, a2);
      llvm::PointerType::get(v6, (llvm::Type *)0xA);
      break;
    case 0xB1:
      llvm::Type::getX86_AMXTy(a2, a2);
      break;
    case 0xB2:
      llvm::IntegerType::get(a2, (llvm::LLVMContext *)0x200);
      break;
    case 0xF9:
      llvm::Type::getMetadataTy(a2, a2);
      break;
    default:
      return;
  }
}

BOOL llvm::EVT::isExtendedInteger(llvm::EVT *this)
{
  uint64_t v1;
  int v2;

  v1 = *((_QWORD *)this + 1);
  if ((*(_DWORD *)(v1 + 8) & 0xFE) == 0x12)
    v2 = *(unsigned __int8 *)(**(_QWORD **)(v1 + 16) + 8);
  else
    v2 = *(_DWORD *)(v1 + 8);
  return v2 == 13;
}

BOOL llvm::EVT::isExtendedVector(llvm::EVT *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 1) + 8) & 0xFE) == 18;
}

BOOL llvm::EVT::isExtended16BitVector(llvm::EVT *this)
{
  llvm::Type *ExtendedSizeInBits;
  const char *v2;
  llvm::Type *v4;

  if ((*(_DWORD *)(*((_QWORD *)this + 1) + 8) & 0xFE) != 0x12)
    return 0;
  ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if ((_DWORD)v2 == 1)
  {
    v4 = ExtendedSizeInBits;
    ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)16;
}

llvm::Type *llvm::EVT::getExtendedSizeInBits(llvm::EVT *this)
{
  llvm::Type *result;
  BOOL v2;
  BOOL v3;

  result = (llvm::Type *)*((_QWORD *)this + 1);
  if (result)
    v2 = *((_DWORD *)result + 2) == 13;
  else
    v2 = 0;
  if (v2)
    return (llvm::Type *)((unint64_t)*((unsigned int *)result + 2) >> 8);
  if (result)
    v3 = (*((_DWORD *)result + 2) & 0xFE) == 18;
  else
    v3 = 0;
  if (v3)
    return (llvm::Type *)llvm::Type::getPrimitiveSizeInBits(result);
  return result;
}

BOOL llvm::EVT::isExtended32BitVector(llvm::EVT *this)
{
  llvm::Type *ExtendedSizeInBits;
  const char *v2;
  llvm::Type *v4;

  if ((*(_DWORD *)(*((_QWORD *)this + 1) + 8) & 0xFE) != 0x12)
    return 0;
  ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if ((_DWORD)v2 == 1)
  {
    v4 = ExtendedSizeInBits;
    ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)32;
}

BOOL llvm::EVT::isExtended64BitVector(llvm::EVT *this)
{
  llvm::Type *ExtendedSizeInBits;
  const char *v2;
  llvm::Type *v4;

  if ((*(_DWORD *)(*((_QWORD *)this + 1) + 8) & 0xFE) != 0x12)
    return 0;
  ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if ((_DWORD)v2 == 1)
  {
    v4 = ExtendedSizeInBits;
    ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)64;
}

BOOL llvm::EVT::isExtended128BitVector(llvm::EVT *this)
{
  llvm::Type *ExtendedSizeInBits;
  const char *v2;
  llvm::Type *v4;

  if ((*(_DWORD *)(*((_QWORD *)this + 1) + 8) & 0xFE) != 0x12)
    return 0;
  ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if ((_DWORD)v2 == 1)
  {
    v4 = ExtendedSizeInBits;
    ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)128;
}

BOOL llvm::EVT::isExtended256BitVector(llvm::EVT *this)
{
  llvm::Type *ExtendedSizeInBits;
  const char *v2;
  llvm::Type *v4;

  if ((*(_DWORD *)(*((_QWORD *)this + 1) + 8) & 0xFE) != 0x12)
    return 0;
  ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if ((_DWORD)v2 == 1)
  {
    v4 = ExtendedSizeInBits;
    ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)256;
}

BOOL llvm::EVT::isExtended512BitVector(llvm::EVT *this)
{
  llvm::Type *ExtendedSizeInBits;
  const char *v2;
  llvm::Type *v4;

  if ((*(_DWORD *)(*((_QWORD *)this + 1) + 8) & 0xFE) != 0x12)
    return 0;
  ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if ((_DWORD)v2 == 1)
  {
    v4 = ExtendedSizeInBits;
    ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)512;
}

BOOL llvm::EVT::isExtended1024BitVector(llvm::EVT *this)
{
  llvm::Type *ExtendedSizeInBits;
  const char *v2;
  llvm::Type *v4;

  if ((*(_DWORD *)(*((_QWORD *)this + 1) + 8) & 0xFE) != 0x12)
    return 0;
  ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if ((_DWORD)v2 == 1)
  {
    v4 = ExtendedSizeInBits;
    ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)1024;
}

BOOL llvm::EVT::isExtended2048BitVector(llvm::EVT *this)
{
  llvm::Type *ExtendedSizeInBits;
  const char *v2;
  llvm::Type *v4;

  if ((*(_DWORD *)(*((_QWORD *)this + 1) + 8) & 0xFE) != 0x12)
    return 0;
  ExtendedSizeInBits = llvm::EVT::getExtendedSizeInBits(this);
  if ((_DWORD)v2 == 1)
  {
    v4 = ExtendedSizeInBits;
    ExtendedSizeInBits = v4;
  }
  return ExtendedSizeInBits == (llvm::Type *)2048;
}

BOOL llvm::EVT::isExtendedScalableVector(llvm::EVT *this)
{
  return *(_BYTE *)(*((_QWORD *)this + 1) + 8) == 19;
}

unint64_t llvm::EVT::getEVT(llvm::EVT *this, llvm::Type *a2, BOOL a3)
{
  int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _QWORD *v12;
  int v13;
  llvm::LLVMContext *v14;
  uint64_t EVT;
  uint64_t v16;
  int v17;

  v4 = *((_DWORD *)this + 2);
  if (v4 == 13)
  {
    v5 = *((_DWORD *)this + 2) >> 8;
    if (v5 <= 0x1F)
    {
      switch(v5)
      {
        case 1u:
          v6 = 0;
          LOBYTE(v7) = 2;
          return v6 | v7;
        case 0x10u:
          v6 = 0;
          LOBYTE(v7) = 4;
          return v6 | v7;
        case 8u:
          v6 = 0;
          LOBYTE(v7) = 3;
          return v6 | v7;
      }
    }
    else
    {
      switch(v5)
      {
        case 0x20u:
          v6 = 0;
          LOBYTE(v7) = 5;
          return v6 | v7;
        case 0x40u:
          v6 = 0;
          LOBYTE(v7) = 6;
          return v6 | v7;
        case 0x80u:
          v6 = 0;
          LOBYTE(v7) = 7;
          return v6 | v7;
      }
    }
    v9 = *(_QWORD **)this;
    v17 = *((_DWORD *)this + 2) >> 8;
    v10 = sub_1C5270984(*v9 + 2168, &v17);
    if (!*((_QWORD *)v10 + 1))
    {
      v11 = v10;
      v12 = (_QWORD *)sub_1C484358C(*v9 + 2040, 24, 3);
      v13 = v17;
      *v12 = v9;
      v12[2] = 0;
      v12[1] = (v13 << 8) | 0xDu;
      *((_QWORD *)v11 + 1) = v12;
    }
    v6 = 0;
    LOBYTE(v7) = 0;
  }
  else if ((v4 - 18) < 2)
  {
    v14 = *(llvm::LLVMContext **)this;
    EVT = llvm::EVT::getEVT(*((llvm::EVT **)this + 3), 0, a3);
    v7 = sub_1C47AC578(v14, EVT, v16, (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_BYTE *)this + 8) == 19) << 32)));
    v6 = v7 & 0xFFFFFFFFFFFFFF00;
  }
  else
  {
    LOBYTE(v7) = llvm::MVT::getVT((uint64_t)this, (uint64_t)a2, a3);
    v6 = 0;
  }
  return v6 | v7;
}

void llvm::EVT::getEVTString(llvm::EVT *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  const char *v11;
  int v12;
  __int16 v13;
  uint64_t ExtendedSizeInBits;
  const char *v15;
  unint64_t v16;
  char *v17;
  BOOL v18;
  const std::string::value_type *v19;
  unint64_t v20;
  char *v21;
  std::string *v22;
  void *v23;
  const std::string::value_type *v24;
  unint64_t v25;
  char *v26;
  std::string *v27;
  std::string::size_type v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  void **v32;
  std::string::size_type v33;
  std::string *v34;
  _QWORD v35[2];
  std::string v36;
  void *__p[2];
  char v38;
  char v39[2];
  char v40;
  std::string v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)this;
  if (v4 <= 0xD)
  {
    if (*(_BYTE *)this)
    {
      if (v4 == 1)
      {
        *(_BYTE *)(a2 + 23) = 2;
        strcpy((char *)a2, "ch");
        return;
      }
      if (v4 == 8)
      {
        *(_BYTE *)(a2 + 23) = 4;
        v6 = 909207138;
LABEL_23:
        *(_DWORD *)a2 = v6;
        *(_BYTE *)(a2 + 4) = 0;
        return;
      }
LABEL_14:
      if (v4 - 15 >= 0x9C)
      {
        if (*(_BYTE *)this)
        {
          if (v4 - 2 <= 5)
          {
            v10 = sub_1C47A8C74((unsigned __int8 *)this);
LABEL_36:
            v16 = v10;
            if ((_DWORD)v11 == 1)
            if (v16)
            {
              v17 = &v41.__r_.__value_.__s.__data_[21];
              do
              {
                *--v17 = (v16 % 0xA) | 0x30;
                v18 = v16 > 9;
                v16 /= 0xAuLL;
              }
              while (v18);
            }
            else
            {
              v17 = &v41.__r_.__value_.__s.__data_[20];
              v41.__r_.__value_.__s.__data_[20] = 48;
            }
            sub_1C4E61270(&v36, v17, &v41.__r_.__value_.__s.__data_[21], (char *)&v41.__r_.__value_.__r.__words[2] + 5 - v17);
            v19 = "i";
LABEL_53:
            v22 = std::string::insert(&v36, 0, v19);
            *(std::string *)a2 = *v22;
            v22->__r_.__value_.__r.__words[0] = 0;
            v22->__r_.__value_.__l.__size_ = 0;
            v22->__r_.__value_.__r.__words[2] = 0;
            if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return;
            v23 = (void *)v36.__r_.__value_.__r.__words[0];
            goto LABEL_55;
          }
          ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)this);
LABEL_45:
          v20 = ExtendedSizeInBits;
          if ((_DWORD)v15 == 1)
          if (v20)
          {
            v21 = &v41.__r_.__value_.__s.__data_[21];
            do
            {
              *--v21 = (v20 % 0xA) | 0x30;
              v18 = v20 > 9;
              v20 /= 0xAuLL;
            }
            while (v18);
          }
          else
          {
            v21 = &v41.__r_.__value_.__s.__data_[20];
            v41.__r_.__value_.__s.__data_[20] = 48;
          }
          sub_1C4E61270(&v36, v21, &v41.__r_.__value_.__s.__data_[21], (char *)&v41.__r_.__value_.__r.__words[2] + 5 - v21);
          v19 = "f";
          goto LABEL_53;
        }
        v7 = *((_QWORD *)this + 1);
        v8 = *(unsigned __int8 *)(v7 + 8);
LABEL_31:
        if ((v8 & 0xFE) == 0x12)
        {
          if (*(_BYTE *)(**(_QWORD **)(v7 + 16) + 8) != 13)
          {
LABEL_33:
            ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits(this);
            goto LABEL_45;
          }
        }
        else if (v8 != 13)
        {
          goto LABEL_33;
        }
        v10 = (uint64_t)llvm::EVT::getExtendedSizeInBits(this);
        goto LABEL_36;
      }
      v9 = v4 - 120 < 0x33;
    }
    else
    {
      v7 = *((_QWORD *)this + 1);
      v8 = *(_DWORD *)(v7 + 8);
      if ((*(_DWORD *)(v7 + 8) & 0xFE) != 0x12)
        goto LABEL_31;
      v9 = v8 == 19;
    }
    if (v9)
      v24 = "nxv";
    else
      v24 = "v";
    v25 = sub_1C52B71D4((unsigned __int8 *)this);
    if (v25)
    {
      v26 = v39;
      do
      {
        *--v26 = (v25 % 0xA) | 0x30;
        v18 = v25 > 9;
        v25 /= 0xAuLL;
      }
      while (v18);
    }
    else
    {
      v26 = &v38;
      v38 = 48;
    }
    sub_1C4E61270(&v41, v26, v39, v39 - v26);
    v27 = std::string::insert(&v41, 0, v24);
    v28 = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v36.__r_.__value_.__r.__words[2] = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    v35[0] = sub_1C621D708((uint64_t)this, v29, v30);
    v35[1] = v31;
    llvm::EVT::getEVTString((uint64_t *)__p, (llvm::EVT *)v35);
    if (v40 >= 0)
      v32 = __p;
    else
      v32 = (void **)__p[0];
    if (v40 >= 0)
      v33 = v40 & 0x7F;
    else
      v33 = (std::string::size_type)__p[1];
    v34 = std::string::append(&v36, (const std::string::value_type *)v32, v33);
    *(std::string *)a2 = *v34;
    v34->__r_.__value_.__r.__words[0] = 0;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    if (v40 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v41.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
    v23 = (void *)v41.__r_.__value_.__r.__words[0];
LABEL_55:
    operator delete(v23);
    return;
  }
  switch(*(_BYTE *)this)
  {
    case 0xAB:
      *(_BYTE *)(a2 + 23) = 6;
      v5 = 1832269944;
      goto LABEL_28;
    case 0xAC:
      *(_BYTE *)(a2 + 23) = 4;
      v6 = 1702194279;
      goto LABEL_23;
    case 0xAD:
      *(_BYTE *)(a2 + 23) = 6;
      *(_DWORD *)a2 = 1867936617;
      v13 = 25705;
      goto LABEL_29;
    case 0xAE:
      *(_BYTE *)(a2 + 23) = 7;
      *(_DWORD *)a2 = 2037673557;
      v12 = 1684369529;
      goto LABEL_25;
    case 0xAF:
      *(_BYTE *)(a2 + 23) = 7;
      *(_DWORD *)a2 = 1668183398;
      v12 = 1717924451;
      goto LABEL_25;
    case 0xB0:
      *(_BYTE *)(a2 + 23) = 9;
      strcpy((char *)a2, "externref");
      return;
    case 0xB1:
      *(_BYTE *)(a2 + 23) = 6;
      v5 = 1630943352;
LABEL_28:
      *(_DWORD *)a2 = v5;
      v13 = 30829;
LABEL_29:
      *(_WORD *)(a2 + 4) = v13;
      *(_BYTE *)(a2 + 6) = 0;
      return;
    case 0xB2:
      *(_BYTE *)(a2 + 23) = 5;
      strcpy((char *)a2, "i64x8");
      return;
    default:
      if (v4 == 14)
      {
        *(_BYTE *)(a2 + 23) = 7;
        *(_DWORD *)a2 = 1717792880;
        v12 = 942813542;
LABEL_25:
        *(_DWORD *)(a2 + 3) = v12;
        *(_BYTE *)(a2 + 7) = 0;
      }
      else
      {
        if (v4 != 249)
          goto LABEL_14;
        *(_BYTE *)(a2 + 23) = 8;
        strcpy((char *)a2, "Metadata");
      }
      break;
  }
}

uint64_t llvm::MVT::getVT(uint64_t a1, uint64_t a2, BOOL a3)
{
  unsigned int v3;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  char VT;
  int v13;
  int v14;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 == 2)
    return 10;
  result = 173;
  switch((char)v3)
  {
    case 0:
      result = 9;
      break;
    case 1:
      result = 8;
      break;
    case 3:
      result = 11;
      break;
    case 4:
      result = 12;
      break;
    case 5:
      result = 13;
      break;
    case 6:
      result = 14;
      break;
    case 7:
      return result;
    case 10:
      result = 171;
      break;
    case 11:
      result = 177;
      break;
    case 13:
      v6 = v3 >> 8;
      if (v3 >> 8 > 0x1F)
      {
        v7 = 5;
        if (v6 == 128)
          v14 = 7;
        else
          v14 = 0;
        if (v6 == 64)
          v9 = 6;
        else
          v9 = v14;
        v10 = v6 == 32;
      }
      else
      {
        v7 = 2;
        if (v6 == 16)
          v8 = 4;
        else
          v8 = 0;
        if (v6 == 8)
          v9 = 3;
        else
          v9 = v8;
        v10 = v6 == 1;
      }
      if (v10)
        result = v7;
      else
        result = v9;
      break;
    case 15:
      result = 254;
      break;
    case 18:
    case 19:
      v11 = a1;
      VT = llvm::MVT::getVT(*(llvm::MVT **)(a1 + 24), 0, a3);
      v13 = *(_DWORD *)(v11 + 32);
      if (*(_BYTE *)(v11 + 8) == 19)
        result = sub_1C47AC5FC(VT, v13);
      else
        result = sub_1C47AC934(VT, v13);
      break;
    default:
      result = 1;
      break;
  }
  return result;
}

llvm::VLIWResourceModel *llvm::VLIWResourceModel::VLIWResourceModel(llvm::VLIWResourceModel *this, const llvm::TargetSubtargetInfo *a2, const llvm::TargetSchedModel *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_QWORD *)this = &off_1E814D5C0;
  *((_QWORD *)this + 1) = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)a2 + 104))(a2);
  *((_QWORD *)this + 3) = a3;
  *((_QWORD *)this + 4) = (char *)this + 48;
  *((_QWORD *)this + 5) = 0x600000000;
  *((_DWORD *)this + 24) = 0;
  v6 = (*(uint64_t (**)(llvm::VLIWResourceModel *, const llvm::TargetSubtargetInfo *))(*(_QWORD *)this + 48))(this, a2);
  *((_QWORD *)this + 2) = v6;
  v7 = **((unsigned int **)this + 3);
  if (*((_DWORD *)this + 11) < v7)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 32, (uint64_t)this + 48, v7, 8);
    v6 = *((_QWORD *)this + 2);
  }
  *((_DWORD *)this + 10) = 0;
  *(_QWORD *)(v6 + 40) = 1;
  v8 = *(_QWORD *)(v6 + 24);
  if (v8)
    sub_1C61DCC98(v8);
  return this;
}

void llvm::VLIWResourceModel::reset(llvm::VLIWResourceModel *this)
{
  uint64_t v1;
  uint64_t v2;

  *((_DWORD *)this + 10) = 0;
  v1 = *((_QWORD *)this + 2);
  *(_QWORD *)(v1 + 40) = 1;
  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
    sub_1C61DCC98(v2);
}

void llvm::VLIWResourceModel::~VLIWResourceModel(llvm::VLIWResourceModel *this)
{
  uint64_t v2;
  char *v3;

  *(_QWORD *)this = &off_1E814D5C0;
  v2 = *((_QWORD *)this + 2);
  if (v2)
  {
    sub_1C61DCC08(v2 + 8);
    MEMORY[0x1CAA32FC0](v2, 0x1070C405C112D20);
  }
  v3 = (char *)*((_QWORD *)this + 4);
  if (v3 != (char *)this + 48)
    free(v3);
}

{
  llvm::VLIWResourceModel::~VLIWResourceModel(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::VLIWResourceModel::hasDependence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;

  v3 = *(unsigned int *)(a2 + 120);
  if (!(_DWORD)v3)
    return 0;
  v4 = *(_QWORD *)(a2 + 112);
  v5 = 16 * v3;
  while (1)
  {
    v6 = (*(_QWORD *)v4 & 6) == 0 && (*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) == a3;
    if (v6 && *(_DWORD *)(v4 + 12))
      break;
    v4 += 16;
    v5 -= 16;
    if (!v5)
      return 0;
  }
  return 1;
}

uint64_t llvm::VLIWResourceModel::isResourceAvailable(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int16 **v4;
  unsigned int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  if (!a2)
    return 0;
  v4 = *(unsigned __int16 ***)(a2 + 8);
  if (!v4)
    return 0;
  v7 = *v4[2];
  v8 = v7 > 0x13;
  v9 = (1 << v7) & 0xC0F06;
  v10 = v8 || v9 == 0;
  if (!v10
    || (result = llvm::DFAPacketizer::canReserveResources(*(llvm::DFAPacketizer **)(a1 + 16), (llvm::MachineInstr *)v4),
        (_DWORD)result))
  {
    v11 = *(unsigned int *)(a1 + 40);
    if (a3)
    {
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = 8 * v11 - 8;
        do
        {
          v14 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 24))(a1, *(_QWORD *)(*(_QWORD *)(a1 + 32) + v12), a2);
          if ((v14 & 1) != 0)
            break;
          v10 = v13 == v12;
          v12 += 8;
        }
        while (!v10);
        return v14 ^ 1u;
      }
    }
    else if ((_DWORD)v11)
    {
      v16 = 0;
      v17 = 8 * v11 - 8;
      do
      {
        v14 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, *(_QWORD *)(*(_QWORD *)(a1 + 32) + v16));
        if ((v14 & 1) != 0)
          break;
        v10 = v17 == v16;
        v16 += 8;
      }
      while (!v10);
      return v14 ^ 1u;
    }
    return 1;
  }
  return result;
}

uint64_t llvm::VLIWResourceModel::reserveResources(llvm::VLIWResourceModel *this, llvm::SUnit *a2)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int16 **v6;
  unsigned int v7;
  BOOL v8;
  int v9;
  uint64_t v11;
  char *v12;

  v3 = *(_QWORD *)this;
  if (a2)
  {
    if ((*(unsigned int (**)(llvm::VLIWResourceModel *))(v3 + 32))(this)
      && *((_DWORD *)this + 10) < **((_DWORD **)this + 3))
    {
      v5 = 0;
    }
    else
    {
      (*(void (**)(llvm::VLIWResourceModel *))(*(_QWORD *)this + 16))(this);
      ++*((_DWORD *)this + 24);
      v5 = 1;
    }
    v6 = (unsigned __int16 **)*((_QWORD *)a2 + 1);
    v7 = *v6[2];
    v8 = v7 > 0x13;
    v9 = (1 << v7) & 0xC0F9E;
    if (v8 || v9 == 0)
      llvm::DFAPacketizer::reserveResources(*((_QWORD *)this + 2), (llvm::MachineInstr *)v6);
    v12 = (char *)this + 40;
    v11 = *((unsigned int *)this + 10);
    if (v11 >= *((_DWORD *)this + 11))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 32, (uint64_t)this + 48, v11 + 1, 8);
      LODWORD(v11) = *((_DWORD *)this + 10);
    }
    *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v11) = a2;
  }
  else
  {
    (*(void (**)(llvm::VLIWResourceModel *))(v3 + 16))(this);
    v5 = 0;
    v12 = (char *)this + 96;
  }
  ++*(_DWORD *)v12;
  return v5;
}

uint64_t llvm::VLIWResourceModel::createPacketizer(llvm::VLIWResourceModel *this, const llvm::TargetSubtargetInfo *a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(const llvm::TargetSubtargetInfo *))(*(_QWORD *)a2 + 104))(a2);
  return (*(uint64_t (**)(uint64_t, const llvm::TargetSubtargetInfo *))(*(_QWORD *)v3 + 1056))(v3, a2);
}

void llvm::VLIWMachineScheduler::schedule(uint64_t **this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  __n128 RootsAndBiasEdges;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[64];
  void *v18;
  uint64_t v19;
  _QWORD v20[9];

  v20[8] = *MEMORY[0x1E0C80C00];
  llvm::ScheduleDAGMILive::buildDAGWithRegPressure((llvm::ScheduleDAGMILive *)this);
  llvm::ScheduleDAGTopologicalSort::InitDAGTopologicalSorting(this + 265);
  v2 = this[332];
  v3 = this[333];
  while (v2 != v3)
  {
    v4 = *v2++;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v4 + 24))(v4, this);
  }
  v18 = v20;
  v19 = 0x800000000;
  v15 = v17;
  v16 = 0x800000000;
  RootsAndBiasEdges = llvm::ScheduleDAGMI::findRootsAndBiasEdges((uint64_t)this, (uint64_t)&v18, (uint64_t)&v15);
  (*(void (**)(uint64_t *, uint64_t **, __n128))(*this[331] + 64))(this[331], this, RootsAndBiasEdges);
  llvm::ScheduleDAGMI::initQueues((uint64_t)this, (uint64_t *)v18, v19, (uint64_t)v15, v16);
  if (*((_BYTE *)this + 3120))
    this[528] = this[335];
  v14 = 0;
  v6 = (*(uint64_t (**)(uint64_t *, unsigned __int8 *))(*this[331] + 96))(this[331], &v14);
  if (v6)
  {
    v7 = v6;
    do
    {
      llvm::ScheduleDAGMILive::scheduleMI((uint64_t)this, v7, v14);
      (*(void (**)(uint64_t *, uint64_t, _QWORD))(*this[331] + 112))(this[331], v7, v14);
      if (v14)
      {
        v11 = *(unsigned int *)(v7 + 120);
        if ((_DWORD)v11)
        {
          v12 = *(_QWORD *)(v7 + 112);
          v13 = 16 * v11;
          do
          {
            llvm::ScheduleDAGMI::releaseSucc((uint64_t)this, v7, v12);
            v12 += 16;
            v13 -= 16;
          }
          while (v13);
        }
      }
      else
      {
        v8 = *(unsigned int *)(v7 + 40);
        if ((_DWORD)v8)
        {
          v9 = *(_QWORD *)(v7 + 32);
          v10 = 16 * v8;
          do
          {
            llvm::ScheduleDAGMI::releasePred((uint64_t)this, v7, v9);
            v9 += 16;
            v10 -= 16;
          }
          while (v10);
        }
      }
      *(_WORD *)(v7 + 228) |= 0x400u;
      v7 = (*(uint64_t (**)(uint64_t *, unsigned __int8 *))(*this[331] + 96))(this[331], &v14);
    }
    while (v7);
  }
  llvm::ScheduleDAGMI::placeDebugValues((unint64_t *)this);
  if (v15 != v17)
    free(v15);
  if (v18 != v20)
    free(v18);
}

uint64_t llvm::ConvergingVLIWScheduler::initialize(llvm::ConvergingVLIWScheduler *this, llvm::ScheduleDAGMI *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *((_QWORD *)this + 1) = a2;
  *((_QWORD *)this + 2) = (char *)a2 + 632;
  sub_1C52D78CC((uint64_t)this + 24, a2, (_DWORD *)a2 + 158);
  sub_1C52D78CC((uint64_t)this + 200, *((_QWORD **)this + 1), *((_DWORD **)this + 2));
  v3 = *((_QWORD *)this + 1);
  if (byte_1ED830488)
  {
    if (*(_QWORD *)(v3 + 800))
      v4 = v3 + 704;
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  v5 = *(_QWORD *)(*(_QWORD *)(v3 + 32) + 16);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
  v7 = *((_QWORD *)this + 20);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 42);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  *((_QWORD *)this + 20) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 872))(v6, v4, *((_QWORD *)this + 1));
  *((_QWORD *)this + 42) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 872))(v6, v4, *((_QWORD *)this + 1));
  v9 = *((_QWORD *)this + 21);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 43);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  *((_QWORD *)this + 21) = (*(uint64_t (**)(llvm::ConvergingVLIWScheduler *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, v5, *((_QWORD *)this + 1) + 632);
  *((_QWORD *)this + 43) = (*(uint64_t (**)(llvm::ConvergingVLIWScheduler *, uint64_t, uint64_t))(*(_QWORD *)this + 136))(this, v5, *((_QWORD *)this + 1) + 632);
  v11 = *((_QWORD *)this + 1);
  result = (uint64_t)sub_1C49B9F28((_QWORD *)this + 47, (uint64_t)(*(_QWORD *)(v11 + 3136) - *(_QWORD *)(v11 + 3128)) >> 2, 0);
  v13 = *(_QWORD *)(v11 + 3128);
  v14 = *(_QWORD *)(v11 + 3136) - v13;
  if ((v14 & 0x3FFFFFFFCLL) != 0)
  {
    v15 = 0;
    v16 = (v14 >> 2);
    do
    {
      v17 = *(_QWORD *)(*((_QWORD *)this + 1) + 2712);
      result = *(unsigned int *)(*(_QWORD *)(v17 + 216) + 4 * v15);
      if (!(_DWORD)result)
      {
        result = llvm::RegisterClassInfo::computePSetLimit(*(llvm::RegisterClassInfo **)(*((_QWORD *)this + 1) + 2712), v15);
        *(_DWORD *)(*(_QWORD *)(v17 + 216) + 4 * v15) = result;
        v13 = *(_QWORD *)(v11 + 3128);
      }
      *(_BYTE *)(*((_QWORD *)this + 47) + v15) = (float)(*(float *)&dword_1ED803C58 * (float)result) < (float)*(unsigned int *)(v13 + 4 * v15);
      ++v15;
    }
    while (v16 != v15);
  }
  return result;
}

void sub_1C52D78CC(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  _DWORD *v11;
  _DWORD *v12;
  unsigned int v13;
  unsigned int *v14;
  llvm::SUnit *v15;
  unsigned int *v16;
  unsigned int v17;
  _DWORD *v18;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 152) = 0;
  v4 = a2[115] + 48;
  v5 = -1;
  v6 = v4;
  v7 = v4;
  do
  {
    v7 = *(_QWORD *)(v7 + 8);
    ++v5;
  }
  while (v7 != v4);
  v8 = v5 / *a3;
  *(_DWORD *)(a1 + 160) = v8;
  v9 = -1;
  do
  {
    v6 = *(_QWORD *)(v6 + 8);
    ++v9;
  }
  while (v6 != v4);
  if (v9 > 49)
  {
    v11 = (_DWORD *)a2[6];
    v12 = (_DWORD *)a2[7];
    if (v11 == v12)
    {
      v13 = 0;
    }
    else
    {
      v13 = 0;
      v14 = v11 + 60;
      do
      {
        v15 = (llvm::SUnit *)(v14 - 60);
        if (*(_DWORD *)(a1 + 16) == 1)
        {
          if ((*(_BYTE *)(v14 - 1) & 2) == 0)
            llvm::SUnit::ComputeHeight(v15);
          v16 = v11 + 61;
        }
        else
        {
          v16 = v14;
          if ((*(_BYTE *)(v14 - 1) & 1) == 0)
          {
            llvm::SUnit::ComputeDepth(v15);
            v16 = v14;
          }
        }
        v17 = *v16;
        if (v13 <= v17)
          v13 = v17;
        v11 += 68;
        v18 = v14 + 8;
        v14 += 68;
      }
      while (v18 != v12);
      v8 = *(_DWORD *)(a1 + 160);
    }
    if (v8 <= v13)
      v8 = v13;
    v10 = v8 + 1;
  }
  else
  {
    v10 = v8 >> 1;
  }
  *(_DWORD *)(a1 + 160) = v10;
}

llvm::VLIWResourceModel *llvm::ConvergingVLIWScheduler::createVLIWResourceModel(llvm::ConvergingVLIWScheduler *this, const llvm::TargetSubtargetInfo *a2, const llvm::TargetSchedModel *a3)
{
  llvm::VLIWResourceModel *v5;

  v5 = (llvm::VLIWResourceModel *)operator new();
  return llvm::VLIWResourceModel::VLIWResourceModel(v5, a2, a3);
}

void llvm::ConvergingVLIWScheduler::releaseTopNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(unsigned int *)(a2 + 40);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(a2 + 32);
    v4 = v3 + 16 * v2;
    v5 = *(_DWORD *)(a2 + 248);
    do
    {
      v6 = *(_DWORD *)(v3 + 12) + *(_DWORD *)((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) + 248);
      if (v5 < v6)
      {
        *(_DWORD *)(a2 + 248) = v6;
        v5 = v6;
      }
      v3 += 16;
    }
    while (v3 != v4);
  }
  if ((*(_WORD *)(a2 + 228) & 0x400) == 0)
    llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::releaseNode(a1 + 24, a2, *(_DWORD *)(a2 + 248));
}

void llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::releaseNode(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  _DWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;

  if (*(_DWORD *)(a1 + 164) > a3)
    *(_DWORD *)(a1 + 164) = a3;
  if (*(_DWORD *)(a1 + 152) >= a3 && !llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::checkHazard(a1, a2))
  {
    v15 = *(uint64_t **)(a1 + 56);
    v14 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v15 >= v14)
    {
      v20 = *(_QWORD **)(a1 + 48);
      v21 = v15 - v20;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 61)
        goto LABEL_42;
      v23 = v14 - (_QWORD)v20;
      if (v23 >> 2 > v22)
        v22 = v23 >> 2;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
        v24 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        if (v24 >> 61)
          goto LABEL_43;
        v25 = (char *)operator new(8 * v24);
      }
      else
      {
        v25 = 0;
      }
      v26 = (uint64_t *)&v25[8 * v21];
      *v26 = a2;
      v16 = v26 + 1;
      if (v15 != v20)
      {
        do
        {
          v27 = *--v15;
          *--v26 = v27;
        }
        while (v15 != v20);
        v15 = *(uint64_t **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 48) = v26;
      *(_QWORD *)(a1 + 56) = v16;
      *(_QWORD *)(a1 + 64) = &v25[8 * v24];
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v15 = a2;
      v16 = v15 + 1;
    }
    v19 = (_DWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 56) = v16;
    goto LABEL_41;
  }
  v6 = *(uint64_t **)(a1 + 112);
  v5 = *(_QWORD *)(a1 + 120);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_QWORD **)(a1 + 104);
    v9 = v6 - v8;
    v10 = v9 + 1;
    if (!((unint64_t)(v9 + 1) >> 61))
    {
      v11 = v5 - (_QWORD)v8;
      if (v11 >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (!v12)
      {
        v13 = 0;
        goto LABEL_19;
      }
      if (!(v12 >> 61))
      {
        v13 = (char *)operator new(8 * v12);
LABEL_19:
        v17 = (uint64_t *)&v13[8 * v9];
        *v17 = a2;
        v7 = v17 + 1;
        if (v6 != v8)
        {
          do
          {
            v18 = *--v6;
            *--v17 = v18;
          }
          while (v6 != v8);
          v6 = *(uint64_t **)(a1 + 104);
        }
        *(_QWORD *)(a1 + 104) = v17;
        *(_QWORD *)(a1 + 112) = v7;
        *(_QWORD *)(a1 + 120) = &v13[8 * v12];
        if (v6)
          operator delete(v6);
        goto LABEL_24;
      }
LABEL_43:
      sub_1C4764EE4();
    }
LABEL_42:
    abort();
  }
  *v6 = a2;
  v7 = v6 + 1;
LABEL_24:
  v19 = (_DWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = v7;
LABEL_41:
  *(_DWORD *)(a2 + 196) |= *v19;
}

void llvm::ConvergingVLIWScheduler::releaseBottomNode(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *(unsigned int *)(a2 + 120);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(a2 + 112);
    v4 = v3 + 16 * v2;
    v5 = *(_DWORD *)(a2 + 252);
    do
    {
      v6 = *(_DWORD *)(v3 + 12) + *(_DWORD *)((*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8) + 252);
      if (v5 < v6)
      {
        *(_DWORD *)(a2 + 252) = v6;
        v5 = v6;
      }
      v3 += 16;
    }
    while (v3 != v4);
  }
  if ((*(_WORD *)(a2 + 228) & 0x400) == 0)
    llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::releaseNode(a1 + 200, a2, *(_DWORD *)(a2 + 252));
}

void llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::~VLIWSchedBoundary(llvm::ConvergingVLIWScheduler::VLIWSchedBoundary *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *((_QWORD *)this + 18);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 17);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

BOOL llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::checkHazard(uint64_t a1, uint64_t a2)
{
  _DWORD *v3;

  v3 = *(_DWORD **)(a1 + 136);
  if (v3[2])
    return (*(unsigned int (**)(_DWORD *, uint64_t, _QWORD))(*(_QWORD *)v3 + 24))(v3, a2, 0) != 0;
  else
    return *(_DWORD *)(a1 + 156)
         + llvm::TargetSchedModel::getNumMicroOps(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), 0) > **(_DWORD **)(a1 + 8);
}

uint64_t llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::bumpCycle(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  BOOL v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;

  v1 = this;
  v2 = **(_DWORD **)(this + 8);
  v3 = *(_DWORD *)(this + 152);
  v4 = *(_DWORD *)(this + 156);
  v5 = v4 >= v2;
  v6 = v4 - v2;
  if (!v5)
    v6 = 0;
  *(_DWORD *)(this + 156) = v6;
  if ((v3 + 1) > *(_DWORD *)(this + 164))
    v7 = v3 + 1;
  else
    v7 = *(_DWORD *)(this + 164);
  if (*(_DWORD *)(*(_QWORD *)(this + 136) + 8))
  {
    if (v3 != v7)
    {
      do
      {
        if (*(_DWORD *)(v1 + 16) == 1)
          v8 = 80;
        else
          v8 = 88;
        this = (*(uint64_t (**)(void))(**(_QWORD **)(v1 + 136) + v8))();
        v9 = *(_DWORD *)(v1 + 152) + 1;
        *(_DWORD *)(v1 + 152) = v9;
      }
      while (v9 != v7);
    }
  }
  else
  {
    *(_DWORD *)(this + 152) = v7;
  }
  *(_BYTE *)(v1 + 128) = 1;
  return this;
}

uint64_t llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::bumpNode(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  uint64_t result;

  v4 = *(_DWORD **)(a1 + 136);
  if (v4[2])
  {
    if (*(_DWORD *)(a1 + 16) != 1 && (*(_WORD *)(a2 + 228) & 2) != 0)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 32))(v4);
      v4 = *(_DWORD **)(a1 + 136);
    }
    (*(void (**)(_DWORD *, uint64_t))(*(_QWORD *)v4 + 40))(v4, a2);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 144) + 40))(*(_QWORD *)(a1 + 144), a2, *(_DWORD *)(a1 + 16) == 1);
  result = llvm::TargetSchedModel::getNumMicroOps(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8), 0);
  *(_DWORD *)(a1 + 156) += result;
  if (v5)
    return llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::bumpCycle(a1);
  return result;
}

void llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::releasePending(llvm::ConvergingVLIWScheduler::VLIWSchedBoundary *this)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;

  if (*((_QWORD *)this + 6) == *((_QWORD *)this + 7))
    *((_DWORD *)this + 41) = -1;
  v2 = (*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3;
  if ((_DWORD)v2)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v3);
      if (*((_DWORD *)this + 4) == 1)
        v5 = 248;
      else
        v5 = 252;
      v6 = *(_DWORD *)(v4 + v5);
      if (v6 < *((_DWORD *)this + 41))
        *((_DWORD *)this + 41) = v6;
      if (v6 <= *((_DWORD *)this + 38)
        && !llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::checkHazard((uint64_t)this, v4))
      {
        v8 = (uint64_t *)*((_QWORD *)this + 7);
        v7 = *((_QWORD *)this + 8);
        if ((unint64_t)v8 >= v7)
        {
          v10 = (_QWORD *)*((_QWORD *)this + 6);
          v11 = v8 - v10;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            abort();
          v13 = v7 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            if (v14 >> 61)
              sub_1C4764EE4();
            v15 = (char *)operator new(8 * v14);
          }
          else
          {
            v15 = 0;
          }
          v16 = (uint64_t *)&v15[8 * v11];
          *v16 = v4;
          v9 = v16 + 1;
          if (v8 != v10)
          {
            do
            {
              v17 = *--v8;
              *--v16 = v17;
            }
            while (v8 != v10);
            v8 = (uint64_t *)*((_QWORD *)this + 6);
          }
          *((_QWORD *)this + 6) = v16;
          *((_QWORD *)this + 7) = v9;
          *((_QWORD *)this + 8) = &v15[8 * v14];
          if (v8)
            operator delete(v8);
        }
        else
        {
          *v8 = v4;
          v9 = v8 + 1;
        }
        *((_QWORD *)this + 7) = v9;
        *(_DWORD *)(v4 + 196) |= *((_DWORD *)this + 4);
        v18 = *((_QWORD *)this + 13);
        v19 = *(_QWORD *)(v18 + 8 * v3);
        v20 = *(_DWORD *)(v19 + 196) & ~*((_DWORD *)this + 18);
        *(_QWORD *)(v18 + 8 * v3) = *(_QWORD *)(*((_QWORD *)this + 14) - 8);
        *(_DWORD *)(v19 + 196) = v20;
        *((_QWORD *)this + 14) -= 8;
        --v3;
        LODWORD(v2) = v2 - 1;
      }
      ++v3;
    }
    while (v3 != (_DWORD)v2);
  }
  *((_BYTE *)this + 128) = 0;
}

_QWORD *llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::removeReady(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 16);
  if ((v2 & *(_DWORD *)(a2 + 196)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 56);
    result = (_QWORD *)(a1 + 56);
    v4 = v5;
    v6 = *(result - 1);
    if (v6 != v5)
    {
      while (*(_QWORD *)v6 != a2)
      {
        v6 += 8;
        if (v6 == v4)
        {
          v6 = v4;
          break;
        }
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 112);
    v6 = *(_QWORD *)(a1 + 104);
    if (v6 != v4)
    {
      while (*(_QWORD *)v6 != a2)
      {
        v6 += 8;
        if (v6 == v4)
        {
          v6 = *(_QWORD *)(a1 + 112);
          break;
        }
      }
    }
    v2 = *(_DWORD *)(a1 + 72);
    result = (_QWORD *)(a1 + 112);
  }
  *(_DWORD *)(*(_QWORD *)v6 + 196) &= ~v2;
  *(_QWORD *)v6 = *(_QWORD *)(v4 - 8);
  *result -= 8;
  return result;
}

uint64_t llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::pickOnlyChoice(char **this)
{
  char *v2;
  char *v3;
  int64_t v4;
  int v5;
  int v6;
  uint64_t v7;

  if (*((_BYTE *)this + 128))
    llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::releasePending((llvm::ConvergingVLIWScheduler::VLIWSchedBoundary *)this);
  while (1)
  {
    v2 = this[6];
    v3 = this[7];
    if (v2 == v3)
    {
      v6 = *((_DWORD *)this + 4);
      goto LABEL_13;
    }
    v4 = v3 - v2;
    if ((v4 & 0x7FFFFFFF8) != 8 || ((this[14] - this[13]) & 0x7FFFFFFF8) == 0)
      goto LABEL_14;
    v5 = (*(uint64_t (**)(char *, _QWORD, BOOL))(*(_QWORD *)this[18] + 32))(this[18], *(_QWORD *)v2, *((_DWORD *)this + 4) == 1);
    v6 = *((_DWORD *)this + 4);
    if (v5)
    {
      v2 = this[6];
      v7 = v6 == 1 ? 216 : 220;
      if (!*(_DWORD *)(*(_QWORD *)v2 + v7))
        break;
    }
LABEL_13:
    (*(void (**)(char *, _QWORD, BOOL))(*(_QWORD *)this[18] + 40))(this[18], 0, v6 == 1);
    llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::bumpCycle((uint64_t)this);
    llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::releasePending((llvm::ConvergingVLIWScheduler::VLIWSchedBoundary *)this);
  }
  v4 = this[7] - v2;
LABEL_14:
  if ((v4 & 0x7FFFFFFF8) == 8)
    return *(_QWORD *)v2;
  else
    return 0;
}

uint64_t llvm::ConvergingVLIWScheduler::pressureChange(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  unsigned int v6;

  v3 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 3104) + ((unint64_t)*(unsigned int *)(a2 + 192) << 6);
  while (!*(_WORD *)(v4 + v3) || !*(_BYTE *)(*(_QWORD *)(a1 + 376) + *(unsigned __int16 *)(v4 + v3) - 1))
  {
    v3 += 4;
    if (v3 == 64)
      return 0;
  }
  v6 = *(__int16 *)(v4 + v3 + 2);
  if (a3)
    return v6;
  else
    return -v6;
}

uint64_t llvm::ConvergingVLIWScheduler::SchedulingCost(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, __int16 *a5)
{
  int v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t result;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;

  if (!a3)
    return 1;
  if ((*(_WORD *)(a3 + 228) & 0x400) != 0)
    return 1;
  if ((*(_WORD *)(a3 + 228) & 0x800) != 0)
    v9 = 201;
  else
    v9 = 1;
  if (*a2 == 1)
  {
    if (sub_1C52D8854((_DWORD *)(a1 + 24), (llvm::SUnit *)a3))
    {
      if ((*(_BYTE *)(a3 + 236) & 2) == 0)
        llvm::SUnit::ComputeHeight((llvm::SUnit *)a3);
      v9 += 10 * *(_DWORD *)(a3 + 244);
    }
    v10 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 168) + 32))(*(_QWORD *)(a1 + 168), a3, 1);
    v11 = v10 == 0;
    if (v10)
      v12 = -125;
    else
      v12 = 0;
    if (v10)
      v9 += 125;
  }
  else
  {
    if (sub_1C52D8854((_DWORD *)(a1 + 200), (llvm::SUnit *)a3))
    {
      if ((*(_BYTE *)(a3 + 236) & 1) == 0)
        llvm::SUnit::ComputeDepth((llvm::SUnit *)a3);
      v9 += 10 * *(_DWORD *)(a3 + 240);
    }
    if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 344) + 32))(*(_QWORD *)(a1 + 344), a3, 0))
    {
      v11 = 0;
      v9 += 125;
      v12 = -125;
    }
    else
    {
      v12 = 0;
      v11 = 1;
    }
  }
  if (*a2 == 1)
  {
    if (sub_1C52D8854((_DWORD *)(a1 + 24), (llvm::SUnit *)a3))
    {
      v14 = *(unsigned int *)(a3 + 120);
      if ((_DWORD)v14)
      {
        v15 = 0;
        v16 = *(_QWORD **)(a3 + 112);
        v17 = &v16[2 * v14];
        while (1)
        {
          v18 = *v16 & 0xFFFFFFFFFFFFFFF8;
          if (!*(_DWORD *)(v18 + 208))
            goto LABEL_36;
          v19 = *(unsigned int *)(v18 + 40);
          if ((_DWORD)v19)
            break;
LABEL_35:
          v23 = 1;
LABEL_37:
          v15 += v23;
          v16 += 2;
          if (v16 == v17)
            goto LABEL_53;
        }
        v20 = *(_QWORD **)(v18 + 32);
        v21 = 16 * v19;
        while (1)
        {
          v22 = *v20 & 0xFFFFFFFFFFFFFFF8;
          if ((*(_WORD *)(v22 + 228) & 0x400) == 0 && v22 != a3)
            break;
          v20 += 2;
          v21 -= 16;
          if (!v21)
            goto LABEL_35;
        }
LABEL_36:
        v23 = 0;
        goto LABEL_37;
      }
    }
    goto LABEL_52;
  }
  if (sub_1C52D8854((_DWORD *)(a1 + 200), (llvm::SUnit *)a3))
  {
    v24 = *(unsigned int *)(a3 + 40);
    if ((_DWORD)v24)
    {
      v15 = 0;
      v25 = *(_QWORD **)(a3 + 32);
      v26 = &v25[2 * v24];
      while (1)
      {
        v27 = *v25 & 0xFFFFFFFFFFFFFFF8;
        if (!*(_DWORD *)(v27 + 212))
          goto LABEL_49;
        v28 = *(unsigned int *)(v27 + 120);
        if ((_DWORD)v28)
          break;
LABEL_48:
        v32 = 1;
LABEL_50:
        v15 += v32;
        v25 += 2;
        if (v25 == v26)
          goto LABEL_53;
      }
      v29 = *(_QWORD **)(v27 + 112);
      v30 = 16 * v28;
      while (1)
      {
        v31 = *v29 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_WORD *)(v31 + 228) & 0x400) == 0 && v31 != a3)
          break;
        v29 += 2;
        v30 -= 16;
        if (!v30)
          goto LABEL_48;
      }
LABEL_49:
      v32 = 0;
      goto LABEL_50;
    }
  }
LABEL_52:
  v15 = 0;
LABEL_53:
  result = (v9 + 10 * v15);
  if (byte_1ED803958)
  {
    v33 = *a2;
  }
  else
  {
    result = (result - 50 * a5[5] - 200 * (a5[3] + a5[1]));
    v33 = *a2;
    if (!v11)
    {
      v34 = 0;
      v35 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 3104) + ((unint64_t)*(unsigned int *)(a3 + 192) << 6);
      while (!*(_WORD *)(v35 + v34)
           || !*(_BYTE *)(*(_QWORD *)(a1 + 376) + *(unsigned __int16 *)(v35 + v34) - 1))
      {
        v34 += 4;
        if (v34 == 64)
          goto LABEL_69;
      }
      v36 = *(__int16 *)(v35 + v34 + 2);
      if (v33 == 1)
        v36 = -v36;
      if ((unsigned __int16)a5[1] | (unsigned __int16)a5[3] | (unsigned __int16)a5[5])
        v37 = v12;
      else
        v37 = 0;
      v38 = result + v37;
      if (v36 <= 0)
        result = result;
      else
        result = v38;
    }
  }
LABEL_69:
  if (v33 == 1)
  {
    if (!*(_DWORD *)(a3 + 216))
    {
      v39 = *(unsigned int *)(a3 + 40);
      if ((_DWORD)v39)
      {
        v40 = *(_QWORD *)(a3 + 32);
        v41 = v40 + 16 * v39;
        do
        {
          v42 = *(_QWORD *)v40 & 0xFFFFFFFFFFFFFFF8;
          if (!(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v42 + 8) + 16) + 8) & 8 | *(_QWORD *)v40 & 6)
            && *(_DWORD *)(v40 + 8)
            && !*(_DWORD *)(v40 + 12))
          {
            v43 = *(_QWORD *)(a1 + 168);
            v44 = *(_QWORD **)(v43 + 32);
            v45 = *(unsigned int *)(v43 + 40);
            if ((_DWORD)v45)
            {
              v46 = 8 * v45;
              v47 = v44;
              while (*v47 != v42)
              {
                ++v47;
                v46 -= 8;
                if (!v46)
                {
                  v47 = &v44[v45];
                  break;
                }
              }
            }
            else
            {
              v47 = v44;
            }
            if (v45 == v47 - v44)
              result = result;
            else
              result = (result + 75);
          }
          v40 += 16;
        }
        while (v40 != v41);
      }
    }
  }
  else if (v33 == 2 && !*(_DWORD *)(a3 + 220))
  {
    v64 = *(unsigned int *)(a3 + 120);
    if ((_DWORD)v64)
    {
      v65 = *(_QWORD *)(a3 + 112);
      v66 = v65 + 16 * v64;
      do
      {
        v67 = *(_QWORD *)v65 & 0xFFFFFFFFFFFFFFF8;
        if (!(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v67 + 8) + 16) + 8) & 8 | *(_QWORD *)v65 & 6)
          && *(_DWORD *)(v65 + 8)
          && !*(_DWORD *)(v65 + 12))
        {
          v68 = *(_QWORD *)(a1 + 344);
          v69 = *(_QWORD **)(v68 + 32);
          v70 = *(unsigned int *)(v68 + 40);
          if ((_DWORD)v70)
          {
            v71 = 8 * v70;
            v72 = v69;
            while (*v72 != v67)
            {
              ++v72;
              v71 -= 8;
              if (!v71)
              {
                v72 = &v69[v70];
                break;
              }
            }
          }
          else
          {
            v72 = v69;
          }
          if (v70 == v72 - v69)
            result = result;
          else
            result = (result + 75);
        }
        v65 += 16;
      }
      while (v65 != v66);
    }
  }
  if (byte_1ED803B98)
  {
    if (v33 == 1)
    {
      v48 = *(unsigned int *)(a3 + 40);
      if ((_DWORD)v48)
      {
        v49 = *(_QWORD *)(a3 + 32);
        v50 = v49 + 16 * v48;
        do
        {
          if (*(_DWORD *)(v49 + 12))
          {
            v51 = *(_QWORD *)(a1 + 168);
            v52 = *(_QWORD **)(v51 + 32);
            v53 = *(unsigned int *)(v51 + 40);
            if ((_DWORD)v53)
            {
              v54 = 8 * v53;
              v55 = v52;
              while (*v55 != (*(_QWORD *)v49 & 0xFFFFFFFFFFFFFFF8))
              {
                ++v55;
                v54 -= 8;
                if (!v54)
                {
                  v55 = &v52[v53];
                  break;
                }
              }
            }
            else
            {
              v55 = v52;
            }
            if (v53 == v55 - v52)
              result = result;
            else
              result = (result - 200);
          }
          v49 += 16;
        }
        while (v49 != v50);
      }
    }
    else
    {
      v56 = *(unsigned int *)(a3 + 120);
      if ((_DWORD)v56)
      {
        v57 = *(_QWORD *)(a3 + 112);
        v58 = v57 + 16 * v56;
        do
        {
          if (*(_DWORD *)(v57 + 12))
          {
            v59 = *(_QWORD *)(a1 + 344);
            v60 = *(_QWORD **)(v59 + 32);
            v61 = *(unsigned int *)(v59 + 40);
            if ((_DWORD)v61)
            {
              v62 = 8 * v61;
              v63 = v60;
              while (*v63 != (*(_QWORD *)v57 & 0xFFFFFFFFFFFFFFF8))
              {
                ++v63;
                v62 -= 8;
                if (!v62)
                {
                  v63 = &v60[v61];
                  break;
                }
              }
            }
            else
            {
              v63 = v60;
            }
            if (v61 == v63 - v60)
              result = result;
            else
              result = (result - 200);
          }
          v57 += 16;
        }
        while (v57 != v58);
      }
    }
  }
  return result;
}

BOOL sub_1C52D8854(_DWORD *a1, llvm::SUnit *this)
{
  char *v4;

  if (a1[38] >= a1[40])
    return 1;
  if (a1[4] == 1)
  {
    if ((*((_BYTE *)this + 236) & 2) == 0)
      llvm::SUnit::ComputeHeight(this);
    v4 = (char *)this + 244;
  }
  else
  {
    if ((*((_BYTE *)this + 236) & 1) == 0)
      llvm::SUnit::ComputeDepth(this);
    v4 = (char *)this + 240;
  }
  return (a1[40] - a1[38]) <= *(_DWORD *)v4;
}

uint64_t llvm::ConvergingVLIWScheduler::pickNodeFromQueue(_QWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  llvm::SUnit **v4;
  llvm::SUnit **v5;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  const llvm::MachineInstr *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  llvm::SUnit *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  llvm::SUnit *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v33;
  int v34;

  v4 = *(llvm::SUnit ***)(a2 + 48);
  v5 = *(llvm::SUnit ***)(a2 + 56);
  if (v4 != v5)
  {
    v10 = 0;
    v11 = (_DWORD *)(a2 + 16);
    v12 = a4 + 2;
    while (1)
    {
      v34 = 0;
      v33 = 0;
      v13 = (const llvm::MachineInstr *)*((_QWORD *)*v4 + 1);
      v14 = (_QWORD *)a1[1];
      v15 = v14[476];
      v16 = (v14[477] - v15) >> 2;
      v17 = v14[391];
      v18 = (v14[392] - v17) >> 2;
      v19 = *(_QWORD *)(a3 + 48);
      if (*(_BYTE *)(a3 + 56))
      {
        if (*(_QWORD *)(v19 + 312) > 7uLL)
          goto LABEL_5;
      }
      else if (!*(_QWORD *)(v19 + 312))
      {
LABEL_5:
        llvm::RegPressureTracker::getMaxDownwardPressureDelta(a3, v13, (uint64_t)&v33, v15, v16, v17, v18);
        goto LABEL_8;
      }
      llvm::RegPressureTracker::getMaxUpwardPressureDelta(a3, v13, 0, (uint64_t)&v33, v15, v16, v17, v18);
LABEL_8:
      v20 = (*(uint64_t (**)(_QWORD *, _DWORD *, llvm::SUnit *, _DWORD *, uint64_t *, _QWORD))(*a1 + 144))(a1, v11, *v4, a4, &v33, 0);
      v21 = v20;
      v22 = *(_QWORD *)a4;
      if (!*(_QWORD *)a4)
      {
        v24 = *v4;
LABEL_16:
        v10 = 1;
        goto LABEL_19;
      }
      v23 = a4[5];
      if (v20 < 0 && v23 < 0)
      {
        if (*v11 == 2)
        {
          v24 = *v4;
          if (*((_DWORD *)*v4 + 48) <= *(_DWORD *)(v22 + 192))
            goto LABEL_20;
        }
        else
        {
          if (*v11 != 1)
            goto LABEL_20;
          v24 = *v4;
          if (*((_DWORD *)*v4 + 48) >= *(_DWORD *)(v22 + 192))
            goto LABEL_20;
        }
        goto LABEL_16;
      }
      v24 = *v4;
      if (v20 > v23)
      {
        v10 = 6;
        goto LABEL_19;
      }
      v25 = 220;
      if (*v11 == 1)
        v25 = 216;
      v26 = *(_DWORD *)((char *)v24 + v25);
      v27 = *(_DWORD *)(v22 + v25);
      if (v26 == v27)
      {
        if (v20 == v23 && sub_1C52D8854((_DWORD *)a2, v24))
        {
          v28 = *v4;
          v29 = 120;
          if (*v11 != 1)
            v29 = 40;
          v30 = *(_DWORD *)(*(_QWORD *)a4 + v29);
          v31 = *(_DWORD *)((char *)v28 + v29);
          if (v31 > v30)
          {
            *(_QWORD *)a4 = v28;
            *(_QWORD *)v12 = v33;
            v12[2] = v34;
            a4[5] = v21;
            v10 = 6;
          }
          if (v31 != v30)
            goto LABEL_20;
        }
        if (!byte_1ED803A18 || v21 != a4[5])
          goto LABEL_20;
        if (*v11 == 2)
        {
          v24 = *v4;
          if (*((_DWORD *)*v4 + 48) <= *(_DWORD *)(*(_QWORD *)a4 + 192))
            goto LABEL_20;
        }
        else
        {
          if (*v11 != 1)
            goto LABEL_20;
          v24 = *v4;
          if (*((_DWORD *)*v4 + 48) >= *(_DWORD *)(*(_QWORD *)a4 + 192))
            goto LABEL_20;
        }
        goto LABEL_16;
      }
      if (v26 >= v27)
        goto LABEL_20;
      v10 = 7;
LABEL_19:
      *(_QWORD *)a4 = v24;
      *(_QWORD *)v12 = v33;
      v12[2] = v34;
      a4[5] = v21;
LABEL_20:
      if (++v4 == v5)
        return v10;
    }
  }
  return 0;
}

uint64_t llvm::ConvergingVLIWScheduler::pickNodeBidrectional(char **this, BOOL *a2)
{
  char *v4;
  uint64_t result;
  int v6;
  int v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  _QWORD v11[2];
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;

  v4 = (char *)(this + 25);
  result = llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::pickOnlyChoice(this + 25);
  if (result)
  {
    *a2 = 0;
    return result;
  }
  result = llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::pickOnlyChoice(this + 3);
  if (result)
  {
    *a2 = 1;
    return result;
  }
  v13[0] = 0;
  v13[1] = 0;
  v14 = 0;
  v6 = llvm::ConvergingVLIWScheduler::pickNodeFromQueue(this, (uint64_t)v4, (uint64_t)(this[1] + 4840), v13);
  if ((v6 & 0xFFFFFFFE) == 2)
  {
    *a2 = 0;
    return v13[0];
  }
  v7 = v6;
  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  v8 = v11;
  v9 = llvm::ConvergingVLIWScheduler::pickNodeFromQueue(this, (uint64_t)(this + 3), (uint64_t)(this[1] + 4160), v11);
  if ((v9 & 0xFFFFFFFE) != 2)
  {
    if (v7 == 4)
    {
      v10 = 0;
      v8 = v13;
      goto LABEL_14;
    }
    v8 = v11;
    if (v9 != 4)
    {
      v10 = SHIDWORD(v12) > SHIDWORD(v14);
      if (SHIDWORD(v12) <= SHIDWORD(v14))
        v8 = v13;
      goto LABEL_14;
    }
  }
  v10 = 1;
LABEL_14:
  *a2 = v10;
  return *v8;
}

uint64_t llvm::ConvergingVLIWScheduler::pickNode(llvm::ConvergingVLIWScheduler *this, BOOL *a2)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_QWORD *)(*((_QWORD *)this + 1) + 2680) == *(_QWORD *)(*((_QWORD *)this + 1) + 2688))
    return 0;
  if (byte_1ED82F7F8)
  {
    v4 = llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::pickOnlyChoice((char **)this + 3);
    if (!v4)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      llvm::ConvergingVLIWScheduler::pickNodeFromQueue(this, (uint64_t)this + 24, *((_QWORD *)this + 1) + 4160, &v6);
      v4 = v6;
    }
    *a2 = 1;
  }
  else if (byte_1ED82F8B8)
  {
    v4 = llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::pickOnlyChoice((char **)this + 25);
    if (!v4)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      llvm::ConvergingVLIWScheduler::pickNodeFromQueue(this, (uint64_t)this + 200, *((_QWORD *)this + 1) + 4840, &v6);
      v4 = v6;
    }
    *a2 = 0;
  }
  else
  {
    v4 = llvm::ConvergingVLIWScheduler::pickNodeBidrectional((char **)this, a2);
  }
  if (!*(_DWORD *)(v4 + 208))
    llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::removeReady((uint64_t)this + 24, v4);
  if (!*(_DWORD *)(v4 + 212))
    llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::removeReady((uint64_t)this + 200, v4);
  return v4;
}

uint64_t llvm::ConvergingVLIWScheduler::schedNode(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;

  if (a3)
  {
    result = llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::bumpNode(a1 + 24, a2);
    *(_DWORD *)(a2 + 248) = *(_DWORD *)(a1 + 176);
  }
  else
  {
    result = llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::bumpNode(a1 + 200, a2);
    *(_DWORD *)(a2 + 252) = *(_DWORD *)(a1 + 352);
  }
  return result;
}

void sub_1C52D8E38(llvm::ScheduleDAGMILive *a1)
{
  llvm::ScheduleDAGMILive::~ScheduleDAGMILive(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C52D8E60(_QWORD *a1)
{
  sub_1C52D8E84(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C52D8E84(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E814D6A0;
  v2 = (_QWORD *)a1[47];
  if (v2 != a1 + 50)
    free(v2);
  llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::~VLIWSchedBoundary((llvm::ConvergingVLIWScheduler::VLIWSchedBoundary *)(a1 + 25));
  llvm::ConvergingVLIWScheduler::VLIWSchedBoundary::~VLIWSchedBoundary((llvm::ConvergingVLIWScheduler::VLIWSchedBoundary *)(a1 + 3));
  return a1;
}

uint64_t sub_1C52D8ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_1C47AD050((uint64_t)&qword_1ED8038D8, 0, 0);
  byte_1ED803958 = 0;
  qword_1ED803960 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&word_1ED803968 = 0;
  qword_1ED8038D8 = (uint64_t)&unk_1E819E898;
  qword_1ED803970 = (uint64_t)&off_1E819E9A0;
  qword_1ED803978 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED803990 = (uint64_t)&qword_1ED803978;
  llvm::cl::Option::setArgStr(v0, "ignore-bb-reg-pressure", 0x16uLL);
  word_1ED8038E2 = word_1ED8038E2 & 0xFF98 | 0x21;
  byte_1ED803958 = 0;
  word_1ED803968 = 256;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED8038D8);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED8038D8, &dword_1C475E000);
  v1 = sub_1C47AD050((uint64_t)&qword_1ED803998, 0, 0);
  byte_1ED803A18 = 0;
  qword_1ED803A20 = (uint64_t)&off_1E7F9E8D8;
  *(_QWORD *)&word_1ED803A28 = 0;
  qword_1ED803998 = (uint64_t)&unk_1E819E898;
  qword_1ED803A30 = (uint64_t)&off_1E819E9A0;
  qword_1ED803A38[0] = &off_1E7F9E8F8;
  qword_1ED803A50 = (uint64_t)qword_1ED803A38;
  llvm::cl::Option::setArgStr(v1, "use-newer-candidate", 0x13uLL);
  word_1ED8039A2 = word_1ED8039A2 & 0xFF98 | 0x21;
  byte_1ED803A18 = 1;
  word_1ED803A28 = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED803998);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED803998, &dword_1C475E000);
  v2 = sub_1C47AD050((uint64_t)&qword_1ED803A58, 0, 0);
  dword_1ED803AD8 = 0;
  qword_1ED803AE8 = 0;
  qword_1ED803AE0 = (uint64_t)&off_1E7F952A8;
  qword_1ED803A58 = (uint64_t)&unk_1E819E3B0;
  qword_1ED803AF0 = (uint64_t)&unk_1E819E2C0;
  qword_1ED803AF8 = (uint64_t)&off_1E7F95260;
  qword_1ED803B10 = (uint64_t)&qword_1ED803AF8;
  llvm::cl::Option::setArgStr(v2, "misched-verbose-level", 0x15uLL);
  word_1ED803A62 = word_1ED803A62 & 0xFF98 | 0x21;
  dword_1ED803AD8 = 1;
  BYTE4(qword_1ED803AE8) = 1;
  LODWORD(qword_1ED803AE8) = 1;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED803A58);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED803A58, &dword_1C475E000);
  v3 = sub_1C47AD050((uint64_t)&qword_1ED803B18, 0, 0);
  byte_1ED803B98 = 0;
  qword_1ED803BA8 = 0;
  qword_1ED803BA0 = (uint64_t)&off_1E7F9E8D8;
  qword_1ED803B18 = (uint64_t)&unk_1E819E898;
  qword_1ED803BB0 = (uint64_t)&off_1E819E9A0;
  qword_1ED803BB8 = (uint64_t)&off_1E7F9E8F8;
  qword_1ED803BD0 = (uint64_t)&qword_1ED803BB8;
  llvm::cl::Option::setArgStr(v3, "check-early-avail", 0x11uLL);
  word_1ED803B22 = word_1ED803B22 & 0xFF98 | 0x21;
  byte_1ED803B98 = 1;
  LOWORD(qword_1ED803BA8) = 257;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED803B18);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED803B18, &dword_1C475E000);
  v4 = sub_1C47AD050((uint64_t)&qword_1ED803BD8, 0, 0);
  dword_1ED803C58 = 0;
  qword_1ED803C68 = 0;
  qword_1ED803C60 = (uint64_t)&unk_1E8139370;
  qword_1ED803BD8 = (uint64_t)&unk_1E8139308;
  qword_1ED803C70 = (uint64_t)&unk_1E819E350;
  qword_1ED803C78 = (uint64_t)&unk_1E8139390;
  qword_1ED803C90 = (uint64_t)&qword_1ED803C78;
  llvm::cl::Option::setArgStr(v4, "vliw-misched-reg-pressure", 0x19uLL);
  word_1ED803BE2 = word_1ED803BE2 & 0xFF9F | 0x20;
  dword_1ED803C58 = 1061158912;
  BYTE4(qword_1ED803C68) = 1;
  LODWORD(qword_1ED803C68) = 1061158912;
  qword_1ED803BF8 = (uint64_t)"High register pressure threhold.";
  qword_1ED803C00 = 32;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED803BD8);
  return __cxa_atexit((void (*)(void *))sub_1C4EBA468, &qword_1ED803BD8, &dword_1C475E000);
}

uint64_t sub_1C52D9238(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Virtual Register Map";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "virtregmap";
  *(_QWORD *)(v2 + 24) = 10;
  *(_QWORD *)(v2 + 32) = &llvm::VirtRegMap::ID;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = llvm::callDefaultCtor<llvm::VirtRegMap>;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::VirtRegMap::runOnMachineFunction(llvm::VirtRegMap *this, llvm::MachineFunction *a2)
{
  unsigned int *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  *((_QWORD *)this + 31) = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 32) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 104))(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 33) = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a2 + 2) + 176))(*((_QWORD *)a2 + 2));
  *((_QWORD *)this + 34) = a2;
  *((_DWORD *)this + 72) = 0;
  *((_DWORD *)this + 78) = 0;
  *((_DWORD *)this + 84) = 0;
  if (*((_QWORD *)this + 45))
  {
    v5 = (unsigned int *)((char *)this + 352);
    v6 = *((unsigned int *)this + 92);
    if (v6 <= 4 * *((_DWORD *)this + 90) || v6 < 0x41)
    {
      if ((_DWORD)v6)
      {
        v7 = *(_DWORD **)v5;
        v8 = 40 * v6;
        do
        {
          *v7 = -1;
          v7 += 10;
          v8 -= 40;
        }
        while (v8);
      }
      *((_QWORD *)this + 45) = 0;
    }
    else
    {
      sub_1C52DB56C(v5);
    }
  }
  llvm::VirtRegMap::grow((uint64_t)this);
  return 0;
}

uint64_t llvm::VirtRegMap::grow(uint64_t this)
{
  unint64_t v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  BOOL v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  BOOL v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  uint64_t v28;
  _DWORD *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v1 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(this + 272) + 40) + 32);
  v2 = *(unsigned int *)(this + 288);
  if ((_DWORD)v2 != (_DWORD)v1)
  {
    v3 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(this + 272) + 40) + 32);
    if (v2 > v1)
    {
LABEL_9:
      *(_DWORD *)(this + 288) = v3;
      goto LABEL_10;
    }
    v4 = (_QWORD *)(this + 280);
    v5 = *(_DWORD *)(this + 296);
    v6 = v1 - v2;
    v7 = *(_DWORD *)(this + 292);
    v8 = v1 > v7;
    v9 = v1 <= v7;
    if (v8 || !v6)
    {
      if (!v9)
      {
        v46 = this;
        v49 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(this + 272) + 40) + 32);
        v43 = (_QWORD *)(this + 280);
        v37 = v1 - v2;
        v40 = *(_DWORD *)(this + 296);
        llvm::SmallVectorBase<unsigned int>::grow_pod(this + 280, this + 296, v1, 4);
        v5 = v40;
        v6 = v37;
        v4 = v43;
        this = v46;
        v1 = v49;
        v2 = *(unsigned int *)(v46 + 288);
      }
      if (!v6)
        goto LABEL_8;
      v32 = (_DWORD *)(*v4 + 4 * v2);
      v33 = v6;
      do
      {
        *v32++ = v5;
        --v33;
      }
      while (v33);
    }
    else
    {
      v10 = (_DWORD *)(*v4 + 4 * v2);
      v11 = v1 - v2;
      do
      {
        *v10++ = v5;
        --v11;
      }
      while (v11);
    }
    LODWORD(v2) = *(_DWORD *)(this + 288);
LABEL_8:
    v3 = v2 + v6;
    goto LABEL_9;
  }
LABEL_10:
  v12 = *(unsigned int *)(this + 312);
  if ((_DWORD)v12 == (_DWORD)v1)
    goto LABEL_19;
  v13 = v1;
  if (v12 <= v1)
  {
    v14 = (_QWORD *)(this + 304);
    v15 = *(_DWORD *)(this + 320);
    v16 = v1 - v12;
    v17 = *(_DWORD *)(this + 316);
    v8 = v1 > v17;
    v18 = v1 <= v17;
    if (v8 || !v16)
    {
      if (!v18)
      {
        v45 = this;
        v48 = v1;
        v42 = (_QWORD *)(this + 304);
        v36 = v1 - v12;
        v39 = *(_DWORD *)(this + 320);
        llvm::SmallVectorBase<unsigned int>::grow_pod(this + 304, this + 320, v1, 4);
        v15 = v39;
        v16 = v36;
        v14 = v42;
        this = v45;
        v1 = v48;
        v12 = *(unsigned int *)(v45 + 312);
      }
      if (!v16)
        goto LABEL_17;
      v30 = (_DWORD *)(*v14 + 4 * v12);
      v31 = v16;
      do
      {
        *v30++ = v15;
        --v31;
      }
      while (v31);
    }
    else
    {
      v19 = (_DWORD *)(*v14 + 4 * v12);
      v20 = v1 - v12;
      do
      {
        *v19++ = v15;
        --v20;
      }
      while (v20);
    }
    LODWORD(v12) = *(_DWORD *)(this + 312);
LABEL_17:
    v13 = v12 + v16;
  }
  *(_DWORD *)(this + 312) = v13;
LABEL_19:
  v21 = *(unsigned int *)(this + 336);
  if ((_DWORD)v21 != (_DWORD)v1)
  {
    if (v21 <= v1)
    {
      v22 = (_QWORD *)(this + 328);
      v23 = *(_DWORD *)(this + 344);
      v24 = v1 - v21;
      v25 = *(unsigned int *)(this + 336);
      v26 = *(_DWORD *)(this + 336);
      if (v1 > *(_DWORD *)(this + 340))
      {
        v44 = this;
        v47 = v1;
        v41 = (_QWORD *)(this + 328);
        v34 = *(unsigned int *)(this + 336);
        v35 = v1 - v21;
        v38 = *(_DWORD *)(this + 344);
        llvm::SmallVectorBase<unsigned int>::grow_pod(this + 328, this + 344, v1, 4);
        v21 = v34;
        v24 = v35;
        v23 = v38;
        v22 = v41;
        this = v44;
        v1 = v47;
        v25 = *(unsigned int *)(v44 + 336);
        v26 = *(_DWORD *)(v44 + 336);
      }
      if (v24)
      {
        v27 = (_DWORD *)(*v22 + 4 * v25);
        v28 = v21 - v1;
        do
          *v27++ = v23;
        while (!__CFADD__(v28++, 1));
        v26 = *(_DWORD *)(this + 336);
      }
      LODWORD(v1) = v26 + v24;
    }
    *(_DWORD *)(this + 336) = v1;
  }
  return this;
}

uint64_t llvm::VirtRegMap::assignVirt2Phys(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 280) + 4 * (a2 & 0x7FFFFFFF)) = a3;
  return result;
}

uint64_t llvm::VirtRegMap::createSpillSlot(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 264) + 264)
     + 24
     * (*(unsigned __int16 *)(*(_QWORD *)a2 + 24)
      + *(_DWORD *)(*(_QWORD *)(a1 + 264) + 272)
      * ((*(_QWORD *)(*(_QWORD *)(a1 + 264) + 248) - *(_QWORD *)(*(_QWORD *)(a1 + 264) + 240)) >> 3));
  v4 = *(unsigned int *)(v3 + 4);
  v5 = 63 - __clz((unint64_t)*(unsigned int *)(v3 + 8) >> 3);
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 272) + 16);
  v7 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 112))(v6) + 12);
  if (v7 < v5)
  {
    v9 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 176);
    v10 = v6;
    v11 = v7;
    v12 = v9(v10);
    if (!(*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 432))(v12, *(_QWORD *)(a1 + 272)))
      v5 = v11;
  }
  return llvm::MachineFrameInfo::CreateSpillStackObject(*(unsigned __int8 **)(*(_QWORD *)(a1 + 272) + 56), v4 >> 3, v5);
}

BOOL llvm::VirtRegMap::hasPreferredPhys(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  uint64_t v8;

  v2 = a2 & 0x7FFFFFFF;
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 208);
  v4 = v3 + 40 * v2;
  if (!*(_DWORD *)(v4 + 16))
    return 0;
  v6 = **(_DWORD **)(v4 + 8);
  if (*(_DWORD *)(v3 + 40 * v2) || v6 == 0)
    return 0;
  v8 = *(_QWORD *)(a1 + 280);
  if (v6 < 0)
    v6 = *(_DWORD *)(v8 + 4 * (v6 & 0x7FFFFFFF));
  return *(_DWORD *)(v8 + 4 * v2) == v6;
}

uint64_t llvm::VirtRegMap::hasKnownPreference(uint64_t a1, int a2)
{
  uint64_t v2;
  int v4;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 208) + 40 * (a2 & 0x7FFFFFFF);
  if (!*(_DWORD *)(v2 + 16))
    return 0;
  v4 = **(_DWORD **)(v2 + 8);
  if (v4 < 0)
    return *(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * (v4 & 0x7FFFFFFF)) != 0;
  if ((v4 - 0x40000000) <= 0xC0000000)
  {
    if ((v4 & 0x80000000) == 0)
      return 0;
    return *(_DWORD *)(*(_QWORD *)(a1 + 280) + 4 * (v4 & 0x7FFFFFFF)) != 0;
  }
  return 1;
}

uint64_t llvm::VirtRegMap::assignVirt2StackSlot(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = a2 & 0x7FFFFFFF;
  result = llvm::VirtRegMap::createSpillSlot(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 40) + 24) + 16 * v3) & 0xFFFFFFFFFFFFFFF8);
  *(_DWORD *)(*(_QWORD *)(a1 + 304) + 4 * v3) = result;
  return result;
}

uint64_t llvm::VirtRegMap::assignVirt2StackSlot(uint64_t result, int a2, int a3)
{
  *(_DWORD *)(*(_QWORD *)(result + 304) + 4 * (a2 & 0x7FFFFFFF)) = a3;
  return result;
}

uint64_t sub_1C52D97B8(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  unint64_t v4;
  uint64_t v5;
  llvm *v7;
  _QWORD *v8;
  _QWORD v9[2];

  llvm::initializeSlotIndexesPass((uint64_t)a1);
  llvm::initializeLiveIntervalsPass((uint64_t)a1);
  llvm::initializeLiveDebugVariablesPass(a1, v2);
  llvm::initializeLiveStacksPass(a1, v3);
  v7 = a1;
  v4 = atomic_load(&qword_1ED8304D8);
  if (v4 != -1)
  {
    v9[0] = sub_1C52D9238;
    v9[1] = &v7;
    v8 = v9;
    std::__call_once(&qword_1ED8304D8, &v8, (void (__cdecl *)(void *))sub_1C4776838);
  }
  v5 = operator new();
  *(_QWORD *)v5 = "Virtual Register Rewriter";
  *(_QWORD *)(v5 + 8) = 25;
  *(_QWORD *)(v5 + 16) = "virtregrewriter";
  *(_QWORD *)(v5 + 24) = 15;
  *(_QWORD *)(v5 + 32) = &unk_1EF8F7028;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C52D98B4;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C52D98B4()
{
  uint64_t v0;
  uint64_t result;

  v0 = operator new();
  result = sub_1C4776848(v0, (uint64_t)&unk_1EF8F7028);
  *(_QWORD *)result = &off_1E814D810;
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 320) = 0;
  *(_DWORD *)(result + 328) = 0;
  *(_BYTE *)(result + 336) = 1;
  return result;
}

void sub_1C52D9904(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)a1 = &off_1E814D810;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 39), 4);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v2 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v2 != (_QWORD *)((char *)a1 + 192))
    free(v2);
  v3 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v3 != (_QWORD *)((char *)a1 + 120))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v4 != (_QWORD *)((char *)a1 + 48))
    free(v4);
  llvm::Pass::~Pass(a1);
}

void sub_1C52D9994(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)a1 = &off_1E814D810;
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 39), 4);
  *(_QWORD *)a1 = &unk_1E8144BE8;
  v2 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v2 != (_QWORD *)((char *)a1 + 192))
    free(v2);
  v3 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v3 != (_QWORD *)((char *)a1 + 120))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v4 != (_QWORD *)((char *)a1 + 48))
    free(v4);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C52D9A38(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&unk_1EF8F6EF8);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::LiveStacks::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::LiveStacks::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::VirtRegMap::ID);
  if (!*((_BYTE *)a1 + 336))
    sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&unk_1EF8F6EF8);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C52D9B30(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  const llvm::VirtRegMap *v9;
  uint64_t AnalysisPass;
  int i;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t **v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  unint64_t *v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  uint64_t v38;
  unsigned int v39;
  unint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  unint64_t v61;
  unsigned int v62;
  unsigned int v63;
  uint64_t v64;
  char *v65;
  char *v66;
  _QWORD *v67;
  _QWORD *v68;
  unsigned int v69;
  _QWORD *v70;
  unint64_t v71;
  char *v72;
  _QWORD *v73;
  char *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int v87;
  uint64_t v88;
  uint64_t v89;
  llvm::MachineBasicBlock *v90;
  llvm::MachineBasicBlock *v91;
  int v92;
  llvm::MachineInstr *v93;
  int v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  _DWORD *v98;
  int v99;
  _DWORD *v100;
  int v101;
  BOOL v102;
  unsigned int v103;
  _DWORD *v104;
  _DWORD *v105;
  int v106;
  int32x2_t *v107;
  uint64_t v108;
  uint64_t v109;
  unsigned __int8 *v110;
  unsigned __int8 *v111;
  int v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  _DWORD *v120;
  int v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  __int16 v127;
  unint64_t v128;
  llvm::MachineInstr *v129;
  unint64_t v130;
  unsigned int v131;
  int v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  int v140;
  int v141;
  _DWORD *v142;
  int v143;
  BOOL v144;
  unsigned int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  __int16 v151;
  unint64_t v152;
  unint64_t v153;
  unsigned int v154;
  int v155;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  int v162;
  int v163;
  _DWORD *v164;
  _DWORD *v165;
  unint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  unint64_t v169;
  _WORD *v170;
  unsigned __int16 v171;
  llvm::LiveRange *v172;
  unsigned int v173;
  _QWORD *v174;
  uint64_t v175;
  unsigned int v176;
  unsigned int v177;
  unint64_t v178;
  _QWORD *v179;
  unint64_t v180;
  unint64_t v181;
  uint64_t v182;
  BOOL v183;
  unint64_t v184;
  _QWORD *v185;
  unsigned int v186;
  unsigned int v187;
  BOOL v188;
  unint64_t v189;
  uint64_t v190;
  BOOL v191;
  unint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unsigned int v199;
  unsigned int v200;
  _QWORD *v201;
  uint64_t v202;
  unsigned int v203;
  unsigned int v204;
  _QWORD *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  BOOL v209;
  unint64_t v210;
  int v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unsigned __int16 v216;
  unsigned __int16 *v217;
  unsigned __int16 *v218;
  int v219;
  uint64_t v220;
  uint64_t v221;
  int v222;
  int v224;
  int v225;
  uint64_t j;
  unsigned int v227;
  unsigned int v228;
  unsigned int v229;
  int v230;
  BOOL v231;
  unint64_t v232;
  uint64_t v233;
  int v234;
  _QWORD *v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int v240;
  _QWORD *v241;
  uint64_t v242;
  unint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  char *v246;
  unsigned int v247;
  unsigned int v248;
  BOOL v249;
  int v250;
  uint64_t v251;
  char *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  __int16 v262;
  uint64_t v263;
  BOOL v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t *v269;
  uint64_t v270;
  uint64_t v271;
  int *v272;
  int v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  unsigned int *v277;
  uint64_t v278;
  unsigned int *v279;
  unsigned int *v280;
  unsigned int v281;
  uint64_t v282;
  _QWORD *v283;
  unint64_t v284;
  _WORD *v285;
  unsigned __int16 *v286;
  __int16 v287;
  unsigned __int16 v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  int v295;
  unsigned int *v296;
  unsigned int v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  void **v304;
  uint64_t v305;
  llvm::MachineBasicBlock *v306;
  llvm::MachineBasicBlock *v307;
  uint64_t v308;
  int v309;
  llvm::MachineInstr *v310;
  llvm::MachineInstr *v311;
  unsigned int v312;
  llvm::MachineInstr *v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  int v319;
  uint64_t v320;
  int v321;
  uint64_t v322;
  const char *v323;
  __int16 v324;
  uint64_t (**v325)(llvm::DiagnosticInfo *__hidden);
  int v326;
  char v327;
  uint64_t v328;
  const char **v329;
  uint64_t v330;
  void *v331;
  uint64_t v332;
  _BYTE v333[64];
  _DWORD *v334;
  uint64_t v335;
  _BYTE v336[32];
  _DWORD *v337;
  uint64_t v338;
  _BYTE v339[32];
  _QWORD *v340;
  uint64_t v341;
  _QWORD v342[4];

  v342[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 248) = a2;
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 264) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 248) + 16) + 104))(*(_QWORD *)(*(_QWORD *)(a1 + 248) + 16));
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(*(_QWORD *)(a1 + 248) + 40);
  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::SlotIndexes::ID);
  *(_QWORD *)(a1 + 280) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::SlotIndexes::ID);
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(a1 + 288) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::LiveIntervals::ID);
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::VirtRegMap::ID);
  v9 = (const llvm::VirtRegMap *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::VirtRegMap::ID);
  *(_QWORD *)(a1 + 296) = v9;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &unk_1EF8F6EF8, 1);
  if (AnalysisPass)
  {
    AnalysisPass = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &unk_1EF8F6EF8);
    v9 = *(const llvm::VirtRegMap **)(a1 + 296);
  }
  *(_QWORD *)(a1 + 304) = AnalysisPass;
  llvm::LiveIntervals::addKillFlags(*(llvm::LiveIntervals **)(a1 + 288), v9);
  v322 = a1;
  v317 = *(_DWORD *)(*(_QWORD *)(a1 + 272) + 32);
  if (v317)
  {
    for (i = 0; i != v317; ++i)
    {
      v12 = i & 0x7FFFFFFF;
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v322 + 272) + 24) + 16 * v12 + 8);
      if (v13)
      {
        while ((*(_DWORD *)v13 & 0x80000000) != 0)
        {
          v13 = *(_QWORD *)(v13 + 24);
          if (!v13)
            goto LABEL_110;
        }
        v14 = *(_QWORD *)(v322 + 288);
        if (v12 >= *(unsigned int *)(v14 + 416)
          || (v15 = *(unint64_t ***)(*(_QWORD *)(v14 + 408) + 8 * v12)) == 0)
        {
          v15 = (unint64_t **)sub_1C4851220(*(_QWORD *)(v322 + 288), i | 0x80000000);
          v82 = *(_QWORD *)(v14 + 304);
          v83 = *(_QWORD *)(v14 + 248);
          *(_QWORD *)v82 = v83;
          *(_QWORD *)(v82 + 8) = *(_QWORD *)(v83 + 40);
          *(_OWORD *)(v82 + 16) = *(_OWORD *)(v14 + 288);
          *(_QWORD *)(v82 + 32) = v14 + 312;
          llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v82);
          *(_DWORD *)(v82 + 184) = 0;
          v84 = *(_QWORD *)(v14 + 256);
          v22 = *(_BYTE *)(v84 + 16) == 0;
          v85 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v84 + 24) + 16 * ((_DWORD)v15[14] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                   + 34);
          v87 = !v22 && v85 != 0;
          llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v14 + 304), (llvm::LiveInterval *)v15, v87);
          llvm::LiveIntervals::computeDeadValues(v14, (uint64_t)v15, 0);
        }
        v16 = *((_DWORD *)v15 + 2);
        if (v16)
        {
          if ((v17 = **v15, (v17 & 6) == 0)
            || (v18 = (*v15)[3 * v16 - 2], (v18 & 6) == 0)
            || ((v19 = *(_QWORD *)(v322 + 288),
                 v20 = sub_1C499C548(*(_QWORD *)(v19 + 288), v17),
                 v21 = sub_1C499C548(*(_QWORD *)(v19 + 288), v18),
                 v20)
              ? (v22 = v20 == v21)
              : (v22 = 0),
                !v22))
          {
            v319 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v322 + 296) + 280) + 4 * v12);
            if (v319)
            {
              v23 = v15[13];
              if (v23)
              {
                v24 = 0;
                v25 = 0;
                v26 = 0;
                v331 = v333;
                v332 = 0x400000000;
                do
                {
                  v27 = (unint64_t *)*v23;
                  if (v24 >= HIDWORD(v332))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v331, (uint64_t)v333, v24 + 1, 16);
                    v24 = v332;
                  }
                  v28 = (unint64_t **)((char *)v331 + 16 * v24);
                  *v28 = v23;
                  v28[1] = v27;
                  v24 = v332 + 1;
                  LODWORD(v332) = v332 + 1;
                  if (v25 < 8
                    || (*(_DWORD *)((*(_QWORD *)*v23 & 0xFFFFFFFFFFFFFFF8) + 24) | (*(_QWORD *)*v23 >> 1) & 3) < (*(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24) | (v25 >> 1) & 3))
                  {
                    v25 = *(_QWORD *)*v23;
                  }
                  if (v26 < 8
                    || (v29 = *(_QWORD *)(*v23 + 24 * *((unsigned int *)v23 + 2) - 16),
                        (*(_DWORD *)((v29 & 0xFFFFFFFFFFFFFFF8) + 24) | (v29 >> 1) & 3) > (*(_DWORD *)((v26 & 0xFFFFFFFFFFFFFFF8) + 24) | (v26 >> 1) & 3)))
                  {
                    v26 = *(_QWORD *)(*v23 + 24 * *((unsigned int *)v23 + 2) - 16);
                  }
                  v23 = (unint64_t *)v23[13];
                }
                while (v23);
                v30 = *(_QWORD *)(v322 + 280);
                v31 = *(_QWORD **)(v30 + 536);
                v32 = *(unsigned int *)(v30 + 544);
                if ((_DWORD)v32)
                {
                  v33 = v31;
                  v34 = v32;
                  do
                  {
                    v35 = v34 >> 1;
                    v36 = &v33[2 * (v34 >> 1)];
                    v38 = *v36;
                    v37 = v36 + 2;
                    v34 += ~(v34 >> 1);
                    if (((v38 >> 1) & 3 | *(_DWORD *)((v38 & 0xFFFFFFFFFFFFFFF8) + 24)) < (*(_DWORD *)((v25 & 0xFFFFFFFFFFFFFFF8) + 24) | (v25 >> 1) & 3))
                      v33 = v37;
                    else
                      v34 = v35;
                  }
                  while (v34);
                }
                else
                {
                  v32 = 0;
                  v33 = v31;
                }
                if (v33 != &v31[2 * v32])
                {
                  v61 = v26 & 0xFFFFFFFFFFFFFFF8;
                  v62 = (v26 >> 1) & 3;
                  v315 = v26 & 0xFFFFFFFFFFFFFFF8;
                  v312 = v62;
                  do
                  {
                    v63 = (*v33 >> 1) & 3 | *(_DWORD *)((*v33 & 0xFFFFFFFFFFFFFFF8) + 24);
                    if (v63 > (*(_DWORD *)(v61 + 24) | v62))
                      break;
                    if ((_DWORD)v332)
                    {
                      v64 = 0;
                      v65 = (char *)v331;
                      v66 = (char *)v331 + 16 * v332;
                      do
                      {
                        v67 = *(_QWORD **)v65;
                        v68 = (_QWORD *)*((_QWORD *)v65 + 1);
                        v69 = *(_DWORD *)(*(_QWORD *)v65 + 8);
                        while (v68 != (_QWORD *)(*v67 + 24 * v69))
                        {
                          if (((v68[1] >> 1) & 3 | *(_DWORD *)((v68[1] & 0xFFFFFFFFFFFFFFF8) + 24)) > v63)
                          {
                            if (((*v68 >> 1) & 3 | *(_DWORD *)((*v68 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v63)
                              v64 |= v67[14];
                            break;
                          }
                          v68 += 3;
                          *((_QWORD *)v65 + 1) = v68;
                        }
                        v65 += 16;
                      }
                      while (v65 != v66);
                      if (v64)
                      {
                        v70 = (_QWORD *)v33[1];
                        v72 = (char *)v70[20];
                        v71 = v70[21];
                        if ((unint64_t)v72 >= v71)
                        {
                          v74 = (char *)v70[19];
                          v75 = (v72 - v74) >> 4;
                          v76 = v75 + 1;
                          if ((unint64_t)(v75 + 1) >> 60)
                            goto LABEL_438;
                          v77 = v71 - (_QWORD)v74;
                          if (v77 >> 3 > v76)
                            v76 = v77 >> 3;
                          if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFF0)
                            v76 = 0xFFFFFFFFFFFFFFFLL;
                          if (v76)
                          {
                            if (v76 >> 60)
                              goto LABEL_439;
                            v78 = v76;
                            v79 = (char *)operator new(16 * v76);
                          }
                          else
                          {
                            v78 = 0;
                            v79 = 0;
                          }
                          v80 = &v79[16 * v75];
                          *(_WORD *)v80 = v319;
                          *((_QWORD *)v80 + 1) = v64;
                          v81 = v80;
                          if (v72 != v74)
                          {
                            do
                            {
                              *((_OWORD *)v81 - 1) = *((_OWORD *)v72 - 1);
                              v81 -= 16;
                              v72 -= 16;
                            }
                            while (v72 != v74);
                            v72 = (char *)v70[19];
                          }
                          v73 = v80 + 16;
                          v70[19] = v81;
                          v70[20] = v80 + 16;
                          v70[21] = &v79[16 * v78];
                          if (v72)
                            operator delete(v72);
                          v61 = v315;
                          v62 = v312;
                        }
                        else
                        {
                          *(_WORD *)v72 = v319;
                          *((_QWORD *)v72 + 1) = v64;
                          v73 = v72 + 16;
                        }
                        v70[20] = v73;
                      }
                    }
                    v33 += 2;
                  }
                  while (v33 != (_QWORD *)(*(_QWORD *)(*(_QWORD *)(v322 + 280) + 536)
                                          + 16 * *(unsigned int *)(*(_QWORD *)(v322 + 280) + 544)));
                }
                if (v331 != v333)
                  free(v331);
              }
              else
              {
                v39 = *((_DWORD *)v15 + 2);
                if (v39)
                {
                  v40 = *v15;
                  v314 = (uint64_t)&(*v15)[3 * v39];
                  v41 = *(_QWORD *)(v322 + 280);
                  v42 = *(_QWORD **)(v41 + 536);
                  do
                  {
                    v43 = *(_QWORD *)(v41 + 536) + 16 * *(unsigned int *)(v41 + 544);
                    if ((_QWORD *)v43 != v42)
                    {
                      v44 = (v43 - (uint64_t)v42) >> 4;
                      do
                      {
                        v45 = v44 >> 1;
                        v46 = &v42[2 * (v44 >> 1)];
                        v48 = *v46;
                        v47 = v46 + 2;
                        v44 += ~(v44 >> 1);
                        if (((v48 >> 1) & 3 | *(_DWORD *)((v48 & 0xFFFFFFFFFFFFFFF8) + 24)) < ((*v40 >> 1) & 3 | *(_DWORD *)((*v40 & 0xFFFFFFFFFFFFFFF8) + 24)))
                          v42 = v47;
                        else
                          v44 = v45;
                      }
                      while (v44);
                    }
                    if (v42 == (_QWORD *)v43)
                    {
                      v42 = (_QWORD *)(*(_QWORD *)(v41 + 536) + 16 * *(unsigned int *)(v41 + 544));
                    }
                    else
                    {
                      do
                      {
                        if (((*v42 >> 1) & 3 | *(_DWORD *)((*v42 & 0xFFFFFFFFFFFFFFF8) + 24)) >= (*(_DWORD *)((v40[1] & 0xFFFFFFFFFFFFFFF8) + 24) | (v40[1] >> 1) & 3))
                          break;
                        v49 = (_QWORD *)v42[1];
                        v51 = (char *)v49[20];
                        v50 = v49[21];
                        if ((unint64_t)v51 >= v50)
                        {
                          v53 = (char *)v49[19];
                          v54 = (v51 - v53) >> 4;
                          v55 = v54 + 1;
                          if ((unint64_t)(v54 + 1) >> 60)
LABEL_438:
                            abort();
                          v56 = v50 - (_QWORD)v53;
                          if (v56 >> 3 > v55)
                            v55 = v56 >> 3;
                          v57 = (unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v55;
                          if (v57)
                          {
                            if (v57 >> 60)
LABEL_439:
                              sub_1C4764EE4();
                            v58 = (char *)operator new(16 * v57);
                          }
                          else
                          {
                            v58 = 0;
                          }
                          v59 = &v58[16 * v54];
                          *(_WORD *)v59 = v319;
                          *((_QWORD *)v59 + 1) = -1;
                          v60 = v59;
                          if (v51 != v53)
                          {
                            do
                            {
                              *((_OWORD *)v60 - 1) = *((_OWORD *)v51 - 1);
                              v60 -= 16;
                              v51 -= 16;
                            }
                            while (v51 != v53);
                            v51 = (char *)v49[19];
                          }
                          v52 = v59 + 16;
                          v49[19] = v60;
                          v49[20] = v59 + 16;
                          v49[21] = &v58[16 * v57];
                          if (v51)
                            operator delete(v51);
                        }
                        else
                        {
                          *(_WORD *)v51 = v319;
                          *((_QWORD *)v51 + 1) = -1;
                          v52 = v51 + 16;
                        }
                        v49[20] = v52;
                        v42 += 2;
                        v41 = *(_QWORD *)(v322 + 280);
                      }
                      while (v42 != (_QWORD *)(*(_QWORD *)(v41 + 536) + 16 * *(unsigned int *)(v41 + 544)));
                    }
                    v40 += 3;
                  }
                  while (v40 != (unint64_t *)v314);
                }
              }
            }
          }
        }
      }
LABEL_110:
      ;
    }
  }
  v88 = v322;
  v89 = *(_QWORD *)(v322 + 248);
  v90 = (llvm::MachineBasicBlock *)(v89 + 320);
  v91 = *(llvm::MachineBasicBlock **)(v89 + 328);
  if (v91 != (llvm::MachineBasicBlock *)(v89 + 320))
  {
    do
    {
      llvm::MachineBasicBlock::sortUniqueLiveIns(v91);
      v91 = (llvm::MachineBasicBlock *)*((_QWORD *)v91 + 1);
    }
    while (v91 != v90);
    v89 = *(_QWORD *)(v322 + 248);
    v90 = *(llvm::MachineBasicBlock **)(v89 + 328);
  }
  v92 = *(unsigned __int8 *)(*(_QWORD *)(v322 + 272) + 16);
  v331 = v333;
  v332 = 0x800000000;
  v337 = v339;
  v338 = 0x800000000;
  v334 = v336;
  v335 = 0x800000000;
  v306 = (llvm::MachineBasicBlock *)(v89 + 320);
  if (v90 != (llvm::MachineBasicBlock *)(v89 + 320))
  {
    v308 = v322 + 312;
    v309 = v92;
    while (1)
    {
      v307 = v90;
      v93 = (llvm::MachineInstr *)*((_QWORD *)v90 + 7);
      v310 = (llvm::MachineBasicBlock *)((char *)v90 + 48);
      if (v93 != (llvm::MachineBasicBlock *)((char *)v90 + 48))
        break;
LABEL_390:
      v90 = (llvm::MachineBasicBlock *)*((_QWORD *)v307 + 1);
      if (v90 == v306)
        goto LABEL_391;
    }
    while (1)
    {
      v311 = (llvm::MachineInstr *)*((_QWORD *)v93 + 1);
      v313 = v93;
      v109 = *((unsigned int *)v93 + 10);
      if ((_DWORD)v109)
      {
        v110 = (unsigned __int8 *)*((_QWORD *)v93 + 4);
        v111 = &v110[32 * v109];
        while (2)
        {
          v112 = *v110;
          if (v112 == 12)
          {
            sub_1C4963F5C(*(_QWORD *)(v88 + 272) + 280, *((int **)v110 + 2), 0xFFFFFFFF);
            v112 = *v110;
          }
          if (v112)
            goto LABEL_288;
          v113 = *((_DWORD *)v110 + 1);
          if ((v113 & 0x80000000) == 0)
            goto LABEL_288;
          v114 = v113 & 0x7FFFFFFF;
          v115 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 296) + 280) + 4 * v114);
          if (!v115)
            goto LABEL_288;
          LODWORD(v325) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 296) + 280) + 4 * (v113 & 0x7FFFFFFF));
          v116 = *(_DWORD *)(v88 + 328);
          if (v116)
          {
            v117 = *(_QWORD *)(v88 + 312);
            v118 = v116 - 1;
            v119 = v118 & (37 * v115);
            v120 = (_DWORD *)(v117 + 4 * v119);
            v121 = *v120;
            if (v115 == *v120)
              goto LABEL_158;
            v142 = 0;
            v143 = 1;
            while (v121 != -1)
            {
              if (v142)
                v144 = 0;
              else
                v144 = v121 == -2;
              if (v144)
                v142 = v120;
              v145 = v119 + v143++;
              v119 = v145 & v118;
              v120 = (_DWORD *)(v117 + 4 * v119);
              v121 = *v120;
              if (v115 == *v120)
                goto LABEL_158;
            }
            if (v142)
              v164 = v142;
            else
              v164 = v120;
          }
          else
          {
            v164 = 0;
          }
          v165 = sub_1C4978C80(v308, (uint64_t)&v325, (int *)&v325, v164);
          *v165 = (_DWORD)v325;
LABEL_158:
          LODWORD(v122) = *(_DWORD *)v110;
          v123 = (*(_DWORD *)v110 >> 8) & 0xFFF;
          if (v123)
          {
            if (!v92
              || ((v124 = *(_QWORD *)(v88 + 272), *(_BYTE *)(v124 + 16))
                ? (v125 = *(_BYTE *)((*(_QWORD *)(*(_QWORD *)(v124 + 24) + 16 * v114) & 0xFFFFFFFFFFFFFFF8) + 34) == 0)
                : (v125 = 1),
                  v125))
            {
              if ((v122 & 0x30000000) != 0 || (v122 & 0x10FFF00) == 0x1000000)
              {
                if ((v122 & 0x1000000) != 0)
                {
                  v127 = *((_WORD *)v313 + 22);
                  v128 = (unint64_t)v313;
                  if ((v127 & 4) != 0)
                  {
                    do
                      v128 = *(_QWORD *)v128 & 0xFFFFFFFFFFFFFFF8;
                    while ((*(_WORD *)(v128 + 44) & 4) != 0);
                  }
                  v129 = v313;
                  if ((v127 & 8) != 0)
                  {
                    do
                      v129 = (llvm::MachineInstr *)*((_QWORD *)v129 + 1);
                    while ((*((_WORD *)v129 + 22) & 8) != 0);
                  }
                  v130 = *((_QWORD *)v129 + 1);
                  if (v128 != v130)
                  {
                    do
                    {
                      v131 = **(unsigned __int16 **)(v128 + 16);
                      v249 = v131 > 0x17;
                      v132 = (1 << v131) & 0x83E000;
                      if (v249 || v132 == 0)
                        goto LABEL_182;
                      v128 = *(_QWORD *)(v128 + 8);
                    }
                    while (v128 != v130);
                    v128 = v130;
                  }
LABEL_182:
                  v134 = *(_QWORD *)(*(_QWORD *)(v88 + 288) + 288);
                  v135 = *(_QWORD *)(v134 + 368);
                  v136 = *(unsigned int *)(v134 + 384);
                  if ((_DWORD)v136)
                  {
                    LODWORD(v137) = ((v128 >> 4) ^ (v128 >> 9)) & (v136 - 1);
                    v138 = (uint64_t *)(v135 + 16 * v137);
                    v139 = *v138;
                    if (v128 != *v138)
                    {
                      v140 = 1;
                      do
                      {
                        if (v139 == -4096)
                          goto LABEL_220;
                        v141 = v137 + v140++;
                        v137 = v141 & (v136 - 1);
                        v139 = *(_QWORD *)(v135 + 16 * v137);
                      }
                      while (v128 != v139);
                      v138 = (uint64_t *)(v135 + 16 * v137);
                    }
                  }
                  else
                  {
LABEL_220:
                    v138 = (uint64_t *)(v135 + 16 * v136);
                  }
                  v166 = v138[1] & 0xFFFFFFFFFFFFFFF8;
                  v167 = *(_QWORD *)(v88 + 256);
                  if (v167)
                    v168 = (_QWORD *)(v167 + 8);
                  else
                    v168 = 0;
                  v169 = *(unsigned int *)(*v168 + 24 * v115 + 16);
                  v170 = (_WORD *)(v168[6] + ((v169 >> 3) & 0x1FFFFFFE));
                  v171 = *v170 + (v169 & 0xF) * v115;
                  while (2)
                  {
                    v172 = sub_1C50E4F00(*(llvm::LiveIntervals **)(v88 + 288), v171);
                    v173 = *((_DWORD *)v172 + 2);
                    v174 = *(_QWORD **)v172;
                    if (v173)
                    {
                      v175 = v174[3 * v173 - 2];
                      v176 = *(_DWORD *)(v166 + 24) | 3;
                      v177 = (v175 >> 1) & 3 | *(_DWORD *)((v175 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v178 = *((unsigned int *)v172 + 2);
                      v179 = *(_QWORD **)v172;
                      v180 = v178;
                      if (v176 < v177)
                      {
                        do
                        {
                          v181 = v180 >> 1;
                          v182 = v179[3 * (v180 >> 1) + 1];
                          LODWORD(v182) = (v182 >> 1) & 3 | *(_DWORD *)((v182 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v180 -= (v180 >> 1) + 1;
                          v183 = v176 >= v182;
                          if (v176 >= v182)
                            v184 = v181 + 1;
                          else
                            v184 = 0;
                          v179 += 3 * v184;
                          if (!v183)
                            v180 = v181;
                        }
                        while (v180);
                        v178 = *((unsigned int *)v172 + 2);
                        goto LABEL_236;
                      }
                    }
                    else
                    {
                      v178 = 0;
                    }
                    v179 = &v174[3 * v178];
LABEL_236:
                    v185 = &v174[3 * v178];
                    if (v179 != v185)
                    {
                      v186 = (*v179 >> 1) & 3 | *(_DWORD *)((*v179 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v187 = *(_DWORD *)(v166 + 24);
                      v188 = v186 > (v187 | 3) || v173 == 0;
                      if (!v188
                        && v187 < ((*(v185 - 2) >> 1) & 3 | *(_DWORD *)((*(v185 - 2) & 0xFFFFFFFFFFFFFFF8)
                                                                                    + 24)))
                      {
                        do
                        {
                          v189 = v178 >> 1;
                          v190 = v174[3 * (v178 >> 1) + 1];
                          LODWORD(v190) = (v190 >> 1) & 3 | *(_DWORD *)((v190 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v178 -= (v178 >> 1) + 1;
                          v191 = v187 >= v190;
                          if (v187 >= v190)
                            v192 = v189 + 1;
                          else
                            v192 = 0;
                          v174 += 3 * v192;
                          if (!v191)
                            v178 = v189;
                        }
                        while (v178);
                        if (v174 != v185
                          && ((*v174 >> 1) & 3 | *(_DWORD *)((*v174 & 0xFFFFFFFFFFFFFFF8) + 24)) <= v187)
                        {
                          goto LABEL_169;
                        }
                      }
                    }
                    v193 = (unsigned __int16)v170[1];
                    ++v170;
                    v171 += v193;
                    if (!v193)
                      break;
                    continue;
                  }
                }
              }
              else if ((v122 & 0x1000000) != 0 || ((v122 >> 26) & ~BYTE3(v122) & 1) != 0)
              {
LABEL_169:
                v126 = v335;
                if (v335 >= (unint64_t)HIDWORD(v335))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v334, (uint64_t)v336, v335 + 1, 4);
                  v126 = v335;
                }
                v334[v126] = v115;
                LODWORD(v335) = v335 + 1;
              }
              if ((*(_DWORD *)v110 & 0x1000000) != 0)
              {
                if ((~*(_DWORD *)v110 & 0x5000000) != 0)
                {
                  v195 = v338;
                  if (v338 >= (unint64_t)HIDWORD(v338))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v337, (uint64_t)v339, v338 + 1, 4);
                    v195 = v338;
                  }
                  v337[v195] = v115;
                  LODWORD(v338) = v338 + 1;
                }
                else
                {
                  v194 = v332;
                  if (v332 >= (unint64_t)HIDWORD(v332))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v331, (uint64_t)v333, v332 + 1, 4);
                    v194 = v332;
                  }
                  *((_DWORD *)v331 + v194) = v115;
                  LODWORD(v332) = v332 + 1;
                }
              }
            }
            else if ((v122 & 0x1000000) == 0)
            {
              if ((v122 & 0x10000000) == 0)
              {
                v146 = *((_DWORD *)v110 + 1);
                v147 = *(_QWORD *)(v88 + 288);
                if ((v146 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v147 + 416)
                  || (v148 = *(_QWORD *)(*(_QWORD *)(v147 + 408) + 8 * (v146 & 0x7FFFFFFF))) == 0)
                {
                  v148 = sub_1C4851220(*(_QWORD *)(v88 + 288), v146);
                  v320 = *(_QWORD *)(v147 + 304);
                  v220 = *(_QWORD *)(v147 + 248);
                  *(_QWORD *)v320 = v220;
                  *(_QWORD *)(v320 + 8) = *(_QWORD *)(v220 + 40);
                  *(_OWORD *)(v320 + 16) = *(_OWORD *)(v147 + 288);
                  *(_QWORD *)(v320 + 32) = v147 + 312;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v320);
                  *(_DWORD *)(v320 + 184) = 0;
                  v221 = *(_QWORD *)(v147 + 256);
                  v22 = *(_BYTE *)(v221 + 16) == 0;
                  v222 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v221 + 24)
                                                         + 16 * (*(_DWORD *)(v148 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                            + 34);
                  v224 = !v22 && v222 != 0;
                  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v147 + 304), (llvm::LiveInterval *)v148, v224);
                  llvm::LiveIntervals::computeDeadValues(v147, v148, 0);
                  v147 = *(_QWORD *)(v88 + 288);
                }
                v149 = *((_QWORD *)v110 + 1);
                v150 = *(_QWORD *)(v147 + 288);
                v151 = *(_WORD *)(v149 + 44);
                v152 = v149;
                if ((v151 & 4) != 0)
                {
                  do
                    v152 = *(_QWORD *)v152 & 0xFFFFFFFFFFFFFFF8;
                  while ((*(_WORD *)(v152 + 44) & 4) != 0);
                }
                if ((v151 & 8) != 0)
                {
                  do
                    v149 = *(_QWORD *)(v149 + 8);
                  while ((*(_WORD *)(v149 + 44) & 8) != 0);
                }
                v153 = *(_QWORD *)(v149 + 8);
                if (v152 != v153)
                {
                  while (1)
                  {
                    v154 = **(unsigned __int16 **)(v152 + 16);
                    v249 = v154 > 0x17;
                    v155 = (1 << v154) & 0x83E000;
                    if (v249 || v155 == 0)
                      break;
                    v152 = *(_QWORD *)(v152 + 8);
                    if (v152 == v153)
                    {
                      v152 = v153;
                      break;
                    }
                  }
                }
                v157 = *(_QWORD *)(v150 + 368);
                v158 = *(unsigned int *)(v150 + 384);
                if ((_DWORD)v158)
                {
                  LODWORD(v159) = ((v152 >> 4) ^ (v152 >> 9)) & (v158 - 1);
                  v160 = (uint64_t *)(v157 + 16 * v159);
                  v161 = *v160;
                  if (v152 != *v160)
                  {
                    v162 = 1;
                    while (v161 != -4096)
                    {
                      v163 = v159 + v162++;
                      v159 = v163 & (v158 - 1);
                      v161 = *(_QWORD *)(v157 + 16 * v159);
                      if (v152 == v161)
                      {
                        v160 = (uint64_t *)(v157 + 16 * v159);
                        goto LABEL_260;
                      }
                    }
                    goto LABEL_259;
                  }
                }
                else
                {
LABEL_259:
                  v160 = (uint64_t *)(v157 + 16 * v158);
                }
LABEL_260:
                v122 = *(unsigned int *)v110;
                v196 = *(_QWORD *)(v148 + 104);
                if (v196)
                {
                  v197 = v160[1];
                  v198 = v197 & 0xFFFFFFFFFFFFFFF8;
                  v199 = (v197 >> 1) & 3;
                  while (2)
                  {
                    if ((*(_QWORD *)(v196 + 112) & *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v88 + 256) + 232)
                                                              + 8 * ((v122 >> 8) & 0xFFF))) == 0)
                      goto LABEL_276;
                    v200 = *(_DWORD *)(v196 + 8);
                    v201 = *(_QWORD **)v196;
                    if (v200)
                    {
                      v202 = v201[3 * v200 - 2];
                      v203 = *(_DWORD *)(v198 + 24) | v199;
                      v204 = (v202 >> 1) & 3 | *(_DWORD *)((v202 & 0xFFFFFFFFFFFFFFF8) + 24);
                      v205 = *(_QWORD **)v196;
                      v206 = *(unsigned int *)(v196 + 8);
                      if (v203 < v204)
                      {
                        do
                        {
                          v207 = v206 >> 1;
                          v208 = v205[3 * (v206 >> 1) + 1];
                          LODWORD(v208) = (v208 >> 1) & 3 | *(_DWORD *)((v208 & 0xFFFFFFFFFFFFFFF8) + 24);
                          v206 -= (v206 >> 1) + 1;
                          v209 = v203 >= v208;
                          if (v203 >= v208)
                            v210 = v207 + 1;
                          else
                            v210 = 0;
                          v205 += 3 * v210;
                          if (!v209)
                            v206 = v207;
                        }
                        while (v206);
                        goto LABEL_274;
                      }
                    }
                    else
                    {
                      v200 = 0;
                    }
                    v205 = &v201[3 * v200];
LABEL_274:
                    if (v205 != &v201[3 * v200]
                      && ((*v205 >> 1) & 3 | *(_DWORD *)((*v205 & 0xFFFFFFFFFFFFFFF8) + 24)) <= (*(_DWORD *)(v198 + 24) | v199))
                    {
                      goto LABEL_278;
                    }
LABEL_276:
                    v196 = *(_QWORD *)(v196 + 104);
                    if (!v196)
                      break;
                    continue;
                  }
                }
              }
              *(_DWORD *)v110 = v122 | 0x10000000;
            }
LABEL_278:
            v211 = *(_DWORD *)v110;
            if ((*(_DWORD *)v110 & 0x1000000) != 0)
            {
              v211 &= 0xCFFFFFFF;
              *(_DWORD *)v110 = v211;
            }
            v212 = *(_QWORD **)(v88 + 256);
            v213 = v212[1];
            v214 = v212[7];
            v215 = *(unsigned int *)(v213 + 24 * v115 + 4);
            if (*(_WORD *)(v214 + 2 * v215))
            {
              v216 = *(_WORD *)(v214 + 2 * v215) + v115;
              v217 = (unsigned __int16 *)(v212[11] + 2 * *(unsigned int *)(v213 + 24 * v115 + 12));
              v218 = (unsigned __int16 *)(v214 + 2 * v215 + 2);
              while (v123 != *v217)
              {
                v219 = *v218++;
                v216 += v219;
                ++v217;
                if (!v219)
                  goto LABEL_284;
              }
              v115 = v216;
            }
            else
            {
LABEL_284:
              v115 = 0;
            }
            *(_DWORD *)v110 = v211 & 0xFFF000FF;
          }
          llvm::MachineOperand::setReg((uint64_t)v110, v115);
          *(_DWORD *)v110 |= 0x8000000u;
LABEL_288:
          v110 += 32;
          if (v110 == v111)
            break;
          continue;
        }
      }
      v225 = v335;
      for (j = (uint64_t)v313; (_DWORD)v335; v225 = v335)
      {
        v227 = v334[v225 - 1];
        LODWORD(v335) = v225 - 1;
        llvm::MachineInstr::addRegisterKilled(v313, v227, *(_QWORD *)(v88 + 256), 1);
      }
      while ((_DWORD)v332)
      {
        v228 = *((_DWORD *)v331 + v332 - 1);
        LODWORD(v332) = v332 - 1;
        llvm::MachineInstr::addRegisterDead(v313, v228, *(_QWORD *)(v88 + 256), 1);
      }
      while ((_DWORD)v338)
      {
        v229 = v337[v338 - 1];
        LODWORD(v338) = v338 - 1;
        llvm::MachineInstr::addRegisterDefined((uint64_t)v313, v229, *(_QWORD *)(v88 + 256));
      }
      v230 = **((unsigned __int16 **)v313 + 2);
      v231 = v230 == 19 || v230 == 7;
      if (v231 && (*((_WORD *)v313 + 22) & 0xC) == 4)
      {
        v340 = v342;
        v342[0] = v313;
        v341 = 0x200000001;
        v232 = *(_QWORD *)v313 & 0xFFFFFFFFFFFFFFF8;
        v316 = *((_QWORD *)v313 + 3);
        if (v316 + 48 == v232)
        {
          v236 = v342;
          v233 = 1;
        }
        else
        {
          v233 = 1;
          do
          {
            if ((*(_WORD *)(v232 + 44) & 8) == 0)
              break;
            v234 = **(unsigned __int16 **)(v232 + 16);
            if (v234 != 19 && v234 != 7)
              goto LABEL_383;
            if (v233 >= HIDWORD(v341))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v340, (uint64_t)v342, v233 + 1, 8);
              LODWORD(v233) = v341;
            }
            v340[v233] = v232;
            v233 = (v341 + 1);
            LODWORD(v341) = v341 + 1;
            v232 = *(_QWORD *)v232 & 0xFFFFFFFFFFFFFFF8;
          }
          while (v316 + 48 != v232);
          v236 = v340;
        }
        v237 = v233;
        v318 = v236[v233 - 1];
        while ((int)v233 >= 2)
        {
          v238 = v233;
          v321 = v233;
          v239 = v233;
          do
          {
            v240 = v238--;
            v241 = v340;
            v242 = v340[v238];
            v243 = (int)v239;
            if (v237 < (int)v239)
              v243 = v237;
            if (v243)
            {
              v244 = (_QWORD *)(*(_QWORD *)(v322 + 256) + 8);
              v245 = 8 * v243;
              v246 = (char *)v340;
              while (1)
              {
                if (*(_QWORD *)v246 != v242)
                {
                  v247 = *(_DWORD *)(*(_QWORD *)(v242 + 32) + 4);
                  v248 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v246 + 32) + 36);
                  if (v247 == v248)
                    break;
                  v249 = v247 - 1 > 0x3FFFFFFE || v248 - 1 > 0x3FFFFFFE;
                  if (!v249 && llvm::MCRegisterInfo::regsOverlap(v244, v247, v248))
                    break;
                }
                v246 += 8;
                v245 -= 8;
                if (!v245)
                  goto LABEL_348;
              }
            }
            else
            {
LABEL_348:
              v250 = v239 - 1;
              if ((_DWORD)v239 != v240)
              {
                v241[v238] = v241[v250];
                v241[v250] = v242;
              }
              v239 = (v239 - 1);
            }
          }
          while (v238);
          v233 = v239;
          v88 = v322;
          if (v321 == (_DWORD)v239)
          {
            v251 = ****(_QWORD ****)(v322 + 248);
            v323 = "register rewriting failed: cycle in copy bundle";
            v324 = 259;
            v326 = 0;
            v327 = 0;
            v325 = &off_1E814E960;
            v328 = 0;
            v329 = &v323;
            v330 = 0;
            llvm::LLVMContext::diagnose(v251, (const llvm::DiagnosticInfo *)&v325);
            break;
          }
        }
        if ((_DWORD)v341)
        {
          v252 = (char *)v340;
          v253 = (char *)&v340[v341];
          v254 = v318;
          do
          {
            v256 = *((_QWORD *)v253 - 1);
            v253 -= 8;
            v255 = v256;
            if (v256 == v254)
            {
              v262 = *(_WORD *)(v254 + 44);
              if ((v262 & 8) != 0)
              {
                *(_WORD *)(v254 + 44) = v262 & 0xFFF7;
                v254 = *(_QWORD *)(v254 + 8);
                *(_WORD *)(v254 + 44) &= ~4u;
              }
            }
            else
            {
              llvm::MachineBasicBlock::remove_instr(*(llvm::MachineBasicBlock **)(v255 + 24), (llvm::MachineInstr *)v255);
              v257 = *(_QWORD *)(v316 + 40);
              *(_QWORD *)(v255 + 24) = v257;
              v258 = *(_QWORD *)(v257 + 32);
              v259 = *(unsigned int *)(v255 + 40);
              if ((_DWORD)v259)
              {
                v265 = *(_QWORD *)(v255 + 32);
                v266 = *(_QWORD *)(v258 + 40);
                v267 = 32 * v259;
                do
                {
                  if (!*(_BYTE *)v265)
                  {
                    v268 = *(unsigned int *)(v265 + 4);
                    if ((int)v268 >= 0)
                      v269 = (uint64_t *)(*(_QWORD *)(v266 + 272) + 8 * v268);
                    else
                      v269 = (uint64_t *)(*(_QWORD *)(v266 + 24) + 16 * (v268 & 0x7FFFFFFF) + 8);
                    v270 = *v269;
                    if (*v269)
                    {
                      v271 = *(_QWORD *)(v270 + 16);
                      *(_QWORD *)(v270 + 16) = v265;
                      *(_QWORD *)(v265 + 16) = v271;
                      if ((*(_BYTE *)(v265 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v265 + 24) = v270;
                      }
                      else
                      {
                        *(_QWORD *)(v265 + 24) = 0;
                        v269 = (uint64_t *)(v271 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v265 + 16) = v265;
                      *(_QWORD *)(v265 + 24) = 0;
                    }
                    *v269 = v265;
                  }
                  v265 += 32;
                  v267 -= 32;
                }
                while (v267);
              }
              v260 = *(_QWORD *)(v258 + 728);
              if (v260)
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v260 + 24))(v260, v255);
              v261 = *(_QWORD *)v254 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v255 = v261 | *(_QWORD *)v255 & 7;
              *(_QWORD *)(v255 + 8) = v254;
              *(_QWORD *)(v261 + 8) = v255;
              *(_QWORD *)v254 = *(_QWORD *)v254 & 7 | v255;
            }
            v263 = *(_QWORD *)(v88 + 280);
            if (v263)
              v264 = v255 == v318;
            else
              v264 = 1;
            if (!v264)
              sub_1C4850BC8(v263, v255, 0);
          }
          while (v253 != v252);
        }
LABEL_383:
        if (v340 != v342)
          free(v340);
        j = (uint64_t)v313;
        v230 = **((unsigned __int16 **)v313 + 2);
        v92 = v309;
      }
      if (v230 == 19)
      {
        v272 = *(int **)(j + 32);
        v273 = v272[1];
        if (v273 == v272[9])
        {
          v274 = *v272;
          v106 = v272[8];
          if (((v106 ^ v274) & 0xFFF00) == 0)
          {
            LODWORD(v325) = v273;
            if ((v273 & 0x80000000) == 0)
              break;
          }
        }
      }
LABEL_389:
      v93 = v311;
      if (v311 == v310)
        goto LABEL_390;
    }
    v94 = *(_DWORD *)(v88 + 328);
    if (v94)
    {
      v95 = *(_QWORD *)(v88 + 312);
      v96 = v94 - 1;
      v97 = v96 & (37 * v273);
      v98 = (_DWORD *)(v95 + 4 * v97);
      v99 = *v98;
      if (v273 == *v98)
      {
LABEL_143:
        if ((v106 & 0x10000000) != 0 || *(_DWORD *)(j + 40) >= 3u)
        {
          *(_QWORD *)(j + 16) = *(_QWORD *)(*(_QWORD *)(v88 + 264) + 8) + 336;
        }
        else
        {
          v107 = *(int32x2_t **)(v88 + 280);
          if (v107)
            llvm::SlotIndexes::removeSingleMachineInstrFromMaps(v107, (llvm::MachineInstr *)j);
          v108 = *(_QWORD *)(j + 24);
          sub_1C512C844(j);
          sub_1C512C89C(v108 + 40, j);
        }
        goto LABEL_389;
      }
      v100 = 0;
      v101 = 1;
      while (v99 != -1)
      {
        if (v100)
          v102 = 0;
        else
          v102 = v99 == -2;
        if (v102)
          v100 = v98;
        v103 = v97 + v101++;
        v97 = v103 & v96;
        v98 = (_DWORD *)(v95 + 4 * v97);
        v99 = *v98;
        if (v273 == *v98)
          goto LABEL_143;
      }
      if (v100)
        v104 = v100;
      else
        v104 = v98;
    }
    else
    {
      v104 = 0;
    }
    v105 = sub_1C4978C80(v308, (uint64_t)&v325, (int *)&v325, v104);
    *v105 = (_DWORD)v325;
    v106 = *(_DWORD *)(*(_QWORD *)(j + 32) + 32);
    goto LABEL_143;
  }
LABEL_391:
  if (*(_QWORD *)(v88 + 288))
  {
    v275 = *(_QWORD *)(v322 + 312);
    v276 = *(unsigned int *)(v322 + 328);
    v277 = (unsigned int *)(v275 + 4 * v276);
    if (*(_DWORD *)(v322 + 320))
    {
      if ((_DWORD)v276)
      {
        v278 = 4 * v276;
        v279 = *(unsigned int **)(v322 + 312);
        while (*v279 >= 0xFFFFFFFE)
        {
          ++v279;
          v278 -= 4;
          if (!v278)
            goto LABEL_397;
        }
      }
      else
      {
        v279 = *(unsigned int **)(v322 + 312);
      }
    }
    else
    {
LABEL_397:
      v279 = (unsigned int *)(v275 + 4 * v276);
    }
    v280 = (unsigned int *)(v275 + 4 * v276);
    while (v279 != v280)
    {
      v281 = *v279;
      v282 = *(_QWORD *)(v322 + 256);
      if (v282)
        v283 = (_QWORD *)(v282 + 8);
      else
        v283 = 0;
      v284 = *(unsigned int *)(*v283 + 24 * v281 + 16);
      v285 = (_WORD *)(v283[6] + ((v284 >> 3) & 0x1FFFFFFE));
      v287 = *v285;
      v286 = v285 + 1;
      v288 = v287 + (v284 & 0xF) * v281;
      do
      {
        v289 = *(_QWORD *)(v322 + 288);
        v290 = v288;
        v291 = *(_QWORD *)(v289 + 680);
        v292 = *(_QWORD *)(v291 + 8 * v290);
        if (v292)
        {
          v293 = *(_QWORD *)(v292 + 96);
          *(_QWORD *)(v292 + 96) = 0;
          if (v293)
          {
            sub_1C47655E8(v293, *(_QWORD **)(v293 + 8));
            MEMORY[0x1CAA32FC0](v293, 0x1020C4062D53EE8);
          }
          v294 = *(void **)(v292 + 64);
          if (v294 != (void *)(v292 + 80))
            free(v294);
          if (*(_QWORD *)v292 != v292 + 16)
            free(*(void **)v292);
          MEMORY[0x1CAA32FC0](v292, 0x10A0C40E42201FCLL);
          v291 = *(_QWORD *)(v289 + 680);
        }
        *(_QWORD *)(v291 + 8 * v290) = 0;
        v295 = *v286++;
        v288 = v295 + v290;
      }
      while (v295);
      v296 = v279 + 1;
      while (v296 != v277)
      {
        v297 = *v296++;
        if (v297 <= 0xFFFFFFFD)
        {
          v279 = v296 - 1;
          goto LABEL_418;
        }
      }
      v279 = v277;
LABEL_418:
      ;
    }
  }
  if (*(_QWORD *)(v322 + 320))
  {
    v304 = (void **)(v322 + 312);
    v305 = *(unsigned int *)(v322 + 328);
    if (v305 <= 4 * *(_DWORD *)(v322 + 320) || v305 < 0x41)
    {
      if ((_DWORD)v305)
        memset(*v304, 255, 4 * v305);
      *(_QWORD *)(v322 + 320) = 0;
    }
    else
    {
      sub_1C4A068AC(v304);
    }
  }
  if (v334 != (_DWORD *)v336)
    free(v334);
  if (v337 != (_DWORD *)v339)
    free(v337);
  if (v331 != v333)
    free(v331);
  v298 = *(_QWORD *)(v322 + 304);
  if (v298 && *(_BYTE *)(v322 + 336))
  {
    sub_1C50FAA64(v298, *(_QWORD **)(v322 + 296));
    v299 = *(_QWORD *)(v322 + 296);
    *(_DWORD *)(v299 + 288) = 0;
    llvm::VirtRegMap::grow(v299);
    v300 = *(_QWORD *)(v322 + 272);
    *(_DWORD *)(v300 + 32) = 0;
    v301 = *(_QWORD *)(v300 + 456);
    v302 = *(_QWORD *)(v300 + 464);
    while (v301 != v302)
    {
      *(_DWORD *)(v301 + 4) = 0;
      v301 += 8;
    }
  }
  return 1;
}

void sub_1C52DB3F4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  _OWORD *v4;
  void *v5;
  int v6;
  unsigned int v7;
  void *__src;
  uint64_t v9;
  _OWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 336))
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)a2 = a2 + 16;
    *(_QWORD *)(a2 + 8) = 0x600000000;
    sub_1C4765AA4((char *)a2, 1uLL, 0);
    *(_DWORD *)(a2 + 64) = 11;
    return;
  }
  v11 = 0;
  memset(v10, 0, sizeof(v10));
  __src = v10;
  v9 = 0x600000000;
  sub_1C4765AA4((char *)&__src, 1uLL, 0);
  v3 = 11;
  LODWORD(v11) = 11;
  v4 = __src;
  *(_QWORD *)__src |= 8uLL;
  v5 = (void *)(a2 + 16);
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  v6 = v9;
  if ((_DWORD)v9 && &__src != (void **)a2)
  {
    if (v9 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v9, 8);
      v7 = v9;
      v4 = __src;
      if (!(_DWORD)v9)
      {
LABEL_10:
        *(_DWORD *)(a2 + 8) = v6;
        v3 = v11;
        goto LABEL_11;
      }
      v5 = *(void **)a2;
    }
    else
    {
      v7 = v9;
    }
    memcpy(v5, v4, 8 * v7);
    v4 = __src;
    goto LABEL_10;
  }
LABEL_11:
  *(_DWORD *)(a2 + 64) = v3;
  if (v4 != v10)
    free(v4);
}

unsigned int *sub_1C52DB56C(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_DWORD **)result;
      v7 = 40 * v2;
      do
      {
        *v6 = -1;
        v6 += 10;
        v7 -= 40;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(40 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 40 * v10;
        do
        {
          *result = -1;
          result += 10;
          v11 -= 40;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

uint64_t sub_1C52DB674(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Prepare WebAssembly exceptions";
  *(_QWORD *)(v2 + 8) = 30;
  *(_QWORD *)(v2 + 16) = "wasmehprepare";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2F98;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C52DB8AC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *llvm::calculateWasmEHInfo(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v2 = result + 9;
  v3 = (_QWORD *)result[10];
  if (v3 != result + 9)
  {
    do
    {
      if (v3)
        v5 = (uint64_t)(v3 - 3);
      else
        v5 = 0;
      v6 = *(_QWORD *)(v5 + 48);
      v7 = v6 - 24;
      if (!v6)
        v7 = 0;
      v8 = *(unsigned __int8 *)(v7 + 16);
      v9 = *(_QWORD *)(v5 + 48);
      if (v8 == 83)
      {
        v9 = *(_QWORD *)(v5 + 48);
        do
        {
          v9 = *(_QWORD *)(v9 + 8);
          v10 = v9 - 24;
          if (!v9)
            v10 = 0;
        }
        while (*(_BYTE *)(v10 + 16) == 83);
      }
      v11 = *(unsigned __int8 *)(v9 - 8) - 38;
      v12 = v11 > 0x38;
      v13 = (1 << v11) & 0x100060000000001;
      if (!v12 && v13 != 0)
      {
        while (1)
        {
          v15 = v6 - 24;
          if (!v6)
            v15 = 0;
          if (*(_BYTE *)(v15 + 16) != 83)
            break;
          v6 = *(_QWORD *)(v6 + 8);
          if (v6 == v5 + 40)
            goto LABEL_27;
        }
        if (*(_BYTE *)(v6 - 8) == 80)
        {
          v16 = *(_QWORD *)(v6 - 56);
          if ((*(_WORD *)(v16 + 18) & 1) != 0)
          {
            v17 = *(_DWORD *)(v16 + 20);
            v18 = (v17 & 0x40000000) != 0 ? *(_QWORD *)(v16 - 8) : v16 - 32 * (v17 & 0x7FFFFFF);
            v19 = *(_QWORD *)(v18 + 32);
            if (v19)
            {
              for (i = *(_QWORD *)(v19 + 48); i != v19 + 40; i = *(_QWORD *)(i + 8))
              {
                if (i)
                  v21 = i - 24;
                else
                  v21 = 0;
                if (*(_BYTE *)(v21 + 16) != 83)
                {
                  if (*(_BYTE *)(i - 8) == 38)
                  {
                    v22 = *(_DWORD *)(i - 4);
                    if ((v22 & 0x40000000) != 0)
                      v23 = *(_QWORD *)(i - 32);
                    else
                      v23 = i - 24 - 32 * (v22 & 0x7FFFFFF);
                    if ((*(_WORD *)(i - 6) & 1) != 0)
                      v24 = 64;
                    else
                      v24 = 32;
                    v19 = *(_QWORD *)(v23 + v24);
                  }
                  break;
                }
              }
              result = sub_1C621DE24(a2, v5, v19);
            }
          }
        }
      }
LABEL_27:
      v3 = (_QWORD *)v3[1];
    }
    while (v3 != v2);
  }
  return result;
}

double sub_1C52DB8AC()
{
  uint64_t v0;
  double result;

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8F2F98;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E814D8D0;
  result = 0.0;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_QWORD *)(v0 + 128) = 0;
  return result;
}

void sub_1C52DB90C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C52DB930()
{
  return "WebAssembly Exception handling preparation";
}

uint64_t sub_1C52DB940(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v8;
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  v8 = *a2;
  v3 = **a2;
  v4 = llvm::PointerType::get((llvm::PointerType *)(v3 + 1912), 0);
  v5 = *v8 + 1960;
  v6 = *(uint64_t **)(v3 + 1960);
  v9[0] = v3 + 1960;
  v9[1] = v4;
  v9[2] = v5;
  *(_QWORD *)(a1 + 32) = llvm::StructType::get(v6, (uint64_t)v9, 3, 0);
  return 0;
}

uint64_t sub_1C52DBA58(uint64_t a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *Declaration;
  uint64_t v7;
  llvm::Instruction *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  llvm *v26;
  uint64_t i;
  uint64_t v28;
  unsigned int v29;
  BOOL v30;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v55;
  int v56;
  uint64_t v57;
  void **v58;
  int v59;
  uint64_t *v61;
  llvm::UndefValue *inserted;
  llvm::GetElementPtrInst *v63;
  uint64_t *v64;
  llvm::GetElementPtrInst *v65;
  uint64_t *v66;
  llvm::GetElementPtrInst *v67;
  uint64_t *v68;
  uint64_t **v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t ***v73;
  uint64_t ***v74;
  uint64_t **v75;
  uint64_t *j;
  uint64_t *v77;
  uint64_t ***v78;
  uint64_t v79;
  uint64_t **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD v84[4];
  __int16 v85;
  void *v86;
  uint64_t v87;
  _BYTE v88[128];
  void *v89;
  uint64_t v90;
  _BYTE v91[32];
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void **v95;
  void **v96;
  uint64_t v97;
  int v98;
  __int16 v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  void *__src;
  uint64_t v106;
  _QWORD v107[6];
  uint64_t v108;
  void **v109;
  _QWORD *v110;
  uint64_t v111;
  int v112;
  __int16 v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  void *v117;
  _QWORD v118[3];

  v118[1] = *MEMORY[0x1E0C80C00];
  v4 = a2[5];
  v5 = **a2;
  v89 = v91;
  v90 = 0x200000000;
  v94 = v5;
  v95 = &v103;
  v96 = &v104;
  v97 = 0;
  v98 = 0;
  v99 = 512;
  v100 = 7;
  v92 = 0;
  v93 = 0;
  v101 = 0;
  v102 = 0;
  v103 = &unk_1E8167888;
  v104 = &unk_1E8167A08;
  Declaration = (_QWORD *)llvm::Intrinsic::getDeclaration(v4, 11093, 0, 0);
  v81 = a1;
  *(_QWORD *)(a1 + 72) = Declaration;
  v7 = Declaration[1];
  if (v7)
  {
    LODWORD(v8) = 0;
    while (1)
    {
      v9 = *(_QWORD *)(v7 + 24);
      v10 = *(_QWORD *)(v9 + 40);
      if (*(uint64_t ***)(v10 + 56) == a2)
        break;
LABEL_4:
      v7 = *(_QWORD *)(v7 + 8);
      if (!v7)
        goto LABEL_84;
    }
    v11 = *(_QWORD *)(v10 + 40);
    if (v11 == v10 + 40)
    {
LABEL_77:
      v13 = 0;
      v18 = 0;
      __src = v107;
      HIDWORD(v106) = 4;
      goto LABEL_21;
    }
    v8 = (llvm::Instruction *)(v11 - 24);
    if (v11)
      v12 = v11 - 24;
    else
      v12 = 0;
    if (*(_BYTE *)(v12 + 16) == 30)
    {
      if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 3)
        v13 = 2;
      else
        v13 = 1;
LABEL_14:
      __src = v107;
      v106 = 0x400000000;
    }
    else
    {
      v13 = 0;
      switch(*(_BYTE *)(v12 + 16))
      {
        case 0x1D:
        case 0x22:
        case 0x23:
          goto LABEL_14;
        case 0x1E:
LABEL_143:
          __break(1u);
          goto LABEL_144;
        case 0x1F:
          v13 = (*(_DWORD *)(v12 + 20) >> 1) & 0x3FFFFFF;
          break;
        case 0x20:
        case 0x26:
          v13 = (*(_DWORD *)(v12 + 20) & 0x7FFFFFF) - 1;
          break;
        case 0x21:
          v13 = 2;
          goto LABEL_14;
        case 0x24:
          v13 = *(_WORD *)(v12 + 18) & 1;
          goto LABEL_14;
        case 0x25:
          v13 = 1;
          goto LABEL_14;
        case 0x27:
          v13 = *(_DWORD *)(v12 + 80) + 1;
          break;
        default:
          goto LABEL_77;
      }
      __src = v107;
      v106 = 0x400000000;
      if (v13 >= 5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v107, v13, 8);
        v14 = v106;
        v15 = __src;
LABEL_17:
        v16 = 0;
        v17 = &v15[v14];
        do
        {
          v17[v16] = llvm::Instruction::getSuccessor(v8, v16);
          ++v16;
        }
        while (v13 != (_DWORD)v16);
        v18 = v106;
LABEL_21:
        LODWORD(v106) = v18 + v13;
        v19 = v9 + 24;
        if (!v9)
          v19 = 0;
        sub_1C52DC3F0(v10 + 40, *(_QWORD *)(v19 + 8), v10 + 40);
        v92 = v10;
        v93 = v10 + 40;
        Declaration = LLVMBuildUnreachable_0((uint64_t)&v89);
        v20 = __src;
        v21 = v106;
        v86 = v88;
        v87 = 0x800000000;
        if (v106 >= 9)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v106, 8);
          v22 = v87;
          v23 = v86;
        }
        else
        {
          if (!(_DWORD)v106)
          {
            v24 = 0;
LABEL_27:
            LODWORD(v25) = v24 + v21;
            LODWORD(v87) = v25;
            if (!(_DWORD)v25)
            {
LABEL_66:
              if (v86 != v88)
                free(v86);
              Declaration = __src;
              if (__src != v107)
                free(__src);
              LODWORD(v8) = 1;
              goto LABEL_4;
            }
            while (1)
            {
              v26 = (llvm *)*((_QWORD *)v86 + v25 - 1);
              v25 = (v25 - 1);
              LODWORD(v87) = v25;
              for (i = *((_QWORD *)v26 + 1); i; i = *(_QWORD *)(i + 8))
              {
                v28 = *(_QWORD *)(i + 24);
                v29 = *(unsigned __int8 *)(v28 + 16);
                v30 = v28 && v29 >= 0x1C;
                if (v30 && v29 - 29 < 0xB)
                  goto LABEL_55;
              }
              v32 = (_QWORD *)*((_QWORD *)v26 + 5);
              if (v32 == (_QWORD *)((char *)v26 + 40))
              {
LABEL_47:
                v8 = 0;
                v37 = 0;
              }
              else
              {
                v8 = (llvm::Instruction *)(v32 - 3);
                if (v32)
                  v33 = v32 - 3;
                else
                  v33 = 0;
                v34 = *((unsigned __int8 *)v33 + 16);
                v35 = v34 - 29;
                if (v34 != 30)
                {
                  v36 = 0;
                  switch(v35)
                  {
                    case 0:
                    case 5:
                    case 6:
                      goto LABEL_46;
                    case 1:
                      goto LABEL_143;
                    case 2:
                      v36 = (*((_DWORD *)v33 + 5) >> 1) & 0x3FFFFFF;
                      goto LABEL_46;
                    case 3:
                    case 9:
                      v36 = (*((_DWORD *)v33 + 5) & 0x7FFFFFF) - 1;
                      goto LABEL_46;
                    case 4:
                      v36 = 2;
                      goto LABEL_46;
                    case 7:
                      v36 = *((_WORD *)v33 + 9) & 1;
                      goto LABEL_46;
                    case 8:
                      v36 = 1;
                      goto LABEL_46;
                    case 10:
                      v36 = *((_DWORD *)v33 + 20) + 1;
                      goto LABEL_46;
                    default:
                      goto LABEL_47;
                  }
                }
                v36 = (*((_DWORD *)v33 + 5) & 0x7FFFFFF) == 3 ? 2 : 1;
LABEL_46:
                v37 = v36;
              }
              v38 = v37 + (unint64_t)v25;
              if (v38 > HIDWORD(v87))
                break;
              if (v37)
                goto LABEL_51;
LABEL_54:
              LODWORD(v87) = v25 + v37;
              llvm::DeleteDeadBlock(v26, 0, 0);
              LODWORD(v25) = v87;
LABEL_55:
              if (!(_DWORD)v25)
                goto LABEL_66;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v38, 8);
            v25 = v87;
            if (!v37)
              goto LABEL_54;
LABEL_51:
            v39 = 0;
            v40 = (char *)v86 + 8 * v25;
            do
            {
              *(_QWORD *)&v40[8 * v39] = llvm::Instruction::getSuccessor(v8, v39);
              ++v39;
            }
            while (v37 != (_DWORD)v39);
            LODWORD(v25) = v87;
            goto LABEL_54;
          }
          v22 = 0;
          v23 = v88;
        }
        Declaration = memcpy(&v23[8 * v22], v20, 8 * v21);
        v24 = v87;
        goto LABEL_27;
      }
    }
    if (!v13)
    {
      v18 = 0;
      goto LABEL_21;
    }
    v14 = 0;
    v15 = v107;
    goto LABEL_17;
  }
  LODWORD(v8) = 0;
LABEL_84:
  Declaration = v89;
  if (v89 != v91)
LABEL_144:
    free(Declaration);
  v41 = (uint64_t)a2[5];
  v42 = **a2;
  __src = v107;
  v106 = 0x200000000;
  v108 = v42;
  v109 = &v117;
  v110 = v118;
  v111 = 0;
  v112 = 0;
  v113 = 512;
  v114 = 7;
  v107[4] = 0;
  v107[5] = 0;
  v115 = 0;
  v116 = 0;
  v117 = &unk_1E8167888;
  v118[0] = &unk_1E8167A08;
  v89 = v91;
  v90 = 0x1000000000;
  v86 = v88;
  v87 = 0x1000000000;
  v43 = (uint64_t *)(a2 + 9);
  v44 = a2[10];
  if (v44 == v43)
  {
LABEL_115:
    v59 = 0;
    goto LABEL_116;
  }
  do
  {
    if (v44)
      v45 = v44 - 3;
    else
      v45 = 0;
    v46 = v45[6];
    v47 = v46 - 24;
    if (!v46)
      v47 = 0;
    v48 = *(unsigned __int8 *)(v47 + 16);
    v49 = v45[6];
    if (v48 == 83)
    {
      v49 = v45[6];
      do
      {
        v49 = *(_QWORD *)(v49 + 8);
        v50 = v49 - 24;
        if (!v49)
          v50 = 0;
      }
      while (*(_BYTE *)(v50 + 16) == 83);
    }
    v51 = *(unsigned __int8 *)(v49 - 8) - 38;
    v52 = v51 > 0x38;
    v53 = (1 << v51) & 0x100060000000001;
    if (!v52 && v53 != 0)
    {
      while (v48 == 83)
      {
        v46 = *(_QWORD *)(v46 + 8);
        v55 = v46 - 24;
        if (!v46)
          v55 = 0;
        v48 = *(unsigned __int8 *)(v55 + 16);
      }
      v56 = *(unsigned __int8 *)(v46 - 8);
      if (v56 == 79)
      {
        v57 = v87;
        v58 = &v86;
        if (v87 >= (unint64_t)HIDWORD(v87))
        {
          v83 = v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v87 + 1, 8);
          v41 = v83;
          v57 = v87;
        }
      }
      else
      {
        if (v56 != 80)
          goto LABEL_111;
        v57 = v90;
        v58 = &v89;
        if (v90 >= (unint64_t)HIDWORD(v90))
        {
          v82 = v41;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v89, (uint64_t)v91, v90 + 1, 8);
          v41 = v82;
          v57 = v90;
        }
      }
      *((_QWORD *)*v58 + v57) = v45;
      ++*((_DWORD *)v58 + 2);
    }
LABEL_111:
    v44 = (uint64_t *)v44[1];
  }
  while (v44 != v43);
  if (!(v90 | v87))
    goto LABEL_115;
  v61 = (uint64_t *)v41;
  inserted = llvm::Module::getOrInsertGlobal(v41, "__wasm_lpad_context", 0x13uLL, *(llvm::PointerType **)(v81 + 32));
  *(_QWORD *)(v81 + 40) = inserted;
  *((_DWORD *)inserted + 8) = *((_DWORD *)inserted + 8) & 0xFFFFE3FF | 0x400;
  v63 = *(llvm::GetElementPtrInst **)(v81 + 32);
  v64 = *(uint64_t **)(v81 + 40);
  v84[0] = "lpad_index_gep";
  v85 = 259;
  *(_QWORD *)(v81 + 48) = sub_1C6212D88((uint64_t)&__src, v63, v64, 0, 0, (uint64_t)v84);
  v65 = *(llvm::GetElementPtrInst **)(v81 + 32);
  v66 = *(uint64_t **)(v81 + 40);
  v84[0] = "lsda_gep";
  v85 = 259;
  *(_QWORD *)(v81 + 56) = sub_1C6212D88((uint64_t)&__src, v65, v66, 0, 1u, (uint64_t)v84);
  v67 = *(llvm::GetElementPtrInst **)(v81 + 32);
  v68 = *(uint64_t **)(v81 + 40);
  v84[0] = "selector_gep";
  v85 = 259;
  *(_QWORD *)(v81 + 64) = sub_1C6212D88((uint64_t)&__src, v67, v68, 0, 2u, (uint64_t)v84);
  *(_QWORD *)(v81 + 80) = llvm::Intrinsic::getDeclaration(v61, 11060, 0, 0);
  *(_QWORD *)(v81 + 88) = llvm::Intrinsic::getDeclaration(v61, 11062, 0, 0);
  *(_QWORD *)(v81 + 96) = llvm::Intrinsic::getDeclaration(v61, 11059, 0, 0);
  *(_QWORD *)(v81 + 112) = llvm::Intrinsic::getDeclaration(v61, 11058, 0, 0);
  *(_QWORD *)(v81 + 104) = llvm::Intrinsic::getDeclaration(v61, 11052, 0, 0);
  v69 = (uint64_t **)(*(_QWORD *)v108 + 1960);
  v70 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v108 + 1912), 0);
  *(_QWORD *)(v81 + 120) = sub_1C6212CB8((uint64_t)v61, "_Unwind_CallPersonality", 0x17uLL, 0, v69, v70);
  *(_QWORD *)(v81 + 128) = v71;
  if (v71 && !*(_BYTE *)(v71 + 16))
    *(_QWORD *)(v71 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v71 + 112), **(uint64_t ***)v71, -1, 37);
  if ((_DWORD)v90)
  {
    v72 = 0;
    v73 = (uint64_t ***)v89;
    v74 = (uint64_t ***)((char *)v89 + 8 * v90);
    do
    {
      v75 = *v73;
      for (j = (*v73)[6]; ; j = (uint64_t *)j[1])
      {
        v77 = j - 3;
        if (!j)
          v77 = 0;
        if (*((_BYTE *)v77 + 16) != 83)
          break;
      }
      if ((*((_DWORD *)j - 1) & 0x7FFFFFF) == 2
        && llvm::Constant::isNullValue((llvm::Constant *)*(j - 11)))
      {
        sub_1C52DC464((_QWORD *)v81, v75, 0, 0);
      }
      else
      {
        sub_1C52DC464((_QWORD *)v81, v75, 1, v72++);
      }
      ++v73;
    }
    while (v73 != v74);
  }
  if ((_DWORD)v87)
  {
    v78 = (uint64_t ***)v86;
    v79 = 8 * v87;
    v59 = 1;
    do
    {
      v80 = *v78++;
      sub_1C52DC464((_QWORD *)v81, v80, 0, 0);
      v79 -= 8;
    }
    while (v79);
  }
  else
  {
    v59 = 1;
  }
LABEL_116:
  if (v86 != v88)
    free(v86);
  if (v89 != v91)
    free(v89);
  if (__src != v107)
    free(__src);
  return (v8 | v59) & 1;
}

uint64_t sub_1C52DC3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (a2 != a3)
  {
    do
    {
      v5 = *(_QWORD *)(a2 + 8);
      if (a2)
        v6 = a2 - 24;
      else
        v6 = 0;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(a1, (uint64_t ***)v6);
      v7 = *(_QWORD *)(v6 + 24);
      v8 = *(_QWORD **)(v6 + 32);
      *v8 = v7;
      *(_QWORD *)(v7 + 8) = v8;
      *(_QWORD *)(v6 + 24) = 0;
      *(_QWORD *)(v6 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v6);
      a2 = v5;
    }
    while (v5 != a3);
  }
  return a3;
}

void sub_1C52DC464(_QWORD *a1, uint64_t **a2, char a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t **v9;
  uint64_t *i;
  uint64_t *v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  void *v16;
  uint64_t **v17;
  uint64_t *v18;
  const llvm::APInt *v19;
  uint64_t *j;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::ValueAsMetadata *v24;
  llvm::ValueAsMetadata *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  llvm::ConstantInt *v30;
  llvm::ValueHandleBase *v31;
  llvm::Value *v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  void *v39;
  const llvm::APInt *v40;
  uint64_t v41;
  uint64_t **v42;
  llvm::ConstantInt *v43;
  unsigned int v44;
  int v45;
  llvm::ValueHandleBase *v46;
  const llvm::APInt *v47;
  llvm::ConstantInt *v48;
  unsigned int v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  char v54;
  char *v55;
  char *v56;
  _QWORD *v57;
  llvm::Value *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t v68;
  char v69;
  char v70;
  char *v71;
  char *v72;
  _QWORD *v73;
  llvm::Value *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t **v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  char *v89;
  char *v90;
  llvm::Value *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  char *v97;
  char *v98;
  unsigned __int8 **v99;
  int v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  unsigned __int8 *v103;
  char *v104;
  char *v105;
  unsigned __int8 **v106;
  int v107;
  unsigned __int8 *v108;
  unsigned __int8 *v109;
  unsigned __int8 *v110;
  char *v111;
  char *v112;
  unsigned __int8 **v113;
  int v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  unsigned __int8 **v117;
  unsigned __int8 *v118;
  llvm::ConstantInt *v119;
  llvm::ValueHandleBase *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unsigned __int8 **v124;
  unsigned __int8 **v125;
  unsigned __int8 **v126;
  void *v127;
  _BYTE v128[15];
  char v129;
  void *__p;
  void *v131;
  _QWORD *v132;
  unsigned __int8 *v133;
  _QWORD v134[2];
  void *v135;
  uint64_t v136;
  _BYTE v137[32];
  uint64_t *v138;
  uint64_t **v139;
  uint64_t v140;
  void **v141;
  void **v142;
  uint64_t v143;
  int v144;
  __int16 v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  void *v150;
  uint64_t v151[4];
  __int16 v152;
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v8 = **a2;
  v135 = v137;
  v136 = 0x200000000;
  v140 = v8;
  v141 = &v149;
  v142 = &v150;
  v143 = 0;
  v144 = 0;
  v145 = 512;
  v146 = 7;
  v138 = 0;
  v139 = 0;
  v147 = 0;
  v148 = 0;
  v149 = &unk_1E8167888;
  v150 = &unk_1E8167A08;
  v9 = a2 + 5;
  for (i = a2[6]; i != (uint64_t *)v9; i = (uint64_t *)i[1])
  {
    v11 = i - 3;
    if (!i)
      v11 = 0;
    if (*((_BYTE *)v11 + 16) != 83)
    {
      v12 = *((unsigned __int8 *)i - 8) - 38;
      v13 = v12 > 0x38;
      v14 = (1 << v12) & 0x100060000000001;
      if (v13 || v14 == 0)
        v9 = (uint64_t **)i;
      else
        v9 = (uint64_t **)i[1];
      break;
    }
  }
  v16 = 0;
  if (v9)
    v17 = v9 - 3;
  else
    v17 = 0;
  v138 = v17[5];
  v139 = v17 + 3;
  v18 = v17[6];
  v127 = v18;
  if (v18)
  {
    llvm::MetadataTracking::track((uint64_t)&v127, (unsigned __int8 *)v18, 2);
    v16 = v127;
  }
  sub_1C4774EF4((uint64_t)&v135, 0, (uint64_t)v16);
  if (v127)
    llvm::MetadataTracking::untrack((uint64_t)&v127, (unsigned __int8 *)v127);
  for (j = a2[6]; ; j = (uint64_t *)j[1])
  {
    v21 = (uint64_t)(j - 3);
    v22 = j ? (uint64_t)(j - 3) : 0;
    if (*(_BYTE *)(v22 + 16) != 83)
      break;
  }
  v23 = *(j - 2);
  if (v23)
  {
    v24 = 0;
    v25 = 0;
    do
    {
      v26 = *(_QWORD *)(v23 + 24);
      if (v26 && *(_BYTE *)(v26 + 16) == 84)
      {
        v27 = *(_QWORD *)(v26 - 32);
        if (v27 == a1[12])
          v24 = *(llvm::ValueAsMetadata **)(v23 + 24);
        if (v27 == a1[14])
          v25 = *(llvm::ValueAsMetadata **)(v23 + 24);
      }
      v23 = *(_QWORD *)(v23 + 8);
    }
    while (v23);
    if (v24)
    {
      v28 = a1[13];
      if (v28)
        v29 = *(uint64_t ***)(v28 + 24);
      else
        v29 = 0;
      v30 = *(llvm::ConstantInt **)(*(_QWORD *)v140 + 1960);
      *(_DWORD *)v128 = *(_DWORD *)(*(_QWORD *)v140 + 1968) >> 8;
      if (*(_DWORD *)v128 > 0x40u)
      {
        v119 = v30;
        llvm::APInt::initSlowCase((llvm::APInt *)&v127, 0, 0);
        v30 = v119;
      }
      else
      {
        v127 = 0;
      }
      v31 = llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&v127, v19);
      if (*(_DWORD *)v128 >= 0x41u && v127)
      {
        v120 = v31;
        MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
        v31 = v120;
      }
      v151[0] = (uint64_t)v31;
      v127 = "exn";
      LOWORD(v131) = 259;
      v32 = (llvm::Value *)sub_1C4774778((uint64_t *)&v135, v29, v28, v151, 1, (uint64_t)&v127, 0);
      llvm::Value::doRAUW(v24, v32, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v24 + 5) + 40, (uint64_t ***)v24);
      v33 = *((_QWORD *)v24 + 3);
      v34 = (_QWORD *)*((_QWORD *)v24 + 4);
      *v34 = v33;
      *(_QWORD *)(v33 + 8) = v34;
      *((_QWORD *)v24 + 3) = 0;
      *((_QWORD *)v24 + 4) = 0;
      llvm::Value::deleteValue(v24);
      if ((a3 & 1) != 0)
      {
        v35 = 0;
        v36 = *((_QWORD *)v32 + 4);
        if (v36)
          v37 = v36 == *((_QWORD *)v32 + 5) + 40;
        else
          v37 = 1;
        if (v37)
          v38 = 0;
        else
          v38 = v36 - 24;
        v138 = *(uint64_t **)(v38 + 40);
        v139 = (uint64_t **)(v38 + 24);
        v39 = *(void **)(v38 + 48);
        v127 = v39;
        if (v39)
        {
          llvm::MetadataTracking::track((uint64_t)&v127, (unsigned __int8 *)v39, 2);
          v35 = v127;
        }
        sub_1C4774EF4((uint64_t)&v135, 0, (uint64_t)v35);
        if (v127)
          llvm::MetadataTracking::untrack((uint64_t)&v127, (unsigned __int8 *)v127);
        v41 = a1[10];
        if (v41)
          v42 = *(uint64_t ***)(v41 + 24);
        else
          v42 = 0;
        v151[0] = v21;
        v43 = *(llvm::ConstantInt **)(*(_QWORD *)v140 + 1960);
        v44 = *(_DWORD *)(*(_QWORD *)v140 + 1968);
        *(_DWORD *)v128 = v44 >> 8;
        if (v44 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v127, a4, 0);
        }
        else
        {
          if (v44 <= 0xFF)
            v45 = 0;
          else
            v45 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v44);
          v127 = (void *)(v45 & a4);
        }
        v46 = llvm::ConstantInt::get(v43, (llvm::LLVMContext *)&v127, v40);
        if (*(_DWORD *)v128 >= 0x41u && v127)
          MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
        v151[1] = (uint64_t)v46;
        LOWORD(v131) = 257;
        sub_1C4774778((uint64_t *)&v135, v42, v41, v151, 2, (uint64_t)&v127, 0);
        v48 = *(llvm::ConstantInt **)(*(_QWORD *)v140 + 1960);
        v49 = *(_DWORD *)(*(_QWORD *)v140 + 1968);
        *(_DWORD *)v128 = v49 >> 8;
        if (v49 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v127, a4, 0);
        }
        else
        {
          if (v49 <= 0xFF)
            LODWORD(v50) = 0;
          else
            v50 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v49);
          v127 = (void *)(v50 & a4);
        }
        v51 = (uint64_t *)llvm::ConstantInt::get(v48, (llvm::LLVMContext *)&v127, v47);
        if (*(_DWORD *)v128 >= 0x41u && v127)
          MEMORY[0x1CAA32F9C](v127, 0x1000C8000313F17);
        v52 = a1[6];
        llvm::DataLayout::getAlignment(*(_QWORD *)(v138[7] + 40) + 272, *v51);
        v54 = v53;
        v55 = (char *)operator new(0x80uLL);
        v56 = v55;
        *((_DWORD *)v55 + 21) = *((_DWORD *)v55 + 21) & 0x38000000 | 2;
        *(_QWORD *)v55 = 0;
        *((_QWORD *)v55 + 2) = 0;
        *((_QWORD *)v55 + 1) = 0;
        *((_QWORD *)v55 + 5) = 0;
        *((_QWORD *)v55 + 6) = 0;
        *((_QWORD *)v55 + 4) = 0;
        v57 = v55 + 32;
        *((_QWORD *)v55 + 8) = **(_QWORD **)*v51 + 1576;
        v58 = (llvm::Value *)(v55 + 64);
        *((_QWORD *)v55 + 3) = v55 + 64;
        *((_QWORD *)v55 + 7) = v55 + 64;
        *((_QWORD *)v55 + 9) = 0;
        v55[80] = 61;
        v55[81] = 0;
        *((_WORD *)v55 + 41) = 0;
        *((_DWORD *)v55 + 21) = 2;
        *(_OWORD *)(v55 + 88) = 0u;
        *(_OWORD *)(v55 + 104) = 0u;
        *((_DWORD *)v55 + 30) = 0;
        *(_QWORD *)v55 = v51;
        v61 = v51[1];
        v60 = v51 + 1;
        v59 = v61;
        *((_QWORD *)v55 + 1) = v61;
        if (v61)
          *(_QWORD *)(v59 + 16) = v55 + 8;
        *((_QWORD *)v55 + 2) = v60;
        *v60 = v55;
        if (*((_QWORD *)v55 + 4))
        {
          **((_QWORD **)v55 + 6) = *((_QWORD *)v55 + 5);
          v121 = *((_QWORD *)v55 + 5);
          if (v121)
            *(_QWORD *)(v121 + 16) = *((_QWORD *)v55 + 6);
        }
        *v57 = v52;
        if (v52)
        {
          v64 = *(_QWORD *)(v52 + 8);
          v63 = (_QWORD *)(v52 + 8);
          v62 = v64;
          *((_QWORD *)v55 + 5) = v64;
          if (v64)
            *(_QWORD *)(v62 + 16) = v55 + 40;
          *((_QWORD *)v55 + 6) = v63;
          *v63 = v57;
        }
        *((_WORD *)v55 + 41) = 2 * (v54 & 0x3F);
        v55[124] = 1;
        LOWORD(v131) = 257;
        (*((void (**)(void **, llvm::Value *, void **, uint64_t *, uint64_t **))*v142 + 2))(v142, v58, &v127, v138, v139);
        if (!(_DWORD)v136)
        {
LABEL_76:
          v65 = a1[11];
          if (v65)
            v66 = *(uint64_t ***)(v65 + 24);
          else
            v66 = 0;
          v152 = 257;
          v67 = (uint64_t *)sub_1C4774778((uint64_t *)&v135, v66, v65, 0, 0, (uint64_t)v151, 0);
          v68 = a1[7];
          llvm::DataLayout::getAlignment(*(_QWORD *)(v138[7] + 40) + 272, *v67);
          v70 = v69;
          v71 = (char *)operator new(0x80uLL);
          v72 = v71;
          *((_DWORD *)v71 + 21) = *((_DWORD *)v71 + 21) & 0x38000000 | 2;
          *(_QWORD *)v71 = 0;
          *((_QWORD *)v71 + 2) = 0;
          *((_QWORD *)v71 + 1) = 0;
          *((_QWORD *)v71 + 5) = 0;
          *((_QWORD *)v71 + 6) = 0;
          *((_QWORD *)v71 + 4) = 0;
          v73 = v71 + 32;
          *((_QWORD *)v71 + 8) = **(_QWORD **)*v67 + 1576;
          v74 = (llvm::Value *)(v71 + 64);
          *((_QWORD *)v71 + 3) = v71 + 64;
          *((_QWORD *)v71 + 7) = v71 + 64;
          *((_QWORD *)v71 + 9) = 0;
          v71[80] = 61;
          v71[81] = 0;
          *((_WORD *)v71 + 41) = 0;
          *((_DWORD *)v71 + 21) = 2;
          *(_OWORD *)(v71 + 88) = 0u;
          *(_OWORD *)(v71 + 104) = 0u;
          *((_DWORD *)v71 + 30) = 0;
          *(_QWORD *)v71 = v67;
          v77 = v67[1];
          v76 = v67 + 1;
          v75 = v77;
          *((_QWORD *)v71 + 1) = v77;
          if (v77)
            *(_QWORD *)(v75 + 16) = v71 + 8;
          *((_QWORD *)v71 + 2) = v76;
          *v76 = v71;
          if (*((_QWORD *)v71 + 4))
          {
            **((_QWORD **)v71 + 6) = *((_QWORD *)v71 + 5);
            v122 = *((_QWORD *)v71 + 5);
            if (v122)
              *(_QWORD *)(v122 + 16) = *((_QWORD *)v71 + 6);
          }
          *v73 = v68;
          if (v68)
          {
            v80 = *(_QWORD *)(v68 + 8);
            v79 = (_QWORD *)(v68 + 8);
            v78 = v80;
            *((_QWORD *)v71 + 5) = v80;
            if (v80)
              *(_QWORD *)(v78 + 16) = v71 + 40;
            *((_QWORD *)v71 + 6) = v79;
            *v79 = v73;
          }
          *((_WORD *)v71 + 41) = 2 * (v70 & 0x3F);
          v71[124] = 1;
          LOWORD(v131) = 257;
          (*((void (**)(void **, llvm::Value *, void **, uint64_t *, uint64_t **))*v142 + 2))(v142, v74, &v127, v138, v139);
          if (!(_DWORD)v136)
          {
LABEL_87:
            v81 = (uint64_t **)a1[15];
            v82 = a1[16];
            v127 = (void *)0x74656C636E7566;
            *(_QWORD *)v128 = v134[0];
            *(_QWORD *)&v128[7] = *(_QWORD *)((char *)v134 + 7);
            v129 = 7;
            v133 = (unsigned __int8 *)v32;
            v134[0] = 0;
            *(_QWORD *)((char *)v134 + 7) = 0;
            v83 = operator new(8uLL);
            __p = v83;
            *v83 = v21;
            v131 = v83 + 1;
            v132 = v83 + 1;
            v152 = 257;
            v84 = sub_1C5062DD8((uint64_t *)&v135, v81, v82, (uint64_t *)&v133, 1, (uint64_t)&v127, 1, (uint64_t)v151, 0);
            if (__p)
            {
              v131 = __p;
              operator delete(__p);
            }
            if (v129 < 0)
              operator delete(v127);
            *(_QWORD *)(v84 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v84 + 64), **(uint64_t ***)v84, -1, 37);
            v85 = *(_QWORD *)v140 + 1960;
            v86 = a1[8];
            v151[0] = (uint64_t)"selector";
            v152 = 259;
            llvm::DataLayout::getAlignment(*(_QWORD *)(v138[7] + 40) + 272, v85);
            v88 = v87;
            v89 = (char *)operator new(0x60uLL);
            v90 = v89;
            v91 = (llvm::Value *)(v89 + 32);
            *((_QWORD *)v89 + 2) = 0;
            *((_QWORD *)v89 + 3) = v89 + 32;
            LOWORD(v131) = 257;
            *((_QWORD *)v89 + 4) = v85;
            *((_QWORD *)v89 + 5) = 0;
            *((_WORD *)v89 + 24) = 60;
            *((_DWORD *)v89 + 13) = 1;
            *(_OWORD *)(v89 + 56) = 0u;
            *(_OWORD *)(v89 + 72) = 0u;
            *((_DWORD *)v89 + 22) = 0;
            *(_QWORD *)v89 = v86;
            *((_QWORD *)v89 + 1) = 0;
            if (v86)
            {
              v94 = *(_QWORD *)(v86 + 8);
              v93 = (_QWORD *)(v86 + 8);
              v92 = v94;
              *((_QWORD *)v89 + 1) = v94;
              if (v94)
                *(_QWORD *)(v92 + 16) = v89 + 8;
              *((_QWORD *)v89 + 2) = v93;
              *v93 = v89;
            }
            *((_WORD *)v89 + 25) = 2 * (v88 & 0x3F);
            v89[92] = 1;
            llvm::Value::setName((uint64_t ***)v89 + 4, (uint64_t)&v127);
            (*((void (**)(void **, llvm::Value *, uint64_t *, uint64_t *, uint64_t **))*v142 + 2))(v142, v91, v151, v138, v139);
            if (!(_DWORD)v136)
            {
LABEL_96:
              llvm::Value::doRAUW(v25, v91, (llvm::Value *)1);
              goto LABEL_97;
            }
            v97 = (char *)v135;
            v98 = (char *)v135 + 16 * v136;
            v99 = (unsigned __int8 **)(v90 + 80);
            while (1)
            {
              v100 = *(_DWORD *)v97;
              v101 = (unsigned __int8 *)*((_QWORD *)v97 + 1);
              if (v101)
              {
                if (!v100)
                {
                  v133 = (unsigned __int8 *)*((_QWORD *)v97 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v133, v101, 2);
                  v102 = *v99;
                  goto LABEL_113;
                }
              }
              else
              {
                v102 = *v99;
                if (!*v99 && (v90[55] & 0x20) == 0)
                  goto LABEL_110;
                if (!v100)
                {
                  v133 = 0;
LABEL_113:
                  if (v102)
                    llvm::MetadataTracking::untrack((uint64_t)(v90 + 80), v102);
                  v103 = v133;
                  *v99 = v133;
                  if (v103)
                    llvm::MetadataTracking::retrack((uint64_t)&v133, v103, (uint64_t)(v90 + 80));
                  goto LABEL_110;
                }
              }
              llvm::Value::setMetadata(v91, *(_DWORD *)v97, (llvm::MDNode *)v101);
LABEL_110:
              v97 += 16;
              if (v97 == v98)
                goto LABEL_96;
            }
          }
          v111 = (char *)v135;
          v112 = (char *)v135 + 16 * v136;
          v113 = (unsigned __int8 **)(v72 + 112);
          while (1)
          {
            v114 = *(_DWORD *)v111;
            v115 = (unsigned __int8 *)*((_QWORD *)v111 + 1);
            if (v115)
            {
              if (!v114)
              {
                v133 = (unsigned __int8 *)*((_QWORD *)v111 + 1);
                v124 = v113;
                llvm::MetadataTracking::track((uint64_t)&v133, v115, 2);
                v113 = v124;
                v116 = *v124;
                goto LABEL_143;
              }
            }
            else
            {
              v116 = *v113;
              if (!*v113 && (v72[87] & 0x20) == 0)
                goto LABEL_140;
              if (!v114)
              {
                v133 = 0;
LABEL_143:
                if (v116)
                {
                  v126 = v113;
                  llvm::MetadataTracking::untrack((uint64_t)v113, v116);
                  v113 = v126;
                }
                v118 = v133;
                *v113 = v133;
                if (v118)
                {
                  v125 = v113;
                  llvm::MetadataTracking::retrack((uint64_t)&v133, v118, (uint64_t)v113);
                  v113 = v125;
                }
                goto LABEL_140;
              }
            }
            v123 = v112;
            v117 = v113;
            llvm::Value::setMetadata(v74, *(_DWORD *)v111, (llvm::MDNode *)v115);
            v113 = v117;
            v112 = v123;
LABEL_140:
            v111 += 16;
            if (v111 == v112)
              goto LABEL_87;
          }
        }
        v104 = (char *)v135;
        v105 = (char *)v135 + 16 * v136;
        v106 = (unsigned __int8 **)(v56 + 112);
        while (1)
        {
          v107 = *(_DWORD *)v104;
          v108 = (unsigned __int8 *)*((_QWORD *)v104 + 1);
          if (v108)
          {
            if (!v107)
            {
              v151[0] = *((_QWORD *)v104 + 1);
              llvm::MetadataTracking::track((uint64_t)v151, v108, 2);
              v109 = *v106;
              goto LABEL_128;
            }
          }
          else
          {
            v109 = *v106;
            if (!*v106 && (v56[87] & 0x20) == 0)
              goto LABEL_125;
            if (!v107)
            {
              v151[0] = 0;
LABEL_128:
              if (v109)
                llvm::MetadataTracking::untrack((uint64_t)(v56 + 112), v109);
              v110 = (unsigned __int8 *)v151[0];
              *v106 = (unsigned __int8 *)v151[0];
              if (v110)
                llvm::MetadataTracking::retrack((uint64_t)v151, v110, (uint64_t)(v56 + 112));
              goto LABEL_125;
            }
          }
          llvm::Value::setMetadata(v58, *(_DWORD *)v104, (llvm::MDNode *)v108);
LABEL_125:
          v104 += 16;
          if (v104 == v105)
            goto LABEL_76;
        }
      }
      if (v25)
      {
LABEL_97:
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v25 + 5) + 40, (uint64_t ***)v25);
        v95 = *((_QWORD *)v25 + 3);
        v96 = (_QWORD *)*((_QWORD *)v25 + 4);
        *v96 = v95;
        *(_QWORD *)(v95 + 8) = v96;
        *((_QWORD *)v25 + 3) = 0;
        *((_QWORD *)v25 + 4) = 0;
        llvm::Value::deleteValue(v25);
      }
    }
  }
  if (v135 != v137)
    free(v135);
}

_QWORD *sub_1C52DD004(uint64_t a1, _QWORD *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  _QWORD *v12;

  v3 = *(_DWORD *)(a1 + 16);
  if (!v3)
  {
    v12 = 0;
LABEL_13:
    v6 = sub_1C52DD0BC(a1, (uint64_t)a2, a2, v12);
    *v6 = *a2;
    v6[1] = 0;
    return v6;
  }
  v4 = v3 - 1;
  v5 = (37 * *a2) & (v3 - 1);
  v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * v5);
  v7 = *v6;
  if (*a2 != *v6)
  {
    v8 = 0;
    v9 = 1;
    while (v7 != -4096)
    {
      if (v8)
        v10 = 0;
      else
        v10 = v7 == -8192;
      if (v10)
        v8 = v6;
      v11 = v5 + v9++;
      v5 = v11 & v4;
      v6 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v11 & v4));
      v7 = *v6;
      if (*a2 == *v6)
        return v6;
    }
    if (v8)
      v12 = v8;
    else
      v12 = v6;
    goto LABEL_13;
  }
  return v6;
}

_QWORD *sub_1C52DD0BC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
      goto LABEL_3;
    sub_1C52DD240(a1, v7);
    v17 = *(_DWORD *)(a1 + 16);
    if (v17)
    {
      v18 = v17 - 1;
      v19 = (37 * *a3) & v18;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v19);
      v20 = *a4;
      if (*a3 == *a4)
        goto LABEL_3;
      v13 = 0;
      v21 = 1;
      while (v20 != -4096)
      {
        if (v13)
          v22 = 0;
        else
          v22 = v20 == -8192;
        if (v22)
          v13 = a4;
        v23 = v19 + v21++;
        v19 = v23 & v18;
        a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v19);
        v20 = *a4;
        if (*a3 == *a4)
          goto LABEL_3;
      }
      goto LABEL_29;
    }
LABEL_28:
    a4 = 0;
    goto LABEL_3;
  }
  sub_1C52DD240(a1, 2 * v7);
  v9 = *(_DWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_28;
  v10 = v9 - 1;
  v11 = (37 * *a3) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 == *a4)
    goto LABEL_3;
  v13 = 0;
  v14 = 1;
  while (v12 != -4096)
  {
    if (v13)
      v15 = 0;
    else
      v15 = v12 == -8192;
    if (v15)
      v13 = a4;
    v16 = v11 + v14++;
    v11 = v16 & v10;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
    v12 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
  }
LABEL_29:
  if (v13)
    a4 = v13;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C52DD240(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C52DD2F8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C52DD2F8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & (37 * v6);
      v9 = (_QWORD *)(*(_QWORD *)result + 16 * v8);
      v10 = *v9;
      if (v6 != *v9)
      {
        v11 = 0;
        v12 = 1;
        while (v10 != -4096)
        {
          if (v11)
            v13 = 0;
          else
            v13 = v10 == -8192;
          if (v13)
            v11 = v9;
          v14 = v8 + v12++;
          v8 = v14 & v7;
          v9 = (_QWORD *)(*(_QWORD *)result + 16 * (v14 & v7));
          v10 = *v9;
          if (v6 == *v9)
            goto LABEL_7;
        }
        if (v11)
          v9 = v11;
      }
LABEL_7:
      *v9 = v6;
      v9[1] = a2[1];
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

_QWORD *sub_1C52DD3D4(uint64_t a1, int a2)
{
  unsigned int v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C621E108(a1, v4, &v4[9 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    do
    {
      *result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C52DD498(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Prepare Windows exceptions";
  *(_QWORD *)(v2 + 8) = 26;
  *(_QWORD *)(v2 + 16) = "winehprepare";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F2FA0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C52DE93C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

BOOL sub_1C52DD528(uint64_t a1)
{
  int v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 38)
  {
    v2 = *(_DWORD *)(a1 + 20);
    if ((v2 & 0x40000000) != 0)
      v3 = *(_QWORD *)(a1 - 8);
    else
      v3 = a1 - 32 * (v2 & 0x7FFFFFF);
    if (*(_BYTE *)(*(_QWORD *)v3 + 16) == 20)
      return (*(_WORD *)(a1 + 18) & 1) == 0;
    return 0;
  }
  if (v1 != 79 || *(_BYTE *)(*(_QWORD *)(a1 - 32) + 16) != 20)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (!v4)
    return 1;
  while (1)
  {
    v5 = *(_QWORD *)(v4 + 24);
    if (v5)
    {
      if (*(_BYTE *)(v5 + 16) == 36)
        break;
    }
    v4 = *(_QWORD *)(v4 + 8);
    if (!v4)
      return 1;
  }
  if ((*(_WORD *)(v5 + 18) & 1) == 0)
    return 1;
  return *(_QWORD *)(v5 - 32 * (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) + 32) == 0;
}

uint64_t sub_1C52DD5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t result;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t m;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  llvm::Value *v28;
  llvm::Value *v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  int v38;
  uint64_t *v39;
  uint64_t j;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t k;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  uint64_t v65;
  llvm::Value *v66;
  unint64_t v67;

  v6 = *(_QWORD *)(a2 + 40);
  if (a2 && *(_BYTE *)(a2 + 16) == 38)
  {
    v7 = *(_DWORD *)(a2 + 20);
    if ((v7 & 0x40000000) != 0)
      v8 = *(_QWORD *)(a2 - 8);
    else
      v8 = a2 - 32 * (v7 & 0x7FFFFFF);
    v24 = 64;
    if ((*(_WORD *)(a2 + 18) & 1) == 0)
      v24 = 32;
    for (i = *(_QWORD *)(*(_QWORD *)(v8 + v24) + 48); ; i = *(_QWORD *)(i + 8))
    {
      v26 = i - 24;
      if (!i)
        v26 = 0;
      if (*(_BYTE *)(v26 + 16) != 83)
        break;
    }
    v27 = *(_QWORD *)(i + 16);
    v28 = llvm::Value::stripPointerCasts(*(llvm::Value **)(i - 32 * (*(_DWORD *)(i - 4) & 0x7FFFFFF) - 24));
    if (*((_BYTE *)v28 + 16))
      v29 = 0;
    else
      v29 = v28;
    LODWORD(v65) = a3;
    BYTE4(v65) = 0;
    v66 = v29;
    v67 = v27 & 0xFFFFFFFFFFFFFFFBLL;
    v30 = sub_1C4DC1E54(a1 + 448, (unint64_t)&v65);
    v31 = *(_QWORD *)(a1 + 448) + 24 * *(unsigned int *)(a1 + 456);
    v32 = *(_OWORD *)v30;
    *(_QWORD *)(v31 + 16) = *(_QWORD *)(v30 + 16);
    *(_OWORD *)v31 = v32;
    v33 = *(unsigned int *)(a1 + 456);
    *(_DWORD *)(a1 + 456) = v33 + 1;
    v65 = a2;
    result = (uint64_t)sub_1C6144C70(a1, &v65);
    *(_DWORD *)(result + 8) = v33;
    while (1)
    {
      v6 = *(_QWORD *)(v6 + 8);
      if (!v6)
        break;
      v34 = *(_QWORD *)(v6 + 24);
      v35 = *(unsigned __int8 *)(v34 + 16);
      if (v34)
        v36 = v35 >= 0x1C;
      else
        v36 = 0;
      if (v36 && v35 - 29 < 0xB)
      {
LABEL_44:
        v38 = *(_DWORD *)(a2 + 20);
        if ((v38 & 0x40000000) != 0)
          v39 = *(uint64_t **)(a2 - 8);
        else
          v39 = (uint64_t *)(a2 - 32 * (v38 & 0x7FFFFFF));
        result = sub_1C52E33C4(*(_QWORD *)(v34 + 40), *v39);
        if (result)
        {
          for (j = *(_QWORD *)(result + 48); j != result + 40; j = *(_QWORD *)(j + 8))
          {
            v41 = j - 24;
            if (j)
              v42 = j - 24;
            else
              v42 = 0;
            if (*(_BYTE *)(v42 + 16) != 83)
              goto LABEL_56;
          }
          v41 = 0;
LABEL_56:
          result = sub_1C52DD5E0(a1, v41, v33);
        }
        while (1)
        {
          v6 = *(_QWORD *)(v6 + 8);
          if (!v6)
            goto LABEL_66;
          v34 = *(_QWORD *)(v6 + 24);
          v43 = *(unsigned __int8 *)(v34 + 16);
          if (v34)
            v44 = v43 >= 0x1C;
          else
            v44 = 0;
          if (v44 && v43 - 29 < 0xB)
            goto LABEL_44;
        }
      }
    }
LABEL_66:
    v46 = *(_QWORD *)(i - 16);
    if (v46)
    {
      while (1)
      {
        v47 = *(_QWORD *)(v46 + 24);
        v48 = *(unsigned __int8 *)(v47 + 16);
        if (!v47 || v48 != 38)
          goto LABEL_80;
        if ((*(_WORD *)(v47 + 18) & 1) == 0)
          break;
        v49 = *(_DWORD *)(v47 + 20);
        v50 = (v49 & 0x40000000) != 0 ? *(_QWORD *)(v47 - 8) : v47 - 32 * (v49 & 0x7FFFFFF);
        v51 = *(_QWORD *)(v50 + 32);
        if (!v51)
          break;
        if ((*(_WORD *)(a2 + 18) & 1) != 0)
        {
          v52 = *(_DWORD *)(a2 + 20);
          v53 = (v52 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v52 & 0x7FFFFFF);
          if (v51 == *(_QWORD *)(v53 + 32))
            break;
        }
LABEL_95:
        v46 = *(_QWORD *)(v46 + 8);
        if (!v46)
          return result;
      }
      result = sub_1C52DD5E0(a1, *(_QWORD *)(v46 + 24), a3);
      v48 = *(unsigned __int8 *)(v47 + 16);
LABEL_80:
      if (v47 && v48 == 79)
      {
        v54 = *(_QWORD *)(v47 + 8);
        if (!v54)
          goto LABEL_94;
        while (1)
        {
          v55 = *(_QWORD *)(v54 + 24);
          if (v55)
          {
            if (*(_BYTE *)(v55 + 16) == 36)
              break;
          }
          v54 = *(_QWORD *)(v54 + 8);
          if (!v54)
            goto LABEL_94;
        }
        if ((*(_WORD *)(v55 + 18) & 1) == 0
          || (v56 = *(_QWORD *)(v55 - 32 * (*(_DWORD *)(v55 + 20) & 0x7FFFFFF) + 32)) == 0
          || (*(_WORD *)(a2 + 18) & 1) != 0
          && ((v57 = *(_DWORD *)(a2 + 20), (v57 & 0x40000000) != 0)
            ? (v58 = *(_QWORD *)(a2 - 8))
            : (v58 = a2 - 32 * (v57 & 0x7FFFFFF)),
              v56 == *(_QWORD *)(v58 + 32)))
        {
LABEL_94:
          result = sub_1C52DD5E0(a1, v47, a3);
        }
      }
      goto LABEL_95;
    }
  }
  else
  {
    result = sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v65);
    if ((result & 1) == 0)
    {
      LODWORD(v65) = a3;
      BYTE4(v65) = 1;
      v66 = 0;
      v67 = v6 & 0xFFFFFFFFFFFFFFFBLL;
      v10 = sub_1C4DC1E54(a1 + 448, (unint64_t)&v65);
      v11 = *(_QWORD *)(a1 + 448) + 24 * *(unsigned int *)(a1 + 456);
      v12 = *(_OWORD *)v10;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v10 + 16);
      *(_OWORD *)v11 = v12;
      v13 = *(unsigned int *)(a1 + 456);
      *(_DWORD *)(a1 + 456) = v13 + 1;
      v65 = a2;
      result = (uint64_t)sub_1C6144C70(a1, &v65);
      *(_DWORD *)(result + 8) = v13;
      v14 = *(_QWORD *)(v6 + 8);
      if (v14)
      {
        while (1)
        {
          v15 = *(_QWORD *)(v14 + 24);
          v16 = *(unsigned __int8 *)(v15 + 16);
          v17 = v15 && v16 >= 0x1C;
          if (v17 && v16 - 29 < 0xB)
            break;
          v14 = *(_QWORD *)(v14 + 8);
          if (!v14)
            goto LABEL_16;
        }
LABEL_97:
        result = sub_1C52E33C4(*(_QWORD *)(v15 + 40), *(_QWORD *)(a2 - 32));
        if (!result)
          goto LABEL_107;
        for (k = *(_QWORD *)(result + 48); k != result + 40; k = *(_QWORD *)(k + 8))
        {
          v60 = k - 24;
          if (k)
            v61 = k - 24;
          else
            v61 = 0;
          if (*(_BYTE *)(v61 + 16) != 83)
            goto LABEL_106;
        }
        v60 = 0;
LABEL_106:
        result = sub_1C52DD5E0(a1, v60, v13);
LABEL_107:
        while (1)
        {
          v14 = *(_QWORD *)(v14 + 8);
          if (!v14)
            break;
          v15 = *(_QWORD *)(v14 + 24);
          v62 = *(unsigned __int8 *)(v15 + 16);
          if (v15)
            v63 = v62 >= 0x1C;
          else
            v63 = 0;
          if (v63 && v62 - 29 < 0xB)
            goto LABEL_97;
        }
      }
LABEL_16:
      for (m = *(_QWORD *)(a2 + 8); m; m = *(_QWORD *)(m + 8))
      {
        v20 = *(unsigned __int8 *)(*(_QWORD *)(m + 24) + 16) - 38;
        v21 = v20 > 0x38;
        v22 = (1 << v20) & 0x100060000000001;
        if (!v21 && v22 != 0)
          llvm::report_fatal_error((llvm *)"Cleanup funclets for the SEH personality cannot contain exceptional actions", (const char *)1);
      }
    }
  }
  return result;
}

uint64_t *sub_1C52DDA40(llvm *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t j;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v29;
  uint64_t v30[3];
  uint64_t v31;
  uint64_t v32;

  llvm::colorEHFunclets(a1, (llvm::Function *)a2, (uint64_t)v30);
  v4 = (_QWORD *)*((_QWORD *)a1 + 10);
  if (v4 != (_QWORD *)((char *)a1 + 72))
  {
    while (1)
    {
      v5 = (uint64_t)(v4 - 3);
      if (!v4)
        v5 = 0;
      v6 = *(_QWORD *)(v5 + 40);
      if (v6 == v5 + 40)
      {
        v7 = 0;
      }
      else
      {
        if (v6)
          v7 = v6 - 24;
        else
          v7 = 0;
        if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB)
          v7 = 0;
      }
      v8 = *(_BYTE *)(v7 + 16) == 33 ? v7 : 0;
      v29 = v8;
      if (v8)
        break;
LABEL_16:
      v4 = (_QWORD *)v4[1];
      if (v4 == (_QWORD *)((char *)a1 + 72))
        return sub_1C4EF1108(v30);
    }
    v32 = v5;
    v9 = sub_1C61912D8(v30, &v32)[1];
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((v9 & 4) != 0)
      v10 = **(_QWORD **)v10;
    for (i = *(_QWORD *)(v10 + 48); ; i = *(_QWORD *)(i + 8))
    {
      v12 = i - 24;
      v13 = i ? i - 24 : 0;
      if (*(_BYTE *)(v13 + 16) != 83)
        break;
    }
    v14 = 0;
    v15 = *(unsigned __int8 *)(i - 8) - 81;
    v16 = __CFADD__(v15, 2);
    if (v15 >= 0xFFFFFFFE)
      v17 = v12;
    else
      v17 = 0;
    if (v16)
    {
      if (*(_BYTE *)(v12 + 16) == 80)
      {
        v18 = *(_QWORD *)(v12 - 32);
        if ((*(_WORD *)(v18 + 18) & 1) != 0)
        {
          v19 = *(_DWORD *)(v18 + 20);
          if ((v19 & 0x40000000) != 0)
            v20 = *(_QWORD *)(v18 - 8);
          else
            v20 = v18 - 32 * (v19 & 0x7FFFFFF);
LABEL_42:
          v14 = *(_QWORD *)(v20 + 32);
          goto LABEL_43;
        }
      }
      else
      {
        while (1)
        {
          v12 = *(_QWORD *)(v12 + 8);
          if (!v12)
            break;
          v21 = *(_QWORD *)(v12 + 24);
          if (v21 && *(_BYTE *)(v21 + 16) == 36)
          {
            if ((*(_WORD *)(v21 + 18) & 1) == 0)
              break;
            v20 = v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF);
            goto LABEL_42;
          }
        }
      }
      v14 = 0;
    }
LABEL_43:
    v22 = *(_QWORD *)(v8 - 64);
    if (v14 == v22
      && (v31 = v17, v32 = 0, sub_1C61252B8((uint64_t *)(a2 + 24), &v31, &v32))
      && v32 != *(_QWORD *)(a2 + 24) + 16 * *(unsigned int *)(a2 + 40)
      && (v23 = *(_DWORD *)(v32 + 8), v23 != -1))
    {
      *((_DWORD *)sub_1C6144C70(a2 + 48, &v29) + 2) = v23;
    }
    else
    {
      for (j = *(_QWORD *)(v22 + 48); j != v22 + 40; j = *(_QWORD *)(j + 8))
      {
        v25 = j - 24;
        if (j)
          v26 = j - 24;
        else
          v26 = 0;
        if (*(_BYTE *)(v26 + 16) != 83)
          goto LABEL_56;
      }
      v25 = 0;
LABEL_56:
      v32 = v25;
      v27 = *((_DWORD *)sub_1C6144C70(a2, &v32) + 2);
      *((_DWORD *)sub_1C6144C70(a2 + 48, &v29) + 2) = v27;
    }
    goto LABEL_16;
  }
  return sub_1C4EF1108(v30);
}

void sub_1C52DDC94(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t m;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t j;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  unsigned int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t i;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t k;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  int v76;
  uint64_t v77[4];
  __int16 v78;
  void *__p[2];
  char v80;
  int v81;
  void *v82;
  uint64_t v83;
  _QWORD v84[3];

  v84[2] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 40);
  if (a2 && *(_BYTE *)(a2 + 16) == 38)
  {
    v82 = v84;
    v83 = 0x200000000;
    v7 = *(_DWORD *)(a2 + 20);
    if ((v7 & 0x40000000) != 0)
    {
      v9 = *(_QWORD *)(a2 - 8);
      v8 = v7 & 0x7FFFFFF;
    }
    else
    {
      v8 = v7 & 0x7FFFFFF;
      v9 = a2 - 32 * v8;
    }
    if ((*(_WORD *)(a2 + 18) & 1) != 0)
      v23 = 2;
    else
      v23 = 1;
    if (v23 != v8)
    {
      v63 = 0;
      v64 = v9 + 32 * v8;
      v65 = v9 + 32 * v23;
      do
      {
        for (i = *(_QWORD *)(*(_QWORD *)v65 + 48); i != *(_QWORD *)v65 + 40; i = *(_QWORD *)(i + 8))
        {
          v67 = i - 24;
          if (i)
            v68 = i - 24;
          else
            v68 = 0;
          if (*(_BYTE *)(v68 + 16) != 83)
            goto LABEL_115;
        }
        v67 = 0;
LABEL_115:
        if (v63 >= HIDWORD(v83))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v82, (uint64_t)v84, v63 + 1, 8);
          v63 = v83;
        }
        *((_QWORD *)v82 + v63) = v67;
        v63 = v83 + 1;
        LODWORD(v83) = v83 + 1;
        v65 += 32;
      }
      while (v65 != v64);
    }
    v24 = *(unsigned int *)(a1 + 104);
    if (v24 >= *(_DWORD *)(a1 + 108))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 96, a1 + 112, v24 + 1, 16);
      LODWORD(v24) = *(_DWORD *)(a1 + 104);
    }
    v25 = a3;
    v26 = (_QWORD *)(*(_QWORD *)(a1 + 96) + 16 * v24);
    *v26 = a3;
    v26[1] = 0;
    v27 = *(unsigned int *)(a1 + 104);
    *(_DWORD *)(a1 + 104) = v27 + 1;
    __p[0] = (void *)a2;
    *((_DWORD *)sub_1C6144C70(a1, (uint64_t *)__p) + 2) = v27;
    v28 = *(_QWORD *)(v6 + 8);
    if (v28)
    {
      while (1)
      {
        v29 = *(_QWORD *)(v28 + 24);
        v30 = *(unsigned __int8 *)(v29 + 16);
        v31 = v29 && v30 >= 0x1C;
        if (v31 && v30 - 29 < 0xB)
          break;
        v28 = *(_QWORD *)(v28 + 8);
        if (!v28)
          goto LABEL_43;
      }
LABEL_84:
      v54 = *(_DWORD *)(a2 + 20);
      if ((v54 & 0x40000000) != 0)
        v55 = *(uint64_t **)(a2 - 8);
      else
        v55 = (uint64_t *)(a2 - 32 * (v54 & 0x7FFFFFF));
      v56 = sub_1C52E33C4(*(_QWORD *)(v29 + 40), *v55);
      if (v56)
      {
        for (j = *(_QWORD *)(v56 + 48); j != v56 + 40; j = *(_QWORD *)(j + 8))
        {
          v58 = j - 24;
          if (j)
            v59 = j - 24;
          else
            v59 = 0;
          if (*(_BYTE *)(v59 + 16) != 83)
            goto LABEL_96;
        }
        v58 = 0;
LABEL_96:
        sub_1C52DDC94(a1, v58, v27);
      }
      while (1)
      {
        v28 = *(_QWORD *)(v28 + 8);
        if (!v28)
          break;
        v29 = *(_QWORD *)(v28 + 24);
        v60 = *(unsigned __int8 *)(v29 + 16);
        if (v29)
          v61 = v60 >= 0x1C;
        else
          v61 = 0;
        if (v61 && v60 - 29 < 0xB)
          goto LABEL_84;
      }
    }
LABEL_43:
    v33 = *(unsigned int *)(a1 + 104);
    if (v33 >= *(_DWORD *)(a1 + 108))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 96, a1 + 112, v33 + 1, 16);
      LODWORD(v33) = *(_DWORD *)(a1 + 104);
    }
    v34 = (_QWORD *)(*(_QWORD *)(a1 + 96) + 16 * v33);
    *v34 = v25;
    v34[1] = 0;
    v35 = *(unsigned int *)(a1 + 104);
    *(_DWORD *)(a1 + 104) = v35 + 1;
    v36 = *(_QWORD *)(*(_QWORD *)(v6 + 56) + 40) + 216;
    v78 = 260;
    v77[0] = v36;
    llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v77);
    v37 = sub_1C5E4EA90(v81);
    if (v80 < 0)
      operator delete(__p[0]);
    if (v37 == 64)
      sub_1C52E3460(a1, v27, v35 - 1, v35, (uint64_t *)v82, v83);
    v76 = *(_DWORD *)(a1 + 184);
    if ((_DWORD)v83)
    {
      v38 = (char *)v82;
      v39 = (char *)v82 + 8 * v83;
      do
      {
        v40 = *(_QWORD **)v38;
        __p[0] = *(void **)v38;
        *((_DWORD *)sub_1C61AC530((uint64_t *)(a1 + 24), __p) + 2) = v35;
        while (1)
        {
          v40 = (_QWORD *)v40[1];
          if (!v40)
            break;
          v41 = v40[3];
          v42 = *(unsigned __int8 *)(v41 + 16);
          if (v41 && v42 == 38)
          {
            if ((*(_WORD *)(v41 + 18) & 1) == 0
              || ((v43 = *(_DWORD *)(v41 + 20), (v43 & 0x40000000) != 0)
                ? (v44 = *(_QWORD *)(v41 - 8))
                : (v44 = v41 - 32 * (v43 & 0x7FFFFFF)),
                  (v45 = *(_QWORD *)(v44 + 32)) == 0
               || (*(_WORD *)(a2 + 18) & 1) != 0
               && ((v46 = *(_DWORD *)(a2 + 20), (v46 & 0x40000000) != 0)
                 ? (v47 = *(_QWORD *)(a2 - 8))
                 : (v47 = a2 - 32 * (v46 & 0x7FFFFFF)),
                   v45 == *(_QWORD *)(v47 + 32))))
            {
              sub_1C52DDC94(a1, v40[3], v35);
              v42 = *(unsigned __int8 *)(v41 + 16);
              goto LABEL_66;
            }
          }
          else
          {
LABEL_66:
            if (v41 && v42 == 79)
            {
              v48 = *(_QWORD *)(v41 + 8);
              if (!v48)
                goto LABEL_80;
              while (1)
              {
                v49 = *(_QWORD *)(v48 + 24);
                if (v49)
                {
                  if (*(_BYTE *)(v49 + 16) == 36)
                    break;
                }
                v48 = *(_QWORD *)(v48 + 8);
                if (!v48)
                  goto LABEL_80;
              }
              if ((*(_WORD *)(v49 + 18) & 1) == 0
                || (v50 = *(_QWORD *)(v49 - 32 * (*(_DWORD *)(v49 + 20) & 0x7FFFFFF) + 32)) == 0
                || (*(_WORD *)(a2 + 18) & 1) != 0
                && ((v51 = *(_DWORD *)(a2 + 20), (v51 & 0x40000000) != 0)
                  ? (v52 = *(_QWORD *)(a2 - 8))
                  : (v52 = a2 - 32 * (v51 & 0x7FFFFFF)),
                    v50 == *(_QWORD *)(v52 + 32)))
              {
LABEL_80:
                sub_1C52DDC94(a1, v41, v35);
              }
            }
          }
        }
        v38 += 8;
      }
      while (v38 != v39);
    }
    v53 = *(_DWORD *)(a1 + 104) - 1;
    if (v37 == 64)
      *(_DWORD *)(*(_QWORD *)(a1 + 176) + ((unint64_t)(v76 - 1) << 6) + 8) = v53;
    else
      sub_1C52E3460(a1, v27, v35 - 1, v53, (uint64_t *)v82, v83);
    if (v82 != v84)
      free(v82);
  }
  else if ((sub_1C6144BDC(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, __p) & 1) == 0)
  {
    v10 = *(unsigned int *)(a1 + 104);
    if (v10 >= *(_DWORD *)(a1 + 108))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 96, a1 + 112, v10 + 1, 16);
      LODWORD(v10) = *(_DWORD *)(a1 + 104);
    }
    v11 = (_QWORD *)(*(_QWORD *)(a1 + 96) + 16 * v10);
    *v11 = a3;
    v11[1] = v6 & 0xFFFFFFFFFFFFFFFBLL;
    v12 = *(unsigned int *)(a1 + 104);
    *(_DWORD *)(a1 + 104) = v12 + 1;
    __p[0] = (void *)a2;
    *((_DWORD *)sub_1C6144C70(a1, (uint64_t *)__p) + 2) = v12;
    v13 = *(_QWORD *)(v6 + 8);
    if (v13)
    {
      while (1)
      {
        v14 = *(_QWORD *)(v13 + 24);
        v15 = *(unsigned __int8 *)(v14 + 16);
        v16 = v14 && v15 >= 0x1C;
        if (v16 && v15 - 29 < 0xB)
          break;
        v13 = *(_QWORD *)(v13 + 8);
        if (!v13)
          goto LABEL_18;
      }
LABEL_123:
      v69 = sub_1C52E33C4(*(_QWORD *)(v14 + 40), *(_QWORD *)(a2 - 32));
      if (!v69)
        goto LABEL_133;
      for (k = *(_QWORD *)(v69 + 48); k != v69 + 40; k = *(_QWORD *)(k + 8))
      {
        v71 = k - 24;
        if (k)
          v72 = k - 24;
        else
          v72 = 0;
        if (*(_BYTE *)(v72 + 16) != 83)
          goto LABEL_132;
      }
      v71 = 0;
LABEL_132:
      sub_1C52DDC94(a1, v71, v12);
LABEL_133:
      while (1)
      {
        v13 = *(_QWORD *)(v13 + 8);
        if (!v13)
          break;
        v14 = *(_QWORD *)(v13 + 24);
        v73 = *(unsigned __int8 *)(v14 + 16);
        if (v14)
          v74 = v73 >= 0x1C;
        else
          v74 = 0;
        if (v74 && v73 - 29 < 0xB)
          goto LABEL_123;
      }
    }
LABEL_18:
    for (m = *(_QWORD *)(a2 + 8); m; m = *(_QWORD *)(m + 8))
    {
      v19 = *(unsigned __int8 *)(*(_QWORD *)(m + 24) + 16) - 38;
      v20 = v19 > 0x38;
      v21 = (1 << v19) & 0x100060000000001;
      if (!v20 && v21 != 0)
        llvm::report_fatal_error((llvm *)"Cleanup funclets for the MSVC++ personality cannot contain exceptional actions", (const char *)1);
    }
  }
}

void llvm::calculateClrEHStateNumbers(llvm *this, const llvm::Function *a2, llvm::WinEHFuncInfo *a3)
{
  llvm *v4;
  char *v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  _QWORD *i;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  char *v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  unsigned int v23;
  uint64_t j;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v30;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t k;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t m;
  uint64_t v51;
  unsigned int v52;
  BOOL v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t n;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _QWORD *v81;
  int v82;
  unint64_t v83;
  void *v84;
  uint64_t v85;
  llvm *v86;
  unint64_t v87;
  unint64_t v88;
  int v89;
  int v90;
  unsigned int v91;
  int v92;
  void *v93;
  uint64_t v94;
  _DWORD v95[8];
  void *v96;
  uint64_t v97;
  _QWORD v98[18];

  v98[16] = *MEMORY[0x1E0C80C00];
  if (!*((_DWORD *)a2 + 2))
  {
    v4 = this;
    v96 = v98;
    v97 = 0x800000000;
    v5 = (char *)this + 72;
    v6 = (char *)*((_QWORD *)this + 10);
    if (v6 == (char *)this + 72)
      goto LABEL_78;
    while (1)
    {
      v7 = v6 - 24;
      if (!v6)
        v7 = 0;
      v8 = v7 + 40;
      for (i = (_QWORD *)*((_QWORD *)v7 + 6); ; i = (_QWORD *)i[1])
      {
        if (i == v8)
          goto LABEL_20;
        v10 = (uint64_t)(i - 3);
        v11 = i ? (uint64_t)(i - 3) : 0;
        if (*(_BYTE *)(v11 + 16) != 83)
          break;
      }
      v12 = *((unsigned __int8 *)i - 8);
      if (v12 == 38)
        break;
      if (v12 == 79)
      {
        v13 = (uint64_t)(i - 7);
        goto LABEL_18;
      }
LABEL_20:
      v6 = (char *)*((_QWORD *)v6 + 1);
      if (v6 == v5)
      {
        v15 = v97;
        if ((_DWORD)v97)
        {
          v86 = v4;
          do
          {
            v16 = (char *)v96 + 16 * v15;
            v17 = *((_QWORD *)v16 - 2);
            v18 = *((_DWORD *)v16 - 2);
            LODWORD(v97) = v15 - 1;
            if (v17 && *(_BYTE *)(v17 + 16) == 79)
            {
              if ((*(_DWORD *)(v17 + 20) & 0x7FFFFFF) == 1)
                v19 = 1;
              else
                v19 = 2;
              v93 = (void *)(*(_QWORD *)(v17 + 40) & 0xFFFFFFFFFFFFFFFBLL);
              v95[0] = -1;
              v95[1] = v19;
              LODWORD(v94) = 0;
              HIDWORD(v94) = v18;
              v20 = sub_1C4DC1E54((uint64_t)a2 + 560, (unint64_t)&v93);
              v21 = *((_QWORD *)a2 + 70) + 24 * *((unsigned int *)a2 + 142);
              v22 = *(_OWORD *)v20;
              *(_QWORD *)(v21 + 16) = *(_QWORD *)(v20 + 16);
              *(_OWORD *)v21 = v22;
              v23 = *((_DWORD *)a2 + 142);
              *((_DWORD *)a2 + 142) = v23 + 1;
              for (j = *(_QWORD *)(v17 + 8); j; j = *(_QWORD *)(j + 8))
              {
                v25 = *(_QWORD *)(j + 24);
                v26 = *(unsigned __int8 *)(v25 + 16);
                if (v25)
                  v27 = v26 >= 0x1C;
                else
                  v27 = 0;
                if (v27)
                {
                  v28 = v26 - 38;
                  v29 = v28 > 0x38;
                  v30 = (1 << v28) & 0x100060000000001;
                  if (!v29 && v30 != 0)
                    sub_1C621E53C((uint64_t)&v96, v25, v23);
                }
              }
              v93 = (void *)v17;
              *((_DWORD *)sub_1C6144C70((uint64_t)a2, (uint64_t *)&v93) + 2) = v23;
            }
            else
            {
              v32 = *(_DWORD *)(v17 + 20);
              if ((v32 & 0x40000000) != 0)
              {
                v34 = *(_QWORD *)(v17 - 8);
                v33 = v32 & 0x7FFFFFF;
              }
              else
              {
                v33 = v32 & 0x7FFFFFF;
                v34 = v17 - 32 * v33;
              }
              v87 = v17;
              v35 = 64;
              if ((*(_WORD *)(v17 + 18) & 1) == 0)
                v35 = 32;
              v93 = v95;
              v94 = 0x400000000;
              sub_1C621EBFC((unsigned int *)&v93, (char *)(v34 + v35), (uint64_t (*)(uint64_t))nullsub_1804, (char *)(v34 + 32 * v33));
              if ((_DWORD)v94)
              {
                v37 = (char *)v93;
                v38 = (char *)v93 + 8 * v94;
                v36 = -1;
                do
                {
                  v40 = *((_QWORD *)v38 - 1);
                  v38 -= 8;
                  v39 = v40;
                  for (k = *(_QWORD *)(v40 + 48); ; k = *(_QWORD *)(k + 8))
                  {
                    v42 = k - 24;
                    v43 = k ? k - 24 : 0;
                    if (*(_BYTE *)(v43 + 16) != 83)
                      break;
                  }
                  v44 = *(_QWORD *)(v42 - 32 * (*(_DWORD *)(k - 4) & 0x7FFFFFF));
                  v45 = (_QWORD *)(v44 + 24);
                  if (*(_DWORD *)(v44 + 32) >= 0x41u)
                    v45 = (_QWORD *)*v45;
                  v46 = (_QWORD *)*v45;
                  v88 = v39 & 0xFFFFFFFFFFFFFFFBLL;
                  v91 = v36;
                  v92 = 0;
                  v89 = (int)v46;
                  v90 = v18;
                  v47 = sub_1C4DC1E54((uint64_t)a2 + 560, (unint64_t)&v88);
                  v48 = *((_QWORD *)a2 + 70) + 24 * *((unsigned int *)a2 + 142);
                  v49 = *(_OWORD *)v47;
                  *(_QWORD *)(v48 + 16) = *(_QWORD *)(v47 + 16);
                  *(_OWORD *)v48 = v49;
                  v36 = *((_DWORD *)a2 + 142);
                  *((_DWORD *)a2 + 142) = v36 + 1;
                  for (m = *(_QWORD *)(k - 16); m; m = *(_QWORD *)(m + 8))
                  {
                    v51 = *(_QWORD *)(m + 24);
                    v52 = *(unsigned __int8 *)(v51 + 16);
                    if (v51)
                      v53 = v52 >= 0x1C;
                    else
                      v53 = 0;
                    if (v53)
                    {
                      v54 = v52 - 38;
                      v29 = v54 > 0x38;
                      v55 = (1 << v54) & 0x100060000000001;
                      if (!v29 && v55 != 0)
                        sub_1C621E53C((uint64_t)&v96, v51, v36);
                    }
                  }
                  v88 = v42;
                  *((_DWORD *)sub_1C6144C70((uint64_t)a2, (uint64_t *)&v88) + 2) = v36;
                }
                while (v38 != v37);
              }
              else
              {
                v36 = -1;
              }
              v88 = v87;
              *((_DWORD *)sub_1C6144C70((uint64_t)a2, (uint64_t *)&v88) + 2) = v36;
              if (v93 != v95)
                free(v93);
              v4 = v86;
            }
            v15 = v97;
          }
          while ((_DWORD)v97);
        }
LABEL_78:
        v57 = *((_DWORD *)a2 + 142);
        if (!v57)
          goto LABEL_142;
        v58 = *((_QWORD *)a2 + 70);
        v59 = v58 + 24 * v57;
        v60 = v59;
LABEL_80:
        v61 = *(_QWORD *)(v60 - 24);
        v60 -= 24;
        for (n = *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFFF8) + 48); ; n = *(_QWORD *)(n + 8))
        {
          v63 = n - 24;
          v64 = n ? n - 24 : 0;
          if (*(_BYTE *)(v64 + 16) != 83)
            break;
        }
        if (*(_BYTE *)(n - 8) == 80)
        {
          if (*(_DWORD *)(v59 - 8) == -1)
          {
            v65 = *(_QWORD *)(n - 56);
            if ((*(_WORD *)(v65 + 18) & 1) != 0)
            {
              v66 = *(_DWORD *)(v65 + 20);
              if ((v66 & 0x40000000) == 0)
                goto LABEL_126;
              v67 = *(_QWORD *)(v65 - 8);
              goto LABEL_127;
            }
            goto LABEL_128;
          }
          goto LABEL_130;
        }
        v68 = *(_QWORD *)(n - 16);
        if (!v68)
          goto LABEL_128;
        while (1)
        {
          v65 = *(_QWORD *)(v68 + 24);
          v69 = *(unsigned __int8 *)(v65 + 16);
          if (v65 && v69 == 36)
          {
            if ((*(_WORD *)(v65 + 18) & 1) == 0)
              goto LABEL_128;
            v66 = *(_DWORD *)(v65 + 20);
LABEL_126:
            v67 = v65 - 32 * (v66 & 0x7FFFFFF);
LABEL_127:
            v70 = *(_QWORD *)(v67 + 32);
            if (v70)
            {
              v76 = *(_QWORD *)(v70 + 48);
LABEL_133:
              v83 = v70 + 40;
              while (v76 != v83)
              {
                v84 = (void *)(v76 - 24);
                if (v76)
                  v85 = v76 - 24;
                else
                  v85 = 0;
                if (*(_BYTE *)(v85 + 16) != 83)
                  goto LABEL_141;
                v76 = *(_QWORD *)(v76 + 8);
              }
              v84 = 0;
LABEL_141:
              v93 = v84;
              v82 = *((_DWORD *)sub_1C6144C70((uint64_t)a2, (uint64_t *)&v93) + 2);
            }
            else
            {
LABEL_128:
              v82 = -1;
            }
            *(_DWORD *)(v59 - 8) = v82;
LABEL_130:
            v59 = v60;
            if (v60 == v58)
            {
LABEL_142:
              sub_1C52DDA40(v4, (uint64_t)a2);
              if (v96 != v98)
                free(v96);
              return;
            }
            goto LABEL_80;
          }
          if (v65 && v69 == 33)
          {
            v70 = *(_QWORD *)(v65 - 64);
          }
          else if (v65 && v69 == 38)
          {
            if ((*(_WORD *)(v65 + 18) & 1) == 0)
              goto LABEL_122;
            v71 = *(_DWORD *)(v65 + 20);
            if ((v71 & 0x40000000) != 0)
              v72 = *(_QWORD *)(v65 - 8);
            else
              v72 = v65 - 32 * (v71 & 0x7FFFFFF);
            v70 = *(_QWORD *)(v72 + 32);
          }
          else
          {
            if (!v65)
              goto LABEL_122;
            if (v69 != 79)
              goto LABEL_122;
            v93 = *(void **)(v68 + 24);
            v73 = sub_1C6144C70((uint64_t)a2, (uint64_t *)&v93);
            v74 = *((_QWORD *)a2 + 70);
            v75 = *(_DWORD *)(v74 + 24 * *((int *)v73 + 2) + 16);
            if (v75 == -1)
              goto LABEL_122;
            v70 = *(_QWORD *)(v74 + 24 * v75) & 0xFFFFFFFFFFFFFFF8;
          }
          if (v70)
          {
            v76 = *(_QWORD *)(v70 + 48);
            v77 = v76;
            if (v76 == v70 + 40)
            {
LABEL_115:
              v78 = 0;
            }
            else
            {
              while (1)
              {
                v78 = v77 - 24;
                v79 = v77 ? v77 - 24 : 0;
                if (*(_BYTE *)(v79 + 16) != 83)
                  break;
                v77 = *(_QWORD *)(v77 + 8);
                if (v77 == v70 + 40)
                  goto LABEL_115;
              }
              if (*(_BYTE *)(v77 - 8) == 38)
              {
                v80 = *(_DWORD *)(v77 - 4);
                if ((v80 & 0x40000000) != 0)
                  v81 = *(_QWORD **)(v77 - 32);
                else
                  v81 = (_QWORD *)(v78 - 32 * (v80 & 0x7FFFFFF));
LABEL_121:
                if (*v81 != v63)
                  goto LABEL_133;
                goto LABEL_122;
              }
            }
            v81 = (_QWORD *)(v78 - 32);
            goto LABEL_121;
          }
LABEL_122:
          v68 = *(_QWORD *)(v68 + 8);
          if (!v68)
            goto LABEL_128;
        }
      }
    }
    v14 = *((_DWORD *)i - 1);
    if ((v14 & 0x40000000) != 0)
      v13 = *(i - 4);
    else
      v13 = v10 - 32 * (v14 & 0x7FFFFFF);
LABEL_18:
    if (*(_BYTE *)(*(_QWORD *)v13 + 16) == 20)
      sub_1C621E53C((uint64_t)&v96, v10, 0xFFFFFFFF);
    goto LABEL_20;
  }
}

uint64_t sub_1C52DE93C()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F2FA0;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E814D970;
  *(_BYTE *)(result + 28) = 0;
  *(_DWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 48) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 80) = 0;
  *(_DWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_QWORD *)(result + 96) = 0;
  return result;
}

void sub_1C52DE9A8(llvm::Pass *a1)
{
  uint64_t *v2;

  *(_QWORD *)a1 = &off_1E814D970;
  v2 = (uint64_t *)((char *)a1 + 48);
  sub_1C621E630((uint64_t)a1 + 72);
  sub_1C4EF1108(v2);
  llvm::Pass::~Pass(a1);
}

void sub_1C52DE9E8(llvm::Pass *a1)
{
  uint64_t *v2;

  *(_QWORD *)a1 = &off_1E814D970;
  v2 = (uint64_t *)((char *)a1 + 48);
  sub_1C621E630((uint64_t)a1 + 72);
  sub_1C4EF1108(v2);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C52DEA3C()
{
  return "Windows exception handling preparation";
}

uint64_t sub_1C52DEA4C()
{
  return 0;
}

void sub_1C52DEA58(uint64_t a1, uint64_t a2)
{
  int v4;
  llvm::Value **v5;
  unsigned int v6;
  llvm::MemorySSAUpdater *v7;
  llvm::Function *v9;
  unsigned __int8 *v10;
  llvm::DomTreeUpdater *v11;
  llvm::MemorySSAUpdater *v12;
  llvm::MemorySSAUpdater *v13;
  llvm::DSOLocalEquivalent **v14;
  const llvm::Twine *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unint64_t v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  char **v24;
  char **v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  llvm::Function *v38;
  _QWORD *v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ii;
  uint64_t v57;
  uint64_t v58;
  llvm::Value *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  uint64_t jj;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  _DWORD *v69;
  llvm::PointerType *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  int v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  llvm::Type *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  char *v90;
  llvm::PointerType *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  int v98;
  int v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  int v110;
  BOOL v111;
  unsigned int v112;
  _QWORD *v113;
  uint64_t v114;
  _DWORD *v115;
  uint64_t v116;
  llvm::PointerType *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  int v124;
  int v125;
  _QWORD *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t Inst;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  char *v149;
  uint64_t v150;
  _QWORD *v151;
  char *v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  _WORD *v156;
  uint64_t v157;
  uint64_t v158;
  llvm::BasicBlock **v159;
  uint64_t v160;
  uint64_t v161;
  llvm::BasicBlock *v162;
  uint64_t v163;
  llvm::BasicBlock ***v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  char **v178;
  char **v179;
  unint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  char *v187;
  char *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  llvm::ValueSymbolTable *v192;
  uint64_t v193;
  llvm::ValueSymbolTable *v194;
  _DWORD *v195;
  llvm::PointerType *v196;
  unsigned int v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  int v204;
  int v205;
  _QWORD *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  llvm::Type *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _DWORD *v215;
  llvm::Value *v216;
  llvm::PointerType *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v222;
  uint64_t v223;
  int v224;
  int v225;
  _QWORD *v226;
  uint64_t v227;
  char *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t mm;
  uint64_t v232;
  unsigned int v233;
  uint64_t v234;
  uint64_t v236;
  unsigned int v237;
  const char **v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  unsigned int v243;
  BOOL v244;
  BOOL v245;
  unsigned int v246;
  BOOL v247;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  llvm::UndefValue *v261;
  uint64_t v262;
  _QWORD *v263;
  _QWORD *v264;
  uint64_t nn;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  int v270;
  uint64_t v271;
  llvm **v272;
  llvm **v273;
  llvm *v274;
  _QWORD *v275;
  _QWORD *i1;
  unsigned __int8 *v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v281;
  llvm::Value *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  llvm *v287;
  _QWORD *v288;
  llvm *v289;
  BOOL v290;
  _QWORD *v291;
  unsigned int v292;
  _QWORD *v293;
  int v294;
  _BOOL4 v295;
  BOOL v296;
  BOOL v297;
  uint64_t v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t i;
  _QWORD *v306;
  uint64_t v307;
  char *v308;
  unint64_t v309;
  _QWORD *v310;
  _QWORD *v311;
  _QWORD *v312;
  char *v313;
  char *v314;
  unint64_t v315;
  unint64_t v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t ****v322;
  uint64_t ***v323;
  int v324;
  int v325;
  uint64_t ***v326;
  int32x2_t ****v327;
  char *v328;
  int32x2_t ****v329;
  llvm::BasicBlock *v330;
  llvm::BasicBlock *v331;
  uint64_t v332;
  BOOL v333;
  llvm::BasicBlock *v334;
  _QWORD *v335;
  unint64_t v336;
  int32x2_t ****v337;
  int32x2_t *v338;
  unint64_t v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  int32x2_t *****v343;
  int32x2_t ****v344;
  int v345;
  int v346;
  llvm::BasicBlock *v347;
  uint64_t v348;
  unint64_t v349;
  unint64_t v350;
  char *v351;
  char *v352;
  char *v353;
  char *v354;
  unint64_t v355;
  unint64_t *v356;
  uint64_t v357;
  int32x2_t *v358;
  unint64_t v359;
  uint64_t v360;
  unsigned int v361;
  uint64_t v362;
  uint64_t *v363;
  uint64_t v364;
  int v365;
  int v366;
  char *v367;
  uint64_t *v368;
  uint64_t v369;
  unint64_t v370;
  _QWORD *v371;
  _QWORD *v372;
  _QWORD *v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  unint64_t v377;
  char *v378;
  char *v379;
  uint64_t v380;
  char *v381;
  _QWORD *v382;
  _QWORD *v383;
  _QWORD *v384;
  unint64_t v385;
  unint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  _QWORD *v389;
  _QWORD *j;
  _BOOL4 v391;
  unint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t k;
  uint64_t ***v397;
  _QWORD *v398;
  llvm::LLVMContext *v399;
  llvm::LLVMContext *v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  unsigned int v406;
  BOOL v407;
  unsigned int v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  unsigned int v413;
  uint64_t v414;
  uint64_t v416;
  int v417;
  _QWORD *v418;
  unsigned int v419;
  BOOL v420;
  uint64_t *v422;
  uint64_t v423;
  uint64_t *v424;
  uint64_t v425;
  uint64_t v426;
  _QWORD *v427;
  uint64_t v428;
  uint64_t v429;
  char *v430;
  uint64_t v431;
  uint64_t m;
  uint64_t v433;
  uint64_t v434;
  uint64_t n;
  uint64_t v436;
  uint64_t v437;
  char *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  int v443;
  unsigned int v444;
  uint64_t Successor;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  int v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  BOOL v456;
  uint64_t v457;
  const char **v458;
  const char *v459;
  int v460;
  int v461;
  const char **v462;
  unint64_t v463;
  const char **v464;
  char *v465;
  const char **v466;
  llvm::BasicBlock *v467;
  const char *v468;
  unint64_t v470;
  uint64_t v471;
  int32x2_t ****v472;
  unint64_t v473;
  unint64_t v474;
  unsigned int v475;
  uint64_t v476;
  uint64_t **v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  llvm::BasicBlock **v482;
  llvm::BasicBlock *v483;
  int v484;
  int v485;
  llvm::BasicBlock *v486;
  char *v487;
  size_t v488;
  size_t v489;
  uint64_t v490;
  _QWORD *v491;
  int v492;
  int v493;
  unsigned int v494;
  _QWORD *v495;
  uint64_t v496;
  _QWORD *v497;
  int v498;
  BOOL v499;
  unsigned int v500;
  _QWORD *v501;
  uint64_t v502;
  int v503;
  unsigned int v504;
  _QWORD *v505;
  uint64_t v506;
  _QWORD *v507;
  int v508;
  BOOL v509;
  unsigned int v510;
  _QWORD *v511;
  llvm::Use *v512;
  unint64_t v513;
  int32x2_t ****v514;
  int32x2_t *v515;
  unint64_t v516;
  uint64_t v517;
  unsigned int v518;
  uint64_t v519;
  int32x2_t *****v520;
  int32x2_t ****v521;
  int v522;
  int v523;
  const char **v524;
  const char **v525;
  const char **v526;
  const char *v527;
  const char *v528;
  unint64_t v529;
  unint64_t *v530;
  const char *v531;
  int32x2_t *v532;
  unint64_t v533;
  uint64_t v534;
  unsigned int v535;
  uint64_t v536;
  const char **v537;
  const char *v538;
  int v539;
  int v540;
  unint64_t v542;
  unint64_t *v543;
  const char *v544;
  int32x2_t *v545;
  unint64_t v546;
  uint64_t v547;
  unsigned int v548;
  uint64_t v549;
  const char **v550;
  const char *v551;
  int v552;
  int v553;
  _BOOL4 v554;
  uint64_t *v555;
  unint64_t v556;
  uint64_t v557;
  llvm::ValueHandleBase *kk;
  _QWORD *v559;
  uint64_t v560;
  _QWORD *v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t *v564;
  uint64_t v565;
  uint64_t v566;
  uint64_t v567;
  _QWORD *v568;
  llvm::Function *v569;
  uint64_t *v570;
  unsigned int v571;
  unsigned int v572;
  char *v573;
  __int128 v574;
  __int128 v575;
  __int128 v576;
  llvm::BasicBlock *v577;
  uint64_t v578;
  unint64_t *v579;
  int32x2_t ****v580;
  _QWORD v581[3];
  _QWORD *v582;
  uint64_t ***v583;
  uint64_t v584;
  void *v585;
  unsigned int v586;
  unsigned int v587;
  _BYTE v588[16];
  void *v589;
  uint64_t v590;
  _QWORD *v591;
  int32x2_t ****v592;
  const char ***v593;
  const char **v594;
  uint64_t v595;
  const char *v596;
  uint64_t v597;
  __int16 v598;
  char v599;
  uint64_t v600;

  v600 = *MEMORY[0x1E0C80C00];
  if ((*(_WORD *)(a2 + 18) & 8) == 0)
    return;
  v4 = *(_DWORD *)(a2 + 20);
  v5 = (v4 & 0x40000000) != 0 ? *(llvm::Value ***)(a2 - 8) : (llvm::Value **)(a2 - 32 * (v4 & 0x7FFFFFF));
  v6 = llvm::classifyEHPersonality(*v5, (const llvm::Value *)a2);
  *(_DWORD *)(a1 + 32) = v6;
  if (v6 > 0xC || ((1 << v6) & 0x1780) == 0)
    return;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40) + 272;
  llvm::removeUnreachableBlocks((llvm *)a2, 0, 0, v7);
  llvm::colorEHFunclets((llvm *)a2, v9, (uint64_t)&v589);
  v570 = (uint64_t *)(a1 + 48);
  sub_1C61A9204((uint64_t *)(a1 + 48), (uint64_t *)&v589);
  sub_1C4EF1108((uint64_t *)&v589);
  v16 = a2 + 72;
  v569 = (llvm::Function *)a2;
  v17 = *(_QWORD *)(a2 + 80);
  v557 = v16;
  v565 = a1;
  if (v17 != v16)
  {
    v18 = a1 + 72;
    do
    {
      if (v17)
        v19 = (void *)(v17 - 24);
      else
        v19 = 0;
      v589 = v19;
      v21 = (void **)(sub_1C61912D8(v570, &v589) + 1);
      v20 = (unint64_t)*v21;
      if ((*v21 & 4) != 0)
      {
        v23 = v20 & 0xFFFFFFFFFFFFFFF8;
        v21 = *(void ***)v23;
        v22 = *(_QWORD *)v23 + 8 * *(unsigned int *)(v23 + 8);
      }
      else
      {
        v22 = (uint64_t)&v21[v20 > 7];
      }
      while (v21 != (void **)v22)
      {
        v589 = *v21;
        v24 = (char **)sub_1C621E764(v18, (uint64_t *)&v589);
        v25 = v24;
        v27 = v24[1];
        v26 = (unint64_t)v24[2];
        if ((unint64_t)v27 >= v26)
        {
          v29 = *v24;
          v30 = (v27 - *v24) >> 3;
          v31 = v30 + 1;
          if ((unint64_t)(v30 + 1) >> 61)
LABEL_849:
            abort();
          v32 = v26 - (_QWORD)v29;
          if (v32 >> 2 > v31)
            v31 = v32 >> 2;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v33 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v33 = v31;
          if (v33)
          {
            if (v33 >> 61)
LABEL_850:
              sub_1C4764EE4();
            v34 = (char *)operator new(8 * v33);
          }
          else
          {
            v34 = 0;
          }
          v35 = &v34[8 * v30];
          *(_QWORD *)v35 = v19;
          v28 = v35 + 8;
          if (v27 != v29)
          {
            do
            {
              v36 = *((_QWORD *)v27 - 1);
              v27 -= 8;
              *((_QWORD *)v35 - 1) = v36;
              v35 -= 8;
            }
            while (v27 != v29);
            v27 = *v25;
          }
          *v25 = v35;
          v25[1] = v28;
          v25[2] = &v34[8 * v33];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *(_QWORD *)v27 = v19;
          v28 = v27 + 8;
        }
        v25[1] = v28;
        ++v21;
      }
      v17 = *(_QWORD *)(v17 + 8);
      a1 = v565;
    }
    while (v17 != v557);
  }
  v37 = *(uint64_t **)(a1 + 96);
  v555 = *(uint64_t **)(a1 + 104);
  v38 = v569;
  if (v37 == v555)
    goto LABEL_40;
  do
  {
    v301 = *v37;
    v568 = v37 + 1;
    v582 = 0;
    v583 = (uint64_t ***)v301;
    v302 = *((_QWORD *)v38 + 10);
    if (v302)
      v303 = v302 - 24;
    else
      v303 = 0;
    if (v301 == v303)
    {
      v306 = llvm::ConstantTokenNone::get(**(llvm::ConstantTokenNone ***)v38, (llvm::LLVMContext *)v10);
    }
    else
    {
      v304 = v301 + 40;
      for (i = *(_QWORD *)(v301 + 48); i != v304; i = *(_QWORD *)(i + 8))
      {
        v306 = (_QWORD *)(i - 24);
        if (i)
          v307 = i - 24;
        else
          v307 = 0;
        if (*(_BYTE *)(v307 + 16) != 83)
          goto LABEL_442;
      }
      v306 = 0;
    }
LABEL_442:
    v582 = v306;
    LODWORD(v596) = 128;
    v308 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
    v594 = (const char **)v308;
    v595 = 0;
    if ((_DWORD)v596)
    {
      v309 = (unint64_t)v596 << 6;
      v310 = v308 + 16;
      do
      {
        *v310 = 0;
        v310[1] = -4096;
        *(v310 - 2) = &unk_1E814DA10;
        *(v310 - 1) = 2;
        v310[2] = 0;
        v310 += 8;
        v309 -= 64;
      }
      while (v309);
    }
    LOBYTE(v597) = 0;
    v599 = 0;
    v564 = v37;
    v311 = (_QWORD *)v37[1];
    v312 = (_QWORD *)v37[2];
    if (v311 == v312)
    {
      v465 = 0;
      v38 = v569;
      v368 = v564;
      goto LABEL_807;
    }
    v313 = 0;
    v314 = 0;
    v573 = 0;
    do
    {
      *(_QWORD *)&v574 = 0;
      *(_QWORD *)&v574 = *v311;
      v315 = sub_1C61912D8(v570, &v574)[1];
      if (v315 < 8)
        goto LABEL_455;
      v316 = v315 & 0xFFFFFFFFFFFFFFF8;
      if ((v315 & 4) != 0 && v316)
      {
        v317 = *(_DWORD *)(v316 + 8);
        if (!v317)
          goto LABEL_455;
      }
      else
      {
        if ((v315 & 4) == 0)
          goto LABEL_511;
        v317 = *(_DWORD *)(v316 + 8);
      }
      if (v317 == 1)
        goto LABEL_511;
LABEL_455:
      if ((*((_BYTE *)v583 + 23) & 0x10) != 0)
      {
        v318 = ***v583;
        v319 = *(_QWORD *)(v318 + 152);
        v320 = *(unsigned int *)(v318 + 168);
        if ((_DWORD)v320)
        {
          LODWORD(v321) = (v320 - 1) & ((v583 >> 4) ^ (v583 >> 9));
          v322 = (uint64_t ****)(v319 + 16 * v321);
          v323 = *v322;
          if (*v322 == v583)
          {
LABEL_463:
            v326 = v322[1];
            v329 = (int32x2_t ****)*v326;
            v328 = (char *)(v326 + 2);
            v327 = v329;
            goto LABEL_464;
          }
          v324 = 1;
          while (v323 != (uint64_t ***)-4096)
          {
            v325 = v321 + v324++;
            v321 = v325 & (v320 - 1);
            v323 = *(uint64_t ****)(v319 + 16 * v321);
            if (v323 == v583)
            {
              v322 = (uint64_t ****)(v319 + 16 * v321);
              goto LABEL_463;
            }
          }
        }
        v322 = (uint64_t ****)(v319 + 16 * v320);
        goto LABEL_463;
      }
      v327 = 0;
      v328 = &byte_1C871356D;
LABEL_464:
      LOWORD(v593) = 1283;
      v589 = ".for.";
      v591 = v328;
      v592 = v327;
      v330 = (llvm::BasicBlock *)llvm::CloneBasicBlock((uint64_t ***)v574, (uint64_t)&v594, (uint64_t)&v589, 0, 0, 0);
      v331 = v330;
      v332 = *(_QWORD *)(v574 + 32);
      if (v332)
        v333 = v332 == *(_QWORD *)(v574 + 56) + 72;
      else
        v333 = 1;
      if (v333)
        v334 = 0;
      else
        v334 = (llvm::BasicBlock *)(v332 - 24);
      llvm::BasicBlock::insertInto(v330, v569, v334);
      v590 = 2;
      v591 = 0;
      v592 = (int32x2_t ****)v574;
      if ((_QWORD)v574 != -8192 && (_QWORD)v574 != -4096 && (_QWORD)v574)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v590);
      v589 = &unk_1E814DA10;
      v593 = &v594;
      v335 = sub_1C52E2ED8((uint64_t)&v594, &v589);
      if (v592 != (int32x2_t ****)-8192 && v592 != (int32x2_t ****)-4096 && v592)
      {
        v336 = v590 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v590 & 0xFFFFFFFFFFFFFFF8) = v591;
        if (v591)
        {
          *v591 = *v591 & 7 | v336;
        }
        else
        {
          v337 = v592;
          v338 = ***v592;
          v339 = (unint64_t)v338[303];
          if (v339 <= v336)
          {
            v340 = v338[305].u32[0];
            if (v339 + 16 * v340 > v336)
            {
              v341 = v340 - 1;
              LODWORD(v342) = v341 & ((v592 >> 4) ^ (v592 >> 9));
              v343 = (int32x2_t *****)(v339 + 16 * v342);
              v344 = *v343;
              if (v592 == *v343)
              {
LABEL_485:
                *v343 = (int32x2_t ****)-8192;
                v338[304] = vadd_s32(v338[304], (int32x2_t)0x1FFFFFFFFLL);
                v337 = v592;
              }
              else
              {
                v345 = 1;
                while (v344 != (int32x2_t ****)-4096)
                {
                  v346 = v342 + v345++;
                  v342 = v346 & v341;
                  v344 = *(int32x2_t *****)(v339 + 16 * v342);
                  if (v592 == v344)
                  {
                    v343 = (int32x2_t *****)(v339 + 16 * v342);
                    goto LABEL_485;
                  }
                }
              }
              *((_BYTE *)v337 + 17) &= ~1u;
            }
          }
        }
      }
      v347 = (llvm::BasicBlock *)v335[7];
      if (v347 != v331)
      {
        if (v347 && v347 != (llvm::BasicBlock *)-8192 && v347 != (llvm::BasicBlock *)-4096)
        {
          v355 = v335[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v355 = v335[6];
          v356 = (unint64_t *)v335[6];
          if (v356)
          {
            *v356 = *v356 & 7 | v355;
          }
          else
          {
            v357 = v335[7];
            v358 = ***(int32x2_t ****)v357;
            v359 = (unint64_t)v358[303];
            if (v359 <= v355)
            {
              v360 = v358[305].u32[0];
              if (v359 + 16 * v360 > v355)
              {
                v361 = v360 - 1;
                LODWORD(v362) = v361 & ((v357 >> 4) ^ (v357 >> 9));
                v363 = (uint64_t *)(v359 + 16 * v362);
                v364 = *v363;
                if (v357 == *v363)
                {
LABEL_523:
                  *v363 = -8192;
                  v358[304] = vadd_s32(v358[304], (int32x2_t)0x1FFFFFFFFLL);
                  v357 = v335[7];
                }
                else
                {
                  v365 = 1;
                  while (v364 != -4096)
                  {
                    v366 = v362 + v365++;
                    v362 = v366 & v361;
                    v364 = *(_QWORD *)(v359 + 16 * v362);
                    if (v357 == v364)
                    {
                      v363 = (uint64_t *)(v359 + 16 * v362);
                      goto LABEL_523;
                    }
                  }
                }
                *(_BYTE *)(v357 + 17) &= ~1u;
              }
            }
          }
        }
        v335[7] = v331;
        if (v331 != (llvm::BasicBlock *)-8192 && v331 != (llvm::BasicBlock *)-4096 && v331)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v335 + 5));
      }
      if (v314 >= v313)
      {
        v348 = (v314 - v573) >> 4;
        v349 = v348 + 1;
        if ((unint64_t)(v348 + 1) >> 60)
          goto LABEL_849;
        if ((v313 - v573) >> 3 > v349)
          v349 = (v313 - v573) >> 3;
        if ((unint64_t)(v313 - v573) >= 0x7FFFFFFFFFFFFFF0)
          v350 = 0xFFFFFFFFFFFFFFFLL;
        else
          v350 = v349;
        if (v350 >> 60)
          goto LABEL_850;
        v351 = (char *)operator new(16 * v350);
        v352 = &v351[16 * v348];
        *(_QWORD *)v352 = v574;
        *((_QWORD *)v352 + 1) = v331;
        if (v314 == v573)
        {
          v354 = &v351[16 * v348];
        }
        else
        {
          v353 = &v351[16 * v348];
          do
          {
            v354 = v353 - 16;
            *((_OWORD *)v353 - 1) = *((_OWORD *)v314 - 1);
            v314 -= 16;
            v353 -= 16;
          }
          while (v314 != v573);
        }
        v313 = &v351[16 * v350];
        v314 = v352 + 16;
        if (v573)
          operator delete(v573);
        v573 = v354;
      }
      else
      {
        *(_QWORD *)v314 = v574;
        *((_QWORD *)v314 + 1) = v331;
        v314 += 16;
      }
LABEL_511:
      ++v311;
    }
    while (v311 != v312);
    v367 = v573;
    v368 = v564;
    if (v573 == v314)
      goto LABEL_804;
    do
    {
      v589 = 0;
      v369 = *((_QWORD *)v367 + 1);
      v589 = *(void **)v367;
      *(_QWORD *)&v574 = v369;
      v371 = (_QWORD *)v368[2];
      v370 = v368[3];
      if ((unint64_t)v371 >= v370)
      {
        v373 = (_QWORD *)*v568;
        v374 = ((uint64_t)v371 - *v568) >> 3;
        v375 = v374 + 1;
        if ((unint64_t)(v374 + 1) >> 61)
          goto LABEL_849;
        v376 = v370 - (_QWORD)v373;
        if (v376 >> 2 > v375)
          v375 = v376 >> 2;
        if ((unint64_t)v376 >= 0x7FFFFFFFFFFFFFF8)
          v377 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v377 = v375;
        if (v377)
        {
          if (v377 >> 61)
            goto LABEL_850;
          v378 = (char *)operator new(8 * v377);
        }
        else
        {
          v378 = 0;
        }
        v379 = &v378[8 * v374];
        *(_QWORD *)v379 = v369;
        v372 = v379 + 8;
        if (v371 != v373)
        {
          do
          {
            v380 = *--v371;
            *((_QWORD *)v379 - 1) = v380;
            v379 -= 8;
          }
          while (v371 != v373);
          v371 = (_QWORD *)*v568;
        }
        v381 = &v378[8 * v377];
        v368 = v564;
        v564[1] = (uint64_t)v379;
        v564[2] = (uint64_t)v372;
        v564[3] = (uint64_t)v381;
        if (v371)
          operator delete(v371);
      }
      else
      {
        *v371 = v369;
        v372 = v371 + 1;
      }
      v368[2] = (uint64_t)v372;
      v382 = sub_1C61912D8(v570, &v574);
      sub_1C619116C((uint64_t)(v382 + 1), (uint64_t)v583);
      sub_1C4E7D5A8((uint64_t)v568, (uint64_t)v589);
      v383 = sub_1C61912D8(v570, &v589);
      v386 = v383[1];
      v384 = v383 + 1;
      v385 = v386;
      v387 = (uint64_t)v583;
      if ((v386 & 4) != 0)
      {
        v389 = *(_QWORD **)(v385 & 0xFFFFFFFFFFFFFFF8);
        v388 = &v389[*(unsigned int *)((v385 & 0xFFFFFFFFFFFFFFF8) + 8)];
      }
      else
      {
        v388 = &v384[v385 > 7];
        v389 = v384;
      }
      if (v389 != v388)
      {
        while ((uint64_t ***)*v389 != v583)
        {
          if (++v389 == v388)
          {
            v389 = v388;
            break;
          }
        }
      }
      if (v389 != v388)
      {
        for (j = v389 + 1; j != v388; ++j)
        {
          if (*j != v387)
            *v389++ = *j;
        }
      }
      if ((v385 & 4) != 0)
      {
        v392 = v385 & 0xFFFFFFFFFFFFFFF8;
        if (v392)
          *(_DWORD *)(v392 + 8) = ((unint64_t)v389 - *(_QWORD *)v392) >> 3;
      }
      else
      {
        v391 = v385 > 7;
        if (v389 == v384 && v389 != &v384[v391])
          *v384 = 0;
      }
      v367 += 16;
    }
    while (v367 != v314);
    v393 = v368[1];
    v394 = v368[2];
    while (v393 != v394)
    {
      v395 = *(_QWORD *)v393 + 40;
      for (k = *(_QWORD *)(*(_QWORD *)v393 + 48); k != v395; k = *(_QWORD *)(k + 8))
      {
        if (k)
          v397 = (uint64_t ***)(k - 24);
        else
          v397 = 0;
        v398 = (_QWORD *)operator new();
        *(_DWORD *)v398 = 3;
        v398[1] = 0;
        *((_DWORD *)v398 + 4) = 0;
        v398[5] = &v594;
        v398[3] = v398 + 5;
        v398[6] = 0;
        v398[4] = 0x200000001;
        v398[9] = v398 + 11;
        v398[10] = 0x400000000;
        v398[23] = v398 + 25;
        v398[24] = 0x100000000;
        v398[27] = v398 + 29;
        v398[28] = 0x1000000000;
        *(_QWORD *)&v574 = v398;
        v589 = v398;
        sub_1C5FD706C((uint64_t)v398, v397);
        sub_1C5FD3718((uint64_t *)&v589, v399);
        llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v574, v400);
      }
      v393 += 8;
    }
    v585 = v588;
    v587 = 2;
    v401 = v573;
    do
    {
      v402 = *(_QWORD *)v401;
      v403 = *((_QWORD *)v401 + 1);
      v586 = 0;
      v404 = *(_QWORD *)(v402 + 8);
      if (v404)
      {
        while (1)
        {
          v405 = *(_QWORD *)(v404 + 24);
          v406 = *(unsigned __int8 *)(v405 + 16);
          v407 = v405 && v406 >= 0x1C;
          if (v407 && v406 - 29 <= 0xA)
            break;
          v404 = *(_QWORD *)(v404 + 8);
          if (!v404)
            goto LABEL_625;
        }
        v409 = 0;
LABEL_586:
        v410 = *(_QWORD *)(v405 + 40);
        v411 = *(_QWORD *)(v410 + 40);
        if (v411 != v410 + 40)
        {
          v412 = v411 ? v411 - 24 : 0;
          v413 = *(unsigned __int8 *)(v412 + 16) - 40;
          v414 = v413 >= 0xFFFFFFF5 ? v412 : 0;
          if (v411)
          {
            if (*(_BYTE *)(v414 + 16) == 37 && v413 >= 0xFFFFFFF5)
            {
              v416 = *(_QWORD *)(*(_QWORD *)(v414 - 64) - 32);
              v417 = *(_DWORD *)(v416 + 20);
              v418 = (v417 & 0x40000000) != 0 ? *(_QWORD **)(v416 - 8) : (_QWORD *)(v416 - 32 * (v417 & 0x7FFFFFF));
              if ((_QWORD *)*v418 == v582)
              {
                if (v409 >= v587)
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v585, (uint64_t)v588, v409 + 1, 8);
                  v409 = v586;
                }
                *((_QWORD *)v585 + v409) = v414;
                v409 = ++v586;
              }
            }
          }
        }
        while (1)
        {
          v404 = *(_QWORD *)(v404 + 8);
          if (!v404)
            break;
          v405 = *(_QWORD *)(v404 + 24);
          v419 = *(unsigned __int8 *)(v405 + 16);
          if (v405)
            v420 = v419 >= 0x1C;
          else
            v420 = 0;
          if (v420 && v419 - 29 < 0xB)
            goto LABEL_586;
        }
        if (v409)
        {
          v422 = (uint64_t *)v585;
          v423 = v409;
          v424 = (uint64_t *)(v403 + 8);
          v425 = 8 * v423;
          do
          {
            v426 = *v422;
            v427 = (_QWORD *)(*v422 - 32);
            if (*v427)
            {
              **(_QWORD **)(v426 - 16) = *(_QWORD *)(v426 - 24);
              v428 = *(_QWORD *)(v426 - 24);
              if (v428)
                *(_QWORD *)(v428 + 16) = *(_QWORD *)(v426 - 16);
            }
            *v427 = v403;
            if (v403)
            {
              v429 = *v424;
              *(_QWORD *)(v426 - 24) = *v424;
              if (v429)
                *(_QWORD *)(v429 + 16) = v426 - 24;
              *(_QWORD *)(v426 - 16) = v424;
              *v424 = (uint64_t)v427;
            }
            ++v422;
            v425 -= 8;
          }
          while (v425);
        }
      }
LABEL_625:
      v401 += 16;
    }
    while (v401 != v314);
    v581[0] = &v582;
    v430 = v573;
    v581[1] = v565;
    v581[2] = &v583;
    do
    {
      v431 = *((_QWORD *)v430 + 1);
      if (*(_QWORD *)(*(_QWORD *)v430 + 40) != *(_QWORD *)v430 + 40)
      {
        for (m = *(_QWORD *)(*(_QWORD *)v430 + 48); ; m = *(_QWORD *)(v433 + 32))
        {
          v433 = m - 24;
          v434 = m ? m - 24 : 0;
          if (!m || *(_BYTE *)(v434 + 16) != 83)
            break;
          sub_1C52E1584((uint64_t)v581, (_DWORD *)(m - 24), 1);
        }
      }
      if (*(_QWORD *)(v431 + 40) != v431 + 40)
      {
        for (n = *(_QWORD *)(v431 + 48); ; n = *(_QWORD *)(v436 + 32))
        {
          v436 = n - 24;
          v437 = n ? n - 24 : 0;
          if (!n || *(_BYTE *)(v437 + 16) != 83)
            break;
          sub_1C52E1584((uint64_t)v581, (_DWORD *)(n - 24), 0);
        }
      }
      v430 += 16;
    }
    while (v430 != v314);
    v438 = v573;
    do
    {
      v439 = *((_QWORD *)v438 + 1);
      v440 = *(_QWORD *)(v439 + 40);
      if (v440 != v439 + 40)
      {
        if (v440)
          v441 = v440 - 24;
        else
          v441 = 0;
        v442 = *(_QWORD *)v438;
        if (*(_BYTE *)(v441 + 16) != 30)
        {
          v443 = 2;
          switch(*(_BYTE *)(v441 + 16))
          {
            case 0x1E:
              __break(1u);
              return;
            case 0x1F:
              v443 = (*(_DWORD *)(v441 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_688;
            case 0x20:
            case 0x26:
              v443 = (*(_DWORD *)(v441 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_688;
            case 0x21:
              goto LABEL_653;
            case 0x24:
              v443 = *(_WORD *)(v441 + 18) & 1;
              goto LABEL_688;
            case 0x25:
              v443 = 1;
              goto LABEL_653;
            case 0x27:
              v443 = *(_DWORD *)(v441 + 80) + 1;
LABEL_688:
              if (!v443)
                goto LABEL_684;
              goto LABEL_653;
            default:
              goto LABEL_684;
          }
        }
        if ((*(_DWORD *)(v441 + 20) & 0x7FFFFFF) == 3)
          v443 = 2;
        else
          v443 = 1;
LABEL_653:
        v444 = 0;
        while (1)
        {
          Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v441, v444);
          if (*(_QWORD *)(Successor + 40) != Successor + 40)
            break;
LABEL_683:
          if (v443 == ++v444)
            goto LABEL_684;
        }
        v446 = *(_QWORD *)(Successor + 48);
LABEL_656:
        v447 = v446 - 24;
        if (v446)
          v448 = v446 - 24;
        else
          v448 = 0;
        if (!v446)
          goto LABEL_683;
        if (*(_BYTE *)(v448 + 16) != 83)
          goto LABEL_683;
        v449 = *(_DWORD *)(v446 - 4);
        v450 = v449 & 0x7FFFFFF;
        if ((v449 & 0x7FFFFFF) == 0)
          goto LABEL_683;
        v451 = 0;
        v452 = v447 - 32 * v450;
        v453 = 32 * *(unsigned int *)(v447 + 60);
        v454 = 32 * v450;
        while (1)
        {
          if ((v449 & 0x40000000) != 0)
          {
            if (*(_QWORD *)(*(_QWORD *)(v447 - 8) + v453) == v442)
            {
              v452 = *(_QWORD *)(v447 - 8);
LABEL_670:
              v455 = *(_QWORD *)(v452 + v451);
              if (v455)
                v456 = *(unsigned __int8 *)(v455 + 16) >= 0x1Cu;
              else
                v456 = 0;
              if (v456 && (_DWORD)v596)
              {
                v457 = ((_DWORD)v596 - 1) & ((v455 >> 4) ^ (v455 >> 9));
                v458 = &v594[8 * v457];
                v459 = v458[3];
                if ((const char *)v455 == v459)
                {
LABEL_680:
                  if (v458 != &v594[8 * (unint64_t)v596])
                    v455 = (uint64_t)v458[7];
                }
                else
                {
                  v460 = 1;
                  while (v459 != (const char *)-4096)
                  {
                    v461 = v457 + v460++;
                    v457 = v461 & ((_DWORD)v596 - 1);
                    v458 = &v594[8 * v457];
                    v459 = v458[3];
                    if ((const char *)v455 == v459)
                      goto LABEL_680;
                  }
                }
              }
              sub_1C477667C((llvm::PHINode *)v447, v455, v439);
              v446 = *(_QWORD *)(v447 + 32);
              goto LABEL_656;
            }
          }
          else if (*(_QWORD *)(v452 + v453) == v442)
          {
            goto LABEL_670;
          }
          v451 += 32;
          v453 += 8;
          if (v454 == v451)
            goto LABEL_683;
        }
      }
LABEL_684:
      v438 += 16;
    }
    while (v438 != v314);
    v462 = &v594[8 * (unint64_t)v596];
    if ((_DWORD)v595)
    {
      if ((_DWORD)v596)
      {
        v463 = (unint64_t)v596 << 6;
        v464 = v594;
        while (((unint64_t)v464[3] | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v464 += 8;
          v463 -= 64;
          if (!v463)
          {
            v464 = &v594[8 * (unint64_t)v596];
            break;
          }
        }
      }
      else
      {
        v464 = v594;
      }
    }
    else
    {
      v464 = &v594[8 * (unint64_t)v596];
    }
    v466 = &v594[8 * (unint64_t)v596];
LABEL_703:
    if (v464 != v466)
    {
      v467 = (llvm::BasicBlock *)v464[3];
      v577 = v467;
      v578 = 6;
      v468 = v464[7];
      v579 = 0;
      v580 = (int32x2_t ****)v468;
      if (v468 != (const char *)-8192 && v468 != (const char *)-4096 && v468 != 0)
      {
        v470 = (unint64_t)v464[5] & 0xFFFFFFFFFFFFFFF8;
        v579 = *(unint64_t **)v470;
        *(_QWORD *)v470 = &v578;
        v578 = v470 | 6;
        if (v579)
          *v579 = *v579 & 7 | (unint64_t)&v579;
        v467 = v577;
      }
      v589 = &v591;
      v590 = 0x1000000000;
      if (!v467)
        goto LABEL_776;
      if (*((unsigned __int8 *)v467 + 16) < 0x1Cu)
        goto LABEL_776;
      v471 = *((_QWORD *)v467 + 1);
      if (!v471)
        goto LABEL_776;
      v472 = v580;
      while (1)
      {
        *(_QWORD *)&v574 = *(_QWORD *)(*(_QWORD *)(v471 + 24) + 40);
        v473 = sub_1C61912D8(v570, &v574)[1];
        if (v473 < 8)
        {
          if ((v473 & 4) == 0)
            goto LABEL_727;
          v474 = 0;
          goto LABEL_726;
        }
        v474 = v473 & 0xFFFFFFFFFFFFFFF8;
        if ((v473 & 4) == 0 || !v474)
          break;
        v475 = *(_DWORD *)(v474 + 8);
        if (v475)
          goto LABEL_725;
LABEL_726:
        v473 = **(_QWORD **)v474;
LABEL_727:
        if ((uint64_t ***)v473 != v583)
        {
LABEL_728:
          v476 = v590;
          if (v590 >= (unint64_t)HIDWORD(v590))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v589, (uint64_t)&v591, v590 + 1, 8);
            v476 = v590;
          }
          *((_QWORD *)v589 + v476) = v471;
          LODWORD(v590) = v590 + 1;
        }
        v471 = *(_QWORD *)(v471 + 8);
        if (!v471)
        {
          if ((_DWORD)v590)
          {
            v575 = 0u;
            v576 = 0u;
            v574 = 0u;
            v477 = *(uint64_t ***)v467;
            if ((*((_BYTE *)v467 + 23) & 0x10) != 0)
            {
              v478 = **v477;
              v479 = *(_QWORD *)(v478 + 152);
              v480 = *(unsigned int *)(v478 + 168);
              if (!(_DWORD)v480)
                goto LABEL_740;
              LODWORD(v481) = (v480 - 1) & ((v467 >> 4) ^ (v467 >> 9));
              v482 = (llvm::BasicBlock **)(v479 + 16 * v481);
              v483 = *v482;
              if (*v482 != v467)
              {
                v484 = 1;
                while (v483 != (llvm::BasicBlock *)-4096)
                {
                  v485 = v481 + v484++;
                  v481 = v485 & (v480 - 1);
                  v483 = *(llvm::BasicBlock **)(v479 + 16 * v481);
                  if (v483 == v467)
                  {
                    v482 = (llvm::BasicBlock **)(v479 + 16 * v481);
                    goto LABEL_741;
                  }
                }
LABEL_740:
                v482 = (llvm::BasicBlock **)(v479 + 16 * v480);
              }
LABEL_741:
              v486 = v482[1];
              v489 = *(_QWORD *)v486;
              v487 = (char *)v486 + 16;
              v488 = v489;
            }
            else
            {
              v488 = 0;
              v487 = &byte_1C871356D;
            }
            llvm::SSAUpdater::Initialize((uint64_t)&v574, (uint64_t)v477, v487, v488);
            v490 = *((_QWORD *)v467 + 5);
            v584 = v490;
            v491 = (_QWORD *)v574;
            v492 = *(_DWORD *)(v574 + 16);
            if (!v492)
            {
              v501 = 0;
              goto LABEL_756;
            }
            v493 = v492 - 1;
            v494 = (v492 - 1) & ((v490 >> 4) ^ (v490 >> 9));
            v495 = (_QWORD *)(*(_QWORD *)v574 + 16 * v494);
            v496 = *v495;
            if (*v495 == v490)
            {
              v495[1] = v467;
              v502 = (uint64_t)v472[5];
              v584 = v502;
              goto LABEL_758;
            }
            v497 = 0;
            v498 = 1;
            while (v496 != -4096)
            {
              if (v497)
                v499 = 0;
              else
                v499 = v496 == -8192;
              if (v499)
                v497 = v495;
              v500 = v494 + v498++;
              v494 = v500 & v493;
              v495 = (_QWORD *)(*(_QWORD *)v574 + 16 * (v500 & v493));
              v496 = *v495;
              if (*v495 == v490)
                goto LABEL_757;
            }
            if (v497)
              v501 = v497;
            else
              v501 = v495;
LABEL_756:
            v495 = sub_1C4ECCA58(v574, (uint64_t)&v584, &v584, v501);
            *v495 = v584;
            v495[1] = 0;
            v491 = (_QWORD *)v574;
            v492 = *(_DWORD *)(v574 + 16);
LABEL_757:
            v495[1] = v467;
            v502 = (uint64_t)v472[5];
            v584 = v502;
            if (!v492)
            {
              v511 = 0;
              goto LABEL_771;
            }
LABEL_758:
            v503 = v492 - 1;
            v504 = v503 & ((v502 >> 4) ^ (v502 >> 9));
            v505 = (_QWORD *)(*v491 + 16 * v504);
            v506 = *v505;
            if (*v505 != v502)
            {
              v507 = 0;
              v508 = 1;
              while (v506 != -4096)
              {
                if (v507)
                  v509 = 0;
                else
                  v509 = v506 == -8192;
                if (v509)
                  v507 = v505;
                v510 = v504 + v508++;
                v504 = v510 & v503;
                v505 = (_QWORD *)(*v491 + 16 * (v510 & v503));
                v506 = *v505;
                if (*v505 == v502)
                  goto LABEL_772;
              }
              if (v507)
                v511 = v507;
              else
                v511 = v505;
LABEL_771:
              v505 = sub_1C4ECCA58((uint64_t)v491, (uint64_t)&v584, &v584, v511);
              *v505 = v584;
              v505[1] = 0;
            }
LABEL_772:
            v505[1] = v472;
            while ((_DWORD)v590)
            {
              v512 = (llvm::Use *)*((_QWORD *)v589 + v590 - 1);
              LODWORD(v590) = v590 - 1;
              llvm::SSAUpdater::RewriteUseAfterInsertions((llvm::SSAUpdater *)&v574, v512);
            }
            llvm::SSAUpdater::~SSAUpdater((void **)&v574);
          }
LABEL_776:
          if (v589 != &v591)
            free(v589);
          if (v580 != (int32x2_t ****)-8192 && v580 != (int32x2_t ****)-4096 && v580)
          {
            v513 = v578 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v578 & 0xFFFFFFFFFFFFFFF8) = v579;
            if (v579)
            {
              *v579 = *v579 & 7 | v513;
            }
            else
            {
              v514 = v580;
              v515 = ***v580;
              v516 = (unint64_t)v515[303];
              if (v516 <= v513)
              {
                v517 = v515[305].u32[0];
                if (v516 + 16 * v517 > v513)
                {
                  v518 = v517 - 1;
                  LODWORD(v519) = v518 & ((v580 >> 4) ^ (v580 >> 9));
                  v520 = (int32x2_t *****)(v516 + 16 * v519);
                  v521 = *v520;
                  if (v580 == *v520)
                  {
LABEL_789:
                    *v520 = (int32x2_t ****)-8192;
                    v515[304] = vadd_s32(v515[304], (int32x2_t)0x1FFFFFFFFLL);
                    v514 = v580;
                  }
                  else
                  {
                    v522 = 1;
                    while (v521 != (int32x2_t ****)-4096)
                    {
                      v523 = v519 + v522++;
                      v519 = v523 & v518;
                      v521 = *(int32x2_t *****)(v516 + 16 * v519);
                      if (v580 == v521)
                      {
                        v520 = (int32x2_t *****)(v516 + 16 * v519);
                        goto LABEL_789;
                      }
                    }
                  }
                  *((_BYTE *)v514 + 17) &= ~1u;
                }
              }
            }
          }
          v524 = v464 + 8;
          v464 = v462;
          if (v524 != v462)
          {
            v464 = v524;
            while (((unint64_t)v464[3] | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v464 += 8;
              if (v464 == v462)
              {
                v464 = v462;
                goto LABEL_703;
              }
            }
          }
          goto LABEL_703;
        }
      }
      if ((v473 & 4) == 0)
        goto LABEL_727;
      v475 = *(_DWORD *)(v474 + 8);
LABEL_725:
      if (v475 > 1)
        goto LABEL_728;
      goto LABEL_726;
    }
    if (v585 != v588)
      free(v585);
    v368 = v564;
LABEL_804:
    if (v599)
    {
      sub_1C4E43068((uint64_t)&v597);
      MEMORY[0x1CAA32FB4](v597, 8);
      v599 = 0;
    }
    v38 = v569;
    v465 = v573;
LABEL_807:
    v525 = v594;
    if ((_DWORD)v596)
    {
      v526 = &v594[8 * (unint64_t)v596];
      do
      {
        v527 = v525[3];
        if (((unint64_t)v527 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v528 = v525[7];
          if (v528)
          {
            if (v528 != (const char *)-8192 && v528 != (const char *)-4096)
            {
              v529 = (unint64_t)v525[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v529 = v525[6];
              v530 = (unint64_t *)v525[6];
              if (v530)
              {
                *v530 = *v530 & 7 | v529;
              }
              else
              {
                v531 = v525[7];
                v532 = ***(int32x2_t ****)v531;
                v533 = (unint64_t)v532[303];
                if (v533 <= v529)
                {
                  v534 = v532[305].u32[0];
                  if (v533 + 16 * v534 > v529)
                  {
                    v535 = v534 - 1;
                    LODWORD(v536) = v535 & ((v531 >> 4) ^ (v531 >> 9));
                    v537 = (const char **)(v533 + 16 * v536);
                    v538 = *v537;
                    if (v531 == *v537)
                    {
LABEL_821:
                      *v537 = (const char *)-8192;
                      v532[304] = vadd_s32(v532[304], (int32x2_t)0x1FFFFFFFFLL);
                      v531 = v525[7];
                    }
                    else
                    {
                      v539 = 1;
                      while (v538 != (const char *)-4096)
                      {
                        v540 = v536 + v539++;
                        v536 = v540 & v535;
                        v538 = *(const char **)(v533 + 16 * v536);
                        if (v531 == v538)
                        {
                          v537 = (const char **)(v533 + 16 * v536);
                          goto LABEL_821;
                        }
                      }
                    }
                    *((_BYTE *)v531 + 17) &= ~1u;
                  }
                }
              }
              v527 = v525[3];
            }
          }
        }
        if (v527 != (const char *)-4096 && v527 != (const char *)-8192 && v527 != 0)
        {
          v542 = (unint64_t)v525[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v542 = v525[2];
          v543 = (unint64_t *)v525[2];
          if (v543)
          {
            *v543 = *v543 & 7 | v542;
          }
          else
          {
            v544 = v525[3];
            v545 = ***(int32x2_t ****)v544;
            v546 = (unint64_t)v545[303];
            if (v546 <= v542)
            {
              v547 = v545[305].u32[0];
              if (v546 + 16 * v547 > v542)
              {
                v548 = v547 - 1;
                LODWORD(v549) = v548 & ((v544 >> 4) ^ (v544 >> 9));
                v550 = (const char **)(v546 + 16 * v549);
                v551 = *v550;
                if (v544 == *v550)
                {
LABEL_840:
                  *v550 = (const char *)-8192;
                  v545[304] = vadd_s32(v545[304], (int32x2_t)0x1FFFFFFFFLL);
                  v544 = v525[3];
                }
                else
                {
                  v552 = 1;
                  while (v551 != (const char *)-4096)
                  {
                    v553 = v549 + v552++;
                    v549 = v553 & v548;
                    v551 = *(const char **)(v546 + 16 * v549);
                    if (v544 == v551)
                    {
                      v550 = (const char **)(v546 + 16 * v549);
                      goto LABEL_840;
                    }
                  }
                }
                *((_BYTE *)v544 + 17) &= ~1u;
              }
            }
          }
        }
        v525 += 8;
      }
      while (v525 != v526);
      v525 = v594;
    }
    MEMORY[0x1CAA32FB4](v525, 8);
    if (v465)
      operator delete(v465);
    v37 = v368 + 4;
  }
  while (v37 != v555);
LABEL_40:
  v39 = (_QWORD *)v565;
  if (byte_1ED803D30)
    goto LABEL_339;
  v554 = (*(unsigned __int8 *)(v565 + 28) | byte_1ED803EB0) != 0;
  v589 = &v591;
  v590 = 0x1000000000;
  v40 = *((_QWORD *)v38 + 10);
  if (v40 == v557)
    goto LABEL_339;
  v41 = 0;
  while (2)
  {
    v42 = v40 - 24;
    if (!v40)
      v42 = 0;
    v43 = *(_QWORD *)(v42 + 48);
    if (v43)
      v44 = v43 - 24;
    else
      v44 = 0;
    v45 = *(unsigned __int8 *)(v44 + 16);
    v46 = *(_QWORD *)(v42 + 48);
    if (v45 == 83)
    {
      v46 = *(_QWORD *)(v42 + 48);
      do
      {
        v46 = *(_QWORD *)(v46 + 8);
        v47 = v46 - 24;
        if (!v46)
          v47 = 0;
      }
      while (*(_BYTE *)(v47 + 16) == 83);
    }
    v48 = *(_QWORD *)(v40 + 8);
    v49 = *(unsigned __int8 *)(v46 - 8) - 38;
    v245 = v49 > 0x38;
    v50 = (1 << v49) & 0x100060000000001;
    v51 = v245 || v50 == 0;
    v560 = v48;
    if (!v51)
    {
      if (!v554)
        goto LABEL_64;
      v52 = *(_QWORD *)(v42 + 48);
      if (v45 == 83)
      {
        v52 = *(_QWORD *)(v42 + 48);
        do
        {
          v52 = *(_QWORD *)(v52 + 8);
          v53 = v52 - 24;
          if (!v52)
            v53 = 0;
        }
        while (*(_BYTE *)(v53 + 16) == 83);
      }
      if (*(_BYTE *)(v52 - 8) == 38)
      {
LABEL_64:
        v54 = v43 ? v43 - 24 : 0;
        if (v43 && *(_BYTE *)(v54 + 16) == 83)
        {
          v562 = v42 + 40;
          while (1)
          {
            v55 = *(_QWORD *)(v54 + 40);
            for (ii = *(_QWORD *)(v55 + 48); ; ii = *(_QWORD *)(ii + 8))
            {
              v57 = ii - 24;
              if (!ii)
                v57 = 0;
              if (*(_BYTE *)(v57 + 16) != 83)
                break;
            }
            v566 = *(_QWORD *)(v43 + 8);
            if (*(unsigned __int8 *)(ii - 8) - 29 < 0xB)
            {
              LODWORD(v575) = 0;
              v574 = 0uLL;
              v58 = *(_QWORD *)(v54 + 8);
              if (!v58)
              {
                MEMORY[0x1CAA32FB4](0, 8);
                goto LABEL_318;
              }
              v59 = 0;
              v571 = (v54 >> 4) ^ (v54 >> 9);
              while (1)
              {
                v60 = v58;
                v61 = (_QWORD *)(v58 + 8);
                v58 = *(_QWORD *)(v58 + 8);
                v62 = v61[2];
                v63 = *(unsigned __int8 *)(v62 + 16);
                if (v63 == 83)
                {
                  for (jj = *(_QWORD *)(*(_QWORD *)(v62 + 40) + 48); ; jj = *(_QWORD *)(jj + 8))
                  {
                    v65 = jj - 24;
                    if (!jj)
                      v65 = 0;
                    if (*(_BYTE *)(v65 + 16) != 83)
                      break;
                  }
                  v66 = *(unsigned __int8 *)(jj - 8) - 38;
                  v245 = v66 > 0x38;
                  v67 = (1 << v66) & 0x100060000000001;
                  if (!v245 && v67 != 0)
                    goto LABEL_181;
                }
                if (!v59)
                  break;
                if (!v62)
                  goto LABEL_111;
LABEL_108:
                if (v63 == 83)
                {
                  v585 = 0;
                  v88 = *(_DWORD *)(v62 + 20);
                  if ((v88 & 0x40000000) != 0)
                    v89 = *(_QWORD *)(v62 - 8);
                  else
                    v89 = v62 - 32 * (v88 & 0x7FFFFFF);
                  v100 = *(_QWORD **)(v89
                                    + 32 * *(unsigned int *)(v62 + 60)
                                    + 8 * ((unint64_t)(v60 - v89) >> 5));
                  v585 = v100;
                  v101 = (_QWORD *)v100[5];
                  if (v101 != v100 + 5)
                  {
                    v102 = v101 ? (uint64_t)(v101 - 3) : 0;
                    v103 = *(unsigned __int8 *)(v102 + 16) - 40;
                    v104 = v103 >= 0xFFFFFFF5 ? v102 : 0;
                    if (v101)
                    {
                      if (*(_BYTE *)(v104 + 16) == 37 && v103 >= 0xFFFFFFF5)
                      {
                        v577 = *(llvm::BasicBlock **)(v62 + 40);
                        v581[0] = 0;
                        v598 = 257;
                        v147 = 0;
                        v581[0] = llvm::SplitEdge((llvm *)v100, v577, 0, 0, 0, (llvm::MemorySSAUpdater *)&v594, v15);
                        v148 = (char *)*((_QWORD *)v585 + 5);
                        if (v148 != (char *)v585 + 40)
                        {
                          if (v148)
                            v149 = v148 - 24;
                          else
                            v149 = 0;
                          if (v149[16] - 29 >= 0xB)
                            v147 = 0;
                          else
                            v147 = v149;
                        }
                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v147 + 5) + 40, (uint64_t ***)v147);
                        v150 = *((_QWORD *)v147 + 3);
                        v151 = (_QWORD *)*((_QWORD *)v147 + 4);
                        v152 = v147 + 24;
                        *v151 = v150;
                        *(_QWORD *)(v150 + 8) = v151;
                        *((_QWORD *)v147 + 3) = 0;
                        *((_QWORD *)v147 + 4) = 0;
                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v104 + 40) + 40, (uint64_t ***)v104);
                        v153 = *(_QWORD *)(v104 + 24);
                        v154 = *(_QWORD **)(v104 + 32);
                        v155 = v104 + 24;
                        *v154 = v153;
                        *(_QWORD *)(v153 + 8) = v154;
                        *(_QWORD *)(v104 + 24) = 0;
                        *(_QWORD *)(v104 + 32) = 0;
                        v156 = v585;
                        *(_QWORD *)(v104 + 40) = v585;
                        v156[9] &= ~0x8000u;
                        if ((*(_BYTE *)(v104 + 23) & 0x10) != 0)
                        {
                          v191 = *((_QWORD *)v156 + 7);
                          if (v191)
                          {
                            v192 = *(llvm::ValueSymbolTable **)(v191 + 104);
                            if (v192)
                              llvm::ValueSymbolTable::reinsertValue(v192, (llvm::Value *)v104);
                          }
                        }
                        v157 = *((_QWORD *)v156 + 5);
                        *(_QWORD *)(v104 + 24) = v157;
                        *(_QWORD *)(v104 + 32) = v156 + 20;
                        *(_QWORD *)(v157 + 8) = v155;
                        *((_QWORD *)v156 + 5) = v155;
                        v158 = v581[0];
                        *((_QWORD *)v147 + 5) = v581[0];
                        *(_WORD *)(v158 + 18) &= ~0x8000u;
                        if ((v147[23] & 0x10) != 0)
                        {
                          v193 = *(_QWORD *)(v158 + 56);
                          if (v193)
                          {
                            v194 = *(llvm::ValueSymbolTable **)(v193 + 104);
                            if (v194)
                              llvm::ValueSymbolTable::reinsertValue(v194, (llvm::Value *)v147);
                          }
                        }
                        v159 = (llvm::BasicBlock **)(v147 - 32);
                        v160 = *((_QWORD *)v147 - 4);
                        v161 = *(_QWORD *)(v158 + 40);
                        *((_QWORD *)v147 + 3) = v161;
                        *((_QWORD *)v147 + 4) = v158 + 40;
                        *(_QWORD *)(v161 + 8) = v152;
                        *(_QWORD *)(v158 + 40) = v152;
                        v162 = v577;
                        v38 = v569;
                        if (v160)
                        {
                          **((_QWORD **)v147 - 2) = *((_QWORD *)v147 - 3);
                          v163 = *((_QWORD *)v147 - 3);
                          if (v163)
                            *(_QWORD *)(v163 + 16) = *((_QWORD *)v147 - 2);
                        }
                        *v159 = v162;
                        v39 = (_QWORD *)v565;
                        if (v162)
                        {
                          v166 = *((_QWORD *)v162 + 1);
                          v164 = (llvm::BasicBlock ***)((char *)v162 + 8);
                          v165 = v166;
                          *((_QWORD *)v147 - 3) = v166;
                          if (v166)
                            *(_QWORD *)(v165 + 16) = v147 - 24;
                          *((_QWORD *)v147 - 2) = v164;
                          *v164 = v159;
                        }
                        v167 = v581[0];
                        v168 = (_QWORD *)(v104 - 32);
                        if (*(_QWORD *)(v104 - 32))
                        {
                          **(_QWORD **)(v104 - 16) = *(_QWORD *)(v104 - 24);
                          v169 = *(_QWORD *)(v104 - 24);
                          if (v169)
                            *(_QWORD *)(v169 + 16) = *(_QWORD *)(v104 - 16);
                        }
                        *v168 = v167;
                        if (v167)
                        {
                          v172 = *(_QWORD *)(v167 + 8);
                          v170 = (_QWORD *)(v167 + 8);
                          v171 = v172;
                          *(_QWORD *)(v104 - 24) = v172;
                          if (v172)
                            *(_QWORD *)(v171 + 16) = v104 - 24;
                          *(_QWORD *)(v104 - 16) = v170;
                          *v170 = v168;
                        }
                        v173 = sub_1C61912D8(v570, v581) + 1;
                        v174 = sub_1C61912D8(v570, &v577) + 1;
                        sub_1C4EED4C0(v173, v174);
                        v175 = *v174;
                        if ((*v174 & 4) != 0)
                        {
                          v177 = v175 & 0xFFFFFFFFFFFFFFF8;
                          v174 = *(unint64_t **)v177;
                          v176 = *(_QWORD *)v177 + 8 * *(unsigned int *)(v177 + 8);
                        }
                        else
                        {
                          v176 = (uint64_t)&v174[v175 > 7];
                        }
                        for (kk = (llvm::ValueHandleBase *)v176; v174 != (unint64_t *)kk; v38 = v569)
                        {
                          v594 = (const char **)*v174;
                          v178 = (char **)sub_1C621E764(v565 + 72, (uint64_t *)&v594);
                          v179 = v178;
                          v181 = v178[1];
                          v180 = (unint64_t)v178[2];
                          if ((unint64_t)v181 >= v180)
                          {
                            v183 = *v178;
                            v184 = (v181 - *v178) >> 3;
                            v185 = v184 + 1;
                            if ((unint64_t)(v184 + 1) >> 61)
                              goto LABEL_849;
                            v186 = v180 - (_QWORD)v183;
                            if (v186 >> 2 > v185)
                              v185 = v186 >> 2;
                            if ((unint64_t)v186 >= 0x7FFFFFFFFFFFFFF8)
                              v185 = 0x1FFFFFFFFFFFFFFFLL;
                            v556 = v185;
                            if (v185)
                            {
                              if (v185 >> 61)
                                goto LABEL_850;
                              v187 = (char *)operator new(8 * v185);
                            }
                            else
                            {
                              v187 = 0;
                            }
                            v188 = &v187[8 * v184];
                            *(_QWORD *)v188 = v581[0];
                            v182 = v188 + 8;
                            if (v181 == v183)
                            {
                              v189 = v556;
                            }
                            else
                            {
                              v189 = v556;
                              do
                              {
                                v190 = *((_QWORD *)v181 - 1);
                                v181 -= 8;
                                *((_QWORD *)v188 - 1) = v190;
                                v188 -= 8;
                              }
                              while (v181 != v183);
                              v181 = *v179;
                            }
                            *v179 = v188;
                            v179[1] = v182;
                            v179[2] = &v187[8 * v189];
                            v39 = (_QWORD *)v565;
                            if (v181)
                              operator delete(v181);
                          }
                          else
                          {
                            *(_QWORD *)v181 = v581[0];
                            v182 = v181 + 8;
                          }
                          v179[1] = v182;
                          ++v174;
                        }
                        v100 = (_QWORD *)v581[0];
                        v585 = (void *)v581[0];
                      }
                    }
                  }
                  if (!(_DWORD)v575)
                  {
                    v113 = 0;
                    goto LABEL_145;
                  }
                  v106 = ((v100 >> 4) ^ (v100 >> 9)) & (v575 - 1);
                  v107 = (_QWORD *)(v574 + 16 * v106);
                  v108 = (_QWORD *)*v107;
                  if (v100 != (_QWORD *)*v107)
                  {
                    v109 = 0;
                    v110 = 1;
                    while (v108 != (_QWORD *)-4096)
                    {
                      if (v109)
                        v111 = 0;
                      else
                        v111 = v108 == (_QWORD *)-8192;
                      if (v111)
                        v109 = v107;
                      v112 = v106 + v110++;
                      v106 = v112 & (v575 - 1);
                      v107 = (_QWORD *)(v574 + 16 * v106);
                      v108 = (_QWORD *)*v107;
                      if (v100 == (_QWORD *)*v107)
                        goto LABEL_146;
                    }
                    if (v109)
                      v113 = v109;
                    else
                      v113 = v107;
LABEL_145:
                    v107 = sub_1C4ECCA58((uint64_t)&v574, (uint64_t)&v585, (uint64_t *)&v585, v113);
                    *v107 = v585;
                    v107[1] = 0;
                  }
LABEL_146:
                  v114 = v107[1];
                  if (!v114)
                  {
                    v115 = operator new(0x60uLL);
                    v116 = (uint64_t)(v115 + 8);
                    v115[13] = v115[13] & 0x38000000 | 1;
                    *(_QWORD *)v115 = 0;
                    *((_QWORD *)v115 + 1) = 0;
                    *((_QWORD *)v115 + 2) = 0;
                    *((_QWORD *)v115 + 3) = v115 + 8;
                    v117 = *(llvm::PointerType **)v54;
                    if ((*(_BYTE *)(v54 + 23) & 0x10) != 0)
                    {
                      v118 = **(_QWORD **)v117;
                      v119 = *(_QWORD *)(v118 + 152);
                      v120 = *(unsigned int *)(v118 + 168);
                      if (!(_DWORD)v120)
                        goto LABEL_163;
                      LODWORD(v121) = (v120 - 1) & v571;
                      v122 = (uint64_t *)(v119 + 16 * v121);
                      v123 = *v122;
                      if (*v122 != v54)
                      {
                        v124 = 1;
                        while (v123 != -4096)
                        {
                          v125 = v121 + v124++;
                          v121 = v125 & (v120 - 1);
                          v123 = *(_QWORD *)(v119 + 16 * v121);
                          if (v123 == v54)
                          {
                            v122 = (uint64_t *)(v119 + 16 * v121);
                            goto LABEL_164;
                          }
                        }
LABEL_163:
                        v122 = (uint64_t *)(v119 + 16 * v120);
                      }
LABEL_164:
                      v135 = (_QWORD *)v122[1];
                      v138 = *v135;
                      v137 = (char *)(v135 + 2);
                      v136 = v138;
                    }
                    else
                    {
                      v136 = 0;
                      v137 = &byte_1C871356D;
                    }
                    v598 = 773;
                    v594 = (const char **)v137;
                    v595 = v136;
                    v596 = ".wineh.reload";
                    v139 = (char *)*((_QWORD *)v585 + 5);
                    if (v139 == (char *)v585 + 40)
                    {
                      v141 = 0;
                    }
                    else
                    {
                      if (v139)
                        v140 = v139 - 24;
                      else
                        v140 = 0;
                      if (v140[16] - 29 >= 0xB)
                        v141 = 0;
                      else
                        v141 = (uint64_t)v140;
                    }
                    Inst = llvm::LoadInst::LoadInst(v116, (uint64_t)v117, (uint64_t)v59, (uint64_t)&v594, 0, v141);
                    v107[1] = Inst;
                    v114 = Inst;
                  }
                  if (*(_QWORD *)v60)
                  {
                    **(_QWORD **)(v60 + 16) = *(_QWORD *)(v60 + 8);
                    v143 = *(_QWORD *)(v60 + 8);
                    if (v143)
                      *(_QWORD *)(v143 + 16) = *(_QWORD *)(v60 + 16);
                  }
                  *(_QWORD *)v60 = v114;
                  if (v114)
                  {
                    v146 = *(_QWORD *)(v114 + 8);
                    v144 = (_QWORD *)(v114 + 8);
                    v145 = v146;
                    *v61 = v146;
                    if (v146)
                      *(_QWORD *)(v145 + 16) = v61;
                    *(_QWORD *)(v60 + 16) = v144;
                    *v144 = v60;
                  }
                  goto LABEL_181;
                }
LABEL_111:
                v90 = (char *)operator new(0x60uLL);
                *((_DWORD *)v90 + 13) = *((_DWORD *)v90 + 13) & 0x38000000 | 1;
                *(_QWORD *)v90 = 0;
                *((_QWORD *)v90 + 1) = 0;
                *((_QWORD *)v90 + 2) = 0;
                *((_QWORD *)v90 + 3) = v90 + 32;
                v91 = *(llvm::PointerType **)v54;
                if ((*(_BYTE *)(v54 + 23) & 0x10) != 0)
                {
                  v92 = **(_QWORD **)v91;
                  v93 = *(_QWORD *)(v92 + 152);
                  v94 = *(unsigned int *)(v92 + 168);
                  if (!(_DWORD)v94)
                    goto LABEL_154;
                  LODWORD(v95) = (v94 - 1) & v571;
                  v96 = (uint64_t *)(v93 + 16 * v95);
                  v97 = *v96;
                  if (*v96 != v54)
                  {
                    v98 = 1;
                    while (v97 != -4096)
                    {
                      v99 = v95 + v98++;
                      v95 = v99 & (v94 - 1);
                      v97 = *(_QWORD *)(v93 + 16 * v95);
                      if (v97 == v54)
                      {
                        v96 = (uint64_t *)(v93 + 16 * v95);
                        goto LABEL_155;
                      }
                    }
LABEL_154:
                    v96 = (uint64_t *)(v93 + 16 * v94);
                  }
LABEL_155:
                  v126 = (_QWORD *)v96[1];
                  v129 = *v126;
                  v128 = (char *)(v126 + 2);
                  v127 = v129;
                  goto LABEL_156;
                }
                v127 = 0;
                v128 = &byte_1C871356D;
LABEL_156:
                v598 = 773;
                v594 = (const char **)v128;
                v595 = v127;
                v596 = ".wineh.reload";
                v130 = llvm::LoadInst::LoadInst((uint64_t)(v90 + 32), (uint64_t)v91, (uint64_t)v59, (uint64_t)&v594, 0, v62);
                if (*(_QWORD *)v60)
                {
                  **(_QWORD **)(v60 + 16) = *(_QWORD *)(v60 + 8);
                  v131 = *(_QWORD *)(v60 + 8);
                  if (v131)
                    *(_QWORD *)(v131 + 16) = *(_QWORD *)(v60 + 16);
                }
                *(_QWORD *)v60 = v130;
                v134 = *((_QWORD *)v90 + 5);
                v133 = v90 + 40;
                v132 = v134;
                *(_QWORD *)(v60 + 8) = v134;
                if (v134)
                  *(_QWORD *)(v132 + 16) = v61;
                *(_QWORD *)(v60 + 16) = v133;
                *v133 = v60;
LABEL_181:
                if (!v58)
                {
                  MEMORY[0x1CAA32FB4](v574, 8);
                  if (!v59)
                    goto LABEL_318;
                  goto LABEL_281;
                }
              }
              v69 = operator new(0x68uLL);
              v59 = (llvm::Value *)(v69 + 8);
              v69[13] = v69[13] & 0x38000000 | 1;
              *(_QWORD *)v69 = 0;
              *((_QWORD *)v69 + 1) = 0;
              *((_QWORD *)v69 + 2) = 0;
              *((_QWORD *)v69 + 3) = v69 + 8;
              v70 = *(llvm::PointerType **)v54;
              if ((*(_BYTE *)(v54 + 23) & 0x10) != 0)
              {
                v71 = **(_QWORD **)v70;
                v72 = *(_QWORD *)(v71 + 152);
                v73 = *(unsigned int *)(v71 + 168);
                if (!(_DWORD)v73)
                  goto LABEL_99;
                LODWORD(v74) = (v73 - 1) & v571;
                v75 = (uint64_t *)(v72 + 16 * v74);
                v76 = *v75;
                if (*v75 != v54)
                {
                  v77 = 1;
                  while (v76 != -4096)
                  {
                    v78 = v74 + v77++;
                    v74 = v78 & (v73 - 1);
                    v76 = *(_QWORD *)(v72 + 16 * v74);
                    if (v76 == v54)
                    {
                      v75 = (uint64_t *)(v72 + 16 * v74);
                      goto LABEL_100;
                    }
                  }
LABEL_99:
                  v75 = (uint64_t *)(v72 + 16 * v73);
                }
LABEL_100:
                v79 = (_QWORD *)v75[1];
                v82 = *v79;
                v81 = (char *)(v79 + 2);
                v80 = v82;
              }
              else
              {
                v80 = 0;
                v81 = &byte_1C871356D;
              }
              v83 = (llvm::Type *)*(unsigned int *)(v39[5] + 4);
              v598 = 773;
              v594 = (const char **)v81;
              v595 = v80;
              v596 = ".wineh.spillslot";
              v84 = *((_QWORD *)v38 + 10);
              if (v84)
                v85 = v84 - 24;
              else
                v85 = 0;
              v86 = *(_QWORD *)(v85 + 48);
              if (v86)
                v87 = v86 - 24;
              else
                v87 = 0;
              llvm::AllocaInst::AllocaInst((uint64_t)(v69 + 8), v70, v83, 0, (uint64_t)&v594, v87);
              v62 = *(_QWORD *)(v60 + 24);
              v63 = *(unsigned __int8 *)(v62 + 16);
              if (!v62)
                goto LABEL_111;
              goto LABEL_108;
            }
            v195 = operator new(0x68uLL);
            v59 = (llvm::Value *)(v195 + 8);
            v195[13] = v195[13] & 0x38000000 | 1;
            *(_QWORD *)v195 = 0;
            *((_QWORD *)v195 + 1) = 0;
            *((_QWORD *)v195 + 2) = 0;
            *((_QWORD *)v195 + 3) = v195 + 8;
            v196 = *(llvm::PointerType **)v54;
            v197 = v54 >> 4;
            if ((*(_BYTE *)(v54 + 23) & 0x10) != 0)
              break;
            v207 = 0;
            v208 = &byte_1C871356D;
LABEL_251:
            v210 = (llvm::Type *)*(unsigned int *)(v39[5] + 4);
            v598 = 773;
            v594 = (const char **)v208;
            v595 = v207;
            v596 = ".wineh.spillslot";
            v211 = *((_QWORD *)v38 + 10);
            if (v211)
              v212 = v211 - 24;
            else
              v212 = 0;
            v213 = *(_QWORD *)(v212 + 48);
            if (v213)
              v214 = v213 - 24;
            else
              v214 = 0;
            llvm::AllocaInst::AllocaInst((uint64_t)(v195 + 8), v196, v210, 0, (uint64_t)&v594, v214);
            v215 = operator new(0x60uLL);
            v216 = (llvm::Value *)(v215 + 8);
            v215[13] = v215[13] & 0x38000000 | 1;
            *(_QWORD *)v215 = 0;
            *((_QWORD *)v215 + 1) = 0;
            *((_QWORD *)v215 + 2) = 0;
            *((_QWORD *)v215 + 3) = v215 + 8;
            v217 = *(llvm::PointerType **)v54;
            if ((*(_BYTE *)(v54 + 23) & 0x10) != 0)
            {
              v218 = **(_QWORD **)v217;
              v219 = *(_QWORD *)(v218 + 152);
              v220 = *(unsigned int *)(v218 + 168);
              if (!(_DWORD)v220)
                goto LABEL_264;
              LODWORD(v221) = (v220 - 1) & (v197 ^ (v54 >> 9));
              v222 = (uint64_t *)(v219 + 16 * v221);
              v223 = *v222;
              if (*v222 != v54)
              {
                v224 = 1;
                while (v223 != -4096)
                {
                  v225 = v221 + v224++;
                  v221 = v225 & (v220 - 1);
                  v223 = *(_QWORD *)(v219 + 16 * v221);
                  if (v223 == v54)
                  {
                    v222 = (uint64_t *)(v219 + 16 * v221);
                    goto LABEL_265;
                  }
                }
LABEL_264:
                v222 = (uint64_t *)(v219 + 16 * v220);
              }
LABEL_265:
              v226 = (_QWORD *)v222[1];
              v229 = *v226;
              v228 = (char *)(v226 + 2);
              v227 = v229;
              goto LABEL_266;
            }
            v227 = 0;
            v228 = &byte_1C871356D;
LABEL_266:
            v230 = v55 + 40;
            v598 = 773;
            v594 = (const char **)v228;
            v595 = v227;
            v596 = ".wineh.reload";
            for (mm = *(_QWORD *)(v55 + 48); mm != v230; mm = *(_QWORD *)(mm + 8))
            {
              v232 = mm - 24;
              if (!mm)
                v232 = 0;
              if (*(_BYTE *)(v232 + 16) != 83)
              {
                v233 = *(unsigned __int8 *)(mm - 8) - 38;
                v245 = v233 > 0x38;
                v234 = (1 << v233) & 0x100060000000001;
                if (v245 || v234 == 0)
                  v230 = mm;
                else
                  v230 = *(_QWORD *)(mm + 8);
                break;
              }
            }
            if (v230)
              v236 = v230 - 24;
            else
              v236 = 0;
            llvm::LoadInst::LoadInst((uint64_t)(v215 + 8), (uint64_t)v217, (uint64_t)v59, (uint64_t)&v594, 0, v236);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v54, v216, (llvm::Value *)1);
LABEL_281:
            v594 = &v596;
            HIDWORD(v595) = 4;
            v596 = *(const char **)(v54 + 40);
            v597 = v54;
            v237 = 1;
            do
            {
              v238 = &v594[2 * v237];
              v239 = (uint64_t)*(v238 - 2);
              v240 = (uint64_t)*(v238 - 1);
              LODWORD(v595) = v237 - 1;
              if (v240 && *(_BYTE *)(v240 + 16) == 83 && *(_QWORD *)(v240 + 40) == v239)
              {
                v249 = *(_DWORD *)(v240 + 20) & 0x7FFFFFF;
                if ((_DWORD)v249)
                {
                  v250 = 0;
                  v251 = 0;
                  v252 = 32 * v249;
                  do
                  {
                    v253 = *(_DWORD *)(v240 + 20);
                    if ((v253 & 0x40000000) != 0)
                      v254 = *(_QWORD *)(v240 - 8);
                    else
                      v254 = v240 - 32 * (v253 & 0x7FFFFFF);
                    v10 = *(unsigned __int8 **)(v254 + v251);
                    if (v10[16] - 11 >= 2)
                      sub_1C52E30E8(*(llvm::StoreInst **)(v254 + 32 * *(unsigned int *)(v240 + 60) + v250), (llvm::Value *)v10, v59, (uint64_t)&v594);
                    v251 += 32;
                    v250 += 8;
                  }
                  while (v252 != v251);
                }
              }
              else
              {
                v241 = *(_QWORD *)(v239 + 8);
                if (v241)
                {
                  while (1)
                  {
                    v242 = *(_QWORD *)(v241 + 24);
                    v243 = *(unsigned __int8 *)(v242 + 16);
                    v244 = v242 && v243 >= 0x1C;
                    v245 = !v244 || v243 - 29 > 0xA;
                    if (!v245)
                      break;
                    v241 = *(_QWORD *)(v241 + 8);
                    if (!v241)
                      goto LABEL_314;
                  }
LABEL_296:
                  sub_1C52E30E8(*(llvm::StoreInst **)(v242 + 40), (llvm::Value *)v240, v59, (uint64_t)&v594);
                  while (1)
                  {
                    v241 = *(_QWORD *)(v241 + 8);
                    if (!v241)
                      break;
                    v242 = *(_QWORD *)(v241 + 24);
                    v246 = *(unsigned __int8 *)(v242 + 16);
                    if (v242)
                      v247 = v246 >= 0x1C;
                    else
                      v247 = 0;
                    if (v247 && v246 - 29 < 0xB)
                      goto LABEL_296;
                  }
                }
              }
LABEL_314:
              v237 = v595;
            }
            while ((_DWORD)v595);
            if (v594 != &v596)
              free(v594);
            v38 = v569;
LABEL_318:
            v255 = v590;
            if (v590 >= (unint64_t)HIDWORD(v590))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v589, (uint64_t)&v591, v590 + 1, 8);
              v255 = v590;
            }
            v43 = v566;
            *((_QWORD *)v589 + v255) = v54;
            v41 = v590 + 1;
            LODWORD(v590) = v590 + 1;
            if (v566 != v562)
            {
              v256 = v566 - 24;
              if (!v566)
                v256 = 0;
              v257 = *(unsigned __int8 *)(v256 + 16);
              v54 = v257 == 83 ? v256 : 0;
              if (v566 && v257 == 83)
                continue;
            }
            goto LABEL_332;
          }
          v198 = **(_QWORD **)v196;
          v199 = *(_QWORD *)(v198 + 152);
          v200 = *(unsigned int *)(v198 + 168);
          if ((_DWORD)v200)
          {
            LODWORD(v201) = (v200 - 1) & (v197 ^ (v54 >> 9));
            v202 = (uint64_t *)(v199 + 16 * v201);
            v203 = *v202;
            if (*v202 != v54)
            {
              v204 = 1;
              while (v203 != -4096)
              {
                v205 = v201 + v204++;
                v201 = v205 & (v200 - 1);
                v203 = *(_QWORD *)(v199 + 16 * v201);
                if (v203 == v54)
                {
                  v202 = (uint64_t *)(v199 + 16 * v201);
                  goto LABEL_250;
                }
              }
              goto LABEL_249;
            }
          }
          else
          {
LABEL_249:
            v202 = (uint64_t *)(v199 + 16 * v200);
          }
LABEL_250:
          v206 = (_QWORD *)v202[1];
          v209 = *v206;
          v208 = (char *)(v206 + 2);
          v207 = v209;
          goto LABEL_251;
        }
      }
    }
LABEL_332:
    v40 = v560;
    if (v560 != v557)
      continue;
    break;
  }
  v258 = (uint64_t *)v589;
  if (v41)
  {
    v259 = 8 * v41;
    do
    {
      v260 = *v258++;
      v261 = llvm::UndefValue::get(*(llvm::UndefValue **)v260, (llvm::Type *)v10);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v260, v261, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v260 + 40) + 40, (uint64_t ***)v260);
      v262 = *(_QWORD *)(v260 + 24);
      v263 = *(_QWORD **)(v260 + 32);
      *v263 = v262;
      *(_QWORD *)(v262 + 8) = v263;
      *(_QWORD *)(v260 + 24) = 0;
      *(_QWORD *)(v260 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v260);
      v259 -= 8;
    }
    while (v259);
    v258 = (uint64_t *)v589;
  }
  if (v258 != (uint64_t *)&v591)
    free(v258);
LABEL_339:
  if (!byte_1ED803DF0)
  {
    v264 = (_QWORD *)v39[12];
    v559 = (_QWORD *)v39[13];
    if (v264 != v559)
    {
      do
      {
        for (nn = *(_QWORD *)(*v264 + 48); ; nn = *(_QWORD *)(nn + 8))
        {
          v266 = nn - 24;
          v267 = nn ? nn - 24 : 0;
          if (*(_BYTE *)(v267 + 16) != 83)
            break;
        }
        v563 = 0;
        v567 = 0;
        v268 = *(unsigned __int8 *)(nn - 8) - 79;
        if (v268 >= 2)
          v269 = 0;
        else
          v269 = v266;
        v572 = v268;
        if (v268 <= 1)
        {
          v270 = *(unsigned __int8 *)(v266 + 16);
          if (v270 == 80)
            v271 = v266;
          else
            v271 = 0;
          v563 = v271;
          if (v270 != 79)
            v266 = 0;
          v567 = v266;
        }
        v273 = (llvm **)v264[1];
        v272 = (llvm **)v264[2];
        v561 = v264;
        while (v273 != v272)
        {
          v274 = *v273;
          v275 = (_QWORD *)((char *)*v273 + 40);
          for (i1 = (_QWORD *)*((_QWORD *)*v273 + 6); i1 != v275; i1 = (_QWORD *)i1[1])
          {
            if (i1)
              v277 = (unsigned __int8 *)(i1 - 3);
            else
              v277 = 0;
            v278 = v277[16] - 33;
            v245 = v278 > 0x33;
            v279 = (1 << v278) & 0x8000000000041;
            if (!v245 && v279 != 0)
            {
              sub_1C5062CEC((uint64_t)(i1 - 3), 1, (uint64_t)&v589);
              v281 = (_BYTE)v592 ? *(_QWORD *)v589 : 0;
              if (v281 != v269
                && ((v282 = llvm::Value::stripPointerCasts((llvm::Value *)*(i1 - 7))) == 0
                 || *((_BYTE *)v282 + 16)
                 || ((*((_BYTE *)v282 + 33) & 0x20) == 0
                  || ((v283 = i1[5]) == 0 || (*(_BYTE *)(v283 + 16) & 0x20) == 0)
                  && (llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)(i1 - 3), 37) & 1) == 0)
                 && *(_BYTE *)(*(i1 - 7) + 16) != 24))
              {
                if (*((_BYTE *)i1 - 8) == 33)
                {
                  llvm::removeUnwindEdge(v274, 0, v11);
                  v284 = *((_QWORD *)v274 + 5);
                  if (v284)
                    v285 = v284 - 24;
                  else
                    v285 = 0;
                  if (*(unsigned __int8 *)(v285 + 16) - 29 >= 0xB)
                    v285 = 0;
                  v286 = *(_QWORD *)(v285 + 24);
                  if (v286)
                    v287 = (llvm *)(v286 - 24);
                  else
                    v287 = 0;
                }
                else
                {
                  v287 = (llvm *)v277;
                }
                llvm::changeToUnreachable(v287, 0, 0, 0, v13);
                break;
              }
            }
          }
          v288 = (_QWORD *)*v275;
          if ((_QWORD *)*v275 == v275)
          {
            v289 = 0;
            v296 = 0;
            v295 = 0;
            v294 = MEMORY[0x10];
          }
          else
          {
            v289 = (llvm *)(v288 - 3);
            v290 = v288 == 0;
            if (v288)
              v291 = v288 - 3;
            else
              v291 = 0;
            v292 = *((unsigned __int8 *)v291 + 16) - 40;
            if (v292 >= 0xFFFFFFF5)
              v293 = v291;
            else
              v293 = 0;
            v294 = *((unsigned __int8 *)v293 + 16);
            if (v292 < 0xFFFFFFF5)
              v290 = 1;
            if (v294 != 37 || v290)
            {
              if (v294 != 36)
                v290 = 1;
              if (v290)
              {
                v296 = 0;
                v295 = 0;
              }
              else
              {
                v296 = 0;
                v295 = v293[-4 * (*((_DWORD *)v293 + 5) & 0x7FFFFFF)] != v567;
                v294 = 36;
              }
            }
            else
            {
              v295 = 0;
              v296 = *(v293 - 8) != v563;
              v294 = 37;
            }
          }
          v297 = v294 != 29 || v572 >= 2;
          if (!v297 || v296 || v295)
          {
            llvm::changeToUnreachable(v289, 0, 0, 0, v13);
          }
          else if (v294 == 33 && *(_DWORD *)(v565 + 32) == 9)
          {
            if (v567)
              llvm::removeUnwindEdge(v274, 0, v11);
          }
          ++v273;
        }
        v264 = v561 + 4;
        v39 = (_QWORD *)v565;
        v38 = v569;
      }
      while (v561 + 4 != v559);
    }
    v298 = *((_QWORD *)v38 + 10);
    if (v298 != v557)
    {
      do
      {
        v299 = *(_QWORD *)(v298 + 8);
        if (v298)
          v300 = (_QWORD *)(v298 - 24);
        else
          v300 = 0;
        llvm::SimplifyInstructionsInBlock(v300, 0, (uint64_t)v11, (uint64_t)v12, v13, v14);
        llvm::ConstantFoldTerminator((uint64_t)v300, 1, 0, 0);
        llvm::MergeBlockIntoPredecessor((uint64_t)v300, 0, 0, 0, 0, 0);
        v298 = v299;
      }
      while (v299 != v557);
    }
    llvm::removeUnreachableBlocks(v569, 0, 0, v12);
  }
  sub_1C621E674(v570);
  sub_1C621E714((uint64_t)(v39 + 9));
}

void sub_1C52E1318(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_1C52E1390(uint64_t *result, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  char *v14;
  _QWORD v15[5];

  v3 = result;
  v4 = result[2];
  v5 = (_QWORD *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    v7 = ((uint64_t)v5 - *result) >> 5;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 59)
      abort();
    v9 = v4 - *result;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    v15[4] = result + 2;
    if (v10 >> 59)
      sub_1C4764EE4();
    v11 = (char *)operator new(32 * v10);
    v12 = *a2;
    v13 = a2[1];
    v14 = &v11[32 * v7];
    v15[0] = v11;
    v15[1] = v14;
    *((_QWORD *)v14 + 2) = 0;
    *((_QWORD *)v14 + 3) = 0;
    *(_OWORD *)v14 = v12;
    *((_OWORD *)v14 + 1) = v13;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v15[2] = v14 + 32;
    v15[3] = &v11[32 * v10];
    sub_1C621E810(v3, v15);
    v6 = (_QWORD *)v3[1];
    result = (uint64_t *)sub_1C621E888((uint64_t)v15);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = 0;
    *(_OWORD *)(v5 + 1) = *(__int128 *)((char *)a2 + 8);
    v5[3] = *((_QWORD *)a2 + 3);
    v6 = v5 + 4;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
  }
  v3[1] = (uint64_t)v6;
  return result;
}

_QWORD *sub_1C52E1494@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _DWORD *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *result;
  uint64_t v12;
  char v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  _QWORD *v18;

  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    v18 = 0;
LABEL_17:
    result = sub_1C4DE3FA0(a1, (uint64_t)a2, a2, v18);
    *result = *a2;
    *((_DWORD *)result + 2) = *a3;
    v9 = *(_QWORD *)a1;
    v8 = *(_DWORD *)(a1 + 16);
    v13 = 1;
    goto LABEL_4;
  }
  v9 = *(_QWORD *)a1;
  v10 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v8 - 1);
  result = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
  v12 = *result;
  if (*a2 != *result)
  {
    v14 = 0;
    v15 = 1;
    while (v12 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v12 == -8192;
      if (v16)
        v14 = result;
      v17 = v10 + v15++;
      v10 = v17 & (v8 - 1);
      result = (_QWORD *)(v9 + 16 * v10);
      v12 = *result;
      if (*a2 == *result)
        goto LABEL_3;
    }
    if (v14)
      v18 = v14;
    else
      v18 = result;
    goto LABEL_17;
  }
LABEL_3:
  v13 = 0;
LABEL_4:
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v9 + 16 * v8;
  *(_BYTE *)(a4 + 16) = v13;
  return result;
}

uint64_t sub_1C52E1584(uint64_t result, _DWORD *a2, int a3)
{
  int v3;
  _QWORD **v6;
  int v7;
  uint64_t *v8;
  _QWORD **v9;
  int v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  _QWORD *v18;
  _QWORD **v19;
  _QWORD **v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v3 = a2[5] & 0x7FFFFFF;
  if (v3)
  {
    v6 = (_QWORD **)result;
    v7 = 0;
    v8 = (uint64_t *)(*(_QWORD *)(result + 8) + 48);
    v9 = (_QWORD **)(result + 16);
    do
    {
      v26 = 0;
      v10 = a2[5];
      if ((v10 & 0x40000000) != 0)
        v11 = (_DWORD *)*((_QWORD *)a2 - 1);
      else
        v11 = &a2[-8 * (v10 & 0x7FFFFFF)];
      v26 = *(_QWORD *)&v11[8 * a2[15] + 2 * v7];
      v12 = *(_QWORD *)(v26 + 40);
      if (v12 == v26 + 40)
        goto LABEL_33;
      v13 = v12 - 24;
      if (!v12)
        v13 = 0;
      v14 = *(unsigned __int8 *)(v13 + 16) - 40;
      if (v14 < 0xFFFFFFF5)
        v13 = 0;
      if (v12 && (*(_BYTE *)(v13 + 16) == 37 ? (v15 = v14 >= 0xFFFFFFF5) : (v15 = 0), v15))
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v13 - 64) - 32);
        v17 = *(_DWORD *)(v16 + 20);
        if ((v17 & 0x40000000) != 0)
          v18 = *(_QWORD **)(v16 - 8);
        else
          v18 = (_QWORD *)(v16 - 32 * (v17 & 0x7FFFFFF));
        v19 = v6;
      }
      else
      {
LABEL_33:
        result = (uint64_t)sub_1C61912D8(v8, &v26);
        v25 = *(_QWORD *)(result + 8);
        v20 = (_QWORD **)(v25 & 0xFFFFFFFFFFFFFFF8);
        v19 = v9;
        if ((v25 & 4) == 0)
          goto LABEL_22;
        v18 = *v20;
        v19 = v9;
      }
      v20 = (_QWORD **)*v18;
LABEL_22:
      if ((((v20 == (_QWORD **)**v19) ^ a3) & 1) == 0)
      {
        v21 = a2[5];
        v22 = v21 & 0x7FFFFFF;
        if ((v21 & 0x7FFFFFF) != 0)
        {
          v23 = 0;
          while (1)
          {
            v24 = &a2[-8 * v22];
            if ((v21 & 0x40000000) != 0)
              v24 = (_DWORD *)*((_QWORD *)a2 - 1);
            if (*(_QWORD *)&v24[8 * a2[15] + 2 * v23] == v26)
              break;
            if (v22 == ++v23)
              goto LABEL_29;
          }
        }
        else
        {
LABEL_29:
          LODWORD(v23) = -1;
        }
        result = llvm::PHINode::removeIncomingValue((llvm::PHINode *)a2, v23, 0);
        --v7;
        --v3;
      }
      ++v7;
    }
    while (v7 != v3);
  }
  return result;
}

_QWORD *sub_1C52E1724(_QWORD *result)
{
  uint64_t v1;
  int32x2_t ****v2;
  int32x2_t *v4;
  __int32 v5;
  __int32 v6;
  uint64_t v7;
  _QWORD *v8;
  int32x2_t ****v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v14;
  int32x2_t ****v15;
  int32x2_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  int32x2_t *****v21;
  int32x2_t ****v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  int32x2_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  int32x2_t *v40;
  unint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  int v47;
  int v48;
  unint64_t v49;
  unint64_t *v50;
  int32x2_t ****v51;
  int32x2_t *v52;

  v1 = result[1];
  v49 = v1 & 6;
  v50 = 0;
  v2 = (int32x2_t ****)result[3];
  v51 = v2;
  if (v2 != (int32x2_t ****)-8192 && v2 != (int32x2_t ****)-4096 && v2 != 0)
  {
    v50 = *(unint64_t **)(v1 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) = &v49;
    v49 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (v50)
      *v50 = *v50 & 7 | (unint64_t)&v50;
    v2 = v51;
  }
  v4 = (int32x2_t *)result[4];
  v52 = v4;
  v5 = v4[2].i32[0];
  if (v5)
  {
    v6 = v5 - 1;
    v7 = (v5 - 1) & ((v2 >> 4) ^ (v2 >> 9));
    v8 = (_QWORD *)(*(_QWORD *)v4 + (v7 << 6));
    v9 = (int32x2_t ****)v8[3];
    if (v2 == v9)
    {
LABEL_14:
      v12 = v8[7];
      if (v12 && v12 != -8192 && v12 != -4096)
      {
        v25 = v8[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v25 = v8[6];
        v26 = (unint64_t *)v8[6];
        if (v26)
        {
          *v26 = *v26 & 7 | v25;
        }
        else
        {
          v27 = v8[7];
          v28 = ***(int32x2_t ****)v27;
          v29 = (unint64_t)v28[303];
          if (v29 <= v25)
          {
            v30 = v28[305].u32[0];
            if (v29 + 16 * v30 > v25)
            {
              v31 = v30 - 1;
              LODWORD(v32) = v31 & ((v27 >> 4) ^ (v27 >> 9));
              v33 = (uint64_t *)(v29 + 16 * v32);
              v34 = *v33;
              if (v27 == *v33)
              {
LABEL_48:
                *v33 = -8192;
                v28[304] = vadd_s32(v28[304], (int32x2_t)0x1FFFFFFFFLL);
                v27 = v8[7];
              }
              else
              {
                v35 = 1;
                while (v34 != -4096)
                {
                  v36 = v32 + v35++;
                  v32 = v36 & v31;
                  v34 = *(_QWORD *)(v29 + 16 * v32);
                  if (v27 == v34)
                  {
                    v33 = (uint64_t *)(v29 + 16 * v32);
                    goto LABEL_48;
                  }
                }
              }
              *(_BYTE *)(v27 + 17) &= ~1u;
            }
          }
        }
        v2 = (int32x2_t ****)v8[3];
      }
      if (v2 != (int32x2_t ****)-8192)
      {
        if (v2 != (int32x2_t ****)-4096 && v2 != 0)
        {
          v37 = v8[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v37 = v8[2];
          v38 = (unint64_t *)v8[2];
          if (v38)
          {
            *v38 = *v38 & 7 | v37;
          }
          else
          {
            v39 = v8[3];
            v40 = ***(int32x2_t ****)v39;
            v41 = (unint64_t)v40[303];
            if (v41 <= v37)
            {
              v42 = v40[305].u32[0];
              if (v41 + 16 * v42 > v37)
              {
                v43 = v42 - 1;
                LODWORD(v44) = v43 & ((v39 >> 4) ^ (v39 >> 9));
                v45 = (uint64_t *)(v41 + 16 * v44);
                v46 = *v45;
                if (v39 == *v45)
                {
LABEL_58:
                  *v45 = -8192;
                  v40[304] = vadd_s32(v40[304], (int32x2_t)0x1FFFFFFFFLL);
                  v39 = v8[3];
                }
                else
                {
                  v47 = 1;
                  while (v46 != -4096)
                  {
                    v48 = v44 + v47++;
                    v44 = v48 & v43;
                    v46 = *(_QWORD *)(v41 + 16 * v44);
                    if (v39 == v46)
                    {
                      v45 = (uint64_t *)(v41 + 16 * v44);
                      goto LABEL_58;
                    }
                  }
                }
                *(_BYTE *)(v39 + 17) &= ~1u;
              }
            }
          }
        }
        v8[3] = -8192;
      }
      v8[4] = 0;
      v4[1] = vadd_s32(v4[1], (int32x2_t)0x1FFFFFFFFLL);
      v2 = v51;
    }
    else
    {
      v10 = 1;
      while (v9 != (int32x2_t ****)-4096)
      {
        v11 = v7 + v10++;
        v7 = v11 & v6;
        v8 = (_QWORD *)(*(_QWORD *)v4 + (v7 << 6));
        v9 = (int32x2_t ****)v8[3];
        if (v2 == v9)
          goto LABEL_14;
      }
    }
  }
  if (v2 != (int32x2_t ****)-8192 && v2 != (int32x2_t ****)-4096 && v2)
  {
    v14 = v49 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFF8) = v50;
    if (v50)
    {
      *v50 = *v50 & 7 | v14;
    }
    else
    {
      v15 = v51;
      v16 = ***v51;
      v17 = (unint64_t)v16[303];
      if (v17 <= v14)
      {
        v18 = v16[305].u32[0];
        if (v17 + 16 * v18 > v14)
        {
          v19 = v18 - 1;
          LODWORD(v20) = v19 & ((v51 >> 4) ^ (v51 >> 9));
          v21 = (int32x2_t *****)(v17 + 16 * v20);
          v22 = *v21;
          if (v51 == *v21)
          {
LABEL_34:
            *v21 = (int32x2_t ****)-8192;
            v16[304] = vadd_s32(v16[304], (int32x2_t)0x1FFFFFFFFLL);
            v15 = v51;
          }
          else
          {
            v23 = 1;
            while (v22 != (int32x2_t ****)-4096)
            {
              v24 = v20 + v23++;
              v20 = v24 & v19;
              v22 = *(int32x2_t *****)(v17 + 16 * v20);
              if (v51 == v22)
              {
                v21 = (int32x2_t *****)(v17 + 16 * v20);
                goto LABEL_34;
              }
            }
          }
          *((_BYTE *)v15 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C52E1AC0(_QWORD *result, int32x2_t ****a2)
{
  uint64_t v2;
  int32x2_t ****v3;
  int32x2_t *v5;
  int32x2_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  int32x2_t ****v10;
  int v11;
  int v12;
  int32x2_t ****v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  int32x2_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int32x2_t ****v32;
  int32x2_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int32x2_t *****v38;
  int32x2_t ****v39;
  int v40;
  int v41;
  unint64_t v42;
  int32x2_t ****v43;
  int32x2_t *v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  int32x2_t *****v49;
  int32x2_t ****v50;
  int v51;
  int v52;
  unint64_t v54;
  int32x2_t ****v55;
  int32x2_t *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  int32x2_t *****v61;
  int32x2_t ****v62;
  int v63;
  int v64;
  unint64_t v65;
  unint64_t *v66;
  uint64_t v67;
  int32x2_t *v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  int v75;
  int v76;
  char v77[24];
  int32x2_t ****v78;
  uint64_t v79;
  unint64_t *v80;
  int32x2_t ****v81;
  uint64_t v82;
  unint64_t *v83;
  int32x2_t ****v84;
  void *v85;
  unint64_t v86;
  unint64_t *v87;
  int32x2_t ****v88;
  int32x2_t *v89;

  v2 = result[1];
  v86 = v2 & 6;
  v87 = 0;
  v3 = (int32x2_t ****)result[3];
  v88 = v3;
  if (v3 != (int32x2_t ****)-8192 && v3 != (int32x2_t ****)-4096 && v3 != 0)
  {
    v87 = *(unint64_t **)(v2 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(v2 & 0xFFFFFFFFFFFFFFF8) = &v86;
    v86 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if (v87)
      *v87 = *v87 & 7 | (unint64_t)&v87;
  }
  v5 = (int32x2_t *)result[4];
  v85 = &unk_1E814DA10;
  v89 = v5;
  v6 = *v5;
  v7 = v5[2].u32[0];
  if ((_DWORD)v7)
  {
    v8 = ((v88 >> 4) ^ (v88 >> 9)) & ((_DWORD)v7 - 1);
    v9 = (_QWORD *)(*(_QWORD *)&v6 + (v8 << 6));
    v10 = (int32x2_t ****)v9[3];
    if (v88 == v10)
      goto LABEL_15;
    v11 = 1;
    while (v10 != (int32x2_t ****)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & (v7 - 1);
      v9 = (_QWORD *)(*(_QWORD *)&v6 + (v8 << 6));
      v10 = (int32x2_t ****)v9[3];
      if (v88 == v10)
        goto LABEL_15;
    }
  }
  v9 = (_QWORD *)(*(_QWORD *)&v6 + (v7 << 6));
LABEL_15:
  if ((_QWORD *)(*(_QWORD *)&v6 + (v7 << 6)) != v9)
  {
    v82 = 6;
    v83 = 0;
    v13 = (int32x2_t ****)v9[7];
    v84 = v13;
    if (v13 && v13 != (int32x2_t ****)-8192 && v13 != (int32x2_t ****)-4096)
    {
      v14 = v9[5] & 0xFFFFFFFFFFFFFFF8;
      v83 = *(unint64_t **)v14;
      *(_QWORD *)v14 = &v82;
      v82 = v14 | 6;
      if (v83)
        *v83 = *v83 & 7 | (unint64_t)&v83;
      v5 = v89;
      v13 = (int32x2_t ****)v9[7];
    }
    if (v13 && v13 != (int32x2_t ****)-8192 && v13 != (int32x2_t ****)-4096)
    {
      v15 = v9[5] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v15 = v9[6];
      v16 = (unint64_t *)v9[6];
      if (v16)
      {
        *v16 = *v16 & 7 | v15;
      }
      else
      {
        v17 = v9[7];
        v18 = ***(int32x2_t ****)v17;
        v19 = (unint64_t)v18[303];
        if (v19 <= v15)
        {
          v20 = v18[305].u32[0];
          if (v19 + 16 * v20 > v15)
          {
            v21 = v20 - 1;
            LODWORD(v22) = v21 & ((v17 >> 4) ^ (v17 >> 9));
            v23 = (uint64_t *)(v19 + 16 * v22);
            v24 = *v23;
            if (v17 == *v23)
            {
LABEL_33:
              *v23 = -8192;
              v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
              v17 = v9[7];
            }
            else
            {
              v25 = 1;
              while (v24 != -4096)
              {
                v26 = v22 + v25++;
                v22 = v26 & v21;
                v24 = *(_QWORD *)(v19 + 16 * v22);
                if (v17 == v24)
                {
                  v23 = (uint64_t *)(v19 + 16 * v22);
                  goto LABEL_33;
                }
              }
            }
            *(_BYTE *)(v17 + 17) &= ~1u;
          }
        }
      }
    }
    v27 = v9[3];
    if (v27 != -8192)
    {
      if (v27 != -4096 && v27 != 0)
      {
        v65 = v9[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v65 = v9[2];
        v66 = (unint64_t *)v9[2];
        if (v66)
        {
          *v66 = *v66 & 7 | v65;
        }
        else
        {
          v67 = v9[3];
          v68 = ***(int32x2_t ****)v67;
          v69 = (unint64_t)v68[303];
          if (v69 <= v65)
          {
            v70 = v68[305].u32[0];
            if (v69 + 16 * v70 > v65)
            {
              v71 = v70 - 1;
              LODWORD(v72) = v71 & ((v67 >> 4) ^ (v67 >> 9));
              v73 = (uint64_t *)(v69 + 16 * v72);
              v74 = *v73;
              if (v67 == *v73)
              {
LABEL_101:
                *v73 = -8192;
                v68[304] = vadd_s32(v68[304], (int32x2_t)0x1FFFFFFFFLL);
                v67 = v9[3];
              }
              else
              {
                v75 = 1;
                while (v74 != -4096)
                {
                  v76 = v72 + v75++;
                  v72 = v76 & v71;
                  v74 = *(_QWORD *)(v69 + 16 * v72);
                  if (v67 == v74)
                  {
                    v73 = (uint64_t *)(v69 + 16 * v72);
                    goto LABEL_101;
                  }
                }
              }
              *(_BYTE *)(v67 + 17) &= ~1u;
            }
          }
        }
      }
      v9[3] = -8192;
    }
    v9[4] = 0;
    v5[1] = vadd_s32(v5[1], (int32x2_t)0x1FFFFFFFFLL);
    v29 = (uint64_t)v89;
    v78 = a2;
    v79 = 6;
    v80 = 0;
    v81 = v84;
    if (v84)
    {
      if (v84 != (int32x2_t ****)-8192 && v84 != (int32x2_t ****)-4096)
      {
        v30 = v82 & 0xFFFFFFFFFFFFFFF8;
        v80 = *(unint64_t **)(v82 & 0xFFFFFFFFFFFFFFF8);
        *(_QWORD *)v30 = &v79;
        v79 = v30 | 6;
        if (v80)
          *v80 = *v80 & 7 | (unint64_t)&v80;
      }
    }
    result = sub_1C52E21BC(v29, &v78, (uint64_t)v77);
    if (v81 && v81 != (int32x2_t ****)-8192 && v81 != (int32x2_t ****)-4096)
    {
      v31 = v79 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v79 & 0xFFFFFFFFFFFFFFF8) = v80;
      if (v80)
      {
        *v80 = *v80 & 7 | v31;
      }
      else
      {
        v32 = v81;
        v33 = ***v81;
        v34 = (unint64_t)v33[303];
        if (v34 <= v31)
        {
          v35 = v33[305].u32[0];
          if (v34 + 16 * v35 > v31)
          {
            v36 = v35 - 1;
            LODWORD(v37) = v36 & ((v81 >> 4) ^ (v81 >> 9));
            v38 = (int32x2_t *****)(v34 + 16 * v37);
            v39 = *v38;
            if (v81 == *v38)
            {
LABEL_59:
              *v38 = (int32x2_t ****)-8192;
              v33[304] = vadd_s32(v33[304], (int32x2_t)0x1FFFFFFFFLL);
              v32 = v81;
            }
            else
            {
              v40 = 1;
              while (v39 != (int32x2_t ****)-4096)
              {
                v41 = v37 + v40++;
                v37 = v41 & v36;
                v39 = *(int32x2_t *****)(v34 + 16 * v37);
                if (v81 == v39)
                {
                  v38 = (int32x2_t *****)(v34 + 16 * v37);
                  goto LABEL_59;
                }
              }
            }
            *((_BYTE *)v32 + 17) &= ~1u;
          }
        }
      }
    }
    if (v84 && v84 != (int32x2_t ****)-8192 && v84 != (int32x2_t ****)-4096)
    {
      v42 = v82 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v82 & 0xFFFFFFFFFFFFFFF8) = v83;
      if (v83)
      {
        *v83 = *v83 & 7 | v42;
      }
      else
      {
        v43 = v84;
        v44 = ***v84;
        v45 = (unint64_t)v44[303];
        if (v45 <= v42)
        {
          v46 = v44[305].u32[0];
          if (v45 + 16 * v46 > v42)
          {
            v47 = v46 - 1;
            LODWORD(v48) = v47 & ((v84 >> 4) ^ (v84 >> 9));
            v49 = (int32x2_t *****)(v45 + 16 * v48);
            v50 = *v49;
            if (v84 == *v49)
            {
LABEL_73:
              *v49 = (int32x2_t ****)-8192;
              v44[304] = vadd_s32(v44[304], (int32x2_t)0x1FFFFFFFFLL);
              v43 = v84;
            }
            else
            {
              v51 = 1;
              while (v50 != (int32x2_t ****)-4096)
              {
                v52 = v48 + v51++;
                v48 = v52 & v47;
                v50 = *(int32x2_t *****)(v45 + 16 * v48);
                if (v84 == v50)
                {
                  v49 = (int32x2_t *****)(v45 + 16 * v48);
                  goto LABEL_73;
                }
              }
            }
            *((_BYTE *)v43 + 17) &= ~1u;
          }
        }
      }
    }
  }
  if (v88 != (int32x2_t ****)-8192 && v88 != (int32x2_t ****)-4096 && v88 != 0)
  {
    v54 = v86 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v86 & 0xFFFFFFFFFFFFFFF8) = v87;
    if (v87)
    {
      *v87 = *v87 & 7 | v54;
    }
    else
    {
      v55 = v88;
      v56 = ***v88;
      v57 = (unint64_t)v56[303];
      if (v57 <= v54)
      {
        v58 = v56[305].u32[0];
        if (v57 + 16 * v58 > v54)
        {
          v59 = v58 - 1;
          LODWORD(v60) = v59 & ((v88 >> 4) ^ (v88 >> 9));
          v61 = (int32x2_t *****)(v57 + 16 * v60);
          v62 = *v61;
          if (v88 == *v61)
          {
LABEL_89:
            *v61 = (int32x2_t ****)-8192;
            v56[304] = vadd_s32(v56[304], (int32x2_t)0x1FFFFFFFFLL);
            v55 = v88;
          }
          else
          {
            v63 = 1;
            while (v62 != (int32x2_t ****)-4096)
            {
              v64 = v60 + v63++;
              v60 = v64 & v59;
              v62 = *(int32x2_t *****)(v57 + 16 * v60);
              if (v88 == v62)
              {
                v61 = (int32x2_t *****)(v57 + 16 * v60);
                goto LABEL_89;
              }
            }
          }
          *((_BYTE *)v55 + 17) &= ~1u;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C52E2128(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int v12;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(a2 + 24);
    v5 = v3 - 1;
    v6 = ((v4 >> 4) ^ (v4 >> 9)) & (v3 - 1);
    v7 = *(_QWORD *)a1 + (v6 << 6);
    v8 = *(_QWORD *)(v7 + 24);
    if (v4 == v8)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v8 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v8 == -8192;
        if (v11)
          v9 = v7;
        v12 = v6 + v10++;
        v6 = v12 & v5;
        v7 = *(_QWORD *)a1 + (v6 << 6);
        v8 = *(_QWORD *)(v7 + 24);
        if (v4 == v8)
          goto LABEL_11;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
  *a3 = v7;
  return result;
}

_QWORD *sub_1C52E21BC@<X0>(uint64_t a1@<X0>, int32x2_t *****a2@<X1>, uint64_t a3@<X8>)
{
  int32x2_t ****v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  int32x2_t ****v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  int v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  int32x2_t ****v20;
  int32x2_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int32x2_t *****v26;
  int32x2_t ****v27;
  int v28;
  int v29;
  unint64_t v31;
  int32x2_t ****v32;
  int32x2_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  int32x2_t *****v38;
  int32x2_t ****v39;
  int v40;
  int v41;
  unint64_t v43;
  int32x2_t ****v44;
  int32x2_t *v45;
  unint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  int32x2_t *****v50;
  int32x2_t ****v51;
  int v52;
  int v53;
  void *v54;
  uint64_t v55;
  unint64_t *v56;
  int32x2_t ****v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  int32x2_t ****v62;
  uint64_t v63;
  unint64_t *v64;
  int32x2_t ****v65;

  v6 = *a2;
  v55 = 2;
  v56 = 0;
  v57 = v6;
  if (v6 != (int32x2_t ****)-8192 && v6 != (int32x2_t ****)-4096 && v6 != 0)
    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v55);
  v54 = &unk_1E814DA10;
  v58 = a1;
  sub_1C52E2DF0(&v59, &v54, a2 + 1);
  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
  {
    v18 = 0;
LABEL_21:
    result = sub_1C52E25A4(a1, v18, &v59, &v63);
    v9 = *(_QWORD *)a1;
    v8 = *(_DWORD *)(a1 + 16);
    v17 = 1;
    goto LABEL_22;
  }
  v9 = *(_QWORD *)a1;
  v10 = ((v62 >> 4) ^ (v62 >> 9)) & (v8 - 1);
  result = (_QWORD *)(*(_QWORD *)a1 + (v10 << 6));
  v12 = (int32x2_t ****)result[3];
  if (v62 != v12)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != (int32x2_t ****)-4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == (int32x2_t ****)-8192;
      if (v15)
        v13 = result;
      v16 = v10 + v14++;
      v10 = v16 & (v8 - 1);
      result = (_QWORD *)(v9 + (v10 << 6));
      v12 = (int32x2_t ****)result[3];
      if (v62 == v12)
        goto LABEL_17;
    }
    if (v13)
      v18 = (uint64_t)v13;
    else
      v18 = (uint64_t)result;
    goto LABEL_21;
  }
LABEL_17:
  v17 = 0;
LABEL_22:
  if (v65 && v65 != (int32x2_t ****)-8192 && v65 != (int32x2_t ****)-4096)
  {
    v19 = v63 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v63 & 0xFFFFFFFFFFFFFFF8) = v64;
    if (v64)
    {
      *v64 = *v64 & 7 | v19;
    }
    else
    {
      v20 = v65;
      v21 = ***v65;
      v22 = (unint64_t)v21[303];
      if (v22 <= v19)
      {
        v23 = v21[305].u32[0];
        if (v22 + 16 * v23 > v19)
        {
          v24 = v23 - 1;
          LODWORD(v25) = v24 & ((v65 >> 4) ^ (v65 >> 9));
          v26 = (int32x2_t *****)(v22 + 16 * v25);
          v27 = *v26;
          if (v65 == *v26)
          {
LABEL_33:
            *v26 = (int32x2_t ****)-8192;
            v21[304] = vadd_s32(v21[304], (int32x2_t)0x1FFFFFFFFLL);
            v20 = v65;
          }
          else
          {
            v28 = 1;
            while (v27 != (int32x2_t ****)-4096)
            {
              v29 = v25 + v28++;
              v25 = v29 & v24;
              v27 = *(int32x2_t *****)(v22 + 16 * v25);
              if (v65 == v27)
              {
                v26 = (int32x2_t *****)(v22 + 16 * v25);
                goto LABEL_33;
              }
            }
          }
          *((_BYTE *)v20 + 17) &= ~1u;
        }
      }
    }
  }
  if (v62 != (int32x2_t ****)-8192 && v62 != (int32x2_t ****)-4096 && v62 != 0)
  {
    v31 = v60 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v60 & 0xFFFFFFFFFFFFFFF8) = v61;
    if (v61)
    {
      *v61 = *v61 & 7 | v31;
    }
    else
    {
      v32 = v62;
      v33 = ***v62;
      v34 = (unint64_t)v33[303];
      if (v34 <= v31)
      {
        v35 = v33[305].u32[0];
        if (v34 + 16 * v35 > v31)
        {
          v36 = v35 - 1;
          LODWORD(v37) = v36 & ((v62 >> 4) ^ (v62 >> 9));
          v38 = (int32x2_t *****)(v34 + 16 * v37);
          v39 = *v38;
          if (v62 == *v38)
          {
LABEL_49:
            *v38 = (int32x2_t ****)-8192;
            v33[304] = vadd_s32(v33[304], (int32x2_t)0x1FFFFFFFFLL);
            v32 = v62;
          }
          else
          {
            v40 = 1;
            while (v39 != (int32x2_t ****)-4096)
            {
              v41 = v37 + v40++;
              v37 = v41 & v36;
              v39 = *(int32x2_t *****)(v34 + 16 * v37);
              if (v62 == v39)
              {
                v38 = (int32x2_t *****)(v34 + 16 * v37);
                goto LABEL_49;
              }
            }
          }
          *((_BYTE *)v32 + 17) &= ~1u;
        }
      }
    }
  }
  if (v57 != (int32x2_t ****)-8192 && v57 != (int32x2_t ****)-4096 && v57 != 0)
  {
    v43 = v55 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF8) = v56;
    if (v56)
    {
      *v56 = *v56 & 7 | v43;
    }
    else
    {
      v44 = v57;
      v45 = ***v57;
      v46 = (unint64_t)v45[303];
      if (v46 <= v43)
      {
        v47 = v45[305].u32[0];
        if (v46 + 16 * v47 > v43)
        {
          v48 = v47 - 1;
          LODWORD(v49) = v48 & ((v57 >> 4) ^ (v57 >> 9));
          v50 = (int32x2_t *****)(v46 + 16 * v49);
          v51 = *v50;
          if (v57 == *v50)
          {
LABEL_65:
            *v50 = (int32x2_t ****)-8192;
            v45[304] = vadd_s32(v45[304], (int32x2_t)0x1FFFFFFFFLL);
            v44 = v57;
          }
          else
          {
            v52 = 1;
            while (v51 != (int32x2_t ****)-4096)
            {
              v53 = v49 + v52++;
              v49 = v53 & v48;
              v51 = *(int32x2_t *****)(v46 + 16 * v49);
              if (v57 == v51)
              {
                v50 = (int32x2_t *****)(v46 + 16 * v49);
                goto LABEL_65;
              }
            }
          }
          *((_BYTE *)v44 + 17) &= ~1u;
        }
      }
    }
  }
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v9 + ((unint64_t)v8 << 6);
  *(_BYTE *)(a3 + 16) = v17;
  return result;
}

_QWORD *sub_1C52E25A4(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  int32x2_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;

  result = (_QWORD *)sub_1C52E278C(a1, (uint64_t)a3, (uint64_t)a3, a2);
  v7 = result[3];
  v8 = a3[3];
  if (v7 != v8)
  {
    v9 = v7 == -4096 || v7 == 0;
    if (!v9 && v7 != -8192)
    {
      v18 = result[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v18 = result[2];
      v19 = (unint64_t *)result[2];
      if (v19)
      {
        *v19 = *v19 & 7 | v18;
      }
      else
      {
        v20 = result[3];
        v21 = ***(int32x2_t ****)v20;
        v22 = (unint64_t)v21[303];
        if (v22 <= v18)
        {
          v23 = v21[305].u32[0];
          if (v22 + 16 * v23 > v18)
          {
            v24 = v23 - 1;
            LODWORD(v25) = v24 & ((v20 >> 4) ^ (v20 >> 9));
            v26 = (uint64_t *)(v22 + 16 * v25);
            v27 = *v26;
            if (v20 == *v26)
            {
LABEL_29:
              *v26 = -8192;
              v21[304] = vadd_s32(v21[304], (int32x2_t)0x1FFFFFFFFLL);
              v20 = result[3];
            }
            else
            {
              v28 = 1;
              while (v27 != -4096)
              {
                v29 = v25 + v28++;
                v25 = v29 & v24;
                v27 = *(_QWORD *)(v22 + 16 * v25);
                if (v20 == v27)
                {
                  v26 = (uint64_t *)(v22 + 16 * v25);
                  goto LABEL_29;
                }
              }
            }
            *(_BYTE *)(v20 + 17) &= ~1u;
          }
        }
      }
      v8 = a3[3];
    }
    result[3] = v8;
    if (v8 != -4096 && v8 != -8192 && v8 != 0)
    {
      v11 = a3[1];
      result[2] = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8) = result + 1;
      result[1] = v11 & 0xFFFFFFFFFFFFFFF8 | result[1] & 7;
      v12 = (unint64_t *)result[2];
      if (v12)
        *v12 = *v12 & 7 | (unint64_t)(result + 2);
    }
  }
  v13 = a3[4];
  result[5] = 6;
  v14 = result + 5;
  result[4] = v13;
  result[6] = 0;
  v15 = (unint64_t)(result + 6);
  v16 = a4[2];
  result[7] = v16;
  if (v16 && v16 != -8192 && v16 != -4096)
  {
    v17 = *a4 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v15 = *(_QWORD *)v17;
    *(_QWORD *)v17 = v14;
    *v14 = v17 | 6;
    if (*(_QWORD *)v15)
      **(_QWORD **)v15 = **(_QWORD **)v15 & 7 | v15;
  }
  return result;
}

uint64_t sub_1C52E278C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  BOOL v16;
  int v17;
  uint64_t v18;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C52E28C8(a1, 2 * v7);
    v9 = *(_DWORD *)(a1 + 16);
    if (v9)
    {
      v10 = *(_QWORD *)(a3 + 24);
      v11 = v9 - 1;
      v12 = ((v10 >> 4) ^ (v10 >> 9)) & v11;
      a4 = *(_QWORD *)a1 + (v12 << 6);
      v13 = *(_QWORD *)(a4 + 24);
      if (v10 != v13)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = a4;
          v17 = v12 + v15++;
          v12 = v17 & v11;
          a4 = *(_QWORD *)a1 + (v12 << 6);
          v13 = *(_QWORD *)(a4 + 24);
          if (v10 == v13)
            goto LABEL_4;
        }
        if (v14)
          a4 = v14;
      }
    }
    else
    {
      a4 = 0;
    }
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
    sub_1C52E28C8(a1, v7);
    v18 = 0;
    sub_1C52E2128(a1, a3, &v18);
    a4 = v18;
  }
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)(a4 + 24) != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

char *sub_1C52E28C8(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C52E29A0(a1, v4, &v4[8 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = v10 << 6;
    v12 = result + 16;
    do
    {
      *v12 = 0;
      v12[1] = -4096;
      *(v12 - 2) = &unk_1E814DA10;
      *(v12 - 1) = 2;
      v12[2] = 0;
      v12 += 8;
      v11 -= 64;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C52E29A0(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  int32x2_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  int32x2_t *v43;
  unint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  int32x2_t *v55;
  unint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  int v62;
  int v63;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = v3 << 6;
    v5 = (_QWORD *)(*(_QWORD *)result + 16);
    do
    {
      *v5 = 0;
      v5[1] = -4096;
      *(v5 - 2) = &unk_1E814DA10;
      *(v5 - 1) = 2;
      v5[2] = 0;
      v5 += 8;
      v4 -= 64;
    }
    while (v4);
  }
  for (; a2 != a3; a2 += 8)
  {
    v6 = a2[3];
    if ((v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v21 = *(_DWORD *)(result + 16) - 1;
      v22 = v21 & ((v6 >> 4) ^ (v6 >> 9));
      v23 = (_QWORD *)(*(_QWORD *)result + (v22 << 6));
      v24 = v23[3];
      if (v6 != v24)
      {
        v25 = 0;
        v26 = 1;
        while (v24 != -4096)
        {
          if (v25)
            v27 = 0;
          else
            v27 = v24 == -8192;
          if (v27)
            v25 = v23;
          v28 = v22 + v26++;
          v22 = v28 & v21;
          v23 = (_QWORD *)(*(_QWORD *)result + (v22 << 6));
          v24 = v23[3];
          if (v6 == v24)
            goto LABEL_46;
        }
        if (v25)
          v23 = v25;
        v29 = v23[3];
        if (v29 != v6)
        {
          v30 = v29 == -4096 || v29 == 0;
          if (!v30 && v29 != -8192)
          {
            v52 = v23[1] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v52 = v23[2];
            v53 = (unint64_t *)v23[2];
            if (v53)
            {
              *v53 = *v53 & 7 | v52;
            }
            else
            {
              v54 = v23[3];
              v55 = ***(int32x2_t ****)v54;
              v56 = (unint64_t)v55[303];
              if (v56 <= v52)
              {
                v57 = v55[305].u32[0];
                if (v56 + 16 * v57 > v52)
                {
                  v58 = v57 - 1;
                  LODWORD(v59) = v58 & ((v54 >> 4) ^ (v54 >> 9));
                  v60 = (uint64_t *)(v56 + 16 * v59);
                  v61 = *v60;
                  if (v54 == *v60)
                  {
LABEL_77:
                    *v60 = -8192;
                    v55[304] = vadd_s32(v55[304], (int32x2_t)0x1FFFFFFFFLL);
                    v54 = v23[3];
                  }
                  else
                  {
                    v62 = 1;
                    while (v61 != -4096)
                    {
                      v63 = v59 + v62++;
                      v59 = v63 & v58;
                      v61 = *(_QWORD *)(v56 + 16 * v59);
                      if (v54 == v61)
                      {
                        v60 = (uint64_t *)(v56 + 16 * v59);
                        goto LABEL_77;
                      }
                    }
                  }
                  *(_BYTE *)(v54 + 17) &= ~1u;
                }
              }
            }
            v6 = a2[3];
          }
          v23[3] = v6;
          if (v6 != -4096 && v6 != -8192 && v6 != 0)
          {
            v32 = a2[1];
            v23[2] = *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF8);
            *(_QWORD *)(v32 & 0xFFFFFFFFFFFFFFF8) = v23 + 1;
            v23[1] = v32 & 0xFFFFFFFFFFFFFFF8 | v23[1] & 7;
            v33 = (unint64_t *)v23[2];
            if (v33)
              *v33 = *v33 & 7 | (unint64_t)(v23 + 2);
          }
        }
      }
LABEL_46:
      v34 = a2[4];
      v23[5] = 6;
      v35 = v23 + 5;
      *(v35 - 1) = v34;
      v35[1] = 0;
      v36 = (unint64_t)(v35 + 1);
      v37 = a2[7];
      v35[2] = v37;
      if (v37)
      {
        if (v37 != -8192 && v37 != -4096)
        {
          v38 = a2[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v36 = *(_QWORD *)v38;
          *(_QWORD *)v38 = v35;
          *v35 = v38 | 6;
          if (*(_QWORD *)v36)
            **(_QWORD **)v36 = **(_QWORD **)v36 & 7 | v36;
        }
      }
      ++*(_DWORD *)(result + 8);
      v39 = a2[7];
      if (v39 && v39 != -8192 && v39 != -4096)
      {
        v40 = a2[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v40 = a2[6];
        v41 = (unint64_t *)a2[6];
        if (v41)
        {
          *v41 = *v41 & 7 | v40;
        }
        else
        {
          v42 = a2[7];
          v43 = ***(int32x2_t ****)v42;
          v44 = (unint64_t)v43[303];
          if (v44 <= v40)
          {
            v45 = v43[305].u32[0];
            if (v44 + 16 * v45 > v40)
            {
              v46 = v45 - 1;
              LODWORD(v47) = v46 & ((v42 >> 4) ^ (v42 >> 9));
              v48 = (uint64_t *)(v44 + 16 * v47);
              v49 = *v48;
              if (v42 == *v48)
              {
LABEL_62:
                *v48 = -8192;
                v43[304] = vadd_s32(v43[304], (int32x2_t)0x1FFFFFFFFLL);
                v42 = a2[7];
              }
              else
              {
                v50 = 1;
                while (v49 != -4096)
                {
                  v51 = v47 + v50++;
                  v47 = v51 & v46;
                  v49 = *(_QWORD *)(v44 + 16 * v47);
                  if (v42 == v49)
                  {
                    v48 = (uint64_t *)(v44 + 16 * v47);
                    goto LABEL_62;
                  }
                }
              }
              *(_BYTE *)(v42 + 17) &= ~1u;
            }
          }
        }
      }
    }
    v7 = a2[3];
    if (v7 != -4096 && v7 != -8192 && v7 != 0)
    {
      v9 = a2[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v9 = a2[2];
      v10 = (unint64_t *)a2[2];
      if (v10)
      {
        *v10 = *v10 & 7 | v9;
      }
      else
      {
        v11 = a2[3];
        v12 = ***(int32x2_t ****)v11;
        v13 = (unint64_t)v12[303];
        if (v13 <= v9)
        {
          v14 = v12[305].u32[0];
          if (v13 + 16 * v14 > v9)
          {
            v15 = v14 - 1;
            LODWORD(v16) = v15 & ((v11 >> 4) ^ (v11 >> 9));
            v17 = (uint64_t *)(v13 + 16 * v16);
            v18 = *v17;
            if (v11 == *v17)
            {
LABEL_19:
              *v17 = -8192;
              v12[304] = vadd_s32(v12[304], (int32x2_t)0x1FFFFFFFFLL);
              v11 = a2[3];
            }
            else
            {
              v19 = 1;
              while (v18 != -4096)
              {
                v20 = v16 + v19++;
                v16 = v20 & v15;
                v18 = *(_QWORD *)(v13 + 16 * v16);
                if (v11 == v18)
                {
                  v17 = (uint64_t *)(v13 + 16 * v16);
                  goto LABEL_19;
                }
              }
            }
            *(_BYTE *)(v11 + 17) &= ~1u;
          }
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C52E2DF0(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = a2[1] & 6;
  result[1] = v3;
  v4 = result + 1;
  result[2] = 0;
  v5 = (unint64_t)(result + 2);
  v6 = a2[3];
  result[3] = v6;
  if (v6 != -8192 && v6 != -4096 && v6 != 0)
  {
    v8 = a2[1] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v5 = *(_QWORD *)v8;
    *(_QWORD *)v8 = v4;
    *v4 = v8 | v3;
    if (*(_QWORD *)v5)
      **(_QWORD **)v5 = **(_QWORD **)v5 & 7 | v5;
  }
  *result = &unk_1E814DA10;
  result[4] = a2[4];
  result[5] = 6;
  v9 = result + 5;
  result[6] = 0;
  v10 = (unint64_t)(result + 6);
  v11 = a3[2];
  result[7] = v11;
  if (v11 != -8192 && v11 != -4096 && v11)
  {
    v12 = *a3 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v10 = *(_QWORD *)v12;
    *(_QWORD *)v12 = v9;
    *v9 = v12 | 6;
    if (*(_QWORD *)v10)
      **(_QWORD **)v10 = **(_QWORD **)v10 & 7 | v10;
  }
  return result;
}

_QWORD *sub_1C52E2ED8(uint64_t a1, _QWORD *a2)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  _QWORD *v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  int32x2_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = a2[3];
    v6 = v4 - 1;
    v7 = ((v5 >> 4) ^ (v5 >> 9)) & v6;
    result = (_QWORD *)(*(_QWORD *)a1 + (v7 << 6));
    v9 = result[3];
    if (v5 == v9)
      return result;
    v10 = 0;
    v11 = 1;
    while (v9 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v9 == -8192;
      if (v12)
        v10 = result;
      v13 = v7 + v11++;
      v7 = v13 & v6;
      result = (_QWORD *)(*(_QWORD *)a1 + (v7 << 6));
      v9 = result[3];
      if (v5 == v9)
        return result;
    }
    if (v10)
      v14 = (uint64_t)v10;
    else
      v14 = (uint64_t)result;
  }
  else
  {
    v14 = 0;
  }
  result = (_QWORD *)sub_1C52E278C(a1, (uint64_t)a2, (uint64_t)a2, v14);
  v15 = result[3];
  v16 = a2[3];
  if (v15 != v16)
  {
    v17 = v15 == -4096 || v15 == 0;
    if (!v17 && v15 != -8192)
    {
      v21 = result[1] & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v21 = result[2];
      v22 = (unint64_t *)result[2];
      if (v22)
      {
        *v22 = *v22 & 7 | v21;
      }
      else
      {
        v23 = result[3];
        v24 = ***(int32x2_t ****)v23;
        v25 = (unint64_t)v24[303];
        if (v25 <= v21)
        {
          v26 = v24[305].u32[0];
          if (v25 + 16 * v26 > v21)
          {
            v27 = v26 - 1;
            LODWORD(v28) = v27 & ((v23 >> 4) ^ (v23 >> 9));
            v29 = (uint64_t *)(v25 + 16 * v28);
            v30 = *v29;
            if (v23 == *v29)
            {
LABEL_39:
              *v29 = -8192;
              v24[304] = vadd_s32(v24[304], (int32x2_t)0x1FFFFFFFFLL);
              v23 = result[3];
            }
            else
            {
              v31 = 1;
              while (v30 != -4096)
              {
                v32 = v28 + v31++;
                v28 = v32 & v27;
                v30 = *(_QWORD *)(v25 + 16 * v28);
                if (v23 == v30)
                {
                  v29 = (uint64_t *)(v25 + 16 * v28);
                  goto LABEL_39;
                }
              }
            }
            *(_BYTE *)(v23 + 17) &= ~1u;
          }
        }
      }
      v16 = a2[3];
    }
    result[3] = v16;
    if (v16 != -4096 && v16 != -8192 && v16 != 0)
    {
      v19 = a2[1];
      result[2] = *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8);
      *(_QWORD *)(v19 & 0xFFFFFFFFFFFFFFF8) = result + 1;
      result[1] = v19 & 0xFFFFFFFFFFFFFFF8 | result[1] & 7;
      v20 = (unint64_t *)result[2];
      if (v20)
        *v20 = *v20 & 7 | (unint64_t)(result + 2);
    }
  }
  result[4] = a2[4];
  result[5] = 6;
  result[6] = 0;
  result[7] = 0;
  return result;
}

llvm::StoreInst *sub_1C52E30E8(llvm::StoreInst *result, llvm::Value *a2, llvm::Value *a3, uint64_t a4)
{
  llvm::StoreInst *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  llvm::StoreInst **v19;
  _QWORD *v20;
  _DWORD *v21;
  llvm::StoreInst *v22;
  _QWORD *v23;
  unsigned __int8 *v24;
  llvm::Instruction *v25;

  v7 = result;
  v8 = *((_QWORD *)result + 6);
  v9 = v8 - 24;
  if (!v8)
    v9 = 0;
  v10 = *(unsigned __int8 *)(v9 + 16);
  v11 = *((_QWORD *)result + 6);
  if (v10 == 83)
  {
    v11 = *((_QWORD *)result + 6);
    do
    {
      v11 = *(_QWORD *)(v11 + 8);
      v12 = v11 - 24;
      if (!v11)
        v12 = 0;
    }
    while (*(_BYTE *)(v12 + 16) == 83);
  }
  v13 = *(unsigned __int8 *)(v11 - 8) - 38;
  v14 = v13 > 0x38;
  v15 = (1 << v13) & 0x100060000000001;
  if (v14 || v15 == 0)
    goto LABEL_20;
  while (v10 == 83)
  {
    v8 = *(_QWORD *)(v8 + 8);
    v17 = v8 - 24;
    if (!v8)
      v17 = 0;
    v10 = *(unsigned __int8 *)(v17 + 16);
  }
  if (*(unsigned __int8 *)(v8 - 8) - 29 > 0xA)
  {
LABEL_20:
    v20 = (_QWORD *)((char *)result + 40);
    v21 = operator new(0x80uLL);
    v22 = (llvm::StoreInst *)(v21 + 16);
    v21[21] = v21[21] & 0x38000000 | 2;
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = 0;
    *((_QWORD *)v21 + 2) = 0;
    *((_QWORD *)v21 + 3) = v21 + 16;
    *((_QWORD *)v21 + 4) = 0;
    *((_QWORD *)v21 + 5) = 0;
    *((_QWORD *)v21 + 6) = 0;
    *((_QWORD *)v21 + 7) = v21 + 16;
    v23 = (_QWORD *)*v20;
    if ((_QWORD *)*v20 == v20)
    {
      v25 = 0;
    }
    else
    {
      if (v23)
        v24 = (unsigned __int8 *)(v23 - 3);
      else
        v24 = 0;
      if (v24[16] - 29 >= 0xB)
        v25 = 0;
      else
        v25 = (llvm::Instruction *)v24;
    }
    return llvm::StoreInst::StoreInst(v22, a2, a3, 0, v25);
  }
  else
  {
    v18 = *(unsigned int *)(a4 + 8);
    if (v18 >= *(_DWORD *)(a4 + 12))
    {
      result = (llvm::StoreInst *)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v18 + 1, 16);
      LODWORD(v18) = *(_DWORD *)(a4 + 8);
    }
    v19 = (llvm::StoreInst **)(*(_QWORD *)a4 + 16 * v18);
    *v19 = v7;
    v19[1] = a2;
    ++*(_DWORD *)(a4 + 8);
  }
  return result;
}

_QWORD *sub_1C52E3274(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  v2 = *((unsigned int *)result + 4);
  v3 = *((_DWORD *)result + 2);
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    result = (_QWORD *)(*result + 8);
    do
    {
      if ((*(result - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = sub_1C619127C(result);
      result += 2;
      v4 -= 16;
    }
    while (v4);
  }
  if (v3)
  {
    v5 = 1 << (33 - __clz(v3 - 1));
    if (v5 <= 64)
      v6 = 64;
    else
      v6 = v5;
    if (v6 == *((_DWORD *)v1 + 4))
    {
      v1[1] = 0;
      v7 = 16 * v6;
      v8 = (_QWORD *)*v1;
      do
      {
        *v8 = -4096;
        v8 += 2;
        v7 -= 16;
      }
      while (v7);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*v1, 8);
      v9 = (4 * v6 / 3 + 1) | ((unint64_t)(4 * v6 / 3 + 1) >> 1);
      v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
      LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
      *((_DWORD *)v1 + 4) = v10;
      result = operator new(16 * v10, (std::align_val_t)8uLL);
      *v1 = result;
      v1[1] = 0;
      v11 = *((unsigned int *)v1 + 4);
      if ((_DWORD)v11)
      {
        v12 = 16 * v11;
        do
        {
          *result = -4096;
          result += 2;
          v12 -= 16;
        }
        while (v12);
      }
    }
  }
  else if (*((_DWORD *)v1 + 4))
  {
    result = (_QWORD *)MEMORY[0x1CAA32FB4](*v1, 8);
    *v1 = 0;
    v1[1] = 0;
    *((_DWORD *)v1 + 4) = 0;
  }
  else
  {
    v1[1] = 0;
  }
  return result;
}

uint64_t sub_1C52E33C4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 40);
  if (v2 == result + 40)
  {
    v3 = 0;
  }
  else
  {
    if (v2)
      v3 = v2 - 24;
    else
      v3 = 0;
    if (*(unsigned __int8 *)(v3 + 16) - 29 >= 0xB)
      v3 = 0;
  }
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 == 33)
    return 0;
  if (v4 != 38)
  {
    v7 = *(_QWORD *)(v3 - 32 * (*(_DWORD *)(v3 + 20) & 0x7FFFFFF));
    if (*(_QWORD *)(v7 - 32) == a2)
      return *(_QWORD *)(v7 + 40);
    return 0;
  }
  v5 = *(_DWORD *)(v3 + 20);
  if ((v5 & 0x40000000) != 0)
    v6 = *(_QWORD **)(v3 - 8);
  else
    v6 = (_QWORD *)(v3 - 32 * (v5 & 0x7FFFFFF));
  if (*v6 != a2)
    return 0;
  return result;
}

void sub_1C52E3460(uint64_t a1, int a2, int a3, int a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  llvm::Constant *v10;
  char isNullValue;
  llvm::Value *v12;
  uint64_t v13;
  _QWORD *v14;
  llvm::Value *v15;
  llvm::Value *v17;
  char *v18;
  int *v19;
  char *v20;
  __int128 v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  char *v33;
  int v34;
  llvm::Value *v35;
  llvm::Value *v36;
  unint64_t v37;
  _DWORD v38[4];
  void *v39;
  uint64_t v40;
  _QWORD v41[5];

  v41[4] = *MEMORY[0x1E0C80C00];
  v39 = v41;
  v40 = 0x100000000;
  v38[0] = a2;
  v38[1] = a3;
  v38[2] = a4;
  if (a6)
  {
    v8 = 8 * a6;
    do
    {
      v9 = *a5;
      v35 = 0;
      v37 = 0;
      v10 = *(llvm::Constant **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF));
      isNullValue = llvm::Constant::isNullValue(v10);
      v12 = 0;
      if ((isNullValue & 1) == 0)
        v12 = llvm::Value::stripPointerCasts(v10);
      v36 = v12;
      v13 = *(_QWORD *)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 32);
      v14 = (_QWORD *)(v13 + 24);
      if (*(_DWORD *)(v13 + 32) >= 0x41u)
        v14 = (_QWORD *)*v14;
      v34 = *v14;
      v37 = *(_QWORD *)(v9 + 40) & 0xFFFFFFFFFFFFFFFBLL;
      v15 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) + 64));
      if (*((_BYTE *)v15 + 16) != 59 || v15 == 0)
        v17 = 0;
      else
        v17 = v15;
      v35 = v17;
      v18 = (char *)v39;
      if (v40 >= HIDWORD(v40))
      {
        v22 = v40 + 1;
        if (v39 <= &v34 && (char *)v39 + 32 * v40 > (char *)&v34)
        {
          v23 = (char *)&v34 - (_BYTE *)v39;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v22, 32);
          v18 = (char *)v39;
          v19 = (int *)((char *)v39 + v23);
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v22, 32);
          v19 = &v34;
          v18 = (char *)v39;
        }
      }
      else
      {
        v19 = &v34;
      }
      v20 = &v18[32 * v40];
      v21 = *((_OWORD *)v19 + 1);
      *(_OWORD *)v20 = *(_OWORD *)v19;
      *((_OWORD *)v20 + 1) = v21;
      LODWORD(v40) = v40 + 1;
      ++a5;
      v8 -= 8;
    }
    while (v8);
  }
  v25 = (unint64_t *)(a1 + 176);
  v24 = *(_QWORD *)(a1 + 176);
  v26 = *(unsigned int *)(a1 + 184);
  v27 = (char *)v38;
  if (v26 >= *(_DWORD *)(a1 + 188))
  {
    v31 = v26 + 1;
    v32 = v24 + (v26 << 6) > (unint64_t)v38;
    if (v24 <= (unint64_t)v38 && v32)
    {
      v33 = (char *)v38 - v24;
      sub_1C621E8EC(a1 + 176, v31);
      v24 = *v25;
      v27 = &v33[*v25];
    }
    else
    {
      sub_1C621E8EC(a1 + 176, v31);
      v24 = *v25;
      v27 = (char *)v38;
    }
  }
  v28 = v24 + ((unint64_t)*(unsigned int *)(a1 + 184) << 6);
  v29 = *(_QWORD *)v27;
  *(_DWORD *)(v28 + 8) = *((_DWORD *)v27 + 2);
  *(_QWORD *)v28 = v29;
  *(_QWORD *)(v28 + 24) = 0x100000000;
  *(_QWORD *)(v28 + 16) = v28 + 32;
  v30 = v28 + 16;
  if (*((_DWORD *)v27 + 6))
    sub_1C621EB34(v30, (uint64_t)(v27 + 16));
  ++*(_DWORD *)(a1 + 184);
  if (v39 != v41)
    free(v39);
}

uint64_t sub_1C52E36F0()
{
  char v1;
  char *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Clone multicolor basic blocks but do not demote cross scopes";
  v3.n128_u64[1] = 60;
  v1 = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED803CB0, "disable-demotion", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED803CB0, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Do not remove implausible terminators or other similar cleanups";
  v3.n128_u64[1] = 63;
  v1 = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED803D70, "disable-cleanups", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED803D70, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Demote catchswitch BBs only (for wasm EH)";
  v3.n128_u64[1] = 41;
  v1 = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED803E30, "demote-catchswitch-only", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED803E30, &dword_1C475E000);
}

uint64_t sub_1C52E3820(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineLoopInfoPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Insert XRay ops";
  *(_QWORD *)(v2 + 8) = 15;
  *(_QWORD *)(v2 + 16) = "xray-instrumentation";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F702A;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C52E38B4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C52E38B4()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F702A) = &off_1E814DA38;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED803EF0);
  if (v2 != -1)
  {
    v6[0] = sub_1C52E3820;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED803EF0, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C52E398C(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C52E3A20(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C52E3AAC(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::MachineDominatorTree::ID);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C52E3B10(uint64_t a1, int32x2_t *a2)
{
  int32x2_t v2;
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  int i;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  int j;
  unsigned int v34;
  uint64_t *v35;
  uint64_t v36;
  BOOL v37;
  BOOL v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  unsigned __int8 v44;
  uint64_t v45;
  unint64_t v46;
  unsigned int v47;
  int k;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  BOOL v52;
  int32x2_t *v54;
  int32x2_t *m;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  unsigned __int8 *v60;
  int v61;
  int v62;
  int v63;
  unsigned int v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unsigned __int8 v73;
  unint64_t v74;
  unsigned int v75;
  int n;
  unsigned int v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v81;
  llvm::MachineFunction *v82;
  unsigned __int8 *v83;
  unint64_t v84;
  llvm::MachineFunction *v85;
  unsigned __int8 *v86;
  llvm::MachineInstr *v87;
  uint64_t v88;
  unint64_t v89;
  int32x2_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  unsigned __int8 v101;
  unint64_t v102;
  unsigned int v103;
  int ii;
  unsigned int v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v109;
  int32x2_t *jj;
  unint64_t FirstTerminator;
  int32x2_t *v112;
  unint64_t v113;
  int32x2_t *v114;
  uint64_t v115;
  uint64_t v117;
  llvm::MachineFunction *v118;
  unsigned __int8 *v119;
  unint64_t v120;
  unint64_t v121;
  llvm::MachineFunction *v122;
  unsigned __int8 *v123;
  llvm::MachineInstr *v124;
  int32x2_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  BOOL v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  unint64_t v157;
  int v158;
  unint64_t v159;
  unsigned int v160;
  int32x2_t *v161;
  unint64_t v162;
  unsigned int v163;
  int32x2_t *v164;
  unint64_t v165;
  uint64_t AnalysisPass;
  unsigned __int8 **v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int8 *v180[4];
  void *v181;
  _BYTE v182[56];
  void *v183;
  _BYTE v184[56];
  void *v185;
  _BYTE v186[56];
  _QWORD v187[3];
  uint64_t v188;
  uint64_t v189;
  unsigned __int8 *v190[165];
  _QWORD v191[3];

  v191[1] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 112);
  if (!v3)
    return 0;
  if (!*(_DWORD *)(v3 + 8))
    goto LABEL_32;
  v6 = *(_QWORD *)(v3 + 40);
  if (!v6)
    goto LABEL_32;
  v7 = *(_DWORD *)(v6 + 40);
  if (!v7)
    goto LABEL_32;
  v8 = *(_QWORD *)(v6 + 24);
  v9 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v153 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v153 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v153;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v10 = __ROR8__(qword_1ED7EAC80 ^ 0xAA3A3267791EAF7DLL, 30);
  v11 = 0x9DDFEA08EB382D69
      * ((qword_1ED7EAC80 - 0x6C47B2EB309A5459) ^ ((0x9DDFEA08EB382D69
                                                    * ((v10 + 0x50251E57CC92A4C1) ^ (qword_1ED7EAC80
                                                                                     - 0x6C47B2EB309A5459))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v10 + 0x50251E57CC92A4C1) ^ (qword_1ED7EAC80 - 0x6C47B2EB309A5459))));
  v12 = -348639895 * ((v11 >> 47) ^ v11);
  for (i = 1; ; ++i)
  {
    v14 = v12 & (v7 - 1);
    v15 = v8 + 24 * v14;
    v16 = *(_QWORD **)v15;
    if (*(_QWORD *)v15 == -1)
    {
      if ("function-instrument" == (char *)-1)
        goto LABEL_23;
      goto LABEL_9;
    }
    if (v16 != (_QWORD *)-2)
      break;
    if ("function-instrument" == (char *)-2)
      goto LABEL_23;
LABEL_9:
    if (v16 == (_QWORD *)-1)
      goto LABEL_32;
    v12 = i + v14;
  }
  if (*(_QWORD *)(v15 + 8) != 19)
    goto LABEL_9;
  v17 = *v16 == 0x6E6F6974636E7566 && v16[1] == 0x6D757274736E692DLL;
  if (!v17 || *(_QWORD *)((char *)v16 + 11) != 0x746E656D75727473)
    goto LABEL_9;
LABEL_23:
  v19 = *(_QWORD *)(v15 + 16);
  if (!v19 || *(_BYTE *)(v19 + 8) != 2)
  {
LABEL_32:
    LOBYTE(v24) = 0;
    goto LABEL_33;
  }
  if (*(_DWORD *)(v19 + 16) == 11)
  {
    v20 = v19 + *(unsigned int *)(v19 + 12);
    v21 = *(_QWORD *)(v20 + 25);
    v22 = *(_QWORD *)(v20 + 28);
    v24 = v21 == 0x776C612D79617278 && v22 == 0x737961776C612D79;
  }
  else
  {
    v24 = 0;
  }
  if (*(_DWORD *)(v19 + 16) == 10)
  {
    v138 = v19 + *(unsigned int *)(v19 + 12);
    v139 = *(_QWORD *)(v138 + 25);
    v140 = *(unsigned __int16 *)(v138 + 33);
    v141 = v139 == 0x76656E2D79617278 && v140 == 29285;
    if (v141 && !v24)
      return 0;
  }
LABEL_33:
  v25 = *(_QWORD *)(*(_QWORD *)&v2 + 112);
  if (!v25)
  {
    if (v24)
      goto LABEL_86;
    return 0;
  }
  if (*(_DWORD *)(v25 + 8))
  {
    v26 = *(_QWORD *)(v25 + 40);
    if (v26)
    {
      v27 = *(_DWORD *)(v26 + 40);
      if (v27)
      {
        v28 = *(_QWORD *)(v26 + 24);
        v29 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
        if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
        {
          v154 = llvm::hashing::detail::fixed_seed_override;
          if (!llvm::hashing::detail::fixed_seed_override)
            v154 = 0xFF51AFD7ED558CCDLL;
          qword_1ED7EAC80 = v154;
          __cxa_guard_release(&qword_1ED7EAC88);
        }
        v30 = __ROR8__(qword_1ED7EAC80 ^ 0xA869751E6B684E18, 30);
        v31 = 0x9DDFEA08EB382D69
            * ((qword_1ED7EAC80 + 0x7375858ACBEC128) ^ ((0x9DDFEA08EB382D69
                                                         * ((v30 - 0x126B550998E27C48) ^ (qword_1ED7EAC80
                                                                                          + 0x7375858ACBEC128))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v30 - 0x126B550998E27C48) ^ (qword_1ED7EAC80 + 0x7375858ACBEC128))));
        v32 = -348639895 * ((v31 >> 47) ^ v31);
        for (j = 1; ; ++j)
        {
          v34 = v32 & (v27 - 1);
          v35 = (uint64_t *)(v28 + 24 * v34);
          v36 = *v35;
          if (*v35 == -1)
          {
            if ("xray-instruction-threshold" == (char *)-1)
              goto LABEL_58;
          }
          else if (v36 == -2)
          {
            if ("xray-instruction-threshold" == (char *)-2)
              goto LABEL_58;
          }
          else if (v35[1] == 26)
          {
            v37 = *(_QWORD *)v36 == 0x736E692D79617278 && *(_QWORD *)(v36 + 8) == 0x6E6F697463757274;
            v38 = v37 && *(_QWORD *)(v36 + 16) == 0x6F6873657268742DLL;
            if (v38 && *(_WORD *)(v36 + 24) == 25708)
            {
LABEL_58:
              v40 = v35[2];
              goto LABEL_60;
            }
          }
          if (v36 == -1)
            break;
          v32 = j + v34;
        }
      }
    }
  }
  v40 = 0;
LABEL_60:
  v41 = *(_QWORD *)(*(_QWORD *)&v2 + 112);
  if (!v41)
    goto LABEL_343;
  if (!*(_DWORD *)(v41 + 8))
    goto LABEL_85;
  v41 = *(_QWORD *)(v41 + 40);
  if (v41)
  {
    v42 = *(_DWORD *)(v41 + 40);
    if (v42)
    {
      v43 = *(_QWORD *)(v41 + 24);
      v44 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
      if ((v44 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
      {
        v155 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v155 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v155;
        __cxa_guard_release(&qword_1ED7EAC88);
      }
      v45 = __ROR8__(qword_1ED7EAC80 ^ 0x56C102DCB97ECE2ELL, 30);
      v46 = 0x9DDFEA08EB382D69
          * ((qword_1ED7EAC80 + 0x78BC1BBA5E47C5AALL) ^ ((0x9DDFEA08EB382D69
                                                        * ((v45 + 0x69207A39DBC05DA2) ^ (qword_1ED7EAC80
                                                                                         + 0x78BC1BBA5E47C5AALL))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v45 + 0x69207A39DBC05DA2) ^ (qword_1ED7EAC80 + 0x78BC1BBA5E47C5AALL))));
      v47 = -348639895 * ((v46 >> 47) ^ v46);
      for (k = 1; ; ++k)
      {
        v49 = v47 & (v42 - 1);
        v50 = (uint64_t *)(v43 + 24 * v49);
        v51 = *v50;
        if (*v50 == -1)
        {
          if ("xray-ignore-loops" == (char *)-1)
            goto LABEL_82;
        }
        else if (v51 == -2)
        {
          if ("xray-ignore-loops" == (char *)-2)
            goto LABEL_82;
        }
        else if (v50[1] == 17)
        {
          v52 = *(_QWORD *)v51 == 0x6E67692D79617278 && *(_QWORD *)(v51 + 8) == 0x706F6F6C2D65726FLL;
          if (v52 && *(_BYTE *)(v51 + 16) == 115)
          {
LABEL_82:
            v41 = v50[2];
            goto LABEL_83;
          }
        }
        if (v51 == -1)
          break;
        v47 = k + v49;
      }
    }
LABEL_85:
    v41 = 0;
    if (v24)
      goto LABEL_86;
  }
  else
  {
LABEL_343:
  {
LABEL_83:
    if (v24)
      goto LABEL_86;
  }
  }
  if (!v40)
    return 0;
  if (*(_BYTE *)(v40 + 8) != 2)
    return 0;
  v56 = *(unsigned int *)(v40 + 16);
  if (!(_DWORD)v56)
    return 0;
  v57 = 0;
  v58 = &v189;
  v59 = &v188;
  v60 = (unsigned __int8 *)(*(unsigned int *)(v40 + 12) + v40 + 25);
  while (1)
  {
    v62 = *v60++;
    v61 = v62;
    if ((v62 - 48) < 0xA)
    {
      v63 = -48;
      goto LABEL_96;
    }
    if ((v61 - 97) < 0x1A)
    {
      v63 = -87;
      goto LABEL_96;
    }
    if ((v61 - 65) > 0x19)
      break;
    v63 = -55;
LABEL_96:
    v64 = v63 + v61;
    if (v64 > 9)
      break;
    v65 = 10 * v57 + v64;
    if (v57 > v65 / 0xA)
      return 0;
    v57 = v65;
    if (!--v56)
      goto LABEL_293;
  }
  v65 = v57;
LABEL_293:
  v137 = 0;
  v160 = 0;
  if (v65 < 0x100000000)
    v160 = v65;
  if (HIDWORD(v65) || v56)
    return v137;
  v161 = (int32x2_t *)a2[41];
  if (v161 == &a2[40])
  {
    v162 = 0;
  }
  else
  {
    v162 = 0;
    do
    {
      v163 = -1;
      v164 = v161 + 6;
      do
      {
        v164 = (int32x2_t *)v164[1];
        ++v163;
      }
      while (v164 != &v161[6]);
      v162 += v163;
      v161 = (int32x2_t *)v161[1];
    }
    while (v161 != &a2[40]);
  }
  v165 = v160;
  if (!v41)
  {
    AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::MachineDominatorTree::ID, 1);
    if (AnalysisPass)
    {
      v168 = (unsigned __int8 **)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::MachineDominatorTree::ID);
      llvm::MachineDominatorTree::MachineDominatorTree((llvm::MachineDominatorTree *)v190);
      if (v168)
        goto LABEL_313;
    }
    else
    {
      llvm::MachineDominatorTree::MachineDominatorTree((llvm::MachineDominatorTree *)v190);
    }
    if (!v191[0])
    {
      v175 = operator new();
      *(_OWORD *)(v175 + 32) = 0u;
      *(_OWORD *)(v175 + 48) = 0u;
      *(_QWORD *)(v175 + 56) = 0;
      *(_QWORD *)(v175 + 64) = 0;
      *(_OWORD *)(v175 + 16) = 0u;
      *(_QWORD *)v175 = v175 + 16;
      *(_QWORD *)(v175 + 8) = 0x100000000;
      *(_QWORD *)(v175 + 24) = 0;
      *(_QWORD *)(v175 + 32) = 0;
      *(_DWORD *)(v175 + 40) = 0;
      *(_QWORD *)(v175 + 48) = 0;
      *(_BYTE *)(v175 + 64) = 0;
      v176 = v191[0];
      v191[0] = v175;
      if (v176)
        sub_1C4DC4DE4((uint64_t)v191, v176);
    }
    v168 = v190;
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v190);
    v169 = v191[0];
    *(_QWORD *)(v191[0] + 56) = a2;
    sub_1C50F0A2C(v169, 0);
LABEL_313:
    v170 = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(*(_QWORD *)(a1 + 8) + 24), &llvm::MachineLoopInfo::ID, 1);
    if (v170)
    {
      v171 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v170 + 96))(v170, &llvm::MachineLoopInfo::ID);
      llvm::MachineLoopInfo::MachineLoopInfo((llvm::MachineLoopInfo *)v180);
      if (v171)
      {
        v58 = (uint64_t *)(v171 + 280);
        v59 = (uint64_t *)(v171 + 272);
LABEL_319:
        v172 = *v59;
        v173 = *v58;
        v180[0] = (unsigned __int8 *)&off_1E81454E0;
        llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::~LoopInfoBase(v187);
        v180[0] = (unsigned __int8 *)&unk_1E8144BE8;
        if (v172 != v173 || v165 <= v162)
        {
          if (v185 != v186)
            free(v185);
          if (v183 != v184)
            free(v183);
          if (v181 != v182)
            free(v181);
          llvm::Pass::~Pass((llvm::Pass *)v180);
          sub_1C61ECEE8((llvm::Pass *)v190);
          goto LABEL_86;
        }
        if (v185 != v186)
          free(v185);
        if (v183 != v184)
          free(v183);
        if (v181 != v182)
          free(v181);
        llvm::Pass::~Pass((llvm::Pass *)v180);
        sub_1C61ECEE8((llvm::Pass *)v190);
        return 0;
      }
    }
    else
    {
      llvm::MachineLoopInfo::MachineLoopInfo((llvm::MachineLoopInfo *)v180);
    }
    if (!v168[165])
    {
      v177 = operator new();
      *(_OWORD *)(v177 + 32) = 0u;
      *(_OWORD *)(v177 + 48) = 0u;
      *(_QWORD *)(v177 + 56) = 0;
      *(_QWORD *)(v177 + 64) = 0;
      *(_OWORD *)(v177 + 16) = 0u;
      *(_QWORD *)v177 = v177 + 16;
      *(_QWORD *)(v177 + 8) = 0x100000000;
      *(_QWORD *)(v177 + 24) = 0;
      *(_QWORD *)(v177 + 32) = 0;
      *(_DWORD *)(v177 + 40) = 0;
      *(_QWORD *)(v177 + 48) = 0;
      *(_BYTE *)(v177 + 64) = 0;
      v178 = (uint64_t)v168[165];
      v168[165] = (unsigned __int8 *)v177;
      if (v178)
        sub_1C4DC4DE4((uint64_t)(v168 + 165), v178);
    }
    llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v168);
    llvm::LoopInfoBase<llvm::MachineBasicBlock,llvm::MachineLoop>::analyze((uint64_t)v187, (uint64_t)v168[165]);
    goto LABEL_319;
  }
  if (v160 > v162)
    return 0;
LABEL_86:
  v54 = a2 + 40;
  for (m = (int32x2_t *)a2[41]; ; m = (int32x2_t *)m[1])
  {
    if (m == v54)
      return 0;
    if (&m[6] != (int32x2_t *)(*(_QWORD *)&m[6] & 0xFFFFFFFFFFFFFFF8))
      break;
  }
  v66 = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)&a2[2] + 104))(*(_QWORD *)&a2[2]);
  v67 = (uint64_t)m[7];
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)&a2[2] + 96))(*(_QWORD *)&a2[2]) & 1) == 0)
  {
    llvm::MachineInstr::emitError(v67, (uint64_t)"An attempt to perform XRay instrumentation for an unsupported target.", 69);
    return 0;
  }
  v68 = *(_QWORD *)(*(_QWORD *)&v2 + 112);
  v69 = &unk_1ED7EA000;
  if (v68)
  {
    if (*(_DWORD *)(v68 + 8))
    {
      v70 = *(_QWORD *)(v68 + 40);
      if (v70)
      {
        v71 = *(_DWORD *)(v70 + 40);
        if (v71)
        {
          v72 = *(_QWORD *)(v70 + 24);
          v73 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v73 & 1) == 0)
          {
            v156 = __cxa_guard_acquire(&qword_1ED7EAC88);
            v69 = &unk_1ED7EA000;
            if (v156)
            {
              v157 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v157 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v157;
              __cxa_guard_release(&qword_1ED7EAC88);
              v69 = (_QWORD *)&unk_1ED7EA000;
            }
          }
          v74 = 0x9DDFEA08EB382D69
              * ((0x9DDFEA08EB382D69 * (v69[400] ^ 0x899B81C991BDB822)) ^ ((0x9DDFEA08EB382D69
                                                                              * (v69[400] ^ 0x899B81C991BDB822)) >> 47) ^ 0xE0F0F2E4E8DCCA5ALL);
          v75 = (-348639895 * ((v74 >> 47) ^ v74)) ^ 0x652D7069;
          for (n = 1; ; ++n)
          {
            v77 = v75 & (v71 - 1);
            v78 = v72 + 24 * v77;
            v79 = *(_QWORD **)v78;
            if (*(_QWORD *)v78 == -1)
            {
              if ("xray-skip-entry" == (char *)-1)
                goto LABEL_157;
            }
            else if (v79 == (_QWORD *)-2)
            {
              if ("xray-skip-entry" == (char *)-2)
                goto LABEL_157;
            }
            else if (*(_QWORD *)(v78 + 8) == 15
                   && *v79 == 0x696B732D79617278
                   && *(_QWORD *)((char *)v79 + 7) == 0x7972746E652D7069)
            {
              goto LABEL_157;
            }
            if (v79 == (_QWORD *)-1)
              break;
            v75 = n + v77;
          }
        }
      }
    }
  }
  v81 = v66[1] + 1680;
  if ((*(_WORD *)(v67 + 44) & 4) != 0)
  {
    v85 = (llvm::MachineFunction *)m[4];
    v86 = *(unsigned __int8 **)(v67 + 56);
    v180[0] = v86;
    if (v86)
    {
      v152 = v81;
      llvm::MetadataTracking::track((uint64_t)v180, v86, 2);
      v81 = v152;
    }
    v87 = (llvm::MachineInstr *)*((_QWORD *)v85 + 28);
    if (v87)
    {
      *((_QWORD *)v85 + 28) = *(_QWORD *)v87;
    }
    else
    {
      v95 = v81;
      v96 = sub_1C484358C((uint64_t)v85 + 128, 72, 3);
      v81 = v95;
      v87 = (llvm::MachineInstr *)v96;
    }
    v190[0] = v180[0];
    if (v180[0])
    {
      v179 = v81;
      llvm::MetadataTracking::retrack((uint64_t)v180, v180[0], (uint64_t)v190);
      v81 = v179;
      v180[0] = 0;
    }
    llvm::MachineInstr::MachineInstr(v87, v85, v81, v190, 0);
    if (v190[0])
      llvm::MetadataTracking::untrack((uint64_t)v190, v190[0]);
    if (v180[0])
      llvm::MetadataTracking::untrack((uint64_t)v180, v180[0]);
    if (&m[6] != (int32x2_t *)v67 && (*(_WORD *)(v67 + 44) & 4) != 0)
      *((_WORD *)v87 + 22) |= 0xCu;
    sub_1C512CA10((uint64_t *)&m[5], (uint64_t *)v67, (uint64_t)v87);
    v69 = &unk_1ED7EA000;
  }
  else
  {
    v82 = (llvm::MachineFunction *)m[4];
    v83 = *(unsigned __int8 **)(v67 + 56);
    v180[0] = v83;
    if (v83)
    {
      v143 = v81;
      llvm::MetadataTracking::track((uint64_t)v180, v83, 2);
      v81 = v143;
    }
    v84 = *((_QWORD *)v82 + 28);
    if (v84)
    {
      *((_QWORD *)v82 + 28) = *(_QWORD *)v84;
    }
    else
    {
      v88 = v81;
      v89 = sub_1C484358C((uint64_t)v82 + 128, 72, 3);
      v81 = v88;
      v84 = v89;
    }
    v190[0] = v180[0];
    if (v180[0])
    {
      v151 = v81;
      llvm::MetadataTracking::retrack((uint64_t)v180, v180[0], (uint64_t)v190);
      v81 = v151;
      v180[0] = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v84, v82, v81, v190, 0);
    if (v190[0])
      llvm::MetadataTracking::untrack((uint64_t)v190, v190[0]);
    if (v180[0])
      llvm::MetadataTracking::untrack((uint64_t)v180, v180[0]);
    v90 = m[5];
    *(int32x2_t *)(v84 + 24) = v90;
    v91 = *(_QWORD *)(*(_QWORD *)&v90 + 32);
    v92 = *(unsigned int *)(v84 + 40);
    if ((_DWORD)v92)
    {
      v144 = *(_QWORD *)(v84 + 32);
      v145 = *(_QWORD *)(v91 + 40);
      v146 = 32 * v92;
      do
      {
        if (!*(_BYTE *)v144)
        {
          v147 = *(unsigned int *)(v144 + 4);
          if ((int)v147 >= 0)
            v148 = (uint64_t *)(*(_QWORD *)(v145 + 272) + 8 * v147);
          else
            v148 = (uint64_t *)(*(_QWORD *)(v145 + 24) + 16 * (v147 & 0x7FFFFFFF) + 8);
          v149 = *v148;
          if (*v148)
          {
            v150 = *(_QWORD *)(v149 + 16);
            *(_QWORD *)(v149 + 16) = v144;
            *(_QWORD *)(v144 + 16) = v150;
            if ((*(_BYTE *)(v144 + 3) & 1) != 0)
            {
              *(_QWORD *)(v144 + 24) = v149;
            }
            else
            {
              *(_QWORD *)(v144 + 24) = 0;
              v148 = (uint64_t *)(v150 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v144 + 16) = v144;
            *(_QWORD *)(v144 + 24) = 0;
          }
          *v148 = v144;
        }
        v144 += 32;
        v146 -= 32;
      }
      while (v146);
    }
    v93 = *(_QWORD *)(v91 + 728);
    if (v93)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v93 + 24))(v93, v84);
    v94 = *(_QWORD *)v67 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v84 = v94 | *(_QWORD *)v84 & 7;
    *(_QWORD *)(v84 + 8) = v67;
    *(_QWORD *)(v94 + 8) = v84;
    *(_QWORD *)v67 = *(_QWORD *)v67 & 7 | v84;
    v69 = (_QWORD *)&unk_1ED7EA000;
  }
LABEL_157:
  v97 = *(_QWORD *)(*(_QWORD *)&v2 + 112);
  if (v97)
  {
    if (*(_DWORD *)(v97 + 8))
    {
      v98 = *(_QWORD *)(v97 + 40);
      if (v98)
      {
        v99 = *(_DWORD *)(v98 + 40);
        if (v99)
        {
          v100 = *(_QWORD *)(v98 + 24);
          v101 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
          if ((v101 & 1) == 0)
          {
            v158 = __cxa_guard_acquire(&qword_1ED7EAC88);
            v69 = &unk_1ED7EA000;
            if (v158)
            {
              v159 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v159 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v159;
              __cxa_guard_release(&qword_1ED7EAC88);
              v69 = (_QWORD *)&unk_1ED7EA000;
            }
          }
          v102 = 0x9DDFEA08EB382D69
               * ((0x9DDFEA08EB382D69 * (v69[400] ^ 0xCC8EA28898F5C7B9)) ^ ((0x9DDFEA08EB382D69
                                                                               * (v69[400] ^ 0xCC8EA28898F5C7B9)) >> 47) ^ 0xA5E5D1A5E194B5C1);
          v103 = (-348639895 * ((v102 >> 47) ^ v102)) ^ 0x2D70696B;
          for (ii = 1; ; ++ii)
          {
            v105 = v103 & (v99 - 1);
            v106 = v100 + 24 * v105;
            v107 = *(_QWORD **)v106;
            if (*(_QWORD *)v106 == -1)
            {
              if ("xray-skip-exit" == (char *)-1)
                return 1;
            }
            else if (v107 == (_QWORD *)-2)
            {
              if ("xray-skip-exit" == (char *)-2)
                return 1;
            }
            else if (*(_QWORD *)(v106 + 8) == 14
                   && *v107 == 0x696B732D79617278
                   && *(_QWORD *)((char *)v107 + 6) == 0x746978652D70696BLL)
            {
              return 1;
            }
            if (v107 == (_QWORD *)-1)
              break;
            v103 = ii + v105;
          }
        }
      }
    }
  }
  v109 = *(unsigned int *)(*(_QWORD *)&a2[1] + 472);
  if (v109 > 0x27)
    goto LABEL_246;
  if (((1 << v109) & 0x80000F100ALL) != 0)
  {
    for (jj = (int32x2_t *)a2[41]; ; jj = (int32x2_t *)jj[1])
    {
      if (jj == v54)
        return 1;
      FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)jj);
      v112 = jj + 6;
      if (&jj[6] != (int32x2_t *)FirstTerminator)
        break;
LABEL_242:
      ;
    }
    v113 = FirstTerminator;
    v114 = jj + 5;
    while (2)
    {
      v115 = *(_QWORD *)(*(_QWORD *)(v113 + 16) + 8);
      if ((*(_WORD *)(v113 + 44) & 0xC) != 0 && (*(_WORD *)(v113 + 44) & 4) == 0)
      {
        v121 = v113;
        if ((v115 & 0x20) != 0)
        {
LABEL_196:
          (*(void (**)(_QWORD *, unint64_t))(*v66 + 1136))(v66, v113);
          goto LABEL_188;
        }
        while ((*(_WORD *)(v121 + 44) & 8) != 0)
        {
          v121 = *(_QWORD *)(v121 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(v121 + 16) + 8) & 0x20) != 0)
            goto LABEL_196;
        }
        (*(void (**)(_QWORD *, unint64_t))(*v66 + 1136))(v66, v113);
      }
      else
      {
        (*(void (**)(_QWORD *, unint64_t))(*v66 + 1136))(v66, v113);
        if ((v115 & 0x20) != 0)
        {
LABEL_188:
          v117 = v66[1] + 1776;
          if ((*(_WORD *)(v113 + 44) & 4) != 0)
          {
            v122 = (llvm::MachineFunction *)jj[4];
            v123 = *(unsigned __int8 **)(v113 + 56);
            v180[0] = v123;
            if (v123)
              llvm::MetadataTracking::track((uint64_t)v180, v123, 2);
            v124 = (llvm::MachineInstr *)*((_QWORD *)v122 + 28);
            if (v124)
              *((_QWORD *)v122 + 28) = *(_QWORD *)v124;
            else
              v124 = (llvm::MachineInstr *)sub_1C484358C((uint64_t)v122 + 128, 72, 3);
            v190[0] = v180[0];
            if (v180[0])
            {
              llvm::MetadataTracking::retrack((uint64_t)v180, v180[0], (uint64_t)v190);
              v180[0] = 0;
            }
            llvm::MachineInstr::MachineInstr(v124, v122, v117, v190, 0);
            if (v190[0])
              llvm::MetadataTracking::untrack((uint64_t)v190, v190[0]);
            if (v180[0])
              llvm::MetadataTracking::untrack((uint64_t)v180, v180[0]);
            if (v112 != (int32x2_t *)v113 && (*(_WORD *)(v113 + 44) & 4) != 0)
              *((_WORD *)v124 + 22) |= 0xCu;
            sub_1C512CA10((uint64_t *)&jj[5], (uint64_t *)v113, (uint64_t)v124);
          }
          else
          {
            v118 = (llvm::MachineFunction *)jj[4];
            v119 = *(unsigned __int8 **)(v113 + 56);
            v180[0] = v119;
            if (v119)
              llvm::MetadataTracking::track((uint64_t)v180, v119, 2);
            v120 = *((_QWORD *)v118 + 28);
            if (v120)
              *((_QWORD *)v118 + 28) = *(_QWORD *)v120;
            else
              v120 = sub_1C484358C((uint64_t)v118 + 128, 72, 3);
            v190[0] = v180[0];
            if (v180[0])
            {
              llvm::MetadataTracking::retrack((uint64_t)v180, v180[0], (uint64_t)v190);
              v180[0] = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v120, v118, v117, v190, 0);
            if (v190[0])
              llvm::MetadataTracking::untrack((uint64_t)v190, v190[0]);
            if (v180[0])
              llvm::MetadataTracking::untrack((uint64_t)v180, v180[0]);
            v125 = *v114;
            *(int32x2_t *)(v120 + 24) = *v114;
            v126 = *(_QWORD *)(*(_QWORD *)&v125 + 32);
            v127 = *(unsigned int *)(v120 + 40);
            if ((_DWORD)v127)
            {
              v130 = *(_QWORD *)(v120 + 32);
              v131 = *(_QWORD *)(v126 + 40);
              v132 = 32 * v127;
              do
              {
                if (!*(_BYTE *)v130)
                {
                  v133 = *(unsigned int *)(v130 + 4);
                  if ((int)v133 >= 0)
                    v134 = (uint64_t *)(*(_QWORD *)(v131 + 272) + 8 * v133);
                  else
                    v134 = (uint64_t *)(*(_QWORD *)(v131 + 24) + 16 * (v133 & 0x7FFFFFFF) + 8);
                  v135 = *v134;
                  if (*v134)
                  {
                    v136 = *(_QWORD *)(v135 + 16);
                    *(_QWORD *)(v135 + 16) = v130;
                    *(_QWORD *)(v130 + 16) = v136;
                    if ((*(_BYTE *)(v130 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v130 + 24) = v135;
                    }
                    else
                    {
                      *(_QWORD *)(v130 + 24) = 0;
                      v134 = (uint64_t *)(v136 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v130 + 16) = v130;
                    *(_QWORD *)(v130 + 24) = 0;
                  }
                  *v134 = v130;
                }
                v130 += 32;
                v132 -= 32;
              }
              while (v132);
            }
            v128 = *(_QWORD *)(v126 + 728);
            if (v128)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v128 + 24))(v128, v120);
            v129 = *(_QWORD *)v113 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v120 = v129 | *(_QWORD *)v120 & 7;
            *(_QWORD *)(v120 + 8) = v113;
            *(_QWORD *)(v129 + 8) = v120;
            *(_QWORD *)v113 = *(_QWORD *)v113 & 7 | v120;
          }
        }
      }
      if ((*(_BYTE *)v113 & 4) == 0)
      {
        while ((*(_WORD *)(v113 + 44) & 8) != 0)
          v113 = *(_QWORD *)(v113 + 8);
      }
      v113 = *(_QWORD *)(v113 + 8);
      if ((int32x2_t *)v113 == v112)
        goto LABEL_242;
      continue;
    }
  }
  if (v109 == 24)
  {
    sub_1C52E4F60(a2, (uint64_t)v66, 256);
    return 1;
  }
  else
  {
LABEL_246:
    v137 = 1;
    sub_1C52E4F60(a2, (uint64_t)v66, 1);
  }
  return v137;
}

void sub_1C52E4F60(int32x2_t *a1, uint64_t a2, int a3)
{
  int32x2_t *v3;
  unint64_t FirstTerminator;
  int32x2_t *v7;
  unint64_t v8;
  int32x2_t *v9;
  unsigned __int16 *v10;
  uint64_t v11;
  int v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  llvm::MachineFunction *v17;
  unsigned __int8 *v18;
  unint64_t v19;
  unsigned __int8 *v20;
  int32x2_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  const llvm::MachineOperand *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  _BYTE *v40;
  _BYTE *v41;
  int32x2_t *v43;
  unsigned __int8 *v44[4];
  unsigned __int8 *v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[5];

  v48[4] = *MEMORY[0x1E0C80C00];
  v46 = v48;
  v47 = 0x400000000;
  v43 = a1 + 40;
  v3 = (int32x2_t *)a1[41];
  if (v3 == &a1[40])
    return;
  do
  {
    FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator((llvm::MachineBasicBlock *)v3);
    v7 = v3 + 6;
    if (&v3[6] != (int32x2_t *)FirstTerminator)
    {
      v8 = FirstTerminator;
      v9 = v3 + 5;
      do
      {
        v10 = *(unsigned __int16 **)(v8 + 16);
        v11 = *((_QWORD *)v10 + 1);
        if ((*(_WORD *)(v8 + 44) & 0xC) != 0 && (*(_WORD *)(v8 + 44) & 4) == 0)
        {
          v14 = v8;
          if ((v11 & 0x20) == 0)
          {
            while ((*(_WORD *)(v14 + 44) & 8) != 0)
            {
              v14 = *(_QWORD *)(v14 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v14 + 16) + 8) & 0x20) != 0)
                goto LABEL_9;
            }
            goto LABEL_16;
          }
        }
        else if ((v11 & 0x20) == 0)
        {
          goto LABEL_16;
        }
LABEL_9:
        if ((a3 & 0x100) != 0 || *(_DWORD *)(a2 + 76) == *v10)
        {
          v13 = 36;
          goto LABEL_17;
        }
LABEL_16:
        v13 = 0;
LABEL_17:
        if (((*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)a2 + 1136))(a2, v8) & a3) != 0)
          v15 = 38;
        else
          v15 = v13;
        if (v15)
        {
          v16 = *(_QWORD *)(a2 + 8) + 48 * v15;
          if ((*(_WORD *)(v8 + 44) & 4) != 0)
          {
            v17 = (llvm::MachineFunction *)v3[4];
            v20 = *(unsigned __int8 **)(v8 + 56);
            v45 = v20;
            if (v20)
              llvm::MetadataTracking::track((uint64_t)&v45, v20, 2);
            v19 = *((_QWORD *)v17 + 28);
            if (v19)
              *((_QWORD *)v17 + 28) = *(_QWORD *)v19;
            else
              v19 = sub_1C484358C((uint64_t)v17 + 128, 72, 3);
            v44[0] = v45;
            if (v45)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v45, v45, (uint64_t)v44);
              v45 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v19, v17, v16, v44, 0);
            if (v44[0])
              llvm::MetadataTracking::untrack((uint64_t)v44, v44[0]);
            if (v45)
              llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
            if (v7 != (int32x2_t *)v8 && (*(_WORD *)(v8 + 44) & 4) != 0)
              *(_WORD *)(v19 + 44) |= 0xCu;
            sub_1C512CA10((uint64_t *)&v3[5], (uint64_t *)v8, v19);
          }
          else
          {
            v17 = (llvm::MachineFunction *)v3[4];
            v18 = *(unsigned __int8 **)(v8 + 56);
            v45 = v18;
            if (v18)
              llvm::MetadataTracking::track((uint64_t)&v45, v18, 2);
            v19 = *((_QWORD *)v17 + 28);
            if (v19)
              *((_QWORD *)v17 + 28) = *(_QWORD *)v19;
            else
              v19 = sub_1C484358C((uint64_t)v17 + 128, 72, 3);
            v44[0] = v45;
            if (v45)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v45, v45, (uint64_t)v44);
              v45 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v19, v17, v16, v44, 0);
            if (v44[0])
              llvm::MetadataTracking::untrack((uint64_t)v44, v44[0]);
            if (v45)
              llvm::MetadataTracking::untrack((uint64_t)&v45, v45);
            v21 = *v9;
            *(int32x2_t *)(v19 + 24) = *v9;
            v22 = *(_QWORD *)(*(_QWORD *)&v21 + 32);
            v23 = *(unsigned int *)(v19 + 40);
            if ((_DWORD)v23)
            {
              v31 = *(_QWORD *)(v19 + 32);
              v32 = *(_QWORD *)(v22 + 40);
              v33 = 32 * v23;
              do
              {
                if (!*(_BYTE *)v31)
                {
                  v34 = *(unsigned int *)(v31 + 4);
                  if ((int)v34 >= 0)
                    v35 = (uint64_t *)(*(_QWORD *)(v32 + 272) + 8 * v34);
                  else
                    v35 = (uint64_t *)(*(_QWORD *)(v32 + 24) + 16 * (v34 & 0x7FFFFFFF) + 8);
                  v36 = *v35;
                  if (*v35)
                  {
                    v37 = *(_QWORD *)(v36 + 16);
                    *(_QWORD *)(v36 + 16) = v31;
                    *(_QWORD *)(v31 + 16) = v37;
                    if ((*(_BYTE *)(v31 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v31 + 24) = v36;
                    }
                    else
                    {
                      *(_QWORD *)(v31 + 24) = 0;
                      v35 = (uint64_t *)(v37 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v31 + 16) = v31;
                    *(_QWORD *)(v31 + 24) = 0;
                  }
                  *v35 = v31;
                }
                v31 += 32;
                v33 -= 32;
              }
              while (v33);
            }
            v24 = *(_QWORD *)(v22 + 728);
            if (v24)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v24 + 24))(v24, v19);
            v25 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v19 = v25 | *(_QWORD *)v19 & 7;
            *(_QWORD *)(v19 + 8) = v8;
            *(_QWORD *)(v25 + 8) = v19;
            *(_QWORD *)v8 = *(_QWORD *)v8 & 7 | v19;
          }
          v26 = (unsigned __int8 *)**(unsigned __int16 **)(v8 + 16);
          LODWORD(v44[0]) = 1;
          v44[1] = 0;
          v44[2] = v26;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v17, (const llvm::MachineOperand *)v44);
          v27 = *(unsigned int *)(v8 + 40);
          if ((_DWORD)v27)
          {
            v28 = *(const llvm::MachineOperand **)(v8 + 32);
            v29 = 32 * v27;
            do
            {
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v17, v28);
              v28 = (const llvm::MachineOperand *)((char *)v28 + 32);
              v29 -= 32;
            }
            while (v29);
          }
          v30 = v47;
          if (v47 >= (unint64_t)HIDWORD(v47))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v47 + 1, 8);
            v30 = v47;
          }
          *((_QWORD *)v46 + v30) = v8;
          LODWORD(v47) = v47 + 1;
          if (llvm::MachineInstr::shouldUpdateCallSiteInfo((llvm::MachineInstr *)v8))
          {
            llvm::MachineFunction::eraseCallSiteInfo(a1, (const llvm::MachineInstr *)v8);
            if (!v8)
            {
LABEL_64:
              while ((*(_WORD *)(v8 + 44) & 8) != 0)
                v8 = *(_QWORD *)(v8 + 8);
              goto LABEL_65;
            }
          }
          else if (!v8)
          {
            goto LABEL_64;
          }
        }
        if ((*(_BYTE *)v8 & 4) == 0)
          goto LABEL_64;
LABEL_65:
        v8 = *(_QWORD *)(v8 + 8);
      }
      while ((int32x2_t *)v8 != v7);
    }
    v3 = (int32x2_t *)v3[1];
  }
  while (v3 != v43);
  v38 = (char *)v46;
  if ((_DWORD)v47)
  {
    v39 = (char *)v46 + 8 * v47;
    do
    {
      v40 = *(_BYTE **)v38;
      v41 = *(_BYTE **)v38;
      if ((**(_BYTE **)v38 & 4) == 0)
      {
        v41 = *(_BYTE **)v38;
        if ((*((_WORD *)v40 + 22) & 8) != 0)
        {
          v41 = *(_BYTE **)v38;
          do
            v41 = (_BYTE *)*((_QWORD *)v41 + 1);
          while ((*((_WORD *)v41 + 22) & 8) != 0);
        }
      }
      sub_1C487FE80(*((_QWORD *)v40 + 3) + 40, (uint64_t)v40, *((_QWORD *)v41 + 1));
      v38 += 8;
    }
    while (v38 != v39);
    v38 = (char *)v46;
  }
  if (v38 != (char *)v48)
    free(v38);
}

uint64_t sub_1C52E5480(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Live DEBUG_VALUE analysis";
  *(_QWORD *)(v2 + 8) = 25;
  *(_QWORD *)(v2 + 16) = "livedebugvalues";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7030;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C52E5530;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

BOOL llvm::debuginfoShouldUseDebugInstrRef(uint64_t a1)
{
  return *(_DWORD *)(a1 + 24) == 42 && dword_1ED830560 != 2 || dword_1ED830560 == 1;
}

uint64_t sub_1C52E5530()
{
  uint64_t v0;
  _QWORD *v1;
  llvm **v2;
  llvm *v3;
  unint64_t v5;
  double InstrRefBasedLiveDebugValues;
  llvm *v7;
  llvm *v8;
  llvm *v9;
  double VarLocBasedLiveDebugValues;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  _QWORD *v16;
  _QWORD v17[2];

  v0 = operator new();
  v1 = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F7030);
  *v1 = &off_1E814DB00;
  v1[31] = 0;
  v2 = (llvm **)(v1 + 31);
  *(_QWORD *)(v0 + 256) = 0;
  v3 = llvm::MachineDominatorTree::MachineDominatorTree((llvm::MachineDominatorTree *)(v1 + 34));
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v15 = qword_1ED830BC0[0];
  v5 = atomic_load(&qword_1ED803EF8);
  if (v5 != -1)
  {
    v17[0] = sub_1C52E5480;
    v17[1] = &v15;
    v16 = v17;
    std::__call_once(&qword_1ED803EF8, &v16, (void (__cdecl *)(void *))sub_1C4776838);
  }
  InstrRefBasedLiveDebugValues = llvm::makeInstrRefBasedLiveDebugValues(v3);
  v8 = v7;
  v9 = *v2;
  *v2 = v8;
  if (v9)
    v9 = (llvm *)(*(uint64_t (**)(llvm *, double))(*(_QWORD *)v9 + 16))(v9, InstrRefBasedLiveDebugValues);
  VarLocBasedLiveDebugValues = llvm::makeVarLocBasedLiveDebugValues(v9);
  v12 = v11;
  v13 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 256) = v12;
  if (v13)
    (*(void (**)(uint64_t, double))(*(_QWORD *)v13 + 16))(v13, VarLocBasedLiveDebugValues);
  return v0;
}

void sub_1C52E565C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  *a1 = &off_1E814DB00;
  sub_1C61ECEE8((llvm::Pass *)(a1 + 34));
  v2 = a1[32];
  a1[32] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = a1[31];
  a1[31] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  *a1 = &unk_1E8144BE8;
  v4 = (_QWORD *)a1[22];
  if (v4 != a1 + 24)
    free(v4);
  v5 = (_QWORD *)a1[13];
  if (v5 != a1 + 15)
    free(v5);
  v6 = (_QWORD *)a1[4];
  if (v6 != a1 + 6)
    free(v6);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C52E5718(_QWORD *a1)
{
  sub_1C52E565C(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C52E573C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  return llvm::MachineFunctionPass::getAnalysisUsage(a1, this);
}

uint64_t sub_1C52E576C(_QWORD *a1, llvm::MachineFunction *this)
{
  _BOOL4 v4;
  int v5;
  uint64_t AnalysisPass;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = llvm::MachineFunction::useDebugInstrRef(this);
  if (byte_1ED803F80)
    v5 = 1;
  else
    v5 = v4;
  AnalysisPass = llvm::PMDataManager::findAnalysisPass(*(llvm::PMDataManager **)(a1[1] + 24), &llvm::TargetPassConfig::ID, 1);
  if (AnalysisPass)
    v7 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisPass + 96))(AnalysisPass, &llvm::TargetPassConfig::ID);
  else
    v7 = 0;
  a1[33] = v7;
  if (v5)
  {
    v8 = a1 + 34;
    llvm::MachineDominatorTree::calculate((llvm::MachineDominatorTree *)(a1 + 34), this);
    v9 = a1 + 31;
    v7 = a1[33];
  }
  else
  {
    v8 = 0;
    v9 = a1 + 32;
  }
  return (**(uint64_t (***)(_QWORD, llvm::MachineFunction *, _QWORD *, uint64_t, _QWORD, _QWORD))*v9)(*v9, this, v8, v7, dword_1ED804040, dword_1ED804100);
}

void sub_1C52E5838(uint64_t a1@<X8>)
{
  int v2;
  _OWORD *v3;
  void *v4;
  int v5;
  unsigned int v6;
  void *v7;
  uint64_t v8;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  memset(v9, 0, sizeof(v9));
  v7 = v9;
  v8 = 0x600000000;
  sub_1C4765AA4((char *)&v7, 1uLL, 0);
  v2 = 11;
  LODWORD(v10) = 11;
  v3 = v7;
  *(_QWORD *)v7 |= 8uLL;
  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x600000000;
  v5 = v8;
  if (!(_DWORD)v8 || &v7 == (void **)a1)
    goto LABEL_9;
  if (v8 < 7)
  {
    v6 = v8;
LABEL_7:
    memcpy(v4, v3, 8 * v6);
    v3 = v7;
    goto LABEL_8;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 8);
  v6 = v8;
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = *(void **)a1;
    goto LABEL_7;
  }
LABEL_8:
  *(_DWORD *)(a1 + 8) = v5;
  v2 = v10;
LABEL_9:
  *(_DWORD *)(a1 + 64) = v2;
  if (v3 != v9)
    free(v3);
}

uint64_t sub_1C52E5964()
{
  int v1;
  int v2;
  int *v3;
  __n128 v4;

  v2 = 1;
  v4.n128_u64[0] = (unint64_t)"Use instruction-ref based LiveDebugValues with normal DBG_VALUE inputs";
  v4.n128_u64[1] = 70;
  LOBYTE(v1) = 0;
  v3 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED803F00, "force-instr-ref-livedebugvalues", &v2, &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED803F00, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Use experimental new value-tracking variable locations";
  v4.n128_u64[1] = 54;
  sub_1C621ED58((__int128 *)&v4);
  __cxa_atexit((void (*)(void *))sub_1C506F830, &qword_1ED8304E0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Maximum input basic blocks before DBG_VALUE limit applies";
  v4.n128_u64[1] = 57;
  v1 = 1;
  v2 = 10000;
  v3 = &v2;
  sub_1C621EDF4((__int128 *)&v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED803FC0, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Maximum input DBG_VALUE insts supported by debug range extension";
  v4.n128_u64[1] = 64;
  v1 = 1;
  v2 = 50000;
  v3 = &v2;
  sub_1C621EED0((__int128 *)&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED804080, &dword_1C475E000);
}

uint64_t sub_1C52E5AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t ***v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  _QWORD ***v20;
  _QWORD *v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char v28;
  uint64_t ***v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned int v34;
  uint64_t ****v35;
  uint64_t ***v36;
  uint64_t ****v37;
  int v38;
  BOOL v39;
  unsigned int v40;
  uint64_t ***v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t j;
  uint64_t k;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _DWORD *v57;
  _DWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  unsigned int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _WORD *v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  int v70;
  unsigned int v71;
  unsigned int *m;
  unsigned __int16 *v73;
  int v74;
  unsigned __int16 *v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int8x16_t FragmentInfo;
  int v85;
  unsigned int v86;
  int8x16_t *v87;
  int8x16_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  llvm::DIExpression *v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int16 v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  BOOL v124;
  int v126;
  uint64_t v127;
  unsigned int v128;
  _QWORD *n;
  unsigned int v130;
  _DWORD *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  llvm::MDNode *v137;
  uint64_t ii;
  int v140;
  _QWORD *v142;
  uint64_t v143;
  uint64_t ****v144;
  uint64_t ***v145;
  uint64_t v146;
  char *v147;
  uint64_t jj;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int32x2_t v160;
  int64x2_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  uint64_t *v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  int8x16_t v177;
  unint64_t v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t kk;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  int v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int v191;
  uint64_t mm;
  _DWORD *v193;
  _BYTE *v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  int64_t v200;
  _DWORD *v201;
  unsigned int *v202;
  uint64_t v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int *v206;
  uint64_t v207;
  unint64_t v208;
  unsigned int *v209;
  unsigned int v210;
  unsigned int v211;
  uint64_t *v212;
  uint64_t *v213;
  int v214;
  uint64_t v215;
  _QWORD *v216;
  uint64_t *v217;
  char v218;
  _QWORD *v219;
  _QWORD *v220;
  uint64_t v221;
  _QWORD *v222;
  uint64_t v223;
  unint64_t *v224;
  uint64_t v225;
  unint64_t v226;
  unint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t *v230;
  uint64_t v231;
  int v232;
  BOOL v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  BOOL v237;
  BOOL v238;
  unsigned __int8 v239;
  uint64_t v240;
  unsigned int *v241;
  uint64_t v242;
  unsigned int *v243;
  unsigned int *v244;
  __int128 *v245;
  unsigned int *v246;
  unsigned int *v247;
  char *v248;
  unint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t v262;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  unint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _WORD *v272;
  int v273;
  uint64_t v274;
  unsigned int v275;
  BOOL v276;
  int v277;
  unsigned int v278;
  unsigned int *nn;
  unsigned __int16 *v280;
  int v281;
  unsigned __int16 *v282;
  unsigned int v283;
  uint64_t v284;
  BOOL v285;
  uint64_t v286;
  uint64_t v287;
  unint64_t v288;
  unint64_t v289;
  unint64_t *v290;
  unsigned int *v291;
  uint64_t v292;
  unint64_t v293;
  _QWORD *v294;
  unint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  __int16 v300;
  __int16 v301;
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  BOOL v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  int *v311;
  unint64_t v312;
  int v313;
  uint64_t v314;
  _QWORD *v315;
  _QWORD **v316;
  unsigned int *v317;
  uint64_t v318;
  int8x16_t v319;
  _QWORD *v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t *v325;
  uint64_t *v326;
  uint64_t **v327;
  uint64_t **v328;
  _QWORD *v329;
  _QWORD *v330;
  unsigned int *v331;
  unsigned int *v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t *v336;
  uint64_t v337;
  int v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  unsigned __int16 *v343;
  _WORD *v344;
  int v345;
  int v346;
  uint64_t v347;
  unint64_t v348;
  int v350;
  char v351;
  BOOL v352;
  int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  int8x16_t *v361;
  unint64_t v362;
  uint64_t v363;
  unint64_t *v364;
  uint64_t v365;
  _DWORD *v366;
  _DWORD *v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  _DWORD *v373;
  unsigned int v374;
  unint64_t v375;
  _DWORD *v376;
  BOOL v377;
  int v378;
  unint64_t v379;
  unint64_t v380;
  BOOL v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  unsigned __int16 *v388;
  unsigned int v389;
  __int16 v390;
  int v391;
  unsigned int v392;
  unsigned __int16 *v393;
  uint64_t v394;
  int v395;
  int v396;
  unsigned int v397;
  BOOL v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  int v403;
  uint64_t v404;
  _DWORD *v405;
  uint64_t v406;
  _OWORD *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  BOOL v412;
  uint64_t v413;
  uint64_t v414;
  _QWORD *v415;
  _QWORD *v416;
  _QWORD *v417;
  _QWORD *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  _QWORD *v422;
  _QWORD *v423;
  uint64_t v424;
  uint64_t v425;
  unsigned __int8 *v426;
  unsigned __int8 *v427;
  int v428;
  BOOL v429;
  unint64_t v431;
  uint64_t *v432;
  uint64_t *v433;
  uint64_t *v434;
  uint64_t **v435;
  uint64_t *v436;
  uint64_t *v437;
  uint64_t **v438;
  uint64_t v439;
  BOOL v440;
  _QWORD *v441;
  _QWORD *v442;
  char v443;
  _QWORD *v444;
  _DWORD *v445;
  uint64_t v446;
  uint64_t *v447;
  uint64_t *v448;
  void *v449;
  _BYTE *v450;
  uint64_t v451;
  uint64_t *v452;
  uint64_t *v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  __int16 v459;
  uint64_t *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t *v465;
  uint64_t **v466;
  int v467;
  uint64_t *v468;
  uint64_t *v469;
  unsigned int v470;
  uint64_t *v471;
  BOOL v472;
  uint64_t *v473;
  uint64_t v474;
  uint64_t v475;
  int v476;
  BOOL v477;
  unint64_t v478;
  unint64_t v479;
  int v480;
  char *v481;
  char *v482;
  __int128 v483;
  __int128 v484;
  __int128 v485;
  void *v486;
  void **v487;
  _DWORD *v488;
  unint64_t v489;
  uint64_t v491;
  char *v492;
  const void **v493;
  void *v494;
  unint64_t v495;
  const void **v496;
  BOOL v497;
  uint64_t v498;
  _BOOL4 v500;
  unint64_t v501;
  char *v502;
  __int128 *v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  __int128 *v507;
  __int128 *v508;
  __int128 *v509;
  int v510;
  __int128 *v511;
  uint64_t v512;
  __int128 v513;
  __int128 v514;
  __int128 v515;
  unint64_t v516;
  char *v517;
  uint64_t v518;
  unsigned int v519;
  _BYTE *v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  __int128 *v525;
  __int128 *v526;
  __int128 *v527;
  uint64_t *v528;
  uint64_t *v529;
  char v530;
  _QWORD *v531;
  uint64_t v532;
  uint64_t v533;
  void **v534;
  _QWORD *v535;
  unsigned int v536;
  uint64_t *v537;
  uint64_t v538;
  llvm::LexicalScopes *v539;
  _QWORD *v540;
  _QWORD *v541;
  int v542;
  int8x16_t v543;
  unsigned int v544;
  unsigned int v545;
  char *v546;
  char *v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  llvm::MachineBasicBlock *v551;
  uint64_t v552;
  char v553;
  int v554;
  int v555;
  unint64_t v556;
  uint64_t v557;
  int v558[2];
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t *v562;
  int v563;
  void *__p;
  char *v565;
  uint64_t v566;
  void *v567;
  _BYTE *v568;
  uint64_t v569;
  void *v570;
  _BYTE *v571;
  uint64_t v572;
  _QWORD v573[2];
  int v574;
  _QWORD v575[2];
  int v576;
  char *v577;
  char *v578;
  uint64_t v579;
  int v580;
  _BYTE v581[128];
  _QWORD v582[2];
  unsigned int v583;
  _DWORD *v584;
  uint64_t v585;
  unsigned int v586;
  uint64_t **v587;
  uint64_t *v588;
  uint64_t v589;
  uint64_t v590[2];
  unsigned int v591;
  _QWORD v592[3];
  uint64_t *v593;
  uint64_t *v594;
  uint64_t v595;
  int v596;
  _BYTE v597[128];
  uint64_t *v598;
  uint64_t v599;
  uint64_t v600;
  int v601;
  _BYTE v602[128];
  _QWORD v603[2];
  unsigned int v604;
  char *v605;
  uint64_t v606;
  _BYTE v607[64];
  _BYTE *v608;
  uint64_t v609;
  _BYTE v610[128];
  _QWORD **v611;
  _QWORD *v612;
  uint64_t v613;
  uint64_t *v614;
  uint64_t v615;
  _BYTE v616[64];
  uint64_t v617;
  uint64_t *v618;
  unsigned int v619;
  uint64_t v620;
  _QWORD *v621;
  unsigned int v622;
  _QWORD *v623;
  _QWORD *v624;
  __int128 v625;
  __int128 v626;
  __int128 v627;
  __int128 v628;
  __int128 v629;
  __int128 v630;
  __int128 v631;
  __int128 v632;
  __int128 v633;
  __int128 v634;
  __int128 v635;
  __int128 v636;
  uint64_t v637;
  _QWORD *v638;
  _QWORD v639[73];
  _QWORD v640[73];
  uint64_t *v641;
  uint64_t *v642;
  _QWORD *v643[2];
  uint64_t v644;
  _QWORD *v645;
  unsigned int v646;
  _BYTE v647[24];
  int8x16_t v648;
  int8x16_t v649;
  uint64_t v650;
  unsigned int *v651;
  unsigned int *v652;
  _BYTE v653[16];
  _BYTE v654[32];
  char v655;
  __int128 v656;
  uint64_t v657;
  _BYTE v658[32];
  uint64_t v659;
  _BYTE v660[24];
  _QWORD **v661;
  _QWORD *v662;
  uint64_t v663;
  _OWORD v664[2];
  int8x16_t v665;
  int8x16_t v666;
  uint64_t v667;
  __int128 v668;
  uint64_t v669;
  _BYTE v670[72];
  __int128 v671;
  _OWORD v672[2];
  __int128 v673;
  __int128 v674;
  _OWORD v675[3];
  __int128 v676;
  uint64_t v677;
  _BYTE *v678;
  uint64_t v679;
  _BYTE v680[40];
  _BYTE v681[40];
  __int128 v682;
  __int128 v683;
  __int128 v684;
  __int128 v685;
  __int128 v686;
  __int128 v687;
  __int128 v688;
  __int128 v689;
  __int128 v690;
  __int128 v691;
  __int128 v692;
  uint64_t v693;
  _QWORD *v694;
  _QWORD v695[1497];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v695[1494] = *MEMORY[0x1E0C80C00];
  v538 = v5;
  v9 = *(uint64_t ****)v5;
  if ((*(_BYTE *)(*(_QWORD *)v5 + 23) & 0x20) == 0)
  {
LABEL_177:
    v28 = 0;
    return v28 & 1;
  }
  v10 = v8;
  v11 = v7;
  v12 = v6;
  v13 = (_QWORD *)v4;
  v14 = ***v9;
  *(_QWORD *)v681 = *(_QWORD *)v5;
  v15 = *(_DWORD *)(v14 + 2496);
  if (!v15)
  {
    v142 = 0;
LABEL_194:
    v19 = sub_1C541AB24(v14 + 2480, (uint64_t)v681, (uint64_t *)v681, v142);
    v143 = *(_QWORD *)v681;
    v19[3] = 0;
    v19[4] = 0;
    *v19 = v143;
    v19[1] = v19 + 3;
    v19[2] = 0x100000000;
    goto LABEL_12;
  }
  v16 = *(_QWORD *)(v14 + 2480);
  v17 = v15 - 1;
  v18 = v17 & ((v9 >> 4) ^ (v9 >> 9));
  v19 = (_QWORD *)(v16 + 40 * v18);
  v20 = (_QWORD ***)*v19;
  if ((uint64_t ***)*v19 != v9)
  {
    v21 = 0;
    v22 = 1;
    while (v20 != (_QWORD ***)-4096)
    {
      if (v21)
        v23 = 0;
      else
        v23 = v20 == (_QWORD ***)-8192;
      if (v23)
        v21 = v19;
      v24 = v18 + v22++;
      v18 = v24 & v17;
      v19 = (_QWORD *)(v16 + 40 * v18);
      v20 = (_QWORD ***)*v19;
      if ((uint64_t ***)*v19 == v9)
        goto LABEL_12;
    }
    if (v21)
      v142 = v21;
    else
      v142 = v19;
    goto LABEL_194;
  }
LABEL_12:
  v25 = *((unsigned int *)v19 + 4);
  if (!(_DWORD)v25)
    goto LABEL_177;
  v26 = (_QWORD *)(v19[1] + 8);
  v27 = 16 * v25;
  v28 = 0;
  while (*((_DWORD *)v26 - 2))
  {
    v26 += 2;
    v27 -= 16;
    if (!v27)
      return v28 & 1;
  }
  if (!*v26)
    goto LABEL_177;
  v29 = *(uint64_t ****)v538;
  v30 = ****(_QWORD ****)v538;
  *(_QWORD *)v681 = *(_QWORD *)v538;
  v31 = *(_DWORD *)(v30 + 2496);
  if (v31)
  {
    v32 = *(_QWORD *)(v30 + 2480);
    v33 = v31 - 1;
    v34 = v33 & ((v29 >> 4) ^ (v29 >> 9));
    v35 = (uint64_t ****)(v32 + 40 * v34);
    v36 = *v35;
    if (*v35 == v29)
      goto LABEL_28;
    v37 = 0;
    v38 = 1;
    while (v36 != (uint64_t ***)-4096)
    {
      if (v37)
        v39 = 0;
      else
        v39 = v36 == (uint64_t ***)-8192;
      if (v39)
        v37 = v35;
      v40 = v34 + v38++;
      v34 = v40 & v33;
      v35 = (uint64_t ****)(v32 + 40 * v34);
      v36 = *v35;
      if (*v35 == v29)
        goto LABEL_28;
    }
    if (v37)
      v144 = v37;
    else
      v144 = v35;
  }
  else
  {
    v144 = 0;
  }
  v35 = (uint64_t ****)sub_1C541AB24(v30 + 2480, (uint64_t)v681, (uint64_t *)v681, v144);
  v145 = *(uint64_t ****)v681;
  v35[3] = 0;
  v35[4] = 0;
  *v35 = v145;
  v35[1] = (uint64_t ***)(v35 + 3);
  v35[2] = (uint64_t ***)0x100000000;
LABEL_28:
  v41 = v35[1];
  if (*(_DWORD *)v41)
  {
    v42 = 16 * *((unsigned int *)v35 + 4) - 16;
    do
    {
      v43 = *((_DWORD *)v41 + 4);
      v41 += 2;
      v42 -= 16;
    }
    while (v43);
  }
  if (!*((_DWORD *)v41[1][-*((unsigned int *)v41[1] + 2) + 5] + 9))
    goto LABEL_177;
  v544 = v10;
  v13[1] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v538 + 16) + 176))(*(_QWORD *)(v538 + 16));
  v13[2] = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v538 + 16) + 104))(*(_QWORD *)(v538 + 16));
  v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v538 + 16) + 112))(*(_QWORD *)(v538 + 16));
  v13[3] = v44;
  v541 = v13 + 5;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v44 + 256))(v44, v538);
  v13[4] = v12;
  llvm::LexicalScopes::initialize((llvm::LexicalScopes *)(v13 + 14), (uint64_t ****)v538);
  v643[1] = 0;
  v643[0] = 0;
  v642 = (uint64_t *)v643;
  v644 = 1;
  for (i = 4; i != 20; i += 4)
    LODWORD(v643[i - 1]) = -1;
  v590[0] = 0;
  v590[1] = 0;
  v591 = 0;
  v623 = (uint64_t)(v13 + 40);
  v624 = v13 + 40;
  v637 = 0;
  v540 = v13 + 40;
  v638 = v13 + 40;
  v625 = 0u;
  v626 = 0u;
  v627 = 0u;
  v628 = 0u;
  v629 = 0u;
  v630 = 0u;
  v631 = 0u;
  v632 = 0u;
  v633 = 0u;
  v634 = 0u;
  v635 = 0u;
  v636 = 0u;
  v46 = 232;
  v639[0] = 1;
  do
  {
    v47 = (char *)&v623 + v46;
    *(_QWORD *)v47 = 0;
    v47[8] = 0;
    v47[24] = 0;
    *((_QWORD *)v47 + 4) = 0;
    v46 += 72;
  }
  while (v47 + 72 != (char *)v640);
  v640[0] = 1;
  v48 = 816;
  do
  {
    v49 = (char *)&v623 + v48;
    *(_QWORD *)v49 = 0;
    v49[8] = 0;
    v49[24] = 0;
    *((_QWORD *)v49 + 4) = 0;
    v48 += 72;
  }
  while (v49 + 72 != (char *)&v641);
  v641 = v590;
  v620 = 1;
  for (j = 8; j != 72; j += 16)
    *(uint64_t *)((char *)&v620 + j) = -4096;
  v617 = 1;
  for (k = 8; k != 72; k += 16)
    *(uint64_t *)((char *)&v617 + k) = -4096;
  v545 = v11;
  v557 = (uint64_t)v13;
  v614 = (uint64_t *)v616;
  v615 = 0x400000000;
  v588 = 0;
  v589 = 0;
  v587 = &v588;
  v584 = 0;
  v585 = 0;
  v586 = 0;
  v582[0] = 0;
  v582[1] = 0;
  v583 = 0;
  v577 = v581;
  v578 = v581;
  v579 = 16;
  v580 = 0;
  v575[1] = 0;
  v575[0] = 0;
  v576 = 0;
  v573[1] = 0;
  v573[0] = 0;
  v574 = 0;
  v571 = 0;
  v570 = 0;
  v572 = 0;
  v568 = 0;
  v567 = 0;
  v569 = 0;
  v608 = v610;
  v609 = 0x2000000000;
  v613 = 0;
  v612 = 0;
  v611 = &v612;
  v605 = v607;
  v606 = 0x800000000;
  v52 = *(_QWORD *)(v538 + 328);
  v53 = 1;
  v603[0] = 1;
  do
  {
    v54 = &v603[v53];
    *v54 = 0;
    *((_BYTE *)v54 + 8) = 0;
    *((_BYTE *)v54 + 24) = 0;
    v54[4] = 0;
    v53 += 5;
  }
  while (v54 + 5 != &v605);
  v55 = *(_QWORD *)(v52 + 56);
  v539 = (llvm::LexicalScopes *)(v13 + 14);
  if (v55 == v52 + 48)
    goto LABEL_201;
  v559 = v52;
  v561 = v52 + 48;
  do
  {
    v56 = *(unsigned int *)(v55 + 40);
    if ((_DWORD)v56)
    {
      v57 = *(_DWORD **)(v55 + 32);
      v58 = &v57[8 * v56];
      v59 = *(_QWORD *)(v557 + 8);
      if (v59)
        v60 = (_QWORD *)(v59 + 8);
      else
        v60 = 0;
      do
      {
        if ((*v57 & 0x10000FF) == 0x1000000)
        {
          v61 = v57[1];
          if (v61)
          {
            v62 = ((unint64_t)*(unsigned int *)(*v60 + 24 * v61 + 16) >> 3) & 0x1FFFFFFE;
            v64 = v60[5];
            v63 = v60[6];
            v65 = (_WORD *)(v63 + v62 + 2);
            v66 = *(unsigned __int16 *)(v63 + v62) + (*(_DWORD *)(*v60 + 24 * v61 + 16) & 0xF) * v61;
            do
            {
              v67 = 4 * (unsigned __int16)v66;
              v68 = *(unsigned __int16 *)(v64 + v67);
              if (*(_WORD *)(v64 + v67))
                v69 = v63 == 0;
              else
                v69 = 1;
              if (!v69)
              {
                v71 = *(unsigned __int16 *)(v64 + 4 * (unsigned __int16)v66 + 2) << 16;
                for (m = (unsigned int *)(*v60 + 24 * *(unsigned __int16 *)(v64 + 4 * (unsigned __int16)v66) + 8);
                      ;
                      m = (unsigned int *)(*v60 + 24 * v68 + 8))
                {
                  v73 = (unsigned __int16 *)(v63 + 2 * *m);
                  do
                  {
                    *(_DWORD *)v681 = (unsigned __int16)v68;
                    sub_1C4879438((uint64_t)&v608, (unsigned int *)v681);
                    v74 = *v73++;
                    v68 += v74;
                  }
                  while (v74);
                  v68 = HIWORD(v71);
                  if (HIWORD(v71))
                  {
                    v71 >>= 16;
                  }
                  else
                  {
                    if (!*v65)
                      goto LABEL_59;
                    v66 += (unsigned __int16)*v65++;
                    v75 = (unsigned __int16 *)(v60[5] + 4 * (unsigned __int16)v66);
                    v68 = *v75;
                    v71 = v75[1] << 16;
                  }
                  v63 = v60[6];
                }
              }
              v70 = (unsigned __int16)*v65++;
              v66 += v70;
            }
            while (v70);
          }
        }
LABEL_59:
        v57 += 8;
      }
      while (v57 != v58);
    }
    v76 = **(unsigned __int16 **)(v55 + 16);
    v77 = v561;
    if ((v76 - 13) > 1)
      goto LABEL_158;
    v23 = v76 == 14;
    v78 = v76 != 14;
    v79 = 96;
    if (v23)
      v79 = 32;
    v80 = *(_QWORD *)(v55 + 56);
    if (*(_DWORD *)(v80 + 8) == 2)
      v81 = *(_QWORD *)(v80 - 8);
    else
      v81 = 0;
    v82 = *(_QWORD *)(v55 + 32);
    v83 = *(_QWORD *)(v82 + v79 + 16);
    *(_QWORD *)v681 = *(_QWORD *)(v82 + (v78 << 6) + 16);
    if (v83)
    {
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v83 + 24), *(uint64_t **)(v83 + 32), (int8x16_t *)&v681[8]);
    }
    else
    {
      v681[8] = 0;
      v681[24] = 0;
    }
    *(_QWORD *)&v681[32] = v81;
    *(_QWORD *)v670 = 0;
    if ((sub_1C52EA6B8((uint64_t)v603, (uint64_t *)v681, (uint64_t *)v670) & 1) != 0)
      goto LABEL_111;
    v85 = LODWORD(v603[0]) >> 1;
    if ((v603[0] & 1) != 0)
      v86 = 8;
    else
      v86 = v604;
    if (4 * v85 + 4 >= 3 * v86)
    {
      v86 *= 2;
    }
    else if (v86 + ~v85 - HIDWORD(v603[0]) > v86 >> 3)
    {
      goto LABEL_83;
    }
    sub_1C52EA7E4((uint64_t)v603, v86);
    *(_QWORD *)v670 = 0;
    sub_1C52EA6B8((uint64_t)v603, (uint64_t *)v681, (uint64_t *)v670);
LABEL_83:
    v87 = *(int8x16_t **)v670;
    LODWORD(v603[0]) += 2;
    if (**(_QWORD **)v670 || *(_BYTE *)(*(_QWORD *)v670 + 24) || *(_QWORD *)(*(_QWORD *)v670 + 32))
      --HIDWORD(v603[0]);
    FragmentInfo = *(int8x16_t *)v681;
    v88 = *(int8x16_t *)&v681[16];
    *(_QWORD *)(*(_QWORD *)v670 + 32) = *(_QWORD *)&v681[32];
    *v87 = FragmentInfo;
    v87[1] = v88;
    if (**(_WORD **)(v55 + 16) == 14)
      v89 = *(unsigned int *)(v55 + 40);
    else
      v89 = 1;
    if (2 * (**(_WORD **)(v55 + 16) == 14) == v89)
    {
LABEL_90:
      v90 = *(_QWORD *)(v55 + 32);
      v91 = 96;
      if (**(_WORD **)(v55 + 16) == 14)
        v91 = 32;
      v92 = *(llvm::DIExpression **)(v90 + v91 + 16);
      v93 = (_QWORD *)*((_QWORD *)v92 + 3);
      if (((*((_QWORD *)v92 + 4) - (_QWORD)v93) & 0x7FFFFFFF8) == 0 || *v93 != 4099)
        *(_QWORD *)(v90 + 112) = llvm::DIExpression::prepend(v92, (const llvm::DIExpression *)8, 0);
      v94 = v606;
      if (v606 >= (unint64_t)HIDWORD(v606))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v605, (uint64_t)v607, v606 + 1, 8);
        v94 = v606;
      }
      *(_QWORD *)&v605[8 * v94] = v55;
      LODWORD(v606) = v606 + 1;
LABEL_158:
      if ((*(_BYTE *)v55 & 4) != 0)
        goto LABEL_162;
      goto LABEL_161;
    }
    v95 = *(_QWORD *)(v55 + 32);
    v96 = v95 + 32 * v89;
    v97 = *(_QWORD *)(*(_QWORD *)(v55 + 24) + 32);
    v98 = v95 + ((unint64_t)(**(_WORD **)(v55 + 16) == 14) << 6);
    while (!*(_BYTE *)v98)
    {
      if ((**(_BYTE **)(v97 + 360) & 4) == 0)
        break;
      v99 = *(_QWORD *)(v97 + 40);
      v100 = *(_QWORD *)(v99 + 456);
      v101 = *(_QWORD *)(v99 + 464);
      v102 = v101 - v100;
      if (v101 == v100)
        break;
      v103 = 0;
      v104 = 8 * (v102 >> 3);
      while (1)
      {
        if (*(_DWORD *)(v98 + 4) == *(_QWORD *)(v100 + 8 * v103))
        {
          v105 = *(_QWORD *)(*(_QWORD *)v97 + 112);
          if (v105)
          {
            if ((v103 + 2) < *(_DWORD *)(v105 + 8))
            {
              v106 = *(_QWORD *)(v105 + 8 * (v103 + 2) + 40);
              if (v106)
              {
                if ((*(_BYTE *)(v106 + 19) & 0x40) != 0)
                  break;
              }
            }
          }
        }
        ++v103;
        v104 -= 8;
        if (!v104)
          goto LABEL_111;
      }
      v98 += 32;
      if (v98 == v96)
        goto LABEL_90;
    }
LABEL_111:
    v107 = *(_QWORD *)(v557 + 32);
    if (!v107)
      goto LABEL_114;
    v108 = *(_QWORD *)(v107 + 112);
    v109 = *(_WORD *)(v108 + 1064);
    if ((v109 & 2) == 0)
    {
      if ((v109 & 4) == 0)
        goto LABEL_157;
LABEL_114:
      v110 = **(unsigned __int16 **)(v55 + 16);
      v111 = 96;
      if (v110 == 14)
        v111 = 32;
      v112 = *(_QWORD *)(v55 + 56);
      v113 = *(_DWORD *)(v112 + 8);
      if (v113 == 2)
        v114 = *(_QWORD *)(v112 - 8);
      else
        v114 = 0;
      v115 = *(_QWORD *)(v55 + 32);
      v116 = *(_QWORD *)(v115 + ((unint64_t)(v110 != 14) << 6) + 16);
      v117 = *(_QWORD *)(v115 + v111 + 16);
      *(_QWORD *)v670 = v116;
      if (v117)
      {
        FragmentInfo = llvm::DIExpression::getFragmentInfo((uint64_t *)*(_QWORD *)(v117 + 24), (uint64_t *)*(_QWORD *)(v117 + 32), (int8x16_t *)&v670[8]);
      }
      else
      {
        v670[8] = 0;
        v670[24] = 0;
      }
      *(_QWORD *)&v670[32] = v114;
      if (*(_WORD *)(v116 + 32)
        && (v113 != 2 || !*(_QWORD *)(v112 - 8))
        && !*(_BYTE *)(v115 + ((unint64_t)(v110 == 14) << 6)))
      {
        v118 = 2 * (v110 == 14);
        v119 = *(_QWORD *)(v557 + 8);
        v120 = *(_QWORD *)(*(_QWORD *)(v55 + 24) + 32);
        v121 = *(_DWORD *)((*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(v120 + 16) + 120))(*(_QWORD *)(v120 + 16), (__n128)FragmentInfo)+ 88);
        v122 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v119 + 552))(v119, v120);
        v123 = *(_DWORD *)(v115 + 32 * v118 + 4);
        v124 = !v123 || v123 == v121;
        if (!v124 && v123 != v122)
        {
          v126 = **(unsigned __int16 **)(v55 + 16);
          v127 = *(_QWORD *)(v55 + 32);
          v128 = *(_DWORD *)(v127 + ((unint64_t)(v126 == 14) << 6) + 4);
          if (v613)
          {
            for (n = v612; n; n = (_QWORD *)*n)
            {
              v130 = *((_DWORD *)n + 7);
              if (v128 >= v130)
              {
                if (v130 >= v128)
                  goto LABEL_156;
                ++n;
              }
            }
          }
          else if ((_DWORD)v609)
          {
            v131 = v608;
            v132 = 4 * v609;
            while (*v131 != v128)
            {
              ++v131;
              v132 -= 4;
              if (!v132)
                goto LABEL_149;
            }
            if (v132)
              goto LABEL_156;
          }
LABEL_149:
          v23 = v126 == 14;
          v133 = 96;
          if (v23)
            v133 = 32;
          if (((*(_QWORD *)(*(_QWORD *)(v127 + v133 + 16) + 32) - *(_QWORD *)(*(_QWORD *)(v127 + v133 + 16) + 24)) & 0x7FFFFFFF8) == 0)
          {
            *(_OWORD *)v658 = *(_OWORD *)v670;
            *(_OWORD *)&v658[16] = *(_OWORD *)&v670[16];
            v659 = *(_QWORD *)&v670[32];
            sub_1C52EAA8C((uint64_t)v681, (uint64_t)&v623, (uint64_t *)v658);
            if (v681[32])
            {
              v134 = *(char **)v681;
              v135 = &v681[16];
            }
            else
            {
              v136 = 96;
              if (**(_WORD **)(v55 + 16) == 14)
                v136 = 32;
              v137 = llvm::DIExpression::prepend(*(llvm::DIExpression **)(*(_QWORD *)(v55 + 32) + v136 + 16), (const llvm::DIExpression *)8, 0);
              sub_1C52EB8F8((uint64_t)v681, v55);
              LODWORD(v683) = 2;
              *(_QWORD *)&v682 = v137;
              sub_1C52EAB04(&v598, &v642, (uint64_t)v681);
              sub_1C52EB6D8(&v593, (uint64_t)&v598);
              sub_1C52EB3B0((uint64_t)&v623, (uint64_t)&v593, (__int128 *)v681);
              if (v593 != &v595)
                free(v593);
              if (v598 != &v600)
                free(v598);
              if (v694 != v695)
                free(v694);
              v134 = (char *)*((_QWORD *)&v683 + 1);
              v135 = (char *)&v684 + 8;
            }
            if (v134 != v135)
              free(v134);
          }
        }
      }
LABEL_156:
      v77 = v561;
      goto LABEL_157;
    }
    if ((v109 & 4) != 0 || *(_DWORD *)(v108 + 1116) != 3)
      goto LABEL_114;
LABEL_157:
    if (v55)
      goto LABEL_158;
LABEL_161:
    while ((*(_WORD *)(v55 + 44) & 8) != 0)
      v55 = *(_QWORD *)(v55 + 8);
LABEL_162:
    v55 = *(_QWORD *)(v55 + 8);
  }
  while (v55 != v77);
  if ((_DWORD)v606)
  {
    for (ii = *(_QWORD *)(v559 + 56); ii != v77; ii = *(_QWORD *)(ii + 8))
    {
      v140 = **(unsigned __int16 **)(ii + 16);
      if ((v140 - 13) >= 5 && v140 != 23)
      {
        v77 = ii;
        break;
      }
      if ((*(_BYTE *)ii & 4) == 0)
      {
        while ((*(_WORD *)(ii + 44) & 8) != 0)
          ii = *(_QWORD *)(ii + 8);
      }
    }
    v146 = 8 * v606;
    v147 = v605 - 8;
    do
    {
      sub_1C48532D0(*(unint64_t **)(v77 + 24), (unint64_t *)v77, *(unint64_t **)(*(_QWORD *)&v147[v146] + 24), *(unint64_t **)&v147[v146]);
      v146 -= 8;
    }
    while (v146);
  }
LABEL_201:
  v549 = v538 + 320;
  jj = v557;
  if (*(_QWORD *)(v538 + 328) != v538 + 320)
  {
    v149 = *(_QWORD *)(v538 + 328);
    do
    {
      v150 = v149 + 48;
      v548 = v149;
      v151 = *(_QWORD *)(v149 + 56);
      v552 = v149 + 48;
      if (v151 != v149 + 48)
      {
        do
        {
          v152 = **(unsigned __int16 **)(v151 + 16);
          if ((v152 - 13) <= 1)
          {
            v23 = v152 == 14;
            v153 = v152 != 14;
            v154 = 96;
            if (v23)
              v154 = 32;
            v155 = *(_QWORD *)(v151 + 56);
            if (*(_DWORD *)(v155 + 8) == 2)
              v156 = *(_QWORD *)(v155 - 8);
            else
              v156 = 0;
            v157 = *(_QWORD *)(v151 + 32);
            v158 = *(_QWORD *)(v157 + (v153 << 6) + 16);
            v159 = *(_QWORD *)(v157 + v154 + 16);
            *(_QWORD *)v658 = v158;
            if (v159)
            {
              llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v159 + 24), *(uint64_t **)(v159 + 32), (int8x16_t *)&v658[8]);
              LODWORD(v159) = v658[24];
              v158 = *(_QWORD *)v658;
            }
            else
            {
              v658[8] = 0;
              v658[24] = 0;
            }
            v659 = v156;
            v160 = vdup_n_s32(v159 == 0);
            v161.i64[0] = v160.u32[0];
            v161.i64[1] = v160.u32[1];
            v665 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v161, 0x3FuLL)), (int8x16_t)xmmword_1C85F6FF0, *(int8x16_t *)&v658[8]);
            *(_QWORD *)v670 = v158;
            *(_QWORD *)v681 = 0;
            if (!sub_1C52EDDE4((uint64_t)v582, v670, v681)
              || (v162 = *(_QWORD *)v681, *(_QWORD *)v681 == v582[0] + 112 * v583))
            {
              *(_QWORD *)v670 = &v670[16];
              *(_QWORD *)&v670[8] = 0x400000000;
              v672[0] = 0uLL;
              *((_QWORD *)&v671 + 1) = v672;
              sub_1C52EDCBC((uint64_t)v670, (unint64_t *)&v665);
              *(_QWORD *)v681 = v158;
              *(_QWORD *)&v681[8] = &v681[24];
              *(_QWORD *)&v681[16] = 0x400000000;
              if (*(_DWORD *)&v670[8])
                sub_1C52EE358((uint64_t)&v681[8], (uint64_t)v670);
              sub_1C52EE438((uint64_t)&v685, (_QWORD *)&v671 + 1);
              sub_1C52EDE7C(v582, v681, (uint64_t)&v681[8], (uint64_t)&v598);
              sub_1C61247C0((uint64_t)&v685, *((_QWORD **)&v685 + 1));
              if (*(_BYTE **)&v681[8] != &v681[24])
                free(*(void **)&v681[8]);
              *(int8x16_t *)&v681[8] = v665;
              v598 = &v600;
              v599 = 0x100000000;
              *(_QWORD *)v681 = v158;
              *(_QWORD *)&v681[24] = &v682;
              *(_QWORD *)&v681[32] = 0x100000000;
              sub_1C52EE630((uint64_t)v590, v681, (uint64_t)&v681[24], (uint64_t)&v593);
              v150 = v552;
              if (*(__int128 **)&v681[24] != &v682)
                free(*(void **)&v681[24]);
              if (v598 != &v600)
                free(v598);
              sub_1C61247C0((uint64_t)&v671 + 8, *(_QWORD **)&v672[0]);
              if (*(_BYTE **)v670 != &v670[16])
                free(*(void **)v670);
            }
            else
            {
              *(int8x16_t *)&v681[8] = v665;
              *(_QWORD *)v670 = &v670[16];
              *(_QWORD *)&v670[8] = 0x100000000;
              *(_QWORD *)v681 = v158;
              *(_QWORD *)&v681[24] = &v682;
              *(_QWORD *)&v681[32] = 0x100000000;
              sub_1C52EE630((uint64_t)v590, v681, (uint64_t)&v681[24], (uint64_t)&v598);
              if (*(__int128 **)&v681[24] != &v682)
                free(*(void **)&v681[24]);
              if (*(_BYTE **)v670 != &v670[16])
                free(*(void **)v670);
              if ((_BYTE)v600)
              {
                v163 = *(_QWORD *)(v162 + 104);
                v164 = v163 == 0;
                v165 = 88;
                if (v163)
                {
                  v166 = 0;
                  v560 = v162 + 96;
                }
                else
                {
                  v165 = 8;
                  v560 = *(_QWORD *)(v162 + 8) + 16 * *(unsigned int *)(v162 + 16);
                  v166 = 1;
                }
                v167 = v598;
                v168 = v162 + 8;
                v169 = *(uint64_t **)(v162 + v165);
                if (v166 == v164 && v169 == (uint64_t *)v560)
                {
                  sub_1C52EDCBC(v168, (unint64_t *)&v665);
                  v150 = v552;
                }
                else
                {
                  v550 = v168;
                  v546 = (char *)(v598 + 5);
                  v547 = (char *)(v598 + 3);
                  do
                  {
                    if (v163)
                      v170 = v169 + 4;
                    else
                      v170 = v169;
                    v172 = *v170;
                    v171 = v170[1];
                    if (v665.i64[0] + v665.i64[1] > v171 && *v170 + v171 > v665.i64[1])
                    {
                      v174 = *((unsigned int *)v167 + 8);
                      if (v174 >= *((unsigned int *)v167 + 9))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v547, (uint64_t)v546, v174 + 1, 16);
                        v174 = *((unsigned int *)v167 + 8);
                      }
                      v175 = (_QWORD *)(v167[3] + 16 * v174);
                      *v175 = v172;
                      v175[1] = v171;
                      ++*((_DWORD *)v167 + 8);
                      *(_QWORD *)v681 = *(_QWORD *)v658;
                      *(_OWORD *)&v681[8] = *(_OWORD *)v170;
                      *(_QWORD *)v670 = 0;
                      if (sub_1C52EE728(v590, v681, (uint64_t **)v670))
                        v176 = *(_QWORD *)v670;
                      else
                        v176 = v590[0] + 56 * v591;
                      v177 = v665;
                      v178 = *(unsigned int *)(v176 + 32);
                      if (v178 >= *(unsigned int *)(v176 + 36))
                      {
                        v543 = v665;
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v176 + 24, v176 + 40, v178 + 1, 16);
                        v177 = v543;
                        v178 = *(unsigned int *)(v176 + 32);
                      }
                      *(int8x16_t *)(*(_QWORD *)(v176 + 24) + 16 * v178) = v177;
                      ++*(_DWORD *)(v176 + 32);
                    }
                    if (v163)
                    {
                      v179 = (uint64_t *)v169[1];
                      v180 = v169;
                      if (v179)
                      {
                        do
                        {
                          v169 = v179;
                          v179 = (uint64_t *)*v179;
                        }
                        while (v179);
                      }
                      else
                      {
                        do
                        {
                          v169 = (uint64_t *)v180[2];
                          v23 = *v169 == (_QWORD)v180;
                          v180 = v169;
                        }
                        while (!v23);
                      }
                    }
                    else
                    {
                      v169 += 2;
                    }
                  }
                  while (v166 != v164 || v169 != (uint64_t *)v560);
                  sub_1C52EDCBC(v550, (unint64_t *)&v665);
                  v150 = v552;
                  if (!v151)
                  {
LABEL_267:
                    while ((*(_WORD *)(v151 + 44) & 8) != 0)
                      v151 = *(_QWORD *)(v151 + 8);
                    goto LABEL_268;
                  }
                }
              }
            }
          }
          if ((*(_BYTE *)v151 & 4) == 0)
            goto LABEL_267;
LABEL_268:
          v151 = *(_QWORD *)(v151 + 8);
        }
        while (v151 != v150);
      }
      v149 = *(_QWORD *)(v548 + 8);
    }
    while (v149 != v549);
    v181 = *(_QWORD *)(v538 + 328);
    for (jj = v557; v181 != v549; v181 = *(_QWORD *)(v181 + 8))
    {
      for (kk = *(_QWORD *)(v181 + 56); kk != v181 + 48; kk = *(_QWORD *)(kk + 8))
      {
        v183 = *(_QWORD *)(kk + 56);
        if (v183 && *(_DWORD *)(v183 + 4))
          goto LABEL_277;
      }
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v577, v181);
LABEL_277:
      ;
    }
  }
  *(_QWORD *)v681 = v538;
  v566 = 0;
  __p = 0;
  v565 = 0;
  sub_1C486DB3C((char **)&__p, (uint64_t)v681);
  v563 = 0;
  v184 = v565;
  v185 = (char *)__p;
  if (v565 != __p)
  {
    do
    {
      *(_QWORD *)v681 = 0;
      v186 = *((_QWORD *)v184 - 1);
      v184 -= 8;
      *(_QWORD *)v681 = v186;
      *((_QWORD *)sub_1C4A118C0((uint64_t)v575, &v563) + 1) = v186;
      v187 = v563;
      *((_DWORD *)sub_1C49D78CC((uint64_t)v573, (uint64_t *)v681) + 2) = v187;
      sub_1C52EA034((uint64_t)&v570, &v563);
      v188 = ++v563;
    }
    while (v184 != v185);
    v189 = *(_QWORD *)(v538 + 328);
    if (v188 > v545 && v189 != v549)
    {
      v191 = 0;
      do
      {
        for (mm = *(_QWORD *)(v189 + 56); mm != v189 + 48; mm = *(_QWORD *)(mm + 8))
        {
          if (**(unsigned __int16 **)(mm + 16) - 13 < 2)
            ++v191;
          if ((*(_BYTE *)mm & 4) == 0)
          {
            while ((*(_WORD *)(mm + 44) & 8) != 0)
              mm = *(_QWORD *)(mm + 8);
          }
        }
        v189 = *(_QWORD *)(v189 + 8);
      }
      while (v189 != v549);
      if (v191 > v544)
      {
        v28 = 0;
        goto LABEL_1013;
      }
    }
  }
  v553 = 0;
  v598 = (uint64_t *)v602;
  v599 = (uint64_t)v602;
  v600 = 16;
  v601 = 0;
LABEL_297:
  v193 = v570;
  if (v570 != v571)
  {
    v593 = (uint64_t *)v597;
    v594 = (uint64_t *)v597;
    v595 = 16;
    v596 = 0;
    while (1)
    {
      v551 = (llvm::MachineBasicBlock *)*((_QWORD *)sub_1C4A118C0((uint64_t)v575, v193) + 1);
      v194 = v570;
      v195 = v571;
      v196 = v571 - (_BYTE *)v570;
      if (v571 - (_BYTE *)v570 >= 5)
      {
        v197 = 0;
        v198 = v196 >> 2;
        v199 = *(_DWORD *)v570;
        v200 = (unint64_t)((v196 >> 2) - 2) >> 1;
        v201 = v570;
        do
        {
          v202 = &v201[v197 + 1];
          v203 = (2 * v197) | 1;
          v197 = 2 * v197 + 2;
          if (v197 >= v198)
          {
            v204 = *v202;
            v197 = v203;
          }
          else
          {
            v204 = *v202;
            v205 = v202[1];
            if (*v202 >= v205)
              v204 = v202[1];
            if (*v202 <= v205)
              v197 = v203;
            else
              ++v202;
          }
          *v201 = v204;
          v201 = v202;
        }
        while (v197 <= v200);
        v206 = (unsigned int *)(v195 - 4);
        if (v202 == (unsigned int *)(v195 - 4))
        {
          *v202 = v199;
        }
        else
        {
          *v202 = *v206;
          *v206 = v199;
          v207 = (char *)v202 - v194 + 4;
          if (v207 >= 5)
          {
            v208 = (((unint64_t)v207 >> 2) - 2) >> 1;
            v209 = (unsigned int *)&v194[4 * v208];
            v210 = *v209;
            v211 = *v202;
            if (*v209 > *v202)
            {
              do
              {
                *v202 = v210;
                v202 = v209;
                if (!v208)
                  break;
                v208 = (v208 - 1) >> 1;
                v209 = (unsigned int *)&v194[4 * v208];
                v210 = *v209;
              }
              while (*v209 > v211);
              *v202 = v211;
            }
          }
        }
      }
      v571 = v195 - 4;
      *(_QWORD *)v681 = v540;
      *(_QWORD *)&v692 = 0;
      *((_QWORD *)&v692 + 1) = v540;
      v690 = 0u;
      v691 = 0u;
      v688 = 0u;
      v689 = 0u;
      v686 = 0u;
      v687 = 0u;
      v684 = 0u;
      v685 = 0u;
      memset(&v681[8], 0, 32);
      v682 = 0u;
      v683 = 0u;
      v212 = (uint64_t *)*((_QWORD *)v551 + 8);
      v213 = (uint64_t *)*((_QWORD *)v551 + 9);
      if (v212 != v213)
      {
        v214 = 0;
        do
        {
          v215 = *v212;
          v216 = sub_1C477672C((uint64_t)&v598, *v212);
          if ((uint64_t *)v599 == v598)
            v217 = (uint64_t *)((char *)&v600 + 4);
          else
            v217 = &v600;
          if (v216 != (_QWORD *)(v599 + 8 * *(unsigned int *)v217))
          {
            *(_QWORD *)v670 = 0;
            v218 = sub_1C4E45B90((uint64_t)&v620, v215, v670);
            v219 = *(_QWORD **)v670;
            v220 = v621;
            if ((v620 & 1) != 0)
            {
              v220 = &v621;
              v221 = 4;
            }
            else
            {
              v221 = v622;
            }
            v222 = &v220[2 * v221];
            if ((v218 & 1) == 0)
              v219 = v222;
            if (v222 == v219)
            {
              v238 = 0;
              goto LABEL_368;
            }
            v223 = v219[1];
            if (v214)
            {
              *(_QWORD *)v670 = &v670[16];
              *(_QWORD *)&v670[8] = 0x800000000;
              sub_1C52EF070((uint64_t)v681, v223, (uint64_t)v670);
              if ((_DWORD)v692)
              {
                sub_1C621F5F8((uint64_t)&v681[8]);
                LODWORD(v692) = 0;
                v690 = 0u;
                v691 = 0u;
                v688 = 0u;
                v689 = 0u;
                v686 = 0u;
                v687 = 0u;
                v684 = 0u;
                v685 = 0u;
                v682 = 0u;
                v683 = 0u;
                memset(&v681[8], 0, 32);
              }
              DWORD1(v692) = 0;
              v224 = *(unint64_t **)v670;
              if (*(_DWORD *)&v670[8])
              {
                v225 = *(_QWORD *)v670 + 16 * *(unsigned int *)&v670[8];
                do
                {
                  v226 = *v224;
                  v227 = v224[1];
                  v224 += 2;
                  sub_1C52EC484((uint64_t)&v681[8], v226, v227);
                }
                while (v224 != (unint64_t *)v225);
                v224 = *(unint64_t **)v670;
              }
              if (v224 != (unint64_t *)&v670[16])
                free(v224);
            }
            else
            {
              sub_1C52EEB38((uint64_t)v681, v223);
            }
            ++v214;
          }
          ++v212;
        }
        while (v212 != v213);
      }
      *(_QWORD *)v670 = v540;
      *(_QWORD *)&v676 = 0;
      *((_QWORD *)&v676 + 1) = v540;
      v228 = (uint64_t)v551;
      memset(&v670[8], 0, 64);
      v671 = 0u;
      memset(v672, 0, sizeof(v672));
      v673 = 0u;
      v674 = 0u;
      memset(v675, 0, sizeof(v675));
      v229 = (char *)sub_1C477672C((uint64_t)&v577, (uint64_t)v551);
      if (v578 == v577)
        v230 = (uint64_t *)((char *)&v579 + 4);
      else
        v230 = &v579;
      if (v229 == &v578[8 * *(unsigned int *)v230])
      {
        v665.i64[0] = (uint64_t)&v681[8];
        v665.i64[1] = (uint64_t)&v666.i64[1];
        v666.i64[0] = 0x400000000;
        sub_1C52EEFF0(&v665);
        sub_1C52EF734((uint64_t)v658, (uint64_t)&v665);
        if ((unint64_t *)v665.i64[1] != &v666.u64[1])
          free((void *)v665.i64[1]);
        v231 = 0;
        v665.i64[0] = 0;
        v665.i64[1] = (uint64_t)&v666.i64[1];
        v666.i64[0] = 0x400000000;
        v232 = -1;
        LODWORD(v668) = -1;
        *((_QWORD *)&v668 + 1) = 0;
        v669 = 0;
        while (1)
        {
          v233 = *(_DWORD *)v660 == v232 && *(_QWORD *)&v660[8] == v231;
          if (v233 && *(_QWORD *)&v660[16] == v669)
            break;
          v234 = *(_QWORD *)&v660[8] + *(unsigned int *)v660;
          v235 = sub_1C52EA2D8((uint64_t)&v642, __ROR8__(v234, 32));
          if (!llvm::LexicalScopes::dominates(v539, *(const llvm::DILocation **)(*(_QWORD *)(v235 + 48) + 56), v551))
            sub_1C52EC484((uint64_t)&v670[8], v234, v234);
          sub_1C52EECF4((uint64_t)v658);
          v232 = v668;
          v231 = *((_QWORD *)&v668 + 1);
        }
        if ((unint64_t *)v665.i64[1] != &v666.u64[1])
          free((void *)v665.i64[1]);
        if (*(_BYTE **)&v658[8] != &v658[24])
          free(*(void **)&v658[8]);
        v228 = (uint64_t)v551;
      }
      sub_1C52EED40((uint64_t)v681, (uint64_t)v670);
      v236 = sub_1C52EA178(jj, v228, &v617);
      v237 = sub_1C52EF854(v236, (uint64_t)v681);
      if (!v237)
        sub_1C52EEB38(v236, (uint64_t)v681);
      if ((_DWORD)v676)
        sub_1C621F5F8((uint64_t)&v670[8]);
      v238 = !v237;
LABEL_368:
      if ((_DWORD)v692)
        sub_1C621F5F8((uint64_t)&v681[8]);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v598, (uint64_t)v551);
      if (v239 | v238)
        break;
LABEL_858:
      v193 = v570;
      if (v570 == v571)
      {
        v448 = v593;
        v447 = v594;
        v449 = v567;
        v450 = v568;
LABEL_874:
        v570 = v449;
        v571 = v450;
        v567 = v193;
        v568 = v193;
        v451 = v572;
        v572 = v569;
        v569 = v451;
        if (v447 != v448)
          free(v447);
        goto LABEL_297;
      }
    }
    v240 = sub_1C52EA178(jj, (uint64_t)v551, &v617);
    *(_QWORD *)v681 = &v681[16];
    *(_QWORD *)&v681[8] = 0x2000000000;
    v241 = (unsigned int *)&v689;
    v689 = 0uLL;
    *((_QWORD *)&v688 + 1) = &v689;
    *(_QWORD *)v670 = &v670[16];
    *(_QWORD *)&v670[8] = 0x2000000000;
    v675[0] = 0uLL;
    *((_QWORD *)&v674 + 1) = v675;
    *(_DWORD *)v658 = 0;
    sub_1C4879438((uint64_t)v670, (unsigned int *)v658);
    sub_1C52EFC00((uint64_t)v681, (uint64_t)v670, v240, (uint64_t)&v642);
    v242 = *((_QWORD *)&v689 + 1);
    if (*((_QWORD *)&v689 + 1))
      v243 = (unsigned int *)*((_QWORD *)&v688 + 1);
    else
      v243 = *(unsigned int **)v681;
    if (!*((_QWORD *)&v689 + 1))
      v241 = (unsigned int *)(*(_QWORD *)v681 + 4 * *(unsigned int *)&v681[8]);
    if (v243 != v241)
    {
      do
      {
        v244 = v243 + 7;
        if (!v242)
          v244 = v243;
        v245 = (__int128 *)sub_1C52EA2D8((uint64_t)&v642, (unint64_t)*v244 << 32);
        sub_1C52EFFC4(v658, (uint64_t)&v642, (uint64_t)v245);
        sub_1C52EB6D8(&v665, (uint64_t)v658);
        sub_1C52EB3B0((uint64_t)&v623, (uint64_t)&v665, v245);
        if ((int8x16_t *)v665.i64[0] != &v666)
          free((void *)v665.i64[0]);
        if (*(_BYTE **)v658 != &v658[16])
          free(*(void **)v658);
        if (v242)
        {
          v246 = (unsigned int *)*((_QWORD *)v243 + 1);
          if (v246)
          {
            do
            {
              v247 = v246;
              v246 = *(unsigned int **)v246;
            }
            while (v246);
          }
          else
          {
            do
            {
              v247 = (unsigned int *)*((_QWORD *)v243 + 2);
              v23 = *(_QWORD *)v247 == (_QWORD)v243;
              v243 = v247;
            }
            while (!v23);
          }
        }
        else
        {
          v247 = v243 + 1;
        }
        v243 = v247;
      }
      while (v247 != v241);
    }
    sub_1C47655E8((uint64_t)&v674 + 8, *(_QWORD **)&v675[0]);
    if (*(_BYTE **)v670 != &v670[16])
      free(*(void **)v670);
    sub_1C47655E8((uint64_t)&v688 + 8, (_QWORD *)v689);
    if (*(_BYTE **)v681 != &v681[16])
      free(*(void **)v681);
    *(_QWORD *)(jj + 424) = 0;
    if (v585)
    {
      if (v586 > 4 * (int)v585 && v586 >= 0x41)
      {
        sub_1C4AB1258(&v584);
      }
      else
      {
        if (v586)
        {
          v445 = v584;
          v446 = 16 * v586;
          do
          {
            *v445 = -1;
            v445 += 4;
            v446 -= 16;
          }
          while (v446);
        }
        v585 = 0;
      }
    }
    v248 = (char *)v551 + 48;
    v249 = *((_QWORD *)v551 + 7);
    while (2)
    {
      if ((char *)v249 == v248)
      {
        v439 = sub_1C52EA178(jj, (uint64_t)v551, &v620);
        v440 = sub_1C52EF854(v439, (uint64_t)&v624);
        if (!v440)
          sub_1C52EEB38(v439, (uint64_t)&v624);
        if ((_DWORD)v637)
        {
          sub_1C621F5F8((uint64_t)&v625);
          LODWORD(v637) = 0;
          v635 = 0u;
          v636 = 0u;
          v633 = 0u;
          v634 = 0u;
          v631 = 0u;
          v632 = 0u;
          v629 = 0u;
          v630 = 0u;
          v627 = 0u;
          v628 = 0u;
          v625 = 0u;
          v626 = 0u;
        }
        HIDWORD(v637) = 0;
        sub_1C52F18C8((uint64_t)v639);
        sub_1C52F18C8((uint64_t)v640);
        if (!v440)
        {
          v441 = (_QWORD *)*((_QWORD *)v551 + 11);
          v442 = (_QWORD *)*((_QWORD *)v551 + 12);
          while (v441 != v442)
          {
            *(_QWORD *)v681 = 0;
            *(_QWORD *)v681 = *v441;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v593, *(uint64_t *)v681);
            if (v443)
            {
              v444 = sub_1C49D78CC((uint64_t)v573, (uint64_t *)v681);
              sub_1C52EA034((uint64_t)&v567, (_DWORD *)v444 + 2);
            }
            ++v441;
          }
        }
        v553 = 1;
        goto LABEL_858;
      }
      v250 = **(unsigned __int16 **)(v249 + 16);
      if ((v250 - 13) >= 5)
      {
        *(_QWORD *)(jj + 424) = v249;
      }
      else if ((unsigned __int16)(v250 - 13) <= 1u)
      {
        v23 = v250 == 14;
        v251 = v250 != 14;
        v252 = 96;
        if (v23)
          v252 = 32;
        v253 = *(_QWORD *)(v249 + 56);
        if (*(_DWORD *)(v253 + 8) == 2)
          v254 = *(_QWORD *)(v253 - 8);
        else
          v254 = 0;
        v304 = *(_QWORD *)(v249 + 32);
        v305 = *(_QWORD *)(v304 + (v251 << 6) + 16);
        v306 = *(_QWORD *)(v304 + v252 + 16);
        v665.i64[0] = v305;
        if (v306)
        {
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v306 + 24), *(uint64_t **)(v306 + 32), (int8x16_t *)&v665.u64[1]);
        }
        else
        {
          v665.i8[8] = 0;
          v666.i8[8] = 0;
        }
        v667 = v254;
        v648 = v665;
        v649 = v666;
        v650 = v254;
        sub_1C52EAA8C((uint64_t)v654, (uint64_t)&v623, v648.i64);
        if (*(_WORD *)(v305 + 32))
          v307 = v655 == 0;
        else
          v307 = 1;
        if (!v307)
        {
          v308 = sub_1C52EA2D8((uint64_t)&v642, *(_QWORD *)(*(_QWORD *)v654 + 8 * *(unsigned int *)&v654[8] - 8));
          if (*(_QWORD *)(v308 + 48) != v249)
          {
            v309 = *(_QWORD *)(v249 + 32);
            if (!*(_BYTE *)(v309 + ((unint64_t)(**(_WORD **)(v249 + 16) == 14) << 6)))
            {
              v310 = v308;
              LODWORD(v592[0]) = *(_DWORD *)(v309 + ((unint64_t)(**(_WORD **)(v249 + 16) == 14) << 6) + 4);
              if (LODWORD(v592[0]))
              {
                v311 = sub_1C4A1156C((uint64_t *)&v584, v592);
                if (&v584[4 * v586] != v311)
                {
                  v312 = *((_QWORD *)sub_1C4A1156C((uint64_t *)&v584, v592) + 1);
                  if (v312)
                  {
                    v313 = 1;
                    goto LABEL_756;
                  }
                }
              }
              if (*(_QWORD *)(jj + 424)
                || *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v249 + 24) + 32) + 328) != *(_QWORD *)(v249 + 24))
              {
                v313 = 0;
                v312 = 0;
LABEL_756:
                v409 = 96;
                if (**(_WORD **)(v249 + 16) == 14)
                  v409 = 32;
                if (v313
                  && ((*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v249 + 32) + v409 + 16) + 32)
                     - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v249 + 32) + v409 + 16) + 24)) & 0x7FFFFFFF8) == 0)
                {
                  if (**(_WORD **)(v312 + 16) == 19)
                  {
                    v410 = *(_QWORD *)(v312 + 32);
                    v411 = v410 + 32;
                    *(_QWORD *)v647 = v410;
                    *(_QWORD *)&v647[8] = v410 + 32;
                    v647[16] = 1;
LABEL_764:
                    if (LODWORD(v592[0]) == *(_DWORD *)(v410 + 4))
                    {
                      sub_1C52F0858((uint64_t)v681, (uint64_t)&v624, 0x4000000100000000uLL, 0x4000000200000000uLL);
                      *(_QWORD *)v670 = *(_QWORD *)v681;
                      *(_QWORD *)&v670[8] = &v670[24];
                      *(_QWORD *)&v670[16] = 0x400000000;
                      if (*(_DWORD *)&v681[16])
                        sub_1C52EE358((uint64_t)&v670[8], (uint64_t)&v681[8]);
                      v672[0] = v685;
                      *(_QWORD *)v658 = *((_QWORD *)&v686 + 1);
                      *(_QWORD *)&v672[1] = v686;
                      *(_QWORD *)&v658[8] = &v658[24];
                      *(_QWORD *)&v658[16] = 0x400000000;
                      if (DWORD2(v687))
                        sub_1C52EE358((uint64_t)&v658[8], (uint64_t)&v687);
                      *(_OWORD *)v660 = v692;
                      *(_QWORD *)&v660[16] = v693;
                      while (1)
                      {
                        v412 = LODWORD(v672[0]) == *(_DWORD *)v660 && *((_QWORD *)&v672[0] + 1) == *(_QWORD *)&v660[8];
                        if (v412 && *(_QWORD *)&v672[1] == *(_QWORD *)&v660[16])
                          break;
                        v413 = sub_1C52EA2D8((uint64_t)&v642, __ROR8__(*((_QWORD *)&v672[0] + 1) + LODWORD(v672[0]), 32));
                        if (*(_DWORD *)(v413 + 56) == 3)
                        {
                          v414 = v413;
                          if (sub_1C52F0B70(*(_QWORD *)(v413 + 64), *(_DWORD *)(v413 + 72), v592[0])
                            && *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v414 + 48) + 32)
                                         + ((unint64_t)(**(_WORD **)(*(_QWORD *)(v414 + 48) + 16) == 14) << 6)
                                         + 4) == *(_DWORD *)(v411 + 4))
                          {
                            if (*(_BYTE **)&v658[8] != &v658[24])
                              free(*(void **)&v658[8]);
                            if (*(_BYTE **)&v670[8] != &v670[24])
                              free(*(void **)&v670[8]);
                            if ((__int128 *)v687 != &v688)
                              free((void *)v687);
                            if (*(_BYTE **)&v681[8] != &v681[24])
                              free(*(void **)&v681[8]);
                            goto LABEL_802;
                          }
                        }
                        sub_1C52EECF4((uint64_t)v670);
                      }
                      if (*(_BYTE **)&v658[8] != &v658[24])
                        free(*(void **)&v658[8]);
                      if (*(_BYTE **)&v670[8] != &v670[24])
                        free(*(void **)&v670[8]);
                      if ((__int128 *)v687 != &v688)
                        free((void *)v687);
                      if (*(_BYTE **)&v681[8] != &v681[24])
                        free(*(void **)&v681[8]);
                    }
                  }
                  else
                  {
                    (*(void (**)(_BYTE *__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(jj + 16)
                                                                                          + 416))(v647, *(_QWORD *)(jj + 16), v312);
                    if (v647[16])
                    {
                      v411 = *(_QWORD *)&v647[8];
                      v410 = *(_QWORD *)v647;
                      goto LABEL_764;
                    }
                  }
                }
                v556 = v312;
                if (v312)
                {
                  if (v589)
                  {
                    v415 = sub_1C52F0BF8((uint64_t)&v587, v312);
                    if (v415 != v416)
                    {
                      v417 = v415;
                      v418 = v416;
                      while (1)
                      {
                        v419 = sub_1C52EA2D8((uint64_t)&v642, v417[5]);
                        v420 = *(_QWORD *)(v310 + 64);
                        v421 = *(_QWORD *)(v419 + 64);
                        if (sub_1C50FDDD0(v310, v419)
                          && *(_QWORD *)(v420 + 8) == *(_QWORD *)(v421 + 8)
                          && *(_QWORD *)(v310 + 40) == *(_QWORD *)(v419 + 40))
                        {
                          break;
                        }
                        v422 = (_QWORD *)v417[1];
                        if (v422)
                        {
                          do
                          {
                            v423 = v422;
                            v422 = (_QWORD *)*v422;
                          }
                          while (v422);
                        }
                        else
                        {
                          do
                          {
                            v423 = (_QWORD *)v417[2];
                            v23 = *v423 == (_QWORD)v417;
                            v417 = v423;
                          }
                          while (!v23);
                        }
                        v417 = v423;
                        if (v423 == v418)
                          goto LABEL_801;
                      }
                      sub_1C52F05B8((uint64_t)&v623, v419);
                      v432 = sub_1C52F0BF8((uint64_t)&v587, v556);
                      if (v432 != v433)
                      {
                        v434 = v432;
                        v435 = (uint64_t **)v433;
                        do
                        {
                          v436 = (uint64_t *)v434[1];
                          v437 = v434;
                          if (v436)
                          {
                            do
                            {
                              v438 = (uint64_t **)v436;
                              v436 = (uint64_t *)*v436;
                            }
                            while (v436);
                          }
                          else
                          {
                            do
                            {
                              v438 = (uint64_t **)v437[2];
                              v23 = *v438 == v437;
                              v437 = (uint64_t *)v438;
                            }
                            while (!v23);
                          }
                          if (v587 == (uint64_t **)v434)
                            v587 = v438;
                          --v589;
                          sub_1C485B6E0(v588, v434);
                          operator delete(v434);
                          v434 = (uint64_t *)v438;
                        }
                        while (v438 != v435);
                      }
                    }
                  }
                }
LABEL_801:
                sub_1C52F05B8((uint64_t)&v623, v310);
                jj = v557;
              }
            }
          }
        }
LABEL_802:
        if (**(_WORD **)(v249 + 16) == 14)
          v424 = *(unsigned int *)(v249 + 40);
        else
          v424 = 1;
        if (2 * (**(_WORD **)(v249 + 16) == 14) == v424)
        {
LABEL_815:
          sub_1C52EB8F8((uint64_t)v681, v249);
          sub_1C52F05B8((uint64_t)&v623, (uint64_t)v681);
          sub_1C52EAB04(v670, &v642, (uint64_t)v681);
          sub_1C52EB6D8(&v651, (uint64_t)v670);
          sub_1C52EB3B0((uint64_t)&v623, (uint64_t)&v651, (__int128 *)v681);
          if (v651 != (unsigned int *)v653)
            free(v651);
          if (*(_BYTE **)v670 != &v670[16])
            free(*(void **)v670);
        }
        else
        {
          v425 = *(_QWORD *)(v249 + 32);
          v426 = (unsigned __int8 *)(v425 + 32 * v424);
          v427 = (unsigned __int8 *)(v425 + ((unint64_t)(**(_WORD **)(v249 + 16) == 14) << 6));
          while (1)
          {
            v428 = *v427;
            v429 = *((_DWORD *)v427 + 1) && v428 == 0;
            if (!v429 && (v428 - 1) >= 3)
              break;
            v427 += 32;
            if (v427 == v426)
              goto LABEL_815;
          }
          v431 = *(_QWORD *)(v249 + 48);
          if (v431 >= 8 && (v431 & 7) == 0)
            *(_QWORD *)(v249 + 48) = v431 & 0xFFFFFFFFFFFFFFF8;
          sub_1C52EB8F8((uint64_t)v681, v249);
          sub_1C52F05B8((uint64_t)&v623, (uint64_t)v681);
        }
        if (v694 != v695)
          free(v694);
        if (*((__int128 **)&v683 + 1) != (__int128 *)((char *)&v684 + 8))
          free(*((void **)&v683 + 1));
        if (v655 && *(_BYTE **)v654 != &v654[16])
          free(*(void **)v654);
      }
      v255 = *(_QWORD *)(v249 + 16);
      if ((*(_BYTE *)(v255 + 8) & 0x10) != 0)
        goto LABEL_554;
      v256 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v249 + 24) + 32) + 16);
      v257 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v256 + 120))(v256) + 88);
      *(_QWORD *)v670 = &v670[16];
      *(_QWORD *)&v670[8] = 0x2000000000;
      v675[0] = 0uLL;
      *((_QWORD *)&v674 + 1) = v675;
      *(_QWORD *)v654 = &v654[16];
      *(_QWORD *)&v654[8] = 0x400000000;
      v258 = *(unsigned int *)(v249 + 40);
      if (!(_DWORD)v258)
        goto LABEL_482;
      v554 = v257;
      v259 = *(_QWORD *)(v249 + 32);
      v260 = v259 + 32 * v258;
LABEL_409:
      if ((*(_DWORD *)v259 & 0x10000FF) == 0x1000000)
      {
        v261 = *(_DWORD *)(v259 + 4);
        if (v261 - 1 <= 0x3FFFFFFE)
        {
          v262 = *(_QWORD *)(*(_QWORD *)(v249 + 16) + 8);
          if ((*(_WORD *)(v249 + 44) & 0xC) == 0 || (*(_WORD *)(v249 + 44) & 4) != 0)
          {
            if ((v262 & 0x80) != 0)
              goto LABEL_416;
LABEL_425:
            v267 = *(_QWORD *)(jj + 8);
            if (v267)
              v268 = (_QWORD *)(v267 + 8);
            else
              v268 = 0;
            v269 = ((unint64_t)*(unsigned int *)(*v268 + 24 * v261 + 16) >> 3) & 0x1FFFFFFE;
            v271 = v268[5];
            v270 = v268[6];
            v272 = (_WORD *)(v270 + v269 + 2);
            v273 = *(unsigned __int16 *)(v270 + v269) + (*(_DWORD *)(*v268 + 24 * v261 + 16) & 0xF) * v261;
            do
            {
              v274 = 4 * (unsigned __int16)v273;
              v275 = *(unsigned __int16 *)(v271 + v274);
              if (*(_WORD *)(v271 + v274))
                v276 = v270 == 0;
              else
                v276 = 1;
              if (!v276)
              {
                v278 = *(unsigned __int16 *)(v271 + 4 * (unsigned __int16)v273 + 2) << 16;
                for (nn = (unsigned int *)(*v268 + 24 * *(unsigned __int16 *)(v271 + 4 * (unsigned __int16)v273) + 8);
                      ;
                      nn = (unsigned int *)(*v268 + 24 * v275 + 8))
                {
                  v280 = (unsigned __int16 *)(v270 + 2 * *nn);
                  do
                  {
                    *(_DWORD *)v681 = (unsigned __int16)v275;
                    sub_1C4879438((uint64_t)v670, (unsigned int *)v681);
                    v281 = *v280++;
                    v275 += v281;
                  }
                  while (v281);
                  v275 = HIWORD(v278);
                  if (HIWORD(v278))
                  {
                    v278 >>= 16;
                  }
                  else
                  {
                    if (!*v272)
                    {
                      v261 = *(_DWORD *)(v259 + 4);
                      goto LABEL_444;
                    }
                    v273 += (unsigned __int16)*v272++;
                    v282 = (unsigned __int16 *)(v268[5] + 4 * (unsigned __int16)v273);
                    v275 = *v282;
                    v278 = v282[1] << 16;
                  }
                  v270 = v268[6];
                }
              }
              v277 = (unsigned __int16)*v272++;
              v273 += v277;
            }
            while (v277);
LABEL_444:
            *(_DWORD *)v681 = v261;
            sub_1C51FC81C((int32x2_t *)&v584, v681);
            *(_DWORD *)v658 = *(_DWORD *)(v259 + 4);
            *(_QWORD *)&v658[8] = v249;
            sub_1C51FE9FC((uint64_t)&v584, (int *)v658, &v658[8], (uint64_t)v681);
            jj = v557;
LABEL_445:
            v259 += 32;
            if (v259 == v260)
            {
              if (*(_DWORD *)&v654[8])
              {
                *(_QWORD *)v681 = &v681[16];
                *(_QWORD *)&v681[8] = 0x2000000000;
                sub_1C52F004C((uint64_t)v658, (uint64_t)&v624, 0x100000000uLL);
                sub_1C52F004C((uint64_t)&v665, (uint64_t)&v624, 0x4000000000000000uLL);
                v283 = *(_DWORD *)v660;
                while (1)
                {
                  v284 = *(_QWORD *)&v660[8];
                  v285 = v283 == (_DWORD)v668 && *(_QWORD *)&v660[8] == *((_QWORD *)&v668 + 1);
                  if (v285 && *(_QWORD *)&v660[16] == v669)
                    break;
                  v286 = *(unsigned int *)&v681[8];
                  if (*(unsigned int *)&v681[8] >= (unint64_t)*(unsigned int *)&v681[12])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v681, (uint64_t)&v681[16], *(unsigned int *)&v681[8] + 1, 4);
                    v286 = *(unsigned int *)&v681[8];
                  }
                  v287 = v284 + v283;
                  *(_DWORD *)(*(_QWORD *)v681 + 4 * v286) = HIDWORD(v287);
                  ++*(_DWORD *)&v681[8];
                  v283 = -1;
                  if (*(_DWORD *)v660 != -1)
                  {
                    v288 = (v287 & 0xFFFFFFFF00000000) + 0x100000000;
                    if (*(_QWORD *)&v660[16] < v288)
                    {
                      while (1)
                      {
                        sub_1C52EEF04((uint64_t)v658);
                        if (!*(_DWORD *)&v658[16]
                          || *(_DWORD *)(*(_QWORD *)&v658[8] + 12) >= *(_DWORD *)(*(_QWORD *)&v658[8] + 8))
                        {
                          break;
                        }
                        v283 = 0;
                        *(_DWORD *)v660 = 0;
                        v290 = (unint64_t *)(*(_QWORD *)(*(_QWORD *)&v658[8]
                                                              + 16 * *(unsigned int *)&v658[16]
                                                              - 16)
                                                  + 16
                                                  * *(unsigned int *)(*(_QWORD *)&v658[8]
                                                                    + 16 * *(unsigned int *)&v658[16]
                                                                    - 4));
                        v289 = *v290;
                        *(_QWORD *)&v660[8] = *v290;
                        *(_QWORD *)&v660[16] = v290[1];
                        if (*(_QWORD *)&v660[16] >= v288)
                          goto LABEL_459;
                      }
                      v283 = -1;
                      *(_DWORD *)v660 = -1;
                      *(_QWORD *)&v660[8] = 0;
                      *(_QWORD *)&v660[16] = 0;
                    }
                    else
                    {
                      v289 = *(_QWORD *)&v660[8];
                      v283 = *(_DWORD *)v660;
LABEL_459:
                      if (v289 <= v288)
                      {
                        v283 = -(int)v289;
                        *(_DWORD *)v660 = -(int)v289;
                      }
                    }
                  }
                }
                if ((unint64_t *)v665.i64[1] != &v666.u64[1])
                  free((void *)v665.i64[1]);
                if (*(_BYTE **)&v658[8] != &v658[24])
                  free(*(void **)&v658[8]);
                v291 = *(unsigned int **)v681;
                v292 = *(_QWORD *)v681 + 4 * *(unsigned int *)&v681[8];
                if (*(_DWORD *)&v681[8])
                {
                  do
                  {
                    v293 = *v291;
                    v648.i32[0] = v293;
                    if ((_DWORD)v293 != v554 && *(_DWORD *)&v654[8])
                    {
                      v294 = *(_QWORD **)v654;
                      v295 = v293 >> 5;
                      v296 = 1 << v293;
                      v297 = 8 * *(unsigned int *)&v654[8];
                      while ((*(_DWORD *)(*v294 + 4 * v295) & v296) != 0)
                      {
                        ++v294;
                        v297 -= 8;
                        if (!v297)
                          goto LABEL_478;
                      }
                      sub_1C4879438((uint64_t)v670, (unsigned int *)&v648);
                      sub_1C51FC81C((int32x2_t *)&v584, &v648);
                      v665.i32[0] = v648.i32[0];
                      v665.i64[1] = v249;
                      sub_1C51FE9FC((uint64_t)&v584, v665.i32, &v665.i64[1], (uint64_t)v658);
                    }
LABEL_478:
                    ++v291;
                  }
                  while (v291 != (unsigned int *)v292);
                  v291 = *(unsigned int **)v681;
                }
                if (v291 != (unsigned int *)&v681[16])
                  free(v291);
              }
LABEL_482:
              if (*(_DWORD *)&v670[8] || *((_QWORD *)&v675[0] + 1))
              {
                *(_QWORD *)v658 = &v658[16];
                *(_QWORD *)&v658[8] = 0x2000000000;
                v662 = 0;
                v663 = 0;
                v661 = &v662;
                sub_1C52EFC00((uint64_t)v658, (uint64_t)v670, (uint64_t)&v624, (uint64_t)&v642);
                sub_1C52F0F80(&v623, (uint64_t)v658, (uint64_t)&v642, 0);
                v298 = *(_QWORD *)(jj + 32);
                if (v298)
                {
                  v299 = *(_QWORD *)(v298 + 112);
                  v300 = *(_WORD *)(v299 + 1064);
                  if ((v300 & 2) != 0)
                  {
                    if ((v300 & 4) == 0 && *(_DWORD *)(v299 + 1116) == 3)
                      goto LABEL_547;
LABEL_487:
                    v301 = *(_WORD *)(v249 + 44);
                    v302 = *(_QWORD *)(*(_QWORD *)(v249 + 16) + 8);
                    if ((v301 & 0xC) == 0 || (v301 & 4) != 0)
                    {
                      if ((v302 & 0x200) != 0)
                        goto LABEL_547;
                    }
                    else
                    {
                      v303 = v249;
                      if ((v302 & 0x200) != 0)
                        goto LABEL_547;
                      while ((*(_WORD *)(v303 + 44) & 8) != 0)
                      {
                        v303 = *(_QWORD *)(v303 + 8);
                        if ((*(_BYTE *)(*(_QWORD *)(v303 + 16) + 9) & 2) != 0)
                          goto LABEL_547;
                      }
                    }
                    v314 = v663;
                    if (v663)
                      v315 = v661;
                    else
                      v315 = *(_QWORD **)v658;
                    if (v663)
                      v316 = &v662;
                    else
                      v316 = (_QWORD **)(*(_QWORD *)v658 + 4 * *(unsigned int *)&v658[8]);
                    if (v315 != v316)
                    {
                      do
                      {
                        v317 = (unsigned int *)v315 + 7;
                        if (!v314)
                          v317 = (unsigned int *)v315;
                        v318 = sub_1C52EA2D8((uint64_t)&v642, (unint64_t)*v317 << 32);
                        if (*(_WORD *)(*(_QWORD *)v318 + 32))
                        {
                          v319 = *(int8x16_t *)(v318 + 16);
                          v648 = *(int8x16_t *)v318;
                          v649 = v319;
                          v650 = *(_QWORD *)(v318 + 32);
                          sub_1C52EAA8C((uint64_t)&v665, (uint64_t)&v623, v648.i64);
                          if ((_BYTE)v667)
                          {
                            v320 = (_QWORD *)sub_1C52EA2D8((uint64_t)&v642, *(_QWORD *)(v665.i64[0] + 8 * v665.u32[2] - 8));
                            v321 = v320[5];
                            v322 = *(unsigned int *)(v320[8] + 8);
                            sub_1C52EB8F8((uint64_t)v681, v320[6]);
                            LODWORD(v683) = 1;
                            *(_QWORD *)&v682 = v321;
                            *(_QWORD *)(*((_QWORD *)&v683 + 1) + 8) = v322;
                            sub_1C52EAB04(&v651, &v642, (uint64_t)v681);
                            v323 = *(_QWORD *)&v651[2 * v652 - 2];
                            v324 = (uint64_t *)operator new(0x30uLL);
                            v325 = v324;
                            v324[4] = v249;
                            v324[5] = v323;
                            v326 = v588;
                            v327 = &v588;
                            v328 = &v588;
                            if (v588)
                            {
                              do
                              {
                                while (1)
                                {
                                  v328 = (uint64_t **)v326;
                                  if (v249 >= v326[4])
                                    break;
                                  v326 = (uint64_t *)*v326;
                                  v327 = v328;
                                  if (!*v328)
                                    goto LABEL_525;
                                }
                                v326 = (uint64_t *)v326[1];
                              }
                              while (v326);
                              v327 = v328 + 1;
                            }
LABEL_525:
                            *v324 = 0;
                            v324[1] = 0;
                            v324[2] = (uint64_t)v328;
                            *v327 = v324;
                            if (*v587)
                            {
                              v587 = (uint64_t **)*v587;
                              v325 = *v327;
                            }
                            sub_1C4768E74(v588, v325);
                            ++v589;
                            sub_1C52EB6D8(v647, (uint64_t)&v651);
                            sub_1C52EB3B0((uint64_t)&v623, (uint64_t)v647, (__int128 *)v681);
                            if (*(_BYTE **)v647 != &v647[16])
                              free(*(void **)v647);
                            if (v651 != (unsigned int *)v653)
                              free(v651);
                            if (v694 != v695)
                              free(v694);
                            if (*((__int128 **)&v683 + 1) != (__int128 *)((char *)&v684 + 8))
                              free(*((void **)&v683 + 1));
                            if ((_BYTE)v667 && (int8x16_t *)v665.i64[0] != &v666)
                              free((void *)v665.i64[0]);
                          }
                        }
                        if (v314)
                        {
                          v329 = (_QWORD *)v315[1];
                          if (v329)
                          {
                            do
                            {
                              v330 = v329;
                              v329 = (_QWORD *)*v329;
                            }
                            while (v329);
                          }
                          else
                          {
                            do
                            {
                              v330 = (_QWORD *)v315[2];
                              v23 = *v330 == (_QWORD)v315;
                              v315 = v330;
                            }
                            while (!v23);
                          }
                        }
                        else
                        {
                          v330 = (_QWORD *)((char *)v315 + 4);
                        }
                        v315 = v330;
                      }
                      while (v330 != v316);
                    }
                  }
                  else if ((v300 & 4) != 0)
                  {
                    goto LABEL_487;
                  }
                }
LABEL_547:
                sub_1C47655E8((uint64_t)&v661, v662);
                if (*(_BYTE **)v658 != &v658[16])
                  free(*(void **)v658);
              }
              if (*(_BYTE **)v654 != &v654[16])
                free(*(void **)v654);
              sub_1C47655E8((uint64_t)&v674 + 8, *(_QWORD **)&v675[0]);
              if (*(_BYTE **)v670 != &v670[16])
                free(*(void **)v670);
              v255 = *(_QWORD *)(v249 + 16);
LABEL_554:
              if (*(_WORD *)v255 == 19)
              {
                v331 = *(unsigned int **)(v249 + 32);
                v332 = v331 + 8;
                v651 = v331;
                v652 = v331 + 8;
                v653[0] = 1;
LABEL_558:
                if ((*v331 & 0x1000000) != 0)
                {
                  v333 = v332[1];
                  v334 = v331[1];
                  v335 = *(uint64_t **)(v557 + 8);
                  if (v335)
                    v336 = v335 + 1;
                  else
                    v336 = 0;
                  v337 = *v336;
                  v338 = *(_DWORD *)(*v336 + 24 * v334 + 16) & 0xF;
                  v339 = ((unint64_t)*(unsigned int *)(*v336 + 24 * v334 + 16) >> 3) & 0x1FFFFFFE;
                  v342 = v336 + 5;
                  v341 = v336[5];
                  v340 = v342[1];
                  v343 = (unsigned __int16 *)(v340 + v339);
                  v345 = *v343;
                  v344 = v343 + 1;
                  v346 = v345 + v338 * v334;
                  while (1)
                  {
                    v347 = 4 * (unsigned __int16)v346;
                    v348 = *(unsigned __int16 *)(v341 + v347);
                    if (*(_WORD *)(v341 + v347) && v340 != 0)
                      break;
                    v350 = (unsigned __int16)*v344++;
                    v346 += v350;
                    if (!v350)
                      goto LABEL_588;
                  }
                  if (((*(_QWORD *)(*v541 + ((v348 >> 3) & 0x1FF8)) >> v348) & 1) == 0)
                  {
                    v388 = (unsigned __int16 *)(v340
                                              + 2
                                              * *(unsigned int *)(v337
                                                                + 24
                                                                * *(unsigned __int16 *)(v341
                                                                                      + 4 * (unsigned __int16)v346)
                                                                + 8));
                    v389 = *(unsigned __int16 *)(v341 + 4 * (unsigned __int16)v346 + 2) << 16;
                    do
                    {
                      v391 = *v388++;
                      v390 = v391;
                      if (v391)
                      {
                        LOWORD(v348) = v390 + v348;
                      }
                      else
                      {
                        v392 = HIWORD(v389);
                        if (HIWORD(v389))
                        {
                          v389 >>= 16;
                        }
                        else
                        {
                          if (!*v344)
                            goto LABEL_588;
                          v346 += (unsigned __int16)*v344++;
                          v393 = (unsigned __int16 *)(v341 + 4 * (unsigned __int16)v346);
                          v392 = *v393;
                          v389 = v393[1] << 16;
                        }
                        LOWORD(v348) = v392;
                        v388 = (unsigned __int16 *)(v340 + 2 * *(unsigned int *)(v337 + 24 * v392 + 8));
                      }
                    }
                    while (((*(_QWORD *)(*v541 + 8 * ((unsigned __int16)v348 >> 6)) >> v348) & 1) == 0);
                  }
                  if (!*v331)
                  {
                    v394 = *(_QWORD *)(*(_QWORD *)(v249 + 24) + 32);
                    v395 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v394 + 16) + 120))(*(_QWORD *)(v394 + 16))
                                     + 88);
                    v396 = (*(uint64_t (**)(uint64_t *, uint64_t))(*v335 + 552))(v335, v394);
                    v397 = v331[1];
                    if (v397)
                    {
                      if (v397 != v395 && v397 != v396)
                      {
                        sub_1C52F0858((uint64_t)v670, (uint64_t)&v624, 0x4000000100000000uLL, 0x4000000200000000uLL);
                        *(_QWORD *)v658 = *(_QWORD *)v670;
                        *(_QWORD *)&v658[8] = &v658[24];
                        *(_QWORD *)&v658[16] = 0x400000000;
                        if (*(_DWORD *)&v670[16])
                          sub_1C52EE358((uint64_t)&v658[8], (uint64_t)&v670[8]);
                        *(_OWORD *)v660 = v672[0];
                        v665.i64[0] = *((_QWORD *)&v672[1] + 1);
                        *(_QWORD *)&v660[16] = *(_QWORD *)&v672[1];
                        v665.i64[1] = (uint64_t)&v666.i64[1];
                        v666.i64[0] = 0x400000000;
                        if (DWORD2(v673))
                          sub_1C52EE358((uint64_t)&v665.i64[1], (uint64_t)&v673);
                        v668 = v676;
                        v669 = v677;
                        while (1)
                        {
                          v399 = *(_DWORD *)v660 == (_DWORD)v668 && *(_QWORD *)&v660[8] == *((_QWORD *)&v668 + 1);
                          if (v399 && *(_QWORD *)&v660[16] == v669)
                            break;
                          v400 = sub_1C52EA2D8((uint64_t)&v642, __ROR8__(*(_QWORD *)&v660[8] + *(unsigned int *)v660, 32));
                          if (*(_DWORD *)(v400 + 56) == 2)
                          {
                            v401 = v400;
                            if (sub_1C52F0B70(*(_QWORD *)(v400 + 64), *(_DWORD *)(v400 + 72), v333))
                            {
                              v408 = *(_QWORD *)(v401 + 40);
                              sub_1C52EB8F8((uint64_t)v681, *(_QWORD *)(v401 + 48));
                              LODWORD(v683) = 3;
                              *(_QWORD *)&v682 = v408;
                              *(_QWORD *)(*((_QWORD *)&v683 + 1) + 8) = v334;
                              sub_1C52F05B8((uint64_t)&v623, v401);
                              sub_1C52EAB04(v654, &v642, (uint64_t)v681);
                              sub_1C52EB6D8(&v648, (uint64_t)v654);
                              sub_1C52EB3B0((uint64_t)&v623, (uint64_t)&v648, (__int128 *)v681);
                              if ((int8x16_t *)v648.i64[0] != &v649)
                                free((void *)v648.i64[0]);
                              if (*(_BYTE **)v654 != &v654[16])
                                free(*(void **)v654);
                              if (v694 != v695)
                                free(v694);
                              if (*((__int128 **)&v683 + 1) != (__int128 *)((char *)&v684 + 8))
                                free(*((void **)&v683 + 1));
                              break;
                            }
                          }
                          sub_1C52EECF4((uint64_t)v658);
                        }
                        if ((unint64_t *)v665.i64[1] != &v666.u64[1])
                          free((void *)v665.i64[1]);
                        if (*(_BYTE **)&v658[8] != &v658[24])
                          free(*(void **)&v658[8]);
                        if ((__int128 *)v673 != &v674)
                          free((void *)v673);
                        if (*(_BYTE **)&v670[8] != &v670[24])
                          free(*(void **)&v670[8]);
                      }
                    }
                  }
                  if (((*v332 >> 26) & ~HIBYTE(*v332) & 1) != 0)
                  {
                    sub_1C52F0858((uint64_t)v681, (uint64_t)&v624, v333 << 32, (v333 << 32) + 0x100000000);
                    *(_QWORD *)v670 = *(_QWORD *)v681;
                    *(_QWORD *)&v670[8] = &v670[24];
                    *(_QWORD *)&v670[16] = 0x400000000;
                    if (*(_DWORD *)&v681[16])
                      sub_1C52EE358((uint64_t)&v670[8], (uint64_t)&v681[8]);
                    v672[0] = v685;
                    *(_QWORD *)v658 = *((_QWORD *)&v686 + 1);
                    *(_QWORD *)&v672[1] = v686;
                    *(_QWORD *)&v658[8] = &v658[24];
                    *(_QWORD *)&v658[16] = 0x400000000;
                    if (DWORD2(v687))
                      sub_1C52EE358((uint64_t)&v658[8], (uint64_t)&v687);
                    *(_OWORD *)v660 = v692;
                    *(_QWORD *)&v660[16] = v693;
                    if (LODWORD(v672[0]) != (_DWORD)v692 || *(_OWORD *)((char *)v672 + 8) != *(_OWORD *)&v660[8])
                    {
                      v665.i32[0] = 1;
                      v665.i64[1] = v333;
                      sub_1C52F1200(v557, v249, (uint64_t)&v623, (uint64_t)&v614, (uint64_t)&v642, __ROR8__(*((_QWORD *)&v672[0] + 1) + LODWORD(v672[0]), 32), 0, (uint64_t)&v665, v334);
                    }
                    if (*(_BYTE **)&v658[8] != &v658[24])
                      free(*(void **)&v658[8]);
                    if (*(_BYTE **)&v670[8] != &v670[24])
                      free(*(void **)&v670[8]);
                    if ((__int128 *)v687 != &v688)
                      free((void *)v687);
                    if (*(_BYTE **)&v681[8] != &v681[24])
                      free(*(void **)&v681[8]);
                  }
                }
              }
              else
              {
                (*(void (**)(unsigned int **__return_ptr, _QWORD, unint64_t))(**(_QWORD **)(jj + 16)
                                                                                              + 416))(&v651, *(_QWORD *)(jj + 16), v249);
                if (v653[0])
                {
                  v331 = v651;
                  v332 = v652;
                  goto LABEL_558;
                }
              }
LABEL_588:
              *(_QWORD *)v658 = &v658[16];
              *(_QWORD *)&v658[8] = 0x2000000000;
              v662 = 0;
              v663 = 0;
              v661 = &v662;
              if (sub_1C52F17D8(v557, (llvm::MachineInstr *)v249))
              {
                sub_1C52F1750((uint64_t)v681, v557, v249);
                v351 = v681[0];
                v664[0] = *(_OWORD *)&v681[1];
                *(_QWORD *)((char *)v664 + 15) = *(_QWORD *)&v681[16];
                sub_1C52F0858((uint64_t)v670, (uint64_t)&v624, 0x4000000000000000uLL, 0x4000000100000000uLL);
                v665.i64[0] = *(_QWORD *)v670;
                v665.i64[1] = (uint64_t)&v666.i64[1];
                v666.i64[0] = 0x400000000;
                if (*(_DWORD *)&v670[16])
                  sub_1C52EE358((uint64_t)&v665.i64[1], (uint64_t)&v670[8]);
                v668 = v672[0];
                *(_QWORD *)v654 = *((_QWORD *)&v672[1] + 1);
                v669 = *(_QWORD *)&v672[1];
                *(_QWORD *)&v654[8] = &v654[24];
                *(_QWORD *)&v654[16] = 0x400000000;
                if (DWORD2(v673))
                  sub_1C52EE358((uint64_t)&v654[8], (uint64_t)&v673);
                v656 = v676;
                v657 = v677;
                while (1)
                {
                  v352 = (_DWORD)v668 == (_DWORD)v656 && *((_QWORD *)&v668 + 1) == *((_QWORD *)&v656 + 1);
                  if (v352 && v669 == v657)
                    break;
                  v353 = DWORD2(v668) + v668;
                  v354 = sub_1C52EA2D8((uint64_t)&v642, __ROR8__(*((_QWORD *)&v668 + 1) + v668, 32));
                  v355 = v354;
                  *(_DWORD *)v681 = 2;
                  v681[8] = v351;
                  *(_OWORD *)&v681[9] = v664[0];
                  *(_QWORD *)&v681[24] = *(_QWORD *)((char *)v664 + 15);
                  v356 = *(_QWORD *)(v354 + 64);
                  v357 = *(unsigned int *)(v354 + 72);
                  if ((_DWORD)v357)
                  {
                    v358 = 32 * v357;
                    v359 = *(_QWORD *)(v354 + 64);
                    while (!sub_1C52EBBF4(v359, (uint64_t)v681))
                    {
                      v359 += 32;
                      v358 -= 32;
                      if (!v358)
                      {
                        v359 = v356 + 32 * v357;
                        break;
                      }
                    }
                  }
                  else
                  {
                    v359 = *(_QWORD *)(v354 + 64);
                  }
                  if (v357 != (v359 - v356) >> 5)
                  {
                    *(_DWORD *)v681 = v353;
                    sub_1C4879438((uint64_t)v658, (unsigned int *)v681);
                    v647[0] = v351;
                    *(_OWORD *)&v647[1] = v664[0];
                    *(_QWORD *)&v647[16] = *(_QWORD *)((char *)v664 + 15);
                    v360 = *(_QWORD *)(v355 + 64);
                    v361 = (int8x16_t *)(v360
                                       + 32
                                       * sub_1C52F1868(v360, *(unsigned int *)(v355 + 72), (uint64_t)v647));
                    v648 = *v361;
                    v649 = v361[1];
                    sub_1C52F14AC((uint64_t)v681, v355, (uint64_t)&v648, 0);
                    sub_1C52EAB04(&v651, &v642, (uint64_t)v681);
                    v362 = *(_QWORD *)&v651[2 * v652 - 2];
                    v363 = v615;
                    if (v615 >= (unint64_t)HIDWORD(v615))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v614, (uint64_t)v616, v615 + 1, 16);
                      v363 = v615;
                    }
                    v364 = (unint64_t *)&v614[2 * v363];
                    *v364 = v249;
                    v364[1] = v362;
                    LODWORD(v615) = v615 + 1;
                    if (v651 != (unsigned int *)v653)
                      free(v651);
                    if (v694 != v695)
                      free(v694);
                    if (*((__int128 **)&v683 + 1) != (__int128 *)((char *)&v684 + 8))
                      free(*((void **)&v683 + 1));
                  }
                  sub_1C52EECF4((uint64_t)&v665);
                }
                if (*(_BYTE **)&v654[8] != &v654[24])
                  free(*(void **)&v654[8]);
                if ((unint64_t *)v665.i64[1] != &v666.u64[1])
                  free((void *)v665.i64[1]);
                if ((__int128 *)v673 != &v674)
                  free((void *)v673);
                if (*(_BYTE **)&v670[8] != &v670[24])
                  free(*(void **)&v670[8]);
                sub_1C52F0F80(&v623, (uint64_t)v658, (uint64_t)&v642, 0x40000000u);
              }
              else
              {
                v351 = 0;
              }
              if (sub_1C52F17D8(v557, (llvm::MachineInstr *)v249)
                && (v365 = *(unsigned int *)(v249 + 40), (_DWORD)v365))
              {
                v366 = *(_DWORD **)(v249 + 32);
                v367 = &v366[8 * v365];
                while (1)
                {
                  if ((*v366 & 0x10000FF) == 0)
                  {
                    v368 = v366[1];
                    if (((*v366 >> 26) & ~HIBYTE(*v366) & 1) != 0)
                      goto LABEL_651;
                    if (v366[1])
                    {
                      v369 = *(_QWORD *)(v249 + 8);
                      if (*(_QWORD *)(v249 + 24) + 48 != v369)
                      {
                        v370 = *(unsigned int *)(v369 + 40);
                        if ((_DWORD)v370)
                          break;
                      }
                    }
                  }
LABEL_631:
                  v366 += 8;
                  if (v366 == v367)
                    goto LABEL_643;
                }
                v371 = *(_QWORD *)(v369 + 32);
                v372 = 32 * v370;
                v373 = (_DWORD *)(v371 + 4);
                while (1)
                {
                  v374 = *(v373 - 1);
                  if ((v374 & 0x10000FF) == 0 && ((v374 >> 26) & ~HIBYTE(v374) & 1) != 0 && *v373 == v368)
                    break;
                  v373 += 8;
                  v372 -= 32;
                  if (!v372)
                    goto LABEL_631;
                }
LABEL_651:
                v378 = 1;
                v555 = 1;
LABEL_655:
                v542 = v378;
                *(_QWORD *)v670 = 0;
                *(_QWORD *)&v670[8] = &v670[24];
                *(_QWORD *)&v670[16] = 0x400000000;
                LODWORD(v672[0]) = -1;
                *((_QWORD *)&v672[0] + 1) = 0;
                *(_QWORD *)&v672[1] = 0;
                v665.i64[0] = 0;
                v665.i64[1] = (uint64_t)&v666.i64[1];
                v666.i64[0] = 0x400000000;
                LODWORD(v668) = -1;
                *((_QWORD *)&v668 + 1) = 0;
                v669 = 0;
                sub_1C52F0AA4((uint64_t)v681, (uint64_t)v670, (uint64_t)&v665);
                if ((unint64_t *)v665.i64[1] != &v666.u64[1])
                  free((void *)v665.i64[1]);
                if (*(_BYTE **)&v670[8] != &v670[24])
                  free(*(void **)&v670[8]);
                if (v555)
                {
                  v379 = v368 << 32;
                  v380 = (v368 << 32) + 0x100000000;
                }
                else
                {
                  v379 = 0x4000000000000000;
                  v380 = 0x4000000100000000;
                }
                sub_1C52F0858((uint64_t)v670, (uint64_t)&v624, v379, v380);
                *(_QWORD *)v681 = *(_QWORD *)v670;
                sub_1C50E5C18((uint64_t)&v681[8], (uint64_t)&v670[8]);
                v685 = v672[0];
                v686 = v672[1];
                sub_1C50E5C18((uint64_t)&v687, (uint64_t)&v673);
                v692 = v676;
                v693 = v677;
                if ((__int128 *)v673 != &v674)
                  free((void *)v673);
                if (*(_BYTE **)&v670[8] != &v670[24])
                  free(*(void **)&v670[8]);
                *(_QWORD *)v670 = *(_QWORD *)v681;
                *(_QWORD *)&v670[8] = &v670[24];
                *(_QWORD *)&v670[16] = 0x400000000;
                if (*(_DWORD *)&v681[16])
                  sub_1C52EE358((uint64_t)&v670[8], (uint64_t)&v681[8]);
                v672[0] = v685;
                v665.i64[0] = *((_QWORD *)&v686 + 1);
                *(_QWORD *)&v672[1] = v686;
                v665.i64[1] = (uint64_t)&v666.i64[1];
                v666.i64[0] = 0x400000000;
                if (DWORD2(v687))
                  sub_1C52EE358((uint64_t)&v665.i64[1], (uint64_t)&v687);
                v668 = v692;
                v669 = v693;
                while (1)
                {
                  v381 = LODWORD(v672[0]) == (_DWORD)v668 && *((_QWORD *)&v672[0] + 1) == *((_QWORD *)&v668 + 1);
                  if (v381 && *(_QWORD *)&v672[1] == v669)
                    break;
                  v382 = __ROR8__(*((_QWORD *)&v672[0] + 1) + LODWORD(v672[0]), 32);
                  v383 = sub_1C52EA2D8((uint64_t)&v642, v382);
                  if (v555)
                  {
                    v402 = *(unsigned int *)(v383 + 72);
                    v384 = *(_QWORD *)(v383 + 64);
                    v403 = v542;
                    if ((_DWORD)v402)
                    {
                      v404 = 0;
                      v405 = (_DWORD *)(v384 + 8);
                      v406 = v557;
                      while (*(v405 - 2) != 1 || v368 != *v405)
                      {
                        ++v404;
                        v405 += 8;
                        if (v402 == v404)
                        {
                          LODWORD(v404) = v402;
                          goto LABEL_722;
                        }
                      }
                    }
                    else
                    {
                      LODWORD(v404) = 0;
                      v406 = v557;
                    }
                    goto LABEL_722;
                  }
                  *(_DWORD *)v654 = 2;
                  v654[8] = v351;
                  *(_OWORD *)&v654[9] = v664[0];
                  *(_QWORD *)&v654[24] = *(_QWORD *)((char *)v664 + 15);
                  v384 = *(_QWORD *)(v383 + 64);
                  v385 = *(unsigned int *)(v383 + 72);
                  v386 = v384;
                  if ((_DWORD)v385)
                  {
                    v387 = 32 * v385;
                    v386 = *(_QWORD *)(v383 + 64);
                    while (!sub_1C52EBBF4(v386, (uint64_t)v654))
                    {
                      v386 += 32;
                      v387 -= 32;
                      if (!v387)
                      {
                        v386 = v384 + 32 * v385;
                        break;
                      }
                    }
                  }
                  if (v385 != (v386 - v384) >> 5)
                  {
                    LOBYTE(v592[0]) = v351;
                    *(_OWORD *)((char *)v592 + 1) = v664[0];
                    v592[2] = *(_QWORD *)((char *)v664 + 15);
                    LODWORD(v404) = sub_1C52F1868(v384, v385, (uint64_t)v592);
                    v406 = v557;
                    v403 = v542;
LABEL_722:
                    v407 = (_OWORD *)(v384 + 32 * v404);
                    *(_OWORD *)v654 = *v407;
                    *(_OWORD *)&v654[16] = v407[1];
                    sub_1C52F1200(v406, v249, (uint64_t)&v623, (uint64_t)&v614, (uint64_t)&v642, v382, v403, (uint64_t)v654, v368);
                    break;
                  }
                  sub_1C52EECF4((uint64_t)v670);
                }
                if ((unint64_t *)v665.i64[1] != &v666.u64[1])
                  free((void *)v665.i64[1]);
                if (*(_BYTE **)&v670[8] != &v670[24])
                  free(*(void **)&v670[8]);
                if ((__int128 *)v687 != &v688)
                  free((void *)v687);
                jj = v557;
                if (*(_BYTE **)&v681[8] != &v681[24])
                  free(*(void **)&v681[8]);
              }
              else
              {
LABEL_643:
                v375 = *(_QWORD *)(v249 + 48);
                jj = v557;
                if (v375 < 8)
                  goto LABEL_731;
                if ((v375 & 7) != 0)
                {
                  v376 = (_DWORD *)(v375 & 0xFFFFFFFFFFFFFFF8);
                  v377 = (*(_QWORD *)(v249 + 48) & 7) != 3 || v376 == 0;
                  if (v377 || *v376 != 1)
                    goto LABEL_731;
                }
                else
                {
                  *(_QWORD *)(v249 + 48) = v375 & 0xFFFFFFFFFFFFFFF8;
                }
                if ((llvm::MachineInstr::getRestoreSize((llvm::MachineInstr *)v249, *(const llvm::TargetInstrInfo **)(v557 + 16)) & 0xFF00000000) != 0)
                {
                  v368 = *(unsigned int *)(*(_QWORD *)(v249 + 32) + 4);
                  sub_1C52F1750((uint64_t)v681, v557, v249);
                  v555 = 0;
                  v351 = v681[0];
                  v664[0] = *(_OWORD *)&v681[1];
                  *(_QWORD *)((char *)v664 + 15) = *(_QWORD *)&v681[16];
                  v378 = 2;
                  goto LABEL_655;
                }
              }
LABEL_731:
              sub_1C47655E8((uint64_t)&v661, v662);
              if (*(_BYTE **)v658 != &v658[16])
                free(*(void **)v658);
              if ((*(_BYTE *)v249 & 4) == 0)
              {
                while ((*(_WORD *)(v249 + 44) & 8) != 0)
                  v249 = *(_QWORD *)(v249 + 8);
              }
              v249 = *(_QWORD *)(v249 + 8);
              v248 = (char *)v551 + 48;
              continue;
            }
            goto LABEL_409;
          }
          v266 = v249;
          if ((v262 & 0x80) == 0)
          {
            while ((*(_WORD *)(v266 + 44) & 8) != 0)
            {
              v266 = *(_QWORD *)(v266 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v266 + 16) + 8) & 0x80) != 0)
                goto LABEL_416;
            }
            goto LABEL_425;
          }
LABEL_416:
          if (v261 != v554)
            goto LABEL_425;
        }
      }
      break;
    }
    if (*(_DWORD *)v259 == 12)
    {
      v264 = *(_QWORD *)(v259 + 16);
      v265 = *(unsigned int *)&v654[8];
      if (*(unsigned int *)&v654[8] >= (unint64_t)*(unsigned int *)&v654[12])
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v654, (uint64_t)&v654[16], *(unsigned int *)&v654[8] + 1, 8);
        v265 = *(unsigned int *)&v654[8];
      }
      *(_QWORD *)(*(_QWORD *)v654 + 8 * v265) = v264;
      ++*(_DWORD *)&v654[8];
    }
    goto LABEL_445;
  }
  v449 = v567;
  v450 = v568;
  if (v567 != v568)
  {
    v447 = (uint64_t *)v597;
    v593 = (uint64_t *)v597;
    v594 = (uint64_t *)v597;
    v595 = 16;
    v448 = (uint64_t *)v597;
    v596 = 0;
    goto LABEL_874;
  }
  if ((_DWORD)v615)
  {
    v452 = v614;
    v453 = &v614[2 * v615];
    do
    {
      v454 = *(_QWORD *)(*v452 + 24);
      v455 = sub_1C52EA2D8((uint64_t)&v642, v452[1]);
      v456 = sub_1C52EA34C(v455, v538);
      v457 = (uint64_t)v452;
      do
      {
        v458 = *(_QWORD *)v457;
        v459 = *(_WORD *)(*(_QWORD *)v457 + 44);
        v457 = *(_QWORD *)v457 + 8;
      }
      while ((v459 & 8) != 0);
      sub_1C49879A4((uint64_t *)(v454 + 40), v458, v456);
      v452 += 2;
    }
    while (v452 != v453);
  }
  LODWORD(v615) = 0;
  v460 = (uint64_t *)v587;
  if (v587 != &v588)
  {
    do
    {
      v461 = v460[4];
      v462 = *(_QWORD *)(v461 + 24);
      v463 = sub_1C52EA2D8((uint64_t)&v642, v460[5]);
      v464 = sub_1C52EA34C(v463, v538);
      while ((*(_WORD *)(v461 + 44) & 8) != 0)
        v461 = *(_QWORD *)(v461 + 8);
      sub_1C49879A4((uint64_t *)(v462 + 40), v461, v464);
      v465 = (uint64_t *)v460[1];
      if (v465)
      {
        do
        {
          v466 = (uint64_t **)v465;
          v465 = (uint64_t *)*v465;
        }
        while (v465);
      }
      else
      {
        do
        {
          v466 = (uint64_t **)v460[2];
          v23 = *v466 == v460;
          v460 = (uint64_t *)v466;
        }
        while (!v23);
      }
      v460 = (uint64_t *)v466;
    }
    while (v466 != &v588);
  }
  sub_1C49F3440(v588);
  v588 = 0;
  v589 = 0;
  v587 = &v588;
  v467 = v617;
  if (v617 <= 1)
  {
    v469 = v618;
    v470 = v619;
    if ((_DWORD)v617)
      v535 = &v618;
    else
      v535 = v618;
    if ((_DWORD)v617)
      v536 = 4;
    else
      v536 = v619;
    v471 = &v535[2 * v536];
    v468 = v471;
  }
  else
  {
    v468 = &v620;
    v469 = (uint64_t *)&v618;
    if ((v617 & 1) != 0)
    {
LABEL_895:
      v467 = v617 & 1;
      while ((*v469 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v469 += 2;
        if (v469 == v468)
        {
          v469 = v468;
          break;
        }
      }
      v471 = v469;
      v469 = v618;
      v470 = v619;
    }
    else
    {
      v469 = v618;
      v470 = v619;
      if (v619)
      {
        v468 = &v618[2 * v619];
        goto LABEL_895;
      }
      v467 = 0;
      v471 = v618;
      v468 = v618;
    }
  }
  v472 = v467 == 0;
  if (v467)
    v473 = (uint64_t *)&v618;
  else
    v473 = v469;
  if (!v472)
    v470 = 4;
  *(_QWORD *)v558 = &v473[2 * v470];
  if (v471 != *(uint64_t **)v558)
  {
    v537 = v468;
    while (1)
    {
      v474 = v471[1];
      v562 = (uint64_t *)*v471;
      *(_QWORD *)v681 = &v681[16];
      *(_QWORD *)&v681[8] = 0x2000000000;
      sub_1C52F004C((uint64_t)v670, v474, 0);
      v475 = 0;
      *(_QWORD *)v658 = 0;
      *(_QWORD *)&v658[8] = &v658[24];
      *(_QWORD *)&v658[16] = 0x400000000;
      v476 = -1;
      *(_DWORD *)v660 = -1;
      *(_QWORD *)&v660[8] = 0;
      *(_QWORD *)&v660[16] = 0;
      while (1)
      {
        v477 = LODWORD(v672[0]) == v476 && *((_QWORD *)&v672[0] + 1) == v475;
        if (v477 && *(_QWORD *)&v672[1] == *(_QWORD *)&v660[16]
          || (*((_QWORD *)&v672[0] + 1) + (unint64_t)LODWORD(v672[0])) >> 32)
        {
          break;
        }
        v478 = sub_1C52EA2D8((uint64_t)&v642, __ROR8__(*((_QWORD *)&v672[0] + 1) + LODWORD(v672[0]), 32));
        v479 = v478;
        v480 = *(_DWORD *)&v681[8];
        v481 = *(char **)v681;
        if (*(_DWORD *)&v681[8] >= *(_DWORD *)&v681[12])
        {
          v500 = *(_QWORD *)v681 <= v478 && *(_QWORD *)v681 + 384 * (unint64_t)*(unsigned int *)&v681[8] > v478;
          if (v500)
            v501 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v478 - *(_QWORD *)v681) >> 7);
          else
            v501 = -1;
          v593 = 0;
          v502 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v681, *(unsigned int *)&v681[8] + 1, 384, (unint64_t *)&v593);
          v481 = v502;
          v503 = *(__int128 **)v681;
          if (*(_DWORD *)&v681[8])
          {
            v504 = 384 * *(unsigned int *)&v681[8];
            do
            {
              v505 = sub_1C52EC30C((uint64_t)v502, v503);
              v503 += 24;
              v502 = (char *)(v505 + 384);
              v504 -= 384;
            }
            while (v504);
            v503 = *(__int128 **)v681;
            if (*(_DWORD *)&v681[8])
            {
              v506 = 24 * *(unsigned int *)&v681[8];
              do
              {
                v507 = &v503[v506];
                v508 = *(__int128 **)&v503[v506 - 3];
                if (&v503[v506 - 2] != v508)
                  free(v508);
                v509 = (__int128 *)*((_QWORD *)v507 - 40);
                if (v507 - 19 != v509)
                  free(v509);
                v506 -= 24;
              }
              while (v506 * 16);
              v503 = *(__int128 **)v681;
            }
          }
          v510 = (int)v593;
          if (v503 != (__int128 *)&v681[16])
            free(v503);
          *(_QWORD *)v681 = v481;
          *(_DWORD *)&v681[12] = v510;
          if (v500)
            v479 = (unint64_t)&v481[384 * v501];
          v480 = *(_DWORD *)&v681[8];
        }
        v482 = &v481[384 * v480];
        v483 = *(_OWORD *)v479;
        v484 = *(_OWORD *)(v479 + 16);
        v485 = *(_OWORD *)(v479 + 32);
        *(_OWORD *)(v482 + 44) = *(_OWORD *)(v479 + 44);
        *((_OWORD *)v482 + 1) = v484;
        *((_OWORD *)v482 + 2) = v485;
        v486 = v482 + 80;
        *((_QWORD *)v482 + 8) = v482 + 80;
        v487 = (void **)(v482 + 64);
        *(_OWORD *)v482 = v483;
        v23 = v482 == (char *)v479;
        *((_QWORD *)v482 + 9) = 0x800000000;
        v488 = v482 + 72;
        v489 = *(unsigned int *)(v479 + 72);
        if (!v23 && v489 != 0)
        {
          if (v489 < 9)
          {
            v491 = *(unsigned int *)(v479 + 72);
LABEL_924:
            memcpy(v486, *(const void **)(v479 + 64), 32 * v491);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v487, (uint64_t)v486, *(unsigned int *)(v479 + 72), 32);
            v491 = *(unsigned int *)(v479 + 72);
            if ((_DWORD)v491)
            {
              v486 = *v487;
              goto LABEL_924;
            }
          }
          *v488 = v489;
        }
        v492 = &v481[384 * v480];
        v493 = (const void **)(v492 + 336);
        v494 = v492 + 352;
        *((_QWORD *)v492 + 42) = v492 + 352;
        *((_QWORD *)v492 + 43) = 0x800000000;
        v495 = *(unsigned int *)(v479 + 344);
        v496 = (const void **)(v479 + 336);
        if ((_DWORD)v495)
          v497 = v493 == v496;
        else
          v497 = 1;
        if (!v497)
        {
          if (v495 < 9)
          {
            v498 = *(unsigned int *)(v479 + 344);
            goto LABEL_932;
          }
          *((_DWORD *)v492 + 86) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v492 + 336), (uint64_t)(v492 + 352), v495, 4);
          v498 = *(unsigned int *)(v479 + 344);
          if ((_DWORD)v498)
          {
            v494 = (void *)*v493;
LABEL_932:
            memcpy(v494, *v496, 4 * v498);
          }
          *((_DWORD *)v493 + 2) = v495;
        }
        ++*(_DWORD *)&v681[8];
        sub_1C52EECF4((uint64_t)v670);
        v476 = *(_DWORD *)v660;
        v475 = *(_QWORD *)&v660[8];
      }
      if (*(_BYTE **)&v658[8] != &v658[24])
        free(*(void **)&v658[8]);
      if (*(_BYTE **)&v670[8] != &v670[24])
        free(*(void **)&v670[8]);
      v511 = *(__int128 **)v681;
      if (*(_DWORD *)&v681[8])
        break;
LABEL_1002:
      v528 = v537;
      if (v511 != (__int128 *)&v681[16])
      {
        free(v511);
        v528 = v537;
      }
      v529 = v471 + 2;
      v471 = v528;
      if (v529 != v528)
      {
        v471 = v529;
        while ((*v471 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v471 += 2;
          if (v471 == v528)
          {
            v471 = v528;
            break;
          }
        }
      }
      if (v471 == *(uint64_t **)v558)
        goto LABEL_1010;
    }
    v512 = 384 * *(unsigned int *)&v681[8];
    while (2)
    {
      v513 = *v511;
      v514 = v511[1];
      v515 = v511[2];
      *(_OWORD *)&v670[44] = *(__int128 *)((char *)v511 + 44);
      *(_OWORD *)&v670[16] = v514;
      *(_OWORD *)&v670[32] = v515;
      *(_OWORD *)v670 = v513;
      *(_QWORD *)&v670[64] = (char *)&v671 + 8;
      *(_QWORD *)&v671 = 0x800000000;
      if (v511 != (__int128 *)v670)
      {
        v516 = *((unsigned int *)v511 + 18);
        if (*((_DWORD *)v511 + 18))
        {
          v517 = (char *)&v671 + 8;
          v518 = *((unsigned int *)v511 + 18);
          if (v516 < 9)
            goto LABEL_973;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v670[64], (uint64_t)&v671 + 8, *((unsigned int *)v511 + 18), 32);
          v518 = *((unsigned int *)v511 + 18);
          if ((_DWORD)v518)
          {
            v517 = *(char **)&v670[64];
LABEL_973:
            memcpy(v517, *((const void **)v511 + 8), 32 * v518);
          }
          LODWORD(v671) = v516;
        }
      }
      v678 = v680;
      v679 = 0x800000000;
      v519 = *((_DWORD *)v511 + 86);
      if (v519 && v511 != (__int128 *)v670)
      {
        if (v519 < 9)
        {
          v520 = v680;
          v521 = *((unsigned int *)v511 + 86);
          goto LABEL_979;
        }
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v678, (uint64_t)v680, *((unsigned int *)v511 + 86), 4);
        v521 = *((unsigned int *)v511 + 86);
        if ((_DWORD)v521)
        {
          v520 = v678;
LABEL_979:
          memcpy(v520, *((const void **)v511 + 42), 4 * v521);
        }
        LODWORD(v679) = v519;
      }
      if ((*(_DWORD *)&v670[56] & 0xFFFFFFFE) != 2)
      {
        v522 = sub_1C52EA34C((uint64_t)v670, v562[4]);
        v523 = v562[7];
        if (v562 + 6 != (uint64_t *)v523 && (*(_WORD *)(v523 + 44) & 4) != 0)
          *(_WORD *)(v522 + 44) |= 0xCu;
        sub_1C512CA10(v562 + 5, (uint64_t *)v523, v522);
      }
      if (v678 != v680)
        free(v678);
      if (*(__int128 **)&v670[64] != (__int128 *)((char *)&v671 + 8))
        free(*(void **)&v670[64]);
      v511 += 24;
      v512 -= 384;
      if (!v512)
      {
        v511 = *(__int128 **)v681;
        if (*(_DWORD *)&v681[8])
        {
          v524 = 24 * *(unsigned int *)&v681[8];
          do
          {
            v525 = &v511[v524];
            v526 = *(__int128 **)&v511[v524 - 3];
            if (&v511[v524 - 2] != v526)
              free(v526);
            v527 = (__int128 *)*((_QWORD *)v525 - 40);
            if (v525 - 19 != v527)
              free(v527);
            v524 -= 24;
          }
          while (v524 * 16);
          v511 = *(__int128 **)v681;
        }
        goto LABEL_1002;
      }
      continue;
    }
  }
LABEL_1010:
  if ((uint64_t *)v599 != v598)
    free((void *)v599);
  v28 = v553;
LABEL_1013:
  if (__p)
  {
    v565 = (char *)__p;
    operator delete(__p);
  }
  if ((v603[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v603[1], 8);
  if (v605 != v607)
    free(v605);
  sub_1C47655E8((uint64_t)&v611, v612);
  if (v608 != v610)
    free(v608);
  if (v567)
  {
    v568 = v567;
    operator delete(v567);
  }
  if (v570)
  {
    v571 = v570;
    operator delete(v570);
  }
  MEMORY[0x1CAA32FB4](v573[0], 8);
  MEMORY[0x1CAA32FB4](v575[0], 8);
  if (v578 != v577)
    free(v578);
  sub_1C52F1AFC((uint64_t)v582);
  MEMORY[0x1CAA32FB4](v582[0], 8);
  MEMORY[0x1CAA32FB4](v584, 8);
  sub_1C49F3440(v588);
  if (v614 != (uint64_t *)v616)
    free(v614);
  sub_1C52F1B70((int *)&v617);
  sub_1C52F1B70((int *)&v620);
  sub_1C52F1C04((uint64_t)v640);
  sub_1C52F1C04((uint64_t)v639);
  if ((_DWORD)v637)
    sub_1C621F5F8((uint64_t)&v625);
  sub_1C52F1C3C((uint64_t)v590);
  MEMORY[0x1CAA32FB4](v590[0], 8);
  v530 = v644;
  if (v644 & 1 | v646)
  {
    v531 = v645;
    if ((v644 & 1) != 0)
    {
      v531 = &v645;
      v532 = 4;
    }
    else
    {
      v532 = v646;
    }
    if ((_DWORD)v532)
    {
      v533 = 32 * v532;
      v534 = (void **)(v531 + 1);
      do
      {
        if (*((_DWORD *)v534 - 2) <= 0xFFFFFFFD)
          v534 = sub_1C52EC1AC(v534);
        v534 += 4;
        v533 -= 32;
      }
      while (v533);
      v530 = v644;
    }
  }
  if ((v530 & 1) == 0)
    MEMORY[0x1CAA32FB4](v645, 8);
  sub_1C52F1CD4(v643[0]);
  return v28 & 1;
}

_QWORD *sub_1C52E9FBC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = off_1E814DBC8;
  a1[40] = 0;
  sub_1C4926AE8((uint64_t)(a1 + 41));
  sub_1C5101D30((uint64_t)(a1 + 14));
  v2 = (_QWORD *)a1[5];
  if (v2 != a1 + 7)
    free(v2);
  return a1;
}

void sub_1C52EA010(_QWORD *a1)
{
  sub_1C52E9FBC(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C52EA034(uint64_t a1, _DWORD *a2)
{
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  _DWORD *v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  v5 = *(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v5 < v4)
  {
    *v5 = *a2;
    v13 = v5 + 1;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = ((uint64_t)v5 - *(_QWORD *)a1) >> 2;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 62)
      abort();
    v9 = v4 - (_QWORD)v6;
    if (v9 >> 1 > v8)
      v8 = v9 >> 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
      v10 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 62)
        sub_1C4764EE4();
      v11 = (char *)operator new(4 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[4 * v7];
    *(_DWORD *)v12 = *a2;
    v13 = v12 + 4;
    while (v5 != v6)
    {
      v14 = *--v5;
      *((_DWORD *)v12 - 1) = v14;
      v12 -= 4;
    }
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = &v11[4 * v10];
    if (v6)
      operator delete(v6);
  }
  *(_QWORD *)(a1 + 8) = v13;
  v15 = *(_DWORD **)a1;
  v16 = (uint64_t)v13 - *(_QWORD *)a1;
  if (v16 >= 5)
  {
    v17 = (((unint64_t)v16 >> 2) - 2) >> 1;
    v18 = &v15[v17];
    v21 = *(v13 - 1);
    v20 = v13 - 1;
    v19 = v21;
    v22 = *v18;
    if (*v18 > v21)
    {
      do
      {
        *v20 = v22;
        v20 = v18;
        if (!v17)
          break;
        v17 = (v17 - 1) >> 1;
        v18 = &v15[v17];
        v22 = *v18;
      }
      while (*v18 > v19);
      *v20 = v19;
    }
  }
}

uint64_t sub_1C52EA178(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  char v6;
  uint64_t *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;

  v13 = 0;
  v6 = sub_1C4E45B90((uint64_t)a3, a2, &v13);
  v7 = v13;
  if ((v6 & 1) != 0)
  {
    result = v13[1];
    if (result)
      return result;
    goto LABEL_10;
  }
  v8 = *a3 >> 1;
  if ((*a3 & 1) != 0)
    v9 = 4;
  else
    v9 = a3[4];
  if (4 * v8 + 4 >= 3 * v9)
  {
    v9 *= 2;
    goto LABEL_15;
  }
  if (v9 + ~v8 - a3[1] <= v9 >> 3)
  {
LABEL_15:
    sub_1C52F02C4((uint64_t)a3, v9);
    v13 = 0;
    sub_1C4E45B90((uint64_t)a3, a2, &v13);
    v7 = v13;
  }
  *a3 += 2;
  if (*v7 != -4096)
    --a3[1];
  *v7 = a2;
  v7[1] = 0;
LABEL_10:
  v10 = a1 + 320;
  result = operator new();
  *(_QWORD *)result = v10;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = v10;
  *(_OWORD *)(result + 8) = 0u;
  *(_OWORD *)(result + 24) = 0u;
  *(_OWORD *)(result + 40) = 0u;
  *(_OWORD *)(result + 56) = 0u;
  *(_OWORD *)(result + 72) = 0u;
  *(_OWORD *)(result + 88) = 0u;
  *(_OWORD *)(result + 104) = 0u;
  *(_OWORD *)(result + 120) = 0u;
  *(_OWORD *)(result + 136) = 0u;
  *(_OWORD *)(result + 152) = 0u;
  *(_OWORD *)(result + 168) = 0u;
  *(_OWORD *)(result + 184) = 0u;
  v12 = v7[1];
  v7[1] = result;
  if (v12)
    sub_1C52F0538(v12);
  return result;
}

uint64_t sub_1C52EA2D8(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = HIDWORD(a2);
  v8 = 0;
  if (sub_1C52EBF60(a1 + 24, a2, &v8))
  {
    v4 = v8;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    {
      v5 = a1 + 32;
      v6 = 4;
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(unsigned int *)(a1 + 40);
    }
    v4 = v5 + 32 * v6;
  }
  return *(_QWORD *)(v4 + 8) + 384 * v2;
}

uint64_t sub_1C52EA34C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 **v5;
  _WORD *v6;
  int v7;
  _BYTE *v8;
  BOOL v9;
  uint64_t v10;
  llvm::MDNode *appended;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  int *v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  unsigned int v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  _WORD *v34;
  unsigned __int8 **v35;
  char v36;
  __int128 v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[4];
  void *v42;
  uint64_t v43;
  _QWORD v44[34];

  v44[32] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 48);
  v5 = (unsigned __int8 **)(v4 + 56);
  v6 = *(_WORD **)(v4 + 16);
  v7 = (unsigned __int16)*v6;
  v8 = *(_BYTE **)(v4 + 32);
  v9 = v7 == 13 && v8[32] == 1 && *v8 == 0;
  v10 = *(_QWORD *)&v8[64 * (unint64_t)(v7 != 14) + 16];
  appended = *(llvm::MDNode **)(a1 + 40);
  v42 = v44;
  v43 = 0x800000000;
  v12 = *(unsigned int *)(a1 + 72);
  if ((_DWORD)v12)
  {
    v36 = v9;
    v33 = v10;
    v34 = v6;
    v35 = v5;
    v13 = 0;
    v14 = 0;
    v15 = 0;
    while (1)
    {
      v16 = (int *)(*(_QWORD *)(a1 + 64) + v13);
      v17 = *v16;
      v18 = *(_OWORD *)(v16 + 2);
      v38 = *((_QWORD *)v16 + 3);
      v37 = v18;
      v19 = *(unsigned int *)(*(_QWORD *)(a1 + 336) + 4 * v15);
      v20 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32)
          + ((unint64_t)(**(_WORD **)(*(_QWORD *)(a1 + 48) + 16) == 14) << 6);
      if (v17 == 3)
        break;
      if (v17 == 2)
      {
        v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
        if (**(_WORD **)(*(_QWORD *)(a1 + 48) + 16) == 13)
        {
          if ((v36 & 1) != 0)
            v28 = 2;
          else
            v28 = 0;
          appended = llvm::TargetRegisterInfo::prependOffsetExpression(v22, appended, v28, (uint64_t)&v37 + 8);
          v36 = 1;
        }
        else
        {
          v39 = v41;
          v40 = 0x400000000;
          (*(void (**)(uint64_t, char *, void **))(*(_QWORD *)v22 + 488))(v22, (char *)&v37 + 8, &v39);
          v23 = v40;
          if (v40 >= (unint64_t)HIDWORD(v40))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, v40 + 1, 8);
            v23 = v40;
          }
          *((_QWORD *)v39 + v23) = 6;
          LODWORD(v40) = v40 + 1;
          appended = llvm::DIExpression::appendOpsToArg(appended, (uint64_t *)v39, v40, v15, 0);
          if (v39 != v41)
            free(v39);
        }
        v40 = 0;
        HIDWORD(v39) = v37;
LABEL_21:
        LODWORD(v39) = 0;
        v41[0] = 0;
        v41[1] = 0;
        v24 = &v39;
LABEL_22:
        v25 = (_OWORD *)sub_1C47C0F60((uint64_t)&v42, (unint64_t)v24, 1);
        v26 = (char *)v42 + 32 * v43;
        v27 = v25[1];
        *v26 = *v25;
        v26[1] = v27;
        v14 = v43 + 1;
        LODWORD(v43) = v43 + 1;
        goto LABEL_23;
      }
      if (v17 == 1)
      {
        if (*(_DWORD *)(a1 + 56) == 1)
          v21 = *(_DWORD *)(v20 + 32 * v19 + 4);
        else
          v21 = v37;
        v40 = 0;
        HIDWORD(v39) = v21;
        goto LABEL_21;
      }
LABEL_23:
      ++v15;
      v13 += 32;
      if (v12 == v15)
      {
        v29 = (int *)v42;
        v6 = v34;
        v5 = v35;
        v10 = v33;
        v9 = v36;
        goto LABEL_30;
      }
    }
    v24 = (void **)(v20 + 32 * v19);
    goto LABEL_22;
  }
  v14 = 0;
  v29 = (int *)v44;
LABEL_30:
  llvm::BuildMI((llvm::MachineInstr **)a2, v5, v6, v9, v29, v14, v10, (uint64_t)appended);
  v31 = v30;
  if (v42 != v44)
    free(v42);
  return v31;
}

int *sub_1C52EA668(int *result)
{
  int v1;
  unsigned int v2;
  int *v3;
  int *v4;

  v1 = *result;
  *(_QWORD *)result = *result & 1;
  if ((v1 & 1) != 0)
  {
    v3 = result + 2;
    v4 = result + 146;
  }
  else
  {
    v2 = result[4];
    if (!v2)
      return result;
    v3 = (int *)*((_QWORD *)result + 1);
    v4 = &v3[18 * v2];
  }
  do
  {
    *(_QWORD *)v3 = 0;
    *((_BYTE *)v3 + 8) = 0;
    *((_BYTE *)v3 + 24) = 0;
    *((_QWORD *)v3 + 4) = 0;
    v3 += 18;
  }
  while (v3 != v4);
  return result;
}

uint64_t sub_1C52EA6B8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;

  v5 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v6 = 8;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      v9 = 0;
      result = 0;
      goto LABEL_7;
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  v7 = v6 - 1;
  v8 = sub_1C50FD958(a2) & (v6 - 1);
  v9 = v5 + 40 * v8;
  if (sub_1C50FDDD0((uint64_t)a2, v9))
  {
    result = 1;
    goto LABEL_7;
  }
  v11 = 0;
  v12 = 1;
  while (1)
  {
    if (*(_QWORD *)v9)
      goto LABEL_11;
    if (!*(_BYTE *)(v9 + 24))
      break;
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      v13 = *(_QWORD *)(v9 + 32) == 0;
      goto LABEL_12;
    }
LABEL_11:
    v13 = 0;
LABEL_12:
    if (v13 && v11 == 0)
      v11 = v9;
    v14 = v12 + 1;
    v8 = (v8 + v12) & v7;
    v9 = v5 + 40 * v8;
    v15 = sub_1C50FDDD0((uint64_t)a2, v9);
    result = 1;
    v12 = v14;
    if (v15)
      goto LABEL_7;
  }
  if (*(_QWORD *)(v9 + 32))
    goto LABEL_11;
  result = 0;
  if (v11)
    v9 = v11;
LABEL_7:
  *a3 = v9;
  return result;
}

uint64_t sub_1C52EA7E4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  __int128 *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16[20];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(__int128 **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 8)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = operator new(40 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C52EA9A4(a1, v6, (__int128 *)((char *)v6 + 40 * v7));
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v16;
  do
  {
    v10 = a1 + v8;
    if (*(_QWORD *)(a1 + v8 + 8) || *(_BYTE *)(v10 + 32) && *(_OWORD *)(a1 + v8 + 16) != 0 || *(_QWORD *)(v10 + 40))
    {
      v11 = *(_OWORD *)(a1 + v8 + 8);
      v12 = *(_OWORD *)(a1 + v8 + 24);
      *((_QWORD *)v9 + 4) = *(_QWORD *)(a1 + v8 + 40);
      *v9 = v11;
      v9[1] = v12;
      v9 = (__int128 *)((char *)v9 + 40);
    }
    v8 += 40;
  }
  while (v8 != 320);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v13 = a2;
    *(_QWORD *)(a1 + 8) = operator new(40 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v13;
  }
  return sub_1C52EA9A4(a1, v16, v9);
}

uint64_t sub_1C52EA9A4(uint64_t result, __int128 *a2, __int128 *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v7 = result + 8;
    v8 = result + 328;
  }
  else
  {
    v9 = *(_DWORD *)(result + 16);
    if (!v9)
      goto LABEL_13;
    v7 = *(_QWORD *)(result + 8);
    v8 = v7 + 40 * v9;
  }
  do
  {
    *(_QWORD *)v7 = 0;
    *(_BYTE *)(v7 + 8) = 0;
    *(_BYTE *)(v7 + 24) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    v7 += 40;
  }
  while (v7 != v8);
LABEL_13:
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 || *((_BYTE *)a2 + 24) && *(__int128 *)((char *)a2 + 8) != 0 || *((_QWORD *)a2 + 4))
    {
      v13 = 0;
      result = sub_1C52EA6B8((uint64_t)v5, (uint64_t *)a2, &v13);
      v10 = (_OWORD *)v13;
      v11 = *a2;
      v12 = a2[1];
      *(_QWORD *)(v13 + 32) = *((_QWORD *)a2 + 4);
      *v10 = v11;
      v10[1] = v12;
      *v5 += 2;
    }
    a2 = (__int128 *)((char *)a2 + 40);
  }
  return result;
}

uint64_t sub_1C52EAA8C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  char v8;

  result = sub_1C52EB76C(a2 + 808, a3);
  if ((*(_BYTE *)(a2 + 808) & 1) != 0)
  {
    v6 = a2 + 816;
    v7 = 8;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 816);
    v7 = *(_DWORD *)(a2 + 824);
  }
  if (v6 + 72 * v7 == result)
  {
    v8 = 0;
    *(_BYTE *)a1 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C52EB6D8((_QWORD *)a1, result + 40);
    v8 = 1;
  }
  *(_BYTE *)(a1 + 32) = v8;
  return result;
}

void sub_1C52EAB04(_QWORD *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  void *v11;
  void **v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  int *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  unsigned int *v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  __int128 v54;
  void *v55;
  void **v56;
  unint64_t v57;
  uint64_t v59;
  void *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  void *v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  __int128 *v70;
  __int128 *v71;
  __int128 *v72;
  __int128 *v73;
  __int128 *v74;
  uint64_t v75;
  _DWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t **v80;
  const void **v81;
  _DWORD *v82;
  unsigned int *v83;
  uint64_t *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  _DWORD v88[4];
  uint64_t v89;

  v4 = a2;
  v89 = *MEMORY[0x1E0C80C00];
  v6 = a2 + 1;
  v5 = a2[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = (uint64_t)(v5 + 4);
        if (!sub_1C52EBC4C(a3, (uint64_t)(v5 + 4)))
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_1C52EBC4C(v8, a3))
        break;
      v6 = v7 + 1;
      v5 = v7[1];
      if (!v5)
        goto LABEL_9;
    }
    v84 = *v6;
    if (*v6)
      goto LABEL_26;
  }
  else
  {
    v7 = a2 + 1;
  }
LABEL_9:
  v9 = (char *)operator new(0x1C0uLL);
  v10 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v9 + 2) = *(_OWORD *)a3;
  *((_OWORD *)v9 + 3) = v10;
  *((_OWORD *)v9 + 4) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v9 + 76) = *(_OWORD *)(a3 + 44);
  v11 = v9 + 112;
  *((_QWORD *)v9 + 12) = v9 + 112;
  v12 = (void **)(v9 + 96);
  v84 = (uint64_t *)v9;
  *((_QWORD *)v9 + 13) = 0x800000000;
  if (v9 + 32 != (char *)a3)
  {
    v13 = *(_DWORD *)(a3 + 72);
    if (v13)
    {
      if (v13 < 9)
      {
        v14 = *(_DWORD *)(a3 + 72);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v9 + 96), (uint64_t)v11, *(unsigned int *)(a3 + 72), 32);
        v14 = *(_DWORD *)(a3 + 72);
        if (!v14)
        {
LABEL_16:
          *((_DWORD *)v84 + 26) = v13;
          goto LABEL_17;
        }
        v11 = *v12;
      }
      memcpy(v11, *(const void **)(a3 + 64), 32 * v14);
      goto LABEL_16;
    }
  }
LABEL_17:
  v15 = v84;
  v16 = v84 + 48;
  v84[46] = (uint64_t)(v84 + 48);
  v84[47] = 0x800000000;
  v17 = *(_DWORD *)(a3 + 344);
  if (!v17 || v84 + 46 == (uint64_t *)(a3 + 336))
    goto LABEL_23;
  if (v17 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v84 + 46), (uint64_t)v16, *(unsigned int *)(a3 + 344), 4);
    v18 = *(unsigned int *)(a3 + 344);
    if (!(_DWORD)v18)
      goto LABEL_22;
    v16 = (void *)v84[46];
  }
  else
  {
    v18 = *(unsigned int *)(a3 + 344);
  }
  memcpy(v16, *(const void **)(a3 + 336), 4 * v18);
LABEL_22:
  v15 = v84;
  *((_DWORD *)v84 + 94) = v17;
LABEL_23:
  v15[52] = (uint64_t)(v15 + 54);
  v15[53] = 0x200000000;
  *v15 = 0;
  v15[1] = 0;
  v15[2] = (uint64_t)v7;
  *v6 = v15;
  v19 = (uint64_t *)**v4;
  if (v19)
  {
    *v4 = v19;
    v15 = *v6;
  }
  sub_1C4768E74(v4[1], v15);
  v4[2] = (uint64_t *)((char *)v4[2] + 1);
LABEL_26:
  v20 = v84;
  if (*((_DWORD *)v84 + 106))
  {
    sub_1C52EB6D8(a1, (uint64_t)(v84 + 52));
    return;
  }
  v86 = v88;
  v87 = 0x400000000;
  v21 = *(_DWORD *)(a3 + 56);
  if (v21 == 1)
    goto LABEL_40;
  if (v21)
  {
    v88[0] = 1073741825;
    v23 = 1;
LABEL_42:
    LODWORD(v87) = v23;
    goto LABEL_43;
  }
  v22 = *(unsigned int *)(a3 + 72);
  if (!(_DWORD)v22)
  {
LABEL_40:
    v23 = 0;
    goto LABEL_43;
  }
  v23 = 0;
  v24 = 32 * v22;
  v25 = (int *)(*(_QWORD *)(a3 + 64) + 8);
  do
  {
    if (*(v25 - 2) == 1)
    {
      v26 = *v25;
      if (v23 >= HIDWORD(v87))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v23 + 1, 4);
        v23 = v87;
      }
      *((_DWORD *)v86 + v23) = v26;
      v23 = v87 + 1;
      LODWORD(v87) = v87 + 1;
    }
    v25 += 8;
    v24 -= 32;
  }
  while (v24);
  v75 = *(unsigned int *)(a3 + 72);
  if ((_DWORD)v75)
  {
    v76 = *(_DWORD **)(a3 + 64);
    v77 = 32 * v75;
    while (*v76 != 2)
    {
      v76 += 8;
      v77 -= 32;
      if (!v77)
        goto LABEL_43;
    }
    if (v23 >= HIDWORD(v87))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v23 + 1, 4);
      v23 = v87;
    }
    *((_DWORD *)v86 + v23) = 0x40000000;
    v23 = v87 + 1;
    goto LABEL_42;
  }
LABEL_43:
  v78 = (uint64_t)(v84 + 52);
  if (v23 >= HIDWORD(v87))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v86, (uint64_t)v88, v23 + 1, 4);
    v23 = v87;
  }
  *((_DWORD *)v86 + v23) = 0;
  v27 = __CFADD__((_DWORD)v87, 1);
  v28 = v87 + 1;
  LODWORD(v87) = v87 + 1;
  if (!v27)
  {
    v29 = (unsigned int *)v86;
    v83 = (unsigned int *)((char *)v86 + 4 * v28);
    v30 = v4 + 3;
    v81 = (const void **)(a3 + 336);
    v80 = v4;
    v82 = v4 + 3;
    while (1)
    {
      v31 = *v29;
      v85 = 0;
      v32 = sub_1C52EBF60((uint64_t)v30, v31, &v85);
      v33 = v85;
      if (v32)
      {
        v35 = *(_QWORD *)(v85 + 8);
        v34 = *(_QWORD *)(v85 + 16);
        goto LABEL_60;
      }
      v36 = (*v30 & 1) != 0 ? 4 : *((_DWORD *)v4 + 10);
      v37 = *v30 >> 1;
      if (4 * v37 + 4 >= 3 * v36)
        break;
      if (v36 + ~v37 - *((_DWORD *)v4 + 7) <= v36 >> 3)
        goto LABEL_126;
LABEL_57:
      *v30 += 2;
      if (*(_DWORD *)v33 != -1)
        --*((_DWORD *)v4 + 7);
      v35 = 0;
      v34 = 0;
      *(_DWORD *)v33 = v31;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 24) = 0;
      *(_QWORD *)(v33 + 8) = 0;
LABEL_60:
      v38 = *((unsigned int *)v20 + 106);
      if (v38 >= *((unsigned int *)v20 + 107))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v78, (uint64_t)(v84 + 54), v38 + 1, 8);
        v38 = *((unsigned int *)v20 + 106);
      }
      *(_QWORD *)(v20[52] + 8 * v38) = v31 | ((unint64_t)(-1431655765
                                                               * ((unint64_t)(v34 - v35) >> 7)) << 32);
      ++*((_DWORD *)v20 + 106);
      v40 = *(_QWORD *)(v33 + 16);
      v39 = *(_QWORD *)(v33 + 24);
      if (v40 >= v39)
      {
        v47 = *(_QWORD *)(v33 + 8);
        v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - v47) >> 7);
        v49 = v48 + 1;
        if (v48 + 1 > 0xAAAAAAAAAAAAAALL)
          abort();
        v50 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - v47) >> 7);
        if (2 * v50 > v49)
          v49 = 2 * v50;
        if (v50 >= 0x55555555555555)
          v51 = 0xAAAAAAAAAAAAAALL;
        else
          v51 = v49;
        if (v51)
        {
          if (v51 > 0xAAAAAAAAAAAAAALL)
            sub_1C4764EE4();
          v52 = (char *)operator new(384 * v51);
        }
        else
        {
          v52 = 0;
        }
        v53 = (uint64_t)&v52[384 * v48];
        v54 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)v53 = *(_OWORD *)a3;
        *(_OWORD *)(v53 + 16) = v54;
        *(_OWORD *)(v53 + 32) = *(_OWORD *)(a3 + 32);
        *(_OWORD *)(v53 + 44) = *(_OWORD *)(a3 + 44);
        v55 = (void *)(v53 + 80);
        *(_QWORD *)(v53 + 64) = v53 + 80;
        v56 = (void **)(v53 + 64);
        *(_QWORD *)(v53 + 72) = 0x800000000;
        v57 = *(unsigned int *)(a3 + 72);
        if (v53 != a3 && v57 != 0)
        {
          if (v57 < 9)
          {
            v59 = *(unsigned int *)(a3 + 72);
LABEL_96:
            memcpy(v55, *(const void **)(a3 + 64), 32 * v59);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v56, v53 + 80, *(unsigned int *)(a3 + 72), 32);
            v59 = *(unsigned int *)(a3 + 72);
            if ((_DWORD)v59)
            {
              v55 = *v56;
              goto LABEL_96;
            }
          }
          *(_DWORD *)(v53 + 72) = v57;
        }
        v64 = &v52[384 * v48];
        v65 = v64 + 352;
        *((_QWORD *)v64 + 42) = v64 + 352;
        *((_QWORD *)v64 + 43) = 0x800000000;
        v66 = *(unsigned int *)(a3 + 344);
        v20 = v84;
        if ((_DWORD)v66)
        {
          v67 = v64 + 336;
          if (v64 + 336 != (char *)v81)
          {
            if (v66 < 9)
            {
              v68 = *(unsigned int *)(a3 + 344);
              goto LABEL_102;
            }
            *((_DWORD *)v64 + 86) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v64 + 336), (uint64_t)(v64 + 352), v66, 4);
            v68 = *(unsigned int *)(a3 + 344);
            if ((_DWORD)v68)
            {
              v65 = *(void **)v67;
LABEL_102:
              memcpy(v65, *v81, 4 * v68);
            }
            *((_DWORD *)v67 + 2) = v66;
          }
        }
        v69 = &v52[384 * v51];
        v63 = v53 + 384;
        v70 = *(__int128 **)(v33 + 8);
        v71 = *(__int128 **)(v33 + 16);
        if (v71 == v70)
        {
          *(_QWORD *)(v33 + 8) = v53;
          *(_QWORD *)(v33 + 16) = v63;
          *(_QWORD *)(v33 + 24) = v69;
        }
        else
        {
          do
          {
            v53 -= 384;
            v71 -= 24;
            sub_1C52EC30C(v53, v71);
          }
          while (v71 != v70);
          v71 = *(__int128 **)(v33 + 8);
          v72 = *(__int128 **)(v33 + 16);
          *(_QWORD *)(v33 + 8) = v53;
          *(_QWORD *)(v33 + 16) = v63;
          *(_QWORD *)(v33 + 24) = v69;
          if (v72 != v71)
          {
            v30 = v82;
            do
            {
              v73 = (__int128 *)*((_QWORD *)v72 - 6);
              if (v72 - 2 != v73)
                free(v73);
              v74 = (__int128 *)*((_QWORD *)v72 - 40);
              if (v72 - 19 != v74)
                free(v74);
              v72 -= 24;
            }
            while (v72 != v71);
            if (v71)
LABEL_114:
              operator delete(v71);
LABEL_115:
            v4 = v80;
            goto LABEL_116;
          }
        }
        v30 = v82;
        if (v71)
          goto LABEL_114;
        goto LABEL_115;
      }
      v41 = *(_OWORD *)a3;
      v42 = *(_OWORD *)(a3 + 16);
      v43 = *(_OWORD *)(a3 + 32);
      *(_OWORD *)(v40 + 44) = *(_OWORD *)(a3 + 44);
      *(_OWORD *)(v40 + 16) = v42;
      *(_OWORD *)(v40 + 32) = v43;
      *(_OWORD *)v40 = v41;
      v44 = (void *)(v40 + 80);
      *(_QWORD *)(v40 + 64) = v40 + 80;
      *(_QWORD *)(v40 + 72) = 0x800000000;
      if (v40 != a3)
      {
        v45 = *(unsigned int *)(a3 + 72);
        if (*(_DWORD *)(a3 + 72))
        {
          if (v45 < 9)
          {
            v46 = *(unsigned int *)(a3 + 72);
LABEL_86:
            memcpy(v44, *(const void **)(a3 + 64), 32 * v46);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v40 + 64, v40 + 80, *(unsigned int *)(a3 + 72), 32);
            v46 = *(unsigned int *)(a3 + 72);
            if ((_DWORD)v46)
            {
              v44 = *(void **)(v40 + 64);
              goto LABEL_86;
            }
          }
          *(_DWORD *)(v40 + 72) = v45;
        }
      }
      v60 = (void *)(v40 + 352);
      *(_QWORD *)(v40 + 336) = v40 + 352;
      *(_QWORD *)(v40 + 344) = 0x800000000;
      if (v40 == a3)
        goto LABEL_94;
      v61 = *(_DWORD *)(a3 + 344);
      if (!v61)
        goto LABEL_94;
      if (v61 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v40 + 336, v40 + 352, *(unsigned int *)(a3 + 344), 4);
        v62 = *(unsigned int *)(a3 + 344);
        if (!(_DWORD)v62)
          goto LABEL_93;
        v60 = *(void **)(v40 + 336);
      }
      else
      {
        v62 = *(unsigned int *)(a3 + 344);
      }
      memcpy(v60, *v81, 4 * v62);
LABEL_93:
      *(_DWORD *)(v40 + 344) = v61;
LABEL_94:
      v63 = v40 + 384;
      v30 = v82;
LABEL_116:
      *(_QWORD *)(v33 + 16) = v63;
      if (++v29 == v83)
        goto LABEL_47;
    }
    v36 *= 2;
LABEL_126:
    sub_1C52EC00C((uint64_t)v30, v36);
    v85 = 0;
    sub_1C52EBF60((uint64_t)v30, v31, &v85);
    v33 = v85;
    goto LABEL_57;
  }
LABEL_47:
  sub_1C52EB6D8(a1, v78);
  if (v86 != v88)
    free(v86);
}

void sub_1C52EB3B0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  _BYTE v42[576];
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = *((_DWORD *)a3 + 14) & 0xFFFFFFFE;
  v7 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)a2;
    v9 = 8 * v7;
    do
    {
      v10 = *v8++;
      v11 = __ROR8__(v10, 32);
      sub_1C52EC484(a1 + 16, v11, v11);
      v9 -= 8;
    }
    while (v9);
  }
  if (v6 == 2)
    v12 = 808;
  else
    v12 = 224;
  if (v6 == 2)
    v13 = a1 + 808;
  else
    v13 = a1 + 224;
  v14 = a3[1];
  v37 = *a3;
  v38 = v14;
  v39 = *((_QWORD *)a3 + 4);
  sub_1C52EB6D8(v40, a2);
  v35 = 0;
  if ((sub_1C52EB7CC(v13, (uint64_t *)&v37, &v35) & 1) == 0)
  {
    v15 = v35;
    v36 = v35;
    v16 = *(_DWORD *)(a1 + v12);
    v17 = v16 >> 1;
    v18 = v16 & 1;
    if ((v16 & 1) != 0)
      v19 = 8;
    else
      v19 = *(_DWORD *)(v13 + 16);
    if (4 * v17 + 4 >= 3 * v19)
    {
      v19 *= 2;
    }
    else if (v19 + ~v17 - *(_DWORD *)(v13 + 4) > v19 >> 3)
    {
LABEL_16:
      *(_DWORD *)(a1 + v12) = (v16 & 0xFFFFFFFE | v18) + 2;
      if (*(_QWORD *)v15 || *(_BYTE *)(v15 + 24) || *(_QWORD *)(v15 + 32))
        --*(_DWORD *)(v13 + 4);
      v20 = v37;
      v21 = v38;
      *(_QWORD *)(v15 + 32) = v39;
      *(_OWORD *)v15 = v20;
      *(_OWORD *)(v15 + 16) = v21;
      sub_1C52EDB3C(v15 + 40, (uint64_t)v40);
      goto LABEL_21;
    }
    v22 = (v19 - 1) | ((unint64_t)(v19 - 1) >> 1);
    v23 = v22 | (v22 >> 2) | ((v22 | (v22 >> 2)) >> 4);
    v24 = ((v23 | (v23 >> 8)) >> 16) | v23 | (v23 >> 8);
    if ((v24 + 1) > 0x40)
      v25 = v24 + 1;
    else
      v25 = 64;
    if (v19 >= 9)
      v26 = v25;
    else
      v26 = v19;
    if ((v16 & 1) != 0)
    {
      v29 = 0;
      v30 = v42;
      do
      {
        v31 = v13 + v29;
        if (*(_QWORD *)(v13 + v29 + 8)
          || *(_BYTE *)(v31 + 32) && *(_OWORD *)(v13 + v29 + 16) != 0
          || *(_QWORD *)(v31 + 40))
        {
          v32 = *(_OWORD *)(v13 + v29 + 8);
          v33 = *(_OWORD *)(v13 + v29 + 24);
          *((_QWORD *)v30 + 4) = *(_QWORD *)(v13 + v29 + 40);
          *(_OWORD *)v30 = v32;
          *((_OWORD *)v30 + 1) = v33;
          sub_1C52EDB3C((uint64_t)(v30 + 40), v31 + 48);
          v30 += 72;
          v34 = *(void **)(v31 + 48);
          if ((void *)(v31 + 64) != v34)
            free(v34);
        }
        v29 += 72;
      }
      while (v29 != 576);
      if (v26 > 8)
      {
        *(_DWORD *)(a1 + v12) &= ~1u;
        *(_QWORD *)(v13 + 8) = operator new(72 * v26, (std::align_val_t)8uLL);
        *(_QWORD *)(v13 + 16) = v26;
      }
      sub_1C52EDBFC((int *)v13, (uint64_t)v42, (uint64_t)v30);
    }
    else
    {
      v27 = *(_QWORD *)(v13 + 8);
      v28 = *(_DWORD *)(v13 + 16);
      if (v26 > 8)
      {
        *(_QWORD *)(v13 + 8) = operator new(72 * v26, (std::align_val_t)8uLL);
        *(_QWORD *)(v13 + 16) = v26;
      }
      else
      {
        *(_DWORD *)(a1 + v12) = v16 | 1;
      }
      sub_1C52EDBFC((int *)v13, v27, v27 + 72 * v28);
      MEMORY[0x1CAA32FB4](v27, 8);
    }
    sub_1C52EB7CC(v13, (uint64_t *)&v37, &v36);
    v16 = *(_DWORD *)(a1 + v12);
    v15 = v36;
    v18 = v16 & 1;
    goto LABEL_16;
  }
LABEL_21:
  if (v40[0] != &v41)
    free(v40[0]);
}

_QWORD *sub_1C52EB6D8(_QWORD *a1, uint64_t a2)
{
  void *v3;
  unint64_t v5;
  unsigned int v6;

  v3 = a1 + 2;
  *a1 = a1 + 2;
  a1[1] = 0x200000000;
  if (a1 != (_QWORD *)a2)
  {
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v5)
    {
      if (v5 < 3)
      {
        v6 = *(_DWORD *)(a2 + 8);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 2), v5, 8);
        v6 = *(_DWORD *)(a2 + 8);
        if (!v6)
        {
LABEL_8:
          *((_DWORD *)a1 + 2) = v5;
          return a1;
        }
        v3 = (void *)*a1;
      }
      memcpy(v3, *(const void **)a2, 8 * v6);
      goto LABEL_8;
    }
  }
  return a1;
}

uint64_t sub_1C52EB76C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  v6 = 0;
  if (sub_1C52EB7CC(a1, a2, &v6))
    return v6;
  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 8;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 72 * v5;
}

uint64_t sub_1C52EB7CC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;

  v5 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v6 = 8;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      v9 = 0;
      result = 0;
      goto LABEL_7;
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  v7 = v6 - 1;
  v8 = sub_1C50FD958(a2) & (v6 - 1);
  v9 = v5 + 72 * v8;
  if (sub_1C50FDDD0((uint64_t)a2, v9))
  {
    result = 1;
    goto LABEL_7;
  }
  v11 = 0;
  v12 = 1;
  while (1)
  {
    if (*(_QWORD *)v9)
      goto LABEL_11;
    if (!*(_BYTE *)(v9 + 24))
      break;
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      v13 = *(_QWORD *)(v9 + 32) == 0;
      goto LABEL_12;
    }
LABEL_11:
    v13 = 0;
LABEL_12:
    if (v13 && v11 == 0)
      v11 = v9;
    v14 = v12 + 1;
    v8 = (v8 + v12) & v7;
    v9 = v5 + 72 * v8;
    v15 = sub_1C50FDDD0((uint64_t)a2, v9);
    result = 1;
    v12 = v14;
    if (v15)
      goto LABEL_7;
  }
  if (*(_QWORD *)(v9 + 32))
    goto LABEL_11;
  result = 0;
  if (v11)
    v9 = v11;
LABEL_7:
  *a3 = v9;
  return result;
}

uint64_t sub_1C52EB8F8(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  const llvm::DIExpression *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;

  v4 = **(unsigned __int16 **)(a2 + 16);
  v5 = v4 == 14;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(v6 + ((unint64_t)(v4 != 14) << 6) + 16);
  v8 = 96;
  if (v5)
    v8 = 32;
  v9 = *(_QWORD *)(v6 + v8 + 16);
  v10 = *(_QWORD *)(a2 + 56);
  if (*(_DWORD *)(v10 + 8) == 2)
    v11 = *(_QWORD *)(v10 - 8);
  else
    v11 = 0;
  *(_QWORD *)a1 = v7;
  if (v9)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v9 + 24), *(uint64_t **)(v9 + 32), (int8x16_t *)(a1 + 8));
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 24) = 0;
  }
  *(_QWORD *)(a1 + 32) = v11;
  v12 = 96;
  if (**(_WORD **)(a2 + 16) == 14)
    v12 = 32;
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + v12 + 16);
  v36 = a1 + 80;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v14 = (unint64_t *)(a1 + 64);
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = a2;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 72) = 0x800000000;
  *(_QWORD *)(a1 + 336) = a1 + 352;
  *(_QWORD *)(a1 + 344) = 0x800000000;
  if (v13)
  {
    v16 = v13 + 24;
    v15 = *(_QWORD **)(v13 + 24);
    if (((*(_QWORD *)(v16 + 8) - (_QWORD)v15) & 0x7FFFFFFF8) != 0 && *v15 == 4099)
      *(_DWORD *)(a1 + 56) = 1;
  }
  v17 = *(unsigned int *)(a2 + 40);
  if (**(_WORD **)(a2 + 16) != 14)
    v17 = 1;
  if (2 * (**(_WORD **)(a2 + 16) == 14) != v17)
  {
    v19 = *(_QWORD *)(a2 + 32);
    v20 = v19 + 32 * v17;
    v21 = v19 + ((unint64_t)(**(_WORD **)(a2 + 16) == 14) << 6);
    while (1)
    {
      if (*(_BYTE *)v21)
      {
        v22 = *(_QWORD *)(v21 + 16);
        v23 = 3;
      }
      else
      {
        v22 = *(unsigned int *)(v21 + 4);
        v23 = 1;
      }
      v37 = v23;
      v38 = v22;
      v24 = *(_QWORD *)(a1 + 64);
      v25 = (const llvm::DIExpression *)*(unsigned int *)(a1 + 72);
      v26 = v24;
      if ((_DWORD)v25)
      {
        v27 = 32 * (_QWORD)v25;
        v26 = *(_QWORD *)(a1 + 64);
        while (!sub_1C52EBBF4(v26, (uint64_t)&v37))
        {
          v26 += 32;
          v27 -= 32;
          if (!v27)
          {
            v26 = v24 + 32 * (_QWORD)v25;
            break;
          }
        }
      }
      if (v25 == (const llvm::DIExpression *)((uint64_t)(v26 - v24) >> 5))
        break;
      *(_QWORD *)(a1 + 40) = llvm::DIExpression::replaceArg(*(llvm::DIExpression **)(a1 + 40), v25, ((v26 - v24) >> 5));
LABEL_35:
      v21 += 32;
      if (v21 == v20)
        return a1;
    }
    if (v25 >= *(_DWORD *)(a1 + 76))
    {
      v34 = (unint64_t)v25 + 1;
      if (v24 <= (unint64_t)&v37 && v24 + 32 * (_QWORD)v25 > (unint64_t)&v37)
      {
        v35 = (char *)&v37 - v24;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, v36, v34, 32);
        v24 = *v14;
        v28 = &v35[*v14];
        goto LABEL_31;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, v36, v34, 32);
      v24 = *v14;
    }
    v28 = (char *)&v37;
LABEL_31:
    v29 = (_OWORD *)(v24 + 32 * *(unsigned int *)(a1 + 72));
    v30 = *((_OWORD *)v28 + 1);
    *v29 = *(_OWORD *)v28;
    v29[1] = v30;
    ++*(_DWORD *)(a1 + 72);
    v31 = **(unsigned __int16 **)(a2 + 16) == 14;
    v32 = *(_QWORD *)(a2 + 32);
    v33 = *(unsigned int *)(a1 + 344);
    if (v33 >= *(unsigned int *)(a1 + 348))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 336, a1 + 352, v33 + 1, 4);
      v33 = *(unsigned int *)(a1 + 344);
    }
    *(_DWORD *)(*(_QWORD *)(a1 + 336) + 4 * v33) = (unint64_t)(v21 - (v32 + (v31 << 6))) >> 5;
    ++*(_DWORD *)(a1 + 344);
    goto LABEL_35;
  }
  return a1;
}

BOOL sub_1C52EBBF4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    return 0;
  if (*(_DWORD *)a1 == 2)
  {
    if (*(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8))
      return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24);
    return 0;
  }
  return *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8);
}

BOOL sub_1C52EBC4C(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int *v6;
  unsigned int v7;
  int *v8;
  unsigned int v9;

  if (sub_1C52EBD0C((unint64_t *)a1, (unint64_t *)a2))
    return 1;
  if (sub_1C52EBD0C((unint64_t *)a2, (unint64_t *)a1))
    return 0;
  v4 = *(_DWORD *)(a1 + 56);
  v5 = *(_DWORD *)(a2 + 56);
  if (v4 < v5)
    return 1;
  if (v5 < v4)
    return 0;
  v6 = *(int **)(a1 + 64);
  v7 = *(_DWORD *)(a1 + 72);
  v8 = *(int **)(a2 + 64);
  v9 = *(_DWORD *)(a2 + 72);
  if ((sub_1C52EBE3C(v6, v7, v8, v9) & 1) != 0)
    return 1;
  return (sub_1C52EBE3C(v8, v9, v6, v7) & 1) == 0 && *(_QWORD *)(a1 + 40) < *(_QWORD *)(a2 + 40);
}

BOOL sub_1C52EBD0C(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  _QWORD v4[3];
  _QWORD v5[3];
  char v6;

  v5[0] = a1;
  v5[1] = a1 + 1;
  v5[2] = a1 + 4;
  v4[0] = a2;
  v4[1] = a2 + 1;
  v2 = *a2;
  v4[2] = a2 + 4;
  if (*a1 < v2)
    return 1;
  if (v2 < *a1)
    return 0;
  return sub_1C52EBD78((uint64_t)&v6, (uint64_t)v5, (uint64_t)v4);
}

BOOL sub_1C52EBD78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  BOOL v7;
  BOOL v9;
  BOOL v10;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a3 + 8);
  v5 = *(unsigned __int8 *)(v4 + 16);
  if (*(_BYTE *)(v3 + 16))
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (*(_BYTE *)(v3 + 16))
      v7 = 1;
    else
      v7 = v5 == 0;
    if (!v7)
      return 1;
  }
  else if (*(_QWORD *)v3 < *(_QWORD *)v4 || *(_QWORD *)v4 >= *(_QWORD *)v3 && *(_QWORD *)(v3 + 8) < *(_QWORD *)(v4 + 8))
  {
    return 1;
  }
  if (*(_BYTE *)(v3 + 16))
    v9 = v5 == 0;
  else
    v9 = 1;
  if (v9)
  {
    if (*(_BYTE *)(v3 + 16))
      v10 = v5 == 0;
    else
      v10 = 0;
    if (v10)
      return 0;
  }
  else if (*(_QWORD *)v4 < *(_QWORD *)v3 || *(_QWORD *)v3 >= *(_QWORD *)v4 && *(_QWORD *)(v4 + 8) < *(_QWORD *)(v3 + 8))
  {
    return 0;
  }
  return **(_QWORD **)(a2 + 16) < **(_QWORD **)(a3 + 16);
}

uint64_t sub_1C52EBE3C(int *a1, unsigned int a2, int *a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t result;
  uint64_t v10;

  if (!a4)
    return 0;
  v6 = 32 * a2;
  v7 = 32 * a4 - 32;
  while (v6 && (sub_1C52EBED0(a1, (uint64_t)a3) & 1) == 0)
  {
    v8 = sub_1C52EBED0(a3, (uint64_t)a1);
    result = 0;
    if ((v8 & 1) == 0)
    {
      a1 += 8;
      a3 += 8;
      v6 -= 32;
      v10 = v7;
      v7 -= 32;
      if (v10)
        continue;
    }
    return result;
  }
  return 1;
}

uint64_t sub_1C52EBED0(int *a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v8;
  unsigned int v9;

  v2 = *a1;
  if (*a1 != 2)
  {
    if (v2 < *(_DWORD *)a2)
      return 1;
    if (*(_DWORD *)a2 >= v2)
      return *((_QWORD *)a1 + 1) < *(_QWORD *)(a2 + 8);
    return 0;
  }
  if (*(int *)a2 > 2)
    return 1;
  if (*(_DWORD *)a2 != 2)
    return 0;
  v3 = a1[2];
  v4 = *(_DWORD *)(a2 + 8);
  if (v3 < v4)
    return 1;
  v5 = *((_QWORD *)a1 + 2);
  v6 = *(_QWORD *)(a2 + 16);
  v8 = v6 >= v5 && *((_QWORD *)a1 + 3) < *(_QWORD *)(a2 + 24);
  v9 = v5 < v6 || v8;
  if (v4 >= v3)
    return v9;
  else
    return 0;
}

uint64_t sub_1C52EBF60(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_DWORD *)(v3 + 32 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_DWORD *)(v3 + 32 * v6);
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

void **sub_1C52EC00C(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v16[128];
  uint64_t v17;

  v2 = a2;
  v17 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C52EC230((void **)a1, v7, v7 + 32 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v16;
  do
  {
    v11 = a1 + v9;
    v12 = *(_DWORD *)(a1 + v9 + 8);
    if (v12 <= 0xFFFFFFFD)
    {
      *(_DWORD *)v10 = v12;
      *((_QWORD *)v10 + 2) = 0;
      *((_QWORD *)v10 + 3) = 0;
      *((_QWORD *)v10 + 1) = 0;
      v14 = *(_OWORD *)(v11 + 16);
      v13 = v11 + 16;
      *(_OWORD *)(v10 + 8) = v14;
      *((_QWORD *)v10 + 3) = *(_QWORD *)(v13 + 16);
      v10 += 32;
      *(_QWORD *)v13 = 0;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      sub_1C52EC1AC((void **)v13);
    }
    v9 += 32;
  }
  while (v9 != 128);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(32 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  return sub_1C52EC230((void **)a1, (uint64_t)v16, (uint64_t)v10);
}

void **sub_1C52EC1AC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  char *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (char *)*((_QWORD *)v3 - 6);
        if (v3 - 32 != v5)
          free(v5);
        v6 = (char *)*((_QWORD *)v3 - 40);
        if (v3 - 304 != v6)
          free(v6);
        v3 -= 384;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_1C52EC230(void **result, uint64_t a2, uint64_t a3)
{
  void **v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;
  void **v9;
  int v10;
  _QWORD *v11;
  _DWORD *v12;

  v5 = result;
  v6 = *(_DWORD *)result;
  *result = (void *)(*(_DWORD *)result & 1);
  if ((v6 & 1) != 0)
  {
    v8 = result + 1;
    v9 = result + 17;
  }
  else
  {
    v7 = *((unsigned int *)result + 4);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = result[1];
    v9 = (void **)&v8[8 * v7];
  }
  do
  {
    *v8 = -1;
    v8 += 8;
  }
  while (v8 != (_DWORD *)v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *(_DWORD *)a2;
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v12 = 0;
      sub_1C52EBF60((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_DWORD *)a2;
      v11[2] = 0;
      v11[3] = 0;
      v11[1] = 0;
      *(_OWORD *)(v11 + 1) = *(_OWORD *)(a2 + 8);
      v11[3] = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_DWORD *)v5 += 2;
      result = sub_1C52EC1AC((void **)(a2 + 8));
    }
    a2 += 32;
  }
  return result;
}

uint64_t sub_1C52EC30C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  void **v8;
  unsigned int v9;
  __int128 *v10;
  int v11;
  unsigned int v12;
  void *v13;
  unsigned int v14;
  __int128 *v15;
  uint64_t v16;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_OWORD *)(a1 + 44) = *(__int128 *)((char *)a2 + 44);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  v7 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v8 = (void **)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0x800000000;
  if ((__int128 *)a1 != a2)
  {
    v9 = *((_DWORD *)a2 + 18);
    if (v9)
    {
      v10 = (__int128 *)*((_QWORD *)a2 + 8);
      if (v10 != a2 + 5)
      {
        *(_QWORD *)(a1 + 64) = v10;
        v11 = *((_DWORD *)a2 + 19);
        *(_DWORD *)(a1 + 72) = v9;
        *(_DWORD *)(a1 + 76) = v11;
        *((_QWORD *)a2 + 8) = a2 + 5;
        *((_DWORD *)a2 + 19) = 0;
LABEL_11:
        *((_DWORD *)a2 + 18) = 0;
        goto LABEL_12;
      }
      if (v9 < 9)
      {
        v12 = *((_DWORD *)a2 + 18);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, (uint64_t)v7, *((unsigned int *)a2 + 18), 32);
        v12 = *((_DWORD *)a2 + 18);
        if (!v12)
        {
LABEL_10:
          *(_DWORD *)(a1 + 72) = v9;
          goto LABEL_11;
        }
        v10 = (__int128 *)*((_QWORD *)a2 + 8);
        v7 = *v8;
      }
      memcpy(v7, v10, 32 * v12);
      goto LABEL_10;
    }
  }
LABEL_12:
  v13 = (void *)(a1 + 352);
  *(_QWORD *)(a1 + 336) = a1 + 352;
  *(_QWORD *)(a1 + 344) = 0x800000000;
  v14 = *((_DWORD *)a2 + 86);
  if (v14 && (__int128 *)a1 != a2)
  {
    v15 = (__int128 *)*((_QWORD *)a2 + 42);
    if (v15 != a2 + 22)
    {
      *(_QWORD *)(a1 + 336) = v15;
      *(_DWORD *)(a1 + 344) = v14;
      *(_DWORD *)(a1 + 348) = *((_DWORD *)a2 + 87);
      *((_QWORD *)a2 + 42) = a2 + 22;
      *((_DWORD *)a2 + 87) = 0;
      goto LABEL_19;
    }
    if (v14 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 336, a1 + 352, *((unsigned int *)a2 + 86), 4);
      v16 = *((unsigned int *)a2 + 86);
      if (!(_DWORD)v16)
        goto LABEL_18;
      v15 = (__int128 *)*((_QWORD *)a2 + 42);
      v13 = *(void **)(a1 + 336);
    }
    else
    {
      v16 = *((unsigned int *)a2 + 86);
    }
    memcpy(v13, v15, 4 * v16);
LABEL_18:
    *(_DWORD *)(a1 + 344) = v14;
LABEL_19:
    *((_DWORD *)a2 + 86) = 0;
  }
  return a1;
}

void sub_1C52EC484(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 192))
  {
    v15 = a1;
    v16 = v18;
    v17 = 0x400000000;
    sub_1C52EC7A0((uint64_t)&v15, a2);
    goto LABEL_11;
  }
  v5 = *(unsigned int *)(a1 + 196);
  if ((_DWORD)v5 == 11)
  {
    v10 = 0;
    v15 = a1;
    v16 = v18;
    v17 = 0x400000000;
    v11 = (unint64_t *)(a1 + 8);
    do
    {
      v12 = *v11;
      v11 += 2;
      if (v12 >= a2)
        break;
      ++v10;
    }
    while (v10 != 11);
    sub_1C4A078FC(&v15, v10);
LABEL_11:
    v9 = v15;
    if (!*(_DWORD *)(v15 + 192))
    {
      v13 = sub_1C52EC658(v15, (_DWORD *)v16 + 4 * v17 - 1, *(unsigned int *)(v15 + 196), a2, a3);
      if (v13 <= 0xB)
      {
        *(_DWORD *)(v9 + 196) = v13;
        *((_DWORD *)v16 + 2) = v13;
LABEL_13:
        if (v16 != v18)
          free(v16);
        return;
      }
      v14 = sub_1C52ECFC8(v9, *((_DWORD *)v16 + 4 * v17 - 1));
      llvm::IntervalMapImpl::Path::replaceRoot((uint64_t)&v16, v9 + 8, *(_DWORD *)(v9 + 196), v14);
    }
    sub_1C52EC8E0(&v15, a2, a3);
    goto LABEL_13;
  }
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = (unint64_t *)(a1 + 8);
    while (1)
    {
      v8 = *v7;
      v7 += 2;
      if (v8 >= a2)
        break;
      if (v5 == ++v6)
      {
        LODWORD(v6) = *(_DWORD *)(a1 + 196);
        break;
      }
    }
  }
  else
  {
    LODWORD(v6) = 0;
  }
  LODWORD(v15) = v6;
  *(_DWORD *)(a1 + 196) = sub_1C52EC658(a1, &v15, v5, a2, a3);
}

uint64_t sub_1C52EC658(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;

  v5 = *a2;
  if (!(_DWORD)v5)
  {
LABEL_5:
    if ((_DWORD)v5 == (_DWORD)a3)
    {
      v14 = (_QWORD *)(a1 + 16 * a3);
      *v14 = a4;
      v14[1] = a5;
      *(_BYTE *)(a1 + a3 + 176) = 0;
      return (a3 + 1);
    }
    v10 = (_BYTE *)(a1 + v5 + 176);
    if (!*v10)
    {
      v11 = (_QWORD *)(a1 + 16 * v5);
      if (a5 + 1 == *v11)
      {
        *v11 = a4;
        return a3;
      }
    }
    if ((_DWORD)a3 != 11)
    {
      v12 = a3;
      do
      {
        *(_OWORD *)(a1 + 16 * v12) = *(_OWORD *)(a1 + 16 * (v12 - 1));
        *(_BYTE *)(a1 + 176 + v12) = *(_BYTE *)(a1 + 176 + v12 - 1);
        --v12;
      }
      while ((_DWORD)v5 != v12);
      v13 = (_QWORD *)(a1 + 16 * v5);
      *v13 = a4;
      v13[1] = a5;
      *v10 = 0;
      return (a3 + 1);
    }
    return 12;
  }
  v6 = (v5 - 1);
  if (*(_BYTE *)(a1 + v6 + 176) || (v7 = a1 + 16 * v6, v9 = *(_QWORD *)(v7 + 8), v8 = (_QWORD *)(v7 + 8), v9 + 1 != a4))
  {
    if ((_DWORD)v5 == 11)
      return 12;
    goto LABEL_5;
  }
  *a2 = v6;
  if ((_DWORD)v5 == (_DWORD)a3 || *(_BYTE *)(a1 + v5 + 176) || a5 + 1 != *(_QWORD *)(a1 + 16 * v5))
  {
    *v8 = a5;
  }
  else
  {
    *v8 = *(_QWORD *)(a1 + 16 * v5 + 8);
    if ((_DWORD)v5 + 1 != (_DWORD)a3)
    {
      do
      {
        *(_OWORD *)(a1 + 16 * v5) = *(_OWORD *)(a1 + 16 * (v5 + 1));
        *(_BYTE *)(a1 + 176 + v5) = *(_BYTE *)(a1 + 176 + (v5 + 1));
        LODWORD(v5) = v5 + 1;
      }
      while ((_DWORD)a3 - 1 != (_DWORD)v5);
    }
    return (a3 - 1);
  }
  return a3;
}

_DWORD *sub_1C52EC7A0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD *result;

  v4 = *(unsigned int *)(*(_QWORD *)a1 + 196);
  if ((_DWORD)v4)
  {
    v5 = 0;
    while (*(_QWORD *)(*(_QWORD *)a1 + 96 + 8 * v5) < a2)
    {
      if (v4 == ++v5)
      {
        v5 = *(unsigned int *)(*(_QWORD *)a1 + 196);
        break;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  result = sub_1C4A078FC((_DWORD *)a1, v5);
  if (*(_DWORD *)(a1 + 16))
  {
    if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 12) < *(_DWORD *)(*(_QWORD *)(a1 + 8) + 8))
      return sub_1C52EC82C((uint64_t *)a1, a2);
  }
  return result;
}

_DWORD *sub_1C52EC82C(uint64_t *a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  _DWORD *v11;
  unint64_t v12;
  uint64_t v13;

  v3 = *((_DWORD *)a1 + 4);
  v4 = *a1;
  v6 = a1[1];
  v5 = a1 + 1;
  LODWORD(v4) = *(_DWORD *)(v4 + 192);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 16 * (v3 - 1))
                 + 8 * *(unsigned int *)(v6 + 16 * (v3 - 1) + 12));
  v8 = v4 - v3;
  if ((_DWORD)v4 != v3)
  {
    do
    {
      v11 = v5;
      v12 = v7 & 0xFFFFFFFFFFFFFFC0;
      LODWORD(v13) = -1;
      do
        v13 = (v13 + 1);
      while (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFC0) + 8 * v13 + 0x60) < a2);
      sub_1C4A079DC(v5, v7, v13);
      v5 = v11;
      v7 = *(_QWORD *)(v12 + 8 * v13);
      --v8;
    }
    while (v8);
  }
  LODWORD(v9) = -1;
  do
    v9 = (v9 + 1);
  while (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFFFC0) + 16 * v9 + 8) < a2);
  return sub_1C4A079DC(v5, v7, v9);
}

uint64_t sub_1C52EC8E0(_DWORD *a1, unint64_t a2, unint64_t a3)
{
  llvm::IntervalMapImpl::Path *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t result;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  int i;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  int v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  _DWORD *v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unsigned int v82[4];
  _OWORD v83[2];
  _DWORD v84[4];
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v6 = (llvm::IntervalMapImpl::Path *)(a1 + 2);
  v7 = a1[4];
  if (!v7 || (v8 = *(_QWORD *)v6, *(_DWORD *)(*(_QWORD *)v6 + 12) >= *(_DWORD *)(*(_QWORD *)v6 + 8)))
  {
    v9 = *(unsigned int *)(*(_QWORD *)a1 + 192);
    llvm::IntervalMapImpl::Path::moveLeft((llvm::IntervalMapImpl::Path *)(a1 + 2), *(_DWORD *)(*(_QWORD *)a1 + 192));
    v8 = *((_QWORD *)a1 + 1);
    ++*(_DWORD *)(v8 + 16 * v9 + 12);
    v7 = a1[4];
  }
  v10 = v7;
  v11 = v8 + 16 * v7;
  v12 = *(_DWORD *)(v11 - 4);
  if (!v12)
  {
    v13 = *(_QWORD *)(v11 - 16);
    if (*(_QWORD *)v13 <= a2)
      goto LABEL_22;
    v14 = v7 - 1;
    if (v7 == 1)
      goto LABEL_12;
    v15 = v7 - 2;
    v16 = v7;
    while (1)
    {
      v17 = v15;
      if (!v15)
        break;
      v18 = *(_DWORD *)(v8 + 16 * v15 + 12);
      --v16;
      --v15;
      if (v18)
        goto LABEL_14;
    }
    v18 = *(_DWORD *)(v8 + 12);
    if (!v18)
      goto LABEL_12;
    v16 = 1;
LABEL_14:
    v19 = *(_QWORD *)(*(_QWORD *)(v8 + 16 * v17) + 8 * (v18 - 1));
    if (v16 != v14)
    {
      v76 = ~v16 + v7;
      do
      {
        v19 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFC0) + 8 * (v19 & 0x3F));
        --v76;
      }
      while (v76);
    }
    if (!v19)
    {
LABEL_12:
      v12 = 0;
      **(_QWORD **)a1 = a2;
      goto LABEL_23;
    }
    if (*(_BYTE *)(v19 + 176)
      || (v20 = v19 & 0xFFFFFFFFFFFFFFC0,
          v21 = v19 & 0x3F,
          v22 = (unint64_t *)((v19 & 0xFFFFFFFFFFFFFFC0) + 16 * v21 + 8),
          *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFFC0) + 16 * v21 + 8) + 1 != a2))
    {
LABEL_22:
      v12 = 0;
    }
    else
    {
      llvm::IntervalMapImpl::Path::moveLeft(v6, v14);
      if (*(_QWORD *)v13 > a3 && (a3 + 1 != *(_QWORD *)v13 || *(_BYTE *)(v13 + 176)))
      {
        v29 = a1[4] - 1;
        *v22 = a3;
        return sub_1C5111404((uint64_t)a1, v29, a3);
      }
      a2 = *(_QWORD *)(v20 + 16 * v21);
      sub_1C52ED1D4((uint64_t)a1, 0);
      v8 = *((_QWORD *)a1 + 1);
      v10 = a1[4];
      v12 = *(_DWORD *)(v8 + 16 * v10 - 4);
    }
  }
LABEL_23:
  v23 = v8 + 16 * v10;
  v24 = *(unsigned int *)(v23 - 8);
  v25 = v12 == v24;
  result = sub_1C52EC658(*(_QWORD *)(v23 - 16), (_DWORD *)(v23 - 4), v24, a2, a3);
  if (result < 0xC)
    goto LABEL_24;
  v31 = a1[4];
  memset(v83, 0, sizeof(v83));
  v32 = *((_QWORD *)a1 + 1);
  v33 = (v31 - 1);
  v34 = *(unsigned int *)(v32 + 16 * v33 + 12);
  v79 = a2;
  v80 = a3;
  if (v31 == 1)
  {
    v38 = 0;
    LODWORD(v39) = 0;
  }
  else
  {
    v35 = v31 - 2;
    v36 = v31;
    while (1)
    {
      v37 = v35;
      if (!v35)
        break;
      v38 = *(_DWORD *)(v32 + 16 * v35 + 12);
      --v36;
      --v35;
      if (v38)
        goto LABEL_36;
    }
    v38 = *(_DWORD *)(v32 + 12);
    v36 = 1;
    if (!v38)
    {
      LODWORD(v39) = 0;
      goto LABEL_41;
    }
LABEL_36:
    v39 = *(_QWORD *)(*(_QWORD *)(v32 + 16 * v37) + 8 * (v38 - 1));
    if (v36 != (_DWORD)v33)
    {
      v78 = ~v36 + v31;
      do
      {
        v39 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFFFC0) + 8 * (v39 & 0x3F));
        --v78;
      }
      while (v78);
    }
    if (v39)
    {
      LOBYTE(v36) = 0;
      v38 = (v39 & 0x3F) + 1;
      v84[0] = v38;
      v34 = (v38 + v34);
      *(_QWORD *)&v83[0] = v39 & 0xFFFFFFFFFFFFFFC0;
      LODWORD(v39) = 1;
      goto LABEL_41;
    }
    v38 = 0;
  }
  LOBYTE(v36) = 1;
LABEL_41:
  v40 = v32 + 16 * v33;
  v41 = *(_DWORD *)(v40 + 8);
  v84[v39] = v41;
  v42 = v41 + v38;
  v43 = (v39 + 1);
  *(_QWORD *)((unint64_t)v83 | (8 * v39)) = *(_QWORD *)v40;
  if (v31 != 1)
  {
    v44 = v31 - 2;
    v45 = v31;
    while (1)
    {
      v46 = v44;
      if (!v44)
        break;
      v47 = *(_DWORD *)(v32 + 16 * v44 + 12);
      v48 = *(_DWORD *)(v32 + 16 * v44 + 8) - 1;
      --v45;
      --v44;
      if (v47 != v48)
        goto LABEL_47;
    }
    v47 = *(_DWORD *)(v32 + 12);
    v48 = *(_DWORD *)(v32 + 8) - 1;
    v45 = 1;
LABEL_47:
    if (v47 != v48)
    {
      v49 = *(_QWORD *)(*(_QWORD *)(v32 + 16 * v46) + 8 * (v47 + 1));
      if (v45 != (_DWORD)v33)
      {
        v77 = ~v45 + v31;
        do
        {
          v49 = *(_QWORD *)(v49 & 0xFFFFFFFFFFFFFFC0);
          --v77;
        }
        while (v77);
      }
      if (v49)
      {
        v50 = (v49 & 0x3F) + 1;
        v84[v43] = v50;
        v42 += v50;
        *((_QWORD *)v83 + v43) = v49 & 0xFFFFFFFFFFFFFFC0;
        v43 = v39 | 2;
      }
    }
  }
  if (v42 + 1 <= (11 * v43))
  {
    LODWORD(v51) = 0;
  }
  else
  {
    if ((_DWORD)v43 == 1)
      v51 = 1;
    else
      v51 = (v43 - 1);
    v84[v43] = v84[v51];
    *((_QWORD *)v83 + v43) = *((_QWORD *)v83 + v51);
    v84[v51] = 0;
    v52 = *(unint64_t **)(*(_QWORD *)a1 + 200);
    v53 = *v52;
    if (*v52)
      *v52 = *(_QWORD *)v53;
    else
      v53 = sub_1C484358C((uint64_t)(v52 + 1), 192, 6);
    *(_OWORD *)(v53 + 160) = 0u;
    *(_OWORD *)(v53 + 176) = 0u;
    *(_OWORD *)(v53 + 128) = 0u;
    *(_OWORD *)(v53 + 144) = 0u;
    *(_OWORD *)(v53 + 96) = 0u;
    *(_OWORD *)(v53 + 112) = 0u;
    *(_OWORD *)(v53 + 64) = 0u;
    *(_OWORD *)(v53 + 80) = 0u;
    *(_OWORD *)(v53 + 32) = 0u;
    *(_OWORD *)(v53 + 48) = 0u;
    v43 = (v43 + 1);
    *(_OWORD *)v53 = 0u;
    *(_OWORD *)(v53 + 16) = 0u;
    *((_QWORD *)v83 + v51) = v53;
  }
  v81 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)v43, v42, 0xBu, v84, v82, (unsigned int *)v34, 1);
  sub_1C621F060((uint64_t)v83, v43, (uint64_t)v84, (uint64_t)v82);
  if ((v36 & 1) == 0)
    llvm::IntervalMapImpl::Path::moveLeft(v6, v33);
  v54 = 0;
  for (i = v81; ; --i)
  {
    v56 = *((_QWORD *)v83 + v54);
    v57 = v82[v54];
    v58 = v57 - 1;
    v59 = *(_QWORD *)(v56 + 16 * v58 + 8);
    if ((_DWORD)v51 && v54 == v51)
    {
      LODWORD(v33) = v33 + sub_1C52ED3FC((uint64_t)a1, v33, v56 & 0xFFFFFFFFFFFFFFC0 | v58, v59);
    }
    else
    {
      v60 = *(_QWORD *)v6;
      *(_DWORD *)(*(_QWORD *)v6 + 16 * v33 + 8) = v57;
      if ((_DWORD)v33)
        *(_QWORD *)(*(_QWORD *)(v60 + 16 * (v33 - 1))
                  + 8 * *(unsigned int *)(v60 + 16 * (v33 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v60 + 16 * (v33 - 1)) + 8 * *(unsigned int *)(v60 + 16 * (v33 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v58;
      sub_1C5111404((uint64_t)a1, v33, v59);
    }
    if (v54 + 1 == v43)
      break;
    v61 = 0;
    ++v54;
    v62 = *(_QWORD *)v6;
    while (1)
    {
      v63 = v61;
      if ((_DWORD)v33 + v61 == 1)
        break;
      v64 = (v33 - 1 + v61);
      v66 = *(_DWORD *)(v62 + 16 * v64 + 8);
      v65 = *(_DWORD *)(v62 + 16 * v64 + 12);
      --v61;
      if (v65 != v66 - 1)
        goto LABEL_75;
    }
    v64 = 0;
    v66 = *(_DWORD *)(v62 + 8);
    v65 = *(_DWORD *)(v62 + 12);
LABEL_75:
    v67 = v65 + 1;
    *(_DWORD *)(v62 + 16 * v64 + 12) = v67;
    if (v67 != v66)
    {
      v68 = *(_QWORD *)(*(_QWORD *)(v62 + 16 * v64) + 8 * v67);
      if (v63)
      {
        do
        {
          v70 = *(_QWORD *)v6 + 16 * (v33 + v63);
          *(_QWORD *)v70 = v68 & 0xFFFFFFFFFFFFFFC0;
          *(_DWORD *)(v70 + 8) = (v68 & 0x3F) + 1;
          *(_DWORD *)(v70 + 12) = 0;
          v68 = *(_QWORD *)(v68 & 0xFFFFFFFFFFFFFFC0);
          v71 = __CFADD__(v63++, 1);
        }
        while (!v71);
        v62 = *(_QWORD *)v6;
      }
      v69 = (unint64_t *)(v62 + 16 * v33);
      *v69 = v68 & 0xFFFFFFFFFFFFFFC0;
      v69[1] = (v68 & 0x3F) + 1;
    }
  }
  if ((_DWORD)v54 != (_DWORD)v81)
  {
    do
    {
      llvm::IntervalMapImpl::Path::moveLeft(v6, v33);
      v71 = __CFADD__(i++, 1);
    }
    while (!v71);
  }
  a3 = v80;
  v72 = *((_QWORD *)a1 + 1);
  *(_DWORD *)(v72 + 16 * v33 + 12) = HIDWORD(v81);
  v73 = (_DWORD *)(v72 + 16 * a1[4]);
  v74 = *--v73;
  v75 = *(v73 - 1);
  v25 = v74 == v75;
  result = sub_1C52EC658(*(_QWORD *)(v73 - 3), v73, v75, v79, v80);
LABEL_24:
  v27 = a1[4];
  v28 = *((_QWORD *)a1 + 1);
  v29 = v27 - 1;
  *(_DWORD *)(v28 + 16 * (v27 - 1) + 8) = result;
  if (v27 != 1)
  {
    v30 = v28 + 16 * (v27 - 2);
    *(_QWORD *)(*(_QWORD *)v30 + 8 * *(unsigned int *)(v30 + 12)) = *(_QWORD *)(*(_QWORD *)v30
                                                                                + 8 * *(unsigned int *)(v30 + 12)) & 0xFFFFFFFFFFFFFFC0 | (result - 1);
  }
  if (v25)
    return sub_1C5111404((uint64_t)a1, v29, a3);
  return result;
}

uint64_t sub_1C52ECFC8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _BOOL4 v12;
  _BOOL4 v13;
  char v14;
  uint64_t v15;
  int v16;
  __int128 v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[4];

  v3 = 0;
  v4 = 0;
  LODWORD(v5) = 0;
  v28[3] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 196) + 1;
  v7 = v6 >> 1;
  v8 = v6 & 1;
  LODWORD(v9) = 2;
  do
  {
    if (v3 >= v8)
      v10 = v7;
    else
      v10 = v7 + 1;
    *((_DWORD *)&v28[2] + v3) = v10;
    v11 = a2 - v4;
    v4 += v10;
    v12 = v9 == 2;
    v13 = v4 > a2;
    if (v12 && v13)
      v9 = v3;
    else
      v9 = v9;
    if (v12 && v13)
      v5 = v11;
    else
      v5 = v5;
    ++v3;
  }
  while (v3 != 2);
  v14 = 0;
  v15 = 0;
  v16 = 0;
  --*((_DWORD *)&v28[2] + v9);
  v28[0] = 0;
  v28[1] = 0;
  v17 = 0uLL;
  do
  {
    v18 = v14;
    v19 = *(unint64_t **)(a1 + 200);
    v20 = *v19;
    if (*v19)
    {
      *v19 = *(_QWORD *)v20;
    }
    else
    {
      v20 = sub_1C484358C((uint64_t)(v19 + 1), 192, 6);
      v17 = 0uLL;
    }
    *(_OWORD *)(v20 + 160) = v17;
    *(_OWORD *)(v20 + 176) = v17;
    *(_OWORD *)(v20 + 128) = v17;
    *(_OWORD *)(v20 + 144) = v17;
    *(_OWORD *)(v20 + 96) = v17;
    *(_OWORD *)(v20 + 112) = v17;
    *(_OWORD *)(v20 + 64) = v17;
    *(_OWORD *)(v20 + 80) = v17;
    *(_OWORD *)(v20 + 32) = v17;
    *(_OWORD *)(v20 + 48) = v17;
    *(_OWORD *)v20 = v17;
    *(_OWORD *)(v20 + 16) = v17;
    v21 = *((_DWORD *)&v28[2] + v15);
    if (v21)
    {
      v22 = 0;
      do
      {
        v23 = (v16 + v22);
        *(_OWORD *)(v20 + 16 * v22) = *(_OWORD *)(a1 + 16 * v23);
        *(_BYTE *)(v20 + v22++ + 176) = *(_BYTE *)(a1 + v23 + 176);
      }
      while (v21 != (_DWORD)v22);
    }
    v16 += v21;
    v28[v15] = v20 & 0xFFFFFFFFFFFFFFC0 | (v21 - 1);
    v14 = 1;
    v15 = 1;
  }
  while ((v18 & 1) == 0);
  v24 = 0;
  *(_DWORD *)(a1 + 192) = 1;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)(a1 + 176) = 0;
  do
  {
    v25 = v28[v24];
    v26 = a1 + 8 * v24;
    *(_QWORD *)(v26 + 96) = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFFFC0)
                                      + 16 * (*((_DWORD *)&v28[2] + v24) - 1)
                                      + 8);
    *(_QWORD *)(v26 + 8) = v25;
    ++v24;
  }
  while (v24 != 2);
  *(_QWORD *)a1 = *(_QWORD *)(v28[0] & 0xFFFFFFFFFFFFFFC0);
  *(_DWORD *)(a1 + 196) = 2;
  return v9 | (v5 << 32);
}

uint64_t sub_1C52ED1D4(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  int *v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t *v34;
  uint64_t v35;

  v3 = result;
  v5 = *(_QWORD *)result;
  v4 = *(_QWORD *)(result + 8);
  v6 = *(unsigned int *)(result + 16);
  v7 = v4 + 16 * v6;
  v8 = *(_QWORD **)(v7 - 16);
  v9 = *(_DWORD *)(v7 - 8);
  if (v9 == 1)
  {
    v10 = *(_QWORD **)(v5 + 200);
    *v8 = *v10;
    *v10 = v8;
    result = (uint64_t)sub_1C5111C30((_DWORD *)result, *(_DWORD *)(v5 + 192));
    if (a2)
    {
      if (*(_DWORD *)(v5 + 192))
      {
        v11 = *(unsigned int *)(v3 + 16);
        if ((_DWORD)v11)
        {
          v12 = *(_QWORD *)(v3 + 8);
          if (*(_DWORD *)(v12 + 12) < *(_DWORD *)(v12 + 8))
          {
            v13 = (int *)(v12 + 12);
            v14 = *(unsigned int *)(v3 + 16);
            while (1)
            {
              v15 = *v13;
              v13 += 4;
              if (v15)
                break;
              if (!--v14)
              {
                v16 = *(_QWORD **)(v12 + 16 * v11 - 16);
                goto LABEL_26;
              }
            }
          }
        }
      }
    }
  }
  else
  {
    v17 = *(_DWORD *)(v7 - 4);
    if (v17 + 1 != v9)
    {
      do
      {
        *(_OWORD *)&v8[2 * v17] = *(_OWORD *)&v8[2 * v17 + 2];
        *((_BYTE *)v8 + v17 + 176) = *((_BYTE *)v8 + v17 + 177);
        ++v17;
      }
      while (v9 - 1 != v17);
      v4 = *(_QWORD *)(result + 8);
      v6 = *(unsigned int *)(result + 16);
      v9 = *(_DWORD *)(v4 + 16 * v6 - 8);
    }
    v18 = v4 + 16 * v6;
    v19 = *(unsigned int *)(v5 + 192);
    *(_DWORD *)(v4 + 16 * v19 + 8) = v9 - 1;
    if ((_DWORD)v19)
    {
      v20 = v4 + 16 * (v19 - 1);
      *(_QWORD *)(*(_QWORD *)v20 + 8 * *(unsigned int *)(v20 + 12)) = *(_QWORD *)(*(_QWORD *)v20
                                                                                  + 8 * *(unsigned int *)(v20 + 12)) & 0xFFFFFFFFFFFFFFC0 | (v9 - 2);
    }
    if (*(_DWORD *)(v18 - 4) == v9 - 1)
    {
      result = sub_1C5111404(result, v19, v8[2 * (v9 - 2) + 1]);
      v21 = 0;
      v22 = *(unsigned int *)(v5 + 192);
      v23 = *(_QWORD *)(v3 + 8);
      v24 = v22 - 1;
      while (1)
      {
        v25 = v21;
        v26 = (v24 + v21);
        if (!(v24 + v21))
          break;
        v28 = *(_DWORD *)(v23 + 16 * v26 + 8);
        v27 = *(_DWORD *)(v23 + 16 * v26 + 12);
        --v21;
        if (v27 != v28 - 1)
          goto LABEL_28;
      }
      v26 = 0;
      v28 = *(_DWORD *)(v23 + 8);
      v27 = *(_DWORD *)(v23 + 12);
LABEL_28:
      v32 = v27 + 1;
      *(_DWORD *)(v23 + 16 * v26 + 12) = v32;
      if (v32 != v28)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v23 + 16 * v26) + 8 * v32);
        if (v25)
        {
          do
          {
            v35 = *(_QWORD *)(v3 + 8) + 16 * (v22 + v25);
            *(_QWORD *)v35 = v33 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v35 + 8) = (v33 & 0x3F) + 1;
            *(_DWORD *)(v35 + 12) = 0;
            v33 = *(_QWORD *)(v33 & 0xFFFFFFFFFFFFFFC0);
          }
          while (!__CFADD__(v25++, 1));
          v23 = *(_QWORD *)(v3 + 8);
        }
        v34 = (unint64_t *)(v23 + 16 * v22);
        *v34 = v33 & 0xFFFFFFFFFFFFFFC0;
        v34[1] = (v33 & 0x3F) + 1;
      }
    }
    else if (a2)
    {
      if ((_DWORD)v6)
      {
        v29 = v6;
        v30 = (int *)(v4 + 12);
        while (1)
        {
          v31 = *v30;
          v30 += 4;
          if (v31)
            break;
          if (!--v29)
            goto LABEL_25;
        }
      }
      else
      {
LABEL_25:
        v16 = *(_QWORD **)(v18 - 16);
LABEL_26:
        *(_QWORD *)v5 = *v16;
      }
    }
  }
  return result;
}

BOOL sub_1C52ED3FC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  llvm::IntervalMapImpl::Path *v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  unsigned int v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  int v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  BOOL v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84[4];
  __int128 v85[2];
  _DWORD v86[4];
  uint64_t v87;

  v4 = a4;
  v5 = a3;
  v6 = a2;
  v87 = *MEMORY[0x1E0C80C00];
  v9 = (llvm::IntervalMapImpl::Path *)(a1 + 8);
  v8 = *(_QWORD *)a1;
  v10 = a2 == 1;
  if (a2 == 1)
  {
    v11 = *(_DWORD *)(v8 + 196);
    if (v11 <= 0xA)
    {
      v12 = v8 + 8;
      v13 = *(_QWORD *)v9;
      v14 = *(unsigned int *)(*(_QWORD *)v9 + 12);
      if (v11 != (_DWORD)v14)
      {
        v15 = *(_DWORD *)(v8 + 196);
        do
        {
          *(_QWORD *)(v12 + 8 * v15) = *(_QWORD *)(v12 + 8 * (v15 - 1));
          *(_QWORD *)(v8 + 96 + 8 * v15) = *(_QWORD *)(v8 + 96 + 8 * (v15 - 1));
          --v15;
        }
        while ((_DWORD)v14 != v15);
      }
      v10 = 0;
      v16 = (_QWORD *)(v12 + 8 * v14);
      *v16 = a3;
      v16[11] = a4;
      v17 = v11 + 1;
      *(_DWORD *)(v8 + 196) = v17;
      *(_DWORD *)(v13 + 8) = v17;
      v18 = *(_QWORD *)(*(_QWORD *)v13 + 8 * v14);
      *(_QWORD *)(v13 + 16) = v18 & 0xFFFFFFFFFFFFFFC0;
      *(_DWORD *)(v13 + 24) = (v18 & 0x3F) + 1;
      return v10;
    }
    v19 = sub_1C621F290(*(_QWORD *)a1, *(unsigned int *)(*(_QWORD *)v9 + 12));
    v20 = *(_DWORD *)(v8 + 196);
    v21 = *(_QWORD *)v9;
    *(_QWORD *)v21 = v8 + 8;
    *(_DWORD *)(v21 + 8) = v20;
    *(_DWORD *)(v21 + 12) = v19;
    v22 = *(_QWORD *)(**(_QWORD **)v9 + 8 * *(unsigned int *)(*(_QWORD *)v9 + 12));
    v23 = *(_QWORD *)v9 + 16;
    *(_QWORD *)&v85[0] = v22 & 0xFFFFFFFFFFFFFFC0;
    *((_QWORD *)&v85[0] + 1) = (v19 & 0xFFFFFFFF00000000 | v22 & 0x3F) + 1;
    sub_1C5DF93CC((uint64_t)v9, v23, v85);
    v6 = 2;
  }
  v24 = (v6 - 1);
  if (!*(_DWORD *)(a1 + 16)
    || (v25 = *(_QWORD *)v9, *(_DWORD *)(*(_QWORD *)v9 + 12) >= *(_DWORD *)(*(_QWORD *)v9 + 8)))
  {
    llvm::IntervalMapImpl::Path::moveLeft(v9, v6 - 1);
    v25 = *(_QWORD *)v9;
    ++*(_DWORD *)(*(_QWORD *)v9 + 16 * v24 + 12);
  }
  v26 = *(_DWORD *)(v25 + 16 * v24 + 8);
  if (v26 == 12)
  {
    memset(v85, 0, sizeof(v85));
    v37 = *(unsigned int *)(v25 + 16 * v24 + 12);
    v38 = v6 - 2;
    v39 = v6 - 2;
    v40 = v6;
    while (1)
    {
      v41 = v39;
      if (!v39)
        break;
      v42 = *(_DWORD *)(v25 + 16 * v39 + 12);
      --v40;
      --v39;
      if (v42)
        goto LABEL_27;
    }
    v42 = *(_DWORD *)(v25 + 12);
    v40 = 1;
    if (!v42)
    {
      LODWORD(v43) = 0;
      goto LABEL_31;
    }
LABEL_27:
    v43 = *(_QWORD *)(*(_QWORD *)(v25 + 16 * v41) + 8 * (v42 - 1));
    if (v40 != (_DWORD)v24)
    {
      v81 = ~v40 + v6;
      do
      {
        v43 = *(_QWORD *)((v43 & 0xFFFFFFFFFFFFFFC0) + 8 * (v43 & 0x3F));
        --v81;
      }
      while (v81);
    }
    if (v43)
    {
      LOBYTE(v40) = 0;
      v42 = (v43 & 0x3F) + 1;
      v86[0] = v42;
      v37 = (v42 + v37);
      *(_QWORD *)&v85[0] = v43 & 0xFFFFFFFFFFFFFFC0;
      LODWORD(v43) = 1;
    }
    else
    {
      v42 = 0;
      LOBYTE(v40) = 1;
    }
LABEL_31:
    v44 = v25 + 16 * v24;
    v45 = *(_DWORD *)(v44 + 8);
    v86[v43] = v45;
    v46 = v45 + v42;
    v47 = (v43 + 1);
    *(_QWORD *)((unint64_t)v85 | (8 * v43)) = *(_QWORD *)v44;
    v48 = v6;
    while (1)
    {
      v49 = v38;
      if (!v38)
        break;
      v50 = *(_DWORD *)(v25 + 16 * v38 + 12);
      v51 = *(_DWORD *)(v25 + 16 * v38 + 8) - 1;
      --v48;
      --v38;
      if (v50 != v51)
        goto LABEL_36;
    }
    v50 = *(_DWORD *)(v25 + 12);
    v51 = *(_DWORD *)(v25 + 8) - 1;
    v48 = 1;
LABEL_36:
    if (v50 != v51)
    {
      v52 = *(_QWORD *)(*(_QWORD *)(v25 + 16 * v49) + 8 * (v50 + 1));
      if (v48 != (_DWORD)v24)
      {
        v80 = ~v48 + v6;
        do
        {
          v52 = *(_QWORD *)(v52 & 0xFFFFFFFFFFFFFFC0);
          --v80;
        }
        while (v80);
      }
      if (v52)
      {
        v53 = (v52 & 0x3F) + 1;
        v86[v47] = v53;
        v46 += v53;
        *((_QWORD *)v85 + v47) = v52 & 0xFFFFFFFFFFFFFFC0;
        v47 = v43 | 2;
      }
    }
    if (v46 + 1 <= (12 * v47))
    {
      LODWORD(v54) = 0;
    }
    else
    {
      if ((_DWORD)v47 == 1)
        v54 = 1;
      else
        v54 = (v47 - 1);
      v86[v47] = v86[v54];
      *((_QWORD *)v85 + v47) = *((_QWORD *)v85 + v54);
      v86[v54] = 0;
      v55 = *(unint64_t **)(*(_QWORD *)a1 + 200);
      v56 = *v55;
      if (*v55)
      {
        *v55 = *(_QWORD *)v56;
      }
      else
      {
        v57 = v47;
        v56 = sub_1C484358C((uint64_t)(v55 + 1), 192, 6);
        LODWORD(v47) = v57;
      }
      *(_OWORD *)(v56 + 160) = 0u;
      *(_OWORD *)(v56 + 176) = 0u;
      *(_OWORD *)(v56 + 128) = 0u;
      *(_OWORD *)(v56 + 144) = 0u;
      *(_OWORD *)(v56 + 96) = 0u;
      *(_OWORD *)(v56 + 112) = 0u;
      *(_OWORD *)(v56 + 64) = 0u;
      *(_OWORD *)(v56 + 80) = 0u;
      *(_OWORD *)(v56 + 32) = 0u;
      *(_OWORD *)(v56 + 48) = 0u;
      v47 = (v47 + 1);
      *(_OWORD *)v56 = 0u;
      *(_OWORD *)(v56 + 16) = 0u;
      *((_QWORD *)v85 + v54) = v56;
    }
    v82 = v5;
    v83 = v4;
    v58 = v47;
    v59 = llvm::IntervalMapImpl::distribute((llvm::IntervalMapImpl *)v47, v46, 0xCu, v86, v84, (unsigned int *)v37, 1);
    sub_1C621F360((uint64_t)v85, v58, (uint64_t)v86, (uint64_t)v84);
    if ((v40 & 1) == 0)
      llvm::IntervalMapImpl::Path::moveLeft(v9, v24);
    v60 = 0;
    v10 = 0;
    v61 = v59;
    v62 = v24;
    while (1)
    {
      v63 = *((_QWORD *)v85 + v60);
      v64 = v84[v60];
      v65 = v64 - 1;
      v66 = *(_QWORD *)(v63 + 8 * v65 + 96);
      if ((_DWORD)v54 && v60 == v54)
      {
        v67 = sub_1C52ED3FC(a1, v62, v63 & 0xFFFFFFFFFFFFFFC0 | v65, v66);
        v10 = v67;
        v62 = (v62 + v67);
      }
      else
      {
        v68 = *(_QWORD *)v9;
        *(_DWORD *)(*(_QWORD *)v9 + 16 * v62 + 8) = v64;
        if ((_DWORD)v62)
          *(_QWORD *)(*(_QWORD *)(v68 + 16 * (v62 - 1))
                    + 8 * *(unsigned int *)(v68 + 16 * (v62 - 1) + 12)) = *(_QWORD *)(*(_QWORD *)(v68 + 16 * (v62 - 1)) + 8 * *(unsigned int *)(v68 + 16 * (v62 - 1) + 12)) & 0xFFFFFFFFFFFFFFC0 | v65;
        sub_1C5111404(a1, v62, v66);
      }
      if (v60 + 1 == v58)
        break;
      v69 = 0;
      ++v60;
      v70 = *(_QWORD *)v9;
      while (1)
      {
        v71 = v69;
        if ((_DWORD)v62 + v69 == 1)
          break;
        v72 = (v62 - 1 + v69);
        v74 = *(_DWORD *)(v70 + 16 * v72 + 8);
        v73 = *(_DWORD *)(v70 + 16 * v72 + 12);
        --v69;
        if (v73 != v74 - 1)
          goto LABEL_64;
      }
      v72 = 0;
      v74 = *(_DWORD *)(v70 + 8);
      v73 = *(_DWORD *)(v70 + 12);
LABEL_64:
      v75 = v73 + 1;
      *(_DWORD *)(v70 + 16 * v72 + 12) = v75;
      if (v75 != v74)
      {
        v76 = *(_QWORD *)(*(_QWORD *)(v70 + 16 * v72) + 8 * v75);
        if (v71)
        {
          do
          {
            v78 = *(_QWORD *)v9 + 16 * (v62 + v71);
            *(_QWORD *)v78 = v76 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v78 + 8) = (v76 & 0x3F) + 1;
            *(_DWORD *)(v78 + 12) = 0;
            v76 = *(_QWORD *)(v76 & 0xFFFFFFFFFFFFFFC0);
            v79 = __CFADD__(v71++, 1);
          }
          while (!v79);
          v70 = *(_QWORD *)v9;
        }
        v77 = (unint64_t *)(v70 + 16 * v62);
        *v77 = v76 & 0xFFFFFFFFFFFFFFC0;
        v77[1] = (v76 & 0x3F) + 1;
      }
      --v61;
    }
    if ((_DWORD)v60 != (_DWORD)v59)
    {
      do
      {
        llvm::IntervalMapImpl::Path::moveLeft(v9, v62);
        v79 = __CFADD__(v61++, 1);
      }
      while (!v79);
    }
    v25 = *(_QWORD *)v9;
    *(_DWORD *)(*(_QWORD *)v9 + 16 * v62 + 12) = HIDWORD(v59);
    v24 = v24 + v10;
    v26 = *(_DWORD *)(v25 + 16 * v24 + 8);
    v5 = v82;
    v4 = v83;
  }
  v27 = (uint64_t *)(v25 + 16 * v24);
  v28 = *v27;
  v29 = *((unsigned int *)v27 + 3);
  v30 = v27 + 1;
  if (v26 != (_DWORD)v29)
  {
    v31 = v26;
    do
    {
      *(_QWORD *)(v28 + 8 * v31) = *(_QWORD *)(v28 + 8 * (v31 - 1));
      *(_QWORD *)(v28 + 96 + 8 * v31) = *(_QWORD *)(v28 + 96 + 8 * (v31 - 1));
      --v31;
    }
    while ((_DWORD)v29 != v31);
  }
  v32 = (_QWORD *)(v28 + 8 * v29);
  *v32 = v5;
  v32[12] = v4;
  *v30 = v26 + 1;
  if ((_DWORD)v24)
  {
    v33 = v25 + 16 * (v24 - 1);
    *(_QWORD *)(*(_QWORD *)v33 + 8 * *(unsigned int *)(v33 + 12)) = *(_QWORD *)(*(_QWORD *)v33
                                                                                + 8 * *(unsigned int *)(v33 + 12)) & 0xFFFFFFFFFFFFFFC0 | v26;
  }
  if (v26 == (_DWORD)v29)
  {
    sub_1C5111404(a1, v24, v4);
    v25 = *(_QWORD *)(a1 + 8);
    v28 = *(_QWORD *)(v25 + 16 * v24);
  }
  v34 = *(_QWORD *)(v28 + 8 * *(unsigned int *)(v25 + 16 * v24 + 12));
  v35 = v25 + 16 * (v24 + 1);
  *(_QWORD *)v35 = v34 & 0xFFFFFFFFFFFFFFC0;
  *(_DWORD *)(v35 + 8) = (v34 & 0x3F) + 1;
  return v10;
}

uint64_t sub_1C52EDAAC(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;

  if (a5 < 1)
  {
    if (-a5 < a2)
      v8 = -a5;
    else
      v8 = a2;
    if (11 - a4 >= v8)
      v9 = v8;
    else
      v9 = 11 - a4;
    sub_1C621F21C(a1, a2, a3, a4, v9);
    return -v9;
  }
  else
  {
    v5 = 11 - a2;
    if (a4 >= a5)
      v6 = a5;
    else
      v6 = a4;
    if (v5 >= v6)
      v7 = v6;
    else
      v7 = v5;
    sub_1C621F1A8(a3, a4, a1, a2, v7);
  }
  return v7;
}

uint64_t sub_1C52EDB3C(uint64_t a1, uint64_t a2)
{
  void *v3;
  unint64_t v5;
  const void *v6;
  int v7;
  unsigned int v8;

  v3 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  if (a1 != a2)
  {
    v5 = *(unsigned int *)(a2 + 8);
    if ((_DWORD)v5)
    {
      v6 = *(const void **)a2;
      if (*(_QWORD *)a2 != a2 + 16)
      {
        *(_QWORD *)a1 = v6;
        v7 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v7;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
LABEL_11:
        *(_DWORD *)(a2 + 8) = 0;
        return a1;
      }
      if (v5 < 3)
      {
        v8 = v5;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 8);
        v8 = *(_DWORD *)(a2 + 8);
        if (!v8)
        {
LABEL_10:
          *(_DWORD *)(a1 + 8) = v5;
          goto LABEL_11;
        }
        v6 = *(const void **)a2;
        v3 = *(void **)a1;
      }
      memcpy(v3, v6, 8 * v8);
      goto LABEL_10;
    }
  }
  return a1;
}

void sub_1C52EDBFC(int *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  void *v9;
  _OWORD *v10;

  sub_1C52EA668(a1);
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 || *(_BYTE *)(a2 + 24) && *(_OWORD *)(a2 + 8) != 0 || *(_QWORD *)(a2 + 32))
    {
      v10 = 0;
      sub_1C52EB7CC((uint64_t)a1, (uint64_t *)a2, (uint64_t *)&v10);
      v6 = v10;
      v7 = *(_QWORD *)(a2 + 32);
      v8 = *(_OWORD *)(a2 + 16);
      *v10 = *(_OWORD *)a2;
      v6[1] = v8;
      *((_QWORD *)v6 + 4) = v7;
      sub_1C52EDB3C((uint64_t)v6 + 40, a2 + 40);
      *a1 += 2;
      v9 = *(void **)(a2 + 40);
      if ((void *)(a2 + 56) != v9)
        free(v9);
    }
    a2 += 72;
  }
}

unint64_t sub_1C52EDCBC(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v12;
  unsigned __int8 v13;
  unint64_t *v14;

  if (!*(_QWORD *)(a1 + 96))
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 8);
    v6 = *a2;
    if ((_DWORD)v5)
    {
      v7 = a2[1];
      v8 = 16 * v5;
      v9 = (_QWORD *)(v4 + 8);
      while (*(v9 - 1) != v6 || *v9 != v7)
      {
        v9 += 2;
        v8 -= 16;
        if (!v8)
          goto LABEL_13;
      }
      if (v8)
        return 1;
LABEL_13:
      if (v5 > 3)
      {
        do
        {
          v14 = (unint64_t *)(*(_QWORD *)a1 + 16 * v5 - 16);
          sub_1C621F4A4(a1 + 80, v14, v14);
          LODWORD(v5) = *(_DWORD *)(a1 + 8) - 1;
          *(_DWORD *)(a1 + 8) = v5;
        }
        while ((_DWORD)v5);
        sub_1C621F4A4(a1 + 80, a2, a2);
        return 0x100000001;
      }
    }
    else
    {
      v7 = a2[1];
    }
    if (v5 >= *(_DWORD *)(a1 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5 + 1, 16);
      v4 = *(_QWORD *)a1;
      v5 = *(unsigned int *)(a1 + 8);
    }
    v12 = (unint64_t *)(v4 + 16 * v5);
    *v12 = v6;
    v12[1] = v7;
    ++*(_DWORD *)(a1 + 8);
    return 0x100000001;
  }
  sub_1C621F4A4(a1 + 80, a2, a2);
  return ((unint64_t)v13 << 32) | 1;
}

uint64_t sub_1C52EDDE4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  v3 = *(_DWORD *)(a1 + 16);
  if (v3)
  {
    v4 = v3 - 1;
    v5 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v6 = (_QWORD *)(*(_QWORD *)a1 + 112 * v5);
    v7 = *v6;
    if (*a2 == *v6)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(*(_QWORD *)a1 + 112 * (v11 & v4));
        v7 = *v6;
        if (*a2 == *v6)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a3 = v6;
  return result;
}

uint64_t sub_1C52EDE7C@<X0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;

  v16 = 0;
  result = sub_1C52EDDE4((uint64_t)a1, a2, &v16);
  v9 = v16;
  if ((result & 1) != 0)
  {
    v14 = 0;
  }
  else
  {
    v9 = sub_1C52EDF74(a1, (uint64_t)a2, a2, v16);
    *v9 = *a2;
    v9[1] = v9 + 3;
    result = (uint64_t)(v9 + 1);
    v9[2] = 0x400000000;
    if (*(_DWORD *)(a3 + 8))
      result = sub_1C52EE224(result, a3);
    v9[11] = *(_QWORD *)(a3 + 80);
    v10 = (_QWORD *)(a3 + 88);
    v11 = *(_QWORD *)(a3 + 88);
    v9[12] = v11;
    v12 = v9 + 12;
    v13 = *(_QWORD *)(a3 + 96);
    v9[13] = v13;
    if (v13)
    {
      *(_QWORD *)(v11 + 16) = v12;
      *(_QWORD *)(a3 + 80) = v10;
      v14 = 1;
      *v10 = 0;
      *(_QWORD *)(a3 + 96) = 0;
    }
    else
    {
      v9[11] = v12;
      v14 = 1;
    }
  }
  v15 = *(_QWORD *)a1 + 112 * a1[4];
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v15;
  *(_BYTE *)(a4 + 16) = v14;
  return result;
}

_QWORD *sub_1C52EDF74(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = a1[2];
  v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[3] > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C52EE024((uint64_t)a1, v7);
  v9 = 0;
  sub_1C52EDDE4((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++a1[2];
  if (*a4 != -4096)
    --a1[3];
  return a4;
}

_QWORD *sub_1C52EE024(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(112 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C52EE0E8(a1, v4, v4 + 112 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 112 * v10;
    do
    {
      *result = -4096;
      result += 14;
      v11 -= 112;
    }
    while (v11);
  }
  return result;
}

void sub_1C52EE0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  _QWORD *v17;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 112 * v6;
    do
    {
      *v7 = -4096;
      v7 += 14;
      v8 -= 112;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    do
    {
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v17 = 0;
        sub_1C52EDDE4(a1, (_QWORD *)v4, &v17);
        v9 = v17;
        *v17 = *(_QWORD *)v4;
        v9[1] = v9 + 3;
        v9[2] = 0x400000000;
        if (*(_DWORD *)(v4 + 16))
          sub_1C52EE224((uint64_t)(v9 + 1), v4 + 8);
        v10 = (_QWORD *)(v4 + 88);
        v9[11] = *(_QWORD *)(v4 + 88);
        v11 = (_QWORD *)(v4 + 96);
        v12 = *(_QWORD *)(v4 + 96);
        v9[12] = v12;
        v13 = v9 + 12;
        v14 = *(_QWORD *)(v4 + 104);
        v9[13] = v14;
        if (v14)
        {
          v15 = 0;
          *(_QWORD *)(v12 + 16) = v13;
          *v10 = v11;
          *v11 = 0;
          *(_QWORD *)(v4 + 104) = 0;
        }
        else
        {
          v9[11] = v13;
          v15 = (_QWORD *)*v11;
        }
        ++*(_DWORD *)(a1 + 8);
        sub_1C61247C0((uint64_t)v10, v15);
        v16 = *(void **)(v4 + 8);
        if ((void *)(v4 + 24) != v16)
          free(v16);
      }
      v4 += 112;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1C52EE224(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v4 = a2 + 16;
    v3 = *(const void **)a2;
    if (*(_QWORD *)a2 != a2 + 16)
    {
      v11 = a2;
      v12 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v12);
        v3 = *(const void **)v11;
      }
      *(_QWORD *)a1 = v3;
      v13 = v11;
      v14 = *(_QWORD *)(v11 + 8);
      v6 = (_DWORD *)(v11 + 8);
      *(_QWORD *)(a1 + 8) = v14;
      *(_QWORD *)v13 = v4;
      *(_DWORD *)(v13 + 12) = 0;
      goto LABEL_10;
    }
    v6 = (_DWORD *)(a2 + 8);
    v5 = *(unsigned int *)(a2 + 8);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *(const void **)a2, 16 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v16 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 16);
      a2 = v16;
    }
    else if ((_DWORD)v7)
    {
      v15 = *(unsigned int *)(a1 + 8);
      v17 = a2;
      memmove(*(void **)a1, v3, 16 * v7);
      v8 = v15;
      a2 = v17;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 16 * v8), (const void *)(*(_QWORD *)a2 + 16 * v8), *(_QWORD *)a2 + 16 * v9 - (*(_QWORD *)a2 + 16 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

uint64_t sub_1C52EE358(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v3 = *(unsigned int *)(a2 + 8);
    v4 = *(unsigned int *)(a1 + 8);
    if (v4 >= v3)
    {
      if ((_DWORD)v3)
        memmove(*(void **)a1, *(const void **)a2, 16 * v3);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v3)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v9 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v3, 16);
      a2 = v9;
    }
    else if ((_DWORD)v4)
    {
      v8 = *(unsigned int *)(a1 + 8);
      v10 = a2;
      memmove(*(void **)a1, *(const void **)a2, 16 * v4);
      v5 = v8;
      a2 = v10;
LABEL_6:
      v6 = *(unsigned int *)(a2 + 8);
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 16 * v5), (const void *)(*(_QWORD *)a2 + 16 * v5), *(_QWORD *)a2 + 16 * v6 - (*(_QWORD *)a2 + 16 * v5));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v3;
      return a1;
    }
    v5 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_1C52EE438(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  *(_QWORD *)(a1 + 8) = 0;
  v3 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  v4 = a2 + 1;
  v5 = (_QWORD *)*a2;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    do
    {
      sub_1C621F54C((_QWORD **)a1, v3, v5 + 4, (_OWORD *)v5 + 2);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != v4);
  }
  return a1;
}

_QWORD *sub_1C52EE4CC(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t *a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;

  if (a1 + 1 == a2)
    goto LABEL_3;
  v5 = *a5;
  v6 = a2[4];
  if (*a5 < v6)
    goto LABEL_3;
  if (v6 < v5)
  {
LABEL_9:
    v10 = a2[1];
    if (v10)
    {
      v11 = (_QWORD *)a2[1];
      do
      {
        a4 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      v17 = a2;
      do
      {
        a4 = (_QWORD *)v17[2];
        v13 = *a4 == (_QWORD)v17;
        v17 = a4;
      }
      while (!v13);
    }
    if (a4 != a1 + 1)
    {
      v18 = a4[4];
      if (v5 >= v18 && (v18 < v5 || a5[1] >= a4[5]))
        return sub_1C4E296BC((uint64_t)a1, a3, a5);
    }
    if (v10)
    {
      *a3 = a4;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
    return a4;
  }
  v15 = a5[1];
  v16 = a2[5];
  if (v15 >= v16)
  {
    if (v16 >= v15)
    {
      *a3 = a2;
      *a4 = a2;
      return a4;
    }
    goto LABEL_9;
  }
LABEL_3:
  v7 = *a2;
  if ((_QWORD *)*a1 == a2)
  {
    v9 = a2;
  }
  else
  {
    if (v7)
    {
      v8 = (_QWORD *)*a2;
      do
      {
        v9 = v8;
        v8 = (_QWORD *)v8[1];
      }
      while (v8);
    }
    else
    {
      v12 = a2;
      do
      {
        v9 = (_QWORD *)v12[2];
        v13 = *v9 == (_QWORD)v12;
        v12 = v9;
      }
      while (v13);
    }
    v14 = v9[4];
    if (v14 >= *a5 && (*a5 < v14 || v9[5] >= a5[1]))
      return sub_1C4E296BC((uint64_t)a1, a3, a5);
  }
  if (v7)
  {
    *a3 = v9;
    return v9 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

uint64_t sub_1C52EE630@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;

  v12 = 0;
  result = sub_1C52EE728((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C52EE6B4(a1, v12, (uint64_t)a2, a3);
    v9 = (uint64_t *)result;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t *sub_1C52EE6B4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *result;
  uint64_t *v7;

  result = sub_1C52EE870(a1, a3, (_QWORD *)a3, a2);
  *result = *(_QWORD *)a3;
  *(_OWORD *)(result + 1) = *(_OWORD *)(a3 + 8);
  result[3] = (uint64_t)(result + 5);
  result[4] = 0x100000000;
  if (*(_DWORD *)(a4 + 8))
  {
    v7 = result;
    sub_1C52EE224((uint64_t)(result + 3), a4);
    return v7;
  }
  return result;
}

uint64_t sub_1C52EE728(uint64_t *a1, _QWORD *a2, uint64_t **a3)
{
  int v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t *v8;
  int v9;
  int i;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v15;
  uint64_t result;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v12 = 0;
    result = 0;
    goto LABEL_15;
  }
  v6 = *a1;
  v7 = sub_1C52EE818((uint64_t)a2);
  v8 = 0;
  v9 = v4 - 1;
  for (i = 1; ; ++i)
  {
    v11 = v7 & v9;
    v12 = (uint64_t *)(v6 + 56 * (v7 & v9));
    v13 = *v12;
    if (*a2 == *v12 && a2[1] == v12[1] && a2[2] == v12[2])
    {
      result = 1;
      goto LABEL_15;
    }
    if (v13 == -4096)
      break;
    if (v13 != -8192)
      goto LABEL_10;
    v15 = v12[1] == -2 && v12[2] == -2;
LABEL_11:
    if (v15 && v8 == 0)
      v8 = (uint64_t *)(v6 + 56 * v11);
    v7 = v11 + i;
  }
  if (v12[1] != -1 || v12[2] != -1)
  {
LABEL_10:
    v15 = 0;
    goto LABEL_11;
  }
  result = 0;
  if (v8)
    v12 = v8;
LABEL_15:
  *a3 = v12;
  return result;
}

uint64_t sub_1C52EE818(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = (*(_DWORD *)(a1 + 8) << 16) | (unint64_t)*(unsigned __int16 *)(a1 + 16);
  v2 = v1 + ~(v1 << 32) + ((unint64_t)((*(_DWORD *)a1 >> 4) ^ (*(_DWORD *)a1 >> 9)) << 32);
  v3 = (v2 ^ (v2 >> 22)) + ~((v2 ^ (v2 >> 22)) << 13);
  v4 = (9 * (v3 ^ (v3 >> 8))) ^ ((9 * (v3 ^ (v3 >> 8))) >> 15);
  return ((v4 + ~(v4 << 27)) >> 31) ^ ((_DWORD)v4 + ~((_DWORD)v4 << 27));
}

uint64_t *sub_1C52EE870(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  int v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_11:
    sub_1C52EE930(a1, v7);
    v10 = 0;
    sub_1C52EE728((uint64_t *)a1, a3, &v10);
    a4 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096 || (a4[1] == -1 ? (v8 = a4[2] == -1) : (v8 = 0), !v8))
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C52EE930(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  _QWORD *v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C52EEA00(a1, v4, v4 + 56 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = &result[7 * v10];
    do
    {
      *result = -4096;
      result[1] = -1;
      result[2] = -1;
      result += 7;
    }
    while (result != v11);
  }
  return result;
}

void sub_1C52EEA00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  __int128 v11;
  uint64_t v12;
  void *v13;
  uint64_t *v16;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = *(_QWORD *)a1 + 56 * v6;
    do
    {
      *v7 = -4096;
      v7[1] = -1;
      v7[2] = -1;
      v7 += 7;
    }
    while (v7 != (_QWORD *)v8);
  }
  if (a2 != a3)
  {
    do
    {
      if (*(_QWORD *)v4 == -4096)
      {
        if (*(_QWORD *)(v4 + 8) != -1 || *(_QWORD *)(v4 + 16) != -1)
        {
LABEL_7:
          v16 = 0;
          sub_1C52EE728((uint64_t *)a1, (_QWORD *)v4, &v16);
          v9 = v16;
          v10 = v16;
          *v16 = *(_QWORD *)v4;
          v11 = *(_OWORD *)(v4 + 8);
          v9[3] = (uint64_t)(v10 + 5);
          v12 = (uint64_t)(v9 + 3);
          *(_OWORD *)(v12 - 16) = v11;
          *(_QWORD *)(v12 + 8) = 0x100000000;
          if (*(_DWORD *)(v4 + 32))
            sub_1C52EE224(v12, v4 + 24);
          ++*(_DWORD *)(a1 + 8);
          v13 = *(void **)(v4 + 24);
          if ((void *)(v4 + 40) != v13)
            free(v13);
        }
      }
      else
      {
        if (*(_QWORD *)v4 != -8192)
          goto LABEL_7;
        if (*(_QWORD *)(v4 + 8) != -2 || *(_QWORD *)(v4 + 16) != -2)
          goto LABEL_7;
      }
      v4 += 56;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1C52EEB38(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  char *v8;
  unint64_t *v9;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 200))
  {
    sub_1C621F5F8(a1 + 8);
    *(_DWORD *)(a1 + 200) = 0;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
  }
  *(_DWORD *)(a1 + 204) = 0;
  v15 = a2 + 8;
  v16 = v18;
  v17 = 0x400000000;
  sub_1C52EEFF0(&v15);
  v11 = a2 + 8;
  v12 = v14;
  v13 = 0x400000000;
  sub_1C4A078FC(&v11, *(unsigned int *)(a2 + 204));
  while ((_DWORD)v17)
  {
    v4 = v16;
    if (*((_DWORD *)v16 + 3) >= *((_DWORD *)v16 + 2))
      break;
    v5 = (char *)v16 + 16 * v17;
    v6 = *((unsigned int *)v5 - 1);
    v7 = v12;
    v8 = (char *)v12 + 16 * v13;
    if (v6 == *((_DWORD *)v8 - 1) && *((_QWORD *)v5 - 2) == *((_QWORD *)v8 - 2))
      goto LABEL_13;
LABEL_12:
    v9 = (unint64_t *)(v4[2 * v17 - 2] + 16 * v6);
    sub_1C52EC484(a1 + 8, *v9, v9[1]);
    sub_1C52EEF04((uint64_t)&v15);
  }
  v7 = v12;
  if ((_DWORD)v13 && *((_DWORD *)v12 + 3) < *((_DWORD *)v12 + 2))
  {
    v4 = v16;
    v6 = *((unsigned int *)v16 + 4 * v17 - 1);
    goto LABEL_12;
  }
LABEL_13:
  if (v7 != v14)
    free(v7);
  if (v16 != v18)
    free(v16);
  return a1;
}

uint64_t sub_1C52EECF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(unsigned int *)(a1 + 88);
  if ((unint64_t)(*(_QWORD *)(a1 + 96) + v2) < *(_QWORD *)(a1 + 104))
  {
    *(_DWORD *)(a1 + 88) = v2 + 1;
  }
  else
  {
    v3 = sub_1C52EEF04(a1);
    sub_1C52EF790(v3);
  }
  return a1;
}

void sub_1C52EED40(uint64_t a1, uint64_t a2)
{
  _BOOL4 v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _BYTE v18[64];
  void *v19;
  uint64_t v20;
  _QWORD v21[18];

  v21[16] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x800000000;
  v3 = sub_1C52EF070(a1, a2, (uint64_t)&v19);
  v4 = (unint64_t *)v19;
  if (v3 && (_DWORD)v20)
  {
    v5 = (unint64_t *)((char *)v19 + 16 * v20);
    do
    {
      v6 = *v4;
      v7 = v4[1];
      v15 = a1 + 8;
      v16 = v18;
      v17 = 0x400000000;
      if (*(_DWORD *)(a1 + 200))
      {
        sub_1C52EC7A0((uint64_t)&v15, v6);
      }
      else
      {
        v8 = *(unsigned int *)(a1 + 204);
        if ((_DWORD)v8)
        {
          v9 = 0;
          v13 = (unint64_t *)(a1 + 16);
          while (1)
          {
            v14 = *v13;
            v13 += 2;
            if (v14 >= v6)
              break;
            if (v8 == ++v9)
            {
              v9 = *(unsigned int *)(a1 + 204);
              break;
            }
          }
        }
        else
        {
          v9 = 0;
        }
        sub_1C4A078FC(&v15, v9);
      }
      v10 = (unint64_t *)(*((_QWORD *)v16 + 2 * v17 - 2)
                               + 16 * *((unsigned int *)v16 + 4 * v17 - 1));
      v12 = *v10;
      v11 = v10[1];
      sub_1C52EF7E0((uint64_t)&v15);
      if (v12 < v6)
        sub_1C52EC484(a1 + 8, v12, v6 - 1);
      if (v7 < v11)
        sub_1C52EC484(a1 + 8, v7 + 1, v11);
      if (v16 != v18)
        free(v16);
      v4 += 2;
    }
    while (v4 != v5);
    v4 = (unint64_t *)v19;
  }
  if (v4 != v21)
    free(v4);
}

uint64_t sub_1C52EEF04(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;

  v1 = *(_QWORD *)(result + 8);
  v2 = v1 + 16 * *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(v2 - 4) + 1;
  *(_DWORD *)(v2 - 4) = v3;
  if (v3 == *(_DWORD *)(v1 + 16 * *(unsigned int *)(result + 16) - 8))
  {
    v4 = *(unsigned int *)(*(_QWORD *)result + 192);
    if ((_DWORD)v4)
    {
      v5 = 1;
      v6 = v4 + 1;
      v7 = (_DWORD *)(v1 + 16 * v4 - 8);
      while (1)
      {
        v8 = v7;
        if (v6 == 2)
          break;
        v10 = *v7;
        v9 = v7[1];
        v11 = *v7 - 1;
        --v6;
        v7 -= 4;
        if (v9 != v11)
        {
          v5 = v6;
          goto LABEL_8;
        }
      }
      v10 = *(_DWORD *)(v1 + 8);
      v9 = *(_DWORD *)(v1 + 12);
LABEL_8:
      v12 = v9 + 1;
      v8[1] = v12;
      if (v12 != v10)
      {
        v13 = *(_QWORD *)(*((_QWORD *)v8 - 1) + 8 * v12);
        if ((_DWORD)v4 != v5)
        {
          do
          {
            v15 = *(_QWORD *)(result + 8) + 16 * v5;
            *(_QWORD *)v15 = v13 & 0xFFFFFFFFFFFFFFC0;
            *(_DWORD *)(v15 + 8) = (v13 & 0x3F) + 1;
            *(_DWORD *)(v15 + 12) = 0;
            ++v5;
            v13 = *(_QWORD *)(v13 & 0xFFFFFFFFFFFFFFC0);
          }
          while ((_DWORD)v4 != v5);
          v1 = *(_QWORD *)(result + 8);
        }
        v14 = (unint64_t *)(v1 + 16 * v4);
        *v14 = v13 & 0xFFFFFFFFFFFFFFC0;
        v14[1] = (v13 & 0x3F) + 1;
      }
    }
  }
  return result;
}

_DWORD *sub_1C52EEFF0(_DWORD *a1)
{
  _DWORD *result;
  unsigned int v3;
  unsigned int i;
  uint64_t v5;

  result = sub_1C4A078FC(a1, 0);
  v3 = *(_DWORD *)(*(_QWORD *)a1 + 192);
  if (v3)
  {
    for (i = a1[4] - 1; i < v3; i = a1[4] - 1)
    {
      v5 = *((_QWORD *)a1 + 1) + 16 * i;
      result = sub_1C4A079DC(a1 + 2, *(_QWORD *)(*(_QWORD *)v5 + 8 * *(unsigned int *)(v5 + 12)), 0);
    }
  }
  return result;
}

BOOL sub_1C52EF070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  char *v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _BYTE v41[64];
  unint64_t *v42;
  void *v43;
  uint64_t v44;
  _QWORD v45[9];

  v45[8] = *MEMORY[0x1E0C80C00];
  v5 = (unint64_t *)(a2 + 8);
  if (*(_DWORD *)(a2 + 204))
  {
    v28 = *v5;
    v38 = a1 + 8;
    v39 = v41;
    v40 = 0x400000000;
    if (*(_DWORD *)(a1 + 200))
    {
      sub_1C52EC7A0((uint64_t)&v38, v28);
      goto LABEL_4;
    }
    v29 = *(unsigned int *)(a1 + 204);
    if ((_DWORD)v29)
    {
      v30 = 0;
      v34 = (unint64_t *)(a1 + 16);
      while (1)
      {
        v35 = *v34;
        v34 += 2;
        if (v35 >= v28)
          break;
        if (v29 == ++v30)
        {
          v30 = *(unsigned int *)(a1 + 204);
          break;
        }
      }
    }
    else
    {
      v30 = 0;
    }
    v6 = v30;
  }
  else
  {
    v38 = a1 + 8;
    v39 = v41;
    v40 = 0x400000000;
    v6 = *(unsigned int *)(a1 + 204);
  }
  sub_1C4A078FC(&v38, v6);
LABEL_4:
  if (!(_DWORD)v40 || *((_DWORD *)v39 + 3) >= *((_DWORD *)v39 + 2))
  {
    v42 = v5;
    v43 = v45;
    v44 = 0x400000000;
    v7 = *(unsigned int *)(a2 + 204);
LABEL_7:
    sub_1C4A078FC(&v42, v7);
    goto LABEL_8;
  }
  v31 = *(_QWORD *)(*((_QWORD *)v39 + 2 * v40 - 2)
                  + 16 * *((unsigned int *)v39 + 4 * v40 - 1));
  v42 = v5;
  v43 = v45;
  v44 = 0x400000000;
  if (!*(_DWORD *)(a2 + 200))
  {
    v32 = *(unsigned int *)(a2 + 204);
    if ((_DWORD)v32)
    {
      v33 = 0;
      v36 = (unint64_t *)(a2 + 16);
      while (1)
      {
        v37 = *v36;
        v36 += 2;
        if (v37 >= v31)
          break;
        if (v32 == ++v33)
        {
          v33 = *(unsigned int *)(a2 + 204);
          break;
        }
      }
    }
    else
    {
      v33 = 0;
    }
    v7 = v33;
    goto LABEL_7;
  }
  sub_1C52EC7A0((uint64_t)&v42, v31);
LABEL_8:
  sub_1C52EF38C(&v38);
  for (i = v40; (_DWORD)v40; i = v40)
  {
    if (*((_DWORD *)v39 + 3) >= *((_DWORD *)v39 + 2) || (_DWORD)v44 == 0)
      break;
    v10 = v43;
    if (*((_DWORD *)v43 + 3) >= *((_DWORD *)v43 + 2))
      break;
    v11 = (char *)v39 + 16 * i;
    v12 = *((_QWORD *)v11 - 2);
    v13 = *((unsigned int *)v11 - 1);
    v14 = (unint64_t *)(v12 + 16 * v13);
    v15 = (unint64_t *)(*((_QWORD *)v43 + 2 * v44 - 2)
                             + 16 * *((unsigned int *)v43 + 4 * v44 - 1));
    v16 = *v14;
    v17 = v14[1];
    v19 = *v15;
    v18 = v15[1];
    if (v16 > v19)
      v19 = v16;
    v20 = v17 >= v18 ? v18 : v17;
    v21 = *(unsigned int *)(a3 + 8);
    if (v21 >= *(_DWORD *)(a3 + 12))
    {
      v24 = v19;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v21 + 1, 16);
      v25 = (unint64_t *)(*(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 8));
      *v25 = v24;
      v25[1] = v20;
      LODWORD(v21) = *(_DWORD *)(a3 + 8);
      v10 = v43;
      v26 = (char *)v39 + 16 * v40;
      v12 = *((_QWORD *)v26 - 2);
      v13 = *((unsigned int *)v26 - 1);
    }
    else
    {
      v22 = (unint64_t *)(*(_QWORD *)a3 + 16 * v21);
      *v22 = v19;
      v22[1] = v20;
    }
    *(_DWORD *)(a3 + 8) = v21 + 1;
    v23 = *(_QWORD *)(v10[2 * v44 - 2] + 16 * HIDWORD(v10[2 * v44 - 1]) + 8) >= *(_QWORD *)(v12 + 16 * v13 + 8)
        ? &v38
        : (uint64_t *)&v42;
    sub_1C52EEF04((uint64_t)v23);
    sub_1C52EF38C(&v38);
  }
  if (v43 != v45)
    free(v43);
  if (v39 != v41)
    free(v39);
  return *(_DWORD *)(a3 + 8) != 0;
}

uint64_t *sub_1C52EF38C(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *((unsigned int *)result + 4);
  if ((_DWORD)v1)
  {
    v2 = result;
    v3 = result[1];
    if (*(_DWORD *)(v3 + 12) < *(_DWORD *)(v3 + 8))
    {
      v4 = *((unsigned int *)result + 26);
      if ((_DWORD)v4)
      {
        v5 = result[12];
        if (*(_DWORD *)(v5 + 12) < *(_DWORD *)(v5 + 8))
        {
          v6 = v3 + 16 * v1;
          v7 = *(_QWORD *)(v6 - 16);
          v8 = *(unsigned int *)(v6 - 4);
          v9 = v5 + 16 * v4;
          v10 = *(_QWORD *)(v9 - 16);
          v11 = *(unsigned int *)(v9 - 4);
          v12 = *(_QWORD *)(v10 + 16 * v11);
          if (*(_QWORD *)(v7 + 16 * v8 + 8) < v12)
          {
            result = sub_1C52EF53C(result, v12);
            v21 = *((unsigned int *)v2 + 4);
            if ((_DWORD)v21)
            {
              v22 = v2[1];
              if (*(_DWORD *)(v22 + 12) < *(_DWORD *)(v22 + 8))
              {
                v23 = v2[12] + 16 * *((unsigned int *)v2 + 26);
                v24 = *(_QWORD *)(v23 - 16);
                v25 = *(unsigned int *)(v23 - 4);
                if (*(_QWORD *)(v24 + 16 * v25 + 8) < *(_QWORD *)(*(_QWORD *)(v22 + 16 * v21 - 16)
                                                                 + 16 * *(unsigned int *)(v22 + 16 * v21 - 4)))
                {
                  v17 = *(_QWORD *)(v24 + 16 * v25);
                  goto LABEL_11;
                }
              }
            }
          }
          else
          {
            v13 = *(_QWORD *)(v7 + 16 * v8);
            if (*(_QWORD *)(v10 + 16 * v11 + 8) < v13)
            {
              while (1)
              {
                result = sub_1C52EF53C(v2 + 11, v13);
                v14 = *((unsigned int *)v2 + 26);
                if (!(_DWORD)v14)
                  break;
                v15 = v2[12];
                if (*(_DWORD *)(v15 + 12) >= *(_DWORD *)(v15 + 8))
                  break;
                v16 = v2[1] + 16 * *((unsigned int *)v2 + 4);
                v17 = *(_QWORD *)(*(_QWORD *)(v15 + 16 * v14 - 16) + 16 * *(unsigned int *)(v15 + 16 * v14 - 4));
                if (*(_QWORD *)(*(_QWORD *)(v16 - 16) + 16 * *(unsigned int *)(v16 - 4) + 8) >= v17)
                  break;
LABEL_11:
                result = sub_1C52EF53C(v2, v17);
                v18 = *((unsigned int *)v2 + 4);
                if ((_DWORD)v18)
                {
                  v19 = v2[1];
                  if (*(_DWORD *)(v19 + 12) < *(_DWORD *)(v19 + 8))
                  {
                    v20 = v2[12] + 16 * *((unsigned int *)v2 + 26);
                    v13 = *(_QWORD *)(*(_QWORD *)(v19 + 16 * v18 - 16) + 16 * *(unsigned int *)(v19 + 16 * v18 - 4));
                    if (*(_QWORD *)(*(_QWORD *)(v20 - 16) + 16 * *(unsigned int *)(v20 - 4) + 8) < v13)
                      continue;
                  }
                }
                return result;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C52EF53C(uint64_t *result, unint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;

  v2 = *((unsigned int *)result + 4);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = result[1];
    if (*(_DWORD *)(v4 + 12) < *(_DWORD *)(v4 + 8))
    {
      v6 = *result;
      v7 = v4 + 16 * v2;
      if (!*(_DWORD *)(*result + 192))
      {
        v8 = *(_DWORD *)(v7 - 4);
        v9 = *(_DWORD *)(v6 + 196);
        if (v8 != v9)
        {
          while (*(_QWORD *)(v6 + 16 * v8 + 8) < a2)
          {
            if (v9 == ++v8)
            {
              v8 = *(_DWORD *)(v6 + 196);
              goto LABEL_8;
            }
          }
        }
        goto LABEL_8;
      }
      v10 = *(_QWORD *)(v7 - 16);
      if (*(_QWORD *)(v10 + 16 * (*(_DWORD *)(v7 - 8) - 1) + 8) >= a2)
      {
        v21 = *(_DWORD *)(v7 - 4);
        do
          v22 = *(_QWORD *)(v10 + 16 * v21++ + 8);
        while (v22 < a2);
        v8 = v21 - 1;
LABEL_8:
        *(_DWORD *)(v7 - 4) = v8;
        return result;
      }
      *((_DWORD *)result + 4) = v2 - 1;
      v11 = v2 - 2;
      if ((_DWORD)v2 == 2)
      {
        v23 = *(unsigned int *)(v4 + 12);
      }
      else
      {
        v12 = (v2 - 3);
        if ((_DWORD)v12)
        {
          if (*(_QWORD *)(*(_QWORD *)(v4 + 16 * v12)
                         + 8 * *(unsigned int *)(v4 + 16 * v12 + 12)
                         + 96) >= a2)
          {
LABEL_17:
            v15 = (uint64_t *)(v4 + 16 * v11);
            v16 = *v15;
            v19 = *((_DWORD *)v15 + 3);
            v17 = (_DWORD *)v15 + 3;
            v18 = v19;
            do
              v20 = *(_QWORD *)(v16 + 8 * v18++ + 96);
            while (v20 < a2);
            *v17 = v18 - 1;
            return (uint64_t *)sub_1C52EC82C(v3, a2);
          }
          v13 = 16 * v12;
          while (1)
          {
            *((_DWORD *)result + 4) = v11;
            if (v13 == 16)
              break;
            v14 = *(_QWORD *)(*(_QWORD *)(v4 + v13 - 16) + 8 * *(unsigned int *)(v4 + v13 - 4) + 96);
            --v11;
            v13 -= 16;
            if (v14 >= a2)
              goto LABEL_17;
          }
        }
        v23 = *(unsigned int *)(v4 + 12);
        if (*(_QWORD *)(v6 + 8 * v23 + 96) >= a2)
        {
          v25 = *(_DWORD *)(v4 + 28);
          do
            v26 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8 * v25++ + 96);
          while (v26 < a2);
          *(_DWORD *)(v4 + 28) = v25 - 1;
          return (uint64_t *)sub_1C52EC82C(v3, a2);
        }
      }
      v24 = *(unsigned int *)(v6 + 196);
      if ((_DWORD)v23 != (_DWORD)v24)
      {
        v27 = v6 + 8;
        while (*(_QWORD *)(v27 + 8 * v23 + 88) < a2)
        {
          v23 = (v23 + 1);
          if ((_DWORD)v24 == (_DWORD)v23)
          {
            v23 = v24;
            break;
          }
        }
      }
      result = (uint64_t *)sub_1C4A078FC(result, v23);
      if (*((_DWORD *)v3 + 4) && *(_DWORD *)(v3[1] + 12) < *(_DWORD *)(v3[1] + 8))
        return (uint64_t *)sub_1C52EC82C(v3, a2);
    }
  }
  return result;
}

uint64_t sub_1C52EF734(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  v3 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0x400000000;
  if (*(_DWORD *)(a2 + 16))
    sub_1C52EE358(v3, a2 + 8);
  *(_DWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  sub_1C52EF790(a1);
  return a1;
}

uint64_t sub_1C52EF790(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1 && (v2 = *(_QWORD *)(result + 8), *(_DWORD *)(v2 + 12) < *(_DWORD *)(v2 + 8)))
  {
    *(_DWORD *)(result + 88) = 0;
    v3 = (_QWORD *)(*(_QWORD *)(v2 + 16 * v1 - 16) + 16 * *(unsigned int *)(v2 + 16 * v1 - 4));
    *(_QWORD *)(result + 96) = *v3;
    *(_QWORD *)(result + 104) = v3[1];
  }
  else
  {
    *(_DWORD *)(result + 88) = -1;
    *(_QWORD *)(result + 96) = 0;
    *(_QWORD *)(result + 104) = 0;
  }
  return result;
}

uint64_t sub_1C52EF7E0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)result;
  if (*(_DWORD *)(*(_QWORD *)result + 192))
    return sub_1C52ED1D4(result, 1);
  v2 = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(v2 + 16 * *(unsigned int *)(result + 16) - 4);
  v4 = *(_DWORD *)(v1 + 196);
  if (v3 + 1 != v4)
  {
    do
    {
      *(_OWORD *)(v1 + 16 * v3) = *(_OWORD *)(v1 + 16 * (v3 + 1));
      *(_BYTE *)(v1 + 176 + v3) = *(_BYTE *)(v1 + 176 + v3 + 1);
      ++v3;
    }
    while (v4 - 1 != v3);
    v4 = *(_DWORD *)(v1 + 196);
    v2 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  *(_DWORD *)(v1 + 196) = v5;
  *(_DWORD *)(v2 + 8) = v5;
  return result;
}

BOOL sub_1C52EF854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  _BYTE *v6;
  char *v7;
  char *v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  _BOOL4 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _BYTE *v20;
  char *v21;
  _BOOL8 v22;
  char *v23;
  _BYTE *v24;
  char *v25;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _BYTE v30[64];
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _BYTE v34[64];
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _BYTE v38[64];
  uint64_t v39;
  _DWORD *v40;
  uint64_t v41;
  _QWORD v42[9];

  v42[8] = *MEMORY[0x1E0C80C00];
  v4 = a1 + 8;
  v39 = a1 + 8;
  v40 = v42;
  v41 = 0x400000000;
  sub_1C52EEFF0(&v39);
  v35 = a2 + 8;
  v36 = v38;
  v37 = 0x400000000;
  sub_1C52EEFF0(&v35);
  while (1)
  {
    v31 = v4;
    v32 = v34;
    v33 = 0x400000000;
    sub_1C4A078FC(&v31, *(unsigned int *)(a1 + 204));
    if ((_DWORD)v41 && v40[3] < v40[2])
    {
      v5 = (char *)&v40[4 * v41];
      v6 = v32;
      v7 = (char *)v32 + 16 * v33;
      if (*((_DWORD *)v5 - 1) == *((_DWORD *)v7 - 1) && *((_QWORD *)v5 - 2) == *((_QWORD *)v7 - 2))
        goto LABEL_14;
    }
    else
    {
      v6 = v32;
      if (!(_DWORD)v33 || *((_DWORD *)v32 + 3) >= *((_DWORD *)v32 + 2))
      {
LABEL_14:
        v12 = 0;
        goto LABEL_24;
      }
    }
    v27 = a2 + 8;
    v28 = v30;
    v29 = 0x400000000;
    sub_1C4A078FC(&v27, *(unsigned int *)(a2 + 204));
    if ((_DWORD)v37 && (v8 = (char *)v36, *((_DWORD *)v36 + 3) < *((_DWORD *)v36 + 2)))
    {
      v9 = (char *)v36 + 16 * v37;
      v10 = v28;
      v11 = (char *)v28 + 16 * v29;
      if (*((_DWORD *)v9 - 1) == *((_DWORD *)v11 - 1) && *((_QWORD *)v9 - 2) == *((_QWORD *)v11 - 2))
        goto LABEL_20;
    }
    else
    {
      v10 = v28;
      if (!(_DWORD)v29 || *((_DWORD *)v28 + 3) >= *((_DWORD *)v28 + 2))
      {
LABEL_20:
        v12 = 0;
        goto LABEL_21;
      }
      v8 = (char *)v36;
    }
    v13 = (char *)&v40[4 * v41];
    v14 = *((_QWORD *)v13 - 2);
    v15 = *((unsigned int *)v13 - 1);
    v16 = &v8[16 * v37];
    v17 = *((_QWORD *)v16 - 2);
    v18 = *((unsigned int *)v16 - 1);
    if (*(_QWORD *)(v14 + 16 * v15) != *(_QWORD *)(v17 + 16 * v18))
      goto LABEL_20;
    v12 = *(_QWORD *)(v14 + 16 * v15 + 8) == *(_QWORD *)(v17 + 16 * v18 + 8);
LABEL_21:
    if (v10 != v30)
      free(v10);
    v6 = v32;
LABEL_24:
    if (v6 != v34)
      free(v6);
    if (!v12)
      break;
    sub_1C52EEF04((uint64_t)&v39);
    sub_1C52EEF04((uint64_t)&v35);
  }
  v31 = v4;
  v32 = v34;
  v33 = 0x400000000;
  sub_1C4A078FC(&v31, *(unsigned int *)(a1 + 204));
  if ((_DWORD)v41 && v40[3] < v40[2])
  {
    v19 = (char *)&v40[4 * v41];
    v20 = v32;
    v21 = (char *)v32 + 16 * v33;
    if (*((_DWORD *)v19 - 1) == *((_DWORD *)v21 - 1) && *((_QWORD *)v19 - 2) == *((_QWORD *)v21 - 2))
      goto LABEL_36;
LABEL_35:
    v22 = 0;
  }
  else
  {
    if ((_DWORD)v33)
    {
      v20 = v32;
      if (*((_DWORD *)v32 + 3) < *((_DWORD *)v32 + 2))
        goto LABEL_35;
    }
LABEL_36:
    v27 = a2 + 8;
    v28 = v30;
    v29 = 0x400000000;
    sub_1C4A078FC(&v27, *(unsigned int *)(a2 + 204));
    if ((_DWORD)v37 && *((_DWORD *)v36 + 3) < *((_DWORD *)v36 + 2))
    {
      v23 = (char *)v36 + 16 * v37;
      v24 = v28;
      v25 = (char *)v28 + 16 * v29;
      v22 = *((_DWORD *)v23 - 1) == *((_DWORD *)v25 - 1) && *((_QWORD *)v23 - 2) == *((_QWORD *)v25 - 2);
    }
    else
    {
      v24 = v28;
      if ((_DWORD)v29)
        v22 = *((_DWORD *)v28 + 3) >= *((_DWORD *)v28 + 2);
      else
        v22 = 1;
    }
    if (v24 != v30)
      free(v24);
    v20 = v32;
  }
  if (v20 != v34)
    free(v20);
  if (v36 != v38)
    free(v36);
  if (v40 != (_DWORD *)v42)
    free(v40);
  return v22;
}

void sub_1C52EFC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int *v17;
  unsigned int *v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  char *v22;
  char *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  void *v34;
  unsigned int v35;
  _QWORD v36[3];
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43[8];
  void *v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  _QWORD v52[18];

  v52[16] = *MEMORY[0x1E0C80C00];
  v50 = (char *)v52;
  v51 = 0x2000000000;
  v7 = *(_QWORD *)(a2 + 160);
  if (v7)
    v8 = *(_QWORD **)(a2 + 144);
  else
    v8 = *(_QWORD **)a2;
  if (v7)
    v9 = a2 + 152;
  else
    v9 = *(_QWORD *)a2 + 4 * *(unsigned int *)(a2 + 8);
  if (v8 == (_QWORD *)v9)
  {
    v16 = (unsigned int *)v52;
  }
  else
  {
    v10 = 0;
    v11 = v8;
    do
    {
      v12 = v10;
      if (v7)
      {
        v13 = (_QWORD *)v11[1];
        if (v13)
        {
          do
          {
            v14 = v13;
            v13 = (_QWORD *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            v14 = (_QWORD *)v11[2];
            v30 = *v14 == (_QWORD)v11;
            v11 = v14;
          }
          while (!v30);
        }
      }
      else
      {
        v14 = (_QWORD *)((char *)v11 + 4);
      }
      ++v10;
      v11 = v14;
    }
    while (v14 != (_QWORD *)v9);
    if (v12 < 0x20)
    {
      v15 = 0;
      v16 = (unsigned int *)v52;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v50, (uint64_t)v52, v12 + 1, 4);
      v15 = v51;
      v16 = (unsigned int *)v50;
    }
    v17 = &v16[v15];
    do
    {
      v18 = (unsigned int *)v8 + 7;
      if (!v7)
        v18 = (unsigned int *)v8;
      *v17 = *v18;
      if (v7)
      {
        v19 = (_QWORD *)v8[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (_QWORD *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (_QWORD *)v8[2];
            v30 = *v20 == (_QWORD)v8;
            v8 = v20;
          }
          while (!v30);
        }
      }
      else
      {
        v20 = (_QWORD *)((char *)v8 + 4);
      }
      ++v17;
      v8 = v20;
    }
    while (v20 != (_QWORD *)v9);
    v21 = (v51 + v10);
    LODWORD(v51) = v21;
    if (v21 >= 2)
    {
      qsort(v16, v21, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1C5257728);
      v16 = (unsigned int *)v50;
    }
  }
  sub_1C52F004C((uint64_t)v43, a3, (unint64_t)*v16 << 32);
  v36[2] = 0;
  v37 = v39;
  v38 = 0x400000000;
  v40 = -1;
  v41 = 0;
  v42 = 0;
  if (!(_DWORD)v51)
    goto LABEL_71;
  v22 = v50;
  v23 = &v50[4 * v51];
  v24 = v47;
LABEL_38:
  while (2)
  {
    v25 = *(unsigned int *)v22;
    if (v24 != -1)
    {
      v31 = v25 << 32;
      if (v49 < v25 << 32)
      {
        while (1)
        {
          sub_1C52EEF04((uint64_t)v43);
          if (!v45 || *((_DWORD *)v44 + 3) >= *((_DWORD *)v44 + 2))
            break;
          v24 = 0;
          v47 = 0;
          v33 = (unint64_t *)(*((_QWORD *)v44 + 2 * v45 - 2) + 16 * *((unsigned int *)v44 + 4 * v45 - 1));
          v32 = *v33;
          v48 = *v33;
          v49 = v33[1];
          if (v49 >= v31)
            goto LABEL_62;
        }
        v24 = -1;
        v47 = -1;
        v48 = 0;
        v49 = 0;
      }
      else
      {
        v32 = v48;
LABEL_62:
        if (v32 <= v31)
        {
          v24 = -(int)v32;
          v47 = -(int)v32;
        }
      }
    }
    v26 = (unint64_t)(v25 + 1) << 32;
    while (v24 == v40 && v48 == v41)
    {
      v27 = v48 + v24;
      if (v49 == v42 || v27 >= v26)
      {
        v22 += 4;
        v30 = v49 == v42 || v22 == v23;
        if (v30)
          goto LABEL_69;
        goto LABEL_38;
      }
LABEL_49:
      v29 = sub_1C52EA2D8(a4, __ROR8__(v27, 32));
      sub_1C52EFFC4(&v34, a4, v29);
      sub_1C4879438(a1, (unsigned int *)v34 + 2 * v35 - 1);
      if (v34 != v36)
        free(v34);
      sub_1C52EECF4((uint64_t)v43);
      v24 = v47;
    }
    v27 = v48 + v24;
    if (v27 < v26)
      goto LABEL_49;
    v22 += 4;
    if (v22 != v23)
      continue;
    break;
  }
LABEL_69:
  if (v37 != v39)
    free(v37);
LABEL_71:
  if (v44 != &v46)
    free(v44);
  if (v50 != (char *)v52)
    free(v50);
}

_QWORD *sub_1C52EFFC4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _BOOL4 v8;
  _QWORD *v9;

  v4 = (_QWORD *)(a2 + 8);
  v5 = *(_QWORD **)(a2 + 8);
  if (!v5)
    goto LABEL_8;
  v7 = (_QWORD *)(a2 + 8);
  do
  {
    v8 = sub_1C52EBC4C((uint64_t)(v5 + 4), a3);
    v9 = v5 + 1;
    if (!v8)
    {
      v9 = v5;
      v7 = v5;
    }
    v5 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v7 == v4 || sub_1C52EBC4C(a3, (uint64_t)(v7 + 4)))
LABEL_8:
    v7 = v4;
  return sub_1C52EB6D8(a1, (uint64_t)(v7 + 52));
}

void sub_1C52F004C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _BYTE *v10;
  char *v11;
  _BOOL4 v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  void *v17[2];
  _BYTE v18[64];
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _BYTE v22[64];
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD v26[9];

  v26[8] = *MEMORY[0x1E0C80C00];
  v6 = a2 + 8;
  v23 = a2 + 8;
  v24 = v26;
  v25 = 0x400000000;
  if (*(_DWORD *)(a2 + 200))
  {
    sub_1C52EC7A0((uint64_t)&v23, a3);
  }
  else
  {
    v7 = *(unsigned int *)(a2 + 204);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v14 = (unint64_t *)(a2 + 16);
      while (1)
      {
        v15 = *v14;
        v14 += 2;
        if (v15 >= a3)
          break;
        if (v7 == ++v8)
        {
          v8 = *(unsigned int *)(a2 + 204);
          break;
        }
      }
    }
    else
    {
      v8 = 0;
    }
    sub_1C4A078FC(&v23, v8);
  }
  v19 = v6;
  v20 = v22;
  v21 = 0x400000000;
  sub_1C4A078FC(&v19, *(unsigned int *)(a2 + 204));
  if ((_DWORD)v25 && *((_DWORD *)v24 + 3) < *((_DWORD *)v24 + 2))
  {
    v9 = (char *)v24 + 16 * v25;
    v10 = v20;
    v11 = (char *)v20 + 16 * v21;
    v12 = *((_DWORD *)v9 - 1) == *((_DWORD *)v11 - 1) && *((_QWORD *)v9 - 2) == *((_QWORD *)v11 - 2);
  }
  else
  {
    v10 = v20;
    if ((_DWORD)v21)
      v12 = *((_DWORD *)v20 + 3) >= *((_DWORD *)v20 + 2);
    else
      v12 = 1;
  }
  if (v10 != v22)
    free(v10);
  if (v12)
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = a1 + 24;
    *(_QWORD *)(a1 + 16) = 0x400000000;
    *(_DWORD *)(a1 + 88) = -1;
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
  }
  else
  {
    v16 = v23;
    v17[0] = v18;
    v17[1] = (void *)0x400000000;
    if ((_DWORD)v25)
      sub_1C52EE358((uint64_t)v17, (uint64_t)&v24);
    sub_1C52EF734(a1, (uint64_t)&v16);
    if (v17[0] != v18)
      free(v17[0]);
    v13 = *(_QWORD *)(a1 + 96);
    if (a3 >= v13)
      *(_DWORD *)(a1 + 88) = a3 - v13;
  }
  if (v24 != v26)
    free(v24);
}

uint64_t sub_1C52F0258(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  if (*(_DWORD *)(result + 88) != -1)
  {
    v3 = result;
    while (*(_QWORD *)(v3 + 104) < a2)
    {
      v4 = sub_1C52EEF04(v3);
      result = sub_1C52EF790(v4);
      if (*(_DWORD *)(v3 + 88) == -1)
        return result;
    }
    v5 = *(_QWORD *)(v3 + 96);
    if (a2 >= v5)
      *(_DWORD *)(v3 + 88) = a2 - v5;
  }
  return result;
}

uint64_t sub_1C52F02C4(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[9];

  v2 = a2;
  v16[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(uint64_t **)(a1 + 8);
    v8 = *(unsigned int *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(16 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C52F0460(a1, v7, &v7[2 * v8]);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = v16;
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v10 = v12;
      v13 = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v11 + 16) = 0;
      v10[1] = v13;
      v10 += 2;
      v14 = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v11 + 16) = 0;
      if (v14)
        sub_1C52F0538(v14);
    }
    v9 += 16;
  }
  while (v9 != 64);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(16 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  return sub_1C52F0460(a1, v16, v10);
}

uint64_t sub_1C52F0460(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_8;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_8:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = 0;
      sub_1C4E45B90((uint64_t)v5, v10, &v13);
      v11 = v13;
      *v13 = *a2;
      v12 = a2[1];
      a2[1] = 0;
      v11[1] = v12;
      *v5 += 2;
      result = a2[1];
      a2[1] = 0;
      if (result)
        sub_1C52F0538(result);
    }
    a2 += 2;
  }
  return result;
}

void sub_1C52F0538(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 200))
  {
    sub_1C621F5F8(a1 + 8);
    *(_DWORD *)(a1 + 200) = 0;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
  }
  *(_DWORD *)(a1 + 204) = 0;
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C52F05B8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  unsigned int v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  char v28;
  int v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36[3];
  char v37;
  _BYTE v38[7];
  uint64_t v39;
  uint64_t *v40;
  _OWORD v41[2];
  _BYTE v42[28];
  void *v43;
  uint64_t v44;
  _BYTE v45[256];
  void *v46;
  uint64_t v47;
  _BYTE v48[32];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = *(_OWORD *)(a2 + 16);
  v41[0] = *(_OWORD *)a2;
  v41[1] = v4;
  *(_OWORD *)v42 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v42[12] = *(_OWORD *)(a2 + 44);
  v43 = v45;
  v44 = 0x800000000;
  if (v41 != (_OWORD *)a2)
  {
    v5 = *(_DWORD *)(a2 + 72);
    if (v5)
    {
      if (v5 < 9)
      {
        v7 = v45;
        v6 = *(_DWORD *)(a2 + 72);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v43, (uint64_t)v45, *(unsigned int *)(a2 + 72), 32);
        v6 = *(_DWORD *)(a2 + 72);
        if (!v6)
        {
LABEL_8:
          LODWORD(v44) = v5;
          goto LABEL_9;
        }
        v7 = v43;
      }
      memcpy(v7, *(const void **)(a2 + 64), 32 * v6);
      goto LABEL_8;
    }
  }
LABEL_9:
  v46 = v48;
  v47 = 0x800000000;
  v8 = *(_DWORD *)(a2 + 344);
  if (!v8 || v41 == (_OWORD *)a2)
    goto LABEL_15;
  if (v8 >= 9)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, *(unsigned int *)(a2 + 344), 4);
    v10 = *(unsigned int *)(a2 + 344);
    if (!(_DWORD)v10)
      goto LABEL_14;
    v9 = v46;
  }
  else
  {
    v9 = v48;
    v10 = *(unsigned int *)(a2 + 344);
  }
  memcpy(v9, *(const void **)(a2 + 336), 4 * v10);
LABEL_14:
  LODWORD(v47) = v8;
LABEL_15:
  v49 = a1;
  v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v13 = *(_QWORD *)(a2 + 16);
  v14 = *(unsigned __int8 *)(a2 + 24);
  *(_DWORD *)v38 = *(_DWORD *)(a2 + 25);
  *(_DWORD *)&v38[3] = *(_DWORD *)(a2 + 28);
  v15 = *(_QWORD *)(a2 + 32);
  v36[0] = v11;
  v36[1] = v12;
  v36[2] = v13;
  v37 = v14;
  v39 = v15;
  sub_1C52F0C88(*(int *)&v42[24], a1, v36);
  v16 = *(_QWORD *)(a1 + 1392);
  if ((_DWORD)v14)
    v17 = v12;
  else
    v17 = -1;
  if ((_DWORD)v14)
    v18 = v13;
  else
    v18 = 0;
  v35[0] = v11;
  v35[1] = v17;
  v35[2] = v18;
  v40 = 0;
  if ((sub_1C52EE728((uint64_t *)v16, v35, &v40) & 1) != 0)
    v19 = v40;
  else
    v19 = (uint64_t *)(*(_QWORD *)v16 + 56 * *(unsigned int *)(v16 + 16));
  if (v19 != (uint64_t *)(**(_QWORD **)(a1 + 1392) + 56 * *(unsigned int *)(*(_QWORD *)(a1 + 1392) + 16)))
  {
    v20 = *((unsigned int *)v19 + 8);
    if ((_DWORD)v20)
    {
      v21 = (unint64_t *)v19[3];
      v22 = &v21[2 * v20];
      do
      {
        v23 = *v21;
        v24 = v21[1];
        v21 += 2;
        v25 = v23 == -1 && v24 == 0;
        if (!v25)
        {
          v14 = v23 >> 8;
          v13 = v24;
        }
        v27 = v11;
        v26 = !v25;
        if (v25)
          LOBYTE(v23) = 0;
        v28 = v23;
        v29 = v14;
        v31 = BYTE6(v14);
        v30 = WORD2(v14);
        v32 = v13;
        v33 = v26;
        v34 = v15;
        sub_1C52F0C88(*(int *)&v42[24], v49, &v27);
      }
      while (v21 != v22);
    }
  }
  if (v46 != v48)
    free(v46);
  if (v43 != v45)
    free(v43);
}

void sub_1C52F0858(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9[2];
  _OWORD v10[5];
  uint64_t v11;
  uint64_t v12;
  void *v13[2];
  _OWORD v14[5];
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _BYTE v19[64];
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _DWORD v25[18];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  _DWORD v31[18];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  _BYTE v38[24];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  sub_1C52F004C((uint64_t)&v34, a2, a3);
  if (*(_DWORD *)v38 == -1)
  {
    v6 = *(_QWORD *)&v38[8];
    if (*(_OWORD *)&v38[8] == 0)
      goto LABEL_3;
  }
  else
  {
    v6 = *(_QWORD *)&v38[8];
  }
  if (v6 + (unint64_t)*(unsigned int *)v38 >= a4)
  {
LABEL_3:
    v28 = 0;
    v29 = v31;
    v30 = 0x400000000;
    v31[16] = -1;
    v33 = 0;
    v32 = 0;
    v22 = 0;
    v23 = v25;
    v24 = 0x400000000;
    v25[16] = -1;
    v26 = 0;
    v27 = 0;
    sub_1C52F0AA4(a1, (uint64_t)&v28, (uint64_t)&v22);
    if (v23 != v25)
      free(v23);
    v7 = v29;
    if (v29 == v31)
      goto LABEL_6;
LABEL_22:
    free(v7);
    goto LABEL_6;
  }
  v16 = v34;
  v17 = v19;
  v18 = 0x400000000;
  if (v36)
    sub_1C52EE358((uint64_t)&v17, (uint64_t)&v35);
  v20 = *(_OWORD *)v38;
  v21 = *(_QWORD *)&v38[16];
  sub_1C52F0258((uint64_t)&v16, a4);
  v12 = v34;
  v13[0] = v14;
  v13[1] = (void *)0x400000000;
  if (v36)
    sub_1C52EE358((uint64_t)v13, (uint64_t)&v35);
  v14[4] = *(_OWORD *)v38;
  v15 = *(_QWORD *)&v38[16];
  v8 = v16;
  v9[0] = v10;
  v9[1] = (void *)0x400000000;
  if ((_DWORD)v18)
    sub_1C52EE358((uint64_t)v9, (uint64_t)&v17);
  v10[4] = v20;
  v11 = v21;
  sub_1C52F0AA4(a1, (uint64_t)&v12, (uint64_t)&v8);
  if (v9[0] != v10)
    free(v9[0]);
  if (v13[0] != v14)
    free(v13[0]);
  v7 = v17;
  if (v17 != v19)
    goto LABEL_22;
LABEL_6:
  if (v35 != &v37)
    free(v35);
}

__n128 sub_1C52F0AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  uint64_t v4;
  __n128 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = a1 + 24;
  *(_QWORD *)(a1 + 16) = 0x400000000;
  if (*(_DWORD *)(a2 + 16))
  {
    v9 = a1;
    v6 = a2;
    v7 = a3;
    sub_1C50E5C18(a1 + 8, a2 + 8);
    a2 = v6;
    a3 = v7;
    a1 = v9;
  }
  v3 = *(_OWORD *)(a2 + 88);
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = a1 + 136;
  *(_QWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 88) = v3;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)a3;
  *(_QWORD *)(a1 + 128) = 0x400000000;
  if (*(_DWORD *)(a3 + 16))
  {
    v10 = a1;
    v8 = a3;
    sub_1C50E5C18(a1 + 120, a3 + 8);
    a3 = v8;
    a1 = v10;
  }
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a1 + 200) = result;
  return result;
}

BOOL sub_1C52F0B70(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  uint64_t v9;

  v8 = 1;
  v9 = a3;
  v4 = a2;
  v5 = a1;
  if (a2)
  {
    v6 = 32 * a2;
    v5 = a1;
    while (!sub_1C52EBBF4(v5, (uint64_t)&v8))
    {
      v5 += 32;
      v6 -= 32;
      if (!v6)
      {
        v5 = a1 + 32 * v4;
        return v4 != (v5 - a1) >> 5;
      }
    }
  }
  return v4 != (v5 - a1) >> 5;
}

_QWORD *sub_1C52F0BF8(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  while (1)
  {
    v4 = v3[4];
    if (v4 <= a2)
      break;
    v2 = v3;
LABEL_6:
    v3 = (_QWORD *)*v3;
    if (!v3)
      return v2;
  }
  if (v4 < a2)
  {
    ++v3;
    goto LABEL_6;
  }
  v6 = (_QWORD *)*v3;
  result = v3;
  if (*v3)
  {
    result = v3;
    do
    {
      v7 = v6[4];
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = v6;
      else
        v9 = v6 + 1;
      if (v8)
        result = v6;
      v6 = (_QWORD *)*v9;
    }
    while (*v9);
  }
  v10 = (_QWORD *)v3[1];
  if (v10)
  {
    do
    {
      if (v10[4] <= a2)
        v11 = v10 + 1;
      else
        v11 = v10;
      v10 = (_QWORD *)*v11;
    }
    while (*v11);
  }
  return result;
}

void sub_1C52F0C88(int a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  char *v17;
  BOOL v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  void *v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[64];
  uint64_t v34;
  void *v35;
  uint64_t v36;
  _QWORD v37[10];

  v37[8] = *MEMORY[0x1E0C80C00];
  if ((a1 & 0xFFFFFFFE) == 2)
    v4 = 808;
  else
    v4 = 224;
  if ((a1 & 0xFFFFFFFE) == 2)
    v5 = a2 + 808;
  else
    v5 = a2 + 224;
  v6 = sub_1C52EB76C(v5, a3);
  v7 = v6;
  if ((*(_BYTE *)(a2 + v4) & 1) != 0)
  {
    v8 = v5 + 8;
    v9 = 8;
  }
  else
  {
    v8 = *(_QWORD *)(v5 + 8);
    v9 = *(_DWORD *)(v5 + 16);
  }
  if (v8 + 72 * v9 != v6)
  {
    sub_1C52EB6D8(&v27, v6 + 40);
    if (v28)
    {
      v10 = (char *)v27;
      v11 = (char *)v27 + 8 * v28;
      do
      {
        v12 = __ROR8__(*(_QWORD *)v10, 32);
        v34 = a2 + 16;
        v35 = v37;
        v36 = 0x400000000;
        if (*(_DWORD *)(a2 + 208))
        {
          sub_1C52EC7A0((uint64_t)&v34, v12);
        }
        else
        {
          v13 = *(unsigned int *)(a2 + 212);
          if ((_DWORD)v13)
          {
            v14 = 0;
            v24 = (unint64_t *)(a2 + 24);
            while (1)
            {
              v25 = *v24;
              v24 += 2;
              if (v25 >= v12)
                break;
              if (v13 == ++v14)
              {
                v14 = *(unsigned int *)(a2 + 212);
                break;
              }
            }
          }
          else
          {
            v14 = 0;
          }
          sub_1C4A078FC(&v34, v14);
        }
        v30 = a2 + 16;
        v31 = v33;
        v32 = 0x400000000;
        sub_1C4A078FC(&v30, *(unsigned int *)(a2 + 212));
        if ((_DWORD)v36 && *((_DWORD *)v35 + 3) < *((_DWORD *)v35 + 2))
        {
          v15 = (char *)v35 + 16 * v36;
          v16 = v31;
          v17 = (char *)v31 + 16 * v32;
          v18 = *((_DWORD *)v15 - 1) == *((_DWORD *)v17 - 1) && *((_QWORD *)v15 - 2) == *((_QWORD *)v17 - 2);
        }
        else
        {
          v16 = v31;
          if ((_DWORD)v32)
            v18 = *((_DWORD *)v31 + 3) >= *((_DWORD *)v31 + 2);
          else
            v18 = 1;
        }
        if (v16 != v33)
          free(v16);
        if (!v18)
        {
          v19 = (char *)v35 + 16 * v36;
          v20 = *((_QWORD *)v19 - 2);
          v21 = *((unsigned int *)v19 - 1);
          v22 = *(_QWORD *)(v20 + 16 * v21);
          if (v22 <= v12)
          {
            v23 = *(_QWORD *)(v20 + 16 * v21 + 8);
            sub_1C52EF7E0((uint64_t)&v34);
            if (v22 < v12)
              sub_1C52EC484(a2 + 16, v22, v12 - 1);
            if (v23 > v12)
              sub_1C52EC484(a2 + 16, v12 + 1, v23);
          }
        }
        if (v35 != v37)
          free(v35);
        v10 += 8;
      }
      while (v10 != v11);
    }
    v26 = *(void **)(v7 + 40);
    if (v26 != (void *)(v7 + 56))
      free(v26);
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = 0;
    *(_QWORD *)v7 = 0;
    *(_BYTE *)(v7 + 24) = 1;
    *(_QWORD *)(v7 + 32) = 0;
    *(_DWORD *)(a2 + v4) -= 2;
    ++*(_DWORD *)(v5 + 4);
    if (v27 != &v29)
      free(v27);
  }
}

void sub_1C52F0F80(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void *v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[12];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a1 + 28;
  v35 = *a1;
  v37 = 0;
  v38 = v35;
  memset(v36, 0, 112);
  v6 = *(_QWORD *)(a2 + 160);
  if (v6)
    v7 = *(_QWORD **)(a2 + 144);
  else
    v7 = *(_QWORD **)a2;
  v28 = *(_QWORD *)a2 + 4 * *(unsigned int *)(a2 + 8);
  v29 = *(_QWORD *)(a2 + 160);
  v31 = a2 + 152;
  memset(&v36[7], 0, 80);
  v8 = a4;
  v9 = a1 + 101;
  while (1)
  {
    v10 = (_QWORD *)(v6 ? v31 : v28);
    if (v7 == v10)
      break;
    v11 = (unsigned int *)v7 + 7;
    if (!v6)
      v11 = (unsigned int *)v7;
    v12 = sub_1C52EA2D8(a3, v8 | ((unint64_t)*v11 << 32));
    if ((*(_DWORD *)(v12 + 56) & 0xFFFFFFFE) == 2)
      v13 = 101;
    else
      v13 = 28;
    if ((*(_DWORD *)(v12 + 56) & 0xFFFFFFFE) == 2)
      v14 = (uint64_t)v9;
    else
      v14 = (uint64_t)v5;
    v32 = 0;
    if (sub_1C52EB7CC(v14, (uint64_t *)v12, (uint64_t *)&v32))
    {
      v15 = a3;
      v16 = v9;
      v17 = v8;
      v18 = v5;
      v19 = v32;
      v20 = (char *)*((_QWORD *)v32 + 5);
      if (v20 != (char *)v32 + 56)
        free(v20);
      *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      *((_BYTE *)v19 + 24) = 1;
      v19[4] = 0;
      LODWORD(a1[v13]) -= 2;
      ++*(_DWORD *)(v14 + 4);
      v5 = v18;
      v8 = v17;
      v9 = v16;
      a3 = v15;
      v6 = v29;
    }
    sub_1C52EFFC4(&v32, a3, v12);
    v21 = (uint64_t *)v32;
    if (v33)
    {
      v22 = 8 * v33;
      do
      {
        v23 = *v21++;
        v24 = __ROR8__(v23, 32);
        sub_1C52EC484((uint64_t)v36, v24, v24);
        v22 -= 8;
      }
      while (v22);
      v21 = (uint64_t *)v32;
    }
    if (v21 != &v34)
      free(v21);
    if (v6)
    {
      v25 = (_QWORD *)v7[1];
      v26 = v7;
      if (v25)
      {
        do
        {
          v7 = v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v26[2];
          v27 = *v7 == (_QWORD)v26;
          v26 = v7;
        }
        while (!v27);
      }
    }
    else
    {
      v7 = (_QWORD *)((char *)v7 + 4);
    }
  }
  sub_1C52EED40((uint64_t)(a1 + 1), (uint64_t)&v35);
  if ((_DWORD)v37)
    sub_1C621F5F8((uint64_t)v36);
}

void sub_1C52F1200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, unsigned int a9)
{
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int v24;
  unsigned int v25;
  _BYTE *v26;
  void *v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  __int128 v35;
  uint64_t v36[4];
  __int128 v37[2];
  _BYTE v38[28];
  void *v39;
  uint64_t v40;
  _BYTE v41[256];
  void *v42;
  uint64_t v43;
  _QWORD v44[6];

  v44[4] = *MEMORY[0x1E0C80C00];
  v17 = sub_1C52EA2D8(a5, a6);
  v36[0] = a2;
  v36[1] = a3;
  v36[2] = a4;
  v36[3] = a5;
  v18 = sub_1C52EA2D8(a5, a6);
  sub_1C52F05B8(a3, v18);
  if (a7 == 1)
  {
    sub_1C52F1750((uint64_t)&v34, a1, a2);
    v19 = 0;
    v20 = v34;
    v33 = v35;
    v22 = *(_OWORD *)(v17 + 16);
    v21 = *(_OWORD *)(v17 + 32);
    v23 = *(_OWORD *)v17;
    *(_OWORD *)&v38[12] = *(_OWORD *)(v17 + 44);
    v37[1] = v22;
    *(_OWORD *)v38 = v21;
    v37[0] = v23;
    v39 = v41;
    v40 = 0x800000000;
    if (v37 == (__int128 *)v17 || (v24 = *(_DWORD *)(v17 + 72)) == 0)
    {
LABEL_15:
      v42 = v44;
      v43 = 0x800000000;
      v28 = *(_DWORD *)(v17 + 344);
      if (!v28 || v37 == (__int128 *)v17)
      {
LABEL_21:
        v31 = v39;
        if (!sub_1C52EBBF4((uint64_t)v39, a8))
        {
          v32 = 32 * v19 - 32;
          do
          {
            v31 += 8;
            v32 -= 32;
          }
          while (!sub_1C52EBBF4((uint64_t)v31, a8));
        }
        *v31 = 2;
        v31[2] = v20;
        *((_OWORD *)v31 + 1) = v33;
        sub_1C52F1630(v36, v37);
        if (v42 != v44)
          free(v42);
        v27 = v39;
        if (v39 == v41)
          return;
LABEL_10:
        free(v27);
        return;
      }
      if (v28 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, *(unsigned int *)(v17 + 344), 4);
        v30 = *(unsigned int *)(v17 + 344);
        if (!(_DWORD)v30)
          goto LABEL_20;
        v29 = v42;
      }
      else
      {
        v29 = v44;
        v30 = *(unsigned int *)(v17 + 344);
      }
      memcpy(v29, *(const void **)(v17 + 336), 4 * v30);
LABEL_20:
      LODWORD(v43) = v28;
      v19 = v40;
      goto LABEL_21;
    }
    if (v24 < 9)
    {
      v26 = v41;
      v25 = *(_DWORD *)(v17 + 72);
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v39, (uint64_t)v41, *(unsigned int *)(v17 + 72), 32);
      v25 = *(_DWORD *)(v17 + 72);
      if (!v25)
      {
LABEL_14:
        LODWORD(v40) = v24;
        v19 = v24;
        goto LABEL_15;
      }
      v26 = v39;
    }
    memcpy(v26, *(const void **)(v17 + 64), 32 * v25);
    goto LABEL_14;
  }
  sub_1C52F14AC((uint64_t)v37, v17, a8, a9);
  sub_1C52F1630(v36, v37);
  if (v42 != v44)
    free(v42);
  v27 = v39;
  if (v39 != v41)
    goto LABEL_10;
}

BOOL sub_1C52F14AC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v8;
  __int128 v9;
  void *v10;
  uint64_t *v11;
  unsigned int v12;
  unsigned int v13;
  void *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 result;
  uint64_t v19;

  v8 = 0;
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  v10 = (void *)(a1 + 80);
  *(_QWORD *)(a1 + 64) = a1 + 80;
  v11 = (uint64_t *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0x800000000;
  if (a1 != a2)
  {
    v12 = *(_DWORD *)(a2 + 72);
    if (v12)
    {
      if (v12 < 9)
      {
        v13 = *(_DWORD *)(a2 + 72);
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, (uint64_t)v10, *(unsigned int *)(a2 + 72), 32);
        v13 = *(_DWORD *)(a2 + 72);
        if (!v13)
        {
LABEL_8:
          *(_DWORD *)(a1 + 72) = v12;
          v8 = v12;
          goto LABEL_9;
        }
        v10 = (void *)*v11;
      }
      memcpy(v10, *(const void **)(a2 + 64), 32 * v13);
      goto LABEL_8;
    }
  }
LABEL_9:
  v14 = (void *)(a1 + 352);
  *(_QWORD *)(a1 + 336) = a1 + 352;
  *(_QWORD *)(a1 + 344) = 0x800000000;
  v15 = *(_DWORD *)(a2 + 344);
  if (v15 && a1 != a2)
  {
    if (v15 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 336, a1 + 352, *(unsigned int *)(a2 + 344), 4);
      v16 = *(unsigned int *)(a2 + 344);
      if (!(_DWORD)v16)
        goto LABEL_14;
      v14 = *(void **)(a1 + 336);
    }
    else
    {
      v16 = *(unsigned int *)(a2 + 344);
    }
    memcpy(v14, *(const void **)(a2 + 336), 4 * v16);
LABEL_14:
    *(_DWORD *)(a1 + 344) = v15;
    v8 = *(_DWORD *)(a1 + 72);
  }
  v17 = *v11;
  result = sub_1C52EBBF4(*v11, a3);
  if (!result)
  {
    v19 = 32 * v8 - 32;
    do
    {
      v17 += 32;
      result = sub_1C52EBBF4(v17, a3);
      v19 -= 32;
    }
    while (!result);
  }
  *(_DWORD *)v17 = 1;
  *(_QWORD *)(v17 + 8) = a4;
  return result;
}

void sub_1C52F1630(uint64_t *a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10[2];
  uint64_t v11;
  void *v12;
  unsigned int v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x1E0C80C00];
  sub_1C52EAB04(&v12, (uint64_t **)a1[3], (uint64_t)a2);
  sub_1C52F05B8(a1[1], (uint64_t)a2);
  v4 = a1[1];
  sub_1C52EB6D8(v10, (uint64_t)&v12);
  sub_1C52EB3B0(v4, (uint64_t)v10, a2);
  if (v10[0] != &v11)
    free(v10[0]);
  v5 = *a1;
  v6 = *((_QWORD *)v12 + v13 - 1);
  v7 = a1[2];
  v8 = *(unsigned int *)(v7 + 8);
  if (v8 >= *(_DWORD *)(v7 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7, v7 + 16, v8 + 1, 16);
    LODWORD(v8) = *(_DWORD *)(v7 + 8);
  }
  v9 = (_QWORD *)(*(_QWORD *)v7 + 16 * v8);
  *v9 = v5;
  v9[1] = v6;
  ++*(_DWORD *)(v7 + 8);
  if (v12 != v14)
    free(v12);
}

uint64_t sub_1C52F1750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  int v10;

  v4 = *(_QWORD *)(a3 + 48);
  if ((v4 & 7) != 0)
  {
    v5 = *(_QWORD **)((v4 & 0xFFFFFFFFFFFFFFF8) + 8);
  }
  else
  {
    v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(a3 + 48) = v5;
  }
  v6 = *(unsigned int *)((*v5 & ((uint64_t)(*v5 << 61) >> 63) & 0xFFFFFFFFFFFFFFF8) + 0x10);
  v7 = *(_QWORD *)(a3 + 24);
  v10 = 0;
  result = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, int *))(**(_QWORD **)(a2 + 24) + 232))(*(_QWORD *)(a2 + 24), *(_QWORD *)(v7 + 32), v6, &v10);
  *(_DWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_1C52F17D8(uint64_t a1, llvm::MachineInstr *this)
{
  unint64_t v2;
  _DWORD *v5;
  BOOL v6;

  v2 = *((_QWORD *)this + 6);
  if (v2 >= 8)
  {
    if ((v2 & 7) != 0)
    {
      v5 = (_DWORD *)(v2 & 0xFFFFFFFFFFFFFFF8);
      v6 = (*((_QWORD *)this + 6) & 7) != 3 || v5 == 0;
      if (v6 || *v5 != 1)
        return 0;
    }
    else
    {
      *((_QWORD *)this + 6) = v2 & 0xFFFFFFFFFFFFFFF8;
    }
    if ((llvm::MachineInstr::getSpillSize(this, *(const llvm::TargetInstrInfo **)(a1 + 16)) & 0xFF00000000) != 0
      || (llvm::MachineInstr::getFoldedSpillSize(this, *(const llvm::TargetInstrInfo **)(a1 + 16)) & 0xFF00000000) != 0)
    {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1C52F1868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *i;

  if ((_DWORD)a2)
  {
    v3 = 0;
    for (i = (_QWORD *)(a1 + 16);
          *((_DWORD *)i - 4) != 2
       || *((_DWORD *)i - 2) != *(_DWORD *)a3
       || *i != *(_QWORD *)(a3 + 8)
       || i[1] != *(_QWORD *)(a3 + 16);
          i += 4)
    {
      if (a2 == ++v3)
        return a2;
    }
    return v3;
  }
  return a2;
}

void sub_1C52F18C8(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  char v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _BYTE v11[7];

  v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 <= 1u && !*(_DWORD *)(a1 + 4))
    return;
  if ((v2 & 1) != 0)
  {
    v8 = a1 + 8;
    v9 = a1 + 584;
    goto LABEL_29;
  }
  v3 = *(_DWORD *)(a1 + 16);
  if (((2 * v2) & 0xFFFFFFFC) >= v3)
  {
    if (!v3)
      goto LABEL_35;
  }
  else if (v3 > 0x40)
  {
    sub_1C52F1A78(a1);
    v4 = __clz((v2 >> 1) - 1);
    if ((v4 & 0x3E) == 0x1C)
      v5 = 64;
    else
      v5 = 1 << (33 - v4);
    if (v2 >= 2)
      v6 = v5;
    else
      v6 = 0;
    v7 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0 && v6 < 9)
      goto LABEL_19;
    if ((v7 & 1) == 0)
    {
      if ((_DWORD)v6 == *(_DWORD *)(a1 + 16))
      {
LABEL_19:
        sub_1C52EA668((int *)a1);
        return;
      }
      MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
      v7 = *(_DWORD *)a1;
    }
    *(_DWORD *)a1 = v7 | 1;
    if (v6 >= 9)
    {
      *(_DWORD *)a1 = v7 & 0xFFFFFFFE;
      *(_QWORD *)(a1 + 8) = operator new(72 * v6, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v6;
    }
    goto LABEL_19;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 + 72 * v3;
  do
  {
LABEL_29:
    if (*(_QWORD *)v8)
      goto LABEL_30;
    if (*(_BYTE *)(v8 + 24))
    {
      if (*(_OWORD *)(v8 + 8) != 0 || *(_QWORD *)(v8 + 32))
      {
LABEL_30:
        v10 = *(void **)(v8 + 40);
        if ((void *)(v8 + 56) != v10)
          free(v10);
      }
      *(_BYTE *)(v8 + 24) = 0;
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 25) = *(_DWORD *)v11;
      *(_DWORD *)(v8 + 28) = *(_DWORD *)&v11[3];
      *(_QWORD *)(v8 + 32) = 0;
      goto LABEL_33;
    }
    if (*(_QWORD *)(v8 + 32))
      goto LABEL_30;
LABEL_33:
    v8 += 72;
  }
  while (v8 != v9);
  v3 = *(_DWORD *)a1 & 1;
LABEL_35:
  *(_DWORD *)a1 = v3;
  *(_DWORD *)(a1 + 4) = 0;
}

void sub_1C52F1A78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v2 = a1 + 8;
    v1 = 8;
  }
  else
  {
    v1 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v1)
      return;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = 72 * v1;
  v4 = (_QWORD *)(v2 + 56);
  do
  {
    if (*(v4 - 7) || *((_BYTE *)v4 - 32) && *((_OWORD *)v4 - 3) != 0 || *(v4 - 3))
    {
      v5 = (_QWORD *)*(v4 - 2);
      if (v4 != v5)
        free(v5);
    }
    v4 += 9;
    v3 -= 72;
  }
  while (v3);
}

void sub_1C52F1AFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 112 * v1;
    v3 = *(_QWORD *)a1 + 88;
    do
    {
      if ((*(_QWORD *)(v3 - 88) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        sub_1C61247C0(v3, *(_QWORD **)(v3 + 8));
        v4 = *(void **)(v3 - 80);
        if ((void *)(v3 - 64) != v4)
          free(v4);
      }
      v3 += 112;
      v2 -= 112;
    }
    while (v2);
  }
}

int *sub_1C52F1B70(int *a1)
{
  int v2;
  int *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  if ((*a1 & 1) != 0)
  {
    v3 = a1 + 2;
    v4 = 4;
  }
  else
  {
    v4 = a1[4];
    if (!(_DWORD)v4)
      goto LABEL_9;
    v3 = (int *)*((_QWORD *)a1 + 1);
  }
  v5 = (uint64_t *)(v3 + 2);
  v6 = 16 * v4;
  do
  {
    if ((*(v5 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v7 = *v5;
      *v5 = 0;
      if (v7)
        sub_1C52F0538(v7);
    }
    v5 += 2;
    v6 -= 16;
  }
  while (v6);
  v2 = *a1;
LABEL_9:
  if ((v2 & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 1), 8);
  return a1;
}

uint64_t sub_1C52F1C04(uint64_t a1)
{
  sub_1C52F1A78(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

void sub_1C52F1C3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v8;
  uint64_t v9;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 56 * v1;
    v3 = *(_QWORD *)a1 + 40;
    do
    {
      v4 = *(_QWORD *)(v3 - 40);
      if (v4 == -4096)
      {
        if (*(_QWORD *)(v3 - 32) == -1 && *(_QWORD *)(v3 - 24) == -1)
          goto LABEL_12;
      }
      else if (v4 == -8192 && *(_QWORD *)(v3 - 32) == -2 && *(_QWORD *)(v3 - 24) == -2)
      {
        goto LABEL_12;
      }
      v5 = *(void **)(v3 - 16);
      if ((void *)v3 != v5)
      {
        v8 = v3;
        v9 = v2;
        free(v5);
        v3 = v8;
        v2 = v9;
      }
LABEL_12:
      v3 += 56;
      v2 -= 56;
    }
    while (v2);
  }
}

void sub_1C52F1CD4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (a1)
  {
    sub_1C52F1CD4(*a1);
    sub_1C52F1CD4(a1[1]);
    v2 = (_QWORD *)a1[52];
    if (v2 != a1 + 54)
      free(v2);
    v3 = (_QWORD *)a1[46];
    if (v3 != a1 + 48)
      free(v3);
    v4 = (_QWORD *)a1[12];
    if (v4 != a1 + 14)
      free(v4);
    operator delete(a1);
  }
}

uint64_t LiveDebugValues::MLocTracker::MLocTracker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t j;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v22;
  uint64_t v23;
  uint64_t k;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t v30;
  unsigned __int16 *v31;
  int v32;
  int v33;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  BOOL v44;
  int v45;
  unsigned int v46;
  unsigned int *i;
  unsigned __int16 *v48;
  int v49;
  unsigned __int16 *v50;
  unsigned __int16 *v51;
  _DWORD *v52;
  unsigned __int16 *v53;
  int v54;
  int v55;
  unsigned int v59[6];
  uint64_t v60;

  v8 = 0;
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 48) = LiveDebugValues::ValueIDNum::EmptyValue;
  v9 = a1 + 48;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 112) = a1 + 128;
  v10 = a1 + 112;
  *(_QWORD *)(a1 + 120) = 0x800000000;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 160) = a1 + 168;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 184) = a1 + 192;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 264;
  v11 = a1 + 776;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_DWORD *)(a1 + 792) = 0;
  *(_DWORD *)(a1 + 816) = 0;
  *(_OWORD *)(a1 + 800) = 0u;
  v12 = *(unsigned int *)(a4 + 16);
  *(_DWORD *)(a1 + 236) = v12;
  *(_QWORD *)(a1 + 256) = 0x2000000000;
  if ((_DWORD)v12)
  {
    v8 = (char *)operator new(4 * v12);
    memset(v8, 255, 4 * v12);
    v13 = &v8[4 * v12];
    *(_QWORD *)(a1 + 64) = v8;
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a1 + 80) = v13;
  }
  v14 = *(unsigned int *)(a5 + 88);
  if ((_DWORD)v14)
  {
    if (*(_DWORD *)&v8[4 * v14] == -1)
      *(_DWORD *)&v8[4 * v14] = LiveDebugValues::MLocTracker::trackRegister((LiveDebugValues::MLocTracker *)a1, v14);
    v36 = *(_QWORD *)(a4 + 8);
    v37 = ((unint64_t)*(unsigned int *)(v36 + 24 * v14 + 16) >> 3) & 0x1FFFFFFE;
    v39 = *(_QWORD *)(a4 + 48);
    v38 = *(_QWORD *)(a4 + 56);
    v40 = (_WORD *)(v38 + v37 + 2);
    v41 = *(unsigned __int16 *)(v38 + v37) + (*(_DWORD *)(v36 + 24 * v14 + 16) & 0xF) * v14;
    do
    {
      v42 = 4 * (unsigned __int16)v41;
      v43 = *(unsigned __int16 *)(v39 + v42);
      if (*(_WORD *)(v39 + v42))
        v44 = v38 == 0;
      else
        v44 = 1;
      if (!v44)
      {
        v46 = *(unsigned __int16 *)(v39 + 4 * (unsigned __int16)v41 + 2) << 16;
        for (i = (unsigned int *)(v36 + 24 * *(unsigned __int16 *)(v39 + 4 * (unsigned __int16)v41) + 8);
              ;
              i = (unsigned int *)(*(_QWORD *)(a4 + 8) + 24 * v43 + 8))
        {
          v48 = (unsigned __int16 *)(v38 + 2 * *i);
          do
          {
            v59[0] = (unsigned __int16)v43;
            sub_1C484FF44(v10, v59);
            v49 = *v48++;
            v43 += v49;
          }
          while (v49);
          v43 = HIWORD(v46);
          if (HIWORD(v46))
          {
            v46 >>= 16;
          }
          else
          {
            if (!*v40)
              goto LABEL_4;
            v41 += (unsigned __int16)*v40++;
            v50 = (unsigned __int16 *)(*(_QWORD *)(a4 + 48) + 4 * (unsigned __int16)v41);
            v43 = *v50;
            v46 = v50[1] << 16;
          }
          v38 = *(_QWORD *)(a4 + 56);
        }
      }
      v45 = (unsigned __int16)*v40++;
      v41 += v45;
    }
    while (v45);
  }
LABEL_4:
  v60 = 8;
  sub_1C6223FF4((uint64_t)v59, v11, (unsigned __int16 *)&v60, (_DWORD *)&v60 + 1);
  v60 = 0x100000010;
  sub_1C6223FF4((uint64_t)v59, v11, (unsigned __int16 *)&v60, (_DWORD *)&v60 + 1);
  v60 = 0x200000020;
  sub_1C6223FF4((uint64_t)v59, v11, (unsigned __int16 *)&v60, (_DWORD *)&v60 + 1);
  v60 = 0x300000040;
  sub_1C6223FF4((uint64_t)v59, v11, (unsigned __int16 *)&v60, (_DWORD *)&v60 + 1);
  v60 = 0x400000080;
  sub_1C6223FF4((uint64_t)v59, v11, (unsigned __int16 *)&v60, (_DWORD *)&v60 + 1);
  v60 = 0x500000100;
  sub_1C6223FF4((uint64_t)v59, v11, (unsigned __int16 *)&v60, (_DWORD *)&v60 + 1);
  v60 = 0x600000200;
  sub_1C6223FF4((uint64_t)v59, v11, (unsigned __int16 *)&v60, (_DWORD *)&v60 + 1);
  v15 = *(unsigned int *)(a4 + 104);
  if (v15 >= 2)
  {
    v16 = 0;
    for (j = 1; j < v15; ++j)
    {
      v18 = *(_QWORD *)(a4 + 96) + v16;
      v19 = *(unsigned __int16 *)(v18 + 6);
      v20 = *(unsigned __int16 *)(v18 + 4);
      if (v19 <= 0xEA60 && v20 <= 0xEA60)
      {
        v22 = *(_DWORD *)(a1 + 784);
        LODWORD(v60) = v19 | (v20 << 16);
        HIDWORD(v60) = v22;
        sub_1C6223FF4((uint64_t)v59, v11, (unsigned __int16 *)&v60, (_DWORD *)&v60 + 1);
        v15 = *(unsigned int *)(a4 + 104);
      }
      v16 += 4;
    }
  }
  v23 = *(_QWORD *)(a4 + 240);
  for (k = *(_QWORD *)(a4 + 248); v23 != k; v23 += 8)
  {
    if (*(_DWORD *)(*(_QWORD *)(a4 + 264)
                   + 24
                   * (*(unsigned __int16 *)(**(_QWORD **)v23 + 24)
                    + *(_DWORD *)(a4 + 272) * ((*(_QWORD *)(a4 + 248) - *(_QWORD *)(a4 + 240)) >> 3))) <= 0x200u)
    {
      v25 = *(_DWORD *)(a1 + 784);
      LODWORD(v60) = *(_DWORD *)(*(_QWORD *)(a4 + 264)
                               + 24
                               * (*(unsigned __int16 *)(**(_QWORD **)v23 + 24)
                                + *(_DWORD *)(a4 + 272)
                                * ((*(_QWORD *)(a4 + 248) - *(_QWORD *)(a4 + 240)) >> 3)));
      HIDWORD(v60) = v25;
      sub_1C6223FF4((uint64_t)v59, v11, (unsigned __int16 *)&v60, (_DWORD *)&v60 + 1);
    }
  }
  v26 = *(_DWORD *)(a1 + 784);
  v27 = *(_QWORD *)(a1 + 776);
  v28 = *(unsigned int *)(a1 + 792);
  v29 = (unsigned __int16 *)(v27 + 8 * v28);
  if (v26)
  {
    if ((_DWORD)v28)
    {
      v30 = 8 * v28;
      v31 = *(unsigned __int16 **)(a1 + 776);
      while (1)
      {
        v32 = *v31;
        v33 = v31[1];
        if ((v32 != 0xFFFF || v33 != 0xFFFF) && (v32 != 65534 || v33 != 65534))
          break;
        v31 += 4;
        v30 -= 8;
        if (!v30)
          goto LABEL_29;
      }
    }
    else
    {
      v31 = *(unsigned __int16 **)(a1 + 776);
    }
  }
  else
  {
LABEL_29:
    v31 = (unsigned __int16 *)(v27 + 8 * v28);
  }
  v51 = (unsigned __int16 *)(v27 + 8 * v28);
  if (v31 != v51)
  {
    do
    {
      v52 = sub_1C6224098(v9 + 752, (_DWORD *)v31 + 1);
      v53 = v31 + 4;
      v52[1] = *(_DWORD *)v31;
      v31 = v29;
      if (v53 != v29)
      {
        v31 = v53;
        while (1)
        {
          v54 = *v31;
          v55 = v31[1];
          if ((v54 != 0xFFFF || v55 != 0xFFFF) && (v54 != 65534 || v55 != 65534))
            break;
          v31 += 4;
          if (v31 == v29)
          {
            v31 = v29;
            break;
          }
        }
      }
    }
    while (v31 != v51);
    v26 = *(_DWORD *)(a1 + 784);
  }
  *(_DWORD *)(a1 + 240) = v26;
  return a1;
}

unint64_t LiveDebugValues::MLocTracker::trackRegister(LiveDebugValues::MLocTracker *this, unsigned int a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v21;
  uint64_t v22;
  unint64_t v23;

  v4 = (_QWORD *)((char *)this + 32);
  v5 = *((unsigned int *)this + 10);
  v6 = (v5 + 1);
  if (v6 > v5)
    sub_1C62243A8((unsigned int *)this + 8, v6 - v5, *((_QWORD *)this + 6));
  v7 = (_QWORD *)((char *)this + 88);
  v8 = *((unsigned int *)this + 24);
  v9 = v6 - v8;
  if (v6 <= v8)
    goto LABEL_11;
  v10 = *((_DWORD *)this + 26);
  v11 = *((unsigned int *)this + 24);
  v12 = *((_DWORD *)this + 24);
  if (v6 > *((unsigned int *)this + 25))
  {
    v23 = *((unsigned int *)this + 24);
    v22 = v6 - v8;
    v21 = *((_DWORD *)this + 26);
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 88, (uint64_t)this + 104, (v5 + 1), 4);
    LODWORD(v9) = v22;
    v8 = v23;
    v10 = v21;
    v7 = (_QWORD *)((char *)this + 88);
    v11 = *((unsigned int *)this + 24);
    v12 = *((_DWORD *)this + 24);
    if (v22)
    {
LABEL_6:
      v13 = (_DWORD *)(*v7 + 4 * v11);
      v14 = v8 - v6;
      do
        *v13++ = v10;
      while (!__CFADD__(v14++, 1));
      v12 = *((_DWORD *)this + 24);
    }
  }
  else if (v9)
  {
    goto LABEL_6;
  }
  *((_DWORD *)this + 24) = v12 + v9;
LABEL_11:
  v16 = *((_DWORD *)this + 58) & 0xFFFFFLL | ((unint64_t)v5 << 40);
  v17 = *((_QWORD *)this + 31);
  v18 = 16 * *((unsigned int *)this + 64);
  while (v18)
  {
    v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + v18 - 16) + 16) + 4 * (a2 >> 5));
    v18 -= 16;
    if ((v19 & (1 << a2)) == 0)
    {
      v16 = *((_DWORD *)this + 58) & 0xFFFFFLL | ((unint64_t)(*(_DWORD *)(v17 + v18 + 8) & 0xFFFFF) << 20) | (v5 << 40);
      break;
    }
  }
  *(_QWORD *)(*v4 + 8 * v5) = v16;
  *(_DWORD *)(*v7 + 4 * v5) = a2;
  return v5;
}

uint64_t LiveDebugValues::MLocTracker::writeRegMask(uint64_t this, const llvm::MachineOperand *a2, int a3, unsigned int a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *i;
  unsigned int v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;

  v6 = this;
  v7 = *(_DWORD *)(this + 40);
  if (v7)
  {
    v8 = 0;
    v9 = a3 & 0xFFFFFLL | ((unint64_t)(a4 & 0xFFFFF) << 20);
    do
    {
      v10 = *(unsigned int *)(*(_QWORD *)(v6 + 88) + 4 * v8);
      if (v10 < *(_DWORD *)(v6 + 236))
      {
        if (*(_QWORD *)(v6 + 176))
        {
          for (i = *(uint64_t **)(v6 + 168); i; i = (uint64_t *)*i)
          {
            v12 = *((_DWORD *)i + 7);
            if (v10 >= v12)
            {
              if (v12 >= v10)
                goto LABEL_21;
              ++i;
            }
          }
        }
        else
        {
          v13 = *(unsigned int *)(v6 + 120);
          if ((_DWORD)v13)
          {
            v14 = *(_DWORD **)(v6 + 112);
            v15 = 4 * v13;
            while (*v14 != (_DWORD)v10)
            {
              ++v14;
              v15 -= 4;
              if (!v15)
                goto LABEL_17;
            }
            if (v15)
              goto LABEL_21;
          }
        }
LABEL_17:
        if (((*(_DWORD *)(*((_QWORD *)a2 + 2) + ((v10 >> 3) & 0x1FFFFFFC)) >> v10) & 1) == 0)
        {
          v16 = *(_QWORD *)(v6 + 64);
          this = *(unsigned int *)(v16 + 4 * v10);
          if ((_DWORD)this == -1)
          {
            this = LiveDebugValues::MLocTracker::trackRegister((LiveDebugValues::MLocTracker *)v6, *(_DWORD *)(*(_QWORD *)(v6 + 88) + 4 * v8));
            *(_DWORD *)(v16 + 4 * v10) = this;
          }
          *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * this) = v9 | ((unint64_t)this << 40);
        }
      }
LABEL_21:
      v17 = v8 + 1;
      v8 = (v8 + 1);
    }
    while (v7 != v17);
  }
  v18 = *(unsigned int *)(v6 + 256);
  if (v18 >= *(_DWORD *)(v6 + 260))
  {
    this = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v6 + 248, v6 + 264, v18 + 1, 16);
    LODWORD(v18) = *(_DWORD *)(v6 + 256);
  }
  v19 = (_QWORD *)(*(_QWORD *)(v6 + 248) + 16 * v18);
  *v19 = a2;
  v19[1] = a4;
  ++*(_DWORD *)(v6 + 256);
  return this;
}

void LiveDebugValues::MLocTracker::LocIdxToName(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  int *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;

  v4 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * a2);
  v5 = *(_DWORD *)(a1 + 236);
  if (v4 < v5)
  {
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 512))(*(_QWORD *)(a1 + 16));
    if (!v6)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      return;
    }
    v8 = v7;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v9 = (const void *)v6;
    if (v7 >= 0x17)
    {
      v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v10 = v7 | 7;
      v11 = v10 + 1;
      v12 = operator new(v10 + 1);
      a3[1] = v8;
      a3[2] = v11 | 0x8000000000000000;
      *a3 = v12;
      a3 = v12;
    }
    else
    {
      *((_BYTE *)a3 + 23) = v7;
      if (!v7)
        goto LABEL_12;
    }
    memmove(a3, v9, v8);
LABEL_12:
    *((_BYTE *)a3 + v8) = 0;
    return;
  }
  v13 = v4 - v5;
  v14 = *(_DWORD *)(a1 + 240);
  v15 = v13 / v14;
  v16 = sub_1C49796E4(*(_QWORD *)(a1 + 800), *(_DWORD *)(a1 + 816), v13 % v14);
  v17 = (unint64_t)v16[1] >> 16;
  v18 = (unsigned __int16)v16[1];
  v19[0] = " offs ";
  v19[2] = v17;
  v20 = 2307;
  v21[0] = v18;
  v21[2] = v19;
  v22 = 521;
  v23[0] = " sz ";
  v23[2] = v21;
  v24 = 515;
  v25[0] = v15;
  v25[2] = v23;
  v26 = 520;
  v27[0] = "slot ";
  v27[2] = v25;
  v28 = 515;
  llvm::Twine::str((llvm::Twine *)v27, a3);
}

void LiveDebugValues::MLocTracker::IDAsString(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void *__p[2];
  char v6;

  LiveDebugValues::MLocTracker::LocIdxToName(a1, *a2 >> 40, __p);
  sub_1C621FAA0(a3, *a2, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

BOOL LiveDebugValues::InstrRefBasedLDV::transferDebugValue(LiveDebugValues::InstrRefBasedLDV *this, const llvm::MachineInstr *a2)
{
  int v2;
  unsigned int v3;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::DIExpression *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  const llvm::MachineInstr *v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  int8x16_t v51;
  char v52;
  uint64_t v53;

  v2 = **((unsigned __int16 **)a2 + 2);
  v3 = v2 - 13;
  if ((v2 - 13) <= 1)
  {
    v6 = v2 == 14;
    v7 = *((_QWORD *)a2 + 4);
    v8 = *(_QWORD *)(v7 + ((unint64_t)(v2 != 14) << 6) + 16);
    v9 = 96;
    if (v6)
      v9 = 32;
    v10 = *(_QWORD *)(v7 + v9 + 16);
    v11 = (_DWORD *)*((_QWORD *)a2 + 7);
    v12 = v11[2] == 2 ? *((_QWORD *)v11 - 1) : 0;
    v50 = v8;
    if (v10)
    {
      llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v10 + 24), *(uint64_t **)(v10 + 32), &v51);
    }
    else
    {
      v51.i8[0] = 0;
      v52 = 0;
    }
    v53 = v12;
    *(_QWORD *)&v49 = v10;
    BYTE8(v49) = *(_BYTE *)(v7 + 32) == 1;
    if (llvm::LexicalScopes::findLexicalScope((int8x8_t *)this + 16, (const llvm::DILocation *)v11))
    {
      v13 = **((unsigned __int16 **)a2 + 2);
      if (v13 == 14)
      {
        v14 = *((_QWORD *)this + 46);
        if (v14)
          sub_1C62202D8(v14, (uint64_t)a2, &v49, 0, 0);
        v15 = *((_QWORD *)this + 47);
        if (v15)
          sub_1C52F2A10(v15, (uint64_t)a2, (uint64_t *)&v49, 0);
      }
      else
      {
        v16 = *((_QWORD *)a2 + 4);
        if (!*(_BYTE *)v16)
        {
          v21 = *(unsigned int *)(v16 + 4);
          if ((_DWORD)v21)
          {
            v22 = *((_QWORD *)this + 44);
            v23 = *(_QWORD *)(v22 + 64);
            v24 = *(_DWORD *)(v23 + 4 * v21);
            if (v24 == -1)
            {
              v24 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), *(_DWORD *)(v16 + 4));
              *(_DWORD *)(v23 + 4 * v21) = v24;
              v13 = **((unsigned __int16 **)a2 + 2);
              v25 = *((_QWORD *)a2 + 4);
              LODWORD(v21) = *(_DWORD *)(v16 + 4);
            }
            else
            {
              v25 = *((_QWORD *)a2 + 4);
            }
            v48 = *(_QWORD *)(*(_QWORD *)(v22 + 32) + 8 * v24);
            v26 = v13 == 14 ? 32 : 96;
            v27 = *(uint64_t **)(*((_QWORD *)a2 + 3) + 32);
            if ((*(_BYTE *)v27[45] & 4) != 0)
            {
              v28 = v27[5];
              v29 = *(_QWORD *)(v28 + 456);
              v30 = *(_QWORD *)(v28 + 464);
              v31 = v30 - v29;
              if (v30 != v29)
              {
                v32 = 0;
                v33 = *(llvm::DIExpression **)(v25 + v26 + 16);
                v34 = *v27;
                v35 = 8 * (v31 >> 3);
                while (1)
                {
                  if ((_DWORD)v21 == *(_QWORD *)(v29 + 8 * v32))
                  {
                    v36 = *(_QWORD *)(v34 + 112);
                    if (v36)
                    {
                      if ((v32 + 2) < *(_DWORD *)(v36 + 8))
                      {
                        v37 = *(_QWORD *)(v36 + 8 * (v32 + 2) + 40);
                        if (v37)
                        {
                          if ((*(_BYTE *)(v37 + 19) & 0x40) != 0)
                            break;
                        }
                      }
                    }
                  }
                  ++v32;
                  v35 -= 8;
                  if (!v35)
                    goto LABEL_17;
                }
                *((_BYTE *)this + 384) = 1;
                v38 = *((_QWORD *)this + 47);
                if (v38)
                  *(_BYTE *)(v38 + 33) = 1;
                if (!v33
                  || (v39 = (_QWORD *)*((_QWORD *)v33 + 3), ((*((_QWORD *)v33 + 4) - (_QWORD)v39) & 0x7FFFFFFF8) == 0)
                  || *v39 != 4099)
                {
                  if (v38)
                    sub_1C52F2D0C(v38, &v50, (uint64_t)&v49, &v48);
                  else
                    *(_QWORD *)(v25 + 112) = llvm::DIExpression::prepend(v33, (const llvm::DIExpression *)8, 0);
                }
              }
            }
          }
        }
LABEL_17:
        v17 = *((_QWORD *)this + 46);
        if (v17)
        {
          if (*(_BYTE *)v16)
          {
            v18 = (__int128 *)*((_QWORD *)a2 + 4);
            if (*(unsigned __int8 *)v18 - 1 <= 2)
              sub_1C622043C(*((_QWORD *)this + 46), (uint64_t)a2, v18);
          }
          else
          {
            v40 = *(unsigned int *)(v16 + 4);
            if ((_DWORD)v40)
            {
              v45 = *((_QWORD *)this + 44);
              v46 = *(_QWORD *)(v45 + 64);
              v47 = *(_DWORD *)(v46 + 4 * v40);
              if (v47 == -1)
              {
                v47 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), v40);
                *(_DWORD *)(v46 + 4 * v40) = v47;
              }
              v43 = *(_QWORD *)(*(_QWORD *)(v45 + 32) + 8 * v47);
              v41 = v17;
              v42 = a2;
              v44 = 1;
            }
            else
            {
              v41 = *((_QWORD *)this + 46);
              v42 = a2;
              v43 = 0;
              v44 = 0;
            }
            sub_1C62202D8(v41, (uint64_t)v42, &v49, v43, v44);
          }
        }
        v19 = *((_QWORD *)this + 47);
        if (v19)
          sub_1C62205A0(v19, (uint64_t)a2);
      }
    }
  }
  return v3 < 2;
}

uint64_t sub_1C52F2A10(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4)
{
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  _DWORD *v27;
  _QWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  _BYTE v31[24];
  _OWORD v32[2];
  uint64_t v33;
  int v34;
  _QWORD v35[4];
  unsigned int v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _BYTE v40[13];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v7 = **(unsigned __int16 **)(a2 + 16);
  v8 = v7 == 14;
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(v9 + ((unint64_t)(v7 != 14) << 6) + 16);
  v11 = 96;
  if (v8)
    v11 = 32;
  v12 = *(_QWORD *)(v9 + v11 + 16);
  v13 = *(_QWORD *)(a2 + 56);
  if (*(_DWORD *)(v13 + 8) == 2)
    v14 = *(_QWORD *)(v13 - 8);
  else
    v14 = 0;
  *(_QWORD *)&v37 = v10;
  if (v12)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v12 + 24), *(uint64_t **)(v12 + 32), (int8x16_t *)((char *)&v37 + 8));
  }
  else
  {
    BYTE8(v37) = 0;
    BYTE8(v38) = 0;
  }
  v39 = v14;
  sub_1C6221CF8(a1 + 2496, (uint64_t *)&v37);
  *(_QWORD *)&v32[0] = 0;
  result = sub_1C52FE43C(*(_QWORD *)(a1 + 2400), *(_DWORD *)(a1 + 2416), (uint64_t *)&v37, (uint64_t *)v32);
  v16 = *(unsigned int *)(a1 + 2416);
  if ((_DWORD)result)
    v17 = *(_QWORD *)&v32[0];
  else
    v17 = *(_QWORD *)(a1 + 2400) + (v16 << 6);
  if (v17 != *(_QWORD *)(a1 + 2400) + (v16 << 6))
  {
    v18 = sub_1C6221D58(a1 + 2376, (int *)(v17 + 40));
    result = sub_1C52FE378((uint64_t)(v18 + 2), (unint64_t *)&v37);
  }
  if ((a4 & 0xFF00000000) != 0)
  {
    v36 = a4;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 8 * a4) != *(_QWORD *)(*(_QWORD *)(a1 + 2104) + 8 * a4))
    {
      v19 = sub_1C6221D58(a1 + 2376, (int *)&v36);
      v20 = *((_QWORD *)v19 + 25);
      if (v20)
        v21 = (uint64_t *)*((_QWORD *)v19 + 23);
      else
        v21 = (uint64_t *)*((_QWORD *)v19 + 1);
      v22 = *((_QWORD *)v19 + 1) + 40 * v19[4];
      v23 = (uint64_t *)(v19 + 48);
      while (1)
      {
        while (!v20)
        {
          if (v21 == (uint64_t *)v22)
            goto LABEL_30;
          sub_1C6221C8C(a1 + 2400, v21);
          v21 += 5;
        }
        if (v21 == v23)
          break;
        sub_1C6221C8C(a1 + 2400, v21 + 4);
        v24 = (uint64_t *)v21[1];
        v25 = v21;
        if (v24)
        {
          do
          {
            v21 = v24;
            v24 = (uint64_t *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v21 = (uint64_t *)v25[2];
            v8 = *v21 == (_QWORD)v25;
            v25 = v21;
          }
          while (!v8);
        }
      }
LABEL_30:
      v26 = v36;
      LODWORD(v32[0]) = v36;
      v27 = sub_1C6221D58(a1 + 2376, (int *)v32);
      a4 = (unint64_t)(v27 + 48);
      v28 = (_QWORD *)*((_QWORD *)v27 + 24);
      v27[4] = 0;
      sub_1C61247C0((uint64_t)(v27 + 46), v28);
      *(_QWORD *)(a4 - 8) = a4;
      *(_QWORD *)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      *(_QWORD *)(*(_QWORD *)(a1 + 2104) + 8 * v26) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 8 * v26);
      LODWORD(a4) = v26;
    }
    v29 = sub_1C6221D58(a1 + 2376, (int *)&v36);
    result = sub_1C52FC1E8((uint64_t)(v29 + 2), (unint64_t *)&v37);
    if (v17 == *(_QWORD *)(a1 + 2400) + ((unint64_t)*(unsigned int *)(a1 + 2416) << 6))
    {
      *(_QWORD *)&v40[4] = *a3;
      v40[12] = *((_BYTE *)a3 + 8);
      v32[0] = v37;
      v32[1] = v38;
      v33 = v39;
      v34 = a4;
      v35[0] = *(_QWORD *)v40;
      *(_QWORD *)((char *)v35 + 5) = *(_QWORD *)&v40[5];
      return sub_1C622223C((uint64_t)v31, a1 + 2400, (uint64_t)v32, (__int128 *)&v34);
    }
    else
    {
      *(_DWORD *)(v17 + 40) = a4;
      v30 = *a3;
      *(_BYTE *)(v17 + 56) = *((_BYTE *)a3 + 8);
      *(_QWORD *)(v17 + 48) = v30;
    }
  }
  return result;
}

uint64_t sub_1C52F2D0C(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  llvm::MDNode *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  llvm::MDNode *v13;
  char v14;
  _DWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (*(_BYTE *)(result + 32))
  {
    if (*(_WORD *)(*a2 + 32)
      && a2[4] == 0
      && ((*(_QWORD *)(*(_QWORD *)a3 + 32) - *(_QWORD *)(*(_QWORD *)a3 + 24)) & 0x7FFFFFFF8) == 0)
    {
      v8 = result;
      result = sub_1C62223A0(result, a4);
      if ((_DWORD)result)
      {
        v9 = llvm::DIExpression::prepend(*(llvm::DIExpression **)a3, (const llvm::DIExpression *)8, 0);
        v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 16) + 88) + ((*a4 >> 38) & 0x3FFFFFCLL));
        v16 = 0;
        v17 = 0;
        v15[0] = 0;
        v15[1] = v10;
        v18 = 0;
        LOBYTE(v10) = *(_BYTE *)(a3 + 8);
        v13 = v9;
        v14 = v10;
        result = (uint64_t)sub_1C622243C((llvm::MachineFunction **)v8, (const llvm::MachineOperand *)v15, a2, (uint64_t *)&v13);
        v11 = result;
        v12 = *(unsigned int *)(v8 + 2432);
        if (v12 >= *(_DWORD *)(v8 + 2436))
        {
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 2424, v8 + 2440, v12 + 1, 8);
          LODWORD(v12) = *(_DWORD *)(v8 + 2432);
        }
        *(_QWORD *)(*(_QWORD *)(v8 + 2424) + 8 * v12) = v11;
        ++*(_DWORD *)(v8 + 2432);
      }
    }
  }
  return result;
}

uint64_t LiveDebugValues::InstrRefBasedLDV::transferDebugInstrRef(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  _QWORD *v35;
  unsigned int v36;
  _QWORD *v37;
  unint64_t v38;
  unint64_t v39;
  _DWORD *v40;
  _QWORD *v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  unint64_t v45;
  _DWORD *v46;
  BOOL v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int16 *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t *v63;
  uint64_t **v64;
  unint64_t v65;
  uint64_t **v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  unsigned __int16 v71;
  unsigned __int16 *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unsigned __int16 *v76;
  int v77;
  int v78;
  int v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  int v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  unint64_t LocationForMemOperand;
  uint64_t v104;
  unsigned int v105;
  LiveDebugValues::MLocTracker *v106;
  unint64_t v107;
  unsigned __int8 v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  char v115;
  __int128 v116;
  uint64_t v117;
  int8x16_t v118;
  char v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  _QWORD v123[4];

  v123[2] = *MEMORY[0x1E0C80C00];
  if (**(_WORD **)(a2 + 16) != 15)
    return 0;
  v6 = a2;
  if (!*(_QWORD *)(a1 + 368) && !*(_QWORD *)(a1 + 376))
    return 0;
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(v8 + 112);
  v10 = *(_DWORD **)(a2 + 56);
  if (v10[2] == 2)
    v11 = *((_QWORD *)v10 - 1);
  else
    v11 = 0;
  v13 = *(_DWORD *)(v8 + 16);
  v14 = *(_DWORD *)(v8 + 48);
  v117 = *(_QWORD *)(v8 + 80);
  if (v9)
  {
    llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v9 + 24), *(uint64_t **)(v9 + 32), &v118);
  }
  else
  {
    v118.i8[0] = 0;
    v119 = 0;
  }
  v120 = v11;
  if (llvm::LexicalScopes::findLexicalScope((int8x8_t *)(a1 + 128), (const llvm::DILocation *)v10))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 32);
    v17 = v123;
    v121 = v123;
    v122 = 0x400000000;
    v18 = *(_DWORD **)(v16 + 920);
    v19 = *(unsigned int *)(v16 + 928);
    v20 = v18;
    if ((_DWORD)v19)
    {
      v20 = *(_DWORD **)(v16 + 920);
      v21 = *(unsigned int *)(v16 + 928);
      do
      {
        v22 = v21 >> 1;
        v23 = &v20[5 * (v21 >> 1)];
        if (*v23 < v13 || *v23 <= v13 && v23[1] < v14)
        {
          v20 = v23 + 5;
          v22 = v21 + ~v22;
        }
        v21 = v22;
      }
      while (v22);
    }
    if (v20 != &v18[5 * v19] && *v20 == v13 && v20[1] == v14)
    {
      v24 = 0;
      do
      {
        v13 = v20[2];
        v14 = v20[3];
        v25 = v20[4];
        if (v25)
        {
          if (v24 >= HIDWORD(v122))
          {
            v109 = v9;
            v29 = v17;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v121, (uint64_t)v17, v24 + 1, 4);
            v17 = v29;
            v9 = v109;
            v24 = v122;
          }
          *((_DWORD *)v121 + v24) = v25;
          v24 = v122 + 1;
          LODWORD(v122) = v122 + 1;
          v18 = *(_DWORD **)(v16 + 920);
          v19 = *(unsigned int *)(v16 + 928);
        }
        v20 = v18;
        if (v19)
        {
          v20 = v18;
          v26 = v19;
          do
          {
            v27 = v26 >> 1;
            v28 = &v20[5 * (v26 >> 1)];
            if (*v28 < v13 || v13 >= *v28 && v28[1] < v14)
            {
              v20 = v28 + 5;
              v27 = v26 + ~v27;
            }
            v26 = v27;
          }
          while (v27);
        }
      }
      while (v20 != &v18[5 * v19] && *v20 == v13 && v20[1] == v14);
    }
    v30 = a1 + 632;
    v31 = *(_QWORD **)(a1 + 632);
    if (!v31)
      goto LABEL_48;
    v32 = a1 + 632;
    do
    {
      v33 = v31[4];
      v34 = v33 >= v13;
      if (v33 >= v13)
        v35 = v31;
      else
        v35 = v31 + 1;
      if (v34)
        v32 = (uint64_t)v31;
      v31 = (_QWORD *)*v35;
    }
    while (*v35);
    if (v32 == v30 || *(_QWORD *)(v32 + 32) > (unint64_t)v13)
LABEL_48:
      v32 = a1 + 632;
    v36 = *(_DWORD *)(a1 + 656);
    if (v36)
    {
      v37 = *(_QWORD **)(a1 + 648);
      v38 = *(unsigned int *)(a1 + 656);
      do
      {
        v39 = v38 >> 1;
        v40 = &v37[5 * (v38 >> 1)];
        v42 = *v40;
        v41 = v40 + 10;
        v38 += ~(v38 >> 1);
        if (v13 > v42)
          v37 = v41;
        else
          v38 = v39;
      }
      while (v38);
    }
    else
    {
      v37 = *(_QWORD **)(a1 + 648);
    }
    if (v32 == v30)
    {
      if (v37 == (_QWORD *)(*(_QWORD *)(a1 + 648) + 40 * v36) || *v37 != v13)
        goto LABEL_99;
      v48 = v17;
      v49 = LiveDebugValues::InstrRefBasedLDV::resolveDbgPHIs(a1, v15, a3, a4, v6, v13);
      v17 = v48;
      v50 = v49;
      v52 = v51;
    }
    else
    {
      v43 = *(_QWORD *)(v32 + 40);
      v44 = *(_DWORD *)(*(_QWORD *)(v43 + 24) + 24);
      if (v14 == 1000000)
      {
        v45 = *(_QWORD *)(v43 + 48);
        if (v45 >= 8)
        {
          if ((v45 & 7) == 0)
          {
            *(_QWORD *)(v43 + 48) = v45 & 0xFFFFFFFFFFFFFFF8;
LABEL_134:
            v102 = v17;
            LocationForMemOperand = LiveDebugValues::InstrRefBasedLDV::findLocationForMemOperand((LiveDebugValues::InstrRefBasedLDV *)a1, (const llvm::MachineInstr *)v43);
            if (!HIDWORD(LocationForMemOperand))
            {
              v50 = 0;
              v52 = 0;
              v17 = v102;
              goto LABEL_100;
            }
            v50 = *(_QWORD *)&v44 & 0xFFFFFLL | ((*(_DWORD *)(v32 + 48) & 0xFFFFFLL) << 20) | (LocationForMemOperand << 40);
            v52 = 1;
            v17 = v102;
            goto LABEL_74;
          }
          v46 = (_DWORD *)(v45 & 0xFFFFFFFFFFFFFFF8);
          v47 = (*(_QWORD *)(v43 + 48) & 7) != 3 || v46 == 0;
          if (!v47 && *v46 == 1)
            goto LABEL_134;
        }
LABEL_99:
        v50 = 0;
        v52 = 0;
LABEL_100:
        *(_QWORD *)&v116 = v9;
        BYTE8(v116) = 0;
        v81 = *(_QWORD *)(a1 + 368);
        if (v81)
        {
          v83 = v17;
          sub_1C62202D8(v81, v6, &v116, v50, v52);
          v17 = v83;
        }
        v82 = *(_QWORD *)(a1 + 376);
        if (!v82)
        {
LABEL_103:
          if (v121 != v17)
            free(v121);
          return 1;
        }
        v84 = *(_DWORD *)(*(_QWORD *)(a1 + 352) + 40);
        v85 = v52;
        if (!v84)
        {
          v86 = v17;
          v87 = 0;
          v88 = 0;
          v89 = 0;
LABEL_123:
          sub_1C52F2A10(v82, v6, (uint64_t *)&v116, v88 | (v89 << 8) | (v87 << 32));
          if (v85
            && !(_DWORD)v87
            && (v50 & 0xFFFFF) == *(_DWORD *)(a1 + 360)
            && ((v50 >> 20) & 0xFFFFF) > *(unsigned int *)(a1 + 364))
          {
            v96 = *(_QWORD *)(a1 + 376);
            v97 = 96;
            if (**(_WORD **)(v6 + 16) == 14)
              v97 = 32;
            v114 = *(_QWORD *)(*(_QWORD *)(v6 + 32) + v97 + 16);
            v115 = 0;
            sub_1C6220714(v96, (uint64_t)&v117, &v114, v50);
          }
          LiveDebugValues::MLocTracker::emitLoc(*(_QWORD *)(a1 + 352), v88 | (v89 << 8) | (v87 << 32), (uint64_t)&v117, (uint64_t)&v116);
          v99 = v98;
          v100 = *(_QWORD *)(a1 + 376);
          v101 = *(unsigned int *)(v100 + 2432);
          if (v101 >= *(_DWORD *)(v100 + 2436))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v100 + 2424, v100 + 2440, v101 + 1, 8);
            LODWORD(v101) = *(_DWORD *)(v100 + 2432);
          }
          *(_QWORD *)(*(_QWORD *)(v100 + 2424) + 8 * v101) = v99;
          ++*(_DWORD *)(v100 + 2432);
          sub_1C62207C8(*(_QWORD *)(a1 + 376), v6, 0);
          v17 = v86;
          goto LABEL_103;
        }
        v90 = 0;
        v89 = 0;
        v91 = 0;
        v88 = 0;
        v87 = 0;
        v113 = v17;
        while (1)
        {
          if (v85)
          {
            v92 = *(_QWORD *)(a1 + 352);
            if (*(_QWORD *)(*(_QWORD *)(v92 + 32) + 8 * v91) == v50)
            {
              if ((_DWORD)v87
                && (v93 = *(_QWORD *)(v92 + 88), v94 = *(_DWORD *)(v92 + 236), *(_DWORD *)(v93 + 4 * v91) < v94))
              {
                v95 = v88 | (v89 << 8);
                if (*(_DWORD *)(v93 + 4 * v95) < v94)
                {
                  if ((LiveDebugValues::InstrRefBasedLDV::isCalleeSaved((_QWORD *)a1, v95) & 1) != 0)
                  {
                    v87 = 1;
                  }
                  else
                  {
                    v87 = 1;
                    if (LiveDebugValues::InstrRefBasedLDV::isCalleeSaved((_QWORD *)a1, v91))
                    {
                      v88 = v91;
                      v89 = v90 >> 8;
                    }
                  }
                  v17 = v113;
                  goto LABEL_119;
                }
              }
              else
              {
                v88 = v91;
                v89 = v90 >> 8;
              }
              v87 = 1;
            }
          }
LABEL_119:
          v90 = v91 + 1;
          v91 = (v91 + 1);
          if (v84 == v90)
          {
            v86 = v17;
            v82 = *(_QWORD *)(a1 + 376);
            goto LABEL_123;
          }
        }
      }
      if (v14 >= *(_DWORD *)(v43 + 40))
        goto LABEL_99;
      v53 = *(_QWORD *)(v43 + 32);
      if ((*(_DWORD *)(v53 + 32 * v14) & 0x10000FF) != 0x1000000)
        goto LABEL_99;
      v54 = *(unsigned int *)(v53 + 32 * v14 + 4);
      if (!(_DWORD)v54)
        goto LABEL_99;
      v50 = *(_QWORD *)&v44 & 0xFFFFFLL | ((*(_DWORD *)(v32 + 48) & 0xFFFFFLL) << 20) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 64) + 4 * v54) << 40);
      v52 = 1;
    }
LABEL_74:
    if (!v52 || !(_DWORD)v122)
      goto LABEL_100;
    v55 = 0;
    v56 = 0;
    v57 = *(_QWORD *)(a1 + 16);
    v58 = *(_QWORD *)(v57 + 96);
    v59 = 4 * v122;
    do
    {
      v60 = (unsigned __int16 *)(v58 + 4 * *(unsigned int *)((char *)v121 + v59 - 4));
      v55 += *v60;
      if (v56 - 1 >= v60[1])
        v56 = v60[1];
      v59 -= 4;
    }
    while (v59);
    v61 = *(_QWORD *)(a1 + 352);
    v62 = *(unsigned int *)(*(_QWORD *)(v61 + 88) + ((v50 >> 38) & 0x3FFFFFC));
    if (v62 < *(_DWORD *)(v61 + 236))
    {
      v63 = 0;
      v111 = (_QWORD *)(v57 + 8);
      v64 = *(uint64_t ***)(v57 + 248);
      v65 = v62 >> 3;
      v66 = *(uint64_t ***)(v57 + 240);
      do
      {
        if ((v62 - 1) <= 0x3FFFFFFE)
        {
          v67 = **v66;
          if (v65 < *(unsigned __int16 *)(v67 + 22)
            && ((1 << (v62 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v67 + 8) + v65)) != 0)
          {
            v63 = *v66;
          }
        }
        ++v66;
      }
      while (v66 != v64);
      if (v56 == *(_DWORD *)(*(_QWORD *)(v57 + 264)
                            + 24
                            * (*(unsigned __int16 *)(*v63 + 24)
                             + *(_DWORD *)(v57 + 272)
                             * (((unint64_t)v64 - *(_QWORD *)(v57 + 240)) >> 3)))
        && v55 == 0)
      {
        goto LABEL_100;
      }
      v69 = *(_QWORD *)(v57 + 56);
      v70 = *(unsigned int *)(*(_QWORD *)(v57 + 8) + 24 * v62 + 4);
      if (*(_WORD *)(v69 + 2 * v70))
      {
        v106 = *(LiveDebugValues::MLocTracker **)(a1 + 352);
        v107 = v50;
        v108 = v52;
        v110 = v9;
        v71 = *(_WORD *)(v69 + 2 * v70) + v62;
        v72 = (unsigned __int16 *)(v69 + 2 * v70 + 2);
        v112 = v17;
        while (1)
        {
          v73 = v6;
          v74 = v71;
          v75 = v62;
          v76 = (unsigned __int16 *)(v58 + 4 * llvm::MCRegisterInfo::getSubRegIndex(v111, v62, v71));
          v77 = v76[1];
          v78 = *v76;
          if (v56 == v77 && v55 == v78)
            break;
          v50 = 0;
          v52 = 0;
          v80 = *v72++;
          v71 = v80 + v74;
          v17 = v112;
          v62 = v75;
          v6 = v73;
          v9 = v110;
          if (!v80)
            goto LABEL_100;
        }
        v17 = v112;
        if ((_DWORD)v74)
        {
          v104 = *((_QWORD *)v106 + 8);
          v105 = *(_DWORD *)(v104 + 4 * v74);
          v6 = v73;
          if (v105 == -1)
          {
            v105 = LiveDebugValues::MLocTracker::trackRegister(v106, v74);
            v17 = v112;
            *(_DWORD *)(v104 + 4 * v74) = v105;
          }
          v52 = v108;
          v50 = v107 & 0xFFFFFFFFFFLL | ((unint64_t)v105 << 40);
          v9 = v110;
        }
        else
        {
          v50 = 0;
          v52 = 0;
          v6 = v73;
          v9 = v110;
        }
        goto LABEL_100;
      }
    }
    goto LABEL_99;
  }
  return 1;
}

unint64_t LiveDebugValues::InstrRefBasedLDV::resolveDbgPHIs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v17 = 0;
  if (sub_1C617A1AC(*(_QWORD *)(a1 + 1992), *(_DWORD *)(a1 + 2008), a5, &v17))
    v12 = v17 == *(_QWORD *)(a1 + 1992) + 24 * *(unsigned int *)(a1 + 2008);
  else
    v12 = 1;
  if (!v12)
    return *(_QWORD *)(v17 + 8);
  v13 = LiveDebugValues::InstrRefBasedLDV::resolveDbgPHIsImpl(a1, v11, a3, a4, a5, a6);
  v17 = a5;
  *(_QWORD *)&v18 = v13;
  *((_QWORD *)&v18 + 1) = v15;
  sub_1C6225784((uint64_t)&v16, a1 + 1992, &v17, &v18);
  return v13;
}

BOOL LiveDebugValues::InstrRefBasedLDV::transferDebugPHI(LiveDebugValues::InstrRefBasedLDV *this, llvm::MachineInstr *a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  LiveDebugValues::MLocTracker *v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _WORD *v32;
  int v33;
  unsigned __int16 v34;
  BOOL v35;
  int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned __int16 v39;
  unsigned __int16 *v40;
  LiveDebugValues::MLocTracker *v41;
  unsigned __int16 v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  unsigned __int16 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  __int16 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  int v67;
  char v68;

  v2 = **((unsigned __int16 **)a2 + 2);
  if (v2 != 16 || *((_QWORD *)this + 46) || *((_QWORD *)this + 47))
    return v2 == 16;
  v5 = *((_QWORD *)a2 + 4);
  v6 = *(unsigned int *)(v5 + 48);
  if (*(_BYTE *)v5 == 5)
  {
    if (*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 6) + 8)
                   + 40 * (*(_DWORD *)(*((_QWORD *)this + 6) + 32) + *(_DWORD *)(v5 + 16))
                   + 8) != -1)
    {
      v62 = 0;
      v47 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 5) + 232))(*((_QWORD *)this + 5), *(_QWORD *)(*((_QWORD *)a2 + 3) + 32));
      v48 = *((_QWORD *)this + 44);
      v59 = v62;
      v60 = v47;
      v61 = v49;
      v50 = LiveDebugValues::MLocTracker::getOrTrackSpillLoc(v48, &v59);
      if (HIDWORD(v50))
      {
        v51 = *((_QWORD *)this + 44);
        LODWORD(v63) = *(unsigned __int16 *)(*((_QWORD *)a2 + 4) + 80);
        v52 = v50 - 1;
        v53 = *(_DWORD *)(v51 + 240);
        v54 = sub_1C6222A6C(v51 + 776, (unsigned __int16 *)&v63);
        v55 = *((_QWORD *)this + 44);
        v56 = *(unsigned int *)(*(_QWORD *)(v55 + 64)
                              + 4 * (*((_DWORD *)v54 + 1) + v53 * v52 + *(_DWORD *)(v51 + 236)));
        v57 = *(_QWORD *)(*(_QWORD *)(v55 + 32) + 8 * v56);
        v58 = *((_QWORD *)a2 + 3);
        v63 = v6;
        v64 = v58;
        v65 = v57;
        v66 = 1;
        v67 = v56;
        v68 = 1;
        v13 = (char *)this + 648;
        goto LABEL_11;
      }
    }
LABEL_10:
    v13 = (char *)this + 648;
    v14 = *((_QWORD *)a2 + 3);
    v63 = v6;
    v64 = v14;
    LOBYTE(v65) = 0;
    v66 = 0;
    LOBYTE(v67) = 0;
    v68 = 0;
LABEL_11:
    v15 = sub_1C4A0EA78((uint64_t)v13, (unint64_t)&v63);
    v16 = *((_QWORD *)this + 81) + 40 * *((unsigned int *)this + 164);
    v17 = *(_QWORD *)(v15 + 32);
    v18 = *(_OWORD *)(v15 + 16);
    *(_OWORD *)v16 = *(_OWORD *)v15;
    *(_OWORD *)(v16 + 16) = v18;
    *(_QWORD *)(v16 + 32) = v17;
    ++*((_DWORD *)this + 164);
    return v2 == 16;
  }
  if (*(_BYTE *)v5)
    goto LABEL_10;
  v7 = *(unsigned int *)(v5 + 4);
  if (!(_DWORD)v7)
    goto LABEL_10;
  v8 = *((_QWORD *)this + 44);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = *(_DWORD *)(v9 + 4 * v7);
  if (v10 == -1)
  {
    v12 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), *(_DWORD *)(v5 + 4));
    *(_DWORD *)(v9 + 4 * v7) = v12;
    v11 = (LiveDebugValues::MLocTracker *)*((_QWORD *)this + 44);
    v9 = *((_QWORD *)v11 + 8);
    v10 = *(_DWORD *)(v9 + 4 * v7);
  }
  else
  {
    v11 = (LiveDebugValues::MLocTracker *)*((_QWORD *)this + 44);
    v12 = *(_DWORD *)(v9 + 4 * v7);
  }
  v20 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * v12);
  v21 = *((_QWORD *)a2 + 3);
  v63 = v6;
  v64 = v21;
  v65 = v20;
  v66 = 1;
  if (v10 == -1)
  {
    v10 = LiveDebugValues::MLocTracker::trackRegister(v11, v7);
    *(_DWORD *)(v9 + 4 * v7) = v10;
  }
  v67 = v10;
  v68 = 1;
  v22 = sub_1C4A0EA78((uint64_t)this + 648, (unint64_t)&v63);
  v23 = *((_QWORD *)this + 81) + 40 * *((unsigned int *)this + 164);
  v24 = *(_QWORD *)(v22 + 32);
  v25 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)v23 = *(_OWORD *)v22;
  *(_OWORD *)(v23 + 16) = v25;
  *(_QWORD *)(v23 + 32) = v24;
  ++*((_DWORD *)this + 164);
  v26 = *(_DWORD *)(v5 + 4);
  v27 = *((_QWORD *)this + 2);
  if (v27)
    v28 = (_QWORD *)(v27 + 8);
  else
    v28 = 0;
  v29 = ((unint64_t)*(unsigned int *)(*v28 + 24 * v26 + 16) >> 3) & 0x1FFFFFFE;
  v31 = v28[5];
  v30 = v28[6];
  v32 = (_WORD *)(v30 + v29 + 2);
  v33 = *(unsigned __int16 *)(v30 + v29) + (*(_DWORD *)(*v28 + 24 * v26 + 16) & 0xF) * v26;
  do
  {
    v34 = *(_WORD *)(v31 + 4 * (unsigned __int16)v33);
    if (v34)
      v35 = v30 == 0;
    else
      v35 = 1;
    if (!v35)
    {
      v37 = *(unsigned __int16 *)(v31 + 4 * (unsigned __int16)v33 + 2) << 16;
      v38 = (unsigned int *)(*v28 + 24 * *(unsigned __int16 *)(v31 + 4 * (unsigned __int16)v33) + 8);
      v39 = v34;
      while (1)
      {
        v40 = (unsigned __int16 *)(v30 + 2 * *v38);
        do
        {
          v41 = (LiveDebugValues::MLocTracker *)*((_QWORD *)this + 44);
          v42 = v39;
          v43 = *((_QWORD *)v41 + 8);
          if (*(_DWORD *)(v43 + 4 * v39) == -1)
            *(_DWORD *)(v43 + 4 * v39) = LiveDebugValues::MLocTracker::trackRegister(v41, v39);
          v44 = *v40++;
          v39 = v44 + v42;
        }
        while (v44);
        v45 = HIWORD(v37);
        if (HIWORD(v37))
        {
          v37 >>= 16;
        }
        else
        {
          if (!*v32)
            return v2 == 16;
          v33 += (unsigned __int16)*v32++;
          v46 = (unsigned __int16 *)(v28[5] + 4 * (unsigned __int16)v33);
          v45 = *v46;
          v37 = v46[1] << 16;
        }
        v39 = v45;
        v30 = v28[6];
        v38 = (unsigned int *)(*v28 + 24 * v45 + 8);
      }
    }
    v36 = (unsigned __int16)*v32++;
    v33 += v36;
  }
  while (v36);
  return v2 == 16;
}

void LiveDebugValues::InstrRefBasedLDV::transferRegisterDef(LiveDebugValues::InstrRefBasedLDV *this, llvm::MachineInstr *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  llvm::MachineInstr *v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  _BYTE *v17;
  _QWORD **v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _WORD *v27;
  int v28;
  uint64_t v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  unsigned int v33;
  unsigned int *j;
  unsigned __int16 *v35;
  int v36;
  unsigned __int16 *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t *i;
  unsigned int v42;
  llvm::MachineInstr *v43;
  uint64_t v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _BYTE *v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  _QWORD *v60;
  const llvm::MachineOperand **v61;
  uint64_t v62;
  const llvm::MachineOperand *v63;
  unint64_t SpillBaseRegAndOffset;
  uint64_t v65;
  unsigned int v66;
  unsigned int k;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  unint64_t v72;
  unsigned int *v73;
  uint64_t v74;
  LiveDebugValues::MLocTracker *v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  char *v79;
  char *v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  unint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t *m;
  unsigned int v98;
  llvm::MachineInstr *v99;
  uint64_t v100;
  _DWORD *v101;
  uint64_t v102;
  BOOL v103;
  llvm::MachineInstr *v104;
  unsigned int v105;
  void *v106;
  uint64_t v107;
  _BYTE v108[32];
  void *v109;
  uint64_t v110;
  _BYTE v111[32];
  void *v112;
  uint64_t v113;
  _BYTE v114[128];
  _QWORD **v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)a2 + 2);
  v104 = a2;
  if (*(_WORD *)v3 == 10)
  {
    v4 = *((_QWORD *)this + 44);
    v5 = *((_QWORD *)a2 + 4);
    v6 = *(unsigned int *)(v5 + 4);
    v7 = *(_QWORD *)(v4 + 64);
    v8 = *(_DWORD *)(v7 + 4 * v6);
    if (v8 == -1)
    {
      v8 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), *(_DWORD *)(v5 + 4));
      a2 = v104;
      *(_DWORD *)(v7 + 4 * v6) = v8;
    }
    if (*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8 * v8) >> 40)
      return;
  }
  else if ((*(_BYTE *)(v3 + 8) & 0x10) != 0)
  {
    return;
  }
  if (!*((_BYTE *)this + 2016))
    goto LABEL_21;
  v9 = *(_QWORD *)(*((_QWORD *)a2 + 2) + 8);
  v10 = (*((_WORD *)a2 + 22) & 0xC) != 0 && (*((_WORD *)a2 + 22) & 4) == 0;
  if (v10)
  {
    if ((v9 & 0x80) == 0)
    {
      v13 = a2;
      while ((*((_WORD *)v13 + 22) & 8) != 0)
      {
        v13 = (llvm::MachineInstr *)*((_QWORD *)v13 + 1);
        if ((*(_BYTE *)(*((_QWORD *)v13 + 2) + 8) & 0x80) != 0)
          goto LABEL_14;
      }
      goto LABEL_21;
    }
  }
  else if ((v9 & 0x80) == 0)
  {
LABEL_21:
    v103 = 0;
    goto LABEL_22;
  }
LABEL_14:
  v11 = *((_QWORD *)a2 + 4);
  if (*(_BYTE *)v11 != 9)
    goto LABEL_21;
  v12 = strcmp(*(const char **)(v11 + 16), *((const char **)this + 253));
  a2 = v104;
  v103 = v12 == 0;
LABEL_22:
  v112 = v114;
  v113 = 0x2000000000;
  v116 = 0;
  v117 = 0;
  v115 = &v116;
  v109 = v111;
  v110 = 0x400000000;
  v106 = v108;
  v107 = 0x400000000;
  v14 = *((unsigned int *)a2 + 10);
  if (!(_DWORD)v14)
  {
    v15 = 0;
    v16 = 1;
    v17 = v114;
    v18 = &v116;
    goto LABEL_76;
  }
  v19 = *((_QWORD *)a2 + 4);
  v20 = v19 + 32 * v14;
  do
  {
    if ((*(_DWORD *)v19 & 0x10000FF) != 0x1000000 || (v21 = *(_DWORD *)(v19 + 4), v21 - 1 > 0x3FFFFFFE))
    {
LABEL_68:
      if (*(_DWORD *)v19 == 12)
      {
        v47 = *(_QWORD *)(v19 + 16);
        v48 = v110;
        if (v110 >= (unint64_t)HIDWORD(v110))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)v111, v110 + 1, 8);
          v48 = v110;
        }
        *((_QWORD *)v109 + v48) = v47;
        LODWORD(v110) = v110 + 1;
        v49 = v107;
        if (v107 >= (unint64_t)HIDWORD(v107))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v107 + 1, 8);
          v49 = v107;
        }
        *((_QWORD *)v106 + v49) = v19;
        LODWORD(v107) = v107 + 1;
      }
      goto LABEL_74;
    }
    if (!v103)
    {
      v38 = *(_QWORD *)(*((_QWORD *)v104 + 2) + 8);
      if ((*((_WORD *)v104 + 22) & 0xC) != 0 && (*((_WORD *)v104 + 22) & 4) == 0)
      {
        v43 = v104;
        if ((v38 & 0x80) == 0)
        {
          while ((*((_WORD *)v43 + 22) & 8) != 0)
          {
            v43 = (llvm::MachineInstr *)*((_QWORD *)v43 + 1);
            if ((*(_BYTE *)(*((_QWORD *)v43 + 2) + 8) & 0x80) != 0)
              goto LABEL_51;
          }
          goto LABEL_28;
        }
      }
      else if ((v38 & 0x80) == 0)
      {
        goto LABEL_28;
      }
LABEL_51:
      v40 = *((_QWORD *)this + 44);
      if (*(_QWORD *)(v40 + 176))
      {
        for (i = *(uint64_t **)(v40 + 168); i; i = (uint64_t *)*i)
        {
          v42 = *((_DWORD *)i + 7);
          if (v42 <= v21)
          {
            if (v42 >= v21)
              goto LABEL_68;
            ++i;
          }
        }
      }
      else
      {
        v44 = *(unsigned int *)(v40 + 120);
        if ((_DWORD)v44)
        {
          v45 = *(_DWORD **)(v40 + 112);
          v46 = 4 * v44;
          while (*v45 != v21)
          {
            ++v45;
            v46 -= 4;
            if (!v46)
              goto LABEL_28;
          }
          if (v46)
            goto LABEL_68;
        }
      }
    }
LABEL_28:
    v22 = *((_QWORD *)this + 2);
    if (v22)
      v23 = (_QWORD *)(v22 + 8);
    else
      v23 = 0;
    v24 = ((unint64_t)*(unsigned int *)(*v23 + 24 * v21 + 16) >> 3) & 0x1FFFFFFE;
    v26 = v23[5];
    v25 = v23[6];
    v27 = (_WORD *)(v25 + v24 + 2);
    v28 = *(unsigned __int16 *)(v25 + v24) + (*(_DWORD *)(*v23 + 24 * v21 + 16) & 0xF) * v21;
    do
    {
      v29 = 4 * (unsigned __int16)v28;
      v30 = *(unsigned __int16 *)(v26 + v29);
      if (*(_WORD *)(v26 + v29))
        v31 = v25 == 0;
      else
        v31 = 1;
      if (!v31)
      {
        v33 = *(unsigned __int16 *)(v26 + 4 * (unsigned __int16)v28 + 2) << 16;
        for (j = (unsigned int *)(*v23 + 24 * *(unsigned __int16 *)(v26 + 4 * (unsigned __int16)v28) + 8);
              ;
              j = (unsigned int *)(*v23 + 24 * v30 + 8))
        {
          v35 = (unsigned __int16 *)(v25 + 2 * *j);
          do
          {
            v105 = (unsigned __int16)v30;
            sub_1C4879438((uint64_t)&v112, &v105);
            v36 = *v35++;
            v30 += v36;
          }
          while (v36);
          v30 = HIWORD(v33);
          if (HIWORD(v33))
          {
            v33 >>= 16;
          }
          else
          {
            if (!*v27)
              goto LABEL_74;
            v28 += (unsigned __int16)*v27++;
            v37 = (unsigned __int16 *)(v23[5] + 4 * (unsigned __int16)v28);
            v30 = *v37;
            v33 = v37[1] << 16;
          }
          v25 = v23[6];
        }
      }
      v32 = (unsigned __int16)*v27++;
      v28 += v32;
    }
    while (v32);
LABEL_74:
    v19 += 32;
  }
  while (v19 != v20);
  v17 = v112;
  v18 = v115;
  v15 = v113;
  v16 = v117 == 0;
LABEL_76:
  if (v16)
    v50 = v17;
  else
    v50 = v18;
  v51 = &v17[4 * v15];
  while (2)
  {
    if (v16)
    {
      if (v50 == (_QWORD *)v51)
        break;
      goto LABEL_84;
    }
    if (v50 != &v116)
    {
LABEL_84:
      v52 = (unsigned int *)v50 + 7;
      if (v16)
        v52 = (unsigned int *)v50;
      v53 = *v52;
      v54 = *((_QWORD *)this + 44);
      v55 = *((_DWORD *)this + 90);
      v56 = *((_DWORD *)this + 91);
      v57 = *(_QWORD *)(v54 + 64);
      v58 = *(_DWORD *)(v57 + 4 * v53);
      if (v58 == -1)
      {
        v58 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), *v52);
        *(_DWORD *)(v57 + 4 * v53) = v58;
      }
      *(_QWORD *)(*(_QWORD *)(v54 + 32) + 8 * v58) = *(_QWORD *)&v55 & 0xFFFFFLL | ((*(_QWORD *)&v56 & 0xFFFFFLL) << 20) | ((unint64_t)v58 << 40);
      if (v16)
      {
        v50 = (_QWORD *)((char *)v50 + 4);
      }
      else
      {
        v59 = (_QWORD *)v50[1];
        v60 = v50;
        if (v59)
        {
          do
          {
            v50 = v59;
            v59 = (_QWORD *)*v59;
          }
          while (v59);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v60[2];
            v10 = *v50 == (_QWORD)v60;
            v60 = v50;
          }
          while (!v10);
        }
      }
      continue;
    }
    break;
  }
  if ((_DWORD)v107)
  {
    v61 = (const llvm::MachineOperand **)v106;
    v62 = 8 * v107;
    do
    {
      v63 = *v61++;
      LiveDebugValues::MLocTracker::writeRegMask(*((_QWORD *)this + 44), v63, *((_DWORD *)this + 90), *((_DWORD *)this + 91));
      v62 -= 8;
    }
    while (v62);
  }
  if ((sub_1C62208A0((uint64_t)this, (uint64_t)v104) & 1) != 0)
  {
    SpillBaseRegAndOffset = LiveDebugValues::InstrRefBasedLDV::extractSpillBaseRegAndOffset(this, v104);
    if (HIDWORD(SpillBaseRegAndOffset))
    {
      v65 = *((_QWORD *)this + 44);
      v66 = *(_DWORD *)(v65 + 240);
      if (v66)
      {
        for (k = 0; k < v66; ++k)
        {
          v68 = *(unsigned int *)(*(_QWORD *)(v65 + 64)
                                + 4 * (k + *(_DWORD *)(v65 + 236) + v66 * ((_DWORD)SpillBaseRegAndOffset - 1)));
          *(_QWORD *)(*(_QWORD *)(v65 + 32) + 8 * v68) = *((_DWORD *)this + 90) & 0xFFFFFLL | ((*((_DWORD *)this + 91) & 0xFFFFFLL) << 20) | (v68 << 40);
          v65 = *((_QWORD *)this + 44);
          v66 = *(_DWORD *)(v65 + 240);
        }
      }
    }
  }
  if (*((_QWORD *)this + 47))
  {
    v69 = v117;
    if (v117)
      v70 = (char *)v115;
    else
      v70 = (char *)v112;
    v71 = (char *)v112 + 4 * v113;
LABEL_116:
    v72 = (unint64_t)v104;
    while (1)
    {
      if (v69)
      {
        if (v70 == (char *)&v116)
          goto LABEL_133;
      }
      else if (v70 == v71)
      {
LABEL_133:
        if (!(_DWORD)v107 || (v81 = *(_DWORD *)(*((_QWORD *)this + 44) + 40)) == 0)
        {
LABEL_135:
          if (sub_1C62208A0((uint64_t)this, (uint64_t)v104))
          {
            v82 = LiveDebugValues::InstrRefBasedLDV::extractSpillBaseRegAndOffset(this, v104);
            if (HIDWORD(v82))
            {
              v83 = *((_QWORD *)this + 44);
              v84 = *(_DWORD *)(v83 + 240);
              if (v84)
              {
                v85 = 0;
                v86 = v82 - 1;
                do
                {
                  sub_1C52F43AC(*((_QWORD *)this + 47), *(_DWORD *)(*(_QWORD *)(v83 + 64) + 4 * (v85 + *(_DWORD *)(v83 + 236) + v84 * v86)), (unint64_t)v104, 1);
                  ++v85;
                  v83 = *((_QWORD *)this + 44);
                  v84 = *(_DWORD *)(v83 + 240);
                }
                while (v85 < v84);
              }
            }
          }
          break;
        }
        v87 = 0;
        while (2)
        {
          v88 = *((_QWORD *)this + 44);
          v89 = *(unsigned int *)(*(_QWORD *)(v88 + 88) + 4 * v87);
          if (v89 < *(_DWORD *)(v88 + 236))
          {
            if (v103)
              goto LABEL_144;
            v95 = *(_QWORD *)(*((_QWORD *)v104 + 2) + 8);
            if ((*((_WORD *)v104 + 22) & 0xC) != 0 && (*((_WORD *)v104 + 22) & 4) == 0)
            {
              v99 = v104;
              if ((v95 & 0x80) != 0)
                goto LABEL_156;
              while ((*((_WORD *)v99 + 22) & 8) != 0)
              {
                v99 = (llvm::MachineInstr *)*((_QWORD *)v99 + 1);
                if ((*(_BYTE *)(*((_QWORD *)v99 + 2) + 8) & 0x80) != 0)
                  goto LABEL_156;
              }
              goto LABEL_144;
            }
            if ((v95 & 0x80) == 0)
              goto LABEL_144;
LABEL_156:
            if (*(_QWORD *)(v88 + 176))
            {
              for (m = *(uint64_t **)(v88 + 168); m; m = (uint64_t *)*m)
              {
                v98 = *((_DWORD *)m + 7);
                if (v98 <= v89)
                {
                  if (v98 >= v89)
                    goto LABEL_149;
                  ++m;
                }
              }
              goto LABEL_144;
            }
            v100 = *(unsigned int *)(v88 + 120);
            if (!(_DWORD)v100)
              goto LABEL_144;
            v101 = *(_DWORD **)(v88 + 112);
            v102 = 4 * v100;
            while (*v101 != (_DWORD)v89)
            {
              ++v101;
              v102 -= 4;
              if (!v102)
                goto LABEL_144;
            }
            if (!v102)
            {
LABEL_144:
              if ((_DWORD)v107)
              {
                v90 = (char *)v106;
                v91 = v89 >> 5;
                v92 = 1 << v89;
                v93 = 8 * v107;
                do
                {
                  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v90 + 16) + 4 * v91) & v92) == 0)
                    sub_1C52F43AC(*((_QWORD *)this + 47), v87, (unint64_t)v104, 0);
                  v90 += 8;
                  v93 -= 8;
                }
                while (v93);
              }
            }
          }
LABEL_149:
          v94 = v87 + 1;
          v87 = (v87 + 1);
          if (v81 == v94)
            goto LABEL_135;
          continue;
        }
      }
      v73 = (unsigned int *)(v70 + 28);
      if (!v69)
        v73 = (unsigned int *)v70;
      v74 = *v73;
      v75 = (LiveDebugValues::MLocTracker *)*((_QWORD *)this + 44);
      v76 = *((_QWORD *)v75 + 8);
      v77 = *(_DWORD *)(v76 + 4 * v74);
      if (v77 == -1)
      {
        v78 = LiveDebugValues::MLocTracker::trackRegister(v75, v74);
        v72 = (unint64_t)v104;
        v77 = v78;
        *(_DWORD *)(v76 + 4 * v74) = v78;
      }
      sub_1C52F43AC(*((_QWORD *)this + 47), v77, v72, 0);
      if (!v69)
      {
        v70 += 4;
        goto LABEL_116;
      }
      v79 = (char *)*((_QWORD *)v70 + 1);
      v80 = v70;
      v72 = (unint64_t)v104;
      if (v79)
      {
        do
        {
          v70 = v79;
          v79 = *(char **)v79;
        }
        while (v79);
      }
      else
      {
        do
        {
          v70 = (char *)*((_QWORD *)v80 + 2);
          v10 = *(_QWORD *)v70 == (_QWORD)v80;
          v80 = v70;
        }
        while (!v10);
      }
    }
  }
  if (v106 != v108)
    free(v106);
  if (v109 != v111)
    free(v109);
  sub_1C47655E8((uint64_t)&v115, v116);
  if (v112 != v114)
    free(v112);
}

void sub_1C52F43AC(uint64_t a1, unsigned int a2, unint64_t a3, char a4)
{
  uint64_t v8;
  unsigned int v9;
  int *v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  int v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t *v25;
  int *v26;
  uint64_t v27;
  uint64_t *v28;
  int *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t *i;
  _DWORD *v51;
  int *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[3];

  v8 = *(_QWORD *)(a1 + 2376);
  v9 = *(_DWORD *)(a1 + 2392);
  v10 = sub_1C6222D74(v8, v9, a2);
  if ((int *)(v8 + 208 * v9) == v10)
    return;
  v11 = 0;
  v12 = *(_QWORD *)(a1 + 2104);
  v13 = *(_QWORD *)(v12 + 8 * a2);
  v61 = v13;
  *(_QWORD *)(v12 + 8 * a2) = LiveDebugValues::ValueIDNum::EmptyValue;
  LOBYTE(v60) = 0;
  BYTE4(v60) = 0;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_DWORD *)(v14 + 40);
  if (v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v20 = *(_QWORD *)(v14 + 32);
    v21 = v60;
    do
    {
      v22 = *(_QWORD *)(v20 + 8 * v18);
      if (v19)
        v23 = 0;
      else
        v23 = v22 == v13;
      if (v23)
        v16 = 1;
      if (v22 == v13)
      {
        v21 = v17;
        v19 = 1;
      }
      v17 = v18 + 1;
      v18 = (v18 + 1);
    }
    while (v15 != v17);
    LODWORD(v60) = v21;
    BYTE4(v60) = v16;
    v11 = v19 != 0;
  }
  if (!v11 && (a4 & 1) == 0)
  {
    v24 = *((_QWORD *)v10 + 25);
    if (v24)
    {
      v26 = v10 + 48;
      v25 = (uint64_t *)*((_QWORD *)v10 + 23);
    }
    else
    {
      v25 = (uint64_t *)*((_QWORD *)v10 + 1);
      v26 = (int *)&v25[5 * v10[4]];
    }
    if (v25 != (uint64_t *)v26)
    {
      do
      {
        if (v24)
          v30 = v25 + 4;
        else
          v30 = v25;
        v62[0] = 0;
        if ((sub_1C52FE43C(*(_QWORD *)(a1 + 2400), *(_DWORD *)(a1 + 2416), v30, v62) & 1) != 0)
          v31 = v62[0];
        else
          v31 = *(_QWORD *)(a1 + 2400) + ((unint64_t)*(unsigned int *)(a1 + 2416) << 6);
        sub_1C52F2D0C(a1, v30, v31 + 48, &v61);
        if (v24)
        {
          v32 = (uint64_t *)v25[1];
          if (v32)
          {
            do
            {
              v33 = v32;
              v32 = (uint64_t *)*v32;
            }
            while (v32);
          }
          else
          {
            do
            {
              v33 = (uint64_t *)v25[2];
              v23 = *v33 == (_QWORD)v25;
              v25 = v33;
            }
            while (!v23);
          }
        }
        else
        {
          v33 = v25 + 5;
        }
        v25 = v33;
      }
      while (v33 != (uint64_t *)v26);
    }
    sub_1C62207C8(a1, a3, 0);
    return;
  }
  v57 = 0;
  v58 = 0;
  v59 = 0;
  v27 = *((_QWORD *)v10 + 25);
  if (v27)
  {
    v29 = v10 + 48;
    v28 = (uint64_t *)*((_QWORD *)v10 + 23);
  }
  else
  {
    v28 = (uint64_t *)*((_QWORD *)v10 + 1);
    v29 = (int *)&v28[5 * v10[4]];
  }
  if (v28 == (uint64_t *)v29)
    goto LABEL_70;
  v56 = a1 + 2424;
  v55 = a1 + 2440;
  do
  {
    if (v27)
      v34 = v28 + 4;
    else
      v34 = v28;
    v62[0] = 0;
    if ((sub_1C52FE43C(*(_QWORD *)(a1 + 2400), *(_DWORD *)(a1 + 2416), v34, v62) & 1) != 0)
      v35 = v62[0];
    else
      v35 = *(_QWORD *)(a1 + 2400) + ((unint64_t)*(unsigned int *)(a1 + 2416) << 6);
    v36 = (uint64_t *)(v35 + 48);
    if (*(_BYTE *)(a1 + 33)
      && (v37 = *v36) != 0
      && (v39 = v37 + 24, v38 = *(_QWORD **)(v37 + 24), ((*(_QWORD *)(v39 + 8) - (_QWORD)v38) & 0x7FFFFFFF8) != 0)
      && *v38 == 4099)
    {
      LiveDebugValues::MLocTracker::emitLoc(*(_QWORD *)(a1 + 16), a2 | 0x100000000, (uint64_t)v34, (uint64_t)v36);
      v41 = v40;
      v42 = *(unsigned int *)(a1 + 2432);
      if (v42 >= *(unsigned int *)(a1 + 2436))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v56, v55, v42 + 1, 8);
        v42 = *(unsigned int *)(a1 + 2432);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 2424) + 8 * v42) = v41;
      ++*(_DWORD *)(a1 + 2432);
      if (BYTE4(v60))
        goto LABEL_54;
    }
    else
    {
      v45 = BYTE4(v60);
      LiveDebugValues::MLocTracker::emitLoc(*(_QWORD *)(a1 + 16), v60, (uint64_t)v34, (uint64_t)v36);
      v47 = v46;
      v48 = *(unsigned int *)(a1 + 2432);
      if (v48 >= *(unsigned int *)(a1 + 2436))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v56, v55, v48 + 1, 8);
        v48 = *(unsigned int *)(a1 + 2432);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 2424) + 8 * v48) = v47;
      ++*(_DWORD *)(a1 + 2432);
      if (v45)
      {
LABEL_54:
        *(_DWORD *)(v35 + 40) = v60;
        sub_1C51B72F4((uint64_t)&v57, (uint64_t)v34, (uint64_t)v62);
        if (!v27)
          goto LABEL_65;
        goto LABEL_55;
      }
    }
    *(_QWORD *)v35 = 0;
    *(_QWORD *)(v35 + 8) = 0;
    *(_QWORD *)(v35 + 16) = 0;
    *(_BYTE *)(v35 + 24) = 1;
    *(_QWORD *)(v35 + 32) = 0;
    *(int32x2_t *)(a1 + 2408) = vadd_s32(*(int32x2_t *)(a1 + 2408), (int32x2_t)0x1FFFFFFFFLL);
    if (!v27)
    {
LABEL_65:
      v44 = v28 + 5;
      goto LABEL_66;
    }
LABEL_55:
    v43 = (uint64_t *)v28[1];
    if (v43)
    {
      do
      {
        v44 = v43;
        v43 = (uint64_t *)*v43;
      }
      while (v43);
    }
    else
    {
      do
      {
        v44 = (uint64_t *)v28[2];
        v23 = *v44 == (_QWORD)v28;
        v28 = v44;
      }
      while (!v23);
    }
LABEL_66:
    v28 = v44;
  }
  while (v44 != (uint64_t *)v29);
  if ((_DWORD)v58)
  {
    v49 = v57 + 40 * v59;
    v62[0] = v57;
    v62[1] = v49;
    sub_1C52FE9B4(v62);
    for (i = (unint64_t *)v62[0]; v62[0] != v49; i = (unint64_t *)v62[0])
    {
      v51 = sub_1C6221D58(a1 + 2376, (int *)&v60);
      sub_1C52FC1E8((uint64_t)(v51 + 2), i);
      v62[0] = (uint64_t)(i + 5);
      sub_1C52FE9B4(v62);
    }
  }
LABEL_70:
  if (BYTE4(v60))
    *(_QWORD *)(*(_QWORD *)(a1 + 2104) + 8 * v60) = v61;
  sub_1C62207C8(a1, a3, 0);
  v52 = sub_1C6222D74(*(_QWORD *)(a1 + 2376), *(_DWORD *)(a1 + 2392), a2);
  v54 = v52 + 48;
  v53 = (_QWORD *)*((_QWORD *)v52 + 24);
  v52[4] = 0;
  sub_1C61247C0((uint64_t)(v52 + 46), v53);
  *(v54 - 1) = v54;
  *v54 = 0;
  v54[1] = 0;
  MEMORY[0x1CAA32FB4](v57, 8);
}

BOOL LiveDebugValues::InstrRefBasedLDV::isLocationSpill(const llvm::TargetInstrInfo **this, const llvm::MachineInstr *a2, llvm::MachineFunction *a3, unsigned int *a4)
{
  unsigned int v8;
  int v9;

  if (!((unint64_t)LiveDebugValues::InstrRefBasedLDV::isSpillInstruction(this, a2, a3) >> 32))
    return 0;
  v9 = 0;
  v8 = (*(uint64_t (**)(const llvm::TargetInstrInfo *, const llvm::MachineInstr *, int *))(*(_QWORD *)this[4] + 112))(this[4], a2, &v9);
  *a4 = v8;
  return v8 != 0;
}

void sub_1C52F48D4(unint64_t *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v5;
  LiveDebugValues::MLocTracker *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  LiveDebugValues::MLocTracker *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *a1;
  v6 = *(LiveDebugValues::MLocTracker **)(*a1 + 352);
  v7 = a2;
  v8 = *((_QWORD *)v6 + 8);
  v9 = *(_DWORD *)(v8 + 4 * a2);
  if (v9 == -1)
  {
    v9 = LiveDebugValues::MLocTracker::trackRegister(v6, a2);
    *(_DWORD *)(v8 + 4 * v7) = v9;
    v10 = *(LiveDebugValues::MLocTracker **)(v5 + 352);
    v8 = *((_QWORD *)v10 + 8);
  }
  else
  {
    v10 = v6;
  }
  v11 = *(unsigned int *)(v8 + 4 * a3);
  *(_QWORD *)(*((_QWORD *)v10 + 4) + 8 * v11) = *(_QWORD *)(*((_QWORD *)v6 + 4) + 8 * v9);
  v12 = *(_QWORD *)(v5 + 376);
  if (v12)
    sub_1C52F4DE0(v12, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v5 + 352) + 64) + 4 * v7), v11, a1[1]);
}

uint64_t LiveDebugValues::InstrRefBasedLDV::transferRegisterCopy(LiveDebugValues::InstrRefBasedLDV *this, llvm::MachineInstr *a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  _WORD *v15;
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  int v21;
  uint64_t v22;
  unsigned __int16 *v24;
  unsigned int v25;
  __int16 v26;
  int v27;
  unsigned int v28;
  unsigned __int16 *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned __int16 *v39;
  _WORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int16 *v58;
  _WORD *v59;
  int v60;
  int v61;
  unsigned __int16 v62;
  BOOL v63;
  int v64;
  unsigned int v65;
  unsigned __int16 *v66;
  __int16 v67;
  int v68;
  unsigned int v69;
  unsigned __int16 *v70;
  unsigned __int16 *v71;
  unsigned int v72;
  __int16 v73;
  int v74;
  unsigned int v75;
  unsigned __int16 *v76;
  uint64_t v77;
  _DWORD *v78;
  unsigned __int8 v79;

  if (**((_WORD **)a2 + 2) == 19)
  {
    v4 = *((_QWORD *)a2 + 4);
    v5 = (_DWORD *)(v4 + 32);
    v77 = v4;
    v78 = (_DWORD *)(v4 + 32);
    v79 = 1;
  }
  else
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, llvm::MachineInstr *))(**((_QWORD **)this + 4) + 416))(&v77, *((_QWORD *)this + 4), a2);
    v6 = v79;
    if (!v79)
      return v6;
    v4 = v77;
    v5 = v78;
  }
  v7 = v5[1];
  v8 = *(unsigned int *)(v4 + 4);
  if ((_DWORD)v7 == (_DWORD)v8)
    return 1;
  if (byte_1ED8041C0)
  {
    v9 = *((_QWORD *)this + 2);
    v10 = v9 ? (uint64_t *)(v9 + 8) : 0;
    v11 = *v10;
    v13 = v10[5];
    v12 = v10[6];
    v14 = (unsigned __int16 *)(v12
                             + (((unint64_t)*(unsigned int *)(*v10 + 24 * v8 + 16) >> 3) & 0x1FFFFFFE));
    v16 = *v14;
    v15 = v14 + 1;
    v17 = v16 + (*(_DWORD *)(*v10 + 24 * v8 + 16) & 0xF) * v8;
    while (1)
    {
      v18 = 4 * (unsigned __int16)v17;
      v19 = *(unsigned __int16 *)(v13 + v18);
      if (*(_WORD *)(v13 + v18) && v12 != 0)
        break;
      v6 = 0;
      v21 = (unsigned __int16)*v15++;
      v17 += v21;
      if (!v21)
        return v6;
    }
    v22 = *((_QWORD *)this + 7);
    if (((*(_QWORD *)(v22 + ((v19 >> 3) & 0x1FF8)) >> v19) & 1) == 0)
    {
      v24 = (unsigned __int16 *)(v12 + 2 * *(unsigned int *)(v11 + 24 * v19 + 8));
      v25 = *(unsigned __int16 *)(v13 + 4 * (unsigned __int16)v17 + 2) << 16;
      do
      {
        v27 = *v24++;
        v26 = v27;
        if (v27)
        {
          LOWORD(v19) = v26 + v19;
        }
        else
        {
          v28 = HIWORD(v25);
          if (HIWORD(v25))
          {
            v25 >>= 16;
          }
          else
          {
            if (!*v15)
              return 0;
            v17 += (unsigned __int16)*v15++;
            v29 = (unsigned __int16 *)(v13 + 4 * (unsigned __int16)v17);
            v28 = *v29;
            v25 = v29[1] << 16;
          }
          LOWORD(v19) = v28;
          v24 = (unsigned __int16 *)(v12 + 2 * *(unsigned int *)(v11 + 24 * v28 + 8));
        }
      }
      while (((*(_QWORD *)(v22 + 8 * ((unsigned __int16)v19 >> 6)) >> v19) & 1) == 0);
    }
    if (((*v5 >> 26) & ~HIBYTE(*v5) & 1) == 0)
      return 0;
  }
  LiveDebugValues::InstrRefBasedLDV::performCopy((uint64_t)this, v5[1], v8);
  v30 = *((_QWORD *)this + 47);
  if (v30)
  {
    v31 = *((_QWORD *)this + 2);
    if (v31)
      v32 = (uint64_t *)(v31 + 8);
    else
      v32 = 0;
    v33 = *v32;
    v34 = *(_DWORD *)(*v32 + 24 * v8 + 16) & 0xF;
    v35 = ((unint64_t)*(unsigned int *)(*v32 + 24 * v8 + 16) >> 3) & 0x1FFFFFFE;
    v38 = v32 + 5;
    v37 = v32[5];
    v36 = v38[1];
    v39 = (unsigned __int16 *)(v36 + v35);
    v41 = *v39;
    v40 = v39 + 1;
    v42 = v41 + v34 * v8;
    while (1)
    {
      v43 = 4 * (unsigned __int16)v42;
      v44 = *(unsigned __int16 *)(v37 + v43);
      if (*(_WORD *)(v37 + v43) && v36 != 0)
        break;
      v46 = (unsigned __int16)*v40++;
      v42 += v46;
      if (!v46)
        goto LABEL_48;
    }
    v47 = *((_QWORD *)this + 7);
    if (((*(_QWORD *)(v47 + ((v44 >> 3) & 0x1FF8)) >> v44) & 1) == 0)
    {
      v71 = (unsigned __int16 *)(v36 + 2 * *(unsigned int *)(v33 + 24 * v44 + 8));
      v72 = *(unsigned __int16 *)(v37 + 4 * (unsigned __int16)v42 + 2) << 16;
      do
      {
        v74 = *v71++;
        v73 = v74;
        if (v74)
        {
          LOWORD(v44) = v73 + v44;
        }
        else
        {
          v75 = HIWORD(v72);
          if (HIWORD(v72))
          {
            v72 >>= 16;
          }
          else
          {
            if (!*v40)
              goto LABEL_48;
            v42 += (unsigned __int16)*v40++;
            v76 = (unsigned __int16 *)(v37 + 4 * (unsigned __int16)v42);
            v75 = *v76;
            v72 = v76[1] << 16;
          }
          LOWORD(v44) = v75;
          v71 = (unsigned __int16 *)(v36 + 2 * *(unsigned int *)(v33 + 24 * v75 + 8));
        }
      }
      while (((*(_QWORD *)(v47 + 8 * ((unsigned __int16)v44 >> 6)) >> v44) & 1) == 0);
    }
    if (((*v5 >> 26) & ~HIBYTE(*v5) & 1) != 0)
      sub_1C52F4DE0(v30, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 64) + 4 * v7), *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 64) + 4 * v8), (unint64_t)a2);
  }
LABEL_48:
  if (byte_1ED8041C0)
  {
    v48 = *((_QWORD *)this + 44);
    v49 = *((_DWORD *)this + 90);
    v50 = *((_DWORD *)this + 91);
    v51 = *(_QWORD *)(v48 + 64);
    v52 = *(_DWORD *)(v51 + 4 * v7);
    if (v52 == -1)
    {
      v52 = LiveDebugValues::MLocTracker::trackRegister(*((LiveDebugValues::MLocTracker **)this + 44), v7);
      *(_DWORD *)(v51 + 4 * v7) = v52;
    }
    *(_QWORD *)(*(_QWORD *)(v48 + 32) + 8 * v52) = *(_QWORD *)&v49 & 0xFFFFFLL | ((*(_QWORD *)&v50 & 0xFFFFFLL) << 20) | ((unint64_t)v52 << 40);
  }
  v53 = *((_QWORD *)this + 47);
  if (!v53)
    return 1;
  v54 = *((_QWORD *)this + 2);
  if (v54)
    v55 = (_QWORD *)(v54 + 8);
  else
    v55 = 0;
  v57 = v55[5];
  v56 = v55[6];
  v58 = (unsigned __int16 *)(v56
                           + (((unint64_t)*(unsigned int *)(*v55 + 24 * v8 + 16) >> 3) & 0x1FFFFFFE));
  v60 = *v58;
  v59 = v58 + 1;
  v61 = v60 + (*(_DWORD *)(*v55 + 24 * v8 + 16) & 0xF) * v8;
  do
  {
    v62 = *(_WORD *)(v57 + 4 * (unsigned __int16)v61);
    if (v62)
      v63 = v56 == 0;
    else
      v63 = 1;
    if (!v63)
    {
      v65 = *(unsigned __int16 *)(v57 + 4 * (unsigned __int16)v61 + 2) << 16;
      v66 = (unsigned __int16 *)(v56
                               + 2
                               * *(unsigned int *)(*v55
                                                 + 24 * *(unsigned __int16 *)(v57 + 4 * (unsigned __int16)v61)
                                                 + 8));
      while (1)
      {
        sub_1C52F43AC(v53, *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 44) + 64) + 4 * v62), (unint64_t)a2, 0);
        v68 = *v66++;
        v67 = v68;
        if (v68)
        {
          v62 += v67;
        }
        else
        {
          v69 = HIWORD(v65);
          if (HIWORD(v65))
          {
            v65 >>= 16;
          }
          else
          {
            if (!*v59)
              return 1;
            v61 += (unsigned __int16)*v59++;
            v70 = (unsigned __int16 *)(v55[5] + 4 * (unsigned __int16)v61);
            v69 = *v70;
            v65 = v70[1] << 16;
          }
          v62 = v69;
          v66 = (unsigned __int16 *)(v55[6] + 2 * *(unsigned int *)(*v55 + 24 * v69 + 8));
        }
        v53 = *((_QWORD *)this + 47);
      }
    }
    v64 = (unsigned __int16)*v59++;
    v61 += v64;
    v6 = 1;
  }
  while (v64);
  return v6;
}

void sub_1C52F4DE0(uint64_t a1, unsigned int a2, unsigned int a3, unint64_t a4)
{
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _DWORD *v12;
  _QWORD **v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD *v20;
  void *v21;
  _QWORD *v22;
  __int128 v23;
  _QWORD *v24;
  void **v25;
  void **v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD **v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  _DWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  __int128 v52;
  __int128 v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  unsigned int v62;
  unsigned int v63;
  unint64_t v64;
  void *v65;
  uint64_t v66;
  _BYTE v67[160];
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v62 = a3;
  v63 = a2;
  if (*(_QWORD *)(*(_QWORD *)(a1 + 2104) + 8 * a2) != *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 32) + 8 * a2))
    return;
  v5 = a1 + 2376;
  v6 = sub_1C6221D58(a1 + 2376, (int *)&v63);
  v7 = v6;
  v65 = v67;
  v66 = 0x400000000;
  if (v6[4])
    sub_1C6222DD8((uint64_t)&v65, (uint64_t)(v6 + 2));
  v69 = 0;
  v70 = 0;
  v68 = &v69;
  v8 = (_QWORD *)*((_QWORD *)v7 + 23);
  if (v8 != (_QWORD *)(v7 + 48))
  {
    do
    {
      sub_1C6222EB0(&v68, &v69, v8 + 4, (uint64_t)(v8 + 4));
      v9 = (_QWORD *)v8[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v8[2];
          v11 = *v10 == (_QWORD)v8;
          v8 = v10;
        }
        while (!v11);
      }
      v8 = v10;
    }
    while (v10 != (_QWORD *)(v7 + 48));
  }
  v60 = v5;
  v12 = sub_1C6221D58(v5, (int *)&v62);
  if ((void **)sub_1C6222DD8((uint64_t)(v12 + 2), (uint64_t)&v65) != &v65)
  {
    v13 = (_QWORD **)(v12 + 46);
    v14 = v68;
    if (!*((_QWORD *)v12 + 25))
      goto LABEL_18;
    v16 = v12 + 48;
    v15 = *((_QWORD *)v12 + 24);
    v17 = *((_QWORD *)v12 + 23);
    *((_QWORD *)v12 + 23) = v12 + 48;
    *(_QWORD *)(v15 + 16) = 0;
    *((_QWORD *)v12 + 24) = 0;
    *((_QWORD *)v12 + 25) = 0;
    v18 = *(_QWORD *)(v17 + 8) ? *(_QWORD *)(v17 + 8) : v17;
    if (v18)
    {
      v50 = sub_1C4FCE18C(v18);
      if (v14 == &v69)
      {
        v51 = (_QWORD *)v18;
        v19 = &v69;
      }
      else
      {
        do
        {
          v51 = v50;
          v52 = *((_OWORD *)v14 + 2);
          v53 = *((_OWORD *)v14 + 3);
          *(_QWORD *)(v18 + 64) = v14[8];
          *(_OWORD *)(v18 + 32) = v52;
          *(_OWORD *)(v18 + 48) = v53;
          v54 = (_QWORD *)*v16;
          v55 = (uint64_t *)(v12 + 48);
          v56 = (uint64_t *)(v12 + 48);
          if (*v16)
          {
            do
            {
              while (1)
              {
                v55 = v54;
                if (!sub_1C52EBD0C((unint64_t *)(v18 + 32), v54 + 4))
                  break;
                v54 = (_QWORD *)*v55;
                v56 = v55;
                if (!*v55)
                  goto LABEL_77;
              }
              v54 = (_QWORD *)v55[1];
            }
            while (v54);
            v56 = v55 + 1;
          }
LABEL_77:
          *(_QWORD *)v18 = 0;
          *(_QWORD *)(v18 + 8) = 0;
          *(_QWORD *)(v18 + 16) = v55;
          *v56 = v18;
          v57 = (_QWORD *)**v13;
          if (v57)
          {
            *v13 = v57;
            v18 = *v56;
          }
          sub_1C4768E74(*((uint64_t **)v12 + 24), (uint64_t *)v18);
          ++*((_QWORD *)v12 + 25);
          if (v50)
            v50 = sub_1C4FCE18C((uint64_t)v50);
          else
            v50 = 0;
          v58 = (_QWORD *)v14[1];
          if (v58)
          {
            do
            {
              v19 = (_QWORD **)v58;
              v58 = (_QWORD *)*v58;
            }
            while (v58);
          }
          else
          {
            do
            {
              v19 = (_QWORD **)v14[2];
              v11 = *v19 == v14;
              v14 = v19;
            }
            while (!v11);
          }
          if (!v51)
            break;
          v14 = v19;
          v18 = (uint64_t)v51;
        }
        while (v19 != &v69);
      }
      sub_1C61247C0((uint64_t)(v12 + 46), v51);
      if (v50)
      {
        do
        {
          v59 = v50;
          v50 = (_QWORD *)v50[2];
        }
        while (v50);
        sub_1C61247C0((uint64_t)(v12 + 46), v59);
      }
    }
    else
    {
LABEL_18:
      v19 = (_QWORD **)v14;
    }
    if (v19 != &v69)
    {
      v20 = v12 + 48;
      do
      {
        v21 = operator new(0x48uLL);
        v22 = v19[8];
        v23 = *((_OWORD *)v19 + 3);
        *((_OWORD *)v21 + 2) = *((_OWORD *)v19 + 2);
        *((_OWORD *)v21 + 3) = v23;
        *((_QWORD *)v21 + 8) = v22;
        v24 = (_QWORD *)*v20;
        v25 = (void **)(v12 + 48);
        v26 = (void **)(v12 + 48);
        if (*v20)
        {
          do
          {
            while (1)
            {
              v25 = (void **)v24;
              if (!sub_1C52EBD0C((unint64_t *)v21 + 4, v24 + 4))
                break;
              v24 = *v25;
              v26 = v25;
              if (!*v25)
                goto LABEL_27;
            }
            v24 = v25[1];
          }
          while (v24);
          v26 = v25 + 1;
        }
LABEL_27:
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
        *((_QWORD *)v21 + 2) = v25;
        *v26 = v21;
        v27 = (_QWORD *)**v13;
        if (v27)
        {
          *v13 = v27;
          v21 = *v26;
        }
        sub_1C4768E74(*((uint64_t **)v12 + 24), (uint64_t *)v21);
        ++*((_QWORD *)v12 + 25);
        v28 = v19[1];
        if (v28)
        {
          do
          {
            v29 = (_QWORD **)v28;
            v28 = (_QWORD *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            v29 = (_QWORD **)v19[2];
            v11 = *v29 == v19;
            v19 = v29;
          }
          while (!v11);
        }
        v19 = v29;
      }
      while (v29 != &v69);
    }
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 2104) + 8 * v62) = *(_QWORD *)(*(_QWORD *)(a1 + 2104) + 8 * v63);
  v30 = v70;
  if (v70)
    v31 = v68;
  else
    v31 = (uint64_t *)v65;
  v32 = (uint64_t *)((char *)v65 + 40 * v66);
  while (!v30)
  {
    if (v31 == v32)
      goto LABEL_65;
LABEL_43:
    if (v30)
      v33 = v31 + 4;
    else
      v33 = v31;
    v64 = 0;
    if ((sub_1C52FE43C(*(_QWORD *)(a1 + 2400), *(_DWORD *)(a1 + 2416), v33, (uint64_t *)&v64) & 1) != 0)
      v34 = v64;
    else
      v34 = *(_QWORD *)(a1 + 2400) + ((unint64_t)*(unsigned int *)(a1 + 2416) << 6);
    v35 = v62;
    *(_DWORD *)(v34 + 40) = v62;
    if (*(_BYTE *)(a1 + 33)
      && (v36 = v34 + 48, (v37 = *(_QWORD *)(v34 + 48)) != 0)
      && (v39 = v37 + 24, v38 = *(_QWORD **)(v37 + 24), ((*(_QWORD *)(v39 + 8) - (_QWORD)v38) & 0x7FFFFFFF8) != 0)
      && *v38 == 4099)
    {
      v40 = *(_QWORD *)(a1 + 16);
      v41 = v63 | 0x100000000;
    }
    else
    {
      v40 = *(_QWORD *)(a1 + 16);
      v36 = v34 + 48;
      v41 = v35 | 0x100000000;
    }
    LiveDebugValues::MLocTracker::emitLoc(v40, v41, (uint64_t)v33, v36);
    v43 = v42;
    v44 = *(unsigned int *)(a1 + 2432);
    if (v44 >= *(unsigned int *)(a1 + 2436))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 2424, a1 + 2440, v44 + 1, 8);
      v44 = *(unsigned int *)(a1 + 2432);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 2424) + 8 * v44) = v43;
    ++*(_DWORD *)(a1 + 2432);
    if (v30)
    {
      v45 = (uint64_t *)v31[1];
      v46 = v31;
      if (v45)
      {
        do
        {
          v31 = v45;
          v45 = (uint64_t *)*v45;
        }
        while (v45);
      }
      else
      {
        do
        {
          v31 = (uint64_t *)v46[2];
          v11 = *v31 == (_QWORD)v46;
          v46 = v31;
        }
        while (!v11);
      }
    }
    else
    {
      v31 += 5;
    }
  }
  if (v31 != (uint64_t *)&v69)
    goto LABEL_43;
LABEL_65:
  v47 = sub_1C6221D58(v60, (int *)&v63);
  v49 = v47 + 48;
  v48 = (_QWORD *)*((_QWORD *)v47 + 24);
  v47[4] = 0;
  sub_1C61247C0((uint64_t)(v47 + 46), v48);
  *(v49 - 1) = v49;
  *v49 = 0;
  v49[1] = 0;
  sub_1C62207C8(a1, a4, 0);
  if (byte_1ED8041C0)
    *(_QWORD *)(*(_QWORD *)(a1 + 2104) + 8 * v63) = LiveDebugValues::ValueIDNum::EmptyValue;
  sub_1C61247C0((uint64_t)&v68, v69);
  if (v65 != v67)
    free(v65);
}

void LiveDebugValues::InstrRefBasedLDV::accumulateFragmentMap(LiveDebugValues::InstrRefBasedLDV *this, llvm::MachineInstr *a2)
{
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  __int128 v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char v31[24];
  __int128 v32;
  uint64_t *v33;
  __int128 v34;
  char v35;
  uint64_t v36;
  void *v37[2];
  _BYTE v38[16];
  uint64_t *v39;
  __int128 v40;
  void *v41;
  uint64_t v42;
  _BYTE v43[48];
  _QWORD *v44[3];
  uint64_t *v45;
  uint64_t v46;
  _BYTE v47[64];
  _QWORD **v48;
  _QWORD *v49[5];

  v49[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v3 = **((unsigned __int16 **)a2 + 2);
  v4 = v3 == 14;
  v5 = *((_QWORD *)a2 + 4);
  v6 = *(uint64_t **)(v5 + ((unint64_t)(v3 != 14) << 6) + 16);
  v7 = 96;
  if (v4)
    v7 = 32;
  v8 = *(_QWORD *)(v5 + v7 + 16);
  v9 = *((_QWORD *)a2 + 7);
  if (*(_DWORD *)(v9 + 8) == 2)
    v10 = *(_QWORD *)(v9 - 8);
  else
    v10 = 0;
  v33 = v6;
  if (!v8)
  {
    LOBYTE(v34) = 0;
    v35 = 0;
    v36 = v10;
    goto LABEL_10;
  }
  llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v8 + 24), *(uint64_t **)(v8 + 32), (int8x16_t *)&v34);
  v6 = v33;
  v36 = v10;
  if (!v35)
  {
LABEL_10:
    v11 = xmmword_1C85F6FF0;
    goto LABEL_11;
  }
  v11 = v34;
LABEL_11:
  v32 = v11;
  v45 = v6;
  v39 = 0;
  if (!sub_1C52EDDE4((uint64_t)this + 1968, &v45, &v39)
    || (v12 = v39, v39 == (uint64_t *)(*((_QWORD *)this + 246) + 112 * *((unsigned int *)this + 496))))
  {
    v45 = (uint64_t *)v47;
    v46 = 0x400000000;
    v49[0] = 0;
    v49[1] = 0;
    v48 = v49;
    sub_1C52EDCBC((uint64_t)&v45, (unint64_t *)&v32);
    v39 = v6;
    *(_QWORD *)&v40 = &v41;
    *((_QWORD *)&v40 + 1) = 0x400000000;
    if ((_DWORD)v46)
      sub_1C52EE358((uint64_t)&v40, (uint64_t)&v45);
    sub_1C52EE438((uint64_t)v44, &v48);
    sub_1C52EDE7C((_DWORD *)this + 492, &v39, (uint64_t)&v40, (uint64_t)v37);
    sub_1C61247C0((uint64_t)v44, v44[1]);
    if ((void **)v40 != &v41)
      free((void *)v40);
    v40 = v32;
    v37[0] = v38;
    v37[1] = (void *)0x100000000;
    v39 = v6;
    v41 = v43;
    v42 = 0x100000000;
    sub_1C52EE630((uint64_t)this + 1944, &v39, (uint64_t)&v41, (uint64_t)v31);
    if (v41 != v43)
      free(v41);
    if (v37[0] != v38)
      free(v37[0]);
    sub_1C61247C0((uint64_t)&v48, v49[0]);
    if (v45 != (uint64_t *)v47)
      free(v45);
  }
  else
  {
    v40 = v32;
    v45 = (uint64_t *)v47;
    v46 = 0x100000000;
    v39 = v6;
    v41 = v43;
    v42 = 0x100000000;
    sub_1C52EE630((uint64_t)this + 1944, &v39, (uint64_t)&v41, (uint64_t)v37);
    if (v41 != v43)
      free(v41);
    if (v45 != (uint64_t *)v47)
      free(v45);
    if (v38[0])
    {
      v13 = v12[13];
      v30 = (uint64_t)(v12 + 1);
      if (v13)
      {
        v14 = v12 + 12;
        v15 = (uint64_t *)v12[11];
      }
      else
      {
        v15 = (uint64_t *)v12[1];
        v14 = &v15[2 * *((unsigned int *)v12 + 4)];
      }
      if (v15 != v14)
      {
        v16 = v37[0];
        v28 = (char *)v37[0] + 40;
        v29 = (char *)v37[0] + 24;
        do
        {
          if (v13)
            v17 = v15 + 4;
          else
            v17 = v15;
          v19 = *v17;
          v18 = v17[1];
          if ((_QWORD)v32 + *((_QWORD *)&v32 + 1) > v18 && *v17 + v18 > *((_QWORD *)&v32 + 1))
          {
            v21 = *((unsigned int *)v16 + 8);
            if (v21 >= *((unsigned int *)v16 + 9))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v29, (uint64_t)v28, v21 + 1, 16);
              v21 = *((unsigned int *)v16 + 8);
            }
            v22 = (_QWORD *)(v16[3] + 16 * v21);
            *v22 = v19;
            v22[1] = v18;
            ++*((_DWORD *)v16 + 8);
            v39 = v33;
            v40 = *(_OWORD *)v17;
            v45 = 0;
            if ((sub_1C52EE728((uint64_t *)this + 243, &v39, &v45) & 1) != 0)
              v23 = v45;
            else
              v23 = (uint64_t *)(*((_QWORD *)this + 243) + 56 * *((unsigned int *)this + 490));
            v24 = v32;
            v25 = *((unsigned int *)v23 + 8);
            if (v25 >= *((unsigned int *)v23 + 9))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v23 + 3), (uint64_t)(v23 + 5), v25 + 1, 16);
              v24 = v32;
              v25 = *((unsigned int *)v23 + 8);
            }
            *(_OWORD *)(v23[3] + 16 * v25) = v24;
            ++*((_DWORD *)v23 + 8);
          }
          if (v13)
          {
            v26 = (uint64_t *)v15[1];
            if (v26)
            {
              do
              {
                v27 = v26;
                v26 = (uint64_t *)*v26;
              }
              while (v26);
            }
            else
            {
              do
              {
                v27 = (uint64_t *)v15[2];
                v4 = *v27 == (_QWORD)v15;
                v15 = v27;
              }
              while (!v4);
            }
          }
          else
          {
            v27 = v15 + 2;
          }
          v15 = v27;
        }
        while (v27 != v14);
      }
      sub_1C52EDCBC(v30, (unint64_t *)&v32);
    }
  }
}

char **LiveDebugValues::InstrRefBasedLDV::produceMLocTransferFunction(uint64_t a1, uint64_t a2, _QWORD *a3, unsigned int a4)
{
  int v6;
  uint64_t i;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t j;
  unint64_t v14;
  int v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t **v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  char *v41;
  unint64_t v42;
  uint64_t *k;
  unsigned int v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  char *v50;
  char *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  int *v57;
  int v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int m;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v85;
  int v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char v91;
  void *v92;
  uint64_t v93;
  _BYTE v94[48];
  int v95;
  char *v96;
  uint64_t v97;
  _QWORD v98[290];

  v98[288] = *MEMORY[0x1E0C80C00];
  v96 = (char *)v98;
  v97 = 0x2000000000;
  v85 = a4;
  sub_1C52A51A8((uint64_t)&v96, a4);
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16);
  if ((_DWORD)v97)
  {
    v75 = v96;
    v76 = 72 * v97;
    do
    {
      v77 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16);
      v78 = *((unsigned int *)v75 + 2);
      if ((*((_DWORD *)v75 + 16) & 0x3F) != 0)
        *(_QWORD *)(*(_QWORD *)v75 + 8 * v78 - 8) |= -1 << (*((_DWORD *)v75 + 16) & 0x3F);
      v79 = v78;
      *((_DWORD *)v75 + 16) = v77;
      v80 = v77 + 63;
      if ((_DWORD)v78 != (v77 + 63) >> 6)
      {
        v81 = v80 >> 6;
        if (v78 > v81)
        {
          *((_DWORD *)v75 + 2) = v81;
          v79 = v80 >> 6;
        }
        else
        {
          v82 = v78;
          if (v81 > *((_DWORD *)v75 + 3))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v75, (uint64_t)(v75 + 16), v81, 8);
            v82 = *((unsigned int *)v75 + 2);
            v79 = *((_DWORD *)v75 + 2);
          }
          if (v81 != v78)
            memset((void *)(*(_QWORD *)v75 + 8 * v82), 255, 8 * (v81 - v78));
          v79 += v81 - v78;
          *((_DWORD *)v75 + 2) = v79;
          v77 = *((_DWORD *)v75 + 16);
        }
      }
      v83 = v77 & 0x3F;
      if (v83)
        *(_QWORD *)(*(_QWORD *)v75 + 8 * v79 - 8) &= ~(-1 << v83);
      v75 += 72;
      v76 -= 72;
    }
    while (v76);
  }
  for (i = *(_QWORD *)(a2 + 328); i != a2 + 320; i = *(_QWORD *)(i + 8))
  {
    v8 = *(_DWORD *)(i + 24);
    *(_DWORD *)(a1 + 360) = v8;
    *(_DWORD *)(a1 + 364) = 1;
    v9 = *(_QWORD *)(a1 + 352);
    *(_DWORD *)(v9 + 256) = 0;
    *(_DWORD *)(v9 + 232) = v8;
    v10 = *(_DWORD *)(v9 + 40);
    if (v10)
    {
      v11 = 0;
      do
      {
        *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8 * v11) = *(_DWORD *)(v9 + 232) & 0xFFFFF | (unint64_t)(v11 << 40);
        v12 = v11 + 1;
        v11 = (v11 + 1);
      }
      while (v10 != v12);
    }
    for (j = *(_QWORD *)(i + 56); j != i + 48; j = *(_QWORD *)(j + 8))
    {
      LiveDebugValues::InstrRefBasedLDV::process((LiveDebugValues::InstrRefBasedLDV *)a1, (llvm::MachineInstr *)j, 0, 0);
      if (**(unsigned __int16 **)(j + 16) - 13 <= 2)
        LiveDebugValues::InstrRefBasedLDV::accumulateFragmentMap((LiveDebugValues::InstrRefBasedLDV *)a1, (llvm::MachineInstr *)j);
      v14 = *(unsigned int *)(j + 64);
      v15 = *(_DWORD *)(a1 + 364);
      if ((_DWORD)v14)
      {
        v16 = (uint64_t **)(a1 + 632);
        while (1)
        {
          v17 = *v16;
          v18 = v16;
          if (!*v16)
            break;
          while (1)
          {
            v16 = (uint64_t **)v17;
            v19 = v17[4];
            if (v19 > v14)
              break;
            if (v19 >= v14)
              goto LABEL_21;
            v17 = v16[1];
            if (!v17)
            {
              v18 = v16 + 1;
              goto LABEL_17;
            }
          }
        }
LABEL_17:
        v20 = operator new(0x38uLL);
        v20[4] = v14;
        v20[5] = j;
        *((_DWORD *)v20 + 12) = v15;
        *v20 = 0;
        v20[1] = 0;
        v20[2] = v16;
        *v18 = v20;
        v21 = **(_QWORD **)(a1 + 624);
        if (v21)
        {
          *(_QWORD *)(a1 + 624) = v21;
          v22 = *v18;
        }
        else
        {
          v22 = v20;
        }
        sub_1C4768E74(*(uint64_t **)(a1 + 632), v22);
        ++*(_QWORD *)(a1 + 640);
        v15 = *(_DWORD *)(a1 + 364);
      }
LABEL_21:
      *(_DWORD *)(a1 + 364) = v15 + 1;
      if ((*(_BYTE *)j & 4) == 0)
      {
        while ((*(_WORD *)(j + 44) & 8) != 0)
          j = *(_QWORD *)(j + 8);
      }
    }
    v23 = *(_QWORD *)(a1 + 352);
    v24 = *(_DWORD *)(v23 + 40);
    if (v24)
    {
      v25 = 0;
      v26 = 0;
      do
      {
        v27 = *(_QWORD *)(v23 + 32);
        v28 = *(_QWORD *)(v27 + 8 * v26);
        if ((v28 & 0xFFFFF00000) != 0 || v28 >> 40 != v26)
        {
          v30 = *a3 + 72 * *(unsigned int *)(a1 + 360);
          LODWORD(v89) = v25;
          v90 = v28;
          sub_1C6224590((uint64_t)&v92, v30, (int *)&v89, &v90);
          if (!v94[0])
            *((_QWORD *)v92 + 1) = *(_QWORD *)(v27 + 8 * v26);
        }
        v25 = v26 + 1;
        v26 = (v26 + 1);
      }
      while (v24 != v25);
      v23 = *(_QWORD *)(a1 + 352);
    }
    v31 = *(unsigned int *)(v23 + 256);
    if ((_DWORD)v31)
    {
      v32 = *(uint64_t **)(v23 + 248);
      v33 = 16 * v31;
      do
      {
        v34 = *v32;
        v32 += 2;
        sub_1C5109220((uint64_t)&v96[72 * *(unsigned int *)(a1 + 360)], *(unsigned int **)(v34 + 16), (v6 + 31) >> 5);
        v33 -= 16;
      }
      while (v33);
    }
  }
  v35 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16);
  v92 = v94;
  v93 = 0x600000000;
  sub_1C4765AA4((char *)&v92, (v35 + 63) >> 6, 0);
  v95 = v35;
  v36 = *(_QWORD *)(a1 + 352);
  v37 = *(_DWORD *)(v36 + 40);
  if (v37)
  {
    v38 = 0;
    v39 = *(_QWORD *)(v36 + 88);
    v40 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 16);
    v41 = (char *)v92;
    do
    {
      v42 = *(unsigned int *)(v39 + 4 * v38);
      if (v42 < v40)
      {
        if (*(_QWORD *)(v36 + 176))
        {
          for (k = *(uint64_t **)(v36 + 168); k; k = (uint64_t *)*k)
          {
            v44 = *((_DWORD *)k + 7);
            if (v42 >= v44)
            {
              if (v44 >= v42)
                goto LABEL_57;
              ++k;
            }
          }
        }
        else
        {
          v45 = *(unsigned int *)(v36 + 120);
          if ((_DWORD)v45)
          {
            v46 = *(_DWORD **)(v36 + 112);
            v47 = 4 * v45;
            while (*v46 != (_DWORD)v42)
            {
              ++v46;
              v47 -= 4;
              if (!v47)
                goto LABEL_56;
            }
            if (v47)
              goto LABEL_57;
          }
        }
LABEL_56:
        *(_QWORD *)&v41[(v42 >> 3) & 0x1FFFFFF8] |= 1 << v42;
      }
LABEL_57:
      v48 = v38 + 1;
      v38 = (v38 + 1);
    }
    while (v37 != v48);
  }
  if (a4)
  {
    v49 = 0;
    do
    {
      v50 = v96;
      v51 = &v96[72 * v49];
      v52 = *(_QWORD **)v51;
      v53 = *((unsigned int *)v51 + 2);
      if ((_DWORD)v53)
      {
        v54 = 8 * v53;
        v55 = *(_QWORD **)v51;
        do
        {
          *v55 = ~*v55;
          ++v55;
          v54 -= 8;
        }
        while (v54);
      }
      v56 = &v50[72 * v49];
      v58 = *((_DWORD *)v56 + 16);
      v57 = (int *)(v56 + 64);
      v59 = v58 & 0x3F;
      if ((v58 & 0x3F) != 0)
        v52[v53 - 1] &= ~(-1 << v59);
      v60 = v93;
      if (v93 >= v53)
        v61 = v53;
      else
        v61 = v93;
      if ((_DWORD)v61)
      {
        v62 = (uint64_t *)v92;
        v63 = v52;
        v64 = v61;
        do
        {
          v65 = *v62++;
          *v63++ &= v65;
          --v64;
        }
        while (v64);
      }
      if (v53 > v60)
      {
        do
        {
          v52[v61] = 0;
          LODWORD(v61) = v61 + 1;
        }
        while ((_DWORD)v53 != (_DWORD)v61);
      }
      v66 = sub_1C476B7EC((uint64_t)v51);
      if (v66 != -1)
      {
        for (m = v66; m != -1; m = sub_1C476BA0C(v51, m + 1, *v57, 1u))
        {
          v68 = *a3 + 72 * v49;
          v69 = v49 & 0xFFFFF | ((unint64_t)*(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 64) + 4 * m) << 40) | 0x100000;
          v87 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 64) + 4 * m);
          v88 = v69;
          sub_1C6224590((uint64_t)&v89, v68, &v87, &v88);
          if (!v91)
          {
            v70 = *(_QWORD *)(v89 + 8);
            v71 = v70 & 0xFFFFF;
            v72 = v70 & 0xFFFFF00000;
            if (v71 == v49 && v72 == 0)
              *(_QWORD *)(v89 + 8) = v69;
          }
        }
      }
      ++v49;
    }
    while (v49 != v85);
  }
  if (v92 != v94)
    free(v92);
  return sub_1C61B56BC(&v96);
}

uint64_t LiveDebugValues::InstrRefBasedLDV::mlocJoin(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int8x16_t *v13;
  int8x16_t *v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD v31[9];

  v31[8] = *MEMORY[0x1E0C80C00];
  v29 = v31;
  v30 = 0x800000000;
  v9 = *(uint64_t **)(a2 + 64);
  v10 = *(uint64_t **)(a2 + 72);
  if (v9 == v10)
  {
    v28 = a1;
    v14 = (int8x16_t *)v31;
    v13 = (int8x16_t *)v31;
LABEL_9:
    v15 = 0;
    goto LABEL_10;
  }
  LODWORD(v11) = 0;
  do
  {
    v12 = *v9;
    if (v11 >= HIDWORD(v30))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v29, (uint64_t)v31, v11 + 1, 8);
      LODWORD(v11) = v30;
    }
    *((_QWORD *)v29 + v11) = v12;
    v11 = (v30 + 1);
    LODWORD(v30) = v30 + 1;
    ++v9;
  }
  while (v9 != v10);
  v13 = (int8x16_t *)v29;
  v14 = (int8x16_t *)((char *)v29 + 8 * v11);
  v28 = a1;
  if (!(_DWORD)v11)
    goto LABEL_9;
  v15 = 126 - 2 * __clz(v11);
LABEL_10:
  sub_1C52FF9C0(v13, v14, &v28, v15, 1);
  if ((_DWORD)v30)
  {
    v16 = *(_DWORD *)(*(_QWORD *)(a1 + 352) + 40);
    if (v16)
    {
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(*a4 + 8 * *(int *)(*(_QWORD *)v29 + 24)) + 8 * v18);
        v20 = *(_DWORD *)(a2 + 24) & 0xFFFFF | (unint64_t)(v18 << 40);
        v21 = *(_QWORD *)(*a5 + 8 * v18);
        if (v21 == v20)
          break;
        if (v21 != v19)
          goto LABEL_22;
LABEL_23:
        v26 = v18 + 1;
        v18 = (v18 + 1);
        if (v16 == v26)
          goto LABEL_26;
      }
      if (v30 >= 2)
      {
        v22 = 0;
        v23 = v30 - 1;
        v24 = (char *)v29 + 8;
        do
        {
          v25 = *(_QWORD *)(*(_QWORD *)(*a4 + 8 * *(int *)(*(_QWORD *)v24 + 24)) + 8 * v18);
          if (v19 != v25)
            v22 |= v25 != v20;
          v24 += 8;
          --v23;
        }
        while (v23);
        if ((v22 & 1) != 0)
          goto LABEL_23;
      }
LABEL_22:
      *(_QWORD *)(*a5 + 8 * v18) = v19;
      v17 = 1;
      goto LABEL_23;
    }
  }
  v17 = 0;
LABEL_26:
  if (v29 != v31)
    free(v29);
  return v17 & 1;
}

uint64_t LiveDebugValues::InstrRefBasedLDV::findStackIndexInterference(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned __int16 *v12;
  uint64_t v13;
  unsigned __int16 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  int v17;
  int v18;
  unsigned __int16 *v21;
  int v22;
  unsigned __int16 *v23;
  int v24;
  int v25;
  uint64_t v28;

  v4 = *(_QWORD *)(a1 + 352);
  v28 = 0;
  result = sub_1C6222AD8(*(_QWORD *)(v4 + 776), *(_DWORD *)(v4 + 792), 8u, 0, &v28);
  if ((result & 1) != 0)
    v6 = v28;
  else
    v6 = *(_QWORD *)(v4 + 776) + 8 * *(unsigned int *)(v4 + 792);
  v7 = *(_DWORD *)(v6 + 4);
  v8 = *(unsigned int *)(a2 + 8);
  if (v8 >= *(_DWORD *)(a2 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v8 + 1, 4);
    LODWORD(v8) = *(_DWORD *)(a2 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a2 + 4 * v8) = v7;
  v9 = *(_DWORD *)(a2 + 8) + 1;
  *(_DWORD *)(a2 + 8) = v9;
  v10 = *(_QWORD *)(a1 + 352);
  v11 = *(_DWORD *)(v10 + 784);
  v12 = *(unsigned __int16 **)(v10 + 776);
  v13 = *(unsigned int *)(v10 + 792);
  v14 = &v12[4 * v13];
  if (v11)
  {
    if ((_DWORD)v13)
    {
      v15 = 8 * v13;
      v16 = v12;
      while (1)
      {
        v17 = *v16;
        v18 = v16[1];
        if ((v17 != 0xFFFF || v18 != 0xFFFF) && (v17 != 65534 || v18 != 65534))
          break;
        v16 += 4;
        v15 -= 8;
        if (!v15)
          goto LABEL_19;
      }
    }
    else
    {
      v16 = v12;
    }
  }
  else
  {
LABEL_19:
    v16 = &v12[4 * v13];
  }
  v21 = &v12[4 * v13];
  while (v16 != v21)
  {
    if (v16[1])
    {
      v22 = *((_DWORD *)v16 + 1);
      if (v9 >= *(_DWORD *)(a2 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v9 + 1, 4);
        v9 = *(_DWORD *)(a2 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a2 + 4 * v9) = v22;
      v9 = *(_DWORD *)(a2 + 8) + 1;
      *(_DWORD *)(a2 + 8) = v9;
    }
    v23 = v16 + 4;
    v16 = v14;
    if (v23 != v14)
    {
      v16 = v23;
      while (1)
      {
        v24 = *v16;
        v25 = v16[1];
        if ((v24 != 0xFFFF || v25 != 0xFFFF) && (v24 != 65534 || v25 != 65534))
          break;
        v16 += 4;
        if (v16 == v14)
        {
          v16 = v14;
          break;
        }
      }
    }
  }
  return result;
}

void LiveDebugValues::InstrRefBasedLDV::placeMLocPHIs(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  _QWORD **v13;
  _BYTE *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _WORD *v24;
  unsigned __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int *v38;
  unsigned int *v39;
  _DWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  _DWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  unsigned int v48;
  unsigned int v49;
  _QWORD *v50;
  _BYTE *v51;
  int *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD **v61;
  char *v62;
  char *v63;
  _DWORD *v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  unsigned __int16 *v76;
  uint64_t v77;
  unsigned __int16 *v78;
  uint64_t v79;
  unsigned __int16 *v80;
  int v81;
  int v82;
  BOOL v83;
  unsigned __int16 *v85;
  unsigned int v86;
  unsigned int v87;
  BOOL v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int16 *v93;
  int v94;
  int v95;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  uint64_t v104;
  LiveDebugValues::MLocTracker *v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int16 *v116;
  _WORD *v117;
  int v118;
  int v119;
  unsigned int v120;
  BOOL v121;
  int v122;
  char *v123;
  char *v124;
  unsigned int v125;
  unsigned __int16 *v126;
  unsigned __int16 v127;
  int v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  __int16 v133;
  int v134;
  unsigned int v135;
  unsigned __int16 *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  char *v141;
  int v142;
  uint64_t v143[5];
  void *v144;
  uint64_t v145;
  _BYTE v146[32];
  unsigned int *v147;
  _QWORD *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  _BYTE v152[128];
  _QWORD **v153;
  _QWORD *v154;
  uint64_t v155;
  _DWORD *v156;
  uint64_t v157;
  _BYTE v158[128];
  _QWORD **v159;
  _QWORD *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  _BYTE v164[128];
  char *v165;
  _QWORD *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  _QWORD v170[4];

  v170[2] = *MEMORY[0x1E0C80C00];
  v168 = (char *)v170;
  v169 = 0x400000000;
  LiveDebugValues::InstrRefBasedLDV::findStackIndexInterference(a1, (uint64_t)&v168);
  v163 = 0x2000000000;
  v166 = 0;
  v167 = 0;
  v165 = (char *)&v166;
  v157 = 0x2000000000;
  v161 = 0;
  v162 = v164;
  v159 = &v160;
  v160 = 0;
  v150 = v152;
  v151 = 0x2000000000;
  v155 = 0;
  v156 = v158;
  v153 = &v154;
  v154 = 0;
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 352) + 40);
  if (!v10)
  {
    v11 = 0;
    v12 = 1;
    v13 = &v160;
    v14 = v158;
    goto LABEL_69;
  }
  v137 = a5;
  v138 = a2;
  v139 = a3;
  v15 = 0;
  v16 = 0;
  v140 = *(_DWORD *)(*(_QWORD *)(a1 + 352) + 40);
  do
  {
    v17 = *(_QWORD *)(a1 + 352);
    v18 = *(_DWORD *)(*(_QWORD *)(v17 + 88) + 4 * v16);
    v19 = *(_DWORD *)(v17 + 236);
    if (v18 < v19)
    {
      v20 = 0;
      v144 = v146;
      v145 = 0x800000000;
      v148 = 0;
      v149 = 0;
      v147 = (unsigned int *)&v148;
      v21 = *(_QWORD *)(a1 + 16);
      if (v21)
        v22 = (_QWORD *)(v21 + 8);
      else
        v22 = 0;
      v23 = *(unsigned int *)(*v22 + 24 * v18 + 16);
      v24 = (_WORD *)(v22[6] + ((v23 >> 3) & 0x1FFFFFFE));
      v25 = *v24 + (v23 & 0xF) * v18;
      do
      {
        v26 = *(_QWORD *)(a1 + 16);
        if (v26)
          v27 = v26 + 8;
        else
          v27 = 0;
        v28 = *(_QWORD *)(v27 + 40);
        v29 = v25;
        v30 = *(unsigned __int16 *)(v28 + 4 * v25);
        if (v30)
        {
          v31 = *(unsigned __int16 *)(v28 + 4 * v29 + 2);
          do
          {
            v32 = v31;
            if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 64) + 4 * v30) == -1)
            {
              v20 = 1;
            }
            else
            {
              LODWORD(v143[0]) = v30;
              sub_1C484FF44((uint64_t)&v144, (unsigned int *)v143);
            }
            v31 = 0;
            v30 = v32;
          }
          while (v32);
        }
        v33 = (unsigned __int16)v24[1];
        ++v24;
        v25 = v33 + v29;
      }
      while (v33);
      if ((v20 & 1) == 0)
      {
        v35 = v149;
        if (v149)
          v36 = v147;
        else
          v36 = (unsigned int *)v144;
        if (v149)
          v37 = (unsigned int *)&v148;
        else
          v37 = (unsigned int *)((char *)v144 + 4 * v145);
        while (1)
        {
          while (v35)
          {
            if (v36 == v37)
              goto LABEL_62;
            sub_1C4879438((uint64_t)&v162, v36 + 7);
            v38 = (unsigned int *)*((_QWORD *)v36 + 1);
            v39 = v36;
            if (v38)
            {
              do
              {
                v36 = v38;
                v38 = *(unsigned int **)v38;
              }
              while (v38);
            }
            else
            {
              do
              {
                v36 = (unsigned int *)*((_QWORD *)v39 + 2);
                v83 = *(_QWORD *)v36 == (_QWORD)v39;
                v39 = v36;
              }
              while (!v83);
            }
          }
          if (v36 == v37)
            goto LABEL_62;
          sub_1C4879438((uint64_t)&v162, v36++);
        }
      }
      if (!v161)
      {
        v44 = v156;
        v45 = v157;
        if (!(_DWORD)v157)
          goto LABEL_59;
        v46 = 4 * v157;
        v47 = v156;
        while (*v47 != v15)
        {
          ++v47;
          v46 -= 4;
          if (!v46)
            goto LABEL_58;
        }
        if (v46)
          goto LABEL_62;
LABEL_58:
        if (v157 < 0x20)
        {
LABEL_59:
          if (v157 >= HIDWORD(v157))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v156, (uint64_t)v158, v157 + 1, 4);
            v44 = v156;
            v45 = v157;
          }
          v44[v45] = v15;
          LODWORD(v157) = v157 + 1;
          goto LABEL_62;
        }
        do
        {
          v49 = v156[v45 - 1];
          sub_1C5244698((uint64_t *)&v159, v49, v49);
          LODWORD(v45) = v157 - 1;
          LODWORD(v157) = v157 - 1;
        }
        while ((_DWORD)v157);
      }
      sub_1C5244698((uint64_t *)&v159, v15, v15);
LABEL_62:
      sub_1C47655E8((uint64_t)&v147, v148);
      if (v144 != v146)
        free(v144);
      v10 = v140;
      goto LABEL_65;
    }
    v34 = (v18 - v19) / *(_DWORD *)(v17 + 240) + 1;
    if (v155)
      goto LABEL_23;
    v40 = v150;
    v41 = v151;
    if ((_DWORD)v151)
    {
      v42 = 4 * v151;
      v43 = v150;
      while (*v43 != v34)
      {
        ++v43;
        v42 -= 4;
        if (!v42)
          goto LABEL_51;
      }
      if (v42)
        goto LABEL_65;
LABEL_51:
      if (v151 >= 0x20)
      {
        do
        {
          v48 = *(_DWORD *)&v150[4 * v41 - 4];
          sub_1C5244698((uint64_t *)&v153, v48, v48);
          LODWORD(v41) = v151 - 1;
          LODWORD(v151) = v151 - 1;
        }
        while ((_DWORD)v151);
LABEL_23:
        sub_1C5244698((uint64_t *)&v153, v34, v34);
        goto LABEL_65;
      }
    }
    if (v151 >= HIDWORD(v151))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v150, (uint64_t)v152, v151 + 1, 4);
      v40 = v150;
      v41 = v151;
    }
    v40[v41] = v34;
    LODWORD(v151) = v151 + 1;
LABEL_65:
    v15 = v16 + 1;
    v16 = (v16 + 1);
  }
  while (v10 != v15);
  v14 = v156;
  v13 = v159;
  v11 = v157;
  v12 = v161 == 0;
  a3 = v139;
  a5 = v137;
  a2 = v138;
LABEL_69:
  v143[4] = a3;
  v144 = v146;
  v145 = 0x2000000000;
  v143[0] = a1;
  v143[1] = a5;
  v143[2] = a2;
  v143[3] = (uint64_t)&v144;
  if (v12)
    v50 = v14;
  else
    v50 = v13;
  v51 = &v14[4 * v11];
  while (2)
  {
    if (v12)
    {
      if (v50 == (_QWORD *)v51)
        break;
      goto LABEL_77;
    }
    if (v50 != &v160)
    {
LABEL_77:
      v52 = (int *)v50 + 7;
      if (v12)
        v52 = (int *)v50;
      v53 = *v52;
      sub_1C52F6CF8(v143, *v52);
      if ((_DWORD)v145)
      {
        v54 = (uint64_t *)v144;
        v55 = 8 * v145;
        do
        {
          v56 = *v54++;
          *(_QWORD *)(*(_QWORD *)(*a4 + 8 * *(int *)(v56 + 24)) + 8 * v53) = *(_DWORD *)(v56 + 24) & 0xFFFFFLL | (v53 << 40);
          v55 -= 8;
        }
        while (v55);
      }
      if (v12)
      {
        v50 = (_QWORD *)((char *)v50 + 4);
      }
      else
      {
        v57 = (_QWORD *)v50[1];
        v58 = v50;
        if (v57)
        {
          do
          {
            v50 = v57;
            v57 = (_QWORD *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v58[2];
            v83 = *v50 == (_QWORD)v58;
            v58 = v50;
          }
          while (!v83);
        }
      }
      continue;
    }
    break;
  }
  v59 = v155;
  if (v155)
    v60 = v153;
  else
    v60 = v150;
  v141 = &v150[4 * v151];
  while (1)
  {
    v61 = v59 ? &v154 : (_QWORD **)v141;
    if (v60 == v61)
      break;
    if ((_DWORD)v169)
    {
      v62 = v168;
      v63 = &v168[4 * v169];
      v64 = (_DWORD *)v60 + 7;
      if (!v59)
        v64 = v60;
      v65 = *v64 - 1;
      do
      {
        v142 = *(_DWORD *)v62;
        v66 = *(_QWORD *)(a1 + 352);
        v67 = v142 + *(_DWORD *)(v66 + 240) * v65 + *(_DWORD *)(v66 + 236);
        v68 = *(unsigned int *)(*(_QWORD *)(v66 + 64) + 4 * v67);
        sub_1C52F6CF8(v143, *(_DWORD *)(*(_QWORD *)(v66 + 64) + 4 * v67));
        if ((_DWORD)v145)
        {
          v69 = (uint64_t *)v144;
          v70 = 8 * v145;
          do
          {
            v71 = *v69++;
            *(_QWORD *)(*(_QWORD *)(*a4 + 8 * *(int *)(v71 + 24)) + 8 * v68) = *(_DWORD *)(v71 + 24) & 0xFFFFFLL | (v68 << 40);
            v70 -= 8;
          }
          while (v70);
        }
        v72 = sub_1C6224098(*(_QWORD *)(a1 + 352) + 800, &v142);
        v73 = *((unsigned __int16 *)v72 + 3);
        v74 = *(_QWORD *)(a1 + 352);
        v75 = *(_DWORD *)(v74 + 784);
        v76 = *(unsigned __int16 **)(v74 + 776);
        v77 = *(unsigned int *)(v74 + 792);
        v78 = &v76[4 * v77];
        if (v75)
        {
          if (v77)
          {
            v79 = 8 * v77;
            v80 = v76;
            while (1)
            {
              v81 = *v80;
              v82 = v80[1];
              v83 = v81 == 0xFFFF && v82 == 0xFFFF;
              if (!v83 && (v81 != 65534 || v82 != 65534))
                break;
              v80 += 4;
              v79 -= 8;
              if (!v79)
                goto LABEL_118;
            }
          }
          else
          {
            v80 = v76;
          }
        }
        else
        {
LABEL_118:
          v80 = &v76[4 * v77];
        }
        v85 = &v76[4 * v77];
        if (v80 != v85)
        {
          v86 = v73 + *((unsigned __int16 *)v72 + 2);
          do
          {
            v87 = v80[1];
            v88 = v87 + *v80 > v73 && v86 > v87;
            if (v88 && (_DWORD)v145)
            {
              v89 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 64)
                                    + 4
                                    * (*((_DWORD *)v80 + 1)
                                                   + *(_DWORD *)(*(_QWORD *)(a1 + 352) + 240) * v65
                                                   + *(_DWORD *)(*(_QWORD *)(a1 + 352) + 236)));
              v90 = (uint64_t *)v144;
              v91 = 8 * v145;
              do
              {
                v92 = *v90++;
                *(_QWORD *)(*(_QWORD *)(*a4 + 8 * *(int *)(v92 + 24)) + 8 * v89) = *(_DWORD *)(v92 + 24) & 0xFFFFFLL | (v89 << 40);
                v91 -= 8;
              }
              while (v91);
            }
            v93 = v80 + 4;
            v80 = v78;
            if (v93 != v78)
            {
              v80 = v93;
              while (1)
              {
                v94 = *v80;
                v95 = v80[1];
                if ((v94 != 0xFFFF || v95 != 0xFFFF) && (v94 != 65534 || v95 != 65534))
                  break;
                v80 += 4;
                if (v80 == v78)
                {
                  v80 = v78;
                  break;
                }
              }
            }
          }
          while (v80 != v85);
        }
        v62 += 4;
      }
      while (v62 != v63);
    }
    if (v59)
    {
      v98 = (_QWORD *)v60[1];
      v99 = v60;
      if (v98)
      {
        do
        {
          v60 = v98;
          v98 = (_QWORD *)*v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          v60 = (_QWORD *)v99[2];
          v83 = *v60 == (_QWORD)v99;
          v99 = v60;
        }
        while (!v83);
      }
    }
    else
    {
      v60 = (_QWORD *)((char *)v60 + 4);
    }
  }
  v100 = v167;
  if (v167)
    v101 = v165;
  else
    v101 = v162;
  v102 = &v162[4 * v163];
  while (2)
  {
    if (v100)
    {
      if (v101 == (char *)&v166)
        break;
      goto LABEL_161;
    }
    if (v101 != v102)
    {
LABEL_161:
      v103 = v101 + 28;
      if (!v100)
        v103 = v101;
      v104 = *(unsigned int *)v103;
      v105 = *(LiveDebugValues::MLocTracker **)(a1 + 352);
      v106 = *((_QWORD *)v105 + 8);
      v107 = *(_DWORD *)(v106 + 4 * v104);
      if (v107 == -1)
      {
        v107 = LiveDebugValues::MLocTracker::trackRegister(v105, v104);
        *(_DWORD *)(v106 + 4 * v104) = v107;
      }
      v108 = v107;
      sub_1C52F6CF8(v143, v107);
      if ((_DWORD)v145)
      {
        v109 = (uint64_t *)v144;
        v110 = 8 * v145;
        do
        {
          v111 = *v109++;
          *(_QWORD *)(*(_QWORD *)(*a4 + 8 * *(int *)(v111 + 24)) + 8 * v108) = *(_DWORD *)(v111 + 24) & 0xFFFFFLL | (v108 << 40);
          v110 -= 8;
        }
        while (v110);
      }
      v112 = *(_QWORD *)(a1 + 16);
      if (v112)
        v113 = (_QWORD *)(v112 + 8);
      else
        v113 = 0;
      v114 = v113[5];
      v115 = v113[6];
      v116 = (unsigned __int16 *)(v115
                                + (((unint64_t)*(unsigned int *)(*v113 + 24 * v104 + 16) >> 3) & 0x1FFFFFFE));
      v118 = *v116;
      v117 = v116 + 1;
      v119 = v118 + (*(_DWORD *)(*v113 + 24 * v104 + 16) & 0xF) * v104;
      do
      {
        v120 = *(unsigned __int16 *)(v114 + 4 * (unsigned __int16)v119);
        if (*(_WORD *)(v114 + 4 * (unsigned __int16)v119))
          v121 = v115 == 0;
        else
          v121 = 1;
        if (!v121)
        {
          v125 = *(unsigned __int16 *)(v114 + 4 * (unsigned __int16)v119 + 2) << 16;
          v126 = (unsigned __int16 *)(v115 + 2 * *(unsigned int *)(*v113 + 24 * v120 + 8));
          v127 = v120;
          v128 = v119;
          while (1)
          {
            v129 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 64) + 4 * v127);
            if ((_DWORD)v129 != -1 && (_DWORD)v145)
            {
              v130 = (uint64_t *)v144;
              v131 = 8 * v145;
              do
              {
                v132 = *v130++;
                *(_QWORD *)(*(_QWORD *)(*a4 + 8 * *(int *)(v132 + 24)) + 8 * v129) = *(_DWORD *)(v132 + 24) & 0xFFFFFLL | (v129 << 40);
                v131 -= 8;
              }
              while (v131);
            }
            v134 = *v126++;
            v133 = v134;
            if (v134)
            {
              v127 += v133;
            }
            else
            {
              v135 = HIWORD(v125);
              if (HIWORD(v125))
              {
                v125 >>= 16;
              }
              else
              {
                if (!*v117)
                  goto LABEL_178;
                v128 += (unsigned __int16)*v117++;
                v136 = (unsigned __int16 *)(v113[5] + 4 * (unsigned __int16)v128);
                v135 = *v136;
                v125 = v136[1] << 16;
              }
              v127 = v135;
              v126 = (unsigned __int16 *)(v113[6] + 2 * *(unsigned int *)(*v113 + 24 * v135 + 8));
            }
            if (!v117)
              goto LABEL_178;
          }
        }
        v122 = (unsigned __int16)*v117++;
        v119 += v122;
      }
      while (v122);
LABEL_178:
      if (v100)
      {
        v123 = (char *)*((_QWORD *)v101 + 1);
        v124 = v101;
        if (v123)
        {
          do
          {
            v101 = v123;
            v123 = *(char **)v123;
          }
          while (v123);
        }
        else
        {
          do
          {
            v101 = (char *)*((_QWORD *)v124 + 2);
            v83 = *(_QWORD *)v101 == (_QWORD)v124;
            v124 = v101;
          }
          while (!v83);
        }
      }
      else
      {
        v101 += 4;
      }
      continue;
    }
    break;
  }
  if (v144 != v146)
    free(v144);
  sub_1C6143384(v154);
  if (v150 != v152)
    free(v150);
  sub_1C6143384(v160);
  if (v156 != (_DWORD *)v158)
    free(v156);
  sub_1C47655E8((uint64_t)&v165, v166);
  if (v162 != v164)
    free(v162);
  if (v168 != (char *)v170)
    free(v168);
}

void sub_1C52F6CF8(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  _BYTE v22[256];
  uint64_t v23;
  char v24;
  uint64_t v25;
  _QWORD *v26;

  v3 = *a1;
  v18 = v22;
  v19 = v22;
  v20 = 32;
  v21 = 0;
  LODWORD(v23) = 0;
  if (*(_DWORD *)(v3 + 560))
  {
    do
    {
      v5 = *((_QWORD *)sub_1C4A118C0(v3 + 552, &v23) + 1);
      v6 = *(_DWORD *)(v5 + 24);
      v7 = *(_QWORD *)a1[1];
      v8 = (_BYTE *)(v7 + 72 * v6);
      v9 = sub_1C6222F58((uint64_t)v8, a2);
      v11 = *v8;
      v10 = v8 + 8;
      if ((v11 & 1) != 0)
      {
        v12 = 4;
      }
      else
      {
        v10 = (_QWORD *)*v10;
        v12 = *(unsigned int *)(v7 + 72 * v6 + 16);
      }
      if (&v10[2 * v12] != (_QWORD *)v9)
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v18, v5);
      LODWORD(v23) = v23 + 1;
    }
    while (v23 < *(_DWORD *)(v3 + 560));
    if (HIDWORD(v20) != v21)
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v18, *(_QWORD *)(a1[2] + 328));
  }
  v13 = a1[3];
  *(_DWORD *)(v13 + 8) = 0;
  v14 = a1[4];
  v15 = *(_QWORD *)(v3 + 8);
  if (!*(_QWORD *)(v15 + 1320))
  {
    v16 = operator new();
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_QWORD *)(v16 + 56) = 0;
    *(_QWORD *)(v16 + 64) = 0;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_QWORD *)v16 = v16 + 16;
    *(_QWORD *)(v16 + 8) = 0x100000000;
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    *(_DWORD *)(v16 + 40) = 0;
    *(_QWORD *)(v16 + 48) = 0;
    *(_BYTE *)(v16 + 64) = 0;
    v17 = *(_QWORD *)(v15 + 1320);
    *(_QWORD *)(v15 + 1320) = v16;
    if (v17)
      sub_1C4DC4DE4(v15 + 1320, v17);
  }
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v15);
  v23 = *(_QWORD *)(v15 + 1320);
  v24 = 1;
  v25 = v14;
  v26 = &v18;
  sub_1C52F76F0((uint64_t)&v23, v13);
  if (v19 != v18)
    free(v19);
}

void LiveDebugValues::InstrRefBasedLDV::buildMLocValueMap(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, uint64_t *a5)
{
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  int64_t v24;
  _DWORD *v25;
  unsigned int *v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int *v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _DWORD *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  _QWORD *v49;
  char v50;
  uint64_t v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v54;
  uint64_t v56;
  _QWORD *v57;
  unsigned int *v58;
  unsigned int v59;
  char *v60;
  char *v61;
  uint64_t v62;
  int v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  unsigned int v70;
  char v71;
  void **p_p;
  char v73;
  _QWORD *v74;
  void *v75;
  _BYTE *v76;
  uint64_t v77;
  int v78;
  BOOL v79;
  unsigned int v80;
  void *v81;
  uint64_t *v82;
  uint64_t v84;
  uint64_t v85;
  _BYTE *v86;
  _BYTE *v87;
  uint64_t v88;
  int v89;
  _BYTE v90[128];
  _BYTE *v91;
  _BYTE *v92;
  uint64_t v93;
  int v94;
  _BYTE v95[256];
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  int v99;
  _BYTE v100[128];
  _BYTE *v101;
  void *__b;
  uint64_t v103;
  int v104;
  _BYTE v105[128];
  void *__p;
  _BYTE *v107;
  uint64_t v108;
  void *v109;
  _BYTE *v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  _QWORD v114[66];

  v114[64] = *MEMORY[0x1E0C80C00];
  v110 = 0;
  v109 = 0;
  v111 = 0;
  v107 = 0;
  __p = 0;
  v108 = 0;
  v101 = v105;
  __b = v105;
  v103 = 16;
  v104 = 0;
  v96 = (uint64_t *)v100;
  v97 = (uint64_t *)v100;
  v98 = 16;
  v99 = 0;
  v91 = v95;
  v92 = v95;
  v93 = 32;
  v94 = 0;
  LODWORD(v112) = 0;
  if (*(_DWORD *)(a1 + 584))
  {
    do
    {
      sub_1C52EA034((uint64_t)&v109, &v112);
      v9 = sub_1C4A118C0(a1 + 552, &v112);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v96, *((_QWORD *)v9 + 1));
      v10 = sub_1C4A118C0(a1 + 552, &v112);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v91, *((_QWORD *)v10 + 1));
      LODWORD(v112) = (_DWORD)v112 + 1;
    }
    while (v112 < *(_DWORD *)(a1 + 584));
  }
  v82 = (uint64_t *)(a1 + 576);
  v11 = *(_QWORD *)(a1 + 352);
  v12 = *(_DWORD *)(v11 + 40);
  if (v12)
  {
    v13 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)*a3 + 8 * v13) = v13 << 40;
      v14 = v13 + 1;
      v13 = (v13 + 1);
    }
    while (v12 != v14);
    v11 = *(_QWORD *)(a1 + 352);
  }
  *(_DWORD *)(v11 + 256) = 0;
  LiveDebugValues::InstrRefBasedLDV::placeMLocPHIs(a1, a2, (uint64_t)&v91, a3, (uint64_t)a5);
  v86 = v90;
  v87 = v90;
  v88 = 16;
  v89 = 0;
  while (1)
  {
    v15 = v109;
    if (v109 != v110)
    {
      v112 = v114;
      v113 = 0x2000000000;
      while (1)
      {
        v85 = 0;
        v16 = *((_QWORD *)sub_1C4A118C0(a1 + 552, v15) + 1);
        v85 = v16;
        *(_DWORD *)(a1 + 360) = *(_DWORD *)(v16 + 24);
        v18 = v109;
        v19 = v110;
        v20 = v110 - (_BYTE *)v109;
        if (v110 - (_BYTE *)v109 >= 5)
        {
          v21 = 0;
          v22 = v20 >> 2;
          v23 = *(_DWORD *)v109;
          v24 = (unint64_t)((v20 >> 2) - 2) >> 1;
          v25 = v109;
          do
          {
            v26 = &v25[v21 + 1];
            v27 = (2 * v21) | 1;
            v21 = 2 * v21 + 2;
            if (v21 >= v22)
            {
              v28 = *v26;
              v21 = v27;
            }
            else
            {
              v28 = *v26;
              v17 = v26[1];
              if (*v26 >= v17)
                v28 = v26[1];
              if (*v26 <= v17)
                v21 = v27;
              else
                ++v26;
            }
            *v25 = v28;
            v25 = v26;
          }
          while (v21 <= v24);
          v29 = (unsigned int *)(v19 - 4);
          if (v26 == (unsigned int *)(v19 - 4))
          {
            *v26 = v23;
          }
          else
          {
            *v26 = *v29;
            *v29 = v23;
            v30 = (char *)v26 - v18 + 4;
            if (v30 >= 5)
            {
              v31 = (((unint64_t)v30 >> 2) - 2) >> 1;
              v32 = (unsigned int *)&v18[4 * v31];
              v33 = *v32;
              v34 = *v26;
              if (*v32 > *v26)
              {
                do
                {
                  *v26 = v33;
                  v26 = v32;
                  if (!v31)
                    break;
                  v31 = (v31 - 1) >> 1;
                  v32 = (unsigned int *)&v18[4 * v31];
                  v33 = *v32;
                }
                while (*v32 > v34);
                *v26 = v34;
              }
            }
          }
        }
        v110 = v19 - 4;
        v35 = LiveDebugValues::InstrRefBasedLDV::mlocJoin(a1, v16, v17, a4, (_QWORD *)(*a3 + 8 * *(unsigned int *)(a1 + 360)));
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v86, v85);
        if (!(v36 | v35))
          goto LABEL_28;
        v37 = *(_QWORD *)(a1 + 352);
        v38 = *(unsigned int *)(a1 + 360);
        v39 = (_QWORD *)*a3;
        *(_DWORD *)(v37 + 232) = v38;
        v40 = *(_DWORD *)(v37 + 40);
        if (v40)
        {
          v41 = 0;
          do
          {
            *(_QWORD *)(*(_QWORD *)(v37 + 32) + 8 * v41) = *(_QWORD *)(v39[v38] + 8 * v41);
            v42 = v41 + 1;
            v41 = (v41 + 1);
          }
          while (v40 != v42);
          LODWORD(v38) = *(_DWORD *)(a1 + 360);
        }
        LODWORD(v113) = 0;
        v43 = *a5;
        v44 = (_DWORD *)(*a5 + 72 * v38);
        v45 = sub_1C622130C(v44);
        v46 = v45;
        v48 = v47;
        v50 = *(_BYTE *)v44;
        v49 = v44 + 2;
        if ((v50 & 1) != 0)
        {
          v51 = 4;
        }
        else
        {
          v49 = (_QWORD *)*v49;
          v51 = *(unsigned int *)(v43 + 72 * v38 + 16);
        }
        v52 = (unsigned int *)&v49[2 * v51];
        if (v52 != v45)
        {
          v53 = 0;
          do
          {
            v54 = *((_QWORD *)v46 + 1);
            if ((v54 & 0xFFFFF00000) == 0 && (v54 & 0xFFFFF) == *(_DWORD *)(a1 + 360))
              v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 32) + ((v54 >> 37) & 0x7FFFFF8));
            v56 = *v46;
            if (v53 >= HIDWORD(v113))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v112, (uint64_t)v114, v53 + 1, 16);
              v53 = v113;
            }
            v57 = (char *)v112 + 16 * v53;
            *v57 = v56;
            v57[1] = v54;
            v53 = v113 + 1;
            LODWORD(v113) = v113 + 1;
            v58 = v46 + 4;
            while (v58 != v48)
            {
              v59 = *v58;
              v58 += 4;
              if (v59 <= 0xFFFFFFFD)
              {
                v46 = v58 - 4;
                goto LABEL_52;
              }
            }
            v46 = v48;
LABEL_52:
            ;
          }
          while (v46 != v52);
          if (v53)
          {
            v60 = (char *)v112;
            v61 = (char *)v112 + 16 * v53;
            do
            {
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 352) + 32) + 8 * *(unsigned int *)v60) = *((_QWORD *)v60 + 1);
              v60 += 16;
            }
            while (v60 != v61);
          }
        }
        v62 = *(_QWORD *)(a1 + 352);
        v63 = *(_DWORD *)(v62 + 40);
        if (v63)
        {
          v64 = 0;
          v65 = 0;
          do
          {
            v66 = *(_QWORD *)(*a4 + 8 * *(unsigned int *)(a1 + 360));
            v67 = *(_QWORD *)(*(_QWORD *)(v62 + 32) + 8 * v65);
            v64 |= *(_QWORD *)(v66 + 8 * v65) != v67;
            *(_QWORD *)(v66 + 8 * v65) = v67;
            LODWORD(v67) = v65 + 1;
            v65 = (v65 + 1);
          }
          while (v63 != (_DWORD)v67);
          *(_DWORD *)(*(_QWORD *)(a1 + 352) + 256) = 0;
          if ((v64 & 1) != 0)
          {
            v68 = *(uint64_t **)(v85 + 88);
            v69 = *(uint64_t **)(v85 + 96);
            while (v68 != v69)
            {
              v84 = 0;
              v84 = *v68;
              v70 = *((_DWORD *)sub_1C6128C08(v82, &v84) + 2);
              if (v70 <= *((_DWORD *)sub_1C6128C08(v82, &v85) + 2))
              {
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v101, v84);
                if (!v73)
                  goto LABEL_66;
                p_p = &__p;
              }
              else
              {
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v96, v84);
                if (!v71)
                  goto LABEL_66;
                p_p = &v109;
              }
              v74 = sub_1C6128C08(v82, &v84);
              sub_1C52EA034((uint64_t)p_p, (_DWORD *)v74 + 2);
LABEL_66:
              ++v68;
            }
          }
        }
        else
        {
          *(_DWORD *)(v62 + 256) = 0;
        }
LABEL_28:
        v15 = v109;
        if (v109 == v110)
        {
          v75 = __p;
          v76 = v107;
          goto LABEL_72;
        }
      }
    }
    v75 = __p;
    v76 = v107;
    if (__p == v107)
      break;
    v112 = v114;
    v113 = 0x2000000000;
LABEL_72:
    v109 = v75;
    v110 = v76;
    __p = v15;
    v107 = v15;
    v77 = v111;
    v111 = v108;
    v108 = v77;
    llvm::SmallPtrSetImplBase::swap((uint64_t *)&v101, &v96);
    if (__b == v101)
      goto LABEL_73;
    if (v103 < 0x21 || 4 * (HIDWORD(v103) - v104) >= v103)
    {
      memset(__b, 255, 8 * v103);
LABEL_73:
      v104 = 0;
      HIDWORD(v103) = 0;
      goto LABEL_74;
    }
    free(__b);
    v78 = 1 << (33 - __clz(HIDWORD(v103) - v104 - 1));
    v79 = (HIDWORD(v103) - v104) > 0x10;
    v104 = 0;
    if (v79)
      v80 = v78;
    else
      v80 = 32;
    v103 = v80;
    v81 = malloc_type_malloc(8 * v80, 0x4065EBACuLL);
    if (!v81)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    __b = v81;
    memset(v81, 255, 8 * v103);
LABEL_74:
    if (v112 != v114)
      free(v112);
  }
  if (v87 != v86)
    free(v87);
  if (v92 != v91)
    free(v92);
  if (v97 != v96)
    free(v97);
  if (__b != v101)
    free(__b);
  if (__p)
  {
    v107 = __p;
    operator delete(__p);
  }
  if (v109)
  {
    v110 = v109;
    operator delete(v109);
  }
}

void LiveDebugValues::InstrRefBasedLDV::BlockPHIPlacement(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *(_QWORD *)(a1 + 8);
  if (!*(_QWORD *)(v7 + 1320))
  {
    v8 = operator new();
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_QWORD *)(v8 + 56) = 0;
    *(_QWORD *)(v8 + 64) = 0;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_QWORD *)v8 = v8 + 16;
    *(_QWORD *)(v8 + 8) = 0x100000000;
    *(_QWORD *)(v8 + 24) = 0;
    *(_QWORD *)(v8 + 32) = 0;
    *(_DWORD *)(v8 + 40) = 0;
    *(_QWORD *)(v8 + 48) = 0;
    *(_BYTE *)(v8 + 64) = 0;
    v9 = *(_QWORD *)(v7 + 1320);
    *(_QWORD *)(v7 + 1320) = v8;
    if (v9)
      sub_1C4DC4DE4(v7 + 1320, v9);
  }
  llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v7);
  v10 = *(_QWORD *)(v7 + 1320);
  v11 = 1;
  v12 = a2;
  v13 = a3;
  sub_1C52F76F0((uint64_t)&v10, a4);
}

void sub_1C52F76F0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  unint64_t **v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  unsigned int v28;
  _BYTE *v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  BOOL v44;
  uint64_t v45;
  BOOL v46;
  unsigned int v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  _BYTE *v88;
  _BYTE *v89;
  uint64_t v90;
  int v91;
  _BYTE v92[256];
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  int v96;
  _BYTE v97[256];
  _BYTE *v98;
  uint64_t v99;
  _BYTE v100[64];
  void *v101;
  uint64_t v102;
  _BYTE v103[256];
  void *v104;
  uint64_t v105;
  _QWORD v106[67];

  v106[65] = *MEMORY[0x1E0C80C00];
  v104 = v106;
  v105 = 0x2000000000;
  llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::updateDFSNumbers(*(_QWORD *)a1);
  v101 = v103;
  v102 = 0x2000000000;
  v93 = v97;
  v94 = v97;
  v95 = 32;
  v96 = 0;
  v4 = v92;
  v88 = v92;
  v89 = v92;
  v90 = 32;
  v91 = 0;
  v5 = *(unint64_t ***)(a1 + 24);
  v6 = v5[1];
  v7 = 16;
  if (v6 == *v5)
    v7 = 20;
  v8 = *(unsigned int *)((char *)v5 + v7);
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    v10 = v6;
    while (*v10 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v10;
      v9 -= 8;
      if (!v9)
        goto LABEL_27;
    }
  }
  else
  {
    v10 = v6;
  }
  v11 = &v6[v8];
  if (v10 != v11)
  {
    v12 = *v10;
    v13 = v92;
LABEL_11:
    v14 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    v15 = *(unsigned int *)(*(_QWORD *)a1 + 40);
    if ((_DWORD)v15)
    {
      LODWORD(v16) = ((v12 >> 4) ^ (v12 >> 9)) & (v15 - 1);
      v17 = (uint64_t *)(v14 + 16 * v16);
      v18 = *v17;
      if (v12 == *v17)
      {
LABEL_18:
        if (v17 != (uint64_t *)(v14 + 16 * v15))
        {
          v21 = v17[1];
          if (v21)
          {
            v22 = *(unsigned int *)(v21 + 16);
            v23 = *(unsigned int *)(v21 + 72);
            v24 = v105;
            if (v105 >= (unint64_t)HIDWORD(v105))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, (uint64_t)v106, v105 + 1, 16);
              v24 = v105;
            }
            v25 = (uint64_t *)((char *)v104 + 16 * v24);
            *v25 = v21;
            v25[1] = v22 | (v23 << 32);
            LODWORD(v105) = v105 + 1;
            sub_1C53016A4((uint64_t)v104, (uint64_t)v104 + 16 * v105, v105);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v88, v21);
            v4 = v88;
            v13 = v89;
          }
        }
        v26 = v10 + 1;
        while (v26 != v11)
        {
          v27 = *v26++;
          v12 = v27;
          if (v27 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v10 = v26 - 1;
            goto LABEL_11;
          }
        }
        goto LABEL_28;
      }
      v19 = 1;
      while (v18 != -4096)
      {
        v20 = v16 + v19++;
        v16 = v20 & (v15 - 1);
        v18 = *(_QWORD *)(v14 + 16 * v16);
        if (v12 == v18)
        {
          v17 = (uint64_t *)(v14 + 16 * v16);
          goto LABEL_18;
        }
      }
    }
    v17 = (uint64_t *)(v14 + 16 * v15);
    goto LABEL_18;
  }
LABEL_27:
  v13 = v92;
LABEL_28:
  v28 = v105;
  if (!(_DWORD)v105)
    goto LABEL_96;
  do
  {
    v29 = v104;
    v30 = *(_QWORD *)v104;
    v31 = *((_DWORD *)v104 + 2);
    if (v28 == 1)
      goto LABEL_43;
    v32 = 0;
    v33 = (char *)v104 + 16 * v28;
    v34 = *((_DWORD *)v104 + 3);
    v35 = v28 - 2;
    if (v28 < 2uLL)
      v35 = v28 - 1;
    v36 = v35 >> 1;
    v37 = (char *)v104;
    do
    {
      v38 = v37;
      v39 = v32 + 1;
      v37 += 16 * v32 + 16;
      v40 = 2 * v32;
      v32 = (2 * v32) | 1;
      v41 = v40 + 2;
      if (v41 >= v28)
        goto LABEL_39;
      v42 = *((_DWORD *)v37 + 2);
      v43 = *((_DWORD *)v37 + 6);
      if (v42 < v43)
      {
        v37 += 16;
LABEL_38:
        v32 = v41;
        goto LABEL_39;
      }
      if (v43 >= v42)
      {
        v44 = *(_DWORD *)&v38[16 * v39 + 12] < *((_DWORD *)v37 + 7);
        v37 += 16 * v44;
        if (v44)
          goto LABEL_38;
      }
LABEL_39:
      *(_QWORD *)v38 = *(_QWORD *)v37;
      *((_DWORD *)v38 + 2) = *((_DWORD *)v37 + 2);
      *((_DWORD *)v38 + 3) = *((_DWORD *)v37 + 3);
    }
    while (v32 <= v36);
    if (v37 == v33 - 16)
    {
      *(_QWORD *)v37 = v30;
      *((_DWORD *)v37 + 2) = v31;
      *((_DWORD *)v37 + 3) = v34;
    }
    else
    {
      *(_QWORD *)v37 = *((_QWORD *)v33 - 2);
      *((_DWORD *)v37 + 2) = *((_DWORD *)v33 - 2);
      *((_DWORD *)v37 + 3) = *((_DWORD *)v33 - 1);
      *((_QWORD *)v33 - 2) = v30;
      *((_DWORD *)v33 - 2) = v31;
      *((_DWORD *)v33 - 1) = v34;
      sub_1C53016A4((uint64_t)v29, (uint64_t)(v37 + 16), (v37 + 16 - v29) >> 4);
      v28 = v105;
    }
LABEL_43:
    LODWORD(v105) = v28 - 1;
    v45 = v102;
    if (v102 >= (unint64_t)HIDWORD(v102))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)v103, v102 + 1, 8);
      v45 = v102;
    }
    *((_QWORD *)v101 + v45) = v30;
    v46 = __CFADD__((_DWORD)v102, 1);
    v47 = v102 + 1;
    LODWORD(v102) = v102 + 1;
    if (!v46)
    {
      while (1)
      {
        v48 = *((_QWORD *)v101 + v47 - 1);
        LODWORD(v102) = v47 - 1;
        v49 = *(char **)(*(_QWORD *)v48 + 88);
        v50 = *(char **)(*(_QWORD *)v48 + 96);
        v98 = v100;
        v99 = 0x800000000;
        v51 = v50 - v49;
        if ((unint64_t)(v50 - v49) >= 0x41)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v98, (uint64_t)v100, v51 >> 3, 8);
          v52 = v99;
          v54 = v98;
          v53 = v99;
        }
        else
        {
          v52 = 0;
          v53 = 0;
          v54 = v100;
        }
        if (v49 != v50)
        {
          v55 = &v54[v52];
          do
          {
            v56 = *(_QWORD *)v49;
            v49 += 8;
            *v55++ = v56;
          }
          while (v49 != v50);
          v54 = v98;
        }
        v57 = v53 + ((unint64_t)v51 >> 3);
        LODWORD(v99) = v57;
        if (v57)
          break;
LABEL_84:
        if (v54 != (_QWORD *)v100)
          free(v54);
        v82 = *(unsigned int *)(v48 + 32);
        if ((_DWORD)v82)
        {
          v83 = *(uint64_t **)(v48 + 24);
          v84 = 8 * v82;
          do
          {
            v85 = *v83;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v88, *v83);
            if (v86)
            {
              v87 = v102;
              if (v102 >= (unint64_t)HIDWORD(v102))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v101, (uint64_t)v103, v102 + 1, 8);
                v87 = v102;
              }
              *((_QWORD *)v101 + v87) = v85;
              LODWORD(v102) = v102 + 1;
            }
            ++v83;
            v84 -= 8;
          }
          while (v84);
        }
        v47 = v102;
        if (!(_DWORD)v102)
          goto LABEL_47;
      }
      v58 = &v54[v57];
      while (2)
      {
        v59 = *(_QWORD *)(*(_QWORD *)a1 + 24);
        v60 = *(unsigned int *)(*(_QWORD *)a1 + 40);
        if ((_DWORD)v60)
        {
          LODWORD(v61) = (v60 - 1) & ((*v54 >> 4) ^ (*v54 >> 9));
          v62 = (uint64_t *)(v59 + 16 * v61);
          v63 = *v62;
          if (*v62 != *v54)
          {
            v64 = 1;
            while (v63 != -4096)
            {
              v65 = v61 + v64++;
              v61 = v65 & (v60 - 1);
              v63 = *(_QWORD *)(v59 + 16 * v61);
              if (v63 == *v54)
              {
                v62 = (uint64_t *)(v59 + 16 * v61);
                goto LABEL_64;
              }
            }
            goto LABEL_63;
          }
        }
        else
        {
LABEL_63:
          v62 = (uint64_t *)(v59 + 16 * v60);
        }
LABEL_64:
        if (v62 == (uint64_t *)(v59 + 16 * v60))
          v66 = 0;
        else
          v66 = v62[1];
        v67 = *(unsigned int *)(v66 + 16);
        if (v67 <= v31)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v93, v66);
          if (v68)
          {
            v69 = *(_QWORD *)v66;
            if (!*(_BYTE *)(a1 + 9))
              goto LABEL_73;
            v70 = *(_QWORD **)(a1 + 16);
            v71 = sub_1C477672C((uint64_t)v70, *(_QWORD *)v66);
            v72 = v70[1];
            v73 = 16;
            if (v72 == *v70)
              v73 = 20;
            if (v71 != (_QWORD *)(v72 + 8 * *(unsigned int *)((char *)v70 + v73)))
            {
LABEL_73:
              v74 = *(unsigned int *)(a2 + 8);
              if (v74 >= *(_DWORD *)(a2 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v74 + 1, 8);
                *(_QWORD *)(*(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 8)) = v69;
                LODWORD(v74) = *(_DWORD *)(a2 + 8);
              }
              else
              {
                *(_QWORD *)(*(_QWORD *)a2 + 8 * v74) = v69;
              }
              *(_DWORD *)(a2 + 8) = v74 + 1;
              v75 = *(_QWORD **)(a1 + 24);
              v76 = sub_1C477672C((uint64_t)v75, v69);
              v77 = v75[1];
              v78 = 16;
              if (v77 == *v75)
                v78 = 20;
              if (v76 == (_QWORD *)(v77 + 8 * *(unsigned int *)((char *)v75 + v78)))
              {
                v79 = *(unsigned int *)(v66 + 72);
                v80 = v105;
                if (v105 >= (unint64_t)HIDWORD(v105))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v104, (uint64_t)v106, v105 + 1, 16);
                  v80 = v105;
                }
                v81 = (uint64_t *)((char *)v104 + 16 * v80);
                *v81 = v66;
                v81[1] = v67 | (v79 << 32);
                LODWORD(v105) = v105 + 1;
                sub_1C53016A4((uint64_t)v104, (uint64_t)v104 + 16 * v105, v105);
              }
            }
          }
        }
        if (++v54 == v58)
        {
          v54 = v98;
          goto LABEL_84;
        }
        continue;
      }
    }
LABEL_47:
    v28 = v105;
  }
  while ((_DWORD)v105);
  v4 = v88;
  v13 = v89;
LABEL_96:
  if (v13 != v4)
    free(v13);
  if (v94 != v93)
    free(v94);
  if (v101 != v103)
    free(v101);
  if (v104 != v106)
    free(v104);
}

unint64_t LiveDebugValues::InstrRefBasedLDV::pickVPHILoc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  char *v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t j;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t i;
  char *v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  BOOL v38;
  int *v39;
  int *v40;
  _DWORD *v41;
  uint64_t v42;
  _BYTE *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v48;
  uint64_t v49;
  int v50;
  void *v51[2];
  _BYTE v52[16];
  void *v53;
  uint64_t v54;
  _BYTE v55[16];
  void *v56;
  uint64_t v57;
  _BYTE v58[32];
  void *v59;
  uint64_t v60;
  _QWORD v61[34];

  v61[32] = *MEMORY[0x1E0C80C00];
  v6 = (char *)v61;
  v59 = v61;
  v60 = 0x800000000;
  v56 = v58;
  v57 = 0x400000000;
  v7 = *(unsigned int *)(a6 + 8);
  if (!(_DWORD)v7)
    goto LABEL_65;
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 352) + 40);
  v12 = *(uint64_t **)a6;
  v49 = *(_QWORD *)a6 + 8 * v7;
  do
  {
    v13 = *v12;
    v14 = *(unsigned int *)(*v12 + 24);
    v53 = 0;
    if (sub_1C6144BDC(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), v13, &v53))
      v15 = v53 == (void *)(*(_QWORD *)a4 + 16 * *(unsigned int *)(a4 + 16));
    else
      v15 = 1;
    if (v15
      || ((v16 = (uint64_t *)*((_QWORD *)v53 + 1), v17 = *((_DWORD *)v16 + 18), v17 != 2) ? (v18 = v17 == 4) : (v18 = 1),
          v18))
    {
      LOBYTE(v31) = 0;
      v32 = 0;
      goto LABEL_66;
    }
    v19 = v57;
    if (v57 >= (unint64_t)HIDWORD(v57))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v57 + 1, 8);
      v19 = v57;
    }
    *((_QWORD *)v56 + v19) = v16 + 7;
    LODWORD(v57) = v57 + 1;
    sub_1C62247D8((uint64_t)&v59, v60 + 1);
    v20 = *((_DWORD *)v16 + 18);
    v48 = v6;
    if (v20 == 1)
    {
      v23 = *v16;
    }
    else
    {
      if (v20 != 3)
      {
        v21 = *((_DWORD *)v16 + 12);
        v22 = *(_DWORD *)(a2 + 24);
LABEL_28:
        if (v21 != v22)
        {
          LOBYTE(v31) = 0;
          v32 = 0;
          goto LABEL_66;
        }
LABEL_29:
        if ((_DWORD)v11)
        {
          v27 = 0;
          for (i = 0; i != v11; ++i)
          {
            if (v27 + (*(_DWORD *)(a2 + 24) & 0xFFFFF) == *(_QWORD *)(*(_QWORD *)(*a5 + 8 * v14) + 8 * i))
            {
              v29 = (char *)v59 + 32 * v60;
              v30 = *((unsigned int *)v29 - 6);
              if (v30 >= *((unsigned int *)v29 - 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v29 - 32), (uint64_t)(v29 - 16), v30 + 1, 4);
                v30 = *((unsigned int *)v29 - 6);
              }
              *(_DWORD *)(*((_QWORD *)v29 - 4) + 4 * v30) = i;
              ++*((_DWORD *)v29 - 6);
            }
            v27 += 0x10000000000;
          }
        }
        goto LABEL_36;
      }
      v21 = *((_DWORD *)v16 + 12);
      v22 = *(_DWORD *)(a2 + 24);
      if (v21 == v22)
        goto LABEL_29;
      v23 = *v16;
      if (v23 == LiveDebugValues::ValueIDNum::EmptyValue)
        goto LABEL_28;
    }
    if ((_DWORD)v11)
    {
      for (j = 0; j != v11; ++j)
      {
        if (*(_QWORD *)(*(_QWORD *)(*a5 + 8 * v14) + 8 * j) == v23)
        {
          v25 = (char *)v59 + 32 * v60;
          v26 = *((unsigned int *)v25 - 6);
          if (v26 >= *((unsigned int *)v25 - 5))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v25 - 32), (uint64_t)(v25 - 16), v26 + 1, 4);
            v26 = *((unsigned int *)v25 - 6);
          }
          *(_DWORD *)(*((_QWORD *)v25 - 4) + 4 * v26) = j;
          ++*((_DWORD *)v25 - 6);
        }
      }
    }
LABEL_36:
    ++v12;
    v6 = v48;
  }
  while (v12 != (uint64_t *)v49);
  if ((_DWORD)v57)
  {
    v33 = (char *)v56;
    v34 = 8 * v57;
    while (**(_QWORD **)v33 == **(_QWORD **)v56
         && *(unsigned __int8 *)(*(_QWORD *)v33 + 8) == *(unsigned __int8 *)(*(_QWORD *)v56 + 8))
    {
      v33 += 8;
      v34 -= 8;
      if (!v34)
        goto LABEL_44;
    }
LABEL_65:
    LOBYTE(v31) = 0;
    v32 = 0;
  }
  else
  {
LABEL_44:
    v53 = v55;
    v54 = 0x400000000;
    if (*((_DWORD *)v59 + 2))
      sub_1C62249BC((uint64_t)&v53, (uint64_t)v59);
    if (v60 >= 2)
    {
      v35 = 1;
      do
      {
        v36 = (char *)v59 + 32 * v35;
        v51[0] = v52;
        v51[1] = (void *)0x400000000;
        v37 = *((unsigned int *)v36 + 2);
        if ((_DWORD)v54)
          v38 = (_DWORD)v37 == 0;
        else
          v38 = 1;
        if (!v38)
        {
          v39 = (int *)v53;
          v40 = (int *)((char *)v53 + 4 * v54);
          v41 = *(_DWORD **)v36;
          v42 = *(_QWORD *)v36 + 4 * v37;
          v43 = v52;
          do
          {
            if (*v39 >= *v41)
            {
              if (*v41 >= *v39)
              {
                v50 = *v39;
                v43 = (_BYTE *)(sub_1C6151988((uint64_t)v51, (uint64_t)v43, &v50) + 4);
                ++v39;
              }
              ++v41;
            }
            else
            {
              ++v39;
            }
          }
          while (v39 != v40 && v41 != (_DWORD *)v42);
        }
        sub_1C62249BC((uint64_t)&v53, (uint64_t)v51);
        if (v51[0] != v52)
          free(v51[0]);
        ++v35;
      }
      while (v35 < v60);
    }
    if ((_DWORD)v54)
    {
      v31 = *(_DWORD *)(a2 + 24);
      v32 = *(_QWORD *)&v31 & 0xFFF00 | ((unint64_t)*(unsigned int *)v53 << 40);
    }
    else
    {
      LOBYTE(v31) = 0;
      v32 = 0;
    }
    if (v53 != v55)
      free(v53);
  }
LABEL_66:
  if (v56 != v58)
    free(v56);
  v44 = (char *)v59;
  if ((_DWORD)v60)
  {
    v45 = 32 * v60;
    do
    {
      v46 = *(char **)&v44[v45 - 32];
      if (&v44[v45 - 16] != v46)
        free(v46);
      v45 -= 32;
    }
    while (v45);
    v44 = (char *)v59;
  }
  if (v44 != v6)
    free(v44);
  return v32 | v31;
}

uint64_t LiveDebugValues::InstrRefBasedLDV::vlocJoin(uint64_t *a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned int *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  char *v47;
  uint64_t v48;
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _OWORD v58[2];
  __int128 v59;
  _BYTE v60[28];
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _BYTE v64[128];
  _QWORD *v65;
  uint64_t v66;
  _QWORD v67[10];

  v67[8] = *MEMORY[0x1E0C80C00];
  v10 = *(char **)(a2 + 64);
  v11 = *(char **)(a2 + 72);
  v65 = v67;
  v66 = 0x800000000;
  v12 = v11 - v10;
  if ((unint64_t)(v11 - v10) >= 0x41)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v65, (uint64_t)v67, v12 >> 3, 8);
    v13 = v66;
    v15 = v65;
    v14 = v66;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = v67;
  }
  v57 = a5;
  if (v10 != v11)
  {
    v16 = &v15[v13];
    do
    {
      v17 = *(_QWORD *)v10;
      v10 += 8;
      *v16++ = v17;
    }
    while (v10 != v11);
    v15 = v65;
  }
  v19 = v14 + ((unint64_t)v12 >> 3);
  v18 = (_DWORD)v19 == 0;
  LODWORD(v66) = v19;
  v20 = &v15[v19];
  v62 = a1;
  v21 = 126 - 2 * __clz(v19);
  if (v18)
    v22 = 0;
  else
    v22 = v21;
  sub_1C5301770((uint64_t)v15, v20, &v62, v22, 1);
  v23 = a1 + 72;
  v62 = (void *)a2;
  v24 = *((_DWORD *)sub_1C6128C08(a1 + 72, &v62) + 2);
  v62 = v64;
  v63 = 0x800000000;
  if ((_DWORD)v66)
  {
    LODWORD(v25) = 0;
    v26 = v65;
    v27 = 8 * v66;
    do
    {
      v61 = *v26;
      v28 = sub_1C477672C((uint64_t)a4, v61);
      v29 = a4[1];
      if (v29 == *a4)
        v30 = (unsigned int *)a4 + 5;
      else
        v30 = (unsigned int *)(a4 + 2);
      if (v28 == (_QWORD *)(v29 + 8 * *v30))
      {
LABEL_55:
        v38 = 0;
        goto LABEL_56;
      }
      *(_QWORD *)&v58[0] = 0;
      v31 = sub_1C6144BDC(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v61, v58);
      v32 = *(_QWORD *)&v58[0];
      if (!v31)
        v32 = *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16);
      v33 = *(_QWORD *)(v32 + 8);
      if (*((_DWORD *)sub_1C6128C08(v23, &v61) + 2) >= v24)
        v25 = v25;
      else
        v25 = (v25 + 1);
      v34 = v61;
      v35 = v63;
      if (v63 >= (unint64_t)HIDWORD(v63))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
        v35 = v63;
      }
      v36 = (uint64_t *)((char *)v62 + 16 * v35);
      *v36 = v34;
      v36[1] = v33;
      v37 = (v63 + 1);
      LODWORD(v63) = v63 + 1;
      ++v26;
      v27 -= 8;
    }
    while (v27);
    if (!(_DWORD)v37)
      goto LABEL_53;
    v39 = (char *)v62;
    v40 = *((_QWORD *)v62 + 1);
    if (*(_DWORD *)(v57 + 72) == 3 && *(_DWORD *)(v57 + 48) == *(_DWORD *)(a2 + 24))
    {
      v41 = 0;
      v42 = (char *)v62 + 16 * v37;
      v43 = 16 * v37;
      while (1)
      {
        v44 = *(_QWORD *)((char *)v62 + v41 + 8);
        if (*(_QWORD *)(v44 + 56) != *(_QWORD *)(v40 + 56)
          || *(unsigned __int8 *)(v44 + 64) != *(unsigned __int8 *)(v40 + 64))
        {
          goto LABEL_53;
        }
        v45 = *(_DWORD *)(v44 + 72);
        if (v45 == 2)
        {
          if (*(_DWORD *)(v40 + 72) != 2)
            goto LABEL_53;
        }
        else if (v45 == 4)
        {
          goto LABEL_53;
        }
        v41 += 16;
        if (v43 == v41)
        {
          v46 = 0;
LABEL_38:
          v47 = v39;
          v39 += 16;
          do
          {
            if ((sub_1C6221380(*((_QWORD *)v39 - 1), v40) & 1) == 0)
            {
              v48 = *((_QWORD *)v39 - 1);
              if (*(_DWORD *)(v48 + 72) != 3
                || *(_DWORD *)(v48 + 48) != *(_DWORD *)(a2 + 24)
                || v25 > (v47 - (_BYTE *)v62) >> 4)
              {
                v46 = 1;
                if (v39 != v42)
                  goto LABEL_38;
                goto LABEL_50;
              }
            }
            v47 += 16;
            v18 = v39 == v42;
            v39 += 16;
          }
          while (!v18);
          if ((v46 & 1) != 0)
          {
LABEL_50:
            v49 = *(_DWORD *)(a2 + 24);
            *(_QWORD *)&v58[0] = LiveDebugValues::ValueIDNum::EmptyValue;
            BYTE8(v58[0]) = 0;
            BYTE8(v59) = 0;
            *(_DWORD *)v60 = v49;
            *(_OWORD *)&v60[8] = *(_OWORD *)(v40 + 56);
            *(_DWORD *)&v60[24] = 3;
            v50 = sub_1C6221380(v57, (uint64_t)v58);
            v38 = v50 ^ 1u;
            if ((v50 & 1) == 0)
            {
              v51 = *(_OWORD *)v60;
              *(_OWORD *)(v57 + 32) = v59;
              *(_OWORD *)(v57 + 48) = v51;
              *(_OWORD *)(v57 + 60) = *(_OWORD *)&v60[12];
              v52 = v58[1];
              *(_OWORD *)v57 = v58[0];
              *(_OWORD *)(v57 + 16) = v52;
            }
            goto LABEL_56;
          }
          if ((sub_1C6221380(v57, v40) & 1) == 0)
            goto LABEL_61;
          goto LABEL_55;
        }
      }
    }
    if ((sub_1C6221380(v57, *((_QWORD *)v62 + 1)) & 1) != 0)
    {
LABEL_53:
      v38 = 0;
      goto LABEL_56;
    }
LABEL_61:
    *(_OWORD *)v57 = *(_OWORD *)v40;
    v54 = *(_OWORD *)(v40 + 16);
    v55 = *(_OWORD *)(v40 + 32);
    v56 = *(_OWORD *)(v40 + 48);
    *(_OWORD *)(v57 + 60) = *(_OWORD *)(v40 + 60);
    *(_OWORD *)(v57 + 32) = v55;
    *(_OWORD *)(v57 + 48) = v56;
    *(_OWORD *)(v57 + 16) = v54;
    v38 = 1;
  }
  else
  {
    v38 = 0;
  }
LABEL_56:
  if (v62 != v64)
    free(v62);
  if (v65 != v67)
    free(v65);
  return v38;
}

uint64_t LiveDebugValues::InstrRefBasedLDV::getBlocksForScope(_QWORD *a1, uint64_t a2, unsigned int *a3, _QWORD *a4)
{
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t v25;
  unsigned int *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unsigned int v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unsigned int v60;
  _BYTE v61[24];
  void *v62;
  uint64_t v63;
  _QWORD v64[18];

  v64[16] = *MEMORY[0x1E0C80C00];
  llvm::LexicalScopes::getMachineBasicBlocks((llvm::LexicalScopes *)(a1 + 16), a2, (uint64_t)a3);
  v7 = a4[1];
  if (v7 == *a4)
    v8 = (unsigned int *)a4 + 5;
  else
    v8 = (unsigned int *)(a4 + 2);
  v9 = *v8;
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = (uint64_t *)a4[1];
    while ((unint64_t)*v11 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
        goto LABEL_16;
    }
  }
  else
  {
    v11 = (uint64_t *)a4[1];
  }
  v12 = (_QWORD *)(v7 + 8 * v9);
  if (v11 != v12)
  {
    v13 = *v11;
LABEL_12:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)a3, v13);
    v14 = (unint64_t *)(v11 + 1);
    while (v14 != v12)
    {
      v15 = *v14++;
      v13 = v15;
      if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v11 = (uint64_t *)(v14 - 1);
        goto LABEL_12;
      }
    }
  }
LABEL_16:
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v16 = *((_QWORD *)a3 + 1);
  if (v16 == *(_QWORD *)a3)
    v17 = a3 + 5;
  else
    v17 = a3 + 4;
  v18 = *v17;
  if ((_DWORD)v18)
  {
    v51 = 8 * v18;
    v19 = (unint64_t *)*((_QWORD *)a3 + 1);
    while (*v19 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v19;
      v51 -= 8;
      if (!v51)
        goto LABEL_65;
    }
  }
  else
  {
    v19 = (unint64_t *)*((_QWORD *)a3 + 1);
  }
  v20 = (unint64_t *)(v16 + 8 * v18);
  if (v19 == v20)
  {
LABEL_65:
    v52 = 0;
    v53 = 0;
LABEL_67:
    v53 += v52;
    v54 = v53;
    goto LABEL_68;
  }
  v21 = *v19;
LABEL_23:
  v62 = v64;
  v63 = 0x800000000;
  v22 = *(uint64_t **)(v21 + 88);
  v23 = *(uint64_t **)(v21 + 96);
  if (v22 != v23)
  {
    do
    {
      v57 = 0;
      v57 = *v22;
      v24 = sub_1C477672C((uint64_t)a3, v57);
      v25 = *((_QWORD *)a3 + 1);
      if (v25 == *(_QWORD *)a3)
        v26 = a3 + 5;
      else
        v26 = a3 + 4;
      if (v24 == (_QWORD *)(v25 + 8 * *v26))
      {
        v27 = sub_1C477672C((uint64_t)(a1 + 49), v57);
        v28 = a1[50];
        v29 = v28 == a1[49] ? 412 : 408;
        if (v27 != (_QWORD *)(v28 + 8 * *(unsigned int *)((char *)a1 + v29)))
        {
          sub_1C6190580((uint64_t)v61, (uint64_t)&v58, &v57);
          v30 = v57;
          v31 = *(_QWORD *)(v57 + 88);
          v32 = v63;
          if (v63 >= (unint64_t)HIDWORD(v63))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
            v32 = v63;
          }
          v33 = (uint64_t *)((char *)v62 + 16 * v32);
          *v33 = v30;
          v33[1] = v31;
          LODWORD(v63) = v63 + 1;
        }
      }
      ++v22;
    }
    while (v22 != v23);
    v34 = v63;
    while (1)
    {
      if (!v34)
        goto LABEL_56;
      v35 = (char *)v62 + 16 * v34;
      v36 = (uint64_t *)*((_QWORD *)v35 - 1);
      if (v36 == *(uint64_t **)(*((_QWORD *)v35 - 2) + 96))
        break;
      v37 = *v36;
      if (v60)
      {
        v38 = ((v37 >> 4) ^ (v37 >> 9)) & (v60 - 1);
        v39 = v58[v38];
        if (v37 == v39)
          goto LABEL_52;
        v40 = 1;
        while (v39 != -4096)
        {
          v41 = v38 + v40++;
          v38 = v41 & (v60 - 1);
          v39 = v58[v38];
          if (v37 == v39)
            goto LABEL_52;
        }
      }
      v42 = sub_1C477672C((uint64_t)(a1 + 49), v37);
      v43 = a1[50];
      if (v43 == a1[49])
        v44 = 412;
      else
        v44 = 408;
      v36 = (uint64_t *)*((_QWORD *)v35 - 1);
      if (v42 == (_QWORD *)(v43 + 8 * *(unsigned int *)((char *)a1 + v44)))
      {
        v34 = v63;
LABEL_52:
        *((_QWORD *)v35 - 1) = v36 + 1;
      }
      else
      {
        sub_1C6190580((uint64_t)v61, (uint64_t)&v58, v36);
        v45 = **((_QWORD **)v35 - 1);
        v46 = *(_QWORD *)(v45 + 88);
        v47 = v63;
        if (v63 >= (unint64_t)HIDWORD(v63))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
          v47 = v63;
        }
        v48 = (char *)v62 + 16 * v47;
        *v48 = v45;
        v48[1] = v46;
        v34 = v63 + 1;
LABEL_46:
        LODWORD(v63) = v34;
      }
    }
    --v34;
    goto LABEL_46;
  }
LABEL_56:
  if (v62 != v64)
    free(v62);
  v49 = v19 + 1;
  while (v49 != v20)
  {
    v50 = *v49++;
    v21 = v50;
    if (v50 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v19 = v49 - 1;
      goto LABEL_23;
    }
  }
  v53 = v58;
  v52 = v60;
  if (!(_DWORD)v59)
    goto LABEL_67;
  v54 = &v58[v60];
  if (v60)
  {
    v56 = 8 * v60;
    while ((*v53 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      ++v53;
      v56 -= 8;
      if (!v56)
      {
        v53 = &v58[v60];
        break;
      }
    }
  }
LABEL_68:
  sub_1C6221428((llvm::SmallPtrSetImplBase *)a3, v53, v54, v54);
  return MEMORY[0x1CAA32FB4](v58, 8);
}

void LiveDebugValues::InstrRefBasedLDV::buildVLocValueMap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  uint64_t v38;
  char v39;
  int v40;
  _OWORD *v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD *v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  unint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  _DWORD **v85;
  uint64_t v86;
  _DWORD *v87;
  int v88;
  uint64_t v89;
  void **v90;
  uint64_t v91;
  void *v92;
  _QWORD *v93;
  int i;
  _DWORD *v95;
  uint64_t v96;
  _BYTE *v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  int64_t v103;
  _DWORD *v104;
  unsigned int *v105;
  uint64_t v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int *v109;
  uint64_t v110;
  unint64_t v111;
  unsigned int *v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  int v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t *v123;
  uint64_t *v124;
  unsigned int v125;
  uint64_t v126;
  unint64_t v127;
  char v128;
  _OWORD *v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  unsigned int v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  char v146;
  void **p_p;
  char v148;
  _QWORD *v149;
  int v150;
  unsigned int v151;
  void *v152;
  _BYTE *v153;
  uint64_t v154;
  int v155;
  BOOL v156;
  unsigned int v157;
  void *v158;
  void **v159;
  uint64_t v160;
  int *v161;
  __int128 *v162;
  int v163;
  uint64_t v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  unint64_t v170;
  uint64_t v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  _QWORD *v178;
  _QWORD *v179;
  BOOL v180;
  uint64_t v181;
  uint64_t v182;
  int v184;
  unsigned int v185;
  void *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  char v190;
  unint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  _OWORD v199[2];
  __int128 v200;
  _BYTE v201[28];
  uint64_t v202;
  uint64_t *v203;
  uint64_t *v204;
  uint64_t v205;
  int v206;
  _BYTE v207[16];
  int v208;
  uint64_t v209;
  char v210;
  _DWORD v211[55];
  _QWORD v212[2];
  unsigned int v213;
  _QWORD v214[2];
  int v215;
  _BYTE v216[7];
  _BYTE *v217;
  void *v218;
  uint64_t v219;
  int v220;
  _BYTE v221[64];
  unint64_t *v222;
  void *v223;
  uint64_t v224;
  int v225;
  _BYTE v226[64];
  uint64_t *v227;
  void *__b;
  uint64_t v229;
  int v230;
  _BYTE v231[128];
  _BYTE *v232;
  void *v233;
  uint64_t v234;
  int v235;
  _BYTE v236[128];
  void *__p;
  _BYTE *v238;
  uint64_t v239;
  void *v240;
  _BYTE *v241;
  uint64_t v242;
  void *v243[2];
  __int128 v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  void *v251;
  uint64_t v252;
  _BYTE v253[256];
  void *v254;
  uint64_t v255;
  _BYTE v256[2560];
  void *v257;
  uint64_t v258;
  _BYTE v259[2560];
  void **v260;
  uint64_t v261;
  _QWORD v262[11];

  v4 = (_QWORD *)MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v13 = (uint64_t)v4;
  v262[8] = *MEMORY[0x1E0C80C00];
  v241 = 0;
  v240 = 0;
  v242 = 0;
  v238 = 0;
  __p = 0;
  v239 = 0;
  v232 = v236;
  v233 = v236;
  v234 = 16;
  v235 = 0;
  v227 = (uint64_t *)v231;
  __b = v231;
  v229 = 16;
  v230 = 0;
  v222 = (unint64_t *)v226;
  v223 = v226;
  v224 = 8;
  v225 = 0;
  v260 = (void **)v262;
  v261 = 0x800000000;
  LiveDebugValues::InstrRefBasedLDV::getBlocksForScope(v4, v14, (unsigned int *)&v222, v15);
  LODWORD(v16) = HIDWORD(v224);
  if (HIDWORD(v224) - v225 == 1)
    goto LABEL_2;
  v194 = v6;
  v217 = v221;
  v218 = v221;
  v219 = 8;
  v220 = 0;
  v17 = (unint64_t *)v223;
  v18 = v222;
  v19 = v224;
  if (v223 == v222)
    v20 = HIDWORD(v224);
  else
    v20 = v224;
  v21 = (uint64_t *)v223;
  if ((_DWORD)v20)
  {
    v22 = 0;
    while (*(_QWORD *)((char *)v223 + v22) >= 0xFFFFFFFFFFFFFFFELL)
    {
      v22 += 8;
      if (8 * v20 == v22)
        goto LABEL_31;
    }
    v21 = (uint64_t *)((char *)v223 + v22);
  }
  v23 = (uint64_t *)((char *)v223 + 8 * v20);
  if (v21 != v23)
  {
    v24 = *v21;
LABEL_26:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v217, v24);
    v25 = (unint64_t *)(v21 + 1);
    while (v25 != (unint64_t *)v23)
    {
      v26 = *v25++;
      v24 = v26;
      if (v26 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v21 = (uint64_t *)(v25 - 1);
        goto LABEL_26;
      }
    }
    v17 = (unint64_t *)v223;
    v18 = v222;
    LODWORD(v16) = HIDWORD(v224);
    v19 = v224;
  }
LABEL_31:
  if (v17 == v18)
    v16 = v16;
  else
    v16 = v19;
  v27 = v17;
  if ((_DWORD)v16)
  {
    v28 = 8 * v16;
    v27 = v17;
    while (*v27 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v27;
      v28 -= 8;
      if (!v28)
      {
        v29 = v261;
        goto LABEL_47;
      }
    }
  }
  v30 = &v17[v16];
  v29 = v261;
  if (v27 != v30)
  {
    v31 = *v27;
LABEL_41:
    if (v29 >= HIDWORD(v261))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v260, (uint64_t)v262, v29 + 1, 8);
      v29 = v261;
    }
    v260[v29] = (void *)v31;
    v29 = v261 + 1;
    LODWORD(v261) = v261 + 1;
    v32 = v27 + 1;
    while (v32 != v30)
    {
      v33 = *v32++;
      v31 = v33;
      if (v33 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v27 = v32 - 1;
        goto LABEL_41;
      }
    }
  }
LABEL_47:
  v257 = (void *)v13;
  v34 = 126 - 2 * __clz(v29);
  if (v29)
    v35 = v34;
  else
    v35 = 0;
  sub_1C53028D8((uint64_t)v260, (uint64_t *)&v260[v29], &v257, v35, 1);
  v36 = v261;
  v257 = v259;
  v258 = 0x2000000000;
  v254 = v256;
  v255 = 0x2000000000;
  if (v261 < 0x21)
  {
    v37 = 32;
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v257, (uint64_t)v259, v261, 80);
    v37 = HIDWORD(v255);
  }
  v191 = v36;
  v198 = v8;
  v188 = v10;
  if (v37 < v36)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v254, (uint64_t)v256, v36, 80);
    v38 = *(_QWORD *)(v13 + 344);
    goto LABEL_57;
  }
  v38 = *(_QWORD *)(v13 + 344);
  if ((_DWORD)v36)
  {
LABEL_57:
    v40 = 0;
    v196 = v38;
    do
    {
      v203 = (uint64_t *)LiveDebugValues::ValueIDNum::EmptyValue;
      LOBYTE(v204) = 0;
      v207[8] = 0;
      v208 = v40;
      v209 = v38;
      v210 = 0;
      v211[0] = *(_DWORD *)v216;
      *(_DWORD *)((char *)v211 + 3) = *(_DWORD *)&v216[3];
      *(_DWORD *)((char *)&v211[1] + 3) = 4;
      v41 = (_OWORD *)sub_1C53035C4((uint64_t)&v257, (unint64_t)&v203);
      v42 = (char *)v257 + 80 * v258;
      *v42 = *v41;
      v43 = v41[4];
      v44 = v41[1];
      v45 = v41[2];
      v42[3] = v41[3];
      v42[4] = v43;
      v42[1] = v44;
      v42[2] = v45;
      LODWORD(v258) = v258 + 1;
      v46 = (_OWORD *)sub_1C53035C4((uint64_t)&v254, (unint64_t)&v203);
      v47 = (char *)v254 + 80 * v255;
      *v47 = *v46;
      v48 = v46[4];
      v49 = v46[1];
      v50 = v46[2];
      v38 = v196;
      v47[3] = v46[3];
      v47[4] = v48;
      v47[1] = v49;
      v47[2] = v50;
      LODWORD(v255) = v255 + 1;
      ++v40;
    }
    while ((_DWORD)v36 != v40);
    v39 = 0;
    goto LABEL_60;
  }
  v196 = *(_QWORD *)(v13 + 344);
  v39 = 1;
LABEL_60:
  v214[1] = 0;
  v214[0] = 0;
  v215 = 0;
  v212[1] = 0;
  v212[0] = 0;
  v213 = 0;
  sub_1C6221498(v214, v36);
  sub_1C6221498(v212, v36);
  v190 = v39;
  if ((v39 & 1) == 0)
  {
    v51 = 0;
    v52 = 0;
    v53 = v191;
    do
    {
      v54 = (char *)v254 + v51;
      sub_1C6180A54((uint64_t)v214, (uint64_t *)&v260[v52])[1] = v54;
      v55 = (char *)v257 + v51;
      sub_1C6180A54((uint64_t)v212, (uint64_t *)&v260[v52++])[1] = v55;
      v51 += 80;
      --v53;
    }
    while (v53);
  }
  v56 = *(_QWORD *)(v12 + 192);
  if (v56)
    v57 = *(_QWORD **)(v12 + 176);
  else
    v57 = *(_QWORD **)v12;
  v187 = *(_QWORD *)v12 + 40 * *(unsigned int *)(v12 + 8);
  v195 = (uint64_t *)(v13 + 576);
  v58 = v13 + 552;
  v59 = v194;
  v60 = v191;
  v61 = &unk_1ED830000;
  v62 = v196;
  v189 = *(_QWORD *)(v12 + 192);
  while (1)
  {
    v63 = v56 ? v12 + 184 : v187;
    if (v57 == (_QWORD *)v63)
      break;
    v64 = v57 + 4;
    if (!v56)
      v64 = v57;
    v197 = (uint64_t)v64;
    if ((v190 & 1) == 0)
    {
      v65 = 0;
      v66 = 72;
      do
      {
        v67 = v61[180];
        v68 = (char *)v257 + v66;
        *((_QWORD *)v68 - 9) = v67;
        *((_BYTE *)v68 - 64) = 0;
        *((_BYTE *)v68 - 32) = 0;
        *(v68 - 6) = v65;
        *((_QWORD *)v68 - 2) = v62;
        *((_BYTE *)v68 - 8) = 0;
        *(v68 - 1) = *(_DWORD *)&v216[3];
        *v68 = 4;
        *(_DWORD *)((char *)v68 - 7) = *(_DWORD *)v216;
        v69 = (char *)v254 + v66;
        *((_QWORD *)v69 - 9) = v67;
        *((_BYTE *)v69 - 64) = 0;
        *((_BYTE *)v69 - 32) = 0;
        *(v69 - 6) = v65;
        *((_QWORD *)v69 - 2) = v62;
        *((_BYTE *)v69 - 8) = 0;
        *(v69 - 1) = *(_DWORD *)&v216[3];
        *v69 = 4;
        *(_DWORD *)((char *)v69 - 7) = *(_DWORD *)v216;
        ++v65;
        v66 += 80;
      }
      while (v60 != v65);
    }
    v203 = (uint64_t *)v207;
    v204 = (uint64_t *)v207;
    v205 = 32;
    v206 = 0;
    if (v223 == v222)
      v70 = (uint64_t *)((char *)&v224 + 4);
    else
      v70 = &v224;
    v71 = *(unsigned int *)v70;
    v192 = v57;
    if ((_DWORD)v71)
    {
      v72 = 8 * v71;
      v73 = (uint64_t *)v223;
      while ((unint64_t)*v73 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v73;
        v72 -= 8;
        if (!v72)
          goto LABEL_93;
      }
    }
    else
    {
      v73 = (uint64_t *)v223;
    }
    v74 = (unint64_t *)((char *)v223 + 8 * v71);
    if (v73 == (uint64_t *)v74)
    {
LABEL_93:
      v79 = 0;
      LODWORD(v80) = 0;
    }
    else
    {
      v75 = *v73;
LABEL_87:
      v76 = *v59 + 472 * *(int *)(v75 + 24);
      if (*(_QWORD *)(v76 + 32) != sub_1C62214E4(v76, (uint64_t *)v197))
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v203, v75);
      v77 = (unint64_t *)(v73 + 1);
      while (v77 != v74)
      {
        v78 = *v77++;
        v75 = v78;
        if (v78 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v73 = (uint64_t *)(v77 - 1);
          goto LABEL_87;
        }
      }
      LODWORD(v80) = HIDWORD(v205);
      v79 = v206;
    }
    v251 = v253;
    v252 = 0x2000000000;
    if ((_DWORD)v80 - v79 != 1)
    {
      v84 = *(_QWORD *)(v13 + 8);
      if (!*(_QWORD *)(v84 + 1320))
      {
        v181 = operator new();
        *(_OWORD *)(v181 + 32) = 0u;
        *(_OWORD *)(v181 + 48) = 0u;
        *(_QWORD *)(v181 + 56) = 0;
        *(_QWORD *)(v181 + 64) = 0;
        *(_OWORD *)(v181 + 16) = 0u;
        *(_QWORD *)v181 = v181 + 16;
        *(_QWORD *)(v181 + 8) = 0x100000000;
        *(_QWORD *)(v181 + 24) = 0;
        *(_QWORD *)(v181 + 32) = 0;
        *(_DWORD *)(v181 + 40) = 0;
        *(_QWORD *)(v181 + 48) = 0;
        *(_BYTE *)(v181 + 64) = 0;
        v182 = *(_QWORD *)(v84 + 1320);
        *(_QWORD *)(v84 + 1320) = v181;
        if (v182)
          sub_1C4DC4DE4(v84 + 1320, v182);
      }
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v84);
      v243[0] = *(void **)(v84 + 1320);
      BYTE1(v243[1]) = 1;
      *(_QWORD *)&v244 = &v217;
      *((_QWORD *)&v244 + 1) = &v203;
      sub_1C52F76F0((uint64_t)v243, (uint64_t)&v251);
      if ((_DWORD)v252)
      {
        v85 = (_DWORD **)v251;
        v86 = 8 * v252;
        do
        {
          v87 = *v85++;
          v243[0] = v87;
          v88 = v87[6];
          v89 = sub_1C6180A54((uint64_t)v212, (uint64_t *)v243)[1];
          *(_QWORD *)v89 = LiveDebugValues::ValueIDNum::EmptyValue;
          *(_BYTE *)(v89 + 8) = 0;
          *(_BYTE *)(v89 + 40) = 0;
          *(_DWORD *)(v89 + 48) = v88;
          *(_QWORD *)(v89 + 56) = v196;
          *(_BYTE *)(v89 + 64) = 0;
          *(_DWORD *)(v89 + 65) = *(_DWORD *)v216;
          *(_DWORD *)(v89 + 68) = *(_DWORD *)&v216[3];
          *(_DWORD *)(v89 + 72) = 3;
          v86 -= 8;
        }
        while (v86);
      }
      if ((_DWORD)v261)
      {
        v90 = v260;
        v91 = 8 * v261;
        do
        {
          v243[0] = 0;
          v92 = *v90++;
          v243[0] = v92;
          v93 = sub_1C6128C08(v195, v243);
          sub_1C52EA034((uint64_t)&v240, (_DWORD *)v93 + 2);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v232, (uint64_t)v243[0]);
          v91 -= 8;
        }
        while (v91);
      }
      for (i = 1; ; i = 0)
      {
LABEL_113:
        v95 = v240;
        if (v240 != v241)
        {
          while (1)
          {
            v202 = 0;
            v96 = *((_QWORD *)sub_1C4A118C0(v58, v95) + 1);
            v202 = v96;
            *(_DWORD *)(v13 + 360) = *(_DWORD *)(v96 + 24);
            v97 = v240;
            v98 = v241;
            v99 = v241 - (_BYTE *)v240;
            if (v241 - (_BYTE *)v240 >= 5)
            {
              v100 = 0;
              v101 = v99 >> 2;
              v102 = *(_DWORD *)v240;
              v103 = (unint64_t)((v99 >> 2) - 2) >> 1;
              v104 = v240;
              do
              {
                v105 = &v104[v100 + 1];
                v106 = (2 * v100) | 1;
                v100 = 2 * v100 + 2;
                if (v100 >= v101)
                {
                  v107 = *v105;
                  v100 = v106;
                }
                else
                {
                  v107 = *v105;
                  v108 = v105[1];
                  if (*v105 >= v108)
                    v107 = v105[1];
                  if (*v105 <= v108)
                    v100 = v106;
                  else
                    ++v105;
                }
                *v104 = v107;
                v104 = v105;
              }
              while (v100 <= v103);
              v109 = (unsigned int *)(v98 - 4);
              if (v105 == (unsigned int *)(v98 - 4))
              {
                *v105 = v102;
              }
              else
              {
                *v105 = *v109;
                *v109 = v102;
                v110 = (char *)v105 - v97 + 4;
                if (v110 >= 5)
                {
                  v111 = (((unint64_t)v110 >> 2) - 2) >> 1;
                  v112 = (unsigned int *)&v97[4 * v111];
                  v113 = *v112;
                  v114 = *v105;
                  if (*v112 > *v105)
                  {
                    do
                    {
                      *v105 = v113;
                      v105 = v112;
                      if (!v111)
                        break;
                      v111 = (v111 - 1) >> 1;
                      v112 = (unsigned int *)&v97[4 * v111];
                      v113 = *v112;
                    }
                    while (*v112 > v114);
                    *v105 = v114;
                  }
                }
              }
            }
            v241 = v98 - 4;
            if (v213)
            {
              LODWORD(v115) = (v213 - 1) & ((v96 >> 4) ^ (v96 >> 9));
              v116 = (uint64_t *)(v212[0] + 16 * v115);
              v117 = *v116;
              if (v96 != *v116)
              {
                v118 = 1;
                while (v117 != -4096)
                {
                  v119 = v115 + v118++;
                  v115 = v119 & (v213 - 1);
                  v117 = *(_QWORD *)(v212[0] + 16 * v115);
                  if (v96 == v117)
                  {
                    v116 = (uint64_t *)(v212[0] + 16 * v115);
                    goto LABEL_138;
                  }
                }
                v116 = (uint64_t *)(v212[0] + 16 * v213);
              }
            }
            else
            {
              v116 = (uint64_t *)v212[0];
            }
LABEL_138:
            v120 = v116[1];
            v122 = LiveDebugValues::InstrRefBasedLDV::vlocJoin((uint64_t *)v13, v96, (uint64_t)v214, &v222, v120);
            v243[0] = &v244;
            v243[1] = (void *)0x800000000;
            v123 = *(uint64_t **)(v202 + 64);
            v124 = *(uint64_t **)(v202 + 72);
            if (v123 != v124)
            {
              v125 = 0;
              do
              {
                v126 = *v123;
                if (v125 >= HIDWORD(v243[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v243, (uint64_t)&v244, v125 + 1, 8);
                  v125 = v243[1];
                }
                *((_QWORD *)v243[0] + v125) = v126;
                v125 = ++LODWORD(v243[1]);
                ++v123;
              }
              while (v123 != v124);
            }
            if (*(_DWORD *)(v120 + 72) == 3 && *(_DWORD *)(v120 + 48) == *(_DWORD *)(v13 + 360))
            {
              v127 = LiveDebugValues::InstrRefBasedLDV::pickVPHILoc(v13, v202, v121, (uint64_t)v214, v198, (uint64_t)v243);
              if (v128)
              {
                if (*(_QWORD *)v120 != v127)
                  v122 = 1;
                *(_QWORD *)v120 = v127;
              }
            }
            if (((i | v122) & 1) == 0)
              goto LABEL_150;
            v129 = (_OWORD *)sub_1C6180A54((uint64_t)v214, &v202)[1];
            v130 = *v59 + 472 * *(int *)(v202 + 24);
            v131 = sub_1C62214E4(v130, (uint64_t *)v197);
            if (*(_QWORD *)(v130 + 32) == v131)
              goto LABEL_159;
            if (*(_DWORD *)(v131 + 112))
              break;
            v132 = *(_DWORD *)(v202 + 24);
            *(_QWORD *)&v199[0] = LiveDebugValues::ValueIDNum::EmptyValue;
            BYTE8(v199[0]) = 0;
            BYTE8(v200) = 0;
            *(_DWORD *)v201 = v132;
            *(_QWORD *)&v201[8] = v196;
            v201[16] = 0;
            *(_DWORD *)&v201[17] = *(_DWORD *)v216;
            *(_DWORD *)&v201[20] = *(_DWORD *)&v216[3];
            *(_DWORD *)&v201[24] = 4;
            if ((sub_1C6221380((uint64_t)v129, (uint64_t)v199) & 1) != 0)
              goto LABEL_150;
            *v129 = v199[0];
            v133 = v199[1];
            v134 = v200;
            v135 = *(_OWORD *)v201;
            v136 = *(_OWORD *)&v201[12];
LABEL_161:
            *(_OWORD *)((char *)v129 + 60) = v136;
            v129[2] = v134;
            v129[3] = v135;
            v129[1] = v133;
            v137 = *(uint64_t **)(v202 + 88);
            v138 = *(uint64_t **)(v202 + 96);
            if (v137 != v138)
            {
              v139 = v212[0];
              v140 = v213;
              v141 = v213 - 1;
              while (2)
              {
                *(_QWORD *)&v199[0] = 0;
                v142 = *v137;
                *(_QWORD *)&v199[0] = *v137;
                if (v140)
                {
                  v143 = ((v142 >> 4) ^ (v142 >> 9)) & v141;
                  v144 = *(_QWORD *)(v139 + 16 * v143);
                  if (v142 != v144)
                  {
                    v150 = 1;
                    while (v144 != -4096)
                    {
                      v151 = v143 + v150++;
                      v143 = v151 & v141;
                      v144 = *(_QWORD *)(v139 + 16 * v143);
                      if (v142 == v144)
                        goto LABEL_165;
                    }
                    goto LABEL_166;
                  }
LABEL_165:
                  if (v143 != v140)
                  {
                    v145 = *((_DWORD *)sub_1C6128C08(v195, v199) + 2);
                    if (v145 <= *((_DWORD *)sub_1C6128C08(v195, &v202) + 2))
                    {
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v227, *(uint64_t *)&v199[0]);
                      v58 = v13 + 552;
                      v59 = v194;
                      if (!v148)
                        goto LABEL_166;
                      p_p = &__p;
                    }
                    else
                    {
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v232, *(uint64_t *)&v199[0]);
                      v58 = v13 + 552;
                      v59 = v194;
                      if (!v146)
                        goto LABEL_166;
                      p_p = &v240;
                    }
                    v193 = (uint64_t)p_p;
                    v149 = sub_1C6128C08(v195, v199);
                    sub_1C52EA034(v193, (_DWORD *)v149 + 2);
                  }
                }
LABEL_166:
                if (++v137 == v138)
                  break;
                continue;
              }
            }
LABEL_150:
            if (v243[0] != &v244)
              free(v243[0]);
            v95 = v240;
            if (v240 == v241)
            {
              v152 = __p;
              v153 = v238;
              goto LABEL_180;
            }
          }
          v120 = v131 + 40;
LABEL_159:
          if ((sub_1C6221380((uint64_t)v129, v120) & 1) != 0)
            goto LABEL_150;
          *v129 = *(_OWORD *)v120;
          v133 = *(_OWORD *)(v120 + 16);
          v134 = *(_OWORD *)(v120 + 32);
          v135 = *(_OWORD *)(v120 + 48);
          v136 = *(_OWORD *)(v120 + 60);
          goto LABEL_161;
        }
        v152 = __p;
        v153 = v238;
        if (__p == v238)
          break;
LABEL_180:
        v240 = v152;
        v241 = v153;
        __p = v95;
        v238 = v95;
        v154 = v242;
        v242 = v239;
        v239 = v154;
        llvm::SmallPtrSetImplBase::swap((uint64_t *)&v232, &v227);
        if (__b == v227)
          goto LABEL_181;
        if (v229 < 0x21 || 4 * (HIDWORD(v229) - v230) >= v229)
        {
          memset(__b, 255, 8 * v229);
LABEL_181:
          i = 0;
          v230 = 0;
          HIDWORD(v229) = 0;
          goto LABEL_113;
        }
        free(__b);
        v155 = 1 << (33 - __clz(HIDWORD(v229) - v230 - 1));
        v156 = (HIDWORD(v229) - v230) > 0x10;
        v230 = 0;
        if (v156)
          v157 = v155;
        else
          v157 = 32;
        v229 = v157;
        v158 = malloc_type_malloc(8 * v157, 0x4065EBACuLL);
        if (!v158)
          goto LABEL_231;
        __b = v158;
        memset(v158, 255, 8 * v229);
      }
      if (!(_DWORD)v261)
        goto LABEL_198;
      v159 = v260;
      v160 = 8 * v261;
      while (2)
      {
        v161 = (int *)*v159;
        *(_QWORD *)&v199[0] = *v159;
        v162 = (__int128 *)sub_1C6180A54((uint64_t)v212, (uint64_t *)v199)[1];
        v163 = *((_DWORD *)v162 + 18);
        if (v163 != 4)
        {
          if (v163 != 3)
            goto LABEL_196;
          if (*(_QWORD *)v162 != LiveDebugValues::ValueIDNum::EmptyValue)
          {
            *((_DWORD *)v162 + 18) = 1;
LABEL_196:
            v164 = *v188 + 976 * v161[6];
            v165 = *(_OWORD *)v197;
            v166 = *(_OWORD *)(v197 + 16);
            v245 = *(_QWORD *)(v197 + 32);
            v244 = v166;
            *(_OWORD *)v243 = v165;
            v167 = v162[4];
            v169 = v162[1];
            v168 = v162[2];
            v249 = v162[3];
            v250 = v167;
            v247 = v169;
            v248 = v168;
            v246 = *v162;
            v170 = sub_1C530363C(v164, (unint64_t)v243);
            v171 = *(_QWORD *)v164 + 120 * *(unsigned int *)(v164 + 8);
            v173 = *(_OWORD *)(v170 + 80);
            v172 = *(_OWORD *)(v170 + 96);
            v174 = *(_OWORD *)(v170 + 64);
            *(_QWORD *)(v171 + 112) = *(_QWORD *)(v170 + 112);
            *(_OWORD *)(v171 + 80) = v173;
            *(_OWORD *)(v171 + 96) = v172;
            *(_OWORD *)(v171 + 64) = v174;
            v175 = *(_OWORD *)v170;
            v176 = *(_OWORD *)(v170 + 16);
            v177 = *(_OWORD *)(v170 + 48);
            *(_OWORD *)(v171 + 32) = *(_OWORD *)(v170 + 32);
            *(_OWORD *)(v171 + 48) = v177;
            *(_OWORD *)v171 = v175;
            *(_OWORD *)(v171 + 16) = v176;
            ++*(_DWORD *)(v164 + 8);
          }
        }
        ++v159;
        v160 -= 8;
        if (!v160)
          goto LABEL_198;
        continue;
      }
    }
    v81 = v204;
    if (v204 == v203)
      v80 = v80;
    else
      v80 = v205;
    if ((_DWORD)v80)
    {
      v82 = 8 * v80;
      v83 = &v204[v80];
      while ((unint64_t)*v81 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v81;
        v82 -= 8;
        if (!v82)
        {
          v81 = v83;
          break;
        }
      }
    }
    LiveDebugValues::InstrRefBasedLDV::placePHIsForSingleVarDefinition(v13, &v217, *v81, v59, v197, v188);
LABEL_198:
    if (v251 != v253)
      free(v251);
    v60 = v191;
    if (v204 != v203)
      free(v204);
    v56 = v189;
    if (v189)
    {
      v178 = v192;
      v179 = (_QWORD *)v192[1];
      v61 = (_QWORD *)&unk_1ED830000;
      v62 = v196;
      if (v179)
      {
        do
        {
          v57 = v179;
          v179 = (_QWORD *)*v179;
        }
        while (v179);
      }
      else
      {
        do
        {
          v57 = (_QWORD *)v178[2];
          v180 = *v57 == (_QWORD)v178;
          v178 = v57;
        }
        while (!v180);
      }
    }
    else
    {
      v57 = v192 + 5;
      v61 = (_QWORD *)&unk_1ED830000;
      v62 = v196;
    }
  }
  LODWORD(v261) = 0;
  if (v223 != v222)
  {
    if (v224 >= 0x21 && 4 * (HIDWORD(v224) - v225) < v224)
    {
      free(v223);
      v184 = 1 << (33 - __clz(HIDWORD(v224) - v225 - 1));
      v156 = (HIDWORD(v224) - v225) > 0x10;
      v225 = 0;
      if (v156)
        v185 = v184;
      else
        v185 = 32;
      v224 = v185;
      v186 = malloc_type_malloc(8 * v185, 0x4065EBACuLL);
      if (!v186)
LABEL_231:
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      v223 = v186;
      memset(v186, 255, 8 * v224);
      goto LABEL_214;
    }
    memset(v223, 255, 8 * v224);
  }
  v225 = 0;
  HIDWORD(v224) = 0;
LABEL_214:
  MEMORY[0x1CAA32FB4](v212[0], 8);
  MEMORY[0x1CAA32FB4](v214[0], 8);
  if (v254 != v256)
    free(v254);
  if (v257 != v259)
    free(v257);
  if (v218 != v217)
    free(v218);
LABEL_2:
  if (v260 != v262)
    free(v260);
  if (v223 != v222)
    free(v223);
  if (__b != v227)
    free(__b);
  if (v233 != v232)
    free(v233);
  if (__p)
  {
    v238 = __p;
    operator delete(__p);
  }
  if (v240)
  {
    v241 = v240;
    operator delete(v240);
  }
}

unint64_t LiveDebugValues::InstrRefBasedLDV::placePHIsForSingleVarDefinition(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6)
{
  unint64_t result;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *i;
  _QWORD *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  result = sub_1C62214E4(*a4 + 472 * *(int *)(a3 + 24), (uint64_t *)a5);
  if (*(_DWORD *)(result + 112))
  {
    v12 = a2[1];
    if (v12 == *a2)
      v13 = (unsigned int *)a2 + 5;
    else
      v13 = (unsigned int *)(a2 + 2);
    v14 = *v13;
    if ((_DWORD)v14)
    {
      v15 = 8 * v14;
      for (i = (uint64_t *)a2[1]; (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
      {
        v15 -= 8;
        if (!v15)
          return result;
      }
    }
    else
    {
      i = (uint64_t *)a2[1];
    }
    v17 = (_QWORD *)(v12 + 8 * v14);
    if (i != v17)
    {
      v18 = (__int128 *)(result + 40);
      v19 = *i;
LABEL_13:
      v20 = *(_QWORD *)(a1 + 8);
      llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v20);
      result = llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::properlyDominates(*(_QWORD *)(v20 + 1320), a3, v19);
      if ((_DWORD)result)
      {
        v21 = *a6 + 976 * *(int *)(v19 + 24);
        v22 = *(_OWORD *)(a5 + 16);
        v35[0] = *(_OWORD *)a5;
        v35[1] = v22;
        v36 = *(_QWORD *)(a5 + 32);
        v37 = *v18;
        v23 = v18[4];
        v25 = v18[1];
        v24 = v18[2];
        v40 = v18[3];
        v41 = v23;
        v38 = v25;
        v39 = v24;
        result = sub_1C530363C(v21, (unint64_t)v35);
        v26 = *(_QWORD *)v21 + 120 * *(unsigned int *)(v21 + 8);
        v28 = *(_OWORD *)(result + 80);
        v27 = *(_OWORD *)(result + 96);
        v29 = *(_OWORD *)(result + 64);
        *(_QWORD *)(v26 + 112) = *(_QWORD *)(result + 112);
        *(_OWORD *)(v26 + 80) = v28;
        *(_OWORD *)(v26 + 96) = v27;
        *(_OWORD *)(v26 + 64) = v29;
        v30 = *(_OWORD *)result;
        v31 = *(_OWORD *)(result + 16);
        v32 = *(_OWORD *)(result + 48);
        *(_OWORD *)(v26 + 32) = *(_OWORD *)(result + 32);
        *(_OWORD *)(v26 + 48) = v32;
        *(_OWORD *)v26 = v30;
        *(_OWORD *)(v26 + 16) = v31;
        ++*(_DWORD *)(v21 + 8);
      }
      v33 = (unint64_t *)(i + 1);
      while (v33 != v17)
      {
        v34 = *v33++;
        v19 = v34;
        if (v34 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          i = (uint64_t *)(v33 - 1);
          goto LABEL_13;
        }
      }
    }
  }
  return result;
}

void LiveDebugValues::InstrRefBasedLDV::dump_mloc_transfer(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int *v10;
  llvm *v11;
  llvm *v12;
  _DWORD *v13;
  void **v14;
  size_t v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  void **v18;
  size_t v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  unsigned int *v22;
  unsigned int v23;
  void *__p[2];
  char v25;
  void *v26[2];
  char v27;

  v4 = sub_1C622130C((_DWORD *)a2);
  if ((*(_DWORD *)a2 & 1) != 0)
    v6 = a2 + 8;
  else
    v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_DWORD *)(a2 + 16);
  if ((*(_DWORD *)a2 & 1) != 0)
    v7 = 4;
  v8 = (unsigned int *)(v6 + 16 * v7);
  if (v8 != v4)
  {
    v9 = v4;
    v10 = v5;
    do
    {
      LiveDebugValues::MLocTracker::LocIdxToName(*(_QWORD *)(a1 + 352), *v9, v26);
      LiveDebugValues::MLocTracker::IDAsString(*(_QWORD *)(a1 + 352), (unint64_t *)v9 + 1, __p);
      v12 = llvm::dbgs(v11);
      v13 = (_DWORD *)*((_QWORD *)v12 + 4);
      if (*((_QWORD *)v12 + 3) - (_QWORD)v13 > 3uLL)
      {
        *v13 = 543387468;
        *((_QWORD *)v12 + 4) += 4;
      }
      else
      {
        v12 = llvm::raw_ostream::write(v12, "Loc ", 4uLL);
      }
      if (v27 >= 0)
        v14 = v26;
      else
        v14 = (void **)v26[0];
      if (v27 >= 0)
        v15 = v27 & 0x7F;
      else
        v15 = (size_t)v26[1];
      v16 = llvm::raw_ostream::write(v12, (const char *)v14, v15);
      v17 = *((_QWORD *)v16 + 4);
      if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 4)
      {
        *(_BYTE *)(v17 + 4) = 32;
        *(_DWORD *)v17 = 1043148064;
        *((_QWORD *)v16 + 4) += 5;
      }
      else
      {
        v16 = llvm::raw_ostream::write(v16, " --> ", 5uLL);
      }
      if (v25 >= 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      if (v25 >= 0)
        v19 = v25 & 0x7F;
      else
        v19 = (size_t)__p[1];
      v20 = llvm::raw_ostream::write(v16, (const char *)v18, v19);
      v21 = (_BYTE *)*((_QWORD *)v20 + 4);
      if (*((_BYTE **)v20 + 3) == v21)
      {
        llvm::raw_ostream::write(v20, "\n", 1uLL);
      }
      else
      {
        *v21 = 10;
        ++*((_QWORD *)v20 + 4);
      }
      if (v25 < 0)
        operator delete(__p[0]);
      if (v27 < 0)
        operator delete(v26[0]);
      v22 = v9 + 4;
      while (v22 != v10)
      {
        v23 = *v22;
        v22 += 4;
        if (v23 <= 0xFFFFFFFD)
        {
          v9 = v22 - 4;
          goto LABEL_35;
        }
      }
      v9 = v10;
LABEL_35:
      ;
    }
    while (v9 != v8);
  }
}

void LiveDebugValues::InstrRefBasedLDV::initialSetup(LiveDebugValues::InstrRefBasedLDV *this, llvm::MachineFunction *a2)
{
  char *v4;
  char *v5;
  char *i;
  uint64_t v7;
  char *v8;
  char *v9;
  llvm::MachineFunction *v10;
  int v11;
  int v12;
  char *j;
  int v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  void *__p;
  char *v21;
  uint64_t v22;
  char *v23;
  llvm::MachineFunction *v24;

  *((_QWORD *)this + 43) = llvm::DIExpression::getImpl(***(_QWORD ****)a2, 0, 0, 0, 1);
  v4 = (char *)a2 + 320;
  v5 = (char *)*((_QWORD *)a2 + 41);
  if (v5 != (char *)a2 + 320)
  {
    do
    {
      for (i = (char *)*((_QWORD *)v5 + 7); i != v5 + 48; i = (char *)*((_QWORD *)i + 1))
      {
        v7 = *((_QWORD *)i + 7);
        if (v7 && *(_DWORD *)(v7 + 4))
          goto LABEL_8;
      }
      sub_1C4774094((LiveDebugValues::InstrRefBasedLDV *)((char *)this + 392), (uint64_t)v5);
LABEL_8:
      v5 = (char *)*((_QWORD *)v5 + 1);
    }
    while (v5 != v4);
  }
  v24 = a2;
  v21 = 0;
  v22 = 0;
  __p = 0;
  sub_1C486DB3C((char **)&__p, (uint64_t)&v24);
  v19 = 0;
  v9 = (char *)__p;
  v8 = v21;
  if (v21 != __p)
  {
    do
    {
      v10 = (llvm::MachineFunction *)*((_QWORD *)v8 - 1);
      v8 -= 8;
      v24 = v10;
      *((_QWORD *)sub_1C4A118C0((uint64_t)this + 552, &v19) + 1) = v10;
      v11 = v19;
      *((_DWORD *)sub_1C6128C08((uint64_t *)this + 72, &v24) + 2) = v11;
      v12 = v19;
      LODWORD(v23) = *((_DWORD *)v24 + 6);
      sub_1C48C3740((uint64_t)this + 600, &v23)[1] = v12;
      ++v19;
    }
    while (v8 != v9);
  }
  for (j = (char *)*((_QWORD *)a2 + 41); j != v4; j = (char *)*((_QWORD *)j + 1))
  {
    v23 = j;
    v24 = 0;
    if (!sub_1C61252B8((uint64_t *)this + 72, &v23, &v24)
      || v24 == (llvm::MachineFunction *)(*((_QWORD *)this + 72) + 16 * *((unsigned int *)this + 148)))
    {
      v24 = (llvm::MachineFunction *)j;
      *((_QWORD *)sub_1C4A118C0((uint64_t)this + 552, &v19) + 1) = j;
      v14 = v19;
      *((_DWORD *)sub_1C6128C08((uint64_t *)this + 72, &v24) + 2) = v14;
      v15 = v19;
      LODWORD(v23) = *((_DWORD *)v24 + 6);
      sub_1C48C3740((uint64_t)this + 600, &v23)[1] = v15;
      ++v19;
    }
  }
  v16 = *((unsigned int *)a2 + 232);
  v17 = 126 - 2 * __clz(v16);
  if ((_DWORD)v16)
    v18 = v17;
  else
    v18 = 0;
  sub_1C53036B4(*((_QWORD *)a2 + 115), *((_QWORD *)a2 + 115) + 20 * v16, v18, 1);
  if (__p)
  {
    v21 = (char *)__p;
    operator delete(__p);
  }
}

void LiveDebugValues::InstrRefBasedLDV::makeDepthFirstEjectionMap(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  BOOL v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unsigned int v35;
  int v36;
  unsigned int v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int v42;
  _BYTE v43[64];
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD v47[10];

  v47[8] = *MEMORY[0x1E0C80C00];
  v39 = v43;
  v40 = v43;
  v41 = 8;
  v42 = 0;
  v45 = v47;
  v8 = *(unsigned int *)(a1[38] + 40) - 1;
  v47[0] = a1[38];
  v47[1] = v8;
  v46 = 0x400000001;
  v9 = 1;
  do
  {
    while (1)
    {
      v10 = (char *)v45;
      v11 = v9;
      v12 = (char *)v45 + 16 * v9;
      v14 = *((_QWORD *)v12 - 2);
      v13 = *((_QWORD *)v12 - 1);
      *((_QWORD *)v12 - 1) = v13 - 1;
      if ((v13 & 0x8000000000000000) == 0)
        break;
      LODWORD(v46) = v11 - 1;
      v44 = 0;
      if (sub_1C6144BDC(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v14, &v44))
        v18 = v44 == *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16);
      else
        v18 = 1;
      if (!v18)
      {
        v19 = *(_QWORD *)(v44 + 8);
        v44 = 0;
        v20 = sub_1C61A4EFC(*(_QWORD *)a4, *(_DWORD *)(a4 + 16), v14, &v44);
        v21 = v44;
        if (!v20)
          v21 = *(_QWORD *)a4 + 72 * *(unsigned int *)(a4 + 16);
        LiveDebugValues::InstrRefBasedLDV::getBlocksForScope(a1, v19, (unsigned int *)&v39, (_QWORD *)(v21 + 8));
        v23 = v39;
        v22 = v40;
        v24 = (uint64_t *)((char *)&v41 + 4);
        if (v40 != v39)
          v24 = &v41;
        v25 = *(unsigned int *)v24;
        v26 = (unint64_t *)v40;
        if ((_DWORD)v25)
        {
          v27 = 8 * v25;
          v26 = (unint64_t *)v40;
          while (*v26 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v26;
            v27 -= 8;
            if (!v27)
              goto LABEL_31;
          }
        }
        v28 = &v40[8 * v25];
        if (v26 != (unint64_t *)v28)
        {
          v29 = *a2;
          v30 = *v26;
LABEL_25:
          v31 = *(unsigned int *)(v30 + 24);
          if (!*(_DWORD *)(v29 + 4 * v31))
            *(_DWORD *)(v29 + 4 * v31) = *(_DWORD *)(v14 + 180);
          v32 = v26 + 1;
          while (v32 != (unint64_t *)v28)
          {
            v33 = *v32++;
            v30 = v33;
            if (v33 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v26 = v32 - 1;
              goto LABEL_25;
            }
          }
        }
LABEL_31:
        if (v22 != v23)
        {
          if (v41 >= 0x21 && 4 * (HIDWORD(v41) - v42) < v41)
          {
            free(v22);
            v35 = HIDWORD(v41) - v42;
            v36 = 1 << (33 - __clz(HIDWORD(v41) - v42 - 1));
            HIDWORD(v41) = 0;
            v42 = 0;
            if (v35 <= 0x10)
              v37 = 32;
            else
              v37 = v36;
            LODWORD(v41) = v37;
            v38 = (char *)malloc_type_malloc(8 * v37, 0x4065EBACuLL);
            if (!v38)
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            v40 = v38;
            memset(v38, 255, 8 * v41);
            goto LABEL_12;
          }
          memset(v22, 255, 8 * v41);
        }
        HIDWORD(v41) = 0;
        v42 = 0;
      }
LABEL_12:
      v9 = v46;
      if (!(_DWORD)v46)
        goto LABEL_44;
    }
    v15 = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8 * v13);
    v16 = *(unsigned int *)(v15 + 40);
    if (v11 >= HIDWORD(v46))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v45, (uint64_t)v47, v11 + 1, 16);
      v10 = (char *)v45;
      v11 = v46;
    }
    v17 = &v10[16 * v11];
    *(_QWORD *)v17 = v15;
    *((_QWORD *)v17 + 1) = v16 - 1;
    v9 = v46 + 1;
    LODWORD(v46) = v9;
  }
  while (v9);
LABEL_44:
  if (v45 != v47)
    free(v45);
  if (v40 != v39)
    free(v40);
}

BOOL LiveDebugValues::InstrRefBasedLDV::depthFirstVLocAndEmit(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  _QWORD *v25;
  unsigned int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  int v59;
  BOOL v60;
  unsigned int v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  _BOOL8 v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  char *v79;
  char *v80;
  uint64_t v81;
  int v82;
  _BYTE v83[64];
  _QWORD v84[6];
  int v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  _QWORD v89[8];
  _DWORD *v90;
  uint64_t v91;
  _QWORD v92[10];

  v92[8] = *MEMORY[0x1E0C80C00];
  v19 = operator new();
  v20 = sub_1C6223058(v19, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 352), a10, *(_QWORD *)(a1 + 16), a1 + 56, a12);
  *(_QWORD *)(a1 + 376) = v20;
  *(_BYTE *)(v20 + 33) = *(_BYTE *)(a1 + 384);
  v85 = *(_DWORD *)(*(_QWORD *)(a1 + 352) + 40);
  *(_QWORD *)(a1 + 368) = 0;
  if (!*(_QWORD *)(a1 + 304))
    return 0;
  v77 = a4;
  v90 = v92;
  v91 = 0x1000000000;
  if (a2)
  {
    if (a2 >= 0x11)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v90, (uint64_t)v92, a2, 4);
      v22 = v91;
      v23 = v90;
    }
    else
    {
      v22 = 0;
      v23 = v92;
    }
    bzero((char *)v23 + 4 * v22, 4 * a2);
    LODWORD(v91) = v91 + a2;
  }
  LiveDebugValues::InstrRefBasedLDV::makeDepthFirstEjectionMap((_QWORD *)a1, (uint64_t *)&v90, a3, a5);
  v24 = 0;
  v84[0] = a9;
  v84[1] = a1;
  v84[2] = a8;
  v84[3] = a6;
  v84[4] = &v85;
  v84[5] = a7;
  v79 = v83;
  v80 = v83;
  v81 = 8;
  v82 = 0;
  v25 = v89;
  v87 = v89;
  v89[0] = *(_QWORD *)(a1 + 304);
  v89[1] = 0;
  v26 = 1;
  v88 = 0x400000001;
  do
  {
    while (1)
    {
      v27 = (char *)v87 + 16 * v26;
      v28 = *((_QWORD *)v27 - 2);
      v29 = *((_QWORD *)v27 - 1);
      *((_QWORD *)v27 - 1) = v29 + 1;
      v86 = 0;
      if (sub_1C6144BDC(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v28, &v86))
        v30 = v86;
      else
        v30 = *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16);
      v31 = *(_DWORD *)(v28 + 176);
      if (v24 <= v31 && v30 != *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16))
      {
        v74 = *(_QWORD *)(v30 + 8);
        v75 = v25;
        v86 = 0;
        v36 = sub_1C6224A84(*(_QWORD *)v77, *(_DWORD *)(v77 + 16), v28, &v86);
        v37 = v86;
        if (!v36)
          v37 = *(_QWORD *)v77 + 208 * *(unsigned int *)(v77 + 16);
        v38 = a7;
        v39 = a11;
        v40 = v37 + 8;
        v86 = 0;
        v41 = sub_1C61A4EFC(*(_QWORD *)a5, *(_DWORD *)(a5 + 16), v28, &v86);
        v42 = v86;
        if (!v41)
          v42 = *(_QWORD *)a5 + 72 * *(unsigned int *)(a5 + 16);
        v43 = v40;
        a11 = v39;
        a7 = v38;
        v25 = v75;
        LiveDebugValues::InstrRefBasedLDV::buildVLocValueMap(a1, v74, v43, v42 + 8);
        v31 = *(_DWORD *)(v28 + 176);
      }
      if (v24 <= v31)
        v24 = v31;
      if (v29 < *(unsigned int *)(v28 + 40))
        break;
      LODWORD(v88) = v88 - 1;
      v86 = 0;
      if (sub_1C6144BDC(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), v28, &v86))
        v44 = v86 == *(_QWORD *)a3 + 16 * *(unsigned int *)(a3 + 16);
      else
        v44 = 1;
      if (!v44)
      {
        v76 = a11;
        v45 = *(_QWORD *)(v86 + 8);
        v86 = 0;
        v46 = sub_1C61A4EFC(*(_QWORD *)a5, *(_DWORD *)(a5 + 16), v28, &v86);
        v47 = v86;
        if (!v46)
          v47 = *(_QWORD *)a5 + 72 * *(unsigned int *)(a5 + 16);
        LiveDebugValues::InstrRefBasedLDV::getBlocksForScope((_QWORD *)a1, v45, (unsigned int *)&v79, (_QWORD *)(v47 + 8));
        v49 = v79;
        v48 = v80;
        v50 = (uint64_t *)((char *)&v81 + 4);
        if (v80 != v79)
          v50 = &v81;
        v51 = *(unsigned int *)v50;
        v52 = (uint64_t *)v80;
        if ((_DWORD)v51)
        {
          v53 = 0;
          while (*(_QWORD *)&v80[v53] >= 0xFFFFFFFFFFFFFFFELL)
          {
            v53 += 8;
            if (8 * v51 == v53)
              goto LABEL_53;
          }
          v52 = (uint64_t *)&v80[v53];
        }
        v54 = (uint64_t *)&v80[8 * v51];
        if (v52 != v54)
        {
          v55 = *v52;
LABEL_46:
          if (*(_DWORD *)(v28 + 180) == v90[*(int *)(v55 + 24)])
            sub_1C52FAC1C((uint64_t)v84, v55);
          v56 = (unint64_t *)(v52 + 1);
          while (v56 != (unint64_t *)v54)
          {
            v57 = *v56++;
            v55 = v57;
            if (v57 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v52 = (uint64_t *)(v56 - 1);
              goto LABEL_46;
            }
          }
          v49 = v79;
          v48 = v80;
        }
LABEL_53:
        a11 = v76;
        if (v48 != v49)
        {
          if (v81 >= 0x21 && 4 * (HIDWORD(v81) - v82) < v81)
          {
            free(v48);
            v59 = 1 << (33 - __clz(HIDWORD(v81) - v82 - 1));
            v60 = (HIDWORD(v81) - v82) > 0x10;
            HIDWORD(v81) = 0;
            v82 = 0;
            if (v60)
              v61 = v59;
            else
              v61 = 32;
            LODWORD(v81) = v61;
            v62 = (char *)malloc_type_malloc(8 * v61, 0x4065EBACuLL);
            if (!v62)
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            v80 = v62;
            memset(v62, 255, 8 * v81);
            a11 = v76;
            goto LABEL_32;
          }
          memset(v48, 255, 8 * v81);
        }
        HIDWORD(v81) = 0;
        v82 = 0;
      }
LABEL_32:
      v26 = v88;
      if (!(_DWORD)v88)
        goto LABEL_66;
    }
    v33 = *(_QWORD *)(*(_QWORD *)(v28 + 32) + 8 * v29);
    v34 = v88;
    if (v88 >= (unint64_t)HIDWORD(v88))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v87, (uint64_t)v25, v88 + 1, 16);
      v34 = v88;
    }
    v35 = (char *)v87 + 16 * v34;
    *v35 = v33;
    v35[1] = 0;
    v26 = v88 + 1;
    LODWORD(v88) = v26;
  }
  while (v26);
LABEL_66:
  v63 = *(_QWORD *)(a1 + 400);
  v64 = 408;
  if (v63 == *(_QWORD *)(a1 + 392))
    v64 = 412;
  v65 = *(unsigned int *)(a1 + v64);
  if ((_DWORD)v65)
  {
    v66 = 8 * v65;
    v67 = *(uint64_t **)(a1 + 400);
    while ((unint64_t)*v67 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v67;
      v66 -= 8;
      if (!v66)
        goto LABEL_83;
    }
  }
  else
  {
    v67 = *(uint64_t **)(a1 + 400);
  }
  v69 = (_QWORD *)(v63 + 8 * v65);
  if (v67 != v69)
  {
    v70 = *v67;
LABEL_77:
    if (*(_QWORD *)(*a7 + 8 * *(int *)(v70 + 24)))
      sub_1C52FAC1C((uint64_t)v84, v70);
    v71 = (unint64_t *)(v67 + 1);
    while (v71 != v69)
    {
      v72 = *v71++;
      v70 = v72;
      if (v72 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v67 = (uint64_t *)(v71 - 1);
        goto LABEL_77;
      }
    }
  }
LABEL_83:
  v68 = LiveDebugValues::InstrRefBasedLDV::emitTransfers(a1, a11);
  if (v87 != v25)
    free(v87);
  if (v80 != v79)
    free(v80);
  if (v90 != (_DWORD *)v92)
    free(v90);
  return v68;
}

uint64_t sub_1C52FAC1C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  uint64_t v29;
  int v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  llvm::MachineInstr *v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  __int128 v56;
  __int128 v57;
  unint64_t v58;
  _DWORD *v59;
  llvm::MachineInstr *v60;
  char *v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD **v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD v73[2];
  uint64_t v74;
  int v75;
  _QWORD v76[3];
  unint64_t v77;
  int v78;
  char v79;
  int v80;
  uint64_t v81[2];
  unsigned int v82;
  _QWORD v83[4];

  v83[2] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(a2 + 24);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = **(_QWORD **)a1 + 472 * v3;
  sub_1C62233AC((char *)v5);
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v5 + 24);
  sub_1C62232A4(v5 + 48);
  v6 = *(_QWORD *)(v4 + 352);
  *(_DWORD *)(v6 + 256) = 0;
  v7 = **(_QWORD **)(a1 + 16);
  *(_DWORD *)(v6 + 232) = v3;
  v8 = *(_DWORD *)(v6 + 40);
  if (v8)
  {
    v9 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8 * v9) = *(_QWORD *)(*(_QWORD *)(v7 + 8 * v3) + 8 * v9);
      v10 = v9 + 1;
      v9 = (v9 + 1);
    }
    while (v8 != v10);
    v7 = **(_QWORD **)(a1 + 16);
  }
  v11 = *(_QWORD *)(v4 + 376);
  v12 = **(_QWORD **)(a1 + 24) + 976 * v3;
  v13 = **(unsigned int **)(a1 + 32);
  v69 = (uint64_t *)(v11 + 2376);
  sub_1C622354C(v11 + 2376);
  v68 = (char *)(v11 + 2400);
  sub_1C622360C((unsigned int *)(v11 + 2400));
  *(_DWORD *)(v11 + 2112) = 0;
  if (*(_DWORD *)(v11 + 2116) < v13)
    llvm::SmallVectorBase<unsigned int>::grow_pod(v11 + 2104, v11 + 2120, v13, 8);
  sub_1C6223668(v11 + 2472);
  v14 = *(_DWORD *)(v11 + 2504);
  v66 = v4;
  v67 = (_QWORD **)a1;
  if (v14 || *(_DWORD *)(v11 + 2508))
  {
    v61 = (char *)(v11 + 2496);
    v62 = *(_DWORD *)(v11 + 2512);
    if (v62 > 4 * v14 && v62 >= 0x41)
    {
      sub_1C51BB554(v61);
    }
    else
    {
      if (v62)
      {
        v63 = *(_QWORD *)v61;
        v64 = *(_QWORD *)v61 + 40 * v62;
        do
        {
          *(_QWORD *)v63 = 0;
          *(_BYTE *)(v63 + 8) = 0;
          *(_BYTE *)(v63 + 24) = 0;
          *(_QWORD *)(v63 + 32) = 0;
          v63 += 40;
        }
        while (v63 != v64);
      }
      *(_QWORD *)(v11 + 2504) = 0;
    }
  }
  v15 = 0;
  v81[0] = 0;
  v81[1] = 0;
  v82 = 0;
  v16 = *(unsigned int *)(v12 + 8);
  if ((_DWORD)v16)
  {
    v17 = (_DWORD *)(*(_QWORD *)v12 + 112);
    v18 = 120 * v16;
    do
    {
      if (*v17 == 1)
      {
        v77 = *((_QWORD *)v17 - 9);
        v78 = -1;
        sub_1C6223918((uint64_t)v73, (uint64_t)v81, &v77, &v78);
      }
      v17 += 30;
      v18 -= 120;
    }
    while (v18);
    v15 = *(_DWORD *)(v12 + 8);
  }
  sub_1C6223718(v69, v15);
  v65 = v12;
  sub_1C6223764(v68, *(_DWORD *)(v12 + 8));
  v19 = *(_DWORD *)(*(_QWORD *)(v11 + 16) + 40);
  if (v19)
  {
    v28 = 0;
    v29 = 0;
    v30 = v82;
    v71 = v81[0];
    v70 = v81[0] + 16 * v82;
    do
    {
      v31 = (unint64_t *)(*(_QWORD *)(v7 + 8 * v3) + 8 * v29);
      v32 = *v31;
      if (*v31 != LiveDebugValues::ValueIDNum::EmptyValue)
      {
        v33 = *(unsigned int *)(v11 + 2112);
        if (v33 >= *(unsigned int *)(v11 + 2116))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v11 + 2104, v11 + 2120, v33 + 1, 8);
          v33 = *(unsigned int *)(v11 + 2112);
        }
        *(_QWORD *)(*(_QWORD *)(v11 + 2104) + 8 * v33) = v32;
        ++*(_DWORD *)(v11 + 2112);
        *(_QWORD *)&v73[0] = 0;
        v34 = sub_1C62239AC(v71, v30, v31, v73);
        v35 = *(_QWORD *)&v73[0];
        if (v34)
          v36 = *(_QWORD *)&v73[0] == v70;
        else
          v36 = 1;
        if (!v36)
        {
          v37 = *(unsigned int *)(*(_QWORD *)&v73[0] + 8);
          if ((_DWORD)v37 == -1
            || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 16) + 88) + 4 * v37) >= *(_DWORD *)(*(_QWORD *)(v11 + 16)
                                                                                             + 236)
            || !sub_1C62237B0(v11, v37) && sub_1C62237B0(v11, v29))
          {
            *(_DWORD *)(v35 + 8) = v28;
          }
        }
      }
      v28 = v29 + 1;
      v29 = (v29 + 1);
    }
    while (v19 != v28);
  }
  v20 = *(unsigned int *)(v65 + 8);
  if ((_DWORD)v20)
  {
    v38 = 0;
    v39 = *(_QWORD *)v65;
    v40 = 120 * v20;
    do
    {
      v41 = (__int128 *)(v39 + v38);
      if (!*(_BYTE *)(v11 + 33)
        || (v42 = *((_QWORD *)v41 + 12)) == 0
        || (v44 = v42 + 24, v43 = *(_QWORD **)(v42 + 24), ((*(_QWORD *)(v44 + 8) - (_QWORD)v43) & 0x7FFFFFFF8) == 0)
        || *v43 != 4099)
      {
        if (*((_DWORD *)v41 + 28) == 2)
        {
          v45 = sub_1C622243C((llvm::MachineFunction **)v11, (const llvm::MachineOperand *)(v39 + v38 + 48), (uint64_t *)(v39 + v38), (uint64_t *)(v39 + v38 + 96));
LABEL_52:
          v46 = *(unsigned int *)(v11 + 2432);
          if (v46 >= *(unsigned int *)(v11 + 2436))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v11 + 2424, v11 + 2440, v46 + 1, 8);
            v46 = *(unsigned int *)(v11 + 2432);
          }
          *(_QWORD *)(*(_QWORD *)(v11 + 2424) + 8 * v46) = v45;
          ++*(_DWORD *)(v11 + 2432);
          goto LABEL_48;
        }
        v47 = (unint64_t *)v41 + 5;
        *(_QWORD *)&v73[0] = 0;
        v48 = v81[0];
        v49 = v82;
        v50 = sub_1C62239AC(v81[0], v82, (unint64_t *)v41 + 5, v73);
        v51 = *(_QWORD *)&v73[0];
        if (!v50)
          v51 = v48 + 16 * v49;
        v52 = *(unsigned int *)(v51 + 8);
        if ((_DWORD)v52 != -1)
        {
          v80 = *(_DWORD *)(v51 + 8);
          *(_QWORD *)((char *)v83 + 4) = *(_QWORD *)(v39 + v38 + 96);
          BYTE4(v83[1]) = *(_BYTE *)(v39 + v38 + 104);
          v56 = *v41;
          v57 = v41[1];
          v74 = *((_QWORD *)v41 + 4);
          v73[0] = v56;
          v73[1] = v57;
          v75 = v52;
          v76[0] = v83[0];
          *(_QWORD *)((char *)v76 + 5) = *(_QWORD *)((char *)v83 + 5);
          sub_1C622223C((uint64_t)&v77, (uint64_t)v68, (uint64_t)v73, (__int128 *)&v75);
          if (!v79)
          {
            v58 = v77;
            *(_DWORD *)(v77 + 40) = v52;
            *(_QWORD *)(v58 + 44) = v83[0];
            *(_QWORD *)(v58 + 49) = *(_QWORD *)((char *)v83 + 5);
          }
          v59 = sub_1C6221D58((uint64_t)v69, &v80);
          sub_1C52FC1E8((uint64_t)(v59 + 2), (unint64_t *)(v39 + v38));
          LiveDebugValues::MLocTracker::emitLoc(*(_QWORD *)(v11 + 16), v52 | 0x100000000, v39 + v38, v39 + v38 + 96);
          v45 = v60;
          goto LABEL_52;
        }
        v53 = (uint64_t *)(v39 + v38 + 96);
        v54 = (uint64_t *)(v39 + v38);
        if ((*v47 & 0xFFFFF00000) != 0 && (*v47 & 0xFFFFF) == *(_DWORD *)(a2 + 24))
          sub_1C6220714(v11, (uint64_t)v54, v53, *v47);
        else
          sub_1C52F2D0C(v11, v54, (uint64_t)v53, (_QWORD *)v41 + 5);
      }
LABEL_48:
      v38 += 120;
    }
    while (v40 != v38);
  }
  sub_1C62207C8(v11, *(_QWORD *)(a2 + 56), a2);
  MEMORY[0x1CAA32FB4](v81[0], 8);
  *(_DWORD *)(v66 + 360) = v3;
  *(_DWORD *)(v66 + 364) = 1;
  for (i = *(_QWORD *)(a2 + 56); i != a2 + 48; i = *(_QWORD *)(i + 8))
  {
    LiveDebugValues::InstrRefBasedLDV::process((LiveDebugValues::InstrRefBasedLDV *)v66, (llvm::MachineInstr *)i, *v67[5], *v67[2]);
    sub_1C6223114(*(_QWORD *)(v66 + 376), *(_DWORD *)(v66 + 364), i);
    ++*(_DWORD *)(v66 + 364);
    if ((*(_BYTE *)i & 4) == 0)
    {
      while ((*(_WORD *)(i + 44) & 8) != 0)
        i = *(_QWORD *)(i + 8);
    }
  }
  v22 = *v67[2];
  v23 = *(_QWORD *)(v22 + 8 * v3);
  *(_QWORD *)(v22 + 8 * v3) = 0;
  if (v23)
    MEMORY[0x1CAA32F9C](v23, 0x1000C8000313F17);
  v24 = *v67[5];
  v25 = *(_QWORD *)(v24 + 8 * v3);
  *(_QWORD *)(v24 + 8 * v3) = 0;
  if (v25)
    MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
  *(_DWORD *)(*v67[3] + 976 * v3 + 8) = 0;
  v26 = **v67 + 472 * v3;
  sub_1C62233AC((char *)v26);
  *(_QWORD *)(v26 + 32) = *(_QWORD *)(v26 + 24);
  return sub_1C62232A4(v26 + 48);
}

BOOL LiveDebugValues::InstrRefBasedLDV::emitTransfers(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v41;
  int8x16_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[7];

  v48[6] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 376);
  v3 = *(unsigned int *)(v2 + 48);
  if ((_DWORD)v3)
  {
    v5 = *(_QWORD *)(v2 + 40);
    v6 = v5 + (v3 << 6);
    while (1)
    {
      v46 = v48;
      v47 = 0x300000000;
      v7 = (char *)v48;
      v8 = (unsigned int *)v48;
      v9 = *(unsigned int *)(v5 + 24);
      if (!(_DWORD)v9)
        goto LABEL_18;
      v10 = *(uint64_t **)(v5 + 16);
      v11 = 8 * v9;
      do
      {
        v12 = *v10;
        v13 = **(unsigned __int16 **)(*v10 + 16);
        v31 = v13 == 14;
        v14 = v13 != 14;
        v15 = 96;
        if (v31)
          v15 = 32;
        v16 = *(_QWORD *)(v12 + 56);
        if (*(_DWORD *)(v16 + 8) == 2)
          v17 = *(_QWORD *)(v16 - 8);
        else
          v17 = 0;
        v18 = *(_QWORD *)(v12 + 32);
        v19 = *(_QWORD *)(v18 + v15 + 16);
        v41 = *(_QWORD *)(v18 + (v14 << 6) + 16);
        if (v19)
        {
          llvm::DIExpression::getFragmentInfo(*(uint64_t **)(v19 + 24), *(uint64_t **)(v19 + 32), &v42);
        }
        else
        {
          v42.i8[0] = 0;
          v43 = 0;
        }
        v44 = v17;
        v45 = 0;
        v20 = sub_1C50FD840(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), &v41, &v45);
        v21 = v45;
        if (!v20)
          v21 = *(_QWORD *)a2 + 48 * *(unsigned int *)(a2 + 16);
        sub_1C6221558((uint64_t)&v46, *(_DWORD *)(v21 + 40), v12);
        ++v10;
        v11 -= 8;
      }
      while (v11);
      v8 = (unsigned int *)v46;
      v7 = (char *)v46 + 16 * v47;
      if ((_DWORD)v47)
        v22 = 126 - 2 * __clz(v47);
      else
LABEL_18:
        v22 = 0;
      sub_1C530495C(v8, (unint64_t)v7, v22, 1);
      v23 = *(_QWORD *)(v5 + 8);
      if (v23)
      {
        if ((_DWORD)v47)
        {
          v24 = v23 + 48;
          v25 = (uint64_t *)(v23 + 40);
          v26 = 16 * v47;
          v27 = (uint64_t *)((char *)v46 + 8);
          do
          {
            v28 = *(_QWORD *)v5;
            v29 = *v27;
            if (v24 != *(_QWORD *)v5 && (*(_WORD *)(v28 + 44) & 4) != 0)
              *(_WORD *)(v29 + 44) |= 0xCu;
            sub_1C512CA10(v25, (uint64_t *)v28, v29);
            v27 += 2;
            v26 -= 16;
          }
          while (v26);
        }
      }
      else
      {
        v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 + 16) + 8);
        v31 = (*(_WORD *)(*(_QWORD *)v5 + 44) & 0xC) != 0 && (*(_WORD *)(*(_QWORD *)v5 + 44) & 4) == 0;
        if (v31)
        {
          v38 = *(_QWORD *)v5;
          if ((v30 & 0x200) == 0)
          {
            while ((*(_WORD *)(v38 + 44) & 8) != 0)
            {
              v38 = *(_QWORD *)(v38 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v38 + 16) + 9) & 2) != 0)
                goto LABEL_37;
            }
LABEL_32:
            if ((_DWORD)v47)
            {
              v32 = (char *)v46;
              v33 = (char *)v46 + 16 * v47;
              v34 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)v5 + 24) + 40);
              do
              {
                v35 = v5;
                do
                {
                  v36 = *(_QWORD *)v35;
                  v37 = *(_WORD *)(*(_QWORD *)v35 + 44);
                  v35 = *(_QWORD *)v35 + 8;
                }
                while ((v37 & 8) != 0);
                sub_1C49879A4(v34, v36, *((_QWORD *)v32 + 1));
                v32 += 16;
              }
              while (v32 != v33);
            }
          }
        }
        else if ((v30 & 0x200) == 0)
        {
          goto LABEL_32;
        }
      }
LABEL_37:
      if (v46 != v48)
        free(v46);
      v5 += 64;
      if (v5 == v6)
        return *(_DWORD *)(*(_QWORD *)(a1 + 376) + 48) != 0;
    }
  }
  return 0;
}

BOOL LiveDebugValues::InstrRefBasedLDV::ExtendRanges(LiveDebugValues::InstrRefBasedLDV *this, llvm::MachineFunction *a2, llvm::MachineDominatorTree *a3, llvm::TargetPassConfig *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t ***v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  _QWORD *v22;
  _QWORD ***v23;
  _QWORD *v24;
  int v25;
  BOOL v26;
  unsigned int v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _BOOL8 v31;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  size_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int *v75;
  unsigned int *v76;
  unsigned int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t i;
  unsigned int *v89;
  unsigned int v90;
  unsigned int v91;
  int v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  _DWORD *v97;
  uint64_t *v98;
  const llvm::DILocation *v99;
  uint64_t v100;
  __int128 v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  void *v112;
  void *v113;
  void *v114;
  int v115;
  _DWORD *v116;
  uint64_t v117;
  _DWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  int v129;
  unsigned int v130;
  void *v131;
  uint64_t v132;
  unsigned int v133;
  unsigned int v134;
  uint64_t v135;
  _DWORD *v136;
  char v137[24];
  _QWORD *LexicalScope;
  unsigned int v139;
  _QWORD v140[2];
  int v141;
  uint64_t v142[2];
  unsigned int v143;
  uint64_t v144[2];
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  _QWORD *v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD v157[3];
  char v158;
  char *v159[2];
  uint64_t v160;
  char *v161[2];
  uint64_t v162;
  void *v163;
  uint64_t v164;
  _QWORD v165[291];

  v4 = MEMORY[0x1E0C80A78](this, a2, a3, a4);
  v165[288] = *MEMORY[0x1E0C80C00];
  v10 = *(uint64_t ****)v5;
  if ((*(_BYTE *)(*(_QWORD *)v5 + 23) & 0x20) == 0)
    return 0;
  v11 = v9;
  v12 = v8;
  v13 = v7;
  v14 = v6;
  v15 = v5;
  v16 = v4;
  v17 = ***v10;
  v159[0] = *(char **)v5;
  v18 = *(_DWORD *)(v17 + 2496);
  if (!v18)
  {
    v33 = 0;
LABEL_23:
    v22 = sub_1C541AB24(v17 + 2480, (uint64_t)v159, (uint64_t *)v159, v33);
    v34 = v159[0];
    v22[3] = 0;
    v22[4] = 0;
    *v22 = v34;
    v22[1] = v22 + 3;
    v22[2] = 0x100000000;
    goto LABEL_12;
  }
  v19 = *(_QWORD *)(v17 + 2480);
  v20 = v18 - 1;
  v21 = v20 & ((v10 >> 4) ^ (v10 >> 9));
  v22 = (_QWORD *)(v19 + 40 * v21);
  v23 = (_QWORD ***)*v22;
  if ((uint64_t ***)*v22 != v10)
  {
    v24 = 0;
    v25 = 1;
    while (v23 != (_QWORD ***)-4096)
    {
      if (v24)
        v26 = 0;
      else
        v26 = v23 == (_QWORD ***)-8192;
      if (v26)
        v24 = v22;
      v27 = v21 + v25++;
      v21 = v27 & v20;
      v22 = (_QWORD *)(v19 + 40 * v21);
      v23 = (_QWORD ***)*v22;
      if ((uint64_t ***)*v22 == v10)
        goto LABEL_12;
    }
    if (v24)
      v33 = v24;
    else
      v33 = v22;
    goto LABEL_23;
  }
LABEL_12:
  v28 = *((unsigned int *)v22 + 4);
  if (!(_DWORD)v28)
    return 0;
  v29 = (_QWORD *)(v22[1] + 8);
  v30 = 16 * v28;
  v31 = 0;
  while (*((_DWORD *)v29 - 2))
  {
    v29 += 2;
    v30 -= 16;
    if (!v30)
      return v31;
  }
  if (!*v29)
    return 0;
  *(_QWORD *)(v16 + 336) = v13;
  *(_QWORD *)(v16 + 8) = v14;
  *(_QWORD *)(v16 + 16) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 16) + 176))(*(_QWORD *)(v15 + 16));
  *(_QWORD *)(v16 + 24) = *(_QWORD *)(v15 + 40);
  *(_QWORD *)(v16 + 32) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 16) + 104))(*(_QWORD *)(v15 + 16));
  v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 16) + 112))(*(_QWORD *)(v15 + 16));
  *(_QWORD *)(v16 + 40) = v35;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 256))(v35, v15, v16 + 56);
  *(_QWORD *)(v16 + 48) = *(_QWORD *)(v15 + 56);
  llvm::LexicalScopes::initialize((llvm::LexicalScopes *)(v16 + 128), (uint64_t ****)v15);
  if (*(_BYTE *)(*(_QWORD *)(v16 + 48) + 61))
  {
    v36 = *(_QWORD *)(v15 + 16);
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 112))(v36);
    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 152))(v37);
    *(_BYTE *)(v16 + 2016) = v38;
    if (v38)
    {
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 120))(v36);
      *(_QWORD *)(v16 + 2024) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 832))(v39, v15);
      *(_QWORD *)(v16 + 2032) = v40;
    }
  }
  else
  {
    *(_BYTE *)(v16 + 2016) = 0;
  }
  v134 = v12;
  v41 = operator new();
  v42 = *(_QWORD *)(v16 + 32);
  v43 = *(_QWORD *)(v16 + 16);
  v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v15 + 16) + 120))(*(_QWORD *)(v15 + 16));
  LiveDebugValues::MLocTracker::MLocTracker(v41, v15, v42, v43, v44);
  *(_QWORD *)(v16 + 352) = v41;
  *(_QWORD *)(v16 + 368) = 0;
  *(_QWORD *)(v16 + 376) = 0;
  *(_BYTE *)(v16 + 384) = 0;
  v163 = v165;
  v164 = 0x2000000000;
  v161[0] = (char *)&v162;
  v161[1] = (char *)0x800000000;
  v159[0] = (char *)&v160;
  v159[1] = (char *)0x800000000;
  v45 = *(_QWORD *)(v15 + 328);
  v46 = -1;
  while (v45 != v15 + 320)
  {
    if (*(_DWORD *)(v45 + 24) > v46)
      v46 = *(_DWORD *)(v45 + 24);
    v45 = *(_QWORD *)(v45 + 8);
  }
  v47 = v46 + 1;
  sub_1C6224C1C((unsigned int *)&v163, v47);
  v48 = *(_QWORD *)(v16 + 344);
  v151 = 0uLL;
  LODWORD(v152) = 0;
  v153 = 0;
  v154 = 0;
  *((_QWORD *)&v152 + 1) = 0;
  v155 = 1;
  v49 = 56;
  do
  {
    v50 = (char *)&v151 + v49;
    *(_QWORD *)v50 = 0;
    v50[8] = 0;
    v50[24] = 0;
    *((_QWORD *)v50 + 4) = 0;
    v49 += 48;
  }
  while (v50 + 48 != (char *)v157);
  v157[0] = 0;
  v157[1] = v16 + 1944;
  v157[2] = v48;
  v158 = 0;
  sub_1C6221584(v161, v47, (unint64_t)&v151);
  if ((v155 & 1) == 0)
    MEMORY[0x1CAA32FB4](v156, 8);
  sub_1C6176BF8(&v151);
  sub_1C6225270((uint64_t)v159, v47);
  LiveDebugValues::InstrRefBasedLDV::initialSetup((LiveDebugValues::InstrRefBasedLDV *)v16, (llvm::MachineFunction *)v15);
  LiveDebugValues::InstrRefBasedLDV::produceMLocTransferFunction(v16, v15, &v163, v47);
  v51 = (_QWORD *)operator new[]();
  *v51 = 8;
  v51[1] = v47;
  v52 = (uint64_t)(v51 + 2);
  if (v46 != -1)
    bzero(v51 + 2, 8 * v46 + 8);
  v133 = v11;
  v135 = v13;
  v150 = v52;
  v53 = (_QWORD *)operator new[]();
  *v53 = 8;
  v53[1] = v47;
  v54 = (uint64_t)(v53 + 2);
  if (v46 == -1)
  {
    v149 = v53 + 2;
  }
  else
  {
    bzero(v53 + 2, 8 * v46 + 8);
    v149 = (_QWORD *)v54;
    if ((v46 & 0x80000000) == 0)
    {
      v55 = 0;
      v56 = *(unsigned int *)(*(_QWORD *)(v16 + 352) + 40);
      do
      {
        v57 = operator new[]();
        if ((_DWORD)v56)
        {
          v58 = LiveDebugValues::ValueIDNum::EmptyValue;
          v59 = 8 * v56;
          v60 = (uint64_t *)v57;
          do
          {
            *v60++ = v58;
            v59 -= 8;
          }
          while (v59);
        }
        v61 = *(_QWORD *)(v150 + 8 * v55);
        *(_QWORD *)(v150 + 8 * v55) = v57;
        if (v61)
          MEMORY[0x1CAA32F9C](v61, 0x1000C8000313F17);
        v62 = operator new[]();
        if ((_DWORD)v56)
        {
          v63 = LiveDebugValues::ValueIDNum::EmptyValue;
          v64 = 8 * v56;
          v65 = (uint64_t *)v62;
          do
          {
            *v65++ = v63;
            v64 -= 8;
          }
          while (v64);
        }
        v66 = v149[v55];
        v149[v55] = v62;
        if (v66)
          MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
        ++v55;
      }
      while (v55 != v47);
    }
  }
  LiveDebugValues::InstrRefBasedLDV::buildMLocValueMap(v16, v15, &v149, &v150, (uint64_t *)&v163);
  v67 = *(unsigned int *)(v16 + 656);
  if ((_DWORD)v67)
  {
    v68 = (uint64_t)v149;
    v69 = 40 * v67;
    v70 = *(_QWORD *)(v16 + 648) + 16;
    do
    {
      if (*(_BYTE *)(v70 + 8) && (*(_QWORD *)v70 & 0xFFFFF00000) == 0)
        *(_QWORD *)v70 = *(_QWORD *)(*(_QWORD *)(v68 + 8 * (*(_QWORD *)v70 & 0xFFFFFLL))
                                   + ((*(_QWORD *)v70 >> 37) & 0x7FFFFF8));
      v70 += 40;
      v69 -= 40;
    }
    while (v69);
    v71 = *(unsigned int *)(v16 + 656);
    if (v71 >= 2)
      qsort(*(void **)(v16 + 648), v71, 0x28uLL, (int (__cdecl *)(const void *, const void *))sub_1C6225464);
  }
  v72 = *(_DWORD *)(v16 + 560);
  v73 = *(_QWORD *)(v16 + 552);
  v74 = *(unsigned int *)(v16 + 568);
  v75 = (unsigned int *)(v73 + 16 * v74);
  if (v72)
  {
    if ((_DWORD)v74)
    {
      v126 = 16 * v74;
      v76 = *(unsigned int **)(v16 + 552);
      while (*v76 >= 0xFFFFFFFE)
      {
        v76 += 4;
        v126 -= 16;
        if (!v126)
          goto LABEL_63;
      }
    }
    else
    {
      v76 = *(unsigned int **)(v16 + 552);
    }
  }
  else
  {
LABEL_63:
    v76 = (unsigned int *)(v73 + 16 * v74);
  }
  v136 = (_DWORD *)(v16 + 552);
  v77 = (unsigned int *)(v73 + 16 * v74);
  if (v76 != v77)
  {
    v78 = v15;
    v79 = *(_QWORD *)(v16 + 352);
    do
    {
      v80 = *((_QWORD *)v76 + 1);
      v81 = *(unsigned int *)(v80 + 24);
      *(_DWORD *)(v16 + 360) = v81;
      v82 = &v161[0][472 * v81];
      *(_QWORD *)(v16 + 368) = v82;
      *((_QWORD *)v82 + 55) = v80;
      v83 = (uint64_t)v149;
      *(_DWORD *)(v79 + 232) = v81;
      v84 = *(_DWORD *)(v79 + 40);
      if (v84)
      {
        v85 = 0;
        do
        {
          *(_QWORD *)(*(_QWORD *)(v79 + 32) + 8 * v85) = *(_QWORD *)(*(_QWORD *)(v83 + 8 * v81) + 8 * v85);
          v86 = v85 + 1;
          v85 = (v85 + 1);
        }
        while (v84 != v86);
      }
      *(_DWORD *)(v16 + 364) = 1;
      v87 = v80 + 48;
      for (i = *(_QWORD *)(v80 + 56); i != v87; i = *(_QWORD *)(i + 8))
      {
        LiveDebugValues::InstrRefBasedLDV::process((LiveDebugValues::InstrRefBasedLDV *)v16, (llvm::MachineInstr *)i, v150, (uint64_t)v149);
        ++*(_DWORD *)(v16 + 364);
        if ((*(_BYTE *)i & 4) == 0)
        {
          while ((*(_WORD *)(i + 44) & 8) != 0)
            i = *(_QWORD *)(i + 8);
        }
      }
      v79 = *(_QWORD *)(v16 + 352);
      *(_DWORD *)(v79 + 256) = 0;
      v89 = v76 + 4;
      while (v89 != v75)
      {
        v90 = *v89;
        v89 += 4;
        if (v90 <= 0xFFFFFFFD)
        {
          v76 = v89 - 4;
          goto LABEL_82;
        }
      }
      v76 = v75;
LABEL_82:
      ;
    }
    while (v76 != v77);
    v72 = *(_DWORD *)(v16 + 560);
    v15 = v78;
  }
  v146 = 0;
  v147 = 0;
  v148 = 0;
  v144[0] = 0;
  v144[1] = 0;
  v145 = 0;
  v142[0] = 0;
  v142[1] = 0;
  v143 = 0;
  v140[0] = 0;
  v140[1] = 0;
  v141 = 0;
  v139 = 0;
  if (!v72)
    goto LABEL_85;
  v132 = v15;
  v91 = 0;
  do
  {
    v92 = *(_DWORD *)(*((_QWORD *)sub_1C4A118C0((uint64_t)v136, &v139) + 1) + 24);
    v93 = &v161[0][472 * v92];
    v94 = *((_QWORD *)v93 + 3);
    v95 = *((_QWORD *)v93 + 4);
    if (v94 != v95)
    {
      v96 = &v161[0][472 * v92];
      v97 = v96 + 48;
      v98 = (uint64_t *)(v96 + 440);
      do
      {
        v99 = *(const llvm::DILocation **)(sub_1C6223E14(v97, v94) + 40);
        LexicalScope = llvm::LexicalScopes::findLexicalScope((int8x8_t *)(v16 + 128), v99);
        v100 = *(_QWORD *)(v94 + 32);
        v101 = *(_OWORD *)(v94 + 16);
        v151 = *(_OWORD *)v94;
        v152 = v101;
        v153 = v100;
        LODWORD(v154) = v147;
        sub_1C6221B2C((uint64_t)v137, (uint64_t)&v146, (uint64_t *)&v151, &v154);
        v102 = sub_1C6225548((uint64_t)v144, (uint64_t *)&LexicalScope);
        sub_1C52FC1E8((uint64_t)(v102 + 1), (unint64_t *)v94);
        v103 = sub_1C61A4E7C((uint64_t)v142, (uint64_t *)&LexicalScope);
        sub_1C4774094((llvm::SmallPtrSetImplBase *)(v103 + 1), *v98);
        sub_1C6180A54((uint64_t)v140, (uint64_t *)&LexicalScope)[1] = v99;
        ++v91;
        v94 += 120;
      }
      while (v94 != v95);
    }
    ++v139;
  }
  while (v139 < *(_DWORD *)(v16 + 560));
  v15 = v132;
  if (v47 > v134 && v91 > v133)
    v31 = 0;
  else
LABEL_85:
    v31 = LiveDebugValues::InstrRefBasedLDV::depthFirstVLocAndEmit(v16, v47, (uint64_t)v140, (uint64_t)v144, (uint64_t)v142, (uint64_t)v159, &v150, (uint64_t)&v149, (uint64_t)v161, v15, (uint64_t)&v146, v135);
  v104 = *(_QWORD *)(v16 + 352);
  if (v104)
  {
    v105 = sub_1C6223C58(v104);
    MEMORY[0x1CAA32FC0](v105, 0x10E0C40E41DBC47);
  }
  v106 = *(_QWORD *)(v16 + 376);
  if (v106)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v106 + 2496), 8);
    v107 = *(_DWORD *)(v106 + 2488);
    v108 = *(_QWORD *)(v106 + 2472);
    if (v107)
    {
      v109 = 88 * v107;
      v110 = (_QWORD *)(v108 + 24);
      do
      {
        if (*((_DWORD *)v110 - 6) <= 0xFFFFFFFD)
        {
          v111 = (_QWORD *)*(v110 - 2);
          if (v110 != v111)
            free(v111);
        }
        v110 += 11;
        v109 -= 88;
      }
      while (v109);
      v108 = *(_QWORD *)(v106 + 2472);
    }
    MEMORY[0x1CAA32FB4](v108, 8);
    v112 = *(void **)(v106 + 2424);
    if (v112 != (void *)(v106 + 2440))
      free(v112);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v106 + 2400), 8);
    sub_1C62238B0(v106 + 2376);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(v106 + 2376), 8);
    v113 = *(void **)(v106 + 2104);
    if (v113 != (void *)(v106 + 2120))
      free(v113);
    sub_1C61EEEDC((char **)(v106 + 40));
    MEMORY[0x1CAA32FC0](v106, 0x10E0C4089176281);
  }
  *(_QWORD *)(v16 + 352) = 0;
  *(_QWORD *)(v16 + 368) = 0;
  *(_QWORD *)(v16 + 376) = 0;
  v114 = *(void **)(v16 + 400);
  if (v114 != *(void **)(v16 + 392))
  {
    v127 = *(unsigned int *)(v16 + 408);
    if (v127 >= 0x21 && 4 * (*(_DWORD *)(v16 + 412) - *(_DWORD *)(v16 + 416)) < v127)
    {
      free(v114);
      v128 = *(_DWORD *)(v16 + 412) - *(_DWORD *)(v16 + 416);
      v129 = 1 << (33 - __clz(v128 - 1));
      if (v128 <= 0x10)
        v130 = 32;
      else
        v130 = v129;
      *(_DWORD *)(v16 + 408) = v130;
      *(_QWORD *)(v16 + 412) = 0;
      v131 = malloc_type_malloc(8 * v130, 0x4065EBACuLL);
      if (!v131)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      *(_QWORD *)(v16 + 400) = v131;
      memset(v131, 255, 8 * *(unsigned int *)(v16 + 408));
      goto LABEL_111;
    }
    memset(v114, 255, 8 * v127);
  }
  *(_QWORD *)(v16 + 412) = 0;
LABEL_111:
  sub_1C6209F90(v136);
  sub_1C61446F0((unsigned int *)(v16 + 576));
  v115 = *(_DWORD *)(v16 + 608);
  if (v115 || *(_DWORD *)(v16 + 612))
  {
    v116 = (_DWORD *)(v16 + 600);
    v117 = *(unsigned int *)(v16 + 616);
    if (v117 <= 4 * v115 || v117 < 0x41)
    {
      if ((_DWORD)v117)
      {
        v118 = *(_DWORD **)v116;
        v119 = 8 * v117;
        do
        {
          *v118 = -1;
          v118 += 2;
          v119 -= 8;
        }
        while (v119);
      }
      *(_QWORD *)(v16 + 608) = 0;
    }
    else
    {
      sub_1C476BF54(v116);
    }
  }
  sub_1C4ABB360(*(_QWORD **)(v16 + 632));
  *(_QWORD *)(v16 + 624) = v16 + 632;
  *(_QWORD *)(v16 + 640) = 0;
  *(_QWORD *)(v16 + 632) = 0;
  *(_DWORD *)(v16 + 656) = 0;
  sub_1C6221618(v16 + 1944);
  sub_1C6221700(v16 + 1968);
  sub_1C62217C0((unsigned int *)(v16 + 1992));
  MEMORY[0x1CAA32FB4](v140[0], 8);
  v120 = v142[0];
  sub_1C62254EC(v142[0], v143);
  MEMORY[0x1CAA32FB4](v120, 8);
  v121 = v144[0];
  sub_1C6225480(v144[0], v145);
  MEMORY[0x1CAA32FB4](v121, 8);
  MEMORY[0x1CAA32FB4](v146, 8);
  v122 = (uint64_t)v149;
  v149 = 0;
  if (v122)
    sub_1C5305A68(v122);
  v123 = v150;
  v150 = 0;
  if (v123)
    sub_1C5305A68(v123);
  sub_1C6224BA4(v159);
  sub_1C6224B20(v161);
  v124 = (char *)v163;
  if ((_DWORD)v164)
  {
    v125 = 72 * v164;
    do
    {
      if ((v124[v125 - 72] & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)&v124[v125 - 64], 8);
      v125 -= 72;
    }
    while (v125);
    v124 = (char *)v163;
  }
  if (v124 != (char *)v165)
    free(v124);
  return v31;
}

unint64_t sub_1C52FC1E8(uint64_t a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  unsigned __int8 v14;
  unint64_t *v15;

  if (*(_QWORD *)(a1 + 192))
  {
    sub_1C6223F44(a1 + 176, a2, (uint64_t)a2);
    return ((unint64_t)v14 << 32) | 1;
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v5)
    {
      v6 = 40 * v5;
      while (!sub_1C50FDDD0(v4, (uint64_t)a2))
      {
        v4 += 40;
        v6 -= 40;
        if (!v6)
        {
          v4 = *(_QWORD *)a1;
          LODWORD(v5) = *(_DWORD *)(a1 + 8);
          goto LABEL_7;
        }
      }
      v7 = *(_DWORD *)(a1 + 8);
      v8 = *(_QWORD *)a1;
      LODWORD(v5) = v7;
    }
    else
    {
LABEL_7:
      v7 = v5;
      v8 = v4;
      v4 += 40 * v5;
    }
    if (v4 == v8 + 40 * v7)
    {
      if (v5 > 3)
      {
        do
        {
          v15 = (unint64_t *)(*(_QWORD *)a1 + 40 * v5 - 40);
          sub_1C6223F44(a1 + 176, v15, (uint64_t)v15);
          LODWORD(v5) = *(_DWORD *)(a1 + 8) - 1;
          *(_DWORD *)(a1 + 8) = v5;
        }
        while ((_DWORD)v5);
        sub_1C6223F44(a1 + 176, a2, (uint64_t)a2);
      }
      else
      {
        v10 = sub_1C4A20B14(a1, (unint64_t)a2, 1);
        v11 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8);
        v12 = *(_QWORD *)(v10 + 32);
        v13 = *(_OWORD *)(v10 + 16);
        *(_OWORD *)v11 = *(_OWORD *)v10;
        *(_OWORD *)(v11 + 16) = v13;
        *(_QWORD *)(v11 + 32) = v12;
        ++*(_DWORD *)(a1 + 8);
      }
      return 0x100000001;
    }
    else
    {
      return 1;
    }
  }
}

unint64_t LiveDebugValues::InstrRefBasedLDV::resolveDbgPHIsImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v6;
  unsigned int *v10;
  unsigned int *v11;
  unint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v27;
  unsigned int *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  void *v34;
  _QWORD *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned int v46;
  BOOL v47;
  unsigned int v48;
  uint64_t **v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  unint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _QWORD *v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  unsigned int i;
  int v81;
  unsigned int *v82;
  uint64_t v83;
  uint64_t **v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  unint64_t v105;
  int v106;
  uint64_t **v107;
  uint64_t **v108;
  uint64_t **v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t j;
  _BOOL4 v118;
  char v119;
  _QWORD *v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unsigned int v147;
  _QWORD *v148;
  unsigned int v149;
  char *v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t *v156;
  int v157;
  BOOL v158;
  unsigned int v159;
  int v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  char *v167;
  char *v168;
  char *v169;
  char *v170;
  unint64_t v171;
  char *v172;
  const void *v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  int v180;
  char *v181;
  int v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t *v185;
  int v186;
  BOOL v187;
  unsigned int v188;
  int v189;
  unsigned int v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  unsigned int v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t *v197;
  _BYTE *v198;
  unint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t ****v204;
  uint64_t ****v205;
  uint64_t **v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t **v209;
  uint64_t **v210;
  int v211;
  int v212;
  uint64_t *v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  int v220;
  unsigned int v221;
  int v222;
  int v223;
  _QWORD *v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  _QWORD *v233;
  _QWORD *v234;
  uint64_t v235;
  _QWORD *v236;
  int v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  int v241;
  int v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  char *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  unsigned int v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  void **v266;
  unint64_t v267;
  int v268;
  int v269;
  _QWORD *v270;
  void **v271;
  char *v272;
  uint64_t v273;
  char *v274;
  uint64_t v276;
  uint64_t **v277;
  uint64_t *v278;
  int v279;
  char v280;
  uint64_t **v281;
  unsigned int *v282;
  _QWORD v283[2];
  int v284;
  _QWORD *v285;
  uint64_t v286;
  unsigned int v287;
  _QWORD v288[2];
  int v289;
  _QWORD *v290;
  uint64_t v291;
  unsigned int v292;
  int v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  _QWORD *v299;
  void **v300;
  _QWORD v301[2];
  int v302;
  _QWORD v303[4];
  _QWORD v304[6];
  _QWORD v305[2];
  void *v306;
  uint64_t v307;
  _BYTE v308[64];
  void *v309;
  uint64_t v310;
  _BYTE v311[800];
  void *v312;
  uint64_t v313;
  _BYTE v314[80];
  void *v315;
  uint64_t v316;
  _QWORD v317[64];
  _QWORD *v318;
  uint64_t v319;
  _QWORD v320[12];

  v320[10] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a1 + 656);
  if (!(_DWORD)v6)
    goto LABEL_8;
  v10 = *(unsigned int **)(a1 + 648);
  v11 = &v10[10 * v6];
  while (1)
  {
    v12 = v6 >> 1;
    v13 = &v10[10 * (v6 >> 1)];
    v14 = *v13;
    if (v14 >= a6)
      break;
    v10 = v13 + 10;
    v12 = v6 + ~v12;
LABEL_7:
    v6 = v12;
    if (!v12)
      goto LABEL_8;
  }
  if (v14 > a6)
  {
    v11 = &v10[10 * (v6 >> 1)];
    goto LABEL_7;
  }
  if (v6 >= 2)
  {
    do
    {
      v18 = v12 >> 1;
      v19 = &v10[10 * (v12 >> 1)];
      v21 = *v19;
      v20 = v19 + 10;
      v12 += ~(v12 >> 1);
      if (v21 < a6)
        v10 = v20;
      else
        v12 = v18;
    }
    while (v12);
  }
  if (v11 != v13 + 10)
  {
    v22 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v11 - (char *)(v13 + 10)) >> 3);
    v11 = v13 + 10;
    do
    {
      v23 = v22 >> 1;
      v24 = &v11[10 * (v22 >> 1)];
      v26 = *v24;
      v25 = v24 + 10;
      v22 += ~(v22 >> 1);
      if (v26 > a6)
        v22 = v23;
      else
        v11 = v25;
    }
    while (v22);
  }
  if (v10 == v11)
  {
LABEL_8:
    LOBYTE(v15) = 0;
    v16 = 0;
    return v16 | v15;
  }
  v27 = v10;
  do
  {
    if (!*((_BYTE *)v27 + 24))
      goto LABEL_8;
    v27 += 10;
  }
  while (v27 != v11);
  if ((char *)v11 - (char *)v10 == 40)
  {
    v15 = *((_QWORD *)v10 + 2);
    v16 = v15 & 0xFFFFFFFFFFFFFF00;
    return v16 | v15;
  }
  v282 = v11;
  v276 = v10[8];
  v285 = 0;
  v286 = 0;
  v287 = 0;
  v288[0] = 0;
  v288[1] = 0;
  v289 = 0;
  v290 = 0;
  v291 = 0;
  v292 = 0;
  v293 = v276;
  v294 = a4;
  v283[0] = 0;
  v283[1] = 0;
  v284 = 0;
  v306 = v308;
  v28 = v10;
  v307 = 0x800000000;
  while (2)
  {
    v29 = (void *)sub_1C52FDC3C((uint64_t)&v285, *((_QWORD *)v28 + 1));
    v30 = v29;
    v31 = *((_QWORD *)v28 + 2);
    v309 = v29;
    v310 = v31;
    if (!v284)
    {
      v39 = 0;
      goto LABEL_40;
    }
    v32 = (v284 - 1) & ((v29 >> 4) ^ (v29 >> 9));
    v33 = (_QWORD *)(v283[0] + 16 * v32);
    v34 = (void *)*v33;
    if (v29 != (void *)*v33)
    {
      v35 = 0;
      v36 = 1;
      while (v34 != (void *)-4096)
      {
        if (v35)
          v37 = 0;
        else
          v37 = v34 == (void *)-8192;
        if (v37)
          v35 = v33;
        v38 = v32 + v36++;
        v32 = v38 & (v284 - 1);
        v33 = (_QWORD *)(v283[0] + 16 * v32);
        v34 = (void *)*v33;
        if (v29 == (void *)*v33)
          goto LABEL_41;
      }
      if (v35)
        v39 = v35;
      else
        v39 = v33;
LABEL_40:
      v40 = sub_1C5305ED0((uint64_t)v283, (uint64_t *)&v309, v39);
      *v40 = v30;
      v40[1] = v31;
    }
LABEL_41:
    v28 += 10;
    if (v28 != v282)
      continue;
    break;
  }
  v41 = sub_1C52FDC3C((uint64_t)&v285, *(_QWORD *)(a5 + 24));
  if (v284)
  {
    v42 = ((v41 >> 4) ^ (v41 >> 9)) & (v284 - 1);
    v43 = *(_QWORD *)(v283[0] + 16 * v42);
    if (v41 == v43)
    {
LABEL_48:
      if ((_DWORD)v42 != v284)
      {
        v15 = *(_QWORD *)(v283[0] + 16 * v42 + 8);
        v16 = v15 & 0xFFFFFFFFFFFFFF00;
        goto LABEL_321;
      }
    }
    else
    {
      v268 = 1;
      while (v43 != -4096)
      {
        v269 = v42 + v268++;
        v42 = v269 & (v284 - 1);
        v43 = *(_QWORD *)(v283[0] + 16 * v42);
        if (v41 == v43)
          goto LABEL_48;
      }
    }
  }
  v273 = a4;
  v298 = &v285;
  v299 = v283;
  v301[0] = 0;
  v301[1] = 0;
  v300 = &v306;
  v302 = 0;
  v303[0] = 0;
  v303[1] = 0;
  v303[2] = v304;
  v303[3] = 0x400000000;
  v304[4] = v305;
  v304[5] = 0;
  v305[0] = 0;
  v305[1] = 1;
  v44 = sub_1C52FDC3C((uint64_t)&v285, *(_QWORD *)(a5 + 24));
  v295 = v44;
  v309 = v311;
  v310 = 0x6400000000;
  v297 = v44;
  v318 = v320;
  v319 = 0xA00000000;
  v315 = v317;
  v316 = 0x4000000000;
  v45 = sub_1C484358C((uint64_t)v303, 64, 3);
  *(_QWORD *)(v45 + 32) = 0;
  *(_DWORD *)(v45 + 40) = 0;
  *(_QWORD *)(v45 + 8) = 0;
  *(_QWORD *)(v45 + 16) = 0;
  v271 = (void **)v44;
  *(_QWORD *)v45 = v44;
  *(_DWORD *)(v45 + 24) = 0;
  *(_QWORD *)(v45 + 48) = 0;
  *(_QWORD *)(v45 + 56) = 0;
  sub_1C53060F4((uint64_t)v301, &v297)[1] = v45;
  v46 = v316;
  if (v316 >= HIDWORD(v316))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v315, (uint64_t)v317, v316 + 1, 8);
    v46 = v316;
  }
  *((_QWORD *)v315 + v46) = v45;
  v312 = v314;
  v313 = 0xA00000000;
  v47 = __CFADD__((_DWORD)v316, 1);
  v48 = v316 + 1;
  LODWORD(v316) = v316 + 1;
  if (!v47)
  {
    while (2)
    {
      v49 = (uint64_t **)*((_QWORD *)v315 + v48 - 1);
      LODWORD(v316) = v48 - 1;
      LODWORD(v313) = 0;
      v50 = *v49;
      v51 = **v49;
      v52 = *(uint64_t **)(v51 + 64);
      v53 = *(uint64_t **)(v51 + 72);
      if (v52 == v53)
      {
        *((_DWORD *)v49 + 10) = 0;
      }
      else
      {
        do
        {
          v54 = sub_1C52FDC3C(v50[1], *v52);
          v55 = v313;
          if (v313 >= (unint64_t)HIDWORD(v313))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v312, (uint64_t)v314, v313 + 1, 8);
            v55 = v313;
          }
          *((_QWORD *)v312 + v55) = v54;
          v56 = v313 + 1;
          LODWORD(v313) = v313 + 1;
          ++v52;
        }
        while (v52 != v53);
        *((_DWORD *)v49 + 10) = v56;
        if (v56)
        {
          v57 = sub_1C484358C((uint64_t)v303, 8 * v56, 3);
          v58 = *((_DWORD *)v49 + 10);
          v49[6] = (uint64_t *)v57;
          if (v58)
          {
            v59 = 0;
            while (1)
            {
              v60 = v59;
              v61 = *((_QWORD *)v312 + v59);
              v296 = v61;
              v62 = sub_1C53060F4((uint64_t)v301, &v296);
              v63 = v62[1];
              if (!v63)
                break;
              v49[6][v60] = v63;
LABEL_79:
              v59 = v60 + 1;
              if ((_DWORD)v60 + 1 == *((_DWORD *)v49 + 10))
                goto LABEL_83;
            }
            v64 = v62;
            v65 = *((_DWORD *)v299 + 4);
            if (v65)
            {
              v66 = *v299;
              v67 = v65 - 1;
              v68 = (v65 - 1) & ((v61 >> 4) ^ (v61 >> 9));
              v69 = *(_QWORD *)(*v299 + 16 * v68);
              if (v61 == v69)
              {
LABEL_63:
                v70 = *(_QWORD *)(v66 + 16 * v68 + 8);
                goto LABEL_69;
              }
              v71 = 1;
              while (v69 != -4096)
              {
                v72 = v68 + v71++;
                v68 = v72 & v67;
                v69 = *(_QWORD *)(v66 + 16 * v68);
                if (v61 == v69)
                  goto LABEL_63;
              }
            }
            v70 = 0;
LABEL_69:
            v73 = sub_1C484358C((uint64_t)v303, 64, 3);
            v74 = v73;
            *(_QWORD *)v73 = v61;
            *(_QWORD *)(v73 + 8) = v70;
            if (v70)
              v75 = v73;
            else
              v75 = 0;
            *(_QWORD *)(v73 + 16) = v75;
            *(_DWORD *)(v73 + 24) = 0;
            *(_QWORD *)(v73 + 32) = 0;
            *(_DWORD *)(v73 + 40) = 0;
            *(_QWORD *)(v73 + 48) = 0;
            *(_QWORD *)(v73 + 56) = 0;
            v64[1] = v73;
            v49[6][v60] = v73;
            if (v70)
            {
              v76 = v319;
              if (v319 >= (unint64_t)HIDWORD(v319))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v318, (uint64_t)v320, v319 + 1, 8);
                v76 = v319;
              }
              v318[v76] = v74;
              LODWORD(v319) = v319 + 1;
            }
            else
            {
              v77 = v316;
              if (v316 >= (unint64_t)HIDWORD(v316))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v315, (uint64_t)v317, v316 + 1, 8);
                v77 = v316;
              }
              *((_QWORD *)v315 + v77) = v74;
              LODWORD(v316) = v316 + 1;
            }
            goto LABEL_79;
          }
LABEL_83:
          v48 = v316;
          if (!(_DWORD)v316)
            goto LABEL_84;
          continue;
        }
      }
      break;
    }
    v49[6] = 0;
    goto LABEL_83;
  }
LABEL_84:
  v78 = sub_1C484358C((uint64_t)v303, 64, 3);
  *(_QWORD *)(v78 + 32) = 0;
  *(_DWORD *)(v78 + 40) = 0;
  *(_QWORD *)(v78 + 8) = 0;
  *(_QWORD *)(v78 + 16) = 0;
  *(_QWORD *)v78 = 0;
  *(_DWORD *)(v78 + 24) = 0;
  *(_QWORD *)(v78 + 48) = 0;
  *(_QWORD *)(v78 + 56) = 0;
  v79 = v319;
  for (i = v316; (_DWORD)v319; v79 = v319)
  {
    v83 = v318[v79 - 1];
    LODWORD(v319) = v79 - 1;
    *(_QWORD *)(v83 + 32) = v78;
    *(_DWORD *)(v83 + 24) = -1;
    if (i >= HIDWORD(v316))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v315, (uint64_t)v317, i + 1, 8);
      i = v316;
    }
    *((_QWORD *)v315 + i) = v83;
    i = v316 + 1;
    LODWORD(v316) = v316 + 1;
  }
  v81 = 1;
  if (i)
  {
    v82 = v282;
    do
    {
      v279 = v81;
      while (1)
      {
        v84 = (uint64_t **)*((_QWORD *)v315 + i - 1);
        if (*((_DWORD *)v84 + 6) == -2)
          break;
        *((_DWORD *)v84 + 6) = -2;
        v85 = *v84;
        v86 = **v84;
        v87 = *(uint64_t **)(v86 + 88);
        v88 = *(uint64_t **)(v86 + 96);
        if (v88 != v87)
        {
          v89 = v85[1];
          do
          {
            v296 = sub_1C52FDC3C(v89, *v87);
            v90 = *sub_1C5306090((uint64_t)v301, &v296);
            if (v90 && !*(_DWORD *)(v90 + 24))
            {
              *(_DWORD *)(v90 + 24) = -1;
              v91 = v316;
              if (v316 >= (unint64_t)HIDWORD(v316))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v315, (uint64_t)v317, v316 + 1, 8);
                v91 = v316;
              }
              *((_QWORD *)v315 + v91) = v90;
              LODWORD(v316) = v316 + 1;
            }
            ++v87;
          }
          while (v87 != v88);
          i = v316;
          v82 = v282;
        }
        if (!i)
        {
          v81 = v279;
          goto LABEL_110;
        }
      }
      v92 = v279;
      *((_DWORD *)v84 + 6) = v279;
      if (!v84[1])
      {
        v93 = v310;
        if (v310 >= (unint64_t)HIDWORD(v310))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v309, (uint64_t)v311, v310 + 1, 8);
          v93 = v310;
        }
        *((_QWORD *)v309 + v93) = v84;
        LODWORD(v310) = v310 + 1;
        i = v316;
        v92 = v279;
      }
      v81 = v92 + 1;
      LODWORD(v316) = --i;
    }
    while (i);
  }
  else
  {
    v82 = v282;
  }
LABEL_110:
  *(_DWORD *)(v78 + 24) = v81;
  if (v312 != v314)
    free(v312);
  if (v315 != v317)
    free(v315);
  if (v318 != v320)
    free(v318);
  v94 = v310;
  if (!(_DWORD)v310)
  {
    v15 = *((_DWORD *)*v271 + 6) & 0xFFFFF | ((unint64_t)*((unsigned int *)v298 + 18) << 40);
    v315 = *v271;
    sub_1C617C470((uint64_t)(v298 + 3), (uint64_t *)&v315)[1] = v15;
    *sub_1C5306090((uint64_t)v299, &v295) = v15;
    goto LABEL_278;
  }
LABEL_118:
  v95 = 0;
  v96 = (char *)v309;
  v97 = (char *)v309 + 8 * v94;
LABEL_119:
  v280 = v95;
  do
  {
    v99 = *((_QWORD *)v97 - 1);
    v97 -= 8;
    v98 = v99;
    if (!*(_DWORD *)(v99 + 40))
      continue;
    v100 = 0;
    v101 = 0;
    do
    {
      v102 = *(_QWORD *)(*(_QWORD *)(v98 + 48) + 8 * v100);
      if (*(_DWORD *)(v102 + 24))
      {
        if (!v101)
          goto LABEL_135;
      }
      else
      {
        v105 = *(_DWORD *)(**(_QWORD **)v102 + 24) & 0xFFFFF | ((unint64_t)*((unsigned int *)v298 + 18) << 40);
        v315 = **(void ***)v102;
        sub_1C617C470((uint64_t)(v298 + 3), (uint64_t *)&v315)[1] = v105;
        *(_QWORD *)(v102 + 8) = v105;
        *sub_1C5306090((uint64_t)v299, (uint64_t *)v102) = v105;
        *(_QWORD *)(v102 + 16) = v102;
        *(_DWORD *)(v102 + 24) = (*(_DWORD *)(v78 + 24))++;
        if (!v101)
        {
LABEL_135:
          v101 = v102;
          goto LABEL_136;
        }
      }
      if (v101 != v102)
      {
        v103 = *(_DWORD *)(v102 + 24);
        do
        {
          while (1)
          {
            v104 = *(_DWORD *)(v101 + 24);
            if (v104 >= v103)
              break;
            v101 = *(_QWORD *)(v101 + 32);
            if (!v101)
              goto LABEL_135;
          }
          while (1)
          {
            v103 = *(_DWORD *)(v102 + 24);
            if (v103 >= v104)
              break;
            v102 = *(_QWORD *)(v102 + 32);
            if (!v102)
              goto LABEL_136;
          }
        }
        while (v101 != v102);
      }
LABEL_136:
      ++v100;
    }
    while (v100 != *(_DWORD *)(v98 + 40));
    if (v101 && v101 != *(_QWORD *)(v98 + 32))
    {
      *(_QWORD *)(v98 + 32) = v101;
      v95 = 1;
      if (v97 != v96)
        goto LABEL_119;
      v94 = v310;
LABEL_144:
      if (!v94)
        goto LABEL_277;
      goto LABEL_118;
    }
  }
  while (v97 != v96);
  v94 = v310;
  if ((v280 & 1) != 0)
    goto LABEL_144;
  if (!(_DWORD)v310)
    goto LABEL_277;
  v106 = 0;
  v107 = (uint64_t **)v309;
  v108 = (uint64_t **)((char *)v309 + 8 * v310);
  v109 = v108;
  do
  {
    while (1)
    {
      v111 = (uint64_t)*--v109;
      v110 = v111;
      v112 = *(_QWORD *)(v111 + 16);
      if (v112 == v111)
        break;
      v113 = *(_QWORD *)(v110 + 32);
      v114 = *(_QWORD *)(v113 + 16);
      v115 = *(unsigned int *)(v110 + 40);
      if ((_DWORD)v115)
      {
        v116 = 0;
        while (2)
        {
          for (j = *(_QWORD *)(*(_QWORD *)(v110 + 48) + 8 * v116); j != v113; j = *(_QWORD *)(j + 32))
          {
            if (*(_QWORD *)(j + 16) == j)
            {
              v114 = v110;
              goto LABEL_159;
            }
          }
          if (++v116 != v115)
            continue;
          break;
        }
      }
LABEL_159:
      if (v114 == v112)
        break;
      *(_QWORD *)(v110 + 16) = v114;
      v106 = v109 != v107;
      if (v109 == v107)
        v109 = v108;
    }
    v118 = v109 != v107;
    v119 = v118 | v106;
    v106 &= v118;
    if (v109 == v107)
      v109 = v108;
  }
  while ((v119 & 1) != 0);
  v120 = v317;
  v277 = v108;
  while (2)
  {
    if ((uint64_t *)(*v107)[2] != *v107)
      goto LABEL_224;
    v278 = *v107;
    v281 = v107;
    v121 = **v107;
    v122 = *(_DWORD *)(v121 + 24);
    if (!v122)
      goto LABEL_202;
    v123 = *(_QWORD *)(v121 + 16);
    v124 = v123 + 96 * v122;
    while (2)
    {
      v315 = v120;
      v317[0] = v123;
      v316 = 0x1400000001;
      v318 = *(_QWORD **)(v123 + 80);
      *(_QWORD *)(*sub_1C5306090((uint64_t)v301, (uint64_t *)&v318) + 56) = v123;
      v125 = v316;
      if (!(_DWORD)v316)
      {
LABEL_183:
        LODWORD(v130) = 1;
        goto LABEL_186;
      }
      while (1)
      {
        v126 = *((_QWORD *)v315 + --v125);
        LODWORD(v316) = v125;
        v127 = *(_DWORD *)(v126 + 8);
        if (v127)
          break;
LABEL_182:
        if (!v125)
          goto LABEL_183;
      }
      v128 = (uint64_t)v120;
      v129 = 0;
      while (2)
      {
        v130 = *(_QWORD *)(*(_QWORD *)v126 + 16 * v129 + 8);
        v318 = *(_QWORD **)(*(_QWORD *)v126 + 16 * v129);
        v131 = *(_QWORD **)(*sub_1C5306090((uint64_t)v301, (uint64_t *)&v318) + 16);
        v132 = v131[1];
        if (v132)
        {
LABEL_176:
          if (v130 != v132)
            break;
          goto LABEL_177;
        }
        v133 = sub_1C5306158(v130, *v298, *((_DWORD *)v298 + 4));
        v130 = v133;
        if (!v133)
          goto LABEL_185;
        if (*(_QWORD *)(v133 + 80) == *v131)
        {
          v132 = v131[7];
          if (v132)
            goto LABEL_176;
          v131[7] = v133;
          v135 = v316;
          if (v316 >= (unint64_t)HIDWORD(v316))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v315, v128, v316 + 1, 8);
            v135 = v316;
          }
          *((_QWORD *)v315 + v135) = v130;
          LODWORD(v316) = v316 + 1;
LABEL_177:
          v134 = v129 + 1;
          v129 = (v129 + 1);
          if (v127 == v134)
          {
            v125 = v316;
            v120 = (_QWORD *)v128;
            goto LABEL_182;
          }
          continue;
        }
        break;
      }
      LODWORD(v130) = 0;
LABEL_185:
      v120 = (_QWORD *)v128;
LABEL_186:
      if (v315 != v120)
        free(v315);
      v136 = (char *)v309;
      if ((_DWORD)v130)
      {
        if ((_DWORD)v310)
        {
          v137 = 8 * v310;
          do
          {
            v138 = *(_QWORD *)(*(_QWORD *)v136 + 56);
            if (v138)
            {
              v139 = *(_QWORD *)(v138 + 88);
              v315 = *(void **)(v138 + 80);
              *sub_1C5306090((uint64_t)v299, (uint64_t *)&v315) = v139;
              *(_QWORD *)(sub_1C53060F4((uint64_t)v301, (uint64_t *)&v315)[1] + 8) = v139;
            }
            v136 += 8;
            v137 -= 8;
          }
          while (v137);
          goto LABEL_198;
        }
        break;
      }
      if ((_DWORD)v310)
      {
        v140 = 8 * v310;
        do
        {
          v141 = *(_QWORD *)v136;
          v136 += 8;
          *(_QWORD *)(v141 + 56) = 0;
          v140 -= 8;
        }
        while (v140);
      }
LABEL_198:
      v123 += 96;
      if (v123 == v124)
        v142 = 1;
      else
        v142 = v130;
      if (v142 != 1)
        continue;
      break;
    }
LABEL_202:
    v143 = v278;
    v107 = v281;
    v108 = v277;
    if (v278[1])
      goto LABEL_224;
    v144 = *v278;
    v145 = (uint64_t)v298;
    v146 = *(_QWORD *)(*(_QWORD *)(v298[10] + 8 * *(int *)(*(_QWORD *)*v278 + 24))
                     + 8 * *((unsigned int *)v298 + 18));
    v147 = *(_DWORD *)(*v278 + 24);
    if (v147 < *(_DWORD *)(*v278 + 28))
    {
      v148 = (_QWORD *)(*(_QWORD *)(v144 + 16) + 96 * v147);
      *v148 = v148 + 2;
      v148[1] = 0x400000000;
      v148[10] = v144;
      v148[11] = v146;
      v149 = *(_DWORD *)(v144 + 24) + 1;
      *(_DWORD *)(v144 + 24) = v149;
      v150 = *(char **)(v144 + 16);
      goto LABEL_205;
    }
    v315 = 0;
    v270 = v120;
    v272 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(v144 + 16, 0, 96, (unint64_t *)&v315);
    v162 = &v272[96 * *(unsigned int *)(v144 + 24)];
    *(_QWORD *)v162 = v162 + 16;
    *((_QWORD *)v162 + 1) = 0x400000000;
    *((_QWORD *)v162 + 10) = v144;
    *((_QWORD *)v162 + 11) = v146;
    v274 = *(char **)(v144 + 16);
    v163 = *(unsigned int *)(v144 + 24);
    if (!(_DWORD)v163)
      goto LABEL_246;
    v164 = 0;
    v165 = 96 * v163;
    v166 = v272;
    v167 = *(char **)(v144 + 16);
    while (2)
    {
      v168 = &v166[v164];
      v169 = &v167[v164];
      v170 = &v166[v164 + 16];
      *(_QWORD *)v168 = v170;
      *((_QWORD *)v168 + 1) = 0x400000000;
      if (v167 != v166)
      {
        v171 = *((unsigned int *)v169 + 2);
        if (*((_DWORD *)v169 + 2))
        {
          v172 = &v167[v164];
          v174 = (uint64_t)&v167[v164 + 16];
          v173 = *(const void **)&v167[v164];
          if ((const void *)v174 != v173)
          {
            *(_QWORD *)v168 = v173;
            *((_DWORD *)v168 + 2) = v171;
            *((_DWORD *)v168 + 3) = *((_DWORD *)v172 + 3);
            *(_QWORD *)v172 = v174;
            *((_DWORD *)v172 + 3) = 0;
            goto LABEL_238;
          }
          v175 = *((_DWORD *)v169 + 2);
          if (v171 < 5)
          {
            v176 = *((unsigned int *)v169 + 2);
LABEL_236:
            memcpy(v170, v173, 16 * v176);
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v166[v164], (uint64_t)&v166[v164 + 16], *((unsigned int *)v169 + 2), 16);
            v176 = *((unsigned int *)v169 + 2);
            if ((_DWORD)v176)
            {
              v173 = *(const void **)v169;
              v170 = *(char **)v168;
              goto LABEL_236;
            }
          }
          *((_DWORD *)v168 + 2) = v175;
          v166 = v272;
          v167 = v274;
LABEL_238:
          *((_DWORD *)v169 + 2) = 0;
        }
      }
      *((_OWORD *)v168 + 5) = *((_OWORD *)v169 + 5);
      v164 += 96;
      if (v165 != v164)
        continue;
      break;
    }
    v274 = *(char **)(v144 + 16);
    v177 = *(unsigned int *)(v144 + 24);
    if ((_DWORD)v177)
    {
      v178 = 96 * v177;
      do
      {
        v179 = *(char **)&v274[v178 - 96];
        if (&v274[v178 - 80] != v179)
          free(v179);
        v178 -= 96;
      }
      while (v178);
      v274 = *(char **)(v144 + 16);
    }
LABEL_246:
    v180 = (int)v315;
    if (v274 != (char *)(v144 + 32))
      free(v274);
    v150 = v272;
    *(_QWORD *)(v144 + 16) = v272;
    v149 = *(_DWORD *)(v144 + 24) + 1;
    *(_DWORD *)(v144 + 24) = v149;
    *(_DWORD *)(v144 + 28) = v180;
    v143 = v278;
    v107 = v281;
    v108 = v277;
    v120 = v270;
LABEL_205:
    v151 = *(_DWORD *)(v145 + 16);
    if (!v151)
    {
      v154 = 0;
      goto LABEL_217;
    }
    v152 = v151 - 1;
    v153 = (v151 - 1) & (37 * v146);
    v154 = (uint64_t *)(*(_QWORD *)v145 + 16 * v153);
    v155 = *v154;
    if (v146 != *v154)
    {
      v156 = 0;
      v157 = 1;
      while (v155 != -1)
      {
        if (v156)
          v158 = 0;
        else
          v158 = v155 == -2;
        if (v158)
          v156 = v154;
        v159 = v153 + v157++;
        v153 = v159 & v152;
        v154 = (uint64_t *)(*(_QWORD *)v145 + 16 * (v159 & v152));
        v155 = *v154;
        v143 = v278;
        v107 = v281;
        v108 = v277;
        if (v146 == *v154)
          goto LABEL_223;
      }
      if (v156)
        v154 = v156;
      v143 = v278;
      v107 = v281;
      v108 = v277;
LABEL_217:
      v160 = *(_DWORD *)(v145 + 8);
      if (4 * v160 + 4 >= 3 * v151)
      {
        v181 = v150;
        sub_1C53061CC(v145, 2 * v151);
        v182 = *(_DWORD *)(v145 + 16) - 1;
        v183 = v182 & (37 * v146);
        v154 = (uint64_t *)(*(_QWORD *)v145 + 16 * v183);
        v184 = *v154;
        if (v146 == *v154)
          goto LABEL_263;
        v185 = 0;
        v186 = 1;
        while (v184 != -1)
        {
          if (v185)
            v187 = 0;
          else
            v187 = v184 == -2;
          if (v187)
            v185 = v154;
          v188 = v183 + v186++;
          v183 = v188 & v182;
          v154 = (uint64_t *)(*(_QWORD *)v145 + 16 * (v188 & v182));
          v184 = *v154;
          if (v146 == *v154)
            goto LABEL_263;
        }
      }
      else
      {
        if (v151 + ~v160 - *(_DWORD *)(v145 + 12) > v151 >> 3)
          goto LABEL_219;
        v181 = v150;
        sub_1C53061CC(v145, v151);
        v189 = *(_DWORD *)(v145 + 16) - 1;
        v190 = v189 & (37 * v146);
        v154 = (uint64_t *)(*(_QWORD *)v145 + 16 * v190);
        v191 = *v154;
        if (v146 == *v154)
        {
LABEL_263:
          v161 = v146;
          v143 = v278;
          v107 = v281;
          v108 = v277;
          v150 = v181;
          goto LABEL_220;
        }
        v185 = 0;
        v192 = 1;
        while (v191 != -1)
        {
          if (v185)
            v193 = 0;
          else
            v193 = v191 == -2;
          if (v193)
            v185 = v154;
          v194 = v190 + v192++;
          v190 = v194 & v189;
          v154 = (uint64_t *)(*(_QWORD *)v145 + 16 * (v194 & v189));
          v191 = *v154;
          if (v146 == *v154)
            goto LABEL_263;
        }
      }
      if (v185)
        v154 = v185;
      v143 = v278;
      v107 = v281;
      v108 = v277;
      v150 = v181;
LABEL_219:
      v161 = *v154;
LABEL_220:
      ++*(_DWORD *)(v145 + 8);
      if (v161 != -1)
        --*(_DWORD *)(v145 + 12);
      *v154 = v146;
      v154[1] = 0;
    }
LABEL_223:
    v154[1] = (uint64_t)&v150[96 * v149 - 96];
    v143[1] = v146;
    *sub_1C5306090((uint64_t)v299, v143) = v146;
LABEL_224:
    if (++v107 != v108)
      continue;
    break;
  }
  if ((_DWORD)v310)
  {
    v252 = (char *)v309;
    v253 = (char *)v309 + 8 * v310;
    do
    {
      v255 = *((_QWORD *)v253 - 1);
      v253 -= 8;
      v254 = v255;
      v256 = *(_QWORD *)(v255 + 16);
      if (v256 == v255)
      {
        v258 = sub_1C5306158(*(_QWORD *)(v254 + 8), *v298, *((_DWORD *)v298 + 4));
        if (v258)
        {
          v259 = v258;
          if (!*(_DWORD *)(v258 + 8))
          {
            if (*(_DWORD *)(v254 + 40))
            {
              v260 = 0;
              v261 = 0;
              do
              {
                v262 = *(uint64_t **)(*(_QWORD *)(v254 + 48) + 8 * v261);
                v263 = *v262;
                v264 = *(_QWORD *)(v262[2] + 8);
                if (v260 >= *(_DWORD *)(v259 + 12))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v259, v259 + 16, v260 + 1, 16);
                  v260 = *(_DWORD *)(v259 + 8);
                }
                v265 = (_QWORD *)(*(_QWORD *)v259 + 16 * v260);
                *v265 = v263;
                v265[1] = v264;
                v260 = *(_DWORD *)(v259 + 8) + 1;
                *(_DWORD *)(v259 + 8) = v260;
                ++v261;
              }
              while (v261 != *(_DWORD *)(v254 + 40));
            }
            v266 = v300;
            if (v300)
            {
              v267 = *((unsigned int *)v300 + 2);
              if (v267 >= *((unsigned int *)v300 + 3))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v300, (uint64_t)(v300 + 2), v267 + 1, 8);
                v267 = *((unsigned int *)v266 + 2);
              }
              *((_QWORD *)*v266 + v267) = v259;
              ++*((_DWORD *)v266 + 2);
            }
          }
        }
      }
      else
      {
        v257 = *(_QWORD *)(v256 + 8);
        *sub_1C5306090((uint64_t)v299, (uint64_t *)v254) = v257;
      }
    }
    while (v253 != v252);
  }
LABEL_277:
  v15 = *(_QWORD *)(*(_QWORD *)(sub_1C53060F4((uint64_t)v301, &v295)[1] + 16) + 8);
  v82 = v282;
LABEL_278:
  if (v309 != v311)
    free(v309);
  v316 = 0;
  v315 = 0;
  LODWORD(v317[0]) = 0;
  do
  {
    v195 = (_QWORD *)sub_1C52FDC3C((uint64_t)&v285, *((_QWORD *)v10 + 1));
    v196 = *((_QWORD *)v10 + 2);
    v318 = v195;
    v319 = v196;
    sub_1C52FDE90((uint64_t)&v309, (uint64_t)&v315, (uint64_t *)&v318);
    v10 += 10;
  }
  while (v10 != v82);
  v309 = v311;
  v310 = 0x800000000;
  if (!(_DWORD)v307)
  {
    v318 = (_QWORD *)a1;
    v197 = (uint64_t *)v311;
    v198 = v311;
    goto LABEL_289;
  }
  LODWORD(v199) = 0;
  v200 = (uint64_t *)v306;
  v201 = 8 * v307;
  do
  {
    v202 = *v200;
    if (v199 >= HIDWORD(v310))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v309, (uint64_t)v311, v199 + 1, 8);
      LODWORD(v199) = v310;
    }
    *((_QWORD *)v309 + v199) = v202;
    v199 = (v310 + 1);
    LODWORD(v310) = v310 + 1;
    ++v200;
    v201 -= 8;
  }
  while (v201);
  v198 = v309;
  v197 = (uint64_t *)((char *)v309 + 8 * v199);
  v318 = (_QWORD *)a1;
  if ((_DWORD)v199)
    v203 = 126 - 2 * __clz(v199);
  else
LABEL_289:
    v203 = 0;
  sub_1C5306340((uint64_t)v198, v197, &v318, v203, 1);
  if ((_DWORD)v310)
  {
    v204 = (uint64_t ****)v309;
    v205 = (uint64_t ****)((char *)v309 + 8 * v310);
    while (1)
    {
      v206 = (*v204)[10];
      v207 = *(_QWORD *)(*(_QWORD *)(v273 + 8 * *((int *)*v206 + 6)) + 8 * v276);
      v208 = *((unsigned int *)*v204 + 2);
      if ((_DWORD)v208)
        break;
LABEL_315:
      v312 = (*v204)[10];
      v313 = v207;
      sub_1C52FDE90((uint64_t)&v318, (uint64_t)&v315, (uint64_t *)&v312);
      if (++v204 == v205)
        goto LABEL_292;
    }
    v209 = **v204;
    v210 = &v209[2 * v208];
    v211 = v289 - 1;
    v212 = LODWORD(v317[0]) - 1;
    while (1)
    {
      v213 = *v209;
      v214 = **v209;
      if (v289)
      {
        v215 = ((v214 >> 4) ^ (v214 >> 9)) & v211;
        v216 = *(_QWORD *)(v288[0] + 16 * v215);
        if (v214 == v216)
        {
LABEL_298:
          if (v215 != v289)
            break;
        }
        else
        {
          v220 = 1;
          while (v216 != -4096)
          {
            v221 = v215 + v220++;
            v215 = v221 & v211;
            v216 = *(_QWORD *)(v288[0] + 16 * v215);
            if (v214 == v216)
              goto LABEL_298;
          }
        }
      }
      v217 = *(_QWORD *)(*(_QWORD *)(v273 + 8 * *((int *)*v206 + 6)) + 8 * v276);
      if (LODWORD(v317[0]))
      {
        v218 = ((v213 >> 4) ^ (v213 >> 9)) & v212;
        v219 = (uint64_t *)*((_QWORD *)v315 + 2 * v218);
        if (v219 == v213)
        {
LABEL_301:
          v217 = *(_QWORD *)(*(_QWORD *)(v273 + 8 * *((int *)*v206 + 6)) + 8 * v276);
          if ((_DWORD)v218 != LODWORD(v317[0]))
            v217 = *((_QWORD *)v315 + 2 * v218 + 1);
        }
        else
        {
          v222 = 1;
          while (v219 != (uint64_t *)-4096)
          {
            v223 = v218 + v222++;
            v218 = v223 & v212;
            v219 = (uint64_t *)*((_QWORD *)v315 + 2 * v218);
            if (v219 == v213)
              goto LABEL_301;
          }
          v217 = *(_QWORD *)(*(_QWORD *)(v273 + 8 * *((int *)*v206 + 6)) + 8 * v276);
        }
      }
      if (*(_QWORD *)(*(_QWORD *)(a3 + 8 * *(int *)(v214 + 24)) + 8 * v276) != v217)
        break;
      v209 += 2;
      if (v209 == v210)
        goto LABEL_315;
    }
    LOBYTE(v15) = 0;
    v16 = 0;
  }
  else
  {
LABEL_292:
    v16 = v15 & 0xFFFFFFFFFFFFFF00;
  }
  if (v309 != v311)
    free(v309);
  MEMORY[0x1CAA32FB4](v315, 8);
  sub_1C4926AE8((uint64_t)v303);
  MEMORY[0x1CAA32FB4](v301[0], 8);
LABEL_321:
  if (v306 != v308)
    free(v306);
  MEMORY[0x1CAA32FB4](v283[0], 8);
  v224 = &v290[2 * v292];
  if ((_DWORD)v291)
  {
    if (v292)
    {
      v226 = 16 * v292;
      v225 = v290;
      while ((*v225 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v225 += 2;
        v226 -= 16;
        if (!v226)
          goto LABEL_329;
      }
    }
    else
    {
      v225 = v290;
    }
  }
  else
  {
LABEL_329:
    v225 = &v290[2 * v292];
  }
  v227 = &v290[2 * v292];
LABEL_331:
  while (v225 != v227)
  {
    v228 = v225[1];
    if (v228)
    {
      v229 = *(char **)(v228 + 16);
      v230 = *(unsigned int *)(v228 + 24);
      if ((_DWORD)v230)
      {
        v231 = 96 * v230;
        do
        {
          v232 = *(char **)&v229[v231 - 96];
          if (&v229[v231 - 80] != v232)
            free(v232);
          v231 -= 96;
        }
        while (v231);
        v229 = *(char **)(v228 + 16);
      }
      if (v229 != (char *)(v228 + 32))
        free(v229);
      MEMORY[0x1CAA32FC0](v228, 0x10A0C4042BD28D8);
    }
    v233 = v225 + 2;
    v225 = v224;
    if (v233 != v224)
    {
      v225 = v233;
      while ((*v225 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v225 += 2;
        if (v225 == v224)
        {
          v225 = v224;
          goto LABEL_331;
        }
      }
    }
  }
  if (v286)
  {
    v234 = v285;
    if (v287 <= 4 * (int)v286 || v287 < 0x41)
    {
      if (v287)
      {
        v235 = 16 * v287;
        do
        {
          *v234 = -1;
          v234 += 2;
          v235 -= 16;
        }
        while (v235);
      }
      v286 = 0;
    }
    else if ((_DWORD)v286)
    {
      v241 = 1 << (33 - __clz(v286 - 1));
      if (v241 <= 64)
        v242 = 64;
      else
        v242 = v241;
      if (v242 == v287)
      {
        v286 = 0;
        v243 = 16 * v287;
        do
        {
          *v234 = -1;
          v234 += 2;
          v243 -= 16;
        }
        while (v243);
      }
      else
      {
        MEMORY[0x1CAA32FB4](v285, 8);
        v248 = (4 * v242 / 3u + 1) | ((unint64_t)(4 * v242 / 3u + 1) >> 1);
        v249 = v248 | (v248 >> 2) | ((v248 | (v248 >> 2)) >> 4);
        v287 = (((v249 | (v249 >> 8)) >> 16) | v249 | (v249 >> 8)) + 1;
        v250 = operator new(16 * v287, (std::align_val_t)8uLL);
        v285 = v250;
        v286 = 0;
        if (v287)
        {
          v251 = 16 * v287;
          do
          {
            *v250 = -1;
            v250 += 2;
            v251 -= 16;
          }
          while (v251);
        }
      }
    }
    else
    {
      MEMORY[0x1CAA32FB4](v285, 8);
      v285 = 0;
      v286 = 0;
      v287 = 0;
    }
  }
  sub_1C61446F0((unsigned int *)v288);
  if (v291)
  {
    v236 = v290;
    if (v292 <= 4 * (int)v291 || v292 < 0x41)
    {
      if (v292)
      {
        v240 = 16 * v292;
        do
        {
          *v236 = -4096;
          v236 += 2;
          v240 -= 16;
        }
        while (v240);
      }
      v291 = 0;
    }
    else if ((_DWORD)v291)
    {
      v237 = 1 << (33 - __clz(v291 - 1));
      if (v237 <= 64)
        v238 = 64;
      else
        v238 = v237;
      if (v238 == v292)
      {
        v291 = 0;
        v239 = 16 * v292;
        do
        {
          *v236 = -4096;
          v236 += 2;
          v239 -= 16;
        }
        while (v239);
      }
      else
      {
        MEMORY[0x1CAA32FB4](v290, 8);
        v244 = (4 * v238 / 3u + 1) | ((unint64_t)(4 * v238 / 3u + 1) >> 1);
        v245 = v244 | (v244 >> 2) | ((v244 | (v244 >> 2)) >> 4);
        v292 = (((v245 | (v245 >> 8)) >> 16) | v245 | (v245 >> 8)) + 1;
        v246 = operator new(16 * v292, (std::align_val_t)8uLL);
        v290 = v246;
        v291 = 0;
        if (v292)
        {
          v247 = 16 * v292;
          do
          {
            *v246 = -4096;
            v246 += 2;
            v247 -= 16;
          }
          while (v247);
        }
      }
    }
    else
    {
      MEMORY[0x1CAA32FB4](v290, 8);
      v290 = 0;
      v291 = 0;
      v292 = 0;
    }
  }
  MEMORY[0x1CAA32FB4](v290, 8);
  MEMORY[0x1CAA32FB4](v288[0], 8);
  MEMORY[0x1CAA32FB4](v285, 8);
  return v16 | v15;
}

uint64_t sub_1C52FDC3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;

  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(unsigned int *)(a1 + 64);
  v6 = sub_1C49F31C4(v4, v5, a2);
  if ((uint64_t *)(v4 + 16 * v5) == v6)
  {
    v7 = (_QWORD *)operator new();
    *v7 = a2;
    v7[1] = a1;
    v7[2] = v7 + 4;
    v7[3] = 0x100000000;
    v30 = 0;
    v8 = sub_1C49F21C0(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 64), a2, &v30);
    v9 = v30;
    v10 = *(unsigned int *)(a1 + 64);
    if ((v8 & 1) != 0)
    {
LABEL_8:
      v9[1] = (uint64_t)v7;
      v6 = sub_1C49F31C4(*(_QWORD *)(a1 + 48), v10, a2);
      return v6[1];
    }
    v31 = v30;
    v11 = *(_DWORD *)(a1 + 56);
    if (4 * v11 + 4 >= (3 * v10))
    {
      v12 = 2 * v10;
    }
    else
    {
      v12 = v10;
      if ((int)v10 + ~v11 - *(_DWORD *)(a1 + 60) > v10 >> 3)
      {
LABEL_5:
        *(_DWORD *)(a1 + 56) = v11 + 1;
        if (*v9 != -4096)
          --*(_DWORD *)(a1 + 60);
        *v9 = a2;
        v9[1] = 0;
        LODWORD(v10) = *(_DWORD *)(a1 + 64);
        goto LABEL_8;
      }
    }
    v14 = v10;
    v15 = *(_QWORD *)(a1 + 48);
    v16 = (v12 - 1) | ((unint64_t)(v12 - 1) >> 1);
    v17 = v16 | (v16 >> 2) | ((v16 | (v16 >> 2)) >> 4);
    v18 = ((v17 | (v17 >> 8)) >> 16) | v17 | (v17 >> 8);
    if ((v18 + 1) > 0x40)
      v19 = v18 + 1;
    else
      v19 = 64;
    *(_DWORD *)(a1 + 64) = v19;
    v20 = operator new(16 * v19, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 48) = v20;
    if (v15)
    {
      *(_QWORD *)(a1 + 56) = 0;
      v21 = *(unsigned int *)(a1 + 64);
      if ((_DWORD)v21)
      {
        v22 = 16 * v21;
        do
        {
          *v20 = -4096;
          v20 += 2;
          v22 -= 16;
        }
        while (v22);
      }
      if ((_DWORD)v14)
      {
        v23 = 0;
        v24 = (uint64_t *)(v15 + 8);
        v25 = 16 * v14;
        do
        {
          v26 = *(v24 - 1);
          if ((v26 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v32 = 0;
            sub_1C49F21C0(*(_QWORD *)(a1 + 48), *(_DWORD *)(a1 + 64), v26, &v32);
            v27 = v32;
            *v32 = v26;
            v27[1] = *v24;
            *(_DWORD *)(a1 + 56) = ++v23;
          }
          v24 += 2;
          v25 -= 16;
        }
        while (v25);
      }
      MEMORY[0x1CAA32FB4](v15, 8);
      v20 = *(_QWORD **)(a1 + 48);
      LODWORD(v28) = *(_DWORD *)(a1 + 64);
    }
    else
    {
      *(_QWORD *)(a1 + 56) = 0;
      v28 = *(unsigned int *)(a1 + 64);
      if ((_DWORD)v28)
      {
        v29 = 0;
        do
        {
          v20[v29] = -4096;
          v29 += 2;
        }
        while (2 * v28 != v29);
      }
    }
    sub_1C49F21C0((uint64_t)v20, v28, a2, &v31);
    v11 = *(_DWORD *)(a1 + 56);
    v9 = v31;
    goto LABEL_5;
  }
  return v6[1];
}

uint64_t sub_1C52FDE90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t *v7;
  char v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;

  v27 = 0;
  result = sub_1C49F21C0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v27);
  v7 = v27;
  if ((result & 1) != 0)
  {
    v8 = 0;
    goto LABEL_8;
  }
  v28 = v27;
  v9 = *(_DWORD *)(a2 + 8);
  v10 = *(unsigned int *)(a2 + 16);
  if (4 * v9 + 4 >= (3 * v10))
  {
    v11 = 2 * v10;
    goto LABEL_10;
  }
  v11 = *(_DWORD *)(a2 + 16);
  if ((int)v10 + ~v9 - *(_DWORD *)(a2 + 12) <= v10 >> 3)
  {
LABEL_10:
    v13 = *(_QWORD *)a2;
    v14 = (v11 - 1) | ((unint64_t)(v11 - 1) >> 1);
    v15 = v14 | (v14 >> 2) | ((v14 | (v14 >> 2)) >> 4);
    v16 = ((v15 | (v15 >> 8)) >> 16) | v15 | (v15 >> 8);
    if ((v16 + 1) > 0x40)
      v17 = v16 + 1;
    else
      v17 = 64;
    *(_DWORD *)(a2 + 16) = v17;
    v18 = operator new(16 * v17, (std::align_val_t)8uLL);
    *(_QWORD *)a2 = v18;
    if (v13)
    {
      *(_QWORD *)(a2 + 8) = 0;
      v19 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v19)
      {
        v20 = 16 * v19;
        do
        {
          *v18 = -4096;
          v18 += 2;
          v20 -= 16;
        }
        while (v20);
      }
      if ((_DWORD)v10)
      {
        v21 = (uint64_t *)(v13 + 8);
        v22 = 16 * v10;
        do
        {
          v23 = *(v21 - 1);
          if ((v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v29 = 0;
            sub_1C49F21C0(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), v23, &v29);
            v24 = v29;
            *v29 = v23;
            v24[1] = *v21;
            ++*(_DWORD *)(a2 + 8);
          }
          v21 += 2;
          v22 -= 16;
        }
        while (v22);
      }
      MEMORY[0x1CAA32FB4](v13, 8);
      v18 = *(_QWORD **)a2;
      LODWORD(v25) = *(_DWORD *)(a2 + 16);
    }
    else
    {
      *(_QWORD *)(a2 + 8) = 0;
      v25 = *(unsigned int *)(a2 + 16);
      if ((_DWORD)v25)
      {
        v26 = 0;
        do
        {
          v18[v26] = -4096;
          v26 += 2;
        }
        while (2 * v25 != v26);
      }
    }
    result = sub_1C49F21C0((uint64_t)v18, v25, *a3, &v28);
    v9 = *(_DWORD *)(a2 + 8);
    v7 = v28;
  }
  *(_DWORD *)(a2 + 8) = v9 + 1;
  if (*v7 != -4096)
    --*(_DWORD *)(a2 + 12);
  *v7 = *a3;
  v7[1] = a3[1];
  v8 = 1;
LABEL_8:
  v12 = *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v12;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

char *sub_1C52FE0A0(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  int v17;
  char *v18;
  uint64_t v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = &result[48 * v10];
      do
      {
        *(_QWORD *)result = 0;
        result[8] = 0;
        result[24] = 0;
        *((_QWORD *)result + 4) = 0;
        result += 48;
      }
      while (result != v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 48 * v3;
      v13 = v4;
      do
      {
        if (*(_QWORD *)v13 || *(_BYTE *)(v13 + 24) && *(_OWORD *)(v13 + 8) != 0 || *(_QWORD *)(v13 + 32))
        {
          v19 = 0;
          sub_1C50FD840(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t *)v13, &v19);
          v14 = v19;
          v15 = *(_OWORD *)v13;
          v16 = *(_OWORD *)(v13 + 16);
          *(_QWORD *)(v19 + 32) = *(_QWORD *)(v13 + 32);
          *(_OWORD *)v14 = v15;
          *(_OWORD *)(v14 + 16) = v16;
          *(_DWORD *)(v14 + 40) = *(_DWORD *)(v13 + 40);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 48;
        v12 -= 48;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(_DWORD *)(a1 + 16);
  if (v17)
  {
    v18 = &result[48 * v17];
    do
    {
      *(_QWORD *)result = 0;
      result[8] = 0;
      result[24] = 0;
      *((_QWORD *)result + 4) = 0;
      result += 48;
    }
    while (result != v18);
  }
  return result;
}

char *sub_1C52FE218(void **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  __int128 v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  v3 = (char *)*a1;
  v2 = (char *)a1[1];
  v4 = 0xEEEEEEEEEEEEEEEFLL * ((v2 - (_BYTE *)*a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222)
    abort();
  if (0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - v3) >> 3) > v5)
    v5 = 0xDDDDDDDDDDDDDDDELL * (((_BYTE *)a1[2] - v3) >> 3);
  if (0xEEEEEEEEEEEEEEEFLL * (((_BYTE *)a1[2] - v3) >> 3) >= 0x111111111111111)
    v8 = 0x222222222222222;
  else
    v8 = v5;
  if (v8)
  {
    if (v8 > 0x222222222222222)
      sub_1C4764EE4();
    v9 = (char *)operator new(120 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = *(_OWORD *)(a2 + 80);
  v11 = &v9[120 * v4];
  *((_OWORD *)v11 + 4) = *(_OWORD *)(a2 + 64);
  *((_OWORD *)v11 + 5) = v10;
  *((_OWORD *)v11 + 6) = *(_OWORD *)(a2 + 96);
  *((_QWORD *)v11 + 14) = *(_QWORD *)(a2 + 112);
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  v13 = *(_OWORD *)(a2 + 32);
  v14 = *(_OWORD *)(a2 + 48);
  v15 = v11 + 120;
  *((_OWORD *)v11 + 2) = v13;
  *((_OWORD *)v11 + 3) = v14;
  if (v2 != v3)
  {
    do
    {
      v16 = *(_OWORD *)(v2 - 120);
      v17 = *(_OWORD *)(v2 - 104);
      v18 = *(_OWORD *)(v2 - 88);
      *(_OWORD *)(v11 - 72) = *(_OWORD *)(v2 - 72);
      *(_OWORD *)(v11 - 88) = v18;
      *(_OWORD *)(v11 - 104) = v17;
      *(_OWORD *)(v11 - 120) = v16;
      v19 = *(_OWORD *)(v2 - 56);
      v20 = *(_OWORD *)(v2 - 40);
      v21 = *(_OWORD *)(v2 - 24);
      *((_QWORD *)v11 - 1) = *((_QWORD *)v2 - 1);
      *(_OWORD *)(v11 - 24) = v21;
      *(_OWORD *)(v11 - 40) = v20;
      *(_OWORD *)(v11 - 56) = v19;
      v11 -= 120;
      v2 -= 120;
    }
    while (v2 != v3);
    v2 = (char *)*a1;
  }
  *a1 = v11;
  a1[1] = v15;
  a1[2] = &v9[120 * v8];
  if (v2)
    operator delete(v2);
  return v15;
}

uint64_t sub_1C52FE378(uint64_t result, unint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  unsigned int v9;
  uint64_t v10;

  v3 = result;
  if (*(_QWORD *)(result + 192))
    return sub_1C6222174((uint64_t **)(result + 176), a2);
  v4 = *(unsigned int *)(result + 8);
  if ((_DWORD)v4)
  {
    v5 = *(char **)result;
    v6 = *(_QWORD *)result + 40;
    v7 = 40 * v4;
    while (1)
    {
      result = sub_1C50FDDD0((uint64_t)v5, (uint64_t)a2);
      v8 = v5 + 40;
      if ((_DWORD)result)
        break;
      v6 += 40;
      v5 += 40;
      v7 -= 40;
      if (!v7)
        return result;
    }
    v9 = *(_DWORD *)(v3 + 8);
    v10 = *(_QWORD *)v3 + 40 * v9;
    if (v8 != (const void *)v10)
    {
      result = (uint64_t)memmove(v5, v8, v10 - v6);
      v9 = *(_DWORD *)(v3 + 8);
    }
    *(_DWORD *)(v3 + 8) = v9 - 1;
  }
  return result;
}

uint64_t sub_1C52FE43C(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;

  if (!a2)
  {
    v9 = 0;
    result = 0;
    goto LABEL_5;
  }
  v7 = a2 - 1;
  v8 = sub_1C50FD958(a3) & (a2 - 1);
  v9 = a1 + (v8 << 6);
  if (sub_1C50FDDD0((uint64_t)a3, v9))
  {
    result = 1;
    goto LABEL_5;
  }
  v11 = 0;
  v12 = 1;
  while (1)
  {
    if (*(_QWORD *)v9)
      goto LABEL_8;
    if (!*(_BYTE *)(v9 + 24))
      break;
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      v13 = *(_QWORD *)(v9 + 32) == 0;
      goto LABEL_9;
    }
LABEL_8:
    v13 = 0;
LABEL_9:
    if (v13 && v11 == 0)
      v11 = v9;
    v14 = v12 + 1;
    v8 = ((_DWORD)v8 + v12) & v7;
    v9 = a1 + (v8 << 6);
    v15 = sub_1C50FDDD0((uint64_t)a3, v9);
    result = 1;
    v12 = v14;
    if (v15)
      goto LABEL_5;
  }
  if (*(_QWORD *)(v9 + 32))
    goto LABEL_8;
  result = 0;
  if (v11)
    v9 = v11;
LABEL_5:
  *a4 = v9;
  return result;
}

_DWORD *sub_1C52FE548(uint64_t *a1, int a2)
{
  unsigned int v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  unsigned int v10;
  uint64_t v11;
  int *v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  int *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;

  v3 = *((_DWORD *)a1 + 4);
  v4 = (unsigned int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(208 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((_DWORD *)a1 + 4);
    if (v10)
    {
      v11 = 208 * v10;
      do
      {
        *result = -1;
        result += 52;
        v11 -= 208;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = (int *)&v4[52 * v3];
      v13 = v4;
      do
      {
        v14 = *v13;
        if (*v13 <= 0xFFFFFFFD)
        {
          v15 = *((_DWORD *)a1 + 4);
          if (v15)
          {
            v17 = v15 - 1;
            v18 = v17 & v14;
            v16 = *a1 + 208 * (v17 & v14);
            v19 = *(_DWORD *)v16;
            if (v14 != *(_DWORD *)v16)
            {
              v21 = 0;
              v22 = 1;
              while (v19 != -1)
              {
                if (v21)
                  v23 = 0;
                else
                  v23 = v19 == -2;
                if (v23)
                  v21 = v16;
                v24 = v18 + v22++;
                v18 = v24 & v17;
                v16 = *a1 + 208 * v18;
                v19 = *(_DWORD *)v16;
                if (v14 == *(_DWORD *)v16)
                  goto LABEL_16;
              }
              if (v21)
                v16 = v21;
            }
          }
          else
          {
            v16 = 0;
          }
LABEL_16:
          *(_DWORD *)v16 = v14;
          sub_1C6221FD4((_QWORD *)(v16 + 8), (uint64_t)(v13 + 2));
          ++*((_DWORD *)a1 + 2);
          sub_1C61247C0((uint64_t)(v13 + 46), *((_QWORD **)v13 + 24));
          v20 = (int *)*((_QWORD *)v13 + 1);
          if (v20 != (int *)(v13 + 6))
            free(v20);
        }
        v13 += 52;
      }
      while (v13 != (unsigned int *)v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v25 = *((_DWORD *)a1 + 4);
  if (v25)
  {
    v26 = 208 * v25;
    do
    {
      *result = -1;
      result += 52;
      v26 -= 208;
    }
    while (v26);
  }
  return result;
}

char *sub_1C52FE70C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = &result[64 * v10];
      do
      {
        *(_QWORD *)result = 0;
        result[8] = 0;
        result[24] = 0;
        *((_QWORD *)result + 4) = 0;
        result += 64;
      }
      while (result != v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v3 << 6;
      v13 = v4;
      do
      {
        if (*(_QWORD *)v13 || *(_BYTE *)(v13 + 24) && *(_OWORD *)(v13 + 8) != 0 || *(_QWORD *)(v13 + 32))
        {
          v20 = 0;
          sub_1C52FE43C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t *)v13, &v20);
          v14 = v20;
          v15 = *(_OWORD *)v13;
          v16 = *(_OWORD *)(v13 + 16);
          *(_QWORD *)(v20 + 32) = *(_QWORD *)(v13 + 32);
          *(_OWORD *)v14 = v15;
          *(_OWORD *)(v14 + 16) = v16;
          v17 = *(_OWORD *)(v13 + 40);
          *(_QWORD *)(v14 + 56) = *(_QWORD *)(v13 + 56);
          *(_OWORD *)(v14 + 40) = v17;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 64;
        v12 -= 64;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = &result[64 * v18];
    do
    {
      *(_QWORD *)result = 0;
      result[8] = 0;
      result[24] = 0;
      *((_QWORD *)result + 4) = 0;
      result += 64;
    }
    while (result != v19);
  }
  return result;
}

_DWORD *sub_1C52FE87C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(88 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C622273C(a1, v4, v4 + 88 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 88 * v10;
    do
    {
      *result = -1;
      result += 22;
      v11 -= 88;
    }
    while (v11);
  }
  return result;
}

unint64_t sub_1C52FE940(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + (v3 << 6);
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 64);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 64);
    }
  }
  return v2;
}

_QWORD *sub_1C52FE9B4(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  v1 = (_QWORD *)result[1];
  if ((_QWORD *)*result != v1)
  {
    v2 = (_QWORD *)(*result + 32);
    do
    {
      if (*(v2 - 4) || *((_BYTE *)v2 - 8) && *(_OWORD *)(v2 - 3) != 0)
        break;
      if (*v2)
        break;
      v3 = v2 + 1;
      *result = v2 + 1;
      v2 += 5;
    }
    while (v3 != v1);
  }
  return result;
}

void sub_1C52FEA04(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  const void *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v16;
  unint64_t v17;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v13 = v4 + 1;
    v14 = v5 + (v4 << 6);
    if (v5 <= a2 && v14 > a2)
    {
      v17 = a2 - v5;
      sub_1C6222944(a1, v13);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v17;
    }
    else
    {
      sub_1C6222944(a1, v13);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = v5 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6);
  *(_OWORD *)v6 = *(_OWORD *)a2;
  v7 = (void *)(v6 + 32);
  *(_QWORD *)(v6 + 24) = 0x400000000;
  *(_QWORD *)(v6 + 16) = v6 + 32;
  v8 = v6 + 16;
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 && v8 != a2 + 16)
  {
    v10 = *(const void **)(a2 + 16);
    v11 = a2 + 32;
    if (v10 != (const void *)(a2 + 32))
    {
      if (v7 != (void *)(v8 + 16))
      {
        free(v7);
        v11 = a2 + 32;
        v10 = *(const void **)(a2 + 16);
        LODWORD(v9) = *(_DWORD *)(a2 + 24);
      }
      *(_QWORD *)v8 = v10;
      v16 = *(_DWORD *)(a2 + 28);
      *(_DWORD *)(v8 + 8) = v9;
      *(_DWORD *)(v8 + 12) = v16;
      *(_QWORD *)(a2 + 16) = v11;
      *(_DWORD *)(a2 + 28) = 0;
      goto LABEL_9;
    }
    if (v9 >= 5)
    {
      *(_DWORD *)(v8 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v8, v8 + 16, v9, 8);
      v12 = *(unsigned int *)(a2 + 24);
      if (!(_DWORD)v12)
        goto LABEL_8;
      v10 = *(const void **)(a2 + 16);
      v7 = *(void **)v8;
    }
    else
    {
      v12 = *(unsigned int *)(a2 + 24);
    }
    memcpy(v7, v10, 8 * v12);
LABEL_8:
    *(_DWORD *)(v8 + 8) = v9;
LABEL_9:
    *(_DWORD *)(a2 + 24) = 0;
  }
  ++*(_DWORD *)(a1 + 8);
}

_DWORD *sub_1C52FEB60(uint64_t a1, int a2)
{
  uint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned __int16 **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6222C94(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1C52FEC18(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, unint64_t *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_1C52EBD0C(a5, a2 + 4))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_1C52EBD0C(v12 + 4, a5))
      goto LABEL_16;
    return sub_1C52FED9C((uint64_t)a1, a3, a5);
  }
  if (sub_1C52EBD0C(a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_1C52EBD0C(a5, v15 + 4))
        return sub_1C52FED9C((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *sub_1C52FED9C(uint64_t a1, _QWORD *a2, unint64_t *a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  unint64_t *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if (!sub_1C52EBD0C(a3, v4 + 4))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_1C52EBD0C(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

char *sub_1C52FEE2C(char *result)
{
  char *v1;
  unsigned int v2;
  int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  char *v11;

  v1 = result;
  v2 = *((_DWORD *)result + 4);
  v3 = *((_DWORD *)result + 2);
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == v2)
  {
    *((_QWORD *)result + 1) = 0;
    if (v2)
    {
      v6 = *(_QWORD *)result;
      v7 = *(_QWORD *)result + 48 * v2;
      do
      {
        *(_QWORD *)v6 = 0;
        *(_BYTE *)(v6 + 8) = 0;
        *(_BYTE *)(v6 + 24) = 0;
        *(_QWORD *)(v6 + 32) = 0;
        v6 += 48;
      }
      while (v6 != v7);
    }
  }
  else
  {
    result = (char *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      *((_DWORD *)v1 + 4) = v9;
      result = (char *)operator new(48 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = *((_DWORD *)v1 + 4);
      if (v10)
      {
        v11 = &result[48 * v10];
        do
        {
          *(_QWORD *)result = 0;
          result[8] = 0;
          result[24] = 0;
          *((_QWORD *)result + 4) = 0;
          result += 48;
        }
        while (result != v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      *((_DWORD *)v1 + 4) = 0;
    }
  }
  return result;
}

void sub_1C52FEF48(uint64_t a1)
{
  int v2;
  int v3;
  unsigned int v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C62238B0(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      v5 = *(_DWORD **)a1;
      v6 = 208 * v4;
      do
      {
        *v5 = -1;
        v5 += 52;
        v6 -= 208;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if (v4)
    {
      v7 = (4 * v4 / 3 + 1) | ((unint64_t)(4 * v4 / 3 + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v8;
      v9 = operator new(208 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(_DWORD *)(a1 + 16);
      if (v10)
      {
        v11 = 208 * v10;
        do
        {
          *v9 = -1;
          v9 += 52;
          v11 -= 208;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

unsigned int *sub_1C52FF054(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_QWORD *)result;
      v7 = *(_QWORD *)result + (v2 << 6);
      do
      {
        *(_QWORD *)v6 = 0;
        *(_BYTE *)(v6 + 8) = 0;
        *(_BYTE *)(v6 + 24) = 0;
        *(_QWORD *)(v6 + 32) = 0;
        v6 += 64;
      }
      while (v6 != v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new((unint64_t)v9 << 6, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = &result[16 * v10];
        do
        {
          *(_QWORD *)result = 0;
          *((_BYTE *)result + 8) = 0;
          *((_BYTE *)result + 24) = 0;
          *((_QWORD *)result + 4) = 0;
          result += 16;
        }
        while (result != v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

void sub_1C52FF168(uint64_t a1)
{
  unsigned int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  unsigned int v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  unsigned int v14;
  uint64_t v15;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_DWORD *)(a1 + 8);
  if (v2)
  {
    v4 = 88 * v2;
    v5 = *(_QWORD *)a1 + 24;
    do
    {
      if (*(_DWORD *)(v5 - 24) <= 0xFFFFFFFD)
      {
        v6 = *(void **)(v5 - 16);
        if ((void *)v5 != v6)
          free(v6);
      }
      v5 += 88;
      v4 -= 88;
    }
    while (v4);
  }
  v7 = 1 << (33 - __clz(v3 - 1));
  if (v7 <= 64)
    v7 = 64;
  if (v3)
    v8 = v7;
  else
    v8 = 0;
  if (v8 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if (v8)
    {
      v9 = *(_DWORD **)a1;
      v10 = 88 * v8;
      do
      {
        *v9 = -1;
        v9 += 22;
        v10 -= 88;
      }
      while (v10);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if (v8)
    {
      v11 = (4 * v8 / 3 + 1) | ((unint64_t)(4 * v8 / 3 + 1) >> 1);
      v12 = v11 | (v11 >> 2) | ((v11 | (v11 >> 2)) >> 4);
      LODWORD(v12) = (((v12 | (v12 >> 8)) >> 16) | v12 | (v12 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v12;
      v13 = operator new(88 * v12, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = 0;
      v14 = *(_DWORD *)(a1 + 16);
      if (v14)
      {
        v15 = 88 * v14;
        do
        {
          *v13 = -1;
          v13 += 22;
          v15 -= 88;
        }
        while (v15);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

_QWORD *sub_1C52FF2B8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C6223B84(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = LiveDebugValues::ValueIDNum::EmptyValue;
    v12 = 16 * v10;
    do
    {
      *result = v11;
      result += 2;
      v12 -= 16;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_1C52FF374(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  _BOOL4 v15;

  v5 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v6 = 8;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
    {
      v9 = 0;
      result = 0;
      goto LABEL_7;
    }
    v5 = *(_QWORD *)(a1 + 8);
  }
  v7 = v6 - 1;
  v8 = sub_1C50FD958(a2) & (v6 - 1);
  v9 = v5 + 48 * v8;
  if (sub_1C50FDDD0((uint64_t)a2, v9))
  {
    result = 1;
    goto LABEL_7;
  }
  v11 = 0;
  v12 = 1;
  while (1)
  {
    if (*(_QWORD *)v9)
      goto LABEL_11;
    if (!*(_BYTE *)(v9 + 24))
      break;
    if (*(_OWORD *)(v9 + 8) == 0)
    {
      v13 = *(_QWORD *)(v9 + 32) == 0;
      goto LABEL_12;
    }
LABEL_11:
    v13 = 0;
LABEL_12:
    if (v13 && v11 == 0)
      v11 = v9;
    v14 = v12 + 1;
    v8 = (v8 + v12) & v7;
    v9 = v5 + 48 * v8;
    v15 = sub_1C50FDDD0((uint64_t)a2, v9);
    result = 1;
    v12 = v14;
    if (v15)
      goto LABEL_7;
  }
  if (*(_QWORD *)(v9 + 32))
    goto LABEL_11;
  result = 0;
  if (v11)
    v9 = v11;
LABEL_7:
  *a3 = v9;
  return result;
}

uint64_t sub_1C52FF4A0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  __int128 *v6;
  unsigned int v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v15;
  __int128 v16[24];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(__int128 **)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 8)
    {
      v15 = a2;
      *(_QWORD *)(a1 + 8) = operator new(48 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v15;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C52FF668((int *)a1, v6, &v6[3 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v16;
  do
  {
    v10 = a1 + v8;
    if (*(_QWORD *)(a1 + v8 + 8) || *(_BYTE *)(v10 + 32) && *(_OWORD *)(a1 + v8 + 16) != 0 || *(_QWORD *)(v10 + 40))
    {
      v11 = *(_OWORD *)(a1 + v8 + 8);
      v12 = *(_OWORD *)(a1 + v8 + 24);
      *((_QWORD *)v9 + 4) = *(_QWORD *)(a1 + v8 + 40);
      *v9 = v11;
      v9[1] = v12;
      *((_QWORD *)v9 + 5) = *(_QWORD *)(v10 + 48);
      v9 += 3;
    }
    v8 += 48;
  }
  while (v8 != 384);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v13 = a2;
    *(_QWORD *)(a1 + 8) = operator new(48 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v13;
  }
  return sub_1C52FF668((int *)a1, v16, v9);
}

uint64_t sub_1C52FF668(int *a1, __int128 *a2, __int128 *a3)
{
  uint64_t result;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  result = (uint64_t)sub_1C62234A4(a1);
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 || *((_BYTE *)a2 + 24) && *(__int128 *)((char *)a2 + 8) != 0 || *((_QWORD *)a2 + 4))
    {
      v10 = 0;
      result = sub_1C52FF374((uint64_t)a1, (uint64_t *)a2, &v10);
      v7 = v10;
      v8 = *a2;
      v9 = a2[1];
      *(_QWORD *)(v10 + 32) = *((_QWORD *)a2 + 4);
      *(_OWORD *)v7 = v8;
      *(_OWORD *)(v7 + 16) = v9;
      *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
      *a1 += 2;
    }
    a2 += 3;
  }
  return result;
}

_DWORD *sub_1C52FF710(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62242D4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C52FF7C8(uint64_t a1, _QWORD *a2, int *a3)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(a1 + 8);
  result = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *((_QWORD *)a3 + 1);
    v7 = *((_QWORD *)a3 + 2);
    v8 = *a3;
    while (1)
    {
      while (1)
      {
        v9 = (_QWORD *)v4;
        v10 = *(_DWORD *)(v4 + 32);
        if (v8 >= v10)
          break;
LABEL_4:
        v4 = *v9;
        result = v9;
        if (!*v9)
          goto LABEL_18;
      }
      if (v10 >= v8)
      {
        v11 = v9[5];
        if (v6 < v11)
          goto LABEL_4;
        v12 = v9[6];
        if (v11 >= v6 && v7 < v12)
          goto LABEL_4;
        if (v11 >= v6 && v12 >= v7)
          goto LABEL_18;
      }
      result = v9 + 1;
      v4 = v9[1];
      if (!v4)
        goto LABEL_18;
    }
  }
  v9 = result;
LABEL_18:
  *a2 = v9;
  return result;
}

uint64_t sub_1C52FF84C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6224714(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_DWORD *)(a1 + v8 + 8);
    if (v10 <= 0xFFFFFFFD)
    {
      *(_DWORD *)v9 = v10;
      *((_QWORD *)v9 + 1) = *(_QWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6224714(a1, (uint64_t)v14, (uint64_t)v9);
}

int8x16_t sub_1C52FF9C0(int8x16_t *a1, int8x16_t *a2, _QWORD *a3, uint64_t a4, char a5)
{
  int8x16_t *v8;
  int8x16_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int8x16_t *v23;
  int8x16_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  int8x16_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  BOOL v46;
  int8x16_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  int8x16_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t *v75;
  int8x16_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t *v99;
  int8x16_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  unsigned int v107;
  uint64_t *v108;
  BOOL v109;
  char v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  unsigned int v126;
  uint64_t v127;
  uint64_t *v128;
  int64_t v129;
  int64_t v130;
  int64_t v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  int64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t v173;
  unsigned int v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  BOOL v184;
  unsigned int v185;
  uint64_t v186;
  BOOL v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  uint64_t *v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  int8x16_t *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  unsigned int v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  int8x16_t *v216;
  uint64_t *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t v221;
  unsigned int v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t *v246;
  uint64_t v247;
  unsigned int v248;
  uint64_t v249;
  unsigned int v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t *v257;
  uint64_t v258;
  int8x16_t *v259;
  uint64_t v261;
  uint64_t v262;

uint64_t sub_1C5300CB0(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t result;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v8 = *a1;
  v9 = *a4;
  v10 = (uint64_t *)(*a4 + 576);
  v37 = *a2;
  v38 = 0;
  if ((sub_1C61252B8(v10, &v37, &v38) & 1) != 0)
    v11 = v38;
  else
    v11 = *(_QWORD *)(v9 + 576) + 16 * *(unsigned int *)(v9 + 592);
  v12 = *(_DWORD *)(v11 + 8);
  v37 = v8;
  v38 = 0;
  if ((sub_1C61252B8(v10, &v37, &v38) & 1) != 0)
    v13 = v38;
  else
    v13 = *(_QWORD *)(v9 + 576) + 16 * *(unsigned int *)(v9 + 592);
  v14 = *a2;
  v15 = *a4;
  v16 = (uint64_t *)(*a4 + 576);
  if (v12 >= *(_DWORD *)(v13 + 8))
  {
    v37 = *a3;
    v38 = 0;
    if ((sub_1C61252B8(v16, &v37, &v38) & 1) != 0)
      v18 = v38;
    else
      v18 = *(_QWORD *)(v15 + 576) + 16 * *(unsigned int *)(v15 + 592);
    v22 = *(_DWORD *)(v18 + 8);
    v37 = v14;
    v38 = 0;
    result = sub_1C61252B8(v16, &v37, &v38);
    if ((result & 1) != 0)
      v23 = v38;
    else
      v23 = *(_QWORD *)(v15 + 576) + 16 * *(unsigned int *)(v15 + 592);
    if (v22 < *(_DWORD *)(v23 + 8))
    {
      v27 = *a2;
      *a2 = *a3;
      *a3 = v27;
      v28 = *a1;
      v29 = *a4;
      v37 = *a2;
      v38 = 0;
      v30 = (sub_1C61252B8((uint64_t *)(v29 + 576), &v37, &v38) & 1) != 0
          ? v38
          : *(_QWORD *)(v29 + 576) + 16 * *(unsigned int *)(v29 + 592);
      v33 = *(_DWORD *)(v30 + 8);
      v37 = v28;
      v38 = 0;
      result = sub_1C61252B8((uint64_t *)(v29 + 576), &v37, &v38);
      v34 = (result & 1) != 0 ? v38 : *(_QWORD *)(v29 + 576) + 16 * *(unsigned int *)(v29 + 592);
      if (v33 < *(_DWORD *)(v34 + 8))
      {
        v36 = *a1;
        *a1 = *a2;
        *a2 = v36;
      }
    }
  }
  else
  {
    v37 = *a3;
    v38 = 0;
    if ((sub_1C61252B8(v16, &v37, &v38) & 1) != 0)
      v17 = v38;
    else
      v17 = *(_QWORD *)(v15 + 576) + 16 * *(unsigned int *)(v15 + 592);
    v19 = *(_DWORD *)(v17 + 8);
    v37 = v14;
    v38 = 0;
    result = sub_1C61252B8(v16, &v37, &v38);
    if ((result & 1) != 0)
      v21 = v38;
    else
      v21 = *(_QWORD *)(v15 + 576) + 16 * *(unsigned int *)(v15 + 592);
    v24 = *a1;
    if (v19 >= *(_DWORD *)(v21 + 8))
    {
      *a1 = *a2;
      *a2 = v24;
      v25 = *a4;
      v37 = *a3;
      v38 = 0;
      if ((sub_1C61252B8((uint64_t *)(v25 + 576), &v37, &v38) & 1) != 0)
        v26 = v38;
      else
        v26 = *(_QWORD *)(v25 + 576) + 16 * *(unsigned int *)(v25 + 592);
      v31 = *(_DWORD *)(v26 + 8);
      v37 = v24;
      v38 = 0;
      result = sub_1C61252B8((uint64_t *)(v25 + 576), &v37, &v38);
      if ((result & 1) != 0)
        v32 = v38;
      else
        v32 = *(_QWORD *)(v25 + 576) + 16 * *(unsigned int *)(v25 + 592);
      if (v31 < *(_DWORD *)(v32 + 8))
      {
        v35 = *a2;
        *a2 = *a3;
        *a3 = v35;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v24;
    }
  }
  return result;
}

BOOL sub_1C5300F94(int8x16_t *a1, int8x16_t *a2, _QWORD *a3)
{
  _QWORD *v3;
  int8x16_t *v4;
  uint64_t v6;
  _BOOL8 result;
  int8x16_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int8x16_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  int8x16_t *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;

  v3 = a3;
  v4 = a2;
  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v27 = a1->i64[0];
      v28 = *a3;
      v29 = (uint64_t *)(*a3 + 576);
      v67 = a2[-1].i64[1];
      v68 = 0;
      if ((sub_1C61252B8(v29, &v67, &v68) & 1) != 0)
        v30 = v68;
      else
        v30 = *(_QWORD *)(v28 + 576) + 16 * *(unsigned int *)(v28 + 592);
      v37 = *(_DWORD *)(v30 + 8);
      v67 = v27;
      v68 = 0;
      if ((sub_1C61252B8(v29, &v67, &v68) & 1) != 0)
        v38 = v68;
      else
        v38 = *(_QWORD *)(v28 + 576) + 16 * *(unsigned int *)(v28 + 592);
      if (v37 < *(_DWORD *)(v38 + 8))
      {
        v41 = a1->i64[0];
        a1->i64[0] = v4[-1].i64[1];
        v4[-1].i64[1] = v41;
      }
      return 1;
    case 3:
      sub_1C5300CB0(a1->i64, &a1->i64[1], &a2[-1].i64[1], a3);
      return 1;
    case 4:
      sub_1C53014AC(a1->i64, &a1->i64[1], a1[1].i64, &a2[-1].i64[1], a3);
      return 1;
    case 5:
      v31 = a1 + 1;
      v32 = &a1[1].i64[1];
      sub_1C53014AC(a1->i64, &a1->i64[1], a1[1].i64, &a1[1].i64[1], a3);
      v33 = a1[1].i64[1];
      v34 = *v3;
      v35 = (uint64_t *)(*v3 + 576);
      v67 = v4[-1].i64[1];
      v68 = 0;
      if ((sub_1C61252B8(v35, &v67, &v68) & 1) != 0)
        v36 = v68;
      else
        v36 = *(_QWORD *)(v34 + 576) + 16 * *(unsigned int *)(v34 + 592);
      v39 = *(_DWORD *)(v36 + 8);
      v67 = v33;
      v68 = 0;
      if ((sub_1C61252B8(v35, &v67, &v68) & 1) != 0)
        v40 = v68;
      else
        v40 = *(_QWORD *)(v34 + 576) + 16 * *(unsigned int *)(v34 + 592);
      if (v39 < *(_DWORD *)(v40 + 8))
      {
        v42 = *v32;
        *v32 = v4[-1].i64[1];
        v4[-1].i64[1] = v42;
        v43 = v31->i64[0];
        v44 = *v3;
        v45 = (uint64_t *)(*v3 + 576);
        v67 = *v32;
        v68 = 0;
        v46 = (sub_1C61252B8(v45, &v67, &v68) & 1) != 0
            ? v68
            : *(_QWORD *)(v44 + 576) + 16 * *(unsigned int *)(v44 + 592);
        v47 = *(_DWORD *)(v46 + 8);
        v67 = v43;
        v68 = 0;
        v48 = (sub_1C61252B8(v45, &v67, &v68) & 1) != 0
            ? v68
            : *(_QWORD *)(v44 + 576) + 16 * *(unsigned int *)(v44 + 592);
        if (v47 < *(_DWORD *)(v48 + 8))
        {
          v49 = v31->i64[0];
          v50 = *v32;
          v31->i64[0] = *v32;
          *v32 = v49;
          v51 = a1->i64[1];
          v52 = *v3;
          v53 = (uint64_t *)(*v3 + 576);
          v67 = v50;
          v68 = 0;
          v54 = (sub_1C61252B8(v53, &v67, &v68) & 1) != 0
              ? v68
              : *(_QWORD *)(v52 + 576) + 16 * *(unsigned int *)(v52 + 592);
          v55 = *(_DWORD *)(v54 + 8);
          v67 = v51;
          v68 = 0;
          v56 = (sub_1C61252B8(v53, &v67, &v68) & 1) != 0
              ? v68
              : *(_QWORD *)(v52 + 576) + 16 * *(unsigned int *)(v52 + 592);
          if (v55 < *(_DWORD *)(v56 + 8))
          {
            v58 = a1->i64[1];
            v57 = a1[1].i64[0];
            v59 = a1->i64[0];
            a1->i64[1] = v57;
            a1[1].i64[0] = v58;
            v60 = *v3;
            v61 = (uint64_t *)(*v3 + 576);
            v67 = v57;
            v68 = 0;
            v62 = (sub_1C61252B8(v61, &v67, &v68) & 1) != 0
                ? v68
                : *(_QWORD *)(v60 + 576) + 16 * *(unsigned int *)(v60 + 592);
            v63 = *(_DWORD *)(v62 + 8);
            v67 = v59;
            v68 = 0;
            v64 = (sub_1C61252B8(v61, &v67, &v68) & 1) != 0
                ? v68
                : *(_QWORD *)(v60 + 576) + 16 * *(unsigned int *)(v60 + 592);
            if (v63 < *(_DWORD *)(v64 + 8))
              *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 1;
      sub_1C5300CB0(a1->i64, &a1->i64[1], a1[1].i64, a3);
      v9 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)v4)
        return 1;
      v10 = 0;
      v66 = 0;
      v65 = v4;
      break;
  }
  while (1)
  {
    v11 = v8->i64[0];
    v12 = *v3;
    v13 = (uint64_t *)(*v3 + 576);
    v67 = *v9;
    v68 = 0;
    v14 = (sub_1C61252B8(v13, &v67, &v68) & 1) != 0 ? v68 : *(_QWORD *)(v12 + 576) + 16 * *(unsigned int *)(v12 + 592);
    v15 = *(_DWORD *)(v14 + 8);
    v67 = v11;
    v68 = 0;
    v16 = (sub_1C61252B8(v13, &v67, &v68) & 1) != 0 ? v68 : *(_QWORD *)(v12 + 576) + 16 * *(unsigned int *)(v12 + 592);
    if (v15 < *(_DWORD *)(v16 + 8))
    {
      v17 = *v9;
      v18 = v10;
      while (1)
      {
        *(uint64_t *)((char *)&a1[1].i64[1] + v18) = *(uint64_t *)((char *)a1[1].i64 + v18);
        if (v18 == -16)
          break;
        v19 = *(uint64_t *)((char *)&a1->i64[1] + v18);
        v20 = v3;
        v21 = *v3;
        v22 = v17;
        v67 = v17;
        v68 = 0;
        if ((sub_1C61252B8((uint64_t *)(v21 + 576), &v67, &v68) & 1) != 0)
          v23 = v68;
        else
          v23 = *(_QWORD *)(v21 + 576) + 16 * *(unsigned int *)(v21 + 592);
        v24 = *(_DWORD *)(v23 + 8);
        v67 = v19;
        v68 = 0;
        if ((sub_1C61252B8((uint64_t *)(v21 + 576), &v67, &v68) & 1) != 0)
          v25 = v68;
        else
          v25 = *(_QWORD *)(v21 + 576) + 16 * *(unsigned int *)(v21 + 592);
        v3 = v20;
        v17 = v22;
        v18 -= 8;
        v4 = v65;
        if (v24 >= *(_DWORD *)(v25 + 8))
        {
          v26 = (uint64_t *)((char *)&a1[1].i64[1] + v18);
          goto LABEL_23;
        }
      }
      v26 = (uint64_t *)a1;
LABEL_23:
      *v26 = v17;
      if (++v66 == 8)
        return v9 + 1 == (uint64_t *)v4;
    }
    v8 = (int8x16_t *)v9;
    v10 += 8;
    result = 1;
    if (++v9 == (uint64_t *)v4)
      return result;
  }
}

uint64_t sub_1C53014AC(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_1C5300CB0(a1, a2, a3, a5);
  v10 = *a3;
  v11 = *a5;
  v12 = (uint64_t *)(*a5 + 576);
  v32 = *a4;
  v33 = 0;
  if ((sub_1C61252B8(v12, &v32, &v33) & 1) != 0)
    v13 = v33;
  else
    v13 = *(_QWORD *)(v11 + 576) + 16 * *(unsigned int *)(v11 + 592);
  v14 = *(_DWORD *)(v13 + 8);
  v32 = v10;
  v33 = 0;
  result = sub_1C61252B8(v12, &v32, &v33);
  if ((result & 1) != 0)
    v16 = v33;
  else
    v16 = *(_QWORD *)(v11 + 576) + 16 * *(unsigned int *)(v11 + 592);
  if (v14 < *(_DWORD *)(v16 + 8))
  {
    v17 = *a3;
    *a3 = *a4;
    *a4 = v17;
    v18 = *a2;
    v19 = *a5;
    v20 = (uint64_t *)(*a5 + 576);
    v32 = *a3;
    v33 = 0;
    v21 = (sub_1C61252B8(v20, &v32, &v33) & 1) != 0 ? v33 : *(_QWORD *)(v19 + 576) + 16 * *(unsigned int *)(v19 + 592);
    v22 = *(_DWORD *)(v21 + 8);
    v32 = v18;
    v33 = 0;
    result = sub_1C61252B8(v20, &v32, &v33);
    v23 = (result & 1) != 0 ? v33 : *(_QWORD *)(v19 + 576) + 16 * *(unsigned int *)(v19 + 592);
    if (v22 < *(_DWORD *)(v23 + 8))
    {
      v24 = *a2;
      *a2 = *a3;
      *a3 = v24;
      v25 = *a1;
      v26 = *a5;
      v27 = (uint64_t *)(*a5 + 576);
      v32 = *a2;
      v33 = 0;
      if ((sub_1C61252B8(v27, &v32, &v33) & 1) != 0)
        v28 = v33;
      else
        v28 = *(_QWORD *)(v26 + 576) + 16 * *(unsigned int *)(v26 + 592);
      v29 = *(_DWORD *)(v28 + 8);
      v32 = v25;
      v33 = 0;
      result = sub_1C61252B8(v27, &v32, &v33);
      if ((result & 1) != 0)
        v30 = v33;
      else
        v30 = *(_QWORD *)(v26 + 576) + 16 * *(unsigned int *)(v26 + 592);
      if (v29 < *(_DWORD *)(v30 + 8))
      {
        v31 = *a1;
        *a1 = *a2;
        *a2 = v31;
      }
    }
  }
  return result;
}

uint64_t sub_1C53016A4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = result + 16 * (v3 >> 1);
    v6 = *(_DWORD *)(v5 + 8);
    v7 = *(_DWORD *)(a2 - 8);
    if (v6 >= v7)
    {
      if (v7 < v6)
        return result;
      v8 = *(_DWORD *)(a2 - 4);
      if (*(_DWORD *)(result + 16 * v4 + 12) >= v8)
        return result;
    }
    else
    {
      v8 = *(_DWORD *)(a2 - 4);
    }
    v9 = *(_QWORD *)(a2 - 16);
    *(_QWORD *)(a2 - 16) = *(_QWORD *)v5;
    *(_DWORD *)(a2 - 8) = v6;
    *(_DWORD *)(a2 - 4) = *(_DWORD *)(result + 16 * v4 + 12);
    if (v3 >= 2)
    {
      while (1)
      {
        v11 = v4 - 1;
        v4 = (v4 - 1) >> 1;
        v10 = result + 16 * v4;
        v12 = *(_DWORD *)(v10 + 8);
        if (v12 >= v7 && (v7 < v12 || *(_DWORD *)(result + 16 * v4 + 12) >= v8))
          break;
        *(_QWORD *)v5 = *(_QWORD *)v10;
        *(_DWORD *)(v5 + 8) = v12;
        *(_DWORD *)(v5 + 12) = *(_DWORD *)(v10 + 12);
        v5 = result + 16 * v4;
        if (v11 <= 1)
          goto LABEL_12;
      }
    }
    v10 = v5;
LABEL_12:
    *(_QWORD *)v10 = v9;
    *(_DWORD *)(v10 + 8) = v7;
    *(_DWORD *)(v10 + 12) = v8;
  }
  return result;
}

uint64_t sub_1C5301770(uint64_t result, uint64_t *a2, _QWORD *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  unsigned int v62;
  uint64_t *v63;
  BOOL v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  unsigned int v76;
  uint64_t *v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  unsigned int v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  unsigned int v98;
  BOOL v99;
  uint64_t v100;
  uint64_t *v101;
  unsigned int v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  unsigned int v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t *v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t *v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;

  v8 = (uint64_t *)result;
LABEL_2:
  v138 = a2 - 1;
  v9 = v8;
  while (2)
  {
    v10 = v9;
    v11 = (char *)a2 - (char *)v9;
    v12 = a2 - v9;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v134 = *(a2 - 1);
        v146 = *v9;
        v147 = v134;
        v135 = (uint64_t *)(*a3 + 576);
        v136 = *((_DWORD *)sub_1C6128C08(v135, &v147) + 2);
        result = (uint64_t)sub_1C6128C08(v135, &v146);
        if (v136 < *(_DWORD *)(result + 8))
        {
          v137 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v137;
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_1C53023BC(v9, v9 + 1, v138, a3);
      case 4uLL:
        return (uint64_t)sub_1C530279C(v9, v9 + 1, v9 + 2, v138, a3);
      case 5uLL:
        return (uint64_t)sub_1C5302230(v9, v9 + 1, v9 + 2, v9 + 3, v138, a3);
      default:
        v145 = v9;
        if (v11 <= 191)
        {
          v63 = v9 + 1;
          v65 = v9 == a2 || v63 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v65)
            {
              v66 = 0;
              v67 = v9;
              do
              {
                v69 = *v67;
                v68 = v67[1];
                v67 = v63;
                v146 = v69;
                v147 = v68;
                v70 = (uint64_t *)(*a3 + 576);
                v71 = *((_DWORD *)sub_1C6128C08(v70, &v147) + 2);
                result = (uint64_t)sub_1C6128C08(v70, &v146);
                if (v71 < *(_DWORD *)(result + 8))
                {
                  v72 = *v67;
                  v73 = v66;
                  while (1)
                  {
                    *(uint64_t *)((char *)v10 + v73 + 8) = *(uint64_t *)((char *)v10 + v73);
                    if (!v73)
                      break;
                    v146 = *(uint64_t *)((char *)v10 + v73 - 8);
                    v147 = v72;
                    v74 = (uint64_t *)(*a3 + 576);
                    v75 = a2;
                    v76 = *((_DWORD *)sub_1C6128C08(v74, &v147) + 2);
                    result = (uint64_t)sub_1C6128C08(v74, &v146);
                    v73 -= 8;
                    v99 = v76 >= *(_DWORD *)(result + 8);
                    a2 = v75;
                    v10 = v9;
                    if (v99)
                    {
                      v77 = (uint64_t *)((char *)v9 + v73 + 8);
                      goto LABEL_71;
                    }
                  }
                  v77 = v10;
LABEL_71:
                  *v77 = v72;
                }
                v63 = v67 + 1;
                v66 += 8;
              }
              while (v67 + 1 != a2);
            }
          }
          else if (!v65)
          {
            do
            {
              v125 = *v10;
              v124 = v10[1];
              v10 = v63;
              v146 = v125;
              v147 = v124;
              v126 = (uint64_t *)(*a3 + 576);
              v127 = *((_DWORD *)sub_1C6128C08(v126, &v147) + 2);
              result = (uint64_t)sub_1C6128C08(v126, &v146);
              if (v127 < *(_DWORD *)(result + 8))
              {
                v128 = *v10;
                v129 = v10;
                do
                {
                  v130 = v129;
                  v131 = *--v129;
                  *v130 = v131;
                  v146 = *(v130 - 2);
                  v147 = v128;
                  v132 = (uint64_t *)(*a3 + 576);
                  v133 = *((_DWORD *)sub_1C6128C08(v132, &v147) + 2);
                  result = (uint64_t)sub_1C6128C08(v132, &v146);
                }
                while (v133 < *(_DWORD *)(result + 8));
                *v129 = v128;
              }
              v63 = v10 + 1;
            }
            while (v10 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v78 = (v12 - 2) >> 1;
            v79 = v78;
            v140 = a2;
            do
            {
              v80 = v79;
              if (v78 >= v79)
              {
                v81 = (2 * v79) | 1;
                v82 = &v145[v81];
                if (2 * v79 + 2 < (uint64_t)v12)
                {
                  v83 = *v82;
                  v146 = v82[1];
                  v147 = v83;
                  v84 = (uint64_t *)(*a3 + 576);
                  v85 = *((_DWORD *)sub_1C6128C08(v84, &v147) + 2);
                  if (v85 < *((_DWORD *)sub_1C6128C08(v84, &v146) + 2))
                  {
                    ++v82;
                    v81 = 2 * v80 + 2;
                  }
                }
                v86 = &v145[v80];
                v87 = v82;
                v88 = *v82;
                v146 = *v86;
                v147 = v88;
                v89 = (uint64_t *)(*a3 + 576);
                v90 = *((_DWORD *)sub_1C6128C08(v89, &v147) + 2);
                result = (uint64_t)sub_1C6128C08(v89, &v146);
                v99 = v90 >= *(_DWORD *)(result + 8);
                a2 = v140;
                if (v99)
                {
                  v143 = *v86;
                  do
                  {
                    v91 = v87;
                    *v86 = *v87;
                    if (v78 < v81)
                      break;
                    v92 = 2 * v81;
                    v81 = (2 * v81) | 1;
                    v87 = &v145[v81];
                    v93 = v92 + 2;
                    if (v92 + 2 < (uint64_t)v12)
                    {
                      v94 = *v87;
                      v95 = &v145[v81];
                      v96 = v87[1];
                      ++v87;
                      v146 = v96;
                      v147 = v94;
                      v97 = (uint64_t *)(*a3 + 576);
                      v139 = v81;
                      v98 = *((_DWORD *)sub_1C6128C08(v97, &v147) + 2);
                      v99 = v98 >= *((_DWORD *)sub_1C6128C08(v97, &v146) + 2);
                      v81 = v139;
                      if (v99)
                        v87 = v95;
                      if (!v99)
                        v81 = v93;
                    }
                    v100 = *v87;
                    v146 = v143;
                    v147 = v100;
                    v101 = (uint64_t *)(*a3 + 576);
                    v102 = *((_DWORD *)sub_1C6128C08(v101, &v147) + 2);
                    result = (uint64_t)sub_1C6128C08(v101, &v146);
                    v86 = v91;
                    v99 = v102 >= *(_DWORD *)(result + 8);
                    a2 = v140;
                  }
                  while (v99);
                  *v91 = v143;
                }
              }
              v79 = v80 - 1;
            }
            while (v80);
            v103 = v145;
            do
            {
              v104 = 0;
              v141 = a2;
              v144 = *v103;
              v105 = v103;
              do
              {
                v106 = &v105[v104 + 1];
                v107 = (2 * v104) | 1;
                v108 = 2 * v104 + 2;
                if (v108 < (uint64_t)v12)
                {
                  v109 = *v106;
                  v146 = v106[1];
                  v147 = v109;
                  v110 = (uint64_t *)(*a3 + 576);
                  v111 = *((_DWORD *)sub_1C6128C08(v110, &v147) + 2);
                  result = (uint64_t)sub_1C6128C08(v110, &v146);
                  v103 = v145;
                  if (v111 < *(_DWORD *)(result + 8))
                  {
                    ++v106;
                    v107 = v108;
                  }
                }
                *v105 = *v106;
                v105 = v106;
                v104 = v107;
              }
              while (v107 <= (uint64_t)((v12 - 2) >> 1));
              a2 = v141 - 1;
              if (v106 == v141 - 1)
              {
                *v106 = v144;
              }
              else
              {
                *v106 = *a2;
                *a2 = v144;
                v112 = (char *)v106 - (char *)v103 + 8;
                if (v112 >= 9)
                {
                  v113 = (((unint64_t)v112 >> 3) - 2) >> 1;
                  v114 = &v103[v113];
                  v115 = *v114;
                  v146 = *v106;
                  v147 = v115;
                  v116 = (uint64_t *)(*a3 + 576);
                  v117 = *((_DWORD *)sub_1C6128C08(v116, &v147) + 2);
                  result = (uint64_t)sub_1C6128C08(v116, &v146);
                  v103 = v145;
                  if (v117 < *(_DWORD *)(result + 8))
                  {
                    v118 = *v106;
                    do
                    {
                      v119 = v114;
                      *v106 = *v114;
                      if (!v113)
                        break;
                      v113 = (v113 - 1) >> 1;
                      v114 = &v103[v113];
                      v120 = *v114;
                      v146 = v118;
                      v147 = v120;
                      v121 = (uint64_t *)(*a3 + 576);
                      v122 = *((_DWORD *)sub_1C6128C08(v121, &v147) + 2);
                      result = (uint64_t)sub_1C6128C08(v121, &v146);
                      v106 = v119;
                      v103 = v145;
                    }
                    while (v122 < *(_DWORD *)(result + 8));
                    *v119 = v118;
                  }
                }
              }
            }
            while ((uint64_t)v12-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v9[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1C53023BC(&v10[v12 >> 1], v10, v138, a3);
        }
        else
        {
          sub_1C53023BC(v10, &v10[v12 >> 1], v138, a3);
          sub_1C53023BC(v10 + 1, v14 - 1, a2 - 2, a3);
          sub_1C53023BC(v10 + 2, &v10[v13 + 1], a2 - 3, a3);
          sub_1C53023BC(v14 - 1, &v10[v12 >> 1], &v10[v13 + 1], a3);
          v15 = *v10;
          *v10 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v39 = *(v10 - 1);
          v146 = *v10;
          v147 = v39;
          v40 = (uint64_t *)(*a3 + 576);
          v41 = *((_DWORD *)sub_1C6128C08(v40, &v147) + 2);
          if (v41 >= *((_DWORD *)sub_1C6128C08(v40, &v146) + 2))
          {
            v42 = *v10;
            v146 = *v138;
            v147 = v42;
            v43 = (uint64_t *)(*a3 + 576);
            v44 = *((_DWORD *)sub_1C6128C08(v43, &v147) + 2);
            result = (uint64_t)sub_1C6128C08(v43, &v146);
            if (v44 >= *(_DWORD *)(result + 8))
            {
              v60 = v10 + 1;
              do
              {
                v9 = v60;
                if (v60 >= a2)
                  break;
                ++v60;
                v146 = *v9;
                v147 = v42;
                v61 = (uint64_t *)(*a3 + 576);
                v62 = *((_DWORD *)sub_1C6128C08(v61, &v147) + 2);
                result = (uint64_t)sub_1C6128C08(v61, &v146);
              }
              while (v62 >= *(_DWORD *)(result + 8));
            }
            else
            {
              v9 = v10;
              do
              {
                v45 = v9[1];
                ++v9;
                v146 = v45;
                v147 = v42;
                v46 = (uint64_t *)(*a3 + 576);
                v47 = *((_DWORD *)sub_1C6128C08(v46, &v147) + 2);
                result = (uint64_t)sub_1C6128C08(v46, &v146);
              }
              while (v47 >= *(_DWORD *)(result + 8));
            }
            v48 = a2;
            if (v9 < a2)
            {
              v48 = a2;
              do
              {
                v49 = *--v48;
                v146 = v49;
                v147 = v42;
                v50 = (uint64_t *)(*a3 + 576);
                v51 = *((_DWORD *)sub_1C6128C08(v50, &v147) + 2);
                result = (uint64_t)sub_1C6128C08(v50, &v146);
              }
              while (v51 < *(_DWORD *)(result + 8));
            }
            while (v9 < v48)
            {
              v52 = *v9;
              *v9 = *v48;
              *v48 = v52;
              do
              {
                v53 = v9[1];
                ++v9;
                v146 = v53;
                v147 = v42;
                v54 = (uint64_t *)(*a3 + 576);
                v55 = *((_DWORD *)sub_1C6128C08(v54, &v147) + 2);
              }
              while (v55 >= *((_DWORD *)sub_1C6128C08(v54, &v146) + 2));
              do
              {
                v56 = *--v48;
                v146 = v56;
                v147 = v42;
                v57 = (uint64_t *)(*a3 + 576);
                v58 = *((_DWORD *)sub_1C6128C08(v57, &v147) + 2);
                result = (uint64_t)sub_1C6128C08(v57, &v146);
              }
              while (v58 < *(_DWORD *)(result + 8));
            }
            v59 = v9 - 1;
            if (v9 - 1 != v145)
              *v145 = *v59;
            a5 = 0;
            *v59 = v42;
            continue;
          }
        }
        v16 = 0;
        v17 = *v10;
        do
        {
          v18 = v10[v16 + 1];
          v146 = v17;
          v147 = v18;
          v19 = (uint64_t *)(*a3 + 576);
          v20 = *((_DWORD *)sub_1C6128C08(v19, &v147) + 2);
          ++v16;
        }
        while (v20 < *((_DWORD *)sub_1C6128C08(v19, &v146) + 2));
        v21 = &v10[v16];
        v22 = a2;
        if (v16 == 1)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v36 = *--v22;
            v146 = v17;
            v147 = v36;
            v37 = (uint64_t *)(*a3 + 576);
            v38 = *((_DWORD *)sub_1C6128C08(v37, &v147) + 2);
          }
          while (v38 >= *((_DWORD *)sub_1C6128C08(v37, &v146) + 2));
        }
        else
        {
          do
          {
            v23 = *--v22;
            v146 = v17;
            v147 = v23;
            v24 = (uint64_t *)(*a3 + 576);
            v25 = *((_DWORD *)sub_1C6128C08(v24, &v147) + 2);
          }
          while (v25 >= *((_DWORD *)sub_1C6128C08(v24, &v146) + 2));
        }
        v9 = v21;
        if (v21 < v22)
        {
          v26 = v22;
          do
          {
            v27 = *v9;
            *v9 = *v26;
            *v26 = v27;
            do
            {
              v28 = v9[1];
              ++v9;
              v146 = v17;
              v147 = v28;
              v29 = (uint64_t *)(*a3 + 576);
              v30 = *((_DWORD *)sub_1C6128C08(v29, &v147) + 2);
            }
            while (v30 < *((_DWORD *)sub_1C6128C08(v29, &v146) + 2));
            do
            {
              v31 = *--v26;
              v146 = v17;
              v147 = v31;
              v32 = (uint64_t *)(*a3 + 576);
              v33 = *((_DWORD *)sub_1C6128C08(v32, &v147) + 2);
            }
            while (v33 >= *((_DWORD *)sub_1C6128C08(v32, &v146) + 2));
          }
          while (v9 < v26);
        }
        v34 = v9 - 1;
        v8 = v145;
        if (v9 - 1 != v145)
          *v145 = *v34;
        *v34 = v17;
        if (v21 < v22)
        {
LABEL_25:
          result = sub_1C5301770(v145, v9 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v35 = sub_1C5302570(v145, v9 - 1, a3);
        result = sub_1C5302570(v9, a2, a3);
        if (!(_DWORD)result)
        {
          if (v35)
            continue;
          goto LABEL_25;
        }
        a2 = v9 - 1;
        if (!v35)
          goto LABEL_2;
        return result;
    }
  }
}

_QWORD *sub_1C5302230(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_1C530279C(a1, a2, a3, a4, a6);
  v12 = *a5;
  v29 = *a4;
  v30 = v12;
  v13 = (uint64_t *)(*a6 + 576);
  v14 = *((_DWORD *)sub_1C6128C08(v13, &v30) + 2);
  result = sub_1C6128C08(v13, &v29);
  if (v14 < *((_DWORD *)result + 2))
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    v17 = *a4;
    v29 = *a3;
    v30 = v17;
    v18 = (uint64_t *)(*a6 + 576);
    v19 = *((_DWORD *)sub_1C6128C08(v18, &v30) + 2);
    result = sub_1C6128C08(v18, &v29);
    if (v19 < *((_DWORD *)result + 2))
    {
      v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      v21 = *a3;
      v29 = *a2;
      v30 = v21;
      v22 = (uint64_t *)(*a6 + 576);
      v23 = *((_DWORD *)sub_1C6128C08(v22, &v30) + 2);
      result = sub_1C6128C08(v22, &v29);
      if (v23 < *((_DWORD *)result + 2))
      {
        v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        v25 = *a2;
        v29 = *a1;
        v30 = v25;
        v26 = (uint64_t *)(*a6 + 576);
        v27 = *((_DWORD *)sub_1C6128C08(v26, &v30) + 2);
        result = sub_1C6128C08(v26, &v29);
        if (v27 < *((_DWORD *)result + 2))
        {
          v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C53023BC(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = *a2;
  v27 = *a1;
  v28 = v8;
  v9 = (uint64_t *)(*a4 + 576);
  v10 = *((_DWORD *)sub_1C6128C08(v9, &v28) + 2);
  v11 = sub_1C6128C08(v9, &v27);
  v12 = *a3;
  if (v10 >= *((_DWORD *)v11 + 2))
  {
    v27 = *a2;
    v28 = v12;
    v17 = (uint64_t *)(*a4 + 576);
    v18 = *((_DWORD *)sub_1C6128C08(v17, &v28) + 2);
    result = sub_1C6128C08(v17, &v27);
    if (v18 < *((_DWORD *)result + 2))
    {
      v22 = *a2;
      *a2 = *a3;
      *a3 = v22;
      v23 = *a2;
      v27 = *a1;
      v28 = v23;
      v24 = (uint64_t *)(*a4 + 576);
      v25 = *((_DWORD *)sub_1C6128C08(v24, &v28) + 2);
      result = sub_1C6128C08(v24, &v27);
      if (v25 < *((_DWORD *)result + 2))
      {
        v26 = *a1;
        *a1 = *a2;
        *a2 = v26;
      }
    }
  }
  else
  {
    v27 = *a2;
    v28 = v12;
    v13 = (uint64_t *)(*a4 + 576);
    v14 = *((_DWORD *)sub_1C6128C08(v13, &v28) + 2);
    result = sub_1C6128C08(v13, &v27);
    v16 = *a1;
    if (v14 < *((_DWORD *)result + 2))
    {
      *a1 = *a3;
LABEL_4:
      *a3 = v16;
      return result;
    }
    *a1 = *a2;
    *a2 = v16;
    v19 = *a3;
    v27 = v16;
    v28 = v19;
    v20 = (uint64_t *)(*a4 + 576);
    v21 = *((_DWORD *)sub_1C6128C08(v20, &v28) + 2);
    result = sub_1C6128C08(v20, &v27);
    if (v21 < *((_DWORD *)result + 2))
    {
      v16 = *a2;
      *a2 = *a3;
      goto LABEL_4;
    }
  }
  return result;
}

BOOL sub_1C5302570(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v20 = *(a2 - 1);
      v24 = *a1;
      v25 = v20;
      v21 = (uint64_t *)(*a3 + 576);
      v22 = *((_DWORD *)sub_1C6128C08(v21, &v25) + 2);
      if (v22 < *((_DWORD *)sub_1C6128C08(v21, &v24) + 2))
      {
        v23 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v23;
      }
      return 1;
    case 3:
      sub_1C53023BC(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C530279C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C5302230(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C53023BC(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v24 = *v8;
    v25 = v12;
    v13 = (uint64_t *)(*a3 + 576);
    v14 = *((_DWORD *)sub_1C6128C08(v13, &v25) + 2);
    if (v14 < *((_DWORD *)sub_1C6128C08(v13, &v24) + 2))
    {
      v15 = *v9;
      v16 = v10;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v16 + 24) = *(uint64_t *)((char *)a1 + v16 + 16);
        if (v16 == -16)
          break;
        v24 = *(uint64_t *)((char *)a1 + v16 + 8);
        v25 = v15;
        v17 = (uint64_t *)(*a3 + 576);
        v18 = *((_DWORD *)sub_1C6128C08(v17, &v25) + 2);
        v16 -= 8;
        if (v18 >= *((_DWORD *)sub_1C6128C08(v17, &v24) + 2))
        {
          v19 = (uint64_t *)((char *)a1 + v16 + 24);
          goto LABEL_11;
        }
      }
      v19 = a1;
LABEL_11:
      *v19 = v15;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    result = 1;
    if (++v9 == a2)
      return result;
  }
}

_QWORD *sub_1C530279C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1C53023BC(a1, a2, a3, a5);
  v10 = *a4;
  v23 = *a3;
  v24 = v10;
  v11 = (uint64_t *)(*a5 + 576);
  v12 = *((_DWORD *)sub_1C6128C08(v11, &v24) + 2);
  result = sub_1C6128C08(v11, &v23);
  if (v12 < *((_DWORD *)result + 2))
  {
    v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    v15 = *a3;
    v23 = *a2;
    v24 = v15;
    v16 = (uint64_t *)(*a5 + 576);
    v17 = *((_DWORD *)sub_1C6128C08(v16, &v24) + 2);
    result = sub_1C6128C08(v16, &v23);
    if (v17 < *((_DWORD *)result + 2))
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v19 = *a2;
      v23 = *a1;
      v24 = v19;
      v20 = (uint64_t *)(*a5 + 576);
      v21 = *((_DWORD *)sub_1C6128C08(v20, &v24) + 2);
      result = sub_1C6128C08(v20, &v23);
      if (v21 < *((_DWORD *)result + 2))
      {
        v22 = *a1;
        *a1 = *a2;
        *a2 = v22;
      }
    }
  }
  return result;
}

uint64_t sub_1C53028D8(uint64_t result, uint64_t *a2, _QWORD *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  unsigned int v33;
  uint64_t *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t *v46;
  unsigned int v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t *v57;
  unsigned int v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t *v61;
  unsigned int v62;
  uint64_t *v63;
  BOOL v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  unsigned int v76;
  uint64_t *v77;
  int64_t v78;
  int64_t v79;
  int64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  unsigned int v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t *v89;
  unsigned int v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  unsigned int v98;
  BOOL v99;
  uint64_t v100;
  uint64_t *v101;
  unsigned int v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t *v121;
  unsigned int v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t *v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t *v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;

  v8 = (uint64_t *)result;
LABEL_2:
  v138 = a2 - 1;
  v9 = v8;
  while (2)
  {
    v10 = v9;
    v11 = (char *)a2 - (char *)v9;
    v12 = a2 - v9;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v134 = *(a2 - 1);
        v146 = *v9;
        v147 = v134;
        v135 = (uint64_t *)(*a3 + 576);
        v136 = *((_DWORD *)sub_1C6128C08(v135, &v147) + 2);
        result = (uint64_t)sub_1C6128C08(v135, &v146);
        if (v136 < *(_DWORD *)(result + 8))
        {
          v137 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v137;
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_1C53023BC(v9, v9 + 1, v138, a3);
      case 4uLL:
        return (uint64_t)sub_1C530279C(v9, v9 + 1, v9 + 2, v138, a3);
      case 5uLL:
        return (uint64_t)sub_1C5302230(v9, v9 + 1, v9 + 2, v9 + 3, v138, a3);
      default:
        v145 = v9;
        if (v11 <= 191)
        {
          v63 = v9 + 1;
          v65 = v9 == a2 || v63 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v65)
            {
              v66 = 0;
              v67 = v9;
              do
              {
                v69 = *v67;
                v68 = v67[1];
                v67 = v63;
                v146 = v69;
                v147 = v68;
                v70 = (uint64_t *)(*a3 + 576);
                v71 = *((_DWORD *)sub_1C6128C08(v70, &v147) + 2);
                result = (uint64_t)sub_1C6128C08(v70, &v146);
                if (v71 < *(_DWORD *)(result + 8))
                {
                  v72 = *v67;
                  v73 = v66;
                  while (1)
                  {
                    *(uint64_t *)((char *)v10 + v73 + 8) = *(uint64_t *)((char *)v10 + v73);
                    if (!v73)
                      break;
                    v146 = *(uint64_t *)((char *)v10 + v73 - 8);
                    v147 = v72;
                    v74 = (uint64_t *)(*a3 + 576);
                    v75 = a2;
                    v76 = *((_DWORD *)sub_1C6128C08(v74, &v147) + 2);
                    result = (uint64_t)sub_1C6128C08(v74, &v146);
                    v73 -= 8;
                    v99 = v76 >= *(_DWORD *)(result + 8);
                    a2 = v75;
                    v10 = v9;
                    if (v99)
                    {
                      v77 = (uint64_t *)((char *)v9 + v73 + 8);
                      goto LABEL_71;
                    }
                  }
                  v77 = v10;
LABEL_71:
                  *v77 = v72;
                }
                v63 = v67 + 1;
                v66 += 8;
              }
              while (v67 + 1 != a2);
            }
          }
          else if (!v65)
          {
            do
            {
              v125 = *v10;
              v124 = v10[1];
              v10 = v63;
              v146 = v125;
              v147 = v124;
              v126 = (uint64_t *)(*a3 + 576);
              v127 = *((_DWORD *)sub_1C6128C08(v126, &v147) + 2);
              result = (uint64_t)sub_1C6128C08(v126, &v146);
              if (v127 < *(_DWORD *)(result + 8))
              {
                v128 = *v10;
                v129 = v10;
                do
                {
                  v130 = v129;
                  v131 = *--v129;
                  *v130 = v131;
                  v146 = *(v130 - 2);
                  v147 = v128;
                  v132 = (uint64_t *)(*a3 + 576);
                  v133 = *((_DWORD *)sub_1C6128C08(v132, &v147) + 2);
                  result = (uint64_t)sub_1C6128C08(v132, &v146);
                }
                while (v133 < *(_DWORD *)(result + 8));
                *v129 = v128;
              }
              v63 = v10 + 1;
            }
            while (v10 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v78 = (v12 - 2) >> 1;
            v79 = v78;
            v140 = a2;
            do
            {
              v80 = v79;
              if (v78 >= v79)
              {
                v81 = (2 * v79) | 1;
                v82 = &v145[v81];
                if (2 * v79 + 2 < (uint64_t)v12)
                {
                  v83 = *v82;
                  v146 = v82[1];
                  v147 = v83;
                  v84 = (uint64_t *)(*a3 + 576);
                  v85 = *((_DWORD *)sub_1C6128C08(v84, &v147) + 2);
                  if (v85 < *((_DWORD *)sub_1C6128C08(v84, &v146) + 2))
                  {
                    ++v82;
                    v81 = 2 * v80 + 2;
                  }
                }
                v86 = &v145[v80];
                v87 = v82;
                v88 = *v82;
                v146 = *v86;
                v147 = v88;
                v89 = (uint64_t *)(*a3 + 576);
                v90 = *((_DWORD *)sub_1C6128C08(v89, &v147) + 2);
                result = (uint64_t)sub_1C6128C08(v89, &v146);
                v99 = v90 >= *(_DWORD *)(result + 8);
                a2 = v140;
                if (v99)
                {
                  v143 = *v86;
                  do
                  {
                    v91 = v87;
                    *v86 = *v87;
                    if (v78 < v81)
                      break;
                    v92 = 2 * v81;
                    v81 = (2 * v81) | 1;
                    v87 = &v145[v81];
                    v93 = v92 + 2;
                    if (v92 + 2 < (uint64_t)v12)
                    {
                      v94 = *v87;
                      v95 = &v145[v81];
                      v96 = v87[1];
                      ++v87;
                      v146 = v96;
                      v147 = v94;
                      v97 = (uint64_t *)(*a3 + 576);
                      v139 = v81;
                      v98 = *((_DWORD *)sub_1C6128C08(v97, &v147) + 2);
                      v99 = v98 >= *((_DWORD *)sub_1C6128C08(v97, &v146) + 2);
                      v81 = v139;
                      if (v99)
                        v87 = v95;
                      if (!v99)
                        v81 = v93;
                    }
                    v100 = *v87;
                    v146 = v143;
                    v147 = v100;
                    v101 = (uint64_t *)(*a3 + 576);
                    v102 = *((_DWORD *)sub_1C6128C08(v101, &v147) + 2);
                    result = (uint64_t)sub_1C6128C08(v101, &v146);
                    v86 = v91;
                    v99 = v102 >= *(_DWORD *)(result + 8);
                    a2 = v140;
                  }
                  while (v99);
                  *v91 = v143;
                }
              }
              v79 = v80 - 1;
            }
            while (v80);
            v103 = v145;
            do
            {
              v104 = 0;
              v141 = a2;
              v144 = *v103;
              v105 = v103;
              do
              {
                v106 = &v105[v104 + 1];
                v107 = (2 * v104) | 1;
                v108 = 2 * v104 + 2;
                if (v108 < (uint64_t)v12)
                {
                  v109 = *v106;
                  v146 = v106[1];
                  v147 = v109;
                  v110 = (uint64_t *)(*a3 + 576);
                  v111 = *((_DWORD *)sub_1C6128C08(v110, &v147) + 2);
                  result = (uint64_t)sub_1C6128C08(v110, &v146);
                  v103 = v145;
                  if (v111 < *(_DWORD *)(result + 8))
                  {
                    ++v106;
                    v107 = v108;
                  }
                }
                *v105 = *v106;
                v105 = v106;
                v104 = v107;
              }
              while (v107 <= (uint64_t)((v12 - 2) >> 1));
              a2 = v141 - 1;
              if (v106 == v141 - 1)
              {
                *v106 = v144;
              }
              else
              {
                *v106 = *a2;
                *a2 = v144;
                v112 = (char *)v106 - (char *)v103 + 8;
                if (v112 >= 9)
                {
                  v113 = (((unint64_t)v112 >> 3) - 2) >> 1;
                  v114 = &v103[v113];
                  v115 = *v114;
                  v146 = *v106;
                  v147 = v115;
                  v116 = (uint64_t *)(*a3 + 576);
                  v117 = *((_DWORD *)sub_1C6128C08(v116, &v147) + 2);
                  result = (uint64_t)sub_1C6128C08(v116, &v146);
                  v103 = v145;
                  if (v117 < *(_DWORD *)(result + 8))
                  {
                    v118 = *v106;
                    do
                    {
                      v119 = v114;
                      *v106 = *v114;
                      if (!v113)
                        break;
                      v113 = (v113 - 1) >> 1;
                      v114 = &v103[v113];
                      v120 = *v114;
                      v146 = v118;
                      v147 = v120;
                      v121 = (uint64_t *)(*a3 + 576);
                      v122 = *((_DWORD *)sub_1C6128C08(v121, &v147) + 2);
                      result = (uint64_t)sub_1C6128C08(v121, &v146);
                      v106 = v119;
                      v103 = v145;
                    }
                    while (v122 < *(_DWORD *)(result + 8));
                    *v119 = v118;
                  }
                }
              }
            }
            while ((uint64_t)v12-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v9[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1C53023BC(&v10[v12 >> 1], v10, v138, a3);
        }
        else
        {
          sub_1C53023BC(v10, &v10[v12 >> 1], v138, a3);
          sub_1C53023BC(v10 + 1, v14 - 1, a2 - 2, a3);
          sub_1C53023BC(v10 + 2, &v10[v13 + 1], a2 - 3, a3);
          sub_1C53023BC(v14 - 1, &v10[v12 >> 1], &v10[v13 + 1], a3);
          v15 = *v10;
          *v10 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v39 = *(v10 - 1);
          v146 = *v10;
          v147 = v39;
          v40 = (uint64_t *)(*a3 + 576);
          v41 = *((_DWORD *)sub_1C6128C08(v40, &v147) + 2);
          if (v41 >= *((_DWORD *)sub_1C6128C08(v40, &v146) + 2))
          {
            v42 = *v10;
            v146 = *v138;
            v147 = v42;
            v43 = (uint64_t *)(*a3 + 576);
            v44 = *((_DWORD *)sub_1C6128C08(v43, &v147) + 2);
            result = (uint64_t)sub_1C6128C08(v43, &v146);
            if (v44 >= *(_DWORD *)(result + 8))
            {
              v60 = v10 + 1;
              do
              {
                v9 = v60;
                if (v60 >= a2)
                  break;
                ++v60;
                v146 = *v9;
                v147 = v42;
                v61 = (uint64_t *)(*a3 + 576);
                v62 = *((_DWORD *)sub_1C6128C08(v61, &v147) + 2);
                result = (uint64_t)sub_1C6128C08(v61, &v146);
              }
              while (v62 >= *(_DWORD *)(result + 8));
            }
            else
            {
              v9 = v10;
              do
              {
                v45 = v9[1];
                ++v9;
                v146 = v45;
                v147 = v42;
                v46 = (uint64_t *)(*a3 + 576);
                v47 = *((_DWORD *)sub_1C6128C08(v46, &v147) + 2);
                result = (uint64_t)sub_1C6128C08(v46, &v146);
              }
              while (v47 >= *(_DWORD *)(result + 8));
            }
            v48 = a2;
            if (v9 < a2)
            {
              v48 = a2;
              do
              {
                v49 = *--v48;
                v146 = v49;
                v147 = v42;
                v50 = (uint64_t *)(*a3 + 576);
                v51 = *((_DWORD *)sub_1C6128C08(v50, &v147) + 2);
                result = (uint64_t)sub_1C6128C08(v50, &v146);
              }
              while (v51 < *(_DWORD *)(result + 8));
            }
            while (v9 < v48)
            {
              v52 = *v9;
              *v9 = *v48;
              *v48 = v52;
              do
              {
                v53 = v9[1];
                ++v9;
                v146 = v53;
                v147 = v42;
                v54 = (uint64_t *)(*a3 + 576);
                v55 = *((_DWORD *)sub_1C6128C08(v54, &v147) + 2);
              }
              while (v55 >= *((_DWORD *)sub_1C6128C08(v54, &v146) + 2));
              do
              {
                v56 = *--v48;
                v146 = v56;
                v147 = v42;
                v57 = (uint64_t *)(*a3 + 576);
                v58 = *((_DWORD *)sub_1C6128C08(v57, &v147) + 2);
                result = (uint64_t)sub_1C6128C08(v57, &v146);
              }
              while (v58 < *(_DWORD *)(result + 8));
            }
            v59 = v9 - 1;
            if (v9 - 1 != v145)
              *v145 = *v59;
            a5 = 0;
            *v59 = v42;
            continue;
          }
        }
        v16 = 0;
        v17 = *v10;
        do
        {
          v18 = v10[v16 + 1];
          v146 = v17;
          v147 = v18;
          v19 = (uint64_t *)(*a3 + 576);
          v20 = *((_DWORD *)sub_1C6128C08(v19, &v147) + 2);
          ++v16;
        }
        while (v20 < *((_DWORD *)sub_1C6128C08(v19, &v146) + 2));
        v21 = &v10[v16];
        v22 = a2;
        if (v16 == 1)
        {
          v22 = a2;
          do
          {
            if (v21 >= v22)
              break;
            v36 = *--v22;
            v146 = v17;
            v147 = v36;
            v37 = (uint64_t *)(*a3 + 576);
            v38 = *((_DWORD *)sub_1C6128C08(v37, &v147) + 2);
          }
          while (v38 >= *((_DWORD *)sub_1C6128C08(v37, &v146) + 2));
        }
        else
        {
          do
          {
            v23 = *--v22;
            v146 = v17;
            v147 = v23;
            v24 = (uint64_t *)(*a3 + 576);
            v25 = *((_DWORD *)sub_1C6128C08(v24, &v147) + 2);
          }
          while (v25 >= *((_DWORD *)sub_1C6128C08(v24, &v146) + 2));
        }
        v9 = v21;
        if (v21 < v22)
        {
          v26 = v22;
          do
          {
            v27 = *v9;
            *v9 = *v26;
            *v26 = v27;
            do
            {
              v28 = v9[1];
              ++v9;
              v146 = v17;
              v147 = v28;
              v29 = (uint64_t *)(*a3 + 576);
              v30 = *((_DWORD *)sub_1C6128C08(v29, &v147) + 2);
            }
            while (v30 < *((_DWORD *)sub_1C6128C08(v29, &v146) + 2));
            do
            {
              v31 = *--v26;
              v146 = v17;
              v147 = v31;
              v32 = (uint64_t *)(*a3 + 576);
              v33 = *((_DWORD *)sub_1C6128C08(v32, &v147) + 2);
            }
            while (v33 >= *((_DWORD *)sub_1C6128C08(v32, &v146) + 2));
          }
          while (v9 < v26);
        }
        v34 = v9 - 1;
        v8 = v145;
        if (v9 - 1 != v145)
          *v145 = *v34;
        *v34 = v17;
        if (v21 < v22)
        {
LABEL_25:
          result = sub_1C53028D8(v145, v9 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v35 = sub_1C5303398(v145, v9 - 1, a3);
        result = sub_1C5303398(v9, a2, a3);
        if (!(_DWORD)result)
        {
          if (v35)
            continue;
          goto LABEL_25;
        }
        a2 = v9 - 1;
        if (!v35)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C5303398(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v20 = *(a2 - 1);
      v24 = *a1;
      v25 = v20;
      v21 = (uint64_t *)(*a3 + 576);
      v22 = *((_DWORD *)sub_1C6128C08(v21, &v25) + 2);
      if (v22 < *((_DWORD *)sub_1C6128C08(v21, &v24) + 2))
      {
        v23 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v23;
      }
      return 1;
    case 3:
      sub_1C53023BC(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C530279C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C5302230(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C53023BC(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v24 = *v8;
    v25 = v12;
    v13 = (uint64_t *)(*a3 + 576);
    v14 = *((_DWORD *)sub_1C6128C08(v13, &v25) + 2);
    if (v14 < *((_DWORD *)sub_1C6128C08(v13, &v24) + 2))
    {
      v15 = *v9;
      v16 = v10;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v16 + 24) = *(uint64_t *)((char *)a1 + v16 + 16);
        if (v16 == -16)
          break;
        v24 = *(uint64_t *)((char *)a1 + v16 + 8);
        v25 = v15;
        v17 = (uint64_t *)(*a3 + 576);
        v18 = *((_DWORD *)sub_1C6128C08(v17, &v25) + 2);
        v16 -= 8;
        if (v18 >= *((_DWORD *)sub_1C6128C08(v17, &v24) + 2))
        {
          v19 = (uint64_t *)((char *)a1 + v16 + 24);
          goto LABEL_11;
        }
      }
      v19 = a1;
LABEL_11:
      *v19 = v15;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    result = 1;
    if (++v9 == a2)
      return result;
  }
}

unint64_t sub_1C53035C4(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 80 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 80);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 80);
    }
  }
  return v2;
}

unint64_t sub_1C530363C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 120 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 120);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 120);
    }
  }
  return v2;
}

void sub_1C53036B4(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unsigned int *v8;
  unint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  int v15;
  __int128 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  unsigned int v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int *k;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int *v30;
  __int128 v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unint64_t j;
  unsigned int v39;
  uint64_t v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  __int128 v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  int64_t v68;
  int64_t v69;
  int64_t v70;
  uint64_t v71;
  unint64_t v72;
  unsigned int v73;
  unint64_t v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unsigned int v108;
  unsigned int v109;
  unint64_t v110;
  unint64_t m;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  int v118;
  unint64_t n;
  int v120;

double sub_1C53041C0(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  unsigned int v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;

  v3 = *a2;
  v4 = *a1;
  if (*a2 >= *a1 && (v4 < v3 || a2[1] >= a1[1]))
  {
    v7 = *a3;
    if (*a3 >= v3)
    {
      if (v3 < v7)
        return *(double *)&v6;
      v8 = a2[1];
      if (a3[1] >= v8)
        return *(double *)&v6;
    }
    else
    {
      v8 = a2[1];
    }
    v9 = a2[4];
    *a2 = v7;
    a2[1] = a3[1];
    *(_QWORD *)&v6 = *((_QWORD *)a2 + 1);
    a2[2] = a3[2];
    *(_QWORD *)(a2 + 3) = *(_QWORD *)(a3 + 3);
    *a3 = v3;
    a3[1] = v8;
    *((_QWORD *)a3 + 1) = v6;
    a3[4] = v9;
    v10 = *a2;
    v11 = *a1;
    if (*a2 >= *a1)
    {
      if (v11 < v10)
        return *(double *)&v6;
      v12 = a1[1];
      if (a2[1] >= v12)
        return *(double *)&v6;
    }
    else
    {
      v12 = a1[1];
    }
    v18 = a1[4];
    *a1 = v10;
    a1[1] = a2[1];
    *(_QWORD *)&v6 = *((_QWORD *)a1 + 1);
    a1[2] = a2[2];
    *(_QWORD *)(a1 + 3) = *(_QWORD *)(a2 + 3);
    *a2 = v11;
    a2[1] = v12;
    *((_QWORD *)a2 + 1) = v6;
    a2[4] = v18;
    return *(double *)&v6;
  }
  v5 = *a3;
  if (*a3 < v3 || v3 >= v5 && a3[1] < a2[1])
  {
    *a1 = v5;
    v6 = *(_OWORD *)(a1 + 1);
    a1[1] = a3[1];
    a1[2] = a3[2];
    *(_QWORD *)(a1 + 3) = *(_QWORD *)(a3 + 3);
    *a3 = v4;
    *(_OWORD *)(a3 + 1) = v6;
  }
  else
  {
    v13 = a1[1];
    v14 = a1[2];
    v15 = a1[3];
    v16 = a1[4];
    *a1 = v3;
    a1[1] = a2[1];
    a1[2] = a2[2];
    *(_QWORD *)&v6 = *(_QWORD *)(a2 + 3);
    *(_QWORD *)(a1 + 3) = v6;
    *a2 = v4;
    a2[1] = v13;
    a2[2] = v14;
    a2[3] = v15;
    a2[4] = v16;
    v17 = *a3;
    if (*a3 < v4 || v4 >= v17 && a3[1] < v13)
    {
      *a2 = v17;
      a2[1] = a3[1];
      a2[2] = a3[2];
      *(_QWORD *)&v6 = *(_QWORD *)(a3 + 3);
      *(_QWORD *)(a2 + 3) = v6;
      *a3 = v4;
      a3[1] = v13;
      a3[2] = v14;
      a3[3] = v15;
      a3[4] = v16;
    }
  }
  return *(double *)&v6;
}

BOOL sub_1C5304374(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 2);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_DWORD *)(a2 - 20);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        v8 = *(_DWORD *)(a1 + 4);
LABEL_30:
        v24 = *(_DWORD *)(a1 + 16);
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 - 16);
        v25 = *(_QWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 12);
        *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 20) = v7;
        *(_DWORD *)(a2 - 16) = v8;
        *(_QWORD *)(a2 - 12) = v25;
        *(_DWORD *)(a2 - 4) = v24;
        return result;
      }
      if (v7 >= v6)
      {
        v8 = *(_DWORD *)(a1 + 4);
        if (*(_DWORD *)(a2 - 16) < v8)
          goto LABEL_30;
      }
      return result;
    case 3uLL:
      sub_1C53041C0((unsigned int *)a1, (unsigned int *)(a1 + 20), (unsigned int *)(a2 - 20));
      return 1;
    case 4uLL:
      sub_1C53045C4(a1, a1 + 20, a1 + 40, a2 - 20);
      return 1;
    case 5uLL:
      sub_1C5304718(a1, a1 + 20, a1 + 40, a1 + 60, (unsigned int *)(a2 - 20));
      return 1;
    default:
      v9 = a1 + 40;
      sub_1C53041C0((unsigned int *)a1, (unsigned int *)(a1 + 20), (unsigned int *)(a1 + 40));
      v10 = a1 + 60;
      if (a1 + 60 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
LABEL_6:
  v13 = *(_DWORD *)v10;
  v14 = *(_DWORD *)v9;
  if (*(_DWORD *)v10 >= *(_DWORD *)v9)
  {
    if (v14 < v13)
      goto LABEL_21;
    v15 = *(_DWORD *)(v10 + 4);
    if (v15 >= *(_DWORD *)(v9 + 4))
      goto LABEL_21;
  }
  else
  {
    v15 = *(_DWORD *)(v10 + 4);
  }
  v16 = *(_QWORD *)(v10 + 8);
  v17 = *(_DWORD *)(v10 + 16);
  *(_DWORD *)v10 = v14;
  *(_DWORD *)(v10 + 4) = *(_DWORD *)(v9 + 4);
  *(_DWORD *)(v10 + 8) = *(_DWORD *)(v9 + 8);
  *(_QWORD *)(v10 + 12) = *(_QWORD *)(v9 + 12);
  v18 = a1;
  if (v9 == a1)
    goto LABEL_20;
  v19 = v11;
  while (1)
  {
    v20 = a1 + v19;
    v21 = *(_DWORD *)(a1 + v19 + 20);
    if (v13 >= v21)
    {
      if (v21 < v13)
      {
        v18 = a1 + v19 + 40;
        goto LABEL_20;
      }
      v22 = *(_DWORD *)(a1 + v19 + 24);
      if (v15 >= v22)
      {
        v18 = v9;
LABEL_20:
        *(_DWORD *)v18 = v13;
        *(_DWORD *)(v18 + 4) = v15;
        *(_QWORD *)(v18 + 8) = v16;
        *(_DWORD *)(v18 + 16) = v17;
        if (++v12 == 8)
          return v10 + 20 == a2;
LABEL_21:
        v9 = v10;
        v11 += 20;
        v10 += 20;
        if (v10 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *(_DWORD *)(v20 + 24);
    }
    v9 -= 20;
    *(_DWORD *)(v20 + 40) = v21;
    v23 = a1 + v19;
    *(_DWORD *)(v23 + 44) = v22;
    *(_QWORD *)(v23 + 48) = *(_QWORD *)(a1 + v19 + 28);
    *(_DWORD *)(v23 + 56) = *(_DWORD *)(a1 + v19 + 36);
    v19 -= 20;
    if (v19 == -40)
    {
      v18 = a1;
      goto LABEL_20;
    }
  }
}

double sub_1C53045C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  result = sub_1C53041C0((unsigned int *)a1, (unsigned int *)a2, (unsigned int *)a3);
  v9 = *(_DWORD *)a4;
  v10 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v10 < v9)
      return result;
    v11 = *(_DWORD *)(a3 + 4);
    if (*(_DWORD *)(a4 + 4) >= v11)
      return result;
  }
  else
  {
    v11 = *(_DWORD *)(a3 + 4);
  }
  v12 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)a3 = v9;
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
  result = *(double *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
  *(_QWORD *)(a3 + 12) = *(_QWORD *)(a4 + 12);
  *(_DWORD *)a4 = v10;
  *(_DWORD *)(a4 + 4) = v11;
  *(double *)(a4 + 8) = result;
  *(_DWORD *)(a4 + 16) = v12;
  v13 = *(_DWORD *)a3;
  v14 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v14 < v13)
      return result;
    v15 = *(_DWORD *)(a2 + 4);
    if (*(_DWORD *)(a3 + 4) >= v15)
      return result;
  }
  else
  {
    v15 = *(_DWORD *)(a2 + 4);
  }
  v16 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)a2 = v13;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
  result = *(double *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 12) = *(_QWORD *)(a3 + 12);
  *(_DWORD *)a3 = v14;
  *(_DWORD *)(a3 + 4) = v15;
  *(double *)(a3 + 8) = result;
  *(_DWORD *)(a3 + 16) = v16;
  v17 = *(_DWORD *)a2;
  v18 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    v19 = *(_DWORD *)(a1 + 4);
LABEL_15:
    v20 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)a1 = v17;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    result = *(double *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
    *(_DWORD *)a2 = v18;
    *(_DWORD *)(a2 + 4) = v19;
    *(double *)(a2 + 8) = result;
    *(_DWORD *)(a2 + 16) = v20;
    return result;
  }
  if (v18 >= v17)
  {
    v19 = *(_DWORD *)(a1 + 4);
    if (*(_DWORD *)(a2 + 4) < v19)
      goto LABEL_15;
  }
  return result;
}

void sub_1C5304718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  uint64_t v29;

  sub_1C53045C4(a1, a2, a3, a4);
  v10 = *a5;
  v11 = *(_DWORD *)a4;
  if (*a5 >= *(_DWORD *)a4)
  {
    if (v11 < v10)
      return;
    v12 = *(_DWORD *)(a4 + 4);
    if (a5[1] >= v12)
      return;
  }
  else
  {
    v12 = *(_DWORD *)(a4 + 4);
  }
  v13 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)a4 = v10;
  *(_DWORD *)(a4 + 4) = a5[1];
  v14 = *(_QWORD *)(a4 + 8);
  *(_DWORD *)(a4 + 8) = a5[2];
  *(_QWORD *)(a4 + 12) = *(_QWORD *)(a5 + 3);
  *a5 = v11;
  a5[1] = v12;
  *((_QWORD *)a5 + 1) = v14;
  a5[4] = v13;
  v15 = *(_DWORD *)a4;
  v16 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 >= *(_DWORD *)a3)
  {
    if (v16 < v15)
      return;
    v17 = *(_DWORD *)(a3 + 4);
    if (*(_DWORD *)(a4 + 4) >= v17)
      return;
  }
  else
  {
    v17 = *(_DWORD *)(a3 + 4);
  }
  v18 = *(_DWORD *)(a3 + 16);
  *(_DWORD *)a3 = v15;
  *(_DWORD *)(a3 + 4) = *(_DWORD *)(a4 + 4);
  v19 = *(_QWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
  *(_QWORD *)(a3 + 12) = *(_QWORD *)(a4 + 12);
  *(_DWORD *)a4 = v16;
  *(_DWORD *)(a4 + 4) = v17;
  *(_QWORD *)(a4 + 8) = v19;
  *(_DWORD *)(a4 + 16) = v18;
  v20 = *(_DWORD *)a3;
  v21 = *(_DWORD *)a2;
  if (*(_DWORD *)a3 >= *(_DWORD *)a2)
  {
    if (v21 < v20)
      return;
    v22 = *(_DWORD *)(a2 + 4);
    if (*(_DWORD *)(a3 + 4) >= v22)
      return;
  }
  else
  {
    v22 = *(_DWORD *)(a2 + 4);
  }
  v23 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)a2 = v20;
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
  v24 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 12) = *(_QWORD *)(a3 + 12);
  *(_DWORD *)a3 = v21;
  *(_DWORD *)(a3 + 4) = v22;
  *(_QWORD *)(a3 + 8) = v24;
  *(_DWORD *)(a3 + 16) = v23;
  v25 = *(_DWORD *)a2;
  v26 = *(_DWORD *)a1;
  if (*(_DWORD *)a2 < *(_DWORD *)a1)
  {
    v27 = *(_DWORD *)(a1 + 4);
LABEL_9:
    v28 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)a1 = v25;
    *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
    v29 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
    *(_DWORD *)a2 = v26;
    *(_DWORD *)(a2 + 4) = v27;
    *(_QWORD *)(a2 + 8) = v29;
    *(_DWORD *)(a2 + 16) = v28;
    return;
  }
  if (v26 >= v25)
  {
    v27 = *(_DWORD *)(a1 + 4);
    if (*(_DWORD *)(a2 + 4) < v27)
      goto LABEL_9;
  }
}

uint64_t sub_1C53048D8(uint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(unsigned int *)(result + 8);
  if (v3 + a2 > (unint64_t)*(unsigned int *)(result + 12))
  {
    v8 = result;
    v7 = a2;
    v6 = a3;
    llvm::SmallVectorBase<unsigned int>::grow_pod(result, result + 16, v3 + a2, 4);
    a3 = v6;
    a2 = v7;
    result = v8;
    v3 = *(unsigned int *)(v8 + 8);
  }
  if (a2)
  {
    v4 = (_DWORD *)(*(_QWORD *)result + 4 * v3);
    v5 = a2;
    do
    {
      *v4++ = a3;
      --v5;
    }
    while (v5);
    LODWORD(v3) = *(_DWORD *)(result + 8);
  }
  *(_DWORD *)(result + 8) = v3 + a2;
  return result;
}

unsigned int *sub_1C530495C(unsigned int *result, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int v70;
  BOOL v71;
  unint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v93;
  uint64_t v94;
  unsigned int v95;
  unsigned int v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;

  v7 = (uint64_t)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v39 = *(_DWORD *)(a2 - 16);
        v40 = *(_DWORD *)v8;
        if (v39 < *(_DWORD *)v8)
        {
          *(_DWORD *)v8 = v39;
          *(_DWORD *)(a2 - 16) = v40;
          v41 = *(_QWORD *)(v8 + 8);
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v41;
        }
        return result;
      case 3:
        return sub_1C53050C8((unsigned int *)v8, (unsigned int *)(v8 + 16), (unsigned int *)(a2 - 16));
      case 4:
        return sub_1C5305394(v8, v8 + 16, v8 + 32, a2 - 16);
      case 5:
        result = sub_1C5305394(v8, v8 + 16, v8 + 32, v8 + 48);
        v42 = *(_DWORD *)(a2 - 16);
        v43 = *(_DWORD *)(v8 + 48);
        if (v42 < v43)
        {
          *(_DWORD *)(v8 + 48) = v42;
          *(_DWORD *)(a2 - 16) = v43;
          v44 = *(_QWORD *)(v8 + 56);
          *(_QWORD *)(v8 + 56) = *(_QWORD *)(a2 - 8);
          *(_QWORD *)(a2 - 8) = v44;
          v45 = *(_DWORD *)(v8 + 48);
          v46 = *(_DWORD *)(v8 + 32);
          if (v45 < v46)
          {
            *(_DWORD *)(v8 + 32) = v45;
            *(_DWORD *)(v8 + 48) = v46;
            v47 = *(_QWORD *)(v8 + 40);
            v48 = *(_QWORD *)(v8 + 56);
            *(_QWORD *)(v8 + 40) = v48;
            *(_QWORD *)(v8 + 56) = v47;
            v49 = *(_DWORD *)(v8 + 16);
            if (v45 < v49)
            {
              *(_DWORD *)(v8 + 16) = v45;
              *(_DWORD *)(v8 + 32) = v49;
              v50 = *(_QWORD *)(v8 + 24);
              *(_QWORD *)(v8 + 24) = v48;
              *(_QWORD *)(v8 + 40) = v50;
              v51 = *(_DWORD *)v8;
              if (v45 < *(_DWORD *)v8)
              {
                *(_DWORD *)v8 = v45;
                *(_DWORD *)(v8 + 16) = v51;
                v52 = *(_QWORD *)(v8 + 8);
                *(_QWORD *)(v8 + 8) = v48;
                *(_QWORD *)(v8 + 24) = v52;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v53 = v8 + 16;
          v55 = v8 == a2 || v53 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v55)
            {
              v56 = 0;
              v57 = v8;
              do
              {
                v58 = v53;
                v59 = *(_DWORD *)(v57 + 16);
                v60 = *(_DWORD *)v57;
                if (v59 < *(_DWORD *)v57)
                {
                  v61 = *(_QWORD *)(v57 + 24);
                  v62 = v56;
                  while (1)
                  {
                    v63 = v8 + v62;
                    *(_DWORD *)(v63 + 16) = v60;
                    *(_QWORD *)(v63 + 24) = *(_QWORD *)(v8 + v62 + 8);
                    if (!v62)
                      break;
                    v60 = *(_DWORD *)(v63 - 16);
                    v62 -= 16;
                    if (v59 >= v60)
                    {
                      v64 = v8 + v62 + 16;
                      goto LABEL_79;
                    }
                  }
                  v64 = v8;
LABEL_79:
                  *(_DWORD *)v64 = v59;
                  *(_QWORD *)(v64 + 8) = v61;
                }
                v53 = v58 + 16;
                v56 += 16;
                v57 = v58;
              }
              while (v58 + 16 != a2);
            }
          }
          else if (!v55)
          {
            v93 = (_QWORD *)(v8 + 24);
            do
            {
              v94 = v53;
              v95 = *(_DWORD *)(v7 + 16);
              v96 = *(_DWORD *)v7;
              if (v95 < *(_DWORD *)v7)
              {
                v97 = *(_QWORD *)(v7 + 24);
                v98 = v93;
                do
                {
                  v99 = v98;
                  *((_DWORD *)v98 - 2) = v96;
                  v100 = *(v98 - 2);
                  v98 -= 2;
                  *v99 = v100;
                  v96 = *((_DWORD *)v99 - 10);
                }
                while (v95 < v96);
                *((_DWORD *)v98 - 2) = v95;
                *v98 = v97;
              }
              v53 = v94 + 16;
              v93 += 2;
              v7 = v94;
            }
            while (v94 + 16 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v65 = (unint64_t)(v10 - 2) >> 1;
            v66 = v65;
            do
            {
              v67 = v66;
              if (v65 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = v8 + 16 * v68;
                if (2 * v67 + 2 >= v10)
                {
                  v70 = *(_DWORD *)v69;
                }
                else
                {
                  v70 = *(_DWORD *)(v69 + 16);
                  v71 = *(_DWORD *)v69 >= v70;
                  if (*(_DWORD *)v69 > v70)
                    v70 = *(_DWORD *)v69;
                  if (!v71)
                  {
                    v69 += 16;
                    v68 = 2 * v67 + 2;
                  }
                }
                v72 = v8 + 16 * v67;
                v73 = *(_DWORD *)v72;
                if (v70 >= *(_DWORD *)v72)
                {
                  v74 = *(_QWORD *)(v72 + 8);
                  do
                  {
                    v75 = v72;
                    v72 = v69;
                    *(_DWORD *)v75 = v70;
                    *(_QWORD *)(v75 + 8) = *(_QWORD *)(v69 + 8);
                    if (v65 < v68)
                      break;
                    v76 = (2 * v68) | 1;
                    v69 = v8 + 16 * v76;
                    v68 = 2 * v68 + 2;
                    if (v68 >= v10)
                    {
                      v70 = *(_DWORD *)v69;
                      v68 = v76;
                    }
                    else
                    {
                      v70 = *(_DWORD *)v69;
                      result = (unsigned int *)(v69 + 16);
                      v77 = *(_DWORD *)(v69 + 16);
                      if (*(_DWORD *)v69 <= v77)
                        v70 = *(_DWORD *)(v69 + 16);
                      if (*(_DWORD *)v69 >= v77)
                        v68 = v76;
                      else
                        v69 += 16;
                    }
                  }
                  while (v70 >= v73);
                  *(_DWORD *)v72 = v73;
                  *(_QWORD *)(v72 + 8) = v74;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            do
            {
              v78 = 0;
              v79 = *(_DWORD *)v8;
              v80 = *(_QWORD *)(v8 + 8);
              v81 = v8;
              do
              {
                v82 = v81 + 16 * v78 + 16;
                v83 = (2 * v78) | 1;
                v78 = 2 * v78 + 2;
                if (v78 >= v10)
                {
                  v84 = *(_DWORD *)v82;
                  v78 = v83;
                }
                else
                {
                  v84 = *(_DWORD *)v82;
                  result = (unsigned int *)*(unsigned int *)(v82 + 16);
                  if (*(_DWORD *)v82 <= result)
                    v84 = *(_DWORD *)(v82 + 16);
                  if (*(_DWORD *)v82 >= result)
                    v78 = v83;
                  else
                    v82 += 16;
                }
                *(_DWORD *)v81 = v84;
                *(_QWORD *)(v81 + 8) = *(_QWORD *)(v82 + 8);
                v81 = v82;
              }
              while (v78 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v82 == a2 - 16)
              {
                *(_DWORD *)v82 = v79;
                *(_QWORD *)(v82 + 8) = v80;
              }
              else
              {
                *(_DWORD *)v82 = *(_DWORD *)(a2 - 16);
                *(_QWORD *)(v82 + 8) = *(_QWORD *)(a2 - 8);
                *(_DWORD *)(a2 - 16) = v79;
                *(_QWORD *)(a2 - 8) = v80;
                v85 = v82 - v8 + 16;
                if (v85 >= 17)
                {
                  v86 = (((unint64_t)v85 >> 4) - 2) >> 1;
                  v87 = v8 + 16 * v86;
                  v88 = *(_DWORD *)v87;
                  v89 = *(_DWORD *)v82;
                  if (*(_DWORD *)v87 < *(_DWORD *)v82)
                  {
                    v90 = *(_QWORD *)(v82 + 8);
                    do
                    {
                      v91 = v82;
                      v82 = v87;
                      *(_DWORD *)v91 = v88;
                      *(_QWORD *)(v91 + 8) = *(_QWORD *)(v87 + 8);
                      if (!v86)
                        break;
                      v86 = (v86 - 1) >> 1;
                      v87 = v8 + 16 * v86;
                      v88 = *(_DWORD *)v87;
                    }
                    while (*(_DWORD *)v87 < v89);
                    *(_DWORD *)v82 = v89;
                    *(_QWORD *)(v82 + 8) = v90;
                  }
                }
              }
              a2 -= 16;
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 16 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x801)
        {
          result = sub_1C53050C8((unsigned int *)(v7 + 16 * ((unint64_t)v10 >> 1)), (unsigned int *)v7, (unsigned int *)(a2 - 16));
        }
        else
        {
          sub_1C53050C8((unsigned int *)v7, (unsigned int *)(v7 + 16 * ((unint64_t)v10 >> 1)), (unsigned int *)(a2 - 16));
          sub_1C53050C8((unsigned int *)(v7 + 16), (unsigned int *)(v12 - 16), (unsigned int *)(a2 - 32));
          sub_1C53050C8((unsigned int *)(v7 + 32), (unsigned int *)(v7 + 16 + 16 * v11), (unsigned int *)(a2 - 48));
          result = sub_1C53050C8((unsigned int *)(v12 - 16), (unsigned int *)v12, (unsigned int *)(v7 + 16 + 16 * v11));
          v13 = *(_DWORD *)v7;
          *(_DWORD *)v7 = *(_DWORD *)v12;
          *(_DWORD *)v12 = v13;
          v14 = *(_QWORD *)(v7 + 8);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v12 + 8);
          *(_QWORD *)(v12 + 8) = v14;
        }
        --a3;
        v15 = *(_DWORD *)v7;
        if ((a4 & 1) == 0 && *(_DWORD *)(v7 - 16) >= v15)
        {
          if (v15 >= *(_DWORD *)(a2 - 16))
          {
            v30 = v7 + 16;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              v30 += 16;
            }
            while (v15 >= *(_DWORD *)v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = *(_DWORD *)(v8 + 16);
              v8 += 16;
            }
            while (v15 >= v29);
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
            {
              v32 = *(_DWORD *)(v31 - 16);
              v31 -= 16;
            }
            while (v15 < v32);
          }
          v33 = *(_QWORD *)(v7 + 8);
          if (v8 < v31)
          {
            v34 = *(_DWORD *)v8;
            v35 = *(_DWORD *)v31;
            do
            {
              *(_DWORD *)v8 = v35;
              *(_DWORD *)v31 = v34;
              v36 = *(_QWORD *)(v8 + 8);
              *(_QWORD *)(v8 + 8) = *(_QWORD *)(v31 + 8);
              *(_QWORD *)(v31 + 8) = v36;
              do
              {
                v37 = *(_DWORD *)(v8 + 16);
                v8 += 16;
                v34 = v37;
              }
              while (v15 >= v37);
              do
              {
                v38 = *(_DWORD *)(v31 - 16);
                v31 -= 16;
                v35 = v38;
              }
              while (v15 < v38);
            }
            while (v8 < v31);
          }
          if (v8 - 16 != v7)
          {
            *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
            *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
          }
          a4 = 0;
          *(_DWORD *)(v8 - 16) = v15;
          *(_QWORD *)(v8 - 8) = v33;
          continue;
        }
        v16 = 0;
        v17 = *(_QWORD *)(v7 + 8);
        do
        {
          v18 = *(_DWORD *)(v7 + v16 + 16);
          v16 += 16;
        }
        while (v18 < v15);
        v19 = v7 + v16;
        v20 = (unsigned int *)a2;
        if (v16 == 16)
        {
          v20 = (unsigned int *)a2;
          do
          {
            if (v19 >= (unint64_t)v20)
              break;
            v22 = *(v20 - 4);
            v20 -= 4;
          }
          while (v22 >= v15);
        }
        else
        {
          do
          {
            v21 = *(v20 - 4);
            v20 -= 4;
          }
          while (v21 >= v15);
        }
        if (v19 >= (unint64_t)v20)
        {
          v8 = v7 + v16;
        }
        else
        {
          v23 = *v20;
          v8 = v7 + v16;
          v24 = v20;
          do
          {
            *(_DWORD *)v8 = v23;
            *v24 = v18;
            v25 = *(_QWORD *)(v8 + 8);
            *(_QWORD *)(v8 + 8) = *((_QWORD *)v24 + 1);
            *((_QWORD *)v24 + 1) = v25;
            do
            {
              v26 = *(_DWORD *)(v8 + 16);
              v8 += 16;
              v18 = v26;
            }
            while (v26 < v15);
            do
            {
              v27 = *(v24 - 4);
              v24 -= 4;
              v23 = v27;
            }
            while (v27 >= v15);
          }
          while (v8 < (unint64_t)v24);
        }
        if (v8 - 16 != v7)
        {
          *(_DWORD *)v7 = *(_DWORD *)(v8 - 16);
          *(_QWORD *)(v7 + 8) = *(_QWORD *)(v8 - 8);
        }
        *(_DWORD *)(v8 - 16) = v15;
        *(_QWORD *)(v8 - 8) = v17;
        if (v19 < (unint64_t)v20)
        {
LABEL_32:
          result = (unsigned int *)sub_1C530495C(v7, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = sub_1C5305188(v7, v8 - 16);
        result = (unsigned int *)sub_1C5305188(v8, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 16;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned int *sub_1C53050C8(unsigned int *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = *result;
  v5 = *a3;
  if (*a2 >= *result)
  {
    if (v5 < v3)
    {
      *a2 = v5;
      *a3 = v3;
      v7 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v7;
      v8 = *result;
      if (*a2 < *result)
      {
        *result = *a2;
        *a2 = v8;
        v9 = *((_QWORD *)result + 1);
        *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
        *((_QWORD *)a2 + 1) = v9;
      }
    }
  }
  else if (v5 >= v3)
  {
    *result = v3;
    *a2 = v4;
    v10 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v10;
    if (*a3 < v4)
    {
      *a2 = *a3;
      *a3 = v4;
      *((_QWORD *)a2 + 1) = *((_QWORD *)a3 + 1);
      *((_QWORD *)a3 + 1) = v10;
    }
  }
  else
  {
    *result = v5;
    *a3 = v4;
    v6 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = v6;
  }
  return result;
}

BOOL sub_1C5305188(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;

  v4 = (a2 - a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_DWORD *)(a2 - 16);
      v7 = *(_DWORD *)a1;
      if (v6 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = v6;
        *(_DWORD *)(a2 - 16) = v7;
        v8 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3:
      sub_1C53050C8((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a2 - 16));
      return 1;
    case 4:
      sub_1C5305394(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      sub_1C5305394(a1, a1 + 16, a1 + 32, a1 + 48);
      v19 = *(_DWORD *)(a2 - 16);
      v20 = *(_DWORD *)(a1 + 48);
      if (v19 < v20)
      {
        *(_DWORD *)(a1 + 48) = v19;
        *(_DWORD *)(a2 - 16) = v20;
        v21 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 - 8);
        *(_QWORD *)(a2 - 8) = v21;
        v22 = *(_DWORD *)(a1 + 48);
        v23 = *(_DWORD *)(a1 + 32);
        if (v22 < v23)
        {
          *(_DWORD *)(a1 + 32) = v22;
          *(_DWORD *)(a1 + 48) = v23;
          v24 = *(_QWORD *)(a1 + 40);
          v25 = *(_QWORD *)(a1 + 56);
          *(_QWORD *)(a1 + 40) = v25;
          *(_QWORD *)(a1 + 56) = v24;
          v26 = *(_DWORD *)(a1 + 16);
          if (v22 < v26)
          {
            *(_DWORD *)(a1 + 16) = v22;
            *(_DWORD *)(a1 + 32) = v26;
            v27 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(a1 + 24) = v25;
            *(_QWORD *)(a1 + 40) = v27;
            v28 = *(_DWORD *)a1;
            if (v22 < *(_DWORD *)a1)
            {
              *(_DWORD *)a1 = v22;
              *(_DWORD *)(a1 + 16) = v28;
              v29 = *(_QWORD *)(a1 + 8);
              *(_QWORD *)(a1 + 8) = v25;
              *(_QWORD *)(a1 + 24) = v29;
            }
          }
        }
      }
      return 1;
    default:
      v9 = (unsigned int *)(a1 + 32);
      sub_1C53050C8((unsigned int *)a1, (unsigned int *)(a1 + 16), (unsigned int *)(a1 + 32));
      v10 = a1 + 48;
      if (a1 + 48 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(_DWORD *)v10;
    v14 = *v9;
    if (*(_DWORD *)v10 < *v9)
    {
      v15 = *(_QWORD *)(v10 + 8);
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        *(_DWORD *)(v17 + 48) = v14;
        *(_QWORD *)(v17 + 56) = *(_QWORD *)(a1 + v16 + 40);
        if (v16 == -32)
          break;
        v14 = *(_DWORD *)(v17 + 16);
        v16 -= 16;
        if (v13 >= v14)
        {
          v18 = a1 + v16 + 48;
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *(_DWORD *)v18 = v13;
      *(_QWORD *)(v18 + 8) = v15;
      if (++v12 == 8)
        return v10 + 16 == a2;
    }
    v9 = (unsigned int *)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2)
      return 1;
  }
}

unsigned int *sub_1C5305394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *result;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;

  result = sub_1C53050C8((unsigned int *)a1, (unsigned int *)a2, (unsigned int *)a3);
  v9 = *(_DWORD *)a3;
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    *(_DWORD *)a3 = *(_DWORD *)a4;
    *(_DWORD *)a4 = v9;
    v10 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(a4 + 8) = v10;
    v11 = *(_DWORD *)a2;
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      *(_DWORD *)a2 = *(_DWORD *)a3;
      *(_DWORD *)a3 = v11;
      v12 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(a3 + 8);
      *(_QWORD *)(a3 + 8) = v12;
      v13 = *(_DWORD *)a1;
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *(_DWORD *)a2 = v13;
        v14 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
        *(_QWORD *)(a2 + 8) = v14;
      }
    }
  }
  return result;
}

unint64_t sub_1C5305440(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 472 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C6224FFC(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C6224FFC(a1, v5);
    }
  }
  return a2;
}

__n128 sub_1C53054A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __n128 result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _BOOL4 v21;
  int v22;
  _OWORD *v23;
  BOOL v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;

  if (a1 != a2)
  {
    v5 = a1;
    while (1)
    {
      sub_1C6182CAC(a3, v5);
      v6 = a3 + 48;
      *(_DWORD *)(a3 + 48) |= 1u;
      sub_1C62234A4((int *)(a3 + 48));
      v7 = *(_DWORD *)(v5 + 48);
      *(_DWORD *)(v5 + 48) = *(_DWORD *)(a3 + 48) & 0xFFFFFFFE | v7 & 1;
      v8 = *(_DWORD *)(a3 + 52);
      *(_DWORD *)(a3 + 48) = v7 & 0xFFFFFFFE | *(_DWORD *)(a3 + 48) & 1;
      *(_DWORD *)(a3 + 52) = *(_DWORD *)(v5 + 52);
      *(_DWORD *)(v5 + 52) = v8;
      v9 = *(_DWORD *)(a3 + 48);
      v10 = *(_DWORD *)(v5 + 48);
      if ((v9 & 1) != 0)
        break;
      v11 = a3 + 48;
      v6 = v5 + 48;
      if ((v10 & 1) != 0)
        goto LABEL_7;
      v12 = *(_QWORD *)(a3 + 56);
      *(_QWORD *)(a3 + 56) = *(_QWORD *)(v5 + 56);
      *(_QWORD *)(v5 + 56) = v12;
      LODWORD(v12) = *(_DWORD *)(a3 + 64);
      *(_DWORD *)(a3 + 64) = *(_DWORD *)(v5 + 64);
      *(_DWORD *)(v5 + 64) = v12;
LABEL_15:
      result = *(__n128 *)(v5 + 440);
      *(_OWORD *)(a3 + 449) = *(_OWORD *)(v5 + 449);
      *(__n128 *)(a3 + 440) = result;
      v5 += 472;
      a3 += 472;
      if (v5 == a2)
        return result;
    }
    v9 = *(_DWORD *)(v5 + 48);
    v11 = v5 + 48;
    if ((v10 & 1) == 0)
    {
LABEL_7:
      v13 = 0;
      v44 = *(_OWORD *)(v11 + 8);
      *(_DWORD *)v11 = v9 | 1;
      do
      {
        v14 = v11 + v13;
        v15 = *(_OWORD *)(v6 + v13 + 24);
        v16 = *(_QWORD *)(v6 + v13 + 40);
        *(_OWORD *)(v14 + 8) = *(_OWORD *)(v6 + v13 + 8);
        *(_QWORD *)(v14 + 40) = v16;
        *(_OWORD *)(v14 + 24) = v15;
        if (*(_QWORD *)(v11 + v13 + 8)
          || *(_BYTE *)(v14 + 32) && *(_OWORD *)(v11 + v13 + 16) != 0
          || *(_QWORD *)(v14 + 40))
        {
          *(_QWORD *)(v14 + 48) = *(_QWORD *)(v6 + v13 + 48);
        }
        v13 += 48;
      }
      while (v13 != 384);
      *(_DWORD *)v6 &= ~1u;
      *(_OWORD *)(v6 + 8) = v44;
      goto LABEL_15;
    }
    v18 = 0;
    while (1)
    {
      v19 = a3 + v18;
      v20 = (_QWORD *)(a3 + v18 + 56);
      if (*v20)
        goto LABEL_19;
      v22 = *(unsigned __int8 *)(v19 + 80);
      if (*(_BYTE *)(v19 + 80))
        break;
      v21 = 0;
      if (*(_QWORD *)(v19 + 88))
        goto LABEL_20;
LABEL_21:
      v23 = (_OWORD *)(v5 + v18 + 56);
      if (!*(_QWORD *)v23)
      {
        v31 = v5 + v18;
        if (*(_BYTE *)(v5 + v18 + 80))
        {
          if (*(_OWORD *)(v5 + v18 + 64) == 0)
          {
            v24 = *(_QWORD *)(v31 + 88) == 0;
            if (!v22)
              goto LABEL_31;
            goto LABEL_23;
          }
        }
        else if (!*(_QWORD *)(v31 + 88))
        {
          v39 = *(_OWORD *)v20;
          v40 = *(_OWORD *)(a3 + v18 + 72);
          v41 = *(_QWORD *)(a3 + v18 + 88);
          v42 = *(_QWORD *)(v5 + v18 + 88);
          v43 = *(_OWORD *)(v5 + v18 + 72);
          *(_OWORD *)v20 = *v23;
          *(_OWORD *)(a3 + v18 + 72) = v43;
          *(_QWORD *)(a3 + v18 + 88) = v42;
          *(_QWORD *)(v5 + v18 + 88) = v41;
          *v23 = v39;
          *(_OWORD *)(v5 + v18 + 72) = v40;
          if (!v22)
            goto LABEL_36;
LABEL_32:
          v37 = v5 + v18;
          v38 = a3 + v18;
LABEL_35:
          *(_QWORD *)(v37 + 96) = *(_QWORD *)(v38 + 96);
          goto LABEL_36;
        }
      }
      v24 = 0;
      if (!v22)
        goto LABEL_31;
LABEL_23:
      if (!v24)
      {
        v25 = *(_QWORD *)(a3 + v18 + 88);
        v27 = *(_OWORD *)v20;
        v26 = *(_OWORD *)(a3 + v18 + 72);
        v28 = *(_QWORD *)(a3 + v18 + 96);
        v29 = *(_QWORD *)(v5 + v18 + 88);
        v30 = *(_OWORD *)(v5 + v18 + 72);
        *(_OWORD *)v20 = *v23;
        *(_OWORD *)(a3 + v18 + 72) = v30;
        *(_QWORD *)(a3 + v18 + 88) = v29;
        *(_QWORD *)(a3 + v18 + 96) = *(_QWORD *)(v5 + v18 + 96);
        *v23 = v27;
        *(_OWORD *)(v5 + v18 + 72) = v26;
        *(_QWORD *)(v5 + v18 + 88) = v25;
        *(_QWORD *)(v5 + v18 + 96) = v28;
        goto LABEL_36;
      }
LABEL_31:
      v32 = *(_OWORD *)v20;
      v33 = *(_OWORD *)(a3 + v18 + 72);
      v34 = *(_QWORD *)(a3 + v18 + 88);
      v35 = *(_QWORD *)(v5 + v18 + 88);
      v36 = *(_OWORD *)(v5 + v18 + 72);
      *(_OWORD *)v20 = *v23;
      *(_OWORD *)(a3 + v18 + 72) = v36;
      *(_QWORD *)(a3 + v18 + 88) = v35;
      *(_QWORD *)(v5 + v18 + 88) = v34;
      *v23 = v32;
      *(_OWORD *)(v5 + v18 + 72) = v33;
      if ((v22 & 1) != 0)
        goto LABEL_32;
      if (!v24)
      {
        v37 = a3 + v18;
        v38 = v5 + v18;
        goto LABEL_35;
      }
LABEL_36:
      v18 += 48;
      if (v18 == 384)
        goto LABEL_15;
    }
    if (*(_OWORD *)(a3 + v18 + 64) == 0)
      v21 = *(_QWORD *)(v19 + 88) == 0;
    else
LABEL_19:
      v21 = 0;
LABEL_20:
    v22 = !v21;
    goto LABEL_21;
  }
  return result;
}

void *sub_1C5305794(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  void *v6;

  result = (void *)MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    v6 = operator new(48 * v5, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    return memcpy(v6, *(const void **)a2, 48 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

_QWORD *sub_1C5305808(_QWORD *result, _BYTE *a2, _BYTE *a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;

  if (a4)
  {
    if (a4 >= 0x222222222222223)
      abort();
    v6 = result;
    v7 = 15 * a4;
    result = operator new(120 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v6[2] = &result[v7];
    if (a2 != a3)
    {
      v9 = 120 * ((a3 - a2 - 120) / 0x78uLL) + 120;
      result = memcpy(result, a2, v9);
      v8 = (_QWORD *)((char *)v8 + v9);
    }
    v6[1] = v8;
  }
  return result;
}

uint64_t sub_1C53058BC(uint64_t a1, uint64_t *a2)
{
  __int128 *v4;
  uint64_t *v5;
  char *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  __int128 *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = (__int128 *)*a2;
    if ((uint64_t *)*a2 != a2 + 2)
    {
      v6 = *(char **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = (__int128 *)*a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_21;
    }
    v7 = a2 + 1;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v10 = (__int128 *)((char *)v4 + 120 * v8);
        v11 = *(char **)a1;
        do
        {
          v12 = *v4;
          v13 = v4[1];
          *((_QWORD *)v11 + 4) = *((_QWORD *)v4 + 4);
          *(_OWORD *)v11 = v12;
          *((_OWORD *)v11 + 1) = v13;
          v14 = *(__int128 *)((char *)v4 + 72);
          v15 = *(__int128 *)((char *)v4 + 88);
          v16 = *(__int128 *)((char *)v4 + 100);
          *(_OWORD *)(v11 + 56) = *(__int128 *)((char *)v4 + 56);
          *(_OWORD *)(v11 + 100) = v16;
          *(_OWORD *)(v11 + 88) = v15;
          *(_OWORD *)(v11 + 72) = v14;
          *(_OWORD *)(v11 + 40) = *(__int128 *)((char *)v4 + 40);
          v4 = (__int128 *)((char *)v4 + 120);
          v11 += 120;
        }
        while (v4 != v10);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        v17 = (__int128 *)((char *)v4 + 120 * v9);
        v18 = *(char **)a1;
        do
        {
          v19 = *v4;
          v20 = v4[1];
          *((_QWORD *)v18 + 4) = *((_QWORD *)v4 + 4);
          *(_OWORD *)v18 = v19;
          *((_OWORD *)v18 + 1) = v20;
          v21 = *(__int128 *)((char *)v4 + 72);
          v22 = *(__int128 *)((char *)v4 + 88);
          v23 = *(__int128 *)((char *)v4 + 100);
          *(_OWORD *)(v18 + 56) = *(__int128 *)((char *)v4 + 56);
          *(_OWORD *)(v18 + 100) = v23;
          *(_OWORD *)(v18 + 88) = v22;
          *(_OWORD *)(v18 + 72) = v21;
          *(_OWORD *)(v18 + 40) = *(__int128 *)((char *)v4 + 40);
          v4 = (__int128 *)((char *)v4 + 120);
          v18 += 120;
        }
        while (v4 != v17);
LABEL_18:
        v24 = *v7;
        if (v9 != v24)
          memcpy((void *)(*(_QWORD *)a1 + 120 * v9), (const void *)(*a2 + 120 * v9), *a2 + 120 * v24 - (*a2 + 120 * v9));
LABEL_20:
        *(_DWORD *)(a1 + 8) = v8;
LABEL_21:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 120);
    }
    v9 = 0;
    goto LABEL_18;
  }
  return a1;
}

void sub_1C5305A68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1 - 8;
  v1 = *(_QWORD *)(a1 - 8);
  if (v1)
  {
    v3 = 8 * v1;
    do
    {
      v4 = *(_QWORD *)(v2 + v3);
      *(_QWORD *)(v2 + v3) = 0;
      if (v4)
        MEMORY[0x1CAA32F9C](v4, 0x1000C8000313F17);
      v3 -= 8;
    }
    while (v3);
  }
  JUMPOUT(0x1CAA32F9CLL);
}

_QWORD *sub_1C5305AD8(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(208 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62256AC(a1, v4, v4 + 208 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 208 * v10;
    do
    {
      *result = -4096;
      result += 26;
      v11 -= 208;
    }
    while (v11);
  }
  return result;
}

void sub_1C5305B9C(uint64_t a1)
{
  int v2;
  int v3;
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  _QWORD *v11;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C52F1C3C(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if (v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = *(_QWORD *)a1 + 56 * v4;
      do
      {
        *v5 = -4096;
        v5[1] = -1;
        v5[2] = -1;
        v5 += 7;
      }
      while (v5 != (_QWORD *)v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if (v4)
    {
      v7 = (4 * v4 / 3 + 1) | ((unint64_t)(4 * v4 / 3 + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v8;
      v9 = operator new(56 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(_DWORD *)(a1 + 16);
      if (v10)
      {
        v11 = &v9[7 * v10];
        do
        {
          *v9 = -4096;
          v9[1] = -1;
          v9[2] = -1;
          v9 += 7;
        }
        while (v9 != v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

void sub_1C5305CBC(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C52F1AFC(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if ((_DWORD)v4 == *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 8) = 0;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD **)a1;
      v6 = 112 * v4;
      do
      {
        *v5 = -4096;
        v5 += 14;
        v6 -= 112;
      }
      while (v6);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if ((_DWORD)v4)
    {
      v7 = (4 * (int)v4 / 3u + 1) | ((unint64_t)(4 * (int)v4 / 3u + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v8;
      v9 = operator new(112 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = 0;
      v10 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v10)
      {
        v11 = 112 * v10;
        do
        {
          *v9 = -4096;
          v9 += 14;
          v11 -= 112;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
  }
}

unsigned int *sub_1C5305DC8(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  unsigned int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_QWORD **)result;
      v7 = 24 * v2;
      do
      {
        *v6 = -4096;
        v6 += 3;
        v7 -= 24;
      }
      while (v7);
    }
  }
  else
  {
    result = (unsigned int *)MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    if (v5)
    {
      v8 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
      v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
      LODWORD(v9) = (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1;
      v1[4] = v9;
      result = (unsigned int *)operator new(24 * v9, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v10 = v1[4];
      if ((_DWORD)v10)
      {
        v11 = 24 * v10;
        do
        {
          *(_QWORD *)result = -4096;
          result += 6;
          v11 -= 24;
        }
        while (v11);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      v1[4] = 0;
    }
  }
  return result;
}

_QWORD *sub_1C5305ED0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;

  v24 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new(16 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = 16 * v15;
      do
      {
        *v14 = -4096;
        v14 += 2;
        v16 -= 16;
      }
      while (v16);
    }
    if ((_DWORD)v6)
    {
      v17 = 0;
      v18 = (uint64_t *)(v9 + 8);
      v19 = 16 * v6;
      do
      {
        v20 = *(v18 - 1);
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v25);
          v21 = v25;
          *v25 = v20;
          v21[1] = *v18;
          *(_DWORD *)(a1 + 8) = ++v17;
        }
        v18 += 2;
        v19 -= 16;
      }
      while (v19);
    }
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_QWORD **)a1;
    LODWORD(v22) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v22 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v22)
    {
      v23 = 0;
      do
      {
        v14[v23] = -4096;
        v23 += 2;
      }
      while (2 * v22 != v23);
    }
  }
  sub_1C49F21C0((uint64_t)v14, v22, *a2, &v24);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v24;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C5306090(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5305ED0(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5 + 1;
}

_QWORD *sub_1C53060F4(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5305ED0(a1, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C5306158(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  int v6;
  int v7;

  if (a3)
  {
    LODWORD(v3) = (a3 - 1) & (37 * a1);
    v4 = (uint64_t *)(a2 + 16 * v3);
    v5 = *v4;
    if (*v4 == a1)
      goto LABEL_8;
    v6 = 1;
    while (v5 != -1)
    {
      v7 = v3 + v6++;
      v3 = v7 & (a3 - 1);
      v5 = *(_QWORD *)(a2 + 16 * v3);
      if (v5 == a1)
      {
        v4 = (uint64_t *)(a2 + 16 * v3);
        goto LABEL_8;
      }
    }
  }
  v4 = (uint64_t *)(a2 + 16 * a3);
LABEL_8:
  if (v4 == (uint64_t *)(a2 + 16 * a3))
    return 0;
  else
    return v4[1];
}

_QWORD *sub_1C53061CC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v10 - 1;
      v14 = v4;
      do
      {
        v15 = *v14;
        if ((unint64_t)*v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v16 = (37 * v15) & v13;
          v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * v16);
          v18 = *v17;
          if (v15 != *v17)
          {
            v20 = 0;
            v21 = 1;
            while (v18 != -1)
            {
              if (v20)
                v22 = 0;
              else
                v22 = v18 == -2;
              if (v22)
                v20 = v17;
              v23 = v16 + v21++;
              v16 = v23 & v13;
              v17 = (_QWORD *)(*(_QWORD *)a1 + 16 * (v23 & v13));
              v18 = *v17;
              if (v15 == *v17)
                goto LABEL_12;
            }
            if (v20)
              v17 = v20;
          }
LABEL_12:
          v19 = v14[1];
          *v17 = v15;
          v17[1] = v19;
          *(_DWORD *)(a1 + 8) = ++v12;
        }
        v14 += 2;
      }
      while (v14 != &v4[2 * v3]);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v24 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v24)
  {
    v25 = 16 * v24;
    do
    {
      *result = -1;
      result += 2;
      v25 -= 16;
    }
    while (v25);
  }
  return result;
}

uint64_t sub_1C5306340(uint64_t result, uint64_t *a2, _QWORD *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  unsigned int v32;
  uint64_t *v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t *v39;
  unsigned int v40;
  BOOL v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t *v47;
  unsigned int v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t *v58;
  unsigned int v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t *v63;
  unsigned int v64;
  uint64_t *v65;
  BOOL v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  unsigned int v80;
  uint64_t *v81;
  uint64_t *v82;
  int64_t v83;
  int64_t v84;
  int64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t *v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  unsigned int v101;
  uint64_t *v102;
  unsigned int v103;
  uint64_t *v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  unsigned int v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t *v116;
  unsigned int v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  unsigned int v122;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t *v133;
  unsigned int v134;
  uint64_t v135;
  uint64_t *v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;

  v8 = (uint64_t *)result;
LABEL_2:
  v140 = a2 - 1;
  v9 = v8;
  while (2)
  {
    v10 = v9;
    v11 = (char *)a2 - (char *)v9;
    v12 = a2 - v9;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v135 = *v9;
        v136 = (uint64_t *)(*a3 + 576);
        v151 = **(_QWORD **)(*(a2 - 1) + 80);
        v137 = *((_DWORD *)sub_1C6128C08(v136, &v151) + 2);
        v150 = **(_QWORD **)(v135 + 80);
        result = (uint64_t)sub_1C6128C08(v136, &v150);
        if (v137 < *(_DWORD *)(result + 8))
        {
          v138 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v138;
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_1C53071EC(v9, v9 + 1, v140, a3);
      case 4uLL:
        return (uint64_t)sub_1C530767C(v9, v9 + 1, v9 + 2, v140, a3);
      case 5uLL:
        return (uint64_t)sub_1C5307008(v9, v9 + 1, v9 + 2, v9 + 3, v140, a3);
      default:
        v149 = v9;
        if (v11 <= 191)
        {
          v65 = v9 + 1;
          v67 = v9 == a2 || v65 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v67)
            {
              v68 = 0;
              v69 = v9;
              do
              {
                v71 = *v69;
                v70 = v69[1];
                v69 = v65;
                v72 = (uint64_t *)(*a3 + 576);
                v151 = **(_QWORD **)(v70 + 80);
                v73 = *((_DWORD *)sub_1C6128C08(v72, &v151) + 2);
                v150 = **(_QWORD **)(v71 + 80);
                result = (uint64_t)sub_1C6128C08(v72, &v150);
                if (v73 < *(_DWORD *)(result + 8))
                {
                  v74 = *v69;
                  v75 = v68;
                  while (1)
                  {
                    v76 = (char *)v10 + v75;
                    *(uint64_t *)((char *)v10 + v75 + 8) = *(uint64_t *)((char *)v10 + v75);
                    if (!v75)
                      break;
                    v77 = a2;
                    v78 = *((_QWORD *)v76 - 1);
                    v79 = (uint64_t *)(*a3 + 576);
                    v151 = **(_QWORD **)(v74 + 80);
                    v80 = *((_DWORD *)sub_1C6128C08(v79, &v151) + 2);
                    v81 = *(uint64_t **)(v78 + 80);
                    a2 = v77;
                    v10 = v149;
                    v150 = *v81;
                    result = (uint64_t)sub_1C6128C08(v79, &v150);
                    v75 -= 8;
                    if (v80 >= *(_DWORD *)(result + 8))
                    {
                      v82 = (uint64_t *)((char *)v149 + v75 + 8);
                      goto LABEL_70;
                    }
                  }
                  v82 = v10;
LABEL_70:
                  *v82 = v74;
                }
                v65 = v69 + 1;
                v68 += 8;
              }
              while (v69 + 1 != a2);
            }
          }
          else if (!v67)
          {
            do
            {
              v125 = *v10;
              v124 = v10[1];
              v10 = v65;
              v126 = (uint64_t *)(*a3 + 576);
              v151 = **(_QWORD **)(v124 + 80);
              v127 = *((_DWORD *)sub_1C6128C08(v126, &v151) + 2);
              v150 = **(_QWORD **)(v125 + 80);
              result = (uint64_t)sub_1C6128C08(v126, &v150);
              if (v127 < *(_DWORD *)(result + 8))
              {
                v128 = *v10;
                v129 = v10;
                do
                {
                  v130 = v129;
                  v131 = *--v129;
                  *v130 = v131;
                  v132 = *(v130 - 2);
                  v133 = (uint64_t *)(*a3 + 576);
                  v151 = **(_QWORD **)(v128 + 80);
                  v134 = *((_DWORD *)sub_1C6128C08(v133, &v151) + 2);
                  v150 = **(_QWORD **)(v132 + 80);
                  result = (uint64_t)sub_1C6128C08(v133, &v150);
                }
                while (v134 < *(_DWORD *)(result + 8));
                *v129 = v128;
              }
              v65 = v10 + 1;
            }
            while (v10 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v83 = (v12 - 2) >> 1;
            v84 = v83;
            v143 = a2;
            do
            {
              v85 = v84;
              if (v83 >= v84)
              {
                v86 = (2 * v84) | 1;
                v87 = &v149[v86];
                if (2 * v84 + 2 < (uint64_t)v12)
                {
                  v88 = v87 + 1;
                  v146 = v87[1];
                  v89 = (uint64_t *)(*a3 + 576);
                  v151 = **(_QWORD **)(*v87 + 80);
                  v90 = *((_DWORD *)sub_1C6128C08(v89, &v151) + 2);
                  v150 = **(_QWORD **)(v146 + 80);
                  v91 = *((_DWORD *)sub_1C6128C08(v89, &v150) + 2);
                  v87 = v90 >= v91 ? &v149[v86] : v88;
                  if (v90 < v91)
                    v86 = 2 * v85 + 2;
                }
                v92 = &v149[v85];
                v93 = v87;
                v94 = *v92;
                v95 = (uint64_t *)(*a3 + 576);
                v151 = **(_QWORD **)(*v87 + 80);
                v96 = *((_DWORD *)sub_1C6128C08(v95, &v151) + 2);
                v150 = **(_QWORD **)(v94 + 80);
                result = (uint64_t)sub_1C6128C08(v95, &v150);
                a2 = v143;
                if (v96 >= *(_DWORD *)(result + 8))
                {
                  v147 = *v92;
                  do
                  {
                    v97 = v93;
                    *v92 = *v93;
                    if (v83 < v86)
                      break;
                    v98 = 2 * v86;
                    v86 = (2 * v86) | 1;
                    v93 = &v149[v86];
                    v99 = v98 + 2;
                    if (v98 + 2 < (uint64_t)v12)
                    {
                      v139 = v93[1];
                      v100 = (uint64_t *)(*a3 + 576);
                      v151 = **(_QWORD **)(*v93 + 80);
                      v141 = v86;
                      v101 = *((_DWORD *)sub_1C6128C08(v100, &v151) + 2);
                      v150 = **(_QWORD **)(v139 + 80);
                      v41 = v101 >= *((_DWORD *)sub_1C6128C08(v100, &v150) + 2);
                      v86 = v141;
                      if (!v41)
                      {
                        ++v93;
                        v86 = v99;
                      }
                    }
                    v102 = (uint64_t *)(*a3 + 576);
                    v151 = **(_QWORD **)(*v93 + 80);
                    v103 = *((_DWORD *)sub_1C6128C08(v102, &v151) + 2);
                    v150 = **(_QWORD **)(v147 + 80);
                    result = (uint64_t)sub_1C6128C08(v102, &v150);
                    v92 = v97;
                    v41 = v103 >= *(_DWORD *)(result + 8);
                    a2 = v143;
                  }
                  while (v41);
                  *v97 = v147;
                }
              }
              v84 = v85 - 1;
            }
            while (v85);
            v104 = v149;
            do
            {
              v105 = 0;
              v142 = *v104;
              v144 = a2;
              v106 = v104;
              do
              {
                v107 = (uint64_t)&v106[v105 + 1];
                v108 = (2 * v105) | 1;
                v109 = 2 * v105 + 2;
                if (v109 < (uint64_t)v12)
                {
                  v148 = v106[v105 + 2];
                  v110 = (uint64_t *)(*a3 + 576);
                  v151 = **(_QWORD **)(*(_QWORD *)v107 + 80);
                  v111 = *((_DWORD *)sub_1C6128C08(v110, &v151) + 2);
                  v150 = **(_QWORD **)(v148 + 80);
                  result = (uint64_t)sub_1C6128C08(v110, &v150);
                  v41 = v111 >= *(_DWORD *)(result + 8);
                  v104 = v149;
                  if (!v41)
                  {
                    v107 += 8;
                    v108 = v109;
                  }
                }
                *v106 = *(_QWORD *)v107;
                v106 = (_QWORD *)v107;
                v105 = v108;
              }
              while (v108 <= (uint64_t)((v12 - 2) >> 1));
              a2 = v144 - 1;
              if ((uint64_t *)v107 == v144 - 1)
              {
                *(_QWORD *)v107 = v142;
              }
              else
              {
                *(_QWORD *)v107 = *a2;
                *a2 = v142;
                v112 = v107 - (_QWORD)v104 + 8;
                if (v112 >= 9)
                {
                  v113 = (((unint64_t)v112 >> 3) - 2) >> 1;
                  v114 = &v104[v113];
                  v115 = *(_QWORD *)v107;
                  v116 = (uint64_t *)(*a3 + 576);
                  v151 = **(_QWORD **)(*v114 + 80);
                  v117 = *((_DWORD *)sub_1C6128C08(v116, &v151) + 2);
                  v118 = *(uint64_t **)(v115 + 80);
                  v104 = v149;
                  v150 = *v118;
                  result = (uint64_t)sub_1C6128C08(v116, &v150);
                  v41 = v117 >= *(_DWORD *)(result + 8);
                  a2 = v144 - 1;
                  if (!v41)
                  {
                    v119 = *(_QWORD *)v107;
                    do
                    {
                      v120 = v114;
                      *(_QWORD *)v107 = *v114;
                      if (!v113)
                        break;
                      v113 = (v113 - 1) >> 1;
                      v114 = &v104[v113];
                      v121 = (uint64_t *)(*a3 + 576);
                      v151 = **(_QWORD **)(*v114 + 80);
                      v122 = *((_DWORD *)sub_1C6128C08(v121, &v151) + 2);
                      v150 = **(_QWORD **)(v119 + 80);
                      result = (uint64_t)sub_1C6128C08(v121, &v150);
                      v107 = (uint64_t)v120;
                      v41 = v122 >= *(_DWORD *)(result + 8);
                      v104 = v149;
                    }
                    while (!v41);
                    *v120 = v119;
                  }
                }
              }
            }
            while ((uint64_t)v12-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v9[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1C53071EC(&v10[v12 >> 1], v10, v140, a3);
        }
        else
        {
          sub_1C53071EC(v10, &v10[v12 >> 1], v140, a3);
          sub_1C53071EC(v10 + 1, v14 - 1, a2 - 2, a3);
          sub_1C53071EC(v10 + 2, &v10[v13 + 1], a2 - 3, a3);
          sub_1C53071EC(v14 - 1, &v10[v12 >> 1], &v10[v13 + 1], a3);
          v15 = *v10;
          *v10 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v38 = *v10;
          v39 = (uint64_t *)(*a3 + 576);
          v151 = **(_QWORD **)(*(v10 - 1) + 80);
          v40 = *((_DWORD *)sub_1C6128C08(v39, &v151) + 2);
          v150 = **(_QWORD **)(v38 + 80);
          v41 = v40 >= *((_DWORD *)sub_1C6128C08(v39, &v150) + 2);
          v10 = v149;
          if (v41)
          {
            v42 = *v149;
            v43 = *v140;
            v44 = (uint64_t *)(*a3 + 576);
            v151 = **(_QWORD **)(*v149 + 80);
            v9 = v149;
            v45 = *((_DWORD *)sub_1C6128C08(v44, &v151) + 2);
            v150 = **(_QWORD **)(v43 + 80);
            result = (uint64_t)sub_1C6128C08(v44, &v150);
            if (v45 >= *(_DWORD *)(result + 8))
            {
              v61 = v149 + 1;
              do
              {
                v9 = v61;
                if (v61 >= a2)
                  break;
                ++v61;
                v62 = *v9;
                v63 = (uint64_t *)(*a3 + 576);
                v151 = **(_QWORD **)(v42 + 80);
                v64 = *((_DWORD *)sub_1C6128C08(v63, &v151) + 2);
                v150 = **(_QWORD **)(v62 + 80);
                result = (uint64_t)sub_1C6128C08(v63, &v150);
              }
              while (v64 >= *(_DWORD *)(result + 8));
            }
            else
            {
              do
              {
                v46 = v9[1];
                ++v9;
                v47 = (uint64_t *)(*a3 + 576);
                v151 = **(_QWORD **)(v42 + 80);
                v48 = *((_DWORD *)sub_1C6128C08(v47, &v151) + 2);
                v150 = **(_QWORD **)(v46 + 80);
                result = (uint64_t)sub_1C6128C08(v47, &v150);
              }
              while (v48 >= *(_DWORD *)(result + 8));
            }
            v49 = a2;
            if (v9 < a2)
            {
              v49 = a2;
              do
              {
                v50 = *--v49;
                v51 = (uint64_t *)(*a3 + 576);
                v151 = **(_QWORD **)(v42 + 80);
                v52 = *((_DWORD *)sub_1C6128C08(v51, &v151) + 2);
                v150 = **(_QWORD **)(v50 + 80);
                result = (uint64_t)sub_1C6128C08(v51, &v150);
              }
              while (v52 < *(_DWORD *)(result + 8));
            }
            while (v9 < v49)
            {
              v53 = *v9;
              *v9 = *v49;
              *v49 = v53;
              do
              {
                v54 = v9[1];
                ++v9;
                v55 = (uint64_t *)(*a3 + 576);
                v151 = **(_QWORD **)(v42 + 80);
                v56 = *((_DWORD *)sub_1C6128C08(v55, &v151) + 2);
                v150 = **(_QWORD **)(v54 + 80);
              }
              while (v56 >= *((_DWORD *)sub_1C6128C08(v55, &v150) + 2));
              do
              {
                v57 = *--v49;
                v58 = (uint64_t *)(*a3 + 576);
                v151 = **(_QWORD **)(v42 + 80);
                v59 = *((_DWORD *)sub_1C6128C08(v58, &v151) + 2);
                v150 = **(_QWORD **)(v57 + 80);
                result = (uint64_t)sub_1C6128C08(v58, &v150);
              }
              while (v59 < *(_DWORD *)(result + 8));
            }
            v60 = v9 - 1;
            if (v9 - 1 != v149)
              *v149 = *v60;
            a5 = 0;
            *v60 = v42;
            continue;
          }
        }
        v16 = 0;
        v17 = *v10;
        do
        {
          v18 = (uint64_t *)(*a3 + 576);
          v151 = **(_QWORD **)(v10[v16 + 1] + 80);
          v19 = *((_DWORD *)sub_1C6128C08(v18, &v151) + 2);
          v150 = **(_QWORD **)(v17 + 80);
          ++v16;
        }
        while (v19 < *((_DWORD *)sub_1C6128C08(v18, &v150) + 2));
        v20 = &v10[v16];
        v21 = a2;
        if (v16 == 1)
        {
          v21 = a2;
          do
          {
            if (v20 >= v21)
              break;
            v35 = *--v21;
            v36 = (uint64_t *)(*a3 + 576);
            v151 = **(_QWORD **)(v35 + 80);
            v37 = *((_DWORD *)sub_1C6128C08(v36, &v151) + 2);
            v150 = **(_QWORD **)(v17 + 80);
          }
          while (v37 >= *((_DWORD *)sub_1C6128C08(v36, &v150) + 2));
        }
        else
        {
          do
          {
            v22 = *--v21;
            v23 = (uint64_t *)(*a3 + 576);
            v151 = **(_QWORD **)(v22 + 80);
            v24 = *((_DWORD *)sub_1C6128C08(v23, &v151) + 2);
            v150 = **(_QWORD **)(v17 + 80);
          }
          while (v24 >= *((_DWORD *)sub_1C6128C08(v23, &v150) + 2));
        }
        v9 = v20;
        if (v20 < v21)
        {
          v25 = v21;
          do
          {
            v26 = *v9;
            *v9 = *v25;
            *v25 = v26;
            do
            {
              v27 = v9[1];
              ++v9;
              v28 = (uint64_t *)(*a3 + 576);
              v151 = **(_QWORD **)(v27 + 80);
              v29 = *((_DWORD *)sub_1C6128C08(v28, &v151) + 2);
              v150 = **(_QWORD **)(v17 + 80);
            }
            while (v29 < *((_DWORD *)sub_1C6128C08(v28, &v150) + 2));
            do
            {
              v30 = *--v25;
              v31 = (uint64_t *)(*a3 + 576);
              v151 = **(_QWORD **)(v30 + 80);
              v32 = *((_DWORD *)sub_1C6128C08(v31, &v151) + 2);
              v150 = **(_QWORD **)(v17 + 80);
            }
            while (v32 >= *((_DWORD *)sub_1C6128C08(v31, &v150) + 2));
          }
          while (v9 < v25);
        }
        v33 = v9 - 1;
        v8 = v149;
        if (v9 - 1 != v149)
          *v149 = *v33;
        *v33 = v17;
        if (v20 < v21)
        {
LABEL_25:
          result = sub_1C5306340(v149, v9 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v34 = sub_1C5307408(v149, v9 - 1, a3);
        result = sub_1C5307408(v9, a2, a3);
        if (!(_DWORD)result)
        {
          if (v34)
            continue;
          goto LABEL_25;
        }
        a2 = v9 - 1;
        if (!v34)
          goto LABEL_2;
        return result;
    }
  }
}

_QWORD *sub_1C5307008(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_1C530767C(a1, a2, a3, a4, a6);
  v12 = *a4;
  v13 = (uint64_t *)(*a6 + 576);
  v30 = **(_QWORD **)(*a5 + 80);
  v14 = *((_DWORD *)sub_1C6128C08(v13, &v30) + 2);
  v29 = **(_QWORD **)(v12 + 80);
  result = sub_1C6128C08(v13, &v29);
  if (v14 < *((_DWORD *)result + 2))
  {
    v16 = *a4;
    *a4 = *a5;
    *a5 = v16;
    v17 = *a3;
    v18 = (uint64_t *)(*a6 + 576);
    v30 = **(_QWORD **)(*a4 + 80);
    v19 = *((_DWORD *)sub_1C6128C08(v18, &v30) + 2);
    v29 = **(_QWORD **)(v17 + 80);
    result = sub_1C6128C08(v18, &v29);
    if (v19 < *((_DWORD *)result + 2))
    {
      v20 = *a3;
      *a3 = *a4;
      *a4 = v20;
      v21 = *a2;
      v22 = (uint64_t *)(*a6 + 576);
      v30 = **(_QWORD **)(*a3 + 80);
      v23 = *((_DWORD *)sub_1C6128C08(v22, &v30) + 2);
      v29 = **(_QWORD **)(v21 + 80);
      result = sub_1C6128C08(v22, &v29);
      if (v23 < *((_DWORD *)result + 2))
      {
        v24 = *a2;
        *a2 = *a3;
        *a3 = v24;
        v25 = *a1;
        v26 = (uint64_t *)(*a6 + 576);
        v30 = **(_QWORD **)(*a2 + 80);
        v27 = *((_DWORD *)sub_1C6128C08(v26, &v30) + 2);
        v29 = **(_QWORD **)(v25 + 80);
        result = sub_1C6128C08(v26, &v29);
        if (v27 < *((_DWORD *)result + 2))
        {
          v28 = *a1;
          *a1 = *a2;
          *a2 = v28;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C53071EC(uint64_t *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unsigned int v15;
  _QWORD *result;
  uint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v8 = *a1;
  v9 = (uint64_t *)(*a4 + 576);
  v28 = **(_QWORD **)(*a2 + 80);
  v10 = *((_DWORD *)sub_1C6128C08(v9, &v28) + 2);
  v27 = **(_QWORD **)(v8 + 80);
  v11 = sub_1C6128C08(v9, &v27);
  v12 = *a3;
  v13 = *a2;
  v14 = (uint64_t *)(*a4 + 576);
  if (v10 >= *((_DWORD *)v11 + 2))
  {
    v28 = **(_QWORD **)(v12 + 80);
    v18 = *((_DWORD *)sub_1C6128C08(v14, &v28) + 2);
    v27 = **(_QWORD **)(v13 + 80);
    result = sub_1C6128C08(v14, &v27);
    if (v18 < *((_DWORD *)result + 2))
    {
      v22 = *a2;
      *a2 = *a3;
      *a3 = v22;
      v23 = *a1;
      v24 = (uint64_t *)(*a4 + 576);
      v28 = **(_QWORD **)(*a2 + 80);
      v25 = *((_DWORD *)sub_1C6128C08(v24, &v28) + 2);
      v27 = **(_QWORD **)(v23 + 80);
      result = sub_1C6128C08(v24, &v27);
      if (v25 < *((_DWORD *)result + 2))
      {
        v26 = *a1;
        *a1 = *a2;
        *a2 = v26;
      }
    }
  }
  else
  {
    v28 = **(_QWORD **)(v12 + 80);
    v15 = *((_DWORD *)sub_1C6128C08(v14, &v28) + 2);
    v27 = **(_QWORD **)(v13 + 80);
    result = sub_1C6128C08(v14, &v27);
    v17 = *a1;
    if (v15 >= *((_DWORD *)result + 2))
    {
      *a1 = *a2;
      *a2 = v17;
      v19 = (uint64_t *)(*a4 + 576);
      v28 = **(_QWORD **)(*a3 + 80);
      v20 = *((_DWORD *)sub_1C6128C08(v19, &v28) + 2);
      v27 = **(_QWORD **)(v17 + 80);
      result = sub_1C6128C08(v19, &v27);
      if (v20 < *((_DWORD *)result + 2))
      {
        v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
      }
    }
    else
    {
      *a1 = *a3;
      *a3 = v17;
    }
  }
  return result;
}

BOOL sub_1C5307408(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v20 = *a1;
      v21 = (uint64_t *)(*a3 + 576);
      v26 = **(_QWORD **)(*(a2 - 1) + 80);
      v22 = *((_DWORD *)sub_1C6128C08(v21, &v26) + 2);
      v25 = **(_QWORD **)(v20 + 80);
      if (v22 < *((_DWORD *)sub_1C6128C08(v21, &v25) + 2))
      {
        v23 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v23;
      }
      return 1;
    case 3:
      sub_1C53071EC(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C530767C(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C5307008(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C53071EC(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    v12 = *v8;
    v13 = (uint64_t *)(*a3 + 576);
    v26 = **(_QWORD **)(*v9 + 80);
    v14 = *((_DWORD *)sub_1C6128C08(v13, &v26) + 2);
    v25 = **(_QWORD **)(v12 + 80);
    if (v14 < *((_DWORD *)sub_1C6128C08(v13, &v25) + 2))
    {
      v24 = *v9;
      v15 = v10;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15 + 24) = *(uint64_t *)((char *)a1 + v15 + 16);
        if (v15 == -16)
          break;
        v16 = *(uint64_t *)((char *)a1 + v15 + 8);
        v17 = (uint64_t *)(*a3 + 576);
        v26 = **(_QWORD **)(v24 + 80);
        v18 = *((_DWORD *)sub_1C6128C08(v17, &v26) + 2);
        v25 = **(_QWORD **)(v16 + 80);
        v15 -= 8;
        if (v18 >= *((_DWORD *)sub_1C6128C08(v17, &v25) + 2))
        {
          v19 = (uint64_t *)((char *)a1 + v15 + 24);
          goto LABEL_11;
        }
      }
      v19 = a1;
LABEL_11:
      *v19 = v24;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    result = 1;
    if (++v9 == a2)
      return result;
  }
}

_QWORD *sub_1C530767C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1C53071EC(a1, a2, a3, a5);
  v10 = *a3;
  v11 = (uint64_t *)(*a5 + 576);
  v24 = **(_QWORD **)(*a4 + 80);
  v12 = *((_DWORD *)sub_1C6128C08(v11, &v24) + 2);
  v23 = **(_QWORD **)(v10 + 80);
  result = sub_1C6128C08(v11, &v23);
  if (v12 < *((_DWORD *)result + 2))
  {
    v14 = *a3;
    *a3 = *a4;
    *a4 = v14;
    v15 = *a2;
    v16 = (uint64_t *)(*a5 + 576);
    v24 = **(_QWORD **)(*a3 + 80);
    v17 = *((_DWORD *)sub_1C6128C08(v16, &v24) + 2);
    v23 = **(_QWORD **)(v15 + 80);
    result = sub_1C6128C08(v16, &v23);
    if (v17 < *((_DWORD *)result + 2))
    {
      v18 = *a2;
      *a2 = *a3;
      *a3 = v18;
      v19 = *a1;
      v20 = (uint64_t *)(*a5 + 576);
      v24 = **(_QWORD **)(*a2 + 80);
      v21 = *((_DWORD *)sub_1C6128C08(v20, &v24) + 2);
      v23 = **(_QWORD **)(v19 + 80);
      result = sub_1C6128C08(v20, &v23);
      if (v21 < *((_DWORD *)result + 2))
      {
        v22 = *a1;
        *a1 = *a2;
        *a2 = v22;
      }
    }
  }
  return result;
}

uint64_t sub_1C53077F4()
{
  uint64_t result;
  int v1;
  int *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Act like old LiveDebugValues did";
  v3.n128_u64[1] = 32;
  LOBYTE(v1) = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED804140, "emulate-old-livedebugvalues", &v4, &v3, (_BYTE **)&v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED804140, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"livedebugvalues-stack-ws-limit";
  v3.n128_u64[1] = 30;
  v1 = 250;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED804200, "livedebugvalues-max-stack-slots", &v4, &v3, &v2);
  result = __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED804200, &dword_1C475E000);
  LiveDebugValues::ValueIDNum::EmptyValue = -1;
  LiveDebugValues::ValueIDNum::TombstoneValue = 0xFFFFFEFFFFFFFFFFLL;
  return result;
}

_QWORD *llvm::AbstractCallSite::getCallbackUses(_QWORD *result, uint64_t a2)
{
  uint64_t ***v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v3 = result - 4;
  v2 = (uint64_t ***)*(result - 4);
  if (!v2)
    return result;
  if (*((_BYTE *)v2 + 16))
    return result;
  v4 = result;
  if (v2[3] != (uint64_t **)result[9] || (*((_BYTE *)v2 + 23) & 0x20) == 0)
    return result;
  v6 = ***v2;
  v44 = *(result - 4);
  v7 = *(_DWORD *)(v6 + 2496);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 2480);
    v9 = v7 - 1;
    v10 = v9 & ((v2 >> 4) ^ (v2 >> 9));
    result = (_QWORD *)(v8 + 40 * v10);
    v11 = *result;
    if ((uint64_t ***)*result == v2)
      goto LABEL_16;
    v12 = 0;
    v13 = 1;
    while (v11 != -4096)
    {
      if (v12)
        v14 = 0;
      else
        v14 = v11 == -8192;
      if (v14)
        v12 = result;
      v15 = v10 + v13++;
      v10 = v15 & v9;
      result = (_QWORD *)(v8 + 40 * v10);
      v11 = *result;
      if ((uint64_t ***)*result == v2)
        goto LABEL_16;
    }
    if (v12)
      v36 = v12;
    else
      v36 = result;
  }
  else
  {
    v36 = 0;
  }
  result = sub_1C541AB24(v6 + 2480, (uint64_t)&v44, &v44, v36);
  v37 = v44;
  result[3] = 0;
  result[4] = 0;
  *result = v37;
  result[1] = result + 3;
  result[2] = 0x100000000;
LABEL_16:
  v16 = *((unsigned int *)result + 4);
  if ((_DWORD)v16)
  {
    v17 = (_QWORD *)(result[1] + 8);
    v18 = 16 * v16;
    while (*((_DWORD *)v17 - 2) != 26)
    {
      v17 += 2;
      v18 -= 16;
      if (!v18)
        return result;
    }
    v19 = *v17;
    if (v19)
    {
      v20 = *(unsigned int *)(v19 + 8);
      if ((_DWORD)v20)
      {
        v21 = a2 + 16;
        v22 = v4 - 1;
        v23 = -8 * v20;
        do
        {
          v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + v23) - 8 * *(unsigned int *)(*(_QWORD *)(v19 + v23) + 8))
                          + 128);
          v25 = (unint64_t *)(v24 + 24);
          if (*(_DWORD *)(v24 + 32) >= 0x41u)
            v25 = (unint64_t *)*v25;
          v26 = *((unsigned __int8 *)v4 + 16);
          if (v26 == 84)
          {
            v27 = 0;
          }
          else if (v26 == 39)
          {
            v27 = (*((_DWORD *)v4 + 20) + 1);
          }
          else
          {
            v27 = 2;
          }
          v28 = *((_DWORD *)v4 + 5);
          if (v28 < 0 && (v35 = v28 & 0x7FFFFFF, (v22[-4 * v35] & 0xFFFFFFFF0) != 0))
          {
            v30 = -v35;
            v29 = *((_DWORD *)&v4[-4 * v35 - 1] - 1) - *(_DWORD *)((char *)v4 - v4[-4 * v35 - 1] + -32 * v35);
          }
          else
          {
            v29 = 0;
            v30 = -(uint64_t)(v28 & 0x7FFFFFF);
          }
          v31 = *v25;
          v32 = (uint64_t)&v3[4 * -v29 + -4 * v27];
          v33 = &v4[4 * v30];
          if (v31 < ((unint64_t)(v32 - (_QWORD)v33) >> 5))
          {
            v34 = *(unsigned int *)(a2 + 8);
            if (v34 >= *(unsigned int *)(a2 + 12))
            {
              v42 = v23;
              v43 = v21;
              v39 = v22;
              v40 = v19;
              v38 = v31;
              v41 = v33;
              result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v21, v34 + 1, 8);
              v33 = v41;
              v23 = v42;
              v31 = v38;
              v22 = v39;
              v19 = v40;
              v21 = v43;
              v34 = *(unsigned int *)(a2 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a2 + 8 * v34) = &v33[4 * v31];
            ++*(_DWORD *)(a2 + 8);
          }
          v23 += 8;
        }
        while (v23);
      }
    }
  }
  return result;
}

llvm::AbstractCallSite *llvm::AbstractCallSite::AbstractCallSite(llvm::AbstractCallSite *this, const llvm::Use *a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  const llvm::Use *v9;
  char *v10;
  _QWORD *v11;
  unsigned int *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  unint64_t v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v3 = *((_QWORD *)a2 + 3);
  v4 = *(unsigned __int8 *)(v3 + 16);
  if (v4 < 0x1C)
  {
    v10 = (char *)this + 24;
    *((_QWORD *)this + 1) = (char *)this + 24;
    v11 = (_QWORD *)((char *)this + 8);
    *(_QWORD *)this = 0;
    *((_DWORD *)this + 4) = 0;
    v12 = (unsigned int *)((char *)this + 16);
    *((_DWORD *)this + 5) = 0;
    if (v4 != 5)
      return this;
    v9 = *(const llvm::Use **)(v3 + 8);
    if (!v9)
      return this;
    if (*((_QWORD *)v9 + 1))
      return this;
    if (*(unsigned __int16 *)(v3 + 18) - 38 > 0xC)
      return this;
    v3 = *((_QWORD *)v9 + 3);
    v15 = *(unsigned __int8 *)(v3 + 16);
    if (v15 < 0x1C)
      return this;
    v16 = v15 - 33;
    v6 = v16 > 0x33;
    v17 = (1 << v16) & 0x8000000000041;
    if (v6 || v17 == 0)
      return this;
    *(_QWORD *)this = v3;
  }
  else
  {
    v5 = v4 - 33;
    v6 = v5 > 0x33;
    v7 = (1 << v5) & 0x8000000000041;
    if (v6 || v7 == 0)
    {
      *(_QWORD *)this = 0;
      *((_QWORD *)this + 1) = (char *)this + 24;
      *((_QWORD *)this + 2) = 0;
      return this;
    }
    v9 = a2;
    *(_QWORD *)this = v3;
    v10 = (char *)this + 24;
    *((_QWORD *)this + 1) = (char *)this + 24;
    v11 = (_QWORD *)((char *)this + 8);
    *((_DWORD *)this + 4) = 0;
    v12 = (unsigned int *)((char *)this + 16);
    *((_DWORD *)this + 5) = 0;
  }
  v13 = (uint64_t *)(v3 - 32);
  if ((const llvm::Use *)(v3 - 32) == v9)
    return this;
  v14 = *v13;
  if (!*v13
    || *(_BYTE *)(v14 + 16)
    || *(_QWORD *)(v14 + 24) != *(_QWORD *)(v3 + 72)
    || (*(_BYTE *)(v14 + 23) & 0x20) == 0)
  {
LABEL_11:
    *(_QWORD *)this = 0;
    return this;
  }
  v20 = ***(_QWORD ***)v14;
  v65 = *v13;
  v21 = *(_DWORD *)(v20 + 2496);
  if (!v21)
  {
    v44 = 0;
LABEL_51:
    v25 = sub_1C541AB24(v20 + 2480, (uint64_t)&v65, &v65, v44);
    v45 = v65;
    v25[3] = 0;
    v25[4] = 0;
    *v25 = v45;
    v25[1] = v25 + 3;
    v25[2] = 0x100000000;
    goto LABEL_35;
  }
  v22 = *(_QWORD *)(v20 + 2480);
  v23 = v21 - 1;
  v24 = v23 & ((v14 >> 4) ^ (v14 >> 9));
  v25 = (_QWORD *)(v22 + 40 * v24);
  v26 = *v25;
  if (*v25 != v14)
  {
    v27 = 0;
    v28 = 1;
    while (v26 != -4096)
    {
      if (v27)
        v29 = 0;
      else
        v29 = v26 == -8192;
      if (v29)
        v27 = v25;
      v30 = v24 + v28++;
      v24 = v30 & v23;
      v25 = (_QWORD *)(v22 + 40 * v24);
      v26 = *v25;
      if (*v25 == v14)
        goto LABEL_35;
    }
    if (v27)
      v44 = v27;
    else
      v44 = v25;
    goto LABEL_51;
  }
LABEL_35:
  v31 = *((unsigned int *)v25 + 4);
  if (!(_DWORD)v31)
    goto LABEL_11;
  v32 = (_QWORD *)(v25[1] + 8);
  v33 = 16 * v31;
  while (*((_DWORD *)v32 - 2) != 26)
  {
    v32 += 2;
    v33 -= 16;
    if (!v33)
      goto LABEL_11;
  }
  v34 = *v32;
  if (!*v32)
    goto LABEL_11;
  v35 = *(unsigned int *)(v34 + 8);
  if (!(_DWORD)v35)
    goto LABEL_11;
  v36 = *(_QWORD *)this;
  v37 = *(_DWORD *)(*(_QWORD *)this + 20);
  v38 = *(_QWORD *)this - 32 * (v37 & 0x7FFFFFF);
  v39 = -8 * v35;
  while (1)
  {
    v40 = *(_QWORD *)(v34 + v39);
    v41 = *(unsigned int *)(v40 + 8);
    v42 = *(_QWORD *)(*(_QWORD *)(v40 - 8 * v41) + 128);
    v43 = (_QWORD *)(v42 + 24);
    if (*(_DWORD *)(v42 + 32) >= 0x41u)
      v43 = (_QWORD *)*v43;
    if (*v43 == (((unint64_t)v9 - v38) >> 5))
      break;
    v39 += 8;
    if (!v39)
      goto LABEL_11;
  }
  v46 = *(unsigned __int8 *)(v36 + 16);
  if (v46 == 84)
  {
    v47 = 0;
  }
  else if (v46 == 39)
  {
    v47 = (*(_DWORD *)(v36 + 80) + 1);
  }
  else
  {
    v47 = 2;
  }
  if (v37 < 0)
  {
    v61 = *(_QWORD *)(v38 - 8);
    if ((v61 & 0xFFFFFFFF0) != 0)
      v48 = (*(_DWORD *)(v38 - 12) - *(_DWORD *)(v38 - v61));
    else
      v48 = 0;
  }
  else
  {
    v48 = 0;
  }
  v49 = (v41 - 1);
  if ((_DWORD)v41 != 1)
  {
    v50 = v40;
    do
    {
      v51 = *(_QWORD *)(*(_QWORD *)(v50 - 8 * *(unsigned int *)(v40 + 8)) + 128);
      v52 = *(_DWORD *)(v51 + 32);
      if (v52 > 0x40)
        v53 = **(_QWORD **)(v51 + 24);
      else
        v53 = (uint64_t)(*(_QWORD *)(v51 + 24) << -(char)v52) >> -(char)v52;
      v54 = *((unsigned int *)this + 4);
      if (v54 >= *((unsigned int *)this + 5))
      {
        v63 = v47;
        v64 = v38;
        v62 = v48;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, (uint64_t)v10, v54 + 1, 4);
        v48 = v62;
        v47 = v63;
        v38 = v64;
        v54 = *v12;
      }
      *(_DWORD *)(*v11 + 4 * v54) = v53;
      ++*v12;
      v50 += 8;
      --v49;
    }
    while (v49);
  }
  if (*(_DWORD *)(*(_QWORD *)(v14 + 24) + 8) > 0xFFu)
  {
    v55 = v38;
    v56 = v47;
    v57 = v48;
    if ((llvm::Constant::isNullValue(*(llvm::Constant **)(*(_QWORD *)(v40
                                                                     - 8 * *(unsigned int *)(v40 + 8)
                                                                     + 8 * (*(_DWORD *)(v40 + 8) - 1))
                                                         + 128)) & 1) == 0)
    {
      v58 = (v36 - 32 * v56 + 32 * (unint64_t)-v57 - v55 - 32) >> 5;
      v59 = *(_DWORD *)(v14 + 96);
      if (v59 < v58)
      {
        v60 = *v12;
        do
        {
          if (v60 >= *((_DWORD *)this + 5))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, (uint64_t)v10, v60 + 1, 4);
            v60 = *v12;
          }
          *(_DWORD *)(*v11 + 4 * v60) = v59;
          v60 = *v12 + 1;
          *v12 = v60;
          ++v59;
        }
        while ((_DWORD)v58 != v59);
      }
    }
  }
  return this;
}

void llvm::AssemblyAnnotationWriter::~AssemblyAnnotationWriter(llvm::AssemblyAnnotationWriter *this)
{
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *llvm::printLLVMNameWithoutPrefix(llvm::raw_ostream *result, llvm::raw_ostream *a2, size_t a3)
{
  llvm::raw_ostream *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  _BYTE *v12;
  _BYTE *v13;
  void *v14;

  v5 = result;
  v6 = MEMORY[0x1E0C80978];
  if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(unsigned __int8 *)a2 + 60) & 0x400) != 0)
    goto LABEL_18;
  if (a3)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = *((char *)a2 + v7);
      v10 = *((unsigned __int8 *)a2 + v7);
      if (v9 < 0)
      {
        if (__maskrune(*((unsigned __int8 *)a2 + v7), 0x500uLL))
          goto LABEL_16;
      }
      else if ((*(_DWORD *)(v6 + 4 * v10 + 60) & 0x500) != 0)
      {
        goto LABEL_16;
      }
      if (v9 - 45 > 0x32
        || ((1 << (v9 - 45)) & 0x4000000000003) == 0)
      {
        v8 = 1;
      }
      if ((v10 - 45) > 0x32 || ((1 << (v10 - 45)) & 0x4000000000003) == 0)
      {
LABEL_17:
        if ((v8 & 1) != 0)
        {
LABEL_18:
          v12 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v12 >= *((_QWORD *)v5 + 3))
          {
            llvm::raw_ostream::write(v5, 34);
          }
          else
          {
            *((_QWORD *)v5 + 4) = v12 + 1;
            *v12 = 34;
          }
          result = llvm::printEscapedString(a2, a3, v5);
          v13 = (_BYTE *)*((_QWORD *)v5 + 4);
          if ((unint64_t)v13 >= *((_QWORD *)v5 + 3))
          {
            return llvm::raw_ostream::write(v5, 34);
          }
          else
          {
            *((_QWORD *)v5 + 4) = v13 + 1;
            *v13 = 34;
          }
        }
        else
        {
          v14 = (void *)*((_QWORD *)v5 + 4);
          if (a3 <= *((_QWORD *)v5 + 3) - (_QWORD)v14)
          {
            result = (llvm::raw_ostream *)memcpy(v14, a2, a3);
            *((_QWORD *)v5 + 4) += a3;
          }
          else
          {
            return llvm::raw_ostream::write(v5, (const char *)a2, a3);
          }
        }
        return result;
      }
LABEL_16:
      if (a3 == ++v7)
        goto LABEL_17;
    }
  }
  return result;
}

uint64_t llvm::ModuleSlotTracker::ModuleSlotTracker(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)result = &off_1E814DC18;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = a4;
  *(_QWORD *)(result + 40) = a2;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 104) = 0;
  return result;
}

{
  *(_QWORD *)result = &off_1E814DC18;
  *(_QWORD *)(result + 8) = 0;
  *(_WORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a3;
  *(_QWORD *)(result + 32) = a4;
  *(_QWORD *)(result + 40) = a2;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 104) = 0;
  return result;
}

uint64_t llvm::ModuleSlotTracker::ModuleSlotTracker(uint64_t result, uint64_t a2, char a3)
{
  *(_QWORD *)result = &off_1E814DC18;
  *(_QWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 16) = a2 != 0;
  *(_BYTE *)(result + 17) = a3;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void llvm::ModuleSlotTracker::~ModuleSlotTracker(llvm::ModuleSlotTracker *this)
{
  llvm::ModuleSlotTracker *v1;
  llvm::ModuleSlotTracker *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  llvm::ModuleSlotTracker *v6;
  llvm::ModuleSlotTracker *v7;

  *(_QWORD *)this = &off_1E814DC18;
  v1 = (llvm::ModuleSlotTracker *)*((_QWORD *)this + 13);
  if (v1 == (llvm::ModuleSlotTracker *)((char *)this + 80))
  {
    v6 = this;
    v4 = 4;
    v1 = (llvm::ModuleSlotTracker *)((char *)this + 80);
  }
  else
  {
    if (!v1)
      goto LABEL_3;
    v6 = this;
    v4 = 5;
  }
  (*(void (**)(llvm::ModuleSlotTracker *))(*(_QWORD *)v1 + 8 * v4))(v1);
  this = v6;
LABEL_3:
  v2 = (llvm::ModuleSlotTracker *)*((_QWORD *)this + 9);
  if (v2 == (llvm::ModuleSlotTracker *)((char *)this + 48))
  {
    v7 = this;
    v5 = 4;
    v2 = (llvm::ModuleSlotTracker *)((char *)this + 48);
  }
  else
  {
    if (!v2)
      goto LABEL_5;
    v7 = this;
    v5 = 5;
  }
  (*(void (**)(llvm::ModuleSlotTracker *))(*(_QWORD *)v2 + 8 * v5))(v2);
  this = v7;
LABEL_5:
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

{
  llvm::ModuleSlotTracker::~ModuleSlotTracker(this);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *llvm::SlotTracker::setProcessHook(uint64_t a1, _QWORD *a2)
{
  return sub_1C6225AA8((_QWORD *)(a1 + 32), a2);
}

{
  return sub_1C6225AA8((_QWORD *)(a1 + 64), a2);
}

_DWORD *llvm::SlotTracker::purgeFunction(llvm::SlotTracker *this)
{
  _DWORD *result;

  result = sub_1C4ECAD30((_DWORD *)this + 34);
  *((_QWORD *)this + 2) = 0;
  *((_BYTE *)this + 24) = 0;
  return result;
}

uint64_t llvm::SlotTracker::getLocalSlot(llvm::SlotTracker *this, const llvm::Value *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const llvm::Value *v8;
  int v9;
  int v10;

  if (*((_QWORD *)this + 1))
  {
    llvm::SlotTracker::processModule(this);
    *((_QWORD *)this + 1) = 0;
  }
  if (*((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
    llvm::SlotTracker::processFunction(this);
  v4 = *((_QWORD *)this + 17);
  v5 = *((unsigned int *)this + 38);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = v4 + 16 * v6;
    v8 = *(const llvm::Value **)v7;
    if (*(const llvm::Value **)v7 == a2)
      goto LABEL_13;
    v9 = 1;
    while (v8 != (const llvm::Value *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(const llvm::Value **)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = v4 + 16 * v6;
        goto LABEL_13;
      }
    }
  }
  v7 = v4 + 16 * v5;
LABEL_13:
  if (v7 == v4 + 16 * v5)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(v7 + 8);
}

uint64_t llvm::SlotTracker::SlotTracker(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E814DC38;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = a2;
  *(_DWORD *)(result + 128) = 0;
  *(_DWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 192) = 0;
  *(_DWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_DWORD *)(result + 152) = 0;
  *(_DWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_DWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 240) = 0;
  *(_QWORD *)(result + 248) = 0x1000000000;
  *(_DWORD *)(result + 264) = 0;
  *(_DWORD *)(result + 296) = 0;
  *(_DWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 272) = 0;
  *(_QWORD *)(result + 280) = 0;
  *(_QWORD *)(result + 304) = 0;
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 320) = 0x1000000000;
  *(_DWORD *)(result + 336) = 0;
  return result;
}

{
  *(_QWORD *)(result + 56) = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E814DC38;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)(result + 88) = 0;
  *(_QWORD *)(result + 96) = a2;
  *(_DWORD *)(result + 128) = 0;
  *(_DWORD *)(result + 160) = 0;
  *(_DWORD *)(result + 192) = 0;
  *(_DWORD *)(result + 224) = 0;
  *(_QWORD *)(result + 104) = 0;
  *(_QWORD *)(result + 112) = 0;
  *(_DWORD *)(result + 120) = 0;
  *(_QWORD *)(result + 136) = 0;
  *(_QWORD *)(result + 144) = 0;
  *(_DWORD *)(result + 152) = 0;
  *(_DWORD *)(result + 184) = 0;
  *(_QWORD *)(result + 168) = 0;
  *(_QWORD *)(result + 176) = 0;
  *(_QWORD *)(result + 200) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_DWORD *)(result + 216) = 0;
  *(_QWORD *)(result + 232) = 0;
  *(_QWORD *)(result + 240) = 0;
  *(_QWORD *)(result + 248) = 0x1000000000;
  *(_DWORD *)(result + 264) = 0;
  *(_DWORD *)(result + 296) = 0;
  *(_DWORD *)(result + 288) = 0;
  *(_QWORD *)(result + 272) = 0;
  *(_QWORD *)(result + 280) = 0;
  *(_QWORD *)(result + 304) = 0;
  *(_QWORD *)(result + 312) = 0;
  *(_QWORD *)(result + 320) = 0x1000000000;
  *(_DWORD *)(result + 336) = 0;
  return result;
}

uint64_t llvm::SlotTracker::initializeIndexIfNeeded(llvm::SlotTracker *this)
{
  uint64_t result;

  if (!*((_QWORD *)this + 12))
    return 0;
  result = llvm::SlotTracker::processIndex(this);
  *((_QWORD *)this + 12) = 0;
  return result;
}

uint64_t llvm::SlotTracker::processIndex(llvm::SlotTracker *this)
{
  llvm::SlotTracker *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *i;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t **v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  char v28;
  int v29;
  int *v30;
  size_t v31;
  size_t v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  llvm::StringMapImpl *v37;
  llvm::StringMapImpl *v38;
  unsigned __int8 *v39;
  char v40;
  size_t v41;
  int v42;
  unsigned int v43;
  int v44;
  size_t v45;
  unsigned __int8 *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  int v61;
  uint64_t *k;
  _QWORD *v63;
  llvm::StringMapImpl *v65;
  llvm::StringMapImpl *v66;
  llvm::StringMapImpl *v69;
  size_t v70;
  int v71;
  unsigned int v72;
  int v73;
  size_t v74;
  unsigned __int8 *v75;
  int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t *j;
  _QWORD *v90;
  uint64_t *v92;
  uint64_t **v93;
  llvm::StringMapImpl *v94;
  llvm::StringMapImpl *v95;
  llvm::StringMapImpl *v96;
  _QWORD *v97;
  int v98;
  int v99;
  unsigned __int8 *__src;
  unsigned __int8 *__srca;
  uint64_t **v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;

  v1 = this;
  v109 = *MEMORY[0x1E0C80C00];
  v104 = 0;
  v105 = 0;
  v103 = &v104;
  v2 = *((_QWORD *)this + 12);
  v3 = *(_QWORD **)(v2 + 24);
  v4 = *(unsigned int *)(v2 + 32);
  if ((_DWORD)v4)
  {
    for (i = v3; !*i || *i == -8; ++i)
      ;
  }
  else
  {
    i = v3;
  }
  v6 = &v3[v4];
  if (i != v6)
  {
    v7 = (_QWORD *)*i;
    do
    {
      v8 = (uint64_t *)*v7;
      v9 = v104;
      v10 = &v104;
      v11 = &v104;
      if (v104)
      {
        v12 = v7[1];
        while (1)
        {
          while (1)
          {
            v11 = (uint64_t **)v9;
            v13 = v9[4];
            if (v13 <= v12)
              break;
            v9 = *v11;
            v10 = v11;
            if (!*v11)
              goto LABEL_13;
          }
          if (v13 >= v12)
            break;
          v9 = v11[1];
          if (!v9)
          {
            v10 = v11 + 1;
            goto LABEL_13;
          }
        }
      }
      else
      {
LABEL_13:
        v14 = (uint64_t *)v11;
        v11 = (uint64_t **)operator new(0x38uLL);
        v15 = (uint64_t *)v7[1];
        *v11 = 0;
        v11[1] = 0;
        v11[4] = v15;
        v11[5] = 0;
        v11[6] = 0;
        v11[2] = v14;
        *v10 = (uint64_t *)v11;
        v16 = (uint64_t *)v11;
        if (*v103)
        {
          v103 = (uint64_t **)*v103;
          v16 = *v10;
        }
        sub_1C4768E74(v104, v16);
        ++v105;
      }
      v11[5] = v7 + 5;
      v11[6] = v8;
      do
      {
        v17 = (_QWORD *)i[1];
        ++i;
        v7 = v17;
        if (v17)
          v18 = v7 + 1 == 0;
        else
          v18 = 1;
      }
      while (v18);
    }
    while (i != v6);
    v19 = (uint64_t *)v103;
    if (v103 != &v104)
    {
      v69 = (llvm::SlotTracker *)((char *)v1 + 232);
      v96 = (llvm::SlotTracker *)((char *)v1 + 232);
      while (1)
      {
        v70 = v19[6];
        __srca = (unsigned __int8 *)v19[5];
        v71 = *((_DWORD *)v1 + 66);
        *((_DWORD *)v1 + 66) = v71 + 1;
        v72 = *((_DWORD *)v1 + 60);
        if (!v72)
        {
          *((_DWORD *)v1 + 61) = 0;
          *((_DWORD *)v1 + 62) = 0;
          v90 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
          if (!v90)
LABEL_141:
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          v90[16] = 2;
          *((_QWORD *)v1 + 29) = v90;
          v72 = 16;
          *((_DWORD *)v1 + 60) = 16;
        }
        v99 = v71;
        v73 = 0;
        if (v70)
        {
          v74 = v70;
          v75 = __srca;
          do
          {
            v76 = *v75++;
            v73 = 33 * v73 + v76;
            --v74;
          }
          while (v74);
        }
        v77 = *(_QWORD *)v69;
        v78 = v72 - 1;
        v79 = v77 + 8 * v72 + 8;
        v80 = -1;
        v81 = 1;
        v82 = v73;
        while (1)
        {
          v83 = v82 & v78;
          v84 = *(_QWORD *)(v77 + 8 * v83);
          if (!v84)
            break;
          if (v84 == -8)
          {
            if (v80 == -1)
              v80 = v82 & v78;
          }
          else if (*(_DWORD *)(v79 + 4 * v83) == v73
                 && v70 == *(_QWORD *)v84
                 && (!v70 || !memcmp(__srca, (const void *)(v84 + *((unsigned int *)this + 63)), v70)))
          {
            goto LABEL_120;
          }
          v82 = v81 + v83;
          ++v81;
        }
        v85 = v80;
        if (v80 == -1)
        {
          v85 = v83;
          v83 = v83;
        }
        else
        {
          v83 = v80;
        }
        *(_DWORD *)(v79 + 4 * v85) = v73;
        v84 = *(_QWORD *)(v77 + 8 * v83);
LABEL_120:
        if (!v84)
          goto LABEL_121;
        if (v84 == -8)
          break;
        v1 = this;
        v69 = v96;
LABEL_133:
        *(_DWORD *)(v84 + 8) = v99;
        v92 = (uint64_t *)v19[1];
        if (v92)
        {
          do
          {
            v93 = (uint64_t **)v92;
            v92 = (uint64_t *)*v92;
          }
          while (v92);
        }
        else
        {
          do
          {
            v93 = (uint64_t **)v19[2];
            v18 = *v93 == v19;
            v19 = (uint64_t *)v93;
          }
          while (!v18);
        }
        v19 = (uint64_t *)v93;
        if (v93 == &v104)
          goto LABEL_23;
      }
      --*((_DWORD *)this + 62);
LABEL_121:
      v86 = (char *)operator new(v70 + 17, (std::align_val_t)8uLL);
      v87 = v86;
      v88 = v86 + 16;
      v1 = this;
      if (v70)
        memcpy(v86 + 16, __srca, v70);
      v88[v70] = 0;
      *(_QWORD *)v87 = v70;
      *((_DWORD *)v87 + 2) = 0;
      *(_QWORD *)(v77 + 8 * v83) = v87;
      ++*((_DWORD *)this + 61);
      v69 = v96;
      for (j = (uint64_t *)(*((_QWORD *)this + 29) + 8 * llvm::StringMapImpl::RehashTable(v96, v83)); ; ++j)
      {
        v84 = *j;
        if (*j && v84 != -8)
          break;
      }
      goto LABEL_133;
    }
  }
LABEL_23:
  *((_DWORD *)v1 + 74) = *((_DWORD *)v1 + 66);
  v20 = (_QWORD *)*((_QWORD *)v1 + 12);
  v21 = v20 + 1;
  v22 = (_QWORD *)*v20;
  if ((_QWORD *)*v20 != v20 + 1)
  {
    do
    {
      *(_QWORD *)&v107 = v22[4];
      v23 = *((_DWORD *)v1 + 74);
      *((_DWORD *)v1 + 74) = v23 + 1;
      *((_DWORD *)sub_1C51910A4((uint64_t)v1 + 272, (uint64_t *)&v107) + 2) = v23;
      v24 = (_QWORD *)v22[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_QWORD *)v22[2];
          v18 = *v25 == (_QWORD)v22;
          v22 = v25;
        }
        while (!v18);
      }
      v22 = v25;
    }
    while (v25 != v21);
    v20 = (_QWORD *)*((_QWORD *)v1 + 12);
  }
  v26 = (_QWORD *)v20[10];
  v27 = v20 + 11;
  if (v26 != v20 + 11)
  {
    do
    {
      v28 = *((_BYTE *)v26 + 55);
      v29 = v28;
      if (v28 >= 0)
        v30 = (int *)(v26 + 4);
      else
        v30 = (int *)v26[4];
      v31 = v28 & 0x7F;
      if (v29 >= 0)
        v32 = v31;
      else
        v32 = v26[5];
      v107 = xmmword_1C85F4BB0;
      v108 = 0;
      llvm::MD5::update((int *)&v107, v30, v32);
      llvm::MD5::final((int *)&v107, (int *)&v106);
      *(_QWORD *)&v107 = v106;
      v33 = *((_DWORD *)v1 + 74);
      *((_DWORD *)v1 + 74) = v33 + 1;
      *((_DWORD *)sub_1C51910A4((uint64_t)v1 + 272, (uint64_t *)&v107) + 2) = v33;
      v34 = (_QWORD *)v26[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v26[2];
          v18 = *v35 == (_QWORD)v26;
          v26 = v35;
        }
        while (!v18);
      }
      v26 = v35;
    }
    while (v35 != v27);
    v20 = (_QWORD *)*((_QWORD *)v1 + 12);
  }
  v36 = *((unsigned int *)v1 + 74);
  *((_DWORD *)v1 + 84) = v36;
  v37 = (llvm::StringMapImpl *)v20[7];
  v95 = (llvm::StringMapImpl *)(v20 + 8);
  if (v37 != (llvm::StringMapImpl *)(v20 + 8))
  {
    v38 = (llvm::SlotTracker *)((char *)v1 + 304);
    v97 = (_QWORD *)((char *)v1 + 316);
    v94 = (llvm::SlotTracker *)((char *)v1 + 304);
    while (1)
    {
      v39 = (unsigned __int8 *)*((_QWORD *)v37 + 5);
      v40 = *((_BYTE *)v37 + 63);
      if (v40 >= 0)
        v39 = (unsigned __int8 *)v37 + 40;
      __src = v39;
      if (v40 >= 0)
        v41 = v40 & 0x7F;
      else
        v41 = *((_QWORD *)v37 + 6);
      v42 = *((_DWORD *)v1 + 84);
      *((_DWORD *)v1 + 84) = v42 + 1;
      v43 = *((_DWORD *)v1 + 78);
      if (!v43)
      {
        *v97 = 0;
        v63 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
        if (!v63)
          goto LABEL_141;
        v63[16] = 2;
        *((_QWORD *)v1 + 38) = v63;
        v43 = 16;
        *((_DWORD *)v1 + 78) = 16;
      }
      v98 = v42;
      v44 = 0;
      if (v41)
      {
        v45 = v41;
        v46 = __src;
        do
        {
          v47 = *v46++;
          v44 = 33 * v44 + v47;
          --v45;
        }
        while (v45);
      }
      v48 = *(_QWORD *)v38;
      v49 = *(_QWORD *)v38 + 8 * v43;
      v50 = v43 - 1;
      v51 = v49 + 8;
      v52 = -1;
      v53 = 1;
      v54 = v44;
      while (1)
      {
        v55 = v54 & v50;
        v56 = *(_QWORD *)(v48 + 8 * v55);
        if (!v56)
          break;
        if (v56 == -8)
        {
          if (v52 == -1)
            v52 = v54 & v50;
        }
        else if (*(_DWORD *)(v51 + 4 * v55) == v44
               && v41 == *(_QWORD *)v56
               && (!v41 || !memcmp(__src, (const void *)(v56 + *((unsigned int *)this + 81)), v41)))
        {
          goto LABEL_71;
        }
        v54 = v53 + v55;
        ++v53;
      }
      v57 = v52;
      if (v52 == -1)
      {
        v57 = v55;
        v55 = v55;
      }
      else
      {
        v55 = v52;
      }
      *(_DWORD *)(v51 + 4 * v57) = v44;
      v56 = *(_QWORD *)(v48 + 8 * v55);
LABEL_71:
      if (!v56)
        goto LABEL_72;
      if (v56 == -8)
        break;
      v1 = this;
      v38 = v94;
      v61 = v98;
LABEL_84:
      *(_DWORD *)(v56 + 8) = v61;
      v65 = (llvm::StringMapImpl *)*((_QWORD *)v37 + 1);
      if (v65)
      {
        do
        {
          v66 = v65;
          v65 = *(llvm::StringMapImpl **)v65;
        }
        while (v65);
      }
      else
      {
        do
        {
          v66 = (llvm::StringMapImpl *)*((_QWORD *)v37 + 2);
          v18 = *(_QWORD *)v66 == (_QWORD)v37;
          v37 = v66;
        }
        while (!v18);
      }
      v37 = v66;
      if (v66 == v95)
      {
        v36 = *((unsigned int *)v1 + 84);
        goto LABEL_99;
      }
    }
    --*((_DWORD *)this + 80);
LABEL_72:
    v58 = (char *)operator new(v41 + 17, (std::align_val_t)8uLL);
    v59 = v58;
    v60 = v58 + 16;
    v1 = this;
    v38 = v94;
    v61 = v98;
    if (v41)
      memcpy(v58 + 16, __src, v41);
    v60[v41] = 0;
    *(_QWORD *)v59 = v41;
    *((_DWORD *)v59 + 2) = 0;
    *(_QWORD *)(v48 + 8 * v55) = v59;
    ++*(_DWORD *)v97;
    for (k = (uint64_t *)(*(_QWORD *)v94 + 8 * llvm::StringMapImpl::RehashTable(v94, v55)); ; ++k)
    {
      v56 = *k;
      if (*k && v56 != -8)
        break;
    }
    goto LABEL_84;
  }
LABEL_99:
  sub_1C6143384(v104);
  return v36;
}

uint64_t llvm::SlotTracker::processModule(llvm::SlotTracker *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *i;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  char v32;
  char v33;
  uint64_t v34;
  llvm::SlotTracker *v35;

  v2 = (_QWORD *)*((_QWORD *)this + 1);
  v3 = v2 + 1;
  v4 = (_QWORD *)v2[2];
  if (v4 != v2 + 1)
  {
    do
    {
      if (v4)
        v5 = (uint64_t)(v4 - 7);
      else
        v5 = 0;
      if ((*(_BYTE *)(v5 + 23) & 0x10) == 0)
      {
        v27 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v27 + 1;
        v35 = (llvm::SlotTracker *)v5;
        *((_DWORD *)sub_1C504CE94((uint64_t)this + 104, (uint64_t *)&v35) + 2) = v27;
      }
      llvm::SlotTracker::processGlobalObjectMetadata(this, (const llvm::GlobalObject *)v5);
      v6 = *(_QWORD *)(v5 + 72);
      if (v6)
        llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, v6);
      v4 = (_QWORD *)v4[1];
    }
    while (v4 != v3);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  v7 = v2 + 5;
  v8 = (_QWORD *)v2[6];
  if (v8 != v2 + 5)
  {
    do
    {
      v28 = (uint64_t)(v8 - 6);
      if (!v8)
        v28 = 0;
      if ((*(_BYTE *)(v28 + 23) & 0x10) == 0)
      {
        v29 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v29 + 1;
        v35 = (llvm::SlotTracker *)v28;
        *((_DWORD *)sub_1C504CE94((uint64_t)this + 104, (uint64_t *)&v35) + 2) = v29;
      }
      v8 = (_QWORD *)v8[1];
    }
    while (v8 != v7);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  v9 = v2 + 7;
  v10 = (_QWORD *)v2[8];
  if (v10 != v2 + 7)
  {
    do
    {
      v30 = (uint64_t)(v10 - 7);
      if (!v10)
        v30 = 0;
      if ((*(_BYTE *)(v30 + 23) & 0x10) == 0)
      {
        v31 = *((_DWORD *)this + 32);
        *((_DWORD *)this + 32) = v31 + 1;
        v35 = (llvm::SlotTracker *)v30;
        *((_DWORD *)sub_1C504CE94((uint64_t)this + 104, (uint64_t *)&v35) + 2) = v31;
      }
      v10 = (_QWORD *)v10[1];
    }
    while (v10 != v9);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  v11 = v2 + 9;
  v12 = (_QWORD *)v2[10];
  if (v12 != v2 + 9)
  {
    do
    {
      v13 = *(unsigned int *)(v12[6] + 8);
      if ((_DWORD)v13)
      {
        v14 = 0;
        v15 = 8 * v13;
        do
        {
          llvm::SlotTracker::CreateMetadataSlot(this, *(const llvm::MDNode **)(*(_QWORD *)v12[6] + v14));
          v14 += 8;
        }
        while (v15 != v14);
      }
      v12 = (_QWORD *)v12[1];
    }
    while (v12 != v11);
    v2 = (_QWORD *)*((_QWORD *)this + 1);
  }
  v16 = v2 + 3;
  for (i = (_QWORD *)v2[4]; i != v16; i = (_QWORD *)i[1])
  {
    v18 = (uint64_t)(i - 7);
    if (!i)
      v18 = 0;
    if ((*(_BYTE *)(v18 + 23) & 0x10) == 0)
    {
      v22 = *((_DWORD *)this + 32);
      *((_DWORD *)this + 32) = v22 + 1;
      v35 = (llvm::SlotTracker *)v18;
      v23 = v18;
      v24 = sub_1C504CE94((uint64_t)this + 104, (uint64_t *)&v35);
      v18 = v23;
      *((_DWORD *)v24 + 2) = v22;
    }
    if (*((_BYTE *)this + 25))
    {
      v25 = v16;
      v26 = v18;
      llvm::SlotTracker::processFunctionMetadata(this, (const llvm::Function *)v18);
      v18 = v26;
      v16 = v25;
    }
    v19 = *(_QWORD *)(v18 + 112);
    if (v19 && *(_DWORD *)(v19 + 8))
    {
      v20 = *(_QWORD *)(v19 + 40);
      if (v20)
        llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, v20);
    }
  }
  result = *((_QWORD *)this + 7);
  if (result)
  {
    v32 = *((_BYTE *)this + 25);
    v34 = *((_QWORD *)this + 1);
    v35 = this;
    v33 = v32;
    return (*(uint64_t (**)(uint64_t, llvm::SlotTracker **, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v35, &v34, &v33);
  }
  return result;
}

_QWORD *llvm::SlotTracker::CreateModuleSlot(llvm::SlotTracker *this, const llvm::GlobalValue *a2)
{
  int v2;
  _QWORD *result;
  const llvm::GlobalValue *v4;

  v2 = *((_DWORD *)this + 32);
  *((_DWORD *)this + 32) = v2 + 1;
  v4 = a2;
  result = sub_1C504CE94((uint64_t)this + 104, (uint64_t *)&v4);
  *((_DWORD *)result + 2) = v2;
  return result;
}

void llvm::SlotTracker::processGlobalObjectMetadata(llvm::SlotTracker *this, const llvm::GlobalObject *a2)
{
  _QWORD *v3;
  uint64_t v4;
  const llvm::MDNode **v5;
  const llvm::MDNode *v6;
  void *v7;
  uint64_t v8;
  _QWORD v9[9];

  v9[8] = *MEMORY[0x1E0C80C00];
  v7 = v9;
  v8 = 0x400000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)&v7);
  v3 = v7;
  if ((_DWORD)v8)
  {
    v4 = 16 * v8;
    v5 = (const llvm::MDNode **)((char *)v7 + 8);
    do
    {
      v6 = *v5;
      v5 += 2;
      llvm::SlotTracker::CreateMetadataSlot(this, v6);
      v4 -= 16;
    }
    while (v4);
    v3 = v7;
  }
  if (v3 != v9)
    free(v3);
}

uint64_t llvm::SlotTracker::CreateAttributeSetSlot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;

  v5 = a1 + 200;
  v4 = *(_QWORD *)(a1 + 200);
  v14 = 0;
  v6 = sub_1C5323BCC(v4, *(_DWORD *)(v5 + 16), a2, &v14);
  result = *(_QWORD *)v5;
  v8 = *(unsigned int *)(v5 + 16);
  if (v6)
    v9 = v14 == *(_QWORD *)v5 + 16 * v8;
  else
    v9 = 1;
  if (v9)
  {
    v10 = *(_DWORD *)(a1 + 224);
    *(_DWORD *)(a1 + 224) = v10 + 1;
    v14 = 0;
    result = sub_1C5323BCC(result, v8, a2, &v14);
    v11 = v14;
    if ((result & 1) != 0)
    {
LABEL_12:
      *(_DWORD *)(v11 + 8) = v10;
      return result;
    }
    v12 = *(_DWORD *)(a1 + 208);
    v13 = *(_DWORD *)(a1 + 216);
    if (4 * v12 + 4 >= 3 * v13)
    {
      v13 *= 2;
    }
    else if (v13 + ~v12 - *(_DWORD *)(a1 + 212) > v13 >> 3)
    {
LABEL_9:
      ++*(_DWORD *)(a1 + 208);
      if (*(_QWORD *)v11 != -4)
        --*(_DWORD *)(a1 + 212);
      *(_QWORD *)v11 = a2;
      *(_DWORD *)(v11 + 8) = 0;
      goto LABEL_12;
    }
    sub_1C5323C60(v5, v13);
    v14 = 0;
    result = sub_1C5323BCC(*(_QWORD *)(a1 + 200), *(_DWORD *)(a1 + 216), a2, &v14);
    v11 = v14;
    goto LABEL_9;
  }
  return result;
}

llvm::SlotTracker *llvm::SlotTracker::CreateMetadataSlot(llvm::SlotTracker *this, const llvm::MDNode *a2)
{
  int v2;
  llvm::SlotTracker *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  const llvm::MDNode **v11;
  const llvm::MDNode *v12;
  const llvm::MDNode **v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  const llvm::MDNode **v17;
  uint64_t v18;
  const llvm::MDNode *v19;
  const llvm::MDNode *v20;
  const llvm::MDNode *v21;
  uint64_t v22;

  v2 = *(unsigned __int8 *)a2;
  if (v2 != 6 && v2 != 32)
  {
    v4 = this;
    v5 = *((unsigned int *)this + 48);
    v7 = *((_QWORD *)this + 21);
    this = (llvm::SlotTracker *)((char *)this + 168);
    v6 = v7;
    v21 = a2;
    v22 = v5;
    v8 = *((_DWORD *)this + 4);
    if (v8)
    {
      v9 = v8 - 1;
      v10 = v9 & ((a2 >> 4) ^ (a2 >> 9));
      v11 = (const llvm::MDNode **)(v6 + 16 * v10);
      v12 = *v11;
      if (*v11 == a2)
        return this;
      v13 = 0;
      v14 = 1;
      while (v12 != (const llvm::MDNode *)-4096)
      {
        if (v13)
          v15 = 0;
        else
          v15 = v12 == (const llvm::MDNode *)-8192;
        if (v15)
          v13 = v11;
        v16 = v10 + v14++;
        v10 = v16 & v9;
        v11 = (const llvm::MDNode **)(v6 + 16 * v10);
        v12 = *v11;
        if (*v11 == a2)
          return this;
      }
      if (v13)
        v17 = v13;
      else
        v17 = v11;
    }
    else
    {
      v17 = 0;
    }
    this = (llvm::SlotTracker *)sub_1C4DE27E0((uint64_t)this, (uint64_t)&v21, (uint64_t *)&v21, v17);
    *(_QWORD *)this = v21;
    *((_DWORD *)this + 2) = v22;
    ++*((_DWORD *)v4 + 48);
    v18 = *((unsigned int *)a2 + 2);
    if ((_DWORD)v18)
    {
      v19 = a2;
      do
      {
        v20 = (const llvm::MDNode *)*((_QWORD *)v19 - *((unsigned int *)a2 + 2));
        if (v20 && *(unsigned __int8 *)v20 - 4 <= 0x1E)
          this = (llvm::SlotTracker *)llvm::SlotTracker::CreateMetadataSlot(v4, v20);
        v19 = (const llvm::MDNode *)((char *)v19 + 8);
        --v18;
      }
      while (v18);
    }
  }
  return this;
}

void llvm::SlotTracker::processFunctionMetadata(llvm::SlotTracker *this, const llvm::Function *a2)
{
  char *v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t j;
  const llvm::Instruction *v9;

  llvm::SlotTracker::processGlobalObjectMetadata(this, a2);
  v4 = (char *)a2 + 72;
  for (i = *((_QWORD *)a2 + 10); (char *)i != v4; i = *(_QWORD *)(i + 8))
  {
    v6 = i - 24;
    if (!i)
      v6 = 0;
    v7 = v6 + 40;
    for (j = *(_QWORD *)(v6 + 48); j != v7; j = *(_QWORD *)(j + 8))
    {
      if (j)
        v9 = (const llvm::Instruction *)(j - 24);
      else
        v9 = 0;
      llvm::SlotTracker::processInstructionMetadata(this, v9);
    }
  }
}

uint64_t llvm::SlotTracker::processFunction(llvm::SlotTracker *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t i;
  unsigned __int8 *v36;
  unsigned int v37;
  BOOL v38;
  uint64_t v39;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  llvm::SlotTracker *v59;

  *((_DWORD *)this + 40) = 0;
  if (!*((_BYTE *)this + 25))
    llvm::SlotTracker::processFunctionMetadata(this, *((const llvm::Function **)this + 2));
  v2 = *((_QWORD *)this + 2);
  if ((*(_WORD *)(v2 + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 2));
    v55 = *((_QWORD *)this + 2);
    v3 = *(_QWORD *)(v2 + 88);
    if ((*(_WORD *)(v55 + 18) & 1) != 0)
      llvm::Function::BuildLazyArguments(*((llvm::Function **)this + 2));
    v2 = v55;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 88);
  }
  v4 = *(_QWORD *)(v2 + 88) + 40 * *(_QWORD *)(v2 + 96);
  if (v3 != v4)
  {
    while ((*(_BYTE *)(v3 + 23) & 0x10) != 0)
    {
LABEL_23:
      v3 += 40;
      if (v3 == v4)
        goto LABEL_24;
    }
    v59 = (llvm::SlotTracker *)v3;
    v5 = *((_DWORD *)this + 40);
    *((_DWORD *)this + 40) = v5 + 1;
    v6 = *((_DWORD *)this + 38);
    if (v6)
    {
      v7 = *((_QWORD *)this + 17);
      v8 = v6 - 1;
      v9 = v8 & ((v3 >> 4) ^ (v3 >> 9));
      v10 = (_QWORD *)(v7 + 16 * v9);
      v11 = *v10;
      if (v3 == *v10)
      {
LABEL_22:
        *((_DWORD *)v10 + 2) = v5;
        goto LABEL_23;
      }
      v12 = 0;
      v13 = 1;
      while (v11 != -4096)
      {
        if (v12)
          v14 = 0;
        else
          v14 = v11 == -8192;
        if (v14)
          v12 = v10;
        v15 = v9 + v13++;
        v9 = v15 & v8;
        v10 = (_QWORD *)(v7 + 16 * v9);
        v11 = *v10;
        if (v3 == *v10)
          goto LABEL_22;
      }
      if (v12)
        v16 = v12;
      else
        v16 = v10;
    }
    else
    {
      v16 = 0;
    }
    v10 = sub_1C504A120((uint64_t)this + 136, (uint64_t)&v59, (uint64_t *)&v59, v16);
    *v10 = v59;
    *((_DWORD *)v10 + 2) = 0;
    goto LABEL_22;
  }
LABEL_24:
  v17 = *((_QWORD *)this + 2);
  v18 = v17 + 72;
  v19 = *(_QWORD *)(v17 + 80);
  if (v19 != v17 + 72)
  {
LABEL_28:
    if (v19)
      v21 = v19 - 24;
    else
      v21 = 0;
    if ((*(_BYTE *)(v21 + 23) & 0x10) != 0)
      goto LABEL_48;
    v59 = (llvm::SlotTracker *)v21;
    v22 = *((_DWORD *)this + 40);
    *((_DWORD *)this + 40) = v22 + 1;
    v23 = *((_DWORD *)this + 38);
    if (v23)
    {
      v24 = *((_QWORD *)this + 17);
      v25 = v23 - 1;
      v26 = v25 & ((v21 >> 4) ^ (v21 >> 9));
      v27 = (_QWORD *)(v24 + 16 * v26);
      v28 = *v27;
      if (v21 == *v27)
      {
LABEL_47:
        *((_DWORD *)v27 + 2) = v22;
LABEL_48:
        v34 = v21 + 40;
        for (i = *(_QWORD *)(v21 + 48); ; i = *(_QWORD *)(i + 8))
        {
          if (i == v34)
          {
            v19 = *(_QWORD *)(v19 + 8);
            if (v19 == v18)
              goto LABEL_25;
            goto LABEL_28;
          }
          v36 = i ? (unsigned __int8 *)(i - 24) : 0;
          if (*(_BYTE *)(*(_QWORD *)v36 + 8) != 7 && (v36[23] & 0x10) == 0)
            break;
LABEL_54:
          v37 = v36[16] - 33;
          v38 = v37 > 0x33;
          v39 = (1 << v37) & 0x8000000000041;
          if (!v38 && v39 != 0)
          {
            v52 = *(_QWORD *)(i + 40);
            if (v52)
            {
              if (*(_DWORD *)(v52 + 8))
              {
                v53 = *(_QWORD *)(v52 + 40);
                if (v53)
                  llvm::SlotTracker::CreateAttributeSetSlot((uint64_t)this, v53);
              }
            }
          }
        }
        v59 = (llvm::SlotTracker *)v36;
        v41 = *((_DWORD *)this + 40);
        *((_DWORD *)this + 40) = v41 + 1;
        v42 = *((_DWORD *)this + 38);
        if (v42)
        {
          v43 = *((_QWORD *)this + 17);
          v44 = v42 - 1;
          v45 = v44 & ((v36 >> 4) ^ (v36 >> 9));
          v46 = (_QWORD *)(v43 + 16 * v45);
          v47 = *v46;
          if (v36 == (unsigned __int8 *)*v46)
          {
LABEL_80:
            *((_DWORD *)v46 + 2) = v41;
            goto LABEL_54;
          }
          v48 = 0;
          v49 = 1;
          while (v47 != -4096)
          {
            if (v48)
              v50 = 0;
            else
              v50 = v47 == -8192;
            if (v50)
              v48 = v46;
            v51 = v45 + v49++;
            v45 = v51 & v44;
            v46 = (_QWORD *)(v43 + 16 * v45);
            v47 = *v46;
            if (v36 == (unsigned __int8 *)*v46)
              goto LABEL_80;
          }
          if (v48)
            v54 = v48;
          else
            v54 = v46;
        }
        else
        {
          v54 = 0;
        }
        v46 = sub_1C504A120((uint64_t)this + 136, (uint64_t)&v59, (uint64_t *)&v59, v54);
        *v46 = v59;
        *((_DWORD *)v46 + 2) = 0;
        goto LABEL_80;
      }
      v29 = 0;
      v30 = 1;
      while (v28 != -4096)
      {
        if (v29)
          v31 = 0;
        else
          v31 = v28 == -8192;
        if (v31)
          v29 = v27;
        v32 = v26 + v30++;
        v26 = v32 & v25;
        v27 = (_QWORD *)(v24 + 16 * v26);
        v28 = *v27;
        if (v21 == *v27)
          goto LABEL_47;
      }
      if (v29)
        v33 = v29;
      else
        v33 = v27;
    }
    else
    {
      v33 = 0;
    }
    v27 = sub_1C504A120((uint64_t)this + 136, (uint64_t)&v59, (uint64_t *)&v59, v33);
    *v27 = v59;
    *((_DWORD *)v27 + 2) = 0;
    goto LABEL_47;
  }
LABEL_25:
  result = *((_QWORD *)this + 11);
  if (result)
  {
    v56 = *((_BYTE *)this + 25);
    v58 = *((_QWORD *)this + 2);
    v59 = this;
    v57 = v56;
    result = (*(uint64_t (**)(uint64_t, llvm::SlotTracker **, uint64_t *, char *))(*(_QWORD *)result + 48))(result, &v59, &v58, &v57);
  }
  *((_BYTE *)this + 24) = 1;
  return result;
}

_QWORD *llvm::SlotTracker::CreateFunctionSlot(llvm::SlotTracker *this, const llvm::Value *a2)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  const llvm::Value **v9;
  const llvm::Value *v10;
  const llvm::Value **v11;
  int v12;
  BOOL v13;
  unsigned int v14;
  const llvm::Value **v15;
  const llvm::Value *v16;

  v16 = a2;
  v4 = *((_QWORD *)this + 17);
  result = (_QWORD *)((char *)this + 136);
  v3 = v4;
  v5 = *((_DWORD *)result + 6);
  *((_DWORD *)result + 6) = v5 + 1;
  v6 = *((_DWORD *)result + 4);
  if (!v6)
  {
    v15 = 0;
LABEL_15:
    result = sub_1C504A120((uint64_t)result, (uint64_t)&v16, (uint64_t *)&v16, v15);
    v9 = (const llvm::Value **)result;
    *result = v16;
    *((_DWORD *)result + 2) = 0;
    goto LABEL_16;
  }
  v7 = v6 - 1;
  v8 = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v9 = (const llvm::Value **)(v3 + 16 * v8);
  v10 = *v9;
  if (*v9 != a2)
  {
    v11 = 0;
    v12 = 1;
    while (v10 != (const llvm::Value *)-4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == (const llvm::Value *)-8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (const llvm::Value **)(v3 + 16 * (v14 & v7));
      v10 = *v9;
      if (*v9 == a2)
        goto LABEL_16;
    }
    if (v11)
      v15 = v11;
    else
      v15 = v9;
    goto LABEL_15;
  }
LABEL_16:
  *((_DWORD *)v9 + 2) = v5;
  return result;
}

_QWORD *llvm::SlotTracker::CreateGUIDSlot(llvm::SlotTracker *this, uint64_t a2)
{
  int v2;
  _QWORD *result;
  uint64_t v4;

  v4 = a2;
  v2 = *((_DWORD *)this + 74);
  *((_DWORD *)this + 74) = v2 + 1;
  result = sub_1C51910A4((uint64_t)this + 272, &v4);
  *((_DWORD *)result + 2) = v2;
  return result;
}

uint64_t llvm::SlotTracker::CreateTypeIdSlot(uint64_t result, unsigned __int8 *a2, size_t a3)
{
  _DWORD *v4;
  int v5;
  unsigned int v6;
  int v7;
  size_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t *i;
  int v26;

  v4 = (_DWORD *)result;
  v5 = *(_DWORD *)(result + 336);
  *(_DWORD *)(result + 336) = v5 + 1;
  v6 = *(_DWORD *)(result + 312);
  if (!v6)
  {
    *(_QWORD *)(result + 316) = 0;
    result = (uint64_t)malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!result)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    *(_QWORD *)(result + 128) = 2;
    *((_QWORD *)v4 + 38) = result;
    v6 = 16;
    v4[78] = 16;
  }
  v26 = v5;
  v7 = 0;
  if (a3)
  {
    v8 = a3;
    v9 = a2;
    do
    {
      v10 = *v9++;
      v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  v11 = *((_QWORD *)v4 + 38);
  v12 = v6 - 1;
  v13 = v11 + 8 * v6 + 8;
  v14 = -1;
  v15 = 1;
  v16 = v7;
  while (1)
  {
    v17 = v16 & v12;
    v18 = *(_QWORD *)(v11 + 8 * v17);
    if (!v18)
      break;
    if (v18 == -8)
    {
      if (v14 == -1)
        v14 = v16 & v12;
    }
    else if (*(_DWORD *)(v13 + 4 * v17) == v7 && a3 == *(_QWORD *)v18)
    {
      if (!a3)
        goto LABEL_20;
      result = memcmp(a2, (const void *)(v18 + v4[81]), a3);
      if (!(_DWORD)result)
        goto LABEL_20;
    }
    v16 = v15 + v17;
    ++v15;
  }
  v19 = v14;
  if (v14 == -1)
  {
    v19 = v17;
    v17 = v17;
  }
  else
  {
    v17 = v14;
  }
  *(_DWORD *)(v13 + 4 * v19) = v7;
  v18 = *(_QWORD *)(v11 + 8 * v17);
LABEL_20:
  if (v18)
  {
    if (v18 != -8)
    {
      v23 = v26;
      goto LABEL_33;
    }
    --v4[80];
  }
  v20 = (char *)operator new(a3 + 17, (std::align_val_t)8uLL);
  v21 = v20;
  v22 = v20 + 16;
  v23 = v26;
  if (a3)
    memcpy(v20 + 16, a2, a3);
  v22[a3] = 0;
  *(_QWORD *)v21 = a3;
  *((_DWORD *)v21 + 2) = 0;
  *(_QWORD *)(v11 + 8 * v17) = v21;
  ++v4[79];
  result = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(v4 + 76), v17);
  for (i = (uint64_t *)(*((_QWORD *)v4 + 38) + 8 * result); ; ++i)
  {
    v18 = *i;
    if (*i && v18 != -8)
      break;
  }
LABEL_33:
  *(_DWORD *)(v18 + 8) = v23;
  return result;
}

void llvm::SlotTracker::processInstructionMetadata(llvm::SlotTracker *this, const llvm::Instruction *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  const llvm::MDNode *v10;
  _QWORD *v11;
  uint64_t v12;
  const llvm::MDNode **v13;
  const llvm::MDNode *v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[9];

  v17[8] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)a2 + 16) == 84)
  {
    v4 = *((_QWORD *)a2 - 4);
    if (v4)
    {
      if (!*(_BYTE *)(v4 + 16) && *(_QWORD *)(v4 + 24) == *((_QWORD *)a2 + 9) && (*(_BYTE *)(v4 + 33) & 0x20) != 0)
      {
        v5 = *((_DWORD *)a2 + 5);
        if ((v5 & 0x40000000) != 0)
        {
          v7 = (uint64_t *)*((_QWORD *)a2 - 1);
          v6 = v5 & 0x7FFFFFF;
        }
        else
        {
          v6 = v5 & 0x7FFFFFF;
          v7 = (uint64_t *)((char *)a2 - 32 * v6);
        }
        if (v6)
        {
          v8 = 32 * v6;
          do
          {
            v9 = *v7;
            if (*v7)
            {
              if (*(_BYTE *)(v9 + 16) == 23)
              {
                v10 = *(const llvm::MDNode **)(v9 + 24);
                if (*(unsigned __int8 *)v10 - 4 <= 0x1E)
                  llvm::SlotTracker::CreateMetadataSlot(this, v10);
              }
            }
            v7 += 4;
            v8 -= 32;
          }
          while (v8);
        }
      }
    }
  }
  v15 = v17;
  v16 = 0x400000000;
  if (*((_QWORD *)a2 + 6) || (*((_BYTE *)a2 + 23) & 0x20) != 0)
  {
    llvm::Instruction::getAllMetadataImpl((uint64_t)a2, (uint64_t)&v15);
    v11 = v15;
    if ((_DWORD)v16)
    {
      v12 = 16 * v16;
      v13 = (const llvm::MDNode **)((char *)v15 + 8);
      do
      {
        v14 = *v13;
        v13 += 2;
        llvm::SlotTracker::CreateMetadataSlot(this, v14);
        v12 -= 16;
      }
      while (v12);
      v11 = v15;
    }
    if (v11 != v17)
      free(v11);
  }
}

llvm::SlotTracker *sub_1C5309BB8(llvm::SlotTracker *this)
{
  llvm::SlotTracker *v1;

  v1 = this;
  if (*((_QWORD *)this + 1))
  {
    this = (llvm::SlotTracker *)llvm::SlotTracker::processModule(this);
    *((_QWORD *)v1 + 1) = 0;
  }
  if (*((_QWORD *)v1 + 2))
  {
    if (!*((_BYTE *)v1 + 24))
      return (llvm::SlotTracker *)llvm::SlotTracker::processFunction(v1);
  }
  return this;
}

uint64_t llvm::SlotTracker::getMetadataSlot(llvm::SlotTracker *this, const llvm::MDNode *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const llvm::MDNode *v8;
  int v9;
  int v10;

  if (*((_QWORD *)this + 1))
  {
    llvm::SlotTracker::processModule(this);
    *((_QWORD *)this + 1) = 0;
  }
  if (*((_QWORD *)this + 2) && !*((_BYTE *)this + 24))
    llvm::SlotTracker::processFunction(this);
  v4 = *((_QWORD *)this + 21);
  v5 = *((unsigned int *)this + 46);
  if ((_DWORD)v5)
  {
    LODWORD(v6) = (v5 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v7 = v4 + 16 * v6;
    v8 = *(const llvm::MDNode **)v7;
    if (*(const llvm::MDNode **)v7 == a2)
      goto LABEL_13;
    v9 = 1;
    while (v8 != (const llvm::MDNode *)-4096)
    {
      v10 = v6 + v9++;
      v6 = v10 & (v5 - 1);
      v8 = *(const llvm::MDNode **)(v4 + 16 * v6);
      if (v8 == a2)
      {
        v7 = v4 + 16 * v6;
        goto LABEL_13;
      }
    }
  }
  v7 = v4 + 16 * v5;
LABEL_13:
  if (v7 == v4 + 16 * v5)
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(v7 + 8);
}

uint64_t llvm::SlotTracker::getAttributeGroupSlot(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v7;

  if (*(_QWORD *)(a1 + 8))
  {
    llvm::SlotTracker::processModule((llvm::SlotTracker *)a1);
    *(_QWORD *)(a1 + 8) = 0;
  }
  if (*(_QWORD *)(a1 + 16) && !*(_BYTE *)(a1 + 24))
    llvm::SlotTracker::processFunction((llvm::SlotTracker *)a1);
  v7 = 0;
  v4 = sub_1C5323BCC(*(_QWORD *)(a1 + 200), *(_DWORD *)(a1 + 216), a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
    v5 = *(_QWORD *)(a1 + 200) + 16 * *(unsigned int *)(a1 + 216);
  if (v5 == *(_QWORD *)(a1 + 200) + 16 * *(unsigned int *)(a1 + 216))
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(v5 + 8);
}

uint64_t llvm::SlotTracker::getGUIDSlot(llvm::SlotTracker *this, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v5;

  v5 = a2;
  if (*((_QWORD *)this + 12))
  {
    llvm::SlotTracker::processIndex(this);
    *((_QWORD *)this + 12) = 0;
  }
  v3 = sub_1C5309DE0((uint64_t *)this + 34, &v5);
  if ((uint64_t *)(*((_QWORD *)this + 34) + 16 * *((unsigned int *)this + 72)) == v3)
    return 0xFFFFFFFFLL;
  else
    return *((unsigned int *)v3 + 2);
}

uint64_t *sub_1C5309DE0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *result;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = (37 * *a2) & (v3 - 1);
    result = (uint64_t *)(v2 + 16 * v4);
    v6 = *result;
    if (*a2 == *result)
      return result;
    v7 = 1;
    while (v6 != -1)
    {
      v8 = v4 + v7++;
      v4 = v8 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (*a2 == v6)
        return (uint64_t *)(v2 + 16 * v4);
    }
  }
  return (uint64_t *)(v2 + 16 * v3);
}

uint64_t sub_1C5309E54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD **v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[31];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a4;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = a4;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_DWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_BYTE *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  v8 = a1 + 232;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = a5;
  *(_DWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_BYTE *)(a1 + 280) = a6;
  *(_BYTE *)(a1 + 281) = a7;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = a1 + 328;
  *(_QWORD *)(a1 + 320) = 0x800000000;
  *(_QWORD *)(a1 + 456) = a1 + 472;
  *(_QWORD *)(a1 + 464) = 0x800000000;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_DWORD *)(a1 + 616) = 0;
  if (a4)
  {
    v9 = (_QWORD *)(a1 + 256);
    v10 = a4 + 24;
    v11 = *(_QWORD *)(a4 + 32);
    v12 = a4 + 8;
    v13 = *(_QWORD *)(a4 + 16);
    v32 = v11;
    v33 = v13;
    v34 = a4 + 24;
    v35 = a4 + 8;
    v30 = (_QWORD **)(a1 + 256);
    while (1)
    {
      if (v11 == v10 && v13 == v12)
      {
        v14 = v34 == v10 && v35 == v12;
        if (v14)
          break;
      }
      v15 = 0;
      do
      {
        v16 = (*(uint64_t (**)(uint64_t *))((char *)&off_1E814DCE0 + v15))(&v32);
        v15 += 16;
      }
      while (!v16);
      v31 = *(_QWORD *)(v16 + 48);
      if (v31)
      {
        sub_1C614F72C(v8, &v31, (uint64_t)v36);
        if (v36[16])
        {
          v19 = *(_QWORD **)(a1 + 264);
          v18 = *(_QWORD *)(a1 + 272);
          if ((unint64_t)v19 >= v18)
          {
            v21 = (_QWORD *)*v9;
            v22 = v19 - v21;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 61)
              abort();
            v24 = v18 - (_QWORD)v21;
            if (v24 >> 2 > v23)
              v23 = v24 >> 2;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
              v25 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25)
            {
              if (v25 >> 61)
                sub_1C4764EE4();
              v26 = (char *)operator new(8 * v25);
            }
            else
            {
              v26 = 0;
            }
            v27 = &v26[8 * v22];
            *(_QWORD *)v27 = v31;
            v20 = v27 + 8;
            if (v19 == v21)
            {
              v9 = v30;
            }
            else
            {
              do
              {
                v28 = *--v19;
                *((_QWORD *)v27 - 1) = v28;
                v27 -= 8;
              }
              while (v19 != v21);
              v9 = v30;
              v19 = *v30;
            }
            *(_QWORD *)(a1 + 256) = v27;
            *(_QWORD *)(a1 + 264) = v20;
            *(_QWORD *)(a1 + 272) = &v26[8 * v25];
            if (v19)
              operator delete(v19);
          }
          else
          {
            *v19 = v31;
            v20 = v19 + 1;
          }
          *(_QWORD *)(a1 + 264) = v20;
        }
      }
      v17 = 0;
      do
      {
        if (((*(uint64_t (**)(uint64_t *))((char *)&off_1E814DD00 + v17))(&v32) & 1) != 0)
          break;
        v14 = v17 == 16;
        v17 += 16;
      }
      while (!v14);
      v11 = v32;
      v13 = v33;
    }
  }
  return a1;
}

_DWORD *sub_1C530A0C4(llvm::raw_ostream **a1, llvm::LLVMContext ***a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  uint64_t v6;
  llvm::LLVMContext **v7;
  llvm::raw_ostream *v8;
  llvm::raw_ostream *v9;
  _DWORD **v10;
  _DWORD *v11;
  _BOOL4 v12;
  llvm::raw_ostream *v13;
  std::string *v14;
  size_t v15;
  int v16;
  llvm::raw_ostream *v17;
  _DWORD *v18;
  const char *v19;
  size_t v20;
  llvm::LLVMContext *v21;
  uint64_t v22;
  llvm::Attribute *v23;
  uint64_t v24;
  std::string::size_type size;
  std::string *v26;
  std::string::size_type v27;
  std::string::size_type v28;
  llvm::raw_ostream *v29;
  uint64_t v30;
  std::string *v31;
  size_t v32;
  llvm::raw_ostream *v33;
  _BYTE *v34;
  uint64_t v35;
  int v36;
  llvm::raw_ostream *v37;
  uint64_t v38;
  const char *v39;
  llvm::raw_ostream *v40;
  llvm::raw_ostream *v41;
  _BYTE *v42;
  llvm::LLVMContext **v43;
  llvm::LLVMContext **v44;
  std::string::size_type v45;
  llvm::LLVMContext **v46;
  llvm::raw_ostream *v47;
  _BYTE *v48;
  llvm::raw_ostream *v49;
  _BYTE *v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  llvm::raw_ostream *v54;
  _WORD *v55;
  uint64_t v56;
  llvm::raw_ostream *v57;
  _BYTE *v58;
  uint64_t v59;
  uint64_t ***v60;
  uint64_t ***v61;
  uint64_t ***v62;
  llvm::raw_ostream *v63;
  _WORD *v64;
  unsigned int v65;
  uint64_t v66;
  llvm::raw_ostream *v67;
  _BYTE *v68;
  llvm::raw_ostream *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t ***v74;
  int v75;
  int v76;
  llvm::raw_ostream *v77;
  _BYTE *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t ****v83;
  uint64_t ***v84;
  int v85;
  int v86;
  int v87;
  llvm::raw_ostream *v88;
  _WORD *v89;
  unint64_t v90;
  int v91;
  size_t *v92;
  llvm::raw_ostream *v93;
  size_t v94;
  size_t v95;
  int v96;
  llvm::raw_ostream *v97;
  _WORD *v98;
  llvm::raw_ostream *v99;
  uint64_t v100;
  llvm::raw_ostream *v101;
  _BYTE *v102;
  const char *v103;
  size_t v104;
  llvm::AttributeSetNode *v105;
  llvm::raw_ostream *v106;
  std::string *v107;
  size_t v108;
  _BYTE *v109;
  llvm::raw_ostream *v110;
  _BYTE *v111;
  void *v112;
  llvm::LLVMContext **v113;
  llvm::raw_ostream *v114;
  uint64_t v115;
  _BYTE *v116;
  llvm::raw_ostream *v117;
  uint64_t v118;
  llvm::raw_ostream *v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  int v124;
  unsigned int v125;
  _QWORD *v126;
  _QWORD ***v127;
  llvm::raw_ostream *v128;
  _BYTE *v129;
  llvm::raw_ostream *v130;
  uint64_t v131;
  llvm::raw_ostream *Partition;
  uint64_t v133;
  llvm::raw_ostream *v134;
  _BYTE *v135;
  char v136;
  llvm::raw_ostream *v137;
  _DWORD *v138;
  llvm::raw_ostream *v139;
  uint64_t v140;
  _QWORD *GC;
  char v142;
  BOOL v143;
  const char *v144;
  size_t v145;
  size_t v146;
  _BYTE *v147;
  __int16 v148;
  llvm::raw_ostream *v149;
  _QWORD *v150;
  int v151;
  llvm::LLVMContext ***v152;
  llvm::raw_ostream *v153;
  uint64_t v154;
  int v155;
  llvm::LLVMContext ***v156;
  llvm::raw_ostream *v157;
  void *v158;
  int v159;
  llvm::detail::DoubleAPFloat **v160;
  llvm::raw_ostream *v161;
  _BYTE *v162;
  llvm::raw_ostream *v163;
  _WORD *v164;
  llvm::LLVMContext ***i;
  uint64_t ***v166;
  llvm::raw_ostream *v167;
  _WORD *v168;
  llvm::raw_ostream *v169;
  _DWORD *result;
  llvm::raw_ostream *v171;
  _BYTE *v172;
  _QWORD *v173;
  int v174;
  BOOL v175;
  unsigned int v176;
  _QWORD *v177;
  std::string::size_type v178;
  uint64_t v179;
  _WORD *v180;
  uint64_t v181;
  int AttributeGroupSlot;
  unint64_t v183;
  llvm::raw_ostream *v184;
  int v185;
  uint64_t v186;
  const char *v187;
  llvm::LLVMContext **v188;
  std::string v189;
  llvm::LLVMContext **v190;
  std::string __p[3];
  uint64_t v192;

  v192 = *MEMORY[0x1E0C80C00];
  v4 = a1[28];
  if (v4)
    (*(void (**)(llvm::raw_ostream *, llvm::LLVMContext ***, llvm::raw_ostream *))(*(_QWORD *)v4 + 16))(v4, a2, *a1);
  if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
  {
    v5 = *a1;
    v6 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v6) > 0x10)
    {
      *(_BYTE *)(v6 + 16) = 10;
      *(_OWORD *)v6 = *(_OWORD *)"; Materializable\n";
      *((_QWORD *)v5 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v5, "; Materializable\n", 0x11uLL);
    }
  }
  v7 = a2[14];
  if (v7)
  {
    if (*((_DWORD *)v7 + 2))
    {
      v21 = v7[5];
      if (v21)
      {
        memset(__p, 0, 24);
        v22 = *((unsigned int *)v21 + 2);
        if ((_DWORD)v22)
        {
          v23 = (llvm::LLVMContext *)((char *)v21 + 48);
          v24 = 8 * v22;
          do
          {
            if (!*(_QWORD *)v23 || *(_BYTE *)(*(_QWORD *)v23 + 8) != 2)
            {
              size = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
              if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                size = __p[0].__r_.__value_.__l.__size_;
              if (size)
                std::string::push_back(__p, 32);
              llvm::Attribute::getAsString(v23, 0, &v189);
              if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v26 = &v189;
              else
                v26 = (std::string *)v189.__r_.__value_.__r.__words[0];
              if ((v189.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v27 = *((_BYTE *)&v189.__r_.__value_.__s + 23) & 0x7F;
              else
                v27 = v189.__r_.__value_.__l.__size_;
              std::string::append(__p, (const std::string::value_type *)v26, v27);
              if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v189.__r_.__value_.__l.__data_);
            }
            v23 = (llvm::Attribute *)((char *)v23 + 8);
            v24 -= 8;
          }
          while (v24);
          v28 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
          if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v28 = __p[0].__r_.__value_.__l.__size_;
          if (v28)
          {
            v29 = *a1;
            v30 = *((_QWORD *)*a1 + 4);
            if ((unint64_t)(*((_QWORD *)*a1 + 3) - v30) > 0x11)
            {
              *(_WORD *)(v30 + 16) = 8250;
              *(_OWORD *)v30 = *(_OWORD *)"; Function Attrs: ";
              *((_QWORD *)v29 + 4) += 18;
            }
            else
            {
              v29 = llvm::raw_ostream::write(v29, "; Function Attrs: ", 0x12uLL);
            }
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v31 = __p;
            else
              v31 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v32 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
            else
              v32 = __p[0].__r_.__value_.__l.__size_;
            v33 = llvm::raw_ostream::write(v29, (const char *)v31, v32);
            v34 = (_BYTE *)*((_QWORD *)v33 + 4);
            if ((unint64_t)v34 >= *((_QWORD *)v33 + 3))
            {
              llvm::raw_ostream::write(v33, 10);
            }
            else
            {
              *((_QWORD *)v33 + 4) = v34 + 1;
              *v34 = 10;
            }
          }
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
      }
    }
  }
  v8 = a1[4];
  *((_QWORD *)v8 + 2) = a2;
  *((_BYTE *)v8 + 24) = 0;
  if (a2 && *((_BYTE *)a2 + 16) == 3)
  {
    v9 = *a1;
    v10 = (_DWORD **)((char *)*a1 + 32);
    v11 = *v10;
    v12 = *((_QWORD *)*a1 + 3) - (_QWORD)*v10 < 7uLL;
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0)
      goto LABEL_10;
  }
  else
  {
    if (*((_BYTE *)a2 + 16) || a2[9] != (llvm::LLVMContext **)(a2 + 9))
    {
      v9 = *a1;
      v10 = (_DWORD **)((char *)*a1 + 32);
      v11 = *v10;
      if (*((_QWORD *)*a1 + 3) - (_QWORD)*v10 >= 7uLL)
        goto LABEL_11;
LABEL_15:
      llvm::raw_ostream::write(v9, "define ", 7uLL);
      goto LABEL_16;
    }
    v9 = *a1;
    v10 = (_DWORD **)((char *)*a1 + 32);
    v11 = *v10;
    v12 = *((_QWORD *)*a1 + 3) - (_QWORD)*v10 < 7uLL;
    if ((*((_BYTE *)a2 + 34) & 0x80) != 0)
    {
LABEL_10:
      if (!v12)
      {
LABEL_11:
        *(_DWORD *)((char *)v11 + 3) = 543518313;
        *v11 = 1768318308;
        *v10 = (_DWORD *)((char *)*v10 + 7);
        goto LABEL_16;
      }
      goto LABEL_15;
    }
  }
  if (v12)
  {
    llvm::raw_ostream::write(v9, "declare", 7uLL);
  }
  else
  {
    *(_DWORD *)((char *)v11 + 3) = 1701994860;
    *v11 = 1818453348;
    *v10 = (_DWORD *)((char *)*v10 + 7);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
  __p[0].__r_.__value_.__l.__size_ = 0x400000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)__p);
  sub_1C53190B8((uint64_t *)a1, __p, " ", 1uLL);
  v171 = *a1;
  v172 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v172 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v171, 32);
  }
  else
  {
    *((_QWORD *)v171 + 4) = v172 + 1;
    *v172 = 32;
  }
  if ((std::string::size_type *)__p[0].__r_.__value_.__l.__data_ != &__p[0].__r_.__value_.__r.__words[2])
    free(__p[0].__r_.__value_.__l.__data_);
LABEL_16:
  v13 = *a1;
  sub_1C53192E8((uint64_t)__p, (_DWORD)a2[4] & 0xF);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = __p;
  else
    v14 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
  else
    v15 = __p[0].__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v13, (const char *)v14, v15);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  sub_1C531935C((llvm::raw_ostream *)a2, *a1);
  v16 = (*((_DWORD *)a2 + 8) >> 4) & 3;
  v17 = *a1;
  if (v16 == 2)
  {
    v35 = *((_QWORD *)v17 + 4);
    if ((unint64_t)(*((_QWORD *)v17 + 3) - v35) <= 9)
    {
      v19 = "protected ";
      v20 = 10;
      goto LABEL_62;
    }
    *(_WORD *)(v35 + 8) = 8292;
    *(_QWORD *)v35 = *(_QWORD *)"protected ";
    v186 = *((_QWORD *)v17 + 4) + 10;
  }
  else
  {
    if (v16 != 1)
      goto LABEL_63;
    v18 = (_DWORD *)*((_QWORD *)v17 + 4);
    if (*((_QWORD *)v17 + 3) - (_QWORD)v18 <= 6uLL)
    {
      v19 = "hidden ";
      v20 = 7;
LABEL_62:
      llvm::raw_ostream::write(v17, v19, v20);
      goto LABEL_63;
    }
    *(_DWORD *)((char *)v18 + 3) = 544105828;
    *v18 = 1684302184;
    v186 = *((_QWORD *)v17 + 4) + 7;
  }
  *((_QWORD *)v17 + 4) = v186;
LABEL_63:
  v36 = (*((_DWORD *)a2 + 8) >> 8) & 3;
  v37 = *a1;
  if (v36 == 2)
  {
    v38 = *((_QWORD *)v37 + 4);
    if ((unint64_t)(*((_QWORD *)v37 + 3) - v38) <= 9)
    {
      v39 = "dllexport ";
      goto LABEL_69;
    }
    v187 = "dllexport ";
  }
  else
  {
    if (v36 != 1)
      goto LABEL_70;
    v38 = *((_QWORD *)v37 + 4);
    if ((unint64_t)(*((_QWORD *)v37 + 3) - v38) <= 9)
    {
      v39 = "dllimport ";
LABEL_69:
      llvm::raw_ostream::write(v37, v39, 0xAuLL);
      goto LABEL_70;
    }
    v187 = "dllimport ";
  }
  *(_WORD *)(v38 + 8) = 8308;
  *(_QWORD *)v38 = *(_QWORD *)v187;
  *((_QWORD *)v37 + 4) += 10;
LABEL_70:
  v40 = (llvm::raw_ostream *)((*((unsigned __int16 *)a2 + 9) >> 4) & 0x3FF);
  if ((_DWORD)v40)
  {
    sub_1C53193F0(v40, *a1);
    v41 = *a1;
    v42 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if (*((_BYTE **)*a1 + 3) == v42)
    {
      llvm::raw_ostream::write(v41, " ", 1uLL);
    }
    else
    {
      *v42 = 32;
      ++*((_QWORD *)v41 + 4);
    }
  }
  v43 = a2[3];
  v44 = v43;
  if (v7)
  {
    v44 = a2[3];
    if (*((_DWORD *)v7 + 2) >= 2u)
    {
      v105 = v7[6];
      v44 = a2[3];
      if (v105)
      {
        v106 = *a1;
        llvm::AttributeSetNode::getAsString(v105, 0, __p);
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v107 = __p;
        else
          v107 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
        if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v108 = *((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x7F;
        else
          v108 = __p[0].__r_.__value_.__l.__size_;
        llvm::raw_ostream::write(v106, (const char *)v107, v108);
        v109 = (_BYTE *)*((_QWORD *)v106 + 4);
        if ((unint64_t)v109 >= *((_QWORD *)v106 + 3))
        {
          llvm::raw_ostream::write(v106, 32);
        }
        else
        {
          *((_QWORD *)v106 + 4) = v109 + 1;
          *v109 = 32;
        }
        if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p[0].__r_.__value_.__l.__data_);
        v44 = a2[3];
      }
    }
  }
  sub_1C530D7AC((uint64_t)(a1 + 5), *(_QWORD *)v44[2]);
  v45 = (std::string::size_type)a1[4];
  v46 = a2[5];
  v189.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E814DD30;
  v189.__r_.__value_.__l.__size_ = (std::string::size_type)(a1 + 5);
  v189.__r_.__value_.__r.__words[2] = v45;
  v190 = v46;
  v47 = *a1;
  v48 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v48 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v47, 32);
  }
  else
  {
    *((_QWORD *)v47 + 4) = v48 + 1;
    *v48 = 32;
  }
  sub_1C5319F38((char **)*a1, (llvm::detail::DoubleAPFloat *)a2, (uint64_t)&v189);
  v49 = *a1;
  v50 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v50 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v49, 40);
  }
  else
  {
    *((_QWORD *)v49 + 4) = v50 + 1;
    *v50 = 40;
  }
  v188 = v43;
  if (a2 && *((_BYTE *)a2 + 16) == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) != 0)
    {
LABEL_102:
      v59 = sub_1C485F330((uint64_t)a2);
      if ((uint64_t ***)v59 == v60)
        goto LABEL_160;
      v61 = (uint64_t ***)v59;
      v62 = v60;
      while (1)
      {
        if (!*((_DWORD *)v61 + 8))
          goto LABEL_107;
        v63 = *a1;
        v64 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v64 <= 1uLL)
          break;
        *v64 = 8236;
        *((_QWORD *)v63 + 4) += 2;
        if (!v7)
        {
LABEL_109:
          v66 = 0;
          goto LABEL_110;
        }
LABEL_108:
        v65 = *((_DWORD *)v61 + 8) + 2;
        if (v65 >= *((_DWORD *)v7 + 2))
          goto LABEL_109;
        v66 = (uint64_t)v7[v65 + 5];
LABEL_110:
        sub_1C530D7AC((uint64_t)(a1 + 5), (uint64_t)*v61);
        if (v66)
        {
          v67 = *a1;
          v68 = (_BYTE *)*((_QWORD *)*a1 + 4);
          if ((unint64_t)v68 >= *((_QWORD *)*a1 + 3))
          {
            llvm::raw_ostream::write(v67, 32);
          }
          else
          {
            *((_QWORD *)v67 + 4) = v68 + 1;
            *v68 = 32;
          }
          sub_1C531A660(a1, v66);
        }
        if ((*((_BYTE *)v61 + 23) & 0x10) != 0)
        {
          v77 = *a1;
          v78 = (_BYTE *)*((_QWORD *)*a1 + 4);
          if ((unint64_t)v78 >= *((_QWORD *)*a1 + 3))
          {
            llvm::raw_ostream::write(v77, 32);
          }
          else
          {
            *((_QWORD *)v77 + 4) = v78 + 1;
            *v78 = 32;
          }
          if ((*((_BYTE *)v61 + 23) & 0x10) != 0)
          {
            v79 = ***v61;
            v80 = *(_QWORD *)(v79 + 152);
            v81 = *(unsigned int *)(v79 + 168);
            if (!(_DWORD)v81)
              goto LABEL_146;
            LODWORD(v82) = (v81 - 1) & ((v61 >> 4) ^ (v61 >> 9));
            v83 = (uint64_t ****)(v80 + 16 * v82);
            v84 = *v83;
            if (*v83 != v61)
            {
              v85 = 1;
              while (v84 != (uint64_t ***)-4096)
              {
                v86 = v82 + v85++;
                v82 = v86 & (v81 - 1);
                v84 = *(uint64_t ****)(v80 + 16 * v82);
                if (v84 == v61)
                {
                  v83 = (uint64_t ****)(v80 + 16 * v82);
                  goto LABEL_147;
                }
              }
LABEL_146:
              v83 = (uint64_t ****)(v80 + 16 * v81);
            }
LABEL_147:
            v92 = (size_t *)v83[1];
            v95 = *v92;
            v93 = (llvm::raw_ostream *)(v92 + 2);
            v94 = v95;
          }
          else
          {
            v94 = 0;
            v93 = (llvm::raw_ostream *)&byte_1C871356D;
          }
          if (*((unsigned __int8 *)v61 + 16) >= 4u)
            v96 = 3;
          else
            v96 = 0;
          sub_1C530D5AC(*a1, v93, v94, v96);
          goto LABEL_152;
        }
        v69 = a1[4];
        if (*((_QWORD *)v69 + 1))
        {
          llvm::SlotTracker::processModule(a1[4]);
          *((_QWORD *)v69 + 1) = 0;
        }
        if (*((_QWORD *)v69 + 2) && !*((_BYTE *)v69 + 24))
          llvm::SlotTracker::processFunction(v69);
        v70 = *((_QWORD *)v69 + 17);
        v71 = *((unsigned int *)v69 + 38);
        if (!(_DWORD)v71)
          goto LABEL_137;
        LODWORD(v72) = (v71 - 1) & ((v61 >> 4) ^ (v61 >> 9));
        v73 = v70 + 16 * v72;
        v74 = *(uint64_t ****)v73;
        if (*(uint64_t ****)v73 != v61)
        {
          v75 = 1;
          while (v74 != (uint64_t ***)-4096)
          {
            v76 = v72 + v75++;
            v72 = v76 & (v71 - 1);
            v74 = *(uint64_t ****)(v70 + 16 * v72);
            if (v74 == v61)
            {
              v73 = v70 + 16 * v72;
              goto LABEL_138;
            }
          }
LABEL_137:
          v73 = v70 + 16 * v71;
        }
LABEL_138:
        if (v73 == v70 + 16 * v71)
          v87 = -1;
        else
          v87 = *(_DWORD *)(v73 + 8);
        v88 = *a1;
        v89 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v89 > 1uLL)
        {
          *v89 = 9504;
          *((_QWORD *)v88 + 4) += 2;
        }
        else
        {
          v88 = llvm::raw_ostream::write(v88, " %", 2uLL);
        }
        v90 = v87;
        if (v87 < 0)
        {
          v90 = -(uint64_t)v87;
          v91 = 1;
        }
        else
        {
          v91 = 0;
        }
        sub_1C5E21910(v88, v90, 0, 0, v91);
LABEL_152:
        v61 += 5;
        if (v61 == v62)
          goto LABEL_160;
      }
      llvm::raw_ostream::write(v63, ", ", 2uLL);
LABEL_107:
      if (!v7)
        goto LABEL_109;
      goto LABEL_108;
    }
  }
  else if (*((_BYTE *)a2 + 16) || a2[9] != (llvm::LLVMContext **)(a2 + 9) || (*((_BYTE *)a2 + 34) & 0x80) != 0)
  {
    goto LABEL_102;
  }
  if (*((_BYTE *)a1 + 280))
    goto LABEL_102;
  v51 = *((_DWORD *)v43 + 3);
  v52 = (v51 - 1);
  if (v51 != 1)
  {
    v53 = 0;
    do
    {
      if (v53)
      {
        v54 = *a1;
        v55 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v55 > 1uLL)
        {
          *v55 = 8236;
          *((_QWORD *)v54 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v54, ", ", 2uLL);
        }
      }
      sub_1C530D7AC((uint64_t)(a1 + 5), *((_QWORD *)v188[2] + v53 + 1));
      if (v7)
      {
        if ((v53 + 2) < *((_DWORD *)v7 + 2))
        {
          v56 = (uint64_t)v7[(v53 + 2) + 5];
          if (v56)
          {
            v57 = *a1;
            v58 = (_BYTE *)*((_QWORD *)*a1 + 4);
            if ((unint64_t)v58 >= *((_QWORD *)*a1 + 3))
            {
              llvm::raw_ostream::write(v57, 32);
            }
            else
            {
              *((_QWORD *)v57 + 4) = v58 + 1;
              *v58 = 32;
            }
            sub_1C531A660(a1, v56);
          }
        }
      }
      ++v53;
    }
    while (v52 != v53);
  }
LABEL_160:
  if (*((_DWORD *)v188 + 2) >= 0x100u)
  {
    if (*((_DWORD *)v188 + 3) != 1)
    {
      v97 = *a1;
      v98 = (_WORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v98 > 1uLL)
      {
        *v98 = 8236;
        *((_QWORD *)v97 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v97, ", ", 2uLL);
      }
    }
    v99 = *a1;
    v100 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v100) > 2)
    {
      *(_BYTE *)(v100 + 2) = 46;
      *(_WORD *)v100 = 11822;
      *((_QWORD *)v99 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v99, "...", 3uLL);
    }
  }
  v101 = *a1;
  v102 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v102 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v101, 41);
  }
  else
  {
    *((_QWORD *)v101 + 4) = v102 + 1;
    *v102 = 41;
  }
  if (*((_DWORD *)a2 + 8) >> 6)
  {
    if (*((_DWORD *)a2 + 8) >> 6 == 1)
    {
      v103 = "local_unnamed_addr";
      v104 = 18;
    }
    else
    {
      v103 = "unnamed_addr";
      v104 = 12;
    }
    v110 = *a1;
    v111 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v111 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(*a1, 32);
    }
    else
    {
      *((_QWORD *)v110 + 4) = v111 + 1;
      *v111 = 32;
    }
    v112 = (void *)*((_QWORD *)v110 + 4);
    if (v104 <= *((_QWORD *)v110 + 3) - (_QWORD)v112)
    {
      memcpy(v112, v103, v104);
      *((_QWORD *)v110 + 4) += v104;
    }
    else
    {
      llvm::raw_ostream::write(v110, v103, v104);
    }
  }
  if (*((_DWORD *)*a2 + 2) > 0xFFu || (v113 = a2[5]) == 0 || *((_DWORD *)v113 + 71))
  {
    v114 = *a1;
    v115 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v115) > 0xA)
    {
      *(_DWORD *)(v115 + 7) = 677733217;
      *(_QWORD *)v115 = *(_QWORD *)" addrspace(";
      *((_QWORD *)v114 + 4) += 11;
    }
    else
    {
      llvm::raw_ostream::write(*a1, " addrspace(", 0xBuLL);
    }
    sub_1C5E21910(v114, (unint64_t)*((unsigned int *)*a2 + 2) >> 8, 0, 0, 0);
    v116 = (_BYTE *)*((_QWORD *)v114 + 4);
    if (*((_BYTE **)v114 + 3) != v116)
    {
      *v116 = 41;
      ++*((_QWORD *)v114 + 4);
      if (!v7)
        goto LABEL_197;
      goto LABEL_303;
    }
    llvm::raw_ostream::write(v114, ")", 1uLL);
  }
  if (!v7)
    goto LABEL_197;
LABEL_303:
  if (*((_DWORD *)v7 + 2) && v7[5])
  {
    v179 = (uint64_t)*a1;
    v180 = (_WORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v180 > 1uLL)
    {
      *v180 = 8992;
      *(_QWORD *)(v179 + 32) += 2;
    }
    else
    {
      llvm::raw_ostream::write(*a1, " #", 2uLL);
    }
    if (*((_DWORD *)v7 + 2))
      v181 = (uint64_t)v7[5];
    else
      v181 = 0;
    AttributeGroupSlot = llvm::SlotTracker::getAttributeGroupSlot((uint64_t)a1[4], v181);
    v183 = AttributeGroupSlot;
    if (AttributeGroupSlot < 0)
    {
      v183 = -(uint64_t)AttributeGroupSlot;
      v184 = (llvm::raw_ostream *)v179;
      v185 = 1;
    }
    else
    {
      v184 = (llvm::raw_ostream *)v179;
      v185 = 0;
    }
    sub_1C5E21910(v184, v183, 0, 0, v185);
  }
LABEL_197:
  if ((*((_BYTE *)a2 + 34) & 0x40) == 0)
    goto LABEL_208;
  v117 = *a1;
  v118 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v118) > 9)
  {
    *(_WORD *)(v118 + 8) = 8736;
    *(_QWORD *)v118 = *(_QWORD *)" section \"";
    *((_QWORD *)v117 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v117, " section \"", 0xAuLL);
  }
  if ((*((_BYTE *)a2 + 34) & 0x40) == 0)
  {
    v119 = 0;
    v120 = 0;
    goto LABEL_205;
  }
  v121 = *(_QWORD *)**a2;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v122 = *(_DWORD *)(v121 + 2520);
  if (!v122)
  {
    v177 = 0;
LABEL_300:
    v126 = sub_1C53D65B8(v121 + 2504, (uint64_t)__p, (uint64_t *)__p, v177);
    v178 = __p[0].__r_.__value_.__r.__words[0];
    v126[1] = 0;
    v126[2] = 0;
    *v126 = v178;
    goto LABEL_204;
  }
  v123 = *(_QWORD *)(v121 + 2504);
  v124 = v122 - 1;
  v125 = v124 & ((a2 >> 4) ^ (a2 >> 9));
  v126 = (_QWORD *)(v123 + 24 * v125);
  v127 = (_QWORD ***)*v126;
  if ((llvm::LLVMContext ***)*v126 != a2)
  {
    v173 = 0;
    v174 = 1;
    while (v127 != (_QWORD ***)-4096)
    {
      if (v173)
        v175 = 0;
      else
        v175 = v127 == (_QWORD ***)-8192;
      if (v175)
        v173 = v126;
      v176 = v125 + v174++;
      v125 = v176 & v124;
      v126 = (_QWORD *)(v123 + 24 * v125);
      v127 = (_QWORD ***)*v126;
      if ((llvm::LLVMContext ***)*v126 == a2)
        goto LABEL_204;
    }
    if (v173)
      v177 = v173;
    else
      v177 = v126;
    goto LABEL_300;
  }
LABEL_204:
  v119 = (llvm::raw_ostream *)v126[1];
  v120 = v126[2];
LABEL_205:
  llvm::printEscapedString(v119, v120, *a1);
  v128 = *a1;
  v129 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v129 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(v128, 34);
  }
  else
  {
    *((_QWORD *)v128 + 4) = v129 + 1;
    *v129 = 34;
  }
LABEL_208:
  if ((*((_BYTE *)a2 + 33) & 0x80) != 0)
  {
    v130 = *a1;
    v131 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v131) > 0xB)
    {
      *(_DWORD *)(v131 + 8) = 572550767;
      *(_QWORD *)v131 = *(_QWORD *)" partition \"";
      *((_QWORD *)v130 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v130, " partition \"", 0xCuLL);
    }
    Partition = (llvm::raw_ostream *)llvm::GlobalValue::getPartition((llvm::GlobalValue *)a2);
    llvm::printEscapedString(Partition, v133, *a1);
    v134 = *a1;
    v135 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v135 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v134, 34);
    }
    else
    {
      *((_QWORD *)v134 + 4) = v135 + 1;
      *v135 = 34;
    }
  }
  sub_1C531A844(*a1, (uint64_t ***)a2);
  if ((*((_WORD *)a2 + 17) & 0x3F) != 0)
  {
    v136 = (*((_WORD *)a2 + 17) & 0x3F) - 1;
    v137 = *a1;
    v138 = (_DWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v138 > 6uLL)
    {
      *(_DWORD *)((char *)v138 + 3) = 544106345;
      *v138 = 1768710432;
      *((_QWORD *)v137 + 4) += 7;
    }
    else
    {
      v137 = llvm::raw_ostream::write(v137, " align ", 7uLL);
    }
    sub_1C5E21910(v137, 1 << v136, 0, 0, 0);
  }
  if ((*((_WORD *)a2 + 9) & 0x4000) != 0)
  {
    v139 = *a1;
    v140 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v140) > 4)
    {
      *(_BYTE *)(v140 + 4) = 34;
      *(_DWORD *)v140 = 543385376;
      *((_QWORD *)v139 + 4) += 5;
    }
    else
    {
      llvm::raw_ostream::write(*a1, " gc \"", 5uLL);
    }
    GC = llvm::LLVMContext::getGC(**a2, (const llvm::Function *)a2);
    v142 = *((_BYTE *)GC + 23);
    v143 = v142 < 0;
    if (v142 >= 0)
      v144 = (const char *)GC;
    else
      v144 = (const char *)*GC;
    v145 = v142 & 0x7F;
    if (v143)
      v146 = GC[1];
    else
      v146 = v145;
    llvm::raw_ostream::write(v139, v144, v146);
    v147 = (_BYTE *)*((_QWORD *)v139 + 4);
    if ((unint64_t)v147 >= *((_QWORD *)v139 + 3))
    {
      llvm::raw_ostream::write(v139, 34);
    }
    else
    {
      *((_QWORD *)v139 + 4) = v147 + 1;
      *v147 = 34;
    }
  }
  v148 = *((_WORD *)a2 + 9);
  if ((v148 & 2) != 0)
  {
    v149 = *a1;
    v150 = (_QWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v150 > 7uLL)
    {
      *v150 = 0x2078696665727020;
      *((_QWORD *)v149 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v149, " prefix ", 8uLL);
    }
    v151 = *((_DWORD *)a2 + 5);
    if ((v151 & 0x40000000) != 0)
      v152 = (llvm::LLVMContext ***)*(a2 - 1);
    else
      v152 = &a2[-4 * (v151 & 0x7FFFFFF)];
    sub_1C531AA44((char ***)a1, (llvm::detail::DoubleAPFloat *)v152[4], 1);
    v148 = *((_WORD *)a2 + 9);
    if ((v148 & 4) == 0)
    {
LABEL_232:
      if ((v148 & 8) == 0)
        goto LABEL_251;
      goto LABEL_245;
    }
  }
  else if ((v148 & 4) == 0)
  {
    goto LABEL_232;
  }
  v153 = *a1;
  v154 = *((_QWORD *)*a1 + 4);
  if ((unint64_t)(*((_QWORD *)*a1 + 3) - v154) > 9)
  {
    *(_WORD *)(v154 + 8) = 8293;
    *(_QWORD *)v154 = *(_QWORD *)" prologue ";
    *((_QWORD *)v153 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v153, " prologue ", 0xAuLL);
  }
  v155 = *((_DWORD *)a2 + 5);
  if ((v155 & 0x40000000) != 0)
    v156 = (llvm::LLVMContext ***)*(a2 - 1);
  else
    v156 = &a2[-4 * (v155 & 0x7FFFFFF)];
  sub_1C531AA44((char ***)a1, (llvm::detail::DoubleAPFloat *)v156[8], 1);
  if ((*((_WORD *)a2 + 9) & 8) != 0)
  {
LABEL_245:
    v157 = *a1;
    v158 = (void *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v158 > 0xCuLL)
    {
      qmemcpy(v158, " personality ", 13);
      *((_QWORD *)v157 + 4) += 13;
    }
    else
    {
      llvm::raw_ostream::write(v157, " personality ", 0xDuLL);
    }
    v159 = *((_DWORD *)a2 + 5);
    if ((v159 & 0x40000000) != 0)
      v160 = *(a2 - 1);
    else
      v160 = (llvm::detail::DoubleAPFloat **)&a2[-4 * (v159 & 0x7FFFFFF)];
    sub_1C531AA44((char ***)a1, *v160, 1);
  }
LABEL_251:
  if (a2 && *((_BYTE *)a2 + 16) == 3)
  {
    if ((*((_DWORD *)a2 + 5) & 0x7FFFFFF) == 0)
    {
LABEL_254:
      v161 = *a1;
      v162 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v162 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(v161, 10);
      }
      else
      {
        *((_QWORD *)v161 + 4) = v162 + 1;
        *v162 = 10;
      }
      goto LABEL_271;
    }
  }
  else if (!*((_BYTE *)a2 + 16) && a2[9] == (llvm::LLVMContext **)(a2 + 9) && (*((_BYTE *)a2 + 34) & 0x80) == 0)
  {
    goto LABEL_254;
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
  __p[0].__r_.__value_.__l.__size_ = 0x400000000;
  llvm::Value::getAllMetadata(a2, (uint64_t)__p);
  sub_1C53190B8((uint64_t *)a1, __p, " ", 1uLL);
  v163 = *a1;
  v164 = (_WORD *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v164 > 1uLL)
  {
    *v164 = 31520;
    *((_QWORD *)v163 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v163, " {", 2uLL);
  }
  for (i = (llvm::LLVMContext ***)a2[10]; i != a2 + 9; i = (llvm::LLVMContext ***)i[1])
  {
    if (i)
      v166 = (uint64_t ***)(i - 3);
    else
      v166 = 0;
    sub_1C530B5A8(a1, v166);
  }
  sub_1C531AB30((uint64_t)a1, (uint64_t)a2);
  v167 = *a1;
  v168 = (_WORD *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v168 > 1uLL)
  {
    *v168 = 2685;
    *((_QWORD *)v167 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v167, "}\n", 2uLL);
  }
  if ((std::string::size_type *)__p[0].__r_.__value_.__l.__data_ != &__p[0].__r_.__value_.__r.__words[2])
    free(__p[0].__r_.__value_.__l.__data_);
LABEL_271:
  v169 = a1[4];
  result = sub_1C4ECAD30((_DWORD *)v169 + 34);
  *((_QWORD *)v169 + 2) = 0;
  *((_BYTE *)v169 + 24) = 0;
  return result;
}

_QWORD *sub_1C530B4B8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;

  MEMORY[0x1CAA32FB4](a1[75], 8);
  v2 = (_QWORD *)a1[57];
  if (v2 != a1 + 59)
    free(v2);
  v3 = (_QWORD *)a1[39];
  if (v3 != a1 + 41)
    free(v3);
  sub_1C531C3C4(a1 + 36);
  v4 = (void *)a1[32];
  if (v4)
  {
    a1[33] = v4;
    operator delete(v4);
  }
  MEMORY[0x1CAA32FB4](a1[29], 8);
  v5 = (void *)a1[25];
  if (v5)
  {
    a1[26] = v5;
    operator delete(v5);
  }
  MEMORY[0x1CAA32FB4](a1[22], 8);
  v6 = (void *)a1[18];
  if (v6)
  {
    a1[19] = v6;
    operator delete(v6);
  }
  MEMORY[0x1CAA32FB4](a1[15], 8);
  MEMORY[0x1CAA32FB4](a1[12], 8);
  MEMORY[0x1CAA32FB4](a1[9], 8);
  MEMORY[0x1CAA32FB4](a1[6], 8);
  v7 = a1[3];
  a1[3] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

uint64_t sub_1C530B5A8(llvm::raw_ostream **a1, uint64_t ***a2)
{
  uint64_t **v4;
  uint64_t *v5;
  uint64_t ***v6;
  BOOL v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  llvm::raw_ostream *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t ***v15;
  int v16;
  int v17;
  llvm::raw_ostream *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ****v24;
  uint64_t ***v25;
  int v26;
  int v27;
  unint64_t v28;
  llvm::raw_ostream *v29;
  llvm::raw_ostream *v30;
  int v31;
  _BYTE *v32;
  const char *v33;
  llvm::raw_ostream *v34;
  size_t v35;
  uint64_t v36;
  size_t *v37;
  llvm::raw_ostream *v38;
  size_t v39;
  size_t v40;
  llvm::raw_ostream *v41;
  _BYTE *v42;
  llvm::raw_ostream *v43;
  _BYTE *v44;
  uint64_t **v45;
  uint64_t *v46;
  unsigned int v47;
  BOOL v48;
  llvm::raw_ostream *v50;
  uint64_t v51;
  llvm::raw_ostream *v52;
  _BYTE *v53;
  llvm::raw_ostream *v54;
  uint64_t **i;
  uint64_t v56;
  llvm::raw_ostream *v57;
  _BYTE *v58;
  uint64_t result;
  llvm::raw_ostream *v60;
  uint64_t v61;
  uint64_t *v62;
  unsigned int v63;
  BOOL v64;
  llvm::raw_ostream *v66;
  _WORD *v67;
  uint64_t *v68;
  unsigned int v69;
  BOOL v70;

  v4 = a2[7];
  if (!v4)
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
      goto LABEL_9;
    v7 = 0;
LABEL_23:
    v18 = *a1;
    v19 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if (*((_BYTE **)*a1 + 3) == v19)
    {
      llvm::raw_ostream::write(v18, "\n", 1uLL);
    }
    else
    {
      *v19 = 10;
      ++*((_QWORD *)v18 + 4);
    }
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
      v39 = 0;
      v38 = (llvm::raw_ostream *)&byte_1C871356D;
LABEL_44:
      llvm::printLLVMNameWithoutPrefix(*a1, v38, v39);
      v41 = *a1;
      v42 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v42 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(v41, 58);
        if (v7)
          goto LABEL_62;
      }
      else
      {
        *((_QWORD *)v41 + 4) = v42 + 1;
        *v42 = 58;
        if (v7)
          goto LABEL_62;
      }
      goto LABEL_48;
    }
    v20 = ***a2;
    v21 = *(_QWORD *)(v20 + 152);
    v22 = *(unsigned int *)(v20 + 168);
    if ((_DWORD)v22)
    {
      LODWORD(v23) = (v22 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v24 = (uint64_t ****)(v21 + 16 * v23);
      v25 = *v24;
      if (*v24 == a2)
      {
LABEL_43:
        v37 = (size_t *)v24[1];
        v40 = *v37;
        v38 = (llvm::raw_ostream *)(v37 + 2);
        v39 = v40;
        goto LABEL_44;
      }
      v26 = 1;
      while (v25 != (uint64_t ***)-4096)
      {
        v27 = v23 + v26++;
        v23 = v27 & (v22 - 1);
        v25 = *(uint64_t ****)(v21 + 16 * v23);
        if (v25 == a2)
        {
          v24 = (uint64_t ****)(v21 + 16 * v23);
          goto LABEL_43;
        }
      }
    }
    v24 = (uint64_t ****)(v21 + 16 * v22);
    goto LABEL_43;
  }
  v5 = v4[10];
  if (v5)
    v6 = (uint64_t ***)(v5 - 3);
  else
    v6 = 0;
  v7 = v6 == a2;
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
    goto LABEL_23;
  if (v6 == a2)
    goto LABEL_62;
LABEL_9:
  v8 = *a1;
  v9 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v9)
  {
    llvm::raw_ostream::write(v8, "\n", 1uLL);
  }
  else
  {
    *v9 = 10;
    ++*((_QWORD *)v8 + 4);
  }
  v10 = a1[4];
  if (*((_QWORD *)v10 + 1))
  {
    llvm::SlotTracker::processModule(a1[4]);
    *((_QWORD *)v10 + 1) = 0;
  }
  if (*((_QWORD *)v10 + 2) && !*((_BYTE *)v10 + 24))
    llvm::SlotTracker::processFunction(v10);
  v11 = *((_QWORD *)v10 + 17);
  v12 = *((unsigned int *)v10 + 38);
  if (!(_DWORD)v12)
  {
LABEL_32:
    v14 = (uint64_t *)(v11 + 16 * v12);
    goto LABEL_33;
  }
  LODWORD(v13) = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v14 = (uint64_t *)(v11 + 16 * v13);
  v15 = (uint64_t ***)*v14;
  if ((uint64_t ***)*v14 != a2)
  {
    v16 = 1;
    while (v15 != (uint64_t ***)-4096)
    {
      v17 = v13 + v16++;
      v13 = v17 & (v12 - 1);
      v15 = *(uint64_t ****)(v11 + 16 * v13);
      if (v15 == a2)
      {
        v14 = (uint64_t *)(v11 + 16 * v13);
        goto LABEL_33;
      }
    }
    goto LABEL_32;
  }
LABEL_33:
  if (v14 == (uint64_t *)(v11 + 16 * v12) || (v28 = *((int *)v14 + 2), (_DWORD)v28 == -1))
  {
    v34 = *a1;
    v36 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v36) <= 8)
    {
      v33 = "<badref>:";
      v35 = 9;
      goto LABEL_41;
    }
    *(_BYTE *)(v36 + 8) = 58;
    *(_QWORD *)v36 = *(_QWORD *)"<badref>:";
    *((_QWORD *)v34 + 4) += 9;
  }
  else
  {
    v29 = *a1;
    if ((v28 & 0x80000000) != 0)
    {
      v28 = -(uint64_t)v28;
      v30 = *a1;
      v31 = 1;
    }
    else
    {
      v30 = *a1;
      v31 = 0;
    }
    sub_1C5E21910(v30, v28, 0, 0, v31);
    v32 = (_BYTE *)*((_QWORD *)v29 + 4);
    if (*((_BYTE **)v29 + 3) == v32)
    {
      v33 = ":";
      v34 = v29;
      v35 = 1;
LABEL_41:
      llvm::raw_ostream::write(v34, v33, v35);
      goto LABEL_48;
    }
    *v32 = 58;
    ++*((_QWORD *)v29 + 4);
  }
LABEL_48:
  llvm::formatted_raw_ostream::PadToColumn(*a1, 50);
  v43 = *a1;
  v44 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v44)
  {
    llvm::raw_ostream::write(v43, ";", 1uLL);
  }
  else
  {
    *v44 = 59;
    ++*((_QWORD *)v43 + 4);
  }
  v45 = a2[1];
  if (v45)
  {
    while (1)
    {
      v46 = v45[3];
      v47 = *((unsigned __int8 *)v46 + 16);
      v48 = v46 && v47 >= 0x1C;
      if (v48 && v47 - 29 < 0xB)
        break;
      v45 = (uint64_t **)v45[1];
      if (!v45)
        goto LABEL_60;
    }
    v60 = *a1;
    v61 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v61) > 8)
    {
      *(_BYTE *)(v61 + 8) = 32;
      *(_QWORD *)v61 = *(_QWORD *)" preds = ";
      *((_QWORD *)v60 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v60, " preds = ", 9uLL);
    }
    sub_1C531AA44((char ***)a1, (llvm::detail::DoubleAPFloat *)v45[3][5], 0);
    while (1)
    {
      v45 = (uint64_t **)v45[1];
      if (!v45)
        break;
      v62 = v45[3];
      v63 = *((unsigned __int8 *)v62 + 16);
      if (v62)
        v64 = v63 >= 0x1C;
      else
        v64 = 0;
      if (v64 && v63 - 29 <= 0xA)
      {
LABEL_88:
        v66 = *a1;
        v67 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v67 > 1uLL)
        {
          *v67 = 8236;
          *((_QWORD *)v66 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v66, ", ", 2uLL);
        }
        sub_1C531AA44((char ***)a1, (llvm::detail::DoubleAPFloat *)v45[3][5], 0);
        while (1)
        {
          v45 = (uint64_t **)v45[1];
          if (!v45)
            goto LABEL_62;
          v68 = v45[3];
          v69 = *((unsigned __int8 *)v68 + 16);
          if (v68)
            v70 = v69 >= 0x1C;
          else
            v70 = 0;
          if (v70 && v69 - 29 < 0xB)
            goto LABEL_88;
        }
      }
    }
  }
  else
  {
LABEL_60:
    v50 = *a1;
    v51 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v51) > 0x10)
    {
      *(_BYTE *)(v51 + 16) = 33;
      *(_OWORD *)v51 = *(_OWORD *)" No predecessors!";
      *((_QWORD *)v50 + 4) += 17;
    }
    else
    {
      llvm::raw_ostream::write(v50, " No predecessors!", 0x11uLL);
    }
  }
LABEL_62:
  v52 = *a1;
  v53 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if (*((_BYTE **)*a1 + 3) == v53)
  {
    llvm::raw_ostream::write(v52, "\n", 1uLL);
  }
  else
  {
    *v53 = 10;
    ++*((_QWORD *)v52 + 4);
  }
  v54 = a1[28];
  if (v54)
    (*(void (**)(llvm::raw_ostream *, uint64_t ***, llvm::raw_ostream *))(*(_QWORD *)v54 + 24))(v54, a2, *a1);
  for (i = a2[6]; i != (uint64_t **)(a2 + 5); i = (uint64_t **)i[1])
  {
    if (i)
      v56 = (uint64_t)(i - 3);
    else
      v56 = 0;
    sub_1C530ED84(a1, v56);
    v57 = *a1;
    v58 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v58 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v57, 10);
    }
    else
    {
      *((_QWORD *)v57 + 4) = v58 + 1;
      *v58 = 10;
    }
  }
  result = (uint64_t)a1[28];
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t ***, llvm::raw_ostream *))(*(_QWORD *)result + 32))(result, a2, *a1);
  return result;
}

_QWORD *llvm::Module::print(const std::string *this, llvm::raw_ostream *a2, llvm::AssemblyAnnotationWriter *a3, char a4, char a5)
{
  llvm::SlotTracker *v9;
  llvm::raw_ostream *v10;
  void *v11;
  char v12;
  BOOL v13;
  const char *data;
  size_t v15;
  size_t v16;
  llvm::raw_ostream *v17;
  _WORD *v18;
  llvm::raw_ostream *v19;
  uint64_t v20;
  char v21;
  BOOL v22;
  llvm::raw_ostream *v23;
  uint64_t v24;
  uint64_t v25;
  llvm::raw_ostream *v26;
  _WORD *v27;
  llvm::raw_ostream *v28;
  void *v29;
  char v30;
  BOOL v31;
  const char *v32;
  size_t v33;
  size_t v34;
  llvm::raw_ostream *v35;
  _WORD *v36;
  llvm::raw_ostream *v37;
  uint64_t v38;
  char v39;
  BOOL v40;
  const char *v41;
  size_t v42;
  size_t v43;
  llvm::raw_ostream *v44;
  _WORD *v45;
  _BYTE *v46;
  std::string::value_type v47;
  BOOL v48;
  llvm::raw_ostream *v49;
  std::string::size_type v50;
  std::string::size_type v51;
  unint64_t v52;
  unint64_t v53;
  std::string::size_type v54;
  char *v55;
  std::string::size_type v56;
  uint64_t v57;
  std::string::size_type v58;
  llvm::raw_ostream *v59;
  uint64_t v60;
  llvm::raw_ostream *v61;
  _WORD *v62;
  _BYTE *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unsigned int v67;
  unint64_t v68;
  uint64_t v69;
  llvm::raw_ostream *v70;
  _BYTE *v71;
  _QWORD *v72;
  _BYTE *v73;
  uint64_t *v74;
  uint64_t *m;
  uint64_t v76;
  llvm::raw_ostream *v77;
  size_t v78;
  size_t v79;
  llvm::raw_ostream *v80;
  _BYTE *v81;
  llvm::raw_ostream *v82;
  _QWORD *v83;
  _BYTE *v84;
  _BYTE *v85;
  size_t ***v86;
  size_t ***n;
  size_t **v88;
  _BYTE *v89;
  char *v90;
  _BYTE *v91;
  std::string::size_type ii;
  uint64_t ***v93;
  _BYTE *v94;
  llvm::raw_ostream *v95;
  _BYTE *v96;
  _QWORD *jj;
  uint64_t v98;
  llvm::raw_ostream *v99;
  _BYTE *v100;
  std::string::size_type *kk;
  uint64_t v102;
  const std::string *mm;
  llvm::LLVMContext ***v104;
  _BYTE *v105;
  _BYTE *v106;
  llvm::SlotTracker *v107;
  uint64_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  llvm::AttributeSetNode **v128;
  llvm::raw_ostream *v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  BOOL v133;
  std::string *v134;
  std::string::size_type v135;
  std::string::size_type v136;
  uint64_t v137;
  const std::string *v138;
  _BYTE *v139;
  uint64_t nn;
  _BYTE *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t i1;
  uint64_t v153;
  llvm::raw_ostream *v154;
  _BYTE *v155;
  uint64_t v156;
  llvm::raw_ostream *v157;
  _BYTE *v158;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  std::string::size_type *i;
  uint64_t v164;
  uint64_t v165;
  _QWORD *j;
  uint64_t v167;
  uint64_t v168;
  std::string::size_type *k;
  uint64_t v170;
  uint64_t v171;
  const std::string *size;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  BOOL v194;
  unsigned __int8 *v195;
  llvm::raw_ostream *v197;
  llvm::raw_ostream *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  char *v207;
  char *v208;
  char *v209;
  std::string *v210;
  int v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  unsigned int v217;
  unsigned int v218;
  size_t v219;
  unint64_t v220;
  unsigned int v221;
  std::string::size_type v222;
  _QWORD *v223;
  uint64_t v224;
  void *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  llvm::raw_ostream *v231;
  char v232[8];
  char *__s;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237[2];
  uint64_t v238;
  uint64_t v239[2];
  int v240;
  uint64_t v241;
  uint64_t v242;
  _BYTE *v243;
  uint64_t v244;
  llvm::raw_ostream *v245;
  llvm::raw_ostream *v246;
  uint64_t v247;
  BOOL v248;
  int v249;
  _QWORD v250[3];
  llvm::raw_ostream *v251[4];
  llvm::SlotTracker *v252;
  _BYTE v253[104];
  uint64_t *v254;
  uint64_t *v255;
  uint64_t v256;
  unsigned int v257;
  unsigned int v258;
  char *v259;
  char *v260;
  char *v261;
  size_t ***v262;
  size_t ***v263;
  char v264;
  uint64_t v265[42];
  _QWORD v266[3];
  __int16 v267;
  uint64_t v268;
  __int128 v269;
  __int128 v270;
  int v271;
  int v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  int v276;
  uint64_t v277;
  uint64_t v278;
  int v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  int v291;
  int v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  std::string __p[43];
  uint64_t v298;

  v298 = *MEMORY[0x1E0C80C00];
  v266[0] = &off_1E814DC38;
  v266[1] = this;
  v266[2] = 0;
  v267 = 0;
  v268 = 0;
  v269 = 0u;
  v270 = 0u;
  v272 = 0;
  v271 = 0;
  v274 = 0;
  v273 = 0;
  v276 = 0;
  v275 = 0;
  v278 = 0;
  v277 = 0;
  v280 = 0;
  v279 = 0;
  v282 = 0;
  v281 = 0;
  v284 = 0;
  v283 = 0;
  v285 = 0;
  v286 = 0;
  v287 = 0x1000000000;
  v288 = 0;
  v292 = 0;
  v291 = 0;
  v289 = 0;
  v290 = 0;
  v293 = 0;
  v294 = 0;
  v295 = 0x1000000000;
  v296 = 0;
  LODWORD(v227) = 0;
  LOBYTE(v231) = 0;
  *(_QWORD *)v232 = 0;
  LODWORD(__s) = 1;
  v229 = 0;
  v230 = 0;
  v228 = 0;
  v226 = (uint64_t)&off_1E81A1100;
  v234 = 0;
  v235 = 0;
  v236 = (uint64_t)&v238;
  *(_OWORD *)v237 = xmmword_1C6612EF0;
  sub_1C4D685DC((uint64_t)&v226, (uint64_t)a2);
  sub_1C5309E54((uint64_t)v251, (uint64_t)&v226, (uint64_t)v266, (uint64_t)this, (uint64_t)a3, a5, a4);
  v9 = v252;
  if (*((_QWORD *)v252 + 1))
  {
    llvm::SlotTracker::processModule(v252);
    *((_QWORD *)v9 + 1) = 0;
  }
  if (*((_QWORD *)v9 + 2) && !*((_BYTE *)v9 + 24))
    llvm::SlotTracker::processFunction(v9);
  if (v264)
  {
    v242 = 0;
    v243 = 0;
    LODWORD(v244) = 0;
    v246 = 0;
    v247 = 0;
    v245 = 0;
    for (i = (std::string::size_type *)this->__r_.__value_.__r.__words[2]; ; i = (std::string::size_type *)i[1])
    {
      if (i == &this->__r_.__value_.__r.__words[1])
      {
        for (j = this[2].__r_.__value_.__l.__data_; j != &this[1].__r_.__value_.__r.__words[2]; j = (_QWORD *)j[1])
        {
          if (j)
            v167 = (uint64_t)(j - 6);
          else
            v167 = 0;
          v168 = *(_QWORD *)(v167 - 32);
          if (*(unsigned __int8 *)(v168 + 16) >= 4u)
            sub_1C531C510(v168, (uint64_t)&v242);
          sub_1C531C510(v167, (uint64_t)&v242);
        }
        for (k = (std::string::size_type *)this[2].__r_.__value_.__r.__words[2];
              k != &this[2].__r_.__value_.__r.__words[1];
              k = (std::string::size_type *)k[1])
        {
          if (k)
            v170 = (uint64_t)(k - 7);
          else
            v170 = 0;
          v171 = *(_QWORD *)(v170 - 32);
          if (*(unsigned __int8 *)(v171 + 16) >= 4u)
            sub_1C531C510(v171, (uint64_t)&v242);
          sub_1C531C510(v170, (uint64_t)&v242);
        }
        size = (const std::string *)this[1].__r_.__value_.__l.__size_;
LABEL_334:
        if (size == &this[1])
        {
          v239[0] = 0;
          v239[1] = 0;
          v240 = 0;
          v197 = v245;
          v198 = v246;
          if (v245 == v246)
          {
LABEL_388:
            sub_1C6176BF8(&v242);
            sub_1C6226B38(v265, v239);
            sub_1C531C3C4(v239);
            break;
          }
          while (2)
          {
            v201 = *(_QWORD *)v197;
            v241 = v201;
            v202 = *(_QWORD *)(v201 + 8);
            if (v202 && *(_QWORD *)(v202 + 8))
            {
              v249 = *((_DWORD *)v197 + 2);
              __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
              __p[0].__r_.__value_.__l.__size_ = 0x4000000000;
              do
              {
                if (sub_1C6226C9C((uint64_t)&v242, *(_QWORD *)(v202 + 24)))
                {
                  v203 = LODWORD(__p[0].__r_.__value_.__r.__words[1]);
                  v204 = LODWORD(__p[0].__r_.__value_.__r.__words[1]);
                  if (LODWORD(__p[0].__r_.__value_.__r.__words[1]) >= HIDWORD(__p[0].__r_.__value_.__r.__words[1]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&__p[0].__r_.__value_.__r.__words[2], LODWORD(__p[0].__r_.__value_.__r.__words[1]) + 1, 16);
                    v204 = LODWORD(__p[0].__r_.__value_.__r.__words[1]);
                  }
                  v205 = (_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + 16 * v204);
                  *v205 = v202;
                  v205[1] = v203;
                  ++LODWORD(__p[0].__r_.__value_.__r.__words[1]);
                }
                v202 = *(_QWORD *)(v202 + 8);
              }
              while (v202);
              v206 = LODWORD(__p[0].__r_.__value_.__r.__words[1]);
              if (LODWORD(__p[0].__r_.__value_.__r.__words[1]) > 1)
              {
                v211 = *(unsigned __int8 *)(v201 + 16);
                v248 = v211 != 22;
                if (v201 && v211 == 4)
                {
                  v249 = sub_1C6226C9C((uint64_t)&v242, *(_QWORD *)(v201 - 32));
                  v206 = LODWORD(__p[0].__r_.__value_.__r.__words[1]);
                }
                v250[0] = &v242;
                v250[1] = &v248;
                v250[2] = &v249;
                v212 = 126 - 2 * __clz(v206);
                if (v206)
                  v213 = v212;
                else
                  v213 = 0;
                sub_1C531C5E4((uint64_t)__p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__r.__words[0] + 16 * v206, (uint64_t)v250, v213, 1);
                v210 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
                v214 = LODWORD(__p[0].__r_.__value_.__r.__words[1]);
                if (LODWORD(__p[0].__r_.__value_.__r.__words[1]))
                {
                  v215 = (unsigned int *)(__p[0].__r_.__value_.__r.__words[0] + 24);
                  v216 = 16 * LODWORD(__p[0].__r_.__value_.__r.__words[1]) - 16;
                  while (v216)
                  {
                    v217 = *v215;
                    v218 = *(v215 - 4);
                    v215 += 4;
                    v216 -= 16;
                    if (v217 < v218)
                    {
                      v219 = 4 * LODWORD(__p[0].__r_.__value_.__r.__words[1]);
                      v209 = (char *)operator new(v219);
                      bzero(v209, 4 * v214);
                      v220 = 0;
                      do
                      {
                        *(_DWORD *)&v209[v220] = v210->__r_.__value_.__r.__words[v220 / 2 + 1];
                        v220 += 4;
                      }
                      while (v219 != v220);
                      v207 = &v209[4 * v214];
                      v208 = &v209[v219];
                      goto LABEL_422;
                    }
                  }
                }
                v207 = 0;
                v208 = 0;
                v209 = 0;
              }
              else
              {
                v207 = 0;
                v208 = 0;
                v209 = 0;
                v210 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
              }
LABEL_422:
              if (v210 != (std::string *)&__p[0].__r_.__value_.__r.__words[2])
                free(v210);
              if (v209 == v208)
              {
                if (v208)
                  operator delete(v208);
                goto LABEL_427;
              }
              __p[0].__r_.__value_.__r.__words[0] = 0;
              v221 = *(unsigned __int8 *)(v201 + 16);
              if (v201 && v221 >= 0x1C)
                __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v201 + 40) + 56);
              if (v221 == 22)
              {
                v222 = *(_QWORD *)(v201 + 56);
LABEL_436:
                __p[0].__r_.__value_.__r.__words[0] = v222;
              }
              else if (v221 == 21)
              {
                v222 = *(_QWORD *)(v201 + 24);
                goto LABEL_436;
              }
              v223 = sub_1C6226DCC((uint64_t)v239, (uint64_t *)__p);
              v224 = sub_1C6226BF0((uint64_t)(v223 + 1), &v241);
              v225 = *(void **)v224;
              if (*(_QWORD *)v224)
              {
                *(_QWORD *)(v224 + 8) = v225;
                operator delete(v225);
              }
              *(_QWORD *)v224 = v209;
              *(_QWORD *)(v224 + 8) = v208;
              *(_QWORD *)(v224 + 16) = v207;
            }
LABEL_427:
            v197 = (llvm::raw_ostream *)((char *)v197 + 16);
            if (v197 == v198)
              goto LABEL_388;
            continue;
          }
        }
        if (size)
          v173 = (uint64_t)&size[-3].__r_.__value_.__r.__words[2];
        else
          v173 = 0;
        v174 = *(_DWORD *)(v173 + 20);
        if ((v174 & 0x40000000) != 0)
        {
          v176 = *(uint64_t **)(v173 - 8);
          v175 = v174 & 0x7FFFFFF;
          if (v175)
            goto LABEL_342;
        }
        else
        {
          v175 = v174 & 0x7FFFFFF;
          v176 = (uint64_t *)(v173 - 32 * v175);
          if (!v175)
            goto LABEL_346;
LABEL_342:
          v177 = 32 * v175;
          do
          {
            if (*(unsigned __int8 *)(*v176 + 16) >= 4u)
              sub_1C531C510(*v176, (uint64_t)&v242);
            v176 += 4;
            v177 -= 32;
          }
          while (v177);
        }
LABEL_346:
        sub_1C531C510(v173, (uint64_t)&v242);
        if (size && *(_BYTE *)(v173 + 16) == 3)
        {
          if ((*(_DWORD *)(v173 + 20) & 0x7FFFFFF) == 0)
          {
LABEL_349:
            size = (const std::string *)size->__r_.__value_.__l.__size_;
            goto LABEL_334;
          }
        }
        else if (!*(_BYTE *)(v173 + 16) && *(_QWORD *)(v173 + 72) == v173 + 72 && (*(_BYTE *)(v173 + 34) & 0x80) == 0)
        {
          goto LABEL_349;
        }
        v178 = sub_1C485F330(v173);
        if (v178 != v179)
        {
          v180 = v178;
          v181 = v179;
          do
          {
            sub_1C531C510(v180, (uint64_t)&v242);
            v180 += 40;
          }
          while (v180 != v181);
        }
        v182 = v173 + 72;
        v183 = *(_QWORD *)(v173 + 80);
        while (2)
        {
          if (v183 != v182)
          {
            if (v183)
              v184 = v183 - 24;
            else
              v184 = 0;
            sub_1C531C510(v184, (uint64_t)&v242);
            v185 = v184 + 40;
            v186 = *(_QWORD *)(v184 + 48);
LABEL_362:
            if (v186 == v185)
            {
              v183 = *(_QWORD *)(v183 + 8);
              continue;
            }
            if (v186)
              v187 = v186 - 24;
            else
              v187 = 0;
            v188 = *(_DWORD *)(v187 + 20);
            if ((v188 & 0x40000000) != 0)
            {
              v190 = *(uint64_t **)(v187 - 8);
              v189 = v188 & 0x7FFFFFF;
              if (!v189)
              {
LABEL_385:
                sub_1C531C510(v187, (uint64_t)&v242);
                v186 = *(_QWORD *)(v186 + 8);
                goto LABEL_362;
              }
            }
            else
            {
              v189 = v188 & 0x7FFFFFF;
              v190 = (uint64_t *)(v187 - 32 * v189);
              if (!v189)
                goto LABEL_385;
            }
            v191 = 32 * v189;
            do
            {
              v192 = *v190;
              v193 = *(unsigned __int8 *)(*v190 + 16);
              if (*v190)
                v194 = v193 == 23;
              else
                v194 = 0;
              if (v194)
              {
                v195 = *(unsigned __int8 **)(v192 + 24);
                if (*v195 - 3 >= 0xFFFFFFFE)
                {
                  v192 = *((_QWORD *)v195 + 16);
                  v193 = *(unsigned __int8 *)(v192 + 16);
                }
                else
                {
                  v193 = 23;
                }
              }
              if (v193 == 24 || (v193 - 4) <= 0x10)
                sub_1C531C510(v192, (uint64_t)&v242);
              v190 += 4;
              v191 -= 32;
            }
            while (v191);
            goto LABEL_385;
          }
          goto LABEL_349;
        }
      }
      if (i)
        v164 = (uint64_t)(i - 7);
      else
        v164 = 0;
      if (i && *(_BYTE *)(v164 + 16) == 3)
      {
        if ((*(_DWORD *)(v164 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_316;
      }
      else if (!*(_BYTE *)(v164 + 16) && *(_QWORD *)(v164 + 72) == v164 + 72 && (*(_BYTE *)(v164 + 34) & 0x80) == 0)
      {
        goto LABEL_316;
      }
      v165 = *(_QWORD *)(v164 - 32);
      if (*(unsigned __int8 *)(v165 + 16) >= 4u)
        sub_1C531C510(v165, (uint64_t)&v242);
LABEL_316:
      sub_1C531C510(v164, (uint64_t)&v242);
    }
  }
  if (SHIBYTE(this[7].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[7].__r_.__value_.__l.__size_)
      goto LABEL_22;
  }
  else if (!*((_BYTE *)&this[7].__r_.__value_.__s + 23))
  {
    goto LABEL_22;
  }
  if (std::string::find(this + 7, 10, 0) == -1)
  {
    v10 = v251[0];
    v11 = (void *)*((_QWORD *)v251[0] + 4);
    if (*((_QWORD *)v251[0] + 3) - (_QWORD)v11 > 0xDuLL)
    {
      qmemcpy(v11, "; ModuleID = '", 14);
      *((_QWORD *)v10 + 4) += 14;
    }
    else
    {
      v10 = llvm::raw_ostream::write(v251[0], "; ModuleID = '", 0xEuLL);
    }
    v12 = HIBYTE(this[7].__r_.__value_.__r.__words[2]);
    v13 = v12 < 0;
    if (v12 >= 0)
      data = (const char *)&this[7];
    else
      data = this[7].__r_.__value_.__l.__data_;
    v15 = v12 & 0x7F;
    if (v13)
      v16 = this[7].__r_.__value_.__l.__size_;
    else
      v16 = v15;
    v17 = llvm::raw_ostream::write(v10, data, v16);
    v18 = (_WORD *)*((_QWORD *)v17 + 4);
    if (*((_QWORD *)v17 + 3) - (_QWORD)v18 > 1uLL)
    {
      *v18 = 2599;
      *((_QWORD *)v17 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v17, "'\n", 2uLL);
    }
  }
LABEL_22:
  if (SHIBYTE(this[8].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[8].__r_.__value_.__l.__size_)
      goto LABEL_36;
  }
  else if (!*((_BYTE *)&this[8].__r_.__value_.__s + 23))
  {
    goto LABEL_36;
  }
  v19 = v251[0];
  v20 = *((_QWORD *)v251[0] + 4);
  if ((unint64_t)(*((_QWORD *)v251[0] + 3) - v20) > 0x12)
  {
    *(_DWORD *)(v20 + 15) = 572538144;
    *(_OWORD *)v20 = *(_OWORD *)"source_filename = \"";
    *((_QWORD *)v19 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(v251[0], "source_filename = \"", 0x13uLL);
  }
  v21 = HIBYTE(this[8].__r_.__value_.__r.__words[2]);
  v22 = v21 < 0;
  if (v21 >= 0)
    v23 = (llvm::raw_ostream *)&this[8];
  else
    v23 = (llvm::raw_ostream *)this[8].__r_.__value_.__l.__data_;
  v24 = v21 & 0x7F;
  if (v22)
    v25 = this[8].__r_.__value_.__l.__size_;
  else
    v25 = v24;
  llvm::printEscapedString(v23, v25, v251[0]);
  v26 = v251[0];
  v27 = (_WORD *)*((_QWORD *)v251[0] + 4);
  if (*((_QWORD *)v251[0] + 3) - (_QWORD)v27 > 1uLL)
  {
    *v27 = 2594;
    *((_QWORD *)v26 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v251[0], "\"\n", 2uLL);
  }
LABEL_36:
  if (SHIBYTE(this[20].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[20].__r_.__value_.__l.__size_)
      goto LABEL_50;
  }
  else if (!*((_BYTE *)&this[20].__r_.__value_.__s + 23))
  {
    goto LABEL_50;
  }
  v28 = v251[0];
  v29 = (void *)*((_QWORD *)v251[0] + 4);
  if (*((_QWORD *)v251[0] + 3) - (_QWORD)v29 > 0x14uLL)
  {
    qmemcpy(v29, "target datalayout = \"", 21);
    *((_QWORD *)v28 + 4) += 21;
  }
  else
  {
    v28 = llvm::raw_ostream::write(v251[0], "target datalayout = \"", 0x15uLL);
  }
  v30 = HIBYTE(this[20].__r_.__value_.__r.__words[2]);
  v31 = v30 < 0;
  if (v30 >= 0)
    v32 = (const char *)&this[20];
  else
    v32 = this[20].__r_.__value_.__l.__data_;
  v33 = v30 & 0x7F;
  if (v31)
    v34 = this[20].__r_.__value_.__l.__size_;
  else
    v34 = v33;
  v35 = llvm::raw_ostream::write(v28, v32, v34);
  v36 = (_WORD *)*((_QWORD *)v35 + 4);
  if (*((_QWORD *)v35 + 3) - (_QWORD)v36 > 1uLL)
  {
    *v36 = 2594;
    *((_QWORD *)v35 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v35, "\"\n", 2uLL);
  }
LABEL_50:
  if (SHIBYTE(this[9].__r_.__value_.__r.__words[2]) < 0)
  {
    if (!this[9].__r_.__value_.__l.__size_)
      goto LABEL_64;
  }
  else if (!*((_BYTE *)&this[9].__r_.__value_.__s + 23))
  {
    goto LABEL_64;
  }
  v37 = v251[0];
  v38 = *((_QWORD *)v251[0] + 4);
  if ((unint64_t)(*((_QWORD *)v251[0] + 3) - v38) > 0x10)
  {
    *(_BYTE *)(v38 + 16) = 34;
    *(_OWORD *)v38 = *(_OWORD *)"target triple = \"";
    *((_QWORD *)v37 + 4) += 17;
  }
  else
  {
    v37 = llvm::raw_ostream::write(v251[0], "target triple = \"", 0x11uLL);
  }
  v39 = HIBYTE(this[9].__r_.__value_.__r.__words[2]);
  v40 = v39 < 0;
  if (v39 >= 0)
    v41 = (const char *)&this[9];
  else
    v41 = this[9].__r_.__value_.__l.__data_;
  v42 = v39 & 0x7F;
  if (v40)
    v43 = this[9].__r_.__value_.__l.__size_;
  else
    v43 = v42;
  v44 = llvm::raw_ostream::write(v37, v41, v43);
  v45 = (_WORD *)*((_QWORD *)v44 + 4);
  if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 1uLL)
  {
    *v45 = 2594;
    *((_QWORD *)v44 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v44, "\"\n", 2uLL);
  }
LABEL_64:
  if (this[4].__r_.__value_.__s.__data_[15] < 0)
  {
    if (!this[4].__r_.__value_.__r.__words[0])
      goto LABEL_101;
  }
  else if (!this[4].__r_.__value_.__s.__data_[15])
  {
    goto LABEL_101;
  }
  v46 = (_BYTE *)*((_QWORD *)v251[0] + 4);
  if ((unint64_t)v46 >= *((_QWORD *)v251[0] + 3))
  {
    llvm::raw_ostream::write(v251[0], 10);
  }
  else
  {
    *((_QWORD *)v251[0] + 4) = v46 + 1;
    *v46 = 10;
  }
  v47 = this[4].__r_.__value_.__s.__data_[15];
  v48 = v47 < 0;
  if (v47 >= 0)
    v49 = (llvm::raw_ostream *)&this[3].__r_.__value_.__r.__words[2];
  else
    v49 = (llvm::raw_ostream *)this[3].__r_.__value_.__r.__words[2];
  v50 = v47 & 0x7F;
  if (v48)
    v51 = this[4].__r_.__value_.__r.__words[0];
  else
    v51 = v50;
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
  __p[0].__r_.__value_.__l.__size_ = v51;
  do
  {
    LOBYTE(v242) = 10;
    v52 = llvm::StringRef::find((uint64_t *)__p, (char *)&v242, 1uLL, 0);
    if (v51 >= v52)
      v53 = v52;
    else
      v53 = v51;
    if (v51 >= v52 + 1)
      v54 = v52 + 1;
    else
      v54 = v51;
    v55 = (char *)v49 + v54;
    v56 = v51 - v54;
    if (v52 == -1)
      v57 = v51;
    else
      v57 = v53;
    if (v52 == -1)
      v58 = 0;
    else
      v58 = (std::string::size_type)v55;
    if (v52 == -1)
      v51 = 0;
    else
      v51 = v56;
    __p[0].__r_.__value_.__r.__words[0] = v58;
    __p[0].__r_.__value_.__l.__size_ = v51;
    v59 = v251[0];
    v60 = *((_QWORD *)v251[0] + 4);
    if ((unint64_t)(*((_QWORD *)v251[0] + 3) - v60) > 0xB)
    {
      *(_DWORD *)(v60 + 8) = 572550515;
      *(_QWORD *)v60 = *(_QWORD *)"module asm \"";
      *((_QWORD *)v59 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v251[0], "module asm \"", 0xCuLL);
    }
    llvm::printEscapedString(v49, v57, v251[0]);
    v61 = v251[0];
    v62 = (_WORD *)*((_QWORD *)v251[0] + 4);
    if (*((_QWORD *)v251[0] + 3) - (_QWORD)v62 > 1uLL)
    {
      *v62 = 2594;
      *((_QWORD *)v61 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v251[0], "\"\n", 2uLL);
    }
    v49 = (llvm::raw_ostream *)v58;
  }
  while (v51);
LABEL_101:
  sub_1C531D51C((uint64_t)v253);
  if (v254 == v255 && !v257)
    goto LABEL_135;
  v63 = (_BYTE *)*((_QWORD *)v251[0] + 4);
  if ((unint64_t)v63 >= *((_QWORD *)v251[0] + 3))
  {
    llvm::raw_ostream::write(v251[0], 10);
  }
  else
  {
    *((_QWORD *)v251[0] + 4) = v63 + 1;
    *v63 = 10;
  }
  sub_1C531D51C((uint64_t)v253);
  v65 = v259;
  v64 = v260;
  v66 = v260 - v259;
  v67 = v257;
  if (v257 != (v260 - v259) >> 3)
  {
    v117 = v257 - (v66 >> 3);
    if (v257 <= (unint64_t)(v66 >> 3))
    {
      if (v257 >= (unint64_t)(v66 >> 3))
      {
LABEL_296:
        v160 = v256 + 16 * v258;
        if (v67)
        {
          if (v258)
          {
            v161 = 16 * v258;
            v162 = v256;
            while ((*(_QWORD *)v162 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v162 += 16;
              v161 -= 16;
              if (!v161)
                goto LABEL_301;
            }
          }
          else
          {
            v162 = v256;
          }
        }
        else
        {
LABEL_301:
          v162 = v256 + 16 * v258;
        }
        v199 = v256 + 16 * v258;
LABEL_391:
        while (v162 != v199)
        {
          *(_QWORD *)&v259[8 * *(unsigned int *)(v162 + 8)] = *(_QWORD *)v162;
          v200 = v162 + 16;
          v162 = v160;
          if (v200 != v160)
          {
            v162 = v200;
            while ((*(_QWORD *)v162 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v162 += 16;
              if (v162 == v160)
              {
                v162 = v160;
                goto LABEL_391;
              }
            }
          }
        }
        goto LABEL_107;
      }
      v149 = &v259[8 * v257];
    }
    else
    {
      if (v117 > (v261 - v260) >> 3)
      {
        v118 = (v261 - v259) >> 2;
        if (v118 <= v257)
          v118 = v257;
        if ((unint64_t)(v261 - v259) >= 0x7FFFFFFFFFFFFFF8)
          v119 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v119 = v118;
        if (v119 >> 61)
          sub_1C4764EE4();
        v120 = (char *)operator new(8 * v119);
        v121 = &v120[8 * (v66 >> 3)];
        v122 = &v120[8 * v119];
        bzero(v121, 8 * v117);
        if (v64 != v65)
        {
          do
          {
            v123 = *((_QWORD *)v64 - 1);
            v64 -= 8;
            *((_QWORD *)v121 - 1) = v123;
            v121 -= 8;
          }
          while (v64 != v65);
          v64 = v259;
        }
        v259 = v121;
        v260 = &v120[8 * v117 + v66];
        v261 = v122;
        if (v64)
        {
          operator delete(v64);
          v67 = v257;
        }
        goto LABEL_296;
      }
      bzero(v260, 8 * v117);
      v149 = &v64[8 * v117];
    }
    v260 = v149;
    goto LABEL_296;
  }
LABEL_107:
  if (((v260 - v259) & 0x7FFFFFFF8) != 0)
  {
    v68 = 0;
    v69 = ((unint64_t)(v260 - v259) >> 3);
    do
    {
      v70 = v251[0];
      v71 = (_BYTE *)*((_QWORD *)v251[0] + 4);
      if ((unint64_t)v71 >= *((_QWORD *)v251[0] + 3))
      {
        llvm::raw_ostream::write(v251[0], 37);
      }
      else
      {
        *((_QWORD *)v251[0] + 4) = v71 + 1;
        *v71 = 37;
      }
      sub_1C5E21910(v70, v68, 0, 0, 0);
      v72 = (_QWORD *)*((_QWORD *)v70 + 4);
      if (*((_QWORD *)v70 + 3) - (_QWORD)v72 > 7uLL)
      {
        *v72 = 0x2065707974203D20;
        *((_QWORD *)v70 + 4) += 8;
      }
      else
      {
        llvm::raw_ostream::write(v70, " = type ", 8uLL);
      }
      sub_1C530E4E8((llvm::raw_ostream *)v253, *(_QWORD *)&v259[8 * v68], v251[0]);
      v73 = (_BYTE *)*((_QWORD *)v251[0] + 4);
      if ((unint64_t)v73 >= *((_QWORD *)v251[0] + 3))
      {
        llvm::raw_ostream::write(v251[0], 10);
      }
      else
      {
        *((_QWORD *)v251[0] + 4) = v73 + 1;
        *v73 = 10;
      }
      ++v68;
    }
    while (v69 != v68);
  }
  sub_1C531D51C((uint64_t)v253);
  v74 = v254;
  for (m = v255; v74 != m; ++v74)
  {
    v76 = *v74;
    v77 = *(llvm::raw_ostream **)(*v74 + 24);
    if (v77)
    {
      v79 = *(_QWORD *)v77;
      v77 = (llvm::raw_ostream *)((char *)v77 + 16);
      v78 = v79;
    }
    else
    {
      v78 = 0;
    }
    v80 = v251[0];
    v81 = (_BYTE *)*((_QWORD *)v251[0] + 4);
    if ((unint64_t)v81 >= *((_QWORD *)v251[0] + 3))
    {
      v80 = llvm::raw_ostream::write(v251[0], 37);
    }
    else
    {
      *((_QWORD *)v251[0] + 4) = v81 + 1;
      *v81 = 37;
    }
    llvm::printLLVMNameWithoutPrefix(v80, v77, v78);
    v82 = v251[0];
    v83 = (_QWORD *)*((_QWORD *)v251[0] + 4);
    if (*((_QWORD *)v251[0] + 3) - (_QWORD)v83 > 7uLL)
    {
      *v83 = 0x2065707974203D20;
      *((_QWORD *)v82 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v251[0], " = type ", 8uLL);
    }
    sub_1C530E4E8((llvm::raw_ostream *)v253, v76, v251[0]);
    v84 = (_BYTE *)*((_QWORD *)v251[0] + 4);
    if ((unint64_t)v84 >= *((_QWORD *)v251[0] + 3))
    {
      llvm::raw_ostream::write(v251[0], 10);
    }
    else
    {
      *((_QWORD *)v251[0] + 4) = v84 + 1;
      *v84 = 10;
    }
  }
LABEL_135:
  if (v262 != v263)
  {
    v85 = (_BYTE *)*((_QWORD *)v251[0] + 4);
    if ((unint64_t)v85 >= *((_QWORD *)v251[0] + 3))
    {
      llvm::raw_ostream::write(v251[0], 10);
    }
    else
    {
      *((_QWORD *)v251[0] + 4) = v85 + 1;
      *v85 = 10;
    }
  }
  v86 = v262;
  for (n = v263; v86 != n; ++v86)
  {
    v88 = *v86;
    llvm::Comdat::print(*v86, v251[0]);
    if (v88 != *(v263 - 1))
    {
      v89 = (_BYTE *)*((_QWORD *)v251[0] + 4);
      if ((unint64_t)v89 >= *((_QWORD *)v251[0] + 3))
      {
        llvm::raw_ostream::write(v251[0], 10);
      }
      else
      {
        *((_QWORD *)v251[0] + 4) = v89 + 1;
        *v89 = 10;
      }
    }
  }
  v90 = &this->__r_.__value_.__s.__data_[8];
  if ((std::string::size_type *)this->__r_.__value_.__l.__size_ != &this->__r_.__value_.__r.__words[1])
  {
    v91 = (_BYTE *)*((_QWORD *)v251[0] + 4);
    if ((unint64_t)v91 >= *((_QWORD *)v251[0] + 3))
    {
      llvm::raw_ostream::write(v251[0], 10);
    }
    else
    {
      *((_QWORD *)v251[0] + 4) = v91 + 1;
      *v91 = 10;
    }
  }
  for (ii = this->__r_.__value_.__r.__words[2]; (char *)ii != v90; ii = *(_QWORD *)(ii + 8))
  {
    if (ii)
      v93 = (uint64_t ***)(ii - 56);
    else
      v93 = 0;
    sub_1C5311B88((char ***)v251, v93);
    v94 = (_BYTE *)*((_QWORD *)v251[0] + 4);
    if ((unint64_t)v94 >= *((_QWORD *)v251[0] + 3))
    {
      llvm::raw_ostream::write(v251[0], 10);
    }
    else
    {
      *((_QWORD *)v251[0] + 4) = v94 + 1;
      *v94 = 10;
    }
  }
  if ((std::string::size_type *)this[1].__r_.__value_.__r.__words[2] != &this[1].__r_.__value_.__r.__words[2])
  {
    v95 = v251[0];
    v96 = (_BYTE *)*((_QWORD *)v251[0] + 4);
    if (*((_BYTE **)v251[0] + 3) == v96)
    {
      llvm::raw_ostream::write(v251[0], "\n", 1uLL);
    }
    else
    {
      *v96 = 10;
      ++*((_QWORD *)v95 + 4);
    }
  }
  for (jj = this[2].__r_.__value_.__l.__data_; jj != &this[1].__r_.__value_.__r.__words[2]; jj = (_QWORD *)jj[1])
  {
    if (jj)
      v98 = (uint64_t)(jj - 6);
    else
      v98 = 0;
    sub_1C53124B8((char ***)v251, v98);
  }
  if ((std::string::size_type *)this[2].__r_.__value_.__l.__size_ != &this[2].__r_.__value_.__r.__words[1])
  {
    v99 = v251[0];
    v100 = (_BYTE *)*((_QWORD *)v251[0] + 4);
    if (*((_BYTE **)v251[0] + 3) == v100)
    {
      llvm::raw_ostream::write(v251[0], "\n", 1uLL);
    }
    else
    {
      *v100 = 10;
      ++*((_QWORD *)v99 + 4);
    }
  }
  for (kk = (std::string::size_type *)this[2].__r_.__value_.__r.__words[2];
        kk != &this[2].__r_.__value_.__r.__words[1];
        kk = (std::string::size_type *)kk[1])
  {
    if (kk)
      v102 = (uint64_t)(kk - 7);
    else
      v102 = 0;
    sub_1C53129D0((char ***)v251, v102);
  }
  for (mm = (const std::string *)this[1].__r_.__value_.__l.__size_;
        mm != &this[1];
        mm = (const std::string *)mm->__r_.__value_.__l.__size_)
  {
    if (mm)
      v104 = (llvm::LLVMContext ***)&mm[-3].__r_.__value_.__r.__words[2];
    else
      v104 = 0;
    v105 = (_BYTE *)*((_QWORD *)v251[0] + 4);
    if ((unint64_t)v105 >= *((_QWORD *)v251[0] + 3))
    {
      llvm::raw_ostream::write(v251[0], 10);
    }
    else
    {
      *((_QWORD *)v251[0] + 4) = v105 + 1;
      *v105 = 10;
    }
    sub_1C530A0C4(v251, v104);
  }
  sub_1C531AB30((uint64_t)v251, 0);
  if (!*((_DWORD *)v252 + 52))
    goto LABEL_244;
  v106 = (_BYTE *)*((_QWORD *)v251[0] + 4);
  if ((unint64_t)v106 >= *((_QWORD *)v251[0] + 3))
  {
    llvm::raw_ostream::write(v251[0], 10);
  }
  else
  {
    *((_QWORD *)v251[0] + 4) = v106 + 1;
    *v106 = 10;
  }
  v107 = v252;
  v108 = *((unsigned int *)v252 + 52);
  if ((_DWORD)v108)
  {
    v109 = (char *)operator new(16 * v108);
    v110 = &v109[16 * v108];
    v111 = v109;
    do
    {
      *(_QWORD *)v111 = 0;
      *((_DWORD *)v111 + 2) = 0;
      v111 += 16;
    }
    while (v111 != v110);
    if (*((_DWORD *)v107 + 52))
    {
      v112 = *((_QWORD *)v107 + 25);
      v113 = *((unsigned int *)v107 + 54);
      v114 = v112 + 16 * v113;
      if ((_DWORD)v113)
      {
        v115 = 0;
        while ((*(_QWORD *)(v112 + v115) | 4) == 0xFFFFFFFFFFFFFFFCLL)
        {
          v115 += 16;
          if (16 * v113 == v115)
          {
            v116 = v112 + 16 * v113;
            goto LABEL_211;
          }
        }
        v116 = v112 + v115;
      }
      else
      {
        v116 = *((_QWORD *)v107 + 25);
      }
      goto LABEL_211;
    }
  }
  else
  {
    v110 = 0;
    v109 = 0;
  }
  v112 = *((_QWORD *)v107 + 25);
  v113 = *((unsigned int *)v107 + 54);
  v116 = v112 + 16 * v113;
  v114 = v116;
LABEL_211:
  v124 = v112 + 16 * v113;
LABEL_212:
  while (v116 != v124)
  {
    v125 = *(unsigned int *)(v116 + 8);
    v126 = &v109[16 * v125];
    *(_QWORD *)v126 = *(_QWORD *)v116;
    *((_DWORD *)v126 + 2) = v125;
    v127 = v116 + 16;
    v116 = v114;
    if (v127 != v114)
    {
      v116 = v127;
      while ((*(_QWORD *)v116 | 4) == 0xFFFFFFFFFFFFFFFCLL)
      {
        v116 += 16;
        if (v116 == v114)
        {
          v116 = v114;
          goto LABEL_212;
        }
      }
    }
  }
  if (v109 != v110)
  {
    v128 = (llvm::AttributeSetNode **)v109;
    do
    {
      v129 = v251[0];
      v130 = *((_QWORD *)v251[0] + 4);
      if ((unint64_t)(*((_QWORD *)v251[0] + 3) - v130) > 0xB)
      {
        *(_DWORD *)(v130 + 8) = 589329253;
        *(_QWORD *)v130 = *(_QWORD *)"attributes #";
        *((_QWORD *)v129 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v251[0], "attributes #", 0xCuLL);
      }
      sub_1C5E21910(v129, *((unsigned int *)v128 + 2), 0, 0, 0);
      v131 = *((_QWORD *)v129 + 4);
      if ((unint64_t)(*((_QWORD *)v129 + 3) - v131) > 4)
      {
        *(_BYTE *)(v131 + 4) = 32;
        *(_DWORD *)v131 = 2065710368;
        *((_QWORD *)v129 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v129, " = { ", 5uLL);
      }
      if (*v128)
      {
        llvm::AttributeSetNode::getAsString(*v128, 1, __p);
        v132 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      }
      else
      {
        v132 = 0;
        *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
        __p[0].__r_.__value_.__s.__data_[0] = 0;
      }
      v133 = v132 < 0;
      if (v132 >= 0)
        v134 = __p;
      else
        v134 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
      v135 = v132 & 0x7F;
      if (v133)
        v136 = __p[0].__r_.__value_.__l.__size_;
      else
        v136 = v135;
      llvm::raw_ostream::write(v129, (const char *)v134, v136);
      v137 = *((_QWORD *)v129 + 4);
      if ((unint64_t)(*((_QWORD *)v129 + 3) - v137) > 2)
      {
        *(_BYTE *)(v137 + 2) = 10;
        *(_WORD *)v137 = 32032;
        *((_QWORD *)v129 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v129, " }\n", 3uLL);
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
      v128 += 2;
    }
    while (v128 != (llvm::AttributeSetNode **)v110);
  }
  if (v109)
    operator delete(v109);
LABEL_244:
  v138 = this + 3;
  if ((const std::string *)this[3].__r_.__value_.__l.__data_ != &this[3])
  {
    v139 = (_BYTE *)*((_QWORD *)v251[0] + 4);
    if ((unint64_t)v139 >= *((_QWORD *)v251[0] + 3))
    {
      llvm::raw_ostream::write(v251[0], 10);
    }
    else
    {
      *((_QWORD *)v251[0] + 4) = v139 + 1;
      *v139 = 10;
    }
  }
  for (nn = this[3].__r_.__value_.__l.__size_; (const std::string *)nn != v138; nn = *(_QWORD *)(nn + 8))
    sub_1C530D320((uint64_t)v251, nn);
  if (!*((_DWORD *)v252 + 44))
    goto LABEL_293;
  v141 = (_BYTE *)*((_QWORD *)v251[0] + 4);
  if ((unint64_t)v141 >= *((_QWORD *)v251[0] + 3))
  {
    llvm::raw_ostream::write(v251[0], 10);
  }
  else
  {
    *((_QWORD *)v251[0] + 4) = v141 + 1;
    *v141 = 10;
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
  __p[0].__r_.__value_.__l.__size_ = 0x1000000000;
  v142 = *((unsigned int *)v252 + 44);
  if ((_DWORD)v142)
  {
    if (v142 < 0x11)
    {
      v143 = 0;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__p, (uint64_t)&__p[0].__r_.__value_.__r.__words[2], *((unsigned int *)v252 + 44), 8);
      v143 = LODWORD(__p[0].__r_.__value_.__r.__words[1]);
    }
    if (v142 != v143)
      bzero((void *)(__p[0].__r_.__value_.__r.__words[0] + 8 * v143), 8 * (v142 - v143));
    LODWORD(__p[0].__r_.__value_.__r.__words[1]) = v142;
    v144 = *((_QWORD *)v252 + 21);
    v145 = *((unsigned int *)v252 + 46);
    v146 = v144 + 16 * v145;
    if (*((_DWORD *)v252 + 44))
    {
      if ((_DWORD)v145)
      {
        v147 = 0;
        while ((*(_QWORD *)(v144 + v147) | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v147 += 16;
          if (16 * v145 == v147)
            goto LABEL_265;
        }
        v148 = v144 + v147;
      }
      else
      {
        v148 = *((_QWORD *)v252 + 21);
      }
      goto LABEL_271;
    }
  }
  else
  {
    v144 = *((_QWORD *)v252 + 21);
    v145 = *((unsigned int *)v252 + 46);
    v146 = v144 + 16 * v145;
  }
LABEL_265:
  v148 = v146;
LABEL_271:
  v150 = v144 + 16 * v145;
LABEL_272:
  while (v148 != v150)
  {
    *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + 8 * *(unsigned int *)(v148 + 8)) = *(_QWORD *)v148;
    v151 = v148 + 16;
    v148 = v146;
    if (v151 != v146)
    {
      v148 = v151;
      while ((*(_QWORD *)v148 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v148 += 16;
        if (v148 == v146)
        {
          v148 = v146;
          goto LABEL_272;
        }
      }
    }
  }
  if ((_DWORD)v142)
  {
    for (i1 = 0; i1 != v142; ++i1)
    {
      v153 = *(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + 8 * i1);
      v154 = v251[0];
      v155 = (_BYTE *)*((_QWORD *)v251[0] + 4);
      if ((unint64_t)v155 >= *((_QWORD *)v251[0] + 3))
      {
        llvm::raw_ostream::write(v251[0], 33);
      }
      else
      {
        *((_QWORD *)v251[0] + 4) = v155 + 1;
        *v155 = 33;
      }
      sub_1C5E21910(v154, i1, 0, 0, 0);
      v156 = *((_QWORD *)v154 + 4);
      if ((unint64_t)(*((_QWORD *)v154 + 3) - v156) > 2)
      {
        *(_BYTE *)(v156 + 2) = 32;
        *(_WORD *)v156 = 15648;
        *((_QWORD *)v154 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v154, " = ", 3uLL);
      }
      v242 = (uint64_t)off_1E814DD30;
      v243 = v253;
      v244 = (uint64_t)v252;
      v245 = v251[1];
      sub_1C531D608(v251[0], v153);
      v157 = v251[0];
      v158 = (_BYTE *)*((_QWORD *)v251[0] + 4);
      if (*((_BYTE **)v251[0] + 3) == v158)
      {
        llvm::raw_ostream::write(v251[0], "\n", 1uLL);
      }
      else
      {
        *v158 = 10;
        ++*((_QWORD *)v157 + 4);
      }
    }
  }
  if ((std::string::size_type *)__p[0].__r_.__value_.__l.__data_ != &__p[0].__r_.__value_.__r.__words[2])
    free(__p[0].__r_.__value_.__l.__data_);
LABEL_293:
  sub_1C530B4B8(v251);
  sub_1C4D687F0((llvm::raw_ostream *)&v226);
  return sub_1C531C430(v266);
}

llvm::raw_ostream *sub_1C530D320(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  _BYTE *v5;
  char v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::raw_ostream *v14;
  _WORD *v15;
  llvm::DIExpression *v16;
  llvm::raw_ostream *v17;
  int v18;
  llvm::raw_ostream *v19;
  _BYTE *v20;
  _QWORD *v21;
  unint64_t v22;
  int v23;
  llvm::raw_ostream *result;
  _WORD *v25;

  v4 = *(llvm::raw_ostream **)a1;
  v5 = (_BYTE *)*((_QWORD *)v4 + 4);
  if ((unint64_t)v5 >= *((_QWORD *)v4 + 3))
  {
    llvm::raw_ostream::write(v4, 33);
  }
  else
  {
    *((_QWORD *)v4 + 4) = v5 + 1;
    *v5 = 33;
  }
  v6 = *(_BYTE *)(a2 + 39);
  if (v6 >= 0)
    v7 = (llvm::raw_ostream *)(a2 + 16);
  else
    v7 = *(llvm::raw_ostream **)(a2 + 16);
  if (v6 >= 0)
    v8 = v6 & 0x7F;
  else
    v8 = *(_QWORD *)(a2 + 24);
  sub_1C531AF20(v7, v8, *(llvm::raw_ostream **)a1);
  v9 = *(llvm::raw_ostream **)a1;
  v10 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)a1 + 24) - v10) > 4)
  {
    *(_BYTE *)(v10 + 4) = 123;
    *(_DWORD *)v10 = 555760928;
    *((_QWORD *)v9 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v9, " = !{", 5uLL);
  }
  v11 = *(unsigned int *)(*(_QWORD *)(a2 + 48) + 8);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 8 * v11;
    do
    {
      if (v12)
      {
        v14 = *(llvm::raw_ostream **)a1;
        v15 = *(_WORD **)(*(_QWORD *)a1 + 32);
        if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v15 > 1uLL)
        {
          *v15 = 8236;
          *((_QWORD *)v14 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v14, ", ", 2uLL);
        }
      }
      v16 = *(llvm::DIExpression **)(**(_QWORD **)(a2 + 48) + v12);
      if (*(_BYTE *)v16 == 6)
      {
        v17 = *(llvm::raw_ostream **)a1;
        sub_1C5321838();
        sub_1C531B514(v17, v16);
      }
      else
      {
        v18 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), *(_QWORD *)(**(_QWORD **)(a2 + 48) + v12));
        v19 = *(llvm::raw_ostream **)a1;
        if (v18 == -1)
        {
          v21 = (_QWORD *)*((_QWORD *)v19 + 4);
          if (*((_QWORD *)v19 + 3) - (_QWORD)v21 > 7uLL)
          {
            *v21 = 0x3E6665726461623CLL;
            *((_QWORD *)v19 + 4) += 8;
          }
          else
          {
            llvm::raw_ostream::write(v19, "<badref>", 8uLL);
          }
        }
        else
        {
          v20 = (_BYTE *)*((_QWORD *)v19 + 4);
          if ((unint64_t)v20 >= *((_QWORD *)v19 + 3))
          {
            v19 = llvm::raw_ostream::write(v19, 33);
          }
          else
          {
            *((_QWORD *)v19 + 4) = v20 + 1;
            *v20 = 33;
          }
          v22 = v18;
          if (v18 < 0)
          {
            v22 = -(uint64_t)v18;
            v23 = 1;
          }
          else
          {
            v23 = 0;
          }
          sub_1C5E21910(v19, v22, 0, 0, v23);
        }
      }
      v12 += 8;
    }
    while (v13 != v12);
  }
  result = *(llvm::raw_ostream **)a1;
  v25 = *(_WORD **)(*(_QWORD *)a1 + 32);
  if (*(_QWORD *)(*(_QWORD *)a1 + 24) - (_QWORD)v25 <= 1uLL)
    return llvm::raw_ostream::write(result, "}\n", 2uLL);
  *v25 = 2685;
  *((_QWORD *)result + 4) += 2;
  return result;
}

llvm::raw_ostream *sub_1C530D5AC(llvm::raw_ostream *a1, llvm::raw_ostream *a2, size_t a3, int a4)
{
  char *v6;
  char v7;
  char v8;

  switch(a4)
  {
    case 3:
      v6 = (char *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v6 < *((_QWORD *)a1 + 3))
      {
        *((_QWORD *)a1 + 4) = v6 + 1;
        v7 = 37;
        goto LABEL_10;
      }
      v8 = 37;
LABEL_14:
      a1 = llvm::raw_ostream::write(a1, v8);
      return llvm::printLLVMNameWithoutPrefix(a1, a2, a3);
    case 1:
      v6 = (char *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v6 < *((_QWORD *)a1 + 3))
      {
        *((_QWORD *)a1 + 4) = v6 + 1;
        v7 = 36;
        goto LABEL_10;
      }
      v8 = 36;
      goto LABEL_14;
    case 0:
      v6 = (char *)*((_QWORD *)a1 + 4);
      if ((unint64_t)v6 < *((_QWORD *)a1 + 3))
      {
        *((_QWORD *)a1 + 4) = v6 + 1;
        v7 = 64;
LABEL_10:
        *v6 = v7;
        return llvm::printLLVMNameWithoutPrefix(a1, a2, a3);
      }
      v8 = 64;
      goto LABEL_14;
  }
  return llvm::printLLVMNameWithoutPrefix(a1, a2, a3);
}

uint64_t llvm::Type::print(llvm::Type *this, llvm::raw_ostream *a2, BOOL a3, char a4)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  void *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  void *__p;
  void *v30;
  uint64_t v31;

  v9 = 0;
  v10 = 0;
  v12 = 0;
  v11 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v23 = 0;
  v24 = 0;
  v22 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  __p = 0;
  sub_1C530D7AC(&v9, this, a2);
  if ((a4 & 1) == 0 && this && (*((_DWORD *)this + 2) & 0x4FF) == 0x10)
  {
    v7 = (_QWORD *)*((_QWORD *)a2 + 4);
    if (*((_QWORD *)a2 + 3) - (_QWORD)v7 > 7uLL)
    {
      *v7 = 0x2065707974203D20;
      *((_QWORD *)a2 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(a2, " = type ", 8uLL);
    }
    sub_1C530E4E8((llvm::raw_ostream *)&v9, (uint64_t)this, a2);
  }
  if (__p)
  {
    v30 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v26, 8);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  MEMORY[0x1CAA32FB4](v19, 8);
  MEMORY[0x1CAA32FB4](v16, 8);
  MEMORY[0x1CAA32FB4](v13, 8);
  return MEMORY[0x1CAA32FB4](v10, 8);
}

void sub_1C530D7AC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

llvm::raw_ostream *sub_1C530D7F8@<X0>(unsigned __int8 a1@<W8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  llvm::raw_ostream *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  llvm::raw_ostream *result;
  _BYTE *v38;

  v32 = *(unsigned int *)(v30 + 32);
  v33 = a1;
  v34 = (_BYTE *)*((_QWORD *)v29 + 4);
  if (*((_BYTE **)v29 + 3) == v34)
  {
    llvm::raw_ostream::write(v29, "<", 1uLL);
  }
  else
  {
    *v34 = 60;
    ++*((_QWORD *)v29 + 4);
  }
  if (v33 == 19)
  {
    v35 = *((_QWORD *)v29 + 4);
    if ((unint64_t)(*((_QWORD *)v29 + 3) - v35) > 8)
    {
      *(_BYTE *)(v35 + 8) = 32;
      *(_QWORD *)v35 = *(_QWORD *)"vscale x ";
      *((_QWORD *)v29 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v29, "vscale x ", 9uLL);
    }
  }
  sub_1C5E21910(v29, v32, 0, 0, 0);
  v36 = *((_QWORD *)v29 + 4);
  if ((unint64_t)(*((_QWORD *)v29 + 3) - v36) > 2)
  {
    *(_BYTE *)(v36 + 2) = 32;
    *(_WORD *)v36 = 30752;
    *((_QWORD *)v29 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(v29, " x ", 3uLL);
  }
  result = (llvm::raw_ostream *)sub_1C530D7AC(v31, *(_QWORD *)(v30 + 24), v29);
  v38 = (_BYTE *)*((_QWORD *)v29 + 4);
  if ((unint64_t)v38 >= *((_QWORD *)v29 + 3))
    return llvm::raw_ostream::write(v29, 62);
  *((_QWORD *)v29 + 4) = v38 + 1;
  *v38 = 62;
  return result;
}

llvm::raw_ostream *sub_1C530E4E8(llvm::raw_ostream *result, uint64_t a2, llvm::raw_ostream *this)
{
  int v4;
  uint64_t v5;
  llvm::raw_ostream *v7;
  _BYTE *v8;
  __int16 *v9;
  uint64_t v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  _WORD *v16;
  const char *v17;
  const char *v18;
  _BYTE *v19;
  __int16 v20;

  v4 = *(_DWORD *)(a2 + 8);
  if ((v4 & 0x100) == 0)
  {
    v5 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v5) <= 5)
      return llvm::raw_ostream::write(this, "opaque", 6uLL);
    *(_WORD *)(v5 + 4) = 25973;
    *(_DWORD *)v5 = 1902211183;
    *((_QWORD *)this + 4) += 6;
    return result;
  }
  v7 = result;
  if ((v4 & 0x200) != 0)
  {
    v8 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v8 >= *((_QWORD *)this + 3))
    {
      result = llvm::raw_ostream::write(this, 60);
    }
    else
    {
      *((_QWORD *)this + 4) = v8 + 1;
      *v8 = 60;
    }
  }
  v9 = (__int16 *)*((_QWORD *)this + 4);
  if (*(_DWORD *)(a2 + 12))
  {
    if (*((_QWORD *)this + 3) - (_QWORD)v9 > 1uLL)
    {
      *v9 = 8315;
      *((_QWORD *)this + 4) += 2;
    }
    else
    {
      result = llvm::raw_ostream::write(this, "{ ", 2uLL);
    }
    v10 = *(unsigned int *)(a2 + 12);
    if ((_DWORD)v10)
    {
      v11 = 0;
      v12 = *(uint64_t **)(a2 + 16);
      v13 = 8 * v10;
      do
      {
        v14 = *v12;
        if ((v11 & 1) != 0)
          v15 = 2;
        else
          v15 = 0;
        v16 = (_WORD *)*((_QWORD *)this + 4);
        if (v15 <= *((_QWORD *)this + 3) - (_QWORD)v16)
        {
          if ((v11 & 1) != 0)
          {
            *v16 = 8236;
            *((_QWORD *)this + 4) += 2;
          }
        }
        else
        {
          if ((v11 & 1) != 0)
            v17 = ", ";
          else
            v17 = 0;
          llvm::raw_ostream::write(this, v17, v15);
        }
        result = (llvm::raw_ostream *)sub_1C530D7AC(v7, v14, this);
        ++v12;
        v11 = 1;
        v13 -= 8;
      }
      while (v13);
    }
    v9 = (__int16 *)*((_QWORD *)this + 4);
    if (*((_QWORD *)this + 3) - (_QWORD)v9 <= 1uLL)
    {
      v18 = " }";
LABEL_28:
      result = llvm::raw_ostream::write(this, v18, 2uLL);
      goto LABEL_29;
    }
    v20 = 32032;
  }
  else
  {
    if (*((_QWORD *)this + 3) - (_QWORD)v9 <= 1uLL)
    {
      v18 = "{}";
      goto LABEL_28;
    }
    v20 = 32123;
  }
  *v9 = v20;
  *((_QWORD *)this + 4) += 2;
LABEL_29:
  if ((*(_BYTE *)(a2 + 9) & 2) != 0)
  {
    v19 = (_BYTE *)*((_QWORD *)this + 4);
    if ((unint64_t)v19 >= *((_QWORD *)this + 3))
    {
      return llvm::raw_ostream::write(this, 62);
    }
    else
    {
      *((_QWORD *)this + 4) = v19 + 1;
      *v19 = 62;
    }
  }
  return result;
}

void llvm::Value::print(llvm::Value *this, llvm::raw_ostream *a2, char a3)
{
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  BOOL v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v6 = *((unsigned __int8 *)this + 16);
  if (this && v6 >= 0x1C)
  {
    if (v6 == 84
      && (v7 = *((_QWORD *)this - 4)) != 0
      && !*(_BYTE *)(v7 + 16)
      && *(_QWORD *)(v7 + 24) == *((_QWORD *)this + 9)
      && (*(_BYTE *)(v7 + 33) & 0x20) != 0
      && ((v8 = *((_DWORD *)this + 5), (v8 & 0x40000000) != 0)
        ? (uint64_t *)(v10 = (uint64_t *)*((_QWORD *)this - 1), v9 = v8 & 0x7FFFFFF)
        : (v9 = v8 & 0x7FFFFFF, v10 = (uint64_t *)((char *)this - 32 * v9)),
          v9))
    {
      v13 = 32 * v9;
      while (1)
      {
        v14 = *v10;
        if (*v10)
        {
          if (*(_BYTE *)(v14 + 16) == 23 && **(unsigned __int8 **)(v14 + 24) - 4 < 0x1F)
            break;
        }
        v12 = 0;
        v10 += 4;
        v13 -= 32;
        if (!v13)
          goto LABEL_25;
      }
      v12 = 1;
    }
    else
    {
      v12 = 0;
    }
  }
  else
  {
    if (*((_BYTE *)this + 16))
      v11 = v6 == 23;
    else
      v11 = 1;
    v12 = v11;
  }
LABEL_25:
  v15 = sub_1C530E898((uint64_t)this);
  v16[0] = &off_1E814DC18;
  v16[1] = 0;
  v17 = v15 != 0;
  v18 = v12;
  v23 = 0;
  v22 = 0;
  v20 = 0;
  v21 = 0;
  v19 = v15;
  llvm::Value::print(this, a2, (llvm::ModuleSlotTracker *)v16, a3);
  llvm::ModuleSlotTracker::~ModuleSlotTracker((llvm::ModuleSlotTracker *)v16);
}

uint64_t sub_1C530E898(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 21)
  {
    a1 = *(_QWORD *)(a1 + 24);
    if (!a1)
      return 0;
    return *(_QWORD *)(a1 + 40);
  }
  if (a1 && v1 == 22)
  {
    a1 = *(_QWORD *)(a1 + 56);
    if (!a1)
      return 0;
    return *(_QWORD *)(a1 + 40);
  }
  if (a1 && v1 >= 0x1C)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (v2)
    {
      a1 = *(_QWORD *)(v2 + 56);
      if (!a1)
        return 0;
      return *(_QWORD *)(a1 + 40);
    }
  }
  else
  {
    if (a1 && v1 < 4)
      return *(_QWORD *)(a1 + 40);
    v2 = 0;
    if (a1 && v1 == 23)
    {
      v3 = *(_QWORD *)(a1 + 8);
      if (!v3)
        return 0;
      while (1)
      {
        if (*(unsigned __int8 *)(*(_QWORD *)(v3 + 24) + 16) >= 0x1Cu)
        {
          v4 = sub_1C530E898();
          if (v4)
            break;
        }
        v2 = 0;
        v3 = *(_QWORD *)(v3 + 8);
        if (!v3)
          return v2;
      }
      return v4;
    }
  }
  return v2;
}

llvm::raw_ostream *llvm::Value::print(llvm::Value *this, llvm::raw_ostream *a2, llvm::ModuleSlotTracker *a3, char a4)
{
  _QWORD *Machine;
  unsigned int v9;
  uint64_t v10;
  const llvm::Function *v11;
  uint64_t v12;
  const llvm::Function *v13;
  uint64_t v14;
  int v16;
  uint64_t **v17;
  uint64_t v18;
  _BYTE *v19;
  _QWORD v20[4];
  uint64_t (**v21)(llvm::raw_ostream *);
  int v22;
  uint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;
  uint64_t v33;
  char **v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  void *v47;
  void *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  void *__p;
  void *v55;
  uint64_t v56;
  _QWORD v57[3];
  __int16 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  int v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 1;
  v24 = 0;
  v25 = 0;
  v23 = 0;
  v21 = &off_1E81A1100;
  v29 = 0;
  v30 = 0;
  v31 = &v33;
  v32 = xmmword_1C6612EF0;
  sub_1C4D685DC((uint64_t)&v21, (uint64_t)a2);
  v59 = 0;
  v57[2] = 0;
  v57[0] = &off_1E814DC38;
  v57[1] = 0;
  v58 = 0;
  v60 = 0u;
  v61 = 0u;
  v63 = 0;
  v62 = 0;
  v65 = 0;
  v64 = 0;
  v67 = 0;
  v66 = 0;
  v69 = 0;
  v68 = 0;
  v71 = 0;
  v70 = 0;
  v75 = 0;
  v74 = 0;
  v72 = 0;
  v73 = 0;
  v77 = 0;
  v76 = 0;
  v78 = 0x1000000000;
  v79 = 0;
  v83 = 0;
  v82 = 0;
  v80 = 0;
  v81 = 0;
  v84 = 0;
  v85 = 0;
  v86 = 0x1000000000;
  v87 = 0;
  if (llvm::ModuleSlotTracker::getMachine(a3))
    Machine = (_QWORD *)llvm::ModuleSlotTracker::getMachine(a3);
  else
    Machine = v57;
  v9 = *((unsigned __int8 *)this + 16);
  if (this && v9 >= 0x1C)
  {
    v10 = *((_QWORD *)this + 5);
    if (v10)
    {
      v11 = *(const llvm::Function **)(v10 + 56);
      if (v11)
        llvm::ModuleSlotTracker::incorporateFunction((const llvm::Function **)a3, v11);
    }
    v12 = sub_1C530E898((uint64_t)this);
    sub_1C5309E54((uint64_t)&v34, (uint64_t)&v21, (uint64_t)Machine, v12, 0, a4, 0);
    sub_1C530ED84((llvm::raw_ostream **)&v34, (uint64_t)this);
    goto LABEL_14;
  }
  if (this && v9 == 22)
  {
    v13 = (const llvm::Function *)*((_QWORD *)this + 7);
    if (v13)
      llvm::ModuleSlotTracker::incorporateFunction((const llvm::Function **)a3, v13);
    v14 = sub_1C530E898((uint64_t)this);
    sub_1C5309E54((uint64_t)&v34, (uint64_t)&v21, (uint64_t)Machine, v14, 0, a4, 0);
    sub_1C530B5A8((llvm::raw_ostream **)&v34, (uint64_t ***)this);
    goto LABEL_14;
  }
  if (this && v9 <= 3)
  {
    sub_1C5309E54((uint64_t)&v34, (uint64_t)&v21, (uint64_t)Machine, *((_QWORD *)this + 5), 0, a4, 0);
    v16 = *((unsigned __int8 *)this + 16);
    if (*((_BYTE *)this + 16))
    {
      if (v16 == 1)
      {
        sub_1C53124B8(&v34, (uint64_t)this);
      }
      else if (v16 == 3)
      {
        sub_1C5311B88(&v34, (uint64_t ***)this);
      }
      else
      {
        sub_1C53129D0(&v34, (uint64_t)this);
      }
    }
    else
    {
      sub_1C530A0C4((llvm::raw_ostream **)&v34, (llvm::LLVMContext ***)this);
    }
LABEL_14:
    sub_1C530B4B8(&v34);
    goto LABEL_15;
  }
  if (this && v9 == 23)
  {
    v17 = (uint64_t **)*((_QWORD *)this + 3);
    v18 = sub_1C530E898((uint64_t)this);
    sub_1C5314B04((uint64_t)a2, v17, a3, v18, 0, 0);
  }
  else if (this && v9 <= 0x14)
  {
    v34 = 0;
    v35 = 0;
    v37 = 0;
    v36 = 0;
    v38 = 0;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v48 = 0;
    v49 = 0;
    v47 = 0;
    v50 = 0;
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v55 = 0;
    v56 = 0;
    __p = 0;
    sub_1C530D7AC((uint64_t)&v34, *(_QWORD *)this);
    v19 = v25;
    if ((unint64_t)v25 >= v24)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v21, 32);
    }
    else
    {
      ++v25;
      *v19 = 32;
    }
    v20[0] = off_1E814DD30;
    v20[1] = &v34;
    v20[2] = llvm::ModuleSlotTracker::getMachine(a3);
    v20[3] = 0;
    sub_1C5312DB0((int **)&v21, this, (uint64_t)v20);
    if (__p)
    {
      v55 = __p;
      operator delete(__p);
    }
    MEMORY[0x1CAA32FB4](v51, 8);
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    MEMORY[0x1CAA32FB4](v44, 8);
    MEMORY[0x1CAA32FB4](v41, 8);
    MEMORY[0x1CAA32FB4](v38, 8);
    MEMORY[0x1CAA32FB4](v35, 8);
  }
  else
  {
    sub_1C5314910((uint64_t *)this, (llvm::raw_ostream *)&v21, 1, a3);
  }
LABEL_15:
  sub_1C531C430(v57);
  return sub_1C4D687F0((llvm::raw_ostream *)&v21);
}

void sub_1C530ED84(llvm::raw_ostream **a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  _WORD *v6;
  llvm::raw_ostream *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  llvm::raw_ostream *v24;
  _BYTE *v25;
  size_t *v26;
  llvm::raw_ostream *v27;
  size_t v28;
  size_t v29;
  int v30;
  llvm::raw_ostream *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  size_t v35;
  llvm::raw_ostream *v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  llvm::raw_ostream *v41;
  uint64_t v42;
  const char *v43;
  size_t v44;
  uint64_t v45;
  _DWORD *v46;
  llvm::raw_ostream *v47;
  const char *OpcodeName;
  size_t v49;
  void *v50;
  int v51;
  llvm::raw_ostream *v52;
  _DWORD *v53;
  llvm::raw_ostream *v54;
  uint64_t v55;
  llvm::raw_ostream *v56;
  uint64_t v57;
  int v58;
  llvm::raw_ostream *v59;
  _BYTE *v60;
  size_t v61;
  const char *PredicateName;
  size_t v63;
  void *v64;
  llvm::raw_ostream *v65;
  _BYTE *v66;
  size_t v67;
  char *OperationName;
  size_t v69;
  void *v70;
  int v71;
  uint64_t v72;
  llvm::detail::DoubleAPFloat **v73;
  int v74;
  llvm::detail::DoubleAPFloat *v75;
  llvm::raw_ostream *v76;
  _BYTE *v77;
  llvm::raw_ostream *v78;
  _BYTE *v79;
  llvm::raw_ostream *v80;
  _BYTE *v81;
  uint64_t v82;
  llvm::raw_ostream *v83;
  _BYTE *v84;
  uint64_t v85;
  unsigned int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  llvm::raw_ostream *v92;
  _BYTE *v93;
  int v94;
  llvm::detail::DoubleAPFloat **v95;
  llvm::raw_ostream *v96;
  _WORD *v97;
  int v98;
  uint64_t v99;
  llvm::raw_ostream *v100;
  _WORD *v101;
  uint64_t v102;
  uint64_t v103;
  llvm::raw_ostream *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  llvm::raw_ostream *v108;
  _WORD *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  llvm::raw_ostream *v113;
  _DWORD *v114;
  const char *v115;
  size_t v116;
  llvm::raw_ostream *v117;
  uint64_t v118;
  int v119;
  int v120;
  llvm::raw_ostream *v121;
  char *v122;
  char v123;
  char v124;
  uint64_t v125;
  llvm::raw_ostream *v126;
  _WORD *v127;
  int v128;
  uint64_t v129;
  llvm::raw_ostream *v130;
  _BYTE *v131;
  llvm::raw_ostream *v132;
  _WORD *v133;
  llvm::raw_ostream *v134;
  _WORD *v135;
  llvm::detail::DoubleAPFloat *v136;
  unsigned int v137;
  int v138;
  llvm::raw_ostream *v139;
  _QWORD *v140;
  unint64_t v141;
  unsigned int v142;
  llvm::raw_ostream *v143;
  _BYTE *v144;
  const char *v145;
  size_t v146;
  void *v147;
  llvm::raw_ostream *v148;
  _BYTE *v149;
  const char *v150;
  size_t v151;
  void *v152;
  _QWORD *v153;
  llvm::raw_ostream *v154;
  _BYTE *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  llvm::raw_ostream *v160;
  _WORD *v161;
  llvm::raw_ostream *v162;
  _WORD *v163;
  int v164;
  uint64_t v165;
  llvm::raw_ostream *v166;
  _WORD *v167;
  int v168;
  uint64_t v169;
  llvm::raw_ostream *v170;
  _WORD *v171;
  int v172;
  llvm::raw_ostream *v173;
  _BYTE *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  llvm::raw_ostream *v178;
  _WORD *v179;
  int v180;
  uint64_t v181;
  llvm::raw_ostream *v182;
  _BYTE *v183;
  uint64_t v184;
  llvm::raw_ostream *v185;
  _BYTE *v186;
  int v187;
  llvm::detail::DoubleAPFloat **v188;
  uint64_t v189;
  unsigned int *v190;
  uint64_t v191;
  unint64_t v192;
  llvm::raw_ostream *v193;
  _WORD *v194;
  int v195;
  llvm::detail::DoubleAPFloat **v196;
  llvm::raw_ostream *v197;
  _WORD *v198;
  int v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int *v202;
  uint64_t v203;
  unint64_t v204;
  llvm::raw_ostream *v205;
  _WORD *v206;
  uint64_t v207;
  llvm::raw_ostream *v208;
  _QWORD *v209;
  int v210;
  llvm::detail::DoubleAPFloat **v211;
  uint64_t v212;
  llvm::raw_ostream *v213;
  _BYTE *v214;
  uint64_t v215;
  uint64_t v216;
  llvm::raw_ostream *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  llvm::raw_ostream *v222;
  _BYTE *v223;
  int v224;
  uint64_t v225;
  int v226;
  llvm::raw_ostream *v227;
  uint64_t v228;
  unint64_t v229;
  const char *v230;
  size_t v231;
  int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  llvm::raw_ostream *v236;
  _WORD *v237;
  int v238;
  uint64_t v239;
  uint64_t v240;
  llvm::raw_ostream *v241;
  _QWORD *v242;
  llvm::raw_ostream *v243;
  _WORD *v244;
  uint64_t v245;
  uint64_t v246;
  llvm::raw_ostream *v247;
  _WORD *v248;
  uint64_t v249;
  llvm::raw_ostream *v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  int v254;
  llvm::detail::DoubleAPFloat **v255;
  uint64_t v256;
  llvm::detail::DoubleAPFloat *v257;
  llvm::raw_ostream *v258;
  _WORD *v259;
  uint64_t v260;
  llvm::raw_ostream *v261;
  uint64_t v262;
  llvm::raw_ostream *v263;
  _DWORD *v264;
  uint64_t v265;
  llvm::raw_ostream *v266;
  uint64_t v267;
  llvm::raw_ostream *v268;
  _QWORD *v269;
  uint64_t v270;
  llvm::raw_ostream *v271;
  _BYTE *v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  llvm::raw_ostream *v277;
  _BYTE *v278;
  uint64_t v279;
  uint64_t *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  llvm::raw_ostream *v284;
  _BYTE *v285;
  llvm::raw_ostream *v286;
  _BYTE *v287;
  uint64_t v288;
  llvm::raw_ostream *v289;
  _BYTE *v290;
  uint64_t v291;
  llvm::detail::DoubleAPFloat *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  llvm::raw_ostream *v296;
  _BYTE *v297;
  llvm::raw_ostream *v298;
  _BYTE *v299;
  llvm::raw_ostream *v300;
  _BYTE *v301;
  int v302;
  uint64_t v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  llvm::raw_ostream *v311;
  _WORD *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  llvm::raw_ostream *v316;
  uint64_t v317;
  llvm::raw_ostream *v318;
  _BYTE *v319;
  llvm::raw_ostream *v320;
  _BYTE *v321;
  llvm::raw_ostream *v322;
  _WORD *v323;
  uint64_t v324;
  int AttributeGroupSlot;
  unint64_t v326;
  llvm::raw_ostream *v327;
  int v328;
  uint64_t v329;
  llvm::raw_ostream *v330;
  _BYTE *v331;
  llvm::raw_ostream *v332;
  _BYTE *v333;
  llvm::raw_ostream *v334;
  _BYTE *v335;
  int v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  llvm::raw_ostream *v345;
  _WORD *v346;
  uint64_t v347;
  llvm::raw_ostream *v348;
  _BYTE *v349;
  llvm::raw_ostream *v350;
  void *v351;
  llvm::raw_ostream *v352;
  _QWORD *v353;
  llvm::raw_ostream *v354;
  _BYTE *v355;
  llvm::raw_ostream *v356;
  _WORD *v357;
  uint64_t v358;
  int v359;
  unint64_t v360;
  llvm::raw_ostream *v361;
  int v362;
  uint64_t v363;
  llvm::raw_ostream *v364;
  _BYTE *v365;
  llvm::raw_ostream *v366;
  _BYTE *v367;
  llvm::raw_ostream *v368;
  _BYTE *v369;
  int v370;
  uint64_t v371;
  int v372;
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  llvm::raw_ostream *v379;
  _WORD *v380;
  uint64_t v381;
  llvm::raw_ostream *v382;
  _BYTE *v383;
  llvm::raw_ostream *v384;
  void *v385;
  llvm::raw_ostream *v386;
  _WORD *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  llvm::raw_ostream *v391;
  _WORD *v392;
  llvm::raw_ostream *v393;
  _BYTE *v394;
  llvm::raw_ostream *v395;
  _WORD *v396;
  uint64_t v397;
  int v398;
  unint64_t v399;
  llvm::raw_ostream *v400;
  int v401;
  llvm::AttributeSetNode *v402;
  char v403;
  BOOL v404;
  std::string *v405;
  std::string::size_type v406;
  size_t v407;
  llvm::raw_ostream *v408;
  uint64_t v409;
  llvm::raw_ostream *v410;
  uint64_t v411;
  uint64_t v412;
  llvm::raw_ostream *v413;
  _WORD *v414;
  char v415;
  llvm::raw_ostream *v416;
  _QWORD *v417;
  unint64_t v418;
  unint64_t v419;
  llvm::raw_ostream *v420;
  uint64_t v421;
  llvm::raw_ostream *v422;
  _BYTE *v423;
  llvm::AttributeSetNode *v424;
  char v425;
  BOOL v426;
  std::string *v427;
  std::string::size_type v428;
  size_t v429;
  llvm::raw_ostream *v430;
  _BYTE *v431;
  llvm::AttributeSetNode *v432;
  char v433;
  BOOL v434;
  std::string *v435;
  std::string::size_type v436;
  size_t v437;
  llvm::raw_ostream *v438;
  _DWORD *v439;
  const char *v440;
  size_t v441;
  _WORD *v442;
  llvm::raw_ostream *v443;
  _BYTE *v444;
  uint64_t v445;
  uint64_t v446;
  llvm::raw_ostream *v447;
  _BYTE *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  std::string __p[3];
  uint64_t v458;

  v458 = *MEMORY[0x1E0C80C00];
  v4 = a1[28];
  if (v4)
    (*(void (**)(llvm::raw_ostream *, uint64_t, llvm::raw_ostream *))(*(_QWORD *)v4 + 40))(v4, a2, *a1);
  v5 = *a1;
  v6 = (_WORD *)*((_QWORD *)*a1 + 4);
  if (*((_QWORD *)*a1 + 3) - (_QWORD)v6 > 1uLL)
  {
    *v6 = 8224;
    *((_QWORD *)v5 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v5, "  ", 2uLL);
  }
  if ((*(_BYTE *)(a2 + 23) & 0x10) != 0)
  {
    v15 = ***(_QWORD ***)a2;
    v16 = *(_QWORD *)(v15 + 152);
    v17 = *(unsigned int *)(v15 + 168);
    if ((_DWORD)v17)
    {
      LODWORD(v18) = (v17 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v19 = (uint64_t *)(v16 + 16 * v18);
      v20 = *v19;
      if (*v19 == a2)
      {
LABEL_30:
        v26 = (size_t *)v19[1];
        v29 = *v26;
        v27 = (llvm::raw_ostream *)(v26 + 2);
        v28 = v29;
        if (*(unsigned __int8 *)(a2 + 16) >= 4u)
          v30 = 3;
        else
          v30 = 0;
        sub_1C530D5AC(*a1, v27, v28, v30);
        v31 = *a1;
        v32 = *((_QWORD *)*a1 + 4);
        if ((unint64_t)(*((_QWORD *)*a1 + 3) - v32) <= 2)
        {
          v33 = " = ";
LABEL_42:
          v35 = 3;
          goto LABEL_43;
        }
        *(_BYTE *)(v32 + 2) = 32;
        *(_WORD *)v32 = 15648;
        v212 = *((_QWORD *)v31 + 4) + 3;
        goto LABEL_306;
      }
      v21 = 1;
      while (v20 != -4096)
      {
        v22 = v18 + v21++;
        v18 = v22 & (v17 - 1);
        v20 = *(_QWORD *)(v16 + 16 * v18);
        if (v20 == a2)
        {
          v19 = (uint64_t *)(v16 + 16 * v18);
          goto LABEL_30;
        }
      }
    }
    v19 = (uint64_t *)(v16 + 16 * v17);
    goto LABEL_30;
  }
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 7)
    goto LABEL_44;
  v7 = a1[4];
  if (*((_QWORD *)v7 + 1))
  {
    llvm::SlotTracker::processModule(a1[4]);
    *((_QWORD *)v7 + 1) = 0;
  }
  if (*((_QWORD *)v7 + 2) && !*((_BYTE *)v7 + 24))
    llvm::SlotTracker::processFunction(v7);
  v8 = *((_QWORD *)v7 + 17);
  v9 = *((unsigned int *)v7 + 38);
  if (!(_DWORD)v9)
    goto LABEL_24;
  LODWORD(v10) = (v9 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v11 = (uint64_t *)(v8 + 16 * v10);
  v12 = *v11;
  if (*v11 != a2)
  {
    v13 = 1;
    while (v12 != -4096)
    {
      v14 = v10 + v13++;
      v10 = v14 & (v9 - 1);
      v12 = *(_QWORD *)(v8 + 16 * v10);
      if (v12 == a2)
      {
        v11 = (uint64_t *)(v8 + 16 * v10);
        goto LABEL_25;
      }
    }
LABEL_24:
    v11 = (uint64_t *)(v8 + 16 * v9);
  }
LABEL_25:
  if (v11 == (uint64_t *)(v8 + 16 * v9) || (v23 = *((int *)v11 + 2), (_DWORD)v23 == -1))
  {
    v31 = *a1;
    v34 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v34) <= 0xA)
    {
      v33 = "<badref> = ";
      v35 = 11;
LABEL_43:
      llvm::raw_ostream::write(v31, v33, v35);
      goto LABEL_44;
    }
    *(_DWORD *)(v34 + 7) = 540876862;
    *(_QWORD *)v34 = *(_QWORD *)"<badref> = ";
    v212 = *((_QWORD *)v31 + 4) + 11;
LABEL_306:
    *((_QWORD *)v31 + 4) = v212;
    goto LABEL_44;
  }
  v24 = *a1;
  v25 = (_BYTE *)*((_QWORD *)*a1 + 4);
  if ((unint64_t)v25 >= *((_QWORD *)*a1 + 3))
  {
    llvm::raw_ostream::write(*a1, 37);
  }
  else
  {
    *((_QWORD *)v24 + 4) = v25 + 1;
    *v25 = 37;
  }
  if ((v23 & 0x80000000) != 0)
  {
    v37 = -(uint64_t)v23;
    v36 = v24;
    v38 = 1;
  }
  else
  {
    v36 = v24;
    v37 = v23;
    v38 = 0;
  }
  sub_1C5E21910(v36, v37, 0, 0, v38);
  v39 = *((_QWORD *)v24 + 4);
  if ((unint64_t)(*((_QWORD *)v24 + 3) - v39) <= 2)
  {
    v33 = " = ";
    v31 = v24;
    goto LABEL_42;
  }
  *(_BYTE *)(v39 + 2) = 32;
  *(_WORD *)v39 = 15648;
  *((_QWORD *)v24 + 4) += 3;
LABEL_44:
  if (*(_BYTE *)(a2 + 16) != 84)
    goto LABEL_55;
  v40 = *(_WORD *)(a2 + 18) & 3;
  if (v40 == 2)
  {
    v41 = *a1;
    v42 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v42) <= 8)
    {
      v43 = "musttail ";
      v44 = 9;
LABEL_54:
      llvm::raw_ostream::write(v41, v43, v44);
      goto LABEL_55;
    }
    *(_BYTE *)(v42 + 8) = 32;
    *(_QWORD *)v42 = *(_QWORD *)"musttail ";
    v235 = *((_QWORD *)v41 + 4) + 9;
  }
  else if ((v40 - 1) > 1)
  {
    if (v40 != 3)
      goto LABEL_55;
    v41 = *a1;
    v46 = (_DWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v46 <= 6uLL)
    {
      v43 = "notail ";
      v44 = 7;
      goto LABEL_54;
    }
    *(_DWORD *)((char *)v46 + 3) = 543975777;
    *v46 = 1635020654;
    v235 = *((_QWORD *)v41 + 4) + 7;
  }
  else
  {
    v41 = *a1;
    v45 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v45) <= 4)
    {
      v43 = "tail ";
      v44 = 5;
      goto LABEL_54;
    }
    *(_BYTE *)(v45 + 4) = 32;
    *(_DWORD *)v45 = 1818845556;
    v235 = *((_QWORD *)v41 + 4) + 5;
  }
  *((_QWORD *)v41 + 4) = v235;
LABEL_55:
  v47 = *a1;
  OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(*(unsigned __int8 *)(a2 + 16) - 28));
  v49 = strlen(OpcodeName);
  v50 = (void *)*((_QWORD *)v47 + 4);
  if (v49 <= *((_QWORD *)v47 + 3) - (_QWORD)v50)
  {
    if (v49)
    {
      memcpy(v50, OpcodeName, v49);
      *((_QWORD *)v47 + 4) += v49;
    }
  }
  else
  {
    llvm::raw_ostream::write(v47, OpcodeName, v49);
  }
  v51 = *(unsigned __int8 *)(a2 + 16);
  if (v51 == 61 || v51 == 60)
  {
    if ((*(_WORD *)(a2 + 18) & 0x380) != 0)
    {
      v52 = *a1;
      v53 = (_DWORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v53 > 6uLL)
      {
        *(_DWORD *)((char *)v53 + 3) = 1667853679;
        *v53 = 1869898016;
        *((_QWORD *)v52 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v52, " atomic", 7uLL);
      }
    }
    v51 = *(unsigned __int8 *)(a2 + 16);
  }
  if (v51 == 64)
  {
    if ((*(_WORD *)(a2 + 18) & 2) != 0)
    {
      v54 = *a1;
      v55 = *((_QWORD *)*a1 + 4);
      if ((unint64_t)(*((_QWORD *)*a1 + 3) - v55) > 4)
      {
        *(_BYTE *)(v55 + 4) = 107;
        *(_DWORD *)v55 = 1634039584;
        *((_QWORD *)v54 + 4) += 5;
      }
      else
      {
        llvm::raw_ostream::write(v54, " weak", 5uLL);
      }
    }
    v51 = *(unsigned __int8 *)(a2 + 16);
  }
  switch(v51)
  {
    case '<':
    case '=':
    case '@':
    case 'A':
      if ((*(_WORD *)(a2 + 18) & 1) != 0)
      {
        v56 = *a1;
        v57 = *((_QWORD *)*a1 + 4);
        if ((unint64_t)(*((_QWORD *)*a1 + 3) - v57) > 8)
        {
          *(_BYTE *)(v57 + 8) = 101;
          *(_QWORD *)v57 = *(_QWORD *)" volatile";
          *((_QWORD *)v56 + 4) += 9;
        }
        else
        {
          llvm::raw_ostream::write(v56, " volatile", 9uLL);
        }
      }
      break;
    default:
      break;
  }
  sub_1C5321CBC(*a1, a2);
  v58 = *(unsigned __int8 *)(a2 + 16);
  if ((v58 - 83) >= 0xFFFFFFFE)
  {
    v59 = *a1;
    v60 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v60 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(*a1, 32);
    }
    else
    {
      *((_QWORD *)v59 + 4) = v60 + 1;
      *v60 = 32;
    }
    PredicateName = llvm::CmpInst::getPredicateName(*(_WORD *)(a2 + 18) & 0x3F);
    v63 = v61;
    v64 = (void *)*((_QWORD *)v59 + 4);
    if (v61 <= *((_QWORD *)v59 + 3) - (_QWORD)v64)
    {
      if (v61)
      {
        memcpy(v64, PredicateName, v61);
        *((_QWORD *)v59 + 4) += v63;
      }
    }
    else
    {
      llvm::raw_ostream::write(v59, PredicateName, v61);
    }
    v58 = *(unsigned __int8 *)(a2 + 16);
  }
  if (v58 == 65)
  {
    v65 = *a1;
    v66 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v66 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(*a1, 32);
    }
    else
    {
      *((_QWORD *)v65 + 4) = v66 + 1;
      *v66 = 32;
    }
    OperationName = llvm::AtomicRMWInst::getOperationName(*(_WORD *)(a2 + 18) >> 4);
    v69 = v67;
    v70 = (void *)*((_QWORD *)v65 + 4);
    if (v67 <= *((_QWORD *)v65 + 3) - (_QWORD)v70)
    {
      if (v67)
      {
        memcpy(v70, OperationName, v67);
        *((_QWORD *)v65 + 4) += v69;
      }
    }
    else
    {
      llvm::raw_ostream::write(v65, OperationName, v67);
    }
  }
  v71 = *(_DWORD *)(a2 + 20);
  v72 = v71 & 0x7FFFFFF;
  if ((v71 & 0x7FFFFFF) != 0)
  {
    if ((v71 & 0x40000000) != 0)
      v73 = *(llvm::detail::DoubleAPFloat ***)(a2 - 8);
    else
      v73 = (llvm::detail::DoubleAPFloat **)(a2 - 32 * v72);
    v75 = *v73;
    v74 = *(unsigned __int8 *)(a2 + 16);
    if (v74 == 30)
    {
      if ((_DWORD)v72 == 3)
      {
        v76 = *a1;
        v77 = (_BYTE *)*((_QWORD *)*a1 + 4);
        if ((unint64_t)v77 >= *((_QWORD *)*a1 + 3))
        {
          llvm::raw_ostream::write(v76, 32);
        }
        else
        {
          *((_QWORD *)v76 + 4) = v77 + 1;
          *v77 = 32;
        }
        sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(a2 - 96), 1);
        v132 = *a1;
        v133 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v133 > 1uLL)
        {
          *v133 = 8236;
          *((_QWORD *)v132 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v132, ", ", 2uLL);
        }
        sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(a2 - 32), 1);
        v134 = *a1;
        v135 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v135 > 1uLL)
        {
          *v135 = 8236;
          *((_QWORD *)v134 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v134, ", ", 2uLL);
        }
        v136 = *(llvm::detail::DoubleAPFloat **)(a2 - 64);
        goto LABEL_184;
      }
      if (!v75)
        goto LABEL_185;
      goto LABEL_112;
    }
  }
  else
  {
    v74 = *(unsigned __int8 *)(a2 + 16);
    if (v74 == 30)
      goto LABEL_209;
    v75 = 0;
  }
  if (v74 == 32)
  {
    v80 = *a1;
    v81 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v81 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v80, 32);
    }
    else
    {
      *((_QWORD *)v80 + 4) = v81 + 1;
      *v81 = 32;
    }
    sub_1C531AA44((char ***)a1, v75, 1);
    v117 = *a1;
    v118 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v118) > 2)
    {
      *(_BYTE *)(v118 + 2) = 91;
      *(_WORD *)v118 = 8236;
      *((_QWORD *)v117 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v117, ", [", 3uLL);
    }
    v119 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    v120 = v119 - 1;
    if (v119 != 1)
    {
      v125 = 32;
      do
      {
        if (v125 != 32)
        {
          v126 = *a1;
          v127 = (_WORD *)*((_QWORD *)*a1 + 4);
          if (*((_QWORD *)*a1 + 3) - (_QWORD)v127 > 1uLL)
          {
            *v127 = 8236;
            *((_QWORD *)v126 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v126, ", ", 2uLL);
          }
        }
        v128 = *(_DWORD *)(a2 + 20);
        if ((v128 & 0x40000000) != 0)
          v129 = *(_QWORD *)(a2 - 8);
        else
          v129 = a2 - 32 * (v128 & 0x7FFFFFF);
        sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(v129 + v125), 1);
        v125 += 32;
        --v120;
      }
      while (v120);
    }
    goto LABEL_159;
  }
  if (v74 == 31)
  {
    v78 = *a1;
    v79 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v79 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v78, 32);
    }
    else
    {
      *((_QWORD *)v78 + 4) = v79 + 1;
      *v79 = 32;
    }
    v94 = *(_DWORD *)(a2 + 20);
    if ((v94 & 0x40000000) != 0)
      v95 = *(llvm::detail::DoubleAPFloat ***)(a2 - 8);
    else
      v95 = (llvm::detail::DoubleAPFloat **)(a2 - 32 * (v94 & 0x7FFFFFF));
    sub_1C531AA44((char ***)a1, *v95, 1);
    v96 = *a1;
    v97 = (_WORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v97 > 1uLL)
    {
      *v97 = 8236;
      *((_QWORD *)v96 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v96, ", ", 2uLL);
    }
    v98 = *(_DWORD *)(a2 + 20);
    if ((v98 & 0x40000000) != 0)
      v99 = *(_QWORD *)(a2 - 8);
    else
      v99 = a2 - 32 * (v98 & 0x7FFFFFF);
    sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(v99 + 32), 1);
    v100 = *a1;
    v101 = (_WORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v101 > 1uLL)
    {
      *v101 = 23328;
      *((_QWORD *)v100 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v100, " [", 2uLL);
    }
    if (((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFF) != 1)
    {
      v102 = 0;
      v103 = 2 * (((*(_DWORD *)(a2 + 20) >> 1) & 0x3FFFFFFu) - 1);
      do
      {
        v104 = *a1;
        v105 = *((_QWORD *)*a1 + 4);
        if ((unint64_t)(*((_QWORD *)*a1 + 3) - v105) > 4)
        {
          *(_BYTE *)(v105 + 4) = 32;
          *(_DWORD *)v105 = 538976266;
          *((_QWORD *)v104 + 4) += 5;
        }
        else
        {
          llvm::raw_ostream::write(v104, "\n    ", 5uLL);
        }
        v106 = *(_DWORD *)(a2 + 20);
        if ((v106 & 0x40000000) != 0)
          v107 = *(_QWORD *)(a2 - 8);
        else
          v107 = a2 - 32 * (v106 & 0x7FFFFFF);
        sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(v107 + 32 * (((_DWORD)v102 + 2) & 0xFFFFFFFE)), 1);
        v108 = *a1;
        v109 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v109 > 1uLL)
        {
          *v109 = 8236;
          *((_QWORD *)v108 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v108, ", ", 2uLL);
        }
        v110 = *(_DWORD *)(a2 + 20);
        if ((v110 & 0x40000000) != 0)
          v111 = *(_QWORD *)(a2 - 8);
        else
          v111 = a2 - 32 * (v110 & 0x7FFFFFF);
        v112 = (v102 + 3);
        if (v102 == 0x1FFFFFFFCLL)
          v112 = 1;
        sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(v111 + 32 * v112), 1);
        v102 += 2;
      }
      while (v103 != v102);
    }
    v113 = *a1;
    v114 = (_DWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v114 <= 3uLL)
    {
      v115 = "\n  ]";
      v116 = 4;
LABEL_154:
      llvm::raw_ostream::write(v113, v115, v116);
      goto LABEL_185;
    }
    *v114 = 1562386442;
    v260 = *((_QWORD *)v113 + 4) + 4;
    goto LABEL_390;
  }
  if (v74 == 83)
    v82 = a2;
  else
    v82 = 0;
  if (v74 == 83)
  {
    v83 = *a1;
    v84 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v84 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v83, 32);
    }
    else
    {
      *((_QWORD *)v83 + 4) = v84 + 1;
      *v84 = 32;
    }
    sub_1C530D7AC((uint64_t)(a1 + 5), *(_QWORD *)a2);
    v154 = *a1;
    v155 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v155 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v154, 32);
    }
    else
    {
      *((_QWORD *)v154 + 4) = v155 + 1;
      *v155 = 32;
    }
    v156 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    if ((_DWORD)v156)
    {
      v157 = 0;
      v158 = 0;
      v159 = 32 * v156;
      do
      {
        if (v157)
        {
          v160 = *a1;
          v161 = (_WORD *)*((_QWORD *)*a1 + 4);
          if (*((_QWORD *)*a1 + 3) - (_QWORD)v161 > 1uLL)
          {
            *v161 = 8236;
            *((_QWORD *)v160 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v160, ", ", 2uLL);
          }
        }
        v162 = *a1;
        v163 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v163 > 1uLL)
        {
          *v163 = 8283;
          *((_QWORD *)v162 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v162, "[ ", 2uLL);
        }
        v164 = *(_DWORD *)(a2 + 20);
        if ((v164 & 0x40000000) != 0)
          v165 = *(_QWORD *)(a2 - 8);
        else
          v165 = v82 - 32 * (v164 & 0x7FFFFFF);
        sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(v165 + v158), 0);
        v166 = *a1;
        v167 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v167 > 1uLL)
        {
          *v167 = 8236;
          *((_QWORD *)v166 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v166, ", ", 2uLL);
        }
        v168 = *(_DWORD *)(a2 + 20);
        if ((v168 & 0x40000000) != 0)
          v169 = *(_QWORD *)(a2 - 8);
        else
          v169 = v82 - 32 * (v168 & 0x7FFFFFF);
        sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(v169 + 32 * *(unsigned int *)(a2 + 60) + v157), 0);
        v170 = *a1;
        v171 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v171 > 1uLL)
        {
          *v171 = 23840;
          *((_QWORD *)v170 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(v170, " ]", 2uLL);
        }
        v158 += 32;
        v157 += 8;
      }
      while (v159 != v158);
    }
    goto LABEL_185;
  }
  if (v74 == 93)
  {
    v182 = *a1;
    v183 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v183 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v182, 32);
    }
    else
    {
      *((_QWORD *)v182 + 4) = v183 + 1;
      *v183 = 32;
    }
    v195 = *(_DWORD *)(a2 + 20);
    if ((v195 & 0x40000000) != 0)
      v196 = *(llvm::detail::DoubleAPFloat ***)(a2 - 8);
    else
      v196 = (llvm::detail::DoubleAPFloat **)(a2 - 32 * (v195 & 0x7FFFFFF));
    sub_1C531AA44((char ***)a1, *v196, 1);
    v197 = *a1;
    v198 = (_WORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v198 > 1uLL)
    {
      *v198 = 8236;
      *((_QWORD *)v197 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v197, ", ", 2uLL);
    }
    v199 = *(_DWORD *)(a2 + 20);
    if ((v199 & 0x40000000) != 0)
      v200 = *(_QWORD *)(a2 - 8);
    else
      v200 = a2 - 32 * (v199 & 0x7FFFFFF);
    sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(v200 + 32), 1);
    v201 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v201)
    {
      v202 = *(unsigned int **)(a2 + 64);
      v203 = 4 * v201;
      do
      {
        v204 = *v202;
        v205 = *a1;
        v206 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v206 > 1uLL)
        {
          *v206 = 8236;
          *((_QWORD *)v205 + 4) += 2;
        }
        else
        {
          v205 = llvm::raw_ostream::write(v205, ", ", 2uLL);
        }
        sub_1C5E21910(v205, v204, 0, 0, 0);
        ++v202;
        v203 -= 4;
      }
      while (v203);
    }
    goto LABEL_185;
  }
  if (v74 == 92)
  {
    v130 = *a1;
    v131 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v131 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v130, 32);
    }
    else
    {
      *((_QWORD *)v130 + 4) = v131 + 1;
      *v131 = 32;
    }
    v187 = *(_DWORD *)(a2 + 20);
    if ((v187 & 0x40000000) != 0)
      v188 = *(llvm::detail::DoubleAPFloat ***)(a2 - 8);
    else
      v188 = (llvm::detail::DoubleAPFloat **)(a2 - 32 * (v187 & 0x7FFFFFF));
    sub_1C531AA44((char ***)a1, *v188, 1);
    v189 = *(unsigned int *)(a2 + 72);
    if ((_DWORD)v189)
    {
      v190 = *(unsigned int **)(a2 + 64);
      v191 = 4 * v189;
      do
      {
        v192 = *v190;
        v193 = *a1;
        v194 = (_WORD *)*((_QWORD *)*a1 + 4);
        if (*((_QWORD *)*a1 + 3) - (_QWORD)v194 > 1uLL)
        {
          *v194 = 8236;
          *((_QWORD *)v193 + 4) += 2;
        }
        else
        {
          v193 = llvm::raw_ostream::write(v193, ", ", 2uLL);
        }
        sub_1C5E21910(v193, v192, 0, 0, 0);
        ++v190;
        v191 -= 4;
      }
      while (v191);
    }
    goto LABEL_185;
  }
  if (v74 == 94)
    v184 = a2;
  else
    v184 = 0;
  if (v74 == 94)
  {
    v185 = *a1;
    v186 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v186 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v185, 32);
    }
    else
    {
      *((_QWORD *)v185 + 4) = v186 + 1;
      *v186 = 32;
    }
    sub_1C530D7AC((uint64_t)(a1 + 5), *(_QWORD *)a2);
    if ((*(_WORD *)(a2 + 18) & 1) != 0 || (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 0)
    {
      v213 = *a1;
      v214 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v214 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(v213, 10);
      }
      else
      {
        *((_QWORD *)v213 + 4) = v214 + 1;
        *v214 = 10;
      }
    }
    if ((*(_WORD *)(a2 + 18) & 1) != 0)
    {
      v217 = *a1;
      v218 = *((_QWORD *)*a1 + 4);
      if ((unint64_t)(*((_QWORD *)*a1 + 3) - v218) > 0x10)
      {
        *(_BYTE *)(v218 + 16) = 112;
        *(_OWORD *)v218 = *(_OWORD *)"          cleanup";
        *((_QWORD *)v217 + 4) += 17;
      }
      else
      {
        llvm::raw_ostream::write(v217, "          cleanup", 0x11uLL);
      }
    }
    v219 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
    if (!(_DWORD)v219)
      goto LABEL_185;
    v220 = 0;
    v221 = 32 * v219;
    while (1)
    {
      if (v220 || (*(_WORD *)(a2 + 18) & 1) != 0)
      {
        v222 = *a1;
        v223 = (_BYTE *)*((_QWORD *)*a1 + 4);
        if (*((_BYTE **)*a1 + 3) == v223)
        {
          llvm::raw_ostream::write(v222, "\n", 1uLL);
        }
        else
        {
          *v223 = 10;
          ++*((_QWORD *)v222 + 4);
        }
      }
      v224 = *(_DWORD *)(a2 + 20);
      if ((v224 & 0x40000000) != 0)
        v225 = *(_QWORD *)(a2 - 8);
      else
        v225 = v184 - 32 * (v224 & 0x7FFFFFF);
      v226 = *(unsigned __int8 *)(**(_QWORD **)(v225 + v220) + 8);
      v227 = *a1;
      v228 = *((_QWORD *)*a1 + 4);
      v229 = *((_QWORD *)*a1 + 3) - v228;
      if (v226 == 17)
      {
        if (v229 > 0x10)
        {
          *(_BYTE *)(v228 + 16) = 32;
          *(_OWORD *)v228 = *(_OWORD *)"          filter ";
          v234 = *((_QWORD *)v227 + 4) + 17;
LABEL_349:
          *((_QWORD *)v227 + 4) = v234;
          goto LABEL_341;
        }
        v230 = "          filter ";
        v231 = 17;
      }
      else
      {
        if (v229 > 0xF)
        {
          *(_OWORD *)v228 = *(_OWORD *)"          catch ";
          v234 = *((_QWORD *)v227 + 4) + 16;
          goto LABEL_349;
        }
        v230 = "          catch ";
        v231 = 16;
      }
      llvm::raw_ostream::write(v227, v230, v231);
LABEL_341:
      v232 = *(_DWORD *)(a2 + 20);
      if ((v232 & 0x40000000) != 0)
        v233 = *(_QWORD *)(a2 - 8);
      else
        v233 = v184 - 32 * (v232 & 0x7FFFFFF);
      sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(v233 + v220), 1);
      v220 += 32;
      if (v221 == v220)
        goto LABEL_185;
    }
  }
  if (v74 == 38)
    v207 = a2;
  else
    v207 = 0;
  if (v74 == 38)
  {
    v208 = *a1;
    v209 = (_QWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v209 > 7uLL)
    {
      *v209 = 0x206E696874697720;
      *((_QWORD *)v208 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v208, " within ", 8uLL);
    }
    v210 = *(_DWORD *)(a2 + 20);
    if ((v210 & 0x40000000) != 0)
      v211 = *(llvm::detail::DoubleAPFloat ***)(a2 - 8);
    else
      v211 = (llvm::detail::DoubleAPFloat **)(a2 - 32 * (v210 & 0x7FFFFFF));
    sub_1C531AA44((char ***)a1, *v211, 0);
    v236 = *a1;
    v237 = (_WORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v237 > 1uLL)
    {
      *v237 = 23328;
      *((_QWORD *)v236 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v236, " [", 2uLL);
    }
    v238 = *(_DWORD *)(a2 + 20);
    if ((v238 & 0x40000000) != 0)
    {
      v240 = *(_QWORD *)(a2 - 8);
      v239 = v238 & 0x7FFFFFF;
    }
    else
    {
      v239 = v238 & 0x7FFFFFF;
      v240 = a2 - 32 * v239;
    }
    v249 = 1;
    if ((*(_WORD *)(a2 + 18) & 1) != 0)
      v249 = 2;
    if (v249 != v239)
    {
      v254 = 0;
      v255 = (llvm::detail::DoubleAPFloat **)(v240 + 32 * v249);
      v256 = 32 * v239 - 32 * v249;
      do
      {
        v257 = *v255;
        if (v254)
        {
          v258 = *a1;
          v259 = (_WORD *)*((_QWORD *)*a1 + 4);
          if (*((_QWORD *)*a1 + 3) - (_QWORD)v259 > 1uLL)
          {
            *v259 = 8236;
            *((_QWORD *)v258 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v258, ", ", 2uLL);
          }
        }
        sub_1C531AA44((char ***)a1, v257, 1);
        v255 += 4;
        --v254;
        v256 -= 32;
      }
      while (v256);
    }
    v250 = *a1;
    v251 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v251) > 8)
    {
      *(_BYTE *)(v251 + 8) = 32;
      *(_QWORD *)v251 = *(_QWORD *)"] unwind ";
      *((_QWORD *)v250 + 4) += 9;
    }
    else
    {
      llvm::raw_ostream::write(v250, "] unwind ", 9uLL);
    }
    if ((*(_WORD *)(a2 + 18) & 1) != 0)
    {
      v252 = *(_DWORD *)(a2 + 20);
      v253 = (v252 & 0x40000000) != 0 ? *(_QWORD *)(v207 - 8) : v207 - 32 * (v252 & 0x7FFFFFF);
      v136 = *(llvm::detail::DoubleAPFloat **)(v253 + 32);
      if (v136)
        goto LABEL_184;
    }
LABEL_412:
    v113 = *a1;
    v265 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v265) <= 8)
    {
      v115 = "to caller";
      v116 = 9;
      goto LABEL_154;
    }
    *(_BYTE *)(v265 + 8) = 114;
    *(_QWORD *)v265 = *(_QWORD *)"to caller";
    v260 = *((_QWORD *)v113 + 4) + 9;
LABEL_390:
    *((_QWORD *)v113 + 4) = v260;
    goto LABEL_185;
  }
  if ((v74 - 81) >= 0xFFFFFFFE)
    v215 = a2;
  else
    v215 = 0;
  if ((v74 - 81) >= 0xFFFFFFFE)
  {
    v241 = *a1;
    v242 = (_QWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v242 > 7uLL)
    {
      *v242 = 0x206E696874697720;
      *((_QWORD *)v241 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v241, " within ", 8uLL);
    }
    sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(a2 - 32), 0);
    v243 = *a1;
    v244 = (_WORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v244 > 1uLL)
    {
      *v244 = 23328;
      *((_QWORD *)v243 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v243, " [", 2uLL);
    }
    if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 1)
    {
      v245 = 0;
      v246 = 32 * ((*(_DWORD *)(a2 + 20) & 0x7FFFFFFu) - 1);
      do
      {
        if (v245)
        {
          v247 = *a1;
          v248 = (_WORD *)*((_QWORD *)*a1 + 4);
          if (*((_QWORD *)*a1 + 3) - (_QWORD)v248 > 1uLL)
          {
            *v248 = 8236;
            *((_QWORD *)v247 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v247, ", ", 2uLL);
          }
        }
        sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(v215 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + v245), 1);
        v245 += 32;
      }
      while (v246 != v245);
    }
    goto LABEL_159;
  }
  if (v74 == 29 && !v75)
  {
    v113 = *a1;
    v216 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v216) <= 4)
    {
      v115 = " void";
      v116 = 5;
      goto LABEL_154;
    }
    *(_BYTE *)(v216 + 4) = 100;
    *(_DWORD *)v216 = 1768912416;
    v260 = *((_QWORD *)v113 + 4) + 5;
    goto LABEL_390;
  }
  if (v74 == 36)
  {
    v266 = *a1;
    v267 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v267) > 5)
    {
      *(_WORD *)(v267 + 4) = 8301;
      *(_DWORD *)v267 = 1869768224;
      *((_QWORD *)v266 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v266, " from ", 6uLL);
    }
    sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), 0);
    v268 = *a1;
    v269 = (_QWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v269 > 7uLL)
    {
      *v269 = 0x20646E69776E7520;
      *((_QWORD *)v268 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v268, " unwind ", 8uLL);
    }
    if ((*(_WORD *)(a2 + 18) & 1) != 0)
    {
      v136 = *(llvm::detail::DoubleAPFloat **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF) + 32);
LABEL_184:
      sub_1C531AA44((char ***)a1, v136, 1);
      goto LABEL_185;
    }
    goto LABEL_412;
  }
  if (v74 == 37)
  {
    v261 = *a1;
    v262 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v262) > 5)
    {
      *(_WORD *)(v262 + 4) = 8301;
      *(_DWORD *)v262 = 1869768224;
      *((_QWORD *)v261 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v261, " from ", 6uLL);
    }
    sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(a2 - 64), 0);
    v263 = *a1;
    v264 = (_DWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v264 > 3uLL)
    {
      *v264 = 544175136;
      *((_QWORD *)v263 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v263, " to ", 4uLL);
    }
    v136 = *(llvm::detail::DoubleAPFloat **)(a2 - 32);
    goto LABEL_184;
  }
  if (v74 == 84)
    v270 = a2;
  else
    v270 = 0;
  if (v74 == 84)
  {
    if ((*(_WORD *)(a2 + 18) & 0xFFC) != 0)
    {
      v271 = *a1;
      v272 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if (*((_BYTE **)*a1 + 3) == v272)
      {
        llvm::raw_ostream::write(v271, " ", 1uLL);
      }
      else
      {
        *v272 = 32;
        ++*((_QWORD *)v271 + 4);
      }
      sub_1C53193F0((llvm::raw_ostream *)((*(unsigned __int16 *)(a2 + 18) >> 2) & 0x3FF), *a1);
    }
    v273 = *(uint64_t **)(a2 - 32);
    v274 = *(_QWORD *)(a2 + 64);
    v275 = *(_QWORD *)(a2 + 72);
    v276 = **(_QWORD **)(v275 + 16);
    if (v274 && *(_DWORD *)(v274 + 8) >= 2u && *(_QWORD *)(v274 + 48))
    {
      v320 = *a1;
      v321 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v321 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(*a1, 32);
      }
      else
      {
        *((_QWORD *)v320 + 4) = v321 + 1;
        *v321 = 32;
      }
      if (*(_DWORD *)(v274 + 8) >= 2u && (v402 = *(llvm::AttributeSetNode **)(v274 + 48)) != 0)
      {
        llvm::AttributeSetNode::getAsString(v402, 0, __p);
        v403 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      }
      else
      {
        v403 = 0;
        *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
        __p[0].__r_.__value_.__s.__data_[0] = 0;
      }
      v404 = v403 < 0;
      v405 = v403 >= 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      v406 = v403 & 0x7F;
      v407 = v404 ? __p[0].__r_.__value_.__l.__size_ : v406;
      llvm::raw_ostream::write(v320, (const char *)v405, v407);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    sub_1C5321EF4(*v273, a2, *a1);
    v277 = *a1;
    v278 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v278 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v277, 32);
    }
    else
    {
      *((_QWORD *)v277 + 4) = v278 + 1;
      *v278 = 32;
    }
    if (*(_DWORD *)(v275 + 8) <= 0xFFu)
      v288 = v276;
    else
      v288 = v275;
    sub_1C530D7AC((uint64_t)(a1 + 5), v288);
    v289 = *a1;
    v290 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v290 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v289, 32);
    }
    else
    {
      *((_QWORD *)v289 + 4) = v290 + 1;
      *v290 = 32;
    }
    sub_1C531AA44((char ***)a1, (llvm::detail::DoubleAPFloat *)v273, 0);
    v300 = *a1;
    v301 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v301 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v300, 40);
    }
    else
    {
      *((_QWORD *)v300 + 4) = v301 + 1;
      *v301 = 40;
    }
    v302 = *(unsigned __int8 *)(a2 + 16);
    if (v302 == 84)
    {
      v303 = 0;
    }
    else if (v302 == 39)
    {
      v303 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      v303 = 2;
    }
    v304 = *(_DWORD *)(a2 + 20);
    if (v304 < 0 && (v450 = a2 - 32 * (v304 & 0x7FFFFFF), v451 = *(_QWORD *)(v450 - 8), (v451 & 0xFFFFFFFF0) != 0))
    {
      v306 = -(uint64_t)(v304 & 0x7FFFFFF);
      v305 = (*(_DWORD *)(v450 - 12) - *(_DWORD *)(v450 - v451));
    }
    else
    {
      v305 = 0;
      v306 = -(uint64_t)(v304 & 0x7FFFFFF);
    }
    v307 = -32 * v303 - 32 * v305 - 32 * v306 - 32;
    if ((v307 & 0x1FFFFFFFE0) != 0)
    {
      v308 = 0;
      v309 = (v307 >> 5);
      v310 = v270;
      do
      {
        if (v308)
        {
          v311 = *a1;
          v312 = (_WORD *)*((_QWORD *)*a1 + 4);
          if (*((_QWORD *)*a1 + 3) - (_QWORD)v312 > 1uLL)
          {
            *v312 = 8236;
            *((_QWORD *)v311 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v311, ", ", 2uLL);
          }
        }
        if (v274 && (v308 + 2) < *(_DWORD *)(v274 + 8))
          v313 = *(_QWORD *)(v274 + 40 + 8 * (v308 + 2));
        else
          v313 = 0;
        sub_1C5321FF0((uint64_t)a1, *(uint64_t **)(v310 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), v313);
        ++v308;
        v310 += 32;
      }
      while (v309 != v308);
    }
    if ((*(_WORD *)(a2 + 18) & 3) == 2)
    {
      v314 = *(_QWORD *)(v270 + 40);
      if (v314)
      {
        v315 = *(_QWORD *)(v314 + 56);
        if (v315)
        {
          if (*(_DWORD *)(*(_QWORD *)(v315 + 24) + 8) >= 0x100u)
          {
            v316 = *a1;
            v317 = *((_QWORD *)*a1 + 4);
            if ((unint64_t)(*((_QWORD *)*a1 + 3) - v317) > 4)
            {
              *(_BYTE *)(v317 + 4) = 46;
              *(_DWORD *)v317 = 774774828;
              *((_QWORD *)v316 + 4) += 5;
            }
            else
            {
              llvm::raw_ostream::write(v316, ", ...", 5uLL);
            }
          }
        }
      }
    }
    v318 = *a1;
    v319 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v319 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v318, 41);
    }
    else
    {
      *((_QWORD *)v318 + 4) = v319 + 1;
      *v319 = 41;
    }
    if (v274 && *(_DWORD *)(v274 + 8) && *(_QWORD *)(v274 + 40))
    {
      v322 = *a1;
      v323 = (_WORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v323 > 1uLL)
      {
        *v323 = 8992;
        *((_QWORD *)v322 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(*a1, " #", 2uLL);
      }
      if (*(_DWORD *)(v274 + 8))
        v324 = *(_QWORD *)(v274 + 40);
      else
        v324 = 0;
      AttributeGroupSlot = llvm::SlotTracker::getAttributeGroupSlot((uint64_t)a1[4], v324);
      v326 = AttributeGroupSlot;
      if (AttributeGroupSlot < 0)
      {
        v326 = -(uint64_t)AttributeGroupSlot;
        v327 = v322;
        v328 = 1;
      }
      else
      {
        v327 = v322;
        v328 = 0;
      }
      sub_1C5E21910(v327, v326, 0, 0, v328);
    }
    sub_1C5322124((llvm::raw_ostream *)a1, v270);
    goto LABEL_185;
  }
  if (v74 == 33)
    v279 = a2;
  else
    v279 = 0;
  if (v74 == 33)
  {
    v280 = *(uint64_t **)(a2 - 32);
    v281 = *(_QWORD *)(a2 + 64);
    v282 = *(_QWORD *)(a2 + 72);
    v283 = **(_QWORD **)(v282 + 16);
    if ((*(_WORD *)(a2 + 18) & 0xFFC) != 0)
    {
      v284 = *a1;
      v285 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if (*((_BYTE **)*a1 + 3) == v285)
      {
        llvm::raw_ostream::write(v284, " ", 1uLL);
      }
      else
      {
        *v285 = 32;
        ++*((_QWORD *)v284 + 4);
      }
      sub_1C53193F0((llvm::raw_ostream *)((*(unsigned __int16 *)(a2 + 18) >> 2) & 0x3FF), *a1);
    }
    if (v281 && *(_DWORD *)(v281 + 8) >= 2u && *(_QWORD *)(v281 + 48))
    {
      v354 = *a1;
      v355 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v355 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(*a1, 32);
      }
      else
      {
        *((_QWORD *)v354 + 4) = v355 + 1;
        *v355 = 32;
      }
      if (*(_DWORD *)(v281 + 8) >= 2u && (v424 = *(llvm::AttributeSetNode **)(v281 + 48)) != 0)
      {
        llvm::AttributeSetNode::getAsString(v424, 0, __p);
        v425 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      }
      else
      {
        v425 = 0;
        *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
        __p[0].__r_.__value_.__s.__data_[0] = 0;
      }
      v426 = v425 < 0;
      v427 = v425 >= 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      v428 = v425 & 0x7F;
      v429 = v426 ? __p[0].__r_.__value_.__l.__size_ : v428;
      llvm::raw_ostream::write(v354, (const char *)v427, v429);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    sub_1C5321EF4(*v280, a2, *a1);
    v286 = *a1;
    v287 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v287 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v286, 32);
    }
    else
    {
      *((_QWORD *)v286 + 4) = v287 + 1;
      *v287 = 32;
    }
    if (*(_DWORD *)(v282 + 8) <= 0xFFu)
      v329 = v283;
    else
      v329 = v282;
    sub_1C530D7AC((uint64_t)(a1 + 5), v329);
    v330 = *a1;
    v331 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v331 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v330, 32);
    }
    else
    {
      *((_QWORD *)v330 + 4) = v331 + 1;
      *v331 = 32;
    }
    sub_1C531AA44((char ***)a1, (llvm::detail::DoubleAPFloat *)v280, 0);
    v334 = *a1;
    v335 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v335 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v334, 40);
    }
    else
    {
      *((_QWORD *)v334 + 4) = v335 + 1;
      *v335 = 40;
    }
    v336 = *(unsigned __int8 *)(a2 + 16);
    if (v336 == 84)
    {
      v337 = 0;
    }
    else if (v336 == 39)
    {
      v337 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      v337 = 2;
    }
    v338 = *(_DWORD *)(a2 + 20);
    if (v338 < 0 && (v452 = a2 - 32 * (v338 & 0x7FFFFFF), v453 = *(_QWORD *)(v452 - 8), (v453 & 0xFFFFFFFF0) != 0))
    {
      v340 = -(uint64_t)(v338 & 0x7FFFFFF);
      v339 = (*(_DWORD *)(v452 - 12) - *(_DWORD *)(v452 - v453));
    }
    else
    {
      v339 = 0;
      v340 = -(uint64_t)(v338 & 0x7FFFFFF);
    }
    v341 = -32 * v337 - 32 * v339 - 32 * v340 - 32;
    if ((v341 & 0x1FFFFFFFE0) != 0)
    {
      v342 = 0;
      v343 = (v341 >> 5);
      v344 = v279;
      do
      {
        if (v342)
        {
          v345 = *a1;
          v346 = (_WORD *)*((_QWORD *)*a1 + 4);
          if (*((_QWORD *)*a1 + 3) - (_QWORD)v346 > 1uLL)
          {
            *v346 = 8236;
            *((_QWORD *)v345 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v345, ", ", 2uLL);
          }
        }
        if (v281 && (v342 + 2) < *(_DWORD *)(v281 + 8))
          v347 = *(_QWORD *)(v281 + 40 + 8 * (v342 + 2));
        else
          v347 = 0;
        sub_1C5321FF0((uint64_t)a1, *(uint64_t **)(v344 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), v347);
        ++v342;
        v344 += 32;
      }
      while (v343 != v342);
    }
    v348 = *a1;
    v349 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v349 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v348, 41);
    }
    else
    {
      *((_QWORD *)v348 + 4) = v349 + 1;
      *v349 = 41;
    }
    if (v281 && *(_DWORD *)(v281 + 8) && *(_QWORD *)(v281 + 40))
    {
      v356 = *a1;
      v357 = (_WORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v357 > 1uLL)
      {
        *v357 = 8992;
        *((_QWORD *)v356 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(*a1, " #", 2uLL);
      }
      if (*(_DWORD *)(v281 + 8))
        v358 = *(_QWORD *)(v281 + 40);
      else
        v358 = 0;
      v359 = llvm::SlotTracker::getAttributeGroupSlot((uint64_t)a1[4], v358);
      v360 = v359;
      if (v359 < 0)
      {
        v360 = -(uint64_t)v359;
        v361 = v356;
        v362 = 1;
      }
      else
      {
        v361 = v356;
        v362 = 0;
      }
      sub_1C5E21910(v361, v360, 0, 0, v362);
    }
    sub_1C5322124((llvm::raw_ostream *)a1, v279);
    v350 = *a1;
    v351 = (void *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v351 > 0xDuLL)
    {
      qmemcpy(v351, "\n          to ", 14);
      *((_QWORD *)v350 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v350, "\n          to ", 0xEuLL);
    }
    sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(v279 - 96), 1);
    v352 = *a1;
    v353 = (_QWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v353 > 7uLL)
    {
      *v353 = 0x20646E69776E7520;
      *((_QWORD *)v352 + 4) += 8;
    }
    else
    {
      llvm::raw_ostream::write(v352, " unwind ", 8uLL);
    }
    v136 = *(llvm::detail::DoubleAPFloat **)(v279 - 64);
    goto LABEL_184;
  }
  if (v74 == 39)
    v291 = a2;
  else
    v291 = 0;
  if (v74 == 39)
  {
    v292 = *(llvm::detail::DoubleAPFloat **)(a2 - 32);
    v293 = *(_QWORD *)(a2 + 64);
    v294 = *(_QWORD *)(a2 + 72);
    v295 = **(_QWORD **)(v294 + 16);
    v456 = a2 - 32;
    if ((*(_WORD *)(a2 + 18) & 0xFFC) != 0)
    {
      v296 = *a1;
      v297 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if (*((_BYTE **)*a1 + 3) == v297)
      {
        llvm::raw_ostream::write(v296, " ", 1uLL);
      }
      else
      {
        *v297 = 32;
        ++*((_QWORD *)v296 + 4);
      }
      sub_1C53193F0((llvm::raw_ostream *)((*(unsigned __int16 *)(a2 + 18) >> 2) & 0x3FF), *a1);
    }
    if (v293 && *(_DWORD *)(v293 + 8) >= 2u && *(_QWORD *)(v293 + 48))
    {
      v393 = *a1;
      v394 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v394 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(*a1, 32);
      }
      else
      {
        *((_QWORD *)v393 + 4) = v394 + 1;
        *v394 = 32;
      }
      if (*(_DWORD *)(v293 + 8) >= 2u && (v432 = *(llvm::AttributeSetNode **)(v293 + 48)) != 0)
      {
        llvm::AttributeSetNode::getAsString(v432, 0, __p);
        v433 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
      }
      else
      {
        v433 = 0;
        *((_BYTE *)&__p[0].__r_.__value_.__s + 23) = 0;
        __p[0].__r_.__value_.__s.__data_[0] = 0;
      }
      v434 = v433 < 0;
      v435 = v433 >= 0 ? __p : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      v436 = v433 & 0x7F;
      v437 = v434 ? __p[0].__r_.__value_.__l.__size_ : v436;
      llvm::raw_ostream::write(v393, (const char *)v435, v437);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    v298 = *a1;
    v299 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v299 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v298, 32);
    }
    else
    {
      *((_QWORD *)v298 + 4) = v299 + 1;
      *v299 = 32;
    }
    if (*(_DWORD *)(v294 + 8) <= 0xFFu)
      v363 = v295;
    else
      v363 = v294;
    sub_1C530D7AC((uint64_t)(a1 + 5), v363);
    v364 = *a1;
    v365 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v365 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v364, 32);
    }
    else
    {
      *((_QWORD *)v364 + 4) = v365 + 1;
      *v365 = 32;
    }
    sub_1C531AA44((char ***)a1, v292, 0);
    v368 = *a1;
    v369 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v369 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v368, 40);
    }
    else
    {
      *((_QWORD *)v368 + 4) = v369 + 1;
      *v369 = 40;
    }
    v370 = *(unsigned __int8 *)(a2 + 16);
    if (v370 == 84)
    {
      v371 = 0;
    }
    else if (v370 == 39)
    {
      v371 = (*(_DWORD *)(a2 + 80) + 1);
    }
    else
    {
      v371 = 2;
    }
    v372 = *(_DWORD *)(a2 + 20);
    if (v372 < 0 && (v454 = a2 - 32 * (v372 & 0x7FFFFFF), v455 = *(_QWORD *)(v454 - 8), (v455 & 0xFFFFFFFF0) != 0))
    {
      v374 = -(uint64_t)(v372 & 0x7FFFFFF);
      v373 = (*(_DWORD *)(v454 - 12) - *(_DWORD *)(v454 - v455));
    }
    else
    {
      v373 = 0;
      v374 = -(uint64_t)(v372 & 0x7FFFFFF);
    }
    v375 = -32 * v371 - 32 * v373 - 32 * v374 - 32;
    if ((v375 & 0x1FFFFFFFE0) != 0)
    {
      v376 = 0;
      v377 = (v375 >> 5);
      v378 = v291;
      do
      {
        if (v376)
        {
          v379 = *a1;
          v380 = (_WORD *)*((_QWORD *)*a1 + 4);
          if (*((_QWORD *)*a1 + 3) - (_QWORD)v380 > 1uLL)
          {
            *v380 = 8236;
            *((_QWORD *)v379 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v379, ", ", 2uLL);
          }
        }
        if (v293 && (v376 + 2) < *(_DWORD *)(v293 + 8))
          v381 = *(_QWORD *)(v293 + 40 + 8 * (v376 + 2));
        else
          v381 = 0;
        sub_1C5321FF0((uint64_t)a1, *(uint64_t **)(v378 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF)), v381);
        ++v376;
        v378 += 32;
      }
      while (v377 != v376);
    }
    v382 = *a1;
    v383 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v383 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v382, 41);
    }
    else
    {
      *((_QWORD *)v382 + 4) = v383 + 1;
      *v383 = 41;
    }
    if (v293 && *(_DWORD *)(v293 + 8) && *(_QWORD *)(v293 + 40))
    {
      v395 = *a1;
      v396 = (_WORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v396 > 1uLL)
      {
        *v396 = 8992;
        *((_QWORD *)v395 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(*a1, " #", 2uLL);
      }
      if (*(_DWORD *)(v293 + 8))
        v397 = *(_QWORD *)(v293 + 40);
      else
        v397 = 0;
      v398 = llvm::SlotTracker::getAttributeGroupSlot((uint64_t)a1[4], v397);
      v399 = v398;
      if (v398 < 0)
      {
        v399 = -(uint64_t)v398;
        v400 = v395;
        v401 = 1;
      }
      else
      {
        v400 = v395;
        v401 = 0;
      }
      sub_1C5E21910(v400, v399, 0, 0, v401);
    }
    sub_1C5322124((llvm::raw_ostream *)a1, v291);
    v384 = *a1;
    v385 = (void *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v385 > 0xDuLL)
    {
      qmemcpy(v385, "\n          to ", 14);
      *((_QWORD *)v384 + 4) += 14;
    }
    else
    {
      llvm::raw_ostream::write(v384, "\n          to ", 0xEuLL);
    }
    sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(v456 - 32 * *(unsigned int *)(v291 + 80) - 32), 1);
    v386 = *a1;
    v387 = (_WORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v387 > 1uLL)
    {
      *v387 = 23328;
      *((_QWORD *)v386 + 4) += 2;
    }
    else
    {
      llvm::raw_ostream::write(v386, " [", 2uLL);
    }
    v388 = *(unsigned int *)(v291 + 80);
    if ((_DWORD)v388)
    {
      v389 = 0;
      v390 = 32 * v388;
      do
      {
        if (v389)
        {
          v391 = *a1;
          v392 = (_WORD *)*((_QWORD *)*a1 + 4);
          if (*((_QWORD *)*a1 + 3) - (_QWORD)v392 > 1uLL)
          {
            *v392 = 8236;
            *((_QWORD *)v391 + 4) += 2;
          }
          else
          {
            llvm::raw_ostream::write(v391, ", ", 2uLL);
          }
        }
        sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(v456 - 32 * *(unsigned int *)(v291 + 80) + v389), 1);
        v389 += 32;
      }
      while (v390 != v389);
    }
LABEL_159:
    v121 = *a1;
    v122 = (char *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v122 < *((_QWORD *)*a1 + 3))
    {
      *((_QWORD *)v121 + 4) = v122 + 1;
      v123 = 93;
LABEL_161:
      *v122 = v123;
      goto LABEL_185;
    }
    v124 = 93;
    goto LABEL_163;
  }
  if (v74 == 59)
  {
    v332 = *a1;
    v333 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v333 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v332, 32);
    }
    else
    {
      *((_QWORD *)v332 + 4) = v333 + 1;
      *v333 = 32;
    }
    if ((*(_WORD *)(a2 + 18) & 0x40) != 0)
    {
      v408 = *a1;
      v409 = *((_QWORD *)*a1 + 4);
      if ((unint64_t)(*((_QWORD *)*a1 + 3) - v409) > 8)
      {
        *(_BYTE *)(v409 + 8) = 32;
        *(_QWORD *)v409 = *(_QWORD *)"inalloca ";
        *((_QWORD *)v408 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v408, "inalloca ", 9uLL);
      }
    }
    if ((*(_WORD *)(a2 + 18) & 0x80) != 0)
    {
      v410 = *a1;
      v411 = *((_QWORD *)*a1 + 4);
      if ((unint64_t)(*((_QWORD *)*a1 + 3) - v411) > 0xA)
      {
        *(_DWORD *)(v411 + 7) = 544370546;
        *(_QWORD *)v411 = *(_QWORD *)"swifterror ";
        *((_QWORD *)v410 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v410, "swifterror ", 0xBuLL);
      }
    }
    sub_1C530D7AC((uint64_t)(a1 + 5), *(_QWORD *)(a2 + 64));
    v412 = *(_QWORD *)(a2 - 32);
    if (!v412
      || (llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)a2) & 1) != 0
      || *(_DWORD *)(*(_QWORD *)v412 + 8) != 8205)
    {
      v413 = *a1;
      v414 = (_WORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v414 > 1uLL)
      {
        *v414 = 8236;
        *((_QWORD *)v413 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v413, ", ", 2uLL);
      }
      sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(a2 - 32), 1);
    }
    v415 = *(_WORD *)(a2 + 18) & 0x3F;
    v416 = *a1;
    v417 = (_QWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v417 > 7uLL)
    {
      *v417 = 0x206E67696C61202CLL;
      *((_QWORD *)v416 + 4) += 8;
    }
    else
    {
      v416 = llvm::raw_ostream::write(v416, ", align ", 8uLL);
    }
    sub_1C5E21910(v416, 1 << v415, 0, 0, 0);
    v418 = *(unsigned int *)(*(_QWORD *)a2 + 8);
    if (v418 < 0x100)
      goto LABEL_185;
    v419 = v418 >> 8;
    v420 = *a1;
    v421 = *((_QWORD *)*a1 + 4);
    if ((unint64_t)(*((_QWORD *)*a1 + 3) - v421) > 0xB)
    {
      *(_DWORD *)(v421 + 8) = 677733217;
      *(_QWORD *)v421 = *(_QWORD *)", addrspace(";
      *((_QWORD *)v420 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(*a1, ", addrspace(", 0xCuLL);
    }
    sub_1C5E21910(v420, v419, 0, 0, 0);
    v122 = (char *)*((_QWORD *)v420 + 4);
    if ((unint64_t)v122 < *((_QWORD *)v420 + 3))
    {
      *((_QWORD *)v420 + 4) = v122 + 1;
      v123 = 41;
      goto LABEL_161;
    }
    v121 = v420;
    v124 = 41;
LABEL_163:
    llvm::raw_ostream::write(v121, v124);
    goto LABEL_185;
  }
  if ((v74 - 66) <= 0xC)
  {
    if (v75)
    {
      v366 = *a1;
      v367 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v367 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(v366, 32);
      }
      else
      {
        *((_QWORD *)v366 + 4) = v367 + 1;
        *v367 = 32;
      }
      sub_1C531AA44((char ***)a1, v75, 1);
    }
    v438 = *a1;
    v439 = (_DWORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v439 <= 3uLL)
    {
      v440 = " to ";
      v441 = 4;
LABEL_704:
      llvm::raw_ostream::write(v438, v440, v441);
LABEL_705:
      sub_1C530D7AC((uint64_t)(a1 + 5), *(_QWORD *)a2);
      goto LABEL_185;
    }
    *v439 = 544175136;
    v449 = *((_QWORD *)v438 + 4) + 4;
    goto LABEL_732;
  }
  if (v74 == 88)
  {
    if (v75)
    {
      v422 = *a1;
      v423 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v423 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(v422, 32);
      }
      else
      {
        *((_QWORD *)v422 + 4) = v423 + 1;
        *v423 = 32;
      }
      sub_1C531AA44((char ***)a1, v75, 1);
    }
    v438 = *a1;
    v442 = (_WORD *)*((_QWORD *)*a1 + 4);
    if (*((_QWORD *)*a1 + 3) - (_QWORD)v442 <= 1uLL)
    {
      v440 = ", ";
      v441 = 2;
      goto LABEL_704;
    }
    *v442 = 8236;
    v449 = *((_QWORD *)v438 + 4) + 2;
LABEL_732:
    *((_QWORD *)v438 + 4) = v449;
    goto LABEL_705;
  }
  if (v75)
  {
    if (v74 == 60)
    {
      v443 = *a1;
      v444 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v444 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(v443, 32);
      }
      else
      {
        *((_QWORD *)v443 + 4) = v444 + 1;
        *v444 = 32;
      }
      v445 = (uint64_t)(a1 + 5);
      v446 = *(_QWORD *)a2;
    }
    else
    {
      if (v74 != 62)
        goto LABEL_112;
      v430 = *a1;
      v431 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if ((unint64_t)v431 >= *((_QWORD *)*a1 + 3))
      {
        llvm::raw_ostream::write(v430, 32);
      }
      else
      {
        *((_QWORD *)v430 + 4) = v431 + 1;
        *v431 = 32;
      }
      v445 = (uint64_t)(a1 + 5);
      v446 = *(_QWORD *)(a2 + 64);
    }
    sub_1C530D7AC(v445, v446);
    v447 = *a1;
    v448 = (_BYTE *)*((_QWORD *)*a1 + 4);
    if ((unint64_t)v448 >= *((_QWORD *)*a1 + 3))
    {
      llvm::raw_ostream::write(v447, 44);
    }
    else
    {
      *((_QWORD *)v447 + 4) = v448 + 1;
      *v448 = 44;
    }
LABEL_112:
    v85 = *(_QWORD *)v75;
    v86 = *(unsigned __int8 *)(a2 + 16) - 29;
    if (v86 >= 0x3F || ((0x4100000100000001uLL >> v86) & 1) == 0)
    {
      v87 = *(_DWORD *)(a2 + 20);
      v88 = (v87 & 0x7FFFFFF) - 1;
      if ((v87 & 0x7FFFFFF) == 1)
      {
LABEL_121:
        v92 = *a1;
        v93 = (_BYTE *)*((_QWORD *)*a1 + 4);
        if ((unint64_t)v93 >= *((_QWORD *)*a1 + 3))
        {
          llvm::raw_ostream::write(v92, 32);
        }
        else
        {
          *((_QWORD *)v92 + 4) = v93 + 1;
          *v93 = 32;
        }
        sub_1C530D7AC((uint64_t)(a1 + 5), v85);
        v172 = 0;
LABEL_245:
        v173 = *a1;
        v174 = (_BYTE *)*((_QWORD *)*a1 + 4);
        if ((unint64_t)v174 >= *((_QWORD *)*a1 + 3))
        {
          llvm::raw_ostream::write(v173, 32);
        }
        else
        {
          *((_QWORD *)v173 + 4) = v174 + 1;
          *v174 = 32;
        }
        v175 = *(_DWORD *)(a2 + 20) & 0x7FFFFFF;
        if ((_DWORD)v175)
        {
          v176 = 0;
          v177 = 32 * v175;
          do
          {
            if (v176)
            {
              v178 = *a1;
              v179 = (_WORD *)*((_QWORD *)*a1 + 4);
              if (*((_QWORD *)*a1 + 3) - (_QWORD)v179 > 1uLL)
              {
                *v179 = 8236;
                *((_QWORD *)v178 + 4) += 2;
              }
              else
              {
                llvm::raw_ostream::write(v178, ", ", 2uLL);
              }
            }
            v180 = *(_DWORD *)(a2 + 20);
            if ((v180 & 0x40000000) != 0)
              v181 = *(_QWORD *)(a2 - 8);
            else
              v181 = a2 - 32 * (v180 & 0x7FFFFFF);
            sub_1C531AA44((char ***)a1, *(llvm::detail::DoubleAPFloat **)(v181 + v176), v172);
            v176 += 32;
          }
          while (v177 != v176);
        }
        goto LABEL_185;
      }
      v89 = 32;
      while (1)
      {
        v90 = a2 - 32 * (v87 & 0x7FFFFFF);
        if ((v87 & 0x40000000) != 0)
          v90 = *(_QWORD *)(a2 - 8);
        v91 = *(_QWORD **)(v90 + v89);
        if (v91)
        {
          if (*v91 != v85)
            break;
        }
        v89 += 32;
        if (!--v88)
          goto LABEL_121;
      }
    }
    v172 = 1;
    goto LABEL_245;
  }
LABEL_185:
  switch(*(_BYTE *)(a2 + 16))
  {
    case '<':
    case '=':
      v137 = *(unsigned __int16 *)(a2 + 18);
      if ((v137 & 0x380) != 0)
      {
        sub_1C532246C((llvm::raw_ostream *)a1, ***(_QWORD ***)a2, (v137 >> 7) & 7, *(unsigned __int8 *)(a2 + 60));
        v137 = *(unsigned __int16 *)(a2 + 18);
      }
      v138 = (v137 >> 1) & 0x3F;
      v139 = *a1;
      v140 = (_QWORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v140 > 7uLL)
      {
        *v140 = 0x206E67696C61202CLL;
        *((_QWORD *)v139 + 4) += 8;
      }
      else
      {
        v139 = llvm::raw_ostream::write(v139, ", align ", 8uLL);
      }
      v141 = 1 << v138;
      goto LABEL_208;
    case '>':
      break;
    case '?':
      sub_1C532246C((llvm::raw_ostream *)a1, ***(_QWORD ***)a2, *(_WORD *)(a2 + 18) & 7, *(unsigned __int8 *)(a2 + 60));
      break;
    case '@':
      v142 = *(unsigned __int16 *)(a2 + 18);
      sub_1C5322A48((llvm::raw_ostream *)a1, ***(_QWORD ***)a2, *(unsigned __int8 *)(a2 + 60));
      v143 = *a1;
      v144 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if (*((_BYTE **)*a1 + 3) == v144)
      {
        llvm::raw_ostream::write(*a1, " ", 1uLL);
      }
      else
      {
        *v144 = 32;
        ++*((_QWORD *)v143 + 4);
      }
      v145 = off_1EF8EB230[(v142 >> 2) & 7];
      if (v145)
      {
        v146 = strlen(v145);
        v147 = (void *)*((_QWORD *)v143 + 4);
        if (v146 <= *((_QWORD *)v143 + 3) - (_QWORD)v147)
        {
          if (v146)
          {
            memcpy(v147, v145, v146);
            *((_QWORD *)v143 + 4) += v146;
          }
        }
        else
        {
          llvm::raw_ostream::write(v143, v145, v146);
        }
      }
      v148 = *a1;
      v149 = (_BYTE *)*((_QWORD *)*a1 + 4);
      if (*((_BYTE **)*a1 + 3) == v149)
      {
        llvm::raw_ostream::write(*a1, " ", 1uLL);
      }
      else
      {
        *v149 = 32;
        ++*((_QWORD *)v148 + 4);
      }
      v150 = off_1EF8EB230[v142 >> 5];
      if (v150)
      {
        v151 = strlen(v150);
        v152 = (void *)*((_QWORD *)v148 + 4);
        if (v151 <= *((_QWORD *)v148 + 3) - (_QWORD)v152)
        {
          if (v151)
          {
            memcpy(v152, v150, v151);
            *((_QWORD *)v148 + 4) += v151;
          }
        }
        else
        {
          llvm::raw_ostream::write(v148, v150, v151);
        }
      }
      goto LABEL_205;
    case 'A':
      sub_1C532246C((llvm::raw_ostream *)a1, ***(_QWORD ***)a2, (*(unsigned __int16 *)(a2 + 18) >> 1) & 7, *(unsigned __int8 *)(a2 + 60));
LABEL_205:
      v139 = *a1;
      v153 = (_QWORD *)*((_QWORD *)*a1 + 4);
      if (*((_QWORD *)*a1 + 3) - (_QWORD)v153 > 7uLL)
      {
        *v153 = 0x206E67696C61202CLL;
        *((_QWORD *)v139 + 4) += 8;
      }
      else
      {
        v139 = llvm::raw_ostream::write(v139, ", align ", 8uLL);
      }
      v141 = 1 << *(_BYTE *)(a2 + 19);
LABEL_208:
      sub_1C5E21910(v139, v141, 0, 0, 0);
      break;
    default:
      if (*(_BYTE *)(a2 + 16) == 91)
        sub_1C5322540(*a1, *(_QWORD *)a2, *(int **)(a2 + 64), *(unsigned int *)(a2 + 72));
      break;
  }
LABEL_209:
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__p[0].__r_.__value_.__r.__words[2];
  __p[0].__r_.__value_.__l.__size_ = 0x400000000;
  if (*(_QWORD *)(a2 + 48) || (*(_BYTE *)(a2 + 23) & 0x20) != 0)
    llvm::Instruction::getAllMetadataImpl(a2, (uint64_t)__p);
  sub_1C53190B8((uint64_t *)a1, __p, ", ", 2uLL);
  sub_1C5322914((char ***)a1, (llvm::GCRelocateInst *)a2);
  if ((std::string::size_type *)__p[0].__r_.__value_.__l.__data_ != &__p[0].__r_.__value_.__r.__words[2])
    free(__p[0].__r_.__value_.__l.__data_);
}

